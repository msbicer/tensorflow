<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_bbcodes_info{	function module()	{		return array(			'filename'	=> 'acp_bbcodes',			'title'		=> 'ACP_BBCODES',			'version'	=> '1.0.0',			'modes'		=> array(				'bbcodes'		=> array('title' => 'ACP_BBCODES', 'auth' => 'acl_a_bbcode', 'cat' => array('ACP_MESSAGES')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class ucp_profile_info{	function module()	{		return array(			'filename'	=> 'ucp_profile',			'title'		=> 'UCP_PROFILE',			'version'	=> '1.0.0',			'modes'		=> array(				'profile_info'	=> array('title' => 'UCP_PROFILE_PROFILE_INFO', 'auth' => '', 'cat' => array('UCP_PROFILE')),				'signature'		=> array('title' => 'UCP_PROFILE_SIGNATURE', 'auth' => '', 'cat' => array('UCP_PROFILE')),				'avatar'		=> array('title' => 'UCP_PROFILE_AVATAR', 'auth' => 'cfg_allow_avatar && (cfg_allow_avatar_local || cfg_allow_avatar_remote || cfg_allow_avatar_upload || cfg_allow_avatar_remote_upload)', 'cat' => array('UCP_PROFILE')),				'reg_details'	=> array('title' => 'UCP_PROFILE_REG_DETAILS', 'auth' => '', 'cat' => array('UCP_PROFILE')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?phpfunction iso_8859_1($string){	return utf8_encode($string);}function iso_8859_2($string){	static $transform = array(		"\x80" => "\xC2\x80",		"\x81" => "\xC2\x81",		"\x82" => "\xC2\x82",		"\x83" => "\xC2\x83",		"\x84" => "\xC2\x84",		"\x85" => "\xC2\x85",		"\x86" => "\xC2\x86",		"\x87" => "\xC2\x87",		"\x88" => "\xC2\x88",		"\x89" => "\xC2\x89",		"\x8A" => "\xC2\x8A",		"\x8B" => "\xC2\x8B",		"\x8C" => "\xC2\x8C",		"\x8D" => "\xC2\x8D",		"\x8E" => "\xC2\x8E",		"\x8F" => "\xC2\x8F",		"\x90" => "\xC2\x90",		"\x91" => "\xC2\x91",		"\x92" => "\xC2\x92",		"\x93" => "\xC2\x93",		"\x94" => "\xC2\x94",		"\x95" => "\xC2\x95",		"\x96" => "\xC2\x96",		"\x97" => "\xC2\x97",		"\x98" => "\xC2\x98",		"\x99" => "\xC2\x99",		"\x9A" => "\xC2\x9A",		"\x9B" => "\xC2\x9B",		"\x9C" => "\xC2\x9C",		"\x9D" => "\xC2\x9D",		"\x9E" => "\xC2\x9E",		"\x9F" => "\xC2\x9F",		"\xA0" => "\xC2\xA0",		"\xA1" => "\xC4\x84",		"\xA2" => "\xCB\x98",		"\xA3" => "\xC5\x81",		"\xA4" => "\xC2\xA4",		"\xA5" => "\xC4\xBD",		"\xA6" => "\xC5\x9A",		"\xA7" => "\xC2\xA7",		"\xA8" => "\xC2\xA8",		"\xA9" => "\xC5\xA0",		"\xAA" => "\xC5\x9E",		"\xAB" => "\xC5\xA4",		"\xAC" => "\xC5\xB9",		"\xAD" => "\xC2\xAD",		"\xAE" => "\xC5\xBD",		"\xAF" => "\xC5\xBB",		"\xB0" => "\xC2\xB0",		"\xB1" => "\xC4\x85",		"\xB2" => "\xCB\x9B",		"\xB3" => "\xC5\x82",		"\xB4" => "\xC2\xB4",		"\xB5" => "\xC4\xBE",		"\xB6" => "\xC5\x9B",		"\xB7" => "\xCB\x87",		"\xB8" => "\xC2\xB8",		"\xB9" => "\xC5\xA1",		"\xBA" => "\xC5\x9F",		"\xBB" => "\xC5\xA5",		"\xBC" => "\xC5\xBA",		"\xBD" => "\xCB\x9D",		"\xBE" => "\xC5\xBE",		"\xBF" => "\xC5\xBC",		"\xC0" => "\xC5\x94",		"\xC1" => "\xC3\x81",		"\xC2" => "\xC3\x82",		"\xC3" => "\xC4\x82",		"\xC4" => "\xC3\x84",		"\xC5" => "\xC4\xB9",		"\xC6" => "\xC4\x86",		"\xC7" => "\xC3\x87",		"\xC8" => "\xC4\x8C",		"\xC9" => "\xC3\x89",		"\xCA" => "\xC4\x98",		"\xCB" => "\xC3\x8B",		"\xCC" => "\xC4\x9A",		"\xCD" => "\xC3\x8D",		"\xCE" => "\xC3\x8E",		"\xCF" => "\xC4\x8E",		"\xD0" => "\xC4\x90",		"\xD1" => "\xC5\x83",		"\xD2" => "\xC5\x87",		"\xD3" => "\xC3\x93",		"\xD4" => "\xC3\x94",		"\xD5" => "\xC5\x90",		"\xD6" => "\xC3\x96",		"\xD7" => "\xC3\x97",		"\xD8" => "\xC5\x98",		"\xD9" => "\xC5\xAE",		"\xDA" => "\xC3\x9A",		"\xDB" => "\xC5\xB0",		"\xDC" => "\xC3\x9C",		"\xDD" => "\xC3\x9D",		"\xDE" => "\xC5\xA2",		"\xDF" => "\xC3\x9F",		"\xE0" => "\xC5\x95",		"\xE1" => "\xC3\xA1",		"\xE2" => "\xC3\xA2",		"\xE3" => "\xC4\x83",		"\xE4" => "\xC3\xA4",		"\xE5" => "\xC4\xBA",		"\xE6" => "\xC4\x87",		"\xE7" => "\xC3\xA7",		"\xE8" => "\xC4\x8D",		"\xE9" => "\xC3\xA9",		"\xEA" => "\xC4\x99",		"\xEB" => "\xC3\xAB",		"\xEC" => "\xC4\x9B",		"\xED" => "\xC3\xAD",		"\xEE" => "\xC3\xAE",		"\xEF" => "\xC4\x8F",		"\xF0" => "\xC4\x91",		"\xF1" => "\xC5\x84",		"\xF2" => "\xC5\x88",		"\xF3" => "\xC3\xB3",		"\xF4" => "\xC3\xB4",		"\xF5" => "\xC5\x91",		"\xF6" => "\xC3\xB6",		"\xF7" => "\xC3\xB7",		"\xF8" => "\xC5\x99",		"\xF9" => "\xC5\xAF",		"\xFA" => "\xC3\xBA",		"\xFB" => "\xC5\xB1",		"\xFC" => "\xC3\xBC",		"\xFD" => "\xC3\xBD",		"\xFE" => "\xC5\xA3",		"\xFF" => "\xCB\x99",	);	return strtr($string, $transform);}function iso_8859_4($string){	static $transform = array(		"\x80" => "\xC2\x80",		"\x81" => "\xC2\x81",		"\x82" => "\xC2\x82",		"\x83" => "\xC2\x83",		"\x84" => "\xC2\x84",		"\x85" => "\xC2\x85",		"\x86" => "\xC2\x86",		"\x87" => "\xC2\x87",		"\x88" => "\xC2\x88",		"\x89" => "\xC2\x89",		"\x8A" => "\xC2\x8A",		"\x8B" => "\xC2\x8B",		"\x8C" => "\xC2\x8C",		"\x8D" => "\xC2\x8D",		"\x8E" => "\xC2\x8E",		"\x8F" => "\xC2\x8F",		"\x90" => "\xC2\x90",		"\x91" => "\xC2\x91",		"\x92" => "\xC2\x92",		"\x93" => "\xC2\x93",		"\x94" => "\xC2\x94",		"\x95" => "\xC2\x95",		"\x96" => "\xC2\x96",		"\x97" => "\xC2\x97",		"\x98" => "\xC2\x98",		"\x99" => "\xC2\x99",		"\x9A" => "\xC2\x9A",		"\x9B" => "\xC2\x9B",		"\x9C" => "\xC2\x9C",		"\x9D" => "\xC2\x9D",		"\x9E" => "\xC2\x9E",		"\x9F" => "\xC2\x9F",		"\xA0" => "\xC2\xA0",		"\xA1" => "\xC4\x84",		"\xA2" => "\xC4\xB8",		"\xA3" => "\xC5\x96",		"\xA4" => "\xC2\xA4",		"\xA5" => "\xC4\xA8",		"\xA6" => "\xC4\xBB",		"\xA7" => "\xC2\xA7",		"\xA8" => "\xC2\xA8",		"\xA9" => "\xC5\xA0",		"\xAA" => "\xC4\x92",		"\xAB" => "\xC4\xA2",		"\xAC" => "\xC5\xA6",		"\xAD" => "\xC2\xAD",		"\xAE" => "\xC5\xBD",		"\xAF" => "\xC2\xAF",		"\xB0" => "\xC2\xB0",		"\xB1" => "\xC4\x85",		"\xB2" => "\xCB\x9B",		"\xB3" => "\xC5\x97",		"\xB4" => "\xC2\xB4",		"\xB5" => "\xC4\xA9",		"\xB6" => "\xC4\xBC",		"\xB7" => "\xCB\x87",		"\xB8" => "\xC2\xB8",		"\xB9" => "\xC5\xA1",		"\xBA" => "\xC4\x93",		"\xBB" => "\xC4\xA3",		"\xBC" => "\xC5\xA7",		"\xBD" => "\xC5\x8A",		"\xBE" => "\xC5\xBE",		"\xBF" => "\xC5\x8B",		"\xC0" => "\xC4\x80",		"\xC1" => "\xC3\x81",		"\xC2" => "\xC3\x82",		"\xC3" => "\xC3\x83",		"\xC4" => "\xC3\x84",		"\xC5" => "\xC3\x85",		"\xC6" => "\xC3\x86",		"\xC7" => "\xC4\xAE",		"\xC8" => "\xC4\x8C",		"\xC9" => "\xC3\x89",		"\xCA" => "\xC4\x98",		"\xCB" => "\xC3\x8B",		"\xCC" => "\xC4\x96",		"\xCD" => "\xC3\x8D",		"\xCE" => "\xC3\x8E",		"\xCF" => "\xC4\xAA",		"\xD0" => "\xC4\x90",		"\xD1" => "\xC5\x85",		"\xD2" => "\xC5\x8C",		"\xD3" => "\xC4\xB6",		"\xD4" => "\xC3\x94",		"\xD5" => "\xC3\x95",		"\xD6" => "\xC3\x96",		"\xD7" => "\xC3\x97",		"\xD8" => "\xC3\x98",		"\xD9" => "\xC5\xB2",		"\xDA" => "\xC3\x9A",		"\xDB" => "\xC3\x9B",		"\xDC" => "\xC3\x9C",		"\xDD" => "\xC5\xA8",		"\xDE" => "\xC5\xAA",		"\xDF" => "\xC3\x9F",		"\xE0" => "\xC4\x81",		"\xE1" => "\xC3\xA1",		"\xE2" => "\xC3\xA2",		"\xE3" => "\xC3\xA3",		"\xE4" => "\xC3\xA4",		"\xE5" => "\xC3\xA5",		"\xE6" => "\xC3\xA6",		"\xE7" => "\xC4\xAF",		"\xE8" => "\xC4\x8D",		"\xE9" => "\xC3\xA9",		"\xEA" => "\xC4\x99",		"\xEB" => "\xC3\xAB",		"\xEC" => "\xC4\x97",		"\xED" => "\xC3\xAD",		"\xEE" => "\xC3\xAE",		"\xEF" => "\xC4\xAB",		"\xF0" => "\xC4\x91",		"\xF1" => "\xC5\x86",		"\xF2" => "\xC5\x8D",		"\xF3" => "\xC4\xB7",		"\xF4" => "\xC3\xB4",		"\xF5" => "\xC3\xB5",		"\xF6" => "\xC3\xB6",		"\xF7" => "\xC3\xB7",		"\xF8" => "\xC3\xB8",		"\xF9" => "\xC5\xB3",		"\xFA" => "\xC3\xBA",		"\xFB" => "\xC3\xBB",		"\xFC" => "\xC3\xBC",		"\xFD" => "\xC5\xA9",		"\xFE" => "\xC5\xAB",		"\xFF" => "\xCB\x99",	);	return strtr($string, $transform);}function iso_8859_7($string){	static $transform = array(		"\x80" => "\xC2\x80",		"\x81" => "\xC2\x81",		"\x82" => "\xC2\x82",		"\x83" => "\xC2\x83",		"\x84" => "\xC2\x84",		"\x85" => "\xC2\x85",		"\x86" => "\xC2\x86",		"\x87" => "\xC2\x87",		"\x88" => "\xC2\x88",		"\x89" => "\xC2\x89",		"\x8A" => "\xC2\x8A",		"\x8B" => "\xC2\x8B",		"\x8C" => "\xC2\x8C",		"\x8D" => "\xC2\x8D",		"\x8E" => "\xC2\x8E",		"\x8F" => "\xC2\x8F",		"\x90" => "\xC2\x90",		"\x91" => "\xC2\x91",		"\x92" => "\xC2\x92",		"\x93" => "\xC2\x93",		"\x94" => "\xC2\x94",		"\x95" => "\xC2\x95",		"\x96" => "\xC2\x96",		"\x97" => "\xC2\x97",		"\x98" => "\xC2\x98",		"\x99" => "\xC2\x99",		"\x9A" => "\xC2\x9A",		"\x9B" => "\xC2\x9B",		"\x9C" => "\xC2\x9C",		"\x9D" => "\xC2\x9D",		"\x9E" => "\xC2\x9E",		"\x9F" => "\xC2\x9F",		"\xA0" => "\xC2\xA0",		"\xA1" => "\xE2\x80\x98",		"\xA2" => "\xE2\x80\x99",		"\xA3" => "\xC2\xA3",		"\xA4" => "\xE2\x82\xAC",		"\xA5" => "\xE2\x82\xAF",		"\xA6" => "\xC2\xA6",		"\xA7" => "\xC2\xA7",		"\xA8" => "\xC2\xA8",		"\xA9" => "\xC2\xA9",		"\xAA" => "\xCD\xBA",		"\xAB" => "\xC2\xAB",		"\xAC" => "\xC2\xAC",		"\xAD" => "\xC2\xAD",		"\xAF" => "\xE2\x80\x95",		"\xB0" => "\xC2\xB0",		"\xB1" => "\xC2\xB1",		"\xB2" => "\xC2\xB2",		"\xB3" => "\xC2\xB3",		"\xB4" => "\xCE\x84",		"\xB5" => "\xCE\x85",		"\xB6" => "\xCE\x86",		"\xB7" => "\xC2\xB7",		"\xB8" => "\xCE\x88",		"\xB9" => "\xCE\x89",		"\xBA" => "\xCE\x8A",		"\xBB" => "\xC2\xBB",		"\xBC" => "\xCE\x8C",		"\xBD" => "\xC2\xBD",		"\xBE" => "\xCE\x8E",		"\xBF" => "\xCE\x8F",		"\xC0" => "\xCE\x90",		"\xC1" => "\xCE\x91",		"\xC2" => "\xCE\x92",		"\xC3" => "\xCE\x93",		"\xC4" => "\xCE\x94",		"\xC5" => "\xCE\x95",		"\xC6" => "\xCE\x96",		"\xC7" => "\xCE\x97",		"\xC8" => "\xCE\x98",		"\xC9" => "\xCE\x99",		"\xCA" => "\xCE\x9A",		"\xCB" => "\xCE\x9B",		"\xCC" => "\xCE\x9C",		"\xCD" => "\xCE\x9D",		"\xCE" => "\xCE\x9E",		"\xCF" => "\xCE\x9F",		"\xD0" => "\xCE\xA0",		"\xD1" => "\xCE\xA1",		"\xD3" => "\xCE\xA3",		"\xD4" => "\xCE\xA4",		"\xD5" => "\xCE\xA5",		"\xD6" => "\xCE\xA6",		"\xD7" => "\xCE\xA7",		"\xD8" => "\xCE\xA8",		"\xD9" => "\xCE\xA9",		"\xDA" => "\xCE\xAA",		"\xDB" => "\xCE\xAB",		"\xDC" => "\xCE\xAC",		"\xDD" => "\xCE\xAD",		"\xDE" => "\xCE\xAE",		"\xDF" => "\xCE\xAF",		"\xE0" => "\xCE\xB0",		"\xE1" => "\xCE\xB1",		"\xE2" => "\xCE\xB2",		"\xE3" => "\xCE\xB3",		"\xE4" => "\xCE\xB4",		"\xE5" => "\xCE\xB5",		"\xE6" => "\xCE\xB6",		"\xE7" => "\xCE\xB7",		"\xE8" => "\xCE\xB8",		"\xE9" => "\xCE\xB9",		"\xEA" => "\xCE\xBA",		"\xEB" => "\xCE\xBB",		"\xEC" => "\xCE\xBC",		"\xED" => "\xCE\xBD",		"\xEE" => "\xCE\xBE",		"\xEF" => "\xCE\xBF",		"\xF0" => "\xCF\x80",		"\xF1" => "\xCF\x81",		"\xF2" => "\xCF\x82",		"\xF3" => "\xCF\x83",		"\xF4" => "\xCF\x84",		"\xF5" => "\xCF\x85",		"\xF6" => "\xCF\x86",		"\xF7" => "\xCF\x87",		"\xF8" => "\xCF\x88",		"\xF9" => "\xCF\x89",		"\xFA" => "\xCF\x8A",		"\xFB" => "\xCF\x8B",		"\xFC" => "\xCF\x8C",		"\xFD" => "\xCF\x8D",		"\xFE" => "\xCF\x8E",	);	return strtr($string, $transform);}function iso_8859_8($string){	static $transform = array(		"\xC2\xAA" => "\xC3\x97",		"\xC2\xBA" => "\xC3\xB7",		"\xC3\x9F" => "\xE2\x80\x97",		"\xC3\xA0" => "\xD7\x90",		"\xC3\xA1" => "\xD7\x91",		"\xC3\xA2" => "\xD7\x92",		"\xC3\xA3" => "\xD7\x93",		"\xC3\xA4" => "\xD7\x94",		"\xC3\xA5" => "\xD7\x95",		"\xC3\xA6" => "\xD7\x96",		"\xC3\xA7" => "\xD7\x97",		"\xC3\xA8" => "\xD7\x98",		"\xC3\xA9" => "\xD7\x99",		"\xC3\xAA" => "\xD7\x9A",		"\xC3\xAB" => "\xD7\x9B",		"\xC3\xAC" => "\xD7\x9C",		"\xC3\xAD" => "\xD7\x9D",		"\xC3\xAE" => "\xD7\x9E",		"\xC3\xAF" => "\xD7\x9F",		"\xC3\xB0" => "\xD7\xA0",		"\xC3\xB1" => "\xD7\xA1",		"\xC3\xB2" => "\xD7\xA2",		"\xC3\xB3" => "\xD7\xA3",		"\xC3\xB4" => "\xD7\xA4",		"\xC3\xB5" => "\xD7\xA5",		"\xC3\xB6" => "\xD7\xA6",		"\xC3\xB7" => "\xD7\xA7",		"\xC3\xB8" => "\xD7\xA8",		"\xC3\xB9" => "\xD7\xA9",		"\xC3\xBA" => "\xD7\xAA",		"\xC3\xBD" => "\xE2\x80\x8E",		"\xC3\xBE" => "\xE2\x80\x8F",	);	return strtr(utf8_encode($string), $transform);}function iso_8859_9($string){	static $transform = array(		"\xC3\x90" => "\xC4\x9E",		"\xC3\x9D" => "\xC4\xB0",		"\xC3\x9E" => "\xC5\x9E",		"\xC3\xB0" => "\xC4\x9F",		"\xC3\xBD" => "\xC4\xB1",		"\xC3\xBE" => "\xC5\x9F",	);	return strtr(utf8_encode($string), $transform);}function iso_8859_15($string){	static $transform = array(		"\xC2\xA4" => "\xE2\x82\xAC",		"\xC2\xA6" => "\xC5\xA0",		"\xC2\xA8" => "\xC5\xA1",		"\xC2\xB4" => "\xC5\xBD",		"\xC2\xB8" => "\xC5\xBE",		"\xC2\xBC" => "\xC5\x92",		"\xC2\xBD" => "\xC5\x93",		"\xC2\xBE" => "\xC5\xB8",	);	return strtr(utf8_encode($string), $transform);}// nearly the same as iso-8859-11function tis_620($string){	static $transform = array(		"\x80" => "\xC2\x80",		"\x81" => "\xC2\x81",		"\x82" => "\xC2\x82",		"\x83" => "\xC2\x83",		"\x84" => "\xC2\x84",		"\x85" => "\xC2\x85",		"\x86" => "\xC2\x86",		"\x87" => "\xC2\x87",		"\x88" => "\xC2\x88",		"\x89" => "\xC2\x89",		"\x8A" => "\xC2\x8A",		"\x8B" => "\xC2\x8B",		"\x8C" => "\xC2\x8C",		"\x8D" => "\xC2\x8D",		"\x8E" => "\xC2\x8E",		"\x8F" => "\xC2\x8F",		"\x90" => "\xC2\x90",		"\x91" => "\xC2\x91",		"\x92" => "\xC2\x92",		"\x93" => "\xC2\x93",		"\x94" => "\xC2\x94",		"\x95" => "\xC2\x95",		"\x96" => "\xC2\x96",		"\x97" => "\xC2\x97",		"\x98" => "\xC2\x98",		"\x99" => "\xC2\x99",		"\x9A" => "\xC2\x9A",		"\x9B" => "\xC2\x9B",		"\x9C" => "\xC2\x9C",		"\x9D" => "\xC2\x9D",		"\x9E" => "\xC2\x9E",		"\x9F" => "\xC2\x9F",		"\xA1" => "\xE0\xB8\x81",		"\xA2" => "\xE0\xB8\x82",		"\xA3" => "\xE0\xB8\x83",		"\xA4" => "\xE0\xB8\x84",		"\xA5" => "\xE0\xB8\x85",		"\xA6" => "\xE0\xB8\x86",		"\xA7" => "\xE0\xB8\x87",		"\xA8" => "\xE0\xB8\x88",		"\xA9" => "\xE0\xB8\x89",		"\xAA" => "\xE0\xB8\x8A",		"\xAB" => "\xE0\xB8\x8B",		"\xAC" => "\xE0\xB8\x8C",		"\xAD" => "\xE0\xB8\x8D",		"\xAE" => "\xE0\xB8\x8E",		"\xAF" => "\xE0\xB8\x8F",		"\xB0" => "\xE0\xB8\x90",		"\xB1" => "\xE0\xB8\x91",		"\xB2" => "\xE0\xB8\x92",		"\xB3" => "\xE0\xB8\x93",		"\xB4" => "\xE0\xB8\x94",		"\xB5" => "\xE0\xB8\x95",		"\xB6" => "\xE0\xB8\x96",		"\xB7" => "\xE0\xB8\x97",		"\xB8" => "\xE0\xB8\x98",		"\xB9" => "\xE0\xB8\x99",		"\xBA" => "\xE0\xB8\x9A",		"\xBB" => "\xE0\xB8\x9B",		"\xBC" => "\xE0\xB8\x9C",		"\xBD" => "\xE0\xB8\x9D",		"\xBE" => "\xE0\xB8\x9E",		"\xBF" => "\xE0\xB8\x9F",		"\xC0" => "\xE0\xB8\xA0",		"\xC1" => "\xE0\xB8\xA1",		"\xC2" => "\xE0\xB8\xA2",		"\xC3" => "\xE0\xB8\xA3",		"\xC4" => "\xE0\xB8\xA4",		"\xC5" => "\xE0\xB8\xA5",		"\xC6" => "\xE0\xB8\xA6",		"\xC7" => "\xE0\xB8\xA7",		"\xC8" => "\xE0\xB8\xA8",		"\xC9" => "\xE0\xB8\xA9",		"\xCA" => "\xE0\xB8\xAA",		"\xCB" => "\xE0\xB8\xAB",		"\xCC" => "\xE0\xB8\xAC",		"\xCD" => "\xE0\xB8\xAD",		"\xCE" => "\xE0\xB8\xAE",		"\xCF" => "\xE0\xB8\xAF",		"\xD0" => "\xE0\xB8\xB0",		"\xD1" => "\xE0\xB8\xB1",		"\xD2" => "\xE0\xB8\xB2",		"\xD3" => "\xE0\xB8\xB3",		"\xD4" => "\xE0\xB8\xB4",		"\xD5" => "\xE0\xB8\xB5",		"\xD6" => "\xE0\xB8\xB6",		"\xD7" => "\xE0\xB8\xB7",		"\xD8" => "\xE0\xB8\xB8",		"\xD9" => "\xE0\xB8\xB9",		"\xDA" => "\xE0\xB8\xBA",		"\xDF" => "\xE0\xB8\xBF",		"\xE0" => "\xE0\xB9\x80",		"\xE1" => "\xE0\xB9\x81",		"\xE2" => "\xE0\xB9\x82",		"\xE3" => "\xE0\xB9\x83",		"\xE4" => "\xE0\xB9\x84",		"\xE5" => "\xE0\xB9\x85",		"\xE6" => "\xE0\xB9\x86",		"\xE7" => "\xE0\xB9\x87",		"\xE8" => "\xE0\xB9\x88",		"\xE9" => "\xE0\xB9\x89",		"\xEA" => "\xE0\xB9\x8A",		"\xEB" => "\xE0\xB9\x8B",		"\xEC" => "\xE0\xB9\x8C",		"\xED" => "\xE0\xB9\x8D",		"\xEE" => "\xE0\xB9\x8E",		"\xEF" => "\xE0\xB9\x8F",		"\xF0" => "\xE0\xB9\x90",		"\xF1" => "\xE0\xB9\x91",		"\xF2" => "\xE0\xB9\x92",		"\xF3" => "\xE0\xB9\x93",		"\xF4" => "\xE0\xB9\x94",		"\xF5" => "\xE0\xB9\x95",		"\xF6" => "\xE0\xB9\x96",		"\xF7" => "\xE0\xB9\x97",		"\xF8" => "\xE0\xB9\x98",		"\xF9" => "\xE0\xB9\x99",		"\xFA" => "\xE0\xB9\x9A",		"\xFB" => "\xE0\xB9\x9B",	);	return strtr($string, $transform);}function cp874($string){	static $transform = array(		"\x80" => "\xE2\x82\xAC",		"\x85" => "\xE2\x80\xA6",		"\x91" => "\xE2\x80\x98",		"\x92" => "\xE2\x80\x99",		"\x93" => "\xE2\x80\x9C",		"\x94" => "\xE2\x80\x9D",		"\x95" => "\xE2\x80\xA2",		"\x96" => "\xE2\x80\x93",		"\x97" => "\xE2\x80\x94",		"\xA0" => "\xC2\xA0",		"\xA1" => "\xE0\xB8\x81",		"\xA2" => "\xE0\xB8\x82",		"\xA3" => "\xE0\xB8\x83",		"\xA4" => "\xE0\xB8\x84",		"\xA5" => "\xE0\xB8\x85",		"\xA6" => "\xE0\xB8\x86",		"\xA7" => "\xE0\xB8\x87",		"\xA8" => "\xE0\xB8\x88",		"\xA9" => "\xE0\xB8\x89",		"\xAA" => "\xE0\xB8\x8A",		"\xAB" => "\xE0\xB8\x8B",		"\xAC" => "\xE0\xB8\x8C",		"\xAD" => "\xE0\xB8\x8D",		"\xAE" => "\xE0\xB8\x8E",		"\xAF" => "\xE0\xB8\x8F",		"\xB0" => "\xE0\xB8\x90",		"\xB1" => "\xE0\xB8\x91",		"\xB2" => "\xE0\xB8\x92",		"\xB3" => "\xE0\xB8\x93",		"\xB4" => "\xE0\xB8\x94",		"\xB5" => "\xE0\xB8\x95",		"\xB6" => "\xE0\xB8\x96",		"\xB7" => "\xE0\xB8\x97",		"\xB8" => "\xE0\xB8\x98",		"\xB9" => "\xE0\xB8\x99",		"\xBA" => "\xE0\xB8\x9A",		"\xBB" => "\xE0\xB8\x9B",		"\xBC" => "\xE0\xB8\x9C",		"\xBD" => "\xE0\xB8\x9D",		"\xBE" => "\xE0\xB8\x9E",		"\xBF" => "\xE0\xB8\x9F",		"\xC0" => "\xE0\xB8\xA0",		"\xC1" => "\xE0\xB8\xA1",		"\xC2" => "\xE0\xB8\xA2",		"\xC3" => "\xE0\xB8\xA3",		"\xC4" => "\xE0\xB8\xA4",		"\xC5" => "\xE0\xB8\xA5",		"\xC6" => "\xE0\xB8\xA6",		"\xC7" => "\xE0\xB8\xA7",		"\xC8" => "\xE0\xB8\xA8",		"\xC9" => "\xE0\xB8\xA9",		"\xCA" => "\xE0\xB8\xAA",		"\xCB" => "\xE0\xB8\xAB",		"\xCC" => "\xE0\xB8\xAC",		"\xCD" => "\xE0\xB8\xAD",		"\xCE" => "\xE0\xB8\xAE",		"\xCF" => "\xE0\xB8\xAF",		"\xD0" => "\xE0\xB8\xB0",		"\xD1" => "\xE0\xB8\xB1",		"\xD2" => "\xE0\xB8\xB2",		"\xD3" => "\xE0\xB8\xB3",		"\xD4" => "\xE0\xB8\xB4",		"\xD5" => "\xE0\xB8\xB5",		"\xD6" => "\xE0\xB8\xB6",		"\xD7" => "\xE0\xB8\xB7",		"\xD8" => "\xE0\xB8\xB8",		"\xD9" => "\xE0\xB8\xB9",		"\xDA" => "\xE0\xB8\xBA",		"\xDF" => "\xE0\xB8\xBF",		"\xE0" => "\xE0\xB9\x80",		"\xE1" => "\xE0\xB9\x81",		"\xE2" => "\xE0\xB9\x82",		"\xE3" => "\xE0\xB9\x83",		"\xE4" => "\xE0\xB9\x84",		"\xE5" => "\xE0\xB9\x85",		"\xE6" => "\xE0\xB9\x86",		"\xE7" => "\xE0\xB9\x87",		"\xE8" => "\xE0\xB9\x88",		"\xE9" => "\xE0\xB9\x89",		"\xEA" => "\xE0\xB9\x8A",		"\xEB" => "\xE0\xB9\x8B",		"\xEC" => "\xE0\xB9\x8C",		"\xED" => "\xE0\xB9\x8D",		"\xEE" => "\xE0\xB9\x8E",		"\xEF" => "\xE0\xB9\x8F",		"\xF0" => "\xE0\xB9\x90",		"\xF1" => "\xE0\xB9\x91",		"\xF2" => "\xE0\xB9\x92",		"\xF3" => "\xE0\xB9\x93",		"\xF4" => "\xE0\xB9\x94",		"\xF5" => "\xE0\xB9\x95",		"\xF6" => "\xE0\xB9\x96",		"\xF7" => "\xE0\xB9\x97",		"\xF8" => "\xE0\xB9\x98",		"\xF9" => "\xE0\xB9\x99",		"\xFA" => "\xE0\xB9\x9A",		"\xFB" => "\xE0\xB9\x9B",	);	return strtr($string, $transform);}function cp1250($string){	static $transform = array(		"\x80" => "\xE2\x82\xAC",		"\x82" => "\xE2\x80\x9A",		"\x84" => "\xE2\x80\x9E",		"\x85" => "\xE2\x80\xA6",		"\x86" => "\xE2\x80\xA0",		"\x87" => "\xE2\x80\xA1",		"\x89" => "\xE2\x80\xB0",		"\x8A" => "\xC5\xA0",		"\x8B" => "\xE2\x80\xB9",		"\x8C" => "\xC5\x9A",		"\x8D" => "\xC5\xA4",		"\x8E" => "\xC5\xBD",		"\x8F" => "\xC5\xB9",		"\x91" => "\xE2\x80\x98",		"\x92" => "\xE2\x80\x99",		"\x93" => "\xE2\x80\x9C",		"\x94" => "\xE2\x80\x9D",		"\x95" => "\xE2\x80\xA2",		"\x96" => "\xE2\x80\x93",		"\x97" => "\xE2\x80\x94",		"\x99" => "\xE2\x84\xA2",		"\x9A" => "\xC5\xA1",		"\x9B" => "\xE2\x80\xBA",		"\x9C" => "\xC5\x9B",		"\x9D" => "\xC5\xA5",		"\x9E" => "\xC5\xBE",		"\x9F" => "\xC5\xBA",		"\xA0" => "\xC2\xA0",		"\xA1" => "\xCB\x87",		"\xA2" => "\xCB\x98",		"\xA3" => "\xC5\x81",		"\xA4" => "\xC2\xA4",		"\xA5" => "\xC4\x84",		"\xA6" => "\xC2\xA6",		"\xA7" => "\xC2\xA7",		"\xA8" => "\xC2\xA8",		"\xA9" => "\xC2\xA9",		"\xAA" => "\xC5\x9E",		"\xAB" => "\xC2\xAB",		"\xAC" => "\xC2\xAC",		"\xAD" => "\xC2\xAD",		"\xAE" => "\xC2\xAE",		"\xAF" => "\xC5\xBB",		"\xB0" => "\xC2\xB0",		"\xB1" => "\xC2\xB1",		"\xB2" => "\xCB\x9B",		"\xB3" => "\xC5\x82",		"\xB4" => "\xC2\xB4",		"\xB5" => "\xC2\xB5",		"\xB6" => "\xC2\xB6",		"\xB7" => "\xC2\xB7",		"\xB8" => "\xC2\xB8",		"\xB9" => "\xC4\x85",		"\xBA" => "\xC5\x9F",		"\xBB" => "\xC2\xBB",		"\xBC" => "\xC4\xBD",		"\xBD" => "\xCB\x9D",		"\xBE" => "\xC4\xBE",		"\xBF" => "\xC5\xBC",		"\xC0" => "\xC5\x94",		"\xC1" => "\xC3\x81",		"\xC2" => "\xC3\x82",		"\xC3" => "\xC4\x82",		"\xC4" => "\xC3\x84",		"\xC5" => "\xC4\xB9",		"\xC6" => "\xC4\x86",		"\xC7" => "\xC3\x87",		"\xC8" => "\xC4\x8C",		"\xC9" => "\xC3\x89",		"\xCA" => "\xC4\x98",		"\xCB" => "\xC3\x8B",		"\xCC" => "\xC4\x9A",		"\xCD" => "\xC3\x8D",		"\xCE" => "\xC3\x8E",		"\xCF" => "\xC4\x8E",		"\xD0" => "\xC4\x90",		"\xD1" => "\xC5\x83",		"\xD2" => "\xC5\x87",		"\xD3" => "\xC3\x93",		"\xD4" => "\xC3\x94",		"\xD5" => "\xC5\x90",		"\xD6" => "\xC3\x96",		"\xD7" => "\xC3\x97",		"\xD8" => "\xC5\x98",		"\xD9" => "\xC5\xAE",		"\xDA" => "\xC3\x9A",		"\xDB" => "\xC5\xB0",		"\xDC" => "\xC3\x9C",		"\xDD" => "\xC3\x9D",		"\xDE" => "\xC5\xA2",		"\xDF" => "\xC3\x9F",		"\xE0" => "\xC5\x95",		"\xE1" => "\xC3\xA1",		"\xE2" => "\xC3\xA2",		"\xE3" => "\xC4\x83",		"\xE4" => "\xC3\xA4",		"\xE5" => "\xC4\xBA",		"\xE6" => "\xC4\x87",		"\xE7" => "\xC3\xA7",		"\xE8" => "\xC4\x8D",		"\xE9" => "\xC3\xA9",		"\xEA" => "\xC4\x99",		"\xEB" => "\xC3\xAB",		"\xEC" => "\xC4\x9B",		"\xED" => "\xC3\xAD",		"\xEE" => "\xC3\xAE",		"\xEF" => "\xC4\x8F",		"\xF0" => "\xC4\x91",		"\xF1" => "\xC5\x84",		"\xF2" => "\xC5\x88",		"\xF3" => "\xC3\xB3",		"\xF4" => "\xC3\xB4",		"\xF5" => "\xC5\x91",		"\xF6" => "\xC3\xB6",		"\xF7" => "\xC3\xB7",		"\xF8" => "\xC5\x99",		"\xF9" => "\xC5\xAF",		"\xFA" => "\xC3\xBA",		"\xFB" => "\xC5\xB1",		"\xFC" => "\xC3\xBC",		"\xFD" => "\xC3\xBD",		"\xFE" => "\xC5\xA3",		"\xFF" => "\xCB\x99",	);	return strtr($string, $transform);}function cp1251($string){	static $transform = array(		"\x80" => "\xD0\x82",		"\x81" => "\xD0\x83",		"\x82" => "\xE2\x80\x9A",		"\x83" => "\xD1\x93",		"\x84" => "\xE2\x80\x9E",		"\x85" => "\xE2\x80\xA6",		"\x86" => "\xE2\x80\xA0",		"\x87" => "\xE2\x80\xA1",		"\x88" => "\xE2\x82\xAC",		"\x89" => "\xE2\x80\xB0",		"\x8A" => "\xD0\x89",		"\x8B" => "\xE2\x80\xB9",		"\x8C" => "\xD0\x8A",		"\x8D" => "\xD0\x8C",		"\x8E" => "\xD0\x8B",		"\x8F" => "\xD0\x8F",		"\x90" => "\xD1\x92",		"\x91" => "\xE2\x80\x98",		"\x92" => "\xE2\x80\x99",		"\x93" => "\xE2\x80\x9C",		"\x94" => "\xE2\x80\x9D",		"\x95" => "\xE2\x80\xA2",		"\x96" => "\xE2\x80\x93",		"\x97" => "\xE2\x80\x94",		"\x99" => "\xE2\x84\xA2",		"\x9A" => "\xD1\x99",		"\x9B" => "\xE2\x80\xBA",		"\x9C" => "\xD1\x9A",		"\x9D" => "\xD1\x9C",		"\x9E" => "\xD1\x9B",		"\x9F" => "\xD1\x9F",		"\xA0" => "\xC2\xA0",		"\xA1" => "\xD0\x8E",		"\xA2" => "\xD1\x9E",		"\xA3" => "\xD0\x88",		"\xA4" => "\xC2\xA4",		"\xA5" => "\xD2\x90",		"\xA6" => "\xC2\xA6",		"\xA7" => "\xC2\xA7",		"\xA8" => "\xD0\x81",		"\xA9" => "\xC2\xA9",		"\xAA" => "\xD0\x84",		"\xAB" => "\xC2\xAB",		"\xAC" => "\xC2\xAC",		"\xAD" => "\xC2\xAD",		"\xAE" => "\xC2\xAE",		"\xAF" => "\xD0\x87",		"\xB0" => "\xC2\xB0",		"\xB1" => "\xC2\xB1",		"\xB2" => "\xD0\x86",		"\xB3" => "\xD1\x96",		"\xB4" => "\xD2\x91",		"\xB5" => "\xC2\xB5",		"\xB6" => "\xC2\xB6",		"\xB7" => "\xC2\xB7",		"\xB8" => "\xD1\x91",		"\xB9" => "\xE2\x84\x96",		"\xBA" => "\xD1\x94",		"\xBB" => "\xC2\xBB",		"\xBC" => "\xD1\x98",		"\xBD" => "\xD0\x85",		"\xBE" => "\xD1\x95",		"\xBF" => "\xD1\x97",		"\xC0" => "\xD0\x90",		"\xC1" => "\xD0\x91",		"\xC2" => "\xD0\x92",		"\xC3" => "\xD0\x93",		"\xC4" => "\xD0\x94",		"\xC5" => "\xD0\x95",		"\xC6" => "\xD0\x96",		"\xC7" => "\xD0\x97",		"\xC8" => "\xD0\x98",		"\xC9" => "\xD0\x99",		"\xCA" => "\xD0\x9A",		"\xCB" => "\xD0\x9B",		"\xCC" => "\xD0\x9C",		"\xCD" => "\xD0\x9D",		"\xCE" => "\xD0\x9E",		"\xCF" => "\xD0\x9F",		"\xD0" => "\xD0\xA0",		"\xD1" => "\xD0\xA1",		"\xD2" => "\xD0\xA2",		"\xD3" => "\xD0\xA3",		"\xD4" => "\xD0\xA4",		"\xD5" => "\xD0\xA5",		"\xD6" => "\xD0\xA6",		"\xD7" => "\xD0\xA7",		"\xD8" => "\xD0\xA8",		"\xD9" => "\xD0\xA9",		"\xDA" => "\xD0\xAA",		"\xDB" => "\xD0\xAB",		"\xDC" => "\xD0\xAC",		"\xDD" => "\xD0\xAD",		"\xDE" => "\xD0\xAE",		"\xDF" => "\xD0\xAF",		"\xE0" => "\xD0\xB0",		"\xE1" => "\xD0\xB1",		"\xE2" => "\xD0\xB2",		"\xE3" => "\xD0\xB3",		"\xE4" => "\xD0\xB4",		"\xE5" => "\xD0\xB5",		"\xE6" => "\xD0\xB6",		"\xE7" => "\xD0\xB7",		"\xE8" => "\xD0\xB8",		"\xE9" => "\xD0\xB9",		"\xEA" => "\xD0\xBA",		"\xEB" => "\xD0\xBB",		"\xEC" => "\xD0\xBC",		"\xED" => "\xD0\xBD",		"\xEE" => "\xD0\xBE",		"\xEF" => "\xD0\xBF",		"\xF0" => "\xD1\x80",		"\xF1" => "\xD1\x81",		"\xF2" => "\xD1\x82",		"\xF3" => "\xD1\x83",		"\xF4" => "\xD1\x84",		"\xF5" => "\xD1\x85",		"\xF6" => "\xD1\x86",		"\xF7" => "\xD1\x87",		"\xF8" => "\xD1\x88",		"\xF9" => "\xD1\x89",		"\xFA" => "\xD1\x8A",		"\xFB" => "\xD1\x8B",		"\xFC" => "\xD1\x8C",		"\xFD" => "\xD1\x8D",		"\xFE" => "\xD1\x8E",		"\xFF" => "\xD1\x8F",	);	return strtr($string, $transform);}function cp1252($string){	static $transform = array(		"\xC2\x80" => "\xE2\x82\xAC",		"\xC2\x82" => "\xE2\x80\x9A",		"\xC2\x83" => "\xC6\x92",		"\xC2\x84" => "\xE2\x80\x9E",		"\xC2\x85" => "\xE2\x80\xA6",		"\xC2\x86" => "\xE2\x80\xA0",		"\xC2\x87" => "\xE2\x80\xA1",		"\xC2\x88" => "\xCB\x86",		"\xC2\x89" => "\xE2\x80\xB0",		"\xC2\x8A" => "\xC5\xA0",		"\xC2\x8B" => "\xE2\x80\xB9",		"\xC2\x8C" => "\xC5\x92",		"\xC2\x8E" => "\xC5\xBD",		"\xC2\x91" => "\xE2\x80\x98",		"\xC2\x92" => "\xE2\x80\x99",		"\xC2\x93" => "\xE2\x80\x9C",		"\xC2\x94" => "\xE2\x80\x9D",		"\xC2\x95" => "\xE2\x80\xA2",		"\xC2\x96" => "\xE2\x80\x93",		"\xC2\x97" => "\xE2\x80\x94",		"\xC2\x98" => "\xCB\x9C",		"\xC2\x99" => "\xE2\x84\xA2",		"\xC2\x9A" => "\xC5\xA1",		"\xC2\x9B" => "\xE2\x80\xBA",		"\xC2\x9C" => "\xC5\x93",		"\xC2\x9E" => "\xC5\xBE",		"\xC2\x9F" => "\xC5\xB8"	);	return strtr(utf8_encode($string), $transform);}function cp1254($string){	static $transform = array(		"\xC2\x80" => "\xE2\x82\xAC",		"\xC2\x82" => "\xE2\x80\x9A",		"\xC2\x83" => "\xC6\x92",		"\xC2\x84" => "\xE2\x80\x9E",		"\xC2\x85" => "\xE2\x80\xA6",		"\xC2\x86" => "\xE2\x80\xA0",		"\xC2\x87" => "\xE2\x80\xA1",		"\xC2\x88" => "\xCB\x86",		"\xC2\x89" => "\xE2\x80\xB0",		"\xC2\x8A" => "\xC5\xA0",		"\xC2\x8B" => "\xE2\x80\xB9",		"\xC2\x8C" => "\xC5\x92",		"\xC2\x91" => "\xE2\x80\x98",		"\xC2\x92" => "\xE2\x80\x99",		"\xC2\x93" => "\xE2\x80\x9C",		"\xC2\x94" => "\xE2\x80\x9D",		"\xC2\x95" => "\xE2\x80\xA2",		"\xC2\x96" => "\xE2\x80\x93",		"\xC2\x97" => "\xE2\x80\x94",		"\xC2\x98" => "\xCB\x9C",		"\xC2\x99" => "\xE2\x84\xA2",		"\xC2\x9A" => "\xC5\xA1",		"\xC2\x9B" => "\xE2\x80\xBA",		"\xC2\x9C" => "\xC5\x93",		"\xC2\x9F" => "\xC5\xB8",		"\xC3\x90" => "\xC4\x9E",		"\xC3\x9D" => "\xC4\xB0",		"\xC3\x9E" => "\xC5\x9E",		"\xC3\xB0" => "\xC4\x9F",		"\xC3\xBD" => "\xC4\xB1",		"\xC3\xBE" => "\xC5\x9F",	);	return strtr(utf8_encode($string), $transform);}function cp1255($string){	static $transform = array(		"\x80" => "\xE2\x82\xAC",		"\x82" => "\xE2\x80\x9A",		"\x83" => "\xC6\x92",		"\x84" => "\xE2\x80\x9E",		"\x85" => "\xE2\x80\xA6",		"\x86" => "\xE2\x80\xA0",		"\x87" => "\xE2\x80\xA1",		"\x88" => "\xCB\x86",		"\x89" => "\xE2\x80\xB0",		"\x8B" => "\xE2\x80\xB9",		"\x91" => "\xE2\x80\x98",		"\x92" => "\xE2\x80\x99",		"\x93" => "\xE2\x80\x9C",		"\x94" => "\xE2\x80\x9D",		"\x95" => "\xE2\x80\xA2",		"\x96" => "\xE2\x80\x93",		"\x97" => "\xE2\x80\x94",		"\x98" => "\xCB\x9C",		"\x99" => "\xE2\x84\xA2",		"\x9B" => "\xE2\x80\xBA",		"\xA0" => "\xC2\xA0",		"\xA1" => "\xC2\xA1",		"\xA2" => "\xC2\xA2",		"\xA3" => "\xC2\xA3",		"\xA4" => "\xE2\x82\xAA",		"\xA5" => "\xC2\xA5",		"\xA6" => "\xC2\xA6",		"\xA7" => "\xC2\xA7",		"\xA8" => "\xC2\xA8",		"\xA9" => "\xC2\xA9",		"\xAA" => "\xC3\x97",		"\xAB" => "\xC2\xAB",		"\xAC" => "\xC2\xAC",		"\xAD" => "\xC2\xAD",		"\xAE" => "\xC2\xAE",		"\xAF" => "\xC2\xAF",		"\xB0" => "\xC2\xB0",		"\xB1" => "\xC2\xB1",		"\xB2" => "\xC2\xB2",		"\xB3" => "\xC2\xB3",		"\xB4" => "\xC2\xB4",		"\xB5" => "\xC2\xB5",		"\xB6" => "\xC2\xB6",		"\xB7" => "\xC2\xB7",		"\xB8" => "\xC2\xB8",		"\xB9" => "\xC2\xB9",		"\xBA" => "\xC3\xB7",		"\xBB" => "\xC2\xBB",		"\xBC" => "\xC2\xBC",		"\xBD" => "\xC2\xBD",		"\xBE" => "\xC2\xBE",		"\xBF" => "\xC2\xBF",		"\xC0" => "\xD6\xB0",		"\xC1" => "\xD6\xB1",		"\xC2" => "\xD6\xB2",		"\xC3" => "\xD6\xB3",		"\xC4" => "\xD6\xB4",		"\xC5" => "\xD6\xB5",		"\xC6" => "\xD6\xB6",		"\xC7" => "\xD6\xB7",		"\xC8" => "\xD6\xB8",		"\xC9" => "\xD6\xB9",		"\xCB" => "\xD6\xBB",		"\xCC" => "\xD6\xBC",		"\xCD" => "\xD6\xBD",		"\xCE" => "\xD6\xBE",		"\xCF" => "\xD6\xBF",		"\xD0" => "\xD7\x80",		"\xD1" => "\xD7\x81",		"\xD2" => "\xD7\x82",		"\xD3" => "\xD7\x83",		"\xD4" => "\xD7\xB0",		"\xD5" => "\xD7\xB1",		"\xD6" => "\xD7\xB2",		"\xD7" => "\xD7\xB3",		"\xD8" => "\xD7\xB4",		"\xE0" => "\xD7\x90",		"\xE1" => "\xD7\x91",		"\xE2" => "\xD7\x92",		"\xE3" => "\xD7\x93",		"\xE4" => "\xD7\x94",		"\xE5" => "\xD7\x95",		"\xE6" => "\xD7\x96",		"\xE7" => "\xD7\x97",		"\xE8" => "\xD7\x98",		"\xE9" => "\xD7\x99",		"\xEA" => "\xD7\x9A",		"\xEB" => "\xD7\x9B",		"\xEC" => "\xD7\x9C",		"\xED" => "\xD7\x9D",		"\xEE" => "\xD7\x9E",		"\xEF" => "\xD7\x9F",		"\xF0" => "\xD7\xA0",		"\xF1" => "\xD7\xA1",		"\xF2" => "\xD7\xA2",		"\xF3" => "\xD7\xA3",		"\xF4" => "\xD7\xA4",		"\xF5" => "\xD7\xA5",		"\xF6" => "\xD7\xA6",		"\xF7" => "\xD7\xA7",		"\xF8" => "\xD7\xA8",		"\xF9" => "\xD7\xA9",		"\xFA" => "\xD7\xAA",		"\xFD" => "\xE2\x80\x8E",		"\xFE" => "\xE2\x80\x8F",	);	return strtr($string, $transform);}function cp1256($string){	static $transform = array(		"\x80" => "\xE2\x82\xAC",		"\x81" => "\xD9\xBE",		"\x82" => "\xE2\x80\x9A",		"\x83" => "\xC6\x92",		"\x84" => "\xE2\x80\x9E",		"\x85" => "\xE2\x80\xA6",		"\x86" => "\xE2\x80\xA0",		"\x87" => "\xE2\x80\xA1",		"\x88" => "\xCB\x86",		"\x89" => "\xE2\x80\xB0",		"\x8A" => "\xD9\xB9",		"\x8B" => "\xE2\x80\xB9",		"\x8C" => "\xC5\x92",		"\x8D" => "\xDA\x86",		"\x8E" => "\xDA\x98",		"\x8F" => "\xDA\x88",		"\x90" => "\xDA\xAF",		"\x91" => "\xE2\x80\x98",		"\x92" => "\xE2\x80\x99",		"\x93" => "\xE2\x80\x9C",		"\x94" => "\xE2\x80\x9D",		"\x95" => "\xE2\x80\xA2",		"\x96" => "\xE2\x80\x93",		"\x97" => "\xE2\x80\x94",		"\x98" => "\xDA\xA9",		"\x99" => "\xE2\x84\xA2",		"\x9A" => "\xDA\x91",		"\x9B" => "\xE2\x80\xBA",		"\x9C" => "\xC5\x93",		"\x9D" => "\xE2\x80\x8C",		"\x9E" => "\xE2\x80\x8D",		"\x9F" => "\xDA\xBA",		"\xA0" => "\xC2\xA0",		"\xA1" => "\xD8\x8C",		"\xA2" => "\xC2\xA2",		"\xA3" => "\xC2\xA3",		"\xA4" => "\xC2\xA4",		"\xA5" => "\xC2\xA5",		"\xA6" => "\xC2\xA6",		"\xA7" => "\xC2\xA7",		"\xA8" => "\xC2\xA8",		"\xA9" => "\xC2\xA9",		"\xAA" => "\xDA\xBE",		"\xAB" => "\xC2\xAB",		"\xAC" => "\xC2\xAC",		"\xAD" => "\xC2\xAD",		"\xAE" => "\xC2\xAE",		"\xAF" => "\xC2\xAF",		"\xB0" => "\xC2\xB0",		"\xB1" => "\xC2\xB1",		"\xB2" => "\xC2\xB2",		"\xB3" => "\xC2\xB3",		"\xB4" => "\xC2\xB4",		"\xB5" => "\xC2\xB5",		"\xB6" => "\xC2\xB6",		"\xB7" => "\xC2\xB7",		"\xB8" => "\xC2\xB8",		"\xB9" => "\xC2\xB9",		"\xBA" => "\xD8\x9B",		"\xBB" => "\xC2\xBB",		"\xBC" => "\xC2\xBC",		"\xBD" => "\xC2\xBD",		"\xBE" => "\xC2\xBE",		"\xBF" => "\xD8\x9F",		"\xC0" => "\xDB\x81",		"\xC1" => "\xD8\xA1",		"\xC2" => "\xD8\xA2",		"\xC3" => "\xD8\xA3",		"\xC4" => "\xD8\xA4",		"\xC5" => "\xD8\xA5",		"\xC6" => "\xD8\xA6",		"\xC7" => "\xD8\xA7",		"\xC8" => "\xD8\xA8",		"\xC9" => "\xD8\xA9",		"\xCA" => "\xD8\xAA",		"\xCB" => "\xD8\xAB",		"\xCC" => "\xD8\xAC",		"\xCD" => "\xD8\xAD",		"\xCE" => "\xD8\xAE",		"\xCF" => "\xD8\xAF",		"\xD0" => "\xD8\xB0",		"\xD1" => "\xD8\xB1",		"\xD2" => "\xD8\xB2",		"\xD3" => "\xD8\xB3",		"\xD4" => "\xD8\xB4",		"\xD5" => "\xD8\xB5",		"\xD6" => "\xD8\xB6",		"\xD7" => "\xC3\x97",		"\xD8" => "\xD8\xB7",		"\xD9" => "\xD8\xB8",		"\xDA" => "\xD8\xB9",		"\xDB" => "\xD8\xBA",		"\xDC" => "\xD9\x80",		"\xDD" => "\xD9\x81",		"\xDE" => "\xD9\x82",		"\xDF" => "\xD9\x83",		"\xE0" => "\xC3\xA0",		"\xE1" => "\xD9\x84",		"\xE2" => "\xC3\xA2",		"\xE3" => "\xD9\x85",		"\xE4" => "\xD9\x86",		"\xE5" => "\xD9\x87",		"\xE6" => "\xD9\x88",		"\xE7" => "\xC3\xA7",		"\xE8" => "\xC3\xA8",		"\xE9" => "\xC3\xA9",		"\xEA" => "\xC3\xAA",		"\xEB" => "\xC3\xAB",		"\xEC" => "\xD9\x89",		"\xED" => "\xD9\x8A",		"\xEE" => "\xC3\xAE",		"\xEF" => "\xC3\xAF",		"\xF0" => "\xD9\x8B",		"\xF1" => "\xD9\x8C",		"\xF2" => "\xD9\x8D",		"\xF3" => "\xD9\x8E",		"\xF4" => "\xC3\xB4",		"\xF5" => "\xD9\x8F",		"\xF6" => "\xD9\x90",		"\xF7" => "\xC3\xB7",		"\xF8" => "\xD9\x91",		"\xF9" => "\xC3\xB9",		"\xFA" => "\xD9\x92",		"\xFB" => "\xC3\xBB",		"\xFC" => "\xC3\xBC",		"\xFD" => "\xE2\x80\x8E",		"\xFE" => "\xE2\x80\x8F",		"\xFF" => "\xDB\x92",	);	return strtr($string, $transform);}function cp1257($string){	static $transform = array(		"\x80" => "\xE2\x82\xAC",		"\x82" => "\xE2\x80\x9A",		"\x84" => "\xE2\x80\x9E",		"\x85" => "\xE2\x80\xA6",		"\x86" => "\xE2\x80\xA0",		"\x87" => "\xE2\x80\xA1",		"\x89" => "\xE2\x80\xB0",		"\x8B" => "\xE2\x80\xB9",		"\x8D" => "\xC2\xA8",		"\x8E" => "\xCB\x87",		"\x8F" => "\xC2\xB8",		"\x91" => "\xE2\x80\x98",		"\x92" => "\xE2\x80\x99",		"\x93" => "\xE2\x80\x9C",		"\x94" => "\xE2\x80\x9D",		"\x95" => "\xE2\x80\xA2",		"\x96" => "\xE2\x80\x93",		"\x97" => "\xE2\x80\x94",		"\x99" => "\xE2\x84\xA2",		"\x9B" => "\xE2\x80\xBA",		"\x9D" => "\xC2\xAF",		"\x9E" => "\xCB\x9B",		"\xA0" => "\xC2\xA0",		"\xA2" => "\xC2\xA2",		"\xA3" => "\xC2\xA3",		"\xA4" => "\xC2\xA4",		"\xA6" => "\xC2\xA6",		"\xA7" => "\xC2\xA7",		"\xA8" => "\xC3\x98",		"\xA9" => "\xC2\xA9",		"\xAA" => "\xC5\x96",		"\xAB" => "\xC2\xAB",		"\xAC" => "\xC2\xAC",		"\xAD" => "\xC2\xAD",		"\xAE" => "\xC2\xAE",		"\xAF" => "\xC3\x86",		"\xB0" => "\xC2\xB0",		"\xB1" => "\xC2\xB1",		"\xB2" => "\xC2\xB2",		"\xB3" => "\xC2\xB3",		"\xB4" => "\xC2\xB4",		"\xB5" => "\xC2\xB5",		"\xB6" => "\xC2\xB6",		"\xB7" => "\xC2\xB7",		"\xB8" => "\xC3\xB8",		"\xB9" => "\xC2\xB9",		"\xBA" => "\xC5\x97",		"\xBB" => "\xC2\xBB",		"\xBC" => "\xC2\xBC",		"\xBD" => "\xC2\xBD",		"\xBE" => "\xC2\xBE",		"\xBF" => "\xC3\xA6",		"\xC0" => "\xC4\x84",		"\xC1" => "\xC4\xAE",		"\xC2" => "\xC4\x80",		"\xC3" => "\xC4\x86",		"\xC4" => "\xC3\x84",		"\xC5" => "\xC3\x85",		"\xC6" => "\xC4\x98",		"\xC7" => "\xC4\x92",		"\xC8" => "\xC4\x8C",		"\xC9" => "\xC3\x89",		"\xCA" => "\xC5\xB9",		"\xCB" => "\xC4\x96",		"\xCC" => "\xC4\xA2",		"\xCD" => "\xC4\xB6",		"\xCE" => "\xC4\xAA",		"\xCF" => "\xC4\xBB",		"\xD0" => "\xC5\xA0",		"\xD1" => "\xC5\x83",		"\xD2" => "\xC5\x85",		"\xD3" => "\xC3\x93",		"\xD4" => "\xC5\x8C",		"\xD5" => "\xC3\x95",		"\xD6" => "\xC3\x96",		"\xD7" => "\xC3\x97",		"\xD8" => "\xC5\xB2",		"\xD9" => "\xC5\x81",		"\xDA" => "\xC5\x9A",		"\xDB" => "\xC5\xAA",		"\xDC" => "\xC3\x9C",		"\xDD" => "\xC5\xBB",		"\xDE" => "\xC5\xBD",		"\xDF" => "\xC3\x9F",		"\xE0" => "\xC4\x85",		"\xE1" => "\xC4\xAF",		"\xE2" => "\xC4\x81",		"\xE3" => "\xC4\x87",		"\xE4" => "\xC3\xA4",		"\xE5" => "\xC3\xA5",		"\xE6" => "\xC4\x99",		"\xE7" => "\xC4\x93",		"\xE8" => "\xC4\x8D",		"\xE9" => "\xC3\xA9",		"\xEA" => "\xC5\xBA",		"\xEB" => "\xC4\x97",		"\xEC" => "\xC4\xA3",		"\xED" => "\xC4\xB7",		"\xEE" => "\xC4\xAB",		"\xEF" => "\xC4\xBC",		"\xF0" => "\xC5\xA1",		"\xF1" => "\xC5\x84",		"\xF2" => "\xC5\x86",		"\xF3" => "\xC3\xB3",		"\xF4" => "\xC5\x8D",		"\xF5" => "\xC3\xB5",		"\xF6" => "\xC3\xB6",		"\xF7" => "\xC3\xB7",		"\xF8" => "\xC5\xB3",		"\xF9" => "\xC5\x82",		"\xFA" => "\xC5\x9B",		"\xFB" => "\xC5\xAB",		"\xFC" => "\xC3\xBC",		"\xFD" => "\xC5\xBC",		"\xFE" => "\xC5\xBE",		"\xFF" => "\xCB\x99",	);	return strtr($string, $transform);}function utf8_to_cp1252($string){	static $transform = array(		"\xE2\x82\xAC" => "\x80",		"\xE2\x80\x9A" => "\x82",		"\xC6\x92" => "\x83",		"\xE2\x80\x9E" => "\x84",		"\xE2\x80\xA6" => "\x85",		"\xE2\x80\xA0" => "\x86",		"\xE2\x80\xA1" => "\x87",		"\xCB\x86" => "\x88",		"\xE2\x80\xB0" => "\x89",		"\xC5\xA0" => "\x8A",		"\xE2\x80\xB9" => "\x8B",		"\xC5\x92" => "\x8C",		"\xC5\xBD" => "\x8E",		"\xE2\x80\x98" => "\x91",		"\xE2\x80\x99" => "\x92",		"\xE2\x80\x9C" => "\x93",		"\xE2\x80\x9D" => "\x94",		"\xE2\x80\xA2" => "\x95",		"\xE2\x80\x93" => "\x96",		"\xE2\x80\x94" => "\x97",		"\xCB\x9C" => "\x98",		"\xE2\x84\xA2" => "\x99",		"\xC5\xA1" => "\x9A",		"\xE2\x80\xBA" => "\x9B",		"\xC5\x93" => "\x9C",		"\xC5\xBE" => "\x9E",		"\xC5\xB8" => "\x9F",		"\xC2\xA0" => "\xA0",		"\xC2\xA1" => "\xA1",		"\xC2\xA2" => "\xA2",		"\xC2\xA3" => "\xA3",		"\xC2\xA4" => "\xA4",		"\xC2\xA5" => "\xA5",		"\xC2\xA6" => "\xA6",		"\xC2\xA7" => "\xA7",		"\xC2\xA8" => "\xA8",		"\xC2\xA9" => "\xA9",		"\xC2\xAA" => "\xAA",		"\xC2\xAB" => "\xAB",		"\xC2\xAC" => "\xAC",		"\xC2\xAD" => "\xAD",		"\xC2\xAE" => "\xAE",		"\xC2\xAF" => "\xAF",		"\xC2\xB0" => "\xB0",		"\xC2\xB1" => "\xB1",		"\xC2\xB2" => "\xB2",		"\xC2\xB3" => "\xB3",		"\xC2\xB4" => "\xB4",		"\xC2\xB5" => "\xB5",		"\xC2\xB6" => "\xB6",		"\xC2\xB7" => "\xB7",		"\xC2\xB8" => "\xB8",		"\xC2\xB9" => "\xB9",		"\xC2\xBA" => "\xBA",		"\xC2\xBB" => "\xBB",		"\xC2\xBC" => "\xBC",		"\xC2\xBD" => "\xBD",		"\xC2\xBE" => "\xBE",		"\xC2\xBF" => "\xBF",		"\xC3\x80" => "\xC0",		"\xC3\x81" => "\xC1",		"\xC3\x82" => "\xC2",		"\xC3\x83" => "\xC3",		"\xC3\x84" => "\xC4",		"\xC3\x85" => "\xC5",		"\xC3\x86" => "\xC6",		"\xC3\x87" => "\xC7",		"\xC3\x88" => "\xC8",		"\xC3\x89" => "\xC9",		"\xC3\x8A" => "\xCA",		"\xC3\x8B" => "\xCB",		"\xC3\x8C" => "\xCC",		"\xC3\x8D" => "\xCD",		"\xC3\x8E" => "\xCE",		"\xC3\x8F" => "\xCF",		"\xC3\x90" => "\xD0",		"\xC3\x91" => "\xD1",		"\xC3\x92" => "\xD2",		"\xC3\x93" => "\xD3",		"\xC3\x94" => "\xD4",		"\xC3\x95" => "\xD5",		"\xC3\x96" => "\xD6",		"\xC3\x97" => "\xD7",		"\xC3\x98" => "\xD8",		"\xC3\x99" => "\xD9",		"\xC3\x9A" => "\xDA",		"\xC3\x9B" => "\xDB",		"\xC3\x9C" => "\xDC",		"\xC3\x9D" => "\xDD",		"\xC3\x9E" => "\xDE",		"\xC3\x9F" => "\xDF",		"\xC3\xA0" => "\xE0",		"\xC3\xA1" => "\xE1",		"\xC3\xA2" => "\xE2",		"\xC3\xA3" => "\xE3",		"\xC3\xA4" => "\xE4",		"\xC3\xA5" => "\xE5",		"\xC3\xA6" => "\xE6",		"\xC3\xA7" => "\xE7",		"\xC3\xA8" => "\xE8",		"\xC3\xA9" => "\xE9",		"\xC3\xAA" => "\xEA",		"\xC3\xAB" => "\xEB",		"\xC3\xAC" => "\xEC",		"\xC3\xAD" => "\xED",		"\xC3\xAE" => "\xEE",		"\xC3\xAF" => "\xEF",		"\xC3\xB0" => "\xF0",		"\xC3\xB1" => "\xF1",		"\xC3\xB2" => "\xF2",		"\xC3\xB3" => "\xF3",		"\xC3\xB4" => "\xF4",		"\xC3\xB5" => "\xF5",		"\xC3\xB6" => "\xF6",		"\xC3\xB7" => "\xF7",		"\xC3\xB8" => "\xF8",		"\xC3\xB9" => "\xF9",		"\xC3\xBA" => "\xFA",		"\xC3\xBB" => "\xFB",		"\xC3\xBC" => "\xFC",		"\xC3\xBD" => "\xFD",		"\xC3\xBE" => "\xFE",		"\xC3\xBF" => "\xFF"	);	return strtr($string, $transform);}?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2005 2008 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ucp_confirm* Visual confirmation** Note to potential users of this code ...** Remember this is released under the _GPL_ and is subject* to that licence. Do not incorporate this within software* released or distributed in any way under a licence other* than the GPL. We will be watching ... ;)** @package VC*/class ucp_confirm{	var $u_action;	function main($id, $mode)	{		global $db, $user, $phpbb_root_path, $config, $phpEx;		include($phpbb_root_path . 'includes/captcha/captcha_factory.' . $phpEx);		$captcha = phpbb_captcha_factory::get_instance($config['captcha_plugin']);		$captcha->init(request_var('type', 0));		$captcha->execute();		garbage_collection();		exit_handler();	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$mode = request_var('mode', '');// Load the appropriate faq fileswitch ($mode){	case 'bbcode':		$l_title = $user->lang['BBCODE_GUIDE'];		$user->add_lang('bbcode', false, true);	break;	default:		$l_title = $user->lang['FAQ_EXPLAIN'];		$user->add_lang('faq', false, true);	break;}// Pull the array data from the lang pack$switch_column = $found_switch = false;$help_blocks = array();foreach ($user->help as $help_ary){	if ($help_ary[0] == '--')	{		if ($help_ary[1] == '--')		{			$switch_column = true;			$found_switch = true;			continue;		}		$template->assign_block_vars('faq_block', array(			'BLOCK_TITLE'		=> $help_ary[1],			'SWITCH_COLUMN'		=> $switch_column,		));		if ($switch_column)		{			$switch_column = false;		}		continue;	}	$template->assign_block_vars('faq_block.faq_row', array(		'FAQ_QUESTION'		=> $help_ary[0],		'FAQ_ANSWER'		=> $help_ary[1])	);}// Lets build a page ...$template->assign_vars(array(	'L_FAQ_TITLE'				=> $l_title,	'L_BACK_TO_TOP'				=> $user->lang['BACK_TO_TOP'],	'SWITCH_COLUMN_MANUALLY'	=> (!$found_switch) ? true : false,));page_header($l_title, false);$template->set_filenames(array(	'body' => 'faq_body.html'));make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"));page_footer();?>
<?php/**** LDAP auth plug-in for phpBB3** Authentication plug-ins is largely down to Sergey Kanareykin, our thanks to him.** @package login* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Connect to ldap server* Only allow changing authentication to ldap if we can connect to the ldap server* Called in acp_board while setting authentication plugins*/function init_ldap(){	global $config, $user;	if (!@extension_loaded('ldap'))	{		return $user->lang['LDAP_NO_LDAP_EXTENSION'];	}	$config['ldap_port'] = (int) $config['ldap_port'];	if ($config['ldap_port'])	{		$ldap = @ldap_connect($config['ldap_server'], $config['ldap_port']);	}	else	{		$ldap = @ldap_connect($config['ldap_server']);	}	if (!$ldap)	{		return $user->lang['LDAP_NO_SERVER_CONNECTION'];	}	@ldap_set_option($ldap, LDAP_OPT_PROTOCOL_VERSION, 3);	@ldap_set_option($ldap, LDAP_OPT_REFERRALS, 0);	if ($config['ldap_user'] || $config['ldap_password'])	{		if (!@ldap_bind($ldap, htmlspecialchars_decode($config['ldap_user']), htmlspecialchars_decode($config['ldap_password'])))		{			return $user->lang['LDAP_INCORRECT_USER_PASSWORD'];		}	}	// ldap_connect only checks whether the specified server is valid, so the connection might still fail	$search = @ldap_search(		$ldap,		htmlspecialchars_decode($config['ldap_base_dn']),		ldap_user_filter($user->data['username']),		(empty($config['ldap_email'])) ?			array(htmlspecialchars_decode($config['ldap_uid'])) :			array(htmlspecialchars_decode($config['ldap_uid']), htmlspecialchars_decode($config['ldap_email'])),		0,		1	);	if ($search === false)	{		return $user->lang['LDAP_SEARCH_FAILED'];	}	$result = @ldap_get_entries($ldap, $search);	@ldap_close($ldap);	if (!is_array($result) || sizeof($result) < 2)	{		return sprintf($user->lang['LDAP_NO_IDENTITY'], $user->data['username']);	}	if (!empty($config['ldap_email']) && !isset($result[0][htmlspecialchars_decode($config['ldap_email'])]))	{		return $user->lang['LDAP_NO_EMAIL'];	}	return false;}/*** Login function*/function login_ldap(&$username, &$password){	global $db, $config, $user;	// do not allow empty password	if (!$password)	{		return array(			'status'	=> LOGIN_ERROR_PASSWORD,			'error_msg'	=> 'NO_PASSWORD_SUPPLIED',			'user_row'	=> array('user_id' => ANONYMOUS),		);	}	if (!$username)	{		return array(			'status'	=> LOGIN_ERROR_USERNAME,			'error_msg'	=> 'LOGIN_ERROR_USERNAME',			'user_row'	=> array('user_id' => ANONYMOUS),		);	}	if (!@extension_loaded('ldap'))	{		return array(			'status'		=> LOGIN_ERROR_EXTERNAL_AUTH,			'error_msg'		=> 'LDAP_NO_LDAP_EXTENSION',			'user_row'		=> array('user_id' => ANONYMOUS),		);	}	$config['ldap_port'] = (int) $config['ldap_port'];	if ($config['ldap_port'])	{		$ldap = @ldap_connect($config['ldap_server'], $config['ldap_port']);	}	else	{		$ldap = @ldap_connect($config['ldap_server']);	}	if (!$ldap)	{		return array(			'status'		=> LOGIN_ERROR_EXTERNAL_AUTH,			'error_msg'		=> 'LDAP_NO_SERVER_CONNECTION',			'user_row'		=> array('user_id' => ANONYMOUS),		);	}	@ldap_set_option($ldap, LDAP_OPT_PROTOCOL_VERSION, 3);	@ldap_set_option($ldap, LDAP_OPT_REFERRALS, 0);	if ($config['ldap_user'] || $config['ldap_password'])	{		if (!@ldap_bind($ldap, htmlspecialchars_decode($config['ldap_user']), htmlspecialchars_decode($config['ldap_password'])))		{			return $user->lang['LDAP_NO_SERVER_CONNECTION'];		}	}	$search = @ldap_search(		$ldap,		htmlspecialchars_decode($config['ldap_base_dn']),		ldap_user_filter($username),		(empty($config['ldap_email'])) ?			array(htmlspecialchars_decode($config['ldap_uid'])) :			array(htmlspecialchars_decode($config['ldap_uid']), htmlspecialchars_decode($config['ldap_email'])),		0,		1	);	$ldap_result = @ldap_get_entries($ldap, $search);	if (is_array($ldap_result) && sizeof($ldap_result) > 1)	{		if (@ldap_bind($ldap, $ldap_result[0]['dn'], htmlspecialchars_decode($password)))		{			@ldap_close($ldap);			$sql ='SELECT user_id, username, user_password, user_passchg, user_email, user_type				FROM ' . USERS_TABLE . "				WHERE username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($row)			{				unset($ldap_result);				// User inactive...				if ($row['user_type'] == USER_INACTIVE || $row['user_type'] == USER_IGNORE)				{					return array(						'status'		=> LOGIN_ERROR_ACTIVE,						'error_msg'		=> 'ACTIVE_ERROR',						'user_row'		=> $row,					);				}				// Successful login... set user_login_attempts to zero...				return array(					'status'		=> LOGIN_SUCCESS,					'error_msg'		=> false,					'user_row'		=> $row,				);			}			else			{				// retrieve default group id				$sql = 'SELECT group_id					FROM ' . GROUPS_TABLE . "					WHERE group_name = '" . $db->sql_escape('REGISTERED') . "'						AND group_type = " . GROUP_SPECIAL;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error('NO_GROUP');				}				// generate user account data				$ldap_user_row = array(					'username'		=> $username,					'user_password'	=> phpbb_hash($password),					'user_email'	=> (!empty($config['ldap_email'])) ? utf8_htmlspecialchars($ldap_result[0][htmlspecialchars_decode($config['ldap_email'])][0]) : '',					'group_id'		=> (int) $row['group_id'],					'user_type'		=> USER_NORMAL,					'user_ip'		=> $user->ip,					'user_new'		=> ($config['new_member_post_limit']) ? 1 : 0,				);				unset($ldap_result);				// this is the user's first login so create an empty profile				return array(					'status'		=> LOGIN_SUCCESS_CREATE_PROFILE,					'error_msg'		=> false,					'user_row'		=> $ldap_user_row,				);			}		}		else		{			unset($ldap_result);			@ldap_close($ldap);			// Give status about wrong password...			return array(				'status'		=> LOGIN_ERROR_PASSWORD,				'error_msg'		=> 'LOGIN_ERROR_PASSWORD',				'user_row'		=> array('user_id' => ANONYMOUS),			);		}	}	@ldap_close($ldap);	return array(		'status'	=> LOGIN_ERROR_USERNAME,		'error_msg'	=> 'LOGIN_ERROR_USERNAME',		'user_row'	=> array('user_id' => ANONYMOUS),	);}/*** Generates a filter string for ldap_search to find a user** @param	$username	string	Username identifying the searched user** @return				string	A filter string for ldap_search*/function ldap_user_filter($username){	global $config;	$filter = '(' . $config['ldap_uid'] . '=' . ldap_escape(htmlspecialchars_decode($username)) . ')';	if ($config['ldap_user_filter'])	{		$_filter = ($config['ldap_user_filter'][0] == '(' && substr($config['ldap_user_filter'], -1) == ')') ? $config['ldap_user_filter'] : "({$config['ldap_user_filter']})";		$filter = "(&{$filter}{$_filter})";	}	return $filter;}/*** Escapes an LDAP AttributeValue*/function ldap_escape($string){	return str_replace(array('*', '\\', '(', ')'), array('\\*', '\\\\', '\\(', '\\)'), $string);}/*** This function is used to output any required fields in the authentication* admin panel. It also defines any required configuration table fields.*/function acp_ldap(&$new){	global $user;	$tpl = '	<dl>		<dt><label for="ldap_server">' . $user->lang['LDAP_SERVER'] . ':</label><br /><span>' . $user->lang['LDAP_SERVER_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_server" size="40" name="config[ldap_server]" value="' . $new['ldap_server'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_port">' . $user->lang['LDAP_PORT'] . ':</label><br /><span>' . $user->lang['LDAP_PORT_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_port" size="40" name="config[ldap_port]" value="' . $new['ldap_port'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_dn">' . $user->lang['LDAP_DN'] . ':</label><br /><span>' . $user->lang['LDAP_DN_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_dn" size="40" name="config[ldap_base_dn]" value="' . $new['ldap_base_dn'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_uid">' . $user->lang['LDAP_UID'] . ':</label><br /><span>' . $user->lang['LDAP_UID_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_uid" size="40" name="config[ldap_uid]" value="' . $new['ldap_uid'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_user_filter">' . $user->lang['LDAP_USER_FILTER'] . ':</label><br /><span>' . $user->lang['LDAP_USER_FILTER_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_user_filter" size="40" name="config[ldap_user_filter]" value="' . $new['ldap_user_filter'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_email">' . $user->lang['LDAP_EMAIL'] . ':</label><br /><span>' . $user->lang['LDAP_EMAIL_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_email" size="40" name="config[ldap_email]" value="' . $new['ldap_email'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_user">' . $user->lang['LDAP_USER'] . ':</label><br /><span>' . $user->lang['LDAP_USER_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_user" size="40" name="config[ldap_user]" value="' . $new['ldap_user'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_password">' . $user->lang['LDAP_PASSWORD'] . ':</label><br /><span>' . $user->lang['LDAP_PASSWORD_EXPLAIN'] . '</span></dt>		<dd><input type="password" id="ldap_password" size="40" name="config[ldap_password]" value="' . $new['ldap_password'] . '" autocomplete="off" /></dd>	</dl>	';	// These are fields required in the config table	return array(		'tpl'		=> $tpl,		'config'	=> array('ldap_server', 'ldap_port', 'ldap_base_dn', 'ldap_uid', 'ldap_user_filter', 'ldap_email', 'ldap_user', 'ldap_password')	);}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);require($phpbb_root_path . 'includes/startup.' . $phpEx);require($phpbb_root_path . 'config.' . $phpEx);if (!defined('PHPBB_INSTALLED') || empty($dbms) || empty($acm_type)){	exit;}// Load Extensionsif (!empty($load_extensions) && function_exists('dl')){	$load_extensions = explode(',', $load_extensions);	foreach ($load_extensions as $extension)	{		@dl(trim($extension));	}}$id = (isset($_GET['id'])) ? intval($_GET['id']) : 0;// This is a simple script to grab and output the requested CSS data stored in the DB// We include a session_id check to try and limit 3rd party linking ... unless they// happen to have a current session it will output nothing. We will also cache the// resulting CSS data for five minutes ... anything to reduce the load on the SQL// server a littleif ($id){	// Include files	require($phpbb_root_path . 'includes/acm/acm_' . $acm_type . '.' . $phpEx);	require($phpbb_root_path . 'includes/cache.' . $phpEx);	require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);	require($phpbb_root_path . 'includes/constants.' . $phpEx);	require($phpbb_root_path . 'includes/functions.' . $phpEx);	$db = new $sql_db();	$cache = new cache();	// Connect to DB	if (!@$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, false))	{		exit;	}	unset($dbpasswd);	$config = $cache->obtain_config();	$user = false;	// try to get a session ID from REQUEST array	$sid = request_var('sid', '');	if (!$sid)	{		// if that failed, then look in the cookies		$sid = request_var($config['cookie_name'] . '_sid', '', false, true);	}	if (strspn($sid, 'abcdefABCDEF0123456789') !== strlen($sid))	{		$sid = '';	}	if ($sid)	{		$sql = 'SELECT u.user_id, u.user_lang			FROM ' . SESSIONS_TABLE . ' s, ' . USERS_TABLE . " u			WHERE s.session_id = '" . $db->sql_escape($sid) . "'				AND s.session_user_id = u.user_id";		$result = $db->sql_query($sql);		$user = $db->sql_fetchrow($result);		$db->sql_freeresult($result);	}	$recompile = $config['load_tplcompile'];	if (!$user)	{		$id			= ($id) ? $id : $config['default_style'];//		Commented out because calls do not always include the SID anymore//		$recompile	= false;		$user		= array('user_id' => ANONYMOUS);	}	$sql = 'SELECT s.style_id, c.theme_id, c.theme_data, c.theme_path, c.theme_name, c.theme_mtime, i.*, t.template_path		FROM ' . STYLES_TABLE . ' s, ' . STYLES_TEMPLATE_TABLE . ' t, ' . STYLES_THEME_TABLE . ' c, ' . STYLES_IMAGESET_TABLE . ' i		WHERE s.style_id = ' . $id . '			AND t.template_id = s.template_id			AND c.theme_id = s.theme_id			AND i.imageset_id = s.imageset_id';	$result = $db->sql_query($sql, 300);	$theme = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$theme)	{		exit;	}	if ($user['user_id'] == ANONYMOUS)	{		$user['user_lang'] = $config['default_lang'];	}	$user_image_lang = (file_exists($phpbb_root_path . 'styles/' . $theme['imageset_path'] . '/imageset/' . $user['user_lang'])) ? $user['user_lang'] : $config['default_lang'];	// Same query in session.php	$sql = 'SELECT *		FROM ' . STYLES_IMAGESET_DATA_TABLE . '		WHERE imageset_id = ' . $theme['imageset_id'] . "		AND image_filename <> ''		AND image_lang IN ('" . $db->sql_escape($user_image_lang) . "', '')";	$result = $db->sql_query($sql, 3600);	$img_array = array();	while ($row = $db->sql_fetchrow($result))	{		$img_array[$row['image_name']] = $row;	}	$db->sql_freeresult($result);	// gzip_compression	if ($config['gzip_compress'])	{		// IE6 is not able to compress the style (do not ask us why!)		$browser = (!empty($_SERVER['HTTP_USER_AGENT'])) ? strtolower(htmlspecialchars((string) $_SERVER['HTTP_USER_AGENT'])) : '';		if ($browser && strpos($browser, 'msie 6.0') === false && @extension_loaded('zlib') && !headers_sent())		{			ob_start('ob_gzhandler');		}	}	// Expire time of seven days if not recached	$expire_time = 7*86400;	$recache = false;	// Re-cache stylesheet data if necessary	if ($recompile || empty($theme['theme_data']))	{		$recache = (empty($theme['theme_data'])) ? true : false;		$update_time = time();		// We test for stylesheet.css because it is faster and most likely the only file changed on common themes		if (!$recache && $theme['theme_mtime'] < @filemtime("{$phpbb_root_path}styles/" . $theme['theme_path'] . '/theme/stylesheet.css'))		{			$recache = true;			$update_time = @filemtime("{$phpbb_root_path}styles/" . $theme['theme_path'] . '/theme/stylesheet.css');		}		else if (!$recache)		{			$last_change = $theme['theme_mtime'];			$dir = @opendir("{$phpbb_root_path}styles/{$theme['theme_path']}/theme");			if ($dir)			{				while (($entry = readdir($dir)) !== false)				{					if (substr(strrchr($entry, '.'), 1) == 'css' && $last_change < @filemtime("{$phpbb_root_path}styles/{$theme['theme_path']}/theme/{$entry}"))					{						$recache = true;						break;					}				}				closedir($dir);			}		}	}	if ($recache)	{		include_once($phpbb_root_path . 'includes/acp/acp_styles.' . $phpEx);		$theme['theme_data'] = acp_styles::db_theme_data($theme);		$theme['theme_mtime'] = $update_time;		// Save CSS contents		$sql_ary = array(			'theme_mtime'	=> $theme['theme_mtime'],			'theme_data'	=> $theme['theme_data']		);		$sql = 'UPDATE ' . STYLES_THEME_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "			WHERE theme_id = {$theme['theme_id']}";		$db->sql_query($sql);		$cache->destroy('sql', STYLES_THEME_TABLE);	}	// Only set the expire time if the theme changed data is older than 30 minutes - to cope with changes from the ACP	if ($recache || $theme['theme_mtime'] > (time() - 1800))	{		header('Expires: 0');	}	else	{		header('Expires: ' . gmdate('D, d M Y H:i:s \G\M\T', time() + $expire_time));	}	header('Content-type: text/css; charset=UTF-8');	// Parse Theme Data	$replace = array(		'{T_THEME_PATH}'			=> "{$phpbb_root_path}styles/" . $theme['theme_path'] . '/theme',		'{T_TEMPLATE_PATH}'			=> "{$phpbb_root_path}styles/" . $theme['template_path'] . '/template',		'{T_IMAGESET_PATH}'			=> "{$phpbb_root_path}styles/" . $theme['imageset_path'] . '/imageset',		'{T_IMAGESET_LANG_PATH}'	=> "{$phpbb_root_path}styles/" . $theme['imageset_path'] . '/imageset/' . $user_image_lang,		'{T_STYLESHEET_NAME}'		=> $theme['theme_name'],		'{S_USER_LANG}'				=> $user['user_lang']	);	$theme['theme_data'] = str_replace(array_keys($replace), array_values($replace), $theme['theme_data']);	$matches = array();	preg_match_all('#\{IMG_([A-Za-z0-9_]*?)_(WIDTH|HEIGHT|SRC)\}#', $theme['theme_data'], $matches);	$imgs = $find = $replace = array();	if (isset($matches[0]) && sizeof($matches[0]))	{		foreach ($matches[1] as $i => $img)		{			$img = strtolower($img);			$find[] = $matches[0][$i];			if (!isset($img_array[$img]))			{				$replace[] = '';				continue;			}			if (!isset($imgs[$img]))			{				$img_data = &$img_array[$img];				$imgsrc = ($img_data['image_lang'] ? $img_data['image_lang'] . '/' : '') . $img_data['image_filename'];				$imgs[$img] = array(					'src'		=> $phpbb_root_path . 'styles/' . $theme['imageset_path'] . '/imageset/' . $imgsrc,					'width'		=> $img_data['image_width'],					'height'	=> $img_data['image_height'],				);			}			switch ($matches[2][$i])			{				case 'SRC':					$replace[] = $imgs[$img]['src'];				break;				case 'WIDTH':					$replace[] = $imgs[$img]['width'];				break;				case 'HEIGHT':					$replace[] = $imgs[$img]['height'];				break;				default:					continue;			}		}		if (sizeof($find))		{			$theme['theme_data'] = str_replace($find, $replace, $theme['theme_data']);		}	}	echo $theme['theme_data'];	if (!empty($cache))	{		$cache->unload();	}	$db->sql_close();}exit;?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_logs{	var $u_action;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('mcp');		// Set up general vars		$action		= request_var('action', '');		$forum_id	= request_var('f', 0);		$topic_id	= request_var('t', 0);		$start		= request_var('start', 0);		$deletemark = (!empty($_POST['delmarked'])) ? true : false;		$deleteall	= (!empty($_POST['delall'])) ? true : false;		$marked		= request_var('mark', array(0));		// Sort keys		$sort_days	= request_var('st', 0);		$sort_key	= request_var('sk', 't');		$sort_dir	= request_var('sd', 'd');		$this->tpl_name = 'acp_logs';		$this->log_type = constant('LOG_' . strtoupper($mode));		// Delete entries if requested and able		if (($deletemark || $deleteall) && $auth->acl_get('a_clearlogs'))		{			if (confirm_box(true))			{				$where_sql = '';				if ($deletemark && sizeof($marked))				{					$sql_in = array();					foreach ($marked as $mark)					{						$sql_in[] = $mark;					}					$where_sql = ' AND ' . $db->sql_in_set('log_id', $sql_in);					unset($sql_in);				}				if ($where_sql || $deleteall)				{					$sql = 'DELETE FROM ' . LOG_TABLE . "						WHERE log_type = {$this->log_type}						$where_sql";					$db->sql_query($sql);					add_log('admin', 'LOG_CLEAR_' . strtoupper($mode));				}			}			else			{				confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(					'f'			=> $forum_id,					'start'		=> $start,					'delmarked'	=> $deletemark,					'delall'	=> $deleteall,					'mark'		=> $marked,					'st'		=> $sort_days,					'sk'		=> $sort_key,					'sd'		=> $sort_dir,					'i'			=> $id,					'mode'		=> $mode,					'action'	=> $action))				);			}		}		// Sorting		$limit_days = array(0 => $user->lang['ALL_ENTRIES'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);		$sort_by_text = array('u' => $user->lang['SORT_USERNAME'], 't' => $user->lang['SORT_DATE'], 'i' => $user->lang['SORT_IP'], 'o' => $user->lang['SORT_ACTION']);		$sort_by_sql = array('u' => 'u.username_clean', 't' => 'l.log_time', 'i' => 'l.log_ip', 'o' => 'l.log_operation');		$s_limit_days = $s_sort_key = $s_sort_dir = $u_sort_param = '';		gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);		// Define where and sort sql for use in displaying logs		$sql_where = ($sort_days) ? (time() - ($sort_days * 86400)) : 0;		$sql_sort = $sort_by_sql[$sort_key] . ' ' . (($sort_dir == 'd') ? 'DESC' : 'ASC');		$keywords = utf8_normalize_nfc(request_var('keywords', '', true));		$keywords_param = !empty($keywords) ? '&amp;keywords=' . urlencode(htmlspecialchars_decode($keywords)) : '';		$l_title = $user->lang['ACP_' . strtoupper($mode) . '_LOGS'];		$l_title_explain = $user->lang['ACP_' . strtoupper($mode) . '_LOGS_EXPLAIN'];		$this->page_title = $l_title;		// Define forum list if we're looking @ mod logs		if ($mode == 'mod')		{			$forum_box = '<option value="0">' . $user->lang['ALL_FORUMS'] . '</option>' . make_forum_select($forum_id);						$template->assign_vars(array(				'S_SHOW_FORUMS'			=> true,				'S_FORUM_BOX'			=> $forum_box)			);		}		// Grab log data		$log_data = array();		$log_count = 0;		$start = view_log($mode, $log_data, $log_count, $config['topics_per_page'], $start, $forum_id, 0, 0, $sql_where, $sql_sort, $keywords);		$template->assign_vars(array(			'L_TITLE'		=> $l_title,			'L_EXPLAIN'		=> $l_title_explain,			'U_ACTION'		=> $this->u_action . "&amp;$u_sort_param$keywords_param&amp;start=$start",			'S_ON_PAGE'		=> on_page($log_count, $config['topics_per_page'], $start),			'PAGINATION'	=> generate_pagination($this->u_action . "&amp;$u_sort_param$keywords_param", $log_count, $config['topics_per_page'], $start, true),			'S_LIMIT_DAYS'	=> $s_limit_days,			'S_SORT_KEY'	=> $s_sort_key,			'S_SORT_DIR'	=> $s_sort_dir,			'S_CLEARLOGS'	=> $auth->acl_get('a_clearlogs'),			'S_KEYWORDS'	=> $keywords,			)		);		foreach ($log_data as $row)		{			$data = array();							$checks = array('viewtopic', 'viewlogs', 'viewforum');			foreach ($checks as $check)			{				if (isset($row[$check]) && $row[$check])				{					$data[] = '<a href="' . $row[$check] . '">' . $user->lang['LOGVIEW_' . strtoupper($check)] . '</a>';				}			}			$template->assign_block_vars('log', array(				'USERNAME'			=> $row['username_full'],				'REPORTEE_USERNAME'	=> ($row['reportee_username'] && $row['user_id'] != $row['reportee_id']) ? $row['reportee_username_full'] : '',				'IP'				=> $row['ip'],				'DATE'				=> $user->format_date($row['time']),				'ACTION'			=> $row['action'],				'DATA'				=> (sizeof($data)) ? implode(' | ', $data) : '',				'ID'				=> $row['id'],				)			);		}	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class mcp_notes_info{	function module()	{		return array(			'filename'	=> 'mcp_notes',			'title'		=> 'MCP_NOTES',			'version'	=> '1.0.0',			'modes'		=> array(				'front'				=> array('title' => 'MCP_NOTES_FRONT', 'auth' => '', 'cat' => array('MCP_NOTES')),				'user_notes'		=> array('title' => 'MCP_NOTES_USER', 'auth' => '', 'cat' => array('MCP_NOTES')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License** @todo add cron intervals to server settings? (database_gc, queue_interval, session_gc, search_gc, cache_gc, warnings_gc)*//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_board{	var $u_action;	var $new_config = array();	function main($id, $mode)	{		global $db, $user, $auth, $template;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		global $cache;		$user->add_lang('acp/board');		$action	= request_var('action', '');		$submit = (isset($_POST['submit']) || isset($_POST['allow_quick_reply_enable'])) ? true : false;		$form_key = 'acp_board';		add_form_key($form_key);		/**		*	Validation types are:		*		string, int, bool,		*		script_path (absolute path in url - beginning with / and no trailing slash),		*		rpath (relative), rwpath (realtive, writable), path (relative path, but able to escape the root), wpath (writable)		*/		switch ($mode)		{			case 'settings':				$display_vars = array(					'title'	=> 'ACP_BOARD_SETTINGS',					'vars'	=> array(						'legend1'				=> 'ACP_BOARD_SETTINGS',						'sitename'				=> array('lang' => 'SITE_NAME',				'validate' => 'string',	'type' => 'text:40:255', 'explain' => false),						'site_desc'				=> array('lang' => 'SITE_DESC',				'validate' => 'string',	'type' => 'text:40:255', 'explain' => false),						'board_disable'			=> array('lang' => 'DISABLE_BOARD',			'validate' => 'bool',	'type' => 'custom', 'method' => 'board_disable', 'explain' => true),						'board_disable_msg'		=> false,						'default_lang'			=> array('lang' => 'DEFAULT_LANGUAGE',		'validate' => 'lang',	'type' => 'select', 'function' => 'language_select', 'params' => array('{CONFIG_VALUE}'), 'explain' => false),						'default_dateformat'	=> array('lang' => 'DEFAULT_DATE_FORMAT',	'validate' => 'string',	'type' => 'custom', 'method' => 'dateformat_select', 'explain' => true),						'board_timezone'		=> array('lang' => 'SYSTEM_TIMEZONE',		'validate' => 'string',	'type' => 'select', 'function' => 'tz_select', 'params' => array('{CONFIG_VALUE}', 1), 'explain' => true),						'board_dst'				=> array('lang' => 'SYSTEM_DST',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'default_style'			=> array('lang' => 'DEFAULT_STYLE',			'validate' => 'int',	'type' => 'select', 'function' => 'style_select', 'params' => array('{CONFIG_VALUE}', false), 'explain' => false),						'override_user_style'	=> array('lang' => 'OVERRIDE_STYLE',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'legend2'				=> 'WARNINGS',						'warnings_expire_days'	=> array('lang' => 'WARNINGS_EXPIRE',		'validate' => 'int',	'type' => 'text:3:4', 'explain' => true, 'append' => ' ' . $user->lang['DAYS']),						'legend3'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'features':				$display_vars = array(					'title'	=> 'ACP_BOARD_FEATURES',					'vars'	=> array(						'legend1'				=> 'ACP_BOARD_FEATURES',						'allow_privmsg'			=> array('lang' => 'BOARD_PM',				'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_topic_notify'	=> array('lang' => 'ALLOW_TOPIC_NOTIFY',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_forum_notify'	=> array('lang' => 'ALLOW_FORUM_NOTIFY',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_namechange'		=> array('lang' => 'ALLOW_NAME_CHANGE',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_attachments'		=> array('lang' => 'ALLOW_ATTACHMENTS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_pm_attach'		=> array('lang' => 'ALLOW_PM_ATTACHMENTS',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_pm_report'		=> array('lang' => 'ALLOW_PM_REPORT',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_bbcode'			=> array('lang' => 'ALLOW_BBCODE',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_smilies'			=> array('lang' => 'ALLOW_SMILIES',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig'				=> array('lang' => 'ALLOW_SIG',				'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_nocensors'		=> array('lang' => 'ALLOW_NO_CENSORS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_bookmarks'		=> array('lang' => 'ALLOW_BOOKMARKS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_birthdays'		=> array('lang' => 'ALLOW_BIRTHDAYS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_quick_reply'		=> array('lang' => 'ALLOW_QUICK_REPLY',		'validate' => 'bool',	'type' => 'custom', 'method' => 'quick_reply', 'explain' => true),						'legend2'				=> 'ACP_LOAD_SETTINGS',						'load_birthdays'		=> array('lang' => 'YES_BIRTHDAYS',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_moderators'		=> array('lang' => 'YES_MODERATORS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_jumpbox'			=> array('lang' => 'YES_JUMPBOX',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_cpf_memberlist'	=> array('lang' => 'LOAD_CPF_MEMBERLIST',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_cpf_viewprofile'	=> array('lang' => 'LOAD_CPF_VIEWPROFILE',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_cpf_viewtopic'	=> array('lang' => 'LOAD_CPF_VIEWTOPIC',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'legend3'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'avatar':				$display_vars = array(					'title'	=> 'ACP_AVATAR_SETTINGS',					'vars'	=> array(						'legend1'				=> 'ACP_AVATAR_SETTINGS',						'avatar_min_width'		=> array('lang' => 'MIN_AVATAR_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'avatar_min_height'		=> array('lang' => 'MIN_AVATAR_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'avatar_max_width'		=> array('lang' => 'MAX_AVATAR_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'avatar_max_height'		=> array('lang' => 'MAX_AVATAR_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'allow_avatar'			=> array('lang' => 'ALLOW_AVATARS',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_avatar_local'	=> array('lang' => 'ALLOW_LOCAL',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_avatar_remote'	=> array('lang' => 'ALLOW_REMOTE',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_avatar_upload'	=> array('lang' => 'ALLOW_UPLOAD',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_avatar_remote_upload'=> array('lang' => 'ALLOW_REMOTE_UPLOAD', 'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'avatar_filesize'		=> array('lang' => 'MAX_FILESIZE',			'validate' => 'int:0',	'type' => 'text:4:10', 'explain' => true, 'append' => ' ' . $user->lang['BYTES']),						'avatar_min'			=> array('lang' => 'MIN_AVATAR_SIZE',		'validate' => 'int:0',	'type' => 'dimension:3:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'avatar_max'			=> array('lang' => 'MAX_AVATAR_SIZE',		'validate' => 'int:0',	'type' => 'dimension:3:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'avatar_path'			=> array('lang' => 'AVATAR_STORAGE_PATH',	'validate' => 'rwpath',	'type' => 'text:20:255', 'explain' => true),						'avatar_gallery_path'	=> array('lang' => 'AVATAR_GALLERY_PATH',	'validate' => 'rpath',	'type' => 'text:20:255', 'explain' => true)					)				);			break;			case 'message':				$display_vars = array(					'title'	=> 'ACP_MESSAGE_SETTINGS',					'lang'	=> 'ucp',					'vars'	=> array(						'legend1'				=> 'GENERAL_SETTINGS',						'allow_privmsg'			=> array('lang' => 'BOARD_PM',				'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'pm_max_boxes'			=> array('lang' => 'BOXES_MAX',				'validate' => 'int:0',	'type' => 'text:4:4', 'explain' => true),						'pm_max_msgs'			=> array('lang' => 'BOXES_LIMIT',			'validate' => 'int:0',	'type' => 'text:4:4', 'explain' => true),						'full_folder_action'	=> array('lang' => 'FULL_FOLDER_ACTION',	'validate' => 'int',	'type' => 'select', 'method' => 'full_folder_select', 'explain' => true),						'pm_edit_time'			=> array('lang' => 'PM_EDIT_TIME',			'validate' => 'int:0',	'type' => 'text:5:5', 'explain' => true, 'append' => ' ' . $user->lang['MINUTES']),						'pm_max_recipients'		=> array('lang' => 'PM_MAX_RECIPIENTS',		'validate' => 'int:0',	'type' => 'text:5:5', 'explain' => true),						'legend2'				=> 'GENERAL_OPTIONS',						'allow_mass_pm'			=> array('lang' => 'ALLOW_MASS_PM',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'auth_bbcode_pm'		=> array('lang' => 'ALLOW_BBCODE_PM',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'auth_smilies_pm'		=> array('lang' => 'ALLOW_SMILIES_PM',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_pm_attach'		=> array('lang' => 'ALLOW_PM_ATTACHMENTS',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig_pm'			=> array('lang' => 'ALLOW_SIG_PM',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'print_pm'				=> array('lang' => 'ALLOW_PRINT_PM',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'forward_pm'			=> array('lang' => 'ALLOW_FORWARD_PM',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'auth_img_pm'			=> array('lang' => 'ALLOW_IMG_PM',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'auth_flash_pm'			=> array('lang' => 'ALLOW_FLASH_PM',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'enable_pm_icons'		=> array('lang' => 'ENABLE_PM_ICONS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'legend3'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'post':				$display_vars = array(					'title'	=> 'ACP_POST_SETTINGS',					'vars'	=> array(						'legend1'				=> 'GENERAL_OPTIONS',						'allow_topic_notify'	=> array('lang' => 'ALLOW_TOPIC_NOTIFY',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_forum_notify'	=> array('lang' => 'ALLOW_FORUM_NOTIFY',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_bbcode'			=> array('lang' => 'ALLOW_BBCODE',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_post_flash'		=> array('lang' => 'ALLOW_POST_FLASH',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_smilies'			=> array('lang' => 'ALLOW_SMILIES',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_post_links'		=> array('lang' => 'ALLOW_POST_LINKS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_nocensors'		=> array('lang' => 'ALLOW_NO_CENSORS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_bookmarks'		=> array('lang' => 'ALLOW_BOOKMARKS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'enable_post_confirm'	=> array('lang' => 'VISUAL_CONFIRM_POST',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_quick_reply'		=> array('lang' => 'ALLOW_QUICK_REPLY',		'validate' => 'bool',	'type' => 'custom', 'method' => 'quick_reply', 'explain' => true),						'legend2'				=> 'POSTING',						'bump_type'				=> false,						'edit_time'				=> array('lang' => 'EDIT_TIME',				'validate' => 'int:0',		'type' => 'text:5:5', 'explain' => true, 'append' => ' ' . $user->lang['MINUTES']),						'delete_time'			=> array('lang' => 'DELETE_TIME',			'validate' => 'int:0',		'type' => 'text:5:5', 'explain' => true, 'append' => ' ' . $user->lang['MINUTES']),						'display_last_edited'	=> array('lang' => 'DISPLAY_LAST_EDITED',	'validate' => 'bool',		'type' => 'radio:yes_no', 'explain' => true),						'flood_interval'		=> array('lang' => 'FLOOD_INTERVAL',		'validate' => 'int:0',		'type' => 'text:3:10', 'explain' => true, 'append' => ' ' . $user->lang['SECONDS']),						'bump_interval'			=> array('lang' => 'BUMP_INTERVAL',			'validate' => 'int:0',		'type' => 'custom', 'method' => 'bump_interval', 'explain' => true),						'topics_per_page'		=> array('lang' => 'TOPICS_PER_PAGE',		'validate' => 'int:1',		'type' => 'text:3:4', 'explain' => false),						'posts_per_page'		=> array('lang' => 'POSTS_PER_PAGE',		'validate' => 'int:1',		'type' => 'text:3:4', 'explain' => false),						'smilies_per_page'		=> array('lang' => 'SMILIES_PER_PAGE',		'validate' => 'int:1',		'type' => 'text:3:4', 'explain' => false),						'hot_threshold'			=> array('lang' => 'HOT_THRESHOLD',			'validate' => 'int:0',		'type' => 'text:3:4', 'explain' => true),						'max_poll_options'		=> array('lang' => 'MAX_POLL_OPTIONS',		'validate' => 'int:2:127',	'type' => 'text:4:4', 'explain' => false),						'max_post_chars'		=> array('lang' => 'CHAR_LIMIT',			'validate' => 'int:0',		'type' => 'text:4:6', 'explain' => true),						'min_post_chars'		=> array('lang' => 'MIN_CHAR_LIMIT',		'validate' => 'int:1',		'type' => 'text:4:6', 'explain' => true),						'max_post_smilies'		=> array('lang' => 'SMILIES_LIMIT',			'validate' => 'int:0',		'type' => 'text:4:4', 'explain' => true),						'max_post_urls'			=> array('lang' => 'MAX_POST_URLS',			'validate' => 'int:0',		'type' => 'text:5:4', 'explain' => true),						'max_post_font_size'	=> array('lang' => 'MAX_POST_FONT_SIZE',	'validate' => 'int:0',		'type' => 'text:5:4', 'explain' => true, 'append' => ' %'),						'max_quote_depth'		=> array('lang' => 'QUOTE_DEPTH_LIMIT',		'validate' => 'int:0',		'type' => 'text:4:4', 'explain' => true),						'max_post_img_width'	=> array('lang' => 'MAX_POST_IMG_WIDTH',	'validate' => 'int:0',		'type' => 'text:5:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'max_post_img_height'	=> array('lang' => 'MAX_POST_IMG_HEIGHT',	'validate' => 'int:0',		'type' => 'text:5:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'legend3'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'signature':				$display_vars = array(					'title'	=> 'ACP_SIGNATURE_SETTINGS',					'vars'	=> array(						'legend1'				=> 'GENERAL_OPTIONS',						'allow_sig'				=> array('lang' => 'ALLOW_SIG',				'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig_bbcode'		=> array('lang' => 'ALLOW_SIG_BBCODE',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig_img'			=> array('lang' => 'ALLOW_SIG_IMG',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig_flash'		=> array('lang' => 'ALLOW_SIG_FLASH',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig_smilies'		=> array('lang' => 'ALLOW_SIG_SMILIES',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig_links'		=> array('lang' => 'ALLOW_SIG_LINKS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'legend2'				=> 'GENERAL_SETTINGS',						'max_sig_chars'			=> array('lang' => 'MAX_SIG_LENGTH',		'validate' => 'int:0',	'type' => 'text:5:4', 'explain' => true),						'max_sig_urls'			=> array('lang' => 'MAX_SIG_URLS',			'validate' => 'int:0',	'type' => 'text:5:4', 'explain' => true),						'max_sig_font_size'		=> array('lang' => 'MAX_SIG_FONT_SIZE',		'validate' => 'int:0',	'type' => 'text:5:4', 'explain' => true, 'append' => ' %'),						'max_sig_smilies'		=> array('lang' => 'MAX_SIG_SMILIES',		'validate' => 'int:0',	'type' => 'text:5:4', 'explain' => true),						'max_sig_img_width'		=> array('lang' => 'MAX_SIG_IMG_WIDTH',		'validate' => 'int:0',	'type' => 'text:5:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'max_sig_img_height'	=> array('lang' => 'MAX_SIG_IMG_HEIGHT',	'validate' => 'int:0',	'type' => 'text:5:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'legend3'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'registration':				$display_vars = array(					'title'	=> 'ACP_REGISTER_SETTINGS',					'vars'	=> array(						'legend1'				=> 'GENERAL_SETTINGS',						'max_name_chars'		=> array('lang' => 'USERNAME_LENGTH', 'validate' => 'int:8:180', 'type' => false, 'method' => false, 'explain' => false,),						'max_pass_chars'		=> array('lang' => 'PASSWORD_LENGTH', 'validate' => 'int:8:255', 'type' => false, 'method' => false, 'explain' => false,),						'require_activation'	=> array('lang' => 'ACC_ACTIVATION',	'validate' => 'int',	'type' => 'custom', 'method' => 'select_acc_activation', 'explain' => true),						'new_member_post_limit'	=> array('lang' => 'NEW_MEMBER_POST_LIMIT', 'validate' => 'int:0:255', 'type' => 'text:4:4', 'explain' => true, 'append' => ' ' . $user->lang['POSTS']),						'new_member_group_default'=> array('lang' => 'NEW_MEMBER_GROUP_DEFAULT', 'validate' => 'bool', 'type' => 'radio:yes_no', 'explain' => true),						'min_name_chars'		=> array('lang' => 'USERNAME_LENGTH',	'validate' => 'int:1',	'type' => 'custom:5:180', 'method' => 'username_length', 'explain' => true),						'min_pass_chars'		=> array('lang' => 'PASSWORD_LENGTH',	'validate' => 'int:1',	'type' => 'custom', 'method' => 'password_length', 'explain' => true),						'allow_name_chars'		=> array('lang' => 'USERNAME_CHARS',	'validate' => 'string',	'type' => 'select', 'method' => 'select_username_chars', 'explain' => true),						'pass_complex'			=> array('lang' => 'PASSWORD_TYPE',		'validate' => 'string',	'type' => 'select', 'method' => 'select_password_chars', 'explain' => true),						'chg_passforce'			=> array('lang' => 'FORCE_PASS_CHANGE',	'validate' => 'int:0',	'type' => 'text:3:3', 'explain' => true, 'append' => ' ' . $user->lang['DAYS']),						'legend2'				=> 'GENERAL_OPTIONS',						'allow_namechange'		=> array('lang' => 'ALLOW_NAME_CHANGE',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_emailreuse'		=> array('lang' => 'ALLOW_EMAIL_REUSE',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'enable_confirm'		=> array('lang' => 'VISUAL_CONFIRM_REG',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'max_login_attempts'	=> array('lang' => 'MAX_LOGIN_ATTEMPTS',	'validate' => 'int:0',	'type' => 'text:3:3', 'explain' => true),						'max_reg_attempts'		=> array('lang' => 'REG_LIMIT',				'validate' => 'int:0',	'type' => 'text:4:4', 'explain' => true),						'legend3'			=> 'COPPA',						'coppa_enable'		=> array('lang' => 'ENABLE_COPPA',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'coppa_mail'		=> array('lang' => 'COPPA_MAIL',		'validate' => 'string',	'type' => 'textarea:5:40', 'explain' => true),						'coppa_fax'			=> array('lang' => 'COPPA_FAX',			'validate' => 'string',	'type' => 'text:25:100', 'explain' => false),						'legend4'			=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'feed':				$display_vars = array(					'title'	=> 'ACP_FEED_MANAGEMENT',					'vars'	=> array(						'legend1'					=> 'ACP_FEED_GENERAL',						'feed_enable'				=> array('lang' => 'ACP_FEED_ENABLE',				'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'feed_item_statistics'		=> array('lang' => 'ACP_FEED_ITEM_STATISTICS',		'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true),						'feed_http_auth'			=> array('lang' => 'ACP_FEED_HTTP_AUTH',			'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true),						'legend2'					=> 'ACP_FEED_POST_BASED',						'feed_limit_post'			=> array('lang' => 'ACP_FEED_LIMIT',				'validate' => 'int:5',	'type' => 'text:3:4',				'explain' => true),						'feed_overall'				=> array('lang' => 'ACP_FEED_OVERALL',				'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'feed_forum'				=> array('lang' => 'ACP_FEED_FORUM',				'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'feed_topic'				=> array('lang' => 'ACP_FEED_TOPIC',				'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'legend3'					=> 'ACP_FEED_TOPIC_BASED',						'feed_limit_topic'			=> array('lang' => 'ACP_FEED_LIMIT',				'validate' => 'int:5',	'type' => 'text:3:4',				'explain' => true),						'feed_topics_new'			=> array('lang' => 'ACP_FEED_TOPICS_NEW',			'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'feed_topics_active'		=> array('lang' => 'ACP_FEED_TOPICS_ACTIVE',		'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'feed_news_id'				=> array('lang' => 'ACP_FEED_NEWS',					'validate' => 'string',	'type' => 'custom', 'method' => 'select_news_forums', 'explain' => true),						'legend4'					=> 'ACP_FEED_SETTINGS_OTHER',						'feed_overall_forums'		=> array('lang'	=> 'ACP_FEED_OVERALL_FORUMS',		'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'feed_exclude_id'			=> array('lang' => 'ACP_FEED_EXCLUDE_ID',			'validate' => 'string',	'type' => 'custom', 'method' => 'select_exclude_forums', 'explain' => true),					)				);			break;			case 'cookie':				$display_vars = array(					'title'	=> 'ACP_COOKIE_SETTINGS',					'vars'	=> array(						'legend1'		=> 'ACP_COOKIE_SETTINGS',						'cookie_domain'	=> array('lang' => 'COOKIE_DOMAIN',	'validate' => 'string',	'type' => 'text::255', 'explain' => false),						'cookie_name'	=> array('lang' => 'COOKIE_NAME',	'validate' => 'string',	'type' => 'text::16', 'explain' => false),						'cookie_path'	=> array('lang'	=> 'COOKIE_PATH',	'validate' => 'string',	'type' => 'text::255', 'explain' => false),						'cookie_secure'	=> array('lang' => 'COOKIE_SECURE',	'validate' => 'bool',	'type' => 'radio:disabled_enabled', 'explain' => true)					)				);			break;			case 'load':				$display_vars = array(					'title'	=> 'ACP_LOAD_SETTINGS',					'vars'	=> array(						'legend1'			=> 'GENERAL_SETTINGS',						'limit_load'		=> array('lang' => 'LIMIT_LOAD',		'validate' => 'string',	'type' => 'text:4:4', 'explain' => true),						'session_length'	=> array('lang' => 'SESSION_LENGTH',	'validate' => 'int:60',	'type' => 'text:5:10', 'explain' => true, 'append' => ' ' . $user->lang['SECONDS']),						'active_sessions'	=> array('lang' => 'LIMIT_SESSIONS',	'validate' => 'int:0',	'type' => 'text:4:4', 'explain' => true),						'load_online_time'	=> array('lang' => 'ONLINE_LENGTH',		'validate' => 'int:0',	'type' => 'text:4:3', 'explain' => true, 'append' => ' ' . $user->lang['MINUTES']),						'legend2'				=> 'GENERAL_OPTIONS',						'load_db_track'			=> array('lang' => 'YES_POST_MARKING',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_db_lastread'		=> array('lang' => 'YES_READ_MARKING',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_anon_lastread'	=> array('lang' => 'YES_ANON_READ_MARKING',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_online'			=> array('lang' => 'YES_ONLINE',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_online_guests'	=> array('lang' => 'YES_ONLINE_GUESTS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_onlinetrack'		=> array('lang' => 'YES_ONLINE_TRACK',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_birthdays'		=> array('lang' => 'YES_BIRTHDAYS',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_unreads_search'	=> array('lang' => 'YES_UNREAD_SEARCH',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_moderators'		=> array('lang' => 'YES_MODERATORS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_jumpbox'			=> array('lang' => 'YES_JUMPBOX',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_user_activity'	=> array('lang' => 'LOAD_USER_ACTIVITY',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_tplcompile'		=> array('lang' => 'RECOMPILE_STYLES',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'legend3'				=> 'CUSTOM_PROFILE_FIELDS',						'load_cpf_memberlist'	=> array('lang' => 'LOAD_CPF_MEMBERLIST',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_cpf_viewprofile'	=> array('lang' => 'LOAD_CPF_VIEWPROFILE',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_cpf_viewtopic'	=> array('lang' => 'LOAD_CPF_VIEWTOPIC',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'legend4'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'auth':				$display_vars = array(					'title'	=> 'ACP_AUTH_SETTINGS',					'vars'	=> array(						'legend1'		=> 'ACP_AUTH_SETTINGS',						'auth_method'	=> array('lang' => 'AUTH_METHOD',	'validate' => 'string',	'type' => 'select', 'method' => 'select_auth_method', 'explain' => false)					)				);			break;			case 'server':				$display_vars = array(					'title'	=> 'ACP_SERVER_SETTINGS',					'vars'	=> array(						'legend1'				=> 'ACP_SERVER_SETTINGS',						'gzip_compress'			=> array('lang' => 'ENABLE_GZIP',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'legend2'				=> 'PATH_SETTINGS',						'smilies_path'			=> array('lang' => 'SMILIES_PATH',		'validate' => 'rpath',	'type' => 'text:20:255', 'explain' => true),						'icons_path'			=> array('lang' => 'ICONS_PATH',		'validate' => 'rpath',	'type' => 'text:20:255', 'explain' => true),						'upload_icons_path'		=> array('lang' => 'UPLOAD_ICONS_PATH',	'validate' => 'rpath',	'type' => 'text:20:255', 'explain' => true),						'ranks_path'			=> array('lang' => 'RANKS_PATH',		'validate' => 'rpath',	'type' => 'text:20:255', 'explain' => true),						'legend3'				=> 'SERVER_URL_SETTINGS',						'force_server_vars'		=> array('lang' => 'FORCE_SERVER_VARS',	'validate' => 'bool',			'type' => 'radio:yes_no', 'explain' => true),						'server_protocol'		=> array('lang' => 'SERVER_PROTOCOL',	'validate' => 'string',			'type' => 'text:10:10', 'explain' => true),						'server_name'			=> array('lang' => 'SERVER_NAME',		'validate' => 'string',			'type' => 'text:40:255', 'explain' => true),						'server_port'			=> array('lang' => 'SERVER_PORT',		'validate' => 'int:0',			'type' => 'text:5:5', 'explain' => true),						'script_path'			=> array('lang' => 'SCRIPT_PATH',		'validate' => 'script_path',	'type' => 'text::255', 'explain' => true),						'legend4'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'security':				$display_vars = array(					'title'	=> 'ACP_SECURITY_SETTINGS',					'vars'	=> array(						'legend1'				=> 'ACP_SECURITY_SETTINGS',						'allow_autologin'		=> array('lang' => 'ALLOW_AUTOLOGIN',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'max_autologin_time'	=> array('lang' => 'AUTOLOGIN_LENGTH',		'validate' => 'int:0',	'type' => 'text:5:5', 'explain' => true, 'append' => ' ' . $user->lang['DAYS']),						'ip_check'				=> array('lang' => 'IP_VALID',				'validate' => 'int',	'type' => 'custom', 'method' => 'select_ip_check', 'explain' => true),						'browser_check'			=> array('lang' => 'BROWSER_VALID',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'forwarded_for_check'	=> array('lang' => 'FORWARDED_FOR_VALID',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'referer_validation'	=> array('lang' => 'REFERER_VALID',		'validate' => 'int:0:3','type' => 'custom', 'method' => 'select_ref_check', 'explain' => true),						'check_dnsbl'			=> array('lang' => 'CHECK_DNSBL',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'email_check_mx'		=> array('lang' => 'EMAIL_CHECK_MX',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'pass_complex'			=> array('lang' => 'PASSWORD_TYPE',			'validate' => 'string',	'type' => 'select', 'method' => 'select_password_chars', 'explain' => true),						'chg_passforce'			=> array('lang' => 'FORCE_PASS_CHANGE',		'validate' => 'int:0',	'type' => 'text:3:3', 'explain' => true, 'append' => ' ' . $user->lang['DAYS']),						'max_login_attempts'	=> array('lang' => 'MAX_LOGIN_ATTEMPTS',	'validate' => 'int:0',	'type' => 'text:3:3', 'explain' => true),						'ip_login_limit_max'	=> array('lang' => 'IP_LOGIN_LIMIT_MAX',	'validate' => 'int:0',	'type' => 'text:3:3', 'explain' => true),						'ip_login_limit_time'	=> array('lang' => 'IP_LOGIN_LIMIT_TIME',	'validate' => 'int:0',	'type' => 'text:5:5', 'explain' => true, 'append' => ' ' . $user->lang['SECONDS']),						'ip_login_limit_use_forwarded'	=> array('lang' => 'IP_LOGIN_LIMIT_USE_FORWARDED',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'tpl_allow_php'			=> array('lang' => 'TPL_ALLOW_PHP',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'form_token_lifetime'	=> array('lang' => 'FORM_TIME_MAX',			'validate' => 'int:-1',	'type' => 'text:5:5', 'explain' => true, 'append' => ' ' . $user->lang['SECONDS']),						'form_token_sid_guests'	=> array('lang' => 'FORM_SID_GUESTS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),					)				);			break;			case 'email':				$display_vars = array(					'title'	=> 'ACP_EMAIL_SETTINGS',					'vars'	=> array(						'legend1'				=> 'GENERAL_SETTINGS',						'email_enable'			=> array('lang' => 'ENABLE_EMAIL',			'validate' => 'bool',	'type' => 'radio:enabled_disabled', 'explain' => true),						'board_email_form'		=> array('lang' => 'BOARD_EMAIL_FORM',		'validate' => 'bool',	'type' => 'radio:enabled_disabled', 'explain' => true),						'email_function_name'	=> array('lang' => 'EMAIL_FUNCTION_NAME',	'validate' => 'string',	'type' => 'text:20:50', 'explain' => true),						'email_package_size'	=> array('lang' => 'EMAIL_PACKAGE_SIZE',	'validate' => 'int:0',	'type' => 'text:5:5', 'explain' => true),						'board_contact'			=> array('lang' => 'CONTACT_EMAIL',			'validate' => 'string',	'type' => 'text:25:100', 'explain' => true),						'board_email'			=> array('lang' => 'ADMIN_EMAIL',			'validate' => 'string',	'type' => 'text:25:100', 'explain' => true),						'board_email_sig'		=> array('lang' => 'EMAIL_SIG',				'validate' => 'string',	'type' => 'textarea:5:30', 'explain' => true),						'board_hide_emails'		=> array('lang' => 'BOARD_HIDE_EMAILS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'legend2'				=> 'SMTP_SETTINGS',						'smtp_delivery'			=> array('lang' => 'USE_SMTP',				'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'smtp_host'				=> array('lang' => 'SMTP_SERVER',			'validate' => 'string',	'type' => 'text:25:50', 'explain' => false),						'smtp_port'				=> array('lang' => 'SMTP_PORT',				'validate' => 'int:0',	'type' => 'text:4:5', 'explain' => true),						'smtp_auth_method'		=> array('lang' => 'SMTP_AUTH_METHOD',		'validate' => 'string',	'type' => 'select', 'method' => 'mail_auth_select', 'explain' => true),						'smtp_username'			=> array('lang' => 'SMTP_USERNAME',			'validate' => 'string',	'type' => 'text:25:255', 'explain' => true),						'smtp_password'			=> array('lang' => 'SMTP_PASSWORD',			'validate' => 'string',	'type' => 'password:25:255', 'explain' => true),						'legend3'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			default:				trigger_error('NO_MODE', E_USER_ERROR);			break;		}		if (isset($display_vars['lang']))		{			$user->add_lang($display_vars['lang']);		}		$this->new_config = $config;		$cfg_array = (isset($_REQUEST['config'])) ? utf8_normalize_nfc(request_var('config', array('' => ''), true)) : $this->new_config;		$error = array();		// We validate the complete config if whished		validate_config_vars($display_vars['vars'], $cfg_array, $error);		if ($submit && !check_form_key($form_key))		{			$error[] = $user->lang['FORM_INVALID'];		}		// Do not write values if there is an error		if (sizeof($error))		{			$submit = false;		}		// We go through the display_vars to make sure no one is trying to set variables he/she is not allowed to...		foreach ($display_vars['vars'] as $config_name => $null)		{			if (!isset($cfg_array[$config_name]) || strpos($config_name, 'legend') !== false)			{				continue;			}			if ($config_name == 'auth_method' || $config_name == 'feed_news_id' || $config_name == 'feed_exclude_id')			{				continue;			}			$this->new_config[$config_name] = $config_value = $cfg_array[$config_name];			if ($config_name == 'email_function_name')			{				$this->new_config['email_function_name'] = trim(str_replace(array('(', ')'), array('', ''), $this->new_config['email_function_name']));				$this->new_config['email_function_name'] = (empty($this->new_config['email_function_name']) || !function_exists($this->new_config['email_function_name'])) ? 'mail' : $this->new_config['email_function_name'];				$config_value = $this->new_config['email_function_name'];			}			if ($submit)			{				set_config($config_name, $config_value);				if ($config_name == 'allow_quick_reply' && isset($_POST['allow_quick_reply_enable']))				{					enable_bitfield_column_flag(FORUMS_TABLE, 'forum_flags', log(FORUM_FLAG_QUICK_REPLY, 2));				}			}		}		// Store news and exclude ids		if ($mode == 'feed' && $submit)		{			$cache->destroy('_feed_news_forum_ids');			$cache->destroy('_feed_excluded_forum_ids');			$this->store_feed_forums(FORUM_OPTION_FEED_NEWS, 'feed_news_id');			$this->store_feed_forums(FORUM_OPTION_FEED_EXCLUDE, 'feed_exclude_id');		}		if ($mode == 'auth')		{			// Retrieve a list of auth plugins and check their config values			$auth_plugins = array();			$dp = @opendir($phpbb_root_path . 'includes/auth');			if ($dp)			{				while (($file = readdir($dp)) !== false)				{					if (preg_match('#^auth_(.*?)\.' . $phpEx . '$#', $file))					{						$auth_plugins[] = basename(preg_replace('#^auth_(.*?)\.' . $phpEx . '$#', '\1', $file));					}				}				closedir($dp);				sort($auth_plugins);			}			$updated_auth_settings = false;			$old_auth_config = array();			foreach ($auth_plugins as $method)			{				if ($method && file_exists($phpbb_root_path . 'includes/auth/auth_' . $method . '.' . $phpEx))				{					include_once($phpbb_root_path . 'includes/auth/auth_' . $method . '.' . $phpEx);					$method = 'acp_' . $method;					if (function_exists($method))					{						if ($fields = $method($this->new_config))						{							// Check if we need to create config fields for this plugin and save config when submit was pressed							foreach ($fields['config'] as $field)							{								if (!isset($config[$field]))								{									set_config($field, '');								}								if (!isset($cfg_array[$field]) || strpos($field, 'legend') !== false)								{									continue;								}								$old_auth_config[$field] = $this->new_config[$field];								$config_value = $cfg_array[$field];								$this->new_config[$field] = $config_value;								if ($submit)								{									$updated_auth_settings = true;									set_config($field, $config_value);								}							}						}						unset($fields);					}				}			}			if ($submit && (($cfg_array['auth_method'] != $this->new_config['auth_method']) || $updated_auth_settings))			{				$method = basename($cfg_array['auth_method']);				if ($method && in_array($method, $auth_plugins))				{					include_once($phpbb_root_path . 'includes/auth/auth_' . $method . '.' . $phpEx);					$method = 'init_' . $method;					if (function_exists($method))					{						if ($error = $method())						{							foreach ($old_auth_config as $config_name => $config_value)							{								set_config($config_name, $config_value);							}							trigger_error($error . adm_back_link($this->u_action), E_USER_WARNING);						}					}					set_config('auth_method', basename($cfg_array['auth_method']));				}				else				{					trigger_error('NO_AUTH_PLUGIN', E_USER_ERROR);				}			}		}		if ($submit)		{			add_log('admin', 'LOG_CONFIG_' . strtoupper($mode));			trigger_error($user->lang['CONFIG_UPDATED'] . adm_back_link($this->u_action));		}		$this->tpl_name = 'acp_board';		$this->page_title = $display_vars['title'];		$template->assign_vars(array(			'L_TITLE'			=> $user->lang[$display_vars['title']],			'L_TITLE_EXPLAIN'	=> $user->lang[$display_vars['title'] . '_EXPLAIN'],			'S_ERROR'			=> (sizeof($error)) ? true : false,			'ERROR_MSG'			=> implode('<br />', $error),			'U_ACTION'			=> $this->u_action)		);		// Output relevant page		foreach ($display_vars['vars'] as $config_key => $vars)		{			if (!is_array($vars) && strpos($config_key, 'legend') === false)			{				continue;			}			if (strpos($config_key, 'legend') !== false)			{				$template->assign_block_vars('options', array(					'S_LEGEND'		=> true,					'LEGEND'		=> (isset($user->lang[$vars])) ? $user->lang[$vars] : $vars)				);				continue;			}			$type = explode(':', $vars['type']);			$l_explain = '';			if ($vars['explain'] && isset($vars['lang_explain']))			{				$l_explain = (isset($user->lang[$vars['lang_explain']])) ? $user->lang[$vars['lang_explain']] : $vars['lang_explain'];			}			else if ($vars['explain'])			{				$l_explain = (isset($user->lang[$vars['lang'] . '_EXPLAIN'])) ? $user->lang[$vars['lang'] . '_EXPLAIN'] : '';			}			$content = build_cfg_template($type, $config_key, $this->new_config, $config_key, $vars);			if (empty($content))			{				continue;			}			$template->assign_block_vars('options', array(				'KEY'			=> $config_key,				'TITLE'			=> (isset($user->lang[$vars['lang']])) ? $user->lang[$vars['lang']] : $vars['lang'],				'S_EXPLAIN'		=> $vars['explain'],				'TITLE_EXPLAIN'	=> $l_explain,				'CONTENT'		=> $content,				)			);			unset($display_vars['vars'][$config_key]);		}		if ($mode == 'auth')		{			$template->assign_var('S_AUTH', true);			foreach ($auth_plugins as $method)			{				if ($method && file_exists($phpbb_root_path . 'includes/auth/auth_' . $method . '.' . $phpEx))				{					$method = 'acp_' . $method;					if (function_exists($method))					{						$fields = $method($this->new_config);						if ($fields['tpl'])						{							$template->assign_block_vars('auth_tpl', array(								'TPL'	=> $fields['tpl'])							);						}						unset($fields);					}				}			}		}	}	/**	* Select auth method	*/	function select_auth_method($selected_method, $key = '')	{		global $phpbb_root_path, $phpEx;		$auth_plugins = array();		$dp = @opendir($phpbb_root_path . 'includes/auth');		if (!$dp)		{			return '';		}		while (($file = readdir($dp)) !== false)		{			if (preg_match('#^auth_(.*?)\.' . $phpEx . '$#', $file))			{				$auth_plugins[] = preg_replace('#^auth_(.*?)\.' . $phpEx . '$#', '\1', $file);			}		}		closedir($dp);		sort($auth_plugins);		$auth_select = '';		foreach ($auth_plugins as $method)		{			$selected = ($selected_method == $method) ? ' selected="selected"' : '';			$auth_select .= '<option value="' . $method . '"' . $selected . '>' . ucfirst($method) . '</option>';		}		return $auth_select;	}	/**	* Select mail authentication method	*/	function mail_auth_select($selected_method, $key = '')	{		global $user;		$auth_methods = array('PLAIN', 'LOGIN', 'CRAM-MD5', 'DIGEST-MD5', 'POP-BEFORE-SMTP');		$s_smtp_auth_options = '';		foreach ($auth_methods as $method)		{			$s_smtp_auth_options .= '<option value="' . $method . '"' . (($selected_method == $method) ? ' selected="selected"' : '') . '>' . $user->lang['SMTP_' . str_replace('-', '_', $method)] . '</option>';		}		return $s_smtp_auth_options;	}	/**	* Select full folder action	*/	function full_folder_select($value, $key = '')	{		global $user;		return '<option value="1"' . (($value == 1) ? ' selected="selected"' : '') . '>' . $user->lang['DELETE_OLDEST_MESSAGES'] . '</option><option value="2"' . (($value == 2) ? ' selected="selected"' : '') . '>' . $user->lang['HOLD_NEW_MESSAGES_SHORT'] . '</option>';	}	/**	* Select ip validation	*/	function select_ip_check($value, $key = '')	{		$radio_ary = array(4 => 'ALL', 3 => 'CLASS_C', 2 => 'CLASS_B', 0 => 'NO_IP_VALIDATION');		return h_radio('config[ip_check]', $radio_ary, $value, $key);	}	/**	* Select referer validation	*/	function select_ref_check($value, $key = '')	{		$radio_ary = array(REFERER_VALIDATE_PATH => 'REF_PATH', REFERER_VALIDATE_HOST => 'REF_HOST', REFERER_VALIDATE_NONE => 'NO_REF_VALIDATION');		return h_radio('config[referer_validation]', $radio_ary, $value, $key);	}	/**	* Select account activation method	*/	function select_acc_activation($value, $key = '')	{		global $user, $config;		$radio_ary = array(			USER_ACTIVATION_DISABLE => 'ACC_DISABLE',			USER_ACTIVATION_NONE => 'ACC_NONE',		);		if ($config['email_enable'])		{			$radio_ary[USER_ACTIVATION_SELF] = 'ACC_USER';			$radio_ary[USER_ACTIVATION_ADMIN] = 'ACC_ADMIN';		}		$radio_text = h_radio('config[require_activation]', $radio_ary, $value, 'require_activation', $key, '<br />');		return $radio_text;	}	/**	* Maximum/Minimum username length	*/	function username_length($value, $key = '')	{		global $user;		return '<input id="' . $key . '" type="text" size="3" maxlength="3" name="config[min_name_chars]" value="' . $value . '" /> ' . $user->lang['MIN_CHARS'] . '&nbsp;&nbsp;<input type="text" size="3" maxlength="3" name="config[max_name_chars]" value="' . $this->new_config['max_name_chars'] . '" /> ' . $user->lang['MAX_CHARS'];	}	/**	* Allowed chars in usernames	*/	function select_username_chars($selected_value, $key)	{		global $user;		$user_char_ary = array('USERNAME_CHARS_ANY', 'USERNAME_ALPHA_ONLY', 'USERNAME_ALPHA_SPACERS', 'USERNAME_LETTER_NUM', 'USERNAME_LETTER_NUM_SPACERS', 'USERNAME_ASCII');		$user_char_options = '';		foreach ($user_char_ary as $user_type)		{			$selected = ($selected_value == $user_type) ? ' selected="selected"' : '';			$user_char_options .= '<option value="' . $user_type . '"' . $selected . '>' . $user->lang[$user_type] . '</option>';		}		return $user_char_options;	}	/**	* Maximum/Minimum password length	*/	function password_length($value, $key)	{		global $user;		return '<input id="' . $key . '" type="text" size="3" maxlength="3" name="config[min_pass_chars]" value="' . $value . '" /> ' . $user->lang['MIN_CHARS'] . '&nbsp;&nbsp;<input type="text" size="3" maxlength="3" name="config[max_pass_chars]" value="' . $this->new_config['max_pass_chars'] . '" /> ' . $user->lang['MAX_CHARS'];	}	/**	* Required chars in passwords	*/	function select_password_chars($selected_value, $key)	{		global $user;		$pass_type_ary = array('PASS_TYPE_ANY', 'PASS_TYPE_CASE', 'PASS_TYPE_ALPHA', 'PASS_TYPE_SYMBOL');		$pass_char_options = '';		foreach ($pass_type_ary as $pass_type)		{			$selected = ($selected_value == $pass_type) ? ' selected="selected"' : '';			$pass_char_options .= '<option value="' . $pass_type . '"' . $selected . '>' . $user->lang[$pass_type] . '</option>';		}		return $pass_char_options;	}	/**	* Select bump interval	*/	function bump_interval($value, $key)	{		global $user;		$s_bump_type = '';		$types = array('m' => 'MINUTES', 'h' => 'HOURS', 'd' => 'DAYS');		foreach ($types as $type => $lang)		{			$selected = ($this->new_config['bump_type'] == $type) ? ' selected="selected"' : '';			$s_bump_type .= '<option value="' . $type . '"' . $selected . '>' . $user->lang[$lang] . '</option>';		}		return '<input id="' . $key . '" type="text" size="3" maxlength="4" name="config[bump_interval]" value="' . $value . '" />&nbsp;<select name="config[bump_type]">' . $s_bump_type . '</select>';	}	/**	* Board disable option and message	*/	function board_disable($value, $key)	{		global $user;		$radio_ary = array(1 => 'YES', 0 => 'NO');		return h_radio('config[board_disable]', $radio_ary, $value) . '<br /><input id="' . $key . '" type="text" name="config[board_disable_msg]" maxlength="255" size="40" value="' . $this->new_config['board_disable_msg'] . '" />';	}	/**	* Global quick reply enable/disable setting and button to enable in all forums	*/	function quick_reply($value, $key)	{		global $user;		$radio_ary = array(1 => 'YES', 0 => 'NO');		return h_radio('config[allow_quick_reply]', $radio_ary, $value) .			'<br /><br /><input class="button2" type="submit" id="' . $key . '_enable" name="' . $key . '_enable" value="' . $user->lang['ALLOW_QUICK_REPLY_BUTTON'] . '" />';	}	/**	* Select default dateformat	*/	function dateformat_select($value, $key)	{		global $user, $config;		// Let the format_date function operate with the acp values		$old_tz = $user->timezone;		$old_dst = $user->dst;		$user->timezone = $config['board_timezone'] * 3600;		$user->dst = $config['board_dst'] * 3600;		$dateformat_options = '';		foreach ($user->lang['dateformats'] as $format => $null)		{			$dateformat_options .= '<option value="' . $format . '"' . (($format == $value) ? ' selected="selected"' : '') . '>';			$dateformat_options .= $user->format_date(time(), $format, false) . ((strpos($format, '|') !== false) ? $user->lang['VARIANT_DATE_SEPARATOR'] . $user->format_date(time(), $format, true) : '');			$dateformat_options .= '</option>';		}		$dateformat_options .= '<option value="custom"';		if (!isset($user->lang['dateformats'][$value]))		{			$dateformat_options .= ' selected="selected"';		}		$dateformat_options .= '>' . $user->lang['CUSTOM_DATEFORMAT'] . '</option>';		// Reset users date options		$user->timezone = $old_tz;		$user->dst = $old_dst;		return "<select name=\"dateoptions\" id=\"dateoptions\" onchange=\"if (this.value == 'custom') { document.getElementById('" . addslashes($key) . "').value = '" . addslashes($value) . "'; } else { document.getElementById('" . addslashes($key) . "').value = this.value; }\">$dateformat_options</select>		<input type=\"text\" name=\"config[$key]\" id=\"$key\" value=\"$value\" maxlength=\"30\" />";	}	/**	* Select multiple forums	*/	function select_news_forums($value, $key)	{		global $user, $config;		$forum_list = make_forum_select(false, false, true, true, true, false, true);		// Build forum options		$s_forum_options = '<select id="' . $key . '" name="' . $key . '[]" multiple="multiple">';		foreach ($forum_list as $f_id => $f_row)		{			$f_row['selected'] = phpbb_optionget(FORUM_OPTION_FEED_NEWS, $f_row['forum_options']);			$s_forum_options .= '<option value="' . $f_id . '"' . (($f_row['selected']) ? ' selected="selected"' : '') . (($f_row['disabled']) ? ' disabled="disabled" class="disabled-option"' : '') . '>' . $f_row['padding'] . $f_row['forum_name'] . '</option>';		}		$s_forum_options .= '</select>';		return $s_forum_options;	}	function select_exclude_forums($value, $key)	{		global $user, $config;		$forum_list = make_forum_select(false, false, true, true, true, false, true);		// Build forum options		$s_forum_options = '<select id="' . $key . '" name="' . $key . '[]" multiple="multiple">';		foreach ($forum_list as $f_id => $f_row)		{			$f_row['selected'] = phpbb_optionget(FORUM_OPTION_FEED_EXCLUDE, $f_row['forum_options']);			$s_forum_options .= '<option value="' . $f_id . '"' . (($f_row['selected']) ? ' selected="selected"' : '') . (($f_row['disabled']) ? ' disabled="disabled" class="disabled-option"' : '') . '>' . $f_row['padding'] . $f_row['forum_name'] . '</option>';		}		$s_forum_options .= '</select>';		return $s_forum_options;	}	function store_feed_forums($option, $key)	{		global $db, $cache;		// Get key		$values = request_var($key, array(0 => 0));		// Empty option bit for all forums		$sql = 'UPDATE ' . FORUMS_TABLE . '			SET forum_options = forum_options - ' . (1 << $option) . '			WHERE ' . $db->sql_bit_and('forum_options', $option, '<> 0');		$db->sql_query($sql);		// Already emptied for all...		if (sizeof($values))		{			// Set for selected forums			$sql = 'UPDATE ' . FORUMS_TABLE . '				SET forum_options = forum_options + ' . (1 << $option) . '				WHERE ' . $db->sql_in_set('forum_id', $values);			$db->sql_query($sql);		}		// Empty sql cache for forums table because options changed		$cache->destroy('sql', FORUMS_TABLE);	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_disallow{	var $u_action;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		$user->add_lang('acp/posting');		// Set up general vars		$this->tpl_name = 'acp_disallow';		$this->page_title = 'ACP_DISALLOW_USERNAMES';		$form_key = 'acp_disallow';		add_form_key($form_key);		$disallow = (isset($_POST['disallow'])) ? true : false;		$allow = (isset($_POST['allow'])) ? true : false;		if (($allow || $disallow) && !check_form_key($form_key))		{			trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action), E_USER_WARNING);		}		if ($disallow)		{			$disallowed_user = str_replace('*', '%', utf8_normalize_nfc(request_var('disallowed_user', '', true)));			if (!$disallowed_user)			{				trigger_error($user->lang['NO_USERNAME_SPECIFIED'] . adm_back_link($this->u_action), E_USER_WARNING);			}			$sql = 'SELECT disallow_id				FROM ' . DISALLOW_TABLE . "				WHERE disallow_username = '" . $db->sql_escape($disallowed_user) . "'";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($row)			{				trigger_error($user->lang['DISALLOWED_ALREADY'] . adm_back_link($this->u_action), E_USER_WARNING);			}			$sql = 'INSERT INTO ' . DISALLOW_TABLE . ' ' . $db->sql_build_array('INSERT', array('disallow_username' => $disallowed_user));			$db->sql_query($sql);			$cache->destroy('_disallowed_usernames');			$message = $user->lang['DISALLOW_SUCCESSFUL'];			add_log('admin', 'LOG_DISALLOW_ADD', str_replace('%', '*', $disallowed_user));			trigger_error($message . adm_back_link($this->u_action));		}		else if ($allow)		{			$disallowed_id = request_var('disallowed_id', 0);			if (!$disallowed_id)			{				trigger_error($user->lang['NO_USERNAME_SPECIFIED'] . adm_back_link($this->u_action), E_USER_WARNING);			}			$sql = 'DELETE FROM ' . DISALLOW_TABLE . '				WHERE disallow_id = ' . $disallowed_id;			$db->sql_query($sql);			$cache->destroy('_disallowed_usernames');			add_log('admin', 'LOG_DISALLOW_DELETE');			trigger_error($user->lang['DISALLOWED_DELETED'] . adm_back_link($this->u_action));		}		// Grab the current list of disallowed usernames...		$sql = 'SELECT *			FROM ' . DISALLOW_TABLE;		$result = $db->sql_query($sql);		$disallow_select = '';		while ($row = $db->sql_fetchrow($result))		{			$disallow_select .= '<option value="' . $row['disallow_id'] . '">' . str_replace('%', '*', $row['disallow_username']) . '</option>';		}		$db->sql_freeresult($result);		$template->assign_vars(array(			'U_ACTION'				=> $this->u_action,			'S_DISALLOWED_NAMES'	=> $disallow_select)		);	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License** Minimum Requirement: PHP 4.3.3*//***/if (!defined('IN_PHPBB')){	exit;}require($phpbb_root_path . 'includes/startup.' . $phpEx);if (file_exists($phpbb_root_path . 'config.' . $phpEx)){	require($phpbb_root_path . 'config.' . $phpEx);}if (!defined('PHPBB_INSTALLED')){	// Redirect the user to the installer	// We have to generate a full HTTP/1.1 header here since we can't guarantee to have any of the information	// available as used by the redirect function	$server_name = (!empty($_SERVER['HTTP_HOST'])) ? strtolower($_SERVER['HTTP_HOST']) : ((!empty($_SERVER['SERVER_NAME'])) ? $_SERVER['SERVER_NAME'] : getenv('SERVER_NAME'));	$server_port = (!empty($_SERVER['SERVER_PORT'])) ? (int) $_SERVER['SERVER_PORT'] : (int) getenv('SERVER_PORT');	$secure = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? 1 : 0;	$script_name = (!empty($_SERVER['PHP_SELF'])) ? $_SERVER['PHP_SELF'] : getenv('PHP_SELF');	if (!$script_name)	{		$script_name = (!empty($_SERVER['REQUEST_URI'])) ? $_SERVER['REQUEST_URI'] : getenv('REQUEST_URI');	}	// Replace any number of consecutive backslashes and/or slashes with a single slash	// (could happen on some proxy setups and/or Windows servers)	$script_path = trim(dirname($script_name)) . '/install/index.' . $phpEx;	$script_path = preg_replace('#[\\\\/]{2,}#', '/', $script_path);	$url = (($secure) ? 'https://' : 'http://') . $server_name;	if ($server_port && (($secure && $server_port <> 443) || (!$secure && $server_port <> 80)))	{		// HTTP HOST can carry a port number...		if (strpos($server_name, ':') === false)		{			$url .= ':' . $server_port;		}	}	$url .= $script_path;	header('Location: ' . $url);	exit;}if (defined('DEBUG_EXTRA')){	$base_memory_usage = 0;	if (function_exists('memory_get_usage'))	{		$base_memory_usage = memory_get_usage();	}}// Load Extensions// dl() is deprecated and disabled by default as of PHP 5.3.if (!empty($load_extensions) && function_exists('dl')){	$load_extensions = explode(',', $load_extensions);	foreach ($load_extensions as $extension)	{		@dl(trim($extension));	}}// Include filesrequire($phpbb_root_path . 'includes/acm/acm_' . $acm_type . '.' . $phpEx);require($phpbb_root_path . 'includes/cache.' . $phpEx);require($phpbb_root_path . 'includes/template.' . $phpEx);require($phpbb_root_path . 'includes/session.' . $phpEx);require($phpbb_root_path . 'includes/auth.' . $phpEx);require($phpbb_root_path . 'includes/functions.' . $phpEx);require($phpbb_root_path . 'includes/functions_content.' . $phpEx);require($phpbb_root_path . 'includes/constants.' . $phpEx);require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);require($phpbb_root_path . 'includes/utf/utf_tools.' . $phpEx);// Set PHP error handler to oursset_error_handler(defined('PHPBB_MSG_HANDLER') ? PHPBB_MSG_HANDLER : 'msg_handler');// Instantiate some basic classes$user		= new user();$auth		= new auth();$template	= new template();$cache		= new cache();$db			= new $sql_db();// Connect to DB$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, defined('PHPBB_DB_NEW_LINK') ? PHPBB_DB_NEW_LINK : false);// We do not need this any longer, unset for safety purposesunset($dbpasswd);// Grab global variables, re-cache if necessary$config = $cache->obtain_config();// Add own hook handlerrequire($phpbb_root_path . 'includes/hooks/index.' . $phpEx);$phpbb_hook = new phpbb_hook(array('exit_handler', 'phpbb_user_session_handler', 'append_sid', array('template', 'display')));foreach ($cache->obtain_hooks() as $hook){	@include($phpbb_root_path . 'includes/hooks/' . $hook . '.' . $phpEx);}?>
<?php/**** @package diff* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Code from pear.php.net, Text_Diff-1.1.0 package* http://pear.php.net/package/Text_Diff/** Modified by phpBB Group to meet our coding standards* and being able to integrate into phpBB** General API for generating and formatting diffs - the differences between* two sequences of strings.** Copyright 2004 Geoffrey T. Dairiki <dairiki@dairiki.org>* Copyright 2004-2008 The Horde Project (http://www.horde.org/)** @package diff* @author  Geoffrey T. Dairiki <dairiki@dairiki.org>*/class diff{	/**	* Array of changes.	* @var array	*/	var $_edits;	/**	* Computes diffs between sequences of strings.	*	* @param array $from_lines  An array of strings. Typically these are lines from a file.	* @param array $to_lines    An array of strings.	*/	function diff(&$from_content, &$to_content, $preserve_cr = true)	{		$diff_engine = new diff_engine();		$this->_edits = $diff_engine->diff($from_content, $to_content, $preserve_cr);	}	/**	* Returns the array of differences.	*/	function get_diff()	{		return $this->_edits;	}	/**	* returns the number of new (added) lines in a given diff.	*	* @since Text_Diff 1.1.0	*	* @return integer The number of new lines	*/	function count_added_lines()	{		$count = 0;		for ($i = 0, $size = sizeof($this->_edits); $i < $size; $i++)		{			$edit = $this->_edits[$i];			if (is_a($edit, 'diff_op_add') || is_a($edit, 'diff_op_change'))			{				$count += $edit->nfinal();			}		}		return $count;	}	/**	* Returns the number of deleted (removed) lines in a given diff.	*	* @since Text_Diff 1.1.0	*	* @return integer The number of deleted lines	*/	function count_deleted_lines()	{		$count = 0;		for ($i = 0, $size = sizeof($this->_edits); $i < $size; $i++)		{			$edit = $this->_edits[$i];			if (is_a($edit, 'diff_op_delete') || is_a($edit, 'diff_op_change'))			{				$count += $edit->norig();			}		}		return $count;	}	/**	* Computes a reversed diff.	*	* Example:	* <code>	* $diff = new diff($lines1, $lines2);	* $rev = $diff->reverse();	* </code>	*	* @return diff  A Diff object representing the inverse of the original diff.	*               Note that we purposely don't return a reference here, since	*               this essentially is a clone() method.	*/	function reverse()	{		if (version_compare(zend_version(), '2', '>'))		{			$rev = clone($this);		}		else		{			$rev = $this;		}		$rev->_edits = array();		for ($i = 0, $size = sizeof($this->_edits); $i < $size; $i++)		{			$edit = $this->_edits[$i];			$rev->_edits[] = $edit->reverse();		}		return $rev;	}	/**	* Checks for an empty diff.	*	* @return boolean  True if two sequences were identical.	*/	function is_empty()	{		for ($i = 0, $size = sizeof($this->_edits); $i < $size; $i++)		{			$edit = $this->_edits[$i];			// skip diff_op_copy			if (is_a($edit, 'diff_op_copy'))			{				continue;			}			if (is_a($edit, 'diff_op_delete') || is_a($edit, 'diff_op_add'))			{				$orig = $edit->orig;				$final = $edit->final;				// We can simplify one case where the array is usually supposed to be empty...				if (sizeof($orig) == 1 && trim($orig[0]) === '') $orig = array();				if (sizeof($final) == 1 && trim($final[0]) === '') $final = array();				if (!$orig && !$final)				{					continue;				}				return false;			}			return false;		}		return true;	}	/**	* Computes the length of the Longest Common Subsequence (LCS).	*	* This is mostly for diagnostic purposes.	*	* @return integer  The length of the LCS.	*/	function lcs()	{		$lcs = 0;		for ($i = 0, $size = sizeof($this->_edits); $i < $size; $i++)		{			$edit = $this->_edits[$i];			if (is_a($edit, 'diff_op_copy'))			{				$lcs += sizeof($edit->orig);			}		}		return $lcs;	}	/**	* Gets the original set of lines.	*	* This reconstructs the $from_lines parameter passed to the constructor.	*	* @return array  The original sequence of strings.	*/	function get_original()	{		$lines = array();		for ($i = 0, $size = sizeof($this->_edits); $i < $size; $i++)		{			$edit = $this->_edits[$i];			if ($edit->orig)			{				array_splice($lines, sizeof($lines), 0, $edit->orig);			}		}		return $lines;	}	/**	* Gets the final set of lines.	*	* This reconstructs the $to_lines parameter passed to the constructor.	*	* @return array  The sequence of strings.	*/	function get_final()	{		$lines = array();		for ($i = 0, $size = sizeof($this->_edits); $i < $size; $i++)		{			$edit = $this->_edits[$i];			if ($edit->final)			{				array_splice($lines, sizeof($lines), 0, $edit->final);			}		}		return $lines;	}	/**	* Removes trailing newlines from a line of text. This is meant to be used with array_walk().	*	* @param string &$line  The line to trim.	* @param integer $key  The index of the line in the array. Not used.	*/	function trim_newlines(&$line, $key)	{		$line = str_replace(array("\n", "\r"), '', $line);	}	/**	* Checks a diff for validity.	*	* This is here only for debugging purposes.	*/	function _check($from_lines, $to_lines)	{		if (serialize($from_lines) != serialize($this->get_original()))		{			trigger_error("[diff] Reconstructed original doesn't match", E_USER_ERROR);		}		if (serialize($to_lines) != serialize($this->get_final()))		{			trigger_error("[diff] Reconstructed final doesn't match", E_USER_ERROR);		}		$rev = $this->reverse();		if (serialize($to_lines) != serialize($rev->get_original()))		{			trigger_error("[diff] Reversed original doesn't match", E_USER_ERROR);		}		if (serialize($from_lines) != serialize($rev->get_final()))		{			trigger_error("[diff] Reversed final doesn't match", E_USER_ERROR);		}		$prevtype = null;		for ($i = 0, $size = sizeof($this->_edits); $i < $size; $i++)		{			$edit = $this->_edits[$i];			if ($prevtype == get_class($edit))			{				trigger_error("[diff] Edit sequence is non-optimal", E_USER_ERROR);			}			$prevtype = get_class($edit);		}		return true;	}}/*** @package diff* @author  Geoffrey T. Dairiki <dairiki@dairiki.org>*/class mapped_diff extends diff{	/**	* Computes a diff between sequences of strings.	*	* This can be used to compute things like case-insensitve diffs, or diffs	* which ignore changes in white-space.	*	* @param array $from_lines         An array of strings.	* @param array $to_lines           An array of strings.	* @param array $mapped_from_lines  This array should have the same size number of elements as $from_lines.	*                                  The elements in $mapped_from_lines and $mapped_to_lines are what is actually	*                                  compared when computing the diff.	* @param array $mapped_to_lines    This array should have the same number of elements as $to_lines.	*/	function mapped_diff(&$from_lines, &$to_lines, &$mapped_from_lines, &$mapped_to_lines)	{		if (sizeof($from_lines) != sizeof($mapped_from_lines) || sizeof($to_lines) != sizeof($mapped_to_lines))		{			return false;		}		parent::diff($mapped_from_lines, $mapped_to_lines);		$xi = $yi = 0;		for ($i = 0; $i < sizeof($this->_edits); $i++)		{			$orig = &$this->_edits[$i]->orig;			if (is_array($orig))			{				$orig = array_slice($from_lines, $xi, sizeof($orig));				$xi += sizeof($orig);			}			$final = &$this->_edits[$i]->final;			if (is_array($final))			{				$final = array_slice($to_lines, $yi, sizeof($final));				$yi += sizeof($final);			}		}	}}/*** @package diff* @author  Geoffrey T. Dairiki <dairiki@dairiki.org>** @access private*/class diff_op{	var $orig;	var $final;	function &reverse()	{		trigger_error('[diff] Abstract method', E_USER_ERROR);	}	function norig()	{		return ($this->orig) ? sizeof($this->orig) : 0;	}	function nfinal()	{		return ($this->final) ? sizeof($this->final) : 0;	}}/*** @package diff* @author  Geoffrey T. Dairiki <dairiki@dairiki.org>** @access private*/class diff_op_copy extends diff_op{	function diff_op_copy($orig, $final = false)	{		if (!is_array($final))		{			$final = $orig;		}		$this->orig = $orig;		$this->final = $final;	}	function &reverse()	{		$reverse = new diff_op_copy($this->final, $this->orig);		return $reverse;	}}/*** @package diff* @author  Geoffrey T. Dairiki <dairiki@dairiki.org>** @access private*/class diff_op_delete extends diff_op{	function diff_op_delete($lines)	{		$this->orig = $lines;		$this->final = false;	}	function &reverse()	{		$reverse = new diff_op_add($this->orig);		return $reverse;	}}/*** @package diff* @author  Geoffrey T. Dairiki <dairiki@dairiki.org>** @access private*/class diff_op_add extends diff_op{	function diff_op_add($lines)	{		$this->final = $lines;		$this->orig = false;	}	function &reverse()	{		$reverse = new diff_op_delete($this->final);		return $reverse;	}}/*** @package diff* @author  Geoffrey T. Dairiki <dairiki@dairiki.org>** @access private*/class diff_op_change extends diff_op{	function diff_op_change($orig, $final)	{		$this->orig = $orig;		$this->final = $final;	}	function &reverse()	{		$reverse = new diff_op_change($this->final, $this->orig);		return $reverse;	}}/*** A class for computing three way diffs.** @package diff* @author  Geoffrey T. Dairiki <dairiki@dairiki.org>*/class diff3 extends diff{	/**	* Conflict counter.	* @var integer	*/	var $_conflicting_blocks = 0;	/**	* Computes diff between 3 sequences of strings.	*	* @param array $orig    The original lines to use.	* @param array $final1  The first version to compare to.	* @param array $final2  The second version to compare to.	*/	function diff3(&$orig, &$final1, &$final2, $preserve_cr = true)	{		$diff_engine = new diff_engine();		$diff_1 = $diff_engine->diff($orig, $final1, $preserve_cr);		$diff_2 = $diff_engine->diff($orig, $final2, $preserve_cr);		unset($diff_engine);		$this->_edits = $this->_diff3($diff_1, $diff_2);	}	/**	* Return number of conflicts	*/	function get_num_conflicts()	{		$conflicts = 0;		for ($i = 0, $size = sizeof($this->_edits); $i < $size; $i++)		{			$edit = $this->_edits[$i];			if ($edit->is_conflict())			{				$conflicts++;			}		}		return $conflicts;	}	/**	* Get conflicts content for download. This is generally a merged file, but preserving conflicts and adding explanations to it.	* A user could then go through this file, search for the conflicts and changes the code accordingly.	*	* @param string $label1 the cvs file version/label from the original set of lines	* @param string $label2 the cvs file version/label from the new set of lines	* @param string $label_sep the explanation between label1 and label2 - more of a helper for the user	*	* @return mixed the merged output	*/	function get_conflicts_content($label1 = 'CURRENT_FILE', $label2 = 'NEW_FILE', $label_sep = 'DIFF_SEP_EXPLAIN')	{		global $user;		$label1 = (!empty($user->lang[$label1])) ? $user->lang[$label1] : $label1;		$label2 = (!empty($user->lang[$label2])) ? $user->lang[$label2] : $label2;		$label_sep = (!empty($user->lang[$label_sep])) ? $user->lang[$label_sep] : $label_sep;		$lines = array();		for ($i = 0, $size = sizeof($this->_edits); $i < $size; $i++)		{			$edit = $this->_edits[$i];			if ($edit->is_conflict())			{				// Start conflict label				$label_start	= array('<<<<<<< ' . $label1);				$label_mid		= array('======= ' . $label_sep);				$label_end		= array('>>>>>>> ' . $label2);				$lines = array_merge($lines, $label_start, $edit->final1, $label_mid, $edit->final2, $label_end);				$this->_conflicting_blocks++;			}			else			{				$lines = array_merge($lines, $edit->merged());			}		}		return $lines;	}	/**	* Return merged output (used by the renderer)	*	* @return mixed the merged output	*/	function merged_output()	{		return $this->get_conflicts_content();	}	/**	* Merge the output and use the new file code for conflicts	*/	function merged_new_output()	{		$lines = array();		for ($i = 0, $size = sizeof($this->_edits); $i < $size; $i++)		{			$edit = $this->_edits[$i];			if ($edit->is_conflict())			{				$lines = array_merge($lines, $edit->final2);			}			else			{				$lines = array_merge($lines, $edit->merged());			}		}		return $lines;	}	/**	* Merge the output and use the original file code for conflicts	*/	function merged_orig_output()	{		$lines = array();		for ($i = 0, $size = sizeof($this->_edits); $i < $size; $i++)		{			$edit = $this->_edits[$i];			if ($edit->is_conflict())			{				$lines = array_merge($lines, $edit->final1);			}			else			{				$lines = array_merge($lines, $edit->merged());			}		}		return $lines;	}	/**	* Get conflicting block(s)	*/	function get_conflicts()	{		$conflicts = array();		for ($i = 0, $size = sizeof($this->_edits); $i < $size; $i++)		{			$edit = $this->_edits[$i];			if ($edit->is_conflict())			{				$conflicts[] = array($edit->final1, $edit->final2);			}		}		return $conflicts;	}	/**	* @access private	*/	function _diff3(&$edits1, &$edits2)	{		$edits = array();		$bb = new diff3_block_builder();		$e1 = current($edits1);		$e2 = current($edits2);		while ($e1 || $e2)		{			if ($e1 && $e2 && is_a($e1, 'diff_op_copy') && is_a($e2, 'diff_op_copy'))			{				// We have copy blocks from both diffs. This is the (only) time we want to emit a diff3 copy block.				// Flush current diff3 diff block, if any.				if ($edit = $bb->finish())				{					$edits[] = $edit;				}				$ncopy = min($e1->norig(), $e2->norig());				$edits[] = new diff3_op_copy(array_slice($e1->orig, 0, $ncopy));				if ($e1->norig() > $ncopy)				{					array_splice($e1->orig, 0, $ncopy);					array_splice($e1->final, 0, $ncopy);				}				else				{					$e1 = next($edits1);				}				if ($e2->norig() > $ncopy)				{					array_splice($e2->orig, 0, $ncopy);					array_splice($e2->final, 0, $ncopy);				}				else				{					$e2 = next($edits2);				}			}			else			{				if ($e1 && $e2)				{					if ($e1->orig && $e2->orig)					{						$norig = min($e1->norig(), $e2->norig());						$orig = array_splice($e1->orig, 0, $norig);						array_splice($e2->orig, 0, $norig);						$bb->input($orig);					}					else					{						$norig = 0;					}					if (is_a($e1, 'diff_op_copy'))					{						$bb->out1(array_splice($e1->final, 0, $norig));					}					if (is_a($e2, 'diff_op_copy'))					{						$bb->out2(array_splice($e2->final, 0, $norig));					}				}				if ($e1 && ! $e1->orig)				{					$bb->out1($e1->final);					$e1 = next($edits1);				}				if ($e2 && ! $e2->orig)				{					$bb->out2($e2->final);					$e2 = next($edits2);				}			}		}		if ($edit = $bb->finish())		{			$edits[] = $edit;		}		return $edits;	}}/*** @package diff* @author  Geoffrey T. Dairiki <dairiki@dairiki.org>** @access private*/class diff3_op{	function diff3_op($orig = false, $final1 = false, $final2 = false)	{		$this->orig = $orig ? $orig : array();		$this->final1 = $final1 ? $final1 : array();		$this->final2 = $final2 ? $final2 : array();	}	function merged()	{		if (!isset($this->_merged))		{			// Prepare the arrays before we compare them. ;)			$this->solve_prepare();			if ($this->final1 === $this->final2)			{				$this->_merged = &$this->final1;			}			else if ($this->final1 === $this->orig)			{				$this->_merged = &$this->final2;			}			else if ($this->final2 === $this->orig)			{				$this->_merged = &$this->final1;			}			else			{				// The following tries to aggressively solve conflicts...				$this->_merged = false;				$this->solve_conflict();			}		}		return $this->_merged;	}	function is_conflict()	{		return ($this->merged() === false) ? true : false;	}	/**	* Function to prepare the arrays for comparing - we want to skip over newline changes	* @author acydburn	*/	function solve_prepare()	{		// We can simplify one case where the array is usually supposed to be empty...		if (sizeof($this->orig) == 1 && trim($this->orig[0]) === '') $this->orig = array();		if (sizeof($this->final1) == 1 && trim($this->final1[0]) === '') $this->final1 = array();		if (sizeof($this->final2) == 1 && trim($this->final2[0]) === '') $this->final2 = array();		// Now we only can have the case where the only difference between arrays are newlines, so compare all cases		// First, some strings we can compare...		$orig = $final1 = $final2 = '';		foreach ($this->orig as $null => $line) $orig .= trim($line);		foreach ($this->final1 as $null => $line) $final1 .= trim($line);		foreach ($this->final2 as $null => $line) $final2 .= trim($line);		// final1 === final2		if ($final1 === $final2)		{			// We preserve the part which will be used in the merge later			$this->final2 = $this->final1;		}		// final1 === orig		else if ($final1 === $orig)		{			// Here it does not really matter what we choose, but we will use the new code			$this->orig = $this->final1;		}		// final2 === orig		else if ($final2 === $orig)		{			// Here it does not really matter too (final1 will be used), but we will use the new code			$this->orig = $this->final2;		}	}	/**	* Find code portions from $orig in $final1 and use $final2 as merged instance if provided	* @author acydburn	*/	function _compare_conflict_seq($orig, $final1, $final2 = false)	{		$result = array('merge_found' => false, 'merge' => array());		$_orig = &$this->$orig;		$_final1 = &$this->$final1;		// Ok, we basically search for $orig in $final1		$compare_seq = sizeof($_orig);		// Go through the conflict code		for ($i = 0, $j = 0, $size = sizeof($_final1); $i < $size; $i++, $j = $i)		{			$line = $_final1[$i];			$skip = 0;			for ($x = 0; $x < $compare_seq; $x++)			{				// Try to skip all matching lines				if (trim($line) === trim($_orig[$x]))				{					$line = (++$j < $size) ? $_final1[$j] : $line;					$skip++;				}			}			if ($skip === $compare_seq)			{				$result['merge_found'] = true;				if ($final2 !== false)				{					$result['merge'] = array_merge($result['merge'], $this->$final2);				}				$i += ($skip - 1);			}			else if ($final2 !== false)			{				$result['merge'][] = $line;			}		}		return $result;	}	/**	* Tries to solve conflicts aggressively based on typical "assumptions"	* @author acydburn	*/	function solve_conflict()	{		$this->_merged = false;		// CASE ONE: orig changed into final2, but modified/unknown code in final1.		// IF orig is found "as is" in final1 we replace the code directly in final1 and populate this as final2/merge		if (sizeof($this->orig) && sizeof($this->final2))		{			$result = $this->_compare_conflict_seq('orig', 'final1', 'final2');			if ($result['merge_found'])			{				$this->final2 = $result['merge'];				$this->_merged = &$this->final2;				return;			}			$result = $this->_compare_conflict_seq('final2', 'final1');			if ($result['merge_found'])			{				$this->_merged = &$this->final1;				return;			}			// Try to solve $Id$ issues. ;)			if (sizeof($this->orig) == 1 && sizeof($this->final1) == 1 && sizeof($this->final2) == 1)			{				$match = '#^' . preg_quote('* @version $Id: ', '#') . '[a-z\._\- ]+[0-9]+ [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9\:Z]+ [a-z0-9_\- ]+\$$#';				if (preg_match($match, $this->orig[0]) && preg_match($match, $this->final1[0]) && preg_match($match, $this->final2[0]))				{					$this->_merged = &$this->final2;					return;				}			}			$second_run = false;			// Try to solve issues where the only reason why the above did not work is a newline being removed in the final1 code but exist in the orig/final2 code			if (trim($this->orig[0]) === '' && trim($this->final2[0]) === '')			{				unset($this->orig[0], $this->final2[0]);				$this->orig = array_values($this->orig);				$this->final2 = array_values($this->final2);				$second_run = true;			}			// The same is true for a line at the end. ;)			if (sizeof($this->orig) && sizeof($this->final2) && sizeof($this->orig) === sizeof($this->final2) && trim($this->orig[sizeof($this->orig)-1]) === '' && trim($this->final2[sizeof($this->final2)-1]) === '')			{				unset($this->orig[sizeof($this->orig)-1], $this->final2[sizeof($this->final2)-1]);				$this->orig = array_values($this->orig);				$this->final2 = array_values($this->final2);				$second_run = true;			}			if ($second_run)			{				$result = $this->_compare_conflict_seq('orig', 'final1', 'final2');				if ($result['merge_found'])				{					$this->final2 = $result['merge'];					$this->_merged = &$this->final2;					return;				}				$result = $this->_compare_conflict_seq('final2', 'final1');				if ($result['merge_found'])				{					$this->_merged = &$this->final1;					return;				}			}			return;		}		// CASE TWO: Added lines from orig to final2 but final1 had added lines too. Just merge them.		if (!sizeof($this->orig) && $this->final1 !== $this->final2 && sizeof($this->final1) && sizeof($this->final2))		{			$result = $this->_compare_conflict_seq('final2', 'final1');			if ($result['merge_found'])			{				$this->final2 = $this->final1;				$this->_merged = &$this->final1;			}			else			{				$result = $this->_compare_conflict_seq('final1', 'final2');				if (!$result['merge_found'])				{					$this->final2 = array_merge($this->final1, $this->final2);					$this->_merged = &$this->final2;				}				else				{					$this->final2 = $this->final1;					$this->_merged = &$this->final1;				}			}			return;		}		// CASE THREE: Removed lines (orig has the to-remove line(s), but final1 has additional lines which does not need to be removed). Just remove orig from final1 and then use final1 as final2/merge		if (!sizeof($this->final2) && sizeof($this->orig) && sizeof($this->final1) && $this->orig !== $this->final1)		{			$result = $this->_compare_conflict_seq('orig', 'final1');			if (!$result['merge_found'])			{				return;			}			// First of all, try to find the code in orig in final1. ;)			$compare_seq = sizeof($this->orig);			$begin = $end = -1;			$j = 0;			for ($i = 0, $size = sizeof($this->final1); $i < $size; $i++)			{				$line = $this->final1[$i];				if (trim($line) === trim($this->orig[$j]))				{					// Mark begin					if ($begin === -1)					{						$begin = $i;					}					// End is always $i, the last found line					$end = $i;					if (isset($this->orig[$j+1]))					{						$j++;					}				}			}			if ($begin !== -1 && $begin + ($compare_seq - 1) == $end)			{				foreach ($this->final1 as $i => $line)				{					if ($i < $begin || $i > $end)					{						$merged[] = $line;					}				}				$this->final2 = $merged;				$this->_merged = &$this->final2;			}			return;		}		return;	}}/*** @package diff* @author  Geoffrey T. Dairiki <dairiki@dairiki.org>** @access private*/class diff3_op_copy extends diff3_op{	function diff3_op_copy($lines = false)	{		$this->orig = $lines ? $lines : array();		$this->final1 = &$this->orig;		$this->final2 = &$this->orig;	}	function merged()	{		return $this->orig;	}	function is_conflict()	{		return false;	}}/*** @package diff* @author  Geoffrey T. Dairiki <dairiki@dairiki.org>** @access private*/class diff3_block_builder{	function diff3_block_builder()	{		$this->_init();	}	function input($lines)	{		if ($lines)		{			$this->_append($this->orig, $lines);		}	}	function out1($lines)	{		if ($lines)		{			$this->_append($this->final1, $lines);		}	}	function out2($lines)	{		if ($lines)		{			$this->_append($this->final2, $lines);		}	}	function is_empty()	{		return !$this->orig && !$this->final1 && !$this->final2;	}	function finish()	{		if ($this->is_empty())		{			return false;		}		else		{			$edit = new diff3_op($this->orig, $this->final1, $this->final2);			$this->_init();			return $edit;		}	}	function _init()	{		$this->orig = $this->final1 = $this->final2 = array();	}	function _append(&$array, $lines)	{		array_splice($array, sizeof($array), 0, $lines);	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @todo [words] check regular expressions for special char replacements (stored specialchared in db)* @package acp*/class acp_words{	var $u_action;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('acp/posting');		// Set up general vars		$action = request_var('action', '');		$action = (isset($_POST['add'])) ? 'add' : ((isset($_POST['save'])) ? 'save' : $action);		$s_hidden_fields = '';		$word_info = array();		$this->tpl_name = 'acp_words';		$this->page_title = 'ACP_WORDS';		$form_name = 'acp_words';		add_form_key($form_name);		switch ($action)		{			case 'edit':				$word_id = request_var('id', 0);				if (!$word_id)				{					trigger_error($user->lang['NO_WORD'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . WORDS_TABLE . "					WHERE word_id = $word_id";				$result = $db->sql_query($sql);				$word_info = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$s_hidden_fields .= '<input type="hidden" name="id" value="' . $word_id . '" />';			case 'add':				$template->assign_vars(array(					'S_EDIT_WORD'		=> true,					'U_ACTION'			=> $this->u_action,					'U_BACK'			=> $this->u_action,					'WORD'				=> (isset($word_info['word'])) ? $word_info['word'] : '',					'REPLACEMENT'		=> (isset($word_info['replacement'])) ? $word_info['replacement'] : '',					'S_HIDDEN_FIELDS'	=> $s_hidden_fields)				);				return;			break;			case 'save':				if (!check_form_key($form_name))				{					trigger_error($user->lang['FORM_INVALID']. adm_back_link($this->u_action), E_USER_WARNING);				}				$word_id		= request_var('id', 0);				$word			= utf8_normalize_nfc(request_var('word', '', true));				$replacement	= utf8_normalize_nfc(request_var('replacement', '', true));				if ($word === '' || $replacement === '')				{					trigger_error($user->lang['ENTER_WORD'] . adm_back_link($this->u_action), E_USER_WARNING);				}				// Replace multiple consecutive asterisks with single one as those are not needed				$word = preg_replace('#\*{2,}#', '*', $word);				$sql_ary = array(					'word'			=> $word,					'replacement'	=> $replacement				);								if ($word_id)				{					$db->sql_query('UPDATE ' . WORDS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . ' WHERE word_id = ' . $word_id);				}				else				{					$db->sql_query('INSERT INTO ' . WORDS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));				}				$cache->destroy('_word_censors');				$log_action = ($word_id) ? 'LOG_WORD_EDIT' : 'LOG_WORD_ADD';				add_log('admin', $log_action, $word);				$message = ($word_id) ? $user->lang['WORD_UPDATED'] : $user->lang['WORD_ADDED'];				trigger_error($message . adm_back_link($this->u_action));			break;			case 'delete':				$word_id = request_var('id', 0);				if (!$word_id)				{					trigger_error($user->lang['NO_WORD'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (confirm_box(true))				{					$sql = 'SELECT word						FROM ' . WORDS_TABLE . "						WHERE word_id = $word_id";					$result = $db->sql_query($sql);					$deleted_word = $db->sql_fetchfield('word');					$db->sql_freeresult($result);					$sql = 'DELETE FROM ' . WORDS_TABLE . "						WHERE word_id = $word_id";					$db->sql_query($sql);					$cache->destroy('_word_censors');					add_log('admin', 'LOG_WORD_DELETE', $deleted_word);					trigger_error($user->lang['WORD_REMOVED'] . adm_back_link($this->u_action));				}				else				{					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(						'i'			=> $id,						'mode'		=> $mode,						'id'		=> $word_id,						'action'	=> 'delete',					)));				}			break;		}		$template->assign_vars(array(			'U_ACTION'			=> $this->u_action,			'S_HIDDEN_FIELDS'	=> $s_hidden_fields)		);		$sql = 'SELECT *			FROM ' . WORDS_TABLE . '			ORDER BY word';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$template->assign_block_vars('words', array(				'WORD'			=> $row['word'],				'REPLACEMENT'	=> $row['replacement'],				'U_EDIT'		=> $this->u_action . '&amp;action=edit&amp;id=' . $row['word_id'],				'U_DELETE'		=> $this->u_action . '&amp;action=delete&amp;id=' . $row['word_id'])			);		}		$db->sql_freeresult($result);	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class mcp_logs_info{	function module()	{		return array(			'filename'	=> 'mcp_logs',			'title'		=> 'MCP_LOGS',			'version'	=> '1.0.0',			'modes'		=> array(				'front'			=> array('title' => 'MCP_LOGS_FRONT', 'auth' => 'acl_m_ || aclf_m_', 'cat' => array('MCP_LOGS')),				'forum_logs'	=> array('title' => 'MCP_LOGS_FORUM_VIEW', 'auth' => 'acl_m_,$id', 'cat' => array('MCP_LOGS')),				'topic_logs'	=> array('title' => 'MCP_LOGS_TOPIC_VIEW', 'auth' => 'acl_m_,$id', 'cat' => array('MCP_LOGS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ucp_attachments* User attachments* @package ucp*/class ucp_attachments{	var $u_action;	function main($id, $mode)	{		global $template, $user, $db, $config, $phpEx, $phpbb_root_path;		$start		= request_var('start', 0);		$sort_key	= request_var('sk', 'a');		$sort_dir	= request_var('sd', 'a');		$delete		= (isset($_POST['delete'])) ? true : false;		$confirm	= (isset($_POST['confirm'])) ? true : false;		$delete_ids	= array_keys(request_var('attachment', array(0)));		if ($delete && sizeof($delete_ids))		{			// Validate $delete_ids...			$sql = 'SELECT attach_id				FROM ' . ATTACHMENTS_TABLE . '				WHERE poster_id = ' . $user->data['user_id'] . '					AND is_orphan = 0					AND ' . $db->sql_in_set('attach_id', $delete_ids);			$result = $db->sql_query($sql);			$delete_ids = array();			while ($row = $db->sql_fetchrow($result))			{				$delete_ids[] = $row['attach_id'];			}			$db->sql_freeresult($result);		}		if ($delete && sizeof($delete_ids))		{			$s_hidden_fields = array(				'delete'	=> 1			);			foreach ($delete_ids as $attachment_id)			{				$s_hidden_fields['attachment'][$attachment_id] = 1;			}			if (confirm_box(true))			{				if (!function_exists('delete_attachments'))				{					include_once($phpbb_root_path . 'includes/functions_admin.' . $phpEx);				}				delete_attachments('attach', $delete_ids);				meta_refresh(3, $this->u_action);				$message = ((sizeof($delete_ids) == 1) ? $user->lang['ATTACHMENT_DELETED'] : $user->lang['ATTACHMENTS_DELETED']) . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $this->u_action . '">', '</a>');				trigger_error($message);			}			else			{				confirm_box(false, (sizeof($delete_ids) == 1) ? 'DELETE_ATTACHMENT' : 'DELETE_ATTACHMENTS', build_hidden_fields($s_hidden_fields));			}		}		// Select box eventually		$sort_key_text = array('a' => $user->lang['SORT_FILENAME'], 'b' => $user->lang['SORT_COMMENT'], 'c' => $user->lang['SORT_EXTENSION'], 'd' => $user->lang['SORT_SIZE'], 'e' => $user->lang['SORT_DOWNLOADS'], 'f' => $user->lang['SORT_POST_TIME'], 'g' => $user->lang['SORT_TOPIC_TITLE']);		$sort_key_sql = array('a' => 'a.real_filename', 'b' => 'a.attach_comment', 'c' => 'a.extension', 'd' => 'a.filesize', 'e' => 'a.download_count', 'f' => 'a.filetime', 'g' => 't.topic_title');		$sort_dir_text = array('a' => $user->lang['ASCENDING'], 'd' => $user->lang['DESCENDING']);		$s_sort_key = '';		foreach ($sort_key_text as $key => $value)		{			$selected = ($sort_key == $key) ? ' selected="selected"' : '';			$s_sort_key .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';		}		$s_sort_dir = '';		foreach ($sort_dir_text as $key => $value)		{			$selected = ($sort_dir == $key) ? ' selected="selected"' : '';			$s_sort_dir .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';		}		if (!isset($sort_key_sql[$sort_key]))		{			$sort_key = 'a';		}		$order_by = $sort_key_sql[$sort_key] . ' ' . (($sort_dir == 'a') ? 'ASC' : 'DESC');		$sql = 'SELECT COUNT(attach_id) as num_attachments			FROM ' . ATTACHMENTS_TABLE . '			WHERE poster_id = ' . $user->data['user_id'] . '				AND is_orphan = 0';		$result = $db->sql_query($sql);		$num_attachments = $db->sql_fetchfield('num_attachments');		$db->sql_freeresult($result);		$sql = 'SELECT a.*, t.topic_title, p.message_subject as message_title			FROM ' . ATTACHMENTS_TABLE . ' a				LEFT JOIN ' . TOPICS_TABLE . ' t ON (a.topic_id = t.topic_id AND a.in_message = 0)				LEFT JOIN ' . PRIVMSGS_TABLE . ' p ON (a.post_msg_id = p.msg_id AND a.in_message = 1)			WHERE a.poster_id = ' . $user->data['user_id'] . "				AND a.is_orphan = 0			ORDER BY $order_by";		$result = $db->sql_query_limit($sql, $config['topics_per_page'], $start);		$row_count = 0;		if ($row = $db->sql_fetchrow($result))		{			$template->assign_var('S_ATTACHMENT_ROWS', true);			do			{				if ($row['in_message'])				{					$view_topic = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&amp;p={$row['post_msg_id']}");				}				else				{					$view_topic = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "t={$row['topic_id']}&amp;p={$row['post_msg_id']}") . "#p{$row['post_msg_id']}";				}				$template->assign_block_vars('attachrow', array(					'ROW_NUMBER'		=> $row_count + ($start + 1),					'FILENAME'			=> $row['real_filename'],					'COMMENT'			=> bbcode_nl2br($row['attach_comment']),					'EXTENSION'			=> $row['extension'],					'SIZE'				=> get_formatted_filesize($row['filesize']),					'DOWNLOAD_COUNT'	=> $row['download_count'],					'POST_TIME'			=> $user->format_date($row['filetime']),					'TOPIC_TITLE'		=> ($row['in_message']) ? $row['message_title'] : $row['topic_title'],					'ATTACH_ID'			=> $row['attach_id'],					'POST_ID'			=> $row['post_msg_id'],					'TOPIC_ID'			=> $row['topic_id'],					'S_IN_MESSAGE'		=> $row['in_message'],					'U_VIEW_ATTACHMENT'	=> append_sid("{$phpbb_root_path}download/file.$phpEx", 'id=' . $row['attach_id']),					'U_VIEW_TOPIC'		=> $view_topic)				);				$row_count++;			}			while ($row = $db->sql_fetchrow($result));		}		$db->sql_freeresult($result);		$template->assign_vars(array(			'PAGE_NUMBER'			=> on_page($num_attachments, $config['topics_per_page'], $start),			'PAGINATION'			=> generate_pagination($this->u_action . "&amp;sk=$sort_key&amp;sd=$sort_dir", $num_attachments, $config['topics_per_page'], $start),			'TOTAL_ATTACHMENTS'		=> $num_attachments,			'L_TITLE'				=> $user->lang['UCP_ATTACHMENTS'],			'U_SORT_FILENAME'		=> $this->u_action . "&amp;sk=a&amp;sd=" . (($sort_key == 'a' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_FILE_COMMENT'	=> $this->u_action . "&amp;sk=b&amp;sd=" . (($sort_key == 'b' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_EXTENSION'		=> $this->u_action . "&amp;sk=c&amp;sd=" . (($sort_key == 'c' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_FILESIZE'		=> $this->u_action . "&amp;sk=d&amp;sd=" . (($sort_key == 'd' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_DOWNLOADS'		=> $this->u_action . "&amp;sk=e&amp;sd=" . (($sort_key == 'e' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_POST_TIME'		=> $this->u_action . "&amp;sk=f&amp;sd=" . (($sort_key == 'f' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_TOPIC_TITLE'	=> $this->u_action . "&amp;sk=g&amp;sd=" . (($sort_key == 'g' && $sort_dir == 'a') ? 'd' : 'a'),			'S_DISPLAY_MARK_ALL'	=> ($num_attachments) ? true : false,			'S_DISPLAY_PAGINATION'	=> ($num_attachments) ? true : false,			'S_UCP_ACTION'			=> $this->u_action,			'S_SORT_OPTIONS' 		=> $s_sort_key,			'S_ORDER_SELECT'		=> $s_sort_dir)		);		$this->tpl_name = 'ucp_attachments';		$this->page_title = 'UCP_ATTACHMENTS';	}}?>
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'ff',''=>'fi',''=>'fl',''=>'',''=>'',''=>'',''=>'st',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ucp_remind* Sending password reminders* @package ucp*/class ucp_remind{	var $u_action;	function main($id, $mode)	{		global $config, $phpbb_root_path, $phpEx;		global $db, $user, $auth, $template;		$username	= request_var('username', '', true);		$email		= strtolower(request_var('email', ''));		$submit		= (isset($_POST['submit'])) ? true : false;		if ($submit)		{			$sql = 'SELECT user_id, username, user_permissions, user_email, user_jabber, user_notify_type, user_type, user_lang, user_inactive_reason				FROM ' . USERS_TABLE . "				WHERE user_email_hash = '" . $db->sql_escape(phpbb_email_hash($email)) . "'					AND username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";			$result = $db->sql_query($sql);			$user_row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$user_row)			{				trigger_error('NO_EMAIL_USER');			}			if ($user_row['user_type'] == USER_IGNORE)			{				trigger_error('NO_USER');			}			if ($user_row['user_type'] == USER_INACTIVE)			{				if ($user_row['user_inactive_reason'] == INACTIVE_MANUAL)				{					trigger_error('ACCOUNT_DEACTIVATED');				}				else				{					trigger_error('ACCOUNT_NOT_ACTIVATED');				}			}			// Check users permissions			$auth2 = new auth();			$auth2->acl($user_row);			if (!$auth2->acl_get('u_chgpasswd'))			{				trigger_error('NO_AUTH_PASSWORD_REMINDER');			}			$server_url = generate_board_url();			// Make password at least 8 characters long, make it longer if admin wants to.			// gen_rand_string() however has a limit of 12 or 13.			$user_password = gen_rand_string_friendly(max(8, mt_rand((int) $config['min_pass_chars'], (int) $config['max_pass_chars'])));			// For the activation key a random length between 6 and 10 will do.			$user_actkey = gen_rand_string(mt_rand(6, 10));			$sql = 'UPDATE ' . USERS_TABLE . "				SET user_newpasswd = '" . $db->sql_escape(phpbb_hash($user_password)) . "', user_actkey = '" . $db->sql_escape($user_actkey) . "'				WHERE user_id = " . $user_row['user_id'];			$db->sql_query($sql);			include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);			$messenger = new messenger(false);			$messenger->template('user_activate_passwd', $user_row['user_lang']);			$messenger->to($user_row['user_email'], $user_row['username']);			$messenger->im($user_row['user_jabber'], $user_row['username']);			$messenger->assign_vars(array(				'USERNAME'		=> htmlspecialchars_decode($user_row['username']),				'PASSWORD'		=> htmlspecialchars_decode($user_password),				'U_ACTIVATE'	=> "$server_url/ucp.$phpEx?mode=activate&u={$user_row['user_id']}&k=$user_actkey")			);			$messenger->send($user_row['user_notify_type']);			meta_refresh(3, append_sid("{$phpbb_root_path}index.$phpEx"));			$message = $user->lang['PASSWORD_UPDATED'] . '<br /><br />' . sprintf($user->lang['RETURN_INDEX'], '<a href="' . append_sid("{$phpbb_root_path}index.$phpEx") . '">', '</a>');			trigger_error($message);		}		$template->assign_vars(array(			'USERNAME'			=> $username,			'EMAIL'				=> $email,			'S_PROFILE_ACTION'	=> append_sid($phpbb_root_path . 'ucp.' . $phpEx, 'mode=sendpassword'))		);		$this->tpl_name = 'ucp_remind';		$this->page_title = 'UCP_REMIND';	}}?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2006, 2008 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Placeholder for autoload*/if (!class_exists('phpbb_default_captcha')){	include($phpbb_root_path . 'includes/captcha/plugins/captcha_abstract.' . $phpEx);}/*** @package VC*/class phpbb_captcha_gd extends phpbb_default_captcha{	var $captcha_vars = array(		'captcha_gd_x_grid'				=> 'CAPTCHA_GD_X_GRID',		'captcha_gd_y_grid'				=> 'CAPTCHA_GD_Y_GRID',		'captcha_gd_foreground_noise'	=> 'CAPTCHA_GD_FOREGROUND_NOISE',//		'captcha_gd'					=> 'CAPTCHA_GD_PREVIEWED',		'captcha_gd_wave'				=> 'CAPTCHA_GD_WAVE',		'captcha_gd_3d_noise'			=> 'CAPTCHA_GD_3D_NOISE',		'captcha_gd_fonts'				=> 'CAPTCHA_GD_FONTS',	);	function phpbb_captcha_gd()	{		global $phpbb_root_path, $phpEx;		if (!class_exists('captcha'))		{			include($phpbb_root_path . 'includes/captcha/captcha_gd.' . $phpEx);		}	}	function &get_instance()	{		$instance =& new phpbb_captcha_gd();		return $instance;	}	function is_available()	{		global $phpbb_root_path, $phpEx;		if (@extension_loaded('gd'))		{			return true;		}		if (!function_exists('can_load_dll'))		{			include($phpbb_root_path . 'includes/functions_install.' . $phpEx);		}		return can_load_dll('gd');	}	/**	*  API function	*/	function has_config()	{		return true;	}	function get_name()	{		return 'CAPTCHA_GD';	}	function get_class_name()	{		return 'phpbb_captcha_gd';	}	function acp_page($id, &$module)	{		global $db, $user, $auth, $template;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('acp/board');		$config_vars = array(			'enable_confirm'		=> 'REG_ENABLE',			'enable_post_confirm'	=> 'POST_ENABLE',			'confirm_refresh'		=> 'CONFIRM_REFRESH',			'captcha_gd'			=> 'CAPTCHA_GD',		);		$module->tpl_name = 'captcha_gd_acp';		$module->page_title = 'ACP_VC_SETTINGS';		$form_key = 'acp_captcha';		add_form_key($form_key);		$submit = request_var('submit', '');		if ($submit && check_form_key($form_key))		{			$captcha_vars = array_keys($this->captcha_vars);			foreach ($captcha_vars as $captcha_var)			{				$value = request_var($captcha_var, 0);				if ($value >= 0)				{					set_config($captcha_var, $value);				}			}			add_log('admin', 'LOG_CONFIG_VISUAL');			trigger_error($user->lang['CONFIG_UPDATED'] . adm_back_link($module->u_action));		}		else if ($submit)		{			trigger_error($user->lang['FORM_INVALID'] . adm_back_link($module->u_action));		}		else		{			foreach ($this->captcha_vars as $captcha_var => $template_var)			{				$var = (isset($_REQUEST[$captcha_var])) ? request_var($captcha_var, 0) : $config[$captcha_var];				$template->assign_var($template_var, $var);			}			$template->assign_vars(array(				'CAPTCHA_PREVIEW'	=> $this->get_demo_template($id),				'CAPTCHA_NAME'		=> $this->get_class_name(),				'U_ACTION'			=> $module->u_action,			));		}	}	function execute_demo()	{		global $config;		$config_old = $config;		foreach ($this->captcha_vars as $captcha_var => $template_var)		{				$config[$captcha_var] = request_var($captcha_var, (int) $config[$captcha_var]);		}		parent::execute_demo();		$config = $config_old;	}}?>
<?php return array(''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'10',''=>'20',''=>'30',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'21',''=>'22',''=>'23',''=>'24',''=>'25',''=>'26',''=>'27',''=>'28',''=>'29',''=>'30',''=>'31',''=>'32',''=>'33',''=>'34',''=>'35',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'36',''=>'37',''=>'38',''=>'39',''=>'40',''=>'41',''=>'42',''=>'43',''=>'44',''=>'45',''=>'46',''=>'47',''=>'48',''=>'49',''=>'50',''=>'');
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);require($phpbb_root_path . 'common.' . $phpEx);require($phpbb_root_path . 'includes/functions_user.' . $phpEx);require($phpbb_root_path . 'includes/functions_module.' . $phpEx);// Basic parameter data$id 	= request_var('i', '');$mode	= request_var('mode', '');if (in_array($mode, array('login', 'logout', 'confirm', 'sendpassword', 'activate'))){	define('IN_LOGIN', true);}// Start session management$user->session_begin();$auth->acl($user->data);$user->setup('ucp');// Setting a variable to let the style designer know where he is...$template->assign_var('S_IN_UCP', true);$module = new p_master();$default = false;// Basic "global" modesswitch ($mode){	case 'activate':		$module->load('ucp', 'activate');		$module->display($user->lang['UCP_ACTIVATE']);		redirect(append_sid("{$phpbb_root_path}index.$phpEx"));	break;	case 'resend_act':		$module->load('ucp', 'resend');		$module->display($user->lang['UCP_RESEND']);	break;	case 'sendpassword':		$module->load('ucp', 'remind');		$module->display($user->lang['UCP_REMIND']);	break;	case 'register':		if ($user->data['is_registered'] || isset($_REQUEST['not_agreed']))		{			redirect(append_sid("{$phpbb_root_path}index.$phpEx"));		}		$module->load('ucp', 'register');		$module->display($user->lang['REGISTER']);	break;	case 'confirm':		$module->load('ucp', 'confirm');	break;	case 'login':		if ($user->data['is_registered'])		{			redirect(append_sid("{$phpbb_root_path}index.$phpEx"));		}		login_box(request_var('redirect', "index.$phpEx"));	break;	case 'logout':		if ($user->data['user_id'] != ANONYMOUS && isset($_GET['sid']) && !is_array($_GET['sid']) && $_GET['sid'] === $user->session_id)		{			$user->session_kill();			$user->session_begin();			$message = $user->lang['LOGOUT_REDIRECT'];		}		else		{			$message = ($user->data['user_id'] == ANONYMOUS) ? $user->lang['LOGOUT_REDIRECT'] : $user->lang['LOGOUT_FAILED'];		}		meta_refresh(3, append_sid("{$phpbb_root_path}index.$phpEx"));		$message = $message . '<br /><br />' . sprintf($user->lang['RETURN_INDEX'], '<a href="' . append_sid("{$phpbb_root_path}index.$phpEx") . '">', '</a> ');		trigger_error($message);	break;	case 'terms':	case 'privacy':		$message = ($mode == 'terms') ? 'TERMS_OF_USE_CONTENT' : 'PRIVACY_POLICY';		$title = ($mode == 'terms') ? 'TERMS_USE' : 'PRIVACY';		if (empty($user->lang[$message]))		{			if ($user->data['is_registered'])			{				redirect(append_sid("{$phpbb_root_path}index.$phpEx"));			}			login_box();		}		$template->set_filenames(array(			'body'		=> 'ucp_agreement.html')		);		// Disable online list		page_header($user->lang[$title], false);		$template->assign_vars(array(			'S_AGREEMENT'			=> true,			'AGREEMENT_TITLE'		=> $user->lang[$title],			'AGREEMENT_TEXT'		=> sprintf($user->lang[$message], $config['sitename'], generate_board_url()),			'U_BACK'				=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=login'),			'L_BACK'				=> $user->lang['BACK_TO_LOGIN'],		));		page_footer();	break;	case 'delete_cookies':		// Delete Cookies with dynamic names (do NOT delete poll cookies)		if (confirm_box(true))		{			$set_time = time() - 31536000;			foreach ($_COOKIE as $cookie_name => $cookie_data)			{				// Only delete board cookies, no other ones...				if (strpos($cookie_name, $config['cookie_name'] . '_') !== 0)				{					continue;				}				$cookie_name = str_replace($config['cookie_name'] . '_', '', $cookie_name);				// Polls are stored as {cookie_name}_poll_{topic_id}, cookie_name_ got removed, therefore checking for poll_				if (strpos($cookie_name, 'poll_') !== 0)				{					$user->set_cookie($cookie_name, '', $set_time);				}			}			$user->set_cookie('track', '', $set_time);			$user->set_cookie('u', '', $set_time);			$user->set_cookie('k', '', $set_time);			$user->set_cookie('sid', '', $set_time);			// We destroy the session here, the user will be logged out nevertheless			$user->session_kill();			$user->session_begin();			meta_refresh(3, append_sid("{$phpbb_root_path}index.$phpEx"));			$message = $user->lang['COOKIES_DELETED'] . '<br /><br />' . sprintf($user->lang['RETURN_INDEX'], '<a href="' . append_sid("{$phpbb_root_path}index.$phpEx") . '">', '</a>');			trigger_error($message);		}		else		{			confirm_box(false, 'DELETE_COOKIES', '');		}		redirect(append_sid("{$phpbb_root_path}index.$phpEx"));	break;	case 'switch_perm':		$user_id = request_var('u', 0);		$sql = 'SELECT *			FROM ' . USERS_TABLE . '			WHERE user_id = ' . (int) $user_id;		$result = $db->sql_query($sql);		$user_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$auth->acl_get('a_switchperm') || !$user_row || $user_id == $user->data['user_id'] || !check_link_hash(request_var('hash', ''), 'switchperm'))		{			redirect(append_sid("{$phpbb_root_path}index.$phpEx"));		}		include($phpbb_root_path . 'includes/acp/auth.' . $phpEx);		$auth_admin = new auth_admin();		if (!$auth_admin->ghost_permissions($user_id, $user->data['user_id']))		{			redirect(append_sid("{$phpbb_root_path}index.$phpEx"));		}		add_log('admin', 'LOG_ACL_TRANSFER_PERMISSIONS', $user_row['username']);		$message = sprintf($user->lang['PERMISSIONS_TRANSFERRED'], $user_row['username']) . '<br /><br />' . sprintf($user->lang['RETURN_INDEX'], '<a href="' . append_sid("{$phpbb_root_path}index.$phpEx") . '">', '</a>');		trigger_error($message);	break;	case 'restore_perm':		if (!$user->data['user_perm_from'] || !$auth->acl_get('a_switchperm'))		{			redirect(append_sid("{$phpbb_root_path}index.$phpEx"));		}		$auth->acl_cache($user->data);		$sql = 'SELECT username			FROM ' . USERS_TABLE . '			WHERE user_id = ' . $user->data['user_perm_from'];		$result = $db->sql_query($sql);		$username = $db->sql_fetchfield('username');		$db->sql_freeresult($result);		add_log('admin', 'LOG_ACL_RESTORE_PERMISSIONS', $username);		$message = $user->lang['PERMISSIONS_RESTORED'] . '<br /><br />' . sprintf($user->lang['RETURN_INDEX'], '<a href="' . append_sid("{$phpbb_root_path}index.$phpEx") . '">', '</a>');		trigger_error($message);	break;	default:		$default = true;	break;}// We use this approach because it does not impose large code changesif (!$default){	return true;}// Only registered users can go beyond this pointif (!$user->data['is_registered']){	if ($user->data['is_bot'])	{		redirect(append_sid("{$phpbb_root_path}index.$phpEx"));	}	if ($id == 'pm' && $mode == 'view' && isset($_GET['p']))	{		$redirect_url = append_sid("{$phpbb_root_path}ucp.$phpEx?i=pm&p=" . request_var('p', 0));		login_box($redirect_url, $user->lang['LOGIN_EXPLAIN_UCP']);	}	login_box('', $user->lang['LOGIN_EXPLAIN_UCP']);}// Instantiate module system and generate list of available modules$module->list_modules('ucp');// Check if the zebra module is setif ($module->is_active('zebra', 'friends')){	// Output listing of friends online	$update_time = $config['load_online_time'] * 60;	$sql = $db->sql_build_query('SELECT_DISTINCT', array(		'SELECT'	=> 'u.user_id, u.username, u.username_clean, u.user_colour, MAX(s.session_time) as online_time, MIN(s.session_viewonline) AS viewonline',		'FROM'		=> array(			USERS_TABLE		=> 'u',			ZEBRA_TABLE		=> 'z'		),		'LEFT_JOIN'	=> array(			array(				'FROM'	=> array(SESSIONS_TABLE => 's'),				'ON'	=> 's.session_user_id = z.zebra_id'			)		),		'WHERE'		=> 'z.user_id = ' . $user->data['user_id'] . '			AND z.friend = 1			AND u.user_id = z.zebra_id',		'GROUP_BY'	=> 'z.zebra_id, u.user_id, u.username_clean, u.user_colour, u.username',		'ORDER_BY'	=> 'u.username_clean ASC',	));	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$which = (time() - $update_time < $row['online_time'] && ($row['viewonline'] || $auth->acl_get('u_viewonline'))) ? 'online' : 'offline';		$template->assign_block_vars("friends_{$which}", array(			'USER_ID'		=> $row['user_id'],			'U_PROFILE'		=> get_username_string('profile', $row['user_id'], $row['username'], $row['user_colour']),			'USER_COLOUR'	=> get_username_string('colour', $row['user_id'], $row['username'], $row['user_colour']),			'USERNAME'		=> get_username_string('username', $row['user_id'], $row['username'], $row['user_colour']),			'USERNAME_FULL'	=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']))		);	}	$db->sql_freeresult($result);}// Do not display subscribed topics/forums if not allowedif (!$config['allow_topic_notify'] && !$config['allow_forum_notify']){	$module->set_display('main', 'subscribed', false);}// Do not display signature panel if not authed to do soif (!$auth->acl_get('u_sig')){	$module->set_display('profile', 'signature', false);}// Select the active module$module->set_active($id, $mode);// Load and execute the relevant module$module->load_active();// Assign data to the template engine for the list of modules$module->assign_tpl_vars(append_sid("{$phpbb_root_path}ucp.$phpEx"));// Generate the page, do not display/query online list$module->display($module->get_page_title(), false);/*** Function for assigning a template var if the zebra module got included*/function _module_zebra($mode, &$module_row){	global $template;	$template->assign_var('S_ZEBRA_ENABLED', true);	if ($mode == 'friends')	{		$template->assign_var('S_ZEBRA_FRIENDS_ENABLED', true);	}	if ($mode == 'foes')	{		$template->assign_var('S_ZEBRA_FOES_ENABLED', true);	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_forums{	var $u_action;	var $parent_id = 0;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_admin_path, $phpbb_root_path, $phpEx;		$user->add_lang('acp/forums');		$this->tpl_name = 'acp_forums';		$this->page_title = 'ACP_MANAGE_FORUMS';		$form_key = 'acp_forums';		add_form_key($form_key);		$action		= request_var('action', '');		$update		= (isset($_POST['update'])) ? true : false;		$forum_id	= request_var('f', 0);		$this->parent_id	= request_var('parent_id', 0);		$forum_data = $errors = array();		if ($update && !check_form_key($form_key))		{			$update = false;			$errors[] = $user->lang['FORM_INVALID'];		}		// Check additional permissions		switch ($action)		{			case 'progress_bar':				$start = request_var('start', 0);				$total = request_var('total', 0);				$this->display_progress_bar($start, $total);				exit;			break;			case 'delete':				if (!$auth->acl_get('a_forumdel'))				{					trigger_error($user->lang['NO_PERMISSION_FORUM_DELETE'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}			break;			case 'add':				if (!$auth->acl_get('a_forumadd'))				{					trigger_error($user->lang['NO_PERMISSION_FORUM_ADD'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}			break;		}		// Major routines		if ($update)		{			switch ($action)			{				case 'delete':					$action_subforums	= request_var('action_subforums', '');					$subforums_to_id	= request_var('subforums_to_id', 0);					$action_posts		= request_var('action_posts', '');					$posts_to_id		= request_var('posts_to_id', 0);					$errors = $this->delete_forum($forum_id, $action_posts, $action_subforums, $posts_to_id, $subforums_to_id);					if (sizeof($errors))					{						break;					}					$auth->acl_clear_prefetch();					$cache->destroy('sql', FORUMS_TABLE);					trigger_error($user->lang['FORUM_DELETED'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id));				break;				case 'edit':					$forum_data = array(						'forum_id'		=>	$forum_id					);				// No break here				case 'add':					$forum_data += array(						'parent_id'				=> request_var('forum_parent_id', $this->parent_id),						'forum_type'			=> request_var('forum_type', FORUM_POST),						'type_action'			=> request_var('type_action', ''),						'forum_status'			=> request_var('forum_status', ITEM_UNLOCKED),						'forum_parents'			=> '',						'forum_name'			=> utf8_normalize_nfc(request_var('forum_name', '', true)),						'forum_link'			=> request_var('forum_link', ''),						'forum_link_track'		=> request_var('forum_link_track', false),						'forum_desc'			=> utf8_normalize_nfc(request_var('forum_desc', '', true)),						'forum_desc_uid'		=> '',						'forum_desc_options'	=> 7,						'forum_desc_bitfield'	=> '',						'forum_rules'			=> utf8_normalize_nfc(request_var('forum_rules', '', true)),						'forum_rules_uid'		=> '',						'forum_rules_options'	=> 7,						'forum_rules_bitfield'	=> '',						'forum_rules_link'		=> request_var('forum_rules_link', ''),						'forum_image'			=> request_var('forum_image', ''),						'forum_style'			=> request_var('forum_style', 0),						'display_subforum_list'	=> request_var('display_subforum_list', false),						'display_on_index'		=> request_var('display_on_index', false),						'forum_topics_per_page'	=> request_var('topics_per_page', 0),						'enable_indexing'		=> request_var('enable_indexing', true),						'enable_icons'			=> request_var('enable_icons', false),						'enable_prune'			=> request_var('enable_prune', false),						'enable_post_review'	=> request_var('enable_post_review', true),						'enable_quick_reply'	=> request_var('enable_quick_reply', false),						'prune_days'			=> request_var('prune_days', 7),						'prune_viewed'			=> request_var('prune_viewed', 7),						'prune_freq'			=> request_var('prune_freq', 1),						'prune_old_polls'		=> request_var('prune_old_polls', false),						'prune_announce'		=> request_var('prune_announce', false),						'prune_sticky'			=> request_var('prune_sticky', false),						'forum_password'		=> request_var('forum_password', '', true),						'forum_password_confirm'=> request_var('forum_password_confirm', '', true),						'forum_password_unset'	=> request_var('forum_password_unset', false),					);					// On add, add empty forum_options... else do not consider it (not updating it)					if ($action == 'add')					{						$forum_data['forum_options'] = 0;					}					// Use link_display_on_index setting if forum type is link					if ($forum_data['forum_type'] == FORUM_LINK)					{						$forum_data['display_on_index'] = request_var('link_display_on_index', false);					}					// Linked forums and categories are not able to be locked...					if ($forum_data['forum_type'] == FORUM_LINK || $forum_data['forum_type'] == FORUM_CAT)					{						$forum_data['forum_status'] = ITEM_UNLOCKED;					}					$forum_data['show_active'] = ($forum_data['forum_type'] == FORUM_POST) ? request_var('display_recent', true) : request_var('display_active', false);					// Get data for forum rules if specified...					if ($forum_data['forum_rules'])					{						generate_text_for_storage($forum_data['forum_rules'], $forum_data['forum_rules_uid'], $forum_data['forum_rules_bitfield'], $forum_data['forum_rules_options'], request_var('rules_parse_bbcode', false), request_var('rules_parse_urls', false), request_var('rules_parse_smilies', false));					}					// Get data for forum description if specified					if ($forum_data['forum_desc'])					{						generate_text_for_storage($forum_data['forum_desc'], $forum_data['forum_desc_uid'], $forum_data['forum_desc_bitfield'], $forum_data['forum_desc_options'], request_var('desc_parse_bbcode', false), request_var('desc_parse_urls', false), request_var('desc_parse_smilies', false));					}					$errors = $this->update_forum_data($forum_data);					if (!sizeof($errors))					{						$forum_perm_from = request_var('forum_perm_from', 0);						$cache->destroy('sql', FORUMS_TABLE);						$copied_permissions = false;						// Copy permissions?						if ($forum_perm_from && $forum_perm_from != $forum_data['forum_id'] &&							($action != 'edit' || empty($forum_id) || ($auth->acl_get('a_fauth') && $auth->acl_get('a_authusers') && $auth->acl_get('a_authgroups') && $auth->acl_get('a_mauth'))))						{							copy_forum_permissions($forum_perm_from, $forum_data['forum_id'], ($action == 'edit') ? true : false);							cache_moderators();							$copied_permissions = true;						}/* Commented out because of questionable UI workflow - re-visit for 3.0.7						else if (!$this->parent_id && $action != 'edit' && $auth->acl_get('a_fauth') && $auth->acl_get('a_authusers') && $auth->acl_get('a_authgroups') && $auth->acl_get('a_mauth'))						{							$this->copy_permission_page($forum_data);							return;						}*/						$auth->acl_clear_prefetch();						$acl_url = '&amp;mode=setting_forum_local&amp;forum_id[]=' . $forum_data['forum_id'];						$message = ($action == 'add') ? $user->lang['FORUM_CREATED'] : $user->lang['FORUM_UPDATED'];						// redirect directly to permission settings screen if authed						if ($action == 'add' && !$copied_permissions && $auth->acl_get('a_fauth'))						{							$message .= '<br /><br />' . sprintf($user->lang['REDIRECT_ACL'], '<a href="' . append_sid("{$phpbb_admin_path}index.$phpEx", 'i=permissions' . $acl_url) . '">', '</a>');							meta_refresh(4, append_sid("{$phpbb_admin_path}index.$phpEx", 'i=permissions' . $acl_url));						}						trigger_error($message . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id));					}				break;			}		}		switch ($action)		{			case 'move_up':			case 'move_down':				if (!$forum_id)				{					trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . FORUMS_TABLE . "					WHERE forum_id = $forum_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				$move_forum_name = $this->move_forum_by($row, $action, 1);				if ($move_forum_name !== false)				{					add_log('admin', 'LOG_FORUM_' . strtoupper($action), $row['forum_name'], $move_forum_name);					$cache->destroy('sql', FORUMS_TABLE);				}			break;			case 'sync':				if (!$forum_id)				{					trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				@set_time_limit(0);				$sql = 'SELECT forum_name, forum_topics_real					FROM ' . FORUMS_TABLE . "					WHERE forum_id = $forum_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				if ($row['forum_topics_real'])				{					$sql = 'SELECT MIN(topic_id) as min_topic_id, MAX(topic_id) as max_topic_id						FROM ' . TOPICS_TABLE . '						WHERE forum_id = ' . $forum_id;					$result = $db->sql_query($sql);					$row2 = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					// Typecast to int if there is no data available					$row2['min_topic_id'] = (int) $row2['min_topic_id'];					$row2['max_topic_id'] = (int) $row2['max_topic_id'];					$start = request_var('start', $row2['min_topic_id']);					$batch_size = 2000;					$end = $start + $batch_size;					// Sync all topics in batch mode...					sync('topic_approved', 'range', 'topic_id BETWEEN ' . $start . ' AND ' . $end, true, false);					sync('topic', 'range', 'topic_id BETWEEN ' . $start . ' AND ' . $end, true, true);					if ($end < $row2['max_topic_id'])					{						// We really need to find a way of showing statistics... no progress here						$sql = 'SELECT COUNT(topic_id) as num_topics							FROM ' . TOPICS_TABLE . '							WHERE forum_id = ' . $forum_id . '								AND topic_id BETWEEN ' . $start . ' AND ' . $end;						$result = $db->sql_query($sql);						$topics_done = request_var('topics_done', 0) + (int) $db->sql_fetchfield('num_topics');						$db->sql_freeresult($result);						$start += $batch_size;						$url = $this->u_action . "&amp;parent_id={$this->parent_id}&amp;f=$forum_id&amp;action=sync&amp;start=$start&amp;topics_done=$topics_done&amp;total={$row['forum_topics_real']}";						meta_refresh(0, $url);						$template->assign_vars(array(							'U_PROGRESS_BAR'		=> $this->u_action . "&amp;action=progress_bar&amp;start=$topics_done&amp;total={$row['forum_topics_real']}",							'UA_PROGRESS_BAR'		=> addslashes($this->u_action . "&amp;action=progress_bar&amp;start=$topics_done&amp;total={$row['forum_topics_real']}"),							'S_CONTINUE_SYNC'		=> true,							'L_PROGRESS_EXPLAIN'	=> sprintf($user->lang['SYNC_IN_PROGRESS_EXPLAIN'], $topics_done, $row['forum_topics_real']))						);						return;					}				}				$url = $this->u_action . "&amp;parent_id={$this->parent_id}&amp;f=$forum_id&amp;action=sync_forum";				meta_refresh(0, $url);				$template->assign_vars(array(					'U_PROGRESS_BAR'		=> $this->u_action . '&amp;action=progress_bar',					'UA_PROGRESS_BAR'		=> addslashes($this->u_action . '&amp;action=progress_bar'),					'S_CONTINUE_SYNC'		=> true,					'L_PROGRESS_EXPLAIN'	=> sprintf($user->lang['SYNC_IN_PROGRESS_EXPLAIN'], 0, $row['forum_topics_real']))				);				return;			break;			case 'sync_forum':				$sql = 'SELECT forum_name, forum_type					FROM ' . FORUMS_TABLE . "					WHERE forum_id = $forum_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				sync('forum', 'forum_id', $forum_id, false, true);				add_log('admin', 'LOG_FORUM_SYNC', $row['forum_name']);				$cache->destroy('sql', FORUMS_TABLE);				$template->assign_var('L_FORUM_RESYNCED', sprintf($user->lang['FORUM_RESYNCED'], $row['forum_name']));			break;			case 'add':			case 'edit':				if ($update)				{					$forum_data['forum_flags'] = 0;					$forum_data['forum_flags'] += (request_var('forum_link_track', false)) ? FORUM_FLAG_LINK_TRACK : 0;					$forum_data['forum_flags'] += (request_var('prune_old_polls', false)) ? FORUM_FLAG_PRUNE_POLL : 0;					$forum_data['forum_flags'] += (request_var('prune_announce', false)) ? FORUM_FLAG_PRUNE_ANNOUNCE : 0;					$forum_data['forum_flags'] += (request_var('prune_sticky', false)) ? FORUM_FLAG_PRUNE_STICKY : 0;					$forum_data['forum_flags'] += ($forum_data['show_active']) ? FORUM_FLAG_ACTIVE_TOPICS : 0;					$forum_data['forum_flags'] += (request_var('enable_post_review', true)) ? FORUM_FLAG_POST_REVIEW : 0;					$forum_data['forum_flags'] += (request_var('enable_quick_reply', false)) ? FORUM_FLAG_QUICK_REPLY : 0;				}				// Show form to create/modify a forum				if ($action == 'edit')				{					$this->page_title = 'EDIT_FORUM';					$row = $this->get_forum_info($forum_id);					$old_forum_type = $row['forum_type'];					if (!$update)					{						$forum_data = $row;					}					else					{						$forum_data['left_id'] = $row['left_id'];						$forum_data['right_id'] = $row['right_id'];					}					// Make sure no direct child forums are able to be selected as parents.					$exclude_forums = array();					foreach (get_forum_branch($forum_id, 'children') as $row)					{						$exclude_forums[] = $row['forum_id'];					}					$parents_list = make_forum_select($forum_data['parent_id'], $exclude_forums, false, false, false);					$forum_data['forum_password_confirm'] = $forum_data['forum_password'];				}				else				{					$this->page_title = 'CREATE_FORUM';					$forum_id = $this->parent_id;					$parents_list = make_forum_select($this->parent_id, false, false, false, false);					// Fill forum data with default values					if (!$update)					{						$forum_data = array(							'parent_id'				=> $this->parent_id,							'forum_type'			=> FORUM_POST,							'forum_status'			=> ITEM_UNLOCKED,							'forum_name'			=> utf8_normalize_nfc(request_var('forum_name', '', true)),							'forum_link'			=> '',							'forum_link_track'		=> false,							'forum_desc'			=> '',							'forum_rules'			=> '',							'forum_rules_link'		=> '',							'forum_image'			=> '',							'forum_style'			=> 0,							'display_subforum_list'	=> true,							'display_on_index'		=> false,							'forum_topics_per_page'	=> 0,							'enable_indexing'		=> true,							'enable_icons'			=> false,							'enable_prune'			=> false,							'prune_days'			=> 7,							'prune_viewed'			=> 7,							'prune_freq'			=> 1,							'forum_flags'			=> FORUM_FLAG_POST_REVIEW + FORUM_FLAG_ACTIVE_TOPICS,							'forum_options'			=> 0,							'forum_password'		=> '',							'forum_password_confirm'=> '',						);					}				}				$forum_rules_data = array(					'text'			=> $forum_data['forum_rules'],					'allow_bbcode'	=> true,					'allow_smilies'	=> true,					'allow_urls'	=> true				);				$forum_desc_data = array(					'text'			=> $forum_data['forum_desc'],					'allow_bbcode'	=> true,					'allow_smilies'	=> true,					'allow_urls'	=> true				);				$forum_rules_preview = '';				// Parse rules if specified				if ($forum_data['forum_rules'])				{					if (!isset($forum_data['forum_rules_uid']))					{						// Before we are able to display the preview and plane text, we need to parse our request_var()'d value...						$forum_data['forum_rules_uid'] = '';						$forum_data['forum_rules_bitfield'] = '';						$forum_data['forum_rules_options'] = 0;						generate_text_for_storage($forum_data['forum_rules'], $forum_data['forum_rules_uid'], $forum_data['forum_rules_bitfield'], $forum_data['forum_rules_options'], request_var('rules_allow_bbcode', false), request_var('rules_allow_urls', false), request_var('rules_allow_smilies', false));					}					// Generate preview content					$forum_rules_preview = generate_text_for_display($forum_data['forum_rules'], $forum_data['forum_rules_uid'], $forum_data['forum_rules_bitfield'], $forum_data['forum_rules_options']);					// decode...					$forum_rules_data = generate_text_for_edit($forum_data['forum_rules'], $forum_data['forum_rules_uid'], $forum_data['forum_rules_options']);				}				// Parse desciption if specified				if ($forum_data['forum_desc'])				{					if (!isset($forum_data['forum_desc_uid']))					{						// Before we are able to display the preview and plane text, we need to parse our request_var()'d value...						$forum_data['forum_desc_uid'] = '';						$forum_data['forum_desc_bitfield'] = '';						$forum_data['forum_desc_options'] = 0;						generate_text_for_storage($forum_data['forum_desc'], $forum_data['forum_desc_uid'], $forum_data['forum_desc_bitfield'], $forum_data['forum_desc_options'], request_var('desc_allow_bbcode', false), request_var('desc_allow_urls', false), request_var('desc_allow_smilies', false));					}					// decode...					$forum_desc_data = generate_text_for_edit($forum_data['forum_desc'], $forum_data['forum_desc_uid'], $forum_data['forum_desc_options']);				}				$forum_type_options = '';				$forum_type_ary = array(FORUM_CAT => 'CAT', FORUM_POST => 'FORUM', FORUM_LINK => 'LINK');				foreach ($forum_type_ary as $value => $lang)				{					$forum_type_options .= '<option value="' . $value . '"' . (($value == $forum_data['forum_type']) ? ' selected="selected"' : '') . '>' . $user->lang['TYPE_' . $lang] . '</option>';				}				$styles_list = style_select($forum_data['forum_style'], true);				$statuslist = '<option value="' . ITEM_UNLOCKED . '"' . (($forum_data['forum_status'] == ITEM_UNLOCKED) ? ' selected="selected"' : '') . '>' . $user->lang['UNLOCKED'] . '</option><option value="' . ITEM_LOCKED . '"' . (($forum_data['forum_status'] == ITEM_LOCKED) ? ' selected="selected"' : '') . '>' . $user->lang['LOCKED'] . '</option>';				$sql = 'SELECT forum_id					FROM ' . FORUMS_TABLE . '					WHERE forum_type = ' . FORUM_POST . "						AND forum_id <> $forum_id";				$result = $db->sql_query_limit($sql, 1);				$postable_forum_exists = false;				if ($db->sql_fetchrow($result))				{					$postable_forum_exists = true;				}				$db->sql_freeresult($result);				// Subforum move options				if ($action == 'edit' && $forum_data['forum_type'] == FORUM_CAT)				{					$subforums_id = array();					$subforums = get_forum_branch($forum_id, 'children');					foreach ($subforums as $row)					{						$subforums_id[] = $row['forum_id'];					}					$forums_list = make_forum_select($forum_data['parent_id'], $subforums_id);					if ($postable_forum_exists)					{						$template->assign_vars(array(							'S_MOVE_FORUM_OPTIONS'		=> make_forum_select($forum_data['parent_id'], $subforums_id)) // , false, true, false???						);					}					$template->assign_vars(array(						'S_HAS_SUBFORUMS'		=> ($forum_data['right_id'] - $forum_data['left_id'] > 1) ? true : false,						'S_FORUMS_LIST'			=> $forums_list)					);				}				else if ($postable_forum_exists)				{					$template->assign_vars(array(						'S_MOVE_FORUM_OPTIONS'		=> make_forum_select($forum_data['parent_id'], $forum_id, false, true, false))					);				}				$s_show_display_on_index = false;				if ($forum_data['parent_id'] > 0)				{					// if this forum is a subforum put the "display on index" checkbox					if ($parent_info = $this->get_forum_info($forum_data['parent_id']))					{						if ($parent_info['parent_id'] > 0 || $parent_info['forum_type'] == FORUM_CAT)						{							$s_show_display_on_index = true;						}					}				}				if (strlen($forum_data['forum_password']) == 32)				{					$errors[] = $user->lang['FORUM_PASSWORD_OLD'];				}				$template->assign_vars(array(					'S_EDIT_FORUM'		=> true,					'S_ERROR'			=> (sizeof($errors)) ? true : false,					'S_PARENT_ID'		=> $this->parent_id,					'S_FORUM_PARENT_ID'	=> $forum_data['parent_id'],					'S_ADD_ACTION'		=> ($action == 'add') ? true : false,					'U_BACK'		=> $this->u_action . '&amp;parent_id=' . $this->parent_id,					'U_EDIT_ACTION'	=> $this->u_action . "&amp;parent_id={$this->parent_id}&amp;action=$action&amp;f=$forum_id",					'L_COPY_PERMISSIONS_EXPLAIN'	=> $user->lang['COPY_PERMISSIONS_' . strtoupper($action) . '_EXPLAIN'],					'L_TITLE'						=> $user->lang[$this->page_title],					'ERROR_MSG'						=> (sizeof($errors)) ? implode('<br />', $errors) : '',					'FORUM_NAME'				=> $forum_data['forum_name'],					'FORUM_DATA_LINK'			=> $forum_data['forum_link'],					'FORUM_IMAGE'				=> $forum_data['forum_image'],					'FORUM_IMAGE_SRC'			=> ($forum_data['forum_image']) ? $phpbb_root_path . $forum_data['forum_image'] : '',					'FORUM_POST'				=> FORUM_POST,					'FORUM_LINK'				=> FORUM_LINK,					'FORUM_CAT'					=> FORUM_CAT,					'PRUNE_FREQ'				=> $forum_data['prune_freq'],					'PRUNE_DAYS'				=> $forum_data['prune_days'],					'PRUNE_VIEWED'				=> $forum_data['prune_viewed'],					'TOPICS_PER_PAGE'			=> $forum_data['forum_topics_per_page'],					'FORUM_RULES_LINK'			=> $forum_data['forum_rules_link'],					'FORUM_RULES'				=> $forum_data['forum_rules'],					'FORUM_RULES_PREVIEW'		=> $forum_rules_preview,					'FORUM_RULES_PLAIN'			=> $forum_rules_data['text'],					'S_BBCODE_CHECKED'			=> ($forum_rules_data['allow_bbcode']) ? true : false,					'S_SMILIES_CHECKED'			=> ($forum_rules_data['allow_smilies']) ? true : false,					'S_URLS_CHECKED'			=> ($forum_rules_data['allow_urls']) ? true : false,					'S_FORUM_PASSWORD_SET'		=> (empty($forum_data['forum_password'])) ? false : true,					'FORUM_DESC'				=> $forum_desc_data['text'],					'S_DESC_BBCODE_CHECKED'		=> ($forum_desc_data['allow_bbcode']) ? true : false,					'S_DESC_SMILIES_CHECKED'	=> ($forum_desc_data['allow_smilies']) ? true : false,					'S_DESC_URLS_CHECKED'		=> ($forum_desc_data['allow_urls']) ? true : false,					'S_FORUM_TYPE_OPTIONS'		=> $forum_type_options,					'S_STATUS_OPTIONS'			=> $statuslist,					'S_PARENT_OPTIONS'			=> $parents_list,					'S_STYLES_OPTIONS'			=> $styles_list,					'S_FORUM_OPTIONS'			=> make_forum_select(($action == 'add') ? $forum_data['parent_id'] : false, ($action == 'edit') ? $forum_data['forum_id'] : false, false, false, false),					'S_SHOW_DISPLAY_ON_INDEX'	=> $s_show_display_on_index,					'S_FORUM_POST'				=> ($forum_data['forum_type'] == FORUM_POST) ? true : false,					'S_FORUM_ORIG_POST'			=> (isset($old_forum_type) && $old_forum_type == FORUM_POST) ? true : false,					'S_FORUM_ORIG_CAT'			=> (isset($old_forum_type) && $old_forum_type == FORUM_CAT) ? true : false,					'S_FORUM_ORIG_LINK'			=> (isset($old_forum_type) && $old_forum_type == FORUM_LINK) ? true : false,					'S_FORUM_LINK'				=> ($forum_data['forum_type'] == FORUM_LINK) ? true : false,					'S_FORUM_CAT'				=> ($forum_data['forum_type'] == FORUM_CAT) ? true : false,					'S_ENABLE_INDEXING'			=> ($forum_data['enable_indexing']) ? true : false,					'S_TOPIC_ICONS'				=> ($forum_data['enable_icons']) ? true : false,					'S_DISPLAY_SUBFORUM_LIST'	=> ($forum_data['display_subforum_list']) ? true : false,					'S_DISPLAY_ON_INDEX'		=> ($forum_data['display_on_index']) ? true : false,					'S_PRUNE_ENABLE'			=> ($forum_data['enable_prune']) ? true : false,					'S_FORUM_LINK_TRACK'		=> ($forum_data['forum_flags'] & FORUM_FLAG_LINK_TRACK) ? true : false,					'S_PRUNE_OLD_POLLS'			=> ($forum_data['forum_flags'] & FORUM_FLAG_PRUNE_POLL) ? true : false,					'S_PRUNE_ANNOUNCE'			=> ($forum_data['forum_flags'] & FORUM_FLAG_PRUNE_ANNOUNCE) ? true : false,					'S_PRUNE_STICKY'			=> ($forum_data['forum_flags'] & FORUM_FLAG_PRUNE_STICKY) ? true : false,					'S_DISPLAY_ACTIVE_TOPICS'	=> ($forum_data['forum_type'] == FORUM_POST) ? ($forum_data['forum_flags'] & FORUM_FLAG_ACTIVE_TOPICS) : true,					'S_ENABLE_ACTIVE_TOPICS'	=> ($forum_data['forum_type'] == FORUM_CAT) ? ($forum_data['forum_flags'] & FORUM_FLAG_ACTIVE_TOPICS) : false,					'S_ENABLE_POST_REVIEW'		=> ($forum_data['forum_flags'] & FORUM_FLAG_POST_REVIEW) ? true : false,					'S_ENABLE_QUICK_REPLY'		=> ($forum_data['forum_flags'] & FORUM_FLAG_QUICK_REPLY) ? true : false,					'S_CAN_COPY_PERMISSIONS'	=> ($action != 'edit' || empty($forum_id) || ($auth->acl_get('a_fauth') && $auth->acl_get('a_authusers') && $auth->acl_get('a_authgroups') && $auth->acl_get('a_mauth'))) ? true : false,				));				return;			break;			case 'delete':				if (!$forum_id)				{					trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				$forum_data = $this->get_forum_info($forum_id);				$subforums_id = array();				$subforums = get_forum_branch($forum_id, 'children');				foreach ($subforums as $row)				{					$subforums_id[] = $row['forum_id'];				}				$forums_list = make_forum_select($forum_data['parent_id'], $subforums_id);				$sql = 'SELECT forum_id					FROM ' . FORUMS_TABLE . '					WHERE forum_type = ' . FORUM_POST . "						AND forum_id <> $forum_id";				$result = $db->sql_query_limit($sql, 1);				if ($db->sql_fetchrow($result))				{					$template->assign_vars(array(						'S_MOVE_FORUM_OPTIONS'		=> make_forum_select($forum_data['parent_id'], $subforums_id, false, true)) // , false, true, false???					);				}				$db->sql_freeresult($result);				$parent_id = ($this->parent_id == $forum_id) ? 0 : $this->parent_id;				$template->assign_vars(array(					'S_DELETE_FORUM'		=> true,					'U_ACTION'				=> $this->u_action . "&amp;parent_id={$parent_id}&amp;action=delete&amp;f=$forum_id",					'U_BACK'				=> $this->u_action . '&amp;parent_id=' . $this->parent_id,					'FORUM_NAME'			=> $forum_data['forum_name'],					'S_FORUM_POST'			=> ($forum_data['forum_type'] == FORUM_POST) ? true : false,					'S_FORUM_LINK'			=> ($forum_data['forum_type'] == FORUM_LINK) ? true : false,					'S_HAS_SUBFORUMS'		=> ($forum_data['right_id'] - $forum_data['left_id'] > 1) ? true : false,					'S_FORUMS_LIST'			=> $forums_list,					'S_ERROR'				=> (sizeof($errors)) ? true : false,					'ERROR_MSG'				=> (sizeof($errors)) ? implode('<br />', $errors) : '')				);				return;			break;			case 'copy_perm':				$forum_perm_from = request_var('forum_perm_from', 0);				// Copy permissions?				if (!empty($forum_perm_from) && $forum_perm_from != $forum_id)				{					copy_forum_permissions($forum_perm_from, $forum_id, true);					cache_moderators();					$auth->acl_clear_prefetch();					$cache->destroy('sql', FORUMS_TABLE);					$acl_url = '&amp;mode=setting_forum_local&amp;forum_id[]=' . $forum_id;					$message = $user->lang['FORUM_UPDATED'];					// Redirect to permissions					if ($auth->acl_get('a_fauth'))					{						$message .= '<br /><br />' . sprintf($user->lang['REDIRECT_ACL'], '<a href="' . append_sid("{$phpbb_admin_path}index.$phpEx", 'i=permissions' . $acl_url) . '">', '</a>');					}					trigger_error($message . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id));				}			break;		}		// Default management page		if (!$this->parent_id)		{			$navigation = $user->lang['FORUM_INDEX'];		}		else		{			$navigation = '<a href="' . $this->u_action . '">' . $user->lang['FORUM_INDEX'] . '</a>';			$forums_nav = get_forum_branch($this->parent_id, 'parents', 'descending');			foreach ($forums_nav as $row)			{				if ($row['forum_id'] == $this->parent_id)				{					$navigation .= ' -&gt; ' . $row['forum_name'];				}				else				{					$navigation .= ' -&gt; <a href="' . $this->u_action . '&amp;parent_id=' . $row['forum_id'] . '">' . $row['forum_name'] . '</a>';				}			}		}		// Jumpbox		$forum_box = make_forum_select($this->parent_id, false, false, false, false); //make_forum_select($this->parent_id);		if ($action == 'sync' || $action == 'sync_forum')		{			$template->assign_var('S_RESYNCED', true);		}		$sql = 'SELECT *			FROM ' . FORUMS_TABLE . "			WHERE parent_id = $this->parent_id			ORDER BY left_id";		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			do			{				$forum_type = $row['forum_type'];				if ($row['forum_status'] == ITEM_LOCKED)				{					$folder_image = '<img src="images/icon_folder_lock.gif" alt="' . $user->lang['LOCKED'] . '" />';				}				else				{					switch ($forum_type)					{						case FORUM_LINK:							$folder_image = '<img src="images/icon_folder_link.gif" alt="' . $user->lang['LINK'] . '" />';						break;						default:							$folder_image = ($row['left_id'] + 1 != $row['right_id']) ? '<img src="images/icon_subfolder.gif" alt="' . $user->lang['SUBFORUM'] . '" />' : '<img src="images/icon_folder.gif" alt="' . $user->lang['FOLDER'] . '" />';						break;					}				}				$url = $this->u_action . "&amp;parent_id=$this->parent_id&amp;f={$row['forum_id']}";				$template->assign_block_vars('forums', array(					'FOLDER_IMAGE'		=> $folder_image,					'FORUM_IMAGE'		=> ($row['forum_image']) ? '<img src="' . $phpbb_root_path . $row['forum_image'] . '" alt="" />' : '',					'FORUM_IMAGE_SRC'	=> ($row['forum_image']) ? $phpbb_root_path . $row['forum_image'] : '',					'FORUM_NAME'		=> $row['forum_name'],					'FORUM_DESCRIPTION'	=> generate_text_for_display($row['forum_desc'], $row['forum_desc_uid'], $row['forum_desc_bitfield'], $row['forum_desc_options']),					'FORUM_TOPICS'		=> $row['forum_topics'],					'FORUM_POSTS'		=> $row['forum_posts'],					'S_FORUM_LINK'		=> ($forum_type == FORUM_LINK) ? true : false,					'S_FORUM_POST'		=> ($forum_type == FORUM_POST) ? true : false,					'U_FORUM'			=> $this->u_action . '&amp;parent_id=' . $row['forum_id'],					'U_MOVE_UP'			=> $url . '&amp;action=move_up',					'U_MOVE_DOWN'		=> $url . '&amp;action=move_down',					'U_EDIT'			=> $url . '&amp;action=edit',					'U_DELETE'			=> $url . '&amp;action=delete',					'U_SYNC'			=> $url . '&amp;action=sync')				);			}			while ($row = $db->sql_fetchrow($result));		}		else if ($this->parent_id)		{			$row = $this->get_forum_info($this->parent_id);			$url = $this->u_action . '&amp;parent_id=' . $this->parent_id . '&amp;f=' . $row['forum_id'];			$template->assign_vars(array(				'S_NO_FORUMS'		=> true,				'U_EDIT'			=> $url . '&amp;action=edit',				'U_DELETE'			=> $url . '&amp;action=delete',				'U_SYNC'			=> $url . '&amp;action=sync')			);		}		$db->sql_freeresult($result);		$template->assign_vars(array(			'ERROR_MSG'		=> (sizeof($errors)) ? implode('<br />', $errors) : '',			'NAVIGATION'	=> $navigation,			'FORUM_BOX'		=> $forum_box,			'U_SEL_ACTION'	=> $this->u_action,			'U_ACTION'		=> $this->u_action . '&amp;parent_id=' . $this->parent_id,			'U_PROGRESS_BAR'	=> $this->u_action . '&amp;action=progress_bar',			'UA_PROGRESS_BAR'	=> addslashes($this->u_action . '&amp;action=progress_bar'),		));	}	/**	* Get forum details	*/	function get_forum_info($forum_id)	{		global $db;		$sql = 'SELECT *			FROM ' . FORUMS_TABLE . "			WHERE forum_id = $forum_id";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$row)		{			trigger_error("Forum #$forum_id does not exist", E_USER_ERROR);		}		return $row;	}	/**	* Update forum data	*/	function update_forum_data(&$forum_data)	{		global $db, $user, $cache, $phpbb_root_path;		$errors = array();		if ($forum_data['forum_name'] == '')		{			$errors[] = $user->lang['FORUM_NAME_EMPTY'];		}		if (utf8_strlen($forum_data['forum_desc']) > 4000)		{			$errors[] = $user->lang['FORUM_DESC_TOO_LONG'];		}		if (utf8_strlen($forum_data['forum_rules']) > 4000)		{			$errors[] = $user->lang['FORUM_RULES_TOO_LONG'];		}		if ($forum_data['forum_password'] || $forum_data['forum_password_confirm'])		{			if ($forum_data['forum_password'] != $forum_data['forum_password_confirm'])			{				$forum_data['forum_password'] = $forum_data['forum_password_confirm'] = '';				$errors[] = $user->lang['FORUM_PASSWORD_MISMATCH'];			}		}		if ($forum_data['prune_days'] < 0 || $forum_data['prune_viewed'] < 0 || $forum_data['prune_freq'] < 0)		{			$forum_data['prune_days'] = $forum_data['prune_viewed'] = $forum_data['prune_freq'] = 0;			$errors[] = $user->lang['FORUM_DATA_NEGATIVE'];		}		$range_test_ary = array(			array('lang' => 'FORUM_TOPICS_PAGE', 'value' => $forum_data['forum_topics_per_page'], 'column_type' => 'TINT:0'),		);		if (!empty($forum_data['forum_image']) && !file_exists($phpbb_root_path . $forum_data['forum_image']))		{			$errors[] = $user->lang['FORUM_IMAGE_NO_EXIST'];		}		validate_range($range_test_ary, $errors);		// Set forum flags		// 1 = link tracking		// 2 = prune old polls		// 4 = prune announcements		// 8 = prune stickies		// 16 = show active topics		// 32 = enable post review		$forum_data['forum_flags'] = 0;		$forum_data['forum_flags'] += ($forum_data['forum_link_track']) ? FORUM_FLAG_LINK_TRACK : 0;		$forum_data['forum_flags'] += ($forum_data['prune_old_polls']) ? FORUM_FLAG_PRUNE_POLL : 0;		$forum_data['forum_flags'] += ($forum_data['prune_announce']) ? FORUM_FLAG_PRUNE_ANNOUNCE : 0;		$forum_data['forum_flags'] += ($forum_data['prune_sticky']) ? FORUM_FLAG_PRUNE_STICKY : 0;		$forum_data['forum_flags'] += ($forum_data['show_active']) ? FORUM_FLAG_ACTIVE_TOPICS : 0;		$forum_data['forum_flags'] += ($forum_data['enable_post_review']) ? FORUM_FLAG_POST_REVIEW : 0;		$forum_data['forum_flags'] += ($forum_data['enable_quick_reply']) ? FORUM_FLAG_QUICK_REPLY : 0;		// Unset data that are not database fields		$forum_data_sql = $forum_data;		unset($forum_data_sql['forum_link_track']);		unset($forum_data_sql['prune_old_polls']);		unset($forum_data_sql['prune_announce']);		unset($forum_data_sql['prune_sticky']);		unset($forum_data_sql['show_active']);		unset($forum_data_sql['enable_post_review']);		unset($forum_data_sql['enable_quick_reply']);		unset($forum_data_sql['forum_password_confirm']);		// What are we going to do tonight Brain? The same thing we do everynight,		// try to take over the world ... or decide whether to continue update		// and if so, whether it's a new forum/cat/link or an existing one		if (sizeof($errors))		{			return $errors;		}		// As we don't know the old password, it's kinda tricky to detect changes		if ($forum_data_sql['forum_password_unset'])		{			$forum_data_sql['forum_password'] = '';		}		else if (empty($forum_data_sql['forum_password']))		{			unset($forum_data_sql['forum_password']);		}		else		{			$forum_data_sql['forum_password'] = phpbb_hash($forum_data_sql['forum_password']);		}		unset($forum_data_sql['forum_password_unset']);		if (!isset($forum_data_sql['forum_id']))		{			// no forum_id means we're creating a new forum			unset($forum_data_sql['type_action']);			if ($forum_data_sql['parent_id'])			{				$sql = 'SELECT left_id, right_id, forum_type					FROM ' . FORUMS_TABLE . '					WHERE forum_id = ' . $forum_data_sql['parent_id'];				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['PARENT_NOT_EXIST'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				if ($row['forum_type'] == FORUM_LINK)				{					$errors[] = $user->lang['PARENT_IS_LINK_FORUM'];					return $errors;				}				$sql = 'UPDATE ' . FORUMS_TABLE . '					SET left_id = left_id + 2, right_id = right_id + 2					WHERE left_id > ' . $row['right_id'];				$db->sql_query($sql);				$sql = 'UPDATE ' . FORUMS_TABLE . '					SET right_id = right_id + 2					WHERE ' . $row['left_id'] . ' BETWEEN left_id AND right_id';				$db->sql_query($sql);				$forum_data_sql['left_id'] = $row['right_id'];				$forum_data_sql['right_id'] = $row['right_id'] + 1;			}			else			{				$sql = 'SELECT MAX(right_id) AS right_id					FROM ' . FORUMS_TABLE;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$forum_data_sql['left_id'] = $row['right_id'] + 1;				$forum_data_sql['right_id'] = $row['right_id'] + 2;			}			$sql = 'INSERT INTO ' . FORUMS_TABLE . ' ' . $db->sql_build_array('INSERT', $forum_data_sql);			$db->sql_query($sql);			$forum_data['forum_id'] = $db->sql_nextid();			add_log('admin', 'LOG_FORUM_ADD', $forum_data['forum_name']);		}		else		{			$row = $this->get_forum_info($forum_data_sql['forum_id']);			if ($row['forum_type'] == FORUM_POST && $row['forum_type'] != $forum_data_sql['forum_type'])			{				// Has subforums and want to change into a link?				if ($row['right_id'] - $row['left_id'] > 1 && $forum_data_sql['forum_type'] == FORUM_LINK)				{					$errors[] = $user->lang['FORUM_WITH_SUBFORUMS_NOT_TO_LINK'];					return $errors;				}				// we're turning a postable forum into a non-postable forum				if ($forum_data_sql['type_action'] == 'move')				{					$to_forum_id = request_var('to_forum_id', 0);					if ($to_forum_id)					{						$errors = $this->move_forum_content($forum_data_sql['forum_id'], $to_forum_id);					}					else					{						return array($user->lang['NO_DESTINATION_FORUM']);					}				}				else if ($forum_data_sql['type_action'] == 'delete')				{					$errors = $this->delete_forum_content($forum_data_sql['forum_id']);				}				else				{					return array($user->lang['NO_FORUM_ACTION']);				}				$forum_data_sql['forum_posts'] = $forum_data_sql['forum_topics'] = $forum_data_sql['forum_topics_real'] = $forum_data_sql['forum_last_post_id'] = $forum_data_sql['forum_last_poster_id'] = $forum_data_sql['forum_last_post_time'] = 0;				$forum_data_sql['forum_last_poster_name'] = $forum_data_sql['forum_last_poster_colour'] = '';			}			else if ($row['forum_type'] == FORUM_CAT && $forum_data_sql['forum_type'] == FORUM_LINK)			{				// Has subforums?				if ($row['right_id'] - $row['left_id'] > 1)				{					// We are turning a category into a link - but need to decide what to do with the subforums.					$action_subforums = request_var('action_subforums', '');					$subforums_to_id = request_var('subforums_to_id', 0);					if ($action_subforums == 'delete')					{						$rows = get_forum_branch($row['forum_id'], 'children', 'descending', false);						foreach ($rows as $_row)						{							// Do not remove the forum id we are about to change. ;)							if ($_row['forum_id'] == $row['forum_id'])							{								continue;							}							$forum_ids[] = $_row['forum_id'];							$errors = array_merge($errors, $this->delete_forum_content($_row['forum_id']));						}						if (sizeof($errors))						{							return $errors;						}						if (sizeof($forum_ids))						{							$sql = 'DELETE FROM ' . FORUMS_TABLE . '								WHERE ' . $db->sql_in_set('forum_id', $forum_ids);							$db->sql_query($sql);							$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . '								WHERE ' . $db->sql_in_set('forum_id', $forum_ids);							$db->sql_query($sql);							$sql = 'DELETE FROM ' . ACL_USERS_TABLE . '								WHERE ' . $db->sql_in_set('forum_id', $forum_ids);							$db->sql_query($sql);							// Delete forum ids from extension groups table							$sql = 'SELECT group_id, allowed_forums								FROM ' . EXTENSION_GROUPS_TABLE;							$result = $db->sql_query($sql);							while ($_row = $db->sql_fetchrow($result))							{								if (!$_row['allowed_forums'])								{									continue;								}								$allowed_forums = unserialize(trim($_row['allowed_forums']));								$allowed_forums = array_diff($allowed_forums, $forum_ids);								$sql = 'UPDATE ' . EXTENSION_GROUPS_TABLE . "									SET allowed_forums = '" . ((sizeof($allowed_forums)) ? serialize($allowed_forums) : '') . "'									WHERE group_id = {$_row['group_id']}";								$db->sql_query($sql);							}							$db->sql_freeresult($result);							$cache->destroy('_extensions');						}					}					else if ($action_subforums == 'move')					{						if (!$subforums_to_id)						{							return array($user->lang['NO_DESTINATION_FORUM']);						}						$sql = 'SELECT forum_name							FROM ' . FORUMS_TABLE . '							WHERE forum_id = ' . $subforums_to_id;						$result = $db->sql_query($sql);						$_row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$_row)						{							return array($user->lang['NO_FORUM']);						}						$subforums_to_name = $_row['forum_name'];						$sql = 'SELECT forum_id							FROM ' . FORUMS_TABLE . "							WHERE parent_id = {$row['forum_id']}";						$result = $db->sql_query($sql);						while ($_row = $db->sql_fetchrow($result))						{							$this->move_forum($_row['forum_id'], $subforums_to_id);						}						$db->sql_freeresult($result);						$sql = 'UPDATE ' . FORUMS_TABLE . "							SET parent_id = $subforums_to_id							WHERE parent_id = {$row['forum_id']}";						$db->sql_query($sql);					}					// Adjust the left/right id					$sql = 'UPDATE ' . FORUMS_TABLE . '						SET right_id = left_id + 1						WHERE forum_id = ' . $row['forum_id'];					$db->sql_query($sql);				}			}			else if ($row['forum_type'] == FORUM_CAT && $forum_data_sql['forum_type'] == FORUM_POST)			{				// Changing a category to a forum? Reset the data (you can't post directly in a cat, you must use a forum)				$forum_data_sql['forum_posts'] = 0;				$forum_data_sql['forum_topics'] = 0;				$forum_data_sql['forum_topics_real'] = 0;				$forum_data_sql['forum_last_post_id'] = 0;				$forum_data_sql['forum_last_post_subject'] = '';				$forum_data_sql['forum_last_post_time'] = 0;				$forum_data_sql['forum_last_poster_id'] = 0;				$forum_data_sql['forum_last_poster_name'] = '';				$forum_data_sql['forum_last_poster_colour'] = '';			}			if (sizeof($errors))			{				return $errors;			}			if ($row['parent_id'] != $forum_data_sql['parent_id'])			{				if ($row['forum_id'] != $forum_data_sql['parent_id'])				{					$errors = $this->move_forum($forum_data_sql['forum_id'], $forum_data_sql['parent_id']);				}				else				{					$forum_data_sql['parent_id'] = $row['parent_id'];				}			}			if (sizeof($errors))			{				return $errors;			}			unset($forum_data_sql['type_action']);			if ($row['forum_name'] != $forum_data_sql['forum_name'])			{				// the forum name has changed, clear the parents list of all forums (for safety)				$sql = 'UPDATE ' . FORUMS_TABLE . "					SET forum_parents = ''";				$db->sql_query($sql);			}			// Setting the forum id to the forum id is not really received well by some dbs. ;)			$forum_id = $forum_data_sql['forum_id'];			unset($forum_data_sql['forum_id']);			$sql = 'UPDATE ' . FORUMS_TABLE . '				SET ' . $db->sql_build_array('UPDATE', $forum_data_sql) . '				WHERE forum_id = ' . $forum_id;			$db->sql_query($sql);			// Add it back			$forum_data['forum_id'] = $forum_id;			add_log('admin', 'LOG_FORUM_EDIT', $forum_data['forum_name']);		}		return $errors;	}	/**	* Move forum	*/	function move_forum($from_id, $to_id)	{		global $db, $user;		$to_data = $moved_ids = $errors = array();		// Check if we want to move to a parent with link type		if ($to_id > 0)		{			$to_data = $this->get_forum_info($to_id);			if ($to_data['forum_type'] == FORUM_LINK)			{				$errors[] = $user->lang['PARENT_IS_LINK_FORUM'];				return $errors;			}		}		$moved_forums = get_forum_branch($from_id, 'children', 'descending');		$from_data = $moved_forums[0];		$diff = sizeof($moved_forums) * 2;		$moved_ids = array();		for ($i = 0; $i < sizeof($moved_forums); ++$i)		{			$moved_ids[] = $moved_forums[$i]['forum_id'];		}		// Resync parents		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET right_id = right_id - $diff, forum_parents = ''			WHERE left_id < " . $from_data['right_id'] . "				AND right_id > " . $from_data['right_id'];		$db->sql_query($sql);		// Resync righthand side of tree		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET left_id = left_id - $diff, right_id = right_id - $diff, forum_parents = ''			WHERE left_id > " . $from_data['right_id'];		$db->sql_query($sql);		if ($to_id > 0)		{			// Retrieve $to_data again, it may have been changed...			$to_data = $this->get_forum_info($to_id);			// Resync new parents			$sql = 'UPDATE ' . FORUMS_TABLE . "				SET right_id = right_id + $diff, forum_parents = ''				WHERE " . $to_data['right_id'] . ' BETWEEN left_id AND right_id					AND ' . $db->sql_in_set('forum_id', $moved_ids, true);			$db->sql_query($sql);			// Resync the righthand side of the tree			$sql = 'UPDATE ' . FORUMS_TABLE . "				SET left_id = left_id + $diff, right_id = right_id + $diff, forum_parents = ''				WHERE left_id > " . $to_data['right_id'] . '					AND ' . $db->sql_in_set('forum_id', $moved_ids, true);			$db->sql_query($sql);			// Resync moved branch			$to_data['right_id'] += $diff;			if ($to_data['right_id'] > $from_data['right_id'])			{				$diff = '+ ' . ($to_data['right_id'] - $from_data['right_id'] - 1);			}			else			{				$diff = '- ' . abs($to_data['right_id'] - $from_data['right_id'] - 1);			}		}		else		{			$sql = 'SELECT MAX(right_id) AS right_id				FROM ' . FORUMS_TABLE . '				WHERE ' . $db->sql_in_set('forum_id', $moved_ids, true);			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			$diff = '+ ' . ($row['right_id'] - $from_data['left_id'] + 1);		}		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET left_id = left_id $diff, right_id = right_id $diff, forum_parents = ''			WHERE " . $db->sql_in_set('forum_id', $moved_ids);		$db->sql_query($sql);		return $errors;	}	/**	* Move forum content from one to another forum	*/	function move_forum_content($from_id, $to_id, $sync = true)	{		global $db;		$table_ary = array(LOG_TABLE, POSTS_TABLE, TOPICS_TABLE, DRAFTS_TABLE, TOPICS_TRACK_TABLE);		foreach ($table_ary as $table)		{			$sql = "UPDATE $table				SET forum_id = $to_id				WHERE forum_id = $from_id";			$db->sql_query($sql);		}		unset($table_ary);		$table_ary = array(FORUMS_ACCESS_TABLE, FORUMS_TRACK_TABLE, FORUMS_WATCH_TABLE, MODERATOR_CACHE_TABLE);		foreach ($table_ary as $table)		{			$sql = "DELETE FROM $table				WHERE forum_id = $from_id";			$db->sql_query($sql);		}		if ($sync)		{			// Delete ghost topics that link back to the same forum then resync counters			sync('topic_moved');			sync('forum', 'forum_id', $to_id, false, true);		}		return array();	}	/**	* Remove complete forum	*/	function delete_forum($forum_id, $action_posts = 'delete', $action_subforums = 'delete', $posts_to_id = 0, $subforums_to_id = 0)	{		global $db, $user, $cache;		$forum_data = $this->get_forum_info($forum_id);		$errors = array();		$log_action_posts = $log_action_forums = $posts_to_name = $subforums_to_name = '';		$forum_ids = array($forum_id);		if ($action_posts == 'delete')		{			$log_action_posts = 'POSTS';			$errors = array_merge($errors, $this->delete_forum_content($forum_id));		}		else if ($action_posts == 'move')		{			if (!$posts_to_id)			{				$errors[] = $user->lang['NO_DESTINATION_FORUM'];			}			else			{				$log_action_posts = 'MOVE_POSTS';				$sql = 'SELECT forum_name					FROM ' . FORUMS_TABLE . '					WHERE forum_id = ' . $posts_to_id;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					$errors[] = $user->lang['NO_FORUM'];				}				else				{					$posts_to_name = $row['forum_name'];					$errors = array_merge($errors, $this->move_forum_content($forum_id, $posts_to_id));				}			}		}		if (sizeof($errors))		{			return $errors;		}		if ($action_subforums == 'delete')		{			$log_action_forums = 'FORUMS';			$rows = get_forum_branch($forum_id, 'children', 'descending', false);			foreach ($rows as $row)			{				$forum_ids[] = $row['forum_id'];				$errors = array_merge($errors, $this->delete_forum_content($row['forum_id']));			}			if (sizeof($errors))			{				return $errors;			}			$diff = sizeof($forum_ids) * 2;			$sql = 'DELETE FROM ' . FORUMS_TABLE . '				WHERE ' . $db->sql_in_set('forum_id', $forum_ids);			$db->sql_query($sql);			$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . '				WHERE ' . $db->sql_in_set('forum_id', $forum_ids);			$db->sql_query($sql);			$sql = 'DELETE FROM ' . ACL_USERS_TABLE . '				WHERE ' . $db->sql_in_set('forum_id', $forum_ids);			$db->sql_query($sql);		}		else if ($action_subforums == 'move')		{			if (!$subforums_to_id)			{				$errors[] = $user->lang['NO_DESTINATION_FORUM'];			}			else			{				$log_action_forums = 'MOVE_FORUMS';				$sql = 'SELECT forum_name					FROM ' . FORUMS_TABLE . '					WHERE forum_id = ' . $subforums_to_id;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					$errors[] = $user->lang['NO_FORUM'];				}				else				{					$subforums_to_name = $row['forum_name'];					$sql = 'SELECT forum_id						FROM ' . FORUMS_TABLE . "						WHERE parent_id = $forum_id";					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$this->move_forum($row['forum_id'], $subforums_to_id);					}					$db->sql_freeresult($result);					// Grab new forum data for correct tree updating later					$forum_data = $this->get_forum_info($forum_id);					$sql = 'UPDATE ' . FORUMS_TABLE . "						SET parent_id = $subforums_to_id						WHERE parent_id = $forum_id";					$db->sql_query($sql);					$diff = 2;					$sql = 'DELETE FROM ' . FORUMS_TABLE . "						WHERE forum_id = $forum_id";					$db->sql_query($sql);					$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . "						WHERE forum_id = $forum_id";					$db->sql_query($sql);					$sql = 'DELETE FROM ' . ACL_USERS_TABLE . "						WHERE forum_id = $forum_id";					$db->sql_query($sql);				}			}			if (sizeof($errors))			{				return $errors;			}		}		else		{			$diff = 2;			$sql = 'DELETE FROM ' . FORUMS_TABLE . "				WHERE forum_id = $forum_id";			$db->sql_query($sql);			$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . "				WHERE forum_id = $forum_id";			$db->sql_query($sql);			$sql = 'DELETE FROM ' . ACL_USERS_TABLE . "				WHERE forum_id = $forum_id";			$db->sql_query($sql);		}		// Resync tree		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET right_id = right_id - $diff			WHERE left_id < {$forum_data['right_id']} AND right_id > {$forum_data['right_id']}";		$db->sql_query($sql);		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET left_id = left_id - $diff, right_id = right_id - $diff			WHERE left_id > {$forum_data['right_id']}";		$db->sql_query($sql);		// Delete forum ids from extension groups table		$sql = 'SELECT group_id, allowed_forums			FROM ' . EXTENSION_GROUPS_TABLE;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if (!$row['allowed_forums'])			{				continue;			}			$allowed_forums = unserialize(trim($row['allowed_forums']));			$allowed_forums = array_diff($allowed_forums, $forum_ids);			$sql = 'UPDATE ' . EXTENSION_GROUPS_TABLE . "				SET allowed_forums = '" . ((sizeof($allowed_forums)) ? serialize($allowed_forums) : '') . "'				WHERE group_id = {$row['group_id']}";			$db->sql_query($sql);		}		$db->sql_freeresult($result);		$cache->destroy('_extensions');		$log_action = implode('_', array($log_action_posts, $log_action_forums));		switch ($log_action)		{			case 'MOVE_POSTS_MOVE_FORUMS':				add_log('admin', 'LOG_FORUM_DEL_MOVE_POSTS_MOVE_FORUMS', $posts_to_name, $subforums_to_name, $forum_data['forum_name']);			break;			case 'MOVE_POSTS_FORUMS':				add_log('admin', 'LOG_FORUM_DEL_MOVE_POSTS_FORUMS', $posts_to_name, $forum_data['forum_name']);			break;			case 'POSTS_MOVE_FORUMS':				add_log('admin', 'LOG_FORUM_DEL_POSTS_MOVE_FORUMS', $subforums_to_name, $forum_data['forum_name']);			break;			case '_MOVE_FORUMS':				add_log('admin', 'LOG_FORUM_DEL_MOVE_FORUMS', $subforums_to_name, $forum_data['forum_name']);			break;			case 'MOVE_POSTS_':				add_log('admin', 'LOG_FORUM_DEL_MOVE_POSTS', $posts_to_name, $forum_data['forum_name']);			break;			case 'POSTS_FORUMS':				add_log('admin', 'LOG_FORUM_DEL_POSTS_FORUMS', $forum_data['forum_name']);			break;			case '_FORUMS':				add_log('admin', 'LOG_FORUM_DEL_FORUMS', $forum_data['forum_name']);			break;			case 'POSTS_':				add_log('admin', 'LOG_FORUM_DEL_POSTS', $forum_data['forum_name']);			break;			default:				add_log('admin', 'LOG_FORUM_DEL_FORUM', $forum_data['forum_name']);			break;		}		return $errors;	}	/**	* Delete forum content	*/	function delete_forum_content($forum_id)	{		global $db, $config, $phpbb_root_path, $phpEx;		include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);		$db->sql_transaction('begin');		// Select then delete all attachments		$sql = 'SELECT a.topic_id			FROM ' . POSTS_TABLE . ' p, ' . ATTACHMENTS_TABLE . " a			WHERE p.forum_id = $forum_id				AND a.in_message = 0				AND a.topic_id = p.topic_id";		$result = $db->sql_query($sql);		$topic_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$topic_ids[] = $row['topic_id'];		}		$db->sql_freeresult($result);		delete_attachments('topic', $topic_ids, false);		// Delete shadow topics pointing to topics in this forum		delete_topic_shadows($forum_id);		// Before we remove anything we make sure we are able to adjust the post counts later. ;)		$sql = 'SELECT poster_id			FROM ' . POSTS_TABLE . '			WHERE forum_id = ' . $forum_id . '				AND post_postcount = 1				AND post_approved = 1';		$result = $db->sql_query($sql);		$post_counts = array();		while ($row = $db->sql_fetchrow($result))		{			$post_counts[$row['poster_id']] = (!empty($post_counts[$row['poster_id']])) ? $post_counts[$row['poster_id']] + 1 : 1;		}		$db->sql_freeresult($result);		switch ($db->sql_layer)		{			case 'mysql4':			case 'mysqli':				// Delete everything else and thank MySQL for offering multi-table deletion				$tables_ary = array(					SEARCH_WORDMATCH_TABLE	=> 'post_id',					REPORTS_TABLE			=> 'post_id',					WARNINGS_TABLE			=> 'post_id',					BOOKMARKS_TABLE			=> 'topic_id',					TOPICS_WATCH_TABLE		=> 'topic_id',					TOPICS_POSTED_TABLE		=> 'topic_id',					POLL_OPTIONS_TABLE		=> 'topic_id',					POLL_VOTES_TABLE		=> 'topic_id',				);				$sql = 'DELETE ' . POSTS_TABLE;				$sql_using = "\nFROM " . POSTS_TABLE;				$sql_where = "\nWHERE " . POSTS_TABLE . ".forum_id = $forum_id\n";				foreach ($tables_ary as $table => $field)				{					$sql .= ", $table ";					$sql_using .= ", $table ";					$sql_where .= "\nAND $table.$field = " . POSTS_TABLE . ".$field";				}				$db->sql_query($sql . $sql_using . $sql_where);			break;			default:				// Delete everything else and curse your DB for not offering multi-table deletion				$tables_ary = array(					'post_id'	=>	array(						SEARCH_WORDMATCH_TABLE,						REPORTS_TABLE,						WARNINGS_TABLE,					),					'topic_id'	=>	array(						BOOKMARKS_TABLE,						TOPICS_WATCH_TABLE,						TOPICS_POSTED_TABLE,						POLL_OPTIONS_TABLE,						POLL_VOTES_TABLE,					)				);				// Amount of rows we select and delete in one iteration.				$batch_size = 500;				foreach ($tables_ary as $field => $tables)				{					$start = 0;					do					{						$sql = "SELECT $field							FROM " . POSTS_TABLE . '							WHERE forum_id = ' . $forum_id;						$result = $db->sql_query_limit($sql, $batch_size, $start);						$ids = array();						while ($row = $db->sql_fetchrow($result))						{							$ids[] = $row[$field];						}						$db->sql_freeresult($result);						if (sizeof($ids))						{							$start += sizeof($ids);							foreach ($tables as $table)							{								$db->sql_query("DELETE FROM $table WHERE " . $db->sql_in_set($field, $ids));							}						}					}					while (sizeof($ids) == $batch_size);				}				unset($ids);			break;		}		$table_ary = array(FORUMS_ACCESS_TABLE, FORUMS_TRACK_TABLE, FORUMS_WATCH_TABLE, LOG_TABLE, MODERATOR_CACHE_TABLE, POSTS_TABLE, TOPICS_TABLE, TOPICS_TRACK_TABLE);		foreach ($table_ary as $table)		{			$db->sql_query("DELETE FROM $table WHERE forum_id = $forum_id");		}		// Set forum ids to 0		$table_ary = array(DRAFTS_TABLE);		foreach ($table_ary as $table)		{			$db->sql_query("UPDATE $table SET forum_id = 0 WHERE forum_id = $forum_id");		}		// Adjust users post counts		if (sizeof($post_counts))		{			foreach ($post_counts as $poster_id => $substract)			{				$sql = 'UPDATE ' . USERS_TABLE . '					SET user_posts = 0					WHERE user_id = ' . $poster_id . '					AND user_posts < ' . $substract;				$db->sql_query($sql);				$sql = 'UPDATE ' . USERS_TABLE . '					SET user_posts = user_posts - ' . $substract . '					WHERE user_id = ' . $poster_id . '					AND user_posts >= ' . $substract;				$db->sql_query($sql);			}		}		$db->sql_transaction('commit');		// Make sure the overall post/topic count is correct...		$sql = 'SELECT COUNT(post_id) AS stat			FROM ' . POSTS_TABLE . '			WHERE post_approved = 1';		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		set_config('num_posts', (int) $row['stat'], true);		$sql = 'SELECT COUNT(topic_id) AS stat			FROM ' . TOPICS_TABLE . '			WHERE topic_approved = 1';		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		set_config('num_topics', (int) $row['stat'], true);		$sql = 'SELECT COUNT(attach_id) as stat			FROM ' . ATTACHMENTS_TABLE;		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		set_config('num_files', (int) $row['stat'], true);		$sql = 'SELECT SUM(filesize) as stat			FROM ' . ATTACHMENTS_TABLE;		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		set_config('upload_dir_size', (float) $row['stat'], true);		return array();	}	/**	* Move forum position by $steps up/down	*/	function move_forum_by($forum_row, $action = 'move_up', $steps = 1)	{		global $db;		/**		* Fetch all the siblings between the module's current spot		* and where we want to move it to. If there are less than $steps		* siblings between the current spot and the target then the		* module will move as far as possible		*/		$sql = 'SELECT forum_id, forum_name, left_id, right_id			FROM ' . FORUMS_TABLE . "			WHERE parent_id = {$forum_row['parent_id']}				AND " . (($action == 'move_up') ? "right_id < {$forum_row['right_id']} ORDER BY right_id DESC" : "left_id > {$forum_row['left_id']} ORDER BY left_id ASC");		$result = $db->sql_query_limit($sql, $steps);		$target = array();		while ($row = $db->sql_fetchrow($result))		{			$target = $row;		}		$db->sql_freeresult($result);		if (!sizeof($target))		{			// The forum is already on top or bottom			return false;		}		/**		* $left_id and $right_id define the scope of the nodes that are affected by the move.		* $diff_up and $diff_down are the values to substract or add to each node's left_id		* and right_id in order to move them up or down.		* $move_up_left and $move_up_right define the scope of the nodes that are moving		* up. Other nodes in the scope of ($left_id, $right_id) are considered to move down.		*/		if ($action == 'move_up')		{			$left_id = $target['left_id'];			$right_id = $forum_row['right_id'];			$diff_up = $forum_row['left_id'] - $target['left_id'];			$diff_down = $forum_row['right_id'] + 1 - $forum_row['left_id'];			$move_up_left = $forum_row['left_id'];			$move_up_right = $forum_row['right_id'];		}		else		{			$left_id = $forum_row['left_id'];			$right_id = $target['right_id'];			$diff_up = $forum_row['right_id'] + 1 - $forum_row['left_id'];			$diff_down = $target['right_id'] - $forum_row['right_id'];			$move_up_left = $forum_row['right_id'] + 1;			$move_up_right = $target['right_id'];		}		// Now do the dirty job		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET left_id = left_id + CASE				WHEN left_id BETWEEN {$move_up_left} AND {$move_up_right} THEN -{$diff_up}				ELSE {$diff_down}			END,			right_id = right_id + CASE				WHEN right_id BETWEEN {$move_up_left} AND {$move_up_right} THEN -{$diff_up}				ELSE {$diff_down}			END,			forum_parents = ''			WHERE				left_id BETWEEN {$left_id} AND {$right_id}				AND right_id BETWEEN {$left_id} AND {$right_id}";		$db->sql_query($sql);		return $target['forum_name'];	}	/**	* Display progress bar for syncinc forums	*/	function display_progress_bar($start, $total)	{		global $template, $user;		adm_page_header($user->lang['SYNC_IN_PROGRESS']);		$template->set_filenames(array(			'body'	=> 'progress_bar.html')		);		$template->assign_vars(array(			'L_PROGRESS'			=> $user->lang['SYNC_IN_PROGRESS'],			'L_PROGRESS_EXPLAIN'	=> ($start && $total) ? sprintf($user->lang['SYNC_IN_PROGRESS_EXPLAIN'], $start, $total) : $user->lang['SYNC_IN_PROGRESS'])		);		adm_page_footer();	}	/**	* Display copy permission page	* Not used at the moment - we will have a look at it for 3.0.7	*/	function copy_permission_page($forum_data)	{		global $phpEx, $phpbb_admin_path, $template, $user;		$acl_url = '&amp;mode=setting_forum_local&amp;forum_id[]=' . $forum_data['forum_id'];		$action = append_sid($this->u_action . "&amp;parent_id={$this->parent_id}&amp;f={$forum_data['forum_id']}&amp;action=copy_perm");		$l_acl = sprintf($user->lang['COPY_TO_ACL'], '<a href="' . append_sid("{$phpbb_admin_path}index.$phpEx", 'i=permissions' . $acl_url) . '">', '</a>');		$this->tpl_name = 'acp_forums_copy_perm';		$template->assign_vars(array(			'U_ACL'				=> append_sid("{$phpbb_admin_path}index.$phpEx", 'i=permissions' . $acl_url),			'L_ACL_LINK'		=> $l_acl,			'L_BACK_LINK'		=> adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id),			'S_COPY_ACTION'		=> $action,			'S_FORUM_OPTIONS'	=> make_forum_select($forum_data['parent_id'], $forum_data['forum_id'], false, false, false),		));	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_language{	var $u_action;	var $main_files;	var $language_header = '';	var $lang_header = '';	var $language_file = '';	var $language_directory = '';	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $table_prefix;		global $safe_mode, $file_uploads;		include_once($phpbb_root_path . 'includes/functions_user.' . $phpEx);		$this->default_variables();		// Check and set some common vars		$action		= (isset($_POST['update_details'])) ? 'update_details' : '';		$action		= (isset($_POST['download_file'])) ? 'download_file' : $action;		$action		= (isset($_POST['upload_file'])) ? 'upload_file' : $action;		$action		= (isset($_POST['upload_data'])) ? 'upload_data' : $action;		$action		= (isset($_POST['submit_file'])) ? 'submit_file' : $action;		$action		= (isset($_POST['remove_store'])) ? 'details' : $action;		$submit = (empty($action) && !isset($_POST['update']) && !isset($_POST['test_connection'])) ? false : true;		$action = (empty($action)) ? request_var('action', '') : $action;		$form_name = 'acp_lang';		add_form_key('acp_lang');		$lang_id = request_var('id', 0);		if (isset($_POST['missing_file']))		{			$missing_file = request_var('missing_file', array('' => 0));			list($_REQUEST['language_file'], ) = array_keys($missing_file);		}		$selected_lang_file = request_var('language_file', '|common.' . $phpEx);		list($this->language_directory, $this->language_file) = explode('|', $selected_lang_file);		$this->language_directory = basename($this->language_directory);		$this->language_file = basename($this->language_file);		$user->add_lang('acp/language');		$this->tpl_name = 'acp_language';		$this->page_title = 'ACP_LANGUAGE_PACKS';		if ($submit && $action == 'upload_data' && request_var('test_connection', ''))		{			$test_connection = false;			$action = 'upload_file';			$method = request_var('method', '');			include_once($phpbb_root_path . 'includes/functions_transfer.' . $phpEx);			switch ($method)			{				case 'ftp':					$transfer = new ftp(request_var('host', ''), request_var('username', ''), request_var('password', ''), request_var('root_path', ''), request_var('port', ''), request_var('timeout', ''));				break;				case 'ftp_fsock':					$transfer = new ftp_fsock(request_var('host', ''), request_var('username', ''), request_var('password', ''), request_var('root_path', ''), request_var('port', ''), request_var('timeout', ''));				break;				default:					trigger_error($user->lang['INVALID_UPLOAD_METHOD'], E_USER_ERROR);				break;			}			$test_connection = $transfer->open_session();			$transfer->close_session();		}		switch ($action)		{			case 'upload_file':				include_once($phpbb_root_path . 'includes/functions_transfer.' . $phpEx);				$method = request_var('method', '');				if (!class_exists($method))				{					trigger_error('Method does not exist.', E_USER_ERROR);				}				$requested_data = call_user_func(array($method, 'data'));				foreach ($requested_data as $data => $default)				{					$template->assign_block_vars('data', array(						'DATA'		=> $data,						'NAME'		=> $user->lang[strtoupper($method . '_' . $data)],						'EXPLAIN'	=> $user->lang[strtoupper($method . '_' . $data) . '_EXPLAIN'],						'DEFAULT'	=> (!empty($_REQUEST[$data])) ? request_var($data, '') : $default					));				}				$hidden_data = build_hidden_fields(array(					'file'			=> $this->language_file,					'dir'			=> $this->language_directory,					'language_file'	=> $selected_lang_file,					'method'		=> $method)				);				$hidden_data .= build_hidden_fields(array('entry' => $_POST['entry']), true, STRIP);				$template->assign_vars(array(					'S_UPLOAD'	=> true,					'NAME'		=> $method,					'U_ACTION'	=> $this->u_action . "&amp;id=$lang_id&amp;action=upload_data",					'U_BACK'	=> $this->u_action . "&amp;id=$lang_id&amp;action=details&amp;language_file=" . urlencode($selected_lang_file),					'HIDDEN'	=> $hidden_data,					'S_CONNECTION_SUCCESS'		=> (request_var('test_connection', '') && $test_connection === true) ? true : false,					'S_CONNECTION_FAILED'		=> (request_var('test_connection', '') && $test_connection !== true) ? true : false				));			break;			case 'update_details':				if (!$submit || !check_form_key($form_name))				{					trigger_error($user->lang['FORM_INVALID']. adm_back_link($this->u_action), E_USER_WARNING);				}				if (!$lang_id)				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . LANG_TABLE . "					WHERE lang_id = $lang_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$sql_ary	= array(					'lang_english_name'		=> request_var('lang_english_name', $row['lang_english_name']),					'lang_local_name'		=> utf8_normalize_nfc(request_var('lang_local_name', $row['lang_local_name'], true)),					'lang_author'			=> utf8_normalize_nfc(request_var('lang_author', $row['lang_author'], true)),				);				$db->sql_query('UPDATE ' . LANG_TABLE . '					SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '					WHERE lang_id = ' . $lang_id);				add_log('admin', 'LOG_LANGUAGE_PACK_UPDATED', $sql_ary['lang_english_name']);				trigger_error($user->lang['LANGUAGE_DETAILS_UPDATED'] . adm_back_link($this->u_action));			break;			case 'submit_file':			case 'download_file':			case 'upload_data':				if (!$submit || !check_form_key($form_name))				{					trigger_error($user->lang['FORM_INVALID']. adm_back_link($this->u_action), E_USER_WARNING);				}				if (!$lang_id || empty($_POST['entry']))				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if ($this->language_directory != 'email' && !is_array($_POST['entry']))				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (!$this->language_file || (!$this->language_directory && !in_array($this->language_file, $this->main_files)))				{					trigger_error($user->lang['NO_FILE_SELECTED'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . LANG_TABLE . "					WHERE lang_id = $lang_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				// Before we attempt to write anything let's check if the admin really chose a correct filename				switch ($this->language_directory)				{					case 'email':						// Get email templates						$email_files = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'email', 'txt');						$email_files = $email_files['email/'];						if (!in_array($this->language_file, $email_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					case 'acp':						// Get acp files						$acp_files = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'acp', $phpEx);						$acp_files = $acp_files['acp/'];						if (!in_array($this->language_file, $acp_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					case 'mods':						// Get mod files						$mods_files = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'mods', $phpEx);						$mods_files = (isset($mods_files['mods/'])) ? $mods_files['mods/'] : array();						if (!in_array($this->language_file, $mods_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					default:						if (!in_array($this->language_file, $this->main_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;				}				if (!$safe_mode)				{					$mkdir_ary = array('language', 'language/' . $row['lang_iso']);					if ($this->language_directory)					{						$mkdir_ary[] = 'language/' . $row['lang_iso'] . '/' . $this->language_directory;					}					foreach ($mkdir_ary as $dir)					{						$dir = $phpbb_root_path . 'store/' . $dir;						if (!is_dir($dir))						{							if (!@mkdir($dir, 0777))							{								trigger_error("Could not create directory $dir", E_USER_ERROR);							}							@chmod($dir, 0777);						}					}				}				// Get target filename for storage folder				$filename = $this->get_filename($row['lang_iso'], $this->language_directory, $this->language_file, true, true);				$fp = @fopen($phpbb_root_path . $filename, 'wb');				if (!$fp)				{					trigger_error(sprintf($user->lang['UNABLE_TO_WRITE_FILE'], $filename) . adm_back_link($this->u_action . '&amp;id=' . $lang_id . '&amp;action=details&amp;language_file=' . urlencode($selected_lang_file)), E_USER_WARNING);				}				if ($this->language_directory == 'email')				{					// Email Template					$entry = $this->prepare_lang_entry($_POST['entry'], false);					fwrite($fp, $entry);				}				else				{					$name = (($this->language_directory) ? $this->language_directory . '_' : '') . $this->language_file;					$header = str_replace(array('{FILENAME}', '{LANG_NAME}', '{CHANGED}', '{AUTHOR}'), array($name, $row['lang_english_name'], date('Y-m-d', time()), $row['lang_author']), $this->language_file_header);					if (strpos($this->language_file, 'help_') === 0)					{						// Help File						$header .= '$help = array(' . "\n";						fwrite($fp, $header);						foreach ($_POST['entry'] as $key => $value)						{							if (!is_array($value))							{								continue;							}							$entry = "\tarray(\n";							foreach ($value as $_key => $_value)							{								$entry .= "\t\t" . (int) $_key . "\t=> '" . $this->prepare_lang_entry($_value) . "',\n";							}							$entry .= "\t),\n";							fwrite($fp, $entry);						}						$footer = ");\n\n?>";						fwrite($fp, $footer);					}					else					{						// Language File						$header .= $this->lang_header;						fwrite($fp, $header);						foreach ($_POST['entry'] as $key => $value)						{							$entry = $this->format_lang_array($key, $value);							fwrite($fp, $entry);						}						$footer = "));\n\n?>";						fwrite($fp, $footer);					}				}				fclose($fp);				if ($action == 'download_file')				{					header('Pragma: no-cache');					header('Content-Type: application/octetstream; name="' . $this->language_file . '"');					header('Content-disposition: attachment; filename=' . $this->language_file);					$fp = @fopen($phpbb_root_path . $filename, 'rb');					while ($buffer = fread($fp, 1024))					{						echo $buffer;					}					fclose($fp);					add_log('admin', 'LOG_LANGUAGE_FILE_SUBMITTED', $this->language_file);					exit;				}				else if ($action == 'upload_data')				{					$sql = 'SELECT lang_iso						FROM ' . LANG_TABLE . "						WHERE lang_id = $lang_id";					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					$file = request_var('file', '');					$dir = request_var('dir', '');					$selected_lang_file = $dir . '|' . $file;					$old_file = '/' . $this->get_filename($row['lang_iso'], $dir, $file, false, true);					$lang_path = 'language/' . $row['lang_iso'] . '/' . (($dir) ? $dir . '/' : '');					include_once($phpbb_root_path . 'includes/functions_transfer.' . $phpEx);					$method = request_var('method', '');					if ($method != 'ftp' && $method != 'ftp_fsock')					{						trigger_error($user->lang['INVALID_UPLOAD_METHOD'], E_USER_ERROR);					}					$transfer = new $method(request_var('host', ''), request_var('username', ''), request_var('password', ''), request_var('root_path', ''), request_var('port', ''), request_var('timeout', ''));					if (($result = $transfer->open_session()) !== true)					{						trigger_error($user->lang[$result] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id . '&amp;language_file=' . urlencode($selected_lang_file)), E_USER_WARNING);					}					$transfer->rename($lang_path . $file, $lang_path . $file . '.bak');					$result = $transfer->copy_file('store/' . $lang_path . $file, $lang_path . $file);					if ($result === false)					{						// If failed, try to rename again and print error out...						$transfer->delete_file($lang_path . $file);						$transfer->rename($lang_path . $file . '.bak', $lang_path . $file);						trigger_error($user->lang['UPLOAD_FAILED'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id . '&amp;language_file=' . urlencode($selected_lang_file)), E_USER_WARNING);					}					$transfer->close_session();					// Remove from storage folder					if (file_exists($phpbb_root_path . 'store/' . $lang_path . $file))					{						@unlink($phpbb_root_path . 'store/' . $lang_path . $file);					}					add_log('admin', 'LOG_LANGUAGE_FILE_REPLACED', $file);					trigger_error($user->lang['UPLOAD_COMPLETED'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id . '&amp;language_file=' . urlencode($selected_lang_file)));				}				add_log('admin', 'LOG_LANGUAGE_FILE_SUBMITTED', $this->language_file);				$action = 'details';			// no break;			case 'details':				if (!$lang_id)				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$this->page_title = 'LANGUAGE_PACK_DETAILS';				$sql = 'SELECT *					FROM ' . LANG_TABLE . '					WHERE lang_id = ' . $lang_id;				$result = $db->sql_query($sql);				$lang_entries = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$lang_iso = $lang_entries['lang_iso'];				$missing_vars = $missing_files = array();				// Get email templates				$email_files = filelist($phpbb_root_path . 'language/' . $config['default_lang'], 'email', 'txt');				$email_files = $email_files['email/'];				// Get acp files				$acp_files = filelist($phpbb_root_path . 'language/' . $config['default_lang'], 'acp', $phpEx);				$acp_files = $acp_files['acp/'];				// Get mod files				$mods_files = filelist($phpbb_root_path . 'language/' . $config['default_lang'], 'mods', $phpEx);				$mods_files = (isset($mods_files['mods/'])) ? $mods_files['mods/'] : array();				// Check if our current filename matches the files				switch ($this->language_directory)				{					case 'email':						if (!in_array($this->language_file, $email_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					case 'acp':						if (!in_array($this->language_file, $acp_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					case 'mods':						if (!in_array($this->language_file, $mods_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					default:						if (!in_array($this->language_file, $this->main_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}				}				if (isset($_POST['remove_store']))				{					$store_filename = $this->get_filename($lang_iso, $this->language_directory, $this->language_file, true, true);					if (file_exists($phpbb_root_path . $store_filename))					{						@unlink($phpbb_root_path . $store_filename);					}				}				include_once($phpbb_root_path . 'includes/functions_transfer.' . $phpEx);				$methods = transfer::methods();				foreach ($methods as $method)				{					$template->assign_block_vars('buttons', array(						'VALUE' => $method					));				}				$template->assign_vars(array(					'S_DETAILS'			=> true,					'U_ACTION'			=> $this->u_action . "&amp;action=details&amp;id=$lang_id",					'U_BACK'			=> $this->u_action,					'LANG_LOCAL_NAME'	=> $lang_entries['lang_local_name'],					'LANG_ENGLISH_NAME'	=> $lang_entries['lang_english_name'],					'LANG_ISO'			=> $lang_entries['lang_iso'],					'LANG_AUTHOR'		=> $lang_entries['lang_author'],					'ALLOW_UPLOAD'		=> sizeof($methods)					)				);				// If current lang is different from the default lang, then first try to grab missing/additional vars				if ($lang_iso != $config['default_lang'])				{					$is_missing_var = false;					foreach ($this->main_files as $file)					{						if (file_exists($phpbb_root_path . $this->get_filename($lang_iso, '', $file)))						{							$missing_vars[$file] = $this->compare_language_files($config['default_lang'], $lang_iso, '', $file);							if (sizeof($missing_vars[$file]))							{								$is_missing_var = true;							}						}						else						{							$missing_files[] = $this->get_filename($lang_iso, '', $file);						}					}					// Now go through acp/mods directories					foreach ($acp_files as $file)					{						if (file_exists($phpbb_root_path . $this->get_filename($lang_iso, 'acp', $file)))						{							$missing_vars['acp/' . $file] = $this->compare_language_files($config['default_lang'], $lang_iso, 'acp', $file);							if (sizeof($missing_vars['acp/' . $file]))							{								$is_missing_var = true;							}						}						else						{							$missing_files[] = $this->get_filename($lang_iso, 'acp', $file);						}					}					if (sizeof($mods_files))					{						foreach ($mods_files as $file)						{							if (file_exists($phpbb_root_path . $this->get_filename($lang_iso, 'mods', $file)))							{								$missing_vars['mods/' . $file] = $this->compare_language_files($config['default_lang'], $lang_iso, 'mods', $file);								if (sizeof($missing_vars['mods/' . $file]))								{									$is_missing_var = true;								}							}							else							{								$missing_files[] = $this->get_filename($lang_iso, 'mods', $file);							}						}					}					// More missing files... for example email templates?					foreach ($email_files as $file)					{						if (!file_exists($phpbb_root_path . $this->get_filename($lang_iso, 'email', $file)))						{							$missing_files[] = $this->get_filename($lang_iso, 'email', $file);						}					}					if (sizeof($missing_files))					{						$template->assign_vars(array(							'S_MISSING_FILES'		=> true,							'L_MISSING_FILES'		=> sprintf($user->lang['THOSE_MISSING_LANG_FILES'], $lang_entries['lang_local_name']),							'MISSING_FILES'			=> implode('<br />', $missing_files))						);					}					if ($is_missing_var)					{						$template->assign_vars(array(							'S_MISSING_VARS'			=> true,							'L_MISSING_VARS_EXPLAIN'	=> sprintf($user->lang['THOSE_MISSING_LANG_VARIABLES'], $lang_entries['lang_local_name']),							'U_MISSING_ACTION'			=> $this->u_action . "&amp;action=$action&amp;id=$lang_id")						);						foreach ($missing_vars as $file => $vars)						{							if (!sizeof($vars))							{								continue;							}							$template->assign_block_vars('missing', array(								'FILE'			=> $file,								'TPL'			=> $this->print_language_entries($vars, '', false),								'KEY'			=> (strpos($file, '/') === false) ? '|' . $file : str_replace('/', '|', $file))							);						}					}				}				// Main language files				$s_lang_options = '<option value="|common.' . $phpEx . '" class="sep">' . $user->lang['LANGUAGE_FILES'] . '</option>';				foreach ($this->main_files as $file)				{					if (strpos($file, 'help_') === 0)					{						continue;					}					$prefix = (file_exists($phpbb_root_path . $this->get_filename($lang_iso, '', $file, true, true))) ? '* ' : '';					$selected = (!$this->language_directory && $this->language_file == $file) ? ' selected="selected"' : '';					$s_lang_options .= '<option value="|' . $file . '"' . $selected . '>' . $prefix . $file . '</option>';				}				// Help Files				$s_lang_options .= '<option value="|common.' . $phpEx . '" class="sep">' . $user->lang['HELP_FILES'] . '</option>';				foreach ($this->main_files as $file)				{					if (strpos($file, 'help_') !== 0)					{						continue;					}					$prefix = (file_exists($phpbb_root_path . $this->get_filename($lang_iso, '', $file, true, true))) ? '* ' : '';					$selected = (!$this->language_directory && $this->language_file == $file) ? ' selected="selected"' : '';					$s_lang_options .= '<option value="|' . $file . '"' . $selected . '>' . $prefix . $file . '</option>';				}				// Now every other language directory				$check_files = array('email', 'acp', 'mods');				foreach ($check_files as $check)				{					if (!sizeof(${$check . '_files'}))					{						continue;					}					$s_lang_options .= '<option value="|common.' . $phpEx . '" class="sep">' . $user->lang[strtoupper($check) . '_FILES'] . '</option>';					foreach (${$check . '_files'} as $file)					{						$prefix = (file_exists($phpbb_root_path . $this->get_filename($lang_iso, $check, $file, true, true))) ? '* ' : '';						$selected = ($this->language_directory == $check && $this->language_file == $file) ? ' selected="selected"' : '';						$s_lang_options .= '<option value="' . $check . '|' . $file . '"' . $selected . '>' . $prefix . $file . '</option>';					}				}				// Get Language Entries - if saved within store folder, we take this one (with the option to remove it)				$lang = array();				$is_email_file = ($this->language_directory == 'email') ? true : false;				$is_help_file = (strpos($this->language_file, 'help_') === 0) ? true : false;				$file_from_store = (file_exists($phpbb_root_path . $this->get_filename($lang_iso, $this->language_directory, $this->language_file, true, true))) ? true : false;				$no_store_filename = $this->get_filename($lang_iso, $this->language_directory, $this->language_file);				if (!$file_from_store && !file_exists($phpbb_root_path . $no_store_filename))				{					$print_message = sprintf($user->lang['MISSING_LANGUAGE_FILE'], $no_store_filename);				}				else				{					if ($is_email_file)					{						$lang = file_get_contents($phpbb_root_path . $this->get_filename($lang_iso, $this->language_directory, $this->language_file, $file_from_store));					}					else					{						$help = array();						include($phpbb_root_path . $this->get_filename($lang_iso, $this->language_directory, $this->language_file, $file_from_store));						if ($is_help_file)						{							$lang = $help;							unset($help);						}					}					$print_message = (($this->language_directory) ? $this->language_directory . '/' : '') . $this->language_file;				}				// Normal language pack entries				$template->assign_vars(array(					'U_ENTRY_ACTION'		=> $this->u_action . "&amp;action=details&amp;id=$lang_id#entries",					'S_EMAIL_FILE'			=> $is_email_file,					'S_FROM_STORE'			=> $file_from_store,					'S_LANG_OPTIONS'		=> $s_lang_options,					'PRINT_MESSAGE'			=> $print_message,					)				);				if (!$is_email_file)				{					$tpl = '';					$name = (($this->language_directory) ? $this->language_directory . '/' : '') . $this->language_file;					if (isset($missing_vars[$name]) && sizeof($missing_vars[$name]))					{						$tpl .= $this->print_language_entries($missing_vars[$name], '* ');					}					$tpl .= $this->print_language_entries($lang);					$template->assign_var('TPL', $tpl);					unset($tpl);				}				else				{					$template->assign_vars(array(						'LANG'		=> $lang)					);					unset($lang);				}				return;			break;			case 'delete':				if (!$lang_id)				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . LANG_TABLE . '					WHERE lang_id = ' . $lang_id;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if ($row['lang_iso'] == $config['default_lang'])				{					trigger_error($user->lang['NO_REMOVE_DEFAULT_LANG'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (confirm_box(true))				{					$db->sql_query('DELETE FROM ' . LANG_TABLE . ' WHERE lang_id = ' . $lang_id);					$sql = 'UPDATE ' . USERS_TABLE . "						SET user_lang = '" . $db->sql_escape($config['default_lang']) . "'						WHERE user_lang = '" . $db->sql_escape($row['lang_iso']) . "'";					$db->sql_query($sql);					// We also need to remove the translated entries for custom profile fields - we want clean tables, don't we?					$sql = 'DELETE FROM ' . PROFILE_LANG_TABLE . ' WHERE lang_id = ' . $lang_id;					$db->sql_query($sql);					$sql = 'DELETE FROM ' . PROFILE_FIELDS_LANG_TABLE . ' WHERE lang_id = ' . $lang_id;					$db->sql_query($sql);					$sql = 'DELETE FROM ' . STYLES_IMAGESET_DATA_TABLE . " WHERE image_lang = '" . $db->sql_escape($row['lang_iso']) . "'";					$result = $db->sql_query($sql);					$cache->destroy('sql', STYLES_IMAGESET_DATA_TABLE);					add_log('admin', 'LOG_LANGUAGE_PACK_DELETED', $row['lang_english_name']);					trigger_error(sprintf($user->lang['LANGUAGE_PACK_DELETED'], $row['lang_english_name']) . adm_back_link($this->u_action));				}				else				{					$s_hidden_fields = array(						'i'			=> $id,						'mode'		=> $mode,						'action'	=> $action,						'id'		=> $lang_id,					);					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields($s_hidden_fields));				}			break;			case 'install':				$lang_iso = request_var('iso', '');				$lang_iso = basename($lang_iso);				if (!$lang_iso || !file_exists("{$phpbb_root_path}language/$lang_iso/iso.txt"))				{					trigger_error($user->lang['LANGUAGE_PACK_NOT_EXIST'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$file = file("{$phpbb_root_path}language/$lang_iso/iso.txt");				$lang_pack = array(					'iso'		=> $lang_iso,					'name'		=> trim(htmlspecialchars($file[0])),					'local_name'=> trim(htmlspecialchars($file[1], ENT_COMPAT, 'UTF-8')),					'author'	=> trim(htmlspecialchars($file[2], ENT_COMPAT, 'UTF-8'))				);				unset($file);				$sql = 'SELECT lang_iso					FROM ' . LANG_TABLE . "					WHERE lang_iso = '" . $db->sql_escape($lang_iso) . "'";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if ($row)				{					trigger_error($user->lang['LANGUAGE_PACK_ALREADY_INSTALLED'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (!$lang_pack['name'] || !$lang_pack['local_name'])				{					trigger_error($user->lang['INVALID_LANGUAGE_PACK'] . adm_back_link($this->u_action), E_USER_WARNING);				}				// Add language pack				$sql_ary = array(					'lang_iso'			=> $lang_pack['iso'],					'lang_dir'			=> $lang_pack['iso'],					'lang_english_name'	=> $lang_pack['name'],					'lang_local_name'	=> $lang_pack['local_name'],					'lang_author'		=> $lang_pack['author']				);				$db->sql_query('INSERT INTO ' . LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));				$lang_id = $db->sql_nextid();				$valid_localized = array(					'icon_back_top', 'icon_contact_aim', 'icon_contact_email', 'icon_contact_icq', 'icon_contact_jabber', 'icon_contact_msnm', 'icon_contact_pm', 'icon_contact_yahoo', 'icon_contact_www', 'icon_post_delete', 'icon_post_edit', 'icon_post_info', 'icon_post_quote', 'icon_post_report', 'icon_user_online', 'icon_user_offline', 'icon_user_profile', 'icon_user_search', 'icon_user_warn', 'button_pm_forward', 'button_pm_new', 'button_pm_reply', 'button_topic_locked', 'button_topic_new', 'button_topic_reply',				);				$sql_ary = array();				$sql = 'SELECT *					FROM ' . STYLES_IMAGESET_TABLE;				$result = $db->sql_query($sql);				while ($imageset_row = $db->sql_fetchrow($result))				{					if (@file_exists("{$phpbb_root_path}styles/{$imageset_row['imageset_path']}/imageset/{$lang_pack['iso']}/imageset.cfg"))					{						$cfg_data_imageset_data = parse_cfg_file("{$phpbb_root_path}styles/{$imageset_row['imageset_path']}/imageset/{$lang_pack['iso']}/imageset.cfg");						foreach ($cfg_data_imageset_data as $image_name => $value)						{							if (strpos($value, '*') !== false)							{								if (substr($value, -1, 1) === '*')								{									list($image_filename, $image_height) = explode('*', $value);									$image_width = 0;								}								else								{									list($image_filename, $image_height, $image_width) = explode('*', $value);								}							}							else							{								$image_filename = $value;								$image_height = $image_width = 0;							}							if (strpos($image_name, 'img_') === 0 && $image_filename)							{								$image_name = substr($image_name, 4);								if (in_array($image_name, $valid_localized))								{									$sql_ary[] = array(										'image_name'		=> (string) $image_name,										'image_filename'	=> (string) $image_filename,										'image_height'		=> (int) $image_height,										'image_width'		=> (int) $image_width,										'imageset_id'		=> (int) $imageset_row['imageset_id'],										'image_lang'		=> (string) $lang_pack['iso'],									);								}							}						}					}				}				$db->sql_freeresult($result);				if (sizeof($sql_ary))				{					$db->sql_multi_insert(STYLES_IMAGESET_DATA_TABLE, $sql_ary);					$cache->destroy('sql', STYLES_IMAGESET_DATA_TABLE);				}				// Now let's copy the default language entries for custom profile fields for this new language - makes admin's life easier.				$sql = 'SELECT lang_id					FROM ' . LANG_TABLE . "					WHERE lang_iso = '" . $db->sql_escape($config['default_lang']) . "'";				$result = $db->sql_query($sql);				$default_lang_id = (int) $db->sql_fetchfield('lang_id');				$db->sql_freeresult($result);				// We want to notify the admin that custom profile fields need to be updated for the new language.				$notify_cpf_update = false;				// From the mysql documentation:				// Prior to MySQL 4.0.14, the target table of the INSERT statement cannot appear in the FROM clause of the SELECT part of the query. This limitation is lifted in 4.0.14.				// Due to this we stay on the safe side if we do the insertion "the manual way"				$sql = 'SELECT field_id, lang_name, lang_explain, lang_default_value					FROM ' . PROFILE_LANG_TABLE . '					WHERE lang_id = ' . $default_lang_id;				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$row['lang_id'] = $lang_id;					$db->sql_query('INSERT INTO ' . PROFILE_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $row));					$notify_cpf_update = true;				}				$db->sql_freeresult($result);				$sql = 'SELECT field_id, option_id, field_type, lang_value					FROM ' . PROFILE_FIELDS_LANG_TABLE . '					WHERE lang_id = ' . $default_lang_id;				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$row['lang_id'] = $lang_id;					$db->sql_query('INSERT INTO ' . PROFILE_FIELDS_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $row));					$notify_cpf_update = true;				}				$db->sql_freeresult($result);				add_log('admin', 'LOG_LANGUAGE_PACK_INSTALLED', $lang_pack['name']);				$message = sprintf($user->lang['LANGUAGE_PACK_INSTALLED'], $lang_pack['name']);				$message .= ($notify_cpf_update) ? '<br /><br />' . $user->lang['LANGUAGE_PACK_CPF_UPDATE'] : '';				trigger_error($message . adm_back_link($this->u_action));			break;			case 'download':				if (!$lang_id)				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . LANG_TABLE . '					WHERE lang_id = ' . $lang_id;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$use_method = request_var('use_method', '');				$methods = array('.tar');				$available_methods = array('.tar.gz' => 'zlib', '.tar.bz2' => 'bz2', '.zip' => 'zlib');				foreach ($available_methods as $type => $module)				{					if (!@extension_loaded($module))					{						continue;					}					$methods[] = $type;				}				// Let the user decide in which format he wants to have the pack				if (!$use_method)				{					$this->page_title = 'SELECT_DOWNLOAD_FORMAT';					$radio_buttons = '';					foreach ($methods as $method)					{						$radio_buttons .= '<label><input type="radio"' . ((!$radio_buttons) ? ' id="use_method"' : '') . ' class="radio" value="' . $method . '" name="use_method" /> ' . $method . '</label>';					}					$template->assign_vars(array(						'S_SELECT_METHOD'		=> true,						'U_BACK'				=> $this->u_action,						'U_ACTION'				=> $this->u_action . "&amp;action=$action&amp;id=$lang_id",						'RADIO_BUTTONS'			=> $radio_buttons)					);					return;				}				if (!in_array($use_method, $methods))				{					$use_method = '.tar';				}				include_once($phpbb_root_path . 'includes/functions_compress.' . $phpEx);				if ($use_method == '.zip')				{					$compress = new compress_zip('w', $phpbb_root_path . 'store/lang_' . $row['lang_iso'] . $use_method);				}				else				{					$compress = new compress_tar('w', $phpbb_root_path . 'store/lang_' . $row['lang_iso'] . $use_method, $use_method);				}				// Get email templates				$email_templates = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'email', 'txt');				$email_templates = $email_templates['email/'];				// Get acp files				$acp_files = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'acp', $phpEx);				$acp_files = $acp_files['acp/'];				// Get mod files				$mod_files = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'mods', $phpEx);				$mod_files = (isset($mod_files['mods/'])) ? $mod_files['mods/'] : array();				// Add main files				$this->add_to_archive($compress, $this->main_files, $row['lang_iso']);				// Add search files if they exist...				if (file_exists($phpbb_root_path . 'language/' . $row['lang_iso'] . '/search_ignore_words.' . $phpEx))				{					$this->add_to_archive($compress, array("search_ignore_words.$phpEx"), $row['lang_iso']);				}				if (file_exists($phpbb_root_path . 'language/' . $row['lang_iso'] . '/search_synonyms.' . $phpEx))				{					$this->add_to_archive($compress, array("search_synonyms.$phpEx"), $row['lang_iso']);				}				// Write files in folders				$this->add_to_archive($compress, $email_templates, $row['lang_iso'], 'email');				$this->add_to_archive($compress, $acp_files, $row['lang_iso'], 'acp');				$this->add_to_archive($compress, $mod_files, $row['lang_iso'], 'mods');				// Write ISO File				$iso_src = htmlspecialchars_decode($row['lang_english_name']) . "\n";				$iso_src .= htmlspecialchars_decode($row['lang_local_name']) . "\n";				$iso_src .= htmlspecialchars_decode($row['lang_author']);				$compress->add_data($iso_src, 'language/' . $row['lang_iso'] . '/iso.txt');				// index.htm files				$compress->add_data('', 'language/' . $row['lang_iso'] . '/index.htm');				$compress->add_data('', 'language/' . $row['lang_iso'] . '/email/index.htm');				$compress->add_data('', 'language/' . $row['lang_iso'] . '/acp/index.htm');				if (sizeof($mod_files))				{					$compress->add_data('', 'language/' . $row['lang_iso'] . '/mods/index.htm');				}				$compress->close();				$compress->download('lang_' . $row['lang_iso']);				@unlink($phpbb_root_path . 'store/lang_' . $row['lang_iso'] . $use_method);				exit;			break;		}		$sql = 'SELECT user_lang, COUNT(user_lang) AS lang_count			FROM ' . USERS_TABLE . '			GROUP BY user_lang';		$result = $db->sql_query($sql);		$lang_count = array();		while ($row = $db->sql_fetchrow($result))		{			$lang_count[$row['user_lang']] = $row['lang_count'];		}		$db->sql_freeresult($result);		$sql = 'SELECT *			FROM ' . LANG_TABLE . '			ORDER BY lang_english_name';		$result = $db->sql_query($sql);		$installed = array();		while ($row = $db->sql_fetchrow($result))		{			$installed[] = $row['lang_iso'];			$tagstyle = ($row['lang_iso'] == $config['default_lang']) ? '*' : '';			$template->assign_block_vars('lang', array(				'U_DETAILS'			=> $this->u_action . "&amp;action=details&amp;id={$row['lang_id']}",				'U_DOWNLOAD'		=> $this->u_action . "&amp;action=download&amp;id={$row['lang_id']}",				'U_DELETE'			=> $this->u_action . "&amp;action=delete&amp;id={$row['lang_id']}",				'ENGLISH_NAME'		=> $row['lang_english_name'],				'TAG'				=> $tagstyle,				'LOCAL_NAME'		=> $row['lang_local_name'],				'ISO'				=> $row['lang_iso'],				'USED_BY'			=> (isset($lang_count[$row['lang_iso']])) ? $lang_count[$row['lang_iso']] : 0,			));		}		$db->sql_freeresult($result);		$new_ary = $iso = array();		$dp = @opendir("{$phpbb_root_path}language");		if ($dp)		{			while (($file = readdir($dp)) !== false)			{				if ($file[0] == '.' || !is_dir($phpbb_root_path . 'language/' . $file))				{					continue;				}				if (file_exists("{$phpbb_root_path}language/$file/iso.txt"))				{					if (!in_array($file, $installed))					{						if ($iso = file("{$phpbb_root_path}language/$file/iso.txt"))						{							if (sizeof($iso) == 3)							{								$new_ary[$file] = array(									'iso'		=> $file,									'name'		=> trim($iso[0]),									'local_name'=> trim($iso[1]),									'author'	=> trim($iso[2])								);							}						}					}				}			}			closedir($dp);		}		unset($installed);		if (sizeof($new_ary))		{			foreach ($new_ary as $iso => $lang_ary)			{				$template->assign_block_vars('notinst', array(					'ISO'			=> htmlspecialchars($lang_ary['iso']),					'LOCAL_NAME'	=> htmlspecialchars($lang_ary['local_name'], ENT_COMPAT, 'UTF-8'),					'NAME'			=> htmlspecialchars($lang_ary['name'], ENT_COMPAT, 'UTF-8'),					'U_INSTALL'		=> $this->u_action . '&amp;action=install&amp;iso=' . urlencode($lang_ary['iso']))				);			}		}		unset($new_ary);	}	/**	* Set default language variables/header	*/	function default_variables()	{		global $phpEx;		$this->language_file_header = '<?php/**** {FILENAME} [{LANG_NAME}]** @package language* @version $' . 'Id: ' . '$* @copyright (c) ' . date('Y') . ' phpBB Group* @author {CHANGED} - {AUTHOR}* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined(\'IN_PHPBB\')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// \'Page %s of %s\' you can (and should) write \'Page %1$s of %2$s\', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. \'Message %d\' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., \'Click %sHERE%s\' is fine';		$this->lang_header = '$lang = array_merge($lang, array(';		// Language files in language root directory		$this->main_files = array("captcha_qa.$phpEx", "captcha_recaptcha.$phpEx", "common.$phpEx", "groups.$phpEx", "install.$phpEx", "mcp.$phpEx", "memberlist.$phpEx", "posting.$phpEx", "search.$phpEx", "ucp.$phpEx", "viewforum.$phpEx", "viewtopic.$phpEx", "help_bbcode.$phpEx", "help_faq.$phpEx");	}	/**	* Get filename/location of language file	*/	function get_filename($lang_iso, $directory, $filename, $check_store = false, $only_return_filename = false)	{		global $phpbb_root_path, $safe_mode;		$check_filename = "language/$lang_iso/" . (($directory) ? $directory . '/' : '') . $filename;		if ($check_store)		{			$check_store_filename = ($safe_mode) ? "store/langfile_{$lang_iso}" . (($directory) ? '_' . $directory : '') . "_{$filename}" : "store/language/$lang_iso/" . (($directory) ? $directory . '/' : '') . $filename;			if (!$only_return_filename && file_exists($phpbb_root_path . $check_store_filename))			{				return $check_store_filename;			}			else if ($only_return_filename)			{				return $check_store_filename;			}		}		return $check_filename;	}	/**	* Add files to archive	*/	function add_to_archive(&$compress, $filelist, $lang_iso, $directory = '')	{		global $phpbb_root_path;		foreach ($filelist as $file)		{			// Get source filename			$source = $this->get_filename($lang_iso, $directory, $file, true);			$destination = 'language/' . $lang_iso . '/' . (($directory) ? $directory . '/' : '') . $file;			// Add file to archive			$compress->add_custom_file($phpbb_root_path . $source, $destination);		}	}	/**	* Little helper to add some hardcoded template bits	*/	function add_input_field()	{		$keys = func_get_args();		$non_static		= array_shift($keys);		$value			= utf8_normalize_nfc(array_shift($keys));		if (!$non_static)		{			return '<strong>' . htmlspecialchars($value, ENT_COMPAT, 'UTF-8') . '</strong>';		}		// If more then 270 characters, then we present a textarea, else an input field		$textarea = (utf8_strlen($value) > 270) ? true : false;		$tpl = '';		$tpl .= ($textarea) ? '<textarea name="' : '<input type="text" name="';		$tpl .= 'entry[' . implode('][', array_map('utf8_htmlspecialchars', $keys)) . ']"';		$tpl .= ($textarea) ? ' cols="80" rows="5" class="langvalue">' : ' class="langvalue" value="';		$tpl .= htmlspecialchars($value, ENT_COMPAT, 'UTF-8');		$tpl .= ($textarea) ? '</textarea>' : '" />';		return $tpl;	}	/**	* Print language entries	*/	function print_language_entries(&$lang_ary, $key_prefix = '', $input_field = true)	{		$tpl = '';		foreach ($lang_ary as $key => $value)		{			if (is_array($value))			{				// Write key				$tpl .= '				<tr>					<td class="row3" colspan="2">' . htmlspecialchars($key_prefix, ENT_COMPAT, 'UTF-8') . '<strong>' . htmlspecialchars($key, ENT_COMPAT, 'UTF-8') . '</strong></td>				</tr>';				foreach ($value as $_key => $_value)				{					if (is_array($_value))					{						// Write key						$tpl .= '							<tr>								<td class="row3" colspan="2">' . htmlspecialchars($key_prefix, ENT_COMPAT, 'UTF-8') . '&nbsp; &nbsp;<strong>' . htmlspecialchars($_key, ENT_COMPAT, 'UTF-8') . '</strong></td>							</tr>';						foreach ($_value as $__key => $__value)						{							// Write key							$tpl .= '								<tr>									<td class="row1" style="white-space: nowrap;">' . htmlspecialchars($key_prefix, ENT_COMPAT, 'UTF-8') . '<strong>' . htmlspecialchars($__key, ENT_COMPAT, 'UTF-8') . '</strong></td>									<td class="row2">';							$tpl .= $this->add_input_field($input_field, $__value, $key, $_key, $__key);							$tpl .= '</td>								</tr>';						}					}					else					{						// Write key						$tpl .= '							<tr>								<td class="row1" style="white-space: nowrap;">' . htmlspecialchars($key_prefix, ENT_COMPAT, 'UTF-8') . '<strong>' . htmlspecialchars($_key, ENT_COMPAT, 'UTF-8') . '</strong></td>								<td class="row2">';						$tpl .= $this->add_input_field($input_field, $_value, $key, $_key);						$tpl .= '</td>							</tr>';					}				}				$tpl .= '				<tr>					<td class="spacer" colspan="2">&nbsp;</td>				</tr>';			}			else			{				// Write key				$tpl .= '				<tr>					<td class="row1" style="white-space: nowrap;">' . htmlspecialchars($key_prefix, ENT_COMPAT, 'UTF-8') . '<strong>' . htmlspecialchars($key, ENT_COMPAT, 'UTF-8') . '</strong></td>					<td class="row2">';				$tpl .= $this->add_input_field($input_field, $value, $key);				$tpl .= '</td>					</tr>';			}		}		return $tpl;	}	/**	* Compare two language files	*/	function compare_language_files($source_lang, $dest_lang, $directory, $file)	{		global $phpbb_root_path, $phpEx;		$return_ary = array();		$lang = array();		include("{$phpbb_root_path}language/{$source_lang}/" . (($directory) ? $directory . '/' : '') . $file);		$lang_entry_src = $lang;		$lang = array();		if (!file_exists($phpbb_root_path . $this->get_filename($dest_lang, $directory, $file, true)))		{			return array();		}		include($phpbb_root_path . $this->get_filename($dest_lang, $directory, $file, true));		$lang_entry_dst = $lang;		unset($lang);		$diff_array_keys = array_diff(array_keys($lang_entry_src), array_keys($lang_entry_dst));		unset($lang_entry_dst);		foreach ($diff_array_keys as $key)		{			$return_ary[$key] = $lang_entry_src[$key];		}		unset($lang_entry_src);		return $return_ary;	}	/**	* Return language string value for storage	*/	function prepare_lang_entry($text, $store = true)	{		$text = (STRIP) ? stripslashes($text) : $text;		// Adjust for storage...		if ($store)		{			$text = str_replace("'", "\\'", str_replace('\\', '\\\\', $text));		}		return $text;	}	/**	* Format language array for storage	*/	function format_lang_array($key, $value, $tabs = "\t")	{		$entry = '';		if (!is_array($value))		{			$entry .= "{$tabs}'" . $this->prepare_lang_entry($key) . "'\t=> '" . $this->prepare_lang_entry($value) . "',\n";		}		else		{			$_tabs = $tabs . "\t";			$entry .= "\n{$tabs}'" . $this->prepare_lang_entry($key) . "'\t=> array(\n";			foreach ($value as $_key => $_value)			{				$entry .= $this->format_lang_array($_key, $_value, $_tabs);			}			$entry .= "{$tabs}),\n\n";		}		return $entry;	}}?>
<?php/*** Corrects avatar filenames to match the new avatar delivery method.** You should make a backup from your users table and the avatar directory in case something goes wrong*/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.'.$phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$echos = 0; if (!isset($config['avatar_salt'])){	$cache->purge();	if (!isset($config['avatar_salt']))	{		die('database not up to date');	}	die('database not up to date');}// let's start with the users using a group_avatar.$sql = 'SELECT group_id, group_avatar	FROM ' . GROUPS_TABLE . '	WHERE group_avatar_type = ' . AVATAR_UPLOAD;// We'll skip these, so remember them$group_avatars = array();echo '<br /> Updating groups' . "\n";$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$new_avatar_name = adjust_avatar($row['group_avatar'], 'g' . $row['group_id']);	$group_avatars[] = $new_avatar_name;		// failure is probably due to the avatar name already being adjusted	if ($new_avatar_name !== false)	{		$sql = 'UPDATE ' . USERS_TABLE . "			SET user_avatar = '" . $db->sql_escape($new_avatar_name) . "'			WHERE user_avatar = '" . $db->sql_escape($row['group_avatar']) . "' 			AND user_avatar_type = " . AVATAR_UPLOAD;		$db->sql_query($sql);				$sql = 'UPDATE ' . GROUPS_TABLE . "			SET group_avatar = '" . $db->sql_escape($new_avatar_name) . "'			WHERE group_id = {$row['group_id']}";		$db->sql_query($sql);	}	else	{		echo '<br /> Failed updating group ' . $row['group_id'] . "\n";	}	if ($echos > 200)	{		echo '<br />' . "\n";		$echos = 0;	}	echo '.';	$echos++;	flush();}$db->sql_freeresult($result);$sql = 'SELECT user_id, username, user_avatar, user_avatar_type	FROM ' . USERS_TABLE . ' 	WHERE user_avatar_type = ' . AVATAR_UPLOAD . ' 	AND ' . $db->sql_in_set('user_avatar', $group_avatars, true, true);$result = $db->sql_query($sql);echo '<br /> Updating users' . "\n";while ($row = $db->sql_fetchrow($result)){	$new_avatar_name = adjust_avatar($row['user_avatar'], $row['user_id']);	// failure is probably due to the avatar name already being adjusted	if ($new_avatar_name !== false)	{		$sql = 'UPDATE ' . USERS_TABLE . "			SET user_avatar = '" . $db->sql_escape($new_avatar_name) . "'			WHERE user_id = {$row['user_id']}";		$db->sql_query($sql);	}	else	{		// nuke this avatar		$sql = 'UPDATE ' . USERS_TABLE . "			SET user_avatar = '', user_avatar_type = 0			WHERE user_id = {$row['user_id']}";		$db->sql_query($sql);		echo '<br /> Failed updating user ' . $row['user_id'] . "\n";	}		if ($echos > 200)	{		echo '<br />' . "\n";		$echos = 0;	}	echo '.';	$echos++;	flush();}$db->sql_freeresult($result);echo 'FINISHED';// Done$db->sql_close();function adjust_avatar($old_name, $midfix){	global $config, $phpbb_root_path;		$avatar_path = $phpbb_root_path . $config['avatar_path'];	$extension = strtolower(substr(strrchr($old_name, '.'), 1));	$new_name = $config['avatar_salt'] . '_' . $midfix . '.' . $extension;	if (@file_exists($avatar_path . '/' . $old_name) && @is_writable($avatar_path . '/' . $old_name) && @is_writable($avatar_path . '/' . $new_name))	{		@rename($avatar_path . '/' . $old_name, $avatar_path . '/' . $new_name);		return $midfix . '.' . $extension;	}	return false;}?>
<?php/**** @package acm* @copyright (c) 2010 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}// Include the abstract baseif (!class_exists('acm_memory')){	require("{$phpbb_root_path}includes/acm/acm_memory.$phpEx");}/*** ACM for WinCache* @package acm*/class acm extends acm_memory{	var $extension = 'wincache';	/**	* Purge cache data	*	* @return void	*/	function purge()	{		wincache_ucache_clear();		parent::purge();	}	/**	* Fetch an item from the cache	*	* @access protected	* @param string $var Cache key	* @return mixed Cached data	*/	function _read($var)	{		$success = false;		$result = wincache_ucache_get($this->key_prefix . $var, $success);		return ($success) ? $result : false;	}	/**	* Store data in the cache	*	* @access protected	* @param string $var Cache key	* @param mixed $data Data to store	* @param int $ttl Time-to-live of cached data	* @return bool True if the operation succeeded	*/	function _write($var, $data, $ttl = 2592000)	{		return wincache_ucache_set($this->key_prefix . $var, $data, $ttl);	}	/**	* Remove an item from the cache	*	* @access protected	* @param string $var Cache key	* @return bool True if the operation succeeded	*/	function _delete($var)	{		return wincache_ucache_delete($this->key_prefix . $var);	}}
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_php_info_info{	function module()	{		return array(			'filename'	=> 'acp_php_info',			'title'		=> 'ACP_PHP_INFO',			'version'	=> '1.0.0',			'modes'		=> array(				'info'		=> array('title' => 'ACP_PHP_INFO', 'auth' => 'acl_a_phpinfo', 'cat' => array('ACP_GENERAL_TASKS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package install* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/if ( !defined('IN_INSTALL') ){	// Someone has tried to access the file direct. This is not a good idea, so exit	exit;}if (!empty($setmodules)){	$module[] = array(		'module_type'		=> 'install',		'module_title'		=> 'OVERVIEW',		'module_filename'	=> substr(basename(__FILE__), 0, -strlen($phpEx)-1),		'module_order'		=> 0,		'module_subs'		=> array('INTRO', 'LICENSE', 'SUPPORT'),		'module_stages'		=> '',		'module_reqs'		=> ''	);}/*** Main Tab - Installation* @package install*/class install_main extends module{	function install_main(&$p_master)	{		$this->p_master = &$p_master;	}	function main($mode, $sub)	{		global $lang, $template, $language;		switch ($sub)		{			case 'intro' :				$title = $lang['SUB_INTRO'];				$body = $lang['OVERVIEW_BODY'];			break;			case 'license' :				$title = $lang['GPL'];				$body = implode("<br/>\n", file('../docs/COPYING'));			break;			case 'support' :				$title = $lang['SUB_SUPPORT'];				$body = $lang['SUPPORT_BODY'];			break;		}		$this->tpl_name = 'install_main';		$this->page_title = $title;		$template->assign_vars(array(			'TITLE'		=> $title,			'BODY'		=> $body,			'S_LANG_SELECT'	=> '<select id="language" name="language">' . $this->p_master->inst_language_select($language) . '</select>',		));	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);include($phpbb_root_path . 'includes/functions_posting.' . $phpEx);include($phpbb_root_path . 'includes/functions_display.' . $phpEx);include($phpbb_root_path . 'includes/message_parser.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);// Grab only parameters needed here$post_id	= request_var('p', 0);$topic_id	= request_var('t', 0);$forum_id	= request_var('f', 0);$draft_id	= request_var('d', 0);$lastclick	= request_var('lastclick', 0);$submit		= (isset($_POST['post'])) ? true : false;$preview	= (isset($_POST['preview'])) ? true : false;$save		= (isset($_POST['save'])) ? true : false;$load		= (isset($_POST['load'])) ? true : false;$delete		= (isset($_POST['delete'])) ? true : false;$cancel		= (isset($_POST['cancel']) && !isset($_POST['save'])) ? true : false;$refresh	= (isset($_POST['add_file']) || isset($_POST['delete_file']) || isset($_POST['full_editor']) || isset($_POST['cancel_unglobalise']) || $save || $load) ? true : false;$mode		= ($delete && !$preview && !$refresh && $submit) ? 'delete' : request_var('mode', '');$error = $post_data = array();$current_time = time();// Was cancel pressed? If so then redirect to the appropriate pageif ($cancel || ($current_time - $lastclick < 2 && $submit)){	$f = ($forum_id) ? 'f=' . $forum_id . '&amp;' : '';	$redirect = ($post_id) ? append_sid("{$phpbb_root_path}viewtopic.$phpEx", $f . 'p=' . $post_id) . '#p' . $post_id : (($topic_id) ? append_sid("{$phpbb_root_path}viewtopic.$phpEx", $f . 't=' . $topic_id) : (($forum_id) ? append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id) : append_sid("{$phpbb_root_path}index.$phpEx")));	redirect($redirect);}if (in_array($mode, array('post', 'reply', 'quote', 'edit', 'delete')) && !$forum_id){	trigger_error('NO_FORUM');}// We need to know some basic information in all cases before we do anything.switch ($mode){	case 'post':		$sql = 'SELECT *			FROM ' . FORUMS_TABLE . "			WHERE forum_id = $forum_id";	break;	case 'bump':	case 'reply':		if (!$topic_id)		{			trigger_error('NO_TOPIC');		}		// Force forum id		$sql = 'SELECT forum_id			FROM ' . TOPICS_TABLE . '			WHERE topic_id = ' . $topic_id;		$result = $db->sql_query($sql);		$f_id = (int) $db->sql_fetchfield('forum_id');		$db->sql_freeresult($result);		$forum_id = (!$f_id) ? $forum_id : $f_id;		$sql = 'SELECT f.*, t.*			FROM ' . TOPICS_TABLE . ' t, ' . FORUMS_TABLE . " f			WHERE t.topic_id = $topic_id				AND (f.forum_id = t.forum_id					OR f.forum_id = $forum_id)" .			(($auth->acl_get('m_approve', $forum_id)) ? '' : 'AND t.topic_approved = 1');	break;	case 'quote':	case 'edit':	case 'delete':		if (!$post_id)		{			$user->setup('posting');			trigger_error('NO_POST');		}		// Force forum id		$sql = 'SELECT forum_id			FROM ' . POSTS_TABLE . '			WHERE post_id = ' . $post_id;		$result = $db->sql_query($sql);		$f_id = (int) $db->sql_fetchfield('forum_id');		$db->sql_freeresult($result);		$forum_id = (!$f_id) ? $forum_id : $f_id;		$sql = 'SELECT f.*, t.*, p.*, u.username, u.username_clean, u.user_sig, u.user_sig_bbcode_uid, u.user_sig_bbcode_bitfield			FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . ' t, ' . FORUMS_TABLE . ' f, ' . USERS_TABLE . " u			WHERE p.post_id = $post_id				AND t.topic_id = p.topic_id				AND u.user_id = p.poster_id				AND (f.forum_id = t.forum_id					OR f.forum_id = $forum_id)" .				(($auth->acl_get('m_approve', $forum_id)) ? '' : 'AND p.post_approved = 1');	break;	case 'smilies':		$sql = '';		generate_smilies('window', $forum_id);	break;	case 'popup':		if ($forum_id)		{			$sql = 'SELECT forum_style				FROM ' . FORUMS_TABLE . '				WHERE forum_id = ' . $forum_id;		}		else		{			upload_popup();			return;		}	break;	default:		$sql = '';	break;}if (!$sql){	$user->setup('posting');	trigger_error('NO_POST_MODE');}$result = $db->sql_query($sql);$post_data = $db->sql_fetchrow($result);$db->sql_freeresult($result);if (!$post_data){	if (!($mode == 'post' || $mode == 'bump' || $mode == 'reply'))	{		$user->setup('posting');	}	trigger_error(($mode == 'post' || $mode == 'bump' || $mode == 'reply') ? 'NO_TOPIC' : 'NO_POST');}// Not able to reply to unapproved posts/topics// TODO: add more descriptive language keyif ($auth->acl_get('m_approve', $forum_id) && ((($mode == 'reply' || $mode == 'bump') && !$post_data['topic_approved']) || ($mode == 'quote' && !$post_data['post_approved']))){	trigger_error(($mode == 'reply' || $mode == 'bump') ? 'TOPIC_UNAPPROVED' : 'POST_UNAPPROVED');}if ($mode == 'popup'){	upload_popup($post_data['forum_style']);	return;}$user->setup(array('posting', 'mcp', 'viewtopic'), $post_data['forum_style']);if ($config['enable_post_confirm'] && !$user->data['is_registered']){	include($phpbb_root_path . 'includes/captcha/captcha_factory.' . $phpEx);	$captcha =& phpbb_captcha_factory::get_instance($config['captcha_plugin']);	$captcha->init(CONFIRM_POST);}// Use post_row values in favor of submitted ones...$forum_id	= (!empty($post_data['forum_id'])) ? (int) $post_data['forum_id'] : (int) $forum_id;$topic_id	= (!empty($post_data['topic_id'])) ? (int) $post_data['topic_id'] : (int) $topic_id;$post_id	= (!empty($post_data['post_id'])) ? (int) $post_data['post_id'] : (int) $post_id;// Need to login to passworded forum first?if ($post_data['forum_password']){	login_forum_box(array(		'forum_id'			=> $forum_id,		'forum_password'	=> $post_data['forum_password'])	);}// Check permissionsif ($user->data['is_bot']){	redirect(append_sid("{$phpbb_root_path}index.$phpEx"));}// Is the user able to read within this forum?if (!$auth->acl_get('f_read', $forum_id)){	if ($user->data['user_id'] != ANONYMOUS)	{		trigger_error('USER_CANNOT_READ');	}	login_box('', $user->lang['LOGIN_EXPLAIN_POST']);}// Permission to do the action asked?$is_authed = false;switch ($mode){	case 'post':		if ($auth->acl_get('f_post', $forum_id))		{			$is_authed = true;		}	break;	case 'bump':		if ($auth->acl_get('f_bump', $forum_id))		{			$is_authed = true;		}	break;	case 'quote':		$post_data['post_edit_locked'] = 0;	// no break;	case 'reply':		if ($auth->acl_get('f_reply', $forum_id))		{			$is_authed = true;		}	break;	case 'edit':		if ($user->data['is_registered'] && $auth->acl_gets('f_edit', 'm_edit', $forum_id))		{			$is_authed = true;		}	break;	case 'delete':		if ($user->data['is_registered'] && $auth->acl_gets('f_delete', 'm_delete', $forum_id))		{			$is_authed = true;		}	break;}if (!$is_authed){	$check_auth = ($mode == 'quote') ? 'reply' : $mode;	if ($user->data['is_registered'])	{		trigger_error('USER_CANNOT_' . strtoupper($check_auth));	}	login_box('', $user->lang['LOGIN_EXPLAIN_' . strtoupper($mode)]);}// Is the user able to post within this forum?if ($post_data['forum_type'] != FORUM_POST && in_array($mode, array('post', 'bump', 'quote', 'reply'))){	trigger_error('USER_CANNOT_FORUM_POST');}// Forum/Topic locked?if (($post_data['forum_status'] == ITEM_LOCKED || (isset($post_data['topic_status']) && $post_data['topic_status'] == ITEM_LOCKED)) && !$auth->acl_get('m_edit', $forum_id)){	trigger_error(($post_data['forum_status'] == ITEM_LOCKED) ? 'FORUM_LOCKED' : 'TOPIC_LOCKED');}// Can we edit this post ... if we're a moderator with rights then always yes// else it depends on editing times, lock status and if we're the correct userif ($mode == 'edit' && !$auth->acl_get('m_edit', $forum_id)){	if ($user->data['user_id'] != $post_data['poster_id'])	{		trigger_error('USER_CANNOT_EDIT');	}	if (!($post_data['post_time'] > time() - ($config['edit_time'] * 60) || !$config['edit_time']))	{		trigger_error('CANNOT_EDIT_TIME');	}	if ($post_data['post_edit_locked'])	{		trigger_error('CANNOT_EDIT_POST_LOCKED');	}}// Handle delete mode...if ($mode == 'delete'){	handle_post_delete($forum_id, $topic_id, $post_id, $post_data);	return;}// Handle bump mode...if ($mode == 'bump'){	if ($bump_time = bump_topic_allowed($forum_id, $post_data['topic_bumped'], $post_data['topic_last_post_time'], $post_data['topic_poster'], $post_data['topic_last_poster_id'])	   && check_link_hash(request_var('hash', ''), "topic_{$post_data['topic_id']}"))	{		$meta_url = phpbb_bump_topic($forum_id, $topic_id, $post_data, $current_time);		meta_refresh(3, $meta_url);		$message = $user->lang['TOPIC_BUMPED'] . '<br /><br />' . sprintf($user->lang['VIEW_MESSAGE'], '<a href="' . $meta_url . '">', '</a>');		$message .= '<br /><br />' . sprintf($user->lang['RETURN_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id) . '">', '</a>');		trigger_error($message);	}	trigger_error('BUMP_ERROR');}// Subject length limiting to 60 characters if first post...if ($mode == 'post' || ($mode == 'edit' && $post_data['topic_first_post_id'] == $post_data['post_id'])){	$template->assign_var('S_NEW_MESSAGE', true);}// Determine some varsif (isset($post_data['poster_id']) && $post_data['poster_id'] == ANONYMOUS){	$post_data['quote_username'] = (!empty($post_data['post_username'])) ? $post_data['post_username'] : $user->lang['GUEST'];}else{	$post_data['quote_username'] = isset($post_data['username']) ? $post_data['username'] : '';}$post_data['post_edit_locked']	= (isset($post_data['post_edit_locked'])) ? (int) $post_data['post_edit_locked'] : 0;$post_data['post_subject_md5']	= (isset($post_data['post_subject']) && $mode == 'edit') ? md5($post_data['post_subject']) : '';$post_data['post_subject']		= (in_array($mode, array('quote', 'edit'))) ? $post_data['post_subject'] : ((isset($post_data['topic_title'])) ? $post_data['topic_title'] : '');$post_data['topic_time_limit']	= (isset($post_data['topic_time_limit'])) ? (($post_data['topic_time_limit']) ? (int) $post_data['topic_time_limit'] / 86400 : (int) $post_data['topic_time_limit']) : 0;$post_data['poll_length']		= (!empty($post_data['poll_length'])) ? (int) $post_data['poll_length'] / 86400 : 0;$post_data['poll_start']		= (!empty($post_data['poll_start'])) ? (int) $post_data['poll_start'] : 0;$post_data['icon_id']			= (!isset($post_data['icon_id']) || in_array($mode, array('quote', 'reply'))) ? 0 : (int) $post_data['icon_id'];$post_data['poll_options']		= array();// Get Poll Dataif ($post_data['poll_start']){	$sql = 'SELECT poll_option_text		FROM ' . POLL_OPTIONS_TABLE . "		WHERE topic_id = $topic_id		ORDER BY poll_option_id";	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$post_data['poll_options'][] = trim($row['poll_option_text']);	}	$db->sql_freeresult($result);}if ($mode == 'edit'){	$original_poll_data = array(		'poll_title'		=> $post_data['poll_title'],		'poll_length'		=> $post_data['poll_length'],		'poll_max_options'	=> $post_data['poll_max_options'],		'poll_option_text'	=> implode("\n", $post_data['poll_options']),		'poll_start'		=> $post_data['poll_start'],		'poll_last_vote'	=> $post_data['poll_last_vote'],		'poll_vote_change'	=> $post_data['poll_vote_change'],	);}$orig_poll_options_size = sizeof($post_data['poll_options']);$message_parser = new parse_message();if (isset($post_data['post_text'])){	$message_parser->message = &$post_data['post_text'];	unset($post_data['post_text']);}// Set some default variables$uninit = array('post_attachment' => 0, 'poster_id' => $user->data['user_id'], 'enable_magic_url' => 0, 'topic_status' => 0, 'topic_type' => POST_NORMAL, 'post_subject' => '', 'topic_title' => '', 'post_time' => 0, 'post_edit_reason' => '', 'notify_set' => 0);foreach ($uninit as $var_name => $default_value){	if (!isset($post_data[$var_name]))	{		$post_data[$var_name] = $default_value;	}}unset($uninit);// Always check if the submitted attachment data is valid and belongs to the user.// Further down (especially in submit_post()) we do not check this again.$message_parser->get_submitted_attachment_data($post_data['poster_id']);if ($post_data['post_attachment'] && !$submit && !$refresh && !$preview && $mode == 'edit'){	// Do not change to SELECT *	$sql = 'SELECT attach_id, is_orphan, attach_comment, real_filename		FROM ' . ATTACHMENTS_TABLE . "		WHERE post_msg_id = $post_id			AND in_message = 0			AND is_orphan = 0		ORDER BY filetime DESC";	$result = $db->sql_query($sql);	$message_parser->attachment_data = array_merge($message_parser->attachment_data, $db->sql_fetchrowset($result));	$db->sql_freeresult($result);}if ($post_data['poster_id'] == ANONYMOUS){	$post_data['username'] = ($mode == 'quote' || $mode == 'edit') ? trim($post_data['post_username']) : '';}else{	$post_data['username'] = ($mode == 'quote' || $mode == 'edit') ? trim($post_data['username']) : '';}$post_data['enable_urls'] = $post_data['enable_magic_url'];if ($mode != 'edit'){	$post_data['enable_sig']		= ($config['allow_sig'] && $user->optionget('attachsig')) ? true: false;	$post_data['enable_smilies']	= ($config['allow_smilies'] && $user->optionget('smilies')) ? true : false;	$post_data['enable_bbcode']		= ($config['allow_bbcode'] && $user->optionget('bbcode')) ? true : false;	$post_data['enable_urls']		= true;}$post_data['enable_magic_url'] = $post_data['drafts'] = false;// User own some drafts?if ($user->data['is_registered'] && $auth->acl_get('u_savedrafts') && ($mode == 'reply' || $mode == 'post' || $mode == 'quote')){	$sql = 'SELECT draft_id		FROM ' . DRAFTS_TABLE . '		WHERE user_id = ' . $user->data['user_id'] .			(($forum_id) ? ' AND forum_id = ' . (int) $forum_id : '') .			(($topic_id) ? ' AND topic_id = ' . (int) $topic_id : '') .			(($draft_id) ? " AND draft_id <> $draft_id" : '');	$result = $db->sql_query_limit($sql, 1);	if ($db->sql_fetchrow($result))	{		$post_data['drafts'] = true;	}	$db->sql_freeresult($result);}$check_value = (($post_data['enable_bbcode']+1) << 8) + (($post_data['enable_smilies']+1) << 4) + (($post_data['enable_urls']+1) << 2) + (($post_data['enable_sig']+1) << 1);// Check if user is watching this topicif ($mode != 'post' && $config['allow_topic_notify'] && $user->data['is_registered']){	$sql = 'SELECT topic_id		FROM ' . TOPICS_WATCH_TABLE . '		WHERE topic_id = ' . $topic_id . '			AND user_id = ' . $user->data['user_id'];	$result = $db->sql_query($sql);	$post_data['notify_set'] = (int) $db->sql_fetchfield('topic_id');	$db->sql_freeresult($result);}// Do we want to edit our post ?if ($mode == 'edit' && $post_data['bbcode_uid']){	$message_parser->bbcode_uid = $post_data['bbcode_uid'];}// HTML, BBCode, Smilies, Images and Flash status$bbcode_status	= ($config['allow_bbcode'] && $auth->acl_get('f_bbcode', $forum_id)) ? true : false;$smilies_status	= ($config['allow_smilies'] && $auth->acl_get('f_smilies', $forum_id)) ? true : false;$img_status		= ($bbcode_status && $auth->acl_get('f_img', $forum_id)) ? true : false;$url_status		= ($config['allow_post_links']) ? true : false;$flash_status	= ($bbcode_status && $auth->acl_get('f_flash', $forum_id) && $config['allow_post_flash']) ? true : false;$quote_status	= true;// Save Draftif ($save && $user->data['is_registered'] && $auth->acl_get('u_savedrafts') && ($mode == 'reply' || $mode == 'post' || $mode == 'quote')){	$subject = utf8_normalize_nfc(request_var('subject', '', true));	$subject = (!$subject && $mode != 'post') ? $post_data['topic_title'] : $subject;	$message = utf8_normalize_nfc(request_var('message', '', true));	if ($subject && $message)	{		if (confirm_box(true))		{			$sql = 'INSERT INTO ' . DRAFTS_TABLE . ' ' . $db->sql_build_array('INSERT', array(				'user_id'		=> (int) $user->data['user_id'],				'topic_id'		=> (int) $topic_id,				'forum_id'		=> (int) $forum_id,				'save_time'		=> (int) $current_time,				'draft_subject'	=> (string) $subject,				'draft_message'	=> (string) $message)			);			$db->sql_query($sql);			$meta_info = ($mode == 'post') ? append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id) : append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id");			meta_refresh(3, $meta_info);			$message = $user->lang['DRAFT_SAVED'] . '<br /><br />';			$message .= ($mode != 'post') ? sprintf($user->lang['RETURN_TOPIC'], '<a href="' . $meta_info . '">', '</a>') . '<br /><br />' : '';			$message .= sprintf($user->lang['RETURN_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id) . '">', '</a>');			trigger_error($message);		}		else		{			$s_hidden_fields = build_hidden_fields(array(				'mode'		=> $mode,				'save'		=> true,				'f'			=> $forum_id,				't'			=> $topic_id,				'subject'	=> $subject,				'message'	=> $message,				'attachment_data' => $message_parser->attachment_data,				)			);			$hidden_fields = array(				'icon_id'			=> 0,				'disable_bbcode'	=> false,				'disable_smilies'	=> false,				'disable_magic_url'	=> false,				'attach_sig'		=> true,				'lock_topic'		=> false,				'topic_type'		=> POST_NORMAL,				'topic_time_limit'	=> 0,				'poll_title'		=> '',				'poll_option_text'	=> '',				'poll_max_options'	=> 1,				'poll_length'		=> 0,				'poll_vote_change'	=> false,			);			foreach ($hidden_fields as $name => $default)			{				if (!isset($_POST[$name]))				{					// Don't include it, if its not available					unset($hidden_fields[$name]);					continue;				}				if (is_bool($default))				{					// Use the string representation					$hidden_fields[$name] = request_var($name, '');				}				else				{					$hidden_fields[$name] = request_var($name, $default);				}			}			$s_hidden_fields .= build_hidden_fields($hidden_fields);			confirm_box(false, 'SAVE_DRAFT', $s_hidden_fields);		}	}	else	{		if (utf8_clean_string($subject) === '')		{			$error[] = $user->lang['EMPTY_SUBJECT'];		}		if (utf8_clean_string($message) === '')		{			$error[] = $user->lang['TOO_FEW_CHARS'];		}	}	unset($subject, $message);}// Load requested Draftif ($draft_id && ($mode == 'reply' || $mode == 'quote' || $mode == 'post') && $user->data['is_registered'] && $auth->acl_get('u_savedrafts')){	$sql = 'SELECT draft_subject, draft_message		FROM ' . DRAFTS_TABLE . "		WHERE draft_id = $draft_id			AND user_id = " . $user->data['user_id'];	$result = $db->sql_query_limit($sql, 1);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		$post_data['post_subject'] = $row['draft_subject'];		$message_parser->message = $row['draft_message'];		$template->assign_var('S_DRAFT_LOADED', true);	}	else	{		$draft_id = 0;	}}// Load draft overviewif ($load && ($mode == 'reply' || $mode == 'quote' || $mode == 'post') && $post_data['drafts']){	load_drafts($topic_id, $forum_id);}if ($submit || $preview || $refresh){	$post_data['topic_cur_post_id']	= request_var('topic_cur_post_id', 0);	$post_data['post_subject']		= utf8_normalize_nfc(request_var('subject', '', true));	$message_parser->message		= utf8_normalize_nfc(request_var('message', '', true));	$post_data['username']			= utf8_normalize_nfc(request_var('username', $post_data['username'], true));	$post_data['post_edit_reason']	= (!empty($_POST['edit_reason']) && $mode == 'edit' && $auth->acl_get('m_edit', $forum_id)) ? utf8_normalize_nfc(request_var('edit_reason', '', true)) : '';	$post_data['orig_topic_type']	= $post_data['topic_type'];	$post_data['topic_type']		= request_var('topic_type', (($mode != 'post') ? (int) $post_data['topic_type'] : POST_NORMAL));	$post_data['topic_time_limit']	= request_var('topic_time_limit', (($mode != 'post') ? (int) $post_data['topic_time_limit'] : 0));	if ($post_data['enable_icons'] && $auth->acl_get('f_icons', $forum_id))	{		$post_data['icon_id'] = request_var('icon', (int) $post_data['icon_id']);	}	$post_data['enable_bbcode']		= (!$bbcode_status || isset($_POST['disable_bbcode'])) ? false : true;	$post_data['enable_smilies']	= (!$smilies_status || isset($_POST['disable_smilies'])) ? false : true;	$post_data['enable_urls']		= (isset($_POST['disable_magic_url'])) ? 0 : 1;	$post_data['enable_sig']		= (!$config['allow_sig'] || !$auth->acl_get('f_sigs', $forum_id) || !$auth->acl_get('u_sig')) ? false : ((isset($_POST['attach_sig']) && $user->data['is_registered']) ? true : false);	if ($config['allow_topic_notify'] && $user->data['is_registered'])	{		$notify = (isset($_POST['notify'])) ? true : false;	}	else	{		$notify = false;	}	$topic_lock			= (isset($_POST['lock_topic'])) ? true : false;	$post_lock			= (isset($_POST['lock_post'])) ? true : false;	$poll_delete		= (isset($_POST['poll_delete'])) ? true : false;	if ($submit)	{		$status_switch = (($post_data['enable_bbcode']+1) << 8) + (($post_data['enable_smilies']+1) << 4) + (($post_data['enable_urls']+1) << 2) + (($post_data['enable_sig']+1) << 1);		$status_switch = ($status_switch != $check_value);	}	else	{		$status_switch = 1;	}	// Delete Poll	if ($poll_delete && $mode == 'edit' && sizeof($post_data['poll_options']) &&		((!$post_data['poll_last_vote'] && $post_data['poster_id'] == $user->data['user_id'] && $auth->acl_get('f_delete', $forum_id)) || $auth->acl_get('m_delete', $forum_id)))	{		if ($submit && check_form_key('posting'))		{			$sql = 'DELETE FROM ' . POLL_OPTIONS_TABLE . "				WHERE topic_id = $topic_id";			$db->sql_query($sql);			$sql = 'DELETE FROM ' . POLL_VOTES_TABLE . "				WHERE topic_id = $topic_id";			$db->sql_query($sql);			$topic_sql = array(				'poll_title'		=> '',				'poll_start' 		=> 0,				'poll_length'		=> 0,				'poll_last_vote'	=> 0,				'poll_max_options'	=> 0,				'poll_vote_change'	=> 0			);			$sql = 'UPDATE ' . TOPICS_TABLE . '				SET ' . $db->sql_build_array('UPDATE', $topic_sql) . "				WHERE topic_id = $topic_id";			$db->sql_query($sql);		}		$post_data['poll_title'] = $post_data['poll_option_text'] = '';		$post_data['poll_vote_change'] = $post_data['poll_max_options'] = $post_data['poll_length'] = 0;	}	else	{		$post_data['poll_title']		= utf8_normalize_nfc(request_var('poll_title', '', true));		$post_data['poll_length']		= request_var('poll_length', 0);		$post_data['poll_option_text']	= utf8_normalize_nfc(request_var('poll_option_text', '', true));		$post_data['poll_max_options']	= request_var('poll_max_options', 1);		$post_data['poll_vote_change']	= ($auth->acl_get('f_votechg', $forum_id) && $auth->acl_get('f_vote', $forum_id) && isset($_POST['poll_vote_change'])) ? 1 : 0;	}	// If replying/quoting and last post id has changed	// give user option to continue submit or return to post	// notify and show user the post made between his request and the final submit	if (($mode == 'reply' || $mode == 'quote') && $post_data['topic_cur_post_id'] && $post_data['topic_cur_post_id'] != $post_data['topic_last_post_id'])	{		// Only do so if it is allowed forum-wide		if ($post_data['forum_flags'] & FORUM_FLAG_POST_REVIEW)		{			if (topic_review($topic_id, $forum_id, 'post_review', $post_data['topic_cur_post_id']))			{				$template->assign_var('S_POST_REVIEW', true);			}			$submit = false;			$refresh = true;		}	}	// Parse Attachments - before checksum is calculated	$message_parser->parse_attachments('fileupload', $mode, $forum_id, $submit, $preview, $refresh);	// Grab md5 'checksum' of new message	$message_md5 = md5($message_parser->message);	// If editing and checksum has changed we know the post was edited while we're editing	// Notify and show user the changed post	if ($mode == 'edit' && $post_data['forum_flags'] & FORUM_FLAG_POST_REVIEW)	{		$edit_post_message_checksum = request_var('edit_post_message_checksum', '');		$edit_post_subject_checksum = request_var('edit_post_subject_checksum', '');		// $post_data['post_checksum'] is the checksum of the post submitted in the meantime		// $message_md5 is the checksum of the post we're about to submit		// $edit_post_message_checksum is the checksum of the post we're editing		// ...		// We make sure nobody else made exactly the same change		// we're about to submit by also checking $message_md5 != $post_data['post_checksum']		if (($edit_post_message_checksum !== '' && $edit_post_message_checksum != $post_data['post_checksum'] && $message_md5 != $post_data['post_checksum'])		 || ($edit_post_subject_checksum !== '' && $edit_post_subject_checksum != $post_data['post_subject_md5'] && md5($post_data['post_subject']) != $post_data['post_subject_md5']))		{			if (topic_review($topic_id, $forum_id, 'post_review_edit', $post_id))			{				$template->assign_vars(array(					'S_POST_REVIEW'			=> true,					'L_POST_REVIEW'			=> $user->lang['POST_REVIEW_EDIT'],					'L_POST_REVIEW_EXPLAIN'	=> $user->lang['POST_REVIEW_EDIT_EXPLAIN'],				));			}			$submit = false;			$refresh = true;		}	}	// Check checksum ... don't re-parse message if the same	$update_message = ($mode != 'edit' || $message_md5 != $post_data['post_checksum'] || $status_switch || strlen($post_data['bbcode_uid']) < BBCODE_UID_LEN) ? true : false;	// Also check if subject got updated...	$update_subject = $mode != 'edit' || ($post_data['post_subject_md5'] && $post_data['post_subject_md5'] != md5($post_data['post_subject']));	// Parse message	if ($update_message)	{		if (sizeof($message_parser->warn_msg))		{			$error[] = implode('<br />', $message_parser->warn_msg);			$message_parser->warn_msg = array();		}		$message_parser->parse($post_data['enable_bbcode'], ($config['allow_post_links']) ? $post_data['enable_urls'] : false, $post_data['enable_smilies'], $img_status, $flash_status, $quote_status, $config['allow_post_links']);		// On a refresh we do not care about message parsing errors		if (sizeof($message_parser->warn_msg) && $refresh)		{			$message_parser->warn_msg = array();		}	}	else	{		$message_parser->bbcode_bitfield = $post_data['bbcode_bitfield'];	}	if ($mode != 'edit' && !$preview && !$refresh && $config['flood_interval'] && !$auth->acl_get('f_ignoreflood', $forum_id))	{		// Flood check		$last_post_time = 0;		if ($user->data['is_registered'])		{			$last_post_time = $user->data['user_lastpost_time'];		}		else		{			$sql = 'SELECT post_time AS last_post_time				FROM ' . POSTS_TABLE . "				WHERE poster_ip = '" . $user->ip . "'					AND post_time > " . ($current_time - $config['flood_interval']);			$result = $db->sql_query_limit($sql, 1);			if ($row = $db->sql_fetchrow($result))			{				$last_post_time = $row['last_post_time'];			}			$db->sql_freeresult($result);		}		if ($last_post_time && ($current_time - $last_post_time) < intval($config['flood_interval']))		{			$error[] = $user->lang['FLOOD_ERROR'];		}	}	// Validate username	if (($post_data['username'] && !$user->data['is_registered']) || ($mode == 'edit' && $post_data['poster_id'] == ANONYMOUS && $post_data['username'] && $post_data['post_username'] && $post_data['post_username'] != $post_data['username']))	{		include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		$user->add_lang('ucp');		if (($result = validate_username($post_data['username'], (!empty($post_data['post_username'])) ? $post_data['post_username'] : '')) !== false)		{			$error[] = $user->lang[$result . '_USERNAME'];		}		if (($result = validate_string($post_data['username'], false, $config['min_name_chars'], $config['max_name_chars'])) !== false)		{			$min_max_amount = ($result == 'TOO_SHORT') ? $config['min_name_chars'] : $config['max_name_chars'];			$error[] = sprintf($user->lang['FIELD_' . $result], $user->lang['USERNAME'], $min_max_amount);		}	}	if ($config['enable_post_confirm'] && !$user->data['is_registered'] && in_array($mode, array('quote', 'post', 'reply')))	{		$captcha_data = array(			'message'	=> utf8_normalize_nfc(request_var('message', '', true)),			'subject'	=> utf8_normalize_nfc(request_var('subject', '', true)),			'username'	=> utf8_normalize_nfc(request_var('username', '', true)),		);		$vc_response = $captcha->validate($captcha_data);		if ($vc_response)		{			$error[] = $vc_response;		}	}	// check form	if (($submit || $preview) && !check_form_key('posting'))	{		$error[] = $user->lang['FORM_INVALID'];	}	// Parse subject	if (!$preview && !$refresh && utf8_clean_string($post_data['post_subject']) === '' && ($mode == 'post' || ($mode == 'edit' && $post_data['topic_first_post_id'] == $post_id)))	{		$error[] = $user->lang['EMPTY_SUBJECT'];	}	$post_data['poll_last_vote'] = (isset($post_data['poll_last_vote'])) ? $post_data['poll_last_vote'] : 0;	if ($post_data['poll_option_text'] &&		($mode == 'post' || ($mode == 'edit' && $post_id == $post_data['topic_first_post_id']/* && (!$post_data['poll_last_vote'] || $auth->acl_get('m_edit', $forum_id))*/))		&& $auth->acl_get('f_poll', $forum_id))	{		$poll = array(			'poll_title'		=> $post_data['poll_title'],			'poll_length'		=> $post_data['poll_length'],			'poll_max_options'	=> $post_data['poll_max_options'],			'poll_option_text'	=> $post_data['poll_option_text'],			'poll_start'		=> $post_data['poll_start'],			'poll_last_vote'	=> $post_data['poll_last_vote'],			'poll_vote_change'	=> $post_data['poll_vote_change'],			'enable_bbcode'		=> $post_data['enable_bbcode'],			'enable_urls'		=> $post_data['enable_urls'],			'enable_smilies'	=> $post_data['enable_smilies'],			'img_status'		=> $img_status		);		$message_parser->parse_poll($poll);		$post_data['poll_options'] = (isset($poll['poll_options'])) ? $poll['poll_options'] : array();		$post_data['poll_title'] = (isset($poll['poll_title'])) ? $poll['poll_title'] : '';		/* We reset votes, therefore also allow removing options		if ($post_data['poll_last_vote'] && ($poll['poll_options_size'] < $orig_poll_options_size))		{			$message_parser->warn_msg[] = $user->lang['NO_DELETE_POLL_OPTIONS'];		}*/	}	else if ($mode == 'edit' && $post_id == $post_data['topic_first_post_id'] && $auth->acl_get('f_poll', $forum_id))	{		// The user removed all poll options, this is equal to deleting the poll.		$poll = array(			'poll_title'		=> '',			'poll_length'		=> 0,			'poll_max_options'	=> 0,			'poll_option_text'	=> '',			'poll_start'		=> 0,			'poll_last_vote'	=> 0,			'poll_vote_change'	=> 0,			'poll_options'		=> array(),		);		$post_data['poll_options'] = array();		$post_data['poll_title'] = '';		$post_data['poll_start'] = $post_data['poll_length'] = $post_data['poll_max_options'] = $post_data['poll_last_vote'] = $post_data['poll_vote_change'] = 0;	}	else if (!$auth->acl_get('f_poll', $forum_id) && ($mode == 'edit') && ($post_id == $post_data['topic_first_post_id']) && ($original_poll_data['poll_title'] != ''))	{		// We have a poll but the editing user is not permitted to create/edit it.		// So we just keep the original poll-data.		$poll = array_merge($original_poll_data, array(			'enable_bbcode'		=> $post_data['enable_bbcode'],			'enable_urls'		=> $post_data['enable_urls'],			'enable_smilies'	=> $post_data['enable_smilies'],			'img_status'		=> $img_status,		));		$message_parser->parse_poll($poll);		$post_data['poll_options'] = (isset($poll['poll_options'])) ? $poll['poll_options'] : array();		$post_data['poll_title'] = (isset($poll['poll_title'])) ? $poll['poll_title'] : '';	}	else	{		$poll = array();	}	// Check topic type	if ($post_data['topic_type'] != POST_NORMAL && ($mode == 'post' || ($mode == 'edit' && $post_data['topic_first_post_id'] == $post_id)))	{		switch ($post_data['topic_type'])		{			case POST_GLOBAL:			case POST_ANNOUNCE:				$auth_option = 'f_announce';			break;			case POST_STICKY:				$auth_option = 'f_sticky';			break;			default:				$auth_option = '';			break;		}		if (!$auth->acl_get($auth_option, $forum_id))		{			// There is a special case where a user edits his post whereby the topic type got changed by an admin/mod.			// Another case would be a mod not having sticky permissions for example but edit permissions.			if ($mode == 'edit')			{				// To prevent non-authed users messing around with the topic type we reset it to the original one.				$post_data['topic_type'] = $post_data['orig_topic_type'];			}			else			{				$error[] = $user->lang['CANNOT_POST_' . str_replace('F_', '', strtoupper($auth_option))];			}		}	}	if (sizeof($message_parser->warn_msg))	{		$error[] = implode('<br />', $message_parser->warn_msg);	}	// DNSBL check	if ($config['check_dnsbl'] && !$refresh)	{		if (($dnsbl = $user->check_dnsbl('post')) !== false)		{			$error[] = sprintf($user->lang['IP_BLACKLISTED'], $user->ip, $dnsbl[1]);		}	}	// Store message, sync counters	if (!sizeof($error) && $submit)	{		// Check if we want to de-globalize the topic... and ask for new forum		if ($post_data['topic_type'] != POST_GLOBAL)		{			$sql = 'SELECT topic_type, forum_id				FROM ' . TOPICS_TABLE . "				WHERE topic_id = $topic_id";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($row && !$row['forum_id'] && $row['topic_type'] == POST_GLOBAL)			{				$to_forum_id = request_var('to_forum_id', 0);				if ($to_forum_id)				{					$sql = 'SELECT forum_type						FROM ' . FORUMS_TABLE . '						WHERE forum_id = ' . $to_forum_id;					$result = $db->sql_query($sql);					$forum_type = (int) $db->sql_fetchfield('forum_type');					$db->sql_freeresult($result);					if ($forum_type != FORUM_POST || !$auth->acl_get('f_post', $to_forum_id) || (!$auth->acl_get('m_approve', $to_forum_id) && !$auth->acl_get('f_noapprove', $to_forum_id)))					{						$to_forum_id = 0;					}				}				if (!$to_forum_id)				{					include_once($phpbb_root_path . 'includes/functions_admin.' . $phpEx);					$template->assign_vars(array(						'S_FORUM_SELECT'	=> make_forum_select(false, false, false, true, true, true),						'S_UNGLOBALISE'		=> true)					);					$submit = false;					$refresh = true;				}				else				{					if (!$auth->acl_get('f_post', $to_forum_id))					{						// This will only be triggered if the user tried to trick the forum.						trigger_error('NOT_AUTHORISED');					}					$forum_id = $to_forum_id;				}			}		}		if ($submit)		{			// Lock/Unlock Topic			$change_topic_status = $post_data['topic_status'];			$perm_lock_unlock = ($auth->acl_get('m_lock', $forum_id) || ($auth->acl_get('f_user_lock', $forum_id) && $user->data['is_registered'] && !empty($post_data['topic_poster']) && $user->data['user_id'] == $post_data['topic_poster'] && $post_data['topic_status'] == ITEM_UNLOCKED)) ? true : false;			if ($post_data['topic_status'] == ITEM_LOCKED && !$topic_lock && $perm_lock_unlock)			{				$change_topic_status = ITEM_UNLOCKED;			}			else if ($post_data['topic_status'] == ITEM_UNLOCKED && $topic_lock && $perm_lock_unlock)			{				$change_topic_status = ITEM_LOCKED;			}			if ($change_topic_status != $post_data['topic_status'])			{				$sql = 'UPDATE ' . TOPICS_TABLE . "					SET topic_status = $change_topic_status					WHERE topic_id = $topic_id						AND topic_moved_id = 0";				$db->sql_query($sql);				$user_lock = ($auth->acl_get('f_user_lock', $forum_id) && $user->data['is_registered'] && $user->data['user_id'] == $post_data['topic_poster']) ? 'USER_' : '';				add_log('mod', $forum_id, $topic_id, 'LOG_' . $user_lock . (($change_topic_status == ITEM_LOCKED) ? 'LOCK' : 'UNLOCK'), $post_data['topic_title']);			}			// Lock/Unlock Post Edit			if ($mode == 'edit' && $post_data['post_edit_locked'] == ITEM_LOCKED && !$post_lock && $auth->acl_get('m_edit', $forum_id))			{				$post_data['post_edit_locked'] = ITEM_UNLOCKED;			}			else if ($mode == 'edit' && $post_data['post_edit_locked'] == ITEM_UNLOCKED && $post_lock && $auth->acl_get('m_edit', $forum_id))			{				$post_data['post_edit_locked'] = ITEM_LOCKED;			}			$data = array(				'topic_title'			=> (empty($post_data['topic_title'])) ? $post_data['post_subject'] : $post_data['topic_title'],				'topic_first_post_id'	=> (isset($post_data['topic_first_post_id'])) ? (int) $post_data['topic_first_post_id'] : 0,				'topic_last_post_id'	=> (isset($post_data['topic_last_post_id'])) ? (int) $post_data['topic_last_post_id'] : 0,				'topic_time_limit'		=> (int) $post_data['topic_time_limit'],				'topic_attachment'		=> (isset($post_data['topic_attachment'])) ? (int) $post_data['topic_attachment'] : 0,				'post_id'				=> (int) $post_id,				'topic_id'				=> (int) $topic_id,				'forum_id'				=> (int) $forum_id,				'icon_id'				=> (int) $post_data['icon_id'],				'poster_id'				=> (int) $post_data['poster_id'],				'enable_sig'			=> (bool) $post_data['enable_sig'],				'enable_bbcode'			=> (bool) $post_data['enable_bbcode'],				'enable_smilies'		=> (bool) $post_data['enable_smilies'],				'enable_urls'			=> (bool) $post_data['enable_urls'],				'enable_indexing'		=> (bool) $post_data['enable_indexing'],				'message_md5'			=> (string) $message_md5,				'post_time'				=> (isset($post_data['post_time'])) ? (int) $post_data['post_time'] : $current_time,				'post_checksum'			=> (isset($post_data['post_checksum'])) ? (string) $post_data['post_checksum'] : '',				'post_edit_reason'		=> $post_data['post_edit_reason'],				'post_edit_user'		=> ($mode == 'edit') ? $user->data['user_id'] : ((isset($post_data['post_edit_user'])) ? (int) $post_data['post_edit_user'] : 0),				'forum_parents'			=> $post_data['forum_parents'],				'forum_name'			=> $post_data['forum_name'],				'notify'				=> $notify,				'notify_set'			=> $post_data['notify_set'],				'poster_ip'				=> (isset($post_data['poster_ip'])) ? $post_data['poster_ip'] : $user->ip,				'post_edit_locked'		=> (int) $post_data['post_edit_locked'],				'bbcode_bitfield'		=> $message_parser->bbcode_bitfield,				'bbcode_uid'			=> $message_parser->bbcode_uid,				'message'				=> $message_parser->message,				'attachment_data'		=> $message_parser->attachment_data,				'filename_data'			=> $message_parser->filename_data,				'topic_approved'		=> (isset($post_data['topic_approved'])) ? $post_data['topic_approved'] : false,				'post_approved'			=> (isset($post_data['post_approved'])) ? $post_data['post_approved'] : false,			);			if ($mode == 'edit')			{				$data['topic_replies_real'] = $post_data['topic_replies_real'];				$data['topic_replies'] = $post_data['topic_replies'];			}			// The last parameter tells submit_post if search indexer has to be run			$redirect_url = submit_post($mode, $post_data['post_subject'], $post_data['username'], $post_data['topic_type'], $poll, $data, $update_message, ($update_message || $update_subject) ? true : false);			if ($config['enable_post_confirm'] && !$user->data['is_registered'] && (isset($captcha) && $captcha->is_solved() === true) && ($mode == 'post' || $mode == 'reply' || $mode == 'quote'))			{				$captcha->reset();			}			// Check the permissions for post approval. Moderators are not affected.			if ((!$auth->acl_get('f_noapprove', $data['forum_id']) && !$auth->acl_get('m_approve', $data['forum_id']) && empty($data['force_approved_state'])) || (isset($data['force_approved_state']) && !$data['force_approved_state']))			{				meta_refresh(10, $redirect_url);				$message = ($mode == 'edit') ? $user->lang['POST_EDITED_MOD'] : $user->lang['POST_STORED_MOD'];				$message .= (($user->data['user_id'] == ANONYMOUS) ? '' : ' '. $user->lang['POST_APPROVAL_NOTIFY']);			}			else			{				meta_refresh(3, $redirect_url);				$message = ($mode == 'edit') ? 'POST_EDITED' : 'POST_STORED';				$message = $user->lang[$message] . '<br /><br />' . sprintf($user->lang['VIEW_MESSAGE'], '<a href="' . $redirect_url . '">', '</a>');			}			$message .= '<br /><br />' . sprintf($user->lang['RETURN_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $data['forum_id']) . '">', '</a>');			trigger_error($message);		}	}}// Previewif (!sizeof($error) && $preview){	$post_data['post_time'] = ($mode == 'edit') ? $post_data['post_time'] : $current_time;	$preview_message = $message_parser->format_display($post_data['enable_bbcode'], $post_data['enable_urls'], $post_data['enable_smilies'], false);	$preview_signature = ($mode == 'edit') ? $post_data['user_sig'] : $user->data['user_sig'];	$preview_signature_uid = ($mode == 'edit') ? $post_data['user_sig_bbcode_uid'] : $user->data['user_sig_bbcode_uid'];	$preview_signature_bitfield = ($mode == 'edit') ? $post_data['user_sig_bbcode_bitfield'] : $user->data['user_sig_bbcode_bitfield'];	// Signature	if ($post_data['enable_sig'] && $config['allow_sig'] && $preview_signature && $auth->acl_get('f_sigs', $forum_id))	{		$parse_sig = new parse_message($preview_signature);		$parse_sig->bbcode_uid = $preview_signature_uid;		$parse_sig->bbcode_bitfield = $preview_signature_bitfield;		// Not sure about parameters for bbcode/smilies/urls... in signatures		$parse_sig->format_display($config['allow_sig_bbcode'], $config['allow_sig_links'], $config['allow_sig_smilies']);		$preview_signature = $parse_sig->message;		unset($parse_sig);	}	else	{		$preview_signature = '';	}	$preview_subject = censor_text($post_data['post_subject']);	// Poll Preview	if (!$poll_delete && ($mode == 'post' || ($mode == 'edit' && $post_id == $post_data['topic_first_post_id']/* && (!$post_data['poll_last_vote'] || $auth->acl_get('m_edit', $forum_id))*/))	&& $auth->acl_get('f_poll', $forum_id))	{		$parse_poll = new parse_message($post_data['poll_title']);		$parse_poll->bbcode_uid = $message_parser->bbcode_uid;		$parse_poll->bbcode_bitfield = $message_parser->bbcode_bitfield;		$parse_poll->format_display($post_data['enable_bbcode'], $post_data['enable_urls'], $post_data['enable_smilies']);		if ($post_data['poll_length'])		{			$poll_end = ($post_data['poll_length'] * 86400) + (($post_data['poll_start']) ? $post_data['poll_start'] : time());		}		$template->assign_vars(array(			'S_HAS_POLL_OPTIONS'	=> (sizeof($post_data['poll_options'])),			'S_IS_MULTI_CHOICE'		=> ($post_data['poll_max_options'] > 1) ? true : false,			'POLL_QUESTION'		=> $parse_poll->message,			'L_POLL_LENGTH'		=> ($post_data['poll_length']) ? sprintf($user->lang['POLL_RUN_TILL'], $user->format_date($poll_end)) : '',			'L_MAX_VOTES'		=> ($post_data['poll_max_options'] == 1) ? $user->lang['MAX_OPTION_SELECT'] : sprintf($user->lang['MAX_OPTIONS_SELECT'], $post_data['poll_max_options']))		);		$parse_poll->message = implode("\n", $post_data['poll_options']);		$parse_poll->format_display($post_data['enable_bbcode'], $post_data['enable_urls'], $post_data['enable_smilies']);		$preview_poll_options = explode('<br />', $parse_poll->message);		unset($parse_poll);		foreach ($preview_poll_options as $key => $option)		{			$template->assign_block_vars('poll_option', array(				'POLL_OPTION_CAPTION'	=> $option,				'POLL_OPTION_ID'		=> $key + 1)			);		}		unset($preview_poll_options);	}	// Attachment Preview	if (sizeof($message_parser->attachment_data))	{		$template->assign_var('S_HAS_ATTACHMENTS', true);		$update_count = array();		$attachment_data = $message_parser->attachment_data;		parse_attachments($forum_id, $preview_message, $attachment_data, $update_count, true);		foreach ($attachment_data as $i => $attachment)		{			$template->assign_block_vars('attachment', array(				'DISPLAY_ATTACHMENT'	=> $attachment)			);		}		unset($attachment_data);	}	if (!sizeof($error))	{		$template->assign_vars(array(			'PREVIEW_SUBJECT'		=> $preview_subject,			'PREVIEW_MESSAGE'		=> $preview_message,			'PREVIEW_SIGNATURE'		=> $preview_signature,			'S_DISPLAY_PREVIEW'		=> true)		);	}}// Decode text for message display$post_data['bbcode_uid'] = ($mode == 'quote' && !$preview && !$refresh && !sizeof($error)) ? $post_data['bbcode_uid'] : $message_parser->bbcode_uid;$message_parser->decode_message($post_data['bbcode_uid']);if ($mode == 'quote' && !$submit && !$preview && !$refresh){	if ($config['allow_bbcode'])	{		$message_parser->message = '[quote=&quot;' . $post_data['quote_username'] . '&quot;]' . censor_text(trim($message_parser->message)) . "[/quote]\n";	}	else	{		$offset = 0;		$quote_string = "&gt; ";		$message = censor_text(trim($message_parser->message));		// see if we are nesting. It's easily tricked but should work for one level of nesting		if (strpos($message, "&gt;") !== false)		{			$offset = 10;		}		$message = utf8_wordwrap($message, 75 + $offset, "\n");		$message = $quote_string . $message;		$message = str_replace("\n", "\n" . $quote_string, $message);		$message_parser->message =  $post_data['quote_username'] . " " . $user->lang['WROTE'] . ":\n" . $message . "\n";	}}if (($mode == 'reply' || $mode == 'quote') && !$submit && !$preview && !$refresh){	$post_data['post_subject'] = ((strpos($post_data['post_subject'], 'Re: ') !== 0) ? 'Re: ' : '') . censor_text($post_data['post_subject']);}$attachment_data = $message_parser->attachment_data;$filename_data = $message_parser->filename_data;$post_data['post_text'] = $message_parser->message;if (sizeof($post_data['poll_options']) || !empty($post_data['poll_title'])){	$message_parser->message = $post_data['poll_title'];	$message_parser->bbcode_uid = $post_data['bbcode_uid'];	$message_parser->decode_message();	$post_data['poll_title'] = $message_parser->message;	$message_parser->message = implode("\n", $post_data['poll_options']);	$message_parser->decode_message();	$post_data['poll_options'] = explode("\n", $message_parser->message);}// MAIN POSTING PAGE BEGINS HERE// Forum moderators?$moderators = array();if ($config['load_moderators']){	get_moderators($moderators, $forum_id);}// Generate smiley listinggenerate_smilies('inline', $forum_id);// Generate inline attachment select boxposting_gen_inline_attachments($attachment_data);// Do show topic type selection only in first post.$topic_type_toggle = false;if ($mode == 'post' || ($mode == 'edit' && $post_id == $post_data['topic_first_post_id'])){	$topic_type_toggle = posting_gen_topic_types($forum_id, $post_data['topic_type']);}$s_topic_icons = false;if ($post_data['enable_icons'] && $auth->acl_get('f_icons', $forum_id)){	$s_topic_icons = posting_gen_topic_icons($mode, $post_data['icon_id']);}$bbcode_checked		= (isset($post_data['enable_bbcode'])) ? !$post_data['enable_bbcode'] : (($config['allow_bbcode']) ? !$user->optionget('bbcode') : 1);$smilies_checked	= (isset($post_data['enable_smilies'])) ? !$post_data['enable_smilies'] : (($config['allow_smilies']) ? !$user->optionget('smilies') : 1);$urls_checked		= (isset($post_data['enable_urls'])) ? !$post_data['enable_urls'] : 0;$sig_checked		= $post_data['enable_sig'];$lock_topic_checked	= (isset($topic_lock) && $topic_lock) ? $topic_lock : (($post_data['topic_status'] == ITEM_LOCKED) ? 1 : 0);$lock_post_checked	= (isset($post_lock)) ? $post_lock : $post_data['post_edit_locked'];// If the user is replying or posting and not already watching this topic but set to always being notified we need to overwrite this setting$notify_set			= ($mode != 'edit' && $config['allow_topic_notify'] && $user->data['is_registered'] && !$post_data['notify_set']) ? $user->data['user_notify'] : $post_data['notify_set'];$notify_checked		= (isset($notify)) ? $notify : (($mode == 'post') ? $user->data['user_notify'] : $notify_set);// Page title & action URL$s_action = append_sid("{$phpbb_root_path}posting.$phpEx", "mode=$mode&amp;f=$forum_id");$s_action .= ($topic_id) ? "&amp;t=$topic_id" : '';$s_action .= ($post_id) ? "&amp;p=$post_id" : '';switch ($mode){	case 'post':		$page_title = $user->lang['POST_TOPIC'];	break;	case 'quote':	case 'reply':		$page_title = $user->lang['POST_REPLY'];	break;	case 'delete':	case 'edit':		$page_title = $user->lang['EDIT_POST'];	break;}// Build Navigation Linksgenerate_forum_nav($post_data);// Build Forum Rulesgenerate_forum_rules($post_data);// Posting uses is_solved for legacy reasons. Plugins have to use is_solved to force themselves to be displayed.if ($config['enable_post_confirm'] && !$user->data['is_registered'] && (isset($captcha) && $captcha->is_solved() === false) && ($mode == 'post' || $mode == 'reply' || $mode == 'quote')){	$template->assign_vars(array(		'S_CONFIRM_CODE'			=> true,		'CAPTCHA_TEMPLATE'			=> $captcha->get_template(),	));}$s_hidden_fields = ($mode == 'reply' || $mode == 'quote') ? '<input type="hidden" name="topic_cur_post_id" value="' . $post_data['topic_last_post_id'] . '" />' : '';$s_hidden_fields .= '<input type="hidden" name="lastclick" value="' . $current_time . '" />';$s_hidden_fields .= ($draft_id || isset($_REQUEST['draft_loaded'])) ? '<input type="hidden" name="draft_loaded" value="' . request_var('draft_loaded', $draft_id) . '" />' : '';if ($mode == 'edit'){	$s_hidden_fields .= build_hidden_fields(array(		'edit_post_message_checksum'	=> $post_data['post_checksum'],		'edit_post_subject_checksum'	=> $post_data['post_subject_md5'],	));}// Add the confirm id/code pair to the hidden fields, else an error is displayed on next submit/previewif (isset($captcha) && $captcha->is_solved() !== false){	$s_hidden_fields .= build_hidden_fields($captcha->get_hidden_fields());}$form_enctype = (@ini_get('file_uploads') == '0' || strtolower(@ini_get('file_uploads')) == 'off' || !$config['allow_attachments'] || !$auth->acl_get('u_attach') || !$auth->acl_get('f_attach', $forum_id)) ? '' : ' enctype="multipart/form-data"';add_form_key('posting');// Start assigning vars for main posting page ...$template->assign_vars(array(	'L_POST_A'					=> $page_title,	'L_ICON'					=> ($mode == 'reply' || $mode == 'quote' || ($mode == 'edit' && $post_id != $post_data['topic_first_post_id'])) ? $user->lang['POST_ICON'] : $user->lang['TOPIC_ICON'],	'L_MESSAGE_BODY_EXPLAIN'	=> (intval($config['max_post_chars'])) ? sprintf($user->lang['MESSAGE_BODY_EXPLAIN'], intval($config['max_post_chars'])) : '',	'FORUM_NAME'			=> $post_data['forum_name'],	'FORUM_DESC'			=> ($post_data['forum_desc']) ? generate_text_for_display($post_data['forum_desc'], $post_data['forum_desc_uid'], $post_data['forum_desc_bitfield'], $post_data['forum_desc_options']) : '',	'TOPIC_TITLE'			=> censor_text($post_data['topic_title']),	'MODERATORS'			=> (sizeof($moderators)) ? implode(', ', $moderators[$forum_id]) : '',	'USERNAME'				=> ((!$preview && $mode != 'quote') || $preview) ? $post_data['username'] : '',	'SUBJECT'				=> $post_data['post_subject'],	'MESSAGE'				=> $post_data['post_text'],	'BBCODE_STATUS'			=> ($bbcode_status) ? sprintf($user->lang['BBCODE_IS_ON'], '<a href="' . append_sid("{$phpbb_root_path}faq.$phpEx", 'mode=bbcode') . '">', '</a>') : sprintf($user->lang['BBCODE_IS_OFF'], '<a href="' . append_sid("{$phpbb_root_path}faq.$phpEx", 'mode=bbcode') . '">', '</a>'),	'IMG_STATUS'			=> ($img_status) ? $user->lang['IMAGES_ARE_ON'] : $user->lang['IMAGES_ARE_OFF'],	'FLASH_STATUS'			=> ($flash_status) ? $user->lang['FLASH_IS_ON'] : $user->lang['FLASH_IS_OFF'],	'SMILIES_STATUS'		=> ($smilies_status) ? $user->lang['SMILIES_ARE_ON'] : $user->lang['SMILIES_ARE_OFF'],	'URL_STATUS'			=> ($bbcode_status && $url_status) ? $user->lang['URL_IS_ON'] : $user->lang['URL_IS_OFF'],	'MAX_FONT_SIZE'			=> (int) $config['max_post_font_size'],	'MINI_POST_IMG'			=> $user->img('icon_post_target', $user->lang['POST']),	'POST_DATE'				=> ($post_data['post_time']) ? $user->format_date($post_data['post_time']) : '',	'ERROR'					=> (sizeof($error)) ? implode('<br />', $error) : '',	'TOPIC_TIME_LIMIT'		=> (int) $post_data['topic_time_limit'],	'EDIT_REASON'			=> $post_data['post_edit_reason'],	'U_VIEW_FORUM'			=> append_sid("{$phpbb_root_path}viewforum.$phpEx", "f=$forum_id"),	'U_VIEW_TOPIC'			=> ($mode != 'post') ? append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id") : '',	'U_PROGRESS_BAR'		=> append_sid("{$phpbb_root_path}posting.$phpEx", "f=$forum_id&amp;mode=popup"),	'UA_PROGRESS_BAR'		=> addslashes(append_sid("{$phpbb_root_path}posting.$phpEx", "f=$forum_id&amp;mode=popup")),	'S_PRIVMSGS'				=> false,	'S_CLOSE_PROGRESS_WINDOW'	=> (isset($_POST['add_file'])) ? true : false,	'S_EDIT_POST'				=> ($mode == 'edit') ? true : false,	'S_EDIT_REASON'				=> ($mode == 'edit' && $auth->acl_get('m_edit', $forum_id)) ? true : false,	'S_DISPLAY_USERNAME'		=> (!$user->data['is_registered'] || ($mode == 'edit' && $post_data['poster_id'] == ANONYMOUS)) ? true : false,	'S_SHOW_TOPIC_ICONS'		=> $s_topic_icons,	'S_DELETE_ALLOWED'			=> ($mode == 'edit' && (($post_id == $post_data['topic_last_post_id'] && $post_data['poster_id'] == $user->data['user_id'] && $auth->acl_get('f_delete', $forum_id) && !$post_data['post_edit_locked'] && ($post_data['post_time'] > time() - ($config['delete_time'] * 60) || !$config['delete_time'])) || $auth->acl_get('m_delete', $forum_id))) ? true : false,	'S_BBCODE_ALLOWED'			=> ($bbcode_status) ? 1 : 0,	'S_BBCODE_CHECKED'			=> ($bbcode_checked) ? ' checked="checked"' : '',	'S_SMILIES_ALLOWED'			=> $smilies_status,	'S_SMILIES_CHECKED'			=> ($smilies_checked) ? ' checked="checked"' : '',	'S_SIG_ALLOWED'				=> ($auth->acl_get('f_sigs', $forum_id) && $config['allow_sig'] && $user->data['is_registered']) ? true : false,	'S_SIGNATURE_CHECKED'		=> ($sig_checked) ? ' checked="checked"' : '',	'S_NOTIFY_ALLOWED'			=> (!$user->data['is_registered'] || ($mode == 'edit' && $user->data['user_id'] != $post_data['poster_id']) || !$config['allow_topic_notify'] || !$config['email_enable']) ? false : true,	'S_NOTIFY_CHECKED'			=> ($notify_checked) ? ' checked="checked"' : '',	'S_LOCK_TOPIC_ALLOWED'		=> (($mode == 'edit' || $mode == 'reply' || $mode == 'quote') && ($auth->acl_get('m_lock', $forum_id) || ($auth->acl_get('f_user_lock', $forum_id) && $user->data['is_registered'] && !empty($post_data['topic_poster']) && $user->data['user_id'] == $post_data['topic_poster'] && $post_data['topic_status'] == ITEM_UNLOCKED))) ? true : false,	'S_LOCK_TOPIC_CHECKED'		=> ($lock_topic_checked) ? ' checked="checked"' : '',	'S_LOCK_POST_ALLOWED'		=> ($mode == 'edit' && $auth->acl_get('m_edit', $forum_id)) ? true : false,	'S_LOCK_POST_CHECKED'		=> ($lock_post_checked) ? ' checked="checked"' : '',	'S_LINKS_ALLOWED'			=> $url_status,	'S_MAGIC_URL_CHECKED'		=> ($urls_checked) ? ' checked="checked"' : '',	'S_TYPE_TOGGLE'				=> $topic_type_toggle,	'S_SAVE_ALLOWED'			=> ($auth->acl_get('u_savedrafts') && $user->data['is_registered'] && $mode != 'edit') ? true : false,	'S_HAS_DRAFTS'				=> ($auth->acl_get('u_savedrafts') && $user->data['is_registered'] && $post_data['drafts']) ? true : false,	'S_FORM_ENCTYPE'			=> $form_enctype,	'S_BBCODE_IMG'			=> $img_status,	'S_BBCODE_URL'			=> $url_status,	'S_BBCODE_FLASH'		=> $flash_status,	'S_BBCODE_QUOTE'		=> $quote_status,	'S_POST_ACTION'			=> $s_action,	'S_HIDDEN_FIELDS'		=> $s_hidden_fields));// Build custom bbcodes arraydisplay_custom_bbcodes();// Poll entryif (($mode == 'post' || ($mode == 'edit' && $post_id == $post_data['topic_first_post_id']/* && (!$post_data['poll_last_vote'] || $auth->acl_get('m_edit', $forum_id))*/))	&& $auth->acl_get('f_poll', $forum_id)){	$template->assign_vars(array(		'S_SHOW_POLL_BOX'		=> true,		'S_POLL_VOTE_CHANGE'	=> ($auth->acl_get('f_votechg', $forum_id) && $auth->acl_get('f_vote', $forum_id)),		'S_POLL_DELETE'			=> ($mode == 'edit' && sizeof($post_data['poll_options']) && ((!$post_data['poll_last_vote'] && $post_data['poster_id'] == $user->data['user_id'] && $auth->acl_get('f_delete', $forum_id)) || $auth->acl_get('m_delete', $forum_id))),		'S_POLL_DELETE_CHECKED'	=> (!empty($poll_delete)) ? true : false,		'L_POLL_OPTIONS_EXPLAIN'	=> sprintf($user->lang['POLL_OPTIONS_' . (($mode == 'edit') ? 'EDIT_' : '') . 'EXPLAIN'], $config['max_poll_options']),		'VOTE_CHANGE_CHECKED'	=> (!empty($post_data['poll_vote_change'])) ? ' checked="checked"' : '',		'POLL_TITLE'			=> (isset($post_data['poll_title'])) ? $post_data['poll_title'] : '',		'POLL_OPTIONS'			=> (!empty($post_data['poll_options'])) ? implode("\n", $post_data['poll_options']) : '',		'POLL_MAX_OPTIONS'		=> (isset($post_data['poll_max_options'])) ? (int) $post_data['poll_max_options'] : 1,		'POLL_LENGTH'			=> $post_data['poll_length'])	);}// Show attachment box for adding attachments if true$allowed = ($auth->acl_get('f_attach', $forum_id) && $auth->acl_get('u_attach') && $config['allow_attachments'] && $form_enctype);// Attachment entryposting_gen_attachment_entry($attachment_data, $filename_data, $allowed);// Output page ...page_header($page_title, false);$template->set_filenames(array(	'body' => 'posting_body.html'));make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"));// Topic reviewif ($mode == 'reply' || $mode == 'quote'){	if (topic_review($topic_id, $forum_id))	{		$template->assign_var('S_DISPLAY_REVIEW', true);	}}page_footer();/*** Show upload popup (progress bar)*/function upload_popup($forum_style = 0){	global $template, $user;	($forum_style) ? $user->setup('posting', $forum_style) : $user->setup('posting');	page_header($user->lang['PROGRESS_BAR'], false);	$template->set_filenames(array(		'popup'	=> 'posting_progress_bar.html')	);	$template->assign_vars(array(		'PROGRESS_BAR'	=> $user->img('upload_bar', $user->lang['UPLOAD_IN_PROGRESS']))	);	$template->display('popup');	garbage_collection();	exit_handler();}/*** Do the various checks required for removing posts as well as removing it*/function handle_post_delete($forum_id, $topic_id, $post_id, &$post_data){	global $user, $db, $auth, $config;	global $phpbb_root_path, $phpEx;	// If moderator removing post or user itself removing post, present a confirmation screen	if ($auth->acl_get('m_delete', $forum_id) || ($post_data['poster_id'] == $user->data['user_id'] && $user->data['is_registered'] && $auth->acl_get('f_delete', $forum_id) && $post_id == $post_data['topic_last_post_id'] && !$post_data['post_edit_locked'] && ($post_data['post_time'] > time() - ($config['delete_time'] * 60) || !$config['delete_time'])))	{		$s_hidden_fields = build_hidden_fields(array(			'p'		=> $post_id,			'f'		=> $forum_id,			'mode'	=> 'delete')		);		if (confirm_box(true))		{			$data = array(				'topic_first_post_id'	=> $post_data['topic_first_post_id'],				'topic_last_post_id'	=> $post_data['topic_last_post_id'],				'topic_replies_real'	=> $post_data['topic_replies_real'],				'topic_approved'		=> $post_data['topic_approved'],				'topic_type'			=> $post_data['topic_type'],				'post_approved'			=> $post_data['post_approved'],				'post_reported'			=> $post_data['post_reported'],				'post_time'				=> $post_data['post_time'],				'poster_id'				=> $post_data['poster_id'],				'post_postcount'		=> $post_data['post_postcount']			);			$next_post_id = delete_post($forum_id, $topic_id, $post_id, $data);			$post_username = ($post_data['poster_id'] == ANONYMOUS && !empty($post_data['post_username'])) ? $post_data['post_username'] : $post_data['username'];			if ($next_post_id === false)			{				add_log('mod', $forum_id, $topic_id, 'LOG_DELETE_TOPIC', $post_data['topic_title'], $post_username);				$meta_info = append_sid("{$phpbb_root_path}viewforum.$phpEx", "f=$forum_id");				$message = $user->lang['POST_DELETED'];			}			else			{				add_log('mod', $forum_id, $topic_id, 'LOG_DELETE_POST', $post_data['post_subject'], $post_username);				$meta_info = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id&amp;p=$next_post_id") . "#p$next_post_id";				$message = $user->lang['POST_DELETED'] . '<br /><br />' . sprintf($user->lang['RETURN_TOPIC'], '<a href="' . $meta_info . '">', '</a>');			}			meta_refresh(3, $meta_info);			$message .= '<br /><br />' . sprintf($user->lang['RETURN_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id) . '">', '</a>');			trigger_error($message);		}		else		{			confirm_box(false, 'DELETE_POST', $s_hidden_fields);		}	}	// If we are here the user is not able to delete - present the correct error message	if ($post_data['poster_id'] != $user->data['user_id'] && $auth->acl_get('f_delete', $forum_id))	{		trigger_error('DELETE_OWN_POSTS');	}	if ($post_data['poster_id'] == $user->data['user_id'] && $auth->acl_get('f_delete', $forum_id) && $post_id != $post_data['topic_last_post_id'])	{		trigger_error('CANNOT_DELETE_REPLIED');	}	trigger_error('USER_CANNOT_DELETE');}?>
<?php/**** acp_email [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// Email settings$lang = array_merge($lang, array(	'ACP_MASS_EMAIL_EXPLAIN'		=> 'Here you can e-mail a message to either all of your users or all users of a specific group <strong>having the option to receive mass e-mails enabled</strong>. To achieve this an e-mail will be sent out to the administrative e-mail address supplied, with a blind carbon copy sent to all recipients. The default setting is to only include 50 recipients in such an e-mail, for more recipients more e-mails will be sent. If you are emailing a large group of people please be patient after submitting and do not stop the page halfway through. It is normal for a mass emailing to take a long time, you will be notified when the script has completed.',	'ALL_USERS'						=> 'All users',	'COMPOSE'				=> 'Compose',	'EMAIL_SEND_ERROR'		=> 'There were one or more errors while sending the e-mail. Please check the %sError log%s for detailed error messages.',	'EMAIL_SENT'			=> 'This message has been sent.',	'EMAIL_SENT_QUEUE'		=> 'This message has been queued for sending.',	'LOG_SESSION'			=> 'Log mail session to critical log',	'SEND_IMMEDIATELY'		=> 'Send immediately',	'SEND_TO_GROUP'			=> 'Send to group',	'SEND_TO_USERS'			=> 'Send to users',	'SEND_TO_USERS_EXPLAIN'	=> 'Entering names here will override any group selected above. Enter each username on a new line.',	'MAIL_BANNED'			=> 'Mail banned users',	'MAIL_BANNED_EXPLAIN'	=> 'When sending a mass e-mail to a group you can select here whether banned users will also receive the e-mail.',	'MAIL_HIGH_PRIORITY'	=> 'High',	'MAIL_LOW_PRIORITY'		=> 'Low',	'MAIL_NORMAL_PRIORITY'	=> 'Normal',	'MAIL_PRIORITY'			=> 'Mail priority',	'MASS_MESSAGE'			=> 'Your message',	'MASS_MESSAGE_EXPLAIN'	=> 'Please note that you may enter only plain text. All markup will be removed before sending.',	'NO_EMAIL_MESSAGE'		=> 'You must enter a message.',	'NO_EMAIL_SUBJECT'		=> 'You must specify a subject for your message.',));?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);include($phpbb_root_path . 'includes/functions_admin.' . $phpEx);require($phpbb_root_path . 'includes/functions_module.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup('mcp');$module = new p_master();// Setting a variable to let the style designer know where he is...$template->assign_var('S_IN_MCP', true);// Basic parameter data$id = request_var('i', '');if (isset($_REQUEST['mode']) && is_array($_REQUEST['mode'])){	$mode = request_var('mode', array(''));	list($mode, ) = each($mode);}else{	$mode = request_var('mode', '');}// Only Moderators can go beyond this pointif (!$user->data['is_registered']){	if ($user->data['is_bot'])	{		redirect(append_sid("{$phpbb_root_path}index.$phpEx"));	}	login_box('', $user->lang['LOGIN_EXPLAIN_MCP']);}$quickmod = (isset($_REQUEST['quickmod'])) ? true : false;$action = request_var('action', '');$action_ary = request_var('action', array('' => 0));$forum_action = request_var('forum_action', '');if ($forum_action !== '' && !empty($_POST['sort'])){	$action = $forum_action;}if (sizeof($action_ary)){	list($action, ) = each($action_ary);}unset($action_ary);if ($mode == 'topic_logs'){	$id = 'logs';	$quickmod = false;}$post_id = request_var('p', 0);$topic_id = request_var('t', 0);$forum_id = request_var('f', 0);$report_id = request_var('r', 0);$user_id = request_var('u', 0);$username = utf8_normalize_nfc(request_var('username', '', true));if ($post_id){	// We determine the topic and forum id here, to make sure the moderator really has moderative rights on this post	$sql = 'SELECT topic_id, forum_id		FROM ' . POSTS_TABLE . "		WHERE post_id = $post_id";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	$topic_id = (int) $row['topic_id'];	$forum_id = (int) ($row['forum_id']) ? $row['forum_id'] : $forum_id;}else if ($topic_id){	$sql = 'SELECT forum_id		FROM ' . TOPICS_TABLE . "		WHERE topic_id = $topic_id";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	$forum_id = (int) $row['forum_id'];}// If the user doesn't have any moderator powers (globally or locally) he can't access the mcpif (!$auth->acl_getf_global('m_')){	// Except he is using one of the quickmod tools for users	$user_quickmod_actions = array(		'lock'			=> 'f_user_lock',		'make_sticky'	=> 'f_sticky',		'make_announce'	=> 'f_announce',		'make_global'	=> 'f_announce',		'make_normal'	=> array('f_announce', 'f_sticky')	);	$allow_user = false;	if ($quickmod && isset($user_quickmod_actions[$action]) && $user->data['is_registered'] && $auth->acl_gets($user_quickmod_actions[$action], $forum_id))	{		$topic_info = get_topic_data(array($topic_id));		if ($topic_info[$topic_id]['topic_poster'] == $user->data['user_id'])		{			$allow_user = true;		}	}	if (!$allow_user)	{		trigger_error('NOT_AUTHORISED');	}}// if the user cannot read the forum he tries to access then we won't allow mcp access eitherif ($forum_id && !$auth->acl_get('f_read', $forum_id)){	trigger_error('NOT_AUTHORISED');}if ($forum_id){	$module->acl_forum_id = $forum_id;}// Instantiate module system and generate list of available modules$module->list_modules('mcp');if ($quickmod){	$mode = 'quickmod';	switch ($action)	{		case 'lock':		case 'unlock':		case 'lock_post':		case 'unlock_post':		case 'make_sticky':		case 'make_announce':		case 'make_global':		case 'make_normal':		case 'fork':		case 'move':		case 'delete_post':		case 'delete_topic':			$module->load('mcp', 'main', 'quickmod');			return;		break;		case 'topic_logs':			// Reset start parameter if we jumped from the quickmod dropdown			if (request_var('start', 0))			{				$_REQUEST['start'] = 0;			}			$module->set_active('logs', 'topic_logs');		break;		case 'merge_topic':			$module->set_active('main', 'forum_view');		break;		case 'split':		case 'merge':			$module->set_active('main', 'topic_view');		break;		default:			trigger_error("$action not allowed as quickmod", E_USER_ERROR);		break;	}}else{	// Select the active module	$module->set_active($id, $mode);}// Hide some of the options if we don't have the relevant information to use themif (!$post_id){	$module->set_display('main', 'post_details', false);	$module->set_display('warn', 'warn_post', false);}if ($mode == '' || $mode == 'unapproved_topics' || $mode == 'unapproved_posts'){	$module->set_display('queue', 'approve_details', false);}if ($mode == '' || $mode == 'reports' || $mode == 'reports_closed' || $mode == 'pm_reports' || $mode == 'pm_reports_closed' || $mode == 'pm_report_details'){	$module->set_display('reports', 'report_details', false);}if ($mode == '' || $mode == 'reports' || $mode == 'reports_closed' || $mode == 'pm_reports' || $mode == 'pm_reports_closed' || $mode == 'report_details'){	$module->set_display('pm_reports', 'pm_report_details', false);}if (!$topic_id){	$module->set_display('main', 'topic_view', false);	$module->set_display('logs', 'topic_logs', false);}if (!$forum_id){	$module->set_display('main', 'forum_view', false);	$module->set_display('logs', 'forum_logs', false);}if (!$user_id && $username == ''){	$module->set_display('notes', 'user_notes', false);	$module->set_display('warn', 'warn_user', false);}// Load and execute the relevant module$module->load_active();// Assign data to the template engine for the list of modules$module->assign_tpl_vars(append_sid("{$phpbb_root_path}mcp.$phpEx"));// Generate urls for letting the moderation control panel being accessed in different modes$template->assign_vars(array(	'U_MCP'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main'),	'U_MCP_FORUM'	=> ($forum_id) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "i=main&amp;mode=forum_view&amp;f=$forum_id") : '',	'U_MCP_TOPIC'	=> ($forum_id && $topic_id) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "i=main&amp;mode=topic_view&amp;t=$topic_id") : '',	'U_MCP_POST'	=> ($forum_id && $topic_id && $post_id) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "i=main&amp;mode=post_details&amp;t=$topic_id&amp;p=$post_id") : '',));// Generate the page, do not display/query online list$module->display($module->get_page_title(), false);/*** Functions used to generate additional URL paramters*/function _module__url($mode, &$module_row){	return extra_url();}function _module_notes_url($mode, &$module_row){	if ($mode == 'front')	{		return '';	}	global $user_id;	return ($user_id) ? "&amp;u=$user_id" : '';}function _module_warn_url($mode, &$module_row){	if ($mode == 'front' || $mode == 'list')	{		global $forum_id;		return ($forum_id) ? "&amp;f=$forum_id" : '';	}	if ($mode == 'warn_post')	{		global $forum_id, $post_id;		$url_extra = ($forum_id) ? "&amp;f=$forum_id" : '';		$url_extra .= ($post_id) ? "&amp;p=$post_id" : '';		return $url_extra;	}	else	{		global $user_id;		return ($user_id) ? "&amp;u=$user_id" : '';	}}function _module_main_url($mode, &$module_row){	return extra_url();}function _module_logs_url($mode, &$module_row){	return extra_url();}function _module_ban_url($mode, &$module_row){	return extra_url();}function _module_queue_url($mode, &$module_row){	return extra_url();}function _module_reports_url($mode, &$module_row){	return extra_url();}function extra_url(){	global $forum_id, $topic_id, $post_id, $report_id, $user_id;	$url_extra = '';	$url_extra .= ($forum_id) ? "&amp;f=$forum_id" : '';	$url_extra .= ($topic_id) ? "&amp;t=$topic_id" : '';	$url_extra .= ($post_id) ? "&amp;p=$post_id" : '';	$url_extra .= ($user_id) ? "&amp;u=$user_id" : '';	$url_extra .= ($report_id) ? "&amp;r=$report_id" : '';	return $url_extra;}/*** Get simple topic data*/function get_topic_data($topic_ids, $acl_list = false, $read_tracking = false){	global $auth, $db, $config, $user;	static $rowset = array();	$topics = array();	if (!sizeof($topic_ids))	{		return array();	}	// cache might not contain read tracking info, so we can't use it if read	// tracking information is requested	if (!$read_tracking)	{		$cache_topic_ids = array_intersect($topic_ids, array_keys($rowset));		$topic_ids = array_diff($topic_ids, array_keys($rowset));	}	else	{		$cache_topic_ids = array();	}	if (sizeof($topic_ids))	{		$sql_array = array(			'SELECT'	=> 't.*, f.*',			'FROM'		=> array(				TOPICS_TABLE	=> 't',			),			'LEFT_JOIN'	=> array(				array(					'FROM'	=> array(FORUMS_TABLE => 'f'),					'ON'	=> 'f.forum_id = t.forum_id'				)			),			'WHERE'		=> $db->sql_in_set('t.topic_id', $topic_ids)		);		if ($read_tracking && $config['load_db_lastread'])		{			$sql_array['SELECT'] .= ', tt.mark_time, ft.mark_time as forum_mark_time';			$sql_array['LEFT_JOIN'][] = array(				'FROM'	=> array(TOPICS_TRACK_TABLE => 'tt'),				'ON'	=> 'tt.user_id = ' . $user->data['user_id'] . ' AND t.topic_id = tt.topic_id'			);			$sql_array['LEFT_JOIN'][] = array(				'FROM'	=> array(FORUMS_TRACK_TABLE => 'ft'),				'ON'	=> 'ft.user_id = ' . $user->data['user_id'] . ' AND t.forum_id = ft.forum_id'			);		}		$sql = $db->sql_build_query('SELECT', $sql_array);		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if (!$row['forum_id'])			{				// Global Announcement?				$row['forum_id'] = request_var('f', 0);			}			$rowset[$row['topic_id']] = $row;			if ($acl_list && !$auth->acl_gets($acl_list, $row['forum_id']))			{				continue;			}			$topics[$row['topic_id']] = $row;		}		$db->sql_freeresult($result);	}	foreach ($cache_topic_ids as $id)	{		if (!$acl_list || $auth->acl_gets($acl_list, $rowset[$id]['forum_id']))		{			$topics[$id] = $rowset[$id];		}	}	return $topics;}/*** Get simple post data*/function get_post_data($post_ids, $acl_list = false, $read_tracking = false){	global $db, $auth, $config, $user;	$rowset = array();	if (!sizeof($post_ids))	{		return array();	}	$sql_array = array(		'SELECT'	=> 'p.*, u.*, t.*, f.*',		'FROM'		=> array(			USERS_TABLE		=> 'u',			POSTS_TABLE		=> 'p',			TOPICS_TABLE	=> 't',		),		'LEFT_JOIN'	=> array(			array(				'FROM'	=> array(FORUMS_TABLE => 'f'),				'ON'	=> 'f.forum_id = t.forum_id'			)		),		'WHERE'		=> $db->sql_in_set('p.post_id', $post_ids) . '			AND u.user_id = p.poster_id			AND t.topic_id = p.topic_id',	);	if ($read_tracking && $config['load_db_lastread'])	{		$sql_array['SELECT'] .= ', tt.mark_time, ft.mark_time as forum_mark_time';		$sql_array['LEFT_JOIN'][] = array(			'FROM'	=> array(TOPICS_TRACK_TABLE => 'tt'),			'ON'	=> 'tt.user_id = ' . $user->data['user_id'] . ' AND t.topic_id = tt.topic_id'		);		$sql_array['LEFT_JOIN'][] = array(			'FROM'	=> array(FORUMS_TRACK_TABLE => 'ft'),			'ON'	=> 'ft.user_id = ' . $user->data['user_id'] . ' AND t.forum_id = ft.forum_id'		);	}	$sql = $db->sql_build_query('SELECT', $sql_array);	$result = $db->sql_query($sql);	unset($sql_array);	while ($row = $db->sql_fetchrow($result))	{		if (!$row['forum_id'])		{			// Global Announcement?			$row['forum_id'] = request_var('f', 0);		}		if ($acl_list && !$auth->acl_gets($acl_list, $row['forum_id']))		{			continue;		}		if (!$row['post_approved'] && !$auth->acl_get('m_approve', $row['forum_id']))		{			// Moderators without the permission to approve post should at least not see them. ;)			continue;		}		$rowset[$row['post_id']] = $row;	}	$db->sql_freeresult($result);	return $rowset;}/*** Get simple forum data*/function get_forum_data($forum_id, $acl_list = 'f_list', $read_tracking = false){	global $auth, $db, $user, $config;	$rowset = array();	if (!is_array($forum_id))	{		$forum_id = array($forum_id);	}	if (!sizeof($forum_id))	{		return array();	}	if ($read_tracking && $config['load_db_lastread'])	{		$read_tracking_join = ' LEFT JOIN ' . FORUMS_TRACK_TABLE . ' ft ON (ft.user_id = ' . $user->data['user_id'] . '			AND ft.forum_id = f.forum_id)';		$read_tracking_select = ', ft.mark_time';	}	else	{		$read_tracking_join = $read_tracking_select = '';	}	$sql = "SELECT f.* $read_tracking_select		FROM " . FORUMS_TABLE . " f$read_tracking_join		WHERE " . $db->sql_in_set('f.forum_id', $forum_id);	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		if ($acl_list && !$auth->acl_gets($acl_list, $row['forum_id']))		{			continue;		}		if ($auth->acl_get('m_approve', $row['forum_id']))		{			$row['forum_topics'] = $row['forum_topics_real'];		}		$rowset[$row['forum_id']] = $row;	}	$db->sql_freeresult($result);	return $rowset;}/*** Get simple pm data*/function get_pm_data($pm_ids){	global $db, $auth, $config, $user;	$rowset = array();	if (!sizeof($pm_ids))	{		return array();	}	$sql_array = array(		'SELECT'	=> 'p.*, u.*',		'FROM'		=> array(			USERS_TABLE			=> 'u',			PRIVMSGS_TABLE		=> 'p',		),		'WHERE'		=> $db->sql_in_set('p.msg_id', $pm_ids) . '			AND u.user_id = p.author_id',	);	$sql = $db->sql_build_query('SELECT', $sql_array);	$result = $db->sql_query($sql);	unset($sql_array);	while ($row = $db->sql_fetchrow($result))	{		$rowset[$row['msg_id']] = $row;	}	$db->sql_freeresult($result);	return $rowset;}/*** sorting in mcp** @param string $where_sql should either be WHERE (default if ommited) or end with AND or OR** $mode reports and reports_closed: the $where parameters uses aliases p for posts table and r for report table* $mode unapproved_posts: the $where parameters uses aliases p for posts table and t for topic table*/function mcp_sorting($mode, &$sort_days, &$sort_key, &$sort_dir, &$sort_by_sql, &$sort_order_sql, &$total, $forum_id = 0, $topic_id = 0, $where_sql = 'WHERE'){	global $db, $user, $auth, $template;	$sort_days = request_var('st', 0);	$min_time = ($sort_days) ? time() - ($sort_days * 86400) : 0;	switch ($mode)	{		case 'viewforum':			$type = 'topics';			$default_key = 't';			$default_dir = 'd';			$sql = 'SELECT COUNT(topic_id) AS total				FROM ' . TOPICS_TABLE . "				$where_sql forum_id = $forum_id					AND topic_type NOT IN (" . POST_ANNOUNCE . ', ' . POST_GLOBAL . ")					AND topic_last_post_time >= $min_time";			if (!$auth->acl_get('m_approve', $forum_id))			{				$sql .= 'AND topic_approved = 1';			}		break;		case 'viewtopic':			$type = 'posts';			$default_key = 't';			$default_dir = 'a';			$sql = 'SELECT COUNT(post_id) AS total				FROM ' . POSTS_TABLE . "				$where_sql topic_id = $topic_id					AND post_time >= $min_time";			if (!$auth->acl_get('m_approve', $forum_id))			{				$sql .= 'AND post_approved = 1';			}		break;		case 'unapproved_posts':			$type = 'posts';			$default_key = 't';			$default_dir = 'd';			$where_sql .= ($topic_id) ? ' p.topic_id = ' . $topic_id . ' AND' : '';			$sql = 'SELECT COUNT(p.post_id) AS total				FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . " t				$where_sql " . $db->sql_in_set('p.forum_id', ($forum_id) ? array($forum_id) : array_intersect(get_forum_list('f_read'), get_forum_list('m_approve'))) . '					AND p.post_approved = 0					AND t.topic_id = p.topic_id					AND t.topic_first_post_id <> p.post_id';			if ($min_time)			{				$sql .= ' AND post_time >= ' . $min_time;			}		break;		case 'unapproved_topics':			$type = 'topics';			$default_key = 't';			$default_dir = 'd';			$sql = 'SELECT COUNT(topic_id) AS total				FROM ' . TOPICS_TABLE . "				$where_sql " . $db->sql_in_set('forum_id', ($forum_id) ? array($forum_id) : array_intersect(get_forum_list('f_read'), get_forum_list('m_approve'))) . '					AND topic_approved = 0';			if ($min_time)			{				$sql .= ' AND topic_time >= ' . $min_time;			}		break;		case 'pm_reports':		case 'pm_reports_closed':		case 'reports':		case 'reports_closed':			$pm = (strpos($mode, 'pm_') === 0) ? true : false;			$type = ($pm) ? 'pm_reports' : 'reports';			$default_key = 't';			$default_dir = 'd';			$limit_time_sql = ($min_time) ? "AND r.report_time >= $min_time" : '';			if ($topic_id)			{				$where_sql .= ' p.topic_id = ' . $topic_id . ' AND ';			}			else if ($forum_id)			{				$where_sql .= ' p.forum_id = ' . $forum_id . ' AND ';			}			else if (!$pm)			{				$where_sql .= ' ' . $db->sql_in_set('p.forum_id', get_forum_list(array('!f_read', '!m_report')), true, true) . ' AND ';			}			if ($mode == 'reports' || $mode == 'pm_reports')			{				$where_sql .= ' r.report_closed = 0 AND ';			}			else			{				$where_sql .= ' r.report_closed = 1 AND ';			}			if ($pm)			{				$sql = 'SELECT COUNT(r.report_id) AS total					FROM ' . REPORTS_TABLE . ' r, ' . PRIVMSGS_TABLE . " p					$where_sql r.post_id = 0						AND p.msg_id = r.pm_id						$limit_time_sql";			}			else			{				$sql = 'SELECT COUNT(r.report_id) AS total					FROM ' . REPORTS_TABLE . ' r, ' . POSTS_TABLE . " p					$where_sql r.pm_id = 0						AND p.post_id = r.post_id						$limit_time_sql";			}		break;		case 'viewlogs':			$type = 'logs';			$default_key = 't';			$default_dir = 'd';			$sql = 'SELECT COUNT(log_id) AS total				FROM ' . LOG_TABLE . "				$where_sql " . $db->sql_in_set('forum_id', ($forum_id) ? array($forum_id) : array_intersect(get_forum_list('f_read'), get_forum_list('m_'))) . '					AND log_time >= ' . $min_time . '					AND log_type = ' . LOG_MOD;		break;	}	$sort_key = request_var('sk', $default_key);	$sort_dir = request_var('sd', $default_dir);	$sort_dir_text = array('a' => $user->lang['ASCENDING'], 'd' => $user->lang['DESCENDING']);	switch ($type)	{		case 'topics':			$limit_days = array(0 => $user->lang['ALL_TOPICS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);			$sort_by_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 'tt' => $user->lang['TOPIC_TIME'], 'r' => $user->lang['REPLIES'], 's' => $user->lang['SUBJECT'], 'v' => $user->lang['VIEWS']);			$sort_by_sql = array('a' => 't.topic_first_poster_name', 't' => 't.topic_last_post_time', 'tt' => 't.topic_time', 'r' => (($auth->acl_get('m_approve', $forum_id)) ? 't.topic_replies_real' : 't.topic_replies'), 's' => 't.topic_title', 'v' => 't.topic_views');			$limit_time_sql = ($min_time) ? "AND t.topic_last_post_time >= $min_time" : '';		break;		case 'posts':			$limit_days = array(0 => $user->lang['ALL_POSTS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);			$sort_by_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 's' => $user->lang['SUBJECT']);			$sort_by_sql = array('a' => 'u.username_clean', 't' => 'p.post_time', 's' => 'p.post_subject');			$limit_time_sql = ($min_time) ? "AND p.post_time >= $min_time" : '';		break;		case 'reports':			$limit_days = array(0 => $user->lang['ALL_REPORTS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);			$sort_by_text = array('a' => $user->lang['AUTHOR'], 'r' => $user->lang['REPORTER'], 'p' => $user->lang['POST_TIME'], 't' => $user->lang['REPORT_TIME'], 's' => $user->lang['SUBJECT']);			$sort_by_sql = array('a' => 'u.username_clean', 'r' => 'ru.username', 'p' => 'p.post_time', 't' => 'r.report_time', 's' => 'p.post_subject');		break;		case 'pm_reports':			$limit_days = array(0 => $user->lang['ALL_REPORTS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);			$sort_by_text = array('a' => $user->lang['AUTHOR'], 'r' => $user->lang['REPORTER'], 'p' => $user->lang['POST_TIME'], 't' => $user->lang['REPORT_TIME'], 's' => $user->lang['SUBJECT']);			$sort_by_sql = array('a' => 'u.username_clean', 'r' => 'ru.username', 'p' => 'p.message_time', 't' => 'r.report_time', 's' => 'p.message_subject');		break;		case 'logs':			$limit_days = array(0 => $user->lang['ALL_ENTRIES'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);			$sort_by_text = array('u' => $user->lang['SORT_USERNAME'], 't' => $user->lang['SORT_DATE'], 'i' => $user->lang['SORT_IP'], 'o' => $user->lang['SORT_ACTION']);			$sort_by_sql = array('u' => 'u.username_clean', 't' => 'l.log_time', 'i' => 'l.log_ip', 'o' => 'l.log_operation');			$limit_time_sql = ($min_time) ? "AND l.log_time >= $min_time" : '';		break;	}	if (!isset($sort_by_sql[$sort_key]))	{		$sort_key = $default_key;	}	$sort_order_sql = $sort_by_sql[$sort_key] . ' ' . (($sort_dir == 'd') ? 'DESC' : 'ASC');	$s_limit_days = $s_sort_key = $s_sort_dir = $sort_url = '';	gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $sort_url);	$template->assign_vars(array(		'S_SELECT_SORT_DIR'		=> $s_sort_dir,		'S_SELECT_SORT_KEY'		=> $s_sort_key,		'S_SELECT_SORT_DAYS'	=> $s_limit_days)	);	if (($sort_days && $mode != 'viewlogs') || in_array($mode, array('reports', 'unapproved_topics', 'unapproved_posts')) || $where_sql != 'WHERE')	{		$result = $db->sql_query($sql);		$total = (int) $db->sql_fetchfield('total');		$db->sql_freeresult($result);	}	else	{		$total = -1;	}}/*** Validate ids** @param	array	&$ids			The relevant ids to check* @param	string	$table			The table to find the ids in* @param	string	$sql_id			The ids relevant column name* @param	array	$acl_list		A list of permissions the user need to have* @param	mixed	$singe_forum	Limit to one forum id (int) or the first forum found (true)** @return	mixed	False if no ids were able to be retrieved, true if at least one id left.*					Additionally, this value can be the forum_id assigned if $single_forum was set.*					Therefore checking the result for with !== false is the best method.*/function check_ids(&$ids, $table, $sql_id, $acl_list = false, $single_forum = false){	global $db, $auth;	if (!is_array($ids) || empty($ids))	{		return false;	}	$sql = "SELECT $sql_id, forum_id FROM $table		WHERE " . $db->sql_in_set($sql_id, $ids);	$result = $db->sql_query($sql);	$ids = array();	$forum_id = false;	while ($row = $db->sql_fetchrow($result))	{		if ($acl_list && $row['forum_id'] && !$auth->acl_gets($acl_list, $row['forum_id']))		{			continue;		}		if ($acl_list && !$row['forum_id'] && !$auth->acl_getf_global($acl_list))		{			continue;		}		// Limit forum? If not, just assign the id.		if ($single_forum === false)		{			$ids[] = $row[$sql_id];			continue;		}		// Limit forum to a specific forum id?		// This can get really tricky, because we do not want to create a failure on global topics. :)		if ($row['forum_id'])		{			if ($single_forum !== true && $row['forum_id'] == (int) $single_forum)			{				$forum_id = (int) $single_forum;			}			else if ($forum_id === false)			{				$forum_id = $row['forum_id'];			}			if ($row['forum_id'] == $forum_id)			{				$ids[] = $row[$sql_id];			}		}		else		{			// Always add a global topic			$ids[] = $row[$sql_id];		}	}	$db->sql_freeresult($result);	if (!sizeof($ids))	{		return false;	}	// If forum id is false and ids populated we may have only global announcements selected (returning 0 because of (int) $forum_id)	return ($single_forum === false) ? true : (int) $forum_id;}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_search_info{	function module()	{		return array(			'filename'	=> 'acp_search',			'title'		=> 'ACP_SEARCH',			'version'	=> '1.0.0',			'modes'		=> array(				'settings'	=> array('title' => 'ACP_SEARCH_SETTINGS', 'auth' => 'acl_a_search', 'cat' => array('ACP_SERVER_CONFIGURATION')),				'index'		=> array('title' => 'ACP_SEARCH_INDEX', 'auth' => 'acl_a_search', 'cat' => array('ACP_CAT_DATABASE')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2008 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** A small class for 3.0.x (no autoloader in 3.0.x)** @package VC*/class phpbb_captcha_factory{	/**	* return an instance of class $name in file $name_plugin.php	*/	function &get_instance($name)	{		global $phpbb_root_path, $phpEx;		$name = basename($name);		if (!class_exists($name))		{			include($phpbb_root_path . "includes/captcha/plugins/{$name}_plugin." . $phpEx);		}		$instance = call_user_func(array($name, 'get_instance'));		return $instance;	}	/**	* Call the garbage collector	*/	function garbage_collect($name)	{		global $phpbb_root_path, $phpEx;		$name = basename($name);		if (!class_exists($name))		{			include($phpbb_root_path . "includes/captcha/plugins/{$name}_plugin." . $phpEx);		}		call_user_func(array($name, 'garbage_collect'), 0);	}	/**	* return a list of all discovered CAPTCHA plugins	*/	function get_captcha_types()	{		global $phpbb_root_path, $phpEx;		$captchas = array(			'available'		=> array(),			'unavailable'	=> array(),		);		$dp = @opendir($phpbb_root_path . 'includes/captcha/plugins');		if ($dp)		{			while (($file = readdir($dp)) !== false)			{				if ((preg_match('#_plugin\.' . $phpEx . '$#', $file)))				{					$name = preg_replace('#^(.*?)_plugin\.' . $phpEx . '$#', '\1', $file);					if (!class_exists($name))					{						include($phpbb_root_path . "includes/captcha/plugins/$file");					}					if (call_user_func(array($name, 'is_available')))					{						$captchas['available'][$name] = call_user_func(array($name, 'get_name'));					}					else					{						$captchas['unavailable'][$name] = call_user_func(array($name, 'get_name'));					}				}			}			closedir($dp);		}		return $captchas;	}}?>
<?php/**** @package dbal* @version $Id$* @copyright (c) 2010 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License** This is the MS SQL Server Native database abstraction layer.* PHP mssql native driver required.* @author Chris Pucci**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}include_once($phpbb_root_path . 'includes/db/dbal.' . $phpEx);/** * Prior to version 1.1 the SQL Server Native PHP driver didn't support sqlsrv_num_rows, or cursor based seeking so we recall all rows into an array * and maintain our own cursor index into that array. */class result_mssqlnative{	public function result_mssqlnative($queryresult = false)	{		$this->m_cursor = 0;		$this->m_rows = array();		$this->m_num_fields = sqlsrv_num_fields($queryresult);		$this->m_field_meta = sqlsrv_field_metadata($queryresult);		while ($row = sqlsrv_fetch_array($queryresult, SQLSRV_FETCH_ASSOC))		{			if ($row !== null)			{				foreach($row as $k => $v)				{					if (is_object($v) && method_exists($v, 'format'))					{						$row[$k] = $v->format("Y-m-d\TH:i:s\Z");					}				}				$this->m_rows[] = $row;//read results into memory, cursors are not supported			}		}		$this->m_row_count = sizeof($this->m_rows);	}	private function array_to_obj($array, &$obj)	{		foreach ($array as $key => $value)		{			if (is_array($value))			{				$obj->$key = new stdClass();				array_to_obj($value, $obj->$key);			}			else			{				$obj->$key = $value;			}		}		return $obj;	}	public function fetch($mode = SQLSRV_FETCH_BOTH, $object_class = 'stdClass')	{		if ($this->m_cursor >= $this->m_row_count || $this->m_row_count == 0)		{			return false;		}		$ret = false;		$arr_num = array();		if ($mode == SQLSRV_FETCH_NUMERIC || $mode == SQLSRV_FETCH_BOTH)		{			foreach($this->m_rows[$this->m_cursor] as $key => $value)			{				$arr_num[] = $value;			}		}		switch ($mode)		{			case SQLSRV_FETCH_ASSOC:				$ret = $this->m_rows[$this->m_cursor];			break;			case SQLSRV_FETCH_NUMERIC:				$ret = $arr_num;			break;			case 'OBJECT':				$ret = $this->array_to_obj($this->m_rows[$this->m_cursor], $o = new $object_class);			break;			case SQLSRV_FETCH_BOTH:			default:				$ret = $this->m_rows[$this->m_cursor] + $arr_num;			break;		}		$this->m_cursor++;		return $ret;	}	public function get($pos, $fld)	{		return $this->m_rows[$pos][$fld];	}	public function num_rows()	{		return $this->m_row_count;	}	public function seek($iRow)	{		$this->m_cursor = min($iRow, $this->m_row_count);	}	public function num_fields()	{		return $this->m_num_fields;	}	public function field_name($nr)	{		$arr_keys = array_keys($this->m_rows[0]);		return $arr_keys[$nr];	}	public function field_type($nr)	{		$i = 0;		$int_type = -1;		$str_type = '';		foreach ($this->m_field_meta as $meta)		{			if ($nr == $i)			{				$int_type = $meta['Type'];				break;			}			$i++;		}		//http://msdn.microsoft.com/en-us/library/cc296183.aspx contains type table		switch ($int_type)		{			case SQLSRV_SQLTYPE_BIGINT: 		$str_type = 'bigint'; break;			case SQLSRV_SQLTYPE_BINARY: 		$str_type = 'binary'; break;			case SQLSRV_SQLTYPE_BIT: 			$str_type = 'bit'; break;			case SQLSRV_SQLTYPE_CHAR: 			$str_type = 'char'; break;			case SQLSRV_SQLTYPE_DATETIME: 		$str_type = 'datetime'; break;			case SQLSRV_SQLTYPE_DECIMAL/*($precision, $scale)*/: $str_type = 'decimal'; break;			case SQLSRV_SQLTYPE_FLOAT: 			$str_type = 'float'; break;			case SQLSRV_SQLTYPE_IMAGE: 			$str_type = 'image'; break;			case SQLSRV_SQLTYPE_INT: 			$str_type = 'int'; break;			case SQLSRV_SQLTYPE_MONEY: 			$str_type = 'money'; break;			case SQLSRV_SQLTYPE_NCHAR/*($charCount)*/: $str_type = 'nchar'; break;			case SQLSRV_SQLTYPE_NUMERIC/*($precision, $scale)*/: $str_type = 'numeric'; break;			case SQLSRV_SQLTYPE_NVARCHAR/*($charCount)*/: $str_type = 'nvarchar'; break;			case SQLSRV_SQLTYPE_NTEXT: 			$str_type = 'ntext'; break;			case SQLSRV_SQLTYPE_REAL: 			$str_type = 'real'; break;			case SQLSRV_SQLTYPE_SMALLDATETIME: 	$str_type = 'smalldatetime'; break;			case SQLSRV_SQLTYPE_SMALLINT: 		$str_type = 'smallint'; break;			case SQLSRV_SQLTYPE_SMALLMONEY: 	$str_type = 'smallmoney'; break;			case SQLSRV_SQLTYPE_TEXT: 			$str_type = 'text'; break;			case SQLSRV_SQLTYPE_TIMESTAMP: 		$str_type = 'timestamp'; break;			case SQLSRV_SQLTYPE_TINYINT: 		$str_type = 'tinyint'; break;			case SQLSRV_SQLTYPE_UNIQUEIDENTIFIER: $str_type = 'uniqueidentifier'; break;			case SQLSRV_SQLTYPE_UDT: 			$str_type = 'UDT'; break;			case SQLSRV_SQLTYPE_VARBINARY/*($byteCount)*/: $str_type = 'varbinary'; break;			case SQLSRV_SQLTYPE_VARCHAR/*($charCount)*/: $str_type = 'varchar'; break;			case SQLSRV_SQLTYPE_XML: 			$str_type = 'xml'; break;			default: $str_type = $int_type;		}		return $str_type;	}	public function free()	{		unset($this->m_rows);		return;	}}/*** @package dbal*/class dbal_mssqlnative extends dbal{	var $m_insert_id = NULL;	var $last_query_text = '';	var $query_options = array();	/**	* Connect to server	*/	function sql_connect($sqlserver, $sqluser, $sqlpassword, $database, $port = false, $persistency = false, $new_link = false)	{		# Test for driver support, to avoid suppressed fatal error		if (!function_exists('sqlsrv_connect'))		{			trigger_error('Native MS SQL Server driver for PHP is missing or needs to be updated. Version 1.1 or later is required to install phpBB3. You can download the driver from: http://www.microsoft.com/sqlserver/2005/en/us/PHP-Driver.aspx\n', E_USER_ERROR);		}		//set up connection variables		$this->persistency = $persistency;		$this->user = $sqluser;		$this->dbname = $database;		$port_delimiter = (defined('PHP_OS') && substr(PHP_OS, 0, 3) === 'WIN') ? ',' : ':';		$this->server = $sqlserver . (($port) ? $port_delimiter . $port : '');		//connect to database		error_reporting(E_ALL);		$this->db_connect_id = sqlsrv_connect($this->server, array(			'Database' => $this->dbname,			'UID' => $this->user,			'PWD' => $sqlpassword		));		return ($this->db_connect_id) ? $this->db_connect_id : $this->sql_error('');	}	/**	* Version information about used database	* @param bool $raw if true, only return the fetched sql_server_version	* @param bool $use_cache If true, it is safe to retrieve the value from the cache	* @return string sql server version	*/	function sql_server_info($raw = false, $use_cache = true)	{		global $cache;		if (!$use_cache || empty($cache) || ($this->sql_server_version = $cache->get('mssql_version')) === false)		{			$arr_server_info = sqlsrv_server_info($this->db_connect_id);			$this->sql_server_version = $arr_server_info['SQLServerVersion'];			if (!empty($cache) && $use_cache)			{				$cache->put('mssql_version', $this->sql_server_version);			}		}		if ($raw)		{			return $this->sql_server_version;		}		return ($this->sql_server_version) ? 'MSSQL<br />' . $this->sql_server_version : 'MSSQL';	}	/**	* {@inheritDoc}	*/	function sql_buffer_nested_transactions()	{		return true;	}	/**	* SQL Transaction	* @access private	*/	function _sql_transaction($status = 'begin')	{		switch ($status)		{			case 'begin':				return sqlsrv_begin_transaction($this->db_connect_id);			break;			case 'commit':				return sqlsrv_commit($this->db_connect_id);			break;			case 'rollback':				return sqlsrv_rollback($this->db_connect_id);			break;		}		return true;	}	/**	* Base query method	*	* @param	string	$query		Contains the SQL query which shall be executed	* @param	int		$cache_ttl	Either 0 to avoid caching or the time in seconds which the result shall be kept in cache	* @return	mixed				When casted to bool the returned value returns true on success and false on failure	*	* @access	public	*/	function sql_query($query = '', $cache_ttl = 0)	{		if ($query != '')		{			global $cache;			// EXPLAIN only in extra debug mode			if (defined('DEBUG_EXTRA'))			{				$this->sql_report('start', $query);			}			$this->last_query_text = $query;			$this->query_result = ($cache_ttl && method_exists($cache, 'sql_load')) ? $cache->sql_load($query) : false;			$this->sql_add_num_queries($this->query_result);			if ($this->query_result === false)			{				if (($this->query_result = @sqlsrv_query($this->db_connect_id, $query, array(), $this->query_options)) === false)				{					$this->sql_error($query);				}				// reset options for next query				$this->query_options = array();				if (defined('DEBUG_EXTRA'))				{					$this->sql_report('stop', $query);				}				if ($cache_ttl && method_exists($cache, 'sql_save'))				{					$this->open_queries[(int) $this->query_result] = $this->query_result;					$cache->sql_save($query, $this->query_result, $cache_ttl);				}				else if (strpos($query, 'SELECT') === 0 && $this->query_result)				{					$this->open_queries[(int) $this->query_result] = $this->query_result;				}			}			else if (defined('DEBUG_EXTRA'))			{				$this->sql_report('fromcache', $query);			}		}		else		{			return false;		}		return $this->query_result;	}	/**	* Build LIMIT query	*/	function _sql_query_limit($query, $total, $offset = 0, $cache_ttl = 0)	{		$this->query_result = false;		// total == 0 means all results - not zero results		if ($offset == 0 && $total !== 0)		{			if (strpos($query, "SELECT") === false)			{				$query = "TOP {$total} " . $query;			}			else			{				$query = preg_replace('/SELECT(\s*DISTINCT)?/Dsi', 'SELECT$1 TOP '.$total, $query);			}		}		else if ($offset > 0)		{			$query = preg_replace('/SELECT(\s*DISTINCT)?/Dsi', 'SELECT$1 TOP(10000000) ', $query);			$query = 'SELECT *					FROM (SELECT sub2.*, ROW_NUMBER() OVER(ORDER BY sub2.line2) AS line3					FROM (SELECT 1 AS line2, sub1.* FROM (' . $query . ') AS sub1) as sub2) AS sub3';			if ($total > 0)			{				$query .= ' WHERE line3 BETWEEN ' . ($offset+1) . ' AND ' . ($offset + $total);			}			else			{				$query .= ' WHERE line3 > ' . $offset;			}		}		$result = $this->sql_query($query, $cache_ttl);		return $result;	}	/**	* Return number of affected rows	*/	function sql_affectedrows()	{		return (!empty($this->query_result)) ? @sqlsrv_rows_affected($this->query_result) : false;	}	/**	* Fetch current row	*/	function sql_fetchrow($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_fetchrow($query_id);		}		if ($query_id === false)		{			return false;		}		$row = @sqlsrv_fetch_array($query_id, SQLSRV_FETCH_ASSOC);		if ($row)		{			foreach ($row as $key => $value)			{				$row[$key] = ($value === ' ' || $value === NULL) ? '' : $value;			}			// remove helper values from LIMIT queries			if (isset($row['line2']))			{				unset($row['line2'], $row['line3']);			}		}		return $row;	}	/**	* Seek to given row number	* rownum is zero-based	*/	function sql_rowseek($rownum, &$query_id)	{		global $cache;		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_rowseek($rownum, $query_id);		}		$seek = new result_mssqlnative($query_id);		$row = $seek->seek($rownum);		return ($row = $seek->fetch()) ? $row : false;	}	/**	* Get last inserted id after insert statement	*/	function sql_nextid()	{		$result_id = @sqlsrv_query($this->db_connect_id, 'SELECT @@IDENTITY');		if ($result_id !== false)		{			$row = @sqlsrv_fetch_array($result_id);			$id = $row[0];			@sqlsrv_free_stmt($result_id);			return $id;		}		else		{			return false;		}	}	/**	* Free sql result	*/	function sql_freeresult($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_freeresult($query_id);		}		if (isset($this->open_queries[$query_id]))		{			unset($this->open_queries[$query_id]);			return @sqlsrv_free_stmt($query_id);		}		return false;	}	/**	* Escape string used in sql query	*/	function sql_escape($msg)	{		return str_replace(array("'", "\0"), array("''", ''), $msg);	}	/**	* Build LIKE expression	* @access private	*/	function _sql_like_expression($expression)	{		return $expression . " ESCAPE '\\'";	}	/**	* return sql error array	* @access private	*/	function _sql_error()	{		$errors = @sqlsrv_errors(SQLSRV_ERR_ERRORS);		$error_message = '';		$code = 0;		if ($errors != null)		{			foreach ($errors as $error)			{				$error_message .= "SQLSTATE: ".$error[ 'SQLSTATE']."\n";				$error_message .= "code: ".$error[ 'code']."\n";				$code = $error['code'];				$error_message .= "message: ".$error[ 'message']."\n";			}			$this->last_error_result = $error_message;			$error = $this->last_error_result;		}		else		{			$error = (isset($this->last_error_result) && $this->last_error_result) ? $this->last_error_result : array();		}		return array(			'message'	=> $error,			'code'		=> $code,		);	}	/**	* Build db-specific query data	* @access private	*/	function _sql_custom_build($stage, $data)	{		return $data;	}	/**	* Close sql connection	* @access private	*/	function _sql_close()	{		return @sqlsrv_close($this->db_connect_id);	}	/**	* Build db-specific report	* @access private	*/	function _sql_report($mode, $query = '')	{		switch ($mode)		{			case 'start':				$html_table = false;				@sqlsrv_query($this->db_connect_id, 'SET SHOWPLAN_TEXT ON;');				if ($result = @sqlsrv_query($this->db_connect_id, $query))				{					@sqlsrv_next_result($result);					while ($row = @sqlsrv_fetch_array($result))					{						$html_table = $this->sql_report('add_select_row', $query, $html_table, $row);					}				}				@sqlsrv_query($this->db_connect_id, 'SET SHOWPLAN_TEXT OFF;');				@sqlsrv_free_stmt($result);				if ($html_table)				{					$this->html_hold .= '</table>';				}			break;			case 'fromcache':				$endtime = explode(' ', microtime());				$endtime = $endtime[0] + $endtime[1];				$result = @sqlsrv_query($this->db_connect_id, $query);				while ($void = @sqlsrv_fetch_array($result))				{					// Take the time spent on parsing rows into account				}				@sqlsrv_free_stmt($result);				$splittime = explode(' ', microtime());				$splittime = $splittime[0] + $splittime[1];				$this->sql_report('record_fromcache', $query, $endtime, $splittime);			break;		}	}	/**	* Utility method used to retrieve number of rows	* Emulates mysql_num_rows	* Used in acp_database.php -> write_data_mssqlnative()	* Requires a static or keyset cursor to be definde via	* mssqlnative_set_query_options()	*/	function mssqlnative_num_rows($res)	{		if ($res !== false)		{			return sqlsrv_num_rows($res);		}		else		{			return false;		}	}	/**	* Allows setting mssqlnative specific query options passed to sqlsrv_query as 4th parameter.	*/	function mssqlnative_set_query_options($options)	{		$this->query_options = $options;	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_attachments_info{	function module()	{		return array(			'filename'	=> 'acp_attachments',			'title'		=> 'ACP_ATTACHMENTS',			'version'	=> '1.0.0',			'modes'		=> array(				'attach'		=> array('title' => 'ACP_ATTACHMENT_SETTINGS', 'auth' => 'acl_a_attach', 'cat' => array('ACP_BOARD_CONFIGURATION', 'ACP_ATTACHMENTS')),				'extensions'	=> array('title' => 'ACP_MANAGE_EXTENSIONS', 'auth' => 'acl_a_attach', 'cat' => array('ACP_ATTACHMENTS')),				'ext_groups'	=> array('title' => 'ACP_EXTENSION_GROUPS', 'auth' => 'acl_a_attach', 'cat' => array('ACP_ATTACHMENTS')),				'orphan'		=> array('title' => 'ACP_ORPHAN_ATTACHMENTS', 'auth' => 'acl_a_attach', 'cat' => array('ACP_ATTACHMENTS'))			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php return array(''=>'0',''=>'',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'k',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1/3',''=>'2/3',''=>'1/5',''=>'2/5',''=>'3/5',''=>'4/5',''=>'1/6',''=>'5/6',''=>'1/8',''=>'3/8',''=>'5/8',''=>'7/8',''=>'1',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'11',''=>'12',''=>'50',''=>'100',''=>'500',''=>'1000',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'11',''=>'12',''=>'50',''=>'100',''=>'500',''=>'1000',''=>'1000',''=>'5000',''=>'10000',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'11',''=>'12',''=>'13',''=>'14',''=>'15',''=>'16',''=>'17',''=>'18',''=>'19',''=>'20',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'11',''=>'12',''=>'13',''=>'14',''=>'15',''=>'16',''=>'17',''=>'18',''=>'19',''=>'20',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'11',''=>'12',''=>'13',''=>'14',''=>'15',''=>'16',''=>'17',''=>'18',''=>'19',''=>'20',''=>'0',''=>'11',''=>'12',''=>'13',''=>'14',''=>'15',''=>'16',''=>'17',''=>'18',''=>'19',''=>'20',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10');
<?php return array(''=>'ss',''=>'i',''=>'n',''=>'j',''=>'',''=>'',''=>'',''=>'h',''=>'t',''=>'w',''=>'y',''=>'a',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'ff',''=>'fi',''=>'fl',''=>'ffi',''=>'ffl',''=>'st',''=>'st',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/*** Apache auth plug-in for phpBB3** Authentication plug-ins is largely down to Sergey Kanareykin, our thanks to him.** @package login* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Checks whether the user is identified to apache* Only allow changing authentication to apache if the user is identified* Called in acp_board while setting authentication plugins** @return boolean|string false if the user is identified and else an error message*/function init_apache(){	global $user;	if (!isset($_SERVER['PHP_AUTH_USER']) || $user->data['username'] !== $_SERVER['PHP_AUTH_USER'])	{		return $user->lang['APACHE_SETUP_BEFORE_USE'];	}	return false;}/*** Login function*/function login_apache(&$username, &$password){	global $db;	// do not allow empty password	if (!$password)	{		return array(			'status'	=> LOGIN_ERROR_PASSWORD,			'error_msg'	=> 'NO_PASSWORD_SUPPLIED',			'user_row'	=> array('user_id' => ANONYMOUS),		);	}	if (!$username)	{		return array(			'status'	=> LOGIN_ERROR_USERNAME,			'error_msg'	=> 'LOGIN_ERROR_USERNAME',			'user_row'	=> array('user_id' => ANONYMOUS),		);	}	if (!isset($_SERVER['PHP_AUTH_USER']))	{		return array(			'status'		=> LOGIN_ERROR_EXTERNAL_AUTH,			'error_msg'		=> 'LOGIN_ERROR_EXTERNAL_AUTH_APACHE',			'user_row'		=> array('user_id' => ANONYMOUS),		);	}	$php_auth_user = $_SERVER['PHP_AUTH_USER'];	$php_auth_pw = $_SERVER['PHP_AUTH_PW'];	if (!empty($php_auth_user) && !empty($php_auth_pw))	{		if ($php_auth_user !== $username)		{			return array(				'status'	=> LOGIN_ERROR_USERNAME,				'error_msg'	=> 'LOGIN_ERROR_USERNAME',				'user_row'	=> array('user_id' => ANONYMOUS),			);		}		$sql = 'SELECT user_id, username, user_password, user_passchg, user_email, user_type			FROM ' . USERS_TABLE . "			WHERE username = '" . $db->sql_escape($php_auth_user) . "'";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			// User inactive...			if ($row['user_type'] == USER_INACTIVE || $row['user_type'] == USER_IGNORE)			{				return array(					'status'		=> LOGIN_ERROR_ACTIVE,					'error_msg'		=> 'ACTIVE_ERROR',					'user_row'		=> $row,				);			}			// Successful login...			return array(				'status'		=> LOGIN_SUCCESS,				'error_msg'		=> false,				'user_row'		=> $row,			);		}		// this is the user's first login so create an empty profile		return array(			'status'		=> LOGIN_SUCCESS_CREATE_PROFILE,			'error_msg'		=> false,			'user_row'		=> user_row_apache($php_auth_user, $php_auth_pw),		);	}	// Not logged into apache	return array(		'status'		=> LOGIN_ERROR_EXTERNAL_AUTH,		'error_msg'		=> 'LOGIN_ERROR_EXTERNAL_AUTH_APACHE',		'user_row'		=> array('user_id' => ANONYMOUS),	);}/*** Autologin function** @return array containing the user row or empty if no auto login should take place*/function autologin_apache(){	global $db;	if (!isset($_SERVER['PHP_AUTH_USER']))	{		return array();	}	$php_auth_user = $_SERVER['PHP_AUTH_USER'];	$php_auth_pw = $_SERVER['PHP_AUTH_PW'];	if (!empty($php_auth_user) && !empty($php_auth_pw))	{		set_var($php_auth_user, $php_auth_user, 'string', true);		set_var($php_auth_pw, $php_auth_pw, 'string', true);		$sql = 'SELECT *			FROM ' . USERS_TABLE . "			WHERE username = '" . $db->sql_escape($php_auth_user) . "'";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			return ($row['user_type'] == USER_INACTIVE || $row['user_type'] == USER_IGNORE) ? array() : $row;		}		if (!function_exists('user_add'))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		}		// create the user if he does not exist yet		user_add(user_row_apache($php_auth_user, $php_auth_pw));		$sql = 'SELECT *			FROM ' . USERS_TABLE . "			WHERE username_clean = '" . $db->sql_escape(utf8_clean_string($php_auth_user)) . "'";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			return $row;		}	}	return array();}/*** This function generates an array which can be passed to the user_add function in order to create a user*/function user_row_apache($username, $password){	global $db, $config, $user;	// first retrieve default group id	$sql = 'SELECT group_id		FROM ' . GROUPS_TABLE . "		WHERE group_name = '" . $db->sql_escape('REGISTERED') . "'			AND group_type = " . GROUP_SPECIAL;	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$row)	{		trigger_error('NO_GROUP');	}	// generate user account data	return array(		'username'		=> $username,		'user_password'	=> phpbb_hash($password),		'user_email'	=> '',		'group_id'		=> (int) $row['group_id'],		'user_type'		=> USER_NORMAL,		'user_ip'		=> $user->ip,		'user_new'		=> ($config['new_member_post_limit']) ? 1 : 0,	);}/*** The session validation function checks whether the user is still logged in** @return boolean true if the given user is authenticated or false if the session should be closed*/function validate_session_apache(&$user){	// Check if PHP_AUTH_USER is set and handle this case	if (isset($_SERVER['PHP_AUTH_USER']))	{		$php_auth_user = '';		set_var($php_auth_user, $_SERVER['PHP_AUTH_USER'], 'string', true);		return ($php_auth_user === $user['username']) ? true : false;	}	// PHP_AUTH_USER is not set. A valid session is now determined by the user type (anonymous/bot or not)	if ($user['user_type'] == USER_IGNORE)	{		return true;	}	return false;}?>
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'20',''=>'30',''=>'40',''=>'50',''=>'60',''=>'70',''=>'80',''=>'90',''=>'100',''=>'200',''=>'300',''=>'400',''=>'500',''=>'600',''=>'700',''=>'800',''=>'900',''=>'1000',''=>'2000',''=>'3000',''=>'4000',''=>'5000',''=>'6000',''=>'7000',''=>'8000',''=>'9000',''=>'10000',''=>'20000',''=>'30000',''=>'40000',''=>'50000',''=>'60000',''=>'70000',''=>'80000',''=>'90000',''=>'1/4',''=>'1/2',''=>'1',''=>'5',''=>'50',''=>'500',''=>'5000',''=>'50000',''=>'5',''=>'10',''=>'50',''=>'100',''=>'500',''=>'1000',''=>'5000',''=>'5',''=>'10',''=>'50',''=>'100',''=>'500',''=>'1000',''=>'10000',''=>'50000',''=>'10',''=>'1',''=>'1',''=>'1',''=>'2',''=>'2',''=>'2',''=>'2',''=>'5',''=>'10',''=>'10',''=>'10',''=>'10',''=>'10',''=>'30',''=>'50',''=>'50',''=>'50',''=>'50',''=>'100',''=>'300',''=>'500',''=>'500',''=>'500',''=>'500',''=>'500',''=>'1000',''=>'5000',''=>'5',''=>'50',''=>'1/2',''=>'1/2',''=>'2/3',''=>'3/4',''=>'0',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'5',''=>'10',''=>'50',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'90',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'900',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'10',''=>'20',''=>'100',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9');
<?php/**** @package dbal* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}include_once($phpbb_root_path . 'includes/db/dbal.' . $phpEx);/*** Oracle Database Abstraction Layer* @package dbal*/class dbal_oracle extends dbal{	var $last_query_text = '';	/**	* Connect to server	*/	function sql_connect($sqlserver, $sqluser, $sqlpassword, $database, $port = false, $persistency = false, $new_link = false)	{		$this->persistency = $persistency;		$this->user = $sqluser;		$this->server = $sqlserver . (($port) ? ':' . $port : '');		$this->dbname = $database;		$connect = $database;		// support for "easy connect naming"		if ($sqlserver !== '' && $sqlserver !== '/')		{			if (substr($sqlserver, -1, 1) == '/')			{				$sqlserver == substr($sqlserver, 0, -1);			}			$connect = $sqlserver . (($port) ? ':' . $port : '') . '/' . $database;		}		$this->db_connect_id = ($new_link) ? @ocinlogon($this->user, $sqlpassword, $connect, 'UTF8') : (($this->persistency) ? @ociplogon($this->user, $sqlpassword, $connect, 'UTF8') : @ocilogon($this->user, $sqlpassword, $connect, 'UTF8'));		return ($this->db_connect_id) ? $this->db_connect_id : $this->sql_error('');	}	/**	* Version information about used database	* @param bool $raw if true, only return the fetched sql_server_version	* @param bool $use_cache forced to false for Oracle	* @return string sql server version	*/	function sql_server_info($raw = false, $use_cache = true)	{		/**		* force $use_cache false.  I didn't research why the caching code below is commented out		* but I assume its because the Oracle extension provides a direct method to access it		* without a query.		*/		$use_cache = false;/*		global $cache;		if (empty($cache) || ($this->sql_server_version = $cache->get('oracle_version')) === false)		{			$result = @ociparse($this->db_connect_id, 'SELECT * FROM v$version WHERE banner LIKE \'Oracle%\'');			@ociexecute($result, OCI_DEFAULT);			@ocicommit($this->db_connect_id);			$row = array();			@ocifetchinto($result, $row, OCI_ASSOC + OCI_RETURN_NULLS);			@ocifreestatement($result);			$this->sql_server_version = trim($row['BANNER']);			$cache->put('oracle_version', $this->sql_server_version);		}*/		$this->sql_server_version = @ociserverversion($this->db_connect_id);		return $this->sql_server_version;	}	/**	* SQL Transaction	* @access private	*/	function _sql_transaction($status = 'begin')	{		switch ($status)		{			case 'begin':				return true;			break;			case 'commit':				return @ocicommit($this->db_connect_id);			break;			case 'rollback':				return @ocirollback($this->db_connect_id);			break;		}		return true;	}	/**	* Oracle specific code to handle the fact that it does not compare columns properly	* @access private	*/	function _rewrite_col_compare($args)	{		if (sizeof($args) == 4)		{			if ($args[2] == '=')			{				return '(' . $args[0] . ' OR (' . $args[1] . ' is NULL AND ' . $args[3] . ' is NULL))';			}			else if ($args[2] == '<>')			{				// really just a fancy way of saying foo <> bar or (foo is NULL XOR bar is NULL) but SQL has no XOR :P				return '(' . $args[0] . ' OR ((' . $args[1] . ' is NULL AND ' . $args[3] . ' is NOT NULL) OR (' . $args[1] . ' is NOT NULL AND ' . $args[3] . ' is NULL)))';			}		}		else		{			return $this->_rewrite_where($args[0]);		}	}	/**	* Oracle specific code to handle it's lack of sanity	* @access private	*/	function _rewrite_where($where_clause)	{		preg_match_all('/\s*(AND|OR)?\s*([\w_.()]++)\s*(?:(=|<[=>]?|>=?|LIKE)\s*((?>\'(?>[^\']++|\'\')*+\'|[\d-.()]+))|((NOT )?IN\s*\((?>\'(?>[^\']++|\'\')*+\',? ?|[\d-.]+,? ?)*+\)))/', $where_clause, $result, PREG_SET_ORDER);		$out = '';		foreach ($result as $val)		{			if (!isset($val[5]))			{				if ($val[4] !== "''")				{					$out .= $val[0];				}				else				{					$out .= ' ' . $val[1] . ' ' . $val[2];					if ($val[3] == '=')					{						$out .= ' is NULL';					}					else if ($val[3] == '<>')					{						$out .= ' is NOT NULL';					}				}			}			else			{				$in_clause = array();				$sub_exp = substr($val[5], strpos($val[5], '(') + 1, -1);				$extra = false;				preg_match_all('/\'(?>[^\']++|\'\')*+\'|[\d-.]++/', $sub_exp, $sub_vals, PREG_PATTERN_ORDER);				$i = 0;				foreach ($sub_vals[0] as $sub_val)				{					// two things:					// 1) This determines if an empty string was in the IN clausing, making us turn it into a NULL comparison					// 2) This fixes the 1000 list limit that Oracle has (ORA-01795)					if ($sub_val !== "''")					{						$in_clause[(int) $i++/1000][] = $sub_val;					}					else					{						$extra = true;					}				}				if (!$extra && $i < 1000)				{					$out .= $val[0];				}				else				{					$out .= ' ' . $val[1] . '(';					$in_array = array();					// constuct each IN() clause					foreach ($in_clause as $in_values)					{						$in_array[] = $val[2] . ' ' . (isset($val[6]) ? $val[6] : '') . 'IN(' . implode(', ', $in_values) . ')';					}					// Join the IN() clauses against a few ORs (IN is just a nicer OR anyway)					$out .= implode(' OR ', $in_array);					// handle the empty string case					if ($extra)					{						$out .= ' OR ' . $val[2] . ' is ' . (isset($val[6]) ? $val[6] : '') . 'NULL';					}					$out .= ')';					unset($in_array, $in_clause);				}			}		}		return $out;	}	/**	* Base query method	*	* @param	string	$query		Contains the SQL query which shall be executed	* @param	int		$cache_ttl	Either 0 to avoid caching or the time in seconds which the result shall be kept in cache	* @return	mixed				When casted to bool the returned value returns true on success and false on failure	*	* @access	public	*/	function sql_query($query = '', $cache_ttl = 0)	{		if ($query != '')		{			global $cache;			// EXPLAIN only in extra debug mode			if (defined('DEBUG_EXTRA'))			{				$this->sql_report('start', $query);			}			$this->last_query_text = $query;			$this->query_result = ($cache_ttl && method_exists($cache, 'sql_load')) ? $cache->sql_load($query) : false;			$this->sql_add_num_queries($this->query_result);			if ($this->query_result === false)			{				$in_transaction = false;				if (!$this->transaction)				{					$this->sql_transaction('begin');				}				else				{					$in_transaction = true;				}				$array = array();				// We overcome Oracle's 4000 char limit by binding vars				if (strlen($query) > 4000)				{					if (preg_match('/^(INSERT INTO[^(]++)\\(([^()]+)\\) VALUES[^(]++\\((.*?)\\)$/sU', $query, $regs))					{						if (strlen($regs[3]) > 4000)						{							$cols = explode(', ', $regs[2]);							preg_match_all('/\'(?:[^\']++|\'\')*+\'|[\d-.]+/', $regs[3], $vals, PREG_PATTERN_ORDER);/*						The code inside this comment block breaks clob handling, but does allow the						database restore script to work.  If you want to allow no posts longer than 4KB						and/or need the db restore script, uncomment this.							if (sizeof($cols) !== sizeof($vals))							{								// Try to replace some common data we know is from our restore script or from other sources								$regs[3] = str_replace("'||chr(47)||'", '/', $regs[3]);								$_vals = explode(', ', $regs[3]);								$vals = array();								$is_in_val = false;								$i = 0;								$string = '';								foreach ($_vals as $value)								{									if (strpos($value, "'") === false && !$is_in_val)									{										$vals[$i++] = $value;										continue;									}									if (substr($value, -1) === "'")									{										$vals[$i] = $string . (($is_in_val) ? ', ' : '') . $value;										$string = '';										$is_in_val = false;										if ($vals[$i][0] !== "'")										{											$vals[$i] = "''" . $vals[$i];										}										$i++;										continue;									}									else									{										$string .= (($is_in_val) ? ', ' : '') . $value;										$is_in_val = true;									}								}								if ($string)								{									// New value if cols != value									$vals[(sizeof($cols) !== sizeof($vals)) ? $i : $i - 1] .= $string;								}								$vals = array(0 => $vals);							}*/							$inserts = $vals[0];							unset($vals);							foreach ($inserts as $key => $value)							{								if (!empty($value) && $value[0] === "'" && strlen($value) > 4002) // check to see if this thing is greater than the max + 'x2								{									$inserts[$key] = ':' . strtoupper($cols[$key]);									$array[$inserts[$key]] = str_replace("''", "'", substr($value, 1, -1));								}							}							$query = $regs[1] . '(' . $regs[2] . ') VALUES (' . implode(', ', $inserts) . ')';						}					}					else if (preg_match_all('/^(UPDATE [\\w_]++\\s+SET )([\\w_]++\\s*=\\s*(?:\'(?:[^\']++|\'\')*+\'|[\d-.]+)(?:,\\s*[\\w_]++\\s*=\\s*(?:\'(?:[^\']++|\'\')*+\'|[\d-.]+))*+)\\s+(WHERE.*)$/s', $query, $data, PREG_SET_ORDER))					{						if (strlen($data[0][2]) > 4000)						{							$update = $data[0][1];							$where = $data[0][3];							preg_match_all('/([\\w_]++)\\s*=\\s*(\'(?:[^\']++|\'\')*+\'|[\d-.]++)/', $data[0][2], $temp, PREG_SET_ORDER);							unset($data);							$cols = array();							foreach ($temp as $value)							{								if (!empty($value[2]) && $value[2][0] === "'" && strlen($value[2]) > 4002) // check to see if this thing is greater than the max + 'x2								{									$cols[] = $value[1] . '=:' . strtoupper($value[1]);									$array[$value[1]] = str_replace("''", "'", substr($value[2], 1, -1));								}								else								{									$cols[] = $value[1] . '=' . $value[2];								}							}							$query = $update . implode(', ', $cols) . ' ' . $where;							unset($cols);						}					}				}				switch (substr($query, 0, 6))				{					case 'DELETE':						if (preg_match('/^(DELETE FROM [\w_]++ WHERE)((?:\s*(?:AND|OR)?\s*[\w_]+\s*(?:(?:=|<>)\s*(?>\'(?>[^\']++|\'\')*+\'|[\d-.]+)|(?:NOT )?IN\s*\((?>\'(?>[^\']++|\'\')*+\',? ?|[\d-.]+,? ?)*+\)))*+)$/', $query, $regs))						{							$query = $regs[1] . $this->_rewrite_where($regs[2]);							unset($regs);						}					break;					case 'UPDATE':						if (preg_match('/^(UPDATE [\\w_]++\\s+SET [\\w_]+\s*=\s*(?:\'(?:[^\']++|\'\')*+\'|[\d-.]++|:\w++)(?:, [\\w_]+\s*=\s*(?:\'(?:[^\']++|\'\')*+\'|[\d-.]++|:\w++))*+\\s+WHERE)(.*)$/s',  $query, $regs))						{							$query = $regs[1] . $this->_rewrite_where($regs[2]);							unset($regs);						}					break;					case 'SELECT':						$query = preg_replace_callback('/([\w_.]++)\s*(?:(=|<>)\s*(?>\'(?>[^\']++|\'\')*+\'|[\d-.]++|([\w_.]++))|(?:NOT )?IN\s*\((?>\'(?>[^\']++|\'\')*+\',? ?|[\d-.]++,? ?)*+\))/', array($this, '_rewrite_col_compare'), $query);					break;				}				$this->query_result = @ociparse($this->db_connect_id, $query);				foreach ($array as $key => $value)				{					@ocibindbyname($this->query_result, $key, $array[$key], -1);				}				$success = @ociexecute($this->query_result, OCI_DEFAULT);				if (!$success)				{					$this->sql_error($query);					$this->query_result = false;				}				else				{					if (!$in_transaction)					{						$this->sql_transaction('commit');					}				}				if (defined('DEBUG_EXTRA'))				{					$this->sql_report('stop', $query);				}				if ($cache_ttl && method_exists($cache, 'sql_save'))				{					$this->open_queries[(int) $this->query_result] = $this->query_result;					$cache->sql_save($query, $this->query_result, $cache_ttl);				}				else if (strpos($query, 'SELECT') === 0 && $this->query_result)				{					$this->open_queries[(int) $this->query_result] = $this->query_result;				}			}			else if (defined('DEBUG_EXTRA'))			{				$this->sql_report('fromcache', $query);			}		}		else		{			return false;		}		return $this->query_result;	}	/**	* Build LIMIT query	*/	function _sql_query_limit($query, $total, $offset = 0, $cache_ttl = 0)	{		$this->query_result = false;		$query = 'SELECT * FROM (SELECT /*+ FIRST_ROWS */ rownum AS xrownum, a.* FROM (' . $query . ') a WHERE rownum <= ' . ($offset + $total) . ') WHERE xrownum >= ' . $offset;		return $this->sql_query($query, $cache_ttl);	}	/**	* Return number of affected rows	*/	function sql_affectedrows()	{		return ($this->query_result) ? @ocirowcount($this->query_result) : false;	}	/**	* Fetch current row	*/	function sql_fetchrow($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_fetchrow($query_id);		}		if ($query_id !== false)		{			$row = array();			$result = @ocifetchinto($query_id, $row, OCI_ASSOC + OCI_RETURN_NULLS);			if (!$result || !$row)			{				return false;			}			$result_row = array();			foreach ($row as $key => $value)			{				// Oracle treats empty strings as null				if (is_null($value))				{					$value = '';				}				// OCI->CLOB?				if (is_object($value))				{					$value = $value->load();				}				$result_row[strtolower($key)] = $value;			}			return $result_row;		}		return false;	}	/**	* Seek to given row number	* rownum is zero-based	*/	function sql_rowseek($rownum, &$query_id)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_rowseek($rownum, $query_id);		}		if ($query_id === false)		{			return false;		}		// Reset internal pointer		@ociexecute($query_id, OCI_DEFAULT);		// We do not fetch the row for rownum == 0 because then the next resultset would be the second row		for ($i = 0; $i < $rownum; $i++)		{			if (!$this->sql_fetchrow($query_id))			{				return false;			}		}		return true;	}	/**	* Get last inserted id after insert statement	*/	function sql_nextid()	{		$query_id = $this->query_result;		if ($query_id !== false && $this->last_query_text != '')		{			if (preg_match('#^INSERT[\t\n ]+INTO[\t\n ]+([a-z0-9\_\-]+)#is', $this->last_query_text, $tablename))			{				$query = 'SELECT ' . $tablename[1] . '_seq.currval FROM DUAL';				$stmt = @ociparse($this->db_connect_id, $query);				@ociexecute($stmt, OCI_DEFAULT);				$temp_result = @ocifetchinto($stmt, $temp_array, OCI_ASSOC + OCI_RETURN_NULLS);				@ocifreestatement($stmt);				if ($temp_result)				{					return $temp_array['CURRVAL'];				}				else				{					return false;				}			}		}		return false;	}	/**	* Free sql result	*/	function sql_freeresult($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_freeresult($query_id);		}		if (isset($this->open_queries[(int) $query_id]))		{			unset($this->open_queries[(int) $query_id]);			return @ocifreestatement($query_id);		}		return false;	}	/**	* Escape string used in sql query	*/	function sql_escape($msg)	{		return str_replace(array("'", "\0"), array("''", ''), $msg);	}	/**	* Build LIKE expression	* @access private	*/	function _sql_like_expression($expression)	{		return $expression . " ESCAPE '\\'";	}	function _sql_custom_build($stage, $data)	{		return $data;	}	function _sql_bit_and($column_name, $bit, $compare = '')	{		return 'BITAND(' . $column_name . ', ' . (1 << $bit) . ')' . (($compare) ? ' ' . $compare : '');	}	function _sql_bit_or($column_name, $bit, $compare = '')	{		return 'BITOR(' . $column_name . ', ' . (1 << $bit) . ')' . (($compare) ? ' ' . $compare : '');	}	/**	* return sql error array	* @access private	*/	function _sql_error()	{		$error = @ocierror();		$error = (!$error) ? @ocierror($this->query_result) : $error;		$error = (!$error) ? @ocierror($this->db_connect_id) : $error;		if ($error)		{			$this->last_error_result = $error;		}		else		{			$error = (isset($this->last_error_result) && $this->last_error_result) ? $this->last_error_result : array();		}		return $error;	}	/**	* Close sql connection	* @access private	*/	function _sql_close()	{		return @ocilogoff($this->db_connect_id);	}	/**	* Build db-specific report	* @access private	*/	function _sql_report($mode, $query = '')	{		switch ($mode)		{			case 'start':				$html_table = false;				// Grab a plan table, any will do				$sql = "SELECT table_name					FROM USER_TABLES					WHERE table_name LIKE '%PLAN_TABLE%'";				$stmt = ociparse($this->db_connect_id, $sql);				ociexecute($stmt);				$result = array();				if (ocifetchinto($stmt, $result, OCI_ASSOC + OCI_RETURN_NULLS))				{					$table = $result['TABLE_NAME'];					// This is the statement_id that will allow us to track the plan					$statement_id = substr(md5($query), 0, 30);					// Remove any stale plans					$stmt2 = ociparse($this->db_connect_id, "DELETE FROM $table WHERE statement_id='$statement_id'");					ociexecute($stmt2);					ocifreestatement($stmt2);					// Explain the plan					$sql = "EXPLAIN PLAN						SET STATEMENT_ID = '$statement_id'						FOR $query";					$stmt2 = ociparse($this->db_connect_id, $sql);					ociexecute($stmt2);					ocifreestatement($stmt2);					// Get the data from the plan					$sql = "SELECT operation, options, object_name, object_type, cardinality, cost						FROM plan_table						START WITH id = 0 AND statement_id = '$statement_id'						CONNECT BY PRIOR id = parent_id							AND statement_id = '$statement_id'";					$stmt2 = ociparse($this->db_connect_id, $sql);					ociexecute($stmt2);					$row = array();					while (ocifetchinto($stmt2, $row, OCI_ASSOC + OCI_RETURN_NULLS))					{						$html_table = $this->sql_report('add_select_row', $query, $html_table, $row);					}					ocifreestatement($stmt2);					// Remove the plan we just made, we delete them on request anyway					$stmt2 = ociparse($this->db_connect_id, "DELETE FROM $table WHERE statement_id='$statement_id'");					ociexecute($stmt2);					ocifreestatement($stmt2);				}				ocifreestatement($stmt);				if ($html_table)				{					$this->html_hold .= '</table>';				}			break;			case 'fromcache':				$endtime = explode(' ', microtime());				$endtime = $endtime[0] + $endtime[1];				$result = @ociparse($this->db_connect_id, $query);				$success = @ociexecute($result, OCI_DEFAULT);				$row = array();				while (@ocifetchinto($result, $row, OCI_ASSOC + OCI_RETURN_NULLS))				{					// Take the time spent on parsing rows into account				}				@ocifreestatement($result);				$splittime = explode(' ', microtime());				$splittime = $splittime[0] + $splittime[1];				$this->sql_report('record_fromcache', $query, $endtime, $splittime);			break;		}	}}?>
<?php return array(''=>'',''=>'');
<?php/**** posting [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ADD_ATTACHMENT'			=> 'Upload attachment',	'ADD_ATTACHMENT_EXPLAIN'	=> 'If you wish to attach one or more files enter the details below.',	'ADD_FILE'					=> 'Add the file',	'ADD_POLL'					=> 'Poll creation',	'ADD_POLL_EXPLAIN'			=> 'If you do not want to add a poll to your topic leave the fields blank.',	'ALREADY_DELETED'			=> 'Sorry but this message is already deleted.',	'ATTACH_QUOTA_REACHED'		=> 'Sorry, the board attachment quota has been reached.',	'ATTACH_SIG'				=> 'Attach a signature (signatures can be altered via the UCP)',	'BBCODE_A_HELP'				=> 'Inline uploaded attachment: [attachment=]filename.ext[/attachment]',	'BBCODE_B_HELP'				=> 'Bold text: [b]text[/b]',	'BBCODE_C_HELP'				=> 'Code display: [code]code[/code]',	'BBCODE_D_HELP'				=> 'Flash: [flash=width,height]http://url[/flash]',	'BBCODE_F_HELP'				=> 'Font size: [size=85]small text[/size]',	'BBCODE_IS_OFF'				=> '%sBBCode%s is <em>OFF</em>',	'BBCODE_IS_ON'				=> '%sBBCode%s is <em>ON</em>',	'BBCODE_I_HELP'				=> 'Italic text: [i]text[/i]',	'BBCODE_L_HELP'				=> 'List: [list]text[/list]',	'BBCODE_LISTITEM_HELP'		=> 'List item: [*]text[/*]',	'BBCODE_O_HELP'				=> 'Ordered list: [list=]text[/list]',	'BBCODE_P_HELP'				=> 'Insert image: [img]http://image_url[/img]',	'BBCODE_Q_HELP'				=> 'Quote text: [quote]text[/quote]',	'BBCODE_S_HELP'				=> 'Font colour: [color=red]text[/color]  Tip: you can also use color=#FF0000',	'BBCODE_U_HELP'				=> 'Underline text: [u]text[/u]',	'BBCODE_W_HELP'				=> 'Insert URL: [url]http://url[/url] or [url=http://url]URL text[/url]',	'BBCODE_Y_HELP'				=> 'List: Add list element',	'BUMP_ERROR'				=> 'You cannot bump this topic so soon after the last post.',	'CANNOT_DELETE_REPLIED'		=> 'Sorry but you may only delete posts which have not been replied to.',	'CANNOT_EDIT_POST_LOCKED'	=> 'This post has been locked. You can no longer edit that post.',	'CANNOT_EDIT_TIME'			=> 'You can no longer edit or delete that post.',	'CANNOT_POST_ANNOUNCE'		=> 'Sorry but you cannot post announcements.',	'CANNOT_POST_STICKY'		=> 'Sorry but you cannot post sticky topics.',	'CHANGE_TOPIC_TO'			=> 'Change topic type to',	'CLOSE_TAGS'				=> 'Close tags',	'CURRENT_TOPIC'				=> 'Current topic',	'DELETE_FILE'				=> 'Delete file',	'DELETE_MESSAGE'			=> 'Delete message',	'DELETE_MESSAGE_CONFIRM'	=> 'Are you sure you want to delete this message?',	'DELETE_OWN_POSTS'			=> 'Sorry but you can only delete your own posts.',	'DELETE_POST_CONFIRM'		=> 'Are you sure you want to delete this post?',	'DELETE_POST_WARN'			=> 'Once deleted the post cannot be recovered',	'DISABLE_BBCODE'			=> 'Disable BBCode',	'DISABLE_MAGIC_URL'			=> 'Do not automatically parse URLs',	'DISABLE_SMILIES'			=> 'Disable smilies',	'DISALLOWED_CONTENT'		=> 'The upload was rejected because the uploaded file was identified as a possible attack vector.',	'DISALLOWED_EXTENSION'		=> 'The extension %s is not allowed.',	'DRAFT_LOADED'				=> 'Draft loaded into posting area, you may want to finish your post now.<br />Your draft will be deleted after submitting this post.',	'DRAFT_LOADED_PM'			=> 'Draft loaded into message area, you may want to finish your private message now.<br />Your draft will be deleted after submitting this private message.',	'DRAFT_SAVED'				=> 'Draft successfully saved.',	'DRAFT_TITLE'				=> 'Draft title',	'EDIT_REASON'				=> 'Reason for editing this post',	'EMPTY_FILEUPLOAD'			=> 'The uploaded file is empty.',	'EMPTY_MESSAGE'				=> 'You must enter a message when posting.',	'EMPTY_REMOTE_DATA'			=> 'File could not be uploaded, please try uploading the file manually.',	'FLASH_IS_OFF'				=> '[flash] is <em>OFF</em>',	'FLASH_IS_ON'				=> '[flash] is <em>ON</em>',	'FLOOD_ERROR'				=> 'You cannot make another post so soon after your last.',	'FONT_COLOR'				=> 'Font colour',	'FONT_COLOR_HIDE'			=> 'Hide font colour',	'FONT_HUGE'					=> 'Huge',	'FONT_LARGE'				=> 'Large',	'FONT_NORMAL'				=> 'Normal',	'FONT_SIZE'					=> 'Font size',	'FONT_SMALL'				=> 'Small',	'FONT_TINY'					=> 'Tiny',	'GENERAL_UPLOAD_ERROR'		=> 'Could not upload attachment to %s.',	'IMAGES_ARE_OFF'			=> '[img] is <em>OFF</em>',	'IMAGES_ARE_ON'				=> '[img] is <em>ON</em>',	'INVALID_FILENAME'			=> '%s is an invalid filename.',	'LOAD'						=> 'Load',	'LOAD_DRAFT'				=> 'Load draft',	'LOAD_DRAFT_EXPLAIN'		=> 'Here you are able to select the draft you want to continue writing. Your current post will be cancelled, all current post contents will be deleted. View, edit and delete drafts within your User Control Panel.',	'LOGIN_EXPLAIN_BUMP'		=> 'You need to login in order to bump topics within this forum.',	'LOGIN_EXPLAIN_DELETE'		=> 'You need to login in order to delete posts within this forum.',	'LOGIN_EXPLAIN_POST'		=> 'You need to login in order to post within this forum.',	'LOGIN_EXPLAIN_QUOTE'		=> 'You need to login in order to quote posts within this forum.',	'LOGIN_EXPLAIN_REPLY'		=> 'You need to login in order to reply to topics within this forum.',	'MAX_FONT_SIZE_EXCEEDED'	=> 'You may only use fonts up to size %1$d.',	'MAX_FLASH_HEIGHT_EXCEEDED'	=> 'Your flash files may only be up to %1$d pixels high.',	'MAX_FLASH_WIDTH_EXCEEDED'	=> 'Your flash files may only be up to %1$d pixels wide.',	'MAX_IMG_HEIGHT_EXCEEDED'	=> 'Your images may only be up to %1$d pixels high.',	'MAX_IMG_WIDTH_EXCEEDED'	=> 'Your images may only be up to %1$d pixels wide.',	'MESSAGE_BODY_EXPLAIN'		=> 'Enter your message here, it may contain no more than <strong>%d</strong> characters.',	'MESSAGE_DELETED'			=> 'This message has been deleted successfully.',	'MORE_SMILIES'				=> 'View more smilies',	'NOTIFY_REPLY'				=> 'Notify me when a reply is posted',	'NOT_UPLOADED'				=> 'File could not be uploaded.',	'NO_DELETE_POLL_OPTIONS'	=> 'You cannot delete existing poll options.',	'NO_PM_ICON'				=> 'No PM icon',	'NO_POLL_TITLE'				=> 'You have to enter a poll title.',	'NO_POST'					=> 'The requested post does not exist.',	'NO_POST_MODE'				=> 'No post mode specified.',	'PARTIAL_UPLOAD'			=> 'The uploaded file was only partially uploaded.',	'PHP_SIZE_NA'				=> 'The attachments file size is too large.<br />Could not determine the maximum size defined by PHP in php.ini.',	'PHP_SIZE_OVERRUN'			=> 'The attachments file size is too large, the maximum upload size is %1$d %2$s.<br />Please note this is set in php.ini and cannot be overridden.',	'PLACE_INLINE'				=> 'Place inline',	'POLL_DELETE'				=> 'Delete poll',	'POLL_FOR'					=> 'Run poll for',	'POLL_FOR_EXPLAIN'			=> 'Enter 0 or leave blank for a never ending poll.',	'POLL_MAX_OPTIONS'			=> 'Options per user',	'POLL_MAX_OPTIONS_EXPLAIN'	=> 'This is the number of options each user may select when voting.',	'POLL_OPTIONS'				=> 'Poll options',	'POLL_OPTIONS_EXPLAIN'		=> 'Place each option on a new line. You may enter up to <strong>%d</strong> options.',	'POLL_OPTIONS_EDIT_EXPLAIN'	=> 'Place each option on a new line. You may enter up to <strong>%d</strong> options. If you remove or add options all previous votes will be reset.',	'POLL_QUESTION'				=> 'Poll question',	'POLL_TITLE_TOO_LONG'		=> 'The poll title must contain fewer than 100 characters.',	'POLL_TITLE_COMP_TOO_LONG'	=> 'The parsed size of your poll title is too large, consider removing BBCodes or smilies.',	'POLL_VOTE_CHANGE'			=> 'Allow re-voting',	'POLL_VOTE_CHANGE_EXPLAIN'	=> 'If enabled users are able to change their vote.',	'POSTED_ATTACHMENTS'		=> 'Posted attachments',	'POST_APPROVAL_NOTIFY'		=> 'You will be notified when your post has been approved.',	'POST_CONFIRMATION'			=> 'Confirmation of post',	'POST_CONFIRM_EXPLAIN'		=> 'To prevent automated posts the board requires you to enter a confirmation code. The code is displayed in the image you should see below. If you are visually impaired or cannot otherwise read this code please contact the %sBoard Administrator%s.',	'POST_DELETED'				=> 'This message has been deleted successfully.',	'POST_EDITED'				=> 'This message has been edited successfully.',	'POST_EDITED_MOD'			=> 'This message has been edited successfully, but it will need to be approved by a moderator before it is publicly viewable.',	'POST_GLOBAL'				=> 'Global',	'POST_ICON'					=> 'Post icon',	'POST_NORMAL'				=> 'Normal',	'POST_REVIEW'				=> 'Post review',	'POST_REVIEW_EDIT'			=> 'Post review',	'POST_REVIEW_EDIT_EXPLAIN'	=> 'This post has been altered by another user while you were editing it. You may wish to review the current version of this post and adjust your edits.',	'POST_REVIEW_EXPLAIN'		=> 'At least one new post has been made to this topic. You may wish to review your post in light of this.',	'POST_STORED'				=> 'This message has been posted successfully.',	'POST_STORED_MOD'			=> 'This message has been submitted successfully, but it will need to be approved by a moderator before it is publicly viewable.',	'POST_TOPIC_AS'				=> 'Post topic as',	'PROGRESS_BAR'				=> 'Progress bar',	'QUOTE_DEPTH_EXCEEDED'		=> 'You may embed only %1$d quotes within each other.',	'SAVE'						=> 'Save',	'SAVE_DATE'					=> 'Saved at',	'SAVE_DRAFT'				=> 'Save draft',	'SAVE_DRAFT_CONFIRM'		=> 'Please note that saved drafts only include the subject and the message, any other element will be removed. Do you want to save your draft now?',	'SMILIES'					=> 'Smilies',	'SMILIES_ARE_OFF'			=> 'Smilies are <em>OFF</em>',	'SMILIES_ARE_ON'			=> 'Smilies are <em>ON</em>',	'STICKY_ANNOUNCE_TIME_LIMIT'=> 'Sticky/Announcement time limit',	'STICK_TOPIC_FOR'			=> 'Stick topic for',	'STICK_TOPIC_FOR_EXPLAIN'	=> 'Enter 0 or leave blank for a never ending Sticky/Announcement. Please note that this number is relative to the date of the post.',	'STYLES_TIP'				=> 'Tip: Styles can be applied quickly to selected text.',	'TOO_FEW_CHARS'				=> 'Your message contains too few characters.',	'TOO_FEW_CHARS_LIMIT'		=> 'Your message contains %1$d characters. The minimum number of characters you need to enter is %2$d.',	'TOO_FEW_POLL_OPTIONS'		=> 'You must enter at least two poll options.',	'TOO_MANY_ATTACHMENTS'		=> 'Cannot add another attachment, %d is the maximum.',	'TOO_MANY_CHARS'			=> 'Your message contains too many characters.',	'TOO_MANY_CHARS_POST'		=> 'Your message contains %1$d characters. The maximum number of allowed characters is %2$d.',	'TOO_MANY_CHARS_SIG'		=> 'Your signature contains %1$d characters. The maximum number of allowed characters is %2$d.',	'TOO_MANY_POLL_OPTIONS'		=> 'You have tried to enter too many poll options.',	'TOO_MANY_SMILIES'			=> 'Your message contains too many smilies. The maximum number of smilies allowed is %d.',	'TOO_MANY_URLS'				=> 'Your message contains too many URLs. The maximum number of URLs allowed is %d.',	'TOO_MANY_USER_OPTIONS'		=> 'You cannot specify more options per user than existing poll options.',	'TOPIC_BUMPED'				=> 'Topic has been bumped successfully.',	'UNAUTHORISED_BBCODE'		=> 'You cannot use certain BBCodes: %s.',	'UNGLOBALISE_EXPLAIN'		=> 'To switch this topic back from being global to a normal topic, you need to select the forum you wish this topic to be displayed.',	'UPDATE_COMMENT'			=> 'Update comment',	'URL_INVALID'				=> 'The URL you specified is invalid.',	'URL_NOT_FOUND'				=> 'The file specified could not be found.',	'URL_IS_OFF'				=> '[url] is <em>OFF</em>',	'URL_IS_ON'					=> '[url] is <em>ON</em>',	'USER_CANNOT_BUMP'			=> 'You cannot bump topics in this forum.',	'USER_CANNOT_DELETE'		=> 'You cannot delete posts in this forum.',	'USER_CANNOT_EDIT'			=> 'You cannot edit posts in this forum.',	'USER_CANNOT_REPLY'			=> 'You cannot reply in this forum.',	'USER_CANNOT_FORUM_POST'	=> 'You are not able to do posting operations on this forum due to the forum type not supporting it.',	'VIEW_MESSAGE'				=> '%sView your submitted message%s',	'VIEW_PRIVATE_MESSAGE'		=> '%sView your submitted private message%s',	'WRONG_FILESIZE'			=> 'The file is too big, maximum allowed size is %1d %2s.',	'WRONG_SIZE'				=> 'The image must be at least %1$d pixels wide, %2$d pixels high and at most %3$d pixels wide and %4$d pixels high. The submitted image is %5$d pixels wide and %6$d pixels high.',));?>
<?php/**** @package install* @version $Id$* @copyright (c) 2007 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** A wrapper function for the normalizer which takes care of including the class if required and modifies the passed strings* to be in NFC (Normalization Form Composition).** @param	mixed	$strings	a string or an array of strings to normalize* @return	mixed				the normalized content, preserving array keys if array given.*/function utf8_new_normalize_nfc($strings){	if (empty($strings))	{		return $strings;	}	if (!is_array($strings))	{		utf_new_normalizer::nfc($strings);	}	else if (is_array($strings))	{		foreach ($strings as $key => $string)		{			if (is_array($string))			{				foreach ($string as $_key => $_string)				{					utf_new_normalizer::nfc($strings[$key][$_key]);				}			}			else			{				utf_new_normalizer::nfc($strings[$key]);			}		}	}	return $strings;}class utf_new_normalizer{	/**	* Validate, cleanup and normalize a string	*	* The ultimate convenience function! Clean up invalid UTF-8 sequences,	* and convert to Normal Form C, canonical composition.	*	* @param	string	&$str	The dirty string	* @return	string			The same string, all shiny and cleaned-up	*/	function cleanup(&$str)	{		// The string below is the list of all autorized characters, sorted by frequency in latin text		$pos = strspn($str, "\x20\x65\x69\x61\x73\x6E\x74\x72\x6F\x6C\x75\x64\x5D\x5B\x63\x6D\x70\x27\x0A\x67\x7C\x68\x76\x2E\x66\x62\x2C\x3A\x3D\x2D\x71\x31\x30\x43\x32\x2A\x79\x78\x29\x28\x4C\x39\x41\x53\x2F\x50\x22\x45\x6A\x4D\x49\x6B\x33\x3E\x35\x54\x3C\x44\x34\x7D\x42\x7B\x38\x46\x77\x52\x36\x37\x55\x47\x4E\x3B\x4A\x7A\x56\x23\x48\x4F\x57\x5F\x26\x21\x4B\x3F\x58\x51\x25\x59\x5C\x09\x5A\x2B\x7E\x5E\x24\x40\x60\x7F\x0D");		$len = strlen($str);		if ($pos == $len)		{			// ASCII strings with no special chars return immediately			return;		}		// Note: we do not check for $GLOBALS['utf_canonical_decomp']. It is assumed they are always loaded together		if (!isset($GLOBALS['utf_nfc_qc']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_nfc_qc.' . $phpEx);		}		if (!isset($GLOBALS['utf_canonical_decomp']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_canonical_decomp.' . $phpEx);		}		// Replace any byte in the range 0x00..0x1F, except for \r, \n and \t		// We replace those characters with a 0xFF byte, which is illegal in UTF-8 and will in turn be replaced with a UTF replacement char		$str = strtr(			$str,			"\x00\x01\x02\x03\x04\x05\x06\x07\x08\x0B\x0C\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F",			"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"		);		$str = utf_new_normalizer::recompose($str, $pos, $len, $GLOBALS['utf_nfc_qc'], $GLOBALS['utf_canonical_decomp']);	}	/**	* Validate and normalize a UTF string to NFC	*	* @param	string	&$str	Unchecked UTF string	* @return	string			The string, validated and in normal form	*/	function nfc(&$str)	{		$pos = strspn($str, UTF8_ASCII_RANGE);		$len = strlen($str);		if ($pos == $len)		{			// ASCII strings return immediately			return;		}		if (!isset($GLOBALS['utf_nfc_qc']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_nfc_qc.' . $phpEx);		}		if (!isset($GLOBALS['utf_canonical_decomp']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_canonical_decomp.' . $phpEx);		}		$str = utf_new_normalizer::recompose($str, $pos, $len, $GLOBALS['utf_nfc_qc'], $GLOBALS['utf_canonical_decomp']);	}	/**	* Validate and normalize a UTF string to NFKC	*	* @param	string	&$str	Unchecked UTF string	* @return	string			The string, validated and in normal form	*/	function nfkc(&$str)	{		$pos = strspn($str, UTF8_ASCII_RANGE);		$len = strlen($str);		if ($pos == $len)		{			// ASCII strings return immediately			return;		}		if (!isset($GLOBALS['utf_nfkc_qc']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_nfkc_qc.' . $phpEx);		}		if (!isset($GLOBALS['utf_compatibility_decomp']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_compatibility_decomp.' . $phpEx);		}		$str = utf_new_normalizer::recompose($str, $pos, $len, $GLOBALS['utf_nfkc_qc'], $GLOBALS['utf_compatibility_decomp']);	}	/**	* Recompose a UTF string	*	* @param	string	$str			Unchecked UTF string	* @param	integer	$pos			Position of the first UTF char (in bytes)	* @param	integer	$len			Length of the string (in bytes)	* @param	array	&$qc			Quick-check array, passed by reference but never modified	* @param	array	&$decomp_map	Decomposition mapping, passed by reference but never modified	* @return	string					The string, validated and recomposed	*	* @access	private	*/	function recompose($str, $pos, $len, &$qc, &$decomp_map)	{		global $utf_canonical_comp;		// Load the canonical composition table		if (!isset($utf_canonical_comp))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_canonical_comp.' . $phpEx);		}		return utf_normalizer::recompose($str, $pos, $len, $qc, $decomp_map);	}}?>
<?php/**** acp_users [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ADMIN_SIG_PREVIEW'		=> 'Signature preview',	'AT_LEAST_ONE_FOUNDER'	=> 'You are not able to change this founder to a normal user. There needs to be at least one founder enabled for this board. If you want to change this users founder status, promote another user to be a founder first.',	'BAN_ALREADY_ENTERED'	=> 'The ban had been previously entered successfully. The ban list has not been updated.',	'BAN_SUCCESSFUL'		=> 'Ban entered successfully.',	'CANNOT_BAN_ANONYMOUS'			=> 'You are not allowed to ban the anonymous account. Permissions for anonymous users can be set under the Permissions tab.',	'CANNOT_BAN_FOUNDER'			=> 'You are not allowed to ban founder accounts.',	'CANNOT_BAN_YOURSELF'			=> 'You are not allowed to ban yourself.',	'CANNOT_DEACTIVATE_BOT'			=> 'You are not allowed to deactivate bot accounts. Please deactivate the bot within the bots page instead.',	'CANNOT_DEACTIVATE_FOUNDER'		=> 'You are not allowed to deactivate founder accounts.',	'CANNOT_DEACTIVATE_YOURSELF'	=> 'You are not allowed to deactivate your own account.',	'CANNOT_FORCE_REACT_BOT'		=> 'You are not allowed to force reactivation on bot accounts. Please reactivate the bot within the bots page instead.',	'CANNOT_FORCE_REACT_FOUNDER'	=> 'You are not allowed to force reactivation on founder accounts.',	'CANNOT_FORCE_REACT_YOURSELF'	=> 'You are not allowed to force reactivation of your own account.',	'CANNOT_REMOVE_ANONYMOUS'		=> 'You are not able to remove the guest user account.',	'CANNOT_REMOVE_YOURSELF'		=> 'You are not allowed to remove your own user account.',	'CANNOT_SET_FOUNDER_IGNORED'	=> 'You are not able to promote ignored users to be founders.',	'CANNOT_SET_FOUNDER_INACTIVE'	=> 'You need to activate users before you promote them to founders, only activated users are able to be promoted.',	'CONFIRM_EMAIL_EXPLAIN'			=> 'You only need to specify this if you are changing the users e-mail address.',	'DELETE_POSTS'			=> 'Delete posts',	'DELETE_USER'			=> 'Delete user',	'DELETE_USER_EXPLAIN'	=> 'Please note that deleting a user is final, they cannot be recovered.',	'FORCE_REACTIVATION_SUCCESS'	=> 'Successfully forced reactivation.',	'FOUNDER'						=> 'Founder',	'FOUNDER_EXPLAIN'				=> 'Founders have all administrative permissions and can never be banned, deleted or altered by non-founder members.',	'GROUP_APPROVE'					=> 'Approve member',	'GROUP_DEFAULT'					=> 'Make group default for member',	'GROUP_DELETE'					=> 'Remove member from group',	'GROUP_DEMOTE'					=> 'Demote group leader',	'GROUP_PROMOTE'					=> 'Promote to group leader',	'IP_WHOIS_FOR'			=> 'IP whois for %s',	'LAST_ACTIVE'			=> 'Last active',	'MOVE_POSTS_EXPLAIN'	=> 'Please select the forum to which you wish to move all the posts this user has made.',	'NO_SPECIAL_RANK'		=> 'No special rank assigned',	'NO_WARNINGS'			=> 'No warnings.',	'NOT_MANAGE_FOUNDER'	=> 'You tried to manage a user with founder status. Only founders are allowed to manage other founders.',	'QUICK_TOOLS'			=> 'Quick tools',	'REGISTERED'			=> 'Registered',	'REGISTERED_IP'			=> 'Registered from IP',	'RETAIN_POSTS'			=> 'Retain posts',	'SELECT_FORM'			=> 'Select form',	'SELECT_USER'			=> 'Select user',	'USER_ADMIN'					=> 'User administration',	'USER_ADMIN_ACTIVATE'			=> 'Activate account',	'USER_ADMIN_ACTIVATED'			=> 'User activated successfully.',	'USER_ADMIN_AVATAR_REMOVED'		=> 'Successfully removed avatar from user account.',	'USER_ADMIN_BAN_EMAIL'			=> 'Ban by e-mail',	'USER_ADMIN_BAN_EMAIL_REASON'	=> 'E-mail address banned via user management',	'USER_ADMIN_BAN_IP'				=> 'Ban by IP',	'USER_ADMIN_BAN_IP_REASON'		=> 'IP banned via user management',	'USER_ADMIN_BAN_NAME_REASON'	=> 'Username banned via user management',	'USER_ADMIN_BAN_USER'			=> 'Ban by username',	'USER_ADMIN_DEACTIVATE'			=> 'Deactivate account',	'USER_ADMIN_DEACTIVED'			=> 'User deactivated successfully.',	'USER_ADMIN_DEL_ATTACH'			=> 'Delete all attachments',	'USER_ADMIN_DEL_AVATAR'			=> 'Delete avatar',	'USER_ADMIN_DEL_OUTBOX'			=> 'Empty PM outbox',	'USER_ADMIN_DEL_POSTS'			=> 'Delete all posts',	'USER_ADMIN_DEL_SIG'			=> 'Delete signature',	'USER_ADMIN_EXPLAIN'			=> 'Here you can change your users information and certain specific options.',	'USER_ADMIN_FORCE'				=> 'Force reactivation',	'USER_ADMIN_LEAVE_NR'			=> 'Remove from Newly Registered',	'USER_ADMIN_MOVE_POSTS'			=> 'Move all posts',	'USER_ADMIN_SIG_REMOVED'		=> 'Successfully removed signature from user account.',	'USER_ATTACHMENTS_REMOVED'		=> 'Successfully removed all attachments made by this user.',	'USER_AVATAR_NOT_ALLOWED'		=> 'The avatar cannot be displayed because avatars have been disallowed.',	'USER_AVATAR_UPDATED'			=> 'Successfully updated user avatars details.',	'USER_AVATAR_TYPE_NOT_ALLOWED'	=> 'The current avatar cannot be displayed because its type has been disallowed.',	'USER_CUSTOM_PROFILE_FIELDS'	=> 'Custom profile fields',	'USER_DELETED'					=> 'User deleted successfully.',	'USER_GROUP_ADD'				=> 'Add user to group',	'USER_GROUP_NORMAL'				=> 'User defined groups user is a member of',	'USER_GROUP_PENDING'			=> 'Groups user is in pending mode',	'USER_GROUP_SPECIAL'			=> 'Pre-defined groups user is a member of',	'USER_LIFTED_NR'				=> 'Successfully removed the users newly registered status.',	'USER_NO_ATTACHMENTS'			=> 'There are no attached files to display.',	'USER_OUTBOX_EMPTIED'			=> 'Successfully emptied users private message outbox.',	'USER_OUTBOX_EMPTY'				=> 'The users private message outbox was already empty.',	'USER_OVERVIEW_UPDATED'			=> 'User details updated.',	'USER_POSTS_DELETED'			=> 'Successfully removed all posts made by this user.',	'USER_POSTS_MOVED'				=> 'Successfully moved users posts to target forum.',	'USER_PREFS_UPDATED'			=> 'User preferences updated.',	'USER_PROFILE'					=> 'User profile',	'USER_PROFILE_UPDATED'			=> 'User profile updated.',	'USER_RANK'						=> 'User rank',	'USER_RANK_UPDATED'				=> 'User rank updated.',	'USER_SIG_UPDATED'				=> 'User signature successfully updated.',	'USER_WARNING_LOG_DELETED'		=> 'No information available. Possibly the log entry has been deleted.',	'USER_TOOLS'					=> 'Basic tools',));?>
<?php/**** @package search* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @ignore*/define('SEARCH_RESULT_NOT_IN_CACHE', 0);define('SEARCH_RESULT_IN_CACHE', 1);define('SEARCH_RESULT_INCOMPLETE', 2);/*** search_backend* optional base class for search plugins providing simple caching based on ACM* and functions to retrieve ignore_words and synonyms* @package search*/class search_backend{	var $ignore_words = array();	var $match_synonym = array();	var $replace_synonym = array();	function search_backend(&$error)	{		// This class cannot be used as a search plugin		$error = true;	}	/**	* Retrieves a language dependend list of words that should be ignored by the search	*/	function get_ignore_words()	{		if (!sizeof($this->ignore_words))		{			global $user, $phpEx;			$words = array();			if (file_exists("{$user->lang_path}{$user->lang_name}/search_ignore_words.$phpEx"))			{				// include the file containing ignore words				include("{$user->lang_path}{$user->lang_name}/search_ignore_words.$phpEx");			}			$this->ignore_words = $words;			unset($words);		}	}	/**	* Stores a list of synonyms that should be replaced in $this->match_synonym and $this->replace_synonym and caches them	*/	function get_synonyms()	{		if (!sizeof($this->match_synonym))		{			global $user, $phpEx;			$synonyms = array();			if (file_exists("{$user->lang_path}{$user->lang_name}/search_synonyms.$phpEx"))			{				// include the file containing synonyms				include("{$user->lang_path}{$user->lang_name}/search_synonyms.$phpEx");			}			$this->match_synonym = array_keys($synonyms);			$this->replace_synonym = array_values($synonyms);			unset($synonyms);		}	}	/**	* Retrieves cached search results	*	* @param int &$result_count will contain the number of all results for the search (not only for the current page)	* @param array &$id_ary is filled with the ids belonging to the requested page that are stored in the cache	*	* @return int SEARCH_RESULT_NOT_IN_CACHE or SEARCH_RESULT_IN_CACHE or SEARCH_RESULT_INCOMPLETE	*/	function obtain_ids($search_key, &$result_count, &$id_ary, $start, $per_page, $sort_dir)	{		global $cache;		if (!($stored_ids = $cache->get('_search_results_' . $search_key)))		{			// no search results cached for this search_key			return SEARCH_RESULT_NOT_IN_CACHE;		}		else		{			$result_count = $stored_ids[-1];			$reverse_ids = ($stored_ids[-2] != $sort_dir) ? true : false;			$complete = true;			// change the start to the actual end of the current request if the sort direction differs			// from the dirction in the cache and reverse the ids later			if ($reverse_ids)			{				$start = $result_count - $start - $per_page;				// the user requested a page past the last index				if ($start < 0)				{					return SEARCH_RESULT_NOT_IN_CACHE;				}			}			for ($i = $start, $n = $start + $per_page; ($i < $n) && ($i < $result_count); $i++)			{				if (!isset($stored_ids[$i]))				{					$complete = false;				}				else				{					$id_ary[] = $stored_ids[$i];				}			}			unset($stored_ids);			if ($reverse_ids)			{				$id_ary = array_reverse($id_ary);			}			if (!$complete)			{				return SEARCH_RESULT_INCOMPLETE;			}			return SEARCH_RESULT_IN_CACHE;		}	}	/**	* Caches post/topic ids	*	* @param array &$id_ary contains a list of post or topic ids that shall be cached, the first element	* 	must have the absolute index $start in the result set.	*/	function save_ids($search_key, $keywords, $author_ary, $result_count, &$id_ary, $start, $sort_dir)	{		global $cache, $config, $db, $user;		$length = min(sizeof($id_ary), $config['search_block_size']);		// nothing to cache so exit		if (!$length)		{			return;		}		$store_ids = array_slice($id_ary, 0, $length);		// create a new resultset if there is none for this search_key yet		// or add the ids to the existing resultset		if (!($store = $cache->get('_search_results_' . $search_key)))		{			// add the current keywords to the recent searches in the cache which are listed on the search page			if (!empty($keywords) || sizeof($author_ary))			{				$sql = 'SELECT search_time					FROM ' . SEARCH_RESULTS_TABLE . '					WHERE search_key = \'' . $db->sql_escape($search_key) . '\'';				$result = $db->sql_query($sql);				if (!$db->sql_fetchrow($result))				{					$sql_ary = array(						'search_key'		=> $search_key,						'search_time'		=> time(),						'search_keywords'	=> $keywords,						'search_authors'	=> ' ' . implode(' ', $author_ary) . ' '					);					$sql = 'INSERT INTO ' . SEARCH_RESULTS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);					$db->sql_query($sql);				}				$db->sql_freeresult($result);			}			$sql = 'UPDATE ' . USERS_TABLE . '				SET user_last_search = ' . time() . '				WHERE user_id = ' . $user->data['user_id'];			$db->sql_query($sql);			$store = array(-1 => $result_count, -2 => $sort_dir);			$id_range = range($start, $start + $length - 1);		}		else		{			// we use one set of results for both sort directions so we have to calculate the indizes			// for the reversed array and we also have to reverse the ids themselves			if ($store[-2] != $sort_dir)			{				$store_ids = array_reverse($store_ids);				$id_range = range($store[-1] - $start - $length, $store[-1] - $start - 1);			}			else			{				$id_range = range($start, $start + $length - 1);			}		}		$store_ids = array_combine($id_range, $store_ids);		// append the ids		if (is_array($store_ids))		{			$store += $store_ids;			// if the cache is too big			if (sizeof($store) - 2 > 20 * $config['search_block_size'])			{				// remove everything in front of two blocks in front of the current start index				for ($i = 0, $n = $id_range[0] - 2 * $config['search_block_size']; $i < $n; $i++)				{					if (isset($store[$i]))					{						unset($store[$i]);					}				}				// remove everything after two blocks after the current stop index				end($id_range);				for ($i = $store[-1] - 1, $n = current($id_range) + 2 * $config['search_block_size']; $i > $n; $i--)				{					if (isset($store[$i]))					{						unset($store[$i]);					}				}			}			$cache->put('_search_results_' . $search_key, $store, $config['search_store_results']);			$sql = 'UPDATE ' . SEARCH_RESULTS_TABLE . '				SET search_time = ' . time() . '				WHERE search_key = \'' . $db->sql_escape($search_key) . '\'';			$db->sql_query($sql);		}		unset($store);		unset($store_ids);		unset($id_range);	}	/**	* Removes old entries from the search results table and removes searches with keywords that contain a word in $words.	*/	function destroy_cache($words, $authors = false)	{		global $db, $cache, $config;		// clear all searches that searched for the specified words		if (sizeof($words))		{			$sql_where = '';			foreach ($words as $word)			{				$sql_where .= " OR search_keywords " . $db->sql_like_expression($db->any_char . $word . $db->any_char);			}			$sql = 'SELECT search_key				FROM ' . SEARCH_RESULTS_TABLE . "				WHERE search_keywords LIKE '%*%' $sql_where";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$cache->destroy('_search_results_' . $row['search_key']);			}			$db->sql_freeresult($result);		}		// clear all searches that searched for the specified authors		if (is_array($authors) && sizeof($authors))		{			$sql_where = '';			foreach ($authors as $author)			{				$sql_where .= (($sql_where) ? ' OR ' : '') . 'search_authors LIKE \'% ' . (int) $author . ' %\'';			}			$sql = 'SELECT search_key				FROM ' . SEARCH_RESULTS_TABLE . "				WHERE $sql_where";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$cache->destroy('_search_results_' . $row['search_key']);			}			$db->sql_freeresult($result);		}		$sql = 'DELETE			FROM ' . SEARCH_RESULTS_TABLE . '			WHERE search_time < ' . (time() - $config['search_store_results']);		$db->sql_query($sql);	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ucp_main* UCP Front Panel* @package ucp*/class ucp_main{	var $p_master;	var $u_action;	function ucp_main(&$p_master)	{		$this->p_master = &$p_master;	}	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $phpbb_root_path, $phpEx;		switch ($mode)		{			case 'front':				$user->add_lang('memberlist');				$sql_from = TOPICS_TABLE . ' t ';				$sql_select = '';				if ($config['load_db_track'])				{					$sql_from .= ' LEFT JOIN ' . TOPICS_POSTED_TABLE . ' tp ON (tp.topic_id = t.topic_id						AND tp.user_id = ' . $user->data['user_id'] . ')';					$sql_select .= ', tp.topic_posted';				}				if ($config['load_db_lastread'])				{					$sql_from .= ' LEFT JOIN ' . TOPICS_TRACK_TABLE . ' tt ON (tt.topic_id = t.topic_id						AND tt.user_id = ' . $user->data['user_id'] . ')';					$sql_select .= ', tt.mark_time';				}				$topic_type = $user->lang['VIEW_TOPIC_GLOBAL'];				$folder = 'global_read';				$folder_new = 'global_unread';				// Get cleaned up list... return only those forums not having the f_read permission				$forum_ary = $auth->acl_getf('!f_read', true);				$forum_ary = array_unique(array_keys($forum_ary));				// Determine first forum the user is able to read into - for global announcement link				$sql = 'SELECT forum_id					FROM ' . FORUMS_TABLE . '					WHERE forum_type = ' . FORUM_POST;				if (sizeof($forum_ary))				{					$sql .= ' AND ' . $db->sql_in_set('forum_id', $forum_ary, true);				}				$result = $db->sql_query_limit($sql, 1);				$g_forum_id = (int) $db->sql_fetchfield('forum_id');				$db->sql_freeresult($result);				$sql = "SELECT t.* $sql_select					FROM $sql_from					WHERE t.forum_id = 0						AND t.topic_type = " . POST_GLOBAL . '					ORDER BY t.topic_last_post_time DESC';				$topic_list = $rowset = array();				// If the user can't see any forums, he can't read any posts because fid of 0 is invalid				if ($g_forum_id)				{					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$topic_list[] = $row['topic_id'];						$rowset[$row['topic_id']] = $row;					}					$db->sql_freeresult($result);				}				$topic_tracking_info = array();				if ($config['load_db_lastread'])				{					$topic_tracking_info = get_topic_tracking(0, $topic_list, $rowset, false, $topic_list);				}				else				{					$topic_tracking_info = get_complete_topic_tracking(0, $topic_list, $topic_list);				}				foreach ($topic_list as $topic_id)				{					$row = &$rowset[$topic_id];					$forum_id = $row['forum_id'];					$topic_id = $row['topic_id'];					$unread_topic = (isset($topic_tracking_info[$topic_id]) && $row['topic_last_post_time'] > $topic_tracking_info[$topic_id]) ? true : false;					$folder_img = ($unread_topic) ? $folder_new : $folder;					$folder_alt = ($unread_topic) ? 'UNREAD_POSTS' : (($row['topic_status'] == ITEM_LOCKED) ? 'TOPIC_LOCKED' : 'NO_UNREAD_POSTS');					if ($row['topic_status'] == ITEM_LOCKED)					{						$folder_img .= '_locked';					}					// Posted image?					if (!empty($row['topic_posted']) && $row['topic_posted'])					{						$folder_img .= '_mine';					}					$template->assign_block_vars('topicrow', array(						'FORUM_ID'					=> $forum_id,						'TOPIC_ID'					=> $topic_id,						'TOPIC_AUTHOR'				=> get_username_string('username', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),						'TOPIC_AUTHOR_COLOUR'		=> get_username_string('colour', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),						'TOPIC_AUTHOR_FULL'			=> get_username_string('full', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),						'FIRST_POST_TIME'			=> $user->format_date($row['topic_time']),						'LAST_POST_SUBJECT'			=> censor_text($row['topic_last_post_subject']),						'LAST_POST_TIME'			=> $user->format_date($row['topic_last_post_time']),						'LAST_VIEW_TIME'			=> $user->format_date($row['topic_last_view_time']),						'LAST_POST_AUTHOR'			=> get_username_string('username', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),						'LAST_POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),						'LAST_POST_AUTHOR_FULL'		=> get_username_string('full', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),						'TOPIC_TITLE'				=> censor_text($row['topic_title']),						'TOPIC_TYPE'				=> $topic_type,						'TOPIC_FOLDER_IMG'		=> $user->img($folder_img, $folder_alt),						'TOPIC_FOLDER_IMG_SRC'	=> $user->img($folder_img, $folder_alt, false, '', 'src'),						'ATTACH_ICON_IMG'		=> ($auth->acl_get('u_download') && $auth->acl_get('f_download', $forum_id) && $row['topic_attachment']) ? $user->img('icon_topic_attach', '') : '',						'S_USER_POSTED'		=> (!empty($row['topic_posted']) && $row['topic_posted']) ? true : false,						'S_UNREAD'			=> $unread_topic,						'U_TOPIC_AUTHOR'		=> get_username_string('profile', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),						'U_LAST_POST'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$g_forum_id&amp;t=$topic_id&amp;p=" . $row['topic_last_post_id']) . '#p' . $row['topic_last_post_id'],						'U_LAST_POST_AUTHOR'	=> get_username_string('profile', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),						'U_NEWEST_POST'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$g_forum_id&amp;t=$topic_id&amp;view=unread") . '#unread',						'U_VIEW_TOPIC'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$g_forum_id&amp;t=$topic_id"))					);				}				if ($config['load_user_activity'])				{					if (!function_exists('display_user_activity'))					{						include_once($phpbb_root_path . 'includes/functions_display.' . $phpEx);					}					display_user_activity($user->data);				}				// Do the relevant calculations				$memberdays = max(1, round((time() - $user->data['user_regdate']) / 86400));				$posts_per_day = $user->data['user_posts'] / $memberdays;				$percentage = ($config['num_posts']) ? min(100, ($user->data['user_posts'] / $config['num_posts']) * 100) : 0;				$template->assign_vars(array(					'USER_COLOR'		=> (!empty($user->data['user_colour'])) ? $user->data['user_colour'] : '',					'JOINED'			=> $user->format_date($user->data['user_regdate']),					'VISITED'			=> (empty($last_visit)) ? ' - ' : $user->format_date($last_visit),					'WARNINGS'			=> ($user->data['user_warnings']) ? $user->data['user_warnings'] : 0,					'POSTS'				=> ($user->data['user_posts']) ? $user->data['user_posts'] : 0,					'POSTS_DAY'			=> sprintf($user->lang['POST_DAY'], $posts_per_day),					'POSTS_PCT'			=> sprintf($user->lang['POST_PCT'], $percentage),					'OCCUPATION'	=> (!empty($row['user_occ'])) ? $row['user_occ'] : '',					'INTERESTS'		=> (!empty($row['user_interests'])) ? $row['user_interests'] : '',//					'S_GROUP_OPTIONS'	=> $group_options,					'U_SEARCH_USER'		=> ($auth->acl_get('u_search')) ? append_sid("{$phpbb_root_path}search.$phpEx", 'author_id=' . $user->data['user_id'] . '&amp;sr=posts') : '',				));			break;			case 'subscribed':				include($phpbb_root_path . 'includes/functions_display.' . $phpEx);				$user->add_lang('viewforum');				add_form_key('ucp_front_subscribed');				$unwatch = (isset($_POST['unwatch'])) ? true : false;				if ($unwatch)				{					if (check_form_key('ucp_front_subscribed'))					{						$forums = array_keys(request_var('f', array(0 => 0)));						$topics = array_keys(request_var('t', array(0 => 0)));						$msg = '';						if (sizeof($forums) || sizeof($topics))						{							$l_unwatch = '';							if (sizeof($forums))							{								$sql = 'DELETE FROM ' . FORUMS_WATCH_TABLE . '									WHERE ' . $db->sql_in_set('forum_id', $forums) . '										AND user_id = ' . $user->data['user_id'];								$db->sql_query($sql);								$l_unwatch .= '_FORUMS';							}							if (sizeof($topics))							{								$sql = 'DELETE FROM ' . TOPICS_WATCH_TABLE . '									WHERE ' . $db->sql_in_set('topic_id', $topics) . '										AND user_id = ' . $user->data['user_id'];								$db->sql_query($sql);								$l_unwatch .= '_TOPICS';							}							$msg = $user->lang['UNWATCHED' . $l_unwatch];						}						else						{							$msg = $user->lang['NO_WATCHED_SELECTED'];						}					}					else					{						$msg = $user->lang['FORM_INVALID'];					}					$message = $msg . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . append_sid("{$phpbb_root_path}ucp.$phpEx", "i=$id&amp;mode=subscribed") . '">', '</a>');					meta_refresh(3, append_sid("{$phpbb_root_path}ucp.$phpEx", "i=$id&amp;mode=subscribed"));					trigger_error($message);				}				$forbidden_forums = array();				if ($config['allow_forum_notify'])				{					$forbidden_forums = $auth->acl_getf('!f_read', true);					$forbidden_forums = array_unique(array_keys($forbidden_forums));					$sql_array = array(						'SELECT'	=> 'f.*',						'FROM'		=> array(							FORUMS_WATCH_TABLE	=> 'fw',							FORUMS_TABLE		=> 'f'						),						'WHERE'		=> 'fw.user_id = ' . $user->data['user_id'] . '							AND f.forum_id = fw.forum_id							AND ' . $db->sql_in_set('f.forum_id', $forbidden_forums, true, true),						'ORDER_BY'	=> 'left_id'					);					if ($config['load_db_lastread'])					{						$sql_array['LEFT_JOIN'] = array(							array(								'FROM'	=> array(FORUMS_TRACK_TABLE => 'ft'),								'ON'	=> 'ft.user_id = ' . $user->data['user_id'] . ' AND ft.forum_id = f.forum_id'							)						);						$sql_array['SELECT'] .= ', ft.mark_time ';					}					else					{						$tracking_topics = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';						$tracking_topics = ($tracking_topics) ? tracking_unserialize($tracking_topics) : array();					}					$sql = $db->sql_build_query('SELECT', $sql_array);					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$forum_id = $row['forum_id'];						if ($config['load_db_lastread'])						{							$forum_check = (!empty($row['mark_time'])) ? $row['mark_time'] : $user->data['user_lastmark'];						}						else						{							$forum_check = (isset($tracking_topics['f'][$forum_id])) ? (int) (base_convert($tracking_topics['f'][$forum_id], 36, 10) + $config['board_startdate']) : $user->data['user_lastmark'];						}						$unread_forum = ($row['forum_last_post_time'] > $forum_check) ? true : false;						// Which folder should we display?						if ($row['forum_status'] == ITEM_LOCKED)						{							$folder_image = ($unread_forum) ? 'forum_unread_locked' : 'forum_read_locked';							$folder_alt = 'FORUM_LOCKED';						}						else						{							$folder_image = ($unread_forum) ? 'forum_unread' : 'forum_read';							$folder_alt = ($unread_forum) ? 'UNREAD_POSTS' : 'NO_UNREAD_POSTS';						}						// Create last post link information, if appropriate						if ($row['forum_last_post_id'])						{							$last_post_time = $user->format_date($row['forum_last_post_time']);							$last_post_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;p=" . $row['forum_last_post_id']) . '#p' . $row['forum_last_post_id'];						}						else						{							$last_post_time = $last_post_url = '';						}						$template->assign_block_vars('forumrow', array(							'FORUM_ID'				=> $forum_id,							'FORUM_FOLDER_IMG'		=> $user->img($folder_image, $folder_alt),							'FORUM_FOLDER_IMG_SRC'	=> $user->img($folder_image, $folder_alt, false, '', 'src'),							'FORUM_IMAGE'			=> ($row['forum_image']) ? '<img src="' . $phpbb_root_path . $row['forum_image'] . '" alt="' . $user->lang[$folder_alt] . '" />' : '',							'FORUM_IMAGE_SRC'		=> ($row['forum_image']) ? $phpbb_root_path . $row['forum_image'] : '',							'FORUM_NAME'			=> $row['forum_name'],							'FORUM_DESC'			=> generate_text_for_display($row['forum_desc'], $row['forum_desc_uid'], $row['forum_desc_bitfield'], $row['forum_desc_options']),							'LAST_POST_SUBJECT'		=> $row['forum_last_post_subject'],							'LAST_POST_TIME'		=> $last_post_time,							'LAST_POST_AUTHOR'			=> get_username_string('username', $row['forum_last_poster_id'], $row['forum_last_poster_name'], $row['forum_last_poster_colour']),							'LAST_POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['forum_last_poster_id'], $row['forum_last_poster_name'], $row['forum_last_poster_colour']),							'LAST_POST_AUTHOR_FULL'		=> get_username_string('full', $row['forum_last_poster_id'], $row['forum_last_poster_name'], $row['forum_last_poster_colour']),							'U_LAST_POST_AUTHOR'		=> get_username_string('profile', $row['forum_last_poster_id'], $row['forum_last_poster_name'], $row['forum_last_poster_colour']),							'U_LAST_POST'			=> $last_post_url,							'U_VIEWFORUM'			=> append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $row['forum_id']))						);					}					$db->sql_freeresult($result);				}				// Subscribed Topics				if ($config['allow_topic_notify'])				{					if (empty($forbidden_forums))					{						$forbidden_forums = $auth->acl_getf('!f_read', true);						$forbidden_forums = array_unique(array_keys($forbidden_forums));					}					$this->assign_topiclist('subscribed', $forbidden_forums);				}				$template->assign_vars(array(					'S_TOPIC_NOTIFY'		=> $config['allow_topic_notify'],					'S_FORUM_NOTIFY'		=> $config['allow_forum_notify'],				));			break;			case 'bookmarks':				if (!$config['allow_bookmarks'])				{					$template->assign_vars(array(						'S_NO_DISPLAY_BOOKMARKS'	=> true)					);					break;				}				include($phpbb_root_path . 'includes/functions_display.' . $phpEx);				$user->add_lang('viewforum');				if (isset($_POST['unbookmark']))				{					$s_hidden_fields = array('unbookmark' => 1);					$topics = (isset($_POST['t'])) ? array_keys(request_var('t', array(0 => 0))) : array();					$url = $this->u_action;					if (!sizeof($topics))					{						trigger_error('NO_BOOKMARKS_SELECTED');					}					foreach ($topics as $topic_id)					{						$s_hidden_fields['t'][$topic_id] = 1;					}					if (confirm_box(true))					{						$sql = 'DELETE FROM ' . BOOKMARKS_TABLE . '							WHERE user_id = ' . $user->data['user_id'] . '								AND ' . $db->sql_in_set('topic_id', $topics);						$db->sql_query($sql);						meta_refresh(3, $url);						$message = $user->lang['BOOKMARKS_REMOVED'] . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $url . '">', '</a>');						trigger_error($message);					}					else					{						confirm_box(false, 'REMOVE_SELECTED_BOOKMARKS', build_hidden_fields($s_hidden_fields));					}				}				$forbidden_forums = $auth->acl_getf('!f_read', true);				$forbidden_forums = array_unique(array_keys($forbidden_forums));				$this->assign_topiclist('bookmarks', $forbidden_forums);			break;			case 'drafts':				$pm_drafts = ($this->p_master->p_name == 'pm') ? true : false;				$template->assign_var('S_SHOW_DRAFTS', true);				$user->add_lang('posting');				$edit		= (isset($_REQUEST['edit'])) ? true : false;				$submit		= (isset($_POST['submit'])) ? true : false;				$draft_id	= ($edit) ? intval($_REQUEST['edit']) : 0;				$delete		= (isset($_POST['delete'])) ? true : false;				$s_hidden_fields = ($edit) ? '<input type="hidden" name="edit" value="' . $draft_id . '" />' : '';				$draft_subject = $draft_message = '';				add_form_key('ucp_draft');				if ($delete)				{					if (check_form_key('ucp_draft'))					{						$drafts = array_keys(request_var('d', array(0 => 0)));						if (sizeof($drafts))						{							$sql = 'DELETE FROM ' . DRAFTS_TABLE . '								WHERE ' . $db->sql_in_set('draft_id', $drafts) . '									AND user_id = ' . $user->data['user_id'];							$db->sql_query($sql);						}						$msg = $user->lang['DRAFTS_DELETED'];						unset($drafts);					}					else					{						$msg = $user->lang['FORM_INVALID'];					}					$message = $msg . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $this->u_action . '">', '</a>');					meta_refresh(3, $this->u_action);					trigger_error($message);				}				if ($submit && $edit)				{					$draft_subject = utf8_normalize_nfc(request_var('subject', '', true));					$draft_message = utf8_normalize_nfc(request_var('message', '', true));					if (check_form_key('ucp_draft'))					{						if ($draft_message && $draft_subject)						{							$draft_row = array(								'draft_subject' => $draft_subject,								'draft_message' => $draft_message							);							$sql = 'UPDATE ' . DRAFTS_TABLE . '								SET ' . $db->sql_build_array('UPDATE', $draft_row) . "								WHERE draft_id = $draft_id									AND user_id = " . $user->data['user_id'];							$db->sql_query($sql);							$message = $user->lang['DRAFT_UPDATED'] . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $this->u_action . '">', '</a>');							meta_refresh(3, $this->u_action);							trigger_error($message);						}						else						{							$template->assign_var('ERROR', ($draft_message == '') ? $user->lang['EMPTY_DRAFT'] : (($draft_subject == '') ? $user->lang['EMPTY_DRAFT_TITLE'] : ''));						}					}					else					{						$template->assign_var('ERROR', $user->lang['FORM_INVALID']);					}				}				if (!$pm_drafts)				{					$sql = 'SELECT d.*, f.forum_name						FROM ' . DRAFTS_TABLE . ' d, ' . FORUMS_TABLE . ' f						WHERE d.user_id = ' . $user->data['user_id'] . ' ' .							(($edit) ? "AND d.draft_id = $draft_id" : '') . '							AND f.forum_id = d.forum_id						ORDER BY d.save_time DESC';				}				else				{					$sql = 'SELECT * FROM ' . DRAFTS_TABLE . '						WHERE user_id = ' . $user->data['user_id'] . ' ' .							(($edit) ? "AND draft_id = $draft_id" : '') . '							AND forum_id = 0							AND topic_id = 0						ORDER BY save_time DESC';				}				$result = $db->sql_query($sql);				$draftrows = $topic_ids = array();				while ($row = $db->sql_fetchrow($result))				{					if ($row['topic_id'])					{						$topic_ids[] = (int) $row['topic_id'];					}					$draftrows[] = $row;				}				$db->sql_freeresult($result);				if (sizeof($topic_ids))				{					$sql = 'SELECT topic_id, forum_id, topic_title						FROM ' . TOPICS_TABLE . '						WHERE ' . $db->sql_in_set('topic_id', array_unique($topic_ids));					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$topic_rows[$row['topic_id']] = $row;					}					$db->sql_freeresult($result);				}				unset($topic_ids);				$template->assign_var('S_EDIT_DRAFT', $edit);				$row_count = 0;				foreach ($draftrows as $draft)				{					$link_topic = $link_forum = $link_pm = false;					$insert_url = $view_url = $title = '';					if (isset($topic_rows[$draft['topic_id']]) && $auth->acl_get('f_read', $topic_rows[$draft['topic_id']]['forum_id']))					{						$link_topic = true;						$view_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $topic_rows[$draft['topic_id']]['forum_id'] . '&amp;t=' . $draft['topic_id']);						$title = $topic_rows[$draft['topic_id']]['topic_title'];						$insert_url = append_sid("{$phpbb_root_path}posting.$phpEx", 'f=' . $topic_rows[$draft['topic_id']]['forum_id'] . '&amp;t=' . $draft['topic_id'] . '&amp;mode=reply&amp;d=' . $draft['draft_id']);					}					else if ($auth->acl_get('f_read', $draft['forum_id']))					{						$link_forum = true;						$view_url = append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $draft['forum_id']);						$title = $draft['forum_name'];						$insert_url = append_sid("{$phpbb_root_path}posting.$phpEx", 'f=' . $draft['forum_id'] . '&amp;mode=post&amp;d=' . $draft['draft_id']);					}					else if ($pm_drafts)					{						$link_pm = true;						$insert_url = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=$id&amp;mode=compose&amp;d=" . $draft['draft_id']);					}					$template_row = array(						'DATE'			=> $user->format_date($draft['save_time']),						'DRAFT_MESSAGE'	=> ($submit) ? $draft_message : $draft['draft_message'],						'DRAFT_SUBJECT'	=> ($submit) ? $draft_subject : $draft['draft_subject'],						'TITLE'			=> $title,						'DRAFT_ID'	=> $draft['draft_id'],						'FORUM_ID'	=> $draft['forum_id'],						'TOPIC_ID'	=> $draft['topic_id'],						'U_VIEW'		=> $view_url,						'U_VIEW_EDIT'	=> $this->u_action . '&amp;edit=' . $draft['draft_id'],						'U_INSERT'		=> $insert_url,						'S_LINK_TOPIC'		=> $link_topic,						'S_LINK_FORUM'		=> $link_forum,						'S_LINK_PM'			=> $link_pm,						'S_HIDDEN_FIELDS'	=> $s_hidden_fields					);					$row_count++;					($edit) ? $template->assign_vars($template_row) : $template->assign_block_vars('draftrow', $template_row);				}				if (!$edit)				{					$template->assign_var('S_DRAFT_ROWS', $row_count);				}			break;		}		$template->assign_vars(array(			'L_TITLE'			=> $user->lang['UCP_MAIN_' . strtoupper($mode)],			'S_DISPLAY_MARK_ALL'	=> ($mode == 'watched' || ($mode == 'drafts' && !isset($_GET['edit']))) ? true : false,			'S_HIDDEN_FIELDS'		=> (isset($s_hidden_fields)) ? $s_hidden_fields : '',			'S_UCP_ACTION'			=> $this->u_action,			'LAST_POST_IMG'			=> $user->img('icon_topic_latest', 'VIEW_LATEST_POST'),			'NEWEST_POST_IMG'		=> $user->img('icon_topic_newest', 'VIEW_NEWEST_POST'),		));		// Set desired template		$this->tpl_name = 'ucp_main_' . $mode;		$this->page_title = 'UCP_MAIN_' . strtoupper($mode);	}	/**	* Build and assign topiclist for bookmarks/subscribed topics	*/	function assign_topiclist($mode = 'subscribed', $forbidden_forum_ary = array())	{		global $user, $db, $template, $config, $cache, $auth, $phpbb_root_path, $phpEx;		$table = ($mode == 'subscribed') ? TOPICS_WATCH_TABLE : BOOKMARKS_TABLE;		$start = request_var('start', 0);		// Grab icons		$icons = $cache->obtain_icons();		$sql_array = array(			'SELECT'	=> 'COUNT(t.topic_id) as topics_count',			'FROM'		=> array(				$table			=> 'i',				TOPICS_TABLE	=> 't'			),			'WHERE'		=>	'i.topic_id = t.topic_id				AND i.user_id = ' . $user->data['user_id'] . '				AND ' . $db->sql_in_set('t.forum_id', $forbidden_forum_ary, true, true),		);		$sql = $db->sql_build_query('SELECT', $sql_array);		$result = $db->sql_query($sql);		$topics_count = (int) $db->sql_fetchfield('topics_count');		$db->sql_freeresult($result);		if ($topics_count)		{			$template->assign_vars(array(				'PAGINATION'	=> generate_pagination($this->u_action, $topics_count, $config['topics_per_page'], $start),				'PAGE_NUMBER'	=> on_page($topics_count, $config['topics_per_page'], $start),				'TOTAL_TOPICS'	=> ($topics_count == 1) ? $user->lang['VIEW_FORUM_TOPIC'] : sprintf($user->lang['VIEW_FORUM_TOPICS'], $topics_count))			);		}		if ($mode == 'subscribed')		{			$sql_array = array(				'SELECT'	=> 't.*, f.forum_name',				'FROM'		=> array(					TOPICS_WATCH_TABLE	=> 'tw',					TOPICS_TABLE		=> 't'				),				'WHERE'		=> 'tw.user_id = ' . $user->data['user_id'] . '					AND t.topic_id = tw.topic_id					AND ' . $db->sql_in_set('t.forum_id', $forbidden_forum_ary, true, true),				'ORDER_BY'	=> 't.topic_last_post_time DESC'			);			$sql_array['LEFT_JOIN'] = array();		}		else		{			$sql_array = array(				'SELECT'	=> 't.*, f.forum_name, b.topic_id as b_topic_id',				'FROM'		=> array(					BOOKMARKS_TABLE		=> 'b',				),				'WHERE'		=> 'b.user_id = ' . $user->data['user_id'] . '					AND ' . $db->sql_in_set('f.forum_id', $forbidden_forum_ary, true, true),				'ORDER_BY'	=> 't.topic_last_post_time DESC'			);			$sql_array['LEFT_JOIN'] = array();			$sql_array['LEFT_JOIN'][] = array('FROM' => array(TOPICS_TABLE => 't'), 'ON' => 'b.topic_id = t.topic_id');		}		$sql_array['LEFT_JOIN'][] = array('FROM' => array(FORUMS_TABLE => 'f'), 'ON' => 't.forum_id = f.forum_id');		if ($config['load_db_lastread'])		{			$sql_array['LEFT_JOIN'][] = array('FROM' => array(FORUMS_TRACK_TABLE => 'ft'), 'ON' => 'ft.forum_id = t.forum_id AND ft.user_id = ' . $user->data['user_id']);			$sql_array['LEFT_JOIN'][] = array('FROM' => array(TOPICS_TRACK_TABLE => 'tt'), 'ON' => 'tt.topic_id = t.topic_id AND tt.user_id = ' . $user->data['user_id']);			$sql_array['SELECT'] .= ', tt.mark_time, ft.mark_time AS forum_mark_time';		}		if ($config['load_db_track'])		{			$sql_array['LEFT_JOIN'][] = array('FROM' => array(TOPICS_POSTED_TABLE => 'tp'), 'ON' => 'tp.topic_id = t.topic_id AND tp.user_id = ' . $user->data['user_id']);			$sql_array['SELECT'] .= ', tp.topic_posted';		}		$sql = $db->sql_build_query('SELECT', $sql_array);		$result = $db->sql_query_limit($sql, $config['topics_per_page'], $start);		$topic_list = $topic_forum_list = $global_announce_list = $rowset = array();		while ($row = $db->sql_fetchrow($result))		{			$topic_id = (isset($row['b_topic_id'])) ? $row['b_topic_id'] : $row['topic_id'];			$topic_list[] = $topic_id;			$rowset[$topic_id] = $row;			$topic_forum_list[$row['forum_id']]['forum_mark_time'] = ($config['load_db_lastread']) ? $row['forum_mark_time'] : 0;			$topic_forum_list[$row['forum_id']]['topics'][] = $topic_id;			if ($row['topic_type'] == POST_GLOBAL)			{				$global_announce_list[] = $topic_id;			}		}		$db->sql_freeresult($result);		$topic_tracking_info = array();		if ($config['load_db_lastread'])		{			foreach ($topic_forum_list as $f_id => $topic_row)			{				$topic_tracking_info += get_topic_tracking($f_id, $topic_row['topics'], $rowset, array($f_id => $topic_row['forum_mark_time']), ($f_id == 0) ? $global_announce_list : false);			}		}		else		{			foreach ($topic_forum_list as $f_id => $topic_row)			{				$topic_tracking_info += get_complete_topic_tracking($f_id, $topic_row['topics'], $global_announce_list);			}		}		foreach ($topic_list as $topic_id)		{			$row = &$rowset[$topic_id];			$forum_id = $row['forum_id'];			$topic_id = (isset($row['b_topic_id'])) ? $row['b_topic_id'] : $row['topic_id'];			$unread_topic = (isset($topic_tracking_info[$topic_id]) && $row['topic_last_post_time'] > $topic_tracking_info[$topic_id]) ? true : false;			// Replies			$replies = ($auth->acl_get('m_approve', $forum_id)) ? $row['topic_replies_real'] : $row['topic_replies'];			if ($row['topic_status'] == ITEM_MOVED && !empty($row['topic_moved_id']))			{				$topic_id = $row['topic_moved_id'];			}			// Get folder img, topic status/type related information			$folder_img = $folder_alt = $topic_type = '';			topic_status($row, $replies, $unread_topic, $folder_img, $folder_alt, $topic_type);			$view_topic_url_params = "f=$forum_id&amp;t=$topic_id";			$view_topic_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", $view_topic_url_params);			// Send vars to template			$template->assign_block_vars('topicrow', array(				'FORUM_ID'					=> $forum_id,				'TOPIC_ID'					=> $topic_id,				'FIRST_POST_TIME'			=> $user->format_date($row['topic_time']),				'LAST_POST_SUBJECT'			=> $row['topic_last_post_subject'],				'LAST_POST_TIME'			=> $user->format_date($row['topic_last_post_time']),				'LAST_VIEW_TIME'			=> $user->format_date($row['topic_last_view_time']),				'TOPIC_AUTHOR'				=> get_username_string('username', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),				'TOPIC_AUTHOR_COLOUR'		=> get_username_string('colour', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),				'TOPIC_AUTHOR_FULL'			=> get_username_string('full', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),				'U_TOPIC_AUTHOR'			=> get_username_string('profile', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),				'LAST_POST_AUTHOR'			=> get_username_string('username', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),				'LAST_POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),				'LAST_POST_AUTHOR_FULL'		=> get_username_string('full', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),				'U_LAST_POST_AUTHOR'		=> get_username_string('profile', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),				'S_DELETED_TOPIC'	=> (!$row['topic_id']) ? true : false,				'S_GLOBAL_TOPIC'	=> (!$forum_id) ? true : false,				'PAGINATION'		=> topic_generate_pagination($replies, append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . (($row['forum_id']) ? $row['forum_id'] : $forum_id) . "&amp;t=$topic_id")),				'REPLIES'			=> $replies,				'VIEWS'				=> $row['topic_views'],				'TOPIC_TITLE'		=> censor_text($row['topic_title']),				'TOPIC_TYPE'		=> $topic_type,				'FORUM_NAME'		=> $row['forum_name'],				'TOPIC_FOLDER_IMG'		=> $user->img($folder_img, $folder_alt),				'TOPIC_FOLDER_IMG_SRC'	=> $user->img($folder_img, $folder_alt, false, '', 'src'),				'TOPIC_FOLDER_IMG_ALT'	=> $user->lang[$folder_alt],				'TOPIC_ICON_IMG'		=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['img'] : '',				'TOPIC_ICON_IMG_WIDTH'	=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['width'] : '',				'TOPIC_ICON_IMG_HEIGHT'	=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['height'] : '',				'ATTACH_ICON_IMG'		=> ($auth->acl_get('u_download') && $auth->acl_get('f_download', $forum_id) && $row['topic_attachment']) ? $user->img('icon_topic_attach', $user->lang['TOTAL_ATTACHMENTS']) : '',				'S_TOPIC_TYPE'			=> $row['topic_type'],				'S_USER_POSTED'			=> (!empty($row['topic_posted'])) ? true : false,				'S_UNREAD_TOPIC'		=> $unread_topic,				'U_NEWEST_POST'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", $view_topic_url_params . '&amp;view=unread') . '#unread',				'U_LAST_POST'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", $view_topic_url_params . '&amp;p=' . $row['topic_last_post_id']) . '#p' . $row['topic_last_post_id'],				'U_VIEW_TOPIC'			=> $view_topic_url,				'U_VIEW_FORUM'			=> append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id),			));		}	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** mcp_reports* Handling the reports queue* @package mcp*/class mcp_reports{	var $p_master;	var $u_action;	function mcp_reports(&$p_master)	{		$this->p_master = &$p_master;	}	function main($id, $mode)	{		global $auth, $db, $user, $template, $cache;		global $config, $phpbb_root_path, $phpEx, $action;		include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);		$forum_id = request_var('f', 0);		$start = request_var('start', 0);		$this->page_title = 'MCP_REPORTS';		switch ($action)		{			case 'close':			case 'delete':				include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);				$report_id_list = request_var('report_id_list', array(0));				if (!sizeof($report_id_list))				{					trigger_error('NO_REPORT_SELECTED');				}				close_report($report_id_list, $mode, $action);			break;		}		switch ($mode)		{			case 'report_details':				$user->add_lang(array('posting', 'viewforum', 'viewtopic'));				$post_id = request_var('p', 0);				// closed reports are accessed by report id				$report_id = request_var('r', 0);				$sql = 'SELECT r.post_id, r.user_id, r.report_id, r.report_closed, report_time, r.report_text, rr.reason_title, rr.reason_description, u.username, u.username_clean, u.user_colour					FROM ' . REPORTS_TABLE . ' r, ' . REPORTS_REASONS_TABLE . ' rr, ' . USERS_TABLE . ' u					WHERE ' . (($report_id) ? 'r.report_id = ' . $report_id : "r.post_id = $post_id") . '						AND rr.reason_id = r.reason_id						AND r.user_id = u.user_id						AND r.pm_id = 0					ORDER BY report_closed ASC';				$result = $db->sql_query_limit($sql, 1);				$report = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$report)				{					trigger_error('NO_REPORT');				}				if (!$report_id && $report['report_closed'])				{					trigger_error('REPORT_CLOSED');				}				$post_id = $report['post_id'];				$report_id = $report['report_id'];				$post_info = get_post_data(array($post_id), 'm_report', true);				if (!sizeof($post_info))				{					trigger_error('NO_REPORT_SELECTED');				}				$post_info = $post_info[$post_id];				$reason = array('title' => $report['reason_title'], 'description' => $report['reason_description']);				if (isset($user->lang['report_reasons']['TITLE'][strtoupper($reason['title'])]) && isset($user->lang['report_reasons']['DESCRIPTION'][strtoupper($reason['title'])]))				{					$reason['description'] = $user->lang['report_reasons']['DESCRIPTION'][strtoupper($reason['title'])];					$reason['title'] = $user->lang['report_reasons']['TITLE'][strtoupper($reason['title'])];				}				if (topic_review($post_info['topic_id'], $post_info['forum_id'], 'topic_review', 0, false))				{					$template->assign_vars(array(						'S_TOPIC_REVIEW'	=> true,						'S_BBCODE_ALLOWED'	=> $post_info['enable_bbcode'],						'TOPIC_TITLE'		=> $post_info['topic_title'])					);				}				$topic_tracking_info = $extensions = $attachments = array();				// Get topic tracking info				if ($config['load_db_lastread'])				{					$tmp_topic_data = array($post_info['topic_id'] => $post_info);					$topic_tracking_info = get_topic_tracking($post_info['forum_id'], $post_info['topic_id'], $tmp_topic_data, array($post_info['forum_id'] => $post_info['forum_mark_time']));					unset($tmp_topic_data);				}				else				{					$topic_tracking_info = get_complete_topic_tracking($post_info['forum_id'], $post_info['topic_id']);				}				$post_unread = (isset($topic_tracking_info[$post_info['topic_id']]) && $post_info['post_time'] > $topic_tracking_info[$post_info['topic_id']]) ? true : false;				// Process message, leave it uncensored				$message = $post_info['post_text'];				if ($post_info['bbcode_bitfield'])				{					include_once($phpbb_root_path . 'includes/bbcode.' . $phpEx);					$bbcode = new bbcode($post_info['bbcode_bitfield']);					$bbcode->bbcode_second_pass($message, $post_info['bbcode_uid'], $post_info['bbcode_bitfield']);				}				$message = bbcode_nl2br($message);				$message = smiley_text($message);				$report['report_text'] = make_clickable(bbcode_nl2br($report['report_text']));				if ($post_info['post_attachment'] && $auth->acl_get('u_download') && $auth->acl_get('f_download', $post_info['forum_id']))				{					$sql = 'SELECT *						FROM ' . ATTACHMENTS_TABLE . '						WHERE post_msg_id = ' . $post_id . '							AND in_message = 0						ORDER BY filetime DESC';					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$attachments[] = $row;					}					$db->sql_freeresult($result);					if (sizeof($attachments))					{						$update_count = array();						parse_attachments($post_info['forum_id'], $message, $attachments, $update_count);					}					// Display not already displayed Attachments for this post, we already parsed them. ;)					if (!empty($attachments))					{						$template->assign_var('S_HAS_ATTACHMENTS', true);						foreach ($attachments as $attachment)						{							$template->assign_block_vars('attachment', array(								'DISPLAY_ATTACHMENT'	=> $attachment)							);						}					}				}				$template->assign_vars(array(					'S_MCP_REPORT'			=> true,					'S_CLOSE_ACTION'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports&amp;mode=report_details&amp;f=' . $post_info['forum_id'] . '&amp;p=' . $post_id),					'S_CAN_VIEWIP'			=> $auth->acl_get('m_info', $post_info['forum_id']),					'S_POST_REPORTED'		=> $post_info['post_reported'],					'S_POST_UNAPPROVED'		=> !$post_info['post_approved'],					'S_POST_LOCKED'			=> $post_info['post_edit_locked'],					'S_USER_NOTES'			=> true,					'U_EDIT'					=> ($auth->acl_get('m_edit', $post_info['forum_id'])) ? append_sid("{$phpbb_root_path}posting.$phpEx", "mode=edit&amp;f={$post_info['forum_id']}&amp;p={$post_info['post_id']}") : '',					'U_MCP_APPROVE'				=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue&amp;mode=approve_details&amp;f=' . $post_info['forum_id'] . '&amp;p=' . $post_id),					'U_MCP_REPORT'				=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports&amp;mode=report_details&amp;f=' . $post_info['forum_id'] . '&amp;p=' . $post_id),					'U_MCP_REPORTER_NOTES'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $report['user_id']),					'U_MCP_USER_NOTES'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $post_info['user_id']),					'U_MCP_WARN_REPORTER'		=> ($auth->acl_get('m_warn')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=warn&amp;mode=warn_user&amp;u=' . $report['user_id']) : '',					'U_MCP_WARN_USER'			=> ($auth->acl_get('m_warn')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=warn&amp;mode=warn_user&amp;u=' . $post_info['user_id']) : '',					'U_VIEW_FORUM'				=> append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $post_info['forum_id']),					'U_VIEW_POST'				=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $post_info['forum_id'] . '&amp;p=' . $post_info['post_id'] . '#p' . $post_info['post_id']),					'U_VIEW_TOPIC'				=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $post_info['forum_id'] . '&amp;t=' . $post_info['topic_id']),					'EDIT_IMG'				=> $user->img('icon_post_edit', $user->lang['EDIT_POST']),					'MINI_POST_IMG'			=> ($post_unread) ? $user->img('icon_post_target_unread', 'UNREAD_POST') : $user->img('icon_post_target', 'POST'),					'UNAPPROVED_IMG'		=> $user->img('icon_topic_unapproved', $user->lang['POST_UNAPPROVED']),					'RETURN_REPORTS'			=> sprintf($user->lang['RETURN_REPORTS'], '<a href="' . append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports' . (($post_info['post_reported']) ? '&amp;mode=reports' : '&amp;mode=reports_closed') . '&amp;start=' . $start . '&amp;f=' . $post_info['forum_id']) . '">', '</a>'),					'REPORTED_IMG'				=> $user->img('icon_topic_reported', $user->lang['POST_REPORTED']),					'REPORT_DATE'				=> $user->format_date($report['report_time']),					'REPORT_ID'					=> $report_id,					'REPORT_REASON_TITLE'		=> $reason['title'],					'REPORT_REASON_DESCRIPTION'	=> $reason['description'],					'REPORT_TEXT'				=> $report['report_text'],					'POST_AUTHOR_FULL'		=> get_username_string('full', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),					'POST_AUTHOR_COLOUR'	=> get_username_string('colour', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),					'POST_AUTHOR'			=> get_username_string('username', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),					'U_POST_AUTHOR'			=> get_username_string('profile', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),					'REPORTER_FULL'				=> get_username_string('full', $report['user_id'], $report['username'], $report['user_colour']),					'REPORTER_COLOUR'			=> get_username_string('colour', $report['user_id'], $report['username'], $report['user_colour']),					'REPORTER_NAME'				=> get_username_string('username', $report['user_id'], $report['username'], $report['user_colour']),					'U_VIEW_REPORTER_PROFILE'	=> get_username_string('profile', $report['user_id'], $report['username'], $report['user_colour']),					'POST_PREVIEW'			=> $message,					'POST_SUBJECT'			=> ($post_info['post_subject']) ? $post_info['post_subject'] : $user->lang['NO_SUBJECT'],					'POST_DATE'				=> $user->format_date($post_info['post_time']),					'POST_IP'				=> $post_info['poster_ip'],					'POST_IPADDR'			=> ($auth->acl_get('m_info', $post_info['forum_id']) && request_var('lookup', '')) ? @gethostbyaddr($post_info['poster_ip']) : '',					'POST_ID'				=> $post_info['post_id'],					'U_LOOKUP_IP'			=> ($auth->acl_get('m_info', $post_info['forum_id'])) ? $this->u_action . '&amp;r=' . $report_id . '&amp;p=' . $post_id . '&amp;f=' . $forum_id . '&amp;lookup=' . $post_info['poster_ip'] . '#ip' : '',				));				$this->tpl_name = 'mcp_post';			break;			case 'reports':			case 'reports_closed':				$topic_id = request_var('t', 0);				$forum_info = array();				$forum_list_reports = get_forum_list('m_report', false, true);				$forum_list_read = array_flip(get_forum_list('f_read', true, true)); // Flipped so we can isset() the forum IDs				// Remove forums we cannot read				foreach ($forum_list_reports as $k => $forum_data)				{					if (!isset($forum_list_read[$forum_data['forum_id']]))					{						unset($forum_list_reports[$k]);					}				}				unset($forum_list_read);				if ($topic_id)				{					$topic_info = get_topic_data(array($topic_id));					if (!sizeof($topic_info))					{						trigger_error('TOPIC_NOT_EXIST');					}					if ($forum_id != $topic_info[$topic_id]['forum_id'])					{						$topic_id = 0;					}					else					{						$topic_info = $topic_info[$topic_id];						$forum_id = (int) $topic_info['forum_id'];					}				}				$forum_list = array();				if (!$forum_id)				{					foreach ($forum_list_reports as $row)					{						$forum_list[] = $row['forum_id'];					}					if (!sizeof($forum_list))					{						trigger_error('NOT_MODERATOR');					}					$global_id = $forum_list[0];					$sql = 'SELECT SUM(forum_topics) as sum_forum_topics						FROM ' . FORUMS_TABLE . '						WHERE ' . $db->sql_in_set('forum_id', $forum_list);					$result = $db->sql_query($sql);					$forum_info['forum_topics'] = (int) $db->sql_fetchfield('sum_forum_topics');					$db->sql_freeresult($result);				}				else				{					$forum_info = get_forum_data(array($forum_id), 'm_report');					if (!sizeof($forum_info))					{						trigger_error('NOT_MODERATOR');					}					$forum_info = $forum_info[$forum_id];					$forum_list = array($forum_id);					$global_id = $forum_id;				}				$forum_list[] = 0;				$forum_data = array();				$forum_options = '<option value="0"' . (($forum_id == 0) ? ' selected="selected"' : '') . '>' . $user->lang['ALL_FORUMS'] . '</option>';				foreach ($forum_list_reports as $row)				{					$forum_options .= '<option value="' . $row['forum_id'] . '"' . (($forum_id == $row['forum_id']) ? ' selected="selected"' : '') . '>' . str_repeat('&nbsp; &nbsp;', $row['padding']) . $row['forum_name'] . '</option>';					$forum_data[$row['forum_id']] = $row;				}				unset($forum_list_reports);				$sort_days = $total = 0;				$sort_key = $sort_dir = '';				$sort_by_sql = $sort_order_sql = array();				mcp_sorting($mode, $sort_days, $sort_key, $sort_dir, $sort_by_sql, $sort_order_sql, $total, $forum_id, $topic_id);				$forum_topics = ($total == -1) ? $forum_info['forum_topics'] : $total;				$limit_time_sql = ($sort_days) ? 'AND r.report_time >= ' . (time() - ($sort_days * 86400)) : '';				if ($mode == 'reports')				{					$report_state = 'AND p.post_reported = 1 AND r.report_closed = 0';				}				else				{					$report_state = 'AND r.report_closed = 1';				}				$sql = 'SELECT r.report_id					FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . ' t, ' . REPORTS_TABLE . ' r ' . (($sort_order_sql[0] == 'u') ? ', ' . USERS_TABLE . ' u' : '') . (($sort_order_sql[0] == 'r') ? ', ' . USERS_TABLE . ' ru' : '') . '					WHERE ' . $db->sql_in_set('p.forum_id', $forum_list) . "						$report_state						AND r.post_id = p.post_id						" . (($sort_order_sql[0] == 'u') ? 'AND u.user_id = p.poster_id' : '') . '						' . (($sort_order_sql[0] == 'r') ? 'AND ru.user_id = r.user_id' : '') . '						' . (($topic_id) ? 'AND p.topic_id = ' . $topic_id : '') . "						AND t.topic_id = p.topic_id						AND r.pm_id = 0						$limit_time_sql					ORDER BY $sort_order_sql";				$result = $db->sql_query_limit($sql, $config['topics_per_page'], $start);				$i = 0;				$report_ids = array();				while ($row = $db->sql_fetchrow($result))				{					$report_ids[] = $row['report_id'];					$row_num[$row['report_id']] = $i++;				}				$db->sql_freeresult($result);				if (sizeof($report_ids))				{					$sql = 'SELECT t.forum_id, t.topic_id, t.topic_title, p.post_id, p.post_subject, p.post_username, p.poster_id, p.post_time, u.username, u.username_clean, u.user_colour, r.user_id as reporter_id, ru.username as reporter_name, ru.user_colour as reporter_colour, r.report_time, r.report_id						FROM ' . REPORTS_TABLE . ' r, ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . ' t, ' . USERS_TABLE . ' u, ' . USERS_TABLE . ' ru						WHERE ' . $db->sql_in_set('r.report_id', $report_ids) . '							AND t.topic_id = p.topic_id							AND r.post_id = p.post_id							AND u.user_id = p.poster_id							AND ru.user_id = r.user_id							AND r.pm_id = 0						ORDER BY ' . $sort_order_sql;					$result = $db->sql_query($sql);					$report_data = $rowset = array();					while ($row = $db->sql_fetchrow($result))					{						$global_topic = ($row['forum_id']) ? false : true;						if ($global_topic)						{							$row['forum_id'] = $global_id;						}						$template->assign_block_vars('postrow', array(							'U_VIEWFORUM'				=> (!$global_topic) ? append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $row['forum_id']) : '',							'U_VIEWPOST'				=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $row['forum_id'] . '&amp;p=' . $row['post_id']) . '#p' . $row['post_id'],							'U_VIEW_DETAILS'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=reports&amp;start=$start&amp;mode=report_details&amp;f={$row['forum_id']}&amp;r={$row['report_id']}"),							'POST_AUTHOR_FULL'		=> get_username_string('full', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),							'POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),							'POST_AUTHOR'			=> get_username_string('username', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),							'U_POST_AUTHOR'			=> get_username_string('profile', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),							'REPORTER_FULL'			=> get_username_string('full', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),							'REPORTER_COLOUR'		=> get_username_string('colour', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),							'REPORTER'				=> get_username_string('username', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),							'U_REPORTER'			=> get_username_string('profile', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),							'FORUM_NAME'	=> (!$global_topic) ? $forum_data[$row['forum_id']]['forum_name'] : $user->lang['GLOBAL_ANNOUNCEMENT'],							'POST_ID'		=> $row['post_id'],							'POST_SUBJECT'	=> ($row['post_subject']) ? $row['post_subject'] : $user->lang['NO_SUBJECT'],							'POST_TIME'		=> $user->format_date($row['post_time']),							'REPORT_ID'		=> $row['report_id'],							'REPORT_TIME'	=> $user->format_date($row['report_time']),							'TOPIC_TITLE'	=> $row['topic_title'])						);					}					$db->sql_freeresult($result);					unset($report_ids, $row);				}				// Now display the page				$template->assign_vars(array(					'L_EXPLAIN'				=> ($mode == 'reports') ? $user->lang['MCP_REPORTS_OPEN_EXPLAIN'] : $user->lang['MCP_REPORTS_CLOSED_EXPLAIN'],					'L_TITLE'				=> ($mode == 'reports') ? $user->lang['MCP_REPORTS_OPEN'] : $user->lang['MCP_REPORTS_CLOSED'],					'L_ONLY_TOPIC'			=> ($topic_id) ? sprintf($user->lang['ONLY_TOPIC'], $topic_info['topic_title']) : '',					'S_MCP_ACTION'			=> $this->u_action,					'S_FORUM_OPTIONS'		=> $forum_options,					'S_CLOSED'				=> ($mode == 'reports_closed') ? true : false,					'PAGINATION'			=> generate_pagination($this->u_action . "&amp;f=$forum_id&amp;t=$topic_id&amp;st=$sort_days&amp;sk=$sort_key&amp;sd=$sort_dir", $total, $config['topics_per_page'], $start),					'PAGE_NUMBER'			=> on_page($total, $config['topics_per_page'], $start),					'TOPIC_ID'				=> $topic_id,					'TOTAL'					=> $total,					'TOTAL_REPORTS'			=> ($total == 1) ? $user->lang['LIST_REPORT'] : sprintf($user->lang['LIST_REPORTS'], $total),					)				);				$this->tpl_name = 'mcp_reports';			break;		}	}}/*** Closes a report*/function close_report($report_id_list, $mode, $action, $pm = false){	global $db, $template, $user, $config, $auth;	global $phpEx, $phpbb_root_path;	$pm_where = ($pm) ? ' AND r.post_id = 0 ' : ' AND r.pm_id = 0 ';	$id_column = ($pm) ? 'pm_id' : 'post_id';	$module = ($pm) ? 'pm_reports' : 'reports';	$pm_prefix = ($pm) ? 'PM_' : '';	$sql = "SELECT r.$id_column		FROM " . REPORTS_TABLE . ' r		WHERE ' . $db->sql_in_set('r.report_id', $report_id_list) . $pm_where;	$result = $db->sql_query($sql);	$post_id_list = array();	while ($row = $db->sql_fetchrow($result))	{		$post_id_list[] = $row[$id_column];	}	$post_id_list = array_unique($post_id_list);	if ($pm)	{		if (!$auth->acl_getf_global('m_report'))		{			trigger_error('NOT_AUTHORISED');		}	}	else	{		if (!check_ids($post_id_list, POSTS_TABLE, 'post_id', array('m_report')))		{			trigger_error('NOT_AUTHORISED');		}	}	if ($action == 'delete' && strpos($user->data['session_page'], 'mode=report_details') !== false)	{		$redirect = request_var('redirect', build_url(array('mode', 'r', 'quickmod')) . '&amp;mode=reports');	}	elseif ($action == 'delete' && strpos($user->data['session_page'], 'mode=pm_report_details') !== false)	{		$redirect = request_var('redirect', build_url(array('mode', 'r', 'quickmod')) . '&amp;mode=pm_reports');	}	else if ($action == 'close' && !request_var('r', 0))	{		$redirect = request_var('redirect', build_url(array('mode', 'p', 'quickmod')) . '&amp;mode=' . $module);	}	else	{		$redirect = request_var('redirect', build_url(array('quickmod')));	}	$success_msg = '';	$forum_ids = array();	$topic_ids = array();	$s_hidden_fields = build_hidden_fields(array(		'i'					=> $module,		'mode'				=> $mode,		'report_id_list'	=> $report_id_list,		'action'			=> $action,		'redirect'			=> $redirect)	);	if (confirm_box(true))	{		$post_info = ($pm) ? get_pm_data($post_id_list) : get_post_data($post_id_list, 'm_report');		$sql = "SELECT r.report_id, r.$id_column, r.report_closed, r.user_id, r.user_notify, u.username, u.username_clean, u.user_email, u.user_jabber, u.user_lang, u.user_notify_type			FROM " . REPORTS_TABLE . ' r, ' . USERS_TABLE . ' u			WHERE ' . $db->sql_in_set('r.report_id', $report_id_list) . '				' . (($action == 'close') ? 'AND r.report_closed = 0' : '') . '				AND r.user_id = u.user_id' . $pm_where;		$result = $db->sql_query($sql);		$reports = $close_report_posts = $close_report_topics = $notify_reporters = $report_id_list = array();		while ($report = $db->sql_fetchrow($result))		{			$reports[$report['report_id']] = $report;			$report_id_list[] = $report['report_id'];			if (!$report['report_closed'])			{				$close_report_posts[] = $report[$id_column];				if (!$pm)				{					$close_report_topics[] = $post_info[$report['post_id']]['topic_id'];				}			}			if ($report['user_notify'] && !$report['report_closed'])			{				$notify_reporters[$report['report_id']] = &$reports[$report['report_id']];			}		}		$db->sql_freeresult($result);		if (sizeof($reports))		{			$close_report_posts = array_unique($close_report_posts);			$close_report_topics = array_unique($close_report_topics);			if (!$pm && sizeof($close_report_posts))			{				// Get a list of topics that still contain reported posts				$sql = 'SELECT DISTINCT topic_id					FROM ' . POSTS_TABLE . '					WHERE ' . $db->sql_in_set('topic_id', $close_report_topics) . '						AND post_reported = 1						AND ' . $db->sql_in_set('post_id', $close_report_posts, true);				$result = $db->sql_query($sql);				$keep_report_topics = array();				while ($row = $db->sql_fetchrow($result))				{					$keep_report_topics[] = $row['topic_id'];				}				$db->sql_freeresult($result);				$close_report_topics = array_diff($close_report_topics, $keep_report_topics);				unset($keep_report_topics);			}			$db->sql_transaction('begin');			if ($action == 'close')			{				$sql = 'UPDATE ' . REPORTS_TABLE . '					SET report_closed = 1					WHERE ' . $db->sql_in_set('report_id', $report_id_list);			}			else			{				$sql = 'DELETE FROM ' . REPORTS_TABLE . '					WHERE ' . $db->sql_in_set('report_id', $report_id_list);			}			$db->sql_query($sql);			if (sizeof($close_report_posts))			{				if ($pm)				{					$sql = 'UPDATE ' . PRIVMSGS_TABLE . '						SET message_reported = 0						WHERE ' . $db->sql_in_set('msg_id', $close_report_posts);					$db->sql_query($sql);					if ($action == 'delete')					{						delete_pm(ANONYMOUS, $close_report_posts, PRIVMSGS_INBOX);					}				}				else				{					$sql = 'UPDATE ' . POSTS_TABLE . '						SET post_reported = 0						WHERE ' . $db->sql_in_set('post_id', $close_report_posts);					$db->sql_query($sql);					if (sizeof($close_report_topics))					{						$sql = 'UPDATE ' . TOPICS_TABLE . '							SET topic_reported = 0							WHERE ' . $db->sql_in_set('topic_id', $close_report_topics) . '								OR ' . $db->sql_in_set('topic_moved_id', $close_report_topics);						$db->sql_query($sql);					}				}			}			$db->sql_transaction('commit');		}		unset($close_report_posts, $close_report_topics);		foreach ($reports as $report)		{			if ($pm)			{				add_log('mod', 0, 0, 'LOG_PM_REPORT_' .  strtoupper($action) . 'D', $post_info[$report['pm_id']]['message_subject']);			}			else			{				add_log('mod', $post_info[$report['post_id']]['forum_id'], $post_info[$report['post_id']]['topic_id'], 'LOG_REPORT_' .  strtoupper($action) . 'D', $post_info[$report['post_id']]['post_subject']);			}		}		$messenger = new messenger();		// Notify reporters		if (sizeof($notify_reporters))		{			foreach ($notify_reporters as $report_id => $reporter)			{				if ($reporter['user_id'] == ANONYMOUS)				{					continue;				}				$post_id = $reporter[$id_column];				$messenger->template((($pm) ? 'pm_report_' : 'report_') . $action . 'd', $reporter['user_lang']);				$messenger->to($reporter['user_email'], $reporter['username']);				$messenger->im($reporter['user_jabber'], $reporter['username']);				if ($pm)				{					$messenger->assign_vars(array(						'USERNAME'		=> htmlspecialchars_decode($reporter['username']),						'CLOSER_NAME'	=> htmlspecialchars_decode($user->data['username']),						'PM_SUBJECT'	=> htmlspecialchars_decode(censor_text($post_info[$post_id]['message_subject'])),					));				}				else				{					$messenger->assign_vars(array(						'USERNAME'		=> htmlspecialchars_decode($reporter['username']),						'CLOSER_NAME'	=> htmlspecialchars_decode($user->data['username']),						'POST_SUBJECT'	=> htmlspecialchars_decode(censor_text($post_info[$post_id]['post_subject'])),						'TOPIC_TITLE'	=> htmlspecialchars_decode(censor_text($post_info[$post_id]['topic_title'])))					);				}				$messenger->send($reporter['user_notify_type']);			}		}		if (!$pm)		{			foreach ($post_info as $post)			{				$forum_ids[$post['forum_id']] = $post['forum_id'];				$topic_ids[$post['topic_id']] = $post['topic_id'];			}		}		unset($notify_reporters, $post_info, $reports);		$messenger->save_queue();		$success_msg = (sizeof($report_id_list) == 1) ? "{$pm_prefix}REPORT_" . strtoupper($action) . 'D_SUCCESS' : "{$pm_prefix}REPORTS_" . strtoupper($action) . 'D_SUCCESS';	}	else	{		confirm_box(false, $user->lang[strtoupper($action) . "_{$pm_prefix}REPORT" . ((sizeof($report_id_list) == 1) ? '' : 'S') . '_CONFIRM'], $s_hidden_fields);	}	$redirect = request_var('redirect', "index.$phpEx");	$redirect = reapply_sid($redirect);	if (!$success_msg)	{		redirect($redirect);	}	else	{		meta_refresh(3, $redirect);		$return_forum = '';		$return_topic = '';		if (!$pm)		{			if (sizeof($forum_ids) === 1)			{				$return_forum = sprintf($user->lang['RETURN_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . current($forum_ids)) . '">', '</a>') . '<br /><br />';			}			if (sizeof($topic_ids) === 1)			{				$return_topic = sprintf($user->lang['RETURN_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 't=' . current($topic_ids) . '&amp;f=' . current($forum_ids)) . '">', '</a>') . '<br /><br />';			}		}		trigger_error($user->lang[$success_msg] . '<br /><br />' . $return_forum . $return_topic . sprintf($user->lang['RETURN_PAGE'], "<a href=\"$redirect\">", '</a>'));	}}?>
<?php/**** viewtopic [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ATTACHMENT'						=> 'Attachment',	'ATTACHMENT_FUNCTIONALITY_DISABLED'	=> 'The attachments feature has been disabled.',	'BOOKMARK_ADDED'		=> 'Bookmarked topic successfully.',	'BOOKMARK_ERR'			=> 'Bookmarking the topic failed. Please try again.',	'BOOKMARK_REMOVED'		=> 'Removed bookmarked topic successfully.',	'BOOKMARK_TOPIC'		=> 'Bookmark topic',	'BOOKMARK_TOPIC_REMOVE'	=> 'Remove from bookmarks',	'BUMPED_BY'				=> 'Last bumped by %1$s on %2$s.',	'BUMP_TOPIC'			=> 'Bump topic',	'CODE'					=> 'Code',	'COLLAPSE_QR'			=> 'Hide Quick Reply',	'DELETE_TOPIC'			=> 'Delete topic',	'DOWNLOAD_NOTICE'		=> 'You do not have the required permissions to view the files attached to this post.',	'EDITED_TIMES_TOTAL'	=> 'Last edited by %1$s on %2$s, edited %3$d times in total.',	'EDITED_TIME_TOTAL'		=> 'Last edited by %1$s on %2$s, edited %3$d time in total.',	'EMAIL_TOPIC'			=> 'E-mail friend',	'ERROR_NO_ATTACHMENT'	=> 'The selected attachment does not exist anymore.',	'FILE_NOT_FOUND_404'	=> 'The file <strong>%s</strong> does not exist.',	'FORK_TOPIC'			=> 'Copy topic',	'FULL_EDITOR'			=> 'Full Editor',		'LINKAGE_FORBIDDEN'		=> 'You are not authorised to view, download or link from/to this site.',	'LOGIN_NOTIFY_TOPIC'	=> 'You have been notified about this topic, please login to view it.',	'LOGIN_VIEWTOPIC'		=> 'The board requires you to be registered and logged in to view this topic.',	'MAKE_ANNOUNCE'				=> 'Change to Announcement',	'MAKE_GLOBAL'				=> 'Change to Global',	'MAKE_NORMAL'				=> 'Change to Standard Topic',	'MAKE_STICKY'				=> 'Change to Sticky',	'MAX_OPTIONS_SELECT'		=> 'You may select up to <strong>%d</strong> options',	'MAX_OPTION_SELECT'			=> 'You may select <strong>1</strong> option',	'MISSING_INLINE_ATTACHMENT'	=> 'The attachment <strong>%s</strong> is no longer available',	'MOVE_TOPIC'				=> 'Move topic',	'NO_ATTACHMENT_SELECTED'=> 'You havent selected an attachment to download or view.',	'NO_NEWER_TOPICS'		=> 'There are no newer topics in this forum.',	'NO_OLDER_TOPICS'		=> 'There are no older topics in this forum.',	'NO_UNREAD_POSTS'		=> 'There are no new unread posts for this topic.',	'NO_VOTE_OPTION'		=> 'You must specify an option when voting.',	'NO_VOTES'				=> 'No votes',	'POLL_ENDED_AT'			=> 'Poll ended at %s',	'POLL_RUN_TILL'			=> 'Poll runs till %s',	'POLL_VOTED_OPTION'		=> 'You voted for this option',	'PRINT_TOPIC'			=> 'Print view',	'QUICK_MOD'				=> 'Quick-mod tools',	'QUICKREPLY'			=> 'Quick Reply',	'QUOTE'					=> 'Quote',	'REPLY_TO_TOPIC'		=> 'Reply to topic',	'RETURN_POST'			=> '%sReturn to the post%s',	'SHOW_QR'				=> 'Quick Reply',	'SUBMIT_VOTE'			=> 'Submit vote',	'TOTAL_VOTES'			=> 'Total votes',	'UNLOCK_TOPIC'			=> 'Unlock topic',	'VIEW_INFO'				=> 'Post details',	'VIEW_NEXT_TOPIC'		=> 'Next topic',	'VIEW_PREVIOUS_TOPIC'	=> 'Previous topic',	'VIEW_RESULTS'			=> 'View results',	'VIEW_TOPIC_POST'		=> '1 post',	'VIEW_TOPIC_POSTS'		=> '%d posts',	'VIEW_UNREAD_POST'		=> 'First unread post',	'VISIT_WEBSITE'			=> 'WWW',	'VOTE_SUBMITTED'		=> 'Your vote has been cast.',	'VOTE_CONVERTED'		=> 'Changing votes is not supported for converted polls.',));?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** View private message*/function view_message($id, $mode, $folder_id, $msg_id, $folder, $message_row){	global $user, $template, $auth, $db, $cache;	global $phpbb_root_path, $phpEx, $config;	$user->add_lang(array('viewtopic', 'memberlist'));	$msg_id		= (int) $msg_id;	$folder_id	= (int) $folder_id;	$author_id	= (int) $message_row['author_id'];	$view		= request_var('view', '');	// Not able to view message, it was deleted by the sender	if ($message_row['pm_deleted'])	{		$meta_info = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&amp;folder=$folder_id");		$message = $user->lang['NO_AUTH_READ_REMOVED_MESSAGE'];		$message .= '<br /><br />' . sprintf($user->lang['RETURN_FOLDER'], '<a href="' . $meta_info . '">', '</a>');		trigger_error($message);	}	// Do not allow hold messages to be seen	if ($folder_id == PRIVMSGS_HOLD_BOX)	{		trigger_error('NO_AUTH_READ_HOLD_MESSAGE');	}	// Grab icons	$icons = $cache->obtain_icons();	$bbcode = false;	// Instantiate BBCode if need be	if ($message_row['bbcode_bitfield'])	{		include($phpbb_root_path . 'includes/bbcode.' . $phpEx);		$bbcode = new bbcode($message_row['bbcode_bitfield']);	}	// Assign TO/BCC Addresses to template	write_pm_addresses(array('to' => $message_row['to_address'], 'bcc' => $message_row['bcc_address']), $author_id);	$user_info = get_user_information($author_id, $message_row);	// Parse the message and subject	$message = censor_text($message_row['message_text']);	// Second parse bbcode here	if ($message_row['bbcode_bitfield'])	{		$bbcode->bbcode_second_pass($message, $message_row['bbcode_uid'], $message_row['bbcode_bitfield']);	}	// Always process smilies after parsing bbcodes	$message = bbcode_nl2br($message);	$message = smiley_text($message);	// Replace naughty words such as farty pants	$message_row['message_subject'] = censor_text($message_row['message_subject']);	// Editing information	if ($message_row['message_edit_count'] && $config['display_last_edited'])	{		$l_edit_time_total = ($message_row['message_edit_count'] == 1) ? $user->lang['EDITED_TIME_TOTAL'] : $user->lang['EDITED_TIMES_TOTAL'];		$l_edited_by = '<br /><br />' . sprintf($l_edit_time_total, (!$message_row['message_edit_user']) ? $message_row['username'] : $message_row['message_edit_user'], $user->format_date($message_row['message_edit_time'], false, true), $message_row['message_edit_count']);	}	else	{		$l_edited_by = '';	}	// Pull attachment data	$display_notice = false;	$attachments = array();	if ($message_row['message_attachment'] && $config['allow_pm_attach'])	{		if ($auth->acl_get('u_pm_download'))		{			$sql = 'SELECT *				FROM ' . ATTACHMENTS_TABLE . "				WHERE post_msg_id = $msg_id					AND in_message = 1				ORDER BY filetime DESC, post_msg_id ASC";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$attachments[] = $row;			}			$db->sql_freeresult($result);			// No attachments exist, but message table thinks they do so go ahead and reset attach flags			if (!sizeof($attachments))			{				$sql = 'UPDATE ' . PRIVMSGS_TABLE . "					SET message_attachment = 0					WHERE msg_id = $msg_id";				$db->sql_query($sql);			}		}		else		{			$display_notice = true;		}	}	// Assign inline attachments	if (!empty($attachments))	{		$update_count = array();		parse_attachments(false, $message, $attachments, $update_count);		// Update the attachment download counts		if (sizeof($update_count))		{			$sql = 'UPDATE ' . ATTACHMENTS_TABLE . '				SET download_count = download_count + 1				WHERE ' . $db->sql_in_set('attach_id', array_unique($update_count));			$db->sql_query($sql);		}	}	$user_info['sig'] = '';	$signature = ($message_row['enable_sig'] && $config['allow_sig'] && $auth->acl_get('u_sig') && $user->optionget('viewsigs')) ? $user_info['user_sig'] : '';	// End signature parsing, only if needed	if ($signature)	{		$signature = censor_text($signature);		if ($user_info['user_sig_bbcode_bitfield'])		{			if ($bbcode === false)			{				include($phpbb_root_path . 'includes/bbcode.' . $phpEx);				$bbcode = new bbcode($user_info['user_sig_bbcode_bitfield']);			}			$bbcode->bbcode_second_pass($signature, $user_info['user_sig_bbcode_uid'], $user_info['user_sig_bbcode_bitfield']);		}		$signature = bbcode_nl2br($signature);		$signature = smiley_text($signature);	}	$url = append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm');	// Number of "to" recipients	$num_recipients = (int) preg_match_all('/:?(u|g)_([0-9]+):?/', $message_row['to_address'], $match);	$bbcode_status	= ($config['allow_bbcode'] && $config['auth_bbcode_pm'] && $auth->acl_get('u_pm_bbcode')) ? true : false;	$template->assign_vars(array(		'MESSAGE_AUTHOR_FULL'		=> get_username_string('full', $author_id, $user_info['username'], $user_info['user_colour'], $user_info['username']),		'MESSAGE_AUTHOR_COLOUR'		=> get_username_string('colour', $author_id, $user_info['username'], $user_info['user_colour'], $user_info['username']),		'MESSAGE_AUTHOR'			=> get_username_string('username', $author_id, $user_info['username'], $user_info['user_colour'], $user_info['username']),		'U_MESSAGE_AUTHOR'			=> get_username_string('profile', $author_id, $user_info['username'], $user_info['user_colour'], $user_info['username']),		'RANK_TITLE'		=> $user_info['rank_title'],		'RANK_IMG'			=> $user_info['rank_image'],		'AUTHOR_AVATAR'		=> (isset($user_info['avatar'])) ? $user_info['avatar'] : '',		'AUTHOR_JOINED'		=> $user->format_date($user_info['user_regdate']),		'AUTHOR_POSTS'		=> (int) $user_info['user_posts'],		'AUTHOR_FROM'		=> (!empty($user_info['user_from'])) ? $user_info['user_from'] : '',		'ONLINE_IMG'		=> (!$config['load_onlinetrack']) ? '' : ((isset($user_info['online']) && $user_info['online']) ? $user->img('icon_user_online', $user->lang['ONLINE']) : $user->img('icon_user_offline', $user->lang['OFFLINE'])),		'S_ONLINE'			=> (!$config['load_onlinetrack']) ? false : ((isset($user_info['online']) && $user_info['online']) ? true : false),		'DELETE_IMG'		=> $user->img('icon_post_delete', $user->lang['DELETE_MESSAGE']),		'INFO_IMG'			=> $user->img('icon_post_info', $user->lang['VIEW_PM_INFO']),		'PROFILE_IMG'		=> $user->img('icon_user_profile', $user->lang['READ_PROFILE']),		'EMAIL_IMG'			=> $user->img('icon_contact_email', $user->lang['SEND_EMAIL']),		'QUOTE_IMG'			=> $user->img('icon_post_quote', $user->lang['POST_QUOTE_PM']),		'REPLY_IMG'			=> $user->img('button_pm_reply', $user->lang['POST_REPLY_PM']),		'REPORT_IMG'		=> $user->img('icon_post_report', 'REPORT_PM'),		'EDIT_IMG'			=> $user->img('icon_post_edit', $user->lang['POST_EDIT_PM']),		'MINI_POST_IMG'		=> $user->img('icon_post_target', $user->lang['PM']),		'SENT_DATE'			=> ($view == 'print') ? $user->format_date($message_row['message_time'], false, true) : $user->format_date($message_row['message_time']),		'SUBJECT'			=> $message_row['message_subject'],		'MESSAGE'			=> $message,		'SIGNATURE'			=> ($message_row['enable_sig']) ? $signature : '',		'EDITED_MESSAGE'	=> $l_edited_by,		'MESSAGE_ID'		=> $message_row['msg_id'],		'U_PM'			=> ($config['allow_privmsg'] && $auth->acl_get('u_sendpm') && ($user_info['user_allow_pm'] || $auth->acl_gets('a_', 'm_') || $auth->acl_getf_global('m_'))) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=compose&amp;u=' . $author_id) : '',		'U_WWW'			=> (!empty($user_info['user_website'])) ? $user_info['user_website'] : '',		'U_ICQ'			=> ($user_info['user_icq']) ? 'http://www.icq.com/people/' . urlencode($user_info['user_icq']) . '/' : '',		'U_AIM'			=> ($user_info['user_aim'] && $auth->acl_get('u_sendim')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=contact&amp;action=aim&amp;u=' . $author_id) : '',		'U_YIM'			=> ($user_info['user_yim']) ? 'http://edit.yahoo.com/config/send_webmesg?.target=' . urlencode($user_info['user_yim']) . '&amp;.src=pg' : '',		'U_MSN'			=> ($user_info['user_msnm'] && $auth->acl_get('u_sendim')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=contact&amp;action=msnm&amp;u=' . $author_id) : '',		'U_JABBER'		=> ($user_info['user_jabber'] && $auth->acl_get('u_sendim')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=contact&amp;action=jabber&amp;u=' . $author_id) : '',		'U_DELETE'			=> ($auth->acl_get('u_pm_delete')) ? "$url&amp;mode=compose&amp;action=delete&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] : '',		'U_EMAIL'			=> $user_info['email'],		'U_REPORT'			=> ($config['allow_pm_report']) ? append_sid("{$phpbb_root_path}report.$phpEx", "pm=" . $message_row['msg_id']) : '',		'U_QUOTE'			=> ($auth->acl_get('u_sendpm') && $author_id != ANONYMOUS) ? "$url&amp;mode=compose&amp;action=quote&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] : '',		'U_EDIT'			=> (($message_row['message_time'] > time() - ($config['pm_edit_time'] * 60) || !$config['pm_edit_time']) && $folder_id == PRIVMSGS_OUTBOX && $auth->acl_get('u_pm_edit')) ? "$url&amp;mode=compose&amp;action=edit&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] : '',		'U_POST_REPLY_PM'	=> ($auth->acl_get('u_sendpm') && $author_id != ANONYMOUS) ? "$url&amp;mode=compose&amp;action=reply&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] : '',		'U_POST_REPLY_ALL'	=> ($auth->acl_get('u_sendpm') && $author_id != ANONYMOUS) ? "$url&amp;mode=compose&amp;action=reply&amp;f=$folder_id&amp;reply_to_all=1&amp;p=" . $message_row['msg_id'] : '',		'U_PREVIOUS_PM'		=> "$url&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] . "&amp;view=previous",		'U_NEXT_PM'			=> "$url&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] . "&amp;view=next",		'U_PM_ACTION'		=> $url . '&amp;mode=compose&amp;f=' . $folder_id . '&amp;p=' . $message_row['msg_id'],		'S_HAS_ATTACHMENTS'	=> (sizeof($attachments)) ? true : false,		'S_DISPLAY_NOTICE'	=> $display_notice && $message_row['message_attachment'],		'S_AUTHOR_DELETED'	=> ($author_id == ANONYMOUS) ? true : false,		'S_SPECIAL_FOLDER'	=> in_array($folder_id, array(PRIVMSGS_NO_BOX, PRIVMSGS_OUTBOX)),		'S_PM_RECIPIENTS'	=> $num_recipients,		'S_BBCODE_ALLOWED'	=> ($bbcode_status) ? 1 : 0,		'U_PRINT_PM'		=> ($config['print_pm'] && $auth->acl_get('u_pm_printpm')) ? "$url&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] . "&amp;view=print" : '',		'U_FORWARD_PM'		=> ($config['forward_pm'] && $auth->acl_get('u_sendpm') && $auth->acl_get('u_pm_forward')) ? "$url&amp;mode=compose&amp;action=forward&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] : '')	);	// Display not already displayed Attachments for this post, we already parsed them. ;)	if (isset($attachments) && sizeof($attachments))	{		foreach ($attachments as $attachment)		{			$template->assign_block_vars('attachment', array(				'DISPLAY_ATTACHMENT'	=> $attachment)			);		}	}	if (!isset($_REQUEST['view']) || $_REQUEST['view'] != 'print')	{		// Message History		if (message_history($msg_id, $user->data['user_id'], $message_row, $folder))		{			$template->assign_var('S_DISPLAY_HISTORY', true);		}	}}/*** Get user information (only for message display)*/function get_user_information($user_id, $user_row){	global $db, $auth, $user, $cache;	global $phpbb_root_path, $phpEx, $config;	if (!$user_id)	{		return array();	}	if (empty($user_row))	{		$sql = 'SELECT *			FROM ' . USERS_TABLE . '			WHERE user_id = ' . (int) $user_id;		$result = $db->sql_query($sql);		$user_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);	}	// Some standard values	$user_row['online'] = false;	$user_row['rank_title'] = $user_row['rank_image'] = $user_row['rank_image_src'] = $user_row['email'] = '';	// Generate online information for user	if ($config['load_onlinetrack'])	{		$sql = 'SELECT session_user_id, MAX(session_time) as online_time, MIN(session_viewonline) AS viewonline			FROM ' . SESSIONS_TABLE . "			WHERE session_user_id = $user_id			GROUP BY session_user_id";		$result = $db->sql_query_limit($sql, 1);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		$update_time = $config['load_online_time'] * 60;		if ($row)		{			$user_row['online'] = (time() - $update_time < $row['online_time'] && ($row['viewonline'] || $auth->acl_get('u_viewonline'))) ? true : false;		}	}	if (!function_exists('get_user_avatar'))	{		include($phpbb_root_path . 'includes/functions_display.' . $phpEx);	}	$user_row['avatar'] = ($user->optionget('viewavatars')) ? get_user_avatar($user_row['user_avatar'], $user_row['user_avatar_type'], $user_row['user_avatar_width'], $user_row['user_avatar_height']) : '';	get_user_rank($user_row['user_rank'], $user_row['user_posts'], $user_row['rank_title'], $user_row['rank_image'], $user_row['rank_image_src']);	if ((!empty($user_row['user_allow_viewemail']) && $auth->acl_get('u_sendemail')) || $auth->acl_get('a_email'))	{		$user_row['email'] = ($config['board_email_form'] && $config['email_enable']) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", "mode=email&amp;u=$user_id") : ((($config['board_hide_emails'] && !$auth->acl_get('a_email')) || empty($user_row['user_email'])) ? '' : 'mailto:' . $user_row['user_email']);	}	return $user_row;}?>
<?php/**** @package acm* @version $Id$* @copyright (c) 2005, 2009 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ACM File Based Caching* @package acm*/class acm{	var $vars = array();	var $var_expires = array();	var $is_modified = false;	var $sql_rowset = array();	var $sql_row_pointer = array();	var $cache_dir = '';	/**	* Set cache path	*/	function acm()	{		global $phpbb_root_path;		$this->cache_dir = $phpbb_root_path . 'cache/';	}	/**	* Load global cache	*/	function load()	{		return $this->_read('data_global');	}	/**	* Unload cache object	*/	function unload()	{		$this->save();		unset($this->vars);		unset($this->var_expires);		unset($this->sql_rowset);		unset($this->sql_row_pointer);		$this->vars = array();		$this->var_expires = array();		$this->sql_rowset = array();		$this->sql_row_pointer = array();	}	/**	* Save modified objects	*/	function save()	{		if (!$this->is_modified)		{			return;		}		global $phpEx;		if (!$this->_write('data_global'))		{			if (!function_exists('phpbb_is_writable'))			{				global $phpbb_root_path;				include($phpbb_root_path . 'includes/functions.' . $phpEx);			}			// Now, this occurred how often? ... phew, just tell the user then...			if (!phpbb_is_writable($this->cache_dir))			{				// We need to use die() here, because else we may encounter an infinite loop (the message handler calls $cache->unload())				die('Fatal: ' . $this->cache_dir . ' is NOT writable.');				exit;			}			die('Fatal: Not able to open ' . $this->cache_dir . 'data_global.' . $phpEx);			exit;		}		$this->is_modified = false;	}	/**	* Tidy cache	*/	function tidy()	{		global $phpEx;		$dir = @opendir($this->cache_dir);		if (!$dir)		{			return;		}		$time = time();		while (($entry = readdir($dir)) !== false)		{			if (!preg_match('/^(sql_|data_(?!global))/', $entry))			{				continue;			}			if (!($handle = @fopen($this->cache_dir . $entry, 'rb')))			{				continue;			}			// Skip the PHP header			fgets($handle);			// Skip expiration			$expires = (int) fgets($handle);			fclose($handle);			if ($time >= $expires)			{				$this->remove_file($this->cache_dir . $entry);			}		}		closedir($dir);		if (file_exists($this->cache_dir . 'data_global.' . $phpEx))		{			if (!sizeof($this->vars))			{				$this->load();			}			foreach ($this->var_expires as $var_name => $expires)			{				if ($time >= $expires)				{					$this->destroy($var_name);				}			}		}		set_config('cache_last_gc', time(), true);	}	/**	* Get saved cache object	*/	function get($var_name)	{		if ($var_name[0] == '_')		{			global $phpEx;			if (!$this->_exists($var_name))			{				return false;			}			return $this->_read('data' . $var_name);		}		else		{			return ($this->_exists($var_name)) ? $this->vars[$var_name] : false;		}	}	/**	* Put data into cache	*/	function put($var_name, $var, $ttl = 31536000)	{		if ($var_name[0] == '_')		{			$this->_write('data' . $var_name, $var, time() + $ttl);		}		else		{			$this->vars[$var_name] = $var;			$this->var_expires[$var_name] = time() + $ttl;			$this->is_modified = true;		}	}	/**	* Purge cache data	*/	function purge()	{		// Purge all phpbb cache files		$dir = @opendir($this->cache_dir);		if (!$dir)		{			return;		}		while (($entry = readdir($dir)) !== false)		{			if (strpos($entry, 'sql_') !== 0 && strpos($entry, 'data_') !== 0 && strpos($entry, 'ctpl_') !== 0 && strpos($entry, 'tpl_') !== 0)			{				continue;			}			$this->remove_file($this->cache_dir . $entry);		}		closedir($dir);		unset($this->vars);		unset($this->var_expires);		unset($this->sql_rowset);		unset($this->sql_row_pointer);		$this->vars = array();		$this->var_expires = array();		$this->sql_rowset = array();		$this->sql_row_pointer = array();		$this->is_modified = false;	}	/**	* Destroy cache data	*/	function destroy($var_name, $table = '')	{		global $phpEx;		if ($var_name == 'sql' && !empty($table))		{			if (!is_array($table))			{				$table = array($table);			}			$dir = @opendir($this->cache_dir);			if (!$dir)			{				return;			}			while (($entry = readdir($dir)) !== false)			{				if (strpos($entry, 'sql_') !== 0)				{					continue;				}				if (!($handle = @fopen($this->cache_dir . $entry, 'rb')))				{					continue;				}				// Skip the PHP header				fgets($handle);				// Skip expiration				fgets($handle);				// Grab the query, remove the LF				$query = substr(fgets($handle), 0, -1);				fclose($handle);				foreach ($table as $check_table)				{					// Better catch partial table names than no table names. ;)					if (strpos($query, $check_table) !== false)					{						$this->remove_file($this->cache_dir . $entry);						break;					}				}			}			closedir($dir);			return;		}		if (!$this->_exists($var_name))		{			return;		}		if ($var_name[0] == '_')		{			$this->remove_file($this->cache_dir . 'data' . $var_name . ".$phpEx", true);		}		else if (isset($this->vars[$var_name]))		{			$this->is_modified = true;			unset($this->vars[$var_name]);			unset($this->var_expires[$var_name]);			// We save here to let the following cache hits succeed			$this->save();		}	}	/**	* Check if a given cache entry exist	*/	function _exists($var_name)	{		if ($var_name[0] == '_')		{			global $phpEx;			return file_exists($this->cache_dir . 'data' . $var_name . ".$phpEx");		}		else		{			if (!sizeof($this->vars))			{				$this->load();			}			if (!isset($this->var_expires[$var_name]))			{				return false;			}			return (time() > $this->var_expires[$var_name]) ? false : isset($this->vars[$var_name]);		}	}	/**	* Load cached sql query	*/	function sql_load($query)	{		// Remove extra spaces and tabs		$query = preg_replace('/[\n\r\s\t]+/', ' ', $query);		if (($rowset = $this->_read('sql_' . md5($query))) === false)		{			return false;		}		$query_id = sizeof($this->sql_rowset);		$this->sql_rowset[$query_id] = $rowset;		$this->sql_row_pointer[$query_id] = 0;		return $query_id;	}	/**	* Save sql query	*/	function sql_save($query, &$query_result, $ttl)	{		global $db;		// Remove extra spaces and tabs		$query = preg_replace('/[\n\r\s\t]+/', ' ', $query);		$query_id = sizeof($this->sql_rowset);		$this->sql_rowset[$query_id] = array();		$this->sql_row_pointer[$query_id] = 0;		while ($row = $db->sql_fetchrow($query_result))		{			$this->sql_rowset[$query_id][] = $row;		}		$db->sql_freeresult($query_result);		if ($this->_write('sql_' . md5($query), $this->sql_rowset[$query_id], $ttl + time(), $query))		{			$query_result = $query_id;		}	}	/**	* Ceck if a given sql query exist in cache	*/	function sql_exists($query_id)	{		return isset($this->sql_rowset[$query_id]);	}	/**	* Fetch row from cache (database)	*/	function sql_fetchrow($query_id)	{		if ($this->sql_row_pointer[$query_id] < sizeof($this->sql_rowset[$query_id]))		{			return $this->sql_rowset[$query_id][$this->sql_row_pointer[$query_id]++];		}		return false;	}	/**	* Fetch a field from the current row of a cached database result (database)	*/	function sql_fetchfield($query_id, $field)	{		if ($this->sql_row_pointer[$query_id] < sizeof($this->sql_rowset[$query_id]))		{			return (isset($this->sql_rowset[$query_id][$this->sql_row_pointer[$query_id]][$field])) ? $this->sql_rowset[$query_id][$this->sql_row_pointer[$query_id]++][$field] : false;		}		return false;	}	/**	* Seek a specific row in an a cached database result (database)	*/	function sql_rowseek($rownum, $query_id)	{		if ($rownum >= sizeof($this->sql_rowset[$query_id]))		{			return false;		}		$this->sql_row_pointer[$query_id] = $rownum;		return true;	}	/**	* Free memory used for a cached database result (database)	*/	function sql_freeresult($query_id)	{		if (!isset($this->sql_rowset[$query_id]))		{			return false;		}		unset($this->sql_rowset[$query_id]);		unset($this->sql_row_pointer[$query_id]);		return true;	}	/**	* Read cached data from a specified file	*	* @access private	* @param string $filename Filename to write	* @return mixed False if an error was encountered, otherwise the data type of the cached data	*/	function _read($filename)	{		global $phpEx;		$file = "{$this->cache_dir}$filename.$phpEx";		$type = substr($filename, 0, strpos($filename, '_'));		if (!file_exists($file))		{			return false;		}		if (!($handle = @fopen($file, 'rb')))		{			return false;		}		// Skip the PHP header		fgets($handle);		if ($filename == 'data_global')		{			$this->vars = $this->var_expires = array();			$time = time();			while (($expires = (int) fgets($handle)) && !feof($handle))			{				// Number of bytes of data				$bytes = substr(fgets($handle), 0, -1);				if (!is_numeric($bytes) || ($bytes = (int) $bytes) === 0)				{					// We cannot process the file without a valid number of bytes					// so we discard it					fclose($handle);					$this->vars = $this->var_expires = array();					$this->is_modified = false;					$this->remove_file($file);					return false;				}				if ($time >= $expires)				{					fseek($handle, $bytes, SEEK_CUR);					continue;				}				$var_name = substr(fgets($handle), 0, -1);				// Read the length of bytes that consists of data.				$data = fread($handle, $bytes - strlen($var_name));				$data = @unserialize($data);				// Don't use the data if it was invalid				if ($data !== false)				{					$this->vars[$var_name] = $data;					$this->var_expires[$var_name] = $expires;				}				// Absorb the LF				fgets($handle);			}			fclose($handle);			$this->is_modified = false;			return true;		}		else		{			$data = false;			$line = 0;			while (($buffer = fgets($handle)) && !feof($handle))			{				$buffer = substr($buffer, 0, -1); // Remove the LF				// $buffer is only used to read integers				// if it is non numeric we have an invalid				// cache file, which we will now remove.				if (!is_numeric($buffer))				{					break;				}				if ($line == 0)				{					$expires = (int) $buffer;					if (time() >= $expires)					{						break;					}					if ($type == 'sql')					{						// Skip the query						fgets($handle);					}				}				else if ($line == 1)				{					$bytes = (int) $buffer;					// Never should have 0 bytes					if (!$bytes)					{						break;					}					// Grab the serialized data					$data = fread($handle, $bytes);					// Read 1 byte, to trigger EOF					fread($handle, 1);					if (!feof($handle))					{						// Somebody tampered with our data						$data = false;					}					break;				}				else				{					// Something went wrong					break;				}				$line++;			}			fclose($handle);			// unserialize if we got some data			$data = ($data !== false) ? @unserialize($data) : $data;			if ($data === false)			{				$this->remove_file($file);				return false;			}			return $data;		}	}	/**	* Write cache data to a specified file	*	* 'data_global' is a special case and the generated format is different for this file:	* <code>	* <?php exit; ?>	* (expiration)	* (length of var and serialised data)	* (var)	* (serialised data)	* ... (repeat)	* </code>	*	* The other files have a similar format:	* <code>	* <?php exit; ?>	* (expiration)	* (query) [SQL files only]	* (length of serialised data)	* (serialised data)	* </code>	*	* @access private	* @param string $filename Filename to write	* @param mixed $data Data to store	* @param int $expires Timestamp when the data expires	* @param string $query Query when caching SQL queries	* @return bool True if the file was successfully created, otherwise false	*/	function _write($filename, $data = null, $expires = 0, $query = '')	{		global $phpEx;		$file = "{$this->cache_dir}$filename.$phpEx";		if ($handle = @fopen($file, 'wb'))		{			@flock($handle, LOCK_EX);			// File header			fwrite($handle, '<' . '?php exit; ?' . '>');			if ($filename == 'data_global')			{				// Global data is a different format				foreach ($this->vars as $var => $data)				{					if (strpos($var, "\r") !== false || strpos($var, "\n") !== false)					{						// CR/LF would cause fgets() to read the cache file incorrectly						// do not cache test entries, they probably won't be read back						// the cache keys should really be alphanumeric with a few symbols.						continue;					}					$data = serialize($data);					// Write out the expiration time					fwrite($handle, "\n" . $this->var_expires[$var] . "\n");					// Length of the remaining data for this var (ignoring two LF's)					fwrite($handle, strlen($data . $var) . "\n");					fwrite($handle, $var . "\n");					fwrite($handle, $data);				}			}			else			{				fwrite($handle, "\n" . $expires . "\n");				if (strpos($filename, 'sql_') === 0)				{					fwrite($handle, $query . "\n");				}				$data = serialize($data);				fwrite($handle, strlen($data) . "\n");				fwrite($handle, $data);			}			@flock($handle, LOCK_UN);			fclose($handle);			if (!function_exists('phpbb_chmod'))			{				global $phpbb_root_path;				include($phpbb_root_path . 'includes/functions.' . $phpEx);			}			phpbb_chmod($file, CHMOD_READ | CHMOD_WRITE);			return true;		}		return false;	}	/**	* Removes/unlinks file	*/	function remove_file($filename, $check = false)	{		if (!function_exists('phpbb_is_writable'))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/functions.' . $phpEx);		}		if ($check && !phpbb_is_writable($this->cache_dir))		{			// E_USER_ERROR - not using language entry - intended.			trigger_error('Unable to remove files within ' . $this->cache_dir . '. Please check directory permissions.', E_USER_ERROR);		}		return @unlink($filename);	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class ucp_main_info{	function module()	{		return array(			'filename'	=> 'ucp_main',			'title'		=> 'UCP_MAIN',			'version'	=> '1.0.0',			'modes'		=> array(				'front'			=> array('title' => 'UCP_MAIN_FRONT', 'auth' => '', 'cat' => array('UCP_MAIN')),				'subscribed'	=> array('title' => 'UCP_MAIN_SUBSCRIBED', 'auth' => '', 'cat' => array('UCP_MAIN')),				'bookmarks'		=> array('title' => 'UCP_MAIN_BOOKMARKS', 'auth' => 'cfg_allow_bookmarks', 'cat' => array('UCP_MAIN')),				'drafts'		=> array('title' => 'UCP_MAIN_DRAFTS', 'auth' => '', 'cat' => array('UCP_MAIN')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Handling actions in post details screen*/function mcp_post_details($id, $mode, $action){	global $phpEx, $phpbb_root_path, $config;	global $template, $db, $user, $auth, $cache;	$user->add_lang('posting');	$post_id = request_var('p', 0);	$start	= request_var('start', 0);	// Get post data	$post_info = get_post_data(array($post_id), false, true);	add_form_key('mcp_post_details');	if (!sizeof($post_info))	{		trigger_error('POST_NOT_EXIST');	}	$post_info = $post_info[$post_id];	$url = append_sid("{$phpbb_root_path}mcp.$phpEx?" . extra_url());	switch ($action)	{		case 'whois':			if ($auth->acl_get('m_info', $post_info['forum_id']))			{				$ip = request_var('ip', '');				include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$template->assign_vars(array(					'RETURN_POST'	=> sprintf($user->lang['RETURN_POST'], '<a href="' . append_sid("{$phpbb_root_path}mcp.$phpEx", "i=$id&amp;mode=$mode&amp;p=$post_id") . '">', '</a>'),					'U_RETURN_POST'	=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=$id&amp;mode=$mode&amp;p=$post_id"),					'L_RETURN_POST'	=> sprintf($user->lang['RETURN_POST'], '', ''),					'WHOIS'			=> user_ipwhois($ip),				));			}			// We're done with the whois page so return			return;		break;		case 'chgposter':		case 'chgposter_ip':			if ($action == 'chgposter')			{				$username = request_var('username', '', true);				$sql_where = "username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";			}			else			{				$new_user_id = request_var('u', 0);				$sql_where = 'user_id = ' . $new_user_id;			}			$sql = 'SELECT *				FROM ' . USERS_TABLE . '				WHERE ' . $sql_where;			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$row)			{				trigger_error('NO_USER');			}			if ($auth->acl_get('m_chgposter', $post_info['forum_id']))			{				if (check_form_key('mcp_post_details'))				{					change_poster($post_info, $row);				}				else				{					trigger_error('FORM_INVALID');				}			}		break;	}	// Set some vars	$users_ary = $usernames_ary = array();	$attachments = $extensions = array();	$post_id = $post_info['post_id'];	$topic_tracking_info = array();	// Get topic tracking info	if ($config['load_db_lastread'])	{		$tmp_topic_data = array($post_info['topic_id'] => $post_info);		$topic_tracking_info = get_topic_tracking($post_info['forum_id'], $post_info['topic_id'], $tmp_topic_data, array($post_info['forum_id'] => $post_info['forum_mark_time']));		unset($tmp_topic_data);	}	else	{		$topic_tracking_info = get_complete_topic_tracking($post_info['forum_id'], $post_info['topic_id']);	}	$post_unread = (isset($topic_tracking_info[$post_info['topic_id']]) && $post_info['post_time'] > $topic_tracking_info[$post_info['topic_id']]) ? true : false;	// Process message, leave it uncensored	$message = $post_info['post_text'];	if ($post_info['bbcode_bitfield'])	{		include_once($phpbb_root_path . 'includes/bbcode.' . $phpEx);		$bbcode = new bbcode($post_info['bbcode_bitfield']);		$bbcode->bbcode_second_pass($message, $post_info['bbcode_uid'], $post_info['bbcode_bitfield']);	}	$message = bbcode_nl2br($message);	$message = smiley_text($message);	if ($post_info['post_attachment'] && $auth->acl_get('u_download') && $auth->acl_get('f_download', $post_info['forum_id']))	{		$extensions = $cache->obtain_attach_extensions($post_info['forum_id']);		$sql = 'SELECT *			FROM ' . ATTACHMENTS_TABLE . '			WHERE post_msg_id = ' . $post_id . '				AND in_message = 0			ORDER BY filetime DESC, post_msg_id ASC';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$attachments[] = $row;		}		$db->sql_freeresult($result);		if (sizeof($attachments))		{			$update_count = array();			parse_attachments($post_info['forum_id'], $message, $attachments, $update_count);		}		// Display not already displayed Attachments for this post, we already parsed them. ;)		if (!empty($attachments))		{			$template->assign_var('S_HAS_ATTACHMENTS', true);			foreach ($attachments as $attachment)			{				$template->assign_block_vars('attachment', array(					'DISPLAY_ATTACHMENT'	=> $attachment)				);			}		}	}	$template->assign_vars(array(		'U_MCP_ACTION'			=> "$url&amp;i=main&amp;quickmod=1&amp;mode=post_details", // Use this for mode paramaters		'U_POST_ACTION'			=> "$url&amp;i=$id&amp;mode=post_details", // Use this for action parameters		'U_APPROVE_ACTION'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=queue&amp;p=$post_id&amp;f={$post_info['forum_id']}"),		'S_CAN_VIEWIP'			=> $auth->acl_get('m_info', $post_info['forum_id']),		'S_CAN_CHGPOSTER'		=> $auth->acl_get('m_chgposter', $post_info['forum_id']),		'S_CAN_LOCK_POST'		=> $auth->acl_get('m_lock', $post_info['forum_id']),		'S_CAN_DELETE_POST'		=> $auth->acl_get('m_delete', $post_info['forum_id']),		'S_POST_REPORTED'		=> ($post_info['post_reported']) ? true : false,		'S_POST_UNAPPROVED'		=> (!$post_info['post_approved']) ? true : false,		'S_POST_LOCKED'			=> ($post_info['post_edit_locked']) ? true : false,		'S_USER_NOTES'			=> true,		'S_CLEAR_ALLOWED'		=> ($auth->acl_get('a_clearlogs')) ? true : false,		'U_EDIT'				=> ($auth->acl_get('m_edit', $post_info['forum_id'])) ? append_sid("{$phpbb_root_path}posting.$phpEx", "mode=edit&amp;f={$post_info['forum_id']}&amp;p={$post_info['post_id']}") : '',		'U_FIND_USERNAME'		=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=mcp_chgposter&amp;field=username&amp;select_single=true'),		'U_MCP_APPROVE'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue&amp;mode=approve_details&amp;f=' . $post_info['forum_id'] . '&amp;p=' . $post_id),		'U_MCP_REPORT'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports&amp;mode=report_details&amp;f=' . $post_info['forum_id'] . '&amp;p=' . $post_id),		'U_MCP_USER_NOTES'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $post_info['user_id']),		'U_MCP_WARN_USER'		=> ($auth->acl_get('m_warn')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=warn&amp;mode=warn_user&amp;u=' . $post_info['user_id']) : '',		'U_VIEW_POST'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $post_info['forum_id'] . '&amp;p=' . $post_info['post_id'] . '#p' . $post_info['post_id']),		'U_VIEW_TOPIC'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $post_info['forum_id'] . '&amp;t=' . $post_info['topic_id']),		'MINI_POST_IMG'			=> ($post_unread) ? $user->img('icon_post_target_unread', 'UNREAD_POST') : $user->img('icon_post_target', 'POST'),		'RETURN_TOPIC'			=> sprintf($user->lang['RETURN_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f={$post_info['forum_id']}&amp;p=$post_id") . "#p$post_id\">", '</a>'),		'RETURN_FORUM'			=> sprintf($user->lang['RETURN_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", "f={$post_info['forum_id']}&amp;start={$start}") . '">', '</a>'),		'REPORTED_IMG'			=> $user->img('icon_topic_reported', $user->lang['POST_REPORTED']),		'UNAPPROVED_IMG'		=> $user->img('icon_topic_unapproved', $user->lang['POST_UNAPPROVED']),		'EDIT_IMG'				=> $user->img('icon_post_edit', $user->lang['EDIT_POST']),		'SEARCH_IMG'			=> $user->img('icon_user_search', $user->lang['SEARCH']),		'POST_AUTHOR_FULL'		=> get_username_string('full', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),		'POST_AUTHOR_COLOUR'	=> get_username_string('colour', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),		'POST_AUTHOR'			=> get_username_string('username', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),		'U_POST_AUTHOR'			=> get_username_string('profile', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),		'POST_PREVIEW'			=> $message,		'POST_SUBJECT'			=> $post_info['post_subject'],		'POST_DATE'				=> $user->format_date($post_info['post_time']),		'POST_IP'				=> $post_info['poster_ip'],		'POST_IPADDR'			=> ($auth->acl_get('m_info', $post_info['forum_id']) && request_var('lookup', '')) ? @gethostbyaddr($post_info['poster_ip']) : '',		'POST_ID'				=> $post_info['post_id'],		'U_LOOKUP_IP'			=> ($auth->acl_get('m_info', $post_info['forum_id'])) ? "$url&amp;i=$id&amp;mode=$mode&amp;lookup={$post_info['poster_ip']}#ip" : '',		'U_WHOIS'				=> ($auth->acl_get('m_info', $post_info['forum_id'])) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "i=$id&amp;mode=$mode&amp;action=whois&amp;p=$post_id&amp;ip={$post_info['poster_ip']}") : '',	));	// Get User Notes	$log_data = array();	$log_count = false;	view_log('user', $log_data, $log_count, $config['posts_per_page'], 0, 0, 0, $post_info['user_id']);	if (!empty($log_data))	{		$template->assign_var('S_USER_NOTES', true);		foreach ($log_data as $row)		{			$template->assign_block_vars('usernotes', array(				'REPORT_BY'		=> $row['username_full'],				'REPORT_AT'		=> $user->format_date($row['time']),				'ACTION'		=> $row['action'],				'ID'			=> $row['id'])			);		}	}	// Get Reports	if ($auth->acl_get('m_report', $post_info['forum_id']))	{		$sql = 'SELECT r.*, re.*, u.user_id, u.username			FROM ' . REPORTS_TABLE . ' r, ' . USERS_TABLE . ' u, ' . REPORTS_REASONS_TABLE . " re			WHERE r.post_id = $post_id				AND r.reason_id = re.reason_id				AND u.user_id = r.user_id			ORDER BY r.report_time DESC";		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			$template->assign_var('S_SHOW_REPORTS', true);			do			{				// If the reason is defined within the language file, we will use the localized version, else just use the database entry...				if (isset($user->lang['report_reasons']['TITLE'][strtoupper($row['reason_title'])]) && isset($user->lang['report_reasons']['DESCRIPTION'][strtoupper($row['reason_title'])]))				{					$row['reson_description'] = $user->lang['report_reasons']['DESCRIPTION'][strtoupper($row['reason_title'])];					$row['reason_title'] = $user->lang['report_reasons']['TITLE'][strtoupper($row['reason_title'])];				}				$template->assign_block_vars('reports', array(					'REPORT_ID'		=> $row['report_id'],					'REASON_TITLE'	=> $row['reason_title'],					'REASON_DESC'	=> $row['reason_description'],					'REPORTER'		=> ($row['user_id'] != ANONYMOUS) ? $row['username'] : $user->lang['GUEST'],					'U_REPORTER'	=> ($row['user_id'] != ANONYMOUS) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=viewprofile&amp;u=' . $row['user_id']) : '',					'USER_NOTIFY'	=> ($row['user_notify']) ? true : false,					'REPORT_TIME'	=> $user->format_date($row['report_time']),					'REPORT_TEXT'	=> bbcode_nl2br(trim($row['report_text'])),				));			}			while ($row = $db->sql_fetchrow($result));		}		$db->sql_freeresult($result);	}	// Get IP	if ($auth->acl_get('m_info', $post_info['forum_id']))	{		$rdns_ip_num = request_var('rdns', '');		if ($rdns_ip_num != 'all')		{			$template->assign_vars(array(				'U_LOOKUP_ALL'	=> "$url&amp;i=main&amp;mode=post_details&amp;rdns=all")			);		}		// Get other users who've posted under this IP		$sql = 'SELECT poster_id, COUNT(poster_id) as postings			FROM ' . POSTS_TABLE . "			WHERE poster_ip = '" . $db->sql_escape($post_info['poster_ip']) . "'			GROUP BY poster_id			ORDER BY postings DESC";		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			// Fill the user select list with users who have posted under this IP			if ($row['poster_id'] != $post_info['poster_id'])			{				$users_ary[$row['poster_id']] = $row;			}		}		$db->sql_freeresult($result);		if (sizeof($users_ary))		{			// Get the usernames			$sql = 'SELECT user_id, username				FROM ' . USERS_TABLE . '				WHERE ' . $db->sql_in_set('user_id', array_keys($users_ary));			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$users_ary[$row['user_id']]['username'] = $row['username'];				$usernames_ary[utf8_clean_string($row['username'])] = $users_ary[$row['user_id']];			}			$db->sql_freeresult($result);			foreach ($users_ary as $user_id => $user_row)			{				$template->assign_block_vars('userrow', array(					'USERNAME'		=> ($user_id == ANONYMOUS) ? $user->lang['GUEST'] : $user_row['username'],					'NUM_POSTS'		=> $user_row['postings'],					'L_POST_S'		=> ($user_row['postings'] == 1) ? $user->lang['POST'] : $user->lang['POSTS'],					'U_PROFILE'		=> ($user_id == ANONYMOUS) ? '' : append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=viewprofile&amp;u=' . $user_id),					'U_SEARCHPOSTS' => append_sid("{$phpbb_root_path}search.$phpEx", 'author_id=' . $user_id . '&amp;sr=topics'))				);			}		}		// Get other IP's this user has posted under		// A compound index on poster_id, poster_ip (posts table) would help speed up this query a lot,		// but the extra size is only valuable if there are persons having more than a thousands posts.		// This is better left to the really really big forums.		$sql = 'SELECT poster_ip, COUNT(poster_ip) AS postings			FROM ' . POSTS_TABLE . '			WHERE poster_id = ' . $post_info['poster_id'] . "			GROUP BY poster_ip			ORDER BY postings DESC";		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$hostname = (($rdns_ip_num == $row['poster_ip'] || $rdns_ip_num == 'all') && $row['poster_ip']) ? @gethostbyaddr($row['poster_ip']) : '';			$template->assign_block_vars('iprow', array(				'IP'			=> $row['poster_ip'],				'HOSTNAME'		=> $hostname,				'NUM_POSTS'		=> $row['postings'],				'L_POST_S'		=> ($row['postings'] == 1) ? $user->lang['POST'] : $user->lang['POSTS'],				'U_LOOKUP_IP'	=> ($rdns_ip_num == $row['poster_ip'] || $rdns_ip_num == 'all') ? '' : "$url&amp;i=$id&amp;mode=post_details&amp;rdns={$row['poster_ip']}#ip",				'U_WHOIS'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=$id&amp;mode=$mode&amp;action=whois&amp;p=$post_id&amp;ip={$row['poster_ip']}"))			);		}		$db->sql_freeresult($result);		$user_select = '';		if (sizeof($usernames_ary))		{			ksort($usernames_ary);			foreach ($usernames_ary as $row)			{				$user_select .= '<option value="' . $row['poster_id'] . '">' . $row['username'] . "</option>\n";			}		}		$template->assign_var('S_USER_SELECT', $user_select);	}}/*** Change a post's poster*/function change_poster(&$post_info, $userdata){	global $auth, $db, $config, $phpbb_root_path, $phpEx;	if (empty($userdata) || $userdata['user_id'] == $post_info['user_id'])	{		return;	}	$post_id = $post_info['post_id'];	$sql = 'UPDATE ' . POSTS_TABLE . "		SET poster_id = {$userdata['user_id']}		WHERE post_id = $post_id";	$db->sql_query($sql);	// Resync topic/forum if needed	if ($post_info['topic_last_post_id'] == $post_id || $post_info['forum_last_post_id'] == $post_id || $post_info['topic_first_post_id'] == $post_id)	{		sync('topic', 'topic_id', $post_info['topic_id'], false, false);		sync('forum', 'forum_id', $post_info['forum_id'], false, false);	}	// Adjust post counts... only if the post is approved (else, it was not added the users post count anyway)	if ($post_info['post_postcount'] && $post_info['post_approved'])	{		$sql = 'UPDATE ' . USERS_TABLE . '			SET user_posts = user_posts - 1			WHERE user_id = ' . $post_info['user_id'] .'			AND user_posts > 0';		$db->sql_query($sql);		$sql = 'UPDATE ' . USERS_TABLE . '			SET user_posts = user_posts + 1			WHERE user_id = ' . $userdata['user_id'];		$db->sql_query($sql);	}	// Add posted to information for this topic for the new user	markread('post', $post_info['forum_id'], $post_info['topic_id'], time(), $userdata['user_id']);	// Remove the dotted topic option if the old user has no more posts within this topic	if ($config['load_db_track'] && $post_info['user_id'] != ANONYMOUS)	{		$sql = 'SELECT topic_id			FROM ' . POSTS_TABLE . '			WHERE topic_id = ' . $post_info['topic_id'] . '				AND poster_id = ' . $post_info['user_id'];		$result = $db->sql_query_limit($sql, 1);		$topic_id = (int) $db->sql_fetchfield('topic_id');		$db->sql_freeresult($result);		if (!$topic_id)		{			$sql = 'DELETE FROM ' . TOPICS_POSTED_TABLE . '				WHERE user_id = ' . $post_info['user_id'] . '					AND topic_id = ' . $post_info['topic_id'];			$db->sql_query($sql);		}	}	// change the poster_id within the attachments table, else the data becomes out of sync and errors displayed because of wrong ownership	if ($post_info['post_attachment'])	{		$sql = 'UPDATE ' . ATTACHMENTS_TABLE . '			SET poster_id = ' . $userdata['user_id'] . '			WHERE poster_id = ' . $post_info['user_id'] . '				AND post_msg_id = ' . $post_info['post_id'] . '				AND topic_id = ' . $post_info['topic_id'];		$db->sql_query($sql);	}	// refresh search cache of this post	$search_type = basename($config['search_type']);	if (file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx))	{		require("{$phpbb_root_path}includes/search/$search_type.$phpEx");		// We do some additional checks in the module to ensure it can actually be utilised		$error = false;		$search = new $search_type($error);		if (!$error && method_exists($search, 'destroy_cache'))		{			$search->destroy_cache(array(), array($post_info['user_id'], $userdata['user_id']));		}	}	$from_username = $post_info['username'];	$to_username = $userdata['username'];	// Renew post info	$post_info = get_post_data(array($post_id), false, true);	if (!sizeof($post_info))	{		trigger_error('POST_NOT_EXIST');	}	$post_info = $post_info[$post_id];	// Now add log entry	add_log('mod', $post_info['forum_id'], $post_info['topic_id'], 'LOG_MCP_CHANGE_POSTER', $post_info['topic_title'], $from_username, $to_username);}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ucp_zebra* @package ucp*/class ucp_zebra{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $phpbb_root_path, $phpEx;		$submit	= (isset($_POST['submit']) || isset($_GET['add']) || isset($_GET['remove'])) ? true : false;		$s_hidden_fields = '';		$l_mode = strtoupper($mode);		if ($submit)		{			$data = $error = array();			$updated = false;			$var_ary = array(				'usernames'	=> array(0),				'add'		=> '',			);			foreach ($var_ary as $var => $default)			{				$data[$var] = request_var($var, $default, true);			}			if (!empty($data['add']) || sizeof($data['usernames']))			{				if (confirm_box(true))				{					// Remove users					if (!empty($data['usernames']))					{						$sql = 'DELETE FROM ' . ZEBRA_TABLE . '							WHERE user_id = ' . $user->data['user_id'] . '								AND ' . $db->sql_in_set('zebra_id', $data['usernames']);						$db->sql_query($sql);						$updated = true;					}					// Add users					if ($data['add'])					{						$data['add'] = array_map('trim', array_map('utf8_clean_string', explode("\n", $data['add'])));						// Do these name/s exist on a list already? If so, ignore ... we could be						// 'nice' and automatically handle names added to one list present on						// the other (by removing the existing one) ... but I have a feeling this						// may lead to complaints						$sql = 'SELECT z.*, u.username, u.username_clean							FROM ' . ZEBRA_TABLE . ' z, ' . USERS_TABLE . ' u							WHERE z.user_id = ' . $user->data['user_id'] . '								AND u.user_id = z.zebra_id';						$result = $db->sql_query($sql);						$friends = $foes = array();						while ($row = $db->sql_fetchrow($result))						{							if ($row['friend'])							{								$friends[] = utf8_clean_string($row['username']);							}							else							{								$foes[] = utf8_clean_string($row['username']);							}						}						$db->sql_freeresult($result);						// remove friends from the username array						$n = sizeof($data['add']);						$data['add'] = array_diff($data['add'], $friends);						if (sizeof($data['add']) < $n && $mode == 'foes')						{							$error[] = $user->lang['NOT_ADDED_FOES_FRIENDS'];						}						// remove foes from the username array						$n = sizeof($data['add']);						$data['add'] = array_diff($data['add'], $foes);						if (sizeof($data['add']) < $n && $mode == 'friends')						{							$error[] = $user->lang['NOT_ADDED_FRIENDS_FOES'];						}						// remove the user himself from the username array						$n = sizeof($data['add']);						$data['add'] = array_diff($data['add'], array(utf8_clean_string($user->data['username'])));						if (sizeof($data['add']) < $n)						{							$error[] = $user->lang['NOT_ADDED_' . $l_mode . '_SELF'];						}						unset($friends, $foes, $n);						if (sizeof($data['add']))						{							$sql = 'SELECT user_id, user_type								FROM ' . USERS_TABLE . '								WHERE ' . $db->sql_in_set('username_clean', $data['add']) . '									AND user_type <> ' . USER_INACTIVE;							$result = $db->sql_query($sql);							$user_id_ary = array();							while ($row = $db->sql_fetchrow($result))							{								if ($row['user_id'] != ANONYMOUS && $row['user_type'] != USER_IGNORE)								{									$user_id_ary[] = $row['user_id'];								}								else if ($row['user_id'] != ANONYMOUS)								{									$error[] = $user->lang['NOT_ADDED_' . $l_mode . '_BOTS'];								}								else								{									$error[] = $user->lang['NOT_ADDED_' . $l_mode . '_ANONYMOUS'];								}							}							$db->sql_freeresult($result);							if (sizeof($user_id_ary))							{								// Remove users from foe list if they are admins or moderators								if ($mode == 'foes')								{									$perms = array();									foreach ($auth->acl_get_list($user_id_ary, array('a_', 'm_')) as $forum_id => $forum_ary)									{										foreach ($forum_ary as $auth_option => $user_ary)										{											$perms = array_merge($perms, $user_ary);										}									}									$perms = array_unique($perms);									if (sizeof($perms))									{										$error[] = $user->lang['NOT_ADDED_FOES_MOD_ADMIN'];									}									// This may not be right ... it may yield true when perms equate to deny									$user_id_ary = array_diff($user_id_ary, $perms);									unset($perms);								}								if (sizeof($user_id_ary))								{									$sql_mode = ($mode == 'friends') ? 'friend' : 'foe';									$sql_ary = array();									foreach ($user_id_ary as $zebra_id)									{										$sql_ary[] = array(											'user_id'		=> (int) $user->data['user_id'],											'zebra_id'		=> (int) $zebra_id,											$sql_mode		=> 1										);									}									$db->sql_multi_insert(ZEBRA_TABLE, $sql_ary);									$updated = true;								}								unset($user_id_ary);							}							else if (!sizeof($error))							{								$error[] = $user->lang['USER_NOT_FOUND_OR_INACTIVE'];							}						}					}					if ($updated)					{						meta_refresh(3, $this->u_action);						$message = $user->lang[$l_mode . '_UPDATED'] . '<br />' . implode('<br />', $error) . ((sizeof($error)) ? '<br />' : '') . '<br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $this->u_action . '">', '</a>');						trigger_error($message);					}					else					{						$template->assign_var('ERROR', implode('<br />', $error));					}				}				else				{					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(						'mode'		=> $mode,						'submit'	=> true,						'usernames'	=> $data['usernames'],						'add'		=> $data['add']))					);				}			}		}		$sql_and = ($mode == 'friends') ? 'z.friend = 1' : 'z.foe = 1';		$sql = 'SELECT z.*, u.username, u.username_clean			FROM ' . ZEBRA_TABLE . ' z, ' . USERS_TABLE . ' u			WHERE z.user_id = ' . $user->data['user_id'] . "				AND $sql_and				AND u.user_id = z.zebra_id			ORDER BY u.username_clean ASC";		$result = $db->sql_query($sql);		$s_username_options = '';		while ($row = $db->sql_fetchrow($result))		{			$s_username_options .= '<option value="' . $row['zebra_id'] . '">' . $row['username'] . '</option>';		}		$db->sql_freeresult($result);		$template->assign_vars(array(			'L_TITLE'			=> $user->lang['UCP_ZEBRA_' . $l_mode],			'U_FIND_USERNAME'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=ucp&amp;field=add'),			'S_USERNAME_OPTIONS'	=> $s_username_options,			'S_HIDDEN_FIELDS'		=> $s_hidden_fields,			'S_UCP_ACTION'			=> $this->u_action)		);		$this->tpl_name = 'ucp_zebra_' . $mode;		$this->page_title = 'UCP_ZEBRA_' . $l_mode;	}}?>
<?php//// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");//// Do not change anything below this line.//// Just a handy script to completely wipe out the contents of a // database.. Use with caution :)if(!isset($submit)){	?>	<FORM ACTION="<?php echo $PHP_SELF?>" METHOD="post" >	<table>	<tr>		<td>DB host:</td>		<td><INPUT TYPE="text" name="dbhost" value="localhost"></td>	</tr><tr>		<td>DB name:</td>		<td><INPUT TYPE="text" name="dbname" value="phpBB"></td>	</tr><tr>		<td>DB username:</td>		<td><INPUT TYPE="text" name="dbuser" value="root"></td>	</tr><tr>		<td>DB password:</td>		<td><INPUT TYPE="password" name="dbpass"></td>	</tr></table>	<INPUT TYPE="submit" name="submit" value="Submit">	</FORM>	<?php}else{	mysql_connect($dbhost, $dbuser, $dbpass) || die(mysql_error());	mysql_select_db($dbname);	$result = mysql_query("SHOW TABLES");	while($row = mysql_fetch_row($result)){		$table = $row[0];		print "Going to drop $table...";		mysql_query("DROP TABLE $table") || die();		print "Done.<br>\n";		flush();	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group, sections (c) 2001 ispi of Lincoln Inc* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Extension of template class - Functions needed for compiling templates only.** psoTFX, phpBB Development Team - Completion of file caching, decompilation* routines and implementation of conditionals/keywords and associated changes** The interface was inspired by PHPLib templates,  and the template file (formats are* quite similar)** The keyword/conditional implementation is currently based on sections of code from* the Smarty templating engine (c) 2001 ispi of Lincoln, Inc. which is released* (on its own and in whole) under the LGPL. Section 3 of the LGPL states that any code* derived from an LGPL application may be relicenced under the GPL, this applies* to this source** DEFINE directive inspired by a request by Cyberalien** @package phpBB3*/class template_compile{	var $template;	// Various storage arrays	var $block_names = array();	var $block_else_level = array();	/**	* constuctor	*/	function template_compile(&$template)	{		$this->template = &$template;	}	/**	* Load template source from file	* @access private	*/	function _tpl_load_file($handle, $store_in_db = false)	{		// Try and open template for read		if (!file_exists($this->template->files[$handle]))		{			trigger_error("template->_tpl_load_file(): File {$this->template->files[$handle]} does not exist or is empty", E_USER_ERROR);		}		$this->template->compiled_code[$handle] = $this->compile(trim(@file_get_contents($this->template->files[$handle])));		// Actually compile the code now.		$this->compile_write($handle, $this->template->compiled_code[$handle]);		// Store in database if required...		if ($store_in_db)		{			global $db, $user;			$sql_ary = array(				'template_id'			=> $this->template->files_template[$handle],				'template_filename'		=> $this->template->filename[$handle],				'template_included'		=> '',				'template_mtime'		=> time(),				'template_data'			=> trim(@file_get_contents($this->template->files[$handle])),			);			$sql = 'INSERT INTO ' . STYLES_TEMPLATE_DATA_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);			$db->sql_query($sql);		}	}	/**	* Remove any PHP tags that do not belong, these regular expressions are derived from	* the ones that exist in zend_language_scanner.l	* @access private	*/	function remove_php_tags(&$code)	{		// This matches the information gathered from the internal PHP lexer		$match = array(			'#<([\?%])=?.*?\1>#s',			'#<script\s+language\s*=\s*(["\']?)php\1\s*>.*?</script\s*>#s',			'#<\?php(?:\r\n?|[ \n\t]).*?\?>#s'		);		$code = preg_replace($match, '', $code);	}	/**	* The all seeing all doing compile method. Parts are inspired by or directly from Smarty	* @access private	*/	function compile($code, $no_echo = false, $echo_var = '')	{		global $config;		if ($echo_var)		{			global $$echo_var;		}		// Remove any "loose" php ... we want to give admins the ability		// to switch on/off PHP for a given template. Allowing unchecked		// php is a no-no. There is a potential issue here in that non-php		// content may be removed ... however designers should use entities		// if they wish to display < and >		$this->remove_php_tags($code);		// Pull out all block/statement level elements and separate plain text		preg_match_all('#<!-- PHP -->(.*?)<!-- ENDPHP -->#s', $code, $matches);		$php_blocks = $matches[1];		$code = preg_replace('#<!-- PHP -->.*?<!-- ENDPHP -->#s', '<!-- PHP -->', $code);		preg_match_all('#<!-- INCLUDE (\{\$?[A-Z0-9\-_]+\}|[a-zA-Z0-9\_\-\+\./]+) -->#', $code, $matches);		$include_blocks = $matches[1];		$code = preg_replace('#<!-- INCLUDE (?:\{\$?[A-Z0-9\-_]+\}|[a-zA-Z0-9\_\-\+\./]+) -->#', '<!-- INCLUDE -->', $code);		preg_match_all('#<!-- INCLUDEPHP ([a-zA-Z0-9\_\-\+\./]+) -->#', $code, $matches);		$includephp_blocks = $matches[1];		$code = preg_replace('#<!-- INCLUDEPHP [a-zA-Z0-9\_\-\+\./]+ -->#', '<!-- INCLUDEPHP -->', $code);		preg_match_all('#<!-- ([^<].*?) (.*?)? ?-->#', $code, $blocks, PREG_SET_ORDER);		$text_blocks = preg_split('#<!-- [^<].*? (?:.*?)? ?-->#', $code);		for ($i = 0, $j = sizeof($text_blocks); $i < $j; $i++)		{			$this->compile_var_tags($text_blocks[$i]);		}		$compile_blocks = array();		for ($curr_tb = 0, $tb_size = sizeof($blocks); $curr_tb < $tb_size; $curr_tb++)		{			$block_val = &$blocks[$curr_tb];			switch ($block_val[1])			{				case 'BEGIN':					$this->block_else_level[] = false;					$compile_blocks[] = '<?php ' . $this->compile_tag_block($block_val[2]) . ' ?>';				break;				case 'BEGINELSE':					$this->block_else_level[sizeof($this->block_else_level) - 1] = true;					$compile_blocks[] = '<?php }} else { ?>';				break;				case 'END':					array_pop($this->block_names);					$compile_blocks[] = '<?php ' . ((array_pop($this->block_else_level)) ? '}' : '}}') . ' ?>';				break;				case 'IF':					$compile_blocks[] = '<?php ' . $this->compile_tag_if($block_val[2], false) . ' ?>';				break;				case 'ELSE':					$compile_blocks[] = '<?php } else { ?>';				break;				case 'ELSEIF':					$compile_blocks[] = '<?php ' . $this->compile_tag_if($block_val[2], true) . ' ?>';				break;				case 'ENDIF':					$compile_blocks[] = '<?php } ?>';				break;				case 'DEFINE':					$compile_blocks[] = '<?php ' . $this->compile_tag_define($block_val[2], true) . ' ?>';				break;				case 'UNDEFINE':					$compile_blocks[] = '<?php ' . $this->compile_tag_define($block_val[2], false) . ' ?>';				break;				case 'INCLUDE':					$temp = array_shift($include_blocks);					// Dynamic includes					// Cheap match rather than a full blown regexp, we already know					// the format of the input so just use string manipulation.					if ($temp[0] == '{')					{						$file = false;						if ($temp[1] == '$')						{							$var = substr($temp, 2, -1);							//$file = $this->template->_tpldata['DEFINE']['.'][$var];							$temp = "\$this->_tpldata['DEFINE']['.']['$var']";						}						else						{							$var = substr($temp, 1, -1);							//$file = $this->template->_rootref[$var];							$temp = "\$this->_rootref['$var']";						}					}					else					{						$file = $temp;					}					$compile_blocks[] = '<?php ' . $this->compile_tag_include($temp) . ' ?>';					// No point in checking variable includes					if ($file)					{						$this->template->_tpl_include($file, false);					}				break;				case 'INCLUDEPHP':					$compile_blocks[] = ($config['tpl_allow_php']) ? '<?php ' . $this->compile_tag_include_php(array_shift($includephp_blocks)) . ' ?>' : '';				break;				case 'PHP':					$compile_blocks[] = ($config['tpl_allow_php']) ? '<?php ' . array_shift($php_blocks) . ' ?>' : '';				break;				default:					$this->compile_var_tags($block_val[0]);					$trim_check = trim($block_val[0]);					$compile_blocks[] = (!$no_echo) ? ((!empty($trim_check)) ? $block_val[0] : '') : ((!empty($trim_check)) ? $block_val[0] : '');				break;			}		}		$template_php = '';		for ($i = 0, $size = sizeof($text_blocks); $i < $size; $i++)		{			$trim_check_text = trim($text_blocks[$i]);			$template_php .= (!$no_echo) ? (($trim_check_text != '') ? $text_blocks[$i] : '') . ((isset($compile_blocks[$i])) ? $compile_blocks[$i] : '') : (($trim_check_text != '') ? $text_blocks[$i] : '') . ((isset($compile_blocks[$i])) ? $compile_blocks[$i] : '');		}		// Remove unused opening/closing tags		$template_php = str_replace(' ?><?php ', ' ', $template_php);		// Now add a newline after each php closing tag which already has a newline		// PHP itself strips a newline if a closing tag is used (this is documented behaviour) and it is mostly not intended by style authors to remove newlines		$template_php = preg_replace('#\?\>([\r\n])#', '?>\1\1', $template_php);		// There will be a number of occasions where we switch into and out of		// PHP mode instantaneously. Rather than "burden" the parser with this		// we'll strip out such occurences, minimising such switching		if ($no_echo)		{			return "\$$echo_var .= '" . $template_php . "'";		}		return $template_php;	}	/**	* Compile variables	* @access private	*/	function compile_var_tags(&$text_blocks)	{		// change template varrefs into PHP varrefs		$varrefs = array();		// This one will handle varrefs WITH namespaces		preg_match_all('#\{((?:[a-z0-9\-_]+\.)+)(\$)?([A-Z0-9\-_]+)\}#', $text_blocks, $varrefs, PREG_SET_ORDER);		foreach ($varrefs as $var_val)		{			$namespace = $var_val[1];			$varname = $var_val[3];			$new = $this->generate_block_varref($namespace, $varname, true, $var_val[2]);			$text_blocks = str_replace($var_val[0], $new, $text_blocks);		}		// This will handle the remaining root-level varrefs		// transform vars prefixed by L_ into their language variable pendant if nothing is set within the tpldata array		if (strpos($text_blocks, '{L_') !== false)		{			$text_blocks = preg_replace('#\{L_([A-Z0-9\-_]+)\}#', "<?php echo ((isset(\$this->_rootref['L_\\1'])) ? \$this->_rootref['L_\\1'] : ((isset(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '{ \\1 }')); ?>", $text_blocks);		}		// Handle addslashed language variables prefixed with LA_		// If a template variable already exist, it will be used in favor of it...		if (strpos($text_blocks, '{LA_') !== false)		{			$text_blocks = preg_replace('#\{LA_([A-Z0-9\-_]+)\}#', "<?php echo ((isset(\$this->_rootref['LA_\\1'])) ? \$this->_rootref['LA_\\1'] : ((isset(\$this->_rootref['L_\\1'])) ? addslashes(\$this->_rootref['L_\\1']) : ((isset(\$user->lang['\\1'])) ? addslashes(\$user->lang['\\1']) : '{ \\1 }'))); ?>", $text_blocks);		}		// Handle remaining varrefs		$text_blocks = preg_replace('#\{([A-Z0-9\-_]+)\}#', "<?php echo (isset(\$this->_rootref['\\1'])) ? \$this->_rootref['\\1'] : ''; ?>", $text_blocks);		$text_blocks = preg_replace('#\{\$([A-Z0-9\-_]+)\}#', "<?php echo (isset(\$this->_tpldata['DEFINE']['.']['\\1'])) ? \$this->_tpldata['DEFINE']['.']['\\1'] : ''; ?>", $text_blocks);		return;	}	/**	* Compile blocks	* @access private	*/	function compile_tag_block($tag_args)	{		$no_nesting = false;		// Is the designer wanting to call another loop in a loop?		if (strpos($tag_args, '!') === 0)		{			// Count the number of ! occurrences (not allowed in vars)			$no_nesting = substr_count($tag_args, '!');			$tag_args = substr($tag_args, $no_nesting);		}		// Allow for control of looping (indexes start from zero):		// foo(2)    : Will start the loop on the 3rd entry		// foo(-2)   : Will start the loop two entries from the end		// foo(3,4)  : Will start the loop on the fourth entry and end it on the fifth		// foo(3,-4) : Will start the loop on the fourth entry and end it four from last		if (preg_match('#^([^()]*)\(([\-\d]+)(?:,([\-\d]+))?\)$#', $tag_args, $match))		{			$tag_args = $match[1];			if ($match[2] < 0)			{				$loop_start = '($_' . $tag_args . '_count ' . $match[2] . ' < 0 ? 0 : $_' . $tag_args . '_count ' . $match[2] . ')';			}			else			{				$loop_start = '($_' . $tag_args . '_count < ' . $match[2] . ' ? $_' . $tag_args . '_count : ' . $match[2] . ')';			}			if (strlen($match[3]) < 1 || $match[3] == -1)			{				$loop_end = '$_' . $tag_args . '_count';			}			else if ($match[3] >= 0)			{				$loop_end = '(' . ($match[3] + 1) . ' > $_' . $tag_args . '_count ? $_' . $tag_args . '_count : ' . ($match[3] + 1) . ')';			}			else //if ($match[3] < -1)			{				$loop_end = '$_' . $tag_args . '_count' . ($match[3] + 1);			}		}		else		{			$loop_start = 0;			$loop_end = '$_' . $tag_args . '_count';		}		$tag_template_php = '';		array_push($this->block_names, $tag_args);		if ($no_nesting !== false)		{			// We need to implode $no_nesting times from the end...			$block = array_slice($this->block_names, -$no_nesting);		}		else		{			$block = $this->block_names;		}		if (sizeof($block) < 2)		{			// Block is not nested.			$tag_template_php = '$_' . $tag_args . "_count = (isset(\$this->_tpldata['$tag_args'])) ? sizeof(\$this->_tpldata['$tag_args']) : 0;";			$varref = "\$this->_tpldata['$tag_args']";		}		else		{			// This block is nested.			// Generate a namespace string for this block.			$namespace = implode('.', $block);			// Get a reference to the data array for this block that depends on the			// current indices of all parent blocks.			$varref = $this->generate_block_data_ref($namespace, false);			// Create the for loop code to iterate over this block.			$tag_template_php = '$_' . $tag_args . '_count = (isset(' . $varref . ')) ? sizeof(' . $varref . ') : 0;';		}		$tag_template_php .= 'if ($_' . $tag_args . '_count) {';		/**		* The following uses foreach for iteration instead of a for loop, foreach is faster but requires PHP to make a copy of the contents of the array which uses more memory		* <code>		*	if (!$offset)		*	{		*		$tag_template_php .= 'foreach (' . $varref . ' as $_' . $tag_args . '_i => $_' . $tag_args . '_val){';		*	}		* </code>		*/		$tag_template_php .= 'for ($_' . $tag_args . '_i = ' . $loop_start . '; $_' . $tag_args . '_i < ' . $loop_end . '; ++$_' . $tag_args . '_i){';		$tag_template_php .= '$_'. $tag_args . '_val = &' . $varref . '[$_'. $tag_args. '_i];';		return $tag_template_php;	}	/**	* Compile IF tags - much of this is from Smarty with	* some adaptions for our block level methods	* @access private	*/	function compile_tag_if($tag_args, $elseif)	{		// Tokenize args for 'if' tag.		preg_match_all('/(?:			"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"         |			\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'     |			[(),]                                  |			[^\s(),]+)/x', $tag_args, $match);		$tokens = $match[0];		$is_arg_stack = array();		for ($i = 0, $size = sizeof($tokens); $i < $size; $i++)		{			$token = &$tokens[$i];			switch ($token)			{				case '!==':				case '===':				case '<<':				case '>>':				case '|':				case '^':				case '&':				case '~':				case ')':				case ',':				case '+':				case '-':				case '*':				case '/':				case '@':				break;				case '==':				case 'eq':					$token = '==';				break;				case '!=':				case '<>':				case 'ne':				case 'neq':					$token = '!=';				break;				case '<':				case 'lt':					$token = '<';				break;				case '<=':				case 'le':				case 'lte':					$token = '<=';				break;				case '>':				case 'gt':					$token = '>';				break;				case '>=':				case 'ge':				case 'gte':					$token = '>=';				break;				case '&&':				case 'and':					$token = '&&';				break;				case '||':				case 'or':					$token = '||';				break;				case '!':				case 'not':					$token = '!';				break;				case '%':				case 'mod':					$token = '%';				break;				case '(':					array_push($is_arg_stack, $i);				break;				case 'is':					$is_arg_start = ($tokens[$i-1] == ')') ? array_pop($is_arg_stack) : $i-1;					$is_arg	= implode('	', array_slice($tokens,	$is_arg_start, $i -	$is_arg_start));					$new_tokens	= $this->_parse_is_expr($is_arg, array_slice($tokens, $i+1));					array_splice($tokens, $is_arg_start, sizeof($tokens), $new_tokens);					$i = $is_arg_start;				// no break				default:					if (preg_match('#^((?:[a-z0-9\-_]+\.)+)?(\$)?(?=[A-Z])([A-Z0-9\-_]+)#s', $token, $varrefs))					{						$token = (!empty($varrefs[1])) ? $this->generate_block_data_ref(substr($varrefs[1], 0, -1), true, $varrefs[2]) . '[\'' . $varrefs[3] . '\']' : (($varrefs[2]) ? '$this->_tpldata[\'DEFINE\'][\'.\'][\'' . $varrefs[3] . '\']' : '$this->_rootref[\'' . $varrefs[3] . '\']');					}					else if (preg_match('#^\.((?:[a-z0-9\-_]+\.?)+)$#s', $token, $varrefs))					{						// Allow checking if loops are set with .loopname						// It is also possible to check the loop count by doing <!-- IF .loopname > 1 --> for example						$blocks = explode('.', $varrefs[1]);						// If the block is nested, we have a reference that we can grab.						// If the block is not nested, we just go and grab the block from _tpldata						if (sizeof($blocks) > 1)						{							$block = array_pop($blocks);							$namespace = implode('.', $blocks);							$varref = $this->generate_block_data_ref($namespace, true);							// Add the block reference for the last child.							$varref .= "['" . $block . "']";						}						else						{							$varref = '$this->_tpldata';							// Add the block reference for the last child.							$varref .= "['" . $blocks[0] . "']";						}						$token = "sizeof($varref)";					}					else if (!empty($token))					{						$token = '(' . $token . ')';					}				break;			}		}		// If there are no valid tokens left or only control/compare characters left, we do skip this statement		if (!sizeof($tokens) || str_replace(array(' ', '=', '!', '<', '>', '&', '|', '%', '(', ')'), '', implode('', $tokens)) == '')		{			$tokens = array('false');		}		return (($elseif) ? '} else if (' : 'if (') . (implode(' ', $tokens) . ') { ');	}	/**	* Compile DEFINE tags	* @access private	*/	function compile_tag_define($tag_args, $op)	{		preg_match('#^((?:[a-z0-9\-_]+\.)+)?\$(?=[A-Z])([A-Z0-9_\-]*)(?: = (\'?)([^\']*)(\'?))?$#', $tag_args, $match);		if (empty($match[2]) || (!isset($match[4]) && $op))		{			return '';		}		if (!$op)		{			return 'unset(' . (($match[1]) ? $this->generate_block_data_ref(substr($match[1], 0, -1), true, true) . '[\'' . $match[2] . '\']' : '$this->_tpldata[\'DEFINE\'][\'.\'][\'' . $match[2] . '\']') . ');';		}		// Are we a string?		if ($match[3] && $match[5])		{			$match[4] = str_replace(array('\\\'', '\\\\', '\''), array('\'', '\\', '\\\''), $match[4]);			// Compile reference, we allow template variables in defines...			$match[4] = $this->compile($match[4]);			// Now replace the php code			$match[4] = "'" . str_replace(array('<?php echo ', '; ?>'), array("' . ", " . '"), $match[4]) . "'";		}		else		{			preg_match('#true|false|\.#i', $match[4], $type);			switch (strtolower($type[0]))			{				case 'true':				case 'false':					$match[4] = strtoupper($match[4]);				break;				case '.':					$match[4] = doubleval($match[4]);				break;				default:					$match[4] = intval($match[4]);				break;			}		}		return (($match[1]) ? $this->generate_block_data_ref(substr($match[1], 0, -1), true, true) . '[\'' . $match[2] . '\']' : '$this->_tpldata[\'DEFINE\'][\'.\'][\'' . $match[2] . '\']') . ' = ' . $match[4] . ';';	}	/**	* Compile INCLUDE tag	* @access private	*/	function compile_tag_include($tag_args)	{		// Process dynamic includes		if ($tag_args[0] == '$')		{			return "if (isset($tag_args)) { \$this->_tpl_include($tag_args); }";		}		return "\$this->_tpl_include('$tag_args');";	}	/**	* Compile INCLUDE_PHP tag	* @access private	*/	function compile_tag_include_php($tag_args)	{		return "\$this->_php_include('$tag_args');";	}	/**	* parse expression	* This is from Smarty	* @access private	*/	function _parse_is_expr($is_arg, $tokens)	{		$expr_end = 0;		$negate_expr = false;		if (($first_token = array_shift($tokens)) == 'not')		{			$negate_expr = true;			$expr_type = array_shift($tokens);		}		else		{			$expr_type = $first_token;		}		switch ($expr_type)		{			case 'even':				if (@$tokens[$expr_end] == 'by')				{					$expr_end++;					$expr_arg = $tokens[$expr_end++];					$expr = "!(($is_arg / $expr_arg) % $expr_arg)";				}				else				{					$expr = "!($is_arg & 1)";				}			break;			case 'odd':				if (@$tokens[$expr_end] == 'by')				{					$expr_end++;					$expr_arg = $tokens[$expr_end++];					$expr = "(($is_arg / $expr_arg) % $expr_arg)";				}				else				{					$expr = "($is_arg & 1)";				}			break;			case 'div':				if (@$tokens[$expr_end] == 'by')				{					$expr_end++;					$expr_arg = $tokens[$expr_end++];					$expr = "!($is_arg % $expr_arg)";				}			break;		}		if ($negate_expr)		{			$expr = "!($expr)";		}		array_splice($tokens, 0, $expr_end, $expr);		return $tokens;	}	/**	* Generates a reference to the given variable inside the given (possibly nested)	* block namespace. This is a string of the form:	* ' . $this->_tpldata['parent'][$_parent_i]['$child1'][$_child1_i]['$child2'][$_child2_i]...['varname'] . '	* It's ready to be inserted into an "echo" line in one of the templates.	* NOTE: expects a trailing "." on the namespace.	* @access private	*/	function generate_block_varref($namespace, $varname, $echo = true, $defop = false)	{		// Strip the trailing period.		$namespace = substr($namespace, 0, -1);		// Get a reference to the data block for this namespace.		$varref = $this->generate_block_data_ref($namespace, true, $defop);		// Prepend the necessary code to stick this in an echo line.		// Append the variable reference.		$varref .= "['$varname']";		$varref = ($echo) ? "<?php echo $varref; ?>" : ((isset($varref)) ? $varref : '');		return $varref;	}	/**	* Generates a reference to the array of data values for the given	* (possibly nested) block namespace. This is a string of the form:	* $this->_tpldata['parent'][$_parent_i]['$child1'][$_child1_i]['$child2'][$_child2_i]...['$childN']	*	* If $include_last_iterator is true, then [$_childN_i] will be appended to the form shown above.	* NOTE: does not expect a trailing "." on the blockname.	* @access private	*/	function generate_block_data_ref($blockname, $include_last_iterator, $defop = false)	{		// Get an array of the blocks involved.		$blocks = explode('.', $blockname);		$blockcount = sizeof($blocks) - 1;		// DEFINE is not an element of any referenced variable, we must use _tpldata to access it		if ($defop)		{			$varref = '$this->_tpldata[\'DEFINE\']';			// Build up the string with everything but the last child.			for ($i = 0; $i < $blockcount; $i++)			{				$varref .= "['" . $blocks[$i] . "'][\$_" . $blocks[$i] . '_i]';			}			// Add the block reference for the last child.			$varref .= "['" . $blocks[$blockcount] . "']";			// Add the iterator for the last child if requried.			if ($include_last_iterator)			{				$varref .= '[$_' . $blocks[$blockcount] . '_i]';			}			return $varref;		}		else if ($include_last_iterator)		{			return '$_'. $blocks[$blockcount] . '_val';		}		else		{			return '$_'. $blocks[$blockcount - 1] . '_val[\''. $blocks[$blockcount]. '\']';		}	}	/**	* Write compiled file to cache directory	* @access private	*/	function compile_write($handle, $data)	{		global $phpEx;		$filename = $this->template->cachepath . str_replace('/', '.', $this->template->filename[$handle]) . '.' . $phpEx;		$data = "<?php if (!defined('IN_PHPBB')) exit;" . ((strpos($data, '<?php') === 0) ? substr($data, 5) : ' ?>' . $data);		if ($fp = @fopen($filename, 'wb'))		{			@flock($fp, LOCK_EX);			@fwrite ($fp, $data);			@flock($fp, LOCK_UN);			@fclose($fp);			phpbb_chmod($filename, CHMOD_READ | CHMOD_WRITE);		}		return;	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_disallow_info{	function module()	{		return array(			'filename'	=> 'acp_disallow',			'title'		=> 'ACP_DISALLOW',			'version'	=> '1.0.0',			'modes'		=> array(				'usernames'		=> array('title' => 'ACP_DISALLOW_USERNAMES', 'auth' => 'acl_a_names', 'cat' => array('ACP_USER_SECURITY')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/*** Rebuild BOTS** You should make a backup from your whole database. Things can and will go wrong. * This will only work if no BOTs were added.**/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.'.$phpEx);include($phpbb_root_path . '/includes/functions_user.'.$phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$bots = array(	'AdsBot [Google]'			=> array('AdsBot-Google', ''),	'Alexa [Bot]'				=> array('ia_archiver', ''),	'Alta Vista [Bot]'			=> array('Scooter/', ''),	'Ask Jeeves [Bot]'			=> array('Ask Jeeves', ''),	'Baidu [Spider]'			=> array('Baiduspider+(', ''),	'Exabot [Bot]'				=> array('Exabot/', ''),	'FAST Enterprise [Crawler]'	=> array('FAST Enterprise Crawler', ''),	'FAST WebCrawler [Crawler]'	=> array('FAST-WebCrawler/', ''),	'Francis [Bot]'				=> array('http://www.neomo.de/', ''),	'Gigabot [Bot]'				=> array('Gigabot/', ''),	'Google Adsense [Bot]'		=> array('Mediapartners-Google', ''),	'Google Desktop'			=> array('Google Desktop', ''),	'Google Feedfetcher'		=> array('Feedfetcher-Google', ''),	'Google [Bot]'				=> array('Googlebot', ''),	'Heise IT-Markt [Crawler]'	=> array('heise-IT-Markt-Crawler', ''),	'Heritrix [Crawler]'		=> array('heritrix/1.', ''),	'IBM Research [Bot]'		=> array('ibm.com/cs/crawler', ''),	'ICCrawler - ICjobs'		=> array('ICCrawler - ICjobs', ''),	'ichiro [Crawler]'			=> array('ichiro/2', ''),	'Majestic-12 [Bot]'			=> array('MJ12bot/', ''),	'Metager [Bot]'				=> array('MetagerBot/', ''),	'MSN NewsBlogs'				=> array('msnbot-NewsBlogs/', ''),	'MSN [Bot]'					=> array('msnbot/', ''),	'MSNbot Media'				=> array('msnbot-media/', ''),	'NG-Search [Bot]'			=> array('NG-Search/', ''),	'Nutch [Bot]'				=> array('http://lucene.apache.org/nutch/', ''),	'Nutch/CVS [Bot]'			=> array('NutchCVS/', ''),	'OmniExplorer [Bot]'		=> array('OmniExplorer_Bot/', ''),	'Online link [Validator]'	=> array('online link validator', ''),	'psbot [Picsearch]'			=> array('psbot/0', ''),	'Seekport [Bot]'			=> array('Seekbot/', ''),	'Sensis [Crawler]'			=> array('Sensis Web Crawler', ''),	'SEO Crawler'				=> array('SEO search Crawler/', ''),	'Seoma [Crawler]'			=> array('Seoma [SEO Crawler]', ''),	'SEOSearch [Crawler]'		=> array('SEOsearch/', ''),	'Snappy [Bot]'				=> array('Snappy/1.1 ( http://www.urltrends.com/ )', ''),	'Steeler [Crawler]'			=> array('http://www.tkl.iis.u-tokyo.ac.jp/~crawler/', ''),	'Synoo [Bot]'				=> array('SynooBot/', ''),	'Telekom [Bot]'				=> array('crawleradmin.t-info@telekom.de', ''),	'TurnitinBot [Bot]'			=> array('TurnitinBot/', ''),	'Voyager [Bot]'				=> array('voyager/1.0', ''),	'W3 [Sitesearch]'			=> array('W3 SiteSearch Crawler', ''),	'W3C [Linkcheck]'			=> array('W3C-checklink/', ''),	'W3C [Validator]'			=> array('W3C_*Validator', ''),	'WiseNut [Bot]'				=> array('http://www.WISEnutbot.com', ''),	'YaCy [Bot]'				=> array('yacybot', ''),	'Yahoo MMCrawler [Bot]'		=> array('Yahoo-MMCrawler/', ''),	'Yahoo Slurp [Bot]'			=> array('Yahoo! DE Slurp', ''),	'Yahoo [Bot]'				=> array('Yahoo! Slurp', ''),	'YahooSeeker [Bot]'			=> array('YahooSeeker/', ''),);	$bot_ids = array();user_get_id_name($bot_ids, array_keys($bots), USER_IGNORE);foreach($bot_ids as $bot){	user_delete('remove', $bot);}// Doneadd_bots($bots);echo 'done';/*** Add the search bots into the database* This code should be used in execute_last if the source database did not have bots* If you are converting bots this function should not be called* @todo We might want to look at sharing the bot list between the install code and this code for consistency*/function add_bots($bots){	global $db, $config;	$sql = 'SELECT group_id FROM ' . GROUPS_TABLE . " WHERE group_name = 'BOTS'";	$result = $db->sql_query($sql);	$group_id = (int) $db->sql_fetchfield('group_id', false, $result);	$db->sql_freeresult($result);	$db->sql_query('TRUNCATE TABLE ' . BOTS_TABLE);	if (!$group_id)	{		add_default_groups();		$sql = 'SELECT group_id FROM ' . GROUPS_TABLE . " WHERE group_name = 'BOTS'";		$result = $db->sql_query($sql);		$group_id = (int) $db->sql_fetchfield('group_id', false, $result);		$db->sql_freeresult($result);	}	foreach ($bots as $bot_name => $bot_ary)	{		$user_row = array(			'user_type'				=> USER_IGNORE,			'group_id'				=> $group_id,			'username'				=> $bot_name,			'user_regdate'			=> time(),			'user_password'			=> '',			'user_colour'			=> '9E8DA7',			'user_email'			=> '',			'user_lang'				=> $config['default_lang'],			'user_style'			=> 1,			'user_timezone'			=> 0,			'user_allow_massemail'	=> 0,		);		$user_id = user_add($user_row);		if ($user_id)		{			$sql = 'INSERT INTO ' . BOTS_TABLE . ' ' . $db->sql_build_array('INSERT', array(				'bot_active'	=> 1,				'bot_name'		=> $bot_name,				'user_id'		=> $user_id,				'bot_agent'		=> $bot_ary[0],				'bot_ip'		=> $bot_ary[1])			);			$db->sql_query($sql);		}	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2007 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** phpBB Hook Class* @package phpBB3*/class phpbb_hook{	/**	* Registered hooks	*/	var $hooks = array();	/**	* Results returned by functions called	*/	var $hook_result = array();	/**	* internal pointer	*/	var $current_hook = NULL;	/**	* Initialize hook class.	*	* @param array $valid_hooks array containing the hookable functions/methods	*/	function phpbb_hook($valid_hooks)	{		foreach ($valid_hooks as $_null => $method)		{			$this->add_hook($method);		}		if (function_exists('phpbb_hook_register'))		{			phpbb_hook_register($this);		}	}	/**	* Register function/method to be called within hook	* This function is normally called by the modification/application to attach/register the functions.	*	* @param mixed $definition Declaring function (with __FUNCTION__) or class with array(__CLASS__, __FUNCTION__)	* @param mixed $hook The replacement function/method to be called. Passing function name or array with object/class definition	* @param string $mode Specify the priority/chain mode. 'normal' -> hook gets appended to the chain. 'standalone' -> only the specified hook gets called - later hooks are not able to overwrite this (E_NOTICE is triggered then). 'first' -> hook is called as the first one within the chain. 'last' -> hook is called as the last one within the chain.	*/	function register($definition, $hook, $mode = 'normal')	{		$class = (!is_array($definition)) ? '__global' : $definition[0];		$function = (!is_array($definition)) ? $definition : $definition[1];		// Method able to be hooked?		if (isset($this->hooks[$class][$function]))		{			switch ($mode)			{				case 'standalone':					if (!isset($this->hooks[$class][$function]['standalone']))					{						$this->hooks[$class][$function] = array('standalone' => $hook);					}					else					{						trigger_error('Hook not able to be called standalone, previous hook already standalone.', E_NOTICE);					}				break;				case 'first':				case 'last':					$this->hooks[$class][$function][$mode][] = $hook;				break;				case 'normal':				default:					$this->hooks[$class][$function]['normal'][] = $hook;				break;			}		}	}	/**	* Calling all functions/methods attached to a specified hook.	* Called by the function allowing hooks...	*	* @param mixed $definition Declaring function (with __FUNCTION__) or class with array(__CLASS__, __FUNCTION__)	* @return bool False if no hook got executed, true otherwise	*/	function call_hook($definition)	{		$class = (!is_array($definition)) ? '__global' : $definition[0];		$function = (!is_array($definition)) ? $definition : $definition[1];		if (!empty($this->hooks[$class][$function]))		{			// Developer tries to call a hooked function within the hooked function...			if ($this->current_hook !== NULL && $this->current_hook['class'] === $class && $this->current_hook['function'] === $function)			{				return false;			}			// Call the hook with the arguments attached and store result			$arguments = func_get_args();			$this->current_hook = array('class' => $class, 'function' => $function);			$arguments[0] = &$this;			// Call the hook chain...			if (isset($this->hooks[$class][$function]['standalone']))			{				$this->hook_result[$class][$function] = call_user_func_array($this->hooks[$class][$function]['standalone'], $arguments);			}			else			{				foreach (array('first', 'normal', 'last') as $mode)				{					if (!isset($this->hooks[$class][$function][$mode]))					{						continue;					}					foreach ($this->hooks[$class][$function][$mode] as $hook)					{						$this->hook_result[$class][$function] = call_user_func_array($hook, $arguments);					}				}			}			$this->current_hook = NULL;			return true;		}		$this->current_hook = NULL;		return false;	}	/**	* Get result from previously called functions/methods for the same hook	*	* @param mixed $definition Declaring function (with __FUNCTION__) or class with array(__CLASS__, __FUNCTION__)	* @return mixed False if nothing returned if there is no result, else array('result' => ... )	*/	function previous_hook_result($definition)	{		$class = (!is_array($definition)) ? '__global' : $definition[0];		$function = (!is_array($definition)) ? $definition : $definition[1];		if (!empty($this->hooks[$class][$function]) && isset($this->hook_result[$class][$function]))		{			return array('result' => $this->hook_result[$class][$function]);		}		return false;	}	/**	* Check if the called functions/methods returned something.	*	* @param mixed $definition Declaring function (with __FUNCTION__) or class with array(__CLASS__, __FUNCTION__)	* @return bool True if results are there, false if not	*/	function hook_return($definition)	{		$class = (!is_array($definition)) ? '__global' : $definition[0];		$function = (!is_array($definition)) ? $definition : $definition[1];		if (!empty($this->hooks[$class][$function]) && isset($this->hook_result[$class][$function]))		{			return true;		}		return false;	}	/**	* Give actual result from called functions/methods back.	*	* @param mixed $definition Declaring function (with __FUNCTION__) or class with array(__CLASS__, __FUNCTION__)	* @return mixed The result	*/	function hook_return_result($definition)	{		$class = (!is_array($definition)) ? '__global' : $definition[0];		$function = (!is_array($definition)) ? $definition : $definition[1];		if (!empty($this->hooks[$class][$function]) && isset($this->hook_result[$class][$function]))		{			$result = $this->hook_result[$class][$function];			unset($this->hook_result[$class][$function]);			return $result;		}		return;	}	/**	* Add new function to the allowed hooks.	*	* @param mixed $definition Declaring function (with __FUNCTION__) or class with array(__CLASS__, __FUNCTION__)	*/	function add_hook($definition)	{		if (!is_array($definition))		{			$definition = array('__global', $definition);		}		$this->hooks[$definition[0]][$definition[1]] = array();	}	/**	* Remove function from the allowed hooks.	*	* @param mixed $definition Declaring function (with __FUNCTION__) or class with array(__CLASS__, __FUNCTION__)	*/	function remove_hook($definition)	{		$class = (!is_array($definition)) ? '__global' : $definition[0];		$function = (!is_array($definition)) ? $definition : $definition[1];		if (isset($this->hooks[$class][$function]))		{			unset($this->hooks[$class][$function]);			if (isset($this->hook_result[$class][$function]))			{				unset($this->hook_result[$class][$function]);			}		}	}}?>
<?php/**** search_synonyms [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**/if (!defined('IN_PHPBB')){	exit;}$synonyms = array(	'abcense'			=> 'absence',	'abridgement'		=> 'abridgment',	'accomodate'		=> 'accommodate',	'acknowledgment'	=> 'acknowledgement',	'airplane'			=> 'aeroplane',	'allright'			=> 'alright ',	'andy'				=> 'andrew',	'anemia'			=> 'anaemia',	'anemic'			=> 'anaemic',	'anesthesia'		=> 'anaesthesia',	'apologize'			=> 'apologise',	'archean'			=> 'archaean',	'archeology'		=> 'archaeology',	'archeozoic'		=> 'archaeozoic',	'armor'				=> 'armour',	'artic'				=> 'arctic',	'attachment'		=> 'attachement',	'attendence'		=> 'attendance',	'barbecue'	=> 'barbeque',	'behavior'	=> 'behaviour',	'biassed'	=> 'biased',	'biol'		=> 'biology',	'buletin'	=> 'bulletin',	'calender'	=> 'calendar',	'canceled'	=> 'cancelled',	'car'		=> 'automobile',	'catalog'	=> 'catalogue',	'cenozoic'	=> 'caenozoic',	'center'	=> 'centre',	'check'		=> 'cheque',	'color'		=> 'colour',	'comission'	=> 'commission',	'comittee'	=> 'committee',	'commitee'	=> 'committee',	'conceed'	=> 'concede',	'creating'	=> 'createing',	'curiculum'	=> 'curriculum',	'defense'		=> 'defence',	'develope'		=> 'develop',	'discription'	=> 'description',	'dulness'		=> 'dullness',	'encyclopedia'	=> 'encyclopaedia',	'enroll'		=> 'enrol',	'esthetic'		=> 'aesthetic',	'etiology'		=> 'aetiology',	'exhorbitant'	=> 'exorbitant',	'exhuberant'	=> 'exuberant',	'existance'		=> 'existence',	'favorite'		=> 'favourite',	'fetus'			=> 'foetus',	'ficticious'	=> 'fictitious',	'flavor'		=> 'flavour',	'flourescent'	=> 'fluorescent',	'foriegn'		=> 'foreign',	'fourty'		=> 'forty',	'gage'			=> 'gauge',	'geneology'		=> 'genealogy',	'grammer'		=> 'grammar',	'gray'			=> 'grey',	'guerilla'		=> 'guerrilla',	'gynecology'	=> 'gynaecology',	'harbor'		=> 'harbour',	'heighth'		=> 'height',	'hemaglobin'	=> 'haemaglobin',	'hematin'		=> 'haematin',	'hematite'		=> 'haematite',	'hematology'	=> 'haematology',	'honor'			=> 'honour',	'innoculate'	=> 'inoculate',	'installment'	=> 'instalment',	'irrelevent'	=> 'irrelevant',	'irrevelant'	=> 'irrelevant',	'jeweler'	=> 'jeweller',	'judgment'	=> 'judgement',	'labeled'	=> 'labelled',	'labor'		=> 'labour',	'laborer'	=> 'labourer',	'laborers'	=> 'labourers',	'laboring'	=> 'labouring',	'licence'	=> 'license',	'liesure'	=> 'leisure',	'liquify'	=> 'liquefy',	'maintainance'	=> 'maintenance',	'maintenence'	=> 'maintenance',	'medieval'		=> 'mediaeval',	'meter'			=> 'metre',	'milage'		=> 'mileage',	'millipede'		=> 'millepede',	'miscelaneous'	=> 'miscellaneous',	'morgage'		=> 'mortgage',	'noticable'	=> 'noticeable',	'occurence'	=> 'occurrence',	'offense'	=> 'offence',	'ommision'	=> 'omission',	'ommission'	=> 'omission',	'optimize'	=> 'optimise',	'organize'	=> 'organise',	'pajamas'			=> 'pyjamas',	'paleography'		=> 'palaeography',	'paleolithic'		=> 'palaeolithic',	'paleontological'	=> 'palaeontological',	'paleontologist'	=> 'palaeontologist',	'paleontology'		=> 'palaeontology',	'paleozoic'			=> 'palaeozoic',	'pamplet'			=> 'pamphlet',	'paralell'			=> 'parallel',	'parl'				=> 'parliament',	'parlt'				=> 'parliament',	'pediatric'			=> 'paediatric',	'pediatrician'		=> 'paediatrician',	'pediatrics'		=> 'paediatrics',	'pedodontia'		=> 'paedodontia',	'pedodontics'		=> 'paedodontics',	'personel'			=> 'personnel',	'practise'			=> 'practice',	'program'			=> 'programme',	'psych'				=> 'psychology',	'questionaire'	=> 'questionnaire',	'rarify'		=> 'rarefy',	'reccomend'		=> 'recommend',	'recieve'		=> 'receive',	'resistence'	=> 'resistance',	'restaraunt'	=> 'restaurant',	'savior'			=> 'saviour',	'sep'				=> 'september',	'seperate'			=> 'separate',	'sept'				=> 'september',	'sieze'				=> 'seize',	'summarize'			=> 'summarise',	'summerize'			=> 'summarise',	'superceed'			=> 'supercede',	'superintendant'	=> 'superintendent',	'supersede'			=> 'supercede',	'suprise'			=> 'surprise',	'surprize'			=> 'surprise',	'synchronise'		=> 'synchronize',	'temperary'		=> 'temporary',	'theater'		=> 'theatre',	'threshhold'	=> 'threshold',	'transfered'	=> 'transferred',	'truely'		=> 'truly',	'truley'		=> 'truly',	'useable'	=> 'usable',	'valor'	=> 'valour',	'vigor'	=> 'vigour',	'vol'	=> 'volume',	'whack'		=> 'wack',	'withold'	=> 'withhold',	'yeild'	=> 'yield',);?>
<?php/**** @package install* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//**#@+* @ignore*/define('IN_PHPBB', true);define('IN_INSTALL', true);/**#@-*/$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);// @todo Review this test and see if we can find out what it is which prevents PHP 4.2.x from even displaying the page with requirements on itif (version_compare(PHP_VERSION, '4.3.3') < 0){	die('You are running an unsupported PHP version. Please upgrade to PHP 4.3.3 or higher before trying to install phpBB 3.0');}function phpbb_require_updated($path, $optional = false){	global $phpbb_root_path;	$new_path = $phpbb_root_path . 'install/update/new/' . $path;	$old_path = $phpbb_root_path . $path;	if (file_exists($new_path))	{		require($new_path);	}	else if (!$optional || file_exists($old_path))	{		require($old_path);	}}phpbb_require_updated('includes/startup.' . $phpEx);// Try to override some limits - maybe it helps some...@set_time_limit(0);$mem_limit = @ini_get('memory_limit');if (!empty($mem_limit)){	$unit = strtolower(substr($mem_limit, -1, 1));	$mem_limit = (int) $mem_limit;	if ($unit == 'k')	{		$mem_limit = floor($mem_limit / 1024);	}	else if ($unit == 'g')	{		$mem_limit *= 1024;	}	else if (is_numeric($unit))	{		$mem_limit = floor((int) ($mem_limit . $unit) / 1048576);	}	$mem_limit = max(128, $mem_limit) . 'M';}else{	$mem_limit = '128M';}@ini_set('memory_limit', $mem_limit);// Include essential scriptsrequire($phpbb_root_path . 'includes/functions.' . $phpEx);phpbb_require_updated('includes/functions_content.' . $phpEx, true);include($phpbb_root_path . 'includes/auth.' . $phpEx);include($phpbb_root_path . 'includes/session.' . $phpEx);include($phpbb_root_path . 'includes/template.' . $phpEx);include($phpbb_root_path . 'includes/acm/acm_file.' . $phpEx);include($phpbb_root_path . 'includes/cache.' . $phpEx);include($phpbb_root_path . 'includes/functions_admin.' . $phpEx);include($phpbb_root_path . 'includes/utf/utf_tools.' . $phpEx);require($phpbb_root_path . 'includes/functions_install.' . $phpEx);// Try and load an appropriate language if required$language = basename(request_var('language', ''));if (!empty($_SERVER['HTTP_ACCEPT_LANGUAGE']) && !$language){	$accept_lang_ary = explode(',', strtolower($_SERVER['HTTP_ACCEPT_LANGUAGE']));	foreach ($accept_lang_ary as $accept_lang)	{		// Set correct format ... guess full xx_yy form		$accept_lang = substr($accept_lang, 0, 2) . '_' . substr($accept_lang, 3, 2);		if (file_exists($phpbb_root_path . 'language/' . $accept_lang) && is_dir($phpbb_root_path . 'language/' . $accept_lang))		{			$language = $accept_lang;			break;		}		else		{			// No match on xx_yy so try xx			$accept_lang = substr($accept_lang, 0, 2);			if (file_exists($phpbb_root_path . 'language/' . $accept_lang) && is_dir($phpbb_root_path . 'language/' . $accept_lang))			{				$language = $accept_lang;				break;			}		}	}}// No appropriate language found ... so let's use the first one in the language// dir, this may or may not be Englishif (!$language){	$dir = @opendir($phpbb_root_path . 'language');	if (!$dir)	{		die('Unable to access the language directory');		exit;	}	while (($file = readdir($dir)) !== false)	{		$path = $phpbb_root_path . 'language/' . $file;		if (!is_file($path) && !is_link($path) && file_exists($path . '/iso.txt'))		{			$language = $file;			break;		}	}	closedir($dir);}if (!file_exists($phpbb_root_path . 'language/' . $language) || !is_dir($phpbb_root_path . 'language/' . $language)){	die('No language found!');}// And finally, load the relevant language filesinclude($phpbb_root_path . 'language/' . $language . '/common.' . $phpEx);include($phpbb_root_path . 'language/' . $language . '/acp/common.' . $phpEx);include($phpbb_root_path . 'language/' . $language . '/acp/board.' . $phpEx);include($phpbb_root_path . 'language/' . $language . '/install.' . $phpEx);include($phpbb_root_path . 'language/' . $language . '/posting.' . $phpEx);// usually we would need every single constant here - and it would be consistent. For 3.0.x, use a dirty hack... :(// Define needed constantsdefine('CHMOD_ALL', 7);define('CHMOD_READ', 4);define('CHMOD_WRITE', 2);define('CHMOD_EXECUTE', 1);$mode = request_var('mode', 'overview');$sub = request_var('sub', '');// Set PHP error handler to oursset_error_handler(defined('PHPBB_MSG_HANDLER') ? PHPBB_MSG_HANDLER : 'msg_handler');$user = new user();$auth = new auth();$cache = new cache();$template = new template();// Add own hook handler, if present. :oif (file_exists($phpbb_root_path . 'includes/hooks/index.' . $phpEx)){	require($phpbb_root_path . 'includes/hooks/index.' . $phpEx);	$phpbb_hook = new phpbb_hook(array('exit_handler', 'phpbb_user_session_handler', 'append_sid', array('template', 'display')));	foreach ($cache->obtain_hooks() as $hook)	{		@include($phpbb_root_path . 'includes/hooks/' . $hook . '.' . $phpEx);	}}else{	$phpbb_hook = false;}// Set some standard variables we want to force$config = array(	'load_tplcompile'	=> '1');$template->set_custom_template('../adm/style', 'admin');$template->assign_var('T_TEMPLATE_PATH', '../adm/style');// the acp template is never stored in the database$user->theme['template_storedb'] = false;$install = new module();$install->create('install', "index.$phpEx", $mode, $sub);$install->load();// Generate the page$install->page_header();$install->generate_navigation();$template->set_filenames(array(	'body' => $install->get_tpl_name()));$install->page_footer();/*** @package install*/class module{	var $id = 0;	var $type = 'install';	var $module_ary = array();	var $filename;	var $module_url = '';	var $tpl_name = '';	var $mode;	var $sub;	/**	* Private methods, should not be overwritten	*/	function create($module_type, $module_url, $selected_mod = false, $selected_submod = false)	{		global $db, $config, $phpEx, $phpbb_root_path;		$module = array();		// Grab module information using Bart's "neat-o-module" system (tm)		$dir = @opendir('.');		if (!$dir)		{			$this->error('Unable to access the installation directory', __LINE__, __FILE__);		}		$setmodules = 1;		while (($file = readdir($dir)) !== false)		{			if (preg_match('#^install_(.*?)\.' . $phpEx . '$#', $file))			{				include($file);			}		}		closedir($dir);		unset($setmodules);		if (!sizeof($module))		{			$this->error('No installation modules found', __LINE__, __FILE__);		}		// Order to use and count further if modules get assigned to the same position or not having an order		$max_module_order = 1000;		foreach ($module as $row)		{			// Module order not specified or module already assigned at this position?			if (!isset($row['module_order']) || isset($this->module_ary[$row['module_order']]))			{				$row['module_order'] = $max_module_order;				$max_module_order++;			}			$this->module_ary[$row['module_order']]['name'] = $row['module_title'];			$this->module_ary[$row['module_order']]['filename'] = $row['module_filename'];			$this->module_ary[$row['module_order']]['subs'] = $row['module_subs'];			$this->module_ary[$row['module_order']]['stages'] = $row['module_stages'];			if (strtolower($selected_mod) == strtolower($row['module_title']))			{				$this->id = (int) $row['module_order'];				$this->filename = (string) $row['module_filename'];				$this->module_url = (string) $module_url;				$this->mode = (string) $selected_mod;				// Check that the sub-mode specified is valid or set a default if not				if (is_array($row['module_subs']))				{					$this->sub = strtolower((in_array(strtoupper($selected_submod), $row['module_subs'])) ? $selected_submod : $row['module_subs'][0]);				}				else if (is_array($row['module_stages']))				{					$this->sub = strtolower((in_array(strtoupper($selected_submod), $row['module_stages'])) ? $selected_submod : $row['module_stages'][0]);				}				else				{					$this->sub = '';				}			}		} // END foreach	} // END create	/**	* Load and run the relevant module if applicable	*/	function load($mode = false, $run = true)	{		global $phpbb_root_path, $phpEx;		if ($run)		{			if (!empty($mode))			{				$this->mode = $mode;			}			$module = $this->filename;			if (!class_exists($module))			{				$this->error('Module "' . htmlspecialchars($module) . '" not accessible.', __LINE__, __FILE__);			}			$this->module = new $module($this);			if (method_exists($this->module, 'main'))			{				$this->module->main($this->mode, $this->sub);			}		}	}	/**	* Output the standard page header	*/	function page_header()	{		if (defined('HEADER_INC'))		{			return;		}		define('HEADER_INC', true);		global $template, $lang, $stage, $phpbb_root_path;		$template->assign_vars(array(			'L_CHANGE'				=> $lang['CHANGE'],			'L_INSTALL_PANEL'		=> $lang['INSTALL_PANEL'],			'L_SELECT_LANG'			=> $lang['SELECT_LANG'],			'L_SKIP'				=> $lang['SKIP'],			'PAGE_TITLE'			=> $this->get_page_title(),			'T_IMAGE_PATH'			=> $phpbb_root_path . 'adm/images/',			'S_CONTENT_DIRECTION' 	=> $lang['DIRECTION'],			'S_CONTENT_FLOW_BEGIN'	=> ($lang['DIRECTION'] == 'ltr') ? 'left' : 'right',			'S_CONTENT_FLOW_END'	=> ($lang['DIRECTION'] == 'ltr') ? 'right' : 'left',			'S_CONTENT_ENCODING' 	=> 'UTF-8',			'S_USER_LANG'			=> $lang['USER_LANG'],			)		);		header('Content-type: text/html; charset=UTF-8');		header('Cache-Control: private, no-cache="set-cookie"');		header('Expires: 0');		header('Pragma: no-cache');		return;	}	/**	* Output the standard page footer	*/	function page_footer()	{		global $db, $template;		$template->display('body');		// Close our DB connection.		if (!empty($db) && is_object($db))		{			$db->sql_close();		}		if (function_exists('exit_handler'))		{			exit_handler();		}	}	/**	* Returns desired template name	*/	function get_tpl_name()	{		return $this->module->tpl_name . '.html';	}	/**	* Returns the desired page title	*/	function get_page_title()	{		global $lang;		if (!isset($this->module->page_title))		{			return '';		}		return (isset($lang[$this->module->page_title])) ? $lang[$this->module->page_title] : $this->module->page_title;	}	/**	* Generate an HTTP/1.1 header to redirect the user to another page	* This is used during the installation when we do not have a database available to call the normal redirect function	* @param string $page The page to redirect to relative to the installer root path	*/	function redirect($page)	{		// HTTP_HOST is having the correct browser url in most cases...		$server_name = (!empty($_SERVER['HTTP_HOST'])) ? strtolower($_SERVER['HTTP_HOST']) : ((!empty($_SERVER['SERVER_NAME'])) ? $_SERVER['SERVER_NAME'] : getenv('SERVER_NAME'));		$server_port = (!empty($_SERVER['SERVER_PORT'])) ? (int) $_SERVER['SERVER_PORT'] : (int) getenv('SERVER_PORT');		$secure = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? 1 : 0;		$script_name = (!empty($_SERVER['PHP_SELF'])) ? $_SERVER['PHP_SELF'] : getenv('PHP_SELF');		if (!$script_name)		{			$script_name = (!empty($_SERVER['REQUEST_URI'])) ? $_SERVER['REQUEST_URI'] : getenv('REQUEST_URI');		}		// Replace backslashes and doubled slashes (could happen on some proxy setups)		$script_name = str_replace(array('\\', '//'), '/', $script_name);		$script_path = trim(dirname($script_name));		$url = (($secure) ? 'https://' : 'http://') . $server_name;		if ($server_port && (($secure && $server_port <> 443) || (!$secure && $server_port <> 80)))		{			// HTTP HOST can carry a port number...			if (strpos($server_name, ':') === false)			{				$url .= ':' . $server_port;			}		}		$url .= $script_path . '/' . $page;		header('Location: ' . $url);		exit;	}	/**	* Generate the navigation tabs	*/	function generate_navigation()	{		global $lang, $template, $phpEx, $language;		if (is_array($this->module_ary))		{			@ksort($this->module_ary);			foreach ($this->module_ary as $cat_ary)			{				$cat = $cat_ary['name'];				$l_cat = (!empty($lang['CAT_' . $cat])) ? $lang['CAT_' . $cat] : preg_replace('#_#', ' ', $cat);				$cat = strtolower($cat);				$url = $this->module_url . "?mode=$cat&amp;language=$language";				if ($this->mode == $cat)				{					$template->assign_block_vars('t_block1', array(						'L_TITLE'		=> $l_cat,						'S_SELECTED'	=> true,						'U_TITLE'		=> $url,					));					if (is_array($this->module_ary[$this->id]['subs']))					{						$subs = $this->module_ary[$this->id]['subs'];						foreach ($subs as $option)						{							$l_option = (!empty($lang['SUB_' . $option])) ? $lang['SUB_' . $option] : preg_replace('#_#', ' ', $option);							$option = strtolower($option);							$url = $this->module_url . '?mode=' . $this->mode . "&amp;sub=$option&amp;language=$language";							$template->assign_block_vars('l_block1', array(								'L_TITLE'		=> $l_option,								'S_SELECTED'	=> ($this->sub == $option),								'U_TITLE'		=> $url,							));						}					}					if (is_array($this->module_ary[$this->id]['stages']))					{						$subs = $this->module_ary[$this->id]['stages'];						$matched = false;						foreach ($subs as $option)						{							$l_option = (!empty($lang['STAGE_' . $option])) ? $lang['STAGE_' . $option] : preg_replace('#_#', ' ', $option);							$option = strtolower($option);							$matched = ($this->sub == $option) ? true : $matched;							$template->assign_block_vars('l_block2', array(								'L_TITLE'		=> $l_option,								'S_SELECTED'	=> ($this->sub == $option),								'S_COMPLETE'	=> !$matched,							));						}					}				}				else				{					$template->assign_block_vars('t_block1', array(						'L_TITLE'		=> $l_cat,						'S_SELECTED'	=> false,						'U_TITLE'		=> $url,					));				}			}		}	}	/**	* Output an error message	* If skip is true, return and continue execution, else exit	*/	function error($error, $line, $file, $skip = false)	{		global $lang, $db, $template;		if ($skip)		{			$template->assign_block_vars('checks', array(				'S_LEGEND'	=> true,				'LEGEND'	=> $lang['INST_ERR'],			));			$template->assign_block_vars('checks', array(				'TITLE'		=> basename($file) . ' [ ' . $line . ' ]',				'RESULT'	=> '<b style="color:red">' . $error . '</b>',			));			return;		}		echo '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">';		echo '<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr">';		echo '<head>';		echo '<meta http-equiv="content-type" content="text/html; charset=utf-8" />';		echo '<title>' . $lang['INST_ERR_FATAL'] . '</title>';		echo '<link href="../adm/style/admin.css" rel="stylesheet" type="text/css" media="screen" />';		echo '</head>';		echo '<body id="errorpage">';		echo '<div id="wrap">';		echo '	<div id="page-header">';		echo '	</div>';		echo '	<div id="page-body">';		echo '		<div id="acp">';		echo '		<div class="panel">';		echo '			<span class="corners-top"><span></span></span>';		echo '			<div id="content">';		echo '				<h1>' . $lang['INST_ERR_FATAL'] . '</h1>';		echo '		<p>' . $lang['INST_ERR_FATAL'] . "</p>\n";		echo '		<p>' . basename($file) . ' [ ' . $line . " ]</p>\n";		echo '		<p><b>' . $error . "</b></p>\n";		echo '			</div>';		echo '			<span class="corners-bottom"><span></span></span>';		echo '		</div>';		echo '		</div>';		echo '	</div>';		echo '	<div id="page-footer">';		echo '		Powered by <a href="http://www.phpbb.com/">phpBB</a>&reg; Forum Software &copy; phpBB Group';		echo '	</div>';		echo '</div>';		echo '</body>';		echo '</html>';		if (!empty($db) && is_object($db))		{			$db->sql_close();		}		exit_handler();	}	/**	* Output an error message for a database related problem	* If skip is true, return and continue execution, else exit	*/	function db_error($error, $sql, $line, $file, $skip = false)	{		global $lang, $db, $template;		if ($skip)		{			$template->assign_block_vars('checks', array(				'S_LEGEND'	=> true,				'LEGEND'	=> $lang['INST_ERR_FATAL'],			));			$template->assign_block_vars('checks', array(				'TITLE'		=> basename($file) . ' [ ' . $line . ' ]',				'RESULT'	=> '<b style="color:red">' . $error . '</b><br />&#187; SQL:' . $sql,			));			return;		}		$template->set_filenames(array(			'body' => 'install_error.html')		);		$this->page_header();		$this->generate_navigation();		$template->assign_vars(array(			'MESSAGE_TITLE'		=> $lang['INST_ERR_FATAL_DB'],			'MESSAGE_TEXT'		=> '<p>' . basename($file) . ' [ ' . $line . ' ]</p><p>SQL : ' . $sql . '</p><p><b>' . $error . '</b></p>',		));		// Rollback if in transaction		if ($db->transaction)		{			$db->sql_transaction('rollback');		}		$this->page_footer();	}	/**	* Generate the relevant HTML for an input field and the associated label and explanatory text	*/	function input_field($name, $type, $value='', $options='')	{		global $lang;		$tpl_type = explode(':', $type);		$tpl = '';		switch ($tpl_type[0])		{			case 'text':			case 'password':				$size = (int) $tpl_type[1];				$maxlength = (int) $tpl_type[2];				$tpl = '<input id="' . $name . '" type="' . $tpl_type[0] . '"' . (($size) ? ' size="' . $size . '"' : '') . ' maxlength="' . (($maxlength) ? $maxlength : 255) . '" name="' . $name . '" value="' . $value . '" />';			break;			case 'textarea':				$rows = (int) $tpl_type[1];				$cols = (int) $tpl_type[2];				$tpl = '<textarea id="' . $name . '" name="' . $name . '" rows="' . $rows . '" cols="' . $cols . '">' . $value . '</textarea>';			break;			case 'radio':				$key_yes	= ($value) ? ' checked="checked" id="' . $name . '"' : '';				$key_no		= (!$value) ? ' checked="checked" id="' . $name . '"' : '';				$tpl_type_cond = explode('_', $tpl_type[1]);				$type_no = ($tpl_type_cond[0] == 'disabled' || $tpl_type_cond[0] == 'enabled') ? false : true;				$tpl_no = '<label><input type="radio" name="' . $name . '" value="0"' . $key_no . ' class="radio" /> ' . (($type_no) ? $lang['NO'] : $lang['DISABLED']) . '</label>';				$tpl_yes = '<label><input type="radio" name="' . $name . '" value="1"' . $key_yes . ' class="radio" /> ' . (($type_no) ? $lang['YES'] : $lang['ENABLED']) . '</label>';				$tpl = ($tpl_type_cond[0] == 'yes' || $tpl_type_cond[0] == 'enabled') ? $tpl_yes . '&nbsp;&nbsp;' . $tpl_no : $tpl_no . '&nbsp;&nbsp;' . $tpl_yes;			break;			case 'select':				eval('$s_options = ' . str_replace('{VALUE}', $value, $options) . ';');				$tpl = '<select id="' . $name . '" name="' . $name . '">' . $s_options . '</select>';			break;			case 'custom':				eval('$tpl = ' . str_replace('{VALUE}', $value, $options) . ';');			break;			default:			break;		}		return $tpl;	}	/**	* Generate the drop down of available language packs	*/	function inst_language_select($default = '')	{		global $phpbb_root_path, $phpEx;		$dir = @opendir($phpbb_root_path . 'language');		if (!$dir)		{			$this->error('Unable to access the language directory', __LINE__, __FILE__);		}		while ($file = readdir($dir))		{			$path = $phpbb_root_path . 'language/' . $file;			if ($file == '.' || $file == '..' || is_link($path) || is_file($path) || $file == 'CVS')			{				continue;			}			if (file_exists($path . '/iso.txt'))			{				list($displayname, $localname) = @file($path . '/iso.txt');				$lang[$localname] = $file;			}		}		closedir($dir);		@asort($lang);		@reset($lang);		$user_select = '';		foreach ($lang as $displayname => $filename)		{			$selected = (strtolower($default) == strtolower($filename)) ? ' selected="selected"' : '';			$user_select .= '<option value="' . $filename . '"' . $selected . '>' . ucwords($displayname) . '</option>';		}		return $user_select;	}}?>
<?php return array(''=>'');
<?php/*** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Private Message Class** $_REQUEST['folder'] display folder with the id used* $_REQUEST['folder'] inbox|outbox|sentbox display folder with the associated name**	Display Messages (default to inbox) - mode=view*	Display single message - mode=view&p=[msg_id] or &p=[msg_id] (short linkage)**	if the folder id with (&f=[folder_id]) is used when displaying messages, one query will be saved. If it is not used, phpBB needs to grab*	the folder id first in order to display the input boxes and folder names and such things. ;) phpBB always checks this against the database to make*	sure the user is able to view the message.**	Composing Messages (mode=compose):*		To specific user (u=[user_id])*		To specific group (g=[group_id])*		Quoting a post (action=quotepost&p=[post_id])*		Quoting a PM (action=quote&p=[msg_id])*		Forwarding a PM (action=forward&p=[msg_id])** @package ucp*/class ucp_pm{	var $u_action;	function main($id, $mode)	{		global $user, $template, $phpbb_root_path, $auth, $phpEx, $db, $config;		if (!$user->data['is_registered'])		{			trigger_error('NO_MESSAGE');		}		// Is PM disabled?		if (!$config['allow_privmsg'])		{			trigger_error('PM_DISABLED');		}		$user->add_lang('posting');		$template->assign_var('S_PRIVMSGS', true);		// Folder directly specified?		$folder_specified = request_var('folder', '');		if (!in_array($folder_specified, array('inbox', 'outbox', 'sentbox')))		{			$folder_specified = (int) $folder_specified;		}		else		{			$folder_specified = ($folder_specified == 'inbox') ? PRIVMSGS_INBOX : (($folder_specified == 'outbox') ? PRIVMSGS_OUTBOX : PRIVMSGS_SENTBOX);		}		if (!$folder_specified)		{			$mode = (!$mode) ? request_var('mode', 'view') : $mode;		}		else		{			$mode = 'view';		}		include($phpbb_root_path . 'includes/functions_privmsgs.' . $phpEx);		switch ($mode)		{			// New private messages popup			case 'popup':				$l_new_message = '';				if ($user->data['is_registered'])				{					if ($user->data['user_new_privmsg'])					{						$l_new_message = ($user->data['user_new_privmsg'] == 1) ? $user->lang['YOU_NEW_PM'] : $user->lang['YOU_NEW_PMS'];					}					else					{						$l_new_message = $user->lang['YOU_NO_NEW_PM'];					}				}				$template->assign_vars(array(					'MESSAGE'			=> $l_new_message,					'S_NOT_LOGGED_IN'	=> ($user->data['user_id'] == ANONYMOUS) ? true : false,					'CLICK_TO_VIEW'		=> sprintf($user->lang['CLICK_VIEW_PRIVMSG'], '<a href="' . append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=inbox') . '" onclick="jump_to_inbox(this.href); return false;">', '</a>'),					'U_INBOX'			=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=inbox'),					'UA_INBOX'			=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&folder=inbox', false))				);				$tpl_file = 'ucp_pm_popup';			break;			// Compose message			case 'compose':				$action = request_var('action', 'post');				$user_folders = get_folder($user->data['user_id']);				if (!$auth->acl_get('u_sendpm'))				{					// trigger_error('NO_AUTH_SEND_MESSAGE');					$template->assign_vars(array(						'S_NO_AUTH_SEND_MESSAGE'	=> true,						'S_COMPOSE_PM_VIEW'			=> true,					));					$tpl_file = 'ucp_pm_viewfolder';					break;				}				include($phpbb_root_path . 'includes/ucp/ucp_pm_compose.' . $phpEx);				compose_pm($id, $mode, $action, $user_folders);				$tpl_file = 'posting_body';			break;			case 'options':				set_user_message_limit();				get_folder($user->data['user_id']);				include($phpbb_root_path . 'includes/ucp/ucp_pm_options.' . $phpEx);				message_options($id, $mode, $global_privmsgs_rules, $global_rule_conditions);				$tpl_file = 'ucp_pm_options';			break;			case 'drafts':				get_folder($user->data['user_id']);				$this->p_name = 'pm';				// Call another module... please do not try this at home... Hoochie Coochie Man				include($phpbb_root_path . 'includes/ucp/ucp_main.' . $phpEx);				$module = new ucp_main($this);				$module->u_action = $this->u_action;				$module->main($id, $mode);				$this->tpl_name = $module->tpl_name;				$this->page_title = 'UCP_PM_DRAFTS';				unset($module);				return;			break;			case 'view':				set_user_message_limit();				if ($folder_specified)				{					$folder_id = $folder_specified;					$action = 'view_folder';				}				else				{					$folder_id = request_var('f', PRIVMSGS_NO_BOX);					$action = request_var('action', 'view_folder');				}				$msg_id = request_var('p', 0);				$view	= request_var('view', '');				// View message if specified				if ($msg_id)				{					$action = 'view_message';				}				if (!$auth->acl_get('u_readpm'))				{					trigger_error('NO_AUTH_READ_MESSAGE');				}				// Do not allow hold messages to be seen				if ($folder_id == PRIVMSGS_HOLD_BOX)				{					trigger_error('NO_AUTH_READ_HOLD_MESSAGE');				}				// First Handle Mark actions and moving messages				$submit_mark	= (isset($_POST['submit_mark'])) ? true : false;				$move_pm		= (isset($_POST['move_pm'])) ? true : false;				$mark_option	= request_var('mark_option', '');				$dest_folder	= request_var('dest_folder', PRIVMSGS_NO_BOX);				// Is moving PM triggered through mark options?				if (!in_array($mark_option, array('mark_important', 'delete_marked')) && $submit_mark)				{					$move_pm = true;					$dest_folder = (int) $mark_option;					$submit_mark = false;				}				// Move PM				if ($move_pm)				{					$move_msg_ids	= (isset($_POST['marked_msg_id'])) ? request_var('marked_msg_id', array(0)) : array();					$cur_folder_id	= request_var('cur_folder_id', PRIVMSGS_NO_BOX);					if (move_pm($user->data['user_id'], $user->data['message_limit'], $move_msg_ids, $dest_folder, $cur_folder_id))					{						// Return to folder view if single message moved						if ($action == 'view_message')						{							$msg_id		= 0;							$folder_id	= request_var('cur_folder_id', PRIVMSGS_NO_BOX);							$action		= 'view_folder';						}					}				}				// Message Mark Options				if ($submit_mark)				{					handle_mark_actions($user->data['user_id'], $mark_option);				}				// If new messages arrived, place them into the appropriate folder				$num_not_moved = $num_removed = 0;				$release = request_var('release', 0);				if ($user->data['user_new_privmsg'] && ($action == 'view_folder' || $action == 'view_message'))				{					$return = place_pm_into_folder($global_privmsgs_rules, $release);					$num_not_moved = $return['not_moved'];					$num_removed = $return['removed'];				}				if (!$msg_id && $folder_id == PRIVMSGS_NO_BOX)				{					$folder_id = PRIVMSGS_INBOX;				}				else if ($msg_id && $folder_id == PRIVMSGS_NO_BOX)				{					$sql = 'SELECT folder_id						FROM ' . PRIVMSGS_TO_TABLE . "						WHERE msg_id = $msg_id							AND folder_id <> " . PRIVMSGS_NO_BOX . '							AND user_id = ' . $user->data['user_id'];					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if (!$row)					{						trigger_error('NO_MESSAGE');					}					$folder_id = (int) $row['folder_id'];				}				$message_row = array();				if ($action == 'view_message' && $msg_id)				{					// Get Message user want to see					if ($view == 'next' || $view == 'previous')					{						$sql_condition = ($view == 'next') ? '>' : '<';						$sql_ordering = ($view == 'next') ? 'ASC' : 'DESC';						$sql = 'SELECT t.msg_id							FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p, ' . PRIVMSGS_TABLE . " p2							WHERE p2.msg_id = $msg_id								AND t.folder_id = $folder_id								AND t.user_id = " . $user->data['user_id'] . "								AND t.msg_id = p.msg_id								AND p.message_time $sql_condition p2.message_time							ORDER BY p.message_time $sql_ordering";						$result = $db->sql_query_limit($sql, 1);						$row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$row)						{							$message = ($view == 'next') ? 'NO_NEWER_PM' : 'NO_OLDER_PM';							trigger_error($message);						}						else						{							$msg_id = $row['msg_id'];						}					}					$sql = 'SELECT t.*, p.*, u.*						FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p, ' . USERS_TABLE . ' u						WHERE t.user_id = ' . $user->data['user_id'] . "							AND p.author_id = u.user_id							AND t.folder_id = $folder_id							AND t.msg_id = p.msg_id							AND p.msg_id = $msg_id";					$result = $db->sql_query($sql);					$message_row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if (!$message_row)					{						trigger_error('NO_MESSAGE');					}					// Update unread status					update_unread_status($message_row['pm_unread'], $message_row['msg_id'], $user->data['user_id'], $folder_id);				}				$folder = get_folder($user->data['user_id'], $folder_id);				$s_folder_options = $s_to_folder_options = '';				foreach ($folder as $f_id => $folder_ary)				{					$option = '<option' . ((!in_array($f_id, array(PRIVMSGS_INBOX, PRIVMSGS_OUTBOX, PRIVMSGS_SENTBOX))) ? ' class="sep"' : '') . ' value="' . $f_id . '"' . (($f_id == $folder_id) ? ' selected="selected"' : '') . '>' . $folder_ary['folder_name'] . (($folder_ary['unread_messages']) ? ' [' . $folder_ary['unread_messages'] . '] ' : '') . '</option>';					$s_to_folder_options .= ($f_id != PRIVMSGS_OUTBOX && $f_id != PRIVMSGS_SENTBOX) ? $option : '';					$s_folder_options .= $option;				}				clean_sentbox($folder[PRIVMSGS_SENTBOX]['num_messages']);				// Header for message view - folder and so on				$folder_status = get_folder_status($folder_id, $folder);				$template->assign_vars(array(					'CUR_FOLDER_ID'			=> $folder_id,					'CUR_FOLDER_NAME'		=> $folder_status['folder_name'],					'NUM_NOT_MOVED'			=> $num_not_moved,					'NUM_REMOVED'			=> $num_removed,					'RELEASE_MESSAGE_INFO'	=> sprintf($user->lang['RELEASE_MESSAGES'], '<a href="' . $this->u_action . '&amp;folder=' . $folder_id . '&amp;release=1">', '</a>'),					'NOT_MOVED_MESSAGES'	=> ($num_not_moved == 1) ? $user->lang['NOT_MOVED_MESSAGE'] : sprintf($user->lang['NOT_MOVED_MESSAGES'], $num_not_moved),					'RULE_REMOVED_MESSAGES'	=> ($num_removed == 1) ? $user->lang['RULE_REMOVED_MESSAGE'] : sprintf($user->lang['RULE_REMOVED_MESSAGES'], $num_removed),					'S_FOLDER_OPTIONS'		=> $s_folder_options,					'S_TO_FOLDER_OPTIONS'	=> $s_to_folder_options,					'S_FOLDER_ACTION'		=> $this->u_action . '&amp;action=view_folder',					'S_PM_ACTION'			=> $this->u_action . '&amp;action=' . $action,					'U_INBOX'				=> $this->u_action . '&amp;folder=inbox',					'U_OUTBOX'				=> $this->u_action . '&amp;folder=outbox',					'U_SENTBOX'				=> $this->u_action . '&amp;folder=sentbox',					'U_CREATE_FOLDER'		=> $this->u_action . '&amp;mode=options',					'U_CURRENT_FOLDER'		=> $this->u_action . '&amp;folder=' . $folder_id,					'S_IN_INBOX'			=> ($folder_id == PRIVMSGS_INBOX) ? true : false,					'S_IN_OUTBOX'			=> ($folder_id == PRIVMSGS_OUTBOX) ? true : false,					'S_IN_SENTBOX'			=> ($folder_id == PRIVMSGS_SENTBOX) ? true : false,					'FOLDER_STATUS'				=> $folder_status['message'],					'FOLDER_MAX_MESSAGES'		=> $folder_status['max'],					'FOLDER_CUR_MESSAGES'		=> $folder_status['cur'],					'FOLDER_REMAINING_MESSAGES'	=> $folder_status['remaining'],					'FOLDER_PERCENT'			=> $folder_status['percent'])				);				if ($action == 'view_folder')				{					include($phpbb_root_path . 'includes/ucp/ucp_pm_viewfolder.' . $phpEx);					view_folder($id, $mode, $folder_id, $folder);					$tpl_file = 'ucp_pm_viewfolder';				}				else if ($action == 'view_message')				{					$template->assign_vars(array(						'S_VIEW_MESSAGE'	=> true,						'MSG_ID'			=> $msg_id)					);					if (!$msg_id)					{						trigger_error('NO_MESSAGE');					}					include($phpbb_root_path . 'includes/ucp/ucp_pm_viewmessage.' . $phpEx);					view_message($id, $mode, $folder_id, $msg_id, $folder, $message_row);					$tpl_file = ($view == 'print') ? 'ucp_pm_viewmessage_print' : 'ucp_pm_viewmessage';				}			break;			default:				trigger_error('NO_ACTION_MODE', E_USER_ERROR);			break;		}		$template->assign_vars(array(			'L_TITLE'			=> $user->lang['UCP_PM_' . strtoupper($mode)],			'S_UCP_ACTION'		=> $this->u_action . ((isset($action)) ? "&amp;action=$action" : ''))		);		// Set desired template		$this->tpl_name = $tpl_file;		$this->page_title = 'UCP_PM_' . strtoupper($mode);	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_ban{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $table_prefix;		include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		$bansubmit	= (isset($_POST['bansubmit'])) ? true : false;		$unbansubmit = (isset($_POST['unbansubmit'])) ? true : false;		$current_time = time();		$user->add_lang(array('acp/ban', 'acp/users'));		$this->tpl_name = 'acp_ban';		$form_key = 'acp_ban';		add_form_key($form_key);		if (($bansubmit || $unbansubmit) && !check_form_key($form_key))		{			trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action), E_USER_WARNING);		}		// Ban submitted?		if ($bansubmit)		{			// Grab the list of entries			$ban				= utf8_normalize_nfc(request_var('ban', '', true));			$ban_len			= request_var('banlength', 0);			$ban_len_other		= request_var('banlengthother', '');			$ban_exclude		= request_var('banexclude', 0);			$ban_reason			= utf8_normalize_nfc(request_var('banreason', '', true));			$ban_give_reason	= utf8_normalize_nfc(request_var('bangivereason', '', true));			if ($ban)			{				user_ban($mode, $ban, $ban_len, $ban_len_other, $ban_exclude, $ban_reason, $ban_give_reason);				trigger_error($user->lang['BAN_UPDATE_SUCCESSFUL'] . adm_back_link($this->u_action));			}		}		else if ($unbansubmit)		{			$ban = request_var('unban', array(''));			if ($ban)			{				user_unban($mode, $ban);				trigger_error($user->lang['BAN_UPDATE_SUCCESSFUL'] . adm_back_link($this->u_action));			}		}		// Define language vars		$this->page_title = $user->lang[strtoupper($mode) . '_BAN'];		$l_ban_explain = $user->lang[strtoupper($mode) . '_BAN_EXPLAIN'];		$l_ban_exclude_explain = $user->lang[strtoupper($mode) . '_BAN_EXCLUDE_EXPLAIN'];		$l_unban_title = $user->lang[strtoupper($mode) . '_UNBAN'];		$l_unban_explain = $user->lang[strtoupper($mode) . '_UNBAN_EXPLAIN'];		$l_no_ban_cell = $user->lang[strtoupper($mode) . '_NO_BANNED'];		switch ($mode)		{			case 'user':				$l_ban_cell = $user->lang['USERNAME'];			break;			case 'ip':				$l_ban_cell = $user->lang['IP_HOSTNAME'];			break;			case 'email':				$l_ban_cell = $user->lang['EMAIL_ADDRESS'];			break;		}		$this->display_ban_options($mode);		$template->assign_vars(array(			'L_TITLE'				=> $this->page_title,			'L_EXPLAIN'				=> $l_ban_explain,			'L_UNBAN_TITLE'			=> $l_unban_title,			'L_UNBAN_EXPLAIN'		=> $l_unban_explain,			'L_BAN_CELL'			=> $l_ban_cell,			'L_BAN_EXCLUDE_EXPLAIN'	=> $l_ban_exclude_explain,			'L_NO_BAN_CELL'			=> $l_no_ban_cell,			'S_USERNAME_BAN'	=> ($mode == 'user') ? true : false,						'U_ACTION'			=> $this->u_action,			'U_FIND_USERNAME'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=acp_ban&amp;field=ban'),		));	}	/**	* Display ban options	*/	function display_ban_options($mode)	{		global $user, $db, $template;		// Ban length options		$ban_end_text = array(0 => $user->lang['PERMANENT'], 30 => $user->lang['30_MINS'], 60 => $user->lang['1_HOUR'], 360 => $user->lang['6_HOURS'], 1440 => $user->lang['1_DAY'], 10080 => $user->lang['7_DAYS'], 20160 => $user->lang['2_WEEKS'], 40320 => $user->lang['1_MONTH'], -1 => $user->lang['UNTIL'] . ' -&gt; ');		$ban_end_options = '';		foreach ($ban_end_text as $length => $text)		{			$ban_end_options .= '<option value="' . $length . '">' . $text . '</option>';		}		switch ($mode)		{			case 'user':				$field = 'username';				$l_ban_cell = $user->lang['USERNAME'];				$sql = 'SELECT b.*, u.user_id, u.username, u.username_clean					FROM ' . BANLIST_TABLE . ' b, ' . USERS_TABLE . ' u					WHERE (b.ban_end >= ' . time() . '							OR b.ban_end = 0)						AND u.user_id = b.ban_userid					ORDER BY u.username_clean ASC';			break;			case 'ip':				$field = 'ban_ip';				$l_ban_cell = $user->lang['IP_HOSTNAME'];				$sql = 'SELECT *					FROM ' . BANLIST_TABLE . '					WHERE (ban_end >= ' . time() . "							OR ban_end = 0)						AND ban_ip <> ''					ORDER BY ban_ip";			break;			case 'email':				$field = 'ban_email';				$l_ban_cell = $user->lang['EMAIL_ADDRESS'];				$sql = 'SELECT *					FROM ' . BANLIST_TABLE . '					WHERE (ban_end >= ' . time() . "							OR ban_end = 0)						AND ban_email <> ''					ORDER BY ban_email";			break;		}		$result = $db->sql_query($sql);		$banned_options = $excluded_options = array();		$ban_length = $ban_reasons = $ban_give_reasons = array();		while ($row = $db->sql_fetchrow($result))		{			$option = '<option value="' . $row['ban_id'] . '">' . $row[$field] . '</option>';			if ($row['ban_exclude'])			{				$excluded_options[] = $option;			}			else			{				$banned_options[] = $option;			}			$time_length = ($row['ban_end']) ? ($row['ban_end'] - $row['ban_start']) / 60 : 0;			if ($time_length == 0)			{				// Banned permanently				$ban_length[$row['ban_id']] = $user->lang['PERMANENT'];			}			else if (isset($ban_end_text[$time_length]))			{				// Banned for a given duration				$ban_length[$row['ban_id']] = sprintf($user->lang['BANNED_UNTIL_DURATION'], $ban_end_text[$time_length], $user->format_date($row['ban_end'], false, true));			}			else			{				// Banned until given date				$ban_length[$row['ban_id']] = sprintf($user->lang['BANNED_UNTIL_DATE'], $user->format_date($row['ban_end'], false, true));			}			$ban_reasons[$row['ban_id']] = $row['ban_reason'];			$ban_give_reasons[$row['ban_id']] = $row['ban_give_reason'];		}		$db->sql_freeresult($result);		if (sizeof($ban_length))		{			foreach ($ban_length as $ban_id => $length)			{				$template->assign_block_vars('ban_length', array(					'BAN_ID'	=> (int) $ban_id,					'LENGTH'	=> $length,					'A_LENGTH'	=> addslashes($length),				));			}		}		if (sizeof($ban_reasons))		{			foreach ($ban_reasons as $ban_id => $reason)			{				$template->assign_block_vars('ban_reason', array(					'BAN_ID'	=> $ban_id,					'REASON'	=> $reason,					'A_REASON'	=> addslashes($reason),				));			}		}		if (sizeof($ban_give_reasons))		{			foreach ($ban_give_reasons as $ban_id => $reason)			{				$template->assign_block_vars('ban_give_reason', array(					'BAN_ID'	=> $ban_id,					'REASON'	=> $reason,					'A_REASON'	=> addslashes($reason),				));			}		}		$options = '';		if ($excluded_options)		{			$options .= '<optgroup label="' . $user->lang['OPTIONS_EXCLUDED'] . '">';			$options .= implode('', $excluded_options);			$options .= '</optgroup>';		}		if ($banned_options)		{			$options .= '<optgroup label="' . $user->lang['OPTIONS_BANNED'] . '">';			$options .= implode('', $banned_options);			$options .= '</optgroup>';		}		$template->assign_vars(array(			'S_BAN_END_OPTIONS'	=> $ban_end_options,			'S_BANNED_OPTIONS'	=> ($banned_options || $excluded_options) ? true : false,			'BANNED_OPTIONS'	=> $options,		));	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_ban_info{	function module()	{		return array(			'filename'	=> 'acp_ban',			'title'		=> 'ACP_BAN',			'version'	=> '1.0.0',			'modes'		=> array(				'email'		=> array('title' => 'ACP_BAN_EMAILS', 'auth' => 'acl_a_ban', 'cat' => array('ACP_USER_SECURITY')),				'ip'		=> array('title' => 'ACP_BAN_IPS', 'auth' => 'acl_a_ban', 'cat' => array('ACP_USER_SECURITY')),				'user'		=> array('title' => 'ACP_BAN_USERNAMES', 'auth' => 'acl_a_ban', 'cat' => array('ACP_USER_SECURITY')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_update_info{	function module()	{		return array(			'filename'	=> 'acp_update',			'title'		=> 'ACP_UPDATE',			'version'	=> '1.0.0',			'modes'		=> array(				'version_check'		=> array('title' => 'ACP_VERSION_CHECK', 'auth' => 'acl_a_board', 'cat' => array('ACP_AUTOMATION')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** MCP Forum View*/function mcp_forum_view($id, $mode, $action, $forum_info){	global $template, $db, $user, $auth, $cache, $module;	global $phpEx, $phpbb_root_path, $config;	$user->add_lang(array('viewtopic', 'viewforum'));	include_once($phpbb_root_path . 'includes/functions_display.' . $phpEx);	// merge_topic is the quickmod action, merge_topics is the mcp_forum action, and merge_select is the mcp_topic action	$merge_select = ($action == 'merge_select' || $action == 'merge_topic' || $action == 'merge_topics') ? true : false;	if ($merge_select)	{		// Fixes a "bug" that makes forum_view use the same ordering as topic_view		unset($_POST['sk'], $_POST['sd'], $_REQUEST['sk'], $_REQUEST['sd']);	}	$forum_id			= $forum_info['forum_id'];	$start				= request_var('start', 0);	$topic_id_list		= request_var('topic_id_list', array(0));	$post_id_list		= request_var('post_id_list', array(0));	$source_topic_ids	= array(request_var('t', 0));	$to_topic_id		= request_var('to_topic_id', 0);	$url_extra = '';	$url_extra .= ($forum_id) ? "&amp;f=$forum_id" : '';	$url_extra .= ($GLOBALS['topic_id']) ? '&amp;t=' . $GLOBALS['topic_id'] : '';	$url_extra .= ($GLOBALS['post_id']) ? '&amp;p=' . $GLOBALS['post_id'] : '';	$url_extra .= ($GLOBALS['user_id']) ? '&amp;u=' . $GLOBALS['user_id'] : '';	$url = append_sid("{$phpbb_root_path}mcp.$phpEx?$url_extra");	// Resync Topics	switch ($action)	{		case 'resync':			$topic_ids = request_var('topic_id_list', array(0));			mcp_resync_topics($topic_ids);		break;		case 'merge_topics':			$source_topic_ids = $topic_id_list;		case 'merge_topic':			if ($to_topic_id)			{				merge_topics($forum_id, $source_topic_ids, $to_topic_id);			}		break;	}	$selected_ids = '';	if (sizeof($post_id_list) && $action != 'merge_topics')	{		foreach ($post_id_list as $num => $post_id)		{			$selected_ids .= '&amp;post_id_list[' . $num . ']=' . $post_id;		}	}	else if (sizeof($topic_id_list) && $action == 'merge_topics')	{		foreach ($topic_id_list as $num => $topic_id)		{			$selected_ids .= '&amp;topic_id_list[' . $num . ']=' . $topic_id;		}	}	make_jumpbox($url . "&amp;i=$id&amp;action=$action&amp;mode=$mode" . (($merge_select) ? $selected_ids : ''), $forum_id, false, 'm_', true);	$topics_per_page = ($forum_info['forum_topics_per_page']) ? $forum_info['forum_topics_per_page'] : $config['topics_per_page'];	$sort_days = $total = 0;	$sort_key = $sort_dir = '';	$sort_by_sql = $sort_order_sql = array();	mcp_sorting('viewforum', $sort_days, $sort_key, $sort_dir, $sort_by_sql, $sort_order_sql, $total, $forum_id);	$forum_topics = ($total == -1) ? $forum_info['forum_topics'] : $total;	$limit_time_sql = ($sort_days) ? 'AND t.topic_last_post_time >= ' . (time() - ($sort_days * 86400)) : '';	$template->assign_vars(array(		'ACTION'				=> $action,		'FORUM_NAME'			=> $forum_info['forum_name'],		'FORUM_DESCRIPTION'		=> generate_text_for_display($forum_info['forum_desc'], $forum_info['forum_desc_uid'], $forum_info['forum_desc_bitfield'], $forum_info['forum_desc_options']),		'REPORTED_IMG'			=> $user->img('icon_topic_reported', 'TOPIC_REPORTED'),		'UNAPPROVED_IMG'		=> $user->img('icon_topic_unapproved', 'TOPIC_UNAPPROVED'),		'LAST_POST_IMG'			=> $user->img('icon_topic_latest', 'VIEW_LATEST_POST'),		'NEWEST_POST_IMG'		=> $user->img('icon_topic_newest', 'VIEW_NEWEST_POST'),		'S_CAN_REPORT'			=> $auth->acl_get('m_report', $forum_id),		'S_CAN_DELETE'			=> $auth->acl_get('m_delete', $forum_id),		'S_CAN_MERGE'			=> $auth->acl_get('m_merge', $forum_id),		'S_CAN_MOVE'			=> $auth->acl_get('m_move', $forum_id),		'S_CAN_FORK'			=> $auth->acl_get('m_', $forum_id),		'S_CAN_LOCK'			=> $auth->acl_get('m_lock', $forum_id),		'S_CAN_SYNC'			=> $auth->acl_get('m_', $forum_id),		'S_CAN_APPROVE'			=> $auth->acl_get('m_approve', $forum_id),		'S_MERGE_SELECT'		=> ($merge_select) ? true : false,		'S_CAN_MAKE_NORMAL'		=> $auth->acl_gets('f_sticky', 'f_announce', $forum_id),		'S_CAN_MAKE_STICKY'		=> $auth->acl_get('f_sticky', $forum_id),		'S_CAN_MAKE_ANNOUNCE'	=> $auth->acl_get('f_announce', $forum_id),		'U_VIEW_FORUM'			=> append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id),		'U_VIEW_FORUM_LOGS'		=> ($auth->acl_gets('a_', 'm_', $forum_id) && $module->loaded('logs')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=logs&amp;mode=forum_logs&amp;f=' . $forum_id) : '',		'S_MCP_ACTION'			=> $url . "&amp;i=$id&amp;forum_action=$action&amp;mode=$mode&amp;start=$start" . (($merge_select) ? $selected_ids : ''),		'PAGINATION'			=> generate_pagination($url . "&amp;i=$id&amp;action=$action&amp;mode=$mode&amp;sd=$sort_dir&amp;sk=$sort_key&amp;st=$sort_days" . (($merge_select) ? $selected_ids : ''), $forum_topics, $topics_per_page, $start),		'PAGE_NUMBER'			=> on_page($forum_topics, $topics_per_page, $start),		'TOTAL_TOPICS'			=> ($forum_topics == 1) ? $user->lang['VIEW_FORUM_TOPIC'] : sprintf($user->lang['VIEW_FORUM_TOPICS'], $forum_topics),	));	// Grab icons	$icons = $cache->obtain_icons();	$topic_rows = array();	if ($config['load_db_lastread'])	{		$read_tracking_join = ' LEFT JOIN ' . TOPICS_TRACK_TABLE . ' tt ON (tt.topic_id = t.topic_id AND tt.user_id = ' . $user->data['user_id'] . ')';		$read_tracking_select = ', tt.mark_time';	}	else	{		$read_tracking_join = $read_tracking_select = '';	}	$sql = "SELECT t.topic_id		FROM " . TOPICS_TABLE . " t		WHERE t.forum_id IN($forum_id, 0)			" . (($auth->acl_get('m_approve', $forum_id)) ? '' : 'AND t.topic_approved = 1') . "			$limit_time_sql		ORDER BY t.topic_type DESC, $sort_order_sql";	$result = $db->sql_query_limit($sql, $topics_per_page, $start);	$topic_list = $topic_tracking_info = array();	while ($row = $db->sql_fetchrow($result))	{		$topic_list[] = $row['topic_id'];	}	$db->sql_freeresult($result);	$sql = "SELECT t.*$read_tracking_select		FROM " . TOPICS_TABLE . " t $read_tracking_join		WHERE " . $db->sql_in_set('t.topic_id', $topic_list, false, true);	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$topic_rows[$row['topic_id']] = $row;	}	$db->sql_freeresult($result);	// If there is more than one page, but we have no topic list, then the start parameter is... erm... out of sync	if (!sizeof($topic_list) && $forum_topics && $start > 0)	{		redirect($url . "&amp;i=$id&amp;action=$action&amp;mode=$mode");	}	// Get topic tracking info	if (sizeof($topic_list))	{		if ($config['load_db_lastread'])		{			$topic_tracking_info = get_topic_tracking($forum_id, $topic_list, $topic_rows, array($forum_id => $forum_info['mark_time']), array());		}		else		{			$topic_tracking_info = get_complete_topic_tracking($forum_id, $topic_list, array());		}	}	foreach ($topic_list as $topic_id)	{		$topic_title = '';		$row = &$topic_rows[$topic_id];		$replies = ($auth->acl_get('m_approve', $forum_id)) ? $row['topic_replies_real'] : $row['topic_replies'];		if ($row['topic_status'] == ITEM_MOVED)		{			$unread_topic = false;		}		else		{			$unread_topic = (isset($topic_tracking_info[$topic_id]) && $row['topic_last_post_time'] > $topic_tracking_info[$topic_id]) ? true : false;		}		// Get folder img, topic status/type related information		$folder_img = $folder_alt = $topic_type = '';		topic_status($row, $replies, $unread_topic, $folder_img, $folder_alt, $topic_type);		$topic_title = censor_text($row['topic_title']);		$topic_unapproved = (!$row['topic_approved'] && $auth->acl_get('m_approve', $row['forum_id'])) ? true : false;		$posts_unapproved = ($row['topic_approved'] && $row['topic_replies'] < $row['topic_replies_real'] && $auth->acl_get('m_approve', $row['forum_id'])) ? true : false;		$u_mcp_queue = ($topic_unapproved || $posts_unapproved) ? $url . '&amp;i=queue&amp;mode=' . (($topic_unapproved) ? 'approve_details' : 'unapproved_posts') . '&amp;t=' . $row['topic_id'] : '';		$topic_row = array(			'ATTACH_ICON_IMG'		=> ($auth->acl_get('u_download') && $auth->acl_get('f_download', $row['forum_id']) && $row['topic_attachment']) ? $user->img('icon_topic_attach', $user->lang['TOTAL_ATTACHMENTS']) : '',			'TOPIC_FOLDER_IMG'		=> $user->img($folder_img, $folder_alt),			'TOPIC_FOLDER_IMG_SRC'	=> $user->img($folder_img, $folder_alt, false, '', 'src'),			'TOPIC_ICON_IMG'		=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['img'] : '',			'TOPIC_ICON_IMG_WIDTH'	=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['width'] : '',			'TOPIC_ICON_IMG_HEIGHT'	=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['height'] : '',			'UNAPPROVED_IMG'		=> ($topic_unapproved || $posts_unapproved) ? $user->img('icon_topic_unapproved', ($topic_unapproved) ? 'TOPIC_UNAPPROVED' : 'POSTS_UNAPPROVED') : '',			'TOPIC_AUTHOR'				=> get_username_string('username', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'TOPIC_AUTHOR_COLOUR'		=> get_username_string('colour', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'TOPIC_AUTHOR_FULL'			=> get_username_string('full', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'U_TOPIC_AUTHOR'			=> get_username_string('profile', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'LAST_POST_AUTHOR'			=> get_username_string('username', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'LAST_POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'LAST_POST_AUTHOR_FULL'		=> get_username_string('full', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'U_LAST_POST_AUTHOR'		=> get_username_string('profile', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'TOPIC_TYPE'		=> $topic_type,			'TOPIC_TITLE'		=> $topic_title,			'REPLIES'			=> ($auth->acl_get('m_approve', $row['forum_id'])) ? $row['topic_replies_real'] : $row['topic_replies'],			'LAST_POST_TIME'	=> $user->format_date($row['topic_last_post_time']),			'FIRST_POST_TIME'	=> $user->format_date($row['topic_time']),			'LAST_POST_SUBJECT'	=> $row['topic_last_post_subject'],			'LAST_VIEW_TIME'	=> $user->format_date($row['topic_last_view_time']),			'S_TOPIC_REPORTED'		=> (!empty($row['topic_reported']) && empty($row['topic_moved_id']) && $auth->acl_get('m_report', $row['forum_id'])) ? true : false,			'S_TOPIC_UNAPPROVED'	=> $topic_unapproved,			'S_POSTS_UNAPPROVED'	=> $posts_unapproved,			'S_UNREAD_TOPIC'		=> $unread_topic,		);		if ($row['topic_status'] == ITEM_MOVED)		{			$topic_row = array_merge($topic_row, array(				'U_VIEW_TOPIC'		=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", "t={$row['topic_moved_id']}"),				'U_DELETE_TOPIC'	=> ($auth->acl_get('m_delete', $forum_id)) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "i=$id&amp;f=$forum_id&amp;topic_id_list[]={$row['topic_id']}&amp;mode=forum_view&amp;action=delete_topic") : '',				'S_MOVED_TOPIC'		=> true,				'TOPIC_ID'			=> $row['topic_moved_id'],			));		}		else		{			if ($action == 'merge_topic' || $action == 'merge_topics')			{				$u_select_topic = $url . "&amp;i=$id&amp;mode=forum_view&amp;action=$action&amp;to_topic_id=" . $row['topic_id'] . $selected_ids;			}			else			{				$u_select_topic = $url . "&amp;i=$id&amp;mode=topic_view&amp;action=merge&amp;to_topic_id=" . $row['topic_id'] . $selected_ids;			}			$topic_row = array_merge($topic_row, array(				'U_VIEW_TOPIC'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=$id&amp;f=$forum_id&amp;t={$row['topic_id']}&amp;mode=topic_view"),				'S_SELECT_TOPIC'	=> ($merge_select && !in_array($row['topic_id'], $source_topic_ids)) ? true : false,				'U_SELECT_TOPIC'	=> $u_select_topic,				'U_MCP_QUEUE'		=> $u_mcp_queue,				'U_MCP_REPORT'		=> ($auth->acl_get('m_report', $forum_id)) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main&amp;mode=topic_view&amp;t=' . $row['topic_id'] . '&amp;action=reports') : '',				'TOPIC_ID'			=> $row['topic_id'],				'S_TOPIC_CHECKED'	=> ($topic_id_list && in_array($row['topic_id'], $topic_id_list)) ? true : false,			));		}		$template->assign_block_vars('topicrow', $topic_row);	}	unset($topic_rows);}/*** Resync topics*/function mcp_resync_topics($topic_ids){	global $auth, $db, $template, $phpEx, $user, $phpbb_root_path;	if (!sizeof($topic_ids))	{		trigger_error('NO_TOPIC_SELECTED');	}	if (!check_ids($topic_ids, TOPICS_TABLE, 'topic_id', array('m_')))	{		return;	}	// Sync everything and perform extra checks separately	sync('topic_reported', 'topic_id', $topic_ids, false, true);	sync('topic_attachment', 'topic_id', $topic_ids, false, true);	sync('topic', 'topic_id', $topic_ids, true, false);	$sql = 'SELECT topic_id, forum_id, topic_title		FROM ' . TOPICS_TABLE . '		WHERE ' . $db->sql_in_set('topic_id', $topic_ids);	$result = $db->sql_query($sql);	// Log this action	while ($row = $db->sql_fetchrow($result))	{		add_log('mod', $row['forum_id'], $row['topic_id'], 'LOG_TOPIC_RESYNC', $row['topic_title']);	}	$db->sql_freeresult($result);	$msg = (sizeof($topic_ids) == 1) ? $user->lang['TOPIC_RESYNC_SUCCESS'] : $user->lang['TOPICS_RESYNC_SUCCESS'];	$redirect = request_var('redirect', $user->data['session_page']);	meta_refresh(3, $redirect);	trigger_error($msg . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $redirect . '">', '</a>'));	return;}/*** Merge selected topics into selected topic*/function merge_topics($forum_id, $topic_ids, $to_topic_id){	global $db, $template, $user, $phpEx, $phpbb_root_path, $auth;	if (!sizeof($topic_ids))	{		$template->assign_var('MESSAGE', $user->lang['NO_TOPIC_SELECTED']);		return;	}	if (!$to_topic_id)	{		$template->assign_var('MESSAGE', $user->lang['NO_FINAL_TOPIC_SELECTED']);		return;	}	$topic_data = get_topic_data(array($to_topic_id), 'm_merge');	if (!sizeof($topic_data))	{		$template->assign_var('MESSAGE', $user->lang['NO_FINAL_TOPIC_SELECTED']);		return;	}	$topic_data = $topic_data[$to_topic_id];	$post_id_list	= request_var('post_id_list', array(0));	$start			= request_var('start', 0);	if (!sizeof($post_id_list) && sizeof($topic_ids))	{		$sql = 'SELECT post_id			FROM ' . POSTS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', $topic_ids);		$result = $db->sql_query($sql);		$post_id_list = array();		while ($row = $db->sql_fetchrow($result))		{			$post_id_list[] = $row['post_id'];		}		$db->sql_freeresult($result);	}	if (!sizeof($post_id_list))	{		$template->assign_var('MESSAGE', $user->lang['NO_POST_SELECTED']);		return;	}	if (!check_ids($post_id_list, POSTS_TABLE, 'post_id', array('m_merge')))	{		return;	}	$redirect = request_var('redirect', build_url(array('quickmod')));	$s_hidden_fields = build_hidden_fields(array(		'i'				=> 'main',		'f'				=> $forum_id,		'post_id_list'	=> $post_id_list,		'to_topic_id'	=> $to_topic_id,		'mode'			=> 'forum_view',		'action'		=> 'merge_topics',		'start'			=> $start,		'redirect'		=> $redirect,		'topic_id_list'	=> $topic_ids)	);	$success_msg = $return_link = '';	if (confirm_box(true))	{		$to_forum_id = $topic_data['forum_id'];		move_posts($post_id_list, $to_topic_id);		add_log('mod', $to_forum_id, $to_topic_id, 'LOG_MERGE', $topic_data['topic_title']);		// Message and return links		$success_msg = 'POSTS_MERGED_SUCCESS';		// If the topic no longer exist, we will update the topic watch table.		// To not let it error out on users watching both topics, we just return on an error...		$db->sql_return_on_error(true);		$db->sql_query('UPDATE ' . TOPICS_WATCH_TABLE . ' SET topic_id = ' . (int) $to_topic_id . ' WHERE ' . $db->sql_in_set('topic_id', $topic_ids));		$db->sql_return_on_error(false);		$db->sql_query('DELETE FROM ' . TOPICS_WATCH_TABLE . ' WHERE ' . $db->sql_in_set('topic_id', $topic_ids));		// Link to the new topic		$return_link .= (($return_link) ? '<br /><br />' : '') . sprintf($user->lang['RETURN_NEW_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $to_forum_id . '&amp;t=' . $to_topic_id) . '">', '</a>');	}	else	{		confirm_box(false, 'MERGE_TOPICS', $s_hidden_fields);	}	$redirect = request_var('redirect', "index.$phpEx");	$redirect = reapply_sid($redirect);	if (!$success_msg)	{		return;	}	else	{		meta_refresh(3, append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$to_forum_id&amp;t=$to_topic_id"));		trigger_error($user->lang[$success_msg] . '<br /><br />' . $return_link);	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class mcp_pm_reports_info{	function module()	{		return array(			'filename'	=> 'mcp_pm_reports',			'title'		=> 'MCP_PM_REPORTS',			'version'	=> '1.0.0',			'modes'		=> array(				'pm_reports'			=> array('title' => 'MCP_PM_REPORTS_OPEN', 'auth' => 'aclf_m_report', 'cat' => array('MCP_REPORTS')),				'pm_reports_closed'	=> array('title' => 'MCP_PM_REPORTS_CLOSED', 'auth' => 'aclf_m_report', 'cat' => array('MCP_REPORTS')),				'pm_report_details'	=> array('title' => 'MCP_PM_REPORT_DETAILS', 'auth' => 'aclf_m_report', 'cat' => array('MCP_REPORTS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup('memberlist');// Get and set some variables$mode		= request_var('mode', '');$session_id	= request_var('s', '');$start		= request_var('start', 0);$sort_key	= request_var('sk', 'b');$sort_dir	= request_var('sd', 'd');$show_guests= ($config['load_online_guests']) ? request_var('sg', 0) : 0;// Can this user view profiles/memberlist?if (!$auth->acl_gets('u_viewprofile', 'a_user', 'a_useradd', 'a_userdel')){	if ($user->data['user_id'] != ANONYMOUS)	{		trigger_error('NO_VIEW_USERS');	}	login_box('', $user->lang['LOGIN_EXPLAIN_VIEWONLINE']);}$sort_key_text = array('a' => $user->lang['SORT_USERNAME'], 'b' => $user->lang['SORT_JOINED'], 'c' => $user->lang['SORT_LOCATION']);$sort_key_sql = array('a' => 'u.username_clean', 'b' => 's.session_time', 'c' => 's.session_page');// Sorting and orderif (!isset($sort_key_text[$sort_key])){	$sort_key = 'b';}$order_by = $sort_key_sql[$sort_key] . ' ' . (($sort_dir == 'a') ? 'ASC' : 'DESC');// Whois requestedif ($mode == 'whois' && $auth->acl_get('a_') && $session_id){	include($phpbb_root_path . 'includes/functions_user.' . $phpEx);	$sql = 'SELECT u.user_id, u.username, u.user_type, s.session_ip		FROM ' . USERS_TABLE . ' u, ' . SESSIONS_TABLE . " s		WHERE s.session_id = '" . $db->sql_escape($session_id) . "'			AND	u.user_id = s.session_user_id";	$result = $db->sql_query($sql);	if ($row = $db->sql_fetchrow($result))	{		$template->assign_var('WHOIS', user_ipwhois($row['session_ip']));	}	$db->sql_freeresult($result);	// Output the page	page_header($user->lang['WHO_IS_ONLINE']);	$template->set_filenames(array(		'body' => 'viewonline_whois.html')	);	make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"));	page_footer();}// Forum info$sql = 'SELECT forum_id, forum_name, parent_id, forum_type, left_id, right_id	FROM ' . FORUMS_TABLE . '	ORDER BY left_id ASC';$result = $db->sql_query($sql, 600);$forum_data = array();while ($row = $db->sql_fetchrow($result)){	$forum_data[$row['forum_id']] = $row;}$db->sql_freeresult($result);$guest_counter = 0;// Get number of online guests (if we do not display them)if (!$show_guests){	switch ($db->sql_layer)	{		case 'sqlite':			$sql = 'SELECT COUNT(session_ip) as num_guests				FROM (					SELECT DISTINCT session_ip						FROM ' . SESSIONS_TABLE . '						WHERE session_user_id = ' . ANONYMOUS . '							AND session_time >= ' . (time() - ($config['load_online_time'] * 60)) .				')';		break;		default:			$sql = 'SELECT COUNT(DISTINCT session_ip) as num_guests				FROM ' . SESSIONS_TABLE . '				WHERE session_user_id = ' . ANONYMOUS . '					AND session_time >= ' . (time() - ($config['load_online_time'] * 60));		break;	}	$result = $db->sql_query($sql);	$guest_counter = (int) $db->sql_fetchfield('num_guests');	$db->sql_freeresult($result);}// Get user list$sql = 'SELECT u.user_id, u.username, u.username_clean, u.user_type, u.user_colour, s.session_id, s.session_time, s.session_page, s.session_ip, s.session_browser, s.session_viewonline, s.session_forum_id	FROM ' . USERS_TABLE . ' u, ' . SESSIONS_TABLE . ' s	WHERE u.user_id = s.session_user_id		AND s.session_time >= ' . (time() - ($config['load_online_time'] * 60)) .		((!$show_guests) ? ' AND s.session_user_id <> ' . ANONYMOUS : '') . '	ORDER BY ' . $order_by;$result = $db->sql_query($sql);$prev_id = $prev_ip = $user_list = array();$logged_visible_online = $logged_hidden_online = $counter = 0;while ($row = $db->sql_fetchrow($result)){	if ($row['user_id'] != ANONYMOUS && !isset($prev_id[$row['user_id']]))	{		$view_online = $s_user_hidden = false;		$user_colour = ($row['user_colour']) ? ' style="color:#' . $row['user_colour'] . '" class="username-coloured"' : '';		$username_full = ($row['user_type'] != USER_IGNORE) ? get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']) : '<span' . $user_colour . '>' . $row['username'] . '</span>';		if (!$row['session_viewonline'])		{			$view_online = ($auth->acl_get('u_viewonline')) ? true : false;			$logged_hidden_online++;			$username_full = '<em>' . $username_full . '</em>';			$s_user_hidden = true;		}		else		{			$view_online = true;			$logged_visible_online++;		}		$prev_id[$row['user_id']] = 1;		if ($view_online)		{			$counter++;		}		if (!$view_online || $counter > $start + $config['topics_per_page'] || $counter <= $start)		{			continue;		}	}	else if ($show_guests && $row['user_id'] == ANONYMOUS && !isset($prev_ip[$row['session_ip']]))	{		$prev_ip[$row['session_ip']] = 1;		$guest_counter++;		$counter++;		if ($counter > $start + $config['topics_per_page'] || $counter <= $start)		{			continue;		}		$s_user_hidden = false;		$username_full = get_username_string('full', $row['user_id'], $user->lang['GUEST']);	}	else	{		continue;	}	preg_match('#^([a-z0-9/_-]+)#i', $row['session_page'], $on_page);	if (!sizeof($on_page))	{		$on_page[1] = '';	}	switch ($on_page[1])	{		case 'index':			$location = $user->lang['INDEX'];			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;		case 'adm/index':			$location = $user->lang['ACP'];			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;		case 'posting':		case 'viewforum':		case 'viewtopic':			$forum_id = $row['session_forum_id'];			if ($forum_id && $auth->acl_get('f_list', $forum_id))			{				$location = '';				$location_url = append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id);				if ($forum_data[$forum_id]['forum_type'] == FORUM_LINK)				{					$location = sprintf($user->lang['READING_LINK'], $forum_data[$forum_id]['forum_name']);					break;				}				switch ($on_page[1])				{					case 'posting':						preg_match('#mode=([a-z]+)#', $row['session_page'], $on_page);						$posting_mode = (!empty($on_page[1])) ? $on_page[1] : '';						switch ($posting_mode)						{							case 'reply':							case 'quote':								$location = sprintf($user->lang['REPLYING_MESSAGE'], $forum_data[$forum_id]['forum_name']);							break;							default:								$location = sprintf($user->lang['POSTING_MESSAGE'], $forum_data[$forum_id]['forum_name']);							break;						}					break;					case 'viewtopic':						$location = sprintf($user->lang['READING_TOPIC'], $forum_data[$forum_id]['forum_name']);					break;					case 'viewforum':						$location = sprintf($user->lang['READING_FORUM'], $forum_data[$forum_id]['forum_name']);					break;				}			}			else			{				$location = $user->lang['INDEX'];				$location_url = append_sid("{$phpbb_root_path}index.$phpEx");			}		break;		case 'search':			$location = $user->lang['SEARCHING_FORUMS'];			$location_url = append_sid("{$phpbb_root_path}search.$phpEx");		break;		case 'faq':			$location = $user->lang['VIEWING_FAQ'];			$location_url = append_sid("{$phpbb_root_path}faq.$phpEx");		break;		case 'viewonline':			$location = $user->lang['VIEWING_ONLINE'];			$location_url = append_sid("{$phpbb_root_path}viewonline.$phpEx");		break;		case 'memberlist':			$location = (strpos($row['session_page'], 'mode=viewprofile') !== false) ? $user->lang['VIEWING_MEMBER_PROFILE'] : $user->lang['VIEWING_MEMBERS'];			$location_url = append_sid("{$phpbb_root_path}memberlist.$phpEx");		break;		case 'mcp':			$location = $user->lang['VIEWING_MCP'];			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;		case 'ucp':			$location = $user->lang['VIEWING_UCP'];			// Grab some common modules			$url_params = array(				'mode=register'		=> 'VIEWING_REGISTER',				'i=pm&mode=compose'	=> 'POSTING_PRIVATE_MESSAGE',				'i=pm&'				=> 'VIEWING_PRIVATE_MESSAGES',				'i=profile&'		=> 'CHANGING_PROFILE',				'i=prefs&'			=> 'CHANGING_PREFERENCES',			);			foreach ($url_params as $param => $lang)			{				if (strpos($row['session_page'], $param) !== false)				{					$location = $user->lang[$lang];					break;				}			}			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;		case 'download/file':			$location = $user->lang['DOWNLOADING_FILE'];			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;		case 'report':			$location = $user->lang['REPORTING_POST'];			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;		default:			$location = $user->lang['INDEX'];			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;	}	$template->assign_block_vars('user_row', array(		'USERNAME' 			=> $row['username'],		'USERNAME_COLOUR'	=> $row['user_colour'],		'USERNAME_FULL'		=> $username_full,		'LASTUPDATE'		=> $user->format_date($row['session_time']),		'FORUM_LOCATION'	=> $location,		'USER_IP'			=> ($auth->acl_get('a_')) ? (($mode == 'lookup' && $session_id == $row['session_id']) ? gethostbyaddr($row['session_ip']) : $row['session_ip']) : '',		'USER_BROWSER'		=> ($auth->acl_get('a_user')) ? $row['session_browser'] : '',		'U_USER_PROFILE'	=> ($row['user_type'] != USER_IGNORE) ? get_username_string('profile', $row['user_id'], '') : '',		'U_USER_IP'			=> append_sid("{$phpbb_root_path}viewonline.$phpEx", 'mode=lookup' . (($mode != 'lookup' || $row['session_id'] != $session_id) ? '&amp;s=' . $row['session_id'] : '') . "&amp;sg=$show_guests&amp;start=$start&amp;sk=$sort_key&amp;sd=$sort_dir"),		'U_WHOIS'			=> append_sid("{$phpbb_root_path}viewonline.$phpEx", 'mode=whois&amp;s=' . $row['session_id']),		'U_FORUM_LOCATION'	=> $location_url,		'S_USER_HIDDEN'		=> $s_user_hidden,		'S_GUEST'			=> ($row['user_id'] == ANONYMOUS) ? true : false,		'S_USER_TYPE'		=> $row['user_type'],	));}$db->sql_freeresult($result);unset($prev_id, $prev_ip);// Generate reg/hidden/guest online text$vars_online = array(	'REG'	=> array('logged_visible_online', 'l_r_user_s'),	'HIDDEN'=> array('logged_hidden_online', 'l_h_user_s'),	'GUEST'	=> array('guest_counter', 'l_g_user_s'));foreach ($vars_online as $l_prefix => $var_ary){	switch ($$var_ary[0])	{		case 0:			$$var_ary[1] = $user->lang[$l_prefix . '_USERS_ZERO_ONLINE'];		break;		case 1:			$$var_ary[1] = $user->lang[$l_prefix . '_USER_ONLINE'];		break;		default:			$$var_ary[1] = $user->lang[$l_prefix . '_USERS_ONLINE'];		break;	}}unset($vars_online);$pagination = generate_pagination(append_sid("{$phpbb_root_path}viewonline.$phpEx", "sg=$show_guests&amp;sk=$sort_key&amp;sd=$sort_dir"), $counter, $config['topics_per_page'], $start);// Grab group details for legend displayif ($auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel')){	$sql = 'SELECT group_id, group_name, group_colour, group_type		FROM ' . GROUPS_TABLE . '		WHERE group_legend = 1		ORDER BY group_name ASC';}else{	$sql = 'SELECT g.group_id, g.group_name, g.group_colour, g.group_type		FROM ' . GROUPS_TABLE . ' g		LEFT JOIN ' . USER_GROUP_TABLE . ' ug			ON (				g.group_id = ug.group_id				AND ug.user_id = ' . $user->data['user_id'] . '				AND ug.user_pending = 0			)		WHERE g.group_legend = 1			AND (g.group_type <> ' . GROUP_HIDDEN . ' OR ug.user_id = ' . $user->data['user_id'] . ')		ORDER BY g.group_name ASC';}$result = $db->sql_query($sql);$legend = '';while ($row = $db->sql_fetchrow($result)){	if ($row['group_name'] == 'BOTS')	{		$legend .= (($legend != '') ? ', ' : '') . '<span style="color:#' . $row['group_colour'] . '">' . $user->lang['G_BOTS'] . '</span>';	}	else	{		$legend .= (($legend != '') ? ', ' : '') . '<a style="color:#' . $row['group_colour'] . '" href="' . append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=group&amp;g=' . $row['group_id']) . '">' . (($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name']) . '</a>';	}}$db->sql_freeresult($result);// Refreshing the page every 60 seconds...meta_refresh(60, append_sid("{$phpbb_root_path}viewonline.$phpEx", "sg=$show_guests&amp;sk=$sort_key&amp;sd=$sort_dir&amp;start=$start"));// Send data to template$template->assign_vars(array(	'TOTAL_REGISTERED_USERS_ONLINE'	=> sprintf($l_r_user_s, $logged_visible_online) . sprintf($l_h_user_s, $logged_hidden_online),	'TOTAL_GUEST_USERS_ONLINE'		=> sprintf($l_g_user_s, $guest_counter),	'LEGEND'						=> $legend,	'PAGINATION'					=> $pagination,	'PAGE_NUMBER'					=> on_page($counter, $config['topics_per_page'], $start),	'U_SORT_USERNAME'		=> append_sid("{$phpbb_root_path}viewonline.$phpEx", 'sk=a&amp;sd=' . (($sort_key == 'a' && $sort_dir == 'a') ? 'd' : 'a') . '&amp;sg=' . ((int) $show_guests)),	'U_SORT_UPDATED'		=> append_sid("{$phpbb_root_path}viewonline.$phpEx", 'sk=b&amp;sd=' . (($sort_key == 'b' && $sort_dir == 'a') ? 'd' : 'a') . '&amp;sg=' . ((int) $show_guests)),	'U_SORT_LOCATION'		=> append_sid("{$phpbb_root_path}viewonline.$phpEx", 'sk=c&amp;sd=' . (($sort_key == 'c' && $sort_dir == 'a') ? 'd' : 'a') . '&amp;sg=' . ((int) $show_guests)),	'U_SWITCH_GUEST_DISPLAY'	=> append_sid("{$phpbb_root_path}viewonline.$phpEx", 'sg=' . ((int) !$show_guests)),	'L_SWITCH_GUEST_DISPLAY'	=> ($show_guests) ? $user->lang['HIDE_GUESTS'] : $user->lang['DISPLAY_GUESTS'],	'S_SWITCH_GUEST_DISPLAY'	=> ($config['load_online_guests']) ? true : false));// We do not need to load the who is online box here. ;)$config['load_online'] = false;// Output the pagepage_header($user->lang['WHO_IS_ONLINE']);$template->set_filenames(array(	'body' => 'viewonline_body.html'));make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"));page_footer();?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}include($phpbb_root_path . 'includes/questionnaire/questionnaire.' . $phpEx);/*** @package acp*/class acp_send_statistics{	var $u_action;	function main($id, $mode)	{		global $config, $template, $phpbb_admin_path, $phpEx;		$collect_url = "http://www.phpbb.com/stats/receive_stats.php";		$this->tpl_name = 'acp_send_statistics';		$this->page_title = 'ACP_SEND_STATISTICS';		// generate a unique id if necessary		if (!isset($config['questionnaire_unique_id']))		{			$install_id = unique_id();			set_config('questionnaire_unique_id', $install_id);		}		else		{			$install_id = $config['questionnaire_unique_id'];		}		$collector = new phpbb_questionnaire_data_collector($install_id);		// Add data provider		$collector->add_data_provider(new phpbb_questionnaire_php_data_provider());		$collector->add_data_provider(new phpbb_questionnaire_system_data_provider());		$collector->add_data_provider(new phpbb_questionnaire_phpbb_data_provider($config));		$template->assign_vars(array(			'U_COLLECT_STATS'	=> $collect_url,			'RAW_DATA'			=> $collector->get_data_for_form(),			'U_ACP_MAIN'		=> append_sid("{$phpbb_admin_path}index.$phpEx"),		));		$raw = $collector->get_data_raw();		foreach ($raw as $provider => $data)		{			if ($provider == 'install_id')			{				$data = array($provider => $data);			}			$template->assign_block_vars('providers', array(				'NAME'	=> htmlspecialchars($provider),			));			foreach ($data as $key => $value)			{				if (is_array($value))				{					$value = utf8_wordwrap(serialize($value), 75, "\n", true);				}				$template->assign_block_vars('providers.values', array(					'KEY'	=> utf8_htmlspecialchars($key),					'VALUE'	=> utf8_htmlspecialchars($value),				));			}		}	}}?>
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** acp_forums [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// Forum Admin$lang = array_merge($lang, array(	'AUTO_PRUNE_DAYS'			=> 'Auto-prune post age',	'AUTO_PRUNE_DAYS_EXPLAIN'	=> 'Number of days since last post after which topic is removed.',	'AUTO_PRUNE_FREQ'			=> 'Auto-prune frequency',	'AUTO_PRUNE_FREQ_EXPLAIN'	=> 'Time in days between pruning events.',	'AUTO_PRUNE_VIEWED'			=> 'Auto-prune post viewed age',	'AUTO_PRUNE_VIEWED_EXPLAIN'	=> 'Number of days since topic was viewed after which topic is removed.',	'CONTINUE'						=> 'Continue',	'COPY_PERMISSIONS'				=> 'Copy permissions from',	'COPY_PERMISSIONS_EXPLAIN'		=> 'To ease up the permission setup for your new forum, you can copy the permissions of an existing forum.',	'COPY_PERMISSIONS_ADD_EXPLAIN'	=> 'Once created, the forum will have the same permissions as the one you select here. If no forum is selected the newly created forum will not be visible until permissions had been set.',	'COPY_PERMISSIONS_EDIT_EXPLAIN'	=> 'If you select to copy permissions, the forum will have the same permissions as the one you select here. This will overwrite any permissions you have previously set for this forum with the permissions of the forum you select here. If no forum is selected the current permissions will be kept.',	'COPY_TO_ACL'					=> 'Alternatively, you are also able to %sset up new permissions%s for this forum.',	'CREATE_FORUM'					=> 'Create new forum',	'DECIDE_MOVE_DELETE_CONTENT'		=> 'Delete content or move to forum',	'DECIDE_MOVE_DELETE_SUBFORUMS'		=> 'Delete subforums or move to forum',	'DEFAULT_STYLE'						=> 'Default style',	'DELETE_ALL_POSTS'					=> 'Delete posts',	'DELETE_SUBFORUMS'					=> 'Delete subforums and posts',	'DISPLAY_ACTIVE_TOPICS'				=> 'Enable active topics',	'DISPLAY_ACTIVE_TOPICS_EXPLAIN'		=> 'If set to yes active topics in selected subforums will be displayed under this category.',	'EDIT_FORUM'					=> 'Edit forum',	'ENABLE_INDEXING'				=> 'Enable search indexing',	'ENABLE_INDEXING_EXPLAIN'		=> 'If set to yes posts made to this forum will be indexed for searching.',	'ENABLE_POST_REVIEW'			=> 'Enable post review',	'ENABLE_POST_REVIEW_EXPLAIN'	=> 'If set to yes users are able to review their post if new posts were made to the topic while users wrote theirs. This should be disabled for chat forums.',	'ENABLE_QUICK_REPLY'			=> 'Enable quick reply',	'ENABLE_QUICK_REPLY_EXPLAIN'	=> 'Enables the quick reply in this forum. This setting is not considered if the quick reply is disabled board wide. The quick reply will only be displayed for users who have permission to post in this forum.',	'ENABLE_RECENT'					=> 'Display active topics',	'ENABLE_RECENT_EXPLAIN'			=> 'If set to yes topics made to this forum will be shown in the active topics list.',	'ENABLE_TOPIC_ICONS'			=> 'Enable topic icons',	'FORUM_ADMIN'						=> 'Forum administration',	'FORUM_ADMIN_EXPLAIN'				=> 'In phpBB3 everything is forum based. A category is just a special type of forum. Each forum can have an unlimited number of sub-forums and you can determine whether each may be posted to or not (i.e. whether it acts like an old category). Here you can add, edit, delete, lock, unlock individual forums as well as set certain additional controls. If your posts and topics have got out of sync you can also resynchronise a forum. <strong>You need to copy or set appropriate permissions for newly created forums to have them displayed.</strong>',	'FORUM_AUTO_PRUNE'					=> 'Enable auto-pruning',	'FORUM_AUTO_PRUNE_EXPLAIN'			=> 'Prunes the forum of topics, set the frequency/age parameters below.',	'FORUM_CREATED'						=> 'Forum created successfully.',	'FORUM_DATA_NEGATIVE'				=> 'Pruning parameters cannot be negative.',	'FORUM_DESC_TOO_LONG'				=> 'The forum description is too long, it must be less than 4000 characters.',	'FORUM_DELETE'						=> 'Delete forum',	'FORUM_DELETE_EXPLAIN'				=> 'The form below will allow you to delete a forum. If the forum is postable you are able to decide where you want to put all topics (or forums) it contained.',	'FORUM_DELETED'						=> 'Forum successfully deleted.',	'FORUM_DESC'						=> 'Description',	'FORUM_DESC_EXPLAIN'				=> 'Any HTML markup entered here will be displayed as is.',	'FORUM_EDIT_EXPLAIN'				=> 'The form below will allow you to customise this forum. Please note that moderation and post count controls are set via forum permissions for each user or usergroup.',	'FORUM_IMAGE'						=> 'Forum image',	'FORUM_IMAGE_EXPLAIN'				=> 'Location, relative to the phpBB root directory, of an additional image to associate with this forum.',	'FORUM_IMAGE_NO_EXIST'				=> 'The specified forum image does not exist',	'FORUM_LINK_EXPLAIN'				=> 'Full URL (including the protocol, i.e.: <samp>http://</samp>) to the destination location that clicking this forum will take the user, e.g.: <samp>http://www.phpbb.com/</samp>.',	'FORUM_LINK_TRACK'					=> 'Track link redirects',	'FORUM_LINK_TRACK_EXPLAIN'			=> 'Records the number of times a forum link was clicked.',	'FORUM_NAME'						=> 'Forum name',	'FORUM_NAME_EMPTY'					=> 'You must enter a name for this forum.',	'FORUM_PARENT'						=> 'Parent forum',	'FORUM_PASSWORD'					=> 'Forum password',	'FORUM_PASSWORD_CONFIRM'			=> 'Confirm forum password',	'FORUM_PASSWORD_CONFIRM_EXPLAIN'	=> 'Only needs to be set if a forum password is entered.',	'FORUM_PASSWORD_EXPLAIN'			=> 'Defines a password for this forum, use the permission system in preference.',	'FORUM_PASSWORD_UNSET'				=> 'Remove forum password',	'FORUM_PASSWORD_UNSET_EXPLAIN'		=> 'Check here if you want to remove the forum password.',	'FORUM_PASSWORD_OLD'				=> 'The forum password is using an old hashing method and should be changed.',	'FORUM_PASSWORD_MISMATCH'			=> 'The passwords you entered did not match.',	'FORUM_PRUNE_SETTINGS'				=> 'Forum prune settings',	'FORUM_RESYNCED'					=> 'Forum %s successfully resynced',	'FORUM_RULES_EXPLAIN'				=> 'Forum rules are displayed at any page within the given forum.',	'FORUM_RULES_LINK'					=> 'Link to forum rules',	'FORUM_RULES_LINK_EXPLAIN'			=> 'You are able to enter the URL of the page/post containing your forum rules here. This setting will override the forum rules text you specified.',	'FORUM_RULES_PREVIEW'				=> 'Forum rules preview',	'FORUM_RULES_TOO_LONG'				=> 'The forum rules must be less than 4000 characters.',	'FORUM_SETTINGS'					=> 'Forum settings',	'FORUM_STATUS'						=> 'Forum status',	'FORUM_STYLE'						=> 'Forum style',	'FORUM_TOPICS_PAGE'					=> 'Topics per page',	'FORUM_TOPICS_PAGE_EXPLAIN'			=> 'If non-zero this value will override the default topics per page setting.',	'FORUM_TYPE'						=> 'Forum type',	'FORUM_UPDATED'						=> 'Forum information updated successfully.',	'FORUM_WITH_SUBFORUMS_NOT_TO_LINK'		=> 'You want to change a postable forum having subforums to a link. Please move all subforums out of this forum before you proceed, because after changing to a link you are no longer able to see the subforums currently connected to this forum.',	'GENERAL_FORUM_SETTINGS'	=> 'General forum settings',	'LINK'						=> 'Link',	'LIST_INDEX'				=> 'List subforum in parent-forums legend',	'LIST_INDEX_EXPLAIN'		=> 'Displays this forum on the index and elsewhere as a link within the legend of its parent-forum if the parent-forums List subforums in legend option is enabled.',	'LIST_SUBFORUMS'			=> 'List subforums in legend',	'LIST_SUBFORUMS_EXPLAIN'	=> 'Displays this forums subforums on the index and elsewhere as a link within the legend if their List subforum in parent-forums legend option is enabled.',	'LOCKED'					=> 'Locked',	'MOVE_POSTS_NO_POSTABLE_FORUM'	=> 'The forum you selected for moving the posts to is not postable. Please select a postable forum.',	'MOVE_POSTS_TO'					=> 'Move posts to',	'MOVE_SUBFORUMS_TO'				=> 'Move subforums to',	'NO_DESTINATION_FORUM'			=> 'You have not specified a forum to move content to.',	'NO_FORUM_ACTION'				=> 'No action defined for what happens with the forum content.',	'NO_PARENT'						=> 'No parent',	'NO_PERMISSIONS'				=> 'Do not copy permissions',	'NO_PERMISSION_FORUM_ADD'		=> 'You do not have the necessary permissions to add forums.',	'NO_PERMISSION_FORUM_DELETE'	=> 'You do not have the necessary permissions to delete forums.',	'PARENT_IS_LINK_FORUM'		=> 'The parent you specified is a forum link. Link forums are not able to hold other forums, please specify a category or forum as the parent forum.',	'PARENT_NOT_EXIST'			=> 'Parent does not exist.',	'PRUNE_ANNOUNCEMENTS'		=> 'Prune announcements',	'PRUNE_STICKY'				=> 'Prune stickies',	'PRUNE_OLD_POLLS'			=> 'Prune old polls',	'PRUNE_OLD_POLLS_EXPLAIN'	=> 'Removes topics with polls not voted in for post age days.',	'REDIRECT_ACL'	=> 'Now you are able to %sset permissions%s for this forum.',	'SYNC_IN_PROGRESS'			=> 'Synchronizing forum',	'SYNC_IN_PROGRESS_EXPLAIN'	=> 'Currently resyncing topic range %1$d/%2$d.',	'TYPE_CAT'			=> 'Category',	'TYPE_FORUM'		=> 'Forum',	'TYPE_LINK'			=> 'Link',	'UNLOCKED'			=> 'Unlocked',));?>
<?php/**** @package acm* @version $Id$* @copyright (c) 2005, 2009 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}// Include the abstract baseif (!class_exists('acm_memory')){	require("{$phpbb_root_path}includes/acm/acm_memory.$phpEx");}/*** ACM for APC* @package acm*/class acm extends acm_memory{	var $extension = 'apc';	/**	* Purge cache data	*	* @return void	*/	function purge()	{		apc_clear_cache('user');		parent::purge();	}	/**	* Fetch an item from the cache	*	* @access protected	* @param string $var Cache key	* @return mixed Cached data	*/	function _read($var)	{		return apc_fetch($this->key_prefix . $var);	}	/**	* Store data in the cache	*	* @access protected	* @param string $var Cache key	* @param mixed $data Data to store	* @param int $ttl Time-to-live of cached data	* @return bool True if the operation succeeded	*/	function _write($var, $data, $ttl = 2592000)	{		return apc_store($this->key_prefix . $var, $data, $ttl);	}	/**	* Remove an item from the cache	*	* @access protected	* @param string $var Cache key	* @return bool True if the operation succeeded	*/	function _delete($var)	{		return apc_delete($this->key_prefix . $var);	}}?>
<?php/*** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class ucp_pm_info{	function module()	{		return array(			'filename'	=> 'ucp_pm',			'title'		=> 'UCP_PM',			'version'	=> '1.0.0',			'modes'		=> array(				'view'		=> array('title' => 'UCP_PM_VIEW', 'auth' => 'cfg_allow_privmsg', 'display' => false, 'cat' => array('UCP_PM')),				'compose'	=> array('title' => 'UCP_PM_COMPOSE', 'auth' => 'cfg_allow_privmsg', 'cat' => array('UCP_PM')),				'drafts'	=> array('title' => 'UCP_PM_DRAFTS', 'auth' => 'cfg_allow_privmsg', 'cat' => array('UCP_PM')),				'options'	=> array('title' => 'UCP_PM_OPTIONS', 'auth' => 'cfg_allow_privmsg', 'cat' => array('UCP_PM')),				'popup'		=> array('title' => 'UCP_PM_POPUP_TITLE', 'auth' => 'cfg_allow_privmsg', 'display' => false, 'cat' => array('UCP_PM')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** Wave3D CAPTCHA** @author Robert Hetzler* @package VC*/class captcha{	var $width		= 360;	var $height		= 96;	function execute($code, $seed)	{		global $starttime;		// seed the random generator		mt_srand($seed);		// set height and width		$img_x = $this->width;		$img_y = $this->height;		// Generate image		$img	= imagecreatetruecolor($img_x, $img_y);		$x_grid = mt_rand(6, 10);		$y_grid = mt_rand(6, 10);		// Ok, so lets cut to the chase. We could accurately represent this in 3d and		// do all the appropriate linear transforms. my questions is... why bother?		// The computational overhead is unnecessary when you consider the simple fact:		// we're not here to accurately represent a model, but to just show off some random-ish		// polygons		// Conceive of 3 spaces.		// 1) planar-space (discrete "pixel" grid)		// 2) 3-space. (planar-space with z/height aspect)		// 3) image space (pixels on the screen)		// resolution of the planar-space we're embedding the text code in		$plane_x	= 100;		$plane_y	= 30;		$subdivision_factor = 3;		// $box is the 4 points in img_space that correspond to the corners of the plane in 3-space		$box = array(			'upper_left'	=> array(				'x' => mt_rand(5, 15),				'y' => mt_rand(10, 15)			),			'upper_right'	=> array(				'x' => mt_rand($img_x - 35, $img_x - 19),				'y' => mt_rand(10, 17)			),			'lower_left'	=> array(				'x' => mt_rand($img_x - 45, $img_x - 5),				'y' => mt_rand($img_y - 15, $img_y - 0),			),		);		$box['lower_right'] = array(			'x' => $box['lower_left']['x'] + $box['upper_left']['x'] - $box['upper_right']['x'],			'y' => $box['lower_left']['y'] + $box['upper_left']['y'] - $box['upper_right']['y'],		);		// TODO		$background = imagecolorallocate($img, mt_rand(155, 255), mt_rand(155, 255), mt_rand(155, 255));		imagefill($img, 0, 0, $background);		$black = imagecolorallocate($img, 0, 0, 0);		$random = array();		$fontcolors = array();		for ($i = 0; $i < 15; ++$i)		{			$random[$i] = imagecolorallocate($img, mt_rand(120, 255), mt_rand(120, 255), mt_rand(120, 255));		}		$fontcolors[0] = imagecolorallocate($img, mt_rand(0, 120), mt_rand(0, 120), mt_rand(0, 120)); 		$colors = array();		$minr = mt_rand(20, 30);		$ming = mt_rand(20, 30);		$minb = mt_rand(20, 30);		$maxr = mt_rand(150, 230);		$maxg = mt_rand(150, 230);		$maxb = mt_rand(150, 230);		for ($i = -30; $i <= 30; ++$i)		{			$coeff1 = ($i + 12) / 45;			$coeff2 = 1 - $coeff1;			$colors[$i] = imagecolorallocate($img, ($coeff2 * $maxr) + ($coeff1 * $minr), ($coeff2 * $maxg) + ($coeff1 * $ming), ($coeff2 * $maxb) + ($coeff1 * $minb));		}		// $img_buffer is the last row of 3-space positions (converted to img-space), cached		// (using this means we don't need to recalculate all 4 positions for each new polygon,		// merely the newest point that we're adding, which is then cached.		$img_buffer = array(array(), array());		// In image-space, the x- and y-offset necessary to move one unit in the x-direction in planar-space		$dxx = ($box['upper_right']['x'] - $box['upper_left']['x']) / ($subdivision_factor * $plane_x);		$dxy = ($box['upper_right']['y'] - $box['upper_left']['y']) / ($subdivision_factor * $plane_x);		// In image-space, the x- and y-offset necessary to move one unit in the y-direction in planar-space		$dyx = ($box['lower_right']['x'] - $box['upper_left']['x']) / ($subdivision_factor * $plane_y);		$dyy = ($box['lower_right']['y'] - $box['upper_left']['y']) / ($subdivision_factor * $plane_y);		// Initial captcha-letter offset in planar-space		$plane_offset_x = mt_rand(3, 8);		$plane_offset_y = mt_rand( 12, 15);		// character map		$map = $this->captcha_bitmaps();		// matrix		$plane = array();		// for each character, we'll silkscreen it into our boolean pixel plane		for ($c = 0, $code_num = strlen($code); $c < $code_num; ++$c)		{			$letter = $code[$c];			for ($x = $map['width'] - 1; $x >= 0; --$x)			{				for ($y = $map['height'] - 1; $y >= 0; --$y)				{					if ($map['data'][$letter][$y][$x])					{						$plane[$y + $plane_offset_y + (($c & 1) ? 1 : -1)][$x + $plane_offset_x] = true;					}				}			}			$plane_offset_x += 11;		}		// calculate our first buffer, we can't actually draw polys with these yet		// img_pos_prev == screen x,y location to our immediate left.		// img_pos_cur == current screen x,y location		// we calculate screen position of our		// current cell based on the difference from the previous cell		// rather than recalculating from absolute coordinates		// What we cache into the $img_buffer contains the raised text coordinates.		$img_pos_prev	= $img_buffer[0][0] = array($box['upper_left']['x'], $box['upper_left']['y']);		$cur_height		= $prev_height = $this->wave_height(0, 0, $subdivision_factor);		$full_x			= $plane_x * $subdivision_factor;		$full_y			= $plane_y * $subdivision_factor;		for ($x = 1; $x <= $full_x; ++$x)		{			$cur_height		= $this->wave_height($x, 0, $subdivision_factor);			$offset			= $cur_height - $prev_height;			$img_pos_cur	= array($img_pos_prev[0] + $dxx, $img_pos_prev[1] + $dxy + $offset);			$img_buffer[0][$x]	= $img_pos_cur;			$img_pos_prev		= $img_pos_cur;			$prev_height		= $cur_height;		}		for ($y = 1; $y <= $full_y; ++$y)		{			// swap buffers			$buffer_cur		= $y & 1;			$buffer_prev	= 1 - $buffer_cur;			$prev_height	= $this->wave_height(0, $y, $subdivision_factor);			$offset			= $prev_height - $this->wave_height(0, $y - 1, $subdivision_factor);			$img_pos_cur	= array($img_buffer[$buffer_prev][0][0] + $dyx, min($img_buffer[$buffer_prev][0][1] + $dyy + $offset, $img_y - 1));			// make sure we don't try to write off the page			$img_pos_prev	= $img_pos_cur;			$img_buffer[$buffer_cur][0]	= $img_pos_cur;			for ($x = 1; $x <= $full_x; ++$x)			{				$cur_height		= $this->wave_height($x, $y, $subdivision_factor) + $this->grid_height($x, $y, 1, $x_grid, $y_grid);				// height is a z-factor, not a y-factor				$offset			= $cur_height - $prev_height;				$img_pos_cur	= array($img_pos_prev[0] + $dxx, $img_pos_prev[1] + $dxy + $offset);				// height is float, index it to an int, get closest color				$color			= $colors[intval($cur_height)];				$img_pos_prev	= $img_pos_cur;				$prev_height	= $cur_height;				$y_index_old = intval(($y - 1) / $subdivision_factor);				$y_index_new = intval($y / $subdivision_factor);				$x_index_old = intval(($x - 1) / $subdivision_factor);				$x_index_new = intval($x / $subdivision_factor);				if (!empty($plane[$y_index_new][$x_index_new]))				{					$img_pos_cur[1]	+= $this->wave_height($x, $y, $subdivision_factor, 1) - 30 - $cur_height;					$color			= $colors[20];				}				$img_pos_cur[1] = min($img_pos_cur[1], $img_y - 1);				$img_buffer[$buffer_cur][$x] = $img_pos_cur;				// Smooth the edges as much as possible by having not more than one low<->high traingle per square				// Otherwise, just				$diag_down	= (empty($plane[$y_index_old][$x_index_old]) == empty($plane[$y_index_new][$x_index_new]));				$diag_up	= (empty($plane[$y_index_old][$x_index_new]) == empty($plane[$y_index_new][$x_index_old]));				// natural switching				$mode = ($x + $y) & 1;				// override if it requires it				if ($diag_down != $diag_up)				{					$mode = $diag_up;				}				if ($mode)				{					//		+-/			  /					// 1	|/		2	 /|					//		/			/-+					$poly1 = array_merge($img_buffer[$buffer_cur][$x - 1], $img_buffer[$buffer_prev][$x - 1], $img_buffer[$buffer_prev][$x]);					$poly2 = array_merge($img_buffer[$buffer_cur][$x - 1], $img_buffer[$buffer_cur][$x], $img_buffer[$buffer_prev][$x]);				}				else				{					//		\			\-+					// 1	|\		2	 \|					//		+-\			  \					$poly1 = array_merge($img_buffer[$buffer_cur][$x - 1], $img_buffer[$buffer_prev][$x - 1], $img_buffer[$buffer_cur][$x]);					$poly2 = array_merge($img_buffer[$buffer_prev][$x - 1], $img_buffer[$buffer_prev][$x], $img_buffer[$buffer_cur][$x]);				}				imagefilledpolygon($img, $poly1, 3, $color);				imagefilledpolygon($img, $poly2, 3, $color);			}		}		// Output image		header('Content-Type: image/png');		header('Cache-control: no-cache, no-store');		//$mtime = explode(' ', microtime());		//$totaltime = $mtime[0] + $mtime[1] - $starttime;		//echo $totaltime . "<br />\n";		//echo memory_get_usage() - $tmp;		imagepng($img);		imagedestroy($img);	}	function wave_height($x, $y, $factor = 1, $tweak = 0.7)	{		// stretch the wave. TODO: pretty it up		$x = $x/5 + 180;		$y = $y/4;		return ((sin($x / (3 * $factor)) + sin($y / (3 * $factor))) * 10 * $tweak);	}	function grid_height($x, $y, $factor = 1, $x_grid, $y_grid)	{		return ((!($x % ($x_grid * $factor)) || !($y % ($y_grid * $factor))) ? 3 : 0);	}	function captcha_bitmaps()	{		return array(			'width'		=> 9,			'height'	=> 13,			'data'		=> array(				'A' => array(					array(0,0,1,1,1,1,0,0,0),					array(0,1,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,1,1,1,1,1,1,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,0,0),				),				'B' => array(					array(1,1,1,1,1,1,0,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,1,0,0),					array(1,1,1,1,1,1,0,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,1,0,0),					array(1,1,1,1,1,1,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'C' => array(					array(0,0,1,1,1,1,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'D' => array(					array(1,1,1,1,1,1,1,0,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,1,0),					array(1,1,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'E' => array(					array(0,0,1,1,1,1,1,1,1),					array(0,1,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,1,1,1,1,1,1,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(0,1,0,0,0,0,0,0,0),					array(0,0,1,1,1,1,1,1,1),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'F' => array(					array(0,0,1,1,1,1,1,1,0),					array(0,1,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,1,1,1,1,1,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'G' => array(					array(0,0,1,1,1,1,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,1,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'H' => array(					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,1,1,1,1,1,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'I' => array(					array(0,1,1,1,1,1,1,1,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,1,1,1,1,1,1,1,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'J' => array(					array(0,0,0,0,0,0,1,1,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,0,1),					array(0,0,1,0,0,0,0,1,0),					array(0,0,0,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'K' => array(					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,1,0,0,0),					array(1,0,0,0,1,0,0,0,0),					array(1,0,0,1,0,0,0,0,0),					array(1,0,1,0,0,0,0,0,0),					array(1,1,0,0,0,0,0,0,0),					array(1,0,1,0,0,0,0,0,0),					array(1,0,0,1,0,0,0,0,0),					array(1,0,0,0,1,0,0,0,0),					array(1,0,0,0,0,1,0,0,0),					array(1,0,0,0,0,0,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'L' => array(					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(0,1,0,0,0,0,0,0,0),					array(0,0,1,1,1,1,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'M' => array(					array(0,1,0,0,0,0,0,1,0),					array(0,1,1,0,0,0,1,1,0),					array(0,1,0,1,0,1,0,1,0),					array(0,1,0,0,1,0,0,1,0),					array(0,1,0,0,0,0,0,1,0),					array(0,1,0,0,0,0,0,1,0),					array(0,1,0,0,0,0,0,1,0),					array(0,1,0,0,0,0,0,1,0),					array(0,1,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'N' => array(					array(1,0,0,0,0,0,0,0,1),					array(1,1,0,0,0,0,0,0,1),					array(1,0,1,0,0,0,0,0,1),					array(1,0,0,1,0,0,0,0,1),					array(1,0,0,0,1,0,0,0,1),					array(1,0,0,0,0,1,0,0,1),					array(1,0,0,0,0,0,1,0,1),					array(1,0,0,0,0,0,0,1,1),					array(1,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'O' => array(					array(0,0,0,1,1,1,0,0,0),					array(0,0,1,0,0,0,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,0,0,0,1,0,0),					array(0,0,0,1,1,1,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'P' => array(					array(1,1,1,1,1,1,0,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,1,0,0),					array(1,1,1,1,1,1,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'Q' => array(					array(0,0,1,1,1,1,0,0,0),					array(0,1,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,1,0,0,1,0),					array(1,0,0,0,0,1,0,1,0),					array(0,1,0,0,0,0,1,0,0),					array(0,0,1,1,1,1,0,1,0),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'R' => array(					array(1,1,1,1,1,1,0,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,1,0,0),					array(1,1,1,1,1,1,0,0,0),					array(1,0,1,0,0,0,0,0,0),					array(1,0,0,1,0,0,0,0,0),					array(1,0,0,0,1,0,0,0,0),					array(1,0,0,0,0,1,0,0,0),					array(1,0,0,0,0,0,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'S' => array(					array(0,0,1,1,1,1,1,1,1),					array(0,1,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(0,1,0,0,0,0,0,0,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,1,0),					array(1,1,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'T' => array(					array(1,1,1,1,1,1,1,1,1),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'U' => array(					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'V' => array(					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,0,0,0,1,0,0),					array(0,0,0,1,0,1,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'W' => array(					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,1,0,0,0,1),					array(1,0,0,1,0,1,0,0,1),					array(1,0,1,0,0,0,1,0,1),					array(1,1,0,0,0,0,0,1,1),					array(1,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'X' => array(					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,0,0,0,1,0,0),					array(0,0,0,1,0,1,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,1,0,1,0,0,0),					array(0,0,1,0,0,0,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'Y' => array(					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,0,0,0,1,0,0),					array(0,0,0,1,0,1,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'Z' => array(					array(1,1,1,1,1,1,1,1,1),					array(1,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,1,0,0),					array(0,0,0,0,0,1,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,1,0,0,0,0,0),					array(0,0,1,0,0,0,0,0,0),					array(0,1,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,1),					array(1,1,1,1,1,1,1,1,1),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'1' => array(					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,1,1,0,0,0,0),					array(0,0,1,0,1,0,0,0,0),					array(0,1,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,1,1,1,1,1,1,1,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'2' => array(					array(0,0,0,1,1,1,0,0,0),					array(0,0,1,0,0,0,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,1,0,0),					array(0,0,0,0,0,1,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,1,0,0,0,0,0),					array(0,0,1,0,0,0,0,0,0),					array(0,1,1,1,1,1,1,1,1),					array(0,0,0,0,0,0,0,0,0),				),				'3' => array(					array(0,0,0,1,1,1,1,0,0),					array(0,0,1,0,0,0,0,1,0),					array(0,1,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,1,1,0,0),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,0,1),					array(0,0,1,0,0,0,0,1,0),					array(0,0,0,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'4' => array(					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,1,1,0),					array(0,0,0,0,0,1,0,1,0),					array(0,0,0,0,1,0,0,1,0),					array(0,0,0,1,0,0,0,1,0),					array(0,0,1,0,0,0,0,1,0),					array(0,1,1,1,1,1,1,1,1),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'5' => array(					array(1,1,1,1,1,1,1,1,1),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(0,1,0,0,0,0,0,0,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'6' => array(					array(0,0,1,1,1,1,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,1,1,1,1,0,0),					array(1,0,1,0,0,0,0,1,0),					array(1,1,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'7' => array(					array(1,1,1,1,1,1,1,1,1),					array(1,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,1,0,0),					array(0,0,0,0,0,1,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'8' => array(					array(0,0,1,1,1,1,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,1,1,1,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'9' => array(					array(0,0,0,1,1,1,1,0,0),					array(0,0,1,0,0,0,0,1,0),					array(0,1,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,1),					array(0,0,1,1,1,1,1,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,0,1),					array(0,0,1,0,0,0,0,1,0),					array(0,0,0,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),			)		);	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_bots{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $table_prefix;		$action = request_var('action', '');		$submit = (isset($_POST['submit'])) ? true : false;		$mark	= request_var('mark', array(0));		$bot_id	= request_var('id', 0);		if (isset($_POST['add']))		{			$action = 'add';		}		$error = array();		$user->add_lang('acp/bots');		$this->tpl_name = 'acp_bots';		$this->page_title = 'ACP_BOTS';		$form_key = 'acp_bots';		add_form_key($form_key);		if ($submit && !check_form_key($form_key))		{			$error[] = $user->lang['FORM_INVALID'];		}		// User wants to do something, how inconsiderate of them!		switch ($action)		{			case 'activate':				if ($bot_id || sizeof($mark))				{					$sql_id = ($bot_id) ? " = $bot_id" : ' IN (' . implode(', ', $mark) . ')';					$sql = 'UPDATE ' . BOTS_TABLE . "						SET bot_active = 1						WHERE bot_id $sql_id";					$db->sql_query($sql);				}				$cache->destroy('_bots');			break;			case 'deactivate':				if ($bot_id || sizeof($mark))				{					$sql_id = ($bot_id) ? " = $bot_id" : ' IN (' . implode(', ', $mark) . ')';					$sql = 'UPDATE ' . BOTS_TABLE . "						SET bot_active = 0						WHERE bot_id $sql_id";					$db->sql_query($sql);				}				$cache->destroy('_bots');			break;			case 'delete':				if ($bot_id || sizeof($mark))				{					if (confirm_box(true))					{						// We need to delete the relevant user, usergroup and bot entries ...						$sql_id = ($bot_id) ? " = $bot_id" : ' IN (' . implode(', ', $mark) . ')';						$sql = 'SELECT bot_name, user_id							FROM ' . BOTS_TABLE . "							WHERE bot_id $sql_id";						$result = $db->sql_query($sql);						$user_id_ary = $bot_name_ary = array();						while ($row = $db->sql_fetchrow($result))						{							$user_id_ary[] = (int) $row['user_id'];							$bot_name_ary[] = $row['bot_name'];						}						$db->sql_freeresult($result);						$db->sql_transaction('begin');						$sql = 'DELETE FROM ' . BOTS_TABLE . "							WHERE bot_id $sql_id";						$db->sql_query($sql);						if (sizeof($user_id_ary))						{							$_tables = array(USERS_TABLE, USER_GROUP_TABLE);							foreach ($_tables as $table)							{								$sql = "DELETE FROM $table									WHERE " . $db->sql_in_set('user_id', $user_id_ary);								$db->sql_query($sql);							}						}						$db->sql_transaction('commit');						$cache->destroy('_bots');						add_log('admin', 'LOG_BOT_DELETE', implode(', ', $bot_name_ary));						trigger_error($user->lang['BOT_DELETED'] . adm_back_link($this->u_action));					}					else					{						confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(							'mark'		=> $mark,							'id'		=> $bot_id,							'mode'		=> $mode,							'action'	=> $action))						);					}				}			break;			case 'edit':			case 'add':				include_once($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$bot_row = array(					'bot_name'		=> utf8_normalize_nfc(request_var('bot_name', '', true)),					'bot_agent'		=> request_var('bot_agent', ''),					'bot_ip'		=> request_var('bot_ip', ''),					'bot_active'	=> request_var('bot_active', true),					'bot_lang'		=> request_var('bot_lang', $config['default_lang']),					'bot_style'		=> request_var('bot_style' , $config['default_style']),				);				if ($submit)				{					if (!$bot_row['bot_agent'] && !$bot_row['bot_ip'])					{						$error[] = $user->lang['ERR_BOT_NO_MATCHES'];					}								if ($bot_row['bot_ip'] && !preg_match('#^[\d\.,:]+$#', $bot_row['bot_ip']))					{						if (!$ip_list = gethostbynamel($bot_row['bot_ip']))						{							$error[] = $user->lang['ERR_BOT_NO_IP'];						}						else						{							$bot_row['bot_ip'] = implode(',', $ip_list);						}					}					$bot_row['bot_ip'] = str_replace(' ', '', $bot_row['bot_ip']);					// Make sure the admin is not adding a bot with an user agent similar to his one					if ($bot_row['bot_agent'] && substr($user->data['session_browser'], 0, 149) === substr($bot_row['bot_agent'], 0, 149))					{						$error[] = $user->lang['ERR_BOT_AGENT_MATCHES_UA'];					}										$bot_name = false;					if ($bot_id)					{						$sql = 'SELECT u.username_clean							FROM ' . BOTS_TABLE . ' b, ' . USERS_TABLE . " u							WHERE b.bot_id = $bot_id								AND u.user_id = b.user_id";						$result = $db->sql_query($sql);						$row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$bot_row)						{							$error[] = $user->lang['NO_BOT'];						}						else						{							$bot_name = $row['username_clean'];						}					}					if (!$this->validate_botname($bot_row['bot_name'], $bot_name))					{						$error[] = $user->lang['BOT_NAME_TAKEN'];					}										if (!sizeof($error))					{						// New bot? Create a new user and group entry						if ($action == 'add')						{							$sql = 'SELECT group_id, group_colour								FROM ' . GROUPS_TABLE . "								WHERE group_name = 'BOTS'									AND group_type = " . GROUP_SPECIAL;							$result = $db->sql_query($sql);							$group_row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							if (!$group_row)							{								trigger_error($user->lang['NO_BOT_GROUP'] . adm_back_link($this->u_action . "&amp;id=$bot_id&amp;action=$action"), E_USER_WARNING);							}													$user_id = user_add(array(								'user_type'				=> (int) USER_IGNORE,								'group_id'				=> (int) $group_row['group_id'],								'username'				=> (string) $bot_row['bot_name'],								'user_regdate'			=> time(),								'user_password'			=> '',								'user_colour'			=> (string) $group_row['group_colour'],								'user_email'			=> '',								'user_lang'				=> (string) $bot_row['bot_lang'],								'user_style'			=> (int) $bot_row['bot_style'],								'user_allow_massemail'	=> 0,							));								$sql = 'INSERT INTO ' . BOTS_TABLE . ' ' . $db->sql_build_array('INSERT', array(								'user_id'		=> (int) $user_id,								'bot_name'		=> (string) $bot_row['bot_name'],								'bot_active'	=> (int) $bot_row['bot_active'],								'bot_agent'		=> (string) $bot_row['bot_agent'],								'bot_ip'		=> (string) $bot_row['bot_ip'])							);							$db->sql_query($sql);								$log = 'ADDED';						}						else if ($bot_id)						{							$sql = 'SELECT user_id, bot_name								FROM ' . BOTS_TABLE . "								WHERE bot_id = $bot_id";							$result = $db->sql_query($sql);							$row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							if (!$row)							{								trigger_error($user->lang['NO_BOT'] . adm_back_link($this->u_action . "&amp;id=$bot_id&amp;action=$action"), E_USER_WARNING);							}							$sql_ary = array(								'user_style'	=> (int) $bot_row['bot_style'],								'user_lang'		=> (string) $bot_row['bot_lang'],							);							if ($bot_row['bot_name'] !== $row['bot_name'])							{								$sql_ary['username'] = (string) $bot_row['bot_name'];								$sql_ary['username_clean'] = (string) utf8_clean_string($bot_row['bot_name']);							}							$sql = 'UPDATE ' . USERS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . " WHERE user_id = {$row['user_id']}";							$db->sql_query($sql);							$sql = 'UPDATE ' . BOTS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', array(								'bot_name'		=> (string) $bot_row['bot_name'],								'bot_active'	=> (int) $bot_row['bot_active'],								'bot_agent'		=> (string) $bot_row['bot_agent'],								'bot_ip'		=> (string) $bot_row['bot_ip'])							) . " WHERE bot_id = $bot_id";							$db->sql_query($sql);							// Updated username?							if ($bot_row['bot_name'] !== $row['bot_name'])							{								user_update_name($row['bot_name'], $bot_row['bot_name']);							}							$log = 'UPDATED';						}												$cache->destroy('_bots');												add_log('admin', 'LOG_BOT_' . $log, $bot_row['bot_name']);						trigger_error($user->lang['BOT_' . $log] . adm_back_link($this->u_action));										}				}				else if ($bot_id)				{					$sql = 'SELECT b.*, u.user_lang, u.user_style						FROM ' . BOTS_TABLE . ' b, ' . USERS_TABLE . " u						WHERE b.bot_id = $bot_id							AND u.user_id = b.user_id";					$result = $db->sql_query($sql);					$bot_row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if (!$bot_row)					{						trigger_error($user->lang['NO_BOT'] . adm_back_link($this->u_action . "&amp;id=$bot_id&amp;action=$action"), E_USER_WARNING);					}					$bot_row['bot_lang'] = $bot_row['user_lang'];					$bot_row['bot_style'] = $bot_row['user_style'];					unset($bot_row['user_lang'], $bot_row['user_style']);				}				$s_active_options = '';				$_options = array('0' => 'NO', '1' => 'YES');				foreach ($_options as $value => $lang)				{					$selected = ($bot_row['bot_active'] == $value) ? ' selected="selected"' : '';					$s_active_options .= '<option value="' . $value . '"' . $selected . '>' . $user->lang[$lang] . '</option>';				}				$style_select = style_select($bot_row['bot_style'], true);				$lang_select = language_select($bot_row['bot_lang']);				$l_title = ($action == 'edit') ? 'EDIT' : 'ADD';				$template->assign_vars(array(					'L_TITLE'		=> $user->lang['BOT_' . $l_title],					'U_ACTION'		=> $this->u_action . "&amp;id=$bot_id&amp;action=$action",					'U_BACK'		=> $this->u_action,					'ERROR_MSG'		=> (sizeof($error)) ? implode('<br />', $error) : '',										'BOT_NAME'		=> $bot_row['bot_name'],					'BOT_IP'		=> $bot_row['bot_ip'],					'BOT_AGENT'		=> $bot_row['bot_agent'],										'S_EDIT_BOT'		=> true,					'S_ACTIVE_OPTIONS'	=> $s_active_options,					'S_STYLE_OPTIONS'	=> $style_select,					'S_LANG_OPTIONS'	=> $lang_select,					'S_ERROR'			=> (sizeof($error)) ? true : false,					)				);				return;			break;		}		$s_options = '';		$_options = array('activate' => 'BOT_ACTIVATE', 'deactivate' => 'BOT_DEACTIVATE', 'delete' => 'DELETE');		foreach ($_options as $value => $lang)		{			$s_options .= '<option value="' . $value . '">' . $user->lang[$lang] . '</option>';		}		$template->assign_vars(array(			'U_ACTION'		=> $this->u_action,			'S_BOT_OPTIONS'	=> $s_options)		);		$sql = 'SELECT b.bot_id, b.bot_name, b.bot_active, u.user_lastvisit			FROM ' . BOTS_TABLE . ' b, ' . USERS_TABLE . ' u			WHERE u.user_id = b.user_id			ORDER BY u.user_lastvisit DESC, b.bot_name ASC';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$active_lang = (!$row['bot_active']) ? 'BOT_ACTIVATE' : 'BOT_DEACTIVATE';			$active_value = (!$row['bot_active']) ? 'activate' : 'deactivate';			$template->assign_block_vars('bots', array(				'BOT_NAME'		=> $row['bot_name'],				'BOT_ID'		=> $row['bot_id'],				'LAST_VISIT'	=> ($row['user_lastvisit']) ? $user->format_date($row['user_lastvisit']) : $user->lang['BOT_NEVER'],				'U_ACTIVATE_DEACTIVATE'	=> $this->u_action . "&amp;id={$row['bot_id']}&amp;action=$active_value",				'L_ACTIVATE_DEACTIVATE'	=> $user->lang[$active_lang],				'U_EDIT'				=> $this->u_action . "&amp;id={$row['bot_id']}&amp;action=edit",				'U_DELETE'				=> $this->u_action . "&amp;id={$row['bot_id']}&amp;action=delete")			);		}		$db->sql_freeresult($result);	}		/**	* Validate bot name against username table	*/	function validate_botname($newname, $oldname = false)	{		global $db;		if ($oldname && utf8_clean_string($newname) === $oldname)		{			return true;		}		// Admins might want to use names otherwise forbidden, thus we only check for duplicates.		$sql = 'SELECT username			FROM ' . USERS_TABLE . "			WHERE username_clean = '" . $db->sql_escape(utf8_clean_string($newname)) . "'";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);				return ($row) ? false : true;	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** This class collects data which is used to create some usage statistics.** The collected data is - after authorization of the administrator - submitted* to a central server. For privacy reasons we try to collect only data which aren't private* or don't give any information which might help to identify the user.** @author		Johannes Schlueter <johannes@php.net>* @copyright	(c) 2007-2008 Johannes Schlueter*/class phpbb_questionnaire_data_collector{	var $providers;	var $data = null;	var $install_id = '';	/**	* Constructor.	*	* @param	string	*/	function phpbb_questionnaire_data_collector($install_id)	{		$this->install_id = $install_id;		$this->providers = array();	}	function add_data_provider(&$provider)	{		$this->providers[] = &$provider;	}	/**	* Get data as an array.	*	* @return	array	All Data	*/	function get_data_raw()	{		if (!$this->data)		{			$this->collect();		}		return $this->data;	}	function get_data_for_form()	{		return base64_encode(serialize($this->get_data_raw()));	}	/**	* Collect info into the data property.	*	* @return	void	*/	function collect()	{		foreach (array_keys($this->providers) as $key)		{			$provider = &$this->providers[$key];			$this->data[$provider->get_identifier()] = $provider->get_data();		}		$this->data['install_id'] = $this->install_id;	}}/** interface: get_indentifier(), get_data() *//*** Questionnaire PHP data provider* @package phpBB3*/class phpbb_questionnaire_php_data_provider{	function get_identifier()	{		return 'PHP';	}	/**	* Get data about the PHP runtime setup.	*	* @return	array	*/	function get_data()	{		return array(			'version'						=> PHP_VERSION,			'sapi'							=> PHP_SAPI,			'int_size'						=> defined('PHP_INT_SIZE') ? PHP_INT_SIZE : '',			'safe_mode'						=> (int) @ini_get('safe_mode'),			'open_basedir'					=> (int) @ini_get('open_basedir'),			'memory_limit'					=> @ini_get('memory_limit'),			'allow_url_fopen'				=> (int) @ini_get('allow_url_fopen'),			'allow_url_include'				=> (int) @ini_get('allow_url_include'),			'file_uploads'					=> (int) @ini_get('file_uploads'),			'upload_max_filesize'			=> @ini_get('upload_max_filesize'),			'post_max_size'					=> @ini_get('post_max_size'),			'disable_functions'				=> @ini_get('disable_functions'),			'disable_classes'				=> @ini_get('disable_classes'),			'enable_dl'						=> (int) @ini_get('enable_dl'),			'magic_quotes_gpc'				=> (int) @ini_get('magic_quotes_gpc'),			'register_globals'				=> (int) @ini_get('register_globals'),			'filter.default'				=> @ini_get('filter.default'),			'zend.ze1_compatibility_mode'	=> (int) @ini_get('zend.ze1_compatibility_mode'),			'unicode.semantics'				=> (int) @ini_get('unicode.semantics'),			'zend_thread_safty'				=> (int) function_exists('zend_thread_id'),			'extensions'					=> get_loaded_extensions(),		);	}}/*** Questionnaire System data provider* @package phpBB3*/class phpbb_questionnaire_system_data_provider{	function get_identifier()	{		return 'System';	}	/**	* Get data about the general system information, like OS or IP (shortened).	*	* @return	array	*/	function get_data()	{		// Start discovering the IPV4 server address, if available		$server_address = '0.0.0.0';		if (!empty($_SERVER['SERVER_ADDR']))		{			$server_address = $_SERVER['SERVER_ADDR'];		}		// Running on IIS?		if (!empty($_SERVER['LOCAL_ADDR']))		{			$server_address = $_SERVER['LOCAL_ADDR'];		}		return array(			'os'	=> PHP_OS,			'httpd'	=> $_SERVER['SERVER_SOFTWARE'],			// we don't want the real IP address (for privacy policy reasons) but only			// a network address to see whether your installation is running on a private or public network.			'private_ip'	=> $this->is_private_ip($server_address),			'ipv6'			=> strpos($server_address, ':') !== false,		);	}	/**	* Checks whether the given IP is in a private network.	*	* @param	string	$ip	IP in v4 dot-decimal or v6 hex format	* @return	bool		true if the IP is from a private network, else false	*/	function is_private_ip($ip)	{		// IPv4		if (strpos($ip, ':') === false)		{			$ip_address_ary = explode('.', $ip);			// build ip			if (!isset($ip_address_ary[0]) || !isset($ip_address_ary[1]))			{				$ip_address_ary = explode('.', '0.0.0.0');			}			// IANA reserved addresses for private networks (RFC 1918) are:			// - 10.0.0.0/8			// - 172.16.0.0/12			// - 192.168.0.0/16			if ($ip_address_ary[0] == '10' ||				($ip_address_ary[0] == '172' && intval($ip_address_ary[1]) > 15 && intval($ip_address_ary[1]) < 32) ||				($ip_address_ary[0] == '192' && $ip_address_ary[1] == '168') ||				($ip_address_ary[0] == '192' && $ip_address_ary[1] == '168'))			{				return true;			}		}		// IPv6		else		{			// unique local unicast			$prefix = substr($ip, 0, 2);			if ($prefix == 'fc' || $prefix == 'fd')			{				return true;			}		}		return false;	}}/*** Questionnaire phpBB data provider* @package phpBB3*/class phpbb_questionnaire_phpbb_data_provider{	var $config;	var $unique_id;	/**	* Constructor.	*	* @param	array	$config	*/	function phpbb_questionnaire_phpbb_data_provider($config)	{		// generate a unique id if necessary		if (empty($config['questionnaire_unique_id']))		{			$this->unique_id = unique_id();			set_config('questionnaire_unique_id', $this->unique_id);		}		else		{			$this->unique_id = $config['questionnaire_unique_id'];		}		$this->config = $config;	}	/**	* Returns a string identifier for this data provider	*	* @return	string	"phpBB"	*/	function get_identifier()	{		return 'phpBB';	}	/**	* Get data about this phpBB installation.	*	* @return	array	Relevant anonymous config options	*/	function get_data()	{		global $phpbb_root_path, $phpEx;		include("{$phpbb_root_path}config.$phpEx");		unset($dbhost, $dbport, $dbname, $dbuser, $dbpasswd); // Just a precaution		// Only send certain config vars		$config_vars = array(			'active_sessions' => true,			'allow_attachments' => true,			'allow_autologin' => true,			'allow_avatar' => true,			'allow_avatar_local' => true,			'allow_avatar_remote' => true,			'allow_avatar_upload' => true,			'allow_bbcode' => true,			'allow_birthdays' => true,			'allow_bookmarks' => true,			'allow_emailreuse' => true,			'allow_forum_notify' => true,			'allow_mass_pm' => true,			'allow_name_chars' => true,			'allow_namechange' => true,			'allow_nocensors' => true,			'allow_pm_attach' => true,			'allow_pm_report' => true,			'allow_post_flash' => true,			'allow_post_links' => true,			'allow_privmsg' => true,			'allow_quick_reply' => true,			'allow_sig' => true,			'allow_sig_bbcode' => true,			'allow_sig_flash' => true,			'allow_sig_img' => true,			'allow_sig_links' => true,			'allow_sig_pm' => true,			'allow_sig_smilies' => true,			'allow_smilies' => true,			'allow_topic_notify' => true,			'attachment_quota' => true,			'auth_bbcode_pm' => true,			'auth_flash_pm' => true,			'auth_img_pm' => true,			'auth_method' => true,			'auth_smilies_pm' => true,			'avatar_filesize' => true,			'avatar_max_height' => true,			'avatar_max_width' => true,			'avatar_min_height' => true,			'avatar_min_width' => true,			'board_dst' => true,			'board_email_form' => true,			'board_hide_emails' => true,			'board_timezone' => true,			'browser_check' => true,			'bump_interval' => true,			'bump_type' => true,			'cache_gc' => true,			'captcha_plugin' => true,			'captcha_gd' => true,			'captcha_gd_foreground_noise' => true,			'captcha_gd_x_grid' => true,			'captcha_gd_y_grid' => true,			'captcha_gd_wave' => true,			'captcha_gd_3d_noise' => true,			'captcha_gd_fonts' => true,			'confirm_refresh' => true,			'check_attachment_content' => true,			'check_dnsbl' => true,			'chg_passforce' => true,			'cookie_secure' => true,			'coppa_enable' => true,			'database_gc' => true,			'dbms_version' => true,			'default_dateformat' => true,			'default_lang' => true,			'display_last_edited' => true,			'display_order' => true,			'edit_time' => true,			'email_check_mx' => true,			'email_enable' => true,			'email_function_name' => true,			'email_package_size' => true,			'enable_confirm' => true,			'enable_pm_icons' => true,			'enable_post_confirm' => true,			'feed_enable' => true,			'feed_http_auth' => true,			'feed_limit_post' => true,			'feed_limit_topic' => true,			'feed_overall' => true,			'feed_overall_forums' => true,			'feed_forum' => true,			'feed_topic' => true,			'feed_topics_new' => true,			'feed_topics_active' => true,			'feed_item_statistics' => true,			'flood_interval' => true,			'force_server_vars' => true,			'form_token_lifetime' => true,			'form_token_mintime' => true,			'form_token_sid_guests' => true,			'forward_pm' => true,			'forwarded_for_check' => true,			'full_folder_action' => true,			'fulltext_native_common_thres' => true,			'fulltext_native_load_upd' => true,			'fulltext_native_max_chars' => true,			'fulltext_native_min_chars' => true,			'gzip_compress' => true,			'hot_threshold' => true,			'img_create_thumbnail' => true,			'img_display_inlined' => true,			'img_imagick' => true,			'img_link_height' => true,			'img_link_width' => true,			'img_max_height' => true,			'img_max_thumb_width' => true,			'img_max_width' => true,			'img_min_thumb_filesize' => true,			'ip_check' => true,			'jab_enable' => true,			'jab_package_size' => true,			'jab_use_ssl' => true,			'limit_load' => true,			'limit_search_load' => true,			'load_anon_lastread' => true,			'load_birthdays' => true,			'load_cpf_memberlist' => true,			'load_cpf_viewprofile' => true,			'load_cpf_viewtopic' => true,			'load_db_lastread' => true,			'load_db_track' => true,			'load_jumpbox' => true,			'load_moderators' => true,			'load_online' => true,			'load_online_guests' => true,			'load_online_time' => true,			'load_onlinetrack' => true,			'load_search' => true,			'load_tplcompile' => true,			'load_user_activity' => true,			'max_attachments' => true,			'max_attachments_pm' => true,			'max_autologin_time' => true,			'max_filesize' => true,			'max_filesize_pm' => true,			'max_login_attempts' => true,			'max_name_chars' => true,			'max_num_search_keywords' => true,			'max_pass_chars' => true,			'max_poll_options' => true,			'max_post_chars' => true,			'max_post_font_size' => true,			'max_post_img_height' => true,			'max_post_img_width' => true,			'max_post_smilies' => true,			'max_post_urls' => true,			'max_quote_depth' => true,			'max_reg_attempts' => true,			'max_sig_chars' => true,			'max_sig_font_size' => true,			'max_sig_img_height' => true,			'max_sig_img_width' => true,			'max_sig_smilies' => true,			'max_sig_urls' => true,			'min_name_chars' => true,			'min_pass_chars' => true,			'min_post_chars' => true,			'min_search_author_chars' => true,			'mime_triggers' => true,			'new_member_post_limit' => true,			'new_member_group_default' => true,			'override_user_style' => true,			'pass_complex' => true,			'pm_edit_time' => true,			'pm_max_boxes' => true,			'pm_max_msgs' => true,			'pm_max_recipients' => true,			'posts_per_page' => true,			'print_pm' => true,			'queue_interval' => true,			'require_activation' => true,			'referer_validation' => true,			'search_block_size' => true,			'search_gc' => true,			'search_interval' => true,			'search_anonymous_interval' => true,			'search_type' => true,			'search_store_results' => true,			'secure_allow_deny' => true,			'secure_allow_empty_referer' => true,			'secure_downloads' => true,			'session_gc' => true,			'session_length' => true,			'smtp_auth_method' => true,			'smtp_delivery' => true,			'topics_per_page' => true,			'tpl_allow_php' => true,			'version' => true,			'warnings_expire_days' => true,			'warnings_gc' => true,			'num_files' => true,			'num_posts' => true,			'num_topics' => true,			'num_users' => true,			'record_online_users' => true,		);		$result = array();		foreach ($config_vars as $name => $void)		{			if (isset($this->config[$name]))			{				$result['config_' . $name] = $this->config[$name];			}		}		global $db;		$result['dbms'] = $dbms;		$result['acm_type'] = $acm_type;		$result['load_extensions'] = $load_extensions;		$result['user_agent'] = 'Unknown';		$result['dbms_version'] = $db->sql_server_info(true);		// Try to get user agent vendor and version		$match = array();		$user_agent = (!empty($_SERVER['HTTP_USER_AGENT'])) ? (string) $_SERVER['HTTP_USER_AGENT'] : '';		$agents = array('firefox', 'msie', 'opera', 'chrome', 'safari', 'mozilla', 'seamonkey', 'konqueror', 'netscape', 'gecko', 'navigator', 'mosaic', 'lynx', 'amaya', 'omniweb', 'avant', 'camino', 'flock', 'aol');		// We check here 1 by 1 because some strings occur after others (for example Mozilla [...] Firefox/)		foreach ($agents as $agent)		{			if (preg_match('#(' . $agent . ')[/ ]?([0-9.]*)#i', $user_agent, $match))			{				$result['user_agent'] = $match[1] . ' ' . $match[2];				break;			}		}		return $result;	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_captcha_info{	function module()	{		return array(			'filename'	=> 'acp_captcha',			'title'		=> 'ACP_CAPTCHA',			'version'	=> '1.0.0',			'modes'		=> array(				'visual'		=> array('title' => 'ACP_VC_SETTINGS', 'auth' => 'acl_a_board', 'cat' => array('ACP_BOARD_CONFIGURATION')),				'img'			=> array('title' => 'ACP_VC_CAPTCHA_DISPLAY', 'auth' => 'acl_a_board', 'cat' => array('ACP_BOARD_CONFIGURATION'), 'display' => false)			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php return array(''=>'');
