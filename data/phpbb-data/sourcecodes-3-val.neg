<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_profile{	var $u_action;	var $edit_lang_id;	var $lang_defs;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $table_prefix;		include($phpbb_root_path . 'includes/functions_posting.' . $phpEx);		include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		include($phpbb_root_path . 'includes/functions_profile_fields.' . $phpEx);		$user->add_lang(array('ucp', 'acp/profile'));		$this->tpl_name = 'acp_profile';		$this->page_title = 'ACP_CUSTOM_PROFILE_FIELDS';		$action = (isset($_POST['create'])) ? 'create' : request_var('action', '');		$error = array();		$s_hidden_fields = '';		// Define some default values for each field type		$default_values = array(			FIELD_STRING	=> array('field_length' => 10, 'field_minlen' => 0, 'field_maxlen' => 20, 'field_validation' => '.*', 'field_novalue' => '', 'field_default_value' => ''),			FIELD_TEXT		=> array('field_length' => '5|80', 'field_minlen' => 0, 'field_maxlen' => 1000, 'field_validation' => '.*', 'field_novalue' => '', 'field_default_value' => ''),			FIELD_INT		=> array('field_length' => 5, 'field_minlen' => 0, 'field_maxlen' => 100, 'field_validation' => '', 'field_novalue' => 0, 'field_default_value' => 0),			FIELD_DATE		=> array('field_length' => 10, 'field_minlen' => 10, 'field_maxlen' => 10, 'field_validation' => '', 'field_novalue' => ' 0- 0-   0', 'field_default_value' => ' 0- 0-   0'),			FIELD_BOOL		=> array('field_length' => 1, 'field_minlen' => 0, 'field_maxlen' => 0, 'field_validation' => '', 'field_novalue' => 0, 'field_default_value' => 0),			FIELD_DROPDOWN	=> array('field_length' => 0, 'field_minlen' => 0, 'field_maxlen' => 5, 'field_validation' => '', 'field_novalue' => 0, 'field_default_value' => 0),		);		$cp = new custom_profile_admin();		// Build Language array		// Based on this, we decide which elements need to be edited later and which language items are missing		$this->lang_defs = array();		$sql = 'SELECT lang_id, lang_iso			FROM ' . LANG_TABLE . '			ORDER BY lang_english_name';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			// Make some arrays with all available languages			$this->lang_defs['id'][$row['lang_id']] = $row['lang_iso'];			$this->lang_defs['iso'][$row['lang_iso']] = $row['lang_id'];		}		$db->sql_freeresult($result);		$sql = 'SELECT field_id, lang_id			FROM ' . PROFILE_LANG_TABLE . '			ORDER BY lang_id';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			// Which languages are available for each item			$this->lang_defs['entry'][$row['field_id']][] = $row['lang_id'];		}		$db->sql_freeresult($result);		// Have some fields been defined?		if (isset($this->lang_defs['entry']))		{			foreach ($this->lang_defs['entry'] as $field_id => $field_ary)			{				// Fill an array with the languages that are missing for each field				$this->lang_defs['diff'][$field_id] = array_diff(array_values($this->lang_defs['iso']), $field_ary);			}		}		switch ($action)		{			case 'delete':				$field_id = request_var('field_id', 0);				if (!$field_id)				{					trigger_error($user->lang['NO_FIELD_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (confirm_box(true))				{					$sql = 'SELECT field_ident						FROM ' . PROFILE_FIELDS_TABLE . "						WHERE field_id = $field_id";					$result = $db->sql_query($sql);					$field_ident = (string) $db->sql_fetchfield('field_ident');					$db->sql_freeresult($result);					$db->sql_transaction('begin');					$db->sql_query('DELETE FROM ' . PROFILE_FIELDS_TABLE . " WHERE field_id = $field_id");					$db->sql_query('DELETE FROM ' . PROFILE_FIELDS_LANG_TABLE . " WHERE field_id = $field_id");					$db->sql_query('DELETE FROM ' . PROFILE_LANG_TABLE . " WHERE field_id = $field_id");					switch ($db->sql_layer)					{						case 'sqlite':							$sql = "SELECT sql								FROM sqlite_master								WHERE type = 'table'									AND name = '" . PROFILE_FIELDS_DATA_TABLE . "'								ORDER BY type DESC, name;";							$result = $db->sql_query($sql);							$row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							// Create a temp table and populate it, destroy the existing one							$db->sql_query(preg_replace('#CREATE\s+TABLE\s+"?' . PROFILE_FIELDS_DATA_TABLE . '"?#i', 'CREATE TEMPORARY TABLE ' . PROFILE_FIELDS_DATA_TABLE . '_temp', $row['sql']));							$db->sql_query('INSERT INTO ' . PROFILE_FIELDS_DATA_TABLE . '_temp SELECT * FROM ' . PROFILE_FIELDS_DATA_TABLE);							$db->sql_query('DROP TABLE ' . PROFILE_FIELDS_DATA_TABLE);							preg_match('#\((.*)\)#s', $row['sql'], $matches);							$new_table_cols = trim($matches[1]);							$old_table_cols = preg_split('/,(?=[\\sa-z])/im', $new_table_cols);							$column_list = array();							foreach ($old_table_cols as $declaration)							{								$entities = preg_split('#\s+#', trim($declaration));								if ($entities[0] == 'PRIMARY')								{									continue;								}								if ($entities[0] !== 'pf_' . $field_ident)								{									$column_list[] = $entities[0];								}							}							$columns = implode(',', $column_list);							$new_table_cols = preg_replace('/' . 'pf_' . $field_ident . '[^,]+,/', '', $new_table_cols);							// create a new table and fill it up. destroy the temp one							$db->sql_query('CREATE TABLE ' . PROFILE_FIELDS_DATA_TABLE . ' (' . $new_table_cols . ');');							$db->sql_query('INSERT INTO ' . PROFILE_FIELDS_DATA_TABLE . ' (' . $columns . ') SELECT ' . $columns . ' FROM ' . PROFILE_FIELDS_DATA_TABLE . '_temp;');							$db->sql_query('DROP TABLE ' . PROFILE_FIELDS_DATA_TABLE . '_temp');						break;						default:							$db->sql_query('ALTER TABLE ' . PROFILE_FIELDS_DATA_TABLE . " DROP COLUMN pf_$field_ident");					}					$order = 0;					$sql = 'SELECT *						FROM ' . PROFILE_FIELDS_TABLE . '						ORDER BY field_order';					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$order++;						if ($row['field_order'] != $order)						{							$sql = 'UPDATE ' . PROFILE_FIELDS_TABLE . "								SET field_order = $order								WHERE field_id = {$row['field_id']}";							$db->sql_query($sql);						}					}					$db->sql_freeresult($result);					$db->sql_transaction('commit');					add_log('admin', 'LOG_PROFILE_FIELD_REMOVED', $field_ident);					trigger_error($user->lang['REMOVED_PROFILE_FIELD'] . adm_back_link($this->u_action));				}				else				{					confirm_box(false, 'DELETE_PROFILE_FIELD', build_hidden_fields(array(						'i'			=> $id,						'mode'		=> $mode,						'action'	=> $action,						'field_id'	=> $field_id,					)));				}			break;			case 'activate':				$field_id = request_var('field_id', 0);				if (!$field_id)				{					trigger_error($user->lang['NO_FIELD_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT lang_id					FROM ' . LANG_TABLE . "					WHERE lang_iso = '" . $db->sql_escape($config['default_lang']) . "'";				$result = $db->sql_query($sql);				$default_lang_id = (int) $db->sql_fetchfield('lang_id');				$db->sql_freeresult($result);				if (!in_array($default_lang_id, $this->lang_defs['entry'][$field_id]))				{					trigger_error($user->lang['DEFAULT_LANGUAGE_NOT_FILLED'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'UPDATE ' . PROFILE_FIELDS_TABLE . "					SET field_active = 1					WHERE field_id = $field_id";				$db->sql_query($sql);				$sql = 'SELECT field_ident					FROM ' . PROFILE_FIELDS_TABLE . "					WHERE field_id = $field_id";				$result = $db->sql_query($sql);				$field_ident = (string) $db->sql_fetchfield('field_ident');				$db->sql_freeresult($result);				add_log('admin', 'LOG_PROFILE_FIELD_ACTIVATE', $field_ident);				trigger_error($user->lang['PROFILE_FIELD_ACTIVATED'] . adm_back_link($this->u_action));			break;			case 'deactivate':				$field_id = request_var('field_id', 0);				if (!$field_id)				{					trigger_error($user->lang['NO_FIELD_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'UPDATE ' . PROFILE_FIELDS_TABLE . "					SET field_active = 0					WHERE field_id = $field_id";				$db->sql_query($sql);				$sql = 'SELECT field_ident					FROM ' . PROFILE_FIELDS_TABLE . "					WHERE field_id = $field_id";				$result = $db->sql_query($sql);				$field_ident = (string) $db->sql_fetchfield('field_ident');				$db->sql_freeresult($result);				add_log('admin', 'LOG_PROFILE_FIELD_DEACTIVATE', $field_ident);				trigger_error($user->lang['PROFILE_FIELD_DEACTIVATED'] . adm_back_link($this->u_action));			break;			case 'move_up':			case 'move_down':				$field_order = request_var('order', 0);				$order_total = $field_order * 2 + (($action == 'move_up') ? -1 : 1);				$sql = 'UPDATE ' . PROFILE_FIELDS_TABLE . "					SET field_order = $order_total - field_order					WHERE field_order IN ($field_order, " . (($action == 'move_up') ? $field_order - 1 : $field_order + 1) . ')';				$db->sql_query($sql);			break;			case 'create':			case 'edit':				$field_id = request_var('field_id', 0);				$step = request_var('step', 1);				$submit = (isset($_REQUEST['next']) || isset($_REQUEST['prev'])) ? true : false;				$save = (isset($_REQUEST['save'])) ? true : false;				// The language id of default language				$this->edit_lang_id = $this->lang_defs['iso'][$config['default_lang']];				// We are editing... we need to grab basic things				if ($action == 'edit')				{					if (!$field_id)					{						trigger_error($user->lang['NO_FIELD_ID'] . adm_back_link($this->u_action), E_USER_WARNING);					}					$sql = 'SELECT l.*, f.*						FROM ' . PROFILE_LANG_TABLE . ' l, ' . PROFILE_FIELDS_TABLE . ' f						WHERE l.lang_id = ' . $this->edit_lang_id . "							AND f.field_id = $field_id							AND l.field_id = f.field_id";					$result = $db->sql_query($sql);					$field_row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if (!$field_row)					{						// Some admin changed the default language?						$sql = 'SELECT l.*, f.*							FROM ' . PROFILE_LANG_TABLE . ' l, ' . PROFILE_FIELDS_TABLE . ' f							WHERE l.lang_id <> ' . $this->edit_lang_id . "							AND f.field_id = $field_id							AND l.field_id = f.field_id";						$result = $db->sql_query($sql);						$field_row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$field_row)						{							trigger_error($user->lang['FIELD_NOT_FOUND'] . adm_back_link($this->u_action), E_USER_WARNING);						}						$this->edit_lang_id = $field_row['lang_id'];					}					$field_type = $field_row['field_type'];					// Get language entries					$sql = 'SELECT *						FROM ' . PROFILE_FIELDS_LANG_TABLE . '						WHERE lang_id = ' . $this->edit_lang_id . "							AND field_id = $field_id						ORDER BY option_id ASC";					$result = $db->sql_query($sql);					$lang_options = array();					while ($row = $db->sql_fetchrow($result))					{						$lang_options[$row['option_id']] = $row['lang_value'];					}					$db->sql_freeresult($result);					$s_hidden_fields = '<input type="hidden" name="field_id" value="' . $field_id . '" />';				}				else				{					// We are adding a new field, define basic params					$lang_options = $field_row = array();					$field_type = request_var('field_type', 0);					if (!$field_type)					{						trigger_error($user->lang['NO_FIELD_TYPE'] . adm_back_link($this->u_action), E_USER_WARNING);					}					$field_row = array_merge($default_values[$field_type], array(						'field_ident'		=> str_replace(' ', '_', utf8_clean_string(request_var('field_ident', '', true))),						'field_required'	=> 0,						'field_hide'		=> 0,						'field_show_profile'=> 0,						'field_no_view'		=> 0,						'field_show_on_reg'	=> 0,						'field_show_on_vt'	=> 0,						'lang_name'			=> utf8_normalize_nfc(request_var('field_ident', '', true)),						'lang_explain'		=> '',						'lang_default_value'=> '')					);					$s_hidden_fields = '<input type="hidden" name="field_type" value="' . $field_type . '" />';				}				// $exclude contains the data we gather in each step				$exclude = array(					1	=> array('field_ident', 'lang_name', 'lang_explain', 'field_option_none', 'field_show_on_reg', 'field_show_on_vt', 'field_required', 'field_hide', 'field_show_profile', 'field_no_view'),					2	=> array('field_length', 'field_maxlen', 'field_minlen', 'field_validation', 'field_novalue', 'field_default_value'),					3	=> array('l_lang_name', 'l_lang_explain', 'l_lang_default_value', 'l_lang_options')				);				// Text-based fields require the lang_default_value to be excluded				if ($field_type == FIELD_STRING || $field_type == FIELD_TEXT)				{					$exclude[1][] = 'lang_default_value';				}				// option-specific fields require lang_options to be excluded				if ($field_type == FIELD_BOOL || $field_type == FIELD_DROPDOWN)				{					$exclude[1][] = 'lang_options';				}				$cp->vars['field_ident']		= ($action == 'create' && $step == 1) ? utf8_clean_string(request_var('field_ident', $field_row['field_ident'], true)) : request_var('field_ident', $field_row['field_ident']);				$cp->vars['lang_name']			= utf8_normalize_nfc(request_var('lang_name', $field_row['lang_name'], true));				$cp->vars['lang_explain']		= utf8_normalize_nfc(request_var('lang_explain', $field_row['lang_explain'], true));				$cp->vars['lang_default_value']	= utf8_normalize_nfc(request_var('lang_default_value', $field_row['lang_default_value'], true));				// Visibility Options...				$visibility_ary = array(					'field_required',					'field_show_on_reg',					'field_show_on_vt',					'field_show_profile',					'field_hide',				);				foreach ($visibility_ary as $val)				{					$cp->vars[$val] = ($submit || $save) ? request_var($val, 0) : $field_row[$val];				}				$cp->vars['field_no_view'] = request_var('field_no_view', (int) $field_row['field_no_view']);				// A boolean field expects an array as the lang options				if ($field_type == FIELD_BOOL)				{					$options = utf8_normalize_nfc(request_var('lang_options', array(''), true));				}				else				{					$options = utf8_normalize_nfc(request_var('lang_options', '', true));				}				// If the user has submitted a form with options (i.e. dropdown field)				if ($options)				{					$exploded_options = (is_array($options)) ? $options : explode("\n", $options);					if (sizeof($exploded_options) == sizeof($lang_options) || $action == 'create')					{						// The number of options in the field is equal to the number of options already in the database						// Or we are creating a new dropdown list.						$cp->vars['lang_options'] = $exploded_options;					}					else if ($action == 'edit')					{						// Changing the number of options? (We remove and re-create the option fields)						$cp->vars['lang_options'] = $exploded_options;					}				}				else				{					$cp->vars['lang_options'] = $lang_options;				}				// step 2				foreach ($exclude[2] as $key)				{					$var = utf8_normalize_nfc(request_var($key, $field_row[$key], true));					// Manipulate the intended variables a little bit if needed					if ($field_type == FIELD_DROPDOWN && $key == 'field_maxlen')					{						// Get the number of options if this key is 'field_maxlen'						$var = sizeof(explode("\n", utf8_normalize_nfc(request_var('lang_options', '', true))));					}					else if ($field_type == FIELD_TEXT && $key == 'field_length')					{						if (isset($_REQUEST['rows']))						{							$cp->vars['rows'] = request_var('rows', 0);							$cp->vars['columns'] = request_var('columns', 0);							$var = $cp->vars['rows'] . '|' . $cp->vars['columns'];						}						else						{							$row_col = explode('|', $var);							$cp->vars['rows'] = $row_col[0];							$cp->vars['columns'] = $row_col[1];						}					}					else if ($field_type == FIELD_DATE && $key == 'field_default_value')					{						$always_now = request_var('always_now', -1);						if ($always_now == 1 || ($always_now === -1 && $var == 'now'))						{							$now = getdate();							$cp->vars['field_default_value_day'] = $now['mday'];							$cp->vars['field_default_value_month'] = $now['mon'];							$cp->vars['field_default_value_year'] = $now['year'];							$var = $_POST['field_default_value'] = 'now';						}						else						{							if (isset($_REQUEST['field_default_value_day']))							{								$cp->vars['field_default_value_day'] = request_var('field_default_value_day', 0);								$cp->vars['field_default_value_month'] = request_var('field_default_value_month', 0);								$cp->vars['field_default_value_year'] = request_var('field_default_value_year', 0);								$var = $_POST['field_default_value'] = sprintf('%2d-%2d-%4d', $cp->vars['field_default_value_day'], $cp->vars['field_default_value_month'], $cp->vars['field_default_value_year']);							}							else							{								list($cp->vars['field_default_value_day'], $cp->vars['field_default_value_month'], $cp->vars['field_default_value_year']) = explode('-', $var);							}						}					}					/* else if ($field_type == FIELD_BOOL && $key == 'field_default_value')					{						// Get the number of options if this key is 'field_maxlen'						$var = request_var('field_default_value', 0);					}*/					else if ($field_type == FIELD_INT && $key == 'field_default_value')					{						// Permit an empty string						if ($action == 'create' && request_var('field_default_value', '') === '')						{							$var = '';						}					}					$cp->vars[$key] = $var;				}				// step 3 - all arrays				if ($action == 'edit')				{					// Get language entries					$sql = 'SELECT *						FROM ' . PROFILE_FIELDS_LANG_TABLE . '						WHERE lang_id <> ' . $this->edit_lang_id . "							AND field_id = $field_id						ORDER BY option_id ASC";					$result = $db->sql_query($sql);					$l_lang_options = array();					while ($row = $db->sql_fetchrow($result))					{						$l_lang_options[$row['lang_id']][$row['option_id']] = $row['lang_value'];					}					$db->sql_freeresult($result);					$sql = 'SELECT lang_id, lang_name, lang_explain, lang_default_value						FROM ' . PROFILE_LANG_TABLE . '						WHERE lang_id <> ' . $this->edit_lang_id . "							AND field_id = $field_id						ORDER BY lang_id ASC";					$result = $db->sql_query($sql);					$l_lang_name = $l_lang_explain = $l_lang_default_value = array();					while ($row = $db->sql_fetchrow($result))					{						$l_lang_name[$row['lang_id']] = $row['lang_name'];						$l_lang_explain[$row['lang_id']] = $row['lang_explain'];						$l_lang_default_value[$row['lang_id']] = $row['lang_default_value'];					}					$db->sql_freeresult($result);				}				foreach ($exclude[3] as $key)				{					$cp->vars[$key] = utf8_normalize_nfc(request_var($key, array(0 => ''), true));					if (!$cp->vars[$key] && $action == 'edit')					{						$cp->vars[$key] = $$key;					}					else if ($key == 'l_lang_options' && $field_type == FIELD_BOOL)					{						$cp->vars[$key] = utf8_normalize_nfc(request_var($key, array(0 => array('')), true));					}					else if ($key == 'l_lang_options' && is_array($cp->vars[$key]))					{						foreach ($cp->vars[$key] as $lang_id => $options)						{							$cp->vars[$key][$lang_id] = explode("\n", $options);						}					}				}				// Check for general issues in every step				if ($submit) //  && $step == 1				{					// Check values for step 1					if ($cp->vars['field_ident'] == '')					{						$error[] = $user->lang['EMPTY_FIELD_IDENT'];					}					if (!preg_match('/^[a-z_]+$/', $cp->vars['field_ident']))					{						$error[] = $user->lang['INVALID_CHARS_FIELD_IDENT'];					}					if (strlen($cp->vars['field_ident']) > 17)					{						$error[] = $user->lang['INVALID_FIELD_IDENT_LEN'];					}					if ($cp->vars['lang_name'] == '')					{						$error[] = $user->lang['EMPTY_USER_FIELD_NAME'];					}					if ($field_type == FIELD_DROPDOWN && !sizeof($cp->vars['lang_options']))					{						$error[] = $user->lang['NO_FIELD_ENTRIES'];					}					if ($field_type == FIELD_BOOL && (empty($cp->vars['lang_options'][0]) || empty($cp->vars['lang_options'][1])))					{						$error[] = $user->lang['NO_FIELD_ENTRIES'];					}					// Check for already existing field ident					if ($action != 'edit')					{						$sql = 'SELECT field_ident							FROM ' . PROFILE_FIELDS_TABLE . "							WHERE field_ident = '" . $db->sql_escape($cp->vars['field_ident']) . "'";						$result = $db->sql_query($sql);						$row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if ($row)						{							$error[] = $user->lang['FIELD_IDENT_ALREADY_EXIST'];						}					}				}				$step = (isset($_REQUEST['next'])) ? $step + 1 : ((isset($_REQUEST['prev'])) ? $step - 1 : $step);				if (sizeof($error))				{					$step--;					$submit = false;				}				// Build up the specific hidden fields				foreach ($exclude as $num => $key_ary)				{					if ($num == $step)					{						continue;					}					$_new_key_ary = array();					foreach ($key_ary as $key)					{						if ($field_type == FIELD_TEXT && $key == 'field_length' && isset($_REQUEST['rows']))						{							$cp->vars['rows'] = request_var('rows', 0);							$cp->vars['columns'] = request_var('columns', 0);							$_new_key_ary[$key] = $cp->vars['rows'] . '|' . $cp->vars['columns'];						}						else if ($field_type == FIELD_DATE && $key == 'field_default_value')						{							$always_now = request_var('always_now', 0);							if ($always_now)							{								$_new_key_ary[$key] = 'now';							}							else if (isset($_REQUEST['field_default_value_day']))							{								$cp->vars['field_default_value_day'] = request_var('field_default_value_day', 0);								$cp->vars['field_default_value_month'] = request_var('field_default_value_month', 0);								$cp->vars['field_default_value_year'] = request_var('field_default_value_year', 0);								$_new_key_ary[$key]  = sprintf('%2d-%2d-%4d', $cp->vars['field_default_value_day'], $cp->vars['field_default_value_month'], $cp->vars['field_default_value_year']);							}						}						else if ($field_type == FIELD_BOOL && $key == 'l_lang_options' && isset($_REQUEST['l_lang_options']))						{							$_new_key_ary[$key] = utf8_normalize_nfc(request_var($key, array(array('')), true));						}						else						{							if (!isset($_REQUEST[$key]))							{								$var = false;							}							else if ($key == 'field_ident' && isset($cp->vars[$key]))							{								$_new_key_ary[$key]= $cp->vars[$key];							}							else							{								$_new_key_ary[$key] = (is_array($_REQUEST[$key])) ? utf8_normalize_nfc(request_var($key, array(''), true)) : utf8_normalize_nfc(request_var($key, '', true));							}						}					}					$s_hidden_fields .= build_hidden_fields($_new_key_ary);				}				if (!sizeof($error))				{					if ($step == 3 && (sizeof($this->lang_defs['iso']) == 1 || $save))					{						$this->save_profile_field($cp, $field_type, $action);					}					else if ($action == 'edit' && $save)					{						$this->save_profile_field($cp, $field_type, $action);					}				}				$template->assign_vars(array(					'S_EDIT'			=> true,					'S_EDIT_MODE'		=> ($action == 'edit') ? true : false,					'ERROR_MSG'			=> (sizeof($error)) ? implode('<br />', $error) : '',					'L_TITLE'			=> $user->lang['STEP_' . $step . '_TITLE_' . strtoupper($action)],					'L_EXPLAIN'			=> $user->lang['STEP_' . $step . '_EXPLAIN_' . strtoupper($action)],					'U_ACTION'			=> $this->u_action . "&amp;action=$action&amp;step=$step",					'U_BACK'			=> $this->u_action)				);				// Now go through the steps				switch ($step)				{					// Create basic options - only small differences between field types					case 1:						// Build common create options						$template->assign_vars(array(							'S_STEP_ONE'		=> true,							'S_FIELD_REQUIRED'	=> ($cp->vars['field_required']) ? true : false,							'S_SHOW_ON_REG'		=> ($cp->vars['field_show_on_reg']) ? true : false,							'S_SHOW_ON_VT'		=> ($cp->vars['field_show_on_vt']) ? true : false,							'S_FIELD_HIDE'		=> ($cp->vars['field_hide']) ? true : false,							'S_SHOW_PROFILE'	=> ($cp->vars['field_show_profile']) ? true : false,							'S_FIELD_NO_VIEW'	=> ($cp->vars['field_no_view']) ? true : false,							'L_LANG_SPECIFIC'	=> sprintf($user->lang['LANG_SPECIFIC_OPTIONS'], $config['default_lang']),							'FIELD_TYPE'		=> $user->lang['FIELD_' . strtoupper($cp->profile_types[$field_type])],							'FIELD_IDENT'		=> $cp->vars['field_ident'],							'LANG_NAME'			=> $cp->vars['lang_name'],							'LANG_EXPLAIN'		=> $cp->vars['lang_explain'])						);						// String and Text needs to set default values here...						if ($field_type == FIELD_STRING || $field_type == FIELD_TEXT)						{							$template->assign_vars(array(								'S_TEXT'		=> ($field_type == FIELD_TEXT) ? true : false,								'S_STRING'		=> ($field_type == FIELD_STRING) ? true : false,								'L_DEFAULT_VALUE_EXPLAIN'	=> $user->lang[strtoupper($cp->profile_types[$field_type]) . '_DEFAULT_VALUE_EXPLAIN'],								'LANG_DEFAULT_VALUE'		=> $cp->vars['lang_default_value'])							);						}						if ($field_type == FIELD_BOOL || $field_type == FIELD_DROPDOWN)						{							// Initialize these array elements if we are creating a new field							if (!sizeof($cp->vars['lang_options']))							{								if ($field_type == FIELD_BOOL)								{									// No options have been defined for a boolean field.									$cp->vars['lang_options'][0] = '';									$cp->vars['lang_options'][1] = '';								}								else								{									// No options have been defined for the dropdown menu									$cp->vars['lang_options'] = array();								}							}							$template->assign_vars(array(								'S_BOOL'		=> ($field_type == FIELD_BOOL) ? true : false,								'S_DROPDOWN'	=> ($field_type == FIELD_DROPDOWN) ? true : false,								'L_LANG_OPTIONS_EXPLAIN'	=> $user->lang[strtoupper($cp->profile_types[$field_type]) . '_ENTRIES_EXPLAIN'],								'LANG_OPTIONS'				=> ($field_type == FIELD_DROPDOWN) ? implode("\n", $cp->vars['lang_options']) : '',								'FIRST_LANG_OPTION'			=> ($field_type == FIELD_BOOL) ? $cp->vars['lang_options'][0] : '',								'SECOND_LANG_OPTION'		=> ($field_type == FIELD_BOOL) ? $cp->vars['lang_options'][1] : '')							);						}					break;					case 2:						$template->assign_vars(array(							'S_STEP_TWO'		=> true,							'L_NEXT_STEP'			=> (sizeof($this->lang_defs['iso']) == 1) ? $user->lang['SAVE'] : $user->lang['PROFILE_LANG_OPTIONS'])						);						// Build options based on profile type						$function = 'get_' . $cp->profile_types[$field_type] . '_options';						$options = $cp->$function();						foreach ($options as $num => $option_ary)						{							$template->assign_block_vars('option', $option_ary);						}					break;					// Define remaining language variables					case 3:						$template->assign_var('S_STEP_THREE', true);						$options = $this->build_language_options($cp, $field_type, $action);						foreach ($options as $lang_id => $lang_ary)						{							$template->assign_block_vars('options', array(								'LANGUAGE'		=> sprintf($user->lang[(($lang_id == $this->edit_lang_id) ? 'DEFAULT_' : '') . 'ISO_LANGUAGE'], $lang_ary['lang_iso']))							);							foreach ($lang_ary['fields'] as $field_ident => $field_ary)							{								$template->assign_block_vars('options.field', array(									'L_TITLE'		=> $field_ary['TITLE'],									'L_EXPLAIN'		=> (isset($field_ary['EXPLAIN'])) ? $field_ary['EXPLAIN'] : '',									'FIELD'			=> $field_ary['FIELD'])								);							}						}					break;				}				$template->assign_vars(array(					'S_HIDDEN_FIELDS'	=> $s_hidden_fields)				);				return;			break;		}		$sql = 'SELECT *			FROM ' . PROFILE_FIELDS_TABLE . '			ORDER BY field_order';		$result = $db->sql_query($sql);		$s_one_need_edit = false;		while ($row = $db->sql_fetchrow($result))		{			$active_lang = (!$row['field_active']) ? 'ACTIVATE' : 'DEACTIVATE';			$active_value = (!$row['field_active']) ? 'activate' : 'deactivate';			$id = $row['field_id'];			$s_need_edit = (sizeof($this->lang_defs['diff'][$row['field_id']])) ? true : false;			if ($s_need_edit)			{				$s_one_need_edit = true;			}			$template->assign_block_vars('fields', array(				'FIELD_IDENT'		=> $row['field_ident'],				'FIELD_TYPE'		=> $user->lang['FIELD_' . strtoupper($cp->profile_types[$row['field_type']])],				'L_ACTIVATE_DEACTIVATE'		=> $user->lang[$active_lang],				'U_ACTIVATE_DEACTIVATE'		=> $this->u_action . "&amp;action=$active_value&amp;field_id=$id",				'U_EDIT'					=> $this->u_action . "&amp;action=edit&amp;field_id=$id",				'U_TRANSLATE'				=> $this->u_action . "&amp;action=edit&amp;field_id=$id&amp;step=3",				'U_DELETE'					=> $this->u_action . "&amp;action=delete&amp;field_id=$id",				'U_MOVE_UP'					=> $this->u_action . "&amp;action=move_up&amp;order={$row['field_order']}",				'U_MOVE_DOWN'				=> $this->u_action . "&amp;action=move_down&amp;order={$row['field_order']}",				'S_NEED_EDIT'				=> $s_need_edit)			);		}		$db->sql_freeresult($result);		// At least one option field needs editing?		if ($s_one_need_edit)		{			$template->assign_var('S_NEED_EDIT', true);		}		$s_select_type = '';		foreach ($cp->profile_types as $key => $value)		{			$s_select_type .= '<option value="' . $key . '">' . $user->lang['FIELD_' . strtoupper($value)] . '</option>';		}		$template->assign_vars(array(			'U_ACTION'			=> $this->u_action,			'S_TYPE_OPTIONS'	=> $s_select_type)		);	}	/**	* Build all Language specific options	*/	function build_language_options(&$cp, $field_type, $action = 'create')	{		global $user, $config, $db;		$default_lang_id = (!empty($this->edit_lang_id)) ? $this->edit_lang_id : $this->lang_defs['iso'][$config['default_lang']];		$sql = 'SELECT lang_id, lang_iso			FROM ' . LANG_TABLE . '			WHERE lang_id <> ' . (int) $default_lang_id . '			ORDER BY lang_english_name';		$result = $db->sql_query($sql);		$languages = array();		while ($row = $db->sql_fetchrow($result))		{			$languages[$row['lang_id']] = $row['lang_iso'];		}		$db->sql_freeresult($result);		$options = array();		$options['lang_name'] = 'string';		if ($cp->vars['lang_explain'])		{			$options['lang_explain'] = 'text';		}		switch ($field_type)		{			case FIELD_BOOL:				$options['lang_options'] = 'two_options';			break;			case FIELD_DROPDOWN:				$options['lang_options'] = 'optionfield';			break;			case FIELD_TEXT:			case FIELD_STRING:				if (strlen($cp->vars['lang_default_value']))				{					$options['lang_default_value'] = ($field_type == FIELD_STRING) ? 'string' : 'text';				}			break;		}		$lang_options = array();		foreach ($options as $field => $field_type)		{			$lang_options[1]['lang_iso'] = $this->lang_defs['id'][$default_lang_id];			$lang_options[1]['fields'][$field] = array(				'TITLE'		=> $user->lang['CP_' . strtoupper($field)],				'FIELD'		=> '<dd>' . ((is_array($cp->vars[$field])) ? implode('<br />', $cp->vars[$field]) : bbcode_nl2br($cp->vars[$field])) . '</dd>'			);			if (isset($user->lang['CP_' . strtoupper($field) . '_EXPLAIN']))			{				$lang_options[1]['fields'][$field]['EXPLAIN'] = $user->lang['CP_' . strtoupper($field) . '_EXPLAIN'];			}		}		foreach ($languages as $lang_id => $lang_iso)		{			$lang_options[$lang_id]['lang_iso'] = $lang_iso;			foreach ($options as $field => $field_type)			{				$value = ($action == 'create') ? utf8_normalize_nfc(request_var('l_' . $field, array(0 => ''), true)) : $cp->vars['l_' . $field];				if ($field == 'lang_options')				{					$var = (!isset($cp->vars['l_lang_options'][$lang_id]) || !is_array($cp->vars['l_lang_options'][$lang_id])) ? $cp->vars['lang_options'] : $cp->vars['l_lang_options'][$lang_id];					switch ($field_type)					{						case 'two_options':							$lang_options[$lang_id]['fields'][$field] = array(								'TITLE'		=> $user->lang['CP_' . strtoupper($field)],								'FIELD'		=> '											<dd><input class="medium" name="l_' . $field . '[' . $lang_id . '][]" value="' . ((isset($value[$lang_id][0])) ? $value[$lang_id][0] : $var[0]) . '" /> ' . $user->lang['FIRST_OPTION'] . '</dd>											<dd><input class="medium" name="l_' . $field . '[' . $lang_id . '][]" value="' . ((isset($value[$lang_id][1])) ? $value[$lang_id][1] : $var[1]) . '" /> ' . $user->lang['SECOND_OPTION'] . '</dd>'							);						break;						case 'optionfield':							$value = ((isset($value[$lang_id])) ? ((is_array($value[$lang_id])) ?  implode("\n", $value[$lang_id]) : $value[$lang_id]) : implode("\n", $var));							$lang_options[$lang_id]['fields'][$field] = array(								'TITLE'		=> $user->lang['CP_' . strtoupper($field)],								'FIELD'		=> '<dd><textarea name="l_' . $field . '[' . $lang_id . ']" rows="7" cols="80">' . $value . '</textarea></dd>'							);						break;					}					if (isset($user->lang['CP_' . strtoupper($field) . '_EXPLAIN']))					{						$lang_options[$lang_id]['fields'][$field]['EXPLAIN'] = $user->lang['CP_' . strtoupper($field) . '_EXPLAIN'];					}				}				else				{					$var = ($action == 'create' || !is_array($cp->vars[$field])) ? $cp->vars[$field] : $cp->vars[$field][$lang_id];					$lang_options[$lang_id]['fields'][$field] = array(						'TITLE'		=> $user->lang['CP_' . strtoupper($field)],						'FIELD'		=> ($field_type == 'string') ? '<dd><input class="medium" type="text" name="l_' . $field . '[' . $lang_id . ']" value="' . ((isset($value[$lang_id])) ? $value[$lang_id] : $var) . '" /></dd>' : '<dd><textarea name="l_' . $field . '[' . $lang_id . ']" rows="3" cols="80">' . ((isset($value[$lang_id])) ? $value[$lang_id] : $var) . '</textarea></dd>'					);					if (isset($user->lang['CP_' . strtoupper($field) . '_EXPLAIN']))					{						$lang_options[$lang_id]['fields'][$field]['EXPLAIN'] = $user->lang['CP_' . strtoupper($field) . '_EXPLAIN'];					}				}			}		}		return $lang_options;	}	/**	* Save Profile Field	*/	function save_profile_field(&$cp, $field_type, $action = 'create')	{		global $db, $config, $user;		$field_id = request_var('field_id', 0);		// Collect all information, if something is going wrong, abort the operation		$profile_sql = $profile_lang = $empty_lang = $profile_lang_fields = array();		$default_lang_id = (!empty($this->edit_lang_id)) ? $this->edit_lang_id : $this->lang_defs['iso'][$config['default_lang']];		if ($action == 'create')		{			$sql = 'SELECT MAX(field_order) as max_field_order				FROM ' . PROFILE_FIELDS_TABLE;			$result = $db->sql_query($sql);			$new_field_order = (int) $db->sql_fetchfield('max_field_order');			$db->sql_freeresult($result);			$field_ident = $cp->vars['field_ident'];		}		// Save the field		$profile_fields = array(			'field_length'			=> $cp->vars['field_length'],			'field_minlen'			=> $cp->vars['field_minlen'],			'field_maxlen'			=> $cp->vars['field_maxlen'],			'field_novalue'			=> $cp->vars['field_novalue'],			'field_default_value'	=> $cp->vars['field_default_value'],			'field_validation'		=> $cp->vars['field_validation'],			'field_required'		=> $cp->vars['field_required'],			'field_show_on_reg'		=> $cp->vars['field_show_on_reg'],			'field_show_on_vt'		=> $cp->vars['field_show_on_vt'],			'field_hide'			=> $cp->vars['field_hide'],			'field_show_profile'	=> $cp->vars['field_show_profile'],			'field_no_view'			=> $cp->vars['field_no_view']		);		if ($action == 'create')		{			$profile_fields += array(				'field_type'		=> $field_type,				'field_ident'		=> $field_ident,				'field_name'		=> $field_ident,				'field_order'		=> $new_field_order + 1,				'field_active'		=> 1			);			$sql = 'INSERT INTO ' . PROFILE_FIELDS_TABLE . ' ' . $db->sql_build_array('INSERT', $profile_fields);			$db->sql_query($sql);			$field_id = $db->sql_nextid();		}		else		{			$sql = 'UPDATE ' . PROFILE_FIELDS_TABLE . '				SET ' . $db->sql_build_array('UPDATE', $profile_fields) . "				WHERE field_id = $field_id";			$db->sql_query($sql);		}		if ($action == 'create')		{			$field_ident = 'pf_' . $field_ident;			$profile_sql[] = $this->add_field_ident($field_ident, $field_type);		}		$sql_ary = array(			'lang_name'				=> $cp->vars['lang_name'],			'lang_explain'			=> $cp->vars['lang_explain'],			'lang_default_value'	=> $cp->vars['lang_default_value']		);		if ($action == 'create')		{			$sql_ary['field_id'] = $field_id;			$sql_ary['lang_id'] = $default_lang_id;			$profile_sql[] = 'INSERT INTO ' . PROFILE_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);		}		else		{			$this->update_insert(PROFILE_LANG_TABLE, $sql_ary, array('field_id' => $field_id, 'lang_id' => $default_lang_id));		}		if (is_array($cp->vars['l_lang_name']) && sizeof($cp->vars['l_lang_name']))		{			foreach ($cp->vars['l_lang_name'] as $lang_id => $data)			{				if (($cp->vars['lang_name'] != '' && $cp->vars['l_lang_name'][$lang_id] == '')					|| ($cp->vars['lang_explain'] != '' && $cp->vars['l_lang_explain'][$lang_id] == '')					|| ($cp->vars['lang_default_value'] != '' && $cp->vars['l_lang_default_value'][$lang_id] == ''))				{					$empty_lang[$lang_id] = true;					break;				}				if (!isset($empty_lang[$lang_id]))				{					$profile_lang[] = array(						'field_id'		=> $field_id,						'lang_id'		=> $lang_id,						'lang_name'		=> $cp->vars['l_lang_name'][$lang_id],						'lang_explain'	=> (isset($cp->vars['l_lang_explain'][$lang_id])) ? $cp->vars['l_lang_explain'][$lang_id] : '',						'lang_default_value'	=> (isset($cp->vars['l_lang_default_value'][$lang_id])) ? $cp->vars['l_lang_default_value'][$lang_id] : ''					);				}			}			foreach ($empty_lang as $lang_id => $NULL)			{				$sql = 'DELETE FROM ' . PROFILE_LANG_TABLE . "					WHERE field_id = $field_id					AND lang_id = " . (int) $lang_id;				$db->sql_query($sql);			}		}		// These are always arrays because the key is the language id...		$cp->vars['l_lang_name']			= utf8_normalize_nfc(request_var('l_lang_name', array(0 => ''), true));		$cp->vars['l_lang_explain']			= utf8_normalize_nfc(request_var('l_lang_explain', array(0 => ''), true));		$cp->vars['l_lang_default_value']	= utf8_normalize_nfc(request_var('l_lang_default_value', array(0 => ''), true));		if ($field_type != FIELD_BOOL)		{			$cp->vars['l_lang_options']			= utf8_normalize_nfc(request_var('l_lang_options', array(0 => ''), true));		}		else		{			/**			* @todo check if this line is correct...			$cp->vars['l_lang_default_value']	= request_var('l_lang_default_value', array(0 => array('')), true);			*/			$cp->vars['l_lang_options']	= utf8_normalize_nfc(request_var('l_lang_options', array(0 => array('')), true));		}		if ($cp->vars['lang_options'])		{			if (!is_array($cp->vars['lang_options']))			{				$cp->vars['lang_options'] = explode("\n", $cp->vars['lang_options']);			}			if ($action != 'create')			{				$sql = 'DELETE FROM ' . PROFILE_FIELDS_LANG_TABLE . "					WHERE field_id = $field_id						AND lang_id = " . (int) $default_lang_id;				$db->sql_query($sql);			}			foreach ($cp->vars['lang_options'] as $option_id => $value)			{				$sql_ary = array(					'field_type'	=> (int) $field_type,					'lang_value'	=> $value				);				if ($action == 'create')				{					$sql_ary['field_id'] = $field_id;					$sql_ary['lang_id'] = $default_lang_id;					$sql_ary['option_id'] = (int) $option_id;					$profile_sql[] = 'INSERT INTO ' . PROFILE_FIELDS_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);				}				else				{					$this->update_insert(PROFILE_FIELDS_LANG_TABLE, $sql_ary, array(						'field_id'	=> $field_id,						'lang_id'	=> (int) $default_lang_id,						'option_id'	=> (int) $option_id)					);				}			}		}		if (is_array($cp->vars['l_lang_options']) && sizeof($cp->vars['l_lang_options']))		{			$empty_lang = array();			foreach ($cp->vars['l_lang_options'] as $lang_id => $lang_ary)			{				if (!is_array($lang_ary))				{					$lang_ary = explode("\n", $lang_ary);				}				if (sizeof($lang_ary) != sizeof($cp->vars['lang_options']))				{					$empty_lang[$lang_id] = true;				}				if (!isset($empty_lang[$lang_id]))				{					if ($action != 'create')					{						$sql = 'DELETE FROM ' . PROFILE_FIELDS_LANG_TABLE . "							WHERE field_id = $field_id							AND lang_id = " . (int) $lang_id;						$db->sql_query($sql);					}					foreach ($lang_ary as $option_id => $value)					{						$profile_lang_fields[] = array(							'field_id'		=> (int) $field_id,							'lang_id'		=> (int) $lang_id,							'option_id'		=> (int) $option_id,							'field_type'	=> (int) $field_type,							'lang_value'	=> $value						);					}				}			}			foreach ($empty_lang as $lang_id => $NULL)			{				$sql = 'DELETE FROM ' . PROFILE_FIELDS_LANG_TABLE . "					WHERE field_id = $field_id					AND lang_id = " . (int) $lang_id;				$db->sql_query($sql);			}		}		foreach ($profile_lang as $sql)		{			if ($action == 'create')			{				$profile_sql[] = 'INSERT INTO ' . PROFILE_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $sql);			}			else			{				$lang_id = $sql['lang_id'];				unset($sql['lang_id'], $sql['field_id']);				$this->update_insert(PROFILE_LANG_TABLE, $sql, array('lang_id' => (int) $lang_id, 'field_id' => $field_id));			}		}		if (sizeof($profile_lang_fields))		{			foreach ($profile_lang_fields as $sql)			{				if ($action == 'create')				{					$profile_sql[] = 'INSERT INTO ' . PROFILE_FIELDS_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $sql);				}				else				{					$lang_id = $sql['lang_id'];					$option_id = $sql['option_id'];					unset($sql['lang_id'], $sql['field_id'], $sql['option_id']);					$this->update_insert(PROFILE_FIELDS_LANG_TABLE, $sql, array(						'lang_id'	=> $lang_id,						'field_id'	=> $field_id,						'option_id'	=> $option_id)					);				}			}		}		$db->sql_transaction('begin');		if ($action == 'create')		{			foreach ($profile_sql as $sql)			{				$db->sql_query($sql);			}		}		$db->sql_transaction('commit');		if ($action == 'edit')		{			add_log('admin', 'LOG_PROFILE_FIELD_EDIT', $cp->vars['field_ident'] . ':' . $cp->vars['lang_name']);			trigger_error($user->lang['CHANGED_PROFILE_FIELD'] . adm_back_link($this->u_action));		}		else		{			add_log('admin', 'LOG_PROFILE_FIELD_CREATE', substr($field_ident, 3) . ':' . $cp->vars['lang_name']);			trigger_error($user->lang['ADDED_PROFILE_FIELD'] . adm_back_link($this->u_action));		}	}	/**	* Update, then insert if not successfull	*/	function update_insert($table, $sql_ary, $where_fields)	{		global $db;		$where_sql = array();		$check_key = '';		foreach ($where_fields as $key => $value)		{			$check_key = (!$check_key) ? $key : $check_key;			$where_sql[] = $key . ' = ' . ((is_string($value)) ? "'" . $db->sql_escape($value) . "'" : (int) $value);		}		if (!sizeof($where_sql))		{			return;		}		$sql = "SELECT $check_key			FROM $table			WHERE " . implode(' AND ', $where_sql);		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$row)		{			$sql_ary = array_merge($where_fields, $sql_ary);			if (sizeof($sql_ary))			{				$db->sql_query("INSERT INTO $table " . $db->sql_build_array('INSERT', $sql_ary));			}		}		else		{			if (sizeof($sql_ary))			{				$sql = "UPDATE $table SET " . $db->sql_build_array('UPDATE', $sql_ary) . '					WHERE ' . implode(' AND ', $where_sql);				$db->sql_query($sql);			}		}	}	/**	* Return sql statement for adding a new field ident (profile field) to the profile fields data table	*/	function add_field_ident($field_ident, $field_type)	{		global $db;		switch ($db->sql_layer)		{			case 'mysql':			case 'mysql4':			case 'mysqli':				// We are defining the biggest common value, because of the possibility to edit the min/max values of each field.				$sql = 'ALTER TABLE ' . PROFILE_FIELDS_DATA_TABLE . " ADD `$field_ident` ";				switch ($field_type)				{					case FIELD_STRING:						$sql .= ' VARCHAR(255) ';					break;					case FIELD_DATE:						$sql .= 'VARCHAR(10) ';					break;					case FIELD_TEXT:						$sql .= "TEXT";		//						ADD {$field_ident}_bbcode_uid VARCHAR(5) NOT NULL,		//						ADD {$field_ident}_bbcode_bitfield INT(11) UNSIGNED";					break;					case FIELD_BOOL:						$sql .= 'TINYINT(2) ';					break;					case FIELD_DROPDOWN:						$sql .= 'MEDIUMINT(8) ';					break;					case FIELD_INT:						$sql .= 'BIGINT(20) ';					break;				}			break;			case 'sqlite':				switch ($field_type)				{					case FIELD_STRING:						$type = ' VARCHAR(255) ';					break;					case FIELD_DATE:						$type = 'VARCHAR(10) ';					break;					case FIELD_TEXT:						$type = "TEXT(65535)";		//						ADD {$field_ident}_bbcode_uid VARCHAR(5) NOT NULL,		//						ADD {$field_ident}_bbcode_bitfield INT(11) UNSIGNED";					break;					case FIELD_BOOL:						$type = 'TINYINT(2) ';					break;					case FIELD_DROPDOWN:						$type = 'MEDIUMINT(8) ';					break;					case FIELD_INT:						$type = 'BIGINT(20) ';					break;				}				// We are defining the biggest common value, because of the possibility to edit the min/max values of each field.				if (version_compare(sqlite_libversion(), '3.0') == -1)				{					$sql = "SELECT sql						FROM sqlite_master						WHERE type = 'table'							AND name = '" . PROFILE_FIELDS_DATA_TABLE . "'						ORDER BY type DESC, name;";					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					// Create a temp table and populate it, destroy the existing one					$db->sql_query(preg_replace('#CREATE\s+TABLE\s+"?' . PROFILE_FIELDS_DATA_TABLE . '"?#i', 'CREATE TEMPORARY TABLE ' . PROFILE_FIELDS_DATA_TABLE . '_temp', $row['sql']));					$db->sql_query('INSERT INTO ' . PROFILE_FIELDS_DATA_TABLE . '_temp SELECT * FROM ' . PROFILE_FIELDS_DATA_TABLE);					$db->sql_query('DROP TABLE ' . PROFILE_FIELDS_DATA_TABLE);					preg_match('#\((.*)\)#s', $row['sql'], $matches);					$new_table_cols = trim($matches[1]);					$old_table_cols = explode(',', $new_table_cols);					$column_list = array();					foreach ($old_table_cols as $declaration)					{						$entities = preg_split('#\s+#', trim($declaration));						if ($entities[0] == 'PRIMARY')						{							continue;						}						$column_list[] = $entities[0];					}					$columns = implode(',', $column_list);					$new_table_cols = $field_ident . ' ' . $type . ',' . $new_table_cols;					// create a new table and fill it up. destroy the temp one					$db->sql_query('CREATE TABLE ' . PROFILE_FIELDS_DATA_TABLE . ' (' . $new_table_cols . ');');					$db->sql_query('INSERT INTO ' . PROFILE_FIELDS_DATA_TABLE . ' (' . $columns . ') SELECT ' . $columns . ' FROM ' . PROFILE_FIELDS_DATA_TABLE . '_temp;');					$db->sql_query('DROP TABLE ' . PROFILE_FIELDS_DATA_TABLE . '_temp');				}				else				{					$sql = 'ALTER TABLE ' . PROFILE_FIELDS_DATA_TABLE . " ADD $field_ident [$type]";				}			break;			case 'mssql':			case 'mssql_odbc':			case 'mssqlnative':				// We are defining the biggest common value, because of the possibility to edit the min/max values of each field.				$sql = 'ALTER TABLE [' . PROFILE_FIELDS_DATA_TABLE . "] ADD [$field_ident] ";				switch ($field_type)				{					case FIELD_STRING:						$sql .= ' [VARCHAR] (255) ';					break;					case FIELD_DATE:						$sql .= '[VARCHAR] (10) ';					break;					case FIELD_TEXT:						$sql .= "[TEXT]";		//						ADD {$field_ident}_bbcode_uid [VARCHAR] (5) NOT NULL,		//						ADD {$field_ident}_bbcode_bitfield [INT] UNSIGNED";					break;					case FIELD_BOOL:					case FIELD_DROPDOWN:						$sql .= '[INT] ';					break;					case FIELD_INT:						$sql .= '[FLOAT] ';					break;				}			break;			case 'postgres':				// We are defining the biggest common value, because of the possibility to edit the min/max values of each field.				$sql = 'ALTER TABLE ' . PROFILE_FIELDS_DATA_TABLE . " ADD COLUMN \"$field_ident\" ";				switch ($field_type)				{					case FIELD_STRING:						$sql .= ' VARCHAR(255) ';					break;					case FIELD_DATE:						$sql .= 'VARCHAR(10) ';					break;					case FIELD_TEXT:						$sql .= "TEXT";		//						ADD {$field_ident}_bbcode_uid VARCHAR(5) NOT NULL,		//						ADD {$field_ident}_bbcode_bitfield INT4 UNSIGNED";					break;					case FIELD_BOOL:						$sql .= 'INT2 ';					break;					case FIELD_DROPDOWN:						$sql .= 'INT4 ';					break;					case FIELD_INT:						$sql .= 'INT8 ';					break;				}			break;			case 'firebird':				// We are defining the biggest common value, because of the possibility to edit the min/max values of each field.				$sql = 'ALTER TABLE ' . PROFILE_FIELDS_DATA_TABLE . ' ADD "' . strtoupper($field_ident) . '" ';				switch ($field_type)				{					case FIELD_STRING:						$sql .= ' VARCHAR(255) ';					break;					case FIELD_DATE:						$sql .= 'VARCHAR(10) ';					break;					case FIELD_TEXT:						$sql .= "BLOB SUB_TYPE TEXT";		//						ADD {$field_ident}_bbcode_uid VARCHAR(5) NOT NULL,		//						ADD {$field_ident}_bbcode_bitfield INTEGER UNSIGNED";					break;					case FIELD_BOOL:					case FIELD_DROPDOWN:						$sql .= 'INTEGER ';					break;					case FIELD_INT:						$sql .= 'DOUBLE PRECISION ';					break;				}			break;			case 'oracle':				// We are defining the biggest common value, because of the possibility to edit the min/max values of each field.				$sql = 'ALTER TABLE ' . PROFILE_FIELDS_DATA_TABLE . " ADD $field_ident ";				switch ($field_type)				{					case FIELD_STRING:						$sql .= ' VARCHAR2(255) ';					break;					case FIELD_DATE:						$sql .= 'VARCHAR2(10) ';					break;					case FIELD_TEXT:						$sql .= "CLOB";		//						ADD {$field_ident}_bbcode_uid VARCHAR2(5) NOT NULL,		//						ADD {$field_ident}_bbcode_bitfield NUMBER(11) UNSIGNED";					break;					case FIELD_BOOL:						$sql .= 'NUMBER(2) ';					break;					case FIELD_DROPDOWN:						$sql .= 'NUMBER(8) ';					break;					case FIELD_INT:						$sql .= 'NUMBER(20) ';					break;				}			break;		}		return $sql;	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**/if (php_sapi_name() != 'cli'){	die("This program must be run from the command line.\n");}//// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = '../';$phpEx = substr(strrchr(__FILE__, '.'), 1);echo "Checking for required files\n";download('http://unicode.org/reports/tr39/data/confusables.txt');download('http://unicode.org/Public/UNIDATA/CaseFolding.txt');echo "\n";/*** Load the confusables table*/echo "Loading confusables\n";$unidata = file_get_contents('confusables.txt');/*** Load the CaseFolding table*/echo "Loading CaseFolding\n";$casefolds = file_get_contents('CaseFolding.txt');function utf8_chr($cp){    if ($cp > 0xFFFF)    {        return chr(0xF0 | ($cp >> 18)) . chr(0x80 | (($cp >> 12) & 0x3F)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));    }    else if ($cp > 0x7FF)    {        return chr(0xE0 | ($cp >> 12)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));    }    else if ($cp > 0x7F)    {        return chr(0xC0 | ($cp >> 6)) . chr(0x80 | ($cp & 0x3F));    }    else    {        return chr($cp);    }}preg_match_all('/^([0-9A-F]+) ;\s((?:[0-9A-F]+ )*);.*?$/im', $unidata, $array, PREG_SET_ORDER);preg_match_all('/^([0-9A-F]+); ([CFS]); ([0-9A-F]+(?: [0-9A-F]+)*);/im', $casefolds, $casefold_array);// some that we defined ourselves$uniarray = array(		"\xC2\xA1"			=>	"\x69",	// EXCLAMATION MARK, INVERTED => LATIN SMALL LETTER I		"\xC7\x83"			=>	"\x21",	// LATIN LETTER RETROFLEX CLICK => EXCLAMATION MARK		"\xCE\xB1"			=>	"\x61",	// GREEK SMALL LETTER ALPHA => LATIN SMALL LETTER A		"\xE1\x9A\x80"		=>	"\x20",	// OGHAM SPACE MARK		"\xC2\xAD"			=>	'',		// HYPHEN, SOFT => empty string		"\xDB\x9D"			=>	'',		// ARABIC END OF AYAH		"\xDC\x8F"			=>	'',		// SYRIAC ABBREVIATION MARK		"\xE1\xA0\x86"		=>	'',		// MONGOLIAN TODO SOFT HYPHEN		"\xE1\xA0\x8E"		=>	'',		// MONGOLIAN VOWEL SEPARATOR		"\xE2\x80\x8B"		=>	'',		// ZERO WIDTH SPACE		"\xE2\x80\x8C"		=>	'',		// ZERO WIDTH NON-JOINER		"\xE2\x80\x8D"		=>	'',		// ZERO WIDTH JOINER		"\xE2\x80\xA8"		=>	'',		// LINE SEPARATOR		"\xE2\x80\xA9"		=>	'',		// PARAGRAPH SEPARATOR		"\xE2\x81\xA0"		=>	'',		// WORD JOINER		"\xE2\x81\xA1"		=>	'',		// FUNCTION APPLICATION		"\xE2\x81\xA2"		=>	'',		// INVISIBLE TIMES		"\xE2\x81\xA3"		=>	'',		// INVISIBLE SEPARATOR		"\xE2\x81\xAA"		=>	'',		// [CONTROL CHARACTERS]		"\xE2\x81\xAB"		=>	'',		// [CONTROL CHARACTERS]		"\xE2\x81\xAC"		=>	'',		// [CONTROL CHARACTERS]		"\xE2\x81\xAD"		=>	'',		// [CONTROL CHARACTERS]		"\xE2\x81\xAE"		=>	'',		// [CONTROL CHARACTERS]		"\xE2\x81\xAF"		=>	'',		// [CONTROL CHARACTERS]		"\xEF\xBB\xBF"		=>	'',		// ZERO WIDTH NO-BREAK SPACE		"\xEF\xBF\xB9"		=>	'',		// [CONTROL CHARACTERS]		"\xEF\xBF\xBA"		=>	'',		// [CONTROL CHARACTERS]		"\xEF\xBF\xBB"		=>	'',		// [CONTROL CHARACTERS]		"\xEF\xBF\xBC"		=>	'',		// [CONTROL CHARACTERS]		"\xF0\x9D\x85\xB3"	=>	'',		// [MUSICAL CONTROL CHARACTERS]		"\xF0\x9D\x85\xB4"	=>	'',		// [MUSICAL CONTROL CHARACTERS]		"\xF0\x9D\x85\xB5"	=>	'',		// [MUSICAL CONTROL CHARACTERS]		"\xF0\x9D\x85\xB6"	=>	'',		// [MUSICAL CONTROL CHARACTERS]		"\xF0\x9D\x85\xB7"	=>	'',		// [MUSICAL CONTROL CHARACTERS]		"\xF0\x9D\x85\xB8"	=>	'',		// [MUSICAL CONTROL CHARACTERS]		"\xF0\x9D\x85\xB9"	=>	'',		// [MUSICAL CONTROL CHARACTERS]		"\xF0\x9D\x85\xBA"	=>	'',		// [MUSICAL CONTROL CHARACTERS]);$copy = $uniarray;/*** @todo we need to check that the $uniarray does not reverse any of the mappings defined in the unicode definition*/foreach ($array as $value){	$temp_hold = implode(array_map('utf8_chr', array_map('hexdec', explode(' ', trim($value[2])))));	if (isset($copy[utf8_chr(hexdec((string)$value[1]))]))	{		$num = '';		$string = utf8_chr(hexdec((string)$value[1]));		for ($i = 0; $i < strlen($string); $i++)		{			$num .= '\x' . str_pad(base_convert(ord($string[$i]), 10, 16), 2, '0', STR_PAD_LEFT);		}		echo $num . "\n";		if ($uniarray[$string] != $temp_hold)		{			echo "  --> $string\n";			echo "  --> " . $temp_hold . "\n";		}	}	// do some tests for things that transform into something with the number one	if (strpos($temp_hold, utf8_chr(0x0031)) !== false)	{		// any kind of letter L?		if (strpos($value[0], 'LETTER L') !== false || strpos($value[0], 'IOTA') !== false || strpos($value[0], 'SMALL L ') !== false || preg_match('/SMALL LIGATURE [^L]*L /', $value[0]))		{			// replace all of the mappings that transform some sort of letter l to number one instead to some sort of letter l to latin small letter l			$temp_hold = str_replace(utf8_chr(0x0031), utf8_chr(0x006C), $temp_hold);		}	}	// uppercased chars that were folded do not exist in this universe,	// no amount of normalization could ever "trick" this into not working	if (in_array($value[1], $casefold_array[1]))	{		continue;	}	$uniarray[utf8_chr(hexdec((string)$value[1]))] = $temp_hold;}echo "Writing to confusables.$phpEx\n";$fp = fopen($phpbb_root_path . 'includes/utf/data/confusables.' . $phpEx, 'wb');fwrite($fp, '<?php return ' . my_var_export($uniarray) . ';');fclose($fp);/*** Return a parsable string representation of a variable** This is function is limited to array/strings/integers** @param	mixed	$var		Variable* @return	string				PHP code representing the variable*/function my_var_export($var){	if (is_array($var))	{		$lines = array();		foreach ($var as $k => $v)		{			$lines[] = my_var_export($k) . '=>' . my_var_export($v);		}		return 'array(' . implode(',', $lines) . ')';	}	else if (is_string($var))	{		return "'" . str_replace(array('\\', "'"), array('\\\\', "\\'"), $var) . "'";	}	else	{		return $var;	}}/*** Download a file to the develop/ dir** @param	string	$url		URL of the file to download* @return	void*/function download($url){	global $phpbb_root_path;	if (file_exists($phpbb_root_path . 'develop/' . basename($url)))	{		return;	}	echo 'Downloading from ', $url, ' ';	if (!$fpr = fopen($url, 'rb'))	{		die("Can't download from $url\nPlease download it yourself and put it in the develop/ dir, kthxbai");	}	if (!$fpw = fopen($phpbb_root_path . 'develop/' . basename($url), 'wb'))	{		die("Can't open develop/" . basename($url) . " for output... please check your permissions or something");	}	$i = 0;	$chunk = 32768;	$done = '';	while (!feof($fpr))	{		$i += fwrite($fpw, fread($fpr, $chunk));		echo str_repeat("\x08", strlen($done));		$done = ($i >> 10) . ' KiB';		echo $done;	}	fclose($fpr);	fclose($fpw);	echo "\n";}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2009, 2010 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** This script will check your database for potentially dangerous flash BBCode tags*///// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it\n");/***/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);if (php_sapi_name() != 'cli'){	header('Content-Type: text/plain');}check_table_flash_bbcodes(POSTS_TABLE, 'post_id', 'post_text', 'bbcode_uid', 'bbcode_bitfield');check_table_flash_bbcodes(PRIVMSGS_TABLE, 'msg_id', 'message_text', 'bbcode_uid', 'bbcode_bitfield');check_table_flash_bbcodes(USERS_TABLE, 'user_id', 'user_sig', 'user_sig_bbcode_uid', 'user_sig_bbcode_bitfield');check_table_flash_bbcodes(FORUMS_TABLE, 'forum_id', 'forum_desc', 'forum_desc_uid', 'forum_desc_bitfield');check_table_flash_bbcodes(FORUMS_TABLE, 'forum_id', 'forum_rules', 'forum_rules_uid', 'forum_rules_bitfield');check_table_flash_bbcodes(GROUPS_TABLE, 'group_id', 'group_desc', 'group_desc_uid', 'group_desc_bitfield');echo "If potentially dangerous flash bbcodes were found, please reparse the posts using the Support Toolkit (http://www.phpbb.com/support/stk/) and/or file a ticket in the Incident Tracker (http://www.phpbb.com/incidents/).\n";function check_table_flash_bbcodes($table_name, $id_field, $content_field, $uid_field, $bitfield_field){	echo "Checking $content_field on $table_name\n";	$ids = get_table_flash_bbcode_pkids($table_name, $id_field, $content_field, $uid_field, $bitfield_field);	$size = sizeof($ids);	if ($size)	{		echo "Found $size potentially dangerous flash bbcodes.\n";		echo "$id_field: " . implode(', ', $ids) . "\n";	}	else	{		echo "No potentially dangerous flash bbcodes found.\n";	}	echo "\n";}function get_table_flash_bbcode_pkids($table_name, $id_field, $content_field, $uid_field, $bitfield_field){	global $db;	$ids = array();	$sql = "SELECT $id_field, $content_field, $uid_field, $bitfield_field		FROM $table_name		WHERE $content_field LIKE '%[/flash:%'			AND $bitfield_field <> ''";	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$uid = $row[$uid_field];		// thanks support toolkit		$content = html_entity_decode_utf8($row[$content_field]);		set_var($content, $content, 'string', true);		$content = utf8_normalize_nfc($content);		$bitfield_data = $row[$bitfield_field];		if (!is_valid_flash_bbcode($content, $uid) && has_flash_enabled($bitfield_data))		{			$ids[] = (int) $row[$id_field];		}	}	$db->sql_freeresult($result);	return $ids;}function get_flash_regex($uid){	return "#\[flash=([0-9]+),([0-9]+):$uid\](.*?)\[/flash:$uid\]#";}// extract all valid flash bbcodes// check if the bbcode content is a valid URL for each matchfunction is_valid_flash_bbcode($cleaned_content, $uid){	$regex = get_flash_regex($uid);	$url_regex = get_preg_expression('url');	$www_url_regex = get_preg_expression('www_url');	if (preg_match_all($regex, $cleaned_content, $matches))	{		foreach ($matches[3] as $flash_url)		{			if (!preg_match("#^($url_regex|$www_url_regex)$#i", $flash_url))			{				return false;			}		}	}	return true;}// check if a bitfield includes flash// 11 = flash bitfunction has_flash_enabled($bitfield_data){	$bitfield = new bitfield($bitfield_data);	return $bitfield->get(11);}// taken from support toolkitfunction html_entity_decode_utf8($string){	static $trans_tbl;	// replace numeric entities	$string = preg_replace('~&#x([0-9a-f]+);~ei', 'code2utf8(hexdec("\\1"))', $string);	$string = preg_replace('~&#([0-9]+);~e', 'code2utf8(\\1)', $string);	// replace literal entities	if (!isset($trans_tbl))	{		$trans_tbl = array();		foreach (get_html_translation_table(HTML_ENTITIES) as $val=>$key)			$trans_tbl[$key] = utf8_encode($val);	}	return strtr($string, $trans_tbl);}// taken from support toolkit// Returns the utf string corresponding to the unicode value (from php.net, courtesy - romans@void.lv)function code2utf8($num){	if ($num < 128) return chr($num);	if ($num < 2048) return chr(($num >> 6) + 192) . chr(($num & 63) + 128);	if ($num < 65536) return chr(($num >> 12) + 224) . chr((($num >> 6) & 63) + 128) . chr(($num & 63) + 128);	if ($num < 2097152) return chr(($num >> 18) + 240) . chr((($num >> 12) & 63) + 128) . chr((($num >> 6) & 63) + 128) . chr(($num & 63) + 128);	return '';}
<?php/**** acp_attachments [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ACP_ATTACHMENT_SETTINGS_EXPLAIN'	=> 'Here you can configure the main settings for attachments and the associated special categories.',	'ACP_EXTENSION_GROUPS_EXPLAIN'		=> 'Here you can add, delete, modify or disable your extension groups. Further options include the assignment of a special category to them, changing the download mechanism and defining an upload icon which will be displayed in front of the attachment which belongs to the group.',	'ACP_MANAGE_EXTENSIONS_EXPLAIN'		=> 'Here you can manage your allowed extensions. To activate your extensions, please refer to the extension groups management panel. We strongly recommend not to allow scripting extensions (such as <code>php</code>, <code>php3</code>, <code>php4</code>, <code>phtml</code>, <code>pl</code>, <code>cgi</code>, <code>py</code>, <code>rb</code>, <code>asp</code>, <code>aspx</code>, and so forth).',	'ACP_ORPHAN_ATTACHMENTS_EXPLAIN'	=> 'Here you are able to see orphaned files. This happens mostly if users are attaching files but not submitting the post. You are able to delete the files or attach them to existing posts. Attaching to posts requires a valid post ID, you have to determine this ID by yourself. This will assign the already uploaded attachment to the post you entered.',	'ADD_EXTENSION'						=> 'Add extension',	'ADD_EXTENSION_GROUP'				=> 'Add extension group',	'ADMIN_UPLOAD_ERROR'				=> 'Errors while trying to attach file: %s.',	'ALLOWED_FORUMS'					=> 'Allowed forums',	'ALLOWED_FORUMS_EXPLAIN'			=> 'Able to post the assigned extensions at the selected (or all if selected) forums.',	'ALLOWED_IN_PM_POST'				=> 'Allowed',	'ALLOW_ATTACHMENTS'					=> 'Allow attachments',	'ALLOW_ALL_FORUMS'					=> 'Allow all forums',	'ALLOW_IN_PM'						=> 'Allowed in private messaging',	'ALLOW_PM_ATTACHMENTS'				=> 'Allow attachments in private messages',	'ALLOW_SELECTED_FORUMS'				=> 'Only forums selected below',	'ASSIGNED_EXTENSIONS'				=> 'Assigned extensions',	'ASSIGNED_GROUP'					=> 'Assigned extension group',	'ATTACH_EXTENSIONS_URL'				=> 'Extensions',	'ATTACH_EXT_GROUPS_URL'				=> 'Extension groups',	'ATTACH_ID'							=> 'ID',	'ATTACH_MAX_FILESIZE'				=> 'Maximum file size',	'ATTACH_MAX_FILESIZE_EXPLAIN'		=> 'Maximum size of each file, with 0 being unlimited.',	'ATTACH_MAX_PM_FILESIZE'			=> 'Maximum file size messaging',	'ATTACH_MAX_PM_FILESIZE_EXPLAIN'	=> 'Maximum size of each file, with 0 being unlimited, attached to a private message.',	'ATTACH_ORPHAN_URL'					=> 'Orphan attachments',	'ATTACH_POST_ID'					=> 'Post ID',	'ATTACH_QUOTA'						=> 'Total attachment quota',	'ATTACH_QUOTA_EXPLAIN'				=> 'Maximum drive space available for attachments for the whole board, with 0 being unlimited.',	'ATTACH_TO_POST'					=> 'Attach file to post',	'CAT_FLASH_FILES'			=> 'Flash files',	'CAT_IMAGES'				=> 'Images',	'CAT_QUICKTIME_FILES'		=> 'Quicktime media files',	'CAT_RM_FILES'				=> 'RealMedia media files',	'CAT_WM_FILES'				=> 'Windows Media media files',	'CHECK_CONTENT'				=> 'Check attachment files',	'CHECK_CONTENT_EXPLAIN'		=> 'Some browsers can be tricked to assume an incorrect mimetype for uploaded files. This option ensures that such files likely to cause this are rejected.',	'CREATE_GROUP'				=> 'Create new group',	'CREATE_THUMBNAIL'			=> 'Create thumbnail',	'CREATE_THUMBNAIL_EXPLAIN'	=> 'Create a thumbnail in all possible situations.',	'DEFINE_ALLOWED_IPS'			=> 'Define allowed IPs/hostnames',	'DEFINE_DISALLOWED_IPS'			=> 'Define disallowed IPs/hostnames',	'DOWNLOAD_ADD_IPS_EXPLAIN'		=> 'To specify several different IPs or hostnames enter each on a new line. To specify a range of IP addresses separate the start and end with a hyphen (-), to specify a wildcard use *.',	'DOWNLOAD_REMOVE_IPS_EXPLAIN'	=> 'You can remove (or un-exclude) multiple IP addresses in one go using the appropriate combination of mouse and keyboard for your computer and browser. Excluded IPs have a blue background.',	'DISPLAY_INLINED'				=> 'Display images inline',	'DISPLAY_INLINED_EXPLAIN'		=> 'If set to No image attachments will show as a link.',	'DISPLAY_ORDER'					=> 'Attachment display order',	'DISPLAY_ORDER_EXPLAIN'			=> 'Display attachments ordered by time.',	'EDIT_EXTENSION_GROUP'			=> 'Edit extension group',	'EXCLUDE_ENTERED_IP'			=> 'Enable this to exclude the entered IP/hostname.',	'EXCLUDE_FROM_ALLOWED_IP'		=> 'Exclude IP from allowed IPs/hostnames',	'EXCLUDE_FROM_DISALLOWED_IP'	=> 'Exclude IP from disallowed IPs/hostnames',	'EXTENSIONS_UPDATED'			=> 'Extensions successfully updated.',	'EXTENSION_EXIST'				=> 'The extension %s already exists.',	'EXTENSION_GROUP'				=> 'Extension group',	'EXTENSION_GROUPS'				=> 'Extension groups',	'EXTENSION_GROUP_DELETED'		=> 'Extension group successfully deleted.',	'EXTENSION_GROUP_EXIST'			=> 'The extension group %s already exists.',	'EXT_GROUP_ARCHIVES'			=> 'Archives',	'EXT_GROUP_DOCUMENTS'			=> 'Documents',	'EXT_GROUP_DOWNLOADABLE_FILES'	=> 'Downloadable Files',	'EXT_GROUP_FLASH_FILES'			=> 'Flash Files',	'EXT_GROUP_IMAGES'				=> 'Images',	'EXT_GROUP_PLAIN_TEXT'			=> 'Plain Text',	'EXT_GROUP_QUICKTIME_MEDIA'		=> 'Quicktime Media',	'EXT_GROUP_REAL_MEDIA'			=> 'Real Media',	'EXT_GROUP_WINDOWS_MEDIA'		=> 'Windows Media',	'GO_TO_EXTENSIONS'		=> 'Go to extension management screen',	'GROUP_NAME'			=> 'Group name',	'IMAGE_LINK_SIZE'			=> 'Image link dimensions',	'IMAGE_LINK_SIZE_EXPLAIN'	=> 'Display image attachment as an inline text link if image is larger than this. To disable this behaviour, set the values to 0px by 0px.',	'IMAGICK_PATH'				=> 'Imagemagick path',	'IMAGICK_PATH_EXPLAIN'		=> 'Full path to the imagemagick convert application, e.g. <samp>/usr/bin/</samp>.',	'MAX_ATTACHMENTS'				=> 'Maximum number of attachments per post',	'MAX_ATTACHMENTS_PM'			=> 'Maximum number of attachments per private message',	'MAX_EXTGROUP_FILESIZE'			=> 'Maximum file size',	'MAX_IMAGE_SIZE'				=> 'Maximum image dimensions',	'MAX_IMAGE_SIZE_EXPLAIN'		=> 'Maximum size of image attachments. Set both values to 0px by 0px to disable dimension checking.',	'MAX_THUMB_WIDTH'				=> 'Maximum thumbnail width in pixel',	'MAX_THUMB_WIDTH_EXPLAIN'		=> 'A generated thumbnail will not exceed the width set here.',	'MIN_THUMB_FILESIZE'			=> 'Minimum thumbnail file size',	'MIN_THUMB_FILESIZE_EXPLAIN'	=> 'Do not create a thumbnail for images smaller than this.',	'MODE_INLINE'					=> 'Inline',	'MODE_PHYSICAL'					=> 'Physical',	'NOT_ALLOWED_IN_PM'			=> 'Only allowed in posts',	'NOT_ALLOWED_IN_PM_POST'	=> 'Not allowed',	'NOT_ASSIGNED'				=> 'Not assigned',	'NO_EXT_GROUP'				=> 'None',	'NO_EXT_GROUP_NAME'			=> 'No group name entered',	'NO_EXT_GROUP_SPECIFIED'	=> 'No extension group specified.',	'NO_FILE_CAT'				=> 'None',	'NO_IMAGE'					=> 'No image',	'NO_THUMBNAIL_SUPPORT'		=> 'Thumbnail support has been disabled. For proper functionality either the GD extension need to be available or imagemagick being installed. Both were not found.',	'NO_UPLOAD_DIR'				=> 'The upload directory you specified does not exist.',	'NO_WRITE_UPLOAD'			=> 'The upload directory you specified cannot be written to. Please alter the permissions to allow the webserver to write to it.',	'ONLY_ALLOWED_IN_PM'	=> 'Only allowed in private messages',	'ORDER_ALLOW_DENY'		=> 'Allow',	'ORDER_DENY_ALLOW'		=> 'Deny',	'REMOVE_ALLOWED_IPS'		=> 'Remove or un-exclude <em>allowed</em> IPs/hostnames',	'REMOVE_DISALLOWED_IPS'		=> 'Remove or un-exclude <em>disallowed</em> IPs/hostnames',	'SEARCH_IMAGICK'				=> 'Search for Imagemagick',	'SECURE_ALLOW_DENY'				=> 'Allow/Deny list',	'SECURE_ALLOW_DENY_EXPLAIN'		=> 'Change the default behaviour when secure downloads are enabled of the Allow/Deny list to that of a <strong>whitelist</strong> (Allow) or a <strong>blacklist</strong> (Deny).',	'SECURE_DOWNLOADS'				=> 'Enable secure downloads',	'SECURE_DOWNLOADS_EXPLAIN'		=> 'With this option enabled, downloads are limited to IPs/hostnames you define.',	'SECURE_DOWNLOAD_NOTICE'		=> 'Secure Downloads are not enabled. The settings below will be applied after enabling secure downloads.',	'SECURE_DOWNLOAD_UPDATE_SUCCESS'=> 'The IP list has been updated successfully.',	'SECURE_EMPTY_REFERRER'			=> 'Allow empty referrer',	'SECURE_EMPTY_REFERRER_EXPLAIN'	=> 'Secure downloads are based on referrers. Do you want to allow downloads for those omitting the referrer?',	'SETTINGS_CAT_IMAGES'			=> 'Image category settings',	'SPECIAL_CATEGORY'				=> 'Special category',	'SPECIAL_CATEGORY_EXPLAIN'		=> 'Special categories differ between the way presented within posts.',	'SUCCESSFULLY_UPLOADED'			=> 'Successfully uploaded.',	'SUCCESS_EXTENSION_GROUP_ADD'	=> 'Extension group successfully added.',	'SUCCESS_EXTENSION_GROUP_EDIT'	=> 'Extension group successfully updated.',	'UPLOADING_FILES'				=> 'Uploading files',	'UPLOADING_FILE_TO'				=> 'Uploading file %1$s to post number %2$d',	'UPLOAD_DENIED_FORUM'			=> 'You do not have the permission to upload files to forum %s.',	'UPLOAD_DIR'					=> 'Upload directory',	'UPLOAD_DIR_EXPLAIN'			=> 'Storage path for attachments. Please note that if you change this directory while already having uploaded attachments you need to manually copy the files to their new location.',	'UPLOAD_ICON'					=> 'Upload icon',	'UPLOAD_NOT_DIR'				=> 'The upload location you specified does not appear to be a directory.',));?>
<?php/**** @package dbal* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}include_once($phpbb_root_path . 'includes/db/dbal.' . $phpEx);/*** MySQL4 Database Abstraction Layer* Compatible with:* MySQL 3.23+* MySQL 4.0+* MySQL 4.1+* MySQL 5.0+* @package dbal*/class dbal_mysql extends dbal{	var $multi_insert = true;	/**	* Connect to server	* @access public	*/	function sql_connect($sqlserver, $sqluser, $sqlpassword, $database, $port = false, $persistency = false, $new_link = false)	{		$this->persistency = $persistency;		$this->user = $sqluser;		$this->server = $sqlserver . (($port) ? ':' . $port : '');		$this->dbname = $database;		$this->sql_layer = 'mysql4';		$this->db_connect_id = ($this->persistency) ? @mysql_pconnect($this->server, $this->user, $sqlpassword) : @mysql_connect($this->server, $this->user, $sqlpassword, $new_link);		if ($this->db_connect_id && $this->dbname != '')		{			if (@mysql_select_db($this->dbname, $this->db_connect_id))			{				// Determine what version we are using and if it natively supports UNICODE				if (version_compare($this->sql_server_info(true), '4.1.0', '>='))				{					@mysql_query("SET NAMES 'utf8'", $this->db_connect_id);					// enforce strict mode on databases that support it					if (version_compare($this->sql_server_info(true), '5.0.2', '>='))					{						$result = @mysql_query('SELECT @@session.sql_mode AS sql_mode', $this->db_connect_id);						$row = @mysql_fetch_assoc($result);						@mysql_free_result($result);						$modes = array_map('trim', explode(',', $row['sql_mode']));						// TRADITIONAL includes STRICT_ALL_TABLES and STRICT_TRANS_TABLES						if (!in_array('TRADITIONAL', $modes))						{							if (!in_array('STRICT_ALL_TABLES', $modes))							{								$modes[] = 'STRICT_ALL_TABLES';							}							if (!in_array('STRICT_TRANS_TABLES', $modes))							{								$modes[] = 'STRICT_TRANS_TABLES';							}						}						$mode = implode(',', $modes);						@mysql_query("SET SESSION sql_mode='{$mode}'", $this->db_connect_id);					}				}				else if (version_compare($this->sql_server_info(true), '4.0.0', '<'))				{					$this->sql_layer = 'mysql';				}				return $this->db_connect_id;			}		}		return $this->sql_error('');	}	/**	* Version information about used database	* @param bool $raw if true, only return the fetched sql_server_version	* @param bool $use_cache If true, it is safe to retrieve the value from the cache	* @return string sql server version	*/	function sql_server_info($raw = false, $use_cache = true)	{		global $cache;		if (!$use_cache || empty($cache) || ($this->sql_server_version = $cache->get('mysql_version')) === false)		{			$result = @mysql_query('SELECT VERSION() AS version', $this->db_connect_id);			$row = @mysql_fetch_assoc($result);			@mysql_free_result($result);			$this->sql_server_version = $row['version'];			if (!empty($cache) && $use_cache)			{				$cache->put('mysql_version', $this->sql_server_version);			}		}		return ($raw) ? $this->sql_server_version : 'MySQL ' . $this->sql_server_version;	}	/**	* SQL Transaction	* @access private	*/	function _sql_transaction($status = 'begin')	{		switch ($status)		{			case 'begin':				return @mysql_query('BEGIN', $this->db_connect_id);			break;			case 'commit':				return @mysql_query('COMMIT', $this->db_connect_id);			break;			case 'rollback':				return @mysql_query('ROLLBACK', $this->db_connect_id);			break;		}		return true;	}	/**	* Base query method	*	* @param	string	$query		Contains the SQL query which shall be executed	* @param	int		$cache_ttl	Either 0 to avoid caching or the time in seconds which the result shall be kept in cache	* @return	mixed				When casted to bool the returned value returns true on success and false on failure	*	* @access	public	*/	function sql_query($query = '', $cache_ttl = 0)	{		if ($query != '')		{			global $cache;			// EXPLAIN only in extra debug mode			if (defined('DEBUG_EXTRA'))			{				$this->sql_report('start', $query);			}			$this->query_result = ($cache_ttl && method_exists($cache, 'sql_load')) ? $cache->sql_load($query) : false;			$this->sql_add_num_queries($this->query_result);			if ($this->query_result === false)			{				if (($this->query_result = @mysql_query($query, $this->db_connect_id)) === false)				{					$this->sql_error($query);				}				if (defined('DEBUG_EXTRA'))				{					$this->sql_report('stop', $query);				}				if ($cache_ttl && method_exists($cache, 'sql_save'))				{					$this->open_queries[(int) $this->query_result] = $this->query_result;					$cache->sql_save($query, $this->query_result, $cache_ttl);				}				else if (strpos($query, 'SELECT') === 0 && $this->query_result)				{					$this->open_queries[(int) $this->query_result] = $this->query_result;				}			}			else if (defined('DEBUG_EXTRA'))			{				$this->sql_report('fromcache', $query);			}		}		else		{			return false;		}		return $this->query_result;	}	/**	* Build LIMIT query	*/	function _sql_query_limit($query, $total, $offset = 0, $cache_ttl = 0)	{		$this->query_result = false;		// if $total is set to 0 we do not want to limit the number of rows		if ($total == 0)		{			// Having a value of -1 was always a bug			$total = '18446744073709551615';		}		$query .= "\n LIMIT " . ((!empty($offset)) ? $offset . ', ' . $total : $total);		return $this->sql_query($query, $cache_ttl);	}	/**	* Return number of affected rows	*/	function sql_affectedrows()	{		return ($this->db_connect_id) ? @mysql_affected_rows($this->db_connect_id) : false;	}	/**	* Fetch current row	*/	function sql_fetchrow($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_fetchrow($query_id);		}		return ($query_id !== false) ? @mysql_fetch_assoc($query_id) : false;	}	/**	* Seek to given row number	* rownum is zero-based	*/	function sql_rowseek($rownum, &$query_id)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_rowseek($rownum, $query_id);		}		return ($query_id !== false) ? @mysql_data_seek($query_id, $rownum) : false;	}	/**	* Get last inserted id after insert statement	*/	function sql_nextid()	{		return ($this->db_connect_id) ? @mysql_insert_id($this->db_connect_id) : false;	}	/**	* Free sql result	*/	function sql_freeresult($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_freeresult($query_id);		}		if (isset($this->open_queries[(int) $query_id]))		{			unset($this->open_queries[(int) $query_id]);			return @mysql_free_result($query_id);		}		return false;	}	/**	* Escape string used in sql query	*/	function sql_escape($msg)	{		if (!$this->db_connect_id)		{			return @mysql_real_escape_string($msg);		}		return @mysql_real_escape_string($msg, $this->db_connect_id);	}	/**	* Build LIKE expression	* @access private	*/	function _sql_like_expression($expression)	{		return $expression;	}	/**	* Build db-specific query data	* @access private	*/	function _sql_custom_build($stage, $data)	{		switch ($stage)		{			case 'FROM':				$data = '(' . $data . ')';			break;		}		return $data;	}	/**	* return sql error array	* @access private	*/	function _sql_error()	{		if (!$this->db_connect_id)		{			return array(				'message'	=> @mysql_error(),				'code'		=> @mysql_errno()			);		}		return array(			'message'	=> @mysql_error($this->db_connect_id),			'code'		=> @mysql_errno($this->db_connect_id)		);	}	/**	* Close sql connection	* @access private	*/	function _sql_close()	{		return @mysql_close($this->db_connect_id);	}	/**	* Build db-specific report	* @access private	*/	function _sql_report($mode, $query = '')	{		static $test_prof;		// current detection method, might just switch to see the existance of INFORMATION_SCHEMA.PROFILING		if ($test_prof === null)		{			$test_prof = false;			if (version_compare($this->sql_server_info(true), '5.0.37', '>=') && version_compare($this->sql_server_info(true), '5.1', '<'))			{				$test_prof = true;			}		}		switch ($mode)		{			case 'start':				$explain_query = $query;				if (preg_match('/UPDATE ([a-z0-9_]+).*?WHERE(.*)/s', $query, $m))				{					$explain_query = 'SELECT * FROM ' . $m[1] . ' WHERE ' . $m[2];				}				else if (preg_match('/DELETE FROM ([a-z0-9_]+).*?WHERE(.*)/s', $query, $m))				{					$explain_query = 'SELECT * FROM ' . $m[1] . ' WHERE ' . $m[2];				}				if (preg_match('/^SELECT/', $explain_query))				{					$html_table = false;					// begin profiling					if ($test_prof)					{						@mysql_query('SET profiling = 1;', $this->db_connect_id);					}					if ($result = @mysql_query("EXPLAIN $explain_query", $this->db_connect_id))					{						while ($row = @mysql_fetch_assoc($result))						{							$html_table = $this->sql_report('add_select_row', $query, $html_table, $row);						}					}					@mysql_free_result($result);					if ($html_table)					{						$this->html_hold .= '</table>';					}					if ($test_prof)					{						$html_table = false;						// get the last profile						if ($result = @mysql_query('SHOW PROFILE ALL;', $this->db_connect_id))						{							$this->html_hold .= '<br />';							while ($row = @mysql_fetch_assoc($result))							{								// make <unknown> HTML safe								if (!empty($row['Source_function']))								{									$row['Source_function'] = str_replace(array('<', '>'), array('&lt;', '&gt;'), $row['Source_function']);								}								// remove unsupported features								foreach ($row as $key => $val)								{									if ($val === null)									{										unset($row[$key]);									}								}								$html_table = $this->sql_report('add_select_row', $query, $html_table, $row);							}						}						@mysql_free_result($result);						if ($html_table)						{							$this->html_hold .= '</table>';						}						@mysql_query('SET profiling = 0;', $this->db_connect_id);					}				}			break;			case 'fromcache':				$endtime = explode(' ', microtime());				$endtime = $endtime[0] + $endtime[1];				$result = @mysql_query($query, $this->db_connect_id);				while ($void = @mysql_fetch_assoc($result))				{					// Take the time spent on parsing rows into account				}				@mysql_free_result($result);				$splittime = explode(' ', microtime());				$splittime = $splittime[0] + $splittime[1];				$this->sql_report('record_fromcache', $query, $endtime, $splittime);			break;		}	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License** This file creates SQL statements to upgrade phpBB on MySQL 3.x/4.0.x to 4.1.x/5.x**///// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);$prefix = $table_prefix;$newline = "\n";if (PHP_SAPI !== 'cli'){	$newline = '<br>';}$sql = 'DESCRIBE ' . POSTS_TABLE . ' post_text';$result = $db->sql_query($sql);$row = $db->sql_fetchrow($result);$db->sql_freeresult($result);$mysql_indexer = $drop_index = false;if (strtolower($row['Type']) === 'mediumtext'){	$mysql_indexer = true;}if (strtolower($row['Key']) === 'mul'){	$drop_index = true;}echo "USE $dbname;$newline$newline";@set_time_limit(0);$schema_data = get_schema_struct();$dbms_type_map = array(	'mysql_41'	=> array(		'INT:'		=> 'int(%d)',		'BINT'		=> 'bigint(20)',		'UINT'		=> 'mediumint(8) UNSIGNED',		'UINT:'		=> 'int(%d) UNSIGNED',		'TINT:'		=> 'tinyint(%d)',		'USINT'		=> 'smallint(4) UNSIGNED',		'BOOL'		=> 'tinyint(1) UNSIGNED',		'VCHAR'		=> 'varchar(255)',		'VCHAR:'	=> 'varchar(%d)',		'CHAR:'		=> 'char(%d)',		'XSTEXT'	=> 'text',		'XSTEXT_UNI'=> 'varchar(100)',		'STEXT'		=> 'text',		'STEXT_UNI'	=> 'varchar(255)',		'TEXT'		=> 'text',		'TEXT_UNI'	=> 'text',		'MTEXT'		=> 'mediumtext',		'MTEXT_UNI'	=> 'mediumtext',		'TIMESTAMP'	=> 'int(11) UNSIGNED',		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'varchar(255)',		'VCHAR_UNI:'=> 'varchar(%d)',		'VCHAR_CI'	=> 'varchar(255)',		'VARBINARY'	=> 'varbinary(255)',	),	'mysql_40'	=> array(		'INT:'		=> 'int(%d)',		'BINT'		=> 'bigint(20)',		'UINT'		=> 'mediumint(8) UNSIGNED',		'UINT:'		=> 'int(%d) UNSIGNED',		'TINT:'		=> 'tinyint(%d)',		'USINT'		=> 'smallint(4) UNSIGNED',		'BOOL'		=> 'tinyint(1) UNSIGNED',		'VCHAR'		=> 'varbinary(255)',		'VCHAR:'	=> 'varbinary(%d)',		'CHAR:'		=> 'binary(%d)',		'XSTEXT'	=> 'blob',		'XSTEXT_UNI'=> 'blob',		'STEXT'		=> 'blob',		'STEXT_UNI'	=> 'blob',		'TEXT'		=> 'blob',		'TEXT_UNI'	=> 'blob',		'MTEXT'		=> 'mediumblob',		'MTEXT_UNI'	=> 'mediumblob',		'TIMESTAMP'	=> 'int(11) UNSIGNED',		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'blob',		'VCHAR_UNI:'=> array('varbinary(%d)', 'limit' => array('mult', 3, 255, 'blob')),		'VCHAR_CI'	=> 'blob',		'VARBINARY'	=> 'varbinary(255)',	),);foreach ($schema_data as $table_name => $table_data){	$table_name = str_replace('phpbb_', $prefix, $table_name);	// Write comment about table	echo "# Table: '{$table_name}'$newline";	// Create Table statement	$generator = $textimage = false;	// Do we need to DROP a fulltext index before we alter the table?	if ($table_name == ($prefix . 'posts') && $drop_index)	{		echo "ALTER TABLE {$table_name}{$newline}";		echo "DROP INDEX post_text,{$newline}DROP INDEX post_subject,{$newline}DROP INDEX post_content;{$newline}{$newline}";	}	$line = "ALTER TABLE {$table_name} $newline";	// Table specific so we don't get overlap	$modded_array = array();	// Write columns one by one...	foreach ($table_data['COLUMNS'] as $column_name => $column_data)	{		// Get type		if (strpos($column_data[0], ':') !== false)		{			list($orig_column_type, $column_length) = explode(':', $column_data[0]);			$column_type = sprintf($dbms_type_map['mysql_41'][$orig_column_type . ':'], $column_length);			if (isset($dbms_type_map['mysql_40'][$orig_column_type . ':']['limit'][0]))			{				switch ($dbms_type_map['mysql_40'][$orig_column_type . ':']['limit'][0])				{					case 'mult':						if (($column_length * $dbms_type_map['mysql_40'][$orig_column_type . ':']['limit'][1]) > $dbms_type_map['mysql_40'][$orig_column_type . ':']['limit'][2])						{							$modded_array[$column_name] = $column_type;						}					break;				}			}			$orig_column_type .= ':';		}		else		{			$orig_column_type = $column_data[0];			$other_column_type = $dbms_type_map['mysql_40'][$column_data[0]];			if ($other_column_type == 'text' || $other_column_type == 'blob')			{				$modded_array[$column_name] = $column_type;			}			$column_type = $dbms_type_map['mysql_41'][$column_data[0]];		}		// Adjust default value if db-dependant specified		if (is_array($column_data[1]))		{			$column_data[1] = (isset($column_data[1][$dbms])) ? $column_data[1][$dbms] : $column_data[1]['default'];		}		$line .= "\tMODIFY {$column_name} {$column_type} ";		// For hexadecimal values do not use single quotes		if (!is_null($column_data[1]) && substr($column_type, -4) !== 'text' && substr($column_type, -4) !== 'blob')		{			$line .= (strpos($column_data[1], '0x') === 0) ? "DEFAULT {$column_data[1]} " : "DEFAULT '{$column_data[1]}' ";		}		$line .= 'NOT NULL';		if (isset($column_data[2]))		{			if ($column_data[2] == 'auto_increment')			{				$line .= ' auto_increment';			}			else if ($column_data[2] == 'true_sort')			{				$line .= ' COLLATE utf8_unicode_ci';			}			else if ($column_data[2] == 'no_sort')			{				$line .= ' COLLATE utf8_bin';			}		}		else if (preg_match('/(?:var)?char|(?:medium)?text/i', $column_type))		{			$line .= ' COLLATE utf8_bin';		}		$line .= ",$newline";	}	// Write Keys	if (isset($table_data['KEYS']))	{		foreach ($table_data['KEYS'] as $key_name => $key_data)		{			$temp = '';			if (!is_array($key_data[1]))			{				$key_data[1] = array($key_data[1]);			}			$temp .= ($key_data[0] == 'INDEX') ? "\tADD KEY" : '';			$temp .= ($key_data[0] == 'UNIQUE') ? "\tADD UNIQUE" : '';			$repair = false;			foreach ($key_data[1] as $key => $col_name)			{				if (isset($modded_array[$col_name]))				{					$repair = true;				}			}			if ($repair)			{				$line .= "\tDROP INDEX " . $key_name . ",$newline";				$line .= $temp;				$line .= ' ' . $key_name . ' (' . implode(', ', $key_data[1]) . "),$newline";			}		}	}	//$line .= "\tCONVERT TO CHARACTER SET `utf8`$newline";	$line .= "\tDEFAULT CHARSET=utf8 COLLATE=utf8_bin;$newline$newline";	echo $line . "$newline";	// Do we now need to re-add the fulltext index? ;)	if ($table_name == ($prefix . 'posts') && $drop_index)	{		echo "ALTER TABLE $table_name ADD FULLTEXT (post_subject), ADD FULLTEXT (post_text), ADD FULLTEXT post_content (post_subject, post_text);{$newline}";	}}/*** Define the basic structure* The format:*		array('{TABLE_NAME}' => {TABLE_DATA})*		{TABLE_DATA}:*			COLUMNS = array({column_name} = array({column_type}, {default}, {auto_increment}))*			PRIMARY_KEY = {column_name(s)}*			KEYS = array({key_name} = array({key_type}, {column_name(s)})),**	Column Types:*	INT:x		=> SIGNED int(x)*	BINT		=> BIGINT*	UINT		=> mediumint(8) UNSIGNED*	UINT:x		=> int(x) UNSIGNED*	TINT:x		=> tinyint(x)*	USINT		=> smallint(4) UNSIGNED (for _order columns)*	BOOL		=> tinyint(1) UNSIGNED*	VCHAR		=> varchar(255)*	CHAR:x		=> char(x)*	XSTEXT_UNI	=> text for storing 100 characters (topic_title for example)*	STEXT_UNI	=> text for storing 255 characters (normal input field with a max of 255 single-byte chars) - same as VCHAR_UNI*	TEXT_UNI	=> text for storing 3000 characters (short text, descriptions, comments, etc.)*	MTEXT_UNI	=> mediumtext (post text, large text)*	VCHAR:x		=> varchar(x)*	TIMESTAMP	=> int(11) UNSIGNED*	DECIMAL		=> decimal number (5,2)*	DECIMAL:	=> decimal number (x,2)*	PDECIMAL	=> precision decimal number (6,3)*	PDECIMAL:	=> precision decimal number (x,3)*	VCHAR_UNI	=> varchar(255) BINARY*	VCHAR_CI	=> varchar_ci for postgresql, others VCHAR*/function get_schema_struct(){	$schema_data = array();	$schema_data['phpbb_attachments'] = array(		'COLUMNS'		=> array(			'attach_id'			=> array('UINT', NULL, 'auto_increment'),			'post_msg_id'		=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'in_message'		=> array('BOOL', 0),			'poster_id'			=> array('UINT', 0),			'is_orphan'			=> array('BOOL', 1),			'physical_filename'	=> array('VCHAR', ''),			'real_filename'		=> array('VCHAR', ''),			'download_count'	=> array('UINT', 0),			'attach_comment'	=> array('TEXT_UNI', ''),			'extension'			=> array('VCHAR:100', ''),			'mimetype'			=> array('VCHAR:100', ''),			'filesize'			=> array('UINT:20', 0),			'filetime'			=> array('TIMESTAMP', 0),			'thumbnail'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'attach_id',		'KEYS'			=> array(			'filetime'			=> array('INDEX', 'filetime'),			'post_msg_id'		=> array('INDEX', 'post_msg_id'),			'topic_id'			=> array('INDEX', 'topic_id'),			'poster_id'			=> array('INDEX', 'poster_id'),			'is_orphan'			=> array('INDEX', 'is_orphan'),		),	);	$schema_data['phpbb_acl_groups'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_role_id'		=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'KEYS'			=> array(			'group_id'		=> array('INDEX', 'group_id'),			'auth_opt_id'	=> array('INDEX', 'auth_option_id'),			'auth_role_id'	=> array('INDEX', 'auth_role_id'),		),	);	$schema_data['phpbb_acl_options'] = array(		'COLUMNS'		=> array(			'auth_option_id'	=> array('UINT', NULL, 'auto_increment'),			'auth_option'		=> array('VCHAR:50', ''),			'is_global'			=> array('BOOL', 0),			'is_local'			=> array('BOOL', 0),			'founder_only'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'auth_option_id',		'KEYS'			=> array(			'auth_option'		=> array('UNIQUE', 'auth_option'),		),	);	$schema_data['phpbb_acl_roles'] = array(		'COLUMNS'		=> array(			'role_id'			=> array('UINT', NULL, 'auto_increment'),			'role_name'			=> array('VCHAR_UNI', ''),			'role_description'	=> array('TEXT_UNI', ''),			'role_type'			=> array('VCHAR:10', ''),			'role_order'		=> array('USINT', 0),		),		'PRIMARY_KEY'	=> 'role_id',		'KEYS'			=> array(			'role_type'			=> array('INDEX', 'role_type'),			'role_order'		=> array('INDEX', 'role_order'),		),	);	$schema_data['phpbb_acl_roles_data'] = array(		'COLUMNS'		=> array(			'role_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'PRIMARY_KEY'	=> array('role_id', 'auth_option_id'),		'KEYS'			=> array(			'ath_op_id'			=> array('INDEX', 'auth_option_id'),		),	);	$schema_data['phpbb_acl_users'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_role_id'		=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'KEYS'			=> array(			'user_id'			=> array('INDEX', 'user_id'),			'auth_option_id'	=> array('INDEX', 'auth_option_id'),			'auth_role_id'		=> array('INDEX', 'auth_role_id'),		),	);	$schema_data['phpbb_banlist'] = array(		'COLUMNS'		=> array(			'ban_id'			=> array('UINT', NULL, 'auto_increment'),			'ban_userid'		=> array('UINT', 0),			'ban_ip'			=> array('VCHAR:40', ''),			'ban_email'			=> array('VCHAR_UNI:100', ''),			'ban_start'			=> array('TIMESTAMP', 0),			'ban_end'			=> array('TIMESTAMP', 0),			'ban_exclude'		=> array('BOOL', 0),			'ban_reason'		=> array('VCHAR_UNI', ''),			'ban_give_reason'	=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'			=> 'ban_id',		'KEYS'			=> array(			'ban_end'			=> array('INDEX', 'ban_end'),			'ban_user'			=> array('INDEX', array('ban_userid', 'ban_exclude')),			'ban_email'			=> array('INDEX', array('ban_email', 'ban_exclude')),			'ban_ip'			=> array('INDEX', array('ban_ip', 'ban_exclude')),		),	);	$schema_data['phpbb_bbcodes'] = array(		'COLUMNS'		=> array(			'bbcode_id'				=> array('USINT', 0),			'bbcode_tag'			=> array('VCHAR:16', ''),			'bbcode_helpline'		=> array('VCHAR_UNI', ''),			'display_on_posting'	=> array('BOOL', 0),			'bbcode_match'			=> array('TEXT_UNI', ''),			'bbcode_tpl'			=> array('MTEXT_UNI', ''),			'first_pass_match'		=> array('MTEXT_UNI', ''),			'first_pass_replace'	=> array('MTEXT_UNI', ''),			'second_pass_match'		=> array('MTEXT_UNI', ''),			'second_pass_replace'	=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'bbcode_id',		'KEYS'			=> array(			'display_on_post'		=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_bookmarks'] = array(		'COLUMNS'		=> array(			'topic_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'			=> array('topic_id', 'user_id'),	);	$schema_data['phpbb_bots'] = array(		'COLUMNS'		=> array(			'bot_id'			=> array('UINT', NULL, 'auto_increment'),			'bot_active'		=> array('BOOL', 1),			'bot_name'			=> array('STEXT_UNI', ''),			'user_id'			=> array('UINT', 0),			'bot_agent'			=> array('VCHAR', ''),			'bot_ip'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'bot_id',		'KEYS'			=> array(			'bot_active'		=> array('INDEX', 'bot_active'),		),	);	$schema_data['phpbb_config'] = array(		'COLUMNS'		=> array(			'config_name'		=> array('VCHAR', ''),			'config_value'		=> array('VCHAR_UNI', ''),			'is_dynamic'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'config_name',		'KEYS'			=> array(			'is_dynamic'		=> array('INDEX', 'is_dynamic'),		),	);	$schema_data['phpbb_confirm'] = array(		'COLUMNS'		=> array(			'confirm_id'		=> array('CHAR:32', ''),			'session_id'		=> array('CHAR:32', ''),			'confirm_type'		=> array('TINT:3', 0),			'code'				=> array('VCHAR:8', ''),			'seed'				=> array('UINT:10', 0),			'attempts'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> array('session_id', 'confirm_id'),		'KEYS'			=> array(			'confirm_type'		=> array('INDEX', 'confirm_type'),		),	);	$schema_data['phpbb_disallow'] = array(		'COLUMNS'		=> array(			'disallow_id'		=> array('UINT', NULL, 'auto_increment'),			'disallow_username'	=> array('VCHAR_UNI:255', ''),		),		'PRIMARY_KEY'	=> 'disallow_id',	);	$schema_data['phpbb_drafts'] = array(		'COLUMNS'		=> array(			'draft_id'			=> array('UINT', NULL, 'auto_increment'),			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'save_time'			=> array('TIMESTAMP', 0),			'draft_subject'		=> array('STEXT_UNI', ''),			'draft_message'		=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'draft_id',		'KEYS'			=> array(			'save_time'			=> array('INDEX', 'save_time'),		),	);	$schema_data['phpbb_extensions'] = array(		'COLUMNS'		=> array(			'extension_id'		=> array('UINT', NULL, 'auto_increment'),			'group_id'			=> array('UINT', 0),			'extension'			=> array('VCHAR:100', ''),		),		'PRIMARY_KEY'	=> 'extension_id',	);	$schema_data['phpbb_extension_groups'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', NULL, 'auto_increment'),			'group_name'		=> array('VCHAR_UNI', ''),			'cat_id'			=> array('TINT:2', 0),			'allow_group'		=> array('BOOL', 0),			'download_mode'		=> array('BOOL', 1),			'upload_icon'		=> array('VCHAR', ''),			'max_filesize'		=> array('UINT:20', 0),			'allowed_forums'	=> array('TEXT', ''),			'allow_in_pm'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'group_id',	);	$schema_data['phpbb_forums'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', NULL, 'auto_increment'),			'parent_id'				=> array('UINT', 0),			'left_id'				=> array('UINT', 0),			'right_id'				=> array('UINT', 0),			'forum_parents'			=> array('MTEXT', ''),			'forum_name'			=> array('STEXT_UNI', ''),			'forum_desc'			=> array('TEXT_UNI', ''),			'forum_desc_bitfield'	=> array('VCHAR:255', ''),			'forum_desc_options'	=> array('UINT:11', 7),			'forum_desc_uid'		=> array('VCHAR:8', ''),			'forum_link'			=> array('VCHAR_UNI', ''),			'forum_password'		=> array('VCHAR_UNI:40', ''),			'forum_style'			=> array('UINT', 0),			'forum_image'			=> array('VCHAR', ''),			'forum_rules'			=> array('TEXT_UNI', ''),			'forum_rules_link'		=> array('VCHAR_UNI', ''),			'forum_rules_bitfield'	=> array('VCHAR:255', ''),			'forum_rules_options'	=> array('UINT:11', 7),			'forum_rules_uid'		=> array('VCHAR:8', ''),			'forum_topics_per_page'	=> array('TINT:4', 0),			'forum_type'			=> array('TINT:4', 0),			'forum_status'			=> array('TINT:4', 0),			'forum_posts'			=> array('UINT', 0),			'forum_topics'			=> array('UINT', 0),			'forum_topics_real'		=> array('UINT', 0),			'forum_last_post_id'	=> array('UINT', 0),			'forum_last_poster_id'	=> array('UINT', 0),			'forum_last_post_subject' => array('STEXT_UNI', ''),			'forum_last_post_time'	=> array('TIMESTAMP', 0),			'forum_last_poster_name'=> array('VCHAR_UNI', ''),			'forum_last_poster_colour'=> array('VCHAR:6', ''),			'forum_flags'			=> array('TINT:4', 32),			'forum_options'			=> array('UINT:20', 0),			'display_subforum_list'	=> array('BOOL', 1),			'display_on_index'		=> array('BOOL', 1),			'enable_indexing'		=> array('BOOL', 1),			'enable_icons'			=> array('BOOL', 1),			'enable_prune'			=> array('BOOL', 0),			'prune_next'			=> array('TIMESTAMP', 0),			'prune_days'			=> array('UINT', 0),			'prune_viewed'			=> array('UINT', 0),			'prune_freq'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'forum_id',		'KEYS'			=> array(			'left_right_id'			=> array('INDEX', array('left_id', 'right_id')),			'forum_lastpost_id'		=> array('INDEX', 'forum_last_post_id'),		),	);	$schema_data['phpbb_forums_access'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'session_id'			=> array('CHAR:32', ''),		),		'PRIMARY_KEY'	=> array('forum_id', 'user_id', 'session_id'),	);	$schema_data['phpbb_forums_track'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'mark_time'				=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'forum_id'),	);	$schema_data['phpbb_forums_watch'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'notify_status'			=> array('BOOL', 0),		),		'KEYS'			=> array(			'forum_id'				=> array('INDEX', 'forum_id'),			'user_id'				=> array('INDEX', 'user_id'),			'notify_stat'			=> array('INDEX', 'notify_status'),		),	);	$schema_data['phpbb_groups'] = array(		'COLUMNS'		=> array(			'group_id'				=> array('UINT', NULL, 'auto_increment'),			'group_type'			=> array('TINT:4', 1),			'group_founder_manage'	=> array('BOOL', 0),			'group_skip_auth'		=> array('BOOL', 0),			'group_name'			=> array('VCHAR_CI', ''),			'group_desc'			=> array('TEXT_UNI', ''),			'group_desc_bitfield'	=> array('VCHAR:255', ''),			'group_desc_options'	=> array('UINT:11', 7),			'group_desc_uid'		=> array('VCHAR:8', ''),			'group_display'			=> array('BOOL', 0),			'group_avatar'			=> array('VCHAR', ''),			'group_avatar_type'		=> array('TINT:2', 0),			'group_avatar_width'	=> array('USINT', 0),			'group_avatar_height'	=> array('USINT', 0),			'group_rank'			=> array('UINT', 0),			'group_colour'			=> array('VCHAR:6', ''),			'group_sig_chars'		=> array('UINT', 0),			'group_receive_pm'		=> array('BOOL', 0),			'group_message_limit'	=> array('UINT', 0),			'group_max_recipients'	=> array('UINT', 0),			'group_legend'			=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'group_id',		'KEYS'			=> array(			'group_legend_name'		=> array('INDEX', array('group_legend', 'group_name')),		),	);	$schema_data['phpbb_icons'] = array(		'COLUMNS'		=> array(			'icons_id'				=> array('UINT', NULL, 'auto_increment'),			'icons_url'				=> array('VCHAR', ''),			'icons_width'			=> array('TINT:4', 0),			'icons_height'			=> array('TINT:4', 0),			'icons_order'			=> array('UINT', 0),			'display_on_posting'	=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'icons_id',		'KEYS'			=> array(			'display_on_posting'	=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_lang'] = array(		'COLUMNS'		=> array(			'lang_id'				=> array('TINT:4', NULL, 'auto_increment'),			'lang_iso'				=> array('VCHAR:30', ''),			'lang_dir'				=> array('VCHAR:30', ''),			'lang_english_name'		=> array('VCHAR_UNI:100', ''),			'lang_local_name'		=> array('VCHAR_UNI:255', ''),			'lang_author'			=> array('VCHAR_UNI:255', ''),		),		'PRIMARY_KEY'	=> 'lang_id',		'KEYS'			=> array(			'lang_iso'				=> array('INDEX', 'lang_iso'),		),	);	$schema_data['phpbb_log'] = array(		'COLUMNS'		=> array(			'log_id'				=> array('UINT', NULL, 'auto_increment'),			'log_type'				=> array('TINT:4', 0),			'user_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'topic_id'				=> array('UINT', 0),			'reportee_id'			=> array('UINT', 0),			'log_ip'				=> array('VCHAR:40', ''),			'log_time'				=> array('TIMESTAMP', 0),			'log_operation'			=> array('TEXT_UNI', ''),			'log_data'				=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'log_id',		'KEYS'			=> array(			'log_type'				=> array('INDEX', 'log_type'),			'forum_id'				=> array('INDEX', 'forum_id'),			'topic_id'				=> array('INDEX', 'topic_id'),			'reportee_id'			=> array('INDEX', 'reportee_id'),			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_moderator_cache'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'username'				=> array('VCHAR_UNI:255', ''),			'group_id'				=> array('UINT', 0),			'group_name'			=> array('VCHAR_UNI', ''),			'display_on_index'		=> array('BOOL', 1),		),		'KEYS'			=> array(			'disp_idx'				=> array('INDEX', 'display_on_index'),			'forum_id'				=> array('INDEX', 'forum_id'),		),	);	$schema_data['phpbb_modules'] = array(		'COLUMNS'		=> array(			'module_id'				=> array('UINT', NULL, 'auto_increment'),			'module_enabled'		=> array('BOOL', 1),			'module_display'		=> array('BOOL', 1),			'module_basename'		=> array('VCHAR', ''),			'module_class'			=> array('VCHAR:10', ''),			'parent_id'				=> array('UINT', 0),			'left_id'				=> array('UINT', 0),			'right_id'				=> array('UINT', 0),			'module_langname'		=> array('VCHAR', ''),			'module_mode'			=> array('VCHAR', ''),			'module_auth'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'module_id',		'KEYS'			=> array(			'left_right_id'			=> array('INDEX', array('left_id', 'right_id')),			'module_enabled'		=> array('INDEX', 'module_enabled'),			'class_left_id'			=> array('INDEX', array('module_class', 'left_id')),		),	);	$schema_data['phpbb_poll_options'] = array(		'COLUMNS'		=> array(			'poll_option_id'		=> array('TINT:4', 0),			'topic_id'				=> array('UINT', 0),			'poll_option_text'		=> array('TEXT_UNI', ''),			'poll_option_total'		=> array('UINT', 0),		),		'KEYS'			=> array(			'poll_opt_id'			=> array('INDEX', 'poll_option_id'),			'topic_id'				=> array('INDEX', 'topic_id'),		),	);	$schema_data['phpbb_poll_votes'] = array(		'COLUMNS'		=> array(			'topic_id'				=> array('UINT', 0),			'poll_option_id'		=> array('TINT:4', 0),			'vote_user_id'			=> array('UINT', 0),			'vote_user_ip'			=> array('VCHAR:40', ''),		),		'KEYS'			=> array(			'topic_id'				=> array('INDEX', 'topic_id'),			'vote_user_id'			=> array('INDEX', 'vote_user_id'),			'vote_user_ip'			=> array('INDEX', 'vote_user_ip'),		),	);	$schema_data['phpbb_posts'] = array(		'COLUMNS'		=> array(			'post_id'				=> array('UINT', NULL, 'auto_increment'),			'topic_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'poster_id'				=> array('UINT', 0),			'icon_id'				=> array('UINT', 0),			'poster_ip'				=> array('VCHAR:40', ''),			'post_time'				=> array('TIMESTAMP', 0),			'post_approved'			=> array('BOOL', 1),			'post_reported'			=> array('BOOL', 0),			'enable_bbcode'			=> array('BOOL', 1),			'enable_smilies'		=> array('BOOL', 1),			'enable_magic_url'		=> array('BOOL', 1),			'enable_sig'			=> array('BOOL', 1),			'post_username'			=> array('VCHAR_UNI:255', ''),			'post_subject'			=> array('STEXT_UNI', '', 'true_sort'),			'post_text'				=> array('MTEXT_UNI', ''),			'post_checksum'			=> array('VCHAR:32', ''),			'post_attachment'		=> array('BOOL', 0),			'bbcode_bitfield'		=> array('VCHAR:255', ''),			'bbcode_uid'			=> array('VCHAR:8', ''),			'post_postcount'		=> array('BOOL', 1),			'post_edit_time'		=> array('TIMESTAMP', 0),			'post_edit_reason'		=> array('STEXT_UNI', ''),			'post_edit_user'		=> array('UINT', 0),			'post_edit_count'		=> array('USINT', 0),			'post_edit_locked'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'post_id',		'KEYS'			=> array(			'forum_id'				=> array('INDEX', 'forum_id'),			'topic_id'				=> array('INDEX', 'topic_id'),			'poster_ip'				=> array('INDEX', 'poster_ip'),			'poster_id'				=> array('INDEX', 'poster_id'),			'post_approved'			=> array('INDEX', 'post_approved'),			'post_username'			=> array('INDEX', 'post_username'),			'tid_post_time'			=> array('INDEX', array('topic_id', 'post_time')),		),	);	$schema_data['phpbb_privmsgs'] = array(		'COLUMNS'		=> array(			'msg_id'				=> array('UINT', NULL, 'auto_increment'),			'root_level'			=> array('UINT', 0),			'author_id'				=> array('UINT', 0),			'icon_id'				=> array('UINT', 0),			'author_ip'				=> array('VCHAR:40', ''),			'message_time'			=> array('TIMESTAMP', 0),			'enable_bbcode'			=> array('BOOL', 1),			'enable_smilies'		=> array('BOOL', 1),			'enable_magic_url'		=> array('BOOL', 1),			'enable_sig'			=> array('BOOL', 1),			'message_subject'		=> array('STEXT_UNI', ''),			'message_text'			=> array('MTEXT_UNI', ''),			'message_edit_reason'	=> array('STEXT_UNI', ''),			'message_edit_user'		=> array('UINT', 0),			'message_attachment'	=> array('BOOL', 0),			'bbcode_bitfield'		=> array('VCHAR:255', ''),			'bbcode_uid'			=> array('VCHAR:8', ''),			'message_edit_time'		=> array('TIMESTAMP', 0),			'message_edit_count'	=> array('USINT', 0),			'to_address'			=> array('TEXT_UNI', ''),			'bcc_address'			=> array('TEXT_UNI', ''),			'message_reported'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'msg_id',		'KEYS'			=> array(			'author_ip'				=> array('INDEX', 'author_ip'),			'message_time'			=> array('INDEX', 'message_time'),			'author_id'				=> array('INDEX', 'author_id'),			'root_level'			=> array('INDEX', 'root_level'),		),	);	$schema_data['phpbb_privmsgs_folder'] = array(		'COLUMNS'		=> array(			'folder_id'				=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'folder_name'			=> array('VCHAR_UNI', ''),			'pm_count'				=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'folder_id',		'KEYS'			=> array(			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_privmsgs_rules'] = array(		'COLUMNS'		=> array(			'rule_id'				=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'rule_check'			=> array('UINT', 0),			'rule_connection'		=> array('UINT', 0),			'rule_string'			=> array('VCHAR_UNI', ''),			'rule_user_id'			=> array('UINT', 0),			'rule_group_id'			=> array('UINT', 0),			'rule_action'			=> array('UINT', 0),			'rule_folder_id'		=> array('INT:11', 0),		),		'PRIMARY_KEY'	=> 'rule_id',		'KEYS'			=> array(			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_privmsgs_to'] = array(		'COLUMNS'		=> array(			'msg_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'author_id'				=> array('UINT', 0),			'pm_deleted'			=> array('BOOL', 0),			'pm_new'				=> array('BOOL', 1),			'pm_unread'				=> array('BOOL', 1),			'pm_replied'			=> array('BOOL', 0),			'pm_marked'				=> array('BOOL', 0),			'pm_forwarded'			=> array('BOOL', 0),			'folder_id'				=> array('INT:11', 0),		),		'KEYS'			=> array(			'msg_id'				=> array('INDEX', 'msg_id'),			'author_id'				=> array('INDEX', 'author_id'),			'usr_flder_id'			=> array('INDEX', array('user_id', 'folder_id')),		),	);	$schema_data['phpbb_profile_fields'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', NULL, 'auto_increment'),			'field_name'			=> array('VCHAR_UNI', ''),			'field_type'			=> array('TINT:4', 0),			'field_ident'			=> array('VCHAR:20', ''),			'field_length'			=> array('VCHAR:20', ''),			'field_minlen'			=> array('VCHAR', ''),			'field_maxlen'			=> array('VCHAR', ''),			'field_novalue'			=> array('VCHAR_UNI', ''),			'field_default_value'	=> array('VCHAR_UNI', ''),			'field_validation'		=> array('VCHAR_UNI:20', ''),			'field_required'		=> array('BOOL', 0),			'field_show_on_reg'		=> array('BOOL', 0),			'field_show_on_vt'		=> array('BOOL', 0),			'field_show_profile'	=> array('BOOL', 0),			'field_hide'			=> array('BOOL', 0),			'field_no_view'			=> array('BOOL', 0),			'field_active'			=> array('BOOL', 0),			'field_order'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'field_id',		'KEYS'			=> array(			'fld_type'			=> array('INDEX', 'field_type'),			'fld_ordr'			=> array('INDEX', 'field_order'),		),	);	$schema_data['phpbb_profile_fields_data'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'user_id',	);	$schema_data['phpbb_profile_fields_lang'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', 0),			'lang_id'				=> array('UINT', 0),			'option_id'				=> array('UINT', 0),			'field_type'			=> array('TINT:4', 0),			'lang_value'			=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> array('field_id', 'lang_id', 'option_id'),	);	$schema_data['phpbb_profile_lang'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', 0),			'lang_id'				=> array('UINT', 0),			'lang_name'				=> array('VCHAR_UNI', ''),			'lang_explain'			=> array('TEXT_UNI', ''),			'lang_default_value'	=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> array('field_id', 'lang_id'),	);	$schema_data['phpbb_ranks'] = array(		'COLUMNS'		=> array(			'rank_id'				=> array('UINT', NULL, 'auto_increment'),			'rank_title'			=> array('VCHAR_UNI', ''),			'rank_min'				=> array('UINT', 0),			'rank_special'			=> array('BOOL', 0),			'rank_image'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'rank_id',	);	$schema_data['phpbb_reports'] = array(		'COLUMNS'		=> array(			'report_id'				=> array('UINT', NULL, 'auto_increment'),			'reason_id'				=> array('USINT', 0),			'post_id'				=> array('UINT', 0),			'pm_id'					=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'user_notify'			=> array('BOOL', 0),			'report_closed'			=> array('BOOL', 0),			'report_time'			=> array('TIMESTAMP', 0),			'report_text'			=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'report_id',		'KEYS'			=> array(			'post_id'			=> array('INDEX', 'post_id'),			'pm_id'				=> array('INDEX', 'pm_id'),		),	);	$schema_data['phpbb_reports_reasons'] = array(		'COLUMNS'		=> array(			'reason_id'				=> array('USINT', NULL, 'auto_increment'),			'reason_title'			=> array('VCHAR_UNI', ''),			'reason_description'	=> array('MTEXT_UNI', ''),			'reason_order'			=> array('USINT', 0),		),		'PRIMARY_KEY'	=> 'reason_id',	);	$schema_data['phpbb_search_results'] = array(		'COLUMNS'		=> array(			'search_key'			=> array('VCHAR:32', ''),			'search_time'			=> array('TIMESTAMP', 0),			'search_keywords'		=> array('MTEXT_UNI', ''),			'search_authors'		=> array('MTEXT', ''),		),		'PRIMARY_KEY'	=> 'search_key',	);	$schema_data['phpbb_search_wordlist'] = array(		'COLUMNS'		=> array(			'word_id'			=> array('UINT', NULL, 'auto_increment'),			'word_text'			=> array('VCHAR_UNI', ''),			'word_common'		=> array('BOOL', 0),			'word_count'		=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'word_id',		'KEYS'			=> array(			'wrd_txt'			=> array('UNIQUE', 'word_text'),			'wrd_cnt'			=> array('INDEX', 'word_count'),		),	);	$schema_data['phpbb_search_wordmatch'] = array(		'COLUMNS'		=> array(			'post_id'			=> array('UINT', 0),			'word_id'			=> array('UINT', 0),			'title_match'		=> array('BOOL', 0),		),		'KEYS'			=> array(			'unq_mtch'			=> array('UNIQUE', array('word_id', 'post_id', 'title_match')),			'word_id'			=> array('INDEX', 'word_id'),			'post_id'			=> array('INDEX', 'post_id'),		),	);	$schema_data['phpbb_sessions'] = array(		'COLUMNS'		=> array(			'session_id'			=> array('CHAR:32', ''),			'session_user_id'		=> array('UINT', 0),			'session_forum_id'		=> array('UINT', 0),			'session_last_visit'	=> array('TIMESTAMP', 0),			'session_start'			=> array('TIMESTAMP', 0),			'session_time'			=> array('TIMESTAMP', 0),			'session_ip'			=> array('VCHAR:40', ''),			'session_browser'		=> array('VCHAR:150', ''),			'session_forwarded_for'	=> array('VCHAR:255', ''),			'session_page'			=> array('VCHAR_UNI', ''),			'session_viewonline'	=> array('BOOL', 1),			'session_autologin'		=> array('BOOL', 0),			'session_admin'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'session_id',		'KEYS'			=> array(			'session_time'		=> array('INDEX', 'session_time'),			'session_user_id'	=> array('INDEX', 'session_user_id'),			'session_fid'		=> array('INDEX', 'session_forum_id'),		),	);	$schema_data['phpbb_sessions_keys'] = array(		'COLUMNS'		=> array(			'key_id'			=> array('CHAR:32', ''),			'user_id'			=> array('UINT', 0),			'last_ip'			=> array('VCHAR:40', ''),			'last_login'		=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('key_id', 'user_id'),		'KEYS'			=> array(			'last_login'		=> array('INDEX', 'last_login'),		),	);	$schema_data['phpbb_sitelist'] = array(		'COLUMNS'		=> array(			'site_id'		=> array('UINT', NULL, 'auto_increment'),			'site_ip'		=> array('VCHAR:40', ''),			'site_hostname'	=> array('VCHAR', ''),			'ip_exclude'	=> array('BOOL', 0),		),		'PRIMARY_KEY'		=> 'site_id',	);	$schema_data['phpbb_smilies'] = array(		'COLUMNS'		=> array(			'smiley_id'			=> array('UINT', NULL, 'auto_increment'),			// We may want to set 'code' to VCHAR:50 or check if unicode support is possible... at the moment only ASCII characters are allowed.			'code'				=> array('VCHAR_UNI:50', ''),			'emotion'			=> array('VCHAR_UNI:50', ''),			'smiley_url'		=> array('VCHAR:50', ''),			'smiley_width'		=> array('USINT', 0),			'smiley_height'		=> array('USINT', 0),			'smiley_order'		=> array('UINT', 0),			'display_on_posting'=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'smiley_id',		'KEYS'			=> array(			'display_on_post'		=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_styles'] = array(		'COLUMNS'		=> array(			'style_id'				=> array('UINT', NULL, 'auto_increment'),			'style_name'			=> array('VCHAR_UNI:255', ''),			'style_copyright'		=> array('VCHAR_UNI', ''),			'style_active'			=> array('BOOL', 1),			'template_id'			=> array('UINT', 0),			'theme_id'				=> array('UINT', 0),			'imageset_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'style_id',		'KEYS'			=> array(			'style_name'		=> array('UNIQUE', 'style_name'),			'template_id'		=> array('INDEX', 'template_id'),			'theme_id'			=> array('INDEX', 'theme_id'),			'imageset_id'		=> array('INDEX', 'imageset_id'),		),	);	$schema_data['phpbb_styles_template'] = array(		'COLUMNS'		=> array(			'template_id'			=> array('UINT', NULL, 'auto_increment'),			'template_name'			=> array('VCHAR_UNI:255', ''),			'template_copyright'	=> array('VCHAR_UNI', ''),			'template_path'			=> array('VCHAR:100', ''),			'bbcode_bitfield'		=> array('VCHAR:255', 'kNg='),			'template_storedb'		=> array('BOOL', 0),			'template_inherits_id'		=> array('UINT:4', 0),			'template_inherit_path'		=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'template_id',		'KEYS'			=> array(			'tmplte_nm'				=> array('UNIQUE', 'template_name'),		),	);	$schema_data['phpbb_styles_template_data'] = array(		'COLUMNS'		=> array(			'template_id'			=> array('UINT', 0),			'template_filename'		=> array('VCHAR:100', ''),			'template_included'		=> array('TEXT', ''),			'template_mtime'		=> array('TIMESTAMP', 0),			'template_data'			=> array('MTEXT_UNI', ''),		),		'KEYS'			=> array(			'tid'					=> array('INDEX', 'template_id'),			'tfn'					=> array('INDEX', 'template_filename'),		),	);	$schema_data['phpbb_styles_theme'] = array(		'COLUMNS'		=> array(			'theme_id'				=> array('UINT', NULL, 'auto_increment'),			'theme_name'			=> array('VCHAR_UNI:255', ''),			'theme_copyright'		=> array('VCHAR_UNI', ''),			'theme_path'			=> array('VCHAR:100', ''),			'theme_storedb'			=> array('BOOL', 0),			'theme_mtime'			=> array('TIMESTAMP', 0),			'theme_data'			=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'theme_id',		'KEYS'			=> array(			'theme_name'		=> array('UNIQUE', 'theme_name'),		),	);	$schema_data['phpbb_styles_imageset'] = array(		'COLUMNS'		=> array(			'imageset_id'				=> array('UINT', NULL, 'auto_increment'),			'imageset_name'				=> array('VCHAR_UNI:255', ''),			'imageset_copyright'		=> array('VCHAR_UNI', ''),			'imageset_path'				=> array('VCHAR:100', ''),		),		'PRIMARY_KEY'		=> 'imageset_id',		'KEYS'				=> array(			'imgset_nm'			=> array('UNIQUE', 'imageset_name'),		),	);	$schema_data['phpbb_styles_imageset_data'] = array(		'COLUMNS'		=> array(			'image_id'				=> array('UINT', NULL, 'auto_increment'),			'image_name'			=> array('VCHAR:200', ''),			'image_filename'		=> array('VCHAR:200', ''),			'image_lang'			=> array('VCHAR:30', ''),			'image_height'			=> array('USINT', 0),			'image_width'			=> array('USINT', 0),			'imageset_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'		=> 'image_id',		'KEYS'				=> array(			'i_d'			=> array('INDEX', 'imageset_id'),		),	);	$schema_data['phpbb_topics'] = array(		'COLUMNS'		=> array(			'topic_id'					=> array('UINT', NULL, 'auto_increment'),			'forum_id'					=> array('UINT', 0),			'icon_id'					=> array('UINT', 0),			'topic_attachment'			=> array('BOOL', 0),			'topic_approved'			=> array('BOOL', 1),			'topic_reported'			=> array('BOOL', 0),			'topic_title'				=> array('STEXT_UNI', '', 'true_sort'),			'topic_poster'				=> array('UINT', 0),			'topic_time'				=> array('TIMESTAMP', 0),			'topic_time_limit'			=> array('TIMESTAMP', 0),			'topic_views'				=> array('UINT', 0),			'topic_replies'				=> array('UINT', 0),			'topic_replies_real'		=> array('UINT', 0),			'topic_status'				=> array('TINT:3', 0),			'topic_type'				=> array('TINT:3', 0),			'topic_first_post_id'		=> array('UINT', 0),			'topic_first_poster_name'	=> array('VCHAR_UNI', ''),			'topic_first_poster_colour'	=> array('VCHAR:6', ''),			'topic_last_post_id'		=> array('UINT', 0),			'topic_last_poster_id'		=> array('UINT', 0),			'topic_last_poster_name'	=> array('VCHAR_UNI', ''),			'topic_last_poster_colour'	=> array('VCHAR:6', ''),			'topic_last_post_subject'	=> array('STEXT_UNI', ''),			'topic_last_post_time'		=> array('TIMESTAMP', 0),			'topic_last_view_time'		=> array('TIMESTAMP', 0),			'topic_moved_id'			=> array('UINT', 0),			'topic_bumped'				=> array('BOOL', 0),			'topic_bumper'				=> array('UINT', 0),			'poll_title'				=> array('STEXT_UNI', ''),			'poll_start'				=> array('TIMESTAMP', 0),			'poll_length'				=> array('TIMESTAMP', 0),			'poll_max_options'			=> array('TINT:4', 1),			'poll_last_vote'			=> array('TIMESTAMP', 0),			'poll_vote_change'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'topic_id',		'KEYS'			=> array(			'forum_id'			=> array('INDEX', 'forum_id'),			'forum_id_type'		=> array('INDEX', array('forum_id', 'topic_type')),			'last_post_time'	=> array('INDEX', 'topic_last_post_time'),			'topic_approved'	=> array('INDEX', 'topic_approved'),			'forum_appr_last'	=> array('INDEX', array('forum_id', 'topic_approved', 'topic_last_post_id')),			'fid_time_moved'	=> array('INDEX', array('forum_id', 'topic_last_post_time', 'topic_moved_id')),		),	);	$schema_data['phpbb_topics_track'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'mark_time'			=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'topic_id'),		'KEYS'			=> array(			'topic_id'			=> array('INDEX', 'topic_id'),			'forum_id'			=> array('INDEX', 'forum_id'),		),	);	$schema_data['phpbb_topics_posted'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'topic_posted'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'topic_id'),	);	$schema_data['phpbb_topics_watch'] = array(		'COLUMNS'		=> array(			'topic_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),			'notify_status'		=> array('BOOL', 0),		),		'KEYS'			=> array(			'topic_id'			=> array('INDEX', 'topic_id'),			'user_id'			=> array('INDEX', 'user_id'),			'notify_stat'		=> array('INDEX', 'notify_status'),		),	);	$schema_data['phpbb_user_group'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),			'group_leader'		=> array('BOOL', 0),			'user_pending'		=> array('BOOL', 1),		),		'KEYS'			=> array(			'group_id'			=> array('INDEX', 'group_id'),			'user_id'			=> array('INDEX', 'user_id'),			'group_leader'		=> array('INDEX', 'group_leader'),		),	);	$schema_data['phpbb_users'] = array(		'COLUMNS'		=> array(			'user_id'					=> array('UINT', NULL, 'auto_increment'),			'user_type'					=> array('TINT:2', 0),			'group_id'					=> array('UINT', 3),			'user_permissions'			=> array('MTEXT', ''),			'user_perm_from'			=> array('UINT', 0),			'user_ip'					=> array('VCHAR:40', ''),			'user_regdate'				=> array('TIMESTAMP', 0),			'username'					=> array('VCHAR_CI', ''),			'username_clean'			=> array('VCHAR_CI', ''),			'user_password'				=> array('VCHAR_UNI:40', ''),			'user_passchg'				=> array('TIMESTAMP', 0),			'user_pass_convert'			=> array('BOOL', 0),			'user_email'				=> array('VCHAR_UNI:100', ''),			'user_email_hash'			=> array('BINT', 0),			'user_birthday'				=> array('VCHAR:10', ''),			'user_lastvisit'			=> array('TIMESTAMP', 0),			'user_lastmark'				=> array('TIMESTAMP', 0),			'user_lastpost_time'		=> array('TIMESTAMP', 0),			'user_lastpage'				=> array('VCHAR_UNI:200', ''),			'user_last_confirm_key'		=> array('VCHAR:10', ''),			'user_last_search'			=> array('TIMESTAMP', 0),			'user_warnings'				=> array('TINT:4', 0),			'user_last_warning'			=> array('TIMESTAMP', 0),			'user_login_attempts'		=> array('TINT:4', 0),			'user_inactive_reason'		=> array('TINT:2', 0),			'user_inactive_time'		=> array('TIMESTAMP', 0),			'user_posts'				=> array('UINT', 0),			'user_lang'					=> array('VCHAR:30', ''),			'user_timezone'				=> array('DECIMAL', 0),			'user_dst'					=> array('BOOL', 0),			'user_dateformat'			=> array('VCHAR_UNI:30', 'd M Y H:i'),			'user_style'				=> array('UINT', 0),			'user_rank'					=> array('UINT', 0),			'user_colour'				=> array('VCHAR:6', ''),			'user_new_privmsg'			=> array('INT:4', 0),			'user_unread_privmsg'		=> array('INT:4', 0),			'user_last_privmsg'			=> array('TIMESTAMP', 0),			'user_message_rules'		=> array('BOOL', 0),			'user_full_folder'			=> array('INT:11', -3),			'user_emailtime'			=> array('TIMESTAMP', 0),			'user_topic_show_days'		=> array('USINT', 0),			'user_topic_sortby_type'	=> array('VCHAR:1', 't'),			'user_topic_sortby_dir'		=> array('VCHAR:1', 'd'),			'user_post_show_days'		=> array('USINT', 0),			'user_post_sortby_type'		=> array('VCHAR:1', 't'),			'user_post_sortby_dir'		=> array('VCHAR:1', 'a'),			'user_notify'				=> array('BOOL', 0),			'user_notify_pm'			=> array('BOOL', 1),			'user_notify_type'			=> array('TINT:4', 0),			'user_allow_pm'				=> array('BOOL', 1),			'user_allow_viewonline'		=> array('BOOL', 1),			'user_allow_viewemail'		=> array('BOOL', 1),			'user_allow_massemail'		=> array('BOOL', 1),			'user_options'				=> array('UINT:11', 230271),			'user_avatar'				=> array('VCHAR', ''),			'user_avatar_type'			=> array('TINT:2', 0),			'user_avatar_width'			=> array('USINT', 0),			'user_avatar_height'		=> array('USINT', 0),			'user_sig'					=> array('MTEXT_UNI', ''),			'user_sig_bbcode_uid'		=> array('VCHAR:8', ''),			'user_sig_bbcode_bitfield'	=> array('VCHAR:255', ''),			'user_from'					=> array('VCHAR_UNI:100', ''),			'user_icq'					=> array('VCHAR:15', ''),			'user_aim'					=> array('VCHAR_UNI', ''),			'user_yim'					=> array('VCHAR_UNI', ''),			'user_msnm'					=> array('VCHAR_UNI', ''),			'user_jabber'				=> array('VCHAR_UNI', ''),			'user_website'				=> array('VCHAR_UNI:200', ''),			'user_occ'					=> array('TEXT_UNI', ''),			'user_interests'			=> array('TEXT_UNI', ''),			'user_actkey'				=> array('VCHAR:32', ''),			'user_newpasswd'			=> array('VCHAR_UNI:40', ''),			'user_form_salt'			=> array('VCHAR_UNI:32', ''),			'user_new'					=> array('BOOL', 1),			'user_reminded'				=> array('TINT:4', 0),			'user_reminded_time'		=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> 'user_id',		'KEYS'			=> array(			'user_birthday'				=> array('INDEX', 'user_birthday'),			'user_email_hash'			=> array('INDEX', 'user_email_hash'),			'user_type'					=> array('INDEX', 'user_type'),			'username_clean'			=> array('UNIQUE', 'username_clean'),		),	);	$schema_data['phpbb_warnings'] = array(		'COLUMNS'		=> array(			'warning_id'			=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'post_id'				=> array('UINT', 0),			'log_id'				=> array('UINT', 0),			'warning_time'			=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> 'warning_id',	);	$schema_data['phpbb_words'] = array(		'COLUMNS'		=> array(			'word_id'				=> array('UINT', NULL, 'auto_increment'),			'word'					=> array('VCHAR_UNI', ''),			'replacement'			=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> 'word_id',	);	$schema_data['phpbb_zebra'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),			'zebra_id'				=> array('UINT', 0),			'friend'				=> array('BOOL', 0),			'foe'					=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'zebra_id'),	);	return $schema_data;}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**/if (php_sapi_name() != 'cli'){	die("This program must be run from the command line.\n");}//// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);error_reporting(E_ALL);define('IN_PHPBB', true);$phpbb_root_path = '../';$phpEx = substr(strrchr(__FILE__, '.'), 1);/*** Let's download some files we need*/download('http://www.unicode.org/Public/UNIDATA/NormalizationTest.txt');download('http://www.unicode.org/Public/UNIDATA/UnicodeData.txt');/*** Those are the tests we run*/$test_suite = array(	/**	* NFC	*   c2 ==  NFC(c1) ==  NFC(c2) ==  NFC(c3)	*   c4 ==  NFC(c4) ==  NFC(c5)	*/	'NFC'	=>	array(		'c2'	=>	array('c1', 'c2', 'c3'),		'c4'	=>	array('c4', 'c5')	),	/**	* NFD	*   c3 ==  NFD(c1) ==  NFD(c2) ==  NFD(c3)	*   c5 ==  NFD(c4) ==  NFD(c5)	*/	'NFD'	=>	array(		'c3'	=>	array('c1', 'c2', 'c3'),		'c5'	=>	array('c4', 'c5')	),	/**	* NFKC	*   c4 == NFKC(c1) == NFKC(c2) == NFKC(c3) == NFKC(c4) == NFKC(c5)	*/	'NFKC'	=>	array(		'c4'	=>	array('c1', 'c2', 'c3', 'c4', 'c5')	),	/**	* NFKD	*   c5 == NFKD(c1) == NFKD(c2) == NFKD(c3) == NFKD(c4) == NFKD(c5)	*/	'NFKD'	=>	array(		'c5'	=>	array('c1', 'c2', 'c3', 'c4', 'c5')	));require_once($phpbb_root_path . 'includes/utf/utf_normalizer.' . $phpEx);$i = $n = 0;$failed = false;$tested_chars = array();$fp = fopen($phpbb_root_path . 'develop/NormalizationTest.txt', 'rb');while (!feof($fp)){	$line = fgets($fp);	++$n;	if ($line[0] == '@')	{		if ($i)		{			echo "done\n";		}		$i = 0;		echo "\n", substr($line, 1), "\n\n";		continue;	}	if (!strpos(' 0123456789ABCDEF', $line[0]))	{		continue;	}	if (++$i % 100 == 0)	{		echo $i, ' ';	}	list($c1, $c2, $c3, $c4, $c5) = explode(';', $line);	if (!strpos($c1, ' '))	{		/**		* We are currently testing a single character, we add it to the list of		* characters we have processed so that we can exclude it when testing		* for invariants		*/		$tested_chars[$c1] = 1;	}	foreach ($test_suite as $form => $serie)	{		foreach ($serie as $expected => $tests)		{			$hex_expected = ${$expected};			$utf_expected = hexseq_to_utf($hex_expected);			foreach ($tests as $test)			{				$utf_result = $utf_expected;				call_user_func(array('utf_normalizer', $form), $utf_result);				if (strcmp($utf_expected, $utf_result))				{					$failed = true;					$hex_result = utf_to_hexseq($utf_result);					echo "\nFAILED $expected == $form($test) ($hex_expected != $hex_result)";				}			}		}		if ($failed)		{			die("\n\nFailed at line $n\n");		}	}}fclose($fp);/*** Test for invariants*/echo "\n\nTesting for invariants...\n\n";$fp = fopen($phpbb_root_path . 'develop/UnicodeData.txt', 'rt');$n = 0;while (!feof($fp)){	if (++$n % 100 == 0)	{		echo $n, ' ';	}	$line = fgets($fp, 1024);	if (!$pos = strpos($line, ';'))	{		continue;	}	$hex_tested = $hex_expected = substr($line, 0, $pos);	if (isset($tested_chars[$hex_tested]))	{		continue;	}	$utf_expected = hex_to_utf($hex_expected);	if ($utf_expected >= UTF8_SURROGATE_FIRST	 && $utf_expected <= UTF8_SURROGATE_LAST)	{		/**		* Surrogates are illegal on their own, we expect the normalizer		* to return a replacement char		*/		$utf_expected = UTF8_REPLACEMENT;		$hex_expected = utf_to_hexseq($utf_expected);	}	foreach (array('nfc', 'nfkc', 'nfd', 'nfkd') as $form)	{		$utf_result = $utf_expected;		utf_normalizer::$form($utf_result);		$hex_result = utf_to_hexseq($utf_result);//		echo "$form($utf_expected) == $utf_result\n";		if (strcmp($utf_expected, $utf_result))		{			$failed = 1;			echo "\nFAILED $hex_expected == $form($hex_tested) ($hex_expected != $hex_result)";		}	}	if ($failed)	{		die("\n\nFailed at line $n\n");	}}fclose($fp);die("\n\nALL TESTS PASSED SUCCESSFULLY\n");/*** Download a file to the develop/ dir** @param	string	$url		URL of the file to download* @return	void*/function download($url){	global $phpbb_root_path;	if (file_exists($phpbb_root_path . 'develop/' . basename($url)))	{		return;	}	echo 'Downloading from ', $url, ' ';	if (!$fpr = fopen($url, 'rb'))	{		die("Can't download from $url\nPlease download it yourself and put it in the develop/ dir, kthxbai");	}	if (!$fpw = fopen($phpbb_root_path . 'develop/' . basename($url), 'wb'))	{		die("Can't open develop/" . basename($url) . " for output... please check your permissions or something");	}	$i = 0;	$chunk = 32768;	$done = '';	while (!feof($fpr))	{		$i += fwrite($fpw, fread($fpr, $chunk));		echo str_repeat("\x08", strlen($done));		$done = ($i >> 10) . ' KiB';		echo $done;	}	fclose($fpr);	fclose($fpw);	echo "\n";}/*** Convert a UTF string to a sequence of codepoints in hexadecimal** @param	string	$utf	UTF string* @return	integer			Unicode codepoints in hex*/function utf_to_hexseq($str){	$pos = 0;	$len = strlen($str);	$ret = array();	while ($pos < $len)	{		$c = $str[$pos];		switch ($c & "\xF0")		{			case "\xC0":			case "\xD0":				$utf_char = substr($str, $pos, 2);				$pos += 2;				break;			case "\xE0":				$utf_char = substr($str, $pos, 3);				$pos += 3;				break;			case "\xF0":				$utf_char = substr($str, $pos, 4);				$pos += 4;				break;			default:				$utf_char = $c;				++$pos;		}		$hex = dechex(utf_to_cp($utf_char));		if (!isset($hex[3]))		{			$hex = substr('000' . $hex, -4);		}		$ret[] = $hex;	}	return strtr(implode(' ', $ret), 'abcdef', 'ABCDEF');}/*** Convert a UTF-8 char to its codepoint** @param	string	$utf_char	UTF-8 char* @return	integer				Unicode codepoint*/function utf_to_cp($utf_char){	switch (strlen($utf_char))	{		case 1:			return ord($utf_char);		case 2:			return ((ord($utf_char[0]) & 0x1F) << 6) | (ord($utf_char[1]) & 0x3F);		case 3:			return ((ord($utf_char[0]) & 0x0F) << 12) | ((ord($utf_char[1]) & 0x3F) << 6) | (ord($utf_char[2]) & 0x3F);		case 4:			return ((ord($utf_char[0]) & 0x07) << 18) | ((ord($utf_char[1]) & 0x3F) << 12) | ((ord($utf_char[2]) & 0x3F) << 6) | (ord($utf_char[3]) & 0x3F);		default:			die('UTF-8 chars can only be 1-4 bytes long');	}}/*** Return a UTF string formed from a sequence of codepoints in hexadecimal** @param	string	$seq		Sequence of codepoints, separated with a space* @return	string				UTF-8 string*/function hexseq_to_utf($seq){	return implode('', array_map('hex_to_utf', explode(' ', $seq)));}/*** Convert a codepoint in hexadecimal to a UTF-8 char** @param	string	$hex		Codepoint, in hexadecimal* @return	string				UTF-8 char*/function hex_to_utf($hex){	return cp_to_utf(hexdec($hex));}/*** Convert a codepoint to a UTF-8 char** @param	integer	$cp			Unicode codepoint* @return	string				UTF-8 string*/function cp_to_utf($cp){	if ($cp > 0xFFFF)	{		return chr(0xF0 | ($cp >> 18)) . chr(0x80 | (($cp >> 12) & 0x3F)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));	}	else if ($cp > 0x7FF)	{		return chr(0xE0 | ($cp >> 12)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));	}	else if ($cp > 0x7F)	{		return chr(0xC0 | ($cp >> 6)) . chr(0x80 | ($cp & 0x3F));	}	else	{		return chr($cp);	}}
<?php/**** @package install* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Determine if we are able to load a specified PHP module and do so if possible*/function can_load_dll($dll){	// SQLite2 is a tricky thing, from 5.0.0 it requires PDO; if PDO is not loaded we must state that SQLite is unavailable	// as the installer doesn't understand that the extension has a prerequisite.	//	// On top of this sometimes the SQLite extension is compiled for a different version of PDO	// by some Linux distributions which causes phpBB to bomb out with a blank page.	//	// Net result we'll disable automatic inclusion of SQLite support	//	// See: r9618 and #56105	if ($dll == 'sqlite')	{		return false;	}	return ((@ini_get('enable_dl') || strtolower(@ini_get('enable_dl')) == 'on') && (!@ini_get('safe_mode') || strtolower(@ini_get('safe_mode')) == 'off') && function_exists('dl') && @dl($dll . '.' . PHP_SHLIB_SUFFIX)) ? true : false;}/*** Returns an array of available DBMS with some data, if a DBMS is specified it will only* return data for that DBMS and will load its extension if necessary.*/function get_available_dbms($dbms = false, $return_unavailable = false, $only_20x_options = false){	global $lang;	$available_dbms = array(		'firebird'	=> array(			'LABEL'			=> 'FireBird',			'SCHEMA'		=> 'firebird',			'MODULE'		=> 'interbase',			'DELIM'			=> ';;',			'COMMENTS'		=> 'remove_remarks',			'DRIVER'		=> 'firebird',			'AVAILABLE'		=> true,			'2.0.x'			=> false,		),		'mysqli'	=> array(			'LABEL'			=> 'MySQL with MySQLi Extension',			'SCHEMA'		=> 'mysql_41',			'MODULE'		=> 'mysqli',			'DELIM'			=> ';',			'COMMENTS'		=> 'remove_remarks',			'DRIVER'		=> 'mysqli',			'AVAILABLE'		=> true,			'2.0.x'			=> true,		),		'mysql'		=> array(			'LABEL'			=> 'MySQL',			'SCHEMA'		=> 'mysql',			'MODULE'		=> 'mysql',			'DELIM'			=> ';',			'COMMENTS'		=> 'remove_remarks',			'DRIVER'		=> 'mysql',			'AVAILABLE'		=> true,			'2.0.x'			=> true,		),		'mssql'		=> array(			'LABEL'			=> 'MS SQL Server 2000+',			'SCHEMA'		=> 'mssql',			'MODULE'		=> 'mssql',			'DELIM'			=> 'GO',			'COMMENTS'		=> 'remove_comments',			'DRIVER'		=> 'mssql',			'AVAILABLE'		=> true,			'2.0.x'			=> true,		),		'mssql_odbc'=>	array(			'LABEL'			=> 'MS SQL Server [ ODBC ]',			'SCHEMA'		=> 'mssql',			'MODULE'		=> 'odbc',			'DELIM'			=> 'GO',			'COMMENTS'		=> 'remove_comments',			'DRIVER'		=> 'mssql_odbc',			'AVAILABLE'		=> true,			'2.0.x'			=> true,		),		'mssqlnative'		=> array(			'LABEL'			=> 'MS SQL Server 2005+ [ Native ]',			'SCHEMA'		=> 'mssql',			'MODULE'		=> 'sqlsrv',			'DELIM'			=> 'GO',			'COMMENTS'		=> 'remove_comments',			'DRIVER'		=> 'mssqlnative',			'AVAILABLE'		=> true,			'2.0.x'			=> false,		),					'oracle'	=>	array(			'LABEL'			=> 'Oracle',			'SCHEMA'		=> 'oracle',			'MODULE'		=> 'oci8',			'DELIM'			=> '/',			'COMMENTS'		=> 'remove_comments',			'DRIVER'		=> 'oracle',			'AVAILABLE'		=> true,			'2.0.x'			=> false,		),		'postgres' => array(			'LABEL'			=> 'PostgreSQL 7.x/8.x',			'SCHEMA'		=> 'postgres',			'MODULE'		=> 'pgsql',			'DELIM'			=> ';',			'COMMENTS'		=> 'remove_comments',			'DRIVER'		=> 'postgres',			'AVAILABLE'		=> true,			'2.0.x'			=> true,		),		'sqlite'		=> array(			'LABEL'			=> 'SQLite',			'SCHEMA'		=> 'sqlite',			'MODULE'		=> 'sqlite',			'DELIM'			=> ';',			'COMMENTS'		=> 'remove_remarks',			'DRIVER'		=> 'sqlite',			'AVAILABLE'		=> true,			'2.0.x'			=> false,		),	);	if ($dbms)	{		if (isset($available_dbms[$dbms]))		{			$available_dbms = array($dbms => $available_dbms[$dbms]);		}		else		{			return array();		}	}	// now perform some checks whether they are really available	foreach ($available_dbms as $db_name => $db_ary)	{		if ($only_20x_options && !$db_ary['2.0.x'])		{			if ($return_unavailable)			{				$available_dbms[$db_name]['AVAILABLE'] = false;			}			else			{				unset($available_dbms[$db_name]);			}			continue;		}		$dll = $db_ary['MODULE'];		if (!@extension_loaded($dll))		{			if (!can_load_dll($dll))			{				if ($return_unavailable)				{					$available_dbms[$db_name]['AVAILABLE'] = false;				}				else				{					unset($available_dbms[$db_name]);				}				continue;			}		}		$any_db_support = true;	}	if ($return_unavailable)	{		$available_dbms['ANY_DB_SUPPORT'] = $any_db_support;	}	return $available_dbms;}/*** Generate the drop down of available database options*/function dbms_select($default = '', $only_20x_options = false){	global $lang;	$available_dbms = get_available_dbms(false, false, $only_20x_options);	$dbms_options = '';	foreach ($available_dbms as $dbms_name => $details)	{		$selected = ($dbms_name == $default) ? ' selected="selected"' : '';		$dbms_options .= '<option value="' . $dbms_name . '"' . $selected .'>' . $lang['DLL_' . strtoupper($dbms_name)] . '</option>';	}	return $dbms_options;}/*** Get tables of a database** @deprecated*/function get_tables(&$db){	if (!class_exists('phpbb_db_tools'))	{		global $phpbb_root_path, $phpEx;		require($phpbb_root_path . 'includes/db/db_tools.' . $phpEx);	}	$db_tools = new phpbb_db_tools($db);	return $db_tools->sql_list_tables();}/*** Used to test whether we are able to connect to the database the user has specified* and identify any problems (eg there are already tables with the names we want to use* @param	array	$dbms should be of the format of an element of the array returned by {@link get_available_dbms get_available_dbms()}*					necessary extensions should be loaded already*/function connect_check_db($error_connect, &$error, $dbms_details, $table_prefix, $dbhost, $dbuser, $dbpasswd, $dbname, $dbport, $prefix_may_exist = false, $load_dbal = true, $unicode_check = true){	global $phpbb_root_path, $phpEx, $config, $lang;	$dbms = $dbms_details['DRIVER'];	if ($load_dbal)	{		// Include the DB layer		include($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);	}	// Instantiate it and set return on error true	$sql_db = 'dbal_' . $dbms;	$db = new $sql_db();	$db->sql_return_on_error(true);	// Check that we actually have a database name before going any further.....	if ($dbms_details['DRIVER'] != 'sqlite' && $dbms_details['DRIVER'] != 'oracle' && $dbname === '')	{		$error[] = $lang['INST_ERR_DB_NO_NAME'];		return false;	}	// Make sure we don't have a daft user who thinks having the SQLite database in the forum directory is a good idea	if ($dbms_details['DRIVER'] == 'sqlite' && stripos(phpbb_realpath($dbhost), phpbb_realpath('../')) === 0)	{		$error[] = $lang['INST_ERR_DB_FORUM_PATH'];		return false;	}	// Check the prefix length to ensure that index names are not too long and does not contain invalid characters	switch ($dbms_details['DRIVER'])	{		case 'mysql':		case 'mysqli':			if (strspn($table_prefix, '-./\\') !== 0)			{				$error[] = $lang['INST_ERR_PREFIX_INVALID'];				return false;			}		// no break;		case 'postgres':			$prefix_length = 36;		break;		case 'mssql':		case 'mssql_odbc':		case 'mssqlnative':			$prefix_length = 90;		break;		case 'sqlite':			$prefix_length = 200;		break;		case 'firebird':		case 'oracle':			$prefix_length = 6;		break;	}	if (strlen($table_prefix) > $prefix_length)	{		$error[] = sprintf($lang['INST_ERR_PREFIX_TOO_LONG'], $prefix_length);		return false;	}	// Try and connect ...	if (is_array($db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, true)))	{		$db_error = $db->sql_error();		$error[] = $lang['INST_ERR_DB_CONNECT'] . '<br />' . (($db_error['message']) ? $db_error['message'] : $lang['INST_ERR_DB_NO_ERROR']);	}	else	{		// Likely matches for an existing phpBB installation		if (!$prefix_may_exist)		{			$temp_prefix = strtolower($table_prefix);			$table_ary = array($temp_prefix . 'attachments', $temp_prefix . 'config', $temp_prefix . 'sessions', $temp_prefix . 'topics', $temp_prefix . 'users');			$tables = get_tables($db);			$tables = array_map('strtolower', $tables);			$table_intersect = array_intersect($tables, $table_ary);			if (sizeof($table_intersect))			{				$error[] = $lang['INST_ERR_PREFIX'];			}		}		// Make sure that the user has selected a sensible DBAL for the DBMS actually installed		switch ($dbms_details['DRIVER'])		{			case 'mysqli':				if (version_compare(mysqli_get_server_info($db->db_connect_id), '4.1.3', '<'))				{					$error[] = $lang['INST_ERR_DB_NO_MYSQLI'];				}			break;			case 'sqlite':				if (version_compare(sqlite_libversion(), '2.8.2', '<'))				{					$error[] = $lang['INST_ERR_DB_NO_SQLITE'];				}			break;			case 'firebird':				// check the version of FB, use some hackery if we can't get access to the server info				if ($db->service_handle !== false && function_exists('ibase_server_info'))				{					$val = @ibase_server_info($db->service_handle, IBASE_SVC_SERVER_VERSION);					preg_match('#V([\d.]+)#', $val, $match);					if ($match[1] < 2)					{						$error[] = $lang['INST_ERR_DB_NO_FIREBIRD'];					}					$db_info = @ibase_db_info($db->service_handle, $dbname, IBASE_STS_HDR_PAGES);					preg_match('/^\\s*Page size\\s*(\\d+)/m', $db_info, $regs);					$page_size = intval($regs[1]);					if ($page_size < 8192)					{						$error[] = $lang['INST_ERR_DB_NO_FIREBIRD_PS'];					}				}				else				{					$sql = "SELECT *						FROM RDB$FUNCTIONS						WHERE RDB$SYSTEM_FLAG IS NULL							AND RDB$FUNCTION_NAME = 'CHAR_LENGTH'";					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					// if its a UDF, its too old					if ($row)					{						$error[] = $lang['INST_ERR_DB_NO_FIREBIRD'];					}					else					{						$sql = 'SELECT 1 FROM RDB$DATABASE							WHERE BIN_AND(10, 1) = 0';						$result = $db->sql_query($sql);						if (!$result) // This can only fail if BIN_AND is not defined						{							$error[] = $lang['INST_ERR_DB_NO_FIREBIRD'];						}						$db->sql_freeresult($result);					}					// Setup the stuff for our random table					$char_array = array_merge(range('A', 'Z'), range('0', '9'));					$char_len = mt_rand(7, 9);					$char_array_len = sizeof($char_array) - 1;					$final = '';					for ($i = 0; $i < $char_len; $i++)					{						$final .= $char_array[mt_rand(0, $char_array_len)];					}					// Create some random table					$sql = 'CREATE TABLE ' . $final . " (						FIELD1 VARCHAR(255) CHARACTER SET UTF8 DEFAULT '' NOT NULL COLLATE UNICODE,						FIELD2 INTEGER DEFAULT 0 NOT NULL);";					$db->sql_query($sql);					// Create an index that should fail if the page size is less than 8192					$sql = 'CREATE INDEX ' . $final . ' ON ' . $final . '(FIELD1, FIELD2);';					$db->sql_query($sql);					if (ibase_errmsg() !== false)					{						$error[] = $lang['INST_ERR_DB_NO_FIREBIRD_PS'];					}					else					{						// Kill the old table						$db->sql_query('DROP TABLE ' . $final . ';');					}					unset($final);				}			break;			case 'oracle':				if ($unicode_check)				{					$sql = "SELECT *						FROM NLS_DATABASE_PARAMETERS						WHERE PARAMETER = 'NLS_RDBMS_VERSION'							OR PARAMETER = 'NLS_CHARACTERSET'";					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$stats[$row['parameter']] = $row['value'];					}					$db->sql_freeresult($result);					if (version_compare($stats['NLS_RDBMS_VERSION'], '9.2', '<') && $stats['NLS_CHARACTERSET'] !== 'UTF8')					{						$error[] = $lang['INST_ERR_DB_NO_ORACLE'];					}				}			break;			case 'postgres':				if ($unicode_check)				{					$sql = "SHOW server_encoding;";					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if ($row['server_encoding'] !== 'UNICODE' && $row['server_encoding'] !== 'UTF8')					{						$error[] = $lang['INST_ERR_DB_NO_POSTGRES'];					}				}			break;		}	}	if ($error_connect && (!isset($error) || !sizeof($error)))	{		return true;	}	return false;}/*** remove_remarks will strip the sql comment lines out of an uploaded sql file*/function remove_remarks(&$sql){	$sql = preg_replace('/\n{2,}/', "\n", preg_replace('/^#.*$/m', "\n", $sql));}/*** split_sql_file will split an uploaded sql file into single sql statements.* Note: expects trim() to have already been run on $sql.*/function split_sql_file($sql, $delimiter){	$sql = str_replace("\r" , '', $sql);	$data = preg_split('/' . preg_quote($delimiter, '/') . '$/m', $sql);	$data = array_map('trim', $data);	// The empty case	$end_data = end($data);	if (empty($end_data))	{		unset($data[key($data)]);	}	return $data;}/*** For replacing {L_*} strings with preg_replace_callback*/function adjust_language_keys_callback($matches){	if (!empty($matches[1]))	{		global $lang, $db;		return (!empty($lang[$matches[1]])) ? $db->sql_escape($lang[$matches[1]]) : $db->sql_escape($matches[1]);	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License** This file creates new schema files for every database.* The filenames will be prefixed with an underscore to not overwrite the current schema files.** If you overwrite the original schema files please make sure you save the file with UNIX linefeeds.*/$schema_path = dirname(__FILE__) . '/../install/schemas/';if (!is_writable($schema_path)){	die('Schema path not writable');}$schema_data = get_schema_struct();$dbms_type_map = array(	'mysql_41'	=> array(		'INT:'		=> 'int(%d)',		'BINT'		=> 'bigint(20)',		'UINT'		=> 'mediumint(8) UNSIGNED',		'UINT:'		=> 'int(%d) UNSIGNED',		'TINT:'		=> 'tinyint(%d)',		'USINT'		=> 'smallint(4) UNSIGNED',		'BOOL'		=> 'tinyint(1) UNSIGNED',		'VCHAR'		=> 'varchar(255)',		'VCHAR:'	=> 'varchar(%d)',		'CHAR:'		=> 'char(%d)',		'XSTEXT'	=> 'text',		'XSTEXT_UNI'=> 'varchar(100)',		'STEXT'		=> 'text',		'STEXT_UNI'	=> 'varchar(255)',		'TEXT'		=> 'text',		'TEXT_UNI'	=> 'text',		'MTEXT'		=> 'mediumtext',		'MTEXT_UNI'	=> 'mediumtext',		'TIMESTAMP'	=> 'int(11) UNSIGNED',		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'varchar(255)',		'VCHAR_UNI:'=> 'varchar(%d)',		'VCHAR_CI'	=> 'varchar(255)',		'VARBINARY'	=> 'varbinary(255)',	),	'mysql_40'	=> array(		'INT:'		=> 'int(%d)',		'BINT'		=> 'bigint(20)',		'UINT'		=> 'mediumint(8) UNSIGNED',		'UINT:'		=> 'int(%d) UNSIGNED',		'TINT:'		=> 'tinyint(%d)',		'USINT'		=> 'smallint(4) UNSIGNED',		'BOOL'		=> 'tinyint(1) UNSIGNED',		'VCHAR'		=> 'varbinary(255)',		'VCHAR:'	=> 'varbinary(%d)',		'CHAR:'		=> 'binary(%d)',		'XSTEXT'	=> 'blob',		'XSTEXT_UNI'=> 'blob',		'STEXT'		=> 'blob',		'STEXT_UNI'	=> 'blob',		'TEXT'		=> 'blob',		'TEXT_UNI'	=> 'blob',		'MTEXT'		=> 'mediumblob',		'MTEXT_UNI'	=> 'mediumblob',		'TIMESTAMP'	=> 'int(11) UNSIGNED',		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'blob',		'VCHAR_UNI:'=> array('varbinary(%d)', 'limit' => array('mult', 3, 255, 'blob')),		'VCHAR_CI'	=> 'blob',		'VARBINARY'	=> 'varbinary(255)',	),	'firebird'	=> array(		'INT:'		=> 'INTEGER',		'BINT'		=> 'DOUBLE PRECISION',		'UINT'		=> 'INTEGER',		'UINT:'		=> 'INTEGER',		'TINT:'		=> 'INTEGER',		'USINT'		=> 'INTEGER',		'BOOL'		=> 'INTEGER',		'VCHAR'		=> 'VARCHAR(255) CHARACTER SET NONE',		'VCHAR:'	=> 'VARCHAR(%d) CHARACTER SET NONE',		'CHAR:'		=> 'CHAR(%d) CHARACTER SET NONE',		'XSTEXT'	=> 'BLOB SUB_TYPE TEXT CHARACTER SET NONE',		'STEXT'		=> 'BLOB SUB_TYPE TEXT CHARACTER SET NONE',		'TEXT'		=> 'BLOB SUB_TYPE TEXT CHARACTER SET NONE',		'MTEXT'		=> 'BLOB SUB_TYPE TEXT CHARACTER SET NONE',		'XSTEXT_UNI'=> 'VARCHAR(100) CHARACTER SET UTF8',		'STEXT_UNI'	=> 'VARCHAR(255) CHARACTER SET UTF8',		'TEXT_UNI'	=> 'BLOB SUB_TYPE TEXT CHARACTER SET UTF8',		'MTEXT_UNI'	=> 'BLOB SUB_TYPE TEXT CHARACTER SET UTF8',		'TIMESTAMP'	=> 'INTEGER',		'DECIMAL'	=> 'DOUBLE PRECISION',		'DECIMAL:'	=> 'DOUBLE PRECISION',		'PDECIMAL'	=> 'DOUBLE PRECISION',		'PDECIMAL:'	=> 'DOUBLE PRECISION',		'VCHAR_UNI'	=> 'VARCHAR(255) CHARACTER SET UTF8',		'VCHAR_UNI:'=> 'VARCHAR(%d) CHARACTER SET UTF8',		'VCHAR_CI'	=> 'VARCHAR(255) CHARACTER SET UTF8',		'VARBINARY'	=> 'CHAR(255) CHARACTER SET NONE',	),	'mssql'		=> array(		'INT:'		=> '[int]',		'BINT'		=> '[float]',		'UINT'		=> '[int]',		'UINT:'		=> '[int]',		'TINT:'		=> '[int]',		'USINT'		=> '[int]',		'BOOL'		=> '[int]',		'VCHAR'		=> '[varchar] (255)',		'VCHAR:'	=> '[varchar] (%d)',		'CHAR:'		=> '[char] (%d)',		'XSTEXT'	=> '[varchar] (1000)',		'STEXT'		=> '[varchar] (3000)',		'TEXT'		=> '[varchar] (8000)',		'MTEXT'		=> '[text]',		'XSTEXT_UNI'=> '[varchar] (100)',		'STEXT_UNI'	=> '[varchar] (255)',		'TEXT_UNI'	=> '[varchar] (4000)',		'MTEXT_UNI'	=> '[text]',		'TIMESTAMP'	=> '[int]',		'DECIMAL'	=> '[float]',		'DECIMAL:'	=> '[float]',		'PDECIMAL'	=> '[float]',		'PDECIMAL:'	=> '[float]',		'VCHAR_UNI'	=> '[varchar] (255)',		'VCHAR_UNI:'=> '[varchar] (%d)',		'VCHAR_CI'	=> '[varchar] (255)',		'VARBINARY'	=> '[varchar] (255)',	),	'oracle'	=> array(		'INT:'		=> 'number(%d)',		'BINT'		=> 'number(20)',		'UINT'		=> 'number(8)',		'UINT:'		=> 'number(%d)',		'TINT:'		=> 'number(%d)',		'USINT'		=> 'number(4)',		'BOOL'		=> 'number(1)',		'VCHAR'		=> 'varchar2(255)',		'VCHAR:'	=> 'varchar2(%d)',		'CHAR:'		=> 'char(%d)',		'XSTEXT'	=> 'varchar2(1000)',		'STEXT'		=> 'varchar2(3000)',		'TEXT'		=> 'clob',		'MTEXT'		=> 'clob',		'XSTEXT_UNI'=> 'varchar2(300)',		'STEXT_UNI'	=> 'varchar2(765)',		'TEXT_UNI'	=> 'clob',		'MTEXT_UNI'	=> 'clob',		'TIMESTAMP'	=> 'number(11)',		'DECIMAL'	=> 'number(5, 2)',		'DECIMAL:'	=> 'number(%d, 2)',		'PDECIMAL'	=> 'number(6, 3)',		'PDECIMAL:'	=> 'number(%d, 3)',		'VCHAR_UNI'	=> 'varchar2(765)',		'VCHAR_UNI:'=> array('varchar2(%d)', 'limit' => array('mult', 3, 765, 'clob')),		'VCHAR_CI'	=> 'varchar2(255)',		'VARBINARY'	=> 'raw(255)',	),	'sqlite'	=> array(		'INT:'		=> 'int(%d)',		'BINT'		=> 'bigint(20)',		'UINT'		=> 'INTEGER UNSIGNED', //'mediumint(8) UNSIGNED',		'UINT:'		=> 'INTEGER UNSIGNED', // 'int(%d) UNSIGNED',		'TINT:'		=> 'tinyint(%d)',		'USINT'		=> 'INTEGER UNSIGNED', //'mediumint(4) UNSIGNED',		'BOOL'		=> 'INTEGER UNSIGNED', //'tinyint(1) UNSIGNED',		'VCHAR'		=> 'varchar(255)',		'VCHAR:'	=> 'varchar(%d)',		'CHAR:'		=> 'char(%d)',		'XSTEXT'	=> 'text(65535)',		'STEXT'		=> 'text(65535)',		'TEXT'		=> 'text(65535)',		'MTEXT'		=> 'mediumtext(16777215)',		'XSTEXT_UNI'=> 'text(65535)',		'STEXT_UNI'	=> 'text(65535)',		'TEXT_UNI'	=> 'text(65535)',		'MTEXT_UNI'	=> 'mediumtext(16777215)',		'TIMESTAMP'	=> 'INTEGER UNSIGNED', //'int(11) UNSIGNED',		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'varchar(255)',		'VCHAR_UNI:'=> 'varchar(%d)',		'VCHAR_CI'	=> 'varchar(255)',		'VARBINARY'	=> 'blob',	),	'postgres'	=> array(		'INT:'		=> 'INT4',		'BINT'		=> 'INT8',		'UINT'		=> 'INT4', // unsigned		'UINT:'		=> 'INT4', // unsigned		'USINT'		=> 'INT2', // unsigned		'BOOL'		=> 'INT2', // unsigned		'TINT:'		=> 'INT2',		'VCHAR'		=> 'varchar(255)',		'VCHAR:'	=> 'varchar(%d)',		'CHAR:'		=> 'char(%d)',		'XSTEXT'	=> 'varchar(1000)',		'STEXT'		=> 'varchar(3000)',		'TEXT'		=> 'varchar(8000)',		'MTEXT'		=> 'TEXT',		'XSTEXT_UNI'=> 'varchar(100)',		'STEXT_UNI'	=> 'varchar(255)',		'TEXT_UNI'	=> 'varchar(4000)',		'MTEXT_UNI'	=> 'TEXT',		'TIMESTAMP'	=> 'INT4', // unsigned		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'varchar(255)',		'VCHAR_UNI:'=> 'varchar(%d)',		'VCHAR_CI'	=> 'varchar_ci',		'VARBINARY'	=> 'bytea',	),);// A list of types being unsigned for better reference in some db's$unsigned_types = array('UINT', 'UINT:', 'USINT', 'BOOL', 'TIMESTAMP');$supported_dbms = array('firebird', 'mssql', 'mysql_40', 'mysql_41', 'oracle', 'postgres', 'sqlite');foreach ($supported_dbms as $dbms){	$fp = fopen($schema_path . $dbms . '_schema.sql', 'wt');	$line = '';	// Write Header	switch ($dbms)	{		case 'mysql_40':		case 'mysql_41':		case 'firebird':		case 'sqlite':			fwrite($fp, "# DO NOT EDIT THIS FILE, IT IS GENERATED\n");			fwrite($fp, "#\n");			fwrite($fp, "# To change the contents of this file, edit\n");			fwrite($fp, "# phpBB/develop/create_schema_files.php and\n");			fwrite($fp, "# run it.\n");		break;		case 'mssql':		case 'oracle':		case 'postgres':			fwrite($fp, "/*\n");			fwrite($fp, " * DO NOT EDIT THIS FILE, IT IS GENERATED\n");			fwrite($fp, " *\n");			fwrite($fp, " * To change the contents of this file, edit\n");			fwrite($fp, " * phpBB/develop/create_schema_files.php and\n");			fwrite($fp, " * run it.\n");			fwrite($fp, " */\n\n");		break;	}	switch ($dbms)	{		case 'firebird':			$line .= custom_data('firebird') . "\n";		break;		case 'sqlite':			$line .= "BEGIN TRANSACTION;\n\n";		break;		case 'oracle':			$line .= custom_data('oracle') . "\n";		break;		case 'postgres':			$line .= "BEGIN;\n\n";			$line .= custom_data('postgres') . "\n";		break;	}	fwrite($fp, $line);	foreach ($schema_data as $table_name => $table_data)	{		// Write comment about table		switch ($dbms)		{			case 'mysql_40':			case 'mysql_41':			case 'firebird':			case 'sqlite':				fwrite($fp, "# Table: '{$table_name}'\n");			break;			case 'mssql':			case 'oracle':			case 'postgres':				fwrite($fp, "/*\n\tTable: '{$table_name}'\n*/\n");			break;		}		// Create Table statement		$generator = $textimage = false;		$line = '';		switch ($dbms)		{			case 'mysql_40':			case 'mysql_41':			case 'firebird':			case 'oracle':			case 'sqlite':			case 'postgres':				$line = "CREATE TABLE {$table_name} (\n";			break;			case 'mssql':				$line = "CREATE TABLE [{$table_name}] (\n";			break;		}		// Table specific so we don't get overlap		$modded_array = array();		// Write columns one by one...		foreach ($table_data['COLUMNS'] as $column_name => $column_data)		{			if (strlen($column_name) > 30)			{				trigger_error("Column name '$column_name' on table '$table_name' is too long. The maximum is 30 characters.", E_USER_ERROR);			}			if (isset($column_data[2]) && $column_data[2] == 'auto_increment' && strlen($column_name) > 26) // "${column_name}_gen"			{				trigger_error("Index name '${column_name}_gen' on table '$table_name' is too long. The maximum is 30 characters.", E_USER_ERROR);			}			// Get type			if (strpos($column_data[0], ':') !== false)			{				list($orig_column_type, $column_length) = explode(':', $column_data[0]);				if (!is_array($dbms_type_map[$dbms][$orig_column_type . ':']))				{					$column_type = sprintf($dbms_type_map[$dbms][$orig_column_type . ':'], $column_length);				}				else				{					if (isset($dbms_type_map[$dbms][$orig_column_type . ':']['rule']))					{						switch ($dbms_type_map[$dbms][$orig_column_type . ':']['rule'][0])						{							case 'div':								$column_length /= $dbms_type_map[$dbms][$orig_column_type . ':']['rule'][1];								$column_length = ceil($column_length);								$column_type = sprintf($dbms_type_map[$dbms][$orig_column_type . ':'][0], $column_length);							break;						}					}					if (isset($dbms_type_map[$dbms][$orig_column_type . ':']['limit']))					{						switch ($dbms_type_map[$dbms][$orig_column_type . ':']['limit'][0])						{							case 'mult':								$column_length *= $dbms_type_map[$dbms][$orig_column_type . ':']['limit'][1];								if ($column_length > $dbms_type_map[$dbms][$orig_column_type . ':']['limit'][2])								{									$column_type = $dbms_type_map[$dbms][$orig_column_type . ':']['limit'][3];									$modded_array[$column_name] = $column_type;								}								else								{									$column_type = sprintf($dbms_type_map[$dbms][$orig_column_type . ':'][0], $column_length);								}							break;						}					}				}				$orig_column_type .= ':';			}			else			{				$orig_column_type = $column_data[0];				$column_type = $dbms_type_map[$dbms][$column_data[0]];				if ($column_type == 'text' || $column_type == 'blob')				{					$modded_array[$column_name] = $column_type;				}			}			// Adjust default value if db-dependant specified			if (is_array($column_data[1]))			{				$column_data[1] = (isset($column_data[1][$dbms])) ? $column_data[1][$dbms] : $column_data[1]['default'];			}			switch ($dbms)			{				case 'mysql_40':				case 'mysql_41':					$line .= "\t{$column_name} {$column_type} ";					// For hexadecimal values do not use single quotes					if (!is_null($column_data[1]) && substr($column_type, -4) !== 'text' && substr($column_type, -4) !== 'blob')					{						$line .= (strpos($column_data[1], '0x') === 0) ? "DEFAULT {$column_data[1]} " : "DEFAULT '{$column_data[1]}' ";					}					$line .= 'NOT NULL';					if (isset($column_data[2]))					{						if ($column_data[2] == 'auto_increment')						{							$line .= ' auto_increment';						}						else if ($dbms === 'mysql_41' && $column_data[2] == 'true_sort')						{							$line .= ' COLLATE utf8_unicode_ci';						}					}					$line .= ",\n";				break;				case 'sqlite':					if (isset($column_data[2]) && $column_data[2] == 'auto_increment')					{						$line .= "\t{$column_name} INTEGER PRIMARY KEY ";						$generator = $column_name;					}					else					{						$line .= "\t{$column_name} {$column_type} ";					}					$line .= 'NOT NULL ';					$line .= (!is_null($column_data[1])) ? "DEFAULT '{$column_data[1]}'" : '';					$line .= ",\n";				break;				case 'firebird':					$line .= "\t{$column_name} {$column_type} ";					if (!is_null($column_data[1]))					{						$line .= 'DEFAULT ' . ((is_numeric($column_data[1])) ? $column_data[1] : "'{$column_data[1]}'") . ' ';					}					$line .= 'NOT NULL';					// This is a UNICODE column and thus should be given it's fair share					if (preg_match('/^X?STEXT_UNI|VCHAR_(CI|UNI:?)/', $column_data[0]))					{						$line .= ' COLLATE UNICODE';					}					$line .= ",\n";					if (isset($column_data[2]) && $column_data[2] == 'auto_increment')					{						$generator = $column_name;					}				break;				case 'mssql':					if ($column_type == '[text]')					{						$textimage = true;					}					$line .= "\t[{$column_name}] {$column_type} ";					if (!is_null($column_data[1]))					{						// For hexadecimal values do not use single quotes						if (strpos($column_data[1], '0x') === 0)						{							$line .= 'DEFAULT (' . $column_data[1] . ') ';						}						else						{							$line .= 'DEFAULT (' . ((is_numeric($column_data[1])) ? $column_data[1] : "'{$column_data[1]}'") . ') ';						}					}					if (isset($column_data[2]) && $column_data[2] == 'auto_increment')					{						$line .= 'IDENTITY (1, 1) ';					}					$line .= 'NOT NULL';					$line .= " ,\n";				break;				case 'oracle':					$line .= "\t{$column_name} {$column_type} ";					$line .= (!is_null($column_data[1])) ? "DEFAULT '{$column_data[1]}' " : '';					// In Oracle empty strings ('') are treated as NULL.					// Therefore in oracle we allow NULL's for all DEFAULT '' entries					$line .= ($column_data[1] === '') ? ",\n" : "NOT NULL,\n";					if (isset($column_data[2]) && $column_data[2] == 'auto_increment')					{						$generator = $column_name;					}				break;				case 'postgres':					$line .= "\t{$column_name} {$column_type} ";					if (isset($column_data[2]) && $column_data[2] == 'auto_increment')					{						$line .= "DEFAULT nextval('{$table_name}_seq'),\n";						// Make sure the sequence will be created before creating the table						$line = "CREATE SEQUENCE {$table_name}_seq;\n\n" . $line;					}					else					{						$line .= (!is_null($column_data[1])) ? "DEFAULT '{$column_data[1]}' " : '';						$line .= "NOT NULL";						// Unsigned? Then add a CHECK contraint						if (in_array($orig_column_type, $unsigned_types))						{							$line .= " CHECK ({$column_name} >= 0)";						}						$line .= ",\n";					}				break;			}		}		switch ($dbms)		{			case 'firebird':				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n);;\n\n";			break;			case 'mssql':				$line = substr($line, 0, -2);				$line .= "\n) ON [PRIMARY]" . (($textimage) ? ' TEXTIMAGE_ON [PRIMARY]' : '') . "\n";				$line .= "GO\n\n";			break;		}		// Write primary key		if (isset($table_data['PRIMARY_KEY']))		{			if (!is_array($table_data['PRIMARY_KEY']))			{				$table_data['PRIMARY_KEY'] = array($table_data['PRIMARY_KEY']);			}			switch ($dbms)			{				case 'mysql_40':				case 'mysql_41':				case 'postgres':					$line .= "\tPRIMARY KEY (" . implode(', ', $table_data['PRIMARY_KEY']) . "),\n";				break;				case 'firebird':					$line .= "ALTER TABLE {$table_name} ADD PRIMARY KEY (" . implode(', ', $table_data['PRIMARY_KEY']) . ");;\n\n";				break;				case 'sqlite':					if ($generator === false || !in_array($generator, $table_data['PRIMARY_KEY']))					{						$line .= "\tPRIMARY KEY (" . implode(', ', $table_data['PRIMARY_KEY']) . "),\n";					}				break;				case 'mssql':					$line .= "ALTER TABLE [{$table_name}] WITH NOCHECK ADD \n";					$line .= "\tCONSTRAINT [PK_{$table_name}] PRIMARY KEY  CLUSTERED \n";					$line .= "\t(\n";					$line .= "\t\t[" . implode("],\n\t\t[", $table_data['PRIMARY_KEY']) . "]\n";					$line .= "\t)  ON [PRIMARY] \n";					$line .= "GO\n\n";				break;				case 'oracle':					$line .= "\tCONSTRAINT pk_{$table_name} PRIMARY KEY (" . implode(', ', $table_data['PRIMARY_KEY']) . "),\n";				break;			}		}		switch ($dbms)		{			case 'oracle':				// UNIQUE contrains to be added?				if (isset($table_data['KEYS']))				{					foreach ($table_data['KEYS'] as $key_name => $key_data)					{						if (!is_array($key_data[1]))						{							$key_data[1] = array($key_data[1]);						}						if ($key_data[0] == 'UNIQUE')						{							$line .= "\tCONSTRAINT u_phpbb_{$key_name} UNIQUE (" . implode(', ', $key_data[1]) . "),\n";						}					}				}				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n)\n/\n\n";			break;			case 'postgres':				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n);\n\n";			break;			case 'sqlite':				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n);\n\n";			break;		}		// Write Keys		if (isset($table_data['KEYS']))		{			foreach ($table_data['KEYS'] as $key_name => $key_data)			{				if (!is_array($key_data[1]))				{					$key_data[1] = array($key_data[1]);				}				if (strlen($table_name . $key_name) > 30)				{					trigger_error("Index name '${table_name}_$key_name' on table '$table_name' is too long. The maximum is 30 characters.", E_USER_ERROR);				}				switch ($dbms)				{					case 'mysql_40':					case 'mysql_41':						$line .= ($key_data[0] == 'INDEX') ? "\tKEY" : '';						$line .= ($key_data[0] == 'UNIQUE') ? "\tUNIQUE" : '';						foreach ($key_data[1] as $key => $col_name)						{							if (isset($modded_array[$col_name]))							{								switch ($modded_array[$col_name])								{									case 'text':									case 'blob':										$key_data[1][$key] = $col_name . '(255)';									break;								}							}						}						$line .= ' ' . $key_name . ' (' . implode(', ', $key_data[1]) . "),\n";					break;					case 'firebird':						$line .= ($key_data[0] == 'INDEX') ? 'CREATE INDEX' : '';						$line .= ($key_data[0] == 'UNIQUE') ? 'CREATE UNIQUE INDEX' : '';						$line .= ' ' . $table_name . '_' . $key_name . ' ON ' . $table_name . '(' . implode(', ', $key_data[1]) . ");;\n";					break;					case 'mssql':						$line .= ($key_data[0] == 'INDEX') ? 'CREATE  INDEX' : '';						$line .= ($key_data[0] == 'UNIQUE') ? 'CREATE  UNIQUE  INDEX' : '';						$line .= " [{$key_name}] ON [{$table_name}]([" . implode('], [', $key_data[1]) . "]) ON [PRIMARY]\n";						$line .= "GO\n\n";					break;					case 'oracle':						if ($key_data[0] == 'UNIQUE')						{							continue;						}						$line .= ($key_data[0] == 'INDEX') ? 'CREATE INDEX' : '';						$line .= " {$table_name}_{$key_name} ON {$table_name} (" . implode(', ', $key_data[1]) . ")\n";						$line .= "/\n";					break;					case 'sqlite':						$line .= ($key_data[0] == 'INDEX') ? 'CREATE INDEX' : '';						$line .= ($key_data[0] == 'UNIQUE') ? 'CREATE UNIQUE INDEX' : '';						$line .= " {$table_name}_{$key_name} ON {$table_name} (" . implode(', ', $key_data[1]) . ");\n";					break;					case 'postgres':						$line .= ($key_data[0] == 'INDEX') ? 'CREATE INDEX' : '';						$line .= ($key_data[0] == 'UNIQUE') ? 'CREATE UNIQUE INDEX' : '';						$line .= " {$table_name}_{$key_name} ON {$table_name} (" . implode(', ', $key_data[1]) . ");\n";					break;				}			}		}		switch ($dbms)		{			case 'mysql_40':				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n);\n\n";			break;			case 'mysql_41':				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n) CHARACTER SET `utf8` COLLATE `utf8_bin`;\n\n";			break;			// Create Generator			case 'firebird':				if ($generator !== false)				{					$line .= "\nCREATE GENERATOR {$table_name}_gen;;\n";					$line .= 'SET GENERATOR ' . $table_name . "_gen TO 0;;\n\n";					$line .= 'CREATE TRIGGER t_' . $table_name . ' FOR ' . $table_name . "\n";					$line .= "BEFORE INSERT\nAS\nBEGIN\n";					$line .= "\tNEW.{$generator} = GEN_ID({$table_name}_gen, 1);\nEND;;\n\n";				}			break;			case 'oracle':				if ($generator !== false)				{					$line .= "\nCREATE SEQUENCE {$table_name}_seq\n/\n\n";					$line .= "CREATE OR REPLACE TRIGGER t_{$table_name}\n";					$line .= "BEFORE INSERT ON {$table_name}\n";					$line .= "FOR EACH ROW WHEN (\n";					$line .= "\tnew.{$generator} IS NULL OR new.{$generator} = 0\n";					$line .= ")\nBEGIN\n";					$line .= "\tSELECT {$table_name}_seq.nextval\n";					$line .= "\tINTO :new.{$generator}\n";					$line .= "\tFROM dual;\nEND;\n/\n\n";				}			break;		}		fwrite($fp, $line . "\n");	}	$line = '';	// Write custom function at the end for some db's	switch ($dbms)	{		case 'mssql':			// No need to do this, no transaction support for schema changes			//$line = "\nCOMMIT\nGO\n\n";		break;		case 'sqlite':			$line = "\nCOMMIT;";		break;		case 'postgres':			$line = "\nCOMMIT;";		break;	}	fwrite($fp, $line);	fclose($fp);}/*** Define the basic structure* The format:*		array('{TABLE_NAME}' => {TABLE_DATA})*		{TABLE_DATA}:*			COLUMNS = array({column_name} = array({column_type}, {default}, {auto_increment}))*			PRIMARY_KEY = {column_name(s)}*			KEYS = array({key_name} = array({key_type}, {column_name(s)})),**	Column Types:*	INT:x		=> SIGNED int(x)*	BINT		=> BIGINT*	UINT		=> mediumint(8) UNSIGNED*	UINT:x		=> int(x) UNSIGNED*	TINT:x		=> tinyint(x)*	USINT		=> smallint(4) UNSIGNED (for _order columns)*	BOOL		=> tinyint(1) UNSIGNED*	VCHAR		=> varchar(255)*	CHAR:x		=> char(x)*	XSTEXT_UNI	=> text for storing 100 characters (topic_title for example)*	STEXT_UNI	=> text for storing 255 characters (normal input field with a max of 255 single-byte chars) - same as VCHAR_UNI*	TEXT_UNI	=> text for storing 3000 characters (short text, descriptions, comments, etc.)*	MTEXT_UNI	=> mediumtext (post text, large text)*	VCHAR:x		=> varchar(x)*	TIMESTAMP	=> int(11) UNSIGNED*	DECIMAL		=> decimal number (5,2)*	DECIMAL:	=> decimal number (x,2)*	PDECIMAL	=> precision decimal number (6,3)*	PDECIMAL:	=> precision decimal number (x,3)*	VCHAR_UNI	=> varchar(255) BINARY*	VCHAR_CI	=> varchar_ci for postgresql, others VCHAR*/function get_schema_struct(){	$schema_data = array();	$schema_data['phpbb_attachments'] = array(		'COLUMNS'		=> array(			'attach_id'			=> array('UINT', NULL, 'auto_increment'),			'post_msg_id'		=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'in_message'		=> array('BOOL', 0),			'poster_id'			=> array('UINT', 0),			'is_orphan'			=> array('BOOL', 1),			'physical_filename'	=> array('VCHAR', ''),			'real_filename'		=> array('VCHAR', ''),			'download_count'	=> array('UINT', 0),			'attach_comment'	=> array('TEXT_UNI', ''),			'extension'			=> array('VCHAR:100', ''),			'mimetype'			=> array('VCHAR:100', ''),			'filesize'			=> array('UINT:20', 0),			'filetime'			=> array('TIMESTAMP', 0),			'thumbnail'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'attach_id',		'KEYS'			=> array(			'filetime'			=> array('INDEX', 'filetime'),			'post_msg_id'		=> array('INDEX', 'post_msg_id'),			'topic_id'			=> array('INDEX', 'topic_id'),			'poster_id'			=> array('INDEX', 'poster_id'),			'is_orphan'			=> array('INDEX', 'is_orphan'),		),	);	$schema_data['phpbb_acl_groups'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_role_id'		=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'KEYS'			=> array(			'group_id'		=> array('INDEX', 'group_id'),			'auth_opt_id'	=> array('INDEX', 'auth_option_id'),			'auth_role_id'	=> array('INDEX', 'auth_role_id'),		),	);	$schema_data['phpbb_acl_options'] = array(		'COLUMNS'		=> array(			'auth_option_id'	=> array('UINT', NULL, 'auto_increment'),			'auth_option'		=> array('VCHAR:50', ''),			'is_global'			=> array('BOOL', 0),			'is_local'			=> array('BOOL', 0),			'founder_only'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'auth_option_id',		'KEYS'			=> array(			'auth_option'		=> array('UNIQUE', 'auth_option'),		),	);	$schema_data['phpbb_acl_roles'] = array(		'COLUMNS'		=> array(			'role_id'			=> array('UINT', NULL, 'auto_increment'),			'role_name'			=> array('VCHAR_UNI', ''),			'role_description'	=> array('TEXT_UNI', ''),			'role_type'			=> array('VCHAR:10', ''),			'role_order'		=> array('USINT', 0),		),		'PRIMARY_KEY'	=> 'role_id',		'KEYS'			=> array(			'role_type'			=> array('INDEX', 'role_type'),			'role_order'		=> array('INDEX', 'role_order'),		),	);	$schema_data['phpbb_acl_roles_data'] = array(		'COLUMNS'		=> array(			'role_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'PRIMARY_KEY'	=> array('role_id', 'auth_option_id'),		'KEYS'			=> array(			'ath_op_id'			=> array('INDEX', 'auth_option_id'),		),	);	$schema_data['phpbb_acl_users'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_role_id'		=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'KEYS'			=> array(			'user_id'			=> array('INDEX', 'user_id'),			'auth_option_id'	=> array('INDEX', 'auth_option_id'),			'auth_role_id'		=> array('INDEX', 'auth_role_id'),		),	);	$schema_data['phpbb_banlist'] = array(		'COLUMNS'		=> array(			'ban_id'			=> array('UINT', NULL, 'auto_increment'),			'ban_userid'		=> array('UINT', 0),			'ban_ip'			=> array('VCHAR:40', ''),			'ban_email'			=> array('VCHAR_UNI:100', ''),			'ban_start'			=> array('TIMESTAMP', 0),			'ban_end'			=> array('TIMESTAMP', 0),			'ban_exclude'		=> array('BOOL', 0),			'ban_reason'		=> array('VCHAR_UNI', ''),			'ban_give_reason'	=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'			=> 'ban_id',		'KEYS'			=> array(			'ban_end'			=> array('INDEX', 'ban_end'),			'ban_user'			=> array('INDEX', array('ban_userid', 'ban_exclude')),			'ban_email'			=> array('INDEX', array('ban_email', 'ban_exclude')),			'ban_ip'			=> array('INDEX', array('ban_ip', 'ban_exclude')),		),	);	$schema_data['phpbb_bbcodes'] = array(		'COLUMNS'		=> array(			'bbcode_id'				=> array('USINT', 0),			'bbcode_tag'			=> array('VCHAR:16', ''),			'bbcode_helpline'		=> array('VCHAR_UNI', ''),			'display_on_posting'	=> array('BOOL', 0),			'bbcode_match'			=> array('TEXT_UNI', ''),			'bbcode_tpl'			=> array('MTEXT_UNI', ''),			'first_pass_match'		=> array('MTEXT_UNI', ''),			'first_pass_replace'	=> array('MTEXT_UNI', ''),			'second_pass_match'		=> array('MTEXT_UNI', ''),			'second_pass_replace'	=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'bbcode_id',		'KEYS'			=> array(			'display_on_post'		=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_bookmarks'] = array(		'COLUMNS'		=> array(			'topic_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'			=> array('topic_id', 'user_id'),	);	$schema_data['phpbb_bots'] = array(		'COLUMNS'		=> array(			'bot_id'			=> array('UINT', NULL, 'auto_increment'),			'bot_active'		=> array('BOOL', 1),			'bot_name'			=> array('STEXT_UNI', ''),			'user_id'			=> array('UINT', 0),			'bot_agent'			=> array('VCHAR', ''),			'bot_ip'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'bot_id',		'KEYS'			=> array(			'bot_active'		=> array('INDEX', 'bot_active'),		),	);	$schema_data['phpbb_config'] = array(		'COLUMNS'		=> array(			'config_name'		=> array('VCHAR', ''),			'config_value'		=> array('VCHAR_UNI', ''),			'is_dynamic'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'config_name',		'KEYS'			=> array(			'is_dynamic'		=> array('INDEX', 'is_dynamic'),		),	);	$schema_data['phpbb_confirm'] = array(		'COLUMNS'		=> array(			'confirm_id'		=> array('CHAR:32', ''),			'session_id'		=> array('CHAR:32', ''),			'confirm_type'		=> array('TINT:3', 0),			'code'				=> array('VCHAR:8', ''),			'seed'				=> array('UINT:10', 0),			'attempts'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> array('session_id', 'confirm_id'),		'KEYS'			=> array(			'confirm_type'		=> array('INDEX', 'confirm_type'),		),	);	$schema_data['phpbb_disallow'] = array(		'COLUMNS'		=> array(			'disallow_id'		=> array('UINT', NULL, 'auto_increment'),			'disallow_username'	=> array('VCHAR_UNI:255', ''),		),		'PRIMARY_KEY'	=> 'disallow_id',	);	$schema_data['phpbb_drafts'] = array(		'COLUMNS'		=> array(			'draft_id'			=> array('UINT', NULL, 'auto_increment'),			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'save_time'			=> array('TIMESTAMP', 0),			'draft_subject'		=> array('STEXT_UNI', ''),			'draft_message'		=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'draft_id',		'KEYS'			=> array(			'save_time'			=> array('INDEX', 'save_time'),		),	);	$schema_data['phpbb_extensions'] = array(		'COLUMNS'		=> array(			'extension_id'		=> array('UINT', NULL, 'auto_increment'),			'group_id'			=> array('UINT', 0),			'extension'			=> array('VCHAR:100', ''),		),		'PRIMARY_KEY'	=> 'extension_id',	);	$schema_data['phpbb_extension_groups'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', NULL, 'auto_increment'),			'group_name'		=> array('VCHAR_UNI', ''),			'cat_id'			=> array('TINT:2', 0),			'allow_group'		=> array('BOOL', 0),			'download_mode'		=> array('BOOL', 1),			'upload_icon'		=> array('VCHAR', ''),			'max_filesize'		=> array('UINT:20', 0),			'allowed_forums'	=> array('TEXT', ''),			'allow_in_pm'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'group_id',	);	$schema_data['phpbb_forums'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', NULL, 'auto_increment'),			'parent_id'				=> array('UINT', 0),			'left_id'				=> array('UINT', 0),			'right_id'				=> array('UINT', 0),			'forum_parents'			=> array('MTEXT', ''),			'forum_name'			=> array('STEXT_UNI', ''),			'forum_desc'			=> array('TEXT_UNI', ''),			'forum_desc_bitfield'	=> array('VCHAR:255', ''),			'forum_desc_options'	=> array('UINT:11', 7),			'forum_desc_uid'		=> array('VCHAR:8', ''),			'forum_link'			=> array('VCHAR_UNI', ''),			'forum_password'		=> array('VCHAR_UNI:40', ''),			'forum_style'			=> array('UINT', 0),			'forum_image'			=> array('VCHAR', ''),			'forum_rules'			=> array('TEXT_UNI', ''),			'forum_rules_link'		=> array('VCHAR_UNI', ''),			'forum_rules_bitfield'	=> array('VCHAR:255', ''),			'forum_rules_options'	=> array('UINT:11', 7),			'forum_rules_uid'		=> array('VCHAR:8', ''),			'forum_topics_per_page'	=> array('TINT:4', 0),			'forum_type'			=> array('TINT:4', 0),			'forum_status'			=> array('TINT:4', 0),			'forum_posts'			=> array('UINT', 0),			'forum_topics'			=> array('UINT', 0),			'forum_topics_real'		=> array('UINT', 0),			'forum_last_post_id'	=> array('UINT', 0),			'forum_last_poster_id'	=> array('UINT', 0),			'forum_last_post_subject' => array('STEXT_UNI', ''),			'forum_last_post_time'	=> array('TIMESTAMP', 0),			'forum_last_poster_name'=> array('VCHAR_UNI', ''),			'forum_last_poster_colour'=> array('VCHAR:6', ''),			'forum_flags'			=> array('TINT:4', 32),			'forum_options'			=> array('UINT:20', 0),			'display_subforum_list'	=> array('BOOL', 1),			'display_on_index'		=> array('BOOL', 1),			'enable_indexing'		=> array('BOOL', 1),			'enable_icons'			=> array('BOOL', 1),			'enable_prune'			=> array('BOOL', 0),			'prune_next'			=> array('TIMESTAMP', 0),			'prune_days'			=> array('UINT', 0),			'prune_viewed'			=> array('UINT', 0),			'prune_freq'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'forum_id',		'KEYS'			=> array(			'left_right_id'			=> array('INDEX', array('left_id', 'right_id')),			'forum_lastpost_id'		=> array('INDEX', 'forum_last_post_id'),		),	);	$schema_data['phpbb_forums_access'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'session_id'			=> array('CHAR:32', ''),		),		'PRIMARY_KEY'	=> array('forum_id', 'user_id', 'session_id'),	);	$schema_data['phpbb_forums_track'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'mark_time'				=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'forum_id'),	);	$schema_data['phpbb_forums_watch'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'notify_status'			=> array('BOOL', 0),		),		'KEYS'			=> array(			'forum_id'				=> array('INDEX', 'forum_id'),			'user_id'				=> array('INDEX', 'user_id'),			'notify_stat'			=> array('INDEX', 'notify_status'),		),	);	$schema_data['phpbb_groups'] = array(		'COLUMNS'		=> array(			'group_id'				=> array('UINT', NULL, 'auto_increment'),			'group_type'			=> array('TINT:4', 1),			'group_founder_manage'	=> array('BOOL', 0),			'group_skip_auth'		=> array('BOOL', 0),			'group_name'			=> array('VCHAR_CI', ''),			'group_desc'			=> array('TEXT_UNI', ''),			'group_desc_bitfield'	=> array('VCHAR:255', ''),			'group_desc_options'	=> array('UINT:11', 7),			'group_desc_uid'		=> array('VCHAR:8', ''),			'group_display'			=> array('BOOL', 0),			'group_avatar'			=> array('VCHAR', ''),			'group_avatar_type'		=> array('TINT:2', 0),			'group_avatar_width'	=> array('USINT', 0),			'group_avatar_height'	=> array('USINT', 0),			'group_rank'			=> array('UINT', 0),			'group_colour'			=> array('VCHAR:6', ''),			'group_sig_chars'		=> array('UINT', 0),			'group_receive_pm'		=> array('BOOL', 0),			'group_message_limit'	=> array('UINT', 0),			'group_max_recipients'	=> array('UINT', 0),			'group_legend'			=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'group_id',		'KEYS'			=> array(			'group_legend_name'		=> array('INDEX', array('group_legend', 'group_name')),		),	);	$schema_data['phpbb_icons'] = array(		'COLUMNS'		=> array(			'icons_id'				=> array('UINT', NULL, 'auto_increment'),			'icons_url'				=> array('VCHAR', ''),			'icons_width'			=> array('TINT:4', 0),			'icons_height'			=> array('TINT:4', 0),			'icons_order'			=> array('UINT', 0),			'display_on_posting'	=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'icons_id',		'KEYS'			=> array(			'display_on_posting'	=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_lang'] = array(		'COLUMNS'		=> array(			'lang_id'				=> array('TINT:4', NULL, 'auto_increment'),			'lang_iso'				=> array('VCHAR:30', ''),			'lang_dir'				=> array('VCHAR:30', ''),			'lang_english_name'		=> array('VCHAR_UNI:100', ''),			'lang_local_name'		=> array('VCHAR_UNI:255', ''),			'lang_author'			=> array('VCHAR_UNI:255', ''),		),		'PRIMARY_KEY'	=> 'lang_id',		'KEYS'			=> array(			'lang_iso'				=> array('INDEX', 'lang_iso'),		),	);	$schema_data['phpbb_log'] = array(		'COLUMNS'		=> array(			'log_id'				=> array('UINT', NULL, 'auto_increment'),			'log_type'				=> array('TINT:4', 0),			'user_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'topic_id'				=> array('UINT', 0),			'reportee_id'			=> array('UINT', 0),			'log_ip'				=> array('VCHAR:40', ''),			'log_time'				=> array('TIMESTAMP', 0),			'log_operation'			=> array('TEXT_UNI', ''),			'log_data'				=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'log_id',		'KEYS'			=> array(			'log_type'				=> array('INDEX', 'log_type'),			'forum_id'				=> array('INDEX', 'forum_id'),			'topic_id'				=> array('INDEX', 'topic_id'),			'reportee_id'			=> array('INDEX', 'reportee_id'),			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_login_attempts'] = array(		'COLUMNS'		=> array(			'attempt_ip'			=> array('VCHAR:40', ''),			'attempt_browser'		=> array('VCHAR:150', ''),			'attempt_forwarded_for'	=> array('VCHAR:255', ''),			'attempt_time'			=> array('TIMESTAMP', 0),			'user_id'				=> array('UINT', 0),			'username'				=> array('VCHAR_UNI:255', 0),			'username_clean'		=> array('VCHAR_CI', 0),		),		'KEYS'			=> array(			'att_ip'				=> array('INDEX', array('attempt_ip', 'attempt_time')),			'att_for'		=> array('INDEX', array('attempt_forwarded_for', 'attempt_time')),			'att_time'				=> array('INDEX', array('attempt_time')),			'user_id'					=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_moderator_cache'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'username'				=> array('VCHAR_UNI:255', ''),			'group_id'				=> array('UINT', 0),			'group_name'			=> array('VCHAR_UNI', ''),			'display_on_index'		=> array('BOOL', 1),		),		'KEYS'			=> array(			'disp_idx'				=> array('INDEX', 'display_on_index'),			'forum_id'				=> array('INDEX', 'forum_id'),		),	);	$schema_data['phpbb_modules'] = array(		'COLUMNS'		=> array(			'module_id'				=> array('UINT', NULL, 'auto_increment'),			'module_enabled'		=> array('BOOL', 1),			'module_display'		=> array('BOOL', 1),			'module_basename'		=> array('VCHAR', ''),			'module_class'			=> array('VCHAR:10', ''),			'parent_id'				=> array('UINT', 0),			'left_id'				=> array('UINT', 0),			'right_id'				=> array('UINT', 0),			'module_langname'		=> array('VCHAR', ''),			'module_mode'			=> array('VCHAR', ''),			'module_auth'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'module_id',		'KEYS'			=> array(			'left_right_id'			=> array('INDEX', array('left_id', 'right_id')),			'module_enabled'		=> array('INDEX', 'module_enabled'),			'class_left_id'			=> array('INDEX', array('module_class', 'left_id')),		),	);	$schema_data['phpbb_poll_options'] = array(		'COLUMNS'		=> array(			'poll_option_id'		=> array('TINT:4', 0),			'topic_id'				=> array('UINT', 0),			'poll_option_text'		=> array('TEXT_UNI', ''),			'poll_option_total'		=> array('UINT', 0),		),		'KEYS'			=> array(			'poll_opt_id'			=> array('INDEX', 'poll_option_id'),			'topic_id'				=> array('INDEX', 'topic_id'),		),	);	$schema_data['phpbb_poll_votes'] = array(		'COLUMNS'		=> array(			'topic_id'				=> array('UINT', 0),			'poll_option_id'		=> array('TINT:4', 0),			'vote_user_id'			=> array('UINT', 0),			'vote_user_ip'			=> array('VCHAR:40', ''),		),		'KEYS'			=> array(			'topic_id'				=> array('INDEX', 'topic_id'),			'vote_user_id'			=> array('INDEX', 'vote_user_id'),			'vote_user_ip'			=> array('INDEX', 'vote_user_ip'),		),	);	$schema_data['phpbb_posts'] = array(		'COLUMNS'		=> array(			'post_id'				=> array('UINT', NULL, 'auto_increment'),			'topic_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'poster_id'				=> array('UINT', 0),			'icon_id'				=> array('UINT', 0),			'poster_ip'				=> array('VCHAR:40', ''),			'post_time'				=> array('TIMESTAMP', 0),			'post_approved'			=> array('BOOL', 1),			'post_reported'			=> array('BOOL', 0),			'enable_bbcode'			=> array('BOOL', 1),			'enable_smilies'		=> array('BOOL', 1),			'enable_magic_url'		=> array('BOOL', 1),			'enable_sig'			=> array('BOOL', 1),			'post_username'			=> array('VCHAR_UNI:255', ''),			'post_subject'			=> array('STEXT_UNI', '', 'true_sort'),			'post_text'				=> array('MTEXT_UNI', ''),			'post_checksum'			=> array('VCHAR:32', ''),			'post_attachment'		=> array('BOOL', 0),			'bbcode_bitfield'		=> array('VCHAR:255', ''),			'bbcode_uid'			=> array('VCHAR:8', ''),			'post_postcount'		=> array('BOOL', 1),			'post_edit_time'		=> array('TIMESTAMP', 0),			'post_edit_reason'		=> array('STEXT_UNI', ''),			'post_edit_user'		=> array('UINT', 0),			'post_edit_count'		=> array('USINT', 0),			'post_edit_locked'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'post_id',		'KEYS'			=> array(			'forum_id'				=> array('INDEX', 'forum_id'),			'topic_id'				=> array('INDEX', 'topic_id'),			'poster_ip'				=> array('INDEX', 'poster_ip'),			'poster_id'				=> array('INDEX', 'poster_id'),			'post_approved'			=> array('INDEX', 'post_approved'),			'post_username'			=> array('INDEX', 'post_username'),			'tid_post_time'			=> array('INDEX', array('topic_id', 'post_time')),		),	);	$schema_data['phpbb_privmsgs'] = array(		'COLUMNS'		=> array(			'msg_id'				=> array('UINT', NULL, 'auto_increment'),			'root_level'			=> array('UINT', 0),			'author_id'				=> array('UINT', 0),			'icon_id'				=> array('UINT', 0),			'author_ip'				=> array('VCHAR:40', ''),			'message_time'			=> array('TIMESTAMP', 0),			'enable_bbcode'			=> array('BOOL', 1),			'enable_smilies'		=> array('BOOL', 1),			'enable_magic_url'		=> array('BOOL', 1),			'enable_sig'			=> array('BOOL', 1),			'message_subject'		=> array('STEXT_UNI', ''),			'message_text'			=> array('MTEXT_UNI', ''),			'message_edit_reason'	=> array('STEXT_UNI', ''),			'message_edit_user'		=> array('UINT', 0),			'message_attachment'	=> array('BOOL', 0),			'bbcode_bitfield'		=> array('VCHAR:255', ''),			'bbcode_uid'			=> array('VCHAR:8', ''),			'message_edit_time'		=> array('TIMESTAMP', 0),			'message_edit_count'	=> array('USINT', 0),			'to_address'			=> array('TEXT_UNI', ''),			'bcc_address'			=> array('TEXT_UNI', ''),			'message_reported'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'msg_id',		'KEYS'			=> array(			'author_ip'				=> array('INDEX', 'author_ip'),			'message_time'			=> array('INDEX', 'message_time'),			'author_id'				=> array('INDEX', 'author_id'),			'root_level'			=> array('INDEX', 'root_level'),		),	);	$schema_data['phpbb_privmsgs_folder'] = array(		'COLUMNS'		=> array(			'folder_id'				=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'folder_name'			=> array('VCHAR_UNI', ''),			'pm_count'				=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'folder_id',		'KEYS'			=> array(			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_privmsgs_rules'] = array(		'COLUMNS'		=> array(			'rule_id'				=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'rule_check'			=> array('UINT', 0),			'rule_connection'		=> array('UINT', 0),			'rule_string'			=> array('VCHAR_UNI', ''),			'rule_user_id'			=> array('UINT', 0),			'rule_group_id'			=> array('UINT', 0),			'rule_action'			=> array('UINT', 0),			'rule_folder_id'		=> array('INT:11', 0),		),		'PRIMARY_KEY'	=> 'rule_id',		'KEYS'			=> array(			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_privmsgs_to'] = array(		'COLUMNS'		=> array(			'msg_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'author_id'				=> array('UINT', 0),			'pm_deleted'			=> array('BOOL', 0),			'pm_new'				=> array('BOOL', 1),			'pm_unread'				=> array('BOOL', 1),			'pm_replied'			=> array('BOOL', 0),			'pm_marked'				=> array('BOOL', 0),			'pm_forwarded'			=> array('BOOL', 0),			'folder_id'				=> array('INT:11', 0),		),		'KEYS'			=> array(			'msg_id'				=> array('INDEX', 'msg_id'),			'author_id'				=> array('INDEX', 'author_id'),			'usr_flder_id'			=> array('INDEX', array('user_id', 'folder_id')),		),	);	$schema_data['phpbb_profile_fields'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', NULL, 'auto_increment'),			'field_name'			=> array('VCHAR_UNI', ''),			'field_type'			=> array('TINT:4', 0),			'field_ident'			=> array('VCHAR:20', ''),			'field_length'			=> array('VCHAR:20', ''),			'field_minlen'			=> array('VCHAR', ''),			'field_maxlen'			=> array('VCHAR', ''),			'field_novalue'			=> array('VCHAR_UNI', ''),			'field_default_value'	=> array('VCHAR_UNI', ''),			'field_validation'		=> array('VCHAR_UNI:20', ''),			'field_required'		=> array('BOOL', 0),			'field_show_on_reg'		=> array('BOOL', 0),			'field_show_on_vt'		=> array('BOOL', 0),			'field_show_profile'	=> array('BOOL', 0),			'field_hide'			=> array('BOOL', 0),			'field_no_view'			=> array('BOOL', 0),			'field_active'			=> array('BOOL', 0),			'field_order'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'field_id',		'KEYS'			=> array(			'fld_type'			=> array('INDEX', 'field_type'),			'fld_ordr'			=> array('INDEX', 'field_order'),		),	);	$schema_data['phpbb_profile_fields_data'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'user_id',	);	$schema_data['phpbb_profile_fields_lang'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', 0),			'lang_id'				=> array('UINT', 0),			'option_id'				=> array('UINT', 0),			'field_type'			=> array('TINT:4', 0),			'lang_value'			=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> array('field_id', 'lang_id', 'option_id'),	);	$schema_data['phpbb_profile_lang'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', 0),			'lang_id'				=> array('UINT', 0),			'lang_name'				=> array('VCHAR_UNI', ''),			'lang_explain'			=> array('TEXT_UNI', ''),			'lang_default_value'	=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> array('field_id', 'lang_id'),	);	$schema_data['phpbb_ranks'] = array(		'COLUMNS'		=> array(			'rank_id'				=> array('UINT', NULL, 'auto_increment'),			'rank_title'			=> array('VCHAR_UNI', ''),			'rank_min'				=> array('UINT', 0),			'rank_special'			=> array('BOOL', 0),			'rank_image'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'rank_id',	);	$schema_data['phpbb_reports'] = array(		'COLUMNS'		=> array(			'report_id'				=> array('UINT', NULL, 'auto_increment'),			'reason_id'				=> array('USINT', 0),			'post_id'				=> array('UINT', 0),			'pm_id'					=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'user_notify'			=> array('BOOL', 0),			'report_closed'			=> array('BOOL', 0),			'report_time'			=> array('TIMESTAMP', 0),			'report_text'			=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'report_id',		'KEYS'			=> array(			'post_id'			=> array('INDEX', 'post_id'),			'pm_id'				=> array('INDEX', 'pm_id'),		),	);	$schema_data['phpbb_reports_reasons'] = array(		'COLUMNS'		=> array(			'reason_id'				=> array('USINT', NULL, 'auto_increment'),			'reason_title'			=> array('VCHAR_UNI', ''),			'reason_description'	=> array('MTEXT_UNI', ''),			'reason_order'			=> array('USINT', 0),		),		'PRIMARY_KEY'	=> 'reason_id',	);	$schema_data['phpbb_search_results'] = array(		'COLUMNS'		=> array(			'search_key'			=> array('VCHAR:32', ''),			'search_time'			=> array('TIMESTAMP', 0),			'search_keywords'		=> array('MTEXT_UNI', ''),			'search_authors'		=> array('MTEXT', ''),		),		'PRIMARY_KEY'	=> 'search_key',	);	$schema_data['phpbb_search_wordlist'] = array(		'COLUMNS'		=> array(			'word_id'			=> array('UINT', NULL, 'auto_increment'),			'word_text'			=> array('VCHAR_UNI', ''),			'word_common'		=> array('BOOL', 0),			'word_count'		=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'word_id',		'KEYS'			=> array(			'wrd_txt'			=> array('UNIQUE', 'word_text'),			'wrd_cnt'			=> array('INDEX', 'word_count'),		),	);	$schema_data['phpbb_search_wordmatch'] = array(		'COLUMNS'		=> array(			'post_id'			=> array('UINT', 0),			'word_id'			=> array('UINT', 0),			'title_match'		=> array('BOOL', 0),		),		'KEYS'			=> array(			'unq_mtch'			=> array('UNIQUE', array('word_id', 'post_id', 'title_match')),			'word_id'			=> array('INDEX', 'word_id'),			'post_id'			=> array('INDEX', 'post_id'),		),	);	$schema_data['phpbb_sessions'] = array(		'COLUMNS'		=> array(			'session_id'			=> array('CHAR:32', ''),			'session_user_id'		=> array('UINT', 0),			'session_forum_id'		=> array('UINT', 0),			'session_last_visit'	=> array('TIMESTAMP', 0),			'session_start'			=> array('TIMESTAMP', 0),			'session_time'			=> array('TIMESTAMP', 0),			'session_ip'			=> array('VCHAR:40', ''),			'session_browser'		=> array('VCHAR:150', ''),			'session_forwarded_for'	=> array('VCHAR:255', ''),			'session_page'			=> array('VCHAR_UNI', ''),			'session_viewonline'	=> array('BOOL', 1),			'session_autologin'		=> array('BOOL', 0),			'session_admin'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'session_id',		'KEYS'			=> array(			'session_time'		=> array('INDEX', 'session_time'),			'session_user_id'	=> array('INDEX', 'session_user_id'),			'session_fid'		=> array('INDEX', 'session_forum_id'),		),	);	$schema_data['phpbb_sessions_keys'] = array(		'COLUMNS'		=> array(			'key_id'			=> array('CHAR:32', ''),			'user_id'			=> array('UINT', 0),			'last_ip'			=> array('VCHAR:40', ''),			'last_login'		=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('key_id', 'user_id'),		'KEYS'			=> array(			'last_login'		=> array('INDEX', 'last_login'),		),	);	$schema_data['phpbb_sitelist'] = array(		'COLUMNS'		=> array(			'site_id'		=> array('UINT', NULL, 'auto_increment'),			'site_ip'		=> array('VCHAR:40', ''),			'site_hostname'	=> array('VCHAR', ''),			'ip_exclude'	=> array('BOOL', 0),		),		'PRIMARY_KEY'		=> 'site_id',	);	$schema_data['phpbb_smilies'] = array(		'COLUMNS'		=> array(			'smiley_id'			=> array('UINT', NULL, 'auto_increment'),			// We may want to set 'code' to VCHAR:50 or check if unicode support is possible... at the moment only ASCII characters are allowed.			'code'				=> array('VCHAR_UNI:50', ''),			'emotion'			=> array('VCHAR_UNI:50', ''),			'smiley_url'		=> array('VCHAR:50', ''),			'smiley_width'		=> array('USINT', 0),			'smiley_height'		=> array('USINT', 0),			'smiley_order'		=> array('UINT', 0),			'display_on_posting'=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'smiley_id',		'KEYS'			=> array(			'display_on_post'		=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_styles'] = array(		'COLUMNS'		=> array(			'style_id'				=> array('UINT', NULL, 'auto_increment'),			'style_name'			=> array('VCHAR_UNI:255', ''),			'style_copyright'		=> array('VCHAR_UNI', ''),			'style_active'			=> array('BOOL', 1),			'template_id'			=> array('UINT', 0),			'theme_id'				=> array('UINT', 0),			'imageset_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'style_id',		'KEYS'			=> array(			'style_name'		=> array('UNIQUE', 'style_name'),			'template_id'		=> array('INDEX', 'template_id'),			'theme_id'			=> array('INDEX', 'theme_id'),			'imageset_id'		=> array('INDEX', 'imageset_id'),		),	);	$schema_data['phpbb_styles_template'] = array(		'COLUMNS'		=> array(			'template_id'			=> array('UINT', NULL, 'auto_increment'),			'template_name'			=> array('VCHAR_UNI:255', ''),			'template_copyright'	=> array('VCHAR_UNI', ''),			'template_path'			=> array('VCHAR:100', ''),			'bbcode_bitfield'		=> array('VCHAR:255', 'kNg='),			'template_storedb'		=> array('BOOL', 0),			'template_inherits_id'		=> array('UINT:4', 0),			'template_inherit_path'		=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'template_id',		'KEYS'			=> array(			'tmplte_nm'				=> array('UNIQUE', 'template_name'),		),	);	$schema_data['phpbb_styles_template_data'] = array(		'COLUMNS'		=> array(			'template_id'			=> array('UINT', 0),			'template_filename'		=> array('VCHAR:100', ''),			'template_included'		=> array('TEXT', ''),			'template_mtime'		=> array('TIMESTAMP', 0),			'template_data'			=> array('MTEXT_UNI', ''),		),		'KEYS'			=> array(			'tid'					=> array('INDEX', 'template_id'),			'tfn'					=> array('INDEX', 'template_filename'),		),	);	$schema_data['phpbb_styles_theme'] = array(		'COLUMNS'		=> array(			'theme_id'				=> array('UINT', NULL, 'auto_increment'),			'theme_name'			=> array('VCHAR_UNI:255', ''),			'theme_copyright'		=> array('VCHAR_UNI', ''),			'theme_path'			=> array('VCHAR:100', ''),			'theme_storedb'			=> array('BOOL', 0),			'theme_mtime'			=> array('TIMESTAMP', 0),			'theme_data'			=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'theme_id',		'KEYS'			=> array(			'theme_name'		=> array('UNIQUE', 'theme_name'),		),	);	$schema_data['phpbb_styles_imageset'] = array(		'COLUMNS'		=> array(			'imageset_id'				=> array('UINT', NULL, 'auto_increment'),			'imageset_name'				=> array('VCHAR_UNI:255', ''),			'imageset_copyright'		=> array('VCHAR_UNI', ''),			'imageset_path'				=> array('VCHAR:100', ''),		),		'PRIMARY_KEY'		=> 'imageset_id',		'KEYS'				=> array(			'imgset_nm'			=> array('UNIQUE', 'imageset_name'),		),	);	$schema_data['phpbb_styles_imageset_data'] = array(		'COLUMNS'		=> array(			'image_id'				=> array('UINT', NULL, 'auto_increment'),			'image_name'			=> array('VCHAR:200', ''),			'image_filename'		=> array('VCHAR:200', ''),			'image_lang'			=> array('VCHAR:30', ''),			'image_height'			=> array('USINT', 0),			'image_width'			=> array('USINT', 0),			'imageset_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'		=> 'image_id',		'KEYS'				=> array(			'i_d'			=> array('INDEX', 'imageset_id'),		),	);	$schema_data['phpbb_topics'] = array(		'COLUMNS'		=> array(			'topic_id'					=> array('UINT', NULL, 'auto_increment'),			'forum_id'					=> array('UINT', 0),			'icon_id'					=> array('UINT', 0),			'topic_attachment'			=> array('BOOL', 0),			'topic_approved'			=> array('BOOL', 1),			'topic_reported'			=> array('BOOL', 0),			'topic_title'				=> array('STEXT_UNI', '', 'true_sort'),			'topic_poster'				=> array('UINT', 0),			'topic_time'				=> array('TIMESTAMP', 0),			'topic_time_limit'			=> array('TIMESTAMP', 0),			'topic_views'				=> array('UINT', 0),			'topic_replies'				=> array('UINT', 0),			'topic_replies_real'		=> array('UINT', 0),			'topic_status'				=> array('TINT:3', 0),			'topic_type'				=> array('TINT:3', 0),			'topic_first_post_id'		=> array('UINT', 0),			'topic_first_poster_name'	=> array('VCHAR_UNI', ''),			'topic_first_poster_colour'	=> array('VCHAR:6', ''),			'topic_last_post_id'		=> array('UINT', 0),			'topic_last_poster_id'		=> array('UINT', 0),			'topic_last_poster_name'	=> array('VCHAR_UNI', ''),			'topic_last_poster_colour'	=> array('VCHAR:6', ''),			'topic_last_post_subject'	=> array('STEXT_UNI', ''),			'topic_last_post_time'		=> array('TIMESTAMP', 0),			'topic_last_view_time'		=> array('TIMESTAMP', 0),			'topic_moved_id'			=> array('UINT', 0),			'topic_bumped'				=> array('BOOL', 0),			'topic_bumper'				=> array('UINT', 0),			'poll_title'				=> array('STEXT_UNI', ''),			'poll_start'				=> array('TIMESTAMP', 0),			'poll_length'				=> array('TIMESTAMP', 0),			'poll_max_options'			=> array('TINT:4', 1),			'poll_last_vote'			=> array('TIMESTAMP', 0),			'poll_vote_change'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'topic_id',		'KEYS'			=> array(			'forum_id'			=> array('INDEX', 'forum_id'),			'forum_id_type'		=> array('INDEX', array('forum_id', 'topic_type')),			'last_post_time'	=> array('INDEX', 'topic_last_post_time'),			'topic_approved'	=> array('INDEX', 'topic_approved'),			'forum_appr_last'	=> array('INDEX', array('forum_id', 'topic_approved', 'topic_last_post_id')),			'fid_time_moved'	=> array('INDEX', array('forum_id', 'topic_last_post_time', 'topic_moved_id')),		),	);	$schema_data['phpbb_topics_track'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'mark_time'			=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'topic_id'),		'KEYS'			=> array(			'topic_id'			=> array('INDEX', 'topic_id'),			'forum_id'			=> array('INDEX', 'forum_id'),		),	);	$schema_data['phpbb_topics_posted'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'topic_posted'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'topic_id'),	);	$schema_data['phpbb_topics_watch'] = array(		'COLUMNS'		=> array(			'topic_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),			'notify_status'		=> array('BOOL', 0),		),		'KEYS'			=> array(			'topic_id'			=> array('INDEX', 'topic_id'),			'user_id'			=> array('INDEX', 'user_id'),			'notify_stat'		=> array('INDEX', 'notify_status'),		),	);	$schema_data['phpbb_user_group'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),			'group_leader'		=> array('BOOL', 0),			'user_pending'		=> array('BOOL', 1),		),		'KEYS'			=> array(			'group_id'			=> array('INDEX', 'group_id'),			'user_id'			=> array('INDEX', 'user_id'),			'group_leader'		=> array('INDEX', 'group_leader'),		),	);	$schema_data['phpbb_users'] = array(		'COLUMNS'		=> array(			'user_id'					=> array('UINT', NULL, 'auto_increment'),			'user_type'					=> array('TINT:2', 0),			'group_id'					=> array('UINT', 3),			'user_permissions'			=> array('MTEXT', ''),			'user_perm_from'			=> array('UINT', 0),			'user_ip'					=> array('VCHAR:40', ''),			'user_regdate'				=> array('TIMESTAMP', 0),			'username'					=> array('VCHAR_CI', ''),			'username_clean'			=> array('VCHAR_CI', ''),			'user_password'				=> array('VCHAR_UNI:40', ''),			'user_passchg'				=> array('TIMESTAMP', 0),			'user_pass_convert'			=> array('BOOL', 0),			'user_email'				=> array('VCHAR_UNI:100', ''),			'user_email_hash'			=> array('BINT', 0),			'user_birthday'				=> array('VCHAR:10', ''),			'user_lastvisit'			=> array('TIMESTAMP', 0),			'user_lastmark'				=> array('TIMESTAMP', 0),			'user_lastpost_time'		=> array('TIMESTAMP', 0),			'user_lastpage'				=> array('VCHAR_UNI:200', ''),			'user_last_confirm_key'		=> array('VCHAR:10', ''),			'user_last_search'			=> array('TIMESTAMP', 0),			'user_warnings'				=> array('TINT:4', 0),			'user_last_warning'			=> array('TIMESTAMP', 0),			'user_login_attempts'		=> array('TINT:4', 0),			'user_inactive_reason'		=> array('TINT:2', 0),			'user_inactive_time'		=> array('TIMESTAMP', 0),			'user_posts'				=> array('UINT', 0),			'user_lang'					=> array('VCHAR:30', ''),			'user_timezone'				=> array('DECIMAL', 0),			'user_dst'					=> array('BOOL', 0),			'user_dateformat'			=> array('VCHAR_UNI:30', 'd M Y H:i'),			'user_style'				=> array('UINT', 0),			'user_rank'					=> array('UINT', 0),			'user_colour'				=> array('VCHAR:6', ''),			'user_new_privmsg'			=> array('INT:4', 0),			'user_unread_privmsg'		=> array('INT:4', 0),			'user_last_privmsg'			=> array('TIMESTAMP', 0),			'user_message_rules'		=> array('BOOL', 0),			'user_full_folder'			=> array('INT:11', -3),			'user_emailtime'			=> array('TIMESTAMP', 0),			'user_topic_show_days'		=> array('USINT', 0),			'user_topic_sortby_type'	=> array('VCHAR:1', 't'),			'user_topic_sortby_dir'		=> array('VCHAR:1', 'd'),			'user_post_show_days'		=> array('USINT', 0),			'user_post_sortby_type'		=> array('VCHAR:1', 't'),			'user_post_sortby_dir'		=> array('VCHAR:1', 'a'),			'user_notify'				=> array('BOOL', 0),			'user_notify_pm'			=> array('BOOL', 1),			'user_notify_type'			=> array('TINT:4', 0),			'user_allow_pm'				=> array('BOOL', 1),			'user_allow_viewonline'		=> array('BOOL', 1),			'user_allow_viewemail'		=> array('BOOL', 1),			'user_allow_massemail'		=> array('BOOL', 1),			'user_options'				=> array('UINT:11', 230271),			'user_avatar'				=> array('VCHAR', ''),			'user_avatar_type'			=> array('TINT:2', 0),			'user_avatar_width'			=> array('USINT', 0),			'user_avatar_height'		=> array('USINT', 0),			'user_sig'					=> array('MTEXT_UNI', ''),			'user_sig_bbcode_uid'		=> array('VCHAR:8', ''),			'user_sig_bbcode_bitfield'	=> array('VCHAR:255', ''),			'user_from'					=> array('VCHAR_UNI:100', ''),			'user_icq'					=> array('VCHAR:15', ''),			'user_aim'					=> array('VCHAR_UNI', ''),			'user_yim'					=> array('VCHAR_UNI', ''),			'user_msnm'					=> array('VCHAR_UNI', ''),			'user_jabber'				=> array('VCHAR_UNI', ''),			'user_website'				=> array('VCHAR_UNI:200', ''),			'user_occ'					=> array('TEXT_UNI', ''),			'user_interests'			=> array('TEXT_UNI', ''),			'user_actkey'				=> array('VCHAR:32', ''),			'user_newpasswd'			=> array('VCHAR_UNI:40', ''),			'user_form_salt'			=> array('VCHAR_UNI:32', ''),			'user_new'					=> array('BOOL', 1),			'user_reminded'				=> array('TINT:4', 0),			'user_reminded_time'		=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> 'user_id',		'KEYS'			=> array(			'user_birthday'				=> array('INDEX', 'user_birthday'),			'user_email_hash'			=> array('INDEX', 'user_email_hash'),			'user_type'					=> array('INDEX', 'user_type'),			'username_clean'			=> array('UNIQUE', 'username_clean'),		),	);	$schema_data['phpbb_warnings'] = array(		'COLUMNS'		=> array(			'warning_id'			=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'post_id'				=> array('UINT', 0),			'log_id'				=> array('UINT', 0),			'warning_time'			=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> 'warning_id',	);	$schema_data['phpbb_words'] = array(		'COLUMNS'		=> array(			'word_id'				=> array('UINT', NULL, 'auto_increment'),			'word'					=> array('VCHAR_UNI', ''),			'replacement'			=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> 'word_id',	);	$schema_data['phpbb_zebra'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),			'zebra_id'				=> array('UINT', 0),			'friend'				=> array('BOOL', 0),			'foe'					=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'zebra_id'),	);	return $schema_data;}/*** Data put into the header for various dbms*/function custom_data($dbms){	switch ($dbms)	{		case 'oracle':			return <<<EOF/*  This first section is optional, however its probably the best method  of running phpBB on Oracle. If you already have a tablespace and user created  for phpBB you can leave this section commented out!  The first set of statements create a phpBB tablespace and a phpBB user,  make sure you change the password of the phpBB user before you run this script!!*//*CREATE TABLESPACE "PHPBB"	LOGGING	DATAFILE 'E:\ORACLE\ORADATA\LOCAL\PHPBB.ora'	SIZE 10M	AUTOEXTEND ON NEXT 10M	MAXSIZE 100M;CREATE USER "PHPBB"	PROFILE "DEFAULT"	IDENTIFIED BY "phpbb_password"	DEFAULT TABLESPACE "PHPBB"	QUOTA UNLIMITED ON "PHPBB"	ACCOUNT UNLOCK;GRANT ANALYZE ANY TO "PHPBB";GRANT CREATE SEQUENCE TO "PHPBB";GRANT CREATE SESSION TO "PHPBB";GRANT CREATE TABLE TO "PHPBB";GRANT CREATE TRIGGER TO "PHPBB";GRANT CREATE VIEW TO "PHPBB";GRANT "CONNECT" TO "PHPBB";COMMIT;DISCONNECT;CONNECT phpbb/phpbb_password;*/EOF;		break;		case 'postgres':			return <<<EOF/*	Domain definition*/CREATE DOMAIN varchar_ci AS varchar(255) NOT NULL DEFAULT ''::character varying;/*	Operation Functions*/CREATE FUNCTION _varchar_ci_equal(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) = LOWER($2)' LANGUAGE SQL STRICT;CREATE FUNCTION _varchar_ci_not_equal(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) != LOWER($2)' LANGUAGE SQL STRICT;CREATE FUNCTION _varchar_ci_less_than(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) < LOWER($2)' LANGUAGE SQL STRICT;CREATE FUNCTION _varchar_ci_less_equal(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) <= LOWER($2)' LANGUAGE SQL STRICT;CREATE FUNCTION _varchar_ci_greater_than(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) > LOWER($2)' LANGUAGE SQL STRICT;CREATE FUNCTION _varchar_ci_greater_equals(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) >= LOWER($2)' LANGUAGE SQL STRICT;/*	Operators*/CREATE OPERATOR <(  PROCEDURE = _varchar_ci_less_than,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = >,  NEGATOR = >=,  RESTRICT = scalarltsel,  JOIN = scalarltjoinsel);CREATE OPERATOR <=(  PROCEDURE = _varchar_ci_less_equal,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = >=,  NEGATOR = >,  RESTRICT = scalarltsel,  JOIN = scalarltjoinsel);CREATE OPERATOR >(  PROCEDURE = _varchar_ci_greater_than,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = <,  NEGATOR = <=,  RESTRICT = scalargtsel,  JOIN = scalargtjoinsel);CREATE OPERATOR >=(  PROCEDURE = _varchar_ci_greater_equals,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = <=,  NEGATOR = <,  RESTRICT = scalargtsel,  JOIN = scalargtjoinsel);CREATE OPERATOR <>(  PROCEDURE = _varchar_ci_not_equal,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = <>,  NEGATOR = =,  RESTRICT = neqsel,  JOIN = neqjoinsel);CREATE OPERATOR =(  PROCEDURE = _varchar_ci_equal,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = =,  NEGATOR = <>,  RESTRICT = eqsel,  JOIN = eqjoinsel,  HASHES,  MERGES,  SORT1= <);EOF;		break;	}	return '';}echo 'done';
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** mcp_warn* Handling warning the users* @package mcp*/class mcp_warn{	var $p_master;	var $u_action;	function mcp_warn(&$p_master)	{		$this->p_master = &$p_master;	}	function main($id, $mode)	{		global $auth, $db, $user, $template;		global $config, $phpbb_root_path, $phpEx;		$action = request_var('action', array('' => ''));		if (is_array($action))		{			list($action, ) = each($action);		}		$this->page_title = 'MCP_WARN';		add_form_key('mcp_warn');		switch ($mode)		{			case 'front':				$this->mcp_warn_front_view();				$this->tpl_name = 'mcp_warn_front';			break;			case 'list':				$this->mcp_warn_list_view($action);				$this->tpl_name = 'mcp_warn_list';			break;			case 'warn_post':				$this->mcp_warn_post_view($action);				$this->tpl_name = 'mcp_warn_post';			break;			case 'warn_user':				$this->mcp_warn_user_view($action);				$this->tpl_name = 'mcp_warn_user';			break;		}	}	/**	* Generates the summary on the main page of the warning module	*/	function mcp_warn_front_view()	{		global $phpEx, $phpbb_root_path, $config;		global $template, $db, $user, $auth;		$template->assign_vars(array(			'U_FIND_USERNAME'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=mcp&amp;field=username&amp;select_single=true'),			'U_POST_ACTION'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=warn&amp;mode=warn_user'),		));		// Obtain a list of the 5 naughtiest users....		// These are the 5 users with the highest warning count		$highest = array();		$count = 0;		view_warned_users($highest, $count, 5);		foreach ($highest as $row)		{			$template->assign_block_vars('highest', array(				'U_NOTES'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $row['user_id']),				'USERNAME_FULL'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']),				'USERNAME'			=> $row['username'],				'USERNAME_COLOUR'	=> ($row['user_colour']) ? '#' . $row['user_colour'] : '',				'U_USER'			=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=viewprofile&amp;u=' . $row['user_id']),				'WARNING_TIME'	=> $user->format_date($row['user_last_warning']),				'WARNINGS'		=> $row['user_warnings'],			));		}		// And now the 5 most recent users to get in trouble		$sql = 'SELECT u.user_id, u.username, u.username_clean, u.user_colour, u.user_warnings, w.warning_time			FROM ' . USERS_TABLE . ' u, ' . WARNINGS_TABLE . ' w			WHERE u.user_id = w.user_id			ORDER BY w.warning_time DESC';		$result = $db->sql_query_limit($sql, 5);		while ($row = $db->sql_fetchrow($result))		{			$template->assign_block_vars('latest', array(				'U_NOTES'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $row['user_id']),				'USERNAME_FULL'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']),				'USERNAME'			=> $row['username'],				'USERNAME_COLOUR'	=> ($row['user_colour']) ? '#' . $row['user_colour'] : '',				'U_USER'			=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=viewprofile&amp;u=' . $row['user_id']),				'WARNING_TIME'	=> $user->format_date($row['warning_time']),				'WARNINGS'		=> $row['user_warnings'],			));		}		$db->sql_freeresult($result);	}	/**	* Lists all users with warnings	*/	function mcp_warn_list_view($action)	{		global $phpEx, $phpbb_root_path, $config;		global $template, $db, $user, $auth;		$user->add_lang('memberlist');		$start	= request_var('start', 0);		$st		= request_var('st', 0);		$sk		= request_var('sk', 'b');		$sd		= request_var('sd', 'd');		$limit_days = array(0 => $user->lang['ALL_ENTRIES'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);		$sort_by_text = array('a' => $user->lang['SORT_USERNAME'], 'b' => $user->lang['SORT_DATE'], 'c' => $user->lang['SORT_WARNINGS']);		$sort_by_sql = array('a' => 'username_clean', 'b' => 'user_last_warning', 'c' => 'user_warnings');		$s_limit_days = $s_sort_key = $s_sort_dir = $u_sort_param = '';		gen_sort_selects($limit_days, $sort_by_text, $st, $sk, $sd, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);		// Define where and sort sql for use in displaying logs		$sql_where = ($st) ? (time() - ($st * 86400)) : 0;		$sql_sort = $sort_by_sql[$sk] . ' ' . (($sd == 'd') ? 'DESC' : 'ASC');		$users = array();		$user_count = 0;		view_warned_users($users, $user_count, $config['topics_per_page'], $start, $sql_where, $sql_sort);		foreach ($users as $row)		{			$template->assign_block_vars('user', array(				'U_NOTES'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $row['user_id']),				'USERNAME_FULL'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']),				'USERNAME'			=> $row['username'],				'USERNAME_COLOUR'	=> ($row['user_colour']) ? '#' . $row['user_colour'] : '',				'U_USER'			=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=viewprofile&amp;u=' . $row['user_id']),				'WARNING_TIME'	=> $user->format_date($row['user_last_warning']),				'WARNINGS'		=> $row['user_warnings'],			));		}		$template->assign_vars(array(			'U_POST_ACTION'			=> $this->u_action,			'S_CLEAR_ALLOWED'		=> ($auth->acl_get('a_clearlogs')) ? true : false,			'S_SELECT_SORT_DIR'		=> $s_sort_dir,			'S_SELECT_SORT_KEY'		=> $s_sort_key,			'S_SELECT_SORT_DAYS'	=> $s_limit_days,			'PAGE_NUMBER'		=> on_page($user_count, $config['topics_per_page'], $start),			'PAGINATION'		=> generate_pagination(append_sid("{$phpbb_root_path}mcp.$phpEx", "i=warn&amp;mode=list&amp;st=$st&amp;sk=$sk&amp;sd=$sd"), $user_count, $config['topics_per_page'], $start),			'TOTAL_USERS'		=> ($user_count == 1) ? $user->lang['LIST_USER'] : sprintf($user->lang['LIST_USERS'], $user_count),		));	}	/**	* Handles warning the user when the warning is for a specific post	*/	function mcp_warn_post_view($action)	{		global $phpEx, $phpbb_root_path, $config;		global $template, $db, $user, $auth;		$post_id = request_var('p', 0);		$forum_id = request_var('f', 0);		$notify = (isset($_REQUEST['notify_user'])) ? true : false;		$warning = utf8_normalize_nfc(request_var('warning', '', true));		$sql = 'SELECT u.*, p.*			FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . " u			WHERE p.post_id = $post_id				AND u.user_id = p.poster_id";		$result = $db->sql_query($sql);		$user_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$user_row)		{			trigger_error('NO_POST');		}		// There is no point issuing a warning to ignored users (ie anonymous and bots)		if ($user_row['user_type'] == USER_IGNORE)		{			trigger_error('CANNOT_WARN_ANONYMOUS');		}		// Prevent someone from warning themselves		if ($user_row['user_id'] == $user->data['user_id'])		{			trigger_error('CANNOT_WARN_SELF');		}		// Check if there is already a warning for this post to prevent multiple		// warnings for the same offence		$sql = 'SELECT post_id			FROM ' . WARNINGS_TABLE . "			WHERE post_id = $post_id";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			trigger_error('ALREADY_WARNED');		}		$user_id = $user_row['user_id'];		if (strpos($this->u_action, "&amp;f=$forum_id&amp;p=$post_id") === false)		{			$this->p_master->adjust_url("&amp;f=$forum_id&amp;p=$post_id");			$this->u_action .= "&amp;f=$forum_id&amp;p=$post_id";		}		// Check if can send a notification		if ($config['allow_privmsg'])		{			$auth2 = new auth();			$auth2->acl($user_row);			$s_can_notify = ($auth2->acl_get('u_readpm')) ? true : false;			unset($auth2);		}		else		{			$s_can_notify = false;		}		// Prevent against clever people		if ($notify && !$s_can_notify)		{			$notify = false;		}		if ($warning && $action == 'add_warning')		{			if (check_form_key('mcp_warn'))			{				add_warning($user_row, $warning, $notify, $post_id);				$msg = $user->lang['USER_WARNING_ADDED'];			}			else			{				$msg = $user->lang['FORM_INVALID'];			}			$redirect = append_sid("{$phpbb_root_path}mcp.$phpEx", "i=notes&amp;mode=user_notes&amp;u=$user_id");			meta_refresh(2, $redirect);			trigger_error($msg . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $redirect . '">', '</a>'));		}		// OK, they didn't submit a warning so lets build the page for them to do so		// We want to make the message available here as a reminder		// Parse the message and subject		$message = censor_text($user_row['post_text']);		// Second parse bbcode here		if ($user_row['bbcode_bitfield'])		{			include_once($phpbb_root_path . 'includes/bbcode.' . $phpEx);			$bbcode = new bbcode($user_row['bbcode_bitfield']);			$bbcode->bbcode_second_pass($message, $user_row['bbcode_uid'], $user_row['bbcode_bitfield']);		}		$message = bbcode_nl2br($message);		$message = smiley_text($message);		// Generate the appropriate user information for the user we are looking at		if (!function_exists('get_user_avatar'))		{			include($phpbb_root_path . 'includes/functions_display.' . $phpEx);		}		$rank_title = $rank_img = '';		$avatar_img = get_user_avatar($user_row['user_avatar'], $user_row['user_avatar_type'], $user_row['user_avatar_width'], $user_row['user_avatar_height']);		$template->assign_vars(array(			'U_POST_ACTION'		=> $this->u_action,			'POST'				=> $message,			'USERNAME'			=> $user_row['username'],			'USER_COLOR'		=> (!empty($user_row['user_colour'])) ? $user_row['user_colour'] : '',			'RANK_TITLE'		=> $rank_title,			'JOINED'			=> $user->format_date($user_row['user_regdate']),			'POSTS'				=> ($user_row['user_posts']) ? $user_row['user_posts'] : 0,			'WARNINGS'			=> ($user_row['user_warnings']) ? $user_row['user_warnings'] : 0,			'AVATAR_IMG'		=> $avatar_img,			'RANK_IMG'			=> $rank_img,			'L_WARNING_POST_DEFAULT'	=> sprintf($user->lang['WARNING_POST_DEFAULT'], generate_board_url() . "/viewtopic.$phpEx?f=$forum_id&amp;p=$post_id#p$post_id"),			'S_CAN_NOTIFY'		=> $s_can_notify,		));	}	/**	* Handles warning the user	*/	function mcp_warn_user_view($action)	{		global $phpEx, $phpbb_root_path, $config, $module;		global $template, $db, $user, $auth;		$user_id = request_var('u', 0);		$username = request_var('username', '', true);		$notify = (isset($_REQUEST['notify_user'])) ? true : false;		$warning = utf8_normalize_nfc(request_var('warning', '', true));		$sql_where = ($user_id) ? "user_id = $user_id" : "username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";		$sql = 'SELECT *			FROM ' . USERS_TABLE . '			WHERE ' . $sql_where;		$result = $db->sql_query($sql);		$user_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$user_row)		{			trigger_error('NO_USER');		}		// Prevent someone from warning themselves		if ($user_row['user_id'] == $user->data['user_id'])		{			trigger_error('CANNOT_WARN_SELF');		}		$user_id = $user_row['user_id'];		if (strpos($this->u_action, "&amp;u=$user_id") === false)		{			$this->p_master->adjust_url('&amp;u=' . $user_id);			$this->u_action .= "&amp;u=$user_id";		}		// Check if can send a notification		if ($config['allow_privmsg'])		{			$auth2 = new auth();			$auth2->acl($user_row);			$s_can_notify = ($auth2->acl_get('u_readpm')) ? true : false;			unset($auth2);		}		else		{			$s_can_notify = false;		}		// Prevent against clever people		if ($notify && !$s_can_notify)		{			$notify = false;		}		if ($warning && $action == 'add_warning')		{			if (check_form_key('mcp_warn'))			{				add_warning($user_row, $warning, $notify);				$msg = $user->lang['USER_WARNING_ADDED'];			}			else			{				$msg = $user->lang['FORM_INVALID'];			}			$redirect = append_sid("{$phpbb_root_path}mcp.$phpEx", "i=notes&amp;mode=user_notes&amp;u=$user_id");			meta_refresh(2, $redirect);			trigger_error($msg . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $redirect . '">', '</a>'));		}		// Generate the appropriate user information for the user we are looking at		if (!function_exists('get_user_avatar'))		{			include($phpbb_root_path . 'includes/functions_display.' . $phpEx);		}		$rank_title = $rank_img = '';		$avatar_img = get_user_avatar($user_row['user_avatar'], $user_row['user_avatar_type'], $user_row['user_avatar_width'], $user_row['user_avatar_height']);		// OK, they didn't submit a warning so lets build the page for them to do so		$template->assign_vars(array(			'U_POST_ACTION'		=> $this->u_action,			'RANK_TITLE'		=> $rank_title,			'JOINED'			=> $user->format_date($user_row['user_regdate']),			'POSTS'				=> ($user_row['user_posts']) ? $user_row['user_posts'] : 0,			'WARNINGS'			=> ($user_row['user_warnings']) ? $user_row['user_warnings'] : 0,			'USERNAME_FULL'		=> get_username_string('full', $user_row['user_id'], $user_row['username'], $user_row['user_colour']),			'USERNAME_COLOUR'	=> get_username_string('colour', $user_row['user_id'], $user_row['username'], $user_row['user_colour']),			'USERNAME'			=> get_username_string('username', $user_row['user_id'], $user_row['username'], $user_row['user_colour']),			'U_PROFILE'			=> get_username_string('profile', $user_row['user_id'], $user_row['username'], $user_row['user_colour']),			'AVATAR_IMG'		=> $avatar_img,			'RANK_IMG'			=> $rank_img,			'S_CAN_NOTIFY'		=> $s_can_notify,		));		return $user_id;	}}/*** Insert the warning into the database*/function add_warning($user_row, $warning, $send_pm = true, $post_id = 0){	global $phpEx, $phpbb_root_path, $config;	global $template, $db, $user, $auth;	if ($send_pm)	{		include_once($phpbb_root_path . 'includes/functions_privmsgs.' . $phpEx);		include_once($phpbb_root_path . 'includes/message_parser.' . $phpEx);		$user_row['user_lang'] = (file_exists($phpbb_root_path . 'language/' . $user_row['user_lang'] . "/mcp.$phpEx")) ? $user_row['user_lang'] : $config['default_lang'];		include($phpbb_root_path . 'language/' . basename($user_row['user_lang']) . "/mcp.$phpEx");		$message_parser = new parse_message();		$message_parser->message = sprintf($lang['WARNING_PM_BODY'], $warning);		$message_parser->parse(true, true, true, false, false, true, true);		$pm_data = array(			'from_user_id'			=> $user->data['user_id'],			'from_user_ip'			=> $user->ip,			'from_username'			=> $user->data['username'],			'enable_sig'			=> false,			'enable_bbcode'			=> true,			'enable_smilies'		=> true,			'enable_urls'			=> false,			'icon_id'				=> 0,			'bbcode_bitfield'		=> $message_parser->bbcode_bitfield,			'bbcode_uid'			=> $message_parser->bbcode_uid,			'message'				=> $message_parser->message,			'address_list'			=> array('u' => array($user_row['user_id'] => 'to')),		);		submit_pm('post', $lang['WARNING_PM_SUBJECT'], $pm_data, false);	}	add_log('admin', 'LOG_USER_WARNING', $user_row['username']);	$log_id = add_log('user', $user_row['user_id'], 'LOG_USER_WARNING_BODY', $warning);	$sql_ary = array(		'user_id'		=> $user_row['user_id'],		'post_id'		=> $post_id,		'log_id'		=> $log_id,		'warning_time'	=> time(),	);	$db->sql_query('INSERT INTO ' . WARNINGS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));	$sql = 'UPDATE ' . USERS_TABLE . '		SET user_warnings = user_warnings + 1,			user_last_warning = ' . time() . '		WHERE user_id = ' . $user_row['user_id'];	$db->sql_query($sql);	// We add this to the mod log too for moderators to see that a specific user got warned.	$sql = 'SELECT forum_id, topic_id		FROM ' . POSTS_TABLE . '		WHERE post_id = ' . $post_id;	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	add_log('mod', $row['forum_id'], $row['topic_id'], 'LOG_USER_WARNING', $user_row['username']);}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);include($phpbb_root_path . 'includes/functions_display.' . $phpEx);// Start session$user->session_begin();$auth->acl($user->data);// Start initial var setup$forum_id	= request_var('f', 0);$mark_read	= request_var('mark', '');$start		= request_var('start', 0);$default_sort_days	= (!empty($user->data['user_topic_show_days'])) ? $user->data['user_topic_show_days'] : 0;$default_sort_key	= (!empty($user->data['user_topic_sortby_type'])) ? $user->data['user_topic_sortby_type'] : 't';$default_sort_dir	= (!empty($user->data['user_topic_sortby_dir'])) ? $user->data['user_topic_sortby_dir'] : 'd';$sort_days	= request_var('st', $default_sort_days);$sort_key	= request_var('sk', $default_sort_key);$sort_dir	= request_var('sd', $default_sort_dir);// Check if the user has actually sent a forum ID with his/her request// If not give them a nice error page.if (!$forum_id){	trigger_error('NO_FORUM');}$sql_from = FORUMS_TABLE . ' f';$lastread_select = '';// Grab appropriate forum dataif ($config['load_db_lastread'] && $user->data['is_registered']){	$sql_from .= ' LEFT JOIN ' . FORUMS_TRACK_TABLE . ' ft ON (ft.user_id = ' . $user->data['user_id'] . '		AND ft.forum_id = f.forum_id)';	$lastread_select .= ', ft.mark_time';}if ($user->data['is_registered']){	$sql_from .= ' LEFT JOIN ' . FORUMS_WATCH_TABLE . ' fw ON (fw.forum_id = f.forum_id AND fw.user_id = ' . $user->data['user_id'] . ')';	$lastread_select .= ', fw.notify_status';}$sql = "SELECT f.* $lastread_select	FROM $sql_from	WHERE f.forum_id = $forum_id";$result = $db->sql_query($sql);$forum_data = $db->sql_fetchrow($result);$db->sql_freeresult($result);if (!$forum_data){	trigger_error('NO_FORUM');}// Configure style, language, etc.$user->setup('viewforum', $forum_data['forum_style']);// Redirect to login upon emailed notification linksif (isset($_GET['e']) && !$user->data['is_registered']){	login_box('', $user->lang['LOGIN_NOTIFY_FORUM']);}// Permissions checkif (!$auth->acl_gets('f_list', 'f_read', $forum_id) || ($forum_data['forum_type'] == FORUM_LINK && $forum_data['forum_link'] && !$auth->acl_get('f_read', $forum_id))){	if ($user->data['user_id'] != ANONYMOUS)	{		trigger_error('SORRY_AUTH_READ');	}	login_box('', $user->lang['LOGIN_VIEWFORUM']);}// Forum is passworded ... check whether access has been granted to this// user this session, if not show login boxif ($forum_data['forum_password']){	login_forum_box($forum_data);}// Is this forum a link? ... User got here either because the// number of clicks is being tracked or they guessed the idif ($forum_data['forum_type'] == FORUM_LINK && $forum_data['forum_link']){	// Does it have click tracking enabled?	if ($forum_data['forum_flags'] & FORUM_FLAG_LINK_TRACK)	{		$sql = 'UPDATE ' . FORUMS_TABLE . '			SET forum_posts = forum_posts + 1			WHERE forum_id = ' . $forum_id;		$db->sql_query($sql);	}	// We redirect to the url. The third parameter indicates that external redirects are allowed.	redirect($forum_data['forum_link'], false, true);	return;}// Build navigation linksgenerate_forum_nav($forum_data);// Forum Rulesif ($auth->acl_get('f_read', $forum_id)){	generate_forum_rules($forum_data);}// Do we have subforums?$active_forum_ary = $moderators = array();if ($forum_data['left_id'] != $forum_data['right_id'] - 1){	list($active_forum_ary, $moderators) = display_forums($forum_data, $config['load_moderators'], $config['load_moderators']);}else{	$template->assign_var('S_HAS_SUBFORUM', false);	if ($config['load_moderators'])	{		get_moderators($moderators, $forum_id);	}}// Dump out the page header and load viewforum templatepage_header($user->lang['VIEW_FORUM'] . ' - ' . $forum_data['forum_name'], true, $forum_id);$template->set_filenames(array(	'body' => 'viewforum_body.html'));make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"), $forum_id);$template->assign_vars(array(	'U_VIEW_FORUM'			=> append_sid("{$phpbb_root_path}viewforum.$phpEx", "f=$forum_id" . (($start == 0) ? '' : "&amp;start=$start")),));// Not postable forum or showing active topics?if (!($forum_data['forum_type'] == FORUM_POST || (($forum_data['forum_flags'] & FORUM_FLAG_ACTIVE_TOPICS) && $forum_data['forum_type'] == FORUM_CAT))){	page_footer();}// Ok, if someone has only list-access, we only display the forum list.// We also make this circumstance available to the template in case we want to display a notice. ;)if (!$auth->acl_get('f_read', $forum_id)){	$template->assign_vars(array(		'S_NO_READ_ACCESS'		=> true,	));	page_footer();}// Handle marking postsif ($mark_read == 'topics'){	$token = request_var('hash', '');	if (check_link_hash($token, 'global'))	{		// Add 0 to forums array to mark global announcements correctly		markread('topics', array($forum_id, 0));	}	$redirect_url = append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id);	meta_refresh(3, $redirect_url);	trigger_error($user->lang['TOPICS_MARKED'] . '<br /><br />' . sprintf($user->lang['RETURN_FORUM'], '<a href="' . $redirect_url . '">', '</a>'));}// Is a forum specific topic count required?if ($forum_data['forum_topics_per_page']){	$config['topics_per_page'] = $forum_data['forum_topics_per_page'];}// Do the forum Prune thang - cron type job ...if ($forum_data['prune_next'] < time() && $forum_data['enable_prune']){	$template->assign_var('RUN_CRON_TASK', '<img src="' . append_sid($phpbb_root_path . 'cron.' . $phpEx, 'cron_type=prune_forum&amp;f=' . $forum_id) . '" alt="cron" width="1" height="1" />');}// Forum rules and subscription info$s_watching_forum = array(	'link'			=> '',	'title'			=> '',	'is_watching'	=> false,);if (($config['email_enable'] || $config['jab_enable']) && $config['allow_forum_notify'] && $forum_data['forum_type'] == FORUM_POST && ($auth->acl_get('f_subscribe', $forum_id) || $user->data['user_id'] == ANONYMOUS)){	$notify_status = (isset($forum_data['notify_status'])) ? $forum_data['notify_status'] : NULL;	watch_topic_forum('forum', $s_watching_forum, $user->data['user_id'], $forum_id, 0, $notify_status, $start, $forum_data['forum_name']);}$s_forum_rules = '';gen_forum_auth_level('forum', $forum_id, $forum_data['forum_status']);// Topic ordering options$limit_days = array(0 => $user->lang['ALL_TOPICS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);$sort_by_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 'r' => $user->lang['REPLIES'], 's' => $user->lang['SUBJECT'], 'v' => $user->lang['VIEWS']);$sort_by_sql = array('a' => 't.topic_first_poster_name', 't' => 't.topic_last_post_time', 'r' => 't.topic_replies', 's' => 't.topic_title', 'v' => 't.topic_views');$s_limit_days = $s_sort_key = $s_sort_dir = $u_sort_param = '';gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param, $default_sort_days, $default_sort_key, $default_sort_dir);// Limit topics to certain time frame, obtain correct topic count// global announcements must not be counted, normal announcements have to// be counted, as forum_topics(_real) includes themif ($sort_days){	$min_post_time = time() - ($sort_days * 86400);	$sql = 'SELECT COUNT(topic_id) AS num_topics		FROM ' . TOPICS_TABLE . "		WHERE forum_id = $forum_id			AND ((topic_type <> " . POST_GLOBAL . " AND topic_last_post_time >= $min_post_time)				OR topic_type = " . POST_ANNOUNCE . ")		" . (($auth->acl_get('m_approve', $forum_id)) ? '' : 'AND topic_approved = 1');	$result = $db->sql_query($sql);	$topics_count = (int) $db->sql_fetchfield('num_topics');	$db->sql_freeresult($result);	if (isset($_POST['sort']))	{		$start = 0;	}	$sql_limit_time = "AND t.topic_last_post_time >= $min_post_time";	// Make sure we have information about day selection ready	$template->assign_var('S_SORT_DAYS', true);}else{	$topics_count = ($auth->acl_get('m_approve', $forum_id)) ? $forum_data['forum_topics_real'] : $forum_data['forum_topics'];	$sql_limit_time = '';}// Make sure $start is set to the last page if it exceeds the amountif ($start < 0 || $start > $topics_count){	$start = ($start < 0) ? 0 : floor(($topics_count - 1) / $config['topics_per_page']) * $config['topics_per_page'];}// Basic pagewide vars$post_alt = ($forum_data['forum_status'] == ITEM_LOCKED) ? $user->lang['FORUM_LOCKED'] : $user->lang['POST_NEW_TOPIC'];// Display active topics?$s_display_active = ($forum_data['forum_type'] == FORUM_CAT && ($forum_data['forum_flags'] & FORUM_FLAG_ACTIVE_TOPICS)) ? true : false;$s_search_hidden_fields = array('fid' => array($forum_id));if ($_SID){	$s_search_hidden_fields['sid'] = $_SID;}if (!empty($_EXTRA_URL)){	foreach ($_EXTRA_URL as $url_param)	{		$url_param = explode('=', $url_param, 2);		$s_hidden_fields[$url_param[0]] = $url_param[1];	}}$template->assign_vars(array(	'MODERATORS'	=> (!empty($moderators[$forum_id])) ? implode(', ', $moderators[$forum_id]) : '',	'POST_IMG'					=> ($forum_data['forum_status'] == ITEM_LOCKED) ? $user->img('button_topic_locked', $post_alt) : $user->img('button_topic_new', $post_alt),	'NEWEST_POST_IMG'			=> $user->img('icon_topic_newest', 'VIEW_NEWEST_POST'),	'LAST_POST_IMG'				=> $user->img('icon_topic_latest', 'VIEW_LATEST_POST'),	'FOLDER_IMG'				=> $user->img('topic_read', 'NO_UNREAD_POSTS'),	'FOLDER_UNREAD_IMG'			=> $user->img('topic_unread', 'UNREAD_POSTS'),	'FOLDER_HOT_IMG'			=> $user->img('topic_read_hot', 'NO_UNREAD_POSTS_HOT'),	'FOLDER_HOT_UNREAD_IMG'		=> $user->img('topic_unread_hot', 'UNREAD_POSTS_HOT'),	'FOLDER_LOCKED_IMG'			=> $user->img('topic_read_locked', 'NO_UNREAD_POSTS_LOCKED'),	'FOLDER_LOCKED_UNREAD_IMG'	=> $user->img('topic_unread_locked', 'UNREAD_POSTS_LOCKED'),	'FOLDER_STICKY_IMG'			=> $user->img('sticky_read', 'POST_STICKY'),	'FOLDER_STICKY_UNREAD_IMG'	=> $user->img('sticky_unread', 'POST_STICKY'),	'FOLDER_ANNOUNCE_IMG'		=> $user->img('announce_read', 'POST_ANNOUNCEMENT'),	'FOLDER_ANNOUNCE_UNREAD_IMG'=> $user->img('announce_unread', 'POST_ANNOUNCEMENT'),	'FOLDER_MOVED_IMG'			=> $user->img('topic_moved', 'TOPIC_MOVED'),	'REPORTED_IMG'				=> $user->img('icon_topic_reported', 'TOPIC_REPORTED'),	'UNAPPROVED_IMG'			=> $user->img('icon_topic_unapproved', 'TOPIC_UNAPPROVED'),	'GOTO_PAGE_IMG'				=> $user->img('icon_post_target', 'GOTO_PAGE'),	'L_NO_TOPICS' 			=> ($forum_data['forum_status'] == ITEM_LOCKED) ? $user->lang['POST_FORUM_LOCKED'] : $user->lang['NO_TOPICS'],	'S_DISPLAY_POST_INFO'	=> ($forum_data['forum_type'] == FORUM_POST && ($auth->acl_get('f_post', $forum_id) || $user->data['user_id'] == ANONYMOUS)) ? true : false,	'S_IS_POSTABLE'			=> ($forum_data['forum_type'] == FORUM_POST) ? true : false,	'S_USER_CAN_POST'		=> ($auth->acl_get('f_post', $forum_id)) ? true : false,	'S_DISPLAY_ACTIVE'		=> $s_display_active,	'S_SELECT_SORT_DIR'		=> $s_sort_dir,	'S_SELECT_SORT_KEY'		=> $s_sort_key,	'S_SELECT_SORT_DAYS'	=> $s_limit_days,	'S_TOPIC_ICONS'			=> ($s_display_active && sizeof($active_forum_ary)) ? max($active_forum_ary['enable_icons']) : (($forum_data['enable_icons']) ? true : false),	'S_WATCH_FORUM_LINK'	=> $s_watching_forum['link'],	'S_WATCH_FORUM_TITLE'	=> $s_watching_forum['title'],	'S_WATCHING_FORUM'		=> $s_watching_forum['is_watching'],	'S_FORUM_ACTION'		=> append_sid("{$phpbb_root_path}viewforum.$phpEx", "f=$forum_id" . (($start == 0) ? '' : "&amp;start=$start")),	'S_DISPLAY_SEARCHBOX'	=> ($auth->acl_get('u_search') && $auth->acl_get('f_search', $forum_id) && $config['load_search']) ? true : false,	'S_SEARCHBOX_ACTION'	=> append_sid("{$phpbb_root_path}search.$phpEx"),	'S_SEARCH_LOCAL_HIDDEN_FIELDS'	=> build_hidden_fields($s_search_hidden_fields),	'S_SINGLE_MODERATOR'	=> (!empty($moderators[$forum_id]) && sizeof($moderators[$forum_id]) > 1) ? false : true,	'S_IS_LOCKED'			=> ($forum_data['forum_status'] == ITEM_LOCKED) ? true : false,	'S_VIEWFORUM'			=> true,	'U_MCP'				=> ($auth->acl_get('m_', $forum_id)) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "f=$forum_id&amp;i=main&amp;mode=forum_view", true, $user->session_id) : '',	'U_POST_NEW_TOPIC'	=> ($auth->acl_get('f_post', $forum_id) || $user->data['user_id'] == ANONYMOUS) ? append_sid("{$phpbb_root_path}posting.$phpEx", 'mode=post&amp;f=' . $forum_id) : '',	'U_VIEW_FORUM'		=> append_sid("{$phpbb_root_path}viewforum.$phpEx", "f=$forum_id" . ((strlen($u_sort_param)) ? "&amp;$u_sort_param" : '') . (($start == 0) ? '' : "&amp;start=$start")),	'U_MARK_TOPICS'		=> ($user->data['is_registered'] || $config['load_anon_lastread']) ? append_sid("{$phpbb_root_path}viewforum.$phpEx", 'hash=' . generate_link_hash('global') . "&amp;f=$forum_id&amp;mark=topics") : '',));// Grab icons$icons = $cache->obtain_icons();// Grab all topic data$rowset = $announcement_list = $topic_list = $global_announce_list = array();$sql_array = array(	'SELECT'	=> 't.*',	'FROM'		=> array(		TOPICS_TABLE		=> 't'	),	'LEFT_JOIN'	=> array(),);$sql_approved = ($auth->acl_get('m_approve', $forum_id)) ? '' : 'AND t.topic_approved = 1';if ($user->data['is_registered']){	if ($config['load_db_track'])	{		$sql_array['LEFT_JOIN'][] = array('FROM' => array(TOPICS_POSTED_TABLE => 'tp'), 'ON' => 'tp.topic_id = t.topic_id AND tp.user_id = ' . $user->data['user_id']);		$sql_array['SELECT'] .= ', tp.topic_posted';	}	if ($config['load_db_lastread'])	{		$sql_array['LEFT_JOIN'][] = array('FROM' => array(TOPICS_TRACK_TABLE => 'tt'), 'ON' => 'tt.topic_id = t.topic_id AND tt.user_id = ' . $user->data['user_id']);		$sql_array['SELECT'] .= ', tt.mark_time';		if ($s_display_active && sizeof($active_forum_ary))		{			$sql_array['LEFT_JOIN'][] = array('FROM' => array(FORUMS_TRACK_TABLE => 'ft'), 'ON' => 'ft.forum_id = t.forum_id AND ft.user_id = ' . $user->data['user_id']);			$sql_array['SELECT'] .= ', ft.mark_time AS forum_mark_time';		}	}}if ($forum_data['forum_type'] == FORUM_POST){	// Obtain announcements ... removed sort ordering, sort by time in all cases	$sql = $db->sql_build_query('SELECT', array(		'SELECT'	=> $sql_array['SELECT'],		'FROM'		=> $sql_array['FROM'],		'LEFT_JOIN'	=> $sql_array['LEFT_JOIN'],		'WHERE'		=> 't.forum_id IN (' . $forum_id . ', 0)			AND t.topic_type IN (' . POST_ANNOUNCE . ', ' . POST_GLOBAL . ')',		'ORDER_BY'	=> 't.topic_time DESC',	));	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		if (!$row['topic_approved'] && !$auth->acl_get('m_approve', $row['forum_id']))		{			// Do not display announcements that are waiting for approval.			continue;		}		$rowset[$row['topic_id']] = $row;		$announcement_list[] = $row['topic_id'];		if ($row['topic_type'] == POST_GLOBAL)		{			$global_announce_list[$row['topic_id']] = true;		}		else		{			$topics_count--;		}	}	$db->sql_freeresult($result);}// If the user is trying to reach late pages, start searching from the end$store_reverse = false;$sql_limit = $config['topics_per_page'];if ($start > $topics_count / 2){	$store_reverse = true;	if ($start + $config['topics_per_page'] > $topics_count)	{		$sql_limit = min($config['topics_per_page'], max(1, $topics_count - $start));	}	// Select the sort order	$sql_sort_order = $sort_by_sql[$sort_key] . ' ' . (($sort_dir == 'd') ? 'ASC' : 'DESC');	$sql_start = max(0, $topics_count - $sql_limit - $start);}else{	// Select the sort order	$sql_sort_order = $sort_by_sql[$sort_key] . ' ' . (($sort_dir == 'd') ? 'DESC' : 'ASC');	$sql_start = $start;}if ($forum_data['forum_type'] == FORUM_POST || !sizeof($active_forum_ary)){	$sql_where = 't.forum_id = ' . $forum_id;}else if (empty($active_forum_ary['exclude_forum_id'])){	$sql_where = $db->sql_in_set('t.forum_id', $active_forum_ary['forum_id']);}else{	$get_forum_ids = array_diff($active_forum_ary['forum_id'], $active_forum_ary['exclude_forum_id']);	$sql_where = (sizeof($get_forum_ids)) ? $db->sql_in_set('t.forum_id', $get_forum_ids) : 't.forum_id = ' . $forum_id;}// Grab just the sorted topic ids$sql = 'SELECT t.topic_id	FROM ' . TOPICS_TABLE . " t	WHERE $sql_where		AND t.topic_type IN (" . POST_NORMAL . ', ' . POST_STICKY . ")		$sql_approved		$sql_limit_time	ORDER BY t.topic_type " . ((!$store_reverse) ? 'DESC' : 'ASC') . ', ' . $sql_sort_order;$result = $db->sql_query_limit($sql, $sql_limit, $sql_start);while ($row = $db->sql_fetchrow($result)){	$topic_list[] = (int) $row['topic_id'];}$db->sql_freeresult($result);// For storing shadow topics$shadow_topic_list = array();if (sizeof($topic_list)){	// SQL array for obtaining topics/stickies	$sql_array = array(		'SELECT'		=> $sql_array['SELECT'],		'FROM'			=> $sql_array['FROM'],		'LEFT_JOIN'		=> $sql_array['LEFT_JOIN'],		'WHERE'			=> $db->sql_in_set('t.topic_id', $topic_list),	);	// If store_reverse, then first obtain topics, then stickies, else the other way around...	// Funnily enough you typically save one query if going from the last page to the middle (store_reverse) because	// the number of stickies are not known	$sql = $db->sql_build_query('SELECT', $sql_array);	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		if ($row['topic_status'] == ITEM_MOVED)		{			$shadow_topic_list[$row['topic_moved_id']] = $row['topic_id'];		}		$rowset[$row['topic_id']] = $row;	}	$db->sql_freeresult($result);}// If we have some shadow topics, update the rowset to reflect their topic informationif (sizeof($shadow_topic_list)){	$sql = 'SELECT *		FROM ' . TOPICS_TABLE . '		WHERE ' . $db->sql_in_set('topic_id', array_keys($shadow_topic_list));	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$orig_topic_id = $shadow_topic_list[$row['topic_id']];		// If the shadow topic is already listed within the rowset (happens for active topics for example), then do not include it...		if (isset($rowset[$row['topic_id']]))		{			// We need to remove any trace regarding this topic. :)			unset($rowset[$orig_topic_id]);			unset($topic_list[array_search($orig_topic_id, $topic_list)]);			$topics_count--;			continue;		}		// Do not include those topics the user has no permission to access		if (!$auth->acl_get('f_read', $row['forum_id']))		{			// We need to remove any trace regarding this topic. :)			unset($rowset[$orig_topic_id]);			unset($topic_list[array_search($orig_topic_id, $topic_list)]);			$topics_count--;			continue;		}		// We want to retain some values		$row = array_merge($row, array(			'topic_moved_id'	=> $rowset[$orig_topic_id]['topic_moved_id'],			'topic_status'		=> $rowset[$orig_topic_id]['topic_status'],			'topic_type'		=> $rowset[$orig_topic_id]['topic_type'],			'topic_title'		=> $rowset[$orig_topic_id]['topic_title'],		));		// Shadow topics are never reported		$row['topic_reported'] = 0;		$rowset[$orig_topic_id] = $row;	}	$db->sql_freeresult($result);}unset($shadow_topic_list);// Ok, adjust topics count for active topics listif ($s_display_active){	$topics_count = 1;}// We need to readd the local announcements to the forums total topic count, otherwise the number is different from the one on the forum list$total_topic_count = $topics_count + sizeof($announcement_list) - sizeof($global_announce_list);$template->assign_vars(array(	'PAGINATION'	=> generate_pagination(append_sid("{$phpbb_root_path}viewforum.$phpEx", "f=$forum_id" . ((strlen($u_sort_param)) ? "&amp;$u_sort_param" : '')), $topics_count, $config['topics_per_page'], $start),	'PAGE_NUMBER'	=> on_page($topics_count, $config['topics_per_page'], $start),	'TOTAL_TOPICS'	=> ($s_display_active) ? false : (($total_topic_count == 1) ? $user->lang['VIEW_FORUM_TOPIC'] : sprintf($user->lang['VIEW_FORUM_TOPICS'], $total_topic_count))));$topic_list = ($store_reverse) ? array_merge($announcement_list, array_reverse($topic_list)) : array_merge($announcement_list, $topic_list);$topic_tracking_info = $tracking_topics = array();// Okay, lets dump out the page ...if (sizeof($topic_list)){	$mark_forum_read = true;	$mark_time_forum = 0;	// Active topics?	if ($s_display_active && sizeof($active_forum_ary))	{		// Generate topic forum list...		$topic_forum_list = array();		foreach ($rowset as $t_id => $row)		{			$topic_forum_list[$row['forum_id']]['forum_mark_time'] = ($config['load_db_lastread'] && $user->data['is_registered'] && isset($row['forum_mark_time'])) ? $row['forum_mark_time'] : 0;			$topic_forum_list[$row['forum_id']]['topics'][] = $t_id;		}		if ($config['load_db_lastread'] && $user->data['is_registered'])		{			foreach ($topic_forum_list as $f_id => $topic_row)			{				$topic_tracking_info += get_topic_tracking($f_id, $topic_row['topics'], $rowset, array($f_id => $topic_row['forum_mark_time']), false);			}		}		else if ($config['load_anon_lastread'] || $user->data['is_registered'])		{			foreach ($topic_forum_list as $f_id => $topic_row)			{				$topic_tracking_info += get_complete_topic_tracking($f_id, $topic_row['topics'], false);			}		}		unset($topic_forum_list);	}	else	{		if ($config['load_db_lastread'] && $user->data['is_registered'])		{			$topic_tracking_info = get_topic_tracking($forum_id, $topic_list, $rowset, array($forum_id => $forum_data['mark_time']), $global_announce_list);			$mark_time_forum = (!empty($forum_data['mark_time'])) ? $forum_data['mark_time'] : $user->data['user_lastmark'];		}		else if ($config['load_anon_lastread'] || $user->data['is_registered'])		{			$topic_tracking_info = get_complete_topic_tracking($forum_id, $topic_list, $global_announce_list);			if (!$user->data['is_registered'])			{				$user->data['user_lastmark'] = (isset($tracking_topics['l'])) ? (int) (base_convert($tracking_topics['l'], 36, 10) + $config['board_startdate']) : 0;			}			$mark_time_forum = (isset($tracking_topics['f'][$forum_id])) ? (int) (base_convert($tracking_topics['f'][$forum_id], 36, 10) + $config['board_startdate']) : $user->data['user_lastmark'];		}	}	$s_type_switch = 0;	foreach ($topic_list as $topic_id)	{		$row = &$rowset[$topic_id];		$topic_forum_id = ($row['forum_id']) ? (int) $row['forum_id'] : $forum_id;		// This will allow the style designer to output a different header		// or even separate the list of announcements from sticky and normal topics		$s_type_switch_test = ($row['topic_type'] == POST_ANNOUNCE || $row['topic_type'] == POST_GLOBAL) ? 1 : 0;		// Replies		$replies = ($auth->acl_get('m_approve', $topic_forum_id)) ? $row['topic_replies_real'] : $row['topic_replies'];		if ($row['topic_status'] == ITEM_MOVED)		{			$topic_id = $row['topic_moved_id'];			$unread_topic = false;		}		else		{			$unread_topic = (isset($topic_tracking_info[$topic_id]) && $row['topic_last_post_time'] > $topic_tracking_info[$topic_id]) ? true : false;		}		// Get folder img, topic status/type related information		$folder_img = $folder_alt = $topic_type = '';		topic_status($row, $replies, $unread_topic, $folder_img, $folder_alt, $topic_type);		// Generate all the URIs ...		$view_topic_url_params = 'f=' . $topic_forum_id . '&amp;t=' . $topic_id;		$view_topic_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", $view_topic_url_params);		$topic_unapproved = (!$row['topic_approved'] && $auth->acl_get('m_approve', $topic_forum_id)) ? true : false;		$posts_unapproved = ($row['topic_approved'] && $row['topic_replies'] < $row['topic_replies_real'] && $auth->acl_get('m_approve', $topic_forum_id)) ? true : false;		$u_mcp_queue = ($topic_unapproved || $posts_unapproved) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue&amp;mode=' . (($topic_unapproved) ? 'approve_details' : 'unapproved_posts') . "&amp;t=$topic_id", true, $user->session_id) : '';		// Send vars to template		$template->assign_block_vars('topicrow', array(			'FORUM_ID'					=> $topic_forum_id,			'TOPIC_ID'					=> $topic_id,			'TOPIC_AUTHOR'				=> get_username_string('username', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'TOPIC_AUTHOR_COLOUR'		=> get_username_string('colour', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'TOPIC_AUTHOR_FULL'			=> get_username_string('full', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'FIRST_POST_TIME'			=> $user->format_date($row['topic_time']),			'LAST_POST_SUBJECT'			=> censor_text($row['topic_last_post_subject']),			'LAST_POST_TIME'			=> $user->format_date($row['topic_last_post_time']),			'LAST_VIEW_TIME'			=> $user->format_date($row['topic_last_view_time']),			'LAST_POST_AUTHOR'			=> get_username_string('username', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'LAST_POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'LAST_POST_AUTHOR_FULL'		=> get_username_string('full', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'PAGINATION'		=> topic_generate_pagination($replies, $view_topic_url),			'REPLIES'			=> $replies,			'VIEWS'				=> $row['topic_views'],			'TOPIC_TITLE'		=> censor_text($row['topic_title']),			'TOPIC_TYPE'		=> $topic_type,			'TOPIC_FOLDER_IMG'		=> $user->img($folder_img, $folder_alt),			'TOPIC_FOLDER_IMG_SRC'	=> $user->img($folder_img, $folder_alt, false, '', 'src'),			'TOPIC_FOLDER_IMG_ALT'	=> $user->lang[$folder_alt],			'TOPIC_FOLDER_IMG_WIDTH'=> $user->img($folder_img, '', false, '', 'width'),			'TOPIC_FOLDER_IMG_HEIGHT'	=> $user->img($folder_img, '', false, '', 'height'),			'TOPIC_ICON_IMG'		=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['img'] : '',			'TOPIC_ICON_IMG_WIDTH'	=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['width'] : '',			'TOPIC_ICON_IMG_HEIGHT'	=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['height'] : '',			'ATTACH_ICON_IMG'		=> ($auth->acl_get('u_download') && $auth->acl_get('f_download', $topic_forum_id) && $row['topic_attachment']) ? $user->img('icon_topic_attach', $user->lang['TOTAL_ATTACHMENTS']) : '',			'UNAPPROVED_IMG'		=> ($topic_unapproved || $posts_unapproved) ? $user->img('icon_topic_unapproved', ($topic_unapproved) ? 'TOPIC_UNAPPROVED' : 'POSTS_UNAPPROVED') : '',			'S_TOPIC_TYPE'			=> $row['topic_type'],			'S_USER_POSTED'			=> (isset($row['topic_posted']) && $row['topic_posted']) ? true : false,			'S_UNREAD_TOPIC'		=> $unread_topic,			'S_TOPIC_REPORTED'		=> (!empty($row['topic_reported']) && $auth->acl_get('m_report', $topic_forum_id)) ? true : false,			'S_TOPIC_UNAPPROVED'	=> $topic_unapproved,			'S_POSTS_UNAPPROVED'	=> $posts_unapproved,			'S_HAS_POLL'			=> ($row['poll_start']) ? true : false,			'S_POST_ANNOUNCE'		=> ($row['topic_type'] == POST_ANNOUNCE) ? true : false,			'S_POST_GLOBAL'			=> ($row['topic_type'] == POST_GLOBAL) ? true : false,			'S_POST_STICKY'			=> ($row['topic_type'] == POST_STICKY) ? true : false,			'S_TOPIC_LOCKED'		=> ($row['topic_status'] == ITEM_LOCKED) ? true : false,			'S_TOPIC_MOVED'			=> ($row['topic_status'] == ITEM_MOVED) ? true : false,			'U_NEWEST_POST'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", $view_topic_url_params . '&amp;view=unread') . '#unread',			'U_LAST_POST'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", $view_topic_url_params . '&amp;p=' . $row['topic_last_post_id']) . '#p' . $row['topic_last_post_id'],			'U_LAST_POST_AUTHOR'	=> get_username_string('profile', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'U_TOPIC_AUTHOR'		=> get_username_string('profile', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'U_VIEW_TOPIC'			=> $view_topic_url,			'U_MCP_REPORT'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports&amp;mode=reports&amp;f=' . $topic_forum_id . '&amp;t=' . $topic_id, true, $user->session_id),			'U_MCP_QUEUE'			=> $u_mcp_queue,			'S_TOPIC_TYPE_SWITCH'	=> ($s_type_switch == $s_type_switch_test) ? -1 : $s_type_switch_test)		);		$s_type_switch = ($row['topic_type'] == POST_ANNOUNCE || $row['topic_type'] == POST_GLOBAL) ? 1 : 0;		if ($unread_topic)		{			$mark_forum_read = false;		}		unset($rowset[$topic_id]);	}}// This is rather a fudge but it's the best I can think of without requiring information// on all topics (as we do in 2.0.x). It looks for unread or new topics, if it doesn't find// any it updates the forum last read cookie. This requires that the user visit the forum// after reading a topicif ($forum_data['forum_type'] == FORUM_POST && sizeof($topic_list) && $mark_forum_read){	update_forum_tracking_info($forum_id, $forum_data['forum_last_post_time'], false, $mark_time_forum);}page_footer();?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Recalculate Nested Sets** @param int	$new_id	first left_id (should start with 1)* @param string	$pkey	primary key-column (containing the id for the parent_id of the children)* @param string	$table	constant or fullname of the table* @param int	$parent_id parent_id of the current set (default = 0)* @param array	$where	contains strings to compare closer on the where statement (additional)** @author EXreaction*/function recalc_nested_sets(&$new_id, $pkey, $table, $parent_id = 0, $where = array()){	global $db;	$sql = 'SELECT *		FROM ' . $table . '		WHERE parent_id = ' . (int) $parent_id .		((!empty($where)) ? ' AND ' . implode(' AND ', $where) : '') . '		ORDER BY left_id ASC';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		// First we update the left_id for this module		if ($row['left_id'] != $new_id)		{			$db->sql_query('UPDATE ' . $table . ' SET ' . $db->sql_build_array('UPDATE', array('left_id' => $new_id)) . " WHERE $pkey = {$row[$pkey]}");		}		$new_id++;		// Then we go through any children and update their left/right id's		recalc_nested_sets($new_id, $pkey, $table, $row[$pkey], $where);		// Then we come back and update the right_id for this module		if ($row['right_id'] != $new_id)		{			$db->sql_query('UPDATE ' . $table . ' SET ' . $db->sql_build_array('UPDATE', array('right_id' => $new_id)) . " WHERE $pkey = {$row[$pkey]}");		}		$new_id++;	}	$db->sql_freeresult($result);}/*** Simple version of jumpbox, just lists authed forums*/function make_forum_select($select_id = false, $ignore_id = false, $ignore_acl = false, $ignore_nonpost = false, $ignore_emptycat = true, $only_acl_post = false, $return_array = false){	global $db, $user, $auth;	// This query is identical to the jumpbox one	$sql = 'SELECT forum_id, forum_name, parent_id, forum_type, forum_flags, forum_options, left_id, right_id		FROM ' . FORUMS_TABLE . '		ORDER BY left_id ASC';	$result = $db->sql_query($sql, 600);	$right = 0;	$padding_store = array('0' => '');	$padding = '';	$forum_list = ($return_array) ? array() : '';	// Sometimes it could happen that forums will be displayed here not be displayed within the index page	// This is the result of forums not displayed at index, having list permissions and a parent of a forum with no permissions.	// If this happens, the padding could be "broken"	while ($row = $db->sql_fetchrow($result))	{		if ($row['left_id'] < $right)		{			$padding .= '&nbsp; &nbsp;';			$padding_store[$row['parent_id']] = $padding;		}		else if ($row['left_id'] > $right + 1)		{			$padding = (isset($padding_store[$row['parent_id']])) ? $padding_store[$row['parent_id']] : '';		}		$right = $row['right_id'];		$disabled = false;		if (!$ignore_acl && $auth->acl_gets(array('f_list', 'a_forum', 'a_forumadd', 'a_forumdel'), $row['forum_id']))		{			if ($only_acl_post && !$auth->acl_get('f_post', $row['forum_id']) || (!$auth->acl_get('m_approve', $row['forum_id']) && !$auth->acl_get('f_noapprove', $row['forum_id'])))			{				$disabled = true;			}		}		else if (!$ignore_acl)		{			continue;		}		if (			((is_array($ignore_id) && in_array($row['forum_id'], $ignore_id)) || $row['forum_id'] == $ignore_id)			||			// Non-postable forum with no subforums, don't display			($row['forum_type'] == FORUM_CAT && ($row['left_id'] + 1 == $row['right_id']) && $ignore_emptycat)			||			($row['forum_type'] != FORUM_POST && $ignore_nonpost)			)		{			$disabled = true;		}		if ($return_array)		{			// Include some more information...			$selected = (is_array($select_id)) ? ((in_array($row['forum_id'], $select_id)) ? true : false) : (($row['forum_id'] == $select_id) ? true : false);			$forum_list[$row['forum_id']] = array_merge(array('padding' => $padding, 'selected' => ($selected && !$disabled), 'disabled' => $disabled), $row);		}		else		{			$selected = (is_array($select_id)) ? ((in_array($row['forum_id'], $select_id)) ? ' selected="selected"' : '') : (($row['forum_id'] == $select_id) ? ' selected="selected"' : '');			$forum_list .= '<option value="' . $row['forum_id'] . '"' . (($disabled) ? ' disabled="disabled" class="disabled-option"' : $selected) . '>' . $padding . $row['forum_name'] . '</option>';		}	}	$db->sql_freeresult($result);	unset($padding_store);	return $forum_list;}/*** Generate size select options*/function size_select_options($size_compare){	global $user;	$size_types_text = array($user->lang['BYTES'], $user->lang['KIB'], $user->lang['MIB']);	$size_types = array('b', 'kb', 'mb');	$s_size_options = '';	for ($i = 0, $size = sizeof($size_types_text); $i < $size; $i++)	{		$selected = ($size_compare == $size_types[$i]) ? ' selected="selected"' : '';		$s_size_options .= '<option value="' . $size_types[$i] . '"' . $selected . '>' . $size_types_text[$i] . '</option>';	}	return $s_size_options;}/*** Generate list of groups (option fields without select)** @param int $group_id The default group id to mark as selected* @param array $exclude_ids The group ids to exclude from the list, false (default) if you whish to exclude no id* @param int $manage_founder If set to false (default) all groups are returned, if 0 only those groups returned not being managed by founders only, if 1 only those groups returned managed by founders only.** @return string The list of options.*/function group_select_options($group_id, $exclude_ids = false, $manage_founder = false){	global $db, $user, $config;	$exclude_sql = ($exclude_ids !== false && sizeof($exclude_ids)) ? 'WHERE ' . $db->sql_in_set('group_id', array_map('intval', $exclude_ids), true) : '';	$sql_and = (!$config['coppa_enable']) ? (($exclude_sql) ? ' AND ' : ' WHERE ') . "group_name <> 'REGISTERED_COPPA'" : '';	$sql_founder = ($manage_founder !== false) ? (($exclude_sql || $sql_and) ? ' AND ' : ' WHERE ') . 'group_founder_manage = ' . (int) $manage_founder : '';	$sql = 'SELECT group_id, group_name, group_type		FROM ' . GROUPS_TABLE . "		$exclude_sql		$sql_and		$sql_founder		ORDER BY group_type DESC, group_name ASC";	$result = $db->sql_query($sql);	$s_group_options = '';	while ($row = $db->sql_fetchrow($result))	{		$selected = ($row['group_id'] == $group_id) ? ' selected="selected"' : '';		$s_group_options .= '<option' . (($row['group_type'] == GROUP_SPECIAL) ? ' class="sep"' : '') . ' value="' . $row['group_id'] . '"' . $selected . '>' . (($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name']) . '</option>';	}	$db->sql_freeresult($result);	return $s_group_options;}/*** Obtain authed forums list*/function get_forum_list($acl_list = 'f_list', $id_only = true, $postable_only = false, $no_cache = false){	global $db, $auth;	static $forum_rows;	if (!isset($forum_rows))	{		// This query is identical to the jumpbox one		$expire_time = ($no_cache) ? 0 : 600;		$sql = 'SELECT forum_id, forum_name, parent_id, forum_type, left_id, right_id			FROM ' . FORUMS_TABLE . '			ORDER BY left_id ASC';		$result = $db->sql_query($sql, $expire_time);		$forum_rows = array();		$right = $padding = 0;		$padding_store = array('0' => 0);		while ($row = $db->sql_fetchrow($result))		{			if ($row['left_id'] < $right)			{				$padding++;				$padding_store[$row['parent_id']] = $padding;			}			else if ($row['left_id'] > $right + 1)			{				// Ok, if the $padding_store for this parent is empty there is something wrong. For now we will skip over it.				// @todo digging deep to find out "how" this can happen.				$padding = (isset($padding_store[$row['parent_id']])) ? $padding_store[$row['parent_id']] : $padding;			}			$right = $row['right_id'];			$row['padding'] = $padding;			$forum_rows[] = $row;		}		$db->sql_freeresult($result);		unset($padding_store);	}	$rowset = array();	foreach ($forum_rows as $row)	{		if ($postable_only && $row['forum_type'] != FORUM_POST)		{			continue;		}		if ($acl_list == '' || ($acl_list != '' && $auth->acl_gets($acl_list, $row['forum_id'])))		{			$rowset[] = ($id_only) ? (int) $row['forum_id'] : $row;		}	}	return $rowset;}/*** Get forum branch*/function get_forum_branch($forum_id, $type = 'all', $order = 'descending', $include_forum = true){	global $db;	switch ($type)	{		case 'parents':			$condition = 'f1.left_id BETWEEN f2.left_id AND f2.right_id';		break;		case 'children':			$condition = 'f2.left_id BETWEEN f1.left_id AND f1.right_id';		break;		default:			$condition = 'f2.left_id BETWEEN f1.left_id AND f1.right_id OR f1.left_id BETWEEN f2.left_id AND f2.right_id';		break;	}	$rows = array();	$sql = 'SELECT f2.*		FROM ' . FORUMS_TABLE . ' f1		LEFT JOIN ' . FORUMS_TABLE . " f2 ON ($condition)		WHERE f1.forum_id = $forum_id		ORDER BY f2.left_id " . (($order == 'descending') ? 'ASC' : 'DESC');	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		if (!$include_forum && $row['forum_id'] == $forum_id)		{			continue;		}		$rows[] = $row;	}	$db->sql_freeresult($result);	return $rows;}/*** Copies permissions from one forum to others** @param int	$src_forum_id		The source forum we want to copy permissions from* @param array	$dest_forum_ids		The destination forum(s) we want to copy to* @param bool	$clear_dest_perms	True if destination permissions should be deleted* @param bool	$add_log			True if log entry should be added** @return bool						False on error** @author bantu*/function copy_forum_permissions($src_forum_id, $dest_forum_ids, $clear_dest_perms = true, $add_log = true){	global $db;	// Only one forum id specified	if (!is_array($dest_forum_ids))	{		$dest_forum_ids = array($dest_forum_ids);	}	// Make sure forum ids are integers	$src_forum_id = (int) $src_forum_id;	$dest_forum_ids = array_map('intval', $dest_forum_ids);	// No source forum or no destination forums specified	if (empty($src_forum_id) || empty($dest_forum_ids))	{		return false;	}	// Check if source forum exists	$sql = 'SELECT forum_name		FROM ' . FORUMS_TABLE . '		WHERE forum_id = ' . $src_forum_id;	$result = $db->sql_query($sql);	$src_forum_name = $db->sql_fetchfield('forum_name');	$db->sql_freeresult($result);	// Source forum doesn't exist	if (empty($src_forum_name))	{		return false;	}	// Check if destination forums exists	$sql = 'SELECT forum_id, forum_name		FROM ' . FORUMS_TABLE . '		WHERE ' . $db->sql_in_set('forum_id', $dest_forum_ids);	$result = $db->sql_query($sql);	$dest_forum_ids = $dest_forum_names = array();	while ($row = $db->sql_fetchrow($result))	{		$dest_forum_ids[]	= (int) $row['forum_id'];		$dest_forum_names[]	= $row['forum_name'];	}	$db->sql_freeresult($result);	// No destination forum exists	if (empty($dest_forum_ids))	{		return false;	}	// From the mysql documentation:	// Prior to MySQL 4.0.14, the target table of the INSERT statement cannot appear	// in the FROM clause of the SELECT part of the query. This limitation is lifted in 4.0.14.	// Due to this we stay on the safe side if we do the insertion "the manual way"	// Rowsets we're going to insert	$users_sql_ary = $groups_sql_ary = array();	// Query acl users table for source forum data	$sql = 'SELECT user_id, auth_option_id, auth_role_id, auth_setting		FROM ' . ACL_USERS_TABLE . '		WHERE forum_id = ' . $src_forum_id;	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$row = array(			'user_id'			=> (int) $row['user_id'],			'auth_option_id'	=> (int) $row['auth_option_id'],			'auth_role_id'		=> (int) $row['auth_role_id'],			'auth_setting'		=> (int) $row['auth_setting'],		);		foreach ($dest_forum_ids as $dest_forum_id)		{			$users_sql_ary[] = $row + array('forum_id' => $dest_forum_id);		}	}	$db->sql_freeresult($result);	// Query acl groups table for source forum data	$sql = 'SELECT group_id, auth_option_id, auth_role_id, auth_setting		FROM ' . ACL_GROUPS_TABLE . '		WHERE forum_id = ' . $src_forum_id;	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$row = array(			'group_id'			=> (int) $row['group_id'],			'auth_option_id'	=> (int) $row['auth_option_id'],			'auth_role_id'		=> (int) $row['auth_role_id'],			'auth_setting'		=> (int) $row['auth_setting'],		);		foreach ($dest_forum_ids as $dest_forum_id)		{			$groups_sql_ary[] = $row + array('forum_id' => $dest_forum_id);		}	}	$db->sql_freeresult($result);	$db->sql_transaction('begin');	// Clear current permissions of destination forums	if ($clear_dest_perms)	{		$sql = 'DELETE FROM ' . ACL_USERS_TABLE . '			WHERE ' . $db->sql_in_set('forum_id', $dest_forum_ids);		$db->sql_query($sql);		$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . '			WHERE ' . $db->sql_in_set('forum_id', $dest_forum_ids);		$db->sql_query($sql);	}	$db->sql_multi_insert(ACL_USERS_TABLE, $users_sql_ary);	$db->sql_multi_insert(ACL_GROUPS_TABLE, $groups_sql_ary);	if ($add_log)	{		add_log('admin', 'LOG_FORUM_COPIED_PERMISSIONS', $src_forum_name, implode(', ', $dest_forum_names));	}	$db->sql_transaction('commit');	return true;}/*** Get physical file listing*/function filelist($rootdir, $dir = '', $type = 'gif|jpg|jpeg|png'){	$matches = array($dir => array());	// Remove initial / if present	$rootdir = (substr($rootdir, 0, 1) == '/') ? substr($rootdir, 1) : $rootdir;	// Add closing / if not present	$rootdir = ($rootdir && substr($rootdir, -1) != '/') ? $rootdir . '/' : $rootdir;	// Remove initial / if present	$dir = (substr($dir, 0, 1) == '/') ? substr($dir, 1) : $dir;	// Add closing / if not present	$dir = ($dir && substr($dir, -1) != '/') ? $dir . '/' : $dir;	if (!is_dir($rootdir . $dir))	{		return $matches;	}	$dh = @opendir($rootdir . $dir);	if (!$dh)	{		return $matches;	}	while (($fname = readdir($dh)) !== false)	{		if (is_file("$rootdir$dir$fname"))		{			if (filesize("$rootdir$dir$fname") && preg_match('#\.' . $type . '$#i', $fname))			{				$matches[$dir][] = $fname;			}		}		else if ($fname[0] != '.' && is_dir("$rootdir$dir$fname"))		{			$matches += filelist($rootdir, "$dir$fname", $type);		}	}	closedir($dh);	return $matches;}/*** Move topic(s)*/function move_topics($topic_ids, $forum_id, $auto_sync = true){	global $db;	if (empty($topic_ids))	{		return;	}	$forum_ids = array($forum_id);	if (!is_array($topic_ids))	{		$topic_ids = array($topic_ids);	}	$sql = 'DELETE FROM ' . TOPICS_TABLE . '		WHERE ' . $db->sql_in_set('topic_moved_id', $topic_ids) . '			AND forum_id = ' . $forum_id;	$db->sql_query($sql);	if ($auto_sync)	{		$sql = 'SELECT DISTINCT forum_id			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', $topic_ids);		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$forum_ids[] = $row['forum_id'];		}		$db->sql_freeresult($result);	}	$table_ary = array(TOPICS_TABLE, POSTS_TABLE, LOG_TABLE, DRAFTS_TABLE, TOPICS_TRACK_TABLE);	foreach ($table_ary as $table)	{		$sql = "UPDATE $table			SET forum_id = $forum_id			WHERE " . $db->sql_in_set('topic_id', $topic_ids);		$db->sql_query($sql);	}	unset($table_ary);	if ($auto_sync)	{		sync('forum', 'forum_id', $forum_ids, true, true);		unset($forum_ids);	}}/*** Move post(s)*/function move_posts($post_ids, $topic_id, $auto_sync = true){	global $db;	if (!is_array($post_ids))	{		$post_ids = array($post_ids);	}	$forum_ids = array();	$topic_ids = array($topic_id);	$sql = 'SELECT DISTINCT topic_id, forum_id		FROM ' . POSTS_TABLE . '		WHERE ' . $db->sql_in_set('post_id', $post_ids);	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$forum_ids[] = (int) $row['forum_id'];		$topic_ids[] = (int) $row['topic_id'];	}	$db->sql_freeresult($result);	$sql = 'SELECT forum_id		FROM ' . TOPICS_TABLE . '		WHERE topic_id = ' . $topic_id;	$result = $db->sql_query($sql);	$forum_row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$forum_row)	{		trigger_error('NO_TOPIC');	}	$sql = 'UPDATE ' . POSTS_TABLE . '		SET forum_id = ' . (int) $forum_row['forum_id'] . ", topic_id = $topic_id		WHERE " . $db->sql_in_set('post_id', $post_ids);	$db->sql_query($sql);	$sql = 'UPDATE ' . ATTACHMENTS_TABLE . "		SET topic_id = $topic_id, in_message = 0		WHERE " . $db->sql_in_set('post_msg_id', $post_ids);	$db->sql_query($sql);	if ($auto_sync)	{		$forum_ids[] = (int) $forum_row['forum_id'];		sync('topic_reported', 'topic_id', $topic_ids);		sync('topic_attachment', 'topic_id', $topic_ids);		sync('topic', 'topic_id', $topic_ids, true);		sync('forum', 'forum_id', $forum_ids, true, true);	}	// Update posted information	update_posted_info($topic_ids);}/*** Remove topic(s)*/function delete_topics($where_type, $where_ids, $auto_sync = true, $post_count_sync = true, $call_delete_posts = true){	global $db, $config;	$approved_topics = 0;	$forum_ids = $topic_ids = array();	if ($where_type === 'range')	{		$where_clause = $where_ids;	}	else	{		$where_ids = (is_array($where_ids)) ? array_unique($where_ids) : array($where_ids);		if (!sizeof($where_ids))		{			return array('topics' => 0, 'posts' => 0);		}		$where_clause = $db->sql_in_set($where_type, $where_ids);	}	// Making sure that delete_posts does not call delete_topics again...	$return = array(		'posts' => ($call_delete_posts) ? delete_posts($where_type, $where_ids, false, true, $post_count_sync, false) : 0,	);	$sql = 'SELECT topic_id, forum_id, topic_approved, topic_moved_id		FROM ' . TOPICS_TABLE . '		WHERE ' . $where_clause;	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$forum_ids[] = $row['forum_id'];		$topic_ids[] = $row['topic_id'];		if ($row['topic_approved'] && !$row['topic_moved_id'])		{			$approved_topics++;		}	}	$db->sql_freeresult($result);	$return['topics'] = sizeof($topic_ids);	if (!sizeof($topic_ids))	{		return $return;	}	$db->sql_transaction('begin');	$table_ary = array(BOOKMARKS_TABLE, TOPICS_TRACK_TABLE, TOPICS_POSTED_TABLE, POLL_VOTES_TABLE, POLL_OPTIONS_TABLE, TOPICS_WATCH_TABLE, TOPICS_TABLE);	foreach ($table_ary as $table)	{		$sql = "DELETE FROM $table			WHERE " . $db->sql_in_set('topic_id', $topic_ids);		$db->sql_query($sql);	}	unset($table_ary);	$moved_topic_ids = array();	// update the other forums	$sql = 'SELECT topic_id, forum_id		FROM ' . TOPICS_TABLE . '		WHERE ' . $db->sql_in_set('topic_moved_id', $topic_ids);	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$forum_ids[] = $row['forum_id'];		$moved_topic_ids[] = $row['topic_id'];	}	$db->sql_freeresult($result);	if (sizeof($moved_topic_ids))	{		$sql = 'DELETE FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', $moved_topic_ids);		$db->sql_query($sql);	}	$db->sql_transaction('commit');	if ($auto_sync)	{		sync('forum', 'forum_id', array_unique($forum_ids), true, true);		sync('topic_reported', $where_type, $where_ids);	}	if ($approved_topics)	{		set_config_count('num_topics', $approved_topics * (-1), true);	}	return $return;}/*** Remove post(s)*/function delete_posts($where_type, $where_ids, $auto_sync = true, $posted_sync = true, $post_count_sync = true, $call_delete_topics = true){	global $db, $config, $phpbb_root_path, $phpEx;	if ($where_type === 'range')	{		$where_clause = $where_ids;	}	else	{		if (is_array($where_ids))		{			$where_ids = array_unique($where_ids);		}		else		{			$where_ids = array($where_ids);		}		if (!sizeof($where_ids))		{			return false;		}		$where_ids = array_map('intval', $where_ids);/*		Possible code for splitting post deletion		if (sizeof($where_ids) >= 1001)		{			// Split into chunks of 1000			$chunks = array_chunk($where_ids, 1000);			foreach ($chunks as $_where_ids)			{				delete_posts($where_type, $_where_ids, $auto_sync, $posted_sync, $post_count_sync, $call_delete_topics);			}			return;		}*/		$where_clause = $db->sql_in_set($where_type, $where_ids);	}	$approved_posts = 0;	$post_ids = $topic_ids = $forum_ids = $post_counts = $remove_topics = array();	$sql = 'SELECT post_id, poster_id, post_approved, post_postcount, topic_id, forum_id		FROM ' . POSTS_TABLE . '		WHERE ' . $where_clause;	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$post_ids[] = (int) $row['post_id'];		$poster_ids[] = (int) $row['poster_id'];		$topic_ids[] = (int) $row['topic_id'];		$forum_ids[] = (int) $row['forum_id'];		if ($row['post_postcount'] && $post_count_sync && $row['post_approved'])		{			$post_counts[$row['poster_id']] = (!empty($post_counts[$row['poster_id']])) ? $post_counts[$row['poster_id']] + 1 : 1;		}		if ($row['post_approved'])		{			$approved_posts++;		}	}	$db->sql_freeresult($result);	if (!sizeof($post_ids))	{		return false;	}	$db->sql_transaction('begin');	$table_ary = array(POSTS_TABLE, REPORTS_TABLE);	foreach ($table_ary as $table)	{		$sql = "DELETE FROM $table			WHERE " . $db->sql_in_set('post_id', $post_ids);		$db->sql_query($sql);	}	unset($table_ary);	// Adjust users post counts	if (sizeof($post_counts) && $post_count_sync)	{		foreach ($post_counts as $poster_id => $substract)		{			$sql = 'UPDATE ' . USERS_TABLE . '				SET user_posts = 0				WHERE user_id = ' . $poster_id . '				AND user_posts < ' . $substract;			$db->sql_query($sql);			$sql = 'UPDATE ' . USERS_TABLE . '				SET user_posts = user_posts - ' . $substract . '				WHERE user_id = ' . $poster_id . '				AND user_posts >= ' . $substract;			$db->sql_query($sql);		}	}	// Remove topics now having no posts?	if (sizeof($topic_ids))	{		$sql = 'SELECT topic_id			FROM ' . POSTS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', $topic_ids) . '			GROUP BY topic_id';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$remove_topics[] = $row['topic_id'];		}		$db->sql_freeresult($result);		// Actually, those not within remove_topics should be removed. ;)		$remove_topics = array_diff($topic_ids, $remove_topics);	}	// Remove the message from the search index	$search_type = basename($config['search_type']);	if (!file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx))	{		trigger_error('NO_SUCH_SEARCH_MODULE');	}	include_once("{$phpbb_root_path}includes/search/$search_type.$phpEx");	$error = false;	$search = new $search_type($error);	if ($error)	{		trigger_error($error);	}	$search->index_remove($post_ids, $poster_ids, $forum_ids);	delete_attachments('post', $post_ids, false);	$db->sql_transaction('commit');	// Resync topics_posted table	if ($posted_sync)	{		update_posted_info($topic_ids);	}	if ($auto_sync)	{		sync('topic_reported', 'topic_id', $topic_ids);		sync('topic', 'topic_id', $topic_ids, true);		sync('forum', 'forum_id', $forum_ids, true, true);	}	if ($approved_posts)	{		set_config_count('num_posts', $approved_posts * (-1), true);	}	// We actually remove topics now to not be inconsistent (the delete_topics function calls this function too)	if (sizeof($remove_topics) && $call_delete_topics)	{		delete_topics('topic_id', $remove_topics, $auto_sync, $post_count_sync, false);	}	return sizeof($post_ids);}/*** Delete Attachments** @param string $mode can be: post|message|topic|attach|user* @param mixed $ids can be: post_ids, message_ids, topic_ids, attach_ids, user_ids* @param bool $resync set this to false if you are deleting posts or topics*/function delete_attachments($mode, $ids, $resync = true){	global $db, $config;	// 0 is as bad as an empty array	if (empty($ids))	{		return false;	}	if (is_array($ids))	{		$ids = array_unique($ids);		$ids = array_map('intval', $ids);	}	else	{		$ids = array((int) $ids);	}	$sql_where = '';	switch ($mode)	{		case 'post':		case 'message':			$sql_id = 'post_msg_id';			$sql_where = ' AND in_message = ' . ($mode == 'message' ? 1 : 0);		break;		case 'topic':			$sql_id = 'topic_id';		break;		case 'user':			$sql_id = 'poster_id';		break;		case 'attach':		default:			$sql_id = 'attach_id';			$mode = 'attach';		break;	}	$post_ids = $message_ids = $topic_ids = $physical = array();	// Collect post and topic ids for later use if we need to touch remaining entries (if resync is enabled)	$sql = 'SELECT post_msg_id, topic_id, in_message, physical_filename, thumbnail, filesize, is_orphan			FROM ' . ATTACHMENTS_TABLE . '			WHERE ' . $db->sql_in_set($sql_id, $ids);	$sql .= $sql_where;	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		// We only need to store post/message/topic ids if resync is enabled and the file is not orphaned		if ($resync && !$row['is_orphan'])		{			if (!$row['in_message'])			{				$post_ids[] = $row['post_msg_id'];				$topic_ids[] = $row['topic_id'];			}			else			{				$message_ids[] = $row['post_msg_id'];			}		}		$physical[] = array('filename' => $row['physical_filename'], 'thumbnail' => $row['thumbnail'], 'filesize' => $row['filesize'], 'is_orphan' => $row['is_orphan']);	}	$db->sql_freeresult($result);	// Delete attachments	$sql = 'DELETE FROM ' . ATTACHMENTS_TABLE . '		WHERE ' . $db->sql_in_set($sql_id, $ids);	$sql .= $sql_where;	$db->sql_query($sql);	$num_deleted = $db->sql_affectedrows();	if (!$num_deleted)	{		return 0;	}	// Delete attachments from filesystem	$space_removed = $files_removed = 0;	foreach ($physical as $file_ary)	{		if (phpbb_unlink($file_ary['filename'], 'file', true) && !$file_ary['is_orphan'])		{			// Only non-orphaned files count to the file size			$space_removed += $file_ary['filesize'];			$files_removed++;		}		if ($file_ary['thumbnail'])		{			phpbb_unlink($file_ary['filename'], 'thumbnail', true);		}	}	if ($space_removed || $files_removed)	{		set_config_count('upload_dir_size', $space_removed * (-1), true);		set_config_count('num_files', $files_removed * (-1), true);	}	// If we do not resync, we do not need to adjust any message, post, topic or user entries	if (!$resync)	{		return $num_deleted;	}	// No more use for the original ids	unset($ids);	// Now, we need to resync posts, messages, topics. We go through every one of them	$post_ids = array_unique($post_ids);	$message_ids = array_unique($message_ids);	$topic_ids = array_unique($topic_ids);	// Update post indicators for posts now no longer having attachments	if (sizeof($post_ids))	{		// Just check which posts are still having an assigned attachment not orphaned by querying the attachments table		$sql = 'SELECT post_msg_id			FROM ' . ATTACHMENTS_TABLE . '			WHERE ' . $db->sql_in_set('post_msg_id', $post_ids) . '				AND in_message = 0				AND is_orphan = 0';		$result = $db->sql_query($sql);		$remaining_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$remaining_ids[] = $row['post_msg_id'];		}		$db->sql_freeresult($result);		// Now only unset those ids remaining		$post_ids = array_diff($post_ids, $remaining_ids);		if (sizeof($post_ids))		{			$sql = 'UPDATE ' . POSTS_TABLE . '				SET post_attachment = 0				WHERE ' . $db->sql_in_set('post_id', $post_ids);			$db->sql_query($sql);		}	}	// Update message table if messages are affected	if (sizeof($message_ids))	{		// Just check which messages are still having an assigned attachment not orphaned by querying the attachments table		$sql = 'SELECT post_msg_id			FROM ' . ATTACHMENTS_TABLE . '			WHERE ' . $db->sql_in_set('post_msg_id', $message_ids) . '				AND in_message = 1				AND is_orphan = 0';		$result = $db->sql_query($sql);		$remaining_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$remaining_ids[] = $row['post_msg_id'];		}		$db->sql_freeresult($result);		// Now only unset those ids remaining		$message_ids = array_diff($message_ids, $remaining_ids);		if (sizeof($message_ids))		{			$sql = 'UPDATE ' . PRIVMSGS_TABLE . '				SET message_attachment = 0				WHERE ' . $db->sql_in_set('msg_id', $message_ids);			$db->sql_query($sql);		}	}	// Now update the topics. This is a bit trickier, because there could be posts still having attachments within the topic	if (sizeof($topic_ids))	{		// Just check which topics are still having an assigned attachment not orphaned by querying the attachments table (much less entries expected)		$sql = 'SELECT topic_id			FROM ' . ATTACHMENTS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', $topic_ids) . '				AND is_orphan = 0';		$result = $db->sql_query($sql);		$remaining_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$remaining_ids[] = $row['topic_id'];		}		$db->sql_freeresult($result);		// Now only unset those ids remaining		$topic_ids = array_diff($topic_ids, $remaining_ids);		if (sizeof($topic_ids))		{			$sql = 'UPDATE ' . TOPICS_TABLE . '				SET topic_attachment = 0				WHERE ' . $db->sql_in_set('topic_id', $topic_ids);			$db->sql_query($sql);		}	}	return $num_deleted;}/*** Deletes shadow topics pointing to a specified forum.** @param int		$forum_id		The forum id* @param string		$sql_more		Additional WHERE statement, e.g. t.topic_time < (time() - 1234)* @param bool		$auto_sync		Will call sync() if this is true** @return array		Array with affected forums** @author bantu*/function delete_topic_shadows($forum_id, $sql_more = '', $auto_sync = true){	global $db;	if (!$forum_id)	{		// Nothing to do.		return;	}	// Set of affected forums we have to resync	$sync_forum_ids = array();	// Amount of topics we select and delete at once.	$batch_size = 500;	do	{		$sql = 'SELECT t2.forum_id, t2.topic_id			FROM ' . TOPICS_TABLE . ' t2, ' . TOPICS_TABLE . ' t			WHERE t2.topic_moved_id = t.topic_id				AND t.forum_id = ' . (int) $forum_id . '				' . (($sql_more) ? 'AND ' . $sql_more : '');		$result = $db->sql_query_limit($sql, $batch_size);		$topic_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$topic_ids[] = (int) $row['topic_id'];			$sync_forum_ids[(int) $row['forum_id']] = (int) $row['forum_id'];		}		$db->sql_freeresult($result);		if (!empty($topic_ids))		{			$sql = 'DELETE FROM ' . TOPICS_TABLE . '				WHERE ' . $db->sql_in_set('topic_id', $topic_ids);			$db->sql_query($sql);		}	}	while (sizeof($topic_ids) == $batch_size);	if ($auto_sync)	{		sync('forum', 'forum_id', $sync_forum_ids, true, true);	}	return $sync_forum_ids;}/*** Update/Sync posted information for topics*/function update_posted_info(&$topic_ids){	global $db, $config;	if (empty($topic_ids) || !$config['load_db_track'])	{		return;	}	// First of all, let us remove any posted information for these topics	$sql = 'DELETE FROM ' . TOPICS_POSTED_TABLE . '		WHERE ' . $db->sql_in_set('topic_id', $topic_ids);	$db->sql_query($sql);	// Now, let us collect the user/topic combos for rebuilding the information	$sql = 'SELECT poster_id, topic_id		FROM ' . POSTS_TABLE . '		WHERE ' . $db->sql_in_set('topic_id', $topic_ids) . '			AND poster_id <> ' . ANONYMOUS . '		GROUP BY poster_id, topic_id';	$result = $db->sql_query($sql);	$posted = array();	while ($row = $db->sql_fetchrow($result))	{		// Add as key to make them unique (grouping by) and circumvent empty keys on array_unique		$posted[$row['poster_id']][] = $row['topic_id'];	}	$db->sql_freeresult($result);	// Now add the information...	$sql_ary = array();	foreach ($posted as $user_id => $topic_row)	{		foreach ($topic_row as $topic_id)		{			$sql_ary[] = array(				'user_id'		=> (int) $user_id,				'topic_id'		=> (int) $topic_id,				'topic_posted'	=> 1,			);		}	}	unset($posted);	$db->sql_multi_insert(TOPICS_POSTED_TABLE, $sql_ary);}/*** Delete attached file*/function phpbb_unlink($filename, $mode = 'file', $entry_removed = false){	global $db, $phpbb_root_path, $config;	// Because of copying topics or modifications a physical filename could be assigned more than once. If so, do not remove the file itself.	$sql = 'SELECT COUNT(attach_id) AS num_entries		FROM ' . ATTACHMENTS_TABLE . "		WHERE physical_filename = '" . $db->sql_escape(utf8_basename($filename)) . "'";	$result = $db->sql_query($sql);	$num_entries = (int) $db->sql_fetchfield('num_entries');	$db->sql_freeresult($result);	// Do not remove file if at least one additional entry with the same name exist.	if (($entry_removed && $num_entries > 0) || (!$entry_removed && $num_entries > 1))	{		return false;	}	$filename = ($mode == 'thumbnail') ? 'thumb_' . utf8_basename($filename) : utf8_basename($filename);	return @unlink($phpbb_root_path . $config['upload_path'] . '/' . $filename);}/*** All-encompasing sync function** Exaples:* <code>* sync('topic', 'topic_id', 123);			// resync topic #123* sync('topic', 'forum_id', array(2, 3));	// resync topics from forum #2 and #3* sync('topic');							// resync all topics* sync('topic', 'range', 'topic_id BETWEEN 1 AND 60');	// resync a range of topics/forums (only available for 'topic' and 'forum' modes)* </code>** Modes:* - forum				Resync complete forum* - topic				Resync topics* - topic_moved			Removes topic shadows that would be in the same forum as the topic they link to* - topic_approved		Resyncs the topic_approved flag according to the status of the first post* - post_reported		Resyncs the post_reported flag, relying on actual reports* - topic_reported		Resyncs the topic_reported flag, relying on post_reported flags* - post_attachement	Same as post_reported, but with attachment flags* - topic_attachement	Same as topic_reported, but with attachment flags*/function sync($mode, $where_type = '', $where_ids = '', $resync_parents = false, $sync_extra = false){	global $db;	if (is_array($where_ids))	{		$where_ids = array_unique($where_ids);		$where_ids = array_map('intval', $where_ids);	}	else if ($where_type != 'range')	{		$where_ids = ($where_ids) ? array((int) $where_ids) : array();	}	if ($mode == 'forum' || $mode == 'topic' || $mode == 'topic_approved' || $mode == 'topic_reported' || $mode == 'post_reported')	{		if (!$where_type)		{			$where_sql = '';			$where_sql_and = 'WHERE';		}		else if ($where_type == 'range')		{			// Only check a range of topics/forums. For instance: 'topic_id BETWEEN 1 AND 60'			$where_sql = 'WHERE (' . $mode[0] . ".$where_ids)";			$where_sql_and = $where_sql . "\n\tAND";		}		else		{			// Do not sync the "global forum"			$where_ids = array_diff($where_ids, array(0));			if (!sizeof($where_ids))			{				// Empty array with IDs. This means that we don't have any work to do. Just return.				return;			}			// Limit the topics/forums we are syncing, use specific topic/forum IDs.			// $where_type contains the field for the where clause (forum_id, topic_id)			$where_sql = 'WHERE ' . $db->sql_in_set($mode[0] . '.' . $where_type, $where_ids);			$where_sql_and = $where_sql . "\n\tAND";		}	}	else	{		if (!sizeof($where_ids))		{			return;		}		// $where_type contains the field for the where clause (forum_id, topic_id)		$where_sql = 'WHERE ' . $db->sql_in_set($mode[0] . '.' . $where_type, $where_ids);		$where_sql_and = $where_sql . "\n\tAND";	}	switch ($mode)	{		case 'topic_moved':			$db->sql_transaction('begin');			switch ($db->sql_layer)			{				case 'mysql4':				case 'mysqli':					$sql = 'DELETE FROM ' . TOPICS_TABLE . '						USING ' . TOPICS_TABLE . ' t1, ' . TOPICS_TABLE . " t2						WHERE t1.topic_moved_id = t2.topic_id							AND t1.forum_id = t2.forum_id";					$db->sql_query($sql);				break;				default:					$sql = 'SELECT t1.topic_id						FROM ' .TOPICS_TABLE . ' t1, ' . TOPICS_TABLE . " t2						WHERE t1.topic_moved_id = t2.topic_id							AND t1.forum_id = t2.forum_id";					$result = $db->sql_query($sql);					$topic_id_ary = array();					while ($row = $db->sql_fetchrow($result))					{						$topic_id_ary[] = $row['topic_id'];					}					$db->sql_freeresult($result);					if (!sizeof($topic_id_ary))					{						return;					}					$sql = 'DELETE FROM ' . TOPICS_TABLE . '						WHERE ' . $db->sql_in_set('topic_id', $topic_id_ary);					$db->sql_query($sql);				break;			}			$db->sql_transaction('commit');			break;		case 'topic_approved':			$db->sql_transaction('begin');			switch ($db->sql_layer)			{				case 'mysql4':				case 'mysqli':					$sql = 'UPDATE ' . TOPICS_TABLE . ' t, ' . POSTS_TABLE . " p						SET t.topic_approved = p.post_approved						$where_sql_and t.topic_first_post_id = p.post_id";					$db->sql_query($sql);				break;				default:					$sql = 'SELECT t.topic_id, p.post_approved						FROM ' . TOPICS_TABLE . ' t, ' . POSTS_TABLE . " p						$where_sql_and p.post_id = t.topic_first_post_id							AND p.post_approved <> t.topic_approved";					$result = $db->sql_query($sql);					$topic_ids = array();					while ($row = $db->sql_fetchrow($result))					{						$topic_ids[] = $row['topic_id'];					}					$db->sql_freeresult($result);					if (!sizeof($topic_ids))					{						return;					}					$sql = 'UPDATE ' . TOPICS_TABLE . '						SET topic_approved = 1 - topic_approved						WHERE ' . $db->sql_in_set('topic_id', $topic_ids);					$db->sql_query($sql);				break;			}			$db->sql_transaction('commit');			break;		case 'post_reported':			$post_ids = $post_reported = array();			$db->sql_transaction('begin');			$sql = 'SELECT p.post_id, p.post_reported				FROM ' . POSTS_TABLE . " p				$where_sql				GROUP BY p.post_id, p.post_reported";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$post_ids[$row['post_id']] = $row['post_id'];				if ($row['post_reported'])				{					$post_reported[$row['post_id']] = 1;				}			}			$db->sql_freeresult($result);			$sql = 'SELECT DISTINCT(post_id)				FROM ' . REPORTS_TABLE . '				WHERE ' . $db->sql_in_set('post_id', $post_ids) . '					AND report_closed = 0';			$result = $db->sql_query($sql);			$post_ids = array();			while ($row = $db->sql_fetchrow($result))			{				if (!isset($post_reported[$row['post_id']]))				{					$post_ids[] = $row['post_id'];				}				else				{					unset($post_reported[$row['post_id']]);				}			}			$db->sql_freeresult($result);			// $post_reported should be empty by now, if it's not it contains			// posts that are falsely flagged as reported			foreach ($post_reported as $post_id => $void)			{				$post_ids[] = $post_id;			}			if (sizeof($post_ids))			{				$sql = 'UPDATE ' . POSTS_TABLE . '					SET post_reported = 1 - post_reported					WHERE ' . $db->sql_in_set('post_id', $post_ids);				$db->sql_query($sql);			}			$db->sql_transaction('commit');			break;		case 'topic_reported':			if ($sync_extra)			{				sync('post_reported', $where_type, $where_ids);			}			$topic_ids = $topic_reported = array();			$db->sql_transaction('begin');			$sql = 'SELECT DISTINCT(t.topic_id)				FROM ' . POSTS_TABLE . " t				$where_sql_and t.post_reported = 1";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$topic_reported[$row['topic_id']] = 1;			}			$db->sql_freeresult($result);			$sql = 'SELECT t.topic_id, t.topic_reported				FROM ' . TOPICS_TABLE . " t				$where_sql";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if ($row['topic_reported'] ^ isset($topic_reported[$row['topic_id']]))				{					$topic_ids[] = $row['topic_id'];				}			}			$db->sql_freeresult($result);			if (sizeof($topic_ids))			{				$sql = 'UPDATE ' . TOPICS_TABLE . '					SET topic_reported = 1 - topic_reported					WHERE ' . $db->sql_in_set('topic_id', $topic_ids);				$db->sql_query($sql);			}			$db->sql_transaction('commit');			break;		case 'post_attachment':			$post_ids = $post_attachment = array();			$db->sql_transaction('begin');			$sql = 'SELECT p.post_id, p.post_attachment				FROM ' . POSTS_TABLE . " p				$where_sql				GROUP BY p.post_id, p.post_attachment";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$post_ids[$row['post_id']] = $row['post_id'];				if ($row['post_attachment'])				{					$post_attachment[$row['post_id']] = 1;				}			}			$db->sql_freeresult($result);			$sql = 'SELECT DISTINCT(post_msg_id)				FROM ' . ATTACHMENTS_TABLE . '				WHERE ' . $db->sql_in_set('post_msg_id', $post_ids) . '					AND in_message = 0';			$result = $db->sql_query($sql);			$post_ids = array();			while ($row = $db->sql_fetchrow($result))			{				if (!isset($post_attachment[$row['post_msg_id']]))				{					$post_ids[] = $row['post_msg_id'];				}				else				{					unset($post_attachment[$row['post_msg_id']]);				}			}			$db->sql_freeresult($result);			// $post_attachment should be empty by now, if it's not it contains			// posts that are falsely flagged as having attachments			foreach ($post_attachment as $post_id => $void)			{				$post_ids[] = $post_id;			}			if (sizeof($post_ids))			{				$sql = 'UPDATE ' . POSTS_TABLE . '					SET post_attachment = 1 - post_attachment					WHERE ' . $db->sql_in_set('post_id', $post_ids);				$db->sql_query($sql);			}			$db->sql_transaction('commit');			break;		case 'topic_attachment':			if ($sync_extra)			{				sync('post_attachment', $where_type, $where_ids);			}			$topic_ids = $topic_attachment = array();			$db->sql_transaction('begin');			$sql = 'SELECT DISTINCT(t.topic_id)				FROM ' . POSTS_TABLE . " t				$where_sql_and t.post_attachment = 1";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$topic_attachment[$row['topic_id']] = 1;			}			$db->sql_freeresult($result);			$sql = 'SELECT t.topic_id, t.topic_attachment				FROM ' . TOPICS_TABLE . " t				$where_sql";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if ($row['topic_attachment'] ^ isset($topic_attachment[$row['topic_id']]))				{					$topic_ids[] = $row['topic_id'];				}			}			$db->sql_freeresult($result);			if (sizeof($topic_ids))			{				$sql = 'UPDATE ' . TOPICS_TABLE . '					SET topic_attachment = 1 - topic_attachment					WHERE ' . $db->sql_in_set('topic_id', $topic_ids);				$db->sql_query($sql);			}			$db->sql_transaction('commit');			break;		case 'forum':			$db->sql_transaction('begin');			// 1: Get the list of all forums			$sql = 'SELECT f.*				FROM ' . FORUMS_TABLE . " f				$where_sql";			$result = $db->sql_query($sql);			$forum_data = $forum_ids = $post_ids = $last_post_id = $post_info = array();			while ($row = $db->sql_fetchrow($result))			{				if ($row['forum_type'] == FORUM_LINK)				{					continue;				}				$forum_id = (int) $row['forum_id'];				$forum_ids[$forum_id] = $forum_id;				$forum_data[$forum_id] = $row;				if ($sync_extra)				{					$forum_data[$forum_id]['posts'] = 0;					$forum_data[$forum_id]['topics'] = 0;					$forum_data[$forum_id]['topics_real'] = 0;				}				$forum_data[$forum_id]['last_post_id'] = 0;				$forum_data[$forum_id]['last_post_subject'] = '';				$forum_data[$forum_id]['last_post_time'] = 0;				$forum_data[$forum_id]['last_poster_id'] = 0;				$forum_data[$forum_id]['last_poster_name'] = '';				$forum_data[$forum_id]['last_poster_colour'] = '';			}			$db->sql_freeresult($result);			if (!sizeof($forum_ids))			{				break;			}			$forum_ids = array_values($forum_ids);			// 2: Get topic counts for each forum (optional)			if ($sync_extra)			{				$sql = 'SELECT forum_id, topic_approved, COUNT(topic_id) AS forum_topics					FROM ' . TOPICS_TABLE . '					WHERE ' . $db->sql_in_set('forum_id', $forum_ids) . '					GROUP BY forum_id, topic_approved';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$forum_id = (int) $row['forum_id'];					$forum_data[$forum_id]['topics_real'] += $row['forum_topics'];					if ($row['topic_approved'])					{						$forum_data[$forum_id]['topics'] = $row['forum_topics'];					}				}				$db->sql_freeresult($result);			}			// 3: Get post count for each forum (optional)			if ($sync_extra)			{				if (sizeof($forum_ids) == 1)				{					$sql = 'SELECT SUM(t.topic_replies + 1) AS forum_posts						FROM ' . TOPICS_TABLE . ' t						WHERE ' . $db->sql_in_set('t.forum_id', $forum_ids) . '							AND t.topic_approved = 1							AND t.topic_status <> ' . ITEM_MOVED;				}				else				{					$sql = 'SELECT t.forum_id, SUM(t.topic_replies + 1) AS forum_posts						FROM ' . TOPICS_TABLE . ' t						WHERE ' . $db->sql_in_set('t.forum_id', $forum_ids) . '							AND t.topic_approved = 1							AND t.topic_status <> ' . ITEM_MOVED . '						GROUP BY t.forum_id';				}				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$forum_id = (sizeof($forum_ids) == 1) ? (int) $forum_ids[0] : (int) $row['forum_id'];					$forum_data[$forum_id]['posts'] = (int) $row['forum_posts'];				}				$db->sql_freeresult($result);			}			// 4: Get last_post_id for each forum			if (sizeof($forum_ids) == 1)			{				$sql = 'SELECT MAX(t.topic_last_post_id) as last_post_id					FROM ' . TOPICS_TABLE . ' t					WHERE ' . $db->sql_in_set('t.forum_id', $forum_ids) . '						AND t.topic_approved = 1';			}			else			{				$sql = 'SELECT t.forum_id, MAX(t.topic_last_post_id) as last_post_id					FROM ' . TOPICS_TABLE . ' t					WHERE ' . $db->sql_in_set('t.forum_id', $forum_ids) . '						AND t.topic_approved = 1					GROUP BY t.forum_id';			}			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$forum_id = (sizeof($forum_ids) == 1) ? (int) $forum_ids[0] : (int) $row['forum_id'];				$forum_data[$forum_id]['last_post_id'] = (int) $row['last_post_id'];				$post_ids[] = $row['last_post_id'];			}			$db->sql_freeresult($result);			// 5: Retrieve last_post infos			if (sizeof($post_ids))			{				$sql = 'SELECT p.post_id, p.poster_id, p.post_subject, p.post_time, p.post_username, u.username, u.user_colour					FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u					WHERE ' . $db->sql_in_set('p.post_id', $post_ids) . '						AND p.poster_id = u.user_id';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$post_info[$row['post_id']] = $row;				}				$db->sql_freeresult($result);				foreach ($forum_data as $forum_id => $data)				{					if ($data['last_post_id'])					{						if (isset($post_info[$data['last_post_id']]))						{							$forum_data[$forum_id]['last_post_subject'] = $post_info[$data['last_post_id']]['post_subject'];							$forum_data[$forum_id]['last_post_time'] = $post_info[$data['last_post_id']]['post_time'];							$forum_data[$forum_id]['last_poster_id'] = $post_info[$data['last_post_id']]['poster_id'];							$forum_data[$forum_id]['last_poster_name'] = ($post_info[$data['last_post_id']]['poster_id'] != ANONYMOUS) ? $post_info[$data['last_post_id']]['username'] : $post_info[$data['last_post_id']]['post_username'];							$forum_data[$forum_id]['last_poster_colour'] = $post_info[$data['last_post_id']]['user_colour'];						}						else						{							// For some reason we did not find the post in the db							$forum_data[$forum_id]['last_post_id'] = 0;							$forum_data[$forum_id]['last_post_subject'] = '';							$forum_data[$forum_id]['last_post_time'] = 0;							$forum_data[$forum_id]['last_poster_id'] = 0;							$forum_data[$forum_id]['last_poster_name'] = '';							$forum_data[$forum_id]['last_poster_colour'] = '';						}					}				}				unset($post_info);			}			// 6: Now do that thing			$fieldnames = array('last_post_id', 'last_post_subject', 'last_post_time', 'last_poster_id', 'last_poster_name', 'last_poster_colour');			if ($sync_extra)			{				array_push($fieldnames, 'posts', 'topics', 'topics_real');			}			foreach ($forum_data as $forum_id => $row)			{				$sql_ary = array();				foreach ($fieldnames as $fieldname)				{					if ($row['forum_' . $fieldname] != $row[$fieldname])					{						if (preg_match('#(name|colour|subject)$#', $fieldname))						{							$sql_ary['forum_' . $fieldname] = (string) $row[$fieldname];						}						else						{							$sql_ary['forum_' . $fieldname] = (int) $row[$fieldname];						}					}				}				if (sizeof($sql_ary))				{					$sql = 'UPDATE ' . FORUMS_TABLE . '						SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '						WHERE forum_id = ' . $forum_id;					$db->sql_query($sql);				}			}			$db->sql_transaction('commit');			break;		case 'topic':			$topic_data = $post_ids = $approved_unapproved_ids = $resync_forums = $delete_topics = $delete_posts = $moved_topics = array();			$db->sql_transaction('begin');			$sql = 'SELECT t.topic_id, t.forum_id, t.topic_moved_id, t.topic_approved, ' . (($sync_extra) ? 't.topic_attachment, t.topic_reported, ' : '') . 't.topic_poster, t.topic_time, t.topic_replies, t.topic_replies_real, t.topic_first_post_id, t.topic_first_poster_name, t.topic_first_poster_colour, t.topic_last_post_id, t.topic_last_post_subject, t.topic_last_poster_id, t.topic_last_poster_name, t.topic_last_poster_colour, t.topic_last_post_time				FROM ' . TOPICS_TABLE . " t				$where_sql";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if ($row['topic_moved_id'])				{					$moved_topics[] = $row['topic_id'];					continue;				}				$topic_id = (int) $row['topic_id'];				$topic_data[$topic_id] = $row;				$topic_data[$topic_id]['replies_real'] = -1;				$topic_data[$topic_id]['replies'] = 0;				$topic_data[$topic_id]['first_post_id'] = 0;				$topic_data[$topic_id]['last_post_id'] = 0;				unset($topic_data[$topic_id]['topic_id']);				// This array holds all topic_ids				$delete_topics[$topic_id] = '';				if ($sync_extra)				{					$topic_data[$topic_id]['reported'] = 0;					$topic_data[$topic_id]['attachment'] = 0;				}			}			$db->sql_freeresult($result);			// Use "t" as table alias because of the $where_sql clause			// NOTE: 't.post_approved' in the GROUP BY is causing a major slowdown.			$sql = 'SELECT t.topic_id, t.post_approved, COUNT(t.post_id) AS total_posts, MIN(t.post_id) AS first_post_id, MAX(t.post_id) AS last_post_id				FROM ' . POSTS_TABLE . " t				$where_sql				GROUP BY t.topic_id, t.post_approved";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$topic_id = (int) $row['topic_id'];				$row['first_post_id'] = (int) $row['first_post_id'];				$row['last_post_id'] = (int) $row['last_post_id'];				if (!isset($topic_data[$topic_id]))				{					// Hey, these posts come from a topic that does not exist					$delete_posts[$topic_id] = '';				}				else				{					// Unset the corresponding entry in $delete_topics					// When we'll be done, only topics with no posts will remain					unset($delete_topics[$topic_id]);					$topic_data[$topic_id]['replies_real'] += $row['total_posts'];					$topic_data[$topic_id]['first_post_id'] = (!$topic_data[$topic_id]['first_post_id']) ? $row['first_post_id'] : min($topic_data[$topic_id]['first_post_id'], $row['first_post_id']);					if ($row['post_approved'] || !$topic_data[$topic_id]['last_post_id'])					{						$topic_data[$topic_id]['replies'] = $row['total_posts'] - 1;						$topic_data[$topic_id]['last_post_id'] = $row['last_post_id'];					}				}			}			$db->sql_freeresult($result);			foreach ($topic_data as $topic_id => $row)			{				$post_ids[] = $row['first_post_id'];				if ($row['first_post_id'] != $row['last_post_id'])				{					$post_ids[] = $row['last_post_id'];				}			}			// Now we delete empty topics and orphan posts			if (sizeof($delete_posts))			{				delete_posts('topic_id', array_keys($delete_posts), false);				unset($delete_posts);			}			if (!sizeof($topic_data))			{				// If we get there, topic ids were invalid or topics did not contain any posts				delete_topics($where_type, $where_ids, true);				return;			}			if (sizeof($delete_topics))			{				$delete_topic_ids = array();				foreach ($delete_topics as $topic_id => $void)				{					unset($topic_data[$topic_id]);					$delete_topic_ids[] = $topic_id;				}				delete_topics('topic_id', $delete_topic_ids, false);				unset($delete_topics, $delete_topic_ids);			}			$sql = 'SELECT p.post_id, p.topic_id, p.post_approved, p.poster_id, p.post_subject, p.post_username, p.post_time, u.username, u.user_colour				FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u				WHERE ' . $db->sql_in_set('p.post_id', $post_ids) . '					AND u.user_id = p.poster_id';			$result = $db->sql_query($sql);			$post_ids = array();			while ($row = $db->sql_fetchrow($result))			{				$topic_id = intval($row['topic_id']);				if ($row['post_id'] == $topic_data[$topic_id]['first_post_id'])				{					if ($topic_data[$topic_id]['topic_approved'] != $row['post_approved'])					{						$approved_unapproved_ids[] = $topic_id;					}					$topic_data[$topic_id]['time'] = $row['post_time'];					$topic_data[$topic_id]['poster'] = $row['poster_id'];					$topic_data[$topic_id]['first_poster_name'] = ($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username'];					$topic_data[$topic_id]['first_poster_colour'] = $row['user_colour'];				}				if ($row['post_id'] == $topic_data[$topic_id]['last_post_id'])				{					$topic_data[$topic_id]['last_poster_id'] = $row['poster_id'];					$topic_data[$topic_id]['last_post_subject'] = $row['post_subject'];					$topic_data[$topic_id]['last_post_time'] = $row['post_time'];					$topic_data[$topic_id]['last_poster_name'] = ($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username'];					$topic_data[$topic_id]['last_poster_colour'] = $row['user_colour'];				}			}			$db->sql_freeresult($result);			// Make sure shadow topics do link to existing topics			if (sizeof($moved_topics))			{				$delete_topics = array();				$sql = 'SELECT t1.topic_id, t1.topic_moved_id					FROM ' . TOPICS_TABLE . ' t1					LEFT JOIN ' . TOPICS_TABLE . ' t2 ON (t2.topic_id = t1.topic_moved_id)					WHERE ' . $db->sql_in_set('t1.topic_id', $moved_topics) . '						AND t2.topic_id IS NULL';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$delete_topics[] = $row['topic_id'];				}				$db->sql_freeresult($result);				if (sizeof($delete_topics))				{					delete_topics('topic_id', $delete_topics, false);				}				unset($delete_topics);				// Make sure shadow topics having no last post data being updated (this only rarely happens...)				$sql = 'SELECT topic_id, topic_moved_id, topic_last_post_id, topic_first_post_id					FROM ' . TOPICS_TABLE . '					WHERE ' . $db->sql_in_set('topic_id', $moved_topics) . '						AND topic_last_post_time = 0';				$result = $db->sql_query($sql);				$shadow_topic_data = $post_ids = array();				while ($row = $db->sql_fetchrow($result))				{					$shadow_topic_data[$row['topic_moved_id']] = $row;					$post_ids[] = $row['topic_last_post_id'];					$post_ids[] = $row['topic_first_post_id'];				}				$db->sql_freeresult($result);				$sync_shadow_topics = array();				if (sizeof($post_ids))				{					$sql = 'SELECT p.post_id, p.topic_id, p.post_approved, p.poster_id, p.post_subject, p.post_username, p.post_time, u.username, u.user_colour						FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u						WHERE ' . $db->sql_in_set('p.post_id', $post_ids) . '							AND u.user_id = p.poster_id';					$result = $db->sql_query($sql);					$post_ids = array();					while ($row = $db->sql_fetchrow($result))					{						$topic_id = (int) $row['topic_id'];						// Ok, there should be a shadow topic. If there isn't, then there's something wrong with the db.						// However, there's not much we can do about it.						if (!empty($shadow_topic_data[$topic_id]))						{							if ($row['post_id'] == $shadow_topic_data[$topic_id]['topic_first_post_id'])							{								$orig_topic_id = $shadow_topic_data[$topic_id]['topic_id'];								if (!isset($sync_shadow_topics[$orig_topic_id]))								{									$sync_shadow_topics[$orig_topic_id] = array();								}								$sync_shadow_topics[$orig_topic_id]['topic_time'] = $row['post_time'];								$sync_shadow_topics[$orig_topic_id]['topic_poster'] = $row['poster_id'];								$sync_shadow_topics[$orig_topic_id]['topic_first_poster_name'] = ($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username'];								$sync_shadow_topics[$orig_topic_id]['topic_first_poster_colour'] = $row['user_colour'];							}							if ($row['post_id'] == $shadow_topic_data[$topic_id]['topic_last_post_id'])							{								$orig_topic_id = $shadow_topic_data[$topic_id]['topic_id'];								if (!isset($sync_shadow_topics[$orig_topic_id]))								{									$sync_shadow_topics[$orig_topic_id] = array();								}								$sync_shadow_topics[$orig_topic_id]['topic_last_poster_id'] = $row['poster_id'];								$sync_shadow_topics[$orig_topic_id]['topic_last_post_subject'] = $row['post_subject'];								$sync_shadow_topics[$orig_topic_id]['topic_last_post_time'] = $row['post_time'];								$sync_shadow_topics[$orig_topic_id]['topic_last_poster_name'] = ($row['poster_id'] == ANONYMOUS) ? $row['post_username'] : $row['username'];								$sync_shadow_topics[$orig_topic_id]['topic_last_poster_colour'] = $row['user_colour'];							}						}					}					$db->sql_freeresult($result);					$shadow_topic_data = array();					// Update the information we collected					if (sizeof($sync_shadow_topics))					{						foreach ($sync_shadow_topics as $sync_topic_id => $sql_ary)						{							$sql = 'UPDATE ' . TOPICS_TABLE . '								SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '								WHERE topic_id = ' . $sync_topic_id;							$db->sql_query($sql);						}					}				}				unset($sync_shadow_topics, $shadow_topic_data);			}			// approved becomes unapproved, and vice-versa			if (sizeof($approved_unapproved_ids))			{				$sql = 'UPDATE ' . TOPICS_TABLE . '					SET topic_approved = 1 - topic_approved					WHERE ' . $db->sql_in_set('topic_id', $approved_unapproved_ids);				$db->sql_query($sql);			}			unset($approved_unapproved_ids);			// These are fields that will be synchronised			$fieldnames = array('time', 'replies', 'replies_real', 'poster', 'first_post_id', 'first_poster_name', 'first_poster_colour', 'last_post_id', 'last_post_subject', 'last_post_time', 'last_poster_id', 'last_poster_name', 'last_poster_colour');			if ($sync_extra)			{				// This routine assumes that post_reported values are correct				// if they are not, use sync('post_reported') first				$sql = 'SELECT t.topic_id, p.post_id					FROM ' . TOPICS_TABLE . ' t, ' . POSTS_TABLE . " p					$where_sql_and p.topic_id = t.topic_id						AND p.post_reported = 1					GROUP BY t.topic_id, p.post_id";				$result = $db->sql_query($sql);				$fieldnames[] = 'reported';				while ($row = $db->sql_fetchrow($result))				{					$topic_data[intval($row['topic_id'])]['reported'] = 1;				}				$db->sql_freeresult($result);				// This routine assumes that post_attachment values are correct				// if they are not, use sync('post_attachment') first				$sql = 'SELECT t.topic_id, p.post_id					FROM ' . TOPICS_TABLE . ' t, ' . POSTS_TABLE . " p					$where_sql_and p.topic_id = t.topic_id						AND p.post_attachment = 1					GROUP BY t.topic_id, p.post_id";				$result = $db->sql_query($sql);				$fieldnames[] = 'attachment';				while ($row = $db->sql_fetchrow($result))				{					$topic_data[intval($row['topic_id'])]['attachment'] = 1;				}				$db->sql_freeresult($result);			}			foreach ($topic_data as $topic_id => $row)			{				$sql_ary = array();				foreach ($fieldnames as $fieldname)				{					if (isset($row[$fieldname]) && isset($row['topic_' . $fieldname]) && $row['topic_' . $fieldname] != $row[$fieldname])					{						$sql_ary['topic_' . $fieldname] = $row[$fieldname];					}				}				if (sizeof($sql_ary))				{					$sql = 'UPDATE ' . TOPICS_TABLE . '						SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '						WHERE topic_id = ' . $topic_id;					$db->sql_query($sql);					$resync_forums[$row['forum_id']] = $row['forum_id'];				}			}			unset($topic_data);			$db->sql_transaction('commit');			// if some topics have been resync'ed then resync parent forums			// except when we're only syncing a range, we don't want to sync forums during			// batch processing.			if ($resync_parents && sizeof($resync_forums) && $where_type != 'range')			{				sync('forum', 'forum_id', array_values($resync_forums), true, true);			}			break;	}	return;}/*** Prune function*/function prune($forum_id, $prune_mode, $prune_date, $prune_flags = 0, $auto_sync = true){	global $db;	if (!is_array($forum_id))	{		$forum_id = array($forum_id);	}	if (!sizeof($forum_id))	{		return;	}	$sql_and = '';	if (!($prune_flags & FORUM_FLAG_PRUNE_ANNOUNCE))	{		$sql_and .= ' AND topic_type <> ' . POST_ANNOUNCE;	}	if (!($prune_flags & FORUM_FLAG_PRUNE_STICKY))	{		$sql_and .= ' AND topic_type <> ' . POST_STICKY;	}	if ($prune_mode == 'posted')	{		$sql_and .= " AND topic_last_post_time < $prune_date";	}	if ($prune_mode == 'viewed')	{		$sql_and .= " AND topic_last_view_time < $prune_date";	}	$sql = 'SELECT topic_id		FROM ' . TOPICS_TABLE . '		WHERE ' . $db->sql_in_set('forum_id', $forum_id) . "			AND poll_start = 0			$sql_and";	$result = $db->sql_query($sql);	$topic_list = array();	while ($row = $db->sql_fetchrow($result))	{		$topic_list[] = $row['topic_id'];	}	$db->sql_freeresult($result);	if ($prune_flags & FORUM_FLAG_PRUNE_POLL)	{		$sql = 'SELECT topic_id			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('forum_id', $forum_id) . "				AND poll_start > 0				AND poll_last_vote < $prune_date				$sql_and";		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$topic_list[] = $row['topic_id'];		}		$db->sql_freeresult($result);		$topic_list = array_unique($topic_list);	}	return delete_topics('topic_id', $topic_list, $auto_sync, false);}/*** Function auto_prune(), this function now relies on passed vars*/function auto_prune($forum_id, $prune_mode, $prune_flags, $prune_days, $prune_freq){	global $db;	$sql = 'SELECT forum_name		FROM ' . FORUMS_TABLE . "		WHERE forum_id = $forum_id";	$result = $db->sql_query($sql, 3600);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		$prune_date = time() - ($prune_days * 86400);		$next_prune = time() + ($prune_freq * 86400);		prune($forum_id, $prune_mode, $prune_date, $prune_flags, true);		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET prune_next = $next_prune			WHERE forum_id = $forum_id";		$db->sql_query($sql);		add_log('admin', 'LOG_AUTO_PRUNE', $row['forum_name']);	}	return;}/*** remove_comments will strip the sql comment lines out of an uploaded sql file* specifically for mssql and postgres type files in the install....*/function remove_comments(&$output){	$lines = explode("\n", $output);	$output = '';	// try to keep mem. use down	$linecount = sizeof($lines);	$in_comment = false;	for ($i = 0; $i < $linecount; $i++)	{		if (trim($lines[$i]) == '/*')		{			$in_comment = true;		}		if (!$in_comment)		{			$output .= $lines[$i] . "\n";		}		if (trim($lines[$i]) == '*/')		{			$in_comment = false;		}	}	unset($lines);	return $output;}/*** Cache moderators, called whenever permissions are changed via admin_permissions. Changes of username* and group names must be carried through for the moderators table*/function cache_moderators(){	global $db, $cache, $auth, $phpbb_root_path, $phpEx;	// Remove cached sql results	$cache->destroy('sql', MODERATOR_CACHE_TABLE);	// Clear table	switch ($db->sql_layer)	{		case 'sqlite':		case 'firebird':			$db->sql_query('DELETE FROM ' . MODERATOR_CACHE_TABLE);		break;		default:			$db->sql_query('TRUNCATE TABLE ' . MODERATOR_CACHE_TABLE);		break;	}	// We add moderators who have forum moderator permissions without an explicit ACL_NEVER setting	$hold_ary = $ug_id_ary = $sql_ary = array();	// Grab all users having moderative options...	$hold_ary = $auth->acl_user_raw_data(false, 'm_%', false);	// Add users?	if (sizeof($hold_ary))	{		// At least one moderative option warrants a display		$ug_id_ary = array_keys($hold_ary);		// Remove users who have group memberships with DENY moderator permissions		$sql = $db->sql_build_query('SELECT', array(			'SELECT'	=> 'a.forum_id, ug.user_id, g.group_id',			'FROM'		=> array(				ACL_OPTIONS_TABLE	=> 'o',				USER_GROUP_TABLE	=> 'ug',				GROUPS_TABLE		=> 'g',				ACL_GROUPS_TABLE	=> 'a',			),			'LEFT_JOIN'	=> array(				array(					'FROM'	=> array(ACL_ROLES_DATA_TABLE => 'r'),					'ON'	=> 'a.auth_role_id = r.role_id'				)			),			'WHERE'		=> '(o.auth_option_id = a.auth_option_id OR o.auth_option_id = r.auth_option_id)				AND ((a.auth_setting = ' . ACL_NEVER . ' AND r.auth_setting IS NULL)					OR r.auth_setting = ' . ACL_NEVER . ')				AND a.group_id = ug.group_id				AND g.group_id = ug.group_id				AND NOT (ug.group_leader = 1 AND g.group_skip_auth = 1)				AND ' . $db->sql_in_set('ug.user_id', $ug_id_ary) . "				AND ug.user_pending = 0				AND o.auth_option " . $db->sql_like_expression('m_' . $db->any_char),		));		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if (isset($hold_ary[$row['user_id']][$row['forum_id']]))			{				unset($hold_ary[$row['user_id']][$row['forum_id']]);			}		}		$db->sql_freeresult($result);		if (sizeof($hold_ary))		{			// Get usernames...			$sql = 'SELECT user_id, username				FROM ' . USERS_TABLE . '				WHERE ' . $db->sql_in_set('user_id', array_keys($hold_ary));			$result = $db->sql_query($sql);			$usernames_ary = array();			while ($row = $db->sql_fetchrow($result))			{				$usernames_ary[$row['user_id']] = $row['username'];			}			foreach ($hold_ary as $user_id => $forum_id_ary)			{				// Do not continue if user does not exist				if (!isset($usernames_ary[$user_id]))				{					continue;				}				foreach ($forum_id_ary as $forum_id => $auth_ary)				{					$sql_ary[] = array(						'forum_id'		=> (int) $forum_id,						'user_id'		=> (int) $user_id,						'username'		=> (string) $usernames_ary[$user_id],						'group_id'		=> 0,						'group_name'	=> ''					);				}			}		}	}	// Now to the groups...	$hold_ary = $auth->acl_group_raw_data(false, 'm_%', false);	if (sizeof($hold_ary))	{		$ug_id_ary = array_keys($hold_ary);		// Make sure not hidden or special groups are involved...		$sql = 'SELECT group_name, group_id, group_type			FROM ' . GROUPS_TABLE . '			WHERE ' . $db->sql_in_set('group_id', $ug_id_ary);		$result = $db->sql_query($sql);		$groupnames_ary = array();		while ($row = $db->sql_fetchrow($result))		{			if ($row['group_type'] == GROUP_HIDDEN || $row['group_type'] == GROUP_SPECIAL)			{				unset($hold_ary[$row['group_id']]);			}			$groupnames_ary[$row['group_id']] = $row['group_name'];		}		$db->sql_freeresult($result);		foreach ($hold_ary as $group_id => $forum_id_ary)		{			// If there is no group, we do not assign it...			if (!isset($groupnames_ary[$group_id]))			{				continue;			}			foreach ($forum_id_ary as $forum_id => $auth_ary)			{				$flag = false;				foreach ($auth_ary as $auth_option => $setting)				{					// Make sure at least one ACL_YES option is set...					if ($setting == ACL_YES)					{						$flag = true;						break;					}				}				if (!$flag)				{					continue;				}				$sql_ary[] = array(					'forum_id'		=> (int) $forum_id,					'user_id'		=> 0,					'username'		=> '',					'group_id'		=> (int) $group_id,					'group_name'	=> (string) $groupnames_ary[$group_id]				);			}		}	}	$db->sql_multi_insert(MODERATOR_CACHE_TABLE, $sql_ary);}/*** View log* If $log_count is set to false, we will skip counting all entries in the database.*/function view_log($mode, &$log, &$log_count, $limit = 0, $offset = 0, $forum_id = 0, $topic_id = 0, $user_id = 0, $limit_days = 0, $sort_by = 'l.log_time DESC', $keywords = ''){	global $db, $user, $auth, $phpEx, $phpbb_root_path, $phpbb_admin_path;	$topic_id_list = $reportee_id_list = $is_auth = $is_mod = array();	$profile_url = (defined('IN_ADMIN')) ? append_sid("{$phpbb_admin_path}index.$phpEx", 'i=users&amp;mode=overview') : append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=viewprofile');	switch ($mode)	{		case 'admin':			$log_type = LOG_ADMIN;			$sql_forum = '';		break;		case 'mod':			$log_type = LOG_MOD;			$sql_forum = '';			if ($topic_id)			{				$sql_forum = 'AND l.topic_id = ' . (int) $topic_id;			}			else if (is_array($forum_id))			{				$sql_forum = 'AND ' . $db->sql_in_set('l.forum_id', array_map('intval', $forum_id));			}			else if ($forum_id)			{				$sql_forum = 'AND l.forum_id = ' . (int) $forum_id;			}		break;		case 'user':			$log_type = LOG_USERS;			$sql_forum = 'AND l.reportee_id = ' . (int) $user_id;		break;		case 'users':			$log_type = LOG_USERS;			$sql_forum = '';		break;		case 'critical':			$log_type = LOG_CRITICAL;			$sql_forum = '';		break;		default:			return;	}	// Use no preg_quote for $keywords because this would lead to sole backslashes being added	// We also use an OR connection here for spaces and the | string. Currently, regex is not supported for searching (but may come later).	$keywords = preg_split('#[\s|]+#u', utf8_strtolower($keywords), 0, PREG_SPLIT_NO_EMPTY);	$sql_keywords = '';	if (!empty($keywords))	{		$keywords_pattern = array();		// Build pattern and keywords...		for ($i = 0, $num_keywords = sizeof($keywords); $i < $num_keywords; $i++)		{			$keywords_pattern[] = preg_quote($keywords[$i], '#');			$keywords[$i] = $db->sql_like_expression($db->any_char . $keywords[$i] . $db->any_char);		}		$keywords_pattern = '#' . implode('|', $keywords_pattern) . '#ui';		$operations = array();		foreach ($user->lang as $key => $value)		{			if (substr($key, 0, 4) == 'LOG_' && preg_match($keywords_pattern, $value))			{				$operations[] = $key;			}		}		$sql_keywords = 'AND (';		if (!empty($operations))		{			$sql_keywords .= $db->sql_in_set('l.log_operation', $operations) . ' OR ';		}		$sql_keywords .= 'LOWER(l.log_data) ' . implode(' OR LOWER(l.log_data) ', $keywords) . ')';	}	if ($log_count !== false)	{		$sql = 'SELECT COUNT(l.log_id) AS total_entries			FROM ' . LOG_TABLE . ' l, ' . USERS_TABLE . " u			WHERE l.log_type = $log_type				AND l.user_id = u.user_id				AND l.log_time >= $limit_days				$sql_keywords				$sql_forum";		$result = $db->sql_query($sql);		$log_count = (int) $db->sql_fetchfield('total_entries');		$db->sql_freeresult($result);	}	// $log_count may be false here if false was passed in for it,	// because in this case we did not run the COUNT() query above.	// If we ran the COUNT() query and it returned zero rows, return;	// otherwise query for logs below.	if ($log_count === 0)	{		// Save the queries, because there are no logs to display		return 0;	}	if ($offset >= $log_count)	{		$offset = ($offset - $limit < 0) ? 0 : $offset - $limit;	}	$sql = "SELECT l.*, u.username, u.username_clean, u.user_colour		FROM " . LOG_TABLE . " l, " . USERS_TABLE . " u		WHERE l.log_type = $log_type			AND u.user_id = l.user_id			" . (($limit_days) ? "AND l.log_time >= $limit_days" : '') . "			$sql_keywords			$sql_forum		ORDER BY $sort_by";	$result = $db->sql_query_limit($sql, $limit, $offset);	$i = 0;	$log = array();	while ($row = $db->sql_fetchrow($result))	{		if ($row['topic_id'])		{			$topic_id_list[] = $row['topic_id'];		}		if ($row['reportee_id'])		{			$reportee_id_list[] = $row['reportee_id'];		}		$log[$i] = array(			'id'				=> $row['log_id'],			'reportee_id'			=> $row['reportee_id'],			'reportee_username'		=> '',			'reportee_username_full'=> '',			'user_id'			=> $row['user_id'],			'username'			=> $row['username'],			'username_full'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour'], false, $profile_url),			'ip'				=> $row['log_ip'],			'time'				=> $row['log_time'],			'forum_id'			=> $row['forum_id'],			'topic_id'			=> $row['topic_id'],			'viewforum'			=> ($row['forum_id'] && $auth->acl_get('f_read', $row['forum_id'])) ? append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $row['forum_id']) : false,			'action'			=> (isset($user->lang[$row['log_operation']])) ? $user->lang[$row['log_operation']] : '{' . ucfirst(str_replace('_', ' ', $row['log_operation'])) . '}',		);		if (!empty($row['log_data']))		{			$log_data_ary = @unserialize($row['log_data']);			$log_data_ary = ($log_data_ary === false) ? array() : $log_data_ary;			if (isset($user->lang[$row['log_operation']]))			{				// Check if there are more occurrences of % than arguments, if there are we fill out the arguments array				// It doesn't matter if we add more arguments than placeholders				if ((substr_count($log[$i]['action'], '%') - sizeof($log_data_ary)) > 0)				{					$log_data_ary = array_merge($log_data_ary, array_fill(0, substr_count($log[$i]['action'], '%') - sizeof($log_data_ary), ''));				}				$log[$i]['action'] = vsprintf($log[$i]['action'], $log_data_ary);				// If within the admin panel we do not censor text out				if (defined('IN_ADMIN'))				{					$log[$i]['action'] = bbcode_nl2br($log[$i]['action']);				}				else				{					$log[$i]['action'] = bbcode_nl2br(censor_text($log[$i]['action']));				}			}			else if (!empty($log_data_ary))			{				$log[$i]['action'] .= '<br />' . implode('', $log_data_ary);			}			/* Apply make_clickable... has to be seen if it is for good. :/			// Seems to be not for the moment, reconsider later...			$log[$i]['action'] = make_clickable($log[$i]['action']);			*/		}		$i++;	}	$db->sql_freeresult($result);	if (sizeof($topic_id_list))	{		$topic_id_list = array_unique($topic_id_list);		// This query is not really needed if move_topics() updates the forum_id field,		// although it's also used to determine if the topic still exists in the database		$sql = 'SELECT topic_id, forum_id			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', array_map('intval', $topic_id_list));		$result = $db->sql_query($sql);		$default_forum_id = 0;		while ($row = $db->sql_fetchrow($result))		{			if (!$row['forum_id'])			{				if ($auth->acl_getf_global('f_read'))				{					if (!$default_forum_id)					{						$sql = 'SELECT forum_id							FROM ' . FORUMS_TABLE . '							WHERE forum_type = ' . FORUM_POST;						$f_result = $db->sql_query_limit($sql, 1);						$default_forum_id = (int) $db->sql_fetchfield('forum_id', false, $f_result);						$db->sql_freeresult($f_result);					}					$is_auth[$row['topic_id']] = $default_forum_id;				}			}			else			{				if ($auth->acl_get('f_read', $row['forum_id']))				{					$is_auth[$row['topic_id']] = $row['forum_id'];				}			}			if ($auth->acl_gets('a_', 'm_', $row['forum_id']))			{				$is_mod[$row['topic_id']] = $row['forum_id'];			}		}		$db->sql_freeresult($result);		foreach ($log as $key => $row)		{			$log[$key]['viewtopic'] = (isset($is_auth[$row['topic_id']])) ? append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $is_auth[$row['topic_id']] . '&amp;t=' . $row['topic_id']) : false;			$log[$key]['viewlogs'] = (isset($is_mod[$row['topic_id']])) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=logs&amp;mode=topic_logs&amp;t=' . $row['topic_id'], true, $user->session_id) : false;		}	}	if (sizeof($reportee_id_list))	{		$reportee_id_list = array_unique($reportee_id_list);		$reportee_names_list = array();		$sql = 'SELECT user_id, username, user_colour			FROM ' . USERS_TABLE . '			WHERE ' . $db->sql_in_set('user_id', $reportee_id_list);		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$reportee_names_list[$row['user_id']] = $row;		}		$db->sql_freeresult($result);		foreach ($log as $key => $row)		{			if (!isset($reportee_names_list[$row['reportee_id']]))			{				continue;			}			$log[$key]['reportee_username'] = $reportee_names_list[$row['reportee_id']]['username'];			$log[$key]['reportee_username_full'] = get_username_string('full', $row['reportee_id'], $reportee_names_list[$row['reportee_id']]['username'], $reportee_names_list[$row['reportee_id']]['user_colour'], false, $profile_url);		}	}	return $offset;}/*** Update foes - remove moderators and administrators from foe lists...*/function update_foes($group_id = false, $user_id = false){	global $db, $auth;	// update foes for some user	if (is_array($user_id) && sizeof($user_id))	{		$sql = 'DELETE FROM ' . ZEBRA_TABLE . '			WHERE ' . $db->sql_in_set('zebra_id', $user_id) . '				AND foe = 1';		$db->sql_query($sql);		return;	}	// update foes for some group	if (is_array($group_id) && sizeof($group_id))	{		// Grab group settings...		$sql = $db->sql_build_query('SELECT', array(			'SELECT'	=> 'a.group_id',			'FROM'		=> array(				ACL_OPTIONS_TABLE	=> 'ao',				ACL_GROUPS_TABLE	=> 'a'			),			'LEFT_JOIN'	=> array(				array(					'FROM'	=> array(ACL_ROLES_DATA_TABLE => 'r'),					'ON'	=> 'a.auth_role_id = r.role_id'				),			),			'WHERE'		=> '(ao.auth_option_id = a.auth_option_id OR ao.auth_option_id = r.auth_option_id)				AND ' . $db->sql_in_set('a.group_id', $group_id) . "				AND ao.auth_option IN ('a_', 'm_')",			'GROUP_BY'	=> 'a.group_id'		));		$result = $db->sql_query($sql);		$groups = array();		while ($row = $db->sql_fetchrow($result))		{			$groups[] = (int) $row['group_id'];		}		$db->sql_freeresult($result);		if (!sizeof($groups))		{			return;		}		switch ($db->sql_layer)		{			case 'mysqli':			case 'mysql4':				$sql = 'DELETE ' . (($db->sql_layer === 'mysqli' || version_compare($db->sql_server_info(true), '4.1', '>=')) ? 'z.*' : ZEBRA_TABLE) . '					FROM ' . ZEBRA_TABLE . ' z, ' . USER_GROUP_TABLE . ' ug					WHERE z.zebra_id = ug.user_id						AND z.foe = 1						AND ' . $db->sql_in_set('ug.group_id', $groups);				$db->sql_query($sql);			break;			default:				$sql = 'SELECT user_id					FROM ' . USER_GROUP_TABLE . '					WHERE ' . $db->sql_in_set('group_id', $groups);				$result = $db->sql_query($sql);				$users = array();				while ($row = $db->sql_fetchrow($result))				{					$users[] = (int) $row['user_id'];				}				$db->sql_freeresult($result);				if (sizeof($users))				{					$sql = 'DELETE FROM ' . ZEBRA_TABLE . '						WHERE ' . $db->sql_in_set('zebra_id', $users) . '							AND foe = 1';					$db->sql_query($sql);				}			break;		}		return;	}	// update foes for everyone	$perms = array();	foreach ($auth->acl_get_list(false, array('a_', 'm_'), false) as $forum_id => $forum_ary)	{		foreach ($forum_ary as $auth_option => $user_ary)		{			$perms = array_merge($perms, $user_ary);		}	}	if (sizeof($perms))	{		$sql = 'DELETE FROM ' . ZEBRA_TABLE . '			WHERE ' . $db->sql_in_set('zebra_id', array_unique($perms)) . '				AND foe = 1';		$db->sql_query($sql);	}	unset($perms);}/*** Lists inactive users*/function view_inactive_users(&$users, &$user_count, $limit = 0, $offset = 0, $limit_days = 0, $sort_by = 'user_inactive_time DESC'){	global $db, $user;	$sql = 'SELECT COUNT(user_id) AS user_count		FROM ' . USERS_TABLE . '		WHERE user_type = ' . USER_INACTIVE .		(($limit_days) ? " AND user_inactive_time >= $limit_days" : '');	$result = $db->sql_query($sql);	$user_count = (int) $db->sql_fetchfield('user_count');	$db->sql_freeresult($result);	if ($user_count == 0)	{		// Save the queries, because there are no users to display		return 0;	}	if ($offset >= $user_count)	{		$offset = ($offset - $limit < 0) ? 0 : $offset - $limit;	}	$sql = 'SELECT *		FROM ' . USERS_TABLE . '		WHERE user_type = ' . USER_INACTIVE .		(($limit_days) ? " AND user_inactive_time >= $limit_days" : '') . "		ORDER BY $sort_by";	$result = $db->sql_query_limit($sql, $limit, $offset);	while ($row = $db->sql_fetchrow($result))	{		$row['inactive_reason'] = $user->lang['INACTIVE_REASON_UNKNOWN'];		switch ($row['user_inactive_reason'])		{			case INACTIVE_REGISTER:				$row['inactive_reason'] = $user->lang['INACTIVE_REASON_REGISTER'];			break;			case INACTIVE_PROFILE:				$row['inactive_reason'] = $user->lang['INACTIVE_REASON_PROFILE'];			break;			case INACTIVE_MANUAL:				$row['inactive_reason'] = $user->lang['INACTIVE_REASON_MANUAL'];			break;			case INACTIVE_REMIND:				$row['inactive_reason'] = $user->lang['INACTIVE_REASON_REMIND'];			break;		}		$users[] = $row;	}	return $offset;}/*** Lists warned users*/function view_warned_users(&$users, &$user_count, $limit = 0, $offset = 0, $limit_days = 0, $sort_by = 'user_warnings DESC'){	global $db;	$sql = 'SELECT user_id, username, user_colour, user_warnings, user_last_warning		FROM ' . USERS_TABLE . '		WHERE user_warnings > 0		' . (($limit_days) ? "AND user_last_warning >= $limit_days" : '') . "		ORDER BY $sort_by";	$result = $db->sql_query_limit($sql, $limit, $offset);	$users = $db->sql_fetchrowset($result);	$db->sql_freeresult($result);	$sql = 'SELECT count(user_id) AS user_count		FROM ' . USERS_TABLE . '		WHERE user_warnings > 0		' . (($limit_days) ? "AND user_last_warning >= $limit_days" : '');	$result = $db->sql_query($sql);	$user_count = (int) $db->sql_fetchfield('user_count');	$db->sql_freeresult($result);	return;}/*** Get database size* Currently only mysql and mssql are supported*/function get_database_size(){	global $db, $user, $table_prefix;	$database_size = false;	// This code is heavily influenced by a similar routine in phpMyAdmin 2.2.0	switch ($db->sql_layer)	{		case 'mysql':		case 'mysql4':		case 'mysqli':			$sql = 'SELECT VERSION() AS mysql_version';			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($row)			{				$version = $row['mysql_version'];				if (preg_match('#(3\.23|[45]\.)#', $version))				{					$db_name = (preg_match('#^(?:3\.23\.(?:[6-9]|[1-9]{2}))|[45]\.#', $version)) ? "`{$db->dbname}`" : $db->dbname;					$sql = 'SHOW TABLE STATUS						FROM ' . $db_name;					$result = $db->sql_query($sql, 7200);					$database_size = 0;					while ($row = $db->sql_fetchrow($result))					{						if ((isset($row['Type']) && $row['Type'] != 'MRG_MyISAM') || (isset($row['Engine']) && ($row['Engine'] == 'MyISAM' || $row['Engine'] == 'InnoDB')))						{							if ($table_prefix != '')							{								if (strpos($row['Name'], $table_prefix) !== false)								{									$database_size += $row['Data_length'] + $row['Index_length'];								}							}							else							{								$database_size += $row['Data_length'] + $row['Index_length'];							}						}					}					$db->sql_freeresult($result);				}			}		break;		case 'firebird':			global $dbname;			// if it on the local machine, we can get lucky			if (file_exists($dbname))			{				$database_size = filesize($dbname);			}		break;		case 'sqlite':			global $dbhost;			if (file_exists($dbhost))			{				$database_size = filesize($dbhost);			}		break;		case 'mssql':		case 'mssql_odbc':		case 'mssqlnative':			$sql = 'SELECT ((SUM(size) * 8.0) * 1024.0) as dbsize				FROM sysfiles';			$result = $db->sql_query($sql, 7200);			$database_size = ($row = $db->sql_fetchrow($result)) ? $row['dbsize'] : false;			$db->sql_freeresult($result);		break;		case 'postgres':			$sql = "SELECT proname				FROM pg_proc				WHERE proname = 'pg_database_size'";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($row['proname'] == 'pg_database_size')			{				$database = $db->dbname;				if (strpos($database, '.') !== false)				{					list($database, ) = explode('.', $database);				}				$sql = "SELECT oid					FROM pg_database					WHERE datname = '$database'";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$oid = $row['oid'];				$sql = 'SELECT pg_database_size(' . $oid . ') as size';				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$database_size = $row['size'];			}		break;		case 'oracle':			$sql = 'SELECT SUM(bytes) as dbsize				FROM user_segments';			$result = $db->sql_query($sql, 7200);			$database_size = ($row = $db->sql_fetchrow($result)) ? $row['dbsize'] : false;			$db->sql_freeresult($result);		break;	}	$database_size = ($database_size !== false) ? get_formatted_filesize($database_size) : $user->lang['NOT_AVAILABLE'];	return $database_size;}/*** Retrieve contents from remotely stored file*/function get_remote_file($host, $directory, $filename, &$errstr, &$errno, $port = 80, $timeout = 6){	global $user;	if ($fsock = @fsockopen($host, $port, $errno, $errstr, $timeout))	{		@fputs($fsock, "GET $directory/$filename HTTP/1.1\r\n");		@fputs($fsock, "HOST: $host\r\n");		@fputs($fsock, "Connection: close\r\n\r\n");		$timer_stop = time() + $timeout;		stream_set_timeout($fsock, $timeout);		$file_info = '';		$get_info = false;		while (!@feof($fsock))		{			if ($get_info)			{				$file_info .= @fread($fsock, 1024);			}			else			{				$line = @fgets($fsock, 1024);				if ($line == "\r\n")				{					$get_info = true;				}				else if (stripos($line, '404 not found') !== false)				{					$errstr = $user->lang['FILE_NOT_FOUND'] . ': ' . $filename;					return false;				}			}			$stream_meta_data = stream_get_meta_data($fsock);			if (!empty($stream_meta_data['timed_out']) || time() >= $timer_stop)			{				$errstr = $user->lang['FSOCK_TIMEOUT'];				return false;			}		}		@fclose($fsock);	}	else	{		if ($errstr)		{			$errstr = utf8_convert_message($errstr);			return false;		}		else		{			$errstr = $user->lang['FSOCK_DISABLED'];			return false;		}	}	return $file_info;}/*** Tidy Warnings* Remove all warnings which have now expired from the database* The duration of a warning can be defined by the administrator* This only removes the warning and reduces the associated count,* it does not remove the user note recording the contents of the warning*/function tidy_warnings(){	global $db, $config;	$expire_date = time() - ($config['warnings_expire_days'] * 86400);	$warning_list = $user_list = array();	$sql = 'SELECT * FROM ' . WARNINGS_TABLE . "		WHERE warning_time < $expire_date";	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$warning_list[] = $row['warning_id'];		$user_list[$row['user_id']] = isset($user_list[$row['user_id']]) ? ++$user_list[$row['user_id']] : 1;	}	$db->sql_freeresult($result);	if (sizeof($warning_list))	{		$db->sql_transaction('begin');		$sql = 'DELETE FROM ' . WARNINGS_TABLE . '			WHERE ' . $db->sql_in_set('warning_id', $warning_list);		$db->sql_query($sql);		foreach ($user_list as $user_id => $value)		{			$sql = 'UPDATE ' . USERS_TABLE . " SET user_warnings = user_warnings - $value				WHERE user_id = $user_id";			$db->sql_query($sql);		}		$db->sql_transaction('commit');	}	set_config('warnings_last_gc', time(), true);}/*** Tidy database, doing some maintanance tasks*/function tidy_database(){	global $db;	// Here we check permission consistency	// Sometimes, it can happen permission tables having forums listed which do not exist	$sql = 'SELECT forum_id		FROM ' . FORUMS_TABLE;	$result = $db->sql_query($sql);	$forum_ids = array(0);	while ($row = $db->sql_fetchrow($result))	{		$forum_ids[] = $row['forum_id'];	}	$db->sql_freeresult($result);	// Delete those rows from the acl tables not having listed the forums above	$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . '		WHERE ' . $db->sql_in_set('forum_id', $forum_ids, true);	$db->sql_query($sql);	$sql = 'DELETE FROM ' . ACL_USERS_TABLE . '		WHERE ' . $db->sql_in_set('forum_id', $forum_ids, true);	$db->sql_query($sql);	set_config('database_last_gc', time(), true);}/*** Add permission language - this will make sure custom files will be included*/function add_permission_language(){	global $user, $phpEx;	// First of all, our own file. We need to include it as the first file because it presets all relevant variables.	$user->add_lang('acp/permissions_phpbb');	$files_to_add = array();	// Now search in acp and mods folder for permissions_ files.	foreach (array('acp/', 'mods/') as $path)	{		$dh = @opendir($user->lang_path . $user->lang_name . '/' . $path);		if ($dh)		{			while (($file = readdir($dh)) !== false)			{				if ($file !== 'permissions_phpbb.' . $phpEx && strpos($file, 'permissions_') === 0 && substr($file, -(strlen($phpEx) + 1)) === '.' . $phpEx)				{					$files_to_add[] = $path . substr($file, 0, -(strlen($phpEx) + 1));				}			}			closedir($dh);		}	}	if (!sizeof($files_to_add))	{		return false;	}	$user->add_lang($files_to_add);	return true;}/** * Obtains the latest version information * * @param bool $force_update Ignores cached data. Defaults to false. * @param bool $warn_fail Trigger a warning if obtaining the latest version information fails. Defaults to false. * @param int $ttl Cache version information for $ttl seconds. Defaults to 86400 (24 hours). * * @return string | false Version info on success, false on failure. */function obtain_latest_version_info($force_update = false, $warn_fail = false, $ttl = 86400){	global $cache;	$info = $cache->get('versioncheck');	if ($info === false || $force_update)	{		$errstr = '';		$errno = 0;		$info = get_remote_file('version.phpbb.com', '/phpbb',				((defined('PHPBB_QA')) ? '30x_qa.txt' : '30x.txt'), $errstr, $errno);		if ($info === false)		{			$cache->destroy('versioncheck');			if ($warn_fail)			{				trigger_error($errstr, E_USER_WARNING);			}			return false;		}		$cache->put('versioncheck', $info, $ttl);	}	return $info;}/** * Enables a particular flag in a bitfield column of a given table. * * @param string	$table_name		The table to update * @param string	$column_name	The column containing a bitfield to update * @param int		$flag			The binary flag which is OR-ed with the current column value * @param string	$sql_more		This string is attached to the sql query generated to update the table. * * @return void */function enable_bitfield_column_flag($table_name, $column_name, $flag, $sql_more = ''){	global $db;	$sql = 'UPDATE ' . $table_name . '		SET ' . $column_name . ' = ' . $db->sql_bit_or($column_name, $flag) . '		' . $sql_more;	$db->sql_query($sql);}?>
