<?php/***************************************************************************   *                           merge_clean_posts.php   *                            -------------------                          *   begin                : Tuesday, February 25, 2003  *   copyright            : (C) 2003 The phpBB Group         *   email                : support@phpbb.com                            *                                                           *   $Id$ *  ***************************************************************************/ /***************************************************************************   *                                                      *   This program is free software; you can redistribute it and/or modify     *   it under the terms of the GNU General Public License as published by    *   the Free Software Foundation; either version 2 of the License, or   *   (at your option) any later version.                       *  ***************************************************************************/ //// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");@set_time_limit(2400);$db = $dbhost = $dbuser = $dbpasswd = $dbport = $dbname = '';define('IN_PHPBB', 1);define('ANONYMOUS', 1);$phpbb_root_path='./../';include($phpbb_root_path . 'extension.inc');include($phpbb_root_path . 'config.'.$phpEx);include($phpbb_root_path . 'includes/functions.'.$phpEx);require($phpbb_root_path . 'includes/acm/cache_' . $acm_type . '.'.$phpEx);include($phpbb_root_path . 'db/' . $dbms . '.'.$phpEx);$cache = new acm();$db = new sql_db($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false);// Just Do it (tm) $sql = "RENAME TABLE {$table_prefix}posts TO {$table_prefix}posts_temp";$db->sql_query($sql);$sql = "CREATE TABLE {$table_prefix}posts 	SELECT p.*, pt.post_subject, pt.post_text, pt.post_checksum, pt.bbcode_bitfield, pt.bbcode_uid 		FROM {$table_prefix}posts_temp p, {$table_prefix}posts_text pt 		WHERE pt.post_id = p.post_id";$db->sql_query($sql);switch ($db->sql_layer){	case 'mysql':	case 'mysql4':		$sql = 'ALTER TABLE ' . $table_prefix . 'posts 			ADD PRIMARY KEY (post_id), 			ADD INDEX topic_id (topic_id), 			ADD INDEX poster_ip (poster_ip), 			ADD INDEX post_approved (post_approved), 			MODIFY COLUMN post_id mediumint(8) UNSIGNED NOT NULL auto_increment, 			ADD COLUMN post_encoding varchar(11) DEFAULT \'iso-8859-15\' NOT NULL'; 		break;	case 'mssql':	case 'mssql-odbc':	case 'msaccess':		break;	case 'postgresql':		break;}$db->sql_query($sql);$sql = "UPDATE {$table_prefix}topics SET topic_poster = 1 WHERE topic_poster = 0 OR topic_poster IS NULL";$db->sql_query($sql);$sql = "UPDATE {$table_prefix}topics SET topic_last_poster_id = 1 WHERE topic_last_poster_id = 0 OR topic_last_poster_id IS NULL";$db->sql_query($sql);$sql = "UPDATE {$table_prefix}posts SET poster_id = 1 WHERE poster_id = 0 OR poster_id IS NULL";$db->sql_query($sql);$sql = "UPDATE {$table_prefix}users SET user_id = 1 WHERE user_id = 0";$db->sql_query($sql);$sql = "SELECT t.topic_id 	FROM {$table_prefix}topics t 	LEFT JOIN {$table_prefix}posts p ON p.topic_id = t.topic_id 	WHERE p.topic_id IS NULL";$result = $db->sql_query($sql);if ($row = $db->sql_fetchrow($result)){	$del_sql = '';	do	{		$del_sql .= (($del_sql != '') ? ', ' : '') . $row['topic_id'];	}	while ($row = $db->sql_fetchrow($result));	$sql = "DELETE FROM {$table_prefix}topics 		WHERE topic_id IN ($del_sql)";	$db->sql_query($sql);}$db->sql_freeresult($result);$del_sql = '';$sql = "SELECT topic_id, MIN(post_id) AS first_post_id, MAX(post_id) AS last_post_id, COUNT(post_id) AS total_posts 	FROM {$table_prefix}posts 	GROUP BY topic_id";$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$del_sql .= (($del_sql != '') ? ', ' : '') . $row['topic_id'];	$sql = "UPDATE {$table_prefix}topics 		SET topic_first_post_id = " . $row['first_post_id'] . ", topic_last_post_id = " . $row['last_post_id'] . ", topic_replies = " . ($row['total_posts'] - 1) . "		WHERE topic_id = " . $row['topic_id'];	$db->sql_query($sql);}$db->sql_freeresult($result);$sql = "DELETE FROM {$table_prefix}topics WHERE topic_id NOT IN ($del_sql)";$db->sql_query($sql);$topic_count = $post_count = array();$sql = "SELECT forum_id, COUNT(topic_id) AS topics 	FROM {$table_prefix}topics 	GROUP BY forum_id";$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$topic_count[$row['forum_id']] = $row['topics'];}$db->sql_freeresult($result);$sql = "SELECT forum_id, COUNT(post_id) AS posts  	FROM {$table_prefix}posts 	GROUP BY forum_id";$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$post_count[$row['forum_id']] = $row['posts'];}$db->sql_freeresult($result);switch ($db->sql_layer){	case 'oracle':		$sql = "SELECT f.*, p.post_time, p.post_username, u.username, u.user_id			FROM " . $table_prefix . "forums f, " . $table_prefix . "posts p, " . $table_prefix . "users u			WHERE p.post_id = f.forum_last_post_id(+)				AND u.user_id = p.poster_id(+)";		break;	default:		$sql = "SELECT f.forum_id, p.post_time, p.post_username, u.username, u.user_id			FROM ((" . $table_prefix . "forums f			LEFT JOIN " . $table_prefix . "posts p ON p.post_id = f.forum_last_post_id)			LEFT JOIN " . $table_prefix . "users u ON u.user_id = p.poster_id)";		break;}$result = $db->sql_query($sql);$sql_ary = array();while ($row = $db->sql_fetchrow($result)){	$forum_id = $row['forum_id'];	$sql_ary[] = "UPDATE " . $table_prefix . "forums		SET forum_last_poster_id = " . ((!empty($row['user_id']) && $row['user_id'] != ANONYMOUS) ? $row['user_id'] : ANONYMOUS) . ", forum_last_poster_name = '" . ((!empty($row['user_id']) && $row['user_id'] !=  ANONYMOUS) ? addslashes($row['username']) : addslashes($row['post_username'])) . "', forum_last_post_time = " . $row['post_time'] . ", forum_posts = " . (($post_count[$forum_id]) ? $post_count[$forum_id] : 0) . ", forum_topics = " . (($topic_count[$forum_id]) ? $topic_count[$forum_id] : 0) . " 		WHERE forum_id = $forum_id";	$sql = "SELECT t.topic_id, u.username, u.user_id, u2.username as user2, u2.user_id as id2, p.post_username, p2.post_username AS post_username2, p2.post_time		FROM " . $table_prefix . "topics t, " . $table_prefix . "users u, " . $table_prefix . "posts p, " . $table_prefix . "posts p2, " . $table_prefix . "users u2		WHERE t.forum_id = $forum_id 			AND u.user_id = t.topic_poster 			AND p.post_id = t.topic_first_post_id			AND p2.post_id = t.topic_last_post_id			AND u2.user_id = p2.poster_id";	$result2 = $db->sql_query($sql);	while ($row2 = $db->sql_fetchrow($result2))	{		$sql_ary[] = "UPDATE " . $table_prefix . "topics			SET topic_poster = " . $row2['user_id'] . ", topic_first_poster_name = '" . ((!empty($row2['user_id']) && $row2['user_id'] != ANONYMOUS) ? addslashes($row2['username']) : addslashes($row2['post_username'])) . "', topic_last_poster_id = " . ((!empty($row2['id2']) && $row2['id2'] != ANONYMOUS) ? $row2['id2'] : ANONYMOUS) . ", topic_last_post_time = " . $row2['post_time'] . ", topic_last_poster_name = '" . ((!empty($row2['id2']) && $row2['id2'] !=  ANONYMOUS) ? addslashes($row2['user2']) : addslashes($row2['post_username2'])) . "'			WHERE topic_id = " . $row2['topic_id'];	}	$db->sql_freeresult($result2);	unset($row2);}$db->sql_freeresult($result);foreach ($sql_ary as $sql){	$sql . "<br />";	$db->sql_query($sql);}echo "<p><b>Done</b></p>\n"; ?>
<?php/***************************************************************************   *                           merge_clean_posts.php   *                            -------------------                          *   begin                : Tuesday, February 25, 2003  *   copyright            : (C) 2003 The phpBB Group         *   email                : support@phpbb.com                            *                                                           *   $Id$ *  ***************************************************************************/ /***************************************************************************   *                                                      *   This program is free software; you can redistribute it and/or modify     *   it under the terms of the GNU General Public License as published by    *   the Free Software Foundation; either version 2 of the License, or   *   (at your option) any later version.                       *  ***************************************************************************/ //// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");@set_time_limit(2400);// This script adds missing permissions$db = $dbhost = $dbuser = $dbpasswd = $dbport = $dbname = '';define('IN_PHPBB', 1);define('ANONYMOUS', 1);$phpEx = substr(strrchr(__FILE__, '.'), 1);$phpbb_root_path='./../';include($phpbb_root_path . 'config.'.$phpEx);require($phpbb_root_path . 'includes/acm/acm_' . $acm_type . '.'.$phpEx);require($phpbb_root_path . 'includes/db/' . $dbms . '.'.$phpEx);include($phpbb_root_path . 'includes/functions.'.$phpEx);$cache		= new acm();$db			= new $sql_db();// Connect to DB$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false);$sql = "SELECT post_id, post_text FROM {$table_prefix}posts WHERE post_text LIKE '%{SMILE_PATH}%'";$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$db->sql_query("UPDATE {$table_prefix}posts SET post_text = '" . $db->sql_escape(str_replace('{SMILE_PATH}', '{SMILIES_PATH}', $row['post_text'])) . "' WHERE post_id = " . $row['post_id']);}$db->sql_freeresult($result);echo "<p><b>Done</b></p>\n"; ?>
<?php/**** @package dbal* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}include_once($phpbb_root_path . 'includes/db/dbal.' . $phpEx);/*** MySQLi Database Abstraction Layer* mysqli-extension has to be compiled with:* MySQL 4.1+ or MySQL 5.0+* @package dbal*/class dbal_mysqli extends dbal{	var $multi_insert = true;	/**	* Connect to server	*/	function sql_connect($sqlserver, $sqluser, $sqlpassword, $database, $port = false, $persistency = false , $new_link = false)	{		// Mysqli extension supports persistent connection since PHP 5.3.0		$this->persistency = (version_compare(PHP_VERSION, '5.3.0', '>=')) ? $persistency : false;		$this->user = $sqluser;		// If persistent connection, set dbhost to localhost when empty and prepend it with 'p:' prefix		$this->server = ($this->persistency) ? 'p:' . (($sqlserver) ? $sqlserver : 'localhost') : $sqlserver;		$this->dbname = $database;		$port = (!$port) ? NULL : $port;		// If port is set and it is not numeric, most likely mysqli socket is set.		// Try to map it to the $socket parameter.		$socket = NULL;		if ($port)		{			if (is_numeric($port))			{				$port = (int) $port;			}			else			{				$socket = $port;				$port = NULL;			}		}		$this->db_connect_id = @mysqli_connect($this->server, $this->user, $sqlpassword, $this->dbname, $port, $socket);		if ($this->db_connect_id && $this->dbname != '')		{			@mysqli_query($this->db_connect_id, "SET NAMES 'utf8'");			// enforce strict mode on databases that support it			if (version_compare($this->sql_server_info(true), '5.0.2', '>='))			{				$result = @mysqli_query($this->db_connect_id, 'SELECT @@session.sql_mode AS sql_mode');				$row = @mysqli_fetch_assoc($result);				@mysqli_free_result($result);				$modes = array_map('trim', explode(',', $row['sql_mode']));				// TRADITIONAL includes STRICT_ALL_TABLES and STRICT_TRANS_TABLES				if (!in_array('TRADITIONAL', $modes))				{					if (!in_array('STRICT_ALL_TABLES', $modes))					{						$modes[] = 'STRICT_ALL_TABLES';					}					if (!in_array('STRICT_TRANS_TABLES', $modes))					{						$modes[] = 'STRICT_TRANS_TABLES';					}				}				$mode = implode(',', $modes);				@mysqli_query($this->db_connect_id, "SET SESSION sql_mode='{$mode}'");			}			return $this->db_connect_id;		}		return $this->sql_error('');	}	/**	* Version information about used database	* @param bool $use_cache If true, it is safe to retrieve the value from the cache	* @return string sql server version	*/	function sql_server_info($raw = false, $use_cache = true)	{		global $cache;		if (!$use_cache || empty($cache) || ($this->sql_server_version = $cache->get('mysqli_version')) === false)		{			$result = @mysqli_query($this->db_connect_id, 'SELECT VERSION() AS version');			$row = @mysqli_fetch_assoc($result);			@mysqli_free_result($result);			$this->sql_server_version = $row['version'];			if (!empty($cache) && $use_cache)			{				$cache->put('mysqli_version', $this->sql_server_version);			}		}		return ($raw) ? $this->sql_server_version : 'MySQL(i) ' . $this->sql_server_version;	}	/**	* SQL Transaction	* @access private	*/	function _sql_transaction($status = 'begin')	{		switch ($status)		{			case 'begin':				return @mysqli_autocommit($this->db_connect_id, false);			break;			case 'commit':				$result = @mysqli_commit($this->db_connect_id);				@mysqli_autocommit($this->db_connect_id, true);				return $result;			break;			case 'rollback':				$result = @mysqli_rollback($this->db_connect_id);				@mysqli_autocommit($this->db_connect_id, true);				return $result;			break;		}		return true;	}	/**	* Base query method	*	* @param	string	$query		Contains the SQL query which shall be executed	* @param	int		$cache_ttl	Either 0 to avoid caching or the time in seconds which the result shall be kept in cache	* @return	mixed				When casted to bool the returned value returns true on success and false on failure	*	* @access	public	*/	function sql_query($query = '', $cache_ttl = 0)	{		if ($query != '')		{			global $cache;			// EXPLAIN only in extra debug mode			if (defined('DEBUG_EXTRA'))			{				$this->sql_report('start', $query);			}			$this->query_result = ($cache_ttl && method_exists($cache, 'sql_load')) ? $cache->sql_load($query) : false;			$this->sql_add_num_queries($this->query_result);			if ($this->query_result === false)			{				if (($this->query_result = @mysqli_query($this->db_connect_id, $query)) === false)				{					$this->sql_error($query);				}				if (defined('DEBUG_EXTRA'))				{					$this->sql_report('stop', $query);				}				if ($cache_ttl && method_exists($cache, 'sql_save'))				{					$cache->sql_save($query, $this->query_result, $cache_ttl);				}			}			else if (defined('DEBUG_EXTRA'))			{				$this->sql_report('fromcache', $query);			}		}		else		{			return false;		}		return $this->query_result;	}	/**	* Build LIMIT query	*/	function _sql_query_limit($query, $total, $offset = 0, $cache_ttl = 0)	{		$this->query_result = false;		// if $total is set to 0 we do not want to limit the number of rows		if ($total == 0)		{			// MySQL 4.1+ no longer supports -1 in limit queries			$total = '18446744073709551615';		}		$query .= "\n LIMIT " . ((!empty($offset)) ? $offset . ', ' . $total : $total);		return $this->sql_query($query, $cache_ttl);	}	/**	* Return number of affected rows	*/	function sql_affectedrows()	{		return ($this->db_connect_id) ? @mysqli_affected_rows($this->db_connect_id) : false;	}	/**	* Fetch current row	*/	function sql_fetchrow($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (!is_object($query_id) && isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_fetchrow($query_id);		}		if ($query_id !== false)		{			$result = @mysqli_fetch_assoc($query_id);			return $result !== null ? $result : false;		}		return false;	}	/**	* Seek to given row number	* rownum is zero-based	*/	function sql_rowseek($rownum, &$query_id)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (!is_object($query_id) && isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_rowseek($rownum, $query_id);		}		return ($query_id !== false) ? @mysqli_data_seek($query_id, $rownum) : false;	}	/**	* Get last inserted id after insert statement	*/	function sql_nextid()	{		return ($this->db_connect_id) ? @mysqli_insert_id($this->db_connect_id) : false;	}	/**	* Free sql result	*/	function sql_freeresult($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (!is_object($query_id) && isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_freeresult($query_id);		}		return @mysqli_free_result($query_id);	}	/**	* Escape string used in sql query	*/	function sql_escape($msg)	{		return @mysqli_real_escape_string($this->db_connect_id, $msg);	}	/**	* Build LIKE expression	* @access private	*/	function _sql_like_expression($expression)	{		return $expression;	}	/**	* Build db-specific query data	* @access private	*/	function _sql_custom_build($stage, $data)	{		switch ($stage)		{			case 'FROM':				$data = '(' . $data . ')';			break;		}		return $data;	}	/**	* return sql error array	* @access private	*/	function _sql_error()	{		if (!$this->db_connect_id)		{			return array(				'message'	=> @mysqli_connect_error(),				'code'		=> @mysqli_connect_errno()			);		}		return array(			'message'	=> @mysqli_error($this->db_connect_id),			'code'		=> @mysqli_errno($this->db_connect_id)		);	}	/**	* Close sql connection	* @access private	*/	function _sql_close()	{		return @mysqli_close($this->db_connect_id);	}	/**	* Build db-specific report	* @access private	*/	function _sql_report($mode, $query = '')	{		static $test_prof;		// current detection method, might just switch to see the existance of INFORMATION_SCHEMA.PROFILING		if ($test_prof === null)		{			$test_prof = false;			if (strpos(mysqli_get_server_info($this->db_connect_id), 'community') !== false)			{				$ver = mysqli_get_server_version($this->db_connect_id);				if ($ver >= 50037 && $ver < 50100)				{					$test_prof = true;				}			}		}		switch ($mode)		{			case 'start':				$explain_query = $query;				if (preg_match('/UPDATE ([a-z0-9_]+).*?WHERE(.*)/s', $query, $m))				{					$explain_query = 'SELECT * FROM ' . $m[1] . ' WHERE ' . $m[2];				}				else if (preg_match('/DELETE FROM ([a-z0-9_]+).*?WHERE(.*)/s', $query, $m))				{					$explain_query = 'SELECT * FROM ' . $m[1] . ' WHERE ' . $m[2];				}				if (preg_match('/^SELECT/', $explain_query))				{					$html_table = false;					// begin profiling					if ($test_prof)					{						@mysqli_query($this->db_connect_id, 'SET profiling = 1;');					}					if ($result = @mysqli_query($this->db_connect_id, "EXPLAIN $explain_query"))					{						while ($row = @mysqli_fetch_assoc($result))						{							$html_table = $this->sql_report('add_select_row', $query, $html_table, $row);						}					}					@mysqli_free_result($result);					if ($html_table)					{						$this->html_hold .= '</table>';					}					if ($test_prof)					{						$html_table = false;						// get the last profile						if ($result = @mysqli_query($this->db_connect_id, 'SHOW PROFILE ALL;'))						{							$this->html_hold .= '<br />';							while ($row = @mysqli_fetch_assoc($result))							{								// make <unknown> HTML safe								if (!empty($row['Source_function']))								{									$row['Source_function'] = str_replace(array('<', '>'), array('&lt;', '&gt;'), $row['Source_function']);								}								// remove unsupported features								foreach ($row as $key => $val)								{									if ($val === null)									{										unset($row[$key]);									}								}								$html_table = $this->sql_report('add_select_row', $query, $html_table, $row);							}						}						@mysqli_free_result($result);						if ($html_table)						{							$this->html_hold .= '</table>';						}						@mysqli_query($this->db_connect_id, 'SET profiling = 0;');					}				}			break;			case 'fromcache':				$endtime = explode(' ', microtime());				$endtime = $endtime[0] + $endtime[1];				$result = @mysqli_query($this->db_connect_id, $query);				while ($void = @mysqli_fetch_assoc($result))				{					// Take the time spent on parsing rows into account				}				@mysqli_free_result($result);				$splittime = explode(' ', microtime());				$splittime = $splittime[0] + $splittime[1];				$this->sql_report('record_fromcache', $query, $endtime, $splittime);			break;		}	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_users{	var $u_action;	var $p_master;	function acp_users(&$p_master)	{		$this->p_master = &$p_master;	}	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $table_prefix, $file_uploads;		$user->add_lang(array('posting', 'ucp', 'acp/users'));		$this->tpl_name = 'acp_users';		$this->page_title = 'ACP_USER_' . strtoupper($mode);		$error		= array();		$username	= utf8_normalize_nfc(request_var('username', '', true));		$user_id	= request_var('u', 0);		$action		= request_var('action', '');		$submit		= (isset($_POST['update']) && !isset($_POST['cancel'])) ? true : false;		$form_name = 'acp_users';		add_form_key($form_name);		// Whois (special case)		if ($action == 'whois')		{			include($phpbb_root_path . 'includes/functions_user.' . $phpEx);			$this->page_title = 'WHOIS';			$this->tpl_name = 'simple_body';			$user_ip = request_var('user_ip', '');			$domain = gethostbyaddr($user_ip);			$ipwhois = user_ipwhois($user_ip);			$template->assign_vars(array(				'MESSAGE_TITLE'		=> sprintf($user->lang['IP_WHOIS_FOR'], $domain),				'MESSAGE_TEXT'		=> nl2br($ipwhois))			);			return;		}		// Show user selection mask		if (!$username && !$user_id)		{			$this->page_title = 'SELECT_USER';			$template->assign_vars(array(				'U_ACTION'			=> $this->u_action,				'ANONYMOUS_USER_ID'	=> ANONYMOUS,				'S_SELECT_USER'		=> true,				'U_FIND_USERNAME'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=select_user&amp;field=username&amp;select_single=true'),			));			return;		}		if (!$user_id)		{			$sql = 'SELECT user_id				FROM ' . USERS_TABLE . "				WHERE username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";			$result = $db->sql_query($sql);			$user_id = (int) $db->sql_fetchfield('user_id');			$db->sql_freeresult($result);			if (!$user_id)			{				trigger_error($user->lang['NO_USER'] . adm_back_link($this->u_action), E_USER_WARNING);			}		}		// Generate content for all modes		$sql = 'SELECT u.*, s.*			FROM ' . USERS_TABLE . ' u				LEFT JOIN ' . SESSIONS_TABLE . ' s ON (s.session_user_id = u.user_id)			WHERE u.user_id = ' . $user_id . '			ORDER BY s.session_time DESC';		$result = $db->sql_query_limit($sql, 1);		$user_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$user_row)		{			trigger_error($user->lang['NO_USER'] . adm_back_link($this->u_action), E_USER_WARNING);		}		// Generate overall "header" for user admin		$s_form_options = '';		// Build modes dropdown list		$sql = 'SELECT module_mode, module_auth			FROM ' . MODULES_TABLE . "			WHERE module_basename = 'users'				AND module_enabled = 1				AND module_class = 'acp'			ORDER BY left_id, module_mode";		$result = $db->sql_query($sql);		$dropdown_modes = array();		while ($row = $db->sql_fetchrow($result))		{			if (!$this->p_master->module_auth($row['module_auth']))			{				continue;			}			$dropdown_modes[$row['module_mode']] = true;		}		$db->sql_freeresult($result);		foreach ($dropdown_modes as $module_mode => $null)		{			$selected = ($mode == $module_mode) ? ' selected="selected"' : '';			$s_form_options .= '<option value="' . $module_mode . '"' . $selected . '>' . $user->lang['ACP_USER_' . strtoupper($module_mode)] . '</option>';		}		$template->assign_vars(array(			'U_BACK'			=> $this->u_action,			'U_MODE_SELECT'		=> append_sid("{$phpbb_admin_path}index.$phpEx", "i=$id&amp;u=$user_id"),			'U_ACTION'			=> $this->u_action . '&amp;u=' . $user_id,			'S_FORM_OPTIONS'	=> $s_form_options,			'MANAGED_USERNAME'	=> $user_row['username'])		);		// Prevent normal users/admins change/view founders if they are not a founder by themselves		if ($user->data['user_type'] != USER_FOUNDER && $user_row['user_type'] == USER_FOUNDER)		{			trigger_error($user->lang['NOT_MANAGE_FOUNDER'] . adm_back_link($this->u_action), E_USER_WARNING);		}		switch ($mode)		{			case 'overview':				include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$user->add_lang('acp/ban');				$delete			= request_var('delete', 0);				$delete_type	= request_var('delete_type', '');				$ip				= request_var('ip', 'ip');				if ($submit)				{					// You can't delete the founder					if ($delete && $user_row['user_type'] != USER_FOUNDER)					{						if (!$auth->acl_get('a_userdel'))						{							trigger_error($user->lang['NO_AUTH_OPERATION'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);						}						// Check if the user wants to remove himself or the guest user account						if ($user_id == ANONYMOUS)						{							trigger_error($user->lang['CANNOT_REMOVE_ANONYMOUS'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);						}						if ($user_id == $user->data['user_id'])						{							trigger_error($user->lang['CANNOT_REMOVE_YOURSELF'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);						}						if ($delete_type)						{							if (confirm_box(true))							{								user_delete($delete_type, $user_id, $user_row['username']);								add_log('admin', 'LOG_USER_DELETED', $user_row['username']);								trigger_error($user->lang['USER_DELETED'] . adm_back_link($this->u_action));							}							else							{								confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(									'u'				=> $user_id,									'i'				=> $id,									'mode'			=> $mode,									'action'		=> $action,									'update'		=> true,									'delete'		=> 1,									'delete_type'	=> $delete_type))								);							}						}						else						{							trigger_error($user->lang['NO_MODE'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);						}					}					// Handle quicktool actions					switch ($action)					{						case 'banuser':						case 'banemail':						case 'banip':							if ($user_id == $user->data['user_id'])							{								trigger_error($user->lang['CANNOT_BAN_YOURSELF'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($user_id == ANONYMOUS)							{								trigger_error($user->lang['CANNOT_BAN_ANONYMOUS'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($user_row['user_type'] == USER_FOUNDER)							{								trigger_error($user->lang['CANNOT_BAN_FOUNDER'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if (!check_form_key($form_name))							{								trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							$ban = array();							switch ($action)							{								case 'banuser':									$ban[] = $user_row['username'];									$reason = 'USER_ADMIN_BAN_NAME_REASON';									$log = 'LOG_USER_BAN_USER';								break;								case 'banemail':									$ban[] = $user_row['user_email'];									$reason = 'USER_ADMIN_BAN_EMAIL_REASON';									$log = 'LOG_USER_BAN_EMAIL';								break;								case 'banip':									$ban[] = $user_row['user_ip'];									$sql = 'SELECT DISTINCT poster_ip										FROM ' . POSTS_TABLE . "										WHERE poster_id = $user_id";									$result = $db->sql_query($sql);									while ($row = $db->sql_fetchrow($result))									{										$ban[] = $row['poster_ip'];									}									$db->sql_freeresult($result);									$reason = 'USER_ADMIN_BAN_IP_REASON';									$log = 'LOG_USER_BAN_IP';								break;							}							$ban_reason = utf8_normalize_nfc(request_var('ban_reason', $user->lang[$reason], true));							$ban_give_reason = utf8_normalize_nfc(request_var('ban_give_reason', '', true));							// Log not used at the moment, we simply utilize the ban function.							$result = user_ban(substr($action, 3), $ban, 0, 0, 0, $ban_reason, $ban_give_reason);							trigger_error((($result === false) ? $user->lang['BAN_ALREADY_ENTERED'] : $user->lang['BAN_SUCCESSFUL']) . adm_back_link($this->u_action . '&amp;u=' . $user_id));						break;						case 'reactivate':							if ($user_id == $user->data['user_id'])							{								trigger_error($user->lang['CANNOT_FORCE_REACT_YOURSELF'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if (!check_form_key($form_name))							{								trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($user_row['user_type'] == USER_FOUNDER)							{								trigger_error($user->lang['CANNOT_FORCE_REACT_FOUNDER'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($user_row['user_type'] == USER_IGNORE)							{								trigger_error($user->lang['CANNOT_FORCE_REACT_BOT'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($config['email_enable'])							{								include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);								$server_url = generate_board_url();								$user_actkey = gen_rand_string(mt_rand(6, 10));								$email_template = ($user_row['user_type'] == USER_NORMAL) ? 'user_reactivate_account' : 'user_resend_inactive';								if ($user_row['user_type'] == USER_NORMAL)								{									user_active_flip('deactivate', $user_id, INACTIVE_REMIND);									$sql = 'UPDATE ' . USERS_TABLE . "										SET user_actkey = '" . $db->sql_escape($user_actkey) . "'										WHERE user_id = $user_id";									$db->sql_query($sql);								}								else								{									// Grabbing the last confirm key - we only send a reminder									$sql = 'SELECT user_actkey										FROM ' . USERS_TABLE . '										WHERE user_id = ' . $user_id;									$result = $db->sql_query($sql);									$user_actkey = (string) $db->sql_fetchfield('user_actkey');									$db->sql_freeresult($result);								}								$messenger = new messenger(false);								$messenger->template($email_template, $user_row['user_lang']);								$messenger->to($user_row['user_email'], $user_row['username']);								$messenger->anti_abuse_headers($config, $user);								$messenger->assign_vars(array(									'WELCOME_MSG'	=> htmlspecialchars_decode(sprintf($user->lang['WELCOME_SUBJECT'], $config['sitename'])),									'USERNAME'		=> htmlspecialchars_decode($user_row['username']),									'U_ACTIVATE'	=> "$server_url/ucp.$phpEx?mode=activate&u={$user_row['user_id']}&k=$user_actkey")								);								$messenger->send(NOTIFY_EMAIL);								add_log('admin', 'LOG_USER_REACTIVATE', $user_row['username']);								add_log('user', $user_id, 'LOG_USER_REACTIVATE_USER');								trigger_error($user->lang['FORCE_REACTIVATION_SUCCESS'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));							}						break;						case 'active':							if ($user_id == $user->data['user_id'])							{								// It is only deactivation since the user is already activated (else he would not have reached this page)								trigger_error($user->lang['CANNOT_DEACTIVATE_YOURSELF'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if (!check_form_key($form_name))							{								trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($user_row['user_type'] == USER_FOUNDER)							{								trigger_error($user->lang['CANNOT_DEACTIVATE_FOUNDER'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($user_row['user_type'] == USER_IGNORE)							{								trigger_error($user->lang['CANNOT_DEACTIVATE_BOT'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							user_active_flip('flip', $user_id);							if ($user_row['user_type'] == USER_INACTIVE)							{								if ($config['require_activation'] == USER_ACTIVATION_ADMIN)								{									include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);									$messenger = new messenger(false);									$messenger->template('admin_welcome_activated', $user_row['user_lang']);									$messenger->to($user_row['user_email'], $user_row['username']);									$messenger->anti_abuse_headers($config, $user);									$messenger->assign_vars(array(										'USERNAME'	=> htmlspecialchars_decode($user_row['username']))									);									$messenger->send(NOTIFY_EMAIL);								}							}							$message = ($user_row['user_type'] == USER_INACTIVE) ? 'USER_ADMIN_ACTIVATED' : 'USER_ADMIN_DEACTIVED';							$log = ($user_row['user_type'] == USER_INACTIVE) ? 'LOG_USER_ACTIVE' : 'LOG_USER_INACTIVE';							add_log('admin', $log, $user_row['username']);							add_log('user', $user_id, $log . '_USER');							trigger_error($user->lang[$message] . adm_back_link($this->u_action . '&amp;u=' . $user_id));						break;						case 'delsig':							if (!check_form_key($form_name))							{								trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							$sql_ary = array(								'user_sig'					=> '',								'user_sig_bbcode_uid'		=> '',								'user_sig_bbcode_bitfield'	=> ''							);							$sql = 'UPDATE ' . USERS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "								WHERE user_id = $user_id";							$db->sql_query($sql);							add_log('admin', 'LOG_USER_DEL_SIG', $user_row['username']);							add_log('user', $user_id, 'LOG_USER_DEL_SIG_USER');							trigger_error($user->lang['USER_ADMIN_SIG_REMOVED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));						break;						case 'delavatar':							if (!check_form_key($form_name))							{								trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							$sql_ary = array(								'user_avatar'			=> '',								'user_avatar_type'		=> 0,								'user_avatar_width'		=> 0,								'user_avatar_height'	=> 0,							);							$sql = 'UPDATE ' . USERS_TABLE . '								SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "								WHERE user_id = $user_id";							$db->sql_query($sql);							// Delete old avatar if present							if ($user_row['user_avatar'] && $user_row['user_avatar_type'] != AVATAR_GALLERY)							{								avatar_delete('user', $user_row);							}							add_log('admin', 'LOG_USER_DEL_AVATAR', $user_row['username']);							add_log('user', $user_id, 'LOG_USER_DEL_AVATAR_USER');							trigger_error($user->lang['USER_ADMIN_AVATAR_REMOVED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));						break;						case 'delposts':							if (confirm_box(true))							{								// Delete posts, attachments, etc.								delete_posts('poster_id', $user_id);								add_log('admin', 'LOG_USER_DEL_POSTS', $user_row['username']);								trigger_error($user->lang['USER_POSTS_DELETED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));							}							else							{								confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(									'u'				=> $user_id,									'i'				=> $id,									'mode'			=> $mode,									'action'		=> $action,									'update'		=> true))								);							}						break;						case 'delattach':							if (confirm_box(true))							{								delete_attachments('user', $user_id);								add_log('admin', 'LOG_USER_DEL_ATTACH', $user_row['username']);								trigger_error($user->lang['USER_ATTACHMENTS_REMOVED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));							}							else							{								confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(									'u'				=> $user_id,									'i'				=> $id,									'mode'			=> $mode,									'action'		=> $action,									'update'		=> true))								);							}						break;						case 'deloutbox':							if (confirm_box(true))							{								$msg_ids = array();								$lang = 'EMPTY';								$sql = 'SELECT msg_id									FROM ' . PRIVMSGS_TO_TABLE . "									WHERE author_id = $user_id										AND folder_id = " . PRIVMSGS_OUTBOX;								$result = $db->sql_query($sql);								if ($row = $db->sql_fetchrow($result))								{									if (!function_exists('delete_pm'))									{										include($phpbb_root_path . 'includes/functions_privmsgs.' . $phpEx);									}									do									{										$msg_ids[] = (int) $row['msg_id'];									}									while ($row = $db->sql_fetchrow($result));									$db->sql_freeresult($result);									delete_pm($user_id, $msg_ids, PRIVMSGS_OUTBOX);									add_log('admin', 'LOG_USER_DEL_OUTBOX', $user_row['username']);									$lang = 'EMPTIED';								}								$db->sql_freeresult($result);								trigger_error($user->lang['USER_OUTBOX_' . $lang] . adm_back_link($this->u_action . '&amp;u=' . $user_id));							}							else							{								confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(									'u'				=> $user_id,									'i'				=> $id,									'mode'			=> $mode,									'action'		=> $action,									'update'		=> true))								);							}						break;						case 'moveposts':							if (!check_form_key($form_name))							{								trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							$user->add_lang('acp/forums');							$new_forum_id = request_var('new_f', 0);							if (!$new_forum_id)							{								$this->page_title = 'USER_ADMIN_MOVE_POSTS';								$template->assign_vars(array(									'S_SELECT_FORUM'		=> true,									'U_ACTION'				=> $this->u_action . "&amp;action=$action&amp;u=$user_id",									'U_BACK'				=> $this->u_action . "&amp;u=$user_id",									'S_FORUM_OPTIONS'		=> make_forum_select(false, false, false, true))								);								return;							}							// Is the new forum postable to?							$sql = 'SELECT forum_name, forum_type								FROM ' . FORUMS_TABLE . "								WHERE forum_id = $new_forum_id";							$result = $db->sql_query($sql);							$forum_info = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							if (!$forum_info)							{								trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($forum_info['forum_type'] != FORUM_POST)							{								trigger_error($user->lang['MOVE_POSTS_NO_POSTABLE_FORUM'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							// Two stage?							// Move topics comprising only posts from this user							$topic_id_ary = $move_topic_ary = $move_post_ary = $new_topic_id_ary = array();							$forum_id_ary = array($new_forum_id);							$sql = 'SELECT topic_id, COUNT(post_id) AS total_posts								FROM ' . POSTS_TABLE . "								WHERE poster_id = $user_id									AND forum_id <> $new_forum_id								GROUP BY topic_id";							$result = $db->sql_query($sql);							while ($row = $db->sql_fetchrow($result))							{								$topic_id_ary[$row['topic_id']] = $row['total_posts'];							}							$db->sql_freeresult($result);							if (sizeof($topic_id_ary))							{								$sql = 'SELECT topic_id, forum_id, topic_title, topic_replies, topic_replies_real, topic_attachment									FROM ' . TOPICS_TABLE . '									WHERE ' . $db->sql_in_set('topic_id', array_keys($topic_id_ary));								$result = $db->sql_query($sql);								while ($row = $db->sql_fetchrow($result))								{									if (max($row['topic_replies'], $row['topic_replies_real']) + 1 == $topic_id_ary[$row['topic_id']])									{										$move_topic_ary[] = $row['topic_id'];									}									else									{										$move_post_ary[$row['topic_id']]['title'] = $row['topic_title'];										$move_post_ary[$row['topic_id']]['attach'] = ($row['topic_attachment']) ? 1 : 0;									}									$forum_id_ary[] = $row['forum_id'];								}								$db->sql_freeresult($result);							}							// Entire topic comprises posts by this user, move these topics							if (sizeof($move_topic_ary))							{								move_topics($move_topic_ary, $new_forum_id, false);							}							if (sizeof($move_post_ary))							{								// Create new topic								// Update post_ids, report_ids, attachment_ids								foreach ($move_post_ary as $topic_id => $post_ary)								{									// Create new topic									$sql = 'INSERT INTO ' . TOPICS_TABLE . ' ' . $db->sql_build_array('INSERT', array(										'topic_poster'				=> $user_id,										'topic_time'				=> time(),										'forum_id' 					=> $new_forum_id,										'icon_id'					=> 0,										'topic_approved'			=> 1,										'topic_title' 				=> $post_ary['title'],										'topic_first_poster_name'	=> $user_row['username'],										'topic_type'				=> POST_NORMAL,										'topic_time_limit'			=> 0,										'topic_attachment'			=> $post_ary['attach'])									);									$db->sql_query($sql);									$new_topic_id = $db->sql_nextid();									// Move posts									$sql = 'UPDATE ' . POSTS_TABLE . "										SET forum_id = $new_forum_id, topic_id = $new_topic_id										WHERE topic_id = $topic_id											AND poster_id = $user_id";									$db->sql_query($sql);									if ($post_ary['attach'])									{										$sql = 'UPDATE ' . ATTACHMENTS_TABLE . "											SET topic_id = $new_topic_id											WHERE topic_id = $topic_id												AND poster_id = $user_id";										$db->sql_query($sql);									}									$new_topic_id_ary[] = $new_topic_id;								}							}							$forum_id_ary = array_unique($forum_id_ary);							$topic_id_ary = array_unique(array_merge(array_keys($topic_id_ary), $new_topic_id_ary));							if (sizeof($topic_id_ary))							{								sync('topic_reported', 'topic_id', $topic_id_ary);								sync('topic', 'topic_id', $topic_id_ary);							}							if (sizeof($forum_id_ary))							{								sync('forum', 'forum_id', $forum_id_ary, false, true);							}							add_log('admin', 'LOG_USER_MOVE_POSTS', $user_row['username'], $forum_info['forum_name']);							add_log('user', $user_id, 'LOG_USER_MOVE_POSTS_USER', $forum_info['forum_name']);							trigger_error($user->lang['USER_POSTS_MOVED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));						break;						case 'leave_nr':							if (confirm_box(true))							{								remove_newly_registered($user_id, $user_row);								add_log('admin', 'LOG_USER_REMOVED_NR', $user_row['username']);								trigger_error($user->lang['USER_LIFTED_NR'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));							}							else							{								confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(									'u'				=> $user_id,									'i'				=> $id,									'mode'			=> $mode,									'action'		=> $action,									'update'		=> true))								);							}						break;					}					// Handle registration info updates					$data = array(						'username'			=> utf8_normalize_nfc(request_var('user', $user_row['username'], true)),						'user_founder'		=> request_var('user_founder', ($user_row['user_type'] == USER_FOUNDER) ? 1 : 0),						'email'				=> strtolower(request_var('user_email', $user_row['user_email'])),						'email_confirm'		=> strtolower(request_var('email_confirm', '')),						'new_password'		=> request_var('new_password', '', true),						'password_confirm'	=> request_var('password_confirm', '', true),					);					// Validation data - we do not check the password complexity setting here					$check_ary = array(						'new_password'		=> array(							array('string', true, $config['min_pass_chars'], $config['max_pass_chars']),							array('password')),						'password_confirm'	=> array('string', true, $config['min_pass_chars'], $config['max_pass_chars']),					);					// Check username if altered					if ($data['username'] != $user_row['username'])					{						$check_ary += array(							'username'			=> array(								array('string', false, $config['min_name_chars'], $config['max_name_chars']),								array('username', $user_row['username'])							),						);					}					// Check email if altered					if ($data['email'] != $user_row['user_email'])					{						$check_ary += array(							'email'				=> array(								array('string', false, 6, 60),								array('email', $user_row['user_email'])							),							'email_confirm'		=> array('string', true, 6, 60)						);					}					$error = validate_data($data, $check_ary);					if ($data['new_password'] && $data['password_confirm'] != $data['new_password'])					{						$error[] = 'NEW_PASSWORD_ERROR';					}					if ($data['email'] != $user_row['user_email'] && $data['email_confirm'] != $data['email'])					{						$error[] = 'NEW_EMAIL_ERROR';					}					if (!check_form_key($form_name))					{						$error[] = 'FORM_INVALID';					}					// Which updates do we need to do?					$update_username = ($user_row['username'] != $data['username']) ? $data['username'] : false;					$update_password = ($data['new_password'] && !phpbb_check_hash($data['new_password'], $user_row['user_password'])) ? true : false;					$update_email = ($data['email'] != $user_row['user_email']) ? $data['email'] : false;					if (!sizeof($error))					{						$sql_ary = array();						if ($user_row['user_type'] != USER_FOUNDER || $user->data['user_type'] == USER_FOUNDER)						{							// Only allow founders updating the founder status...							if ($user->data['user_type'] == USER_FOUNDER)							{								// Setting a normal member to be a founder								if ($data['user_founder'] && $user_row['user_type'] != USER_FOUNDER)								{									// Make sure the user is not setting an Inactive or ignored user to be a founder									if ($user_row['user_type'] == USER_IGNORE)									{										trigger_error($user->lang['CANNOT_SET_FOUNDER_IGNORED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);									}									if ($user_row['user_type'] == USER_INACTIVE)									{										trigger_error($user->lang['CANNOT_SET_FOUNDER_INACTIVE'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);									}									$sql_ary['user_type'] = USER_FOUNDER;								}								else if (!$data['user_founder'] && $user_row['user_type'] == USER_FOUNDER)								{									// Check if at least one founder is present									$sql = 'SELECT user_id										FROM ' . USERS_TABLE . '										WHERE user_type = ' . USER_FOUNDER . '											AND user_id <> ' . $user_id;									$result = $db->sql_query_limit($sql, 1);									$row = $db->sql_fetchrow($result);									$db->sql_freeresult($result);									if ($row)									{										$sql_ary['user_type'] = USER_NORMAL;									}									else									{										trigger_error($user->lang['AT_LEAST_ONE_FOUNDER'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);									}								}							}						}						if ($update_username !== false)						{							$sql_ary['username'] = $update_username;							$sql_ary['username_clean'] = utf8_clean_string($update_username);							add_log('user', $user_id, 'LOG_USER_UPDATE_NAME', $user_row['username'], $update_username);						}						if ($update_email !== false)						{							$sql_ary += array(								'user_email'		=> $update_email,								'user_email_hash'	=> phpbb_email_hash($update_email),							);							add_log('user', $user_id, 'LOG_USER_UPDATE_EMAIL', $user_row['username'], $user_row['user_email'], $update_email);						}						if ($update_password)						{							$sql_ary += array(								'user_password'		=> phpbb_hash($data['new_password']),								'user_passchg'		=> time(),								'user_pass_convert'	=> 0,							);							$user->reset_login_keys($user_id);							add_log('user', $user_id, 'LOG_USER_NEW_PASSWORD', $user_row['username']);						}						if (sizeof($sql_ary))						{							$sql = 'UPDATE ' . USERS_TABLE . '								SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '								WHERE user_id = ' . $user_id;							$db->sql_query($sql);						}						if ($update_username)						{							user_update_name($user_row['username'], $update_username);						}						// Let the users permissions being updated						$auth->acl_clear_prefetch($user_id);						add_log('admin', 'LOG_USER_USER_UPDATE', $data['username']);						trigger_error($user->lang['USER_OVERVIEW_UPDATED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				if ($user_id == $user->data['user_id'])				{					$quick_tool_ary = array('delsig' => 'DEL_SIG', 'delavatar' => 'DEL_AVATAR', 'moveposts' => 'MOVE_POSTS', 'delposts' => 'DEL_POSTS', 'delattach' => 'DEL_ATTACH', 'deloutbox' => 'DEL_OUTBOX');					if ($user_row['user_new'])					{						$quick_tool_ary['leave_nr'] = 'LEAVE_NR';					}				}				else				{					$quick_tool_ary = array();					if ($user_row['user_type'] != USER_FOUNDER)					{						$quick_tool_ary += array('banuser' => 'BAN_USER', 'banemail' => 'BAN_EMAIL', 'banip' => 'BAN_IP');					}					if ($user_row['user_type'] != USER_FOUNDER && $user_row['user_type'] != USER_IGNORE)					{						$quick_tool_ary += array('active' => (($user_row['user_type'] == USER_INACTIVE) ? 'ACTIVATE' : 'DEACTIVATE'));					}					$quick_tool_ary += array('delsig' => 'DEL_SIG', 'delavatar' => 'DEL_AVATAR', 'moveposts' => 'MOVE_POSTS', 'delposts' => 'DEL_POSTS', 'delattach' => 'DEL_ATTACH', 'deloutbox' => 'DEL_OUTBOX');					if ($config['email_enable'] && ($user_row['user_type'] == USER_NORMAL || $user_row['user_type'] == USER_INACTIVE))					{						$quick_tool_ary['reactivate'] = 'FORCE';					}					if ($user_row['user_new'])					{						$quick_tool_ary['leave_nr'] = 'LEAVE_NR';					}				}				$s_action_options = '<option class="sep" value="">' . $user->lang['SELECT_OPTION'] . '</option>';				foreach ($quick_tool_ary as $value => $lang)				{					$s_action_options .= '<option value="' . $value . '">' . $user->lang['USER_ADMIN_' . $lang] . '</option>';				}				if ($config['load_onlinetrack'])				{					$sql = 'SELECT MAX(session_time) AS session_time, MIN(session_viewonline) AS session_viewonline						FROM ' . SESSIONS_TABLE . "						WHERE session_user_id = $user_id";					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					$user_row['session_time'] = (isset($row['session_time'])) ? $row['session_time'] : 0;					$user_row['session_viewonline'] = (isset($row['session_viewonline'])) ? $row['session_viewonline'] : 0;					unset($row);				}				$last_visit = (!empty($user_row['session_time'])) ? $user_row['session_time'] : $user_row['user_lastvisit'];				$inactive_reason = '';				if ($user_row['user_type'] == USER_INACTIVE)				{					$inactive_reason = $user->lang['INACTIVE_REASON_UNKNOWN'];					switch ($user_row['user_inactive_reason'])					{						case INACTIVE_REGISTER:							$inactive_reason = $user->lang['INACTIVE_REASON_REGISTER'];						break;						case INACTIVE_PROFILE:							$inactive_reason = $user->lang['INACTIVE_REASON_PROFILE'];						break;						case INACTIVE_MANUAL:							$inactive_reason = $user->lang['INACTIVE_REASON_MANUAL'];						break;						case INACTIVE_REMIND:							$inactive_reason = $user->lang['INACTIVE_REASON_REMIND'];						break;					}				}				// Posts in Queue				$sql = 'SELECT COUNT(post_id) as posts_in_queue					FROM ' . POSTS_TABLE . '					WHERE poster_id = ' . $user_id . '						AND post_approved = 0';				$result = $db->sql_query($sql);				$user_row['posts_in_queue'] = (int) $db->sql_fetchfield('posts_in_queue');				$db->sql_freeresult($result);				$template->assign_vars(array(					'L_NAME_CHARS_EXPLAIN'		=> sprintf($user->lang[$config['allow_name_chars'] . '_EXPLAIN'], $config['min_name_chars'], $config['max_name_chars']),					'L_CHANGE_PASSWORD_EXPLAIN'	=> sprintf($user->lang[$config['pass_complex'] . '_EXPLAIN'], $config['min_pass_chars'], $config['max_pass_chars']),					'L_POSTS_IN_QUEUE'			=> $user->lang('NUM_POSTS_IN_QUEUE', $user_row['posts_in_queue']),					'S_FOUNDER'					=> ($user->data['user_type'] == USER_FOUNDER) ? true : false,					'S_OVERVIEW'		=> true,					'S_USER_IP'			=> ($user_row['user_ip']) ? true : false,					'S_USER_FOUNDER'	=> ($user_row['user_type'] == USER_FOUNDER) ? true : false,					'S_ACTION_OPTIONS'	=> $s_action_options,					'S_OWN_ACCOUNT'		=> ($user_id == $user->data['user_id']) ? true : false,					'S_USER_INACTIVE'	=> ($user_row['user_type'] == USER_INACTIVE) ? true : false,					'U_SHOW_IP'		=> $this->u_action . "&amp;u=$user_id&amp;ip=" . (($ip == 'ip') ? 'hostname' : 'ip'),					'U_WHOIS'		=> $this->u_action . "&amp;action=whois&amp;user_ip={$user_row['user_ip']}",					'U_MCP_QUEUE'	=> ($auth->acl_getf_global('m_approve')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue', true, $user->session_id) : '',					'U_SWITCH_PERMISSIONS'	=> ($auth->acl_get('a_switchperm') && $user->data['user_id'] != $user_row['user_id']) ? append_sid("{$phpbb_root_path}ucp.$phpEx", "mode=switch_perm&amp;u={$user_row['user_id']}&amp;hash=" . generate_link_hash('switchperm')) : '',					'POSTS_IN_QUEUE'	=> $user_row['posts_in_queue'],					'USER'				=> $user_row['username'],					'USER_REGISTERED'	=> $user->format_date($user_row['user_regdate']),					'REGISTERED_IP'		=> ($ip == 'hostname') ? gethostbyaddr($user_row['user_ip']) : $user_row['user_ip'],					'USER_LASTACTIVE'	=> ($last_visit) ? $user->format_date($last_visit) : ' - ',					'USER_EMAIL'		=> $user_row['user_email'],					'USER_WARNINGS'		=> $user_row['user_warnings'],					'USER_POSTS'		=> $user_row['user_posts'],					'USER_INACTIVE_REASON'	=> $inactive_reason,				));			break;			case 'feedback':				$user->add_lang('mcp');				// Set up general vars				$start		= request_var('start', 0);				$deletemark = (isset($_POST['delmarked'])) ? true : false;				$deleteall	= (isset($_POST['delall'])) ? true : false;				$marked		= request_var('mark', array(0));				$message	= utf8_normalize_nfc(request_var('message', '', true));				// Sort keys				$sort_days	= request_var('st', 0);				$sort_key	= request_var('sk', 't');				$sort_dir	= request_var('sd', 'd');				// Delete entries if requested and able				if (($deletemark || $deleteall) && $auth->acl_get('a_clearlogs'))				{					if (!check_form_key($form_name))					{						trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					$where_sql = '';					if ($deletemark && $marked)					{						$sql_in = array();						foreach ($marked as $mark)						{							$sql_in[] = $mark;						}						$where_sql = ' AND ' . $db->sql_in_set('log_id', $sql_in);						unset($sql_in);					}					if ($where_sql || $deleteall)					{						$sql = 'DELETE FROM ' . LOG_TABLE . '							WHERE log_type = ' . LOG_USERS . "							AND reportee_id = $user_id							$where_sql";						$db->sql_query($sql);						add_log('admin', 'LOG_CLEAR_USER', $user_row['username']);					}				}				if ($submit && $message)				{					if (!check_form_key($form_name))					{						trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					add_log('admin', 'LOG_USER_FEEDBACK', $user_row['username']);					add_log('mod', 0, 0, 'LOG_USER_FEEDBACK', $user_row['username']);					add_log('user', $user_id, 'LOG_USER_GENERAL', $message);					trigger_error($user->lang['USER_FEEDBACK_ADDED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));				}				// Sorting				$limit_days = array(0 => $user->lang['ALL_ENTRIES'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);				$sort_by_text = array('u' => $user->lang['SORT_USERNAME'], 't' => $user->lang['SORT_DATE'], 'i' => $user->lang['SORT_IP'], 'o' => $user->lang['SORT_ACTION']);				$sort_by_sql = array('u' => 'u.username_clean', 't' => 'l.log_time', 'i' => 'l.log_ip', 'o' => 'l.log_operation');				$s_limit_days = $s_sort_key = $s_sort_dir = $u_sort_param = '';				gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);				// Define where and sort sql for use in displaying logs				$sql_where = ($sort_days) ? (time() - ($sort_days * 86400)) : 0;				$sql_sort = $sort_by_sql[$sort_key] . ' ' . (($sort_dir == 'd') ? 'DESC' : 'ASC');				// Grab log data				$log_data = array();				$log_count = 0;				$start = view_log('user', $log_data, $log_count, $config['topics_per_page'], $start, 0, 0, $user_id, $sql_where, $sql_sort);				$template->assign_vars(array(					'S_FEEDBACK'	=> true,					'S_ON_PAGE'		=> on_page($log_count, $config['topics_per_page'], $start),					'PAGINATION'	=> generate_pagination($this->u_action . "&amp;u=$user_id&amp;$u_sort_param", $log_count, $config['topics_per_page'], $start, true),					'S_LIMIT_DAYS'	=> $s_limit_days,					'S_SORT_KEY'	=> $s_sort_key,					'S_SORT_DIR'	=> $s_sort_dir,					'S_CLEARLOGS'	=> $auth->acl_get('a_clearlogs'))				);				foreach ($log_data as $row)				{					$template->assign_block_vars('log', array(						'USERNAME'		=> $row['username_full'],						'IP'			=> $row['ip'],						'DATE'			=> $user->format_date($row['time']),						'ACTION'		=> nl2br($row['action']),						'ID'			=> $row['id'])					);				}			break;			case 'warnings':				$user->add_lang('mcp');				// Set up general vars				$start		= request_var('start', 0);				$deletemark	= (isset($_POST['delmarked'])) ? true : false;				$deleteall	= (isset($_POST['delall'])) ? true : false;				$confirm	= (isset($_POST['confirm'])) ? true : false;				$marked		= request_var('mark', array(0));				$message	= utf8_normalize_nfc(request_var('message', '', true));				// Sort keys				$sort_days	= request_var('st', 0);				$sort_key	= request_var('sk', 't');				$sort_dir	= request_var('sd', 'd');				// Delete entries if requested and able				if ($deletemark || $deleteall || $confirm)				{					if (confirm_box(true))					{						$where_sql = '';						$deletemark = request_var('delmarked', 0);						$deleteall = request_var('delall', 0);						if ($deletemark && $marked)						{							$where_sql = ' AND ' . $db->sql_in_set('warning_id', array_values($marked));						}						if ($where_sql || $deleteall)						{							$sql = 'DELETE FROM ' . WARNINGS_TABLE . "								WHERE user_id = $user_id									$where_sql";							$db->sql_query($sql);							if ($deleteall)							{								$log_warnings = $deleted_warnings = 0;							}							else							{								$num_warnings = (int) $db->sql_affectedrows();								$deleted_warnings = ' user_warnings - ' . $num_warnings;								$log_warnings = ($num_warnings > 2) ? 2 : $num_warnings;							}							$sql = 'UPDATE ' . USERS_TABLE . "								SET user_warnings = $deleted_warnings								WHERE user_id = $user_id";							$db->sql_query($sql);							switch ($log_warnings)							{								case 2:									add_log('admin', 'LOG_WARNINGS_DELETED', $user_row['username'], $num_warnings);								break;								case 1:									add_log('admin', 'LOG_WARNING_DELETED', $user_row['username']);								break;								default:									add_log('admin', 'LOG_WARNINGS_DELETED_ALL', $user_row['username']);								break;							}						}					}					else					{						$s_hidden_fields = array(							'i'				=> $id,							'mode'			=> $mode,							'u'				=> $user_id,							'mark'			=> $marked,						);						if (isset($_POST['delmarked']))						{							$s_hidden_fields['delmarked'] = 1;						}						if (isset($_POST['delall']))						{							$s_hidden_fields['delall'] = 1;						}						if (isset($_POST['delall']) || (isset($_POST['delmarked']) && sizeof($marked)))						{							confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields($s_hidden_fields));						}					}				}				$sql = 'SELECT w.warning_id, w.warning_time, w.post_id, l.log_operation, l.log_data, l.user_id AS mod_user_id, m.username AS mod_username, m.user_colour AS mod_user_colour					FROM ' . WARNINGS_TABLE . ' w					LEFT JOIN ' . LOG_TABLE . ' l						ON (w.log_id = l.log_id)					LEFT JOIN ' . USERS_TABLE . ' m						ON (l.user_id = m.user_id)					WHERE w.user_id = ' . $user_id . '					ORDER BY w.warning_time DESC';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					if (!$row['log_operation'])					{						// We do not have a log-entry anymore, so there is no data available						$row['action'] = $user->lang['USER_WARNING_LOG_DELETED'];					}					else					{						$row['action'] = (isset($user->lang[$row['log_operation']])) ? $user->lang[$row['log_operation']] : '{' . ucfirst(str_replace('_', ' ', $row['log_operation'])) . '}';						if (!empty($row['log_data']))						{							$log_data_ary = @unserialize($row['log_data']);							$log_data_ary = ($log_data_ary === false) ? array() : $log_data_ary;							if (isset($user->lang[$row['log_operation']]))							{								// Check if there are more occurrences of % than arguments, if there are we fill out the arguments array								// It doesn't matter if we add more arguments than placeholders								if ((substr_count($row['action'], '%') - sizeof($log_data_ary)) > 0)								{									$log_data_ary = array_merge($log_data_ary, array_fill(0, substr_count($row['action'], '%') - sizeof($log_data_ary), ''));								}								$row['action'] = vsprintf($row['action'], $log_data_ary);								$row['action'] = bbcode_nl2br(censor_text($row['action']));							}							else if (!empty($log_data_ary))							{								$row['action'] .= '<br />' . implode('', $log_data_ary);							}						}					}					$template->assign_block_vars('warn', array(						'ID'		=> $row['warning_id'],						'USERNAME'	=> ($row['log_operation']) ? get_username_string('full', $row['mod_user_id'], $row['mod_username'], $row['mod_user_colour']) : '-',						'ACTION'	=> make_clickable($row['action']),						'DATE'		=> $user->format_date($row['warning_time']),					));				}				$db->sql_freeresult($result);				$template->assign_vars(array(					'S_WARNINGS'	=> true,				));			break;			case 'profile':				include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				include($phpbb_root_path . 'includes/functions_profile_fields.' . $phpEx);				$cp = new custom_profile();				$cp_data = $cp_error = array();				$sql = 'SELECT lang_id					FROM ' . LANG_TABLE . "					WHERE lang_iso = '" . $db->sql_escape($user->data['user_lang']) . "'";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$user_row['iso_lang_id'] = $row['lang_id'];				$data = array(					'icq'			=> request_var('icq', $user_row['user_icq']),					'aim'			=> request_var('aim', $user_row['user_aim']),					'msn'			=> request_var('msn', $user_row['user_msnm']),					'yim'			=> request_var('yim', $user_row['user_yim']),					'jabber'		=> utf8_normalize_nfc(request_var('jabber', $user_row['user_jabber'], true)),					'website'		=> request_var('website', $user_row['user_website']),					'location'		=> utf8_normalize_nfc(request_var('location', $user_row['user_from'], true)),					'occupation'	=> utf8_normalize_nfc(request_var('occupation', $user_row['user_occ'], true)),					'interests'		=> utf8_normalize_nfc(request_var('interests', $user_row['user_interests'], true)),					'bday_day'		=> 0,					'bday_month'	=> 0,					'bday_year'		=> 0,				);				if ($user_row['user_birthday'])				{					list($data['bday_day'], $data['bday_month'], $data['bday_year']) = explode('-', $user_row['user_birthday']);				}				$data['bday_day']		= request_var('bday_day', $data['bday_day']);				$data['bday_month']		= request_var('bday_month', $data['bday_month']);				$data['bday_year']		= request_var('bday_year', $data['bday_year']);				$data['user_birthday']	= sprintf('%2d-%2d-%4d', $data['bday_day'], $data['bday_month'], $data['bday_year']);				if ($submit)				{					$error = validate_data($data, array(						'icq'			=> array(							array('string', true, 3, 15),							array('match', true, '#^[0-9]+$#i')),						'aim'			=> array('string', true, 3, 255),						'msn'			=> array('string', true, 5, 255),						'jabber'		=> array(							array('string', true, 5, 255),							array('jabber')),						'yim'			=> array('string', true, 5, 255),						'website'		=> array(							array('string', true, 12, 255),							array('match', true, '#^http[s]?://(.*?\.)*?[a-z0-9\-]+\.[a-z]{2,4}#i')),						'location'		=> array('string', true, 2, 100),						'occupation'	=> array('string', true, 2, 500),						'interests'		=> array('string', true, 2, 500),						'bday_day'		=> array('num', true, 1, 31),						'bday_month'	=> array('num', true, 1, 12),						'bday_year'		=> array('num', true, 1901, gmdate('Y', time())),						'user_birthday'	=> array('date', true),					));					// validate custom profile fields					$cp->submit_cp_field('profile', $user_row['iso_lang_id'], $cp_data, $cp_error);					if (sizeof($cp_error))					{						$error = array_merge($error, $cp_error);					}					if (!check_form_key($form_name))					{						$error[] = 'FORM_INVALID';					}					if (!sizeof($error))					{						$sql_ary = array(							'user_icq'		=> $data['icq'],							'user_aim'		=> $data['aim'],							'user_msnm'		=> $data['msn'],							'user_yim'		=> $data['yim'],							'user_jabber'	=> $data['jabber'],							'user_website'	=> $data['website'],							'user_from'		=> $data['location'],							'user_occ'		=> $data['occupation'],							'user_interests'=> $data['interests'],							'user_birthday'	=> $data['user_birthday'],						);						$sql = 'UPDATE ' . USERS_TABLE . '							SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "							WHERE user_id = $user_id";						$db->sql_query($sql);						// Update Custom Fields						$cp->update_profile_field_data($user_id, $cp_data);						trigger_error($user->lang['USER_PROFILE_UPDATED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				$s_birthday_day_options = '<option value="0"' . ((!$data['bday_day']) ? ' selected="selected"' : '') . '>--</option>';				for ($i = 1; $i < 32; $i++)				{					$selected = ($i == $data['bday_day']) ? ' selected="selected"' : '';					$s_birthday_day_options .= "<option value=\"$i\"$selected>$i</option>";				}				$s_birthday_month_options = '<option value="0"' . ((!$data['bday_month']) ? ' selected="selected"' : '') . '>--</option>';				for ($i = 1; $i < 13; $i++)				{					$selected = ($i == $data['bday_month']) ? ' selected="selected"' : '';					$s_birthday_month_options .= "<option value=\"$i\"$selected>$i</option>";				}				$s_birthday_year_options = '';				$now = getdate();				$s_birthday_year_options = '<option value="0"' . ((!$data['bday_year']) ? ' selected="selected"' : '') . '>--</option>';				for ($i = $now['year'] - 100; $i <= $now['year']; $i++)				{					$selected = ($i == $data['bday_year']) ? ' selected="selected"' : '';					$s_birthday_year_options .= "<option value=\"$i\"$selected>$i</option>";				}				unset($now);				$template->assign_vars(array(					'ICQ'			=> $data['icq'],					'YIM'			=> $data['yim'],					'AIM'			=> $data['aim'],					'MSN'			=> $data['msn'],					'JABBER'		=> $data['jabber'],					'WEBSITE'		=> $data['website'],					'LOCATION'		=> $data['location'],					'OCCUPATION'	=> $data['occupation'],					'INTERESTS'		=> $data['interests'],					'S_BIRTHDAY_DAY_OPTIONS'	=> $s_birthday_day_options,					'S_BIRTHDAY_MONTH_OPTIONS'	=> $s_birthday_month_options,					'S_BIRTHDAY_YEAR_OPTIONS'	=> $s_birthday_year_options,					'S_PROFILE'		=> true)				);				// Get additional profile fields and assign them to the template block var 'profile_fields'				$user->get_profile_fields($user_id);				$cp->generate_profile_fields('profile', $user_row['iso_lang_id']);			break;			case 'prefs':				include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$data = array(					'dateformat'		=> utf8_normalize_nfc(request_var('dateformat', $user_row['user_dateformat'], true)),					'lang'				=> basename(request_var('lang', $user_row['user_lang'])),					'tz'				=> request_var('tz', (float) $user_row['user_timezone']),					'style'				=> request_var('style', $user_row['user_style']),					'dst'				=> request_var('dst', $user_row['user_dst']),					'viewemail'			=> request_var('viewemail', $user_row['user_allow_viewemail']),					'massemail'			=> request_var('massemail', $user_row['user_allow_massemail']),					'hideonline'		=> request_var('hideonline', !$user_row['user_allow_viewonline']),					'notifymethod'		=> request_var('notifymethod', $user_row['user_notify_type']),					'notifypm'			=> request_var('notifypm', $user_row['user_notify_pm']),					'popuppm'			=> request_var('popuppm', $this->optionget($user_row, 'popuppm')),					'allowpm'			=> request_var('allowpm', $user_row['user_allow_pm']),					'topic_sk'			=> request_var('topic_sk', ($user_row['user_topic_sortby_type']) ? $user_row['user_topic_sortby_type'] : 't'),					'topic_sd'			=> request_var('topic_sd', ($user_row['user_topic_sortby_dir']) ? $user_row['user_topic_sortby_dir'] : 'd'),					'topic_st'			=> request_var('topic_st', ($user_row['user_topic_show_days']) ? $user_row['user_topic_show_days'] : 0),					'post_sk'			=> request_var('post_sk', ($user_row['user_post_sortby_type']) ? $user_row['user_post_sortby_type'] : 't'),					'post_sd'			=> request_var('post_sd', ($user_row['user_post_sortby_dir']) ? $user_row['user_post_sortby_dir'] : 'a'),					'post_st'			=> request_var('post_st', ($user_row['user_post_show_days']) ? $user_row['user_post_show_days'] : 0),					'view_images'		=> request_var('view_images', $this->optionget($user_row, 'viewimg')),					'view_flash'		=> request_var('view_flash', $this->optionget($user_row, 'viewflash')),					'view_smilies'		=> request_var('view_smilies', $this->optionget($user_row, 'viewsmilies')),					'view_sigs'			=> request_var('view_sigs', $this->optionget($user_row, 'viewsigs')),					'view_avatars'		=> request_var('view_avatars', $this->optionget($user_row, 'viewavatars')),					'view_wordcensor'	=> request_var('view_wordcensor', $this->optionget($user_row, 'viewcensors')),					'bbcode'	=> request_var('bbcode', $this->optionget($user_row, 'bbcode')),					'smilies'	=> request_var('smilies', $this->optionget($user_row, 'smilies')),					'sig'		=> request_var('sig', $this->optionget($user_row, 'attachsig')),					'notify'	=> request_var('notify', $user_row['user_notify']),				);				if ($submit)				{					$error = validate_data($data, array(						'dateformat'	=> array('string', false, 1, 30),						'lang'			=> array('match', false, '#^[a-z_\-]{2,}$#i'),						'tz'			=> array('num', false, -14, 14),						'topic_sk'		=> array('string', false, 1, 1),						'topic_sd'		=> array('string', false, 1, 1),						'post_sk'		=> array('string', false, 1, 1),						'post_sd'		=> array('string', false, 1, 1),					));					if (!check_form_key($form_name))					{						$error[] = 'FORM_INVALID';					}					if (!sizeof($error))					{						$this->optionset($user_row, 'popuppm', $data['popuppm']);						$this->optionset($user_row, 'viewimg', $data['view_images']);						$this->optionset($user_row, 'viewflash', $data['view_flash']);						$this->optionset($user_row, 'viewsmilies', $data['view_smilies']);						$this->optionset($user_row, 'viewsigs', $data['view_sigs']);						$this->optionset($user_row, 'viewavatars', $data['view_avatars']);						$this->optionset($user_row, 'viewcensors', $data['view_wordcensor']);						$this->optionset($user_row, 'bbcode', $data['bbcode']);						$this->optionset($user_row, 'smilies', $data['smilies']);						$this->optionset($user_row, 'attachsig', $data['sig']);						$sql_ary = array(							'user_options'			=> $user_row['user_options'],							'user_allow_pm'			=> $data['allowpm'],							'user_allow_viewemail'	=> $data['viewemail'],							'user_allow_massemail'	=> $data['massemail'],							'user_allow_viewonline'	=> !$data['hideonline'],							'user_notify_type'		=> $data['notifymethod'],							'user_notify_pm'		=> $data['notifypm'],							'user_dst'				=> $data['dst'],							'user_dateformat'		=> $data['dateformat'],							'user_lang'				=> $data['lang'],							'user_timezone'			=> $data['tz'],							'user_style'			=> $data['style'],							'user_topic_sortby_type'	=> $data['topic_sk'],							'user_post_sortby_type'		=> $data['post_sk'],							'user_topic_sortby_dir'		=> $data['topic_sd'],							'user_post_sortby_dir'		=> $data['post_sd'],							'user_topic_show_days'	=> $data['topic_st'],							'user_post_show_days'	=> $data['post_st'],							'user_notify'	=> $data['notify'],						);						$sql = 'UPDATE ' . USERS_TABLE . '							SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "							WHERE user_id = $user_id";						$db->sql_query($sql);						// Check if user has an active session						if ($user_row['session_id'])						{							// We'll update the session if user_allow_viewonline has changed and the user is a bot							// Or if it's a regular user and the admin set it to hide the session							if ($user_row['user_allow_viewonline'] != $sql_ary['user_allow_viewonline'] && $user_row['user_type'] == USER_IGNORE								|| $user_row['user_allow_viewonline'] && !$sql_ary['user_allow_viewonline'])							{								// We also need to check if the user has the permission to cloak.								$user_auth = new auth();								$user_auth->acl($user_row);								$session_sql_ary = array(									'session_viewonline'	=> ($user_auth->acl_get('u_hideonline')) ? $sql_ary['user_allow_viewonline'] : true,								);								$sql = 'UPDATE ' . SESSIONS_TABLE . '									SET ' . $db->sql_build_array('UPDATE', $session_sql_ary) . "									WHERE session_user_id = $user_id";								$db->sql_query($sql);								unset($user_auth);							}						}						trigger_error($user->lang['USER_PREFS_UPDATED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				$dateformat_options = '';				foreach ($user->lang['dateformats'] as $format => $null)				{					$dateformat_options .= '<option value="' . $format . '"' . (($format == $data['dateformat']) ? ' selected="selected"' : '') . '>';					$dateformat_options .= $user->format_date(time(), $format, false) . ((strpos($format, '|') !== false) ? $user->lang['VARIANT_DATE_SEPARATOR'] . $user->format_date(time(), $format, true) : '');					$dateformat_options .= '</option>';				}				$s_custom = false;				$dateformat_options .= '<option value="custom"';				if (!isset($user->lang['dateformats'][$data['dateformat']]))				{					$dateformat_options .= ' selected="selected"';					$s_custom = true;				}				$dateformat_options .= '>' . $user->lang['CUSTOM_DATEFORMAT'] . '</option>';				$sort_dir_text = array('a' => $user->lang['ASCENDING'], 'd' => $user->lang['DESCENDING']);				// Topic ordering options				$limit_topic_days = array(0 => $user->lang['ALL_TOPICS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);				$sort_by_topic_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 'r' => $user->lang['REPLIES'], 's' => $user->lang['SUBJECT'], 'v' => $user->lang['VIEWS']);				// Post ordering options				$limit_post_days = array(0 => $user->lang['ALL_POSTS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);				$sort_by_post_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 's' => $user->lang['SUBJECT']);				$_options = array('topic', 'post');				foreach ($_options as $sort_option)				{					${'s_limit_' . $sort_option . '_days'} = '<select name="' . $sort_option . '_st">';					foreach (${'limit_' . $sort_option . '_days'} as $day => $text)					{						$selected = ($data[$sort_option . '_st'] == $day) ? ' selected="selected"' : '';						${'s_limit_' . $sort_option . '_days'} .= '<option value="' . $day . '"' . $selected . '>' . $text . '</option>';					}					${'s_limit_' . $sort_option . '_days'} .= '</select>';					${'s_sort_' . $sort_option . '_key'} = '<select name="' . $sort_option . '_sk">';					foreach (${'sort_by_' . $sort_option . '_text'} as $key => $text)					{						$selected = ($data[$sort_option . '_sk'] == $key) ? ' selected="selected"' : '';						${'s_sort_' . $sort_option . '_key'} .= '<option value="' . $key . '"' . $selected . '>' . $text . '</option>';					}					${'s_sort_' . $sort_option . '_key'} .= '</select>';					${'s_sort_' . $sort_option . '_dir'} = '<select name="' . $sort_option . '_sd">';					foreach ($sort_dir_text as $key => $value)					{						$selected = ($data[$sort_option . '_sd'] == $key) ? ' selected="selected"' : '';						${'s_sort_' . $sort_option . '_dir'} .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';					}					${'s_sort_' . $sort_option . '_dir'} .= '</select>';				}				$template->assign_vars(array(					'S_PREFS'			=> true,					'S_JABBER_DISABLED'	=> ($config['jab_enable'] && $user_row['user_jabber'] && @extension_loaded('xml')) ? false : true,					'VIEW_EMAIL'		=> $data['viewemail'],					'MASS_EMAIL'		=> $data['massemail'],					'ALLOW_PM'			=> $data['allowpm'],					'HIDE_ONLINE'		=> $data['hideonline'],					'NOTIFY_EMAIL'		=> ($data['notifymethod'] == NOTIFY_EMAIL) ? true : false,					'NOTIFY_IM'			=> ($data['notifymethod'] == NOTIFY_IM) ? true : false,					'NOTIFY_BOTH'		=> ($data['notifymethod'] == NOTIFY_BOTH) ? true : false,					'NOTIFY_PM'			=> $data['notifypm'],					'POPUP_PM'			=> $data['popuppm'],					'DST'				=> $data['dst'],					'BBCODE'			=> $data['bbcode'],					'SMILIES'			=> $data['smilies'],					'ATTACH_SIG'		=> $data['sig'],					'NOTIFY'			=> $data['notify'],					'VIEW_IMAGES'		=> $data['view_images'],					'VIEW_FLASH'		=> $data['view_flash'],					'VIEW_SMILIES'		=> $data['view_smilies'],					'VIEW_SIGS'			=> $data['view_sigs'],					'VIEW_AVATARS'		=> $data['view_avatars'],					'VIEW_WORDCENSOR'	=> $data['view_wordcensor'],					'S_TOPIC_SORT_DAYS'		=> $s_limit_topic_days,					'S_TOPIC_SORT_KEY'		=> $s_sort_topic_key,					'S_TOPIC_SORT_DIR'		=> $s_sort_topic_dir,					'S_POST_SORT_DAYS'		=> $s_limit_post_days,					'S_POST_SORT_KEY'		=> $s_sort_post_key,					'S_POST_SORT_DIR'		=> $s_sort_post_dir,					'DATE_FORMAT'			=> $data['dateformat'],					'S_DATEFORMAT_OPTIONS'	=> $dateformat_options,					'S_CUSTOM_DATEFORMAT'	=> $s_custom,					'DEFAULT_DATEFORMAT'	=> $config['default_dateformat'],					'A_DEFAULT_DATEFORMAT'	=> addslashes($config['default_dateformat']),					'S_LANG_OPTIONS'	=> language_select($data['lang']),					'S_STYLE_OPTIONS'	=> style_select($data['style']),					'S_TZ_OPTIONS'		=> tz_select($data['tz'], true),					)				);			break;			case 'avatar':				include($phpbb_root_path . 'includes/functions_display.' . $phpEx);				include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$can_upload = (file_exists($phpbb_root_path . $config['avatar_path']) && phpbb_is_writable($phpbb_root_path . $config['avatar_path']) && $file_uploads) ? true : false;				if ($submit)				{					if (!check_form_key($form_name))					{							trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					if (avatar_process_user($error, $user_row, $can_upload))					{						trigger_error($user->lang['USER_AVATAR_UPDATED'] . adm_back_link($this->u_action . '&amp;u=' . $user_row['user_id']));					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				if (!$config['allow_avatar'] && $user_row['user_avatar_type'])				{					$error[] = $user->lang['USER_AVATAR_NOT_ALLOWED'];				}				else if ((($user_row['user_avatar_type'] == AVATAR_UPLOAD) && !$config['allow_avatar_upload']) ||				 (($user_row['user_avatar_type'] == AVATAR_REMOTE) && !$config['allow_avatar_remote']) ||				 (($user_row['user_avatar_type'] == AVATAR_GALLERY) && !$config['allow_avatar_local']))				{					$error[] = $user->lang['USER_AVATAR_TYPE_NOT_ALLOWED'];				}				// Generate users avatar				$avatar_img = ($user_row['user_avatar']) ? get_user_avatar($user_row['user_avatar'], $user_row['user_avatar_type'], $user_row['user_avatar_width'], $user_row['user_avatar_height'], 'USER_AVATAR', true) : '<img src="' . $phpbb_admin_path . 'images/no_avatar.gif" alt="" />';				$display_gallery = (isset($_POST['display_gallery'])) ? true : false;				$avatar_select = basename(request_var('avatar_select', ''));				$category = basename(request_var('category', ''));				if ($config['allow_avatar_local'] && $display_gallery)				{					avatar_gallery($category, $avatar_select, 4);				}				$template->assign_vars(array(					'S_AVATAR'			=> true,					'S_CAN_UPLOAD'		=> $can_upload,					'S_UPLOAD_FILE'		=> ($config['allow_avatar'] && $can_upload && $config['allow_avatar_upload']) ? true : false,					'S_REMOTE_UPLOAD'	=> ($config['allow_avatar'] && $can_upload && $config['allow_avatar_remote_upload']) ? true : false,					'S_ALLOW_REMOTE'	=> ($config['allow_avatar'] && $config['allow_avatar_remote']) ? true : false,					'S_DISPLAY_GALLERY'	=> ($config['allow_avatar'] && $config['allow_avatar_local'] && !$display_gallery) ? true : false,					'S_IN_GALLERY'		=> ($config['allow_avatar'] && $config['allow_avatar_local'] && $display_gallery) ? true : false,					'AVATAR_IMAGE'			=> $avatar_img,					'AVATAR_MAX_FILESIZE'	=> $config['avatar_filesize'],					'USER_AVATAR_WIDTH'		=> $user_row['user_avatar_width'],					'USER_AVATAR_HEIGHT'	=> $user_row['user_avatar_height'],					'L_AVATAR_EXPLAIN'	=> sprintf($user->lang['AVATAR_EXPLAIN'], $config['avatar_max_width'], $config['avatar_max_height'], round($config['avatar_filesize'] / 1024)))				);			break;			case 'rank':				if ($submit)				{					if (!check_form_key($form_name))					{						trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					$rank_id = request_var('user_rank', 0);					$sql = 'UPDATE ' . USERS_TABLE . "						SET user_rank = $rank_id						WHERE user_id = $user_id";					$db->sql_query($sql);					trigger_error($user->lang['USER_RANK_UPDATED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));				}				$sql = 'SELECT *					FROM ' . RANKS_TABLE . '					WHERE rank_special = 1					ORDER BY rank_title';				$result = $db->sql_query($sql);				$s_rank_options = '<option value="0"' . ((!$user_row['user_rank']) ? ' selected="selected"' : '') . '>' . $user->lang['NO_SPECIAL_RANK'] . '</option>';				while ($row = $db->sql_fetchrow($result))				{					$selected = ($user_row['user_rank'] && $row['rank_id'] == $user_row['user_rank']) ? ' selected="selected"' : '';					$s_rank_options .= '<option value="' . $row['rank_id'] . '"' . $selected . '>' . $row['rank_title'] . '</option>';				}				$db->sql_freeresult($result);				$template->assign_vars(array(					'S_RANK'			=> true,					'S_RANK_OPTIONS'	=> $s_rank_options)				);			break;			case 'sig':				include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);				include_once($phpbb_root_path . 'includes/functions_display.' . $phpEx);				$enable_bbcode	= ($config['allow_sig_bbcode']) ? (bool) $this->optionget($user_row, 'sig_bbcode') : false;				$enable_smilies	= ($config['allow_sig_smilies']) ? (bool) $this->optionget($user_row, 'sig_smilies') : false;				$enable_urls	= ($config['allow_sig_links']) ? (bool) $this->optionget($user_row, 'sig_links') : false;				$signature		= utf8_normalize_nfc(request_var('signature', (string) $user_row['user_sig'], true));				$preview		= (isset($_POST['preview'])) ? true : false;				if ($submit || $preview)				{					include_once($phpbb_root_path . 'includes/message_parser.' . $phpEx);					$enable_bbcode	= ($config['allow_sig_bbcode']) ? ((request_var('disable_bbcode', false)) ? false : true) : false;					$enable_smilies	= ($config['allow_sig_smilies']) ? ((request_var('disable_smilies', false)) ? false : true) : false;					$enable_urls	= ($config['allow_sig_links']) ? ((request_var('disable_magic_url', false)) ? false : true) : false;					$message_parser = new parse_message($signature);					// Allowing Quote BBCode					$message_parser->parse($enable_bbcode, $enable_urls, $enable_smilies, $config['allow_sig_img'], $config['allow_sig_flash'], true, $config['allow_sig_links'], true, 'sig');					if (sizeof($message_parser->warn_msg))					{						$error[] = implode('<br />', $message_parser->warn_msg);					}					if (!check_form_key($form_name))					{						$error = 'FORM_INVALID';					}					if (!sizeof($error) && $submit)					{						$this->optionset($user_row, 'sig_bbcode', $enable_bbcode);						$this->optionset($user_row, 'sig_smilies', $enable_smilies);						$this->optionset($user_row, 'sig_links', $enable_urls);						$sql_ary = array(							'user_sig'					=> (string) $message_parser->message,							'user_options'				=> $user_row['user_options'],							'user_sig_bbcode_uid'		=> (string) $message_parser->bbcode_uid,							'user_sig_bbcode_bitfield'	=> (string) $message_parser->bbcode_bitfield						);						$sql = 'UPDATE ' . USERS_TABLE . '							SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '							WHERE user_id = ' . $user_id;						$db->sql_query($sql);						trigger_error($user->lang['USER_SIG_UPDATED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				$signature_preview = '';				if ($preview)				{					// Now parse it for displaying					$signature_preview = $message_parser->format_display($enable_bbcode, $enable_urls, $enable_smilies, false);					unset($message_parser);				}				decode_message($signature, $user_row['user_sig_bbcode_uid']);				$template->assign_vars(array(					'S_SIGNATURE'		=> true,					'SIGNATURE'			=> $signature,					'SIGNATURE_PREVIEW'	=> $signature_preview,					'S_BBCODE_CHECKED'		=> (!$enable_bbcode) ? ' checked="checked"' : '',					'S_SMILIES_CHECKED'		=> (!$enable_smilies) ? ' checked="checked"' : '',					'S_MAGIC_URL_CHECKED'	=> (!$enable_urls) ? ' checked="checked"' : '',					'BBCODE_STATUS'			=> ($config['allow_sig_bbcode']) ? sprintf($user->lang['BBCODE_IS_ON'], '<a href="' . append_sid("{$phpbb_root_path}faq.$phpEx", 'mode=bbcode') . '">', '</a>') : sprintf($user->lang['BBCODE_IS_OFF'], '<a href="' . append_sid("{$phpbb_root_path}faq.$phpEx", 'mode=bbcode') . '">', '</a>'),					'SMILIES_STATUS'		=> ($config['allow_sig_smilies']) ? $user->lang['SMILIES_ARE_ON'] : $user->lang['SMILIES_ARE_OFF'],					'IMG_STATUS'			=> ($config['allow_sig_img']) ? $user->lang['IMAGES_ARE_ON'] : $user->lang['IMAGES_ARE_OFF'],					'FLASH_STATUS'			=> ($config['allow_sig_flash']) ? $user->lang['FLASH_IS_ON'] : $user->lang['FLASH_IS_OFF'],					'URL_STATUS'			=> ($config['allow_sig_links']) ? $user->lang['URL_IS_ON'] : $user->lang['URL_IS_OFF'],					'L_SIGNATURE_EXPLAIN'	=> sprintf($user->lang['SIGNATURE_EXPLAIN'], $config['max_sig_chars']),					'S_BBCODE_ALLOWED'		=> $config['allow_sig_bbcode'],					'S_SMILIES_ALLOWED'		=> $config['allow_sig_smilies'],					'S_BBCODE_IMG'			=> ($config['allow_sig_img']) ? true : false,					'S_BBCODE_FLASH'		=> ($config['allow_sig_flash']) ? true : false,					'S_LINKS_ALLOWED'		=> ($config['allow_sig_links']) ? true : false)				);				// Assigning custom bbcodes				display_custom_bbcodes();			break;			case 'attach':				$start		= request_var('start', 0);				$deletemark = (isset($_POST['delmarked'])) ? true : false;				$marked		= request_var('mark', array(0));				// Sort keys				$sort_key	= request_var('sk', 'a');				$sort_dir	= request_var('sd', 'd');				if ($deletemark && sizeof($marked))				{					$sql = 'SELECT attach_id						FROM ' . ATTACHMENTS_TABLE . '						WHERE poster_id = ' . $user_id . '							AND is_orphan = 0							AND ' . $db->sql_in_set('attach_id', $marked);					$result = $db->sql_query($sql);					$marked = array();					while ($row = $db->sql_fetchrow($result))					{						$marked[] = $row['attach_id'];					}					$db->sql_freeresult($result);				}				if ($deletemark && sizeof($marked))				{					if (confirm_box(true))					{						$sql = 'SELECT real_filename							FROM ' . ATTACHMENTS_TABLE . '							WHERE ' . $db->sql_in_set('attach_id', $marked);						$result = $db->sql_query($sql);						$log_attachments = array();						while ($row = $db->sql_fetchrow($result))						{							$log_attachments[] = $row['real_filename'];						}						$db->sql_freeresult($result);						delete_attachments('attach', $marked);						$message = (sizeof($log_attachments) == 1) ? $user->lang['ATTACHMENT_DELETED'] : $user->lang['ATTACHMENTS_DELETED'];						add_log('admin', 'LOG_ATTACHMENTS_DELETED', implode(', ', $log_attachments));						trigger_error($message . adm_back_link($this->u_action . '&amp;u=' . $user_id));					}					else					{						confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(							'u'				=> $user_id,							'i'				=> $id,							'mode'			=> $mode,							'action'		=> $action,							'delmarked'		=> true,							'mark'			=> $marked))						);					}				}				$sk_text = array('a' => $user->lang['SORT_FILENAME'], 'c' => $user->lang['SORT_EXTENSION'], 'd' => $user->lang['SORT_SIZE'], 'e' => $user->lang['SORT_DOWNLOADS'], 'f' => $user->lang['SORT_POST_TIME'], 'g' => $user->lang['SORT_TOPIC_TITLE']);				$sk_sql = array('a' => 'a.real_filename', 'c' => 'a.extension', 'd' => 'a.filesize', 'e' => 'a.download_count', 'f' => 'a.filetime', 'g' => 't.topic_title');				$sd_text = array('a' => $user->lang['ASCENDING'], 'd' => $user->lang['DESCENDING']);				$s_sort_key = '';				foreach ($sk_text as $key => $value)				{					$selected = ($sort_key == $key) ? ' selected="selected"' : '';					$s_sort_key .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';				}				$s_sort_dir = '';				foreach ($sd_text as $key => $value)				{					$selected = ($sort_dir == $key) ? ' selected="selected"' : '';					$s_sort_dir .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';				}				if (!isset($sk_sql[$sort_key]))				{					$sort_key = 'a';				}				$order_by = $sk_sql[$sort_key] . ' ' . (($sort_dir == 'a') ? 'ASC' : 'DESC');				$sql = 'SELECT COUNT(attach_id) as num_attachments					FROM ' . ATTACHMENTS_TABLE . "					WHERE poster_id = $user_id						AND is_orphan = 0";				$result = $db->sql_query_limit($sql, 1);				$num_attachments = (int) $db->sql_fetchfield('num_attachments');				$db->sql_freeresult($result);				$sql = 'SELECT a.*, t.topic_title, p.message_subject as message_title					FROM ' . ATTACHMENTS_TABLE . ' a						LEFT JOIN ' . TOPICS_TABLE . ' t ON (a.topic_id = t.topic_id							AND a.in_message = 0)						LEFT JOIN ' . PRIVMSGS_TABLE . ' p ON (a.post_msg_id = p.msg_id							AND a.in_message = 1)					WHERE a.poster_id = ' . $user_id . "						AND a.is_orphan = 0					ORDER BY $order_by";				$result = $db->sql_query_limit($sql, $config['posts_per_page'], $start);				while ($row = $db->sql_fetchrow($result))				{					if ($row['in_message'])					{						$view_topic = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&amp;p={$row['post_msg_id']}");					}					else					{						$view_topic = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "t={$row['topic_id']}&amp;p={$row['post_msg_id']}") . '#p' . $row['post_msg_id'];					}					$template->assign_block_vars('attach', array(						'REAL_FILENAME'		=> $row['real_filename'],						'COMMENT'			=> nl2br($row['attach_comment']),						'EXTENSION'			=> $row['extension'],						'SIZE'				=> get_formatted_filesize($row['filesize']),						'DOWNLOAD_COUNT'	=> $row['download_count'],						'POST_TIME'			=> $user->format_date($row['filetime']),						'TOPIC_TITLE'		=> ($row['in_message']) ? $row['message_title'] : $row['topic_title'],						'ATTACH_ID'			=> $row['attach_id'],						'POST_ID'			=> $row['post_msg_id'],						'TOPIC_ID'			=> $row['topic_id'],						'S_IN_MESSAGE'		=> $row['in_message'],						'U_DOWNLOAD'		=> append_sid("{$phpbb_root_path}download/file.$phpEx", 'mode=view&amp;id=' . $row['attach_id']),						'U_VIEW_TOPIC'		=> $view_topic)					);				}				$db->sql_freeresult($result);				$template->assign_vars(array(					'S_ATTACHMENTS'		=> true,					'S_ON_PAGE'			=> on_page($num_attachments, $config['topics_per_page'], $start),					'S_SORT_KEY'		=> $s_sort_key,					'S_SORT_DIR'		=> $s_sort_dir,					'PAGINATION'		=> generate_pagination($this->u_action . "&amp;u=$user_id&amp;sk=$sort_key&amp;sd=$sort_dir", $num_attachments, $config['topics_per_page'], $start, true))				);			break;			case 'groups':				include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$user->add_lang(array('groups', 'acp/groups'));				$group_id = request_var('g', 0);				if ($group_id)				{					// Check the founder only entry for this group to make sure everything is well					$sql = 'SELECT group_founder_manage						FROM ' . GROUPS_TABLE . '						WHERE group_id = ' . $group_id;					$result = $db->sql_query($sql);					$founder_manage = (int) $db->sql_fetchfield('group_founder_manage');					$db->sql_freeresult($result);					if ($user->data['user_type'] != USER_FOUNDER && $founder_manage)					{						trigger_error($user->lang['NOT_ALLOWED_MANAGE_GROUP'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}				}				else				{					$founder_manage = 0;				}				switch ($action)				{					case 'demote':					case 'promote':					case 'default':						if (!$group_id)						{							trigger_error($user->lang['NO_GROUP'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);						}						group_user_attributes($action, $group_id, $user_id);						if ($action == 'default')						{							$user_row['group_id'] = $group_id;						}					break;					case 'delete':						if (confirm_box(true))						{							if (!$group_id)							{								trigger_error($user->lang['NO_GROUP'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($error = group_user_del($group_id, $user_id))							{								trigger_error($user->lang[$error] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							$error = array();							// The delete action was successful - therefore update the user row...							$sql = 'SELECT u.*, s.*								FROM ' . USERS_TABLE . ' u									LEFT JOIN ' . SESSIONS_TABLE . ' s ON (s.session_user_id = u.user_id)								WHERE u.user_id = ' . $user_id . '								ORDER BY s.session_time DESC';							$result = $db->sql_query_limit($sql, 1);							$user_row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);						}						else						{							confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(								'u'				=> $user_id,								'i'				=> $id,								'mode'			=> $mode,								'action'		=> $action,								'g'				=> $group_id))							);						}					break;					case 'approve':						if (confirm_box(true))						{							if (!$group_id)							{								trigger_error($user->lang['NO_GROUP'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							group_user_attributes($action, $group_id, $user_id);						}						else						{							confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(								'u'				=> $user_id,								'i'				=> $id,								'mode'			=> $mode,								'action'		=> $action,								'g'				=> $group_id))							);						}					break;				}				// Add user to group?				if ($submit)				{					if (!check_form_key($form_name))					{						trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					if (!$group_id)					{						trigger_error($user->lang['NO_GROUP'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					// Add user/s to group					if ($error = group_user_add($group_id, $user_id))					{						trigger_error($user->lang[$error] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					$error = array();				}				$sql = 'SELECT ug.*, g.*					FROM ' . GROUPS_TABLE . ' g, ' . USER_GROUP_TABLE . " ug					WHERE ug.user_id = $user_id						AND g.group_id = ug.group_id					ORDER BY g.group_type DESC, ug.user_pending ASC, g.group_name";				$result = $db->sql_query($sql);				$i = 0;				$group_data = $id_ary = array();				while ($row = $db->sql_fetchrow($result))				{					$type = ($row['group_type'] == GROUP_SPECIAL) ? 'special' : (($row['user_pending']) ? 'pending' : 'normal');					$group_data[$type][$i]['group_id']		= $row['group_id'];					$group_data[$type][$i]['group_name']	= $row['group_name'];					$group_data[$type][$i]['group_leader']	= ($row['group_leader']) ? 1 : 0;					$id_ary[] = $row['group_id'];					$i++;				}				$db->sql_freeresult($result);				// Select box for other groups				$sql = 'SELECT group_id, group_name, group_type, group_founder_manage					FROM ' . GROUPS_TABLE . '					' . ((sizeof($id_ary)) ? 'WHERE ' . $db->sql_in_set('group_id', $id_ary, true) : '') . '					ORDER BY group_type DESC, group_name ASC';				$result = $db->sql_query($sql);				$s_group_options = '';				while ($row = $db->sql_fetchrow($result))				{					if (!$config['coppa_enable'] && $row['group_name'] == 'REGISTERED_COPPA')					{						continue;					}					// Do not display those groups not allowed to be managed					if ($user->data['user_type'] != USER_FOUNDER && $row['group_founder_manage'])					{						continue;					}					$s_group_options .= '<option' . (($row['group_type'] == GROUP_SPECIAL) ? ' class="sep"' : '') . ' value="' . $row['group_id'] . '">' . (($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name']) . '</option>';				}				$db->sql_freeresult($result);				$current_type = '';				foreach ($group_data as $group_type => $data_ary)				{					if ($current_type != $group_type)					{						$template->assign_block_vars('group', array(							'S_NEW_GROUP_TYPE'		=> true,							'GROUP_TYPE'			=> $user->lang['USER_GROUP_' . strtoupper($group_type)])						);					}					foreach ($data_ary as $data)					{						$template->assign_block_vars('group', array(							'U_EDIT_GROUP'		=> append_sid("{$phpbb_admin_path}index.$phpEx", "i=groups&amp;mode=manage&amp;action=edit&amp;u=$user_id&amp;g={$data['group_id']}&amp;back_link=acp_users_groups"),							'U_DEFAULT'			=> $this->u_action . "&amp;action=default&amp;u=$user_id&amp;g=" . $data['group_id'],							'U_DEMOTE_PROMOTE'	=> $this->u_action . '&amp;action=' . (($data['group_leader']) ? 'demote' : 'promote') . "&amp;u=$user_id&amp;g=" . $data['group_id'],							'U_DELETE'			=> $this->u_action . "&amp;action=delete&amp;u=$user_id&amp;g=" . $data['group_id'],							'U_APPROVE'			=> ($group_type == 'pending') ? $this->u_action . "&amp;action=approve&amp;u=$user_id&amp;g=" . $data['group_id'] : '',							'GROUP_NAME'		=> ($group_type == 'special') ? $user->lang['G_' . $data['group_name']] : $data['group_name'],							'L_DEMOTE_PROMOTE'	=> ($data['group_leader']) ? $user->lang['GROUP_DEMOTE'] : $user->lang['GROUP_PROMOTE'],							'S_IS_MEMBER'		=> ($group_type != 'pending') ? true : false,							'S_NO_DEFAULT'		=> ($user_row['group_id'] != $data['group_id']) ? true : false,							'S_SPECIAL_GROUP'	=> ($group_type == 'special') ? true : false,							)						);					}				}				$template->assign_vars(array(					'S_GROUPS'			=> true,					'S_GROUP_OPTIONS'	=> $s_group_options)				);			break;			case 'perm':				include_once($phpbb_root_path . 'includes/acp/auth.' . $phpEx);				$auth_admin = new auth_admin();				$user->add_lang('acp/permissions');				add_permission_language();				$forum_id = request_var('f', 0);				// Global Permissions				if (!$forum_id)				{					// Select auth options					$sql = 'SELECT auth_option, is_local, is_global						FROM ' . ACL_OPTIONS_TABLE . '						WHERE auth_option ' . $db->sql_like_expression($db->any_char . '_') . '							AND is_global = 1						ORDER BY auth_option';					$result = $db->sql_query($sql);					$hold_ary = array();					while ($row = $db->sql_fetchrow($result))					{						$hold_ary = $auth_admin->get_mask('view', $user_id, false, false, $row['auth_option'], 'global', ACL_NEVER);						$auth_admin->display_mask('view', $row['auth_option'], $hold_ary, 'user', false, false);					}					$db->sql_freeresult($result);					unset($hold_ary);				}				else				{					$sql = 'SELECT auth_option, is_local, is_global						FROM ' . ACL_OPTIONS_TABLE . "						WHERE auth_option " . $db->sql_like_expression($db->any_char . '_') . "							AND is_local = 1						ORDER BY is_global DESC, auth_option";					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$hold_ary = $auth_admin->get_mask('view', $user_id, false, $forum_id, $row['auth_option'], 'local', ACL_NEVER);						$auth_admin->display_mask('view', $row['auth_option'], $hold_ary, 'user', true, false);					}					$db->sql_freeresult($result);				}				$s_forum_options = '<option value="0"' . ((!$forum_id) ? ' selected="selected"' : '') . '>' . $user->lang['VIEW_GLOBAL_PERMS'] . '</option>';				$s_forum_options .= make_forum_select($forum_id, false, true, false, false, false);				$template->assign_vars(array(					'S_PERMISSIONS'				=> true,					'S_GLOBAL'					=> (!$forum_id) ? true : false,					'S_FORUM_OPTIONS'			=> $s_forum_options,					'U_ACTION'					=> $this->u_action . '&amp;u=' . $user_id,					'U_USER_PERMISSIONS'		=> append_sid("{$phpbb_admin_path}index.$phpEx" ,'i=permissions&amp;mode=setting_user_global&amp;user_id[]=' . $user_id),					'U_USER_FORUM_PERMISSIONS'	=> append_sid("{$phpbb_admin_path}index.$phpEx", 'i=permissions&amp;mode=setting_user_local&amp;user_id[]=' . $user_id))				);			break;		}		// Assign general variables		$template->assign_vars(array(			'S_ERROR'			=> (sizeof($error)) ? true : false,			'ERROR_MSG'			=> (sizeof($error)) ? implode('<br />', $error) : '')		);	}	/**	* Optionset replacement for this module based on $user->optionset	*/	function optionset(&$user_row, $key, $value, $data = false)	{		global $user;		$var = ($data) ? $data : $user_row['user_options'];		if ($value && !($var & 1 << $user->keyoptions[$key]))		{			$var += 1 << $user->keyoptions[$key];		}		else if (!$value && ($var & 1 << $user->keyoptions[$key]))		{			$var -= 1 << $user->keyoptions[$key];		}		else		{			return ($data) ? $var : false;		}		if (!$data)		{			$user_row['user_options'] = $var;			return true;		}		else		{			return $var;		}	}	/**	* Optionget replacement for this module based on $user->optionget	*/	function optionget(&$user_row, $key, $data = false)	{		global $user;		$var = ($data) ? $data : $user_row['user_options'];		return ($var & 1 << $user->keyoptions[$key]) ? true : false;	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Obtain user_ids from usernames or vice versa. Returns false on* success else the error string** @param array &$user_id_ary The user ids to check or empty if usernames used* @param array &$username_ary The usernames to check or empty if user ids used* @param mixed $user_type Array of user types to check, false if not restricting by user type*/function user_get_id_name(&$user_id_ary, &$username_ary, $user_type = false){	global $db;	// Are both arrays already filled? Yep, return else	// are neither array filled?	if ($user_id_ary && $username_ary)	{		return false;	}	else if (!$user_id_ary && !$username_ary)	{		return 'NO_USERS';	}	$which_ary = ($user_id_ary) ? 'user_id_ary' : 'username_ary';	if ($$which_ary && !is_array($$which_ary))	{		$$which_ary = array($$which_ary);	}	$sql_in = ($which_ary == 'user_id_ary') ? array_map('intval', $$which_ary) : array_map('utf8_clean_string', $$which_ary);	unset($$which_ary);	$user_id_ary = $username_ary = array();	// Grab the user id/username records	$sql_where = ($which_ary == 'user_id_ary') ? 'user_id' : 'username_clean';	$sql = 'SELECT user_id, username		FROM ' . USERS_TABLE . '		WHERE ' . $db->sql_in_set($sql_where, $sql_in);	if ($user_type !== false && !empty($user_type))	{		$sql .= ' AND ' . $db->sql_in_set('user_type', $user_type);	}	$result = $db->sql_query($sql);	if (!($row = $db->sql_fetchrow($result)))	{		$db->sql_freeresult($result);		return 'NO_USERS';	}	do	{		$username_ary[$row['user_id']] = $row['username'];		$user_id_ary[] = $row['user_id'];	}	while ($row = $db->sql_fetchrow($result));	$db->sql_freeresult($result);	return false;}/*** Get latest registered username and update database to reflect it*/function update_last_username(){	global $db;	// Get latest username	$sql = 'SELECT user_id, username, user_colour		FROM ' . USERS_TABLE . '		WHERE user_type IN (' . USER_NORMAL . ', ' . USER_FOUNDER . ')		ORDER BY user_id DESC';	$result = $db->sql_query_limit($sql, 1);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		set_config('newest_user_id', $row['user_id'], true);		set_config('newest_username', $row['username'], true);		set_config('newest_user_colour', $row['user_colour'], true);	}}/*** Updates a username across all relevant tables/fields** @param string $old_name the old/current username* @param string $new_name the new username*/function user_update_name($old_name, $new_name){	global $config, $db, $cache;	$update_ary = array(		FORUMS_TABLE			=> array('forum_last_poster_name'),		MODERATOR_CACHE_TABLE	=> array('username'),		POSTS_TABLE				=> array('post_username'),		TOPICS_TABLE			=> array('topic_first_poster_name', 'topic_last_poster_name'),	);	foreach ($update_ary as $table => $field_ary)	{		foreach ($field_ary as $field)		{			$sql = "UPDATE $table				SET $field = '" . $db->sql_escape($new_name) . "'				WHERE $field = '" . $db->sql_escape($old_name) . "'";			$db->sql_query($sql);		}	}	if ($config['newest_username'] == $old_name)	{		set_config('newest_username', $new_name, true);	}	// Because some tables/caches use username-specific data we need to purge this here.	$cache->destroy('sql', MODERATOR_CACHE_TABLE);}/*** Adds an user** @param mixed $user_row An array containing the following keys (and the appropriate values): username, group_id (the group to place the user in), user_email and the user_type(usually 0). Additional entries not overridden by defaults will be forwarded.* @param string $cp_data custom profile fields, see custom_profile::build_insert_sql_array* @return the new user's ID.*/function user_add($user_row, $cp_data = false){	global $db, $user, $auth, $config, $phpbb_root_path, $phpEx;	if (empty($user_row['username']) || !isset($user_row['group_id']) || !isset($user_row['user_email']) || !isset($user_row['user_type']))	{		return false;	}	$username_clean = utf8_clean_string($user_row['username']);	if (empty($username_clean))	{		return false;	}	$sql_ary = array(		'username'			=> $user_row['username'],		'username_clean'	=> $username_clean,		'user_password'		=> (isset($user_row['user_password'])) ? $user_row['user_password'] : '',		'user_pass_convert'	=> 0,		'user_email'		=> strtolower($user_row['user_email']),		'user_email_hash'	=> phpbb_email_hash($user_row['user_email']),		'group_id'			=> $user_row['group_id'],		'user_type'			=> $user_row['user_type'],	);	// These are the additional vars able to be specified	$additional_vars = array(		'user_permissions'	=> '',		'user_timezone'		=> $config['board_timezone'],		'user_dateformat'	=> $config['default_dateformat'],		'user_lang'			=> $config['default_lang'],		'user_style'		=> (int) $config['default_style'],		'user_actkey'		=> '',		'user_ip'			=> '',		'user_regdate'		=> time(),		'user_passchg'		=> time(),		'user_options'		=> 230271,		// We do not set the new flag here - registration scripts need to specify it		'user_new'			=> 0,		'user_inactive_reason'	=> 0,		'user_inactive_time'	=> 0,		'user_lastmark'			=> time(),		'user_lastvisit'		=> 0,		'user_lastpost_time'	=> 0,		'user_lastpage'			=> '',		'user_posts'			=> 0,		'user_dst'				=> (int) $config['board_dst'],		'user_colour'			=> '',		'user_occ'				=> '',		'user_interests'		=> '',		'user_avatar'			=> '',		'user_avatar_type'		=> 0,		'user_avatar_width'		=> 0,		'user_avatar_height'	=> 0,		'user_new_privmsg'		=> 0,		'user_unread_privmsg'	=> 0,		'user_last_privmsg'		=> 0,		'user_message_rules'	=> 0,		'user_full_folder'		=> PRIVMSGS_NO_BOX,		'user_emailtime'		=> 0,		'user_notify'			=> 0,		'user_notify_pm'		=> 1,		'user_notify_type'		=> NOTIFY_EMAIL,		'user_allow_pm'			=> 1,		'user_allow_viewonline'	=> 1,		'user_allow_viewemail'	=> 1,		'user_allow_massemail'	=> 1,		'user_sig'					=> '',		'user_sig_bbcode_uid'		=> '',		'user_sig_bbcode_bitfield'	=> '',		'user_form_salt'			=> unique_id(),	);	// Now fill the sql array with not required variables	foreach ($additional_vars as $key => $default_value)	{		$sql_ary[$key] = (isset($user_row[$key])) ? $user_row[$key] : $default_value;	}	// Any additional variables in $user_row not covered above?	$remaining_vars = array_diff(array_keys($user_row), array_keys($sql_ary));	// Now fill our sql array with the remaining vars	if (sizeof($remaining_vars))	{		foreach ($remaining_vars as $key)		{			$sql_ary[$key] = $user_row[$key];		}	}	$sql = 'INSERT INTO ' . USERS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);	$db->sql_query($sql);	$user_id = $db->sql_nextid();	// Insert Custom Profile Fields	if ($cp_data !== false && sizeof($cp_data))	{		$cp_data['user_id'] = (int) $user_id;		if (!class_exists('custom_profile'))		{			include_once($phpbb_root_path . 'includes/functions_profile_fields.' . $phpEx);		}		$sql = 'INSERT INTO ' . PROFILE_FIELDS_DATA_TABLE . ' ' .			$db->sql_build_array('INSERT', custom_profile::build_insert_sql_array($cp_data));		$db->sql_query($sql);	}	// Place into appropriate group...	$sql = 'INSERT INTO ' . USER_GROUP_TABLE . ' ' . $db->sql_build_array('INSERT', array(		'user_id'		=> (int) $user_id,		'group_id'		=> (int) $user_row['group_id'],		'user_pending'	=> 0)	);	$db->sql_query($sql);	// Now make it the users default group...	group_set_user_default($user_row['group_id'], array($user_id), false);	// Add to newly registered users group if user_new is 1	if ($config['new_member_post_limit'] && $sql_ary['user_new'])	{		$sql = 'SELECT group_id			FROM ' . GROUPS_TABLE . "			WHERE group_name = 'NEWLY_REGISTERED'				AND group_type = " . GROUP_SPECIAL;		$result = $db->sql_query($sql);		$add_group_id = (int) $db->sql_fetchfield('group_id');		$db->sql_freeresult($result);		if ($add_group_id)		{			// Because these actions only fill the log unneccessarily we skip the add_log() entry with a little hack. :/			$GLOBALS['skip_add_log'] = true;			// Add user to "newly registered users" group and set to default group if admin specified so.			if ($config['new_member_group_default'])			{				group_user_add($add_group_id, $user_id, false, false, true);				$user_row['group_id'] = $add_group_id;			}			else			{				group_user_add($add_group_id, $user_id);			}			unset($GLOBALS['skip_add_log']);		}	}	// set the newest user and adjust the user count if the user is a normal user and no activation mail is sent	if ($user_row['user_type'] == USER_NORMAL || $user_row['user_type'] == USER_FOUNDER)	{		set_config('newest_user_id', $user_id, true);		set_config('newest_username', $user_row['username'], true);		set_config_count('num_users', 1, true);		$sql = 'SELECT group_colour			FROM ' . GROUPS_TABLE . '			WHERE group_id = ' . (int) $user_row['group_id'];		$result = $db->sql_query_limit($sql, 1);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		set_config('newest_user_colour', $row['group_colour'], true);	}	return $user_id;}/*** Remove User*/function user_delete($mode, $user_id, $post_username = false){	global $cache, $config, $db, $user, $auth;	global $phpbb_root_path, $phpEx;	$sql = 'SELECT *		FROM ' . USERS_TABLE . '		WHERE user_id = ' . $user_id;	$result = $db->sql_query($sql);	$user_row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$user_row)	{		return false;	}	// Before we begin, we will remove the reports the user issued.	$sql = 'SELECT r.post_id, p.topic_id		FROM ' . REPORTS_TABLE . ' r, ' . POSTS_TABLE . ' p		WHERE r.user_id = ' . $user_id . '			AND p.post_id = r.post_id';	$result = $db->sql_query($sql);	$report_posts = $report_topics = array();	while ($row = $db->sql_fetchrow($result))	{		$report_posts[] = $row['post_id'];		$report_topics[] = $row['topic_id'];	}	$db->sql_freeresult($result);	if (sizeof($report_posts))	{		$report_posts = array_unique($report_posts);		$report_topics = array_unique($report_topics);		// Get a list of topics that still contain reported posts		$sql = 'SELECT DISTINCT topic_id			FROM ' . POSTS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', $report_topics) . '				AND post_reported = 1				AND ' . $db->sql_in_set('post_id', $report_posts, true);		$result = $db->sql_query($sql);		$keep_report_topics = array();		while ($row = $db->sql_fetchrow($result))		{			$keep_report_topics[] = $row['topic_id'];		}		$db->sql_freeresult($result);		if (sizeof($keep_report_topics))		{			$report_topics = array_diff($report_topics, $keep_report_topics);		}		unset($keep_report_topics);		// Now set the flags back		$sql = 'UPDATE ' . POSTS_TABLE . '			SET post_reported = 0			WHERE ' . $db->sql_in_set('post_id', $report_posts);		$db->sql_query($sql);		if (sizeof($report_topics))		{			$sql = 'UPDATE ' . TOPICS_TABLE . '				SET topic_reported = 0				WHERE ' . $db->sql_in_set('topic_id', $report_topics);			$db->sql_query($sql);		}	}	// Remove reports	$db->sql_query('DELETE FROM ' . REPORTS_TABLE . ' WHERE user_id = ' . $user_id);	if ($user_row['user_avatar'] && $user_row['user_avatar_type'] == AVATAR_UPLOAD)	{		avatar_delete('user', $user_row);	}	switch ($mode)	{		case 'retain':			$db->sql_transaction('begin');			if ($post_username === false)			{				$post_username = $user->lang['GUEST'];			}			// If the user is inactive and newly registered we assume no posts from this user being there...			if ($user_row['user_type'] == USER_INACTIVE && $user_row['user_inactive_reason'] == INACTIVE_REGISTER && !$user_row['user_posts'])			{			}			else			{				$sql = 'UPDATE ' . FORUMS_TABLE . '					SET forum_last_poster_id = ' . ANONYMOUS . ", forum_last_poster_name = '" . $db->sql_escape($post_username) . "', forum_last_poster_colour = ''					WHERE forum_last_poster_id = $user_id";				$db->sql_query($sql);				$sql = 'UPDATE ' . POSTS_TABLE . '					SET poster_id = ' . ANONYMOUS . ", post_username = '" . $db->sql_escape($post_username) . "'					WHERE poster_id = $user_id";				$db->sql_query($sql);				$sql = 'UPDATE ' . POSTS_TABLE . '					SET post_edit_user = ' . ANONYMOUS . "					WHERE post_edit_user = $user_id";				$db->sql_query($sql);				$sql = 'UPDATE ' . TOPICS_TABLE . '					SET topic_poster = ' . ANONYMOUS . ", topic_first_poster_name = '" . $db->sql_escape($post_username) . "', topic_first_poster_colour = ''					WHERE topic_poster = $user_id";				$db->sql_query($sql);				$sql = 'UPDATE ' . TOPICS_TABLE . '					SET topic_last_poster_id = ' . ANONYMOUS . ", topic_last_poster_name = '" . $db->sql_escape($post_username) . "', topic_last_poster_colour = ''					WHERE topic_last_poster_id = $user_id";				$db->sql_query($sql);				$sql = 'UPDATE ' . ATTACHMENTS_TABLE . '					SET poster_id = ' . ANONYMOUS . "					WHERE poster_id = $user_id";				$db->sql_query($sql);				// Since we change every post by this author, we need to count this amount towards the anonymous user				// Update the post count for the anonymous user				if ($user_row['user_posts'])				{					$sql = 'UPDATE ' . USERS_TABLE . '						SET user_posts = user_posts + ' . $user_row['user_posts'] . '						WHERE user_id = ' . ANONYMOUS;					$db->sql_query($sql);				}			}			$db->sql_transaction('commit');		break;		case 'remove':			if (!function_exists('delete_posts'))			{				include($phpbb_root_path . 'includes/functions_admin.' . $phpEx);			}			// Delete posts, attachments, etc.			delete_posts('poster_id', $user_id);		break;	}	$db->sql_transaction('begin');	$table_ary = array(USERS_TABLE, USER_GROUP_TABLE, TOPICS_WATCH_TABLE, FORUMS_WATCH_TABLE, ACL_USERS_TABLE, TOPICS_TRACK_TABLE, TOPICS_POSTED_TABLE, FORUMS_TRACK_TABLE, PROFILE_FIELDS_DATA_TABLE, MODERATOR_CACHE_TABLE, DRAFTS_TABLE, BOOKMARKS_TABLE, SESSIONS_KEYS_TABLE, PRIVMSGS_FOLDER_TABLE, PRIVMSGS_RULES_TABLE);	foreach ($table_ary as $table)	{		$sql = "DELETE FROM $table			WHERE user_id = $user_id";		$db->sql_query($sql);	}	$cache->destroy('sql', MODERATOR_CACHE_TABLE);	// Delete user log entries about this user	$sql = 'DELETE FROM ' . LOG_TABLE . '		WHERE reportee_id = ' . $user_id;	$db->sql_query($sql);	// Change user_id to anonymous for this users triggered events	$sql = 'UPDATE ' . LOG_TABLE . '		SET user_id = ' . ANONYMOUS . '		WHERE user_id = ' . $user_id;	$db->sql_query($sql);	// Delete the user_id from the zebra table	$sql = 'DELETE FROM ' . ZEBRA_TABLE . '		WHERE user_id = ' . $user_id . '			OR zebra_id = ' . $user_id;	$db->sql_query($sql);	// Delete the user_id from the banlist	$sql = 'DELETE FROM ' . BANLIST_TABLE . '		WHERE ban_userid = ' . $user_id;	$db->sql_query($sql);	// Delete the user_id from the session table	$sql = 'DELETE FROM ' . SESSIONS_TABLE . '		WHERE session_user_id = ' . $user_id;	$db->sql_query($sql);	// Remove any undelivered mails...	$sql = 'SELECT msg_id, user_id		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE author_id = ' . $user_id . '			AND folder_id = ' . PRIVMSGS_NO_BOX;	$result = $db->sql_query($sql);	$undelivered_msg = $undelivered_user = array();	while ($row = $db->sql_fetchrow($result))	{		$undelivered_msg[] = $row['msg_id'];		$undelivered_user[$row['user_id']][] = true;	}	$db->sql_freeresult($result);	if (sizeof($undelivered_msg))	{		$sql = 'DELETE FROM ' . PRIVMSGS_TABLE . '			WHERE ' . $db->sql_in_set('msg_id', $undelivered_msg);		$db->sql_query($sql);	}	$sql = 'DELETE FROM ' . PRIVMSGS_TO_TABLE . '		WHERE author_id = ' . $user_id . '			AND folder_id = ' . PRIVMSGS_NO_BOX;	$db->sql_query($sql);	// Delete all to-information	$sql = 'DELETE FROM ' . PRIVMSGS_TO_TABLE . '		WHERE user_id = ' . $user_id;	$db->sql_query($sql);	// Set the remaining author id to anonymous - this way users are still able to read messages from users being removed	$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '		SET author_id = ' . ANONYMOUS . '		WHERE author_id = ' . $user_id;	$db->sql_query($sql);	$sql = 'UPDATE ' . PRIVMSGS_TABLE . '		SET author_id = ' . ANONYMOUS . '		WHERE author_id = ' . $user_id;	$db->sql_query($sql);	foreach ($undelivered_user as $_user_id => $ary)	{		if ($_user_id == $user_id)		{			continue;		}		$sql = 'UPDATE ' . USERS_TABLE . '			SET user_new_privmsg = user_new_privmsg - ' . sizeof($ary) . ',				user_unread_privmsg = user_unread_privmsg - ' . sizeof($ary) . '			WHERE user_id = ' . $_user_id;		$db->sql_query($sql);	}	$db->sql_transaction('commit');	// Reset newest user info if appropriate	if ($config['newest_user_id'] == $user_id)	{		update_last_username();	}	// Decrement number of users if this user is active	if ($user_row['user_type'] != USER_INACTIVE && $user_row['user_type'] != USER_IGNORE)	{		set_config_count('num_users', -1, true);	}	return false;}/*** Flips user_type from active to inactive and vice versa, handles group membership updates** @param string $mode can be flip for flipping from active/inactive, activate or deactivate*/function user_active_flip($mode, $user_id_ary, $reason = INACTIVE_MANUAL){	global $config, $db, $user, $auth;	$deactivated = $activated = 0;	$sql_statements = array();	if (!is_array($user_id_ary))	{		$user_id_ary = array($user_id_ary);	}	if (!sizeof($user_id_ary))	{		return;	}	$sql = 'SELECT user_id, group_id, user_type, user_inactive_reason		FROM ' . USERS_TABLE . '		WHERE ' . $db->sql_in_set('user_id', $user_id_ary);	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$sql_ary = array();		if ($row['user_type'] == USER_IGNORE || $row['user_type'] == USER_FOUNDER ||			($mode == 'activate' && $row['user_type'] != USER_INACTIVE) ||			($mode == 'deactivate' && $row['user_type'] == USER_INACTIVE))		{			continue;		}		if ($row['user_type'] == USER_INACTIVE)		{			$activated++;		}		else		{			$deactivated++;			// Remove the users session key...			$user->reset_login_keys($row['user_id']);		}		$sql_ary += array(			'user_type'				=> ($row['user_type'] == USER_NORMAL) ? USER_INACTIVE : USER_NORMAL,			'user_inactive_time'	=> ($row['user_type'] == USER_NORMAL) ? time() : 0,			'user_inactive_reason'	=> ($row['user_type'] == USER_NORMAL) ? $reason : 0,		);		$sql_statements[$row['user_id']] = $sql_ary;	}	$db->sql_freeresult($result);	if (sizeof($sql_statements))	{		foreach ($sql_statements as $user_id => $sql_ary)		{			$sql = 'UPDATE ' . USERS_TABLE . '				SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '				WHERE user_id = ' . $user_id;			$db->sql_query($sql);		}		$auth->acl_clear_prefetch(array_keys($sql_statements));	}	if ($deactivated)	{		set_config_count('num_users', $deactivated * (-1), true);	}	if ($activated)	{		set_config_count('num_users', $activated, true);	}	// Update latest username	update_last_username();}/*** Add a ban or ban exclusion to the banlist. Bans either a user, an IP or an email address** @param string $mode Type of ban. One of the following: user, ip, email* @param mixed $ban Banned entity. Either string or array with usernames, ips or email addresses* @param int $ban_len Ban length in minutes* @param string $ban_len_other Ban length as a date (YYYY-MM-DD)* @param boolean $ban_exclude Exclude these entities from banning?* @param string $ban_reason String describing the reason for this ban* @return boolean*/function user_ban($mode, $ban, $ban_len, $ban_len_other, $ban_exclude, $ban_reason, $ban_give_reason = ''){	global $db, $user, $auth, $cache;	// Delete stale bans	$sql = 'DELETE FROM ' . BANLIST_TABLE . '		WHERE ban_end < ' . time() . '			AND ban_end <> 0';	$db->sql_query($sql);	$ban_list = (!is_array($ban)) ? array_unique(explode("\n", $ban)) : $ban;	$ban_list_log = implode(', ', $ban_list);	$current_time = time();	// Set $ban_end to the unix time when the ban should end. 0 is a permanent ban.	if ($ban_len)	{		if ($ban_len != -1 || !$ban_len_other)		{			$ban_end = max($current_time, $current_time + ($ban_len) * 60);		}		else		{			$ban_other = explode('-', $ban_len_other);			if (sizeof($ban_other) == 3 && ((int)$ban_other[0] < 9999) &&				(strlen($ban_other[0]) == 4) && (strlen($ban_other[1]) == 2) && (strlen($ban_other[2]) == 2))			{				$time_offset = (isset($user->timezone) && isset($user->dst)) ? (int) $user->timezone + (int) $user->dst : 0;				$ban_end = max($current_time, gmmktime(0, 0, 0, (int)$ban_other[1], (int)$ban_other[2], (int)$ban_other[0]) - $time_offset);			}			else			{				trigger_error('LENGTH_BAN_INVALID', E_USER_WARNING);			}		}	}	else	{		$ban_end = 0;	}	$founder = $founder_names = array();	if (!$ban_exclude)	{		// Create a list of founder...		$sql = 'SELECT user_id, user_email, username_clean			FROM ' . USERS_TABLE . '			WHERE user_type = ' . USER_FOUNDER;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$founder[$row['user_id']] = $row['user_email'];			$founder_names[$row['user_id']] = $row['username_clean'];		}		$db->sql_freeresult($result);	}	$banlist_ary = array();	switch ($mode)	{		case 'user':			$type = 'ban_userid';			// At the moment we do not support wildcard username banning			// Select the relevant user_ids.			$sql_usernames = array();			foreach ($ban_list as $username)			{				$username = trim($username);				if ($username != '')				{					$clean_name = utf8_clean_string($username);					if ($clean_name == $user->data['username_clean'])					{						trigger_error('CANNOT_BAN_YOURSELF', E_USER_WARNING);					}					if (in_array($clean_name, $founder_names))					{						trigger_error('CANNOT_BAN_FOUNDER', E_USER_WARNING);					}					$sql_usernames[] = $clean_name;				}			}			// Make sure we have been given someone to ban			if (!sizeof($sql_usernames))			{				trigger_error('NO_USER_SPECIFIED', E_USER_WARNING);			}			$sql = 'SELECT user_id				FROM ' . USERS_TABLE . '				WHERE ' . $db->sql_in_set('username_clean', $sql_usernames);			// Do not allow banning yourself, the guest account, or founders.			$non_bannable = array($user->data['user_id'], ANONYMOUS);			if (sizeof($founder))			{				$sql .= ' AND ' . $db->sql_in_set('user_id', array_merge(array_keys($founder), $non_bannable), true);			}			else			{				$sql .= ' AND ' . $db->sql_in_set('user_id', $non_bannable, true);			}			$result = $db->sql_query($sql);			if ($row = $db->sql_fetchrow($result))			{				do				{					$banlist_ary[] = (int) $row['user_id'];				}				while ($row = $db->sql_fetchrow($result));			}			else			{				$db->sql_freeresult($result);				trigger_error('NO_USERS', E_USER_WARNING);			}			$db->sql_freeresult($result);		break;		case 'ip':			$type = 'ban_ip';			foreach ($ban_list as $ban_item)			{				if (preg_match('#^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})[ ]*\-[ ]*([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$#', trim($ban_item), $ip_range_explode))				{					// This is an IP range					// Don't ask about all this, just don't ask ... !					$ip_1_counter = $ip_range_explode[1];					$ip_1_end = $ip_range_explode[5];					while ($ip_1_counter <= $ip_1_end)					{						$ip_2_counter = ($ip_1_counter == $ip_range_explode[1]) ? $ip_range_explode[2] : 0;						$ip_2_end = ($ip_1_counter < $ip_1_end) ? 254 : $ip_range_explode[6];						if ($ip_2_counter == 0 && $ip_2_end == 254)						{							$ip_2_counter = 256;							$ip_2_fragment = 256;							$banlist_ary[] = "$ip_1_counter.*";						}						while ($ip_2_counter <= $ip_2_end)						{							$ip_3_counter = ($ip_2_counter == $ip_range_explode[2] && $ip_1_counter == $ip_range_explode[1]) ? $ip_range_explode[3] : 0;							$ip_3_end = ($ip_2_counter < $ip_2_end || $ip_1_counter < $ip_1_end) ? 254 : $ip_range_explode[7];							if ($ip_3_counter == 0 && $ip_3_end == 254)							{								$ip_3_counter = 256;								$ip_3_fragment = 256;								$banlist_ary[] = "$ip_1_counter.$ip_2_counter.*";							}							while ($ip_3_counter <= $ip_3_end)							{								$ip_4_counter = ($ip_3_counter == $ip_range_explode[3] && $ip_2_counter == $ip_range_explode[2] && $ip_1_counter == $ip_range_explode[1]) ? $ip_range_explode[4] : 0;								$ip_4_end = ($ip_3_counter < $ip_3_end || $ip_2_counter < $ip_2_end) ? 254 : $ip_range_explode[8];								if ($ip_4_counter == 0 && $ip_4_end == 254)								{									$ip_4_counter = 256;									$ip_4_fragment = 256;									$banlist_ary[] = "$ip_1_counter.$ip_2_counter.$ip_3_counter.*";								}								while ($ip_4_counter <= $ip_4_end)								{									$banlist_ary[] = "$ip_1_counter.$ip_2_counter.$ip_3_counter.$ip_4_counter";									$ip_4_counter++;								}								$ip_3_counter++;							}							$ip_2_counter++;						}						$ip_1_counter++;					}				}				else if (preg_match('#^([0-9]{1,3})\.([0-9\*]{1,3})\.([0-9\*]{1,3})\.([0-9\*]{1,3})$#', trim($ban_item)) || preg_match('#^[a-f0-9:]+\*?$#i', trim($ban_item)))				{					// Normal IP address					$banlist_ary[] = trim($ban_item);				}				else if (preg_match('#^\*$#', trim($ban_item)))				{					// Ban all IPs					$banlist_ary[] = '*';				}				else if (preg_match('#^([\w\-_]\.?){2,}$#is', trim($ban_item)))				{					// hostname					$ip_ary = gethostbynamel(trim($ban_item));					if (!empty($ip_ary))					{						foreach ($ip_ary as $ip)						{							if ($ip)							{								if (strlen($ip) > 40)								{									continue;								}								$banlist_ary[] = $ip;							}						}					}				}				if (empty($banlist_ary))				{					trigger_error('NO_IPS_DEFINED', E_USER_WARNING);				}			}		break;		case 'email':			$type = 'ban_email';			foreach ($ban_list as $ban_item)			{				$ban_item = trim($ban_item);				if (preg_match('#^.*?@*|(([a-z0-9\-]+\.)+([a-z]{2,3}))$#i', $ban_item))				{					if (strlen($ban_item) > 100)					{						continue;					}					if (!sizeof($founder) || !in_array($ban_item, $founder))					{						$banlist_ary[] = $ban_item;					}				}			}			if (sizeof($ban_list) == 0)			{				trigger_error('NO_EMAILS_DEFINED', E_USER_WARNING);			}		break;		default:			trigger_error('NO_MODE', E_USER_WARNING);		break;	}	// Fetch currently set bans of the specified type and exclude state. Prevent duplicate bans.	$sql_where = ($type == 'ban_userid') ? 'ban_userid <> 0' : "$type <> ''";	$sql = "SELECT $type		FROM " . BANLIST_TABLE . "		WHERE $sql_where			AND ban_exclude = " . (int) $ban_exclude;	$result = $db->sql_query($sql);	// Reset $sql_where, because we use it later...	$sql_where = '';	if ($row = $db->sql_fetchrow($result))	{		$banlist_ary_tmp = array();		do		{			switch ($mode)			{				case 'user':					$banlist_ary_tmp[] = $row['ban_userid'];				break;				case 'ip':					$banlist_ary_tmp[] = $row['ban_ip'];				break;				case 'email':					$banlist_ary_tmp[] = $row['ban_email'];				break;			}		}		while ($row = $db->sql_fetchrow($result));		$banlist_ary_tmp = array_intersect($banlist_ary, $banlist_ary_tmp);		if (sizeof($banlist_ary_tmp))		{			// One or more entities are already banned/excluded, delete the existing bans, so they can be re-inserted with the given new length			$sql = 'DELETE FROM ' . BANLIST_TABLE . '				WHERE ' . $db->sql_in_set($type, $banlist_ary_tmp) . '					AND ban_exclude = ' . (int) $ban_exclude;			$db->sql_query($sql);		}		unset($banlist_ary_tmp);	}	$db->sql_freeresult($result);	// We have some entities to ban	if (sizeof($banlist_ary))	{		$sql_ary = array();		foreach ($banlist_ary as $ban_entry)		{			$sql_ary[] = array(				$type				=> $ban_entry,				'ban_start'			=> (int) $current_time,				'ban_end'			=> (int) $ban_end,				'ban_exclude'		=> (int) $ban_exclude,				'ban_reason'		=> (string) $ban_reason,				'ban_give_reason'	=> (string) $ban_give_reason,			);		}		$db->sql_multi_insert(BANLIST_TABLE, $sql_ary);		// If we are banning we want to logout anyone matching the ban		if (!$ban_exclude)		{			switch ($mode)			{				case 'user':					$sql_where = 'WHERE ' . $db->sql_in_set('session_user_id', $banlist_ary);				break;				case 'ip':					$sql_where = 'WHERE ' . $db->sql_in_set('session_ip', $banlist_ary);				break;				case 'email':					$banlist_ary_sql = array();					foreach ($banlist_ary as $ban_entry)					{						$banlist_ary_sql[] = (string) str_replace('*', '%', $ban_entry);					}					$sql = 'SELECT user_id						FROM ' . USERS_TABLE . '						WHERE ' . $db->sql_in_set('user_email', $banlist_ary_sql);					$result = $db->sql_query($sql);					$sql_in = array();					if ($row = $db->sql_fetchrow($result))					{						do						{							$sql_in[] = $row['user_id'];						}						while ($row = $db->sql_fetchrow($result));						$sql_where = 'WHERE ' . $db->sql_in_set('session_user_id', $sql_in);					}					$db->sql_freeresult($result);				break;			}			if (isset($sql_where) && $sql_where)			{				$sql = 'DELETE FROM ' . SESSIONS_TABLE . "					$sql_where";				$db->sql_query($sql);				if ($mode == 'user')				{					$sql = 'DELETE FROM ' . SESSIONS_KEYS_TABLE . ' ' . ((in_array('*', $banlist_ary)) ? '' : 'WHERE ' . $db->sql_in_set('user_id', $banlist_ary));					$db->sql_query($sql);				}			}		}		// Update log		$log_entry = ($ban_exclude) ? 'LOG_BAN_EXCLUDE_' : 'LOG_BAN_';		// Add to moderator log, admin log and user notes		add_log('admin', $log_entry . strtoupper($mode), $ban_reason, $ban_list_log);		add_log('mod', 0, 0, $log_entry . strtoupper($mode), $ban_reason, $ban_list_log);		if ($mode == 'user')		{			foreach ($banlist_ary as $user_id)			{				add_log('user', $user_id, $log_entry . strtoupper($mode), $ban_reason, $ban_list_log);			}		}		$cache->destroy('sql', BANLIST_TABLE);		return true;	}	// There was nothing to ban/exclude. But destroying the cache because of the removal of stale bans.	$cache->destroy('sql', BANLIST_TABLE);	return false;}/*** Unban User*/function user_unban($mode, $ban){	global $db, $user, $auth, $cache;	// Delete stale bans	$sql = 'DELETE FROM ' . BANLIST_TABLE . '		WHERE ban_end < ' . time() . '			AND ban_end <> 0';	$db->sql_query($sql);	if (!is_array($ban))	{		$ban = array($ban);	}	$unban_sql = array_map('intval', $ban);	if (sizeof($unban_sql))	{		// Grab details of bans for logging information later		switch ($mode)		{			case 'user':				$sql = 'SELECT u.username AS unban_info, u.user_id					FROM ' . USERS_TABLE . ' u, ' . BANLIST_TABLE . ' b					WHERE ' . $db->sql_in_set('b.ban_id', $unban_sql) . '						AND u.user_id = b.ban_userid';			break;			case 'email':				$sql = 'SELECT ban_email AS unban_info					FROM ' . BANLIST_TABLE . '					WHERE ' . $db->sql_in_set('ban_id', $unban_sql);			break;			case 'ip':				$sql = 'SELECT ban_ip AS unban_info					FROM ' . BANLIST_TABLE . '					WHERE ' . $db->sql_in_set('ban_id', $unban_sql);			break;		}		$result = $db->sql_query($sql);		$l_unban_list = '';		$user_ids_ary = array();		while ($row = $db->sql_fetchrow($result))		{			$l_unban_list .= (($l_unban_list != '') ? ', ' : '') . $row['unban_info'];			if ($mode == 'user')			{				$user_ids_ary[] = $row['user_id'];			}		}		$db->sql_freeresult($result);		$sql = 'DELETE FROM ' . BANLIST_TABLE . '			WHERE ' . $db->sql_in_set('ban_id', $unban_sql);		$db->sql_query($sql);		// Add to moderator log, admin log and user notes		add_log('admin', 'LOG_UNBAN_' . strtoupper($mode), $l_unban_list);		add_log('mod', 0, 0, 'LOG_UNBAN_' . strtoupper($mode), $l_unban_list);		if ($mode == 'user')		{			foreach ($user_ids_ary as $user_id)			{				add_log('user', $user_id, 'LOG_UNBAN_' . strtoupper($mode), $l_unban_list);			}		}	}	$cache->destroy('sql', BANLIST_TABLE);	return false;}/*** Internet Protocol Address Whois* RFC3912: WHOIS Protocol Specification** @param string $ip		Ip address, either IPv4 or IPv6.** @return string		Empty string if not a valid ip address.*						Otherwise make_clickable()'ed whois result.*/function user_ipwhois($ip){	if (empty($ip))	{		return '';	}	if (preg_match(get_preg_expression('ipv4'), $ip))	{		// IPv4 address		$whois_host = 'whois.arin.net.';	}	else if (preg_match(get_preg_expression('ipv6'), $ip))	{		// IPv6 address		$whois_host = 'whois.sixxs.net.';	}	else	{		return '';	}	$ipwhois = '';	if (($fsk = @fsockopen($whois_host, 43)))	{		// CRLF as per RFC3912		fputs($fsk, "$ip\r\n");		while (!feof($fsk))		{			$ipwhois .= fgets($fsk, 1024);		}		@fclose($fsk);	}	$match = array();	// Test for referrals from $whois_host to other whois databases, roll on rwhois	if (preg_match('#ReferralServer: whois://(.+)#im', $ipwhois, $match))	{		if (strpos($match[1], ':') !== false)		{			$pos	= strrpos($match[1], ':');			$server	= substr($match[1], 0, $pos);			$port	= (int) substr($match[1], $pos + 1);			unset($pos);		}		else		{			$server	= $match[1];			$port	= 43;		}		$buffer = '';		if (($fsk = @fsockopen($server, $port)))		{			fputs($fsk, "$ip\r\n");			while (!feof($fsk))			{				$buffer .= fgets($fsk, 1024);			}			@fclose($fsk);		}		// Use the result from $whois_host if we don't get any result here		$ipwhois = (empty($buffer)) ? $ipwhois : $buffer;	}	$ipwhois = htmlspecialchars($ipwhois);	// Magic URL ;)	return trim(make_clickable($ipwhois, false, ''));}/*** Data validation ... used primarily but not exclusively by ucp modules** "Master" function for validating a range of data types*/function validate_data($data, $val_ary){	global $user;	$error = array();	foreach ($val_ary as $var => $val_seq)	{		if (!is_array($val_seq[0]))		{			$val_seq = array($val_seq);		}		foreach ($val_seq as $validate)		{			$function = array_shift($validate);			array_unshift($validate, $data[$var]);			if ($result = call_user_func_array('validate_' . $function, $validate))			{				// Since errors are checked later for their language file existence, we need to make sure custom errors are not adjusted.				$error[] = (empty($user->lang[$result . '_' . strtoupper($var)])) ? $result : $result . '_' . strtoupper($var);			}		}	}	return $error;}/*** Validate String** @return	boolean|string	Either false if validation succeeded or a string which will be used as the error message (with the variable name appended)*/function validate_string($string, $optional = false, $min = 0, $max = 0){	if (empty($string) && $optional)	{		return false;	}	if ($min && utf8_strlen(htmlspecialchars_decode($string)) < $min)	{		return 'TOO_SHORT';	}	else if ($max && utf8_strlen(htmlspecialchars_decode($string)) > $max)	{		return 'TOO_LONG';	}	return false;}/*** Validate Number** @return	boolean|string	Either false if validation succeeded or a string which will be used as the error message (with the variable name appended)*/function validate_num($num, $optional = false, $min = 0, $max = 1E99){	if (empty($num) && $optional)	{		return false;	}	if ($num < $min)	{		return 'TOO_SMALL';	}	else if ($num > $max)	{		return 'TOO_LARGE';	}	return false;}/*** Validate Date* @param String $string a date in the dd-mm-yyyy format* @return	boolean*/function validate_date($date_string, $optional = false){	$date = explode('-', $date_string);	if ((empty($date) || sizeof($date) != 3) && $optional)	{		return false;	}	else if ($optional)	{		for ($field = 0; $field <= 1; $field++)		{			$date[$field] = (int) $date[$field];			if (empty($date[$field]))			{				$date[$field] = 1;			}		}		$date[2] = (int) $date[2];		// assume an arbitrary leap year		if (empty($date[2]))		{			$date[2] = 1980;		}	}	if (sizeof($date) != 3 || !checkdate($date[1], $date[0], $date[2]))	{		return 'INVALID';	}	return false;}/*** Validate Match** @return	boolean|string	Either false if validation succeeded or a string which will be used as the error message (with the variable name appended)*/function validate_match($string, $optional = false, $match = ''){	if (empty($string) && $optional)	{		return false;	}	if (empty($match))	{		return false;	}	if (!preg_match($match, $string))	{		return 'WRONG_DATA';	}	return false;}/*** Validate Language Pack ISO Name** Tests whether a language name is valid and installed** @param string $lang_iso	The language string to test** @return bool|string		Either false if validation succeeded or*							a string which will be used as the error message*							(with the variable name appended)*/function validate_language_iso_name($lang_iso){	global $db;	$sql = 'SELECT lang_id		FROM ' . LANG_TABLE . "		WHERE lang_iso = '" . $db->sql_escape($lang_iso) . "'";	$result = $db->sql_query($sql);	$lang_id = (int) $db->sql_fetchfield('lang_id');	$db->sql_freeresult($result);	return ($lang_id) ? false : 'WRONG_DATA';}/*** Check to see if the username has been taken, or if it is disallowed.* Also checks if it includes the " character, which we don't allow in usernames.* Used for registering, changing names, and posting anonymously with a username** @param string $username The username to check* @param string $allowed_username An allowed username, default being $user->data['username']** @return	mixed	Either false if validation succeeded or a string which will be used as the error message (with the variable name appended)*/function validate_username($username, $allowed_username = false){	global $config, $db, $user, $cache;	$clean_username = utf8_clean_string($username);	$allowed_username = ($allowed_username === false) ? $user->data['username_clean'] : utf8_clean_string($allowed_username);	if ($allowed_username == $clean_username)	{		return false;	}	// ... fast checks first.	if (strpos($username, '&quot;') !== false || strpos($username, '"') !== false || empty($clean_username))	{		return 'INVALID_CHARS';	}	$mbstring = $pcre = false;	// generic UTF-8 character types supported?	if ((version_compare(PHP_VERSION, '5.1.0', '>=') || (version_compare(PHP_VERSION, '5.0.0-dev', '<=') && version_compare(PHP_VERSION, '4.4.0', '>='))) && @preg_match('/\p{L}/u', 'a') !== false)	{		$pcre = true;	}	else if (function_exists('mb_ereg_match'))	{		mb_regex_encoding('UTF-8');		$mbstring = true;	}	switch ($config['allow_name_chars'])	{		case 'USERNAME_CHARS_ANY':			$pcre = true;			$regex = '.+';		break;		case 'USERNAME_ALPHA_ONLY':			$pcre = true;			$regex = '[A-Za-z0-9]+';		break;		case 'USERNAME_ALPHA_SPACERS':			$pcre = true;			$regex = '[A-Za-z0-9-[\]_+ ]+';		break;		case 'USERNAME_LETTER_NUM':			if ($pcre)			{				$regex = '[\p{Lu}\p{Ll}\p{N}]+';			}			else if ($mbstring)			{				$regex = '[[:upper:][:lower:][:digit:]]+';			}			else			{				$pcre = true;				$regex = '[a-zA-Z0-9]+';			}		break;		case 'USERNAME_LETTER_NUM_SPACERS':			if ($pcre)			{				$regex = '[-\]_+ [\p{Lu}\p{Ll}\p{N}]+';			}			else if ($mbstring)			{				$regex = '[-\]_+ \[[:upper:][:lower:][:digit:]]+';			}			else			{				$pcre = true;				$regex = '[-\]_+ [a-zA-Z0-9]+';			}		break;		case 'USERNAME_ASCII':		default:			$pcre = true;			$regex = '[\x01-\x7F]+';		break;	}	if ($pcre)	{		if (!preg_match('#^' . $regex . '$#u', $username))		{			return 'INVALID_CHARS';		}	}	else if ($mbstring)	{		mb_ereg_search_init($username, '^' . $regex . '$');		if (!mb_ereg_search())		{			return 'INVALID_CHARS';		}	}	$sql = 'SELECT username		FROM ' . USERS_TABLE . "		WHERE username_clean = '" . $db->sql_escape($clean_username) . "'";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		return 'USERNAME_TAKEN';	}	$sql = 'SELECT group_name		FROM ' . GROUPS_TABLE . "		WHERE LOWER(group_name) = '" . $db->sql_escape(utf8_strtolower($username)) . "'";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		return 'USERNAME_TAKEN';	}	$bad_usernames = $cache->obtain_disallowed_usernames();	foreach ($bad_usernames as $bad_username)	{		if (preg_match('#^' . $bad_username . '$#', $clean_username))		{			return 'USERNAME_DISALLOWED';		}	}	return false;}/*** Check to see if the password meets the complexity settings** @return	boolean|string	Either false if validation succeeded or a string which will be used as the error message (with the variable name appended)*/function validate_password($password){	global $config, $db, $user;	if ($password === '' || $config['pass_complex'] === 'PASS_TYPE_ANY')	{		// Password empty or no password complexity required.		return false;	}	$pcre = $mbstring = false;	// generic UTF-8 character types supported?	if ((version_compare(PHP_VERSION, '5.1.0', '>=') || (version_compare(PHP_VERSION, '5.0.0-dev', '<=') && version_compare(PHP_VERSION, '4.4.0', '>='))) && @preg_match('/\p{L}/u', 'a') !== false)	{		$upp = '\p{Lu}';		$low = '\p{Ll}';		$num = '\p{N}';		$sym = '[^\p{Lu}\p{Ll}\p{N}]';		$pcre = true;	}	else if (function_exists('mb_ereg_match'))	{		mb_regex_encoding('UTF-8');		$upp = '[[:upper:]]';		$low = '[[:lower:]]';		$num = '[[:digit:]]';		$sym = '[^[:upper:][:lower:][:digit:]]';		$mbstring = true;	}	else	{		$upp = '[A-Z]';		$low = '[a-z]';		$num = '[0-9]';		$sym = '[^A-Za-z0-9]';		$pcre = true;	}	$chars = array();	switch ($config['pass_complex'])	{		// No break statements below ...		// We require strong passwords in case pass_complex is not set or is invalid		default:		// Require mixed case letters, numbers and symbols		case 'PASS_TYPE_SYMBOL':			$chars[] = $sym;		// Require mixed case letters and numbers		case 'PASS_TYPE_ALPHA':			$chars[] = $num;		// Require mixed case letters		case 'PASS_TYPE_CASE':			$chars[] = $low;			$chars[] = $upp;	}	if ($pcre)	{		foreach ($chars as $char)		{			if (!preg_match('#' . $char . '#u', $password))			{				return 'INVALID_CHARS';			}		}	}	else if ($mbstring)	{		foreach ($chars as $char)		{			if (mb_ereg($char, $password) === false)			{				return 'INVALID_CHARS';			}		}	}	return false;}/*** Check to see if email address is banned or already present in the DB** @param string $email The email to check* @param string $allowed_email An allowed email, default being $user->data['user_email']** @return mixed Either false if validation succeeded or a string which will be used as the error message (with the variable name appended)*/function validate_email($email, $allowed_email = false){	global $config, $db, $user;	$email = strtolower($email);	$allowed_email = ($allowed_email === false) ? strtolower($user->data['user_email']) : strtolower($allowed_email);	if ($allowed_email == $email)	{		return false;	}	if (!preg_match('/^' . get_preg_expression('email') . '$/i', $email))	{		return 'EMAIL_INVALID';	}	// Check MX record.	// The idea for this is from reading the UseBB blog/announcement. :)	if ($config['email_check_mx'])	{		list(, $domain) = explode('@', $email);		if (phpbb_checkdnsrr($domain, 'A') === false && phpbb_checkdnsrr($domain, 'MX') === false)		{			return 'DOMAIN_NO_MX_RECORD';		}	}	if (($ban_reason = $user->check_ban(false, false, $email, true)) !== false)	{		return ($ban_reason === true) ? 'EMAIL_BANNED' : $ban_reason;	}	if (!$config['allow_emailreuse'])	{		$sql = 'SELECT user_email_hash			FROM ' . USERS_TABLE . "			WHERE user_email_hash = " . $db->sql_escape(phpbb_email_hash($email));		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			return 'EMAIL_TAKEN';		}	}	return false;}/*** Validate jabber address* Taken from the jabber class within flyspray (see author notes)** @author flyspray.org*/function validate_jabber($jid){	if (!$jid)	{		return false;	}	$seperator_pos = strpos($jid, '@');	if ($seperator_pos === false)	{		return 'WRONG_DATA';	}	$username = substr($jid, 0, $seperator_pos);	$realm = substr($jid, $seperator_pos + 1);	if (strlen($username) == 0 || strlen($realm) < 3)	{		return 'WRONG_DATA';	}	$arr = explode('.', $realm);	if (sizeof($arr) == 0)	{		return 'WRONG_DATA';	}	foreach ($arr as $part)	{		if (substr($part, 0, 1) == '-' || substr($part, -1, 1) == '-')		{			return 'WRONG_DATA';		}		if (!preg_match("@^[a-zA-Z0-9-.]+$@", $part))		{			return 'WRONG_DATA';		}	}	$boundary = array(array(0, 127), array(192, 223), array(224, 239), array(240, 247), array(248, 251), array(252, 253));	// Prohibited Characters RFC3454 + RFC3920	$prohibited = array(		// Table C.1.1		array(0x0020, 0x0020),		// SPACE		// Table C.1.2		array(0x00A0, 0x00A0),		// NO-BREAK SPACE		array(0x1680, 0x1680),		// OGHAM SPACE MARK		array(0x2000, 0x2001),		// EN QUAD		array(0x2001, 0x2001),		// EM QUAD		array(0x2002, 0x2002),		// EN SPACE		array(0x2003, 0x2003),		// EM SPACE		array(0x2004, 0x2004),		// THREE-PER-EM SPACE		array(0x2005, 0x2005),		// FOUR-PER-EM SPACE		array(0x2006, 0x2006),		// SIX-PER-EM SPACE		array(0x2007, 0x2007),		// FIGURE SPACE		array(0x2008, 0x2008),		// PUNCTUATION SPACE		array(0x2009, 0x2009),		// THIN SPACE		array(0x200A, 0x200A),		// HAIR SPACE		array(0x200B, 0x200B),		// ZERO WIDTH SPACE		array(0x202F, 0x202F),		// NARROW NO-BREAK SPACE		array(0x205F, 0x205F),		// MEDIUM MATHEMATICAL SPACE		array(0x3000, 0x3000),		// IDEOGRAPHIC SPACE		// Table C.2.1		array(0x0000, 0x001F),		// [CONTROL CHARACTERS]		array(0x007F, 0x007F),		// DELETE		// Table C.2.2		array(0x0080, 0x009F),		// [CONTROL CHARACTERS]		array(0x06DD, 0x06DD),		// ARABIC END OF AYAH		array(0x070F, 0x070F),		// SYRIAC ABBREVIATION MARK		array(0x180E, 0x180E),		// MONGOLIAN VOWEL SEPARATOR		array(0x200C, 0x200C), 		// ZERO WIDTH NON-JOINER		array(0x200D, 0x200D),		// ZERO WIDTH JOINER		array(0x2028, 0x2028),		// LINE SEPARATOR		array(0x2029, 0x2029),		// PARAGRAPH SEPARATOR		array(0x2060, 0x2060),		// WORD JOINER		array(0x2061, 0x2061),		// FUNCTION APPLICATION		array(0x2062, 0x2062),		// INVISIBLE TIMES		array(0x2063, 0x2063),		// INVISIBLE SEPARATOR		array(0x206A, 0x206F),		// [CONTROL CHARACTERS]		array(0xFEFF, 0xFEFF),		// ZERO WIDTH NO-BREAK SPACE		array(0xFFF9, 0xFFFC),		// [CONTROL CHARACTERS]		array(0x1D173, 0x1D17A),	// [MUSICAL CONTROL CHARACTERS]		// Table C.3		array(0xE000, 0xF8FF),		// [PRIVATE USE, PLANE 0]		array(0xF0000, 0xFFFFD),	// [PRIVATE USE, PLANE 15]		array(0x100000, 0x10FFFD),	// [PRIVATE USE, PLANE 16]		// Table C.4		array(0xFDD0, 0xFDEF),		// [NONCHARACTER CODE POINTS]		array(0xFFFE, 0xFFFF),		// [NONCHARACTER CODE POINTS]		array(0x1FFFE, 0x1FFFF),	// [NONCHARACTER CODE POINTS]		array(0x2FFFE, 0x2FFFF),	// [NONCHARACTER CODE POINTS]		array(0x3FFFE, 0x3FFFF),	// [NONCHARACTER CODE POINTS]		array(0x4FFFE, 0x4FFFF),	// [NONCHARACTER CODE POINTS]		array(0x5FFFE, 0x5FFFF),	// [NONCHARACTER CODE POINTS]		array(0x6FFFE, 0x6FFFF),	// [NONCHARACTER CODE POINTS]		array(0x7FFFE, 0x7FFFF),	// [NONCHARACTER CODE POINTS]		array(0x8FFFE, 0x8FFFF),	// [NONCHARACTER CODE POINTS]		array(0x9FFFE, 0x9FFFF),	// [NONCHARACTER CODE POINTS]		array(0xAFFFE, 0xAFFFF),	// [NONCHARACTER CODE POINTS]		array(0xBFFFE, 0xBFFFF),	// [NONCHARACTER CODE POINTS]		array(0xCFFFE, 0xCFFFF),	// [NONCHARACTER CODE POINTS]		array(0xDFFFE, 0xDFFFF),	// [NONCHARACTER CODE POINTS]		array(0xEFFFE, 0xEFFFF),	// [NONCHARACTER CODE POINTS]		array(0xFFFFE, 0xFFFFF),	// [NONCHARACTER CODE POINTS]		array(0x10FFFE, 0x10FFFF),	// [NONCHARACTER CODE POINTS]		// Table C.5		array(0xD800, 0xDFFF),		// [SURROGATE CODES]		// Table C.6		array(0xFFF9, 0xFFF9),		// INTERLINEAR ANNOTATION ANCHOR		array(0xFFFA, 0xFFFA),		// INTERLINEAR ANNOTATION SEPARATOR		array(0xFFFB, 0xFFFB),		// INTERLINEAR ANNOTATION TERMINATOR		array(0xFFFC, 0xFFFC),		// OBJECT REPLACEMENT CHARACTER		array(0xFFFD, 0xFFFD),		// REPLACEMENT CHARACTER		// Table C.7		array(0x2FF0, 0x2FFB),		// [IDEOGRAPHIC DESCRIPTION CHARACTERS]		// Table C.8		array(0x0340, 0x0340),		// COMBINING GRAVE TONE MARK		array(0x0341, 0x0341),		// COMBINING ACUTE TONE MARK		array(0x200E, 0x200E),		// LEFT-TO-RIGHT MARK		array(0x200F, 0x200F),		// RIGHT-TO-LEFT MARK		array(0x202A, 0x202A),		// LEFT-TO-RIGHT EMBEDDING		array(0x202B, 0x202B),		// RIGHT-TO-LEFT EMBEDDING		array(0x202C, 0x202C),		// POP DIRECTIONAL FORMATTING		array(0x202D, 0x202D),		// LEFT-TO-RIGHT OVERRIDE		array(0x202E, 0x202E),		// RIGHT-TO-LEFT OVERRIDE		array(0x206A, 0x206A),		// INHIBIT SYMMETRIC SWAPPING		array(0x206B, 0x206B),		// ACTIVATE SYMMETRIC SWAPPING		array(0x206C, 0x206C),		// INHIBIT ARABIC FORM SHAPING		array(0x206D, 0x206D),		// ACTIVATE ARABIC FORM SHAPING		array(0x206E, 0x206E),		// NATIONAL DIGIT SHAPES		array(0x206F, 0x206F),		// NOMINAL DIGIT SHAPES		// Table C.9		array(0xE0001, 0xE0001),	// LANGUAGE TAG		array(0xE0020, 0xE007F),	// [TAGGING CHARACTERS]		// RFC3920		array(0x22, 0x22),			// "		array(0x26, 0x26),			// &		array(0x27, 0x27),			// '		array(0x2F, 0x2F),			// /		array(0x3A, 0x3A),			// :		array(0x3C, 0x3C),			// <		array(0x3E, 0x3E),			// >		array(0x40, 0x40)			// @	);	$pos = 0;	$result = true;	while ($pos < strlen($username))	{		$len = $uni = 0;		for ($i = 0; $i <= 5; $i++)		{			if (ord($username[$pos]) >= $boundary[$i][0] && ord($username[$pos]) <= $boundary[$i][1])			{				$len = $i + 1;				$uni = (ord($username[$pos]) - $boundary[$i][0]) * pow(2, $i * 6);				for ($k = 1; $k < $len; $k++)				{					$uni += (ord($username[$pos + $k]) - 128) * pow(2, ($i - $k) * 6);				}				break;			}		}		if ($len == 0)		{			return 'WRONG_DATA';		}		foreach ($prohibited as $pval)		{			if ($uni >= $pval[0] && $uni <= $pval[1])			{				$result = false;				break 2;			}		}		$pos = $pos + $len;	}	if (!$result)	{		return 'WRONG_DATA';	}	return false;}/*** Remove avatar*/function avatar_delete($mode, $row, $clean_db = false){	global $phpbb_root_path, $config, $db, $user;	// Check if the users avatar is actually *not* a group avatar	if ($mode == 'user')	{		if (strpos($row['user_avatar'], 'g') === 0 || (((int)$row['user_avatar'] !== 0) && ((int)$row['user_avatar'] !== (int)$row['user_id'])))		{			return false;		}	}	if ($clean_db)	{		avatar_remove_db($row[$mode . '_avatar']);	}	$filename = get_avatar_filename($row[$mode . '_avatar']);	if (file_exists($phpbb_root_path . $config['avatar_path'] . '/' . $filename))	{		@unlink($phpbb_root_path . $config['avatar_path'] . '/' . $filename);		return true;	}	return false;}/*** Remote avatar linkage*/function avatar_remote($data, &$error){	global $config, $db, $user, $phpbb_root_path, $phpEx;	if (!preg_match('#^(http|https|ftp)://#i', $data['remotelink']))	{		$data['remotelink'] = 'http://' . $data['remotelink'];	}	if (!preg_match('#^(http|https|ftp)://(?:(.*?\.)*?[a-z0-9\-]+?\.[a-z]{2,4}|(?:\d{1,3}\.){3,5}\d{1,3}):?([0-9]*?).*?\.(gif|jpg|jpeg|png)$#i', $data['remotelink']))	{		$error[] = $user->lang['AVATAR_URL_INVALID'];		return false;	}	// Make sure getimagesize works...	if (($image_data = @getimagesize($data['remotelink'])) === false && (empty($data['width']) || empty($data['height'])))	{		$error[] = $user->lang['UNABLE_GET_IMAGE_SIZE'];		return false;	}	if (!empty($image_data) && ($image_data[0] < 2 || $image_data[1] < 2))	{		$error[] = $user->lang['AVATAR_NO_SIZE'];		return false;	}	$width = ($data['width'] && $data['height']) ? $data['width'] : $image_data[0];	$height = ($data['width'] && $data['height']) ? $data['height'] : $image_data[1];	if ($width < 2 || $height < 2)	{		$error[] = $user->lang['AVATAR_NO_SIZE'];		return false;	}	// Check image type	include_once($phpbb_root_path . 'includes/functions_upload.' . $phpEx);	$types = fileupload::image_types();	$extension = strtolower(filespec::get_extension($data['remotelink']));	if (!empty($image_data) && (!isset($types[$image_data[2]]) || !in_array($extension, $types[$image_data[2]])))	{		if (!isset($types[$image_data[2]]))		{			$error[] = $user->lang['UNABLE_GET_IMAGE_SIZE'];		}		else		{			$error[] = sprintf($user->lang['IMAGE_FILETYPE_MISMATCH'], $types[$image_data[2]][0], $extension);		}		return false;	}	if ($config['avatar_max_width'] || $config['avatar_max_height'])	{		if ($width > $config['avatar_max_width'] || $height > $config['avatar_max_height'])		{			$error[] = sprintf($user->lang['AVATAR_WRONG_SIZE'], $config['avatar_min_width'], $config['avatar_min_height'], $config['avatar_max_width'], $config['avatar_max_height'], $width, $height);			return false;		}	}	if ($config['avatar_min_width'] || $config['avatar_min_height'])	{		if ($width < $config['avatar_min_width'] || $height < $config['avatar_min_height'])		{			$error[] = sprintf($user->lang['AVATAR_WRONG_SIZE'], $config['avatar_min_width'], $config['avatar_min_height'], $config['avatar_max_width'], $config['avatar_max_height'], $width, $height);			return false;		}	}	return array(AVATAR_REMOTE, $data['remotelink'], $width, $height);}/*** Avatar upload using the upload class*/function avatar_upload($data, &$error){	global $phpbb_root_path, $config, $db, $user, $phpEx;	// Init upload class	include_once($phpbb_root_path . 'includes/functions_upload.' . $phpEx);	$upload = new fileupload('AVATAR_', array('jpg', 'jpeg', 'gif', 'png'), $config['avatar_filesize'], $config['avatar_min_width'], $config['avatar_min_height'], $config['avatar_max_width'], $config['avatar_max_height'], (isset($config['mime_triggers']) ? explode('|', $config['mime_triggers']) : false));	if (!empty($_FILES['uploadfile']['name']))	{		$file = $upload->form_upload('uploadfile');	}	else	{		$file = $upload->remote_upload($data['uploadurl']);	}	$prefix = $config['avatar_salt'] . '_';	$file->clean_filename('avatar', $prefix, $data['user_id']);	$destination = $config['avatar_path'];	// Adjust destination path (no trailing slash)	if (substr($destination, -1, 1) == '/' || substr($destination, -1, 1) == '\\')	{		$destination = substr($destination, 0, -1);	}	$destination = str_replace(array('../', '..\\', './', '.\\'), '', $destination);	if ($destination && ($destination[0] == '/' || $destination[0] == "\\"))	{		$destination = '';	}	// Move file and overwrite any existing image	$file->move_file($destination, true);	if (sizeof($file->error))	{		$file->remove();		$error = array_merge($error, $file->error);	}	return array(AVATAR_UPLOAD, $data['user_id'] . '_' . time() . '.' . $file->get('extension'), $file->get('width'), $file->get('height'));}/*** Generates avatar filename from the database entry*/function get_avatar_filename($avatar_entry){	global $config;	if ($avatar_entry[0] === 'g')	{		$avatar_group = true;		$avatar_entry = substr($avatar_entry, 1);	}	else	{		$avatar_group = false;	}	$ext 			= substr(strrchr($avatar_entry, '.'), 1);	$avatar_entry	= intval($avatar_entry);	return $config['avatar_salt'] . '_' . (($avatar_group) ? 'g' : '') . $avatar_entry . '.' . $ext;}/*** Avatar Gallery*/function avatar_gallery($category, $avatar_select, $items_per_column, $block_var = 'avatar_row'){	global $user, $cache, $template;	global $config, $phpbb_root_path;	$avatar_list = array();	$path = $phpbb_root_path . $config['avatar_gallery_path'];	if (!file_exists($path) || !is_dir($path))	{		$avatar_list = array($user->lang['NO_AVATAR_CATEGORY'] => array());	}	else	{		// Collect images		$dp = @opendir($path);		if (!$dp)		{			return array($user->lang['NO_AVATAR_CATEGORY'] => array());		}		while (($file = readdir($dp)) !== false)		{			if ($file[0] != '.' && preg_match('#^[^&"\'<>]+$#i', $file) && is_dir("$path/$file"))			{				$avatar_row_count = $avatar_col_count = 0;				if ($dp2 = @opendir("$path/$file"))				{					while (($sub_file = readdir($dp2)) !== false)					{						if (preg_match('#^[^&\'"<>]+\.(?:gif|png|jpe?g)$#i', $sub_file))						{							$avatar_list[$file][$avatar_row_count][$avatar_col_count] = array(								'file'		=> rawurlencode($file) . '/' . rawurlencode($sub_file),								'filename'	=> rawurlencode($sub_file),								'name'		=> ucfirst(str_replace('_', ' ', preg_replace('#^(.*)\..*$#', '\1', $sub_file))),							);							$avatar_col_count++;							if ($avatar_col_count == $items_per_column)							{								$avatar_row_count++;								$avatar_col_count = 0;							}						}					}					closedir($dp2);				}			}		}		closedir($dp);	}	if (!sizeof($avatar_list))	{		$avatar_list = array($user->lang['NO_AVATAR_CATEGORY'] => array());	}	@ksort($avatar_list);	$category = (!$category) ? key($avatar_list) : $category;	$avatar_categories = array_keys($avatar_list);	$s_category_options = '';	foreach ($avatar_categories as $cat)	{		$s_category_options .= '<option value="' . $cat . '"' . (($cat == $category) ? ' selected="selected"' : '') . '>' . $cat . '</option>';	}	$template->assign_vars(array(		'S_AVATARS_ENABLED'		=> true,		'S_IN_AVATAR_GALLERY'	=> true,		'S_CAT_OPTIONS'			=> $s_category_options)	);	$avatar_list = (isset($avatar_list[$category])) ? $avatar_list[$category] : array();	foreach ($avatar_list as $avatar_row_ary)	{		$template->assign_block_vars($block_var, array());		foreach ($avatar_row_ary as $avatar_col_ary)		{			$template->assign_block_vars($block_var . '.avatar_column', array(				'AVATAR_IMAGE'	=> $phpbb_root_path . $config['avatar_gallery_path'] . '/' . $avatar_col_ary['file'],				'AVATAR_NAME'	=> $avatar_col_ary['name'],				'AVATAR_FILE'	=> $avatar_col_ary['filename'])			);			$template->assign_block_vars($block_var . '.avatar_option_column', array(				'AVATAR_IMAGE'	=> $phpbb_root_path . $config['avatar_gallery_path'] . '/' . $avatar_col_ary['file'],				'S_OPTIONS_AVATAR'	=> $avatar_col_ary['filename'])			);		}	}	return $avatar_list;}/*** Tries to (re-)establish avatar dimensions*/function avatar_get_dimensions($avatar, $avatar_type, &$error, $current_x = 0, $current_y = 0){	global $config, $phpbb_root_path, $user;	switch ($avatar_type)	{		case AVATAR_REMOTE :			break;		case AVATAR_UPLOAD :			$avatar = $phpbb_root_path . $config['avatar_path'] . '/' . get_avatar_filename($avatar);			break;		case AVATAR_GALLERY :			$avatar = $phpbb_root_path . $config['avatar_gallery_path'] . '/' . $avatar ;			break;	}	// Make sure getimagesize works...	if (($image_data = @getimagesize($avatar)) === false)	{		$error[] = $user->lang['UNABLE_GET_IMAGE_SIZE'];		return false;	}	if ($image_data[0] < 2 || $image_data[1] < 2)	{		$error[] = $user->lang['AVATAR_NO_SIZE'];		return false;	}	// try to maintain ratio	if (!(empty($current_x) && empty($current_y)))	{		if ($current_x != 0)		{			$image_data[1] = (int) floor(($current_x / $image_data[0]) * $image_data[1]);			$image_data[1] = min($config['avatar_max_height'], $image_data[1]);			$image_data[1] = max($config['avatar_min_height'], $image_data[1]);		}		if ($current_y != 0)		{			$image_data[0] = (int) floor(($current_y / $image_data[1]) * $image_data[0]);			$image_data[0] = min($config['avatar_max_width'], $image_data[1]);			$image_data[0] = max($config['avatar_min_width'], $image_data[1]);		}	}	return array($image_data[0], $image_data[1]);}/*** Uploading/Changing user avatar*/function avatar_process_user(&$error, $custom_userdata = false, $can_upload = null){	global $config, $phpbb_root_path, $auth, $user, $db;	$data = array(		'uploadurl'		=> request_var('uploadurl', ''),		'remotelink'	=> request_var('remotelink', ''),		'width'			=> request_var('width', 0),		'height'		=> request_var('height', 0),	);	$error = validate_data($data, array(		'uploadurl'		=> array('string', true, 5, 255),		'remotelink'	=> array('string', true, 5, 255),		'width'			=> array('string', true, 1, 3),		'height'		=> array('string', true, 1, 3),	));	if (sizeof($error))	{		return false;	}	$sql_ary = array();	if ($custom_userdata === false)	{		$userdata = &$user->data;	}	else	{		$userdata = &$custom_userdata;	}	$data['user_id'] = $userdata['user_id'];	$change_avatar = ($custom_userdata === false) ? $auth->acl_get('u_chgavatar') : true;	$avatar_select = basename(request_var('avatar_select', ''));	// Can we upload?	if (is_null($can_upload))	{		$can_upload = ($config['allow_avatar_upload'] && file_exists($phpbb_root_path . $config['avatar_path']) && phpbb_is_writable($phpbb_root_path . $config['avatar_path']) && $change_avatar && (@ini_get('file_uploads') || strtolower(@ini_get('file_uploads')) == 'on')) ? true : false;	}	if ((!empty($_FILES['uploadfile']['name']) || $data['uploadurl']) && $can_upload)	{		list($sql_ary['user_avatar_type'], $sql_ary['user_avatar'], $sql_ary['user_avatar_width'], $sql_ary['user_avatar_height']) = avatar_upload($data, $error);	}	else if ($data['remotelink'] && $change_avatar && $config['allow_avatar_remote'])	{		list($sql_ary['user_avatar_type'], $sql_ary['user_avatar'], $sql_ary['user_avatar_width'], $sql_ary['user_avatar_height']) = avatar_remote($data, $error);	}	else if ($avatar_select && $change_avatar && $config['allow_avatar_local'])	{		$category = basename(request_var('category', ''));		$sql_ary['user_avatar_type'] = AVATAR_GALLERY;		$sql_ary['user_avatar'] = $avatar_select;		// check avatar gallery		if (!is_dir($phpbb_root_path . $config['avatar_gallery_path'] . '/' . $category))		{			$sql_ary['user_avatar'] = '';			$sql_ary['user_avatar_type'] = $sql_ary['user_avatar_width'] = $sql_ary['user_avatar_height'] = 0;		}		else		{			list($sql_ary['user_avatar_width'], $sql_ary['user_avatar_height']) = getimagesize($phpbb_root_path . $config['avatar_gallery_path'] . '/' . $category . '/' . urldecode($sql_ary['user_avatar']));			$sql_ary['user_avatar'] = $category . '/' . $sql_ary['user_avatar'];		}	}	else if (isset($_POST['delete']) && $change_avatar)	{		$sql_ary['user_avatar'] = '';		$sql_ary['user_avatar_type'] = $sql_ary['user_avatar_width'] = $sql_ary['user_avatar_height'] = 0;	}	else if (!empty($userdata['user_avatar']))	{		// Only update the dimensions		if (empty($data['width']) || empty($data['height']))		{			if ($dims = avatar_get_dimensions($userdata['user_avatar'], $userdata['user_avatar_type'], $error, $data['width'], $data['height']))			{				list($guessed_x, $guessed_y) = $dims;				if (empty($data['width']))				{					$data['width'] = $guessed_x;				}				if (empty($data['height']))				{					$data['height'] = $guessed_y;				}			}		}		if (($config['avatar_max_width'] || $config['avatar_max_height']) &&			(($data['width'] != $userdata['user_avatar_width']) || $data['height'] != $userdata['user_avatar_height']))		{			if ($data['width'] > $config['avatar_max_width'] || $data['height'] > $config['avatar_max_height'])			{				$error[] = sprintf($user->lang['AVATAR_WRONG_SIZE'], $config['avatar_min_width'], $config['avatar_min_height'], $config['avatar_max_width'], $config['avatar_max_height'], $data['width'], $data['height']);			}		}		if (!sizeof($error))		{			if ($config['avatar_min_width'] || $config['avatar_min_height'])			{				if ($data['width'] < $config['avatar_min_width'] || $data['height'] < $config['avatar_min_height'])				{					$error[] = sprintf($user->lang['AVATAR_WRONG_SIZE'], $config['avatar_min_width'], $config['avatar_min_height'], $config['avatar_max_width'], $config['avatar_max_height'], $data['width'], $data['height']);				}			}		}		if (!sizeof($error))		{			$sql_ary['user_avatar_width'] = $data['width'];			$sql_ary['user_avatar_height'] = $data['height'];		}	}	if (!sizeof($error))	{		// Do we actually have any data to update?		if (sizeof($sql_ary))		{			$ext_new = $ext_old = '';			if (isset($sql_ary['user_avatar']))			{				$userdata = ($custom_userdata === false) ? $user->data : $custom_userdata;				$ext_new = (empty($sql_ary['user_avatar'])) ? '' : substr(strrchr($sql_ary['user_avatar'], '.'), 1);				$ext_old = (empty($userdata['user_avatar'])) ? '' : substr(strrchr($userdata['user_avatar'], '.'), 1);				if ($userdata['user_avatar_type'] == AVATAR_UPLOAD)				{					// Delete old avatar if present					if ((!empty($userdata['user_avatar']) && empty($sql_ary['user_avatar']))					   || ( !empty($userdata['user_avatar']) && !empty($sql_ary['user_avatar']) && $ext_new !== $ext_old))					{						avatar_delete('user', $userdata);					}				}			}			$sql = 'UPDATE ' . USERS_TABLE . '				SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '				WHERE user_id = ' . (($custom_userdata === false) ? $user->data['user_id'] : $custom_userdata['user_id']);			$db->sql_query($sql);		}	}	return (sizeof($error)) ? false : true;}//// Usergroup functions///*** Add or edit a group. If we're editing a group we only update user* parameters such as rank, etc. if they are changed*/function group_create(&$group_id, $type, $name, $desc, $group_attributes, $allow_desc_bbcode = false, $allow_desc_urls = false, $allow_desc_smilies = false){	global $phpbb_root_path, $config, $db, $user, $file_upload;	$error = array();	// Attributes which also affect the users table	$user_attribute_ary = array('group_colour', 'group_rank', 'group_avatar', 'group_avatar_type', 'group_avatar_width', 'group_avatar_height');	// Check data. Limit group name length.	if (!utf8_strlen($name) || utf8_strlen($name) > 60)	{		$error[] = (!utf8_strlen($name)) ? $user->lang['GROUP_ERR_USERNAME'] : $user->lang['GROUP_ERR_USER_LONG'];	}	$err = group_validate_groupname($group_id, $name);	if (!empty($err))	{		$error[] = $user->lang[$err];	}	if (!in_array($type, array(GROUP_OPEN, GROUP_CLOSED, GROUP_HIDDEN, GROUP_SPECIAL, GROUP_FREE)))	{		$error[] = $user->lang['GROUP_ERR_TYPE'];	}	if (!sizeof($error))	{		$user_ary = array();		$sql_ary = array(			'group_name'			=> (string) $name,			'group_desc'			=> (string) $desc,			'group_desc_uid'		=> '',			'group_desc_bitfield'	=> '',			'group_type'			=> (int) $type,		);		// Parse description		if ($desc)		{			generate_text_for_storage($sql_ary['group_desc'], $sql_ary['group_desc_uid'], $sql_ary['group_desc_bitfield'], $sql_ary['group_desc_options'], $allow_desc_bbcode, $allow_desc_urls, $allow_desc_smilies);		}		if (sizeof($group_attributes))		{			// Merge them with $sql_ary to properly update the group			$sql_ary = array_merge($sql_ary, $group_attributes);		}		// Setting the log message before we set the group id (if group gets added)		$log = ($group_id) ? 'LOG_GROUP_UPDATED' : 'LOG_GROUP_CREATED';		$query = '';		if ($group_id)		{			$sql = 'SELECT user_id				FROM ' . USERS_TABLE . '				WHERE group_id = ' . $group_id;			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$user_ary[] = $row['user_id'];			}			$db->sql_freeresult($result);			if (isset($sql_ary['group_avatar']) && !$sql_ary['group_avatar'])			{				remove_default_avatar($group_id, $user_ary);			}			if (isset($sql_ary['group_rank']) && !$sql_ary['group_rank'])			{				remove_default_rank($group_id, $user_ary);			}			$sql = 'UPDATE ' . GROUPS_TABLE . '				SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "				WHERE group_id = $group_id";			$db->sql_query($sql);			// Since we may update the name too, we need to do this on other tables too...			$sql = 'UPDATE ' . MODERATOR_CACHE_TABLE . "				SET group_name = '" . $db->sql_escape($sql_ary['group_name']) . "'				WHERE group_id = $group_id";			$db->sql_query($sql);			// One special case is the group skip auth setting. If this was changed we need to purge permissions for this group			if (isset($group_attributes['group_skip_auth']))			{				// Get users within this group...				$sql = 'SELECT user_id					FROM ' . USER_GROUP_TABLE . '					WHERE group_id = ' . $group_id . '						AND user_pending = 0';				$result = $db->sql_query($sql);				$user_id_ary = array();				while ($row = $db->sql_fetchrow($result))				{					$user_id_ary[] = $row['user_id'];				}				$db->sql_freeresult($result);				if (!empty($user_id_ary))				{					global $auth;					// Clear permissions cache of relevant users					$auth->acl_clear_prefetch($user_id_ary);				}			}		}		else		{			$sql = 'INSERT INTO ' . GROUPS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);			$db->sql_query($sql);		}		if (!$group_id)		{			$group_id = $db->sql_nextid();			if (isset($sql_ary['group_avatar_type']) && $sql_ary['group_avatar_type'] == AVATAR_UPLOAD)			{				group_correct_avatar($group_id, $sql_ary['group_avatar']);			}		}		// Set user attributes		$sql_ary = array();		if (sizeof($group_attributes))		{			// Go through the user attributes array, check if a group attribute matches it and then set it. ;)			foreach ($user_attribute_ary as $attribute)			{				if (!isset($group_attributes[$attribute]))				{					continue;				}				// If we are about to set an avatar, we will not overwrite user avatars if no group avatar is set...				if (strpos($attribute, 'group_avatar') === 0 && !$group_attributes[$attribute])				{					continue;				}				$sql_ary[$attribute] = $group_attributes[$attribute];			}		}		if (sizeof($sql_ary) && sizeof($user_ary))		{			group_set_user_default($group_id, $user_ary, $sql_ary);		}		$name = ($type == GROUP_SPECIAL) ? $user->lang['G_' . $name] : $name;		add_log('admin', $log, $name);		group_update_listings($group_id);	}	return (sizeof($error)) ? $error : false;}/*** Changes a group avatar's filename to conform to the naming scheme*/function group_correct_avatar($group_id, $old_entry){	global $config, $db, $phpbb_root_path;	$group_id		= (int)$group_id;	$ext 			= substr(strrchr($old_entry, '.'), 1);	$old_filename 	= get_avatar_filename($old_entry);	$new_filename 	= $config['avatar_salt'] . "_g$group_id.$ext";	$new_entry 		= 'g' . $group_id . '_' . substr(time(), -5) . ".$ext";	$avatar_path = $phpbb_root_path . $config['avatar_path'];	if (@rename($avatar_path . '/'. $old_filename, $avatar_path . '/' . $new_filename))	{		$sql = 'UPDATE ' . GROUPS_TABLE . '			SET group_avatar = \'' . $db->sql_escape($new_entry) . "'			WHERE group_id = $group_id";		$db->sql_query($sql);	}}/*** Remove avatar also for users not having the group as default*/function avatar_remove_db($avatar_name){	global $config, $db;	$sql = 'UPDATE ' . USERS_TABLE . "		SET user_avatar = '',		user_avatar_type = 0		WHERE user_avatar = '" . $db->sql_escape($avatar_name) . '\'';	$db->sql_query($sql);}/*** Group Delete*/function group_delete($group_id, $group_name = false){	global $db, $phpbb_root_path, $phpEx;	if (!$group_name)	{		$group_name = get_group_name($group_id);	}	$start = 0;	do	{		$user_id_ary = $username_ary = array();		// Batch query for group members, call group_user_del		$sql = 'SELECT u.user_id, u.username			FROM ' . USER_GROUP_TABLE . ' ug, ' . USERS_TABLE . " u			WHERE ug.group_id = $group_id				AND u.user_id = ug.user_id";		$result = $db->sql_query_limit($sql, 200, $start);		if ($row = $db->sql_fetchrow($result))		{			do			{				$user_id_ary[] = $row['user_id'];				$username_ary[] = $row['username'];				$start++;			}			while ($row = $db->sql_fetchrow($result));			group_user_del($group_id, $user_id_ary, $username_ary, $group_name);		}		else		{			$start = 0;		}		$db->sql_freeresult($result);	}	while ($start);	// Delete group	$sql = 'DELETE FROM ' . GROUPS_TABLE . "		WHERE group_id = $group_id";	$db->sql_query($sql);	// Delete auth entries from the groups table	$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . "		WHERE group_id = $group_id";	$db->sql_query($sql);	// Re-cache moderators	if (!function_exists('cache_moderators'))	{		include($phpbb_root_path . 'includes/functions_admin.' . $phpEx);	}	cache_moderators();	add_log('admin', 'LOG_GROUP_DELETE', $group_name);	// Return false - no error	return false;}/*** Add user(s) to group** @return mixed false if no errors occurred, else the user lang string for the relevant error, for example 'NO_USER'*/function group_user_add($group_id, $user_id_ary = false, $username_ary = false, $group_name = false, $default = false, $leader = 0, $pending = 0, $group_attributes = false){	global $db, $auth;	// We need both username and user_id info	$result = user_get_id_name($user_id_ary, $username_ary);	if (!sizeof($user_id_ary) || $result !== false)	{		return 'NO_USER';	}	// Remove users who are already members of this group	$sql = 'SELECT user_id, group_leader		FROM ' . USER_GROUP_TABLE . '		WHERE ' . $db->sql_in_set('user_id', $user_id_ary) . "			AND group_id = $group_id";	$result = $db->sql_query($sql);	$add_id_ary = $update_id_ary = array();	while ($row = $db->sql_fetchrow($result))	{		$add_id_ary[] = (int) $row['user_id'];		if ($leader && !$row['group_leader'])		{			$update_id_ary[] = (int) $row['user_id'];		}	}	$db->sql_freeresult($result);	// Do all the users exist in this group?	$add_id_ary = array_diff($user_id_ary, $add_id_ary);	// If we have no users	if (!sizeof($add_id_ary) && !sizeof($update_id_ary))	{		return 'GROUP_USERS_EXIST';	}	$db->sql_transaction('begin');	// Insert the new users	if (sizeof($add_id_ary))	{		$sql_ary = array();		foreach ($add_id_ary as $user_id)		{			$sql_ary[] = array(				'user_id'		=> (int) $user_id,				'group_id'		=> (int) $group_id,				'group_leader'	=> (int) $leader,				'user_pending'	=> (int) $pending,			);		}		$db->sql_multi_insert(USER_GROUP_TABLE, $sql_ary);	}	if (sizeof($update_id_ary))	{		$sql = 'UPDATE ' . USER_GROUP_TABLE . '			SET group_leader = 1			WHERE ' . $db->sql_in_set('user_id', $update_id_ary) . "				AND group_id = $group_id";		$db->sql_query($sql);	}	if ($default)	{		group_user_attributes('default', $group_id, $user_id_ary, false, $group_name, $group_attributes);	}	$db->sql_transaction('commit');	// Clear permissions cache of relevant users	$auth->acl_clear_prefetch($user_id_ary);	if (!$group_name)	{		$group_name = get_group_name($group_id);	}	$log = ($leader) ? 'LOG_MODS_ADDED' : (($pending) ? 'LOG_USERS_PENDING' : 'LOG_USERS_ADDED');	add_log('admin', $log, $group_name, implode(', ', $username_ary));	group_update_listings($group_id);	// Return false - no error	return false;}/*** Remove a user/s from a given group. When we remove users we update their* default group_id. We do this by examining which "special" groups they belong* to. The selection is made based on a reasonable priority system** @return false if no errors occurred, else the user lang string for the relevant error, for example 'NO_USER'*/function group_user_del($group_id, $user_id_ary = false, $username_ary = false, $group_name = false){	global $db, $auth, $config;	if ($config['coppa_enable'])	{		$group_order = array('ADMINISTRATORS', 'GLOBAL_MODERATORS', 'NEWLY_REGISTERED', 'REGISTERED_COPPA', 'REGISTERED', 'BOTS', 'GUESTS');	}	else	{		$group_order = array('ADMINISTRATORS', 'GLOBAL_MODERATORS', 'NEWLY_REGISTERED', 'REGISTERED', 'BOTS', 'GUESTS');	}	// We need both username and user_id info	$result = user_get_id_name($user_id_ary, $username_ary);	if (!sizeof($user_id_ary) || $result !== false)	{		return 'NO_USER';	}	$sql = 'SELECT *		FROM ' . GROUPS_TABLE . '		WHERE ' . $db->sql_in_set('group_name', $group_order);	$result = $db->sql_query($sql);	$group_order_id = $special_group_data = array();	while ($row = $db->sql_fetchrow($result))	{		$group_order_id[$row['group_name']] = $row['group_id'];		$special_group_data[$row['group_id']] = array(			'group_colour'			=> $row['group_colour'],			'group_rank'				=> $row['group_rank'],		);		// Only set the group avatar if one is defined...		if ($row['group_avatar'])		{			$special_group_data[$row['group_id']] = array_merge($special_group_data[$row['group_id']], array(				'group_avatar'			=> $row['group_avatar'],				'group_avatar_type'		=> $row['group_avatar_type'],				'group_avatar_width'		=> $row['group_avatar_width'],				'group_avatar_height'	=> $row['group_avatar_height'])			);		}	}	$db->sql_freeresult($result);	// Get users default groups - we only need to reset default group membership if the group from which the user gets removed is set as default	$sql = 'SELECT user_id, group_id		FROM ' . USERS_TABLE . '		WHERE ' . $db->sql_in_set('user_id', $user_id_ary);	$result = $db->sql_query($sql);	$default_groups = array();	while ($row = $db->sql_fetchrow($result))	{		$default_groups[$row['user_id']] = $row['group_id'];	}	$db->sql_freeresult($result);	// What special group memberships exist for these users?	$sql = 'SELECT g.group_id, g.group_name, ug.user_id		FROM ' . USER_GROUP_TABLE . ' ug, ' . GROUPS_TABLE . ' g		WHERE ' . $db->sql_in_set('ug.user_id', $user_id_ary) . "			AND g.group_id = ug.group_id			AND g.group_id <> $group_id			AND g.group_type = " . GROUP_SPECIAL . '		ORDER BY ug.user_id, g.group_id';	$result = $db->sql_query($sql);	$temp_ary = array();	while ($row = $db->sql_fetchrow($result))	{		if ($default_groups[$row['user_id']] == $group_id && (!isset($temp_ary[$row['user_id']]) || $group_order_id[$row['group_name']] < $temp_ary[$row['user_id']]))		{			$temp_ary[$row['user_id']] = $row['group_id'];		}	}	$db->sql_freeresult($result);	// sql_where_ary holds the new default groups and their users	$sql_where_ary = array();	foreach ($temp_ary as $uid => $gid)	{		$sql_where_ary[$gid][] = $uid;	}	unset($temp_ary);	foreach ($special_group_data as $gid => $default_data_ary)	{		if (isset($sql_where_ary[$gid]) && sizeof($sql_where_ary[$gid]))		{			remove_default_rank($group_id, $sql_where_ary[$gid]);			remove_default_avatar($group_id, $sql_where_ary[$gid]);			group_set_user_default($gid, $sql_where_ary[$gid], $default_data_ary);		}	}	unset($special_group_data);	$sql = 'DELETE FROM ' . USER_GROUP_TABLE . "		WHERE group_id = $group_id			AND " . $db->sql_in_set('user_id', $user_id_ary);	$db->sql_query($sql);	// Clear permissions cache of relevant users	$auth->acl_clear_prefetch($user_id_ary);	if (!$group_name)	{		$group_name = get_group_name($group_id);	}	$log = 'LOG_GROUP_REMOVE';	if ($group_name)	{		add_log('admin', $log, $group_name, implode(', ', $username_ary));	}	group_update_listings($group_id);	// Return false - no error	return false;}/*** Removes the group avatar of the default group from the users in user_ids who have that group as default.*/function remove_default_avatar($group_id, $user_ids){	global $db;	if (!is_array($user_ids))	{		$user_ids = array($user_ids);	}	if (empty($user_ids))	{		return false;	}	$user_ids = array_map('intval', $user_ids);	$sql = 'SELECT *		FROM ' . GROUPS_TABLE . '		WHERE group_id = ' . (int)$group_id;	$result = $db->sql_query($sql);	if (!$row = $db->sql_fetchrow($result))	{		$db->sql_freeresult($result);		return false;	}	$db->sql_freeresult($result);	$sql = 'UPDATE ' . USERS_TABLE . "		SET user_avatar = '',			user_avatar_type = 0,			user_avatar_width = 0,			user_avatar_height = 0		WHERE group_id = " . (int) $group_id . "		AND user_avatar = '" . $db->sql_escape($row['group_avatar']) . "'		AND " . $db->sql_in_set('user_id', $user_ids);	$db->sql_query($sql);}/*** Removes the group rank of the default group from the users in user_ids who have that group as default.*/function remove_default_rank($group_id, $user_ids){	global $db;	if (!is_array($user_ids))	{		$user_ids = array($user_ids);	}	if (empty($user_ids))	{		return false;	}	$user_ids = array_map('intval', $user_ids);	$sql = 'SELECT *		FROM ' . GROUPS_TABLE . '		WHERE group_id = ' . (int)$group_id;	$result = $db->sql_query($sql);	if (!$row = $db->sql_fetchrow($result))	{		$db->sql_freeresult($result);		return false;	}	$db->sql_freeresult($result);	$sql = 'UPDATE ' . USERS_TABLE . '		SET user_rank = 0		WHERE group_id = ' . (int)$group_id . '		AND user_rank <> 0		AND user_rank = ' . (int)$row['group_rank'] . '		AND ' . $db->sql_in_set('user_id', $user_ids);	$db->sql_query($sql);}/*** This is used to promote (to leader), demote or set as default a member/s*/function group_user_attributes($action, $group_id, $user_id_ary = false, $username_ary = false, $group_name = false, $group_attributes = false){	global $db, $auth, $phpbb_root_path, $phpEx, $config;	// We need both username and user_id info	$result = user_get_id_name($user_id_ary, $username_ary);	if (!sizeof($user_id_ary) || $result !== false)	{		return 'NO_USERS';	}	if (!$group_name)	{		$group_name = get_group_name($group_id);	}	switch ($action)	{		case 'demote':		case 'promote':			$sql = 'SELECT user_id FROM ' . USER_GROUP_TABLE . "				WHERE group_id = $group_id					AND user_pending = 1					AND " . $db->sql_in_set('user_id', $user_id_ary);			$result = $db->sql_query_limit($sql, 1);			$not_empty = ($db->sql_fetchrow($result));			$db->sql_freeresult($result);			if ($not_empty)			{				return 'NO_VALID_USERS';			}			$sql = 'UPDATE ' . USER_GROUP_TABLE . '				SET group_leader = ' . (($action == 'promote') ? 1 : 0) . "				WHERE group_id = $group_id					AND user_pending = 0					AND " . $db->sql_in_set('user_id', $user_id_ary);			$db->sql_query($sql);			$log = ($action == 'promote') ? 'LOG_GROUP_PROMOTED' : 'LOG_GROUP_DEMOTED';		break;		case 'approve':			// Make sure we only approve those which are pending ;)			$sql = 'SELECT u.user_id, u.user_email, u.username, u.username_clean, u.user_notify_type, u.user_jabber, u.user_lang				FROM ' . USERS_TABLE . ' u, ' . USER_GROUP_TABLE . ' ug				WHERE ug.group_id = ' . $group_id . '					AND ug.user_pending = 1					AND ug.user_id = u.user_id					AND ' . $db->sql_in_set('ug.user_id', $user_id_ary);			$result = $db->sql_query($sql);			$user_id_ary = $email_users = array();			while ($row = $db->sql_fetchrow($result))			{				$user_id_ary[] = $row['user_id'];				$email_users[] = $row;			}			$db->sql_freeresult($result);			if (!sizeof($user_id_ary))			{				return false;			}			$sql = 'UPDATE ' . USER_GROUP_TABLE . "				SET user_pending = 0				WHERE group_id = $group_id					AND " . $db->sql_in_set('user_id', $user_id_ary);			$db->sql_query($sql);			// Send approved email to users...			include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);			$messenger = new messenger();			foreach ($email_users as $row)			{				$messenger->template('group_approved', $row['user_lang']);				$messenger->to($row['user_email'], $row['username']);				$messenger->im($row['user_jabber'], $row['username']);				$messenger->assign_vars(array(					'USERNAME'		=> htmlspecialchars_decode($row['username']),					'GROUP_NAME'	=> htmlspecialchars_decode($group_name),					'U_GROUP'		=> generate_board_url() . "/ucp.$phpEx?i=groups&mode=membership")				);				$messenger->send($row['user_notify_type']);			}			$messenger->save_queue();			$log = 'LOG_USERS_APPROVED';		break;		case 'default':			// We only set default group for approved members of the group			$sql = 'SELECT user_id				FROM ' . USER_GROUP_TABLE . "				WHERE group_id = $group_id					AND user_pending = 0					AND " . $db->sql_in_set('user_id', $user_id_ary);			$result = $db->sql_query($sql);			$user_id_ary = $username_ary = array();			while ($row = $db->sql_fetchrow($result))			{				$user_id_ary[] = $row['user_id'];			}			$db->sql_freeresult($result);			$result = user_get_id_name($user_id_ary, $username_ary);			if (!sizeof($user_id_ary) || $result !== false)			{				return 'NO_USERS';			}			$sql = 'SELECT user_id, group_id FROM ' . USERS_TABLE . '				WHERE ' . $db->sql_in_set('user_id', $user_id_ary, false, true);			$result = $db->sql_query($sql);			$groups = array();			while ($row = $db->sql_fetchrow($result))			{				if (!isset($groups[$row['group_id']]))				{					$groups[$row['group_id']] = array();				}				$groups[$row['group_id']][] = $row['user_id'];			}			$db->sql_freeresult($result);			foreach ($groups as $gid => $uids)			{				remove_default_rank($gid, $uids);				remove_default_avatar($gid, $uids);			}			group_set_user_default($group_id, $user_id_ary, $group_attributes);			$log = 'LOG_GROUP_DEFAULTS';		break;	}	// Clear permissions cache of relevant users	$auth->acl_clear_prefetch($user_id_ary);	add_log('admin', $log, $group_name, implode(', ', $username_ary));	group_update_listings($group_id);	return false;}/*** A small version of validate_username to check for a group name's existence. To be called directly.*/function group_validate_groupname($group_id, $group_name){	global $config, $db;	$group_name =  utf8_clean_string($group_name);	if (!empty($group_id))	{		$sql = 'SELECT group_name			FROM ' . GROUPS_TABLE . '			WHERE group_id = ' . (int) $group_id;		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$row)		{			return false;		}		$allowed_groupname = utf8_clean_string($row['group_name']);		if ($allowed_groupname == $group_name)		{			return false;		}	}	$sql = 'SELECT group_name		FROM ' . GROUPS_TABLE . "		WHERE LOWER(group_name) = '" . $db->sql_escape(utf8_strtolower($group_name)) . "'";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		return 'GROUP_NAME_TAKEN';	}	return false;}/*** Set users default group** @access private*/function group_set_user_default($group_id, $user_id_ary, $group_attributes = false, $update_listing = false){	global $cache, $db;	if (empty($user_id_ary))	{		return;	}	$attribute_ary = array(		'group_colour'			=> 'string',		'group_rank'			=> 'int',		'group_avatar'			=> 'string',		'group_avatar_type'		=> 'int',		'group_avatar_width'	=> 'int',		'group_avatar_height'	=> 'int',	);	$sql_ary = array(		'group_id'		=> $group_id	);	// Were group attributes passed to the function? If not we need to obtain them	if ($group_attributes === false)	{		$sql = 'SELECT ' . implode(', ', array_keys($attribute_ary)) . '			FROM ' . GROUPS_TABLE . "			WHERE group_id = $group_id";		$result = $db->sql_query($sql);		$group_attributes = $db->sql_fetchrow($result);		$db->sql_freeresult($result);	}	foreach ($attribute_ary as $attribute => $type)	{		if (isset($group_attributes[$attribute]))		{			// If we are about to set an avatar or rank, we will not overwrite with empty, unless we are not actually changing the default group			if ((strpos($attribute, 'group_avatar') === 0 || strpos($attribute, 'group_rank') === 0) && !$group_attributes[$attribute])			{				continue;			}			settype($group_attributes[$attribute], $type);			$sql_ary[str_replace('group_', 'user_', $attribute)] = $group_attributes[$attribute];		}	}	// Before we update the user attributes, we will make a list of those having now the group avatar assigned	if (isset($sql_ary['user_avatar']))	{		// Ok, get the original avatar data from users having an uploaded one (we need to remove these from the filesystem)		$sql = 'SELECT user_id, group_id, user_avatar			FROM ' . USERS_TABLE . '			WHERE ' . $db->sql_in_set('user_id', $user_id_ary) . '				AND user_avatar_type = ' . AVATAR_UPLOAD;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			avatar_delete('user', $row);		}		$db->sql_freeresult($result);	}	else	{		unset($sql_ary['user_avatar_type']);		unset($sql_ary['user_avatar_height']);		unset($sql_ary['user_avatar_width']);	}	$sql = 'UPDATE ' . USERS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '		WHERE ' . $db->sql_in_set('user_id', $user_id_ary);	$db->sql_query($sql);	if (isset($sql_ary['user_colour']))	{		// Update any cached colour information for these users		$sql = 'UPDATE ' . FORUMS_TABLE . " SET forum_last_poster_colour = '" . $db->sql_escape($sql_ary['user_colour']) . "'			WHERE " . $db->sql_in_set('forum_last_poster_id', $user_id_ary);		$db->sql_query($sql);		$sql = 'UPDATE ' . TOPICS_TABLE . " SET topic_first_poster_colour = '" . $db->sql_escape($sql_ary['user_colour']) . "'			WHERE " . $db->sql_in_set('topic_poster', $user_id_ary);		$db->sql_query($sql);		$sql = 'UPDATE ' . TOPICS_TABLE . " SET topic_last_poster_colour = '" . $db->sql_escape($sql_ary['user_colour']) . "'			WHERE " . $db->sql_in_set('topic_last_poster_id', $user_id_ary);		$db->sql_query($sql);		global $config;		if (in_array($config['newest_user_id'], $user_id_ary))		{			set_config('newest_user_colour', $sql_ary['user_colour'], true);		}	}	if ($update_listing)	{		group_update_listings($group_id);	}	// Because some tables/caches use usercolour-specific data we need to purge this here.	$cache->destroy('sql', MODERATOR_CACHE_TABLE);}/*** Get group name*/function get_group_name($group_id){	global $db, $user;	$sql = 'SELECT group_name, group_type		FROM ' . GROUPS_TABLE . '		WHERE group_id = ' . (int) $group_id;	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$row || ($row['group_type'] == GROUP_SPECIAL && empty($user->lang)))	{		return '';	}	return ($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name'];}/*** Obtain either the members of a specified group, the groups the specified user is subscribed to* or checking if a specified user is in a specified group. This function does not return pending memberships.** Note: Never use this more than once... first group your users/groups*/function group_memberships($group_id_ary = false, $user_id_ary = false, $return_bool = false){	global $db;	if (!$group_id_ary && !$user_id_ary)	{		return true;	}	if ($user_id_ary)	{		$user_id_ary = (!is_array($user_id_ary)) ? array($user_id_ary) : $user_id_ary;	}	if ($group_id_ary)	{		$group_id_ary = (!is_array($group_id_ary)) ? array($group_id_ary) : $group_id_ary;	}	$sql = 'SELECT ug.*, u.username, u.username_clean, u.user_email		FROM ' . USER_GROUP_TABLE . ' ug, ' . USERS_TABLE . ' u		WHERE ug.user_id = u.user_id			AND ug.user_pending = 0 AND ';	if ($group_id_ary)	{		$sql .= ' ' . $db->sql_in_set('ug.group_id', $group_id_ary);	}	if ($user_id_ary)	{		$sql .= ($group_id_ary) ? ' AND ' : ' ';		$sql .= $db->sql_in_set('ug.user_id', $user_id_ary);	}	$result = ($return_bool) ? $db->sql_query_limit($sql, 1) : $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	if ($return_bool)	{		$db->sql_freeresult($result);		return ($row) ? true : false;	}	if (!$row)	{		return false;	}	$return = array();	do	{		$return[] = $row;	}	while ($row = $db->sql_fetchrow($result));	$db->sql_freeresult($result);	return $return;}/*** Re-cache moderators and foes if group has a_ or m_ permissions*/function group_update_listings($group_id){	global $auth;	$hold_ary = $auth->acl_group_raw_data($group_id, array('a_', 'm_'));	if (!sizeof($hold_ary))	{		return;	}	$mod_permissions = $admin_permissions = false;	foreach ($hold_ary as $g_id => $forum_ary)	{		foreach ($forum_ary as $forum_id => $auth_ary)		{			foreach ($auth_ary as $auth_option => $setting)			{				if ($mod_permissions && $admin_permissions)				{					break 3;				}				if ($setting != ACL_YES)				{					continue;				}				if ($auth_option == 'm_')				{					$mod_permissions = true;				}				if ($auth_option == 'a_')				{					$admin_permissions = true;				}			}		}	}	if ($mod_permissions)	{		if (!function_exists('cache_moderators'))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/functions_admin.' . $phpEx);		}		cache_moderators();	}	if ($mod_permissions || $admin_permissions)	{		if (!function_exists('update_foes'))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/functions_admin.' . $phpEx);		}		update_foes(array($group_id));	}}/*** Funtion to make a user leave the NEWLY_REGISTERED system group.* @access public* @param $user_id The id of the user to remove from the group*/function remove_newly_registered($user_id, $user_data = false){	global $db;	if ($user_data === false)	{		$sql = 'SELECT *			FROM ' . USERS_TABLE . '			WHERE user_id = ' . $user_id;		$result = $db->sql_query($sql);		$user_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$user_row)		{			return false;		}		else		{			$user_data  = $user_row;		}	}	if (empty($user_data['user_new']))	{		return false;	}	$sql = 'SELECT group_id		FROM ' . GROUPS_TABLE . "		WHERE group_name = 'NEWLY_REGISTERED'			AND group_type = " . GROUP_SPECIAL;	$result = $db->sql_query($sql);	$group_id = (int) $db->sql_fetchfield('group_id');	$db->sql_freeresult($result);	if (!$group_id)	{		return false;	}	// We need to call group_user_del here, because this function makes sure everything is correctly changed.	// A downside for a call within the session handler is that the language is not set up yet - so no log entry	group_user_del($group_id, $user_id);	// Set user_new to 0 to let this not be triggered again	$sql = 'UPDATE ' . USERS_TABLE . '		SET user_new = 0		WHERE user_id = ' . $user_id;	$db->sql_query($sql);	// The new users group was the users default group?	if ($user_data['group_id'] == $group_id)	{		// Which group is now the users default one?		$sql = 'SELECT group_id			FROM ' . USERS_TABLE . '			WHERE user_id = ' . $user_id;		$result = $db->sql_query($sql);		$user_data['group_id'] = $db->sql_fetchfield('group_id');		$db->sql_freeresult($result);	}	return $user_data['group_id'];}?>
<?php/**** @package search* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @ignore*/include_once($phpbb_root_path . 'includes/search/search.' . $phpEx);/*** fulltext_mysql* Fulltext search for MySQL* @package search*/class fulltext_mysql extends search_backend{	var $stats = array();	var $word_length = array();	var $split_words = array();	var $search_query;	var $common_words = array();	var $pcre_properties = false;	var $mbstring_regex = false;	function fulltext_mysql(&$error)	{		global $config;		$this->word_length = array('min' => $config['fulltext_mysql_min_word_len'], 'max' => $config['fulltext_mysql_max_word_len']);		if (version_compare(PHP_VERSION, '5.1.0', '>=') || (version_compare(PHP_VERSION, '5.0.0-dev', '<=') && version_compare(PHP_VERSION, '4.4.0', '>=')))		{			// While this is the proper range of PHP versions, PHP may not be linked with the bundled PCRE lib and instead with an older version			if (@preg_match('/\p{L}/u', 'a') !== false)			{				$this->pcre_properties = true;			}		}		if (function_exists('mb_ereg'))		{			$this->mbstring_regex = true;			mb_regex_encoding('UTF-8');		}		$error = false;	}	/**	* Checks for correct MySQL version and stores min/max word length in the config	*/	function init()	{		global $db, $user;		if ($db->sql_layer != 'mysql4' && $db->sql_layer != 'mysqli')		{			return $user->lang['FULLTEXT_MYSQL_INCOMPATIBLE_VERSION'];		}		$result = $db->sql_query('SHOW TABLE STATUS LIKE \'' . POSTS_TABLE . '\'');		$info = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		$engine = '';		if (isset($info['Engine']))		{			$engine = $info['Engine'];		}		else if (isset($info['Type']))		{			$engine = $info['Type'];		}		if ($engine != 'MyISAM')		{			return $user->lang['FULLTEXT_MYSQL_NOT_MYISAM'];		}		$sql = 'SHOW VARIABLES			LIKE \'ft\_%\'';		$result = $db->sql_query($sql);		$mysql_info = array();		while ($row = $db->sql_fetchrow($result))		{			$mysql_info[$row['Variable_name']] = $row['Value'];		}		$db->sql_freeresult($result);		set_config('fulltext_mysql_max_word_len', $mysql_info['ft_max_word_len']);		set_config('fulltext_mysql_min_word_len', $mysql_info['ft_min_word_len']);		return false;	}	/**	* Splits keywords entered by a user into an array of words stored in $this->split_words	* Stores the tidied search query in $this->search_query	*	* @param string &$keywords Contains the keyword as entered by the user	* @param string $terms is either 'all' or 'any'	* @return bool false if no valid keywords were found and otherwise true	*/	function split_keywords(&$keywords, $terms)	{		global $config, $user;		if ($terms == 'all')		{			$match		= array('#\sand\s#iu', '#\sor\s#iu', '#\snot\s#iu', '#(^|\s)\+#', '#(^|\s)-#', '#(^|\s)\|#');			$replace	= array(' +', ' |', ' -', ' +', ' -', ' |');			$keywords = preg_replace($match, $replace, $keywords);		}		// Filter out as above		$split_keywords = preg_replace("#[\n\r\t]+#", ' ', trim(htmlspecialchars_decode($keywords)));		// Split words		if ($this->pcre_properties)		{			$split_keywords = preg_replace('#([^\p{L}\p{N}\'*"()])#u', '$1$1', str_replace('\'\'', '\' \'', trim($split_keywords)));		}		else if ($this->mbstring_regex)		{			$split_keywords = mb_ereg_replace('([^\w\'*"()])', '\\1\\1', str_replace('\'\'', '\' \'', trim($split_keywords)));		}		else		{			$split_keywords = preg_replace('#([^\w\'*"()])#u', '$1$1', str_replace('\'\'', '\' \'', trim($split_keywords)));		}		if ($this->pcre_properties)		{			$matches = array();			preg_match_all('#(?:[^\p{L}\p{N}*"()]|^)([+\-|]?(?:[\p{L}\p{N}*"()]+\'?)*[\p{L}\p{N}*"()])(?:[^\p{L}\p{N}*"()]|$)#u', $split_keywords, $matches);			$this->split_words = $matches[1];		}		else if ($this->mbstring_regex)		{			mb_ereg_search_init($split_keywords, '(?:[^\w*"()]|^)([+\-|]?(?:[\w*"()]+\'?)*[\w*"()])(?:[^\w*"()]|$)');			while (($word = mb_ereg_search_regs()))			{				$this->split_words[] = $word[1];			}		}		else		{			$matches = array();			preg_match_all('#(?:[^\w*"()]|^)([+\-|]?(?:[\w*"()]+\'?)*[\w*"()])(?:[^\w*"()]|$)#u', $split_keywords, $matches);			$this->split_words = $matches[1];		}		// We limit the number of allowed keywords to minimize load on the database		if ($config['max_num_search_keywords'] && sizeof($this->split_words) > $config['max_num_search_keywords'])		{			trigger_error($user->lang('MAX_NUM_SEARCH_KEYWORDS_REFINE', $config['max_num_search_keywords'], sizeof($this->split_words)));		}		// to allow phrase search, we need to concatenate quoted words		$tmp_split_words = array();		$phrase = '';		foreach ($this->split_words as $word)		{			if ($phrase)			{				$phrase .= ' ' . $word;				if (strpos($word, '"') !== false && substr_count($word, '"') % 2 == 1)				{					$tmp_split_words[] = $phrase;					$phrase = '';				}			}			else if (strpos($word, '"') !== false && substr_count($word, '"') % 2 == 1)			{				$phrase = $word;			}			else			{				$tmp_split_words[] = $word . ' ';			}		}		if ($phrase)		{			$tmp_split_words[] = $phrase;		}		$this->split_words = $tmp_split_words;		unset($tmp_split_words);		unset($phrase);		foreach ($this->split_words as $i => $word)		{			$clean_word = preg_replace('#^[+\-|"]#', '', $word);			// check word length			$clean_len = utf8_strlen(str_replace('*', '', $clean_word));			if (($clean_len < $config['fulltext_mysql_min_word_len']) || ($clean_len > $config['fulltext_mysql_max_word_len']))			{				$this->common_words[] = $word;				unset($this->split_words[$i]);			}		}		if ($terms == 'any')		{			$this->search_query = '';			foreach ($this->split_words as $word)			{				if ((strpos($word, '+') === 0) || (strpos($word, '-') === 0) || (strpos($word, '|') === 0))				{					$word = substr($word, 1);				}				$this->search_query .= $word . ' ';			}		}		else		{			$this->search_query = '';			foreach ($this->split_words as $word)			{				if ((strpos($word, '+') === 0) || (strpos($word, '-') === 0))				{					$this->search_query .= $word . ' ';				}				else if (strpos($word, '|') === 0)				{					$this->search_query .= substr($word, 1) . ' ';				}				else				{					$this->search_query .= '+' . $word . ' ';				}			}		}		$this->search_query = utf8_htmlspecialchars($this->search_query);		if ($this->search_query)		{			$this->split_words = array_values($this->split_words);			sort($this->split_words);			return true;		}		return false;	}	/**	* Turns text into an array of words	*/	function split_message($text)	{		global $config;		// Split words		if ($this->pcre_properties)		{			$text = preg_replace('#([^\p{L}\p{N}\'*])#u', '$1$1', str_replace('\'\'', '\' \'', trim($text)));		}		else if ($this->mbstring_regex)		{			$text = mb_ereg_replace('([^\w\'*])', '\\1\\1', str_replace('\'\'', '\' \'', trim($text)));		}		else		{			$text = preg_replace('#([^\w\'*])#u', '$1$1', str_replace('\'\'', '\' \'', trim($text)));		}		if ($this->pcre_properties)		{			$matches = array();			preg_match_all('#(?:[^\p{L}\p{N}*]|^)([+\-|]?(?:[\p{L}\p{N}*]+\'?)*[\p{L}\p{N}*])(?:[^\p{L}\p{N}*]|$)#u', $text, $matches);			$text = $matches[1];		}		else if ($this->mbstring_regex)		{			mb_ereg_search_init($text, '(?:[^\w*]|^)([+\-|]?(?:[\w*]+\'?)*[\w*])(?:[^\w*]|$)');			$text = array();			while (($word = mb_ereg_search_regs()))			{				$text[] = $word[1];			}		}		else		{			$matches = array();			preg_match_all('#(?:[^\w*]|^)([+\-|]?(?:[\w*]+\'?)*[\w*])(?:[^\w*]|$)#u', $text, $matches);			$text = $matches[1];		}		// remove too short or too long words		$text = array_values($text);		for ($i = 0, $n = sizeof($text); $i < $n; $i++)		{			$text[$i] = trim($text[$i]);			if (utf8_strlen($text[$i]) < $config['fulltext_mysql_min_word_len'] || utf8_strlen($text[$i]) > $config['fulltext_mysql_max_word_len'])			{				unset($text[$i]);			}		}		return array_values($text);	}	/**	* Performs a search on keywords depending on display specific params. You have to run split_keywords() first.	*	* @param	string		$type				contains either posts or topics depending on what should be searched for	* @param	string		$fields				contains either titleonly (topic titles should be searched), msgonly (only message bodies should be searched), firstpost (only subject and body of the first post should be searched) or all (all post bodies and subjects should be searched)	* @param	string		$terms				is either 'all' (use query as entered, words without prefix should default to "have to be in field") or 'any' (ignore search query parts and just return all posts that contain any of the specified words)	* @param	array		$sort_by_sql		contains SQL code for the ORDER BY part of a query	* @param	string		$sort_key			is the key of $sort_by_sql for the selected sorting	* @param	string		$sort_dir			is either a or d representing ASC and DESC	* @param	string		$sort_days			specifies the maximum amount of days a post may be old	* @param	array		$ex_fid_ary			specifies an array of forum ids which should not be searched	* @param	array		$m_approve_fid_ary	specifies an array of forum ids in which the searcher is allowed to view unapproved posts	* @param	int			$topic_id			is set to 0 or a topic id, if it is not 0 then only posts in this topic should be searched	* @param	array		$author_ary			an array of author ids if the author should be ignored during the search the array is empty	* @param	string		$author_name		specifies the author match, when ANONYMOUS is also a search-match	* @param	array		&$id_ary			passed by reference, to be filled with ids for the page specified by $start and $per_page, should be ordered	* @param	int			$start				indicates the first index of the page	* @param	int			$per_page			number of ids each page is supposed to contain	* @return	boolean|int						total number of results	*	* @access	public	*/	function keyword_search($type, $fields, $terms, $sort_by_sql, $sort_key, $sort_dir, $sort_days, $ex_fid_ary, $m_approve_fid_ary, $topic_id, $author_ary, $author_name, &$id_ary, $start, $per_page)	{		global $config, $db;		// No keywords? No posts.		if (!$this->search_query)		{			return false;		}		// generate a search_key from all the options to identify the results		$search_key = md5(implode('#', array(			implode(', ', $this->split_words),			$type,			$fields,			$terms,			$sort_days,			$sort_key,			$topic_id,			implode(',', $ex_fid_ary),			implode(',', $m_approve_fid_ary),			implode(',', $author_ary)		)));		// try reading the results from cache		$result_count = 0;		if ($this->obtain_ids($search_key, $result_count, $id_ary, $start, $per_page, $sort_dir) == SEARCH_RESULT_IN_CACHE)		{			return $result_count;		}		$id_ary = array();		$join_topic = ($type == 'posts') ? false : true;		// Build sql strings for sorting		$sql_sort = $sort_by_sql[$sort_key] . (($sort_dir == 'a') ? ' ASC' : ' DESC');		$sql_sort_table = $sql_sort_join = '';		switch ($sql_sort[0])		{			case 'u':				$sql_sort_table	= USERS_TABLE . ' u, ';				$sql_sort_join	= ($type == 'posts') ? ' AND u.user_id = p.poster_id ' : ' AND u.user_id = t.topic_poster ';			break;			case 't':				$join_topic = true;			break;			case 'f':				$sql_sort_table	= FORUMS_TABLE . ' f, ';				$sql_sort_join	= ' AND f.forum_id = p.forum_id ';			break;		}		// Build some display specific sql strings		switch ($fields)		{			case 'titleonly':				$sql_match = 'p.post_subject';				$sql_match_where = ' AND p.post_id = t.topic_first_post_id';				$join_topic = true;			break;			case 'msgonly':				$sql_match = 'p.post_text';				$sql_match_where = '';			break;			case 'firstpost':				$sql_match = 'p.post_subject, p.post_text';				$sql_match_where = ' AND p.post_id = t.topic_first_post_id';				$join_topic = true;			break;			default:				$sql_match = 'p.post_subject, p.post_text';				$sql_match_where = '';			break;		}		if (!sizeof($m_approve_fid_ary))		{			$m_approve_fid_sql = ' AND p.post_approved = 1';		}		else if ($m_approve_fid_ary === array(-1))		{			$m_approve_fid_sql = '';		}		else		{			$m_approve_fid_sql = ' AND (p.post_approved = 1 OR ' . $db->sql_in_set('p.forum_id', $m_approve_fid_ary, true) . ')';		}		$sql_select			= (!$result_count) ? 'SQL_CALC_FOUND_ROWS ' : '';		$sql_select			= ($type == 'posts') ? $sql_select . 'p.post_id' : 'DISTINCT ' . $sql_select . 't.topic_id';		$sql_from			= ($join_topic) ? TOPICS_TABLE . ' t, ' : '';		$field				= ($type == 'posts') ? 'post_id' : 'topic_id';		if (sizeof($author_ary) && $author_name)		{			// first one matches post of registered users, second one guests and deleted users			$sql_author = ' AND (' . $db->sql_in_set('p.poster_id', array_diff($author_ary, array(ANONYMOUS)), false, true) . ' OR p.post_username ' . $author_name . ')';		}		else if (sizeof($author_ary))		{			$sql_author = ' AND ' . $db->sql_in_set('p.poster_id', $author_ary);		}		else		{			$sql_author = '';		}		$sql_where_options = $sql_sort_join;		$sql_where_options .= ($topic_id) ? ' AND p.topic_id = ' . $topic_id : '';		$sql_where_options .= ($join_topic) ? ' AND t.topic_id = p.topic_id' : '';		$sql_where_options .= (sizeof($ex_fid_ary)) ? ' AND ' . $db->sql_in_set('p.forum_id', $ex_fid_ary, true) : '';		$sql_where_options .= $m_approve_fid_sql;		$sql_where_options .= $sql_author;		$sql_where_options .= ($sort_days) ? ' AND p.post_time >= ' . (time() - ($sort_days * 86400)) : '';		$sql_where_options .= $sql_match_where;		$sql = "SELECT $sql_select			FROM $sql_from$sql_sort_table" . POSTS_TABLE . " p			WHERE MATCH ($sql_match) AGAINST ('" . $db->sql_escape(htmlspecialchars_decode($this->search_query)) . "' IN BOOLEAN MODE)				$sql_where_options			ORDER BY $sql_sort";		$result = $db->sql_query_limit($sql, $config['search_block_size'], $start);		while ($row = $db->sql_fetchrow($result))		{			$id_ary[] = (int) $row[$field];		}		$db->sql_freeresult($result);		$id_ary = array_unique($id_ary);		if (!sizeof($id_ary))		{			return false;		}		// if the total result count is not cached yet, retrieve it from the db		if (!$result_count)		{			$sql = 'SELECT FOUND_ROWS() as result_count';			$result = $db->sql_query($sql);			$result_count = (int) $db->sql_fetchfield('result_count');			$db->sql_freeresult($result);			if (!$result_count)			{				return false;			}		}		// store the ids, from start on then delete anything that isn't on the current page because we only need ids for one page		$this->save_ids($search_key, implode(' ', $this->split_words), $author_ary, $result_count, $id_ary, $start, $sort_dir);		$id_ary = array_slice($id_ary, 0, (int) $per_page);		return $result_count;	}	/**	* Performs a search on an author's posts without caring about message contents. Depends on display specific params	*	* @param	string		$type				contains either posts or topics depending on what should be searched for	* @param	boolean		$firstpost_only		if true, only topic starting posts will be considered	* @param	array		$sort_by_sql		contains SQL code for the ORDER BY part of a query	* @param	string		$sort_key			is the key of $sort_by_sql for the selected sorting	* @param	string		$sort_dir			is either a or d representing ASC and DESC	* @param	string		$sort_days			specifies the maximum amount of days a post may be old	* @param	array		$ex_fid_ary			specifies an array of forum ids which should not be searched	* @param	array		$m_approve_fid_ary	specifies an array of forum ids in which the searcher is allowed to view unapproved posts	* @param	int			$topic_id			is set to 0 or a topic id, if it is not 0 then only posts in this topic should be searched	* @param	array		$author_ary			an array of author ids	* @param	string		$author_name		specifies the author match, when ANONYMOUS is also a search-match	* @param	array		&$id_ary			passed by reference, to be filled with ids for the page specified by $start and $per_page, should be ordered	* @param	int			$start				indicates the first index of the page	* @param	int			$per_page			number of ids each page is supposed to contain	* @return	boolean|int						total number of results	*	* @access	public	*/	function author_search($type, $firstpost_only, $sort_by_sql, $sort_key, $sort_dir, $sort_days, $ex_fid_ary, $m_approve_fid_ary, $topic_id, $author_ary, $author_name, &$id_ary, $start, $per_page)	{		global $config, $db;		// No author? No posts.		if (!sizeof($author_ary))		{			return 0;		}		// generate a search_key from all the options to identify the results		$search_key = md5(implode('#', array(			'',			$type,			($firstpost_only) ? 'firstpost' : '',			'',			'',			$sort_days,			$sort_key,			$topic_id,			implode(',', $ex_fid_ary),			implode(',', $m_approve_fid_ary),			implode(',', $author_ary),			$author_name,		)));		// try reading the results from cache		$result_count = 0;		if ($this->obtain_ids($search_key, $result_count, $id_ary, $start, $per_page, $sort_dir) == SEARCH_RESULT_IN_CACHE)		{			return $result_count;		}		$id_ary = array();		// Create some display specific sql strings		if ($author_name)		{			// first one matches post of registered users, second one guests and deleted users			$sql_author = '(' . $db->sql_in_set('p.poster_id', array_diff($author_ary, array(ANONYMOUS)), false, true) . ' OR p.post_username ' . $author_name . ')';		}		else		{			$sql_author = $db->sql_in_set('p.poster_id', $author_ary);		}		$sql_fora		= (sizeof($ex_fid_ary)) ? ' AND ' . $db->sql_in_set('p.forum_id', $ex_fid_ary, true) : '';		$sql_topic_id	= ($topic_id) ? ' AND p.topic_id = ' . (int) $topic_id : '';		$sql_time		= ($sort_days) ? ' AND p.post_time >= ' . (time() - ($sort_days * 86400)) : '';		$sql_firstpost = ($firstpost_only) ? ' AND p.post_id = t.topic_first_post_id' : '';		// Build sql strings for sorting		$sql_sort = $sort_by_sql[$sort_key] . (($sort_dir == 'a') ? ' ASC' : ' DESC');		$sql_sort_table = $sql_sort_join = '';		switch ($sql_sort[0])		{			case 'u':				$sql_sort_table	= USERS_TABLE . ' u, ';				$sql_sort_join	= ($type == 'posts') ? ' AND u.user_id = p.poster_id ' : ' AND u.user_id = t.topic_poster ';			break;			case 't':				$sql_sort_table	= ($type == 'posts' && !$firstpost_only) ? TOPICS_TABLE . ' t, ' : '';				$sql_sort_join	= ($type == 'posts' && !$firstpost_only) ? ' AND t.topic_id = p.topic_id ' : '';			break;			case 'f':				$sql_sort_table	= FORUMS_TABLE . ' f, ';				$sql_sort_join	= ' AND f.forum_id = p.forum_id ';			break;		}		if (!sizeof($m_approve_fid_ary))		{			$m_approve_fid_sql = ' AND p.post_approved = 1';		}		else if ($m_approve_fid_ary == array(-1))		{			$m_approve_fid_sql = '';		}		else		{			$m_approve_fid_sql = ' AND (p.post_approved = 1 OR ' . $db->sql_in_set('p.forum_id', $m_approve_fid_ary, true) . ')';		}		// If the cache was completely empty count the results		$calc_results = ($result_count) ? '' : 'SQL_CALC_FOUND_ROWS ';		// Build the query for really selecting the post_ids		if ($type == 'posts')		{			$sql = "SELECT {$calc_results}p.post_id				FROM " . $sql_sort_table . POSTS_TABLE . ' p' . (($firstpost_only) ? ', ' . TOPICS_TABLE . ' t ' : ' ') . "				WHERE $sql_author					$sql_topic_id					$sql_firstpost					$m_approve_fid_sql					$sql_fora					$sql_sort_join					$sql_time				ORDER BY $sql_sort";			$field = 'post_id';		}		else		{			$sql = "SELECT {$calc_results}t.topic_id				FROM " . $sql_sort_table . TOPICS_TABLE . ' t, ' . POSTS_TABLE . " p				WHERE $sql_author					$sql_topic_id					$sql_firstpost					$m_approve_fid_sql					$sql_fora					AND t.topic_id = p.topic_id					$sql_sort_join					$sql_time				GROUP BY t.topic_id				ORDER BY $sql_sort";			$field = 'topic_id';		}		// Only read one block of posts from the db and then cache it		$result = $db->sql_query_limit($sql, $config['search_block_size'], $start);		while ($row = $db->sql_fetchrow($result))		{			$id_ary[] = (int) $row[$field];		}		$db->sql_freeresult($result);		// retrieve the total result count if needed		if (!$result_count)		{			$sql = 'SELECT FOUND_ROWS() as result_count';			$result = $db->sql_query($sql);			$result_count = (int) $db->sql_fetchfield('result_count');			$db->sql_freeresult($result);			if (!$result_count)			{				return false;			}		}		if (sizeof($id_ary))		{			$this->save_ids($search_key, '', $author_ary, $result_count, $id_ary, $start, $sort_dir);			$id_ary = array_slice($id_ary, 0, $per_page);			return $result_count;		}		return false;	}	/**	* Destroys cached search results, that contained one of the new words in a post so the results won't be outdated.	*	* @param string $mode contains the post mode: edit, post, reply, quote ...	*/	function index($mode, $post_id, &$message, &$subject, $poster_id, $forum_id)	{		global $db;		// Split old and new post/subject to obtain array of words		$split_text = $this->split_message($message);		$split_title = ($subject) ? $this->split_message($subject) : array();		$words = array_unique(array_merge($split_text, $split_title));		unset($split_text);		unset($split_title);		// destroy cached search results containing any of the words removed or added		$this->destroy_cache($words, array($poster_id));		unset($words);	}	/**	* Destroy cached results, that might be outdated after deleting a post	*/	function index_remove($post_ids, $author_ids, $forum_ids)	{		$this->destroy_cache(array(), $author_ids);	}	/**	* Destroy old cache entries	*/	function tidy()	{		global $db, $config;		// destroy too old cached search results		$this->destroy_cache(array());		set_config('search_last_gc', time(), true);	}	/**	* Create fulltext index	*/	function create_index($acp_module, $u_action)	{		global $db;		// Make sure we can actually use MySQL with fulltext indexes		if ($error = $this->init())		{			return $error;		}		if (empty($this->stats))		{			$this->get_stats();		}		$alter = array();		if (!isset($this->stats['post_subject']))		{			if ($db->sql_layer == 'mysqli' || version_compare($db->sql_server_info(true), '4.1.3', '>='))			{				//$alter[] = 'MODIFY post_subject varchar(100) COLLATE utf8_unicode_ci DEFAULT \'\' NOT NULL';			}			else			{				$alter[] = 'MODIFY post_subject text NOT NULL';			}			$alter[] = 'ADD FULLTEXT (post_subject)';		}		if (!isset($this->stats['post_text']))		{			if ($db->sql_layer == 'mysqli' || version_compare($db->sql_server_info(true), '4.1.3', '>='))			{				$alter[] = 'MODIFY post_text mediumtext COLLATE utf8_unicode_ci NOT NULL';			}			else			{				$alter[] = 'MODIFY post_text mediumtext NOT NULL';			}			$alter[] = 'ADD FULLTEXT (post_text)';		}		if (!isset($this->stats['post_content']))		{			$alter[] = 'ADD FULLTEXT post_content (post_subject, post_text)';		}		if (sizeof($alter))		{			$db->sql_query('ALTER TABLE ' . POSTS_TABLE . ' ' . implode(', ', $alter));		}		$db->sql_query('TRUNCATE TABLE ' . SEARCH_RESULTS_TABLE);		return false;	}	/**	* Drop fulltext index	*/	function delete_index($acp_module, $u_action)	{		global $db;		// Make sure we can actually use MySQL with fulltext indexes		if ($error = $this->init())		{			return $error;		}		if (empty($this->stats))		{			$this->get_stats();		}		$alter = array();		if (isset($this->stats['post_subject']))		{			$alter[] = 'DROP INDEX post_subject';		}		if (isset($this->stats['post_text']))		{			$alter[] = 'DROP INDEX post_text';		}		if (isset($this->stats['post_content']))		{			$alter[] = 'DROP INDEX post_content';		}		if (sizeof($alter))		{			$db->sql_query('ALTER TABLE ' . POSTS_TABLE . ' ' . implode(', ', $alter));		}		$db->sql_query('TRUNCATE TABLE ' . SEARCH_RESULTS_TABLE);		return false;	}	/**	* Returns true if both FULLTEXT indexes exist	*/	function index_created()	{		if (empty($this->stats))		{			$this->get_stats();		}		return (isset($this->stats['post_text']) && isset($this->stats['post_subject']) && isset($this->stats['post_content'])) ? true : false;	}	/**	* Returns an associative array containing information about the indexes	*/	function index_stats()	{		global $user;		if (empty($this->stats))		{			$this->get_stats();		}		return array(			$user->lang['FULLTEXT_MYSQL_TOTAL_POSTS']			=> ($this->index_created()) ? $this->stats['total_posts'] : 0,		);	}	function get_stats()	{		global $db;		if (strpos($db->sql_layer, 'mysql') === false)		{			$this->stats = array();			return;		}		$sql = 'SHOW INDEX			FROM ' . POSTS_TABLE;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			// deal with older MySQL versions which didn't use Index_type			$index_type = (isset($row['Index_type'])) ? $row['Index_type'] : $row['Comment'];			if ($index_type == 'FULLTEXT')			{				if ($row['Key_name'] == 'post_text')				{					$this->stats['post_text'] = $row;				}				else if ($row['Key_name'] == 'post_subject')				{					$this->stats['post_subject'] = $row;				}				else if ($row['Key_name'] == 'post_content')				{					$this->stats['post_content'] = $row;				}			}		}		$db->sql_freeresult($result);		$sql = 'SELECT COUNT(post_id) as total_posts			FROM ' . POSTS_TABLE;		$result = $db->sql_query($sql);		$this->stats['total_posts'] = (int) $db->sql_fetchfield('total_posts');		$db->sql_freeresult($result);	}	/**	* Display a note, that UTF-8 support is not available with certain versions of PHP	*/	function acp()	{		global $user, $config;		$tpl = '		<dl>			<dt><label>' . $user->lang['FULLTEXT_MYSQL_PCRE'] . '</label><br /><span>' . $user->lang['FULLTEXT_MYSQL_PCRE_EXPLAIN'] . '</span></dt>			<dd>' . (($this->pcre_properties) ? $user->lang['YES'] : $user->lang['NO']) . ' (PHP ' . PHP_VERSION . ')</dd>		</dl>		<dl>			<dt><label>' . $user->lang['FULLTEXT_MYSQL_MBSTRING'] . '</label><br /><span>' . $user->lang['FULLTEXT_MYSQL_MBSTRING_EXPLAIN'] . '</span></dt>			<dd>' . (($this->mbstring_regex) ? $user->lang['YES'] : $user->lang['NO']). '</dd>		</dl>		<dl>			<dt><label>' . $user->lang['MIN_SEARCH_CHARS'] . ':</label><br /><span>' . $user->lang['FULLTEXT_MYSQL_MIN_SEARCH_CHARS_EXPLAIN'] . '</span></dt>			<dd>' . $config['fulltext_mysql_min_word_len'] . '</dd>		</dl>		<dl>			<dt><label>' . $user->lang['MAX_SEARCH_CHARS'] . ':</label><br /><span>' . $user->lang['FULLTEXT_MYSQL_MAX_SEARCH_CHARS_EXPLAIN'] . '</span></dt>			<dd>' . $config['fulltext_mysql_max_word_len'] . '</dd>		</dl>		';		// These are fields required in the config table		return array(			'tpl'		=> $tpl,			'config'	=> array()		);	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**/if (php_sapi_name() != 'cli'){	die("This program must be run from the command line.\n");}//// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);error_reporting(E_ALL);define('IN_PHPBB', true);$phpbb_root_path = '../';$phpEx = substr(strrchr(__FILE__, '.'), 1);/*** Let's download some files we need*/download('http://www.unicode.org/Public/UNIDATA/NormalizationTest.txt');download('http://www.unicode.org/Public/UNIDATA/UnicodeData.txt');/*** Those are the tests we run*/$test_suite = array(	/**	* NFC	*   c2 ==  NFC(c1) ==  NFC(c2) ==  NFC(c3)	*   c4 ==  NFC(c4) ==  NFC(c5)	*/	'NFC'	=>	array(		'c2'	=>	array('c1', 'c2', 'c3'),		'c4'	=>	array('c4', 'c5')	),	/**	* NFD	*   c3 ==  NFD(c1) ==  NFD(c2) ==  NFD(c3)	*   c5 ==  NFD(c4) ==  NFD(c5)	*/	'NFD'	=>	array(		'c3'	=>	array('c1', 'c2', 'c3'),		'c5'	=>	array('c4', 'c5')	),	/**	* NFKC	*   c4 == NFKC(c1) == NFKC(c2) == NFKC(c3) == NFKC(c4) == NFKC(c5)	*/	'NFKC'	=>	array(		'c4'	=>	array('c1', 'c2', 'c3', 'c4', 'c5')	),	/**	* NFKD	*   c5 == NFKD(c1) == NFKD(c2) == NFKD(c3) == NFKD(c4) == NFKD(c5)	*/	'NFKD'	=>	array(		'c5'	=>	array('c1', 'c2', 'c3', 'c4', 'c5')	));require_once($phpbb_root_path . 'includes/utf/utf_normalizer.' . $phpEx);$i = $n = 0;$failed = false;$tested_chars = array();$fp = fopen($phpbb_root_path . 'develop/NormalizationTest.txt', 'rb');while (!feof($fp)){	$line = fgets($fp);	++$n;	if ($line[0] == '@')	{		if ($i)		{			echo "done\n";		}		$i = 0;		echo "\n", substr($line, 1), "\n\n";		continue;	}	if (!strpos(' 0123456789ABCDEF', $line[0]))	{		continue;	}	if (++$i % 100 == 0)	{		echo $i, ' ';	}	list($c1, $c2, $c3, $c4, $c5) = explode(';', $line);	if (!strpos($c1, ' '))	{		/**		* We are currently testing a single character, we add it to the list of		* characters we have processed so that we can exclude it when testing		* for invariants		*/		$tested_chars[$c1] = 1;	}	foreach ($test_suite as $form => $serie)	{		foreach ($serie as $expected => $tests)		{			$hex_expected = ${$expected};			$utf_expected = hexseq_to_utf($hex_expected);			foreach ($tests as $test)			{				$utf_result = $utf_expected;				call_user_func(array('utf_normalizer', $form), $utf_result);				if (strcmp($utf_expected, $utf_result))				{					$failed = true;					$hex_result = utf_to_hexseq($utf_result);					echo "\nFAILED $expected == $form($test) ($hex_expected != $hex_result)";				}			}		}		if ($failed)		{			die("\n\nFailed at line $n\n");		}	}}fclose($fp);/*** Test for invariants*/echo "\n\nTesting for invariants...\n\n";$fp = fopen($phpbb_root_path . 'develop/UnicodeData.txt', 'rt');$n = 0;while (!feof($fp)){	if (++$n % 100 == 0)	{		echo $n, ' ';	}	$line = fgets($fp, 1024);	if (!$pos = strpos($line, ';'))	{		continue;	}	$hex_tested = $hex_expected = substr($line, 0, $pos);	if (isset($tested_chars[$hex_tested]))	{		continue;	}	$utf_expected = hex_to_utf($hex_expected);	if ($utf_expected >= UTF8_SURROGATE_FIRST	 && $utf_expected <= UTF8_SURROGATE_LAST)	{		/**		* Surrogates are illegal on their own, we expect the normalizer		* to return a replacement char		*/		$utf_expected = UTF8_REPLACEMENT;		$hex_expected = utf_to_hexseq($utf_expected);	}	foreach (array('nfc', 'nfkc', 'nfd', 'nfkd') as $form)	{		$utf_result = $utf_expected;		utf_normalizer::$form($utf_result);		$hex_result = utf_to_hexseq($utf_result);//		echo "$form($utf_expected) == $utf_result\n";		if (strcmp($utf_expected, $utf_result))		{			$failed = 1;			echo "\nFAILED $hex_expected == $form($hex_tested) ($hex_expected != $hex_result)";		}	}	if ($failed)	{		die("\n\nFailed at line $n\n");	}}fclose($fp);die("\n\nALL TESTS PASSED SUCCESSFULLY\n");/*** Download a file to the develop/ dir** @param	string	$url		URL of the file to download* @return	void*/function download($url){	global $phpbb_root_path;	if (file_exists($phpbb_root_path . 'develop/' . basename($url)))	{		return;	}	echo 'Downloading from ', $url, ' ';	if (!$fpr = fopen($url, 'rb'))	{		die("Can't download from $url\nPlease download it yourself and put it in the develop/ dir, kthxbai");	}	if (!$fpw = fopen($phpbb_root_path . 'develop/' . basename($url), 'wb'))	{		die("Can't open develop/" . basename($url) . " for output... please check your permissions or something");	}	$i = 0;	$chunk = 32768;	$done = '';	while (!feof($fpr))	{		$i += fwrite($fpw, fread($fpr, $chunk));		echo str_repeat("\x08", strlen($done));		$done = ($i >> 10) . ' KiB';		echo $done;	}	fclose($fpr);	fclose($fpw);	echo "\n";}/*** Convert a UTF string to a sequence of codepoints in hexadecimal** @param	string	$utf	UTF string* @return	integer			Unicode codepoints in hex*/function utf_to_hexseq($str){	$pos = 0;	$len = strlen($str);	$ret = array();	while ($pos < $len)	{		$c = $str[$pos];		switch ($c & "\xF0")		{			case "\xC0":			case "\xD0":				$utf_char = substr($str, $pos, 2);				$pos += 2;				break;			case "\xE0":				$utf_char = substr($str, $pos, 3);				$pos += 3;				break;			case "\xF0":				$utf_char = substr($str, $pos, 4);				$pos += 4;				break;			default:				$utf_char = $c;				++$pos;		}		$hex = dechex(utf_to_cp($utf_char));		if (!isset($hex[3]))		{			$hex = substr('000' . $hex, -4);		}		$ret[] = $hex;	}	return strtr(implode(' ', $ret), 'abcdef', 'ABCDEF');}/*** Convert a UTF-8 char to its codepoint** @param	string	$utf_char	UTF-8 char* @return	integer				Unicode codepoint*/function utf_to_cp($utf_char){	switch (strlen($utf_char))	{		case 1:			return ord($utf_char);		case 2:			return ((ord($utf_char[0]) & 0x1F) << 6) | (ord($utf_char[1]) & 0x3F);		case 3:			return ((ord($utf_char[0]) & 0x0F) << 12) | ((ord($utf_char[1]) & 0x3F) << 6) | (ord($utf_char[2]) & 0x3F);		case 4:			return ((ord($utf_char[0]) & 0x07) << 18) | ((ord($utf_char[1]) & 0x3F) << 12) | ((ord($utf_char[2]) & 0x3F) << 6) | (ord($utf_char[3]) & 0x3F);		default:			die('UTF-8 chars can only be 1-4 bytes long');	}}/*** Return a UTF string formed from a sequence of codepoints in hexadecimal** @param	string	$seq		Sequence of codepoints, separated with a space* @return	string				UTF-8 string*/function hexseq_to_utf($seq){	return implode('', array_map('hex_to_utf', explode(' ', $seq)));}/*** Convert a codepoint in hexadecimal to a UTF-8 char** @param	string	$hex		Codepoint, in hexadecimal* @return	string				UTF-8 char*/function hex_to_utf($hex){	return cp_to_utf(hexdec($hex));}/*** Convert a codepoint to a UTF-8 char** @param	integer	$cp			Unicode codepoint* @return	string				UTF-8 string*/function cp_to_utf($cp){	if ($cp > 0xFFFF)	{		return chr(0xF0 | ($cp >> 18)) . chr(0x80 | (($cp >> 12) & 0x3F)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));	}	else if ($cp > 0x7FF)	{		return chr(0xE0 | ($cp >> 12)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));	}	else if ($cp > 0x7F)	{		return chr(0xC0 | ($cp >> 6)) . chr(0x80 | ($cp & 0x3F));	}	else	{		return chr($cp);	}}
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**/if (php_sapi_name() != 'cli'){	die("This program must be run from the command line.\n");}//// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = '../';$phpEx = substr(strrchr(__FILE__, '.'), 1);echo "Checking for required files\n";download('http://unicode.org/Public/UNIDATA/CaseFolding.txt');echo "\n";/*** Load the CaseFolding table*/echo "Loading CaseFolding\n";$unidata = file_get_contents('CaseFolding.txt');function utf8_chr($cp){    if ($cp > 0xFFFF)    {        return chr(0xF0 | ($cp >> 18)) . chr(0x80 | (($cp >> 12) & 0x3F)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));    }    else if ($cp > 0x7FF)    {        return chr(0xE0 | ($cp >> 12)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));    }    else if ($cp > 0x7F)    {        return chr(0xC0 | ($cp >> 6)) . chr(0x80 | ($cp & 0x3F));    }    else    {        return chr($cp);    }}preg_match_all('/^([0-9A-F]+); ([CFS]); ([0-9A-F]+(?: [0-9A-F]+)*);/im', $unidata, $array, PREG_SET_ORDER);$uniarray = array();foreach ($array as $value){    $uniarray[$value[2]][utf8_chr(hexdec((string)$value[1]))] = implode(array_map('utf8_chr', array_map('hexdec', explode(' ', $value[3]))));}foreach ($uniarray as $idx => $contents){	echo "Writing to case_fold_$idx.$phpEx\n";	$fp = fopen($phpbb_root_path . 'includes/utf/data/case_fold_' . strtolower($idx) . '.' . $phpEx, 'wb');	fwrite($fp, '<?php return ' . my_var_export($contents) . ';');	fclose($fp);}/*** Return a parsable string representation of a variable** This is function is limited to array/strings/integers** @param	mixed	$var		Variable* @return	string				PHP code representing the variable*/function my_var_export($var){	if (is_array($var))	{		$lines = array();		foreach ($var as $k => $v)		{			$lines[] = my_var_export($k) . '=>' . my_var_export($v);		}		return 'array(' . implode(',', $lines) . ')';	}	else if (is_string($var))	{		return "'" . str_replace(array('\\', "'"), array('\\\\', "\\'"), $var) . "'";	}	else	{		return $var;	}}/*** Download a file to the develop/ dir** @param	string	$url		URL of the file to download* @return	void*/function download($url){	global $phpbb_root_path;	if (file_exists($phpbb_root_path . 'develop/' . basename($url)))	{		return;	}	echo 'Downloading from ', $url, ' ';	if (!$fpr = fopen($url, 'rb'))	{		die("Can't download from $url\nPlease download it yourself and put it in the develop/ dir, kthxbai");	}	if (!$fpw = fopen($phpbb_root_path . 'develop/' . basename($url), 'wb'))	{		die("Can't open develop/" . basename($url) . " for output... please check your permissions or something");	}	$i = 0;	$chunk = 32768;	$done = '';	while (!feof($fpr))	{		$i += fwrite($fpw, fread($fpr, $chunk));		echo str_repeat("\x08", strlen($done));		$done = ($i >> 10) . ' KiB';		echo $done;	}	fclose($fpr);	fclose($fpw);	echo "\n";}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2009, 2010 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** This script will check your database for potentially dangerous flash BBCode tags*///// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it\n");/***/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);if (php_sapi_name() != 'cli'){	header('Content-Type: text/plain');}check_table_flash_bbcodes(POSTS_TABLE, 'post_id', 'post_text', 'bbcode_uid', 'bbcode_bitfield');check_table_flash_bbcodes(PRIVMSGS_TABLE, 'msg_id', 'message_text', 'bbcode_uid', 'bbcode_bitfield');check_table_flash_bbcodes(USERS_TABLE, 'user_id', 'user_sig', 'user_sig_bbcode_uid', 'user_sig_bbcode_bitfield');check_table_flash_bbcodes(FORUMS_TABLE, 'forum_id', 'forum_desc', 'forum_desc_uid', 'forum_desc_bitfield');check_table_flash_bbcodes(FORUMS_TABLE, 'forum_id', 'forum_rules', 'forum_rules_uid', 'forum_rules_bitfield');check_table_flash_bbcodes(GROUPS_TABLE, 'group_id', 'group_desc', 'group_desc_uid', 'group_desc_bitfield');echo "If potentially dangerous flash bbcodes were found, please reparse the posts using the Support Toolkit (http://www.phpbb.com/support/stk/) and/or file a ticket in the Incident Tracker (http://www.phpbb.com/incidents/).\n";function check_table_flash_bbcodes($table_name, $id_field, $content_field, $uid_field, $bitfield_field){	echo "Checking $content_field on $table_name\n";	$ids = get_table_flash_bbcode_pkids($table_name, $id_field, $content_field, $uid_field, $bitfield_field);	$size = sizeof($ids);	if ($size)	{		echo "Found $size potentially dangerous flash bbcodes.\n";		echo "$id_field: " . implode(', ', $ids) . "\n";	}	else	{		echo "No potentially dangerous flash bbcodes found.\n";	}	echo "\n";}function get_table_flash_bbcode_pkids($table_name, $id_field, $content_field, $uid_field, $bitfield_field){	global $db;	$ids = array();	$sql = "SELECT $id_field, $content_field, $uid_field, $bitfield_field		FROM $table_name		WHERE $content_field LIKE '%[/flash:%'			AND $bitfield_field <> ''";	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$uid = $row[$uid_field];		// thanks support toolkit		$content = html_entity_decode_utf8($row[$content_field]);		set_var($content, $content, 'string', true);		$content = utf8_normalize_nfc($content);		$bitfield_data = $row[$bitfield_field];		if (!is_valid_flash_bbcode($content, $uid) && has_flash_enabled($bitfield_data))		{			$ids[] = (int) $row[$id_field];		}	}	$db->sql_freeresult($result);	return $ids;}function get_flash_regex($uid){	return "#\[flash=([0-9]+),([0-9]+):$uid\](.*?)\[/flash:$uid\]#";}// extract all valid flash bbcodes// check if the bbcode content is a valid URL for each matchfunction is_valid_flash_bbcode($cleaned_content, $uid){	$regex = get_flash_regex($uid);	$url_regex = get_preg_expression('url');	$www_url_regex = get_preg_expression('www_url');	if (preg_match_all($regex, $cleaned_content, $matches))	{		foreach ($matches[3] as $flash_url)		{			if (!preg_match("#^($url_regex|$www_url_regex)$#i", $flash_url))			{				return false;			}		}	}	return true;}// check if a bitfield includes flash// 11 = flash bitfunction has_flash_enabled($bitfield_data){	$bitfield = new bitfield($bitfield_data);	return $bitfield->get(11);}// taken from support toolkitfunction html_entity_decode_utf8($string){	static $trans_tbl;	// replace numeric entities	$string = preg_replace('~&#x([0-9a-f]+);~ei', 'code2utf8(hexdec("\\1"))', $string);	$string = preg_replace('~&#([0-9]+);~e', 'code2utf8(\\1)', $string);	// replace literal entities	if (!isset($trans_tbl))	{		$trans_tbl = array();		foreach (get_html_translation_table(HTML_ENTITIES) as $val=>$key)			$trans_tbl[$key] = utf8_encode($val);	}	return strtr($string, $trans_tbl);}// taken from support toolkit// Returns the utf string corresponding to the unicode value (from php.net, courtesy - romans@void.lv)function code2utf8($num){	if ($num < 128) return chr($num);	if ($num < 2048) return chr(($num >> 6) + 192) . chr(($num & 63) + 128);	if ($num < 65536) return chr(($num >> 12) + 224) . chr((($num >> 6) & 63) + 128) . chr(($num & 63) + 128);	if ($num < 2097152) return chr(($num >> 18) + 240) . chr((($num >> 12) & 63) + 128) . chr((($num >> 6) & 63) + 128) . chr(($num & 63) + 128);	return '';}
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**/if (php_sapi_name() != 'cli'){	die("This program must be run from the command line.\n");}//// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = '../';$phpEx = substr(strrchr(__FILE__, '.'), 1);echo "Checking for required files\n";download('http://www.unicode.org/Public/UNIDATA/CompositionExclusions.txt');download('http://www.unicode.org/Public/UNIDATA/DerivedNormalizationProps.txt');download('http://www.unicode.org/Public/UNIDATA/UnicodeData.txt');echo "\n";require_once($phpbb_root_path . 'includes/utf/utf_normalizer.' . $phpEx);$file_contents = array();/*** Generate some Hangul/Jamo stuff*/echo "\nGenerating Hangul and Jamo tables\n";for ($i = 0; $i < UNICODE_HANGUL_LCOUNT; ++$i){	$utf_char = cp_to_utf(UNICODE_HANGUL_LBASE + $i);	$file_contents['utf_normalizer_common']['utf_jamo_index'][$utf_char] = $i * UNICODE_HANGUL_VCOUNT * UNICODE_HANGUL_TCOUNT + UNICODE_HANGUL_SBASE;	$file_contents['utf_normalizer_common']['utf_jamo_type'][$utf_char] = UNICODE_JAMO_L;}for ($i = 0; $i < UNICODE_HANGUL_VCOUNT; ++$i){	$utf_char = cp_to_utf(UNICODE_HANGUL_VBASE + $i);	$file_contents['utf_normalizer_common']['utf_jamo_index'][$utf_char] = $i * UNICODE_HANGUL_TCOUNT;	$file_contents['utf_normalizer_common']['utf_jamo_type'][$utf_char] = UNICODE_JAMO_V;}for ($i = 0; $i < UNICODE_HANGUL_TCOUNT; ++$i){	$utf_char = cp_to_utf(UNICODE_HANGUL_TBASE + $i);	$file_contents['utf_normalizer_common']['utf_jamo_index'][$utf_char] = $i;	$file_contents['utf_normalizer_common']['utf_jamo_type'][$utf_char] = UNICODE_JAMO_T;}/*** Load the CompositionExclusions table*/echo "Loading CompositionExclusion\n";$fp = fopen('CompositionExclusions.txt', 'rt');$exclude = array();while (!feof($fp)){	$line = fgets($fp, 1024);	if (!strpos(' 0123456789ABCDEFabcdef', $line[0]))	{		continue;	}	$cp = strtok($line, ' ');	if ($pos = strpos($cp, '..'))	{		$start = hexdec(substr($cp, 0, $pos));		$end = hexdec(substr($cp, $pos + 2));		for ($i = $start; $i < $end; ++$i)		{			$exclude[$i] = 1;		}	}	else	{		$exclude[hexdec($cp)] = 1;	}}fclose($fp);/*** Load QuickCheck tables*/echo "Generating QuickCheck tables\n";$fp = fopen('DerivedNormalizationProps.txt', 'rt');while (!feof($fp)){	$line = fgets($fp, 1024);	if (!strpos(' 0123456789ABCDEFabcdef', $line[0]))	{		continue;	}	$p = array_map('trim', explode(';', strtok($line, '#')));	/**	* Capture only NFC_QC, NFKC_QC	*/	if (!preg_match('#^NFK?C_QC$#', $p[1]))	{		continue;	}	if ($pos = strpos($p[0], '..'))	{		$start = hexdec(substr($p[0], 0, $pos));		$end = hexdec(substr($p[0], $pos + 2));	}	else	{		$start = $end = hexdec($p[0]);	}	if ($start >= UTF8_HANGUL_FIRST && $end <= UTF8_HANGUL_LAST)	{		/**		* We do not store Hangul syllables in the array		*/		continue;	}	if ($p[2] == 'M')	{		$val = UNICODE_QC_MAYBE;	}	else	{		$val = UNICODE_QC_NO;	}	if ($p[1] == 'NFKC_QC')	{		$file = 'utf_nfkc_qc';	}	else	{		$file = 'utf_nfc_qc';	}	for ($i = $start; $i <= $end; ++$i)	{		/**		* The vars have the same name as the file: $utf_nfc_qc is in utf_nfc_qc.php		*/		$file_contents[$file][$file][cp_to_utf($i)] = $val;	}}fclose($fp);/*** Do mappings*/echo "Loading Unicode decomposition mappings\n";$fp = fopen($phpbb_root_path . 'develop/UnicodeData.txt', 'rt');$map = array();while (!feof($fp)){	$p = explode(';', fgets($fp, 1024));	$cp = hexdec($p[0]);	if (!empty($p[3]))	{		/**		* Store combining class > 0		*/		$file_contents['utf_normalizer_common']['utf_combining_class'][cp_to_utf($cp)] = (int) $p[3];	}	if (!isset($p[5]) || !preg_match_all('#[0-9A-F]+#', strip_tags($p[5]), $m))	{		continue;	}	if (strpos($p[5], '>'))	{		$map['NFKD'][$cp] = implode(' ', array_map('hexdec', $m[0]));	}	else	{		$map['NFD'][$cp] = $map['NFKD'][$cp] = implode(' ', array_map('hexdec', $m[0]));	}}fclose($fp);/*** Build the canonical composition table*/echo "Generating the Canonical Composition table\n";foreach ($map['NFD'] as $cp => $decomp_seq){	if (!strpos($decomp_seq, ' ') || isset($exclude[$cp]))	{		/**		* Singletons are excluded from canonical composition		*/		continue;	}	$utf_seq = implode('', array_map('cp_to_utf', explode(' ', $decomp_seq)));	if (!isset($file_contents['utf_canonical_comp']['utf_canonical_comp'][$utf_seq]))	{		$file_contents['utf_canonical_comp']['utf_canonical_comp'][$utf_seq] = cp_to_utf($cp);	}}/*** Decompose the NF[K]D mappings recursively and prepare the file contents*/echo "Generating the Canonical and Compatibility Decomposition tables\n\n";foreach ($map as $type => $decomp_map){	foreach ($decomp_map as $cp => $decomp_seq)	{		$decomp_map[$cp] = decompose($decomp_map, $decomp_seq);	}	unset($decomp_seq);	if ($type == 'NFKD')	{		$file = 'utf_compatibility_decomp';		$var = 'utf_compatibility_decomp';	}	else	{		$file = 'utf_canonical_decomp';		$var = 'utf_canonical_decomp';	}	/**	* Generate the corresponding file	*/	foreach ($decomp_map as $cp => $decomp_seq)	{		$file_contents[$file][$var][cp_to_utf($cp)] = implode('', array_map('cp_to_utf', explode(' ', $decomp_seq)));	}}/*** Generate and/or alter the files*/foreach ($file_contents as $file => $contents){	/**	* Generate a new file	*/	echo "Writing to $file.$phpEx\n";	if (!$fp = fopen($phpbb_root_path . 'includes/utf/data/' . $file . '.' . $phpEx, 'wb'))	{		trigger_error('Cannot open ' . $file . ' for write');	}	fwrite($fp, '<?php');	foreach ($contents as $var => $val)	{		fwrite($fp, "\n\$GLOBALS[" . my_var_export($var) . ']=' . my_var_export($val) . ";");	}	fclose($fp);}echo "\n*** UTF-8 normalization tables done\n\n";/*** Now we'll generate the files needed by the search indexer*/echo "Generating search indexer tables\n";$fp = fopen($phpbb_root_path . 'develop/UnicodeData.txt', 'rt');$map = array();while ($line = fgets($fp, 1024)){	/**	* The current line is split, $m[0] hold the codepoint in hexadecimal and	* all other fields numbered as in http://www.unicode.org/Public/UNIDATA/UCD.html#UnicodeData.txt	*/	$m = explode(';', $line);	/**	* @var	integer	$cp			Current char codepoint	* @var	string	$utf_char	UTF-8 representation of current char	*/	$cp = hexdec($m[0]);	$utf_char = cp_to_utf($cp);	/**	* $m[2] holds the "General Category" of the character	* @link http://www.unicode.org/Public/UNIDATA/UCD.html#General_Category_Values	*/	switch ($m[2][0])	{		case 'L':			/**			* We allow all letters and map them to their lowercased counterpart on the fly			*/			$map_to_hex = (isset($m[13][0])) ? $m[13] : $m[0];			if (preg_match('#^LATIN.*(?:LETTER|LIGATURE) ([A-Z]{2}(?![A-Z]))$#', $m[1], $capture))			{				/**				* Special hack for some latin ligatures. Using the name of a character				* is bad practice, but for now it works well enough.				*				* @todo Note that ligatures with combining marks such as U+01E2 are				* not supported at this time				*/				$map[$cp] = strtolower($capture[1]);			}			else if (isset($m[13][0]))			{				/**				* If the letter has a lowercased form, use it				*/				$map[$cp] = hex_to_utf($m[13]);			}			else			{				/**				* In all other cases, map the letter to itself				*/				$map[$cp] = $utf_char;			}			break;		case 'M':			/**			* We allow all marks, they are mapped to themselves			*/			$map[$cp] = $utf_char;			break;		case 'N':			/**			* We allow all numbers, but we map them to their numeric value whenever			* possible. The numeric value (field #8) is in ASCII already			*			* @todo Note that fractions such as U+00BD will be converted to something			* like "1/2", with a slash. However, "1/2" entered in ASCII is converted			* to "1 2". This will have to be fixed.			*/			$map[$cp] = (isset($m[8][0])) ? $m[8] : $utf_char;			break;		default:			/**			* Everything else is ignored, skip to the next line			*/			continue 2;	}}fclose($fp);/*** Add some cheating*/$cheats = array(	'00DF'	=>	'ss',		#	German sharp S	'00C5'	=>	'ae',		#	Capital A with diaeresis	'00E4'	=>	'ae',		#	Small A with diaeresis	'00D6'	=>	'oe',		#	Capital O with diaeresis	'00F6'	=>	'oe',		#	Small O with diaeresis	'00DC'	=>	'ue',		#	Capital U with diaeresis	'00FC'	=>	'ue',		#	Small U with diaeresis);/*** Add our "cheat replacements" to the map*/foreach ($cheats as $hex => $map_to){	$map[hexdec($hex)] = $map_to;}/*** Split the map into smaller blocks*/$file_contents = array();foreach ($map as $cp => $map_to){	$file_contents[$cp >> 11][cp_to_utf($cp)] = $map_to;}unset($map);foreach ($file_contents as $idx => $contents){	echo "Writing to search_indexer_$idx.$phpEx\n";	$fp = fopen($phpbb_root_path . 'includes/utf/data/search_indexer_' . $idx . '.' . $phpEx, 'wb');	fwrite($fp, '<?php return ' . my_var_export($contents) . ';');	fclose($fp);}echo "\n*** Search indexer tables done\n\n";die("\nAll done!\n");//////////////////////////////////////////////////////////////////////////////////                             Internal functions                             ///////////////////////////////////////////////////////////////////////////////////*** Decompose a sequence recusively** @param	array	$decomp_map	Decomposition mapping, passed by reference* @param	string	$decomp_seq	Decomposition sequence as decimal codepoints separated with a space* @return	string				Decomposition sequence, fully decomposed*/function decompose(&$decomp_map, $decomp_seq){	$ret = array();	foreach (explode(' ', $decomp_seq) as $cp)	{		if (isset($decomp_map[$cp]))		{			$ret[] = decompose($decomp_map, $decomp_map[$cp]);		}		else		{			$ret[] = $cp;		}	}	return implode(' ', $ret);}/*** Return a parsable string representation of a variable** This is function is limited to array/strings/integers** @param	mixed	$var		Variable* @return	string				PHP code representing the variable*/function my_var_export($var){	if (is_array($var))	{		$lines = array();		foreach ($var as $k => $v)		{			$lines[] = my_var_export($k) . '=>' . my_var_export($v);		}		return 'array(' . implode(',', $lines) . ')';	}	else if (is_string($var))	{		return "'" . str_replace(array('\\', "'"), array('\\\\', "\\'"), $var) . "'";	}	else	{		return $var;	}}/*** Download a file to the develop/ dir** @param	string	$url		URL of the file to download* @return	void*/function download($url){	global $phpbb_root_path;	if (file_exists($phpbb_root_path . 'develop/' . basename($url)))	{		return;	}	echo 'Downloading from ', $url, ' ';	if (!$fpr = fopen($url, 'rb'))	{		die("Can't download from $url\nPlease download it yourself and put it in the develop/ dir, kthxbai");	}	if (!$fpw = fopen($phpbb_root_path . 'develop/' . basename($url), 'wb'))	{		die("Can't open develop/" . basename($url) . " for output... please check your permissions or something");	}	$i = 0;	$chunk = 32768;	$done = '';	while (!feof($fpr))	{		$i += fwrite($fpw, fread($fpr, $chunk));		echo str_repeat("\x08", strlen($done));		$done = ($i >> 10) . ' KiB';		echo $done;	}	fclose($fpr);	fclose($fpw);	echo "\n";}/*** Convert a codepoint in hexadecimal to a UTF-8 char** @param	string	$hex		Codepoint, in hexadecimal* @return	string				UTF-8 char*/function hex_to_utf($hex){	return cp_to_utf(hexdec($hex));}/*** Return a UTF string formed from a sequence of codepoints in hexadecimal** @param	string	$seq		Sequence of codepoints, separated with a space* @return	string				UTF-8 string*/function hexseq_to_utf($seq){	return implode('', array_map('hex_to_utf', explode(' ', $seq)));}/*** Convert a codepoint to a UTF-8 char** @param	integer	$cp			Unicode codepoint* @return	string				UTF-8 string*/function cp_to_utf($cp){	if ($cp > 0xFFFF)	{		return chr(0xF0 | ($cp >> 18)) . chr(0x80 | (($cp >> 12) & 0x3F)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));	}	else if ($cp > 0x7FF)	{		return chr(0xE0 | ($cp >> 12)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));	}	else if ($cp > 0x7F)	{		return chr(0xC0 | ($cp >> 6)) . chr(0x80 | ($cp & 0x3F));	}	else	{		return chr($cp);	}}
<?php/**** acp_common [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// Common$lang = array_merge($lang, array(	'ACP_ADMINISTRATORS'		=> 'Administrators',	'ACP_ADMIN_LOGS'			=> 'Admin log',	'ACP_ADMIN_ROLES'			=> 'Admin roles',	'ACP_ATTACHMENTS'			=> 'Attachments',	'ACP_ATTACHMENT_SETTINGS'	=> 'Attachment settings',	'ACP_AUTH_SETTINGS'			=> 'Authentication',	'ACP_AUTOMATION'			=> 'Automation',	'ACP_AVATAR_SETTINGS'		=> 'Avatar settings',	'ACP_BACKUP'				=> 'Backup',	'ACP_BAN'					=> 'Banning',	'ACP_BAN_EMAILS'			=> 'Ban e-mails',	'ACP_BAN_IPS'				=> 'Ban IPs',	'ACP_BAN_USERNAMES'			=> 'Ban usernames',	'ACP_BBCODES'				=> 'BBCodes',	'ACP_BOARD_CONFIGURATION'	=> 'Board configuration',	'ACP_BOARD_FEATURES'		=> 'Board features',	'ACP_BOARD_MANAGEMENT'		=> 'Board management',	'ACP_BOARD_SETTINGS'		=> 'Board settings',	'ACP_BOTS'					=> 'Spiders/Robots',	'ACP_CAPTCHA'				=> 'CAPTCHA',	'ACP_CAT_DATABASE'			=> 'Database',	'ACP_CAT_DOT_MODS'			=> '.MODs',	'ACP_CAT_FORUMS'			=> 'Forums',	'ACP_CAT_GENERAL'			=> 'General',	'ACP_CAT_MAINTENANCE'		=> 'Maintenance',	'ACP_CAT_PERMISSIONS'		=> 'Permissions',	'ACP_CAT_POSTING'			=> 'Posting',	'ACP_CAT_STYLES'			=> 'Styles',	'ACP_CAT_SYSTEM'			=> 'System',	'ACP_CAT_USERGROUP'			=> 'Users and Groups',	'ACP_CAT_USERS'				=> 'Users',	'ACP_CLIENT_COMMUNICATION'	=> 'Client communication',	'ACP_COOKIE_SETTINGS'		=> 'Cookie settings',	'ACP_CRITICAL_LOGS'			=> 'Error log',	'ACP_CUSTOM_PROFILE_FIELDS'	=> 'Custom profile fields',	'ACP_DATABASE'				=> 'Database management',	'ACP_DISALLOW'				=> 'Disallow',	'ACP_DISALLOW_USERNAMES'	=> 'Disallow usernames',	'ACP_EMAIL_SETTINGS'		=> 'E-mail settings',	'ACP_EXTENSION_GROUPS'		=> 'Manage extension groups',	'ACP_FORUM_BASED_PERMISSIONS'	=> 'Forum based permissions',	'ACP_FORUM_LOGS'				=> 'Forum logs',	'ACP_FORUM_MANAGEMENT'			=> 'Forum management',	'ACP_FORUM_MODERATORS'			=> 'Forum moderators',	'ACP_FORUM_PERMISSIONS'			=> 'Forum permissions',	'ACP_FORUM_PERMISSIONS_COPY'	=> 'Copy forum permissions',	'ACP_FORUM_ROLES'				=> 'Forum roles',	'ACP_GENERAL_CONFIGURATION'		=> 'General configuration',	'ACP_GENERAL_TASKS'				=> 'General tasks',	'ACP_GLOBAL_MODERATORS'			=> 'Global moderators',	'ACP_GLOBAL_PERMISSIONS'		=> 'Global permissions',	'ACP_GROUPS'					=> 'Groups',	'ACP_GROUPS_FORUM_PERMISSIONS'	=> 'Groups forum permissions',	'ACP_GROUPS_MANAGE'				=> 'Manage groups',	'ACP_GROUPS_MANAGEMENT'			=> 'Group management',	'ACP_GROUPS_PERMISSIONS'		=> 'Groups permissions',	'ACP_ICONS'					=> 'Topic icons',	'ACP_ICONS_SMILIES'			=> 'Topic icons/smilies',	'ACP_IMAGESETS'				=> 'Imagesets',	'ACP_INACTIVE_USERS'		=> 'Inactive users',	'ACP_INDEX'					=> 'ACP index',	'ACP_JABBER_SETTINGS'		=> 'Jabber settings',	'ACP_LANGUAGE'				=> 'Language management',	'ACP_LANGUAGE_PACKS'		=> 'Language packs',	'ACP_LOAD_SETTINGS'			=> 'Load settings',	'ACP_LOGGING'				=> 'Logging',	'ACP_MAIN'					=> 'ACP index',	'ACP_MANAGE_EXTENSIONS'		=> 'Manage extensions',	'ACP_MANAGE_FORUMS'			=> 'Manage forums',	'ACP_MANAGE_RANKS'			=> 'Manage ranks',	'ACP_MANAGE_REASONS'		=> 'Manage report/denial reasons',	'ACP_MANAGE_USERS'			=> 'Manage users',	'ACP_MASS_EMAIL'			=> 'Mass e-mail',	'ACP_MESSAGES'				=> 'Messages',	'ACP_MESSAGE_SETTINGS'		=> 'Private message settings',	'ACP_MODULE_MANAGEMENT'		=> 'Module management',	'ACP_MOD_LOGS'				=> 'Moderator log',	'ACP_MOD_ROLES'				=> 'Moderator roles',	'ACP_NO_ITEMS'				=> 'There are no items yet.',	'ACP_ORPHAN_ATTACHMENTS'	=> 'Orphaned attachments',	'ACP_PERMISSIONS'			=> 'Permissions',	'ACP_PERMISSION_MASKS'		=> 'Permission masks',	'ACP_PERMISSION_ROLES'		=> 'Permission roles',	'ACP_PERMISSION_TRACE'		=> 'Permission trace',	'ACP_PHP_INFO'				=> 'PHP information',	'ACP_POST_SETTINGS'			=> 'Post settings',	'ACP_PRUNE_FORUMS'			=> 'Prune forums',	'ACP_PRUNE_USERS'			=> 'Prune users',	'ACP_PRUNING'				=> 'Pruning',	'ACP_QUICK_ACCESS'			=> 'Quick access',	'ACP_RANKS'					=> 'Ranks',	'ACP_REASONS'				=> 'Report/denial reasons',	'ACP_REGISTER_SETTINGS'		=> 'User registration settings',	'ACP_RESTORE'				=> 'Restore',	'ACP_FEED'					=> 'Feed management',	'ACP_FEED_SETTINGS'			=> 'Feed settings',	'ACP_SEARCH'				=> 'Search configuration',	'ACP_SEARCH_INDEX'			=> 'Search index',	'ACP_SEARCH_SETTINGS'		=> 'Search settings',	'ACP_SECURITY_SETTINGS'		=> 'Security settings',	'ACP_SEND_STATISTICS'		=> 'Send statistical information',	'ACP_SERVER_CONFIGURATION'	=> 'Server configuration',	'ACP_SERVER_SETTINGS'		=> 'Server settings',	'ACP_SIGNATURE_SETTINGS'	=> 'Signature settings',	'ACP_SMILIES'				=> 'Smilies',	'ACP_STYLE_COMPONENTS'		=> 'Style components',	'ACP_STYLE_MANAGEMENT'		=> 'Style management',	'ACP_STYLES'				=> 'Styles',	'ACP_SUBMIT_CHANGES'		=> 'Submit changes',	'ACP_TEMPLATES'				=> 'Templates',	'ACP_THEMES'				=> 'Themes',	'ACP_UPDATE'					=> 'Updating',	'ACP_USERS_FORUM_PERMISSIONS'	=> 'Users forum permissions',	'ACP_USERS_LOGS'				=> 'User logs',	'ACP_USERS_PERMISSIONS'			=> 'Users permissions',	'ACP_USER_ATTACH'				=> 'Attachments',	'ACP_USER_AVATAR'				=> 'Avatar',	'ACP_USER_FEEDBACK'				=> 'Feedback',	'ACP_USER_GROUPS'				=> 'Groups',	'ACP_USER_MANAGEMENT'			=> 'User management',	'ACP_USER_OVERVIEW'				=> 'Overview',	'ACP_USER_PERM'					=> 'Permissions',	'ACP_USER_PREFS'				=> 'Preferences',	'ACP_USER_PROFILE'				=> 'Profile',	'ACP_USER_RANK'					=> 'Rank',	'ACP_USER_ROLES'				=> 'User roles',	'ACP_USER_SECURITY'				=> 'User security',	'ACP_USER_SIG'					=> 'Signature',	'ACP_USER_WARNINGS'				=> 'Warnings',	'ACP_VC_SETTINGS'					=> 'Spambot countermeasures',	'ACP_VC_CAPTCHA_DISPLAY'			=> 'CAPTCHA image preview',	'ACP_VERSION_CHECK'					=> 'Check for updates',	'ACP_VIEW_ADMIN_PERMISSIONS'		=> 'View administrative permissions',	'ACP_VIEW_FORUM_MOD_PERMISSIONS'	=> 'View forum moderation permissions',	'ACP_VIEW_FORUM_PERMISSIONS'		=> 'View forum-based permissions',	'ACP_VIEW_GLOBAL_MOD_PERMISSIONS'	=> 'View global moderation permissions',	'ACP_VIEW_USER_PERMISSIONS'			=> 'View user-based permissions',	'ACP_WORDS'					=> 'Word censoring',	'ACTION'				=> 'Action',	'ACTIONS'				=> 'Actions',	'ACTIVATE'				=> 'Activate',	'ADD'					=> 'Add',	'ADMIN'					=> 'Administration',	'ADMIN_INDEX'			=> 'Admin index',	'ADMIN_PANEL'			=> 'Administration Control Panel',	'ADM_LOGOUT'			=> 'ACP&nbsp;Logout',	'ADM_LOGGED_OUT'		=> 'Successfully logged out from Administration Control Panel',	'BACK'					=> 'Back',	'COLOUR_SWATCH'			=> 'Web-safe colour swatch',	'CONFIG_UPDATED'		=> 'Configuration updated successfully.',	'DEACTIVATE'				=> 'Deactivate',	'DIRECTORY_DOES_NOT_EXIST'	=> 'The entered path %s does not exist.',	'DIRECTORY_NOT_DIR'			=> 'The entered path %s is not a directory.',	'DIRECTORY_NOT_WRITABLE'	=> 'The entered path %s is not writable.',	'DISABLE'					=> 'Disable',	'DOWNLOAD'					=> 'Download',	'DOWNLOAD_AS'				=> 'Download as',	'DOWNLOAD_STORE'			=> 'Download or store file',	'DOWNLOAD_STORE_EXPLAIN'	=> 'You may directly download the file or save it in your <samp>store/</samp> folder.',	'EDIT'					=> 'Edit',	'ENABLE'				=> 'Enable',	'EXPORT_DOWNLOAD'		=> 'Download',	'EXPORT_STORE'			=> 'Store',	'GENERAL_OPTIONS'		=> 'General options',	'GENERAL_SETTINGS'		=> 'General settings',	'GLOBAL_MASK'			=> 'Global permission mask',	'INSTALL'				=> 'Install',	'IP'					=> 'User IP',	'IP_HOSTNAME'			=> 'IP addresses or hostnames',	'LOGGED_IN_AS'			=> 'You are logged in as:',	'LOGIN_ADMIN'			=> 'To administer the board you must be an authenticated user.',	'LOGIN_ADMIN_CONFIRM'	=> 'To administer the board you must re-authenticate yourself.',	'LOGIN_ADMIN_SUCCESS'	=> 'You have successfully authenticated and will now be redirected to the Administration Control Panel.',	'LOOK_UP_FORUM'			=> 'Select a forum',	'LOOK_UP_FORUMS_EXPLAIN'=> 'You are able to select more than one forum.',	'MANAGE'				=> 'Manage',	'MENU_TOGGLE'			=> 'Hide or display the side menu',	'MORE'					=> 'More',			// Not used at the moment	'MORE_INFORMATION'		=> 'More information ',	'MOVE_DOWN'				=> 'Move down',	'MOVE_UP'				=> 'Move up',	'NOTIFY'				=> 'Notification',	'NO_ADMIN'				=> 'You are not authorised to administer this board.',	'NO_EMAILS_DEFINED'		=> 'No valid e-mail addresses found.',	'NO_PASSWORD_SUPPLIED'	=> 'You need to enter your password to access the Administration Control Panel.',	'OFF'					=> 'Off',	'ON'					=> 'On',	'PARSE_BBCODE'						=> 'Parse BBCode',	'PARSE_SMILIES'						=> 'Parse smilies',	'PARSE_URLS'						=> 'Parse links',	'PERMISSIONS_TRANSFERRED'			=> 'Permissions transferred',	'PERMISSIONS_TRANSFERRED_EXPLAIN'	=> 'You currently have the permissions from %1$s. You are able to browse the board with this users permissions, but not access the administration control panel since admin permissions were not transferred. You can <a href="%2$s"><strong>revert to your permission set</strong></a> at any time.',	'PROCEED_TO_ACP'					=> '%sProceed to the ACP%s',	'REMIND'							=> 'Remind',	'RESYNC'							=> 'Resynchronise',	'RETURN_TO'							=> 'Return to',	'SELECT_ANONYMOUS'		=> 'Select anonymous user',	'SELECT_OPTION'			=> 'Select option',	'SETTING_TOO_LOW'		=> 'The provided value for the setting %1$s is too low. The minimum acceptable value is %2$d.',	'SETTING_TOO_BIG'		=> 'The provided value for the setting %1$s is too high. The maximum acceptable value is %2$d.',	'SETTING_TOO_LONG'		=> 'The provided value for the setting %1$s is too long. The maximum acceptable length is %2$d.',	'SETTING_TOO_SHORT'		=> 'The provided value for the setting %1$s is too short. The minimum acceptable length is %2$d.',	'SHOW_ALL_OPERATIONS'	=> 'Show all operations',	'UCP'					=> 'User Control Panel',	'USERNAMES_EXPLAIN'		=> 'Place each username on a separate line.',	'USER_CONTROL_PANEL'	=> 'User Control Panel',	'WARNING'				=> 'Warning',));// PHP info$lang = array_merge($lang, array(	'ACP_PHP_INFO_EXPLAIN'	=> 'This page lists information on the version of PHP installed on this server. It includes details of loaded modules, available variables and default settings. This information may be useful when diagnosing problems. Please be aware that some hosting companies will limit what information is displayed here for security reasons. You are advised to not give out any details on this page except when asked by <a href="http://www.phpbb.com/about/team/">official team members</a> on the support forums.',	'NO_PHPINFO_AVAILABLE'	=> 'Information about your PHP configuration is unable to be determined. Phpinfo() has been disabled for security reasons.',));// Logs$lang = array_merge($lang, array(	'ACP_ADMIN_LOGS_EXPLAIN'	=> 'This lists all the actions carried out by board administrators. You can sort by username, date, IP or action. If you have appropriate permissions you can also clear individual operations or the log as a whole.',	'ACP_CRITICAL_LOGS_EXPLAIN'	=> 'This lists the actions carried out by the board itself. This log provides you with information you are able to use for solving specific problems, for example non-delivery of e-mails. You can sort by username, date, IP or action. If you have appropriate permissions you can also clear individual operations or the log as a whole.',	'ACP_MOD_LOGS_EXPLAIN'		=> 'This lists all actions done on forums, topics and posts as well as actions carried out on users by moderators, including banning. You can sort by username, date, IP or action. If you have appropriate permissions you can also clear individual operations or the log as a whole.',	'ACP_USERS_LOGS_EXPLAIN'	=> 'This lists all actions carried out by users or on users (reports, warnings and user notes).',	'ALL_ENTRIES'				=> 'All entries',	'DISPLAY_LOG'	=> 'Display entries from previous',	'NO_ENTRIES'	=> 'No log entries for this period.',	'SORT_IP'		=> 'IP address',	'SORT_DATE'		=> 'Date',	'SORT_ACTION'	=> 'Log action',));// Index page$lang = array_merge($lang, array(	'ADMIN_INTRO'				=> 'Thank you for choosing phpBB as your board solution. This screen will give you a quick overview of all the various statistics of your board. The links on the left hand side of this screen allow you to control every aspect of your board experience. Each page will have instructions on how to use the tools.',	'ADMIN_LOG'					=> 'Logged administrator actions',	'ADMIN_LOG_INDEX_EXPLAIN'	=> 'This gives an overview of the last five actions carried out by board administrators. A full copy of the log can be viewed from the appropriate menu item or following the link below.',	'AVATAR_DIR_SIZE'			=> 'Avatar directory size',	'BOARD_STARTED'		=> 'Board started',	'BOARD_VERSION'		=> 'Board version',	'DATABASE_SERVER_INFO'	=> 'Database server',	'DATABASE_SIZE'			=> 'Database size',	// Enviroment configuration checks, mbstring related	'ERROR_MBSTRING_FUNC_OVERLOAD'					=> 'Function overloading is improperly configured',	'ERROR_MBSTRING_FUNC_OVERLOAD_EXPLAIN'			=> '<var>mbstring.func_overload</var> must be set to either 0 or 4. You can check the current value on the <samp>PHP information</samp> page.',	'ERROR_MBSTRING_ENCODING_TRANSLATION'			=> 'Transparent character encoding is improperly configured',	'ERROR_MBSTRING_ENCODING_TRANSLATION_EXPLAIN'	=> '<var>mbstring.encoding_translation</var> must be set to 0. You can check the current value on the <samp>PHP information</samp> page.',	'ERROR_MBSTRING_HTTP_INPUT'						=> 'HTTP input character conversion is improperly configured',	'ERROR_MBSTRING_HTTP_INPUT_EXPLAIN'				=> '<var>mbstring.http_input</var> must be set to <samp>pass</samp>. You can check the current value on the <samp>PHP information</samp> page.',	'ERROR_MBSTRING_HTTP_OUTPUT'					=> 'HTTP output character conversion is improperly configured',	'ERROR_MBSTRING_HTTP_OUTPUT_EXPLAIN'			=> '<var>mbstring.http_output</var> must be set to <samp>pass</samp>. You can check the current value on the <samp>PHP information</samp> page.',	'FILES_PER_DAY'		=> 'Attachments per day',	'FORUM_STATS'		=> 'Board statistics',	'GZIP_COMPRESSION'	=> 'GZip compression',	'NOT_AVAILABLE'		=> 'Not available',	'NUMBER_FILES'		=> 'Number of attachments',	'NUMBER_POSTS'		=> 'Number of posts',	'NUMBER_TOPICS'		=> 'Number of topics',	'NUMBER_USERS'		=> 'Number of users',	'NUMBER_ORPHAN'		=> 'Orphan attachments',	'PHP_VERSION_OLD'	=> 'The version of PHP on this server will no longer be supported by future versions of phpBB. %sDetails%s',	'POSTS_PER_DAY'		=> 'Posts per day',	'PURGE_CACHE'			=> 'Purge the cache',	'PURGE_CACHE_CONFIRM'	=> 'Are you sure you wish to purge the cache?',	'PURGE_CACHE_EXPLAIN'	=> 'Purge all cache related items, this includes any cached template files or queries.',	'PURGE_SESSIONS'			=> 'Purge all sessions',	'PURGE_SESSIONS_CONFIRM'	=> 'Are you sure you wish to purge all sessions? This will log out all users.',	'PURGE_SESSIONS_EXPLAIN'	=> 'Purge all sessions. This will log out all users by truncating the session table.',	'RESET_DATE'					=> 'Reset boards start date',	'RESET_DATE_CONFIRM'			=> 'Are you sure you wish to reset the boards start date?',	'RESET_ONLINE'					=> 'Reset most users ever online',	'RESET_ONLINE_CONFIRM'			=> 'Are you sure you wish to reset the most users ever online counter?',	'RESYNC_POSTCOUNTS'				=> 'Resynchronise post counts',	'RESYNC_POSTCOUNTS_EXPLAIN'		=> 'Only existing posts will be taken into consideration. Pruned posts will not be counted.',	'RESYNC_POSTCOUNTS_CONFIRM'		=> 'Are you sure you wish to resynchronise post counts?',	'RESYNC_POST_MARKING'			=> 'Resynchronise dotted topics',	'RESYNC_POST_MARKING_CONFIRM'	=> 'Are you sure you wish to resynchronise dotted topics?',	'RESYNC_POST_MARKING_EXPLAIN'	=> 'First unmarks all topics and then correctly marks topics that have seen any activity during the past six months.',	'RESYNC_STATS'					=> 'Resynchronise statistics',	'RESYNC_STATS_CONFIRM'			=> 'Are you sure you wish to resynchronise statistics?',	'RESYNC_STATS_EXPLAIN'			=> 'Recalculates the total number of posts, topics, users and files.',	'RUN'							=> 'Run now',	'STATISTIC'					=> 'Statistic',	'STATISTIC_RESYNC_OPTIONS'	=> 'Resynchronise or reset statistics',	'TOPICS_PER_DAY'	=> 'Topics per day',	'UPLOAD_DIR_SIZE'	=> 'Size of posted attachments',	'USERS_PER_DAY'		=> 'Users per day',	'VALUE'						=> 'Value',	'VERSIONCHECK_FAIL'			=> 'Failed to obtain latest version information.',	'VERSIONCHECK_FORCE_UPDATE'	=> 'Re-Check version',	'VIEW_ADMIN_LOG'			=> 'View administrator log',	'VIEW_INACTIVE_USERS'		=> 'View inactive users',	'WELCOME_PHPBB'			=> 'Welcome to phpBB',	'WRITABLE_CONFIG'		=> 'Your config file (config.php) is currently world-writable. We strongly encourage you to change the permissions to 640 or at least to 644 (for example: <a href="http://en.wikipedia.org/wiki/Chmod" rel="external">chmod</a> 640 config.php).',));// Inactive Users$lang = array_merge($lang, array(	'INACTIVE_DATE'					=> 'Inactive date',	'INACTIVE_REASON'				=> 'Reason',	'INACTIVE_REASON_MANUAL'		=> 'Account deactivated by administrator',	'INACTIVE_REASON_PROFILE'		=> 'Profile details changed',	'INACTIVE_REASON_REGISTER'		=> 'Newly registered account',	'INACTIVE_REASON_REMIND'		=> 'Forced user account reactivation',	'INACTIVE_REASON_UNKNOWN'		=> 'Unknown',	'INACTIVE_USERS'				=> 'Inactive users',	'INACTIVE_USERS_EXPLAIN'		=> 'This is a list of users who have registered but whose accounts are inactive. You can activate, delete or remind (by sending an e-mail) these users if you wish.',	'INACTIVE_USERS_EXPLAIN_INDEX'	=> 'This is a list of the last 10 registered users who have inactive accounts. A full list is available from the appropriate menu item or by following the link below from where you can activate, delete or remind (by sending an e-mail) these users if you wish.',	'NO_INACTIVE_USERS'	=> 'No inactive users',	'SORT_INACTIVE'		=> 'Inactive date',	'SORT_LAST_VISIT'	=> 'Last visit',	'SORT_REASON'		=> 'Reason',	'SORT_REG_DATE'		=> 'Registration date',	'SORT_LAST_REMINDER'=> 'Last reminded',	'SORT_REMINDER'		=> 'Reminder sent',	'USER_IS_INACTIVE'		=> 'User is inactive',));// Send statistics page$lang = array_merge($lang, array(	'EXPLAIN_SEND_STATISTICS'	=> 'Please send information about your server and board configurations to phpBB for statistical analysis. All information that could identify you or your website has been removed - the data is entirely <strong>anonymous</strong>. We base decisions about future phpBB versions on this information. The statistics are made available publically. We also share this data with the PHP project, the programming language phpBB is made with.',	'EXPLAIN_SHOW_STATISTICS'	=> 'Using the button below you can preview all variables that will be transmitted.',	'DONT_SEND_STATISTICS'		=> 'Return to the ACP if you do not wish to send statistical information to phpBB.',	'GO_ACP_MAIN'				=> 'Go to the ACP start page',	'HIDE_STATISTICS'			=> 'Hide details',	'SEND_STATISTICS'			=> 'Send statistical information',	'SHOW_STATISTICS'			=> 'Show details',	'THANKS_SEND_STATISTICS'	=> 'Thank you for submitting your information.',));// Log Entries$lang = array_merge($lang, array(	'LOG_ACL_ADD_USER_GLOBAL_U_'		=> '<strong>Added or edited users user permissions</strong><br /> %s',	'LOG_ACL_ADD_GROUP_GLOBAL_U_'		=> '<strong>Added or edited groups user permissions</strong><br /> %s',	'LOG_ACL_ADD_USER_GLOBAL_M_'		=> '<strong>Added or edited users global moderator permissions</strong><br /> %s',	'LOG_ACL_ADD_GROUP_GLOBAL_M_'		=> '<strong>Added or edited groups global moderator permissions</strong><br /> %s',	'LOG_ACL_ADD_USER_GLOBAL_A_'		=> '<strong>Added or edited users administrator permissions</strong><br /> %s',	'LOG_ACL_ADD_GROUP_GLOBAL_A_'		=> '<strong>Added or edited groups administrator permissions</strong><br /> %s',	'LOG_ACL_ADD_ADMIN_GLOBAL_A_'		=> '<strong>Added or edited Administrators</strong><br /> %s',	'LOG_ACL_ADD_MOD_GLOBAL_M_'			=> '<strong>Added or edited Global Moderators</strong><br /> %s',	'LOG_ACL_ADD_USER_LOCAL_F_'			=> '<strong>Added or edited users forum access</strong> from %1$s<br /> %2$s',	'LOG_ACL_ADD_USER_LOCAL_M_'			=> '<strong>Added or edited users forum moderator access</strong> from %1$s<br /> %2$s',	'LOG_ACL_ADD_GROUP_LOCAL_F_'		=> '<strong>Added or edited groups forum access</strong> from %1$s<br /> %2$s',	'LOG_ACL_ADD_GROUP_LOCAL_M_'		=> '<strong>Added or edited groups forum moderator access</strong> from %1$s<br /> %2$s',	'LOG_ACL_ADD_MOD_LOCAL_M_'			=> '<strong>Added or edited Moderators</strong> from %1$s<br /> %2$s',	'LOG_ACL_ADD_FORUM_LOCAL_F_'		=> '<strong>Added or edited forum permissions</strong> from %1$s<br /> %2$s',	'LOG_ACL_DEL_ADMIN_GLOBAL_A_'		=> '<strong>Removed Administrators</strong><br /> %s',	'LOG_ACL_DEL_MOD_GLOBAL_M_'			=> '<strong>Removed Global Moderators</strong><br /> %s',	'LOG_ACL_DEL_MOD_LOCAL_M_'			=> '<strong>Removed Moderators</strong> from %1$s<br /> %2$s',	'LOG_ACL_DEL_FORUM_LOCAL_F_'		=> '<strong>Removed User/Group forum permissions</strong> from %1$s<br /> %2$s',	'LOG_ACL_TRANSFER_PERMISSIONS'		=> '<strong>Permissions transferred from</strong><br /> %s',	'LOG_ACL_RESTORE_PERMISSIONS'		=> '<strong>Own permissions restored after using permissions from</strong><br /> %s',	'LOG_ADMIN_AUTH_FAIL'		=> '<strong>Failed administration login attempt</strong>',	'LOG_ADMIN_AUTH_SUCCESS'	=> '<strong>Successful administration login</strong>',	'LOG_ATTACHMENTS_DELETED'	=> '<strong>Removed user attachments</strong><br /> %s',	'LOG_ATTACH_EXT_ADD'		=> '<strong>Added or edited attachment extension</strong><br /> %s',	'LOG_ATTACH_EXT_DEL'		=> '<strong>Removed attachment extension</strong><br /> %s',	'LOG_ATTACH_EXT_UPDATE'		=> '<strong>Updated attachment extension</strong><br /> %s',	'LOG_ATTACH_EXTGROUP_ADD'	=> '<strong>Added extension group</strong><br /> %s',	'LOG_ATTACH_EXTGROUP_EDIT'	=> '<strong>Edited extension group</strong><br /> %s',	'LOG_ATTACH_EXTGROUP_DEL'	=> '<strong>Removed extension group</strong><br /> %s',	'LOG_ATTACH_FILEUPLOAD'		=> '<strong>Orphan File uploaded to Post</strong><br /> ID %1$d - %2$s',	'LOG_ATTACH_ORPHAN_DEL'		=> '<strong>Orphan Files deleted</strong><br /> %s',	'LOG_BAN_EXCLUDE_USER'	=> '<strong>Excluded user from ban</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_BAN_EXCLUDE_IP'	=> '<strong>Excluded IP from ban</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_BAN_EXCLUDE_EMAIL' => '<strong>Excluded e-mail from ban</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_BAN_USER'			=> '<strong>Banned user</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_BAN_IP'			=> '<strong>Banned IP</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_BAN_EMAIL'			=> '<strong>Banned e-mail</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_UNBAN_USER'		=> '<strong>Unbanned user</strong><br /> %s',	'LOG_UNBAN_IP'			=> '<strong>Unbanned IP</strong><br /> %s',	'LOG_UNBAN_EMAIL'		=> '<strong>Unbanned e-mail</strong><br /> %s',	'LOG_BBCODE_ADD'		=> '<strong>Added new BBCode</strong><br /> %s',	'LOG_BBCODE_EDIT'		=> '<strong>Edited BBCode</strong><br /> %s',	'LOG_BBCODE_DELETE'		=> '<strong>Deleted BBCode</strong><br /> %s',	'LOG_BOT_ADDED'		=> '<strong>New bot added</strong><br /> %s',	'LOG_BOT_DELETE'	=> '<strong>Deleted bot</strong><br /> %s',	'LOG_BOT_UPDATED'	=> '<strong>Existing bot updated</strong><br /> %s',	'LOG_CLEAR_ADMIN'		=> '<strong>Cleared admin log</strong>',	'LOG_CLEAR_CRITICAL'	=> '<strong>Cleared error log</strong>',	'LOG_CLEAR_MOD'			=> '<strong>Cleared moderator log</strong>',	'LOG_CLEAR_USER'		=> '<strong>Cleared user log</strong><br /> %s',	'LOG_CLEAR_USERS'		=> '<strong>Cleared user logs</strong>',	'LOG_CONFIG_ATTACH'			=> '<strong>Altered attachment settings</strong>',	'LOG_CONFIG_AUTH'			=> '<strong>Altered authentication settings</strong>',	'LOG_CONFIG_AVATAR'			=> '<strong>Altered avatar settings</strong>',	'LOG_CONFIG_COOKIE'			=> '<strong>Altered cookie settings</strong>',	'LOG_CONFIG_EMAIL'			=> '<strong>Altered e-mail settings</strong>',	'LOG_CONFIG_FEATURES'		=> '<strong>Altered board features</strong>',	'LOG_CONFIG_LOAD'			=> '<strong>Altered load settings</strong>',	'LOG_CONFIG_MESSAGE'		=> '<strong>Altered private message settings</strong>',	'LOG_CONFIG_POST'			=> '<strong>Altered post settings</strong>',	'LOG_CONFIG_REGISTRATION'	=> '<strong>Altered user registration settings</strong>',	'LOG_CONFIG_FEED'			=> '<strong>Altered syndication feeds settings</strong>',	'LOG_CONFIG_SEARCH'			=> '<strong>Altered search settings</strong>',	'LOG_CONFIG_SECURITY'		=> '<strong>Altered security settings</strong>',	'LOG_CONFIG_SERVER'			=> '<strong>Altered server settings</strong>',	'LOG_CONFIG_SETTINGS'		=> '<strong>Altered board settings</strong>',	'LOG_CONFIG_SIGNATURE'		=> '<strong>Altered signature settings</strong>',	'LOG_CONFIG_VISUAL'			=> '<strong>Altered anti-spambot settings</strong>',	'LOG_APPROVE_TOPIC'			=> '<strong>Approved topic</strong><br /> %s',	'LOG_BUMP_TOPIC'			=> '<strong>User bumped topic</strong><br /> %s',	'LOG_DELETE_POST'			=> '<strong>Deleted post %1$s written by</strong><br /> %2$s',	'LOG_DELETE_SHADOW_TOPIC'	=> '<strong>Deleted shadow topic</strong><br /> %s',	'LOG_DELETE_TOPIC'			=> '<strong>Deleted topic %1$s written by</strong><br /> %2$s',	'LOG_FORK'					=> '<strong>Copied topic</strong><br /> from %s',	'LOG_LOCK'					=> '<strong>Locked topic</strong><br /> %s',	'LOG_LOCK_POST'				=> '<strong>Locked post</strong><br /> %s',	'LOG_MERGE'					=> '<strong>Merged posts</strong> into topic<br /> %s',	'LOG_MOVE'					=> '<strong>Moved topic</strong><br /> from %1$s to %2$s',	'LOG_PM_REPORT_CLOSED'		=> '<strong>Closed PM report</strong><br /> %s',	'LOG_PM_REPORT_DELETED'		=> '<strong>Deleted PM report</strong><br /> %s',	'LOG_POST_APPROVED'			=> '<strong>Approved post</strong><br /> %s',	'LOG_POST_DISAPPROVED'		=> '<strong>Disapproved post %1$s with the following reason</strong><br /> %2$s',	'LOG_POST_EDITED'			=> '<strong>Edited post %1$s written by</strong><br /> %2$s',	'LOG_REPORT_CLOSED'			=> '<strong>Closed report</strong><br /> %s',	'LOG_REPORT_DELETED'		=> '<strong>Deleted report</strong><br /> %s',	'LOG_SPLIT_DESTINATION'		=> '<strong>Moved split posts</strong><br /> to %s',	'LOG_SPLIT_SOURCE'			=> '<strong>Split posts</strong><br /> from %s',	'LOG_TOPIC_APPROVED'		=> '<strong>Approved topic</strong><br /> %s',	'LOG_TOPIC_DISAPPROVED'		=> '<strong>Disapproved topic %1$s with the following reason</strong><br />%2$s',	'LOG_TOPIC_RESYNC'			=> '<strong>Resynchronised topic counters</strong><br /> %s',	'LOG_TOPIC_TYPE_CHANGED'	=> '<strong>Changed topic type</strong><br /> %s',	'LOG_UNLOCK'				=> '<strong>Unlocked topic</strong><br /> %s',	'LOG_UNLOCK_POST'			=> '<strong>Unlocked post</strong><br /> %s',	'LOG_DISALLOW_ADD'		=> '<strong>Added disallowed username</strong><br /> %s',	'LOG_DISALLOW_DELETE'	=> '<strong>Deleted disallowed username</strong>',	'LOG_DB_BACKUP'			=> '<strong>Database backup</strong>',	'LOG_DB_DELETE'			=> '<strong>Deleted database backup</strong>',	'LOG_DB_RESTORE'		=> '<strong>Restored database backup</strong>',	'LOG_DOWNLOAD_EXCLUDE_IP'	=> '<strong>Excluded IP/hostname from download list</strong><br /> %s',	'LOG_DOWNLOAD_IP'			=> '<strong>Added IP/hostname to download list</strong><br /> %s',	'LOG_DOWNLOAD_REMOVE_IP'	=> '<strong>Removed IP/hostname from download list</strong><br /> %s',	'LOG_ERROR_JABBER'		=> '<strong>Jabber error</strong><br /> %s',	'LOG_ERROR_EMAIL'		=> '<strong>E-mail error</strong><br /> %s',	'LOG_FORUM_ADD'							=> '<strong>Created new forum</strong><br /> %s',	'LOG_FORUM_COPIED_PERMISSIONS'			=> '<strong>Copied forum permissions</strong> from %1$s<br /> %2$s',	'LOG_FORUM_DEL_FORUM'					=> '<strong>Deleted forum</strong><br /> %s',	'LOG_FORUM_DEL_FORUMS'					=> '<strong>Deleted forum and its subforums</strong><br /> %s',	'LOG_FORUM_DEL_MOVE_FORUMS'				=> '<strong>Deleted forum and moved subforums</strong> to %1$s<br /> %2$s',	'LOG_FORUM_DEL_MOVE_POSTS'				=> '<strong>Deleted forum and moved posts </strong> to %1$s<br /> %2$s',	'LOG_FORUM_DEL_MOVE_POSTS_FORUMS'		=> '<strong>Deleted forum and its subforums, moved posts</strong> to %1$s<br /> %2$s',	'LOG_FORUM_DEL_MOVE_POSTS_MOVE_FORUMS'	=> '<strong>Deleted forum, moved posts</strong> to %1$s <strong>and subforums</strong> to %2$s<br /> %3$s',	'LOG_FORUM_DEL_POSTS'					=> '<strong>Deleted forum and its posts</strong><br /> %s',	'LOG_FORUM_DEL_POSTS_FORUMS'			=> '<strong>Deleted forum, its posts and subforums</strong><br /> %s',	'LOG_FORUM_DEL_POSTS_MOVE_FORUMS'		=> '<strong>Deleted forum and its posts, moved subforums</strong> to %1$s<br /> %2$s',	'LOG_FORUM_EDIT'						=> '<strong>Edited forum details</strong><br /> %s',	'LOG_FORUM_MOVE_DOWN'					=> '<strong>Moved forum</strong> %1$s <strong>below</strong> %2$s',	'LOG_FORUM_MOVE_UP'						=> '<strong>Moved forum</strong> %1$s <strong>above</strong> %2$s',	'LOG_FORUM_SYNC'						=> '<strong>Re-synchronised forum</strong><br /> %s',	'LOG_GENERAL_ERROR'	=> '<strong>A general error occured</strong>: %1$s <br /> %2$s',	'LOG_GROUP_CREATED'		=> '<strong>New usergroup created</strong><br /> %s',	'LOG_GROUP_DEFAULTS'	=> '<strong>Group %1$s made default for members</strong><br /> %2$s',	'LOG_GROUP_DELETE'		=> '<strong>Usergroup deleted</strong><br /> %s',	'LOG_GROUP_DEMOTED'		=> '<strong>Leaders demoted in usergroup</strong> %1$s<br /> %2$s',	'LOG_GROUP_PROMOTED'	=> '<strong>Members promoted to leader in usergroup</strong> %1$s<br /> %2$s',	'LOG_GROUP_REMOVE'		=> '<strong>Members removed from usergroup</strong> %1$s<br /> %2$s',	'LOG_GROUP_UPDATED'		=> '<strong>Usergroup details updated</strong><br /> %s',	'LOG_MODS_ADDED'		=> '<strong>Added new leaders to usergroup</strong> %1$s<br /> %2$s',	'LOG_USERS_ADDED'		=> '<strong>Added new members to usergroup</strong> %1$s<br /> %2$s',	'LOG_USERS_APPROVED'	=> '<strong>Users approved in usergroup</strong> %1$s<br /> %2$s',	'LOG_USERS_PENDING'		=> '<strong>Users requested to join group %1$s and need to be approved</strong><br /> %2$s',	'LOG_IMAGE_GENERATION_ERROR'	=> '<strong>Error while creating image</strong><br /> Error in %1$s on line %2$s: %3$s',	'LOG_IMAGESET_ADD_DB'			=> '<strong>Added new imageset to database</strong><br /> %s',	'LOG_IMAGESET_ADD_FS'			=> '<strong>Add new imageset on filesystem</strong><br /> %s',	'LOG_IMAGESET_DELETE'			=> '<strong>Deleted imageset</strong><br /> %s',	'LOG_IMAGESET_EDIT_DETAILS'		=> '<strong>Edited imageset details</strong><br /> %s',	'LOG_IMAGESET_EDIT'				=> '<strong>Edited imageset</strong><br /> %s',	'LOG_IMAGESET_EXPORT'			=> '<strong>Exported imageset</strong><br /> %s',	'LOG_IMAGESET_LANG_MISSING'		=> '<strong>Imageset misses %2$s localisation</strong><br /> %1$s',	'LOG_IMAGESET_LANG_REFRESHED'	=> '<strong>Refreshed %2$s localisation of imageset</strong><br /> %1$s',	'LOG_IMAGESET_REFRESHED'		=> '<strong>Refreshed imageset</strong><br /> %s',	'LOG_INACTIVE_ACTIVATE'	=> '<strong>Activated inactive users</strong><br /> %s',	'LOG_INACTIVE_DELETE'	=> '<strong>Deleted inactive users</strong><br /> %s',	'LOG_INACTIVE_REMIND'	=> '<strong>Sent reminder e-mails to inactive users</strong><br /> %s',	'LOG_INSTALL_CONVERTED'	=> '<strong>Converted from %1$s to phpBB %2$s</strong>',	'LOG_INSTALL_INSTALLED'	=> '<strong>Installed phpBB %s</strong>',	'LOG_IP_BROWSER_FORWARDED_CHECK'	=> '<strong>Session IP/browser/X_FORWARDED_FOR check failed</strong><br />User IP <em>%1$s</em> checked against session IP <em>%2$s</em>, user browser string <em>%3$s</em> checked against session browser string <em>%4$s</em> and user X_FORWARDED_FOR string <em>%5$s</em> checked against session X_FORWARDED_FOR string <em>%6$s</em>.',	'LOG_JAB_CHANGED'			=> '<strong>Jabber account changed</strong>',	'LOG_JAB_PASSCHG'			=> '<strong>Jabber password changed</strong>',	'LOG_JAB_REGISTER'			=> '<strong>Jabber account registered</strong>',	'LOG_JAB_SETTINGS_CHANGED'	=> '<strong>Jabber settings changed</strong>',	'LOG_LANGUAGE_PACK_DELETED'		=> '<strong>Deleted language pack</strong><br /> %s',	'LOG_LANGUAGE_PACK_INSTALLED'	=> '<strong>Installed language pack</strong><br /> %s',	'LOG_LANGUAGE_PACK_UPDATED'		=> '<strong>Updated language pack details</strong><br /> %s',	'LOG_LANGUAGE_FILE_REPLACED'	=> '<strong>Replaced language file</strong><br /> %s',	'LOG_LANGUAGE_FILE_SUBMITTED'	=> '<strong>Submitted language file and placed in store folder</strong><br /> %s',	'LOG_MASS_EMAIL'		=> '<strong>Sent mass e-mail</strong><br /> %s',	'LOG_MCP_CHANGE_POSTER'	=> '<strong>Changed poster in topic %1$s</strong><br /> from %2$s to %3$s',	'LOG_MODULE_DISABLE'	=> '<strong>Module disabled</strong><br /> %s',	'LOG_MODULE_ENABLE'		=> '<strong>Module enabled</strong><br /> %s',	'LOG_MODULE_MOVE_DOWN'	=> '<strong>Module moved down</strong><br /> %1$s below %2$s',	'LOG_MODULE_MOVE_UP'	=> '<strong>Module moved up</strong><br /> %1$s above %2$s',	'LOG_MODULE_REMOVED'	=> '<strong>Module removed</strong><br /> %s',	'LOG_MODULE_ADD'		=> '<strong>Module added</strong><br /> %s',	'LOG_MODULE_EDIT'		=> '<strong>Module edited</strong><br /> %s',	'LOG_A_ROLE_ADD'		=> '<strong>Admin role added</strong><br /> %s',	'LOG_A_ROLE_EDIT'		=> '<strong>Admin role edited</strong><br /> %s',	'LOG_A_ROLE_REMOVED'	=> '<strong>Admin role removed</strong><br /> %s',	'LOG_F_ROLE_ADD'		=> '<strong>Forum role added</strong><br /> %s',	'LOG_F_ROLE_EDIT'		=> '<strong>Forum role edited</strong><br /> %s',	'LOG_F_ROLE_REMOVED'	=> '<strong>Forum role removed</strong><br /> %s',	'LOG_M_ROLE_ADD'		=> '<strong>Moderator role added</strong><br /> %s',	'LOG_M_ROLE_EDIT'		=> '<strong>Moderator role edited</strong><br /> %s',	'LOG_M_ROLE_REMOVED'	=> '<strong>Moderator role removed</strong><br /> %s',	'LOG_U_ROLE_ADD'		=> '<strong>User role added</strong><br /> %s',	'LOG_U_ROLE_EDIT'		=> '<strong>User role edited</strong><br /> %s',	'LOG_U_ROLE_REMOVED'	=> '<strong>User role removed</strong><br /> %s',	'LOG_PROFILE_FIELD_ACTIVATE'	=> '<strong>Profile field activated</strong><br /> %s',	'LOG_PROFILE_FIELD_CREATE'		=> '<strong>Profile field added</strong><br /> %s',	'LOG_PROFILE_FIELD_DEACTIVATE'	=> '<strong>Profile field deactivated</strong><br /> %s',	'LOG_PROFILE_FIELD_EDIT'		=> '<strong>Profile field changed</strong><br /> %s',	'LOG_PROFILE_FIELD_REMOVED'		=> '<strong>Profile field removed</strong><br /> %s',	'LOG_PRUNE'					=> '<strong>Pruned forums</strong><br /> %s',	'LOG_AUTO_PRUNE'			=> '<strong>Auto-pruned forums</strong><br /> %s',	'LOG_PRUNE_USER_DEAC'		=> '<strong>Users deactivated</strong><br /> %s',	'LOG_PRUNE_USER_DEL_DEL'	=> '<strong>Users pruned and posts deleted</strong><br /> %s',	'LOG_PRUNE_USER_DEL_ANON'	=> '<strong>Users pruned and posts retained</strong><br /> %s',	'LOG_PURGE_CACHE'			=> '<strong>Purged cache</strong>',	'LOG_PURGE_SESSIONS'		=> '<strong>Purged sessions</strong>',	'LOG_RANK_ADDED'		=> '<strong>Added new rank</strong><br /> %s',	'LOG_RANK_REMOVED'		=> '<strong>Removed rank</strong><br /> %s',	'LOG_RANK_UPDATED'		=> '<strong>Updated rank</strong><br /> %s',	'LOG_REASON_ADDED'		=> '<strong>Added report/denial reason</strong><br /> %s',	'LOG_REASON_REMOVED'	=> '<strong>Removed report/denial reason</strong><br /> %s',	'LOG_REASON_UPDATED'	=> '<strong>Updated report/denial reason</strong><br /> %s',	'LOG_REFERER_INVALID'		=> '<strong>Referer validation failed</strong><br />Referer was <em>%1$s</em>. The request was rejected and the session killed.',	'LOG_RESET_DATE'			=> '<strong>Board start date reset</strong>',	'LOG_RESET_ONLINE'			=> '<strong>Most users online reset</strong>',	'LOG_RESYNC_POSTCOUNTS'		=> '<strong>User post counts resynchronised</strong>',	'LOG_RESYNC_POST_MARKING'	=> '<strong>Dotted topics resynchronised</strong>',	'LOG_RESYNC_STATS'			=> '<strong>Post, topic and user statistics resynchronised</strong>',	'LOG_SEARCH_INDEX_CREATED'	=> '<strong>Created search index for</strong><br /> %s',	'LOG_SEARCH_INDEX_REMOVED'	=> '<strong>Removed search index for</strong><br /> %s',	'LOG_STYLE_ADD'				=> '<strong>Added new style</strong><br /> %s',	'LOG_STYLE_DELETE'			=> '<strong>Deleted style</strong><br /> %s',	'LOG_STYLE_EDIT_DETAILS'	=> '<strong>Edited style</strong><br /> %s',	'LOG_STYLE_EXPORT'			=> '<strong>Exported style</strong><br /> %s',	'LOG_TEMPLATE_ADD_DB'			=> '<strong>Added new template set to database</strong><br /> %s',	'LOG_TEMPLATE_ADD_FS'			=> '<strong>Add new template set on filesystem</strong><br /> %s',	'LOG_TEMPLATE_CACHE_CLEARED'	=> '<strong>Deleted cached versions of template files in template set <em>%1$s</em></strong><br /> %2$s',	'LOG_TEMPLATE_DELETE'			=> '<strong>Deleted template set</strong><br /> %s',	'LOG_TEMPLATE_EDIT'				=> '<strong>Edited template set <em>%1$s</em></strong><br /> %2$s',	'LOG_TEMPLATE_EDIT_DETAILS'		=> '<strong>Edited template details</strong><br /> %s',	'LOG_TEMPLATE_EXPORT'			=> '<strong>Exported template set</strong><br /> %s',	'LOG_TEMPLATE_REFRESHED'		=> '<strong>Refreshed template set</strong><br /> %s',	'LOG_THEME_ADD_DB'			=> '<strong>Added new theme to database</strong><br /> %s',	'LOG_THEME_ADD_FS'			=> '<strong>Add new theme on filesystem</strong><br /> %s',	'LOG_THEME_DELETE'			=> '<strong>Theme deleted</strong><br /> %s',	'LOG_THEME_EDIT_DETAILS'	=> '<strong>Edited theme details</strong><br /> %s',	'LOG_THEME_EDIT'			=> '<strong>Edited theme <em>%1$s</em></strong>',	'LOG_THEME_EDIT_FILE'		=> '<strong>Edited theme <em>%1$s</em></strong><br /> Modified file <em>%2$s</em>',	'LOG_THEME_EXPORT'			=> '<strong>Exported theme</strong><br /> %s',	'LOG_THEME_REFRESHED'		=> '<strong>Refreshed theme</strong><br /> %s',	'LOG_UPDATE_DATABASE'	=> '<strong>Updated Database from version %1$s to version %2$s</strong>',	'LOG_UPDATE_PHPBB'		=> '<strong>Updated phpBB from version %1$s to version %2$s</strong>',	'LOG_USER_ACTIVE'		=> '<strong>User activated</strong><br /> %s',	'LOG_USER_BAN_USER'		=> '<strong>Banned User via user management</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_USER_BAN_IP'		=> '<strong>Banned IP via user management</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_USER_BAN_EMAIL'	=> '<strong>Banned e-mail via user management</strong> for reason <em>%1$s</em><br /> %2$s',	'LOG_USER_DELETED'		=> '<strong>Deleted user</strong><br /> %s',	'LOG_USER_DEL_ATTACH'	=> '<strong>Removed all attachments made by the user</strong><br /> %s',	'LOG_USER_DEL_AVATAR'	=> '<strong>Removed user avatar</strong><br /> %s',	'LOG_USER_DEL_OUTBOX'	=> '<strong>Emptied user outbox</strong><br /> %s',	'LOG_USER_DEL_POSTS'	=> '<strong>Removed all posts made by the user</strong><br /> %s',	'LOG_USER_DEL_SIG'		=> '<strong>Removed user signature</strong><br /> %s',	'LOG_USER_INACTIVE'		=> '<strong>User deactivated</strong><br /> %s',	'LOG_USER_MOVE_POSTS'	=> '<strong>Moved user posts</strong><br /> posts by %1$s to forum %2$s',	'LOG_USER_NEW_PASSWORD'	=> '<strong>Changed user password</strong><br /> %s',	'LOG_USER_REACTIVATE'	=> '<strong>Forced user account reactivation</strong><br /> %s',	'LOG_USER_REMOVED_NR'	=> '<strong>Removed newly registered flag from user</strong><br /> %s',	'LOG_USER_UPDATE_EMAIL'	=> '<strong>User %1$s changed e-mail</strong><br /> from %2$s to %3$s',	'LOG_USER_UPDATE_NAME'	=> '<strong>Changed username</strong><br /> from %1$s to %2$s',	'LOG_USER_USER_UPDATE'	=> '<strong>Updated user details</strong><br /> %s',	'LOG_USER_ACTIVE_USER'		=> '<strong>User account activated</strong>',	'LOG_USER_DEL_AVATAR_USER'	=> '<strong>User avatar removed</strong>',	'LOG_USER_DEL_SIG_USER'		=> '<strong>User signature removed</strong>',	'LOG_USER_FEEDBACK'			=> '<strong>Added user feedback</strong><br /> %s',	'LOG_USER_GENERAL'			=> '<strong>Entry added:</strong><br /> %s',	'LOG_USER_INACTIVE_USER'	=> '<strong>User account de-activated</strong>',	'LOG_USER_LOCK'				=> '<strong>User locked own topic</strong><br /> %s',	'LOG_USER_MOVE_POSTS_USER'	=> '<strong>Moved all posts to forum</strong> %s',	'LOG_USER_REACTIVATE_USER'	=> '<strong>Forced user account reactivation</strong>',	'LOG_USER_UNLOCK'			=> '<strong>User unlocked own topic</strong><br /> %s',	'LOG_USER_WARNING'			=> '<strong>Added user warning</strong><br /> %s',	'LOG_USER_WARNING_BODY'		=> '<strong>The following warning was issued to this user</strong><br /> %s',	'LOG_USER_GROUP_CHANGE'			=> '<strong>User changed default group</strong><br /> %s',	'LOG_USER_GROUP_DEMOTE'			=> '<strong>User demoted as leaders from usergroup</strong><br /> %s',	'LOG_USER_GROUP_JOIN'			=> '<strong>User joined group</strong><br /> %s',	'LOG_USER_GROUP_JOIN_PENDING'	=> '<strong>User joined group and needs to be approved</strong><br /> %s',	'LOG_USER_GROUP_RESIGN'			=> '<strong>User resigned membership from group</strong><br /> %s',	'LOG_WARNING_DELETED'		=> '<strong>Deleted user warning</strong><br /> %s',	'LOG_WARNINGS_DELETED'		=> '<strong>Deleted %2$s user warnings</strong><br /> %1$s', // Example: '<strong>Deleted 2 user warnings</strong><br /> username'	'LOG_WARNINGS_DELETED_ALL'	=> '<strong>Deleted all user warnings</strong><br /> %s',	'LOG_WORD_ADD'			=> '<strong>Added word censor</strong><br /> %s',	'LOG_WORD_DELETE'		=> '<strong>Deleted word censor</strong><br /> %s',	'LOG_WORD_EDIT'			=> '<strong>Edited word censor</strong><br /> %s',));?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_styles{	var $u_action;	var $style_cfg;	var $template_cfg;	var $theme_cfg;	var $imageset_cfg;	var $imageset_keys;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		// Hardcoded template bitfield to add for new templates		$bitfield = new bitfield();		$bitfield->set(0);		$bitfield->set(1);		$bitfield->set(2);		$bitfield->set(3);		$bitfield->set(4);		$bitfield->set(8);		$bitfield->set(9);		$bitfield->set(11);		$bitfield->set(12);		define('TEMPLATE_BITFIELD', $bitfield->get_base64());		unset($bitfield);		$user->add_lang('acp/styles');		$this->tpl_name = 'acp_styles';		$this->page_title = 'ACP_CAT_STYLES';		$action = request_var('action', '');		$action = (isset($_POST['add'])) ? 'add' : $action;		$style_id = request_var('id', 0);		// Fill the configuration variables		$this->style_cfg = $this->template_cfg = $this->theme_cfg = $this->imageset_cfg = '## phpBB {MODE} configuration file## @package phpBB3# @copyright (c) 2005 phpBB Group# @license http://opensource.org/licenses/gpl-license.php GNU Public License### At the left is the name, please do not change this# At the right the value is entered# For on/off options the valid values are on, off, 1, 0, true and false## Values get trimmed, if you want to add a space in front or at the end of# the value, then enclose the value with single or double quotes.# Single and double quotes do not need to be escaped.### General Information about this {MODE}name = {NAME}copyright = {COPYRIGHT}version = {VERSION}';		$this->theme_cfg .= '# Some configuration options## You have to turn this option on if you want to use the# path template variables ({T_IMAGESET_PATH} for example) within# your css file.# This is mostly the case if you want to use language specific# images within your css file.#parse_css_file = {PARSE_CSS_FILE}';		$this->template_cfg .= '# Some configuration options## You can use this function to inherit templates from another template.# The template of the given name has to be installed.# Templates cannot inherit from inheriting templates.#';		$this->imageset_keys = array(			'logos' => array(				'site_logo',			),			'buttons'	=> array(				'icon_back_top', 'icon_contact_aim', 'icon_contact_email', 'icon_contact_icq', 'icon_contact_jabber', 'icon_contact_msnm', 'icon_contact_pm', 'icon_contact_yahoo', 'icon_contact_www', 'icon_post_delete', 'icon_post_edit', 'icon_post_info', 'icon_post_quote', 'icon_post_report', 'icon_user_online', 'icon_user_offline', 'icon_user_profile', 'icon_user_search', 'icon_user_warn', 'button_pm_forward', 'button_pm_new', 'button_pm_reply', 'button_topic_locked', 'button_topic_new', 'button_topic_reply',			),			'icons'		=> array(				'icon_post_target', 'icon_post_target_unread', 'icon_topic_attach', 'icon_topic_latest', 'icon_topic_newest', 'icon_topic_reported', 'icon_topic_unapproved', 'icon_friend', 'icon_foe',			),			'forums'	=> array(				'forum_link', 'forum_read', 'forum_read_locked', 'forum_read_subforum', 'forum_unread', 'forum_unread_locked', 'forum_unread_subforum', 'subforum_read', 'subforum_unread'			),			'folders'	=> array(				'topic_moved', 'topic_read', 'topic_read_mine', 'topic_read_hot', 'topic_read_hot_mine', 'topic_read_locked', 'topic_read_locked_mine', 'topic_unread', 'topic_unread_mine', 'topic_unread_hot', 'topic_unread_hot_mine', 'topic_unread_locked', 'topic_unread_locked_mine', 'sticky_read', 'sticky_read_mine', 'sticky_read_locked', 'sticky_read_locked_mine', 'sticky_unread', 'sticky_unread_mine', 'sticky_unread_locked', 'sticky_unread_locked_mine', 'announce_read', 'announce_read_mine', 'announce_read_locked', 'announce_read_locked_mine', 'announce_unread', 'announce_unread_mine', 'announce_unread_locked', 'announce_unread_locked_mine', 'global_read', 'global_read_mine', 'global_read_locked', 'global_read_locked_mine', 'global_unread', 'global_unread_mine', 'global_unread_locked', 'global_unread_locked_mine', 'pm_read', 'pm_unread',			),			'polls'		=> array(				'poll_left', 'poll_center', 'poll_right',			),			'ui'		=> array(				'upload_bar',			),			'user'		=> array(				'user_icon1', 'user_icon2', 'user_icon3', 'user_icon4', 'user_icon5', 'user_icon6', 'user_icon7', 'user_icon8', 'user_icon9', 'user_icon10',			),		);		// Execute overall actions		switch ($action)		{			case 'delete':				if ($style_id)				{					$this->remove($mode, $style_id);					return;				}			break;			case 'export':				if ($style_id)				{					$this->export($mode, $style_id);					return;				}			break;			case 'install':				$this->install($mode);				return;			break;			case 'add':				$this->add($mode);				return;			break;			case 'details':				if ($style_id)				{					$this->details($mode, $style_id);					return;				}			break;			case 'edit':				if ($style_id)				{					switch ($mode)					{						case 'imageset':							return $this->edit_imageset($style_id);						case 'template':							return $this->edit_template($style_id);						case 'theme':							return $this->edit_theme($style_id);					}				}			break;			case 'cache':				if ($style_id)				{					switch ($mode)					{						case 'template':							return $this->template_cache($style_id);					}				}			break;		}		switch ($mode)		{			case 'style':				switch ($action)				{					case 'activate':					case 'deactivate':						if ($style_id == $config['default_style'])						{							trigger_error($user->lang['DEACTIVATE_DEFAULT'] . adm_back_link($this->u_action), E_USER_WARNING);						}						if (($action == 'deactivate' && confirm_box(true)) || $action == 'activate')						{							$sql = 'UPDATE ' . STYLES_TABLE . '								SET style_active = ' . (($action == 'activate') ? 1 : 0) . '								WHERE style_id = ' . $style_id;							$db->sql_query($sql);							// Set style to default for any member using deactivated style							if ($action == 'deactivate')							{								$sql = 'UPDATE ' . USERS_TABLE . '									SET user_style = ' . $config['default_style'] . "									WHERE user_style = $style_id";								$db->sql_query($sql);								$sql = 'UPDATE ' . FORUMS_TABLE . '									SET forum_style = 0									WHERE forum_style = ' . $style_id;								$db->sql_query($sql);							}						}						else if ($action == 'deactivate')						{							$s_hidden_fields = array(								'i'			=> $id,								'mode'		=> $mode,								'action'	=> $action,								'style_id'	=> $style_id,							);							confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields($s_hidden_fields));						}					break;				}				$this->frontend('style', array('details'), array('export', 'delete'));			break;			case 'template':				switch ($action)				{					// Refresh template data stored in db and clear cache					case 'refresh':						$sql = 'SELECT *							FROM ' . STYLES_TEMPLATE_TABLE . "							WHERE template_id = $style_id";						$result = $db->sql_query($sql);						$template_row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$template_row)						{							trigger_error($user->lang['NO_TEMPLATE'] . adm_back_link($this->u_action), E_USER_WARNING);						}						if (confirm_box(true))						{							$template_refreshed = '';							// Only refresh database if the template is stored in the database							if ($template_row['template_storedb'] && file_exists("{$phpbb_root_path}styles/{$template_row['template_path']}/template/"))							{								$filelist = array('' => array());								$sql = 'SELECT template_filename, template_mtime									FROM ' . STYLES_TEMPLATE_DATA_TABLE . "									WHERE template_id = $style_id";								$result = $db->sql_query($sql);								while ($row = $db->sql_fetchrow($result))								{//									if (@filemtime("{$phpbb_root_path}styles/{$template_row['template_path']}/template/" . $row['template_filename']) > $row['template_mtime'])//									{										// get folder info from the filename										if (($slash_pos = strrpos($row['template_filename'], '/')) === false)										{											$filelist[''][] = $row['template_filename'];										}										else										{											$filelist[substr($row['template_filename'], 0, $slash_pos + 1)][] = substr($row['template_filename'], $slash_pos + 1, strlen($row['template_filename']) - $slash_pos - 1);										}//									}								}								$db->sql_freeresult($result);								$this->store_templates('update', $style_id, $template_row['template_path'], $filelist);								unset($filelist);								$template_refreshed = $user->lang['TEMPLATE_REFRESHED'] . '<br />';								add_log('admin', 'LOG_TEMPLATE_REFRESHED', $template_row['template_name']);							}							$this->clear_template_cache($template_row);							trigger_error($template_refreshed . $user->lang['TEMPLATE_CACHE_CLEARED'] . adm_back_link($this->u_action));						}						else						{							confirm_box(false, ($template_row['template_storedb']) ? $user->lang['CONFIRM_TEMPLATE_REFRESH'] : $user->lang['CONFIRM_TEMPLATE_CLEAR_CACHE'], build_hidden_fields(array(								'i'			=> $id,								'mode'		=> $mode,								'action'	=> $action,								'id'		=> $style_id							)));						}					break;				}				$this->frontend('template', array('edit', 'cache', 'details'), array('refresh', 'export', 'delete'));			break;			case 'theme':				switch ($action)				{					// Refresh theme data stored in the database					case 'refresh':						$sql = 'SELECT *							FROM ' . STYLES_THEME_TABLE . "							WHERE theme_id = $style_id";						$result = $db->sql_query($sql);						$theme_row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$theme_row)						{							trigger_error($user->lang['NO_THEME'] . adm_back_link($this->u_action), E_USER_WARNING);						}						if (!$theme_row['theme_storedb'])						{							trigger_error($user->lang['THEME_ERR_REFRESH_FS'] . adm_back_link($this->u_action), E_USER_WARNING);						}						if (confirm_box(true))						{							if ($theme_row['theme_storedb'] && file_exists("{$phpbb_root_path}styles/{$theme_row['theme_path']}/theme/stylesheet.css"))							{								// Save CSS contents								$sql_ary = array(									'theme_mtime'	=> (int) filemtime("{$phpbb_root_path}styles/{$theme_row['theme_path']}/theme/stylesheet.css"),									'theme_data'	=> $this->db_theme_data($theme_row)								);								$sql = 'UPDATE ' . STYLES_THEME_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "									WHERE theme_id = $style_id";								$db->sql_query($sql);								$cache->destroy('sql', STYLES_THEME_TABLE);								add_log('admin', 'LOG_THEME_REFRESHED', $theme_row['theme_name']);								trigger_error($user->lang['THEME_REFRESHED'] . adm_back_link($this->u_action));							}						}						else						{							confirm_box(false, $user->lang['CONFIRM_THEME_REFRESH'], build_hidden_fields(array(								'i'			=> $id,								'mode'		=> $mode,								'action'	=> $action,								'id'		=> $style_id							)));						}					break;				}				$this->frontend('theme', array('edit', 'details'), array('refresh', 'export', 'delete'));			break;			case 'imageset':				switch ($action)				{					case 'refresh':						$sql = 'SELECT *							FROM ' . STYLES_IMAGESET_TABLE . "							WHERE imageset_id = $style_id";						$result = $db->sql_query($sql);						$imageset_row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$imageset_row)						{							trigger_error($user->lang['NO_IMAGESET'] . adm_back_link($this->u_action), E_USER_WARNING);						}						if (confirm_box(true))						{							$sql_ary = array();							$imageset_definitions = array();							foreach ($this->imageset_keys as $topic => $key_array)							{								$imageset_definitions = array_merge($imageset_definitions, $key_array);							}							$cfg_data_imageset = parse_cfg_file("{$phpbb_root_path}styles/{$imageset_row['imageset_path']}/imageset/imageset.cfg");							$db->sql_transaction('begin');							$sql = 'DELETE FROM ' . STYLES_IMAGESET_DATA_TABLE . '								WHERE imageset_id = ' . $style_id;							$result = $db->sql_query($sql);							foreach ($cfg_data_imageset as $image_name => $value)							{								if (strpos($value, '*') !== false)								{									if (substr($value, -1, 1) === '*')									{										list($image_filename, $image_height) = explode('*', $value);										$image_width = 0;									}									else									{										list($image_filename, $image_height, $image_width) = explode('*', $value);									}								}								else								{									$image_filename = $value;									$image_height = $image_width = 0;								}								if (strpos($image_name, 'img_') === 0 && $image_filename)								{									$image_name = substr($image_name, 4);									if (in_array($image_name, $imageset_definitions))									{										$sql_ary[] = array(											'image_name'		=> (string) $image_name,											'image_filename'	=> (string) $image_filename,											'image_height'		=> (int) $image_height,											'image_width'		=> (int) $image_width,											'imageset_id'		=> (int) $style_id,											'image_lang'		=> '',										);									}								}							}							$sql = 'SELECT lang_dir								FROM ' . LANG_TABLE;							$result = $db->sql_query($sql);							while ($row = $db->sql_fetchrow($result))							{								if (@file_exists("{$phpbb_root_path}styles/{$imageset_row['imageset_path']}/imageset/{$row['lang_dir']}/imageset.cfg"))								{									$cfg_data_imageset_data = parse_cfg_file("{$phpbb_root_path}styles/{$imageset_row['imageset_path']}/imageset/{$row['lang_dir']}/imageset.cfg");									foreach ($cfg_data_imageset_data as $image_name => $value)									{										if (strpos($value, '*') !== false)										{											if (substr($value, -1, 1) === '*')											{												list($image_filename, $image_height) = explode('*', $value);												$image_width = 0;											}											else											{												list($image_filename, $image_height, $image_width) = explode('*', $value);											}										}										else										{											$image_filename = $value;											$image_height = $image_width = 0;										}										if (strpos($image_name, 'img_') === 0 && $image_filename)										{											$image_name = substr($image_name, 4);											if (in_array($image_name, $imageset_definitions))											{												$sql_ary[] = array(													'image_name'		=> (string) $image_name,													'image_filename'	=> (string) $image_filename,													'image_height'		=> (int) $image_height,													'image_width'		=> (int) $image_width,													'imageset_id'		=> (int) $style_id,													'image_lang'		=> (string) $row['lang_dir'],												);											}										}									}								}							}							$db->sql_freeresult($result);							$db->sql_multi_insert(STYLES_IMAGESET_DATA_TABLE, $sql_ary);							$db->sql_transaction('commit');							$cache->destroy('sql', STYLES_IMAGESET_DATA_TABLE);							$cache->destroy('imageset_site_logo_md5');							add_log('admin', 'LOG_IMAGESET_REFRESHED', $imageset_row['imageset_name']);							trigger_error($user->lang['IMAGESET_REFRESHED'] . adm_back_link($this->u_action));						}						else						{							confirm_box(false, $user->lang['CONFIRM_IMAGESET_REFRESH'], build_hidden_fields(array(								'i'			=> $id,								'mode'		=> $mode,								'action'	=> $action,								'id'		=> $style_id							)));						}					break;				}				$this->frontend('imageset', array('edit', 'details'), array('refresh', 'export', 'delete'));			break;		}	}	/**	* Build Frontend with supplied options	*/	function frontend($mode, $options, $actions)	{		global $user, $template, $db, $config, $phpbb_root_path, $phpEx;		$sql_from = '';		$style_count = array();		switch ($mode)		{			case 'style':				$sql_from = STYLES_TABLE;				$sql = 'SELECT user_style, COUNT(user_style) AS style_count					FROM ' . USERS_TABLE . '					GROUP BY user_style';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$style_count[$row['user_style']] = $row['style_count'];				}				$db->sql_freeresult($result);			break;			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;			break;		}		$l_prefix = strtoupper($mode);		$this->page_title = 'ACP_' . $l_prefix . 'S';		$template->assign_vars(array(			'S_FRONTEND'		=> true,			'S_STYLE'			=> ($mode == 'style') ? true : false,			'L_TITLE'			=> $user->lang[$this->page_title],			'L_EXPLAIN'			=> $user->lang[$this->page_title . '_EXPLAIN'],			'L_NAME'			=> $user->lang[$l_prefix . '_NAME'],			'L_INSTALLED'		=> $user->lang['INSTALLED_' . $l_prefix],			'L_UNINSTALLED'		=> $user->lang['UNINSTALLED_' . $l_prefix],			'L_NO_UNINSTALLED'	=> $user->lang['NO_UNINSTALLED_' . $l_prefix],			'L_CREATE'			=> $user->lang['CREATE_' . $l_prefix],			'U_ACTION'			=> $this->u_action,			)		);		$sql = "SELECT *			FROM $sql_from";		$result = $db->sql_query($sql);		$installed = array();		$basis_options = '<option class="sep" value="">' . $user->lang['OPTIONAL_BASIS'] . '</option>';		while ($row = $db->sql_fetchrow($result))		{			$installed[] = $row[$mode . '_name'];			$basis_options .= '<option value="' . $row[$mode . '_id'] . '">' . $row[$mode . '_name'] . '</option>';			$stylevis = ($mode == 'style' && !$row['style_active']) ? 'activate' : 'deactivate';			$s_options = array();			foreach ($options as $option)			{				$s_options[] = '<a href="' . $this->u_action . "&amp;action=$option&amp;id=" . $row[$mode . '_id'] . '">' . $user->lang[strtoupper($option)] . '</a>';			}			$s_actions = array();			foreach ($actions as $option)			{				$s_actions[] = '<a href="' . $this->u_action . "&amp;action=$option&amp;id=" . $row[$mode . '_id'] . '">' . $user->lang[strtoupper($option)] . '</a>';			}			$template->assign_block_vars('installed', array(				'S_DEFAULT_STYLE'		=> ($mode == 'style' && $row['style_id'] == $config['default_style']) ? true : false,				'U_EDIT'				=> $this->u_action . '&amp;action=' . (($mode == 'style') ? 'details' : 'edit') . '&amp;id=' . $row[$mode . '_id'],				'U_STYLE_ACT_DEACT'		=> $this->u_action . '&amp;action=' . $stylevis . '&amp;id=' . $row[$mode . '_id'],				'L_STYLE_ACT_DEACT'		=> $user->lang['STYLE_' . strtoupper($stylevis)],				'S_OPTIONS'				=> implode(' | ', $s_options),				'S_ACTIONS'				=> implode(' | ', $s_actions),				'U_PREVIEW'				=> ($mode == 'style') ? append_sid("{$phpbb_root_path}index.$phpEx", "$mode=" . $row[$mode . '_id']) : '',				'NAME'					=> $row[$mode . '_name'],				'STYLE_COUNT'			=> ($mode == 'style' && isset($style_count[$row['style_id']])) ? $style_count[$row['style_id']] : 0,				)			);		}		$db->sql_freeresult($result);		// Grab uninstalled items		$new_ary = $cfg = array();		$dp = @opendir("{$phpbb_root_path}styles");		if ($dp)		{			while (($file = readdir($dp)) !== false)			{				if ($file[0] == '.' || !is_dir($phpbb_root_path . 'styles/' . $file))				{					continue;				}				$subpath = ($mode != 'style') ? "$mode/" : '';				if (file_exists("{$phpbb_root_path}styles/$file/$subpath$mode.cfg"))				{					if ($cfg = file("{$phpbb_root_path}styles/$file/$subpath$mode.cfg"))					{						$items = parse_cfg_file('', $cfg);						$name = (isset($items['name'])) ? trim($items['name']) : false;						if ($name && !in_array($name, $installed))						{							$new_ary[] = array(								'path'		=> $file,								'name'		=> $name,								'copyright'	=> $items['copyright'],							);						}					}				}			}			closedir($dp);		}		unset($installed);		if (sizeof($new_ary))		{			foreach ($new_ary as $cfg)			{				$template->assign_block_vars('uninstalled', array(					'NAME'			=> $cfg['name'],					'COPYRIGHT'		=> $cfg['copyright'],					'U_INSTALL'		=> $this->u_action . '&amp;action=install&amp;path=' . urlencode($cfg['path']))				);			}		}		unset($new_ary);		$template->assign_vars(array(			'S_BASIS_OPTIONS'		=> $basis_options)		);	}	/**	* Provides a template editor which allows saving changes to template files on the filesystem or in the database.	*	* @param int $template_id specifies which template set is being edited	*/	function edit_template($template_id)	{		global $phpbb_root_path, $phpEx, $config, $db, $cache, $user, $template, $safe_mode;		if (defined('PHPBB_DISABLE_ACP_EDITOR'))		{			trigger_error($user->lang['EDITOR_DISABLED'] . adm_back_link($this->u_action));		}		$this->page_title = 'EDIT_TEMPLATE';		$filelist = $filelist_cats = array();		$template_data	= utf8_normalize_nfc(request_var('template_data', '', true));		$template_data	= htmlspecialchars_decode($template_data);		$template_file	= utf8_normalize_nfc(request_var('template_file', '', true));		$text_rows		= max(5, min(999, request_var('text_rows', 20)));		$save_changes	= (isset($_POST['save'])) ? true : false;		// make sure template_file path doesn't go upwards		$template_file = preg_replace('#\.{2,}#', '.', $template_file);		// Retrieve some information about the template		$sql = 'SELECT template_storedb, template_path, template_name			FROM ' . STYLES_TEMPLATE_TABLE . "			WHERE template_id = $template_id";		$result = $db->sql_query($sql);		$template_info = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$template_info)		{			trigger_error($user->lang['NO_TEMPLATE'] . adm_back_link($this->u_action), E_USER_WARNING);		}		if ($save_changes && !check_form_key('acp_styles'))		{			trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action), E_USER_WARNING);		}		else if (!$save_changes)		{			add_form_key('acp_styles');		}		// save changes to the template if the user submitted any		if ($save_changes && $template_file)		{			// Get the filesystem location of the current file			$file = "{$phpbb_root_path}styles/{$template_info['template_path']}/template/$template_file";			$additional = '';			// If the template is stored on the filesystem try to write the file else store it in the database			if (!$safe_mode && !$template_info['template_storedb'] && file_exists($file) && phpbb_is_writable($file))			{				if (!($fp = @fopen($file, 'wb')))				{					// File exists and is writeable, but still not able to be written to					trigger_error(sprintf($user->lang['TEMPLATE_FILE_NOT_WRITABLE'], htmlspecialchars($template_file)) . adm_back_link($this->u_action), E_USER_WARNING);				}				fwrite($fp, $template_data);				fclose($fp);			}			else			{				$db->sql_transaction('begin');				// If it's not stored in the db yet, then update the template setting and store all template files in the db				if (!$template_info['template_storedb'])				{					if ($super = $this->get_super('template', $template_id))					{						$this->store_in_db('template', $super['template_id']);					}					else					{						$this->store_in_db('template', $template_id);					}					add_log('admin', 'LOG_TEMPLATE_EDIT_DETAILS', $template_info['template_name']);					$additional .= '<br />' . $user->lang['EDIT_TEMPLATE_STORED_DB'];				}				// Update the template_data table entry for this template file				$sql = 'UPDATE ' . STYLES_TEMPLATE_DATA_TABLE . "					SET template_data = '" . $db->sql_escape($template_data) . "', template_mtime = " . time() . "					WHERE template_id = $template_id						AND template_filename = '" . $db->sql_escape($template_file) . "'";				$db->sql_query($sql);				$db->sql_transaction('commit');			}			// destroy the cached version of the template (filename without extension)			$this->clear_template_cache($template_info, array(substr($template_file, 0, -5)));			$cache->destroy('sql', STYLES_TABLE);			add_log('admin', 'LOG_TEMPLATE_EDIT', $template_info['template_name'], $template_file);			trigger_error($user->lang['TEMPLATE_FILE_UPDATED'] . $additional . adm_back_link($this->u_action . "&amp;action=edit&amp;id=$template_id&amp;text_rows=$text_rows&amp;template_file=$template_file"));		}		// Generate a category array containing template filenames		if (!$template_info['template_storedb'])		{			$template_path = "{$phpbb_root_path}styles/{$template_info['template_path']}/template";			$filelist = filelist($template_path, '', 'html');			$filelist[''] = array_diff($filelist[''], array('bbcode.html'));			if ($template_file)			{				if (!file_exists($template_path . "/$template_file") || !($template_data = file_get_contents($template_path . "/$template_file")))				{					trigger_error($user->lang['NO_TEMPLATE'] . adm_back_link($this->u_action), E_USER_WARNING);				}			}		}		else		{			$sql = 'SELECT *				FROM ' . STYLES_TEMPLATE_DATA_TABLE . "				WHERE template_id = $template_id";			$result = $db->sql_query($sql);			$filelist = array('' => array());			while ($row = $db->sql_fetchrow($result))			{				$file_info = pathinfo($row['template_filename']);				if (($file_info['basename'] != 'bbcode') && ($file_info['extension'] == 'html'))				{					if (($file_info['dirname'] == '.') || empty($file_info['dirname']))					{						$filelist[''][] = $row['template_filename'];					}					else					{						$filelist[$file_info['dirname'] . '/'][] = $file_info['basename'];					}				}				if ($row['template_filename'] == $template_file)				{					$template_data = $row['template_data'];				}			}			$db->sql_freeresult($result);			unset($file_info);		}		if (empty($filelist['']))		{			trigger_error($user->lang['NO_TEMPLATE'] . adm_back_link($this->u_action), E_USER_WARNING);		}		// Now create the categories		$filelist_cats[''] = array();		foreach ($filelist as $pathfile => $file_ary)		{			// Use the directory name as category name			if (!empty($pathfile))			{				$filelist_cats[$pathfile] = array();				foreach ($file_ary as $file)				{					$filelist_cats[$pathfile][$pathfile . $file] = $file;				}			}			// or if it's in the main category use the word before the first underscore to group files			else			{				$cats = array();				foreach ($file_ary as $file)				{					$cats[] = substr($file, 0, strpos($file, '_'));					$filelist_cats[substr($file, 0, strpos($file, '_'))][$file] = $file;				}				$cats = array_values(array_unique($cats));				// we don't need any single element categories so put them into the misc '' category				for ($i = 0, $n = sizeof($cats); $i < $n; $i++)				{					if (sizeof($filelist_cats[$cats[$i]]) == 1 && $cats[$i] !== '')					{						$filelist_cats[''][key($filelist_cats[$cats[$i]])] = current($filelist_cats[$cats[$i]]);						unset($filelist_cats[$cats[$i]]);					}				}				unset($cats);			}		}		unset($filelist);		// Generate list of categorised template files		$tpl_options = '';		ksort($filelist_cats);		foreach ($filelist_cats as $category => $tpl_ary)		{			ksort($tpl_ary);			if (!empty($category))			{				$tpl_options .= '<option class="sep" value="">' . $category . '</option>';			}			foreach ($tpl_ary as $filename => $file)			{				$selected = ($template_file == $filename) ? ' selected="selected"' : '';				$tpl_options .= '<option value="' . $filename . '"' . $selected . '>' . $file . '</option>';			}		}		$template->assign_vars(array(			'S_EDIT_TEMPLATE'	=> true,			'S_HIDDEN_FIELDS'	=> build_hidden_fields(array('template_file' => $template_file)),			'S_TEMPLATES'		=> $tpl_options,			'U_ACTION'			=> $this->u_action . "&amp;action=edit&amp;id=$template_id&amp;text_rows=$text_rows",			'U_BACK'			=> $this->u_action,			'L_EDIT'			=> $user->lang['EDIT_TEMPLATE'],			'L_EDIT_EXPLAIN'	=> $user->lang['EDIT_TEMPLATE_EXPLAIN'],			'L_EDITOR'			=> $user->lang['TEMPLATE_EDITOR'],			'L_EDITOR_HEIGHT'	=> $user->lang['TEMPLATE_EDITOR_HEIGHT'],			'L_FILE'			=> $user->lang['TEMPLATE_FILE'],			'L_SELECT'			=> $user->lang['SELECT_TEMPLATE'],			'L_SELECTED'		=> $user->lang['SELECTED_TEMPLATE'],			'L_SELECTED_FILE'	=> $user->lang['SELECTED_TEMPLATE_FILE'],			'SELECTED_TEMPLATE'	=> $template_info['template_name'],			'TEMPLATE_FILE'		=> $template_file,			'TEMPLATE_DATA'		=> utf8_htmlspecialchars($template_data),			'TEXT_ROWS'			=> $text_rows)		);	}	/**	* Allows the admin to view cached versions of template files and clear single template cache files	*	* @param int $template_id specifies which template's cache is shown	*/	function template_cache($template_id)	{		global $phpbb_root_path, $phpEx, $config, $db, $cache, $user, $template;		$source		= str_replace('/', '.', request_var('source', ''));		$file_ary	= array_diff(request_var('delete', array('')), array(''));		$submit		= isset($_POST['submit']) ? true : false;		$sql = 'SELECT *			FROM ' . STYLES_TEMPLATE_TABLE . "			WHERE template_id = $template_id";		$result = $db->sql_query($sql);		$template_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$template_row)		{			trigger_error($user->lang['NO_TEMPLATE'] . adm_back_link($this->u_action), E_USER_WARNING);		}		// User wants to delete one or more files ...		if ($submit && $file_ary)		{			$this->clear_template_cache($template_row, $file_ary);			trigger_error($user->lang['TEMPLATE_CACHE_CLEARED'] . adm_back_link($this->u_action . "&amp;action=cache&amp;id=$template_id"));		}		$cache_prefix = 'tpl_' . str_replace('_', '-', $template_row['template_path']);		// Someone wants to see the cached source ... so we'll highlight it,		// add line numbers and indent it appropriately. This could be nasty		// on larger source files ...		if ($source && file_exists("{$phpbb_root_path}cache/{$cache_prefix}_$source.html.$phpEx"))		{			adm_page_header($user->lang['TEMPLATE_CACHE']);			$template->set_filenames(array(				'body'	=> 'viewsource.html')			);			$template->assign_vars(array(				'FILENAME'	=> str_replace('.', '/', $source) . '.html')			);			$code = str_replace(array("\r\n", "\r"), array("\n", "\n"), file_get_contents("{$phpbb_root_path}cache/{$cache_prefix}_$source.html.$phpEx"));			$conf = array('highlight.bg', 'highlight.comment', 'highlight.default', 'highlight.html', 'highlight.keyword', 'highlight.string');			foreach ($conf as $ini_var)			{				@ini_set($ini_var, str_replace('highlight.', 'syntax', $ini_var));			}			$marker = 'MARKER' . time();			$code = highlight_string(str_replace("\n", $marker, $code), true);			$code = str_replace($marker, "\n", $code);			$str_from = array('<span style="color: ', '<font color="syntax', '</font>', '<code>', '</code>','[', ']', '.', ':');			$str_to = array('<span class="', '<span class="syntax', '</span>', '', '', '&#91;', '&#93;', '&#46;', '&#58;');			$code = str_replace($str_from, $str_to, $code);			$code = preg_replace('#^(<span class="[a-z_]+">)\n?(.*?)\n?(</span>)$#ism', '$1$2$3', $code);			$code = substr($code, strlen('<span class="syntaxhtml">'));			$code = substr($code, 0, -1 * strlen('</ span>'));			$code = explode("\n", $code);			foreach ($code as $key => $line)			{				$template->assign_block_vars('source', array(					'LINENUM'	=> $key + 1,					'LINE'		=> preg_replace('#([^ ;])&nbsp;([^ &])#', '$1 $2', $line))				);				unset($code[$key]);			}			adm_page_footer();		}		$filemtime = array();		if ($template_row['template_storedb'])		{			$ids = array();			if (isset($template_row['template_inherits_id']) && $template_row['template_inherits_id'])			{				$ids[] = $template_row['template_inherits_id'];			}			$ids[] = $template_row['template_id'];			$filemtime 			= array();			$file_template_db	= array();			foreach ($ids as $id)			{				$sql = 'SELECT template_filename, template_mtime					FROM ' . STYLES_TEMPLATE_DATA_TABLE . "					WHERE template_id = $id";				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$filemtime[$row['template_filename']] = $row['template_mtime'];					$file_template_db[$row['template_filename']] = $id;				}				$db->sql_freeresult($result);			}		}		// Get a list of cached template files and then retrieve additional information about them		$file_ary = $this->template_cache_filelist($template_row['template_path']);		foreach ($file_ary as $file)		{			$file		= str_replace('/', '.', $file);			// perform some dirty guessing to get the path right.			// We assume that three dots in a row were '../'			$tpl_file	= str_replace('.', '/', $file);			$tpl_file	= str_replace('///', '../', $tpl_file);			$filename = "{$cache_prefix}_$file.html.$phpEx";			if (!file_exists("{$phpbb_root_path}cache/$filename"))			{				continue;			}			$file_tpl = "{$phpbb_root_path}styles/{$template_row['template_path']}/template/$tpl_file.html";			$inherited = false;			if (isset($template_row['template_inherits_id']) && $template_row['template_inherits_id'])			{				if (!$template_row['template_storedb'])				{					if (!file_exists($file_tpl))					{						$file_tpl = "{$phpbb_root_path}styles/{$template_row['template_inherit_path']}/template/$tpl_file.html";						$inherited = true;					}				}				else				{					if ($file_template_db[$file . '.html'] == $template_row['template_inherits_id'])					{						$file_tpl = "{$phpbb_root_path}styles/{$template_row['template_inherit_path']}/template/$tpl_file.html";						$inherited = true;					}				}			}			// Correct the filename if it is stored in database and the file is in a subfolder.			if ($template_row['template_storedb'])			{				$file = str_replace('.', '/', $file);			}			$template->assign_block_vars('file', array(				'U_VIEWSOURCE'	=> $this->u_action . "&amp;action=cache&amp;id=$template_id&amp;source=$file",				'CACHED'		=> $user->format_date(filemtime("{$phpbb_root_path}cache/$filename")),				'FILENAME'		=> $file,				'FILENAME_PATH'	=> $file_tpl,				'FILESIZE'		=> get_formatted_filesize(filesize("{$phpbb_root_path}cache/$filename")),				'MODIFIED'		=> $user->format_date((!$template_row['template_storedb']) ? filemtime($file_tpl) : $filemtime[$file . '.html']))			);		}		unset($filemtime);		$template->assign_vars(array(			'S_CACHE'			=> true,			'S_TEMPLATE'		=> true,			'U_ACTION'			=> $this->u_action . "&amp;action=cache&amp;id=$template_id",			'U_BACK'			=> $this->u_action)		);	}	/**	* Provides a css editor and a basic easier to use stylesheet editing tool for less experienced (or lazy) users	*	* @param int $theme_id specifies which theme is being edited	*/	function edit_theme($theme_id)	{		global $phpbb_root_path, $phpEx, $config, $db, $cache, $user, $template, $safe_mode;		$this->page_title = 'EDIT_THEME';		$filelist = $filelist_cats = array();		$theme_data		= utf8_normalize_nfc(request_var('template_data', '', true));		$theme_data		= htmlspecialchars_decode($theme_data);		$theme_file		= utf8_normalize_nfc(request_var('template_file', '', true));		$text_rows		= max(5, min(999, request_var('text_rows', 20)));		$save_changes	= (isset($_POST['save'])) ? true : false;		// make sure theme_file path doesn't go upwards		$theme_file = str_replace('..', '.', $theme_file);		// Retrieve some information about the theme		$sql = 'SELECT theme_storedb, theme_path, theme_name, theme_data			FROM ' . STYLES_THEME_TABLE . "			WHERE theme_id = $theme_id";		$result = $db->sql_query($sql);		if (!($theme_info = $db->sql_fetchrow($result)))		{			trigger_error($user->lang['NO_THEME'] . adm_back_link($this->u_action), E_USER_WARNING);		}		$db->sql_freeresult($result);		// save changes to the theme if the user submitted any		if ($save_changes)		{			// Get the filesystem location of the current file			$file = "{$phpbb_root_path}styles/{$theme_info['theme_path']}/theme/$theme_file";			$additional = '';			$message = $user->lang['THEME_UPDATED'];			// If the theme is stored on the filesystem try to write the file else store it in the database			if (!$safe_mode && !$theme_info['theme_storedb'] && file_exists($file) && phpbb_is_writable($file))			{				if (!($fp = @fopen($file, 'wb')))				{					trigger_error($user->lang['NO_THEME'] . adm_back_link($this->u_action), E_USER_WARNING);				}				fwrite($fp, $theme_data);				fclose($fp);			}			else			{				// Write stylesheet to db				$sql_ary = array(					'theme_mtime'		=> time(),					'theme_storedb'		=> 1,					'theme_data'		=> $this->db_theme_data($theme_info, $theme_data),				);				$sql = 'UPDATE ' . STYLES_THEME_TABLE . '					SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '					WHERE theme_id = ' . $theme_id;				$db->sql_query($sql);				$cache->destroy('sql', STYLES_THEME_TABLE);				// notify the user if the theme was not stored in the db before his modification				if (!$theme_info['theme_storedb'])				{					add_log('admin', 'LOG_THEME_EDIT_DETAILS', $theme_info['theme_name']);					$message .= '<br />' . $user->lang['EDIT_THEME_STORED_DB'];				}			}			$cache->destroy('sql', STYLES_THEME_TABLE);			add_log('admin', (!$theme_info['theme_storedb']) ? 'LOG_THEME_EDIT_FILE' : 'LOG_THEME_EDIT', $theme_info['theme_name'], (!$theme_info['theme_storedb']) ? $theme_file : '');			trigger_error($message . adm_back_link($this->u_action . "&amp;action=edit&amp;id=$theme_id&amp;template_file=$theme_file&amp;text_rows=$text_rows"));		}		// Generate a category array containing theme filenames		if (!$theme_info['theme_storedb'])		{			$theme_path = "{$phpbb_root_path}styles/{$theme_info['theme_path']}/theme";			$filelist = filelist($theme_path, '', 'css');			if ($theme_file)			{				if (!file_exists($theme_path . "/$theme_file") || !($theme_data = file_get_contents($theme_path . "/$theme_file")))				{					trigger_error($user->lang['NO_THEME'] . adm_back_link($this->u_action), E_USER_WARNING);				}			}		}		else		{			$theme_data = &$theme_info['theme_data'];		}		// Now create the categories		$filelist_cats[''] = array();		foreach ($filelist as $pathfile => $file_ary)		{			// Use the directory name as category name			if (!empty($pathfile))			{				$filelist_cats[$pathfile] = array();				foreach ($file_ary as $file)				{					$filelist_cats[$pathfile][$pathfile . $file] = $file;				}			}			// or if it's in the main category use the word before the first underscore to group files			else			{				$cats = array();				foreach ($file_ary as $file)				{					$cats[] = substr($file, 0, strpos($file, '_'));					$filelist_cats[substr($file, 0, strpos($file, '_'))][$file] = $file;				}				$cats = array_values(array_unique($cats));				// we don't need any single element categories so put them into the misc '' category				for ($i = 0, $n = sizeof($cats); $i < $n; $i++)				{					if (sizeof($filelist_cats[$cats[$i]]) == 1 && $cats[$i] !== '')					{						$filelist_cats[''][key($filelist_cats[$cats[$i]])] = current($filelist_cats[$cats[$i]]);						unset($filelist_cats[$cats[$i]]);					}				}				unset($cats);			}		}		unset($filelist);		// Generate list of categorised theme files		$tpl_options = '';		ksort($filelist_cats);		foreach ($filelist_cats as $category => $tpl_ary)		{			ksort($tpl_ary);			if (!empty($category))			{				$tpl_options .= '<option class="sep" value="">' . $category . '</option>';			}			foreach ($tpl_ary as $filename => $file)			{				$selected = ($theme_file == $filename) ? ' selected="selected"' : '';				$tpl_options .= '<option value="' . $filename . '"' . $selected . '>' . $file . '</option>';			}		}		$template->assign_vars(array(			'S_EDIT_THEME'		=> true,			'S_HIDDEN_FIELDS'	=> build_hidden_fields(array('template_file' => $theme_file)),			'S_THEME_IN_DB'		=> $theme_info['theme_storedb'],			'S_TEMPLATES'		=> $tpl_options,			'U_ACTION'			=> $this->u_action . "&amp;action=edit&amp;id=$theme_id&amp;text_rows=$text_rows",			'U_BACK'			=> $this->u_action,			'L_EDIT'			=> $user->lang['EDIT_THEME'],			'L_EDIT_EXPLAIN'	=> $user->lang['EDIT_THEME_EXPLAIN'],			'L_EDITOR'			=> $user->lang['THEME_EDITOR'],			'L_EDITOR_HEIGHT'	=> $user->lang['THEME_EDITOR_HEIGHT'],			'L_FILE'			=> $user->lang['THEME_FILE'],			'L_SELECT'			=> $user->lang['SELECT_THEME'],			'L_SELECTED'		=> $user->lang['SELECTED_THEME'],			'L_SELECTED_FILE'	=> $user->lang['SELECTED_THEME_FILE'],			'SELECTED_TEMPLATE'	=> $theme_info['theme_name'],			'TEMPLATE_FILE'		=> $theme_file,			'TEMPLATE_DATA'		=> utf8_htmlspecialchars($theme_data),			'TEXT_ROWS'			=> $text_rows)		);	}	/**	* Edit imagesets	*	* @param int $imageset_id specifies which imageset is being edited	*/	function edit_imageset($imageset_id)	{		global $db, $user, $phpbb_root_path, $cache, $template;		$this->page_title = 'EDIT_IMAGESET';		if (!$imageset_id)		{			trigger_error($user->lang['NO_IMAGESET'] . adm_back_link($this->u_action), E_USER_WARNING);		}		$update		= (isset($_POST['update'])) ? true : false;		$imgname	= request_var('imgname', 'site_logo');		$imgname	= preg_replace('#[^a-z0-9\-+_]#i', '', $imgname);		$sql_extra = $imgnamelang = '';		$sql = 'SELECT imageset_path, imageset_name			FROM ' . STYLES_IMAGESET_TABLE . "			WHERE imageset_id = $imageset_id";		$result = $db->sql_query($sql);		$imageset_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$imageset_row)		{			trigger_error($user->lang['NO_IMAGESET'] . adm_back_link($this->u_action), E_USER_WARNING);		}		$imageset_path		= $imageset_row['imageset_path'];		$imageset_name		= $imageset_row['imageset_name'];		if (strpos($imgname, '-') !== false)		{			list($imgname, $imgnamelang) = explode('-', $imgname);			$sql_extra = " AND image_lang IN ('" . $db->sql_escape($imgnamelang) . "', '')";		}		$sql = 'SELECT image_filename, image_width, image_height, image_lang, image_id			FROM ' . STYLES_IMAGESET_DATA_TABLE . "			WHERE imageset_id = $imageset_id				AND image_name = '" . $db->sql_escape($imgname) . "'$sql_extra";		$result = $db->sql_query($sql);		$imageset_data_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		$image_filename	= $imageset_data_row['image_filename'];		$image_width	= $imageset_data_row['image_width'];		$image_height	= $imageset_data_row['image_height'];		$image_lang		= $imageset_data_row['image_lang'];		$image_id		= $imageset_data_row['image_id'];		$imgsize		= ($imageset_data_row['image_width'] && $imageset_data_row['image_height']) ? 1 : 0;		// Check to see whether the selected image exists in the table		$valid_name = ($update) ? false : true;		foreach ($this->imageset_keys as $category => $img_ary)		{			if (in_array($imgname, $img_ary))			{				$valid_name = true;				break;			}		}		if ($update && isset($_POST['imgpath']) && $valid_name)		{			// If imgwidth and imgheight are non-zero grab the actual size			// from the image itself ... we ignore width settings for the poll center image			$imgwidth	= request_var('imgwidth', 0);			$imgheight	= request_var('imgheight', 0);			$imgsize	= request_var('imgsize', 0);			$imgpath	= request_var('imgpath', '');			$imgpath	= str_replace('..', '.', $imgpath);			// If no dimensions selected, we reset width and height to 0 ;)			if (!$imgsize)			{				$imgwidth = $imgheight = 0;			}			$imglang = '';			if ($imgpath && !file_exists("{$phpbb_root_path}styles/$imageset_path/imageset/$imgpath"))			{				trigger_error($user->lang['NO_IMAGE_ERROR'] . adm_back_link($this->u_action), E_USER_WARNING);			}			// Determine width/height. If dimensions included and no width/height given, we detect them automatically...			if ($imgsize && $imgpath)			{				if (!$imgwidth || !$imgheight)				{					list($imgwidth_file, $imgheight_file) = getimagesize("{$phpbb_root_path}styles/$imageset_path/imageset/$imgpath");					$imgwidth = ($imgwidth) ? $imgwidth : $imgwidth_file;					$imgheight = ($imgheight) ? $imgheight : $imgheight_file;				}				$imgwidth	= ($imgname != 'poll_center') ? (int) $imgwidth : 0;				$imgheight	= (int) $imgheight;			}			if (strpos($imgpath, '/') !== false)			{				list($imglang, $imgfilename) = explode('/', $imgpath);			}			else			{				$imgfilename = $imgpath;			}			$sql_ary = array(				'image_filename'	=> (string) $imgfilename,				'image_width'		=> (int) $imgwidth,				'image_height'		=> (int) $imgheight,				'image_lang'		=> (string) $imglang,			);			// already exists			if ($imageset_data_row)			{				$sql = 'UPDATE ' . STYLES_IMAGESET_DATA_TABLE . '					SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "					WHERE image_id = $image_id";				$db->sql_query($sql);			}			// does not exist			else if (!$imageset_data_row)			{				$sql_ary['image_name']	= $imgname;				$sql_ary['imageset_id']	= (int) $imageset_id;				$db->sql_query('INSERT INTO ' . STYLES_IMAGESET_DATA_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));			}			$cache->destroy('sql', STYLES_IMAGESET_DATA_TABLE);			add_log('admin', 'LOG_IMAGESET_EDIT', $imageset_name);			$template->assign_var('SUCCESS', true);			$image_filename = $imgfilename;			$image_width	= $imgwidth;			$image_height	= $imgheight;			$image_lang		= $imglang;		}		$imglang = '';		$imagesetlist = array('nolang' => array(), 'lang' => array());		$langs = array();		$dir = "{$phpbb_root_path}styles/$imageset_path/imageset";		$dp = @opendir($dir);		if ($dp)		{			while (($file = readdir($dp)) !== false)			{				if ($file[0] != '.' && strtoupper($file) != 'CVS' && !is_file($dir . '/' . $file) && !is_link($dir . '/' . $file))				{					$langs[] = $file;				}				else if (preg_match('#\.(?:gif|jpg|png)$#', $file))				{					$imagesetlist['nolang'][] = $file;				}			}			if ($sql_extra)			{				$dp2 = @opendir("$dir/$imgnamelang");				if ($dp2)				{					while (($file2 = readdir($dp2)) !== false)					{						if (preg_match('#\.(?:gif|jpg|png)$#', $file2))						{							$imagesetlist['lang'][] = "$imgnamelang/$file2";						}					}					closedir($dp2);				}			}			closedir($dp);		}		// Generate list of image options		$img_options = '';		foreach ($this->imageset_keys as $category => $img_ary)		{			$template->assign_block_vars('category', array(				'NAME'			=> $user->lang['IMG_CAT_' . strtoupper($category)]			));			foreach ($img_ary as $img)			{				if ($category == 'buttons')				{					foreach ($langs as $language)					{						$template->assign_block_vars('category.images', array(							'SELECTED'			=> ($img == $imgname && $language == $imgnamelang),							'VALUE'				=> $img . '-' . $language,							'TEXT'				=> $user->lang['IMG_' . strtoupper($img)] . ' [ ' . $language . ' ]'						));					}				}				else				{					$template->assign_block_vars('category.images', array(						'SELECTED'			=> ($img == $imgname),						'VALUE'				=> $img,						'TEXT'				=> (($category == 'custom') ? $img : $user->lang['IMG_' . strtoupper($img)])					));				}			}		}		// Make sure the list of possible images is sorted alphabetically		sort($imagesetlist['lang']);		sort($imagesetlist['nolang']);		$image_found = false;		$img_val = '';		foreach ($imagesetlist as $type => $img_ary)		{			if ($type !== 'lang' || $sql_extra)			{				$template->assign_block_vars('imagesetlist', array(					'TYPE'	=> ($type == 'lang')				));			}			foreach ($img_ary as $img)			{				$imgtext = preg_replace('/^([^\/]+\/)/', '', $img);				$selected = (!empty($imgname) && strpos($image_filename, $imgtext) !== false);				if ($selected)				{					$image_found = true;					$img_val = htmlspecialchars($img);				}				$template->assign_block_vars('imagesetlist.images', array(					'SELECTED'			=> $selected,					'TEXT'				=> $imgtext,					'VALUE'				=> htmlspecialchars($img)				));			}		}		$imgsize_bool = (!empty($imgname) && $image_width && $image_height) ? true : false;		$image_request = '../styles/' . $imageset_path . '/imageset/' . ($image_lang ? $imgnamelang . '/' : '') . $image_filename;		$template->assign_vars(array(			'S_EDIT_IMAGESET'	=> true,			'L_TITLE'			=> $user->lang[$this->page_title],			'L_EXPLAIN'			=> $user->lang[$this->page_title . '_EXPLAIN'],			'IMAGE_OPTIONS'		=> $img_options,			'IMAGE_SIZE'		=> $image_width,			'IMAGE_HEIGHT'		=> $image_height,			'IMAGE_REQUEST'		=> (empty($image_filename)) ? 'images/no_image.png' : $image_request,			'U_ACTION'			=> $this->u_action . "&amp;action=edit&amp;id=$imageset_id",			'U_BACK'			=> $this->u_action,			'NAME'				=> $imageset_name,			'A_NAME'			=> addslashes($imageset_name),			'PATH'				=> $imageset_path,			'A_PATH'			=> addslashes($imageset_path),			'ERROR'				=> !$valid_name,			'IMG_SRC'			=> ($image_found) ? '../styles/' . $imageset_path . '/imageset/' . $img_val : 'images/no_image.png',			'IMAGE_SELECT'		=> $image_found		));	}	/**	* Remove style/template/theme/imageset	*/	function remove($mode, $style_id)	{		global $db, $template, $user, $phpbb_root_path, $cache, $config;		$new_id = request_var('new_id', 0);		$update = (isset($_POST['update'])) ? true : false;		$sql_where = '';		switch ($mode)		{			case 'style':				$sql_from = STYLES_TABLE;				$sql_select = 'style_id, style_name, template_id, theme_id, imageset_id';				$sql_where = 'AND style_active = 1';			break;			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;				$sql_select = 'template_id, template_name, template_path, template_storedb';			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;				$sql_select = 'theme_id, theme_name, theme_path, theme_storedb';			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;				$sql_select = 'imageset_id, imageset_name, imageset_path';			break;		}		if ($mode === 'template' && ($conflicts = $this->check_inheritance($mode, $style_id)))		{			$l_type = strtoupper($mode);			$msg = $user->lang[$l_type . '_DELETE_DEPENDENT'];			foreach ($conflicts as $id => $values)			{				$msg .= '<br />' . $values['template_name'];			}			trigger_error($msg . adm_back_link($this->u_action), E_USER_WARNING);		}		$l_prefix = strtoupper($mode);		$sql = "SELECT $sql_select			FROM $sql_from			WHERE {$mode}_id = $style_id";		$result = $db->sql_query($sql);		$style_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$style_row)		{			trigger_error($user->lang['NO_' . $l_prefix] . adm_back_link($this->u_action), E_USER_WARNING);		}		$s_only_component = $this->display_component_options($mode, $style_row[$mode . '_id'], $style_row);		if ($s_only_component)		{			trigger_error($user->lang['ONLY_' . $l_prefix] . adm_back_link($this->u_action), E_USER_WARNING);		}		if ($update)		{			if ($mode == 'style')			{				$sql = "DELETE FROM $sql_from					WHERE {$mode}_id = $style_id";				$db->sql_query($sql);				$sql = 'UPDATE ' . USERS_TABLE . "					SET user_style = $new_id					WHERE user_style = $style_id";				$db->sql_query($sql);				$sql = 'UPDATE ' . FORUMS_TABLE . "					SET forum_style = $new_id					WHERE forum_style = $style_id";				$db->sql_query($sql);				if ($style_id == $config['default_style'])				{					set_config('default_style', $new_id);				}				// Remove the components				$components = array('template', 'theme', 'imageset');				foreach ($components as $component)				{					$new_id = request_var('new_' . $component . '_id', 0);					$component_id = $style_row[$component . '_id'];					$this->remove_component($component, $component_id, $new_id, $style_id);				}			}			else			{				$this->remove_component($mode, $style_id, $new_id);			}			$cache->destroy('sql', STYLES_TABLE);			add_log('admin', 'LOG_' . $l_prefix . '_DELETE', $style_row[$mode . '_name']);			$message = ($mode != 'style') ? $l_prefix . '_DELETED_FS' : $l_prefix . '_DELETED';			trigger_error($user->lang[$message] . adm_back_link($this->u_action));		}		$this->page_title = 'DELETE_' . $l_prefix;		$template->assign_vars(array(			'S_DELETE'			=> true,			'L_TITLE'			=> $user->lang[$this->page_title],			'L_EXPLAIN'			=> $user->lang[$this->page_title . '_EXPLAIN'],			'L_NAME'			=> $user->lang[$l_prefix . '_NAME'],			'L_REPLACE'			=> $user->lang['REPLACE_' . $l_prefix],			'L_REPLACE_EXPLAIN'	=> $user->lang['REPLACE_' . $l_prefix . '_EXPLAIN'],			'U_ACTION'		=> $this->u_action . "&amp;action=delete&amp;id=$style_id",			'U_BACK'		=> $this->u_action,			'NAME'			=> $style_row[$mode . '_name'],			)		);		if ($mode == 'style')		{			$template->assign_vars(array(				'S_DELETE_STYLE'		=> true,			));		}	}	/**	* Remove template/theme/imageset entry from the database	*/	function remove_component($component, $component_id, $new_id, $style_id = false)	{		global $db;		if (($new_id == 0) || ($component === 'template' && ($conflicts = $this->check_inheritance($component, $component_id))))		{			// We can not delete the template, as the user wants to keep the component or an other template is inheriting from this one.			return;		}		$component_in_use = array();		if ($component != 'style')		{			$component_in_use = $this->component_in_use($component, $component_id, $style_id);		}		if (($new_id == -1) && !empty($component_in_use))		{			// We can not delete the component, as it is still in use			return;		}		if ($component == 'imageset')		{			$sql = 'DELETE FROM ' . STYLES_IMAGESET_DATA_TABLE . "				WHERE imageset_id = $component_id";			$db->sql_query($sql);		}		switch ($component)		{			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;;			break;		}		$sql = "DELETE FROM $sql_from			WHERE {$component}_id = $component_id";		$db->sql_query($sql);		$sql = 'UPDATE ' . STYLES_TABLE . "			SET {$component}_id = $new_id			WHERE {$component}_id = $component_id";		$db->sql_query($sql);	}	/**	* Display the options which can be used to replace a style/template/theme/imageset	*	* @return boolean Returns true if the component is the only component and can not be deleted.	*/	function display_component_options($component, $component_id, $style_row = false, $style_id = false)	{		global $db, $template, $user;		$is_only_component = true;		$component_in_use = array();		if ($component != 'style')		{			$component_in_use = $this->component_in_use($component, $component_id, $style_id);		}		$sql_where = '';		switch ($component)		{			case 'style':				$sql_from = STYLES_TABLE;				$sql_where = 'WHERE style_active = 1';			break;			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;				$sql_where = 'WHERE template_inherits_id <> ' . $component_id;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;			break;		}		$s_options = '';		if (($component != 'style') && empty($component_in_use))		{			// If it is not in use, there must be another component			$is_only_component = false;			$sql = "SELECT {$component}_id, {$component}_name				FROM $sql_from				WHERE {$component}_id = {$component_id}";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			$s_options .= '<option value="-1" selected="selected">' . $user->lang['DELETE_' . strtoupper($component)] . '</option>';			$s_options .= '<option value="0">' . sprintf($user->lang['KEEP_' . strtoupper($component)], $row[$component . '_name']) . '</option>';		}		else		{			$sql = "SELECT {$component}_id, {$component}_name				FROM $sql_from				$sql_where				ORDER BY {$component}_name ASC";			$result = $db->sql_query($sql);			$s_keep_option = $s_options = '';			while ($row = $db->sql_fetchrow($result))			{				if ($row[$component . '_id'] != $component_id)				{					$is_only_component = false;					$s_options .= '<option value="' . $row[$component . '_id'] . '">' . sprintf($user->lang['REPLACE_WITH_OPTION'], $row[$component . '_name']) . '</option>';				}				else if ($component != 'style')				{					$s_keep_option = '<option value="0" selected="selected">' . sprintf($user->lang['KEEP_' . strtoupper($component)], $row[$component . '_name']) . '</option>';				}			}			$db->sql_freeresult($result);			$s_options = $s_keep_option . $s_options;		}		if (!$style_row)		{			$template->assign_var('S_REPLACE_' . strtoupper($component) . '_OPTIONS', $s_options);		}		else		{			$template->assign_var('S_REPLACE_OPTIONS', $s_options);			if ($component == 'style')			{				$components = array('template', 'theme', 'imageset');				foreach ($components as $component)				{					$this->display_component_options($component, $style_row[$component . '_id'], false, $component_id, true);				}			}		}		return $is_only_component;	}	/**	* Check whether the component is still used by another style or component	*/	function component_in_use($component, $component_id, $style_id = false)	{		global $db;		$component_in_use = array();		if ($style_id)		{			$sql = 'SELECT style_id, style_name				FROM ' . STYLES_TABLE . "				WHERE {$component}_id = {$component_id}					AND style_id <> {$style_id}				ORDER BY style_name ASC";		}		else		{			$sql = 'SELECT style_id, style_name				FROM ' . STYLES_TABLE . "				WHERE {$component}_id = {$component_id}				ORDER BY style_name ASC";		}		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$component_in_use[] = $row['style_name'];		}		$db->sql_freeresult($result);		if ($component === 'template' && ($conflicts = $this->check_inheritance($component, $component_id)))		{			foreach ($conflicts as $temp_id => $conflict_data)			{				$component_in_use[] = $conflict_data['template_name'];			}		}		return $component_in_use;	}	/**	* Export style or style elements	*/	function export($mode, $style_id)	{		global $db, $template, $user, $phpbb_root_path, $cache, $phpEx, $config;		$update = (isset($_POST['update'])) ? true : false;		$inc_template = request_var('inc_template', 0);		$inc_theme = request_var('inc_theme', 0);		$inc_imageset = request_var('inc_imageset', 0);		$store = request_var('store', 0);		$format = request_var('format', '');		$error = array();		$methods = array('tar');		$available_methods = array('tar.gz' => 'zlib', 'tar.bz2' => 'bz2', 'zip' => 'zlib');		foreach ($available_methods as $type => $module)		{			if (!@extension_loaded($module))			{				continue;			}			$methods[] = $type;		}		if (!in_array($format, $methods))		{			$format = 'tar';		}		switch ($mode)		{			case 'style':				if ($update && ($inc_template + $inc_theme + $inc_imageset) < 1)				{					$error[] = $user->lang['STYLE_ERR_MORE_ELEMENTS'];				}				$name = 'style_name';				$sql_select = 's.style_id, s.style_name, s.style_copyright';				$sql_select .= ($inc_template) ? ', t.*' : ', t.template_name';				$sql_select .= ($inc_theme) ? ', c.*' : ', c.theme_name';				$sql_select .= ($inc_imageset) ? ', i.*' : ', i.imageset_name';				$sql_from = STYLES_TABLE . ' s, ' . STYLES_TEMPLATE_TABLE . ' t, ' . STYLES_THEME_TABLE . ' c, ' . STYLES_IMAGESET_TABLE . ' i';				$sql_where = "s.style_id = $style_id AND t.template_id = s.template_id AND c.theme_id = s.theme_id AND i.imageset_id = s.imageset_id";				$l_prefix = 'STYLE';			break;			case 'template':				$name = 'template_name';				$sql_select = '*';				$sql_from = STYLES_TEMPLATE_TABLE;				$sql_where = "template_id = $style_id";				$l_prefix = 'TEMPLATE';			break;			case 'theme':				$name = 'theme_name';				$sql_select = '*';				$sql_from = STYLES_THEME_TABLE;				$sql_where = "theme_id = $style_id";				$l_prefix = 'THEME';			break;			case 'imageset':				$name = 'imageset_name';				$sql_select = '*';				$sql_from = STYLES_IMAGESET_TABLE;				$sql_where = "imageset_id = $style_id";				$l_prefix = 'IMAGESET';			break;		}		if ($update && !sizeof($error))		{			$sql = "SELECT $sql_select				FROM $sql_from				WHERE $sql_where";			$result = $db->sql_query($sql);			$style_row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$style_row)			{				trigger_error($user->lang['NO_' . $l_prefix] . adm_back_link($this->u_action), E_USER_WARNING);			}			$var_ary = array('style_id', 'style_name', 'style_copyright', 'template_id', 'template_name', 'template_path', 'template_copyright', 'template_storedb', 'template_inherits_id', 'bbcode_bitfield', 'theme_id', 'theme_name', 'theme_path', 'theme_copyright', 'theme_storedb', 'theme_mtime', 'theme_data', 'imageset_id', 'imageset_name', 'imageset_path', 'imageset_copyright');			foreach ($var_ary as $var)			{				if (!isset($style_row[$var]))				{					$style_row[$var] = '';				}			}			$files = $data = array();			if ($mode == 'style')			{				$style_cfg = str_replace(array('{MODE}', '{NAME}', '{COPYRIGHT}', '{VERSION}'), array($mode, $style_row['style_name'], $style_row['style_copyright'], $config['version']), $this->style_cfg);				$style_cfg .= (!$inc_template) ? "\nrequired_template = {$style_row['template_name']}" : '';				$style_cfg .= (!$inc_theme) ? "\nrequired_theme = {$style_row['theme_name']}" : '';				$style_cfg .= (!$inc_imageset) ? "\nrequired_imageset = {$style_row['imageset_name']}" : '';				$data[] = array(					'src'		=> $style_cfg,					'prefix'	=> 'style.cfg'				);				unset($style_cfg);			}			// Export template core code			if ($mode == 'template' || $inc_template)			{				$template_cfg = str_replace(array('{MODE}', '{NAME}', '{COPYRIGHT}', '{VERSION}'), array($mode, $style_row['template_name'], $style_row['template_copyright'], $config['version']), $this->template_cfg);				$use_template_name = '';				// Add the inherit from variable, depending on it's use...				if ($style_row['template_inherits_id'])				{					// Get the template name					$sql = 'SELECT template_name						FROM ' . STYLES_TEMPLATE_TABLE . '						WHERE template_id = ' . (int) $style_row['template_inherits_id'];					$result = $db->sql_query($sql);					$use_template_name = (string) $db->sql_fetchfield('template_name');					$db->sql_freeresult($result);				}				$template_cfg .= ($use_template_name) ? "\ninherit_from = $use_template_name" : "\n#inherit_from = ";				$template_cfg .= "\n\nbbcode_bitfield = {$style_row['bbcode_bitfield']}";				$data[] = array(					'src'		=> $template_cfg,					'prefix'	=> 'template/template.cfg'				);				// This is potentially nasty memory-wise ...				if (!$style_row['template_storedb'])				{					$files[] = array(						'src'		=> "styles/{$style_row['template_path']}/template/",						'prefix-'	=> "styles/{$style_row['template_path']}/",						'prefix+'	=> false,						'exclude'	=> 'template.cfg'					);				}				else				{					$sql = 'SELECT template_filename, template_data						FROM ' . STYLES_TEMPLATE_DATA_TABLE . "						WHERE template_id = {$style_row['template_id']}";					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$data[] = array(							'src' => $row['template_data'],							'prefix' => 'template/' . $row['template_filename']						);					}					$db->sql_freeresult($result);				}				unset($template_cfg);			}			// Export theme core code			if ($mode == 'theme' || $inc_theme)			{				$theme_cfg = str_replace(array('{MODE}', '{NAME}', '{COPYRIGHT}', '{VERSION}'), array($mode, $style_row['theme_name'], $style_row['theme_copyright'], $config['version']), $this->theme_cfg);				// Read old cfg file				$items = $cache->obtain_cfg_items($style_row);				$items = $items['theme'];				if (!isset($items['parse_css_file']))				{					$items['parse_css_file'] = 'off';				}				$theme_cfg = str_replace(array('{PARSE_CSS_FILE}'), array($items['parse_css_file']), $theme_cfg);				$files[] = array(					'src'		=> "styles/{$style_row['theme_path']}/theme/",					'prefix-'	=> "styles/{$style_row['theme_path']}/",					'prefix+'	=> false,					'exclude'	=> ($style_row['theme_storedb']) ? 'stylesheet.css,theme.cfg' : 'theme.cfg'				);				$data[] = array(					'src'		=> $theme_cfg,					'prefix'	=> 'theme/theme.cfg'				);				if ($style_row['theme_storedb'])				{					$data[] = array(						'src'		=> $style_row['theme_data'],						'prefix'	=> 'theme/stylesheet.css'					);				}				unset($items, $theme_cfg);			}			// Export imageset core code			if ($mode == 'imageset' || $inc_imageset)			{				$imageset_cfg = str_replace(array('{MODE}', '{NAME}', '{COPYRIGHT}', '{VERSION}'), array($mode, $style_row['imageset_name'], $style_row['imageset_copyright'], $config['version']), $this->imageset_cfg);				$imageset_main = array();				$sql = 'SELECT image_filename, image_name, image_height, image_width					FROM ' . STYLES_IMAGESET_DATA_TABLE . "					WHERE imageset_id = $style_id						AND image_lang = ''";				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$imageset_main[$row['image_name']] = $row['image_filename'] . ($row['image_height'] ? '*' . $row['image_height']: '') . ($row['image_width'] ? '*' . $row['image_width']: '');				}				$db->sql_freeresult($result);				foreach ($this->imageset_keys as $topic => $key_array)				{					foreach ($key_array as $key)					{						if (isset($imageset_main[$key]))						{							$imageset_cfg .= "\nimg_" . $key . ' = ' . str_replace("styles/{$style_row['imageset_path']}/imageset/", '{PATH}', $imageset_main[$key]);						}					}				}				$files[] = array(					'src'		=> "styles/{$style_row['imageset_path']}/imageset/",					'prefix-'	=> "styles/{$style_row['imageset_path']}/",					'prefix+'	=> false,					'exclude'	=> 'imageset.cfg'				);				$data[] = array(					'src'		=> trim($imageset_cfg),					'prefix'	=> 'imageset/imageset.cfg'				);				end($data);				$imageset_root = "{$phpbb_root_path}styles/{$style_row['imageset_path']}/imageset/";				if ($dh = @opendir($imageset_root))				{					while (($fname = readdir($dh)) !== false)					{						if ($fname[0] != '.' && $fname != 'CVS' && is_dir("$imageset_root$fname"))						{							$files[key($files)]['exclude'] .= ',' . $fname . '/imageset.cfg';						}					}					closedir($dh);				}				$imageset_lang = array();				$sql = 'SELECT image_filename, image_name, image_height, image_width, image_lang					FROM ' . STYLES_IMAGESET_DATA_TABLE . "					WHERE imageset_id = $style_id						AND image_lang <> ''";				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$imageset_lang[$row['image_lang']][$row['image_name']] = $row['image_filename'] . ($row['image_height'] ? '*' . $row['image_height']: '') . ($row['image_width'] ? '*' . $row['image_width']: '');				}				$db->sql_freeresult($result);				foreach ($imageset_lang as $lang => $imageset_localized)				{					$imageset_cfg = str_replace(array('{MODE}', '{NAME}', '{COPYRIGHT}', '{VERSION}'), array($mode, $style_row['imageset_name'], $style_row['imageset_copyright'], $config['version']), $this->imageset_cfg);					foreach ($this->imageset_keys as $topic => $key_array)					{						foreach ($key_array as $key)						{							if (isset($imageset_localized[$key]))							{								$imageset_cfg .= "\nimg_" . $key . ' = ' . str_replace("styles/{$style_row['imageset_path']}/imageset/", '{PATH}', $imageset_localized[$key]);							}						}					}					$data[] = array(						'src'		=> trim($imageset_cfg),						'prefix'	=> 'imageset/' . $lang . '/imageset.cfg'					);				}				unset($imageset_cfg);			}			switch ($format)			{				case 'tar':					$ext = '.tar';				break;				case 'zip':					$ext = '.zip';				break;				case 'tar.gz':					$ext = '.tar.gz';				break;				case 'tar.bz2':					$ext = '.tar.bz2';				break;				default:					$error[] = $user->lang[$l_prefix . '_ERR_ARCHIVE'];			}			if (!sizeof($error))			{				include($phpbb_root_path . 'includes/functions_compress.' . $phpEx);				if ($mode == 'style')				{					$path = preg_replace('#[^\w-]+#', '_', $style_row['style_name']);				}				else				{					$path = $style_row[$mode . '_path'];				}				if ($format == 'zip')				{					$compress = new compress_zip('w', $phpbb_root_path . "store/$path$ext");				}				else				{					$compress = new compress_tar('w', $phpbb_root_path . "store/$path$ext", $ext);				}				if (sizeof($files))				{					foreach ($files as $file_ary)					{						$compress->add_file($file_ary['src'], $file_ary['prefix-'], $file_ary['prefix+'], $file_ary['exclude']);					}				}				if (sizeof($data))				{					foreach ($data as $data_ary)					{						$compress->add_data($data_ary['src'], $data_ary['prefix']);					}				}				$compress->close();				add_log('admin', 'LOG_' . $l_prefix . '_EXPORT', $style_row[$mode . '_name']);				if (!$store)				{					$compress->download($path);					@unlink("{$phpbb_root_path}store/$path$ext");					exit;				}				trigger_error(sprintf($user->lang[$l_prefix . '_EXPORTED'], "store/$path$ext") . adm_back_link($this->u_action));			}		}		$sql = "SELECT {$mode}_id, {$mode}_name			FROM " . (($mode == 'style') ? STYLES_TABLE : $sql_from) . "			WHERE {$mode}_id = $style_id";		$result = $db->sql_query($sql);		$style_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$style_row)		{			trigger_error($user->lang['NO_' . $l_prefix] . adm_back_link($this->u_action), E_USER_WARNING);		}		$this->page_title = $l_prefix . '_EXPORT';		$format_buttons = '';		foreach ($methods as $method)		{			$format_buttons .= '<label><input type="radio"' . ((!$format_buttons) ? ' id="format"' : '') . ' class="radio" value="' . $method . '" name="format"' . (($method == $format) ? ' checked="checked"' : '') . ' /> ' . $method . '</label>';		}		$template->assign_vars(array(			'S_EXPORT'		=> true,			'S_ERROR_MSG'	=> (sizeof($error)) ? true : false,			'S_STYLE'		=> ($mode == 'style') ? true : false,			'L_TITLE'		=> $user->lang[$this->page_title],			'L_EXPLAIN'		=> $user->lang[$this->page_title . '_EXPLAIN'],			'L_NAME'		=> $user->lang[$l_prefix . '_NAME'],			'U_ACTION'		=> $this->u_action . '&amp;action=export&amp;id=' . $style_id,			'U_BACK'		=> $this->u_action,			'ERROR_MSG'			=> (sizeof($error)) ? implode('<br />', $error) : '',			'NAME'				=> $style_row[$mode . '_name'],			'FORMAT_BUTTONS'	=> $format_buttons)		);	}	/**	* Display details	*/	function details($mode, $style_id)	{		global $template, $db, $config, $user, $safe_mode, $cache, $phpbb_root_path;		$update = (isset($_POST['update'])) ? true : false;		$l_type = strtoupper($mode);		$error = array();		$element_ary = array('template' => STYLES_TEMPLATE_TABLE, 'theme' => STYLES_THEME_TABLE, 'imageset' => STYLES_IMAGESET_TABLE);		switch ($mode)		{			case 'style':				$sql_from = STYLES_TABLE;			break;			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;			break;		}		$sql = "SELECT *			FROM $sql_from			WHERE {$mode}_id = $style_id";		$result = $db->sql_query($sql);		$style_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$style_row)		{			trigger_error($user->lang['NO_' . $l_type] . adm_back_link($this->u_action), E_USER_WARNING);		}		$style_row['style_default'] = ($mode == 'style' && $config['default_style'] == $style_id) ? 1 : 0;		if ($update)		{			$name = utf8_normalize_nfc(request_var('name', '', true));			$copyright = utf8_normalize_nfc(request_var('copyright', '', true));			$template_id = request_var('template_id', 0);			$theme_id = request_var('theme_id', 0);			$imageset_id = request_var('imageset_id', 0);			$style_active = request_var('style_active', 0);			$style_default = request_var('style_default', 0);			$store_db = request_var('store_db', 0);			// If the admin selected the style to be the default style, but forgot to activate it... we will do it for him			if ($style_default)			{				$style_active = 1;			}			$sql = "SELECT {$mode}_id, {$mode}_name				FROM $sql_from				WHERE {$mode}_id <> $style_id				AND LOWER({$mode}_name) = '" . $db->sql_escape(strtolower($name)) . "'";			$result = $db->sql_query($sql);			$conflict = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($mode == 'style' && (!$template_id || !$theme_id || !$imageset_id))			{				$error[] = $user->lang['STYLE_ERR_NO_IDS'];			}			if ($mode == 'style' && $style_row['style_active'] && !$style_active && $config['default_style'] == $style_id)			{				$error[] = $user->lang['DEACTIVATE_DEFAULT'];			}			if (!$name || $conflict)			{				$error[] = $user->lang[$l_type . '_ERR_STYLE_NAME'];			}			if ($mode === 'theme' || $mode === 'template')			{				// a rather elaborate check we have to do here once to avoid trouble later				$check = "{$phpbb_root_path}styles/" . $style_row["{$mode}_path"] . (($mode === 'theme') ? '/theme/stylesheet.css' : '/template');				if (($style_row["{$mode}_storedb"] != $store_db) && !$store_db && ($safe_mode || !phpbb_is_writable($check)))				{					$error[] = $user->lang['EDIT_' . strtoupper($mode) . '_STORED_DB'];					$store_db = 1;				}				// themes which have to be parsed have to go into db				if ($mode == 'theme')				{					$cfg = parse_cfg_file("{$phpbb_root_path}styles/" . $style_row["{$mode}_path"] . "/theme/theme.cfg");					if (isset($cfg['parse_css_file']) && $cfg['parse_css_file'] && !$store_db)					{						$error[] = $user->lang['EDIT_THEME_STORE_PARSED'];						$store_db = 1;					}				}			}			if (!sizeof($error))			{				// Check length settings				if (utf8_strlen($name) > 30)				{					$error[] = $user->lang[$l_type . '_ERR_NAME_LONG'];				}				if (utf8_strlen($copyright) > 60)				{					$error[] = $user->lang[$l_type . '_ERR_COPY_LONG'];				}			}		}		if ($update && sizeof($error))		{			$style_row = array_merge($style_row, array(				'template_id'			=> $template_id,				'theme_id'				=> $theme_id,				'imageset_id'			=> $imageset_id,				'style_active'			=> $style_active,				$mode . '_storedb'		=> $store_db,				$mode . '_name'			=> $name,				$mode . '_copyright'	=> $copyright)			);		}		// User has submitted form and no errors have occurred		if ($update && !sizeof($error))		{			$sql_ary = array(				$mode . '_name'			=> $name,				$mode . '_copyright'	=> $copyright			);			switch ($mode)			{				case 'style':					$sql_ary += array(						'template_id'		=> (int) $template_id,						'theme_id'			=> (int) $theme_id,						'imageset_id'		=> (int) $imageset_id,						'style_active'		=> (int) $style_active,					);				break;				case 'imageset':				break;				case 'theme':					if ($style_row['theme_storedb'] != $store_db)					{						$theme_data = '';						if (!$style_row['theme_storedb'])						{							$theme_data = $this->db_theme_data($style_row);						}						else if (!$store_db && !$safe_mode && phpbb_is_writable("{$phpbb_root_path}styles/{$style_row['theme_path']}/theme/stylesheet.css"))						{							$store_db = 1;							$theme_data = $style_row['theme_data'];							if ($fp = @fopen("{$phpbb_root_path}styles/{$style_row['theme_path']}/theme/stylesheet.css", 'wb'))							{								$store_db = (@fwrite($fp, str_replace("styles/{$style_row['theme_path']}/theme/", './', $theme_data))) ? 0 : 1;							}							fclose($fp);						}						$sql_ary += array(							'theme_mtime'	=> ($store_db) ? filemtime("{$phpbb_root_path}styles/{$style_row['theme_path']}/theme/stylesheet.css") : 0,							'theme_storedb'	=> $store_db,							'theme_data'	=> ($store_db) ? $theme_data : '',						);					}				break;				case 'template':					if ($style_row['template_storedb'] != $store_db)					{						if ($super = $this->get_super($mode, $style_row['template_id']))						{							$error[] = (sprintf($user->lang["{$l_type}_INHERITS"], $super['template_name']));							$sql_ary = array();						}						else						{							if (!$store_db && !$safe_mode && phpbb_is_writable("{$phpbb_root_path}styles/{$style_row['template_path']}/template"))							{								$err = $this->store_in_fs('template', $style_row['template_id']);								if ($err)								{									$error += $err;								}							}							else if ($store_db)							{								$this->store_in_db('template', $style_row['template_id']);							}							else							{								// We no longer store within the db, but are also not able to update the file structure								// Since the admin want to switch this, we adhere to his decision. But we also need to remove the cache								$sql = 'DELETE FROM ' . STYLES_TEMPLATE_DATA_TABLE . "									WHERE template_id = $style_id";								$db->sql_query($sql);							}							$sql_ary += array(								'template_storedb'	=> $store_db,							);						}					}				break;			}			if (sizeof($sql_ary))			{				$sql = "UPDATE $sql_from					SET " . $db->sql_build_array('UPDATE', $sql_ary) . "					WHERE {$mode}_id = $style_id";				$db->sql_query($sql);				// Making this the default style?				if ($mode == 'style' && $style_default)				{					set_config('default_style', $style_id);				}			}			$cache->destroy('sql', STYLES_TABLE);			add_log('admin', 'LOG_' . $l_type . '_EDIT_DETAILS', $name);			if (sizeof($error))			{				trigger_error(implode('<br />', $error) . adm_back_link($this->u_action), E_USER_WARNING);			}			else			{				trigger_error($user->lang[$l_type . '_DETAILS_UPDATED'] . adm_back_link($this->u_action));			}		}		if ($mode == 'style')		{			foreach ($element_ary as $element => $table)			{				$sql = "SELECT {$element}_id, {$element}_name					FROM $table					ORDER BY {$element}_id ASC";				$result = $db->sql_query($sql);				${$element . '_options'} = '';				while ($row = $db->sql_fetchrow($result))				{					$selected = ($row[$element . '_id'] == $style_row[$element . '_id']) ? ' selected="selected"' : '';					${$element . '_options'} .= '<option value="' . $row[$element . '_id'] . '"' . $selected . '>' . $row[$element . '_name'] . '</option>';				}				$db->sql_freeresult($result);			}		}		if ($mode == 'template')		{			$super = array();			if (isset($style_row[$mode . '_inherits_id']) && $style_row['template_inherits_id'])			{				$super = $this->get_super($mode, $style_row['template_id']);			}		}		$this->page_title = 'EDIT_DETAILS_' . $l_type;		$template->assign_vars(array(			'S_DETAILS'				=> true,			'S_ERROR_MSG'			=> (sizeof($error)) ? true : false,			'S_STYLE'				=> ($mode == 'style') ? true : false,			'S_TEMPLATE'			=> ($mode == 'template') ? true : false,			'S_THEME'				=> ($mode == 'theme') ? true : false,			'S_IMAGESET'			=> ($mode == 'imageset') ? true : false,			'S_STORE_DB'			=> (isset($style_row[$mode . '_storedb'])) ? $style_row[$mode . '_storedb'] : 0,			'S_STORE_DB_DISABLED'	=> (isset($style_row[$mode . '_inherits_id'])) ? $style_row[$mode . '_inherits_id'] : 0,			'S_STYLE_ACTIVE'		=> (isset($style_row['style_active'])) ? $style_row['style_active'] : 0,			'S_STYLE_DEFAULT'		=> (isset($style_row['style_default'])) ? $style_row['style_default'] : 0,			'S_SUPERTEMPLATE'		=> (isset($style_row[$mode . '_inherits_id']) && $style_row[$mode . '_inherits_id']) ? $super['template_name'] : 0,			'S_TEMPLATE_OPTIONS'	=> ($mode == 'style') ? $template_options : '',			'S_THEME_OPTIONS'		=> ($mode == 'style') ? $theme_options : '',			'S_IMAGESET_OPTIONS'	=> ($mode == 'style') ? $imageset_options : '',			'U_ACTION'		=> $this->u_action . '&amp;action=details&amp;id=' . $style_id,			'U_BACK'		=> $this->u_action,			'L_TITLE'				=> $user->lang[$this->page_title],			'L_EXPLAIN'				=> $user->lang[$this->page_title . '_EXPLAIN'],			'L_NAME'				=> $user->lang[$l_type . '_NAME'],			'L_LOCATION'			=> ($mode == 'template' || $mode == 'theme') ? $user->lang[$l_type . '_LOCATION'] : '',			'L_LOCATION_EXPLAIN'	=> ($mode == 'template' || $mode == 'theme') ? $user->lang[$l_type . '_LOCATION_EXPLAIN'] : '',			'ERROR_MSG'		=> (sizeof($error)) ? implode('<br />', $error) : '',			'NAME'			=> $style_row[$mode . '_name'],			'COPYRIGHT'		=> $style_row[$mode . '_copyright'],			)		);	}	/**	* Load css file contents	*/	function load_css_file($path, $filename)	{		global $phpbb_root_path;		$file = "{$phpbb_root_path}styles/$path/theme/$filename";		if (file_exists($file) && ($content = file_get_contents($file)))		{			$content = trim($content);		}		else		{			$content = '';		}		if (defined('DEBUG'))		{			$content = "/* BEGIN @include $filename */ \n $content \n /* END @include $filename */ \n";		}		return $content;	}	/**	* Returns a string containing the value that should be used for the theme_data column in the theme database table.	* Includes contents of files loaded via @import	*	* @param array $theme_row is an associative array containing the theme's current database entry	* @param mixed $stylesheet can either be the new content for the stylesheet or false to load from the standard file	* @param string $root_path should only be used in case you want to use a different root path than "{$phpbb_root_path}styles/{$theme_row['theme_path']}"	*	* @return string Stylesheet data for theme_data column in the theme table	*/	function db_theme_data($theme_row, $stylesheet = false, $root_path = '')	{		global $phpbb_root_path;		if (!$root_path)		{			$root_path = $phpbb_root_path . 'styles/' . $theme_row['theme_path'];		}		if (!$stylesheet)		{			$stylesheet = '';			if (file_exists($root_path . '/theme/stylesheet.css'))			{				$stylesheet = file_get_contents($root_path . '/theme/stylesheet.css');			}		}		// Match CSS imports		$matches = array();		preg_match_all('/@import url\((["\'])(.*)\1\);/i', $stylesheet, $matches);		// remove commented stylesheets (very simple parser, allows only whitespace		// around an @import statement)		preg_match_all('#/\*\s*@import url\((["\'])(.*)\1\);\s\*/#i', $stylesheet, $commented);		$matches[2] = array_diff($matches[2], $commented[2]);		if (sizeof($matches))		{			foreach ($matches[0] as $idx => $match)			{				if (isset($matches[2][$idx]))				{					$stylesheet = str_replace($match, acp_styles::load_css_file($theme_row['theme_path'], $matches[2][$idx]), $stylesheet);				}			}		}		// adjust paths		return str_replace('./', 'styles/' . $theme_row['theme_path'] . '/theme/', $stylesheet);	}	/**	* Store template files into db	*/	function store_templates($mode, $style_id, $template_path, $filelist)	{		global $phpbb_root_path, $phpEx, $db;		$template_path = $template_path . '/template/';		$includes = array();		foreach ($filelist as $pathfile => $file_ary)		{			foreach ($file_ary as $file)			{				if (!($fp = @fopen("{$phpbb_root_path}styles/$template_path$pathfile$file", 'r')))				{					trigger_error("Could not open {$phpbb_root_path}styles/$template_path$pathfile$file", E_USER_ERROR);				}				$filesize = filesize("{$phpbb_root_path}styles/$template_path$pathfile$file");				if ($filesize)				{					$template_data = fread($fp, $filesize);				}				fclose($fp);				if (!$filesize)				{					// File is empty					continue;				}				if (preg_match_all('#<!-- INCLUDE (.*?\.html) -->#is', $template_data, $matches))				{					foreach ($matches[1] as $match)					{						$includes[trim($match)][] = $file;					}				}			}		}		foreach ($filelist as $pathfile => $file_ary)		{			foreach ($file_ary as $file)			{				// Skip index.				if (strpos($file, 'index.') === 0)				{					continue;				}				// We could do this using extended inserts ... but that could be one				// heck of a lot of data ...				$sql_ary = array(					'template_id'			=> (int) $style_id,					'template_filename'		=> "$pathfile$file",					'template_included'		=> (isset($includes[$file])) ? implode(':', $includes[$file]) . ':' : '',					'template_mtime'		=> (int) filemtime("{$phpbb_root_path}styles/$template_path$pathfile$file"),					'template_data'			=> (string) file_get_contents("{$phpbb_root_path}styles/$template_path$pathfile$file"),				);				if ($mode == 'insert')				{					$sql = 'INSERT INTO ' . STYLES_TEMPLATE_DATA_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);				}				else				{					$sql = 'UPDATE ' . STYLES_TEMPLATE_DATA_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "						WHERE template_id = $style_id							AND template_filename = '" . $db->sql_escape("$pathfile$file") . "'";				}				$db->sql_query($sql);			}		}	}	/**	* Returns an array containing all template filenames for one template that are currently cached.	*	* @param string $template_path contains the name of the template's folder in /styles/	*	* @return array of filenames that exist in /styles/$template_path/template/ (without extension!)	*/	function template_cache_filelist($template_path)	{		global $phpbb_root_path, $phpEx, $user;		$cache_prefix = 'tpl_' . str_replace('_', '-', $template_path);		if (!($dp = @opendir("{$phpbb_root_path}cache")))		{			trigger_error($user->lang['TEMPLATE_ERR_CACHE_READ'] . adm_back_link($this->u_action), E_USER_WARNING);		}		$file_ary = array();		while ($file = readdir($dp))		{			if ($file[0] == '.')			{				continue;			}			if (is_file($phpbb_root_path . 'cache/' . $file) && (strpos($file, $cache_prefix) === 0))			{				$file_ary[] = str_replace('.', '/', preg_replace('#^' . preg_quote($cache_prefix, '#') . '_(.*?)\.html\.' . $phpEx . '$#i', '\1', $file));			}		}		closedir($dp);		return $file_ary;	}	/**	* Destroys cached versions of template files	*	* @param array $template_row contains the template's row in the STYLES_TEMPLATE_TABLE database table	* @param mixed $file_ary is optional and may contain an array of template file names which should be refreshed in the cache.	*	The file names should be the original template file names and not the cache file names.	*/	function clear_template_cache($template_row, $file_ary = false)	{		global $phpbb_root_path, $phpEx, $user;		$cache_prefix = 'tpl_' . str_replace('_', '-', $template_row['template_path']);		if (!$file_ary || !is_array($file_ary))		{			$file_ary = $this->template_cache_filelist($template_row['template_path']);			$log_file_list = $user->lang['ALL_FILES'];		}		else		{			$log_file_list = implode(', ', $file_ary);		}		foreach ($file_ary as $file)		{			$file = str_replace('/', '.', $file);			$file = "{$phpbb_root_path}cache/{$cache_prefix}_$file.html.$phpEx";			if (file_exists($file) && is_file($file))			{				@unlink($file);			}		}		unset($file_ary);		add_log('admin', 'LOG_TEMPLATE_CACHE_CLEARED', $template_row['template_name'], $log_file_list);	}	/**	* Install Style/Template/Theme/Imageset	*/	function install($mode)	{		global $phpbb_root_path, $phpEx, $config, $db, $cache, $user, $template;		$l_type = strtoupper($mode);		$error = $installcfg = $style_row = array();		$root_path = $cfg_file = '';		$element_ary = array('template' => STYLES_TEMPLATE_TABLE, 'theme' => STYLES_THEME_TABLE, 'imageset' => STYLES_IMAGESET_TABLE);		$install_path = request_var('path', '');		$update = (isset($_POST['update'])) ? true : false;		// Installing, obtain cfg file contents		if ($install_path)		{			$root_path = $phpbb_root_path . 'styles/' . $install_path . '/';			$cfg_file = ($mode == 'style') ? "$root_path$mode.cfg" : "$root_path$mode/$mode.cfg";			if (!file_exists($cfg_file))			{				$error[] = $user->lang[$l_type . '_ERR_NOT_' . $l_type];			}			else			{				$installcfg = parse_cfg_file($cfg_file);			}		}		// Installing		if (sizeof($installcfg))		{			$name		= $installcfg['name'];			$copyright	= $installcfg['copyright'];			$version	= $installcfg['version'];			$style_row = array(				$mode . '_id'			=> 0,				$mode . '_name'			=> '',				$mode . '_copyright'	=> ''			);			switch ($mode)			{				case 'style':					$style_row = array(						'style_id'			=> 0,						'style_name'		=> $installcfg['name'],						'style_copyright'	=> $installcfg['copyright']					);					$reqd_template = (isset($installcfg['required_template'])) ? $installcfg['required_template'] : false;					$reqd_theme = (isset($installcfg['required_theme'])) ? $installcfg['required_theme'] : false;					$reqd_imageset = (isset($installcfg['required_imageset'])) ? $installcfg['required_imageset'] : false;					// Check to see if each element is already installed, if it is grab the id					foreach ($element_ary as $element => $table)					{						$style_row = array_merge($style_row, array(							$element . '_id'			=> 0,							$element . '_name'			=> '',							$element . '_copyright'		=> '')						);			 			$this->test_installed($element, $error, (${'reqd_' . $element}) ? $phpbb_root_path . 'styles/' . $reqd_template . '/' : $root_path, ${'reqd_' . $element}, $style_row[$element . '_id'], $style_row[$element . '_name'], $style_row[$element . '_copyright']);						if (!$style_row[$element . '_name'])						{							$style_row[$element . '_name'] = $reqd_template;						}						// Merge other information to installcfg... if present						$cfg_file = $phpbb_root_path . 'styles/' . $install_path . '/' . $element . '/' . $element . '.cfg';						if (file_exists($cfg_file))						{							$cfg_contents = parse_cfg_file($cfg_file);							// Merge only specific things. We may need them later.							foreach (array('inherit_from', 'parse_css_file') as $key)							{								if (!empty($cfg_contents[$key]) && !isset($installcfg[$key]))								{									$installcfg[$key] = $cfg_contents[$key];								}							}						}					}				break;				case 'template':					$this->test_installed('template', $error, $root_path, false, $style_row['template_id'], $style_row['template_name'], $style_row['template_copyright']);				break;				case 'theme':					$this->test_installed('theme', $error, $root_path, false, $style_row['theme_id'], $style_row['theme_name'], $style_row['theme_copyright']);				break;				case 'imageset':					$this->test_installed('imageset', $error, $root_path, false, $style_row['imageset_id'], $style_row['imageset_name'], $style_row['imageset_copyright']);				break;			}		}		else		{			trigger_error($user->lang['NO_' . $l_type] . adm_back_link($this->u_action), E_USER_WARNING);		}		$style_row['store_db'] = request_var('store_db', 0);		$style_row['style_active'] = request_var('style_active', 1);		$style_row['style_default'] = request_var('style_default', 0);		// User has submitted form and no errors have occurred		if ($update && !sizeof($error))		{			if ($mode == 'style')			{				foreach ($element_ary as $element => $table)				{					${$element . '_root_path'} = (${'reqd_' . $element}) ? $phpbb_root_path . 'styles/' . ${'reqd_' . $element} . '/' : false;					${$element . '_path'} = (${'reqd_' . $element}) ? ${'reqd_' . $element} : false;				}				$this->install_style($error, 'install', $root_path, $style_row['style_id'], $style_row['style_name'], $install_path, $style_row['style_copyright'], $style_row['style_active'], $style_row['style_default'], $style_row, $template_root_path, $template_path, $theme_root_path, $theme_path, $imageset_root_path, $imageset_path);			}			else			{				$style_row['store_db'] = $this->install_element($mode, $error, 'install', $root_path, $style_row[$mode . '_id'], $style_row[$mode . '_name'], $install_path, $style_row[$mode . '_copyright'], $style_row['store_db']);			}			if (!sizeof($error))			{				$cache->destroy('sql', STYLES_TABLE);				$message = ($style_row['store_db']) ? '_ADDED_DB' : '_ADDED';				trigger_error($user->lang[$l_type . $message] . adm_back_link($this->u_action));			}		}		$this->page_title = 'INSTALL_' . $l_type;		$template->assign_vars(array(			'S_DETAILS'			=> true,			'S_INSTALL'			=> true,			'S_ERROR_MSG'		=> (sizeof($error)) ? true : false,			'S_LOCATION'		=> (isset($installcfg['inherit_from']) && $installcfg['inherit_from']) ? false : true,			'S_STYLE'			=> ($mode == 'style') ? true : false,			'S_TEMPLATE'		=> ($mode == 'template') ? true : false,			'S_SUPERTEMPLATE'	=> (isset($installcfg['inherit_from'])) ? $installcfg['inherit_from'] : '',			'S_THEME'			=> ($mode == 'theme') ? true : false,			'S_STORE_DB'			=> (isset($style_row[$mode . '_storedb'])) ? $style_row[$mode . '_storedb'] : 0,			'S_STYLE_ACTIVE'		=> (isset($style_row['style_active'])) ? $style_row['style_active'] : 0,			'S_STYLE_DEFAULT'		=> (isset($style_row['style_default'])) ? $style_row['style_default'] : 0,			'U_ACTION'			=> $this->u_action . "&amp;action=install&amp;path=" . urlencode($install_path),			'U_BACK'			=> $this->u_action,			'L_TITLE'				=> $user->lang[$this->page_title],			'L_EXPLAIN'				=> $user->lang[$this->page_title . '_EXPLAIN'],			'L_NAME'				=> $user->lang[$l_type . '_NAME'],			'L_LOCATION'			=> ($mode == 'template' || $mode == 'theme') ? $user->lang[$l_type . '_LOCATION'] : '',			'L_LOCATION_EXPLAIN'	=> ($mode == 'template' || $mode == 'theme') ? $user->lang[$l_type . '_LOCATION_EXPLAIN'] : '',			'ERROR_MSG'			=> (sizeof($error)) ? implode('<br />', $error) : '',			'NAME'				=> $style_row[$mode . '_name'],			'COPYRIGHT'			=> $style_row[$mode . '_copyright'],			'TEMPLATE_NAME'		=> ($mode == 'style') ? $style_row['template_name'] : '',			'THEME_NAME'		=> ($mode == 'style') ? $style_row['theme_name'] : '',			'IMAGESET_NAME'		=> ($mode == 'style') ? $style_row['imageset_name'] : '')		);	}	/**	* Add new style	*/	function add($mode)	{		global $phpbb_root_path, $phpEx, $config, $db, $cache, $user, $template;		$l_type = strtoupper($mode);		$element_ary = array('template' => STYLES_TEMPLATE_TABLE, 'theme' => STYLES_THEME_TABLE, 'imageset' => STYLES_IMAGESET_TABLE);		$error = array();		$style_row = array(			$mode . '_name'			=> utf8_normalize_nfc(request_var('name', '', true)),			$mode . '_copyright'	=> utf8_normalize_nfc(request_var('copyright', '', true)),			'template_id'			=> 0,			'theme_id'				=> 0,			'imageset_id'			=> 0,			'store_db'				=> request_var('store_db', 0),			'style_active'			=> request_var('style_active', 1),			'style_default'			=> request_var('style_default', 0),		);		$basis = request_var('basis', 0);		$update = (isset($_POST['update'])) ? true : false;		if ($basis)		{			switch ($mode)			{				case 'style':					$sql_select = 'template_id, theme_id, imageset_id';					$sql_from = STYLES_TABLE;				break;				case 'template':					$sql_select = 'template_id';					$sql_from = STYLES_TEMPLATE_TABLE;				break;				case 'theme':					$sql_select = 'theme_id';					$sql_from = STYLES_THEME_TABLE;				break;				case 'imageset':					$sql_select = 'imageset_id';					$sql_from = STYLES_IMAGESET_TABLE;				break;			}			$sql = "SELECT $sql_select				FROM $sql_from				WHERE {$mode}_id = $basis";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$row)			{				$error[] = $user->lang['NO_' . $l_type];			}			if (!sizeof($error))			{				$style_row['template_id']	= (isset($row['template_id'])) ? $row['template_id'] : $style_row['template_id'];				$style_row['theme_id']		= (isset($row['theme_id'])) ? $row['theme_id'] : $style_row['theme_id'];				$style_row['imageset_id']	= (isset($row['imageset_id'])) ? $row['imageset_id'] : $style_row['imageset_id'];			}		}		if ($update)		{			$style_row['template_id'] = request_var('template_id', $style_row['template_id']);			$style_row['theme_id'] = request_var('theme_id', $style_row['theme_id']);			$style_row['imageset_id'] = request_var('imageset_id', $style_row['imageset_id']);			if ($mode == 'style' && (!$style_row['template_id'] || !$style_row['theme_id'] || !$style_row['imageset_id']))			{				$error[] = $user->lang['STYLE_ERR_NO_IDS'];			}		}		// User has submitted form and no errors have occurred		if ($update && !sizeof($error))		{			if ($mode == 'style')			{				$style_row['style_id'] = 0;				$this->install_style($error, 'add', '', $style_row['style_id'], $style_row['style_name'], '', $style_row['style_copyright'], $style_row['style_active'], $style_row['style_default'], $style_row);			}			if (!sizeof($error))			{				$cache->destroy('sql', STYLES_TABLE);				$message = ($style_row['store_db']) ? '_ADDED_DB' : '_ADDED';				trigger_error($user->lang[$l_type . $message] . adm_back_link($this->u_action));			}		}		if ($mode == 'style')		{			foreach ($element_ary as $element => $table)			{				$sql = "SELECT {$element}_id, {$element}_name					FROM $table					ORDER BY {$element}_id ASC";				$result = $db->sql_query($sql);				${$element . '_options'} = '';				while ($row = $db->sql_fetchrow($result))				{					$selected = ($row[$element . '_id'] == $style_row[$element . '_id']) ? ' selected="selected"' : '';					${$element . '_options'} .= '<option value="' . $row[$element . '_id'] . '"' . $selected . '>' . $row[$element . '_name'] . '</option>';				}				$db->sql_freeresult($result);			}		}		$this->page_title = 'ADD_' . $l_type;		$template->assign_vars(array(			'S_DETAILS'			=> true,			'S_ADD'				=> true,			'S_ERROR_MSG'		=> (sizeof($error)) ? true : false,			'S_STYLE'			=> ($mode == 'style') ? true : false,			'S_TEMPLATE'		=> ($mode == 'template') ? true : false,			'S_THEME'			=> ($mode == 'theme') ? true : false,			'S_BASIS'			=> ($basis) ? true : false,			'S_STORE_DB'			=> (isset($style_row['storedb'])) ? $style_row['storedb'] : 0,			'S_STYLE_ACTIVE'		=> (isset($style_row['style_active'])) ? $style_row['style_active'] : 0,			'S_STYLE_DEFAULT'		=> (isset($style_row['style_default'])) ? $style_row['style_default'] : 0,			'S_TEMPLATE_OPTIONS'	=> ($mode == 'style') ? $template_options : '',			'S_THEME_OPTIONS'		=> ($mode == 'style') ? $theme_options : '',			'S_IMAGESET_OPTIONS'	=> ($mode == 'style') ? $imageset_options : '',			'U_ACTION'			=> $this->u_action . '&amp;action=add&amp;basis=' . $basis,			'U_BACK'			=> $this->u_action,			'L_TITLE'				=> $user->lang[$this->page_title],			'L_EXPLAIN'				=> $user->lang[$this->page_title . '_EXPLAIN'],			'L_NAME'				=> $user->lang[$l_type . '_NAME'],			'L_LOCATION'			=> ($mode == 'template' || $mode == 'theme') ? $user->lang[$l_type . '_LOCATION'] : '',			'L_LOCATION_EXPLAIN'	=> ($mode == 'template' || $mode == 'theme') ? $user->lang[$l_type . '_LOCATION_EXPLAIN'] : '',			'ERROR_MSG'			=> (sizeof($error)) ? implode('<br />', $error) : '',			'NAME'				=> $style_row[$mode . '_name'],			'COPYRIGHT'			=> $style_row[$mode . '_copyright'])		);	}	/**					$reqd_template = (isset($installcfg['required_template'])) ? $installcfg['required_template'] : false;					$reqd_theme = (isset($installcfg['required_theme'])) ? $installcfg['required_theme'] : false;					$reqd_imageset = (isset($installcfg['required_imageset'])) ? $installcfg['required_imageset'] : false;					// Check to see if each element is already installed, if it is grab the id					foreach ($element_ary as $element => $table)					{						$style_row = array_merge($style_row, array(							$element . '_id'			=> 0,							$element . '_name'			=> '',							$element . '_copyright'		=> '')						);			 			$this->test_installed($element, $error, $root_path, ${'reqd_' . $element}, $style_row[$element . '_id'], $style_row[$element . '_name'], $style_row[$element . '_copyright']);	* Is this element installed? If not, grab its cfg details	*/	function test_installed($element, &$error, $root_path, $reqd_name, &$id, &$name, &$copyright)	{		global $db, $user;		switch ($element)		{			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;			break;		}		$l_element = strtoupper($element);		$chk_name = ($reqd_name !== false) ? $reqd_name : $name;		$sql = "SELECT {$element}_id, {$element}_name			FROM $sql_from			WHERE {$element}_name = '" . $db->sql_escape($chk_name) . "'";		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			$name = $row[$element . '_name'];			$id = $row[$element . '_id'];		}		else		{			if (!($cfg = @file("$root_path$element/$element.cfg")))			{				$error[] = sprintf($user->lang['REQUIRES_' . $l_element], $reqd_name);				return false;			}			$cfg = parse_cfg_file("$root_path$element/$element.cfg", $cfg);			$name = $cfg['name'];			$copyright = $cfg['copyright'];			$id = 0;			unset($cfg);		}		$db->sql_freeresult($result);	}	/**	* Install/Add style	*/	function install_style(&$error, $action, $root_path, &$id, $name, $path, $copyright, $active, $default, &$style_row, $template_root_path = false, $template_path = false, $theme_root_path = false, $theme_path = false, $imageset_root_path = false, $imageset_path = false)	{		global $config, $db, $user;		$element_ary = array('template', 'theme', 'imageset');		if (!$name)		{			$error[] = $user->lang['STYLE_ERR_STYLE_NAME'];		}		// Check length settings		if (utf8_strlen($name) > 30)		{			$error[] = $user->lang['STYLE_ERR_NAME_LONG'];		}		if (utf8_strlen($copyright) > 60)		{			$error[] = $user->lang['STYLE_ERR_COPY_LONG'];		}		// Check if the name already exist		$sql = 'SELECT style_id			FROM ' . STYLES_TABLE . "			WHERE style_name = '" . $db->sql_escape($name) . "'";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			$error[] = $user->lang['STYLE_ERR_NAME_EXIST'];		}		if (sizeof($error))		{			return false;		}		foreach ($element_ary as $element)		{			// Zero id value ... need to install element ... run usual checks			// and do the install if necessary			if (!$style_row[$element . '_id'])			{				$this->install_element($element, $error, $action, (${$element . '_root_path'}) ? ${$element . '_root_path'} : $root_path, $style_row[$element . '_id'], $style_row[$element . '_name'], (${$element . '_path'}) ? ${$element . '_path'} : $path, $style_row[$element . '_copyright']);			}		}		if (!$style_row['template_id'] || !$style_row['theme_id'] || !$style_row['imageset_id'])		{			$error[] = $user->lang['STYLE_ERR_NO_IDS'];		}		if (sizeof($error))		{			return false;		}		$db->sql_transaction('begin');		$sql_ary = array(			'style_name'		=> $name,			'style_copyright'	=> $copyright,			'style_active'		=> (int) $active,			'template_id'		=> (int) $style_row['template_id'],			'theme_id'			=> (int) $style_row['theme_id'],			'imageset_id'		=> (int) $style_row['imageset_id'],		);		$sql = 'INSERT INTO ' . STYLES_TABLE . '			' . $db->sql_build_array('INSERT', $sql_ary);		$db->sql_query($sql);		$id = $db->sql_nextid();		if ($default)		{			$sql = 'UPDATE ' . USERS_TABLE . "				SET user_style = $id				WHERE user_style = " . $config['default_style'];			$db->sql_query($sql);			set_config('default_style', $id);		}		$db->sql_transaction('commit');		add_log('admin', 'LOG_STYLE_ADD', $name);	}	/**	* Install/add an element, doing various checks as we go	*/	function install_element($mode, &$error, $action, $root_path, &$id, $name, $path, $copyright, $store_db = 0)	{		global $phpbb_root_path, $db, $user;		// we parse the cfg here (again)		$cfg_data = parse_cfg_file("$root_path$mode/$mode.cfg");		switch ($mode)		{			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;			break;		}		$l_type = strtoupper($mode);		if (!$name)		{			$error[] = $user->lang[$l_type . '_ERR_STYLE_NAME'];		}		// Check length settings		if (utf8_strlen($name) > 30)		{			$error[] = $user->lang[$l_type . '_ERR_NAME_LONG'];		}		if (utf8_strlen($copyright) > 60)		{			$error[] = $user->lang[$l_type . '_ERR_COPY_LONG'];		}		// Check if the name already exist		$sql = "SELECT {$mode}_id			FROM $sql_from			WHERE {$mode}_name = '" . $db->sql_escape($name) . "'";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			// If it exist, we just use the style on installation			if ($action == 'install')			{				$id = $row[$mode . '_id'];				return false;			}			$error[] = $user->lang[$l_type . '_ERR_NAME_EXIST'];		}		if (isset($cfg_data['inherit_from']) && $cfg_data['inherit_from'])		{			if ($mode === 'template')			{				$select_bf = ', bbcode_bitfield';			}			else			{				$select_bf = '';			}			$sql = "SELECT {$mode}_id, {$mode}_name, {$mode}_path, {$mode}_storedb $select_bf				FROM $sql_from				WHERE {$mode}_name = '" . $db->sql_escape($cfg_data['inherit_from']) . "'					AND {$mode}_inherits_id = 0";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$row)			{				$error[] = sprintf($user->lang[$l_type . '_ERR_REQUIRED_OR_INCOMPLETE'], $cfg_data['inherit_from']);			}			else			{				$inherit_id = $row["{$mode}_id"];				$inherit_path = $row["{$mode}_path"];				$inherit_bf = ($mode === 'template') ? $row["bbcode_bitfield"] : false;				$cfg_data['store_db'] = $row["{$mode}_storedb"];				$store_db = $row["{$mode}_storedb"];			}		}		else		{			$inherit_id = 0;			$inherit_path = '';			$inherit_bf = false;		}		if (sizeof($error))		{			return false;		}		$sql_ary = array(			$mode . '_name'			=> $name,			$mode . '_copyright'	=> $copyright,			$mode . '_path'			=> $path,		);		switch ($mode)		{			case 'template':				// We check if the template author defined a different bitfield				if (!empty($cfg_data['template_bitfield']))				{					$sql_ary['bbcode_bitfield'] = $cfg_data['template_bitfield'];				}				else if ($inherit_bf)				{					$sql_ary['bbcode_bitfield'] = $inherit_bf;				}				else				{					$sql_ary['bbcode_bitfield'] = TEMPLATE_BITFIELD;				}				// We set a pre-defined bitfield here which we may use further in 3.2				$sql_ary += array(					'template_storedb'		=> $store_db,				);				if (isset($cfg_data['inherit_from']) && $cfg_data['inherit_from'])				{					$sql_ary += array(						'template_inherits_id'	=> $inherit_id,						'template_inherit_path' => $inherit_path,					);				}			break;			case 'theme':				// We are only interested in the theme configuration for now				if (isset($cfg_data['parse_css_file']) && $cfg_data['parse_css_file'])				{					$store_db = 1;				}				$sql_ary += array(					'theme_storedb'	=> $store_db,					'theme_data'	=> ($store_db) ? $this->db_theme_data($sql_ary, false, $root_path) : '',					'theme_mtime'	=> (int) filemtime("{$phpbb_root_path}styles/$path/theme/stylesheet.css")				);			break;			// all the heavy lifting is done later			case 'imageset':			break;		}		$db->sql_transaction('begin');		$sql = "INSERT INTO $sql_from			" . $db->sql_build_array('INSERT', $sql_ary);		$db->sql_query($sql);		$id = $db->sql_nextid();		if ($mode == 'template' && $store_db)		{			$filelist = filelist("{$root_path}template", '', 'html');			$this->store_templates('insert', $id, $path, $filelist);		}		else if ($mode == 'imageset')		{			$cfg_data = parse_cfg_file("$root_path$mode/imageset.cfg");			$imageset_definitions = array();			foreach ($this->imageset_keys as $topic => $key_array)			{				$imageset_definitions = array_merge($imageset_definitions, $key_array);			}			foreach ($cfg_data as $key => $value)			{				if (strpos($value, '*') !== false)				{					if (substr($value, -1, 1) === '*')					{						list($image_filename, $image_height) = explode('*', $value);						$image_width = 0;					}					else					{						list($image_filename, $image_height, $image_width) = explode('*', $value);					}				}				else				{					$image_filename = $value;					$image_height = $image_width = 0;				}				if (strpos($key, 'img_') === 0 && $image_filename)				{					$key = substr($key, 4);					if (in_array($key, $imageset_definitions))					{						$sql_ary = array(							'image_name'		=> $key,							'image_filename'	=> str_replace('{PATH}', "styles/$path/imageset/", trim($image_filename)),							'image_height'		=> (int) $image_height,							'image_width'		=> (int) $image_width,							'imageset_id'		=> (int) $id,							'image_lang'		=> '',						);						$db->sql_query('INSERT INTO ' . STYLES_IMAGESET_DATA_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));					}				}			}			unset($cfg_data);			$sql = 'SELECT lang_dir				FROM ' . LANG_TABLE;			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if (@file_exists("$root_path$mode/{$row['lang_dir']}/imageset.cfg"))				{					$cfg_data_imageset_data = parse_cfg_file("$root_path$mode/{$row['lang_dir']}/imageset.cfg");					foreach ($cfg_data_imageset_data as $image_name => $value)					{						if (strpos($value, '*') !== false)						{							if (substr($value, -1, 1) === '*')							{								list($image_filename, $image_height) = explode('*', $value);								$image_width = 0;							}							else							{								list($image_filename, $image_height, $image_width) = explode('*', $value);							}						}						else						{							$image_filename = $value;							$image_height = $image_width = 0;						}						if (strpos($image_name, 'img_') === 0 && $image_filename)						{							$image_name = substr($image_name, 4);							if (in_array($image_name, $imageset_definitions))							{								$sql_ary = array(									'image_name'		=> $image_name,									'image_filename'	=> $image_filename,									'image_height'		=> (int) $image_height,									'image_width'		=> (int) $image_width,									'imageset_id'		=> (int) $id,									'image_lang'		=> $row['lang_dir'],								);								$db->sql_query('INSERT INTO ' . STYLES_IMAGESET_DATA_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));							}						}					}					unset($cfg_data_imageset_data);				}			}			$db->sql_freeresult($result);		}		$db->sql_transaction('commit');		$log = ($store_db) ? 'LOG_' . $l_type . '_ADD_DB' : 'LOG_' . $l_type . '_ADD_FS';		add_log('admin', $log, $name);		// Return store_db in case it had to be altered		return $store_db;	}	/**	* Checks downwards dependencies	*	* @access public	* @param string $mode The element type to check - only template is supported	* @param int $id The template id	* @returns false if no component inherits, array with name, path and id for each subtemplate otherwise	*/	function check_inheritance($mode, $id)	{		global $db;		$l_type = strtoupper($mode);		switch ($mode)		{			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;			break;		}		$sql = "SELECT {$mode}_id, {$mode}_name, {$mode}_path			FROM $sql_from			WHERE {$mode}_inherits_id = " . (int) $id;		$result = $db->sql_query($sql);		$names = array();		while ($row = $db->sql_fetchrow($result))		{			$names[$row["{$mode}_id"]] = array(				"{$mode}_id" => $row["{$mode}_id"],				"{$mode}_name" => $row["{$mode}_name"],				"{$mode}_path" => $row["{$mode}_path"],			);		}		$db->sql_freeresult($result);		if (sizeof($names))		{			return $names;		}		else		{			return false;		}	}	/**	* Checks upwards dependencies	*	* @access public	* @param string $mode The element type to check - only template is supported	* @param int $id The template id	* @returns false if the component does not inherit, array with name, path and id otherwise	*/	function get_super($mode, $id)	{		global $db;		$l_type = strtoupper($mode);		switch ($mode)		{			case 'template':				$sql_from = STYLES_TEMPLATE_TABLE;			break;			case 'theme':				$sql_from = STYLES_THEME_TABLE;			break;			case 'imageset':				$sql_from = STYLES_IMAGESET_TABLE;			break;		}		$sql = "SELECT {$mode}_inherits_id			FROM $sql_from			WHERE {$mode}_id = " . (int) $id;		$result = $db->sql_query_limit($sql, 1);		if ($row = $db->sql_fetchrow($result))		{			$db->sql_freeresult($result);		}		else		{			return false;		}		$super_id = $row["{$mode}_inherits_id"];		$sql = "SELECT {$mode}_id, {$mode}_name, {$mode}_path			FROM $sql_from			WHERE {$mode}_id = " . (int) $super_id;		$result = $db->sql_query_limit($sql, 1);		if ($row = $db->sql_fetchrow($result))		{			$db->sql_freeresult($result);			return $row;		}		return false;	}	/**	* Moves a template set and its subtemplates to the database	*	* @access public	* @param string $mode The component to move - only template is supported	* @param int $id The template id	*/	function store_in_db($mode, $id)	{		global $db, $user;		$error = array();		$l_type = strtoupper($mode);		if ($super = $this->get_super($mode, $id))		{			$error[] = (sprintf($user->lang["{$l_type}_INHERITS"], $super['template_name']));			return $error;		}		$sql = "SELECT {$mode}_id, {$mode}_name, {$mode}_path			FROM " . STYLES_TEMPLATE_TABLE . '			WHERE template_id = ' . (int) $id;		$result = $db->sql_query_limit($sql, 1);		if ($row = $db->sql_fetchrow($result))		{			$db->sql_freeresult($result);			$subs = $this->check_inheritance($mode, $id);			$this->_store_in_db($mode, $id, $row["{$mode}_path"]);			if ($subs && sizeof($subs))			{				foreach ($subs as $sub_id => $sub)				{					if ($err = $this->_store_in_db($mode, $sub["{$mode}_id"], $sub["{$mode}_path"]))					{						$error[] = $err;					}				}			}		}		if (sizeof($error))		{			return $error;		}		return false;	}	/**	* Moves a template set to the database	*	* @access private	* @param string $mode The component to move - only template is supported	* @param int $id The template id	* @param string $path TThe path to the template files	*/	function _store_in_db($mode, $id, $path)	{		global $phpbb_root_path, $db;		$filelist = filelist("{$phpbb_root_path}styles/{$path}/template", '', 'html');		$this->store_templates('insert', $id, $path, $filelist);		// Okay, we do the query here -shouldn't be triggered often.		$sql = 'UPDATE ' . STYLES_TEMPLATE_TABLE . '						SET template_storedb = 1						WHERE template_id = ' . $id;		$db->sql_query($sql);	}	/**	* Moves a template set and its subtemplates to the filesystem	*	* @access public	* @param string $mode The component to move - only template is supported	* @param int $id The template id	*/	function store_in_fs($mode, $id)	{		global $db, $user;		$error = array();		$l_type = strtoupper($mode);		if ($super = $this->get_super($mode, $id))		{			$error[] = (sprintf($user->lang["{$l_type}_INHERITS"], $super['template_name']));			return($error);		}		$sql = "SELECT {$mode}_id, {$mode}_name, {$mode}_path			FROM " . STYLES_TEMPLATE_TABLE . '			WHERE template_id = ' . (int) $id;		$result = $db->sql_query_limit($sql, 1);		if ($row = $db->sql_fetchrow($result))		{			$db->sql_freeresult($result);			if (!sizeof($error))			{				$subs = $this->check_inheritance($mode, $id);				$this->_store_in_fs($mode, $id, $row["{$mode}_path"]);				if ($subs && sizeof($subs))				{					foreach ($subs as $sub_id => $sub)					{						$this->_store_in_fs($mode, $sub["{$mode}_id"], $sub["{$mode}_path"]);					}				}			}			if (sizeof($error))			{				$this->store_in_db($id, $mode);				return $error;			}		}		return false;	}	/**	* Moves a template set to the filesystem	*	* @access private	* @param string $mode The component to move - only template is supported	* @param int $id The template id	* @param string $path The path to the template	*/	function _store_in_fs($mode, $id, $path)	{		global $phpbb_root_path, $db, $user, $safe_mode;		$store_db = 0;		$error = array();		if (!$safe_mode && phpbb_is_writable("{$phpbb_root_path}styles/{$path}/template"))		{			$sql = 'SELECT *					FROM ' . STYLES_TEMPLATE_DATA_TABLE . "					WHERE template_id = $id";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if (!($fp = @fopen("{$phpbb_root_path}styles/{$path}/template/" . $row['template_filename'], 'wb')))				{					$store_db = 1;					$error[] = $user->lang['EDIT_TEMPLATE_STORED_DB'];					break;				}				fwrite($fp, $row['template_data']);				fclose($fp);			}			$db->sql_freeresult($result);			if (!$store_db)			{				$sql = 'DELETE FROM ' . STYLES_TEMPLATE_DATA_TABLE . "						WHERE template_id = $id";				$db->sql_query($sql);			}		}		if (sizeof($error))		{			return $error;		}		$sql = 'UPDATE ' . STYLES_TEMPLATE_TABLE . '				SET template_storedb = 0				WHERE template_id = ' . $id;		$db->sql_query($sql);		return false;	}}?>
