<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** mcp_reports* Handling the reports queue* @package mcp*/class mcp_pm_reports{	var $p_master;	var $u_action;	function mcp_pm_reports(&$p_master)	{		$this->p_master = &$p_master;	}	function main($id, $mode)	{		global $auth, $db, $user, $template, $cache;		global $config, $phpbb_root_path, $phpEx, $action;		include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);		include_once($phpbb_root_path . 'includes/functions_privmsgs.' . $phpEx);		$start = request_var('start', 0);		$this->page_title = 'MCP_PM_REPORTS';		switch ($action)		{			case 'close':			case 'delete':				include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);				$report_id_list = request_var('report_id_list', array(0));				if (!sizeof($report_id_list))				{					trigger_error('NO_REPORT_SELECTED');				}				if (!function_exists('close_report'))				{					include($phpbb_root_path . 'includes/mcp/mcp_reports.' . $phpEx);				}				close_report($report_id_list, $mode, $action, true);			break;		}		switch ($mode)		{			case 'pm_report_details':				$user->add_lang(array('posting', 'viewforum', 'viewtopic', 'ucp'));				$report_id = request_var('r', 0);				$sql = 'SELECT r.pm_id, r.user_id, r.report_id, r.report_closed, report_time, r.report_text, rr.reason_title, rr.reason_description, u.username, u.username_clean, u.user_colour					FROM ' . REPORTS_TABLE . ' r, ' . REPORTS_REASONS_TABLE . ' rr, ' . USERS_TABLE . ' u					WHERE r.report_id = ' . $report_id . '						AND rr.reason_id = r.reason_id						AND r.user_id = u.user_id						AND r.post_id = 0					ORDER BY report_closed ASC';				$result = $db->sql_query_limit($sql, 1);				$report = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$report_id || !$report)				{					trigger_error('NO_REPORT');				}				$pm_id = $report['pm_id'];				$report_id = $report['report_id'];				$pm_info = get_pm_data(array($pm_id));				if (!sizeof($pm_info))				{					trigger_error('NO_REPORT_SELECTED');				}				$pm_info = $pm_info[$pm_id];				write_pm_addresses(array('to' => $pm_info['to_address'], 'bcc' => $pm_info['bcc_address']), (int) $pm_info['author_id']);				$reason = array('title' => $report['reason_title'], 'description' => $report['reason_description']);				if (isset($user->lang['report_reasons']['TITLE'][strtoupper($reason['title'])]) && isset($user->lang['report_reasons']['DESCRIPTION'][strtoupper($reason['title'])]))				{					$reason['description'] = $user->lang['report_reasons']['DESCRIPTION'][strtoupper($reason['title'])];					$reason['title'] = $user->lang['report_reasons']['TITLE'][strtoupper($reason['title'])];				}				// Process message, leave it uncensored				$message = $pm_info['message_text'];				if ($pm_info['bbcode_bitfield'])				{					include_once($phpbb_root_path . 'includes/bbcode.' . $phpEx);					$bbcode = new bbcode($pm_info['bbcode_bitfield']);					$bbcode->bbcode_second_pass($message, $pm_info['bbcode_uid'], $pm_info['bbcode_bitfield']);				}				$message = bbcode_nl2br($message);				$message = smiley_text($message);				if ($pm_info['message_attachment'] && $auth->acl_get('u_pm_download'))				{					$sql = 'SELECT *						FROM ' . ATTACHMENTS_TABLE . '						WHERE post_msg_id = ' . $pm_id . '							AND in_message = 1						ORDER BY filetime DESC';					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$attachments[] = $row;					}					$db->sql_freeresult($result);					if (sizeof($attachments))					{						$update_count = array();						parse_attachments(0, $message, $attachments, $update_count);					}					// Display not already displayed Attachments for this post, we already parsed them. ;)					if (!empty($attachments))					{						$template->assign_var('S_HAS_ATTACHMENTS', true);						foreach ($attachments as $attachment)						{							$template->assign_block_vars('attachment', array(								'DISPLAY_ATTACHMENT'	=> $attachment)							);						}					}				}				$template->assign_vars(array(					'S_MCP_REPORT'			=> true,					'S_PM'					=> true,					'S_CLOSE_ACTION'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=pm_reports&amp;mode=pm_report_details&amp;r=' . $report_id),					'S_CAN_VIEWIP'			=> $auth->acl_getf_global('m_info'),					'S_POST_REPORTED'		=> $pm_info['message_reported'],					'S_USER_NOTES'			=> true,					'U_MCP_REPORT'				=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=pm_reports&amp;mode=pm_report_details&amp;r=' . $report_id),					'U_MCP_REPORTER_NOTES'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $report['user_id']),					'U_MCP_USER_NOTES'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $pm_info['author_id']),					'U_MCP_WARN_REPORTER'		=> ($auth->acl_get('m_warn')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=warn&amp;mode=warn_user&amp;u=' . $report['user_id']) : '',					'U_MCP_WARN_USER'			=> ($auth->acl_get('m_warn')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=warn&amp;mode=warn_user&amp;u=' . $pm_info['author_id']) : '',										'EDIT_IMG'				=> $user->img('icon_post_edit', $user->lang['EDIT_POST']),					'MINI_POST_IMG'			=> $user->img('icon_post_target', 'POST'),					'RETURN_REPORTS'			=> sprintf($user->lang['RETURN_REPORTS'], '<a href="' . append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=pm_reports' . (($pm_info['message_reported']) ? '&amp;mode=pm_reports' : '&amp;mode=pm_reports_closed') . '&amp;start=' . $start) . '">', '</a>'),					'REPORTED_IMG'				=> $user->img('icon_topic_reported', $user->lang['POST_REPORTED']),					'REPORT_DATE'				=> $user->format_date($report['report_time']),					'REPORT_ID'					=> $report_id,					'REPORT_REASON_TITLE'		=> $reason['title'],					'REPORT_REASON_DESCRIPTION'	=> $reason['description'],					'REPORT_TEXT'				=> $report['report_text'],					'POST_AUTHOR_FULL'		=> get_username_string('full', $pm_info['author_id'], $pm_info['username'], $pm_info['user_colour']),					'POST_AUTHOR_COLOUR'	=> get_username_string('colour', $pm_info['author_id'], $pm_info['username'], $pm_info['user_colour']),					'POST_AUTHOR'			=> get_username_string('username', $pm_info['author_id'], $pm_info['username'], $pm_info['user_colour']),					'U_POST_AUTHOR'			=> get_username_string('profile', $pm_info['author_id'], $pm_info['username'], $pm_info['user_colour']),					'REPORTER_FULL'				=> get_username_string('full', $report['user_id'], $report['username'], $report['user_colour']),					'REPORTER_COLOUR'			=> get_username_string('colour', $report['user_id'], $report['username'], $report['user_colour']),					'REPORTER_NAME'				=> get_username_string('username', $report['user_id'], $report['username'], $report['user_colour']),					'U_VIEW_REPORTER_PROFILE'	=> get_username_string('profile', $report['user_id'], $report['username'], $report['user_colour']),					'POST_PREVIEW'			=> $message,					'POST_SUBJECT'			=> ($pm_info['message_subject']) ? $pm_info['message_subject'] : $user->lang['NO_SUBJECT'],					'POST_DATE'				=> $user->format_date($pm_info['message_time']),					'POST_IP'				=> $pm_info['author_ip'],					'POST_IPADDR'			=> ($auth->acl_getf_global('m_info') && request_var('lookup', '')) ? @gethostbyaddr($pm_info['author_ip']) : '',					'POST_ID'				=> $pm_info['msg_id'],					'U_LOOKUP_IP'			=> ($auth->acl_getf_global('m_info')) ? $this->u_action . '&amp;r=' . $report_id . '&amp;pm=' . $pm_id . '&amp;lookup=' . $pm_info['author_ip'] . '#ip' : '',				));				$this->tpl_name = 'mcp_post';			break;			case 'pm_reports':			case 'pm_reports_closed':				$user->add_lang(array('ucp'));				$sort_days = $total = 0;				$sort_key = $sort_dir = '';				$sort_by_sql = $sort_order_sql = array();				mcp_sorting($mode, $sort_days, $sort_key, $sort_dir, $sort_by_sql, $sort_order_sql, $total);				$limit_time_sql = ($sort_days) ? 'AND r.report_time >= ' . (time() - ($sort_days * 86400)) : '';				if ($mode == 'pm_reports')				{					$report_state = 'p.message_reported = 1 AND r.report_closed = 0';				}				else				{					$report_state = 'r.report_closed = 1';				}				$sql = 'SELECT r.report_id					FROM ' . PRIVMSGS_TABLE . ' p, ' . REPORTS_TABLE . ' r ' . (($sort_order_sql[0] == 'u') ? ', ' . USERS_TABLE . ' u' : '') . (($sort_order_sql[0] == 'r') ? ', ' . USERS_TABLE . ' ru' : '') . "					WHERE $report_state						AND r.pm_id = p.msg_id						" . (($sort_order_sql[0] == 'u') ? 'AND u.user_id = p.author_id' : '') . '						' . (($sort_order_sql[0] == 'r') ? 'AND ru.user_id = r.user_id' : '') . "						AND r.post_id = 0						$limit_time_sql					ORDER BY $sort_order_sql";				$result = $db->sql_query_limit($sql, $config['topics_per_page'], $start);				$i = 0;				$report_ids = array();				while ($row = $db->sql_fetchrow($result))				{					$report_ids[] = $row['report_id'];					$row_num[$row['report_id']] = $i++;				}				$db->sql_freeresult($result);				if (sizeof($report_ids))				{					$sql = 'SELECT p.*, u.username, u.username_clean, u.user_colour, r.user_id as reporter_id, ru.username as reporter_name, ru.user_colour as reporter_colour, r.report_time, r.report_id						FROM ' . REPORTS_TABLE . ' r, ' . PRIVMSGS_TABLE . ' p, ' . USERS_TABLE . ' u, ' . USERS_TABLE . ' ru						WHERE ' . $db->sql_in_set('r.report_id', $report_ids) . "							AND r.pm_id = p.msg_id							AND p.author_id = u.user_id							AND ru.user_id = r.user_id						ORDER BY $sort_order_sql";					$result = $db->sql_query($sql);					$pm_list = $pm_by_id = array();					while ($row = $db->sql_fetchrow($result))					{						$pm_by_id[(int) $row['msg_id']] = $row;						$pm_list[] = (int) $row['msg_id'];					}					$db->sql_freeresult($result);					if (sizeof($pm_list))					{						$address_list = get_recipient_strings($pm_by_id);						foreach ($pm_list as $message_id)						{							$row = $pm_by_id[$message_id];							$template->assign_block_vars('postrow', array(								'U_VIEW_DETAILS'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=pm_reports&amp;mode=pm_report_details&amp;r={$row['report_id']}"),								'PM_AUTHOR_FULL'		=> get_username_string('full', $row['author_id'], $row['username'], $row['user_colour']),								'PM_AUTHOR_COLOUR'		=> get_username_string('colour', $row['author_id'], $row['username'], $row['user_colour']),								'PM_AUTHOR'				=> get_username_string('username', $row['author_id'], $row['username'], $row['user_colour']),								'U_PM_AUTHOR'			=> get_username_string('profile', $row['author_id'], $row['username'], $row['user_colour']),								'REPORTER_FULL'			=> get_username_string('full', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),								'REPORTER_COLOUR'		=> get_username_string('colour', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),								'REPORTER'				=> get_username_string('username', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),								'U_REPORTER'			=> get_username_string('profile', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),								'PM_SUBJECT'			=> ($row['message_subject']) ? $row['message_subject'] : $user->lang['NO_SUBJECT'],								'PM_TIME'				=> $user->format_date($row['message_time']),								'REPORT_ID'				=> $row['report_id'],								'REPORT_TIME'			=> $user->format_date($row['report_time']),								'RECIPIENTS'			=> implode(', ', $address_list[$row['msg_id']]),							));						}					}				}				// Now display the page				$template->assign_vars(array(					'L_EXPLAIN'				=> ($mode == 'pm_reports') ? $user->lang['MCP_PM_REPORTS_OPEN_EXPLAIN'] : $user->lang['MCP_PM_REPORTS_CLOSED_EXPLAIN'],					'L_TITLE'				=> ($mode == 'pm_reports') ? $user->lang['MCP_PM_REPORTS_OPEN'] : $user->lang['MCP_PM_REPORTS_CLOSED'],										'S_PM'					=> true,					'S_MCP_ACTION'			=> $this->u_action,					'S_CLOSED'				=> ($mode == 'pm_reports_closed') ? true : false,					'PAGINATION'			=> generate_pagination($this->u_action . "&amp;st=$sort_days&amp;sk=$sort_key&amp;sd=$sort_dir", $total, $config['topics_per_page'], $start),					'PAGE_NUMBER'			=> on_page($total, $config['topics_per_page'], $start),					'TOTAL'					=> $total,					'TOTAL_REPORTS'			=> ($total == 1) ? $user->lang['LIST_REPORT'] : sprintf($user->lang['LIST_REPORTS'], $total),										)				);				$this->tpl_name = 'mcp_reports';			break;		}	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ucp_remind* Sending password reminders* @package ucp*/class ucp_remind{	var $u_action;	function main($id, $mode)	{		global $config, $phpbb_root_path, $phpEx;		global $db, $user, $auth, $template;		$username	= request_var('username', '', true);		$email		= strtolower(request_var('email', ''));		$submit		= (isset($_POST['submit'])) ? true : false;		if ($submit)		{			$sql = 'SELECT user_id, username, user_permissions, user_email, user_jabber, user_notify_type, user_type, user_lang, user_inactive_reason				FROM ' . USERS_TABLE . "				WHERE user_email_hash = '" . $db->sql_escape(phpbb_email_hash($email)) . "'					AND username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";			$result = $db->sql_query($sql);			$user_row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$user_row)			{				trigger_error('NO_EMAIL_USER');			}			if ($user_row['user_type'] == USER_IGNORE)			{				trigger_error('NO_USER');			}			if ($user_row['user_type'] == USER_INACTIVE)			{				if ($user_row['user_inactive_reason'] == INACTIVE_MANUAL)				{					trigger_error('ACCOUNT_DEACTIVATED');				}				else				{					trigger_error('ACCOUNT_NOT_ACTIVATED');				}			}			// Check users permissions			$auth2 = new auth();			$auth2->acl($user_row);			if (!$auth2->acl_get('u_chgpasswd'))			{				trigger_error('NO_AUTH_PASSWORD_REMINDER');			}			$server_url = generate_board_url();			// Make password at least 8 characters long, make it longer if admin wants to.			// gen_rand_string() however has a limit of 12 or 13.			$user_password = gen_rand_string_friendly(max(8, mt_rand((int) $config['min_pass_chars'], (int) $config['max_pass_chars'])));			// For the activation key a random length between 6 and 10 will do.			$user_actkey = gen_rand_string(mt_rand(6, 10));			$sql = 'UPDATE ' . USERS_TABLE . "				SET user_newpasswd = '" . $db->sql_escape(phpbb_hash($user_password)) . "', user_actkey = '" . $db->sql_escape($user_actkey) . "'				WHERE user_id = " . $user_row['user_id'];			$db->sql_query($sql);			include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);			$messenger = new messenger(false);			$messenger->template('user_activate_passwd', $user_row['user_lang']);			$messenger->to($user_row['user_email'], $user_row['username']);			$messenger->im($user_row['user_jabber'], $user_row['username']);			$messenger->assign_vars(array(				'USERNAME'		=> htmlspecialchars_decode($user_row['username']),				'PASSWORD'		=> htmlspecialchars_decode($user_password),				'U_ACTIVATE'	=> "$server_url/ucp.$phpEx?mode=activate&u={$user_row['user_id']}&k=$user_actkey")			);			$messenger->send($user_row['user_notify_type']);			meta_refresh(3, append_sid("{$phpbb_root_path}index.$phpEx"));			$message = $user->lang['PASSWORD_UPDATED'] . '<br /><br />' . sprintf($user->lang['RETURN_INDEX'], '<a href="' . append_sid("{$phpbb_root_path}index.$phpEx") . '">', '</a>');			trigger_error($message);		}		$template->assign_vars(array(			'USERNAME'			=> $username,			'EMAIL'				=> $email,			'S_PROFILE_ACTION'	=> append_sid($phpbb_root_path . 'ucp.' . $phpEx, 'mode=sendpassword'))		);		$this->tpl_name = 'ucp_remind';		$this->page_title = 'UCP_REMIND';	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License** @todo add cron intervals to server settings? (database_gc, queue_interval, session_gc, search_gc, cache_gc, warnings_gc)*//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_board{	var $u_action;	var $new_config = array();	function main($id, $mode)	{		global $db, $user, $auth, $template;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		global $cache;		$user->add_lang('acp/board');		$action	= request_var('action', '');		$submit = (isset($_POST['submit']) || isset($_POST['allow_quick_reply_enable'])) ? true : false;		$form_key = 'acp_board';		add_form_key($form_key);		/**		*	Validation types are:		*		string, int, bool,		*		script_path (absolute path in url - beginning with / and no trailing slash),		*		rpath (relative), rwpath (realtive, writable), path (relative path, but able to escape the root), wpath (writable)		*/		switch ($mode)		{			case 'settings':				$display_vars = array(					'title'	=> 'ACP_BOARD_SETTINGS',					'vars'	=> array(						'legend1'				=> 'ACP_BOARD_SETTINGS',						'sitename'				=> array('lang' => 'SITE_NAME',				'validate' => 'string',	'type' => 'text:40:255', 'explain' => false),						'site_desc'				=> array('lang' => 'SITE_DESC',				'validate' => 'string',	'type' => 'text:40:255', 'explain' => false),						'board_disable'			=> array('lang' => 'DISABLE_BOARD',			'validate' => 'bool',	'type' => 'custom', 'method' => 'board_disable', 'explain' => true),						'board_disable_msg'		=> false,						'default_lang'			=> array('lang' => 'DEFAULT_LANGUAGE',		'validate' => 'lang',	'type' => 'select', 'function' => 'language_select', 'params' => array('{CONFIG_VALUE}'), 'explain' => false),						'default_dateformat'	=> array('lang' => 'DEFAULT_DATE_FORMAT',	'validate' => 'string',	'type' => 'custom', 'method' => 'dateformat_select', 'explain' => true),						'board_timezone'		=> array('lang' => 'SYSTEM_TIMEZONE',		'validate' => 'string',	'type' => 'select', 'function' => 'tz_select', 'params' => array('{CONFIG_VALUE}', 1), 'explain' => true),						'board_dst'				=> array('lang' => 'SYSTEM_DST',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'default_style'			=> array('lang' => 'DEFAULT_STYLE',			'validate' => 'int',	'type' => 'select', 'function' => 'style_select', 'params' => array('{CONFIG_VALUE}', false), 'explain' => false),						'override_user_style'	=> array('lang' => 'OVERRIDE_STYLE',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'legend2'				=> 'WARNINGS',						'warnings_expire_days'	=> array('lang' => 'WARNINGS_EXPIRE',		'validate' => 'int',	'type' => 'text:3:4', 'explain' => true, 'append' => ' ' . $user->lang['DAYS']),						'legend3'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'features':				$display_vars = array(					'title'	=> 'ACP_BOARD_FEATURES',					'vars'	=> array(						'legend1'				=> 'ACP_BOARD_FEATURES',						'allow_privmsg'			=> array('lang' => 'BOARD_PM',				'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_topic_notify'	=> array('lang' => 'ALLOW_TOPIC_NOTIFY',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_forum_notify'	=> array('lang' => 'ALLOW_FORUM_NOTIFY',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_namechange'		=> array('lang' => 'ALLOW_NAME_CHANGE',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_attachments'		=> array('lang' => 'ALLOW_ATTACHMENTS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_pm_attach'		=> array('lang' => 'ALLOW_PM_ATTACHMENTS',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_pm_report'		=> array('lang' => 'ALLOW_PM_REPORT',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_bbcode'			=> array('lang' => 'ALLOW_BBCODE',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_smilies'			=> array('lang' => 'ALLOW_SMILIES',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig'				=> array('lang' => 'ALLOW_SIG',				'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_nocensors'		=> array('lang' => 'ALLOW_NO_CENSORS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_bookmarks'		=> array('lang' => 'ALLOW_BOOKMARKS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_birthdays'		=> array('lang' => 'ALLOW_BIRTHDAYS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_quick_reply'		=> array('lang' => 'ALLOW_QUICK_REPLY',		'validate' => 'bool',	'type' => 'custom', 'method' => 'quick_reply', 'explain' => true),						'legend2'				=> 'ACP_LOAD_SETTINGS',						'load_birthdays'		=> array('lang' => 'YES_BIRTHDAYS',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_moderators'		=> array('lang' => 'YES_MODERATORS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_jumpbox'			=> array('lang' => 'YES_JUMPBOX',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_cpf_memberlist'	=> array('lang' => 'LOAD_CPF_MEMBERLIST',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_cpf_viewprofile'	=> array('lang' => 'LOAD_CPF_VIEWPROFILE',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_cpf_viewtopic'	=> array('lang' => 'LOAD_CPF_VIEWTOPIC',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'legend3'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'avatar':				$display_vars = array(					'title'	=> 'ACP_AVATAR_SETTINGS',					'vars'	=> array(						'legend1'				=> 'ACP_AVATAR_SETTINGS',						'avatar_min_width'		=> array('lang' => 'MIN_AVATAR_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'avatar_min_height'		=> array('lang' => 'MIN_AVATAR_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'avatar_max_width'		=> array('lang' => 'MAX_AVATAR_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'avatar_max_height'		=> array('lang' => 'MAX_AVATAR_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'allow_avatar'			=> array('lang' => 'ALLOW_AVATARS',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_avatar_local'	=> array('lang' => 'ALLOW_LOCAL',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_avatar_remote'	=> array('lang' => 'ALLOW_REMOTE',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_avatar_upload'	=> array('lang' => 'ALLOW_UPLOAD',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_avatar_remote_upload'=> array('lang' => 'ALLOW_REMOTE_UPLOAD', 'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'avatar_filesize'		=> array('lang' => 'MAX_FILESIZE',			'validate' => 'int:0',	'type' => 'text:4:10', 'explain' => true, 'append' => ' ' . $user->lang['BYTES']),						'avatar_min'			=> array('lang' => 'MIN_AVATAR_SIZE',		'validate' => 'int:0',	'type' => 'dimension:3:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'avatar_max'			=> array('lang' => 'MAX_AVATAR_SIZE',		'validate' => 'int:0',	'type' => 'dimension:3:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'avatar_path'			=> array('lang' => 'AVATAR_STORAGE_PATH',	'validate' => 'rwpath',	'type' => 'text:20:255', 'explain' => true),						'avatar_gallery_path'	=> array('lang' => 'AVATAR_GALLERY_PATH',	'validate' => 'rpath',	'type' => 'text:20:255', 'explain' => true)					)				);			break;			case 'message':				$display_vars = array(					'title'	=> 'ACP_MESSAGE_SETTINGS',					'lang'	=> 'ucp',					'vars'	=> array(						'legend1'				=> 'GENERAL_SETTINGS',						'allow_privmsg'			=> array('lang' => 'BOARD_PM',				'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'pm_max_boxes'			=> array('lang' => 'BOXES_MAX',				'validate' => 'int:0',	'type' => 'text:4:4', 'explain' => true),						'pm_max_msgs'			=> array('lang' => 'BOXES_LIMIT',			'validate' => 'int:0',	'type' => 'text:4:4', 'explain' => true),						'full_folder_action'	=> array('lang' => 'FULL_FOLDER_ACTION',	'validate' => 'int',	'type' => 'select', 'method' => 'full_folder_select', 'explain' => true),						'pm_edit_time'			=> array('lang' => 'PM_EDIT_TIME',			'validate' => 'int:0',	'type' => 'text:5:5', 'explain' => true, 'append' => ' ' . $user->lang['MINUTES']),						'pm_max_recipients'		=> array('lang' => 'PM_MAX_RECIPIENTS',		'validate' => 'int:0',	'type' => 'text:5:5', 'explain' => true),						'legend2'				=> 'GENERAL_OPTIONS',						'allow_mass_pm'			=> array('lang' => 'ALLOW_MASS_PM',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'auth_bbcode_pm'		=> array('lang' => 'ALLOW_BBCODE_PM',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'auth_smilies_pm'		=> array('lang' => 'ALLOW_SMILIES_PM',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_pm_attach'		=> array('lang' => 'ALLOW_PM_ATTACHMENTS',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig_pm'			=> array('lang' => 'ALLOW_SIG_PM',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'print_pm'				=> array('lang' => 'ALLOW_PRINT_PM',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'forward_pm'			=> array('lang' => 'ALLOW_FORWARD_PM',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'auth_img_pm'			=> array('lang' => 'ALLOW_IMG_PM',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'auth_flash_pm'			=> array('lang' => 'ALLOW_FLASH_PM',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'enable_pm_icons'		=> array('lang' => 'ENABLE_PM_ICONS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'legend3'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'post':				$display_vars = array(					'title'	=> 'ACP_POST_SETTINGS',					'vars'	=> array(						'legend1'				=> 'GENERAL_OPTIONS',						'allow_topic_notify'	=> array('lang' => 'ALLOW_TOPIC_NOTIFY',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_forum_notify'	=> array('lang' => 'ALLOW_FORUM_NOTIFY',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_bbcode'			=> array('lang' => 'ALLOW_BBCODE',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_post_flash'		=> array('lang' => 'ALLOW_POST_FLASH',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_smilies'			=> array('lang' => 'ALLOW_SMILIES',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_post_links'		=> array('lang' => 'ALLOW_POST_LINKS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_nocensors'		=> array('lang' => 'ALLOW_NO_CENSORS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_bookmarks'		=> array('lang' => 'ALLOW_BOOKMARKS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'enable_post_confirm'	=> array('lang' => 'VISUAL_CONFIRM_POST',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_quick_reply'		=> array('lang' => 'ALLOW_QUICK_REPLY',		'validate' => 'bool',	'type' => 'custom', 'method' => 'quick_reply', 'explain' => true),						'legend2'				=> 'POSTING',						'bump_type'				=> false,						'edit_time'				=> array('lang' => 'EDIT_TIME',				'validate' => 'int:0',		'type' => 'text:5:5', 'explain' => true, 'append' => ' ' . $user->lang['MINUTES']),						'delete_time'			=> array('lang' => 'DELETE_TIME',			'validate' => 'int:0',		'type' => 'text:5:5', 'explain' => true, 'append' => ' ' . $user->lang['MINUTES']),						'display_last_edited'	=> array('lang' => 'DISPLAY_LAST_EDITED',	'validate' => 'bool',		'type' => 'radio:yes_no', 'explain' => true),						'flood_interval'		=> array('lang' => 'FLOOD_INTERVAL',		'validate' => 'int:0',		'type' => 'text:3:10', 'explain' => true, 'append' => ' ' . $user->lang['SECONDS']),						'bump_interval'			=> array('lang' => 'BUMP_INTERVAL',			'validate' => 'int:0',		'type' => 'custom', 'method' => 'bump_interval', 'explain' => true),						'topics_per_page'		=> array('lang' => 'TOPICS_PER_PAGE',		'validate' => 'int:1',		'type' => 'text:3:4', 'explain' => false),						'posts_per_page'		=> array('lang' => 'POSTS_PER_PAGE',		'validate' => 'int:1',		'type' => 'text:3:4', 'explain' => false),						'smilies_per_page'		=> array('lang' => 'SMILIES_PER_PAGE',		'validate' => 'int:1',		'type' => 'text:3:4', 'explain' => false),						'hot_threshold'			=> array('lang' => 'HOT_THRESHOLD',			'validate' => 'int:0',		'type' => 'text:3:4', 'explain' => true),						'max_poll_options'		=> array('lang' => 'MAX_POLL_OPTIONS',		'validate' => 'int:2:127',	'type' => 'text:4:4', 'explain' => false),						'max_post_chars'		=> array('lang' => 'CHAR_LIMIT',			'validate' => 'int:0',		'type' => 'text:4:6', 'explain' => true),						'min_post_chars'		=> array('lang' => 'MIN_CHAR_LIMIT',		'validate' => 'int:1',		'type' => 'text:4:6', 'explain' => true),						'max_post_smilies'		=> array('lang' => 'SMILIES_LIMIT',			'validate' => 'int:0',		'type' => 'text:4:4', 'explain' => true),						'max_post_urls'			=> array('lang' => 'MAX_POST_URLS',			'validate' => 'int:0',		'type' => 'text:5:4', 'explain' => true),						'max_post_font_size'	=> array('lang' => 'MAX_POST_FONT_SIZE',	'validate' => 'int:0',		'type' => 'text:5:4', 'explain' => true, 'append' => ' %'),						'max_quote_depth'		=> array('lang' => 'QUOTE_DEPTH_LIMIT',		'validate' => 'int:0',		'type' => 'text:4:4', 'explain' => true),						'max_post_img_width'	=> array('lang' => 'MAX_POST_IMG_WIDTH',	'validate' => 'int:0',		'type' => 'text:5:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'max_post_img_height'	=> array('lang' => 'MAX_POST_IMG_HEIGHT',	'validate' => 'int:0',		'type' => 'text:5:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'legend3'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'signature':				$display_vars = array(					'title'	=> 'ACP_SIGNATURE_SETTINGS',					'vars'	=> array(						'legend1'				=> 'GENERAL_OPTIONS',						'allow_sig'				=> array('lang' => 'ALLOW_SIG',				'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig_bbcode'		=> array('lang' => 'ALLOW_SIG_BBCODE',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig_img'			=> array('lang' => 'ALLOW_SIG_IMG',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig_flash'		=> array('lang' => 'ALLOW_SIG_FLASH',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig_smilies'		=> array('lang' => 'ALLOW_SIG_SMILIES',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig_links'		=> array('lang' => 'ALLOW_SIG_LINKS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'legend2'				=> 'GENERAL_SETTINGS',						'max_sig_chars'			=> array('lang' => 'MAX_SIG_LENGTH',		'validate' => 'int:0',	'type' => 'text:5:4', 'explain' => true),						'max_sig_urls'			=> array('lang' => 'MAX_SIG_URLS',			'validate' => 'int:0',	'type' => 'text:5:4', 'explain' => true),						'max_sig_font_size'		=> array('lang' => 'MAX_SIG_FONT_SIZE',		'validate' => 'int:0',	'type' => 'text:5:4', 'explain' => true, 'append' => ' %'),						'max_sig_smilies'		=> array('lang' => 'MAX_SIG_SMILIES',		'validate' => 'int:0',	'type' => 'text:5:4', 'explain' => true),						'max_sig_img_width'		=> array('lang' => 'MAX_SIG_IMG_WIDTH',		'validate' => 'int:0',	'type' => 'text:5:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'max_sig_img_height'	=> array('lang' => 'MAX_SIG_IMG_HEIGHT',	'validate' => 'int:0',	'type' => 'text:5:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'legend3'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'registration':				$display_vars = array(					'title'	=> 'ACP_REGISTER_SETTINGS',					'vars'	=> array(						'legend1'				=> 'GENERAL_SETTINGS',						'max_name_chars'		=> array('lang' => 'USERNAME_LENGTH', 'validate' => 'int:8:180', 'type' => false, 'method' => false, 'explain' => false,),						'max_pass_chars'		=> array('lang' => 'PASSWORD_LENGTH', 'validate' => 'int:8:255', 'type' => false, 'method' => false, 'explain' => false,),						'require_activation'	=> array('lang' => 'ACC_ACTIVATION',	'validate' => 'int',	'type' => 'custom', 'method' => 'select_acc_activation', 'explain' => true),						'new_member_post_limit'	=> array('lang' => 'NEW_MEMBER_POST_LIMIT', 'validate' => 'int:0:255', 'type' => 'text:4:4', 'explain' => true, 'append' => ' ' . $user->lang['POSTS']),						'new_member_group_default'=> array('lang' => 'NEW_MEMBER_GROUP_DEFAULT', 'validate' => 'bool', 'type' => 'radio:yes_no', 'explain' => true),						'min_name_chars'		=> array('lang' => 'USERNAME_LENGTH',	'validate' => 'int:1',	'type' => 'custom:5:180', 'method' => 'username_length', 'explain' => true),						'min_pass_chars'		=> array('lang' => 'PASSWORD_LENGTH',	'validate' => 'int:1',	'type' => 'custom', 'method' => 'password_length', 'explain' => true),						'allow_name_chars'		=> array('lang' => 'USERNAME_CHARS',	'validate' => 'string',	'type' => 'select', 'method' => 'select_username_chars', 'explain' => true),						'pass_complex'			=> array('lang' => 'PASSWORD_TYPE',		'validate' => 'string',	'type' => 'select', 'method' => 'select_password_chars', 'explain' => true),						'chg_passforce'			=> array('lang' => 'FORCE_PASS_CHANGE',	'validate' => 'int:0',	'type' => 'text:3:3', 'explain' => true, 'append' => ' ' . $user->lang['DAYS']),						'legend2'				=> 'GENERAL_OPTIONS',						'allow_namechange'		=> array('lang' => 'ALLOW_NAME_CHANGE',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_emailreuse'		=> array('lang' => 'ALLOW_EMAIL_REUSE',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'enable_confirm'		=> array('lang' => 'VISUAL_CONFIRM_REG',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'max_login_attempts'	=> array('lang' => 'MAX_LOGIN_ATTEMPTS',	'validate' => 'int:0',	'type' => 'text:3:3', 'explain' => true),						'max_reg_attempts'		=> array('lang' => 'REG_LIMIT',				'validate' => 'int:0',	'type' => 'text:4:4', 'explain' => true),						'legend3'			=> 'COPPA',						'coppa_enable'		=> array('lang' => 'ENABLE_COPPA',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'coppa_mail'		=> array('lang' => 'COPPA_MAIL',		'validate' => 'string',	'type' => 'textarea:5:40', 'explain' => true),						'coppa_fax'			=> array('lang' => 'COPPA_FAX',			'validate' => 'string',	'type' => 'text:25:100', 'explain' => false),						'legend4'			=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'feed':				$display_vars = array(					'title'	=> 'ACP_FEED_MANAGEMENT',					'vars'	=> array(						'legend1'					=> 'ACP_FEED_GENERAL',						'feed_enable'				=> array('lang' => 'ACP_FEED_ENABLE',				'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'feed_item_statistics'		=> array('lang' => 'ACP_FEED_ITEM_STATISTICS',		'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true),						'feed_http_auth'			=> array('lang' => 'ACP_FEED_HTTP_AUTH',			'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true),						'legend2'					=> 'ACP_FEED_POST_BASED',						'feed_limit_post'			=> array('lang' => 'ACP_FEED_LIMIT',				'validate' => 'int:5',	'type' => 'text:3:4',				'explain' => true),						'feed_overall'				=> array('lang' => 'ACP_FEED_OVERALL',				'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'feed_forum'				=> array('lang' => 'ACP_FEED_FORUM',				'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'feed_topic'				=> array('lang' => 'ACP_FEED_TOPIC',				'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'legend3'					=> 'ACP_FEED_TOPIC_BASED',						'feed_limit_topic'			=> array('lang' => 'ACP_FEED_LIMIT',				'validate' => 'int:5',	'type' => 'text:3:4',				'explain' => true),						'feed_topics_new'			=> array('lang' => 'ACP_FEED_TOPICS_NEW',			'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'feed_topics_active'		=> array('lang' => 'ACP_FEED_TOPICS_ACTIVE',		'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'feed_news_id'				=> array('lang' => 'ACP_FEED_NEWS',					'validate' => 'string',	'type' => 'custom', 'method' => 'select_news_forums', 'explain' => true),						'legend4'					=> 'ACP_FEED_SETTINGS_OTHER',						'feed_overall_forums'		=> array('lang'	=> 'ACP_FEED_OVERALL_FORUMS',		'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'feed_exclude_id'			=> array('lang' => 'ACP_FEED_EXCLUDE_ID',			'validate' => 'string',	'type' => 'custom', 'method' => 'select_exclude_forums', 'explain' => true),					)				);			break;			case 'cookie':				$display_vars = array(					'title'	=> 'ACP_COOKIE_SETTINGS',					'vars'	=> array(						'legend1'		=> 'ACP_COOKIE_SETTINGS',						'cookie_domain'	=> array('lang' => 'COOKIE_DOMAIN',	'validate' => 'string',	'type' => 'text::255', 'explain' => false),						'cookie_name'	=> array('lang' => 'COOKIE_NAME',	'validate' => 'string',	'type' => 'text::16', 'explain' => false),						'cookie_path'	=> array('lang'	=> 'COOKIE_PATH',	'validate' => 'string',	'type' => 'text::255', 'explain' => false),						'cookie_secure'	=> array('lang' => 'COOKIE_SECURE',	'validate' => 'bool',	'type' => 'radio:disabled_enabled', 'explain' => true)					)				);			break;			case 'load':				$display_vars = array(					'title'	=> 'ACP_LOAD_SETTINGS',					'vars'	=> array(						'legend1'			=> 'GENERAL_SETTINGS',						'limit_load'		=> array('lang' => 'LIMIT_LOAD',		'validate' => 'string',	'type' => 'text:4:4', 'explain' => true),						'session_length'	=> array('lang' => 'SESSION_LENGTH',	'validate' => 'int:60',	'type' => 'text:5:10', 'explain' => true, 'append' => ' ' . $user->lang['SECONDS']),						'active_sessions'	=> array('lang' => 'LIMIT_SESSIONS',	'validate' => 'int:0',	'type' => 'text:4:4', 'explain' => true),						'load_online_time'	=> array('lang' => 'ONLINE_LENGTH',		'validate' => 'int:0',	'type' => 'text:4:3', 'explain' => true, 'append' => ' ' . $user->lang['MINUTES']),						'legend2'				=> 'GENERAL_OPTIONS',						'load_db_track'			=> array('lang' => 'YES_POST_MARKING',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_db_lastread'		=> array('lang' => 'YES_READ_MARKING',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_anon_lastread'	=> array('lang' => 'YES_ANON_READ_MARKING',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_online'			=> array('lang' => 'YES_ONLINE',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_online_guests'	=> array('lang' => 'YES_ONLINE_GUESTS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_onlinetrack'		=> array('lang' => 'YES_ONLINE_TRACK',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_birthdays'		=> array('lang' => 'YES_BIRTHDAYS',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_unreads_search'	=> array('lang' => 'YES_UNREAD_SEARCH',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_moderators'		=> array('lang' => 'YES_MODERATORS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_jumpbox'			=> array('lang' => 'YES_JUMPBOX',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_user_activity'	=> array('lang' => 'LOAD_USER_ACTIVITY',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_tplcompile'		=> array('lang' => 'RECOMPILE_STYLES',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'legend3'				=> 'CUSTOM_PROFILE_FIELDS',						'load_cpf_memberlist'	=> array('lang' => 'LOAD_CPF_MEMBERLIST',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_cpf_viewprofile'	=> array('lang' => 'LOAD_CPF_VIEWPROFILE',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_cpf_viewtopic'	=> array('lang' => 'LOAD_CPF_VIEWTOPIC',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'legend4'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'auth':				$display_vars = array(					'title'	=> 'ACP_AUTH_SETTINGS',					'vars'	=> array(						'legend1'		=> 'ACP_AUTH_SETTINGS',						'auth_method'	=> array('lang' => 'AUTH_METHOD',	'validate' => 'string',	'type' => 'select', 'method' => 'select_auth_method', 'explain' => false)					)				);			break;			case 'server':				$display_vars = array(					'title'	=> 'ACP_SERVER_SETTINGS',					'vars'	=> array(						'legend1'				=> 'ACP_SERVER_SETTINGS',						'gzip_compress'			=> array('lang' => 'ENABLE_GZIP',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'legend2'				=> 'PATH_SETTINGS',						'smilies_path'			=> array('lang' => 'SMILIES_PATH',		'validate' => 'rpath',	'type' => 'text:20:255', 'explain' => true),						'icons_path'			=> array('lang' => 'ICONS_PATH',		'validate' => 'rpath',	'type' => 'text:20:255', 'explain' => true),						'upload_icons_path'		=> array('lang' => 'UPLOAD_ICONS_PATH',	'validate' => 'rpath',	'type' => 'text:20:255', 'explain' => true),						'ranks_path'			=> array('lang' => 'RANKS_PATH',		'validate' => 'rpath',	'type' => 'text:20:255', 'explain' => true),						'legend3'				=> 'SERVER_URL_SETTINGS',						'force_server_vars'		=> array('lang' => 'FORCE_SERVER_VARS',	'validate' => 'bool',			'type' => 'radio:yes_no', 'explain' => true),						'server_protocol'		=> array('lang' => 'SERVER_PROTOCOL',	'validate' => 'string',			'type' => 'text:10:10', 'explain' => true),						'server_name'			=> array('lang' => 'SERVER_NAME',		'validate' => 'string',			'type' => 'text:40:255', 'explain' => true),						'server_port'			=> array('lang' => 'SERVER_PORT',		'validate' => 'int:0',			'type' => 'text:5:5', 'explain' => true),						'script_path'			=> array('lang' => 'SCRIPT_PATH',		'validate' => 'script_path',	'type' => 'text::255', 'explain' => true),						'legend4'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'security':				$display_vars = array(					'title'	=> 'ACP_SECURITY_SETTINGS',					'vars'	=> array(						'legend1'				=> 'ACP_SECURITY_SETTINGS',						'allow_autologin'		=> array('lang' => 'ALLOW_AUTOLOGIN',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'max_autologin_time'	=> array('lang' => 'AUTOLOGIN_LENGTH',		'validate' => 'int:0',	'type' => 'text:5:5', 'explain' => true, 'append' => ' ' . $user->lang['DAYS']),						'ip_check'				=> array('lang' => 'IP_VALID',				'validate' => 'int',	'type' => 'custom', 'method' => 'select_ip_check', 'explain' => true),						'browser_check'			=> array('lang' => 'BROWSER_VALID',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'forwarded_for_check'	=> array('lang' => 'FORWARDED_FOR_VALID',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'referer_validation'	=> array('lang' => 'REFERER_VALID',		'validate' => 'int:0:3','type' => 'custom', 'method' => 'select_ref_check', 'explain' => true),						'check_dnsbl'			=> array('lang' => 'CHECK_DNSBL',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'email_check_mx'		=> array('lang' => 'EMAIL_CHECK_MX',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'pass_complex'			=> array('lang' => 'PASSWORD_TYPE',			'validate' => 'string',	'type' => 'select', 'method' => 'select_password_chars', 'explain' => true),						'chg_passforce'			=> array('lang' => 'FORCE_PASS_CHANGE',		'validate' => 'int:0',	'type' => 'text:3:3', 'explain' => true, 'append' => ' ' . $user->lang['DAYS']),						'max_login_attempts'	=> array('lang' => 'MAX_LOGIN_ATTEMPTS',	'validate' => 'int:0',	'type' => 'text:3:3', 'explain' => true),						'ip_login_limit_max'	=> array('lang' => 'IP_LOGIN_LIMIT_MAX',	'validate' => 'int:0',	'type' => 'text:3:3', 'explain' => true),						'ip_login_limit_time'	=> array('lang' => 'IP_LOGIN_LIMIT_TIME',	'validate' => 'int:0',	'type' => 'text:5:5', 'explain' => true, 'append' => ' ' . $user->lang['SECONDS']),						'ip_login_limit_use_forwarded'	=> array('lang' => 'IP_LOGIN_LIMIT_USE_FORWARDED',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'tpl_allow_php'			=> array('lang' => 'TPL_ALLOW_PHP',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'form_token_lifetime'	=> array('lang' => 'FORM_TIME_MAX',			'validate' => 'int:-1',	'type' => 'text:5:5', 'explain' => true, 'append' => ' ' . $user->lang['SECONDS']),						'form_token_sid_guests'	=> array('lang' => 'FORM_SID_GUESTS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),					)				);			break;			case 'email':				$display_vars = array(					'title'	=> 'ACP_EMAIL_SETTINGS',					'vars'	=> array(						'legend1'				=> 'GENERAL_SETTINGS',						'email_enable'			=> array('lang' => 'ENABLE_EMAIL',			'validate' => 'bool',	'type' => 'radio:enabled_disabled', 'explain' => true),						'board_email_form'		=> array('lang' => 'BOARD_EMAIL_FORM',		'validate' => 'bool',	'type' => 'radio:enabled_disabled', 'explain' => true),						'email_function_name'	=> array('lang' => 'EMAIL_FUNCTION_NAME',	'validate' => 'string',	'type' => 'text:20:50', 'explain' => true),						'email_package_size'	=> array('lang' => 'EMAIL_PACKAGE_SIZE',	'validate' => 'int:0',	'type' => 'text:5:5', 'explain' => true),						'board_contact'			=> array('lang' => 'CONTACT_EMAIL',			'validate' => 'string',	'type' => 'text:25:100', 'explain' => true),						'board_email'			=> array('lang' => 'ADMIN_EMAIL',			'validate' => 'string',	'type' => 'text:25:100', 'explain' => true),						'board_email_sig'		=> array('lang' => 'EMAIL_SIG',				'validate' => 'string',	'type' => 'textarea:5:30', 'explain' => true),						'board_hide_emails'		=> array('lang' => 'BOARD_HIDE_EMAILS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'legend2'				=> 'SMTP_SETTINGS',						'smtp_delivery'			=> array('lang' => 'USE_SMTP',				'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'smtp_host'				=> array('lang' => 'SMTP_SERVER',			'validate' => 'string',	'type' => 'text:25:50', 'explain' => false),						'smtp_port'				=> array('lang' => 'SMTP_PORT',				'validate' => 'int:0',	'type' => 'text:4:5', 'explain' => true),						'smtp_auth_method'		=> array('lang' => 'SMTP_AUTH_METHOD',		'validate' => 'string',	'type' => 'select', 'method' => 'mail_auth_select', 'explain' => true),						'smtp_username'			=> array('lang' => 'SMTP_USERNAME',			'validate' => 'string',	'type' => 'text:25:255', 'explain' => true),						'smtp_password'			=> array('lang' => 'SMTP_PASSWORD',			'validate' => 'string',	'type' => 'password:25:255', 'explain' => true),						'legend3'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			default:				trigger_error('NO_MODE', E_USER_ERROR);			break;		}		if (isset($display_vars['lang']))		{			$user->add_lang($display_vars['lang']);		}		$this->new_config = $config;		$cfg_array = (isset($_REQUEST['config'])) ? utf8_normalize_nfc(request_var('config', array('' => ''), true)) : $this->new_config;		$error = array();		// We validate the complete config if whished		validate_config_vars($display_vars['vars'], $cfg_array, $error);		if ($submit && !check_form_key($form_key))		{			$error[] = $user->lang['FORM_INVALID'];		}		// Do not write values if there is an error		if (sizeof($error))		{			$submit = false;		}		// We go through the display_vars to make sure no one is trying to set variables he/she is not allowed to...		foreach ($display_vars['vars'] as $config_name => $null)		{			if (!isset($cfg_array[$config_name]) || strpos($config_name, 'legend') !== false)			{				continue;			}			if ($config_name == 'auth_method' || $config_name == 'feed_news_id' || $config_name == 'feed_exclude_id')			{				continue;			}			$this->new_config[$config_name] = $config_value = $cfg_array[$config_name];			if ($config_name == 'email_function_name')			{				$this->new_config['email_function_name'] = trim(str_replace(array('(', ')'), array('', ''), $this->new_config['email_function_name']));				$this->new_config['email_function_name'] = (empty($this->new_config['email_function_name']) || !function_exists($this->new_config['email_function_name'])) ? 'mail' : $this->new_config['email_function_name'];				$config_value = $this->new_config['email_function_name'];			}			if ($submit)			{				set_config($config_name, $config_value);				if ($config_name == 'allow_quick_reply' && isset($_POST['allow_quick_reply_enable']))				{					enable_bitfield_column_flag(FORUMS_TABLE, 'forum_flags', log(FORUM_FLAG_QUICK_REPLY, 2));				}			}		}		// Store news and exclude ids		if ($mode == 'feed' && $submit)		{			$cache->destroy('_feed_news_forum_ids');			$cache->destroy('_feed_excluded_forum_ids');			$this->store_feed_forums(FORUM_OPTION_FEED_NEWS, 'feed_news_id');			$this->store_feed_forums(FORUM_OPTION_FEED_EXCLUDE, 'feed_exclude_id');		}		if ($mode == 'auth')		{			// Retrieve a list of auth plugins and check their config values			$auth_plugins = array();			$dp = @opendir($phpbb_root_path . 'includes/auth');			if ($dp)			{				while (($file = readdir($dp)) !== false)				{					if (preg_match('#^auth_(.*?)\.' . $phpEx . '$#', $file))					{						$auth_plugins[] = basename(preg_replace('#^auth_(.*?)\.' . $phpEx . '$#', '\1', $file));					}				}				closedir($dp);				sort($auth_plugins);			}			$updated_auth_settings = false;			$old_auth_config = array();			foreach ($auth_plugins as $method)			{				if ($method && file_exists($phpbb_root_path . 'includes/auth/auth_' . $method . '.' . $phpEx))				{					include_once($phpbb_root_path . 'includes/auth/auth_' . $method . '.' . $phpEx);					$method = 'acp_' . $method;					if (function_exists($method))					{						if ($fields = $method($this->new_config))						{							// Check if we need to create config fields for this plugin and save config when submit was pressed							foreach ($fields['config'] as $field)							{								if (!isset($config[$field]))								{									set_config($field, '');								}								if (!isset($cfg_array[$field]) || strpos($field, 'legend') !== false)								{									continue;								}								$old_auth_config[$field] = $this->new_config[$field];								$config_value = $cfg_array[$field];								$this->new_config[$field] = $config_value;								if ($submit)								{									$updated_auth_settings = true;									set_config($field, $config_value);								}							}						}						unset($fields);					}				}			}			if ($submit && (($cfg_array['auth_method'] != $this->new_config['auth_method']) || $updated_auth_settings))			{				$method = basename($cfg_array['auth_method']);				if ($method && in_array($method, $auth_plugins))				{					include_once($phpbb_root_path . 'includes/auth/auth_' . $method . '.' . $phpEx);					$method = 'init_' . $method;					if (function_exists($method))					{						if ($error = $method())						{							foreach ($old_auth_config as $config_name => $config_value)							{								set_config($config_name, $config_value);							}							trigger_error($error . adm_back_link($this->u_action), E_USER_WARNING);						}					}					set_config('auth_method', basename($cfg_array['auth_method']));				}				else				{					trigger_error('NO_AUTH_PLUGIN', E_USER_ERROR);				}			}		}		if ($submit)		{			add_log('admin', 'LOG_CONFIG_' . strtoupper($mode));			trigger_error($user->lang['CONFIG_UPDATED'] . adm_back_link($this->u_action));		}		$this->tpl_name = 'acp_board';		$this->page_title = $display_vars['title'];		$template->assign_vars(array(			'L_TITLE'			=> $user->lang[$display_vars['title']],			'L_TITLE_EXPLAIN'	=> $user->lang[$display_vars['title'] . '_EXPLAIN'],			'S_ERROR'			=> (sizeof($error)) ? true : false,			'ERROR_MSG'			=> implode('<br />', $error),			'U_ACTION'			=> $this->u_action)		);		// Output relevant page		foreach ($display_vars['vars'] as $config_key => $vars)		{			if (!is_array($vars) && strpos($config_key, 'legend') === false)			{				continue;			}			if (strpos($config_key, 'legend') !== false)			{				$template->assign_block_vars('options', array(					'S_LEGEND'		=> true,					'LEGEND'		=> (isset($user->lang[$vars])) ? $user->lang[$vars] : $vars)				);				continue;			}			$type = explode(':', $vars['type']);			$l_explain = '';			if ($vars['explain'] && isset($vars['lang_explain']))			{				$l_explain = (isset($user->lang[$vars['lang_explain']])) ? $user->lang[$vars['lang_explain']] : $vars['lang_explain'];			}			else if ($vars['explain'])			{				$l_explain = (isset($user->lang[$vars['lang'] . '_EXPLAIN'])) ? $user->lang[$vars['lang'] . '_EXPLAIN'] : '';			}			$content = build_cfg_template($type, $config_key, $this->new_config, $config_key, $vars);			if (empty($content))			{				continue;			}			$template->assign_block_vars('options', array(				'KEY'			=> $config_key,				'TITLE'			=> (isset($user->lang[$vars['lang']])) ? $user->lang[$vars['lang']] : $vars['lang'],				'S_EXPLAIN'		=> $vars['explain'],				'TITLE_EXPLAIN'	=> $l_explain,				'CONTENT'		=> $content,				)			);			unset($display_vars['vars'][$config_key]);		}		if ($mode == 'auth')		{			$template->assign_var('S_AUTH', true);			foreach ($auth_plugins as $method)			{				if ($method && file_exists($phpbb_root_path . 'includes/auth/auth_' . $method . '.' . $phpEx))				{					$method = 'acp_' . $method;					if (function_exists($method))					{						$fields = $method($this->new_config);						if ($fields['tpl'])						{							$template->assign_block_vars('auth_tpl', array(								'TPL'	=> $fields['tpl'])							);						}						unset($fields);					}				}			}		}	}	/**	* Select auth method	*/	function select_auth_method($selected_method, $key = '')	{		global $phpbb_root_path, $phpEx;		$auth_plugins = array();		$dp = @opendir($phpbb_root_path . 'includes/auth');		if (!$dp)		{			return '';		}		while (($file = readdir($dp)) !== false)		{			if (preg_match('#^auth_(.*?)\.' . $phpEx . '$#', $file))			{				$auth_plugins[] = preg_replace('#^auth_(.*?)\.' . $phpEx . '$#', '\1', $file);			}		}		closedir($dp);		sort($auth_plugins);		$auth_select = '';		foreach ($auth_plugins as $method)		{			$selected = ($selected_method == $method) ? ' selected="selected"' : '';			$auth_select .= '<option value="' . $method . '"' . $selected . '>' . ucfirst($method) . '</option>';		}		return $auth_select;	}	/**	* Select mail authentication method	*/	function mail_auth_select($selected_method, $key = '')	{		global $user;		$auth_methods = array('PLAIN', 'LOGIN', 'CRAM-MD5', 'DIGEST-MD5', 'POP-BEFORE-SMTP');		$s_smtp_auth_options = '';		foreach ($auth_methods as $method)		{			$s_smtp_auth_options .= '<option value="' . $method . '"' . (($selected_method == $method) ? ' selected="selected"' : '') . '>' . $user->lang['SMTP_' . str_replace('-', '_', $method)] . '</option>';		}		return $s_smtp_auth_options;	}	/**	* Select full folder action	*/	function full_folder_select($value, $key = '')	{		global $user;		return '<option value="1"' . (($value == 1) ? ' selected="selected"' : '') . '>' . $user->lang['DELETE_OLDEST_MESSAGES'] . '</option><option value="2"' . (($value == 2) ? ' selected="selected"' : '') . '>' . $user->lang['HOLD_NEW_MESSAGES_SHORT'] . '</option>';	}	/**	* Select ip validation	*/	function select_ip_check($value, $key = '')	{		$radio_ary = array(4 => 'ALL', 3 => 'CLASS_C', 2 => 'CLASS_B', 0 => 'NO_IP_VALIDATION');		return h_radio('config[ip_check]', $radio_ary, $value, $key);	}	/**	* Select referer validation	*/	function select_ref_check($value, $key = '')	{		$radio_ary = array(REFERER_VALIDATE_PATH => 'REF_PATH', REFERER_VALIDATE_HOST => 'REF_HOST', REFERER_VALIDATE_NONE => 'NO_REF_VALIDATION');		return h_radio('config[referer_validation]', $radio_ary, $value, $key);	}	/**	* Select account activation method	*/	function select_acc_activation($value, $key = '')	{		global $user, $config;		$radio_ary = array(			USER_ACTIVATION_DISABLE => 'ACC_DISABLE',			USER_ACTIVATION_NONE => 'ACC_NONE',		);		if ($config['email_enable'])		{			$radio_ary[USER_ACTIVATION_SELF] = 'ACC_USER';			$radio_ary[USER_ACTIVATION_ADMIN] = 'ACC_ADMIN';		}		$radio_text = h_radio('config[require_activation]', $radio_ary, $value, 'require_activation', $key, '<br />');		return $radio_text;	}	/**	* Maximum/Minimum username length	*/	function username_length($value, $key = '')	{		global $user;		return '<input id="' . $key . '" type="text" size="3" maxlength="3" name="config[min_name_chars]" value="' . $value . '" /> ' . $user->lang['MIN_CHARS'] . '&nbsp;&nbsp;<input type="text" size="3" maxlength="3" name="config[max_name_chars]" value="' . $this->new_config['max_name_chars'] . '" /> ' . $user->lang['MAX_CHARS'];	}	/**	* Allowed chars in usernames	*/	function select_username_chars($selected_value, $key)	{		global $user;		$user_char_ary = array('USERNAME_CHARS_ANY', 'USERNAME_ALPHA_ONLY', 'USERNAME_ALPHA_SPACERS', 'USERNAME_LETTER_NUM', 'USERNAME_LETTER_NUM_SPACERS', 'USERNAME_ASCII');		$user_char_options = '';		foreach ($user_char_ary as $user_type)		{			$selected = ($selected_value == $user_type) ? ' selected="selected"' : '';			$user_char_options .= '<option value="' . $user_type . '"' . $selected . '>' . $user->lang[$user_type] . '</option>';		}		return $user_char_options;	}	/**	* Maximum/Minimum password length	*/	function password_length($value, $key)	{		global $user;		return '<input id="' . $key . '" type="text" size="3" maxlength="3" name="config[min_pass_chars]" value="' . $value . '" /> ' . $user->lang['MIN_CHARS'] . '&nbsp;&nbsp;<input type="text" size="3" maxlength="3" name="config[max_pass_chars]" value="' . $this->new_config['max_pass_chars'] . '" /> ' . $user->lang['MAX_CHARS'];	}	/**	* Required chars in passwords	*/	function select_password_chars($selected_value, $key)	{		global $user;		$pass_type_ary = array('PASS_TYPE_ANY', 'PASS_TYPE_CASE', 'PASS_TYPE_ALPHA', 'PASS_TYPE_SYMBOL');		$pass_char_options = '';		foreach ($pass_type_ary as $pass_type)		{			$selected = ($selected_value == $pass_type) ? ' selected="selected"' : '';			$pass_char_options .= '<option value="' . $pass_type . '"' . $selected . '>' . $user->lang[$pass_type] . '</option>';		}		return $pass_char_options;	}	/**	* Select bump interval	*/	function bump_interval($value, $key)	{		global $user;		$s_bump_type = '';		$types = array('m' => 'MINUTES', 'h' => 'HOURS', 'd' => 'DAYS');		foreach ($types as $type => $lang)		{			$selected = ($this->new_config['bump_type'] == $type) ? ' selected="selected"' : '';			$s_bump_type .= '<option value="' . $type . '"' . $selected . '>' . $user->lang[$lang] . '</option>';		}		return '<input id="' . $key . '" type="text" size="3" maxlength="4" name="config[bump_interval]" value="' . $value . '" />&nbsp;<select name="config[bump_type]">' . $s_bump_type . '</select>';	}	/**	* Board disable option and message	*/	function board_disable($value, $key)	{		global $user;		$radio_ary = array(1 => 'YES', 0 => 'NO');		return h_radio('config[board_disable]', $radio_ary, $value) . '<br /><input id="' . $key . '" type="text" name="config[board_disable_msg]" maxlength="255" size="40" value="' . $this->new_config['board_disable_msg'] . '" />';	}	/**	* Global quick reply enable/disable setting and button to enable in all forums	*/	function quick_reply($value, $key)	{		global $user;		$radio_ary = array(1 => 'YES', 0 => 'NO');		return h_radio('config[allow_quick_reply]', $radio_ary, $value) .			'<br /><br /><input class="button2" type="submit" id="' . $key . '_enable" name="' . $key . '_enable" value="' . $user->lang['ALLOW_QUICK_REPLY_BUTTON'] . '" />';	}	/**	* Select default dateformat	*/	function dateformat_select($value, $key)	{		global $user, $config;		// Let the format_date function operate with the acp values		$old_tz = $user->timezone;		$old_dst = $user->dst;		$user->timezone = $config['board_timezone'] * 3600;		$user->dst = $config['board_dst'] * 3600;		$dateformat_options = '';		foreach ($user->lang['dateformats'] as $format => $null)		{			$dateformat_options .= '<option value="' . $format . '"' . (($format == $value) ? ' selected="selected"' : '') . '>';			$dateformat_options .= $user->format_date(time(), $format, false) . ((strpos($format, '|') !== false) ? $user->lang['VARIANT_DATE_SEPARATOR'] . $user->format_date(time(), $format, true) : '');			$dateformat_options .= '</option>';		}		$dateformat_options .= '<option value="custom"';		if (!isset($user->lang['dateformats'][$value]))		{			$dateformat_options .= ' selected="selected"';		}		$dateformat_options .= '>' . $user->lang['CUSTOM_DATEFORMAT'] . '</option>';		// Reset users date options		$user->timezone = $old_tz;		$user->dst = $old_dst;		return "<select name=\"dateoptions\" id=\"dateoptions\" onchange=\"if (this.value == 'custom') { document.getElementById('" . addslashes($key) . "').value = '" . addslashes($value) . "'; } else { document.getElementById('" . addslashes($key) . "').value = this.value; }\">$dateformat_options</select>		<input type=\"text\" name=\"config[$key]\" id=\"$key\" value=\"$value\" maxlength=\"30\" />";	}	/**	* Select multiple forums	*/	function select_news_forums($value, $key)	{		global $user, $config;		$forum_list = make_forum_select(false, false, true, true, true, false, true);		// Build forum options		$s_forum_options = '<select id="' . $key . '" name="' . $key . '[]" multiple="multiple">';		foreach ($forum_list as $f_id => $f_row)		{			$f_row['selected'] = phpbb_optionget(FORUM_OPTION_FEED_NEWS, $f_row['forum_options']);			$s_forum_options .= '<option value="' . $f_id . '"' . (($f_row['selected']) ? ' selected="selected"' : '') . (($f_row['disabled']) ? ' disabled="disabled" class="disabled-option"' : '') . '>' . $f_row['padding'] . $f_row['forum_name'] . '</option>';		}		$s_forum_options .= '</select>';		return $s_forum_options;	}	function select_exclude_forums($value, $key)	{		global $user, $config;		$forum_list = make_forum_select(false, false, true, true, true, false, true);		// Build forum options		$s_forum_options = '<select id="' . $key . '" name="' . $key . '[]" multiple="multiple">';		foreach ($forum_list as $f_id => $f_row)		{			$f_row['selected'] = phpbb_optionget(FORUM_OPTION_FEED_EXCLUDE, $f_row['forum_options']);			$s_forum_options .= '<option value="' . $f_id . '"' . (($f_row['selected']) ? ' selected="selected"' : '') . (($f_row['disabled']) ? ' disabled="disabled" class="disabled-option"' : '') . '>' . $f_row['padding'] . $f_row['forum_name'] . '</option>';		}		$s_forum_options .= '</select>';		return $s_forum_options;	}	function store_feed_forums($option, $key)	{		global $db, $cache;		// Get key		$values = request_var($key, array(0 => 0));		// Empty option bit for all forums		$sql = 'UPDATE ' . FORUMS_TABLE . '			SET forum_options = forum_options - ' . (1 << $option) . '			WHERE ' . $db->sql_bit_and('forum_options', $option, '<> 0');		$db->sql_query($sql);		// Already emptied for all...		if (sizeof($values))		{			// Set for selected forums			$sql = 'UPDATE ' . FORUMS_TABLE . '				SET forum_options = forum_options + ' . (1 << $option) . '				WHERE ' . $db->sql_in_set('forum_id', $values);			$db->sql_query($sql);		}		// Empty sql cache for forums table because options changed		$cache->destroy('sql', FORUMS_TABLE);	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package mcp*/class mcp_ban{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpEx;		include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		// Include the admin banning interface...		include($phpbb_root_path . 'includes/acp/acp_ban.' . $phpEx);		$bansubmit		= (isset($_POST['bansubmit'])) ? true : false;		$unbansubmit	= (isset($_POST['unbansubmit'])) ? true : false;		$current_time	= time();		$user->add_lang(array('acp/ban', 'acp/users'));		$this->tpl_name = 'mcp_ban';		// Ban submitted?		if ($bansubmit)		{			// Grab the list of entries			$ban				= request_var('ban', '', ($mode === 'user') ? true : false);			if ($mode === 'user')			{				$ban = utf8_normalize_nfc($ban);			}			$ban_len			= request_var('banlength', 0);			$ban_len_other		= request_var('banlengthother', '');			$ban_exclude		= request_var('banexclude', 0);			$ban_reason			= utf8_normalize_nfc(request_var('banreason', '', true));			$ban_give_reason	= utf8_normalize_nfc(request_var('bangivereason', '', true));			if ($ban)			{				if (confirm_box(true))				{					user_ban($mode, $ban, $ban_len, $ban_len_other, $ban_exclude, $ban_reason, $ban_give_reason);					trigger_error($user->lang['BAN_UPDATE_SUCCESSFUL'] . '<br /><br /><a href="' . $this->u_action . '">&laquo; ' . $user->lang['BACK_TO_PREV'] . '</a>');				}				else				{					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(						'mode'				=> $mode,						'ban'				=> $ban,						'bansubmit'			=> true,						'banlength'			=> $ban_len,						'banlengthother'	=> $ban_len_other,						'banexclude'		=> $ban_exclude,						'banreason'			=> $ban_reason,						'bangivereason'		=> $ban_give_reason)));				}			}		}		else if ($unbansubmit)		{			$ban = request_var('unban', array(''));			if ($ban)			{				if (confirm_box(true))				{					user_unban($mode, $ban);					trigger_error($user->lang['BAN_UPDATE_SUCCESSFUL'] . '<br /><br /><a href="' . $this->u_action . '">&laquo; ' . $user->lang['BACK_TO_PREV'] . '</a>');				}				else				{					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(						'mode'			=> $mode,						'unbansubmit'	=> true,						'unban'			=> $ban)));				}			}		}		// Ban length options		$ban_end_text = array(0 => $user->lang['PERMANENT'], 30 => $user->lang['30_MINS'], 60 => $user->lang['1_HOUR'], 360 => $user->lang['6_HOURS'], 1440 => $user->lang['1_DAY'], 10080 => $user->lang['7_DAYS'], 20160 => $user->lang['2_WEEKS'], 40320 => $user->lang['1_MONTH'], -1 => $user->lang['UNTIL'] . ' -&gt; ');		$ban_end_options = '';		foreach ($ban_end_text as $length => $text)		{			$ban_end_options .= '<option value="' . $length . '">' . $text . '</option>';		}		// Define language vars		$this->page_title = $user->lang[strtoupper($mode) . '_BAN'];		$l_ban_explain = $user->lang[strtoupper($mode) . '_BAN_EXPLAIN'];		$l_ban_exclude_explain = $user->lang[strtoupper($mode) . '_BAN_EXCLUDE_EXPLAIN'];		$l_unban_title = $user->lang[strtoupper($mode) . '_UNBAN'];		$l_unban_explain = $user->lang[strtoupper($mode) . '_UNBAN_EXPLAIN'];		$l_no_ban_cell = $user->lang[strtoupper($mode) . '_NO_BANNED'];		switch ($mode)		{			case 'user':				$l_ban_cell = $user->lang['USERNAME'];			break;			case 'ip':				$l_ban_cell = $user->lang['IP_HOSTNAME'];			break;			case 'email':				$l_ban_cell = $user->lang['EMAIL_ADDRESS'];			break;		}		acp_ban::display_ban_options($mode);		$template->assign_vars(array(			'L_TITLE'				=> $this->page_title,			'L_EXPLAIN'				=> $l_ban_explain,			'L_UNBAN_TITLE'			=> $l_unban_title,			'L_UNBAN_EXPLAIN'		=> $l_unban_explain,			'L_BAN_CELL'			=> $l_ban_cell,			'L_BAN_EXCLUDE_EXPLAIN'	=> $l_ban_exclude_explain,			'L_NO_BAN_CELL'			=> $l_no_ban_cell,			'S_USERNAME_BAN'	=> ($mode == 'user') ? true : false,			'U_ACTION'			=> $this->u_action,			'U_FIND_USERNAME'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=mcp_ban&amp;field=ban'),		));		if ($mode === 'email' && !$auth->acl_get('a_user'))		{			return;		}		// As a "service" we will check if any post id is specified and populate the username of the poster id if given		$post_id = request_var('p', 0);		$user_id = request_var('u', 0);		$username = $pre_fill = false;		if ($user_id && $user_id <> ANONYMOUS)		{			$sql = 'SELECT username, user_email, user_ip				FROM ' . USERS_TABLE . '				WHERE user_id = ' . $user_id;			$result = $db->sql_query($sql);			switch ($mode)			{				case 'user':					$pre_fill = (string) $db->sql_fetchfield('username');				break;								case 'ip':					$pre_fill = (string) $db->sql_fetchfield('user_ip');				break;				case 'email':					$pre_fill = (string) $db->sql_fetchfield('user_email');				break;			}			$db->sql_freeresult($result);		}		else if ($post_id)		{			$post_info = get_post_data($post_id, 'm_ban');			if (sizeof($post_info) && !empty($post_info[$post_id]))			{				switch ($mode)				{					case 'user':						$pre_fill = $post_info[$post_id]['username'];					break;					case 'ip':						$pre_fill = $post_info[$post_id]['poster_ip'];					break;					case 'email':						$pre_fill = $post_info[$post_id]['user_email'];					break;				}			}		}		if ($pre_fill)		{			// left for legacy template compatibility			$template->assign_var('USERNAMES', $pre_fill);			$template->assign_var('BAN_QUANTIFIER', $pre_fill);		}	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_database_info{	function module()	{		return array(			'filename'	=> 'acp_database',			'title'		=> 'ACP_DATABASE',			'version'	=> '1.0.0',			'modes'		=> array(				'backup'	=> array('title' => 'ACP_BACKUP', 'auth' => 'acl_a_backup', 'cat' => array('ACP_CAT_DATABASE')),				'restore'	=> array('title' => 'ACP_RESTORE', 'auth' => 'acl_a_backup', 'cat' => array('ACP_CAT_DATABASE')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package diff* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Code from pear.php.net, Text_Diff-1.1.0 package* http://pear.php.net/package/Text_Diff/** Modified by phpBB Group to meet our coding standards* and being able to integrate into phpBB** A class to render Diffs in different formats.** This class renders the diff in classic diff format. It is intended that* this class be customized via inheritance, to obtain fancier outputs.** Copyright 2004-2008 The Horde Project (http://www.horde.org/)** @package diff*/class diff_renderer{	/**	* Number of leading context "lines" to preserve.	*	* This should be left at zero for this class, but subclasses may want to	* set this to other values.	*/	var $_leading_context_lines = 0;	/**	* Number of trailing context "lines" to preserve.	*	* This should be left at zero for this class, but subclasses may want to	* set this to other values.	*/	var $_trailing_context_lines = 0;	/**	* Constructor.	*/	function diff_renderer($params = array())	{		foreach ($params as $param => $value)		{			$v = '_' . $param;			if (isset($this->$v))			{				$this->$v = $value;			}		}	}	/**	* Get any renderer parameters.	*	* @return array  All parameters of this renderer object.	*/	function get_params()	{		$params = array();		foreach (get_object_vars($this) as $k => $v)		{			if ($k[0] == '_')			{				$params[substr($k, 1)] = $v;			}		}		return $params;	}	/**	* Renders a diff.	*	* @param diff &$diff A diff object.	*	* @return string  The formatted output.	*/	function render(&$diff)	{		$xi = $yi = 1;		$block = false;		$context = array();		// Create a new diff object if it is a 3-way diff		if (is_a($diff, 'diff3'))		{			$diff3 = &$diff;			$diff_1 = $diff3->get_original();			$diff_2 = $diff3->merged_output();			unset($diff3);			$diff = new diff($diff_1, $diff_2);		}		$nlead = $this->_leading_context_lines;		$ntrail = $this->_trailing_context_lines;		$output = $this->_start_diff();		$diffs = $diff->get_diff();		foreach ($diffs as $i => $edit)		{			// If these are unchanged (copied) lines, and we want to keep leading or trailing context lines, extract them from the copy block.			if (is_a($edit, 'diff_op_copy'))			{				// Do we have any diff blocks yet?				if (is_array($block))				{					// How many lines to keep as context from the copy block.					$keep = ($i == sizeof($diffs) - 1) ? $ntrail : $nlead + $ntrail;					if (sizeof($edit->orig) <= $keep)					{						// We have less lines in the block than we want for context => keep the whole block.						$block[] = $edit;					}					else					{						if ($ntrail)						{							// Create a new block with as many lines as we need for the trailing context.							$context = array_slice($edit->orig, 0, $ntrail);							$block[] = new diff_op_copy($context);						}						$output .= $this->_block($x0, $ntrail + $xi - $x0, $y0, $ntrail + $yi - $y0, $block);						$block = false;					}				}				// Keep the copy block as the context for the next block.				$context = $edit->orig;			}			else			{				// Don't we have any diff blocks yet?				if (!is_array($block))				{					// Extract context lines from the preceding copy block.					$context = array_slice($context, sizeof($context) - $nlead);					$x0 = $xi - sizeof($context);					$y0 = $yi - sizeof($context);					$block = array();					if ($context)					{						$block[] = new diff_op_copy($context);					}				}				$block[] = $edit;			}			$xi += ($edit->orig) ? sizeof($edit->orig) : 0;			$yi += ($edit->final) ? sizeof($edit->final) : 0;		}		if (is_array($block))		{			$output .= $this->_block($x0, $xi - $x0, $y0, $yi - $y0, $block);		}		return $output . $this->_end_diff();	}	function _block($xbeg, $xlen, $ybeg, $ylen, &$edits)	{		$output = $this->_start_block($this->_block_header($xbeg, $xlen, $ybeg, $ylen));		foreach ($edits as $edit)		{			switch (get_class($edit))			{				case 'diff_op_copy':					$output .= $this->_context($edit->orig);				break;				case 'diff_op_add':					$output .= $this->_added($edit->final);				break;				case 'diff_op_delete':					$output .= $this->_deleted($edit->orig);				break;				case 'diff_op_change':					$output .= $this->_changed($edit->orig, $edit->final);				break;			}		}		return $output . $this->_end_block();	}	function _start_diff()	{		return '';	}	function _end_diff()	{		return '';	}	function _block_header($xbeg, $xlen, $ybeg, $ylen)	{		if ($xlen > 1)		{			$xbeg .= ',' . ($xbeg + $xlen - 1);		}		if ($ylen > 1)		{			$ybeg .= ',' . ($ybeg + $ylen - 1);		}		// this matches the GNU Diff behaviour		if ($xlen && !$ylen)		{			$ybeg--;		}		else if (!$xlen)		{			$xbeg--;		}		return $xbeg . ($xlen ? ($ylen ? 'c' : 'd') : 'a') . $ybeg;	}	function _start_block($header)	{		return $header . "\n";	}	function _end_block()	{		return '';	}	function _lines($lines, $prefix = ' ')	{		return $prefix . implode("\n$prefix", $lines) . "\n";	}	function _context($lines)	{		return $this->_lines($lines, '  ');	}	function _added($lines)	{		return $this->_lines($lines, '> ');	}	function _deleted($lines)	{		return $this->_lines($lines, '< ');	}	function _changed($orig, $final)	{		return $this->_deleted($orig) . "---\n" . $this->_added($final);	}	/**	* Our function to get the diff	*/	function get_diff_content($diff)	{		return $this->render($diff);	}}/*** Renders a unified diff* @package diff*/class diff_renderer_unified extends diff_renderer{	var $_leading_context_lines = 4;	var $_trailing_context_lines = 4;	/**	* Our function to get the diff	*/	function get_diff_content($diff)	{		return nl2br($this->render($diff));	}	function _block_header($xbeg, $xlen, $ybeg, $ylen)	{		if ($xlen != 1)		{			$xbeg .= ',' . $xlen;		}		if ($ylen != 1)		{			$ybeg .= ',' . $ylen;		}		return '<div class="diff"><big class="info">@@ -' . $xbeg . ' +' . $ybeg . ' @@</big></div>';	}	function _context($lines)	{		return '<pre class="diff context">' . htmlspecialchars($this->_lines($lines, ' ')) . '<br /></pre>';	}	function _added($lines)	{		return '<pre class="diff added">' . htmlspecialchars($this->_lines($lines, '+')) . '<br /></pre>';	}	function _deleted($lines)	{		return '<pre class="diff removed">' . htmlspecialchars($this->_lines($lines, '-')) . '<br /></pre>';	}	function _changed($orig, $final)	{		return $this->_deleted($orig) . $this->_added($final);	}	function _start_diff()	{		$start = '<div class="file">';		return $start;	}	function _end_diff()	{		return '</div>';	}	function _end_block()	{		return '';	}}/*** "Inline" diff renderer.** This class renders diffs in the Wiki-style "inline" format.** @author  Ciprian Popovici* @package diff*/class diff_renderer_inline extends diff_renderer{	var $_leading_context_lines = 10000;	var $_trailing_context_lines = 10000;	// Prefix and suffix for inserted text	var $_ins_prefix = '<span class="ins">';	var $_ins_suffix = '</span>';	// Prefix and suffix for deleted text	var $_del_prefix = '<span class="del">';	var $_del_suffix = '</span>';	var $_block_head = '';	// What are we currently splitting on? Used to recurse to show word-level	var $_split_level = 'lines';	/**	* Our function to get the diff	*/	function get_diff_content($diff)	{		return '<pre>' . nl2br($this->render($diff)) . '<br /></pre>';	}	function _start_diff()	{		return '';	}	function _end_diff()	{		return '';	}	function _block_header($xbeg, $xlen, $ybeg, $ylen)	{		return $this->_block_head;	}	function _start_block($header)	{		return $header;	}	function _lines($lines, $prefix = ' ', $encode = true)	{		if ($encode)		{			array_walk($lines, array(&$this, '_encode'));		}		if ($this->_split_level == 'words')		{			return implode('', $lines);		}		else		{			return implode("\n", $lines) . "\n";		}	}	function _added($lines)	{		array_walk($lines, array(&$this, '_encode'));		$lines[0] = $this->_ins_prefix . $lines[0];		$lines[sizeof($lines) - 1] .= $this->_ins_suffix;		return $this->_lines($lines, ' ', false);	}	function _deleted($lines, $words = false)	{		array_walk($lines, array(&$this, '_encode'));		$lines[0] = $this->_del_prefix . $lines[0];		$lines[sizeof($lines) - 1] .= $this->_del_suffix;		return $this->_lines($lines, ' ', false);	}	function _changed($orig, $final)	{		// If we've already split on words, don't try to do so again - just display.		if ($this->_split_level == 'words')		{			$prefix = '';			while ($orig[0] !== false && $final[0] !== false && substr($orig[0], 0, 1) == ' ' && substr($final[0], 0, 1) == ' ')			{				$prefix .= substr($orig[0], 0, 1);				$orig[0] = substr($orig[0], 1);				$final[0] = substr($final[0], 1);			}			return $prefix . $this->_deleted($orig) . $this->_added($final);		}		$text1 = implode("\n", $orig);		$text2 = implode("\n", $final);		// Non-printing newline marker.		$nl = "\0";		// We want to split on word boundaries, but we need to preserve whitespace as well.		// Therefore we split on words, but include all blocks of whitespace in the wordlist.		$splitted_text_1 = $this->_split_on_words($text1, $nl);		$splitted_text_2 = $this->_split_on_words($text2, $nl);		$diff = new diff($splitted_text_1, $splitted_text_2);		unset($splitted_text_1, $splitted_text_2);		// Get the diff in inline format.		$renderer = new diff_renderer_inline(array_merge($this->get_params(), array('split_level' => 'words')));		// Run the diff and get the output.		return str_replace($nl, "\n", $renderer->render($diff)) . "\n";	}	function _split_on_words($string, $newline_escape = "\n")	{		// Ignore \0; otherwise the while loop will never finish.		$string = str_replace("\0", '', $string);		$words = array();		$length = strlen($string);		$pos = 0;		$tab_there = true;		while ($pos < $length)		{			// Check for tabs... do not include them			if ($tab_there && substr($string, $pos, 1) === "\t")			{				$words[] = "\t";				$pos++;				continue;			}			else			{				$tab_there = false;			}			// Eat a word with any preceding whitespace.			$spaces = strspn(substr($string, $pos), " \n");			$nextpos = strcspn(substr($string, $pos + $spaces), " \n");			$words[] = str_replace("\n", $newline_escape, substr($string, $pos, $spaces + $nextpos));			$pos += $spaces + $nextpos;		}		return $words;	}	function _encode(&$string)	{		$string = htmlspecialchars($string);	}}/*** "raw" diff renderer.* This class could be used to output a raw unified patch file** @package diff*/class diff_renderer_raw extends diff_renderer{	var $_leading_context_lines = 4;	var $_trailing_context_lines = 4;	/**	* Our function to get the diff	*/	function get_diff_content($diff)	{		return '<textarea style="height: 290px;" rows="15" cols="76" class="full">' . htmlspecialchars($this->render($diff)) . '</textarea>';	}	function _block_header($xbeg, $xlen, $ybeg, $ylen)	{		if ($xlen != 1)		{			$xbeg .= ',' . $xlen;		}		if ($ylen != 1)		{			$ybeg .= ',' . $ylen;		}		return '@@ -' . $xbeg . ' +' . $ybeg . ' @@';	}	function _context($lines)	{		return $this->_lines($lines, ' ');	}	function _added($lines)	{		return $this->_lines($lines, '+');	}	function _deleted($lines)	{		return $this->_lines($lines, '-');	}	function _changed($orig, $final)	{		return $this->_deleted($orig) . $this->_added($final);	}}/*** "chora (Horde)" diff renderer - similar style.* This renderer class is a modified human_readable function from the Horde Framework.** @package diff*/class diff_renderer_side_by_side extends diff_renderer{	var $_leading_context_lines = 3;	var $_trailing_context_lines = 3;	var $lines = array();	// Hold the left and right columns of lines for change blocks.	var $cols;	var $state;	var $data = false;	/**	* Our function to get the diff	*/	function get_diff_content($diff)	{		global $user;		$output = '';		$output .= '<table cellspacing="0" class="hrdiff"><caption>	<span class="unmodified">&nbsp;</span> ' . $user->lang['LINE_UNMODIFIED'] . '	<span class="added">&nbsp;</span> ' . $user->lang['LINE_ADDED'] . '	<span class="modified">&nbsp;</span> ' . $user->lang['LINE_MODIFIED'] . '	<span class="removed">&nbsp;</span> ' . $user->lang['LINE_REMOVED'] . '</caption><tbody>';		$this->render($diff);		// Is the diff empty?		if (!sizeof($this->lines))		{			$output .= '<tr><th colspan="2">' . $user->lang['NO_VISIBLE_CHANGES'] . '</th></tr>';		}		else		{			// Iterate through every header block of changes			foreach ($this->lines as $header)			{				$output .= '<tr><th>' . $user->lang['LINE'] . ' ' . $header['oldline'] . '</th><th>' . $user->lang['LINE'] . ' ' . $header['newline'] . '</th></tr>';				// Each header block consists of a number of changes (add, remove, change).				$current_context = '';				foreach ($header['contents'] as $change)				{					if (!empty($current_context) && $change['type'] != 'empty')					{						$line = $current_context;						$current_context = '';						$output .= '<tr class="unmodified"><td><pre>' . ((strlen($line)) ? $line : '&nbsp;') . '<br /></pre></td>							<td><pre>' . ((strlen($line)) ? $line : '&nbsp;') . '<br /></pre></td></tr>';					}					switch ($change['type'])					{						case 'add':							$line = '';							foreach ($change['lines'] as $_line)							{								$line .= htmlspecialchars($_line) . '<br />';							}							$output .= '<tr><td class="added_empty">&nbsp;</td><td class="added"><pre>' . ((strlen($line)) ? $line : '&nbsp;') . '<br /></pre></td></tr>';						break;						case 'remove':							$line = '';							foreach ($change['lines'] as $_line)							{								$line .= htmlspecialchars($_line) . '<br />';							}							$output .= '<tr><td class="removed"><pre>' . ((strlen($line)) ? $line : '&nbsp;') . '<br /></pre></td><td class="removed_empty">&nbsp;</td></tr>';						break;						case 'empty':							$current_context .= htmlspecialchars($change['line']) . '<br />';						break;						case 'change':							// Pop the old/new stacks one by one, until both are empty.							$oldsize = sizeof($change['old']);							$newsize = sizeof($change['new']);							$left = $right = '';							for ($row = 0, $row_max = max($oldsize, $newsize); $row < $row_max; ++$row)							{								$left .= isset($change['old'][$row]) ? htmlspecialchars($change['old'][$row]) : '';								$left .= '<br />';								$right .= isset($change['new'][$row]) ? htmlspecialchars($change['new'][$row]) : '';								$right .= '<br />';							}							$output .= '<tr>';							if (!empty($left))							{								$output .= '<td class="modified"><pre>' . $left . '<br /></pre></td>';							}							else if ($row < $oldsize)							{								$output .= '<td class="modified">&nbsp;</td>';							}							else							{								$output .= '<td class="unmodified">&nbsp;</td>';							}							if (!empty($right))							{								$output .= '<td class="modified"><pre>' . $right . '<br /></pre></td>';							}							else if ($row < $newsize)							{								$output .= '<td class="modified">&nbsp;</td>';							}							else							{								$output .= '<td class="unmodified">&nbsp;</td>';							}							$output .= '</tr>';						break;					}				}				if (!empty($current_context))				{					$line = $current_context;					$current_context = '';					$output .= '<tr class="unmodified"><td><pre>' . ((strlen($line)) ? $line : '&nbsp;') . '<br /></pre></td>';					$output .= '<td><pre>' . ((strlen($line)) ? $line : '&nbsp;') . '<br /></pre></td></tr>';				}			}		}		$output .= '</tbody></table>';		return $output;	}	function _start_diff()	{		$this->lines = array();		$this->data = false;		$this->cols = array(array(), array());		$this->state = 'empty';		return '';	}	function _end_diff()	{		// Just flush any remaining entries in the columns stack.		switch ($this->state)		{			case 'add':				$this->data['contents'][] = array('type' => 'add', 'lines' => $this->cols[0]);			break;			case 'remove':				// We have some removal lines pending in our stack, so flush them.				$this->data['contents'][] = array('type' => 'remove', 'lines' => $this->cols[0]);			break;			case 'change':				// We have both remove and addition lines, so this is a change block.				$this->data['contents'][] = array('type' => 'change', 'old' => $this->cols[0], 'new' => $this->cols[1]);			break;		}		if ($this->data !== false)		{			$this->lines[] = $this->data;		}		return '';	}	function _block_header($xbeg, $xlen, $ybeg, $ylen)	{		// Push any previous header information to the return stack.		if ($this->data !== false)		{			$this->lines[] = $this->data;		}		$this->data = array('type' => 'header', 'oldline' => $xbeg, 'newline' => $ybeg, 'contents' => array());		$this->state = 'dump';	}	function _added($lines)	{		array_walk($lines, array(&$this, '_perform_add'));	}	function _perform_add($line)	{		if ($this->state == 'empty')		{			return '';		}		// This is just an addition line.		if ($this->state == 'dump' || $this->state == 'add')		{			// Start adding to the addition stack.			$this->cols[0][] = $line;			$this->state = 'add';		}		else		{			// This is inside a change block, so start accumulating lines.			$this->state = 'change';			$this->cols[1][] = $line;		}	}	function _deleted($lines)	{		array_walk($lines, array(&$this, '_perform_delete'));	}	function _perform_delete($line)	{		// This is a removal line.		$this->state = 'remove';		$this->cols[0][] = $line;	}	function _context($lines)	{		array_walk($lines, array(&$this, '_perform_context'));	}	function _perform_context($line)	{		// An empty block with no action.		switch ($this->state)		{			case 'add':				$this->data['contents'][] = array('type' => 'add', 'lines' => $this->cols[0]);			break;			case 'remove':				// We have some removal lines pending in our stack, so flush them.				$this->data['contents'][] = array('type' => 'remove', 'lines' => $this->cols[0]);			break;			case 'change':				// We have both remove and addition lines, so this is a change block.				$this->data['contents'][] = array('type' => 'change', 'old' => $this->cols[0], 'new' => $this->cols[1]);			break;		}		$this->cols = array(array(), array());		$this->data['contents'][] = array('type' => 'empty', 'line' => $line);		$this->state = 'dump';	}	function _changed($orig, $final)	{		return $this->_deleted($orig) . $this->_added($final);	}}?>
<?php$GLOBALS['utf_nfkc_qc']=array(''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0);
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_main_info{	function module()	{		return array(			'filename'	=> 'acp_main',			'title'		=> 'ACP_INDEX',			'version'	=> '1.0.0',			'modes'		=> array(				'main'		=> array('title' => 'ACP_INDEX', 'auth' => '', 'cat' => array('ACP_CAT_GENERAL')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_update_info{	function module()	{		return array(			'filename'	=> 'acp_update',			'title'		=> 'ACP_UPDATE',			'version'	=> '1.0.0',			'modes'		=> array(				'version_check'		=> array('title' => 'ACP_VERSION_CHECK', 'auth' => 'acl_a_board', 'cat' => array('ACP_AUTOMATION')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class mcp_queue_info{	function module()	{		return array(			'filename'	=> 'mcp_queue',			'title'		=> 'MCP_QUEUE',			'version'	=> '1.0.0',			'modes'		=> array(				'unapproved_topics'	=> array('title' => 'MCP_QUEUE_UNAPPROVED_TOPICS', 'auth' => 'aclf_m_approve', 'cat' => array('MCP_QUEUE')),				'unapproved_posts'	=> array('title' => 'MCP_QUEUE_UNAPPROVED_POSTS', 'auth' => 'aclf_m_approve', 'cat' => array('MCP_QUEUE')),				'approve_details'	=> array('title' => 'MCP_QUEUE_APPROVE_DETAILS', 'auth' => 'acl_m_approve,$id || (!$id && aclf_m_approve)', 'cat' => array('MCP_QUEUE')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2006, 2008 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Placeholder for autoload*/if (!class_exists('phpbb_default_captcha')){	include($phpbb_root_path . 'includes/captcha/plugins/captcha_abstract.' . $phpEx);}/*** @package VC*/class phpbb_captcha_gd extends phpbb_default_captcha{	var $captcha_vars = array(		'captcha_gd_x_grid'				=> 'CAPTCHA_GD_X_GRID',		'captcha_gd_y_grid'				=> 'CAPTCHA_GD_Y_GRID',		'captcha_gd_foreground_noise'	=> 'CAPTCHA_GD_FOREGROUND_NOISE',//		'captcha_gd'					=> 'CAPTCHA_GD_PREVIEWED',		'captcha_gd_wave'				=> 'CAPTCHA_GD_WAVE',		'captcha_gd_3d_noise'			=> 'CAPTCHA_GD_3D_NOISE',		'captcha_gd_fonts'				=> 'CAPTCHA_GD_FONTS',	);	function phpbb_captcha_gd()	{		global $phpbb_root_path, $phpEx;		if (!class_exists('captcha'))		{			include($phpbb_root_path . 'includes/captcha/captcha_gd.' . $phpEx);		}	}	function &get_instance()	{		$instance =& new phpbb_captcha_gd();		return $instance;	}	function is_available()	{		global $phpbb_root_path, $phpEx;		if (@extension_loaded('gd'))		{			return true;		}		if (!function_exists('can_load_dll'))		{			include($phpbb_root_path . 'includes/functions_install.' . $phpEx);		}		return can_load_dll('gd');	}	/**	*  API function	*/	function has_config()	{		return true;	}	function get_name()	{		return 'CAPTCHA_GD';	}	function get_class_name()	{		return 'phpbb_captcha_gd';	}	function acp_page($id, &$module)	{		global $db, $user, $auth, $template;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('acp/board');		$config_vars = array(			'enable_confirm'		=> 'REG_ENABLE',			'enable_post_confirm'	=> 'POST_ENABLE',			'confirm_refresh'		=> 'CONFIRM_REFRESH',			'captcha_gd'			=> 'CAPTCHA_GD',		);		$module->tpl_name = 'captcha_gd_acp';		$module->page_title = 'ACP_VC_SETTINGS';		$form_key = 'acp_captcha';		add_form_key($form_key);		$submit = request_var('submit', '');		if ($submit && check_form_key($form_key))		{			$captcha_vars = array_keys($this->captcha_vars);			foreach ($captcha_vars as $captcha_var)			{				$value = request_var($captcha_var, 0);				if ($value >= 0)				{					set_config($captcha_var, $value);				}			}			add_log('admin', 'LOG_CONFIG_VISUAL');			trigger_error($user->lang['CONFIG_UPDATED'] . adm_back_link($module->u_action));		}		else if ($submit)		{			trigger_error($user->lang['FORM_INVALID'] . adm_back_link($module->u_action));		}		else		{			foreach ($this->captcha_vars as $captcha_var => $template_var)			{				$var = (isset($_REQUEST[$captcha_var])) ? request_var($captcha_var, 0) : $config[$captcha_var];				$template->assign_var($template_var, $var);			}			$template->assign_vars(array(				'CAPTCHA_PREVIEW'	=> $this->get_demo_template($id),				'CAPTCHA_NAME'		=> $this->get_class_name(),				'U_ACTION'			=> $module->u_action,			));		}	}	function execute_demo()	{		global $config;		$config_old = $config;		foreach ($this->captcha_vars as $captcha_var => $template_var)		{				$config[$captcha_var] = request_var($captcha_var, (int) $config[$captcha_var]);		}		parent::execute_demo();		$config = $config_old;	}}?>
<?php/*** Only adjust the [size] bbcode tag from pc to percent.** You should make a backup from your users, posts and privmsgs table in case something goes wrong* Forum descriptions and rules need to be re-submitted manually if they use the [size] tag.** Since we limit the match to the sizes from 0 to 29 no newly applied sizes should be affected...*/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);@ini_set('memory_limit', '128M');define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.'.$phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$echos = 0;function replace_size($matches){	return '[size=' . ceil(100.0 * (((double) $matches[1])/12.0)) . ':' . $matches[2] . ']';}// Adjust user signatures$sql = 'SELECT user_id, user_sig, user_sig_bbcode_uid	FROM ' . USERS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$bbcode_uid = $row['user_sig_bbcode_uid'];	// Only if a bbcode uid is present, the signature present and a size tag used...	if ($bbcode_uid && $row['user_sig'] && strpos($row['user_sig'], '[size=') !== false)	{		$row['user_sig'] = preg_replace_callback('/\[size=(\d*):(' . $bbcode_uid . ')\]/', 'replace_size', $row['user_sig']);		$sql = 'UPDATE ' . USERS_TABLE . " SET user_sig = '" . $db->sql_escape($row['user_sig']) . "'			WHERE user_id = " . $row['user_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Now adjust posts$sql = 'SELECT post_id, post_text, bbcode_uid, enable_bbcode	FROM ' . POSTS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$bbcode_uid = $row['bbcode_uid'];	// Only if a bbcode uid is present, bbcode enabled and a size tag used...	if ($row['enable_bbcode'] && $bbcode_uid && strpos($row['post_text'], '[size=') !== false)	{		$row['post_text'] = preg_replace_callback('/\[size=(\d*):' . $bbcode_uid . '\]/', 'replace_size', $row['post_text']);		$sql = 'UPDATE ' . POSTS_TABLE . " SET post_text = '" . $db->sql_escape($row['post_text']) . "'			WHERE post_id = " . $row['post_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Now to the private messages$sql = 'SELECT msg_id, message_text, bbcode_uid, enable_bbcode	FROM ' . PRIVMSGS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$bbcode_uid = $row['bbcode_uid'];	// Only if a bbcode uid is present, bbcode enabled and a size tag used...	if ($row['enable_bbcode'] && $bbcode_uid && strpos($row['message_text'], '[size=') !== false)	{		$row['message_text'] = preg_replace_callback('/\[size=(\d*):' . $bbcode_uid . '\]/', 'replace_size', $row['message_text']);		$sql = 'UPDATE ' . PRIVMSGS_TABLE . " SET message_text = '" . $db->sql_escape($row['message_text']) . "'			WHERE msg_id = " . $row['msg_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Done$db->sql_close();?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_styles_info{	function module()	{		return array(			'filename'	=> 'acp_styles',			'title'		=> 'ACP_CAT_STYLES',			'version'	=> '1.0.0',			'modes'		=> array(				'style'		=> array('title' => 'ACP_STYLES', 'auth' => 'acl_a_styles', 'cat' => array('ACP_STYLE_MANAGEMENT')),				'template'	=> array('title' => 'ACP_TEMPLATES', 'auth' => 'acl_a_styles', 'cat' => array('ACP_STYLE_COMPONENTS')),				'theme'		=> array('title' => 'ACP_THEMES', 'auth' => 'acl_a_styles', 'cat' => array('ACP_STYLE_COMPONENTS')),				'imageset'	=> array('title' => 'ACP_IMAGESETS', 'auth' => 'acl_a_styles', 'cat' => array('ACP_STYLE_COMPONENTS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** groups [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ALREADY_DEFAULT_GROUP'		=> 'The selected group is already your default group.',	'ALREADY_IN_GROUP'			=> 'You are already a member of the selected group.',	'ALREADY_IN_GROUP_PENDING'	=> 'You already requested joining the selected group.',	'CANNOT_JOIN_GROUP'			=> 'You are not able to join this group. You are only able to join open and freely open groups.',	'CANNOT_RESIGN_GROUP'		=> 'You are not able to resign from this group. You are only able to resign from open and freely open groups.',	'CHANGED_DEFAULT_GROUP'		=> 'Successfully changed default group.',	'GROUP_AVATAR'						=> 'Group avatar',	'GROUP_CHANGE_DEFAULT'				=> 'Are you sure you want to change your default membership to the group %s?',	'GROUP_CLOSED'						=> 'Closed',	'GROUP_DESC'						=> 'Group description',	'GROUP_HIDDEN'						=> 'Hidden',	'GROUP_INFORMATION'					=> 'Usergroup information',	'GROUP_IS_CLOSED'					=> 'This is a closed group, new members can only join upon invitation of a group leader.',	'GROUP_IS_FREE'						=> 'This is a freely open group, all new members are welcome.',	'GROUP_IS_HIDDEN'					=> 'This is a hidden group, only members of this group can view its membership.',	'GROUP_IS_OPEN'						=> 'This is an open group, members can apply to join.',	'GROUP_IS_SPECIAL'					=> 'This is a special group, special groups are managed by the board administrators.',	'GROUP_JOIN'						=> 'Join group',	'GROUP_JOIN_CONFIRM'				=> 'Are you sure you want to join the selected group?',	'GROUP_JOIN_PENDING'				=> 'Request to join group',	'GROUP_JOIN_PENDING_CONFIRM'		=> 'Are you sure you want to request joining the selected group?',	'GROUP_JOINED'						=> 'Successfully joined selected group.',	'GROUP_JOINED_PENDING'				=> 'Successfully requested group membership. Please wait for a group leader to approve your membership.',	'GROUP_LIST'						=> 'Manage users',	'GROUP_MEMBERS'						=> 'Group members',	'GROUP_NAME'						=> 'Group name',	'GROUP_OPEN'						=> 'Open',	'GROUP_RANK'						=> 'Group rank',	'GROUP_RESIGN_MEMBERSHIP'			=> 'Resign group membership',	'GROUP_RESIGN_MEMBERSHIP_CONFIRM'	=> 'Are you sure you want to resign your membership from the selected group?',	'GROUP_RESIGN_PENDING'				=> 'Resign a pending group membership',	'GROUP_RESIGN_PENDING_CONFIRM'		=> 'Are you sure you want to resign your pending membership from the selected group?',	'GROUP_RESIGNED_MEMBERSHIP'			=> 'You were successfully removed from the selected group.',	'GROUP_RESIGNED_PENDING'			=> 'Your pending membership was successfully removed from the selected group.',	'GROUP_TYPE'						=> 'Group type',	'GROUP_UNDISCLOSED'					=> 'Hidden group',	'FORUM_UNDISCLOSED'					=> 'Moderating hidden forum(s)',	'LOGIN_EXPLAIN_GROUP'	=> 'You need to login to view group details.',	'NO_LEADERS'					=> 'You are not a leader of any group.',	'NOT_LEADER_OF_GROUP'			=> 'The requested operation cannot be taken because you are not a leader of the selected group.',	'NOT_MEMBER_OF_GROUP'			=> 'The requested operation cannot be taken because you are not a member of the selected group or your membership has not been approved yet.',	'NOT_RESIGN_FROM_DEFAULT_GROUP'	=> 'You are not allowed to resign from your default group.',		'PRIMARY_GROUP'		=> 'Primary group',	'REMOVE_SELECTED'		=> 'Remove selected',	'USER_GROUP_CHANGE'			=> 'From %1$s group to %2$s',	'USER_GROUP_DEMOTE'			=> 'Demote leadership',	'USER_GROUP_DEMOTE_CONFIRM'	=> 'Are you sure you want to demote as group leader from the selected group?',	'USER_GROUP_DEMOTED'		=> 'Successfully demoted your leadership.',));?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** MCP Front Panel*/function mcp_front_view($id, $mode, $action){	global $phpEx, $phpbb_root_path, $config;	global $template, $db, $user, $auth, $module;	// Latest 5 unapproved	if ($module->loaded('queue'))	{		$forum_list = array_values(array_intersect(get_forum_list('f_read'), get_forum_list('m_approve')));		$post_list = array();		$forum_names = array();		$forum_id = request_var('f', 0);		$template->assign_var('S_SHOW_UNAPPROVED', (!empty($forum_list)) ? true : false);		if (!empty($forum_list))		{			$sql = 'SELECT COUNT(post_id) AS total				FROM ' . POSTS_TABLE . '				WHERE forum_id IN (0, ' . implode(', ', $forum_list) . ')					AND post_approved = 0';			$result = $db->sql_query($sql);			$total = (int) $db->sql_fetchfield('total');			$db->sql_freeresult($result);			if ($total)			{				$global_id = $forum_list[0];				$sql = 'SELECT forum_id, forum_name					FROM ' . FORUMS_TABLE . '					WHERE ' . $db->sql_in_set('forum_id', $forum_list);				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$forum_names[$row['forum_id']] = $row['forum_name'];				}				$db->sql_freeresult($result);				$sql = 'SELECT post_id					FROM ' . POSTS_TABLE . '					WHERE forum_id IN (0, ' . implode(', ', $forum_list) . ')						AND post_approved = 0					ORDER BY post_time DESC';				$result = $db->sql_query_limit($sql, 5);				while ($row = $db->sql_fetchrow($result))				{					$post_list[] = $row['post_id'];				}				$db->sql_freeresult($result);				if (empty($post_list))				{					$total = 0;				}			}			if ($total)			{				$sql = 'SELECT p.post_id, p.post_subject, p.post_time, p.poster_id, p.post_username, u.username, u.username_clean, u.user_colour, t.topic_id, t.topic_title, t.topic_first_post_id, p.forum_id					FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . ' t, ' . USERS_TABLE . ' u					WHERE ' . $db->sql_in_set('p.post_id', $post_list) . '						AND t.topic_id = p.topic_id						AND p.poster_id = u.user_id					ORDER BY p.post_time DESC';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$global_topic = ($row['forum_id']) ? false : true;					if ($global_topic)					{						$row['forum_id'] = $global_id;					}					$template->assign_block_vars('unapproved', array(						'U_POST_DETAILS'	=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue&amp;mode=approve_details&amp;f=' . $row['forum_id'] . '&amp;p=' . $row['post_id']),						'U_MCP_FORUM'		=> (!$global_topic) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main&amp;mode=forum_view&amp;f=' . $row['forum_id']) : '',						'U_MCP_TOPIC'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main&amp;mode=topic_view&amp;f=' . $row['forum_id'] . '&amp;t=' . $row['topic_id']),						'U_FORUM'			=> (!$global_topic) ? append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $row['forum_id']) : '',						'U_TOPIC'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $row['forum_id'] . '&amp;t=' . $row['topic_id']),						'AUTHOR_FULL'		=> get_username_string('full', $row['poster_id'], $row['username'], $row['user_colour']),						'AUTHOR'			=> get_username_string('username', $row['poster_id'], $row['username'], $row['user_colour']),						'AUTHOR_COLOUR'		=> get_username_string('colour', $row['poster_id'], $row['username'], $row['user_colour']),						'U_AUTHOR'			=> get_username_string('profile', $row['poster_id'], $row['username'], $row['user_colour']),						'FORUM_NAME'	=> (!$global_topic) ? $forum_names[$row['forum_id']] : $user->lang['GLOBAL_ANNOUNCEMENT'],						'POST_ID'		=> $row['post_id'],						'TOPIC_TITLE'	=> $row['topic_title'],						'SUBJECT'		=> ($row['post_subject']) ? $row['post_subject'] : $user->lang['NO_SUBJECT'],						'POST_TIME'		=> $user->format_date($row['post_time']))					);				}				$db->sql_freeresult($result);			}			$s_hidden_fields = build_hidden_fields(array(				'redirect'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main' . (($forum_id) ? '&amp;f=' . $forum_id : ''))			));			$template->assign_vars(array(				'S_HIDDEN_FIELDS'		=> $s_hidden_fields,				'S_MCP_QUEUE_ACTION'	=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=queue"),			));			if ($total == 0)			{				$template->assign_vars(array(					'L_UNAPPROVED_TOTAL'		=> $user->lang['UNAPPROVED_POSTS_ZERO_TOTAL'],					'S_HAS_UNAPPROVED_POSTS'	=> false)				);			}			else			{				$template->assign_vars(array(					'L_UNAPPROVED_TOTAL'		=> ($total == 1) ? $user->lang['UNAPPROVED_POST_TOTAL'] : sprintf($user->lang['UNAPPROVED_POSTS_TOTAL'], $total),					'S_HAS_UNAPPROVED_POSTS'	=> true)				);			}		}	}	// Latest 5 reported	if ($module->loaded('reports'))	{		$forum_list = array_values(array_intersect(get_forum_list('f_read'), get_forum_list('m_report')));		$template->assign_var('S_SHOW_REPORTS', (!empty($forum_list)) ? true : false);		if (!empty($forum_list))		{			$sql = 'SELECT COUNT(r.report_id) AS total				FROM ' . REPORTS_TABLE . ' r, ' . POSTS_TABLE . ' p				WHERE r.post_id = p.post_id					AND r.pm_id = 0					AND r.report_closed = 0					AND p.forum_id IN (0, ' . implode(', ', $forum_list) . ')';			$result = $db->sql_query($sql);			$total = (int) $db->sql_fetchfield('total');			$db->sql_freeresult($result);			if ($total)			{				$global_id = $forum_list[0];				$sql = $db->sql_build_query('SELECT', array(					'SELECT'	=> 'r.report_time, p.post_id, p.post_subject, p.post_time, u.username, u.username_clean, u.user_colour, u.user_id, u2.username as author_name, u2.username_clean as author_name_clean, u2.user_colour as author_colour, u2.user_id as author_id, t.topic_id, t.topic_title, f.forum_id, f.forum_name',					'FROM'		=> array(						REPORTS_TABLE			=> 'r',						REPORTS_REASONS_TABLE	=> 'rr',						TOPICS_TABLE			=> 't',						USERS_TABLE				=> array('u', 'u2'),						POSTS_TABLE				=> 'p'					),					'LEFT_JOIN'	=> array(						array(							'FROM'	=> array(FORUMS_TABLE => 'f'),							'ON'	=> 'f.forum_id = p.forum_id'						)					),					'WHERE'		=> 'r.post_id = p.post_id						AND r.pm_id = 0						AND r.report_closed = 0						AND r.reason_id = rr.reason_id						AND p.topic_id = t.topic_id						AND r.user_id = u.user_id						AND p.poster_id = u2.user_id						AND p.forum_id IN (0, ' . implode(', ', $forum_list) . ')',					'ORDER_BY'	=> 'p.post_time DESC'				));				$result = $db->sql_query_limit($sql, 5);				while ($row = $db->sql_fetchrow($result))				{					$global_topic = ($row['forum_id']) ? false : true;					if ($global_topic)					{						$row['forum_id'] = $global_id;					}					$template->assign_block_vars('report', array(						'U_POST_DETAILS'	=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'f=' . $row['forum_id'] . '&amp;p=' . $row['post_id'] . "&amp;i=reports&amp;mode=report_details"),						'U_MCP_FORUM'		=> (!$global_topic) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'f=' . $row['forum_id'] . "&amp;i=$id&amp;mode=forum_view") : '',						'U_MCP_TOPIC'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'f=' . $row['forum_id'] . '&amp;t=' . $row['topic_id'] . "&amp;i=$id&amp;mode=topic_view"),						'U_FORUM'			=> (!$global_topic) ? append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $row['forum_id']) : '',						'U_TOPIC'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $row['forum_id'] . '&amp;t=' . $row['topic_id']),						'REPORTER_FULL'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']),						'REPORTER'			=> get_username_string('username', $row['user_id'], $row['username'], $row['user_colour']),						'REPORTER_COLOUR'	=> get_username_string('colour', $row['user_id'], $row['username'], $row['user_colour']),						'U_REPORTER'		=> get_username_string('profile', $row['user_id'], $row['username'], $row['user_colour']),						'AUTHOR_FULL'		=> get_username_string('full', $row['author_id'], $row['author_name'], $row['author_colour']),						'AUTHOR'			=> get_username_string('username', $row['author_id'], $row['author_name'], $row['author_colour']),						'AUTHOR_COLOUR'		=> get_username_string('colour', $row['author_id'], $row['author_name'], $row['author_colour']),						'U_AUTHOR'			=> get_username_string('profile', $row['author_id'], $row['author_name'], $row['author_colour']),						'FORUM_NAME'	=> (!$global_topic) ? $row['forum_name'] : $user->lang['GLOBAL_ANNOUNCEMENT'],						'TOPIC_TITLE'	=> $row['topic_title'],						'SUBJECT'		=> ($row['post_subject']) ? $row['post_subject'] : $user->lang['NO_SUBJECT'],						'REPORT_TIME'	=> $user->format_date($row['report_time']),						'POST_TIME'		=> $user->format_date($row['post_time']),					));				}			}			if ($total == 0)			{				$template->assign_vars(array(					'L_REPORTS_TOTAL'	=>	$user->lang['REPORTS_ZERO_TOTAL'],					'S_HAS_REPORTS'		=>	false)				);			}			else			{				$template->assign_vars(array(					'L_REPORTS_TOTAL'	=> ($total == 1) ? $user->lang['REPORT_TOTAL'] : sprintf($user->lang['REPORTS_TOTAL'], $total),					'S_HAS_REPORTS'		=> true)				);			}		}	}	// Latest 5 reported PMs	if ($module->loaded('pm_reports') && $auth->acl_getf_global('m_report'))	{		$template->assign_var('S_SHOW_PM_REPORTS', true);		$user->add_lang(array('ucp'));		$sql = 'SELECT COUNT(r.report_id) AS total			FROM ' . REPORTS_TABLE . ' r, ' . PRIVMSGS_TABLE . ' p			WHERE r.post_id = 0				AND r.pm_id = p.msg_id				AND r.report_closed = 0';		$result = $db->sql_query($sql);		$total = (int) $db->sql_fetchfield('total');		$db->sql_freeresult($result);		if ($total)		{			include($phpbb_root_path . 'includes/functions_privmsgs.' . $phpEx);			$sql = $db->sql_build_query('SELECT', array(				'SELECT'	=> 'r.report_id, r.report_time, p.msg_id, p.message_subject, p.message_time, p.to_address, p.bcc_address, u.username, u.username_clean, u.user_colour, u.user_id, u2.username as author_name, u2.username_clean as author_name_clean, u2.user_colour as author_colour, u2.user_id as author_id',				'FROM'		=> array(					REPORTS_TABLE			=> 'r',					REPORTS_REASONS_TABLE	=> 'rr',					USERS_TABLE				=> array('u', 'u2'),					PRIVMSGS_TABLE				=> 'p'				),				'WHERE'		=> 'r.pm_id = p.msg_id					AND r.post_id = 0					AND r.report_closed = 0					AND r.reason_id = rr.reason_id					AND r.user_id = u.user_id					AND p.author_id = u2.user_id',				'ORDER_BY'	=> 'p.message_time DESC'			));			$result = $db->sql_query_limit($sql, 5);			$pm_by_id = $pm_list = array();			while ($row = $db->sql_fetchrow($result))			{				$pm_by_id[(int) $row['msg_id']] = $row;				$pm_list[] = (int) $row['msg_id'];			}			$address_list = get_recipient_strings($pm_by_id);			foreach ($pm_list as $message_id)			{				$row = $pm_by_id[$message_id];				$template->assign_block_vars('pm_report', array(					'U_PM_DETAILS'	=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'r=' . $row['report_id'] . "&amp;i=pm_reports&amp;mode=pm_report_details"),					'REPORTER_FULL'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']),					'REPORTER'			=> get_username_string('username', $row['user_id'], $row['username'], $row['user_colour']),					'REPORTER_COLOUR'	=> get_username_string('colour', $row['user_id'], $row['username'], $row['user_colour']),					'U_REPORTER'		=> get_username_string('profile', $row['user_id'], $row['username'], $row['user_colour']),					'PM_AUTHOR_FULL'		=> get_username_string('full', $row['author_id'], $row['author_name'], $row['author_colour']),					'PM_AUTHOR'			=> get_username_string('username', $row['author_id'], $row['author_name'], $row['author_colour']),					'PM_AUTHOR_COLOUR'		=> get_username_string('colour', $row['author_id'], $row['author_name'], $row['author_colour']),					'U_PM_AUTHOR'			=> get_username_string('profile', $row['author_id'], $row['author_name'], $row['author_colour']),					'PM_SUBJECT'		=> $row['message_subject'],					'REPORT_TIME'		=> $user->format_date($row['report_time']),					'PM_TIME'			=> $user->format_date($row['message_time']),					'RECIPIENTS'		=> implode(', ', $address_list[$row['msg_id']]),				));			}		}		if ($total == 0)		{			$template->assign_vars(array(				'L_PM_REPORTS_TOTAL'	=>	$user->lang['PM_REPORTS_ZERO_TOTAL'],				'S_HAS_PM_REPORTS'		=>	false)			);		}		else		{			$template->assign_vars(array(				'L_PM_REPORTS_TOTAL'	=> ($total == 1) ? $user->lang['PM_REPORT_TOTAL'] : sprintf($user->lang['PM_REPORTS_TOTAL'], $total),				'S_HAS_PM_REPORTS'		=> true)			);		}	}	// Latest 5 logs	if ($module->loaded('logs'))	{		$forum_list = array_values(array_intersect(get_forum_list('f_read'), get_forum_list('m_')));		if (!empty($forum_list))		{			// Add forum_id 0 for global announcements			$forum_list[] = 0;			$log_count = false;			$log = array();			view_log('mod', $log, $log_count, 5, 0, $forum_list);			foreach ($log as $row)			{				$template->assign_block_vars('log', array(					'USERNAME'		=> $row['username_full'],					'IP'			=> $row['ip'],					'TIME'			=> $user->format_date($row['time']),					'ACTION'		=> $row['action'],					'U_VIEW_TOPIC'	=> (!empty($row['viewtopic'])) ? $row['viewtopic'] : '',					'U_VIEWLOGS'	=> (!empty($row['viewlogs'])) ? $row['viewlogs'] : '')				);			}		}		$template->assign_vars(array(			'S_SHOW_LOGS'	=> (!empty($forum_list)) ? true : false,			'S_HAS_LOGS'	=> (!empty($log)) ? true : false)		);	}	$template->assign_var('S_MCP_ACTION', append_sid("{$phpbb_root_path}mcp.$phpEx"));	make_jumpbox(append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main&amp;mode=forum_view'), 0, false, 'm_', true);}?>
<?php/**** @package acm* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Class for grabbing/handling cached entries, extends acm_file or acm_db depending on the setup* @package acm*/class cache extends acm{	/**	* Get config values	*/	function obtain_config()	{		global $db;		if (($config = $this->get('config')) !== false)		{			$sql = 'SELECT config_name, config_value				FROM ' . CONFIG_TABLE . '				WHERE is_dynamic = 1';			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$config[$row['config_name']] = $row['config_value'];			}			$db->sql_freeresult($result);		}		else		{			$config = $cached_config = array();			$sql = 'SELECT config_name, config_value, is_dynamic				FROM ' . CONFIG_TABLE;			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if (!$row['is_dynamic'])				{					$cached_config[$row['config_name']] = $row['config_value'];				}				$config[$row['config_name']] = $row['config_value'];			}			$db->sql_freeresult($result);			$this->put('config', $cached_config);		}		return $config;	}	/**	* Obtain list of naughty words and build preg style replacement arrays for use by the	* calling script	*/	function obtain_word_list()	{		global $db;		if (($censors = $this->get('_word_censors')) === false)		{			$sql = 'SELECT word, replacement				FROM ' . WORDS_TABLE;			$result = $db->sql_query($sql);			$censors = array();			while ($row = $db->sql_fetchrow($result))			{				$censors['match'][] = get_censor_preg_expression($row['word']);				$censors['replace'][] = $row['replacement'];			}			$db->sql_freeresult($result);			$this->put('_word_censors', $censors);		}		return $censors;	}	/**	* Obtain currently listed icons	*/	function obtain_icons()	{		if (($icons = $this->get('_icons')) === false)		{			global $db;			// Topic icons			$sql = 'SELECT *				FROM ' . ICONS_TABLE . '				ORDER BY icons_order';			$result = $db->sql_query($sql);			$icons = array();			while ($row = $db->sql_fetchrow($result))			{				$icons[$row['icons_id']]['img'] = $row['icons_url'];				$icons[$row['icons_id']]['width'] = (int) $row['icons_width'];				$icons[$row['icons_id']]['height'] = (int) $row['icons_height'];				$icons[$row['icons_id']]['display'] = (bool) $row['display_on_posting'];			}			$db->sql_freeresult($result);			$this->put('_icons', $icons);		}		return $icons;	}	/**	* Obtain ranks	*/	function obtain_ranks()	{		if (($ranks = $this->get('_ranks')) === false)		{			global $db;			$sql = 'SELECT *				FROM ' . RANKS_TABLE . '				ORDER BY rank_min DESC';			$result = $db->sql_query($sql);			$ranks = array();			while ($row = $db->sql_fetchrow($result))			{				if ($row['rank_special'])				{					$ranks['special'][$row['rank_id']] = array(						'rank_title'	=>	$row['rank_title'],						'rank_image'	=>	$row['rank_image']					);				}				else				{					$ranks['normal'][] = array(						'rank_title'	=>	$row['rank_title'],						'rank_min'		=>	$row['rank_min'],						'rank_image'	=>	$row['rank_image']					);				}			}			$db->sql_freeresult($result);			$this->put('_ranks', $ranks);		}		return $ranks;	}	/**	* Obtain allowed extensions	*	* @param mixed $forum_id If false then check for private messaging, if int then check for forum id. If true, then only return extension informations.	*	* @return array allowed extensions array.	*/	function obtain_attach_extensions($forum_id)	{		if (($extensions = $this->get('_extensions')) === false)		{			global $db;			$extensions = array(				'_allowed_post'	=> array(),				'_allowed_pm'	=> array(),			);			// The rule is to only allow those extensions defined. ;)			$sql = 'SELECT e.extension, g.*				FROM ' . EXTENSIONS_TABLE . ' e, ' . EXTENSION_GROUPS_TABLE . ' g				WHERE e.group_id = g.group_id					AND (g.allow_group = 1 OR g.allow_in_pm = 1)';			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$extension = strtolower(trim($row['extension']));				$extensions[$extension] = array(					'display_cat'	=> (int) $row['cat_id'],					'download_mode'	=> (int) $row['download_mode'],					'upload_icon'	=> trim($row['upload_icon']),					'max_filesize'	=> (int) $row['max_filesize'],					'allow_group'	=> $row['allow_group'],					'allow_in_pm'	=> $row['allow_in_pm'],				);				$allowed_forums = ($row['allowed_forums']) ? unserialize(trim($row['allowed_forums'])) : array();				// Store allowed extensions forum wise				if ($row['allow_group'])				{					$extensions['_allowed_post'][$extension] = (!sizeof($allowed_forums)) ? 0 : $allowed_forums;				}				if ($row['allow_in_pm'])				{					$extensions['_allowed_pm'][$extension] = 0;				}			}			$db->sql_freeresult($result);			$this->put('_extensions', $extensions);		}		// Forum post		if ($forum_id === false)		{			// We are checking for private messages, therefore we only need to get the pm extensions...			$return = array('_allowed_' => array());			foreach ($extensions['_allowed_pm'] as $extension => $check)			{				$return['_allowed_'][$extension] = 0;				$return[$extension] = $extensions[$extension];			}			$extensions = $return;		}		else if ($forum_id === true)		{			return $extensions;		}		else		{			$forum_id = (int) $forum_id;			$return = array('_allowed_' => array());			foreach ($extensions['_allowed_post'] as $extension => $check)			{				// Check for allowed forums				if (is_array($check))				{					$allowed = (!in_array($forum_id, $check)) ? false : true;				}				else				{					$allowed = true;				}				if ($allowed)				{					$return['_allowed_'][$extension] = 0;					$return[$extension] = $extensions[$extension];				}			}			$extensions = $return;		}		if (!isset($extensions['_allowed_']))		{			$extensions['_allowed_'] = array();		}		return $extensions;	}	/**	* Obtain active bots	*/	function obtain_bots()	{		if (($bots = $this->get('_bots')) === false)		{			global $db;			switch ($db->sql_layer)			{				case 'mssql':				case 'mssql_odbc':				case 'mssqlnative':					$sql = 'SELECT user_id, bot_agent, bot_ip						FROM ' . BOTS_TABLE . '						WHERE bot_active = 1					ORDER BY LEN(bot_agent) DESC';				break;				case 'firebird':					$sql = 'SELECT user_id, bot_agent, bot_ip						FROM ' . BOTS_TABLE . '						WHERE bot_active = 1					ORDER BY CHAR_LENGTH(bot_agent) DESC';				break;				// LENGTH supported by MySQL, IBM DB2 and Oracle for sure...				default:					$sql = 'SELECT user_id, bot_agent, bot_ip						FROM ' . BOTS_TABLE . '						WHERE bot_active = 1					ORDER BY LENGTH(bot_agent) DESC';				break;			}			$result = $db->sql_query($sql);			$bots = array();			while ($row = $db->sql_fetchrow($result))			{				$bots[] = $row;			}			$db->sql_freeresult($result);			$this->put('_bots', $bots);		}		return $bots;	}	/**	* Obtain cfg file data	*/	function obtain_cfg_items($theme)	{		global $config, $phpbb_root_path;		$parsed_items = array(			'theme'		=> array(),			'template'	=> array(),			'imageset'	=> array()		);		foreach ($parsed_items as $key => $parsed_array)		{			$parsed_array = $this->get('_cfg_' . $key . '_' . $theme[$key . '_path']);			if ($parsed_array === false)			{				$parsed_array = array();			}			$reparse = false;			$filename = $phpbb_root_path . 'styles/' . $theme[$key . '_path'] . '/' . $key . '/' . $key . '.cfg';			if (!file_exists($filename))			{				continue;			}			if (!isset($parsed_array['filetime']) || (($config['load_tplcompile'] && @filemtime($filename) > $parsed_array['filetime'])))			{				$reparse = true;			}			// Re-parse cfg file			if ($reparse)			{				$parsed_array = parse_cfg_file($filename);				$parsed_array['filetime'] = @filemtime($filename);				$this->put('_cfg_' . $key . '_' . $theme[$key . '_path'], $parsed_array);			}			$parsed_items[$key] = $parsed_array;		}		return $parsed_items;	}	/**	* Obtain disallowed usernames	*/	function obtain_disallowed_usernames()	{		if (($usernames = $this->get('_disallowed_usernames')) === false)		{			global $db;			$sql = 'SELECT disallow_username				FROM ' . DISALLOW_TABLE;			$result = $db->sql_query($sql);			$usernames = array();			while ($row = $db->sql_fetchrow($result))			{				$usernames[] = str_replace('%', '.*?', preg_quote(utf8_clean_string($row['disallow_username']), '#'));			}			$db->sql_freeresult($result);			$this->put('_disallowed_usernames', $usernames);		}		return $usernames;	}	/**	* Obtain hooks...	*/	function obtain_hooks()	{		global $phpbb_root_path, $phpEx;		if (($hook_files = $this->get('_hooks')) === false)		{			$hook_files = array();			// Now search for hooks...			$dh = @opendir($phpbb_root_path . 'includes/hooks/');			if ($dh)			{				while (($file = readdir($dh)) !== false)				{					if (strpos($file, 'hook_') === 0 && substr($file, -(strlen($phpEx) + 1)) === '.' . $phpEx)					{						$hook_files[] = substr($file, 0, -(strlen($phpEx) + 1));					}				}				closedir($dh);			}			$this->put('_hooks', $hook_files);		}		return $hook_files;	}}?>
<?php/**** @package install* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Default avatar width/height* @ignore*/define('DEFAULT_AVATAR_X', 80);define('DEFAULT_AVATAR_Y', 80);// Global functions - all functions can be used by convertors// SIMPLE FUNCTIONS/*** Return the preceding value*/function dec($var){	return --$var;}/*** Return the next value*/function inc($var){	return ++$var;}/*** Return whether the value is positive*/function is_positive($n){	return ($n > 0) ? 1 : 0;}/*** Boolean inverse of the value*/function not($var){	return ($var) ? 0 : 1;}/*** Convert a textual value to it's equivalent boolean value** @param string $str String to convert (converts yes, on, y, 1 and true to boolean true)* @return boolean The equivalent value*/function str_to_bool($str){	$str = strtolower($str);	return ($str == 'yes' || $str == 'on' || $str == 'y' || $str == 'true' || $str == '1') ? true : false;}/*** Function to mimic php's empty() function (it is the same)*/function is_empty($mixed){	return empty($mixed);}/*** Convert the name of a user's primary group to the appropriate equivalent phpBB group id** @param string $status The name of the group* @return int The group_id corresponding to the equivalent group*/function str_to_primary_group($status){	switch (ucfirst(strtolower($status)))	{		case 'Administrator':			return get_group_id('administrators');		break;		case 'Super moderator':		case 'Global moderator':		case 'Moderator':			return get_group_id('global_moderators');		break;		case 'Guest':		case 'Anonymous':			return get_group_id('guests');		break;		default:			return get_group_id('registered');		break;	}}/*** Convert a boolean into the appropriate phpBB constant indicating whether the item is locked*/function is_item_locked($bool){	return ($bool) ? ITEM_LOCKED : ITEM_UNLOCKED;}/*** Convert a value from days to seconds*/function days_to_seconds($days){	return ($days * 86400);}/*** Determine whether a user is anonymous and return the appropriate new user_id*/function is_user_anonymous($user_id){	return ($user_id > ANONYMOUS) ? $user_id : ANONYMOUS;}/*** Generate a key value based on existing values** @param int $pad Amount to add to the maximum value* @return int Key value*/function auto_id($pad = 0){	global $auto_id, $convert_row;	if (!empty($convert_row['max_id']))	{		return $convert_row['max_id'] + $pad;	}	return $auto_id + $pad;}/*** Convert a boolean into the appropriate phpBB constant indicating whether the user is active*/function set_user_type($user_active){	return ($user_active) ? USER_NORMAL : USER_INACTIVE;}/*** Convert a value from minutes to hours*/function minutes_to_hours($minutes){	return ($minutes / 3600);}/*** Return the group_id for a given group name*/function get_group_id($group_name){	global $db, $group_mapping;	if (empty($group_mapping))	{		$sql = 'SELECT group_name, group_id			FROM ' . GROUPS_TABLE;		$result = $db->sql_query($sql);		$group_mapping = array();		while ($row = $db->sql_fetchrow($result))		{			$group_mapping[strtoupper($row['group_name'])] = (int) $row['group_id'];		}		$db->sql_freeresult($result);	}	if (!sizeof($group_mapping))	{		add_default_groups();		return get_group_id($group_name);	}	if (isset($group_mapping[strtoupper($group_name)]))	{		return $group_mapping[strtoupper($group_name)];	}	return $group_mapping['REGISTERED'];}/*** Generate the email hash stored in the users table** Note: Deprecated, calls should directly go to phpbb_email_hash()*/function gen_email_hash($email){	return phpbb_email_hash($email);}/*** Convert a boolean into the appropriate phpBB constant indicating whether the topic is locked*/function is_topic_locked($bool){	return (!empty($bool)) ? ITEM_LOCKED : ITEM_UNLOCKED;}/*** Generate a bbcode_uid value*/function make_uid($timestamp){	static $last_timestamp, $last_uid;	if (empty($last_timestamp) || $timestamp != $last_timestamp)	{		$last_uid = substr(base_convert(unique_id(), 16, 36), 0, BBCODE_UID_LEN);	}	$last_timestamp = $timestamp;	return $last_uid;}/*** Validate a website address*/function validate_website($url){	if ($url === 'http://')	{		return '';	}	else if (!preg_match('#^[a-z0-9]+://#i', $url) && strlen($url) > 0)	{		return 'http://' . $url;	}	return $url;}/*** Convert nulls to zeros for fields which allowed a NULL value in the source but not the destination*/function null_to_zero($value){	return ($value === NULL) ? 0 : $value;}/*** Convert nulls to empty strings for fields which allowed a NULL value in the source but not the destination*/function null_to_str($value){	return ($value === NULL) ? '' : $value;}// EXTENDED FUNCTIONS/*** Get old config value*/function get_config_value($config_name){	static $convert_config;	if (!isset($convert_config))	{		$convert_config = get_config();	}	if (!isset($convert_config[$config_name]))	{		return false;	}	return (empty($convert_config[$config_name])) ? '' : $convert_config[$config_name];}/*** Convert an IP address from the hexadecimal notation to normal dotted-quad notation*/function decode_ip($int_ip){	if (!$int_ip)	{		return $int_ip;	}	$hexipbang = explode('.', chunk_split($int_ip, 2, '.'));	// Any mod changing the way ips are stored? Then we are not able to convert and enter the ip "as is" to not "destroy" anything...	if (sizeof($hexipbang) < 4)	{		return $int_ip;	}	return hexdec($hexipbang[0]) . '.' . hexdec($hexipbang[1]) . '.' . hexdec($hexipbang[2]) . '.' . hexdec($hexipbang[3]);}/*** Reverse the encoding of wild-carded bans*/function decode_ban_ip($int_ip){	return str_replace('255', '*', decode_ip($int_ip));}/*** Determine the MIME-type of a specified filename* This does not actually inspect the file, but simply uses the file extension*/function mimetype($filename){	if (!preg_match('/\.([a-z0-9]+)$/i', $filename, $m))	{		return 'application/octet-stream';	}	switch (strtolower($m[1]))	{		case 'zip':		return 'application/zip';		case 'jpeg':	return 'image/jpeg';		case 'jpg':		return 'image/jpeg';		case 'jpe':		return 'image/jpeg';		case 'png':		return 'image/png';		case 'gif':		return 'image/gif';		case 'htm':		case 'html':	return 'text/html';		case 'tif':		return 'image/tiff';		case 'tiff':	return 'image/tiff';		case 'ras':		return 'image/x-cmu-raster';		case 'pnm':		return 'image/x-portable-anymap';		case 'pbm':		return 'image/x-portable-bitmap';		case 'pgm':		return 'image/x-portable-graymap';		case 'ppm':		return 'image/x-portable-pixmap';		case 'rgb':		return 'image/x-rgb';		case 'xbm':		return 'image/x-xbitmap';		case 'xpm':		return 'image/x-xpixmap';		case 'xwd':		return 'image/x-xwindowdump';		case 'z':		return 'application/x-compress';		case 'gtar':	return 'application/x-gtar';		case 'tgz':		return 'application/x-gtar';		case 'gz':		return 'application/x-gzip';		case 'tar':		return 'application/x-tar';		case 'xls':		return 'application/excel';		case 'pdf':		return 'application/pdf';		case 'ppt':		return 'application/powerpoint';		case 'rm':		return 'application/vnd.rn-realmedia';		case 'wma':		return 'audio/x-ms-wma';		case 'swf':		return 'application/x-shockwave-flash';		case 'ief':		return 'image/ief';		case 'doc':		case 'dot':		case 'wrd':		return 'application/msword';		case 'ai':		case 'eps':		case 'ps':		return 'application/postscript';		case 'asc':		case 'txt':		case 'c':		case 'cc':		case 'h':		case 'hh':		case 'cpp':		case 'hpp':		case 'php':		case 'php3':	return 'text/plain';		default: 		return 'application/octet-stream';	}}/*** Obtain the dimensions of all remotely hosted avatars* This should only be called from execute_last* There can be significant network overhead if there are a large number of remote avatars* @todo Look at the option of allowing the user to decide whether this is called or to force the dimensions*/function remote_avatar_dims(){	global $db;	$sql = 'SELECT user_id, user_avatar		FROM ' . USERS_TABLE . '		WHERE user_avatar_type = ' . AVATAR_REMOTE;	$result = $db->sql_query($sql);	$remote_avatars = array();	while ($row = $db->sql_fetchrow($result))	{		$remote_avatars[(int) $row['user_id']] = $row['user_avatar'];	}	$db->sql_freeresult($result);	foreach ($remote_avatars as $user_id => $avatar)	{		$width = (int) get_remote_avatar_dim($avatar, 0);		$height = (int) get_remote_avatar_dim($avatar, 1);		$sql = 'UPDATE ' . USERS_TABLE . '			SET user_avatar_width = ' . (int) $width . ', user_avatar_height = ' . (int) $height . '			WHERE user_id = ' . $user_id;		$db->sql_query($sql);	}}function import_avatar_gallery($gallery_name = '', $subdirs_as_galleries = false){	global $config, $convert, $phpbb_root_path, $user;	$relative_path = empty($convert->convertor['source_path_absolute']);	if (empty($convert->convertor['avatar_gallery_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_GALLERY_PATH'], 'import_avatar_gallery()'), __LINE__, __FILE__);	}	$src_path = relative_base(path($convert->convertor['avatar_gallery_path'], $relative_path), $relative_path);	if (is_dir($src_path))	{		// Do not die on failure... safe mode restrictions may be in effect.		copy_dir($convert->convertor['avatar_gallery_path'], path($config['avatar_gallery_path']) . $gallery_name, !$subdirs_as_galleries, false, false, $relative_path);		// only doing 1 level deep. (ibf 1.x)		// notes: ibf has 2 tiers: directly in the avatar directory for base gallery (handled in the above statement), plus subdirs(handled below).		// recursive subdirs ignored. -- i don't know if other forums support recursive galleries. if they do, this following code could be upgraded to be recursive.		if ($subdirs_as_galleries)		{			$dirlist = array();			if ($handle = @opendir($src_path))			{				while ($entry = readdir($handle))				{					if ($entry[0] == '.' || $entry == 'CVS' || $entry == 'index.htm')					{						continue;					}					if (is_dir($src_path . $entry))					{						$dirlist[] = $entry;					}				}				closedir($handle);			}			else if ($dir = @dir($src_path))			{				while ($entry = $dir->read())				{					if ($entry[0] == '.' || $entry == 'CVS' || $entry == 'index.htm')					{						continue;					}					if (is_dir($src_path . $entry))					{						$dirlist[] = $entry;					}				}				$dir->close();			}			for ($i = 0; $i < sizeof($dirlist); ++$i)			{				$dir = $dirlist[$i];				// Do not die on failure... safe mode restrictions may be in effect.				copy_dir(path($convert->convertor['avatar_gallery_path'], $relative_path) . $dir, path($config['avatar_gallery_path']) . $dir, true, false, false, $relative_path);			}		}	}}function import_attachment_files($category_name = ''){	global $config, $convert, $phpbb_root_path, $db, $user;	$sql = 'SELECT config_value AS upload_path		FROM ' . CONFIG_TABLE . "		WHERE config_name = 'upload_path'";	$result = $db->sql_query($sql);	$config['upload_path'] = $db->sql_fetchfield('upload_path');	$db->sql_freeresult($result);	$relative_path = empty($convert->convertor['source_path_absolute']);	if (empty($convert->convertor['upload_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_UPLOAD_DIR'], 'import_attachment_files()'), __LINE__, __FILE__);	}	if (is_dir(relative_base(path($convert->convertor['upload_path'], $relative_path), $relative_path)))	{		copy_dir($convert->convertor['upload_path'], path($config['upload_path']) . $category_name, true, false, true, $relative_path);	}}function attachment_forum_perms($forum_id){	if (!is_array($forum_id))	{		$forum_id = array($forum_id);	}	return serialize($forum_id);}// base64todec function// -> from php manual?function base64_unpack($string){	$chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ+-';	$base = strlen($chars);	$length = strlen($string);	$number = 0;	for ($i = 1; $i <= $length; $i++)	{		$pos = $length - $i;		$operand = strpos($chars, substr($string, $pos, 1));		$exponent = pow($base, $i-1);		$dec_value = $operand * $exponent;		$number += $dec_value;	}	return $number;}function _import_check($config_var, $source, $use_target){	global $convert, $config;	$result = array(		'orig_source'	=> $source,		'copied'		=> false,		'relative_path'	=> (empty($convert->convertor['source_path_absolute'])) ? true : false,	);	// copy file will prepend $phpBB_root_path	$target = $config[$config_var] . '/' . utf8_basename(($use_target === false) ? $source : $use_target);	if (!empty($convert->convertor[$config_var]) && strpos($source, $convert->convertor[$config_var]) !== 0)	{		$source = $convert->convertor[$config_var] . $source;	}	$result['source'] = $source;	if (file_exists(relative_base($source, $result['relative_path'], __LINE__, __FILE__)))	{		$result['copied'] = copy_file($source, $target, false, false, $result['relative_path']);	}	if ($result['copied'])	{		$result['target'] = utf8_basename($target);	}	else	{		$result['target'] = ($use_target !== false) ? $result['orig_source'] : utf8_basename($target);	}	return $result;}function import_attachment($source, $use_target = false){	if (empty($source))	{		return '';	}	global $convert, $phpbb_root_path, $config, $user;	if (empty($convert->convertor['upload_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_UPLOAD_DIR'], 'import_attachment()'), __LINE__, __FILE__);	}	$result = _import_check('upload_path', $source, $use_target);	if ($result['copied'])	{		// Thumbnails?		if (is_array($convert->convertor['thumbnails']))		{			$thumb_dir = $convert->convertor['thumbnails'][0];			$thumb_prefix = $convert->convertor['thumbnails'][1];			$thumb_source = $thumb_dir . $thumb_prefix . utf8_basename($result['source']);			if (strpos($thumb_source, $convert->convertor['upload_path']) !== 0)			{				$thumb_source = $convert->convertor['upload_path'] . $thumb_source;			}			$thumb_target = $config['upload_path'] . '/thumb_' . $result['target'];			if (file_exists(relative_base($thumb_source, $result['relative_path'], __LINE__, __FILE__)))			{				copy_file($thumb_source, $thumb_target, false, false, $result['relative_path']);			}		}	}	return $result['target'];}function import_rank($source, $use_target = false){	if (empty($source))	{		return '';	}	global $convert, $phpbb_root_path, $config, $user;	if (!isset($convert->convertor['ranks_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_RANKS_PATH'], 'import_rank()'), __LINE__, __FILE__);	}	$result = _import_check('ranks_path', $source, $use_target);	return $result['target'];}function import_smiley($source, $use_target = false){	if (empty($source))	{		return '';	}	global $convert, $phpbb_root_path, $config, $user;	if (!isset($convert->convertor['smilies_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_SMILIES_PATH'], 'import_smiley()'), __LINE__, __FILE__);	}	$result = _import_check('smilies_path', $source, $use_target);	return $result['target'];}/**/function import_avatar($source, $use_target = false, $user_id = false){	if (empty($source) || preg_match('#^https?:#i', $source) || preg_match('#blank\.(gif|png)$#i', $source))	{		return;	}	global $convert, $phpbb_root_path, $config, $user;	if (!isset($convert->convertor['avatar_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_AVATAR_PATH'], 'import_avatar()'), __LINE__, __FILE__);	}	if ($use_target === false && $user_id !== false)	{		$use_target = $config['avatar_salt'] . '_' . $user_id . '.' . substr(strrchr($source, '.'), 1);	}	$result = _import_check('avatar_path', $source, $use_target);	return ((!empty($user_id)) ? $user_id : $use_target) . '.' . substr(strrchr($source, '.'), 1);}/*** @todo all image dimension functions below (there are a *lot*) should get revisited and converted to one or two functions (no more needed, really).*//*** Calculate the size of the specified image* Called from the following functions for calculating the size of specific image types*/function get_image_dim($source){	if (empty($source))	{		return array(0, 0);	}	global $convert;	$relative_path = empty($convert->convertor['source_path_absolute']);	if (file_exists(relative_base($source, $relative_path)))	{		$image = relative_base($source, $relative_path);		return @getimagesize($image);	}	return false;}/*** Obtain the width of the specified smilie*/function get_smiley_width($src){	return get_smiley_dim($src, 0);}/*** Obtain the height of the specified smilie*/function get_smiley_height($src){	return get_smiley_dim($src, 1);}/*** Obtain the size of the specified smilie (using the cache if possible) and cache the value*/function get_smiley_dim($source, $axis){	if (empty($source))	{		return 15;	}	static $smiley_cache = array();	if (isset($smiley_cache[$source]))	{		return $smiley_cache[$source][$axis];	}	global $convert, $phpbb_root_path, $config, $user;	$orig_source = $source;	if (!isset($convert->convertor['smilies_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_SMILIES_PATH'], 'get_smiley_dim()'), __LINE__, __FILE__);	}	if (!empty($convert->convertor['smilies_path']) && strpos($source, $convert->convertor['smilies_path']) !== 0)	{		$source = $convert->convertor['smilies_path'] . $source;	}	$smiley_cache[$orig_source] = get_image_dim($source);	if (empty($smiley_cache[$orig_source]) || empty($smiley_cache[$orig_source][0]) || empty($smiley_cache[$orig_source][1]))	{		$smiley_cache[$orig_source] = array(15, 15);		return 15;	}	return $smiley_cache[$orig_source][$axis];}/*** Obtain the width of the specified avatar*/function get_avatar_width($src, $func = false, $arg1 = false, $arg2 = false){	return get_avatar_dim($src, 0, $func, $arg1, $arg2);}/*** Obtain the height of the specified avatar*/function get_avatar_height($src, $func = false, $arg1 = false, $arg2 = false){	return get_avatar_dim($src, 1, $func, $arg1, $arg2);}/***/function get_avatar_dim($src, $axis, $func = false, $arg1 = false, $arg2 = false){	$avatar_type = AVATAR_UPLOAD;	if ($func)	{		if ($arg1 || $arg2)		{			$ary = array($arg1);			if ($arg2)			{				$ary[] = $arg2;			}			$avatar_type = call_user_func_array($func, $ary);		}		else		{			$avatar_type = call_user_func($func);		}	}	switch ($avatar_type)	{		case AVATAR_UPLOAD:			return get_upload_avatar_dim($src, $axis);		break;		case AVATAR_GALLERY:			return get_gallery_avatar_dim($src, $axis);		break;		case AVATAR_REMOTE:			 // see notes on this functions usage and (hopefully) model $func to avoid this accordingly			return get_remote_avatar_dim($src, $axis);		break;		default:			$default_x = (defined('DEFAULT_AVATAR_X_CUSTOM')) ? DEFAULT_AVATAR_X_CUSTOM : DEFAULT_AVATAR_X;			$default_y = (defined('DEFAULT_AVATAR_Y_CUSTOM')) ? DEFAULT_AVATAR_Y_CUSTOM : DEFAULT_AVATAR_Y;			return $axis ? $default_y : $default_x;		break;	}}/*** Obtain the size of the specified uploaded avatar (using the cache if possible) and cache the value*/function get_upload_avatar_dim($source, $axis){	static $cachedims = false;	static $cachekey = false;	if (empty($source))	{		return 0;	}	if ($cachekey == $source)	{		return $cachedims[$axis];	}	$orig_source = $source;	if (substr($source, 0, 7) == 'upload:')	{		$source = substr($source, 7);	}	global $convert, $phpbb_root_path, $config, $user;	if (!isset($convert->convertor['avatar_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_AVATAR_PATH'], 'get_upload_avatar_dim()'), __LINE__, __FILE__);	}	if (!empty($convert->convertor['avatar_path']) && strpos($source, $convert->convertor['avatar_path']) !== 0)	{		$source = path($convert->convertor['avatar_path'], empty($convert->convertor['source_path_absolute'])) . $source;	}	$cachedims = get_image_dim($source);	if (empty($cachedims) || empty($cachedims[0]) || empty($cachedims[1]))	{		$default_x = (defined('DEFAULT_AVATAR_X_CUSTOM')) ? DEFAULT_AVATAR_X_CUSTOM : DEFAULT_AVATAR_X;		$default_y = (defined('DEFAULT_AVATAR_Y_CUSTOM')) ? DEFAULT_AVATAR_Y_CUSTOM : DEFAULT_AVATAR_Y;		$cachedims = array($default_x, $default_y);	}	return $cachedims[$axis];}/*** Obtain the size of the specified gallery avatar (using the cache if possible) and cache the value*/function get_gallery_avatar_dim($source, $axis){	if (empty($source))	{		return 0;	}	static $avatar_cache = array();	if (isset($avatar_cache[$source]))	{		return $avatar_cache[$source][$axis];	}	global $convert, $phpbb_root_path, $config, $user;	$orig_source = $source;	if (!isset($convert->convertor['avatar_gallery_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_GALLERY_PATH'], 'get_gallery_avatar_dim()'), __LINE__, __FILE__);	}	if (!empty($convert->convertor['avatar_gallery_path']) && strpos($source, $convert->convertor['avatar_gallery_path']) !== 0)	{		$source = path($convert->convertor['avatar_gallery_path'], empty($convert->convertor['source_path_absolute'])) . $source;	}	$avatar_cache[$orig_source] = get_image_dim($source);	if (empty($avatar_cache[$orig_source]) || empty($avatar_cache[$orig_source][0]) || empty($avatar_cache[$orig_source][1]))	{		$default_x = (defined('DEFAULT_AVATAR_X_CUSTOM')) ? DEFAULT_AVATAR_X_CUSTOM : DEFAULT_AVATAR_X;		$default_y = (defined('DEFAULT_AVATAR_Y_CUSTOM')) ? DEFAULT_AVATAR_Y_CUSTOM : DEFAULT_AVATAR_Y;		$avatar_cache[$orig_source] = array($default_x, $default_y);	}	return $avatar_cache[$orig_source][$axis];}/*** Obtain the size of the specified remote avatar (using the cache if possible) and cache the value* Whilst it's unlikely that remote avatars will be duplicated, it is possible so caching seems the best option* This should only be called from a post processing step due to the possibility of network timeouts*/function get_remote_avatar_dim($src, $axis){	if (empty($src))	{		return 0;	}	static $remote_avatar_cache = array();	// an ugly hack: we assume that the dimensions of each remote avatar are accessed exactly twice (x and y)	if (isset($remote_avatar_cache[$src]))	{		$retval = $remote_avatar_cache[$src][$axis];		unset($remote_avatar_cache);		return $retval;	}	$url_info = @parse_url($src);	if (empty($url_info['host']))	{		return 0;	}	$host = $url_info['host'];	$port = (isset($url_info['port'])) ? $url_info['port'] : 0;	$protocol = (isset($url_info['scheme'])) ? $url_info['scheme'] : 'http';	if (empty($port))	{		switch(strtolower($protocol))		{			case 'ftp':				$port = 21;				break;			case 'https':				$port = 443;				break;			default:				$port = 80;		}	}	$timeout = @ini_get('default_socket_timeout');	@ini_set('default_socket_timeout', 2);	// We're just trying to reach the server to avoid timeouts	$fp = @fsockopen($host, $port, $errno, $errstr, 1);	if ($fp)	{		$remote_avatar_cache[$src] = @getimagesize($src);		fclose($fp);	}	$default_x 	= (defined('DEFAULT_AVATAR_X_CUSTOM')) ? DEFAULT_AVATAR_X_CUSTOM : DEFAULT_AVATAR_X;	$default_y 	= (defined('DEFAULT_AVATAR_Y_CUSTOM')) ? DEFAULT_AVATAR_Y_CUSTOM : DEFAULT_AVATAR_Y;	$default 	= array($default_x, $default_y);	if (empty($remote_avatar_cache[$src]) || empty($remote_avatar_cache[$src][0]) || empty($remote_avatar_cache[$src][1]))	{		$remote_avatar_cache[$src] = $default;	}	else	{		// We trust gallery and uploaded avatars to conform to the size settings; we might have to adjust here		if ($remote_avatar_cache[$src][0] > $default_x || $remote_avatar_cache[$src][1] > $default_y)		{			$bigger = ($remote_avatar_cache[$src][0] > $remote_avatar_cache[$src][1]) ? 0 : 1;			$ratio = $default[$bigger] / $remote_avatar_cache[$src][$bigger];			$remote_avatar_cache[$src][0] = (int)($remote_avatar_cache[$src][0] * $ratio);			$remote_avatar_cache[$src][1] = (int)($remote_avatar_cache[$src][1] * $ratio);		}	}	@ini_set('default_socket_timeout', $timeout);	return $remote_avatar_cache[$src][$axis];}function set_user_options(){	global $convert_row;	// Key need to be set in row, else default value is chosen	$keyoptions = array(		'viewimg'		=> array('bit' => 0, 'default' => 1),		'viewflash'		=> array('bit' => 1, 'default' => 1),		'viewsmilies'	=> array('bit' => 2, 'default' => 1),		'viewsigs'		=> array('bit' => 3, 'default' => 1),		'viewavatars'	=> array('bit' => 4, 'default' => 1),		'viewcensors'	=> array('bit' => 5, 'default' => 1),		'attachsig'		=> array('bit' => 6, 'default' => 0),		'bbcode'		=> array('bit' => 8, 'default' => 1),		'smilies'		=> array('bit' => 9, 'default' => 1),		'popuppm'		=> array('bit' => 10, 'default' => 0),		'sig_bbcode'	=> array('bit' => 15, 'default' => 1),		'sig_smilies'	=> array('bit' => 16, 'default' => 1),		'sig_links'		=> array('bit' => 17, 'default' => 1),	);	$option_field = 0;	foreach ($keyoptions as $key => $key_ary)	{		$value = (isset($convert_row[$key])) ? (int) $convert_row[$key] : $key_ary['default'];		if ($value && !($option_field & 1 << $key_ary['bit']))		{			$option_field += 1 << $key_ary['bit'];		}	}	return $option_field;}/*** Index messages on the fly as we convert them* @todo naderman, can you check that this works with the new search plugins as it's use is currently disabled (and thus untested)function search_indexing($message = ''){	global $fulltext_search, $convert_row;	if (!isset($convert_row['post_id']))	{		return;	}	if (!$message)	{		if (!isset($convert_row['message']))		{			return;		}		$message = $convert_row['message'];	}	$title = (isset($convert_row['title'])) ? $convert_row['title'] : '';	$fulltext_search->index('post', $convert_row['post_id'], $message, $title, $convert_row['poster_id'], $convert_row['forum_id']);}*/function make_unique_filename($filename){	if (!strlen($filename))	{		$filename = md5(unique_id()) . '.dat';	}	else if ($filename[0] == '.')	{		$filename = md5(unique_id()) . $filename;	}	else if (preg_match('/\.([a-z]+)$/i', $filename, $m))	{		$filename = preg_replace('/\.([a-z]+)$/i', '_' . md5(unique_id()) . '.\1', $filename);	}	else	{		$filename .= '_' . md5(unique_id()) . '.dat';	}	return $filename;}function words_unique(&$words){	reset($words);	$return_array = array();	$word = current($words);	do	{		$return_array[$word] = $word;	}	while ($word = next($words));	return $return_array;}/*** Adds a user to the specified group and optionally makes them a group leader* This function does not create the group if it does not exist and so should only be called after the groups have been created*/function add_user_group($group_id, $user_id, $group_leader=false){	global $convert, $phpbb_root_path, $config, $user, $db;	$sql = 'INSERT INTO ' . USER_GROUP_TABLE . ' ' . $db->sql_build_array('INSERT', array(		'group_id'		=> $group_id,		'user_id'		=> $user_id,		'group_leader'	=> ($group_leader) ? 1 : 0,		'user_pending'	=> 0));	$db->sql_query($sql);}// STANDALONE FUNCTIONS/*** Add users to the pre-defined "special" groups** @param string $group The name of the special group to add to* @param string $select_query An SQL query to retrieve the user(s) to add to the group*/function user_group_auth($group, $select_query, $use_src_db){	global $convert, $phpbb_root_path, $config, $user, $db, $src_db, $same_db;	if (!in_array($group, array('guests', 'registered', 'registered_coppa', 'global_moderators', 'administrators', 'bots')))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_WRONG_GROUP'], $group, 'user_group_auth()'), __LINE__, __FILE__, true);		return;	}	$sql = 'SELECT group_id		FROM ' . GROUPS_TABLE . "		WHERE group_name = '" . $db->sql_escape(strtoupper($group)) . "'";	$result = $db->sql_query($sql);	$group_id = (int) $db->sql_fetchfield('group_id');	$db->sql_freeresult($result);	if (!$group_id)	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_GROUP'], $group, 'user_group_auth()'), __LINE__, __FILE__, true);		return;	}	if ($same_db || !$use_src_db)	{		$sql = 'INSERT INTO ' . USER_GROUP_TABLE . ' (user_id, group_id, user_pending)			' . str_replace('{' . strtoupper($group) . '}', $group_id . ', 0', $select_query);		$db->sql_query($sql);	}	else	{		$result = $src_db->sql_query(str_replace('{' . strtoupper($group) . '}', $group_id . ' ', $select_query));		while ($row = $src_db->sql_fetchrow($result))		{			// this might become quite a lot of INSERTS unfortunately			$sql = 'INSERT INTO ' . USER_GROUP_TABLE . " (user_id, group_id, user_pending)				VALUES ({$row['user_id']}, $group_id, 0)";			$db->sql_query($sql);		}		$src_db->sql_freeresult($result);	}}/*** Retrieves configuration information from the source forum and caches it as an array* Both database and file driven configuration formats can be handled* (the type used is specified in $config_schema, see convert_phpbb20.php for more details)*/function get_config(){	static $convert_config;	global $user;	if (isset($convert_config))	{		return $convert_config;	}	global $src_db, $same_db, $phpbb_root_path, $config;	global $convert;	if ($convert->config_schema['table_format'] != 'file')	{		if ($convert->mysql_convert && $same_db)		{			$src_db->sql_query("SET NAMES 'binary'");		}		$sql = 'SELECT * FROM ' . $convert->src_table_prefix . $convert->config_schema['table_name'];		$result = $src_db->sql_query($sql);		$row = $src_db->sql_fetchrow($result);		if (!$row)		{			$convert->p_master->error($user->lang['CONV_ERROR_GET_CONFIG'], __LINE__, __FILE__);		}	}	if (is_array($convert->config_schema['table_format']))	{		$convert_config = array();		list($key, $val) = each($convert->config_schema['table_format']);		do		{			$convert_config[$row[$key]] = $row[$val];		}		while ($row = $src_db->sql_fetchrow($result));		$src_db->sql_freeresult($result);		if ($convert->mysql_convert && $same_db)		{			$src_db->sql_query("SET NAMES 'utf8'");		}	}	else if ($convert->config_schema['table_format'] == 'file')	{		$filename = $convert->options['forum_path'] . '/' . $convert->config_schema['filename'];		if (!file_exists($filename))		{			$convert->p_master->error($user->lang['FILE_NOT_FOUND'] . ': ' . $filename, __LINE__, __FILE__);		}		if (isset($convert->config_schema['array_name']))		{			unset($convert->config_schema['array_name']);		}		$convert_config = extract_variables_from_file($filename);		if (!empty($convert->config_schema['array_name']))		{			$convert_config = $convert_config[$convert->config_schema['array_name']];		}	}	else	{		$convert_config = $row;		if ($convert->mysql_convert && $same_db)		{			$src_db->sql_query("SET NAMES 'utf8'");		}	}	if (!sizeof($convert_config))	{		$convert->p_master->error($user->lang['CONV_ERROR_CONFIG_EMPTY'], __LINE__, __FILE__);	}	return $convert_config;}/*** Transfers the relevant configuration information from the source forum* The mapping of fields is specified in $config_schema, see convert_phpbb20.php for more details*/function restore_config($schema){	global $db, $config;	$convert_config = get_config();	foreach ($schema['settings'] as $config_name => $src)	{		if (preg_match('/(.*)\((.*)\)/', $src, $m))		{			$var = (empty($m[2]) || empty($convert_config[$m[2]])) ? "''" : "'" . addslashes($convert_config[$m[2]]) . "'";			$exec = '$config_value = ' . $m[1] . '(' . $var . ');';			eval($exec);		}		else		{			if ($schema['table_format'] != 'file' || empty($schema['array_name']))			{				$config_value = (isset($convert_config[$src])) ? $convert_config[$src] : '';			}			else if (!empty($schema['array_name']))			{				$src_ary = $schema['array_name'];				$config_value = (isset($convert_config[$src_ary][$src])) ? $convert_config[$src_ary][$src] : '';			}   		}		if ($config_value !== '')		{			// Most are...			if (is_string($config_value))			{				$config_value = truncate_string(utf8_htmlspecialchars($config_value), 255, 255, false);			}			set_config($config_name, $config_value);		}	}}/*** Update the count of PM's in custom folders for all users*/function update_folder_pm_count(){	global $db, $convert, $user;	$sql = 'SELECT user_id, folder_id, COUNT(msg_id) as num_messages		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE folder_id NOT IN (' . PRIVMSGS_NO_BOX . ', ' . PRIVMSGS_HOLD_BOX . ', ' . PRIVMSGS_INBOX . ', ' . PRIVMSGS_OUTBOX . ', ' . PRIVMSGS_SENTBOX . ')		GROUP BY folder_id, user_id';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$db->sql_query('UPDATE ' . PRIVMSGS_FOLDER_TABLE . ' SET pm_count = ' . $row['num_messages'] . '			WHERE user_id = ' . $row['user_id'] . ' AND folder_id = ' . $row['folder_id']);	}	$db->sql_freeresult($result);}// Functions mainly used by the main convertor scriptfunction path($path, $path_relative = true){	if ($path === false)	{		return '';	}	if (substr($path, -1) != '/')	{		$path .= '/';	}	if (!$path_relative)	{		return $path;	}	if (substr($path, 0, 1) == '/')	{		$path = substr($path, 1);	}	return $path;}/*** Extract the variables defined in a configuration file* @todo As noted by Xore we need to look at this from a security perspective*/function extract_variables_from_file($_filename){	include($_filename);	$vars = get_defined_vars();	unset($vars['_filename']);	return $vars;}function get_path($src_path, $src_url, $test_file){	global $config, $phpbb_root_path, $phpEx;	$board_config = get_config();	$test_file = preg_replace('/\.php$/i', ".$phpEx", $test_file);	$src_path = path($src_path);	if (@file_exists($phpbb_root_path . $src_path . $test_file))	{		return $src_path;	}	if (!empty($src_url) && !empty($board_config['server_name']))	{		if (!preg_match('#https?://([^/]+)(.*)#i', $src_url, $m))		{			return false;		}		if ($m[1] != $board_config['server_name'])		{			return false;		}		$url_parts = explode('/', $m[2]);		if (substr($src_url, -1) != '/')		{			if (preg_match('/.*\.([a-z0-9]{3,4})$/i', $url_parts[sizeof($url_parts) - 1]))			{				$url_parts[sizeof($url_parts) - 1] = '';			}			else			{				$url_parts[] = '';			}		}		$script_path = $board_config['script_path'];		if (substr($script_path, -1) == '/')		{			$script_path = substr($script_path, 0, -1);		}		$path_array = array();		$phpbb_parts = explode('/', $script_path);		for ($i = 0; $i < sizeof($url_parts); ++$i)		{			if ($i < sizeof($phpbb_parts[$i]) && $url_parts[$i] == $phpbb_parts[$i])			{				$path_array[] = $url_parts[$i];				unset($url_parts[$i]);			}			else			{				$path = '';				for ($j = $i; $j < sizeof($phpbb_parts); ++$j)				{					$path .= '../';				}				$path .= implode('/', $url_parts);				break;			}		}		if (!empty($path))		{			if (@file_exists($phpbb_root_path . $path . $test_file))			{				return $path;			}		}	}	return false;}function compare_table($tables, $tablename, &$prefixes){	for ($i = 0, $table_size = sizeof($tables); $i < $table_size; ++$i)	{		if (preg_match('/(.*)' . $tables[$i] . '$/', $tablename, $m))		{			if (empty($m[1]))			{				$m[1] = '*';			}			if (isset($prefixes[$m[1]]))			{				$prefixes[$m[1]]++;			}			else			{				$prefixes[$m[1]] = 1;			}		}	}}/*** Grant permissions to a specified user or group** @param string $ug_type user|group|user_role|group_role* @param mixed $forum_id forum ids (array|int|0) -> 0 == all forums* @param mixed $ug_id [int] user_id|group_id : [string] usergroup name* @param mixed $acl_list [string] acl entry : [array] acl entries : [string] role entry* @param int $setting ACL_YES|ACL_NO|ACL_NEVER*/function mass_auth($ug_type, $forum_id, $ug_id, $acl_list, $setting = ACL_NO){	global $db, $convert, $user, $config;	static $acl_option_ids, $group_ids;	if (($ug_type == 'group' || $ug_type == 'group_role') && is_string($ug_id))	{		if (!isset($group_ids[$ug_id]))		{			$sql = 'SELECT group_id				FROM ' . GROUPS_TABLE . "				WHERE group_name = '" . $db->sql_escape(strtoupper($ug_id)) . "'";			$result = $db->sql_query_limit($sql, 1);			$id = (int) $db->sql_fetchfield('group_id');			$db->sql_freeresult($result);			if (!$id)			{				return;			}			$group_ids[$ug_id] = $id;		}		$ug_id = (int) $group_ids[$ug_id];	}	$table = ($ug_type == 'user' || $ug_type == 'user_role') ? ACL_USERS_TABLE : ACL_GROUPS_TABLE;	$id_field = ($ug_type == 'user' || $ug_type == 'user_role') ? 'user_id' : 'group_id';	// Role based permissions are the simplest to handle so check for them first	if ($ug_type == 'user_role' || $ug_type == 'group_role')	{		if (is_numeric($forum_id))		{			$sql = 'SELECT role_id				FROM ' . ACL_ROLES_TABLE . "				WHERE role_name = 'ROLE_" . $db->sql_escape($acl_list) . "'";			$result = $db->sql_query_limit($sql, 1);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			// If we have no role id there is something wrong here			if ($row)			{				$sql = "INSERT INTO $table ($id_field, forum_id, auth_role_id) VALUES ($ug_id, $forum_id, " . $row['role_id'] . ')';				$db->sql_query($sql);			}		}		return;	}	// Build correct parameters	$auth = array();	if (!is_array($acl_list))	{		$auth = array($acl_list => $setting);	}	else	{		foreach ($acl_list as $auth_option)		{			$auth[$auth_option] = $setting;		}	}	unset($acl_list);	if (!is_array($forum_id))	{		$forum_id = array($forum_id);	}	// Set any flags as required	foreach ($auth as $auth_option => $acl_setting)	{		$flag = substr($auth_option, 0, strpos($auth_option, '_') + 1);		if (empty($auth[$flag]))		{			$auth[$flag] = $acl_setting;		}	}	if (!is_array($acl_option_ids) || empty($acl_option_ids))	{		$sql = 'SELECT auth_option_id, auth_option			FROM ' . ACL_OPTIONS_TABLE;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$acl_option_ids[$row['auth_option']] = $row['auth_option_id'];		}		$db->sql_freeresult($result);	}	$sql_forum = 'AND ' . $db->sql_in_set('a.forum_id', array_map('intval', $forum_id), false, true);	$sql = ($ug_type == 'user') ? 'SELECT o.auth_option_id, o.auth_option, a.forum_id, a.auth_setting FROM ' . ACL_USERS_TABLE . ' a, ' . ACL_OPTIONS_TABLE . " o WHERE a.auth_option_id = o.auth_option_id $sql_forum AND a.user_id = $ug_id" : 'SELECT o.auth_option_id, o.auth_option, a.forum_id, a.auth_setting FROM ' . ACL_GROUPS_TABLE . ' a, ' . ACL_OPTIONS_TABLE . " o WHERE a.auth_option_id = o.auth_option_id $sql_forum AND a.group_id = $ug_id";	$result = $db->sql_query($sql);	$cur_auth = array();	while ($row = $db->sql_fetchrow($result))	{		$cur_auth[$row['forum_id']][$row['auth_option_id']] = $row['auth_setting'];	}	$db->sql_freeresult($result);	$sql_ary = array();	foreach ($forum_id as $forum)	{		foreach ($auth as $auth_option => $setting)		{			$auth_option_id = $acl_option_ids[$auth_option];			if (!$auth_option_id)			{				continue;			}			switch ($setting)			{				case ACL_NO:					if (isset($cur_auth[$forum][$auth_option_id]))					{						$sql_ary['delete'][] = "DELETE FROM $table							WHERE forum_id = $forum								AND auth_option_id = $auth_option_id								AND $id_field = $ug_id";					}				break;				default:					if (!isset($cur_auth[$forum][$auth_option_id]))					{						$sql_ary['insert'][] = "$ug_id, $forum, $auth_option_id, $setting";					}					else if ($cur_auth[$forum][$auth_option_id] != $setting)					{						$sql_ary['update'][] = "UPDATE " . $table . "							SET auth_setting = $setting							WHERE $id_field = $ug_id								AND forum_id = $forum								AND auth_option_id = $auth_option_id";					}			}		}	}	unset($cur_auth);	$sql = '';	foreach ($sql_ary as $sql_type => $sql_subary)	{		switch ($sql_type)		{			case 'insert':				switch ($db->sql_layer)				{					case 'mysql':					case 'mysql4':						$sql = 'VALUES ' . implode(', ', preg_replace('#^(.*?)$#', '(\1)', $sql_subary));					break;					case 'mssql':					case 'sqlite':					case 'mssqlnative':						$sql = implode(' UNION ALL ', preg_replace('#^(.*?)$#', 'SELECT \1', $sql_subary));					break;					default:						foreach ($sql_subary as $sql)						{							$sql = "INSERT INTO $table ($id_field, forum_id, auth_option_id, auth_setting) VALUES ($sql)";							$db->sql_query($sql);							$sql = '';						}				}				if ($sql != '')				{					$sql = "INSERT INTO $table ($id_field, forum_id, auth_option_id, auth_setting) $sql";					$db->sql_query($sql);				}			break;			case 'update':			case 'delete':				foreach ($sql_subary as $sql)				{					$db->sql_query($sql);					$sql = '';				}			break;		}		unset($sql_ary[$sql_type]);	}	unset($sql_ary);}/*** Update the count of unread private messages for all users*/function update_unread_count(){	global $db;	$sql = 'SELECT user_id, COUNT(msg_id) as num_messages		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE pm_unread = 1			AND folder_id <> ' . PRIVMSGS_OUTBOX . '		GROUP BY user_id';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$db->sql_query('UPDATE ' . USERS_TABLE . ' SET user_unread_privmsg = ' . $row['num_messages'] . '			WHERE user_id = ' . $row['user_id']);	}	$db->sql_freeresult($result);}/*** Add any of the pre-defined "special" groups which are missing from the database*/function add_default_groups(){	global $db;	$default_groups = array(		'GUESTS'			=> array('', 0, 0),		'REGISTERED'		=> array('', 0, 0),		'REGISTERED_COPPA'	=> array('', 0, 0),		'GLOBAL_MODERATORS'	=> array('00AA00', 1, 0),		'ADMINISTRATORS'	=> array('AA0000', 1, 1),		'BOTS'				=> array('9E8DA7', 0, 0),		'NEWLY_REGISTERED'		=> array('', 0, 0),	);	$sql = 'SELECT *		FROM ' . GROUPS_TABLE . '		WHERE ' . $db->sql_in_set('group_name', array_keys($default_groups));	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		unset($default_groups[strtoupper($row['group_name'])]);	}	$db->sql_freeresult($result);	$sql_ary = array();	foreach ($default_groups as $name => $data)	{		$sql_ary[] = array(			'group_name'			=> (string) $name,			'group_desc'			=> '',			'group_desc_uid'		=> '',			'group_desc_bitfield'	=> '',			'group_type'			=> GROUP_SPECIAL,			'group_colour'			=> (string) $data[0],			'group_legend'			=> (int) $data[1],			'group_founder_manage'	=> (int) $data[2]		);	}	if (sizeof($sql_ary))	{		$db->sql_multi_insert(GROUPS_TABLE, $sql_ary);	}}/*** Sync post count. We might need to do this in batches.*/function sync_post_count($offset, $limit){	global $db;	$sql = 'SELECT COUNT(post_id) AS num_posts, poster_id			FROM ' . POSTS_TABLE . '			WHERE post_postcount = 1				AND post_approved = 1			GROUP BY poster_id			ORDER BY poster_id';	$result = $db->sql_query_limit($sql, $limit, $offset);	while ($row = $db->sql_fetchrow($result))	{		$db->sql_query('UPDATE ' . USERS_TABLE . " SET user_posts = {$row['num_posts']} WHERE user_id = {$row['poster_id']}");	}	$db->sql_freeresult($result);}/*** Add the search bots into the database* This code should be used in execute_last if the source database did not have bots* If you are converting bots this function should not be called* @todo We might want to look at sharing the bot list between the install code and this code for consistancy*/function add_bots(){	global $db, $convert, $user, $config, $phpbb_root_path, $phpEx;	$db->sql_query($convert->truncate_statement . BOTS_TABLE);	$sql = 'SELECT group_id FROM ' . GROUPS_TABLE . " WHERE group_name = 'BOTS'";	$result = $db->sql_query($sql);	$group_id = (int) $db->sql_fetchfield('group_id', false, $result);	$db->sql_freeresult($result);	if (!$group_id)	{		add_default_groups();		$sql = 'SELECT group_id FROM ' . GROUPS_TABLE . " WHERE group_name = 'BOTS'";		$result = $db->sql_query($sql);		$group_id = (int) $db->sql_fetchfield('group_id', false, $result);		$db->sql_freeresult($result);		if (!$group_id)		{			global $install;			$install->error($user->lang['CONV_ERROR_INCONSISTENT_GROUPS'], __LINE__, __FILE__);		}	}	$bots = array(		'AdsBot [Google]'			=> array('AdsBot-Google', ''),		'Alexa [Bot]'				=> array('ia_archiver', ''),		'Alta Vista [Bot]'			=> array('Scooter/', ''),		'Ask Jeeves [Bot]'			=> array('Ask Jeeves', ''),		'Baidu [Spider]'			=> array('Baiduspider+(', ''),		'Bing [Bot]'				=> array('bingbot/', ''),		'Exabot [Bot]'				=> array('Exabot/', ''),		'FAST Enterprise [Crawler]'	=> array('FAST Enterprise Crawler', ''),		'FAST WebCrawler [Crawler]'	=> array('FAST-WebCrawler/', ''),		'Francis [Bot]'				=> array('http://www.neomo.de/', ''),		'Gigabot [Bot]'				=> array('Gigabot/', ''),		'Google Adsense [Bot]'		=> array('Mediapartners-Google', ''),		'Google Desktop'			=> array('Google Desktop', ''),		'Google Feedfetcher'		=> array('Feedfetcher-Google', ''),		'Google [Bot]'				=> array('Googlebot', ''),		'Heise IT-Markt [Crawler]'	=> array('heise-IT-Markt-Crawler', ''),		'Heritrix [Crawler]'		=> array('heritrix/1.', ''),		'IBM Research [Bot]'		=> array('ibm.com/cs/crawler', ''),		'ICCrawler - ICjobs'		=> array('ICCrawler - ICjobs', ''),		'ichiro [Crawler]'			=> array('ichiro/2', ''),		'Majestic-12 [Bot]'			=> array('MJ12bot/', ''),		'Metager [Bot]'				=> array('MetagerBot/', ''),		'MSN NewsBlogs'				=> array('msnbot-NewsBlogs/', ''),		'MSN [Bot]'					=> array('msnbot/', ''),		'MSNbot Media'				=> array('msnbot-media/', ''),		'NG-Search [Bot]'			=> array('NG-Search/', ''),		'Nutch [Bot]'				=> array('http://lucene.apache.org/nutch/', ''),		'Nutch/CVS [Bot]'			=> array('NutchCVS/', ''),		'OmniExplorer [Bot]'		=> array('OmniExplorer_Bot/', ''),		'Online link [Validator]'	=> array('online link validator', ''),		'psbot [Picsearch]'			=> array('psbot/0', ''),		'Seekport [Bot]'			=> array('Seekbot/', ''),		'Sensis [Crawler]'			=> array('Sensis Web Crawler', ''),		'SEO Crawler'				=> array('SEO search Crawler/', ''),		'Seoma [Crawler]'			=> array('Seoma [SEO Crawler]', ''),		'SEOSearch [Crawler]'		=> array('SEOsearch/', ''),		'Snappy [Bot]'				=> array('Snappy/1.1 ( http://www.urltrends.com/ )', ''),		'Steeler [Crawler]'			=> array('http://www.tkl.iis.u-tokyo.ac.jp/~crawler/', ''),		'Synoo [Bot]'				=> array('SynooBot/', ''),		'Telekom [Bot]'				=> array('crawleradmin.t-info@telekom.de', ''),		'TurnitinBot [Bot]'			=> array('TurnitinBot/', ''),		'Voyager [Bot]'				=> array('voyager/1.0', ''),		'W3 [Sitesearch]'			=> array('W3 SiteSearch Crawler', ''),		'W3C [Linkcheck]'			=> array('W3C-checklink/', ''),		'W3C [Validator]'			=> array('W3C_*Validator', ''),		'WiseNut [Bot]'				=> array('http://www.WISEnutbot.com', ''),		'YaCy [Bot]'				=> array('yacybot', ''),		'Yahoo MMCrawler [Bot]'		=> array('Yahoo-MMCrawler/', ''),		'Yahoo Slurp [Bot]'			=> array('Yahoo! DE Slurp', ''),		'Yahoo [Bot]'				=> array('Yahoo! Slurp', ''),		'YahooSeeker [Bot]'			=> array('YahooSeeker/', ''),	);	if (!function_exists('user_add'))	{		include($phpbb_root_path . 'includes/functions_user.' . $phpEx);	}	foreach ($bots as $bot_name => $bot_ary)	{		$user_row = array(			'user_type'				=> USER_IGNORE,			'group_id'				=> $group_id,			'username'				=> $bot_name,			'user_regdate'			=> time(),			'user_password'			=> '',			'user_colour'			=> '9E8DA7',			'user_email'			=> '',			'user_lang'				=> $config['default_lang'],			'user_style'			=> 1,			'user_timezone'			=> 0,			'user_allow_massemail'	=> 0,		);		$user_id = user_add($user_row);		if ($user_id)		{			$sql = 'INSERT INTO ' . BOTS_TABLE . ' ' . $db->sql_build_array('INSERT', array(				'bot_active'	=> 1,				'bot_name'		=> $bot_name,				'user_id'		=> $user_id,				'bot_agent'		=> $bot_ary[0],				'bot_ip'		=> $bot_ary[1])			);			$db->sql_query($sql);		}	}}/*** Update any dynamic configuration variables after the conversion is finished* @todo Confirm that this updates all relevant values since it has not necessarily been kept in sync with all changes*/function update_dynamic_config(){	global $db, $config;	// Get latest username	$sql = 'SELECT user_id, username, user_colour		FROM ' . USERS_TABLE . '		WHERE user_type IN (' . USER_NORMAL . ', ' . USER_FOUNDER . ')';	if (!empty($config['increment_user_id']))	{		$sql .= ' AND user_id <> ' . $config['increment_user_id'];	}	$sql .= ' ORDER BY user_id DESC';	$result = $db->sql_query_limit($sql, 1);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		set_config('newest_user_id', $row['user_id'], true);		set_config('newest_username', $row['username'], true);		set_config('newest_user_colour', $row['user_colour'], true);	}//	Also do not reset record online user/date. There will be old data or the fresh data from the schema.//	set_config('record_online_users', 1, true);//	set_config('record_online_date', time(), true);	$sql = 'SELECT COUNT(post_id) AS stat		FROM ' . POSTS_TABLE . '		WHERE post_approved = 1';	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	set_config('num_posts', (int) $row['stat'], true);	$sql = 'SELECT COUNT(topic_id) AS stat		FROM ' . TOPICS_TABLE . '		WHERE topic_approved = 1';	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	set_config('num_topics', (int) $row['stat'], true);	$sql = 'SELECT COUNT(user_id) AS stat		FROM ' . USERS_TABLE . '		WHERE user_type IN (' . USER_NORMAL . ',' . USER_FOUNDER . ')';	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	set_config('num_users', (int) $row['stat'], true);	$sql = 'SELECT COUNT(attach_id) as stat		FROM ' . ATTACHMENTS_TABLE . '		WHERE is_orphan = 0';	$result = $db->sql_query($sql);	set_config('num_files', (int) $db->sql_fetchfield('stat'), true);	$db->sql_freeresult($result);	$sql = 'SELECT SUM(filesize) as stat		FROM ' . ATTACHMENTS_TABLE . '		WHERE is_orphan = 0';	$result = $db->sql_query($sql);	set_config('upload_dir_size', (float) $db->sql_fetchfield('stat'), true);	$db->sql_freeresult($result);	/**	* We do not resync users post counts - this can be done by the admin after conversion if wanted.	$sql = 'SELECT COUNT(post_id) AS num_posts, poster_id		FROM ' . POSTS_TABLE . '		WHERE post_postcount = 1		GROUP BY poster_id';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$db->sql_query('UPDATE ' . USERS_TABLE . " SET user_posts = {$row['num_posts']} WHERE user_id = {$row['poster_id']}");	}	$db->sql_freeresult($result);	*/}/*** Updates topics_posted entries*/function update_topics_posted(){	global $db, $config;	switch ($db->sql_layer)	{		case 'sqlite':		case 'firebird':			$db->sql_query('DELETE FROM ' . TOPICS_POSTED_TABLE);		break;		default:			$db->sql_query('TRUNCATE TABLE ' . TOPICS_POSTED_TABLE);		break;	}	// This can get really nasty... therefore we only do the last six months	$get_from_time = time() - (6 * 4 * 7 * 24 * 60 * 60);	// Select forum ids, do not include categories	$sql = 'SELECT forum_id		FROM ' . FORUMS_TABLE . '		WHERE forum_type <> ' . FORUM_CAT;	$result = $db->sql_query($sql);	$forum_ids = array();	while ($row = $db->sql_fetchrow($result))	{		$forum_ids[] = $row['forum_id'];	}	$db->sql_freeresult($result);	// Any global announcements? ;)	$forum_ids[] = 0;	// Now go through the forums and get us some topics...	foreach ($forum_ids as $forum_id)	{		$sql = 'SELECT p.poster_id, p.topic_id			FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . ' t			WHERE t.forum_id = ' . $forum_id . '				AND t.topic_moved_id = 0				AND t.topic_last_post_time > ' . $get_from_time . '				AND t.topic_id = p.topic_id				AND p.poster_id <> ' . ANONYMOUS . '			GROUP BY p.poster_id, p.topic_id';		$result = $db->sql_query($sql);		$posted = array();		while ($row = $db->sql_fetchrow($result))		{			$posted[$row['poster_id']][] = $row['topic_id'];		}		$db->sql_freeresult($result);		$sql_ary = array();		foreach ($posted as $user_id => $topic_row)		{			foreach ($topic_row as $topic_id)			{				$sql_ary[] = array(					'user_id'		=> (int) $user_id,					'topic_id'		=> (int) $topic_id,					'topic_posted'	=> 1,				);			}		}		unset($posted);		if (sizeof($sql_ary))		{			$db->sql_multi_insert(TOPICS_POSTED_TABLE, $sql_ary);		}	}}/*** Ensure that all users have a default group specified and update related information such as their colour*/function fix_empty_primary_groups(){	global $db;	// Set group ids for users not already having it	$sql = 'UPDATE ' . USERS_TABLE . ' SET group_id = ' . get_group_id('registered') . '		WHERE group_id = 0 AND user_type = ' . USER_INACTIVE;	$db->sql_query($sql);	$sql = 'UPDATE ' . USERS_TABLE . ' SET group_id = ' . get_group_id('registered') . '		WHERE group_id = 0 AND user_type = ' . USER_NORMAL;	$db->sql_query($sql);	$db->sql_query('UPDATE ' . USERS_TABLE . ' SET group_id = ' . get_group_id('guests') . ' WHERE user_id = ' . ANONYMOUS);	$sql = 'SELECT user_id FROM ' . USER_GROUP_TABLE . ' WHERE group_id = ' . get_group_id('administrators');	$result = $db->sql_query($sql);	$user_ids = array();	while ($row = $db->sql_fetchrow($result))	{		$user_ids[] = $row['user_id'];	}	$db->sql_freeresult($result);	if (sizeof($user_ids))	{		$db->sql_query('UPDATE ' . USERS_TABLE . ' SET group_id = ' . get_group_id('administrators') . '			WHERE group_id = 0 AND ' . $db->sql_in_set('user_id', $user_ids));	}	$sql = 'SELECT user_id FROM ' . USER_GROUP_TABLE . ' WHERE group_id = ' . get_group_id('global_moderators');	$user_ids = array();	while ($row = $db->sql_fetchrow($result))	{		$user_ids[] = $row['user_id'];	}	$db->sql_freeresult($result);	if (sizeof($user_ids))	{		$db->sql_query('UPDATE ' . USERS_TABLE . ' SET group_id = ' . get_group_id('global_moderators') . '			WHERE group_id = 0 AND ' . $db->sql_in_set('user_id', $user_ids));	}	// Set user colour	$sql = 'SELECT group_id, group_colour FROM ' . GROUPS_TABLE . "		WHERE group_colour <> ''";	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$db->sql_query('UPDATE ' . USERS_TABLE . " SET user_colour = '{$row['group_colour']}' WHERE group_id = {$row['group_id']}");	}	$db->sql_freeresult($result);}/*** Cleanly remove invalid user entries after converting the users table...*/function remove_invalid_users(){	global $convert, $db, $phpEx, $phpbb_root_path;	// username_clean is UNIQUE	$sql = 'SELECT user_id		FROM ' . USERS_TABLE . "		WHERE username_clean = ''";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		if (!function_exists('user_delete'))		{			include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		}		user_delete('remove', $row['user_id']);	}}function convert_bbcode($message, $convert_size = true, $extended_bbcodes = false){	static $orig, $repl, $origx, $replx, $str_from, $str_to;	if (empty($orig))	{		$orig = $repl = array();		$orig[] = '#\[(php|sql)\](.*?)\[/(php|sql)\]#is';		$repl[] = '[code]\2[/code]';		$orig[] = '#\[font=[^\]]+\](.*?)\[/font\]#is';		$repl[] = '\1';		$orig[] = '#\[align=[a-z]+\](.*?)\[/align\]#is';		$repl[] = '\1';		$orig[] = '#\[/list=.*?\]#is';		$repl[] = '[/list]';		$origx = array(			'#\[glow[^\]]+\](.*?)\[/glow\]#is',			'#\[shadow[^\]]+\](.*?)\[/shadow\]#is',			'#\[flash[^\]]+\](.*?)\[/flash\]#is'		);		$replx = array(			'\1',			'\1',			'[url=\1]Flash[/url]'		);		$str_from = array(			'[ftp]',	'[/ftp]',			'[ftp=',	'[/ftp]',			'[pre]',	'[/pre]',			'[table]',	'[/table]',			'[td]',		'[/td]',			'[tr]',		'[/tr]',			'[s]',		'[/s]',			'[left]',	'[/left]',			'[right]',	'[/right]',			'[center]',	'[/center]',			'[sub]',	'[/sub]',			'[sup]',	'[/sup]',			'[tt]',		'[/tt]',			'[move]',	'[/move]',			'[hr]'		);		$str_to = array(			'[url]',	'[/url]',			'[url=',	'[/url]',			'[code]',	'[/code]',			"\n",		'',			'',			'',			"\n",		'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			"\n\n"		);		for ($i = 0; $i < sizeof($str_from); ++$i)		{			$origx[] = '#\\' . str_replace(']', '\\]', $str_from[$i]) . '#is';			$replx[] = $str_to[$i];		}	}	if (preg_match_all('#\[email=([^\]]+)\](.*?)\[/email\]#i', $message, $m))	{		for ($i = 0; $i < sizeof($m[1]); ++$i)		{			if ($m[1][$i] == $m[2][$i])			{				$message = str_replace($m[0][$i], '[email]' . $m[1][$i] . '[/email]', $message);			}			else			{				$message = str_replace($m[0][$i], $m[2][$i] . ' ([email]' . $m[1][$i] . '[/email])', $message);			}		}	}	if ($convert_size && preg_match('#\[size=[0-9]+\].*?\[/size\]#i', $message))	{		$size = array(9, 9, 12, 15, 18, 24, 29, 29, 29, 29);		$message = preg_replace('#\[size=([0-9]+)\](.*?)\[/size\]#i', '[size=\1]\2[/size]', $message);		$message = preg_replace('#\[size=[0-9]{2,}\](.*?)\[/size\]#i', '[size=29]\1[/size]', $message);		for ($i = sizeof($size); $i; )		{			$i--;			$message = str_replace('[size=' . $i . ']', '[size=' . $size[$i] . ']', $message);		}	}	if ($extended_bbcodes)	{		$message = preg_replace($origx, $replx, $message);	}	$message = preg_replace($orig, $repl, $message);	return $message;}function copy_file($src, $trg, $overwrite = false, $die_on_failure = true, $source_relative_path = true){	global $convert, $phpbb_root_path, $config, $user, $db;	if (substr($trg, -1) == '/')	{		$trg .= utf8_basename($src);	}	$src_path = relative_base($src, $source_relative_path, __LINE__, __FILE__);	$trg_path = $trg;	if (!$overwrite && @file_exists($trg_path))	{		return true;	}	if (!@file_exists($src_path))	{		return;	}	$path = $phpbb_root_path;	$parts = explode('/', $trg);	unset($parts[sizeof($parts) - 1]);	for ($i = 0; $i < sizeof($parts); ++$i)	{		$path .= $parts[$i] . '/';		if (!is_dir($path))		{			@mkdir($path, 0777);		}	}	if (!phpbb_is_writable($path))	{		@chmod($path, 0777);	}	if (!@copy($src_path, $phpbb_root_path . $trg_path))	{		$convert->p_master->error(sprintf($user->lang['COULD_NOT_COPY'], $src_path, $phpbb_root_path . $trg_path), __LINE__, __FILE__, !$die_on_failure);		return;	}	if ($perm = @fileperms($src_path))	{		@chmod($phpbb_root_path . $trg_path, $perm);	}	return true;}function copy_dir($src, $trg, $copy_subdirs = true, $overwrite = false, $die_on_failure = true, $source_relative_path = true){	global $convert, $phpbb_root_path, $config, $user, $db;	$dirlist = $filelist = $bad_dirs = array();	$src = path($src, $source_relative_path);	$trg = path($trg);	$src_path = relative_base($src, $source_relative_path, __LINE__, __FILE__);	$trg_path = $phpbb_root_path . $trg;	if (!is_dir($trg_path))	{		@mkdir($trg_path, 0777);		@chmod($trg_path, 0777);	}	if (!phpbb_is_writable($trg_path))	{		$bad_dirs[] = path($config['script_path']) . $trg;	}	if ($handle = @opendir($src_path))	{		while ($entry = readdir($handle))		{			if ($entry[0] == '.' || $entry == 'CVS' || $entry == 'index.htm')			{				continue;			}			if (is_dir($src_path . $entry))			{				$dirlist[] = $entry;			}			else			{				$filelist[] = $entry;			}		}		closedir($handle);	}	else if ($dir = @dir($src_path))	{		while ($entry = $dir->read())		{			if ($entry[0] == '.' || $entry == 'CVS' || $entry == 'index.htm')			{				continue;			}			if (is_dir($src_path . $entry))			{				$dirlist[] = $entry;			}			else			{				$filelist[] = $entry;			}		}		$dir->close();	}	else	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_COULD_NOT_READ'], relative_base($src, $source_relative_path)), __LINE__, __FILE__);	}	if ($copy_subdirs)	{		for ($i = 0; $i < sizeof($dirlist); ++$i)		{			$dir = $dirlist[$i];			if ($dir == 'CVS')			{				continue;			}			if (!is_dir($trg_path . $dir))			{				@mkdir($trg_path . $dir, 0777);				@chmod($trg_path . $dir, 0777);			}			if (!phpbb_is_writable($trg_path . $dir))			{				$bad_dirs[] = $trg . $dir;				$bad_dirs[] = $trg_path . $dir;			}			if (!sizeof($bad_dirs))			{				copy_dir($src . $dir, $trg . $dir, true, $overwrite, $die_on_failure, $source_relative_path);			}		}	}	if (sizeof($bad_dirs))	{		$str = (sizeof($bad_dirs) == 1) ? $user->lang['MAKE_FOLDER_WRITABLE'] : $user->lang['MAKE_FOLDERS_WRITABLE'];		sort($bad_dirs);		$convert->p_master->error(sprintf($str, implode('<br />', $bad_dirs)), __LINE__, __FILE__);	}	for ($i = 0; $i < sizeof($filelist); ++$i)	{		copy_file($src . $filelist[$i], $trg . $filelist[$i], $overwrite, $die_on_failure, $source_relative_path);	}}function relative_base($path, $is_relative = true, $line = false, $file = false){	global $convert, $phpbb_root_path, $config, $user, $db;	if (!$is_relative)	{		return $path;	}	if (empty($convert->options['forum_path']) && $is_relative)	{		$line = $line ? $line : __LINE__;		$file = $file ? $file : __FILE__;		$convert->p_master->error($user->lang['CONV_ERROR_NO_FORUM_PATH'], $line, $file);	}	return $convert->options['forum_path'] . '/' . $path;}function get_smiley_display(){	static $smiley_count = 0;	$smiley_count++;	return ($smiley_count < 50) ? 1 : 0;}function fill_dateformat($user_dateformat){	global $config;	return ((empty($user_dateformat)) ? $config['default_dateformat'] : $user_dateformat);}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_prune_info{	function module()	{		return array(			'filename'	=> 'acp_prune',			'title'		=> 'ACP_PRUNING',			'version'	=> '1.0.0',			'modes'		=> array(				'forums'	=> array('title' => 'ACP_PRUNE_FORUMS', 'auth' => 'acl_a_prune', 'cat' => array('ACP_MANAGE_FORUMS')),				'users'		=> array('title' => 'ACP_PRUNE_USERS', 'auth' => 'acl_a_userdel', 'cat' => array('ACP_USER_SECURITY')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package dbal* @version $Id$* @copyright (c) 2010 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License** This is the MS SQL Server Native database abstraction layer.* PHP mssql native driver required.* @author Chris Pucci**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}include_once($phpbb_root_path . 'includes/db/dbal.' . $phpEx);/** * Prior to version 1.1 the SQL Server Native PHP driver didn't support sqlsrv_num_rows, or cursor based seeking so we recall all rows into an array * and maintain our own cursor index into that array. */class result_mssqlnative{	public function result_mssqlnative($queryresult = false)	{		$this->m_cursor = 0;		$this->m_rows = array();		$this->m_num_fields = sqlsrv_num_fields($queryresult);		$this->m_field_meta = sqlsrv_field_metadata($queryresult);		while ($row = sqlsrv_fetch_array($queryresult, SQLSRV_FETCH_ASSOC))		{			if ($row !== null)			{				foreach($row as $k => $v)				{					if (is_object($v) && method_exists($v, 'format'))					{						$row[$k] = $v->format("Y-m-d\TH:i:s\Z");					}				}				$this->m_rows[] = $row;//read results into memory, cursors are not supported			}		}		$this->m_row_count = sizeof($this->m_rows);	}	private function array_to_obj($array, &$obj)	{		foreach ($array as $key => $value)		{			if (is_array($value))			{				$obj->$key = new stdClass();				array_to_obj($value, $obj->$key);			}			else			{				$obj->$key = $value;			}		}		return $obj;	}	public function fetch($mode = SQLSRV_FETCH_BOTH, $object_class = 'stdClass')	{		if ($this->m_cursor >= $this->m_row_count || $this->m_row_count == 0)		{			return false;		}		$ret = false;		$arr_num = array();		if ($mode == SQLSRV_FETCH_NUMERIC || $mode == SQLSRV_FETCH_BOTH)		{			foreach($this->m_rows[$this->m_cursor] as $key => $value)			{				$arr_num[] = $value;			}		}		switch ($mode)		{			case SQLSRV_FETCH_ASSOC:				$ret = $this->m_rows[$this->m_cursor];			break;			case SQLSRV_FETCH_NUMERIC:				$ret = $arr_num;			break;			case 'OBJECT':				$ret = $this->array_to_obj($this->m_rows[$this->m_cursor], $o = new $object_class);			break;			case SQLSRV_FETCH_BOTH:			default:				$ret = $this->m_rows[$this->m_cursor] + $arr_num;			break;		}		$this->m_cursor++;		return $ret;	}	public function get($pos, $fld)	{		return $this->m_rows[$pos][$fld];	}	public function num_rows()	{		return $this->m_row_count;	}	public function seek($iRow)	{		$this->m_cursor = min($iRow, $this->m_row_count);	}	public function num_fields()	{		return $this->m_num_fields;	}	public function field_name($nr)	{		$arr_keys = array_keys($this->m_rows[0]);		return $arr_keys[$nr];	}	public function field_type($nr)	{		$i = 0;		$int_type = -1;		$str_type = '';		foreach ($this->m_field_meta as $meta)		{			if ($nr == $i)			{				$int_type = $meta['Type'];				break;			}			$i++;		}		//http://msdn.microsoft.com/en-us/library/cc296183.aspx contains type table		switch ($int_type)		{			case SQLSRV_SQLTYPE_BIGINT: 		$str_type = 'bigint'; break;			case SQLSRV_SQLTYPE_BINARY: 		$str_type = 'binary'; break;			case SQLSRV_SQLTYPE_BIT: 			$str_type = 'bit'; break;			case SQLSRV_SQLTYPE_CHAR: 			$str_type = 'char'; break;			case SQLSRV_SQLTYPE_DATETIME: 		$str_type = 'datetime'; break;			case SQLSRV_SQLTYPE_DECIMAL/*($precision, $scale)*/: $str_type = 'decimal'; break;			case SQLSRV_SQLTYPE_FLOAT: 			$str_type = 'float'; break;			case SQLSRV_SQLTYPE_IMAGE: 			$str_type = 'image'; break;			case SQLSRV_SQLTYPE_INT: 			$str_type = 'int'; break;			case SQLSRV_SQLTYPE_MONEY: 			$str_type = 'money'; break;			case SQLSRV_SQLTYPE_NCHAR/*($charCount)*/: $str_type = 'nchar'; break;			case SQLSRV_SQLTYPE_NUMERIC/*($precision, $scale)*/: $str_type = 'numeric'; break;			case SQLSRV_SQLTYPE_NVARCHAR/*($charCount)*/: $str_type = 'nvarchar'; break;			case SQLSRV_SQLTYPE_NTEXT: 			$str_type = 'ntext'; break;			case SQLSRV_SQLTYPE_REAL: 			$str_type = 'real'; break;			case SQLSRV_SQLTYPE_SMALLDATETIME: 	$str_type = 'smalldatetime'; break;			case SQLSRV_SQLTYPE_SMALLINT: 		$str_type = 'smallint'; break;			case SQLSRV_SQLTYPE_SMALLMONEY: 	$str_type = 'smallmoney'; break;			case SQLSRV_SQLTYPE_TEXT: 			$str_type = 'text'; break;			case SQLSRV_SQLTYPE_TIMESTAMP: 		$str_type = 'timestamp'; break;			case SQLSRV_SQLTYPE_TINYINT: 		$str_type = 'tinyint'; break;			case SQLSRV_SQLTYPE_UNIQUEIDENTIFIER: $str_type = 'uniqueidentifier'; break;			case SQLSRV_SQLTYPE_UDT: 			$str_type = 'UDT'; break;			case SQLSRV_SQLTYPE_VARBINARY/*($byteCount)*/: $str_type = 'varbinary'; break;			case SQLSRV_SQLTYPE_VARCHAR/*($charCount)*/: $str_type = 'varchar'; break;			case SQLSRV_SQLTYPE_XML: 			$str_type = 'xml'; break;			default: $str_type = $int_type;		}		return $str_type;	}	public function free()	{		unset($this->m_rows);		return;	}}/*** @package dbal*/class dbal_mssqlnative extends dbal{	var $m_insert_id = NULL;	var $last_query_text = '';	var $query_options = array();	/**	* Connect to server	*/	function sql_connect($sqlserver, $sqluser, $sqlpassword, $database, $port = false, $persistency = false, $new_link = false)	{		# Test for driver support, to avoid suppressed fatal error		if (!function_exists('sqlsrv_connect'))		{			trigger_error('Native MS SQL Server driver for PHP is missing or needs to be updated. Version 1.1 or later is required to install phpBB3. You can download the driver from: http://www.microsoft.com/sqlserver/2005/en/us/PHP-Driver.aspx\n', E_USER_ERROR);		}		//set up connection variables		$this->persistency = $persistency;		$this->user = $sqluser;		$this->dbname = $database;		$port_delimiter = (defined('PHP_OS') && substr(PHP_OS, 0, 3) === 'WIN') ? ',' : ':';		$this->server = $sqlserver . (($port) ? $port_delimiter . $port : '');		//connect to database		error_reporting(E_ALL);		$this->db_connect_id = sqlsrv_connect($this->server, array(			'Database' => $this->dbname,			'UID' => $this->user,			'PWD' => $sqlpassword		));		return ($this->db_connect_id) ? $this->db_connect_id : $this->sql_error('');	}	/**	* Version information about used database	* @param bool $raw if true, only return the fetched sql_server_version	* @param bool $use_cache If true, it is safe to retrieve the value from the cache	* @return string sql server version	*/	function sql_server_info($raw = false, $use_cache = true)	{		global $cache;		if (!$use_cache || empty($cache) || ($this->sql_server_version = $cache->get('mssql_version')) === false)		{			$arr_server_info = sqlsrv_server_info($this->db_connect_id);			$this->sql_server_version = $arr_server_info['SQLServerVersion'];			if (!empty($cache) && $use_cache)			{				$cache->put('mssql_version', $this->sql_server_version);			}		}		if ($raw)		{			return $this->sql_server_version;		}		return ($this->sql_server_version) ? 'MSSQL<br />' . $this->sql_server_version : 'MSSQL';	}	/**	* {@inheritDoc}	*/	function sql_buffer_nested_transactions()	{		return true;	}	/**	* SQL Transaction	* @access private	*/	function _sql_transaction($status = 'begin')	{		switch ($status)		{			case 'begin':				return sqlsrv_begin_transaction($this->db_connect_id);			break;			case 'commit':				return sqlsrv_commit($this->db_connect_id);			break;			case 'rollback':				return sqlsrv_rollback($this->db_connect_id);			break;		}		return true;	}	/**	* Base query method	*	* @param	string	$query		Contains the SQL query which shall be executed	* @param	int		$cache_ttl	Either 0 to avoid caching or the time in seconds which the result shall be kept in cache	* @return	mixed				When casted to bool the returned value returns true on success and false on failure	*	* @access	public	*/	function sql_query($query = '', $cache_ttl = 0)	{		if ($query != '')		{			global $cache;			// EXPLAIN only in extra debug mode			if (defined('DEBUG_EXTRA'))			{				$this->sql_report('start', $query);			}			$this->last_query_text = $query;			$this->query_result = ($cache_ttl && method_exists($cache, 'sql_load')) ? $cache->sql_load($query) : false;			$this->sql_add_num_queries($this->query_result);			if ($this->query_result === false)			{				if (($this->query_result = @sqlsrv_query($this->db_connect_id, $query, array(), $this->query_options)) === false)				{					$this->sql_error($query);				}				// reset options for next query				$this->query_options = array();				if (defined('DEBUG_EXTRA'))				{					$this->sql_report('stop', $query);				}				if ($cache_ttl && method_exists($cache, 'sql_save'))				{					$this->open_queries[(int) $this->query_result] = $this->query_result;					$cache->sql_save($query, $this->query_result, $cache_ttl);				}				else if (strpos($query, 'SELECT') === 0 && $this->query_result)				{					$this->open_queries[(int) $this->query_result] = $this->query_result;				}			}			else if (defined('DEBUG_EXTRA'))			{				$this->sql_report('fromcache', $query);			}		}		else		{			return false;		}		return $this->query_result;	}	/**	* Build LIMIT query	*/	function _sql_query_limit($query, $total, $offset = 0, $cache_ttl = 0)	{		$this->query_result = false;		// total == 0 means all results - not zero results		if ($offset == 0 && $total !== 0)		{			if (strpos($query, "SELECT") === false)			{				$query = "TOP {$total} " . $query;			}			else			{				$query = preg_replace('/SELECT(\s*DISTINCT)?/Dsi', 'SELECT$1 TOP '.$total, $query);			}		}		else if ($offset > 0)		{			$query = preg_replace('/SELECT(\s*DISTINCT)?/Dsi', 'SELECT$1 TOP(10000000) ', $query);			$query = 'SELECT *					FROM (SELECT sub2.*, ROW_NUMBER() OVER(ORDER BY sub2.line2) AS line3					FROM (SELECT 1 AS line2, sub1.* FROM (' . $query . ') AS sub1) as sub2) AS sub3';			if ($total > 0)			{				$query .= ' WHERE line3 BETWEEN ' . ($offset+1) . ' AND ' . ($offset + $total);			}			else			{				$query .= ' WHERE line3 > ' . $offset;			}		}		$result = $this->sql_query($query, $cache_ttl);		return $result;	}	/**	* Return number of affected rows	*/	function sql_affectedrows()	{		return (!empty($this->query_result)) ? @sqlsrv_rows_affected($this->query_result) : false;	}	/**	* Fetch current row	*/	function sql_fetchrow($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_fetchrow($query_id);		}		if ($query_id === false)		{			return false;		}		$row = @sqlsrv_fetch_array($query_id, SQLSRV_FETCH_ASSOC);		if ($row)		{			foreach ($row as $key => $value)			{				$row[$key] = ($value === ' ' || $value === NULL) ? '' : $value;			}			// remove helper values from LIMIT queries			if (isset($row['line2']))			{				unset($row['line2'], $row['line3']);			}		}		return $row;	}	/**	* Seek to given row number	* rownum is zero-based	*/	function sql_rowseek($rownum, &$query_id)	{		global $cache;		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_rowseek($rownum, $query_id);		}		$seek = new result_mssqlnative($query_id);		$row = $seek->seek($rownum);		return ($row = $seek->fetch()) ? $row : false;	}	/**	* Get last inserted id after insert statement	*/	function sql_nextid()	{		$result_id = @sqlsrv_query($this->db_connect_id, 'SELECT @@IDENTITY');		if ($result_id !== false)		{			$row = @sqlsrv_fetch_array($result_id);			$id = $row[0];			@sqlsrv_free_stmt($result_id);			return $id;		}		else		{			return false;		}	}	/**	* Free sql result	*/	function sql_freeresult($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_freeresult($query_id);		}		if (isset($this->open_queries[$query_id]))		{			unset($this->open_queries[$query_id]);			return @sqlsrv_free_stmt($query_id);		}		return false;	}	/**	* Escape string used in sql query	*/	function sql_escape($msg)	{		return str_replace(array("'", "\0"), array("''", ''), $msg);	}	/**	* Build LIKE expression	* @access private	*/	function _sql_like_expression($expression)	{		return $expression . " ESCAPE '\\'";	}	/**	* return sql error array	* @access private	*/	function _sql_error()	{		$errors = @sqlsrv_errors(SQLSRV_ERR_ERRORS);		$error_message = '';		$code = 0;		if ($errors != null)		{			foreach ($errors as $error)			{				$error_message .= "SQLSTATE: ".$error[ 'SQLSTATE']."\n";				$error_message .= "code: ".$error[ 'code']."\n";				$code = $error['code'];				$error_message .= "message: ".$error[ 'message']."\n";			}			$this->last_error_result = $error_message;			$error = $this->last_error_result;		}		else		{			$error = (isset($this->last_error_result) && $this->last_error_result) ? $this->last_error_result : array();		}		return array(			'message'	=> $error,			'code'		=> $code,		);	}	/**	* Build db-specific query data	* @access private	*/	function _sql_custom_build($stage, $data)	{		return $data;	}	/**	* Close sql connection	* @access private	*/	function _sql_close()	{		return @sqlsrv_close($this->db_connect_id);	}	/**	* Build db-specific report	* @access private	*/	function _sql_report($mode, $query = '')	{		switch ($mode)		{			case 'start':				$html_table = false;				@sqlsrv_query($this->db_connect_id, 'SET SHOWPLAN_TEXT ON;');				if ($result = @sqlsrv_query($this->db_connect_id, $query))				{					@sqlsrv_next_result($result);					while ($row = @sqlsrv_fetch_array($result))					{						$html_table = $this->sql_report('add_select_row', $query, $html_table, $row);					}				}				@sqlsrv_query($this->db_connect_id, 'SET SHOWPLAN_TEXT OFF;');				@sqlsrv_free_stmt($result);				if ($html_table)				{					$this->html_hold .= '</table>';				}			break;			case 'fromcache':				$endtime = explode(' ', microtime());				$endtime = $endtime[0] + $endtime[1];				$result = @sqlsrv_query($this->db_connect_id, $query);				while ($void = @sqlsrv_fetch_array($result))				{					// Take the time spent on parsing rows into account				}				@sqlsrv_free_stmt($result);				$splittime = explode(' ', microtime());				$splittime = $splittime[0] + $splittime[1];				$this->sql_report('record_fromcache', $query, $endtime, $splittime);			break;		}	}	/**	* Utility method used to retrieve number of rows	* Emulates mysql_num_rows	* Used in acp_database.php -> write_data_mssqlnative()	* Requires a static or keyset cursor to be definde via	* mssqlnative_set_query_options()	*/	function mssqlnative_num_rows($res)	{		if ($res !== false)		{			return sqlsrv_num_rows($res);		}		else		{			return false;		}	}	/**	* Allows setting mssqlnative specific query options passed to sqlsrv_query as 4th parameter.	*/	function mssqlnative_set_query_options($options)	{		$this->query_options = $options;	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_update{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('install');		$this->tpl_name = 'acp_update';		$this->page_title = 'ACP_VERSION_CHECK';		// Get current and latest version		$errstr = '';		$errno = 0;		$info = obtain_latest_version_info(request_var('versioncheck_force', false));		if ($info === false)		{			trigger_error('VERSIONCHECK_FAIL', E_USER_WARNING);		}		$info = explode("\n", $info);		$latest_version = trim($info[0]);		$announcement_url = trim($info[1]);		$announcement_url = (strpos($announcement_url, '&amp;') === false) ? str_replace('&', '&amp;', $announcement_url) : $announcement_url;		$update_link = append_sid($phpbb_root_path . 'install/index.' . $phpEx, 'mode=update');		// next feature release		$next_feature_version = $next_feature_announcement_url = false;		if (isset($info[2]) && trim($info[2]) !== '')		{			$next_feature_version = trim($info[2]);			$next_feature_announcement_url = trim($info[3]);		}		// Determine automatic update...		$sql = 'SELECT config_value			FROM ' . CONFIG_TABLE . "			WHERE config_name = 'version_update_from'";		$result = $db->sql_query($sql);		$version_update_from = (string) $db->sql_fetchfield('config_value');		$db->sql_freeresult($result);		$current_version = (!empty($version_update_from)) ? $version_update_from : $config['version'];		$template->assign_vars(array(			'S_UP_TO_DATE'		=> phpbb_version_compare($latest_version, $config['version'], '<='),			'S_UP_TO_DATE_AUTO'	=> phpbb_version_compare($latest_version, $current_version, '<='),			'S_VERSION_CHECK'	=> true,			'U_ACTION'			=> $this->u_action,			'U_VERSIONCHECK_FORCE' => append_sid($this->u_action . '&amp;versioncheck_force=1'),			'LATEST_VERSION'	=> $latest_version,			'CURRENT_VERSION'	=> $config['version'],			'AUTO_VERSION'		=> $version_update_from,			'NEXT_FEATURE_VERSION'	=> $next_feature_version,			'UPDATE_INSTRUCTIONS'	=> sprintf($user->lang['UPDATE_INSTRUCTIONS'], $announcement_url, $update_link),			'UPGRADE_INSTRUCTIONS'	=> $next_feature_version ? $user->lang('UPGRADE_INSTRUCTIONS', $next_feature_version, $next_feature_announcement_url) : false,		));	}}?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Original Author - Xore (Robert Hetzler)* With contributions from Neothermic** @package VC*/class captcha{	var $width = 360;	var $height = 96;	/**	* Create the image containing $code with a seed of $seed	*/	function execute($code, $seed)	{		global $config;				mt_srand($seed);		// Create image		$img = imagecreatetruecolor($this->width, $this->height);		// Generate colours		$colour = new colour_manager($img, array(			'random'	=> true,			'min_value'	=> 60,		), 'hsv');		$scheme = $colour->colour_scheme('background', false);		$scheme = $colour->mono_range($scheme, 10, false);		shuffle($scheme);		$bg_colours = array_splice($scheme, mt_rand(6, 12));		// Generate code characters		$characters = $sizes = $bounding_boxes = $noise = array();		$width_avail = $this->width - 15;		$code_len = strlen($code);		$captcha_bitmaps = $this->captcha_bitmaps();		for ($i = 0; $i < $code_len; ++$i)		{			$characters[$i] = new char_cube3d($captcha_bitmaps, $code[$i]);			list($min, $max) = $characters[$i]->range();			$sizes[$i] = mt_rand($min, $max);			$box = $characters[$i]->dimensions($sizes[$i]);			$width_avail -= ($box[2] - $box[0]);			$bounding_boxes[$i] = $box;		} 		// Redistribute leftover x-space		$offset = array();		for ($i = 0; $i < $code_len; ++$i)		{			$denom = ($code_len - $i);			$denom = max(1.3, $denom);			$offset[$i] = phpbb_mt_rand(0, (int) round((1.5 * $width_avail) / $denom));			$width_avail -= $offset[$i];		}		if ($config['captcha_gd_x_grid'])		{			$grid = (int) $config['captcha_gd_x_grid'];			for ($y = 0; $y < $this->height; $y += mt_rand($grid - 2, $grid + 2))			{				$current_colour = $scheme[array_rand($scheme)];				imageline($img, mt_rand(0,4), mt_rand($y - 3, $y), mt_rand($this->width - 5, $this->width), mt_rand($y - 3, $y), $current_colour);			}		}		if ($config['captcha_gd_y_grid'])		{			$grid = (int) $config['captcha_gd_y_grid'];			for ($x = 0; $x < $this->width; $x += mt_rand($grid - 2, $grid + 2))			{				$current_colour = $scheme[array_rand($scheme)];				imagedashedline($img, mt_rand($x -3, $x + 3), mt_rand(0, 4), mt_rand($x -3, $x + 3), mt_rand($this->height - 5, $this->height), $current_colour);			}		}		if ($config['captcha_gd_wave'] && ($config['captcha_gd_y_grid'] || $config['captcha_gd_y_grid']))		{			$this->wave($img);		}						if ($config['captcha_gd_3d_noise'])		{			$xoffset = mt_rand(0,9);			$noise_bitmaps = $this->captcha_noise_bg_bitmaps();			for ($i = 0; $i < $code_len; ++$i)			{				$noise[$i] = new char_cube3d($noise_bitmaps, mt_rand(1, sizeof($noise_bitmaps['data'])));				list($min, $max) = $noise[$i]->range();				//$box = $noise[$i]->dimensions($sizes[$i]);			}			$xoffset = 0;			for ($i = 0; $i < $code_len; ++$i)			{				$dimm = $bounding_boxes[$i];				$xoffset += ($offset[$i] - $dimm[0]);				$yoffset = mt_rand(-$dimm[1], $this->height - $dimm[3]);	 				$noise[$i]->drawchar($sizes[$i], $xoffset, $yoffset, $img, $colour->get_resource('background'), $scheme);				$xoffset += $dimm[2];			}		}		$xoffset = 5;		for ($i = 0; $i < $code_len; ++$i)		{			$dimm = $bounding_boxes[$i];			$xoffset += ($offset[$i] - $dimm[0]);			$yoffset = mt_rand(-$dimm[1], $this->height - $dimm[3]);			$characters[$i]->drawchar($sizes[$i], $xoffset, $yoffset, $img, $colour->get_resource('background'), $scheme);			$xoffset += $dimm[2];		}		if ($config['captcha_gd_wave'])		{			$this->wave($img);		}		if ($config['captcha_gd_foreground_noise'])		{			$this->noise_line($img, 0, 0, $this->width, $this->height, $colour->get_resource('background'), $scheme, $bg_colours);		}		// Send image		header('Content-Type: image/png');		header('Cache-control: no-cache, no-store');		imagepng($img);		imagedestroy($img);	}	/**	* Sinus	*/	function wave($img)	{		global $config;				$period_x = mt_rand(12,18);		$period_y = mt_rand(7,14);		$amp_x = mt_rand(5,10);		$amp_y = mt_rand(2,4); 		$socket = mt_rand(0,100);				$dampen_x = mt_rand($this->width/5, $this->width/2);		$dampen_y = mt_rand($this->height/5, $this->height/2);		$direction_x = (mt_rand (0, 1));		$direction_y = (mt_rand (0, 1));		for ($i = 0; $i < $this->width; $i++)		{			$dir = ($direction_x) ? $i : ($this->width - $i);			imagecopy($img, $img, $i-1, sin($socket+ $i/($period_x + $dir/$dampen_x)) * $amp_x, $i, 0, 1, $this->height);		}		$socket = mt_rand(0,100);		for ($i = 0; $i < $this->height; $i++)		{			$dir = ($direction_y) ? $i : ($this->height - $i);			imagecopy($img, $img ,sin($socket + $i/($period_y + ($dir)/$dampen_y)) * $amp_y, $i-1, 0, $i, $this->width, 1);		}		return $img;	}		/**	* Noise line	*/	function noise_line($img, $min_x, $min_y, $max_x, $max_y, $bg, $font, $non_font)	{		imagesetthickness($img, 2);		$x1 = $min_x;		$x2 = $max_x;		$y1 = $min_y;		$y2 = $min_y;		do		{			$line = array_merge(				array_fill(0, mt_rand(30, 60), $non_font[array_rand($non_font)]),				array_fill(0, mt_rand(30, 60), $bg)			);			imagesetstyle($img, $line);			imageline($img, $x1, $y1, $x2, $y2, IMG_COLOR_STYLED);			$y1 += mt_rand(12, 35);			$y2 += mt_rand(12, 35);		}		while ($y1 < $max_y && $y2 < $max_y);		$x1 = $min_x;		$x2 = $min_x;		$y1 = $min_y;		$y2 = $max_y;		do		{			$line = array_merge(				array_fill(0, mt_rand(30, 60), $non_font[array_rand($non_font)]),				array_fill(0, mt_rand(30, 60), $bg)			);			imagesetstyle($img, $line);			imageline($img, $x1, $y1, $x2, $y2, IMG_COLOR_STYLED);			$x1 += mt_rand(20, 35);			$x2 += mt_rand(20, 35);		}		while ($x1 < $max_x && $x2 < $max_x);		imagesetthickness($img, 1);	}	function captcha_noise_bg_bitmaps()	{				return array(			'width'		=> 15,			'height'	=> 5,			'data'		=> array(			1 => array(				array(1,0,0,0,1,0,0,0,0,0,0,0,0,0,0),				array(1,0,0,0,0,1,0,0,0,0,0,0,0,0,0),				array(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0),				array(1,0,0,0,0,1,0,0,0,0,0,0,1,0,0),				array(1,0,0,0,0,0,1,0,0,0,0,1,0,0,0),			),			2 => array(				array(1,1,mt_rand(0,1),1,0,1,1,1,1,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,1,0,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,0,0,1,1,0,1,1,1),			),			3 => array(				array(1,0,0,0,0,0,0,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,0,0,0,0,0,1,0),				array(0,0,0,0,1,0,0,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,0,0,0,0,0,1,0),				array(1,0,0,0,0,0,0,0,0,0,0,0,0,0,1),			),			4 => array(				array(1,0,1,0,1,0,0,1,1,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,1,0,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),				array(1,0,1,0,0,0,0,0,0,0,0,0,0,0,0),			),			5 => array(				array(1,1,1,1,0,0,0,1,1,1,0,0,1,0,1),				array(0,0,0,0,0,0,0,1,0,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),				array(1,0,1,0,0,0,0,0,0,0,0,0,0,0,0),			),			6 => array(				array(mt_rand(0,1),mt_rand(0,1),mt_rand(0,1),mt_rand(0,1),mt_rand(0,1),0,mt_rand(0,1),mt_rand(0,1),mt_rand(0,1),mt_rand(0,1),mt_rand(0,1),0,mt_rand(0,1),mt_rand(0,1),mt_rand(0,1)),				array(0,0,0,0,0,0,0,mt_rand(0,1),0,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),				array(mt_rand(0,1),0,mt_rand(0,1),0,0,0,0,0,0,0,0,0,0,0,0),			),			7 => array(				array(0,0,0,0,0,0,0,0,0,0,1,1,0,1,1),				array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),				array(0,0,1,1,0,0,0,1,0,0,0,0,0,0,0),				array(0,1,0,0,0,1,0,0,0,0,0,0,0,0,0),				array(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0),			),		));	}		/**	* Return bitmaps	*/	function captcha_bitmaps()	{		global $config;				$chars = array(			'A'	=>	array(						array(							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,1,1,1,1,1,1,0),							array(0,1,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,1,1,0,1,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,1,1,1,1,1,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(1,1,1,0,0,0,1,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,1,1,1,1,1,0,0),							array(0,1,1,0,0,0,1,1,0),							array(1,1,0,0,0,0,0,1,1),							array(1,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,1,1),							array(0,0,0,0,0,1,1,1,1),							array(0,0,0,1,1,1,0,0,1),							array(0,1,1,1,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,1,0,0,0,0,1,1,1),							array(0,1,1,1,1,1,1,0,1),						),					),		'B'	=>		array(						array(							array(1,1,1,1,1,1,1,0,0),							array(1,0,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,1,0),							array(1,1,1,1,1,1,1,0,0),							array(1,0,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,1,0),							array(1,1,1,1,1,1,1,0,0),						),						array(							array(1,1,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(1,1,1,1,1,1,1,0,0),						),						array(							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,1,1,1,1,1,0,0),						),					),		'C'	=>		array(						array(							array(0,0,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,1,1,1,1,0,0),						),						array(							array(0,0,1,1,1,1,1,0,1),							array(0,1,0,0,0,0,0,1,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,1),							array(0,0,1,1,1,1,1,0,1),						),					),		'D'	=>		array(						array(							array(1,1,1,1,1,1,1,0,0),							array(1,0,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,1,0),							array(1,1,1,1,1,1,1,0,0),						),						array(							array(1,1,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(1,1,1,1,1,1,1,0,0),						),						array(							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,1,1,1,1,1,0,1),							array(0,1,1,0,0,0,1,1,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,1,0,0,0,1,1,1),							array(0,0,1,1,1,1,1,0,1),						),					),		'E'	=>		array(						array(							array(1,1,1,1,1,1,1,1,1),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,1,1,1,1,1,1,1,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,1,1,1,1,1,1,1,1),						),						array(							array(1,1,1,1,1,1,1,1,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,1,1,1,1,1,1,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,1),							array(1,1,1,1,1,1,1,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,1,1,1,1,1,0,0),							array(0,1,1,0,0,0,1,1,0),							array(1,1,0,0,0,0,0,1,1),							array(1,1,1,1,1,1,1,1,1),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,1),							array(1,1,0,0,0,0,0,1,1),							array(0,1,1,1,1,1,1,1,0),						),					),		'F'	=>		array(						array(							array(1,1,1,1,1,1,1,1,1),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,1,1,1,1,1,1,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),						),						array(							array(0,1,1,1,1,1,1,1,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(1,1,1,0,0,0,0,0,0),						),						array(							array(0,0,0,1,1,0,0,0,0),							array(0,0,1,1,0,0,0,0,0),							array(0,1,1,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(1,1,1,1,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),						),					),		'G'	=>		array(						array(							array(0,0,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,1,1,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,1,1,1,1,0,0),						),						array(							array(0,0,1,1,1,1,1,0,1),							array(0,1,0,0,0,0,0,1,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,1,1,1,1,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,1),							array(0,0,1,1,1,1,1,0,1),						),						array(							array(0,0,1,1,1,1,1,0,1),							array(0,1,1,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,1,1,0,0,0,0,0,1),							array(0,0,1,1,1,1,1,1,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,1,1),							array(1,1,1,1,1,1,1,1,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),						),					),		'H'	=>		array(						array(							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,1,1,1,1,1,1,1,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),						),						array(							array(1,1,1,0,0,0,1,1,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,1,1,1,1,1,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(1,1,1,0,0,0,1,1,1),						),						array(							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,1,1,1,0,0,0),							array(1,1,1,1,0,1,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),						),					),		'I'	=>		array(						array(							array(1,1,1,1,1,1,1,1,1),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(1,1,1,1,1,1,1,1,1),						),						array(							array(0,0,0,1,1,1,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,1,1,1,0,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,1,1,1,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,1,1,1,0,0,0),						),					),		'J'	=>		array(						array(							array(1,1,1,1,1,1,1,1,1),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(1,0,0,0,0,1,0,0,0),							array(1,0,0,0,0,1,0,0,0),							array(0,1,0,0,1,0,0,0,0),							array(0,0,1,1,0,0,0,0,0),						),						array(							array(1,1,1,1,1,1,1,1,1),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(1,0,0,0,0,1,0,0,0),							array(1,0,0,0,0,1,0,0,0),							array(1,1,0,0,1,0,0,0,0),							array(1,0,1,1,0,0,0,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(1,0,0,0,0,1,0,0,0),							array(1,0,0,0,0,1,0,0,0),							array(0,1,0,0,1,0,0,0,0),							array(0,0,1,1,0,0,0,0,0),						),					),		'K'	=>		array(						array(    // New 'K', supplied by NeoThermic							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,1,0,0,0),							array(1,0,0,0,1,0,0,0,0),							array(1,0,0,1,0,0,0,0,0),							array(1,0,1,0,0,0,0,0,0),							array(1,1,0,0,0,0,0,0,0),							array(1,0,1,0,0,0,0,0,0),							array(1,0,0,1,0,0,0,0,0),							array(1,0,0,0,1,0,0,0,0),							array(1,0,0,0,0,1,0,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),						),						array(							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,1,0,0),							array(0,1,0,0,0,1,0,0,0),							array(0,1,0,0,1,0,0,0,0),							array(0,1,0,1,0,0,0,0,0),							array(0,1,1,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,1,0,0,0,0,0,0),							array(0,1,0,1,0,0,0,0,0),							array(0,1,0,0,1,0,0,0,0),							array(0,1,0,0,0,1,0,0,0),							array(0,1,0,0,0,0,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(1,1,1,0,0,0,1,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,1,0,0,0),							array(0,1,0,0,1,0,0,0,0),							array(0,1,0,1,0,0,0,0,0),							array(0,1,1,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,1,0,0,0,0,0,0),							array(0,1,0,1,0,0,0,0,0),							array(0,1,0,0,1,0,0,0,0),							array(0,1,0,0,0,1,0,0,0),							array(0,1,0,0,0,0,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),						),					),		'L'	=>		array(						array(							array(0,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,1,1,1,1,1,1,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,1),							array(1,1,1,1,1,1,1,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,1,0,0,0,0,0,0),							array(0,0,1,1,1,0,0,0,0),						),					),		'M'	=>		array(						array(							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,0,1,0,0,0,1,0,1),							array(1,0,1,0,0,0,1,0,1),							array(1,0,1,0,0,0,1,0,1),							array(1,0,0,1,0,1,0,0,1),							array(1,0,0,1,0,1,0,0,1),							array(1,0,0,1,0,1,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,1,0,0,0,1,1,0),							array(0,1,1,0,0,0,1,1,0),							array(0,1,1,0,0,0,1,1,0),							array(0,1,0,1,0,1,0,1,0),							array(0,1,0,1,0,1,0,1,0),							array(0,1,0,1,0,1,0,1,0),							array(0,1,0,0,1,0,0,1,0),							array(0,1,0,0,1,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(1,1,1,0,0,0,1,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,1,1,1,0,1,1,1,0),							array(1,1,0,1,1,1,0,1,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),						),					),		'N'	=>		array(						array(							array(1,1,0,0,0,0,0,0,1),							array(1,1,0,0,0,0,0,0,1),							array(1,0,1,0,0,0,0,0,1),							array(1,0,1,0,0,0,0,0,1),							array(1,0,0,1,0,0,0,0,1),							array(1,0,0,1,0,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,0,1,0,0,1),							array(1,0,0,0,0,1,0,0,1),							array(1,0,0,0,0,0,1,0,1),							array(1,0,0,0,0,0,1,0,1),							array(1,0,0,0,0,0,0,1,1),							array(1,0,0,0,0,0,0,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,1,0,0,0,0,1,0),							array(0,1,1,0,0,0,0,1,0),							array(0,1,1,0,0,0,0,1,0),							array(0,1,0,1,0,0,0,1,0),							array(0,1,0,1,0,0,0,1,0),							array(0,1,0,1,0,0,0,1,0),							array(0,1,0,0,1,0,0,1,0),							array(0,1,0,0,1,1,0,1,0),							array(0,1,0,0,0,1,0,1,0),							array(0,1,0,0,0,1,1,1,0),							array(0,1,0,0,0,0,1,1,0),							array(0,1,0,0,0,0,0,1,0),							array(1,1,1,0,0,0,1,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(1,0,1,1,1,1,0,0,0),							array(1,1,1,0,0,1,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),						),					),		'O'	=>		array(						array(							array(0,0,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,1,1,1,1,0,0),						),						array(							array(0,0,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,1,1,1,1,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,1,1,1,1,1,0,0,0),							array(1,1,1,0,0,1,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,1,0,0,0,1,1,0,0),							array(0,1,1,1,1,1,0,0,0),						),					),		'P'	=>		array(						array(							array(1,1,1,1,1,1,1,0,0),							array(1,0,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,1,0),							array(1,1,1,1,1,1,1,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),						),						array(							array(1,1,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(1,1,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(1,1,1,0,0,0,0,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,1,1,0,0,0,0,0),							array(1,1,0,1,1,0,0,0,0),							array(1,0,0,0,1,0,0,0,0),							array(1,0,0,0,1,0,0,0,0),							array(1,0,0,1,1,0,0,0,0),							array(1,1,1,1,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),						),					),		'Q'	=>		array(						array(							array(0,0,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,1,0,0,1),							array(1,0,0,0,0,0,1,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,1,1,1,1,0,1),						),						array(							array(0,0,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,1,0,0,1,1,0,1,1),							array(0,1,1,1,1,1,1,1,0),							array(0,0,0,0,0,0,1,1,0),							array(0,0,0,0,0,0,0,1,1),							array(0,0,0,0,0,0,0,0,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,1,1,1,1),							array(0,0,0,0,1,1,0,0,1),							array(0,0,0,0,1,0,0,0,1),							array(0,0,0,0,1,0,0,0,1),							array(0,0,0,0,1,1,0,1,1),							array(0,0,0,0,0,1,1,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),						),					),		'R'	=>		array(						array(							array(1,1,1,1,1,1,1,0,0),							array(1,0,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,1,0),							array(1,1,1,1,1,1,1,0,0),							array(1,1,1,0,0,0,0,0,0),							array(1,0,0,1,0,0,0,0,0),							array(1,0,0,0,1,0,0,0,0),							array(1,0,0,0,0,1,0,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),						),						array(							array(1,1,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(1,1,1,1,1,1,1,0,0),							array(0,1,1,0,0,0,0,0,0),							array(0,1,1,1,0,0,0,0,0),							array(0,1,0,1,1,0,0,0,0),							array(0,1,0,0,1,1,0,0,0),							array(0,1,0,0,0,1,1,0,0),							array(0,1,0,0,0,0,1,1,0),							array(1,1,1,0,0,0,1,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,1,1,1,1,0,0,0,0),							array(1,1,0,0,1,1,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),						),					),		'S'	=>		array(						array(							array(0,0,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,0,1,1,1,1,1,0,0),							array(0,0,0,0,0,0,0,1,0),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,1,1,1,1,0,0),						),						array(							array(0,0,1,1,1,1,1,0,1),							array(0,1,0,0,0,0,0,1,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,0,1,1,1,1,1,0,0),							array(0,0,0,0,0,0,0,1,0),							array(0,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,1,0,0,0,0,0,1,0),							array(1,0,1,1,1,1,1,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,1,1,1,1,0,0,0,0),							array(1,0,0,0,0,1,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,1,0,0,0,0,0,0,0),							array(0,1,1,1,1,0,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(1,0,0,0,1,1,0,0,0),							array(0,1,1,1,1,0,0,0,0),						),					),		'T'	=>		array(						array(							array(1,1,1,1,1,1,1,1,1),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),						),						array(							array(1,1,1,1,1,1,1,1,1),							array(1,0,0,0,1,0,0,0,1),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,1,1,1,0,0,0),						),						array(							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,1,1,1,1,1,1,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,1,0,0,0),							array(0,0,0,0,0,1,1,1,0),						),					),		'U'	=>		array(						array(							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,1,1,1,1,0,0),						),						array(							array(1,0,0,0,0,0,0,0,0),							array(1,1,1,0,0,0,1,1,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,1,0,0,0,1,1,0),							array(0,0,1,1,1,1,1,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,1,0,0,0,0,0,1),							array(0,0,1,0,0,0,0,0,1),							array(0,0,1,0,0,0,0,0,1),							array(0,0,1,0,0,0,0,0,1),							array(0,0,1,0,0,0,0,0,1),							array(0,0,1,0,0,0,0,1,1),							array(0,0,1,1,0,0,1,1,1),							array(0,0,0,1,1,1,1,0,1),						),					),		'V'	=>		array(						array(							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(1,1,1,0,0,0,1,1,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),						),					),		'W'	=>		array(						array(							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,1,0,1,0,0,1),							array(1,0,0,1,0,1,0,0,1),							array(1,0,0,1,0,1,0,0,1),							array(1,0,1,0,0,0,1,0,1),							array(1,0,1,0,0,0,1,0,1),							array(1,0,1,0,0,0,1,0,1),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(1,1,1,0,0,0,1,1,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,1,0,0,1,0),							array(0,1,0,0,1,0,0,1,0),							array(0,1,0,1,1,1,0,1,0),							array(0,1,0,1,0,1,0,1,0),							array(0,1,1,1,0,1,1,1,0),							array(0,1,1,0,0,0,1,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,0,0,0,0,0,0,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,1,0,0,1,0),							array(0,1,0,0,1,0,0,1,0),							array(0,1,0,1,1,1,0,1,0),							array(0,1,0,1,0,1,0,1,0),							array(0,1,1,1,0,1,1,1,0),							array(0,1,1,0,0,0,1,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,0,0,0,0,0,0,0,0),						),					),		'X'	=>		array(						array(							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,1,0,0,0,0,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(1,1,1,0,0,0,1,1,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,1,0,0,0,0,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(1,1,1,0,0,0,1,1,1),							array(0,0,0,0,0,0,0,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,1,0,0,0,1,1,0),							array(0,0,1,1,0,1,1,0,0),							array(0,0,0,1,1,1,0,0,0),							array(0,0,0,1,1,1,0,0,0),							array(0,0,1,1,0,1,1,0,0),							array(0,1,1,0,0,0,1,1,0),							array(0,0,0,0,0,0,0,0,0),						),					),		'Y'	=>		array(						array(							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(1,1,1,0,0,0,1,1,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,1,1,1,0,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,1,0,0,0,0,1),							array(0,0,0,1,1,0,0,0,1),							array(0,0,0,0,1,0,0,1,1),							array(0,0,0,0,1,1,0,1,0),							array(0,0,0,0,0,1,1,1,0),							array(0,0,0,0,0,0,1,0,0),							array(0,0,0,0,0,1,1,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,1,1,0,0,0),							array(0,0,1,1,1,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),						),					),		'Z'	=>		array(						array(							array(1,1,1,1,1,1,1,1,1),							array(1,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,1,0),							array(0,0,0,0,0,0,1,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,1,0,0,0,0,0),							array(0,0,0,1,0,0,0,0,0),							array(0,0,1,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,1),							array(1,1,1,1,1,1,1,1,1),						),						array(							array(1,1,1,1,1,1,1,1,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,1,0),							array(0,0,0,0,0,0,1,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,1,1,1,1,1,0,0),							array(0,0,0,1,0,0,0,0,0),							array(0,0,0,1,0,0,0,0,0),							array(0,0,1,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,1,1,1,1,1,1,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,1,1,1,1,1,1,1,0),							array(0,0,0,0,0,1,1,0,0),							array(0,0,0,0,1,1,0,0,0),							array(0,0,0,1,1,0,0,0,0),							array(0,0,1,1,0,0,0,0,0),							array(0,0,1,0,0,0,0,0,0),							array(0,1,1,1,1,1,1,1,0),						),					),				);		return array(			'width'		=> 9,			'height'	=> 15,			'data'		=> array(			'A' =>	$chars['A'][mt_rand(0, min(sizeof($chars['A']), $config['captcha_gd_fonts']) -1)],			'B' =>	$chars['B'][mt_rand(0, min(sizeof($chars['B']), $config['captcha_gd_fonts']) -1)],			'C' =>	$chars['C'][mt_rand(0, min(sizeof($chars['C']), $config['captcha_gd_fonts']) -1)],			'D' =>	$chars['D'][mt_rand(0, min(sizeof($chars['D']), $config['captcha_gd_fonts']) -1)],			'E' =>	$chars['E'][mt_rand(0, min(sizeof($chars['E']), $config['captcha_gd_fonts']) -1)],			'F' =>	$chars['F'][mt_rand(0, min(sizeof($chars['F']), $config['captcha_gd_fonts']) -1)],			'G' =>	$chars['G'][mt_rand(0, min(sizeof($chars['G']), $config['captcha_gd_fonts']) -1)],			'H' =>	$chars['H'][mt_rand(0, min(sizeof($chars['H']), $config['captcha_gd_fonts']) -1)],			'I' =>	$chars['I'][mt_rand(0, min(sizeof($chars['I']), $config['captcha_gd_fonts']) -1)],			'J' =>	$chars['J'][mt_rand(0, min(sizeof($chars['J']), $config['captcha_gd_fonts']) -1)],			'K' =>	$chars['K'][mt_rand(0, min(sizeof($chars['K']), $config['captcha_gd_fonts']) -1)],			'L' =>	$chars['L'][mt_rand(0, min(sizeof($chars['L']), $config['captcha_gd_fonts']) -1)],			'M' =>	$chars['M'][mt_rand(0, min(sizeof($chars['M']), $config['captcha_gd_fonts']) -1)],  			'N' =>	$chars['N'][mt_rand(0, min(sizeof($chars['N']), $config['captcha_gd_fonts']) -1)],			'O' =>	$chars['O'][mt_rand(0, min(sizeof($chars['O']), $config['captcha_gd_fonts']) -1)],			'P' =>	$chars['P'][mt_rand(0, min(sizeof($chars['P']), $config['captcha_gd_fonts']) -1)],			'Q' =>	$chars['Q'][mt_rand(0, min(sizeof($chars['Q']), $config['captcha_gd_fonts']) -1)],			'R' =>	$chars['R'][mt_rand(0, min(sizeof($chars['R']), $config['captcha_gd_fonts']) -1)],			'S' =>	$chars['S'][mt_rand(0, min(sizeof($chars['S']), $config['captcha_gd_fonts']) -1)],			'T' =>	$chars['T'][mt_rand(0, min(sizeof($chars['T']), $config['captcha_gd_fonts']) -1)],			'U' =>	$chars['U'][mt_rand(0, min(sizeof($chars['U']), $config['captcha_gd_fonts']) -1)],			'V' =>	$chars['V'][mt_rand(0, min(sizeof($chars['V']), $config['captcha_gd_fonts']) -1)],			'W' =>	$chars['W'][mt_rand(0, min(sizeof($chars['W']), $config['captcha_gd_fonts']) -1)],			'X' =>	$chars['X'][mt_rand(0, min(sizeof($chars['X']), $config['captcha_gd_fonts']) -1)],			'Y' =>	$chars['Y'][mt_rand(0, min(sizeof($chars['Y']), $config['captcha_gd_fonts']) -1)],			'Z' =>	$chars['Z'][mt_rand(0, min(sizeof($chars['Z']), $config['captcha_gd_fonts']) -1)],			'1' => array(				array(0,0,0,1,1,0,0,0,0),				array(0,0,1,0,1,0,0,0,0),				array(0,1,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,1,1,1,1,1,1,1,0),			),			'2' => array(    // New '2' supplied by Anon				array(0,0,0,1,1,1,0,0,0),				array(0,0,1,0,0,0,1,0,0),				array(0,1,0,0,0,0,1,1,0),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,1,1),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,0,1,0,0),				array(0,0,0,0,0,1,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,1,0,0,0,0,0),				array(0,0,1,0,0,0,0,0,0),				array(0,1,0,0,0,0,0,0,0),				array(1,1,1,1,1,1,1,1,1),				array(0,0,0,0,0,0,0,0,0),			),			'3' => array(				array(0,0,1,1,1,1,1,0,0),				array(0,1,0,0,0,0,0,1,0),				array(1,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,1,1,0,0),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(0,1,0,0,0,0,0,1,0),				array(0,0,1,1,1,1,1,0,0),			),			'4' => array(				array(0,0,0,0,0,0,1,1,0),				array(0,0,0,0,0,1,0,1,0),				array(0,0,0,0,1,0,0,1,0),				array(0,0,0,1,0,0,0,1,0),				array(0,0,1,0,0,0,0,1,0),				array(0,1,0,0,0,0,0,1,0),				array(1,0,0,0,0,0,0,1,0),				array(1,0,0,0,0,0,0,1,0),				array(1,1,1,1,1,1,1,1,1),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,0,0,1,0),			),			'5' => array(				array(1,1,1,1,1,1,1,1,1),				array(1,0,0,0,0,0,0,0,0),				array(1,0,0,0,0,0,0,0,0),				array(1,0,0,0,0,0,0,0,0),				array(1,0,0,0,0,0,0,0,0),				array(0,1,0,0,0,0,0,0,0),				array(0,0,1,1,1,1,1,0,0),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(0,1,0,0,0,0,0,1,0),				array(0,0,1,1,1,1,1,0,0),			),			'6' => array(				array(0,0,1,1,1,1,1,0,0),				array(0,1,0,0,0,0,0,1,0),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,0),				array(1,0,0,0,0,0,0,0,0),				array(1,0,0,1,1,1,1,0,0),				array(1,0,1,0,0,0,0,1,0),				array(1,1,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(0,1,0,0,0,0,0,1,0),				array(0,0,1,1,1,1,1,0,0),			),			'7' => array(				array(1,1,1,1,1,1,1,1,1),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,0,1,0,0),				array(0,0,0,0,0,1,0,0,0),				array(0,0,0,0,0,1,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,1,0,0,0,0,0),				array(0,0,0,1,0,0,0,0,0),				array(0,0,1,0,0,0,0,0,0),				array(0,1,0,0,0,0,0,0,0),				array(0,1,0,0,0,0,0,0,0),				array(1,0,0,0,0,0,0,0,0),				array(1,0,0,0,0,0,0,0,0),			),			'8' => array(				array(0,0,1,1,1,1,1,0,0),				array(0,1,0,0,0,0,0,1,0),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(0,1,0,0,0,0,0,1,0),				array(0,0,1,1,1,1,1,0,0),				array(0,1,0,0,0,0,0,1,0),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(0,1,0,0,0,0,0,1,0),				array(0,0,1,1,1,1,1,0,0),			),			'9' => array(				array(0,0,1,1,1,1,1,0,0),				array(0,1,0,0,0,0,0,1,0),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,1,1),				array(0,1,0,0,0,0,1,0,1),				array(0,0,1,1,1,1,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(0,1,0,0,0,0,0,1,0),				array(0,0,1,1,1,1,1,0,0),			),			)		);	}}/*** @package VC*/class char_cube3d{	var $bitmap;	var $bitmap_width;	var $bitmap_height;	var $basis_matrix = array(array(1, 0, 0), array(0, 1, 0), array(0, 0, 1));	var $abs_x = array(1, 0);	var $abs_y = array(0, 1);	var $x = 0;	var $y = 1;	var $z = 2;	var $letter = '';	/**	*/	function char_cube3d(&$bitmaps, $letter)	{		$this->bitmap			= $bitmaps['data'][$letter];		$this->bitmap_width		= $bitmaps['width'];		$this->bitmap_height	= $bitmaps['height'];		$this->basis_matrix[0][0] = mt_rand(-600, 600);		$this->basis_matrix[0][1] = mt_rand(-600, 600);		$this->basis_matrix[0][2] = (mt_rand(0, 1) * 2000) - 1000;		$this->basis_matrix[1][0] = mt_rand(-1000, 1000);		$this->basis_matrix[1][1] = mt_rand(-1000, 1000);		$this->basis_matrix[1][2] = mt_rand(-1000, 1000);		$this->normalize($this->basis_matrix[0]);		$this->normalize($this->basis_matrix[1]);		$this->basis_matrix[2] = $this->cross_product($this->basis_matrix[0], $this->basis_matrix[1]);		$this->normalize($this->basis_matrix[2]);		// $this->basis_matrix[1] might not be (probably isn't) orthogonal to $basis_matrix[0]		$this->basis_matrix[1] = $this->cross_product($this->basis_matrix[0], $this->basis_matrix[2]);		$this->normalize($this->basis_matrix[1]);		// Make sure our cube is facing into the canvas (assuming +z == in)		for ($i = 0; $i < 3; ++$i)		{			if ($this->basis_matrix[$i][2] < 0)			{				$this->basis_matrix[$i][0] *= -1;				$this->basis_matrix[$i][1] *= -1;				$this->basis_matrix[$i][2] *= -1;			}		}		// Force our "z" basis vector to be the one with greatest absolute z value		$this->x = 0;		$this->y = 1;		$this->z = 2;		// Swap "y" with "z"		if ($this->basis_matrix[1][2] > $this->basis_matrix[2][2])		{			$this->z = 1;			$this->y = 2;		}		// Swap "x" with "z"		if ($this->basis_matrix[0][2] > $this->basis_matrix[$this->z][2])		{			$this->x = $this->z;			$this->z = 0;		}		// Still need to determine which of $x,$y are which.		// wrong orientation if y's y-component is less than it's x-component		// likewise if x's x-component is less than it's y-component		// if they disagree, go with the one with the greater weight difference.		// rotate if positive		$weight = (abs($this->basis_matrix[$this->x][1]) - abs($this->basis_matrix[$this->x][0])) + (abs($this->basis_matrix[$this->y][0]) - abs($this->basis_matrix[$this->y][1]));		// Swap "x" with "y"		if ($weight > 0)		{			list($this->x, $this->y) = array($this->y, $this->x);		}		$this->abs_x = array($this->basis_matrix[$this->x][0], $this->basis_matrix[$this->x][1]);		$this->abs_y = array($this->basis_matrix[$this->y][0], $this->basis_matrix[$this->y][1]);		if ($this->abs_x[0] < 0)		{			$this->abs_x[0] *= -1;			$this->abs_x[1] *= -1;		}		if ($this->abs_y[1] > 0)		{			$this->abs_y[0] *= -1;			$this->abs_y[1] *= -1;		}		$this->letter = $letter;	}	/**	* Draw a character	*/	function drawchar($scale, $xoff, $yoff, $img, $background, $colours)	{		$width	= $this->bitmap_width;		$height	= $this->bitmap_height;		$bitmap	= $this->bitmap;		$colour1 = $colours[array_rand($colours)];		$colour2 = $colours[array_rand($colours)];		$swapx = ($this->basis_matrix[$this->x][0] > 0);		$swapy = ($this->basis_matrix[$this->y][1] < 0);		for ($y = 0; $y < $height; ++$y)		{			for ($x = 0; $x < $width; ++$x)			{				$xp = ($swapx) ? ($width - $x - 1) : $x;				$yp = ($swapy) ? ($height - $y - 1) : $y;				if ($bitmap[$height - $yp - 1][$xp])				{					$dx = $this->scale($this->abs_x, ($xp - ($swapx ? ($width / 2) : ($width / 2) - 1)) * $scale);					$dy = $this->scale($this->abs_y, ($yp - ($swapy ? ($height / 2) : ($height / 2) - 1)) * $scale);					$xo = $xoff + $dx[0] + $dy[0];					$yo = $yoff + $dx[1] + $dy[1];					$origin = array(0, 0, 0);					$xvec = $this->scale($this->basis_matrix[$this->x], $scale);					$yvec = $this->scale($this->basis_matrix[$this->y], $scale);					$face_corner = $this->sum2($xvec, $yvec);					$zvec = $this->scale($this->basis_matrix[$this->z], $scale);					$x_corner = $this->sum2($xvec, $zvec);					$y_corner = $this->sum2($yvec, $zvec);					imagefilledpolygon($img, $this->gen_poly($xo, $yo, $origin, $xvec, $x_corner,$zvec), 4, $colour1);					imagefilledpolygon($img, $this->gen_poly($xo, $yo, $origin, $yvec, $y_corner,$zvec), 4, $colour2);					$face = $this->gen_poly($xo, $yo, $origin, $xvec, $face_corner, $yvec);					imagefilledpolygon($img, $face, 4, $background);					imagepolygon($img, $face, 4, $colour1);				}			}		}	}	/*	* return a roughly acceptable range of sizes for rendering with this texttype	*/	function range()	{		return array(3, 4);	}	/**	* Vector length	*/	function vectorlen($vector)	{		return sqrt(pow($vector[0], 2) + pow($vector[1], 2) + pow($vector[2], 2));	}	/**	* Normalize	*/	function normalize(&$vector, $length = 1)	{		$length = (( $length < 1) ? 1 : $length);		$length /= $this->vectorlen($vector);		$vector[0] *= $length;		$vector[1] *= $length;		$vector[2] *= $length;	}	/**	*/	function cross_product($vector1, $vector2)	{		$retval = array(0, 0, 0);		$retval[0] =  (($vector1[1] * $vector2[2]) - ($vector1[2] * $vector2[1]));		$retval[1] = -(($vector1[0] * $vector2[2]) - ($vector1[2] * $vector2[0]));		$retval[2] =  (($vector1[0] * $vector2[1]) - ($vector1[1] * $vector2[0]));		return $retval;	}	/**	*/	function sum($vector1, $vector2)	{		return array($vector1[0] + $vector2[0], $vector1[1] + $vector2[1], $vector1[2] + $vector2[2]);	}	/**	*/	function sum2($vector1, $vector2)	{		return array($vector1[0] + $vector2[0], $vector1[1] + $vector2[1]);	}	/**	*/	function scale($vector, $length)	{		if (sizeof($vector) == 2)		{			return array($vector[0] * $length, $vector[1] * $length);		}		return array($vector[0] * $length, $vector[1] * $length, $vector[2] * $length);	}	/**	*/	function gen_poly($xoff, $yoff, &$vec1, &$vec2, &$vec3, &$vec4)	{		$poly = array();		$poly[0] = $xoff + $vec1[0];		$poly[1] = $yoff + $vec1[1];		$poly[2] = $xoff + $vec2[0];		$poly[3] = $yoff + $vec2[1];		$poly[4] = $xoff + $vec3[0];		$poly[5] = $yoff + $vec3[1];		$poly[6] = $xoff + $vec4[0];		$poly[7] = $yoff + $vec4[1];		return $poly;	}	/**	* dimensions	*/	function dimensions($size)	{		$xn = $this->scale($this->basis_matrix[$this->x], -($this->bitmap_width / 2) * $size);		$xp = $this->scale($this->basis_matrix[$this->x], ($this->bitmap_width / 2) * $size);		$yn = $this->scale($this->basis_matrix[$this->y], -($this->bitmap_height / 2) * $size);		$yp = $this->scale($this->basis_matrix[$this->y], ($this->bitmap_height / 2) * $size);		$p = array();		$p[0] = $this->sum2($xn, $yn);		$p[1] = $this->sum2($xp, $yn);		$p[2] = $this->sum2($xp, $yp);		$p[3] = $this->sum2($xn, $yp);		$min_x = $max_x = $p[0][0];		$min_y = $max_y = $p[0][1];		for ($i = 1; $i < 4; ++$i)		{			$min_x = ($min_x > $p[$i][0]) ? $p[$i][0] : $min_x;			$min_y = ($min_y > $p[$i][1]) ? $p[$i][1] : $min_y;			$max_x = ($max_x < $p[$i][0]) ? $p[$i][0] : $max_x;			$max_y = ($max_y < $p[$i][1]) ? $p[$i][1] : $max_y;		}		return array($min_x, $min_y, $max_x, $max_y);	}}/*** @package VC*/class colour_manager{	var $img;	var $mode;	var $colours;	var $named_colours;	/**	* Create the colour manager, link it to the image resource	*/	function colour_manager($img, $background = false, $mode = 'ahsv')	{		$this->img = $img;		$this->mode = $mode;		$this->colours = array();		$this->named_colours = array();		if ($background !== false)		{			$bg = $this->allocate_named('background', $background);			imagefill($this->img, 0, 0, $bg);		}	}	/**	* Lookup a named colour resource	*/	function get_resource($named_colour)	{		if (isset($this->named_colours[$named_colour]))		{			return $this->named_colours[$named_colour];		}		if (isset($this->named_rgb[$named_colour]))		{			return $this->allocate_named($named_colour, $this->named_rgb[$named_colour], 'rgb');		}		return false;	}	/**	* Assign a name to a colour resource	*/	function name_colour($name, $resource)	{		$this->named_colours[$name] = $resource;	}	/**	* names and allocates a colour resource	*/	function allocate_named($name, $colour, $mode = false)	{		$resource = $this->allocate($colour, $mode);		if ($resource !== false)		{			$this->name_colour($name, $resource);		}		return $resource;	}	/**	* allocates a specified colour into the image	*/	function allocate($colour, $mode = false)	{		if ($mode === false)		{			$mode = $this->mode;		}				if (!is_array($colour))		{			if (isset($this->named_rgb[$colour]))			{				return $this->allocate_named($colour, $this->named_rgb[$colour], 'rgb');			}			if (!is_int($colour))			{				return false;			}			$mode = 'rgb';			$colour = array(255 & ($colour >> 16), 255 & ($colour >>  8), 255 & $colour);		}		if (isset($colour['mode']))		{			$mode = $colour['mode'];			unset($colour['mode']);		}		if (isset($colour['random']))		{			unset($colour['random']);			// everything else is params			return $this->random_colour($colour, $mode);		}		$rgb		= colour_manager::model_convert($colour, $mode, 'rgb');		$store		= ($this->mode == 'rgb') ? $rgb : colour_manager::model_convert($colour, $mode, $this->mode);		$resource	= imagecolorallocate($this->img, $rgb[0], $rgb[1], $rgb[2]);		$this->colours[$resource] = $store;		return $resource;	}	/**	* randomly generates a colour, with optional params	*/	function random_colour($params = array(), $mode = false)	{		if ($mode === false)		{			$mode = $this->mode;		}		switch ($mode)		{			case 'rgb':				// @TODO random rgb generation. do we intend to do this, or is it just too tedious?			break;			case 'ahsv':			case 'hsv':			default:				$default_params = array(					'hue_bias'			=> false,	// degree / 'r'/'g'/'b'/'c'/'m'/'y'   /'o'					'hue_range'			=> false,	// if hue bias, then difference range +/- from bias					'min_saturation'	=> 30,		// 0 - 100					'max_saturation'	=> 80,		// 0 - 100					'min_value'			=> 30,		// 0 - 100					'max_value'			=> 80,		// 0 - 100				);				$alt = ($mode == 'ahsv') ? true : false;				$params = array_merge($default_params, $params);				$min_hue		= 0;				$max_hue		= 359;				$min_saturation	= max(0, $params['min_saturation']);				$max_saturation	= min(100, $params['max_saturation']);				$min_value		= max(0, $params['min_value']);				$max_value		= min(100, $params['max_value']);				if ($params['hue_bias'] !== false)				{					if (is_numeric($params['hue_bias']))					{						$h = intval($params['hue_bias']) % 360;					}					else					{						switch ($params['hue_bias'])						{							case 'o':								$h = $alt ?  60 :  30;							break;							case 'y':								$h = $alt ? 120 :  60;							break;							case 'g':								$h = $alt ? 180 : 120;							break;							case 'c':								$h = $alt ? 210 : 180;							break;							case 'b':								$h = 240;							break;							case 'm':								$h = 300;							break;							case 'r':							default:								$h = 0;							break;						}					}					$min_hue = $h + 360;					$max_hue = $h + 360;					if ($params['hue_range'])					{						$min_hue -= min(180, $params['hue_range']);						$max_hue += min(180, $params['hue_range']);					}				}				$h = mt_rand($min_hue, $max_hue);				$s = mt_rand($min_saturation, $max_saturation);				$v = mt_rand($min_value, $max_value);				return $this->allocate(array($h, $s, $v), $mode);			break;		}	}	/**	*/	function colour_scheme($resource, $include_original = true)	{		$mode = 'hsv';		if (($pre = $this->get_resource($resource)) !== false)		{			$resource = $pre;		}		$colour = colour_manager::model_convert($this->colours[$resource], $this->mode, $mode);		$results = ($include_original) ? array($resource) : array();		$colour2 = $colour3 = $colour4 = $colour;		$colour2[0] += 150;		$colour3[0] += 180;		$colour4[0] += 210;		$results[] = $this->allocate($colour2, $mode);		$results[] = $this->allocate($colour3, $mode);		$results[] = $this->allocate($colour4, $mode);		return $results;	}	/**	*/	function mono_range($resource, $count = 5, $include_original = true)	{		if (is_array($resource))		{			$results = array();			for ($i = 0, $size = sizeof($resource); $i < $size; ++$i)			{				$results = array_merge($results, $this->mono_range($resource[$i], $count, $include_original));			}			return $results;		}		$mode = (in_array($this->mode, array('hsv', 'ahsv'), true) ? $this->mode : 'ahsv');		if (($pre = $this->get_resource($resource)) !== false)		{			$resource = $pre;		}		$colour = colour_manager::model_convert($this->colours[$resource], $this->mode, $mode);		$results = array();		if ($include_original)		{			$results[] = $resource;			$count--;		}		// This is a hard problem. I chicken out and try to maintain readability at the cost of less randomness.				while ($count > 0)		{			$colour[1] = ($colour[1] + mt_rand(40,60)) % 99;			$colour[2] = ($colour[2] + mt_rand(40,60));			$results[] = $this->allocate($colour, $mode);			$count--;		}		return $results;	}	/**	* Convert from one colour model to another	*/	function model_convert($colour, $from_model, $to_model)	{		if ($from_model == $to_model)		{			return $colour;		}		switch ($to_model)		{			case 'hsv':				switch ($from_model)				{					case 'ahsv':						return colour_manager::ah2h($colour);					break;					case 'rgb':						return colour_manager::rgb2hsv($colour);					break;				}			break;			case 'ahsv':				switch ($from_model)				{					case 'hsv':						return colour_manager::h2ah($colour);					break;					case 'rgb':						return colour_manager::h2ah(colour_manager::rgb2hsv($colour));					break;				}			break;			case 'rgb':				switch ($from_model)				{					case 'hsv':						return colour_manager::hsv2rgb($colour);					break;					case 'ahsv':						return colour_manager::hsv2rgb(colour_manager::ah2h($colour));					break;				}			break;		}		return false;	}	/**	* Slightly altered from wikipedia's algorithm	*/	function hsv2rgb($hsv)	{		colour_manager::normalize_hue($hsv[0]);		$h = $hsv[0];		$s = min(1, max(0, $hsv[1] / 100));		$v = min(1, max(0, $hsv[2] / 100));		// calculate hue sector		$hi = floor($hsv[0] / 60);		// calculate opposite colour		$p = $v * (1 - $s);		// calculate distance between hex vertices		$f = ($h / 60) - $hi;		// coming in or going out?		if (!($hi & 1))		{			$f = 1 - $f;		}		// calculate adjacent colour		$q = $v * (1 - ($f * $s));		switch ($hi)		{			case 0:				$rgb = array($v, $q, $p);			break;			case 1:				$rgb = array($q, $v, $p);			break;			case 2:				$rgb = array($p, $v, $q);			break;			case 3:				$rgb = array($p, $q, $v);			break;			case 4:				$rgb = array($q, $p, $v);			break;			case 5:				$rgb = array($v, $p, $q);			break;			default:				return array(0, 0, 0);			break;		}		return array(255 * $rgb[0], 255 * $rgb[1], 255 * $rgb[2]);	}	/**	* (more than) Slightly altered from wikipedia's algorithm	*/	function rgb2hsv($rgb)	{		$r = min(255, max(0, $rgb[0]));		$g = min(255, max(0, $rgb[1]));		$b = min(255, max(0, $rgb[2]));		$max = max($r, $g, $b);		$min = min($r, $g, $b);		$v = $max / 255;		$s = (!$max) ? 0 : 1 - ($min / $max);		// if max - min is 0, we want hue to be 0 anyway.		$h = $max - $min;		if ($h)		{			switch ($max)			{				case $g:					$h = 120 + (60 * ($b - $r) / $h);				break;				case $b:					$h = 240 + (60 * ($r - $g) / $h);				break;				case $r:					$h = 360 + (60 * ($g - $b) / $h);				break;			}		}		colour_manager::normalize_hue($h);		return array($h, $s * 100, $v * 100);	}	/**	*/	function normalize_hue(&$hue)	{		$hue %= 360;		if ($hue < 0)		{			$hue += 360;		}	}	/**	* Alternate hue to hue	*/	function ah2h($ahue)	{		if (is_array($ahue))		{			$ahue[0] = colour_manager::ah2h($ahue[0]);			return $ahue;		}		colour_manager::normalize_hue($ahue);		// blue through red is already ok		if ($ahue >= 240)		{			return $ahue;		}		// ahue green is at 180		if ($ahue >= 180)		{			// return (240 - (2 * (240 - $ahue)));			return (2 * $ahue) - 240; // equivalent		}		// ahue yellow is at 120   (RYB rather than RGB)		if ($ahue >= 120)		{			return $ahue - 60;		}		return $ahue / 2;	}	/**	* hue to Alternate hue	*/	function h2ah($hue)	{		if (is_array($hue))		{			$hue[0] = colour_manager::h2ah($hue[0]);			return $hue;		}		colour_manager::normalize_hue($hue);		// blue through red is already ok		if ($hue >= 240)		{			return $hue;		}		else if ($hue <= 60)		{			return $hue * 2;		}		else if ($hue <= 120)		{			return $hue + 60;		}		else		{			return ($hue + 240) / 2;		}	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_forums{	var $u_action;	var $parent_id = 0;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_admin_path, $phpbb_root_path, $phpEx;		$user->add_lang('acp/forums');		$this->tpl_name = 'acp_forums';		$this->page_title = 'ACP_MANAGE_FORUMS';		$form_key = 'acp_forums';		add_form_key($form_key);		$action		= request_var('action', '');		$update		= (isset($_POST['update'])) ? true : false;		$forum_id	= request_var('f', 0);		$this->parent_id	= request_var('parent_id', 0);		$forum_data = $errors = array();		if ($update && !check_form_key($form_key))		{			$update = false;			$errors[] = $user->lang['FORM_INVALID'];		}		// Check additional permissions		switch ($action)		{			case 'progress_bar':				$start = request_var('start', 0);				$total = request_var('total', 0);				$this->display_progress_bar($start, $total);				exit;			break;			case 'delete':				if (!$auth->acl_get('a_forumdel'))				{					trigger_error($user->lang['NO_PERMISSION_FORUM_DELETE'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}			break;			case 'add':				if (!$auth->acl_get('a_forumadd'))				{					trigger_error($user->lang['NO_PERMISSION_FORUM_ADD'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}			break;		}		// Major routines		if ($update)		{			switch ($action)			{				case 'delete':					$action_subforums	= request_var('action_subforums', '');					$subforums_to_id	= request_var('subforums_to_id', 0);					$action_posts		= request_var('action_posts', '');					$posts_to_id		= request_var('posts_to_id', 0);					$errors = $this->delete_forum($forum_id, $action_posts, $action_subforums, $posts_to_id, $subforums_to_id);					if (sizeof($errors))					{						break;					}					$auth->acl_clear_prefetch();					$cache->destroy('sql', FORUMS_TABLE);					trigger_error($user->lang['FORUM_DELETED'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id));				break;				case 'edit':					$forum_data = array(						'forum_id'		=>	$forum_id					);				// No break here				case 'add':					$forum_data += array(						'parent_id'				=> request_var('forum_parent_id', $this->parent_id),						'forum_type'			=> request_var('forum_type', FORUM_POST),						'type_action'			=> request_var('type_action', ''),						'forum_status'			=> request_var('forum_status', ITEM_UNLOCKED),						'forum_parents'			=> '',						'forum_name'			=> utf8_normalize_nfc(request_var('forum_name', '', true)),						'forum_link'			=> request_var('forum_link', ''),						'forum_link_track'		=> request_var('forum_link_track', false),						'forum_desc'			=> utf8_normalize_nfc(request_var('forum_desc', '', true)),						'forum_desc_uid'		=> '',						'forum_desc_options'	=> 7,						'forum_desc_bitfield'	=> '',						'forum_rules'			=> utf8_normalize_nfc(request_var('forum_rules', '', true)),						'forum_rules_uid'		=> '',						'forum_rules_options'	=> 7,						'forum_rules_bitfield'	=> '',						'forum_rules_link'		=> request_var('forum_rules_link', ''),						'forum_image'			=> request_var('forum_image', ''),						'forum_style'			=> request_var('forum_style', 0),						'display_subforum_list'	=> request_var('display_subforum_list', false),						'display_on_index'		=> request_var('display_on_index', false),						'forum_topics_per_page'	=> request_var('topics_per_page', 0),						'enable_indexing'		=> request_var('enable_indexing', true),						'enable_icons'			=> request_var('enable_icons', false),						'enable_prune'			=> request_var('enable_prune', false),						'enable_post_review'	=> request_var('enable_post_review', true),						'enable_quick_reply'	=> request_var('enable_quick_reply', false),						'prune_days'			=> request_var('prune_days', 7),						'prune_viewed'			=> request_var('prune_viewed', 7),						'prune_freq'			=> request_var('prune_freq', 1),						'prune_old_polls'		=> request_var('prune_old_polls', false),						'prune_announce'		=> request_var('prune_announce', false),						'prune_sticky'			=> request_var('prune_sticky', false),						'forum_password'		=> request_var('forum_password', '', true),						'forum_password_confirm'=> request_var('forum_password_confirm', '', true),						'forum_password_unset'	=> request_var('forum_password_unset', false),					);					// On add, add empty forum_options... else do not consider it (not updating it)					if ($action == 'add')					{						$forum_data['forum_options'] = 0;					}					// Use link_display_on_index setting if forum type is link					if ($forum_data['forum_type'] == FORUM_LINK)					{						$forum_data['display_on_index'] = request_var('link_display_on_index', false);					}					// Linked forums and categories are not able to be locked...					if ($forum_data['forum_type'] == FORUM_LINK || $forum_data['forum_type'] == FORUM_CAT)					{						$forum_data['forum_status'] = ITEM_UNLOCKED;					}					$forum_data['show_active'] = ($forum_data['forum_type'] == FORUM_POST) ? request_var('display_recent', true) : request_var('display_active', false);					// Get data for forum rules if specified...					if ($forum_data['forum_rules'])					{						generate_text_for_storage($forum_data['forum_rules'], $forum_data['forum_rules_uid'], $forum_data['forum_rules_bitfield'], $forum_data['forum_rules_options'], request_var('rules_parse_bbcode', false), request_var('rules_parse_urls', false), request_var('rules_parse_smilies', false));					}					// Get data for forum description if specified					if ($forum_data['forum_desc'])					{						generate_text_for_storage($forum_data['forum_desc'], $forum_data['forum_desc_uid'], $forum_data['forum_desc_bitfield'], $forum_data['forum_desc_options'], request_var('desc_parse_bbcode', false), request_var('desc_parse_urls', false), request_var('desc_parse_smilies', false));					}					$errors = $this->update_forum_data($forum_data);					if (!sizeof($errors))					{						$forum_perm_from = request_var('forum_perm_from', 0);						$cache->destroy('sql', FORUMS_TABLE);						$copied_permissions = false;						// Copy permissions?						if ($forum_perm_from && $forum_perm_from != $forum_data['forum_id'] &&							($action != 'edit' || empty($forum_id) || ($auth->acl_get('a_fauth') && $auth->acl_get('a_authusers') && $auth->acl_get('a_authgroups') && $auth->acl_get('a_mauth'))))						{							copy_forum_permissions($forum_perm_from, $forum_data['forum_id'], ($action == 'edit') ? true : false);							cache_moderators();							$copied_permissions = true;						}/* Commented out because of questionable UI workflow - re-visit for 3.0.7						else if (!$this->parent_id && $action != 'edit' && $auth->acl_get('a_fauth') && $auth->acl_get('a_authusers') && $auth->acl_get('a_authgroups') && $auth->acl_get('a_mauth'))						{							$this->copy_permission_page($forum_data);							return;						}*/						$auth->acl_clear_prefetch();						$acl_url = '&amp;mode=setting_forum_local&amp;forum_id[]=' . $forum_data['forum_id'];						$message = ($action == 'add') ? $user->lang['FORUM_CREATED'] : $user->lang['FORUM_UPDATED'];						// redirect directly to permission settings screen if authed						if ($action == 'add' && !$copied_permissions && $auth->acl_get('a_fauth'))						{							$message .= '<br /><br />' . sprintf($user->lang['REDIRECT_ACL'], '<a href="' . append_sid("{$phpbb_admin_path}index.$phpEx", 'i=permissions' . $acl_url) . '">', '</a>');							meta_refresh(4, append_sid("{$phpbb_admin_path}index.$phpEx", 'i=permissions' . $acl_url));						}						trigger_error($message . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id));					}				break;			}		}		switch ($action)		{			case 'move_up':			case 'move_down':				if (!$forum_id)				{					trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . FORUMS_TABLE . "					WHERE forum_id = $forum_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				$move_forum_name = $this->move_forum_by($row, $action, 1);				if ($move_forum_name !== false)				{					add_log('admin', 'LOG_FORUM_' . strtoupper($action), $row['forum_name'], $move_forum_name);					$cache->destroy('sql', FORUMS_TABLE);				}			break;			case 'sync':				if (!$forum_id)				{					trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				@set_time_limit(0);				$sql = 'SELECT forum_name, forum_topics_real					FROM ' . FORUMS_TABLE . "					WHERE forum_id = $forum_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				if ($row['forum_topics_real'])				{					$sql = 'SELECT MIN(topic_id) as min_topic_id, MAX(topic_id) as max_topic_id						FROM ' . TOPICS_TABLE . '						WHERE forum_id = ' . $forum_id;					$result = $db->sql_query($sql);					$row2 = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					// Typecast to int if there is no data available					$row2['min_topic_id'] = (int) $row2['min_topic_id'];					$row2['max_topic_id'] = (int) $row2['max_topic_id'];					$start = request_var('start', $row2['min_topic_id']);					$batch_size = 2000;					$end = $start + $batch_size;					// Sync all topics in batch mode...					sync('topic_approved', 'range', 'topic_id BETWEEN ' . $start . ' AND ' . $end, true, false);					sync('topic', 'range', 'topic_id BETWEEN ' . $start . ' AND ' . $end, true, true);					if ($end < $row2['max_topic_id'])					{						// We really need to find a way of showing statistics... no progress here						$sql = 'SELECT COUNT(topic_id) as num_topics							FROM ' . TOPICS_TABLE . '							WHERE forum_id = ' . $forum_id . '								AND topic_id BETWEEN ' . $start . ' AND ' . $end;						$result = $db->sql_query($sql);						$topics_done = request_var('topics_done', 0) + (int) $db->sql_fetchfield('num_topics');						$db->sql_freeresult($result);						$start += $batch_size;						$url = $this->u_action . "&amp;parent_id={$this->parent_id}&amp;f=$forum_id&amp;action=sync&amp;start=$start&amp;topics_done=$topics_done&amp;total={$row['forum_topics_real']}";						meta_refresh(0, $url);						$template->assign_vars(array(							'U_PROGRESS_BAR'		=> $this->u_action . "&amp;action=progress_bar&amp;start=$topics_done&amp;total={$row['forum_topics_real']}",							'UA_PROGRESS_BAR'		=> addslashes($this->u_action . "&amp;action=progress_bar&amp;start=$topics_done&amp;total={$row['forum_topics_real']}"),							'S_CONTINUE_SYNC'		=> true,							'L_PROGRESS_EXPLAIN'	=> sprintf($user->lang['SYNC_IN_PROGRESS_EXPLAIN'], $topics_done, $row['forum_topics_real']))						);						return;					}				}				$url = $this->u_action . "&amp;parent_id={$this->parent_id}&amp;f=$forum_id&amp;action=sync_forum";				meta_refresh(0, $url);				$template->assign_vars(array(					'U_PROGRESS_BAR'		=> $this->u_action . '&amp;action=progress_bar',					'UA_PROGRESS_BAR'		=> addslashes($this->u_action . '&amp;action=progress_bar'),					'S_CONTINUE_SYNC'		=> true,					'L_PROGRESS_EXPLAIN'	=> sprintf($user->lang['SYNC_IN_PROGRESS_EXPLAIN'], 0, $row['forum_topics_real']))				);				return;			break;			case 'sync_forum':				$sql = 'SELECT forum_name, forum_type					FROM ' . FORUMS_TABLE . "					WHERE forum_id = $forum_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				sync('forum', 'forum_id', $forum_id, false, true);				add_log('admin', 'LOG_FORUM_SYNC', $row['forum_name']);				$cache->destroy('sql', FORUMS_TABLE);				$template->assign_var('L_FORUM_RESYNCED', sprintf($user->lang['FORUM_RESYNCED'], $row['forum_name']));			break;			case 'add':			case 'edit':				if ($update)				{					$forum_data['forum_flags'] = 0;					$forum_data['forum_flags'] += (request_var('forum_link_track', false)) ? FORUM_FLAG_LINK_TRACK : 0;					$forum_data['forum_flags'] += (request_var('prune_old_polls', false)) ? FORUM_FLAG_PRUNE_POLL : 0;					$forum_data['forum_flags'] += (request_var('prune_announce', false)) ? FORUM_FLAG_PRUNE_ANNOUNCE : 0;					$forum_data['forum_flags'] += (request_var('prune_sticky', false)) ? FORUM_FLAG_PRUNE_STICKY : 0;					$forum_data['forum_flags'] += ($forum_data['show_active']) ? FORUM_FLAG_ACTIVE_TOPICS : 0;					$forum_data['forum_flags'] += (request_var('enable_post_review', true)) ? FORUM_FLAG_POST_REVIEW : 0;					$forum_data['forum_flags'] += (request_var('enable_quick_reply', false)) ? FORUM_FLAG_QUICK_REPLY : 0;				}				// Show form to create/modify a forum				if ($action == 'edit')				{					$this->page_title = 'EDIT_FORUM';					$row = $this->get_forum_info($forum_id);					$old_forum_type = $row['forum_type'];					if (!$update)					{						$forum_data = $row;					}					else					{						$forum_data['left_id'] = $row['left_id'];						$forum_data['right_id'] = $row['right_id'];					}					// Make sure no direct child forums are able to be selected as parents.					$exclude_forums = array();					foreach (get_forum_branch($forum_id, 'children') as $row)					{						$exclude_forums[] = $row['forum_id'];					}					$parents_list = make_forum_select($forum_data['parent_id'], $exclude_forums, false, false, false);					$forum_data['forum_password_confirm'] = $forum_data['forum_password'];				}				else				{					$this->page_title = 'CREATE_FORUM';					$forum_id = $this->parent_id;					$parents_list = make_forum_select($this->parent_id, false, false, false, false);					// Fill forum data with default values					if (!$update)					{						$forum_data = array(							'parent_id'				=> $this->parent_id,							'forum_type'			=> FORUM_POST,							'forum_status'			=> ITEM_UNLOCKED,							'forum_name'			=> utf8_normalize_nfc(request_var('forum_name', '', true)),							'forum_link'			=> '',							'forum_link_track'		=> false,							'forum_desc'			=> '',							'forum_rules'			=> '',							'forum_rules_link'		=> '',							'forum_image'			=> '',							'forum_style'			=> 0,							'display_subforum_list'	=> true,							'display_on_index'		=> false,							'forum_topics_per_page'	=> 0,							'enable_indexing'		=> true,							'enable_icons'			=> false,							'enable_prune'			=> false,							'prune_days'			=> 7,							'prune_viewed'			=> 7,							'prune_freq'			=> 1,							'forum_flags'			=> FORUM_FLAG_POST_REVIEW + FORUM_FLAG_ACTIVE_TOPICS,							'forum_options'			=> 0,							'forum_password'		=> '',							'forum_password_confirm'=> '',						);					}				}				$forum_rules_data = array(					'text'			=> $forum_data['forum_rules'],					'allow_bbcode'	=> true,					'allow_smilies'	=> true,					'allow_urls'	=> true				);				$forum_desc_data = array(					'text'			=> $forum_data['forum_desc'],					'allow_bbcode'	=> true,					'allow_smilies'	=> true,					'allow_urls'	=> true				);				$forum_rules_preview = '';				// Parse rules if specified				if ($forum_data['forum_rules'])				{					if (!isset($forum_data['forum_rules_uid']))					{						// Before we are able to display the preview and plane text, we need to parse our request_var()'d value...						$forum_data['forum_rules_uid'] = '';						$forum_data['forum_rules_bitfield'] = '';						$forum_data['forum_rules_options'] = 0;						generate_text_for_storage($forum_data['forum_rules'], $forum_data['forum_rules_uid'], $forum_data['forum_rules_bitfield'], $forum_data['forum_rules_options'], request_var('rules_allow_bbcode', false), request_var('rules_allow_urls', false), request_var('rules_allow_smilies', false));					}					// Generate preview content					$forum_rules_preview = generate_text_for_display($forum_data['forum_rules'], $forum_data['forum_rules_uid'], $forum_data['forum_rules_bitfield'], $forum_data['forum_rules_options']);					// decode...					$forum_rules_data = generate_text_for_edit($forum_data['forum_rules'], $forum_data['forum_rules_uid'], $forum_data['forum_rules_options']);				}				// Parse desciption if specified				if ($forum_data['forum_desc'])				{					if (!isset($forum_data['forum_desc_uid']))					{						// Before we are able to display the preview and plane text, we need to parse our request_var()'d value...						$forum_data['forum_desc_uid'] = '';						$forum_data['forum_desc_bitfield'] = '';						$forum_data['forum_desc_options'] = 0;						generate_text_for_storage($forum_data['forum_desc'], $forum_data['forum_desc_uid'], $forum_data['forum_desc_bitfield'], $forum_data['forum_desc_options'], request_var('desc_allow_bbcode', false), request_var('desc_allow_urls', false), request_var('desc_allow_smilies', false));					}					// decode...					$forum_desc_data = generate_text_for_edit($forum_data['forum_desc'], $forum_data['forum_desc_uid'], $forum_data['forum_desc_options']);				}				$forum_type_options = '';				$forum_type_ary = array(FORUM_CAT => 'CAT', FORUM_POST => 'FORUM', FORUM_LINK => 'LINK');				foreach ($forum_type_ary as $value => $lang)				{					$forum_type_options .= '<option value="' . $value . '"' . (($value == $forum_data['forum_type']) ? ' selected="selected"' : '') . '>' . $user->lang['TYPE_' . $lang] . '</option>';				}				$styles_list = style_select($forum_data['forum_style'], true);				$statuslist = '<option value="' . ITEM_UNLOCKED . '"' . (($forum_data['forum_status'] == ITEM_UNLOCKED) ? ' selected="selected"' : '') . '>' . $user->lang['UNLOCKED'] . '</option><option value="' . ITEM_LOCKED . '"' . (($forum_data['forum_status'] == ITEM_LOCKED) ? ' selected="selected"' : '') . '>' . $user->lang['LOCKED'] . '</option>';				$sql = 'SELECT forum_id					FROM ' . FORUMS_TABLE . '					WHERE forum_type = ' . FORUM_POST . "						AND forum_id <> $forum_id";				$result = $db->sql_query_limit($sql, 1);				$postable_forum_exists = false;				if ($db->sql_fetchrow($result))				{					$postable_forum_exists = true;				}				$db->sql_freeresult($result);				// Subforum move options				if ($action == 'edit' && $forum_data['forum_type'] == FORUM_CAT)				{					$subforums_id = array();					$subforums = get_forum_branch($forum_id, 'children');					foreach ($subforums as $row)					{						$subforums_id[] = $row['forum_id'];					}					$forums_list = make_forum_select($forum_data['parent_id'], $subforums_id);					if ($postable_forum_exists)					{						$template->assign_vars(array(							'S_MOVE_FORUM_OPTIONS'		=> make_forum_select($forum_data['parent_id'], $subforums_id)) // , false, true, false???						);					}					$template->assign_vars(array(						'S_HAS_SUBFORUMS'		=> ($forum_data['right_id'] - $forum_data['left_id'] > 1) ? true : false,						'S_FORUMS_LIST'			=> $forums_list)					);				}				else if ($postable_forum_exists)				{					$template->assign_vars(array(						'S_MOVE_FORUM_OPTIONS'		=> make_forum_select($forum_data['parent_id'], $forum_id, false, true, false))					);				}				$s_show_display_on_index = false;				if ($forum_data['parent_id'] > 0)				{					// if this forum is a subforum put the "display on index" checkbox					if ($parent_info = $this->get_forum_info($forum_data['parent_id']))					{						if ($parent_info['parent_id'] > 0 || $parent_info['forum_type'] == FORUM_CAT)						{							$s_show_display_on_index = true;						}					}				}				if (strlen($forum_data['forum_password']) == 32)				{					$errors[] = $user->lang['FORUM_PASSWORD_OLD'];				}				$template->assign_vars(array(					'S_EDIT_FORUM'		=> true,					'S_ERROR'			=> (sizeof($errors)) ? true : false,					'S_PARENT_ID'		=> $this->parent_id,					'S_FORUM_PARENT_ID'	=> $forum_data['parent_id'],					'S_ADD_ACTION'		=> ($action == 'add') ? true : false,					'U_BACK'		=> $this->u_action . '&amp;parent_id=' . $this->parent_id,					'U_EDIT_ACTION'	=> $this->u_action . "&amp;parent_id={$this->parent_id}&amp;action=$action&amp;f=$forum_id",					'L_COPY_PERMISSIONS_EXPLAIN'	=> $user->lang['COPY_PERMISSIONS_' . strtoupper($action) . '_EXPLAIN'],					'L_TITLE'						=> $user->lang[$this->page_title],					'ERROR_MSG'						=> (sizeof($errors)) ? implode('<br />', $errors) : '',					'FORUM_NAME'				=> $forum_data['forum_name'],					'FORUM_DATA_LINK'			=> $forum_data['forum_link'],					'FORUM_IMAGE'				=> $forum_data['forum_image'],					'FORUM_IMAGE_SRC'			=> ($forum_data['forum_image']) ? $phpbb_root_path . $forum_data['forum_image'] : '',					'FORUM_POST'				=> FORUM_POST,					'FORUM_LINK'				=> FORUM_LINK,					'FORUM_CAT'					=> FORUM_CAT,					'PRUNE_FREQ'				=> $forum_data['prune_freq'],					'PRUNE_DAYS'				=> $forum_data['prune_days'],					'PRUNE_VIEWED'				=> $forum_data['prune_viewed'],					'TOPICS_PER_PAGE'			=> $forum_data['forum_topics_per_page'],					'FORUM_RULES_LINK'			=> $forum_data['forum_rules_link'],					'FORUM_RULES'				=> $forum_data['forum_rules'],					'FORUM_RULES_PREVIEW'		=> $forum_rules_preview,					'FORUM_RULES_PLAIN'			=> $forum_rules_data['text'],					'S_BBCODE_CHECKED'			=> ($forum_rules_data['allow_bbcode']) ? true : false,					'S_SMILIES_CHECKED'			=> ($forum_rules_data['allow_smilies']) ? true : false,					'S_URLS_CHECKED'			=> ($forum_rules_data['allow_urls']) ? true : false,					'S_FORUM_PASSWORD_SET'		=> (empty($forum_data['forum_password'])) ? false : true,					'FORUM_DESC'				=> $forum_desc_data['text'],					'S_DESC_BBCODE_CHECKED'		=> ($forum_desc_data['allow_bbcode']) ? true : false,					'S_DESC_SMILIES_CHECKED'	=> ($forum_desc_data['allow_smilies']) ? true : false,					'S_DESC_URLS_CHECKED'		=> ($forum_desc_data['allow_urls']) ? true : false,					'S_FORUM_TYPE_OPTIONS'		=> $forum_type_options,					'S_STATUS_OPTIONS'			=> $statuslist,					'S_PARENT_OPTIONS'			=> $parents_list,					'S_STYLES_OPTIONS'			=> $styles_list,					'S_FORUM_OPTIONS'			=> make_forum_select(($action == 'add') ? $forum_data['parent_id'] : false, ($action == 'edit') ? $forum_data['forum_id'] : false, false, false, false),					'S_SHOW_DISPLAY_ON_INDEX'	=> $s_show_display_on_index,					'S_FORUM_POST'				=> ($forum_data['forum_type'] == FORUM_POST) ? true : false,					'S_FORUM_ORIG_POST'			=> (isset($old_forum_type) && $old_forum_type == FORUM_POST) ? true : false,					'S_FORUM_ORIG_CAT'			=> (isset($old_forum_type) && $old_forum_type == FORUM_CAT) ? true : false,					'S_FORUM_ORIG_LINK'			=> (isset($old_forum_type) && $old_forum_type == FORUM_LINK) ? true : false,					'S_FORUM_LINK'				=> ($forum_data['forum_type'] == FORUM_LINK) ? true : false,					'S_FORUM_CAT'				=> ($forum_data['forum_type'] == FORUM_CAT) ? true : false,					'S_ENABLE_INDEXING'			=> ($forum_data['enable_indexing']) ? true : false,					'S_TOPIC_ICONS'				=> ($forum_data['enable_icons']) ? true : false,					'S_DISPLAY_SUBFORUM_LIST'	=> ($forum_data['display_subforum_list']) ? true : false,					'S_DISPLAY_ON_INDEX'		=> ($forum_data['display_on_index']) ? true : false,					'S_PRUNE_ENABLE'			=> ($forum_data['enable_prune']) ? true : false,					'S_FORUM_LINK_TRACK'		=> ($forum_data['forum_flags'] & FORUM_FLAG_LINK_TRACK) ? true : false,					'S_PRUNE_OLD_POLLS'			=> ($forum_data['forum_flags'] & FORUM_FLAG_PRUNE_POLL) ? true : false,					'S_PRUNE_ANNOUNCE'			=> ($forum_data['forum_flags'] & FORUM_FLAG_PRUNE_ANNOUNCE) ? true : false,					'S_PRUNE_STICKY'			=> ($forum_data['forum_flags'] & FORUM_FLAG_PRUNE_STICKY) ? true : false,					'S_DISPLAY_ACTIVE_TOPICS'	=> ($forum_data['forum_type'] == FORUM_POST) ? ($forum_data['forum_flags'] & FORUM_FLAG_ACTIVE_TOPICS) : true,					'S_ENABLE_ACTIVE_TOPICS'	=> ($forum_data['forum_type'] == FORUM_CAT) ? ($forum_data['forum_flags'] & FORUM_FLAG_ACTIVE_TOPICS) : false,					'S_ENABLE_POST_REVIEW'		=> ($forum_data['forum_flags'] & FORUM_FLAG_POST_REVIEW) ? true : false,					'S_ENABLE_QUICK_REPLY'		=> ($forum_data['forum_flags'] & FORUM_FLAG_QUICK_REPLY) ? true : false,					'S_CAN_COPY_PERMISSIONS'	=> ($action != 'edit' || empty($forum_id) || ($auth->acl_get('a_fauth') && $auth->acl_get('a_authusers') && $auth->acl_get('a_authgroups') && $auth->acl_get('a_mauth'))) ? true : false,				));				return;			break;			case 'delete':				if (!$forum_id)				{					trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				$forum_data = $this->get_forum_info($forum_id);				$subforums_id = array();				$subforums = get_forum_branch($forum_id, 'children');				foreach ($subforums as $row)				{					$subforums_id[] = $row['forum_id'];				}				$forums_list = make_forum_select($forum_data['parent_id'], $subforums_id);				$sql = 'SELECT forum_id					FROM ' . FORUMS_TABLE . '					WHERE forum_type = ' . FORUM_POST . "						AND forum_id <> $forum_id";				$result = $db->sql_query_limit($sql, 1);				if ($db->sql_fetchrow($result))				{					$template->assign_vars(array(						'S_MOVE_FORUM_OPTIONS'		=> make_forum_select($forum_data['parent_id'], $subforums_id, false, true)) // , false, true, false???					);				}				$db->sql_freeresult($result);				$parent_id = ($this->parent_id == $forum_id) ? 0 : $this->parent_id;				$template->assign_vars(array(					'S_DELETE_FORUM'		=> true,					'U_ACTION'				=> $this->u_action . "&amp;parent_id={$parent_id}&amp;action=delete&amp;f=$forum_id",					'U_BACK'				=> $this->u_action . '&amp;parent_id=' . $this->parent_id,					'FORUM_NAME'			=> $forum_data['forum_name'],					'S_FORUM_POST'			=> ($forum_data['forum_type'] == FORUM_POST) ? true : false,					'S_FORUM_LINK'			=> ($forum_data['forum_type'] == FORUM_LINK) ? true : false,					'S_HAS_SUBFORUMS'		=> ($forum_data['right_id'] - $forum_data['left_id'] > 1) ? true : false,					'S_FORUMS_LIST'			=> $forums_list,					'S_ERROR'				=> (sizeof($errors)) ? true : false,					'ERROR_MSG'				=> (sizeof($errors)) ? implode('<br />', $errors) : '')				);				return;			break;			case 'copy_perm':				$forum_perm_from = request_var('forum_perm_from', 0);				// Copy permissions?				if (!empty($forum_perm_from) && $forum_perm_from != $forum_id)				{					copy_forum_permissions($forum_perm_from, $forum_id, true);					cache_moderators();					$auth->acl_clear_prefetch();					$cache->destroy('sql', FORUMS_TABLE);					$acl_url = '&amp;mode=setting_forum_local&amp;forum_id[]=' . $forum_id;					$message = $user->lang['FORUM_UPDATED'];					// Redirect to permissions					if ($auth->acl_get('a_fauth'))					{						$message .= '<br /><br />' . sprintf($user->lang['REDIRECT_ACL'], '<a href="' . append_sid("{$phpbb_admin_path}index.$phpEx", 'i=permissions' . $acl_url) . '">', '</a>');					}					trigger_error($message . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id));				}			break;		}		// Default management page		if (!$this->parent_id)		{			$navigation = $user->lang['FORUM_INDEX'];		}		else		{			$navigation = '<a href="' . $this->u_action . '">' . $user->lang['FORUM_INDEX'] . '</a>';			$forums_nav = get_forum_branch($this->parent_id, 'parents', 'descending');			foreach ($forums_nav as $row)			{				if ($row['forum_id'] == $this->parent_id)				{					$navigation .= ' -&gt; ' . $row['forum_name'];				}				else				{					$navigation .= ' -&gt; <a href="' . $this->u_action . '&amp;parent_id=' . $row['forum_id'] . '">' . $row['forum_name'] . '</a>';				}			}		}		// Jumpbox		$forum_box = make_forum_select($this->parent_id, false, false, false, false); //make_forum_select($this->parent_id);		if ($action == 'sync' || $action == 'sync_forum')		{			$template->assign_var('S_RESYNCED', true);		}		$sql = 'SELECT *			FROM ' . FORUMS_TABLE . "			WHERE parent_id = $this->parent_id			ORDER BY left_id";		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			do			{				$forum_type = $row['forum_type'];				if ($row['forum_status'] == ITEM_LOCKED)				{					$folder_image = '<img src="images/icon_folder_lock.gif" alt="' . $user->lang['LOCKED'] . '" />';				}				else				{					switch ($forum_type)					{						case FORUM_LINK:							$folder_image = '<img src="images/icon_folder_link.gif" alt="' . $user->lang['LINK'] . '" />';						break;						default:							$folder_image = ($row['left_id'] + 1 != $row['right_id']) ? '<img src="images/icon_subfolder.gif" alt="' . $user->lang['SUBFORUM'] . '" />' : '<img src="images/icon_folder.gif" alt="' . $user->lang['FOLDER'] . '" />';						break;					}				}				$url = $this->u_action . "&amp;parent_id=$this->parent_id&amp;f={$row['forum_id']}";				$template->assign_block_vars('forums', array(					'FOLDER_IMAGE'		=> $folder_image,					'FORUM_IMAGE'		=> ($row['forum_image']) ? '<img src="' . $phpbb_root_path . $row['forum_image'] . '" alt="" />' : '',					'FORUM_IMAGE_SRC'	=> ($row['forum_image']) ? $phpbb_root_path . $row['forum_image'] : '',					'FORUM_NAME'		=> $row['forum_name'],					'FORUM_DESCRIPTION'	=> generate_text_for_display($row['forum_desc'], $row['forum_desc_uid'], $row['forum_desc_bitfield'], $row['forum_desc_options']),					'FORUM_TOPICS'		=> $row['forum_topics'],					'FORUM_POSTS'		=> $row['forum_posts'],					'S_FORUM_LINK'		=> ($forum_type == FORUM_LINK) ? true : false,					'S_FORUM_POST'		=> ($forum_type == FORUM_POST) ? true : false,					'U_FORUM'			=> $this->u_action . '&amp;parent_id=' . $row['forum_id'],					'U_MOVE_UP'			=> $url . '&amp;action=move_up',					'U_MOVE_DOWN'		=> $url . '&amp;action=move_down',					'U_EDIT'			=> $url . '&amp;action=edit',					'U_DELETE'			=> $url . '&amp;action=delete',					'U_SYNC'			=> $url . '&amp;action=sync')				);			}			while ($row = $db->sql_fetchrow($result));		}		else if ($this->parent_id)		{			$row = $this->get_forum_info($this->parent_id);			$url = $this->u_action . '&amp;parent_id=' . $this->parent_id . '&amp;f=' . $row['forum_id'];			$template->assign_vars(array(				'S_NO_FORUMS'		=> true,				'U_EDIT'			=> $url . '&amp;action=edit',				'U_DELETE'			=> $url . '&amp;action=delete',				'U_SYNC'			=> $url . '&amp;action=sync')			);		}		$db->sql_freeresult($result);		$template->assign_vars(array(			'ERROR_MSG'		=> (sizeof($errors)) ? implode('<br />', $errors) : '',			'NAVIGATION'	=> $navigation,			'FORUM_BOX'		=> $forum_box,			'U_SEL_ACTION'	=> $this->u_action,			'U_ACTION'		=> $this->u_action . '&amp;parent_id=' . $this->parent_id,			'U_PROGRESS_BAR'	=> $this->u_action . '&amp;action=progress_bar',			'UA_PROGRESS_BAR'	=> addslashes($this->u_action . '&amp;action=progress_bar'),		));	}	/**	* Get forum details	*/	function get_forum_info($forum_id)	{		global $db;		$sql = 'SELECT *			FROM ' . FORUMS_TABLE . "			WHERE forum_id = $forum_id";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$row)		{			trigger_error("Forum #$forum_id does not exist", E_USER_ERROR);		}		return $row;	}	/**	* Update forum data	*/	function update_forum_data(&$forum_data)	{		global $db, $user, $cache, $phpbb_root_path;		$errors = array();		if ($forum_data['forum_name'] == '')		{			$errors[] = $user->lang['FORUM_NAME_EMPTY'];		}		if (utf8_strlen($forum_data['forum_desc']) > 4000)		{			$errors[] = $user->lang['FORUM_DESC_TOO_LONG'];		}		if (utf8_strlen($forum_data['forum_rules']) > 4000)		{			$errors[] = $user->lang['FORUM_RULES_TOO_LONG'];		}		if ($forum_data['forum_password'] || $forum_data['forum_password_confirm'])		{			if ($forum_data['forum_password'] != $forum_data['forum_password_confirm'])			{				$forum_data['forum_password'] = $forum_data['forum_password_confirm'] = '';				$errors[] = $user->lang['FORUM_PASSWORD_MISMATCH'];			}		}		if ($forum_data['prune_days'] < 0 || $forum_data['prune_viewed'] < 0 || $forum_data['prune_freq'] < 0)		{			$forum_data['prune_days'] = $forum_data['prune_viewed'] = $forum_data['prune_freq'] = 0;			$errors[] = $user->lang['FORUM_DATA_NEGATIVE'];		}		$range_test_ary = array(			array('lang' => 'FORUM_TOPICS_PAGE', 'value' => $forum_data['forum_topics_per_page'], 'column_type' => 'TINT:0'),		);		if (!empty($forum_data['forum_image']) && !file_exists($phpbb_root_path . $forum_data['forum_image']))		{			$errors[] = $user->lang['FORUM_IMAGE_NO_EXIST'];		}		validate_range($range_test_ary, $errors);		// Set forum flags		// 1 = link tracking		// 2 = prune old polls		// 4 = prune announcements		// 8 = prune stickies		// 16 = show active topics		// 32 = enable post review		$forum_data['forum_flags'] = 0;		$forum_data['forum_flags'] += ($forum_data['forum_link_track']) ? FORUM_FLAG_LINK_TRACK : 0;		$forum_data['forum_flags'] += ($forum_data['prune_old_polls']) ? FORUM_FLAG_PRUNE_POLL : 0;		$forum_data['forum_flags'] += ($forum_data['prune_announce']) ? FORUM_FLAG_PRUNE_ANNOUNCE : 0;		$forum_data['forum_flags'] += ($forum_data['prune_sticky']) ? FORUM_FLAG_PRUNE_STICKY : 0;		$forum_data['forum_flags'] += ($forum_data['show_active']) ? FORUM_FLAG_ACTIVE_TOPICS : 0;		$forum_data['forum_flags'] += ($forum_data['enable_post_review']) ? FORUM_FLAG_POST_REVIEW : 0;		$forum_data['forum_flags'] += ($forum_data['enable_quick_reply']) ? FORUM_FLAG_QUICK_REPLY : 0;		// Unset data that are not database fields		$forum_data_sql = $forum_data;		unset($forum_data_sql['forum_link_track']);		unset($forum_data_sql['prune_old_polls']);		unset($forum_data_sql['prune_announce']);		unset($forum_data_sql['prune_sticky']);		unset($forum_data_sql['show_active']);		unset($forum_data_sql['enable_post_review']);		unset($forum_data_sql['enable_quick_reply']);		unset($forum_data_sql['forum_password_confirm']);		// What are we going to do tonight Brain? The same thing we do everynight,		// try to take over the world ... or decide whether to continue update		// and if so, whether it's a new forum/cat/link or an existing one		if (sizeof($errors))		{			return $errors;		}		// As we don't know the old password, it's kinda tricky to detect changes		if ($forum_data_sql['forum_password_unset'])		{			$forum_data_sql['forum_password'] = '';		}		else if (empty($forum_data_sql['forum_password']))		{			unset($forum_data_sql['forum_password']);		}		else		{			$forum_data_sql['forum_password'] = phpbb_hash($forum_data_sql['forum_password']);		}		unset($forum_data_sql['forum_password_unset']);		if (!isset($forum_data_sql['forum_id']))		{			// no forum_id means we're creating a new forum			unset($forum_data_sql['type_action']);			if ($forum_data_sql['parent_id'])			{				$sql = 'SELECT left_id, right_id, forum_type					FROM ' . FORUMS_TABLE . '					WHERE forum_id = ' . $forum_data_sql['parent_id'];				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['PARENT_NOT_EXIST'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				if ($row['forum_type'] == FORUM_LINK)				{					$errors[] = $user->lang['PARENT_IS_LINK_FORUM'];					return $errors;				}				$sql = 'UPDATE ' . FORUMS_TABLE . '					SET left_id = left_id + 2, right_id = right_id + 2					WHERE left_id > ' . $row['right_id'];				$db->sql_query($sql);				$sql = 'UPDATE ' . FORUMS_TABLE . '					SET right_id = right_id + 2					WHERE ' . $row['left_id'] . ' BETWEEN left_id AND right_id';				$db->sql_query($sql);				$forum_data_sql['left_id'] = $row['right_id'];				$forum_data_sql['right_id'] = $row['right_id'] + 1;			}			else			{				$sql = 'SELECT MAX(right_id) AS right_id					FROM ' . FORUMS_TABLE;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$forum_data_sql['left_id'] = $row['right_id'] + 1;				$forum_data_sql['right_id'] = $row['right_id'] + 2;			}			$sql = 'INSERT INTO ' . FORUMS_TABLE . ' ' . $db->sql_build_array('INSERT', $forum_data_sql);			$db->sql_query($sql);			$forum_data['forum_id'] = $db->sql_nextid();			add_log('admin', 'LOG_FORUM_ADD', $forum_data['forum_name']);		}		else		{			$row = $this->get_forum_info($forum_data_sql['forum_id']);			if ($row['forum_type'] == FORUM_POST && $row['forum_type'] != $forum_data_sql['forum_type'])			{				// Has subforums and want to change into a link?				if ($row['right_id'] - $row['left_id'] > 1 && $forum_data_sql['forum_type'] == FORUM_LINK)				{					$errors[] = $user->lang['FORUM_WITH_SUBFORUMS_NOT_TO_LINK'];					return $errors;				}				// we're turning a postable forum into a non-postable forum				if ($forum_data_sql['type_action'] == 'move')				{					$to_forum_id = request_var('to_forum_id', 0);					if ($to_forum_id)					{						$errors = $this->move_forum_content($forum_data_sql['forum_id'], $to_forum_id);					}					else					{						return array($user->lang['NO_DESTINATION_FORUM']);					}				}				else if ($forum_data_sql['type_action'] == 'delete')				{					$errors = $this->delete_forum_content($forum_data_sql['forum_id']);				}				else				{					return array($user->lang['NO_FORUM_ACTION']);				}				$forum_data_sql['forum_posts'] = $forum_data_sql['forum_topics'] = $forum_data_sql['forum_topics_real'] = $forum_data_sql['forum_last_post_id'] = $forum_data_sql['forum_last_poster_id'] = $forum_data_sql['forum_last_post_time'] = 0;				$forum_data_sql['forum_last_poster_name'] = $forum_data_sql['forum_last_poster_colour'] = '';			}			else if ($row['forum_type'] == FORUM_CAT && $forum_data_sql['forum_type'] == FORUM_LINK)			{				// Has subforums?				if ($row['right_id'] - $row['left_id'] > 1)				{					// We are turning a category into a link - but need to decide what to do with the subforums.					$action_subforums = request_var('action_subforums', '');					$subforums_to_id = request_var('subforums_to_id', 0);					if ($action_subforums == 'delete')					{						$rows = get_forum_branch($row['forum_id'], 'children', 'descending', false);						foreach ($rows as $_row)						{							// Do not remove the forum id we are about to change. ;)							if ($_row['forum_id'] == $row['forum_id'])							{								continue;							}							$forum_ids[] = $_row['forum_id'];							$errors = array_merge($errors, $this->delete_forum_content($_row['forum_id']));						}						if (sizeof($errors))						{							return $errors;						}						if (sizeof($forum_ids))						{							$sql = 'DELETE FROM ' . FORUMS_TABLE . '								WHERE ' . $db->sql_in_set('forum_id', $forum_ids);							$db->sql_query($sql);							$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . '								WHERE ' . $db->sql_in_set('forum_id', $forum_ids);							$db->sql_query($sql);							$sql = 'DELETE FROM ' . ACL_USERS_TABLE . '								WHERE ' . $db->sql_in_set('forum_id', $forum_ids);							$db->sql_query($sql);							// Delete forum ids from extension groups table							$sql = 'SELECT group_id, allowed_forums								FROM ' . EXTENSION_GROUPS_TABLE;							$result = $db->sql_query($sql);							while ($_row = $db->sql_fetchrow($result))							{								if (!$_row['allowed_forums'])								{									continue;								}								$allowed_forums = unserialize(trim($_row['allowed_forums']));								$allowed_forums = array_diff($allowed_forums, $forum_ids);								$sql = 'UPDATE ' . EXTENSION_GROUPS_TABLE . "									SET allowed_forums = '" . ((sizeof($allowed_forums)) ? serialize($allowed_forums) : '') . "'									WHERE group_id = {$_row['group_id']}";								$db->sql_query($sql);							}							$db->sql_freeresult($result);							$cache->destroy('_extensions');						}					}					else if ($action_subforums == 'move')					{						if (!$subforums_to_id)						{							return array($user->lang['NO_DESTINATION_FORUM']);						}						$sql = 'SELECT forum_name							FROM ' . FORUMS_TABLE . '							WHERE forum_id = ' . $subforums_to_id;						$result = $db->sql_query($sql);						$_row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$_row)						{							return array($user->lang['NO_FORUM']);						}						$subforums_to_name = $_row['forum_name'];						$sql = 'SELECT forum_id							FROM ' . FORUMS_TABLE . "							WHERE parent_id = {$row['forum_id']}";						$result = $db->sql_query($sql);						while ($_row = $db->sql_fetchrow($result))						{							$this->move_forum($_row['forum_id'], $subforums_to_id);						}						$db->sql_freeresult($result);						$sql = 'UPDATE ' . FORUMS_TABLE . "							SET parent_id = $subforums_to_id							WHERE parent_id = {$row['forum_id']}";						$db->sql_query($sql);					}					// Adjust the left/right id					$sql = 'UPDATE ' . FORUMS_TABLE . '						SET right_id = left_id + 1						WHERE forum_id = ' . $row['forum_id'];					$db->sql_query($sql);				}			}			else if ($row['forum_type'] == FORUM_CAT && $forum_data_sql['forum_type'] == FORUM_POST)			{				// Changing a category to a forum? Reset the data (you can't post directly in a cat, you must use a forum)				$forum_data_sql['forum_posts'] = 0;				$forum_data_sql['forum_topics'] = 0;				$forum_data_sql['forum_topics_real'] = 0;				$forum_data_sql['forum_last_post_id'] = 0;				$forum_data_sql['forum_last_post_subject'] = '';				$forum_data_sql['forum_last_post_time'] = 0;				$forum_data_sql['forum_last_poster_id'] = 0;				$forum_data_sql['forum_last_poster_name'] = '';				$forum_data_sql['forum_last_poster_colour'] = '';			}			if (sizeof($errors))			{				return $errors;			}			if ($row['parent_id'] != $forum_data_sql['parent_id'])			{				if ($row['forum_id'] != $forum_data_sql['parent_id'])				{					$errors = $this->move_forum($forum_data_sql['forum_id'], $forum_data_sql['parent_id']);				}				else				{					$forum_data_sql['parent_id'] = $row['parent_id'];				}			}			if (sizeof($errors))			{				return $errors;			}			unset($forum_data_sql['type_action']);			if ($row['forum_name'] != $forum_data_sql['forum_name'])			{				// the forum name has changed, clear the parents list of all forums (for safety)				$sql = 'UPDATE ' . FORUMS_TABLE . "					SET forum_parents = ''";				$db->sql_query($sql);			}			// Setting the forum id to the forum id is not really received well by some dbs. ;)			$forum_id = $forum_data_sql['forum_id'];			unset($forum_data_sql['forum_id']);			$sql = 'UPDATE ' . FORUMS_TABLE . '				SET ' . $db->sql_build_array('UPDATE', $forum_data_sql) . '				WHERE forum_id = ' . $forum_id;			$db->sql_query($sql);			// Add it back			$forum_data['forum_id'] = $forum_id;			add_log('admin', 'LOG_FORUM_EDIT', $forum_data['forum_name']);		}		return $errors;	}	/**	* Move forum	*/	function move_forum($from_id, $to_id)	{		global $db, $user;		$to_data = $moved_ids = $errors = array();		// Check if we want to move to a parent with link type		if ($to_id > 0)		{			$to_data = $this->get_forum_info($to_id);			if ($to_data['forum_type'] == FORUM_LINK)			{				$errors[] = $user->lang['PARENT_IS_LINK_FORUM'];				return $errors;			}		}		$moved_forums = get_forum_branch($from_id, 'children', 'descending');		$from_data = $moved_forums[0];		$diff = sizeof($moved_forums) * 2;		$moved_ids = array();		for ($i = 0; $i < sizeof($moved_forums); ++$i)		{			$moved_ids[] = $moved_forums[$i]['forum_id'];		}		// Resync parents		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET right_id = right_id - $diff, forum_parents = ''			WHERE left_id < " . $from_data['right_id'] . "				AND right_id > " . $from_data['right_id'];		$db->sql_query($sql);		// Resync righthand side of tree		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET left_id = left_id - $diff, right_id = right_id - $diff, forum_parents = ''			WHERE left_id > " . $from_data['right_id'];		$db->sql_query($sql);		if ($to_id > 0)		{			// Retrieve $to_data again, it may have been changed...			$to_data = $this->get_forum_info($to_id);			// Resync new parents			$sql = 'UPDATE ' . FORUMS_TABLE . "				SET right_id = right_id + $diff, forum_parents = ''				WHERE " . $to_data['right_id'] . ' BETWEEN left_id AND right_id					AND ' . $db->sql_in_set('forum_id', $moved_ids, true);			$db->sql_query($sql);			// Resync the righthand side of the tree			$sql = 'UPDATE ' . FORUMS_TABLE . "				SET left_id = left_id + $diff, right_id = right_id + $diff, forum_parents = ''				WHERE left_id > " . $to_data['right_id'] . '					AND ' . $db->sql_in_set('forum_id', $moved_ids, true);			$db->sql_query($sql);			// Resync moved branch			$to_data['right_id'] += $diff;			if ($to_data['right_id'] > $from_data['right_id'])			{				$diff = '+ ' . ($to_data['right_id'] - $from_data['right_id'] - 1);			}			else			{				$diff = '- ' . abs($to_data['right_id'] - $from_data['right_id'] - 1);			}		}		else		{			$sql = 'SELECT MAX(right_id) AS right_id				FROM ' . FORUMS_TABLE . '				WHERE ' . $db->sql_in_set('forum_id', $moved_ids, true);			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			$diff = '+ ' . ($row['right_id'] - $from_data['left_id'] + 1);		}		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET left_id = left_id $diff, right_id = right_id $diff, forum_parents = ''			WHERE " . $db->sql_in_set('forum_id', $moved_ids);		$db->sql_query($sql);		return $errors;	}	/**	* Move forum content from one to another forum	*/	function move_forum_content($from_id, $to_id, $sync = true)	{		global $db;		$table_ary = array(LOG_TABLE, POSTS_TABLE, TOPICS_TABLE, DRAFTS_TABLE, TOPICS_TRACK_TABLE);		foreach ($table_ary as $table)		{			$sql = "UPDATE $table				SET forum_id = $to_id				WHERE forum_id = $from_id";			$db->sql_query($sql);		}		unset($table_ary);		$table_ary = array(FORUMS_ACCESS_TABLE, FORUMS_TRACK_TABLE, FORUMS_WATCH_TABLE, MODERATOR_CACHE_TABLE);		foreach ($table_ary as $table)		{			$sql = "DELETE FROM $table				WHERE forum_id = $from_id";			$db->sql_query($sql);		}		if ($sync)		{			// Delete ghost topics that link back to the same forum then resync counters			sync('topic_moved');			sync('forum', 'forum_id', $to_id, false, true);		}		return array();	}	/**	* Remove complete forum	*/	function delete_forum($forum_id, $action_posts = 'delete', $action_subforums = 'delete', $posts_to_id = 0, $subforums_to_id = 0)	{		global $db, $user, $cache;		$forum_data = $this->get_forum_info($forum_id);		$errors = array();		$log_action_posts = $log_action_forums = $posts_to_name = $subforums_to_name = '';		$forum_ids = array($forum_id);		if ($action_posts == 'delete')		{			$log_action_posts = 'POSTS';			$errors = array_merge($errors, $this->delete_forum_content($forum_id));		}		else if ($action_posts == 'move')		{			if (!$posts_to_id)			{				$errors[] = $user->lang['NO_DESTINATION_FORUM'];			}			else			{				$log_action_posts = 'MOVE_POSTS';				$sql = 'SELECT forum_name					FROM ' . FORUMS_TABLE . '					WHERE forum_id = ' . $posts_to_id;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					$errors[] = $user->lang['NO_FORUM'];				}				else				{					$posts_to_name = $row['forum_name'];					$errors = array_merge($errors, $this->move_forum_content($forum_id, $posts_to_id));				}			}		}		if (sizeof($errors))		{			return $errors;		}		if ($action_subforums == 'delete')		{			$log_action_forums = 'FORUMS';			$rows = get_forum_branch($forum_id, 'children', 'descending', false);			foreach ($rows as $row)			{				$forum_ids[] = $row['forum_id'];				$errors = array_merge($errors, $this->delete_forum_content($row['forum_id']));			}			if (sizeof($errors))			{				return $errors;			}			$diff = sizeof($forum_ids) * 2;			$sql = 'DELETE FROM ' . FORUMS_TABLE . '				WHERE ' . $db->sql_in_set('forum_id', $forum_ids);			$db->sql_query($sql);			$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . '				WHERE ' . $db->sql_in_set('forum_id', $forum_ids);			$db->sql_query($sql);			$sql = 'DELETE FROM ' . ACL_USERS_TABLE . '				WHERE ' . $db->sql_in_set('forum_id', $forum_ids);			$db->sql_query($sql);		}		else if ($action_subforums == 'move')		{			if (!$subforums_to_id)			{				$errors[] = $user->lang['NO_DESTINATION_FORUM'];			}			else			{				$log_action_forums = 'MOVE_FORUMS';				$sql = 'SELECT forum_name					FROM ' . FORUMS_TABLE . '					WHERE forum_id = ' . $subforums_to_id;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					$errors[] = $user->lang['NO_FORUM'];				}				else				{					$subforums_to_name = $row['forum_name'];					$sql = 'SELECT forum_id						FROM ' . FORUMS_TABLE . "						WHERE parent_id = $forum_id";					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$this->move_forum($row['forum_id'], $subforums_to_id);					}					$db->sql_freeresult($result);					// Grab new forum data for correct tree updating later					$forum_data = $this->get_forum_info($forum_id);					$sql = 'UPDATE ' . FORUMS_TABLE . "						SET parent_id = $subforums_to_id						WHERE parent_id = $forum_id";					$db->sql_query($sql);					$diff = 2;					$sql = 'DELETE FROM ' . FORUMS_TABLE . "						WHERE forum_id = $forum_id";					$db->sql_query($sql);					$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . "						WHERE forum_id = $forum_id";					$db->sql_query($sql);					$sql = 'DELETE FROM ' . ACL_USERS_TABLE . "						WHERE forum_id = $forum_id";					$db->sql_query($sql);				}			}			if (sizeof($errors))			{				return $errors;			}		}		else		{			$diff = 2;			$sql = 'DELETE FROM ' . FORUMS_TABLE . "				WHERE forum_id = $forum_id";			$db->sql_query($sql);			$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . "				WHERE forum_id = $forum_id";			$db->sql_query($sql);			$sql = 'DELETE FROM ' . ACL_USERS_TABLE . "				WHERE forum_id = $forum_id";			$db->sql_query($sql);		}		// Resync tree		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET right_id = right_id - $diff			WHERE left_id < {$forum_data['right_id']} AND right_id > {$forum_data['right_id']}";		$db->sql_query($sql);		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET left_id = left_id - $diff, right_id = right_id - $diff			WHERE left_id > {$forum_data['right_id']}";		$db->sql_query($sql);		// Delete forum ids from extension groups table		$sql = 'SELECT group_id, allowed_forums			FROM ' . EXTENSION_GROUPS_TABLE;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if (!$row['allowed_forums'])			{				continue;			}			$allowed_forums = unserialize(trim($row['allowed_forums']));			$allowed_forums = array_diff($allowed_forums, $forum_ids);			$sql = 'UPDATE ' . EXTENSION_GROUPS_TABLE . "				SET allowed_forums = '" . ((sizeof($allowed_forums)) ? serialize($allowed_forums) : '') . "'				WHERE group_id = {$row['group_id']}";			$db->sql_query($sql);		}		$db->sql_freeresult($result);		$cache->destroy('_extensions');		$log_action = implode('_', array($log_action_posts, $log_action_forums));		switch ($log_action)		{			case 'MOVE_POSTS_MOVE_FORUMS':				add_log('admin', 'LOG_FORUM_DEL_MOVE_POSTS_MOVE_FORUMS', $posts_to_name, $subforums_to_name, $forum_data['forum_name']);			break;			case 'MOVE_POSTS_FORUMS':				add_log('admin', 'LOG_FORUM_DEL_MOVE_POSTS_FORUMS', $posts_to_name, $forum_data['forum_name']);			break;			case 'POSTS_MOVE_FORUMS':				add_log('admin', 'LOG_FORUM_DEL_POSTS_MOVE_FORUMS', $subforums_to_name, $forum_data['forum_name']);			break;			case '_MOVE_FORUMS':				add_log('admin', 'LOG_FORUM_DEL_MOVE_FORUMS', $subforums_to_name, $forum_data['forum_name']);			break;			case 'MOVE_POSTS_':				add_log('admin', 'LOG_FORUM_DEL_MOVE_POSTS', $posts_to_name, $forum_data['forum_name']);			break;			case 'POSTS_FORUMS':				add_log('admin', 'LOG_FORUM_DEL_POSTS_FORUMS', $forum_data['forum_name']);			break;			case '_FORUMS':				add_log('admin', 'LOG_FORUM_DEL_FORUMS', $forum_data['forum_name']);			break;			case 'POSTS_':				add_log('admin', 'LOG_FORUM_DEL_POSTS', $forum_data['forum_name']);			break;			default:				add_log('admin', 'LOG_FORUM_DEL_FORUM', $forum_data['forum_name']);			break;		}		return $errors;	}	/**	* Delete forum content	*/	function delete_forum_content($forum_id)	{		global $db, $config, $phpbb_root_path, $phpEx;		include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);		$db->sql_transaction('begin');		// Select then delete all attachments		$sql = 'SELECT a.topic_id			FROM ' . POSTS_TABLE . ' p, ' . ATTACHMENTS_TABLE . " a			WHERE p.forum_id = $forum_id				AND a.in_message = 0				AND a.topic_id = p.topic_id";		$result = $db->sql_query($sql);		$topic_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$topic_ids[] = $row['topic_id'];		}		$db->sql_freeresult($result);		delete_attachments('topic', $topic_ids, false);		// Delete shadow topics pointing to topics in this forum		delete_topic_shadows($forum_id);		// Before we remove anything we make sure we are able to adjust the post counts later. ;)		$sql = 'SELECT poster_id			FROM ' . POSTS_TABLE . '			WHERE forum_id = ' . $forum_id . '				AND post_postcount = 1				AND post_approved = 1';		$result = $db->sql_query($sql);		$post_counts = array();		while ($row = $db->sql_fetchrow($result))		{			$post_counts[$row['poster_id']] = (!empty($post_counts[$row['poster_id']])) ? $post_counts[$row['poster_id']] + 1 : 1;		}		$db->sql_freeresult($result);		switch ($db->sql_layer)		{			case 'mysql4':			case 'mysqli':				// Delete everything else and thank MySQL for offering multi-table deletion				$tables_ary = array(					SEARCH_WORDMATCH_TABLE	=> 'post_id',					REPORTS_TABLE			=> 'post_id',					WARNINGS_TABLE			=> 'post_id',					BOOKMARKS_TABLE			=> 'topic_id',					TOPICS_WATCH_TABLE		=> 'topic_id',					TOPICS_POSTED_TABLE		=> 'topic_id',					POLL_OPTIONS_TABLE		=> 'topic_id',					POLL_VOTES_TABLE		=> 'topic_id',				);				$sql = 'DELETE ' . POSTS_TABLE;				$sql_using = "\nFROM " . POSTS_TABLE;				$sql_where = "\nWHERE " . POSTS_TABLE . ".forum_id = $forum_id\n";				foreach ($tables_ary as $table => $field)				{					$sql .= ", $table ";					$sql_using .= ", $table ";					$sql_where .= "\nAND $table.$field = " . POSTS_TABLE . ".$field";				}				$db->sql_query($sql . $sql_using . $sql_where);			break;			default:				// Delete everything else and curse your DB for not offering multi-table deletion				$tables_ary = array(					'post_id'	=>	array(						SEARCH_WORDMATCH_TABLE,						REPORTS_TABLE,						WARNINGS_TABLE,					),					'topic_id'	=>	array(						BOOKMARKS_TABLE,						TOPICS_WATCH_TABLE,						TOPICS_POSTED_TABLE,						POLL_OPTIONS_TABLE,						POLL_VOTES_TABLE,					)				);				// Amount of rows we select and delete in one iteration.				$batch_size = 500;				foreach ($tables_ary as $field => $tables)				{					$start = 0;					do					{						$sql = "SELECT $field							FROM " . POSTS_TABLE . '							WHERE forum_id = ' . $forum_id;						$result = $db->sql_query_limit($sql, $batch_size, $start);						$ids = array();						while ($row = $db->sql_fetchrow($result))						{							$ids[] = $row[$field];						}						$db->sql_freeresult($result);						if (sizeof($ids))						{							$start += sizeof($ids);							foreach ($tables as $table)							{								$db->sql_query("DELETE FROM $table WHERE " . $db->sql_in_set($field, $ids));							}						}					}					while (sizeof($ids) == $batch_size);				}				unset($ids);			break;		}		$table_ary = array(FORUMS_ACCESS_TABLE, FORUMS_TRACK_TABLE, FORUMS_WATCH_TABLE, LOG_TABLE, MODERATOR_CACHE_TABLE, POSTS_TABLE, TOPICS_TABLE, TOPICS_TRACK_TABLE);		foreach ($table_ary as $table)		{			$db->sql_query("DELETE FROM $table WHERE forum_id = $forum_id");		}		// Set forum ids to 0		$table_ary = array(DRAFTS_TABLE);		foreach ($table_ary as $table)		{			$db->sql_query("UPDATE $table SET forum_id = 0 WHERE forum_id = $forum_id");		}		// Adjust users post counts		if (sizeof($post_counts))		{			foreach ($post_counts as $poster_id => $substract)			{				$sql = 'UPDATE ' . USERS_TABLE . '					SET user_posts = 0					WHERE user_id = ' . $poster_id . '					AND user_posts < ' . $substract;				$db->sql_query($sql);				$sql = 'UPDATE ' . USERS_TABLE . '					SET user_posts = user_posts - ' . $substract . '					WHERE user_id = ' . $poster_id . '					AND user_posts >= ' . $substract;				$db->sql_query($sql);			}		}		$db->sql_transaction('commit');		// Make sure the overall post/topic count is correct...		$sql = 'SELECT COUNT(post_id) AS stat			FROM ' . POSTS_TABLE . '			WHERE post_approved = 1';		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		set_config('num_posts', (int) $row['stat'], true);		$sql = 'SELECT COUNT(topic_id) AS stat			FROM ' . TOPICS_TABLE . '			WHERE topic_approved = 1';		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		set_config('num_topics', (int) $row['stat'], true);		$sql = 'SELECT COUNT(attach_id) as stat			FROM ' . ATTACHMENTS_TABLE;		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		set_config('num_files', (int) $row['stat'], true);		$sql = 'SELECT SUM(filesize) as stat			FROM ' . ATTACHMENTS_TABLE;		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		set_config('upload_dir_size', (float) $row['stat'], true);		return array();	}	/**	* Move forum position by $steps up/down	*/	function move_forum_by($forum_row, $action = 'move_up', $steps = 1)	{		global $db;		/**		* Fetch all the siblings between the module's current spot		* and where we want to move it to. If there are less than $steps		* siblings between the current spot and the target then the		* module will move as far as possible		*/		$sql = 'SELECT forum_id, forum_name, left_id, right_id			FROM ' . FORUMS_TABLE . "			WHERE parent_id = {$forum_row['parent_id']}				AND " . (($action == 'move_up') ? "right_id < {$forum_row['right_id']} ORDER BY right_id DESC" : "left_id > {$forum_row['left_id']} ORDER BY left_id ASC");		$result = $db->sql_query_limit($sql, $steps);		$target = array();		while ($row = $db->sql_fetchrow($result))		{			$target = $row;		}		$db->sql_freeresult($result);		if (!sizeof($target))		{			// The forum is already on top or bottom			return false;		}		/**		* $left_id and $right_id define the scope of the nodes that are affected by the move.		* $diff_up and $diff_down are the values to substract or add to each node's left_id		* and right_id in order to move them up or down.		* $move_up_left and $move_up_right define the scope of the nodes that are moving		* up. Other nodes in the scope of ($left_id, $right_id) are considered to move down.		*/		if ($action == 'move_up')		{			$left_id = $target['left_id'];			$right_id = $forum_row['right_id'];			$diff_up = $forum_row['left_id'] - $target['left_id'];			$diff_down = $forum_row['right_id'] + 1 - $forum_row['left_id'];			$move_up_left = $forum_row['left_id'];			$move_up_right = $forum_row['right_id'];		}		else		{			$left_id = $forum_row['left_id'];			$right_id = $target['right_id'];			$diff_up = $forum_row['right_id'] + 1 - $forum_row['left_id'];			$diff_down = $target['right_id'] - $forum_row['right_id'];			$move_up_left = $forum_row['right_id'] + 1;			$move_up_right = $target['right_id'];		}		// Now do the dirty job		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET left_id = left_id + CASE				WHEN left_id BETWEEN {$move_up_left} AND {$move_up_right} THEN -{$diff_up}				ELSE {$diff_down}			END,			right_id = right_id + CASE				WHEN right_id BETWEEN {$move_up_left} AND {$move_up_right} THEN -{$diff_up}				ELSE {$diff_down}			END,			forum_parents = ''			WHERE				left_id BETWEEN {$left_id} AND {$right_id}				AND right_id BETWEEN {$left_id} AND {$right_id}";		$db->sql_query($sql);		return $target['forum_name'];	}	/**	* Display progress bar for syncinc forums	*/	function display_progress_bar($start, $total)	{		global $template, $user;		adm_page_header($user->lang['SYNC_IN_PROGRESS']);		$template->set_filenames(array(			'body'	=> 'progress_bar.html')		);		$template->assign_vars(array(			'L_PROGRESS'			=> $user->lang['SYNC_IN_PROGRESS'],			'L_PROGRESS_EXPLAIN'	=> ($start && $total) ? sprintf($user->lang['SYNC_IN_PROGRESS_EXPLAIN'], $start, $total) : $user->lang['SYNC_IN_PROGRESS'])		);		adm_page_footer();	}	/**	* Display copy permission page	* Not used at the moment - we will have a look at it for 3.0.7	*/	function copy_permission_page($forum_data)	{		global $phpEx, $phpbb_admin_path, $template, $user;		$acl_url = '&amp;mode=setting_forum_local&amp;forum_id[]=' . $forum_data['forum_id'];		$action = append_sid($this->u_action . "&amp;parent_id={$this->parent_id}&amp;f={$forum_data['forum_id']}&amp;action=copy_perm");		$l_acl = sprintf($user->lang['COPY_TO_ACL'], '<a href="' . append_sid("{$phpbb_admin_path}index.$phpEx", 'i=permissions' . $acl_url) . '">', '</a>');		$this->tpl_name = 'acp_forums_copy_perm';		$template->assign_vars(array(			'U_ACL'				=> append_sid("{$phpbb_admin_path}index.$phpEx", 'i=permissions' . $acl_url),			'L_ACL_LINK'		=> $l_acl,			'L_BACK_LINK'		=> adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id),			'S_COPY_ACTION'		=> $action,			'S_FORUM_OPTIONS'	=> make_forum_select($forum_data['parent_id'], $forum_data['forum_id'], false, false, false),		));	}}?>
<?php return array(''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'10',''=>'20',''=>'30',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'21',''=>'22',''=>'23',''=>'24',''=>'25',''=>'26',''=>'27',''=>'28',''=>'29',''=>'30',''=>'31',''=>'32',''=>'33',''=>'34',''=>'35',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'36',''=>'37',''=>'38',''=>'39',''=>'40',''=>'41',''=>'42',''=>'43',''=>'44',''=>'45',''=>'46',''=>'47',''=>'48',''=>'49',''=>'50',''=>'');
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);include($phpbb_root_path . 'includes/functions_posting.' . $phpEx);include($phpbb_root_path . 'includes/functions_display.' . $phpEx);include($phpbb_root_path . 'includes/message_parser.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);// Grab only parameters needed here$post_id	= request_var('p', 0);$topic_id	= request_var('t', 0);$forum_id	= request_var('f', 0);$draft_id	= request_var('d', 0);$lastclick	= request_var('lastclick', 0);$submit		= (isset($_POST['post'])) ? true : false;$preview	= (isset($_POST['preview'])) ? true : false;$save		= (isset($_POST['save'])) ? true : false;$load		= (isset($_POST['load'])) ? true : false;$delete		= (isset($_POST['delete'])) ? true : false;$cancel		= (isset($_POST['cancel']) && !isset($_POST['save'])) ? true : false;$refresh	= (isset($_POST['add_file']) || isset($_POST['delete_file']) || isset($_POST['full_editor']) || isset($_POST['cancel_unglobalise']) || $save || $load) ? true : false;$mode		= ($delete && !$preview && !$refresh && $submit) ? 'delete' : request_var('mode', '');$error = $post_data = array();$current_time = time();// Was cancel pressed? If so then redirect to the appropriate pageif ($cancel || ($current_time - $lastclick < 2 && $submit)){	$f = ($forum_id) ? 'f=' . $forum_id . '&amp;' : '';	$redirect = ($post_id) ? append_sid("{$phpbb_root_path}viewtopic.$phpEx", $f . 'p=' . $post_id) . '#p' . $post_id : (($topic_id) ? append_sid("{$phpbb_root_path}viewtopic.$phpEx", $f . 't=' . $topic_id) : (($forum_id) ? append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id) : append_sid("{$phpbb_root_path}index.$phpEx")));	redirect($redirect);}if (in_array($mode, array('post', 'reply', 'quote', 'edit', 'delete')) && !$forum_id){	trigger_error('NO_FORUM');}// We need to know some basic information in all cases before we do anything.switch ($mode){	case 'post':		$sql = 'SELECT *			FROM ' . FORUMS_TABLE . "			WHERE forum_id = $forum_id";	break;	case 'bump':	case 'reply':		if (!$topic_id)		{			trigger_error('NO_TOPIC');		}		// Force forum id		$sql = 'SELECT forum_id			FROM ' . TOPICS_TABLE . '			WHERE topic_id = ' . $topic_id;		$result = $db->sql_query($sql);		$f_id = (int) $db->sql_fetchfield('forum_id');		$db->sql_freeresult($result);		$forum_id = (!$f_id) ? $forum_id : $f_id;		$sql = 'SELECT f.*, t.*			FROM ' . TOPICS_TABLE . ' t, ' . FORUMS_TABLE . " f			WHERE t.topic_id = $topic_id				AND (f.forum_id = t.forum_id					OR f.forum_id = $forum_id)" .			(($auth->acl_get('m_approve', $forum_id)) ? '' : 'AND t.topic_approved = 1');	break;	case 'quote':	case 'edit':	case 'delete':		if (!$post_id)		{			$user->setup('posting');			trigger_error('NO_POST');		}		// Force forum id		$sql = 'SELECT forum_id			FROM ' . POSTS_TABLE . '			WHERE post_id = ' . $post_id;		$result = $db->sql_query($sql);		$f_id = (int) $db->sql_fetchfield('forum_id');		$db->sql_freeresult($result);		$forum_id = (!$f_id) ? $forum_id : $f_id;		$sql = 'SELECT f.*, t.*, p.*, u.username, u.username_clean, u.user_sig, u.user_sig_bbcode_uid, u.user_sig_bbcode_bitfield			FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . ' t, ' . FORUMS_TABLE . ' f, ' . USERS_TABLE . " u			WHERE p.post_id = $post_id				AND t.topic_id = p.topic_id				AND u.user_id = p.poster_id				AND (f.forum_id = t.forum_id					OR f.forum_id = $forum_id)" .				(($auth->acl_get('m_approve', $forum_id)) ? '' : 'AND p.post_approved = 1');	break;	case 'smilies':		$sql = '';		generate_smilies('window', $forum_id);	break;	case 'popup':		if ($forum_id)		{			$sql = 'SELECT forum_style				FROM ' . FORUMS_TABLE . '				WHERE forum_id = ' . $forum_id;		}		else		{			upload_popup();			return;		}	break;	default:		$sql = '';	break;}if (!$sql){	$user->setup('posting');	trigger_error('NO_POST_MODE');}$result = $db->sql_query($sql);$post_data = $db->sql_fetchrow($result);$db->sql_freeresult($result);if (!$post_data){	if (!($mode == 'post' || $mode == 'bump' || $mode == 'reply'))	{		$user->setup('posting');	}	trigger_error(($mode == 'post' || $mode == 'bump' || $mode == 'reply') ? 'NO_TOPIC' : 'NO_POST');}// Not able to reply to unapproved posts/topics// TODO: add more descriptive language keyif ($auth->acl_get('m_approve', $forum_id) && ((($mode == 'reply' || $mode == 'bump') && !$post_data['topic_approved']) || ($mode == 'quote' && !$post_data['post_approved']))){	trigger_error(($mode == 'reply' || $mode == 'bump') ? 'TOPIC_UNAPPROVED' : 'POST_UNAPPROVED');}if ($mode == 'popup'){	upload_popup($post_data['forum_style']);	return;}$user->setup(array('posting', 'mcp', 'viewtopic'), $post_data['forum_style']);if ($config['enable_post_confirm'] && !$user->data['is_registered']){	include($phpbb_root_path . 'includes/captcha/captcha_factory.' . $phpEx);	$captcha =& phpbb_captcha_factory::get_instance($config['captcha_plugin']);	$captcha->init(CONFIRM_POST);}// Use post_row values in favor of submitted ones...$forum_id	= (!empty($post_data['forum_id'])) ? (int) $post_data['forum_id'] : (int) $forum_id;$topic_id	= (!empty($post_data['topic_id'])) ? (int) $post_data['topic_id'] : (int) $topic_id;$post_id	= (!empty($post_data['post_id'])) ? (int) $post_data['post_id'] : (int) $post_id;// Need to login to passworded forum first?if ($post_data['forum_password']){	login_forum_box(array(		'forum_id'			=> $forum_id,		'forum_password'	=> $post_data['forum_password'])	);}// Check permissionsif ($user->data['is_bot']){	redirect(append_sid("{$phpbb_root_path}index.$phpEx"));}// Is the user able to read within this forum?if (!$auth->acl_get('f_read', $forum_id)){	if ($user->data['user_id'] != ANONYMOUS)	{		trigger_error('USER_CANNOT_READ');	}	login_box('', $user->lang['LOGIN_EXPLAIN_POST']);}// Permission to do the action asked?$is_authed = false;switch ($mode){	case 'post':		if ($auth->acl_get('f_post', $forum_id))		{			$is_authed = true;		}	break;	case 'bump':		if ($auth->acl_get('f_bump', $forum_id))		{			$is_authed = true;		}	break;	case 'quote':		$post_data['post_edit_locked'] = 0;	// no break;	case 'reply':		if ($auth->acl_get('f_reply', $forum_id))		{			$is_authed = true;		}	break;	case 'edit':		if ($user->data['is_registered'] && $auth->acl_gets('f_edit', 'm_edit', $forum_id))		{			$is_authed = true;		}	break;	case 'delete':		if ($user->data['is_registered'] && $auth->acl_gets('f_delete', 'm_delete', $forum_id))		{			$is_authed = true;		}	break;}if (!$is_authed){	$check_auth = ($mode == 'quote') ? 'reply' : $mode;	if ($user->data['is_registered'])	{		trigger_error('USER_CANNOT_' . strtoupper($check_auth));	}	login_box('', $user->lang['LOGIN_EXPLAIN_' . strtoupper($mode)]);}// Is the user able to post within this forum?if ($post_data['forum_type'] != FORUM_POST && in_array($mode, array('post', 'bump', 'quote', 'reply'))){	trigger_error('USER_CANNOT_FORUM_POST');}// Forum/Topic locked?if (($post_data['forum_status'] == ITEM_LOCKED || (isset($post_data['topic_status']) && $post_data['topic_status'] == ITEM_LOCKED)) && !$auth->acl_get('m_edit', $forum_id)){	trigger_error(($post_data['forum_status'] == ITEM_LOCKED) ? 'FORUM_LOCKED' : 'TOPIC_LOCKED');}// Can we edit this post ... if we're a moderator with rights then always yes// else it depends on editing times, lock status and if we're the correct userif ($mode == 'edit' && !$auth->acl_get('m_edit', $forum_id)){	if ($user->data['user_id'] != $post_data['poster_id'])	{		trigger_error('USER_CANNOT_EDIT');	}	if (!($post_data['post_time'] > time() - ($config['edit_time'] * 60) || !$config['edit_time']))	{		trigger_error('CANNOT_EDIT_TIME');	}	if ($post_data['post_edit_locked'])	{		trigger_error('CANNOT_EDIT_POST_LOCKED');	}}// Handle delete mode...if ($mode == 'delete'){	handle_post_delete($forum_id, $topic_id, $post_id, $post_data);	return;}// Handle bump mode...if ($mode == 'bump'){	if ($bump_time = bump_topic_allowed($forum_id, $post_data['topic_bumped'], $post_data['topic_last_post_time'], $post_data['topic_poster'], $post_data['topic_last_poster_id'])	   && check_link_hash(request_var('hash', ''), "topic_{$post_data['topic_id']}"))	{		$meta_url = phpbb_bump_topic($forum_id, $topic_id, $post_data, $current_time);		meta_refresh(3, $meta_url);		$message = $user->lang['TOPIC_BUMPED'] . '<br /><br />' . sprintf($user->lang['VIEW_MESSAGE'], '<a href="' . $meta_url . '">', '</a>');		$message .= '<br /><br />' . sprintf($user->lang['RETURN_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id) . '">', '</a>');		trigger_error($message);	}	trigger_error('BUMP_ERROR');}// Subject length limiting to 60 characters if first post...if ($mode == 'post' || ($mode == 'edit' && $post_data['topic_first_post_id'] == $post_data['post_id'])){	$template->assign_var('S_NEW_MESSAGE', true);}// Determine some varsif (isset($post_data['poster_id']) && $post_data['poster_id'] == ANONYMOUS){	$post_data['quote_username'] = (!empty($post_data['post_username'])) ? $post_data['post_username'] : $user->lang['GUEST'];}else{	$post_data['quote_username'] = isset($post_data['username']) ? $post_data['username'] : '';}$post_data['post_edit_locked']	= (isset($post_data['post_edit_locked'])) ? (int) $post_data['post_edit_locked'] : 0;$post_data['post_subject_md5']	= (isset($post_data['post_subject']) && $mode == 'edit') ? md5($post_data['post_subject']) : '';$post_data['post_subject']		= (in_array($mode, array('quote', 'edit'))) ? $post_data['post_subject'] : ((isset($post_data['topic_title'])) ? $post_data['topic_title'] : '');$post_data['topic_time_limit']	= (isset($post_data['topic_time_limit'])) ? (($post_data['topic_time_limit']) ? (int) $post_data['topic_time_limit'] / 86400 : (int) $post_data['topic_time_limit']) : 0;$post_data['poll_length']		= (!empty($post_data['poll_length'])) ? (int) $post_data['poll_length'] / 86400 : 0;$post_data['poll_start']		= (!empty($post_data['poll_start'])) ? (int) $post_data['poll_start'] : 0;$post_data['icon_id']			= (!isset($post_data['icon_id']) || in_array($mode, array('quote', 'reply'))) ? 0 : (int) $post_data['icon_id'];$post_data['poll_options']		= array();// Get Poll Dataif ($post_data['poll_start']){	$sql = 'SELECT poll_option_text		FROM ' . POLL_OPTIONS_TABLE . "		WHERE topic_id = $topic_id		ORDER BY poll_option_id";	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$post_data['poll_options'][] = trim($row['poll_option_text']);	}	$db->sql_freeresult($result);}if ($mode == 'edit'){	$original_poll_data = array(		'poll_title'		=> $post_data['poll_title'],		'poll_length'		=> $post_data['poll_length'],		'poll_max_options'	=> $post_data['poll_max_options'],		'poll_option_text'	=> implode("\n", $post_data['poll_options']),		'poll_start'		=> $post_data['poll_start'],		'poll_last_vote'	=> $post_data['poll_last_vote'],		'poll_vote_change'	=> $post_data['poll_vote_change'],	);}$orig_poll_options_size = sizeof($post_data['poll_options']);$message_parser = new parse_message();if (isset($post_data['post_text'])){	$message_parser->message = &$post_data['post_text'];	unset($post_data['post_text']);}// Set some default variables$uninit = array('post_attachment' => 0, 'poster_id' => $user->data['user_id'], 'enable_magic_url' => 0, 'topic_status' => 0, 'topic_type' => POST_NORMAL, 'post_subject' => '', 'topic_title' => '', 'post_time' => 0, 'post_edit_reason' => '', 'notify_set' => 0);foreach ($uninit as $var_name => $default_value){	if (!isset($post_data[$var_name]))	{		$post_data[$var_name] = $default_value;	}}unset($uninit);// Always check if the submitted attachment data is valid and belongs to the user.// Further down (especially in submit_post()) we do not check this again.$message_parser->get_submitted_attachment_data($post_data['poster_id']);if ($post_data['post_attachment'] && !$submit && !$refresh && !$preview && $mode == 'edit'){	// Do not change to SELECT *	$sql = 'SELECT attach_id, is_orphan, attach_comment, real_filename		FROM ' . ATTACHMENTS_TABLE . "		WHERE post_msg_id = $post_id			AND in_message = 0			AND is_orphan = 0		ORDER BY filetime DESC";	$result = $db->sql_query($sql);	$message_parser->attachment_data = array_merge($message_parser->attachment_data, $db->sql_fetchrowset($result));	$db->sql_freeresult($result);}if ($post_data['poster_id'] == ANONYMOUS){	$post_data['username'] = ($mode == 'quote' || $mode == 'edit') ? trim($post_data['post_username']) : '';}else{	$post_data['username'] = ($mode == 'quote' || $mode == 'edit') ? trim($post_data['username']) : '';}$post_data['enable_urls'] = $post_data['enable_magic_url'];if ($mode != 'edit'){	$post_data['enable_sig']		= ($config['allow_sig'] && $user->optionget('attachsig')) ? true: false;	$post_data['enable_smilies']	= ($config['allow_smilies'] && $user->optionget('smilies')) ? true : false;	$post_data['enable_bbcode']		= ($config['allow_bbcode'] && $user->optionget('bbcode')) ? true : false;	$post_data['enable_urls']		= true;}$post_data['enable_magic_url'] = $post_data['drafts'] = false;// User own some drafts?if ($user->data['is_registered'] && $auth->acl_get('u_savedrafts') && ($mode == 'reply' || $mode == 'post' || $mode == 'quote')){	$sql = 'SELECT draft_id		FROM ' . DRAFTS_TABLE . '		WHERE user_id = ' . $user->data['user_id'] .			(($forum_id) ? ' AND forum_id = ' . (int) $forum_id : '') .			(($topic_id) ? ' AND topic_id = ' . (int) $topic_id : '') .			(($draft_id) ? " AND draft_id <> $draft_id" : '');	$result = $db->sql_query_limit($sql, 1);	if ($db->sql_fetchrow($result))	{		$post_data['drafts'] = true;	}	$db->sql_freeresult($result);}$check_value = (($post_data['enable_bbcode']+1) << 8) + (($post_data['enable_smilies']+1) << 4) + (($post_data['enable_urls']+1) << 2) + (($post_data['enable_sig']+1) << 1);// Check if user is watching this topicif ($mode != 'post' && $config['allow_topic_notify'] && $user->data['is_registered']){	$sql = 'SELECT topic_id		FROM ' . TOPICS_WATCH_TABLE . '		WHERE topic_id = ' . $topic_id . '			AND user_id = ' . $user->data['user_id'];	$result = $db->sql_query($sql);	$post_data['notify_set'] = (int) $db->sql_fetchfield('topic_id');	$db->sql_freeresult($result);}// Do we want to edit our post ?if ($mode == 'edit' && $post_data['bbcode_uid']){	$message_parser->bbcode_uid = $post_data['bbcode_uid'];}// HTML, BBCode, Smilies, Images and Flash status$bbcode_status	= ($config['allow_bbcode'] && $auth->acl_get('f_bbcode', $forum_id)) ? true : false;$smilies_status	= ($config['allow_smilies'] && $auth->acl_get('f_smilies', $forum_id)) ? true : false;$img_status		= ($bbcode_status && $auth->acl_get('f_img', $forum_id)) ? true : false;$url_status		= ($config['allow_post_links']) ? true : false;$flash_status	= ($bbcode_status && $auth->acl_get('f_flash', $forum_id) && $config['allow_post_flash']) ? true : false;$quote_status	= true;// Save Draftif ($save && $user->data['is_registered'] && $auth->acl_get('u_savedrafts') && ($mode == 'reply' || $mode == 'post' || $mode == 'quote')){	$subject = utf8_normalize_nfc(request_var('subject', '', true));	$subject = (!$subject && $mode != 'post') ? $post_data['topic_title'] : $subject;	$message = utf8_normalize_nfc(request_var('message', '', true));	if ($subject && $message)	{		if (confirm_box(true))		{			$sql = 'INSERT INTO ' . DRAFTS_TABLE . ' ' . $db->sql_build_array('INSERT', array(				'user_id'		=> (int) $user->data['user_id'],				'topic_id'		=> (int) $topic_id,				'forum_id'		=> (int) $forum_id,				'save_time'		=> (int) $current_time,				'draft_subject'	=> (string) $subject,				'draft_message'	=> (string) $message)			);			$db->sql_query($sql);			$meta_info = ($mode == 'post') ? append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id) : append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id");			meta_refresh(3, $meta_info);			$message = $user->lang['DRAFT_SAVED'] . '<br /><br />';			$message .= ($mode != 'post') ? sprintf($user->lang['RETURN_TOPIC'], '<a href="' . $meta_info . '">', '</a>') . '<br /><br />' : '';			$message .= sprintf($user->lang['RETURN_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id) . '">', '</a>');			trigger_error($message);		}		else		{			$s_hidden_fields = build_hidden_fields(array(				'mode'		=> $mode,				'save'		=> true,				'f'			=> $forum_id,				't'			=> $topic_id,				'subject'	=> $subject,				'message'	=> $message,				'attachment_data' => $message_parser->attachment_data,				)			);			$hidden_fields = array(				'icon_id'			=> 0,				'disable_bbcode'	=> false,				'disable_smilies'	=> false,				'disable_magic_url'	=> false,				'attach_sig'		=> true,				'lock_topic'		=> false,				'topic_type'		=> POST_NORMAL,				'topic_time_limit'	=> 0,				'poll_title'		=> '',				'poll_option_text'	=> '',				'poll_max_options'	=> 1,				'poll_length'		=> 0,				'poll_vote_change'	=> false,			);			foreach ($hidden_fields as $name => $default)			{				if (!isset($_POST[$name]))				{					// Don't include it, if its not available					unset($hidden_fields[$name]);					continue;				}				if (is_bool($default))				{					// Use the string representation					$hidden_fields[$name] = request_var($name, '');				}				else				{					$hidden_fields[$name] = request_var($name, $default);				}			}			$s_hidden_fields .= build_hidden_fields($hidden_fields);			confirm_box(false, 'SAVE_DRAFT', $s_hidden_fields);		}	}	else	{		if (utf8_clean_string($subject) === '')		{			$error[] = $user->lang['EMPTY_SUBJECT'];		}		if (utf8_clean_string($message) === '')		{			$error[] = $user->lang['TOO_FEW_CHARS'];		}	}	unset($subject, $message);}// Load requested Draftif ($draft_id && ($mode == 'reply' || $mode == 'quote' || $mode == 'post') && $user->data['is_registered'] && $auth->acl_get('u_savedrafts')){	$sql = 'SELECT draft_subject, draft_message		FROM ' . DRAFTS_TABLE . "		WHERE draft_id = $draft_id			AND user_id = " . $user->data['user_id'];	$result = $db->sql_query_limit($sql, 1);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		$post_data['post_subject'] = $row['draft_subject'];		$message_parser->message = $row['draft_message'];		$template->assign_var('S_DRAFT_LOADED', true);	}	else	{		$draft_id = 0;	}}// Load draft overviewif ($load && ($mode == 'reply' || $mode == 'quote' || $mode == 'post') && $post_data['drafts']){	load_drafts($topic_id, $forum_id);}if ($submit || $preview || $refresh){	$post_data['topic_cur_post_id']	= request_var('topic_cur_post_id', 0);	$post_data['post_subject']		= utf8_normalize_nfc(request_var('subject', '', true));	$message_parser->message		= utf8_normalize_nfc(request_var('message', '', true));	$post_data['username']			= utf8_normalize_nfc(request_var('username', $post_data['username'], true));	$post_data['post_edit_reason']	= (!empty($_POST['edit_reason']) && $mode == 'edit' && $auth->acl_get('m_edit', $forum_id)) ? utf8_normalize_nfc(request_var('edit_reason', '', true)) : '';	$post_data['orig_topic_type']	= $post_data['topic_type'];	$post_data['topic_type']		= request_var('topic_type', (($mode != 'post') ? (int) $post_data['topic_type'] : POST_NORMAL));	$post_data['topic_time_limit']	= request_var('topic_time_limit', (($mode != 'post') ? (int) $post_data['topic_time_limit'] : 0));	if ($post_data['enable_icons'] && $auth->acl_get('f_icons', $forum_id))	{		$post_data['icon_id'] = request_var('icon', (int) $post_data['icon_id']);	}	$post_data['enable_bbcode']		= (!$bbcode_status || isset($_POST['disable_bbcode'])) ? false : true;	$post_data['enable_smilies']	= (!$smilies_status || isset($_POST['disable_smilies'])) ? false : true;	$post_data['enable_urls']		= (isset($_POST['disable_magic_url'])) ? 0 : 1;	$post_data['enable_sig']		= (!$config['allow_sig'] || !$auth->acl_get('f_sigs', $forum_id) || !$auth->acl_get('u_sig')) ? false : ((isset($_POST['attach_sig']) && $user->data['is_registered']) ? true : false);	if ($config['allow_topic_notify'] && $user->data['is_registered'])	{		$notify = (isset($_POST['notify'])) ? true : false;	}	else	{		$notify = false;	}	$topic_lock			= (isset($_POST['lock_topic'])) ? true : false;	$post_lock			= (isset($_POST['lock_post'])) ? true : false;	$poll_delete		= (isset($_POST['poll_delete'])) ? true : false;	if ($submit)	{		$status_switch = (($post_data['enable_bbcode']+1) << 8) + (($post_data['enable_smilies']+1) << 4) + (($post_data['enable_urls']+1) << 2) + (($post_data['enable_sig']+1) << 1);		$status_switch = ($status_switch != $check_value);	}	else	{		$status_switch = 1;	}	// Delete Poll	if ($poll_delete && $mode == 'edit' && sizeof($post_data['poll_options']) &&		((!$post_data['poll_last_vote'] && $post_data['poster_id'] == $user->data['user_id'] && $auth->acl_get('f_delete', $forum_id)) || $auth->acl_get('m_delete', $forum_id)))	{		if ($submit && check_form_key('posting'))		{			$sql = 'DELETE FROM ' . POLL_OPTIONS_TABLE . "				WHERE topic_id = $topic_id";			$db->sql_query($sql);			$sql = 'DELETE FROM ' . POLL_VOTES_TABLE . "				WHERE topic_id = $topic_id";			$db->sql_query($sql);			$topic_sql = array(				'poll_title'		=> '',				'poll_start' 		=> 0,				'poll_length'		=> 0,				'poll_last_vote'	=> 0,				'poll_max_options'	=> 0,				'poll_vote_change'	=> 0			);			$sql = 'UPDATE ' . TOPICS_TABLE . '				SET ' . $db->sql_build_array('UPDATE', $topic_sql) . "				WHERE topic_id = $topic_id";			$db->sql_query($sql);		}		$post_data['poll_title'] = $post_data['poll_option_text'] = '';		$post_data['poll_vote_change'] = $post_data['poll_max_options'] = $post_data['poll_length'] = 0;	}	else	{		$post_data['poll_title']		= utf8_normalize_nfc(request_var('poll_title', '', true));		$post_data['poll_length']		= request_var('poll_length', 0);		$post_data['poll_option_text']	= utf8_normalize_nfc(request_var('poll_option_text', '', true));		$post_data['poll_max_options']	= request_var('poll_max_options', 1);		$post_data['poll_vote_change']	= ($auth->acl_get('f_votechg', $forum_id) && $auth->acl_get('f_vote', $forum_id) && isset($_POST['poll_vote_change'])) ? 1 : 0;	}	// If replying/quoting and last post id has changed	// give user option to continue submit or return to post	// notify and show user the post made between his request and the final submit	if (($mode == 'reply' || $mode == 'quote') && $post_data['topic_cur_post_id'] && $post_data['topic_cur_post_id'] != $post_data['topic_last_post_id'])	{		// Only do so if it is allowed forum-wide		if ($post_data['forum_flags'] & FORUM_FLAG_POST_REVIEW)		{			if (topic_review($topic_id, $forum_id, 'post_review', $post_data['topic_cur_post_id']))			{				$template->assign_var('S_POST_REVIEW', true);			}			$submit = false;			$refresh = true;		}	}	// Parse Attachments - before checksum is calculated	$message_parser->parse_attachments('fileupload', $mode, $forum_id, $submit, $preview, $refresh);	// Grab md5 'checksum' of new message	$message_md5 = md5($message_parser->message);	// If editing and checksum has changed we know the post was edited while we're editing	// Notify and show user the changed post	if ($mode == 'edit' && $post_data['forum_flags'] & FORUM_FLAG_POST_REVIEW)	{		$edit_post_message_checksum = request_var('edit_post_message_checksum', '');		$edit_post_subject_checksum = request_var('edit_post_subject_checksum', '');		// $post_data['post_checksum'] is the checksum of the post submitted in the meantime		// $message_md5 is the checksum of the post we're about to submit		// $edit_post_message_checksum is the checksum of the post we're editing		// ...		// We make sure nobody else made exactly the same change		// we're about to submit by also checking $message_md5 != $post_data['post_checksum']		if (($edit_post_message_checksum !== '' && $edit_post_message_checksum != $post_data['post_checksum'] && $message_md5 != $post_data['post_checksum'])		 || ($edit_post_subject_checksum !== '' && $edit_post_subject_checksum != $post_data['post_subject_md5'] && md5($post_data['post_subject']) != $post_data['post_subject_md5']))		{			if (topic_review($topic_id, $forum_id, 'post_review_edit', $post_id))			{				$template->assign_vars(array(					'S_POST_REVIEW'			=> true,					'L_POST_REVIEW'			=> $user->lang['POST_REVIEW_EDIT'],					'L_POST_REVIEW_EXPLAIN'	=> $user->lang['POST_REVIEW_EDIT_EXPLAIN'],				));			}			$submit = false;			$refresh = true;		}	}	// Check checksum ... don't re-parse message if the same	$update_message = ($mode != 'edit' || $message_md5 != $post_data['post_checksum'] || $status_switch || strlen($post_data['bbcode_uid']) < BBCODE_UID_LEN) ? true : false;	// Also check if subject got updated...	$update_subject = $mode != 'edit' || ($post_data['post_subject_md5'] && $post_data['post_subject_md5'] != md5($post_data['post_subject']));	// Parse message	if ($update_message)	{		if (sizeof($message_parser->warn_msg))		{			$error[] = implode('<br />', $message_parser->warn_msg);			$message_parser->warn_msg = array();		}		$message_parser->parse($post_data['enable_bbcode'], ($config['allow_post_links']) ? $post_data['enable_urls'] : false, $post_data['enable_smilies'], $img_status, $flash_status, $quote_status, $config['allow_post_links']);		// On a refresh we do not care about message parsing errors		if (sizeof($message_parser->warn_msg) && $refresh)		{			$message_parser->warn_msg = array();		}	}	else	{		$message_parser->bbcode_bitfield = $post_data['bbcode_bitfield'];	}	if ($mode != 'edit' && !$preview && !$refresh && $config['flood_interval'] && !$auth->acl_get('f_ignoreflood', $forum_id))	{		// Flood check		$last_post_time = 0;		if ($user->data['is_registered'])		{			$last_post_time = $user->data['user_lastpost_time'];		}		else		{			$sql = 'SELECT post_time AS last_post_time				FROM ' . POSTS_TABLE . "				WHERE poster_ip = '" . $user->ip . "'					AND post_time > " . ($current_time - $config['flood_interval']);			$result = $db->sql_query_limit($sql, 1);			if ($row = $db->sql_fetchrow($result))			{				$last_post_time = $row['last_post_time'];			}			$db->sql_freeresult($result);		}		if ($last_post_time && ($current_time - $last_post_time) < intval($config['flood_interval']))		{			$error[] = $user->lang['FLOOD_ERROR'];		}	}	// Validate username	if (($post_data['username'] && !$user->data['is_registered']) || ($mode == 'edit' && $post_data['poster_id'] == ANONYMOUS && $post_data['username'] && $post_data['post_username'] && $post_data['post_username'] != $post_data['username']))	{		include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		$user->add_lang('ucp');		if (($result = validate_username($post_data['username'], (!empty($post_data['post_username'])) ? $post_data['post_username'] : '')) !== false)		{			$error[] = $user->lang[$result . '_USERNAME'];		}		if (($result = validate_string($post_data['username'], false, $config['min_name_chars'], $config['max_name_chars'])) !== false)		{			$min_max_amount = ($result == 'TOO_SHORT') ? $config['min_name_chars'] : $config['max_name_chars'];			$error[] = sprintf($user->lang['FIELD_' . $result], $user->lang['USERNAME'], $min_max_amount);		}	}	if ($config['enable_post_confirm'] && !$user->data['is_registered'] && in_array($mode, array('quote', 'post', 'reply')))	{		$captcha_data = array(			'message'	=> utf8_normalize_nfc(request_var('message', '', true)),			'subject'	=> utf8_normalize_nfc(request_var('subject', '', true)),			'username'	=> utf8_normalize_nfc(request_var('username', '', true)),		);		$vc_response = $captcha->validate($captcha_data);		if ($vc_response)		{			$error[] = $vc_response;		}	}	// check form	if (($submit || $preview) && !check_form_key('posting'))	{		$error[] = $user->lang['FORM_INVALID'];	}	// Parse subject	if (!$preview && !$refresh && utf8_clean_string($post_data['post_subject']) === '' && ($mode == 'post' || ($mode == 'edit' && $post_data['topic_first_post_id'] == $post_id)))	{		$error[] = $user->lang['EMPTY_SUBJECT'];	}	$post_data['poll_last_vote'] = (isset($post_data['poll_last_vote'])) ? $post_data['poll_last_vote'] : 0;	if ($post_data['poll_option_text'] &&		($mode == 'post' || ($mode == 'edit' && $post_id == $post_data['topic_first_post_id']/* && (!$post_data['poll_last_vote'] || $auth->acl_get('m_edit', $forum_id))*/))		&& $auth->acl_get('f_poll', $forum_id))	{		$poll = array(			'poll_title'		=> $post_data['poll_title'],			'poll_length'		=> $post_data['poll_length'],			'poll_max_options'	=> $post_data['poll_max_options'],			'poll_option_text'	=> $post_data['poll_option_text'],			'poll_start'		=> $post_data['poll_start'],			'poll_last_vote'	=> $post_data['poll_last_vote'],			'poll_vote_change'	=> $post_data['poll_vote_change'],			'enable_bbcode'		=> $post_data['enable_bbcode'],			'enable_urls'		=> $post_data['enable_urls'],			'enable_smilies'	=> $post_data['enable_smilies'],			'img_status'		=> $img_status		);		$message_parser->parse_poll($poll);		$post_data['poll_options'] = (isset($poll['poll_options'])) ? $poll['poll_options'] : array();		$post_data['poll_title'] = (isset($poll['poll_title'])) ? $poll['poll_title'] : '';		/* We reset votes, therefore also allow removing options		if ($post_data['poll_last_vote'] && ($poll['poll_options_size'] < $orig_poll_options_size))		{			$message_parser->warn_msg[] = $user->lang['NO_DELETE_POLL_OPTIONS'];		}*/	}	else if ($mode == 'edit' && $post_id == $post_data['topic_first_post_id'] && $auth->acl_get('f_poll', $forum_id))	{		// The user removed all poll options, this is equal to deleting the poll.		$poll = array(			'poll_title'		=> '',			'poll_length'		=> 0,			'poll_max_options'	=> 0,			'poll_option_text'	=> '',			'poll_start'		=> 0,			'poll_last_vote'	=> 0,			'poll_vote_change'	=> 0,			'poll_options'		=> array(),		);		$post_data['poll_options'] = array();		$post_data['poll_title'] = '';		$post_data['poll_start'] = $post_data['poll_length'] = $post_data['poll_max_options'] = $post_data['poll_last_vote'] = $post_data['poll_vote_change'] = 0;	}	else if (!$auth->acl_get('f_poll', $forum_id) && ($mode == 'edit') && ($post_id == $post_data['topic_first_post_id']) && ($original_poll_data['poll_title'] != ''))	{		// We have a poll but the editing user is not permitted to create/edit it.		// So we just keep the original poll-data.		$poll = array_merge($original_poll_data, array(			'enable_bbcode'		=> $post_data['enable_bbcode'],			'enable_urls'		=> $post_data['enable_urls'],			'enable_smilies'	=> $post_data['enable_smilies'],			'img_status'		=> $img_status,		));		$message_parser->parse_poll($poll);		$post_data['poll_options'] = (isset($poll['poll_options'])) ? $poll['poll_options'] : array();		$post_data['poll_title'] = (isset($poll['poll_title'])) ? $poll['poll_title'] : '';	}	else	{		$poll = array();	}	// Check topic type	if ($post_data['topic_type'] != POST_NORMAL && ($mode == 'post' || ($mode == 'edit' && $post_data['topic_first_post_id'] == $post_id)))	{		switch ($post_data['topic_type'])		{			case POST_GLOBAL:			case POST_ANNOUNCE:				$auth_option = 'f_announce';			break;			case POST_STICKY:				$auth_option = 'f_sticky';			break;			default:				$auth_option = '';			break;		}		if (!$auth->acl_get($auth_option, $forum_id))		{			// There is a special case where a user edits his post whereby the topic type got changed by an admin/mod.			// Another case would be a mod not having sticky permissions for example but edit permissions.			if ($mode == 'edit')			{				// To prevent non-authed users messing around with the topic type we reset it to the original one.				$post_data['topic_type'] = $post_data['orig_topic_type'];			}			else			{				$error[] = $user->lang['CANNOT_POST_' . str_replace('F_', '', strtoupper($auth_option))];			}		}	}	if (sizeof($message_parser->warn_msg))	{		$error[] = implode('<br />', $message_parser->warn_msg);	}	// DNSBL check	if ($config['check_dnsbl'] && !$refresh)	{		if (($dnsbl = $user->check_dnsbl('post')) !== false)		{			$error[] = sprintf($user->lang['IP_BLACKLISTED'], $user->ip, $dnsbl[1]);		}	}	// Store message, sync counters	if (!sizeof($error) && $submit)	{		// Check if we want to de-globalize the topic... and ask for new forum		if ($post_data['topic_type'] != POST_GLOBAL)		{			$sql = 'SELECT topic_type, forum_id				FROM ' . TOPICS_TABLE . "				WHERE topic_id = $topic_id";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($row && !$row['forum_id'] && $row['topic_type'] == POST_GLOBAL)			{				$to_forum_id = request_var('to_forum_id', 0);				if ($to_forum_id)				{					$sql = 'SELECT forum_type						FROM ' . FORUMS_TABLE . '						WHERE forum_id = ' . $to_forum_id;					$result = $db->sql_query($sql);					$forum_type = (int) $db->sql_fetchfield('forum_type');					$db->sql_freeresult($result);					if ($forum_type != FORUM_POST || !$auth->acl_get('f_post', $to_forum_id) || (!$auth->acl_get('m_approve', $to_forum_id) && !$auth->acl_get('f_noapprove', $to_forum_id)))					{						$to_forum_id = 0;					}				}				if (!$to_forum_id)				{					include_once($phpbb_root_path . 'includes/functions_admin.' . $phpEx);					$template->assign_vars(array(						'S_FORUM_SELECT'	=> make_forum_select(false, false, false, true, true, true),						'S_UNGLOBALISE'		=> true)					);					$submit = false;					$refresh = true;				}				else				{					if (!$auth->acl_get('f_post', $to_forum_id))					{						// This will only be triggered if the user tried to trick the forum.						trigger_error('NOT_AUTHORISED');					}					$forum_id = $to_forum_id;				}			}		}		if ($submit)		{			// Lock/Unlock Topic			$change_topic_status = $post_data['topic_status'];			$perm_lock_unlock = ($auth->acl_get('m_lock', $forum_id) || ($auth->acl_get('f_user_lock', $forum_id) && $user->data['is_registered'] && !empty($post_data['topic_poster']) && $user->data['user_id'] == $post_data['topic_poster'] && $post_data['topic_status'] == ITEM_UNLOCKED)) ? true : false;			if ($post_data['topic_status'] == ITEM_LOCKED && !$topic_lock && $perm_lock_unlock)			{				$change_topic_status = ITEM_UNLOCKED;			}			else if ($post_data['topic_status'] == ITEM_UNLOCKED && $topic_lock && $perm_lock_unlock)			{				$change_topic_status = ITEM_LOCKED;			}			if ($change_topic_status != $post_data['topic_status'])			{				$sql = 'UPDATE ' . TOPICS_TABLE . "					SET topic_status = $change_topic_status					WHERE topic_id = $topic_id						AND topic_moved_id = 0";				$db->sql_query($sql);				$user_lock = ($auth->acl_get('f_user_lock', $forum_id) && $user->data['is_registered'] && $user->data['user_id'] == $post_data['topic_poster']) ? 'USER_' : '';				add_log('mod', $forum_id, $topic_id, 'LOG_' . $user_lock . (($change_topic_status == ITEM_LOCKED) ? 'LOCK' : 'UNLOCK'), $post_data['topic_title']);			}			// Lock/Unlock Post Edit			if ($mode == 'edit' && $post_data['post_edit_locked'] == ITEM_LOCKED && !$post_lock && $auth->acl_get('m_edit', $forum_id))			{				$post_data['post_edit_locked'] = ITEM_UNLOCKED;			}			else if ($mode == 'edit' && $post_data['post_edit_locked'] == ITEM_UNLOCKED && $post_lock && $auth->acl_get('m_edit', $forum_id))			{				$post_data['post_edit_locked'] = ITEM_LOCKED;			}			$data = array(				'topic_title'			=> (empty($post_data['topic_title'])) ? $post_data['post_subject'] : $post_data['topic_title'],				'topic_first_post_id'	=> (isset($post_data['topic_first_post_id'])) ? (int) $post_data['topic_first_post_id'] : 0,				'topic_last_post_id'	=> (isset($post_data['topic_last_post_id'])) ? (int) $post_data['topic_last_post_id'] : 0,				'topic_time_limit'		=> (int) $post_data['topic_time_limit'],				'topic_attachment'		=> (isset($post_data['topic_attachment'])) ? (int) $post_data['topic_attachment'] : 0,				'post_id'				=> (int) $post_id,				'topic_id'				=> (int) $topic_id,				'forum_id'				=> (int) $forum_id,				'icon_id'				=> (int) $post_data['icon_id'],				'poster_id'				=> (int) $post_data['poster_id'],				'enable_sig'			=> (bool) $post_data['enable_sig'],				'enable_bbcode'			=> (bool) $post_data['enable_bbcode'],				'enable_smilies'		=> (bool) $post_data['enable_smilies'],				'enable_urls'			=> (bool) $post_data['enable_urls'],				'enable_indexing'		=> (bool) $post_data['enable_indexing'],				'message_md5'			=> (string) $message_md5,				'post_time'				=> (isset($post_data['post_time'])) ? (int) $post_data['post_time'] : $current_time,				'post_checksum'			=> (isset($post_data['post_checksum'])) ? (string) $post_data['post_checksum'] : '',				'post_edit_reason'		=> $post_data['post_edit_reason'],				'post_edit_user'		=> ($mode == 'edit') ? $user->data['user_id'] : ((isset($post_data['post_edit_user'])) ? (int) $post_data['post_edit_user'] : 0),				'forum_parents'			=> $post_data['forum_parents'],				'forum_name'			=> $post_data['forum_name'],				'notify'				=> $notify,				'notify_set'			=> $post_data['notify_set'],				'poster_ip'				=> (isset($post_data['poster_ip'])) ? $post_data['poster_ip'] : $user->ip,				'post_edit_locked'		=> (int) $post_data['post_edit_locked'],				'bbcode_bitfield'		=> $message_parser->bbcode_bitfield,				'bbcode_uid'			=> $message_parser->bbcode_uid,				'message'				=> $message_parser->message,				'attachment_data'		=> $message_parser->attachment_data,				'filename_data'			=> $message_parser->filename_data,				'topic_approved'		=> (isset($post_data['topic_approved'])) ? $post_data['topic_approved'] : false,				'post_approved'			=> (isset($post_data['post_approved'])) ? $post_data['post_approved'] : false,			);			if ($mode == 'edit')			{				$data['topic_replies_real'] = $post_data['topic_replies_real'];				$data['topic_replies'] = $post_data['topic_replies'];			}			// The last parameter tells submit_post if search indexer has to be run			$redirect_url = submit_post($mode, $post_data['post_subject'], $post_data['username'], $post_data['topic_type'], $poll, $data, $update_message, ($update_message || $update_subject) ? true : false);			if ($config['enable_post_confirm'] && !$user->data['is_registered'] && (isset($captcha) && $captcha->is_solved() === true) && ($mode == 'post' || $mode == 'reply' || $mode == 'quote'))			{				$captcha->reset();			}			// Check the permissions for post approval. Moderators are not affected.			if ((!$auth->acl_get('f_noapprove', $data['forum_id']) && !$auth->acl_get('m_approve', $data['forum_id']) && empty($data['force_approved_state'])) || (isset($data['force_approved_state']) && !$data['force_approved_state']))			{				meta_refresh(10, $redirect_url);				$message = ($mode == 'edit') ? $user->lang['POST_EDITED_MOD'] : $user->lang['POST_STORED_MOD'];				$message .= (($user->data['user_id'] == ANONYMOUS) ? '' : ' '. $user->lang['POST_APPROVAL_NOTIFY']);			}			else			{				meta_refresh(3, $redirect_url);				$message = ($mode == 'edit') ? 'POST_EDITED' : 'POST_STORED';				$message = $user->lang[$message] . '<br /><br />' . sprintf($user->lang['VIEW_MESSAGE'], '<a href="' . $redirect_url . '">', '</a>');			}			$message .= '<br /><br />' . sprintf($user->lang['RETURN_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $data['forum_id']) . '">', '</a>');			trigger_error($message);		}	}}// Previewif (!sizeof($error) && $preview){	$post_data['post_time'] = ($mode == 'edit') ? $post_data['post_time'] : $current_time;	$preview_message = $message_parser->format_display($post_data['enable_bbcode'], $post_data['enable_urls'], $post_data['enable_smilies'], false);	$preview_signature = ($mode == 'edit') ? $post_data['user_sig'] : $user->data['user_sig'];	$preview_signature_uid = ($mode == 'edit') ? $post_data['user_sig_bbcode_uid'] : $user->data['user_sig_bbcode_uid'];	$preview_signature_bitfield = ($mode == 'edit') ? $post_data['user_sig_bbcode_bitfield'] : $user->data['user_sig_bbcode_bitfield'];	// Signature	if ($post_data['enable_sig'] && $config['allow_sig'] && $preview_signature && $auth->acl_get('f_sigs', $forum_id))	{		$parse_sig = new parse_message($preview_signature);		$parse_sig->bbcode_uid = $preview_signature_uid;		$parse_sig->bbcode_bitfield = $preview_signature_bitfield;		// Not sure about parameters for bbcode/smilies/urls... in signatures		$parse_sig->format_display($config['allow_sig_bbcode'], $config['allow_sig_links'], $config['allow_sig_smilies']);		$preview_signature = $parse_sig->message;		unset($parse_sig);	}	else	{		$preview_signature = '';	}	$preview_subject = censor_text($post_data['post_subject']);	// Poll Preview	if (!$poll_delete && ($mode == 'post' || ($mode == 'edit' && $post_id == $post_data['topic_first_post_id']/* && (!$post_data['poll_last_vote'] || $auth->acl_get('m_edit', $forum_id))*/))	&& $auth->acl_get('f_poll', $forum_id))	{		$parse_poll = new parse_message($post_data['poll_title']);		$parse_poll->bbcode_uid = $message_parser->bbcode_uid;		$parse_poll->bbcode_bitfield = $message_parser->bbcode_bitfield;		$parse_poll->format_display($post_data['enable_bbcode'], $post_data['enable_urls'], $post_data['enable_smilies']);		if ($post_data['poll_length'])		{			$poll_end = ($post_data['poll_length'] * 86400) + (($post_data['poll_start']) ? $post_data['poll_start'] : time());		}		$template->assign_vars(array(			'S_HAS_POLL_OPTIONS'	=> (sizeof($post_data['poll_options'])),			'S_IS_MULTI_CHOICE'		=> ($post_data['poll_max_options'] > 1) ? true : false,			'POLL_QUESTION'		=> $parse_poll->message,			'L_POLL_LENGTH'		=> ($post_data['poll_length']) ? sprintf($user->lang['POLL_RUN_TILL'], $user->format_date($poll_end)) : '',			'L_MAX_VOTES'		=> ($post_data['poll_max_options'] == 1) ? $user->lang['MAX_OPTION_SELECT'] : sprintf($user->lang['MAX_OPTIONS_SELECT'], $post_data['poll_max_options']))		);		$parse_poll->message = implode("\n", $post_data['poll_options']);		$parse_poll->format_display($post_data['enable_bbcode'], $post_data['enable_urls'], $post_data['enable_smilies']);		$preview_poll_options = explode('<br />', $parse_poll->message);		unset($parse_poll);		foreach ($preview_poll_options as $key => $option)		{			$template->assign_block_vars('poll_option', array(				'POLL_OPTION_CAPTION'	=> $option,				'POLL_OPTION_ID'		=> $key + 1)			);		}		unset($preview_poll_options);	}	// Attachment Preview	if (sizeof($message_parser->attachment_data))	{		$template->assign_var('S_HAS_ATTACHMENTS', true);		$update_count = array();		$attachment_data = $message_parser->attachment_data;		parse_attachments($forum_id, $preview_message, $attachment_data, $update_count, true);		foreach ($attachment_data as $i => $attachment)		{			$template->assign_block_vars('attachment', array(				'DISPLAY_ATTACHMENT'	=> $attachment)			);		}		unset($attachment_data);	}	if (!sizeof($error))	{		$template->assign_vars(array(			'PREVIEW_SUBJECT'		=> $preview_subject,			'PREVIEW_MESSAGE'		=> $preview_message,			'PREVIEW_SIGNATURE'		=> $preview_signature,			'S_DISPLAY_PREVIEW'		=> true)		);	}}// Decode text for message display$post_data['bbcode_uid'] = ($mode == 'quote' && !$preview && !$refresh && !sizeof($error)) ? $post_data['bbcode_uid'] : $message_parser->bbcode_uid;$message_parser->decode_message($post_data['bbcode_uid']);if ($mode == 'quote' && !$submit && !$preview && !$refresh){	if ($config['allow_bbcode'])	{		$message_parser->message = '[quote=&quot;' . $post_data['quote_username'] . '&quot;]' . censor_text(trim($message_parser->message)) . "[/quote]\n";	}	else	{		$offset = 0;		$quote_string = "&gt; ";		$message = censor_text(trim($message_parser->message));		// see if we are nesting. It's easily tricked but should work for one level of nesting		if (strpos($message, "&gt;") !== false)		{			$offset = 10;		}		$message = utf8_wordwrap($message, 75 + $offset, "\n");		$message = $quote_string . $message;		$message = str_replace("\n", "\n" . $quote_string, $message);		$message_parser->message =  $post_data['quote_username'] . " " . $user->lang['WROTE'] . ":\n" . $message . "\n";	}}if (($mode == 'reply' || $mode == 'quote') && !$submit && !$preview && !$refresh){	$post_data['post_subject'] = ((strpos($post_data['post_subject'], 'Re: ') !== 0) ? 'Re: ' : '') . censor_text($post_data['post_subject']);}$attachment_data = $message_parser->attachment_data;$filename_data = $message_parser->filename_data;$post_data['post_text'] = $message_parser->message;if (sizeof($post_data['poll_options']) || !empty($post_data['poll_title'])){	$message_parser->message = $post_data['poll_title'];	$message_parser->bbcode_uid = $post_data['bbcode_uid'];	$message_parser->decode_message();	$post_data['poll_title'] = $message_parser->message;	$message_parser->message = implode("\n", $post_data['poll_options']);	$message_parser->decode_message();	$post_data['poll_options'] = explode("\n", $message_parser->message);}// MAIN POSTING PAGE BEGINS HERE// Forum moderators?$moderators = array();if ($config['load_moderators']){	get_moderators($moderators, $forum_id);}// Generate smiley listinggenerate_smilies('inline', $forum_id);// Generate inline attachment select boxposting_gen_inline_attachments($attachment_data);// Do show topic type selection only in first post.$topic_type_toggle = false;if ($mode == 'post' || ($mode == 'edit' && $post_id == $post_data['topic_first_post_id'])){	$topic_type_toggle = posting_gen_topic_types($forum_id, $post_data['topic_type']);}$s_topic_icons = false;if ($post_data['enable_icons'] && $auth->acl_get('f_icons', $forum_id)){	$s_topic_icons = posting_gen_topic_icons($mode, $post_data['icon_id']);}$bbcode_checked		= (isset($post_data['enable_bbcode'])) ? !$post_data['enable_bbcode'] : (($config['allow_bbcode']) ? !$user->optionget('bbcode') : 1);$smilies_checked	= (isset($post_data['enable_smilies'])) ? !$post_data['enable_smilies'] : (($config['allow_smilies']) ? !$user->optionget('smilies') : 1);$urls_checked		= (isset($post_data['enable_urls'])) ? !$post_data['enable_urls'] : 0;$sig_checked		= $post_data['enable_sig'];$lock_topic_checked	= (isset($topic_lock) && $topic_lock) ? $topic_lock : (($post_data['topic_status'] == ITEM_LOCKED) ? 1 : 0);$lock_post_checked	= (isset($post_lock)) ? $post_lock : $post_data['post_edit_locked'];// If the user is replying or posting and not already watching this topic but set to always being notified we need to overwrite this setting$notify_set			= ($mode != 'edit' && $config['allow_topic_notify'] && $user->data['is_registered'] && !$post_data['notify_set']) ? $user->data['user_notify'] : $post_data['notify_set'];$notify_checked		= (isset($notify)) ? $notify : (($mode == 'post') ? $user->data['user_notify'] : $notify_set);// Page title & action URL$s_action = append_sid("{$phpbb_root_path}posting.$phpEx", "mode=$mode&amp;f=$forum_id");$s_action .= ($topic_id) ? "&amp;t=$topic_id" : '';$s_action .= ($post_id) ? "&amp;p=$post_id" : '';switch ($mode){	case 'post':		$page_title = $user->lang['POST_TOPIC'];	break;	case 'quote':	case 'reply':		$page_title = $user->lang['POST_REPLY'];	break;	case 'delete':	case 'edit':		$page_title = $user->lang['EDIT_POST'];	break;}// Build Navigation Linksgenerate_forum_nav($post_data);// Build Forum Rulesgenerate_forum_rules($post_data);// Posting uses is_solved for legacy reasons. Plugins have to use is_solved to force themselves to be displayed.if ($config['enable_post_confirm'] && !$user->data['is_registered'] && (isset($captcha) && $captcha->is_solved() === false) && ($mode == 'post' || $mode == 'reply' || $mode == 'quote')){	$template->assign_vars(array(		'S_CONFIRM_CODE'			=> true,		'CAPTCHA_TEMPLATE'			=> $captcha->get_template(),	));}$s_hidden_fields = ($mode == 'reply' || $mode == 'quote') ? '<input type="hidden" name="topic_cur_post_id" value="' . $post_data['topic_last_post_id'] . '" />' : '';$s_hidden_fields .= '<input type="hidden" name="lastclick" value="' . $current_time . '" />';$s_hidden_fields .= ($draft_id || isset($_REQUEST['draft_loaded'])) ? '<input type="hidden" name="draft_loaded" value="' . request_var('draft_loaded', $draft_id) . '" />' : '';if ($mode == 'edit'){	$s_hidden_fields .= build_hidden_fields(array(		'edit_post_message_checksum'	=> $post_data['post_checksum'],		'edit_post_subject_checksum'	=> $post_data['post_subject_md5'],	));}// Add the confirm id/code pair to the hidden fields, else an error is displayed on next submit/previewif (isset($captcha) && $captcha->is_solved() !== false){	$s_hidden_fields .= build_hidden_fields($captcha->get_hidden_fields());}$form_enctype = (@ini_get('file_uploads') == '0' || strtolower(@ini_get('file_uploads')) == 'off' || !$config['allow_attachments'] || !$auth->acl_get('u_attach') || !$auth->acl_get('f_attach', $forum_id)) ? '' : ' enctype="multipart/form-data"';add_form_key('posting');// Start assigning vars for main posting page ...$template->assign_vars(array(	'L_POST_A'					=> $page_title,	'L_ICON'					=> ($mode == 'reply' || $mode == 'quote' || ($mode == 'edit' && $post_id != $post_data['topic_first_post_id'])) ? $user->lang['POST_ICON'] : $user->lang['TOPIC_ICON'],	'L_MESSAGE_BODY_EXPLAIN'	=> (intval($config['max_post_chars'])) ? sprintf($user->lang['MESSAGE_BODY_EXPLAIN'], intval($config['max_post_chars'])) : '',	'FORUM_NAME'			=> $post_data['forum_name'],	'FORUM_DESC'			=> ($post_data['forum_desc']) ? generate_text_for_display($post_data['forum_desc'], $post_data['forum_desc_uid'], $post_data['forum_desc_bitfield'], $post_data['forum_desc_options']) : '',	'TOPIC_TITLE'			=> censor_text($post_data['topic_title']),	'MODERATORS'			=> (sizeof($moderators)) ? implode(', ', $moderators[$forum_id]) : '',	'USERNAME'				=> ((!$preview && $mode != 'quote') || $preview) ? $post_data['username'] : '',	'SUBJECT'				=> $post_data['post_subject'],	'MESSAGE'				=> $post_data['post_text'],	'BBCODE_STATUS'			=> ($bbcode_status) ? sprintf($user->lang['BBCODE_IS_ON'], '<a href="' . append_sid("{$phpbb_root_path}faq.$phpEx", 'mode=bbcode') . '">', '</a>') : sprintf($user->lang['BBCODE_IS_OFF'], '<a href="' . append_sid("{$phpbb_root_path}faq.$phpEx", 'mode=bbcode') . '">', '</a>'),	'IMG_STATUS'			=> ($img_status) ? $user->lang['IMAGES_ARE_ON'] : $user->lang['IMAGES_ARE_OFF'],	'FLASH_STATUS'			=> ($flash_status) ? $user->lang['FLASH_IS_ON'] : $user->lang['FLASH_IS_OFF'],	'SMILIES_STATUS'		=> ($smilies_status) ? $user->lang['SMILIES_ARE_ON'] : $user->lang['SMILIES_ARE_OFF'],	'URL_STATUS'			=> ($bbcode_status && $url_status) ? $user->lang['URL_IS_ON'] : $user->lang['URL_IS_OFF'],	'MAX_FONT_SIZE'			=> (int) $config['max_post_font_size'],	'MINI_POST_IMG'			=> $user->img('icon_post_target', $user->lang['POST']),	'POST_DATE'				=> ($post_data['post_time']) ? $user->format_date($post_data['post_time']) : '',	'ERROR'					=> (sizeof($error)) ? implode('<br />', $error) : '',	'TOPIC_TIME_LIMIT'		=> (int) $post_data['topic_time_limit'],	'EDIT_REASON'			=> $post_data['post_edit_reason'],	'U_VIEW_FORUM'			=> append_sid("{$phpbb_root_path}viewforum.$phpEx", "f=$forum_id"),	'U_VIEW_TOPIC'			=> ($mode != 'post') ? append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id") : '',	'U_PROGRESS_BAR'		=> append_sid("{$phpbb_root_path}posting.$phpEx", "f=$forum_id&amp;mode=popup"),	'UA_PROGRESS_BAR'		=> addslashes(append_sid("{$phpbb_root_path}posting.$phpEx", "f=$forum_id&amp;mode=popup")),	'S_PRIVMSGS'				=> false,	'S_CLOSE_PROGRESS_WINDOW'	=> (isset($_POST['add_file'])) ? true : false,	'S_EDIT_POST'				=> ($mode == 'edit') ? true : false,	'S_EDIT_REASON'				=> ($mode == 'edit' && $auth->acl_get('m_edit', $forum_id)) ? true : false,	'S_DISPLAY_USERNAME'		=> (!$user->data['is_registered'] || ($mode == 'edit' && $post_data['poster_id'] == ANONYMOUS)) ? true : false,	'S_SHOW_TOPIC_ICONS'		=> $s_topic_icons,	'S_DELETE_ALLOWED'			=> ($mode == 'edit' && (($post_id == $post_data['topic_last_post_id'] && $post_data['poster_id'] == $user->data['user_id'] && $auth->acl_get('f_delete', $forum_id) && !$post_data['post_edit_locked'] && ($post_data['post_time'] > time() - ($config['delete_time'] * 60) || !$config['delete_time'])) || $auth->acl_get('m_delete', $forum_id))) ? true : false,	'S_BBCODE_ALLOWED'			=> ($bbcode_status) ? 1 : 0,	'S_BBCODE_CHECKED'			=> ($bbcode_checked) ? ' checked="checked"' : '',	'S_SMILIES_ALLOWED'			=> $smilies_status,	'S_SMILIES_CHECKED'			=> ($smilies_checked) ? ' checked="checked"' : '',	'S_SIG_ALLOWED'				=> ($auth->acl_get('f_sigs', $forum_id) && $config['allow_sig'] && $user->data['is_registered']) ? true : false,	'S_SIGNATURE_CHECKED'		=> ($sig_checked) ? ' checked="checked"' : '',	'S_NOTIFY_ALLOWED'			=> (!$user->data['is_registered'] || ($mode == 'edit' && $user->data['user_id'] != $post_data['poster_id']) || !$config['allow_topic_notify'] || !$config['email_enable']) ? false : true,	'S_NOTIFY_CHECKED'			=> ($notify_checked) ? ' checked="checked"' : '',	'S_LOCK_TOPIC_ALLOWED'		=> (($mode == 'edit' || $mode == 'reply' || $mode == 'quote') && ($auth->acl_get('m_lock', $forum_id) || ($auth->acl_get('f_user_lock', $forum_id) && $user->data['is_registered'] && !empty($post_data['topic_poster']) && $user->data['user_id'] == $post_data['topic_poster'] && $post_data['topic_status'] == ITEM_UNLOCKED))) ? true : false,	'S_LOCK_TOPIC_CHECKED'		=> ($lock_topic_checked) ? ' checked="checked"' : '',	'S_LOCK_POST_ALLOWED'		=> ($mode == 'edit' && $auth->acl_get('m_edit', $forum_id)) ? true : false,	'S_LOCK_POST_CHECKED'		=> ($lock_post_checked) ? ' checked="checked"' : '',	'S_LINKS_ALLOWED'			=> $url_status,	'S_MAGIC_URL_CHECKED'		=> ($urls_checked) ? ' checked="checked"' : '',	'S_TYPE_TOGGLE'				=> $topic_type_toggle,	'S_SAVE_ALLOWED'			=> ($auth->acl_get('u_savedrafts') && $user->data['is_registered'] && $mode != 'edit') ? true : false,	'S_HAS_DRAFTS'				=> ($auth->acl_get('u_savedrafts') && $user->data['is_registered'] && $post_data['drafts']) ? true : false,	'S_FORM_ENCTYPE'			=> $form_enctype,	'S_BBCODE_IMG'			=> $img_status,	'S_BBCODE_URL'			=> $url_status,	'S_BBCODE_FLASH'		=> $flash_status,	'S_BBCODE_QUOTE'		=> $quote_status,	'S_POST_ACTION'			=> $s_action,	'S_HIDDEN_FIELDS'		=> $s_hidden_fields));// Build custom bbcodes arraydisplay_custom_bbcodes();// Poll entryif (($mode == 'post' || ($mode == 'edit' && $post_id == $post_data['topic_first_post_id']/* && (!$post_data['poll_last_vote'] || $auth->acl_get('m_edit', $forum_id))*/))	&& $auth->acl_get('f_poll', $forum_id)){	$template->assign_vars(array(		'S_SHOW_POLL_BOX'		=> true,		'S_POLL_VOTE_CHANGE'	=> ($auth->acl_get('f_votechg', $forum_id) && $auth->acl_get('f_vote', $forum_id)),		'S_POLL_DELETE'			=> ($mode == 'edit' && sizeof($post_data['poll_options']) && ((!$post_data['poll_last_vote'] && $post_data['poster_id'] == $user->data['user_id'] && $auth->acl_get('f_delete', $forum_id)) || $auth->acl_get('m_delete', $forum_id))),		'S_POLL_DELETE_CHECKED'	=> (!empty($poll_delete)) ? true : false,		'L_POLL_OPTIONS_EXPLAIN'	=> sprintf($user->lang['POLL_OPTIONS_' . (($mode == 'edit') ? 'EDIT_' : '') . 'EXPLAIN'], $config['max_poll_options']),		'VOTE_CHANGE_CHECKED'	=> (!empty($post_data['poll_vote_change'])) ? ' checked="checked"' : '',		'POLL_TITLE'			=> (isset($post_data['poll_title'])) ? $post_data['poll_title'] : '',		'POLL_OPTIONS'			=> (!empty($post_data['poll_options'])) ? implode("\n", $post_data['poll_options']) : '',		'POLL_MAX_OPTIONS'		=> (isset($post_data['poll_max_options'])) ? (int) $post_data['poll_max_options'] : 1,		'POLL_LENGTH'			=> $post_data['poll_length'])	);}// Show attachment box for adding attachments if true$allowed = ($auth->acl_get('f_attach', $forum_id) && $auth->acl_get('u_attach') && $config['allow_attachments'] && $form_enctype);// Attachment entryposting_gen_attachment_entry($attachment_data, $filename_data, $allowed);// Output page ...page_header($page_title, false);$template->set_filenames(array(	'body' => 'posting_body.html'));make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"));// Topic reviewif ($mode == 'reply' || $mode == 'quote'){	if (topic_review($topic_id, $forum_id))	{		$template->assign_var('S_DISPLAY_REVIEW', true);	}}page_footer();/*** Show upload popup (progress bar)*/function upload_popup($forum_style = 0){	global $template, $user;	($forum_style) ? $user->setup('posting', $forum_style) : $user->setup('posting');	page_header($user->lang['PROGRESS_BAR'], false);	$template->set_filenames(array(		'popup'	=> 'posting_progress_bar.html')	);	$template->assign_vars(array(		'PROGRESS_BAR'	=> $user->img('upload_bar', $user->lang['UPLOAD_IN_PROGRESS']))	);	$template->display('popup');	garbage_collection();	exit_handler();}/*** Do the various checks required for removing posts as well as removing it*/function handle_post_delete($forum_id, $topic_id, $post_id, &$post_data){	global $user, $db, $auth, $config;	global $phpbb_root_path, $phpEx;	// If moderator removing post or user itself removing post, present a confirmation screen	if ($auth->acl_get('m_delete', $forum_id) || ($post_data['poster_id'] == $user->data['user_id'] && $user->data['is_registered'] && $auth->acl_get('f_delete', $forum_id) && $post_id == $post_data['topic_last_post_id'] && !$post_data['post_edit_locked'] && ($post_data['post_time'] > time() - ($config['delete_time'] * 60) || !$config['delete_time'])))	{		$s_hidden_fields = build_hidden_fields(array(			'p'		=> $post_id,			'f'		=> $forum_id,			'mode'	=> 'delete')		);		if (confirm_box(true))		{			$data = array(				'topic_first_post_id'	=> $post_data['topic_first_post_id'],				'topic_last_post_id'	=> $post_data['topic_last_post_id'],				'topic_replies_real'	=> $post_data['topic_replies_real'],				'topic_approved'		=> $post_data['topic_approved'],				'topic_type'			=> $post_data['topic_type'],				'post_approved'			=> $post_data['post_approved'],				'post_reported'			=> $post_data['post_reported'],				'post_time'				=> $post_data['post_time'],				'poster_id'				=> $post_data['poster_id'],				'post_postcount'		=> $post_data['post_postcount']			);			$next_post_id = delete_post($forum_id, $topic_id, $post_id, $data);			$post_username = ($post_data['poster_id'] == ANONYMOUS && !empty($post_data['post_username'])) ? $post_data['post_username'] : $post_data['username'];			if ($next_post_id === false)			{				add_log('mod', $forum_id, $topic_id, 'LOG_DELETE_TOPIC', $post_data['topic_title'], $post_username);				$meta_info = append_sid("{$phpbb_root_path}viewforum.$phpEx", "f=$forum_id");				$message = $user->lang['POST_DELETED'];			}			else			{				add_log('mod', $forum_id, $topic_id, 'LOG_DELETE_POST', $post_data['post_subject'], $post_username);				$meta_info = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id&amp;p=$next_post_id") . "#p$next_post_id";				$message = $user->lang['POST_DELETED'] . '<br /><br />' . sprintf($user->lang['RETURN_TOPIC'], '<a href="' . $meta_info . '">', '</a>');			}			meta_refresh(3, $meta_info);			$message .= '<br /><br />' . sprintf($user->lang['RETURN_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id) . '">', '</a>');			trigger_error($message);		}		else		{			confirm_box(false, 'DELETE_POST', $s_hidden_fields);		}	}	// If we are here the user is not able to delete - present the correct error message	if ($post_data['poster_id'] != $user->data['user_id'] && $auth->acl_get('f_delete', $forum_id))	{		trigger_error('DELETE_OWN_POSTS');	}	if ($post_data['poster_id'] == $user->data['user_id'] && $auth->acl_get('f_delete', $forum_id) && $post_id != $post_data['topic_last_post_id'])	{		trigger_error('CANNOT_DELETE_REPLIED');	}	trigger_error('USER_CANNOT_DELETE');}?>
<?php/**** acp_bots [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// Bot settings$lang = array_merge($lang, array(	'BOTS'				=> 'Manage bots',	'BOTS_EXPLAIN'		=> 'Bots, spiders or crawlers are automated agents most commonly used by search engines to update their databases. Since they rarely make proper use of sessions they can distort visitor counts, increase load and sometimes fail to index sites correctly. Here you can define a special type of user to overcome these problems.',	'BOT_ACTIVATE'		=> 'Activate',	'BOT_ACTIVE'		=> 'Bot active',	'BOT_ADD'			=> 'Add bot',	'BOT_ADDED'			=> 'New bot successfully added.',	'BOT_AGENT'			=> 'Agent match',	'BOT_AGENT_EXPLAIN'	=> 'A string matching the bots browser agent, partial matches are allowed.',	'BOT_DEACTIVATE'	=> 'Deactivate',	'BOT_DELETED'		=> 'Bot deleted successfully.',	'BOT_EDIT'			=> 'Edit bots',	'BOT_EDIT_EXPLAIN'	=> 'Here you can add or edit an existing bot entry. You may define an agent string and/or one or more IP addresses (or range of addresses) to match. Be careful when defining matching agent strings or addresses. You may also specify a style and language that the bot will view the board using. This may allow you to reduce bandwidth use by setting a simple style for bots. Remember to set appropriate permissions for the special Bot usergroup.',	'BOT_LANG'			=> 'Bot language',	'BOT_LANG_EXPLAIN'	=> 'The language presented to the bot as it browses.',	'BOT_LAST_VISIT'	=> 'Last visit',	'BOT_IP'			=> 'Bot IP address',	'BOT_IP_EXPLAIN'	=> 'Partial matches are allowed, separate addresses with a comma.',	'BOT_NAME'			=> 'Bot name',	'BOT_NAME_EXPLAIN'	=> 'Used only for your own information.',	'BOT_NAME_TAKEN'	=> 'The name is already in use on your board and cant be used for the Bot.',	'BOT_NEVER'			=> 'Never',	'BOT_STYLE'			=> 'Bot style',	'BOT_STYLE_EXPLAIN'	=> 'The style used for the board by the bot.',	'BOT_UPDATED'		=> 'Existing bot updated successfully.',	'ERR_BOT_AGENT_MATCHES_UA'	=> 'The bot agent you supplied is similar to the one you are currently using. Please adjust the agent for this bot.',	'ERR_BOT_NO_IP'				=> 'The IP addresses you supplied were invalid or the hostname could not be resolved.',	'ERR_BOT_NO_MATCHES'		=> 'You must supply at least one of an agent or IP for this bot match.',	'NO_BOT'		=> 'Found no bot with the specified ID.',	'NO_BOT_GROUP'	=> 'Unable to find special bot group.',));?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_words_info{	function module()	{		return array(			'filename'	=> 'acp_words',			'title'		=> 'ACP_WORDS',			'version'	=> '1.0.0',			'modes'		=> array(				'words'		=> array('title' => 'ACP_WORDS', 'auth' => 'acl_a_words', 'cat' => array('ACP_MESSAGES')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** Wave3D CAPTCHA** @author Robert Hetzler* @package VC*/class captcha{	var $width		= 360;	var $height		= 96;	function execute($code, $seed)	{		global $starttime;		// seed the random generator		mt_srand($seed);		// set height and width		$img_x = $this->width;		$img_y = $this->height;		// Generate image		$img	= imagecreatetruecolor($img_x, $img_y);		$x_grid = mt_rand(6, 10);		$y_grid = mt_rand(6, 10);		// Ok, so lets cut to the chase. We could accurately represent this in 3d and		// do all the appropriate linear transforms. my questions is... why bother?		// The computational overhead is unnecessary when you consider the simple fact:		// we're not here to accurately represent a model, but to just show off some random-ish		// polygons		// Conceive of 3 spaces.		// 1) planar-space (discrete "pixel" grid)		// 2) 3-space. (planar-space with z/height aspect)		// 3) image space (pixels on the screen)		// resolution of the planar-space we're embedding the text code in		$plane_x	= 100;		$plane_y	= 30;		$subdivision_factor = 3;		// $box is the 4 points in img_space that correspond to the corners of the plane in 3-space		$box = array(			'upper_left'	=> array(				'x' => mt_rand(5, 15),				'y' => mt_rand(10, 15)			),			'upper_right'	=> array(				'x' => mt_rand($img_x - 35, $img_x - 19),				'y' => mt_rand(10, 17)			),			'lower_left'	=> array(				'x' => mt_rand($img_x - 45, $img_x - 5),				'y' => mt_rand($img_y - 15, $img_y - 0),			),		);		$box['lower_right'] = array(			'x' => $box['lower_left']['x'] + $box['upper_left']['x'] - $box['upper_right']['x'],			'y' => $box['lower_left']['y'] + $box['upper_left']['y'] - $box['upper_right']['y'],		);		// TODO		$background = imagecolorallocate($img, mt_rand(155, 255), mt_rand(155, 255), mt_rand(155, 255));		imagefill($img, 0, 0, $background);		$black = imagecolorallocate($img, 0, 0, 0);		$random = array();		$fontcolors = array();		for ($i = 0; $i < 15; ++$i)		{			$random[$i] = imagecolorallocate($img, mt_rand(120, 255), mt_rand(120, 255), mt_rand(120, 255));		}		$fontcolors[0] = imagecolorallocate($img, mt_rand(0, 120), mt_rand(0, 120), mt_rand(0, 120)); 		$colors = array();		$minr = mt_rand(20, 30);		$ming = mt_rand(20, 30);		$minb = mt_rand(20, 30);		$maxr = mt_rand(150, 230);		$maxg = mt_rand(150, 230);		$maxb = mt_rand(150, 230);		for ($i = -30; $i <= 30; ++$i)		{			$coeff1 = ($i + 12) / 45;			$coeff2 = 1 - $coeff1;			$colors[$i] = imagecolorallocate($img, ($coeff2 * $maxr) + ($coeff1 * $minr), ($coeff2 * $maxg) + ($coeff1 * $ming), ($coeff2 * $maxb) + ($coeff1 * $minb));		}		// $img_buffer is the last row of 3-space positions (converted to img-space), cached		// (using this means we don't need to recalculate all 4 positions for each new polygon,		// merely the newest point that we're adding, which is then cached.		$img_buffer = array(array(), array());		// In image-space, the x- and y-offset necessary to move one unit in the x-direction in planar-space		$dxx = ($box['upper_right']['x'] - $box['upper_left']['x']) / ($subdivision_factor * $plane_x);		$dxy = ($box['upper_right']['y'] - $box['upper_left']['y']) / ($subdivision_factor * $plane_x);		// In image-space, the x- and y-offset necessary to move one unit in the y-direction in planar-space		$dyx = ($box['lower_right']['x'] - $box['upper_left']['x']) / ($subdivision_factor * $plane_y);		$dyy = ($box['lower_right']['y'] - $box['upper_left']['y']) / ($subdivision_factor * $plane_y);		// Initial captcha-letter offset in planar-space		$plane_offset_x = mt_rand(3, 8);		$plane_offset_y = mt_rand( 12, 15);		// character map		$map = $this->captcha_bitmaps();		// matrix		$plane = array();		// for each character, we'll silkscreen it into our boolean pixel plane		for ($c = 0, $code_num = strlen($code); $c < $code_num; ++$c)		{			$letter = $code[$c];			for ($x = $map['width'] - 1; $x >= 0; --$x)			{				for ($y = $map['height'] - 1; $y >= 0; --$y)				{					if ($map['data'][$letter][$y][$x])					{						$plane[$y + $plane_offset_y + (($c & 1) ? 1 : -1)][$x + $plane_offset_x] = true;					}				}			}			$plane_offset_x += 11;		}		// calculate our first buffer, we can't actually draw polys with these yet		// img_pos_prev == screen x,y location to our immediate left.		// img_pos_cur == current screen x,y location		// we calculate screen position of our		// current cell based on the difference from the previous cell		// rather than recalculating from absolute coordinates		// What we cache into the $img_buffer contains the raised text coordinates.		$img_pos_prev	= $img_buffer[0][0] = array($box['upper_left']['x'], $box['upper_left']['y']);		$cur_height		= $prev_height = $this->wave_height(0, 0, $subdivision_factor);		$full_x			= $plane_x * $subdivision_factor;		$full_y			= $plane_y * $subdivision_factor;		for ($x = 1; $x <= $full_x; ++$x)		{			$cur_height		= $this->wave_height($x, 0, $subdivision_factor);			$offset			= $cur_height - $prev_height;			$img_pos_cur	= array($img_pos_prev[0] + $dxx, $img_pos_prev[1] + $dxy + $offset);			$img_buffer[0][$x]	= $img_pos_cur;			$img_pos_prev		= $img_pos_cur;			$prev_height		= $cur_height;		}		for ($y = 1; $y <= $full_y; ++$y)		{			// swap buffers			$buffer_cur		= $y & 1;			$buffer_prev	= 1 - $buffer_cur;			$prev_height	= $this->wave_height(0, $y, $subdivision_factor);			$offset			= $prev_height - $this->wave_height(0, $y - 1, $subdivision_factor);			$img_pos_cur	= array($img_buffer[$buffer_prev][0][0] + $dyx, min($img_buffer[$buffer_prev][0][1] + $dyy + $offset, $img_y - 1));			// make sure we don't try to write off the page			$img_pos_prev	= $img_pos_cur;			$img_buffer[$buffer_cur][0]	= $img_pos_cur;			for ($x = 1; $x <= $full_x; ++$x)			{				$cur_height		= $this->wave_height($x, $y, $subdivision_factor) + $this->grid_height($x, $y, 1, $x_grid, $y_grid);				// height is a z-factor, not a y-factor				$offset			= $cur_height - $prev_height;				$img_pos_cur	= array($img_pos_prev[0] + $dxx, $img_pos_prev[1] + $dxy + $offset);				// height is float, index it to an int, get closest color				$color			= $colors[intval($cur_height)];				$img_pos_prev	= $img_pos_cur;				$prev_height	= $cur_height;				$y_index_old = intval(($y - 1) / $subdivision_factor);				$y_index_new = intval($y / $subdivision_factor);				$x_index_old = intval(($x - 1) / $subdivision_factor);				$x_index_new = intval($x / $subdivision_factor);				if (!empty($plane[$y_index_new][$x_index_new]))				{					$img_pos_cur[1]	+= $this->wave_height($x, $y, $subdivision_factor, 1) - 30 - $cur_height;					$color			= $colors[20];				}				$img_pos_cur[1] = min($img_pos_cur[1], $img_y - 1);				$img_buffer[$buffer_cur][$x] = $img_pos_cur;				// Smooth the edges as much as possible by having not more than one low<->high traingle per square				// Otherwise, just				$diag_down	= (empty($plane[$y_index_old][$x_index_old]) == empty($plane[$y_index_new][$x_index_new]));				$diag_up	= (empty($plane[$y_index_old][$x_index_new]) == empty($plane[$y_index_new][$x_index_old]));				// natural switching				$mode = ($x + $y) & 1;				// override if it requires it				if ($diag_down != $diag_up)				{					$mode = $diag_up;				}				if ($mode)				{					//		+-/			  /					// 1	|/		2	 /|					//		/			/-+					$poly1 = array_merge($img_buffer[$buffer_cur][$x - 1], $img_buffer[$buffer_prev][$x - 1], $img_buffer[$buffer_prev][$x]);					$poly2 = array_merge($img_buffer[$buffer_cur][$x - 1], $img_buffer[$buffer_cur][$x], $img_buffer[$buffer_prev][$x]);				}				else				{					//		\			\-+					// 1	|\		2	 \|					//		+-\			  \					$poly1 = array_merge($img_buffer[$buffer_cur][$x - 1], $img_buffer[$buffer_prev][$x - 1], $img_buffer[$buffer_cur][$x]);					$poly2 = array_merge($img_buffer[$buffer_prev][$x - 1], $img_buffer[$buffer_prev][$x], $img_buffer[$buffer_cur][$x]);				}				imagefilledpolygon($img, $poly1, 3, $color);				imagefilledpolygon($img, $poly2, 3, $color);			}		}		// Output image		header('Content-Type: image/png');		header('Cache-control: no-cache, no-store');		//$mtime = explode(' ', microtime());		//$totaltime = $mtime[0] + $mtime[1] - $starttime;		//echo $totaltime . "<br />\n";		//echo memory_get_usage() - $tmp;		imagepng($img);		imagedestroy($img);	}	function wave_height($x, $y, $factor = 1, $tweak = 0.7)	{		// stretch the wave. TODO: pretty it up		$x = $x/5 + 180;		$y = $y/4;		return ((sin($x / (3 * $factor)) + sin($y / (3 * $factor))) * 10 * $tweak);	}	function grid_height($x, $y, $factor = 1, $x_grid, $y_grid)	{		return ((!($x % ($x_grid * $factor)) || !($y % ($y_grid * $factor))) ? 3 : 0);	}	function captcha_bitmaps()	{		return array(			'width'		=> 9,			'height'	=> 13,			'data'		=> array(				'A' => array(					array(0,0,1,1,1,1,0,0,0),					array(0,1,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,1,1,1,1,1,1,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,0,0),				),				'B' => array(					array(1,1,1,1,1,1,0,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,1,0,0),					array(1,1,1,1,1,1,0,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,1,0,0),					array(1,1,1,1,1,1,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'C' => array(					array(0,0,1,1,1,1,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'D' => array(					array(1,1,1,1,1,1,1,0,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,1,0),					array(1,1,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'E' => array(					array(0,0,1,1,1,1,1,1,1),					array(0,1,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,1,1,1,1,1,1,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(0,1,0,0,0,0,0,0,0),					array(0,0,1,1,1,1,1,1,1),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'F' => array(					array(0,0,1,1,1,1,1,1,0),					array(0,1,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,1,1,1,1,1,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'G' => array(					array(0,0,1,1,1,1,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,1,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'H' => array(					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,1,1,1,1,1,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'I' => array(					array(0,1,1,1,1,1,1,1,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,1,1,1,1,1,1,1,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'J' => array(					array(0,0,0,0,0,0,1,1,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,0,1),					array(0,0,1,0,0,0,0,1,0),					array(0,0,0,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'K' => array(					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,1,0,0,0),					array(1,0,0,0,1,0,0,0,0),					array(1,0,0,1,0,0,0,0,0),					array(1,0,1,0,0,0,0,0,0),					array(1,1,0,0,0,0,0,0,0),					array(1,0,1,0,0,0,0,0,0),					array(1,0,0,1,0,0,0,0,0),					array(1,0,0,0,1,0,0,0,0),					array(1,0,0,0,0,1,0,0,0),					array(1,0,0,0,0,0,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'L' => array(					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(0,1,0,0,0,0,0,0,0),					array(0,0,1,1,1,1,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'M' => array(					array(0,1,0,0,0,0,0,1,0),					array(0,1,1,0,0,0,1,1,0),					array(0,1,0,1,0,1,0,1,0),					array(0,1,0,0,1,0,0,1,0),					array(0,1,0,0,0,0,0,1,0),					array(0,1,0,0,0,0,0,1,0),					array(0,1,0,0,0,0,0,1,0),					array(0,1,0,0,0,0,0,1,0),					array(0,1,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'N' => array(					array(1,0,0,0,0,0,0,0,1),					array(1,1,0,0,0,0,0,0,1),					array(1,0,1,0,0,0,0,0,1),					array(1,0,0,1,0,0,0,0,1),					array(1,0,0,0,1,0,0,0,1),					array(1,0,0,0,0,1,0,0,1),					array(1,0,0,0,0,0,1,0,1),					array(1,0,0,0,0,0,0,1,1),					array(1,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'O' => array(					array(0,0,0,1,1,1,0,0,0),					array(0,0,1,0,0,0,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,0,0,0,1,0,0),					array(0,0,0,1,1,1,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'P' => array(					array(1,1,1,1,1,1,0,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,1,0,0),					array(1,1,1,1,1,1,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'Q' => array(					array(0,0,1,1,1,1,0,0,0),					array(0,1,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,1,0,0,1,0),					array(1,0,0,0,0,1,0,1,0),					array(0,1,0,0,0,0,1,0,0),					array(0,0,1,1,1,1,0,1,0),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'R' => array(					array(1,1,1,1,1,1,0,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,1,0,0),					array(1,1,1,1,1,1,0,0,0),					array(1,0,1,0,0,0,0,0,0),					array(1,0,0,1,0,0,0,0,0),					array(1,0,0,0,1,0,0,0,0),					array(1,0,0,0,0,1,0,0,0),					array(1,0,0,0,0,0,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'S' => array(					array(0,0,1,1,1,1,1,1,1),					array(0,1,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(0,1,0,0,0,0,0,0,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,1,0),					array(1,1,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'T' => array(					array(1,1,1,1,1,1,1,1,1),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'U' => array(					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'V' => array(					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,0,0,0,1,0,0),					array(0,0,0,1,0,1,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'W' => array(					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,1,0,0,0,1),					array(1,0,0,1,0,1,0,0,1),					array(1,0,1,0,0,0,1,0,1),					array(1,1,0,0,0,0,0,1,1),					array(1,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'X' => array(					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,0,0,0,1,0,0),					array(0,0,0,1,0,1,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,1,0,1,0,0,0),					array(0,0,1,0,0,0,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'Y' => array(					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,0,0,0,1,0,0),					array(0,0,0,1,0,1,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'Z' => array(					array(1,1,1,1,1,1,1,1,1),					array(1,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,1,0,0),					array(0,0,0,0,0,1,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,1,0,0,0,0,0),					array(0,0,1,0,0,0,0,0,0),					array(0,1,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,1),					array(1,1,1,1,1,1,1,1,1),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'1' => array(					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,1,1,0,0,0,0),					array(0,0,1,0,1,0,0,0,0),					array(0,1,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,1,1,1,1,1,1,1,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'2' => array(					array(0,0,0,1,1,1,0,0,0),					array(0,0,1,0,0,0,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,1,0,0),					array(0,0,0,0,0,1,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,1,0,0,0,0,0),					array(0,0,1,0,0,0,0,0,0),					array(0,1,1,1,1,1,1,1,1),					array(0,0,0,0,0,0,0,0,0),				),				'3' => array(					array(0,0,0,1,1,1,1,0,0),					array(0,0,1,0,0,0,0,1,0),					array(0,1,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,1,1,0,0),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,0,1),					array(0,0,1,0,0,0,0,1,0),					array(0,0,0,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'4' => array(					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,1,1,0),					array(0,0,0,0,0,1,0,1,0),					array(0,0,0,0,1,0,0,1,0),					array(0,0,0,1,0,0,0,1,0),					array(0,0,1,0,0,0,0,1,0),					array(0,1,1,1,1,1,1,1,1),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'5' => array(					array(1,1,1,1,1,1,1,1,1),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(0,1,0,0,0,0,0,0,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'6' => array(					array(0,0,1,1,1,1,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,1,1,1,1,0,0),					array(1,0,1,0,0,0,0,1,0),					array(1,1,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'7' => array(					array(1,1,1,1,1,1,1,1,1),					array(1,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,1,0,0),					array(0,0,0,0,0,1,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'8' => array(					array(0,0,1,1,1,1,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,1,1,1,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'9' => array(					array(0,0,0,1,1,1,1,0,0),					array(0,0,1,0,0,0,0,1,0),					array(0,1,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,1),					array(0,0,1,1,1,1,1,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,0,1),					array(0,0,1,0,0,0,0,1,0),					array(0,0,0,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),			)		);	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_inactive_info{	function module()	{		return array(			'filename'	=> 'acp_inactive',			'title'		=> 'ACP_INACTIVE_USERS',			'version'	=> '1.0.0',			'modes'		=> array(				'list'		=> array('title' => 'ACP_INACTIVE_USERS', 'auth' => 'acl_a_user', 'cat' => array('ACP_CAT_USERS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);include($phpbb_root_path . 'includes/functions_display.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup('viewforum');display_forums('', $config['load_moderators']);// Set some stats, get posts count from forums data if we... hum... retrieve all forums data$total_posts	= $config['num_posts'];$total_topics	= $config['num_topics'];$total_users	= $config['num_users'];$l_total_user_s = ($total_users == 0) ? 'TOTAL_USERS_ZERO' : 'TOTAL_USERS_OTHER';$l_total_post_s = ($total_posts == 0) ? 'TOTAL_POSTS_ZERO' : 'TOTAL_POSTS_OTHER';$l_total_topic_s = ($total_topics == 0) ? 'TOTAL_TOPICS_ZERO' : 'TOTAL_TOPICS_OTHER';// Grab group details for legend displayif ($auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel')){	$sql = 'SELECT group_id, group_name, group_colour, group_type		FROM ' . GROUPS_TABLE . '		WHERE group_legend = 1		ORDER BY group_name ASC';}else{	$sql = 'SELECT g.group_id, g.group_name, g.group_colour, g.group_type		FROM ' . GROUPS_TABLE . ' g		LEFT JOIN ' . USER_GROUP_TABLE . ' ug			ON (				g.group_id = ug.group_id				AND ug.user_id = ' . $user->data['user_id'] . '				AND ug.user_pending = 0			)		WHERE g.group_legend = 1			AND (g.group_type <> ' . GROUP_HIDDEN . ' OR ug.user_id = ' . $user->data['user_id'] . ')		ORDER BY g.group_name ASC';}$result = $db->sql_query($sql);$legend = array();while ($row = $db->sql_fetchrow($result)){	$colour_text = ($row['group_colour']) ? ' style="color:#' . $row['group_colour'] . '"' : '';	$group_name = ($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name'];	if ($row['group_name'] == 'BOTS' || ($user->data['user_id'] != ANONYMOUS && !$auth->acl_get('u_viewprofile')))	{		$legend[] = '<span' . $colour_text . '>' . $group_name . '</span>';	}	else	{		$legend[] = '<a' . $colour_text . ' href="' . append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=group&amp;g=' . $row['group_id']) . '">' . $group_name . '</a>';	}}$db->sql_freeresult($result);$legend = implode(', ', $legend);// Generate birthday list if required ...$birthday_list = '';if ($config['load_birthdays'] && $config['allow_birthdays'] && $auth->acl_gets('u_viewprofile', 'a_user', 'a_useradd', 'a_userdel')){	$now = phpbb_gmgetdate(time() + $user->timezone + $user->dst);	// Display birthdays of 29th february on 28th february in non-leap-years	$leap_year_birthdays = '';	if ($now['mday'] == 28 && $now['mon'] == 2 && !$user->format_date(time(), 'L'))	{		$leap_year_birthdays = " OR user_birthday LIKE '" . $db->sql_escape(sprintf('%2d-%2d-', 29, 2)) . "%'";	}	$sql = 'SELECT u.user_id, u.username, u.user_colour, u.user_birthday		FROM ' . USERS_TABLE . ' u		LEFT JOIN ' . BANLIST_TABLE . " b ON (u.user_id = b.ban_userid)		WHERE (b.ban_id IS NULL			OR b.ban_exclude = 1)			AND (u.user_birthday LIKE '" . $db->sql_escape(sprintf('%2d-%2d-', $now['mday'], $now['mon'])) . "%' $leap_year_birthdays)			AND u.user_type IN (" . USER_NORMAL . ', ' . USER_FOUNDER . ')';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$birthday_list .= (($birthday_list != '') ? ', ' : '') . get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']);		if ($age = (int) substr($row['user_birthday'], -4))		{			$birthday_list .= ' (' . max(0, $now['year'] - $age) . ')';		}	}	$db->sql_freeresult($result);}// Assign index specific vars$template->assign_vars(array(	'TOTAL_POSTS'	=> sprintf($user->lang[$l_total_post_s], $total_posts),	'TOTAL_TOPICS'	=> sprintf($user->lang[$l_total_topic_s], $total_topics),	'TOTAL_USERS'	=> sprintf($user->lang[$l_total_user_s], $total_users),	'NEWEST_USER'	=> sprintf($user->lang['NEWEST_USER'], get_username_string('full', $config['newest_user_id'], $config['newest_username'], $config['newest_user_colour'])),	'LEGEND'		=> $legend,	'BIRTHDAY_LIST'	=> $birthday_list,	'FORUM_IMG'				=> $user->img('forum_read', 'NO_UNREAD_POSTS'),	'FORUM_UNREAD_IMG'			=> $user->img('forum_unread', 'UNREAD_POSTS'),	'FORUM_LOCKED_IMG'		=> $user->img('forum_read_locked', 'NO_UNREAD_POSTS_LOCKED'),	'FORUM_UNREAD_LOCKED_IMG'	=> $user->img('forum_unread_locked', 'UNREAD_POSTS_LOCKED'),	'S_LOGIN_ACTION'			=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=login'),	'S_DISPLAY_BIRTHDAY_LIST'	=> ($config['load_birthdays']) ? true : false,	'U_MARK_FORUMS'		=> ($user->data['is_registered'] || $config['load_anon_lastread']) ? append_sid("{$phpbb_root_path}index.$phpEx", 'hash=' . generate_link_hash('global') . '&amp;mark=forums') : '',	'U_MCP'				=> ($auth->acl_get('m_') || $auth->acl_getf_global('m_')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main&amp;mode=front', true, $user->session_id) : ''));// Output pagepage_header($user->lang['INDEX']);$template->set_filenames(array(	'body' => 'index_body.html'));page_footer();?>
<?php return array(''=>'ss',''=>'i',''=>'n',''=>'j',''=>'',''=>'',''=>'',''=>'h',''=>'t',''=>'w',''=>'y',''=>'a',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'ff',''=>'fi',''=>'fl',''=>'ffi',''=>'ffl',''=>'st',''=>'st',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** @package install* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**/if (!defined('IN_PHPBB')){	exit;}/*** Helper functions for phpBB 2.0.x to phpBB 3.0.x conversion*//*** Set forum flags - only prune old polls by default*/function phpbb_forum_flags(){	// Set forum flags	$forum_flags = 0;	// FORUM_FLAG_LINK_TRACK	$forum_flags += 0;	// FORUM_FLAG_PRUNE_POLL	$forum_flags += FORUM_FLAG_PRUNE_POLL;	// FORUM_FLAG_PRUNE_ANNOUNCE	$forum_flags += 0;	// FORUM_FLAG_PRUNE_STICKY	$forum_flags += 0;	// FORUM_FLAG_ACTIVE_TOPICS	$forum_flags += 0;	// FORUM_FLAG_POST_REVIEW	$forum_flags += FORUM_FLAG_POST_REVIEW;	return $forum_flags;}/*** Insert/Convert forums*/function phpbb_insert_forums(){	global $db, $src_db, $same_db, $convert, $user, $config;	$db->sql_query($convert->truncate_statement . FORUMS_TABLE);	// Determine the highest id used within the old forums table (we add the categories after the forum ids)	$sql = 'SELECT MAX(forum_id) AS max_forum_id		FROM ' . $convert->src_table_prefix . 'forums';	$result = $src_db->sql_query($sql);	$max_forum_id = (int) $src_db->sql_fetchfield('max_forum_id');	$src_db->sql_freeresult($result);	$max_forum_id++;	// pruning disabled globally?	$sql = "SELECT config_value		FROM {$convert->src_table_prefix}config		WHERE config_name = 'prune_enable'";	$result = $src_db->sql_query($sql);	$prune_enabled = (int) $src_db->sql_fetchfield('config_value');	$src_db->sql_freeresult($result);	// Insert categories	$sql = 'SELECT cat_id, cat_title		FROM ' . $convert->src_table_prefix . 'categories		ORDER BY cat_order';	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'binary'");	}	$result = $src_db->sql_query($sql);	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'utf8'");	}	switch ($db->sql_layer)	{		case 'mssql':		case 'mssql_odbc':		case 'mssqlnative':			$db->sql_query('SET IDENTITY_INSERT ' . FORUMS_TABLE . ' ON');		break;	}	$cats_added = array();	while ($row = $src_db->sql_fetchrow($result))	{		$sql_ary = array(			'forum_id'		=> (int) $max_forum_id,			'forum_name'	=> ($row['cat_title']) ? htmlspecialchars(phpbb_set_default_encoding($row['cat_title']), ENT_COMPAT, 'UTF-8') : $user->lang['CATEGORY'],			'parent_id'		=> 0,			'forum_parents'	=> '',			'forum_desc'	=> '',			'forum_type'	=> FORUM_CAT,			'forum_status'	=> ITEM_UNLOCKED,			'forum_rules'	=> '',		);		$sql = 'SELECT MAX(right_id) AS right_id			FROM ' . FORUMS_TABLE;		$_result = $db->sql_query($sql);		$cat_row = $db->sql_fetchrow($_result);		$db->sql_freeresult($_result);		$sql_ary['left_id'] = (int) ($cat_row['right_id'] + 1);		$sql_ary['right_id'] = (int) ($cat_row['right_id'] + 2);		$sql = 'INSERT INTO ' . FORUMS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);		$db->sql_query($sql);		$cats_added[$row['cat_id']] = $max_forum_id;		$max_forum_id++;	}	$src_db->sql_freeresult($result);	// There may be installations having forums with non-existant category ids.	// We try to catch them and add them to an "unknown" category instead of leaving them out.	$sql = 'SELECT cat_id		FROM ' . $convert->src_table_prefix . 'forums		GROUP BY cat_id';	$result = $src_db->sql_query($sql);	$unknown_cat_id = false;	while ($row = $src_db->sql_fetchrow($result))	{		// Catch those categories not been added before		if (!isset($cats_added[$row['cat_id']]))		{			$unknown_cat_id = true;		}	}	$src_db->sql_freeresult($result);	// Is there at least one category not known?	if ($unknown_cat_id === true)	{		$unknown_cat_id = 'ghost';		$sql_ary = array(			'forum_id'		=> (int) $max_forum_id,			'forum_name'	=> (string) $user->lang['CATEGORY'],			'parent_id'		=> 0,			'forum_parents'	=> '',			'forum_desc'	=> '',			'forum_type'	=> FORUM_CAT,			'forum_status'	=> ITEM_UNLOCKED,			'forum_rules'	=> '',		);		$sql = 'SELECT MAX(right_id) AS right_id			FROM ' . FORUMS_TABLE;		$_result = $db->sql_query($sql);		$cat_row = $db->sql_fetchrow($_result);		$db->sql_freeresult($_result);		$sql_ary['left_id'] = (int) ($cat_row['right_id'] + 1);		$sql_ary['right_id'] = (int) ($cat_row['right_id'] + 2);		$sql = 'INSERT INTO ' . FORUMS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);		$db->sql_query($sql);		$cats_added[$unknown_cat_id] = $max_forum_id;		$max_forum_id++;	}	// Now insert the forums	$sql = 'SELECT f.forum_id, f.forum_name, f.cat_id, f.forum_desc, f.forum_status, f.prune_enable, f.prune_next, fp.prune_days, fp.prune_freq FROM ' . $convert->src_table_prefix . 'forums f		LEFT JOIN ' . $convert->src_table_prefix . 'forum_prune fp ON f.forum_id = fp.forum_id		GROUP BY f.forum_id, f.forum_name, f.cat_id, f.forum_desc, f.forum_status, f.prune_enable, f.prune_next, f.forum_order, fp.prune_days, fp.prune_freq		ORDER BY f.cat_id, f.forum_order';	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'binary'");	}	$result = $src_db->sql_query($sql);	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'utf8'");	}	while ($row = $src_db->sql_fetchrow($result))	{		// Some might have forums here with an id not being "possible"...		// To be somewhat friendly we "change" the category id for those to a previously created ghost category		if (!isset($cats_added[$row['cat_id']]) && $unknown_cat_id !== false)		{			$row['cat_id'] = $unknown_cat_id;		}		if (!isset($cats_added[$row['cat_id']]))		{			continue;		}		// Define the new forums sql ary		$sql_ary = array(			'forum_id'			=> (int) $row['forum_id'],			'forum_name'		=> htmlspecialchars(phpbb_set_default_encoding($row['forum_name']), ENT_COMPAT, 'UTF-8'),			'parent_id'			=> (int) $cats_added[$row['cat_id']],			'forum_parents'		=> '',			'forum_desc'		=> htmlspecialchars(phpbb_set_default_encoding($row['forum_desc']), ENT_COMPAT, 'UTF-8'),			'forum_type'		=> FORUM_POST,			'forum_status'		=> is_item_locked($row['forum_status']),			'enable_prune'		=> ($prune_enabled) ? (int)$row['prune_enable'] : 0,			'prune_next'		=> (int) null_to_zero($row['prune_next']),			'prune_days'		=> (int) null_to_zero($row['prune_days']),			'prune_viewed'		=> 0,			'prune_freq'		=> (int) null_to_zero($row['prune_freq']),			'forum_flags'		=> phpbb_forum_flags(),			'forum_options'		=> 0,			// Default values			'forum_desc_bitfield'		=> '',			'forum_desc_options'		=> 7,			'forum_desc_uid'			=> '',			'forum_link'				=> '',			'forum_password'			=> '',			'forum_style'				=> 0,			'forum_image'				=> '',			'forum_rules'				=> '',			'forum_rules_link'			=> '',			'forum_rules_bitfield'		=> '',			'forum_rules_options'		=> 7,			'forum_rules_uid'			=> '',			'forum_topics_per_page'		=> 0,			'forum_posts'				=> 0,			'forum_topics'				=> 0,			'forum_topics_real'			=> 0,			'forum_last_post_id'		=> 0,			'forum_last_poster_id'		=> 0,			'forum_last_post_subject'	=> '',			'forum_last_post_time'		=> 0,			'forum_last_poster_name'	=> '',			'forum_last_poster_colour'	=> '',			'display_on_index'			=> 1,			'enable_indexing'			=> 1,			'enable_icons'				=> 0,		);		// Now add the forums with proper left/right ids		$sql = 'SELECT left_id, right_id			FROM ' . FORUMS_TABLE . '			WHERE forum_id = ' . $cats_added[$row['cat_id']];		$_result = $db->sql_query($sql);		$cat_row = $db->sql_fetchrow($_result);		$db->sql_freeresult($_result);		$sql = 'UPDATE ' . FORUMS_TABLE . '			SET left_id = left_id + 2, right_id = right_id + 2			WHERE left_id > ' . $cat_row['right_id'];		$db->sql_query($sql);		$sql = 'UPDATE ' . FORUMS_TABLE . '			SET right_id = right_id + 2			WHERE ' . $cat_row['left_id'] . ' BETWEEN left_id AND right_id';		$db->sql_query($sql);		$sql_ary['left_id'] = (int) $cat_row['right_id'];		$sql_ary['right_id'] = (int) ($cat_row['right_id'] + 1);		$sql = 'INSERT INTO ' . FORUMS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);		$db->sql_query($sql);	}	$src_db->sql_freeresult($result);	switch ($db->sql_layer)	{		case 'postgres':			$db->sql_query("SELECT SETVAL('" . FORUMS_TABLE . "_seq',(select case when max(forum_id)>0 then max(forum_id)+1 else 1 end from " . FORUMS_TABLE . '));');		break;		case 'mssql':		case 'mssql_odbc':		case 'mssqlnative':			$db->sql_query('SET IDENTITY_INSERT ' . FORUMS_TABLE . ' OFF');		break;		case 'oracle':			$result = $db->sql_query('SELECT MAX(forum_id) as max_id FROM ' . FORUMS_TABLE);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			$largest_id = (int) $row['max_id'];			if ($largest_id)			{				$db->sql_query('DROP SEQUENCE ' . FORUMS_TABLE . '_seq');				$db->sql_query('CREATE SEQUENCE ' . FORUMS_TABLE . '_seq START WITH ' . ($largest_id + 1));			}		break;	}}/*** Function for recoding text with the default language** @param string $text text to recode to utf8* @param bool $grab_user_lang if set to true the function tries to use $convert_row['user_lang'] (and falls back to $convert_row['poster_id']) instead of the boards default language*/function phpbb_set_encoding($text, $grab_user_lang = true){	global $lang_enc_array, $convert_row;	global $convert, $phpEx;	/*static $lang_enc_array = array(		'korean'						=> 'euc-kr',		'serbian'						=> 'windows-1250',		'polish'						=> 'iso-8859-2',		'kurdish'						=> 'windows-1254',		'slovak'						=> 'Windows-1250',		'russian'						=> 'windows-1251',		'estonian'						=> 'iso-8859-4',		'chinese_simplified'			=> 'gb2312',		'macedonian'					=> 'windows-1251',		'azerbaijani'					=> 'UTF-8',		'romanian'						=> 'iso-8859-2',		'romanian_diacritice'			=> 'iso-8859-2',		'lithuanian'					=> 'windows-1257',		'turkish'						=> 'iso-8859-9',		'ukrainian'						=> 'windows-1251',		'japanese'						=> 'shift_jis',		'hungarian'						=> 'ISO-8859-2',		'romanian_no_diacritics'		=> 'iso-8859-2',		'mongolian'						=> 'UTF-8',		'slovenian'						=> 'windows-1250',		'bosnian'						=> 'windows-1250',		'czech'							=> 'Windows-1250',		'farsi'							=> 'Windows-1256',		'croatian'						=> 'windows-1250',		'greek'							=> 'iso-8859-7',		'russian_tu'					=> 'windows-1251',		'sakha'							=> 'UTF-8',		'serbian_cyrillic'				=> 'windows-1251',		'bulgarian'						=> 'windows-1251',		'chinese_traditional_taiwan'	=> 'big5',		'chinese_traditional'			=> 'big5',		'arabic'						=> 'windows-1256',		'hebrew'						=> 'WINDOWS-1255',		'thai'							=> 'windows-874',		//'chinese_traditional_taiwan'	=> 'utf-8' // custom modified, we may have to do an include :-(	);*/	if (empty($lang_enc_array))	{		$lang_enc_array = array();	}	$get_lang = trim(get_config_value('default_lang'));	// Do we need the users language encoding?	if ($grab_user_lang && !empty($convert_row))	{		if (!empty($convert_row['user_lang']))		{			$get_lang = trim($convert_row['user_lang']);		}		else if (!empty($convert_row['poster_id']))		{			global $src_db, $same_db;			if ($convert->mysql_convert && $same_db)			{				$src_db->sql_query("SET NAMES 'binary'");			}			$sql = 'SELECT user_lang				FROM ' . $convert->src_table_prefix . 'users				WHERE user_id = ' . (int) $convert_row['poster_id'];			$result = $src_db->sql_query($sql);			$get_lang = (string) $src_db->sql_fetchfield('user_lang');			$src_db->sql_freeresult($result);			if ($convert->mysql_convert && $same_db)			{				$src_db->sql_query("SET NAMES 'utf8'");			}			$get_lang = (!trim($get_lang)) ? trim(get_config_value('default_lang')) : trim($get_lang);		}	}	if (!isset($lang_enc_array[$get_lang]))	{		$filename = $convert->options['forum_path'] . '/language/lang_' . $get_lang . '/lang_main.' . $phpEx;		if (!file_exists($filename))		{			$get_lang = trim(get_config_value('default_lang'));		}		if (!isset($lang_enc_array[$get_lang]))		{			include($convert->options['forum_path'] . '/language/lang_' . $get_lang . '/lang_main.' . $phpEx);			$lang_enc_array[$get_lang] = $lang['ENCODING'];			unset($lang);		}	}	$encoding = $lang_enc_array[$get_lang];	return utf8_recode($text, $lang_enc_array[$get_lang]);}/*** Same as phpbb_set_encoding, but forcing boards default language*/function phpbb_set_default_encoding($text){	return phpbb_set_encoding($text, false);}/*** Convert Birthday from Birthday MOD to phpBB Format*/function phpbb_get_birthday($birthday = ''){	if (defined('MOD_BIRTHDAY_TERRA'))	{		$birthday = (string) $birthday;		// stored as month, day, year		if (!$birthday)		{			return ' 0- 0-   0';		}		// We use the original mod code to retrieve the birthday (not ideal)		preg_match('/(..)(..)(....)/', sprintf('%08d', $birthday), $birthday_parts);		$month = $birthday_parts[1];		$day = $birthday_parts[2];		$year =  $birthday_parts[3];		return sprintf('%2d-%2d-%4d', $day, $month, $year);	}	else	{		$birthday = (int) $birthday;		if (!$birthday || $birthday == 999999 || ((version_compare(PHP_VERSION, '5.1.0') < 0) && $birthday < 0))		{			return ' 0- 0-   0';		}		// The birthday mod from niels is using this code to transform to day/month/year		return sprintf('%2d-%2d-%4d', gmdate('j', $birthday * 86400 + 1), gmdate('n', $birthday * 86400 + 1), gmdate('Y', $birthday * 86400 + 1));	}}/*** Return correct user id value* Everyone's id will be one higher to allow the guest/anonymous user to have a positive id as well*/function phpbb_user_id($user_id){	global $config;	// Increment user id if the old forum is having a user with the id 1	if (!isset($config['increment_user_id']))	{		global $src_db, $same_db, $convert;		if ($convert->mysql_convert && $same_db)		{			$src_db->sql_query("SET NAMES 'binary'");		}		// Now let us set a temporary config variable for user id incrementing		$sql = "SELECT user_id			FROM {$convert->src_table_prefix}users			WHERE user_id = 1";		$result = $src_db->sql_query($sql);		$id = (int) $src_db->sql_fetchfield('user_id');		$src_db->sql_freeresult($result);		// Try to get the maximum user id possible...		$sql = "SELECT MAX(user_id) AS max_user_id			FROM {$convert->src_table_prefix}users";		$result = $src_db->sql_query($sql);		$max_id = (int) $src_db->sql_fetchfield('max_user_id');		$src_db->sql_freeresult($result);		if ($convert->mysql_convert && $same_db)		{			$src_db->sql_query("SET NAMES 'utf8'");		}		// If there is a user id 1, we need to increment user ids. :/		if ($id === 1)		{			set_config('increment_user_id', ($max_id + 1), true);			$config['increment_user_id'] = $max_id + 1;		}		else		{			set_config('increment_user_id', 0, true);			$config['increment_user_id'] = 0;		}	}	// If the old user id is -1 in 2.0.x it is the anonymous user...	if ($user_id == -1)	{		return ANONYMOUS;	}	if (!empty($config['increment_user_id']) && $user_id == 1)	{		return $config['increment_user_id'];	}	// A user id of 0 can happen, for example within the ban table if no user is banned...	// Within the posts and topics table this can be "dangerous" but is the fault of the user	// having mods installed (a poster id of 0 is not possible in 2.0.x).	// Therefore, we return the user id "as is".	return (int) $user_id;}/* Copy additional table fields from old forum to new forum if user wants this (for Mod compatibility for example)function phpbb_copy_table_fields(){}*//*** Convert authentication* user, group and forum table has to be filled in order to work*/function phpbb_convert_authentication($mode){	global $db, $src_db, $same_db, $convert, $user, $config, $cache;	if ($mode == 'start')	{		$db->sql_query($convert->truncate_statement . ACL_USERS_TABLE);		$db->sql_query($convert->truncate_statement . ACL_GROUPS_TABLE);		// What we will do is handling all 2.0.x admins as founder to replicate what is common in 2.0.x.		// After conversion the main admin need to make sure he is removing permissions and the founder status if wanted.		// Grab user ids of users with user_level of ADMIN		$sql = "SELECT user_id			FROM {$convert->src_table_prefix}users			WHERE user_level = 1			ORDER BY user_regdate ASC";		$result = $src_db->sql_query($sql);		while ($row = $src_db->sql_fetchrow($result))		{			$user_id = (int) phpbb_user_id($row['user_id']);			// Set founder admin...			$sql = 'UPDATE ' . USERS_TABLE . '				SET user_type = ' . USER_FOUNDER . "				WHERE user_id = $user_id";			$db->sql_query($sql);		}		$src_db->sql_freeresult($result);		$sql = 'SELECT group_id			FROM ' . GROUPS_TABLE . "			WHERE group_name = '" . $db->sql_escape('BOTS') . "'";		$result = $db->sql_query($sql);		$bot_group_id = (int) $db->sql_fetchfield('group_id');		$db->sql_freeresult($result);	}	// Grab forum auth information	$sql = "SELECT *		FROM {$convert->src_table_prefix}forums";	$result = $src_db->sql_query($sql);	$forum_access = array();	while ($row = $src_db->sql_fetchrow($result))	{		$forum_access[$row['forum_id']] = $row;	}	$src_db->sql_freeresult($result);	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'binary'");	}	// Grab user auth information from 2.0.x board	$sql = "SELECT ug.user_id, aa.*		FROM {$convert->src_table_prefix}auth_access aa, {$convert->src_table_prefix}user_group ug, {$convert->src_table_prefix}groups g, {$convert->src_table_prefix}forums f		WHERE g.group_id = aa.group_id			AND g.group_single_user = 1			AND ug.group_id = g.group_id			AND f.forum_id = aa.forum_id";	$result = $src_db->sql_query($sql);	$user_access = array();	while ($row = $src_db->sql_fetchrow($result))	{		$user_access[$row['forum_id']][] = $row;	}	$src_db->sql_freeresult($result);	// Grab group auth information	$sql = "SELECT g.group_id, aa.*		FROM {$convert->src_table_prefix}auth_access aa, {$convert->src_table_prefix}groups g		WHERE g.group_id = aa.group_id			AND g.group_single_user <> 1";	$result = $src_db->sql_query($sql);	$group_access = array();	while ($row = $src_db->sql_fetchrow($result))	{		$group_access[$row['forum_id']][] = $row;	}	$src_db->sql_freeresult($result);	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'utf8'");	}	// Add Forum Access List	$auth_map = array(		'auth_view'			=> array('f_', 'f_list'),		'auth_read'			=> array('f_read', 'f_search'),		'auth_post'			=> array('f_post', 'f_bbcode', 'f_smilies', 'f_img', 'f_sigs', 'f_postcount', 'f_report', 'f_subscribe', 'f_print', 'f_email'),		'auth_reply'		=> 'f_reply',		'auth_edit'			=> 'f_edit',		'auth_delete'		=> 'f_delete',		'auth_pollcreate'	=> 'f_poll',		'auth_vote'			=> 'f_vote',		'auth_announce'		=> 'f_announce',		'auth_sticky'		=> 'f_sticky',		'auth_attachments'	=> array('f_attach', 'f_download'),		'auth_download'		=> 'f_download',	);	// Define the ACL constants used in 2.0 to make the code slightly more readable	define('AUTH_ALL', 0);	define('AUTH_REG', 1);	define('AUTH_ACL', 2);	define('AUTH_MOD', 3);	define('AUTH_ADMIN', 5);	// A mapping of the simple permissions used by 2.0	$simple_auth_ary = array(		'public'			=> array(			'auth_view'			=> AUTH_ALL,			'auth_read'			=> AUTH_ALL,			'auth_post'			=> AUTH_ALL,			'auth_reply'		=> AUTH_ALL,			'auth_edit'			=> AUTH_REG,			'auth_delete'		=> AUTH_REG,			'auth_sticky'		=> AUTH_MOD,			'auth_announce'		=> AUTH_MOD,			'auth_vote'			=> AUTH_REG,			'auth_pollcreate'	=> AUTH_REG,		),		'registered'		=> array(			'auth_view'			=> AUTH_ALL,			'auth_read'			=> AUTH_ALL,			'auth_post'			=> AUTH_REG,			'auth_reply'		=> AUTH_REG,			'auth_edit'			=> AUTH_REG,			'auth_delete'		=> AUTH_REG,			'auth_sticky'		=> AUTH_MOD,			'auth_announce'		=> AUTH_MOD,			'auth_vote'			=> AUTH_REG,			'auth_pollcreate'	=> AUTH_REG,		),		'registered_hidden'	=> array(			'auth_view'			=> AUTH_REG,			'auth_read'			=> AUTH_REG,			'auth_post'			=> AUTH_REG,			'auth_reply'		=> AUTH_REG,			'auth_edit'			=> AUTH_REG,			'auth_delete'		=> AUTH_REG,			'auth_sticky'		=> AUTH_MOD,			'auth_announce'		=> AUTH_MOD,			'auth_vote'			=> AUTH_REG,			'auth_pollcreate'	=> AUTH_REG,		),		'private'			=> array(			'auth_view'			=> AUTH_ALL,			'auth_read'			=> AUTH_ACL,			'auth_post'			=> AUTH_ACL,			'auth_reply'		=> AUTH_ACL,			'auth_edit'			=> AUTH_ACL,			'auth_delete'		=> AUTH_ACL,			'auth_sticky'		=> AUTH_ACL,			'auth_announce'		=> AUTH_MOD,			'auth_vote'			=> AUTH_ACL,			'auth_pollcreate'	=> AUTH_ACL,		),		'private_hidden'	=> array(			'auth_view'			=> AUTH_ACL,			'auth_read'			=> AUTH_ACL,			'auth_post'			=> AUTH_ACL,			'auth_reply'		=> AUTH_ACL,			'auth_edit'			=> AUTH_ACL,			'auth_delete'		=> AUTH_ACL,			'auth_sticky'		=> AUTH_ACL,			'auth_announce'		=> AUTH_MOD,			'auth_vote'			=> AUTH_ACL,			'auth_pollcreate'	=> AUTH_ACL,		),		'moderator'			=> array(			'auth_view'			=> AUTH_ALL,			'auth_read'			=> AUTH_MOD,			'auth_post'			=> AUTH_MOD,			'auth_reply'		=> AUTH_MOD,			'auth_edit'			=> AUTH_MOD,			'auth_delete'		=> AUTH_MOD,			'auth_sticky'		=> AUTH_MOD,			'auth_announce'		=> AUTH_MOD,			'auth_vote'			=> AUTH_MOD,			'auth_pollcreate'	=> AUTH_MOD,		),		'moderator_hidden'	=> array(			'auth_view'			=> AUTH_MOD,			'auth_read'			=> AUTH_MOD,			'auth_post'			=> AUTH_MOD,			'auth_reply'		=> AUTH_MOD,			'auth_edit'			=> AUTH_MOD,			'auth_delete'		=> AUTH_MOD,			'auth_sticky'		=> AUTH_MOD,			'auth_announce'		=> AUTH_MOD,			'auth_vote'			=> AUTH_MOD,			'auth_pollcreate'	=> AUTH_MOD,		),	);	if ($mode == 'start')	{		user_group_auth('guests', 'SELECT user_id, {GUESTS} FROM ' . USERS_TABLE . ' WHERE user_id = ' . ANONYMOUS, false);		user_group_auth('registered', 'SELECT user_id, {REGISTERED} FROM ' . USERS_TABLE . ' WHERE user_id <> ' . ANONYMOUS . " AND group_id <> $bot_group_id", false);		// Selecting from old table		if (!empty($config['increment_user_id']))		{			$auth_sql = 'SELECT user_id, {ADMINISTRATORS} FROM ' . $convert->src_table_prefix . 'users WHERE user_level = 1 AND user_id <> 1';			user_group_auth('administrators', $auth_sql, true);			$auth_sql = 'SELECT ' . $config['increment_user_id'] . ' as user_id, {ADMINISTRATORS} FROM ' . $convert->src_table_prefix . 'users WHERE user_level = 1 AND user_id = 1';			user_group_auth('administrators', $auth_sql, true);		}		else		{			$auth_sql = 'SELECT user_id, {ADMINISTRATORS} FROM ' . $convert->src_table_prefix . 'users WHERE user_level = 1';			user_group_auth('administrators', $auth_sql, true);		}		if (!empty($config['increment_user_id']))		{			$auth_sql = 'SELECT user_id, {GLOBAL_MODERATORS} FROM ' . $convert->src_table_prefix . 'users WHERE user_level = 1 AND user_id <> 1';			user_group_auth('global_moderators', $auth_sql, true);			$auth_sql = 'SELECT ' . $config['increment_user_id'] . ' as user_id, {GLOBAL_MODERATORS} FROM ' . $convert->src_table_prefix . 'users WHERE user_level = 1 AND user_id = 1';			user_group_auth('global_moderators', $auth_sql, true);		}		else		{			$auth_sql = 'SELECT user_id, {GLOBAL_MODERATORS} FROM ' . $convert->src_table_prefix . 'users WHERE user_level = 1';			user_group_auth('global_moderators', $auth_sql, true);		}	}	else if ($mode == 'first')	{		// Go through all 2.0.x forums		foreach ($forum_access as $forum)		{			$new_forum_id = (int) $forum['forum_id'];			// Administrators have full access to all forums whatever happens			mass_auth('group_role', $new_forum_id, 'administrators', 'FORUM_FULL');			$matched_type = '';			foreach ($simple_auth_ary as $key => $auth_levels)			{				$matched = 1;				foreach ($auth_levels as $k => $level)				{					if ($forum[$k] != $auth_levels[$k])					{						$matched = 0;					}				}				if ($matched)				{					$matched_type = $key;					break;				}			}			switch ($matched_type)			{				case 'public':					mass_auth('group_role', $new_forum_id, 'guests', 'FORUM_LIMITED');					mass_auth('group_role', $new_forum_id, 'registered', 'FORUM_LIMITED_POLLS');					mass_auth('group_role', $new_forum_id, 'bots', 'FORUM_BOT');				break;				case 'registered':					mass_auth('group_role', $new_forum_id, 'guests', 'FORUM_READONLY');					mass_auth('group_role', $new_forum_id, 'bots', 'FORUM_BOT');				// no break;				case 'registered_hidden':					mass_auth('group_role', $new_forum_id, 'registered', 'FORUM_POLLS');				break;				case 'private':				case 'private_hidden':				case 'moderator':				case 'moderator_hidden':				default:					// The permissions don't match a simple set, so we're going to have to map them directly					// No post approval for all, in 2.0.x this feature does not exist					mass_auth('group', $new_forum_id, 'guests', 'f_noapprove', ACL_YES);					mass_auth('group', $new_forum_id, 'registered', 'f_noapprove', ACL_YES);					// Go through authentication map					foreach ($auth_map as $old_auth_key => $new_acl)					{						// If old authentication key does not exist we continue						// This is helpful for mods adding additional authentication fields, we need to add them to the auth_map array						if (!isset($forum[$old_auth_key]))						{							continue;						}						// Now set the new ACL correctly						switch ($forum[$old_auth_key])						{							// AUTH_ALL							case AUTH_ALL:								mass_auth('group', $new_forum_id, 'guests', $new_acl, ACL_YES);								mass_auth('group', $new_forum_id, 'bots', $new_acl, ACL_YES);								mass_auth('group', $new_forum_id, 'registered', $new_acl, ACL_YES);							break;							// AUTH_REG							case AUTH_REG:								mass_auth('group', $new_forum_id, 'registered', $new_acl, ACL_YES);							break;							// AUTH_ACL							case AUTH_ACL:								// Go through the old group access list for this forum								if (isset($group_access[$forum['forum_id']]))								{									foreach ($group_access[$forum['forum_id']] as $index => $access)									{										// We only check for ACL_YES equivalence entry										if (isset($access[$old_auth_key]) && $access[$old_auth_key] == 1)										{											mass_auth('group', $new_forum_id, (int) $access['group_id'], $new_acl, ACL_YES);										}									}								}								if (isset($user_access[$forum['forum_id']]))								{									foreach ($user_access[$forum['forum_id']] as $index => $access)									{										// We only check for ACL_YES equivalence entry										if (isset($access[$old_auth_key]) && $access[$old_auth_key] == 1)										{											mass_auth('user', $new_forum_id, (int) phpbb_user_id($access['user_id']), $new_acl, ACL_YES);										}									}								}							break;							// AUTH_MOD							case AUTH_MOD:								if (isset($group_access[$forum['forum_id']]))								{									foreach ($group_access[$forum['forum_id']] as $index => $access)									{										// We only check for ACL_YES equivalence entry										if (isset($access[$old_auth_key]) && $access[$old_auth_key] == 1)										{											mass_auth('group', $new_forum_id, (int) $access['group_id'], $new_acl, ACL_YES);										}									}								}								if (isset($user_access[$forum['forum_id']]))								{									foreach ($user_access[$forum['forum_id']] as $index => $access)									{										// We only check for ACL_YES equivalence entry										if (isset($access[$old_auth_key]) && $access[$old_auth_key] == 1)										{											mass_auth('user', $new_forum_id, (int) phpbb_user_id($access['user_id']), $new_acl, ACL_YES);										}									}								}							break;						}					}				break;			}		}	}	else if ($mode == 'second')	{		// Assign permission roles and other default permissions		// guests having u_download and u_search ability		$db->sql_query('INSERT INTO ' . ACL_GROUPS_TABLE . ' (group_id, forum_id, auth_option_id, auth_role_id, auth_setting) SELECT ' . get_group_id('guests') . ', 0, auth_option_id, 0, 1 FROM ' . ACL_OPTIONS_TABLE . " WHERE auth_option IN ('u_', 'u_download', 'u_search')");		// administrators/global mods having full user features		mass_auth('group_role', 0, 'administrators', 'USER_FULL');		mass_auth('group_role', 0, 'global_moderators', 'USER_FULL');		// By default all converted administrators are given full access		mass_auth('group_role', 0, 'administrators', 'ADMIN_FULL');		// All registered users are assigned the standard user role		mass_auth('group_role', 0, 'registered', 'USER_STANDARD');		mass_auth('group_role', 0, 'registered_coppa', 'USER_STANDARD');		// Instead of administrators being global moderators we give the MOD_FULL role to global mods (admins already assigned to this group)		mass_auth('group_role', 0, 'global_moderators', 'MOD_FULL');		// And now those who have had their avatar rights removed get assigned a more restrictive role		$sql = 'SELECT user_id FROM ' . $convert->src_table_prefix . 'users			WHERE user_allowavatar = 0				AND user_id > 0';		$result = $src_db->sql_query($sql);		while ($row = $src_db->sql_fetchrow($result))		{			mass_auth('user_role', 0, (int) phpbb_user_id($row['user_id']), 'USER_NOAVATAR');		}		$src_db->sql_freeresult($result);		// And the same for those who have had their PM rights removed		$sql = 'SELECT user_id FROM ' . $convert->src_table_prefix . 'users			WHERE user_allow_pm = 0				AND user_id > 0';		$result = $src_db->sql_query($sql);		while ($row = $src_db->sql_fetchrow($result))		{			mass_auth('user_role', 0, (int) phpbb_user_id($row['user_id']), 'USER_NOPM');		}		$src_db->sql_freeresult($result);	}	else if ($mode == 'third')	{		// And now the moderators		// We make sure that they have at least standard access to the forums they moderate in addition to the moderating permissions		$mod_post_map = array(			'auth_announce'		=> 'f_announce',			'auth_sticky'		=> 'f_sticky'		);		foreach ($user_access as $forum_id => $access_map)		{			$forum_id = (int) $forum_id;			foreach ($access_map as $access)			{				if (isset($access['auth_mod']) && $access['auth_mod'] == 1)				{					mass_auth('user_role', $forum_id, (int) phpbb_user_id($access['user_id']), 'MOD_STANDARD');					mass_auth('user_role', $forum_id, (int) phpbb_user_id($access['user_id']), 'FORUM_STANDARD');					foreach ($mod_post_map as $old => $new)					{						if (isset($forum_access[$forum_id]) && isset($forum_access[$forum_id][$old]) && $forum_access[$forum_id][$old] == AUTH_MOD)						{							mass_auth('user', $forum_id, (int) phpbb_user_id($access['user_id']), $new, ACL_YES);						}					}				}			}		}		foreach ($group_access as $forum_id => $access_map)		{			$forum_id = (int) $forum_id;			foreach ($access_map as $access)			{				if (isset($access['auth_mod']) && $access['auth_mod'] == 1)				{					mass_auth('group_role', $forum_id, (int) $access['group_id'], 'MOD_STANDARD');					mass_auth('group_role', $forum_id, (int) $access['group_id'], 'FORUM_STANDARD');					foreach ($mod_post_map as $old => $new)					{						if (isset($forum_access[$forum_id]) && isset($forum_access[$forum_id][$old]) && $forum_access[$forum_id][$old] == AUTH_MOD)						{							mass_auth('group', $forum_id, (int) $access['group_id'], $new, ACL_YES);						}					}				}			}		}		// We grant everyone readonly access to the categories to ensure that the forums are visible		$sql = 'SELECT forum_id, forum_name, parent_id, left_id, right_id			FROM ' . FORUMS_TABLE . '			ORDER BY left_id ASC';		$result = $db->sql_query($sql);		$parent_forums = $forums = array();		while ($row = $db->sql_fetchrow($result))		{			if ($row['parent_id'] == 0)			{				mass_auth('group_role', $row['forum_id'], 'administrators', 'FORUM_FULL');				mass_auth('group_role', $row['forum_id'], 'global_moderators', 'FORUM_FULL');				$parent_forums[] = $row;			}			else			{				$forums[] = $row;			}		}		$db->sql_freeresult($result);		global $auth;		// Let us see which groups have access to these forums...		foreach ($parent_forums as $row)		{			// Get the children			$branch = $forum_ids = array();			foreach ($forums as $key => $_row)			{				if ($_row['left_id'] > $row['left_id'] && $_row['left_id'] < $row['right_id'])				{					$branch[] = $_row;					$forum_ids[] = $_row['forum_id'];					continue;				}			}			if (sizeof($forum_ids))			{				// Now make sure the user is able to read these forums				$hold_ary = $auth->acl_group_raw_data(false, 'f_list', $forum_ids);				if (empty($hold_ary))				{					continue;				}				foreach ($hold_ary as $g_id => $f_id_ary)				{					$set_group = false;					foreach ($f_id_ary as $f_id => $auth_ary)					{						foreach ($auth_ary as $auth_option => $setting)						{							if ($setting == ACL_YES)							{								$set_group = true;								break 2;							}						}					}					if ($set_group)					{						mass_auth('group', $row['forum_id'], $g_id, 'f_list', ACL_YES);					}				}			}		}	}}/*** Set primary group.* Really simple and only based on user_level (remaining groups will be assigned later)*/function phpbb_set_primary_group($user_level){	global $convert_row;	if ($user_level == 1)	{		return get_group_id('administrators');	}/*	else if ($user_level == 2)	{		return get_group_id('global_moderators');	}	else if ($user_level == 0 && $convert_row['user_active'])*/	else if ($convert_row['user_active'])	{		return get_group_id('registered');	}	return 0;}/*** Convert the group name, making sure to avoid conflicts with 3.0 special groups*/function phpbb_convert_group_name($group_name){	$default_groups = array(		'GUESTS',		'REGISTERED',		'REGISTERED_COPPA',		'GLOBAL_MODERATORS',		'ADMINISTRATORS',		'BOTS',	);	if (in_array(strtoupper($group_name), $default_groups))	{		return 'phpBB2 - ' . $group_name;	}	return phpbb_set_default_encoding($group_name);}/*** Convert the group type constants*/function phpbb_convert_group_type($group_type){	switch ($group_type)	{		case 0:			return GROUP_OPEN;		break;		case 1:			return GROUP_CLOSED;		break;		case 2:			return GROUP_HIDDEN;		break;	}	// Never return GROUP_SPECIAL here, because only phpBB3's default groups are allowed to have this type set.	return GROUP_HIDDEN;}/*** Convert the topic type constants*/function phpbb_convert_topic_type($topic_type){	switch ($topic_type)	{		case 0:			return POST_NORMAL;		break;		case 1:			return POST_STICKY;		break;		case 2:			return POST_ANNOUNCE;		break;		case 3:			return POST_GLOBAL;		break;	}	return POST_NORMAL;}function phpbb_replace_size($matches){	return '[size=' . min(200, ceil(100.0 * (((double) $matches[1])/12.0))) . ':' . $matches[2] . ']';}/*** Reparse the message stripping out the bbcode_uid values and adding new ones and setting the bitfield* @todo What do we want to do about HTML in messages - currently it gets converted to the entities, but there may be some objections to this*/function phpbb_prepare_message($message){	global $phpbb_root_path, $phpEx, $db, $convert, $user, $config, $cache, $convert_row, $message_parser;	if (!$message)	{		$convert->row['mp_bbcode_bitfield'] = $convert_row['mp_bbcode_bitfield'] = 0;		return '';	}	// Decode phpBB 2.0.x Message	if (isset($convert->row['old_bbcode_uid']) && $convert->row['old_bbcode_uid'] != '')	{		// Adjust size...		if (strpos($message, '[size=') !== false)		{			$message = preg_replace_callback('/\[size=(\d*):(' . $convert->row['old_bbcode_uid'] . ')\]/', 'phpbb_replace_size', $message);		}		$message = preg_replace('/\:(([a-z0-9]:)?)' . $convert->row['old_bbcode_uid'] . '/s', '', $message);	}	if (strpos($message, '[quote=') !== false)	{		$message = preg_replace('/\[quote="(.*?)"\]/s', '[quote=&quot;\1&quot;]', $message);		$message = preg_replace('/\[quote=\\\"(.*?)\\\"\]/s', '[quote=&quot;\1&quot;]', $message);		// let's hope that this solves more problems than it causes. Deal with escaped quotes.		$message = str_replace('\"', '&quot;', $message);		$message = str_replace('\&quot;', '&quot;', $message);	}	// Already the new user id ;)	$user_id = $convert->row['poster_id'];	$message = str_replace('<br />', "\n", $message);	$message = str_replace('<', '&lt;', $message);	$message = str_replace('>', '&gt;', $message);	// make the post UTF-8	$message = phpbb_set_encoding($message);	$message_parser->warn_msg = array(); // Reset the errors from the previous message	$message_parser->bbcode_uid = make_uid($convert->row['post_time']);	$message_parser->message = $message;	unset($message);	// Make sure options are set.//	$enable_html = (!isset($row['enable_html'])) ? false : $row['enable_html'];	$enable_bbcode = (!isset($convert->row['enable_bbcode'])) ? true : $convert->row['enable_bbcode'];	$enable_smilies = (!isset($convert->row['enable_smilies'])) ? true : $convert->row['enable_smilies'];	$enable_magic_url = (!isset($convert->row['enable_magic_url'])) ? true : $convert->row['enable_magic_url'];	// parse($allow_bbcode, $allow_magic_url, $allow_smilies, $allow_img_bbcode = true, $allow_flash_bbcode = true, $allow_quote_bbcode = true, $allow_url_bbcode = true, $update_this_message = true, $mode = 'post')	$message_parser->parse($enable_bbcode, $enable_magic_url, $enable_smilies);	if (sizeof($message_parser->warn_msg))	{		$msg_id = isset($convert->row['post_id']) ? $convert->row['post_id'] : $convert->row['privmsgs_id'];		$convert->p_master->error('<span style="color:red">' . $user->lang['POST_ID'] . ': ' . $msg_id . ' ' . $user->lang['CONV_ERROR_MESSAGE_PARSER'] . ': <br /><br />' . implode('<br />', $message_parser->warn_msg), __LINE__, __FILE__, true);	}	$convert->row['mp_bbcode_bitfield'] = $convert_row['mp_bbcode_bitfield'] = $message_parser->bbcode_bitfield;	$message = $message_parser->message;	unset($message_parser->message);	return $message;}/*** Return the bitfield calculated by the previous function*/function get_bbcode_bitfield(){	global $convert_row;	return $convert_row['mp_bbcode_bitfield'];}/*** Determine the last user to edit a post* In practice we only tracked edits by the original poster in 2.0.x so this will only be set if they had edited their own post*/function phpbb_post_edit_user(){	global $convert_row, $config;	if (isset($convert_row['post_edit_count']))	{		return phpbb_user_id($convert_row['poster_id']);	}	return 0;}/*** Obtain the path to uploaded files on the 2.0.x forum* This is only used if the Attachment MOD was installed*/function phpbb_get_files_dir(){	if (!defined('MOD_ATTACHMENT'))	{		return;	}	global $src_db, $same_db, $convert, $user, $config, $cache;	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'binary'");	}	$sql = 'SELECT config_value AS upload_dir		FROM ' . $convert->src_table_prefix . "attachments_config		WHERE config_name = 'upload_dir'";	$result = $src_db->sql_query($sql);	$upload_path = $src_db->sql_fetchfield('upload_dir');	$src_db->sql_freeresult($result);	$sql = 'SELECT config_value AS ftp_upload		FROM ' . $convert->src_table_prefix . "attachments_config		WHERE config_name = 'allow_ftp_upload'";	$result = $src_db->sql_query($sql);	$ftp_upload = (int) $src_db->sql_fetchfield('ftp_upload');	$src_db->sql_freeresult($result);	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'utf8'");	}	if ($ftp_upload)	{		$convert->p_master->error($user->lang['CONV_ERROR_ATTACH_FTP_DIR'], __LINE__, __FILE__);	}	return $upload_path;}/*** Copy thumbnails of uploaded images from the 2.0.x forum* This is only used if the Attachment MOD was installed*/function phpbb_copy_thumbnails(){	global $db, $convert, $user, $config, $cache, $phpbb_root_path;	$src_path = $convert->options['forum_path'] . '/' . phpbb_get_files_dir() . '/thumbs/';	if ($handle = @opendir($src_path))	{		while ($entry = readdir($handle))		{			if ($entry[0] == '.')			{				continue;			}			if (is_dir($src_path . $entry))			{				continue;			}			else			{				copy_file($src_path . $entry, $config['upload_path'] . '/' . preg_replace('/^t_/', 'thumb_', $entry));				@unlink($phpbb_root_path . $config['upload_path'] . '/thumbs/' . $entry);			}		}		closedir($handle);	}}/*** Convert the attachment category constants* This is only used if the Attachment MOD was installed*/function phpbb_attachment_category($cat_id){	switch ($cat_id)	{		case 1:			return ATTACHMENT_CATEGORY_IMAGE;		break;		case 2:			return ATTACHMENT_CATEGORY_WM;		break;		case 3:			return ATTACHMENT_CATEGORY_FLASH;		break;	}	return ATTACHMENT_CATEGORY_NONE;}/*** Obtain list of forums in which different attachment categories can be used*/function phpbb_attachment_forum_perms($forum_permissions){	if (empty($forum_permissions))	{		return '';	}	// Decode forum permissions	$forum_ids = array();	$one_char_encoding = '#';	$two_char_encoding = '.';	$auth_len = 1;	for ($pos = 0; $pos < strlen($forum_permissions); $pos += $auth_len)	{		$forum_auth = substr($forum_permissions, $pos, 1);		if ($forum_auth == $one_char_encoding)		{			$auth_len = 1;			continue;		}		else if ($forum_auth == $two_char_encoding)		{			$auth_len = 2;			$pos--;			continue;		}		$forum_auth = substr($forum_permissions, $pos, $auth_len);		$forum_id = base64_unpack($forum_auth);		$forum_ids[] = (int) $forum_id;	}	if (sizeof($forum_ids))	{		return attachment_forum_perms($forum_ids);	}	return '';}/*** Convert the avatar type constants*/function phpbb_avatar_type($type){	switch ($type)	{		case 1:			return AVATAR_UPLOAD;		break;		case 2:			return AVATAR_REMOTE;		break;		case 3:			return AVATAR_GALLERY;		break;	}	return 0;}/*** Just undos the replacing of '<' and '>'*/function  phpbb_smilie_html_decode($code){	$code = str_replace('&lt;', '<', $code);	return str_replace('&gt;', '>', $code);}/*** Transfer avatars, copying the image if it was uploaded*/function phpbb_import_avatar($user_avatar){	global $convert_row;	if (!$convert_row['user_avatar_type'])	{		return '';	}	else if ($convert_row['user_avatar_type'] == 1)	{		// Uploaded avatar		return import_avatar($user_avatar, false, $convert_row['user_id']);	}	else if ($convert_row['user_avatar_type'] == 2)	{		// Remote avatar		return $user_avatar;	}	else if ($convert_row['user_avatar_type'] == 3)	{		// Gallery avatar		return $user_avatar;	}	return '';}/*** Find out about the avatar's dimensions*/function phpbb_get_avatar_height($user_avatar){	global $convert_row;	if (empty($convert_row['user_avatar_type']))	{		return 0;	}	return get_avatar_height($user_avatar, 'phpbb_avatar_type', $convert_row['user_avatar_type']);}/*** Find out about the avatar's dimensions*/function phpbb_get_avatar_width($user_avatar){	global $convert_row;	if (empty($convert_row['user_avatar_type']))	{		return 0;	}	return get_avatar_width($user_avatar, 'phpbb_avatar_type', $convert_row['user_avatar_type']);}/*** Calculate the correct to_address field for private messages*/function phpbb_privmsgs_to_userid($to_userid){	global $config;	return 'u_' . phpbb_user_id($to_userid);}/*** Calculate whether a private message was unread using the bitfield*/function phpbb_unread_pm($pm_type){	return ($pm_type == 5) ? 1 : 0;}/*** Calculate whether a private message was new using the bitfield*/function phpbb_new_pm($pm_type){	return ($pm_type == 1) ? 1 : 0;}/*** Obtain the folder_id for the custom folder created to replace the savebox from 2.0.x (used to store saved private messages)*/function phpbb_get_savebox_id($user_id){	global $db;	$user_id = phpbb_user_id($user_id);	// Only one custom folder, check only one	$sql = 'SELECT folder_id		FROM ' . PRIVMSGS_FOLDER_TABLE . '		WHERE user_id = ' . $user_id;	$result = $db->sql_query_limit($sql, 1);	$folder_id = (int) $db->sql_fetchfield('folder_id');	$db->sql_freeresult($result);	return $folder_id;}/*** Transfer attachment specific configuration options* These were not stored in the main config table on 2.0.x* This is only used if the Attachment MOD was installed*/function phpbb_import_attach_config(){	global $db, $src_db, $same_db, $convert, $config;	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'binary'");	}	$sql = 'SELECT *		FROM ' . $convert->src_table_prefix . 'attachments_config';	$result = $src_db->sql_query($sql);	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'utf8'");	}	$attach_config = array();	while ($row = $src_db->sql_fetchrow($result))	{		$attach_config[$row['config_name']] = $row['config_value'];	}	$src_db->sql_freeresult($result);	set_config('allow_attachments', 1);	// old attachment mod? Must be very old if this entry do not exist...	if (!empty($attach_config['display_order']))	{		set_config('display_order', $attach_config['display_order']);	}	set_config('max_filesize', $attach_config['max_filesize']);	set_config('max_filesize_pm', $attach_config['max_filesize_pm']);	set_config('attachment_quota', $attach_config['attachment_quota']);	set_config('max_attachments', $attach_config['max_attachments']);	set_config('max_attachments_pm', $attach_config['max_attachments_pm']);	set_config('allow_pm_attach', $attach_config['allow_pm_attach']);	set_config('img_display_inlined', $attach_config['img_display_inlined']);	set_config('img_max_width', $attach_config['img_max_width']);	set_config('img_max_height', $attach_config['img_max_height']);	set_config('img_link_width', $attach_config['img_link_width']);	set_config('img_link_height', $attach_config['img_link_height']);	set_config('img_create_thumbnail', $attach_config['img_create_thumbnail']);	set_config('img_max_thumb_width', 400);	set_config('img_min_thumb_filesize', $attach_config['img_min_thumb_filesize']);	set_config('img_imagick', $attach_config['img_imagick']);}/*** Calculate the date a user became inactive*/function phpbb_inactive_time(){	global $convert_row;	if ($convert_row['user_active'])	{		return 0;	}	if ($convert_row['user_lastvisit'])	{		return $convert_row['user_lastvisit'];	}	return $convert_row['user_regdate'];}/*** Calculate the reason a user became inactive* We can't actually tell the difference between a manual deactivation and one for profile changes* from the data available to assume the latter*/function phpbb_inactive_reason(){	global $convert_row;	if ($convert_row['user_active'])	{		return 0;	}	if ($convert_row['user_lastvisit'])	{		return INACTIVE_PROFILE;	}	return INACTIVE_REGISTER;}/*** Adjust 2.0.x disallowed names to 3.0.x format*/function phpbb_disallowed_username($username){	// Replace * with %	$username = phpbb_set_default_encoding(str_replace('*', '%', $username));	return utf8_htmlspecialchars($username);}/*** Checks whether there are any usernames on the old board that would map to the same* username_clean on phpBB3. Prints out a list if any exist and exits.*/function phpbb_create_userconv_table(){	global $db, $src_db, $convert, $table_prefix, $user, $lang;	$map_dbms = '';	switch ($db->sql_layer)	{		case 'mysql':			$map_dbms = 'mysql_40';		break;		case 'mysql4':			if (version_compare($db->sql_server_info(true), '4.1.3', '>='))			{				$map_dbms = 'mysql_41';			}			else			{				$map_dbms = 'mysql_40';			}		break;		case 'mysqli':			$map_dbms = 'mysql_41';		break;		case 'mssql':		case 'mssql_odbc':		case 'mssqlnative':			$map_dbms = 'mssql';		break;		default:			$map_dbms = $db->sql_layer;		break;	}	// create a temporary table in which we store the clean usernames	$drop_sql = 'DROP TABLE ' . USERCONV_TABLE;	switch ($map_dbms)	{		case 'firebird':			$create_sql = 'CREATE TABLE ' . USERCONV_TABLE . ' (				user_id INTEGER NOT NULL,				username_clean VARCHAR(255) CHARACTER SET UTF8 DEFAULT \'\' NOT NULL COLLATE UNICODE			)';		break;		case 'mssql':			$create_sql = 'CREATE TABLE [' . USERCONV_TABLE . '] (				[user_id] [int] NOT NULL ,				[username_clean] [varchar] (255) DEFAULT (\'\') NOT NULL			)';		break;		case 'mysql_40':			$create_sql = 'CREATE TABLE ' . USERCONV_TABLE . ' (				user_id mediumint(8) NOT NULL,				username_clean blob NOT NULL			)';		break;		case 'mysql_41':			$create_sql = 'CREATE TABLE ' . USERCONV_TABLE . ' (				user_id mediumint(8) NOT NULL,				username_clean varchar(255) DEFAULT \'\' NOT NULL			) CHARACTER SET `utf8` COLLATE `utf8_bin`';		break;		case 'oracle':			$create_sql = 'CREATE TABLE ' . USERCONV_TABLE . ' (				user_id number(8) NOT NULL,				username_clean varchar2(255) DEFAULT \'\'			)';		break;		case 'postgres':			$create_sql = 'CREATE TABLE ' . USERCONV_TABLE . ' (				user_id INT4 DEFAULT \'0\',				username_clean varchar_ci DEFAULT \'\' NOT NULL			)';		break;		case 'sqlite':			$create_sql = 'CREATE TABLE ' . USERCONV_TABLE . ' (				user_id INTEGER NOT NULL DEFAULT \'0\',				username_clean varchar(255) NOT NULL DEFAULT \'\'			)';		break;	}	$db->sql_return_on_error(true);	$db->sql_query($drop_sql);	$db->sql_return_on_error(false);	$db->sql_query($create_sql);}function phpbb_check_username_collisions(){	global $db, $src_db, $convert, $table_prefix, $user, $lang;	// now find the clean version of the usernames that collide	$sql = 'SELECT username_clean		FROM ' . USERCONV_TABLE .'		GROUP BY username_clean		HAVING COUNT(user_id) > 1';	$result = $db->sql_query($sql);	$colliding_names = array();	while ($row = $db->sql_fetchrow($result))	{		$colliding_names[] = $row['username_clean'];	}	$db->sql_freeresult($result);	// there was at least one collision, the admin will have to solve it before conversion can continue	if (sizeof($colliding_names))	{		$sql = 'SELECT user_id, username_clean			FROM ' . USERCONV_TABLE . '			WHERE ' . $db->sql_in_set('username_clean', $colliding_names);		$result = $db->sql_query($sql);		unset($colliding_names);		$colliding_user_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$colliding_user_ids[(int) $row['user_id']] = $row['username_clean'];		}		$db->sql_freeresult($result);		$sql = 'SELECT username, user_id, user_posts			FROM ' . $convert->src_table_prefix . 'users			WHERE ' . $src_db->sql_in_set('user_id', array_keys($colliding_user_ids));		$result = $src_db->sql_query($sql);		$colliding_users = array();		while ($row = $src_db->sql_fetchrow($result))		{			$row['user_id'] = (int) $row['user_id'];			if (isset($colliding_user_ids[$row['user_id']]))			{				$colliding_users[$colliding_user_ids[$row['user_id']]][] = $row;			}		}		$src_db->sql_freeresult($result);		unset($colliding_user_ids);		$list = '';		foreach ($colliding_users as $username_clean => $users)		{			$list .= sprintf($user->lang['COLLIDING_CLEAN_USERNAME'], $username_clean) . "<br />\n";			foreach ($users as $i => $row)			{				$list .= sprintf($user->lang['COLLIDING_USER'], $row['user_id'], phpbb_set_default_encoding($row['username']), $row['user_posts']) . "<br />\n";			}		}		$lang['INST_ERR_FATAL'] = $user->lang['CONV_ERR_FATAL'];		$convert->p_master->error('<span style="color:red">' . $user->lang['COLLIDING_USERNAMES_FOUND'] . '</span></b><br /><br />' . $list . '<b>', __LINE__, __FILE__);	}	$drop_sql = 'DROP TABLE ' . USERCONV_TABLE;	$db->sql_query($drop_sql);}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class mcp_main_info{	function module()	{		return array(			'filename'	=> 'mcp_main',			'title'		=> 'MCP_MAIN',			'version'	=> '1.0.0',			'modes'		=> array(				'front'			=> array('title' => 'MCP_MAIN_FRONT', 'auth' => '', 'cat' => array('MCP_MAIN')),				'forum_view'	=> array('title' => 'MCP_MAIN_FORUM_VIEW', 'auth' => 'acl_m_,$id', 'cat' => array('MCP_MAIN')),				'topic_view'	=> array('title' => 'MCP_MAIN_TOPIC_VIEW', 'auth' => 'acl_m_,$id', 'cat' => array('MCP_MAIN')),				'post_details'	=> array('title' => 'MCP_MAIN_POST_DETAILS', 'auth' => 'acl_m_,$id || (!$id && aclf_m_)', 'cat' => array('MCP_MAIN')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2006, 2008 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Placeholder for autoload*/if (!class_exists('phpbb_default_captcha')){	include($phpbb_root_path . 'includes/captcha/plugins/captcha_abstract.' . $phpEx);}/*** @package VC*/class phpbb_captcha_nogd extends phpbb_default_captcha{	function phpbb_captcha_nogd()	{		global $phpbb_root_path, $phpEx;		if (!class_exists('captcha'))		{			include_once($phpbb_root_path . 'includes/captcha/captcha_non_gd.' . $phpEx);		}	}	function &get_instance()	{		$instance =& new phpbb_captcha_nogd();		return $instance;	}	function is_available()	{		return true;	}	function get_name()	{		return 'CAPTCHA_NO_GD';	}	function get_class_name()	{		return 'phpbb_captcha_nogd';	}	function acp_page($id, &$module)	{		global $user;		trigger_error($user->lang['CAPTCHA_NO_OPTIONS'] . adm_back_link($module->u_action));	}}?>
<?php/*** Adjust username_clean column.** You should make a backup from your users table in case something goes wrong*/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.'.$phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$echos = 0;$sql = 'SELECT user_id, username	FROM ' . USERS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$sql = 'UPDATE ' . USERS_TABLE . "		SET username_clean = '" . $db->sql_escape(utf8_clean_string($row['username'])) . "'		WHERE user_id = " . $row['user_id'];	$db->sql_query($sql);	if ($echos > 200)	{		echo '<br />' . "\n";		$echos = 0;	}	echo '.';	$echos++;	flush();}$db->sql_freeresult($result);echo 'FINISHED';// Done$db->sql_close();?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Permission/Auth class* @package phpBB3*/class auth{	var $acl = array();	var $cache = array();	var $acl_options = array();	var $acl_forum_ids = false;	/**	* Init permissions	*/	function acl(&$userdata)	{		global $db, $cache;		$this->acl = $this->cache = $this->acl_options = array();		$this->acl_forum_ids = false;		if (($this->acl_options = $cache->get('_acl_options')) === false)		{			$sql = 'SELECT auth_option_id, auth_option, is_global, is_local				FROM ' . ACL_OPTIONS_TABLE . '				ORDER BY auth_option_id';			$result = $db->sql_query($sql);			$global = $local = 0;			$this->acl_options = array();			while ($row = $db->sql_fetchrow($result))			{				if ($row['is_global'])				{					$this->acl_options['global'][$row['auth_option']] = $global++;				}				if ($row['is_local'])				{					$this->acl_options['local'][$row['auth_option']] = $local++;				}				$this->acl_options['id'][$row['auth_option']] = (int) $row['auth_option_id'];				$this->acl_options['option'][(int) $row['auth_option_id']] = $row['auth_option'];			}			$db->sql_freeresult($result);			$cache->put('_acl_options', $this->acl_options);		}		if (!trim($userdata['user_permissions']))		{			$this->acl_cache($userdata);		}		// Fill ACL array		$this->_fill_acl($userdata['user_permissions']);		// Verify bitstring length with options provided...		$renew = false;		$global_length = sizeof($this->acl_options['global']);		$local_length = sizeof($this->acl_options['local']);		// Specify comparing length (bitstring is padded to 31 bits)		$global_length = ($global_length % 31) ? ($global_length - ($global_length % 31) + 31) : $global_length;		$local_length = ($local_length % 31) ? ($local_length - ($local_length % 31) + 31) : $local_length;		// You thought we are finished now? Noooo... now compare them.		foreach ($this->acl as $forum_id => $bitstring)		{			if (($forum_id && strlen($bitstring) != $local_length) || (!$forum_id && strlen($bitstring) != $global_length))			{				$renew = true;				break;			}		}		// If a bitstring within the list does not match the options, we have a user with incorrect permissions set and need to renew them		if ($renew)		{			$this->acl_cache($userdata);			$this->_fill_acl($userdata['user_permissions']);		}		return;	}	/**	* Fill ACL array with relevant bitstrings from user_permissions column	* @access private	*/	function _fill_acl($user_permissions)	{		$seq_cache = array();		$this->acl = array();		$user_permissions = explode("\n", $user_permissions);		foreach ($user_permissions as $f => $seq)		{			if ($seq)			{				$i = 0;				if (!isset($this->acl[$f]))				{					$this->acl[$f] = '';				}				while ($subseq = substr($seq, $i, 6))				{					if (isset($seq_cache[$subseq]))					{						$converted = $seq_cache[$subseq];					}					else					{						$converted = $seq_cache[$subseq] = str_pad(base_convert($subseq, 36, 2), 31, 0, STR_PAD_LEFT);					}					// We put the original bitstring into the acl array					$this->acl[$f] .= $converted;					$i += 6;				}			}		}	}	/**	* Look up an option	* if the option is prefixed with !, then the result becomes negated	*	* If a forum id is specified the local option will be combined with a global option if one exist.	* If a forum id is not specified, only the global option will be checked.	*/	function acl_get($opt, $f = 0)	{		$negate = false;		if (strpos($opt, '!') === 0)		{			$negate = true;			$opt = substr($opt, 1);		}		if (!isset($this->cache[$f][$opt]))		{			// We combine the global/local option with an OR because some options are global and local.			// If the user has the global permission the local one is true too and vice versa			$this->cache[$f][$opt] = false;			// Is this option a global permission setting?			if (isset($this->acl_options['global'][$opt]))			{				if (isset($this->acl[0]))				{					$this->cache[$f][$opt] = $this->acl[0][$this->acl_options['global'][$opt]];				}			}			// Is this option a local permission setting?			// But if we check for a global option only, we won't combine the options...			if ($f != 0 && isset($this->acl_options['local'][$opt]))			{				if (isset($this->acl[$f]) && isset($this->acl[$f][$this->acl_options['local'][$opt]]))				{					$this->cache[$f][$opt] |= $this->acl[$f][$this->acl_options['local'][$opt]];				}			}		}		// Founder always has all global options set to true...		return ($negate) ? !$this->cache[$f][$opt] : $this->cache[$f][$opt];	}	/**	* Get forums with the specified permission setting	* if the option is prefixed with !, then the result becomes nagated	*	* @param bool $clean set to true if only values needs to be returned which are set/unset	*/	function acl_getf($opt, $clean = false)	{		$acl_f = array();		$negate = false;		if (strpos($opt, '!') === 0)		{			$negate = true;			$opt = substr($opt, 1);		}		// If we retrieve a list of forums not having permissions in, we need to get every forum_id		if ($negate)		{			if ($this->acl_forum_ids === false)			{				global $db;				$sql = 'SELECT forum_id					FROM ' . FORUMS_TABLE;				if (sizeof($this->acl))				{					$sql .= ' WHERE ' . $db->sql_in_set('forum_id', array_keys($this->acl), true);				}				$result = $db->sql_query($sql);				$this->acl_forum_ids = array();				while ($row = $db->sql_fetchrow($result))				{					$this->acl_forum_ids[] = $row['forum_id'];				}				$db->sql_freeresult($result);			}		}		if (isset($this->acl_options['local'][$opt]))		{			foreach ($this->acl as $f => $bitstring)			{				// Skip global settings				if (!$f)				{					continue;				}				$allowed = (!isset($this->cache[$f][$opt])) ? $this->acl_get($opt, $f) : $this->cache[$f][$opt];				if (!$clean)				{					$acl_f[$f][$opt] = ($negate) ? !$allowed : $allowed;				}				else				{					if (($negate && !$allowed) || (!$negate && $allowed))					{						$acl_f[$f][$opt] = 1;					}				}			}		}		// If we get forum_ids not having this permission, we need to fill the remaining parts		if ($negate && sizeof($this->acl_forum_ids))		{			foreach ($this->acl_forum_ids as $f)			{				$acl_f[$f][$opt] = 1;			}		}		return $acl_f;	}	/**	* Get local permission state for any forum.	*	* Returns true if user has the permission in one or more forums, false if in no forum.	* If global option is checked it returns the global state (same as acl_get($opt))	* Local option has precedence...	*/	function acl_getf_global($opt)	{		if (is_array($opt))		{			// evaluates to true as soon as acl_getf_global is true for one option			foreach ($opt as $check_option)			{				if ($this->acl_getf_global($check_option))				{					return true;				}			}			return false;		}		if (isset($this->acl_options['local'][$opt]))		{			foreach ($this->acl as $f => $bitstring)			{				// Skip global settings				if (!$f)				{					continue;				}				// as soon as the user has any permission we're done so return true				if ((!isset($this->cache[$f][$opt])) ? $this->acl_get($opt, $f) : $this->cache[$f][$opt])				{					return true;				}			}		}		else if (isset($this->acl_options['global'][$opt]))		{			return $this->acl_get($opt);		}		return false;	}	/**	* Get permission settings (more than one)	*/	function acl_gets()	{		$args = func_get_args();		$f = array_pop($args);		if (!is_numeric($f))		{			$args[] = $f;			$f = 0;		}		// alternate syntax: acl_gets(array('m_', 'a_'), $forum_id)		if (is_array($args[0]))		{			$args = $args[0];		}		$acl = 0;		foreach ($args as $opt)		{			$acl |= $this->acl_get($opt, $f);		}		return $acl;	}	/**	* Get permission listing based on user_id/options/forum_ids	*	* Be careful when using this function with permissions a_, m_, u_ and f_ !	* It may not work correctly. When a user group grants an a_* permission,	* e.g. a_foo, but the user's a_foo permission is set to "Never", then	* the user does not in fact have the a_ permission.	* But the user will still be listed as having the a_ permission.	*	* For more information see: http://tracker.phpbb.com/browse/PHPBB3-10252	*/	function acl_get_list($user_id = false, $opts = false, $forum_id = false)	{		if ($user_id !== false && !is_array($user_id) && $opts === false && $forum_id === false)		{			$hold_ary = array($user_id => $this->acl_raw_data_single_user($user_id));		}		else		{			$hold_ary = $this->acl_raw_data($user_id, $opts, $forum_id);		}		$auth_ary = array();		foreach ($hold_ary as $user_id => $forum_ary)		{			foreach ($forum_ary as $forum_id => $auth_option_ary)			{				foreach ($auth_option_ary as $auth_option => $auth_setting)				{					if ($auth_setting)					{						$auth_ary[$forum_id][$auth_option][] = $user_id;					}				}			}		}		return $auth_ary;	}	/**	* Cache data to user_permissions row	*/	function acl_cache(&$userdata)	{		global $db;		// Empty user_permissions		$userdata['user_permissions'] = '';		$hold_ary = $this->acl_raw_data_single_user($userdata['user_id']);		// Key 0 in $hold_ary are global options, all others are forum_ids		// If this user is founder we're going to force fill the admin options ...		if ($userdata['user_type'] == USER_FOUNDER)		{			foreach ($this->acl_options['global'] as $opt => $id)			{				if (strpos($opt, 'a_') === 0)				{					$hold_ary[0][$this->acl_options['id'][$opt]] = ACL_YES;				}			}		}		$hold_str = $this->build_bitstring($hold_ary);		if ($hold_str)		{			$userdata['user_permissions'] = $hold_str;			$sql = 'UPDATE ' . USERS_TABLE . "				SET user_permissions = '" . $db->sql_escape($userdata['user_permissions']) . "',					user_perm_from = 0				WHERE user_id = " . $userdata['user_id'];			$db->sql_query($sql);		}		return;	}	/**	* Build bitstring from permission set	*/	function build_bitstring(&$hold_ary)	{		$hold_str = '';		if (sizeof($hold_ary))		{			ksort($hold_ary);			$last_f = 0;			foreach ($hold_ary as $f => $auth_ary)			{				$ary_key = (!$f) ? 'global' : 'local';				$bitstring = array();				foreach ($this->acl_options[$ary_key] as $opt => $id)				{					if (isset($auth_ary[$this->acl_options['id'][$opt]]))					{						$bitstring[$id] = $auth_ary[$this->acl_options['id'][$opt]];						$option_key = substr($opt, 0, strpos($opt, '_') + 1);						// If one option is allowed, the global permission for this option has to be allowed too						// example: if the user has the a_ permission this means he has one or more a_* permissions						if ($auth_ary[$this->acl_options['id'][$opt]] == ACL_YES && (!isset($bitstring[$this->acl_options[$ary_key][$option_key]]) || $bitstring[$this->acl_options[$ary_key][$option_key]] == ACL_NEVER))						{							$bitstring[$this->acl_options[$ary_key][$option_key]] = ACL_YES;						}					}					else					{						$bitstring[$id] = ACL_NEVER;					}				}				// Now this bitstring defines the permission setting for the current forum $f (or global setting)				$bitstring = implode('', $bitstring);				// The line number indicates the id, therefore we have to add empty lines for those ids not present				$hold_str .= str_repeat("\n", $f - $last_f);				// Convert bitstring for storage - we do not use binary/bytes because PHP's string functions are not fully binary safe				for ($i = 0, $bit_length = strlen($bitstring); $i < $bit_length; $i += 31)				{					$hold_str .= str_pad(base_convert(str_pad(substr($bitstring, $i, 31), 31, 0, STR_PAD_RIGHT), 2, 36), 6, 0, STR_PAD_LEFT);				}				$last_f = $f;			}			unset($bitstring);			$hold_str = rtrim($hold_str);		}		return $hold_str;	}	/**	* Clear one or all users cached permission settings	*/	function acl_clear_prefetch($user_id = false)	{		global $db, $cache;		// Rebuild options cache		$cache->destroy('_role_cache');		$sql = 'SELECT *			FROM ' . ACL_ROLES_DATA_TABLE . '			ORDER BY role_id ASC';		$result = $db->sql_query($sql);		$this->role_cache = array();		while ($row = $db->sql_fetchrow($result))		{			$this->role_cache[$row['role_id']][$row['auth_option_id']] = (int) $row['auth_setting'];		}		$db->sql_freeresult($result);		foreach ($this->role_cache as $role_id => $role_options)		{			$this->role_cache[$role_id] = serialize($role_options);		}		$cache->put('_role_cache', $this->role_cache);		// Now empty user permissions		$where_sql = '';		if ($user_id !== false)		{			$user_id = (!is_array($user_id)) ? $user_id = array((int) $user_id) : array_map('intval', $user_id);			$where_sql = ' WHERE ' . $db->sql_in_set('user_id', $user_id);		}		$sql = 'UPDATE ' . USERS_TABLE . "			SET user_permissions = '',				user_perm_from = 0			$where_sql";		$db->sql_query($sql);		return;	}	/**	* Get assigned roles	*/	function acl_role_data($user_type, $role_type, $ug_id = false, $forum_id = false)	{		global $db;		$roles = array();		$sql_id = ($user_type == 'user') ? 'user_id' : 'group_id';		$sql_ug = ($ug_id !== false) ? ((!is_array($ug_id)) ? "AND a.$sql_id = $ug_id" : 'AND ' . $db->sql_in_set("a.$sql_id", $ug_id)) : '';		$sql_forum = ($forum_id !== false) ? ((!is_array($forum_id)) ? "AND a.forum_id = $forum_id" : 'AND ' . $db->sql_in_set('a.forum_id', $forum_id)) : '';		// Grab assigned roles...		$sql = 'SELECT a.auth_role_id, a.' . $sql_id . ', a.forum_id			FROM ' . (($user_type == 'user') ? ACL_USERS_TABLE : ACL_GROUPS_TABLE) . ' a, ' . ACL_ROLES_TABLE . " r			WHERE a.auth_role_id = r.role_id				AND r.role_type = '" . $db->sql_escape($role_type) . "'				$sql_ug				$sql_forum			ORDER BY r.role_order ASC";		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$roles[$row[$sql_id]][$row['forum_id']] = $row['auth_role_id'];		}		$db->sql_freeresult($result);		return $roles;	}	/**	* Get raw acl data based on user/option/forum	*/	function acl_raw_data($user_id = false, $opts = false, $forum_id = false)	{		global $db;		$sql_user = ($user_id !== false) ? ((!is_array($user_id)) ? 'user_id = ' . (int) $user_id : $db->sql_in_set('user_id', array_map('intval', $user_id))) : '';		$sql_forum = ($forum_id !== false) ? ((!is_array($forum_id)) ? 'AND a.forum_id = ' . (int) $forum_id : 'AND ' . $db->sql_in_set('a.forum_id', array_map('intval', $forum_id))) : '';		$sql_opts = $sql_opts_select = $sql_opts_from = '';		$hold_ary = array();		if ($opts !== false)		{			$sql_opts_select = ', ao.auth_option';			$sql_opts_from = ', ' . ACL_OPTIONS_TABLE . ' ao';			$this->build_auth_option_statement('ao.auth_option', $opts, $sql_opts);		}		$sql_ary = array();		// Grab non-role settings - user-specific		$sql_ary[] = 'SELECT a.user_id, a.forum_id, a.auth_setting, a.auth_option_id' . $sql_opts_select . '			FROM ' . ACL_USERS_TABLE . ' a' . $sql_opts_from . '			WHERE a.auth_role_id = 0 ' .				(($sql_opts_from) ? 'AND a.auth_option_id = ao.auth_option_id ' : '') .				(($sql_user) ? 'AND a.' . $sql_user : '') . "				$sql_forum				$sql_opts";		// Now the role settings - user-specific		$sql_ary[] = 'SELECT a.user_id, a.forum_id, r.auth_option_id, r.auth_setting, r.auth_option_id' . $sql_opts_select . '			FROM ' . ACL_USERS_TABLE . ' a, ' . ACL_ROLES_DATA_TABLE . ' r' . $sql_opts_from . '			WHERE a.auth_role_id = r.role_id ' .				(($sql_opts_from) ? 'AND r.auth_option_id = ao.auth_option_id ' : '') .				(($sql_user) ? 'AND a.' . $sql_user : '') . "				$sql_forum				$sql_opts";		foreach ($sql_ary as $sql)		{			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$option = ($sql_opts_select) ? $row['auth_option'] : $this->acl_options['option'][$row['auth_option_id']];				$hold_ary[$row['user_id']][$row['forum_id']][$option] = $row['auth_setting'];			}			$db->sql_freeresult($result);		}		$sql_ary = array();		// Now grab group settings - non-role specific...		$sql_ary[] = 'SELECT ug.user_id, a.forum_id, a.auth_setting, a.auth_option_id' . $sql_opts_select . '			FROM ' . ACL_GROUPS_TABLE . ' a, ' . USER_GROUP_TABLE . ' ug, ' . GROUPS_TABLE . ' g' . $sql_opts_from . '			WHERE a.auth_role_id = 0 ' .				(($sql_opts_from) ? 'AND a.auth_option_id = ao.auth_option_id ' : '') . '				AND a.group_id = ug.group_id				AND g.group_id = ug.group_id				AND ug.user_pending = 0				AND NOT (ug.group_leader = 1 AND g.group_skip_auth = 1)				' . (($sql_user) ? 'AND ug.' . $sql_user : '') . "				$sql_forum				$sql_opts";		// Now grab group settings - role specific...		$sql_ary[] = 'SELECT ug.user_id, a.forum_id, r.auth_setting, r.auth_option_id' . $sql_opts_select . '			FROM ' . ACL_GROUPS_TABLE . ' a, ' . USER_GROUP_TABLE . ' ug, ' . GROUPS_TABLE . ' g, ' . ACL_ROLES_DATA_TABLE . ' r' . $sql_opts_from . '			WHERE a.auth_role_id = r.role_id ' .				(($sql_opts_from) ? 'AND r.auth_option_id = ao.auth_option_id ' : '') . '				AND a.group_id = ug.group_id				AND g.group_id = ug.group_id				AND ug.user_pending = 0				AND NOT (ug.group_leader = 1 AND g.group_skip_auth = 1)				' . (($sql_user) ? 'AND ug.' . $sql_user : '') . "				$sql_forum				$sql_opts";		foreach ($sql_ary as $sql)		{			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$option = ($sql_opts_select) ? $row['auth_option'] : $this->acl_options['option'][$row['auth_option_id']];				if (!isset($hold_ary[$row['user_id']][$row['forum_id']][$option]) || (isset($hold_ary[$row['user_id']][$row['forum_id']][$option]) && $hold_ary[$row['user_id']][$row['forum_id']][$option] != ACL_NEVER))				{					$hold_ary[$row['user_id']][$row['forum_id']][$option] = $row['auth_setting'];					// If we detect ACL_NEVER, we will unset the flag option (within building the bitstring it is correctly set again)					if ($row['auth_setting'] == ACL_NEVER)					{						$flag = substr($option, 0, strpos($option, '_') + 1);						if (isset($hold_ary[$row['user_id']][$row['forum_id']][$flag]) && $hold_ary[$row['user_id']][$row['forum_id']][$flag] == ACL_YES)						{							unset($hold_ary[$row['user_id']][$row['forum_id']][$flag]);/*							if (in_array(ACL_YES, $hold_ary[$row['user_id']][$row['forum_id']]))							{								$hold_ary[$row['user_id']][$row['forum_id']][$flag] = ACL_YES;							}*/						}					}				}			}			$db->sql_freeresult($result);		}		return $hold_ary;	}	/**	* Get raw user based permission settings	*/	function acl_user_raw_data($user_id = false, $opts = false, $forum_id = false)	{		global $db;		$sql_user = ($user_id !== false) ? ((!is_array($user_id)) ? 'user_id = ' . (int) $user_id : $db->sql_in_set('user_id', array_map('intval', $user_id))) : '';		$sql_forum = ($forum_id !== false) ? ((!is_array($forum_id)) ? 'AND a.forum_id = ' . (int) $forum_id : 'AND ' . $db->sql_in_set('a.forum_id', array_map('intval', $forum_id))) : '';		$sql_opts = '';		$hold_ary = $sql_ary = array();		if ($opts !== false)		{			$this->build_auth_option_statement('ao.auth_option', $opts, $sql_opts);		}		// Grab user settings - non-role specific...		$sql_ary[] = 'SELECT a.user_id, a.forum_id, a.auth_setting, a.auth_option_id, ao.auth_option			FROM ' . ACL_USERS_TABLE . ' a, ' . ACL_OPTIONS_TABLE . ' ao			WHERE a.auth_role_id = 0				AND a.auth_option_id = ao.auth_option_id ' .				(($sql_user) ? 'AND a.' . $sql_user : '') . "				$sql_forum				$sql_opts			ORDER BY a.forum_id, ao.auth_option";		// Now the role settings - user-specific		$sql_ary[] = 'SELECT a.user_id, a.forum_id, r.auth_option_id, r.auth_setting, r.auth_option_id, ao.auth_option			FROM ' . ACL_USERS_TABLE . ' a, ' . ACL_ROLES_DATA_TABLE . ' r, ' . ACL_OPTIONS_TABLE . ' ao			WHERE a.auth_role_id = r.role_id				AND r.auth_option_id = ao.auth_option_id ' .				(($sql_user) ? 'AND a.' . $sql_user : '') . "				$sql_forum				$sql_opts			ORDER BY a.forum_id, ao.auth_option";		foreach ($sql_ary as $sql)		{			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$hold_ary[$row['user_id']][$row['forum_id']][$row['auth_option']] = $row['auth_setting'];			}			$db->sql_freeresult($result);		}		return $hold_ary;	}	/**	* Get raw group based permission settings	*/	function acl_group_raw_data($group_id = false, $opts = false, $forum_id = false)	{		global $db;		$sql_group = ($group_id !== false) ? ((!is_array($group_id)) ? 'group_id = ' . (int) $group_id : $db->sql_in_set('group_id', array_map('intval', $group_id))) : '';		$sql_forum = ($forum_id !== false) ? ((!is_array($forum_id)) ? 'AND a.forum_id = ' . (int) $forum_id : 'AND ' . $db->sql_in_set('a.forum_id', array_map('intval', $forum_id))) : '';		$sql_opts = '';		$hold_ary = $sql_ary = array();		if ($opts !== false)		{			$this->build_auth_option_statement('ao.auth_option', $opts, $sql_opts);		}		// Grab group settings - non-role specific...		$sql_ary[] = 'SELECT a.group_id, a.forum_id, a.auth_setting, a.auth_option_id, ao.auth_option			FROM ' . ACL_GROUPS_TABLE . ' a, ' . ACL_OPTIONS_TABLE . ' ao			WHERE a.auth_role_id = 0				AND a.auth_option_id = ao.auth_option_id ' .				(($sql_group) ? 'AND a.' . $sql_group : '') . "				$sql_forum				$sql_opts			ORDER BY a.forum_id, ao.auth_option";		// Now grab group settings - role specific...		$sql_ary[] = 'SELECT a.group_id, a.forum_id, r.auth_setting, r.auth_option_id, ao.auth_option			FROM ' . ACL_GROUPS_TABLE . ' a, ' . ACL_ROLES_DATA_TABLE . ' r, ' . ACL_OPTIONS_TABLE . ' ao			WHERE a.auth_role_id = r.role_id				AND r.auth_option_id = ao.auth_option_id ' .				(($sql_group) ? 'AND a.' . $sql_group : '') . "				$sql_forum				$sql_opts			ORDER BY a.forum_id, ao.auth_option";		foreach ($sql_ary as $sql)		{			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$hold_ary[$row['group_id']][$row['forum_id']][$row['auth_option']] = $row['auth_setting'];			}			$db->sql_freeresult($result);		}		return $hold_ary;	}	/**	* Get raw acl data based on user for caching user_permissions	* This function returns the same data as acl_raw_data(), but without the user id as the first key within the array.	*/	function acl_raw_data_single_user($user_id)	{		global $db, $cache;		// Check if the role-cache is there		if (($this->role_cache = $cache->get('_role_cache')) === false)		{			$this->role_cache = array();			// We pre-fetch roles			$sql = 'SELECT *				FROM ' . ACL_ROLES_DATA_TABLE . '				ORDER BY role_id ASC';			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$this->role_cache[$row['role_id']][$row['auth_option_id']] = (int) $row['auth_setting'];			}			$db->sql_freeresult($result);			foreach ($this->role_cache as $role_id => $role_options)			{				$this->role_cache[$role_id] = serialize($role_options);			}			$cache->put('_role_cache', $this->role_cache);		}		$hold_ary = array();		// Grab user-specific permission settings		$sql = 'SELECT forum_id, auth_option_id, auth_role_id, auth_setting			FROM ' . ACL_USERS_TABLE . '			WHERE user_id = ' . $user_id;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			// If a role is assigned, assign all options included within this role. Else, only set this one option.			if ($row['auth_role_id'])			{				$hold_ary[$row['forum_id']] = (empty($hold_ary[$row['forum_id']])) ? unserialize($this->role_cache[$row['auth_role_id']]) : $hold_ary[$row['forum_id']] + unserialize($this->role_cache[$row['auth_role_id']]);			}			else			{				$hold_ary[$row['forum_id']][$row['auth_option_id']] = $row['auth_setting'];			}		}		$db->sql_freeresult($result);		// Now grab group-specific permission settings		$sql = 'SELECT a.forum_id, a.auth_option_id, a.auth_role_id, a.auth_setting			FROM ' . ACL_GROUPS_TABLE . ' a, ' . USER_GROUP_TABLE . ' ug, ' . GROUPS_TABLE . ' g			WHERE a.group_id = ug.group_id				AND g.group_id = ug.group_id				AND ug.user_pending = 0				AND NOT (ug.group_leader = 1 AND g.group_skip_auth = 1)				AND ug.user_id = ' . $user_id;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if (!$row['auth_role_id'])			{				$this->_set_group_hold_ary($hold_ary[$row['forum_id']], $row['auth_option_id'], $row['auth_setting']);			}			else if (!empty($this->role_cache[$row['auth_role_id']]))			{				foreach (unserialize($this->role_cache[$row['auth_role_id']]) as $option_id => $setting)				{					$this->_set_group_hold_ary($hold_ary[$row['forum_id']], $option_id, $setting);				}			}		}		$db->sql_freeresult($result);		return $hold_ary;	}	/**	* Private function snippet for setting a specific piece of the hold_ary	*/	function _set_group_hold_ary(&$hold_ary, $option_id, $setting)	{		if (!isset($hold_ary[$option_id]) || (isset($hold_ary[$option_id]) && $hold_ary[$option_id] != ACL_NEVER))		{			$hold_ary[$option_id] = $setting;			// If we detect ACL_NEVER, we will unset the flag option (within building the bitstring it is correctly set again)			if ($setting == ACL_NEVER)			{				$flag = substr($this->acl_options['option'][$option_id], 0, strpos($this->acl_options['option'][$option_id], '_') + 1);				$flag = (int) $this->acl_options['id'][$flag];				if (isset($hold_ary[$flag]) && $hold_ary[$flag] == ACL_YES)				{					unset($hold_ary[$flag]);/*					This is uncommented, because i suspect this being slightly wrong due to mixed permission classes being possible					if (in_array(ACL_YES, $hold_ary))					{						$hold_ary[$flag] = ACL_YES;					}*/				}			}		}	}	/**	* Authentication plug-ins is largely down to Sergey Kanareykin, our thanks to him.	*/	function login($username, $password, $autologin = false, $viewonline = 1, $admin = 0)	{		global $config, $db, $user, $phpbb_root_path, $phpEx;		$method = trim(basename($config['auth_method']));		include_once($phpbb_root_path . 'includes/auth/auth_' . $method . '.' . $phpEx);		$method = 'login_' . $method;		if (function_exists($method))		{			$login = $method($username, $password, $user->ip, $user->browser, $user->forwarded_for);			// If the auth module wants us to create an empty profile do so and then treat the status as LOGIN_SUCCESS			if ($login['status'] == LOGIN_SUCCESS_CREATE_PROFILE)			{				// we are going to use the user_add function so include functions_user.php if it wasn't defined yet				if (!function_exists('user_add'))				{					include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				}				user_add($login['user_row'], (isset($login['cp_data'])) ? $login['cp_data'] : false);				$sql = 'SELECT user_id, username, user_password, user_passchg, user_email, user_type					FROM ' . USERS_TABLE . "					WHERE username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					return array(						'status'		=> LOGIN_ERROR_EXTERNAL_AUTH,						'error_msg'		=> 'AUTH_NO_PROFILE_CREATED',						'user_row'		=> array('user_id' => ANONYMOUS),					);				}				$login = array(					'status'	=> LOGIN_SUCCESS,					'error_msg'	=> false,					'user_row'	=> $row,				);			}			// If login succeeded, we will log the user in... else we pass the login array through...			if ($login['status'] == LOGIN_SUCCESS)			{				$old_session_id = $user->session_id;				if ($admin)				{					global $SID, $_SID;					$cookie_expire = time() - 31536000;					$user->set_cookie('u', '', $cookie_expire);					$user->set_cookie('sid', '', $cookie_expire);					unset($cookie_expire);					$SID = '?sid=';					$user->session_id = $_SID = '';				}				$result = $user->session_create($login['user_row']['user_id'], $admin, $autologin, $viewonline);				// Successful session creation				if ($result === true)				{					// If admin re-authentication we remove the old session entry because a new one has been created...					if ($admin)					{						// the login array is used because the user ids do not differ for re-authentication						$sql = 'DELETE FROM ' . SESSIONS_TABLE . "							WHERE session_id = '" . $db->sql_escape($old_session_id) . "'							AND session_user_id = {$login['user_row']['user_id']}";						$db->sql_query($sql);					}					return array(						'status'		=> LOGIN_SUCCESS,						'error_msg'		=> false,						'user_row'		=> $login['user_row'],					);				}				return array(					'status'		=> LOGIN_BREAK,					'error_msg'		=> $result,					'user_row'		=> $login['user_row'],				);			}			return $login;		}		trigger_error('Authentication method not found', E_USER_ERROR);	}	/**	* Fill auth_option statement for later querying based on the supplied options	*/	function build_auth_option_statement($key, $auth_options, &$sql_opts)	{		global $db;		if (!is_array($auth_options))		{			if (strpos($auth_options, '%') !== false)			{				$sql_opts = "AND $key " . $db->sql_like_expression(str_replace('%', $db->any_char, $auth_options));			}			else			{				$sql_opts = "AND $key = '" . $db->sql_escape($auth_options) . "'";			}		}		else		{			$is_like_expression = false;			foreach ($auth_options as $option)			{				if (strpos($option, '%') !== false)				{					$is_like_expression = true;				}			}			if (!$is_like_expression)			{				$sql_opts = 'AND ' . $db->sql_in_set($key, $auth_options);			}			else			{				$sql = array();				foreach ($auth_options as $option)				{					if (strpos($option, '%') !== false)					{						$sql[] = $key . ' ' . $db->sql_like_expression(str_replace('%', $db->any_char, $option));					}					else					{						$sql[] = $key . " = '" . $db->sql_escape($option) . "'";					}				}				$sql_opts = 'AND (' . implode(' OR ', $sql) . ')';			}		}	}}?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2006, 2008 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}if (!class_exists('phpbb_default_captcha')){	// we need the classic captcha code for tracking solutions and attempts	include($phpbb_root_path . 'includes/captcha/plugins/captcha_abstract.' . $phpEx);}/*** @package VC*/class phpbb_recaptcha extends phpbb_default_captcha{	var $recaptcha_server = 'http://www.google.com/recaptcha/api';	var $recaptcha_server_secure = 'https://www.google.com/recaptcha/api'; // class constants :(	// We are opening a socket to port 80 of this host and send	// the POST request asking for verification to the path specified here.	var $recaptcha_verify_server = 'www.google.com';	var $recaptcha_verify_path = '/recaptcha/api/verify';	var $challenge;	var $response;	// PHP4 Constructor	function phpbb_recaptcha()	{		$this->recaptcha_server = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? $this->recaptcha_server_secure : $this->recaptcha_server;	}	function init($type)	{		global $config, $db, $user;		$user->add_lang('captcha_recaptcha');		parent::init($type);		$this->challenge = request_var('recaptcha_challenge_field', '');		$this->response = request_var('recaptcha_response_field', '');	}	function &get_instance()	{		$instance =& new phpbb_recaptcha();		return $instance;	}	function is_available()	{		global $config, $user;		$user->add_lang('captcha_recaptcha');		return (isset($config['recaptcha_pubkey']) && !empty($config['recaptcha_pubkey']));	}	/**	*  API function	*/	function has_config()	{		return true;	}	function get_name()	{		return 'CAPTCHA_RECAPTCHA';	}	function get_class_name()	{		return 'phpbb_recaptcha';	}	function acp_page($id, &$module)	{		global $config, $db, $template, $user;		$captcha_vars = array(			'recaptcha_pubkey'				=> 'RECAPTCHA_PUBKEY',			'recaptcha_privkey'				=> 'RECAPTCHA_PRIVKEY',		);		$module->tpl_name = 'captcha_recaptcha_acp';		$module->page_title = 'ACP_VC_SETTINGS';		$form_key = 'acp_captcha';		add_form_key($form_key);		$submit = request_var('submit', '');		if ($submit && check_form_key($form_key))		{			$captcha_vars = array_keys($captcha_vars);			foreach ($captcha_vars as $captcha_var)			{				$value = request_var($captcha_var, '');				if ($value)				{					set_config($captcha_var, $value);				}			}			add_log('admin', 'LOG_CONFIG_VISUAL');			trigger_error($user->lang['CONFIG_UPDATED'] . adm_back_link($module->u_action));		}		else if ($submit)		{			trigger_error($user->lang['FORM_INVALID'] . adm_back_link($module->u_action));		}		else		{			foreach ($captcha_vars as $captcha_var => $template_var)			{				$var = (isset($_REQUEST[$captcha_var])) ? request_var($captcha_var, '') : ((isset($config[$captcha_var])) ? $config[$captcha_var] : '');				$template->assign_var($template_var, $var);			}			$template->assign_vars(array(				'CAPTCHA_PREVIEW'	=> $this->get_demo_template($id),				'CAPTCHA_NAME'		=> $this->get_class_name(),				'U_ACTION'			=> $module->u_action,			));		}	}	// not needed	function execute_demo()	{	}	// not needed	function execute()	{	}	function get_template()	{		global $config, $user, $template;		if ($this->is_solved())		{			return false;		}		else		{			$explain = $user->lang(($this->type != CONFIRM_POST) ? 'CONFIRM_EXPLAIN' : 'POST_CONFIRM_EXPLAIN', '<a href="mailto:' . htmlspecialchars($config['board_contact']) . '">', '</a>');			$template->assign_vars(array(				'RECAPTCHA_SERVER'			=> $this->recaptcha_server,				'RECAPTCHA_PUBKEY'			=> isset($config['recaptcha_pubkey']) ? $config['recaptcha_pubkey'] : '',				'RECAPTCHA_ERRORGET'		=> '',				'S_RECAPTCHA_AVAILABLE'		=> $this->is_available(),				'S_CONFIRM_CODE'			=> true,				'S_TYPE'					=> $this->type,				'L_CONFIRM_EXPLAIN'			=> $explain,			));			return 'captcha_recaptcha.html';		}	}	function get_demo_template($id)	{		return $this->get_template();	}	function get_hidden_fields()	{		$hidden_fields = array();		// this is required for posting.php - otherwise we would forget about the captcha being already solved		if ($this->solved)		{			$hidden_fields['confirm_code'] = $this->code;		}		$hidden_fields['confirm_id'] = $this->confirm_id;		return $hidden_fields;	}	function uninstall()	{		$this->garbage_collect(0);	}	function install()	{		return;	}	function validate()	{		if (!parent::validate())		{			return false;		}		else		{			return $this->recaptcha_check_answer();		}	}// Code from here on is based on recaptchalib.php/* * This is a PHP library that handles calling reCAPTCHA. *	- Documentation and latest version *		  http://recaptcha.net/plugins/php/ *	- Get a reCAPTCHA API Key *		  http://recaptcha.net/api/getkey *	- Discussion group *		  http://groups.google.com/group/recaptcha * * Copyright (c) 2007 reCAPTCHA -- http://recaptcha.net * AUTHORS: *   Mike Crawford *   Ben Maurer * * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: * * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. */	/**	* Submits an HTTP POST to a reCAPTCHA server	* @param string $host	* @param string $path	* @param array $data	* @param int port	* @return array response	*/	function _recaptcha_http_post($host, $path, $data, $port = 80)	{		$req = $this->_recaptcha_qsencode ($data);		$http_request  = "POST $path HTTP/1.0\r\n";		$http_request .= "Host: $host\r\n";		$http_request .= "Content-Type: application/x-www-form-urlencoded;\r\n";		$http_request .= "Content-Length: " . strlen($req) . "\r\n";		$http_request .= "User-Agent: reCAPTCHA/PHP/phpBB\r\n";		$http_request .= "\r\n";		$http_request .= $req;		$response = '';		if (false == ($fs = @fsockopen($host, $port, $errno, $errstr, 10)))		{			trigger_error('Could not open socket', E_USER_ERROR);		}		fwrite($fs, $http_request);		while (!feof($fs))		{			// One TCP-IP packet			$response .= fgets($fs, 1160);		}		fclose($fs);		$response = explode("\r\n\r\n", $response, 2);		return $response;	}	/**	* Calls an HTTP POST function to verify if the user's guess was correct	* @param array $extra_params an array of extra variables to post to the server	* @return ReCaptchaResponse	*/	function recaptcha_check_answer($extra_params = array())	{		global $config, $user;		//discard spam submissions		if ($this->challenge == null || strlen($this->challenge) == 0 || $this->response == null || strlen($this->response) == 0)		{			return $user->lang['RECAPTCHA_INCORRECT'];		}		$response = $this->_recaptcha_http_post($this->recaptcha_verify_server, $this->recaptcha_verify_path,			array(				'privatekey'	=> $config['recaptcha_privkey'],				'remoteip'		=> $user->ip,				'challenge'		=> $this->challenge,				'response'		=> $this->response			) + $extra_params		);		$answers = explode("\n", $response[1]);		if (trim($answers[0]) === 'true')		{			$this->solved = true;			return false;		}		else		{			return $user->lang['RECAPTCHA_INCORRECT'];		}	}	/**	* Encodes the given data into a query string format	* @param $data - array of string elements to be encoded	* @return string - encoded request	*/	function _recaptcha_qsencode($data)	{		$req = '';		foreach ($data as $key => $value)		{			$req .= $key . '=' . urlencode(stripslashes($value)) . '&';		}		// Cut the last '&'		$req = substr($req, 0, strlen($req) - 1);		return $req;	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_users_info{	function module()	{		return array(			'filename'	=> 'acp_users',			'title'		=> 'ACP_USER_MANAGEMENT',			'version'	=> '1.0.0',			'modes'		=> array(				'overview'		=> array('title' => 'ACP_MANAGE_USERS', 'auth' => 'acl_a_user', 'cat' => array('ACP_CAT_USERS')),				'feedback'		=> array('title' => 'ACP_USER_FEEDBACK', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'warnings'		=> array('title' => 'ACP_USER_WARNINGS', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'profile'		=> array('title' => 'ACP_USER_PROFILE', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'prefs'			=> array('title' => 'ACP_USER_PREFS', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'avatar'		=> array('title' => 'ACP_USER_AVATAR', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'rank'			=> array('title' => 'ACP_USER_RANK', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'sig'			=> array('title' => 'ACP_USER_SIG', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'groups'		=> array('title' => 'ACP_USER_GROUPS', 'auth' => 'acl_a_user && acl_a_group', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'perm'			=> array('title' => 'ACP_USER_PERM', 'auth' => 'acl_a_user && acl_a_viewauth', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'attach'		=> array('title' => 'ACP_USER_ATTACH', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_prune{	var $u_action;	function main($id, $mode)	{		global $user, $phpEx, $phpbb_admin_path, $phpbb_root_path;		$user->add_lang('acp/prune');		include_once($phpbb_root_path . 'includes/functions_user.' . $phpEx);		switch ($mode)		{			case 'forums':				$this->tpl_name = 'acp_prune_forums';				$this->page_title = 'ACP_PRUNE_FORUMS';				$this->prune_forums($id, $mode);			break;			case 'users':				$this->tpl_name = 'acp_prune_users';				$this->page_title = 'ACP_PRUNE_USERS';				$this->prune_users($id, $mode);			break;		}	}	/**	* Prune forums	*/	function prune_forums($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$all_forums = request_var('all_forums', 0);		$forum_id = request_var('f', array(0));		$submit = (isset($_POST['submit'])) ? true : false;		if ($all_forums)		{			$sql = 'SELECT forum_id				FROM ' . FORUMS_TABLE . '				ORDER BY left_id';			$result = $db->sql_query($sql);			$forum_id = array();			while ($row = $db->sql_fetchrow($result))			{				$forum_id[] = $row['forum_id'];			}			$db->sql_freeresult($result);		}		if ($submit)		{			if (confirm_box(true))			{				$prune_posted = request_var('prune_days', 0);				$prune_viewed = request_var('prune_vieweddays', 0);				$prune_all = (!$prune_posted && !$prune_viewed) ? true : false;						$prune_flags = 0;				$prune_flags += (request_var('prune_old_polls', 0)) ? 2 : 0;				$prune_flags += (request_var('prune_announce', 0)) ? 4 : 0;				$prune_flags += (request_var('prune_sticky', 0)) ? 8 : 0;				// Convert days to seconds for timestamp functions...				$prunedate_posted = time() - ($prune_posted * 86400);				$prunedate_viewed = time() - ($prune_viewed * 86400);				$template->assign_vars(array(					'S_PRUNED'		=> true)				);				$sql_forum = (sizeof($forum_id)) ? ' AND ' . $db->sql_in_set('forum_id', $forum_id) : '';				// Get a list of forum's or the data for the forum that we are pruning.				$sql = 'SELECT forum_id, forum_name					FROM ' . FORUMS_TABLE . '					WHERE forum_type = ' . FORUM_POST . "						$sql_forum					ORDER BY left_id ASC";				$result = $db->sql_query($sql);				if ($row = $db->sql_fetchrow($result))				{					$prune_ids = array();					$p_result['topics'] = 0;					$p_result['posts'] = 0;					$log_data = '';								do					{						if (!$auth->acl_get('f_list', $row['forum_id']))						{							continue;						}						if ($prune_all)						{							$p_result = prune($row['forum_id'], 'posted', time(), $prune_flags, false);						}						else						{							if ($prune_posted)							{								$return = prune($row['forum_id'], 'posted', $prunedate_posted, $prune_flags, false);								$p_result['topics'] += $return['topics'];								$p_result['posts'] += $return['posts'];							}										if ($prune_viewed)							{								$return = prune($row['forum_id'], 'viewed', $prunedate_viewed, $prune_flags, false);								$p_result['topics'] += $return['topics'];								$p_result['posts'] += $return['posts'];							}						}						$prune_ids[] = $row['forum_id'];						$template->assign_block_vars('pruned', array(							'FORUM_NAME'	=> $row['forum_name'],							'NUM_TOPICS'	=> $p_result['topics'],							'NUM_POSTS'		=> $p_result['posts'])						);								$log_data .= (($log_data != '') ? ', ' : '') . $row['forum_name'];					}					while ($row = $db->sql_fetchrow($result));							// Sync all pruned forums at once					sync('forum', 'forum_id', $prune_ids, true, true);					add_log('admin', 'LOG_PRUNE', $log_data);				}				$db->sql_freeresult($result);				return;			}			else			{				confirm_box(false, $user->lang['PRUNE_FORUM_CONFIRM'], build_hidden_fields(array(					'i'				=> $id,					'mode'			=> $mode,					'submit'		=> 1,					'all_forums'	=> $all_forums,					'f'				=> $forum_id,					'prune_days'		=> request_var('prune_days', 0),					'prune_vieweddays'	=> request_var('prune_vieweddays', 0),					'prune_old_polls'	=> request_var('prune_old_polls', 0),					'prune_announce'	=> request_var('prune_announce', 0),					'prune_sticky'		=> request_var('prune_sticky', 0),				)));			}		}		// If they haven't selected a forum for pruning yet then		// display a select box to use for pruning.		if (!sizeof($forum_id))		{			$template->assign_vars(array(				'U_ACTION'			=> $this->u_action,				'S_SELECT_FORUM'	=> true,				'S_FORUM_OPTIONS'	=> make_forum_select(false, false, false))			);		}		else		{			$sql = 'SELECT forum_id, forum_name				FROM ' . FORUMS_TABLE . '				WHERE ' . $db->sql_in_set('forum_id', $forum_id);			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			if (!$row)			{				$db->sql_freeresult($result);				trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action), E_USER_WARNING);			}			$forum_list = $s_hidden_fields = '';			do			{				$forum_list .= (($forum_list != '') ? ', ' : '') . '<b>' . $row['forum_name'] . '</b>';				$s_hidden_fields .= '<input type="hidden" name="f[]" value="' . $row['forum_id'] . '" />';			}			while ($row = $db->sql_fetchrow($result));			$db->sql_freeresult($result);			$l_selected_forums = (sizeof($forum_id) == 1) ? 'SELECTED_FORUM' : 'SELECTED_FORUMS';			$template->assign_vars(array(				'L_SELECTED_FORUMS'		=> $user->lang[$l_selected_forums],				'U_ACTION'				=> $this->u_action,				'U_BACK'				=> $this->u_action,				'FORUM_LIST'			=> $forum_list,				'S_HIDDEN_FIELDS'		=> $s_hidden_fields)			);		}	}	/**	* Prune users	*/	function prune_users($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('memberlist');		$prune = (isset($_POST['prune'])) ? true : false;		if ($prune)		{			$action = request_var('action', 'deactivate');			$deleteposts = request_var('deleteposts', 0);			if (confirm_box(true))			{				$user_ids = $usernames = array();				$this->get_prune_users($user_ids, $usernames);				if (sizeof($user_ids))				{					if ($action == 'deactivate')					{						user_active_flip('deactivate', $user_ids);						$l_log = 'LOG_PRUNE_USER_DEAC';					}					else if ($action == 'delete')					{						if ($deleteposts)						{							foreach ($user_ids as $user_id)							{								user_delete('remove', $user_id);							}														$l_log = 'LOG_PRUNE_USER_DEL_DEL';						}						else						{							foreach ($user_ids as $user_id)							{								user_delete('retain', $user_id, $usernames[$user_id]);							}							$l_log = 'LOG_PRUNE_USER_DEL_ANON';						}					}					add_log('admin', $l_log, implode(', ', $usernames));					$msg = $user->lang['USER_' . strtoupper($action) . '_SUCCESS'];				}				else				{					$msg = $user->lang['USER_PRUNE_FAILURE'];				}				trigger_error($msg . adm_back_link($this->u_action));			}			else			{				// We list the users which will be pruned...				$user_ids = $usernames = array();				$this->get_prune_users($user_ids, $usernames);				if (!sizeof($user_ids))				{					trigger_error($user->lang['USER_PRUNE_FAILURE'] . adm_back_link($this->u_action), E_USER_WARNING);				}				// Assign to template				foreach ($user_ids as $user_id)				{					$template->assign_block_vars('users', array(						'USERNAME'			=> $usernames[$user_id],						'U_PROFILE'			=> append_sid($phpbb_root_path . 'memberlist.' . $phpEx, 'mode=viewprofile&amp;u=' . $user_id),						'U_USER_ADMIN'		=> ($auth->acl_get('a_user')) ? append_sid("{$phpbb_admin_path}index.$phpEx", 'i=users&amp;mode=overview&amp;u=' . $user_id, true, $user->session_id) : '',					));				}				$template->assign_vars(array(					'S_DEACTIVATE'		=> ($action == 'deactivate') ? true : false,					'S_DELETE'			=> ($action == 'delete') ? true : false,				));				confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(					'i'				=> $id,					'mode'			=> $mode,					'prune'			=> 1,					'users'			=> utf8_normalize_nfc(request_var('users', '', true)),					'username'		=> utf8_normalize_nfc(request_var('username', '', true)),					'email'			=> request_var('email', ''),					'joined_select'	=> request_var('joined_select', ''),					'joined'		=> request_var('joined', ''),					'active_select'	=> request_var('active_select', ''),					'active'		=> request_var('active', ''),					'count_select'	=> request_var('count_select', ''),					'count'			=> request_var('count', ''),					'deleteposts'	=> request_var('deleteposts', 0),					'action'		=> request_var('action', ''),				)), 'confirm_body_prune.html');			}		}		$find_count = array('lt' => $user->lang['LESS_THAN'], 'eq' => $user->lang['EQUAL_TO'], 'gt' => $user->lang['MORE_THAN']);		$s_find_count = '';		foreach ($find_count as $key => $value)		{			$selected = ($key == 'eq') ? ' selected="selected"' : '';			$s_find_count .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';		}		$find_time = array('lt' => $user->lang['BEFORE'], 'gt' => $user->lang['AFTER']);		$s_find_join_time = '';		foreach ($find_time as $key => $value)		{			$s_find_join_time .= '<option value="' . $key . '">' . $value . '</option>';		}				$s_find_active_time = '';		foreach ($find_time as $key => $value)		{			$s_find_active_time .= '<option value="' . $key . '">' . $value . '</option>';		}		$template->assign_vars(array(			'U_ACTION'			=> $this->u_action,			'S_JOINED_OPTIONS'	=> $s_find_join_time,			'S_ACTIVE_OPTIONS'	=> $s_find_active_time,			'S_COUNT_OPTIONS'	=> $s_find_count,			'U_FIND_USERNAME'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=acp_prune&amp;field=users'),		));	}	/**	* Get user_ids/usernames from those being pruned	*/	function get_prune_users(&$user_ids, &$usernames)	{		global $user, $db;		$users = utf8_normalize_nfc(request_var('users', '', true));				if ($users)		{			$users = explode("\n", $users);			$where_sql = ' AND ' . $db->sql_in_set('username_clean', array_map('utf8_clean_string', $users));		}		else		{			$username = utf8_normalize_nfc(request_var('username', '', true));			$email = request_var('email', '');			$joined_select = request_var('joined_select', 'lt');			$active_select = request_var('active_select', 'lt');			$count_select = request_var('count_select', 'eq');			$joined = request_var('joined', '');			$active = request_var('active', '');			$active = ($active) ? explode('-', $active) : array();			$joined = ($joined) ? explode('-', $joined) : array();			if ((sizeof($active) && sizeof($active) != 3) || (sizeof($joined) && sizeof($joined) != 3))			{				trigger_error($user->lang['WRONG_ACTIVE_JOINED_DATE'] . adm_back_link($this->u_action), E_USER_WARNING);			}			$count = request_var('count', '');			$key_match = array('lt' => '<', 'gt' => '>', 'eq' => '=');			$sort_by_types = array('username', 'user_email', 'user_posts', 'user_regdate', 'user_lastvisit');			$where_sql = '';			$where_sql .= ($username) ? ' AND username_clean ' . $db->sql_like_expression(str_replace('*', $db->any_char, utf8_clean_string($username))) : '';			$where_sql .= ($email) ? ' AND user_email ' . $db->sql_like_expression(str_replace('*', $db->any_char, $email)) . ' ' : '';			$where_sql .= (sizeof($joined)) ? " AND user_regdate " . $key_match[$joined_select] . ' ' . gmmktime(0, 0, 0, (int) $joined[1], (int) $joined[2], (int) $joined[0]) : '';			$where_sql .= ($count !== '') ? " AND user_posts " . $key_match[$count_select] . ' ' . (int) $count . ' ' : '';			// First handle pruning of users who never logged in, last active date is 0000-00-00			if (sizeof($active) && (int) $active[0] == 0 && (int) $active[1] == 0 && (int) $active[2] == 0)			{				$where_sql .= ' AND user_lastvisit = 0';			}						else if (sizeof($active) && $active_select != 'lt')			{				$where_sql .= ' AND user_lastvisit ' . $key_match[$active_select] . ' ' . gmmktime(0, 0, 0, (int) $active[1], (int) $active[2], (int) $active[0]);			}			else if (sizeof($active))			{				$where_sql .= ' AND (user_lastvisit > 0 AND user_lastvisit < ' . gmmktime(0, 0, 0, (int) $active[1], (int) $active[2], (int) $active[0]) . ')';			}		}		// Protect the admin, do not prune if no options are given...		if (!$where_sql)		{			return;		}		// Get bot ids		$sql = 'SELECT user_id			FROM ' . BOTS_TABLE;		$result = $db->sql_query($sql);		$bot_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$bot_ids[] = $row['user_id'];		}		$db->sql_freeresult($result);		// Do not prune founder members		$sql = 'SELECT user_id, username			FROM ' . USERS_TABLE . '			WHERE user_id <> ' . ANONYMOUS . '				AND user_type <> ' . USER_FOUNDER . "			$where_sql";		$result = $db->sql_query($sql);		$where_sql = '';		$user_ids = $usernames = array();		while ($row = $db->sql_fetchrow($result))		{			// Do not prune bots and the user currently pruning.			if ($row['user_id'] != $user->data['user_id'] && !in_array($row['user_id'], $bot_ids))			{				$user_ids[] = $row['user_id'];				$usernames[$row['user_id']] = $row['username'];			}		}		$db->sql_freeresult($result);	}}?>
<?php return array(''=>'',''=>'');
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_email{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $table_prefix;		$user->add_lang('acp/email');		$this->tpl_name = 'acp_email';		$this->page_title = 'ACP_MASS_EMAIL';		$form_key = 'acp_email';		add_form_key($form_key);		// Set some vars		$submit = (isset($_POST['submit'])) ? true : false;		$error = array();		$usernames	= request_var('usernames', '', true);		$group_id	= request_var('g', 0);		$subject	= utf8_normalize_nfc(request_var('subject', '', true));		$message	= utf8_normalize_nfc(request_var('message', '', true));		// Do the job ...		if ($submit)		{			// Error checking needs to go here ... if no subject and/or no message then skip			// over the send and return to the form			$use_queue		= (isset($_POST['send_immediately'])) ? false : true;			$priority		= request_var('mail_priority_flag', MAIL_NORMAL_PRIORITY);			if (!check_form_key($form_key))			{				$error[] = $user->lang['FORM_INVALID'];			}			if (!$subject)			{				$error[] = $user->lang['NO_EMAIL_SUBJECT'];			}			if (!$message)			{				$error[] = $user->lang['NO_EMAIL_MESSAGE'];			}			if (!sizeof($error))			{				if ($usernames)				{					// If giving usernames the admin is able to email inactive users too...					$sql = 'SELECT username, user_email, user_jabber, user_notify_type, user_lang						FROM ' . USERS_TABLE . '						WHERE ' . $db->sql_in_set('username_clean', array_map('utf8_clean_string', explode("\n", $usernames))) . '							AND user_allow_massemail = 1						ORDER BY user_lang, user_notify_type'; // , SUBSTRING(user_email FROM INSTR(user_email, '@'))				}				else				{					if ($group_id)					{						$sql_ary = array(							'SELECT'	=> 'u.user_email, u.username, u.username_clean, u.user_lang, u.user_jabber, u.user_notify_type',							'FROM'		=> array(								USERS_TABLE			=> 'u',								USER_GROUP_TABLE	=> 'ug',							),							'WHERE'		=> 'ug.group_id = ' . $group_id . '								AND ug.user_pending = 0								AND u.user_id = ug.user_id								AND u.user_allow_massemail = 1								AND u.user_type IN (' . USER_NORMAL . ', ' . USER_FOUNDER . ')',							'ORDER_BY'	=> 'u.user_lang, u.user_notify_type',						);					}					else					{						$sql_ary = array(							'SELECT'	=> 'u.username, u.username_clean, u.user_email, u.user_jabber, u.user_lang, u.user_notify_type',							'FROM'		=> array(								USERS_TABLE	=> 'u',							),							'WHERE'		=> 'u.user_allow_massemail = 1								AND u.user_type IN (' . USER_NORMAL . ', ' . USER_FOUNDER . ')',							'ORDER_BY'	=> 'u.user_lang, u.user_notify_type',						);					}					// Mail banned or not					if (!isset($_REQUEST['mail_banned_flag']))					{						$sql_ary['WHERE'] .= ' AND (b.ban_id IS NULL						        OR b.ban_exclude = 1)';						$sql_ary['LEFT_JOIN'] = array(							array(								'FROM'	=> array(									BANLIST_TABLE	=> 'b',								),								'ON'	=> 'u.user_id = b.ban_userid',							),						);					}					$sql = $db->sql_build_query('SELECT', $sql_ary);				}				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				if (!$row)				{					$db->sql_freeresult($result);					trigger_error($user->lang['NO_USER'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$i = $j = 0;				// Send with BCC				// Maximum number of bcc recipients				$max_chunk_size = (int) $config['email_max_chunk_size'];				$email_list = array();				$old_lang = $row['user_lang'];				$old_notify_type = $row['user_notify_type'];				do				{					if (($row['user_notify_type'] == NOTIFY_EMAIL && $row['user_email']) ||						($row['user_notify_type'] == NOTIFY_IM && $row['user_jabber']) ||						($row['user_notify_type'] == NOTIFY_BOTH && ($row['user_email'] || $row['user_jabber'])))					{						if ($i == $max_chunk_size || $row['user_lang'] != $old_lang || $row['user_notify_type'] != $old_notify_type)						{							$i = 0;							if (sizeof($email_list))							{								$j++;							}							$old_lang = $row['user_lang'];							$old_notify_type = $row['user_notify_type'];						}						$email_list[$j][$i]['lang']		= $row['user_lang'];						$email_list[$j][$i]['method']	= $row['user_notify_type'];						$email_list[$j][$i]['email']	= $row['user_email'];						$email_list[$j][$i]['name']		= $row['username'];						$email_list[$j][$i]['jabber']	= $row['user_jabber'];						$i++;					}				}				while ($row = $db->sql_fetchrow($result));				$db->sql_freeresult($result);				// Send the messages				include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);				include_once($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$messenger = new messenger($use_queue);				$errored = false;				for ($i = 0, $size = sizeof($email_list); $i < $size; $i++)				{					$used_lang = $email_list[$i][0]['lang'];					$used_method = $email_list[$i][0]['method'];					for ($j = 0, $list_size = sizeof($email_list[$i]); $j < $list_size; $j++)					{						$email_row = $email_list[$i][$j];						$messenger->{((sizeof($email_list[$i]) == 1) ? 'to' : 'bcc')}($email_row['email'], $email_row['name']);						$messenger->im($email_row['jabber'], $email_row['name']);					}					$messenger->template('admin_send_email', $used_lang);					$messenger->anti_abuse_headers($config, $user);					$messenger->subject(htmlspecialchars_decode($subject));					$messenger->set_mail_priority($priority);					$messenger->assign_vars(array(						'CONTACT_EMAIL' => $config['board_contact'],						'MESSAGE'		=> htmlspecialchars_decode($message))					);					if (!($messenger->send($used_method)))					{						$errored = true;					}				}				unset($email_list);				$messenger->save_queue();				if ($usernames)				{					$usernames = explode("\n", $usernames);					add_log('admin', 'LOG_MASS_EMAIL', implode(', ', utf8_normalize_nfc($usernames)));				}				else				{					if ($group_id)					{						$group_name = get_group_name($group_id);					}					else					{						// Not great but the logging routine doesn't cope well with localising on the fly						$group_name = $user->lang['ALL_USERS'];					}					add_log('admin', 'LOG_MASS_EMAIL', $group_name);				}				if (!$errored)				{					$message = ($use_queue) ? $user->lang['EMAIL_SENT_QUEUE'] : $user->lang['EMAIL_SENT'];					trigger_error($message . adm_back_link($this->u_action));				}				else				{					$message = sprintf($user->lang['EMAIL_SEND_ERROR'], '<a href="' . append_sid("{$phpbb_admin_path}index.$phpEx", 'i=logs&amp;mode=critical') . '">', '</a>');					trigger_error($message . adm_back_link($this->u_action), E_USER_WARNING);				}			}		}		// Exclude bots and guests...		$sql = 'SELECT group_id			FROM ' . GROUPS_TABLE . "			WHERE group_name IN ('BOTS', 'GUESTS')";		$result = $db->sql_query($sql);		$exclude = array();		while ($row = $db->sql_fetchrow($result))		{			$exclude[] = $row['group_id'];		}		$db->sql_freeresult($result);		$select_list = '<option value="0"' . ((!$group_id) ? ' selected="selected"' : '') . '>' . $user->lang['ALL_USERS'] . '</option>';		$select_list .= group_select_options($group_id, $exclude);		$s_priority_options = '<option value="' . MAIL_LOW_PRIORITY . '">' . $user->lang['MAIL_LOW_PRIORITY'] . '</option>';		$s_priority_options .= '<option value="' . MAIL_NORMAL_PRIORITY . '" selected="selected">' . $user->lang['MAIL_NORMAL_PRIORITY'] . '</option>';		$s_priority_options .= '<option value="' . MAIL_HIGH_PRIORITY . '">' . $user->lang['MAIL_HIGH_PRIORITY'] . '</option>';		$template->assign_vars(array(			'S_WARNING'				=> (sizeof($error)) ? true : false,			'WARNING_MSG'			=> (sizeof($error)) ? implode('<br />', $error) : '',			'U_ACTION'				=> $this->u_action,			'S_GROUP_OPTIONS'		=> $select_list,			'USERNAMES'				=> $usernames,			'U_FIND_USERNAME'		=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=acp_email&amp;field=usernames'),			'SUBJECT'				=> $subject,			'MESSAGE'				=> $message,			'S_PRIORITY_OPTIONS'	=> $s_priority_options)		);	}}?>
<?php/**** @package dbal* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}include_once($phpbb_root_path . 'includes/db/dbal.' . $phpEx);/*** Oracle Database Abstraction Layer* @package dbal*/class dbal_oracle extends dbal{	var $last_query_text = '';	/**	* Connect to server	*/	function sql_connect($sqlserver, $sqluser, $sqlpassword, $database, $port = false, $persistency = false, $new_link = false)	{		$this->persistency = $persistency;		$this->user = $sqluser;		$this->server = $sqlserver . (($port) ? ':' . $port : '');		$this->dbname = $database;		$connect = $database;		// support for "easy connect naming"		if ($sqlserver !== '' && $sqlserver !== '/')		{			if (substr($sqlserver, -1, 1) == '/')			{				$sqlserver == substr($sqlserver, 0, -1);			}			$connect = $sqlserver . (($port) ? ':' . $port : '') . '/' . $database;		}		$this->db_connect_id = ($new_link) ? @ocinlogon($this->user, $sqlpassword, $connect, 'UTF8') : (($this->persistency) ? @ociplogon($this->user, $sqlpassword, $connect, 'UTF8') : @ocilogon($this->user, $sqlpassword, $connect, 'UTF8'));		return ($this->db_connect_id) ? $this->db_connect_id : $this->sql_error('');	}	/**	* Version information about used database	* @param bool $raw if true, only return the fetched sql_server_version	* @param bool $use_cache forced to false for Oracle	* @return string sql server version	*/	function sql_server_info($raw = false, $use_cache = true)	{		/**		* force $use_cache false.  I didn't research why the caching code below is commented out		* but I assume its because the Oracle extension provides a direct method to access it		* without a query.		*/		$use_cache = false;/*		global $cache;		if (empty($cache) || ($this->sql_server_version = $cache->get('oracle_version')) === false)		{			$result = @ociparse($this->db_connect_id, 'SELECT * FROM v$version WHERE banner LIKE \'Oracle%\'');			@ociexecute($result, OCI_DEFAULT);			@ocicommit($this->db_connect_id);			$row = array();			@ocifetchinto($result, $row, OCI_ASSOC + OCI_RETURN_NULLS);			@ocifreestatement($result);			$this->sql_server_version = trim($row['BANNER']);			$cache->put('oracle_version', $this->sql_server_version);		}*/		$this->sql_server_version = @ociserverversion($this->db_connect_id);		return $this->sql_server_version;	}	/**	* SQL Transaction	* @access private	*/	function _sql_transaction($status = 'begin')	{		switch ($status)		{			case 'begin':				return true;			break;			case 'commit':				return @ocicommit($this->db_connect_id);			break;			case 'rollback':				return @ocirollback($this->db_connect_id);			break;		}		return true;	}	/**	* Oracle specific code to handle the fact that it does not compare columns properly	* @access private	*/	function _rewrite_col_compare($args)	{		if (sizeof($args) == 4)		{			if ($args[2] == '=')			{				return '(' . $args[0] . ' OR (' . $args[1] . ' is NULL AND ' . $args[3] . ' is NULL))';			}			else if ($args[2] == '<>')			{				// really just a fancy way of saying foo <> bar or (foo is NULL XOR bar is NULL) but SQL has no XOR :P				return '(' . $args[0] . ' OR ((' . $args[1] . ' is NULL AND ' . $args[3] . ' is NOT NULL) OR (' . $args[1] . ' is NOT NULL AND ' . $args[3] . ' is NULL)))';			}		}		else		{			return $this->_rewrite_where($args[0]);		}	}	/**	* Oracle specific code to handle it's lack of sanity	* @access private	*/	function _rewrite_where($where_clause)	{		preg_match_all('/\s*(AND|OR)?\s*([\w_.()]++)\s*(?:(=|<[=>]?|>=?|LIKE)\s*((?>\'(?>[^\']++|\'\')*+\'|[\d-.()]+))|((NOT )?IN\s*\((?>\'(?>[^\']++|\'\')*+\',? ?|[\d-.]+,? ?)*+\)))/', $where_clause, $result, PREG_SET_ORDER);		$out = '';		foreach ($result as $val)		{			if (!isset($val[5]))			{				if ($val[4] !== "''")				{					$out .= $val[0];				}				else				{					$out .= ' ' . $val[1] . ' ' . $val[2];					if ($val[3] == '=')					{						$out .= ' is NULL';					}					else if ($val[3] == '<>')					{						$out .= ' is NOT NULL';					}				}			}			else			{				$in_clause = array();				$sub_exp = substr($val[5], strpos($val[5], '(') + 1, -1);				$extra = false;				preg_match_all('/\'(?>[^\']++|\'\')*+\'|[\d-.]++/', $sub_exp, $sub_vals, PREG_PATTERN_ORDER);				$i = 0;				foreach ($sub_vals[0] as $sub_val)				{					// two things:					// 1) This determines if an empty string was in the IN clausing, making us turn it into a NULL comparison					// 2) This fixes the 1000 list limit that Oracle has (ORA-01795)					if ($sub_val !== "''")					{						$in_clause[(int) $i++/1000][] = $sub_val;					}					else					{						$extra = true;					}				}				if (!$extra && $i < 1000)				{					$out .= $val[0];				}				else				{					$out .= ' ' . $val[1] . '(';					$in_array = array();					// constuct each IN() clause					foreach ($in_clause as $in_values)					{						$in_array[] = $val[2] . ' ' . (isset($val[6]) ? $val[6] : '') . 'IN(' . implode(', ', $in_values) . ')';					}					// Join the IN() clauses against a few ORs (IN is just a nicer OR anyway)					$out .= implode(' OR ', $in_array);					// handle the empty string case					if ($extra)					{						$out .= ' OR ' . $val[2] . ' is ' . (isset($val[6]) ? $val[6] : '') . 'NULL';					}					$out .= ')';					unset($in_array, $in_clause);				}			}		}		return $out;	}	/**	* Base query method	*	* @param	string	$query		Contains the SQL query which shall be executed	* @param	int		$cache_ttl	Either 0 to avoid caching or the time in seconds which the result shall be kept in cache	* @return	mixed				When casted to bool the returned value returns true on success and false on failure	*	* @access	public	*/	function sql_query($query = '', $cache_ttl = 0)	{		if ($query != '')		{			global $cache;			// EXPLAIN only in extra debug mode			if (defined('DEBUG_EXTRA'))			{				$this->sql_report('start', $query);			}			$this->last_query_text = $query;			$this->query_result = ($cache_ttl && method_exists($cache, 'sql_load')) ? $cache->sql_load($query) : false;			$this->sql_add_num_queries($this->query_result);			if ($this->query_result === false)			{				$in_transaction = false;				if (!$this->transaction)				{					$this->sql_transaction('begin');				}				else				{					$in_transaction = true;				}				$array = array();				// We overcome Oracle's 4000 char limit by binding vars				if (strlen($query) > 4000)				{					if (preg_match('/^(INSERT INTO[^(]++)\\(([^()]+)\\) VALUES[^(]++\\((.*?)\\)$/sU', $query, $regs))					{						if (strlen($regs[3]) > 4000)						{							$cols = explode(', ', $regs[2]);							preg_match_all('/\'(?:[^\']++|\'\')*+\'|[\d-.]+/', $regs[3], $vals, PREG_PATTERN_ORDER);/*						The code inside this comment block breaks clob handling, but does allow the						database restore script to work.  If you want to allow no posts longer than 4KB						and/or need the db restore script, uncomment this.							if (sizeof($cols) !== sizeof($vals))							{								// Try to replace some common data we know is from our restore script or from other sources								$regs[3] = str_replace("'||chr(47)||'", '/', $regs[3]);								$_vals = explode(', ', $regs[3]);								$vals = array();								$is_in_val = false;								$i = 0;								$string = '';								foreach ($_vals as $value)								{									if (strpos($value, "'") === false && !$is_in_val)									{										$vals[$i++] = $value;										continue;									}									if (substr($value, -1) === "'")									{										$vals[$i] = $string . (($is_in_val) ? ', ' : '') . $value;										$string = '';										$is_in_val = false;										if ($vals[$i][0] !== "'")										{											$vals[$i] = "''" . $vals[$i];										}										$i++;										continue;									}									else									{										$string .= (($is_in_val) ? ', ' : '') . $value;										$is_in_val = true;									}								}								if ($string)								{									// New value if cols != value									$vals[(sizeof($cols) !== sizeof($vals)) ? $i : $i - 1] .= $string;								}								$vals = array(0 => $vals);							}*/							$inserts = $vals[0];							unset($vals);							foreach ($inserts as $key => $value)							{								if (!empty($value) && $value[0] === "'" && strlen($value) > 4002) // check to see if this thing is greater than the max + 'x2								{									$inserts[$key] = ':' . strtoupper($cols[$key]);									$array[$inserts[$key]] = str_replace("''", "'", substr($value, 1, -1));								}							}							$query = $regs[1] . '(' . $regs[2] . ') VALUES (' . implode(', ', $inserts) . ')';						}					}					else if (preg_match_all('/^(UPDATE [\\w_]++\\s+SET )([\\w_]++\\s*=\\s*(?:\'(?:[^\']++|\'\')*+\'|[\d-.]+)(?:,\\s*[\\w_]++\\s*=\\s*(?:\'(?:[^\']++|\'\')*+\'|[\d-.]+))*+)\\s+(WHERE.*)$/s', $query, $data, PREG_SET_ORDER))					{						if (strlen($data[0][2]) > 4000)						{							$update = $data[0][1];							$where = $data[0][3];							preg_match_all('/([\\w_]++)\\s*=\\s*(\'(?:[^\']++|\'\')*+\'|[\d-.]++)/', $data[0][2], $temp, PREG_SET_ORDER);							unset($data);							$cols = array();							foreach ($temp as $value)							{								if (!empty($value[2]) && $value[2][0] === "'" && strlen($value[2]) > 4002) // check to see if this thing is greater than the max + 'x2								{									$cols[] = $value[1] . '=:' . strtoupper($value[1]);									$array[$value[1]] = str_replace("''", "'", substr($value[2], 1, -1));								}								else								{									$cols[] = $value[1] . '=' . $value[2];								}							}							$query = $update . implode(', ', $cols) . ' ' . $where;							unset($cols);						}					}				}				switch (substr($query, 0, 6))				{					case 'DELETE':						if (preg_match('/^(DELETE FROM [\w_]++ WHERE)((?:\s*(?:AND|OR)?\s*[\w_]+\s*(?:(?:=|<>)\s*(?>\'(?>[^\']++|\'\')*+\'|[\d-.]+)|(?:NOT )?IN\s*\((?>\'(?>[^\']++|\'\')*+\',? ?|[\d-.]+,? ?)*+\)))*+)$/', $query, $regs))						{							$query = $regs[1] . $this->_rewrite_where($regs[2]);							unset($regs);						}					break;					case 'UPDATE':						if (preg_match('/^(UPDATE [\\w_]++\\s+SET [\\w_]+\s*=\s*(?:\'(?:[^\']++|\'\')*+\'|[\d-.]++|:\w++)(?:, [\\w_]+\s*=\s*(?:\'(?:[^\']++|\'\')*+\'|[\d-.]++|:\w++))*+\\s+WHERE)(.*)$/s',  $query, $regs))						{							$query = $regs[1] . $this->_rewrite_where($regs[2]);							unset($regs);						}					break;					case 'SELECT':						$query = preg_replace_callback('/([\w_.]++)\s*(?:(=|<>)\s*(?>\'(?>[^\']++|\'\')*+\'|[\d-.]++|([\w_.]++))|(?:NOT )?IN\s*\((?>\'(?>[^\']++|\'\')*+\',? ?|[\d-.]++,? ?)*+\))/', array($this, '_rewrite_col_compare'), $query);					break;				}				$this->query_result = @ociparse($this->db_connect_id, $query);				foreach ($array as $key => $value)				{					@ocibindbyname($this->query_result, $key, $array[$key], -1);				}				$success = @ociexecute($this->query_result, OCI_DEFAULT);				if (!$success)				{					$this->sql_error($query);					$this->query_result = false;				}				else				{					if (!$in_transaction)					{						$this->sql_transaction('commit');					}				}				if (defined('DEBUG_EXTRA'))				{					$this->sql_report('stop', $query);				}				if ($cache_ttl && method_exists($cache, 'sql_save'))				{					$this->open_queries[(int) $this->query_result] = $this->query_result;					$cache->sql_save($query, $this->query_result, $cache_ttl);				}				else if (strpos($query, 'SELECT') === 0 && $this->query_result)				{					$this->open_queries[(int) $this->query_result] = $this->query_result;				}			}			else if (defined('DEBUG_EXTRA'))			{				$this->sql_report('fromcache', $query);			}		}		else		{			return false;		}		return $this->query_result;	}	/**	* Build LIMIT query	*/	function _sql_query_limit($query, $total, $offset = 0, $cache_ttl = 0)	{		$this->query_result = false;		$query = 'SELECT * FROM (SELECT /*+ FIRST_ROWS */ rownum AS xrownum, a.* FROM (' . $query . ') a WHERE rownum <= ' . ($offset + $total) . ') WHERE xrownum >= ' . $offset;		return $this->sql_query($query, $cache_ttl);	}	/**	* Return number of affected rows	*/	function sql_affectedrows()	{		return ($this->query_result) ? @ocirowcount($this->query_result) : false;	}	/**	* Fetch current row	*/	function sql_fetchrow($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_fetchrow($query_id);		}		if ($query_id !== false)		{			$row = array();			$result = @ocifetchinto($query_id, $row, OCI_ASSOC + OCI_RETURN_NULLS);			if (!$result || !$row)			{				return false;			}			$result_row = array();			foreach ($row as $key => $value)			{				// Oracle treats empty strings as null				if (is_null($value))				{					$value = '';				}				// OCI->CLOB?				if (is_object($value))				{					$value = $value->load();				}				$result_row[strtolower($key)] = $value;			}			return $result_row;		}		return false;	}	/**	* Seek to given row number	* rownum is zero-based	*/	function sql_rowseek($rownum, &$query_id)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_rowseek($rownum, $query_id);		}		if ($query_id === false)		{			return false;		}		// Reset internal pointer		@ociexecute($query_id, OCI_DEFAULT);		// We do not fetch the row for rownum == 0 because then the next resultset would be the second row		for ($i = 0; $i < $rownum; $i++)		{			if (!$this->sql_fetchrow($query_id))			{				return false;			}		}		return true;	}	/**	* Get last inserted id after insert statement	*/	function sql_nextid()	{		$query_id = $this->query_result;		if ($query_id !== false && $this->last_query_text != '')		{			if (preg_match('#^INSERT[\t\n ]+INTO[\t\n ]+([a-z0-9\_\-]+)#is', $this->last_query_text, $tablename))			{				$query = 'SELECT ' . $tablename[1] . '_seq.currval FROM DUAL';				$stmt = @ociparse($this->db_connect_id, $query);				@ociexecute($stmt, OCI_DEFAULT);				$temp_result = @ocifetchinto($stmt, $temp_array, OCI_ASSOC + OCI_RETURN_NULLS);				@ocifreestatement($stmt);				if ($temp_result)				{					return $temp_array['CURRVAL'];				}				else				{					return false;				}			}		}		return false;	}	/**	* Free sql result	*/	function sql_freeresult($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_freeresult($query_id);		}		if (isset($this->open_queries[(int) $query_id]))		{			unset($this->open_queries[(int) $query_id]);			return @ocifreestatement($query_id);		}		return false;	}	/**	* Escape string used in sql query	*/	function sql_escape($msg)	{		return str_replace(array("'", "\0"), array("''", ''), $msg);	}	/**	* Build LIKE expression	* @access private	*/	function _sql_like_expression($expression)	{		return $expression . " ESCAPE '\\'";	}	function _sql_custom_build($stage, $data)	{		return $data;	}	function _sql_bit_and($column_name, $bit, $compare = '')	{		return 'BITAND(' . $column_name . ', ' . (1 << $bit) . ')' . (($compare) ? ' ' . $compare : '');	}	function _sql_bit_or($column_name, $bit, $compare = '')	{		return 'BITOR(' . $column_name . ', ' . (1 << $bit) . ')' . (($compare) ? ' ' . $compare : '');	}	/**	* return sql error array	* @access private	*/	function _sql_error()	{		$error = @ocierror();		$error = (!$error) ? @ocierror($this->query_result) : $error;		$error = (!$error) ? @ocierror($this->db_connect_id) : $error;		if ($error)		{			$this->last_error_result = $error;		}		else		{			$error = (isset($this->last_error_result) && $this->last_error_result) ? $this->last_error_result : array();		}		return $error;	}	/**	* Close sql connection	* @access private	*/	function _sql_close()	{		return @ocilogoff($this->db_connect_id);	}	/**	* Build db-specific report	* @access private	*/	function _sql_report($mode, $query = '')	{		switch ($mode)		{			case 'start':				$html_table = false;				// Grab a plan table, any will do				$sql = "SELECT table_name					FROM USER_TABLES					WHERE table_name LIKE '%PLAN_TABLE%'";				$stmt = ociparse($this->db_connect_id, $sql);				ociexecute($stmt);				$result = array();				if (ocifetchinto($stmt, $result, OCI_ASSOC + OCI_RETURN_NULLS))				{					$table = $result['TABLE_NAME'];					// This is the statement_id that will allow us to track the plan					$statement_id = substr(md5($query), 0, 30);					// Remove any stale plans					$stmt2 = ociparse($this->db_connect_id, "DELETE FROM $table WHERE statement_id='$statement_id'");					ociexecute($stmt2);					ocifreestatement($stmt2);					// Explain the plan					$sql = "EXPLAIN PLAN						SET STATEMENT_ID = '$statement_id'						FOR $query";					$stmt2 = ociparse($this->db_connect_id, $sql);					ociexecute($stmt2);					ocifreestatement($stmt2);					// Get the data from the plan					$sql = "SELECT operation, options, object_name, object_type, cardinality, cost						FROM plan_table						START WITH id = 0 AND statement_id = '$statement_id'						CONNECT BY PRIOR id = parent_id							AND statement_id = '$statement_id'";					$stmt2 = ociparse($this->db_connect_id, $sql);					ociexecute($stmt2);					$row = array();					while (ocifetchinto($stmt2, $row, OCI_ASSOC + OCI_RETURN_NULLS))					{						$html_table = $this->sql_report('add_select_row', $query, $html_table, $row);					}					ocifreestatement($stmt2);					// Remove the plan we just made, we delete them on request anyway					$stmt2 = ociparse($this->db_connect_id, "DELETE FROM $table WHERE statement_id='$statement_id'");					ociexecute($stmt2);					ocifreestatement($stmt2);				}				ocifreestatement($stmt);				if ($html_table)				{					$this->html_hold .= '</table>';				}			break;			case 'fromcache':				$endtime = explode(' ', microtime());				$endtime = $endtime[0] + $endtime[1];				$result = @ociparse($this->db_connect_id, $query);				$success = @ociexecute($result, OCI_DEFAULT);				$row = array();				while (@ocifetchinto($result, $row, OCI_ASSOC + OCI_RETURN_NULLS))				{					// Take the time spent on parsing rows into account				}				@ocifreestatement($result);				$splittime = explode(' ', microtime());				$splittime = $splittime[0] + $splittime[1];				$this->sql_report('record_fromcache', $query, $endtime, $splittime);			break;		}	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_php_info_info{	function module()	{		return array(			'filename'	=> 'acp_php_info',			'title'		=> 'ACP_PHP_INFO',			'version'	=> '1.0.0',			'modes'		=> array(				'info'		=> array('title' => 'ACP_PHP_INFO', 'auth' => 'acl_a_phpinfo', 'cat' => array('ACP_GENERAL_TASKS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/*** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Private Message Class** $_REQUEST['folder'] display folder with the id used* $_REQUEST['folder'] inbox|outbox|sentbox display folder with the associated name**	Display Messages (default to inbox) - mode=view*	Display single message - mode=view&p=[msg_id] or &p=[msg_id] (short linkage)**	if the folder id with (&f=[folder_id]) is used when displaying messages, one query will be saved. If it is not used, phpBB needs to grab*	the folder id first in order to display the input boxes and folder names and such things. ;) phpBB always checks this against the database to make*	sure the user is able to view the message.**	Composing Messages (mode=compose):*		To specific user (u=[user_id])*		To specific group (g=[group_id])*		Quoting a post (action=quotepost&p=[post_id])*		Quoting a PM (action=quote&p=[msg_id])*		Forwarding a PM (action=forward&p=[msg_id])** @package ucp*/class ucp_pm{	var $u_action;	function main($id, $mode)	{		global $user, $template, $phpbb_root_path, $auth, $phpEx, $db, $config;		if (!$user->data['is_registered'])		{			trigger_error('NO_MESSAGE');		}		// Is PM disabled?		if (!$config['allow_privmsg'])		{			trigger_error('PM_DISABLED');		}		$user->add_lang('posting');		$template->assign_var('S_PRIVMSGS', true);		// Folder directly specified?		$folder_specified = request_var('folder', '');		if (!in_array($folder_specified, array('inbox', 'outbox', 'sentbox')))		{			$folder_specified = (int) $folder_specified;		}		else		{			$folder_specified = ($folder_specified == 'inbox') ? PRIVMSGS_INBOX : (($folder_specified == 'outbox') ? PRIVMSGS_OUTBOX : PRIVMSGS_SENTBOX);		}		if (!$folder_specified)		{			$mode = (!$mode) ? request_var('mode', 'view') : $mode;		}		else		{			$mode = 'view';		}		include($phpbb_root_path . 'includes/functions_privmsgs.' . $phpEx);		switch ($mode)		{			// New private messages popup			case 'popup':				$l_new_message = '';				if ($user->data['is_registered'])				{					if ($user->data['user_new_privmsg'])					{						$l_new_message = ($user->data['user_new_privmsg'] == 1) ? $user->lang['YOU_NEW_PM'] : $user->lang['YOU_NEW_PMS'];					}					else					{						$l_new_message = $user->lang['YOU_NO_NEW_PM'];					}				}				$template->assign_vars(array(					'MESSAGE'			=> $l_new_message,					'S_NOT_LOGGED_IN'	=> ($user->data['user_id'] == ANONYMOUS) ? true : false,					'CLICK_TO_VIEW'		=> sprintf($user->lang['CLICK_VIEW_PRIVMSG'], '<a href="' . append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=inbox') . '" onclick="jump_to_inbox(this.href); return false;">', '</a>'),					'U_INBOX'			=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=inbox'),					'UA_INBOX'			=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&folder=inbox', false))				);				$tpl_file = 'ucp_pm_popup';			break;			// Compose message			case 'compose':				$action = request_var('action', 'post');				$user_folders = get_folder($user->data['user_id']);				if (!$auth->acl_get('u_sendpm'))				{					// trigger_error('NO_AUTH_SEND_MESSAGE');					$template->assign_vars(array(						'S_NO_AUTH_SEND_MESSAGE'	=> true,						'S_COMPOSE_PM_VIEW'			=> true,					));					$tpl_file = 'ucp_pm_viewfolder';					break;				}				include($phpbb_root_path . 'includes/ucp/ucp_pm_compose.' . $phpEx);				compose_pm($id, $mode, $action, $user_folders);				$tpl_file = 'posting_body';			break;			case 'options':				set_user_message_limit();				get_folder($user->data['user_id']);				include($phpbb_root_path . 'includes/ucp/ucp_pm_options.' . $phpEx);				message_options($id, $mode, $global_privmsgs_rules, $global_rule_conditions);				$tpl_file = 'ucp_pm_options';			break;			case 'drafts':				get_folder($user->data['user_id']);				$this->p_name = 'pm';				// Call another module... please do not try this at home... Hoochie Coochie Man				include($phpbb_root_path . 'includes/ucp/ucp_main.' . $phpEx);				$module = new ucp_main($this);				$module->u_action = $this->u_action;				$module->main($id, $mode);				$this->tpl_name = $module->tpl_name;				$this->page_title = 'UCP_PM_DRAFTS';				unset($module);				return;			break;			case 'view':				set_user_message_limit();				if ($folder_specified)				{					$folder_id = $folder_specified;					$action = 'view_folder';				}				else				{					$folder_id = request_var('f', PRIVMSGS_NO_BOX);					$action = request_var('action', 'view_folder');				}				$msg_id = request_var('p', 0);				$view	= request_var('view', '');				// View message if specified				if ($msg_id)				{					$action = 'view_message';				}				if (!$auth->acl_get('u_readpm'))				{					trigger_error('NO_AUTH_READ_MESSAGE');				}				// Do not allow hold messages to be seen				if ($folder_id == PRIVMSGS_HOLD_BOX)				{					trigger_error('NO_AUTH_READ_HOLD_MESSAGE');				}				// First Handle Mark actions and moving messages				$submit_mark	= (isset($_POST['submit_mark'])) ? true : false;				$move_pm		= (isset($_POST['move_pm'])) ? true : false;				$mark_option	= request_var('mark_option', '');				$dest_folder	= request_var('dest_folder', PRIVMSGS_NO_BOX);				// Is moving PM triggered through mark options?				if (!in_array($mark_option, array('mark_important', 'delete_marked')) && $submit_mark)				{					$move_pm = true;					$dest_folder = (int) $mark_option;					$submit_mark = false;				}				// Move PM				if ($move_pm)				{					$move_msg_ids	= (isset($_POST['marked_msg_id'])) ? request_var('marked_msg_id', array(0)) : array();					$cur_folder_id	= request_var('cur_folder_id', PRIVMSGS_NO_BOX);					if (move_pm($user->data['user_id'], $user->data['message_limit'], $move_msg_ids, $dest_folder, $cur_folder_id))					{						// Return to folder view if single message moved						if ($action == 'view_message')						{							$msg_id		= 0;							$folder_id	= request_var('cur_folder_id', PRIVMSGS_NO_BOX);							$action		= 'view_folder';						}					}				}				// Message Mark Options				if ($submit_mark)				{					handle_mark_actions($user->data['user_id'], $mark_option);				}				// If new messages arrived, place them into the appropriate folder				$num_not_moved = $num_removed = 0;				$release = request_var('release', 0);				if ($user->data['user_new_privmsg'] && ($action == 'view_folder' || $action == 'view_message'))				{					$return = place_pm_into_folder($global_privmsgs_rules, $release);					$num_not_moved = $return['not_moved'];					$num_removed = $return['removed'];				}				if (!$msg_id && $folder_id == PRIVMSGS_NO_BOX)				{					$folder_id = PRIVMSGS_INBOX;				}				else if ($msg_id && $folder_id == PRIVMSGS_NO_BOX)				{					$sql = 'SELECT folder_id						FROM ' . PRIVMSGS_TO_TABLE . "						WHERE msg_id = $msg_id							AND folder_id <> " . PRIVMSGS_NO_BOX . '							AND user_id = ' . $user->data['user_id'];					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if (!$row)					{						trigger_error('NO_MESSAGE');					}					$folder_id = (int) $row['folder_id'];				}				$message_row = array();				if ($action == 'view_message' && $msg_id)				{					// Get Message user want to see					if ($view == 'next' || $view == 'previous')					{						$sql_condition = ($view == 'next') ? '>' : '<';						$sql_ordering = ($view == 'next') ? 'ASC' : 'DESC';						$sql = 'SELECT t.msg_id							FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p, ' . PRIVMSGS_TABLE . " p2							WHERE p2.msg_id = $msg_id								AND t.folder_id = $folder_id								AND t.user_id = " . $user->data['user_id'] . "								AND t.msg_id = p.msg_id								AND p.message_time $sql_condition p2.message_time							ORDER BY p.message_time $sql_ordering";						$result = $db->sql_query_limit($sql, 1);						$row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$row)						{							$message = ($view == 'next') ? 'NO_NEWER_PM' : 'NO_OLDER_PM';							trigger_error($message);						}						else						{							$msg_id = $row['msg_id'];						}					}					$sql = 'SELECT t.*, p.*, u.*						FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p, ' . USERS_TABLE . ' u						WHERE t.user_id = ' . $user->data['user_id'] . "							AND p.author_id = u.user_id							AND t.folder_id = $folder_id							AND t.msg_id = p.msg_id							AND p.msg_id = $msg_id";					$result = $db->sql_query($sql);					$message_row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if (!$message_row)					{						trigger_error('NO_MESSAGE');					}					// Update unread status					update_unread_status($message_row['pm_unread'], $message_row['msg_id'], $user->data['user_id'], $folder_id);				}				$folder = get_folder($user->data['user_id'], $folder_id);				$s_folder_options = $s_to_folder_options = '';				foreach ($folder as $f_id => $folder_ary)				{					$option = '<option' . ((!in_array($f_id, array(PRIVMSGS_INBOX, PRIVMSGS_OUTBOX, PRIVMSGS_SENTBOX))) ? ' class="sep"' : '') . ' value="' . $f_id . '"' . (($f_id == $folder_id) ? ' selected="selected"' : '') . '>' . $folder_ary['folder_name'] . (($folder_ary['unread_messages']) ? ' [' . $folder_ary['unread_messages'] . '] ' : '') . '</option>';					$s_to_folder_options .= ($f_id != PRIVMSGS_OUTBOX && $f_id != PRIVMSGS_SENTBOX) ? $option : '';					$s_folder_options .= $option;				}				clean_sentbox($folder[PRIVMSGS_SENTBOX]['num_messages']);				// Header for message view - folder and so on				$folder_status = get_folder_status($folder_id, $folder);				$template->assign_vars(array(					'CUR_FOLDER_ID'			=> $folder_id,					'CUR_FOLDER_NAME'		=> $folder_status['folder_name'],					'NUM_NOT_MOVED'			=> $num_not_moved,					'NUM_REMOVED'			=> $num_removed,					'RELEASE_MESSAGE_INFO'	=> sprintf($user->lang['RELEASE_MESSAGES'], '<a href="' . $this->u_action . '&amp;folder=' . $folder_id . '&amp;release=1">', '</a>'),					'NOT_MOVED_MESSAGES'	=> ($num_not_moved == 1) ? $user->lang['NOT_MOVED_MESSAGE'] : sprintf($user->lang['NOT_MOVED_MESSAGES'], $num_not_moved),					'RULE_REMOVED_MESSAGES'	=> ($num_removed == 1) ? $user->lang['RULE_REMOVED_MESSAGE'] : sprintf($user->lang['RULE_REMOVED_MESSAGES'], $num_removed),					'S_FOLDER_OPTIONS'		=> $s_folder_options,					'S_TO_FOLDER_OPTIONS'	=> $s_to_folder_options,					'S_FOLDER_ACTION'		=> $this->u_action . '&amp;action=view_folder',					'S_PM_ACTION'			=> $this->u_action . '&amp;action=' . $action,					'U_INBOX'				=> $this->u_action . '&amp;folder=inbox',					'U_OUTBOX'				=> $this->u_action . '&amp;folder=outbox',					'U_SENTBOX'				=> $this->u_action . '&amp;folder=sentbox',					'U_CREATE_FOLDER'		=> $this->u_action . '&amp;mode=options',					'U_CURRENT_FOLDER'		=> $this->u_action . '&amp;folder=' . $folder_id,					'S_IN_INBOX'			=> ($folder_id == PRIVMSGS_INBOX) ? true : false,					'S_IN_OUTBOX'			=> ($folder_id == PRIVMSGS_OUTBOX) ? true : false,					'S_IN_SENTBOX'			=> ($folder_id == PRIVMSGS_SENTBOX) ? true : false,					'FOLDER_STATUS'				=> $folder_status['message'],					'FOLDER_MAX_MESSAGES'		=> $folder_status['max'],					'FOLDER_CUR_MESSAGES'		=> $folder_status['cur'],					'FOLDER_REMAINING_MESSAGES'	=> $folder_status['remaining'],					'FOLDER_PERCENT'			=> $folder_status['percent'])				);				if ($action == 'view_folder')				{					include($phpbb_root_path . 'includes/ucp/ucp_pm_viewfolder.' . $phpEx);					view_folder($id, $mode, $folder_id, $folder);					$tpl_file = 'ucp_pm_viewfolder';				}				else if ($action == 'view_message')				{					$template->assign_vars(array(						'S_VIEW_MESSAGE'	=> true,						'MSG_ID'			=> $msg_id)					);					if (!$msg_id)					{						trigger_error('NO_MESSAGE');					}					include($phpbb_root_path . 'includes/ucp/ucp_pm_viewmessage.' . $phpEx);					view_message($id, $mode, $folder_id, $msg_id, $folder, $message_row);					$tpl_file = ($view == 'print') ? 'ucp_pm_viewmessage_print' : 'ucp_pm_viewmessage';				}			break;			default:				trigger_error('NO_ACTION_MODE', E_USER_ERROR);			break;		}		$template->assign_vars(array(			'L_TITLE'			=> $user->lang['UCP_PM_' . strtoupper($mode)],			'S_UCP_ACTION'		=> $this->u_action . ((isset($action)) ? "&amp;action=$action" : ''))		);		// Set desired template		$this->tpl_name = $tpl_file;		$this->page_title = 'UCP_PM_' . strtoupper($mode);	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_language{	var $u_action;	var $main_files;	var $language_header = '';	var $lang_header = '';	var $language_file = '';	var $language_directory = '';	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $table_prefix;		global $safe_mode, $file_uploads;		include_once($phpbb_root_path . 'includes/functions_user.' . $phpEx);		$this->default_variables();		// Check and set some common vars		$action		= (isset($_POST['update_details'])) ? 'update_details' : '';		$action		= (isset($_POST['download_file'])) ? 'download_file' : $action;		$action		= (isset($_POST['upload_file'])) ? 'upload_file' : $action;		$action		= (isset($_POST['upload_data'])) ? 'upload_data' : $action;		$action		= (isset($_POST['submit_file'])) ? 'submit_file' : $action;		$action		= (isset($_POST['remove_store'])) ? 'details' : $action;		$submit = (empty($action) && !isset($_POST['update']) && !isset($_POST['test_connection'])) ? false : true;		$action = (empty($action)) ? request_var('action', '') : $action;		$form_name = 'acp_lang';		add_form_key('acp_lang');		$lang_id = request_var('id', 0);		if (isset($_POST['missing_file']))		{			$missing_file = request_var('missing_file', array('' => 0));			list($_REQUEST['language_file'], ) = array_keys($missing_file);		}		$selected_lang_file = request_var('language_file', '|common.' . $phpEx);		list($this->language_directory, $this->language_file) = explode('|', $selected_lang_file);		$this->language_directory = basename($this->language_directory);		$this->language_file = basename($this->language_file);		$user->add_lang('acp/language');		$this->tpl_name = 'acp_language';		$this->page_title = 'ACP_LANGUAGE_PACKS';		if ($submit && $action == 'upload_data' && request_var('test_connection', ''))		{			$test_connection = false;			$action = 'upload_file';			$method = request_var('method', '');			include_once($phpbb_root_path . 'includes/functions_transfer.' . $phpEx);			switch ($method)			{				case 'ftp':					$transfer = new ftp(request_var('host', ''), request_var('username', ''), request_var('password', ''), request_var('root_path', ''), request_var('port', ''), request_var('timeout', ''));				break;				case 'ftp_fsock':					$transfer = new ftp_fsock(request_var('host', ''), request_var('username', ''), request_var('password', ''), request_var('root_path', ''), request_var('port', ''), request_var('timeout', ''));				break;				default:					trigger_error($user->lang['INVALID_UPLOAD_METHOD'], E_USER_ERROR);				break;			}			$test_connection = $transfer->open_session();			$transfer->close_session();		}		switch ($action)		{			case 'upload_file':				include_once($phpbb_root_path . 'includes/functions_transfer.' . $phpEx);				$method = request_var('method', '');				if (!class_exists($method))				{					trigger_error('Method does not exist.', E_USER_ERROR);				}				$requested_data = call_user_func(array($method, 'data'));				foreach ($requested_data as $data => $default)				{					$template->assign_block_vars('data', array(						'DATA'		=> $data,						'NAME'		=> $user->lang[strtoupper($method . '_' . $data)],						'EXPLAIN'	=> $user->lang[strtoupper($method . '_' . $data) . '_EXPLAIN'],						'DEFAULT'	=> (!empty($_REQUEST[$data])) ? request_var($data, '') : $default					));				}				$hidden_data = build_hidden_fields(array(					'file'			=> $this->language_file,					'dir'			=> $this->language_directory,					'language_file'	=> $selected_lang_file,					'method'		=> $method)				);				$hidden_data .= build_hidden_fields(array('entry' => $_POST['entry']), true, STRIP);				$template->assign_vars(array(					'S_UPLOAD'	=> true,					'NAME'		=> $method,					'U_ACTION'	=> $this->u_action . "&amp;id=$lang_id&amp;action=upload_data",					'U_BACK'	=> $this->u_action . "&amp;id=$lang_id&amp;action=details&amp;language_file=" . urlencode($selected_lang_file),					'HIDDEN'	=> $hidden_data,					'S_CONNECTION_SUCCESS'		=> (request_var('test_connection', '') && $test_connection === true) ? true : false,					'S_CONNECTION_FAILED'		=> (request_var('test_connection', '') && $test_connection !== true) ? true : false				));			break;			case 'update_details':				if (!$submit || !check_form_key($form_name))				{					trigger_error($user->lang['FORM_INVALID']. adm_back_link($this->u_action), E_USER_WARNING);				}				if (!$lang_id)				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . LANG_TABLE . "					WHERE lang_id = $lang_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$sql_ary	= array(					'lang_english_name'		=> request_var('lang_english_name', $row['lang_english_name']),					'lang_local_name'		=> utf8_normalize_nfc(request_var('lang_local_name', $row['lang_local_name'], true)),					'lang_author'			=> utf8_normalize_nfc(request_var('lang_author', $row['lang_author'], true)),				);				$db->sql_query('UPDATE ' . LANG_TABLE . '					SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '					WHERE lang_id = ' . $lang_id);				add_log('admin', 'LOG_LANGUAGE_PACK_UPDATED', $sql_ary['lang_english_name']);				trigger_error($user->lang['LANGUAGE_DETAILS_UPDATED'] . adm_back_link($this->u_action));			break;			case 'submit_file':			case 'download_file':			case 'upload_data':				if (!$submit || !check_form_key($form_name))				{					trigger_error($user->lang['FORM_INVALID']. adm_back_link($this->u_action), E_USER_WARNING);				}				if (!$lang_id || empty($_POST['entry']))				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if ($this->language_directory != 'email' && !is_array($_POST['entry']))				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (!$this->language_file || (!$this->language_directory && !in_array($this->language_file, $this->main_files)))				{					trigger_error($user->lang['NO_FILE_SELECTED'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . LANG_TABLE . "					WHERE lang_id = $lang_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				// Before we attempt to write anything let's check if the admin really chose a correct filename				switch ($this->language_directory)				{					case 'email':						// Get email templates						$email_files = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'email', 'txt');						$email_files = $email_files['email/'];						if (!in_array($this->language_file, $email_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					case 'acp':						// Get acp files						$acp_files = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'acp', $phpEx);						$acp_files = $acp_files['acp/'];						if (!in_array($this->language_file, $acp_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					case 'mods':						// Get mod files						$mods_files = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'mods', $phpEx);						$mods_files = (isset($mods_files['mods/'])) ? $mods_files['mods/'] : array();						if (!in_array($this->language_file, $mods_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					default:						if (!in_array($this->language_file, $this->main_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;				}				if (!$safe_mode)				{					$mkdir_ary = array('language', 'language/' . $row['lang_iso']);					if ($this->language_directory)					{						$mkdir_ary[] = 'language/' . $row['lang_iso'] . '/' . $this->language_directory;					}					foreach ($mkdir_ary as $dir)					{						$dir = $phpbb_root_path . 'store/' . $dir;						if (!is_dir($dir))						{							if (!@mkdir($dir, 0777))							{								trigger_error("Could not create directory $dir", E_USER_ERROR);							}							@chmod($dir, 0777);						}					}				}				// Get target filename for storage folder				$filename = $this->get_filename($row['lang_iso'], $this->language_directory, $this->language_file, true, true);				$fp = @fopen($phpbb_root_path . $filename, 'wb');				if (!$fp)				{					trigger_error(sprintf($user->lang['UNABLE_TO_WRITE_FILE'], $filename) . adm_back_link($this->u_action . '&amp;id=' . $lang_id . '&amp;action=details&amp;language_file=' . urlencode($selected_lang_file)), E_USER_WARNING);				}				if ($this->language_directory == 'email')				{					// Email Template					$entry = $this->prepare_lang_entry($_POST['entry'], false);					fwrite($fp, $entry);				}				else				{					$name = (($this->language_directory) ? $this->language_directory . '_' : '') . $this->language_file;					$header = str_replace(array('{FILENAME}', '{LANG_NAME}', '{CHANGED}', '{AUTHOR}'), array($name, $row['lang_english_name'], date('Y-m-d', time()), $row['lang_author']), $this->language_file_header);					if (strpos($this->language_file, 'help_') === 0)					{						// Help File						$header .= '$help = array(' . "\n";						fwrite($fp, $header);						foreach ($_POST['entry'] as $key => $value)						{							if (!is_array($value))							{								continue;							}							$entry = "\tarray(\n";							foreach ($value as $_key => $_value)							{								$entry .= "\t\t" . (int) $_key . "\t=> '" . $this->prepare_lang_entry($_value) . "',\n";							}							$entry .= "\t),\n";							fwrite($fp, $entry);						}						$footer = ");\n\n?>";						fwrite($fp, $footer);					}					else					{						// Language File						$header .= $this->lang_header;						fwrite($fp, $header);						foreach ($_POST['entry'] as $key => $value)						{							$entry = $this->format_lang_array($key, $value);							fwrite($fp, $entry);						}						$footer = "));\n\n?>";						fwrite($fp, $footer);					}				}				fclose($fp);				if ($action == 'download_file')				{					header('Pragma: no-cache');					header('Content-Type: application/octetstream; name="' . $this->language_file . '"');					header('Content-disposition: attachment; filename=' . $this->language_file);					$fp = @fopen($phpbb_root_path . $filename, 'rb');					while ($buffer = fread($fp, 1024))					{						echo $buffer;					}					fclose($fp);					add_log('admin', 'LOG_LANGUAGE_FILE_SUBMITTED', $this->language_file);					exit;				}				else if ($action == 'upload_data')				{					$sql = 'SELECT lang_iso						FROM ' . LANG_TABLE . "						WHERE lang_id = $lang_id";					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					$file = request_var('file', '');					$dir = request_var('dir', '');					$selected_lang_file = $dir . '|' . $file;					$old_file = '/' . $this->get_filename($row['lang_iso'], $dir, $file, false, true);					$lang_path = 'language/' . $row['lang_iso'] . '/' . (($dir) ? $dir . '/' : '');					include_once($phpbb_root_path . 'includes/functions_transfer.' . $phpEx);					$method = request_var('method', '');					if ($method != 'ftp' && $method != 'ftp_fsock')					{						trigger_error($user->lang['INVALID_UPLOAD_METHOD'], E_USER_ERROR);					}					$transfer = new $method(request_var('host', ''), request_var('username', ''), request_var('password', ''), request_var('root_path', ''), request_var('port', ''), request_var('timeout', ''));					if (($result = $transfer->open_session()) !== true)					{						trigger_error($user->lang[$result] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id . '&amp;language_file=' . urlencode($selected_lang_file)), E_USER_WARNING);					}					$transfer->rename($lang_path . $file, $lang_path . $file . '.bak');					$result = $transfer->copy_file('store/' . $lang_path . $file, $lang_path . $file);					if ($result === false)					{						// If failed, try to rename again and print error out...						$transfer->delete_file($lang_path . $file);						$transfer->rename($lang_path . $file . '.bak', $lang_path . $file);						trigger_error($user->lang['UPLOAD_FAILED'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id . '&amp;language_file=' . urlencode($selected_lang_file)), E_USER_WARNING);					}					$transfer->close_session();					// Remove from storage folder					if (file_exists($phpbb_root_path . 'store/' . $lang_path . $file))					{						@unlink($phpbb_root_path . 'store/' . $lang_path . $file);					}					add_log('admin', 'LOG_LANGUAGE_FILE_REPLACED', $file);					trigger_error($user->lang['UPLOAD_COMPLETED'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id . '&amp;language_file=' . urlencode($selected_lang_file)));				}				add_log('admin', 'LOG_LANGUAGE_FILE_SUBMITTED', $this->language_file);				$action = 'details';			// no break;			case 'details':				if (!$lang_id)				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$this->page_title = 'LANGUAGE_PACK_DETAILS';				$sql = 'SELECT *					FROM ' . LANG_TABLE . '					WHERE lang_id = ' . $lang_id;				$result = $db->sql_query($sql);				$lang_entries = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$lang_iso = $lang_entries['lang_iso'];				$missing_vars = $missing_files = array();				// Get email templates				$email_files = filelist($phpbb_root_path . 'language/' . $config['default_lang'], 'email', 'txt');				$email_files = $email_files['email/'];				// Get acp files				$acp_files = filelist($phpbb_root_path . 'language/' . $config['default_lang'], 'acp', $phpEx);				$acp_files = $acp_files['acp/'];				// Get mod files				$mods_files = filelist($phpbb_root_path . 'language/' . $config['default_lang'], 'mods', $phpEx);				$mods_files = (isset($mods_files['mods/'])) ? $mods_files['mods/'] : array();				// Check if our current filename matches the files				switch ($this->language_directory)				{					case 'email':						if (!in_array($this->language_file, $email_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					case 'acp':						if (!in_array($this->language_file, $acp_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					case 'mods':						if (!in_array($this->language_file, $mods_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					default:						if (!in_array($this->language_file, $this->main_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}				}				if (isset($_POST['remove_store']))				{					$store_filename = $this->get_filename($lang_iso, $this->language_directory, $this->language_file, true, true);					if (file_exists($phpbb_root_path . $store_filename))					{						@unlink($phpbb_root_path . $store_filename);					}				}				include_once($phpbb_root_path . 'includes/functions_transfer.' . $phpEx);				$methods = transfer::methods();				foreach ($methods as $method)				{					$template->assign_block_vars('buttons', array(						'VALUE' => $method					));				}				$template->assign_vars(array(					'S_DETAILS'			=> true,					'U_ACTION'			=> $this->u_action . "&amp;action=details&amp;id=$lang_id",					'U_BACK'			=> $this->u_action,					'LANG_LOCAL_NAME'	=> $lang_entries['lang_local_name'],					'LANG_ENGLISH_NAME'	=> $lang_entries['lang_english_name'],					'LANG_ISO'			=> $lang_entries['lang_iso'],					'LANG_AUTHOR'		=> $lang_entries['lang_author'],					'ALLOW_UPLOAD'		=> sizeof($methods)					)				);				// If current lang is different from the default lang, then first try to grab missing/additional vars				if ($lang_iso != $config['default_lang'])				{					$is_missing_var = false;					foreach ($this->main_files as $file)					{						if (file_exists($phpbb_root_path . $this->get_filename($lang_iso, '', $file)))						{							$missing_vars[$file] = $this->compare_language_files($config['default_lang'], $lang_iso, '', $file);							if (sizeof($missing_vars[$file]))							{								$is_missing_var = true;							}						}						else						{							$missing_files[] = $this->get_filename($lang_iso, '', $file);						}					}					// Now go through acp/mods directories					foreach ($acp_files as $file)					{						if (file_exists($phpbb_root_path . $this->get_filename($lang_iso, 'acp', $file)))						{							$missing_vars['acp/' . $file] = $this->compare_language_files($config['default_lang'], $lang_iso, 'acp', $file);							if (sizeof($missing_vars['acp/' . $file]))							{								$is_missing_var = true;							}						}						else						{							$missing_files[] = $this->get_filename($lang_iso, 'acp', $file);						}					}					if (sizeof($mods_files))					{						foreach ($mods_files as $file)						{							if (file_exists($phpbb_root_path . $this->get_filename($lang_iso, 'mods', $file)))							{								$missing_vars['mods/' . $file] = $this->compare_language_files($config['default_lang'], $lang_iso, 'mods', $file);								if (sizeof($missing_vars['mods/' . $file]))								{									$is_missing_var = true;								}							}							else							{								$missing_files[] = $this->get_filename($lang_iso, 'mods', $file);							}						}					}					// More missing files... for example email templates?					foreach ($email_files as $file)					{						if (!file_exists($phpbb_root_path . $this->get_filename($lang_iso, 'email', $file)))						{							$missing_files[] = $this->get_filename($lang_iso, 'email', $file);						}					}					if (sizeof($missing_files))					{						$template->assign_vars(array(							'S_MISSING_FILES'		=> true,							'L_MISSING_FILES'		=> sprintf($user->lang['THOSE_MISSING_LANG_FILES'], $lang_entries['lang_local_name']),							'MISSING_FILES'			=> implode('<br />', $missing_files))						);					}					if ($is_missing_var)					{						$template->assign_vars(array(							'S_MISSING_VARS'			=> true,							'L_MISSING_VARS_EXPLAIN'	=> sprintf($user->lang['THOSE_MISSING_LANG_VARIABLES'], $lang_entries['lang_local_name']),							'U_MISSING_ACTION'			=> $this->u_action . "&amp;action=$action&amp;id=$lang_id")						);						foreach ($missing_vars as $file => $vars)						{							if (!sizeof($vars))							{								continue;							}							$template->assign_block_vars('missing', array(								'FILE'			=> $file,								'TPL'			=> $this->print_language_entries($vars, '', false),								'KEY'			=> (strpos($file, '/') === false) ? '|' . $file : str_replace('/', '|', $file))							);						}					}				}				// Main language files				$s_lang_options = '<option value="|common.' . $phpEx . '" class="sep">' . $user->lang['LANGUAGE_FILES'] . '</option>';				foreach ($this->main_files as $file)				{					if (strpos($file, 'help_') === 0)					{						continue;					}					$prefix = (file_exists($phpbb_root_path . $this->get_filename($lang_iso, '', $file, true, true))) ? '* ' : '';					$selected = (!$this->language_directory && $this->language_file == $file) ? ' selected="selected"' : '';					$s_lang_options .= '<option value="|' . $file . '"' . $selected . '>' . $prefix . $file . '</option>';				}				// Help Files				$s_lang_options .= '<option value="|common.' . $phpEx . '" class="sep">' . $user->lang['HELP_FILES'] . '</option>';				foreach ($this->main_files as $file)				{					if (strpos($file, 'help_') !== 0)					{						continue;					}					$prefix = (file_exists($phpbb_root_path . $this->get_filename($lang_iso, '', $file, true, true))) ? '* ' : '';					$selected = (!$this->language_directory && $this->language_file == $file) ? ' selected="selected"' : '';					$s_lang_options .= '<option value="|' . $file . '"' . $selected . '>' . $prefix . $file . '</option>';				}				// Now every other language directory				$check_files = array('email', 'acp', 'mods');				foreach ($check_files as $check)				{					if (!sizeof(${$check . '_files'}))					{						continue;					}					$s_lang_options .= '<option value="|common.' . $phpEx . '" class="sep">' . $user->lang[strtoupper($check) . '_FILES'] . '</option>';					foreach (${$check . '_files'} as $file)					{						$prefix = (file_exists($phpbb_root_path . $this->get_filename($lang_iso, $check, $file, true, true))) ? '* ' : '';						$selected = ($this->language_directory == $check && $this->language_file == $file) ? ' selected="selected"' : '';						$s_lang_options .= '<option value="' . $check . '|' . $file . '"' . $selected . '>' . $prefix . $file . '</option>';					}				}				// Get Language Entries - if saved within store folder, we take this one (with the option to remove it)				$lang = array();				$is_email_file = ($this->language_directory == 'email') ? true : false;				$is_help_file = (strpos($this->language_file, 'help_') === 0) ? true : false;				$file_from_store = (file_exists($phpbb_root_path . $this->get_filename($lang_iso, $this->language_directory, $this->language_file, true, true))) ? true : false;				$no_store_filename = $this->get_filename($lang_iso, $this->language_directory, $this->language_file);				if (!$file_from_store && !file_exists($phpbb_root_path . $no_store_filename))				{					$print_message = sprintf($user->lang['MISSING_LANGUAGE_FILE'], $no_store_filename);				}				else				{					if ($is_email_file)					{						$lang = file_get_contents($phpbb_root_path . $this->get_filename($lang_iso, $this->language_directory, $this->language_file, $file_from_store));					}					else					{						$help = array();						include($phpbb_root_path . $this->get_filename($lang_iso, $this->language_directory, $this->language_file, $file_from_store));						if ($is_help_file)						{							$lang = $help;							unset($help);						}					}					$print_message = (($this->language_directory) ? $this->language_directory . '/' : '') . $this->language_file;				}				// Normal language pack entries				$template->assign_vars(array(					'U_ENTRY_ACTION'		=> $this->u_action . "&amp;action=details&amp;id=$lang_id#entries",					'S_EMAIL_FILE'			=> $is_email_file,					'S_FROM_STORE'			=> $file_from_store,					'S_LANG_OPTIONS'		=> $s_lang_options,					'PRINT_MESSAGE'			=> $print_message,					)				);				if (!$is_email_file)				{					$tpl = '';					$name = (($this->language_directory) ? $this->language_directory . '/' : '') . $this->language_file;					if (isset($missing_vars[$name]) && sizeof($missing_vars[$name]))					{						$tpl .= $this->print_language_entries($missing_vars[$name], '* ');					}					$tpl .= $this->print_language_entries($lang);					$template->assign_var('TPL', $tpl);					unset($tpl);				}				else				{					$template->assign_vars(array(						'LANG'		=> $lang)					);					unset($lang);				}				return;			break;			case 'delete':				if (!$lang_id)				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . LANG_TABLE . '					WHERE lang_id = ' . $lang_id;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if ($row['lang_iso'] == $config['default_lang'])				{					trigger_error($user->lang['NO_REMOVE_DEFAULT_LANG'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (confirm_box(true))				{					$db->sql_query('DELETE FROM ' . LANG_TABLE . ' WHERE lang_id = ' . $lang_id);					$sql = 'UPDATE ' . USERS_TABLE . "						SET user_lang = '" . $db->sql_escape($config['default_lang']) . "'						WHERE user_lang = '" . $db->sql_escape($row['lang_iso']) . "'";					$db->sql_query($sql);					// We also need to remove the translated entries for custom profile fields - we want clean tables, don't we?					$sql = 'DELETE FROM ' . PROFILE_LANG_TABLE . ' WHERE lang_id = ' . $lang_id;					$db->sql_query($sql);					$sql = 'DELETE FROM ' . PROFILE_FIELDS_LANG_TABLE . ' WHERE lang_id = ' . $lang_id;					$db->sql_query($sql);					$sql = 'DELETE FROM ' . STYLES_IMAGESET_DATA_TABLE . " WHERE image_lang = '" . $db->sql_escape($row['lang_iso']) . "'";					$result = $db->sql_query($sql);					$cache->destroy('sql', STYLES_IMAGESET_DATA_TABLE);					add_log('admin', 'LOG_LANGUAGE_PACK_DELETED', $row['lang_english_name']);					trigger_error(sprintf($user->lang['LANGUAGE_PACK_DELETED'], $row['lang_english_name']) . adm_back_link($this->u_action));				}				else				{					$s_hidden_fields = array(						'i'			=> $id,						'mode'		=> $mode,						'action'	=> $action,						'id'		=> $lang_id,					);					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields($s_hidden_fields));				}			break;			case 'install':				$lang_iso = request_var('iso', '');				$lang_iso = basename($lang_iso);				if (!$lang_iso || !file_exists("{$phpbb_root_path}language/$lang_iso/iso.txt"))				{					trigger_error($user->lang['LANGUAGE_PACK_NOT_EXIST'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$file = file("{$phpbb_root_path}language/$lang_iso/iso.txt");				$lang_pack = array(					'iso'		=> $lang_iso,					'name'		=> trim(htmlspecialchars($file[0])),					'local_name'=> trim(htmlspecialchars($file[1], ENT_COMPAT, 'UTF-8')),					'author'	=> trim(htmlspecialchars($file[2], ENT_COMPAT, 'UTF-8'))				);				unset($file);				$sql = 'SELECT lang_iso					FROM ' . LANG_TABLE . "					WHERE lang_iso = '" . $db->sql_escape($lang_iso) . "'";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if ($row)				{					trigger_error($user->lang['LANGUAGE_PACK_ALREADY_INSTALLED'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (!$lang_pack['name'] || !$lang_pack['local_name'])				{					trigger_error($user->lang['INVALID_LANGUAGE_PACK'] . adm_back_link($this->u_action), E_USER_WARNING);				}				// Add language pack				$sql_ary = array(					'lang_iso'			=> $lang_pack['iso'],					'lang_dir'			=> $lang_pack['iso'],					'lang_english_name'	=> $lang_pack['name'],					'lang_local_name'	=> $lang_pack['local_name'],					'lang_author'		=> $lang_pack['author']				);				$db->sql_query('INSERT INTO ' . LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));				$lang_id = $db->sql_nextid();				$valid_localized = array(					'icon_back_top', 'icon_contact_aim', 'icon_contact_email', 'icon_contact_icq', 'icon_contact_jabber', 'icon_contact_msnm', 'icon_contact_pm', 'icon_contact_yahoo', 'icon_contact_www', 'icon_post_delete', 'icon_post_edit', 'icon_post_info', 'icon_post_quote', 'icon_post_report', 'icon_user_online', 'icon_user_offline', 'icon_user_profile', 'icon_user_search', 'icon_user_warn', 'button_pm_forward', 'button_pm_new', 'button_pm_reply', 'button_topic_locked', 'button_topic_new', 'button_topic_reply',				);				$sql_ary = array();				$sql = 'SELECT *					FROM ' . STYLES_IMAGESET_TABLE;				$result = $db->sql_query($sql);				while ($imageset_row = $db->sql_fetchrow($result))				{					if (@file_exists("{$phpbb_root_path}styles/{$imageset_row['imageset_path']}/imageset/{$lang_pack['iso']}/imageset.cfg"))					{						$cfg_data_imageset_data = parse_cfg_file("{$phpbb_root_path}styles/{$imageset_row['imageset_path']}/imageset/{$lang_pack['iso']}/imageset.cfg");						foreach ($cfg_data_imageset_data as $image_name => $value)						{							if (strpos($value, '*') !== false)							{								if (substr($value, -1, 1) === '*')								{									list($image_filename, $image_height) = explode('*', $value);									$image_width = 0;								}								else								{									list($image_filename, $image_height, $image_width) = explode('*', $value);								}							}							else							{								$image_filename = $value;								$image_height = $image_width = 0;							}							if (strpos($image_name, 'img_') === 0 && $image_filename)							{								$image_name = substr($image_name, 4);								if (in_array($image_name, $valid_localized))								{									$sql_ary[] = array(										'image_name'		=> (string) $image_name,										'image_filename'	=> (string) $image_filename,										'image_height'		=> (int) $image_height,										'image_width'		=> (int) $image_width,										'imageset_id'		=> (int) $imageset_row['imageset_id'],										'image_lang'		=> (string) $lang_pack['iso'],									);								}							}						}					}				}				$db->sql_freeresult($result);				if (sizeof($sql_ary))				{					$db->sql_multi_insert(STYLES_IMAGESET_DATA_TABLE, $sql_ary);					$cache->destroy('sql', STYLES_IMAGESET_DATA_TABLE);				}				// Now let's copy the default language entries for custom profile fields for this new language - makes admin's life easier.				$sql = 'SELECT lang_id					FROM ' . LANG_TABLE . "					WHERE lang_iso = '" . $db->sql_escape($config['default_lang']) . "'";				$result = $db->sql_query($sql);				$default_lang_id = (int) $db->sql_fetchfield('lang_id');				$db->sql_freeresult($result);				// We want to notify the admin that custom profile fields need to be updated for the new language.				$notify_cpf_update = false;				// From the mysql documentation:				// Prior to MySQL 4.0.14, the target table of the INSERT statement cannot appear in the FROM clause of the SELECT part of the query. This limitation is lifted in 4.0.14.				// Due to this we stay on the safe side if we do the insertion "the manual way"				$sql = 'SELECT field_id, lang_name, lang_explain, lang_default_value					FROM ' . PROFILE_LANG_TABLE . '					WHERE lang_id = ' . $default_lang_id;				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$row['lang_id'] = $lang_id;					$db->sql_query('INSERT INTO ' . PROFILE_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $row));					$notify_cpf_update = true;				}				$db->sql_freeresult($result);				$sql = 'SELECT field_id, option_id, field_type, lang_value					FROM ' . PROFILE_FIELDS_LANG_TABLE . '					WHERE lang_id = ' . $default_lang_id;				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$row['lang_id'] = $lang_id;					$db->sql_query('INSERT INTO ' . PROFILE_FIELDS_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $row));					$notify_cpf_update = true;				}				$db->sql_freeresult($result);				add_log('admin', 'LOG_LANGUAGE_PACK_INSTALLED', $lang_pack['name']);				$message = sprintf($user->lang['LANGUAGE_PACK_INSTALLED'], $lang_pack['name']);				$message .= ($notify_cpf_update) ? '<br /><br />' . $user->lang['LANGUAGE_PACK_CPF_UPDATE'] : '';				trigger_error($message . adm_back_link($this->u_action));			break;			case 'download':				if (!$lang_id)				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . LANG_TABLE . '					WHERE lang_id = ' . $lang_id;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$use_method = request_var('use_method', '');				$methods = array('.tar');				$available_methods = array('.tar.gz' => 'zlib', '.tar.bz2' => 'bz2', '.zip' => 'zlib');				foreach ($available_methods as $type => $module)				{					if (!@extension_loaded($module))					{						continue;					}					$methods[] = $type;				}				// Let the user decide in which format he wants to have the pack				if (!$use_method)				{					$this->page_title = 'SELECT_DOWNLOAD_FORMAT';					$radio_buttons = '';					foreach ($methods as $method)					{						$radio_buttons .= '<label><input type="radio"' . ((!$radio_buttons) ? ' id="use_method"' : '') . ' class="radio" value="' . $method . '" name="use_method" /> ' . $method . '</label>';					}					$template->assign_vars(array(						'S_SELECT_METHOD'		=> true,						'U_BACK'				=> $this->u_action,						'U_ACTION'				=> $this->u_action . "&amp;action=$action&amp;id=$lang_id",						'RADIO_BUTTONS'			=> $radio_buttons)					);					return;				}				if (!in_array($use_method, $methods))				{					$use_method = '.tar';				}				include_once($phpbb_root_path . 'includes/functions_compress.' . $phpEx);				if ($use_method == '.zip')				{					$compress = new compress_zip('w', $phpbb_root_path . 'store/lang_' . $row['lang_iso'] . $use_method);				}				else				{					$compress = new compress_tar('w', $phpbb_root_path . 'store/lang_' . $row['lang_iso'] . $use_method, $use_method);				}				// Get email templates				$email_templates = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'email', 'txt');				$email_templates = $email_templates['email/'];				// Get acp files				$acp_files = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'acp', $phpEx);				$acp_files = $acp_files['acp/'];				// Get mod files				$mod_files = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'mods', $phpEx);				$mod_files = (isset($mod_files['mods/'])) ? $mod_files['mods/'] : array();				// Add main files				$this->add_to_archive($compress, $this->main_files, $row['lang_iso']);				// Add search files if they exist...				if (file_exists($phpbb_root_path . 'language/' . $row['lang_iso'] . '/search_ignore_words.' . $phpEx))				{					$this->add_to_archive($compress, array("search_ignore_words.$phpEx"), $row['lang_iso']);				}				if (file_exists($phpbb_root_path . 'language/' . $row['lang_iso'] . '/search_synonyms.' . $phpEx))				{					$this->add_to_archive($compress, array("search_synonyms.$phpEx"), $row['lang_iso']);				}				// Write files in folders				$this->add_to_archive($compress, $email_templates, $row['lang_iso'], 'email');				$this->add_to_archive($compress, $acp_files, $row['lang_iso'], 'acp');				$this->add_to_archive($compress, $mod_files, $row['lang_iso'], 'mods');				// Write ISO File				$iso_src = htmlspecialchars_decode($row['lang_english_name']) . "\n";				$iso_src .= htmlspecialchars_decode($row['lang_local_name']) . "\n";				$iso_src .= htmlspecialchars_decode($row['lang_author']);				$compress->add_data($iso_src, 'language/' . $row['lang_iso'] . '/iso.txt');				// index.htm files				$compress->add_data('', 'language/' . $row['lang_iso'] . '/index.htm');				$compress->add_data('', 'language/' . $row['lang_iso'] . '/email/index.htm');				$compress->add_data('', 'language/' . $row['lang_iso'] . '/acp/index.htm');				if (sizeof($mod_files))				{					$compress->add_data('', 'language/' . $row['lang_iso'] . '/mods/index.htm');				}				$compress->close();				$compress->download('lang_' . $row['lang_iso']);				@unlink($phpbb_root_path . 'store/lang_' . $row['lang_iso'] . $use_method);				exit;			break;		}		$sql = 'SELECT user_lang, COUNT(user_lang) AS lang_count			FROM ' . USERS_TABLE . '			GROUP BY user_lang';		$result = $db->sql_query($sql);		$lang_count = array();		while ($row = $db->sql_fetchrow($result))		{			$lang_count[$row['user_lang']] = $row['lang_count'];		}		$db->sql_freeresult($result);		$sql = 'SELECT *			FROM ' . LANG_TABLE . '			ORDER BY lang_english_name';		$result = $db->sql_query($sql);		$installed = array();		while ($row = $db->sql_fetchrow($result))		{			$installed[] = $row['lang_iso'];			$tagstyle = ($row['lang_iso'] == $config['default_lang']) ? '*' : '';			$template->assign_block_vars('lang', array(				'U_DETAILS'			=> $this->u_action . "&amp;action=details&amp;id={$row['lang_id']}",				'U_DOWNLOAD'		=> $this->u_action . "&amp;action=download&amp;id={$row['lang_id']}",				'U_DELETE'			=> $this->u_action . "&amp;action=delete&amp;id={$row['lang_id']}",				'ENGLISH_NAME'		=> $row['lang_english_name'],				'TAG'				=> $tagstyle,				'LOCAL_NAME'		=> $row['lang_local_name'],				'ISO'				=> $row['lang_iso'],				'USED_BY'			=> (isset($lang_count[$row['lang_iso']])) ? $lang_count[$row['lang_iso']] : 0,			));		}		$db->sql_freeresult($result);		$new_ary = $iso = array();		$dp = @opendir("{$phpbb_root_path}language");		if ($dp)		{			while (($file = readdir($dp)) !== false)			{				if ($file[0] == '.' || !is_dir($phpbb_root_path . 'language/' . $file))				{					continue;				}				if (file_exists("{$phpbb_root_path}language/$file/iso.txt"))				{					if (!in_array($file, $installed))					{						if ($iso = file("{$phpbb_root_path}language/$file/iso.txt"))						{							if (sizeof($iso) == 3)							{								$new_ary[$file] = array(									'iso'		=> $file,									'name'		=> trim($iso[0]),									'local_name'=> trim($iso[1]),									'author'	=> trim($iso[2])								);							}						}					}				}			}			closedir($dp);		}		unset($installed);		if (sizeof($new_ary))		{			foreach ($new_ary as $iso => $lang_ary)			{				$template->assign_block_vars('notinst', array(					'ISO'			=> htmlspecialchars($lang_ary['iso']),					'LOCAL_NAME'	=> htmlspecialchars($lang_ary['local_name'], ENT_COMPAT, 'UTF-8'),					'NAME'			=> htmlspecialchars($lang_ary['name'], ENT_COMPAT, 'UTF-8'),					'U_INSTALL'		=> $this->u_action . '&amp;action=install&amp;iso=' . urlencode($lang_ary['iso']))				);			}		}		unset($new_ary);	}	/**	* Set default language variables/header	*/	function default_variables()	{		global $phpEx;		$this->language_file_header = '<?php/**** {FILENAME} [{LANG_NAME}]** @package language* @version $' . 'Id: ' . '$* @copyright (c) ' . date('Y') . ' phpBB Group* @author {CHANGED} - {AUTHOR}* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined(\'IN_PHPBB\')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// \'Page %s of %s\' you can (and should) write \'Page %1$s of %2$s\', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. \'Message %d\' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., \'Click %sHERE%s\' is fine';		$this->lang_header = '$lang = array_merge($lang, array(';		// Language files in language root directory		$this->main_files = array("captcha_qa.$phpEx", "captcha_recaptcha.$phpEx", "common.$phpEx", "groups.$phpEx", "install.$phpEx", "mcp.$phpEx", "memberlist.$phpEx", "posting.$phpEx", "search.$phpEx", "ucp.$phpEx", "viewforum.$phpEx", "viewtopic.$phpEx", "help_bbcode.$phpEx", "help_faq.$phpEx");	}	/**	* Get filename/location of language file	*/	function get_filename($lang_iso, $directory, $filename, $check_store = false, $only_return_filename = false)	{		global $phpbb_root_path, $safe_mode;		$check_filename = "language/$lang_iso/" . (($directory) ? $directory . '/' : '') . $filename;		if ($check_store)		{			$check_store_filename = ($safe_mode) ? "store/langfile_{$lang_iso}" . (($directory) ? '_' . $directory : '') . "_{$filename}" : "store/language/$lang_iso/" . (($directory) ? $directory . '/' : '') . $filename;			if (!$only_return_filename && file_exists($phpbb_root_path . $check_store_filename))			{				return $check_store_filename;			}			else if ($only_return_filename)			{				return $check_store_filename;			}		}		return $check_filename;	}	/**	* Add files to archive	*/	function add_to_archive(&$compress, $filelist, $lang_iso, $directory = '')	{		global $phpbb_root_path;		foreach ($filelist as $file)		{			// Get source filename			$source = $this->get_filename($lang_iso, $directory, $file, true);			$destination = 'language/' . $lang_iso . '/' . (($directory) ? $directory . '/' : '') . $file;			// Add file to archive			$compress->add_custom_file($phpbb_root_path . $source, $destination);		}	}	/**	* Little helper to add some hardcoded template bits	*/	function add_input_field()	{		$keys = func_get_args();		$non_static		= array_shift($keys);		$value			= utf8_normalize_nfc(array_shift($keys));		if (!$non_static)		{			return '<strong>' . htmlspecialchars($value, ENT_COMPAT, 'UTF-8') . '</strong>';		}		// If more then 270 characters, then we present a textarea, else an input field		$textarea = (utf8_strlen($value) > 270) ? true : false;		$tpl = '';		$tpl .= ($textarea) ? '<textarea name="' : '<input type="text" name="';		$tpl .= 'entry[' . implode('][', array_map('utf8_htmlspecialchars', $keys)) . ']"';		$tpl .= ($textarea) ? ' cols="80" rows="5" class="langvalue">' : ' class="langvalue" value="';		$tpl .= htmlspecialchars($value, ENT_COMPAT, 'UTF-8');		$tpl .= ($textarea) ? '</textarea>' : '" />';		return $tpl;	}	/**	* Print language entries	*/	function print_language_entries(&$lang_ary, $key_prefix = '', $input_field = true)	{		$tpl = '';		foreach ($lang_ary as $key => $value)		{			if (is_array($value))			{				// Write key				$tpl .= '				<tr>					<td class="row3" colspan="2">' . htmlspecialchars($key_prefix, ENT_COMPAT, 'UTF-8') . '<strong>' . htmlspecialchars($key, ENT_COMPAT, 'UTF-8') . '</strong></td>				</tr>';				foreach ($value as $_key => $_value)				{					if (is_array($_value))					{						// Write key						$tpl .= '							<tr>								<td class="row3" colspan="2">' . htmlspecialchars($key_prefix, ENT_COMPAT, 'UTF-8') . '&nbsp; &nbsp;<strong>' . htmlspecialchars($_key, ENT_COMPAT, 'UTF-8') . '</strong></td>							</tr>';						foreach ($_value as $__key => $__value)						{							// Write key							$tpl .= '								<tr>									<td class="row1" style="white-space: nowrap;">' . htmlspecialchars($key_prefix, ENT_COMPAT, 'UTF-8') . '<strong>' . htmlspecialchars($__key, ENT_COMPAT, 'UTF-8') . '</strong></td>									<td class="row2">';							$tpl .= $this->add_input_field($input_field, $__value, $key, $_key, $__key);							$tpl .= '</td>								</tr>';						}					}					else					{						// Write key						$tpl .= '							<tr>								<td class="row1" style="white-space: nowrap;">' . htmlspecialchars($key_prefix, ENT_COMPAT, 'UTF-8') . '<strong>' . htmlspecialchars($_key, ENT_COMPAT, 'UTF-8') . '</strong></td>								<td class="row2">';						$tpl .= $this->add_input_field($input_field, $_value, $key, $_key);						$tpl .= '</td>							</tr>';					}				}				$tpl .= '				<tr>					<td class="spacer" colspan="2">&nbsp;</td>				</tr>';			}			else			{				// Write key				$tpl .= '				<tr>					<td class="row1" style="white-space: nowrap;">' . htmlspecialchars($key_prefix, ENT_COMPAT, 'UTF-8') . '<strong>' . htmlspecialchars($key, ENT_COMPAT, 'UTF-8') . '</strong></td>					<td class="row2">';				$tpl .= $this->add_input_field($input_field, $value, $key);				$tpl .= '</td>					</tr>';			}		}		return $tpl;	}	/**	* Compare two language files	*/	function compare_language_files($source_lang, $dest_lang, $directory, $file)	{		global $phpbb_root_path, $phpEx;		$return_ary = array();		$lang = array();		include("{$phpbb_root_path}language/{$source_lang}/" . (($directory) ? $directory . '/' : '') . $file);		$lang_entry_src = $lang;		$lang = array();		if (!file_exists($phpbb_root_path . $this->get_filename($dest_lang, $directory, $file, true)))		{			return array();		}		include($phpbb_root_path . $this->get_filename($dest_lang, $directory, $file, true));		$lang_entry_dst = $lang;		unset($lang);		$diff_array_keys = array_diff(array_keys($lang_entry_src), array_keys($lang_entry_dst));		unset($lang_entry_dst);		foreach ($diff_array_keys as $key)		{			$return_ary[$key] = $lang_entry_src[$key];		}		unset($lang_entry_src);		return $return_ary;	}	/**	* Return language string value for storage	*/	function prepare_lang_entry($text, $store = true)	{		$text = (STRIP) ? stripslashes($text) : $text;		// Adjust for storage...		if ($store)		{			$text = str_replace("'", "\\'", str_replace('\\', '\\\\', $text));		}		return $text;	}	/**	* Format language array for storage	*/	function format_lang_array($key, $value, $tabs = "\t")	{		$entry = '';		if (!is_array($value))		{			$entry .= "{$tabs}'" . $this->prepare_lang_entry($key) . "'\t=> '" . $this->prepare_lang_entry($value) . "',\n";		}		else		{			$_tabs = $tabs . "\t";			$entry .= "\n{$tabs}'" . $this->prepare_lang_entry($key) . "'\t=> array(\n";			foreach ($value as $_key => $_value)			{				$entry .= $this->format_lang_array($_key, $_value, $_tabs);			}			$entry .= "{$tabs}),\n\n";		}		return $entry;	}}?>
<?php/**** install [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ADMIN_CONFIG'				=> 'Administrator configuration',	'ADMIN_PASSWORD'			=> 'Administrator password',	'ADMIN_PASSWORD_CONFIRM'	=> 'Confirm administrator password',	'ADMIN_PASSWORD_EXPLAIN'	=> 'Please enter a password between 6 and 30 characters in length.',	'ADMIN_TEST'				=> 'Check administrator settings',	'ADMIN_USERNAME'			=> 'Administrator username',	'ADMIN_USERNAME_EXPLAIN'	=> 'Please enter a username between 3 and 20 characters in length.',	'APP_MAGICK'				=> 'Imagemagick support [ Attachments ]',	'AUTHOR_NOTES'				=> 'Author notes<br /> %s',	'AVAILABLE'					=> 'Available',	'AVAILABLE_CONVERTORS'		=> 'Available convertors',	'BEGIN_CONVERT'					=> 'Begin conversion',	'BLANK_PREFIX_FOUND'			=> 'A scan of your tables has shown a valid installation using no table prefix.',	'BOARD_NOT_INSTALLED'			=> 'No installation found',	'BOARD_NOT_INSTALLED_EXPLAIN'	=> 'The phpBB Unified Convertor Framework requires a default installation of phpBB3 to function, please <a href="%s">proceed by first installing phpBB3</a>.',	'CATEGORY'					=> 'Category',	'CACHE_STORE'				=> 'Cache type',	'CACHE_STORE_EXPLAIN'		=> 'The physical location where data is cached, filesystem is preferred.',	'CAT_CONVERT'				=> 'Convert',	'CAT_INSTALL'				=> 'Install',	'CAT_OVERVIEW'				=> 'Overview',	'CAT_UPDATE'				=> 'Update',	'CHANGE'					=> 'Change',	'CHECK_TABLE_PREFIX'		=> 'Please check your table prefix and try again.',	'CLEAN_VERIFY'				=> 'Cleaning up and verifying the final structure',	'CLEANING_USERNAMES'		=> 'Cleaning usernames',	'COLLIDING_CLEAN_USERNAME'	=> '<strong>%s</strong> is the clean username for:',	'COLLIDING_USERNAMES_FOUND'	=> 'Colliding usernames were found on your old board. In order to complete the conversion please delete or rename these users so that there is only one user on your old board for each clean username.',	'COLLIDING_USER'			=> ' user id: <strong>%d</strong> username: <strong>%s</strong> (%d posts)',	'CONFIG_CONVERT'			=> 'Converting the configuration',	'CONFIG_FILE_UNABLE_WRITE'	=> 'It was not possible to write the configuration file. Alternative methods for this file to be created are presented below.',	'CONFIG_FILE_WRITTEN'		=> 'The configuration file has been written. You may now proceed to the next step of the installation.',	'CONFIG_PHPBB_EMPTY'		=> 'The phpBB3 config variable for %s is empty.',	'CONFIG_RETRY'				=> 'Retry',	'CONTACT_EMAIL_CONFIRM'		=> 'Confirm contact e-mail',	'CONTINUE_CONVERT'			=> 'Continue conversion',	'CONTINUE_CONVERT_BODY'		=> 'A previous conversion attempt has been determined. You are now able to choose between starting a new conversion or continuing the conversion.',	'CONTINUE_LAST'				=> 'Continue last statements',	'CONTINUE_OLD_CONVERSION'	=> 'Continue previously started conversion',	'CONVERT'					=> 'Convert',	'CONVERT_COMPLETE'			=> 'Conversion completed',	'CONVERT_COMPLETE_EXPLAIN'	=> 'You have now successfully converted your board to phpBB 3.0. You can now login and <a href="../">access your board</a>. Please ensure that the settings were transferred correctly before enabling your board by deleting the install directory. Remember that help on using phpBB is available online via the <a href="http://www.phpbb.com/support/documentation/3.0/">Documentation</a> and the <a href="http://www.phpbb.com/community/viewforum.php?f=46">support forums</a>.',	'CONVERT_INTRO'				=> 'Welcome to the phpBB Unified Convertor Framework',	'CONVERT_INTRO_BODY'		=> 'From here, you are able to import data from other (installed) board systems. The list below shows all the conversion modules currently available. If there is no convertor shown in this list for the board software you wish to convert from, please check our website where further conversion modules may be available for download.',	'CONVERT_NEW_CONVERSION'	=> 'New conversion',	'CONVERT_NOT_EXIST'			=> 'The specified convertor does not exist.',	'CONVERT_OPTIONS'			=> 'Options',	'CONVERT_SETTINGS_VERIFIED'	=> 'The information you entered has been verified. To start the conversion process, please push the button below.',	'CONV_ERR_FATAL'			=> 'Fatal conversion error',	'CONV_ERROR_ATTACH_FTP_DIR'			=> 'FTP upload for attachments is enabled at the old board. Please disable the FTP upload option and make sure a valid upload directory is specified, then copy all attachment files to this new web accessible directory. Once you have done this, restart the convertor.',	'CONV_ERROR_CONFIG_EMPTY'			=> 'There is no configuration information available for the conversion.',	'CONV_ERROR_FORUM_ACCESS'			=> 'Unable to get forum access information.',	'CONV_ERROR_GET_CATEGORIES'			=> 'Unable to get categories.',	'CONV_ERROR_GET_CONFIG'				=> 'Could not retrieve your board configuration.',	'CONV_ERROR_COULD_NOT_READ'			=> 'Unable to access/read %s.',	'CONV_ERROR_GROUP_ACCESS'			=> 'Unable to get group authentication information.',	'CONV_ERROR_INCONSISTENT_GROUPS'	=> 'Inconsistency in groups table detected in add_bots() - you need to add all special groups if you do it manually.',	'CONV_ERROR_INSERT_BOT'				=> 'Unable to insert bot into users table.',	'CONV_ERROR_INSERT_BOTGROUP'		=> 'Unable to insert bot into bots table.',	'CONV_ERROR_INSERT_USER_GROUP'		=> 'Unable to insert user into user_group table.',	'CONV_ERROR_MESSAGE_PARSER'			=> 'Message parser error',	'CONV_ERROR_NO_AVATAR_PATH'			=> 'Note to developer: you must specify $convertor[\'avatar_path\'] to use %s.',	'CONV_ERROR_NO_FORUM_PATH'			=> 'The relative path to the source board has not been specified.',	'CONV_ERROR_NO_GALLERY_PATH'		=> 'Note to developer: you must specify $convertor[\'avatar_gallery_path\'] to use %s.',	'CONV_ERROR_NO_GROUP'				=> 'Group %1$s could not be found in %2$s.',	'CONV_ERROR_NO_RANKS_PATH'			=> 'Note to developer: you must specify $convertor[\'ranks_path\'] to use %s.',	'CONV_ERROR_NO_SMILIES_PATH'		=> 'Note to developer: you must specify $convertor[\'smilies_path\'] to use %s.',	'CONV_ERROR_NO_UPLOAD_DIR'			=> 'Note to developer: you must specify $convertor[\'upload_path\'] to use %s.',	'CONV_ERROR_PERM_SETTING'			=> 'Unable to insert/update permission setting.',	'CONV_ERROR_PM_COUNT'				=> 'Unable to select folder pm count.',	'CONV_ERROR_REPLACE_CATEGORY'		=> 'Unable to insert new forum replacing old category.',	'CONV_ERROR_REPLACE_FORUM'			=> 'Unable to insert new forum replacing old forum.',	'CONV_ERROR_USER_ACCESS'			=> 'Unable to get user authentication information.',	'CONV_ERROR_WRONG_GROUP'			=> 'Wrong group %1$s defined in %2$s.',	'CONV_OPTIONS_BODY'					=> 'This page collects the data required to access the source board. Enter the database details of your former board; the converter will not change anything in the database given below. The source board should be disabled to allow a consistent conversion.',	'CONV_SAVED_MESSAGES'				=> 'Saved messages',	'COULD_NOT_COPY'			=> 'Could not copy file <strong>%1$s</strong> to <strong>%2$s</strong><br /><br />Please check that the target directory exists and is writable by the webserver.',	'COULD_NOT_FIND_PATH'		=> 'Could not find path to your former board. Please check your settings and try again.<br /> %s was specified as the source path.',	'DBMS'						=> 'Database type',	'DB_CONFIG'					=> 'Database configuration',	'DB_CONNECTION'				=> 'Database connection',	'DB_ERR_INSERT'				=> 'Error while processing <code>INSERT</code> query.',	'DB_ERR_LAST'				=> 'Error while processing <var>query_last</var>.',	'DB_ERR_QUERY_FIRST'		=> 'Error while executing <var>query_first</var>.',	'DB_ERR_QUERY_FIRST_TABLE'	=> 'Error while executing <var>query_first</var>, %s (%s).',	'DB_ERR_SELECT'				=> 'Error while running <code>SELECT</code> query.',	'DB_HOST'					=> 'Database server hostname or DSN',	'DB_HOST_EXPLAIN'			=> 'DSN stands for Data Source Name and is relevant only for ODBC installs. On PostgreSQL, use localhost to connect to the local server via UNIX domain socket and 127.0.0.1 to connect via TCP. For SQLite, enter the full path to your database file.',	'DB_NAME'					=> 'Database name',	'DB_PASSWORD'				=> 'Database password',	'DB_PORT'					=> 'Database server port',	'DB_PORT_EXPLAIN'			=> 'Leave this blank unless you know the server operates on a non-standard port.',	'DB_UPDATE_NOT_SUPPORTED'	=> 'We are sorry, but this script does not support updating from versions of phpBB prior to %1$s. The version you currently have installed is %2$s. Please update to a previous version before running this script. Assistance with this is available in the Support Forum on phpBB.com.',	'DB_USERNAME'				=> 'Database username',	'DB_TEST'					=> 'Test connection',	'DEFAULT_LANG'				=> 'Default board language',	'DEFAULT_PREFIX_IS'			=> 'The convertor was not able to find tables with the specified prefix. Please make sure you have entered the correct details for the board you are converting from. The default table prefix for %1$s is <strong>%2$s</strong>.',	'DEV_NO_TEST_FILE'			=> 'No value has been specified for the test_file variable in the convertor. If you are a user of this convertor, you should not be seeing this error, please report this message to the convertor author. If you are a convertor author, you must specify the name of a file which exists in the source board to allow the path to it to be verified.',	'DIRECTORIES_AND_FILES'		=> 'Directory and file setup',	'DISABLE_KEYS'				=> 'Disabling keys',	'DLL_FIREBIRD'				=> 'Firebird',	'DLL_FTP'					=> 'Remote FTP support [ Installation ]',	'DLL_GD'					=> 'GD graphics support [ Visual Confirmation ]',	'DLL_MBSTRING'				=> 'Multi-byte character support',	'DLL_MSSQL'					=> 'MSSQL Server 2000+',	'DLL_MSSQL_ODBC'			=> 'MSSQL Server 2000+ via ODBC',	'DLL_MSSQLNATIVE'			=> 'MSSQL Server 2005+ [ Native ]',	'DLL_MYSQL'					=> 'MySQL',	'DLL_MYSQLI'				=> 'MySQL with MySQLi Extension',	'DLL_ORACLE'				=> 'Oracle',	'DLL_POSTGRES'				=> 'PostgreSQL',	'DLL_SQLITE'				=> 'SQLite',	'DLL_XML'					=> 'XML support [ Jabber ]',	'DLL_ZLIB'					=> 'zlib compression support [ gz, .tar.gz, .zip ]',	'DL_CONFIG'					=> 'Download config',	'DL_CONFIG_EXPLAIN'			=> 'You may download the complete config.php to your own PC. You will then need to upload the file manually, replacing any existing config.php in your phpBB 3.0 root directory. Please remember to upload the file in ASCII format (see your FTP application documentation if you are unsure how to achieve this). When you have uploaded the config.php please click Done to move to the next stage.',	'DL_DOWNLOAD'				=> 'Download',	'DONE'						=> 'Done',	'ENABLE_KEYS'				=> 'Re-enabling keys. This can take a while.',	'FILES_OPTIONAL'			=> 'Optional files and directories',	'FILES_OPTIONAL_EXPLAIN'	=> '<strong>Optional</strong> - These files, directories or permission settings are not required. The installation system will attempt to use various techniques to create them if they do not exist or cannot be written to. However, the presence of these will speed installation.',	'FILES_REQUIRED'			=> 'Files and Directories',	'FILES_REQUIRED_EXPLAIN'	=> '<strong>Required</strong> - In order to function correctly phpBB needs to be able to access or write to certain files or directories. If you see Not Found you need to create the relevant file or directory. If you see Unwritable you need to change the permissions on the file or directory to allow phpBB to write to it.',	'FILLING_TABLE'				=> 'Filling table <strong>%s</strong>',	'FILLING_TABLES'			=> 'Filling tables',	'FIREBIRD_DBMS_UPDATE_REQUIRED'		=> 'phpBB no longer supports Firebird/Interbase prior to Version 2.1. Please update your Firebird installation to at least 2.1.0 before proceeding with the update.',	'FINAL_STEP'				=> 'Process final step',	'FORUM_ADDRESS'				=> 'Board address',	'FORUM_ADDRESS_EXPLAIN'		=> 'This is the URL of your former board, for example <samp>http://www.example.com/phpBB2/</samp>. If an address is entered here and not left empty every instance of this address will be replaced by your new board address within messages, private messages and signatures.',	'FORUM_PATH'				=> 'Board path',	'FORUM_PATH_EXPLAIN'		=> 'This is the <strong>relative</strong> path on disk to your former board from the <strong>root of this phpBB3 installation</strong>.',	'FOUND'						=> 'Found',	'FTP_CONFIG'				=> 'Transfer config by FTP',	'FTP_CONFIG_EXPLAIN'		=> 'phpBB has detected the presence of the FTP module on this server. You may attempt to install your config.php via this if you wish. You will need to supply the information listed below. Remember your username and password are those to your server! (ask your hosting provider for details if you are unsure what these are).',	'FTP_PATH'					=> 'FTP path',	'FTP_PATH_EXPLAIN'			=> 'This is the path from your root directory to that of phpBB, e.g. <samp>htdocs/phpBB3/</samp>.',	'FTP_UPLOAD'				=> 'Upload',	'GPL'						=> 'General Public License',	'INITIAL_CONFIG'			=> 'Basic configuration',	'INITIAL_CONFIG_EXPLAIN'	=> 'Now that install has determined your server can run phpBB you need to supply some specific information. If you do not know how to connect to your database please contact your hosting provider (in the first instance) or use the phpBB support forums. When entering data please ensure you check it thoroughly before continuing.',	'INSTALL_CONGRATS'			=> 'Congratulations!',	'INSTALL_CONGRATS_EXPLAIN'	=> '		You have successfully installed phpBB %1$s. Please proceed by choosing one of the following options:</p>		<h2>Convert an existing board to phpBB3</h2>		<p>The phpBB Unified Convertor Framework supports the conversion of phpBB 2.0.x and other board systems to phpBB3. If you have an existing board that you wish to convert, please <a href="%2$s">proceed to the convertor</a>.</p>		<h2>Go live with your phpBB3!</h2>		<p>Clicking the button below will take you to a form for submitting statistical data to phpBB in your Administration Control Panel (ACP). We would appreciate it if you could help us by sending that information. Afterwards you should take some time to examine the options available to you. Remember that help is available online via the <a href="http://www.phpbb.com/support/documentation/3.0/">Documentation</a>, <a href="%3$s">README</a> and the <a href="http://www.phpbb.com/community/viewforum.php?f=46">Support Forums</a>.</p><p><strong>Please delete, move or rename the install directory before using your board. While this directory exists, only the Administration Control Panel (ACP) will be accessible.</strong>',	'INSTALL_INTRO'				=> 'Welcome to Installation',	'INSTALL_INTRO_BODY'		=> 'With this option, it is possible to install phpBB3 onto your server.</p><p>In order to proceed, you will need your database settings. If you do not know your database settings, please contact your host and ask for them. You will not be able to continue without them. You need:</p>	<ul>		<li>The Database Type - the database you will be using.</li>		<li>The Database server hostname or DSN - the address of the database server.</li>		<li>The Database server port - the port of the database server (most of the time this is not needed).</li>		<li>The Database name - the name of the database on the server.</li>		<li>The Database username and Database password - the login data to access the database.</li>	</ul>	<p><strong>Note:</strong> if you are installing using SQLite, you should enter the full path to your database file in the DSN field and leave the username and password fields blank. For security reasons, you should make sure that the database file is not stored in a location accessible from the web.</p>	<p>phpBB3 supports the following databases:</p>	<ul>		<li>MySQL 3.23 or above (MySQLi supported)</li>		<li>PostgreSQL 7.3+</li>		<li>SQLite 2.8.2+</li>		<li>Firebird 2.1+</li>		<li>MS SQL Server 2000 or above (directly or via ODBC)</li>		<li>MS SQL Server 2005 or above (native)</li>		<li>Oracle</li>	</ul>	<p>Only those databases supported on your server will be displayed.',	'INSTALL_INTRO_NEXT'		=> 'To commence the installation, please press the button below.',	'INSTALL_LOGIN'				=> 'Login',	'INSTALL_NEXT'				=> 'Next stage',	'INSTALL_NEXT_FAIL'			=> 'Some tests failed and you should correct these problems before proceeding to the next stage. Failure to do so may result in an incomplete installation.',	'INSTALL_NEXT_PASS'			=> 'All the basic tests have been passed and you may proceed to the next stage of installation. If you have changed any permissions, modules, etc. and wish to re-test you can do so if you wish.',	'INSTALL_PANEL'				=> 'Installation Panel',	'INSTALL_SEND_CONFIG'		=> 'Unfortunately phpBB could not write the configuration information directly to your config.php. This may be because the file does not exist or is not writable. A number of options will be listed below enabling you to complete installation of config.php.',	'INSTALL_START'				=> 'Start install',	'INSTALL_TEST'				=> 'Test again',	'INST_ERR'					=> 'Installation error',	'INST_ERR_DB_CONNECT'		=> 'Could not connect to the database, see error message below.',	'INST_ERR_DB_FORUM_PATH'	=> 'The database file specified is within your board directory tree. You should put this file in a non web-accessible location.',	'INST_ERR_DB_INVALID_PREFIX'=> 'The prefix you entered is invalid. It must start with a letter and must only contain letters, numbers and underscores.',	'INST_ERR_DB_NO_ERROR'		=> 'No error message given.',	'INST_ERR_DB_NO_MYSQLI'		=> 'The version of MySQL installed on this machine is incompatible with the MySQL with MySQLi Extension option you have selected. Please try the MySQL option instead.',	'INST_ERR_DB_NO_SQLITE'		=> 'The version of the SQLite extension you have installed is too old, it must be upgraded to at least 2.8.2.',	'INST_ERR_DB_NO_ORACLE'		=> 'The version of Oracle installed on this machine requires you to set the <var>NLS_CHARACTERSET</var> parameter to <var>UTF8</var>. Either upgrade your installation to 9.2+ or change the parameter.',	'INST_ERR_DB_NO_FIREBIRD'	=> 'The version of Firebird installed on this machine is older than 2.1, please upgrade to a newer version.',	'INST_ERR_DB_NO_FIREBIRD_PS'=> 'The database you selected for Firebird has a page size less than 8192, it must be at least 8192.',	'INST_ERR_DB_NO_POSTGRES'	=> 'The database you have selected was not created in <var>UNICODE</var> or <var>UTF8</var> encoding. Try installing with a database in <var>UNICODE</var> or <var>UTF8</var> encoding.',	'INST_ERR_DB_NO_NAME'		=> 'No database name specified.',	'INST_ERR_EMAIL_INVALID'	=> 'The e-mail address you entered is invalid.',	'INST_ERR_EMAIL_MISMATCH'	=> 'The e-mails you entered did not match.',	'INST_ERR_FATAL'			=> 'Fatal installation error',	'INST_ERR_FATAL_DB'			=> 'A fatal and unrecoverable database error has occurred. This may be because the specified user does not have appropriate permissions to <code>CREATE TABLES</code> or <code>INSERT</code> data, etc. Further information may be given below. Please contact your hosting provider in the first instance or the support forums of phpBB for further assistance.',	'INST_ERR_FTP_PATH'			=> 'Could not change to the given directory, please check the path.',	'INST_ERR_FTP_LOGIN'		=> 'Could not login to FTP server, check your username and password.',	'INST_ERR_MISSING_DATA'		=> 'You must fill out all fields in this block.',	'INST_ERR_NO_DB'			=> 'Cannot load the PHP module for the selected database type.',	'INST_ERR_PASSWORD_MISMATCH'	=> 'The passwords you entered did not match.',	'INST_ERR_PASSWORD_TOO_LONG'	=> 'The password you entered is too long. The maximum length is 30 characters.',	'INST_ERR_PASSWORD_TOO_SHORT'	=> 'The password you entered is too short. The minimum length is 6 characters.',	'INST_ERR_PREFIX'			=> 'Tables with the specified prefix already exist, please choose an alternative.',	'INST_ERR_PREFIX_INVALID'	=> 'The table prefix you have specified is invalid for your database. Please try another, removing characters such as the hyphen.',	'INST_ERR_PREFIX_TOO_LONG'	=> 'The table prefix you have specified is too long. The maximum length is %d characters.',	'INST_ERR_USER_TOO_LONG'	=> 'The username you entered is too long. The maximum length is 20 characters.',	'INST_ERR_USER_TOO_SHORT'	=> 'The username you entered is too short. The minimum length is 3 characters.',	'INVALID_PRIMARY_KEY'		=> 'Invalid primary key : %s',	'LONG_SCRIPT_EXECUTION'		=> 'Please note that this can take a while... Please do not stop the script.',	// mbstring	'MBSTRING_CHECK'						=> '<samp>mbstring</samp> extension check',	'MBSTRING_CHECK_EXPLAIN'				=> '<strong>Required</strong> - <samp>mbstring</samp> is a PHP extension that provides multibyte string functions. Certain features of mbstring are not compatible with phpBB and must be disabled.',	'MBSTRING_FUNC_OVERLOAD'				=> 'Function overloading',	'MBSTRING_FUNC_OVERLOAD_EXPLAIN'		=> '<var>mbstring.func_overload</var> must be set to either 0 or 4.',	'MBSTRING_ENCODING_TRANSLATION'			=> 'Transparent character encoding',	'MBSTRING_ENCODING_TRANSLATION_EXPLAIN'	=> '<var>mbstring.encoding_translation</var> must be set to 0.',	'MBSTRING_HTTP_INPUT'					=> 'HTTP input character conversion',	'MBSTRING_HTTP_INPUT_EXPLAIN'			=> '<var>mbstring.http_input</var> must be set to <samp>pass</samp>.',	'MBSTRING_HTTP_OUTPUT'					=> 'HTTP output character conversion',	'MBSTRING_HTTP_OUTPUT_EXPLAIN'			=> '<var>mbstring.http_output</var> must be set to <samp>pass</samp>.',	'MAKE_FOLDER_WRITABLE'		=> 'Please make sure that this folder exists and is writable by the webserver then try again:<br /><strong>%s</strong>.',	'MAKE_FOLDERS_WRITABLE'		=> 'Please make sure that these folders exist and are writable by the webserver then try again:<br /><strong>%s</strong>.',	'MYSQL_SCHEMA_UPDATE_REQUIRED'	=> 'Your MySQL database schema for phpBB is outdated. phpBB detected a schema for MySQL 3.x/4.x, but the server runs on MySQL %2$s.<br /><strong>Before you proceed the update, you need to upgrade the schema.</strong><br /><br />Please refer to the <a href="http://www.phpbb.com/kb/article/doesnt-have-a-default-value-errors/">Knowledge Base article about upgrading the MySQL schema</a>. If you encounter problems, please use <a href="http://www.phpbb.com/community/viewforum.php?f=46">our support forums</a>.',	'NAMING_CONFLICT'			=> 'Naming conflict: %s and %s are both aliases<br /><br />%s',	'NEXT_STEP'					=> 'Proceed to next step',	'NOT_FOUND'					=> 'Cannot find',	'NOT_UNDERSTAND'			=> 'Could not understand %s #%d, table %s (%s)',	'NO_CONVERTORS'				=> 'No convertors are available for use.',	'NO_CONVERT_SPECIFIED'		=> 'No convertor specified.',	'NO_LOCATION'				=> 'Cannot determine location. If you know Imagemagick is installed, you may specify the location later within your administration control panel',	'NO_TABLES_FOUND'			=> 'No tables found.',	'OVERVIEW_BODY'				=> 'Welcome to phpBB3!<br /><br />phpBB is the most widely used open source bulletin board solution in the world. phpBB3 is the latest installment in a package line started in 2000. Like its predecessors, phpBB3 is feature-rich, user-friendly, and fully supported by the phpBB Team. phpBB3 greatly improves on what made phpBB2 popular, and adds commonly requested features that were not present in previous versions. We hope it exceeds your expectations.<br /><br />This installation system will guide you through installing phpBB3, updating to the latest version of phpBB3 from past releases, as well as converting to phpBB3 from a different discussion board system (including phpBB2). For more information, we encourage you to read <a href="../docs/INSTALL.html">the installation guide</a>.<br /><br />To read the phpBB3 license or learn about obtaining support and our stance on it, please select the respective options from the side menu. To continue, please select the appropriate tab above.',	'PCRE_UTF_SUPPORT'				=> 'PCRE UTF-8 support',	'PCRE_UTF_SUPPORT_EXPLAIN'		=> 'phpBB will <strong>not</strong> run if your PHP installation is not compiled with UTF-8 support in the PCRE extension.',	'PHP_GETIMAGESIZE_SUPPORT'			=> 'PHP function getimagesize() is available',	'PHP_GETIMAGESIZE_SUPPORT_EXPLAIN'	=> '<strong>Required</strong> - In order for phpBB to function correctly, the getimagesize function needs to be available.',	'PHP_OPTIONAL_MODULE'			=> 'Optional modules',	'PHP_OPTIONAL_MODULE_EXPLAIN'	=> '<strong>Optional</strong> - These modules or applications are optional. However, if they are available they will enable extra features.',	'PHP_SUPPORTED_DB'				=> 'Supported databases',	'PHP_SUPPORTED_DB_EXPLAIN'		=> '<strong>Required</strong> - You must have support for at least one compatible database within PHP. If no database modules are shown as available you should contact your hosting provider or review the relevant PHP installation documentation for advice.',	'PHP_REGISTER_GLOBALS'			=> 'PHP setting <var>register_globals</var> is disabled',	'PHP_REGISTER_GLOBALS_EXPLAIN'	=> 'phpBB will still run if this setting is enabled, but if possible, it is recommended that register_globals is disabled on your PHP install for security reasons.',	'PHP_SAFE_MODE'					=> 'Safe mode',	'PHP_SETTINGS'					=> 'PHP version and settings',	'PHP_SETTINGS_EXPLAIN'			=> '<strong>Required</strong> - You must be running at least version 4.3.3 of PHP in order to install phpBB. If <var>safe mode</var> is displayed below your PHP installation is running in that mode. This will impose limitations on remote administration and similar features.',	'PHP_URL_FOPEN_SUPPORT'			=> 'PHP setting <var>allow_url_fopen</var> is enabled',	'PHP_URL_FOPEN_SUPPORT_EXPLAIN'	=> '<strong>Optional</strong> - This setting is optional, however certain phpBB functions like off-site avatars will not work properly without it.',	'PHP_VERSION_REQD'				=> 'PHP version >= 4.3.3',	'POST_ID'						=> 'Post ID',	'PREFIX_FOUND'					=> 'A scan of your tables has shown a valid installation using <strong>%s</strong> as table prefix.',	'PREPROCESS_STEP'				=> 'Executing pre-processing functions/queries',	'PRE_CONVERT_COMPLETE'			=> 'All pre-conversion steps have successfully been completed. You may now begin the actual conversion process. Please note that you may have to manually do and adjust several things. After conversion, especially check the permissions assigned, rebuild your search index which is not converted and also make sure files got copied correctly, for example avatars and smilies.',	'PROCESS_LAST'					=> 'Processing last statements',	'REFRESH_PAGE'				=> 'Refresh page to continue conversion',	'REFRESH_PAGE_EXPLAIN'		=> 'If set to yes, the convertor will refresh the page to continue the conversion after having finished a step. If this is your first conversion for testing purposes and to determine any errors in advance, we suggest to set this to No.',	'REQUIREMENTS_TITLE'		=> 'Installation compatibility',	'REQUIREMENTS_EXPLAIN'		=> 'Before proceeding with the full installation phpBB will carry out some tests on your server configuration and files to ensure that you are able to install and run phpBB. Please ensure you read through the results thoroughly and do not proceed until all the required tests are passed. If you wish to use any of the features depending on the optional tests, you should ensure that these tests are passed also.',	'RETRY_WRITE'				=> 'Retry writing config',	'RETRY_WRITE_EXPLAIN'		=> 'If you wish you can change the permissions on config.php to allow phpBB to write to it. Should you wish to do that you can click Retry below to try again. Remember to return the permissions on config.php after phpBB has finished installation.',	'SCRIPT_PATH'				=> 'Script path',	'SCRIPT_PATH_EXPLAIN'		=> 'The path where phpBB is located relative to the domain name, e.g. <samp>/phpBB3</samp>.',	'SELECT_LANG'				=> 'Select language',	'SERVER_CONFIG'				=> 'Server configuration',	'SEARCH_INDEX_UNCONVERTED'	=> 'Search index was not converted',	'SEARCH_INDEX_UNCONVERTED_EXPLAIN'	=> 'Your old search index was not converted. Searching will always yield an empty result. To create a new search index go to the Administration Control Panel, select Maintenance and then choose Search index from the submenu.',	'SOFTWARE'					=> 'Board software',	'SPECIFY_OPTIONS'			=> 'Specify conversion options',	'STAGE_ADMINISTRATOR'		=> 'Administrator details',	'STAGE_ADVANCED'			=> 'Advanced settings',	'STAGE_ADVANCED_EXPLAIN'	=> 'The settings on this page are only necessary to set if you know that you require something different from the default. If you are unsure, just proceed to the next page, as these settings can be altered from the Administration Control Panel later.',	'STAGE_CONFIG_FILE'			=> 'Configuration file',	'STAGE_CREATE_TABLE'		=> 'Create database tables',	'STAGE_CREATE_TABLE_EXPLAIN'	=> 'The database tables used by phpBB 3.0 have been created and populated with some initial data. Proceed to the next screen to finish installing phpBB.',	'STAGE_DATABASE'			=> 'Database settings',	'STAGE_FINAL'				=> 'Final stage',	'STAGE_INTRO'				=> 'Introduction',	'STAGE_IN_PROGRESS'			=> 'Conversion in progress',	'STAGE_REQUIREMENTS'		=> 'Requirements',	'STAGE_SETTINGS'			=> 'Settings',	'STARTING_CONVERT'			=> 'Starting conversion process',	'STEP_PERCENT_COMPLETED'	=> 'Step <strong>%d</strong> of <strong>%d</strong>',	'SUB_INTRO'					=> 'Introduction',	'SUB_LICENSE'				=> 'License',	'SUB_SUPPORT'				=> 'Support',	'SUCCESSFUL_CONNECT'		=> 'Successful connection',	'SUPPORT_BODY'				=> 'Full support will be provided for the current stable release of phpBB3, free of charge. This includes:</p><ul><li>installation</li><li>configuration</li><li>technical questions</li><li>problems relating to potential bugs in the software</li><li>updating from Release Candidate (RC) versions to the latest stable version</li><li>converting from phpBB 2.0.x to phpBB3</li><li>converting from other discussion board software to phpBB3 (please see the <a href="http://www.phpbb.com/community/viewforum.php?f=65">Convertors Forum</a>)</li></ul><p>We encourage users still running beta versions of phpBB3 to replace their installation with a fresh copy of the latest version.</p><h2>MODs / Styles</h2><p>For issues relating to MODs, please post in the appropriate <a href="http://www.phpbb.com/community/viewforum.php?f=81">Modifications Forum</a>.<br />For issues relating to styles, templates and imagesets, please post in the appropriate <a href="http://www.phpbb.com/community/viewforum.php?f=80">Styles Forum</a>.<br /><br />If your question relates to a specific package, please post directly in the topic dedicated to the package.</p><h2>Obtaining Support</h2><p><a href="http://www.phpbb.com/community/viewtopic.php?f=14&amp;t=571070">The phpBB Welcome Package</a><br /><a href="http://www.phpbb.com/support/">Support Section</a><br /><a href="http://www.phpbb.com/support/documentation/3.0/quickstart/">Quick Start Guide</a><br /><br />To ensure you stay up to date with the latest news and releases, why not <a href="http://www.phpbb.com/support/">subscribe to our mailing list</a>?<br /><br />',	'SYNC_FORUMS'				=> 'Starting to synchronise forums',	'SYNC_POST_COUNT'			=> 'Synchronising post_counts',	'SYNC_POST_COUNT_ID'		=> 'Synchronising post_counts from <var>entry</var> %1$s to %2$s.',	'SYNC_TOPICS'				=> 'Starting to synchronise topics',	'SYNC_TOPIC_ID'				=> 'Synchronising topics from <var>topic_id</var> %1$s to %2$s.',	'TABLES_MISSING'			=> 'Could not find these tables<br /> <strong>%s</strong>.',	'TABLE_PREFIX'				=> 'Prefix for tables in database',	'TABLE_PREFIX_EXPLAIN'		=> 'The prefix must start with a letter and must only contain letters, numbers and underscores.',	'TABLE_PREFIX_SAME'			=> 'The table prefix needs to be the one used by the software you are converting from.<br /> Specified table prefix was %s.',	'TESTS_PASSED'				=> 'Tests passed',	'TESTS_FAILED'				=> 'Tests failed',	'UNABLE_WRITE_LOCK'			=> 'Unable to write lock file.',	'UNAVAILABLE'				=> 'Unavailable',	'UNWRITABLE'				=> 'Unwritable',	'UPDATE_TOPICS_POSTED'		=> 'Generating topics posted information',	'UPDATE_TOPICS_POSTED_ERR'	=> 'An error occured while generating topics posted information. You can retry this step in the ACP after the conversion process is completed.',	'VERIFY_OPTIONS'			=> 'Verifying conversion options',	'VERSION'					=> 'Version',	'WELCOME_INSTALL'			=> 'Welcome to phpBB3 Installation',	'WRITABLE'					=> 'Writable',));// Updater$lang = array_merge($lang, array(	'ALL_FILES_UP_TO_DATE'		=> 'All files are up to date with the latest phpBB version. You should now <a href="../ucp.php?mode=login">login to your board</a> and check if everything is working fine. Do not forget to delete, rename or move your install directory! Please send us updated information about your server and board configurations from the <a href="../ucp.php?mode=login&amp;redirect=adm/index.php%3Fi=send_statistics%26mode=send_statistics">Send statistics</a> module in your ACP.',	'ARCHIVE_FILE'				=> 'Source file within archive',	'BACK'				=> 'Back',	'BINARY_FILE'		=> 'Binary file',	'BOT'				=> 'Spider/Robot',	'CHANGE_CLEAN_NAMES'			=> 'The method used to make sure a username is not used by multiple users has been changed. There are some users which have the same name when compared with the new method. You have to delete or rename these users to make sure that each name is only used by one user before you can proceed.',	'CHECK_FILES'					=> 'Check files',	'CHECK_FILES_AGAIN'				=> 'Check files again',	'CHECK_FILES_EXPLAIN'			=> 'Within the next step all files will be checked against the update files - this can take a while if this is the first file check.',	'CHECK_FILES_UP_TO_DATE'		=> 'According to your database your version is up to date. You may want to proceed with the file check to make sure all files are really up to date with the latest phpBB version.',	'CHECK_UPDATE_DATABASE'			=> 'Continue update process',	'COLLECTED_INFORMATION'			=> 'File information',	'COLLECTED_INFORMATION_EXPLAIN'	=> 'The list below shows information about the files needing an update. Please read the information in front of every status block to see what they mean and what you may need to do to perform a successful update.',	'COLLECTING_FILE_DIFFS'			=> 'Collecting file differences',	'COMPLETE_LOGIN_TO_BOARD'		=> 'You should now <a href="../ucp.php?mode=login">login to your board</a> and check if everything is working fine. Do not forget to delete, rename or move your install directory!',	'CONTINUE_UPDATE_NOW'			=> 'Continue the update process now',		// Shown within the database update script at the end if called from the updater	'CONTINUE_UPDATE'				=> 'Continue update now',					// Shown after file upload to indicate the update process is not yet finished	'CURRENT_FILE'					=> 'Begin of Conflict - Original File code before update',	'CURRENT_VERSION'				=> 'Current version',	'DATABASE_TYPE'						=> 'Database type',	'DATABASE_UPDATE_INFO_OLD'			=> 'The database update file within the install directory is outdated. Please make sure you uploaded the correct version of the file.',	'DELETE_USER_REMOVE'				=> 'Delete user and remove posts',	'DELETE_USER_RETAIN'				=> 'Delete user but keep posts',	'DESTINATION'						=> 'Destination file',	'DIFF_INLINE'						=> 'Inline',	'DIFF_RAW'							=> 'Raw unified diff',	'DIFF_SEP_EXPLAIN'					=> 'Code block used within the updated/new file',	'DIFF_SIDE_BY_SIDE'					=> 'Side by Side',	'DIFF_UNIFIED'						=> 'Unified diff',	'DO_NOT_UPDATE'						=> 'Do not update this file',	'DONE'								=> 'Done',	'DOWNLOAD'							=> 'Download',	'DOWNLOAD_AS'						=> 'Download as',	'DOWNLOAD_UPDATE_METHOD_BUTTON'		=> 'Download modified files archive (recommended)',	'DOWNLOAD_CONFLICTS'				=> 'Download conflicts for this file',	'DOWNLOAD_CONFLICTS_EXPLAIN'		=> 'Search for &lt;&lt;&lt; to spot conflicts',	'DOWNLOAD_UPDATE_METHOD'			=> 'Download modified files archive',	'DOWNLOAD_UPDATE_METHOD_EXPLAIN'	=> 'Once downloaded you should unpack the archive. You will find the modified files you need to upload to your phpBB root directory within it. Please upload the files to their respective locations then. After you have uploaded all files, please check the files again with the other button below.',	'ERROR'			=> 'Error',	'EDIT_USERNAME'	=> 'Edit username',	'FILE_ALREADY_UP_TO_DATE'		=> 'File is already up to date.',	'FILE_DIFF_NOT_ALLOWED'			=> 'File not allowed to be diffed.',	'FILE_USED'						=> 'Information used from',			// Single file	'FILES_CONFLICT'				=> 'Conflict files',	'FILES_CONFLICT_EXPLAIN'		=> 'The following files are modified and do not represent the original files from the old version. phpBB determined that these files create conflicts if they are tried to be merged. Please investigate the conflicts and try to manually resolve them or continue the update choosing the preferred merging method. If you resolve the conflicts manually check the files again after you modified them. You are also able to choose between the preferred merge method for every file. The first one will result in a file where the conflicting lines from your old file will be lost, the other one will result in losing the changes from the newer file.',	'FILES_MODIFIED'				=> 'Modified files',	'FILES_MODIFIED_EXPLAIN'		=> 'The following files are modified and do not represent the original files from the old version. The updated file will be a merge between your modifications and the new file.',	'FILES_NEW'						=> 'New files',	'FILES_NEW_EXPLAIN'				=> 'The following files currently do not exist within your installation. These files will be added to your installation.',	'FILES_NEW_CONFLICT'			=> 'New conflicting files',	'FILES_NEW_CONFLICT_EXPLAIN'	=> 'The following files are new within the latest version but it has been determined that there is already a file with the same name within the same position. This file will be overwritten by the new file.',	'FILES_NOT_MODIFIED'			=> 'Not modified files',	'FILES_NOT_MODIFIED_EXPLAIN'	=> 'The following files are not modified and represent the original phpBB files from the version you want to update from.',	'FILES_UP_TO_DATE'				=> 'Already updated files',	'FILES_UP_TO_DATE_EXPLAIN'		=> 'The following files are already up to date and do not need to be updated.',	'FTP_SETTINGS'					=> 'FTP settings',	'FTP_UPDATE_METHOD'				=> 'FTP upload',	'INCOMPATIBLE_UPDATE_FILES'		=> 'The update files found are incompatible with your installed version. Your installed version is %1$s and the update file is for updating phpBB %2$s to %3$s.',	'INCOMPLETE_UPDATE_FILES'		=> 'The update files are incomplete.',	'INLINE_UPDATE_SUCCESSFUL'		=> 'The database update was successful. Now you need to continue the update process.',	'KEEP_OLD_NAME'		=> 'Keep username',	'LATEST_VERSION'		=> 'Latest version',	'LINE'					=> 'Line',	'LINE_ADDED'			=> 'Added',	'LINE_MODIFIED'			=> 'Modified',	'LINE_REMOVED'			=> 'Removed',	'LINE_UNMODIFIED'		=> 'Unmodified',	'LOGIN_UPDATE_EXPLAIN'	=> 'In order to update your installation you need to login first.',	'MAPPING_FILE_STRUCTURE'	=> 'To ease the upload here are the file locations which map your phpBB installation.',	'MERGE_MODIFICATIONS_OPTION'	=> 'Merge modifications',	'MERGE_NO_MERGE_NEW_OPTION'	=> 'Do not merge - use new file',	'MERGE_NO_MERGE_MOD_OPTION'	=> 'Do not merge - use currently installed file',	'MERGE_MOD_FILE_OPTION'		=> 'Merge modifications (removes new phpBB code within conflicting block)',	'MERGE_NEW_FILE_OPTION'		=> 'Merge modifications (removes modified code within conflicting block)',	'MERGE_SELECT_ERROR'		=> 'Conflicting file merge modes are not correctly selected.',	'MERGING_FILES'				=> 'Merging differences',	'MERGING_FILES_EXPLAIN'		=> 'Currently collecting final file changes.<br /><br />Please wait until phpBB has completed all operations on changed files.',	'NEW_FILE'						=> 'End of Conflict',	'NEW_USERNAME'					=> 'New username',	'NO_AUTH_UPDATE'				=> 'Not authorised to update',	'NO_ERRORS'						=> 'No errors',	'NO_UPDATE_FILES'				=> 'Not updating the following files',	'NO_UPDATE_FILES_EXPLAIN'		=> 'The following files are new or modified but the directory they normally reside in could not be found on your installation. If this list contains files to other directories than language/ or styles/ than you may have modified your directory structure and the update may be incomplete.',	'NO_UPDATE_FILES_OUTDATED'		=> 'No valid update directory was found, please make sure you uploaded the relevant files.<br /><br />Your installation does <strong>not</strong> seem to be up to date. Updates are available for your version of phpBB %1$s, please visit <a href="http://www.phpbb.com/downloads/" rel="external">http://www.phpbb.com/downloads/</a> to obtain the correct package to update from Version %2$s to Version %3$s.',	'NO_UPDATE_FILES_UP_TO_DATE'	=> 'Your version is up to date. There is no need to run the update tool. If you want to make an integrity check on your files make sure you uploaded the correct update files.',	'NO_UPDATE_INFO'				=> 'Update file information could not be found.',	'NO_UPDATES_REQUIRED'			=> 'No updates required',	'NO_VISIBLE_CHANGES'			=> 'No visible changes',	'NOTICE'						=> 'Notice',	'NUM_CONFLICTS'					=> 'Number of conflicts',	'NUMBER_OF_FILES_COLLECTED'		=> 'Currently differences from %1$d of %2$d files have been checked.<br />Please wait until all files are checked.',	'OLD_UPDATE_FILES'		=> 'Update files are out of date. The update files found are for updating from phpBB %1$s to phpBB %2$s but the latest version of phpBB is %3$s.',	'PACKAGE_UPDATES_TO'				=> 'Current package updates to version',	'PERFORM_DATABASE_UPDATE'			=> 'Perform database update',	'PERFORM_DATABASE_UPDATE_EXPLAIN'	=> 'Below you will find a button to the database update script. The database update can take a while, so please do not stop the execution if it seems to hang. After the database update has been performed just follow the instructions to continue the update process.',	'PREVIOUS_VERSION'					=> 'Previous version',	'PROGRESS'							=> 'Progress',	'RESULT'					=> 'Result',	'RUN_DATABASE_SCRIPT'		=> 'Update my database now',	'SELECT_DIFF_MODE'			=> 'Select diff mode',	'SELECT_DOWNLOAD_FORMAT'	=> 'Select download archive format',	'SELECT_FTP_SETTINGS'		=> 'Select FTP settings',	'SHOW_DIFF_CONFLICT'		=> 'Show differences/conflicts',	'SHOW_DIFF_FINAL'			=> 'Show resulting file',	'SHOW_DIFF_MODIFIED'		=> 'Show merged differences',	'SHOW_DIFF_NEW'				=> 'Show file contents',	'SHOW_DIFF_NEW_CONFLICT'	=> 'Show differences',	'SHOW_DIFF_NOT_MODIFIED'	=> 'Show differences',	'SOME_QUERIES_FAILED'		=> 'Some queries failed, the statements and errors are listed below.',	'SQL'						=> 'SQL',	'SQL_FAILURE_EXPLAIN'		=> 'This is probably nothing to worry about, update will continue. Should this fail to complete you may need to seek help at our support forums. See <a href="../docs/README.html">README</a> for details on how to obtain advice.',	'STAGE_FILE_CHECK'			=> 'Check files',	'STAGE_UPDATE_DB'			=> 'Update database',	'STAGE_UPDATE_FILES'		=> 'Update files',	'STAGE_VERSION_CHECK'		=> 'Version check',	'STATUS_CONFLICT'			=> 'Modified file producing conflicts',	'STATUS_MODIFIED'			=> 'Modified file',	'STATUS_NEW'				=> 'New file',	'STATUS_NEW_CONFLICT'		=> 'Conflicting new file',	'STATUS_NOT_MODIFIED'		=> 'Not modified file',	'STATUS_UP_TO_DATE'			=> 'Already updated file',	'TOGGLE_DISPLAY'			=> 'View/Hide file list',	'TRY_DOWNLOAD_METHOD'		=> 'You may want to try the download modified files method.<br />This method always works and is also the recommended update path.',	'TRY_DOWNLOAD_METHOD_BUTTON'=> 'Try this method now',	'UPDATE_COMPLETED'				=> 'Update completed',	'UPDATE_DATABASE'				=> 'Update database',	'UPDATE_DATABASE_EXPLAIN'		=> 'Within the next step the database will be updated.',	'UPDATE_DATABASE_SCHEMA'		=> 'Updating database schema',	'UPDATE_FILES'					=> 'Update files',	'UPDATE_FILES_NOTICE'			=> 'Please make sure you have updated your board files too, this file is only updating your database.',	'UPDATE_INSTALLATION'			=> 'Update phpBB installation',	'UPDATE_INSTALLATION_EXPLAIN'	=> 'With this option, it is possible to update your phpBB installation to the latest version.<br />During the process all of your files will be checked for their integrity. You are able to review all differences and files before the update.<br /><br />The file update itself can be done in two different ways.</p><h2>Manual Update</h2><p>With this update you only download your personal set of changed files to make sure you do not lose your file modifications you may have done. After you downloaded this package you need to manually upload the files to their correct position under your phpBB root directory. Once done, you are able to do the file check stage again to see if you moved the files to their correct location.</p><h2>Automatic Update with FTP</h2><p>This method is similar to the first one but without the need to download the changed files and uploading them on your own. This will be done for you. In order to use this method you need to know your FTP login details since you will be asked for them. Once finished you will be redirected to the file check again to make sure everything got updated correctly.<br /><br />',	'UPDATE_INSTRUCTIONS'			=> '		<h1>Release announcement</h1>		<p>Please read <a href="%1$s" title="%1$s"><strong>the release announcement for the latest version</strong></a> before you continue your update process, it may contain useful information. It also contains full download links as well as the change log.</p>		<br />		<h1>How to update your installation with the Automatic Update Package</h1>		<p>The recommended way of updating your installation listed here is only valid for the automatic update package. You are also able to update your installation using the methods listed within the INSTALL.html document. The steps for updating phpBB3 automatically are:</p>		<ul style="margin-left: 20px; font-size: 1.1em;">			<li>Go to the <a href="http://www.phpbb.com/downloads/" title="http://www.phpbb.com/downloads/">phpBB.com downloads page</a> and download the "Automatic Update Package" archive.<br /><br /></li>			<li>Unpack the archive.<br /><br /></li>			<li>Upload the complete uncompressed install folder to your phpBB root directory (where your config.php file is).<br /><br /></li>		</ul>		<p>Once uploaded your board will be offline for normal users due to the install directory you uploaded now present.<br /><br />		<strong><a href="%2$s" title="%2$s">Now start the update process by pointing your browser to the install folder</a>.</strong><br />		<br />		You will then be guided through the update process. You will be notified once the update is complete.		</p>	',	'UPDATE_INSTRUCTIONS_INCOMPLETE'	=> '		<h1>Incomplete update detected</h1>		<p>phpBB detected an incomplete automatic update. Please make sure you followed every step within the automatic update tool. Below you will find the link again, or go directly to your install directory.</p>	',	'UPDATE_METHOD'					=> 'Update method',	'UPDATE_METHOD_EXPLAIN'			=> 'You are now able to choose your preferred update method. Using the FTP upload will present you with a form you need to enter your FTP account details into. With this method the files will be automatically moved to the new location and backups of the old files being created by appending .bak to the filename. If you choose to download the modified files you are able to unpack and upload them to their correct location manually later.',	'UPDATE_REQUIRES_FILE'			=> 'The updater requires that the following file is present: %s',	'UPDATE_SUCCESS'				=> 'Update was successful',	'UPDATE_SUCCESS_EXPLAIN'		=> 'Successfully updated all files. The next step involves checking all files again to make sure the files got updated correctly.',	'UPDATE_VERSION_OPTIMIZE'		=> 'Updating version and optimising tables',	'UPDATING_DATA'					=> 'Updating data',	'UPDATING_TO_LATEST_STABLE'		=> 'Updating database to latest stable release',	'UPDATED_VERSION'				=> 'Updated version',	'UPGRADE_INSTRUCTIONS'			=> 'A new feature release <strong>%1$s</strong> is available. Please read <a href="%2$s" title="%2$s"><strong>the release announcement</strong></a> to learn about what it has to offer, and how to upgrade.',	'UPLOAD_METHOD'					=> 'Upload method',	'UPDATE_DB_SUCCESS'				=> 'Database update was successful.',	'USER_ACTIVE'					=> 'Active user',	'USER_INACTIVE'					=> 'Inactive user',	'VERSION_CHECK'					=> 'Version check',	'VERSION_CHECK_EXPLAIN'			=> 'Checks to see if your phpBB installation is up to date.',	'VERSION_NOT_UP_TO_DATE'		=> 'Your phpBB installation is not up to date. Please continue the update process.',	'VERSION_NOT_UP_TO_DATE_ACP'	=> 'Your phpBB installation is not up to date.<br />Below is a link to the release announcement, which contains more information as well as instructions on updating.',	'VERSION_NOT_UP_TO_DATE_TITLE'	=> 'Your phpBB installation is not up to date.',	'VERSION_UP_TO_DATE'			=> 'Your phpBB installation is up to date. Although there are no updates available at this time, you may continue in order to perform a file validity check.',	'VERSION_UP_TO_DATE_ACP'		=> 'Your phpBB installation is up to date. There are no updates available at this time.',	'VIEWING_FILE_CONTENTS'			=> 'Viewing file contents',	'VIEWING_FILE_DIFF'				=> 'Viewing file differences',	'WRONG_INFO_FILE_FORMAT'	=> 'Wrong info file format',));// Default database schema entries...$lang = array_merge($lang, array(	'CONFIG_BOARD_EMAIL_SIG'		=> 'Thanks, The Management',	'CONFIG_SITE_DESC'				=> 'A short text to describe your forum',	'CONFIG_SITENAME'				=> 'yourdomain.com',	'DEFAULT_INSTALL_POST'			=> 'This is an example post in your phpBB3 installation. Everything seems to be working. You may delete this post if you like and continue to set up your board. During the installation process your first category and your first forum are assigned an appropriate set of permissions for the predefined usergroups administrators, bots, global moderators, guests, registered users and registered COPPA users. If you also choose to delete your first category and your first forum, do not forget to assign permissions for all these usergroups for all new categories and forums you create. It is recommended to rename your first category and your first forum and copy permissions from these while creating new categories and forums. Have fun!',	'FORUMS_FIRST_CATEGORY'			=> 'Your first category',	'FORUMS_TEST_FORUM_DESC'		=> 'Description of your first forum.',	'FORUMS_TEST_FORUM_TITLE'		=> 'Your first forum',	'RANKS_SITE_ADMIN_TITLE'		=> 'Site Admin',	'REPORT_WAREZ'					=> 'The post contains links to illegal or pirated software.',	'REPORT_SPAM'					=> 'The reported post has the only purpose to advertise for a website or another product.',	'REPORT_OFF_TOPIC'				=> 'The reported post is off topic.',	'REPORT_OTHER'					=> 'The reported post does not fit into any other category, please use the further information field.',	'SMILIES_ARROW'					=> 'Arrow',	'SMILIES_CONFUSED'				=> 'Confused',	'SMILIES_COOL'					=> 'Cool',	'SMILIES_CRYING'				=> 'Crying or Very Sad',	'SMILIES_EMARRASSED'			=> 'Embarrassed',	'SMILIES_EVIL'					=> 'Evil or Very Mad',	'SMILIES_EXCLAMATION'			=> 'Exclamation',	'SMILIES_GEEK'					=> 'Geek',	'SMILIES_IDEA'					=> 'Idea',	'SMILIES_LAUGHING'				=> 'Laughing',	'SMILIES_MAD'					=> 'Mad',	'SMILIES_MR_GREEN'				=> 'Mr. Green',	'SMILIES_NEUTRAL'				=> 'Neutral',	'SMILIES_QUESTION'				=> 'Question',	'SMILIES_RAZZ'					=> 'Razz',	'SMILIES_ROLLING_EYES'			=> 'Rolling Eyes',	'SMILIES_SAD'					=> 'Sad',	'SMILIES_SHOCKED'				=> 'Shocked',	'SMILIES_SMILE'					=> 'Smile',	'SMILIES_SURPRISED'				=> 'Surprised',	'SMILIES_TWISTED_EVIL'			=> 'Twisted Evil',	'SMILIES_UBER_GEEK'				=> 'Uber Geek',	'SMILIES_VERY_HAPPY'			=> 'Very Happy',	'SMILIES_WINK'					=> 'Wink',	'TOPICS_TOPIC_TITLE'			=> 'Welcome to phpBB3',));?>
<?php/**** help_bbcode [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/if (!defined('IN_PHPBB')){	exit;}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$help = array(	array(		0 => '--',		1 => 'Introduction'	),	array(		0 => 'What is BBCode?',		1 => 'BBCode is a special implementation of HTML. Whether you can actually use BBCode in your posts on the forum is determined by the administrator. In addition you can disable BBCode on a per post basis via the posting form. BBCode itself is similar in style to HTML, tags are enclosed in square brackets [ and ] rather than &lt; and &gt; and it offers greater control over what and how something is displayed. Depending on the template you are using you may find adding BBCode to your posts is made much easier through a clickable interface above the message area on the posting form. Even with this you may find the following guide useful.'	),	array(		0 => '--',		1 => 'Text Formatting'	),	array(		0 => 'How to create bold, italic and underlined text',		1 => 'BBCode includes tags to allow you to quickly change the basic style of your text. This is achieved in the following ways: <ul><li>To make a piece of text bold enclose it in <strong>[b][/b]</strong>, e.g. <br /><br /><strong>[b]</strong>Hello<strong>[/b]</strong><br /><br />will become <strong>Hello</strong></li><li>For underlining use <strong>[u][/u]</strong>, for example:<br /><br /><strong>[u]</strong>Good Morning<strong>[/u]</strong><br /><br />becomes <span style="text-decoration: underline">Good Morning</span></li><li>To italicise text use <strong>[i][/i]</strong>, e.g.<br /><br />This is <strong>[i]</strong>Great!<strong>[/i]</strong><br /><br />would give This is <i>Great!</i></li></ul>'	),	array(		0 => 'How to change the text colour or size',		1 => 'To alter the colour or size of your text the following tags can be used. Keep in mind that how the output appears will depend on the viewers browser and system: <ul><li>Changing the colour of text is achieved by wrapping it in <strong>[color=][/color]</strong>. You can specify either a recognised colour name (eg. red, blue, yellow, etc.) or the hexadecimal triplet alternative, e.g. #FFFFFF, #000000. For example, to create red text you could use:<br /><br /><strong>[color=red]</strong>Hello!<strong>[/color]</strong><br /><br />or<br /><br /><strong>[color=#FF0000]</strong>Hello!<strong>[/color]</strong><br /><br />Both will output <span style="color:red">Hello!</span></li><li>Changing the text size is achieved in a similar way using <strong>[size=][/size]</strong>. This tag is dependent on the template the user has selected but the recommended format is a numerical value representing the text size in percent, starting at 20 (very small) through to 200 (very large) by default. For example:<br /><br /><strong>[size=30]</strong>SMALL<strong>[/size]</strong><br /><br />will generally be <span style="font-size:30%;">SMALL</span><br /><br />whereas:<br /><br /><strong>[size=200]</strong>HUGE!<strong>[/size]</strong><br /><br />will be <span style="font-size:200%;">HUGE!</span></li></ul>'	),	array(		0 => 'Can I combine formatting tags?',		1 => 'Yes, of course you can, for example to get someones attention you may write:<br /><br /><strong>[size=200][color=red][b]</strong>LOOK AT ME!<strong>[/b][/color][/size]</strong><br /><br />this would output <span style="color:red;font-size:200%;"><strong>LOOK AT ME!</strong></span><br /><br />We dont recommend you output lots of text that looks like this though! Remember it is up to you, the poster, to ensure tags are closed correctly. For example the following is incorrect:<br /><br /><strong>[b][u]</strong>This is wrong<strong>[/b][/u]</strong>'	),	array(		0 => '--',		1 => 'Quoting and outputting fixed-width text'	),	array(		0 => 'Quoting text in replies',		1 => 'There are two ways you can quote text, with a reference or without.<ul><li>When you utilise the Quote function to reply to a post on the board you should notice that the post text is added to the message window enclosed in a <strong>[quote=&quot;&quot;][/quote]</strong> block. This method allows you to quote with a reference to a person or whatever else you choose to put! For example to quote a piece of text Mr. Blobby wrote you would enter:<br /><br /><strong>[quote=&quot;Mr. Blobby&quot;]</strong>The text Mr. Blobby wrote would go here<strong>[/quote]</strong><br /><br />The resulting output will automatically add &quot;Mr. Blobby wrote:&quot; before the actual text. Remember you <strong>must</strong> include the quotation marks &quot;&quot; around the name you are quoting, they are not optional.</li><li>The second method allows you to blindly quote something. To utilise this enclose the text in <strong>[quote][/quote]</strong> tags. When you view the message it will simply show the text within a quotation block.</li></ul>'	),	array(		0 => 'Outputting code or fixed width data',		1 => 'If you want to output a piece of code or in fact anything that requires a fixed width, e.g. Courier type font you should enclose the text in <strong>[code][/code]</strong> tags, e.g.<br /><br /><strong>[code]</strong>echo &quot;This is some code&quot;;<strong>[/code]</strong><br /><br />All formatting used within <strong>[code][/code]</strong> tags is retained when you later view it. PHP syntax highlighting can be enabled using <strong>[code=php][/code]</strong> and is recommended when posting PHP code samples as it improves readability.'	),	array(		0 => '--',		1 => 'Generating lists'	),	array(		0 => 'Creating an Unordered list',		1 => 'BBCode supports two types of lists, unordered and ordered. They are essentially the same as their HTML equivalents. An unordered list outputs each item in your list sequentially one after the other indenting each with a bullet character. To create an unordered list you use <strong>[list][/list]</strong> and define each item within the list using <strong>[*]</strong>. For example to list your favourite colours you could use:<br /><br /><strong>[list]</strong><br /><strong>[*]</strong>Red<br /><strong>[*]</strong>Blue<br /><strong>[*]</strong>Yellow<br /><strong>[/list]</strong><br /><br />This would generate the following list:<ul><li>Red</li><li>Blue</li><li>Yellow</li></ul>'	),	array(		0 => 'Creating an Ordered list',		1 => 'The second type of list, an ordered list, gives you control over what is output before each item. To create an ordered list you use <strong>[list=1][/list]</strong> to create a numbered list or alternatively <strong>[list=a][/list]</strong> for an alphabetical list. As with the unordered list, items are specified using <strong>[*]</strong>. For example:<br /><br /><strong>[list=1]</strong><br /><strong>[*]</strong>Go to the shops<br /><strong>[*]</strong>Buy a new computer<br /><strong>[*]</strong>Swear at computer when it crashes<br /><strong>[/list]</strong><br /><br />will generate the following:<ol style="list-style-type: decimal;"><li>Go to the shops</li><li>Buy a new computer</li><li>Swear at computer when it crashes</li></ol>Whereas for an alphabetical list you would use:<br /><br /><strong>[list=a]</strong><br /><strong>[*]</strong>The first possible answer<br /><strong>[*]</strong>The second possible answer<br /><strong>[*]</strong>The third possible answer<br /><strong>[/list]</strong><br /><br />giving<ol style="list-style-type: lower-alpha"><li>The first possible answer</li><li>The second possible answer</li><li>The third possible answer</li></ol>'	),	// This block will switch the FAQ-Questions to the second template column	array(		0 => '--',		1 => '--'	),	array(		0 => '--',		1 => 'Creating Links'	),	array(		0 => 'Linking to another site',		1 => 'phpBB BBCode supports a number of ways of creating URIs (Uniform Resource Indicators) better known as URLs.<ul><li>The first of these uses the <strong>[url=][/url]</strong> tag, whatever you type after the = sign will cause the contents of that tag to act as a URL. For example to link to phpBB.com you could use:<br /><br /><strong>[url=http://www.phpbb.com/]</strong>Visit phpBB!<strong>[/url]</strong><br /><br />This would generate the following link, <a href="http://www.phpbb.com/">Visit phpBB!</a> Please notice that the link opens in the same window or a new window depending on the users browser preferences.</li><li>If you want the URL itself displayed as the link you can do this by simply using:<br /><br /><strong>[url]</strong>http://www.phpbb.com/<strong>[/url]</strong><br /><br />This would generate the following link, <a href="http://www.phpbb.com/">http://www.phpbb.com/</a></li><li>Additionally, phpBB features something called <i>Magic Links</i>, this will turn any syntactically correct URL into a link without you needing to specify any tags or even the leading http://. For example typing www.phpbb.com into your message will automatically lead to <a href="http://www.phpbb.com/">www.phpbb.com</a> being output when you view the message.</li><li>The same thing applies equally to e-mail addresses, you can either specify an address explicitly for example:<br /><br /><strong>[email]</strong>no.one@domain.adr<strong>[/email]</strong><br /><br />which will output <a href="mailto:no.one@domain.adr">no.one@domain.adr</a> or you can just type no.one@domain.adr into your message and it will be automatically converted when you view.</li></ul>As with all the BBCode tags you can wrap URLs around any of the other tags such as <strong>[img][/img]</strong> (see next entry), <strong>[b][/b]</strong>, etc. As with the formatting tags it is up to you to ensure the correct open and close order is following, for example:<br /><br /><strong>[url=http://www.google.com/][img]</strong>http://www.google.com/intl/en_ALL/images/logo.gif<strong>[/url][/img]</strong><br /><br />is <span style="text-decoration: underline">not</span> correct which may lead to your post being deleted so take care.'	),	array(		0 => '--',		1 => 'Showing images in posts'	),	array(		0 => 'Adding an image to a post',		1 => 'phpBB BBCode incorporates a tag for including images in your posts. Two very important things to remember when using this tag are: many users do not appreciate lots of images being shown in posts and secondly the image you display must already be available on the internet (it cannot exist only on your computer for example, unless you run a webserver!). To display an image you must surround the URL pointing to the image with <strong>[img][/img]</strong> tags. For example:<br /><br /><strong>[img]</strong>http://www.google.com/intl/en_ALL/images/logo.gif<strong>[/img]</strong><br /><br />As noted in the URL section above you can wrap an image in a <strong>[url][/url]</strong> tag if you wish, e.g.<br /><br /><strong>[url=http://www.google.com/][img]</strong>http://www.google.com/intl/en_ALL/images/logo.gif<strong>[/img][/url]</strong><br /><br />would generate:<br /><br /><a href="http://www.google.com/"><img src="http://www.google.com/intl/en_ALL/images/logo.gif" alt="" /></a>'	),	array(		0 => 'Adding attachments into a post',		1 => 'Attachments can now be placed in any part of a post by using the new <strong>[attachment=][/attachment]</strong> BBCode, if the attachments functionality has been enabled by a board administrator and if you are given the appropriate permissions to create attachments. Within the posting screen is a drop-down box (respectively a button) for placing attachments inline.'	),	array(		0 => '--',		1 => 'Other matters'	),	array(		0 => 'Can I add my own tags?',		1 => 'If you are an administrator on this board and have the proper permissions, you can add further BBCodes through the Custom BBCodes section.'	));?>
<?php/**** acp_search [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ACP_SEARCH_INDEX_EXPLAIN'				=> 'Here you can manage the search backends indexes. Since you normally use only one backend you should delete all indexes that you do not make use of. After altering some of the search settings (e.g. the number of minimum/maximum chars) it might be worth recreating the index so it reflects those changes.',	'ACP_SEARCH_SETTINGS_EXPLAIN'			=> 'Here you can define what search backend will be used for indexing posts and performing searches. You can set various options that can influence how much processing these actions require. Some of these settings are the same for all search engine backends.',	'COMMON_WORD_THRESHOLD'					=> 'Common word threshold',	'COMMON_WORD_THRESHOLD_EXPLAIN'			=> 'Words which are contained in a greater percentage of all posts will be regarded as common. Common words are ignored in search queries. Set to zero to disable. Only takes effect if there are more than 100 posts. If you want words that are currently regarded as common to be reconsidered you have to recreate the index.',	'CONFIRM_SEARCH_BACKEND'				=> 'Are you sure you wish to switch to a different search backend? After changing the search backend you will have to create an index for the new search backend. If you dont plan on switching back to the old search backend you can also delete the old backends index in order to free system resources.',	'CONTINUE_DELETING_INDEX'				=> 'Continue previous index removal process',	'CONTINUE_DELETING_INDEX_EXPLAIN'		=> 'An index removal process has been started. In order to access the search index page you will have to complete it or cancel it.',	'CONTINUE_INDEXING'						=> 'Continue previous indexing process',	'CONTINUE_INDEXING_EXPLAIN'				=> 'An indexing process has been started. In order to access the search index page you will have to complete it or cancel it.',	'CREATE_INDEX'							=> 'Create index',	'DELETE_INDEX'							=> 'Delete index',	'DELETING_INDEX_IN_PROGRESS'			=> 'Deleting the index in progress',	'DELETING_INDEX_IN_PROGRESS_EXPLAIN'	=> 'The search backend is currently cleaning its index. This can take a few minutes.',	'FULLTEXT_MYSQL_INCOMPATIBLE_VERSION'	=> 'The MySQL fulltext backend can only be used with MySQL4 and above.',	'FULLTEXT_MYSQL_NOT_MYISAM'				=> 'MySQL fulltext indexes can only be used with MyISAM tables.',	'FULLTEXT_MYSQL_TOTAL_POSTS'			=> 'Total number of indexed posts',	'FULLTEXT_MYSQL_MBSTRING'				=> 'Support for non-latin UTF-8 characters using mbstring:',	'FULLTEXT_MYSQL_PCRE'					=> 'Support for non-latin UTF-8 characters using PCRE:',	'FULLTEXT_MYSQL_MBSTRING_EXPLAIN'		=> 'If PCRE does not have unicode character properties, the search backend will try to use mbstrings regular expression engine.',	'FULLTEXT_MYSQL_PCRE_EXPLAIN'			=> 'This search backend requires PCRE unicode character properties, only available in PHP 4.4, 5.1 and above, if you want to search for non-latin characters.',	'FULLTEXT_MYSQL_MIN_SEARCH_CHARS_EXPLAIN'	=> 'Words with at least this many characters will be indexed for searching. You or your host can only change this setting by changing the mysql configuration.',	'FULLTEXT_MYSQL_MAX_SEARCH_CHARS_EXPLAIN'	=> 'Words with no more than this many characters will be indexed for searching. You or your host can only change this setting by changing the mysql configuration.',	'GENERAL_SEARCH_SETTINGS'				=> 'General search settings',	'GO_TO_SEARCH_INDEX'					=> 'Go to search index page',	'INDEX_STATS'							=> 'Index statistics',	'INDEXING_IN_PROGRESS'					=> 'Indexing in progress',	'INDEXING_IN_PROGRESS_EXPLAIN'			=> 'The search backend is currently indexing all posts on the board. This can take from a few minutes to a few hours depending on your boards size.',	'LIMIT_SEARCH_LOAD'						=> 'Search page system load limit',	'LIMIT_SEARCH_LOAD_EXPLAIN'				=> 'If the 1 minute system load exceeds this value the search page will go offline, 1.0 equals ~100% utilisation of one processor. This only functions on UNIX based servers.',	'MAX_SEARCH_CHARS'						=> 'Max characters indexed by search',	'MAX_SEARCH_CHARS_EXPLAIN'				=> 'Words with no more than this many characters will be indexed for searching.',	'MAX_NUM_SEARCH_KEYWORDS'				=> 'Maximum number of allowed keywords',	'MAX_NUM_SEARCH_KEYWORDS_EXPLAIN'		=> 'Maximum number of words the user is able to search for. A value of 0 allows an unlimited number of words.',	'MIN_SEARCH_CHARS'						=> 'Min characters indexed by search',	'MIN_SEARCH_CHARS_EXPLAIN'				=> 'Words with at least this many characters will be indexed for searching.',	'MIN_SEARCH_AUTHOR_CHARS'				=> 'Min author name characters',	'MIN_SEARCH_AUTHOR_CHARS_EXPLAIN'		=> 'Users have to enter at least this many characters of the name when performing a wildcard author search. If the authors username is shorter than this number you can still search for the authors posts by entering the complete username.',	'PROGRESS_BAR'							=> 'Progress bar',	'SEARCH_GUEST_INTERVAL'					=> 'Guest search flood interval',	'SEARCH_GUEST_INTERVAL_EXPLAIN'			=> 'Number of seconds guests must wait between searches. If one guest searches all others have to wait until the time interval passed.',	'SEARCH_INDEX_CREATE_REDIRECT'			=> 'All posts up to post id %1$d have now been indexed, of which %2$d posts were within this step.<br />The current rate of indexing is approximately %3$.1f posts per second.<br />Indexing in progress',	'SEARCH_INDEX_DELETE_REDIRECT'			=> 'All posts up to post id %1$d have been removed from the search index.<br />Deleting in progress',	'SEARCH_INDEX_CREATED'					=> 'Successfully indexed all posts in the board database.',	'SEARCH_INDEX_REMOVED'					=> 'Successfully deleted the search index for this backend.',	'SEARCH_INTERVAL'						=> 'User search flood interval',	'SEARCH_INTERVAL_EXPLAIN'				=> 'Number of seconds users must wait between searches. This interval is checked independently for each user.',	'SEARCH_STORE_RESULTS'					=> 'Search result cache length',	'SEARCH_STORE_RESULTS_EXPLAIN'			=> 'Cached search results will expire after this time, in seconds. Set to 0 if you want to disable search cache.',	'SEARCH_TYPE'							=> 'Search backend',	'SEARCH_TYPE_EXPLAIN'					=> 'phpBB allows you to choose the backend that is used for searching text in post contents. By default the search will use phpBBs own fulltext search.',	'SWITCHED_SEARCH_BACKEND'				=> 'You switched the search backend. In order to use the new search backend you should make sure that there is an index for the backend you chose.',	'TOTAL_WORDS'							=> 'Total number of indexed words',	'TOTAL_MATCHES'							=> 'Total number of word to post relations indexed',	'YES_SEARCH'							=> 'Enable search facilities',	'YES_SEARCH_EXPLAIN'					=> 'Enables user facing search functionality including member search.',	'YES_SEARCH_UPDATE'						=> 'Enable fulltext updating',	'YES_SEARCH_UPDATE_EXPLAIN'				=> 'Updating of fulltext indexes when posting, overridden if search is disabled.',));?>
<?php/**** LDAP auth plug-in for phpBB3** Authentication plug-ins is largely down to Sergey Kanareykin, our thanks to him.** @package login* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Connect to ldap server* Only allow changing authentication to ldap if we can connect to the ldap server* Called in acp_board while setting authentication plugins*/function init_ldap(){	global $config, $user;	if (!@extension_loaded('ldap'))	{		return $user->lang['LDAP_NO_LDAP_EXTENSION'];	}	$config['ldap_port'] = (int) $config['ldap_port'];	if ($config['ldap_port'])	{		$ldap = @ldap_connect($config['ldap_server'], $config['ldap_port']);	}	else	{		$ldap = @ldap_connect($config['ldap_server']);	}	if (!$ldap)	{		return $user->lang['LDAP_NO_SERVER_CONNECTION'];	}	@ldap_set_option($ldap, LDAP_OPT_PROTOCOL_VERSION, 3);	@ldap_set_option($ldap, LDAP_OPT_REFERRALS, 0);	if ($config['ldap_user'] || $config['ldap_password'])	{		if (!@ldap_bind($ldap, htmlspecialchars_decode($config['ldap_user']), htmlspecialchars_decode($config['ldap_password'])))		{			return $user->lang['LDAP_INCORRECT_USER_PASSWORD'];		}	}	// ldap_connect only checks whether the specified server is valid, so the connection might still fail	$search = @ldap_search(		$ldap,		htmlspecialchars_decode($config['ldap_base_dn']),		ldap_user_filter($user->data['username']),		(empty($config['ldap_email'])) ?			array(htmlspecialchars_decode($config['ldap_uid'])) :			array(htmlspecialchars_decode($config['ldap_uid']), htmlspecialchars_decode($config['ldap_email'])),		0,		1	);	if ($search === false)	{		return $user->lang['LDAP_SEARCH_FAILED'];	}	$result = @ldap_get_entries($ldap, $search);	@ldap_close($ldap);	if (!is_array($result) || sizeof($result) < 2)	{		return sprintf($user->lang['LDAP_NO_IDENTITY'], $user->data['username']);	}	if (!empty($config['ldap_email']) && !isset($result[0][htmlspecialchars_decode($config['ldap_email'])]))	{		return $user->lang['LDAP_NO_EMAIL'];	}	return false;}/*** Login function*/function login_ldap(&$username, &$password){	global $db, $config, $user;	// do not allow empty password	if (!$password)	{		return array(			'status'	=> LOGIN_ERROR_PASSWORD,			'error_msg'	=> 'NO_PASSWORD_SUPPLIED',			'user_row'	=> array('user_id' => ANONYMOUS),		);	}	if (!$username)	{		return array(			'status'	=> LOGIN_ERROR_USERNAME,			'error_msg'	=> 'LOGIN_ERROR_USERNAME',			'user_row'	=> array('user_id' => ANONYMOUS),		);	}	if (!@extension_loaded('ldap'))	{		return array(			'status'		=> LOGIN_ERROR_EXTERNAL_AUTH,			'error_msg'		=> 'LDAP_NO_LDAP_EXTENSION',			'user_row'		=> array('user_id' => ANONYMOUS),		);	}	$config['ldap_port'] = (int) $config['ldap_port'];	if ($config['ldap_port'])	{		$ldap = @ldap_connect($config['ldap_server'], $config['ldap_port']);	}	else	{		$ldap = @ldap_connect($config['ldap_server']);	}	if (!$ldap)	{		return array(			'status'		=> LOGIN_ERROR_EXTERNAL_AUTH,			'error_msg'		=> 'LDAP_NO_SERVER_CONNECTION',			'user_row'		=> array('user_id' => ANONYMOUS),		);	}	@ldap_set_option($ldap, LDAP_OPT_PROTOCOL_VERSION, 3);	@ldap_set_option($ldap, LDAP_OPT_REFERRALS, 0);	if ($config['ldap_user'] || $config['ldap_password'])	{		if (!@ldap_bind($ldap, htmlspecialchars_decode($config['ldap_user']), htmlspecialchars_decode($config['ldap_password'])))		{			return $user->lang['LDAP_NO_SERVER_CONNECTION'];		}	}	$search = @ldap_search(		$ldap,		htmlspecialchars_decode($config['ldap_base_dn']),		ldap_user_filter($username),		(empty($config['ldap_email'])) ?			array(htmlspecialchars_decode($config['ldap_uid'])) :			array(htmlspecialchars_decode($config['ldap_uid']), htmlspecialchars_decode($config['ldap_email'])),		0,		1	);	$ldap_result = @ldap_get_entries($ldap, $search);	if (is_array($ldap_result) && sizeof($ldap_result) > 1)	{		if (@ldap_bind($ldap, $ldap_result[0]['dn'], htmlspecialchars_decode($password)))		{			@ldap_close($ldap);			$sql ='SELECT user_id, username, user_password, user_passchg, user_email, user_type				FROM ' . USERS_TABLE . "				WHERE username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($row)			{				unset($ldap_result);				// User inactive...				if ($row['user_type'] == USER_INACTIVE || $row['user_type'] == USER_IGNORE)				{					return array(						'status'		=> LOGIN_ERROR_ACTIVE,						'error_msg'		=> 'ACTIVE_ERROR',						'user_row'		=> $row,					);				}				// Successful login... set user_login_attempts to zero...				return array(					'status'		=> LOGIN_SUCCESS,					'error_msg'		=> false,					'user_row'		=> $row,				);			}			else			{				// retrieve default group id				$sql = 'SELECT group_id					FROM ' . GROUPS_TABLE . "					WHERE group_name = '" . $db->sql_escape('REGISTERED') . "'						AND group_type = " . GROUP_SPECIAL;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error('NO_GROUP');				}				// generate user account data				$ldap_user_row = array(					'username'		=> $username,					'user_password'	=> phpbb_hash($password),					'user_email'	=> (!empty($config['ldap_email'])) ? utf8_htmlspecialchars($ldap_result[0][htmlspecialchars_decode($config['ldap_email'])][0]) : '',					'group_id'		=> (int) $row['group_id'],					'user_type'		=> USER_NORMAL,					'user_ip'		=> $user->ip,					'user_new'		=> ($config['new_member_post_limit']) ? 1 : 0,				);				unset($ldap_result);				// this is the user's first login so create an empty profile				return array(					'status'		=> LOGIN_SUCCESS_CREATE_PROFILE,					'error_msg'		=> false,					'user_row'		=> $ldap_user_row,				);			}		}		else		{			unset($ldap_result);			@ldap_close($ldap);			// Give status about wrong password...			return array(				'status'		=> LOGIN_ERROR_PASSWORD,				'error_msg'		=> 'LOGIN_ERROR_PASSWORD',				'user_row'		=> array('user_id' => ANONYMOUS),			);		}	}	@ldap_close($ldap);	return array(		'status'	=> LOGIN_ERROR_USERNAME,		'error_msg'	=> 'LOGIN_ERROR_USERNAME',		'user_row'	=> array('user_id' => ANONYMOUS),	);}/*** Generates a filter string for ldap_search to find a user** @param	$username	string	Username identifying the searched user** @return				string	A filter string for ldap_search*/function ldap_user_filter($username){	global $config;	$filter = '(' . $config['ldap_uid'] . '=' . ldap_escape(htmlspecialchars_decode($username)) . ')';	if ($config['ldap_user_filter'])	{		$_filter = ($config['ldap_user_filter'][0] == '(' && substr($config['ldap_user_filter'], -1) == ')') ? $config['ldap_user_filter'] : "({$config['ldap_user_filter']})";		$filter = "(&{$filter}{$_filter})";	}	return $filter;}/*** Escapes an LDAP AttributeValue*/function ldap_escape($string){	return str_replace(array('*', '\\', '(', ')'), array('\\*', '\\\\', '\\(', '\\)'), $string);}/*** This function is used to output any required fields in the authentication* admin panel. It also defines any required configuration table fields.*/function acp_ldap(&$new){	global $user;	$tpl = '	<dl>		<dt><label for="ldap_server">' . $user->lang['LDAP_SERVER'] . ':</label><br /><span>' . $user->lang['LDAP_SERVER_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_server" size="40" name="config[ldap_server]" value="' . $new['ldap_server'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_port">' . $user->lang['LDAP_PORT'] . ':</label><br /><span>' . $user->lang['LDAP_PORT_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_port" size="40" name="config[ldap_port]" value="' . $new['ldap_port'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_dn">' . $user->lang['LDAP_DN'] . ':</label><br /><span>' . $user->lang['LDAP_DN_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_dn" size="40" name="config[ldap_base_dn]" value="' . $new['ldap_base_dn'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_uid">' . $user->lang['LDAP_UID'] . ':</label><br /><span>' . $user->lang['LDAP_UID_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_uid" size="40" name="config[ldap_uid]" value="' . $new['ldap_uid'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_user_filter">' . $user->lang['LDAP_USER_FILTER'] . ':</label><br /><span>' . $user->lang['LDAP_USER_FILTER_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_user_filter" size="40" name="config[ldap_user_filter]" value="' . $new['ldap_user_filter'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_email">' . $user->lang['LDAP_EMAIL'] . ':</label><br /><span>' . $user->lang['LDAP_EMAIL_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_email" size="40" name="config[ldap_email]" value="' . $new['ldap_email'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_user">' . $user->lang['LDAP_USER'] . ':</label><br /><span>' . $user->lang['LDAP_USER_EXPLAIN'] . '</span></dt>		<dd><input type="text" id="ldap_user" size="40" name="config[ldap_user]" value="' . $new['ldap_user'] . '" /></dd>	</dl>	<dl>		<dt><label for="ldap_password">' . $user->lang['LDAP_PASSWORD'] . ':</label><br /><span>' . $user->lang['LDAP_PASSWORD_EXPLAIN'] . '</span></dt>		<dd><input type="password" id="ldap_password" size="40" name="config[ldap_password]" value="' . $new['ldap_password'] . '" autocomplete="off" /></dd>	</dl>	';	// These are fields required in the config table	return array(		'tpl'		=> $tpl,		'config'	=> array('ldap_server', 'ldap_port', 'ldap_base_dn', 'ldap_uid', 'ldap_user_filter', 'ldap_email', 'ldap_user', 'ldap_password')	);}?>
<?php/*** Only adjust bitfields, do not rewrite text...* All new parsings have the img, flash and quote modes set to true** You should make a backup from your users, posts and privmsgs table in case something goes wrong* Forum descriptions and rules need to be re-submitted manually.*/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.'.$phpEx);include($phpbb_root_path . 'includes/message_parser.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$echos = 0;// Adjust user signatures$message_parser = new parse_message();$message_parser->mode = 'sig';$message_parser->bbcode_init();$sql = 'SELECT user_id, user_sig, user_sig_bbcode_uid, user_sig_bbcode_bitfield	FROM ' . USERS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	// Convert bbcodes back to their normal form	if ($row['user_sig_bbcode_uid'] && $row['user_sig'])	{		decode_message($row['user_sig'], $row['user_sig_bbcode_uid']);		$message_parser->message = $row['user_sig'];		$message_parser->prepare_bbcodes();		$message_parser->parse_bbcode();		$bitfield = $message_parser->bbcode_bitfield;		$sql = 'UPDATE ' . USERS_TABLE . " SET user_sig_bbcode_bitfield = '" . $db->sql_escape($bitfield) . "'			WHERE user_id = " . $row['user_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}	else	{		$sql = 'UPDATE ' . USERS_TABLE . " SET user_sig_bbcode_bitfield = ''			WHERE user_id = " . $row['user_id'];		$db->sql_query($sql);	}}$db->sql_freeresult($result);// Now adjust posts$message_parser = new parse_message();$message_parser->mode = 'post';$message_parser->bbcode_init();// Update posts$sql = 'SELECT post_id, post_text, bbcode_uid, enable_bbcode, enable_smilies, enable_sig	FROM ' . POSTS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	// Convert bbcodes back to their normal form	if ($row['enable_bbcode'])	{		decode_message($row['post_text'], $row['bbcode_uid']);		$message_parser->message = $row['post_text'];		$message_parser->prepare_bbcodes();		$message_parser->parse_bbcode();		$bitfield = $message_parser->bbcode_bitfield;		$sql = 'UPDATE ' . POSTS_TABLE . " SET bbcode_bitfield = '" . $db->sql_escape($bitfield) . "'			WHERE post_id = " . $row['post_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}	else	{		$sql = 'UPDATE ' . POSTS_TABLE . " SET bbcode_bitfield = ''			WHERE post_id = " . $row['post_id'];		$db->sql_query($sql);	}}$db->sql_freeresult($result);// Now to the private messages$message_parser = new parse_message();$message_parser->mode = 'post';$message_parser->bbcode_init();// Update pms$sql = 'SELECT msg_id, message_text, bbcode_uid, enable_bbcode	FROM ' . PRIVMSGS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	// Convert bbcodes back to their normal form	if ($row['enable_bbcode'])	{		decode_message($row['message_text'], $row['bbcode_uid']);		$message_parser->message = $row['message_text'];		$message_parser->prepare_bbcodes();		$message_parser->parse_bbcode();		$bitfield = $message_parser->bbcode_bitfield;		$sql = 'UPDATE ' . PRIVMSGS_TABLE . " SET bbcode_bitfield = '" . $db->sql_escape($bitfield) . "'			WHERE msg_id = " . $row['msg_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}	else	{		$sql = 'UPDATE ' . PRIVMSGS_TABLE . " SET bbcode_bitfield = ''			WHERE msg_id = " . $row['msg_id'];		$db->sql_query($sql);	}}$db->sql_freeresult($result);// Done$db->sql_close();?>
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'20',''=>'30',''=>'40',''=>'50',''=>'60',''=>'70',''=>'80',''=>'90',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9');
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);include($phpbb_root_path . 'includes/functions_display.' . $phpEx);include($phpbb_root_path . 'includes/bbcode.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);// Initial var setup$forum_id	= request_var('f', 0);$topic_id	= request_var('t', 0);$post_id	= request_var('p', 0);$voted_id	= request_var('vote_id', array('' => 0));$voted_id = (sizeof($voted_id) > 1) ? array_unique($voted_id) : $voted_id;$start		= request_var('start', 0);$view		= request_var('view', '');$default_sort_days	= (!empty($user->data['user_post_show_days'])) ? $user->data['user_post_show_days'] : 0;$default_sort_key	= (!empty($user->data['user_post_sortby_type'])) ? $user->data['user_post_sortby_type'] : 't';$default_sort_dir	= (!empty($user->data['user_post_sortby_dir'])) ? $user->data['user_post_sortby_dir'] : 'a';$sort_days	= request_var('st', $default_sort_days);$sort_key	= request_var('sk', $default_sort_key);$sort_dir	= request_var('sd', $default_sort_dir);$update		= request_var('update', false);$s_can_vote = false;/*** @todo normalize?*/$hilit_words	= request_var('hilit', '', true);// Do we have a topic or post id?if (!$topic_id && !$post_id){	trigger_error('NO_TOPIC');}// Find topic id if user requested a newer or older topicif ($view && !$post_id){	if (!$forum_id)	{		$sql = 'SELECT forum_id			FROM ' . TOPICS_TABLE . "			WHERE topic_id = $topic_id";		$result = $db->sql_query($sql);		$forum_id = (int) $db->sql_fetchfield('forum_id');		$db->sql_freeresult($result);		if (!$forum_id)		{			trigger_error('NO_TOPIC');		}	}	if ($view == 'unread')	{		// Get topic tracking info		$topic_tracking_info = get_complete_topic_tracking($forum_id, $topic_id);		$topic_last_read = (isset($topic_tracking_info[$topic_id])) ? $topic_tracking_info[$topic_id] : 0;		$sql = 'SELECT post_id, topic_id, forum_id			FROM ' . POSTS_TABLE . "			WHERE topic_id = $topic_id				" . (($auth->acl_get('m_approve', $forum_id)) ? '' : 'AND post_approved = 1') . "				AND post_time > $topic_last_read				AND forum_id = $forum_id			ORDER BY post_time ASC";		$result = $db->sql_query_limit($sql, 1);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$row)		{			$sql = 'SELECT topic_last_post_id as post_id, topic_id, forum_id				FROM ' . TOPICS_TABLE . '				WHERE topic_id = ' . $topic_id;			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);		}		if (!$row)		{			// Setup user environment so we can process lang string			$user->setup('viewtopic');			trigger_error('NO_TOPIC');		}		$post_id = $row['post_id'];		$topic_id = $row['topic_id'];	}	else if ($view == 'next' || $view == 'previous')	{		$sql_condition = ($view == 'next') ? '>' : '<';		$sql_ordering = ($view == 'next') ? 'ASC' : 'DESC';		$sql = 'SELECT forum_id, topic_last_post_time			FROM ' . TOPICS_TABLE . '			WHERE topic_id = ' . $topic_id;		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$row)		{			$user->setup('viewtopic');			// OK, the topic doesn't exist. This error message is not helpful, but technically correct.			trigger_error(($view == 'next') ? 'NO_NEWER_TOPICS' : 'NO_OLDER_TOPICS');		}		else		{			$sql = 'SELECT topic_id, forum_id				FROM ' . TOPICS_TABLE . '				WHERE forum_id = ' . $row['forum_id'] . "					AND topic_moved_id = 0					AND topic_last_post_time $sql_condition {$row['topic_last_post_time']}					" . (($auth->acl_get('m_approve', $row['forum_id'])) ? '' : 'AND topic_approved = 1') . "				ORDER BY topic_last_post_time $sql_ordering";			$result = $db->sql_query_limit($sql, 1);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$row)			{				$user->setup('viewtopic');				trigger_error(($view == 'next') ? 'NO_NEWER_TOPICS' : 'NO_OLDER_TOPICS');			}			else			{				$topic_id = $row['topic_id'];				// Check for global announcement correctness?				if (!$row['forum_id'] && !$forum_id)				{					trigger_error('NO_TOPIC');				}				else if ($row['forum_id'])				{					$forum_id = $row['forum_id'];				}			}		}	}	// Check for global announcement correctness?	if ((!isset($row) || !$row['forum_id']) && !$forum_id)	{		trigger_error('NO_TOPIC');	}	else if (isset($row) && $row['forum_id'])	{		$forum_id = $row['forum_id'];	}}// This rather complex gaggle of code handles querying for topics but// also allows for direct linking to a post (and the calculation of which// page the post is on and the correct display of viewtopic)$sql_array = array(	'SELECT'	=> 't.*, f.*',	'FROM'		=> array(FORUMS_TABLE => 'f'),);// Firebird handles two columns of the same name a little differently, this// addresses that by forcing the forum_id to come from the forums table.if ($db->sql_layer === 'firebird'){	$sql_array['SELECT'] = 'f.forum_id AS forum_id, ' . $sql_array['SELECT'];}// The FROM-Order is quite important here, else t.* columns can not be correctly bound.if ($post_id){	$sql_array['SELECT'] .= ', p.post_approved, p.post_time, p.post_id';	$sql_array['FROM'][POSTS_TABLE] = 'p';}// Topics table need to be the last in the chain$sql_array['FROM'][TOPICS_TABLE] = 't';if ($user->data['is_registered']){	$sql_array['SELECT'] .= ', tw.notify_status';	$sql_array['LEFT_JOIN'] = array();	$sql_array['LEFT_JOIN'][] = array(		'FROM'	=> array(TOPICS_WATCH_TABLE => 'tw'),		'ON'	=> 'tw.user_id = ' . $user->data['user_id'] . ' AND t.topic_id = tw.topic_id'	);	if ($config['allow_bookmarks'])	{		$sql_array['SELECT'] .= ', bm.topic_id as bookmarked';		$sql_array['LEFT_JOIN'][] = array(			'FROM'	=> array(BOOKMARKS_TABLE => 'bm'),			'ON'	=> 'bm.user_id = ' . $user->data['user_id'] . ' AND t.topic_id = bm.topic_id'		);	}	if ($config['load_db_lastread'])	{		$sql_array['SELECT'] .= ', tt.mark_time, ft.mark_time as forum_mark_time';		$sql_array['LEFT_JOIN'][] = array(			'FROM'	=> array(TOPICS_TRACK_TABLE => 'tt'),			'ON'	=> 'tt.user_id = ' . $user->data['user_id'] . ' AND t.topic_id = tt.topic_id'		);		$sql_array['LEFT_JOIN'][] = array(			'FROM'	=> array(FORUMS_TRACK_TABLE => 'ft'),			'ON'	=> 'ft.user_id = ' . $user->data['user_id'] . ' AND t.forum_id = ft.forum_id'		);	}}if (!$post_id){	$sql_array['WHERE'] = "t.topic_id = $topic_id";}else{	$sql_array['WHERE'] = "p.post_id = $post_id AND t.topic_id = p.topic_id";}$sql_array['WHERE'] .= ' AND (f.forum_id = t.forum_id';if (!$forum_id){	// If it is a global announcement make sure to set the forum id to a postable forum	$sql_array['WHERE'] .= ' OR (t.topic_type = ' . POST_GLOBAL . '		AND f.forum_type = ' . FORUM_POST . ')';}else{	$sql_array['WHERE'] .= ' OR (t.topic_type = ' . POST_GLOBAL . "		AND f.forum_id = $forum_id)";}$sql_array['WHERE'] .= ')';// Join to forum table on topic forum_id unless topic forum_id is zero// whereupon we join on the forum_id passed as a parameter ... this// is done so navigation, forum name, etc. remain consistent with where// user clicked to view a global topic$sql = $db->sql_build_query('SELECT', $sql_array);$result = $db->sql_query($sql);$topic_data = $db->sql_fetchrow($result);$db->sql_freeresult($result);// link to unapproved post or incorrect linkif (!$topic_data){	// If post_id was submitted, we try at least to display the topic as a last resort...	if ($post_id && $topic_id)	{		redirect(append_sid("{$phpbb_root_path}viewtopic.$phpEx", "t=$topic_id" . (($forum_id) ? "&amp;f=$forum_id" : '')));	}	trigger_error('NO_TOPIC');}$forum_id = (int) $topic_data['forum_id'];// This is for determining where we are (page)if ($post_id){	// are we where we are supposed to be?	if (!$topic_data['post_approved'] && !$auth->acl_get('m_approve', $topic_data['forum_id']))	{		// If post_id was submitted, we try at least to display the topic as a last resort...		if ($topic_id)		{			redirect(append_sid("{$phpbb_root_path}viewtopic.$phpEx", "t=$topic_id" . (($forum_id) ? "&amp;f=$forum_id" : '')));		}		trigger_error('NO_TOPIC');	}	if ($post_id == $topic_data['topic_first_post_id'] || $post_id == $topic_data['topic_last_post_id'])	{		$check_sort = ($post_id == $topic_data['topic_first_post_id']) ? 'd' : 'a';		if ($sort_dir == $check_sort)		{			$topic_data['prev_posts'] = ($auth->acl_get('m_approve', $forum_id)) ? $topic_data['topic_replies_real'] : $topic_data['topic_replies'];		}		else		{			$topic_data['prev_posts'] = 0;		}	}	else	{		$sql = 'SELECT COUNT(p.post_id) AS prev_posts			FROM ' . POSTS_TABLE . " p			WHERE p.topic_id = {$topic_data['topic_id']}				" . ((!$auth->acl_get('m_approve', $forum_id)) ? 'AND p.post_approved = 1' : '');		if ($sort_dir == 'd')		{			$sql .= " AND (p.post_time > {$topic_data['post_time']} OR (p.post_time = {$topic_data['post_time']} AND p.post_id >= {$topic_data['post_id']}))";		}		else		{			$sql .= " AND (p.post_time < {$topic_data['post_time']} OR (p.post_time = {$topic_data['post_time']} AND p.post_id <= {$topic_data['post_id']}))";		}		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		$topic_data['prev_posts'] = $row['prev_posts'] - 1;	}}$topic_id = (int) $topic_data['topic_id'];//$topic_replies = ($auth->acl_get('m_approve', $forum_id)) ? $topic_data['topic_replies_real'] : $topic_data['topic_replies'];// Check sticky/announcement time limitif (($topic_data['topic_type'] == POST_STICKY || $topic_data['topic_type'] == POST_ANNOUNCE) && $topic_data['topic_time_limit'] && ($topic_data['topic_time'] + $topic_data['topic_time_limit']) < time()){	$sql = 'UPDATE ' . TOPICS_TABLE . '		SET topic_type = ' . POST_NORMAL . ', topic_time_limit = 0		WHERE topic_id = ' . $topic_id;	$db->sql_query($sql);	$topic_data['topic_type'] = POST_NORMAL;	$topic_data['topic_time_limit'] = 0;}// Setup look and feel$user->setup('viewtopic', $topic_data['forum_style']);if (!$topic_data['topic_approved'] && !$auth->acl_get('m_approve', $forum_id)){	trigger_error('NO_TOPIC');}// Start auth checkif (!$auth->acl_get('f_read', $forum_id)){	if ($user->data['user_id'] != ANONYMOUS)	{		trigger_error('SORRY_AUTH_READ');	}	login_box('', $user->lang['LOGIN_VIEWFORUM']);}// Forum is passworded ... check whether access has been granted to this// user this session, if not show login boxif ($topic_data['forum_password']){	login_forum_box($topic_data);}// Redirect to login or to the correct post upon emailed notification linksif (isset($_GET['e'])){	$jump_to = request_var('e', 0);	$redirect_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id");	if ($user->data['user_id'] == ANONYMOUS)	{		login_box($redirect_url . "&amp;p=$post_id&amp;e=$jump_to", $user->lang['LOGIN_NOTIFY_TOPIC']);	}	if ($jump_to > 0)	{		// We direct the already logged in user to the correct post...		redirect($redirect_url . ((!$post_id) ? "&amp;p=$jump_to" : "&amp;p=$post_id") . "#p$jump_to");	}}// What is start equal to?if ($post_id){	$start = floor(($topic_data['prev_posts']) / $config['posts_per_page']) * $config['posts_per_page'];}// Get topic tracking infoif (!isset($topic_tracking_info)){	$topic_tracking_info = array();	// Get topic tracking info	if ($config['load_db_lastread'] && $user->data['is_registered'])	{		$tmp_topic_data = array($topic_id => $topic_data);		$topic_tracking_info = get_topic_tracking($forum_id, $topic_id, $tmp_topic_data, array($forum_id => $topic_data['forum_mark_time']));		unset($tmp_topic_data);	}	else if ($config['load_anon_lastread'] || $user->data['is_registered'])	{		$topic_tracking_info = get_complete_topic_tracking($forum_id, $topic_id);	}}// Post ordering options$limit_days = array(0 => $user->lang['ALL_POSTS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);$sort_by_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 's' => $user->lang['SUBJECT']);$sort_by_sql = array('a' => array('u.username_clean', 'p.post_id'), 't' => 'p.post_time', 's' => array('p.post_subject', 'p.post_id'));$join_user_sql = array('a' => true, 't' => false, 's' => false);$s_limit_days = $s_sort_key = $s_sort_dir = $u_sort_param = '';gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param, $default_sort_days, $default_sort_key, $default_sort_dir);// Obtain correct post count and ordering SQL if user has// requested anything differentif ($sort_days){	$min_post_time = time() - ($sort_days * 86400);	$sql = 'SELECT COUNT(post_id) AS num_posts		FROM ' . POSTS_TABLE . "		WHERE topic_id = $topic_id			AND post_time >= $min_post_time		" . (($auth->acl_get('m_approve', $forum_id)) ? '' : 'AND post_approved = 1');	$result = $db->sql_query($sql);	$total_posts = (int) $db->sql_fetchfield('num_posts');	$db->sql_freeresult($result);	$limit_posts_time = "AND p.post_time >= $min_post_time ";	if (isset($_POST['sort']))	{		$start = 0;	}}else{	$total_posts = $topic_replies + 1;	$limit_posts_time = '';}// Was a highlight request part of the URI?$highlight_match = $highlight = '';if ($hilit_words){	foreach (explode(' ', trim($hilit_words)) as $word)	{		if (trim($word))		{			$word = str_replace('\*', '\w+?', preg_quote($word, '#'));			$word = preg_replace('#(^|\s)\\\\w\*\?(\s|$)#', '$1\w+?$2', $word);			$highlight_match .= (($highlight_match != '') ? '|' : '') . $word;		}	}	$highlight = urlencode($hilit_words);}// Make sure $start is set to the last page if it exceeds the amountif ($start < 0 || $start >= $total_posts){	$start = ($start < 0) ? 0 : floor(($total_posts - 1) / $config['posts_per_page']) * $config['posts_per_page'];}// General Viewtopic URL for return links$viewtopic_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id" . (($start == 0) ? '' : "&amp;start=$start") . ((strlen($u_sort_param)) ? "&amp;$u_sort_param" : '') . (($highlight_match) ? "&amp;hilit=$highlight" : ''));// Are we watching this topic?$s_watching_topic = array(	'link'			=> '',	'title'			=> '',	'is_watching'	=> false,);if (($config['email_enable'] || $config['jab_enable']) && $config['allow_topic_notify']){	$notify_status = (isset($topic_data['notify_status'])) ? $topic_data['notify_status'] : null;	watch_topic_forum('topic', $s_watching_topic, $user->data['user_id'], $forum_id, $topic_id, $notify_status, $start, $topic_data['topic_title']);	// Reset forum notification if forum notify is set	if ($config['allow_forum_notify'] && $auth->acl_get('f_subscribe', $forum_id))	{		$s_watching_forum = $s_watching_topic;		watch_topic_forum('forum', $s_watching_forum, $user->data['user_id'], $forum_id, 0);	}}// Bookmarksif ($config['allow_bookmarks'] && $user->data['is_registered'] && request_var('bookmark', 0)){	if (check_link_hash(request_var('hash', ''), "topic_$topic_id"))	{		if (!$topic_data['bookmarked'])		{			$sql = 'INSERT INTO ' . BOOKMARKS_TABLE . ' ' . $db->sql_build_array('INSERT', array(				'user_id'	=> $user->data['user_id'],				'topic_id'	=> $topic_id,			));			$db->sql_query($sql);		}		else		{			$sql = 'DELETE FROM ' . BOOKMARKS_TABLE . "				WHERE user_id = {$user->data['user_id']}					AND topic_id = $topic_id";			$db->sql_query($sql);		}		$message = (($topic_data['bookmarked']) ? $user->lang['BOOKMARK_REMOVED'] : $user->lang['BOOKMARK_ADDED']) . '<br /><br />' . sprintf($user->lang['RETURN_TOPIC'], '<a href="' . $viewtopic_url . '">', '</a>');	}	else	{		$message = $user->lang['BOOKMARK_ERR'] . '<br /><br />' . sprintf($user->lang['RETURN_TOPIC'], '<a href="' . $viewtopic_url . '">', '</a>');	}	meta_refresh(3, $viewtopic_url);	trigger_error($message);}// Grab ranks$ranks = $cache->obtain_ranks();// Grab icons$icons = $cache->obtain_icons();// Grab extensions$extensions = array();if ($topic_data['topic_attachment']){	$extensions = $cache->obtain_attach_extensions($forum_id);}// Forum rules listing$s_forum_rules = '';gen_forum_auth_level('topic', $forum_id, $topic_data['forum_status']);// Quick mod tools$allow_change_type = ($auth->acl_get('m_', $forum_id) || ($user->data['is_registered'] && $user->data['user_id'] == $topic_data['topic_poster'])) ? true : false;$topic_mod = '';$topic_mod .= ($auth->acl_get('m_lock', $forum_id) || ($auth->acl_get('f_user_lock', $forum_id) && $user->data['is_registered'] && $user->data['user_id'] == $topic_data['topic_poster'] && $topic_data['topic_status'] == ITEM_UNLOCKED)) ? (($topic_data['topic_status'] == ITEM_UNLOCKED) ? '<option value="lock">' . $user->lang['LOCK_TOPIC'] . '</option>' : '<option value="unlock">' . $user->lang['UNLOCK_TOPIC'] . '</option>') : '';$topic_mod .= ($auth->acl_get('m_delete', $forum_id)) ? '<option value="delete_topic">' . $user->lang['DELETE_TOPIC'] . '</option>' : '';$topic_mod .= ($auth->acl_get('m_move', $forum_id) && $topic_data['topic_status'] != ITEM_MOVED) ? '<option value="move">' . $user->lang['MOVE_TOPIC'] . '</option>' : '';$topic_mod .= ($auth->acl_get('m_split', $forum_id)) ? '<option value="split">' . $user->lang['SPLIT_TOPIC'] . '</option>' : '';$topic_mod .= ($auth->acl_get('m_merge', $forum_id)) ? '<option value="merge">' . $user->lang['MERGE_POSTS'] . '</option>' : '';$topic_mod .= ($auth->acl_get('m_merge', $forum_id)) ? '<option value="merge_topic">' . $user->lang['MERGE_TOPIC'] . '</option>' : '';$topic_mod .= ($auth->acl_get('m_move', $forum_id)) ? '<option value="fork">' . $user->lang['FORK_TOPIC'] . '</option>' : '';$topic_mod .= ($allow_change_type && $auth->acl_gets('f_sticky', 'f_announce', $forum_id) && $topic_data['topic_type'] != POST_NORMAL) ? '<option value="make_normal">' . $user->lang['MAKE_NORMAL'] . '</option>' : '';$topic_mod .= ($allow_change_type && $auth->acl_get('f_sticky', $forum_id) && $topic_data['topic_type'] != POST_STICKY) ? '<option value="make_sticky">' . $user->lang['MAKE_STICKY'] . '</option>' : '';$topic_mod .= ($allow_change_type && $auth->acl_get('f_announce', $forum_id) && $topic_data['topic_type'] != POST_ANNOUNCE) ? '<option value="make_announce">' . $user->lang['MAKE_ANNOUNCE'] . '</option>' : '';$topic_mod .= ($allow_change_type && $auth->acl_get('f_announce', $forum_id) && $topic_data['topic_type'] != POST_GLOBAL) ? '<option value="make_global">' . $user->lang['MAKE_GLOBAL'] . '</option>' : '';$topic_mod .= ($auth->acl_get('m_', $forum_id)) ? '<option value="topic_logs">' . $user->lang['VIEW_TOPIC_LOGS'] . '</option>' : '';// If we've got a hightlight set pass it on to pagination.$pagination = generate_pagination(append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id" . ((strlen($u_sort_param)) ? "&amp;$u_sort_param" : '') . (($highlight_match) ? "&amp;hilit=$highlight" : '')), $total_posts, $config['posts_per_page'], $start);// Navigation linksgenerate_forum_nav($topic_data);// Forum Rulesgenerate_forum_rules($topic_data);// Moderators$forum_moderators = array();if ($config['load_moderators']){	get_moderators($forum_moderators, $forum_id);}// This is only used for print view so ...$server_path = (!$view) ? $phpbb_root_path : generate_board_url() . '/';// Replace naughty words in title$topic_data['topic_title'] = censor_text($topic_data['topic_title']);$s_search_hidden_fields = array(	't' => $topic_id,	'sf' => 'msgonly',);if ($_SID){	$s_search_hidden_fields['sid'] = $_SID;}if (!empty($_EXTRA_URL)){	foreach ($_EXTRA_URL as $url_param)	{		$url_param = explode('=', $url_param, 2);		$s_hidden_fields[$url_param[0]] = $url_param[1];	}}// Send vars to template$template->assign_vars(array(	'FORUM_ID' 		=> $forum_id,	'FORUM_NAME' 	=> $topic_data['forum_name'],	'FORUM_DESC'	=> generate_text_for_display($topic_data['forum_desc'], $topic_data['forum_desc_uid'], $topic_data['forum_desc_bitfield'], $topic_data['forum_desc_options']),	'TOPIC_ID' 		=> $topic_id,	'TOPIC_TITLE' 	=> $topic_data['topic_title'],	'TOPIC_POSTER'	=> $topic_data['topic_poster'],	'TOPIC_AUTHOR_FULL'		=> get_username_string('full', $topic_data['topic_poster'], $topic_data['topic_first_poster_name'], $topic_data['topic_first_poster_colour']),	'TOPIC_AUTHOR_COLOUR'	=> get_username_string('colour', $topic_data['topic_poster'], $topic_data['topic_first_poster_name'], $topic_data['topic_first_poster_colour']),	'TOPIC_AUTHOR'			=> get_username_string('username', $topic_data['topic_poster'], $topic_data['topic_first_poster_name'], $topic_data['topic_first_poster_colour']),	'PAGINATION' 	=> $pagination,	'PAGE_NUMBER' 	=> on_page($total_posts, $config['posts_per_page'], $start),	'TOTAL_POSTS'	=> ($total_posts == 1) ? $user->lang['VIEW_TOPIC_POST'] : sprintf($user->lang['VIEW_TOPIC_POSTS'], $total_posts),	'U_MCP' 		=> ($auth->acl_get('m_', $forum_id)) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "i=main&amp;mode=topic_view&amp;f=$forum_id&amp;t=$topic_id" . (($start == 0) ? '' : "&amp;start=$start") . ((strlen($u_sort_param)) ? "&amp;$u_sort_param" : ''), true, $user->session_id) : '',	'MODERATORS'	=> (isset($forum_moderators[$forum_id]) && sizeof($forum_moderators[$forum_id])) ? implode(', ', $forum_moderators[$forum_id]) : '',	'POST_IMG' 			=> ($topic_data['forum_status'] == ITEM_LOCKED) ? $user->img('button_topic_locked', 'FORUM_LOCKED') : $user->img('button_topic_new', 'POST_NEW_TOPIC'),	'QUOTE_IMG' 		=> $user->img('icon_post_quote', 'REPLY_WITH_QUOTE'),	'REPLY_IMG'			=> ($topic_data['forum_status'] == ITEM_LOCKED || $topic_data['topic_status'] == ITEM_LOCKED) ? $user->img('button_topic_locked', 'TOPIC_LOCKED') : $user->img('button_topic_reply', 'REPLY_TO_TOPIC'),	'EDIT_IMG' 			=> $user->img('icon_post_edit', 'EDIT_POST'),	'DELETE_IMG' 		=> $user->img('icon_post_delete', 'DELETE_POST'),	'INFO_IMG' 			=> $user->img('icon_post_info', 'VIEW_INFO'),	'PROFILE_IMG'		=> $user->img('icon_user_profile', 'READ_PROFILE'),	'SEARCH_IMG' 		=> $user->img('icon_user_search', 'SEARCH_USER_POSTS'),	'PM_IMG' 			=> $user->img('icon_contact_pm', 'SEND_PRIVATE_MESSAGE'),	'EMAIL_IMG' 		=> $user->img('icon_contact_email', 'SEND_EMAIL'),	'WWW_IMG' 			=> $user->img('icon_contact_www', 'VISIT_WEBSITE'),	'ICQ_IMG' 			=> $user->img('icon_contact_icq', 'ICQ'),	'AIM_IMG' 			=> $user->img('icon_contact_aim', 'AIM'),	'MSN_IMG' 			=> $user->img('icon_contact_msnm', 'MSNM'),	'YIM_IMG' 			=> $user->img('icon_contact_yahoo', 'YIM'),	'JABBER_IMG'		=> $user->img('icon_contact_jabber', 'JABBER') ,	'REPORT_IMG'		=> $user->img('icon_post_report', 'REPORT_POST'),	'REPORTED_IMG'		=> $user->img('icon_topic_reported', 'POST_REPORTED'),	'UNAPPROVED_IMG'	=> $user->img('icon_topic_unapproved', 'POST_UNAPPROVED'),	'WARN_IMG'			=> $user->img('icon_user_warn', 'WARN_USER'),	'S_IS_LOCKED'			=> ($topic_data['topic_status'] == ITEM_UNLOCKED && $topic_data['forum_status'] == ITEM_UNLOCKED) ? false : true,	'S_SELECT_SORT_DIR' 	=> $s_sort_dir,	'S_SELECT_SORT_KEY' 	=> $s_sort_key,	'S_SELECT_SORT_DAYS' 	=> $s_limit_days,	'S_SINGLE_MODERATOR'	=> (!empty($forum_moderators[$forum_id]) && sizeof($forum_moderators[$forum_id]) > 1) ? false : true,	'S_TOPIC_ACTION' 		=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id" . (($start == 0) ? '' : "&amp;start=$start")),	'S_TOPIC_MOD' 			=> ($topic_mod != '') ? '<select name="action" id="quick-mod-select">' . $topic_mod . '</select>' : '',	'S_MOD_ACTION' 			=> append_sid("{$phpbb_root_path}mcp.$phpEx", "f=$forum_id&amp;t=$topic_id" . (($start == 0) ? '' : "&amp;start=$start") . "&amp;quickmod=1&amp;redirect=" . urlencode(str_replace('&amp;', '&', $viewtopic_url)), true, $user->session_id),	'S_VIEWTOPIC'			=> true,	'S_DISPLAY_SEARCHBOX'	=> ($auth->acl_get('u_search') && $auth->acl_get('f_search', $forum_id) && $config['load_search']) ? true : false,	'S_SEARCHBOX_ACTION'	=> append_sid("{$phpbb_root_path}search.$phpEx"),	'S_SEARCH_LOCAL_HIDDEN_FIELDS'	=> build_hidden_fields($s_search_hidden_fields),	'S_DISPLAY_POST_INFO'	=> ($topic_data['forum_type'] == FORUM_POST && ($auth->acl_get('f_post', $forum_id) || $user->data['user_id'] == ANONYMOUS)) ? true : false,	'S_DISPLAY_REPLY_INFO'	=> ($topic_data['forum_type'] == FORUM_POST && ($auth->acl_get('f_reply', $forum_id) || $user->data['user_id'] == ANONYMOUS)) ? true : false,	'S_ENABLE_FEEDS_TOPIC'	=> ($config['feed_topic'] && !phpbb_optionget(FORUM_OPTION_FEED_EXCLUDE, $topic_data['forum_options'])) ? true : false,	'U_TOPIC'				=> "{$server_path}viewtopic.$phpEx?f=$forum_id&amp;t=$topic_id",	'U_FORUM'				=> $server_path,	'U_VIEW_TOPIC' 			=> $viewtopic_url,	'U_VIEW_FORUM' 			=> append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id),	'U_VIEW_OLDER_TOPIC'	=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id&amp;view=previous"),	'U_VIEW_NEWER_TOPIC'	=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id&amp;view=next"),	'U_PRINT_TOPIC'			=> ($auth->acl_get('f_print', $forum_id)) ? $viewtopic_url . '&amp;view=print' : '',	'U_EMAIL_TOPIC'			=> ($auth->acl_get('f_email', $forum_id) && $config['email_enable']) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", "mode=email&amp;t=$topic_id") : '',	'U_WATCH_TOPIC' 		=> $s_watching_topic['link'],	'L_WATCH_TOPIC' 		=> $s_watching_topic['title'],	'S_WATCHING_TOPIC'		=> $s_watching_topic['is_watching'],	'U_BOOKMARK_TOPIC'		=> ($user->data['is_registered'] && $config['allow_bookmarks']) ? $viewtopic_url . '&amp;bookmark=1&amp;hash=' . generate_link_hash("topic_$topic_id") : '',	'L_BOOKMARK_TOPIC'		=> ($user->data['is_registered'] && $config['allow_bookmarks'] && $topic_data['bookmarked']) ? $user->lang['BOOKMARK_TOPIC_REMOVE'] : $user->lang['BOOKMARK_TOPIC'],	'U_POST_NEW_TOPIC' 		=> ($auth->acl_get('f_post', $forum_id) || $user->data['user_id'] == ANONYMOUS) ? append_sid("{$phpbb_root_path}posting.$phpEx", "mode=post&amp;f=$forum_id") : '',	'U_POST_REPLY_TOPIC' 	=> ($auth->acl_get('f_reply', $forum_id) || $user->data['user_id'] == ANONYMOUS) ? append_sid("{$phpbb_root_path}posting.$phpEx", "mode=reply&amp;f=$forum_id&amp;t=$topic_id") : '',	'U_BUMP_TOPIC'			=> (bump_topic_allowed($forum_id, $topic_data['topic_bumped'], $topic_data['topic_last_post_time'], $topic_data['topic_poster'], $topic_data['topic_last_poster_id'])) ? append_sid("{$phpbb_root_path}posting.$phpEx", "mode=bump&amp;f=$forum_id&amp;t=$topic_id&amp;hash=" . generate_link_hash("topic_$topic_id")) : ''));// Does this topic contain a poll?if (!empty($topic_data['poll_start'])){	$sql = 'SELECT o.*, p.bbcode_bitfield, p.bbcode_uid		FROM ' . POLL_OPTIONS_TABLE . ' o, ' . POSTS_TABLE . " p		WHERE o.topic_id = $topic_id			AND p.post_id = {$topic_data['topic_first_post_id']}			AND p.topic_id = o.topic_id		ORDER BY o.poll_option_id";	$result = $db->sql_query($sql);	$poll_info = array();	while ($row = $db->sql_fetchrow($result))	{		$poll_info[] = $row;	}	$db->sql_freeresult($result);	$cur_voted_id = array();	if ($user->data['is_registered'])	{		$sql = 'SELECT poll_option_id			FROM ' . POLL_VOTES_TABLE . '			WHERE topic_id = ' . $topic_id . '				AND vote_user_id = ' . $user->data['user_id'];		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$cur_voted_id[] = $row['poll_option_id'];		}		$db->sql_freeresult($result);	}	else	{		// Cookie based guest tracking ... I don't like this but hum ho		// it's oft requested. This relies on "nice" users who don't feel		// the need to delete cookies to mess with results.		if (isset($_COOKIE[$config['cookie_name'] . '_poll_' . $topic_id]))		{			$cur_voted_id = explode(',', $_COOKIE[$config['cookie_name'] . '_poll_' . $topic_id]);			$cur_voted_id = array_map('intval', $cur_voted_id);		}	}	// Can not vote at all if no vote permission	$s_can_vote = ($auth->acl_get('f_vote', $forum_id) &&		(($topic_data['poll_length'] != 0 && $topic_data['poll_start'] + $topic_data['poll_length'] > time()) || $topic_data['poll_length'] == 0) &&		$topic_data['topic_status'] != ITEM_LOCKED &&		$topic_data['forum_status'] != ITEM_LOCKED &&		(!sizeof($cur_voted_id) ||		($auth->acl_get('f_votechg', $forum_id) && $topic_data['poll_vote_change']))) ? true : false;	$s_display_results = (!$s_can_vote || ($s_can_vote && sizeof($cur_voted_id)) || $view == 'viewpoll') ? true : false;	if ($update && $s_can_vote)	{		if (!sizeof($voted_id) || sizeof($voted_id) > $topic_data['poll_max_options'] || in_array(VOTE_CONVERTED, $cur_voted_id) || !check_form_key('posting'))		{			$redirect_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id" . (($start == 0) ? '' : "&amp;start=$start"));			meta_refresh(5, $redirect_url);			if (!sizeof($voted_id))			{				$message = 'NO_VOTE_OPTION';			}			else if (sizeof($voted_id) > $topic_data['poll_max_options'])			{				$message = 'TOO_MANY_VOTE_OPTIONS';			}			else if (in_array(VOTE_CONVERTED, $cur_voted_id))			{				$message = 'VOTE_CONVERTED';			}			else			{				$message = 'FORM_INVALID';			}			$message = $user->lang[$message] . '<br /><br />' . sprintf($user->lang['RETURN_TOPIC'], '<a href="' . $redirect_url . '">', '</a>');			trigger_error($message);		}		foreach ($voted_id as $option)		{			if (in_array($option, $cur_voted_id))			{				continue;			}			$sql = 'UPDATE ' . POLL_OPTIONS_TABLE . '				SET poll_option_total = poll_option_total + 1				WHERE poll_option_id = ' . (int) $option . '					AND topic_id = ' . (int) $topic_id;			$db->sql_query($sql);			if ($user->data['is_registered'])			{				$sql_ary = array(					'topic_id'			=> (int) $topic_id,					'poll_option_id'	=> (int) $option,					'vote_user_id'		=> (int) $user->data['user_id'],					'vote_user_ip'		=> (string) $user->ip,				);				$sql = 'INSERT INTO ' . POLL_VOTES_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);				$db->sql_query($sql);			}		}		foreach ($cur_voted_id as $option)		{			if (!in_array($option, $voted_id))			{				$sql = 'UPDATE ' . POLL_OPTIONS_TABLE . '					SET poll_option_total = poll_option_total - 1					WHERE poll_option_id = ' . (int) $option . '						AND topic_id = ' . (int) $topic_id;				$db->sql_query($sql);				if ($user->data['is_registered'])				{					$sql = 'DELETE FROM ' . POLL_VOTES_TABLE . '						WHERE topic_id = ' . (int) $topic_id . '							AND poll_option_id = ' . (int) $option . '							AND vote_user_id = ' . (int) $user->data['user_id'];					$db->sql_query($sql);				}			}		}		if ($user->data['user_id'] == ANONYMOUS && !$user->data['is_bot'])		{			$user->set_cookie('poll_' . $topic_id, implode(',', $voted_id), time() + 31536000);		}		$sql = 'UPDATE ' . TOPICS_TABLE . '			SET poll_last_vote = ' . time() . "			WHERE topic_id = $topic_id";		//, topic_last_post_time = ' . time() . " -- for bumping topics with new votes, ignore for now		$db->sql_query($sql);		$redirect_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id" . (($start == 0) ? '' : "&amp;start=$start"));		meta_refresh(5, $redirect_url);		trigger_error($user->lang['VOTE_SUBMITTED'] . '<br /><br />' . sprintf($user->lang['RETURN_TOPIC'], '<a href="' . $redirect_url . '">', '</a>'));	}	$poll_total = 0;	foreach ($poll_info as $poll_option)	{		$poll_total += $poll_option['poll_option_total'];	}	if ($poll_info[0]['bbcode_bitfield'])	{		$poll_bbcode = new bbcode();	}	else	{		$poll_bbcode = false;	}	for ($i = 0, $size = sizeof($poll_info); $i < $size; $i++)	{		$poll_info[$i]['poll_option_text'] = censor_text($poll_info[$i]['poll_option_text']);		if ($poll_bbcode !== false)		{			$poll_bbcode->bbcode_second_pass($poll_info[$i]['poll_option_text'], $poll_info[$i]['bbcode_uid'], $poll_option['bbcode_bitfield']);		}		$poll_info[$i]['poll_option_text'] = bbcode_nl2br($poll_info[$i]['poll_option_text']);		$poll_info[$i]['poll_option_text'] = smiley_text($poll_info[$i]['poll_option_text']);	}	$topic_data['poll_title'] = censor_text($topic_data['poll_title']);	if ($poll_bbcode !== false)	{		$poll_bbcode->bbcode_second_pass($topic_data['poll_title'], $poll_info[0]['bbcode_uid'], $poll_info[0]['bbcode_bitfield']);	}	$topic_data['poll_title'] = bbcode_nl2br($topic_data['poll_title']);	$topic_data['poll_title'] = smiley_text($topic_data['poll_title']);	unset($poll_bbcode);	foreach ($poll_info as $poll_option)	{		$option_pct = ($poll_total > 0) ? $poll_option['poll_option_total'] / $poll_total : 0;		$option_pct_txt = sprintf("%.1d%%", round($option_pct * 100));		$template->assign_block_vars('poll_option', array(			'POLL_OPTION_ID' 		=> $poll_option['poll_option_id'],			'POLL_OPTION_CAPTION' 	=> $poll_option['poll_option_text'],			'POLL_OPTION_RESULT' 	=> $poll_option['poll_option_total'],			'POLL_OPTION_PERCENT' 	=> $option_pct_txt,			'POLL_OPTION_PCT'		=> round($option_pct * 100),			'POLL_OPTION_IMG' 		=> $user->img('poll_center', $option_pct_txt, round($option_pct * 250)),			'POLL_OPTION_VOTED'		=> (in_array($poll_option['poll_option_id'], $cur_voted_id)) ? true : false)		);	}	$poll_end = $topic_data['poll_length'] + $topic_data['poll_start'];	$template->assign_vars(array(		'POLL_QUESTION'		=> $topic_data['poll_title'],		'TOTAL_VOTES' 		=> $poll_total,		'POLL_LEFT_CAP_IMG'	=> $user->img('poll_left'),		'POLL_RIGHT_CAP_IMG'=> $user->img('poll_right'),		'L_MAX_VOTES'		=> ($topic_data['poll_max_options'] == 1) ? $user->lang['MAX_OPTION_SELECT'] : sprintf($user->lang['MAX_OPTIONS_SELECT'], $topic_data['poll_max_options']),		'L_POLL_LENGTH'		=> ($topic_data['poll_length']) ? sprintf($user->lang[($poll_end > time()) ? 'POLL_RUN_TILL' : 'POLL_ENDED_AT'], $user->format_date($poll_end)) : '',		'S_HAS_POLL'		=> true,		'S_CAN_VOTE'		=> $s_can_vote,		'S_DISPLAY_RESULTS'	=> $s_display_results,		'S_IS_MULTI_CHOICE'	=> ($topic_data['poll_max_options'] > 1) ? true : false,		'S_POLL_ACTION'		=> $viewtopic_url,		'U_VIEW_RESULTS'	=> $viewtopic_url . '&amp;view=viewpoll')	);	unset($poll_end, $poll_info, $voted_id);}// If the user is trying to reach the second half of the topic, fetch it starting from the end$store_reverse = false;$sql_limit = $config['posts_per_page'];$sql_sort_order = $direction = '';if ($start > $total_posts / 2){	$store_reverse = true;	if ($start + $config['posts_per_page'] > $total_posts)	{		$sql_limit = min($config['posts_per_page'], max(1, $total_posts - $start));	}	// Select the sort order	$direction = (($sort_dir == 'd') ? 'ASC' : 'DESC');	$sql_start = max(0, $total_posts - $sql_limit - $start);}else{	// Select the sort order	$direction = (($sort_dir == 'd') ? 'DESC' : 'ASC');	$sql_start = $start;}if (is_array($sort_by_sql[$sort_key])){	$sql_sort_order = implode(' ' . $direction . ', ', $sort_by_sql[$sort_key]) . ' ' . $direction;}else{	$sql_sort_order = $sort_by_sql[$sort_key] . ' ' . $direction;}// Container for user details, only process once$post_list = $user_cache = $id_cache = $attachments = $attach_list = $rowset = $update_count = $post_edit_list = array();$has_attachments = $display_notice = false;$bbcode_bitfield = '';$i = $i_total = 0;// Go ahead and pull all data for this topic$sql = 'SELECT p.post_id	FROM ' . POSTS_TABLE . ' p' . (($join_user_sql[$sort_key]) ? ', ' . USERS_TABLE . ' u': '') . "	WHERE p.topic_id = $topic_id		" . ((!$auth->acl_get('m_approve', $forum_id)) ? 'AND p.post_approved = 1' : '') . "		" . (($join_user_sql[$sort_key]) ? 'AND u.user_id = p.poster_id': '') . "		$limit_posts_time	ORDER BY $sql_sort_order";$result = $db->sql_query_limit($sql, $sql_limit, $sql_start);$i = ($store_reverse) ? $sql_limit - 1 : 0;while ($row = $db->sql_fetchrow($result)){	$post_list[$i] = (int) $row['post_id'];	($store_reverse) ? $i-- : $i++;}$db->sql_freeresult($result);if (!sizeof($post_list)){	if ($sort_days)	{		trigger_error('NO_POSTS_TIME_FRAME');	}	else	{		trigger_error('NO_TOPIC');	}}// Holding maximum post time for marking topic read// We need to grab it because we do reverse ordering sometimes$max_post_time = 0;$sql = $db->sql_build_query('SELECT', array(	'SELECT'	=> 'u.*, z.friend, z.foe, p.*',	'FROM'		=> array(		USERS_TABLE		=> 'u',		POSTS_TABLE		=> 'p',	),	'LEFT_JOIN'	=> array(		array(			'FROM'	=> array(ZEBRA_TABLE => 'z'),			'ON'	=> 'z.user_id = ' . $user->data['user_id'] . ' AND z.zebra_id = p.poster_id'		)	),	'WHERE'		=> $db->sql_in_set('p.post_id', $post_list) . '		AND u.user_id = p.poster_id'));$result = $db->sql_query($sql);$now = phpbb_gmgetdate(time() + $user->timezone + $user->dst);// Posts are stored in the $rowset array while $attach_list, $user_cache// and the global bbcode_bitfield are builtwhile ($row = $db->sql_fetchrow($result)){	// Set max_post_time	if ($row['post_time'] > $max_post_time)	{		$max_post_time = $row['post_time'];	}	$poster_id = (int) $row['poster_id'];	// Does post have an attachment? If so, add it to the list	if ($row['post_attachment'] && $config['allow_attachments'])	{		$attach_list[] = (int) $row['post_id'];		if ($row['post_approved'])		{			$has_attachments = true;		}	}	$rowset[$row['post_id']] = array(		'hide_post'			=> ($row['foe'] && ($view != 'show' || $post_id != $row['post_id'])) ? true : false,		'post_id'			=> $row['post_id'],		'post_time'			=> $row['post_time'],		'user_id'			=> $row['user_id'],		'username'			=> $row['username'],		'user_colour'		=> $row['user_colour'],		'topic_id'			=> $row['topic_id'],		'forum_id'			=> $row['forum_id'],		'post_subject'		=> $row['post_subject'],		'post_edit_count'	=> $row['post_edit_count'],		'post_edit_time'	=> $row['post_edit_time'],		'post_edit_reason'	=> $row['post_edit_reason'],		'post_edit_user'	=> $row['post_edit_user'],		'post_edit_locked'	=> $row['post_edit_locked'],		// Make sure the icon actually exists		'icon_id'			=> (isset($icons[$row['icon_id']]['img'], $icons[$row['icon_id']]['height'], $icons[$row['icon_id']]['width'])) ? $row['icon_id'] : 0,		'post_attachment'	=> $row['post_attachment'],		'post_approved'		=> $row['post_approved'],		'post_reported'		=> $row['post_reported'],		'post_username'		=> $row['post_username'],		'post_text'			=> $row['post_text'],		'bbcode_uid'		=> $row['bbcode_uid'],		'bbcode_bitfield'	=> $row['bbcode_bitfield'],		'enable_smilies'	=> $row['enable_smilies'],		'enable_sig'		=> $row['enable_sig'],		'friend'			=> $row['friend'],		'foe'				=> $row['foe'],	);	// Define the global bbcode bitfield, will be used to load bbcodes	$bbcode_bitfield = $bbcode_bitfield | base64_decode($row['bbcode_bitfield']);	// Is a signature attached? Are we going to display it?	if ($row['enable_sig'] && $config['allow_sig'] && $user->optionget('viewsigs'))	{		$bbcode_bitfield = $bbcode_bitfield | base64_decode($row['user_sig_bbcode_bitfield']);	}	// Cache various user specific data ... so we don't have to recompute	// this each time the same user appears on this page	if (!isset($user_cache[$poster_id]))	{		if ($poster_id == ANONYMOUS)		{			$user_cache[$poster_id] = array(				'joined'		=> '',				'posts'			=> '',				'from'			=> '',				'sig'					=> '',				'sig_bbcode_uid'		=> '',				'sig_bbcode_bitfield'	=> '',				'online'			=> false,				'avatar'			=> ($user->optionget('viewavatars')) ? get_user_avatar($row['user_avatar'], $row['user_avatar_type'], $row['user_avatar_width'], $row['user_avatar_height']) : '',				'rank_title'		=> '',				'rank_image'		=> '',				'rank_image_src'	=> '',				'sig'				=> '',				'profile'			=> '',				'pm'				=> '',				'email'				=> '',				'www'				=> '',				'icq_status_img'	=> '',				'icq'				=> '',				'aim'				=> '',				'msn'				=> '',				'yim'				=> '',				'jabber'			=> '',				'search'			=> '',				'age'				=> '',				'username'			=> $row['username'],				'user_colour'		=> $row['user_colour'],				'warnings'			=> 0,				'allow_pm'			=> 0,			);			get_user_rank($row['user_rank'], false, $user_cache[$poster_id]['rank_title'], $user_cache[$poster_id]['rank_image'], $user_cache[$poster_id]['rank_image_src']);		}		else		{			$user_sig = '';			// We add the signature to every posters entry because enable_sig is post dependant			if ($row['user_sig'] && $config['allow_sig'] && $user->optionget('viewsigs'))			{				$user_sig = $row['user_sig'];			}			$id_cache[] = $poster_id;			$user_cache[$poster_id] = array(				'joined'		=> $user->format_date($row['user_regdate']),				'posts'			=> $row['user_posts'],				'warnings'		=> (isset($row['user_warnings'])) ? $row['user_warnings'] : 0,				'from'			=> (!empty($row['user_from'])) ? $row['user_from'] : '',				'sig'					=> $user_sig,				'sig_bbcode_uid'		=> (!empty($row['user_sig_bbcode_uid'])) ? $row['user_sig_bbcode_uid'] : '',				'sig_bbcode_bitfield'	=> (!empty($row['user_sig_bbcode_bitfield'])) ? $row['user_sig_bbcode_bitfield'] : '',				'viewonline'	=> $row['user_allow_viewonline'],				'allow_pm'		=> $row['user_allow_pm'],				'avatar'		=> ($user->optionget('viewavatars')) ? get_user_avatar($row['user_avatar'], $row['user_avatar_type'], $row['user_avatar_width'], $row['user_avatar_height']) : '',				'age'			=> '',				'rank_title'		=> '',				'rank_image'		=> '',				'rank_image_src'	=> '',				'username'			=> $row['username'],				'user_colour'		=> $row['user_colour'],				'online'		=> false,				'profile'		=> append_sid("{$phpbb_root_path}memberlist.$phpEx", "mode=viewprofile&amp;u=$poster_id"),				'www'			=> $row['user_website'],				'aim'			=> ($row['user_aim'] && $auth->acl_get('u_sendim')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", "mode=contact&amp;action=aim&amp;u=$poster_id") : '',				'msn'			=> ($row['user_msnm'] && $auth->acl_get('u_sendim')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", "mode=contact&amp;action=msnm&amp;u=$poster_id") : '',				'yim'			=> ($row['user_yim']) ? 'http://edit.yahoo.com/config/send_webmesg?.target=' . urlencode($row['user_yim']) . '&amp;.src=pg' : '',				'jabber'		=> ($row['user_jabber'] && $auth->acl_get('u_sendim')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", "mode=contact&amp;action=jabber&amp;u=$poster_id") : '',				'search'		=> ($auth->acl_get('u_search')) ? append_sid("{$phpbb_root_path}search.$phpEx", "author_id=$poster_id&amp;sr=posts") : '',				'author_full'		=> get_username_string('full', $poster_id, $row['username'], $row['user_colour']),				'author_colour'		=> get_username_string('colour', $poster_id, $row['username'], $row['user_colour']),				'author_username'	=> get_username_string('username', $poster_id, $row['username'], $row['user_colour']),				'author_profile'	=> get_username_string('profile', $poster_id, $row['username'], $row['user_colour']),			);			get_user_rank($row['user_rank'], $row['user_posts'], $user_cache[$poster_id]['rank_title'], $user_cache[$poster_id]['rank_image'], $user_cache[$poster_id]['rank_image_src']);			if ((!empty($row['user_allow_viewemail']) && $auth->acl_get('u_sendemail')) || $auth->acl_get('a_email'))			{				$user_cache[$poster_id]['email'] = ($config['board_email_form'] && $config['email_enable']) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", "mode=email&amp;u=$poster_id") : (($config['board_hide_emails'] && !$auth->acl_get('a_email')) ? '' : 'mailto:' . $row['user_email']);			}			else			{				$user_cache[$poster_id]['email'] = '';			}			if (!empty($row['user_icq']))			{				$user_cache[$poster_id]['icq'] = 'http://www.icq.com/people/' . urlencode($row['user_icq']) . '/';				$user_cache[$poster_id]['icq_status_img'] = '<img src="http://web.icq.com/whitepages/online?icq=' . $row['user_icq'] . '&amp;img=5" width="18" height="18" alt="" />';			}			else			{				$user_cache[$poster_id]['icq_status_img'] = '';				$user_cache[$poster_id]['icq'] = '';			}			if ($config['allow_birthdays'] && !empty($row['user_birthday']))			{				list($bday_day, $bday_month, $bday_year) = array_map('intval', explode('-', $row['user_birthday']));				if ($bday_year)				{					$diff = $now['mon'] - $bday_month;					if ($diff == 0)					{						$diff = ($now['mday'] - $bday_day < 0) ? 1 : 0;					}					else					{						$diff = ($diff < 0) ? 1 : 0;					}					$user_cache[$poster_id]['age'] = (int) ($now['year'] - $bday_year - $diff);				}			}		}	}}$db->sql_freeresult($result);// Load custom profile fieldsif ($config['load_cpf_viewtopic']){	if (!class_exists('custom_profile'))	{		include($phpbb_root_path . 'includes/functions_profile_fields.' . $phpEx);	}	$cp = new custom_profile();	// Grab all profile fields from users in id cache for later use - similar to the poster cache	$profile_fields_tmp = $cp->generate_profile_fields_template('grab', $id_cache);	// filter out fields not to be displayed on viewtopic. Yes, it's a hack, but this shouldn't break any MODs.	$profile_fields_cache = array();	foreach ($profile_fields_tmp as $profile_user_id => $profile_fields)	{		$profile_fields_cache[$profile_user_id] = array();		foreach ($profile_fields as $used_ident => $profile_field)		{			if ($profile_field['data']['field_show_on_vt'])			{				$profile_fields_cache[$profile_user_id][$used_ident] = $profile_field;			}		}	}	unset($profile_fields_tmp);}// Generate online information for userif ($config['load_onlinetrack'] && sizeof($id_cache)){	$sql = 'SELECT session_user_id, MAX(session_time) as online_time, MIN(session_viewonline) AS viewonline		FROM ' . SESSIONS_TABLE . '		WHERE ' . $db->sql_in_set('session_user_id', $id_cache) . '		GROUP BY session_user_id';	$result = $db->sql_query($sql);	$update_time = $config['load_online_time'] * 60;	while ($row = $db->sql_fetchrow($result))	{		$user_cache[$row['session_user_id']]['online'] = (time() - $update_time < $row['online_time'] && (($row['viewonline']) || $auth->acl_get('u_viewonline'))) ? true : false;	}	$db->sql_freeresult($result);}unset($id_cache);// Pull attachment dataif (sizeof($attach_list)){	if ($auth->acl_get('u_download') && $auth->acl_get('f_download', $forum_id))	{		$sql = 'SELECT *			FROM ' . ATTACHMENTS_TABLE . '			WHERE ' . $db->sql_in_set('post_msg_id', $attach_list) . '				AND in_message = 0			ORDER BY filetime DESC, post_msg_id ASC';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$attachments[$row['post_msg_id']][] = $row;		}		$db->sql_freeresult($result);		// No attachments exist, but post table thinks they do so go ahead and reset post_attach flags		if (!sizeof($attachments))		{			$sql = 'UPDATE ' . POSTS_TABLE . '				SET post_attachment = 0				WHERE ' . $db->sql_in_set('post_id', $attach_list);			$db->sql_query($sql);			// We need to update the topic indicator too if the complete topic is now without an attachment			if (sizeof($rowset) != $total_posts)			{				// Not all posts are displayed so we query the db to find if there's any attachment for this topic				$sql = 'SELECT a.post_msg_id as post_id					FROM ' . ATTACHMENTS_TABLE . ' a, ' . POSTS_TABLE . " p					WHERE p.topic_id = $topic_id						AND p.post_approved = 1						AND p.topic_id = a.topic_id";				$result = $db->sql_query_limit($sql, 1);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					$sql = 'UPDATE ' . TOPICS_TABLE . "						SET topic_attachment = 0						WHERE topic_id = $topic_id";					$db->sql_query($sql);				}			}			else			{				$sql = 'UPDATE ' . TOPICS_TABLE . "					SET topic_attachment = 0					WHERE topic_id = $topic_id";				$db->sql_query($sql);			}		}		else if ($has_attachments && !$topic_data['topic_attachment'])		{			// Topic has approved attachments but its flag is wrong			$sql = 'UPDATE ' . TOPICS_TABLE . "				SET topic_attachment = 1				WHERE topic_id = $topic_id";			$db->sql_query($sql);			$topic_data['topic_attachment'] = 1;		}	}	else	{		$display_notice = true;	}}// Instantiate BBCode if need beif ($bbcode_bitfield !== ''){	$bbcode = new bbcode(base64_encode($bbcode_bitfield));}$i_total = sizeof($rowset) - 1;$prev_post_id = '';$template->assign_vars(array(	'S_NUM_POSTS' => sizeof($post_list)));// Output the posts$first_unread = $post_unread = false;for ($i = 0, $end = sizeof($post_list); $i < $end; ++$i){	// A non-existing rowset only happens if there was no user present for the entered poster_id	// This could be a broken posts table.	if (!isset($rowset[$post_list[$i]]))	{		continue;	}	$row =& $rowset[$post_list[$i]];	$poster_id = $row['user_id'];	// End signature parsing, only if needed	if ($user_cache[$poster_id]['sig'] && $row['enable_sig'] && empty($user_cache[$poster_id]['sig_parsed']))	{		$user_cache[$poster_id]['sig'] = censor_text($user_cache[$poster_id]['sig']);		if ($user_cache[$poster_id]['sig_bbcode_bitfield'])		{			$bbcode->bbcode_second_pass($user_cache[$poster_id]['sig'], $user_cache[$poster_id]['sig_bbcode_uid'], $user_cache[$poster_id]['sig_bbcode_bitfield']);		}		$user_cache[$poster_id]['sig'] = bbcode_nl2br($user_cache[$poster_id]['sig']);		$user_cache[$poster_id]['sig'] = smiley_text($user_cache[$poster_id]['sig']);		$user_cache[$poster_id]['sig_parsed'] = true;	}	// Parse the message and subject	$message = censor_text($row['post_text']);	// Second parse bbcode here	if ($row['bbcode_bitfield'])	{		$bbcode->bbcode_second_pass($message, $row['bbcode_uid'], $row['bbcode_bitfield']);	}	$message = bbcode_nl2br($message);	$message = smiley_text($message);	if (!empty($attachments[$row['post_id']]))	{		parse_attachments($forum_id, $message, $attachments[$row['post_id']], $update_count);	}	// Replace naughty words such as farty pants	$row['post_subject'] = censor_text($row['post_subject']);	// Highlight active words (primarily for search)	if ($highlight_match)	{		$message = preg_replace('#(?!<.*)(?<!\w)(' . $highlight_match . ')(?!\w|[^<>]*(?:</s(?:cript|tyle))?>)#is', '<span class="posthilit">\1</span>', $message);		$row['post_subject'] = preg_replace('#(?!<.*)(?<!\w)(' . $highlight_match . ')(?!\w|[^<>]*(?:</s(?:cript|tyle))?>)#is', '<span class="posthilit">\1</span>', $row['post_subject']);	}	// Editing information	if (($row['post_edit_count'] && $config['display_last_edited']) || $row['post_edit_reason'])	{		// Get usernames for all following posts if not already stored		if (!sizeof($post_edit_list) && ($row['post_edit_reason'] || ($row['post_edit_user'] && !isset($user_cache[$row['post_edit_user']]))))		{			// Remove all post_ids already parsed (we do not have to check them)			$post_storage_list = (!$store_reverse) ? array_slice($post_list, $i) : array_slice(array_reverse($post_list), $i);			$sql = 'SELECT DISTINCT u.user_id, u.username, u.user_colour				FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u				WHERE ' . $db->sql_in_set('p.post_id', $post_storage_list) . '					AND p.post_edit_count <> 0					AND p.post_edit_user <> 0					AND p.post_edit_user = u.user_id';			$result2 = $db->sql_query($sql);			while ($user_edit_row = $db->sql_fetchrow($result2))			{				$post_edit_list[$user_edit_row['user_id']] = $user_edit_row;			}			$db->sql_freeresult($result2);			unset($post_storage_list);		}		$l_edit_time_total = ($row['post_edit_count'] == 1) ? $user->lang['EDITED_TIME_TOTAL'] : $user->lang['EDITED_TIMES_TOTAL'];		if ($row['post_edit_reason'])		{			// User having edited the post also being the post author?			if (!$row['post_edit_user'] || $row['post_edit_user'] == $poster_id)			{				$display_username = get_username_string('full', $poster_id, $row['username'], $row['user_colour'], $row['post_username']);			}			else			{				$display_username = get_username_string('full', $row['post_edit_user'], $post_edit_list[$row['post_edit_user']]['username'], $post_edit_list[$row['post_edit_user']]['user_colour']);			}			$l_edited_by = sprintf($l_edit_time_total, $display_username, $user->format_date($row['post_edit_time'], false, true), $row['post_edit_count']);		}		else		{			if ($row['post_edit_user'] && !isset($user_cache[$row['post_edit_user']]))			{				$user_cache[$row['post_edit_user']] = $post_edit_list[$row['post_edit_user']];			}			// User having edited the post also being the post author?			if (!$row['post_edit_user'] || $row['post_edit_user'] == $poster_id)			{				$display_username = get_username_string('full', $poster_id, $row['username'], $row['user_colour'], $row['post_username']);			}			else			{				$display_username = get_username_string('full', $row['post_edit_user'], $user_cache[$row['post_edit_user']]['username'], $user_cache[$row['post_edit_user']]['user_colour']);			}			$l_edited_by = sprintf($l_edit_time_total, $display_username, $user->format_date($row['post_edit_time'], false, true), $row['post_edit_count']);		}	}	else	{		$l_edited_by = '';	}	// Bump information	if ($topic_data['topic_bumped'] && $row['post_id'] == $topic_data['topic_last_post_id'] && isset($user_cache[$topic_data['topic_bumper']]) )	{		// It is safe to grab the username from the user cache array, we are at the last		// post and only the topic poster and last poster are allowed to bump.		// Admins and mods are bound to the above rules too...		$l_bumped_by = sprintf($user->lang['BUMPED_BY'], $user_cache[$topic_data['topic_bumper']]['username'], $user->format_date($topic_data['topic_last_post_time'], false, true));	}	else	{		$l_bumped_by = '';	}	$cp_row = array();	//	if ($config['load_cpf_viewtopic'])	{		$cp_row = (isset($profile_fields_cache[$poster_id])) ? $cp->generate_profile_fields_template('show', false, $profile_fields_cache[$poster_id]) : array();	}	$post_unread = (isset($topic_tracking_info[$topic_id]) && $row['post_time'] > $topic_tracking_info[$topic_id]) ? true : false;	$s_first_unread = false;	if (!$first_unread && $post_unread)	{		$s_first_unread = $first_unread = true;	}	$edit_allowed = ($user->data['is_registered'] && ($auth->acl_get('m_edit', $forum_id) || (		$user->data['user_id'] == $poster_id &&		$auth->acl_get('f_edit', $forum_id) &&		!$row['post_edit_locked'] &&		($row['post_time'] > time() - ($config['edit_time'] * 60) || !$config['edit_time'])	)));	$delete_allowed = ($user->data['is_registered'] && ($auth->acl_get('m_delete', $forum_id) || (		$user->data['user_id'] == $poster_id &&		$auth->acl_get('f_delete', $forum_id) &&		$topic_data['topic_last_post_id'] == $row['post_id'] &&		($row['post_time'] > time() - ($config['delete_time'] * 60) || !$config['delete_time']) &&		// we do not want to allow removal of the last post if a moderator locked it!		!$row['post_edit_locked']	)));	//	$postrow = array(		'POST_AUTHOR_FULL'		=> ($poster_id != ANONYMOUS) ? $user_cache[$poster_id]['author_full'] : get_username_string('full', $poster_id, $row['username'], $row['user_colour'], $row['post_username']),		'POST_AUTHOR_COLOUR'	=> ($poster_id != ANONYMOUS) ? $user_cache[$poster_id]['author_colour'] : get_username_string('colour', $poster_id, $row['username'], $row['user_colour'], $row['post_username']),		'POST_AUTHOR'			=> ($poster_id != ANONYMOUS) ? $user_cache[$poster_id]['author_username'] : get_username_string('username', $poster_id, $row['username'], $row['user_colour'], $row['post_username']),		'U_POST_AUTHOR'			=> ($poster_id != ANONYMOUS) ? $user_cache[$poster_id]['author_profile'] : get_username_string('profile', $poster_id, $row['username'], $row['user_colour'], $row['post_username']),		'RANK_TITLE'		=> $user_cache[$poster_id]['rank_title'],		'RANK_IMG'			=> $user_cache[$poster_id]['rank_image'],		'RANK_IMG_SRC'		=> $user_cache[$poster_id]['rank_image_src'],		'POSTER_JOINED'		=> $user_cache[$poster_id]['joined'],		'POSTER_POSTS'		=> $user_cache[$poster_id]['posts'],		'POSTER_FROM'		=> $user_cache[$poster_id]['from'],		'POSTER_AVATAR'		=> $user_cache[$poster_id]['avatar'],		'POSTER_WARNINGS'	=> $user_cache[$poster_id]['warnings'],		'POSTER_AGE'		=> $user_cache[$poster_id]['age'],		'POST_DATE'			=> $user->format_date($row['post_time'], false, ($view == 'print') ? true : false),		'POST_SUBJECT'		=> $row['post_subject'],		'MESSAGE'			=> $message,		'SIGNATURE'			=> ($row['enable_sig']) ? $user_cache[$poster_id]['sig'] : '',		'EDITED_MESSAGE'	=> $l_edited_by,		'EDIT_REASON'		=> $row['post_edit_reason'],		'BUMPED_MESSAGE'	=> $l_bumped_by,		'MINI_POST_IMG'			=> ($post_unread) ? $user->img('icon_post_target_unread', 'UNREAD_POST') : $user->img('icon_post_target', 'POST'),		'POST_ICON_IMG'			=> ($topic_data['enable_icons'] && !empty($row['icon_id'])) ? $icons[$row['icon_id']]['img'] : '',		'POST_ICON_IMG_WIDTH'	=> ($topic_data['enable_icons'] && !empty($row['icon_id'])) ? $icons[$row['icon_id']]['width'] : '',		'POST_ICON_IMG_HEIGHT'	=> ($topic_data['enable_icons'] && !empty($row['icon_id'])) ? $icons[$row['icon_id']]['height'] : '',		'ICQ_STATUS_IMG'		=> $user_cache[$poster_id]['icq_status_img'],		'ONLINE_IMG'			=> ($poster_id == ANONYMOUS || !$config['load_onlinetrack']) ? '' : (($user_cache[$poster_id]['online']) ? $user->img('icon_user_online', 'ONLINE') : $user->img('icon_user_offline', 'OFFLINE')),		'S_ONLINE'				=> ($poster_id == ANONYMOUS || !$config['load_onlinetrack']) ? false : (($user_cache[$poster_id]['online']) ? true : false),		'U_EDIT'			=> ($edit_allowed) ? append_sid("{$phpbb_root_path}posting.$phpEx", "mode=edit&amp;f=$forum_id&amp;p={$row['post_id']}") : '',		'U_QUOTE'			=> ($auth->acl_get('f_reply', $forum_id)) ? append_sid("{$phpbb_root_path}posting.$phpEx", "mode=quote&amp;f=$forum_id&amp;p={$row['post_id']}") : '',		'U_INFO'			=> ($auth->acl_get('m_info', $forum_id)) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "i=main&amp;mode=post_details&amp;f=$forum_id&amp;p=" . $row['post_id'], true, $user->session_id) : '',		'U_DELETE'			=> ($delete_allowed) ? append_sid("{$phpbb_root_path}posting.$phpEx", "mode=delete&amp;f=$forum_id&amp;p={$row['post_id']}") : '',		'U_PROFILE'		=> $user_cache[$poster_id]['profile'],		'U_SEARCH'		=> $user_cache[$poster_id]['search'],		'U_PM'			=> ($poster_id != ANONYMOUS && $config['allow_privmsg'] && $auth->acl_get('u_sendpm') && ($user_cache[$poster_id]['allow_pm'] || $auth->acl_gets('a_', 'm_') || $auth->acl_getf_global('m_'))) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=compose&amp;action=quotepost&amp;p=' . $row['post_id']) : '',		'U_EMAIL'		=> $user_cache[$poster_id]['email'],		'U_WWW'			=> $user_cache[$poster_id]['www'],		'U_ICQ'			=> $user_cache[$poster_id]['icq'],		'U_AIM'			=> $user_cache[$poster_id]['aim'],		'U_MSN'			=> $user_cache[$poster_id]['msn'],		'U_YIM'			=> $user_cache[$poster_id]['yim'],		'U_JABBER'		=> $user_cache[$poster_id]['jabber'],		'U_REPORT'			=> ($auth->acl_get('f_report', $forum_id)) ? append_sid("{$phpbb_root_path}report.$phpEx", 'f=' . $forum_id . '&amp;p=' . $row['post_id']) : '',		'U_MCP_REPORT'		=> ($auth->acl_get('m_report', $forum_id)) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports&amp;mode=report_details&amp;f=' . $forum_id . '&amp;p=' . $row['post_id'], true, $user->session_id) : '',		'U_MCP_APPROVE'		=> ($auth->acl_get('m_approve', $forum_id)) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue&amp;mode=approve_details&amp;f=' . $forum_id . '&amp;p=' . $row['post_id'], true, $user->session_id) : '',		'U_MINI_POST'		=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'p=' . $row['post_id']) . (($topic_data['topic_type'] == POST_GLOBAL) ? '&amp;f=' . $forum_id : '') . '#p' . $row['post_id'],		'U_NEXT_POST_ID'	=> ($i < $i_total && isset($rowset[$post_list[$i + 1]])) ? $rowset[$post_list[$i + 1]]['post_id'] : '',		'U_PREV_POST_ID'	=> $prev_post_id,		'U_NOTES'			=> ($auth->acl_getf_global('m_')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $poster_id, true, $user->session_id) : '',		'U_WARN'			=> ($auth->acl_get('m_warn') && $poster_id != $user->data['user_id'] && $poster_id != ANONYMOUS) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=warn&amp;mode=warn_post&amp;f=' . $forum_id . '&amp;p=' . $row['post_id'], true, $user->session_id) : '',		'POST_ID'			=> $row['post_id'],		'POST_NUMBER'		=> $i + $start + 1,		'POSTER_ID'			=> $poster_id,		'S_HAS_ATTACHMENTS'	=> (!empty($attachments[$row['post_id']])) ? true : false,		'S_POST_UNAPPROVED'	=> ($row['post_approved']) ? false : true,		'S_POST_REPORTED'	=> ($row['post_reported'] && $auth->acl_get('m_report', $forum_id)) ? true : false,		'S_DISPLAY_NOTICE'	=> $display_notice && $row['post_attachment'],		'S_FRIEND'			=> ($row['friend']) ? true : false,		'S_UNREAD_POST'		=> $post_unread,		'S_FIRST_UNREAD'	=> $s_first_unread,		'S_CUSTOM_FIELDS'	=> (isset($cp_row['row']) && sizeof($cp_row['row'])) ? true : false,		'S_TOPIC_POSTER'	=> ($topic_data['topic_poster'] == $poster_id) ? true : false,		'S_IGNORE_POST'		=> ($row['hide_post']) ? true : false,		'L_IGNORE_POST'		=> ($row['hide_post']) ? sprintf($user->lang['POST_BY_FOE'], get_username_string('full', $poster_id, $row['username'], $row['user_colour'], $row['post_username']), '<a href="' . $viewtopic_url . "&amp;p={$row['post_id']}&amp;view=show#p{$row['post_id']}" . '">', '</a>') : '',	);	if (isset($cp_row['row']) && sizeof($cp_row['row']))	{		$postrow = array_merge($postrow, $cp_row['row']);	}	// Dump vars into template	$template->assign_block_vars('postrow', $postrow);	if (!empty($cp_row['blockrow']))	{		foreach ($cp_row['blockrow'] as $field_data)		{			$template->assign_block_vars('postrow.custom_fields', $field_data);		}	}	// Display not already displayed Attachments for this post, we already parsed them. ;)	if (!empty($attachments[$row['post_id']]))	{		foreach ($attachments[$row['post_id']] as $attachment)		{			$template->assign_block_vars('postrow.attachment', array(				'DISPLAY_ATTACHMENT'	=> $attachment)			);		}	}	$prev_post_id = $row['post_id'];	unset($rowset[$post_list[$i]]);	unset($attachments[$row['post_id']]);}unset($rowset, $user_cache);// Update topic view and if necessary attachment view counters ... but only for humans and if this is the first 'page view'if (isset($user->data['session_page']) && !$user->data['is_bot'] && (strpos($user->data['session_page'], '&t=' . $topic_id) === false || isset($user->data['session_created']))){	$sql = 'UPDATE ' . TOPICS_TABLE . '		SET topic_views = topic_views + 1, topic_last_view_time = ' . time() . "		WHERE topic_id = $topic_id";	$db->sql_query($sql);	// Update the attachment download counts	if (sizeof($update_count))	{		$sql = 'UPDATE ' . ATTACHMENTS_TABLE . '			SET download_count = download_count + 1			WHERE ' . $db->sql_in_set('attach_id', array_unique($update_count));		$db->sql_query($sql);	}}// Get last post time for all global announcements// to keep proper forums trackingif ($topic_data['topic_type'] == POST_GLOBAL){	$sql = 'SELECT topic_last_post_time as forum_last_post_time		FROM ' . TOPICS_TABLE . '		WHERE forum_id = 0		ORDER BY topic_last_post_time DESC';	$result = $db->sql_query_limit($sql, 1);	$topic_data['forum_last_post_time'] = (int) $db->sql_fetchfield('forum_last_post_time');	$db->sql_freeresult($result);	$sql = 'SELECT mark_time as forum_mark_time		FROM ' . FORUMS_TRACK_TABLE . '		WHERE forum_id = 0			AND user_id = ' . $user->data['user_id'];	$result = $db->sql_query($sql);	$topic_data['forum_mark_time'] = (int) $db->sql_fetchfield('forum_mark_time');	$db->sql_freeresult($result);}// Only mark topic if it's currently unread. Also make sure we do not set topic tracking back if earlier pages are viewed.if (isset($topic_tracking_info[$topic_id]) && $topic_data['topic_last_post_time'] > $topic_tracking_info[$topic_id] && $max_post_time > $topic_tracking_info[$topic_id]){	markread('topic', (($topic_data['topic_type'] == POST_GLOBAL) ? 0 : $forum_id), $topic_id, $max_post_time);	// Update forum info	$all_marked_read = update_forum_tracking_info((($topic_data['topic_type'] == POST_GLOBAL) ? 0 : $forum_id), $topic_data['forum_last_post_time'], (isset($topic_data['forum_mark_time'])) ? $topic_data['forum_mark_time'] : false, false);}else{	$all_marked_read = true;}// If there are absolutely no more unread posts in this forum and unread posts shown, we can savely show the #unread linkif ($all_marked_read){	if ($post_unread)	{		$template->assign_vars(array(			'U_VIEW_UNREAD_POST'	=> '#unread',		));	}	else if (isset($topic_tracking_info[$topic_id]) && $topic_data['topic_last_post_time'] > $topic_tracking_info[$topic_id])	{		$template->assign_vars(array(			'U_VIEW_UNREAD_POST'	=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id&amp;view=unread") . '#unread',		));	}}else if (!$all_marked_read){	$last_page = ((floor($start / $config['posts_per_page']) + 1) == max(ceil($total_posts / $config['posts_per_page']), 1)) ? true : false;	// What can happen is that we are at the last displayed page. If so, we also display the #unread link based in $post_unread	if ($last_page && $post_unread)	{		$template->assign_vars(array(			'U_VIEW_UNREAD_POST'	=> '#unread',		));	}	else if (!$last_page)	{		$template->assign_vars(array(			'U_VIEW_UNREAD_POST'	=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id&amp;view=unread") . '#unread',		));	}}// let's set up quick_reply$s_quick_reply = false;if ($user->data['is_registered'] && $config['allow_quick_reply'] && ($topic_data['forum_flags'] & FORUM_FLAG_QUICK_REPLY) && $auth->acl_get('f_reply', $forum_id)){	// Quick reply enabled forum	$s_quick_reply = (($topic_data['forum_status'] == ITEM_UNLOCKED && $topic_data['topic_status'] == ITEM_UNLOCKED) || $auth->acl_get('m_edit', $forum_id)) ? true : false;}if ($s_can_vote || $s_quick_reply){	add_form_key('posting');	if ($s_quick_reply)	{		$s_attach_sig	= $config['allow_sig'] && $user->optionget('attachsig') && $auth->acl_get('f_sigs', $forum_id) && $auth->acl_get('u_sig');		$s_smilies		= $config['allow_smilies'] && $user->optionget('smilies') && $auth->acl_get('f_smilies', $forum_id);		$s_bbcode		= $config['allow_bbcode'] && $user->optionget('bbcode') && $auth->acl_get('f_bbcode', $forum_id);		$s_notify		= $config['allow_topic_notify'] && ($user->data['user_notify'] || $s_watching_topic['is_watching']);		$qr_hidden_fields = array(			'topic_cur_post_id'		=> (int) $topic_data['topic_last_post_id'],			'lastclick'				=> (int) time(),			'topic_id'				=> (int) $topic_data['topic_id'],			'forum_id'				=> (int) $forum_id,		);		// Originally we use checkboxes and check with isset(), so we only provide them if they would be checked		(!$s_bbcode)					? $qr_hidden_fields['disable_bbcode'] = 1		: true;		(!$s_smilies)					? $qr_hidden_fields['disable_smilies'] = 1		: true;		(!$config['allow_post_links'])	? $qr_hidden_fields['disable_magic_url'] = 1	: true;		($s_attach_sig)					? $qr_hidden_fields['attach_sig'] = 1			: true;		($s_notify)						? $qr_hidden_fields['notify'] = 1				: true;		($topic_data['topic_status'] == ITEM_LOCKED) ? $qr_hidden_fields['lock_topic'] = 1 : true;		$template->assign_vars(array(			'S_QUICK_REPLY'			=> true,			'U_QR_ACTION'			=> append_sid("{$phpbb_root_path}posting.$phpEx", "mode=reply&amp;f=$forum_id&amp;t=$topic_id"),			'QR_HIDDEN_FIELDS'		=> build_hidden_fields($qr_hidden_fields),			'SUBJECT'				=> 'Re: ' . censor_text($topic_data['topic_title']),		));	}}// now I have the urge to wash my hands :(// We overwrite $_REQUEST['f'] if there is no forum specified// to be able to display the correct online list.// One downside is that the user currently viewing this topic/post is not taken into account.if (empty($_REQUEST['f'])){	$_REQUEST['f'] = $forum_id;}// We need to do the same with the topic_id. See #53025.if (empty($_REQUEST['t']) && !empty($topic_id)){	$_REQUEST['t'] = $topic_id;}// Output the pagepage_header($user->lang['VIEW_TOPIC'] . ' - ' . $topic_data['topic_title'], true, $forum_id);$template->set_filenames(array(	'body' => ($view == 'print') ? 'viewtopic_print.html' : 'viewtopic_body.html'));make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"), $forum_id);page_footer();?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class ucp_profile_info{	function module()	{		return array(			'filename'	=> 'ucp_profile',			'title'		=> 'UCP_PROFILE',			'version'	=> '1.0.0',			'modes'		=> array(				'profile_info'	=> array('title' => 'UCP_PROFILE_PROFILE_INFO', 'auth' => '', 'cat' => array('UCP_PROFILE')),				'signature'		=> array('title' => 'UCP_PROFILE_SIGNATURE', 'auth' => '', 'cat' => array('UCP_PROFILE')),				'avatar'		=> array('title' => 'UCP_PROFILE_AVATAR', 'auth' => 'cfg_allow_avatar && (cfg_allow_avatar_local || cfg_allow_avatar_remote || cfg_allow_avatar_upload || cfg_allow_avatar_remote_upload)', 'cat' => array('UCP_PROFILE')),				'reg_details'	=> array('title' => 'UCP_PROFILE_REG_DETAILS', 'auth' => '', 'cat' => array('UCP_PROFILE')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** acp_groups [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ACP_GROUPS_MANAGE_EXPLAIN'		=> 'From this panel you can administer all your usergroups. You can delete, create and edit existing groups. Furthermore, you may choose group leaders, toggle open/hidden/closed group status and set the group name and description.',	'ADD_USERS'						=> 'Add users',	'ADD_USERS_EXPLAIN'				=> 'Here you can add new users to the group. You may select whether this group becomes the new default for the selected users. Additionally you can define them as group leaders. Please enter each username on a separate line.',	'COPY_PERMISSIONS'				=> 'Copy permissions from',	'COPY_PERMISSIONS_EXPLAIN'		=> 'Once created, the group will have the same permissions as the one you select here.',	'CREATE_GROUP'					=> 'Create new group',	'GROUPS_NO_MEMBERS'				=> 'This group has no members',	'GROUPS_NO_MODS'				=> 'No group leaders defined',	'GROUP_APPROVE'					=> 'Approve member',	'GROUP_APPROVED'				=> 'Approved members',	'GROUP_AVATAR'					=> 'Group avatar',	'GROUP_AVATAR_EXPLAIN'			=> 'This image will be displayed in the Group Control Panel.',	'GROUP_CLOSED'					=> 'Closed',	'GROUP_COLOR'					=> 'Group colour',	'GROUP_COLOR_EXPLAIN'			=> 'Defines the colour members usernames will appear in, leave blank for user default.',	'GROUP_CONFIRM_ADD_USER'		=> 'Are you sure that you want to add the user %1$s to the group?',	'GROUP_CONFIRM_ADD_USERS'		=> 'Are you sure that you want to add the users %1$s to the group?',	'GROUP_CREATED'					=> 'Group has been created successfully.',	'GROUP_DEFAULT'					=> 'Make group default for member',	'GROUP_DEFS_UPDATED'			=> 'Default group set for all selected members.',	'GROUP_DELETE'					=> 'Remove member from group',	'GROUP_DELETED'					=> 'Group deleted and user default groups set successfully.',	'GROUP_DEMOTE'					=> 'Demote group leader',	'GROUP_DESC'					=> 'Group description',	'GROUP_DETAILS'					=> 'Group details',	'GROUP_EDIT_EXPLAIN'			=> 'Here you can edit an existing group. You can change its name, description and type (open, closed, etc.). You can also set certain group wide options such as colouration, rank, etc. Changes made here override users current settings. Please note that group members can override group-avatar settings, unless you set appropriate user permissions.',	'GROUP_ERR_USERS_EXIST'			=> 'The specified users are already members of this group.',	'GROUP_FOUNDER_MANAGE'			=> 'Founder manage only',	'GROUP_FOUNDER_MANAGE_EXPLAIN'	=> 'Restrict management of this group to founders only. Users having group permissions are still able to see this group as well as this groups members.',	'GROUP_HIDDEN'					=> 'Hidden',	'GROUP_LANG'					=> 'Group language',	'GROUP_LEAD'					=> 'Group leaders',	'GROUP_LEADERS_ADDED'			=> 'New leaders added to group successfully.',	'GROUP_LEGEND'					=> 'Display group in legend',	'GROUP_LIST'					=> 'Current members',	'GROUP_LIST_EXPLAIN'			=> 'This is a complete list of all the current users with membership of this group. You can delete members (except in certain special groups) or add new ones as you see fit.',	'GROUP_MEMBERS'					=> 'Group members',	'GROUP_MEMBERS_EXPLAIN'			=> 'This is a complete listing of all the members of this usergroup. It includes separate sections for leaders, pending and existing members. From here you can manage all aspects of who has membership of this group and what their role is. To remove a leader but keep them in the group use Demote rather than delete. Similarly use Promote to make an existing member a leader.',	'GROUP_MESSAGE_LIMIT'			=> 'Group private message limit per folder',	'GROUP_MESSAGE_LIMIT_EXPLAIN'	=> 'This setting overrides the per-user folder message limit. A value of 0 means the user default limit will be used.',	'GROUP_MODS_ADDED'				=> 'New group leaders added successfully.',	'GROUP_MODS_DEMOTED'			=> 'Group leaders demoted successfully.',	'GROUP_MODS_PROMOTED'			=> 'Group members promoted successfully.',	'GROUP_NAME'					=> 'Group name',	'GROUP_NAME_TAKEN'				=> 'The group name you entered is already in use, please select an alternative.',	'GROUP_OPEN'					=> 'Open',	'GROUP_PENDING'					=> 'Pending members',	'GROUP_MAX_RECIPIENTS'			=> 'Maximum number of allowed recipients per private message',	'GROUP_MAX_RECIPIENTS_EXPLAIN'	=> 'The maximum number of allowed recipients in a private message. If 0 is entered, the board-wide setting is used.',	'GROUP_OPTIONS_SAVE'			=> 'Group wide options',	'GROUP_PROMOTE'					=> 'Promote to group leader',	'GROUP_RANK'					=> 'Group rank',	'GROUP_RECEIVE_PM'				=> 'Group able to receive private messages',	'GROUP_RECEIVE_PM_EXPLAIN'		=> 'Please note that hidden groups are not able to be messaged, regardless of this setting.',	'GROUP_REQUEST'					=> 'Request',	'GROUP_SETTINGS_SAVE'			=> 'Group wide settings',	'GROUP_SKIP_AUTH'				=> 'Exempt group leader from permissions',	'GROUP_SKIP_AUTH_EXPLAIN'		=> 'If enabled group leader no longer inherit permissions from the group.',	'GROUP_TYPE'					=> 'Group type',	'GROUP_TYPE_EXPLAIN'			=> 'This determines which users can join or view this group.',	'GROUP_UPDATED'					=> 'Group preferences updated successfully.',	'GROUP_USERS_ADDED'				=> 'New users added to group successfully.',	'GROUP_USERS_EXIST'				=> 'The selected users are already members.',	'GROUP_USERS_REMOVE'			=> 'Users removed from group and new defaults set successfully.',	'MAKE_DEFAULT_FOR_ALL'	=> 'Make default group for every member',	'MEMBERS'				=> 'Members',	'NO_GROUP'					=> 'No group specified.',	'NO_GROUPS_CREATED'			=> 'No groups created yet.',	'NO_PERMISSIONS'			=> 'Do not copy permissions',	'NO_USERS'					=> 'You havent entered any users.',	'NO_USERS_ADDED'			=> 'No users were added to the group.',	'NO_VALID_USERS'			=> 'You havent entered any users eligible for that action.',	'SPECIAL_GROUPS'			=> 'Pre-defined groups',	'SPECIAL_GROUPS_EXPLAIN'	=> 'Pre-defined groups are special groups, they cannot be deleted or directly modified. However you can still add users and alter basic settings.',	'TOTAL_MEMBERS'				=> 'Members',	'USERS_APPROVED'				=> 'Users approved successfully.',	'USER_DEFAULT'					=> 'User default',	'USER_DEF_GROUPS'				=> 'User defined groups',	'USER_DEF_GROUPS_EXPLAIN'		=> 'These are groups created by you or another admin on this board. You can manage memberships as well as edit group properties or even delete the group.',	'USER_GROUP_DEFAULT'			=> 'Set as default group',	'USER_GROUP_DEFAULT_EXPLAIN'	=> 'Saying yes here will set this group as the default group for the added users.',	'USER_GROUP_LEADER'				=> 'Set as group leader',));?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class ucp_prefs_info{	function module()	{		return array(			'filename'	=> 'ucp_prefs',			'title'		=> 'UCP_PREFS',			'version'	=> '1.0.0',			'modes'		=> array(				'personal'	=> array('title' => 'UCP_PREFS_PERSONAL', 'auth' => '', 'cat' => array('UCP_PREFS')),				'post'		=> array('title' => 'UCP_PREFS_POST', 'auth' => '', 'cat' => array('UCP_PREFS')),				'view'		=> array('title' => 'UCP_PREFS_VIEW', 'auth' => '', 'cat' => array('UCP_PREFS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** search_ignore_words [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**/if (!defined('IN_PHPBB')){	exit;}$words = array(	'a',	'about',	'after',	'ago',	'all',	'almost',	'along',	'alot',	'also',	'am',	'an',	'and',	'answer',	'any',	'anybody',	'anybodys',	'anywhere',	'are',	'arent',	'around',	'as',	'ask',	'askd',	'at',	'bad',	'be',	'because',	'been',	'before',	'being',	'best',	'better',	'between',	'big',	'btw',	'but',	'by',	'can',	'cant',	'come',	'could',	'couldnt',	'day',	'days',	'days',	'did',	'didnt',	'do',	'does',	'doesnt',	'dont',	'down',	'each',	'etc',	'either',	'else',	'even',	'ever',	'every',	'everybody',	'everybodys',	'everyone',	'far',	'find',	'for',	'found',	'from',	'get',	'go',	'going',	'gone',	'good',	'got',	'gotten',	'had',	'has',	'have',	'havent',	'having',	'her',	'here',	'hers',	'him',	'his',	'home',	'how',	'hows',	'href',	'I',	'Ive',	'if',	'in',	'ini',	'into',	'is',	'isnt',	'it',	'its',	'its',	'just',	'know',	'large',	'less',	'like',	'liked',	'little',	'looking',	'look',	'looked',	'looking',	'lot',	'maybe',	'many',	'me',	'more',	'most',	'much',	'must',	'mustnt',	'my',	'near',	'need',	'never',	'new',	'news',	'no',	'none',	'not',	'nothing',	'now',	'of',	'off',	'often',	'old',	'on',	'once',	'only',	'oops',	'or',	'other',	'our',	'ours',	'out',	'over',	'page',	'please',	'put',	'question',	'questions',	'questioned',	'quote',	'rather',	'really',	'recent',	'said',	'saw',	'say',	'says',	'she',	'see',	'sees',	'should',	'sites',	'small',	'so',	'some',	'something',	'sometime',	'somewhere',	'soon',	'take',	'than',	'true',	'thank',	'that',	'thatd',	'thats',	'the',	'their',	'theirs',	'theres',	'theirs',	'them',	'then',	'there',	'these',	'they',	'theyll',	'theyd',	'theyre',	'this',	'those',	'though',	'through',	'thus',	'time',	'times',	'to',	'too',	'under',	'until',	'untrue',	'up',	'upon',	'use',	'users',	'version',	'very',	'via',	'want',	'was',	'way',	'we',	'well',	'went',	'were',	'werent',	'what',	'when',	'where',	'which',	'who',	'whom',	'whose',	'why',	'wide',	'will',	'with',	'within',	'without',	'wont',	'world',	'worse',	'worst',	'would',	'wrote',	'www',	'yes',	'yet',	'you',	'youd',	'youll',	'your',	'youre',	'yours',	'AFAIK',	'IIRC',	'LOL',	'ROTF',	'ROTFLMAO',	'YMMV',);?>
<?php/*** Corrects user_email_hash values if DB moved from 32-bit system to 64-bit system or vice versa.* The CRC32 function in PHP generates different results for both systems.* @PHP dev team: no, a hexdec() applied to it does not solve the issue. And please document it.**/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$start = request_var('start', 0);$num_items = 1000;echo '<br />Updating user email hashes' . "\n";$sql = 'SELECT user_id, user_email	FROM ' . USERS_TABLE . '	ORDER BY user_id ASC';$result = $db->sql_query($sql);$echos = 0;while ($row = $db->sql_fetchrow($result)){	$echos++;	$sql = 'UPDATE ' . USERS_TABLE . "		SET user_email_hash = '" . $db->sql_escape(phpbb_email_hash($row['user_email'])) . "'		WHERE user_id = " . (int) $row['user_id'];	$db->sql_query($sql);	if ($echos == 200)	{		echo '<br />';		$echos = 0;	}	echo '.';	flush();}$db->sql_freeresult($result);echo 'FINISHED';// Done$db->sql_close();?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License** Minimum Requirement: PHP 4.3.3*//***/if (!defined('IN_PHPBB')){	exit;}require($phpbb_root_path . 'includes/startup.' . $phpEx);if (file_exists($phpbb_root_path . 'config.' . $phpEx)){	require($phpbb_root_path . 'config.' . $phpEx);}if (!defined('PHPBB_INSTALLED')){	// Redirect the user to the installer	// We have to generate a full HTTP/1.1 header here since we can't guarantee to have any of the information	// available as used by the redirect function	$server_name = (!empty($_SERVER['HTTP_HOST'])) ? strtolower($_SERVER['HTTP_HOST']) : ((!empty($_SERVER['SERVER_NAME'])) ? $_SERVER['SERVER_NAME'] : getenv('SERVER_NAME'));	$server_port = (!empty($_SERVER['SERVER_PORT'])) ? (int) $_SERVER['SERVER_PORT'] : (int) getenv('SERVER_PORT');	$secure = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? 1 : 0;	$script_name = (!empty($_SERVER['PHP_SELF'])) ? $_SERVER['PHP_SELF'] : getenv('PHP_SELF');	if (!$script_name)	{		$script_name = (!empty($_SERVER['REQUEST_URI'])) ? $_SERVER['REQUEST_URI'] : getenv('REQUEST_URI');	}	// Replace any number of consecutive backslashes and/or slashes with a single slash	// (could happen on some proxy setups and/or Windows servers)	$script_path = trim(dirname($script_name)) . '/install/index.' . $phpEx;	$script_path = preg_replace('#[\\\\/]{2,}#', '/', $script_path);	$url = (($secure) ? 'https://' : 'http://') . $server_name;	if ($server_port && (($secure && $server_port <> 443) || (!$secure && $server_port <> 80)))	{		// HTTP HOST can carry a port number...		if (strpos($server_name, ':') === false)		{			$url .= ':' . $server_port;		}	}	$url .= $script_path;	header('Location: ' . $url);	exit;}if (defined('DEBUG_EXTRA')){	$base_memory_usage = 0;	if (function_exists('memory_get_usage'))	{		$base_memory_usage = memory_get_usage();	}}// Load Extensions// dl() is deprecated and disabled by default as of PHP 5.3.if (!empty($load_extensions) && function_exists('dl')){	$load_extensions = explode(',', $load_extensions);	foreach ($load_extensions as $extension)	{		@dl(trim($extension));	}}// Include filesrequire($phpbb_root_path . 'includes/acm/acm_' . $acm_type . '.' . $phpEx);require($phpbb_root_path . 'includes/cache.' . $phpEx);require($phpbb_root_path . 'includes/template.' . $phpEx);require($phpbb_root_path . 'includes/session.' . $phpEx);require($phpbb_root_path . 'includes/auth.' . $phpEx);require($phpbb_root_path . 'includes/functions.' . $phpEx);require($phpbb_root_path . 'includes/functions_content.' . $phpEx);require($phpbb_root_path . 'includes/constants.' . $phpEx);require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);require($phpbb_root_path . 'includes/utf/utf_tools.' . $phpEx);// Set PHP error handler to oursset_error_handler(defined('PHPBB_MSG_HANDLER') ? PHPBB_MSG_HANDLER : 'msg_handler');// Instantiate some basic classes$user		= new user();$auth		= new auth();$template	= new template();$cache		= new cache();$db			= new $sql_db();// Connect to DB$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, defined('PHPBB_DB_NEW_LINK') ? PHPBB_DB_NEW_LINK : false);// We do not need this any longer, unset for safety purposesunset($dbpasswd);// Grab global variables, re-cache if necessary$config = $cache->obtain_config();// Add own hook handlerrequire($phpbb_root_path . 'includes/hooks/index.' . $phpEx);$phpbb_hook = new phpbb_hook(array('exit_handler', 'phpbb_user_session_handler', 'append_sid', array('template', 'display')));foreach ($cache->obtain_hooks() as $hook){	@include($phpbb_root_path . 'includes/hooks/' . $hook . '.' . $phpEx);}?>
<?php/**** @package dbal* @version $Id$* @copyright (c) 2007 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Database Tools for handling cross-db actions such as altering columns, etc.* Currently not supported is returning SQL for creating tables.** @package dbal* @note currently not used within phpBB3, but may be utilized later.*/class phpbb_db_tools{	/**	* Current sql layer	*/	var $sql_layer = '';	/**	* @var object DB object	*/	var $db = NULL;	/**	* The Column types for every database we support	* @var array	*/	var $dbms_type_map = array(		'mysql_41'	=> array(			'INT:'		=> 'int(%d)',			'BINT'		=> 'bigint(20)',			'UINT'		=> 'mediumint(8) UNSIGNED',			'UINT:'		=> 'int(%d) UNSIGNED',			'TINT:'		=> 'tinyint(%d)',			'USINT'		=> 'smallint(4) UNSIGNED',			'BOOL'		=> 'tinyint(1) UNSIGNED',			'VCHAR'		=> 'varchar(255)',			'VCHAR:'	=> 'varchar(%d)',			'CHAR:'		=> 'char(%d)',			'XSTEXT'	=> 'text',			'XSTEXT_UNI'=> 'varchar(100)',			'STEXT'		=> 'text',			'STEXT_UNI'	=> 'varchar(255)',			'TEXT'		=> 'text',			'TEXT_UNI'	=> 'text',			'MTEXT'		=> 'mediumtext',			'MTEXT_UNI'	=> 'mediumtext',			'TIMESTAMP'	=> 'int(11) UNSIGNED',			'DECIMAL'	=> 'decimal(5,2)',			'DECIMAL:'	=> 'decimal(%d,2)',			'PDECIMAL'	=> 'decimal(6,3)',			'PDECIMAL:'	=> 'decimal(%d,3)',			'VCHAR_UNI'	=> 'varchar(255)',			'VCHAR_UNI:'=> 'varchar(%d)',			'VCHAR_CI'	=> 'varchar(255)',			'VARBINARY'	=> 'varbinary(255)',		),		'mysql_40'	=> array(			'INT:'		=> 'int(%d)',			'BINT'		=> 'bigint(20)',			'UINT'		=> 'mediumint(8) UNSIGNED',			'UINT:'		=> 'int(%d) UNSIGNED',			'TINT:'		=> 'tinyint(%d)',			'USINT'		=> 'smallint(4) UNSIGNED',			'BOOL'		=> 'tinyint(1) UNSIGNED',			'VCHAR'		=> 'varbinary(255)',			'VCHAR:'	=> 'varbinary(%d)',			'CHAR:'		=> 'binary(%d)',			'XSTEXT'	=> 'blob',			'XSTEXT_UNI'=> 'blob',			'STEXT'		=> 'blob',			'STEXT_UNI'	=> 'blob',			'TEXT'		=> 'blob',			'TEXT_UNI'	=> 'blob',			'MTEXT'		=> 'mediumblob',			'MTEXT_UNI'	=> 'mediumblob',			'TIMESTAMP'	=> 'int(11) UNSIGNED',			'DECIMAL'	=> 'decimal(5,2)',			'DECIMAL:'	=> 'decimal(%d,2)',			'PDECIMAL'	=> 'decimal(6,3)',			'PDECIMAL:'	=> 'decimal(%d,3)',			'VCHAR_UNI'	=> 'blob',			'VCHAR_UNI:'=> array('varbinary(%d)', 'limit' => array('mult', 3, 255, 'blob')),			'VCHAR_CI'	=> 'blob',			'VARBINARY'	=> 'varbinary(255)',		),		'firebird'	=> array(			'INT:'		=> 'INTEGER',			'BINT'		=> 'DOUBLE PRECISION',			'UINT'		=> 'INTEGER',			'UINT:'		=> 'INTEGER',			'TINT:'		=> 'INTEGER',			'USINT'		=> 'INTEGER',			'BOOL'		=> 'INTEGER',			'VCHAR'		=> 'VARCHAR(255) CHARACTER SET NONE',			'VCHAR:'	=> 'VARCHAR(%d) CHARACTER SET NONE',			'CHAR:'		=> 'CHAR(%d) CHARACTER SET NONE',			'XSTEXT'	=> 'BLOB SUB_TYPE TEXT CHARACTER SET NONE',			'STEXT'		=> 'BLOB SUB_TYPE TEXT CHARACTER SET NONE',			'TEXT'		=> 'BLOB SUB_TYPE TEXT CHARACTER SET NONE',			'MTEXT'		=> 'BLOB SUB_TYPE TEXT CHARACTER SET NONE',			'XSTEXT_UNI'=> 'VARCHAR(100) CHARACTER SET UTF8',			'STEXT_UNI'	=> 'VARCHAR(255) CHARACTER SET UTF8',			'TEXT_UNI'	=> 'BLOB SUB_TYPE TEXT CHARACTER SET UTF8',			'MTEXT_UNI'	=> 'BLOB SUB_TYPE TEXT CHARACTER SET UTF8',			'TIMESTAMP'	=> 'INTEGER',			'DECIMAL'	=> 'DOUBLE PRECISION',			'DECIMAL:'	=> 'DOUBLE PRECISION',			'PDECIMAL'	=> 'DOUBLE PRECISION',			'PDECIMAL:'	=> 'DOUBLE PRECISION',			'VCHAR_UNI'	=> 'VARCHAR(255) CHARACTER SET UTF8',			'VCHAR_UNI:'=> 'VARCHAR(%d) CHARACTER SET UTF8',			'VCHAR_CI'	=> 'VARCHAR(255) CHARACTER SET UTF8',			'VARBINARY'	=> 'CHAR(255) CHARACTER SET NONE',		),		'mssql'		=> array(			'INT:'		=> '[int]',			'BINT'		=> '[float]',			'UINT'		=> '[int]',			'UINT:'		=> '[int]',			'TINT:'		=> '[int]',			'USINT'		=> '[int]',			'BOOL'		=> '[int]',			'VCHAR'		=> '[varchar] (255)',			'VCHAR:'	=> '[varchar] (%d)',			'CHAR:'		=> '[char] (%d)',			'XSTEXT'	=> '[varchar] (1000)',			'STEXT'		=> '[varchar] (3000)',			'TEXT'		=> '[varchar] (8000)',			'MTEXT'		=> '[text]',			'XSTEXT_UNI'=> '[varchar] (100)',			'STEXT_UNI'	=> '[varchar] (255)',			'TEXT_UNI'	=> '[varchar] (4000)',			'MTEXT_UNI'	=> '[text]',			'TIMESTAMP'	=> '[int]',			'DECIMAL'	=> '[float]',			'DECIMAL:'	=> '[float]',			'PDECIMAL'	=> '[float]',			'PDECIMAL:'	=> '[float]',			'VCHAR_UNI'	=> '[varchar] (255)',			'VCHAR_UNI:'=> '[varchar] (%d)',			'VCHAR_CI'	=> '[varchar] (255)',			'VARBINARY'	=> '[varchar] (255)',		),		'mssqlnative'	=> array(			'INT:'		=> '[int]',			'BINT'		=> '[float]',			'UINT'		=> '[int]',			'UINT:'		=> '[int]',			'TINT:'		=> '[int]',			'USINT'		=> '[int]',			'BOOL'		=> '[int]',			'VCHAR'		=> '[varchar] (255)',			'VCHAR:'	=> '[varchar] (%d)',			'CHAR:'		=> '[char] (%d)',			'XSTEXT'	=> '[varchar] (1000)',			'STEXT'		=> '[varchar] (3000)',			'TEXT'		=> '[varchar] (8000)',			'MTEXT'		=> '[text]',			'XSTEXT_UNI'=> '[varchar] (100)',			'STEXT_UNI'	=> '[varchar] (255)',			'TEXT_UNI'	=> '[varchar] (4000)',			'MTEXT_UNI'	=> '[text]',			'TIMESTAMP'	=> '[int]',			'DECIMAL'	=> '[float]',			'DECIMAL:'	=> '[float]',			'PDECIMAL'	=> '[float]',			'PDECIMAL:'	=> '[float]',			'VCHAR_UNI'	=> '[varchar] (255)',			'VCHAR_UNI:'=> '[varchar] (%d)',			'VCHAR_CI'	=> '[varchar] (255)',			'VARBINARY'	=> '[varchar] (255)',		),		'oracle'	=> array(			'INT:'		=> 'number(%d)',			'BINT'		=> 'number(20)',			'UINT'		=> 'number(8)',			'UINT:'		=> 'number(%d)',			'TINT:'		=> 'number(%d)',			'USINT'		=> 'number(4)',			'BOOL'		=> 'number(1)',			'VCHAR'		=> 'varchar2(255)',			'VCHAR:'	=> 'varchar2(%d)',			'CHAR:'		=> 'char(%d)',			'XSTEXT'	=> 'varchar2(1000)',			'STEXT'		=> 'varchar2(3000)',			'TEXT'		=> 'clob',			'MTEXT'		=> 'clob',			'XSTEXT_UNI'=> 'varchar2(300)',			'STEXT_UNI'	=> 'varchar2(765)',			'TEXT_UNI'	=> 'clob',			'MTEXT_UNI'	=> 'clob',			'TIMESTAMP'	=> 'number(11)',			'DECIMAL'	=> 'number(5, 2)',			'DECIMAL:'	=> 'number(%d, 2)',			'PDECIMAL'	=> 'number(6, 3)',			'PDECIMAL:'	=> 'number(%d, 3)',			'VCHAR_UNI'	=> 'varchar2(765)',			'VCHAR_UNI:'=> array('varchar2(%d)', 'limit' => array('mult', 3, 765, 'clob')),			'VCHAR_CI'	=> 'varchar2(255)',			'VARBINARY'	=> 'raw(255)',		),		'sqlite'	=> array(			'INT:'		=> 'int(%d)',			'BINT'		=> 'bigint(20)',			'UINT'		=> 'INTEGER UNSIGNED', //'mediumint(8) UNSIGNED',			'UINT:'		=> 'INTEGER UNSIGNED', // 'int(%d) UNSIGNED',			'TINT:'		=> 'tinyint(%d)',			'USINT'		=> 'INTEGER UNSIGNED', //'mediumint(4) UNSIGNED',			'BOOL'		=> 'INTEGER UNSIGNED', //'tinyint(1) UNSIGNED',			'VCHAR'		=> 'varchar(255)',			'VCHAR:'	=> 'varchar(%d)',			'CHAR:'		=> 'char(%d)',			'XSTEXT'	=> 'text(65535)',			'STEXT'		=> 'text(65535)',			'TEXT'		=> 'text(65535)',			'MTEXT'		=> 'mediumtext(16777215)',			'XSTEXT_UNI'=> 'text(65535)',			'STEXT_UNI'	=> 'text(65535)',			'TEXT_UNI'	=> 'text(65535)',			'MTEXT_UNI'	=> 'mediumtext(16777215)',			'TIMESTAMP'	=> 'INTEGER UNSIGNED', //'int(11) UNSIGNED',			'DECIMAL'	=> 'decimal(5,2)',			'DECIMAL:'	=> 'decimal(%d,2)',			'PDECIMAL'	=> 'decimal(6,3)',			'PDECIMAL:'	=> 'decimal(%d,3)',			'VCHAR_UNI'	=> 'varchar(255)',			'VCHAR_UNI:'=> 'varchar(%d)',			'VCHAR_CI'	=> 'varchar(255)',			'VARBINARY'	=> 'blob',		),		'postgres'	=> array(			'INT:'		=> 'INT4',			'BINT'		=> 'INT8',			'UINT'		=> 'INT4', // unsigned			'UINT:'		=> 'INT4', // unsigned			'USINT'		=> 'INT2', // unsigned			'BOOL'		=> 'INT2', // unsigned			'TINT:'		=> 'INT2',			'VCHAR'		=> 'varchar(255)',			'VCHAR:'	=> 'varchar(%d)',			'CHAR:'		=> 'char(%d)',			'XSTEXT'	=> 'varchar(1000)',			'STEXT'		=> 'varchar(3000)',			'TEXT'		=> 'varchar(8000)',			'MTEXT'		=> 'TEXT',			'XSTEXT_UNI'=> 'varchar(100)',			'STEXT_UNI'	=> 'varchar(255)',			'TEXT_UNI'	=> 'varchar(4000)',			'MTEXT_UNI'	=> 'TEXT',			'TIMESTAMP'	=> 'INT4', // unsigned			'DECIMAL'	=> 'decimal(5,2)',			'DECIMAL:'	=> 'decimal(%d,2)',			'PDECIMAL'	=> 'decimal(6,3)',			'PDECIMAL:'	=> 'decimal(%d,3)',			'VCHAR_UNI'	=> 'varchar(255)',			'VCHAR_UNI:'=> 'varchar(%d)',			'VCHAR_CI'	=> 'varchar_ci',			'VARBINARY'	=> 'bytea',		),	);	/**	* A list of types being unsigned for better reference in some db's	* @var array	*/	var $unsigned_types = array('UINT', 'UINT:', 'USINT', 'BOOL', 'TIMESTAMP');	/**	* A list of supported DBMS. We change this class to support more DBMS, the DBMS itself only need to follow some rules.	* @var array	*/	var $supported_dbms = array('firebird', 'mssql', 'mssqlnative', 'mysql_40', 'mysql_41', 'oracle', 'postgres', 'sqlite');	/**	* This is set to true if user only wants to return the 'to-be-executed' SQL statement(s) (as an array).	* This mode has no effect on some methods (inserting of data for example). This is expressed within the methods command.	*/	var $return_statements = false;	/**	* Constructor. Set DB Object and set {@link $return_statements return_statements}.	*	* @param phpbb_dbal	$db					DBAL object	* @param bool		$return_statements	True if only statements should be returned and no SQL being executed	*/	function phpbb_db_tools(&$db, $return_statements = false)	{		$this->db = $db;		$this->return_statements = $return_statements;		// Determine mapping database type		switch ($this->db->sql_layer)		{			case 'mysql':				$this->sql_layer = 'mysql_40';			break;			case 'mysql4':				if (version_compare($this->db->sql_server_info(true), '4.1.3', '>='))				{					$this->sql_layer = 'mysql_41';				}				else				{					$this->sql_layer = 'mysql_40';				}			break;			case 'mysqli':				$this->sql_layer = 'mysql_41';			break;			case 'mssql':			case 'mssql_odbc':				$this->sql_layer = 'mssql';			break;			case 'mssqlnative':				$this->sql_layer = 'mssqlnative';			break;			default:				$this->sql_layer = $this->db->sql_layer;			break;		}	}	/**	* Gets a list of tables in the database.	*	* @return array		Array of table names  (all lower case)	*/	function sql_list_tables()	{		switch ($this->db->sql_layer)		{			case 'mysql':			case 'mysql4':			case 'mysqli':				$sql = 'SHOW TABLES';			break;			case 'sqlite':				$sql = 'SELECT name					FROM sqlite_master					WHERE type = "table"';			break;			case 'mssql':			case 'mssql_odbc':			case 'mssqlnative':				$sql = "SELECT name					FROM sysobjects					WHERE type='U'";			break;			case 'postgres':				$sql = 'SELECT relname					FROM pg_stat_user_tables';			break;			case 'firebird':				$sql = 'SELECT rdb$relation_name					FROM rdb$relations					WHERE rdb$view_source is null						AND rdb$system_flag = 0';			break;			case 'oracle':				$sql = 'SELECT table_name					FROM USER_TABLES';			break;		}		$result = $this->db->sql_query($sql);		$tables = array();		while ($row = $this->db->sql_fetchrow($result))		{			$name = current($row);			$tables[$name] = $name;		}		$this->db->sql_freeresult($result);		return $tables;	}	/**	* Check if table exists	*	*	* @param string	$table_name	The table name to check for	* @return bool true if table exists, else false	*/	function sql_table_exists($table_name)	{		$this->db->sql_return_on_error(true);		$result = $this->db->sql_query_limit('SELECT * FROM ' . $table_name, 1);		$this->db->sql_return_on_error(false);		if ($result)		{			$this->db->sql_freeresult($result);			return true;		}		return false;	}	/**	* Create SQL Table	*	* @param string	$table_name	The table name to create	* @param array	$table_data	Array containing table data.	* @return array	Statements if $return_statements is true.	*/	function sql_create_table($table_name, $table_data)	{		// holds the DDL for a column		$columns = $statements = array();		if ($this->sql_table_exists($table_name))		{			return $this->_sql_run_sql($statements);		}		// Begin transaction		$statements[] = 'begin';		// Determine if we have created a PRIMARY KEY in the earliest		$primary_key_gen = false;		// Determine if the table must be created with TEXTIMAGE		$create_textimage = false;		// Determine if the table requires a sequence		$create_sequence = false;		// Begin table sql statement		switch ($this->sql_layer)		{			case 'mssql':			case 'mssqlnative':				$table_sql = 'CREATE TABLE [' . $table_name . '] (' . "\n";			break;			default:				$table_sql = 'CREATE TABLE ' . $table_name . ' (' . "\n";			break;		}		// Iterate through the columns to create a table		foreach ($table_data['COLUMNS'] as $column_name => $column_data)		{			// here lies an array, filled with information compiled on the column's data			$prepared_column = $this->sql_prepare_column_data($table_name, $column_name, $column_data);			if (isset($prepared_column['auto_increment']) && strlen($column_name) > 26) // "${column_name}_gen"			{				trigger_error("Index name '${column_name}_gen' on table '$table_name' is too long. The maximum auto increment column length is 26 characters.", E_USER_ERROR);			}			// here we add the definition of the new column to the list of columns			switch ($this->sql_layer)			{				case 'mssql':				case 'mssqlnative':					$columns[] = "\t [{$column_name}] " . $prepared_column['column_type_sql_default'];				break;				default:					$columns[] = "\t {$column_name} " . $prepared_column['column_type_sql'];				break;			}			// see if we have found a primary key set due to a column definition if we have found it, we can stop looking			if (!$primary_key_gen)			{				$primary_key_gen = isset($prepared_column['primary_key_set']) && $prepared_column['primary_key_set'];			}			// create textimage DDL based off of the existance of certain column types			if (!$create_textimage)			{				$create_textimage = isset($prepared_column['textimage']) && $prepared_column['textimage'];			}			// create sequence DDL based off of the existance of auto incrementing columns			if (!$create_sequence && isset($prepared_column['auto_increment']) && $prepared_column['auto_increment'])			{				$create_sequence = $column_name;			}		}		// this makes up all the columns in the create table statement		$table_sql .= implode(",\n", $columns);		// Close the table for two DBMS and add to the statements		switch ($this->sql_layer)		{			case 'firebird':				$table_sql .= "\n);";				$statements[] = $table_sql;			break;			case 'mssql':			case 'mssqlnative':				$table_sql .= "\n) ON [PRIMARY]" . (($create_textimage) ? ' TEXTIMAGE_ON [PRIMARY]' : '');				$statements[] = $table_sql;			break;		}		// we have yet to create a primary key for this table,		// this means that we can add the one we really wanted instead		if (!$primary_key_gen)		{			// Write primary key			if (isset($table_data['PRIMARY_KEY']))			{				if (!is_array($table_data['PRIMARY_KEY']))				{					$table_data['PRIMARY_KEY'] = array($table_data['PRIMARY_KEY']);				}				switch ($this->sql_layer)				{					case 'mysql_40':					case 'mysql_41':					case 'postgres':					case 'sqlite':						$table_sql .= ",\n\t PRIMARY KEY (" . implode(', ', $table_data['PRIMARY_KEY']) . ')';					break;					case 'firebird':					case 'mssql':					case 'mssqlnative':						// We need the data here						$old_return_statements = $this->return_statements;						$this->return_statements = true;						$primary_key_stmts = $this->sql_create_primary_key($table_name, $table_data['PRIMARY_KEY']);						foreach ($primary_key_stmts as $pk_stmt)						{							$statements[] = $pk_stmt;						}						$this->return_statements = $old_return_statements;					break;					case 'oracle':						$table_sql .= ",\n\t CONSTRAINT pk_{$table_name} PRIMARY KEY (" . implode(', ', $table_data['PRIMARY_KEY']) . ')';					break;				}			}		}		// close the table		switch ($this->sql_layer)		{			case 'mysql_41':				// make sure the table is in UTF-8 mode				$table_sql .= "\n) CHARACTER SET `utf8` COLLATE `utf8_bin`;";				$statements[] = $table_sql;			break;			case 'mysql_40':			case 'sqlite':				$table_sql .= "\n);";				$statements[] = $table_sql;			break;			case 'postgres':				// do we need to add a sequence for auto incrementing columns?				if ($create_sequence)				{					$statements[] = "CREATE SEQUENCE {$table_name}_seq;";				}				$table_sql .= "\n);";				$statements[] = $table_sql;			break;			case 'oracle':				$table_sql .= "\n)";				$statements[] = $table_sql;				// do we need to add a sequence and a tigger for auto incrementing columns?				if ($create_sequence)				{					// create the actual sequence					$statements[] = "CREATE SEQUENCE {$table_name}_seq";					// the trigger is the mechanism by which we increment the counter					$trigger = "CREATE OR REPLACE TRIGGER t_{$table_name}\n";					$trigger .= "BEFORE INSERT ON {$table_name}\n";					$trigger .= "FOR EACH ROW WHEN (\n";					$trigger .= "\tnew.{$create_sequence} IS NULL OR new.{$create_sequence} = 0\n";					$trigger .= ")\n";					$trigger .= "BEGIN\n";					$trigger .= "\tSELECT {$table_name}_seq.nextval\n";					$trigger .= "\tINTO :new.{$create_sequence}\n";					$trigger .= "\tFROM dual;\n";					$trigger .= "END;";					$statements[] = $trigger;				}			break;			case 'firebird':				if ($create_sequence)				{					$statements[] = "CREATE GENERATOR {$table_name}_gen;";					$statements[] = "SET GENERATOR {$table_name}_gen TO 0;";					$trigger = "CREATE TRIGGER t_$table_name FOR $table_name\n";					$trigger .= "BEFORE INSERT\nAS\nBEGIN\n";					$trigger .= "\tNEW.{$create_sequence} = GEN_ID({$table_name}_gen, 1);\nEND;";					$statements[] = $trigger;				}			break;		}		// Write Keys		if (isset($table_data['KEYS']))		{			foreach ($table_data['KEYS'] as $key_name => $key_data)			{				if (!is_array($key_data[1]))				{					$key_data[1] = array($key_data[1]);				}				$old_return_statements = $this->return_statements;				$this->return_statements = true;				$key_stmts = ($key_data[0] == 'UNIQUE') ? $this->sql_create_unique_index($table_name, $key_name, $key_data[1]) : $this->sql_create_index($table_name, $key_name, $key_data[1]);				foreach ($key_stmts as $key_stmt)				{					$statements[] = $key_stmt;				}				$this->return_statements = $old_return_statements;			}		}		// Commit Transaction		$statements[] = 'commit';		return $this->_sql_run_sql($statements);	}	/**	* Handle passed database update array.	* Expected structure...	* Key being one of the following	*	change_columns: Column changes (only type, not name)	*	add_columns: Add columns to a table	*	drop_keys: Dropping keys	*	drop_columns: Removing/Dropping columns	*	add_primary_keys: adding primary keys	*	add_unique_index: adding an unique index	*	add_index: adding an index (can be column:index_size if you need to provide size)	*	* The values are in this format:	*		{TABLE NAME}		=> array(	*			{COLUMN NAME}		=> array({COLUMN TYPE}, {DEFAULT VALUE}, {OPTIONAL VARIABLES}),	*			{KEY/INDEX NAME}	=> array({COLUMN NAMES}),	*		)	*	* For more information have a look at /develop/create_schema_files.php (only available through SVN)	*/	function perform_schema_changes($schema_changes)	{		if (empty($schema_changes))		{			return;		}		$statements = array();		$sqlite = false;		// For SQLite we need to perform the schema changes in a much more different way		if ($this->db->sql_layer == 'sqlite' && $this->return_statements)		{			$sqlite_data = array();			$sqlite = true;		}		// Drop tables?		if (!empty($schema_changes['drop_tables']))		{			foreach ($schema_changes['drop_tables'] as $table)			{				// only drop table if it exists				if ($this->sql_table_exists($table))				{					$result = $this->sql_table_drop($table);					if ($this->return_statements)					{						$statements = array_merge($statements, $result);					}				}			}		}		// Add tables?		if (!empty($schema_changes['add_tables']))		{			foreach ($schema_changes['add_tables'] as $table => $table_data)			{				$result = $this->sql_create_table($table, $table_data);				if ($this->return_statements)				{					$statements = array_merge($statements, $result);				}			}		}		// Change columns?		if (!empty($schema_changes['change_columns']))		{			foreach ($schema_changes['change_columns'] as $table => $columns)			{				foreach ($columns as $column_name => $column_data)				{					// If the column exists we change it, else we add it ;)					if ($column_exists = $this->sql_column_exists($table, $column_name))					{						$result = $this->sql_column_change($table, $column_name, $column_data, true);					}					else					{						$result = $this->sql_column_add($table, $column_name, $column_data, true);					}					if ($sqlite)					{						if ($column_exists)						{							$sqlite_data[$table]['change_columns'][] = $result;						}						else						{							$sqlite_data[$table]['add_columns'][] = $result;						}					}					else if ($this->return_statements)					{						$statements = array_merge($statements, $result);					}				}			}		}		// Add columns?		if (!empty($schema_changes['add_columns']))		{			foreach ($schema_changes['add_columns'] as $table => $columns)			{				foreach ($columns as $column_name => $column_data)				{					// Only add the column if it does not exist yet					if ($column_exists = $this->sql_column_exists($table, $column_name))					{						continue;						// This is commented out here because it can take tremendous time on updates//						$result = $this->sql_column_change($table, $column_name, $column_data, true);					}					else					{						$result = $this->sql_column_add($table, $column_name, $column_data, true);					}					if ($sqlite)					{						if ($column_exists)						{							continue;//							$sqlite_data[$table]['change_columns'][] = $result;						}						else						{							$sqlite_data[$table]['add_columns'][] = $result;						}					}					else if ($this->return_statements)					{						$statements = array_merge($statements, $result);					}				}			}		}		// Remove keys?		if (!empty($schema_changes['drop_keys']))		{			foreach ($schema_changes['drop_keys'] as $table => $indexes)			{				foreach ($indexes as $index_name)				{					if (!$this->sql_index_exists($table, $index_name))					{						continue;					}					$result = $this->sql_index_drop($table, $index_name);					if ($this->return_statements)					{						$statements = array_merge($statements, $result);					}				}			}		}		// Drop columns?		if (!empty($schema_changes['drop_columns']))		{			foreach ($schema_changes['drop_columns'] as $table => $columns)			{				foreach ($columns as $column)				{					// Only remove the column if it exists...					if ($this->sql_column_exists($table, $column))					{						$result = $this->sql_column_remove($table, $column, true);						if ($sqlite)						{							$sqlite_data[$table]['drop_columns'][] = $result;						}						else if ($this->return_statements)						{							$statements = array_merge($statements, $result);						}					}				}			}		}		// Add primary keys?		if (!empty($schema_changes['add_primary_keys']))		{			foreach ($schema_changes['add_primary_keys'] as $table => $columns)			{				$result = $this->sql_create_primary_key($table, $columns, true);				if ($sqlite)				{					$sqlite_data[$table]['primary_key'] = $result;				}				else if ($this->return_statements)				{					$statements = array_merge($statements, $result);				}			}		}		// Add unqiue indexes?		if (!empty($schema_changes['add_unique_index']))		{			foreach ($schema_changes['add_unique_index'] as $table => $index_array)			{				foreach ($index_array as $index_name => $column)				{					if ($this->sql_unique_index_exists($table, $index_name))					{						continue;					}					$result = $this->sql_create_unique_index($table, $index_name, $column);					if ($this->return_statements)					{						$statements = array_merge($statements, $result);					}				}			}		}		// Add indexes?		if (!empty($schema_changes['add_index']))		{			foreach ($schema_changes['add_index'] as $table => $index_array)			{				foreach ($index_array as $index_name => $column)				{					if ($this->sql_index_exists($table, $index_name))					{						continue;					}					$result = $this->sql_create_index($table, $index_name, $column);					if ($this->return_statements)					{						$statements = array_merge($statements, $result);					}				}			}		}		if ($sqlite)		{			foreach ($sqlite_data as $table_name => $sql_schema_changes)			{				// Create temporary table with original data				$statements[] = 'begin';				$sql = "SELECT sql					FROM sqlite_master					WHERE type = 'table'						AND name = '{$table_name}'					ORDER BY type DESC, name;";				$result = $this->db->sql_query($sql);				if (!$result)				{					continue;				}				$row = $this->db->sql_fetchrow($result);				$this->db->sql_freeresult($result);				// Create a backup table and populate it, destroy the existing one				$statements[] = preg_replace('#CREATE\s+TABLE\s+"?' . $table_name . '"?#i', 'CREATE TEMPORARY TABLE ' . $table_name . '_temp', $row['sql']);				$statements[] = 'INSERT INTO ' . $table_name . '_temp SELECT * FROM ' . $table_name;				$statements[] = 'DROP TABLE ' . $table_name;				// Get the columns...				preg_match('#\((.*)\)#s', $row['sql'], $matches);				$plain_table_cols = trim($matches[1]);				$new_table_cols = preg_split('/,(?![\s\w]+\))/m', $plain_table_cols);				$column_list = array();				foreach ($new_table_cols as $declaration)				{					$entities = preg_split('#\s+#', trim($declaration));					if ($entities[0] == 'PRIMARY')					{						continue;					}					$column_list[] = $entities[0];				}				// note down the primary key notation because sqlite only supports adding it to the end for the new table				$primary_key = false;				$_new_cols = array();				foreach ($new_table_cols as $key => $declaration)				{					$entities = preg_split('#\s+#', trim($declaration));					if ($entities[0] == 'PRIMARY')					{						$primary_key = $declaration;						continue;					}					$_new_cols[] = $declaration;				}				$new_table_cols = $_new_cols;				// First of all... change columns				if (!empty($sql_schema_changes['change_columns']))				{					foreach ($sql_schema_changes['change_columns'] as $column_sql)					{						foreach ($new_table_cols as $key => $declaration)						{							$entities = preg_split('#\s+#', trim($declaration));							if (strpos($column_sql, $entities[0] . ' ') === 0)							{								$new_table_cols[$key] = $column_sql;							}						}					}				}				if (!empty($sql_schema_changes['add_columns']))				{					foreach ($sql_schema_changes['add_columns'] as $column_sql)					{						$new_table_cols[] = $column_sql;					}				}				// Now drop them...				if (!empty($sql_schema_changes['drop_columns']))				{					foreach ($sql_schema_changes['drop_columns'] as $column_name)					{						// Remove from column list...						$new_column_list = array();						foreach ($column_list as $key => $value)						{							if ($value === $column_name)							{								continue;							}							$new_column_list[] = $value;						}						$column_list = $new_column_list;						// Remove from table...						$_new_cols = array();						foreach ($new_table_cols as $key => $declaration)						{							$entities = preg_split('#\s+#', trim($declaration));							if (strpos($column_name . ' ', $entities[0] . ' ') === 0)							{								continue;							}							$_new_cols[] = $declaration;						}						$new_table_cols = $_new_cols;					}				}				// Primary key...				if (!empty($sql_schema_changes['primary_key']))				{					$new_table_cols[] = 'PRIMARY KEY (' . implode(', ', $sql_schema_changes['primary_key']) . ')';				}				// Add a new one or the old primary key				else if ($primary_key !== false)				{					$new_table_cols[] = $primary_key;				}				$columns = implode(',', $column_list);				// create a new table and fill it up. destroy the temp one				$statements[] = 'CREATE TABLE ' . $table_name . ' (' . implode(',', $new_table_cols) . ');';				$statements[] = 'INSERT INTO ' . $table_name . ' (' . $columns . ') SELECT ' . $columns . ' FROM ' . $table_name . '_temp;';				$statements[] = 'DROP TABLE ' . $table_name . '_temp';				$statements[] = 'commit';			}		}		if ($this->return_statements)		{			return $statements;		}	}	/**	* Gets a list of columns of a table.	*	* @param string $table		Table name	*	* @return array				Array of column names (all lower case)	*/	function sql_list_columns($table)	{		$columns = array();		switch ($this->sql_layer)		{			case 'mysql_40':			case 'mysql_41':				$sql = "SHOW COLUMNS FROM $table";			break;			// PostgreSQL has a way of doing this in a much simpler way but would			// not allow us to support all versions of PostgreSQL			case 'postgres':				$sql = "SELECT a.attname					FROM pg_class c, pg_attribute a					WHERE c.relname = '{$table}'						AND a.attnum > 0						AND a.attrelid = c.oid";			break;			// same deal with PostgreSQL, we must perform more complex operations than			// we technically could			case 'mssql':			case 'mssqlnative':				$sql = "SELECT c.name					FROM syscolumns c					LEFT JOIN sysobjects o ON c.id = o.id					WHERE o.name = '{$table}'";			break;			case 'oracle':				$sql = "SELECT column_name					FROM user_tab_columns					WHERE LOWER(table_name) = '" . strtolower($table) . "'";			break;			case 'firebird':				$sql = "SELECT RDB\$FIELD_NAME as FNAME					FROM RDB\$RELATION_FIELDS					WHERE RDB\$RELATION_NAME = '" . strtoupper($table) . "'";			break;			case 'sqlite':				$sql = "SELECT sql					FROM sqlite_master					WHERE type = 'table'						AND name = '{$table}'";				$result = $this->db->sql_query($sql);				if (!$result)				{					return false;				}				$row = $this->db->sql_fetchrow($result);				$this->db->sql_freeresult($result);				preg_match('#\((.*)\)#s', $row['sql'], $matches);				$cols = trim($matches[1]);				$col_array = preg_split('/,(?![\s\w]+\))/m', $cols);				foreach ($col_array as $declaration)				{					$entities = preg_split('#\s+#', trim($declaration));					if ($entities[0] == 'PRIMARY')					{						continue;					}					$column = strtolower($entities[0]);					$columns[$column] = $column;				}				return $columns;			break;		}		$result = $this->db->sql_query($sql);		while ($row = $this->db->sql_fetchrow($result))		{			$column = strtolower(current($row));			$columns[$column] = $column;		}		$this->db->sql_freeresult($result);		return $columns;	}	/**	* Check whether a specified column exist in a table	*	* @param string	$table			Table to check	* @param string	$column_name	Column to check	*	* @return bool		True if column exists, false otherwise	*/	function sql_column_exists($table, $column_name)	{		$columns = $this->sql_list_columns($table);		return isset($columns[$column_name]);	}	/**	* Check if a specified index exists in table. Does not return PRIMARY KEY and UNIQUE indexes.	*	* @param string	$table_name		Table to check the index at	* @param string	$index_name		The index name to check	*	* @return bool True if index exists, else false	*/	function sql_index_exists($table_name, $index_name)	{		if ($this->sql_layer == 'mssql' || $this->sql_layer == 'mssqlnative')		{			$sql = "EXEC sp_statistics '$table_name'";			$result = $this->db->sql_query($sql);			while ($row = $this->db->sql_fetchrow($result))			{				if ($row['TYPE'] == 3)				{					if (strtolower($row['INDEX_NAME']) == strtolower($index_name))					{						$this->db->sql_freeresult($result);						return true;					}				}			}			$this->db->sql_freeresult($result);			return false;		}		switch ($this->sql_layer)		{			case 'firebird':				$sql = "SELECT LOWER(RDB\$INDEX_NAME) as index_name					FROM RDB\$INDICES					WHERE RDB\$RELATION_NAME = '" . strtoupper($table_name) . "'						AND RDB\$UNIQUE_FLAG IS NULL						AND RDB\$FOREIGN_KEY IS NULL";				$col = 'index_name';			break;			case 'postgres':				$sql = "SELECT ic.relname as index_name					FROM pg_class bc, pg_class ic, pg_index i					WHERE (bc.oid = i.indrelid)						AND (ic.oid = i.indexrelid)						AND (bc.relname = '" . $table_name . "')						AND (i.indisunique != 't')						AND (i.indisprimary != 't')";				$col = 'index_name';			break;			case 'mysql_40':			case 'mysql_41':				$sql = 'SHOW KEYS					FROM ' . $table_name;				$col = 'Key_name';			break;			case 'oracle':				$sql = "SELECT index_name					FROM user_indexes					WHERE table_name = '" . strtoupper($table_name) . "'						AND generated = 'N'						AND uniqueness = 'NONUNIQUE'";				$col = 'index_name';			break;			case 'sqlite':				$sql = "PRAGMA index_list('" . $table_name . "');";				$col = 'name';			break;		}		$result = $this->db->sql_query($sql);		while ($row = $this->db->sql_fetchrow($result))		{			if (($this->sql_layer == 'mysql_40' || $this->sql_layer == 'mysql_41') && !$row['Non_unique'])			{				continue;			}			// These DBMS prefix index name with the table name			switch ($this->sql_layer)			{				case 'firebird':				case 'oracle':				case 'postgres':				case 'sqlite':					$row[$col] = substr($row[$col], strlen($table_name) + 1);				break;			}			if (strtolower($row[$col]) == strtolower($index_name))			{				$this->db->sql_freeresult($result);				return true;			}		}		$this->db->sql_freeresult($result);		return false;	}	/**	* Check if a specified index exists in table. Does not return PRIMARY KEY and UNIQUE indexes.	*	* @param string	$table_name		Table to check the index at	* @param string	$index_name		The index name to check	*	* @return bool True if index exists, else false	*/	function sql_unique_index_exists($table_name, $index_name)	{		if ($this->sql_layer == 'mssql' || $this->sql_layer == 'mssqlnative')		{			$sql = "EXEC sp_statistics '$table_name'";			$result = $this->db->sql_query($sql);			while ($row = $this->db->sql_fetchrow($result))			{				// Usually NON_UNIQUE is the column we want to check, but we allow for both				if ($row['TYPE'] == 3)				{					if (strtolower($row['INDEX_NAME']) == strtolower($index_name))					{						$this->db->sql_freeresult($result);						return true;					}				}			}			$this->db->sql_freeresult($result);			return false;		}		switch ($this->sql_layer)		{			case 'firebird':				$sql = "SELECT LOWER(RDB\$INDEX_NAME) as index_name					FROM RDB\$INDICES					WHERE RDB\$RELATION_NAME = '" . strtoupper($table_name) . "'						AND RDB\$UNIQUE_FLAG IS NOT NULL						AND RDB\$FOREIGN_KEY IS NULL";				$col = 'index_name';			break;			case 'postgres':				$sql = "SELECT ic.relname as index_name, i.indisunique					FROM pg_class bc, pg_class ic, pg_index i					WHERE (bc.oid = i.indrelid)						AND (ic.oid = i.indexrelid)						AND (bc.relname = '" . $table_name . "')						AND (i.indisprimary != 't')";				$col = 'index_name';			break;			case 'mysql_40':			case 'mysql_41':				$sql = 'SHOW KEYS					FROM ' . $table_name;				$col = 'Key_name';			break;			case 'oracle':				$sql = "SELECT index_name, table_owner					FROM user_indexes					WHERE table_name = '" . strtoupper($table_name) . "'						AND generated = 'N'						AND uniqueness = 'UNIQUE'";				$col = 'index_name';			break;			case 'sqlite':				$sql = "PRAGMA index_list('" . $table_name . "');";				$col = 'name';			break;		}		$result = $this->db->sql_query($sql);		while ($row = $this->db->sql_fetchrow($result))		{			if (($this->sql_layer == 'mysql_40' || $this->sql_layer == 'mysql_41') && ($row['Non_unique'] || $row[$col] == 'PRIMARY'))			{				continue;			}			if ($this->sql_layer == 'sqlite' && !$row['unique'])			{				continue;			}			if ($this->sql_layer == 'postgres' && $row['indisunique'] != 't')			{				continue;			}			// These DBMS prefix index name with the table name			switch ($this->sql_layer)			{				case 'oracle':					// Two cases here... prefixed with U_[table_owner] and not prefixed with table_name					if (strpos($row[$col], 'U_') === 0)					{						$row[$col] = substr($row[$col], strlen('U_' . $row['table_owner']) + 1);					}					else if (strpos($row[$col], strtoupper($table_name)) === 0)					{						$row[$col] = substr($row[$col], strlen($table_name) + 1);					}				break;				case 'firebird':				case 'postgres':				case 'sqlite':					$row[$col] = substr($row[$col], strlen($table_name) + 1);				break;			}			if (strtolower($row[$col]) == strtolower($index_name))			{				$this->db->sql_freeresult($result);				return true;			}		}		$this->db->sql_freeresult($result);		return false;	}	/**	* Private method for performing sql statements (either execute them or return them)	* @access private	*/	function _sql_run_sql($statements)	{		if ($this->return_statements)		{			return $statements;		}		// We could add error handling here...		foreach ($statements as $sql)		{			if ($sql === 'begin')			{				$this->db->sql_transaction('begin');			}			else if ($sql === 'commit')			{				$this->db->sql_transaction('commit');			}			else			{				$this->db->sql_query($sql);			}		}		return true;	}	/**	* Function to prepare some column information for better usage	* @access private	*/	function sql_prepare_column_data($table_name, $column_name, $column_data)	{		if (strlen($column_name) > 30)		{			trigger_error("Column name '$column_name' on table '$table_name' is too long. The maximum is 30 characters.", E_USER_ERROR);		}		// Get type		if (strpos($column_data[0], ':') !== false)		{			list($orig_column_type, $column_length) = explode(':', $column_data[0]);			if (!is_array($this->dbms_type_map[$this->sql_layer][$orig_column_type . ':']))			{				$column_type = sprintf($this->dbms_type_map[$this->sql_layer][$orig_column_type . ':'], $column_length);			}			else			{				if (isset($this->dbms_type_map[$this->sql_layer][$orig_column_type . ':']['rule']))				{					switch ($this->dbms_type_map[$this->sql_layer][$orig_column_type . ':']['rule'][0])					{						case 'div':							$column_length /= $this->dbms_type_map[$this->sql_layer][$orig_column_type . ':']['rule'][1];							$column_length = ceil($column_length);							$column_type = sprintf($this->dbms_type_map[$this->sql_layer][$orig_column_type . ':'][0], $column_length);						break;					}				}				if (isset($this->dbms_type_map[$this->sql_layer][$orig_column_type . ':']['limit']))				{					switch ($this->dbms_type_map[$this->sql_layer][$orig_column_type . ':']['limit'][0])					{						case 'mult':							$column_length *= $this->dbms_type_map[$this->sql_layer][$orig_column_type . ':']['limit'][1];							if ($column_length > $this->dbms_type_map[$this->sql_layer][$orig_column_type . ':']['limit'][2])							{								$column_type = $this->dbms_type_map[$this->sql_layer][$orig_column_type . ':']['limit'][3];							}							else							{								$column_type = sprintf($this->dbms_type_map[$this->sql_layer][$orig_column_type . ':'][0], $column_length);							}						break;					}				}			}			$orig_column_type .= ':';		}		else		{			$orig_column_type = $column_data[0];			$column_type = $this->dbms_type_map[$this->sql_layer][$column_data[0]];		}		// Adjust default value if db-dependant specified		if (is_array($column_data[1]))		{			$column_data[1] = (isset($column_data[1][$this->sql_layer])) ? $column_data[1][$this->sql_layer] : $column_data[1]['default'];		}		$sql = '';		$return_array = array();		switch ($this->sql_layer)		{			case 'firebird':				$sql .= " {$column_type} ";				$return_array['column_type_sql_type'] = " {$column_type} ";				if (!is_null($column_data[1]))				{					$sql .= 'DEFAULT ' . ((is_numeric($column_data[1])) ? $column_data[1] : "'{$column_data[1]}'") . ' ';					$return_array['column_type_sql_default'] = ((is_numeric($column_data[1])) ? $column_data[1] : "'{$column_data[1]}'") . ' ';				}				$sql .= 'NOT NULL';				// This is a UNICODE column and thus should be given it's fair share				if (preg_match('/^X?STEXT_UNI|VCHAR_(CI|UNI:?)/', $column_data[0]))				{					$sql .= ' COLLATE UNICODE';				}				$return_array['auto_increment'] = false;				if (isset($column_data[2]) && $column_data[2] == 'auto_increment')				{					$return_array['auto_increment'] = true;				}			break;			case 'mssql':			case 'mssqlnative':				$sql .= " {$column_type} ";				$sql_default = " {$column_type} ";				// For adding columns we need the default definition				if (!is_null($column_data[1]))				{					// For hexadecimal values do not use single quotes					if (strpos($column_data[1], '0x') === 0)					{						$return_array['default'] = 'DEFAULT (' . $column_data[1] . ') ';						$sql_default .= $return_array['default'];					}					else					{						$return_array['default'] = 'DEFAULT (' . ((is_numeric($column_data[1])) ? $column_data[1] : "'{$column_data[1]}'") . ') ';						$sql_default .= $return_array['default'];					}				}				if (isset($column_data[2]) && $column_data[2] == 'auto_increment')				{//					$sql .= 'IDENTITY (1, 1) ';					$sql_default .= 'IDENTITY (1, 1) ';				}				$return_array['textimage'] = $column_type === '[text]';				$sql .= 'NOT NULL';				$sql_default .= 'NOT NULL';				$return_array['column_type_sql_default'] = $sql_default;			break;			case 'mysql_40':			case 'mysql_41':				$sql .= " {$column_type} ";				// For hexadecimal values do not use single quotes				if (!is_null($column_data[1]) && substr($column_type, -4) !== 'text' && substr($column_type, -4) !== 'blob')				{					$sql .= (strpos($column_data[1], '0x') === 0) ? "DEFAULT {$column_data[1]} " : "DEFAULT '{$column_data[1]}' ";				}				$sql .= 'NOT NULL';				if (isset($column_data[2]))				{					if ($column_data[2] == 'auto_increment')					{						$sql .= ' auto_increment';					}					else if ($this->sql_layer === 'mysql_41' && $column_data[2] == 'true_sort')					{						$sql .= ' COLLATE utf8_unicode_ci';					}				}			break;			case 'oracle':				$sql .= " {$column_type} ";				$sql .= (!is_null($column_data[1])) ? "DEFAULT '{$column_data[1]}' " : '';				// In Oracle empty strings ('') are treated as NULL.				// Therefore in oracle we allow NULL's for all DEFAULT '' entries				// Oracle does not like setting NOT NULL on a column that is already NOT NULL (this happens only on number fields)				if (!preg_match('/number/i', $column_type))				{					$sql .= ($column_data[1] === '') ? '' : 'NOT NULL';				}				$return_array['auto_increment'] = false;				if (isset($column_data[2]) && $column_data[2] == 'auto_increment')				{					$return_array['auto_increment'] = true;				}			break;			case 'postgres':				$return_array['column_type'] = $column_type;				$sql .= " {$column_type} ";				$return_array['auto_increment'] = false;				if (isset($column_data[2]) && $column_data[2] == 'auto_increment')				{					$default_val = "nextval('{$table_name}_seq')";					$return_array['auto_increment'] = true;				}				else if (!is_null($column_data[1]))				{					$default_val = "'" . $column_data[1] . "'";					$return_array['null'] = 'NOT NULL';					$sql .= 'NOT NULL ';				}				$return_array['default'] = $default_val;				$sql .= "DEFAULT {$default_val}";				// Unsigned? Then add a CHECK contraint				if (in_array($orig_column_type, $this->unsigned_types))				{					$return_array['constraint'] = "CHECK ({$column_name} >= 0)";					$sql .= " CHECK ({$column_name} >= 0)";				}			break;			case 'sqlite':				$return_array['primary_key_set'] = false;				if (isset($column_data[2]) && $column_data[2] == 'auto_increment')				{					$sql .= ' INTEGER PRIMARY KEY';					$return_array['primary_key_set'] = true;				}				else				{					$sql .= ' ' . $column_type;				}				$sql .= ' NOT NULL ';				$sql .= (!is_null($column_data[1])) ? "DEFAULT '{$column_data[1]}'" : '';			break;		}		$return_array['column_type_sql'] = $sql;		return $return_array;	}	/**	* Add new column	*/	function sql_column_add($table_name, $column_name, $column_data, $inline = false)	{		$column_data = $this->sql_prepare_column_data($table_name, $column_name, $column_data);		$statements = array();		switch ($this->sql_layer)		{			case 'firebird':				// Does not support AFTER statement, only POSITION (and there you need the column position)				$statements[] = 'ALTER TABLE ' . $table_name . ' ADD "' . strtoupper($column_name) . '" ' . $column_data['column_type_sql'];			break;			case 'mssql':			case 'mssqlnative':				// Does not support AFTER, only through temporary table				$statements[] = 'ALTER TABLE [' . $table_name . '] ADD [' . $column_name . '] ' . $column_data['column_type_sql_default'];			break;			case 'mysql_40':			case 'mysql_41':				$after = (!empty($column_data['after'])) ? ' AFTER ' . $column_data['after'] : '';				$statements[] = 'ALTER TABLE `' . $table_name . '` ADD COLUMN `' . $column_name . '` ' . $column_data['column_type_sql'] . $after;			break;			case 'oracle':				// Does not support AFTER, only through temporary table				$statements[] = 'ALTER TABLE ' . $table_name . ' ADD ' . $column_name . ' ' . $column_data['column_type_sql'];			break;			case 'postgres':				// Does not support AFTER, only through temporary table				if (version_compare($this->db->sql_server_info(true), '8.0', '>='))				{					$statements[] = 'ALTER TABLE ' . $table_name . ' ADD COLUMN "' . $column_name . '" ' . $column_data['column_type_sql'];				}				else				{					// old versions cannot add columns with default and null information					$statements[] = 'ALTER TABLE ' . $table_name . ' ADD COLUMN "' . $column_name . '" ' . $column_data['column_type'] . ' ' . $column_data['constraint'];					if (isset($column_data['null']))					{						if ($column_data['null'] == 'NOT NULL')						{							$statements[] = 'ALTER TABLE ' . $table_name . ' ALTER COLUMN ' . $column_name . ' SET NOT NULL';						}					}					if (isset($column_data['default']))					{						$statements[] = 'ALTER TABLE ' . $table_name . ' ALTER COLUMN ' . $column_name . ' SET DEFAULT ' . $column_data['default'];					}				}			break;			case 'sqlite':				if ($inline && $this->return_statements)				{					return $column_name . ' ' . $column_data['column_type_sql'];				}				if (version_compare(sqlite_libversion(), '3.0') == -1)				{					$sql = "SELECT sql						FROM sqlite_master						WHERE type = 'table'							AND name = '{$table_name}'						ORDER BY type DESC, name;";					$result = $this->db->sql_query($sql);					if (!$result)					{						break;					}					$row = $this->db->sql_fetchrow($result);					$this->db->sql_freeresult($result);					$statements[] = 'begin';					// Create a backup table and populate it, destroy the existing one					$statements[] = preg_replace('#CREATE\s+TABLE\s+"?' . $table_name . '"?#i', 'CREATE TEMPORARY TABLE ' . $table_name . '_temp', $row['sql']);					$statements[] = 'INSERT INTO ' . $table_name . '_temp SELECT * FROM ' . $table_name;					$statements[] = 'DROP TABLE ' . $table_name;					preg_match('#\((.*)\)#s', $row['sql'], $matches);					$new_table_cols = trim($matches[1]);					$old_table_cols = preg_split('/,(?![\s\w]+\))/m', $new_table_cols);					$column_list = array();					foreach ($old_table_cols as $declaration)					{						$entities = preg_split('#\s+#', trim($declaration));						if ($entities[0] == 'PRIMARY')						{							continue;						}						$column_list[] = $entities[0];					}					$columns = implode(',', $column_list);					$new_table_cols = $column_name . ' ' . $column_data['column_type_sql'] . ',' . $new_table_cols;					// create a new table and fill it up. destroy the temp one					$statements[] = 'CREATE TABLE ' . $table_name . ' (' . $new_table_cols . ');';					$statements[] = 'INSERT INTO ' . $table_name . ' (' . $columns . ') SELECT ' . $columns . ' FROM ' . $table_name . '_temp;';					$statements[] = 'DROP TABLE ' . $table_name . '_temp';					$statements[] = 'commit';				}				else				{					$statements[] = 'ALTER TABLE ' . $table_name . ' ADD ' . $column_name . ' [' . $column_data['column_type_sql'] . ']';				}			break;		}		return $this->_sql_run_sql($statements);	}	/**	* Drop column	*/	function sql_column_remove($table_name, $column_name, $inline = false)	{		$statements = array();		switch ($this->sql_layer)		{			case 'firebird':				$statements[] = 'ALTER TABLE ' . $table_name . ' DROP "' . strtoupper($column_name) . '"';			break;			case 'mssql':			case 'mssqlnative':				$statements[] = 'ALTER TABLE [' . $table_name . '] DROP COLUMN [' . $column_name . ']';			break;			case 'mysql_40':			case 'mysql_41':				$statements[] = 'ALTER TABLE `' . $table_name . '` DROP COLUMN `' . $column_name . '`';			break;			case 'oracle':				$statements[] = 'ALTER TABLE ' . $table_name . ' DROP COLUMN ' . $column_name;			break;			case 'postgres':				$statements[] = 'ALTER TABLE ' . $table_name . ' DROP COLUMN "' . $column_name . '"';			break;			case 'sqlite':				if ($inline && $this->return_statements)				{					return $column_name;				}				if (version_compare(sqlite_libversion(), '3.0') == -1)				{					$sql = "SELECT sql						FROM sqlite_master						WHERE type = 'table'							AND name = '{$table_name}'						ORDER BY type DESC, name;";					$result = $this->db->sql_query($sql);					if (!$result)					{						break;					}					$row = $this->db->sql_fetchrow($result);					$this->db->sql_freeresult($result);					$statements[] = 'begin';					// Create a backup table and populate it, destroy the existing one					$statements[] = preg_replace('#CREATE\s+TABLE\s+"?' . $table_name . '"?#i', 'CREATE TEMPORARY TABLE ' . $table_name . '_temp', $row['sql']);					$statements[] = 'INSERT INTO ' . $table_name . '_temp SELECT * FROM ' . $table_name;					$statements[] = 'DROP TABLE ' . $table_name;					preg_match('#\((.*)\)#s', $row['sql'], $matches);					$new_table_cols = trim($matches[1]);					$old_table_cols = preg_split('/,(?![\s\w]+\))/m', $new_table_cols);					$column_list = array();					foreach ($old_table_cols as $declaration)					{						$entities = preg_split('#\s+#', trim($declaration));						if ($entities[0] == 'PRIMARY' || $entities[0] === $column_name)						{							continue;						}						$column_list[] = $entities[0];					}					$columns = implode(',', $column_list);					$new_table_cols = preg_replace('/' . $column_name . '[^,]+(?:,|$)/m', '', $new_table_cols);					// create a new table and fill it up. destroy the temp one					$statements[] = 'CREATE TABLE ' . $table_name . ' (' . $new_table_cols . ');';					$statements[] = 'INSERT INTO ' . $table_name . ' (' . $columns . ') SELECT ' . $columns . ' FROM ' . $table_name . '_temp;';					$statements[] = 'DROP TABLE ' . $table_name . '_temp';					$statements[] = 'commit';				}				else				{					$statements[] = 'ALTER TABLE ' . $table_name . ' DROP COLUMN ' . $column_name;				}			break;		}		return $this->_sql_run_sql($statements);	}	/**	* Drop Index	*/	function sql_index_drop($table_name, $index_name)	{		$statements = array();		switch ($this->sql_layer)		{			case 'mssql':			case 'mssqlnative':				$statements[] = 'DROP INDEX ' . $table_name . '.' . $index_name;			break;			case 'mysql_40':			case 'mysql_41':				$statements[] = 'DROP INDEX ' . $index_name . ' ON ' . $table_name;			break;			case 'firebird':			case 'oracle':			case 'postgres':			case 'sqlite':				$statements[] = 'DROP INDEX ' . $table_name . '_' . $index_name;			break;		}		return $this->_sql_run_sql($statements);	}	/**	* Drop Table	*/	function sql_table_drop($table_name)	{		$statements = array();		if (!$this->sql_table_exists($table_name))		{			return $this->_sql_run_sql($statements);		}		// the most basic operation, get rid of the table		$statements[] = 'DROP TABLE ' . $table_name;		switch ($this->sql_layer)		{			case 'firebird':				$sql = 'SELECT RDB$GENERATOR_NAME as gen					FROM RDB$GENERATORS					WHERE RDB$SYSTEM_FLAG = 0						AND RDB$GENERATOR_NAME = \'' . strtoupper($table_name) . "_GEN'";				$result = $this->db->sql_query($sql);				// does a generator exist?				if ($row = $this->db->sql_fetchrow($result))				{					$statements[] = "DROP GENERATOR {$row['gen']};";				}				$this->db->sql_freeresult($result);			break;			case 'oracle':				$sql = 'SELECT A.REFERENCED_NAME					FROM USER_DEPENDENCIES A, USER_TRIGGERS B					WHERE A.REFERENCED_TYPE = \'SEQUENCE\'						AND A.NAME = B.TRIGGER_NAME						AND B.TABLE_NAME = \'' . strtoupper($table_name) . "'";				$result = $this->db->sql_query($sql);				// any sequences ref'd to this table's triggers?				while ($row = $this->db->sql_fetchrow($result))				{					$statements[] = "DROP SEQUENCE {$row['referenced_name']}";				}				$this->db->sql_freeresult($result);			break;			case 'postgres':				// PGSQL does not "tightly" bind sequences and tables, we must guess...				$sql = "SELECT relname					FROM pg_class					WHERE relkind = 'S'						AND relname = '{$table_name}_seq'";				$result = $this->db->sql_query($sql);				// We don't even care about storing the results. We already know the answer if we get rows back.				if ($this->db->sql_fetchrow($result))				{					$statements[] =  "DROP SEQUENCE {$table_name}_seq;\n";				}				$this->db->sql_freeresult($result);			break;		}		return $this->_sql_run_sql($statements);	}	/**	* Add primary key	*/	function sql_create_primary_key($table_name, $column, $inline = false)	{		$statements = array();		switch ($this->sql_layer)		{			case 'firebird':			case 'postgres':			case 'mysql_40':			case 'mysql_41':				$statements[] = 'ALTER TABLE ' . $table_name . ' ADD PRIMARY KEY (' . implode(', ', $column) . ')';			break;			case 'mssql':			case 'mssqlnative':				$sql = "ALTER TABLE [{$table_name}] WITH NOCHECK ADD ";				$sql .= "CONSTRAINT [PK_{$table_name}] PRIMARY KEY  CLUSTERED (";				$sql .= '[' . implode("],\n\t\t[", $column) . ']';				$sql .= ') ON [PRIMARY]';				$statements[] = $sql;			break;			case 'oracle':				$statements[] = 'ALTER TABLE ' . $table_name . 'add CONSTRAINT pk_' . $table_name . ' PRIMARY KEY (' . implode(', ', $column) . ')';			break;			case 'sqlite':				if ($inline && $this->return_statements)				{					return $column;				}				$sql = "SELECT sql					FROM sqlite_master					WHERE type = 'table'						AND name = '{$table_name}'					ORDER BY type DESC, name;";				$result = $this->db->sql_query($sql);				if (!$result)				{					break;				}				$row = $this->db->sql_fetchrow($result);				$this->db->sql_freeresult($result);				$statements[] = 'begin';				// Create a backup table and populate it, destroy the existing one				$statements[] = preg_replace('#CREATE\s+TABLE\s+"?' . $table_name . '"?#i', 'CREATE TEMPORARY TABLE ' . $table_name . '_temp', $row['sql']);				$statements[] = 'INSERT INTO ' . $table_name . '_temp SELECT * FROM ' . $table_name;				$statements[] = 'DROP TABLE ' . $table_name;				preg_match('#\((.*)\)#s', $row['sql'], $matches);				$new_table_cols = trim($matches[1]);				$old_table_cols = preg_split('/,(?![\s\w]+\))/m', $new_table_cols);				$column_list = array();				foreach ($old_table_cols as $declaration)				{					$entities = preg_split('#\s+#', trim($declaration));					if ($entities[0] == 'PRIMARY')					{						continue;					}					$column_list[] = $entities[0];				}				$columns = implode(',', $column_list);				// create a new table and fill it up. destroy the temp one				$statements[] = 'CREATE TABLE ' . $table_name . ' (' . $new_table_cols . ', PRIMARY KEY (' . implode(', ', $column) . '));';				$statements[] = 'INSERT INTO ' . $table_name . ' (' . $columns . ') SELECT ' . $columns . ' FROM ' . $table_name . '_temp;';				$statements[] = 'DROP TABLE ' . $table_name . '_temp';				$statements[] = 'commit';			break;		}		return $this->_sql_run_sql($statements);	}	/**	* Add unique index	*/	function sql_create_unique_index($table_name, $index_name, $column)	{		$statements = array();		$table_prefix = substr(CONFIG_TABLE, 0, -6); // strlen(config)		if (strlen($table_name . $index_name) - strlen($table_prefix) > 24)		{			$max_length = strlen($table_prefix) + 24;			trigger_error("Index name '{$table_name}_$index_name' on table '$table_name' is too long. The maximum is $max_length characters.", E_USER_ERROR);		}		switch ($this->sql_layer)		{			case 'firebird':			case 'postgres':			case 'oracle':			case 'sqlite':				$statements[] = 'CREATE UNIQUE INDEX ' . $table_name . '_' . $index_name . ' ON ' . $table_name . '(' . implode(', ', $column) . ')';			break;			case 'mysql_40':			case 'mysql_41':				$statements[] = 'ALTER TABLE ' . $table_name . ' ADD UNIQUE INDEX (' . implode(', ', $column) . ')';			break;			case 'mssql':			case 'mssqlnative':				$statements[] = 'CREATE UNIQUE INDEX ' . $index_name . ' ON ' . $table_name . '(' . implode(', ', $column) . ') ON [PRIMARY]';			break;		}		return $this->_sql_run_sql($statements);	}	/**	* Add index	*/	function sql_create_index($table_name, $index_name, $column)	{		$statements = array();		$table_prefix = substr(CONFIG_TABLE, 0, -6); // strlen(config)		if (strlen($table_name . $index_name) - strlen($table_prefix) > 24)		{			$max_length = strlen($table_prefix) + 24;			trigger_error("Index name '{$table_name}_$index_name' on table '$table_name' is too long. The maximum is $max_length characters.", E_USER_ERROR);		}		// remove index length unless MySQL4		if ('mysql_40' != $this->sql_layer)		{			$column = preg_replace('#:.*$#', '', $column);		}		switch ($this->sql_layer)		{			case 'firebird':			case 'postgres':			case 'oracle':			case 'sqlite':				$statements[] = 'CREATE INDEX ' . $table_name . '_' . $index_name . ' ON ' . $table_name . '(' . implode(', ', $column) . ')';			break;			case 'mysql_40':				// add index size to definition as required by MySQL4				foreach ($column as $i => $col)				{					if (false !== strpos($col, ':'))					{						list($col, $index_size) = explode(':', $col);						$column[$i] = "$col($index_size)";					}				}			// no break			case 'mysql_41':				$statements[] = 'ALTER TABLE ' . $table_name . ' ADD INDEX ' . $index_name . '(' . implode(', ', $column) . ')';			break;			case 'mssql':			case 'mssqlnative':				$statements[] = 'CREATE INDEX ' . $index_name . ' ON ' . $table_name . '(' . implode(', ', $column) . ') ON [PRIMARY]';			break;		}		return $this->_sql_run_sql($statements);	}	/**	* List all of the indices that belong to a table,	* does not count:	* * UNIQUE indices	* * PRIMARY keys	*/	function sql_list_index($table_name)	{		$index_array = array();		if ($this->sql_layer == 'mssql' || $this->sql_layer == 'mssqlnative')		{			$sql = "EXEC sp_statistics '$table_name'";			$result = $this->db->sql_query($sql);			while ($row = $this->db->sql_fetchrow($result))			{				if ($row['TYPE'] == 3)				{					$index_array[] = $row['INDEX_NAME'];				}			}			$this->db->sql_freeresult($result);		}		else		{			switch ($this->sql_layer)			{				case 'firebird':					$sql = "SELECT LOWER(RDB\$INDEX_NAME) as index_name						FROM RDB\$INDICES						WHERE RDB\$RELATION_NAME = '" . strtoupper($table_name) . "'							AND RDB\$UNIQUE_FLAG IS NULL							AND RDB\$FOREIGN_KEY IS NULL";					$col = 'index_name';				break;				case 'postgres':					$sql = "SELECT ic.relname as index_name						FROM pg_class bc, pg_class ic, pg_index i						WHERE (bc.oid = i.indrelid)							AND (ic.oid = i.indexrelid)							AND (bc.relname = '" . $table_name . "')							AND (i.indisunique != 't')							AND (i.indisprimary != 't')";					$col = 'index_name';				break;				case 'mysql_40':				case 'mysql_41':					$sql = 'SHOW KEYS						FROM ' . $table_name;					$col = 'Key_name';				break;				case 'oracle':					$sql = "SELECT index_name						FROM user_indexes						WHERE table_name = '" . strtoupper($table_name) . "'							AND generated = 'N'							AND uniqueness = 'NONUNIQUE'";					$col = 'index_name';				break;				case 'sqlite':					$sql = "PRAGMA index_info('" . $table_name . "');";					$col = 'name';				break;			}			$result = $this->db->sql_query($sql);			while ($row = $this->db->sql_fetchrow($result))			{				if (($this->sql_layer == 'mysql_40' || $this->sql_layer == 'mysql_41') && !$row['Non_unique'])				{					continue;				}				switch ($this->sql_layer)				{					case 'firebird':					case 'oracle':					case 'postgres':					case 'sqlite':						$row[$col] = substr($row[$col], strlen($table_name) + 1);					break;				}				$index_array[] = $row[$col];			}			$this->db->sql_freeresult($result);		}		return array_map('strtolower', $index_array);	}	/**	* Change column type (not name!)	*/	function sql_column_change($table_name, $column_name, $column_data, $inline = false)	{		$column_data = $this->sql_prepare_column_data($table_name, $column_name, $column_data);		$statements = array();		switch ($this->sql_layer)		{			case 'firebird':				// Change type...				if (!empty($column_data['column_type_sql_default']))				{					$statements[] = 'ALTER TABLE ' . $table_name . ' ALTER COLUMN "' . strtoupper($column_name) . '" TYPE ' . ' ' . $column_data['column_type_sql_type'];					$statements[] = 'ALTER TABLE ' . $table_name . ' ALTER COLUMN "' . strtoupper($column_name) . '" SET DEFAULT ' . ' ' . $column_data['column_type_sql_default'];				}				else				{					// TODO: try to change pkey without removing trigger, generator or constraints. ATM this query may fail.					$statements[] = 'ALTER TABLE ' . $table_name . ' ALTER COLUMN "' . strtoupper($column_name) . '" TYPE ' . ' ' . $column_data['column_type_sql_type'];				}			break;			case 'mssql':			case 'mssqlnative':				$statements[] = 'ALTER TABLE [' . $table_name . '] ALTER COLUMN [' . $column_name . '] ' . $column_data['column_type_sql'];				if (!empty($column_data['default']))				{					// Using TRANSACT-SQL for this statement because we do not want to have colliding data if statements are executed at a later stage					$statements[] = "DECLARE @drop_default_name VARCHAR(100), @cmd VARCHAR(1000)						SET @drop_default_name =							(SELECT so.name FROM sysobjects so							JOIN sysconstraints sc ON so.id = sc.constid							WHERE object_name(so.parent_obj) = '{$table_name}'								AND so.xtype = 'D'								AND sc.colid = (SELECT colid FROM syscolumns									WHERE id = object_id('{$table_name}')										AND name = '{$column_name}'))						IF @drop_default_name <> ''						BEGIN							SET @cmd = 'ALTER TABLE [{$table_name}] DROP CONSTRAINT [' + @drop_default_name + ']'							EXEC(@cmd)						END						SET @cmd = 'ALTER TABLE [{$table_name}] ADD CONSTRAINT [DF_{$table_name}_{$column_name}_1] {$column_data['default']} FOR [{$column_name}]'						EXEC(@cmd)";				}			break;			case 'mysql_40':			case 'mysql_41':				$statements[] = 'ALTER TABLE `' . $table_name . '` CHANGE `' . $column_name . '` `' . $column_name . '` ' . $column_data['column_type_sql'];			break;			case 'oracle':				$statements[] = 'ALTER TABLE ' . $table_name . ' MODIFY ' . $column_name . ' ' . $column_data['column_type_sql'];			break;			case 'postgres':				$sql = 'ALTER TABLE ' . $table_name . ' ';				$sql_array = array();				$sql_array[] = 'ALTER COLUMN ' . $column_name . ' TYPE ' . $column_data['column_type'];				if (isset($column_data['null']))				{					if ($column_data['null'] == 'NOT NULL')					{						$sql_array[] = 'ALTER COLUMN ' . $column_name . ' SET NOT NULL';					}					else if ($column_data['null'] == 'NULL')					{						$sql_array[] = 'ALTER COLUMN ' . $column_name . ' DROP NOT NULL';					}				}				if (isset($column_data['default']))				{					$sql_array[] = 'ALTER COLUMN ' . $column_name . ' SET DEFAULT ' . $column_data['default'];				}				// we don't want to double up on constraints if we change different number data types				if (isset($column_data['constraint']))				{					$constraint_sql = "SELECT consrc as constraint_data								FROM pg_constraint, pg_class bc								WHERE conrelid = bc.oid									AND bc.relname = '{$table_name}'									AND NOT EXISTS (										SELECT *											FROM pg_constraint as c, pg_inherits as i											WHERE i.inhrelid = pg_constraint.conrelid												AND c.conname = pg_constraint.conname												AND c.consrc = pg_constraint.consrc												AND c.conrelid = i.inhparent									)";					$constraint_exists = false;					$result = $this->db->sql_query($constraint_sql);					while ($row = $this->db->sql_fetchrow($result))					{						if (trim($row['constraint_data']) == trim($column_data['constraint']))						{							$constraint_exists = true;							break;						}					}					$this->db->sql_freeresult($result);					if (!$constraint_exists)					{						$sql_array[] = 'ADD ' . $column_data['constraint'];					}				}				$sql .= implode(', ', $sql_array);				$statements[] = $sql;			break;			case 'sqlite':				if ($inline && $this->return_statements)				{					return $column_name . ' ' . $column_data['column_type_sql'];				}				$sql = "SELECT sql					FROM sqlite_master					WHERE type = 'table'						AND name = '{$table_name}'					ORDER BY type DESC, name;";				$result = $this->db->sql_query($sql);				if (!$result)				{					break;				}				$row = $this->db->sql_fetchrow($result);				$this->db->sql_freeresult($result);				$statements[] = 'begin';				// Create a temp table and populate it, destroy the existing one				$statements[] = preg_replace('#CREATE\s+TABLE\s+"?' . $table_name . '"?#i', 'CREATE TEMPORARY TABLE ' . $table_name . '_temp', $row['sql']);				$statements[] = 'INSERT INTO ' . $table_name . '_temp SELECT * FROM ' . $table_name;				$statements[] = 'DROP TABLE ' . $table_name;				preg_match('#\((.*)\)#s', $row['sql'], $matches);				$new_table_cols = trim($matches[1]);				$old_table_cols = preg_split('/,(?![\s\w]+\))/m', $new_table_cols);				$column_list = array();				foreach ($old_table_cols as $key => $declaration)				{					$entities = preg_split('#\s+#', trim($declaration));					$column_list[] = $entities[0];					if ($entities[0] == $column_name)					{						$old_table_cols[$key] = $column_name . ' ' . $column_data['column_type_sql'];					}				}				$columns = implode(',', $column_list);				// create a new table and fill it up. destroy the temp one				$statements[] = 'CREATE TABLE ' . $table_name . ' (' . implode(',', $old_table_cols) . ');';				$statements[] = 'INSERT INTO ' . $table_name . ' (' . $columns . ') SELECT ' . $columns . ' FROM ' . $table_name . '_temp;';				$statements[] = 'DROP TABLE ' . $table_name . '_temp';				$statements[] = 'commit';			break;		}		return $this->_sql_run_sql($statements);	}}?>
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);require($phpbb_root_path . 'includes/startup.' . $phpEx);require($phpbb_root_path . 'config.' . $phpEx);if (!defined('PHPBB_INSTALLED') || empty($dbms) || empty($acm_type)){	exit;}// Load Extensionsif (!empty($load_extensions) && function_exists('dl')){	$load_extensions = explode(',', $load_extensions);	foreach ($load_extensions as $extension)	{		@dl(trim($extension));	}}$id = (isset($_GET['id'])) ? intval($_GET['id']) : 0;// This is a simple script to grab and output the requested CSS data stored in the DB// We include a session_id check to try and limit 3rd party linking ... unless they// happen to have a current session it will output nothing. We will also cache the// resulting CSS data for five minutes ... anything to reduce the load on the SQL// server a littleif ($id){	// Include files	require($phpbb_root_path . 'includes/acm/acm_' . $acm_type . '.' . $phpEx);	require($phpbb_root_path . 'includes/cache.' . $phpEx);	require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);	require($phpbb_root_path . 'includes/constants.' . $phpEx);	require($phpbb_root_path . 'includes/functions.' . $phpEx);	$db = new $sql_db();	$cache = new cache();	// Connect to DB	if (!@$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, false))	{		exit;	}	unset($dbpasswd);	$config = $cache->obtain_config();	$user = false;	// try to get a session ID from REQUEST array	$sid = request_var('sid', '');	if (!$sid)	{		// if that failed, then look in the cookies		$sid = request_var($config['cookie_name'] . '_sid', '', false, true);	}	if (strspn($sid, 'abcdefABCDEF0123456789') !== strlen($sid))	{		$sid = '';	}	if ($sid)	{		$sql = 'SELECT u.user_id, u.user_lang			FROM ' . SESSIONS_TABLE . ' s, ' . USERS_TABLE . " u			WHERE s.session_id = '" . $db->sql_escape($sid) . "'				AND s.session_user_id = u.user_id";		$result = $db->sql_query($sql);		$user = $db->sql_fetchrow($result);		$db->sql_freeresult($result);	}	$recompile = $config['load_tplcompile'];	if (!$user)	{		$id			= ($id) ? $id : $config['default_style'];//		Commented out because calls do not always include the SID anymore//		$recompile	= false;		$user		= array('user_id' => ANONYMOUS);	}	$sql = 'SELECT s.style_id, c.theme_id, c.theme_data, c.theme_path, c.theme_name, c.theme_mtime, i.*, t.template_path		FROM ' . STYLES_TABLE . ' s, ' . STYLES_TEMPLATE_TABLE . ' t, ' . STYLES_THEME_TABLE . ' c, ' . STYLES_IMAGESET_TABLE . ' i		WHERE s.style_id = ' . $id . '			AND t.template_id = s.template_id			AND c.theme_id = s.theme_id			AND i.imageset_id = s.imageset_id';	$result = $db->sql_query($sql, 300);	$theme = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$theme)	{		exit;	}	if ($user['user_id'] == ANONYMOUS)	{		$user['user_lang'] = $config['default_lang'];	}	$user_image_lang = (file_exists($phpbb_root_path . 'styles/' . $theme['imageset_path'] . '/imageset/' . $user['user_lang'])) ? $user['user_lang'] : $config['default_lang'];	// Same query in session.php	$sql = 'SELECT *		FROM ' . STYLES_IMAGESET_DATA_TABLE . '		WHERE imageset_id = ' . $theme['imageset_id'] . "		AND image_filename <> ''		AND image_lang IN ('" . $db->sql_escape($user_image_lang) . "', '')";	$result = $db->sql_query($sql, 3600);	$img_array = array();	while ($row = $db->sql_fetchrow($result))	{		$img_array[$row['image_name']] = $row;	}	$db->sql_freeresult($result);	// gzip_compression	if ($config['gzip_compress'])	{		// IE6 is not able to compress the style (do not ask us why!)		$browser = (!empty($_SERVER['HTTP_USER_AGENT'])) ? strtolower(htmlspecialchars((string) $_SERVER['HTTP_USER_AGENT'])) : '';		if ($browser && strpos($browser, 'msie 6.0') === false && @extension_loaded('zlib') && !headers_sent())		{			ob_start('ob_gzhandler');		}	}	// Expire time of seven days if not recached	$expire_time = 7*86400;	$recache = false;	// Re-cache stylesheet data if necessary	if ($recompile || empty($theme['theme_data']))	{		$recache = (empty($theme['theme_data'])) ? true : false;		$update_time = time();		// We test for stylesheet.css because it is faster and most likely the only file changed on common themes		if (!$recache && $theme['theme_mtime'] < @filemtime("{$phpbb_root_path}styles/" . $theme['theme_path'] . '/theme/stylesheet.css'))		{			$recache = true;			$update_time = @filemtime("{$phpbb_root_path}styles/" . $theme['theme_path'] . '/theme/stylesheet.css');		}		else if (!$recache)		{			$last_change = $theme['theme_mtime'];			$dir = @opendir("{$phpbb_root_path}styles/{$theme['theme_path']}/theme");			if ($dir)			{				while (($entry = readdir($dir)) !== false)				{					if (substr(strrchr($entry, '.'), 1) == 'css' && $last_change < @filemtime("{$phpbb_root_path}styles/{$theme['theme_path']}/theme/{$entry}"))					{						$recache = true;						break;					}				}				closedir($dir);			}		}	}	if ($recache)	{		include_once($phpbb_root_path . 'includes/acp/acp_styles.' . $phpEx);		$theme['theme_data'] = acp_styles::db_theme_data($theme);		$theme['theme_mtime'] = $update_time;		// Save CSS contents		$sql_ary = array(			'theme_mtime'	=> $theme['theme_mtime'],			'theme_data'	=> $theme['theme_data']		);		$sql = 'UPDATE ' . STYLES_THEME_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "			WHERE theme_id = {$theme['theme_id']}";		$db->sql_query($sql);		$cache->destroy('sql', STYLES_THEME_TABLE);	}	// Only set the expire time if the theme changed data is older than 30 minutes - to cope with changes from the ACP	if ($recache || $theme['theme_mtime'] > (time() - 1800))	{		header('Expires: 0');	}	else	{		header('Expires: ' . gmdate('D, d M Y H:i:s \G\M\T', time() + $expire_time));	}	header('Content-type: text/css; charset=UTF-8');	// Parse Theme Data	$replace = array(		'{T_THEME_PATH}'			=> "{$phpbb_root_path}styles/" . $theme['theme_path'] . '/theme',		'{T_TEMPLATE_PATH}'			=> "{$phpbb_root_path}styles/" . $theme['template_path'] . '/template',		'{T_IMAGESET_PATH}'			=> "{$phpbb_root_path}styles/" . $theme['imageset_path'] . '/imageset',		'{T_IMAGESET_LANG_PATH}'	=> "{$phpbb_root_path}styles/" . $theme['imageset_path'] . '/imageset/' . $user_image_lang,		'{T_STYLESHEET_NAME}'		=> $theme['theme_name'],		'{S_USER_LANG}'				=> $user['user_lang']	);	$theme['theme_data'] = str_replace(array_keys($replace), array_values($replace), $theme['theme_data']);	$matches = array();	preg_match_all('#\{IMG_([A-Za-z0-9_]*?)_(WIDTH|HEIGHT|SRC)\}#', $theme['theme_data'], $matches);	$imgs = $find = $replace = array();	if (isset($matches[0]) && sizeof($matches[0]))	{		foreach ($matches[1] as $i => $img)		{			$img = strtolower($img);			$find[] = $matches[0][$i];			if (!isset($img_array[$img]))			{				$replace[] = '';				continue;			}			if (!isset($imgs[$img]))			{				$img_data = &$img_array[$img];				$imgsrc = ($img_data['image_lang'] ? $img_data['image_lang'] . '/' : '') . $img_data['image_filename'];				$imgs[$img] = array(					'src'		=> $phpbb_root_path . 'styles/' . $theme['imageset_path'] . '/imageset/' . $imgsrc,					'width'		=> $img_data['image_width'],					'height'	=> $img_data['image_height'],				);			}			switch ($matches[2][$i])			{				case 'SRC':					$replace[] = $imgs[$img]['src'];				break;				case 'WIDTH':					$replace[] = $imgs[$img]['width'];				break;				case 'HEIGHT':					$replace[] = $imgs[$img]['height'];				break;				default:					continue;			}		}		if (sizeof($find))		{			$theme['theme_data'] = str_replace($find, $replace, $theme['theme_data']);		}	}	echo $theme['theme_data'];	if (!empty($cache))	{		$cache->unload();	}	$db->sql_close();}exit;?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ucp_profile* Changing profile settings** @todo what about pertaining user_sig_options?* @package ucp*/class ucp_profile{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $phpbb_root_path, $phpEx;		$user->add_lang('posting');		$preview	= (!empty($_POST['preview'])) ? true : false;		$submit		= (!empty($_POST['submit'])) ? true : false;		$delete		= (!empty($_POST['delete'])) ? true : false;		$error = $data = array();		$s_hidden_fields = '';		switch ($mode)		{			case 'reg_details':				$data = array(					'username'			=> utf8_normalize_nfc(request_var('username', $user->data['username'], true)),					'email'				=> strtolower(request_var('email', $user->data['user_email'])),					'email_confirm'		=> strtolower(request_var('email_confirm', '')),					'new_password'		=> request_var('new_password', '', true),					'cur_password'		=> request_var('cur_password', '', true),					'password_confirm'	=> request_var('password_confirm', '', true),				);				add_form_key('ucp_reg_details');				if ($submit)				{					// Do not check cur_password, it is the old one.					$check_ary = array(						'new_password'		=> array(							array('string', true, $config['min_pass_chars'], $config['max_pass_chars']),							array('password')),						'password_confirm'	=> array('string', true, $config['min_pass_chars'], $config['max_pass_chars']),						'email'				=> array(							array('string', false, 6, 60),							array('email')),						'email_confirm'		=> array('string', true, 6, 60),					);					if ($auth->acl_get('u_chgname') && $config['allow_namechange'])					{						$check_ary['username'] = array(							array('string', false, $config['min_name_chars'], $config['max_name_chars']),							array('username'),						);					}					$error = validate_data($data, $check_ary);					if ($auth->acl_get('u_chgemail') && $data['email'] != $user->data['user_email'] && $data['email_confirm'] != $data['email'])					{						$error[] = ($data['email_confirm']) ? 'NEW_EMAIL_ERROR' : 'NEW_EMAIL_CONFIRM_EMPTY';					}					if ($auth->acl_get('u_chgpasswd') && $data['new_password'] && $data['password_confirm'] != $data['new_password'])					{						$error[] = ($data['password_confirm']) ? 'NEW_PASSWORD_ERROR' : 'NEW_PASSWORD_CONFIRM_EMPTY';					}					// Only check the new password against the previous password if there have been no errors					if (!sizeof($error) && $auth->acl_get('u_chgpasswd') && $data['new_password'] && phpbb_check_hash($data['new_password'], $user->data['user_password']))					{						$error[] = 'SAME_PASSWORD_ERROR';					}					if (!phpbb_check_hash($data['cur_password'], $user->data['user_password']))					{						$error[] = ($data['cur_password']) ? 'CUR_PASSWORD_ERROR' : 'CUR_PASSWORD_EMPTY';					}					if (!check_form_key('ucp_reg_details'))					{						$error[] = 'FORM_INVALID';					}					if (!sizeof($error))					{						$sql_ary = array(							'username'			=> ($auth->acl_get('u_chgname') && $config['allow_namechange']) ? $data['username'] : $user->data['username'],							'username_clean'	=> ($auth->acl_get('u_chgname') && $config['allow_namechange']) ? utf8_clean_string($data['username']) : $user->data['username_clean'],							'user_email'		=> ($auth->acl_get('u_chgemail')) ? $data['email'] : $user->data['user_email'],							'user_email_hash'	=> ($auth->acl_get('u_chgemail')) ? phpbb_email_hash($data['email']) : $user->data['user_email_hash'],							'user_password'		=> ($auth->acl_get('u_chgpasswd') && $data['new_password']) ? phpbb_hash($data['new_password']) : $user->data['user_password'],							'user_passchg'		=> ($auth->acl_get('u_chgpasswd') && $data['new_password']) ? time() : 0,						);						if ($auth->acl_get('u_chgname') && $config['allow_namechange'] && $data['username'] != $user->data['username'])						{							add_log('user', $user->data['user_id'], 'LOG_USER_UPDATE_NAME', $user->data['username'], $data['username']);						}						if ($auth->acl_get('u_chgpasswd') && $data['new_password'] && !phpbb_check_hash($data['new_password'], $user->data['user_password']))						{							$user->reset_login_keys();							add_log('user', $user->data['user_id'], 'LOG_USER_NEW_PASSWORD', $data['username']);						}						if ($auth->acl_get('u_chgemail') && $data['email'] != $user->data['user_email'])						{							add_log('user', $user->data['user_id'], 'LOG_USER_UPDATE_EMAIL', $data['username'], $user->data['user_email'], $data['email']);						}						$message = 'PROFILE_UPDATED';						if ($auth->acl_get('u_chgemail') && $config['email_enable'] && $data['email'] != $user->data['user_email'] && $user->data['user_type'] != USER_FOUNDER && ($config['require_activation'] == USER_ACTIVATION_SELF || $config['require_activation'] == USER_ACTIVATION_ADMIN))						{							$message = ($config['require_activation'] == USER_ACTIVATION_SELF) ? 'ACCOUNT_EMAIL_CHANGED' : 'ACCOUNT_EMAIL_CHANGED_ADMIN';							include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);							$server_url = generate_board_url();							$user_actkey = gen_rand_string(mt_rand(6, 10));							$messenger = new messenger(false);							$template_file = ($config['require_activation'] == USER_ACTIVATION_ADMIN) ? 'user_activate_inactive' : 'user_activate';							$messenger->template($template_file, $user->data['user_lang']);							$messenger->to($data['email'], $data['username']);							$messenger->anti_abuse_headers($config, $user);							$messenger->assign_vars(array(								'USERNAME'		=> htmlspecialchars_decode($data['username']),								'U_ACTIVATE'	=> "$server_url/ucp.$phpEx?mode=activate&u={$user->data['user_id']}&k=$user_actkey")							);							$messenger->send(NOTIFY_EMAIL);							if ($config['require_activation'] == USER_ACTIVATION_ADMIN)							{								// Grab an array of user_id's with a_user permissions ... these users can activate a user								$admin_ary = $auth->acl_get_list(false, 'a_user', false);								$admin_ary = (!empty($admin_ary[0]['a_user'])) ? $admin_ary[0]['a_user'] : array();								// Also include founders								$where_sql = ' WHERE user_type = ' . USER_FOUNDER;								if (sizeof($admin_ary))								{									$where_sql .= ' OR ' . $db->sql_in_set('user_id', $admin_ary);								}								$sql = 'SELECT user_id, username, user_email, user_lang, user_jabber, user_notify_type									FROM ' . USERS_TABLE . ' ' .									$where_sql;								$result = $db->sql_query($sql);								while ($row = $db->sql_fetchrow($result))								{									$messenger->template('admin_activate', $row['user_lang']);									$messenger->to($row['user_email'], $row['username']);									$messenger->im($row['user_jabber'], $row['username']);									$messenger->assign_vars(array(										'USERNAME'			=> htmlspecialchars_decode($data['username']),										'U_USER_DETAILS'	=> "$server_url/memberlist.$phpEx?mode=viewprofile&u={$user->data['user_id']}",										'U_ACTIVATE'		=> "$server_url/ucp.$phpEx?mode=activate&u={$user->data['user_id']}&k=$user_actkey")									);									$messenger->send($row['user_notify_type']);								}								$db->sql_freeresult($result);							}							user_active_flip('deactivate', $user->data['user_id'], INACTIVE_PROFILE);							// Because we want the profile to be reactivated we set user_newpasswd to empty (else the reactivation will fail)							$sql_ary['user_actkey'] = $user_actkey;							$sql_ary['user_newpasswd'] = '';						}						if (sizeof($sql_ary))						{							$sql = 'UPDATE ' . USERS_TABLE . '								SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '								WHERE user_id = ' . $user->data['user_id'];							$db->sql_query($sql);						}						// Need to update config, forum, topic, posting, messages, etc.						if ($data['username'] != $user->data['username'] && $auth->acl_get('u_chgname') && $config['allow_namechange'])						{							user_update_name($user->data['username'], $data['username']);						}						// Now, we can remove the user completely (kill the session) - NOT BEFORE!!!						if (!empty($sql_ary['user_actkey']))						{							meta_refresh(5, append_sid($phpbb_root_path . 'index.' . $phpEx));							$message = $user->lang[$message] . '<br /><br />' . sprintf($user->lang['RETURN_INDEX'], '<a href="' . append_sid($phpbb_root_path . 'index.' . $phpEx) . '">', '</a>');							// Because the user gets deactivated we log him out too, killing his session							$user->session_kill();						}						else						{							meta_refresh(3, $this->u_action);							$message = $user->lang[$message] . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $this->u_action . '">', '</a>');						}						trigger_error($message);					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				$template->assign_vars(array(					'ERROR'				=> (sizeof($error)) ? implode('<br />', $error) : '',					'USERNAME'			=> $data['username'],					'EMAIL'				=> $data['email'],					'PASSWORD_CONFIRM'	=> $data['password_confirm'],					'NEW_PASSWORD'		=> $data['new_password'],					'CUR_PASSWORD'		=> '',					'L_USERNAME_EXPLAIN'		=> sprintf($user->lang[$config['allow_name_chars'] . '_EXPLAIN'], $config['min_name_chars'], $config['max_name_chars']),					'L_CHANGE_PASSWORD_EXPLAIN'	=> sprintf($user->lang[$config['pass_complex'] . '_EXPLAIN'], $config['min_pass_chars'], $config['max_pass_chars']),					'S_FORCE_PASSWORD'	=> ($auth->acl_get('u_chgpasswd') && $config['chg_passforce'] && $user->data['user_passchg'] < time() - ($config['chg_passforce'] * 86400)) ? true : false,					'S_CHANGE_USERNAME' => ($config['allow_namechange'] && $auth->acl_get('u_chgname')) ? true : false,					'S_CHANGE_EMAIL'	=> ($auth->acl_get('u_chgemail')) ? true : false,					'S_CHANGE_PASSWORD'	=> ($auth->acl_get('u_chgpasswd')) ? true : false)				);			break;			case 'profile_info':				include($phpbb_root_path . 'includes/functions_profile_fields.' . $phpEx);				$cp = new custom_profile();				$cp_data = $cp_error = array();				$data = array(					'icq'			=> request_var('icq', $user->data['user_icq']),					'aim'			=> request_var('aim', $user->data['user_aim']),					'msn'			=> request_var('msn', $user->data['user_msnm']),					'yim'			=> request_var('yim', $user->data['user_yim']),					'jabber'		=> utf8_normalize_nfc(request_var('jabber', $user->data['user_jabber'], true)),					'website'		=> request_var('website', $user->data['user_website']),					'location'		=> utf8_normalize_nfc(request_var('location', $user->data['user_from'], true)),					'occupation'	=> utf8_normalize_nfc(request_var('occupation', $user->data['user_occ'], true)),					'interests'		=> utf8_normalize_nfc(request_var('interests', $user->data['user_interests'], true)),				);				if ($config['allow_birthdays'])				{					$data['bday_day'] = $data['bday_month'] = $data['bday_year'] = 0;					if ($user->data['user_birthday'])					{						list($data['bday_day'], $data['bday_month'], $data['bday_year']) = explode('-', $user->data['user_birthday']);					}					$data['bday_day'] = request_var('bday_day', $data['bday_day']);					$data['bday_month'] = request_var('bday_month', $data['bday_month']);					$data['bday_year'] = request_var('bday_year', $data['bday_year']);					$data['user_birthday'] = sprintf('%2d-%2d-%4d', $data['bday_day'], $data['bday_month'], $data['bday_year']);				}				add_form_key('ucp_profile_info');				if ($submit)				{					$validate_array = array(						'icq'			=> array(							array('string', true, 3, 15),							array('match', true, '#^[0-9]+$#i')),						'aim'			=> array('string', true, 3, 255),						'msn'			=> array('string', true, 5, 255),						'jabber'		=> array(							array('string', true, 5, 255),							array('jabber')),						'yim'			=> array('string', true, 5, 255),						'website'		=> array(							array('string', true, 12, 255),							array('match', true, '#^http[s]?://(.*?\.)*?[a-z0-9\-]+\.[a-z]{2,4}#i')),						'location'		=> array('string', true, 2, 100),						'occupation'	=> array('string', true, 2, 500),						'interests'		=> array('string', true, 2, 500),					);					if ($config['allow_birthdays'])					{						$validate_array = array_merge($validate_array, array(							'bday_day'		=> array('num', true, 1, 31),							'bday_month'	=> array('num', true, 1, 12),							'bday_year'		=> array('num', true, 1901, gmdate('Y', time()) + 50),							'user_birthday' => array('date', true),						));					}					$error = validate_data($data, $validate_array);					// validate custom profile fields					$cp->submit_cp_field('profile', $user->get_iso_lang_id(), $cp_data, $cp_error);					if (sizeof($cp_error))					{						$error = array_merge($error, $cp_error);					}					if (!check_form_key('ucp_profile_info'))					{						$error[] = 'FORM_INVALID';					}					if (!sizeof($error))					{						$data['notify'] = $user->data['user_notify_type'];						if ($data['notify'] == NOTIFY_IM && (!$config['jab_enable'] || !$data['jabber'] || !@extension_loaded('xml')))						{							// User has not filled in a jabber address (Or one of the modules is disabled or jabber is disabled)							// Disable notify by Jabber now for this user.							$data['notify'] = NOTIFY_EMAIL;						}						$sql_ary = array(							'user_icq'		=> $data['icq'],							'user_aim'		=> $data['aim'],							'user_msnm'		=> $data['msn'],							'user_yim'		=> $data['yim'],							'user_jabber'	=> $data['jabber'],							'user_website'	=> $data['website'],							'user_from'		=> $data['location'],							'user_occ'		=> $data['occupation'],							'user_interests'=> $data['interests'],							'user_notify_type'	=> $data['notify'],						);						if ($config['allow_birthdays'])						{							$sql_ary['user_birthday'] = $data['user_birthday'];						}						$sql = 'UPDATE ' . USERS_TABLE . '							SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '							WHERE user_id = ' . $user->data['user_id'];						$db->sql_query($sql);						// Update Custom Fields						$cp->update_profile_field_data($user->data['user_id'], $cp_data);						meta_refresh(3, $this->u_action);						$message = $user->lang['PROFILE_UPDATED'] . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $this->u_action . '">', '</a>');						trigger_error($message);					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				if ($config['allow_birthdays'])				{					$s_birthday_day_options = '<option value="0"' . ((!$data['bday_day']) ? ' selected="selected"' : '') . '>--</option>';					for ($i = 1; $i < 32; $i++)					{						$selected = ($i == $data['bday_day']) ? ' selected="selected"' : '';						$s_birthday_day_options .= "<option value=\"$i\"$selected>$i</option>";					}					$s_birthday_month_options = '<option value="0"' . ((!$data['bday_month']) ? ' selected="selected"' : '') . '>--</option>';					for ($i = 1; $i < 13; $i++)					{						$selected = ($i == $data['bday_month']) ? ' selected="selected"' : '';						$s_birthday_month_options .= "<option value=\"$i\"$selected>$i</option>";					}					$s_birthday_year_options = '';					$now = getdate();					$s_birthday_year_options = '<option value="0"' . ((!$data['bday_year']) ? ' selected="selected"' : '') . '>--</option>';					for ($i = $now['year'] - 100; $i <= $now['year']; $i++)					{						$selected = ($i == $data['bday_year']) ? ' selected="selected"' : '';						$s_birthday_year_options .= "<option value=\"$i\"$selected>$i</option>";					}					unset($now);					$template->assign_vars(array(						'S_BIRTHDAY_DAY_OPTIONS'	=> $s_birthday_day_options,						'S_BIRTHDAY_MONTH_OPTIONS'	=> $s_birthday_month_options,						'S_BIRTHDAY_YEAR_OPTIONS'	=> $s_birthday_year_options,						'S_BIRTHDAYS_ENABLED'		=> true,					));				}				$template->assign_vars(array(					'ERROR'		=> (sizeof($error)) ? implode('<br />', $error) : '',					'ICQ'		=> $data['icq'],					'YIM'		=> $data['yim'],					'AIM'		=> $data['aim'],					'MSN'		=> $data['msn'],					'JABBER'	=> $data['jabber'],					'WEBSITE'	=> $data['website'],					'LOCATION'	=> $data['location'],					'OCCUPATION'=> $data['occupation'],					'INTERESTS'	=> $data['interests'],				));				// Get additional profile fields and assign them to the template block var 'profile_fields'				$user->get_profile_fields($user->data['user_id']);				$cp->generate_profile_fields('profile', $user->get_iso_lang_id());			break;			case 'signature':				if (!$auth->acl_get('u_sig'))				{					trigger_error('NO_AUTH_SIGNATURE');				}				include($phpbb_root_path . 'includes/functions_posting.' . $phpEx);				include($phpbb_root_path . 'includes/functions_display.' . $phpEx);				$enable_bbcode	= ($config['allow_sig_bbcode']) ? (bool) $user->optionget('sig_bbcode') : false;				$enable_smilies	= ($config['allow_sig_smilies']) ? (bool) $user->optionget('sig_smilies') : false;				$enable_urls	= ($config['allow_sig_links']) ? (bool) $user->optionget('sig_links') : false;				$signature		= utf8_normalize_nfc(request_var('signature', (string) $user->data['user_sig'], true));				add_form_key('ucp_sig');				if ($submit || $preview)				{					include($phpbb_root_path . 'includes/message_parser.' . $phpEx);					$enable_bbcode	= ($config['allow_sig_bbcode']) ? ((request_var('disable_bbcode', false)) ? false : true) : false;					$enable_smilies	= ($config['allow_sig_smilies']) ? ((request_var('disable_smilies', false)) ? false : true) : false;					$enable_urls	= ($config['allow_sig_links']) ? ((request_var('disable_magic_url', false)) ? false : true) : false;					if (!sizeof($error))					{						$message_parser = new parse_message($signature);						// Allowing Quote BBCode						$message_parser->parse($enable_bbcode, $enable_urls, $enable_smilies, $config['allow_sig_img'], $config['allow_sig_flash'], true, $config['allow_sig_links'], true, 'sig');						if (sizeof($message_parser->warn_msg))						{							$error[] = implode('<br />', $message_parser->warn_msg);						}						if (!check_form_key('ucp_sig'))						{							$error[] = 'FORM_INVALID';						}						if (!sizeof($error) && $submit)						{							$user->optionset('sig_bbcode', $enable_bbcode);							$user->optionset('sig_smilies', $enable_smilies);							$user->optionset('sig_links', $enable_urls);							$sql_ary = array(								'user_sig'					=> (string) $message_parser->message,								'user_options'				=> $user->data['user_options'],								'user_sig_bbcode_uid'		=> (string) $message_parser->bbcode_uid,								'user_sig_bbcode_bitfield'	=> $message_parser->bbcode_bitfield							);							$sql = 'UPDATE ' . USERS_TABLE . '								SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '								WHERE user_id = ' . $user->data['user_id'];							$db->sql_query($sql);							$message = $user->lang['PROFILE_UPDATED'] . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $this->u_action . '">', '</a>');							trigger_error($message);						}					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				$signature_preview = '';				if ($preview)				{					// Now parse it for displaying					$signature_preview = $message_parser->format_display($enable_bbcode, $enable_urls, $enable_smilies, false);					unset($message_parser);				}				decode_message($signature, $user->data['user_sig_bbcode_uid']);				$template->assign_vars(array(					'ERROR'				=> (sizeof($error)) ? implode('<br />', $error) : '',					'SIGNATURE'			=> $signature,					'SIGNATURE_PREVIEW'	=> $signature_preview,					'S_BBCODE_CHECKED' 		=> (!$enable_bbcode) ? ' checked="checked"' : '',					'S_SMILIES_CHECKED' 	=> (!$enable_smilies) ? ' checked="checked"' : '',					'S_MAGIC_URL_CHECKED' 	=> (!$enable_urls) ? ' checked="checked"' : '',					'BBCODE_STATUS'			=> ($config['allow_sig_bbcode']) ? sprintf($user->lang['BBCODE_IS_ON'], '<a href="' . append_sid("{$phpbb_root_path}faq.$phpEx", 'mode=bbcode') . '">', '</a>') : sprintf($user->lang['BBCODE_IS_OFF'], '<a href="' . append_sid("{$phpbb_root_path}faq.$phpEx", 'mode=bbcode') . '">', '</a>'),					'SMILIES_STATUS'		=> ($config['allow_sig_smilies']) ? $user->lang['SMILIES_ARE_ON'] : $user->lang['SMILIES_ARE_OFF'],					'IMG_STATUS'			=> ($config['allow_sig_img']) ? $user->lang['IMAGES_ARE_ON'] : $user->lang['IMAGES_ARE_OFF'],					'FLASH_STATUS'			=> ($config['allow_sig_flash']) ? $user->lang['FLASH_IS_ON'] : $user->lang['FLASH_IS_OFF'],					'URL_STATUS'			=> ($config['allow_sig_links']) ? $user->lang['URL_IS_ON'] : $user->lang['URL_IS_OFF'],					'MAX_FONT_SIZE'			=> (int) $config['max_sig_font_size'],					'L_SIGNATURE_EXPLAIN'	=> sprintf($user->lang['SIGNATURE_EXPLAIN'], $config['max_sig_chars']),					'S_BBCODE_ALLOWED'		=> $config['allow_sig_bbcode'],					'S_SMILIES_ALLOWED'		=> $config['allow_sig_smilies'],					'S_BBCODE_IMG'			=> ($config['allow_sig_img']) ? true : false,					'S_BBCODE_FLASH'		=> ($config['allow_sig_flash']) ? true : false,					'S_LINKS_ALLOWED'		=> ($config['allow_sig_links']) ? true : false)				);				// Build custom bbcodes array				display_custom_bbcodes();			break;			case 'avatar':				include($phpbb_root_path . 'includes/functions_display.' . $phpEx);				$display_gallery = request_var('display_gallery', '0');				$avatar_select = basename(request_var('avatar_select', ''));				$category = basename(request_var('category', ''));				$can_upload = (file_exists($phpbb_root_path . $config['avatar_path']) && phpbb_is_writable($phpbb_root_path . $config['avatar_path']) && $auth->acl_get('u_chgavatar') && (@ini_get('file_uploads') || strtolower(@ini_get('file_uploads')) == 'on')) ? true : false;				add_form_key('ucp_avatar');				if ($submit)				{					if (check_form_key('ucp_avatar'))					{						if (avatar_process_user($error, false, $can_upload))						{							meta_refresh(3, $this->u_action);							$message = $user->lang['PROFILE_UPDATED'] . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $this->u_action . '">', '</a>');							trigger_error($message);						}					}					else					{						$error[] = 'FORM_INVALID';					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				if (!$config['allow_avatar'] && $user->data['user_avatar_type'])				{					$error[] = $user->lang['AVATAR_NOT_ALLOWED'];				}				else if ((($user->data['user_avatar_type'] == AVATAR_UPLOAD) && !$config['allow_avatar_upload']) ||				 (($user->data['user_avatar_type'] == AVATAR_REMOTE) && !$config['allow_avatar_remote']) ||				 (($user->data['user_avatar_type'] == AVATAR_GALLERY) && !$config['allow_avatar_local']))				{					$error[] = $user->lang['AVATAR_TYPE_NOT_ALLOWED'];				}				$template->assign_vars(array(					'ERROR'			=> (sizeof($error)) ? implode('<br />', $error) : '',					'AVATAR'		=> get_user_avatar($user->data['user_avatar'], $user->data['user_avatar_type'], $user->data['user_avatar_width'], $user->data['user_avatar_height'], 'USER_AVATAR', true),					'AVATAR_SIZE'	=> $config['avatar_filesize'],					'U_GALLERY'		=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=profile&amp;mode=avatar&amp;display_gallery=1'),					'S_FORM_ENCTYPE'	=> ($can_upload && ($config['allow_avatar_upload'] || $config['allow_avatar_remote_upload'])) ? ' enctype="multipart/form-data"' : '',					'L_AVATAR_EXPLAIN'	=> sprintf($user->lang['AVATAR_EXPLAIN'], $config['avatar_max_width'], $config['avatar_max_height'], $config['avatar_filesize'] / 1024),				));				if ($config['allow_avatar'] && $display_gallery && $auth->acl_get('u_chgavatar') && $config['allow_avatar_local'])				{					avatar_gallery($category, $avatar_select, 4);				}				else if ($config['allow_avatar'])				{					$avatars_enabled = (($can_upload && ($config['allow_avatar_upload'] || $config['allow_avatar_remote_upload'])) || ($auth->acl_get('u_chgavatar') && ($config['allow_avatar_local'] || $config['allow_avatar_remote']))) ? true : false;					$template->assign_vars(array(						'AVATAR_WIDTH'	=> request_var('width', $user->data['user_avatar_width']),						'AVATAR_HEIGHT'	=> request_var('height', $user->data['user_avatar_height']),						'S_AVATARS_ENABLED'		=> $avatars_enabled,						'S_UPLOAD_AVATAR_FILE'	=> ($can_upload && $config['allow_avatar_upload']) ? true : false,						'S_UPLOAD_AVATAR_URL'	=> ($can_upload && $config['allow_avatar_remote_upload']) ? true : false,						'S_LINK_AVATAR'			=> ($auth->acl_get('u_chgavatar') && $config['allow_avatar_remote']) ? true : false,						'S_DISPLAY_GALLERY'		=> ($auth->acl_get('u_chgavatar') && $config['allow_avatar_local']) ? true : false)					);				}			break;		}		$template->assign_vars(array(			'L_TITLE'	=> $user->lang['UCP_PROFILE_' . strtoupper($mode)],			'S_HIDDEN_FIELDS'	=> $s_hidden_fields,			'S_UCP_ACTION'		=> $this->u_action)		);		// Set desired template		$this->tpl_name = 'ucp_profile_' . $mode;		$this->page_title = 'UCP_PROFILE_' . strtoupper($mode);	}}?>
<?php/*** Repair bbcodes converted with RC6** You should make a backup from your users, posts and privmsgs table in case something goes wrong* Forum descriptions and rules need to be re-submitted manually**/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);@ini_set('memory_limit', '512M');define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.'.$phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$echos = 0;// Adjust user signatures$sql = 'SELECT user_id, user_sig, user_sig_bbcode_uid	FROM ' . USERS_TABLE . '	ORDER BY user_id ASC';$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$bbcode_uid = $row['user_sig_bbcode_uid'];	// Only if a bbcode uid is present, the signature present and a size tag used...	if (!empty($bbcode_uid) && strpos($row['user_sig'], $bbcode_uid) === false)	{		$row['user_sig'] = preg_replace('/\:[0-9a-z]{8}\]/', ":$bbcode_uid]", $row['user_sig']);		$sql = 'UPDATE ' . USERS_TABLE . " SET user_sig = '" . $db->sql_escape($row['user_sig']) . "'			WHERE user_id = " . $row['user_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />User: ' . "{$row['user_id']}\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Now adjust posts$sql = 'SELECT post_id, post_text, bbcode_uid, enable_bbcode	FROM ' . POSTS_TABLE . '	ORDER BY post_id ASC';$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$bbcode_uid = $row['bbcode_uid'];	// Only if a bbcode uid is present, bbcode enabled and a size tag used...	if ($row['enable_bbcode'] && !empty($bbcode_uid) && strpos($row['post_text'], $bbcode_uid) === false)	{		$row['post_text'] = preg_replace('/\:[0-9a-z]{8}\]/', ":$bbcode_uid]", $row['post_text']);				$sql = 'UPDATE ' . POSTS_TABLE . " SET post_text = '" . $db->sql_escape($row['post_text']) . "'			WHERE post_id = " . $row['post_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />Post: ' . "{$row['post_id']} \n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Now to the private messages$sql = 'SELECT msg_id, message_text, bbcode_uid, enable_bbcode	FROM ' . PRIVMSGS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$bbcode_uid = $row['bbcode_uid'];	// Only if a bbcode uid is present, bbcode enabled and a size tag used...	if ($row['enable_bbcode'] && !empty($bbcode_uid) && strpos($row['message_text'], $bbcode_uid) === false)	{		$row['message_text'] = preg_replace('/\:[0-9a-z]{8}\]/', ":$bbcode_uid]", $row['message_text']);				$sql = 'UPDATE ' . PRIVMSGS_TABLE . " SET message_text = '" . $db->sql_escape($row['message_text']) . "'			WHERE msg_id = " . $row['msg_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Done$db->sql_close();echo 'done';?>
<?php/**** acp_ban [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// Banning$lang = array_merge($lang, array(	'1_HOUR'		=> '1 hour',	'30_MINS'		=> '30 minutes',	'6_HOURS'		=> '6 hours',	'ACP_BAN_EXPLAIN'	=> 'Here you can control the banning of users by name, IP or e-mail address. These methods prevent a user reaching any part of the board. You can give a short (maximum 3000 characters) reason for the ban if you wish. This will be displayed in the admin log. The duration of a ban can also be specified. If you want the ban to end on a specific date rather than after a set time period select <span style="text-decoration: underline;">Until -&gt;</span> for the ban length and enter a date in <kbd>YYYY-MM-DD</kbd> format.',	'BAN_EXCLUDE'			=> 'Exclude from banning',	'BAN_LENGTH'			=> 'Length of ban',	'BAN_REASON'			=> 'Reason for ban',	'BAN_GIVE_REASON'		=> 'Reason shown to the banned',	'BAN_UPDATE_SUCCESSFUL'	=> 'The banlist has been updated successfully.',	'BANNED_UNTIL_DATE'		=> 'until %s', // Example: "until Mon 13.Jul.2009, 14:44"	'BANNED_UNTIL_DURATION'	=> '%1$s (until %2$s)', // Example: "7 days (until Tue 14.Jul.2009, 14:44)"	'EMAIL_BAN'					=> 'Ban one or more e-mail addresses',	'EMAIL_BAN_EXCLUDE_EXPLAIN'	=> 'Enable this to exclude the entered e-mail address from all current bans.',	'EMAIL_BAN_EXPLAIN'			=> 'To specify more than one e-mail address enter each on a new line. To match partial addresses use * as the wildcard, e.g. <samp>*@hotmail.com</samp>, <samp>*@*.domain.tld</samp>, etc.',	'EMAIL_NO_BANNED'			=> 'No banned e-mail addresses',	'EMAIL_UNBAN'				=> 'Un-ban or un-exclude e-mails',	'EMAIL_UNBAN_EXPLAIN'		=> 'You can unban (or un-exclude) multiple e-mail addresses in one go using the appropriate combination of mouse and keyboard for your computer and browser. Excluded e-mail addresses are emphasised.',	'IP_BAN'					=> 'Ban one or more IPs',	'IP_BAN_EXCLUDE_EXPLAIN'	=> 'Enable this to exclude the entered IP from all current bans.',	'IP_BAN_EXPLAIN'			=> 'To specify several different IPs or hostnames enter each on a new line. To specify a range of IP addresses separate the start and end with a hyphen (-), to specify a wildcard use *.',	'IP_HOSTNAME'				=> 'IP addresses or hostnames',	'IP_NO_BANNED'				=> 'No banned IP addresses',	'IP_UNBAN'					=> 'Un-ban or un-exclude IPs',	'IP_UNBAN_EXPLAIN'			=> 'You can unban (or un-exclude) multiple IP addresses in one go using the appropriate combination of mouse and keyboard for your computer and browser. Excluded IPs are emphasised.',	'LENGTH_BAN_INVALID'		=> 'The date has to be formatted <kbd>YYYY-MM-DD</kbd>.',	'OPTIONS_BANNED'			=> 'Banned',	'OPTIONS_EXCLUDED'			=> 'Excluded',	'PERMANENT'		=> 'Permanent',	'UNTIL'						=> 'Until',	'USER_BAN'					=> 'Ban one or more usernames',	'USER_BAN_EXCLUDE_EXPLAIN'	=> 'Enable this to exclude the entered users from all current bans.',	'USER_BAN_EXPLAIN'			=> 'You can ban multiple users in one go by entering each name on a new line. Use the <span style="text-decoration: underline;">Find a member</span> facility to look up and add one or more users automatically.',	'USER_NO_BANNED'			=> 'No banned usernames',	'USER_UNBAN'				=> 'Un-ban or un-exclude usernames',	'USER_UNBAN_EXPLAIN'		=> 'You can unban (or un-exclude) multiple users in one go using the appropriate combination of mouse and keyboard for your computer and browser. Excluded users are emphasised.',));?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** View message folder* Called from ucp_pm with mode == 'view' && action == 'view_folder'*/function view_folder($id, $mode, $folder_id, $folder){	global $user, $template, $auth, $db, $cache;	global $phpbb_root_path, $config, $phpEx;	$submit_export = (isset($_POST['submit_export'])) ? true : false;	$folder_info = get_pm_from($folder_id, $folder, $user->data['user_id']);	if (!$submit_export)	{		$user->add_lang('viewforum');		// Grab icons		$icons = $cache->obtain_icons();		$color_rows = array('marked', 'replied');		// only show the friend/foe color rows if the module is enabled		$zebra_enabled = false;		$_module = new p_master();		$_module->list_modules('ucp');		$_module->set_active('zebra');		$zebra_enabled = ($_module->active_module === false) ? false : true;		unset($_module);		if ($zebra_enabled)		{			$color_rows = array_merge($color_rows, array('friend', 'foe'));		}		foreach ($color_rows as $var)		{			$template->assign_block_vars('pm_colour_info', array(				'IMG'	=> $user->img("pm_{$var}", ''),				'CLASS'	=> "pm_{$var}_colour",				'LANG'	=> $user->lang[strtoupper($var) . '_MESSAGE'])			);		}		$mark_options = array('mark_important', 'delete_marked');		// Minimise edits		if (!$auth->acl_get('u_pm_delete') && $key = array_search('delete_marked', $mark_options))		{			unset($mark_options[$key]);		}		$s_mark_options = '';		foreach ($mark_options as $mark_option)		{			$s_mark_options .= '<option value="' . $mark_option . '">' . $user->lang[strtoupper($mark_option)] . '</option>';		}		// We do the folder moving options here too, for template authors to use...		$s_folder_move_options = '';		if ($folder_id != PRIVMSGS_NO_BOX && $folder_id != PRIVMSGS_OUTBOX)		{			foreach ($folder as $f_id => $folder_ary)			{				if ($f_id == PRIVMSGS_OUTBOX || $f_id == PRIVMSGS_SENTBOX || $f_id == $folder_id)				{					continue;				}				$s_folder_move_options .= '<option' . (($f_id != PRIVMSGS_INBOX) ? ' class="sep"' : '') . ' value="' . $f_id . '">';				$s_folder_move_options .= sprintf($user->lang['MOVE_MARKED_TO_FOLDER'], $folder_ary['folder_name']);				$s_folder_move_options .= (($folder_ary['unread_messages']) ? ' [' . $folder_ary['unread_messages'] . '] ' : '') . '</option>';			}		}		$friend = $foe = array();		// Get friends and foes		$sql = 'SELECT *			FROM ' . ZEBRA_TABLE . '			WHERE user_id = ' . $user->data['user_id'];		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$friend[$row['zebra_id']] = $row['friend'];			$foe[$row['zebra_id']] = $row['foe'];		}		$db->sql_freeresult($result);		$template->assign_vars(array(			'S_MARK_OPTIONS'		=> $s_mark_options,			'S_MOVE_MARKED_OPTIONS'	=> $s_folder_move_options)		);		// Okay, lets dump out the page ...		if (sizeof($folder_info['pm_list']))		{			$address_list = array();			// Build Recipient List if in outbox/sentbox - max two additional queries			if ($folder_id == PRIVMSGS_OUTBOX || $folder_id == PRIVMSGS_SENTBOX)			{				$address_list = get_recipient_strings($folder_info['rowset']);			}			foreach ($folder_info['pm_list'] as $message_id)			{				$row = &$folder_info['rowset'][$message_id];				$folder_img = ($row['pm_unread']) ? 'pm_unread' : 'pm_read';				$folder_alt = ($row['pm_unread']) ? 'NEW_MESSAGES' : 'NO_NEW_MESSAGES';				// Generate all URIs ...				$view_message_url = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=$id&amp;mode=view&amp;f=$folder_id&amp;p=$message_id");				$remove_message_url = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=$id&amp;mode=compose&amp;action=delete&amp;p=$message_id");				$row_indicator = '';				foreach ($color_rows as $var)				{					if (($var != 'friend' && $var != 'foe' && $row['pm_' . $var])						||						(($var == 'friend' || $var == 'foe') && isset(${$var}[$row['author_id']]) && ${$var}[$row['author_id']]))					{						$row_indicator = $var;						break;					}				}				// Send vars to template				$template->assign_block_vars('messagerow', array(					'PM_CLASS'			=> ($row_indicator) ? 'pm_' . $row_indicator . '_colour' : '',					'MESSAGE_AUTHOR_FULL'		=> get_username_string('full', $row['author_id'], $row['username'], $row['user_colour'], $row['username']),					'MESSAGE_AUTHOR_COLOUR'		=> get_username_string('colour', $row['author_id'], $row['username'], $row['user_colour'], $row['username']),					'MESSAGE_AUTHOR'			=> get_username_string('username', $row['author_id'], $row['username'], $row['user_colour'], $row['username']),					'U_MESSAGE_AUTHOR'			=> get_username_string('profile', $row['author_id'], $row['username'], $row['user_colour'], $row['username']),					'FOLDER_ID'			=> $folder_id,					'MESSAGE_ID'		=> $message_id,					'SENT_TIME'			=> $user->format_date($row['message_time']),					'SUBJECT'			=> censor_text($row['message_subject']),					'FOLDER'			=> (isset($folder[$row['folder_id']])) ? $folder[$row['folder_id']]['folder_name'] : '',					'U_FOLDER'			=> (isset($folder[$row['folder_id']])) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'folder=' . $row['folder_id']) : '',					'PM_ICON_IMG'		=> (!empty($icons[$row['icon_id']])) ? '<img src="' . $config['icons_path'] . '/' . $icons[$row['icon_id']]['img'] . '" width="' . $icons[$row['icon_id']]['width'] . '" height="' . $icons[$row['icon_id']]['height'] . '" alt="" title="" />' : '',					'PM_ICON_URL'		=> (!empty($icons[$row['icon_id']])) ? $config['icons_path'] . '/' . $icons[$row['icon_id']]['img'] : '',					'FOLDER_IMG'		=> $user->img($folder_img, $folder_alt),					'FOLDER_IMG_SRC'	=> $user->img($folder_img, $folder_alt, false, '', 'src'),					'PM_IMG'			=> ($row_indicator) ? $user->img('pm_' . $row_indicator, '') : '',					'ATTACH_ICON_IMG'	=> ($auth->acl_get('u_pm_download') && $row['message_attachment'] && $config['allow_pm_attach']) ? $user->img('icon_topic_attach', $user->lang['TOTAL_ATTACHMENTS']) : '',					'S_PM_UNREAD'		=> ($row['pm_unread']) ? true : false,					'S_PM_DELETED'		=> ($row['pm_deleted']) ? true : false,					'S_PM_REPORTED'		=> (isset($row['report_id'])) ? true : false,					'S_AUTHOR_DELETED'	=> ($row['author_id'] == ANONYMOUS) ? true : false,					'U_VIEW_PM'			=> ($row['pm_deleted']) ? '' : $view_message_url,					'U_REMOVE_PM'		=> ($row['pm_deleted']) ? $remove_message_url : '',					'U_MCP_REPORT'		=> (isset($row['report_id'])) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=pm_reports&amp;mode=pm_report_details&amp;r=' . $row['report_id']) : '',					'RECIPIENTS'		=> ($folder_id == PRIVMSGS_OUTBOX || $folder_id == PRIVMSGS_SENTBOX) ? implode(', ', $address_list[$message_id]) : '')				);			}			unset($folder_info['rowset']);			$template->assign_vars(array(				'S_SHOW_RECIPIENTS'		=> ($folder_id == PRIVMSGS_OUTBOX || $folder_id == PRIVMSGS_SENTBOX) ? true : false,				'S_SHOW_COLOUR_LEGEND'	=> true,				'REPORTED_IMG'			=> $user->img('icon_topic_reported', 'PM_REPORTED'),				'S_PM_ICONS'			=> ($config['enable_pm_icons']) ? true : false)			);		}	}	else	{		$export_type = request_var('export_option', '');		$enclosure = request_var('enclosure', '');		$delimiter = request_var('delimiter', '');		if ($export_type == 'CSV' && ($delimiter === '' || $enclosure === ''))		{			$template->assign_var('PROMPT', true);		}		else		{			// Build Recipient List if in outbox/sentbox			$address_temp = $address = $data = array();			if ($folder_id == PRIVMSGS_OUTBOX || $folder_id == PRIVMSGS_SENTBOX)			{				foreach ($folder_info['rowset'] as $message_id => $row)				{					$address_temp[$message_id] = rebuild_header(array('to' => $row['to_address'], 'bcc' => $row['bcc_address']));					$address[$message_id] = array();				}			}			foreach ($folder_info['pm_list'] as $message_id)			{				$row = &$folder_info['rowset'][$message_id];				include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);				$sql = 'SELECT p.message_text, p.bbcode_uid					FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p, ' . USERS_TABLE . ' u					WHERE t.user_id = ' . $user->data['user_id'] . "						AND p.author_id = u.user_id						AND t.folder_id = $folder_id						AND t.msg_id = p.msg_id						AND p.msg_id = $message_id";				$result = $db->sql_query_limit($sql, 1);				$message_row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$_types = array('u', 'g');				foreach ($_types as $ug_type)				{					if (isset($address_temp[$message_id][$ug_type]) && sizeof($address_temp[$message_id][$ug_type]))					{						if (!isset($address[$message_id][$ug_type]))						{							$address[$message_id][$ug_type] = array();						}						if ($ug_type == 'u')						{							$sql = 'SELECT user_id as id, username as name								FROM ' . USERS_TABLE . '								WHERE ';						}						else						{							$sql = 'SELECT group_id as id, group_name as name								FROM ' . GROUPS_TABLE . '								WHERE ';						}						$sql .= $db->sql_in_set(($ug_type == 'u') ? 'user_id' : 'group_id', array_map('intval', array_keys($address_temp[$message_id][$ug_type])));						$result = $db->sql_query($sql);						while ($info_row = $db->sql_fetchrow($result))						{							$address[$message_id][$ug_type][$address_temp[$message_id][$ug_type][$info_row['id']]][] = $info_row['name'];							unset($address_temp[$message_id][$ug_type][$info_row['id']]);						}						$db->sql_freeresult($result);					}				}				// There is the chance that all recipients of the message got deleted. To avoid creating 				// exports without recipients, we add a bogus "undisclosed recipient".				if (!(isset($address[$message_id]['g']) && sizeof($address[$message_id]['g'])) && 				    !(isset($address[$message_id]['u']) && sizeof($address[$message_id]['u'])))				{					$address[$message_id]['u'] = array();					$address[$message_id]['u']['to'] = array();					$address[$message_id]['u']['to'][] = $user->lang['UNDISCLOSED_RECIPIENT'];				}				decode_message($message_row['message_text'], $message_row['bbcode_uid']);								$data[] = array(					'subject'	=> censor_text($row['message_subject']),					'sender'	=> $row['username'],					// ISO 8601 date. For PHP4 we are able to hardcode the timezone because $user->format_date() does not set it.					'date'		=> $user->format_date($row['message_time'], (PHP_VERSION >= 5) ? 'c' : "Y-m-d\TH:i:s+00:00", true),					'to'		=> ($folder_id == PRIVMSGS_OUTBOX || $folder_id == PRIVMSGS_SENTBOX) ? $address[$message_id] : '',					'message'	=> $message_row['message_text']				);			}			switch ($export_type)			{				case 'CSV':				case 'CSV_EXCEL':					$mimetype = 'text/csv';					$filetype = 'csv';					if ($export_type == 'CSV_EXCEL')					{						$enclosure = '"';						$delimiter = ',';						$newline = "\r\n";					}					else					{						$newline = "\n";					}					$string = '';					foreach ($data as $value)					{						$recipients = $value['to'];						$value['to'] = $value['bcc'] = '';						if (is_array($recipients))						{							foreach ($recipients as $values)							{								$value['bcc'] .= (isset($values['bcc']) && is_array($values['bcc'])) ? ',' . implode(',', $values['bcc']) : '';								$value['to'] .= (isset($values['to']) && is_array($values['to'])) ? ',' . implode(',', $values['to']) : '';							}							// Remove the commas which will appear before the first entry.							$value['to'] = substr($value['to'], 1);							$value['bcc'] = substr($value['bcc'], 1);						}						foreach ($value as $tag => $text)						{							$cell = str_replace($enclosure, $enclosure . $enclosure, $text);							if (strpos($cell, $enclosure) !== false || strpos($cell, $delimiter) !== false || strpos($cell, $newline) !== false)							{								$string .= $enclosure . $text . $enclosure . $delimiter;							}							else							{								$string .= $cell . $delimiter;							}						}						$string = substr($string, 0, -1) . $newline;					}				break;				case 'XML':					$mimetype = 'application/xml';					$filetype = 'xml';					$string = '<?xml version="1.0"?>' . "\n";					$string .= "<phpbb>\n";					foreach ($data as $value)					{						$string .= "\t<privmsg>\n";						if (is_array($value['to']))						{							foreach ($value['to'] as $key => $values)							{								foreach ($values as $type => $types)								{									foreach ($types as $name)									{										$string .= "\t\t<recipient type=\"$type\" status=\"$key\">$name</recipient>\n";									}								}							}						}						unset($value['to']);						foreach ($value as $tag => $text)						{							$string .= "\t\t<$tag>$text</$tag>\n";						}						$string .= "\t</privmsg>\n";					}					$string .= '</phpbb>';				break;			}			header('Pragma: no-cache');			header("Content-Type: $mimetype; name=\"data.$filetype\"");			header("Content-disposition: attachment; filename=data.$filetype");			echo $string;			exit;		}	}}/*** Get Messages from folder/user*/function get_pm_from($folder_id, $folder, $user_id){	global $user, $db, $template, $config, $auth, $phpbb_root_path, $phpEx;	$start = request_var('start', 0);	// Additional vars later, pm ordering is mostly different from post ordering. :/	$sort_days	= request_var('st', 0);	$sort_key	= request_var('sk', 't');	$sort_dir	= request_var('sd', 'd');	// PM ordering options	$limit_days = array(0 => $user->lang['ALL_MESSAGES'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);	// No sort by Author for sentbox/outbox (already only author available)	// Also, sort by msg_id for the time - private messages are not as prone to errors as posts are.	if ($folder_id == PRIVMSGS_OUTBOX || $folder_id == PRIVMSGS_SENTBOX)	{		$sort_by_text = array('t' => $user->lang['POST_TIME'], 's' => $user->lang['SUBJECT']);		$sort_by_sql = array('t' => 'p.message_time', 's' => array('p.message_subject', 'p.message_time'));	}	else	{		$sort_by_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 's' => $user->lang['SUBJECT']);		$sort_by_sql = array('a' => array('u.username_clean', 'p.message_time'), 't' => 'p.message_time', 's' => array('p.message_subject', 'p.message_time'));	}	$s_limit_days = $s_sort_key = $s_sort_dir = $u_sort_param = '';	gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);	$folder_sql = 't.folder_id = ' . (int) $folder_id;	// Limit pms to certain time frame, obtain correct pm count	if ($sort_days)	{		$min_post_time = time() - ($sort_days * 86400);		if (isset($_POST['sort']))		{			$start = 0;		}		$sql = 'SELECT COUNT(t.msg_id) AS pm_count			FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . " p			WHERE $folder_sql				AND t.user_id = $user_id				AND t.msg_id = p.msg_id				AND p.message_time >= $min_post_time";		$result = $db->sql_query_limit($sql, 1);		$pm_count = (int) $db->sql_fetchfield('pm_count');		$db->sql_freeresult($result);		$sql_limit_time = "AND p.message_time >= $min_post_time";	}	else	{		$pm_count = (!empty($folder[$folder_id]['num_messages'])) ? $folder[$folder_id]['num_messages'] : 0;		$sql_limit_time = '';	}	$template->assign_vars(array(		'PAGINATION'		=> generate_pagination(append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&amp;mode=view&amp;action=view_folder&amp;f=$folder_id&amp;$u_sort_param"), $pm_count, $config['topics_per_page'], $start),		'PAGE_NUMBER'		=> on_page($pm_count, $config['topics_per_page'], $start),		'TOTAL_MESSAGES'	=> (($pm_count == 1) ? $user->lang['VIEW_PM_MESSAGE'] : sprintf($user->lang['VIEW_PM_MESSAGES'], $pm_count)),		'POST_IMG'		=> (!$auth->acl_get('u_sendpm')) ? $user->img('button_topic_locked', 'POST_PM_LOCKED') : $user->img('button_pm_new', 'POST_NEW_PM'),		'S_NO_AUTH_SEND_MESSAGE'	=> !$auth->acl_get('u_sendpm'),		'S_SELECT_SORT_DIR'		=> $s_sort_dir,		'S_SELECT_SORT_KEY'		=> $s_sort_key,		'S_SELECT_SORT_DAYS'	=> $s_limit_days,		'S_TOPIC_ICONS'			=> ($config['enable_pm_icons']) ? true : false,		'U_POST_NEW_TOPIC'	=> ($auth->acl_get('u_sendpm')) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=compose') : '',		'S_PM_ACTION'		=> append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&amp;mode=view&amp;action=view_folder&amp;f=$folder_id" . (($start !== 0) ? "&amp;start=$start" : '')),	));	// Grab all pm data	$rowset = $pm_list = array();	// If the user is trying to reach late pages, start searching from the end	$store_reverse = false;	$sql_limit = $config['topics_per_page'];	if ($start > $pm_count / 2)	{		$store_reverse = true;		if ($start + $config['topics_per_page'] > $pm_count)		{			$sql_limit = min($config['topics_per_page'], max(1, $pm_count - $start));		}		// Select the sort order		$direction = ($sort_dir == 'd') ? 'ASC' : 'DESC';		$sql_start = max(0, $pm_count - $sql_limit - $start);	}	else	{		// Select the sort order		$direction = ($sort_dir == 'd') ? 'DESC' : 'ASC';		$sql_start = $start;	}	// Sql sort order	if (is_array($sort_by_sql[$sort_key]))	{		$sql_sort_order = implode(' ' . $direction . ', ', $sort_by_sql[$sort_key]) . ' ' . $direction;	}	else	{		$sql_sort_order = $sort_by_sql[$sort_key] . ' ' . $direction;	}	$sql = 'SELECT t.*, p.root_level, p.message_time, p.message_subject, p.icon_id, p.to_address, p.message_attachment, p.bcc_address, u.username, u.username_clean, u.user_colour, p.message_reported		FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p, ' . USERS_TABLE . " u		WHERE t.user_id = $user_id			AND p.author_id = u.user_id			AND $folder_sql			AND t.msg_id = p.msg_id			$sql_limit_time		ORDER BY $sql_sort_order";	$result = $db->sql_query_limit($sql, $sql_limit, $sql_start);	$pm_reported = array();	while ($row = $db->sql_fetchrow($result))	{		$rowset[$row['msg_id']] = $row;		$pm_list[] = $row['msg_id'];		if ($row['message_reported'])		{			$pm_reported[] = $row['msg_id'];		}	}	$db->sql_freeresult($result);	// Fetch the report_ids, if there are any reported pms.	if (!empty($pm_reported) && $auth->acl_getf_global('m_report'))	{		$sql = 'SELECT pm_id, report_id			FROM ' . REPORTS_TABLE . '			WHERE report_closed = 0				AND ' . $db->sql_in_set('pm_id', $pm_reported);		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$rowset[$row['pm_id']]['report_id'] = $row['report_id'];		}		$db->sql_freeresult($result);	}	$pm_list = ($store_reverse) ? array_reverse($pm_list) : $pm_list;	return array(		'pm_count'	=> $pm_count,		'pm_list'	=> $pm_list,		'rowset'	=> $rowset	);}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_captcha_info{	function module()	{		return array(			'filename'	=> 'acp_captcha',			'title'		=> 'ACP_CAPTCHA',			'version'	=> '1.0.0',			'modes'		=> array(				'visual'		=> array('title' => 'ACP_VC_SETTINGS', 'auth' => 'acl_a_board', 'cat' => array('ACP_BOARD_CONFIGURATION')),				'img'			=> array('title' => 'ACP_VC_CAPTCHA_DISPLAY', 'auth' => 'acl_a_board', 'cat' => array('ACP_BOARD_CONFIGURATION'), 'display' => false)			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ucp_activate* User activation* @package ucp*/class ucp_activate{	var $u_action;	function main($id, $mode)	{		global $config, $phpbb_root_path, $phpEx;		global $db, $user, $auth, $template;		$user_id = request_var('u', 0);		$key = request_var('k', '');		$sql = 'SELECT user_id, username, user_type, user_email, user_newpasswd, user_lang, user_notify_type, user_actkey, user_inactive_reason			FROM ' . USERS_TABLE . "			WHERE user_id = $user_id";		$result = $db->sql_query($sql);		$user_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$user_row)		{			trigger_error('NO_USER');		}		if ($user_row['user_type'] <> USER_INACTIVE && !$user_row['user_newpasswd'])		{			meta_refresh(3, append_sid("{$phpbb_root_path}index.$phpEx"));			trigger_error('ALREADY_ACTIVATED');		}		if (($user_row['user_inactive_reason'] ==  INACTIVE_MANUAL) || $user_row['user_actkey'] != $key)		{			trigger_error('WRONG_ACTIVATION');		}		// Do not allow activating by non administrators when admin activation is on		// Only activation type the user should be able to do is INACTIVE_REMIND		// or activate a new password which is not an activation state :@		if (!$user_row['user_newpasswd'] && $user_row['user_inactive_reason'] != INACTIVE_REMIND && $config['require_activation'] == USER_ACTIVATION_ADMIN && !$auth->acl_get('a_user'))		{			if (!$user->data['is_registered'])			{				login_box('', $user->lang['NO_AUTH_OPERATION']);			}			trigger_error('NO_AUTH_OPERATION');		}		$update_password = ($user_row['user_newpasswd']) ? true : false;		if ($update_password)		{			$sql_ary = array(				'user_actkey'		=> '',				'user_password'		=> $user_row['user_newpasswd'],				'user_newpasswd'	=> '',				'user_pass_convert'	=> 0,				'user_login_attempts'	=> 0,			);			$sql = 'UPDATE ' . USERS_TABLE . '				SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '				WHERE user_id = ' . $user_row['user_id'];			$db->sql_query($sql);			add_log('user', $user_row['user_id'], 'LOG_USER_NEW_PASSWORD', $user_row['username']);		}		if (!$update_password)		{			include_once($phpbb_root_path . 'includes/functions_user.' . $phpEx);			user_active_flip('activate', $user_row['user_id']);			$sql = 'UPDATE ' . USERS_TABLE . "				SET user_actkey = ''				WHERE user_id = {$user_row['user_id']}";			$db->sql_query($sql);			// Create the correct logs			add_log('user', $user_row['user_id'], 'LOG_USER_ACTIVE_USER');			if ($auth->acl_get('a_user'))			{				add_log('admin', 'LOG_USER_ACTIVE', $user_row['username']);			}		}		if ($config['require_activation'] == USER_ACTIVATION_ADMIN && !$update_password)		{			include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);			$messenger = new messenger(false);			$messenger->template('admin_welcome_activated', $user_row['user_lang']);			$messenger->to($user_row['user_email'], $user_row['username']);			$messenger->anti_abuse_headers($config, $user);			$messenger->assign_vars(array(				'USERNAME'	=> htmlspecialchars_decode($user_row['username']))			);			$messenger->send($user_row['user_notify_type']);			$message = 'ACCOUNT_ACTIVE_ADMIN';		}		else		{			if (!$update_password)			{				$message = ($user_row['user_inactive_reason'] == INACTIVE_PROFILE) ? 'ACCOUNT_ACTIVE_PROFILE' : 'ACCOUNT_ACTIVE';			}			else			{				$message = 'PASSWORD_ACTIVATED';			}		}		meta_refresh(3, append_sid("{$phpbb_root_path}index.$phpEx"));		trigger_error($user->lang[$message]);	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);include($phpbb_root_path . 'includes/functions_display.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup('mcp');$forum_id		= request_var('f', 0);$post_id		= request_var('p', 0);$pm_id			= request_var('pm', 0);$reason_id		= request_var('reason_id', 0);$report_text	= utf8_normalize_nfc(request_var('report_text', '', true));$user_notify	= ($user->data['is_registered']) ? request_var('notify', 0) : false;$submit = (isset($_POST['submit'])) ? true : false;if (!$post_id && (!$pm_id || !$config['allow_pm_report'])){	trigger_error('NO_POST_SELECTED');}if ($post_id){	$redirect_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;p=$post_id") . "#p$post_id";	$return_forum_url = append_sid("{$phpbb_root_path}viewforum.$phpEx", "f=$forum_id");	$pm_id = 0;}else{	$redirect_url = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&mode=view&p=$pm_id");	$return_forum_url = '';	$post_id = 0;	$forum_id = 0;}// Has the report been cancelled?if (isset($_POST['cancel'])){	redirect($redirect_url);}if ($post_id){	// Grab all relevant data	$sql = 'SELECT t.*, p.*		FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . " t		WHERE p.post_id = $post_id			AND p.topic_id = t.topic_id";	$result = $db->sql_query($sql);	$report_data = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$report_data)	{		trigger_error('POST_NOT_EXIST');	}	$forum_id = (int) ($report_data['forum_id']) ? $report_data['forum_id'] : $forum_id;	$topic_id = (int) $report_data['topic_id'];	$sql = 'SELECT *		FROM ' . FORUMS_TABLE . '		WHERE forum_id = ' . $forum_id;	$result = $db->sql_query($sql);	$forum_data = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$forum_data)	{		trigger_error('FORUM_NOT_EXIST');	}	// Check required permissions	$acl_check_ary = array('f_list' => 'POST_NOT_EXIST', 'f_read' => 'USER_CANNOT_READ', 'f_report' => 'USER_CANNOT_REPORT');	foreach ($acl_check_ary as $acl => $error)	{		if (!$auth->acl_get($acl, $forum_id))		{			trigger_error($error);		}	}	unset($acl_check_ary);	if ($report_data['post_reported'])	{		$message = $user->lang['ALREADY_REPORTED'];		$message .= '<br /><br />' . sprintf($user->lang['RETURN_TOPIC'], '<a href="' . $redirect_url . '">', '</a>');		$message .= '<br /><br />' . sprintf($user->lang['RETURN_FORUM'], '<a href="' . $return_forum_url . '">', '</a>');		trigger_error($message);	}}else{	// Grab all relevant data	$sql = 'SELECT p.*, pt.*		FROM ' . PRIVMSGS_TABLE . ' p, ' . PRIVMSGS_TO_TABLE . " pt		WHERE p.msg_id = $pm_id			AND p.msg_id = pt.msg_id			AND (p.author_id = " . $user->data['user_id'] . " OR pt.user_id = " . $user->data['user_id'] . ")";	$result = $db->sql_query($sql);	$report_data = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$report_data)	{		$user->add_lang('ucp');		trigger_error('NO_MESSAGE');	}	if ($report_data['message_reported'])	{		$message = $user->lang['ALREADY_REPORTED_PM'];		$message .= '<br /><br />' . sprintf($user->lang['RETURN_PM'], '<a href="' . $redirect_url . '">', '</a>');		trigger_error($message);	}}// Submit report?if ($submit && $reason_id){	$sql = 'SELECT *		FROM ' . REPORTS_REASONS_TABLE . "		WHERE reason_id = $reason_id";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$row || (!$report_text && strtolower($row['reason_title']) == 'other'))	{		trigger_error('EMPTY_REPORT');	}	$sql_ary = array(		'reason_id'		=> (int) $reason_id,		'post_id'		=> $post_id,		'pm_id'			=> $pm_id,		'user_id'		=> (int) $user->data['user_id'],		'user_notify'	=> (int) $user_notify,		'report_closed'	=> 0,		'report_time'	=> (int) time(),		'report_text'	=> (string) $report_text	);	$sql = 'INSERT INTO ' . REPORTS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);	$db->sql_query($sql);	$report_id = $db->sql_nextid();	if ($post_id)	{		$sql = 'UPDATE ' . POSTS_TABLE . '			SET post_reported = 1			WHERE post_id = ' . $post_id;		$db->sql_query($sql);		if (!$report_data['topic_reported'])		{			$sql = 'UPDATE ' . TOPICS_TABLE . '				SET topic_reported = 1				WHERE topic_id = ' . $report_data['topic_id'] . '					OR topic_moved_id = ' . $report_data['topic_id'];			$db->sql_query($sql);		}		$lang_return = $user->lang['RETURN_TOPIC'];		$lang_success = $user->lang['POST_REPORTED_SUCCESS'];	}	else	{		$sql = 'UPDATE ' . PRIVMSGS_TABLE . '			SET message_reported = 1			WHERE msg_id = ' . $pm_id;		$db->sql_query($sql);		$sql_ary = array(			'msg_id'		=> $pm_id,			'user_id'		=> ANONYMOUS,			'author_id'		=> (int) $report_data['author_id'],			'pm_deleted'	=> 0,			'pm_new'		=> 0,			'pm_unread'		=> 0,			'pm_replied'	=> 0,			'pm_marked'		=> 0,			'pm_forwarded'	=> 0,			'folder_id'		=> PRIVMSGS_INBOX,		);		$sql = 'INSERT INTO ' . PRIVMSGS_TO_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);		$db->sql_query($sql);		$lang_return = $user->lang['RETURN_PM'];		$lang_success = $user->lang['PM_REPORTED_SUCCESS'];	}	meta_refresh(3, $redirect_url);	$message = $lang_success . '<br /><br />' . sprintf($lang_return, '<a href="' . $redirect_url . '">', '</a>');	if ($return_forum_url)	{		$message .= '<br /><br />' . sprintf($user->lang['RETURN_FORUM'], '<a href="' . $return_forum_url . '">', '</a>');	}	trigger_error($message);}// Generate the reasonsdisplay_reasons($reason_id);$page_title = ($pm_id) ? $user->lang['REPORT_MESSAGE'] : $user->lang['REPORT_POST'];$template->assign_vars(array(	'S_REPORT_POST'		=> ($pm_id) ? false : true,	'REPORT_TEXT'		=> $report_text,	'S_REPORT_ACTION'	=> append_sid("{$phpbb_root_path}report.$phpEx", 'f=' . $forum_id . '&amp;p=' . $post_id . '&amp;pm=' . $pm_id),	'S_NOTIFY'			=> $user_notify,	'S_CAN_NOTIFY'		=> ($user->data['is_registered']) ? true : false));generate_forum_nav($forum_data);// Start output of pagepage_header($page_title);$template->set_filenames(array(	'body' => 'report_body.html'));page_footer();?>
<?php/**** acp_posting [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// BBCodes// Note to translators: you can translate everything but what's between { and }$lang = array_merge($lang, array(	'ACP_BBCODES_EXPLAIN'		=> 'BBCode is a special implementation of HTML offering greater control over what and how something is displayed. From this page you can add, remove and edit custom BBCodes.',	'ADD_BBCODE'				=> 'Add a new BBCode',	'BBCODE_DANGER'				=> 'The BBCode you are trying to add seems to use a {TEXT} token inside a HTML attribute. This is a possible XSS security issue. Try using the more restrictive {SIMPLETEXT} or {INTTEXT} types instead. Only proceed if you understand the risks involved and you consider the use of {TEXT} absolutely unavoidable.',	'BBCODE_DANGER_PROCEED'		=> 'Proceed', //'I understand the risk',	'BBCODE_ADDED'				=> 'BBCode added successfully.',	'BBCODE_EDITED'				=> 'BBCode edited successfully.',	'BBCODE_NOT_EXIST'			=> 'The BBCode you selected does not exist.',	'BBCODE_HELPLINE'			=> 'Help line',	'BBCODE_HELPLINE_EXPLAIN'	=> 'This field contains the mouse over text of the BBCode.',	'BBCODE_HELPLINE_TEXT'		=> 'Help line text',	'BBCODE_HELPLINE_TOO_LONG'	=> 'The help line you entered is too long.',	'BBCODE_INVALID_TAG_NAME'	=> 'The BBCode tag name that you selected already exists.',	'BBCODE_INVALID'			=> 'Your BBCode is constructed in an invalid form.',	'BBCODE_OPEN_ENDED_TAG'		=> 'Your custom BBCode must contain both an opening and a closing tag.',	'BBCODE_TAG'				=> 'Tag',	'BBCODE_TAG_TOO_LONG'		=> 'The tag name you selected is too long.',	'BBCODE_TAG_DEF_TOO_LONG'	=> 'The tag definition that you have entered is too long, please shorten your tag definition.',	'BBCODE_USAGE'				=> 'BBCode usage',	'BBCODE_USAGE_EXAMPLE'		=> '[highlight={COLOR}]{TEXT}[/highlight]<br /><br />[font={SIMPLETEXT1}]{SIMPLETEXT2}[/font]',	'BBCODE_USAGE_EXPLAIN'		=> 'Here you define how to use the BBCode. Replace any variable input by the corresponding token (%ssee below%s).',	'EXAMPLE'						=> 'Example:',	'EXAMPLES'						=> 'Examples:',	'HTML_REPLACEMENT'				=> 'HTML replacement',	'HTML_REPLACEMENT_EXAMPLE'		=> '&lt;span style="background-color: {COLOR};"&gt;{TEXT}&lt;/span&gt;<br /><br />&lt;span style="font-family: {SIMPLETEXT1};"&gt;{SIMPLETEXT2}&lt;/span&gt;',	'HTML_REPLACEMENT_EXPLAIN'		=> 'Here you define the default HTML replacement. Do not forget to put back tokens you used above!',	'TOKEN'					=> 'Token',	'TOKENS'				=> 'Tokens',	'TOKENS_EXPLAIN'		=> 'Tokens are placeholders for user input. The input will be validated only if it matches the corresponding definition. If needed, you can number them by adding a number as the last character between the braces, e.g. {TEXT1}, {TEXT2}.<br /><br />Within the HTML replacement you can also use any language string present in your language/ directory like this: {L_<em>&lt;STRINGNAME&gt;</em>} where <em>&lt;STRINGNAME&gt;</em> is the name of the translated string you want to add. For example, {L_WROTE} will be displayed as wrote or its translation according to users locale.<br /><br /><strong>Please note that only tokens listed below are able to be used within custom BBCodes.</strong>',	'TOKEN_DEFINITION'		=> 'What can it be?',	'TOO_MANY_BBCODES'		=> 'You cannot create any more BBCodes. Please remove one or more BBCodes then try again.',	'tokens'	=>	array(		'TEXT'			=> 'Any text, including foreign characters, numbers, etc You should not use this token in HTML tags. Instead try to use IDENTIFIER, INTTEXT or SIMPLETEXT.',		'SIMPLETEXT'	=> 'Characters from the latin alphabet (A-Z), numbers, spaces, commas, dots, minus, plus, hyphen and underscore',		'INTTEXT'		=> 'Unicode letter characters, numbers, spaces, commas, dots, minus, plus, hyphen, underscore and whitespaces.',		'IDENTIFIER'	=> 'Characters from the latin alphabet (A-Z), numbers, hyphen and underscore',		'NUMBER'		=> 'Any series of digits',		'EMAIL'			=> 'A valid e-mail address',		'URL'			=> 'A valid URL using any protocol (http, ftp, etc cannot be used for javascript exploits). If none is given, http:// is prefixed to the string.',		'LOCAL_URL'		=> 'A local URL. The URL must be relative to the topic page and cannot contain a server name or protocol.',		'COLOR'			=> 'A HTML colour, can be either in the numeric form <samp>#FF1234</samp> or a <a href="http://www.w3.org/TR/CSS21/syndata.html#value-def-color">CSS colour keyword</a> such as <samp>fuchsia</samp> or <samp>InactiveBorder</samp>'	)));// Smilies and topic icons$lang = array_merge($lang, array(	'ACP_ICONS_EXPLAIN'		=> 'From this page you can add, remove and edit the icons users may add to their topics or posts. These icons are generally displayed next to topic titles on the forum listing, or the post subjects in topic listings. You can also install and create new packages of icons.',	'ACP_SMILIES_EXPLAIN'	=> 'Smilies or emoticons are typically small, sometimes animated images used to convey an emotion or feeling. From this page you can add, remove and edit the emoticons users can use in their posts and private messages. You can also install and create new packages of smilies.',	'ADD_SMILIES'			=> 'Add multiple smilies',	'ADD_SMILEY_CODE'		=> 'Add additional smiley code',	'ADD_ICONS'				=> 'Add multiple icons',	'AFTER_ICONS'			=> 'After %s',	'AFTER_SMILIES'			=> 'After %s',	'CODE'						=> 'Code',	'CURRENT_ICONS'				=> 'Current icons',	'CURRENT_ICONS_EXPLAIN'		=> 'Choose what to do with the currently installed icons.',	'CURRENT_SMILIES'			=> 'Current smilies',	'CURRENT_SMILIES_EXPLAIN'	=> 'Choose what to do with the currently installed smilies.',	'DISPLAY_ON_POSTING'		=> 'Display on posting page',	'DISPLAY_POSTING'			=> 'On posting page',	'DISPLAY_POSTING_NO'		=> 'Not on posting page',	'EDIT_ICONS'				=> 'Edit icons',	'EDIT_SMILIES'				=> 'Edit smilies',	'EMOTION'					=> 'Emotion',	'EXPORT_ICONS'				=> 'Export and download icons.pak',	'EXPORT_ICONS_EXPLAIN'		=> '%sOn clicking this link, the configuration for your installed icons will be packaged into <samp>icons.pak</samp> which once downloaded can be used to create a <samp>.zip</samp> or <samp>.tgz</samp> file containing all of your icons plus this <samp>icons.pak</samp> configuration file%s.',	'EXPORT_SMILIES'			=> 'Export and download smilies.pak',	'EXPORT_SMILIES_EXPLAIN'	=> '%sOn clicking this link, the configuration for your installed smilies will be packaged into <samp>smilies.pak</samp> which once downloaded can be used to create a <samp>.zip</samp> or <samp>.tgz</samp> file containing all of your smilies plus this <samp>smilies.pak</samp> configuration file%s.',	'FIRST'			=> 'First',	'ICONS_ADD'				=> 'Add a new icon',	'ICONS_NONE_ADDED'		=> 'No icons were added.',	'ICONS_ONE_ADDED'		=> 'The icon has been added successfully.',	'ICONS_ADDED'			=> 'The icons have been added successfully.',	'ICONS_CONFIG'			=> 'Icon configuration',	'ICONS_DELETED'			=> 'The icon has been removed successfully.',	'ICONS_EDIT'			=> 'Edit icon',	'ICONS_ONE_EDITED'		=> 'The icon has been updated successfully.',	'ICONS_NONE_EDITED'		=> 'No icons were updated.',	'ICONS_EDITED'			=> 'The icons have been updated successfully.',	'ICONS_HEIGHT'			=> 'Icon height',	'ICONS_IMAGE'			=> 'Icon image',	'ICONS_IMPORTED'		=> 'The icons pack has been installed successfully.',	'ICONS_IMPORT_SUCCESS'	=> 'The icons pack was imported successfully.',	'ICONS_LOCATION'		=> 'Icon location',	'ICONS_NOT_DISPLAYED'	=> 'The following icons are not displayed on the posting page',	'ICONS_ORDER'			=> 'Icon order',	'ICONS_URL'				=> 'Icon image file',	'ICONS_WIDTH'			=> 'Icon width',	'IMPORT_ICONS'			=> 'Install icons package',	'IMPORT_SMILIES'		=> 'Install smilies package',	'KEEP_ALL'			=> 'Keep all',	'MASS_ADD_SMILIES'	=> 'Add multiple smilies',	'NO_ICONS_ADD'		=> 'There are no icons available for adding.',	'NO_ICONS_EDIT'		=> 'There are no icons available for modifying.',	'NO_ICONS_EXPORT'	=> 'You have no icons with which to create a package.',	'NO_ICONS_PAK'		=> 'No icon packages found.',	'NO_SMILIES_ADD'	=> 'There are no smilies available for adding.',	'NO_SMILIES_EDIT'	=> 'There are no smilies available for modifying.',	'NO_SMILIES_EXPORT'	=> 'You have no smilies with which to create a package.',	'NO_SMILIES_PAK'	=> 'No smiley packages found.',	'PAK_FILE_NOT_READABLE'		=> 'Could not read <samp>.pak</samp> file.',	'REPLACE_MATCHES'	=> 'Replace matches',	'SELECT_PACKAGE'			=> 'Select a package file',	'SMILIES_ADD'				=> 'Add a new smiley',	'SMILIES_NONE_ADDED'		=> 'No smilies were added.',	'SMILIES_ONE_ADDED'			=> 'The smiley has been added successfully.',	'SMILIES_ADDED'				=> 'The smilies have been added successfully.',	'SMILIES_CODE'				=> 'Smiley code',	'SMILIES_CONFIG'			=> 'Smiley configuration',	'SMILIES_DELETED'			=> 'The smiley has been removed successfully.',	'SMILIES_EDIT'				=> 'Edit smiley',	'SMILIE_NO_CODE'			=> 'The smiley %s was ignored, as there was no code entered.',	'SMILIE_NO_EMOTION'			=> 'The smiley %s was ignored, as there was no emotion entered.',	'SMILIE_NO_FILE'			=> 'The smiley %s was ignored, as the file is missing.',	'SMILIES_NONE_EDITED'		=> 'No smilies were updated.',	'SMILIES_ONE_EDITED'		=> 'The smiley has been updated successfully.',	'SMILIES_EDITED'			=> 'The smilies have been updated successfully.',	'SMILIES_EMOTION'			=> 'Emotion',	'SMILIES_HEIGHT'			=> 'Smiley height',	'SMILIES_IMAGE'				=> 'Smiley image',	'SMILIES_IMPORTED'			=> 'The smilies pack has been installed successfully.',	'SMILIES_IMPORT_SUCCESS'	=> 'The smilies pack was imported successfully.',	'SMILIES_LOCATION'			=> 'Smiley location',	'SMILIES_NOT_DISPLAYED'		=> 'The following smilies are not displayed on the posting page',	'SMILIES_ORDER'				=> 'Smiley order',	'SMILIES_URL'				=> 'Smiley image file',	'SMILIES_WIDTH'				=> 'Smiley width',	'TOO_MANY_SMILIES'			=> 'Limit of %d smilies reached.',	'WRONG_PAK_TYPE'	=> 'The specified package does not contain the appropriate data.',));// Word censors$lang = array_merge($lang, array(	'ACP_WORDS_EXPLAIN'		=> 'From this control panel you can add, edit, and remove words that will be automatically censored on your forums. People are still allowed to register with usernames containing these words. Wildcards (*) are accepted in the word field, e.g. *test* will match detestable, test* would match testing, *test would match detest.',	'ADD_WORD'				=> 'Add new word',	'EDIT_WORD'		=> 'Edit word censor',	'ENTER_WORD'	=> 'You must enter a word and its replacement.',	'NO_WORD'	=> 'No word selected for editing.',	'REPLACEMENT'	=> 'Replacement',	'UPDATE_WORD'	=> 'Update word censor',	'WORD'				=> 'Word',	'WORD_ADDED'		=> 'The word censor has been successfully added.',	'WORD_REMOVED'		=> 'The selected word censor has been successfully removed.',	'WORD_UPDATED'		=> 'The selected word censor has been successfully updated.',));// Ranks$lang = array_merge($lang, array(	'ACP_RANKS_EXPLAIN'		=> 'Using this form you can add, edit, view and delete ranks. You can also create special ranks which can be applied to a user via the user management facility.',	'ADD_RANK'				=> 'Add new rank',	'MUST_SELECT_RANK'		=> 'You must select a rank.',	'NO_ASSIGNED_RANK'		=> 'No special rank assigned.',	'NO_RANK_TITLE'			=> 'You havent specified a title for the rank.',	'NO_UPDATE_RANKS'		=> 'The rank was successfully deleted. However user accounts using this rank were not updated. You will need to manually reset the rank on these accounts.',	'RANK_ADDED'			=> 'The rank was successfully added.',	'RANK_IMAGE'			=> 'Rank image',	'RANK_IMAGE_EXPLAIN'	=> 'Use this to define a small image associated with the rank. The path is relative to the root phpBB directory.',	'RANK_IMAGE_IN_USE'		=> '(In use)',	'RANK_MINIMUM'			=> 'Minimum posts',	'RANK_REMOVED'			=> 'The rank was successfully deleted.',	'RANK_SPECIAL'			=> 'Set as special rank',	'RANK_TITLE'			=> 'Rank title',	'RANK_UPDATED'			=> 'The rank was successfully updated.',));// Disallow Usernames$lang = array_merge($lang, array(	'ACP_DISALLOW_EXPLAIN'	=> 'Here you can control usernames which will not be allowed to be used. Disallowed usernames are allowed to contain a wildcard character of *.',	'ADD_DISALLOW_EXPLAIN'	=> 'You can disallow a username using the wildcard character * to match any character.',	'ADD_DISALLOW_TITLE'	=> 'Add a disallowed username',	'DELETE_DISALLOW_EXPLAIN'	=> 'You can remove a disallowed username by selecting the username from this list and clicking submit.',	'DELETE_DISALLOW_TITLE'		=> 'Remove a disallowed username',	'DISALLOWED_ALREADY'		=> 'The name you entered is already disallowed.',	'DISALLOWED_DELETED'		=> 'The disallowed username has been successfully removed.',	'DISALLOW_SUCCESSFUL'		=> 'The disallowed username has been successfully added.',	'NO_DISALLOWED'				=> 'No disallowed usernames',	'NO_USERNAME_SPECIFIED'		=> 'You havent selected or entered a username to operate with.',));// Reasons$lang = array_merge($lang, array(	'ACP_REASONS_EXPLAIN'	=> 'Here you can manage the reasons used in reports and denial messages when disapproving posts. There is one default reason (marked with a *) you are not able to remove, this reason is normally used for custom messages if no reason fits.',	'ADD_NEW_REASON'		=> 'Add new reason',	'AVAILABLE_TITLES'		=> 'Available localised reason titles',	'IS_NOT_TRANSLATED'			=> 'Reason has <strong>not</strong> been localised.',	'IS_NOT_TRANSLATED_EXPLAIN'	=> 'Reason has <strong>not</strong> been localised. If you want to provide the localised form, specify the correct key from the language files report reasons section.',	'IS_TRANSLATED'				=> 'Reason has been localised.',	'IS_TRANSLATED_EXPLAIN'		=> 'Reason has been localised. If the title you enter here is specified within the language files report reasons section, the localised form of the title and description will be used.',	'NO_REASON'					=> 'Reason could not be found.',	'NO_REASON_INFO'			=> 'You have to specify a title and a description for this reason.',	'NO_REMOVE_DEFAULT_REASON'	=> 'You are not able to remove the default reason Other.',	'REASON_ADD'				=> 'Add report/denial reason',	'REASON_ADDED'				=> 'Report/denial reason successfully added.',	'REASON_ALREADY_EXIST'		=> 'A reason with this title already exist, please enter another title for this reason.',	'REASON_DESCRIPTION'		=> 'Reason description',	'REASON_DESC_TRANSLATED'	=> 'Displayed reason description',	'REASON_EDIT'				=> 'Edit report/denial reason',	'REASON_EDIT_EXPLAIN'		=> 'Here you are able to add or edit a reason. If the reason is translated the localised version is used instead of the description entered here.',	'REASON_REMOVED'			=> 'Report/denial reason successfully removed.',	'REASON_TITLE'				=> 'Reason title',	'REASON_TITLE_TRANSLATED'	=> 'Displayed reason title',	'REASON_UPDATED'			=> 'Report/denial reason successfully updated.',	'USED_IN_REPORTS'		=> 'Used in reports',));?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ACP Permission/Auth class* @package phpBB3*/class auth_admin extends auth{	/**	* Init auth settings	*/	function auth_admin()	{		global $db, $cache;		if (($this->acl_options = $cache->get('_acl_options')) === false)		{			$sql = 'SELECT auth_option_id, auth_option, is_global, is_local				FROM ' . ACL_OPTIONS_TABLE . '				ORDER BY auth_option_id';			$result = $db->sql_query($sql);			$global = $local = 0;			$this->acl_options = array();			while ($row = $db->sql_fetchrow($result))			{				if ($row['is_global'])				{					$this->acl_options['global'][$row['auth_option']] = $global++;				}				if ($row['is_local'])				{					$this->acl_options['local'][$row['auth_option']] = $local++;				}				$this->acl_options['id'][$row['auth_option']] = (int) $row['auth_option_id'];				$this->acl_options['option'][(int) $row['auth_option_id']] = $row['auth_option'];			}			$db->sql_freeresult($result);			$cache->put('_acl_options', $this->acl_options);		}	}	/**	* Get permission mask	* This function only supports getting permissions of one type (for example a_)	*	* @param set|view $mode defines the permissions we get, view gets effective permissions (checking user AND group permissions), set only gets the user or group permission set alone	* @param mixed $user_id user ids to search for (a user_id or a group_id has to be specified at least)	* @param mixed $group_id group ids to search for, return group related settings (a user_id or a group_id has to be specified at least)	* @param mixed $forum_id forum_ids to search for. Defining a forum id also means getting local settings	* @param string $auth_option the auth_option defines the permission setting to look for (a_ for example)	* @param local|global $scope the scope defines the permission scope. If local, a forum_id is additionally required	* @param ACL_NEVER|ACL_NO|ACL_YES $acl_fill defines the mode those permissions not set are getting filled with	*/	function get_mask($mode, $user_id = false, $group_id = false, $forum_id = false, $auth_option = false, $scope = false, $acl_fill = ACL_NEVER)	{		global $db, $user;		$hold_ary = array();		$view_user_mask = ($mode == 'view' && $group_id === false) ? true : false;		if ($auth_option === false || $scope === false)		{			return array();		}		$acl_user_function = ($mode == 'set') ? 'acl_user_raw_data' : 'acl_raw_data';		if (!$view_user_mask)		{			if ($forum_id !== false)			{				$hold_ary = ($group_id !== false) ? $this->acl_group_raw_data($group_id, $auth_option . '%', $forum_id) : $this->$acl_user_function($user_id, $auth_option . '%', $forum_id);			}			else			{				$hold_ary = ($group_id !== false) ? $this->acl_group_raw_data($group_id, $auth_option . '%', ($scope == 'global') ? 0 : false) : $this->$acl_user_function($user_id, $auth_option . '%', ($scope == 'global') ? 0 : false);			}		}		// Make sure hold_ary is filled with every setting (prevents missing forums/users/groups)		$ug_id = ($group_id !== false) ? ((!is_array($group_id)) ? array($group_id) : $group_id) : ((!is_array($user_id)) ? array($user_id) : $user_id);		$forum_ids = ($forum_id !== false) ? ((!is_array($forum_id)) ? array($forum_id) : $forum_id) : (($scope == 'global') ? array(0) : array());		// Only those options we need		$compare_options = array_diff(preg_replace('/^((?!' . $auth_option . ').+)|(' . $auth_option . ')$/', '', array_keys($this->acl_options[$scope])), array(''));		// If forum_ids is false and the scope is local we actually want to have all forums within the array		if ($scope == 'local' && !sizeof($forum_ids))		{			$sql = 'SELECT forum_id				FROM ' . FORUMS_TABLE;			$result = $db->sql_query($sql, 120);			while ($row = $db->sql_fetchrow($result))			{				$forum_ids[] = (int) $row['forum_id'];			}			$db->sql_freeresult($result);		}		if ($view_user_mask)		{			$auth2 = null;			$sql = 'SELECT user_id, user_permissions, user_type				FROM ' . USERS_TABLE . '				WHERE ' . $db->sql_in_set('user_id', $ug_id);			$result = $db->sql_query($sql);			while ($userdata = $db->sql_fetchrow($result))			{				if ($user->data['user_id'] != $userdata['user_id'])				{					$auth2 = new auth();					$auth2->acl($userdata);				}				else				{					global $auth;					$auth2 = &$auth;				}				$hold_ary[$userdata['user_id']] = array();				foreach ($forum_ids as $f_id)				{					$hold_ary[$userdata['user_id']][$f_id] = array();					foreach ($compare_options as $option)					{						$hold_ary[$userdata['user_id']][$f_id][$option] = $auth2->acl_get($option, $f_id);					}				}			}			$db->sql_freeresult($result);			unset($userdata);			unset($auth2);		}		foreach ($ug_id as $_id)		{			if (!isset($hold_ary[$_id]))			{				$hold_ary[$_id] = array();			}			foreach ($forum_ids as $f_id)			{				if (!isset($hold_ary[$_id][$f_id]))				{					$hold_ary[$_id][$f_id] = array();				}			}		}		// Now, we need to fill the gaps with $acl_fill. ;)		// Now switch back to keys		if (sizeof($compare_options))		{			$compare_options = array_combine($compare_options, array_fill(1, sizeof($compare_options), $acl_fill));		}		// Defining the user-function here to save some memory		$return_acl_fill = create_function('$value', 'return ' . $acl_fill . ';');		// Actually fill the gaps		if (sizeof($hold_ary))		{			foreach ($hold_ary as $ug_id => $row)			{				foreach ($row as $id => $options)				{					// Do not include the global auth_option					unset($options[$auth_option]);					// Not a "fine" solution, but at all it's a 1-dimensional					// array_diff_key function filling the resulting array values with zeros					// The differences get merged into $hold_ary (all permissions having $acl_fill set)					$hold_ary[$ug_id][$id] = array_merge($options,						array_map($return_acl_fill,							array_flip(								array_diff(									array_keys($compare_options), array_keys($options)								)							)						)					);				}			}		}		else		{			$hold_ary[($group_id !== false) ? $group_id : $user_id][(int) $forum_id] = $compare_options;		}		return $hold_ary;	}	/**	* Get permission mask for roles	* This function only supports getting masks for one role	*/	function get_role_mask($role_id)	{		global $db;		$hold_ary = array();		// Get users having this role set...		$sql = 'SELECT user_id, forum_id			FROM ' . ACL_USERS_TABLE . '			WHERE auth_role_id = ' . $role_id . '			ORDER BY forum_id';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$hold_ary[$row['forum_id']]['users'][] = $row['user_id'];		}		$db->sql_freeresult($result);		// Now grab groups...		$sql = 'SELECT group_id, forum_id			FROM ' . ACL_GROUPS_TABLE . '			WHERE auth_role_id = ' . $role_id . '			ORDER BY forum_id';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$hold_ary[$row['forum_id']]['groups'][] = $row['group_id'];		}		$db->sql_freeresult($result);		return $hold_ary;	}	/**	* Display permission mask (assign to template)	*/	function display_mask($mode, $permission_type, &$hold_ary, $user_mode = 'user', $local = false, $group_display = true)	{		global $template, $user, $db, $phpbb_root_path, $phpEx;		// Define names for template loops, might be able to be set		$tpl_pmask = 'p_mask';		$tpl_fmask = 'f_mask';		$tpl_category = 'category';		$tpl_mask = 'mask';		$l_acl_type = (isset($user->lang['ACL_TYPE_' . (($local) ? 'LOCAL' : 'GLOBAL') . '_' . strtoupper($permission_type)])) ? $user->lang['ACL_TYPE_' . (($local) ? 'LOCAL' : 'GLOBAL') . '_' . strtoupper($permission_type)] : 'ACL_TYPE_' . (($local) ? 'LOCAL' : 'GLOBAL') . '_' . strtoupper($permission_type);		// Allow trace for viewing permissions and in user mode		$show_trace = ($mode == 'view' && $user_mode == 'user') ? true : false;		// Get names		if ($user_mode == 'user')		{			$sql = 'SELECT user_id as ug_id, username as ug_name				FROM ' . USERS_TABLE . '				WHERE ' . $db->sql_in_set('user_id', array_keys($hold_ary)) . '				ORDER BY username_clean ASC';		}		else		{			$sql = 'SELECT group_id as ug_id, group_name as ug_name, group_type				FROM ' . GROUPS_TABLE . '				WHERE ' . $db->sql_in_set('group_id', array_keys($hold_ary)) . '				ORDER BY group_type DESC, group_name ASC';		}		$result = $db->sql_query($sql);		$ug_names_ary = array();		while ($row = $db->sql_fetchrow($result))		{			$ug_names_ary[$row['ug_id']] = ($user_mode == 'user') ? $row['ug_name'] : (($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['ug_name']] : $row['ug_name']);		}		$db->sql_freeresult($result);		// Get used forums		$forum_ids = array();		foreach ($hold_ary as $ug_id => $row)		{			$forum_ids = array_merge($forum_ids, array_keys($row));		}		$forum_ids = array_unique($forum_ids);		$forum_names_ary = array();		if ($local)		{			$forum_names_ary = make_forum_select(false, false, true, false, false, false, true);			// Remove the disabled ones, since we do not create an option field here...			foreach ($forum_names_ary as $key => $value)			{				if (!$value['disabled'])				{					continue;				}				unset($forum_names_ary[$key]);			}		}		else		{			$forum_names_ary[0] = $l_acl_type;		}		// Get available roles		$sql = 'SELECT *			FROM ' . ACL_ROLES_TABLE . "			WHERE role_type = '" . $db->sql_escape($permission_type) . "'			ORDER BY role_order ASC";		$result = $db->sql_query($sql);		$roles = array();		while ($row = $db->sql_fetchrow($result))		{			$roles[$row['role_id']] = $row;		}		$db->sql_freeresult($result);		$cur_roles = $this->acl_role_data($user_mode, $permission_type, array_keys($hold_ary));		// Build js roles array (role data assignments)		$s_role_js_array = '';		if (sizeof($roles))		{			$s_role_js_array = array();			// Make sure every role (even if empty) has its array defined			foreach ($roles as $_role_id => $null)			{				$s_role_js_array[$_role_id] = "\n" . 'role_options[' . $_role_id . '] = new Array();' . "\n";			}			$sql = 'SELECT r.role_id, o.auth_option, r.auth_setting				FROM ' . ACL_ROLES_DATA_TABLE . ' r, ' . ACL_OPTIONS_TABLE . ' o				WHERE o.auth_option_id = r.auth_option_id					AND ' . $db->sql_in_set('r.role_id', array_keys($roles));			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$flag = substr($row['auth_option'], 0, strpos($row['auth_option'], '_') + 1);				if ($flag == $row['auth_option'])				{					continue;				}				$s_role_js_array[$row['role_id']] .= 'role_options[' . $row['role_id'] . '][\'' . addslashes($row['auth_option']) . '\'] = ' . $row['auth_setting'] . '; ';			}			$db->sql_freeresult($result);			$s_role_js_array = implode('', $s_role_js_array);		}		$template->assign_var('S_ROLE_JS_ARRAY', $s_role_js_array);		unset($s_role_js_array);		// Now obtain memberships		$user_groups_default = $user_groups_custom = array();		if ($user_mode == 'user' && $group_display)		{			$sql = 'SELECT group_id, group_name, group_type				FROM ' . GROUPS_TABLE . '				ORDER BY group_type DESC, group_name ASC';			$result = $db->sql_query($sql);			$groups = array();			while ($row = $db->sql_fetchrow($result))			{				$groups[$row['group_id']] = $row;			}			$db->sql_freeresult($result);			$memberships = group_memberships(false, array_keys($hold_ary), false);			// User is not a member of any group? Bad admin, bad bad admin...			if ($memberships)			{				foreach ($memberships as $row)				{					if ($groups[$row['group_id']]['group_type'] == GROUP_SPECIAL)					{						$user_groups_default[$row['user_id']][] = $user->lang['G_' . $groups[$row['group_id']]['group_name']];					}					else					{						$user_groups_custom[$row['user_id']][] = $groups[$row['group_id']]['group_name'];					}				}			}			unset($memberships, $groups);		}		// If we only have one forum id to display or being in local mode and more than one user/group to display,		// we switch the complete interface to group by user/usergroup instead of grouping by forum		// To achieve this, we need to switch the array a bit		if (sizeof($forum_ids) == 1 || ($local && sizeof($ug_names_ary) > 1))		{			$hold_ary_temp = $hold_ary;			$hold_ary = array();			foreach ($hold_ary_temp as $ug_id => $row)			{				foreach ($forum_names_ary as $forum_id => $forum_row)				{					if (isset($row[$forum_id]))					{						$hold_ary[$forum_id][$ug_id] = $row[$forum_id];					}				}			}			unset($hold_ary_temp);			foreach ($hold_ary as $forum_id => $forum_array)			{				$content_array = $categories = array();				$this->build_permission_array($hold_ary[$forum_id], $content_array, $categories, array_keys($ug_names_ary));				$template->assign_block_vars($tpl_pmask, array(					'NAME'			=> ($forum_id == 0) ? $forum_names_ary[0] : $forum_names_ary[$forum_id]['forum_name'],					'PADDING'		=> ($forum_id == 0) ? '' : $forum_names_ary[$forum_id]['padding'],					'CATEGORIES'	=> implode('</th><th>', $categories),					'L_ACL_TYPE'	=> $l_acl_type,					'S_LOCAL'		=> ($local) ? true : false,					'S_GLOBAL'		=> (!$local) ? true : false,					'S_NUM_CATS'	=> sizeof($categories),					'S_VIEW'		=> ($mode == 'view') ? true : false,					'S_NUM_OBJECTS'	=> sizeof($content_array),					'S_USER_MODE'	=> ($user_mode == 'user') ? true : false,					'S_GROUP_MODE'	=> ($user_mode == 'group') ? true : false)				);				@reset($content_array);				while (list($ug_id, $ug_array) = each($content_array))				{					// Build role dropdown options					$current_role_id = (isset($cur_roles[$ug_id][$forum_id])) ? $cur_roles[$ug_id][$forum_id] : 0;					$s_role_options = '';					@reset($roles);					while (list($role_id, $role_row) = each($roles))					{						$role_description = (!empty($user->lang[$role_row['role_description']])) ? $user->lang[$role_row['role_description']] : nl2br($role_row['role_description']);						$role_name = (!empty($user->lang[$role_row['role_name']])) ? $user->lang[$role_row['role_name']] : $role_row['role_name'];						$title = ($role_description) ? ' title="' . $role_description . '"' : '';						$s_role_options .= '<option value="' . $role_id . '"' . (($role_id == $current_role_id) ? ' selected="selected"' : '') . $title . '>' . $role_name . '</option>';					}					if ($s_role_options)					{						$s_role_options = '<option value="0"' . ((!$current_role_id) ? ' selected="selected"' : '') . ' title="' . htmlspecialchars($user->lang['NO_ROLE_ASSIGNED_EXPLAIN']) . '">' . $user->lang['NO_ROLE_ASSIGNED'] . '</option>' . $s_role_options;					}					if (!$current_role_id && $mode != 'view')					{						$s_custom_permissions = false;						foreach ($ug_array as $key => $value)						{							if ($value['S_NEVER'] || $value['S_YES'])							{								$s_custom_permissions = true;								break;							}						}					}					else					{						$s_custom_permissions = false;					}					$template->assign_block_vars($tpl_pmask . '.' . $tpl_fmask, array(						'NAME'				=> $ug_names_ary[$ug_id],						'S_ROLE_OPTIONS'	=> $s_role_options,						'UG_ID'				=> $ug_id,						'S_CUSTOM'			=> $s_custom_permissions,						'FORUM_ID'			=> $forum_id)					);					$this->assign_cat_array($ug_array, $tpl_pmask . '.' . $tpl_fmask . '.' . $tpl_category, $tpl_mask, $ug_id, $forum_id, $show_trace, ($mode == 'view'));					unset($content_array[$ug_id]);				}				unset($hold_ary[$forum_id]);			}		}		else		{			foreach ($ug_names_ary as $ug_id => $ug_name)			{				if (!isset($hold_ary[$ug_id]))				{					continue;				}				$content_array = $categories = array();				$this->build_permission_array($hold_ary[$ug_id], $content_array, $categories, array_keys($forum_names_ary));				$template->assign_block_vars($tpl_pmask, array(					'NAME'			=> $ug_name,					'CATEGORIES'	=> implode('</th><th>', $categories),					'USER_GROUPS_DEFAULT'	=> ($user_mode == 'user' && isset($user_groups_default[$ug_id]) && sizeof($user_groups_default[$ug_id])) ? implode(', ', $user_groups_default[$ug_id]) : '',					'USER_GROUPS_CUSTOM'	=> ($user_mode == 'user' && isset($user_groups_custom[$ug_id]) && sizeof($user_groups_custom[$ug_id])) ? implode(', ', $user_groups_custom[$ug_id]) : '',					'L_ACL_TYPE'			=> $l_acl_type,					'S_LOCAL'		=> ($local) ? true : false,					'S_GLOBAL'		=> (!$local) ? true : false,					'S_NUM_CATS'	=> sizeof($categories),					'S_VIEW'		=> ($mode == 'view') ? true : false,					'S_NUM_OBJECTS'	=> sizeof($content_array),					'S_USER_MODE'	=> ($user_mode == 'user') ? true : false,					'S_GROUP_MODE'	=> ($user_mode == 'group') ? true : false)				);				@reset($content_array);				while (list($forum_id, $forum_array) = each($content_array))				{					// Build role dropdown options					$current_role_id = (isset($cur_roles[$ug_id][$forum_id])) ? $cur_roles[$ug_id][$forum_id] : 0;					$s_role_options = '';					@reset($roles);					while (list($role_id, $role_row) = each($roles))					{						$role_description = (!empty($user->lang[$role_row['role_description']])) ? $user->lang[$role_row['role_description']] : nl2br($role_row['role_description']);						$role_name = (!empty($user->lang[$role_row['role_name']])) ? $user->lang[$role_row['role_name']] : $role_row['role_name'];						$title = ($role_description) ? ' title="' . $role_description . '"' : '';						$s_role_options .= '<option value="' . $role_id . '"' . (($role_id == $current_role_id) ? ' selected="selected"' : '') . $title . '>' . $role_name . '</option>';					}					if ($s_role_options)					{						$s_role_options = '<option value="0"' . ((!$current_role_id) ? ' selected="selected"' : '') . ' title="' . htmlspecialchars($user->lang['NO_ROLE_ASSIGNED_EXPLAIN']) . '">' . $user->lang['NO_ROLE_ASSIGNED'] . '</option>' . $s_role_options;					}					if (!$current_role_id && $mode != 'view')					{						$s_custom_permissions = false;						foreach ($forum_array as $key => $value)						{							if ($value['S_NEVER'] || $value['S_YES'])							{								$s_custom_permissions = true;								break;							}						}					}					else					{						$s_custom_permissions = false;					}					$template->assign_block_vars($tpl_pmask . '.' . $tpl_fmask, array(						'NAME'				=> ($forum_id == 0) ? $forum_names_ary[0] : $forum_names_ary[$forum_id]['forum_name'],						'PADDING'			=> ($forum_id == 0) ? '' : $forum_names_ary[$forum_id]['padding'],						'S_ROLE_OPTIONS'	=> $s_role_options,						'S_CUSTOM'			=> $s_custom_permissions,						'UG_ID'				=> $ug_id,						'FORUM_ID'			=> $forum_id)					);					$this->assign_cat_array($forum_array, $tpl_pmask . '.' . $tpl_fmask . '.' . $tpl_category, $tpl_mask, $ug_id, $forum_id, $show_trace, ($mode == 'view'));				}				unset($hold_ary[$ug_id], $ug_names_ary[$ug_id]);			}		}	}	/**	* Display permission mask for roles	*/	function display_role_mask(&$hold_ary)	{		global $db, $template, $user, $phpbb_root_path, $phpbb_admin_path, $phpEx;		if (!sizeof($hold_ary))		{			return;		}		// Get forum names		$sql = 'SELECT forum_id, forum_name			FROM ' . FORUMS_TABLE . '			WHERE ' . $db->sql_in_set('forum_id', array_keys($hold_ary)) . '			ORDER BY left_id';		$result = $db->sql_query($sql);		// If the role is used globally, then reflect that		$forum_names = (isset($hold_ary[0])) ? array(0 => '') : array();		while ($row = $db->sql_fetchrow($result))		{			$forum_names[$row['forum_id']] = $row['forum_name'];		}		$db->sql_freeresult($result);		foreach ($forum_names as $forum_id => $forum_name)		{			$auth_ary = $hold_ary[$forum_id];			$template->assign_block_vars('role_mask', array(				'NAME'				=> ($forum_id == 0) ? $user->lang['GLOBAL_MASK'] : $forum_name,				'FORUM_ID'			=> $forum_id)			);			if (isset($auth_ary['users']) && sizeof($auth_ary['users']))			{				$sql = 'SELECT user_id, username					FROM ' . USERS_TABLE . '					WHERE ' . $db->sql_in_set('user_id', $auth_ary['users']) . '					ORDER BY username_clean ASC';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$template->assign_block_vars('role_mask.users', array(						'USER_ID'		=> $row['user_id'],						'USERNAME'		=> $row['username'],						'U_PROFILE'		=> append_sid("{$phpbb_root_path}memberlist.$phpEx", "mode=viewprofile&amp;u={$row['user_id']}"))					);				}				$db->sql_freeresult($result);			}			if (isset($auth_ary['groups']) && sizeof($auth_ary['groups']))			{				$sql = 'SELECT group_id, group_name, group_type					FROM ' . GROUPS_TABLE . '					WHERE ' . $db->sql_in_set('group_id', $auth_ary['groups']) . '					ORDER BY group_type ASC, group_name';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$template->assign_block_vars('role_mask.groups', array(						'GROUP_ID'		=> $row['group_id'],						'GROUP_NAME'	=> ($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name'],						'U_PROFILE'		=> append_sid("{$phpbb_root_path}memberlist.$phpEx", "mode=group&amp;g={$row['group_id']}"))					);				}				$db->sql_freeresult($result);			}		}	}	/**	* NOTE: this function is not in use atm	* Add a new option to the list ... $options is a hash of form ->	* $options = array(	*	'local'		=> array('option1', 'option2', ...),	*	'global'	=> array('optionA', 'optionB', ...)	* );	*/	function acl_add_option($options)	{		global $db, $cache;		if (!is_array($options))		{			return false;		}		$cur_options = array();		// Determine current options		$sql = 'SELECT auth_option, is_global, is_local			FROM ' . ACL_OPTIONS_TABLE . '			ORDER BY auth_option_id';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$cur_options[$row['auth_option']] = ($row['is_global'] && $row['is_local']) ? 'both' : (($row['is_global']) ? 'global' : 'local');		}		$db->sql_freeresult($result);		// Here we need to insert new options ... this requires discovering whether		// an options is global, local or both and whether we need to add an permission		// set flag (x_)		$new_options = array('local' => array(), 'global' => array());		foreach ($options as $type => $option_ary)		{			$option_ary = array_unique($option_ary);			foreach ($option_ary as $option_value)			{				$new_options[$type][] = $option_value;				$flag = substr($option_value, 0, strpos($option_value, '_') + 1);				if (!in_array($flag, $new_options[$type]))				{					$new_options[$type][] = $flag;				}			}		}		unset($options);		$options = array();		$options['local'] = array_diff($new_options['local'], $new_options['global']);		$options['global'] = array_diff($new_options['global'], $new_options['local']);		$options['both'] = array_intersect($new_options['local'], $new_options['global']);		// Now check which options to add/update		$add_options = $update_options = array();		// First local ones...		foreach ($options as $type => $option_ary)		{			foreach ($option_ary as $option)			{				if (!isset($cur_options[$option]))				{					$add_options[] = array(						'auth_option'	=> (string) $option,						'is_global'		=> ($type == 'global' || $type == 'both') ? 1 : 0,						'is_local'		=> ($type == 'local' || $type == 'both') ? 1 : 0					);					continue;				}				// Else, update existing entry if it is changed...				if ($type === $cur_options[$option])				{					continue;				}				// New type is always both:				// If is now both, we set both.				// If it was global the new one is local and we need to set it to both				// If it was local the new one is global and we need to set it to both				$update_options[] = $option;			}		}		if (!empty($add_options))		{			$db->sql_multi_insert(ACL_OPTIONS_TABLE, $add_options);		}		if (!empty($update_options))		{			$sql = 'UPDATE ' . ACL_OPTIONS_TABLE . '				SET is_global = 1, is_local = 1				WHERE ' . $db->sql_in_set('auth_option', $update_options);			$db->sql_query($sql);		}		$cache->destroy('_acl_options');		$this->acl_clear_prefetch();		// Because we just changed the options and also purged the options cache, we instantly update/regenerate it for later calls to succeed.		$this->acl_options = array();		$this->auth_admin();		return true;	}	/**	* Set a user or group ACL record	*/	function acl_set($ug_type, $forum_id, $ug_id, $auth, $role_id = 0, $clear_prefetch = true)	{		global $db;		// One or more forums		if (!is_array($forum_id))		{			$forum_id = array($forum_id);		}		// One or more users		if (!is_array($ug_id))		{			$ug_id = array($ug_id);		}		$ug_id_sql = $db->sql_in_set($ug_type . '_id', array_map('intval', $ug_id));		$forum_sql = $db->sql_in_set('forum_id', array_map('intval', $forum_id));		// Instead of updating, inserting, removing we just remove all current settings and re-set everything...		$table = ($ug_type == 'user') ? ACL_USERS_TABLE : ACL_GROUPS_TABLE;		$id_field = $ug_type . '_id';		// Get any flags as required		reset($auth);		$flag = key($auth);		$flag = substr($flag, 0, strpos($flag, '_') + 1);		// This ID (the any-flag) is set if one or more permissions are true...		$any_option_id = (int) $this->acl_options['id'][$flag];		// Remove any-flag from auth ary		if (isset($auth[$flag]))		{			unset($auth[$flag]);		}		// Remove current auth options...		$auth_option_ids = array((int)$any_option_id);		foreach ($auth as $auth_option => $auth_setting)		{			$auth_option_ids[] = (int) $this->acl_options['id'][$auth_option];		}		$sql = "DELETE FROM $table			WHERE $forum_sql				AND $ug_id_sql				AND " . $db->sql_in_set('auth_option_id', $auth_option_ids);		$db->sql_query($sql);		// Remove those having a role assigned... the correct type of course...		$sql = 'SELECT role_id			FROM ' . ACL_ROLES_TABLE . "			WHERE role_type = '" . $db->sql_escape($flag) . "'";		$result = $db->sql_query($sql);		$role_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$role_ids[] = $row['role_id'];		}		$db->sql_freeresult($result);		if (sizeof($role_ids))		{			$sql = "DELETE FROM $table				WHERE $forum_sql					AND $ug_id_sql					AND auth_option_id = 0					AND " . $db->sql_in_set('auth_role_id', $role_ids);			$db->sql_query($sql);		}		// Ok, include the any-flag if one or more auth options are set to yes...		foreach ($auth as $auth_option => $setting)		{			if ($setting == ACL_YES && (!isset($auth[$flag]) || $auth[$flag] == ACL_NEVER))			{				$auth[$flag] = ACL_YES;			}		}		$sql_ary = array();		foreach ($forum_id as $forum)		{			$forum = (int) $forum;			if ($role_id)			{				foreach ($ug_id as $id)				{					$sql_ary[] = array(						$id_field			=> (int) $id,						'forum_id'			=> (int) $forum,						'auth_option_id'	=> 0,						'auth_setting'		=> 0,						'auth_role_id'		=> (int) $role_id,					);				}			}			else			{				foreach ($auth as $auth_option => $setting)				{					$auth_option_id = (int) $this->acl_options['id'][$auth_option];					if ($setting != ACL_NO)					{						foreach ($ug_id as $id)						{							$sql_ary[] = array(								$id_field			=> (int) $id,								'forum_id'			=> (int) $forum,								'auth_option_id'	=> (int) $auth_option_id,								'auth_setting'		=> (int) $setting							);						}					}				}			}		}		$db->sql_multi_insert($table, $sql_ary);		if ($clear_prefetch)		{			$this->acl_clear_prefetch();		}	}	/**	* Set a role-specific ACL record	*/	function acl_set_role($role_id, $auth)	{		global $db;		// Get any-flag as required		reset($auth);		$flag = key($auth);		$flag = substr($flag, 0, strpos($flag, '_') + 1);		// Remove any-flag from auth ary		if (isset($auth[$flag]))		{			unset($auth[$flag]);		}		// Re-set any flag...		foreach ($auth as $auth_option => $setting)		{			if ($setting == ACL_YES && (!isset($auth[$flag]) || $auth[$flag] == ACL_NEVER))			{				$auth[$flag] = ACL_YES;			}		}		$sql_ary = array();		foreach ($auth as $auth_option => $setting)		{			$auth_option_id = (int) $this->acl_options['id'][$auth_option];			if ($setting != ACL_NO)			{				$sql_ary[] = array(					'role_id'			=> (int) $role_id,					'auth_option_id'	=> (int) $auth_option_id,					'auth_setting'		=> (int) $setting				);			}		}		// If no data is there, we set the any-flag to ACL_NEVER...		if (!sizeof($sql_ary))		{			$sql_ary[] = array(				'role_id'			=> (int) $role_id,				'auth_option_id'	=> (int) $this->acl_options['id'][$flag],				'auth_setting'		=> ACL_NEVER			);		}		// Remove current auth options...		$sql = 'DELETE FROM ' . ACL_ROLES_DATA_TABLE . '			WHERE role_id = ' . $role_id;		$db->sql_query($sql);		// Now insert the new values		$db->sql_multi_insert(ACL_ROLES_DATA_TABLE, $sql_ary);		$this->acl_clear_prefetch();	}	/**	* Remove local permission	*/	function acl_delete($mode, $ug_id = false, $forum_id = false, $permission_type = false)	{		global $db;		if ($ug_id === false && $forum_id === false)		{			return;		}		$option_id_ary = array();		$table = ($mode == 'user') ? ACL_USERS_TABLE : ACL_GROUPS_TABLE;		$id_field = $mode . '_id';		$where_sql = array();		if ($forum_id !== false)		{			$where_sql[] = (!is_array($forum_id)) ? 'forum_id = ' . (int) $forum_id : $db->sql_in_set('forum_id', array_map('intval', $forum_id));		}		if ($ug_id !== false)		{			$where_sql[] = (!is_array($ug_id)) ? $id_field . ' = ' . (int) $ug_id : $db->sql_in_set($id_field, array_map('intval', $ug_id));		}		// There seem to be auth options involved, therefore we need to go through the list and make sure we capture roles correctly		if ($permission_type !== false)		{			// Get permission type			$sql = 'SELECT auth_option, auth_option_id				FROM ' . ACL_OPTIONS_TABLE . "				WHERE auth_option " . $db->sql_like_expression($permission_type . $db->any_char);			$result = $db->sql_query($sql);			$auth_id_ary = array();			while ($row = $db->sql_fetchrow($result))			{				$option_id_ary[] = $row['auth_option_id'];				$auth_id_ary[$row['auth_option']] = ACL_NO;			}			$db->sql_freeresult($result);			// First of all, lets grab the items having roles with the specified auth options assigned			$sql = "SELECT auth_role_id, $id_field, forum_id				FROM $table, " . ACL_ROLES_TABLE . " r				WHERE auth_role_id <> 0					AND auth_role_id = r.role_id					AND r.role_type = '{$permission_type}'					AND " . implode(' AND ', $where_sql) . '				ORDER BY auth_role_id';			$result = $db->sql_query($sql);			$cur_role_auth = array();			while ($row = $db->sql_fetchrow($result))			{				$cur_role_auth[$row['auth_role_id']][$row['forum_id']][] = $row[$id_field];			}			$db->sql_freeresult($result);			// Get role data for resetting data			if (sizeof($cur_role_auth))			{				$sql = 'SELECT ao.auth_option, rd.role_id, rd.auth_setting					FROM ' . ACL_OPTIONS_TABLE . ' ao, ' . ACL_ROLES_DATA_TABLE . ' rd					WHERE ao.auth_option_id = rd.auth_option_id						AND ' . $db->sql_in_set('rd.role_id', array_keys($cur_role_auth));				$result = $db->sql_query($sql);				$auth_settings = array();				while ($row = $db->sql_fetchrow($result))				{					// We need to fill all auth_options, else setting it will fail...					if (!isset($auth_settings[$row['role_id']]))					{						$auth_settings[$row['role_id']] = $auth_id_ary;					}					$auth_settings[$row['role_id']][$row['auth_option']] = $row['auth_setting'];				}				$db->sql_freeresult($result);				// Set the options				foreach ($cur_role_auth as $role_id => $auth_row)				{					foreach ($auth_row as $f_id => $ug_row)					{						$this->acl_set($mode, $f_id, $ug_row, $auth_settings[$role_id], 0, false);					}				}			}		}		// Now, normally remove permissions...		if ($permission_type !== false)		{			$where_sql[] = $db->sql_in_set('auth_option_id', array_map('intval', $option_id_ary));		}		$sql = "DELETE FROM $table			WHERE " . implode(' AND ', $where_sql);		$db->sql_query($sql);		$this->acl_clear_prefetch();	}	/**	* Assign category to template	* used by display_mask()	*/	function assign_cat_array(&$category_array, $tpl_cat, $tpl_mask, $ug_id, $forum_id, $show_trace = false, $s_view)	{		global $template, $user, $phpbb_admin_path, $phpEx;		@reset($category_array);		while (list($cat, $cat_array) = each($category_array))		{			$template->assign_block_vars($tpl_cat, array(				'S_YES'		=> ($cat_array['S_YES'] && !$cat_array['S_NEVER'] && !$cat_array['S_NO']) ? true : false,				'S_NEVER'	=> ($cat_array['S_NEVER'] && !$cat_array['S_YES'] && !$cat_array['S_NO']) ? true : false,				'S_NO'		=> ($cat_array['S_NO'] && !$cat_array['S_NEVER'] && !$cat_array['S_YES']) ? true : false,				'CAT_NAME'	=> $user->lang['permission_cat'][$cat])			);			/*	Sort permissions by name (more naturaly and user friendly than sorting by a primary key)			*	Commented out due to it's memory consumption and time needed			*			$key_array = array_intersect(array_keys($user->lang), array_map(create_function('$a', 'return "acl_" . $a;'), array_keys($cat_array['permissions'])));			$values_array = $cat_array['permissions'];			$cat_array['permissions'] = array();			foreach ($key_array as $key)			{				$key = str_replace('acl_', '', $key);				$cat_array['permissions'][$key] = $values_array[$key];			}			unset($key_array, $values_array);*/			@reset($cat_array['permissions']);			while (list($permission, $allowed) = each($cat_array['permissions']))			{				if ($s_view)				{					$template->assign_block_vars($tpl_cat . '.' . $tpl_mask, array(						'S_YES'		=> ($allowed == ACL_YES) ? true : false,						'S_NEVER'	=> ($allowed == ACL_NEVER) ? true : false,						'UG_ID'			=> $ug_id,						'FORUM_ID'		=> $forum_id,						'FIELD_NAME'	=> $permission,						'S_FIELD_NAME'	=> 'setting[' . $ug_id . '][' . $forum_id . '][' . $permission . ']',						'U_TRACE'		=> ($show_trace) ? append_sid("{$phpbb_admin_path}index.$phpEx", "i=permissions&amp;mode=trace&amp;u=$ug_id&amp;f=$forum_id&amp;auth=$permission") : '',						'UA_TRACE'		=> ($show_trace) ? append_sid("{$phpbb_admin_path}index.$phpEx", "i=permissions&mode=trace&u=$ug_id&f=$forum_id&auth=$permission", false) : '',						'PERMISSION'	=> $user->lang['acl_' . $permission]['lang'])					);				}				else				{					$template->assign_block_vars($tpl_cat . '.' . $tpl_mask, array(						'S_YES'		=> ($allowed == ACL_YES) ? true : false,						'S_NEVER'	=> ($allowed == ACL_NEVER) ? true : false,						'S_NO'		=> ($allowed == ACL_NO) ? true : false,						'UG_ID'			=> $ug_id,						'FORUM_ID'		=> $forum_id,						'FIELD_NAME'	=> $permission,						'S_FIELD_NAME'	=> 'setting[' . $ug_id . '][' . $forum_id . '][' . $permission . ']',						'U_TRACE'		=> ($show_trace) ? append_sid("{$phpbb_admin_path}index.$phpEx", "i=permissions&amp;mode=trace&amp;u=$ug_id&amp;f=$forum_id&amp;auth=$permission") : '',						'UA_TRACE'		=> ($show_trace) ? append_sid("{$phpbb_admin_path}index.$phpEx", "i=permissions&mode=trace&u=$ug_id&f=$forum_id&auth=$permission", false) : '',						'PERMISSION'	=> $user->lang['acl_' . $permission]['lang'])					);				}			}		}	}	/**	* Building content array from permission rows with explicit key ordering	* used by display_mask()	*/	function build_permission_array(&$permission_row, &$content_array, &$categories, $key_sort_array)	{		global $user;		foreach ($key_sort_array as $forum_id)		{			if (!isset($permission_row[$forum_id]))			{				continue;			}			$permissions = $permission_row[$forum_id];			ksort($permissions);			@reset($permissions);			while (list($permission, $auth_setting) = each($permissions))			{				if (!isset($user->lang['acl_' . $permission]))				{					$user->lang['acl_' . $permission] = array(						'cat'	=> 'misc',						'lang'	=> '{ acl_' . $permission . ' }'					);				}				$cat = $user->lang['acl_' . $permission]['cat'];				// Build our categories array				if (!isset($categories[$cat]))				{					$categories[$cat] = $user->lang['permission_cat'][$cat];				}				// Build our content array				if (!isset($content_array[$forum_id]))				{					$content_array[$forum_id] = array();				}				if (!isset($content_array[$forum_id][$cat]))				{					$content_array[$forum_id][$cat] = array(						'S_YES'			=> false,						'S_NEVER'		=> false,						'S_NO'			=> false,						'permissions'	=> array(),					);				}				$content_array[$forum_id][$cat]['S_YES'] |= ($auth_setting == ACL_YES) ? true : false;				$content_array[$forum_id][$cat]['S_NEVER'] |= ($auth_setting == ACL_NEVER) ? true : false;				$content_array[$forum_id][$cat]['S_NO'] |= ($auth_setting == ACL_NO) ? true : false;				$content_array[$forum_id][$cat]['permissions'][$permission] = $auth_setting;			}		}	}	/**	* Use permissions from another user. This transferes a permission set from one user to another.	* The other user is always able to revert back to his permission set.	* This function does not check for lower/higher permissions, it is possible for the user to gain	* "more" permissions by this.	* Admin permissions will not be copied.	*/	function ghost_permissions($from_user_id, $to_user_id)	{		global $db;		if ($to_user_id == ANONYMOUS)		{			return false;		}		$hold_ary = $this->acl_raw_data_single_user($from_user_id);		// Key 0 in $hold_ary are global options, all others are forum_ids		// We disallow copying admin permissions		foreach ($this->acl_options['global'] as $opt => $id)		{			if (strpos($opt, 'a_') === 0)			{				$hold_ary[0][$this->acl_options['id'][$opt]] = ACL_NEVER;			}		}		// Force a_switchperm to be allowed		$hold_ary[0][$this->acl_options['id']['a_switchperm']] = ACL_YES;		$user_permissions = $this->build_bitstring($hold_ary);		if (!$user_permissions)		{			return false;		}		$sql = 'UPDATE ' . USERS_TABLE . "			SET user_permissions = '" . $db->sql_escape($user_permissions) . "',				user_perm_from = $from_user_id			WHERE user_id = " . $to_user_id;		$db->sql_query($sql);		return true;	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** valid external constants:* PHPBB_MSG_HANDLER* PHPBB_DB_NEW_LINK* PHPBB_ROOT_PATH* PHPBB_ADMIN_PATH*/// phpBB Versiondefine('PHPBB_VERSION', '3.0.10');// QA-related// define('PHPBB_QA', 1);// User relateddefine('ANONYMOUS', 1);define('USER_ACTIVATION_NONE', 0);define('USER_ACTIVATION_SELF', 1);define('USER_ACTIVATION_ADMIN', 2);define('USER_ACTIVATION_DISABLE', 3);define('AVATAR_UPLOAD', 1);define('AVATAR_REMOTE', 2);define('AVATAR_GALLERY', 3);define('USER_NORMAL', 0);define('USER_INACTIVE', 1);define('USER_IGNORE', 2);define('USER_FOUNDER', 3);define('INACTIVE_REGISTER', 1);define('INACTIVE_PROFILE', 2);define('INACTIVE_MANUAL', 3);define('INACTIVE_REMIND', 4);// ACLdefine('ACL_NEVER', 0);define('ACL_YES', 1);define('ACL_NO', -1);// Login error codesdefine('LOGIN_CONTINUE', 1);define('LOGIN_BREAK', 2);define('LOGIN_SUCCESS', 3);define('LOGIN_SUCCESS_CREATE_PROFILE', 20);define('LOGIN_ERROR_USERNAME', 10);define('LOGIN_ERROR_PASSWORD', 11);define('LOGIN_ERROR_ACTIVE', 12);define('LOGIN_ERROR_ATTEMPTS', 13);define('LOGIN_ERROR_EXTERNAL_AUTH', 14);define('LOGIN_ERROR_PASSWORD_CONVERT', 15);// Maximum login attempts// The value is arbitrary, but it has to fit into the user_login_attempts field.define('LOGIN_ATTEMPTS_MAX', 100);// Group settingsdefine('GROUP_OPEN', 0);define('GROUP_CLOSED', 1);define('GROUP_HIDDEN', 2);define('GROUP_SPECIAL', 3);define('GROUP_FREE', 4);// Forum/Topic statesdefine('FORUM_CAT', 0);define('FORUM_POST', 1);define('FORUM_LINK', 2);define('ITEM_UNLOCKED', 0);define('ITEM_LOCKED', 1);define('ITEM_MOVED', 2);// Forum Flagsdefine('FORUM_FLAG_LINK_TRACK', 1);define('FORUM_FLAG_PRUNE_POLL', 2);define('FORUM_FLAG_PRUNE_ANNOUNCE', 4);define('FORUM_FLAG_PRUNE_STICKY', 8);define('FORUM_FLAG_ACTIVE_TOPICS', 16);define('FORUM_FLAG_POST_REVIEW', 32);define('FORUM_FLAG_QUICK_REPLY', 64);// Forum Options... sequential order. Modifications should begin at number 10 (number 29 is maximum)define('FORUM_OPTION_FEED_NEWS', 1);define('FORUM_OPTION_FEED_EXCLUDE', 2);// Optional text flagsdefine('OPTION_FLAG_BBCODE', 1);define('OPTION_FLAG_SMILIES', 2);define('OPTION_FLAG_LINKS', 4);// Topic typesdefine('POST_NORMAL', 0);define('POST_STICKY', 1);define('POST_ANNOUNCE', 2);define('POST_GLOBAL', 3);// Lastread typesdefine('TRACK_NORMAL', 0);define('TRACK_POSTED', 1);// Notify methodsdefine('NOTIFY_EMAIL', 0);define('NOTIFY_IM', 1);define('NOTIFY_BOTH', 2);// Notify statusdefine('NOTIFY_YES', 0);define('NOTIFY_NO', 1);// Email Priority Settingsdefine('MAIL_LOW_PRIORITY', 4);define('MAIL_NORMAL_PRIORITY', 3);define('MAIL_HIGH_PRIORITY', 2);// Log typesdefine('LOG_ADMIN', 0);define('LOG_MOD', 1);define('LOG_CRITICAL', 2);define('LOG_USERS', 3);// Private messaging - Do NOT change these valuesdefine('PRIVMSGS_HOLD_BOX', -4);define('PRIVMSGS_NO_BOX', -3);define('PRIVMSGS_OUTBOX', -2);define('PRIVMSGS_SENTBOX', -1);define('PRIVMSGS_INBOX', 0);// Full Folder Actionsdefine('FULL_FOLDER_NONE', -3);define('FULL_FOLDER_DELETE', -2);define('FULL_FOLDER_HOLD', -1);// Download Modes - Attachmentsdefine('INLINE_LINK', 1);// This mode is only used internally to allow modders extending the attachment functionalitydefine('PHYSICAL_LINK', 2);// Confirm typesdefine('CONFIRM_REG', 1);define('CONFIRM_LOGIN', 2);define('CONFIRM_POST', 3);// Categories - Attachmentsdefine('ATTACHMENT_CATEGORY_NONE', 0);define('ATTACHMENT_CATEGORY_IMAGE', 1); // Inline Imagesdefine('ATTACHMENT_CATEGORY_WM', 2); // Windows Media Files - Streamingdefine('ATTACHMENT_CATEGORY_RM', 3); // Real Media Files - Streamingdefine('ATTACHMENT_CATEGORY_THUMB', 4); // Not used within the database, only while displaying postsdefine('ATTACHMENT_CATEGORY_FLASH', 5); // Flash/SWF filesdefine('ATTACHMENT_CATEGORY_QUICKTIME', 6); // Quicktime/Mov files// BBCode UID lengthdefine('BBCODE_UID_LEN', 8);// Number of core BBCodesdefine('NUM_CORE_BBCODES', 12);// BBCode hard limitdefine('BBCODE_LIMIT', 1511);// Smiley hard limitdefine('SMILEY_LIMIT', 1000);// Magic url typesdefine('MAGIC_URL_EMAIL', 1);define('MAGIC_URL_FULL', 2);define('MAGIC_URL_LOCAL', 3);define('MAGIC_URL_WWW', 4);// Profile Field Typesdefine('FIELD_INT', 1);define('FIELD_STRING', 2);define('FIELD_TEXT', 3);define('FIELD_BOOL', 4);define('FIELD_DROPDOWN', 5);define('FIELD_DATE', 6);// referer validationdefine('REFERER_VALIDATE_NONE', 0);define('REFERER_VALIDATE_HOST', 1);define('REFERER_VALIDATE_PATH', 2);// phpbb_chmod() permissions@define('CHMOD_ALL', 7);@define('CHMOD_READ', 4);@define('CHMOD_WRITE', 2);@define('CHMOD_EXECUTE', 1);// Captcha code lengthdefine('CAPTCHA_MIN_CHARS', 4);define('CAPTCHA_MAX_CHARS', 7);// Additional constantsdefine('VOTE_CONVERTED', 127);// Table namesdefine('ACL_GROUPS_TABLE',			$table_prefix . 'acl_groups');define('ACL_OPTIONS_TABLE',			$table_prefix . 'acl_options');define('ACL_ROLES_DATA_TABLE',		$table_prefix . 'acl_roles_data');define('ACL_ROLES_TABLE',			$table_prefix . 'acl_roles');define('ACL_USERS_TABLE',			$table_prefix . 'acl_users');define('ATTACHMENTS_TABLE',			$table_prefix . 'attachments');define('BANLIST_TABLE',				$table_prefix . 'banlist');define('BBCODES_TABLE',				$table_prefix . 'bbcodes');define('BOOKMARKS_TABLE',			$table_prefix . 'bookmarks');define('BOTS_TABLE',				$table_prefix . 'bots');define('CONFIG_TABLE',				$table_prefix . 'config');define('CONFIRM_TABLE',				$table_prefix . 'confirm');define('DISALLOW_TABLE',			$table_prefix . 'disallow');define('DRAFTS_TABLE',				$table_prefix . 'drafts');define('EXTENSIONS_TABLE',			$table_prefix . 'extensions');define('EXTENSION_GROUPS_TABLE',	$table_prefix . 'extension_groups');define('FORUMS_TABLE',				$table_prefix . 'forums');define('FORUMS_ACCESS_TABLE',		$table_prefix . 'forums_access');define('FORUMS_TRACK_TABLE',		$table_prefix . 'forums_track');define('FORUMS_WATCH_TABLE',		$table_prefix . 'forums_watch');define('GROUPS_TABLE',				$table_prefix . 'groups');define('ICONS_TABLE',				$table_prefix . 'icons');define('LANG_TABLE',				$table_prefix . 'lang');define('LOG_TABLE',					$table_prefix . 'log');define('LOGIN_ATTEMPT_TABLE',		$table_prefix . 'login_attempts');define('MODERATOR_CACHE_TABLE',		$table_prefix . 'moderator_cache');define('MODULES_TABLE',				$table_prefix . 'modules');define('POLL_OPTIONS_TABLE',		$table_prefix . 'poll_options');define('POLL_VOTES_TABLE',			$table_prefix . 'poll_votes');define('POSTS_TABLE',				$table_prefix . 'posts');define('PRIVMSGS_TABLE',			$table_prefix . 'privmsgs');define('PRIVMSGS_FOLDER_TABLE',		$table_prefix . 'privmsgs_folder');define('PRIVMSGS_RULES_TABLE',		$table_prefix . 'privmsgs_rules');define('PRIVMSGS_TO_TABLE',			$table_prefix . 'privmsgs_to');define('PROFILE_FIELDS_TABLE',		$table_prefix . 'profile_fields');define('PROFILE_FIELDS_DATA_TABLE',	$table_prefix . 'profile_fields_data');define('PROFILE_FIELDS_LANG_TABLE',	$table_prefix . 'profile_fields_lang');define('PROFILE_LANG_TABLE',		$table_prefix . 'profile_lang');define('RANKS_TABLE',				$table_prefix . 'ranks');define('REPORTS_TABLE',				$table_prefix . 'reports');define('REPORTS_REASONS_TABLE',		$table_prefix . 'reports_reasons');define('SEARCH_RESULTS_TABLE',		$table_prefix . 'search_results');define('SEARCH_WORDLIST_TABLE',		$table_prefix . 'search_wordlist');define('SEARCH_WORDMATCH_TABLE',	$table_prefix . 'search_wordmatch');define('SESSIONS_TABLE',			$table_prefix . 'sessions');define('SESSIONS_KEYS_TABLE',		$table_prefix . 'sessions_keys');define('SITELIST_TABLE',			$table_prefix . 'sitelist');define('SMILIES_TABLE',				$table_prefix . 'smilies');define('STYLES_TABLE',				$table_prefix . 'styles');define('STYLES_TEMPLATE_TABLE',		$table_prefix . 'styles_template');define('STYLES_TEMPLATE_DATA_TABLE',$table_prefix . 'styles_template_data');define('STYLES_THEME_TABLE',		$table_prefix . 'styles_theme');define('STYLES_IMAGESET_TABLE',		$table_prefix . 'styles_imageset');define('STYLES_IMAGESET_DATA_TABLE',$table_prefix . 'styles_imageset_data');define('TOPICS_TABLE',				$table_prefix . 'topics');define('TOPICS_POSTED_TABLE',		$table_prefix . 'topics_posted');define('TOPICS_TRACK_TABLE',		$table_prefix . 'topics_track');define('TOPICS_WATCH_TABLE',		$table_prefix . 'topics_watch');define('USER_GROUP_TABLE',			$table_prefix . 'user_group');define('USERS_TABLE',				$table_prefix . 'users');define('WARNINGS_TABLE',			$table_prefix . 'warnings');define('WORDS_TABLE',				$table_prefix . 'words');define('ZEBRA_TABLE',				$table_prefix . 'zebra');// Additional tables?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** BBCode class* @package phpBB3*/class bbcode{	var $bbcode_uid = '';	var $bbcode_bitfield = '';	var $bbcode_cache = array();	var $bbcode_template = array();	var $bbcodes = array();	var $template_bitfield;	var $template_filename = '';	/**	* Constructor	* Init bbcode cache entries if bitfield is specified	*/	function bbcode($bitfield = '')	{		if ($bitfield)		{			$this->bbcode_bitfield = $bitfield;			$this->bbcode_cache_init();		}	}	/**	* Second pass bbcodes	*/	function bbcode_second_pass(&$message, $bbcode_uid = '', $bbcode_bitfield = false)	{		if ($bbcode_uid)		{			$this->bbcode_uid = $bbcode_uid;		}		if ($bbcode_bitfield !== false)		{			$this->bbcode_bitfield = $bbcode_bitfield;			// Init those added with a new bbcode_bitfield (already stored codes will not get parsed again)			$this->bbcode_cache_init();		}		if (!$this->bbcode_bitfield)		{			// Remove the uid from tags that have not been transformed into HTML			if ($this->bbcode_uid)			{				$message = str_replace(':' . $this->bbcode_uid, '', $message);			}			return;		}		$str = array('search' => array(), 'replace' => array());		$preg = array('search' => array(), 'replace' => array());		$bitfield = new bitfield($this->bbcode_bitfield);		$bbcodes_set = $bitfield->get_all_set();		$undid_bbcode_specialchars = false;		foreach ($bbcodes_set as $bbcode_id)		{			if (!empty($this->bbcode_cache[$bbcode_id]))			{				foreach ($this->bbcode_cache[$bbcode_id] as $type => $array)				{					foreach ($array as $search => $replace)					{						${$type}['search'][] = str_replace('$uid', $this->bbcode_uid, $search);						${$type}['replace'][] = $replace;					}					if (sizeof($str['search']))					{						$message = str_replace($str['search'], $str['replace'], $message);						$str = array('search' => array(), 'replace' => array());					}					if (sizeof($preg['search']))					{						// we need to turn the entities back into their original form to allow the						// search patterns to work properly						if (!$undid_bbcode_specialchars)						{							$message = str_replace(array('&#58;', '&#46;'), array(':', '.'), $message);							$undid_bbcode_specialchars = true;						}						$message = preg_replace($preg['search'], $preg['replace'], $message);						$preg = array('search' => array(), 'replace' => array());					}				}			}		}		// Remove the uid from tags that have not been transformed into HTML		$message = str_replace(':' . $this->bbcode_uid, '', $message);	}	/**	* Init bbcode cache	*	* requires: $this->bbcode_bitfield	* sets: $this->bbcode_cache with bbcode templates needed for bbcode_bitfield	*/	function bbcode_cache_init()	{		global $phpbb_root_path, $template, $user;		if (empty($this->template_filename))		{			$this->template_bitfield = new bitfield($user->theme['bbcode_bitfield']);			$this->template_filename = $phpbb_root_path . 'styles/' . $user->theme['template_path'] . '/template/bbcode.html';			if (!@file_exists($this->template_filename))			{				if (isset($user->theme['template_inherits_id']) && $user->theme['template_inherits_id'])				{					$this->template_filename = $phpbb_root_path . 'styles/' . $user->theme['template_inherit_path'] . '/template/bbcode.html';					if (!@file_exists($this->template_filename))					{						trigger_error('The file ' . $this->template_filename . ' is missing.', E_USER_ERROR);					}				}				else				{					trigger_error('The file ' . $this->template_filename . ' is missing.', E_USER_ERROR);				}			}		}		$bbcode_ids = $rowset = $sql = array();		$bitfield = new bitfield($this->bbcode_bitfield);		$bbcodes_set = $bitfield->get_all_set();		foreach ($bbcodes_set as $bbcode_id)		{			if (isset($this->bbcode_cache[$bbcode_id]))			{				// do not try to re-cache it if it's already in				continue;			}			$bbcode_ids[] = $bbcode_id;			if ($bbcode_id > NUM_CORE_BBCODES)			{				$sql[] = $bbcode_id;			}		}		if (sizeof($sql))		{			global $db;			$sql = 'SELECT *				FROM ' . BBCODES_TABLE . '				WHERE ' . $db->sql_in_set('bbcode_id', $sql);			$result = $db->sql_query($sql, 3600);			while ($row = $db->sql_fetchrow($result))			{				// To circumvent replacing newlines with <br /> for the generated html,				// we use carriage returns here. They are later changed back to newlines				$row['bbcode_tpl'] = str_replace("\n", "\r", $row['bbcode_tpl']);				$row['second_pass_replace'] = str_replace("\n", "\r", $row['second_pass_replace']);				$rowset[$row['bbcode_id']] = $row;			}			$db->sql_freeresult($result);		}		foreach ($bbcode_ids as $bbcode_id)		{			switch ($bbcode_id)			{				case 0:					$this->bbcode_cache[$bbcode_id] = array(						'str' => array(							'[/quote:$uid]'	=> $this->bbcode_tpl('quote_close', $bbcode_id)						),						'preg' => array(							'#\[quote(?:=&quot;(.*?)&quot;)?:$uid\]((?!\[quote(?:=&quot;.*?&quot;)?:$uid\]).)?#ise'	=> "\$this->bbcode_second_pass_quote('\$1', '\$2')"						)					);				break;				case 1:					$this->bbcode_cache[$bbcode_id] = array(						'str' => array(							'[b:$uid]'	=> $this->bbcode_tpl('b_open', $bbcode_id),							'[/b:$uid]'	=> $this->bbcode_tpl('b_close', $bbcode_id),						)					);				break;				case 2:					$this->bbcode_cache[$bbcode_id] = array(						'str' => array(							'[i:$uid]'	=> $this->bbcode_tpl('i_open', $bbcode_id),							'[/i:$uid]'	=> $this->bbcode_tpl('i_close', $bbcode_id),						)					);				break;				case 3:					$this->bbcode_cache[$bbcode_id] = array(						'preg' => array(							'#\[url:$uid\]((.*?))\[/url:$uid\]#s'			=> $this->bbcode_tpl('url', $bbcode_id),							'#\[url=([^\[]+?):$uid\](.*?)\[/url:$uid\]#s'	=> $this->bbcode_tpl('url', $bbcode_id),						)					);				break;				case 4:					if ($user->optionget('viewimg'))					{						$this->bbcode_cache[$bbcode_id] = array(							'preg' => array(								'#\[img:$uid\](.*?)\[/img:$uid\]#s'		=> $this->bbcode_tpl('img', $bbcode_id),							)						);					}					else					{						$this->bbcode_cache[$bbcode_id] = array(							'preg' => array(								'#\[img:$uid\](.*?)\[/img:$uid\]#s'		=> str_replace('$2', '[ img ]', $this->bbcode_tpl('url', $bbcode_id, true)),							)						);					}				break;				case 5:					$this->bbcode_cache[$bbcode_id] = array(						'preg' => array(							'#\[size=([\-\+]?\d+):$uid\](.*?)\[/size:$uid\]#s'	=> $this->bbcode_tpl('size', $bbcode_id),						)					);				break;				case 6:					$this->bbcode_cache[$bbcode_id] = array(						'preg' => array(							'!\[color=(#[0-9a-f]{3}|#[0-9a-f]{6}|[a-z\-]+):$uid\](.*?)\[/color:$uid\]!is'	=> $this->bbcode_tpl('color', $bbcode_id),						)					);				break;				case 7:					$this->bbcode_cache[$bbcode_id] = array(						'str' => array(							'[u:$uid]'	=> $this->bbcode_tpl('u_open', $bbcode_id),							'[/u:$uid]'	=> $this->bbcode_tpl('u_close', $bbcode_id),						)					);				break;				case 8:					$this->bbcode_cache[$bbcode_id] = array(						'preg' => array(							'#\[code(?:=([a-z]+))?:$uid\](.*?)\[/code:$uid\]#ise'	=> "\$this->bbcode_second_pass_code('\$1', '\$2')",						)					);				break;				case 9:					$this->bbcode_cache[$bbcode_id] = array(						'preg' => array(							'#(\[\/?(list|\*):[mou]?:?$uid\])[\n]{1}#'	=> "\$1",							'#(\[list=([^\[]+):$uid\])[\n]{1}#'			=> "\$1",							'#\[list=([^\[]+):$uid\]#e'					=> "\$this->bbcode_list('\$1')",						),						'str' => array(							'[list:$uid]'		=> $this->bbcode_tpl('ulist_open_default', $bbcode_id),							'[/list:u:$uid]'	=> $this->bbcode_tpl('ulist_close', $bbcode_id),							'[/list:o:$uid]'	=> $this->bbcode_tpl('olist_close', $bbcode_id),							'[*:$uid]'			=> $this->bbcode_tpl('listitem', $bbcode_id),							'[/*:$uid]'			=> $this->bbcode_tpl('listitem_close', $bbcode_id),							'[/*:m:$uid]'		=> $this->bbcode_tpl('listitem_close', $bbcode_id)						),					);				break;				case 10:					$this->bbcode_cache[$bbcode_id] = array(						'preg' => array(							'#\[email:$uid\]((.*?))\[/email:$uid\]#is'			=> $this->bbcode_tpl('email', $bbcode_id),							'#\[email=([^\[]+):$uid\](.*?)\[/email:$uid\]#is'	=> $this->bbcode_tpl('email', $bbcode_id)						)					);				break;				case 11:					if ($user->optionget('viewflash'))					{						$this->bbcode_cache[$bbcode_id] = array(							'preg' => array(								'#\[flash=([0-9]+),([0-9]+):$uid\](.*?)\[/flash:$uid\]#'	=> $this->bbcode_tpl('flash', $bbcode_id),							)						);					}					else					{						$this->bbcode_cache[$bbcode_id] = array(							'preg' => array(								'#\[flash=([0-9]+),([0-9]+):$uid\](.*?)\[/flash:$uid\]#'	=> str_replace('$1', '$3', str_replace('$2', '[ flash ]', $this->bbcode_tpl('url', $bbcode_id, true)))							)						);					}				break;				case 12:					$this->bbcode_cache[$bbcode_id] = array(						'str'	=> array(							'[/attachment:$uid]'	=> $this->bbcode_tpl('inline_attachment_close', $bbcode_id)						),						'preg'	=> array(							'#\[attachment=([0-9]+):$uid\]#'	=> $this->bbcode_tpl('inline_attachment_open', $bbcode_id)						)					);				break;				default:					if (isset($rowset[$bbcode_id]))					{						if ($this->template_bitfield->get($bbcode_id))						{							// The bbcode requires a custom template to be loaded							if (!$bbcode_tpl = $this->bbcode_tpl($rowset[$bbcode_id]['bbcode_tag'], $bbcode_id))							{								// For some reason, the required template seems not to be available, use the default template								$bbcode_tpl = (!empty($rowset[$bbcode_id]['second_pass_replace'])) ? $rowset[$bbcode_id]['second_pass_replace'] : $rowset[$bbcode_id]['bbcode_tpl'];							}							else							{								// In order to use templates with custom bbcodes we need								// to replace all {VARS} to corresponding backreferences								// Note that backreferences are numbered from bbcode_match								if (preg_match_all('/\{(URL|LOCAL_URL|EMAIL|TEXT|SIMPLETEXT|INTTEXT|IDENTIFIER|COLOR|NUMBER)[0-9]*\}/', $rowset[$bbcode_id]['bbcode_match'], $m))								{									foreach ($m[0] as $i => $tok)									{										$bbcode_tpl = str_replace($tok, '$' . ($i + 1), $bbcode_tpl);									}								}							}						}						else						{							// Default template							$bbcode_tpl = (!empty($rowset[$bbcode_id]['second_pass_replace'])) ? $rowset[$bbcode_id]['second_pass_replace'] : $rowset[$bbcode_id]['bbcode_tpl'];						}						// Replace {L_*} lang strings						$bbcode_tpl = preg_replace('/{L_([A-Z_]+)}/e', "(!empty(\$user->lang['\$1'])) ? \$user->lang['\$1'] : ucwords(strtolower(str_replace('_', ' ', '\$1')))", $bbcode_tpl);						if (!empty($rowset[$bbcode_id]['second_pass_replace']))						{							// The custom BBCode requires second-pass pattern replacements							$this->bbcode_cache[$bbcode_id] = array(								'preg' => array($rowset[$bbcode_id]['second_pass_match'] => $bbcode_tpl)							);						}						else						{							$this->bbcode_cache[$bbcode_id] = array(								'str' => array($rowset[$bbcode_id]['second_pass_match'] => $bbcode_tpl)							);						}					}					else					{						$this->bbcode_cache[$bbcode_id] = false;					}				break;			}		}	}	/**	* Return bbcode template	*/	function bbcode_tpl($tpl_name, $bbcode_id = -1, $skip_bitfield_check = false)	{		static $bbcode_hardtpl = array();		if (empty($bbcode_hardtpl))		{			global $user;			$bbcode_hardtpl = array(				'b_open'	=> '<span style="font-weight: bold">',				'b_close'	=> '</span>',				'i_open'	=> '<span style="font-style: italic">',				'i_close'	=> '</span>',				'u_open'	=> '<span style="text-decoration: underline">',				'u_close'	=> '</span>',				'img'		=> '<img src="$1" alt="' . $user->lang['IMAGE'] . '" />',				'size'		=> '<span style="font-size: $1%; line-height: normal">$2</span>',				'color'		=> '<span style="color: $1">$2</span>',				'email'		=> '<a href="mailto:$1">$2</a>'			);		}		if ($bbcode_id != -1 && !$skip_bitfield_check && !$this->template_bitfield->get($bbcode_id))		{			return (isset($bbcode_hardtpl[$tpl_name])) ? $bbcode_hardtpl[$tpl_name] : false;		}		if (empty($this->bbcode_template))		{			if (($tpl = file_get_contents($this->template_filename)) === false)			{				trigger_error('Could not load bbcode template', E_USER_ERROR);			}			// replace \ with \\ and then ' with \'.			$tpl = str_replace('\\', '\\\\', $tpl);			$tpl = str_replace("'", "\'", $tpl);			// strip newlines and indent			$tpl = preg_replace("/\n[\n\r\s\t]*/", '', $tpl);			// Turn template blocks into PHP assignment statements for the values of $bbcode_tpl..			$this->bbcode_template = array();			$matches = preg_match_all('#<!-- BEGIN (.*?) -->(.*?)<!-- END (?:.*?) -->#', $tpl, $match);			for ($i = 0; $i < $matches; $i++)			{				if (empty($match[1][$i]))				{					continue;				}				$this->bbcode_template[$match[1][$i]] = $this->bbcode_tpl_replace($match[1][$i], $match[2][$i]);			}		}		return (isset($this->bbcode_template[$tpl_name])) ? $this->bbcode_template[$tpl_name] : ((isset($bbcode_hardtpl[$tpl_name])) ? $bbcode_hardtpl[$tpl_name] : false);	}	/**	* Return bbcode template replacement	*/	function bbcode_tpl_replace($tpl_name, $tpl)	{		global $user;		static $replacements = array(			'quote_username_open'	=> array('{USERNAME}'	=> '$1'),			'color'					=> array('{COLOR}'		=> '$1', '{TEXT}'			=> '$2'),			'size'					=> array('{SIZE}'		=> '$1', '{TEXT}'			=> '$2'),			'img'					=> array('{URL}'		=> '$1'),			'flash'					=> array('{WIDTH}'		=> '$1', '{HEIGHT}'			=> '$2', '{URL}'	=> '$3'),			'url'					=> array('{URL}'		=> '$1', '{DESCRIPTION}'	=> '$2'),			'email'					=> array('{EMAIL}'		=> '$1', '{DESCRIPTION}'	=> '$2')		);		$tpl = preg_replace('/{L_([A-Z_]+)}/e', "(!empty(\$user->lang['\$1'])) ? \$user->lang['\$1'] : ucwords(strtolower(str_replace('_', ' ', '\$1')))", $tpl);		if (!empty($replacements[$tpl_name]))		{			$tpl = strtr($tpl, $replacements[$tpl_name]);		}		return trim($tpl);	}	/**	* Second parse list bbcode	*/	function bbcode_list($type)	{		if ($type == '')		{			$tpl = 'ulist_open_default';			$type = 'default';		}		else if ($type == 'i')		{			$tpl = 'olist_open';			$type = 'lower-roman';		}		else if ($type == 'I')		{			$tpl = 'olist_open';			$type = 'upper-roman';		}		else if (preg_match('#^(disc|circle|square)$#i', $type))		{			$tpl = 'ulist_open';			$type = strtolower($type);		}		else if (preg_match('#^[a-z]$#', $type))		{			$tpl = 'olist_open';			$type = 'lower-alpha';		}		else if (preg_match('#[A-Z]#', $type))		{			$tpl = 'olist_open';			$type = 'upper-alpha';		}		else if (is_numeric($type))		{			$tpl = 'olist_open';			$type = 'decimal';		}		else		{			$tpl = 'olist_open';			$type = 'decimal';		}		return str_replace('{LIST_TYPE}', $type, $this->bbcode_tpl($tpl));	}	/**	* Second parse quote tag	*/	function bbcode_second_pass_quote($username, $quote)	{		// when using the /e modifier, preg_replace slashes double-quotes but does not		// seem to slash anything else		$quote = str_replace('\"', '"', $quote);		$username = str_replace('\"', '"', $username);		// remove newline at the beginning		if ($quote == "\n")		{			$quote = '';		}		$quote = (($username) ? str_replace('$1', $username, $this->bbcode_tpl('quote_username_open')) : $this->bbcode_tpl('quote_open')) . $quote;		return $quote;	}	/**	* Second parse code tag	*/	function bbcode_second_pass_code($type, $code)	{		// when using the /e modifier, preg_replace slashes double-quotes but does not		// seem to slash anything else		$code = str_replace('\"', '"', $code);		switch ($type)		{			case 'php':				// Not the english way, but valid because of hardcoded syntax highlighting				if (strpos($code, '<span class="syntaxdefault"><br /></span>') === 0)				{					$code = substr($code, 41);				}			// no break;			default:				$code = str_replace("\t", '&nbsp; &nbsp;', $code);				$code = str_replace('  ', '&nbsp; ', $code);				$code = str_replace('  ', ' &nbsp;', $code);				$code = str_replace("\n ", "\n&nbsp;", $code);				// keep space at the beginning				if (!empty($code) && $code[0] == ' ')				{					$code = '&nbsp;' . substr($code, 1);				}				// remove newline at the beginning				if (!empty($code) && $code[0] == "\n")				{					$code = substr($code, 1);				}			break;		}		$code = $this->bbcode_tpl('code_open') . $code . $this->bbcode_tpl('code_close');		return $code;	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);define('ADMIN_START', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);// Start session management$user->session_begin(false);$auth->acl($user->data);$user->setup();// Set custom template for admin area$template->set_custom_template($phpbb_root_path . 'adm/style', 'admin');$template->set_filenames(array(	'body' => 'colour_swatch.html'));$form = request_var('form', '');$name = request_var('name', '');// We validate form and name here, only id/class allowed$form = (!preg_match('/^[a-z0-9_-]+$/i', $form)) ? '' : $form;$name = (!preg_match('/^[a-z0-9_-]+$/i', $name)) ? '' : $name;$template->assign_vars(array(	'OPENER'		=> $form,	'NAME'			=> $name,	'T_IMAGES_PATH'	=> "{$phpbb_root_path}images/",	'S_USER_LANG'			=> $user->lang['USER_LANG'],	'S_CONTENT_DIRECTION'	=> $user->lang['DIRECTION'],	'S_CONTENT_ENCODING'	=> 'UTF-8',));$template->display('body');garbage_collection();?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License*//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_captcha{	var $u_action;	function main($id, $mode)	{		global $db, $user, $auth, $template;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('acp/board');		include($phpbb_root_path . 'includes/captcha/captcha_factory.' . $phpEx);		$captchas = phpbb_captcha_factory::get_captcha_types();		$selected = request_var('select_captcha', $config['captcha_plugin']);		$selected = (isset($captchas['available'][$selected]) || isset($captchas['unavailable'][$selected])) ? $selected : $config['captcha_plugin'];		$configure = request_var('configure', false);		// Oh, they are just here for the view		if (isset($_GET['captcha_demo']))		{			$this->deliver_demo($selected);		}		// Delegate		if ($configure)		{			$config_captcha =& phpbb_captcha_factory::get_instance($selected);			$config_captcha->acp_page($id, $this);		}		else		{			$config_vars = array(				'enable_confirm'		=> array('tpl' => 'REG_ENABLE', 'default' => false),				'enable_post_confirm'	=> array('tpl' => 'POST_ENABLE', 'default' => false),				'confirm_refresh'		=> array('tpl' => 'CONFIRM_REFRESH', 'default' => false),				'max_reg_attempts'		=> array('tpl' => 'REG_LIMIT', 'default' => 0),				'max_login_attempts'		=> array('tpl' => 'MAX_LOGIN_ATTEMPTS', 'default' => 0),			);			$this->tpl_name = 'acp_captcha';			$this->page_title = 'ACP_VC_SETTINGS';			$form_key = 'acp_captcha';			add_form_key($form_key);			$submit = request_var('main_submit', false);			if ($submit && check_form_key($form_key))			{				foreach ($config_vars as $config_var => $options)				{					set_config($config_var, request_var($config_var, $options['default']));				}				if ($selected !== $config['captcha_plugin'])				{					// sanity check					if (isset($captchas['available'][$selected]))					{						$old_captcha =& phpbb_captcha_factory::get_instance($config['captcha_plugin']);						$old_captcha->uninstall();						set_config('captcha_plugin', $selected);						$new_captcha =& phpbb_captcha_factory::get_instance($config['captcha_plugin']);						$new_captcha->install();						add_log('admin', 'LOG_CONFIG_VISUAL');					}					else					{						trigger_error($user->lang['CAPTCHA_UNAVAILABLE'] . adm_back_link($this->u_action), E_USER_WARNING);					}				}				trigger_error($user->lang['CONFIG_UPDATED'] . adm_back_link($this->u_action));			}			else if ($submit)			{				trigger_error($user->lang['FORM_INVALID'] . adm_back_link(), E_USER_WARNING);			}			else			{				$captcha_select = '';				foreach ($captchas['available'] as $value => $title)				{					$current = ($selected !== false && $value == $selected) ? ' selected="selected"' : '';					$captcha_select .= '<option value="' . $value . '"' . $current . '>' . $user->lang[$title] . '</option>';				}				foreach ($captchas['unavailable'] as $value => $title)				{					$current = ($selected !== false && $value == $selected) ? ' selected="selected"' : '';					$captcha_select .= '<option value="' . $value . '"' . $current . ' class="disabled-option">' . $user->lang[$title] . '</option>';				}				$demo_captcha =& phpbb_captcha_factory::get_instance($selected);				foreach ($config_vars as $config_var => $options)				{					$template->assign_var($options['tpl'], (isset($_POST[$config_var])) ? request_var($config_var, $options['default']) : $config[$config_var]) ;				}				$template->assign_vars(array(					'CAPTCHA_PREVIEW_TPL'	=> $demo_captcha->get_demo_template($id),					'S_CAPTCHA_HAS_CONFIG'	=> $demo_captcha->has_config(),					'CAPTCHA_SELECT'		=> $captcha_select,				));			}		}	}	/**	* Entry point for delivering image CAPTCHAs in the ACP.	*/	function deliver_demo($selected)	{		global $db, $user, $config;		$captcha =& phpbb_captcha_factory::get_instance($selected);		$captcha->init(CONFIRM_REG);		$captcha->execute_demo();		garbage_collection();		exit_handler();	}}?>
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'20',''=>'30',''=>'40',''=>'50',''=>'60',''=>'70',''=>'80',''=>'90',''=>'100',''=>'200',''=>'300',''=>'400',''=>'500',''=>'600',''=>'700',''=>'800',''=>'900',''=>'1000',''=>'2000',''=>'3000',''=>'4000',''=>'5000',''=>'6000',''=>'7000',''=>'8000',''=>'9000',''=>'10000',''=>'20000',''=>'30000',''=>'40000',''=>'50000',''=>'60000',''=>'70000',''=>'80000',''=>'90000',''=>'1/4',''=>'1/2',''=>'1',''=>'5',''=>'50',''=>'500',''=>'5000',''=>'50000',''=>'5',''=>'10',''=>'50',''=>'100',''=>'500',''=>'1000',''=>'5000',''=>'5',''=>'10',''=>'50',''=>'100',''=>'500',''=>'1000',''=>'10000',''=>'50000',''=>'10',''=>'1',''=>'1',''=>'1',''=>'2',''=>'2',''=>'2',''=>'2',''=>'5',''=>'10',''=>'10',''=>'10',''=>'10',''=>'10',''=>'30',''=>'50',''=>'50',''=>'50',''=>'50',''=>'100',''=>'300',''=>'500',''=>'500',''=>'500',''=>'500',''=>'500',''=>'1000',''=>'5000',''=>'5',''=>'50',''=>'1/2',''=>'1/2',''=>'2/3',''=>'3/4',''=>'0',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'5',''=>'10',''=>'50',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'90',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'900',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'10',''=>'20',''=>'100',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9');
<?php return array(''=>'');
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ucp_resend* Resending activation emails* @package ucp*/class ucp_resend{	var $u_action;	function main($id, $mode)	{		global $config, $phpbb_root_path, $phpEx;		global $db, $user, $auth, $template;		$username	= request_var('username', '', true);		$email		= strtolower(request_var('email', ''));		$submit		= (isset($_POST['submit'])) ? true : false;		add_form_key('ucp_resend');		if ($submit)		{			if (!check_form_key('ucp_resend'))			{				trigger_error('FORM_INVALID');			}			$sql = 'SELECT user_id, group_id, username, user_email, user_type, user_lang, user_actkey, user_inactive_reason				FROM ' . USERS_TABLE . "				WHERE user_email_hash = '" . $db->sql_escape(phpbb_email_hash($email)) . "'					AND username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";			$result = $db->sql_query($sql);			$user_row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$user_row)			{				trigger_error('NO_EMAIL_USER');			}			if ($user_row['user_type'] == USER_IGNORE)			{				trigger_error('NO_USER');			}			if (!$user_row['user_actkey'] && $user_row['user_type'] != USER_INACTIVE)			{				trigger_error('ACCOUNT_ALREADY_ACTIVATED');			}			if (!$user_row['user_actkey'] || ($user_row['user_type'] == USER_INACTIVE && $user_row['user_inactive_reason'] == INACTIVE_MANUAL))			{				trigger_error('ACCOUNT_DEACTIVATED');			}			// Determine coppa status on group (REGISTERED(_COPPA))			$sql = 'SELECT group_name, group_type				FROM ' . GROUPS_TABLE . '				WHERE group_id = ' . $user_row['group_id'];			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$row)			{				trigger_error('NO_GROUP');			}			$coppa = ($row['group_name'] == 'REGISTERED_COPPA' && $row['group_type'] == GROUP_SPECIAL) ? true : false;			include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);			$messenger = new messenger(false);			if ($config['require_activation'] == USER_ACTIVATION_SELF || $coppa)			{				$messenger->template(($coppa) ? 'coppa_resend_inactive' : 'user_resend_inactive', $user_row['user_lang']);				$messenger->to($user_row['user_email'], $user_row['username']);				$messenger->anti_abuse_headers($config, $user);				$messenger->assign_vars(array(					'WELCOME_MSG'	=> htmlspecialchars_decode(sprintf($user->lang['WELCOME_SUBJECT'], $config['sitename'])),					'USERNAME'		=> htmlspecialchars_decode($user_row['username']),					'U_ACTIVATE'	=> generate_board_url() . "/ucp.$phpEx?mode=activate&u={$user_row['user_id']}&k={$user_row['user_actkey']}")				);				if ($coppa)				{					$messenger->assign_vars(array(						'FAX_INFO'		=> $config['coppa_fax'],						'MAIL_INFO'		=> $config['coppa_mail'],						'EMAIL_ADDRESS'	=> $user_row['user_email'])					);				}				$messenger->send(NOTIFY_EMAIL);			}			if ($config['require_activation'] == USER_ACTIVATION_ADMIN)			{				// Grab an array of user_id's with a_user permissions ... these users can activate a user				$admin_ary = $auth->acl_get_list(false, 'a_user', false);				$sql = 'SELECT user_id, username, user_email, user_lang, user_jabber, user_notify_type					FROM ' . USERS_TABLE . '					WHERE ' . $db->sql_in_set('user_id', $admin_ary[0]['a_user']);				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$messenger->template('admin_activate', $row['user_lang']);					$messenger->to($row['user_email'], $row['username']);					$messenger->im($row['user_jabber'], $row['username']);					$messenger->anti_abuse_headers($config, $user);					$messenger->assign_vars(array(						'USERNAME'			=> htmlspecialchars_decode($user_row['username']),						'U_USER_DETAILS'	=> generate_board_url() . "/memberlist.$phpEx?mode=viewprofile&u={$user_row['user_id']}",						'U_ACTIVATE'		=> generate_board_url() . "/ucp.$phpEx?mode=activate&u={$user_row['user_id']}&k={$user_row['user_actkey']}")					);					$messenger->send($row['user_notify_type']);				}				$db->sql_freeresult($result);			}			meta_refresh(3, append_sid("{$phpbb_root_path}index.$phpEx"));			$message = ($config['require_activation'] == USER_ACTIVATION_ADMIN) ? $user->lang['ACTIVATION_EMAIL_SENT_ADMIN'] : $user->lang['ACTIVATION_EMAIL_SENT'];			$message .= '<br /><br />' . sprintf($user->lang['RETURN_INDEX'], '<a href="' . append_sid("{$phpbb_root_path}index.$phpEx") . '">', '</a>');			trigger_error($message);		}		$template->assign_vars(array(			'USERNAME'			=> $username,			'EMAIL'				=> $email,			'S_PROFILE_ACTION'	=> append_sid($phpbb_root_path . 'ucp.' . $phpEx, 'mode=resend_act'))		);		$this->tpl_name = 'ucp_resend';		$this->page_title = 'UCP_RESEND';	}}?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2008 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** A small class for 3.0.x (no autoloader in 3.0.x)** @package VC*/class phpbb_captcha_factory{	/**	* return an instance of class $name in file $name_plugin.php	*/	function &get_instance($name)	{		global $phpbb_root_path, $phpEx;		$name = basename($name);		if (!class_exists($name))		{			include($phpbb_root_path . "includes/captcha/plugins/{$name}_plugin." . $phpEx);		}		$instance = call_user_func(array($name, 'get_instance'));		return $instance;	}	/**	* Call the garbage collector	*/	function garbage_collect($name)	{		global $phpbb_root_path, $phpEx;		$name = basename($name);		if (!class_exists($name))		{			include($phpbb_root_path . "includes/captcha/plugins/{$name}_plugin." . $phpEx);		}		call_user_func(array($name, 'garbage_collect'), 0);	}	/**	* return a list of all discovered CAPTCHA plugins	*/	function get_captcha_types()	{		global $phpbb_root_path, $phpEx;		$captchas = array(			'available'		=> array(),			'unavailable'	=> array(),		);		$dp = @opendir($phpbb_root_path . 'includes/captcha/plugins');		if ($dp)		{			while (($file = readdir($dp)) !== false)			{				if ((preg_match('#_plugin\.' . $phpEx . '$#', $file)))				{					$name = preg_replace('#^(.*?)_plugin\.' . $phpEx . '$#', '\1', $file);					if (!class_exists($name))					{						include($phpbb_root_path . "includes/captcha/plugins/$file");					}					if (call_user_func(array($name, 'is_available')))					{						$captchas['available'][$name] = call_user_func(array($name, 'get_name'));					}					else					{						$captchas['unavailable'][$name] = call_user_func(array($name, 'get_name'));					}				}			}			closedir($dp);		}		return $captchas;	}}?>
