<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class ucp_attachments_info{	function module()	{		return array(			'filename'	=> 'ucp_attachments',			'title'		=> 'UCP_ATTACHMENTS',			'version'	=> '1.0.0',			'modes'		=> array(				'attachments'	=> array('title' => 'UCP_MAIN_ATTACHMENTS', 'auth' => 'acl_u_attach', 'cat' => array('UCP_MAIN')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_attachments{	var $u_action;	var $new_config;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_admin_path, $phpbb_root_path, $phpEx;		$user->add_lang(array('posting', 'viewtopic', 'acp/attachments'));		$error = $notify = array();		$submit = (isset($_POST['submit'])) ? true : false;		$action = request_var('action', '');		$form_key = 'acp_attach';		add_form_key($form_key);		if ($submit && !check_form_key($form_key))		{			trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action), E_USER_WARNING);		}		switch ($mode)		{			case 'attach':				$l_title = 'ACP_ATTACHMENT_SETTINGS';			break;			case 'extensions':				$l_title = 'ACP_MANAGE_EXTENSIONS';			break;			case 'ext_groups':				$l_title = 'ACP_EXTENSION_GROUPS';			break;			case 'orphan':				$l_title = 'ACP_ORPHAN_ATTACHMENTS';			break;			default:				trigger_error('NO_MODE', E_USER_ERROR);			break;		}		$this->tpl_name = 'acp_attachments';		$this->page_title = $l_title;		$template->assign_vars(array(			'L_TITLE'			=> $user->lang[$l_title],			'L_TITLE_EXPLAIN'	=> $user->lang[$l_title . '_EXPLAIN'],			'U_ACTION'			=> $this->u_action)		);		switch ($mode)		{			case 'attach':				include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);				$sql = 'SELECT group_name, cat_id					FROM ' . EXTENSION_GROUPS_TABLE . '					WHERE cat_id > 0					ORDER BY cat_id';				$result = $db->sql_query($sql);				$s_assigned_groups = array();				while ($row = $db->sql_fetchrow($result))				{					$row['group_name'] = (isset($user->lang['EXT_GROUP_' . $row['group_name']])) ? $user->lang['EXT_GROUP_' . $row['group_name']] : $row['group_name'];					$s_assigned_groups[$row['cat_id']][] = $row['group_name'];				}				$db->sql_freeresult($result);				$l_legend_cat_images = $user->lang['SETTINGS_CAT_IMAGES'] . ' [' . $user->lang['ASSIGNED_GROUP'] . ': ' . ((!empty($s_assigned_groups[ATTACHMENT_CATEGORY_IMAGE])) ? implode(', ', $s_assigned_groups[ATTACHMENT_CATEGORY_IMAGE]) : $user->lang['NO_EXT_GROUP']) . ']';				$display_vars = array(					'title'	=> 'ACP_ATTACHMENT_SETTINGS',					'vars'	=> array(						'legend1'				=> 'ACP_ATTACHMENT_SETTINGS',						'img_max_width'			=> array('lang' => 'MAX_IMAGE_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'img_max_height'		=> array('lang' => 'MAX_IMAGE_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'img_link_width'		=> array('lang' => 'IMAGE_LINK_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'img_link_height'		=> array('lang' => 'IMAGE_LINK_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'allow_attachments'		=> array('lang' => 'ALLOW_ATTACHMENTS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_pm_attach'		=> array('lang' => 'ALLOW_PM_ATTACHMENTS',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'upload_path'			=> array('lang' => 'UPLOAD_DIR',			'validate' => 'wpath',	'type' => 'text:25:100', 'explain' => true),						'display_order'			=> array('lang' => 'DISPLAY_ORDER',			'validate' => 'bool',	'type' => 'custom', 'method' => 'display_order', 'explain' => true),						'attachment_quota'		=> array('lang' => 'ATTACH_QUOTA',			'validate' => 'string',	'type' => 'custom', 'method' => 'max_filesize', 'explain' => true),						'max_filesize'			=> array('lang' => 'ATTACH_MAX_FILESIZE',	'validate' => 'string',	'type' => 'custom', 'method' => 'max_filesize', 'explain' => true),						'max_filesize_pm'		=> array('lang' => 'ATTACH_MAX_PM_FILESIZE','validate' => 'string',	'type' => 'custom', 'method' => 'max_filesize', 'explain' => true),						'max_attachments'		=> array('lang' => 'MAX_ATTACHMENTS',		'validate' => 'int',	'type' => 'text:3:3', 'explain' => false),						'max_attachments_pm'	=> array('lang' => 'MAX_ATTACHMENTS_PM',	'validate' => 'int',	'type' => 'text:3:3', 'explain' => false),						'secure_downloads'		=> array('lang' => 'SECURE_DOWNLOADS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'secure_allow_deny'		=> array('lang' => 'SECURE_ALLOW_DENY',		'validate' => 'int',	'type' => 'custom', 'method' => 'select_allow_deny', 'explain' => true),						'secure_allow_empty_referer'	=> array('lang' => 'SECURE_EMPTY_REFERRER', 'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'check_attachment_content' 		=> array('lang' => 'CHECK_CONTENT', 'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'legend2'					=> $l_legend_cat_images,						'img_display_inlined'		=> array('lang' => 'DISPLAY_INLINED',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'img_create_thumbnail'		=> array('lang' => 'CREATE_THUMBNAIL',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'img_max_thumb_width'		=> array('lang' => 'MAX_THUMB_WIDTH',		'validate' => 'int',	'type' => 'text:7:15', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'img_min_thumb_filesize'	=> array('lang' => 'MIN_THUMB_FILESIZE',	'validate' => 'int',	'type' => 'text:7:15', 'explain' => true, 'append' => ' ' . $user->lang['BYTES']),						'img_imagick'				=> array('lang' => 'IMAGICK_PATH',			'validate' => 'string',	'type' => 'text:20:200', 'explain' => true, 'append' => '&nbsp;&nbsp;<span>[ <a href="' . $this->u_action . '&amp;action=imgmagick">' . $user->lang['SEARCH_IMAGICK'] . '</a> ]</span>'),						'img_max'					=> array('lang' => 'MAX_IMAGE_SIZE',		'validate' => 'int',	'type' => 'dimension:3:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'img_link'					=> array('lang' => 'IMAGE_LINK_SIZE',		'validate' => 'int',	'type' => 'dimension:3:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),					)				);				$this->new_config = $config;				$cfg_array = (isset($_REQUEST['config'])) ? request_var('config', array('' => '')) : $this->new_config;				$error = array();				// We validate the complete config if whished				validate_config_vars($display_vars['vars'], $cfg_array, $error);				// Do not write values if there is an error				if (sizeof($error))				{					$submit = false;				}				// We go through the display_vars to make sure no one is trying to set variables he/she is not allowed to...				foreach ($display_vars['vars'] as $config_name => $null)				{					if (!isset($cfg_array[$config_name]) || strpos($config_name, 'legend') !== false)					{						continue;					}					$this->new_config[$config_name] = $config_value = $cfg_array[$config_name];					if (in_array($config_name, array('attachment_quota', 'max_filesize', 'max_filesize_pm')))					{						$size_var = request_var($config_name, '');						$this->new_config[$config_name] = $config_value = ($size_var == 'kb') ? round($config_value * 1024) : (($size_var == 'mb') ? round($config_value * 1048576) : $config_value);					}					if ($submit)					{						set_config($config_name, $config_value);					}				}				$this->perform_site_list();				if ($submit)				{					add_log('admin', 'LOG_CONFIG_ATTACH');					// Check Settings					$this->test_upload($error, $this->new_config['upload_path'], false);					if (!sizeof($error))					{						trigger_error($user->lang['CONFIG_UPDATED'] . adm_back_link($this->u_action));					}				}				$template->assign_var('S_ATTACHMENT_SETTINGS', true);				if ($action == 'imgmagick')				{					$this->new_config['img_imagick'] = $this->search_imagemagick();				}				// We strip eventually manual added convert program, we only want the patch				if ($this->new_config['img_imagick'])				{					// Change path separator					$this->new_config['img_imagick'] = str_replace('\\', '/', $this->new_config['img_imagick']);					$this->new_config['img_imagick'] = str_replace(array('convert', '.exe'), array('', ''), $this->new_config['img_imagick']);					// Check for trailing slash					if (substr($this->new_config['img_imagick'], -1) !== '/')					{						$this->new_config['img_imagick'] .= '/';					}				}				$supported_types = get_supported_image_types();				// Check Thumbnail Support				if (!$this->new_config['img_imagick'] && (!isset($supported_types['format']) || !sizeof($supported_types['format'])))				{					$this->new_config['img_create_thumbnail'] = 0;				}				$template->assign_vars(array(					'U_SEARCH_IMAGICK'		=> $this->u_action . '&amp;action=imgmagick',					'S_THUMBNAIL_SUPPORT'	=> (!$this->new_config['img_imagick'] && (!isset($supported_types['format']) || !sizeof($supported_types['format']))) ? false : true)				);				// Secure Download Options - Same procedure as with banning				$allow_deny = ($this->new_config['secure_allow_deny']) ? 'ALLOWED' : 'DISALLOWED';				$sql = 'SELECT *					FROM ' . SITELIST_TABLE;				$result = $db->sql_query($sql);				$defined_ips = '';				$ips = array();				while ($row = $db->sql_fetchrow($result))				{					$value = ($row['site_ip']) ? $row['site_ip'] : $row['site_hostname'];					if ($value)					{						$defined_ips .= '<option' . (($row['ip_exclude']) ? ' class="sep"' : '') . ' value="' . $row['site_id'] . '">' . $value . '</option>';						$ips[$row['site_id']] = $value;					}				}				$db->sql_freeresult($result);				$template->assign_vars(array(					'S_SECURE_DOWNLOADS'	=> $this->new_config['secure_downloads'],					'S_DEFINED_IPS'			=> ($defined_ips != '') ? true : false,					'S_WARNING'				=> (sizeof($error)) ? true : false,					'WARNING_MSG'			=> implode('<br />', $error),					'DEFINED_IPS'			=> $defined_ips,					'L_SECURE_TITLE'		=> $user->lang['DEFINE_' . $allow_deny . '_IPS'],					'L_IP_EXCLUDE'			=> $user->lang['EXCLUDE_FROM_' . $allow_deny . '_IP'],					'L_REMOVE_IPS'			=> $user->lang['REMOVE_' . $allow_deny . '_IPS'])				);				// Output relevant options				foreach ($display_vars['vars'] as $config_key => $vars)				{					if (!is_array($vars) && strpos($config_key, 'legend') === false)					{						continue;					}					if (strpos($config_key, 'legend') !== false)					{						$template->assign_block_vars('options', array(							'S_LEGEND'		=> true,							'LEGEND'		=> (isset($user->lang[$vars])) ? $user->lang[$vars] : $vars)						);						continue;					}					$type = explode(':', $vars['type']);					$l_explain = '';					if ($vars['explain'] && isset($vars['lang_explain']))					{						$l_explain = (isset($user->lang[$vars['lang_explain']])) ? $user->lang[$vars['lang_explain']] : $vars['lang_explain'];					}					else if ($vars['explain'])					{						$l_explain = (isset($user->lang[$vars['lang'] . '_EXPLAIN'])) ? $user->lang[$vars['lang'] . '_EXPLAIN'] : '';					}					$content = build_cfg_template($type, $config_key, $this->new_config, $config_key, $vars);					if (empty($content))					{						continue;					}					$template->assign_block_vars('options', array(						'KEY'			=> $config_key,						'TITLE'			=> $user->lang[$vars['lang']],						'S_EXPLAIN'		=> $vars['explain'],						'TITLE_EXPLAIN'	=> $l_explain,						'CONTENT'		=> $content,						)					);					unset($display_vars['vars'][$config_key]);				}			break;			case 'extensions':				if ($submit || isset($_POST['add_extension_check']))				{					if ($submit)					{						// Change Extensions ?						$extension_change_list	= request_var('extension_change_list', array(0));						$group_select_list		= request_var('group_select', array(0));						// Generate correct Change List						$extensions = array();						for ($i = 0, $size = sizeof($extension_change_list); $i < $size; $i++)						{							$extensions[$extension_change_list[$i]]['group_id'] = $group_select_list[$i];						}						$sql = 'SELECT *							FROM ' . EXTENSIONS_TABLE . '							ORDER BY extension_id';						$result = $db->sql_query($sql);						while ($row = $db->sql_fetchrow($result))						{							if ($row['group_id'] != $extensions[$row['extension_id']]['group_id'])							{								$sql = 'UPDATE ' . EXTENSIONS_TABLE . '									SET group_id = ' . (int) $extensions[$row['extension_id']]['group_id'] . '									WHERE extension_id = ' . $row['extension_id'];								$db->sql_query($sql);								add_log('admin', 'LOG_ATTACH_EXT_UPDATE', $row['extension']);							}						}						$db->sql_freeresult($result);						// Delete Extension?						$extension_id_list = request_var('extension_id_list', array(0));						if (sizeof($extension_id_list))						{							$sql = 'SELECT extension								FROM ' . EXTENSIONS_TABLE . '								WHERE ' . $db->sql_in_set('extension_id', $extension_id_list);							$result = $db->sql_query($sql);							$extension_list = '';							while ($row = $db->sql_fetchrow($result))							{								$extension_list .= ($extension_list == '') ? $row['extension'] : ', ' . $row['extension'];							}							$db->sql_freeresult($result);							$sql = 'DELETE								FROM ' . EXTENSIONS_TABLE . '								WHERE ' . $db->sql_in_set('extension_id', $extension_id_list);							$db->sql_query($sql);							add_log('admin', 'LOG_ATTACH_EXT_DEL', $extension_list);						}					}					// Add Extension?					$add_extension			= strtolower(request_var('add_extension', ''));					$add_extension_group	= request_var('add_group_select', 0);					$add					= (isset($_POST['add_extension_check'])) ? true : false;					if ($add_extension && $add)					{						if (!sizeof($error))						{							$sql = 'SELECT extension_id								FROM ' . EXTENSIONS_TABLE . "								WHERE extension = '" . $db->sql_escape($add_extension) . "'";							$result = $db->sql_query($sql);							if ($row = $db->sql_fetchrow($result))							{								$error[] = sprintf($user->lang['EXTENSION_EXIST'], $add_extension);							}							$db->sql_freeresult($result);							if (!sizeof($error))							{								$sql_ary = array(									'group_id'	=>	$add_extension_group,									'extension'	=>	$add_extension								);								$db->sql_query('INSERT INTO ' . EXTENSIONS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));								add_log('admin', 'LOG_ATTACH_EXT_ADD', $add_extension);							}						}					}					if (!sizeof($error))					{						$notify[] = $user->lang['EXTENSIONS_UPDATED'];					}					$cache->destroy('_extensions');				}				$template->assign_vars(array(					'S_EXTENSIONS'			=> true,					'ADD_EXTENSION'			=> (isset($add_extension)) ? $add_extension : '',					'GROUP_SELECT_OPTIONS'	=> (isset($_POST['add_extension_check'])) ? $this->group_select('add_group_select', $add_extension_group, 'extension_group') : $this->group_select('add_group_select', false, 'extension_group'))				);				$sql = 'SELECT *					FROM ' . EXTENSIONS_TABLE . '					ORDER BY group_id, extension';				$result = $db->sql_query($sql);				if ($row = $db->sql_fetchrow($result))				{					$old_group_id = $row['group_id'];					do					{						$s_spacer = false;						$current_group_id = $row['group_id'];						if ($old_group_id != $current_group_id)						{							$s_spacer = true;							$old_group_id = $current_group_id;						}						$template->assign_block_vars('extensions', array(							'S_SPACER'		=> $s_spacer,							'EXTENSION_ID'	=> $row['extension_id'],							'EXTENSION'		=> $row['extension'],							'GROUP_OPTIONS'	=> $this->group_select('group_select[]', $row['group_id']))						);					}					while ($row = $db->sql_fetchrow($result));				}				$db->sql_freeresult($result);			break;			case 'ext_groups':				$template->assign_var('S_EXTENSION_GROUPS', true);				if ($submit)				{					$action = request_var('action', '');					$group_id = request_var('g', 0);					if ($action != 'add' && $action != 'edit')					{						trigger_error('NO_MODE', E_USER_ERROR);					}					if (!$group_id && $action == 'edit')					{						trigger_error($user->lang['NO_EXT_GROUP_SPECIFIED'] . adm_back_link($this->u_action), E_USER_WARNING);					}					if ($group_id)					{						$sql = 'SELECT *							FROM ' . EXTENSION_GROUPS_TABLE . "							WHERE group_id = $group_id";						$result = $db->sql_query($sql);						$ext_row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$ext_row)						{							trigger_error($user->lang['NO_EXT_GROUP_SPECIFIED'] . adm_back_link($this->u_action), E_USER_WARNING);						}					}					else					{						$ext_row = array();					}					$group_name = utf8_normalize_nfc(request_var('group_name', '', true));					$new_group_name = ($action == 'add') ? $group_name : (($ext_row['group_name'] != $group_name) ? $group_name : '');					if (!$group_name)					{						$error[] = $user->lang['NO_EXT_GROUP_NAME'];					}					// Check New Group Name					if ($new_group_name)					{						$sql = 'SELECT group_id							FROM ' . EXTENSION_GROUPS_TABLE . "							WHERE LOWER(group_name) = '" . $db->sql_escape(utf8_strtolower($new_group_name)) . "'";						if ($group_id)						{							$sql .= ' AND group_id <> ' . $group_id;						}						$result = $db->sql_query($sql);						if ($db->sql_fetchrow($result))						{							$error[] = sprintf($user->lang['EXTENSION_GROUP_EXIST'], $new_group_name);						}						$db->sql_freeresult($result);					}					if (!sizeof($error))					{						// Ok, build the update/insert array						$upload_icon	= request_var('upload_icon', 'no_image');						$size_select	= request_var('size_select', 'b');						$forum_select	= request_var('forum_select', false);						$allowed_forums	= request_var('allowed_forums', array(0));						$allow_in_pm	= (isset($_POST['allow_in_pm'])) ? true : false;						$max_filesize	= request_var('max_filesize', 0);						$max_filesize	= ($size_select == 'kb') ? round($max_filesize * 1024) : (($size_select == 'mb') ? round($max_filesize * 1048576) : $max_filesize);						$allow_group	= (isset($_POST['allow_group'])) ? true : false;						if ($max_filesize == $config['max_filesize'])						{							$max_filesize = 0;						}						if (!sizeof($allowed_forums))						{							$forum_select = false;						}						$group_ary = array(							'group_name'	=> $group_name,							'cat_id'		=> request_var('special_category', ATTACHMENT_CATEGORY_NONE),							'allow_group'	=> ($allow_group) ? 1 : 0,							'upload_icon'	=> ($upload_icon == 'no_image') ? '' : $upload_icon,							'max_filesize'	=> $max_filesize,							'allowed_forums'=> ($forum_select) ? serialize($allowed_forums) : '',							'allow_in_pm'	=> ($allow_in_pm) ? 1 : 0,						);						if ($action == 'add')						{							$group_ary['download_mode'] = INLINE_LINK;						}						$sql = ($action == 'add') ? 'INSERT INTO ' . EXTENSION_GROUPS_TABLE . ' ' : 'UPDATE ' . EXTENSION_GROUPS_TABLE . ' SET ';						$sql .= $db->sql_build_array((($action == 'add') ? 'INSERT' : 'UPDATE'), $group_ary);						$sql .= ($action == 'edit') ? " WHERE group_id = $group_id" : '';						$db->sql_query($sql);						if ($action == 'add')						{							$group_id = $db->sql_nextid();						}						$group_name = (isset($user->lang['EXT_GROUP_' . $group_name])) ? $user->lang['EXT_GROUP_' . $group_name] : $group_name;						add_log('admin', 'LOG_ATTACH_EXTGROUP_' . strtoupper($action), $group_name);					}					$extension_list = request_var('extensions', array(0));					if ($action == 'edit' && sizeof($extension_list))					{						$sql = 'UPDATE ' . EXTENSIONS_TABLE . "							SET group_id = 0							WHERE group_id = $group_id";						$db->sql_query($sql);					}					if (sizeof($extension_list))					{						$sql = 'UPDATE ' . EXTENSIONS_TABLE . "							SET group_id = $group_id							WHERE " . $db->sql_in_set('extension_id', $extension_list);						$db->sql_query($sql);					}					$cache->destroy('_extensions');					if (!sizeof($error))					{						$notify[] = $user->lang['SUCCESS_EXTENSION_GROUP_' . strtoupper($action)];					}				}				$cat_lang = array(					ATTACHMENT_CATEGORY_NONE		=> $user->lang['NO_FILE_CAT'],					ATTACHMENT_CATEGORY_IMAGE		=> $user->lang['CAT_IMAGES'],					ATTACHMENT_CATEGORY_WM			=> $user->lang['CAT_WM_FILES'],					ATTACHMENT_CATEGORY_RM			=> $user->lang['CAT_RM_FILES'],					ATTACHMENT_CATEGORY_FLASH		=> $user->lang['CAT_FLASH_FILES'],					ATTACHMENT_CATEGORY_QUICKTIME	=> $user->lang['CAT_QUICKTIME_FILES'],				);				$group_id = request_var('g', 0);				$action = (isset($_POST['add'])) ? 'add' : $action;				switch ($action)				{					case 'delete':						if (confirm_box(true))						{							$sql = 'SELECT group_name								FROM ' . EXTENSION_GROUPS_TABLE . "								WHERE group_id = $group_id";							$result = $db->sql_query($sql);							$group_name = (string) $db->sql_fetchfield('group_name');							$db->sql_freeresult($result);							$sql = 'DELETE								FROM ' . EXTENSION_GROUPS_TABLE . "								WHERE group_id = $group_id";							$db->sql_query($sql);							// Set corresponding Extensions to a pending Group							$sql = 'UPDATE ' . EXTENSIONS_TABLE . "								SET group_id = 0								WHERE group_id = $group_id";							$db->sql_query($sql);							add_log('admin', 'LOG_ATTACH_EXTGROUP_DEL', $group_name);							$cache->destroy('_extensions');							trigger_error($user->lang['EXTENSION_GROUP_DELETED'] . adm_back_link($this->u_action));						}						else						{							confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(								'i'			=> $id,								'mode'		=> $mode,								'group_id'	=> $group_id,								'action'	=> 'delete',							)));						}					break;					case 'edit':						if (!$group_id)						{							trigger_error($user->lang['NO_EXT_GROUP_SPECIFIED'] . adm_back_link($this->u_action), E_USER_WARNING);						}						$sql = 'SELECT *							FROM ' . EXTENSION_GROUPS_TABLE . "							WHERE group_id = $group_id";						$result = $db->sql_query($sql);						$ext_group_row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						$forum_ids = (!$ext_group_row['allowed_forums']) ? array() : unserialize(trim($ext_group_row['allowed_forums']));					// no break;					case 'add':						if ($action == 'add')						{							$ext_group_row = array(								'group_name'	=> utf8_normalize_nfc(request_var('group_name', '', true)),								'cat_id'		=> 0,								'allow_group'	=> 1,								'allow_in_pm'	=> 1,								'upload_icon'	=> '',								'max_filesize'	=> 0,							);							$forum_ids = array();						}						$extensions = array();						$sql = 'SELECT *							FROM ' . EXTENSIONS_TABLE . "							WHERE group_id = $group_id								OR group_id = 0							ORDER BY extension";						$result = $db->sql_query($sql);						$extensions = $db->sql_fetchrowset($result);						$db->sql_freeresult($result);						if ($ext_group_row['max_filesize'] == 0)						{							$ext_group_row['max_filesize'] = (int) $config['max_filesize'];						}						$max_filesize = get_formatted_filesize($ext_group_row['max_filesize'], false, array('mb', 'kb', 'b'));						$size_format = $max_filesize['si_identifier'];						$ext_group_row['max_filesize'] = $max_filesize['value'];						$img_path = $config['upload_icons_path'];						$filename_list = '';						$no_image_select = false;						$imglist = filelist($phpbb_root_path . $img_path);						if (!empty($imglist['']))						{							$imglist = array_values($imglist);							$imglist = $imglist[0];							foreach ($imglist as $key => $img)							{								if (!$ext_group_row['upload_icon'])								{									$no_image_select = true;									$selected = '';								}								else								{									$selected = ($ext_group_row['upload_icon'] == $img) ? ' selected="selected"' : '';								}								if (strlen($img) > 255)								{									continue;								}								$filename_list .= '<option value="' . htmlspecialchars($img) . '"' . $selected . '>' . htmlspecialchars($img) . '</option>';							}						}						$i = 0;						$assigned_extensions = '';						foreach ($extensions as $num => $row)						{							if ($row['group_id'] == $group_id && $group_id)							{								$assigned_extensions .= ($i) ? ', ' . $row['extension'] : $row['extension'];								$i++;							}						}						$s_extension_options = '';						foreach ($extensions as $row)						{							$s_extension_options .= '<option' . ((!$row['group_id']) ? ' class="disabled"' : '') . ' value="' . $row['extension_id'] . '"' . (($row['group_id'] == $group_id && $group_id) ? ' selected="selected"' : '') . '>' . $row['extension'] . '</option>';						}						$template->assign_vars(array(							'PHPBB_ROOT_PATH'		=> $phpbb_root_path,							'IMG_PATH'				=> $img_path,							'ACTION'				=> $action,							'GROUP_ID'				=> $group_id,							'GROUP_NAME'			=> $ext_group_row['group_name'],							'ALLOW_GROUP'			=> $ext_group_row['allow_group'],							'ALLOW_IN_PM'			=> $ext_group_row['allow_in_pm'],							'UPLOAD_ICON_SRC'		=> $phpbb_root_path . $img_path . '/' . $ext_group_row['upload_icon'],							'EXTGROUP_FILESIZE'		=> $ext_group_row['max_filesize'],							'ASSIGNED_EXTENSIONS'	=> $assigned_extensions,							'S_CATEGORY_SELECT'			=> $this->category_select('special_category', $group_id, 'category'),							'S_EXT_GROUP_SIZE_OPTIONS'	=> size_select_options($size_format),							'S_EXTENSION_OPTIONS'		=> $s_extension_options,							'S_FILENAME_LIST'			=> $filename_list,							'S_EDIT_GROUP'				=> true,							'S_NO_IMAGE'				=> $no_image_select,							'S_FORUM_IDS'				=> (sizeof($forum_ids)) ? true : false,							'U_EXTENSIONS'		=> append_sid("{$phpbb_admin_path}index.$phpEx", "i=$id&amp;mode=extensions"),							'U_BACK'			=> $this->u_action,							'L_LEGEND'			=> $user->lang[strtoupper($action) . '_EXTENSION_GROUP'])						);						$s_forum_id_options = '';						/** @todo use in-built function **/						$sql = 'SELECT forum_id, forum_name, parent_id, forum_type, left_id, right_id							FROM ' . FORUMS_TABLE . '							ORDER BY left_id ASC';						$result = $db->sql_query($sql, 600);						$right = $cat_right = $padding_inc = 0;						$padding = $forum_list = $holding = '';						$padding_store = array('0' => '');						while ($row = $db->sql_fetchrow($result))						{							if ($row['forum_type'] == FORUM_CAT && ($row['left_id'] + 1 == $row['right_id']))							{								// Non-postable forum with no subforums, don't display								continue;							}							if (!$auth->acl_get('f_list', $row['forum_id']))							{								// if the user does not have permissions to list this forum skip								continue;							}							if ($row['left_id'] < $right)							{								$padding .= '&nbsp; &nbsp;';								$padding_store[$row['parent_id']] = $padding;							}							else if ($row['left_id'] > $right + 1)							{								$padding = empty($padding_store[$row['parent_id']]) ? '' : $padding_store[$row['parent_id']];							}							$right = $row['right_id'];							$selected = (in_array($row['forum_id'], $forum_ids)) ? ' selected="selected"' : '';							if ($row['left_id'] > $cat_right)							{								// make sure we don't forget anything								$s_forum_id_options .= $holding;								$holding = '';							}							if ($row['right_id'] - $row['left_id'] > 1)							{								$cat_right = max($cat_right, $row['right_id']);								$holding .= '<option value="' . $row['forum_id'] . '"' . (($row['forum_type'] == FORUM_POST) ? ' class="sep"' : '') . $selected . '>' . $padding . $row['forum_name'] . '</option>';							}							else							{								$s_forum_id_options .= $holding . '<option value="' . $row['forum_id'] . '"' . (($row['forum_type'] == FORUM_POST) ? ' class="sep"' : '') . $selected . '>' . $padding . $row['forum_name'] . '</option>';								$holding = '';							}						}						if ($holding)						{							$s_forum_id_options .= $holding;						}						$db->sql_freeresult($result);						unset($padding_store);						$template->assign_vars(array(							'S_FORUM_ID_OPTIONS'	=> $s_forum_id_options)						);					break;				}				$sql = 'SELECT *					FROM ' . EXTENSION_GROUPS_TABLE . '					ORDER BY allow_group DESC, allow_in_pm DESC, group_name';				$result = $db->sql_query($sql);				$old_allow_group = $old_allow_pm = 1;				while ($row = $db->sql_fetchrow($result))				{					$s_add_spacer = ($old_allow_group != $row['allow_group'] || $old_allow_pm != $row['allow_in_pm']) ? true : false;					$template->assign_block_vars('groups', array(						'S_ADD_SPACER'		=> $s_add_spacer,						'S_ALLOWED_IN_PM'	=> ($row['allow_in_pm']) ? true : false,						'S_GROUP_ALLOWED'	=> ($row['allow_group']) ? true : false,						'U_EDIT'		=> $this->u_action . "&amp;action=edit&amp;g={$row['group_id']}",						'U_DELETE'		=> $this->u_action . "&amp;action=delete&amp;g={$row['group_id']}",						'GROUP_NAME'	=> (isset($user->lang['EXT_GROUP_' . $row['group_name']])) ? $user->lang['EXT_GROUP_' . $row['group_name']] : $row['group_name'],						'CATEGORY'		=> $cat_lang[$row['cat_id']],						)					);					$old_allow_group = $row['allow_group'];					$old_allow_pm = $row['allow_in_pm'];				}				$db->sql_freeresult($result);			break;			case 'orphan':				if ($submit)				{					$delete_files = (isset($_POST['delete'])) ? array_keys(request_var('delete', array('' => 0))) : array();					$add_files = (isset($_POST['add'])) ? array_keys(request_var('add', array('' => 0))) : array();					$post_ids = request_var('post_id', array('' => 0));					if (sizeof($delete_files))					{						$sql = 'SELECT *							FROM ' . ATTACHMENTS_TABLE . '							WHERE ' . $db->sql_in_set('attach_id', $delete_files) . '								AND is_orphan = 1';						$result = $db->sql_query($sql);						$delete_files = array();						while ($row = $db->sql_fetchrow($result))						{							phpbb_unlink($row['physical_filename'], 'file');							if ($row['thumbnail'])							{								phpbb_unlink($row['physical_filename'], 'thumbnail');							}							$delete_files[$row['attach_id']] = $row['real_filename'];						}						$db->sql_freeresult($result);					}					if (sizeof($delete_files))					{						$sql = 'DELETE FROM ' . ATTACHMENTS_TABLE . '							WHERE ' . $db->sql_in_set('attach_id', array_keys($delete_files));						$db->sql_query($sql);						add_log('admin', 'LOG_ATTACH_ORPHAN_DEL', implode(', ', $delete_files));						$notify[] = sprintf($user->lang['LOG_ATTACH_ORPHAN_DEL'], implode(', ', $delete_files));					}					$upload_list = array();					foreach ($add_files as $attach_id)					{						if (!isset($delete_files[$attach_id]) && !empty($post_ids[$attach_id]))						{							$upload_list[$attach_id] = $post_ids[$attach_id];						}					}					unset($add_files);					if (sizeof($upload_list))					{						$template->assign_var('S_UPLOADING_FILES', true);						$sql = 'SELECT forum_id, forum_name							FROM ' . FORUMS_TABLE;						$result = $db->sql_query($sql);						$forum_names = array();						while ($row = $db->sql_fetchrow($result))						{							$forum_names[$row['forum_id']] = $row['forum_name'];						}						$db->sql_freeresult($result);						$sql = 'SELECT forum_id, topic_id, post_id, poster_id							FROM ' . POSTS_TABLE . '							WHERE ' . $db->sql_in_set('post_id', $upload_list);						$result = $db->sql_query($sql);						$post_info = array();						while ($row = $db->sql_fetchrow($result))						{							$post_info[$row['post_id']] = $row;						}						$db->sql_freeresult($result);						// Select those attachments we want to change...						$sql = 'SELECT *							FROM ' . ATTACHMENTS_TABLE . '							WHERE ' . $db->sql_in_set('attach_id', array_keys($upload_list)) . '								AND is_orphan = 1';						$result = $db->sql_query($sql);						$files_added = $space_taken = 0;						while ($row = $db->sql_fetchrow($result))						{							$post_row = $post_info[$upload_list[$row['attach_id']]];							$template->assign_block_vars('upload', array(								'FILE_INFO'		=> sprintf($user->lang['UPLOADING_FILE_TO'], $row['real_filename'], $post_row['post_id']),								'S_DENIED'		=> (!$auth->acl_get('f_attach', $post_row['forum_id'])) ? true : false,								'L_DENIED'		=> (!$auth->acl_get('f_attach', $post_row['forum_id'])) ? sprintf($user->lang['UPLOAD_DENIED_FORUM'], $forum_names[$row['forum_id']]) : '')							);							if (!$auth->acl_get('f_attach', $post_row['forum_id']))							{								continue;							}							// Adjust attachment entry							$sql_ary = array(								'in_message'	=> 0,								'is_orphan'		=> 0,								'poster_id'		=> $post_row['poster_id'],								'post_msg_id'	=> $post_row['post_id'],								'topic_id'		=> $post_row['topic_id'],							);							$sql = 'UPDATE ' . ATTACHMENTS_TABLE . '								SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '								WHERE attach_id = ' . $row['attach_id'];							$db->sql_query($sql);							$sql = 'UPDATE ' . POSTS_TABLE . '								SET post_attachment = 1								WHERE post_id = ' . $post_row['post_id'];							$db->sql_query($sql);							$sql = 'UPDATE ' . TOPICS_TABLE . '								SET topic_attachment = 1								WHERE topic_id = ' . $post_row['topic_id'];							$db->sql_query($sql);							$space_taken += $row['filesize'];							$files_added++;							add_log('admin', 'LOG_ATTACH_FILEUPLOAD', $post_row['post_id'], $row['real_filename']);						}						$db->sql_freeresult($result);						if ($files_added)						{							set_config_count('upload_dir_size', $space_taken, true);							set_config_count('num_files', $files_added, true);						}					}				}				$template->assign_vars(array(					'S_ORPHAN'		=> true)				);				// Just get the files with is_orphan set and older than 3 hours				$sql = 'SELECT *					FROM ' . ATTACHMENTS_TABLE . '					WHERE is_orphan = 1						AND filetime < ' . (time() - 3*60*60) . '					ORDER BY filetime DESC';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$template->assign_block_vars('orphan', array(						'FILESIZE'			=> get_formatted_filesize($row['filesize']),						'FILETIME'			=> $user->format_date($row['filetime']),						'REAL_FILENAME'		=> utf8_basename($row['real_filename']),						'PHYSICAL_FILENAME'	=> utf8_basename($row['physical_filename']),						'ATTACH_ID'			=> $row['attach_id'],						'POST_IDS'			=> (!empty($post_ids[$row['attach_id']])) ? $post_ids[$row['attach_id']] : '',						'U_FILE'			=> append_sid($phpbb_root_path . 'download/file.' . $phpEx, 'mode=view&amp;id=' . $row['attach_id']))					);				}				$db->sql_freeresult($result);			break;		}		if (sizeof($error))		{			$template->assign_vars(array(				'S_WARNING'		=> true,				'WARNING_MSG'	=> implode('<br />', $error))			);		}		if (sizeof($notify))		{			$template->assign_vars(array(				'S_NOTIFY'		=> true,				'NOTIFY_MSG'	=> implode('<br />', $notify))			);		}	}	/**	* Build Select for category items	*/	function category_select($select_name, $group_id = false, $key = '')	{		global $db, $user;		$types = array(			ATTACHMENT_CATEGORY_NONE		=> $user->lang['NO_FILE_CAT'],			ATTACHMENT_CATEGORY_IMAGE		=> $user->lang['CAT_IMAGES'],			ATTACHMENT_CATEGORY_WM			=> $user->lang['CAT_WM_FILES'],			ATTACHMENT_CATEGORY_RM			=> $user->lang['CAT_RM_FILES'],			ATTACHMENT_CATEGORY_FLASH		=> $user->lang['CAT_FLASH_FILES'],			ATTACHMENT_CATEGORY_QUICKTIME	=> $user->lang['CAT_QUICKTIME_FILES'],		);		if ($group_id)		{			$sql = 'SELECT cat_id				FROM ' . EXTENSION_GROUPS_TABLE . '				WHERE group_id = ' . (int) $group_id;			$result = $db->sql_query($sql);			$cat_type = (!($row = $db->sql_fetchrow($result))) ? ATTACHMENT_CATEGORY_NONE : $row['cat_id'];			$db->sql_freeresult($result);		}		else		{			$cat_type = ATTACHMENT_CATEGORY_NONE;		}		$group_select = '<select name="' . $select_name . '"' . (($key) ? ' id="' . $key . '"' : '') . '>';		foreach ($types as $type => $mode)		{			$selected = ($type == $cat_type) ? ' selected="selected"' : '';			$group_select .= '<option value="' . $type . '"' . $selected . '>' . $mode . '</option>';		}		$group_select .= '</select>';		return $group_select;	}	/**	* Extension group select	*/	function group_select($select_name, $default_group = false, $key = '')	{		global $db, $user;		$group_select = '<select name="' . $select_name . '"' . (($key) ? ' id="' . $key . '"' : '') . '>';		$sql = 'SELECT group_id, group_name			FROM ' . EXTENSION_GROUPS_TABLE . '			ORDER BY group_name';		$result = $db->sql_query($sql);		$group_name = array();		while ($row = $db->sql_fetchrow($result))		{			$row['group_name'] = (isset($user->lang['EXT_GROUP_' . $row['group_name']])) ? $user->lang['EXT_GROUP_' . $row['group_name']] : $row['group_name'];			$group_name[] = $row;		}		$db->sql_freeresult($result);		$row['group_id'] = 0;		$row['group_name'] = $user->lang['NOT_ASSIGNED'];		$group_name[] = $row;		for ($i = 0; $i < sizeof($group_name); $i++)		{			if ($default_group === false)			{				$selected = ($i == 0) ? ' selected="selected"' : '';			}			else			{				$selected = ($group_name[$i]['group_id'] == $default_group) ? ' selected="selected"' : '';			}			$group_select .= '<option value="' . $group_name[$i]['group_id'] . '"' . $selected . '>' . $group_name[$i]['group_name'] . '</option>';		}		$group_select .= '</select>';		return $group_select;	}	/**	* Search Imagick	*/	function search_imagemagick()	{		$imagick = '';		$exe = ((defined('PHP_OS')) && (preg_match('#^win#i', PHP_OS))) ? '.exe' : '';		$magic_home = getenv('MAGICK_HOME');		if (empty($magic_home))		{			$locations = array('C:/WINDOWS/', 'C:/WINNT/', 'C:/WINDOWS/SYSTEM/', 'C:/WINNT/SYSTEM/', 'C:/WINDOWS/SYSTEM32/', 'C:/WINNT/SYSTEM32/', '/usr/bin/', '/usr/sbin/', '/usr/local/bin/', '/usr/local/sbin/', '/opt/', '/usr/imagemagick/', '/usr/bin/imagemagick/');			$path_locations = str_replace('\\', '/', (explode(($exe) ? ';' : ':', getenv('PATH'))));			$locations = array_merge($path_locations, $locations);			foreach ($locations as $location)			{				// The path might not end properly, fudge it				if (substr($location, -1) !== '/')				{					$location .= '/';				}				if (@file_exists($location) && @is_readable($location . 'mogrify' . $exe) && @filesize($location . 'mogrify' . $exe) > 3000)				{					$imagick = str_replace('\\', '/', $location);					continue;				}			}		}		else		{			$imagick = str_replace('\\', '/', $magic_home);		}		return $imagick;	}	/**	* Test Settings	*/	function test_upload(&$error, $upload_dir, $create_directory = false)	{		global $user, $phpbb_root_path;		// Does the target directory exist, is it a directory and writable.		if ($create_directory)		{			if (!file_exists($phpbb_root_path . $upload_dir))			{				@mkdir($phpbb_root_path . $upload_dir, 0777);				phpbb_chmod($phpbb_root_path . $upload_dir, CHMOD_READ | CHMOD_WRITE);			}		}		if (!file_exists($phpbb_root_path . $upload_dir))		{			$error[] = sprintf($user->lang['NO_UPLOAD_DIR'], $upload_dir);			return;		}		if (!is_dir($phpbb_root_path . $upload_dir))		{			$error[] = sprintf($user->lang['UPLOAD_NOT_DIR'], $upload_dir);			return;		}		if (!phpbb_is_writable($phpbb_root_path . $upload_dir))		{			$error[] = sprintf($user->lang['NO_WRITE_UPLOAD'], $upload_dir);			return;		}	}	/**	* Perform operations on sites for external linking	*/	function perform_site_list()	{		global $db, $user;		if (isset($_REQUEST['securesubmit']))		{			// Grab the list of entries			$ips = request_var('ips', '');			$ip_list = array_unique(explode("\n", $ips));			$ip_list_log = implode(', ', $ip_list);			$ip_exclude = (!empty($_POST['ipexclude'])) ? 1 : 0;			$iplist = array();			$hostlist = array();			foreach ($ip_list as $item)			{				if (preg_match('#^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})[ ]*\-[ ]*([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$#', trim($item), $ip_range_explode))				{					// Don't ask about all this, just don't ask ... !					$ip_1_counter = $ip_range_explode[1];					$ip_1_end = $ip_range_explode[5];					while ($ip_1_counter <= $ip_1_end)					{						$ip_2_counter = ($ip_1_counter == $ip_range_explode[1]) ? $ip_range_explode[2] : 0;						$ip_2_end = ($ip_1_counter < $ip_1_end) ? 254 : $ip_range_explode[6];						if ($ip_2_counter == 0 && $ip_2_end == 254)						{							$ip_2_counter = 256;							$ip_2_fragment = 256;							$iplist[] = "'$ip_1_counter.*'";						}						while ($ip_2_counter <= $ip_2_end)						{							$ip_3_counter = ($ip_2_counter == $ip_range_explode[2] && $ip_1_counter == $ip_range_explode[1]) ? $ip_range_explode[3] : 0;							$ip_3_end = ($ip_2_counter < $ip_2_end || $ip_1_counter < $ip_1_end) ? 254 : $ip_range_explode[7];							if ($ip_3_counter == 0 && $ip_3_end == 254)							{								$ip_3_counter = 256;								$ip_3_fragment = 256;								$iplist[] = "'$ip_1_counter.$ip_2_counter.*'";							}							while ($ip_3_counter <= $ip_3_end)							{								$ip_4_counter = ($ip_3_counter == $ip_range_explode[3] && $ip_2_counter == $ip_range_explode[2] && $ip_1_counter == $ip_range_explode[1]) ? $ip_range_explode[4] : 0;								$ip_4_end = ($ip_3_counter < $ip_3_end || $ip_2_counter < $ip_2_end) ? 254 : $ip_range_explode[8];								if ($ip_4_counter == 0 && $ip_4_end == 254)								{									$ip_4_counter = 256;									$ip_4_fragment = 256;									$iplist[] = "'$ip_1_counter.$ip_2_counter.$ip_3_counter.*'";								}								while ($ip_4_counter <= $ip_4_end)								{									$iplist[] = "'$ip_1_counter.$ip_2_counter.$ip_3_counter.$ip_4_counter'";									$ip_4_counter++;								}								$ip_3_counter++;							}							$ip_2_counter++;						}						$ip_1_counter++;					}				}				else if (preg_match('#^([0-9]{1,3})\.([0-9\*]{1,3})\.([0-9\*]{1,3})\.([0-9\*]{1,3})$#', trim($item)) || preg_match('#^[a-f0-9:]+\*?$#i', trim($item)))				{					$iplist[] = "'" . trim($item) . "'";				}				else if (preg_match('#^([\w\-_]\.?){2,}$#is', trim($item)))				{					$hostlist[] = "'" . trim($item) . "'";				}				else if (preg_match("#^([a-z0-9\-\*\._/]+?)$#is", trim($item)))				{					$hostlist[] = "'" . trim($item) . "'";				}			}			$sql = 'SELECT site_ip, site_hostname				FROM ' . SITELIST_TABLE . "				WHERE ip_exclude = $ip_exclude";			$result = $db->sql_query($sql);			if ($row = $db->sql_fetchrow($result))			{				$iplist_tmp = array();				$hostlist_tmp = array();				do				{					if ($row['site_ip'])					{						if (strlen($row['site_ip']) > 40)						{							continue;						}						$iplist_tmp[] = "'" . $row['site_ip'] . "'";					}					else if ($row['site_hostname'])					{						if (strlen($row['site_hostname']) > 255)						{							continue;						}						$hostlist_tmp[] = "'" . $row['site_hostname'] . "'";					}					// break;				}				while ($row = $db->sql_fetchrow($result));				$iplist = array_unique(array_diff($iplist, $iplist_tmp));				$hostlist = array_unique(array_diff($hostlist, $hostlist_tmp));				unset($iplist_tmp);				unset($hostlist_tmp);			}			$db->sql_freeresult($result);			if (sizeof($iplist))			{				foreach ($iplist as $ip_entry)				{					$sql = 'INSERT INTO ' . SITELIST_TABLE . " (site_ip, ip_exclude)						VALUES ($ip_entry, $ip_exclude)";					$db->sql_query($sql);				}			}			if (sizeof($hostlist))			{				foreach ($hostlist as $host_entry)				{					$sql = 'INSERT INTO ' . SITELIST_TABLE . " (site_hostname, ip_exclude)						VALUES ($host_entry, $ip_exclude)";					$db->sql_query($sql);				}			}			if (!empty($ip_list_log))			{				// Update log				$log_entry = ($ip_exclude) ? 'LOG_DOWNLOAD_EXCLUDE_IP' : 'LOG_DOWNLOAD_IP';				add_log('admin', $log_entry, $ip_list_log);			}			trigger_error($user->lang['SECURE_DOWNLOAD_UPDATE_SUCCESS'] . adm_back_link($this->u_action));		}		else if (isset($_POST['unsecuresubmit']))		{			$unip_sql = request_var('unip', array(0));			if (sizeof($unip_sql))			{				$l_unip_list = '';				// Grab details of ips for logging information later				$sql = 'SELECT site_ip, site_hostname					FROM ' . SITELIST_TABLE . '					WHERE ' . $db->sql_in_set('site_id', $unip_sql);				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$l_unip_list .= (($l_unip_list != '') ? ', ' : '') . (($row['site_ip']) ? $row['site_ip'] : $row['site_hostname']);				}				$db->sql_freeresult($result);				$sql = 'DELETE FROM ' . SITELIST_TABLE . '					WHERE ' . $db->sql_in_set('site_id', $unip_sql);				$db->sql_query($sql);				add_log('admin', 'LOG_DOWNLOAD_REMOVE_IP', $l_unip_list);			}			trigger_error($user->lang['SECURE_DOWNLOAD_UPDATE_SUCCESS'] . adm_back_link($this->u_action));		}	}	/**	* Write display_order config field	*/	function display_order($value, $key = '')	{		$radio_ary = array(0 => 'DESCENDING', 1 => 'ASCENDING');		return h_radio('config[display_order]', $radio_ary, $value, $key);	}	/**	* Adjust all three max_filesize config vars for display	*/	function max_filesize($value, $key = '')	{		// Determine size var and adjust the value accordingly		$filesize = get_formatted_filesize($value, false, array('mb', 'kb', 'b'));		$size_var = $filesize['si_identifier'];		$value = $filesize['value'];		return '<input type="text" id="' . $key . '" size="8" maxlength="15" name="config[' . $key . ']" value="' . $value . '" /> <select name="' . $key . '">' . size_select_options($size_var) . '</select>';	}	/**	* Write secure_allow_deny config field	*/	function select_allow_deny($value, $key = '')	{		$radio_ary = array(1 => 'ORDER_ALLOW_DENY', 0 => 'ORDER_DENY_ALLOW');		return h_radio('config[' . $key . ']', $radio_ary, $value, $key);	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_captcha_info{	function module()	{		return array(			'filename'	=> 'acp_captcha',			'title'		=> 'ACP_CAPTCHA',			'version'	=> '1.0.0',			'modes'		=> array(				'visual'		=> array('title' => 'ACP_VC_SETTINGS', 'auth' => 'acl_a_board', 'cat' => array('ACP_BOARD_CONFIGURATION')),				'img'			=> array('title' => 'ACP_VC_CAPTCHA_DISPLAY', 'auth' => 'acl_a_board', 'cat' => array('ACP_BOARD_CONFIGURATION'), 'display' => false)			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php return array(''=>'i',''=>'!',''=>'a',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'o',''=>'o',''=>'',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>'`',''=>'`',''=>'',''=>'^',''=>'^',''=>'_',''=>'_',''=>'_',''=>'_',''=>'',''=>'-',''=>'-',''=>'-',''=>'-',''=>'-',''=>'-',''=>'',''=>'',''=>'',''=>',',''=>',',''=>'',''=>'',''=>';',''=>';',''=>':',''=>':',''=>':',''=>':',''=>'::=',''=>'.',''=>'.',''=>'.',''=>'..',''=>'...',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'4',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'L',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'(',''=>'(1)',''=>'(l)',''=>'(10)',''=>'(11)',''=>'(12)',''=>'(13)',''=>'(14)',''=>'(15)',''=>'(16)',''=>'(17)',''=>'(18)',''=>'(19)',''=>'(2)',''=>'(20)',''=>'(3)',''=>'(4)',''=>'(5)',''=>'(6)',''=>'(7)',''=>'(8)',''=>'(9)',''=>'(a)',''=>'(b)',''=>'(c)',''=>'(d)',''=>'(e)',''=>'(f)',''=>'(g)',''=>'(h)',''=>'(i)',''=>'(j)',''=>'(k)',''=>'(m)',''=>'(n)',''=>'(o)',''=>'(p)',''=>'(q)',''=>'(r)',''=>'(s)',''=>'(t)',''=>'(u)',''=>'(v)',''=>'(w)',''=>'(x)',''=>'(y)',''=>'(z)',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>')',''=>'[',''=>'[',''=>']',''=>']',''=>'{',''=>'}',''=>'',''=>'',''=>'',''=>'',''=>'@',''=>'*',''=>'/',''=>'/',''=>'/',''=>'\\',''=>'&',''=>'#',''=>'%',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','\''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','"'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'+',''=>'+',''=>'<',''=>'<',''=>'=',''=>'==',''=>'===',''=>'>',''=>'>',''=>'',''=>'',''=>'~',''=>'~',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'$',''=>'',''=>'Y',''=>'W',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'',''=>'',''=>'0',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1','l'=>'l',''=>'l',''=>'1',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'',''=>'l',''=>'l',''=>'l',''=>'l',''=>'',''=>'1.',''=>'l',''=>'1',''=>'',''=>'10.',''=>'10',''=>'10',''=>'10',''=>'11.',''=>'11',''=>'11',''=>'11',''=>'12.',''=>'12',''=>'12',''=>'12',''=>'13.',''=>'13',''=>'13',''=>'14.',''=>'14',''=>'14',''=>'15.',''=>'15',''=>'15',''=>'16.',''=>'16',''=>'16',''=>'17.',''=>'17',''=>'17',''=>'18.',''=>'18',''=>'18',''=>'19.',''=>'19',''=>'19',''=>'lj',''=>'1',''=>'1',''=>'1',''=>'2',''=>'2',''=>'2',''=>'2',''=>'2',''=>'2',''=>'2',''=>'',''=>'',''=>'2.',''=>'20.',''=>'20',''=>'20',''=>'21',''=>'21',''=>'22',''=>'22',''=>'23',''=>'23',''=>'24',''=>'24',''=>'25',''=>'26',''=>'27',''=>'28',''=>'29',''=>'2',''=>'2',''=>'2',''=>'3',''=>'3',''=>'3',''=>'3',''=>'3',''=>'3',''=>'',''=>'',''=>'3.',''=>'30',''=>'31',''=>'3',''=>'3',''=>'3',''=>'4',''=>'4',''=>'4',''=>'4',''=>'4',''=>'4',''=>'4',''=>'',''=>'4.',''=>'4',''=>'4',''=>'4',''=>'4',''=>'5',''=>'5',''=>'5',''=>'5',''=>'5',''=>'5',''=>'',''=>'5.',''=>'5',''=>'5',''=>'5',''=>'6',''=>'6',''=>'6',''=>'6',''=>'6',''=>'6',''=>'6',''=>'',''=>'6.',''=>'6',''=>'6',''=>'6',''=>'7',''=>'7',''=>'7',''=>'7',''=>'7',''=>'7',''=>'',''=>'',''=>'7.',''=>'7',''=>'7',''=>'7',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'',''=>'',''=>'8.',''=>'8',''=>'8',''=>'8',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'',''=>'',''=>'9.',''=>'9',''=>'9',''=>'9',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a/c',''=>'a/s',''=>'ae',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c/o',''=>'c/u',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'dz',''=>'d',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'E',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'',''=>'',''=>'',''=>'',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'ii',''=>'iii',''=>'ij',''=>'iv',''=>'ix',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'nj',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'oe',''=>'o',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'q',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'',''=>'',''=>'',''=>'',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'t',''=>'',''=>'',''=>'t',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'vi',''=>'vii',''=>'viii',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'xi',''=>'xii',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'','?'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','!'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'ae',''=>'r',''=>'r',''=>'',''=>'',''=>'i',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'o',''=>'o',''=>'c',''=>'',''=>'y',''=>'y',''=>'h',''=>'',''=>'',''=>'',''=>'',''=>'q',''=>'n',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'   ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'o',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'y',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'w',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'P',''=>'d',''=>'J',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'P',''=>'P',''=>'',''=>'d',''=>'d',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'J',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'x',''=>'x',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'P',''=>'',''=>'d',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'',''=>'',''=>'',''=>'',''=>'J',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'J',''=>'',''=>'',''=>'',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','|'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'C',''=>'F',''=>'',''=>'FAX',''=>'N',''=>'No',''=>'Q',''=>'Rs',''=>'T',''=>'TEL',''=>'U',''=>'W',''=>'W',''=>'X',''=>'Y',''=>'',''=>'',''=>'',''=>'c',''=>'Y',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'b',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'a',''=>'b',''=>'b',''=>'c',''=>'d',''=>'d',''=>'e',''=>'',''=>'',''=>'',''=>'f',''=>'g',''=>'h',''=>'h',''=>'h',''=>'h',''=>'i',''=>'i',''=>'i',''=>'j',''=>'j',''=>'m',''=>'n',''=>'n',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'p',''=>'p',''=>'',''=>'q',''=>'',''=>'',''=>'r',''=>'r',''=>'s',''=>'u',''=>'u',''=>'v',''=>'v',''=>'w',''=>'w',''=>'x',''=>'x',''=>'y',''=>'y',''=>'',''=>'',''=>'',''=>'',''=>'i',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'A',''=>'J',''=>'H',''=>'V',''=>'P',''=>'B',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'A',''=>'B',''=>'C',''=>'D',''=>'E',''=>'F',''=>'G',''=>'H',''=>'J',''=>'K',''=>'L',''=>'M',''=>'P',''=>'R',''=>'S',''=>'V',''=>'Z');
<?php/**** recaptcha [English]** @package language* @version $Id$* @copyright (c) 2009 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'RECAPTCHA_LANG'				=> 'en',	'RECAPTCHA_NOT_AVAILABLE'		=> 'In order to use reCaptcha, you must create an account on <a href="http://www.google.com/recaptcha">www.google.com/recaptcha</a>.',	'CAPTCHA_RECAPTCHA'				=> 'reCaptcha',	'RECAPTCHA_INCORRECT'			=> 'The visual confirmation code you submitted was incorrect',	'RECAPTCHA_PUBLIC'				=> 'Public reCaptcha key',	'RECAPTCHA_PUBLIC_EXPLAIN'		=> 'Your public reCaptcha key. Keys can be obtained on <a href="http://www.google.com/recaptcha">www.google.com/recaptcha</a>.',	'RECAPTCHA_PRIVATE'				=> 'Private reCaptcha key',	'RECAPTCHA_PRIVATE_EXPLAIN'		=> 'Your private reCaptcha key. Keys can be obtained on <a href="http://www.google.com/recaptcha">www.google.com/recaptcha</a>.',	'RECAPTCHA_EXPLAIN'				=> 'In an effort to prevent automatic submissions, we require that you enter both of the words displayed into the text field underneath.',));?>
<?php/**** @package dbal* @version $Id$* @copyright (c) 2010 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License** This is the MS SQL Server Native database abstraction layer.* PHP mssql native driver required.* @author Chris Pucci**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}include_once($phpbb_root_path . 'includes/db/dbal.' . $phpEx);/** * Prior to version 1.1 the SQL Server Native PHP driver didn't support sqlsrv_num_rows, or cursor based seeking so we recall all rows into an array * and maintain our own cursor index into that array. */class result_mssqlnative{	public function result_mssqlnative($queryresult = false)	{		$this->m_cursor = 0;		$this->m_rows = array();		$this->m_num_fields = sqlsrv_num_fields($queryresult);		$this->m_field_meta = sqlsrv_field_metadata($queryresult);		while ($row = sqlsrv_fetch_array($queryresult, SQLSRV_FETCH_ASSOC))		{			if ($row !== null)			{				foreach($row as $k => $v)				{					if (is_object($v) && method_exists($v, 'format'))					{						$row[$k] = $v->format("Y-m-d\TH:i:s\Z");					}				}				$this->m_rows[] = $row;//read results into memory, cursors are not supported			}		}		$this->m_row_count = sizeof($this->m_rows);	}	private function array_to_obj($array, &$obj)	{		foreach ($array as $key => $value)		{			if (is_array($value))			{				$obj->$key = new stdClass();				array_to_obj($value, $obj->$key);			}			else			{				$obj->$key = $value;			}		}		return $obj;	}	public function fetch($mode = SQLSRV_FETCH_BOTH, $object_class = 'stdClass')	{		if ($this->m_cursor >= $this->m_row_count || $this->m_row_count == 0)		{			return false;		}		$ret = false;		$arr_num = array();		if ($mode == SQLSRV_FETCH_NUMERIC || $mode == SQLSRV_FETCH_BOTH)		{			foreach($this->m_rows[$this->m_cursor] as $key => $value)			{				$arr_num[] = $value;			}		}		switch ($mode)		{			case SQLSRV_FETCH_ASSOC:				$ret = $this->m_rows[$this->m_cursor];			break;			case SQLSRV_FETCH_NUMERIC:				$ret = $arr_num;			break;			case 'OBJECT':				$ret = $this->array_to_obj($this->m_rows[$this->m_cursor], $o = new $object_class);			break;			case SQLSRV_FETCH_BOTH:			default:				$ret = $this->m_rows[$this->m_cursor] + $arr_num;			break;		}		$this->m_cursor++;		return $ret;	}	public function get($pos, $fld)	{		return $this->m_rows[$pos][$fld];	}	public function num_rows()	{		return $this->m_row_count;	}	public function seek($iRow)	{		$this->m_cursor = min($iRow, $this->m_row_count);	}	public function num_fields()	{		return $this->m_num_fields;	}	public function field_name($nr)	{		$arr_keys = array_keys($this->m_rows[0]);		return $arr_keys[$nr];	}	public function field_type($nr)	{		$i = 0;		$int_type = -1;		$str_type = '';		foreach ($this->m_field_meta as $meta)		{			if ($nr == $i)			{				$int_type = $meta['Type'];				break;			}			$i++;		}		//http://msdn.microsoft.com/en-us/library/cc296183.aspx contains type table		switch ($int_type)		{			case SQLSRV_SQLTYPE_BIGINT: 		$str_type = 'bigint'; break;			case SQLSRV_SQLTYPE_BINARY: 		$str_type = 'binary'; break;			case SQLSRV_SQLTYPE_BIT: 			$str_type = 'bit'; break;			case SQLSRV_SQLTYPE_CHAR: 			$str_type = 'char'; break;			case SQLSRV_SQLTYPE_DATETIME: 		$str_type = 'datetime'; break;			case SQLSRV_SQLTYPE_DECIMAL/*($precision, $scale)*/: $str_type = 'decimal'; break;			case SQLSRV_SQLTYPE_FLOAT: 			$str_type = 'float'; break;			case SQLSRV_SQLTYPE_IMAGE: 			$str_type = 'image'; break;			case SQLSRV_SQLTYPE_INT: 			$str_type = 'int'; break;			case SQLSRV_SQLTYPE_MONEY: 			$str_type = 'money'; break;			case SQLSRV_SQLTYPE_NCHAR/*($charCount)*/: $str_type = 'nchar'; break;			case SQLSRV_SQLTYPE_NUMERIC/*($precision, $scale)*/: $str_type = 'numeric'; break;			case SQLSRV_SQLTYPE_NVARCHAR/*($charCount)*/: $str_type = 'nvarchar'; break;			case SQLSRV_SQLTYPE_NTEXT: 			$str_type = 'ntext'; break;			case SQLSRV_SQLTYPE_REAL: 			$str_type = 'real'; break;			case SQLSRV_SQLTYPE_SMALLDATETIME: 	$str_type = 'smalldatetime'; break;			case SQLSRV_SQLTYPE_SMALLINT: 		$str_type = 'smallint'; break;			case SQLSRV_SQLTYPE_SMALLMONEY: 	$str_type = 'smallmoney'; break;			case SQLSRV_SQLTYPE_TEXT: 			$str_type = 'text'; break;			case SQLSRV_SQLTYPE_TIMESTAMP: 		$str_type = 'timestamp'; break;			case SQLSRV_SQLTYPE_TINYINT: 		$str_type = 'tinyint'; break;			case SQLSRV_SQLTYPE_UNIQUEIDENTIFIER: $str_type = 'uniqueidentifier'; break;			case SQLSRV_SQLTYPE_UDT: 			$str_type = 'UDT'; break;			case SQLSRV_SQLTYPE_VARBINARY/*($byteCount)*/: $str_type = 'varbinary'; break;			case SQLSRV_SQLTYPE_VARCHAR/*($charCount)*/: $str_type = 'varchar'; break;			case SQLSRV_SQLTYPE_XML: 			$str_type = 'xml'; break;			default: $str_type = $int_type;		}		return $str_type;	}	public function free()	{		unset($this->m_rows);		return;	}}/*** @package dbal*/class dbal_mssqlnative extends dbal{	var $m_insert_id = NULL;	var $last_query_text = '';	var $query_options = array();	/**	* Connect to server	*/	function sql_connect($sqlserver, $sqluser, $sqlpassword, $database, $port = false, $persistency = false, $new_link = false)	{		# Test for driver support, to avoid suppressed fatal error		if (!function_exists('sqlsrv_connect'))		{			trigger_error('Native MS SQL Server driver for PHP is missing or needs to be updated. Version 1.1 or later is required to install phpBB3. You can download the driver from: http://www.microsoft.com/sqlserver/2005/en/us/PHP-Driver.aspx\n', E_USER_ERROR);		}		//set up connection variables		$this->persistency = $persistency;		$this->user = $sqluser;		$this->dbname = $database;		$port_delimiter = (defined('PHP_OS') && substr(PHP_OS, 0, 3) === 'WIN') ? ',' : ':';		$this->server = $sqlserver . (($port) ? $port_delimiter . $port : '');		//connect to database		error_reporting(E_ALL);		$this->db_connect_id = sqlsrv_connect($this->server, array(			'Database' => $this->dbname,			'UID' => $this->user,			'PWD' => $sqlpassword		));		return ($this->db_connect_id) ? $this->db_connect_id : $this->sql_error('');	}	/**	* Version information about used database	* @param bool $raw if true, only return the fetched sql_server_version	* @param bool $use_cache If true, it is safe to retrieve the value from the cache	* @return string sql server version	*/	function sql_server_info($raw = false, $use_cache = true)	{		global $cache;		if (!$use_cache || empty($cache) || ($this->sql_server_version = $cache->get('mssql_version')) === false)		{			$arr_server_info = sqlsrv_server_info($this->db_connect_id);			$this->sql_server_version = $arr_server_info['SQLServerVersion'];			if (!empty($cache) && $use_cache)			{				$cache->put('mssql_version', $this->sql_server_version);			}		}		if ($raw)		{			return $this->sql_server_version;		}		return ($this->sql_server_version) ? 'MSSQL<br />' . $this->sql_server_version : 'MSSQL';	}	/**	* {@inheritDoc}	*/	function sql_buffer_nested_transactions()	{		return true;	}	/**	* SQL Transaction	* @access private	*/	function _sql_transaction($status = 'begin')	{		switch ($status)		{			case 'begin':				return sqlsrv_begin_transaction($this->db_connect_id);			break;			case 'commit':				return sqlsrv_commit($this->db_connect_id);			break;			case 'rollback':				return sqlsrv_rollback($this->db_connect_id);			break;		}		return true;	}	/**	* Base query method	*	* @param	string	$query		Contains the SQL query which shall be executed	* @param	int		$cache_ttl	Either 0 to avoid caching or the time in seconds which the result shall be kept in cache	* @return	mixed				When casted to bool the returned value returns true on success and false on failure	*	* @access	public	*/	function sql_query($query = '', $cache_ttl = 0)	{		if ($query != '')		{			global $cache;			// EXPLAIN only in extra debug mode			if (defined('DEBUG_EXTRA'))			{				$this->sql_report('start', $query);			}			$this->last_query_text = $query;			$this->query_result = ($cache_ttl && method_exists($cache, 'sql_load')) ? $cache->sql_load($query) : false;			$this->sql_add_num_queries($this->query_result);			if ($this->query_result === false)			{				if (($this->query_result = @sqlsrv_query($this->db_connect_id, $query, array(), $this->query_options)) === false)				{					$this->sql_error($query);				}				// reset options for next query				$this->query_options = array();				if (defined('DEBUG_EXTRA'))				{					$this->sql_report('stop', $query);				}				if ($cache_ttl && method_exists($cache, 'sql_save'))				{					$this->open_queries[(int) $this->query_result] = $this->query_result;					$cache->sql_save($query, $this->query_result, $cache_ttl);				}				else if (strpos($query, 'SELECT') === 0 && $this->query_result)				{					$this->open_queries[(int) $this->query_result] = $this->query_result;				}			}			else if (defined('DEBUG_EXTRA'))			{				$this->sql_report('fromcache', $query);			}		}		else		{			return false;		}		return $this->query_result;	}	/**	* Build LIMIT query	*/	function _sql_query_limit($query, $total, $offset = 0, $cache_ttl = 0)	{		$this->query_result = false;		// total == 0 means all results - not zero results		if ($offset == 0 && $total !== 0)		{			if (strpos($query, "SELECT") === false)			{				$query = "TOP {$total} " . $query;			}			else			{				$query = preg_replace('/SELECT(\s*DISTINCT)?/Dsi', 'SELECT$1 TOP '.$total, $query);			}		}		else if ($offset > 0)		{			$query = preg_replace('/SELECT(\s*DISTINCT)?/Dsi', 'SELECT$1 TOP(10000000) ', $query);			$query = 'SELECT *					FROM (SELECT sub2.*, ROW_NUMBER() OVER(ORDER BY sub2.line2) AS line3					FROM (SELECT 1 AS line2, sub1.* FROM (' . $query . ') AS sub1) as sub2) AS sub3';			if ($total > 0)			{				$query .= ' WHERE line3 BETWEEN ' . ($offset+1) . ' AND ' . ($offset + $total);			}			else			{				$query .= ' WHERE line3 > ' . $offset;			}		}		$result = $this->sql_query($query, $cache_ttl);		return $result;	}	/**	* Return number of affected rows	*/	function sql_affectedrows()	{		return (!empty($this->query_result)) ? @sqlsrv_rows_affected($this->query_result) : false;	}	/**	* Fetch current row	*/	function sql_fetchrow($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_fetchrow($query_id);		}		if ($query_id === false)		{			return false;		}		$row = @sqlsrv_fetch_array($query_id, SQLSRV_FETCH_ASSOC);		if ($row)		{			foreach ($row as $key => $value)			{				$row[$key] = ($value === ' ' || $value === NULL) ? '' : $value;			}			// remove helper values from LIMIT queries			if (isset($row['line2']))			{				unset($row['line2'], $row['line3']);			}		}		return $row;	}	/**	* Seek to given row number	* rownum is zero-based	*/	function sql_rowseek($rownum, &$query_id)	{		global $cache;		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_rowseek($rownum, $query_id);		}		$seek = new result_mssqlnative($query_id);		$row = $seek->seek($rownum);		return ($row = $seek->fetch()) ? $row : false;	}	/**	* Get last inserted id after insert statement	*/	function sql_nextid()	{		$result_id = @sqlsrv_query($this->db_connect_id, 'SELECT @@IDENTITY');		if ($result_id !== false)		{			$row = @sqlsrv_fetch_array($result_id);			$id = $row[0];			@sqlsrv_free_stmt($result_id);			return $id;		}		else		{			return false;		}	}	/**	* Free sql result	*/	function sql_freeresult($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_freeresult($query_id);		}		if (isset($this->open_queries[$query_id]))		{			unset($this->open_queries[$query_id]);			return @sqlsrv_free_stmt($query_id);		}		return false;	}	/**	* Escape string used in sql query	*/	function sql_escape($msg)	{		return str_replace(array("'", "\0"), array("''", ''), $msg);	}	/**	* Build LIKE expression	* @access private	*/	function _sql_like_expression($expression)	{		return $expression . " ESCAPE '\\'";	}	/**	* return sql error array	* @access private	*/	function _sql_error()	{		$errors = @sqlsrv_errors(SQLSRV_ERR_ERRORS);		$error_message = '';		$code = 0;		if ($errors != null)		{			foreach ($errors as $error)			{				$error_message .= "SQLSTATE: ".$error[ 'SQLSTATE']."\n";				$error_message .= "code: ".$error[ 'code']."\n";				$code = $error['code'];				$error_message .= "message: ".$error[ 'message']."\n";			}			$this->last_error_result = $error_message;			$error = $this->last_error_result;		}		else		{			$error = (isset($this->last_error_result) && $this->last_error_result) ? $this->last_error_result : array();		}		return array(			'message'	=> $error,			'code'		=> $code,		);	}	/**	* Build db-specific query data	* @access private	*/	function _sql_custom_build($stage, $data)	{		return $data;	}	/**	* Close sql connection	* @access private	*/	function _sql_close()	{		return @sqlsrv_close($this->db_connect_id);	}	/**	* Build db-specific report	* @access private	*/	function _sql_report($mode, $query = '')	{		switch ($mode)		{			case 'start':				$html_table = false;				@sqlsrv_query($this->db_connect_id, 'SET SHOWPLAN_TEXT ON;');				if ($result = @sqlsrv_query($this->db_connect_id, $query))				{					@sqlsrv_next_result($result);					while ($row = @sqlsrv_fetch_array($result))					{						$html_table = $this->sql_report('add_select_row', $query, $html_table, $row);					}				}				@sqlsrv_query($this->db_connect_id, 'SET SHOWPLAN_TEXT OFF;');				@sqlsrv_free_stmt($result);				if ($html_table)				{					$this->html_hold .= '</table>';				}			break;			case 'fromcache':				$endtime = explode(' ', microtime());				$endtime = $endtime[0] + $endtime[1];				$result = @sqlsrv_query($this->db_connect_id, $query);				while ($void = @sqlsrv_fetch_array($result))				{					// Take the time spent on parsing rows into account				}				@sqlsrv_free_stmt($result);				$splittime = explode(' ', microtime());				$splittime = $splittime[0] + $splittime[1];				$this->sql_report('record_fromcache', $query, $endtime, $splittime);			break;		}	}	/**	* Utility method used to retrieve number of rows	* Emulates mysql_num_rows	* Used in acp_database.php -> write_data_mssqlnative()	* Requires a static or keyset cursor to be definde via	* mssqlnative_set_query_options()	*/	function mssqlnative_num_rows($res)	{		if ($res !== false)		{			return sqlsrv_num_rows($res);		}		else		{			return false;		}	}	/**	* Allows setting mssqlnative specific query options passed to sqlsrv_query as 4th parameter.	*/	function mssqlnative_set_query_options($options)	{		$this->query_options = $options;	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** MCP Forum View*/function mcp_forum_view($id, $mode, $action, $forum_info){	global $template, $db, $user, $auth, $cache, $module;	global $phpEx, $phpbb_root_path, $config;	$user->add_lang(array('viewtopic', 'viewforum'));	include_once($phpbb_root_path . 'includes/functions_display.' . $phpEx);	// merge_topic is the quickmod action, merge_topics is the mcp_forum action, and merge_select is the mcp_topic action	$merge_select = ($action == 'merge_select' || $action == 'merge_topic' || $action == 'merge_topics') ? true : false;	if ($merge_select)	{		// Fixes a "bug" that makes forum_view use the same ordering as topic_view		unset($_POST['sk'], $_POST['sd'], $_REQUEST['sk'], $_REQUEST['sd']);	}	$forum_id			= $forum_info['forum_id'];	$start				= request_var('start', 0);	$topic_id_list		= request_var('topic_id_list', array(0));	$post_id_list		= request_var('post_id_list', array(0));	$source_topic_ids	= array(request_var('t', 0));	$to_topic_id		= request_var('to_topic_id', 0);	$url_extra = '';	$url_extra .= ($forum_id) ? "&amp;f=$forum_id" : '';	$url_extra .= ($GLOBALS['topic_id']) ? '&amp;t=' . $GLOBALS['topic_id'] : '';	$url_extra .= ($GLOBALS['post_id']) ? '&amp;p=' . $GLOBALS['post_id'] : '';	$url_extra .= ($GLOBALS['user_id']) ? '&amp;u=' . $GLOBALS['user_id'] : '';	$url = append_sid("{$phpbb_root_path}mcp.$phpEx?$url_extra");	// Resync Topics	switch ($action)	{		case 'resync':			$topic_ids = request_var('topic_id_list', array(0));			mcp_resync_topics($topic_ids);		break;		case 'merge_topics':			$source_topic_ids = $topic_id_list;		case 'merge_topic':			if ($to_topic_id)			{				merge_topics($forum_id, $source_topic_ids, $to_topic_id);			}		break;	}	$selected_ids = '';	if (sizeof($post_id_list) && $action != 'merge_topics')	{		foreach ($post_id_list as $num => $post_id)		{			$selected_ids .= '&amp;post_id_list[' . $num . ']=' . $post_id;		}	}	else if (sizeof($topic_id_list) && $action == 'merge_topics')	{		foreach ($topic_id_list as $num => $topic_id)		{			$selected_ids .= '&amp;topic_id_list[' . $num . ']=' . $topic_id;		}	}	make_jumpbox($url . "&amp;i=$id&amp;action=$action&amp;mode=$mode" . (($merge_select) ? $selected_ids : ''), $forum_id, false, 'm_', true);	$topics_per_page = ($forum_info['forum_topics_per_page']) ? $forum_info['forum_topics_per_page'] : $config['topics_per_page'];	$sort_days = $total = 0;	$sort_key = $sort_dir = '';	$sort_by_sql = $sort_order_sql = array();	mcp_sorting('viewforum', $sort_days, $sort_key, $sort_dir, $sort_by_sql, $sort_order_sql, $total, $forum_id);	$forum_topics = ($total == -1) ? $forum_info['forum_topics'] : $total;	$limit_time_sql = ($sort_days) ? 'AND t.topic_last_post_time >= ' . (time() - ($sort_days * 86400)) : '';	$template->assign_vars(array(		'ACTION'				=> $action,		'FORUM_NAME'			=> $forum_info['forum_name'],		'FORUM_DESCRIPTION'		=> generate_text_for_display($forum_info['forum_desc'], $forum_info['forum_desc_uid'], $forum_info['forum_desc_bitfield'], $forum_info['forum_desc_options']),		'REPORTED_IMG'			=> $user->img('icon_topic_reported', 'TOPIC_REPORTED'),		'UNAPPROVED_IMG'		=> $user->img('icon_topic_unapproved', 'TOPIC_UNAPPROVED'),		'LAST_POST_IMG'			=> $user->img('icon_topic_latest', 'VIEW_LATEST_POST'),		'NEWEST_POST_IMG'		=> $user->img('icon_topic_newest', 'VIEW_NEWEST_POST'),		'S_CAN_REPORT'			=> $auth->acl_get('m_report', $forum_id),		'S_CAN_DELETE'			=> $auth->acl_get('m_delete', $forum_id),		'S_CAN_MERGE'			=> $auth->acl_get('m_merge', $forum_id),		'S_CAN_MOVE'			=> $auth->acl_get('m_move', $forum_id),		'S_CAN_FORK'			=> $auth->acl_get('m_', $forum_id),		'S_CAN_LOCK'			=> $auth->acl_get('m_lock', $forum_id),		'S_CAN_SYNC'			=> $auth->acl_get('m_', $forum_id),		'S_CAN_APPROVE'			=> $auth->acl_get('m_approve', $forum_id),		'S_MERGE_SELECT'		=> ($merge_select) ? true : false,		'S_CAN_MAKE_NORMAL'		=> $auth->acl_gets('f_sticky', 'f_announce', $forum_id),		'S_CAN_MAKE_STICKY'		=> $auth->acl_get('f_sticky', $forum_id),		'S_CAN_MAKE_ANNOUNCE'	=> $auth->acl_get('f_announce', $forum_id),		'U_VIEW_FORUM'			=> append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id),		'U_VIEW_FORUM_LOGS'		=> ($auth->acl_gets('a_', 'm_', $forum_id) && $module->loaded('logs')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=logs&amp;mode=forum_logs&amp;f=' . $forum_id) : '',		'S_MCP_ACTION'			=> $url . "&amp;i=$id&amp;forum_action=$action&amp;mode=$mode&amp;start=$start" . (($merge_select) ? $selected_ids : ''),		'PAGINATION'			=> generate_pagination($url . "&amp;i=$id&amp;action=$action&amp;mode=$mode&amp;sd=$sort_dir&amp;sk=$sort_key&amp;st=$sort_days" . (($merge_select) ? $selected_ids : ''), $forum_topics, $topics_per_page, $start),		'PAGE_NUMBER'			=> on_page($forum_topics, $topics_per_page, $start),		'TOTAL_TOPICS'			=> ($forum_topics == 1) ? $user->lang['VIEW_FORUM_TOPIC'] : sprintf($user->lang['VIEW_FORUM_TOPICS'], $forum_topics),	));	// Grab icons	$icons = $cache->obtain_icons();	$topic_rows = array();	if ($config['load_db_lastread'])	{		$read_tracking_join = ' LEFT JOIN ' . TOPICS_TRACK_TABLE . ' tt ON (tt.topic_id = t.topic_id AND tt.user_id = ' . $user->data['user_id'] . ')';		$read_tracking_select = ', tt.mark_time';	}	else	{		$read_tracking_join = $read_tracking_select = '';	}	$sql = "SELECT t.topic_id		FROM " . TOPICS_TABLE . " t		WHERE t.forum_id IN($forum_id, 0)			" . (($auth->acl_get('m_approve', $forum_id)) ? '' : 'AND t.topic_approved = 1') . "			$limit_time_sql		ORDER BY t.topic_type DESC, $sort_order_sql";	$result = $db->sql_query_limit($sql, $topics_per_page, $start);	$topic_list = $topic_tracking_info = array();	while ($row = $db->sql_fetchrow($result))	{		$topic_list[] = $row['topic_id'];	}	$db->sql_freeresult($result);	$sql = "SELECT t.*$read_tracking_select		FROM " . TOPICS_TABLE . " t $read_tracking_join		WHERE " . $db->sql_in_set('t.topic_id', $topic_list, false, true);	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$topic_rows[$row['topic_id']] = $row;	}	$db->sql_freeresult($result);	// If there is more than one page, but we have no topic list, then the start parameter is... erm... out of sync	if (!sizeof($topic_list) && $forum_topics && $start > 0)	{		redirect($url . "&amp;i=$id&amp;action=$action&amp;mode=$mode");	}	// Get topic tracking info	if (sizeof($topic_list))	{		if ($config['load_db_lastread'])		{			$topic_tracking_info = get_topic_tracking($forum_id, $topic_list, $topic_rows, array($forum_id => $forum_info['mark_time']), array());		}		else		{			$topic_tracking_info = get_complete_topic_tracking($forum_id, $topic_list, array());		}	}	foreach ($topic_list as $topic_id)	{		$topic_title = '';		$row = &$topic_rows[$topic_id];		$replies = ($auth->acl_get('m_approve', $forum_id)) ? $row['topic_replies_real'] : $row['topic_replies'];		if ($row['topic_status'] == ITEM_MOVED)		{			$unread_topic = false;		}		else		{			$unread_topic = (isset($topic_tracking_info[$topic_id]) && $row['topic_last_post_time'] > $topic_tracking_info[$topic_id]) ? true : false;		}		// Get folder img, topic status/type related information		$folder_img = $folder_alt = $topic_type = '';		topic_status($row, $replies, $unread_topic, $folder_img, $folder_alt, $topic_type);		$topic_title = censor_text($row['topic_title']);		$topic_unapproved = (!$row['topic_approved'] && $auth->acl_get('m_approve', $row['forum_id'])) ? true : false;		$posts_unapproved = ($row['topic_approved'] && $row['topic_replies'] < $row['topic_replies_real'] && $auth->acl_get('m_approve', $row['forum_id'])) ? true : false;		$u_mcp_queue = ($topic_unapproved || $posts_unapproved) ? $url . '&amp;i=queue&amp;mode=' . (($topic_unapproved) ? 'approve_details' : 'unapproved_posts') . '&amp;t=' . $row['topic_id'] : '';		$topic_row = array(			'ATTACH_ICON_IMG'		=> ($auth->acl_get('u_download') && $auth->acl_get('f_download', $row['forum_id']) && $row['topic_attachment']) ? $user->img('icon_topic_attach', $user->lang['TOTAL_ATTACHMENTS']) : '',			'TOPIC_FOLDER_IMG'		=> $user->img($folder_img, $folder_alt),			'TOPIC_FOLDER_IMG_SRC'	=> $user->img($folder_img, $folder_alt, false, '', 'src'),			'TOPIC_ICON_IMG'		=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['img'] : '',			'TOPIC_ICON_IMG_WIDTH'	=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['width'] : '',			'TOPIC_ICON_IMG_HEIGHT'	=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['height'] : '',			'UNAPPROVED_IMG'		=> ($topic_unapproved || $posts_unapproved) ? $user->img('icon_topic_unapproved', ($topic_unapproved) ? 'TOPIC_UNAPPROVED' : 'POSTS_UNAPPROVED') : '',			'TOPIC_AUTHOR'				=> get_username_string('username', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'TOPIC_AUTHOR_COLOUR'		=> get_username_string('colour', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'TOPIC_AUTHOR_FULL'			=> get_username_string('full', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'U_TOPIC_AUTHOR'			=> get_username_string('profile', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'LAST_POST_AUTHOR'			=> get_username_string('username', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'LAST_POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'LAST_POST_AUTHOR_FULL'		=> get_username_string('full', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'U_LAST_POST_AUTHOR'		=> get_username_string('profile', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'TOPIC_TYPE'		=> $topic_type,			'TOPIC_TITLE'		=> $topic_title,			'REPLIES'			=> ($auth->acl_get('m_approve', $row['forum_id'])) ? $row['topic_replies_real'] : $row['topic_replies'],			'LAST_POST_TIME'	=> $user->format_date($row['topic_last_post_time']),			'FIRST_POST_TIME'	=> $user->format_date($row['topic_time']),			'LAST_POST_SUBJECT'	=> $row['topic_last_post_subject'],			'LAST_VIEW_TIME'	=> $user->format_date($row['topic_last_view_time']),			'S_TOPIC_REPORTED'		=> (!empty($row['topic_reported']) && empty($row['topic_moved_id']) && $auth->acl_get('m_report', $row['forum_id'])) ? true : false,			'S_TOPIC_UNAPPROVED'	=> $topic_unapproved,			'S_POSTS_UNAPPROVED'	=> $posts_unapproved,			'S_UNREAD_TOPIC'		=> $unread_topic,		);		if ($row['topic_status'] == ITEM_MOVED)		{			$topic_row = array_merge($topic_row, array(				'U_VIEW_TOPIC'		=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", "t={$row['topic_moved_id']}"),				'U_DELETE_TOPIC'	=> ($auth->acl_get('m_delete', $forum_id)) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "i=$id&amp;f=$forum_id&amp;topic_id_list[]={$row['topic_id']}&amp;mode=forum_view&amp;action=delete_topic") : '',				'S_MOVED_TOPIC'		=> true,				'TOPIC_ID'			=> $row['topic_moved_id'],			));		}		else		{			if ($action == 'merge_topic' || $action == 'merge_topics')			{				$u_select_topic = $url . "&amp;i=$id&amp;mode=forum_view&amp;action=$action&amp;to_topic_id=" . $row['topic_id'] . $selected_ids;			}			else			{				$u_select_topic = $url . "&amp;i=$id&amp;mode=topic_view&amp;action=merge&amp;to_topic_id=" . $row['topic_id'] . $selected_ids;			}			$topic_row = array_merge($topic_row, array(				'U_VIEW_TOPIC'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=$id&amp;f=$forum_id&amp;t={$row['topic_id']}&amp;mode=topic_view"),				'S_SELECT_TOPIC'	=> ($merge_select && !in_array($row['topic_id'], $source_topic_ids)) ? true : false,				'U_SELECT_TOPIC'	=> $u_select_topic,				'U_MCP_QUEUE'		=> $u_mcp_queue,				'U_MCP_REPORT'		=> ($auth->acl_get('m_report', $forum_id)) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main&amp;mode=topic_view&amp;t=' . $row['topic_id'] . '&amp;action=reports') : '',				'TOPIC_ID'			=> $row['topic_id'],				'S_TOPIC_CHECKED'	=> ($topic_id_list && in_array($row['topic_id'], $topic_id_list)) ? true : false,			));		}		$template->assign_block_vars('topicrow', $topic_row);	}	unset($topic_rows);}/*** Resync topics*/function mcp_resync_topics($topic_ids){	global $auth, $db, $template, $phpEx, $user, $phpbb_root_path;	if (!sizeof($topic_ids))	{		trigger_error('NO_TOPIC_SELECTED');	}	if (!check_ids($topic_ids, TOPICS_TABLE, 'topic_id', array('m_')))	{		return;	}	// Sync everything and perform extra checks separately	sync('topic_reported', 'topic_id', $topic_ids, false, true);	sync('topic_attachment', 'topic_id', $topic_ids, false, true);	sync('topic', 'topic_id', $topic_ids, true, false);	$sql = 'SELECT topic_id, forum_id, topic_title		FROM ' . TOPICS_TABLE . '		WHERE ' . $db->sql_in_set('topic_id', $topic_ids);	$result = $db->sql_query($sql);	// Log this action	while ($row = $db->sql_fetchrow($result))	{		add_log('mod', $row['forum_id'], $row['topic_id'], 'LOG_TOPIC_RESYNC', $row['topic_title']);	}	$db->sql_freeresult($result);	$msg = (sizeof($topic_ids) == 1) ? $user->lang['TOPIC_RESYNC_SUCCESS'] : $user->lang['TOPICS_RESYNC_SUCCESS'];	$redirect = request_var('redirect', $user->data['session_page']);	meta_refresh(3, $redirect);	trigger_error($msg . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $redirect . '">', '</a>'));	return;}/*** Merge selected topics into selected topic*/function merge_topics($forum_id, $topic_ids, $to_topic_id){	global $db, $template, $user, $phpEx, $phpbb_root_path, $auth;	if (!sizeof($topic_ids))	{		$template->assign_var('MESSAGE', $user->lang['NO_TOPIC_SELECTED']);		return;	}	if (!$to_topic_id)	{		$template->assign_var('MESSAGE', $user->lang['NO_FINAL_TOPIC_SELECTED']);		return;	}	$topic_data = get_topic_data(array($to_topic_id), 'm_merge');	if (!sizeof($topic_data))	{		$template->assign_var('MESSAGE', $user->lang['NO_FINAL_TOPIC_SELECTED']);		return;	}	$topic_data = $topic_data[$to_topic_id];	$post_id_list	= request_var('post_id_list', array(0));	$start			= request_var('start', 0);	if (!sizeof($post_id_list) && sizeof($topic_ids))	{		$sql = 'SELECT post_id			FROM ' . POSTS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', $topic_ids);		$result = $db->sql_query($sql);		$post_id_list = array();		while ($row = $db->sql_fetchrow($result))		{			$post_id_list[] = $row['post_id'];		}		$db->sql_freeresult($result);	}	if (!sizeof($post_id_list))	{		$template->assign_var('MESSAGE', $user->lang['NO_POST_SELECTED']);		return;	}	if (!check_ids($post_id_list, POSTS_TABLE, 'post_id', array('m_merge')))	{		return;	}	$redirect = request_var('redirect', build_url(array('quickmod')));	$s_hidden_fields = build_hidden_fields(array(		'i'				=> 'main',		'f'				=> $forum_id,		'post_id_list'	=> $post_id_list,		'to_topic_id'	=> $to_topic_id,		'mode'			=> 'forum_view',		'action'		=> 'merge_topics',		'start'			=> $start,		'redirect'		=> $redirect,		'topic_id_list'	=> $topic_ids)	);	$success_msg = $return_link = '';	if (confirm_box(true))	{		$to_forum_id = $topic_data['forum_id'];		move_posts($post_id_list, $to_topic_id);		add_log('mod', $to_forum_id, $to_topic_id, 'LOG_MERGE', $topic_data['topic_title']);		// Message and return links		$success_msg = 'POSTS_MERGED_SUCCESS';		// If the topic no longer exist, we will update the topic watch table.		// To not let it error out on users watching both topics, we just return on an error...		$db->sql_return_on_error(true);		$db->sql_query('UPDATE ' . TOPICS_WATCH_TABLE . ' SET topic_id = ' . (int) $to_topic_id . ' WHERE ' . $db->sql_in_set('topic_id', $topic_ids));		$db->sql_return_on_error(false);		$db->sql_query('DELETE FROM ' . TOPICS_WATCH_TABLE . ' WHERE ' . $db->sql_in_set('topic_id', $topic_ids));		// Link to the new topic		$return_link .= (($return_link) ? '<br /><br />' : '') . sprintf($user->lang['RETURN_NEW_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $to_forum_id . '&amp;t=' . $to_topic_id) . '">', '</a>');	}	else	{		confirm_box(false, 'MERGE_TOPICS', $s_hidden_fields);	}	$redirect = request_var('redirect', "index.$phpEx");	$redirect = reapply_sid($redirect);	if (!$success_msg)	{		return;	}	else	{		meta_refresh(3, append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$to_forum_id&amp;t=$to_topic_id"));		trigger_error($user->lang[$success_msg] . '<br /><br />' . $return_link);	}}?>
<?php/*** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Private Message Class** $_REQUEST['folder'] display folder with the id used* $_REQUEST['folder'] inbox|outbox|sentbox display folder with the associated name**	Display Messages (default to inbox) - mode=view*	Display single message - mode=view&p=[msg_id] or &p=[msg_id] (short linkage)**	if the folder id with (&f=[folder_id]) is used when displaying messages, one query will be saved. If it is not used, phpBB needs to grab*	the folder id first in order to display the input boxes and folder names and such things. ;) phpBB always checks this against the database to make*	sure the user is able to view the message.**	Composing Messages (mode=compose):*		To specific user (u=[user_id])*		To specific group (g=[group_id])*		Quoting a post (action=quotepost&p=[post_id])*		Quoting a PM (action=quote&p=[msg_id])*		Forwarding a PM (action=forward&p=[msg_id])** @package ucp*/class ucp_pm{	var $u_action;	function main($id, $mode)	{		global $user, $template, $phpbb_root_path, $auth, $phpEx, $db, $config;		if (!$user->data['is_registered'])		{			trigger_error('NO_MESSAGE');		}		// Is PM disabled?		if (!$config['allow_privmsg'])		{			trigger_error('PM_DISABLED');		}		$user->add_lang('posting');		$template->assign_var('S_PRIVMSGS', true);		// Folder directly specified?		$folder_specified = request_var('folder', '');		if (!in_array($folder_specified, array('inbox', 'outbox', 'sentbox')))		{			$folder_specified = (int) $folder_specified;		}		else		{			$folder_specified = ($folder_specified == 'inbox') ? PRIVMSGS_INBOX : (($folder_specified == 'outbox') ? PRIVMSGS_OUTBOX : PRIVMSGS_SENTBOX);		}		if (!$folder_specified)		{			$mode = (!$mode) ? request_var('mode', 'view') : $mode;		}		else		{			$mode = 'view';		}		include($phpbb_root_path . 'includes/functions_privmsgs.' . $phpEx);		switch ($mode)		{			// New private messages popup			case 'popup':				$l_new_message = '';				if ($user->data['is_registered'])				{					if ($user->data['user_new_privmsg'])					{						$l_new_message = ($user->data['user_new_privmsg'] == 1) ? $user->lang['YOU_NEW_PM'] : $user->lang['YOU_NEW_PMS'];					}					else					{						$l_new_message = $user->lang['YOU_NO_NEW_PM'];					}				}				$template->assign_vars(array(					'MESSAGE'			=> $l_new_message,					'S_NOT_LOGGED_IN'	=> ($user->data['user_id'] == ANONYMOUS) ? true : false,					'CLICK_TO_VIEW'		=> sprintf($user->lang['CLICK_VIEW_PRIVMSG'], '<a href="' . append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=inbox') . '" onclick="jump_to_inbox(this.href); return false;">', '</a>'),					'U_INBOX'			=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=inbox'),					'UA_INBOX'			=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&folder=inbox', false))				);				$tpl_file = 'ucp_pm_popup';			break;			// Compose message			case 'compose':				$action = request_var('action', 'post');				$user_folders = get_folder($user->data['user_id']);				if (!$auth->acl_get('u_sendpm'))				{					// trigger_error('NO_AUTH_SEND_MESSAGE');					$template->assign_vars(array(						'S_NO_AUTH_SEND_MESSAGE'	=> true,						'S_COMPOSE_PM_VIEW'			=> true,					));					$tpl_file = 'ucp_pm_viewfolder';					break;				}				include($phpbb_root_path . 'includes/ucp/ucp_pm_compose.' . $phpEx);				compose_pm($id, $mode, $action, $user_folders);				$tpl_file = 'posting_body';			break;			case 'options':				set_user_message_limit();				get_folder($user->data['user_id']);				include($phpbb_root_path . 'includes/ucp/ucp_pm_options.' . $phpEx);				message_options($id, $mode, $global_privmsgs_rules, $global_rule_conditions);				$tpl_file = 'ucp_pm_options';			break;			case 'drafts':				get_folder($user->data['user_id']);				$this->p_name = 'pm';				// Call another module... please do not try this at home... Hoochie Coochie Man				include($phpbb_root_path . 'includes/ucp/ucp_main.' . $phpEx);				$module = new ucp_main($this);				$module->u_action = $this->u_action;				$module->main($id, $mode);				$this->tpl_name = $module->tpl_name;				$this->page_title = 'UCP_PM_DRAFTS';				unset($module);				return;			break;			case 'view':				set_user_message_limit();				if ($folder_specified)				{					$folder_id = $folder_specified;					$action = 'view_folder';				}				else				{					$folder_id = request_var('f', PRIVMSGS_NO_BOX);					$action = request_var('action', 'view_folder');				}				$msg_id = request_var('p', 0);				$view	= request_var('view', '');				// View message if specified				if ($msg_id)				{					$action = 'view_message';				}				if (!$auth->acl_get('u_readpm'))				{					trigger_error('NO_AUTH_READ_MESSAGE');				}				// Do not allow hold messages to be seen				if ($folder_id == PRIVMSGS_HOLD_BOX)				{					trigger_error('NO_AUTH_READ_HOLD_MESSAGE');				}				// First Handle Mark actions and moving messages				$submit_mark	= (isset($_POST['submit_mark'])) ? true : false;				$move_pm		= (isset($_POST['move_pm'])) ? true : false;				$mark_option	= request_var('mark_option', '');				$dest_folder	= request_var('dest_folder', PRIVMSGS_NO_BOX);				// Is moving PM triggered through mark options?				if (!in_array($mark_option, array('mark_important', 'delete_marked')) && $submit_mark)				{					$move_pm = true;					$dest_folder = (int) $mark_option;					$submit_mark = false;				}				// Move PM				if ($move_pm)				{					$move_msg_ids	= (isset($_POST['marked_msg_id'])) ? request_var('marked_msg_id', array(0)) : array();					$cur_folder_id	= request_var('cur_folder_id', PRIVMSGS_NO_BOX);					if (move_pm($user->data['user_id'], $user->data['message_limit'], $move_msg_ids, $dest_folder, $cur_folder_id))					{						// Return to folder view if single message moved						if ($action == 'view_message')						{							$msg_id		= 0;							$folder_id	= request_var('cur_folder_id', PRIVMSGS_NO_BOX);							$action		= 'view_folder';						}					}				}				// Message Mark Options				if ($submit_mark)				{					handle_mark_actions($user->data['user_id'], $mark_option);				}				// If new messages arrived, place them into the appropriate folder				$num_not_moved = $num_removed = 0;				$release = request_var('release', 0);				if ($user->data['user_new_privmsg'] && ($action == 'view_folder' || $action == 'view_message'))				{					$return = place_pm_into_folder($global_privmsgs_rules, $release);					$num_not_moved = $return['not_moved'];					$num_removed = $return['removed'];				}				if (!$msg_id && $folder_id == PRIVMSGS_NO_BOX)				{					$folder_id = PRIVMSGS_INBOX;				}				else if ($msg_id && $folder_id == PRIVMSGS_NO_BOX)				{					$sql = 'SELECT folder_id						FROM ' . PRIVMSGS_TO_TABLE . "						WHERE msg_id = $msg_id							AND folder_id <> " . PRIVMSGS_NO_BOX . '							AND user_id = ' . $user->data['user_id'];					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if (!$row)					{						trigger_error('NO_MESSAGE');					}					$folder_id = (int) $row['folder_id'];				}				$message_row = array();				if ($action == 'view_message' && $msg_id)				{					// Get Message user want to see					if ($view == 'next' || $view == 'previous')					{						$sql_condition = ($view == 'next') ? '>' : '<';						$sql_ordering = ($view == 'next') ? 'ASC' : 'DESC';						$sql = 'SELECT t.msg_id							FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p, ' . PRIVMSGS_TABLE . " p2							WHERE p2.msg_id = $msg_id								AND t.folder_id = $folder_id								AND t.user_id = " . $user->data['user_id'] . "								AND t.msg_id = p.msg_id								AND p.message_time $sql_condition p2.message_time							ORDER BY p.message_time $sql_ordering";						$result = $db->sql_query_limit($sql, 1);						$row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$row)						{							$message = ($view == 'next') ? 'NO_NEWER_PM' : 'NO_OLDER_PM';							trigger_error($message);						}						else						{							$msg_id = $row['msg_id'];						}					}					$sql = 'SELECT t.*, p.*, u.*						FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p, ' . USERS_TABLE . ' u						WHERE t.user_id = ' . $user->data['user_id'] . "							AND p.author_id = u.user_id							AND t.folder_id = $folder_id							AND t.msg_id = p.msg_id							AND p.msg_id = $msg_id";					$result = $db->sql_query($sql);					$message_row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if (!$message_row)					{						trigger_error('NO_MESSAGE');					}					// Update unread status					update_unread_status($message_row['pm_unread'], $message_row['msg_id'], $user->data['user_id'], $folder_id);				}				$folder = get_folder($user->data['user_id'], $folder_id);				$s_folder_options = $s_to_folder_options = '';				foreach ($folder as $f_id => $folder_ary)				{					$option = '<option' . ((!in_array($f_id, array(PRIVMSGS_INBOX, PRIVMSGS_OUTBOX, PRIVMSGS_SENTBOX))) ? ' class="sep"' : '') . ' value="' . $f_id . '"' . (($f_id == $folder_id) ? ' selected="selected"' : '') . '>' . $folder_ary['folder_name'] . (($folder_ary['unread_messages']) ? ' [' . $folder_ary['unread_messages'] . '] ' : '') . '</option>';					$s_to_folder_options .= ($f_id != PRIVMSGS_OUTBOX && $f_id != PRIVMSGS_SENTBOX) ? $option : '';					$s_folder_options .= $option;				}				clean_sentbox($folder[PRIVMSGS_SENTBOX]['num_messages']);				// Header for message view - folder and so on				$folder_status = get_folder_status($folder_id, $folder);				$template->assign_vars(array(					'CUR_FOLDER_ID'			=> $folder_id,					'CUR_FOLDER_NAME'		=> $folder_status['folder_name'],					'NUM_NOT_MOVED'			=> $num_not_moved,					'NUM_REMOVED'			=> $num_removed,					'RELEASE_MESSAGE_INFO'	=> sprintf($user->lang['RELEASE_MESSAGES'], '<a href="' . $this->u_action . '&amp;folder=' . $folder_id . '&amp;release=1">', '</a>'),					'NOT_MOVED_MESSAGES'	=> ($num_not_moved == 1) ? $user->lang['NOT_MOVED_MESSAGE'] : sprintf($user->lang['NOT_MOVED_MESSAGES'], $num_not_moved),					'RULE_REMOVED_MESSAGES'	=> ($num_removed == 1) ? $user->lang['RULE_REMOVED_MESSAGE'] : sprintf($user->lang['RULE_REMOVED_MESSAGES'], $num_removed),					'S_FOLDER_OPTIONS'		=> $s_folder_options,					'S_TO_FOLDER_OPTIONS'	=> $s_to_folder_options,					'S_FOLDER_ACTION'		=> $this->u_action . '&amp;action=view_folder',					'S_PM_ACTION'			=> $this->u_action . '&amp;action=' . $action,					'U_INBOX'				=> $this->u_action . '&amp;folder=inbox',					'U_OUTBOX'				=> $this->u_action . '&amp;folder=outbox',					'U_SENTBOX'				=> $this->u_action . '&amp;folder=sentbox',					'U_CREATE_FOLDER'		=> $this->u_action . '&amp;mode=options',					'U_CURRENT_FOLDER'		=> $this->u_action . '&amp;folder=' . $folder_id,					'S_IN_INBOX'			=> ($folder_id == PRIVMSGS_INBOX) ? true : false,					'S_IN_OUTBOX'			=> ($folder_id == PRIVMSGS_OUTBOX) ? true : false,					'S_IN_SENTBOX'			=> ($folder_id == PRIVMSGS_SENTBOX) ? true : false,					'FOLDER_STATUS'				=> $folder_status['message'],					'FOLDER_MAX_MESSAGES'		=> $folder_status['max'],					'FOLDER_CUR_MESSAGES'		=> $folder_status['cur'],					'FOLDER_REMAINING_MESSAGES'	=> $folder_status['remaining'],					'FOLDER_PERCENT'			=> $folder_status['percent'])				);				if ($action == 'view_folder')				{					include($phpbb_root_path . 'includes/ucp/ucp_pm_viewfolder.' . $phpEx);					view_folder($id, $mode, $folder_id, $folder);					$tpl_file = 'ucp_pm_viewfolder';				}				else if ($action == 'view_message')				{					$template->assign_vars(array(						'S_VIEW_MESSAGE'	=> true,						'MSG_ID'			=> $msg_id)					);					if (!$msg_id)					{						trigger_error('NO_MESSAGE');					}					include($phpbb_root_path . 'includes/ucp/ucp_pm_viewmessage.' . $phpEx);					view_message($id, $mode, $folder_id, $msg_id, $folder, $message_row);					$tpl_file = ($view == 'print') ? 'ucp_pm_viewmessage_print' : 'ucp_pm_viewmessage';				}			break;			default:				trigger_error('NO_ACTION_MODE', E_USER_ERROR);			break;		}		$template->assign_vars(array(			'L_TITLE'			=> $user->lang['UCP_PM_' . strtoupper($mode)],			'S_UCP_ACTION'		=> $this->u_action . ((isset($action)) ? "&amp;action=$action" : ''))		);		// Set desired template		$this->tpl_name = $tpl_file;		$this->page_title = 'UCP_PM_' . strtoupper($mode);	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_ban{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $table_prefix;		include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		$bansubmit	= (isset($_POST['bansubmit'])) ? true : false;		$unbansubmit = (isset($_POST['unbansubmit'])) ? true : false;		$current_time = time();		$user->add_lang(array('acp/ban', 'acp/users'));		$this->tpl_name = 'acp_ban';		$form_key = 'acp_ban';		add_form_key($form_key);		if (($bansubmit || $unbansubmit) && !check_form_key($form_key))		{			trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action), E_USER_WARNING);		}		// Ban submitted?		if ($bansubmit)		{			// Grab the list of entries			$ban				= utf8_normalize_nfc(request_var('ban', '', true));			$ban_len			= request_var('banlength', 0);			$ban_len_other		= request_var('banlengthother', '');			$ban_exclude		= request_var('banexclude', 0);			$ban_reason			= utf8_normalize_nfc(request_var('banreason', '', true));			$ban_give_reason	= utf8_normalize_nfc(request_var('bangivereason', '', true));			if ($ban)			{				user_ban($mode, $ban, $ban_len, $ban_len_other, $ban_exclude, $ban_reason, $ban_give_reason);				trigger_error($user->lang['BAN_UPDATE_SUCCESSFUL'] . adm_back_link($this->u_action));			}		}		else if ($unbansubmit)		{			$ban = request_var('unban', array(''));			if ($ban)			{				user_unban($mode, $ban);				trigger_error($user->lang['BAN_UPDATE_SUCCESSFUL'] . adm_back_link($this->u_action));			}		}		// Define language vars		$this->page_title = $user->lang[strtoupper($mode) . '_BAN'];		$l_ban_explain = $user->lang[strtoupper($mode) . '_BAN_EXPLAIN'];		$l_ban_exclude_explain = $user->lang[strtoupper($mode) . '_BAN_EXCLUDE_EXPLAIN'];		$l_unban_title = $user->lang[strtoupper($mode) . '_UNBAN'];		$l_unban_explain = $user->lang[strtoupper($mode) . '_UNBAN_EXPLAIN'];		$l_no_ban_cell = $user->lang[strtoupper($mode) . '_NO_BANNED'];		switch ($mode)		{			case 'user':				$l_ban_cell = $user->lang['USERNAME'];			break;			case 'ip':				$l_ban_cell = $user->lang['IP_HOSTNAME'];			break;			case 'email':				$l_ban_cell = $user->lang['EMAIL_ADDRESS'];			break;		}		$this->display_ban_options($mode);		$template->assign_vars(array(			'L_TITLE'				=> $this->page_title,			'L_EXPLAIN'				=> $l_ban_explain,			'L_UNBAN_TITLE'			=> $l_unban_title,			'L_UNBAN_EXPLAIN'		=> $l_unban_explain,			'L_BAN_CELL'			=> $l_ban_cell,			'L_BAN_EXCLUDE_EXPLAIN'	=> $l_ban_exclude_explain,			'L_NO_BAN_CELL'			=> $l_no_ban_cell,			'S_USERNAME_BAN'	=> ($mode == 'user') ? true : false,						'U_ACTION'			=> $this->u_action,			'U_FIND_USERNAME'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=acp_ban&amp;field=ban'),		));	}	/**	* Display ban options	*/	function display_ban_options($mode)	{		global $user, $db, $template;		// Ban length options		$ban_end_text = array(0 => $user->lang['PERMANENT'], 30 => $user->lang['30_MINS'], 60 => $user->lang['1_HOUR'], 360 => $user->lang['6_HOURS'], 1440 => $user->lang['1_DAY'], 10080 => $user->lang['7_DAYS'], 20160 => $user->lang['2_WEEKS'], 40320 => $user->lang['1_MONTH'], -1 => $user->lang['UNTIL'] . ' -&gt; ');		$ban_end_options = '';		foreach ($ban_end_text as $length => $text)		{			$ban_end_options .= '<option value="' . $length . '">' . $text . '</option>';		}		switch ($mode)		{			case 'user':				$field = 'username';				$l_ban_cell = $user->lang['USERNAME'];				$sql = 'SELECT b.*, u.user_id, u.username, u.username_clean					FROM ' . BANLIST_TABLE . ' b, ' . USERS_TABLE . ' u					WHERE (b.ban_end >= ' . time() . '							OR b.ban_end = 0)						AND u.user_id = b.ban_userid					ORDER BY u.username_clean ASC';			break;			case 'ip':				$field = 'ban_ip';				$l_ban_cell = $user->lang['IP_HOSTNAME'];				$sql = 'SELECT *					FROM ' . BANLIST_TABLE . '					WHERE (ban_end >= ' . time() . "							OR ban_end = 0)						AND ban_ip <> ''					ORDER BY ban_ip";			break;			case 'email':				$field = 'ban_email';				$l_ban_cell = $user->lang['EMAIL_ADDRESS'];				$sql = 'SELECT *					FROM ' . BANLIST_TABLE . '					WHERE (ban_end >= ' . time() . "							OR ban_end = 0)						AND ban_email <> ''					ORDER BY ban_email";			break;		}		$result = $db->sql_query($sql);		$banned_options = $excluded_options = array();		$ban_length = $ban_reasons = $ban_give_reasons = array();		while ($row = $db->sql_fetchrow($result))		{			$option = '<option value="' . $row['ban_id'] . '">' . $row[$field] . '</option>';			if ($row['ban_exclude'])			{				$excluded_options[] = $option;			}			else			{				$banned_options[] = $option;			}			$time_length = ($row['ban_end']) ? ($row['ban_end'] - $row['ban_start']) / 60 : 0;			if ($time_length == 0)			{				// Banned permanently				$ban_length[$row['ban_id']] = $user->lang['PERMANENT'];			}			else if (isset($ban_end_text[$time_length]))			{				// Banned for a given duration				$ban_length[$row['ban_id']] = sprintf($user->lang['BANNED_UNTIL_DURATION'], $ban_end_text[$time_length], $user->format_date($row['ban_end'], false, true));			}			else			{				// Banned until given date				$ban_length[$row['ban_id']] = sprintf($user->lang['BANNED_UNTIL_DATE'], $user->format_date($row['ban_end'], false, true));			}			$ban_reasons[$row['ban_id']] = $row['ban_reason'];			$ban_give_reasons[$row['ban_id']] = $row['ban_give_reason'];		}		$db->sql_freeresult($result);		if (sizeof($ban_length))		{			foreach ($ban_length as $ban_id => $length)			{				$template->assign_block_vars('ban_length', array(					'BAN_ID'	=> (int) $ban_id,					'LENGTH'	=> $length,					'A_LENGTH'	=> addslashes($length),				));			}		}		if (sizeof($ban_reasons))		{			foreach ($ban_reasons as $ban_id => $reason)			{				$template->assign_block_vars('ban_reason', array(					'BAN_ID'	=> $ban_id,					'REASON'	=> $reason,					'A_REASON'	=> addslashes($reason),				));			}		}		if (sizeof($ban_give_reasons))		{			foreach ($ban_give_reasons as $ban_id => $reason)			{				$template->assign_block_vars('ban_give_reason', array(					'BAN_ID'	=> $ban_id,					'REASON'	=> $reason,					'A_REASON'	=> addslashes($reason),				));			}		}		$options = '';		if ($excluded_options)		{			$options .= '<optgroup label="' . $user->lang['OPTIONS_EXCLUDED'] . '">';			$options .= implode('', $excluded_options);			$options .= '</optgroup>';		}		if ($banned_options)		{			$options .= '<optgroup label="' . $user->lang['OPTIONS_BANNED'] . '">';			$options .= implode('', $banned_options);			$options .= '</optgroup>';		}		$template->assign_vars(array(			'S_BAN_END_OPTIONS'	=> $ban_end_options,			'S_BANNED_OPTIONS'	=> ($banned_options || $excluded_options) ? true : false,			'BANNED_OPTIONS'	=> $options,		));	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup('search');// Define initial vars$mode			= request_var('mode', '');$search_id		= request_var('search_id', '');$start			= max(request_var('start', 0), 0);$post_id		= request_var('p', 0);$topic_id		= request_var('t', 0);$view			= request_var('view', '');$submit			= request_var('submit', false);$keywords		= utf8_normalize_nfc(request_var('keywords', '', true));$add_keywords	= utf8_normalize_nfc(request_var('add_keywords', '', true));$author			= request_var('author', '', true);$author_id		= request_var('author_id', 0);$show_results	= ($topic_id) ? 'posts' : request_var('sr', 'posts');$show_results	= ($show_results == 'posts') ? 'posts' : 'topics';$search_terms	= request_var('terms', 'all');$search_fields	= request_var('sf', 'all');$search_child	= request_var('sc', true);$sort_days		= request_var('st', 0);$sort_key		= request_var('sk', 't');$sort_dir		= request_var('sd', 'd');$return_chars	= request_var('ch', ($topic_id) ? -1 : 300);$search_forum	= request_var('fid', array(0));// We put login boxes for the case if search_id is newposts, egosearch or unreadposts// because a guest should be able to log in even if guests search is not permittedswitch ($search_id){	// Egosearch is an author search	case 'egosearch':		$author_id = $user->data['user_id'];		if ($user->data['user_id'] == ANONYMOUS)		{			login_box('', $user->lang['LOGIN_EXPLAIN_EGOSEARCH']);		}	break;	// Search for unread posts needs to be allowed and user to be logged in if topics tracking for guests is disabled	case 'unreadposts':		if (!$config['load_unreads_search'])		{			$template->assign_var('S_NO_SEARCH', true);			trigger_error('NO_SEARCH_UNREADS');		}		else if (!$config['load_anon_lastread'] && !$user->data['is_registered'])		{			login_box('', $user->lang['LOGIN_EXPLAIN_UNREADSEARCH']);		}	break;		// The "new posts" search uses user_lastvisit which is user based, so it should require user to log in.	case 'newposts':		if ($user->data['user_id'] == ANONYMOUS)		{			login_box('', $user->lang['LOGIN_EXPLAIN_NEWPOSTS']);		}	break;		default:		// There's nothing to do here for now ;)	break;}// Is user able to search? Has search been disabled?if (!$auth->acl_get('u_search') || !$auth->acl_getf_global('f_search') || !$config['load_search']){	$template->assign_var('S_NO_SEARCH', true);	trigger_error('NO_SEARCH');}// Check search load limitif ($user->load && $config['limit_search_load'] && ($user->load > doubleval($config['limit_search_load']))){	$template->assign_var('S_NO_SEARCH', true);	trigger_error('NO_SEARCH_TIME');}// It is applicable if the configuration setting is non-zero, and the user cannot// ignore the flood setting, and the search is a keyword search.$interval = ($user->data['user_id'] == ANONYMOUS) ? $config['search_anonymous_interval'] : $config['search_interval'];if ($interval && !in_array($search_id, array('unreadposts', 'unanswered', 'active_topics', 'egosearch')) && !$auth->acl_get('u_ignoreflood')){	if ($user->data['user_last_search'] > time() - $interval)	{		$template->assign_var('S_NO_SEARCH', true);		trigger_error('NO_SEARCH_TIME');	}}// Define some vars$limit_days		= array(0 => $user->lang['ALL_RESULTS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);$sort_by_text	= array('a' => $user->lang['SORT_AUTHOR'], 't' => $user->lang['SORT_TIME'], 'f' => $user->lang['SORT_FORUM'], 'i' => $user->lang['SORT_TOPIC_TITLE'], 's' => $user->lang['SORT_POST_SUBJECT']);$s_limit_days = $s_sort_key = $s_sort_dir = $u_sort_param = '';gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);if ($keywords || $author || $author_id || $search_id || $submit){	// clear arrays	$id_ary = array();	// If we are looking for authors get their ids	$author_id_ary = array();	$sql_author_match = '';	if ($author_id)	{		$author_id_ary[] = $author_id;	}	else if ($author)	{		if ((strpos($author, '*') !== false) && (utf8_strlen(str_replace(array('*', '%'), '', $author)) < $config['min_search_author_chars']))		{			trigger_error(sprintf($user->lang['TOO_FEW_AUTHOR_CHARS'], $config['min_search_author_chars']));		}		$sql_where = (strpos($author, '*') !== false) ? ' username_clean ' . $db->sql_like_expression(str_replace('*', $db->any_char, utf8_clean_string($author))) : " username_clean = '" . $db->sql_escape(utf8_clean_string($author)) . "'";		$sql = 'SELECT user_id			FROM ' . USERS_TABLE . "			WHERE $sql_where				AND user_type <> " . USER_IGNORE;		$result = $db->sql_query_limit($sql, 100);		while ($row = $db->sql_fetchrow($result))		{			$author_id_ary[] = (int) $row['user_id'];		}		$db->sql_freeresult($result);		$sql_where = (strpos($author, '*') !== false) ? ' post_username ' . $db->sql_like_expression(str_replace('*', $db->any_char, utf8_clean_string($author))) : " post_username = '" . $db->sql_escape(utf8_clean_string($author)) . "'";		$sql = 'SELECT 1 as guest_post			FROM ' . POSTS_TABLE . "			WHERE $sql_where				AND poster_id = " . ANONYMOUS;		$result = $db->sql_query_limit($sql, 1);		$found_guest_post = $db->sql_fetchfield('guest_post');		$db->sql_freeresult($result);		if ($found_guest_post)		{			$author_id_ary[] = ANONYMOUS;			$sql_author_match = (strpos($author, '*') !== false) ? ' ' . $db->sql_like_expression(str_replace('*', $db->any_char, utf8_clean_string($author))) : " = '" . $db->sql_escape(utf8_clean_string($author)) . "'";		}		if (!sizeof($author_id_ary))		{			trigger_error('NO_SEARCH_RESULTS');		}	}	// if we search in an existing search result just add the additional keywords. But we need to use "all search terms"-mode	// so we can keep the old keywords in their old mode, but add the new ones as required words	if ($add_keywords)	{		if ($search_terms == 'all')		{			$keywords .= ' ' . $add_keywords;		}		else		{			$search_terms = 'all';			$keywords = implode(' |', explode(' ', preg_replace('#\s+#u', ' ', $keywords))) . ' ' .$add_keywords;		}	}	// Which forums should not be searched? Author searches are also carried out in unindexed forums	if (empty($keywords) && sizeof($author_id_ary))	{		$ex_fid_ary = array_keys($auth->acl_getf('!f_read', true));	}	else	{		$ex_fid_ary = array_unique(array_merge(array_keys($auth->acl_getf('!f_read', true)), array_keys($auth->acl_getf('!f_search', true))));	}	$not_in_fid = (sizeof($ex_fid_ary)) ? 'WHERE ' . $db->sql_in_set('f.forum_id', $ex_fid_ary, true) . " OR (f.forum_password <> '' AND fa.user_id <> " . (int) $user->data['user_id'] . ')' : "";	$sql = 'SELECT f.forum_id, f.forum_name, f.parent_id, f.forum_type, f.right_id, f.forum_password, f.forum_flags, fa.user_id		FROM ' . FORUMS_TABLE . ' f		LEFT JOIN ' . FORUMS_ACCESS_TABLE . " fa ON (fa.forum_id = f.forum_id			AND fa.session_id = '" . $db->sql_escape($user->session_id) . "')		$not_in_fid		ORDER BY f.left_id";	$result = $db->sql_query($sql);	$right_id = 0;	$reset_search_forum = true;	while ($row = $db->sql_fetchrow($result))	{		if ($row['forum_password'] && $row['user_id'] != $user->data['user_id'])		{			$ex_fid_ary[] = (int) $row['forum_id'];			continue;		}		// Exclude forums from active topics		if (!($row['forum_flags'] & FORUM_FLAG_ACTIVE_TOPICS) && ($search_id == 'active_topics'))		{			$ex_fid_ary[] = (int) $row['forum_id'];			continue;		}		if (sizeof($search_forum))		{			if ($search_child)			{				if (in_array($row['forum_id'], $search_forum) && $row['right_id'] > $right_id)				{					$right_id = (int) $row['right_id'];				}				else if ($row['right_id'] < $right_id)				{					continue;				}			}			if (!in_array($row['forum_id'], $search_forum))			{				$ex_fid_ary[] = (int) $row['forum_id'];				$reset_search_forum = false;			}		}	}	$db->sql_freeresult($result);	// find out in which forums the user is allowed to view approved posts	if ($auth->acl_get('m_approve'))	{		$m_approve_fid_ary = array(-1);		$m_approve_fid_sql = '';	}	else if ($auth->acl_getf_global('m_approve'))	{		$m_approve_fid_ary = array_diff(array_keys($auth->acl_getf('!m_approve', true)), $ex_fid_ary);		$m_approve_fid_sql = ' AND (p.post_approved = 1' . ((sizeof($m_approve_fid_ary)) ? ' OR ' . $db->sql_in_set('p.forum_id', $m_approve_fid_ary, true) : '') . ')';	}	else	{		$m_approve_fid_ary = array();		$m_approve_fid_sql = ' AND p.post_approved = 1';	}	if ($reset_search_forum)	{		$search_forum = array();	}	// Select which method we'll use to obtain the post_id or topic_id information	$search_type = basename($config['search_type']);	if (!file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx))	{		trigger_error('NO_SUCH_SEARCH_MODULE');	}	require("{$phpbb_root_path}includes/search/$search_type.$phpEx");	// We do some additional checks in the module to ensure it can actually be utilised	$error = false;	$search = new $search_type($error);	if ($error)	{		trigger_error($error);	}	// let the search module split up the keywords	if ($keywords)	{		$correct_query = $search->split_keywords($keywords, $search_terms);		if (!$correct_query || (empty($search->search_query) && !sizeof($author_id_ary) && !$search_id))		{			$ignored = (sizeof($search->common_words)) ? sprintf($user->lang['IGNORED_TERMS_EXPLAIN'], implode(' ', $search->common_words)) . '<br />' : '';			trigger_error($ignored . sprintf($user->lang['NO_KEYWORDS'], $search->word_length['min'], $search->word_length['max']));		}	}	if (!$keywords && sizeof($author_id_ary))	{		// if it is an author search we want to show topics by default		$show_results = ($topic_id) ? 'posts' : request_var('sr', ($search_id == 'egosearch') ? 'topics' : 'posts');		$show_results = ($show_results == 'posts') ? 'posts' : 'topics';	}	// define some variables needed for retrieving post_id/topic_id information	$sort_by_sql = array('a' => 'u.username_clean', 't' => (($show_results == 'posts') ? 'p.post_time' : 't.topic_last_post_time'), 'f' => 'f.forum_id', 'i' => 't.topic_title', 's' => (($show_results == 'posts') ? 'p.post_subject' : 't.topic_title'));	// pre-made searches	$sql = $field = $l_search_title = '';	if ($search_id)	{		switch ($search_id)		{			// Oh holy Bob, bring us some activity...			case 'active_topics':				$l_search_title = $user->lang['SEARCH_ACTIVE_TOPICS'];				$show_results = 'topics';				$sort_key = 't';				$sort_dir = 'd';				$sort_days = request_var('st', 7);				$sort_by_sql['t'] = 't.topic_last_post_time';				gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);				$s_sort_key = $s_sort_dir = '';				$last_post_time_sql = ($sort_days) ? ' AND t.topic_last_post_time > ' . (time() - ($sort_days * 24 * 3600)) : '';				$sql = 'SELECT t.topic_last_post_time, t.topic_id					FROM ' . TOPICS_TABLE . " t					WHERE t.topic_moved_id = 0						$last_post_time_sql						" . str_replace(array('p.', 'post_'), array('t.', 'topic_'), $m_approve_fid_sql) . '						' . ((sizeof($ex_fid_ary)) ? ' AND ' . $db->sql_in_set('t.forum_id', $ex_fid_ary, true) : '') . '					ORDER BY t.topic_last_post_time DESC';				$field = 'topic_id';			break;			case 'unanswered':				$l_search_title = $user->lang['SEARCH_UNANSWERED'];				$show_results = request_var('sr', 'topics');				$show_results = ($show_results == 'posts') ? 'posts' : 'topics';				$sort_by_sql['t'] = ($show_results == 'posts') ? 'p.post_time' : 't.topic_last_post_time';				$sort_by_sql['s'] = ($show_results == 'posts') ? 'p.post_subject' : 't.topic_title';				$sql_sort = 'ORDER BY ' . $sort_by_sql[$sort_key] . (($sort_dir == 'a') ? ' ASC' : ' DESC');				$sort_join = ($sort_key == 'f') ? FORUMS_TABLE . ' f, ' : '';				$sql_sort = ($sort_key == 'f') ? ' AND f.forum_id = p.forum_id ' . $sql_sort : $sql_sort;				if ($sort_days)				{					$last_post_time = 'AND p.post_time > ' . (time() - ($sort_days * 24 * 3600));				}				else				{					$last_post_time = '';				}				if ($sort_key == 'a')				{					$sort_join = USERS_TABLE . ' u, ';					$sql_sort = ' AND u.user_id = p.poster_id ' . $sql_sort;				}				if ($show_results == 'posts')				{					$sql = "SELECT p.post_id						FROM $sort_join" . POSTS_TABLE . ' p, ' . TOPICS_TABLE . " t						WHERE t.topic_replies = 0							AND p.topic_id = t.topic_id							$last_post_time							$m_approve_fid_sql							" . ((sizeof($ex_fid_ary)) ? ' AND ' . $db->sql_in_set('p.forum_id', $ex_fid_ary, true) : '') . "							$sql_sort";					$field = 'post_id';				}				else				{					$sql = 'SELECT DISTINCT ' . $sort_by_sql[$sort_key] . ", p.topic_id						FROM $sort_join" . POSTS_TABLE . ' p, ' . TOPICS_TABLE . " t						WHERE t.topic_replies = 0							AND t.topic_moved_id = 0							AND p.topic_id = t.topic_id							$last_post_time							$m_approve_fid_sql							" . ((sizeof($ex_fid_ary)) ? ' AND ' . $db->sql_in_set('p.forum_id', $ex_fid_ary, true) : '') . "						$sql_sort";					$field = 'topic_id';				}			break;			case 'unreadposts':				$l_search_title = $user->lang['SEARCH_UNREAD'];				// force sorting				$show_results = 'topics';				$sort_key = 't';				$sort_by_sql['t'] = 't.topic_last_post_time';				$sql_sort = 'ORDER BY ' . $sort_by_sql[$sort_key] . (($sort_dir == 'a') ? ' ASC' : ' DESC');				$sql_where = 'AND t.topic_moved_id = 0					' . str_replace(array('p.', 'post_'), array('t.', 'topic_'), $m_approve_fid_sql) . '					' . ((sizeof($ex_fid_ary)) ? 'AND ' . $db->sql_in_set('t.forum_id', $ex_fid_ary, true) : '');				gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);				$s_sort_key = $s_sort_dir = $u_sort_param = $s_limit_days = '';			break;			case 'newposts':				$l_search_title = $user->lang['SEARCH_NEW'];				// force sorting				$show_results = (request_var('sr', 'topics') == 'posts') ? 'posts' : 'topics';				$sort_key = 't';				$sort_dir = 'd';				$sort_by_sql['t'] = ($show_results == 'posts') ? 'p.post_time' : 't.topic_last_post_time';				$sql_sort = 'ORDER BY ' . $sort_by_sql[$sort_key] . (($sort_dir == 'a') ? ' ASC' : ' DESC');				gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);				$s_sort_key = $s_sort_dir = $u_sort_param = $s_limit_days = '';				if ($show_results == 'posts')				{					$sql = 'SELECT p.post_id						FROM ' . POSTS_TABLE . ' p						WHERE p.post_time > ' . $user->data['user_lastvisit'] . "							$m_approve_fid_sql							" . ((sizeof($ex_fid_ary)) ? ' AND ' . $db->sql_in_set('p.forum_id', $ex_fid_ary, true) : '') . "						$sql_sort";					$field = 'post_id';				}				else				{					$sql = 'SELECT t.topic_id						FROM ' . TOPICS_TABLE . ' t						WHERE t.topic_last_post_time > ' . $user->data['user_lastvisit'] . '							AND t.topic_moved_id = 0							' . str_replace(array('p.', 'post_'), array('t.', 'topic_'), $m_approve_fid_sql) . '							' . ((sizeof($ex_fid_ary)) ? 'AND ' . $db->sql_in_set('t.forum_id', $ex_fid_ary, true) : '') . "						$sql_sort";/*		[Fix] queued replies missing from "view new posts" (Bug #42705 - Patch by Paul)		- Creates temporary table, query is far from optimized					$sql = 'SELECT t.topic_id						FROM ' . TOPICS_TABLE . ' t, ' . POSTS_TABLE . ' p						WHERE p.post_time > ' . $user->data['user_lastvisit'] . '							AND t.topic_id = p.topic_id							AND t.topic_moved_id = 0							' . $m_approve_fid_sql . '							' . ((sizeof($ex_fid_ary)) ? 'AND ' . $db->sql_in_set('t.forum_id', $ex_fid_ary, true) : '') . "						GROUP BY t.topic_id						$sql_sort";*/					$field = 'topic_id';				}			break;			case 'egosearch':				$l_search_title = $user->lang['SEARCH_SELF'];			break;		}	}	// show_results should not change after this	$per_page = ($show_results == 'posts') ? $config['posts_per_page'] : $config['topics_per_page'];	$total_match_count = 0;	if ($search_id)	{		if ($sql)		{			// only return up to 1000 ids (the last one will be removed later)			$result = $db->sql_query_limit($sql, 1001 - $start, $start);			while ($row = $db->sql_fetchrow($result))			{				$id_ary[] = (int) $row[$field];			}			$db->sql_freeresult($result);			$total_match_count = sizeof($id_ary) + $start;			$id_ary = array_slice($id_ary, 0, $per_page);		}		else if ($search_id == 'unreadposts')		{			$id_ary = array_keys(get_unread_topics($user->data['user_id'], $sql_where, $sql_sort, 1001 - $start, $start));			$total_match_count = sizeof($id_ary) + $start;			$id_ary = array_slice($id_ary, 0, $per_page);		}		else		{			$search_id = '';		}	}	// make sure that some arrays are always in the same order	sort($ex_fid_ary);	sort($m_approve_fid_ary);	sort($author_id_ary);	if (!empty($search->search_query))	{		$total_match_count = $search->keyword_search($show_results, $search_fields, $search_terms, $sort_by_sql, $sort_key, $sort_dir, $sort_days, $ex_fid_ary, $m_approve_fid_ary, $topic_id, $author_id_ary, $sql_author_match, $id_ary, $start, $per_page);	}	else if (sizeof($author_id_ary))	{		$firstpost_only = ($search_fields === 'firstpost' || $search_fields == 'titleonly') ? true : false;		$total_match_count = $search->author_search($show_results, $firstpost_only, $sort_by_sql, $sort_key, $sort_dir, $sort_days, $ex_fid_ary, $m_approve_fid_ary, $topic_id, $author_id_ary, $sql_author_match, $id_ary, $start, $per_page);	}	// For some searches we need to print out the "no results" page directly to allow re-sorting/refining the search options.	if (!sizeof($id_ary) && !$search_id)	{		trigger_error('NO_SEARCH_RESULTS');	}	$sql_where = '';	if (sizeof($id_ary))	{		$sql_where .= $db->sql_in_set(($show_results == 'posts') ? 'p.post_id' : 't.topic_id', $id_ary);		$sql_where .= (sizeof($ex_fid_ary)) ? ' AND (' . $db->sql_in_set('f.forum_id', $ex_fid_ary, true) . ' OR f.forum_id IS NULL)' : '';		$sql_where .= ($show_results == 'posts') ? $m_approve_fid_sql : str_replace(array('p.post_approved', 'p.forum_id'), array('t.topic_approved', 't.forum_id'), $m_approve_fid_sql);	}	if ($show_results == 'posts')	{		include($phpbb_root_path . 'includes/functions_posting.' . $phpEx);	}	else	{		include($phpbb_root_path . 'includes/functions_display.' . $phpEx);	}	$user->add_lang('viewtopic');	// Grab icons	$icons = $cache->obtain_icons();	// Output header	if ($search_id && ($total_match_count > 1000))	{		// limit the number to 1000 for pre-made searches		$total_match_count--;		$l_search_matches = sprintf($user->lang['FOUND_MORE_SEARCH_MATCHES'], $total_match_count);	}	else	{		$l_search_matches = ($total_match_count == 1) ? sprintf($user->lang['FOUND_SEARCH_MATCH'], $total_match_count) : sprintf($user->lang['FOUND_SEARCH_MATCHES'], $total_match_count);	}	// define some vars for urls	$hilit = implode('|', explode(' ', preg_replace('#\s+#u', ' ', str_replace(array('+', '-', '|', '(', ')', '&quot;'), ' ', $keywords))));	// Do not allow *only* wildcard being used for hilight	$hilit = (strspn($hilit, '*') === strlen($hilit)) ? '' : $hilit;	$u_hilit = urlencode(htmlspecialchars_decode(str_replace('|', ' ', $hilit)));	$u_show_results = '&amp;sr=' . $show_results;	$u_search_forum = implode('&amp;fid%5B%5D=', $search_forum);	$u_search = append_sid("{$phpbb_root_path}search.$phpEx", $u_sort_param . $u_show_results);	$u_search .= ($search_id) ? '&amp;search_id=' . $search_id : '';	$u_search .= ($u_hilit) ? '&amp;keywords=' . urlencode(htmlspecialchars_decode($keywords)) : '';	$u_search .= ($search_terms != 'all') ? '&amp;terms=' . $search_terms : '';	$u_search .= ($topic_id) ? '&amp;t=' . $topic_id : '';	$u_search .= ($author) ? '&amp;author=' . urlencode(htmlspecialchars_decode($author)) : '';	$u_search .= ($author_id) ? '&amp;author_id=' . $author_id : '';	$u_search .= ($u_search_forum) ? '&amp;fid%5B%5D=' . $u_search_forum : '';	$u_search .= (!$search_child) ? '&amp;sc=0' : '';	$u_search .= ($search_fields != 'all') ? '&amp;sf=' . $search_fields : '';	$u_search .= ($return_chars != 300) ? '&amp;ch=' . $return_chars : '';	$template->assign_vars(array(		'SEARCH_TITLE'		=> $l_search_title,		'SEARCH_MATCHES'	=> $l_search_matches,		'SEARCH_WORDS'		=> $search->search_query,		'IGNORED_WORDS'		=> (sizeof($search->common_words)) ? implode(' ', $search->common_words) : '',		'PAGINATION'		=> generate_pagination($u_search, $total_match_count, $per_page, $start),		'PAGE_NUMBER'		=> on_page($total_match_count, $per_page, $start),		'TOTAL_MATCHES'		=> $total_match_count,		'SEARCH_IN_RESULTS'	=> ($search_id) ? false : true,		'S_SELECT_SORT_DIR'		=> $s_sort_dir,		'S_SELECT_SORT_KEY'		=> $s_sort_key,		'S_SELECT_SORT_DAYS'	=> $s_limit_days,		'S_SEARCH_ACTION'		=> $u_search,		'S_SHOW_TOPICS'			=> ($show_results == 'posts') ? false : true,		'GOTO_PAGE_IMG'		=> $user->img('icon_post_target', 'GOTO_PAGE'),		'NEWEST_POST_IMG'	=> $user->img('icon_topic_newest', 'VIEW_NEWEST_POST'),		'REPORTED_IMG'		=> $user->img('icon_topic_reported', 'TOPIC_REPORTED'),		'UNAPPROVED_IMG'	=> $user->img('icon_topic_unapproved', 'TOPIC_UNAPPROVED'),		'LAST_POST_IMG'		=> $user->img('icon_topic_latest', 'VIEW_LATEST_POST'),		'U_SEARCH_WORDS'	=> $u_search,	));	if ($sql_where)	{		if ($show_results == 'posts')		{			// @todo Joining this query to the one below?			$sql = 'SELECT zebra_id, friend, foe				FROM ' . ZEBRA_TABLE . '				WHERE user_id = ' . $user->data['user_id'];			$result = $db->sql_query($sql);			$zebra = array();			while ($row = $db->sql_fetchrow($result))			{				$zebra[($row['friend']) ? 'friend' : 'foe'][] = $row['zebra_id'];			}			$db->sql_freeresult($result);			$sql = 'SELECT p.*, f.forum_id, f.forum_name, t.*, u.username, u.username_clean, u.user_sig, u.user_sig_bbcode_uid, u.user_colour				FROM ' . POSTS_TABLE . ' p					LEFT JOIN ' . TOPICS_TABLE . ' t ON (p.topic_id = t.topic_id)					LEFT JOIN ' . FORUMS_TABLE . ' f ON (p.forum_id = f.forum_id)					LEFT JOIN ' . USERS_TABLE . " u ON (p.poster_id = u.user_id)				WHERE $sql_where";		}		else		{			$sql_from = TOPICS_TABLE . ' t				LEFT JOIN ' . FORUMS_TABLE . ' f ON (f.forum_id = t.forum_id)				' . (($sort_key == 'a') ? ' LEFT JOIN ' . USERS_TABLE . ' u ON (u.user_id = t.topic_poster) ' : '');			$sql_select = 't.*, f.forum_id, f.forum_name';			if ($user->data['is_registered'])			{				if ($config['load_db_track'] && $author_id !== $user->data['user_id'])				{					$sql_from .= ' LEFT JOIN ' . TOPICS_POSTED_TABLE . ' tp ON (tp.user_id = ' . $user->data['user_id'] . '						AND t.topic_id = tp.topic_id)';					$sql_select .= ', tp.topic_posted';				}				if ($config['load_db_lastread'])				{					$sql_from .= ' LEFT JOIN ' . TOPICS_TRACK_TABLE . ' tt ON (tt.user_id = ' . $user->data['user_id'] . '							AND t.topic_id = tt.topic_id)						LEFT JOIN ' . FORUMS_TRACK_TABLE . ' ft ON (ft.user_id = ' . $user->data['user_id'] . '							AND ft.forum_id = f.forum_id)';					$sql_select .= ', tt.mark_time, ft.mark_time as f_mark_time';				}			}			if ($config['load_anon_lastread'] || ($user->data['is_registered'] && !$config['load_db_lastread']))			{				$tracking_topics = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';				$tracking_topics = ($tracking_topics) ? tracking_unserialize($tracking_topics) : array();			}			$sql = "SELECT $sql_select				FROM $sql_from				WHERE $sql_where";		}		$sql .= ' ORDER BY ' . $sort_by_sql[$sort_key] . ' ' . (($sort_dir == 'd') ? 'DESC' : 'ASC');		$result = $db->sql_query($sql);		$result_topic_id = 0;		$rowset = array();		if ($show_results == 'topics')		{			$forums = $rowset = $shadow_topic_list = array();			while ($row = $db->sql_fetchrow($result))			{				$row['forum_id'] = (int) $row['forum_id'];				$row['topic_id'] = (int) $row['topic_id'];				if ($row['topic_status'] == ITEM_MOVED)				{					$shadow_topic_list[$row['topic_moved_id']] = $row['topic_id'];				}				$rowset[$row['topic_id']] = $row;				if (!isset($forums[$row['forum_id']]) && $user->data['is_registered'] && $config['load_db_lastread'])				{					$forums[$row['forum_id']]['mark_time'] = $row['f_mark_time'];				}				$forums[$row['forum_id']]['topic_list'][] = $row['topic_id'];				$forums[$row['forum_id']]['rowset'][$row['topic_id']] = &$rowset[$row['topic_id']];			}			$db->sql_freeresult($result);			// If we have some shadow topics, update the rowset to reflect their topic information			if (sizeof($shadow_topic_list))			{				$sql = 'SELECT *					FROM ' . TOPICS_TABLE . '					WHERE ' . $db->sql_in_set('topic_id', array_keys($shadow_topic_list));				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$orig_topic_id = $shadow_topic_list[$row['topic_id']];					// We want to retain some values					$row = array_merge($row, array(						'topic_moved_id'	=> $rowset[$orig_topic_id]['topic_moved_id'],						'topic_status'		=> $rowset[$orig_topic_id]['topic_status'],						'forum_name'		=> $rowset[$orig_topic_id]['forum_name'])					);					$rowset[$orig_topic_id] = $row;				}				$db->sql_freeresult($result);			}			unset($shadow_topic_list);			foreach ($forums as $forum_id => $forum)			{				if ($user->data['is_registered'] && $config['load_db_lastread'])				{					$topic_tracking_info[$forum_id] = get_topic_tracking($forum_id, $forum['topic_list'], $forum['rowset'], array($forum_id => $forum['mark_time']), ($forum_id) ? false : $forum['topic_list']);				}				else if ($config['load_anon_lastread'] || $user->data['is_registered'])				{					$topic_tracking_info[$forum_id] = get_complete_topic_tracking($forum_id, $forum['topic_list'], ($forum_id) ? false : $forum['topic_list']);					if (!$user->data['is_registered'])					{						$user->data['user_lastmark'] = (isset($tracking_topics['l'])) ? (int) (base_convert($tracking_topics['l'], 36, 10) + $config['board_startdate']) : 0;					}				}			}			unset($forums);		}		else		{			$bbcode_bitfield = $text_only_message = '';			$attach_list = array();			while ($row = $db->sql_fetchrow($result))			{				// We pre-process some variables here for later usage				$row['post_text'] = censor_text($row['post_text']);				$text_only_message = $row['post_text'];				// make list items visible as such				if ($row['bbcode_uid'])				{					$text_only_message = str_replace('[*:' . $row['bbcode_uid'] . ']', '&sdot;&nbsp;', $text_only_message);					// no BBCode in text only message					strip_bbcode($text_only_message, $row['bbcode_uid']);				}				if ($return_chars == -1 || utf8_strlen($text_only_message) < ($return_chars + 3))				{					$row['display_text_only'] = false;					$bbcode_bitfield = $bbcode_bitfield | base64_decode($row['bbcode_bitfield']);					// Does this post have an attachment? If so, add it to the list					if ($row['post_attachment'] && $config['allow_attachments'])					{						$attach_list[$row['forum_id']][] = $row['post_id'];					}				}				else				{					$row['post_text'] = $text_only_message;					$row['display_text_only'] = true;				}				$rowset[] = $row;			}			$db->sql_freeresult($result);			unset($text_only_message);			// Instantiate BBCode if needed			if ($bbcode_bitfield !== '')			{				include_once($phpbb_root_path . 'includes/bbcode.' . $phpEx);				$bbcode = new bbcode(base64_encode($bbcode_bitfield));			}			// Pull attachment data			if (sizeof($attach_list))			{				$use_attach_list = $attach_list;				$attach_list = array();				foreach ($use_attach_list as $forum_id => $_list)				{					if ($auth->acl_get('u_download') && $auth->acl_get('f_download', $forum_id))					{						$attach_list = array_merge($attach_list, $_list);					}				}			}			if (sizeof($attach_list))			{				$sql = 'SELECT *					FROM ' . ATTACHMENTS_TABLE . '					WHERE ' . $db->sql_in_set('post_msg_id', $attach_list) . '						AND in_message = 0					ORDER BY filetime DESC, post_msg_id ASC';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$attachments[$row['post_msg_id']][] = $row;				}				$db->sql_freeresult($result);			}		}		if ($hilit)		{			// Remove bad highlights			$hilit_array = array_filter(explode('|', $hilit), 'strlen');			foreach ($hilit_array as $key => $value)			{				$hilit_array[$key] = str_replace('\*', '\w*?', preg_quote($value, '#'));				$hilit_array[$key] = preg_replace('#(^|\s)\\\\w\*\?(\s|$)#', '$1\w+?$2', $hilit_array[$key]);			}			$hilit = implode('|', $hilit_array);		}		foreach ($rowset as $row)		{			$forum_id = $row['forum_id'];			$result_topic_id = $row['topic_id'];			$topic_title = censor_text($row['topic_title']);			// we need to select a forum id for this global topic			if (!$forum_id)			{				if (!isset($g_forum_id))				{					// Get a list of forums the user cannot read					$forum_ary = array_unique(array_keys($auth->acl_getf('!f_read', true)));					// Determine first forum the user is able to read (must not be a category)					$sql = 'SELECT forum_id						FROM ' . FORUMS_TABLE . '						WHERE forum_type = ' . FORUM_POST;					if (sizeof($forum_ary))					{						$sql .= ' AND ' . $db->sql_in_set('forum_id', $forum_ary, true);					}					$result = $db->sql_query_limit($sql, 1);					$g_forum_id = (int) $db->sql_fetchfield('forum_id');				}				$u_forum_id = $g_forum_id;			}			else			{				$u_forum_id = $forum_id;			}			$view_topic_url_params = "f=$u_forum_id&amp;t=$result_topic_id" . (($u_hilit) ? "&amp;hilit=$u_hilit" : '');			$view_topic_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", $view_topic_url_params);			$replies = ($auth->acl_get('m_approve', $forum_id)) ? $row['topic_replies_real'] : $row['topic_replies'];			if ($show_results == 'topics')			{				if ($config['load_db_track'] && $author_id === $user->data['user_id'])				{					$row['topic_posted'] = 1;				}				$folder_img = $folder_alt = $topic_type = '';				topic_status($row, $replies, (isset($topic_tracking_info[$forum_id][$row['topic_id']]) && $row['topic_last_post_time'] > $topic_tracking_info[$forum_id][$row['topic_id']]) ? true : false, $folder_img, $folder_alt, $topic_type);				$unread_topic = (isset($topic_tracking_info[$forum_id][$row['topic_id']]) && $row['topic_last_post_time'] > $topic_tracking_info[$forum_id][$row['topic_id']]) ? true : false;				$topic_unapproved = (!$row['topic_approved'] && $auth->acl_get('m_approve', $forum_id)) ? true : false;				$posts_unapproved = ($row['topic_approved'] && $row['topic_replies'] < $row['topic_replies_real'] && $auth->acl_get('m_approve', $forum_id)) ? true : false;				$u_mcp_queue = ($topic_unapproved || $posts_unapproved) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue&amp;mode=' . (($topic_unapproved) ? 'approve_details' : 'unapproved_posts') . "&amp;t=$result_topic_id", true, $user->session_id) : '';				$row['topic_title'] = preg_replace('#(?!<.*)(?<!\w)(' . $hilit . ')(?!\w|[^<>]*(?:</s(?:cript|tyle))?>)#is', '<span class="posthilit">$1</span>', $row['topic_title']);				$tpl_ary = array(					'TOPIC_AUTHOR'				=> get_username_string('username', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),					'TOPIC_AUTHOR_COLOUR'		=> get_username_string('colour', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),					'TOPIC_AUTHOR_FULL'			=> get_username_string('full', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),					'FIRST_POST_TIME'			=> $user->format_date($row['topic_time']),					'LAST_POST_SUBJECT'			=> $row['topic_last_post_subject'],					'LAST_POST_TIME'			=> $user->format_date($row['topic_last_post_time']),					'LAST_VIEW_TIME'			=> $user->format_date($row['topic_last_view_time']),					'LAST_POST_AUTHOR'			=> get_username_string('username', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),					'LAST_POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),					'LAST_POST_AUTHOR_FULL'		=> get_username_string('full', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),					'PAGINATION'		=> topic_generate_pagination($replies, $view_topic_url),					'TOPIC_TYPE'		=> $topic_type,					'TOPIC_FOLDER_IMG'		=> $user->img($folder_img, $folder_alt),					'TOPIC_FOLDER_IMG_SRC'	=> $user->img($folder_img, $folder_alt, false, '', 'src'),					'TOPIC_FOLDER_IMG_ALT'	=> $user->lang[$folder_alt],					'TOPIC_FOLDER_IMG_WIDTH'=> $user->img($folder_img, '', false, '', 'width'),					'TOPIC_FOLDER_IMG_HEIGHT'	=> $user->img($folder_img, '', false, '', 'height'),					'TOPIC_ICON_IMG'		=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['img'] : '',					'TOPIC_ICON_IMG_WIDTH'	=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['width'] : '',					'TOPIC_ICON_IMG_HEIGHT'	=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['height'] : '',					'ATTACH_ICON_IMG'		=> ($auth->acl_get('u_download') && $auth->acl_get('f_download', $forum_id) && $row['topic_attachment']) ? $user->img('icon_topic_attach', $user->lang['TOTAL_ATTACHMENTS']) : '',					'UNAPPROVED_IMG'		=> ($topic_unapproved || $posts_unapproved) ? $user->img('icon_topic_unapproved', ($topic_unapproved) ? 'TOPIC_UNAPPROVED' : 'POSTS_UNAPPROVED') : '',					'S_TOPIC_GLOBAL'		=> (!$forum_id) ? true : false,					'S_TOPIC_TYPE'			=> $row['topic_type'],					'S_USER_POSTED'			=> (!empty($row['topic_posted'])) ? true : false,					'S_UNREAD_TOPIC'		=> $unread_topic,					'S_TOPIC_REPORTED'		=> (!empty($row['topic_reported']) && $auth->acl_get('m_report', $forum_id)) ? true : false,					'S_TOPIC_UNAPPROVED'	=> $topic_unapproved,					'S_POSTS_UNAPPROVED'	=> $posts_unapproved,					'U_LAST_POST'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", $view_topic_url_params . '&amp;p=' . $row['topic_last_post_id']) . '#p' . $row['topic_last_post_id'],					'U_LAST_POST_AUTHOR'	=> get_username_string('profile', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),					'U_TOPIC_AUTHOR'		=> get_username_string('profile', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),					'U_NEWEST_POST'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", $view_topic_url_params . '&amp;view=unread') . '#unread',					'U_MCP_REPORT'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports&amp;mode=reports&amp;t=' . $result_topic_id, true, $user->session_id),					'U_MCP_QUEUE'			=> $u_mcp_queue,				);			}			else			{				if ((isset($zebra['foe']) && in_array($row['poster_id'], $zebra['foe'])) && (!$view || $view != 'show' || $post_id != $row['post_id']))				{					$template->assign_block_vars('searchresults', array(						'S_IGNORE_POST' => true,						'L_IGNORE_POST' => sprintf($user->lang['POST_BY_FOE'], $row['username'], "<a href=\"$u_search&amp;start=$start&amp;p=" . $row['post_id'] . '&amp;view=show#p' . $row['post_id'] . '">', '</a>'))					);					continue;				}				// Replace naughty words such as farty pants				$row['post_subject'] = censor_text($row['post_subject']);				if ($row['display_text_only'])				{					// now find context for the searched words					$row['post_text'] = get_context($row['post_text'], array_filter(explode('|', $hilit), 'strlen'), $return_chars);					$row['post_text'] = bbcode_nl2br($row['post_text']);				}				else				{					// Second parse bbcode here					if ($row['bbcode_bitfield'])					{						$bbcode->bbcode_second_pass($row['post_text'], $row['bbcode_uid'], $row['bbcode_bitfield']);					}					$row['post_text'] = bbcode_nl2br($row['post_text']);					$row['post_text'] = smiley_text($row['post_text']);					if (!empty($attachments[$row['post_id']]))					{						parse_attachments($forum_id, $row['post_text'], $attachments[$row['post_id']], $update_count);						// we only display inline attachments						unset($attachments[$row['post_id']]);					}				}				if ($hilit)				{					// post highlighting					$row['post_text'] = preg_replace('#(?!<.*)(?<!\w)(' . $hilit . ')(?!\w|[^<>]*(?:</s(?:cript|tyle))?>)#is', '<span class="posthilit">$1</span>', $row['post_text']);					$row['post_subject'] = preg_replace('#(?!<.*)(?<!\w)(' . $hilit . ')(?!\w|[^<>]*(?:</s(?:cript|tyle))?>)#is', '<span class="posthilit">$1</span>', $row['post_subject']);				}				$tpl_ary = array(					'POST_AUTHOR_FULL'		=> get_username_string('full', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),					'POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),					'POST_AUTHOR'			=> get_username_string('username', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),					'U_POST_AUTHOR'			=> get_username_string('profile', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),					'POST_SUBJECT'		=> $row['post_subject'],					'POST_DATE'			=> (!empty($row['post_time'])) ? $user->format_date($row['post_time']) : '',					'MESSAGE'			=> $row['post_text']				);			}			$template->assign_block_vars('searchresults', array_merge($tpl_ary, array(				'FORUM_ID'			=> $forum_id,				'TOPIC_ID'			=> $result_topic_id,				'POST_ID'			=> ($show_results == 'posts') ? $row['post_id'] : false,				'FORUM_TITLE'		=> $row['forum_name'],				'TOPIC_TITLE'		=> $topic_title,				'TOPIC_REPLIES'		=> $replies,				'TOPIC_VIEWS'		=> $row['topic_views'],				'U_VIEW_TOPIC'		=> $view_topic_url,				'U_VIEW_FORUM'		=> append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id),				'U_VIEW_POST'		=> (!empty($row['post_id'])) ? append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=" . $row['topic_id'] . '&amp;p=' . $row['post_id'] . (($u_hilit) ? '&amp;hilit=' . $u_hilit : '')) . '#p' . $row['post_id'] : '')			));		}		if ($topic_id && ($topic_id == $result_topic_id))		{			$template->assign_vars(array(				'SEARCH_TOPIC'		=> $topic_title,				'U_SEARCH_TOPIC'	=> $view_topic_url			));		}	}	unset($rowset);	page_header(($l_search_title) ? $l_search_title : $user->lang['SEARCH']);	$template->set_filenames(array(		'body' => 'search_results.html')	);	make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"));	page_footer();}// Search forum$s_forums = '';$sql = 'SELECT f.forum_id, f.forum_name, f.parent_id, f.forum_type, f.left_id, f.right_id, f.forum_password, f.enable_indexing, fa.user_id	FROM ' . FORUMS_TABLE . ' f	LEFT JOIN ' . FORUMS_ACCESS_TABLE . " fa ON (fa.forum_id = f.forum_id		AND fa.session_id = '" . $db->sql_escape($user->session_id) . "')	ORDER BY f.left_id ASC";$result = $db->sql_query($sql);$right = $cat_right = $padding_inc = 0;$padding = $forum_list = $holding = '';$pad_store = array('0' => '');while ($row = $db->sql_fetchrow($result)){	if ($row['forum_type'] == FORUM_CAT && ($row['left_id'] + 1 == $row['right_id']))	{		// Non-postable forum with no subforums, don't display		continue;	}	if ($row['forum_type'] == FORUM_POST && ($row['left_id'] + 1 == $row['right_id']) && !$row['enable_indexing'])	{		// Postable forum with no subforums and indexing disabled, don't display		continue;	}	if ($row['forum_type'] == FORUM_LINK || ($row['forum_password'] && !$row['user_id']))	{		// if this forum is a link or password protected (user has not entered the password yet) then skip to the next branch		continue;	}	if ($row['left_id'] < $right)	{		$padding .= '&nbsp; &nbsp;';		$pad_store[$row['parent_id']] = $padding;	}	else if ($row['left_id'] > $right + 1)	{		if (isset($pad_store[$row['parent_id']]))		{			$padding = $pad_store[$row['parent_id']];		}		else		{			continue;		}	}	$right = $row['right_id'];	if ($auth->acl_gets('!f_search', '!f_list', $row['forum_id']))	{		// if the user does not have permissions to search or see this forum skip only this forum/category		continue;	}	$selected = (in_array($row['forum_id'], $search_forum)) ? ' selected="selected"' : '';	if ($row['left_id'] > $cat_right)	{		// make sure we don't forget anything		$s_forums .= $holding;		$holding = '';	}	if ($row['right_id'] - $row['left_id'] > 1)	{		$cat_right = max($cat_right, $row['right_id']);		$holding .= '<option value="' . $row['forum_id'] . '"' . $selected . '>' . $padding . $row['forum_name'] . '</option>';	}	else	{		$s_forums .= $holding . '<option value="' . $row['forum_id'] . '"' . $selected . '>' . $padding . $row['forum_name'] . '</option>';		$holding = '';	}}if ($holding){	$s_forums .= $holding;}$db->sql_freeresult($result);unset($pad_store);if (!$s_forums){	trigger_error('NO_SEARCH');}// Number of chars returned$s_characters = '<option value="-1">' . $user->lang['ALL_AVAILABLE'] . '</option>';$s_characters .= '<option value="0">0</option>';$s_characters .= '<option value="25">25</option>';$s_characters .= '<option value="50">50</option>';for ($i = 100; $i <= 1000 ; $i += 100){	$selected = ($i == 300) ? ' selected="selected"' : '';	$s_characters .= '<option value="' . $i . '"' . $selected . '>' . $i . '</option>';}$s_hidden_fields = array('t' => $topic_id);if ($_SID){	$s_hidden_fields['sid'] = $_SID;}if (!empty($_EXTRA_URL)){	foreach ($_EXTRA_URL as $url_param)	{		$url_param = explode('=', $url_param, 2);		$s_hidden_fields[$url_param[0]] = $url_param[1];	}}$template->assign_vars(array(	'S_SEARCH_ACTION'		=> append_sid("{$phpbb_root_path}search.$phpEx", false, true, 0), // We force no ?sid= appending by using 0	'S_HIDDEN_FIELDS'		=> build_hidden_fields($s_hidden_fields),	'S_CHARACTER_OPTIONS'	=> $s_characters,	'S_FORUM_OPTIONS'		=> $s_forums,	'S_SELECT_SORT_DIR'		=> $s_sort_dir,	'S_SELECT_SORT_KEY'		=> $s_sort_key,	'S_SELECT_SORT_DAYS'	=> $s_limit_days,	'S_IN_SEARCH'			=> true,));// only show recent searches to search administratorsif ($auth->acl_get('a_search')){	// Handle large objects differently for Oracle and MSSQL	switch ($db->sql_layer)	{		case 'oracle':			$sql = 'SELECT search_time, search_keywords				FROM ' . SEARCH_RESULTS_TABLE . '				WHERE dbms_lob.getlength(search_keywords) > 0				ORDER BY search_time DESC';		break;		case 'mssql':		case 'mssql_odbc':		case 'mssqlnative':			$sql = 'SELECT search_time, search_keywords				FROM ' . SEARCH_RESULTS_TABLE . '				WHERE DATALENGTH(search_keywords) > 0				ORDER BY search_time DESC';		break;		default:			$sql = 'SELECT search_time, search_keywords				FROM ' . SEARCH_RESULTS_TABLE . '				WHERE search_keywords <> \'\'				ORDER BY search_time DESC';		break;	}	$result = $db->sql_query_limit($sql, 5);	while ($row = $db->sql_fetchrow($result))	{		$keywords = $row['search_keywords'];		$template->assign_block_vars('recentsearch', array(			'KEYWORDS'	=> $keywords,			'TIME'		=> $user->format_date($row['search_time']),			'U_KEYWORDS'	=> append_sid("{$phpbb_root_path}search.$phpEx", 'keywords=' . urlencode(htmlspecialchars_decode($keywords)))		));	}	$db->sql_freeresult($result);}// Output the basic pagepage_header($user->lang['SEARCH']);$template->set_filenames(array(	'body' => 'search_body.html'));make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"));page_footer();?>
<?php/**** acp_ban [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// Banning$lang = array_merge($lang, array(	'1_HOUR'		=> '1 hour',	'30_MINS'		=> '30 minutes',	'6_HOURS'		=> '6 hours',	'ACP_BAN_EXPLAIN'	=> 'Here you can control the banning of users by name, IP or e-mail address. These methods prevent a user reaching any part of the board. You can give a short (maximum 3000 characters) reason for the ban if you wish. This will be displayed in the admin log. The duration of a ban can also be specified. If you want the ban to end on a specific date rather than after a set time period select <span style="text-decoration: underline;">Until -&gt;</span> for the ban length and enter a date in <kbd>YYYY-MM-DD</kbd> format.',	'BAN_EXCLUDE'			=> 'Exclude from banning',	'BAN_LENGTH'			=> 'Length of ban',	'BAN_REASON'			=> 'Reason for ban',	'BAN_GIVE_REASON'		=> 'Reason shown to the banned',	'BAN_UPDATE_SUCCESSFUL'	=> 'The banlist has been updated successfully.',	'BANNED_UNTIL_DATE'		=> 'until %s', // Example: "until Mon 13.Jul.2009, 14:44"	'BANNED_UNTIL_DURATION'	=> '%1$s (until %2$s)', // Example: "7 days (until Tue 14.Jul.2009, 14:44)"	'EMAIL_BAN'					=> 'Ban one or more e-mail addresses',	'EMAIL_BAN_EXCLUDE_EXPLAIN'	=> 'Enable this to exclude the entered e-mail address from all current bans.',	'EMAIL_BAN_EXPLAIN'			=> 'To specify more than one e-mail address enter each on a new line. To match partial addresses use * as the wildcard, e.g. <samp>*@hotmail.com</samp>, <samp>*@*.domain.tld</samp>, etc.',	'EMAIL_NO_BANNED'			=> 'No banned e-mail addresses',	'EMAIL_UNBAN'				=> 'Un-ban or un-exclude e-mails',	'EMAIL_UNBAN_EXPLAIN'		=> 'You can unban (or un-exclude) multiple e-mail addresses in one go using the appropriate combination of mouse and keyboard for your computer and browser. Excluded e-mail addresses are emphasised.',	'IP_BAN'					=> 'Ban one or more IPs',	'IP_BAN_EXCLUDE_EXPLAIN'	=> 'Enable this to exclude the entered IP from all current bans.',	'IP_BAN_EXPLAIN'			=> 'To specify several different IPs or hostnames enter each on a new line. To specify a range of IP addresses separate the start and end with a hyphen (-), to specify a wildcard use *.',	'IP_HOSTNAME'				=> 'IP addresses or hostnames',	'IP_NO_BANNED'				=> 'No banned IP addresses',	'IP_UNBAN'					=> 'Un-ban or un-exclude IPs',	'IP_UNBAN_EXPLAIN'			=> 'You can unban (or un-exclude) multiple IP addresses in one go using the appropriate combination of mouse and keyboard for your computer and browser. Excluded IPs are emphasised.',	'LENGTH_BAN_INVALID'		=> 'The date has to be formatted <kbd>YYYY-MM-DD</kbd>.',	'OPTIONS_BANNED'			=> 'Banned',	'OPTIONS_EXCLUDED'			=> 'Excluded',	'PERMANENT'		=> 'Permanent',	'UNTIL'						=> 'Until',	'USER_BAN'					=> 'Ban one or more usernames',	'USER_BAN_EXCLUDE_EXPLAIN'	=> 'Enable this to exclude the entered users from all current bans.',	'USER_BAN_EXPLAIN'			=> 'You can ban multiple users in one go by entering each name on a new line. Use the <span style="text-decoration: underline;">Find a member</span> facility to look up and add one or more users automatically.',	'USER_NO_BANNED'			=> 'No banned usernames',	'USER_UNBAN'				=> 'Un-ban or un-exclude usernames',	'USER_UNBAN_EXPLAIN'		=> 'You can unban (or un-exclude) multiple users in one go using the appropriate combination of mouse and keyboard for your computer and browser. Excluded users are emphasised.',));?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}if (!class_exists('bbcode')){	include($phpbb_root_path . 'includes/bbcode.' . $phpEx);}/*** BBCODE FIRSTPASS* BBCODE first pass class (functions for parsing messages for db storage)* @package phpBB3*/class bbcode_firstpass extends bbcode{	var $message = '';	var $warn_msg = array();	var $parsed_items = array();	/**	* Parse BBCode	*/	function parse_bbcode()	{		if (!$this->bbcodes)		{			$this->bbcode_init();		}		global $user;		$this->bbcode_bitfield = '';		$bitfield = new bitfield();		foreach ($this->bbcodes as $bbcode_name => $bbcode_data)		{			if (isset($bbcode_data['disabled']) && $bbcode_data['disabled'])			{				foreach ($bbcode_data['regexp'] as $regexp => $replacement)				{					if (preg_match($regexp, $this->message))					{						$this->warn_msg[] = sprintf($user->lang['UNAUTHORISED_BBCODE'] , '[' . $bbcode_name . ']');						continue;					}				}			}			else			{				foreach ($bbcode_data['regexp'] as $regexp => $replacement)				{					// The pattern gets compiled and cached by the PCRE extension,					// it should not demand recompilation					if (preg_match($regexp, $this->message))					{						$this->message = preg_replace($regexp, $replacement, $this->message);						$bitfield->set($bbcode_data['bbcode_id']);					}				}			}		}		$this->bbcode_bitfield = $bitfield->get_base64();	}	/**	* Prepare some bbcodes for better parsing	*/	function prepare_bbcodes()	{		// Ok, seems like users instead want the no-parsing of urls, smilies, etc. after and before and within quote tags being tagged as "not a bug".		// Fine by me ;) Will ease our live... but do not come back and cry at us, we won't hear you.		/* Add newline at the end and in front of each quote block to prevent parsing errors (urls, smilies, etc.)		if (strpos($this->message, '[quote') !== false && strpos($this->message, '[/quote]') !== false)		{			$this->message = str_replace("\r\n", "\n", $this->message);			// We strip newlines and spaces after and before quotes in quotes (trimming) and then add exactly one newline			$this->message = preg_replace('#\[quote(=&quot;.*?&quot;)?\]\s*(.*?)\s*\[/quote\]#siu', '[quote\1]' . "\n" . '\2' ."\n[/quote]", $this->message);		}		*/		// Add other checks which needs to be placed before actually parsing anything (be it bbcodes, smilies, urls...)	}	/**	* Init bbcode data for later parsing	*/	function bbcode_init($allow_custom_bbcode = true)	{		static $rowset;		// This array holds all bbcode data. BBCodes will be processed in this		// order, so it is important to keep [code] in first position and		// [quote] in second position.		// To parse multiline URL we enable dotall option setting only for URL text		// but not for link itself, thus [url][/url] is not affected.		$this->bbcodes = array(			'code'			=> array('bbcode_id' => 8,	'regexp' => array('#\[code(?:=([a-z]+))?\](.+\[/code\])#uise' => "\$this->bbcode_code('\$1', '\$2')")),			'quote'			=> array('bbcode_id' => 0,	'regexp' => array('#\[quote(?:=&quot;(.*?)&quot;)?\](.+)\[/quote\]#uise' => "\$this->bbcode_quote('\$0')")),			'attachment'	=> array('bbcode_id' => 12,	'regexp' => array('#\[attachment=([0-9]+)\](.*?)\[/attachment\]#uise' => "\$this->bbcode_attachment('\$1', '\$2')")),			'b'				=> array('bbcode_id' => 1,	'regexp' => array('#\[b\](.*?)\[/b\]#uise' => "\$this->bbcode_strong('\$1')")),			'i'				=> array('bbcode_id' => 2,	'regexp' => array('#\[i\](.*?)\[/i\]#uise' => "\$this->bbcode_italic('\$1')")),			'url'			=> array('bbcode_id' => 3,	'regexp' => array('#\[url(=(.*))?\](?(1)((?s).*(?-s))|(.*))\[/url\]#uiUe' => "\$this->validate_url('\$2', ('\$3') ? '\$3' : '\$4')")),			'img'			=> array('bbcode_id' => 4,	'regexp' => array('#\[img\](.*)\[/img\]#uiUe' => "\$this->bbcode_img('\$1')")),			'size'			=> array('bbcode_id' => 5,	'regexp' => array('#\[size=([\-\+]?\d+)\](.*?)\[/size\]#uise' => "\$this->bbcode_size('\$1', '\$2')")),			'color'			=> array('bbcode_id' => 6,	'regexp' => array('!\[color=(#[0-9a-f]{3}|#[0-9a-f]{6}|[a-z\-]+)\](.*?)\[/color\]!uise' => "\$this->bbcode_color('\$1', '\$2')")),			'u'				=> array('bbcode_id' => 7,	'regexp' => array('#\[u\](.*?)\[/u\]#uise' => "\$this->bbcode_underline('\$1')")),			'list'			=> array('bbcode_id' => 9,	'regexp' => array('#\[list(?:=(?:[a-z0-9]|disc|circle|square))?].*\[/list]#uise' => "\$this->bbcode_parse_list('\$0')")),			'email'			=> array('bbcode_id' => 10,	'regexp' => array('#\[email=?(.*?)?\](.*?)\[/email\]#uise' => "\$this->validate_email('\$1', '\$2')")),			'flash'			=> array('bbcode_id' => 11,	'regexp' => array('#\[flash=([0-9]+),([0-9]+)\](.*?)\[/flash\]#uie' => "\$this->bbcode_flash('\$1', '\$2', '\$3')"))		);		// Zero the parsed items array		$this->parsed_items = array();		foreach ($this->bbcodes as $tag => $bbcode_data)		{			$this->parsed_items[$tag] = 0;		}		if (!$allow_custom_bbcode)		{			return;		}		if (!is_array($rowset))		{			global $db;			$rowset = array();			$sql = 'SELECT *				FROM ' . BBCODES_TABLE;			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$rowset[] = $row;			}			$db->sql_freeresult($result);		}		foreach ($rowset as $row)		{			$this->bbcodes[$row['bbcode_tag']] = array(				'bbcode_id'	=> (int) $row['bbcode_id'],				'regexp'	=> array($row['first_pass_match'] => str_replace('$uid', $this->bbcode_uid, $row['first_pass_replace']))			);		}	}	/**	* Making some pre-checks for bbcodes as well as increasing the number of parsed items	*/	function check_bbcode($bbcode, &$in)	{		// when using the /e modifier, preg_replace slashes double-quotes but does not		// seem to slash anything else		$in = str_replace("\r\n", "\n", str_replace('\"', '"', $in));		// Trimming here to make sure no empty bbcodes are parsed accidently		if (trim($in) == '')		{			return false;		}		$this->parsed_items[$bbcode]++;		return true;	}	/**	* Transform some characters in valid bbcodes	*/	function bbcode_specialchars($text)	{		$str_from = array('<', '>', '[', ']', '.', ':');		$str_to = array('&lt;', '&gt;', '&#91;', '&#93;', '&#46;', '&#58;');		return str_replace($str_from, $str_to, $text);	}	/**	* Parse size tag	*/	function bbcode_size($stx, $in)	{		global $user, $config;		if (!$this->check_bbcode('size', $in))		{			return $in;		}		if ($config['max_' . $this->mode . '_font_size'] && $config['max_' . $this->mode . '_font_size'] < $stx)		{			$this->warn_msg[] = sprintf($user->lang['MAX_FONT_SIZE_EXCEEDED'], $config['max_' . $this->mode . '_font_size']);			return '[size=' . $stx . ']' . $in . '[/size]';		}		// Do not allow size=0		if ($stx <= 0)		{			return '[size=' . $stx . ']' . $in . '[/size]';		}		return '[size=' . $stx . ':' . $this->bbcode_uid . ']' . $in . '[/size:' . $this->bbcode_uid . ']';	}	/**	* Parse color tag	*/	function bbcode_color($stx, $in)	{		if (!$this->check_bbcode('color', $in))		{			return $in;		}		return '[color=' . $stx . ':' . $this->bbcode_uid . ']' . $in . '[/color:' . $this->bbcode_uid . ']';	}	/**	* Parse u tag	*/	function bbcode_underline($in)	{		if (!$this->check_bbcode('u', $in))		{			return $in;		}		return '[u:' . $this->bbcode_uid . ']' . $in . '[/u:' . $this->bbcode_uid . ']';	}	/**	* Parse b tag	*/	function bbcode_strong($in)	{		if (!$this->check_bbcode('b', $in))		{			return $in;		}		return '[b:' . $this->bbcode_uid . ']' . $in . '[/b:' . $this->bbcode_uid . ']';	}	/**	* Parse i tag	*/	function bbcode_italic($in)	{		if (!$this->check_bbcode('i', $in))		{			return $in;		}		return '[i:' . $this->bbcode_uid . ']' . $in . '[/i:' . $this->bbcode_uid . ']';	}	/**	* Parse img tag	*/	function bbcode_img($in)	{		global $user, $config;		if (!$this->check_bbcode('img', $in))		{			return $in;		}		$in = trim($in);		$error = false;		$in = str_replace(' ', '%20', $in);		// Checking urls		if (!preg_match('#^' . get_preg_expression('url') . '$#i', $in) && !preg_match('#^' . get_preg_expression('www_url') . '$#i', $in))		{			return '[img]' . $in . '[/img]';		}		// Try to cope with a common user error... not specifying a protocol but only a subdomain		if (!preg_match('#^[a-z0-9]+://#i', $in))		{			$in = 'http://' . $in;		}		if ($config['max_' . $this->mode . '_img_height'] || $config['max_' . $this->mode . '_img_width'])		{			$stats = @getimagesize(htmlspecialchars_decode($in));			if ($stats === false)			{				$error = true;				$this->warn_msg[] = $user->lang['UNABLE_GET_IMAGE_SIZE'];			}			else			{				if ($config['max_' . $this->mode . '_img_height'] && $config['max_' . $this->mode . '_img_height'] < $stats[1])				{					$error = true;					$this->warn_msg[] = sprintf($user->lang['MAX_IMG_HEIGHT_EXCEEDED'], $config['max_' . $this->mode . '_img_height']);				}				if ($config['max_' . $this->mode . '_img_width'] && $config['max_' . $this->mode . '_img_width'] < $stats[0])				{					$error = true;					$this->warn_msg[] = sprintf($user->lang['MAX_IMG_WIDTH_EXCEEDED'], $config['max_' . $this->mode . '_img_width']);				}			}		}		if ($error || $this->path_in_domain($in))		{			return '[img]' . $in . '[/img]';		}		return '[img:' . $this->bbcode_uid . ']' . $this->bbcode_specialchars($in) . '[/img:' . $this->bbcode_uid . ']';	}	/**	* Parse flash tag	*/	function bbcode_flash($width, $height, $in)	{		global $user, $config;		if (!$this->check_bbcode('flash', $in))		{			return $in;		}		$in = trim($in);		$error = false;		// Do not allow 0-sizes generally being entered		if ($width <= 0 || $height <= 0)		{			return '[flash=' . $width . ',' . $height . ']' . $in . '[/flash]';		}		$in = str_replace(' ', '%20', $in);		// Make sure $in is a URL.		if (!preg_match('#^' . get_preg_expression('url') . '$#i', $in) &&			!preg_match('#^' . get_preg_expression('www_url') . '$#i', $in))		{			return '[flash=' . $width . ',' . $height . ']' . $in . '[/flash]';		}		// Apply the same size checks on flash files as on images		if ($config['max_' . $this->mode . '_img_height'] || $config['max_' . $this->mode . '_img_width'])		{			if ($config['max_' . $this->mode . '_img_height'] && $config['max_' . $this->mode . '_img_height'] < $height)			{				$error = true;				$this->warn_msg[] = sprintf($user->lang['MAX_FLASH_HEIGHT_EXCEEDED'], $config['max_' . $this->mode . '_img_height']);			}			if ($config['max_' . $this->mode . '_img_width'] && $config['max_' . $this->mode . '_img_width'] < $width)			{				$error = true;				$this->warn_msg[] = sprintf($user->lang['MAX_FLASH_WIDTH_EXCEEDED'], $config['max_' . $this->mode . '_img_width']);			}		}		if ($error || $this->path_in_domain($in))		{			return '[flash=' . $width . ',' . $height . ']' . $in . '[/flash]';		}		return '[flash=' . $width . ',' . $height . ':' . $this->bbcode_uid . ']' . $this->bbcode_specialchars($in) . '[/flash:' . $this->bbcode_uid . ']';	}	/**	* Parse inline attachments [ia]	*/	function bbcode_attachment($stx, $in)	{		if (!$this->check_bbcode('attachment', $in))		{			return $in;		}		return '[attachment=' . $stx . ':' . $this->bbcode_uid . ']<!-- ia' . $stx . ' -->' . trim($in) . '<!-- ia' . $stx . ' -->[/attachment:' . $this->bbcode_uid . ']';	}	/**	* Parse code text from code tag	* @access private	*/	function bbcode_parse_code($stx, &$code)	{		switch (strtolower($stx))		{			case 'php':				$remove_tags = false;				$str_from = array('&lt;', '&gt;', '&#91;', '&#93;', '&#46;', '&#58;', '&#058;');				$str_to = array('<', '>', '[', ']', '.', ':', ':');				$code = str_replace($str_from, $str_to, $code);				if (!preg_match('/\<\?.*?\?\>/is', $code))				{					$remove_tags = true;					$code = "<?php $code ?>";				}				$conf = array('highlight.bg', 'highlight.comment', 'highlight.default', 'highlight.html', 'highlight.keyword', 'highlight.string');				foreach ($conf as $ini_var)				{					@ini_set($ini_var, str_replace('highlight.', 'syntax', $ini_var));				}				// Because highlight_string is specialcharing the text (but we already did this before), we have to reverse this in order to get correct results				$code = htmlspecialchars_decode($code);				$code = highlight_string($code, true);				$str_from = array('<span style="color: ', '<font color="syntax', '</font>', '<code>', '</code>','[', ']', '.', ':');				$str_to = array('<span class="', '<span class="syntax', '</span>', '', '', '&#91;', '&#93;', '&#46;', '&#58;');				if ($remove_tags)				{					$str_from[] = '<span class="syntaxdefault">&lt;?php </span>';					$str_to[] = '';					$str_from[] = '<span class="syntaxdefault">&lt;?php&nbsp;';					$str_to[] = '<span class="syntaxdefault">';				}				$code = str_replace($str_from, $str_to, $code);				$code = preg_replace('#^(<span class="[a-z_]+">)\n?(.*?)\n?(</span>)$#is', '$1$2$3', $code);				if ($remove_tags)				{					$code = preg_replace('#(<span class="[a-z]+">)?\?&gt;(</span>)#', '$1&nbsp;$2', $code);				}				$code = preg_replace('#^<span class="[a-z]+"><span class="([a-z]+)">(.*)</span></span>#s', '<span class="$1">$2</span>', $code);				$code = preg_replace('#(?:\s++|&nbsp;)*+</span>$#u', '</span>', $code);				// remove newline at the end				if (!empty($code) && substr($code, -1) == "\n")				{					$code = substr($code, 0, -1);				}				return "[code=$stx:" . $this->bbcode_uid . ']' . $code . '[/code:' . $this->bbcode_uid . ']';			break;			default:				return '[code:' . $this->bbcode_uid . ']' . $this->bbcode_specialchars($code) . '[/code:' . $this->bbcode_uid . ']';			break;		}	}	/**	* Parse code tag	* Expects the argument to start right after the opening [code] tag and to end with [/code]	*/	function bbcode_code($stx, $in)	{		if (!$this->check_bbcode('code', $in))		{			return $in;		}		// We remove the hardcoded elements from the code block here because it is not used in code blocks		// Having it here saves us one preg_replace per message containing [code] blocks		// Additionally, magic url parsing should go after parsing bbcodes, but for safety those are stripped out too...		$htm_match = get_preg_expression('bbcode_htm');		unset($htm_match[4], $htm_match[5]);		$htm_replace = array('\1', '\1', '\2', '\1');		$out = $code_block = '';		$open = 1;		while ($in)		{			// Determine position and tag length of next code block			preg_match('#(.*?)(\[code(?:=([a-z]+))?\])(.+)#is', $in, $buffer);			$pos = (isset($buffer[1])) ? strlen($buffer[1]) : false;			$tag_length = (isset($buffer[2])) ? strlen($buffer[2]) : false;			// Determine position of ending code tag			$pos2 = stripos($in, '[/code]');			// Which is the next block, ending code or code block			if ($pos !== false && $pos < $pos2)			{				// Open new block				if (!$open)				{					$out .= substr($in, 0, $pos);					$in = substr($in, $pos);					$stx = (isset($buffer[3])) ? $buffer[3] : '';					$code_block = '';				}				else				{					// Already opened block, just append to the current block					$code_block .= substr($in, 0, $pos) . ((isset($buffer[2])) ? $buffer[2] : '');					$in = substr($in, $pos);				}				$in = substr($in, $tag_length);				$open++;			}			else			{				// Close the block				if ($open == 1)				{					$code_block .= substr($in, 0, $pos2);					$code_block = preg_replace($htm_match, $htm_replace, $code_block);					// Parse this code block					$out .= $this->bbcode_parse_code($stx, $code_block);					$code_block = '';					$open--;				}				else if ($open)				{					// Close one open tag... add to the current code block					$code_block .= substr($in, 0, $pos2 + 7);					$open--;				}				else				{					// end code without opening code... will be always outside code block					$out .= substr($in, 0, $pos2 + 7);				}				$in = substr($in, $pos2 + 7);			}		}		// if now $code_block has contents we need to parse the remaining code while removing the last closing tag to match up.		if ($code_block)		{			$code_block = substr($code_block, 0, -7);			$code_block = preg_replace($htm_match, $htm_replace, $code_block);			$out .= $this->bbcode_parse_code($stx, $code_block);		}		return $out;	}	/**	* Parse list bbcode	* Expects the argument to start with a tag	*/	function bbcode_parse_list($in)	{		if (!$this->check_bbcode('list', $in))		{			return $in;		}		// $tok holds characters to stop at. Since the string starts with a '[' we'll get everything up to the first ']' which should be the opening [list] tag		$tok = ']';		$out = '[';		// First character is [		$in = substr($in, 1);		$list_end_tags = $item_end_tags = array();		do		{			$pos = strlen($in);			for ($i = 0, $tok_len = strlen($tok); $i < $tok_len; ++$i)			{				$tmp_pos = strpos($in, $tok[$i]);				if ($tmp_pos !== false && $tmp_pos < $pos)				{					$pos = $tmp_pos;				}			}			$buffer = substr($in, 0, $pos);			$tok = $in[$pos];			$in = substr($in, $pos + 1);			if ($tok == ']')			{				// if $tok is ']' the buffer holds a tag				if (strtolower($buffer) == '/list' && sizeof($list_end_tags))				{					// valid [/list] tag, check nesting so that we don't hit false positives					if (sizeof($item_end_tags) && sizeof($item_end_tags) >= sizeof($list_end_tags))					{						// current li tag has not been closed						$out = preg_replace('/\n?\[$/', '[', $out) . array_pop($item_end_tags) . '][';					}					$out .= array_pop($list_end_tags) . ']';					$tok = '[';				}				else if (preg_match('#^list(=[0-9a-z]+)?$#i', $buffer, $m))				{					// sub-list, add a closing tag					if (empty($m[1]) || preg_match('/^=(?:disc|square|circle)$/i', $m[1]))					{						array_push($list_end_tags, '/list:u:' . $this->bbcode_uid);					}					else					{						array_push($list_end_tags, '/list:o:' . $this->bbcode_uid);					}					$out .= 'list' . substr($buffer, 4) . ':' . $this->bbcode_uid . ']';					$tok = '[';				}				else				{					if (($buffer == '*' || substr($buffer, -2) == '[*') && sizeof($list_end_tags))					{						// the buffer holds a bullet tag and we have a [list] tag open						if (sizeof($item_end_tags) >= sizeof($list_end_tags))						{							if (substr($buffer, -2) == '[*')							{								$out .= substr($buffer, 0, -2) . '[';							}							// current li tag has not been closed							if (preg_match('/\n\[$/', $out, $m))							{								$out = preg_replace('/\n\[$/', '[', $out);								$buffer = array_pop($item_end_tags) . "]\n[*:" . $this->bbcode_uid;							}							else							{								$buffer = array_pop($item_end_tags) . '][*:' . $this->bbcode_uid;							}						}						else						{							$buffer = '*:' . $this->bbcode_uid;						}						$item_end_tags[] = '/*:m:' . $this->bbcode_uid;					}					else if ($buffer == '/*')					{						array_pop($item_end_tags);						$buffer = '/*:' . $this->bbcode_uid;					}					$out .= $buffer . $tok;					$tok = '[]';				}			}			else			{				// Not within a tag, just add buffer to the return string				$out .= $buffer . $tok;				$tok = ($tok == '[') ? ']' : '[]';			}		}		while ($in);		// do we have some tags open? close them now		if (sizeof($item_end_tags))		{			$out .= '[' . implode('][', $item_end_tags) . ']';		}		if (sizeof($list_end_tags))		{			$out .= '[' . implode('][', $list_end_tags) . ']';		}		return $out;	}	/**	* Parse quote bbcode	* Expects the argument to start with a tag	*/	function bbcode_quote($in)	{		global $config, $user;		/**		* If you change this code, make sure the cases described within the following reports are still working:		* #3572 - [quote="[test]test"]test [ test[/quote] - (correct: parsed)		* #14667 - [quote]test[/quote] test ] and [ test [quote]test[/quote] (correct: parsed)		* #14770 - [quote="["]test[/quote] (correct: parsed)		* [quote="[i]test[/i]"]test[/quote] (correct: parsed)		* [quote="[quote]test[/quote]"]test[/quote] (correct: parsed - Username displayed as [quote]test[/quote])		* #20735 - [quote]test[/[/b]quote] test [/quote][/quote] test - (correct: quoted: "test[/[/b]quote] test" / non-quoted: "[/quote] test" - also failed if layout distorted)		* #40565 - [quote="a"]a[/quote][quote="a]a[/quote] (correct: first quote tag parsed, second quote tag unparsed)		*/		$in = str_replace("\r\n", "\n", str_replace('\"', '"', trim($in)));		if (!$in)		{			return '';		}		// To let the parser not catch tokens within quote_username quotes we encode them before we start this...		$in = preg_replace('#quote=&quot;(.*?)&quot;\]#ie', "'quote=&quot;' . str_replace(array('[', ']', '\\\"'), array('&#91;', '&#93;', '\"'), '\$1') . '&quot;]'", $in);		$tok = ']';		$out = '[';		$in = substr($in, 1);		$close_tags = $error_ary = array();		$buffer = '';		do		{			$pos = strlen($in);			for ($i = 0, $tok_len = strlen($tok); $i < $tok_len; ++$i)			{				$tmp_pos = strpos($in, $tok[$i]);				if ($tmp_pos !== false && $tmp_pos < $pos)				{					$pos = $tmp_pos;				}			}			$buffer .= substr($in, 0, $pos);			$tok = $in[$pos];			$in = substr($in, $pos + 1);			if ($tok == ']')			{				if (strtolower($buffer) == '/quote' && sizeof($close_tags) && substr($out, -1, 1) == '[')				{					// we have found a closing tag					$out .= array_pop($close_tags) . ']';					$tok = '[';					$buffer = '';					/* Add space at the end of the closing tag if not happened before to allow following urls/smilies to be parsed correctly					* Do not try to think for the user. :/ Do not parse urls/smilies if there is no space - is the same as with other bbcodes too.					* Also, we won't have any spaces within $in anyway, only adding up spaces -> #10982					if (!$in || $in[0] !== ' ')					{						$out .= ' ';					}*/				}				else if (preg_match('#^quote(?:=&quot;(.*?)&quot;)?$#is', $buffer, $m) && substr($out, -1, 1) == '[')				{					$this->parsed_items['quote']++;					// the buffer holds a valid opening tag					if ($config['max_quote_depth'] && sizeof($close_tags) >= $config['max_quote_depth'])					{						// there are too many nested quotes						$error_ary['quote_depth'] = sprintf($user->lang['QUOTE_DEPTH_EXCEEDED'], $config['max_quote_depth']);						$out .= $buffer . $tok;						$tok = '[]';						$buffer = '';						continue;					}					array_push($close_tags, '/quote:' . $this->bbcode_uid);					if (isset($m[1]) && $m[1])					{						$username = str_replace(array('&#91;', '&#93;'), array('[', ']'), $m[1]);						$username = preg_replace('#\[(?!b|i|u|color|url|email|/b|/i|/u|/color|/url|/email)#iU', '&#91;$1', $username);						$end_tags = array();						$error = false;						preg_match_all('#\[((?:/)?(?:[a-z]+))#i', $username, $tags);						foreach ($tags[1] as $tag)						{							if ($tag[0] != '/')							{								$end_tags[] = '/' . $tag;							}							else							{								$end_tag = array_pop($end_tags);								$error = ($end_tag != $tag) ? true : false;							}						}						if ($error)						{							$username = $m[1];						}						$out .= 'quote=&quot;' . $username . '&quot;:' . $this->bbcode_uid . ']';					}					else					{						$out .= 'quote:' . $this->bbcode_uid . ']';					}					$tok = '[';					$buffer = '';				}				else if (preg_match('#^quote=&quot;(.*?)#is', $buffer, $m))				{					// the buffer holds an invalid opening tag					$buffer .= ']';				}				else				{					$out .= $buffer . $tok;					$tok = '[]';					$buffer = '';				}			}			else			{/***				Old quote code working fine, but having errors listed in bug #3572**				$out .= $buffer . $tok;*				$tok = ($tok == '[') ? ']' : '[]';*				$buffer = '';*/				$out .= $buffer . $tok;				if ($tok == '[')				{					// Search the text for the next tok... if an ending quote comes first, then change tok to []					$pos1 = stripos($in, '[/quote');					// If the token ] comes first, we change it to ]					$pos2 = strpos($in, ']');					// If the token [ comes first, we change it to [					$pos3 = strpos($in, '[');					if ($pos1 !== false && ($pos2 === false || $pos1 < $pos2) && ($pos3 === false || $pos1 < $pos3))					{						$tok = '[]';					}					else if ($pos3 !== false && ($pos2 === false || $pos3 < $pos2))					{						$tok = '[';					}					else					{						$tok = ']';					}				}				else				{					$tok = '[]';				}				$buffer = '';			}		}		while ($in);		$out .= $buffer;		if (sizeof($close_tags))		{			$out .= '[' . implode('][', $close_tags) . ']';		}		foreach ($error_ary as $error_msg)		{			$this->warn_msg[] = $error_msg;		}		return $out;	}	/**	* Validate email	*/	function validate_email($var1, $var2)	{		$var1 = str_replace("\r\n", "\n", str_replace('\"', '"', trim($var1)));		$var2 = str_replace("\r\n", "\n", str_replace('\"', '"', trim($var2)));		$txt = $var2;		$email = ($var1) ? $var1 : $var2;		$validated = true;		if (!preg_match('/^' . get_preg_expression('email') . '$/i', $email))		{			$validated = false;		}		if (!$validated)		{			return '[email' . (($var1) ? "=$var1" : '') . ']' . $var2 . '[/email]';		}		$this->parsed_items['email']++;		if ($var1)		{			$retval = '[email=' . $this->bbcode_specialchars($email) . ':' . $this->bbcode_uid . ']' . $txt . '[/email:' . $this->bbcode_uid . ']';		}		else		{			$retval = '[email:' . $this->bbcode_uid . ']' . $this->bbcode_specialchars($email) . '[/email:' . $this->bbcode_uid . ']';		}		return $retval;	}	/**	* Validate url	*	* @param string $var1 optional url parameter for url bbcode: [url(=$var1)]$var2[/url]	* @param string $var2 url bbcode content: [url(=$var1)]$var2[/url]	*/	function validate_url($var1, $var2)	{		global $config;		$var1 = str_replace("\r\n", "\n", str_replace('\"', '"', trim($var1)));		$var2 = str_replace("\r\n", "\n", str_replace('\"', '"', trim($var2)));		$url = ($var1) ? $var1 : $var2;		if ($var1 && !$var2)		{			$var2 = $var1;		}		if (!$url)		{			return '[url' . (($var1) ? '=' . $var1 : '') . ']' . $var2 . '[/url]';		}		$valid = false;		$url = str_replace(' ', '%20', $url);		// Checking urls		if (preg_match('#^' . get_preg_expression('url') . '$#i', $url) ||			preg_match('#^' . get_preg_expression('www_url') . '$#i', $url) ||			preg_match('#^' . preg_quote(generate_board_url(), '#') . get_preg_expression('relative_url') . '$#i', $url))		{			$valid = true;		}		if ($valid)		{			$this->parsed_items['url']++;			// if there is no scheme, then add http schema			if (!preg_match('#^[a-z][a-z\d+\-.]*:/{2}#i', $url))			{				$url = 'http://' . $url;			}			// Is this a link to somewhere inside this board? If so then remove the session id from the url			if (strpos($url, generate_board_url()) !== false && strpos($url, 'sid=') !== false)			{				$url = preg_replace('/(&amp;|\?)sid=[0-9a-f]{32}&amp;/', '\1', $url);				$url = preg_replace('/(&amp;|\?)sid=[0-9a-f]{32}$/', '', $url);				$url = append_sid($url);			}			return ($var1) ? '[url=' . $this->bbcode_specialchars($url) . ':' . $this->bbcode_uid . ']' . $var2 . '[/url:' . $this->bbcode_uid . ']' : '[url:' . $this->bbcode_uid . ']' . $this->bbcode_specialchars($url) . '[/url:' . $this->bbcode_uid . ']';		}		return '[url' . (($var1) ? '=' . $var1 : '') . ']' . $var2 . '[/url]';	}	/**	* Check if url is pointing to this domain/script_path/php-file	*	* @param string $url the url to check	* @return true if the url is pointing to this domain/script_path/php-file, false if not	*	* @access private	*/	function path_in_domain($url)	{		global $config, $phpEx, $user;		if ($config['force_server_vars'])		{			$check_path = $config['script_path'];		}		else		{			$check_path = ($user->page['root_script_path'] != '/') ? substr($user->page['root_script_path'], 0, -1) : '/';		}		// Is the user trying to link to a php file in this domain and script path?		if (strpos($url, ".{$phpEx}") !== false && strpos($url, $check_path) !== false)		{			$server_name = $user->host;			// Forcing server vars is the only way to specify/override the protocol			if ($config['force_server_vars'] || !$server_name)			{				$server_name = $config['server_name'];			}			// Check again in correct order...			$pos_ext = strpos($url, ".{$phpEx}");			$pos_path = strpos($url, $check_path);			$pos_domain = strpos($url, $server_name);			if ($pos_domain !== false && $pos_path >= $pos_domain && $pos_ext >= $pos_path)			{				// Ok, actually we allow linking to some files (this may be able to be extended in some way later...)				if (strpos($url, '/' . $check_path . '/download/file.' . $phpEx) !== 0)				{					return false;				}				return true;			}		}		return false;	}}/*** Main message parser for posting, pm, etc. takes raw message* and parses it for attachments, bbcode and smilies* @package phpBB3*/class parse_message extends bbcode_firstpass{	var $attachment_data = array();	var $filename_data = array();	// Helps ironing out user error	var $message_status = '';	var $allow_img_bbcode = true;	var $allow_flash_bbcode = true;	var $allow_quote_bbcode = true;	var $allow_url_bbcode = true;	var $mode;	/**	* Init - give message here or manually	*/	function parse_message($message = '')	{		// Init BBCode UID		$this->bbcode_uid = substr(base_convert(unique_id(), 16, 36), 0, BBCODE_UID_LEN);		$this->message = $message;	}	/**	* Parse Message	*/	function parse($allow_bbcode, $allow_magic_url, $allow_smilies, $allow_img_bbcode = true, $allow_flash_bbcode = true, $allow_quote_bbcode = true, $allow_url_bbcode = true, $update_this_message = true, $mode = 'post')	{		global $config, $db, $user;		$this->mode = $mode;		foreach (array('chars', 'smilies', 'urls', 'font_size', 'img_height', 'img_width') as $key)		{			if (!isset($config['max_' . $mode . '_' . $key]))			{				$config['max_' . $mode . '_' . $key] = 0;			}		}		$this->allow_img_bbcode = $allow_img_bbcode;		$this->allow_flash_bbcode = $allow_flash_bbcode;		$this->allow_quote_bbcode = $allow_quote_bbcode;		$this->allow_url_bbcode = $allow_url_bbcode;		// If false, then $this->message won't be altered, the text will be returned instead.		if (!$update_this_message)		{			$tmp_message = $this->message;			$return_message = &$this->message;		}		if ($this->message_status == 'display')		{			$this->decode_message();		}		// Do some general 'cleanup' first before processing message,		// e.g. remove excessive newlines(?), smilies(?)		$match = array('#(script|about|applet|activex|chrome):#i');		$replace = array("\\1&#058;");		$this->message = preg_replace($match, $replace, trim($this->message));		// Store message length...		$message_length = ($mode == 'post') ? utf8_strlen($this->message) : utf8_strlen(preg_replace('#\[\/?[a-z\*\+\-]+(=[\S]+)?\]#ius', ' ', $this->message));		// Maximum message length check. 0 disables this check completely.		if ((int) $config['max_' . $mode . '_chars'] > 0 && $message_length > (int) $config['max_' . $mode . '_chars'])		{			$this->warn_msg[] = sprintf($user->lang['TOO_MANY_CHARS_' . strtoupper($mode)], $message_length, (int) $config['max_' . $mode . '_chars']);			return (!$update_this_message) ? $return_message : $this->warn_msg;		}		// Minimum message length check for post only		if ($mode === 'post')		{			if (!$message_length || $message_length < (int) $config['min_post_chars'])			{				$this->warn_msg[] = (!$message_length) ? $user->lang['TOO_FEW_CHARS'] : sprintf($user->lang['TOO_FEW_CHARS_LIMIT'], $message_length, (int) $config['min_post_chars']);				return (!$update_this_message) ? $return_message : $this->warn_msg;			}		}		// Prepare BBcode (just prepares some tags for better parsing)		if ($allow_bbcode && strpos($this->message, '[') !== false)		{			$this->bbcode_init();			$disallow = array('img', 'flash', 'quote', 'url');			foreach ($disallow as $bool)			{				if (!${'allow_' . $bool . '_bbcode'})				{					$this->bbcodes[$bool]['disabled'] = true;				}			}			$this->prepare_bbcodes();		}		// Parse smilies		if ($allow_smilies)		{			$this->smilies($config['max_' . $mode . '_smilies']);		}		$num_urls = 0;		// Parse BBCode		if ($allow_bbcode && strpos($this->message, '[') !== false)		{			$this->parse_bbcode();			$num_urls += $this->parsed_items['url'];		}		// Parse URL's		if ($allow_magic_url)		{			$this->magic_url(generate_board_url());			if ($config['max_' . $mode . '_urls'])			{				$num_urls += preg_match_all('#\<!-- ([lmwe]) --\>.*?\<!-- \1 --\>#', $this->message, $matches);			}		}		// Check for "empty" message. We do not check here for maximum length, because bbcode, smilies, etc. can add to the length.		// The maximum length check happened before any parsings.		if ($mode === 'post' && utf8_clean_string($this->message) === '')		{			$this->warn_msg[] = $user->lang['TOO_FEW_CHARS'];			return (!$update_this_message) ? $return_message : $this->warn_msg;		}		// Check number of links		if ($config['max_' . $mode . '_urls'] && $num_urls > $config['max_' . $mode . '_urls'])		{			$this->warn_msg[] = sprintf($user->lang['TOO_MANY_URLS'], $config['max_' . $mode . '_urls']);			return (!$update_this_message) ? $return_message : $this->warn_msg;		}		if (!$update_this_message)		{			unset($this->message);			$this->message = $tmp_message;			return $return_message;		}		$this->message_status = 'parsed';		return false;	}	/**	* Formatting text for display	*/	function format_display($allow_bbcode, $allow_magic_url, $allow_smilies, $update_this_message = true)	{		// If false, then the parsed message get returned but internal message not processed.		if (!$update_this_message)		{			$tmp_message = $this->message;			$return_message = &$this->message;		}		if ($this->message_status == 'plain')		{			// Force updating message - of course.			$this->parse($allow_bbcode, $allow_magic_url, $allow_smilies, $this->allow_img_bbcode, $this->allow_flash_bbcode, $this->allow_quote_bbcode, $this->allow_url_bbcode, true);		}		// Replace naughty words such as farty pants		$this->message = censor_text($this->message);		// Parse BBcode		if ($allow_bbcode)		{			$this->bbcode_cache_init();			// We are giving those parameters to be able to use the bbcode class on its own			$this->bbcode_second_pass($this->message, $this->bbcode_uid);		}		$this->message = bbcode_nl2br($this->message);		$this->message = smiley_text($this->message, !$allow_smilies);		if (!$update_this_message)		{			unset($this->message);			$this->message = $tmp_message;			return $return_message;		}		$this->message_status = 'display';		return false;	}	/**	* Decode message to be placed back into form box	*/	function decode_message($custom_bbcode_uid = '', $update_this_message = true)	{		// If false, then the parsed message get returned but internal message not processed.		if (!$update_this_message)		{			$tmp_message = $this->message;			$return_message = &$this->message;		}		($custom_bbcode_uid) ? decode_message($this->message, $custom_bbcode_uid) : decode_message($this->message, $this->bbcode_uid);		if (!$update_this_message)		{			unset($this->message);			$this->message = $tmp_message;			return $return_message;		}		$this->message_status = 'plain';		return false;	}	/**	* Replace magic urls of form http://xxx.xxx., www.xxx. and xxx@xxx.xxx.	* Cuts down displayed size of link if over 50 chars, turns absolute links	* into relative versions when the server/script path matches the link	*/	function magic_url($server_url)	{		// We use the global make_clickable function		$this->message = make_clickable($this->message, $server_url);	}	/**	* Parse Smilies	*/	function smilies($max_smilies = 0)	{		global $db, $user;		static $match;		static $replace;		// See if the static arrays have already been filled on an earlier invocation		if (!is_array($match))		{			$match = $replace = array();			// NOTE: obtain_* function? chaching the table contents?			// For now setting the ttl to 10 minutes			switch ($db->sql_layer)			{				case 'mssql':				case 'mssql_odbc':				case 'mssqlnative':					$sql = 'SELECT *						FROM ' . SMILIES_TABLE . '						ORDER BY LEN(code) DESC';				break;				case 'firebird':					$sql = 'SELECT *						FROM ' . SMILIES_TABLE . '						ORDER BY CHAR_LENGTH(code) DESC';				break;				// LENGTH supported by MySQL, IBM DB2, Oracle and Access for sure...				default:					$sql = 'SELECT *						FROM ' . SMILIES_TABLE . '						ORDER BY LENGTH(code) DESC';				break;			}			$result = $db->sql_query($sql, 600);			while ($row = $db->sql_fetchrow($result))			{				if (empty($row['code']))				{					continue;				}				// (assertion)				$match[] = preg_quote($row['code'], '#');				$replace[] = '<!-- s' . $row['code'] . ' --><img src="{SMILIES_PATH}/' . $row['smiley_url'] . '" alt="' . $row['code'] . '" title="' . $row['emotion'] . '" /><!-- s' . $row['code'] . ' -->';			}			$db->sql_freeresult($result);		}		if (sizeof($match))		{			if ($max_smilies)			{				// 'u' modifier has been added to correctly parse smilies within unicode strings				// For details: http://tracker.phpbb.com/browse/PHPBB3-10117				$num_matches = preg_match_all('#(?<=^|[\n .])(?:' . implode('|', $match) . ')(?![^<>]*>)#u', $this->message, $matches);				unset($matches);				if ($num_matches !== false && $num_matches > $max_smilies)				{					$this->warn_msg[] = sprintf($user->lang['TOO_MANY_SMILIES'], $max_smilies);					return;				}			}			// Make sure the delimiter # is added in front and at the end of every element within $match			// 'u' modifier has been added to correctly parse smilies within unicode strings			// For details: http://tracker.phpbb.com/browse/PHPBB3-10117			$this->message = trim(preg_replace(explode(chr(0), '#(?<=^|[\n .])' . implode('(?![^<>]*>)#u' . chr(0) . '#(?<=^|[\n .])', $match) . '(?![^<>]*>)#u'), $replace, $this->message));		}	}	/**	* Parse Attachments	*/	function parse_attachments($form_name, $mode, $forum_id, $submit, $preview, $refresh, $is_message = false)	{		global $config, $auth, $user, $phpbb_root_path, $phpEx, $db;		$error = array();		$num_attachments = sizeof($this->attachment_data);		$this->filename_data['filecomment'] = utf8_normalize_nfc(request_var('filecomment', '', true));		$upload_file = (isset($_FILES[$form_name]) && $_FILES[$form_name]['name'] != 'none' && trim($_FILES[$form_name]['name'])) ? true : false;		$add_file		= (isset($_POST['add_file'])) ? true : false;		$delete_file	= (isset($_POST['delete_file'])) ? true : false;		// First of all adjust comments if changed		$actual_comment_list = utf8_normalize_nfc(request_var('comment_list', array(''), true));		foreach ($actual_comment_list as $comment_key => $comment)		{			if (!isset($this->attachment_data[$comment_key]))			{				continue;			}			if ($this->attachment_data[$comment_key]['attach_comment'] != $actual_comment_list[$comment_key])			{				$this->attachment_data[$comment_key]['attach_comment'] = $actual_comment_list[$comment_key];			}		}		$cfg = array();		$cfg['max_attachments'] = ($is_message) ? $config['max_attachments_pm'] : $config['max_attachments'];		$forum_id = ($is_message) ? 0 : $forum_id;		if ($submit && in_array($mode, array('post', 'reply', 'quote', 'edit')) && $upload_file)		{			if ($num_attachments < $cfg['max_attachments'] || $auth->acl_get('a_') || $auth->acl_get('m_', $forum_id))			{				$filedata = upload_attachment($form_name, $forum_id, false, '', $is_message);				$error = $filedata['error'];				if ($filedata['post_attach'] && !sizeof($error))				{					$sql_ary = array(						'physical_filename'	=> $filedata['physical_filename'],						'attach_comment'	=> $this->filename_data['filecomment'],						'real_filename'		=> $filedata['real_filename'],						'extension'			=> $filedata['extension'],						'mimetype'			=> $filedata['mimetype'],						'filesize'			=> $filedata['filesize'],						'filetime'			=> $filedata['filetime'],						'thumbnail'			=> $filedata['thumbnail'],						'is_orphan'			=> 1,						'in_message'		=> ($is_message) ? 1 : 0,						'poster_id'			=> $user->data['user_id'],					);					$db->sql_query('INSERT INTO ' . ATTACHMENTS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));					$new_entry = array(						'attach_id'		=> $db->sql_nextid(),						'is_orphan'		=> 1,						'real_filename'	=> $filedata['real_filename'],						'attach_comment'=> $this->filename_data['filecomment'],					);					$this->attachment_data = array_merge(array(0 => $new_entry), $this->attachment_data);					$this->message = preg_replace('#\[attachment=([0-9]+)\](.*?)\[\/attachment\]#e', "'[attachment='.(\\1 + 1).']\\2[/attachment]'", $this->message);					$this->filename_data['filecomment'] = '';					// This Variable is set to false here, because Attachments are entered into the					// Database in two modes, one if the id_list is 0 and the second one if post_attach is true					// Since post_attach is automatically switched to true if an Attachment got added to the filesystem,					// but we are assigning an id of 0 here, we have to reset the post_attach variable to false.					//					// This is very relevant, because it could happen that the post got not submitted, but we do not					// know this circumstance here. We could be at the posting page or we could be redirected to the entered					// post. :)					$filedata['post_attach'] = false;				}			}			else			{				$error[] = sprintf($user->lang['TOO_MANY_ATTACHMENTS'], $cfg['max_attachments']);			}		}		if ($preview || $refresh || sizeof($error))		{			// Perform actions on temporary attachments			if ($delete_file)			{				include_once($phpbb_root_path . 'includes/functions_admin.' . $phpEx);				$index = array_keys(request_var('delete_file', array(0 => 0)));				$index = (!empty($index)) ? $index[0] : false;				if ($index !== false && !empty($this->attachment_data[$index]))				{					// delete selected attachment					if ($this->attachment_data[$index]['is_orphan'])					{						$sql = 'SELECT attach_id, physical_filename, thumbnail							FROM ' . ATTACHMENTS_TABLE . '							WHERE attach_id = ' . (int) $this->attachment_data[$index]['attach_id'] . '								AND is_orphan = 1								AND poster_id = ' . $user->data['user_id'];						$result = $db->sql_query($sql);						$row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if ($row)						{							phpbb_unlink($row['physical_filename'], 'file');							if ($row['thumbnail'])							{								phpbb_unlink($row['physical_filename'], 'thumbnail');							}							$db->sql_query('DELETE FROM ' . ATTACHMENTS_TABLE . ' WHERE attach_id = ' . (int) $this->attachment_data[$index]['attach_id']);						}					}					else					{						delete_attachments('attach', array(intval($this->attachment_data[$index]['attach_id'])));					}					unset($this->attachment_data[$index]);					$this->message = preg_replace('#\[attachment=([0-9]+)\](.*?)\[\/attachment\]#e', "(\\1 == \$index) ? '' : ((\\1 > \$index) ? '[attachment=' . (\\1 - 1) . ']\\2[/attachment]' : '\\0')", $this->message);					// Reindex Array					$this->attachment_data = array_values($this->attachment_data);				}			}			else if (($add_file || $preview) && $upload_file)			{				if ($num_attachments < $cfg['max_attachments'] || $auth->acl_gets('m_', 'a_', $forum_id))				{					$filedata = upload_attachment($form_name, $forum_id, false, '', $is_message);					$error = array_merge($error, $filedata['error']);					if (!sizeof($error))					{						$sql_ary = array(							'physical_filename'	=> $filedata['physical_filename'],							'attach_comment'	=> $this->filename_data['filecomment'],							'real_filename'		=> $filedata['real_filename'],							'extension'			=> $filedata['extension'],							'mimetype'			=> $filedata['mimetype'],							'filesize'			=> $filedata['filesize'],							'filetime'			=> $filedata['filetime'],							'thumbnail'			=> $filedata['thumbnail'],							'is_orphan'			=> 1,							'in_message'		=> ($is_message) ? 1 : 0,							'poster_id'			=> $user->data['user_id'],						);						$db->sql_query('INSERT INTO ' . ATTACHMENTS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));						$new_entry = array(							'attach_id'		=> $db->sql_nextid(),							'is_orphan'		=> 1,							'real_filename'	=> $filedata['real_filename'],							'attach_comment'=> $this->filename_data['filecomment'],						);						$this->attachment_data = array_merge(array(0 => $new_entry), $this->attachment_data);						$this->message = preg_replace('#\[attachment=([0-9]+)\](.*?)\[\/attachment\]#e', "'[attachment='.(\\1 + 1).']\\2[/attachment]'", $this->message);						$this->filename_data['filecomment'] = '';					}				}				else				{					$error[] = sprintf($user->lang['TOO_MANY_ATTACHMENTS'], $cfg['max_attachments']);				}			}		}		foreach ($error as $error_msg)		{			$this->warn_msg[] = $error_msg;		}	}	/**	* Get Attachment Data	*/	function get_submitted_attachment_data($check_user_id = false)	{		global $user, $db, $phpbb_root_path, $phpEx, $config;		$this->filename_data['filecomment'] = utf8_normalize_nfc(request_var('filecomment', '', true));		$attachment_data = (isset($_POST['attachment_data'])) ? $_POST['attachment_data'] : array();		$this->attachment_data = array();		$check_user_id = ($check_user_id === false) ? $user->data['user_id'] : $check_user_id;		if (!sizeof($attachment_data))		{			return;		}		$not_orphan = $orphan = array();		foreach ($attachment_data as $pos => $var_ary)		{			if ($var_ary['is_orphan'])			{				$orphan[(int) $var_ary['attach_id']] = $pos;			}			else			{				$not_orphan[(int) $var_ary['attach_id']] = $pos;			}		}		// Regenerate already posted attachments		if (sizeof($not_orphan))		{			// Get the attachment data, based on the poster id...			$sql = 'SELECT attach_id, is_orphan, real_filename, attach_comment				FROM ' . ATTACHMENTS_TABLE . '				WHERE ' . $db->sql_in_set('attach_id', array_keys($not_orphan)) . '					AND poster_id = ' . $check_user_id;			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$pos = $not_orphan[$row['attach_id']];				$this->attachment_data[$pos] = $row;				set_var($this->attachment_data[$pos]['attach_comment'], $_POST['attachment_data'][$pos]['attach_comment'], 'string', true);				unset($not_orphan[$row['attach_id']]);			}			$db->sql_freeresult($result);		}		if (sizeof($not_orphan))		{			trigger_error('NO_ACCESS_ATTACHMENT', E_USER_ERROR);		}		// Regenerate newly uploaded attachments		if (sizeof($orphan))		{			$sql = 'SELECT attach_id, is_orphan, real_filename, attach_comment				FROM ' . ATTACHMENTS_TABLE . '				WHERE ' . $db->sql_in_set('attach_id', array_keys($orphan)) . '					AND poster_id = ' . $user->data['user_id'] . '					AND is_orphan = 1';			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$pos = $orphan[$row['attach_id']];				$this->attachment_data[$pos] = $row;				set_var($this->attachment_data[$pos]['attach_comment'], $_POST['attachment_data'][$pos]['attach_comment'], 'string', true);				unset($orphan[$row['attach_id']]);			}			$db->sql_freeresult($result);		}		if (sizeof($orphan))		{			trigger_error('NO_ACCESS_ATTACHMENT', E_USER_ERROR);		}		ksort($this->attachment_data);	}	/**	* Parse Poll	*/	function parse_poll(&$poll)	{		global $auth, $user, $config;		$poll_max_options = $poll['poll_max_options'];		// Parse Poll Option text ;)		$tmp_message = $this->message;		$this->message = $poll['poll_option_text'];		$bbcode_bitfield = $this->bbcode_bitfield;		$poll['poll_option_text'] = $this->parse($poll['enable_bbcode'], ($config['allow_post_links']) ? $poll['enable_urls'] : false, $poll['enable_smilies'], $poll['img_status'], false, false, $config['allow_post_links'], false, 'poll');		$bbcode_bitfield = base64_encode(base64_decode($bbcode_bitfield) | base64_decode($this->bbcode_bitfield));		$this->message = $tmp_message;		// Parse Poll Title		$tmp_message = $this->message;		$this->message = $poll['poll_title'];		$this->bbcode_bitfield = $bbcode_bitfield;		$poll['poll_options'] = explode("\n", trim($poll['poll_option_text']));		$poll['poll_options_size'] = sizeof($poll['poll_options']);		if (!$poll['poll_title'] && $poll['poll_options_size'])		{			$this->warn_msg[] = $user->lang['NO_POLL_TITLE'];		}		else		{			if (utf8_strlen(preg_replace('#\[\/?[a-z\*\+\-]+(=[\S]+)?\]#ius', ' ', $this->message)) > 100)			{				$this->warn_msg[] = $user->lang['POLL_TITLE_TOO_LONG'];			}			$poll['poll_title'] = $this->parse($poll['enable_bbcode'], ($config['allow_post_links']) ? $poll['enable_urls'] : false, $poll['enable_smilies'], $poll['img_status'], false, false, $config['allow_post_links'], false, 'poll');			if (strlen($poll['poll_title']) > 255)			{				$this->warn_msg[] = $user->lang['POLL_TITLE_COMP_TOO_LONG'];			}		}		$this->bbcode_bitfield = base64_encode(base64_decode($bbcode_bitfield) | base64_decode($this->bbcode_bitfield));		$this->message = $tmp_message;		unset($tmp_message);		if (sizeof($poll['poll_options']) == 1)		{			$this->warn_msg[] = $user->lang['TOO_FEW_POLL_OPTIONS'];		}		else if ($poll['poll_options_size'] > (int) $config['max_poll_options'])		{			$this->warn_msg[] = $user->lang['TOO_MANY_POLL_OPTIONS'];		}		else if ($poll_max_options > $poll['poll_options_size'])		{			$this->warn_msg[] = $user->lang['TOO_MANY_USER_OPTIONS'];		}		$poll['poll_max_options'] = ($poll['poll_max_options'] < 1) ? 1 : (($poll['poll_max_options'] > $config['max_poll_options']) ? $config['max_poll_options'] : $poll['poll_max_options']);	}}?>
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_icons_info{	function module()	{		return array(			'filename'	=> 'acp_icons',			'title'		=> 'ACP_ICONS_SMILIES',			'version'	=> '1.0.0',			'modes'		=> array(				'icons'		=> array('title' => 'ACP_ICONS', 'auth' => 'acl_a_icons', 'cat' => array('ACP_MESSAGES')),				'smilies'	=> array('title' => 'ACP_SMILIES', 'auth' => 'acl_a_icons', 'cat' => array('ACP_MESSAGES')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_ranks{	var $u_action;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('acp/posting');		// Set up general vars		$action = request_var('action', '');		$action = (isset($_POST['add'])) ? 'add' : $action;		$action = (isset($_POST['save'])) ? 'save' : $action;		$rank_id = request_var('id', 0);		$this->tpl_name = 'acp_ranks';		$this->page_title = 'ACP_MANAGE_RANKS';		$form_name = 'acp_ranks';		add_form_key($form_name);		switch ($action)		{			case 'save':				if (!check_form_key($form_name))				{					trigger_error($user->lang['FORM_INVALID']. adm_back_link($this->u_action), E_USER_WARNING);				}				$rank_title = utf8_normalize_nfc(request_var('title', '', true));				$special_rank = request_var('special_rank', 0);				$min_posts = ($special_rank) ? 0 : request_var('min_posts', 0);				$rank_image = request_var('rank_image', '');				// The rank image has to be a jpg, gif or png				if ($rank_image != '' && !preg_match('#(\.gif|\.png|\.jpg|\.jpeg)$#i', $rank_image))				{					$rank_image = '';				}				if (!$rank_title)				{					trigger_error($user->lang['NO_RANK_TITLE'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql_ary = array(					'rank_title'		=> $rank_title,					'rank_special'		=> $special_rank,					'rank_min'			=> $min_posts,					'rank_image'		=> htmlspecialchars_decode($rank_image)				);								if ($rank_id)				{					$sql = 'UPDATE ' . RANKS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . " WHERE rank_id = $rank_id";					$message = $user->lang['RANK_UPDATED'];					add_log('admin', 'LOG_RANK_UPDATED', $rank_title);				}				else				{					$sql = 'INSERT INTO ' . RANKS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);					$message = $user->lang['RANK_ADDED'];					add_log('admin', 'LOG_RANK_ADDED', $rank_title);				}				$db->sql_query($sql);				$cache->destroy('_ranks');				trigger_error($message . adm_back_link($this->u_action));			break;			case 'delete':				if (!$rank_id)				{					trigger_error($user->lang['MUST_SELECT_RANK'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (confirm_box(true))				{					$sql = 'SELECT rank_title						FROM ' . RANKS_TABLE . '						WHERE rank_id = ' . $rank_id;					$result = $db->sql_query($sql);					$rank_title = (string) $db->sql_fetchfield('rank_title');					$db->sql_freeresult($result);					$sql = 'DELETE FROM ' . RANKS_TABLE . "						WHERE rank_id = $rank_id";					$db->sql_query($sql);					$sql = 'UPDATE ' . USERS_TABLE . "						SET user_rank = 0						WHERE user_rank = $rank_id";					$db->sql_query($sql);					$cache->destroy('_ranks');					add_log('admin', 'LOG_RANK_REMOVED', $rank_title);				}				else				{					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(						'i'			=> $id,						'mode'		=> $mode,						'rank_id'	=> $rank_id,						'action'	=> 'delete',					)));				}			break;			case 'edit':			case 'add':				$data = $ranks = $existing_imgs = array();								$sql = 'SELECT *					FROM ' . RANKS_TABLE . '					ORDER BY rank_min ASC, rank_special ASC';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$existing_imgs[] = $row['rank_image'];					if ($action == 'edit' && $rank_id == $row['rank_id'])					{						$ranks = $row;					}				}				$db->sql_freeresult($result);				$imglist = filelist($phpbb_root_path . $config['ranks_path'], '');				$edit_img = $filename_list = '';				foreach ($imglist as $path => $img_ary)				{					sort($img_ary);					foreach ($img_ary as $img)					{						$img = $path . $img;						if ($ranks && $img == $ranks['rank_image'])						{							$selected = ' selected="selected"';							$edit_img = $img;						}						else						{							$selected = '';						}						if (strlen($img) > 255)						{							continue;						}						$filename_list .= '<option value="' . htmlspecialchars($img) . '"' . $selected . '>' . $img . ((in_array($img, $existing_imgs)) ? ' ' . $user->lang['RANK_IMAGE_IN_USE'] : '') . '</option>';					}				}				$filename_list = '<option value=""' . (($edit_img == '') ? ' selected="selected"' : '') . '>----------</option>' . $filename_list;				unset($existing_imgs, $imglist);				$template->assign_vars(array(					'S_EDIT'			=> true,					'U_BACK'			=> $this->u_action,					'RANKS_PATH'		=> $phpbb_root_path . $config['ranks_path'],					'U_ACTION'			=> $this->u_action . '&amp;id=' . $rank_id,					'RANK_TITLE'		=> (isset($ranks['rank_title'])) ? $ranks['rank_title'] : '',					'S_FILENAME_LIST'	=> $filename_list,					'RANK_IMAGE'		=> ($edit_img) ? $phpbb_root_path . $config['ranks_path'] . '/' . $edit_img : $phpbb_admin_path . 'images/spacer.gif',					'S_SPECIAL_RANK'	=> (isset($ranks['rank_special']) && $ranks['rank_special']) ? true : false,					'MIN_POSTS'			=> (isset($ranks['rank_min']) && !$ranks['rank_special']) ? $ranks['rank_min'] : 0)				);										return;			break;		}			$template->assign_vars(array(			'U_ACTION'		=> $this->u_action)		);		$sql = 'SELECT *			FROM ' . RANKS_TABLE . '			ORDER BY rank_special DESC, rank_min ASC, rank_title ASC';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$template->assign_block_vars('ranks', array(				'S_RANK_IMAGE'		=> ($row['rank_image']) ? true : false,				'S_SPECIAL_RANK'	=> ($row['rank_special']) ? true : false,				'RANK_IMAGE'		=> $phpbb_root_path . $config['ranks_path'] . '/' . $row['rank_image'],				'RANK_TITLE'		=> $row['rank_title'],				'MIN_POSTS'			=> $row['rank_min'],				'U_EDIT'			=> $this->u_action . '&amp;action=edit&amp;id=' . $row['rank_id'],				'U_DELETE'			=> $this->u_action . '&amp;action=delete&amp;id=' . $row['rank_id'])			);			}		$db->sql_freeresult($result);	}}?>
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'ff',''=>'fi',''=>'fl',''=>'',''=>'',''=>'',''=>'st',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** acp_users [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ADMIN_SIG_PREVIEW'		=> 'Signature preview',	'AT_LEAST_ONE_FOUNDER'	=> 'You are not able to change this founder to a normal user. There needs to be at least one founder enabled for this board. If you want to change this users founder status, promote another user to be a founder first.',	'BAN_ALREADY_ENTERED'	=> 'The ban had been previously entered successfully. The ban list has not been updated.',	'BAN_SUCCESSFUL'		=> 'Ban entered successfully.',	'CANNOT_BAN_ANONYMOUS'			=> 'You are not allowed to ban the anonymous account. Permissions for anonymous users can be set under the Permissions tab.',	'CANNOT_BAN_FOUNDER'			=> 'You are not allowed to ban founder accounts.',	'CANNOT_BAN_YOURSELF'			=> 'You are not allowed to ban yourself.',	'CANNOT_DEACTIVATE_BOT'			=> 'You are not allowed to deactivate bot accounts. Please deactivate the bot within the bots page instead.',	'CANNOT_DEACTIVATE_FOUNDER'		=> 'You are not allowed to deactivate founder accounts.',	'CANNOT_DEACTIVATE_YOURSELF'	=> 'You are not allowed to deactivate your own account.',	'CANNOT_FORCE_REACT_BOT'		=> 'You are not allowed to force reactivation on bot accounts. Please reactivate the bot within the bots page instead.',	'CANNOT_FORCE_REACT_FOUNDER'	=> 'You are not allowed to force reactivation on founder accounts.',	'CANNOT_FORCE_REACT_YOURSELF'	=> 'You are not allowed to force reactivation of your own account.',	'CANNOT_REMOVE_ANONYMOUS'		=> 'You are not able to remove the guest user account.',	'CANNOT_REMOVE_YOURSELF'		=> 'You are not allowed to remove your own user account.',	'CANNOT_SET_FOUNDER_IGNORED'	=> 'You are not able to promote ignored users to be founders.',	'CANNOT_SET_FOUNDER_INACTIVE'	=> 'You need to activate users before you promote them to founders, only activated users are able to be promoted.',	'CONFIRM_EMAIL_EXPLAIN'			=> 'You only need to specify this if you are changing the users e-mail address.',	'DELETE_POSTS'			=> 'Delete posts',	'DELETE_USER'			=> 'Delete user',	'DELETE_USER_EXPLAIN'	=> 'Please note that deleting a user is final, they cannot be recovered.',	'FORCE_REACTIVATION_SUCCESS'	=> 'Successfully forced reactivation.',	'FOUNDER'						=> 'Founder',	'FOUNDER_EXPLAIN'				=> 'Founders have all administrative permissions and can never be banned, deleted or altered by non-founder members.',	'GROUP_APPROVE'					=> 'Approve member',	'GROUP_DEFAULT'					=> 'Make group default for member',	'GROUP_DELETE'					=> 'Remove member from group',	'GROUP_DEMOTE'					=> 'Demote group leader',	'GROUP_PROMOTE'					=> 'Promote to group leader',	'IP_WHOIS_FOR'			=> 'IP whois for %s',	'LAST_ACTIVE'			=> 'Last active',	'MOVE_POSTS_EXPLAIN'	=> 'Please select the forum to which you wish to move all the posts this user has made.',	'NO_SPECIAL_RANK'		=> 'No special rank assigned',	'NO_WARNINGS'			=> 'No warnings.',	'NOT_MANAGE_FOUNDER'	=> 'You tried to manage a user with founder status. Only founders are allowed to manage other founders.',	'QUICK_TOOLS'			=> 'Quick tools',	'REGISTERED'			=> 'Registered',	'REGISTERED_IP'			=> 'Registered from IP',	'RETAIN_POSTS'			=> 'Retain posts',	'SELECT_FORM'			=> 'Select form',	'SELECT_USER'			=> 'Select user',	'USER_ADMIN'					=> 'User administration',	'USER_ADMIN_ACTIVATE'			=> 'Activate account',	'USER_ADMIN_ACTIVATED'			=> 'User activated successfully.',	'USER_ADMIN_AVATAR_REMOVED'		=> 'Successfully removed avatar from user account.',	'USER_ADMIN_BAN_EMAIL'			=> 'Ban by e-mail',	'USER_ADMIN_BAN_EMAIL_REASON'	=> 'E-mail address banned via user management',	'USER_ADMIN_BAN_IP'				=> 'Ban by IP',	'USER_ADMIN_BAN_IP_REASON'		=> 'IP banned via user management',	'USER_ADMIN_BAN_NAME_REASON'	=> 'Username banned via user management',	'USER_ADMIN_BAN_USER'			=> 'Ban by username',	'USER_ADMIN_DEACTIVATE'			=> 'Deactivate account',	'USER_ADMIN_DEACTIVED'			=> 'User deactivated successfully.',	'USER_ADMIN_DEL_ATTACH'			=> 'Delete all attachments',	'USER_ADMIN_DEL_AVATAR'			=> 'Delete avatar',	'USER_ADMIN_DEL_OUTBOX'			=> 'Empty PM outbox',	'USER_ADMIN_DEL_POSTS'			=> 'Delete all posts',	'USER_ADMIN_DEL_SIG'			=> 'Delete signature',	'USER_ADMIN_EXPLAIN'			=> 'Here you can change your users information and certain specific options.',	'USER_ADMIN_FORCE'				=> 'Force reactivation',	'USER_ADMIN_LEAVE_NR'			=> 'Remove from Newly Registered',	'USER_ADMIN_MOVE_POSTS'			=> 'Move all posts',	'USER_ADMIN_SIG_REMOVED'		=> 'Successfully removed signature from user account.',	'USER_ATTACHMENTS_REMOVED'		=> 'Successfully removed all attachments made by this user.',	'USER_AVATAR_NOT_ALLOWED'		=> 'The avatar cannot be displayed because avatars have been disallowed.',	'USER_AVATAR_UPDATED'			=> 'Successfully updated user avatars details.',	'USER_AVATAR_TYPE_NOT_ALLOWED'	=> 'The current avatar cannot be displayed because its type has been disallowed.',	'USER_CUSTOM_PROFILE_FIELDS'	=> 'Custom profile fields',	'USER_DELETED'					=> 'User deleted successfully.',	'USER_GROUP_ADD'				=> 'Add user to group',	'USER_GROUP_NORMAL'				=> 'User defined groups user is a member of',	'USER_GROUP_PENDING'			=> 'Groups user is in pending mode',	'USER_GROUP_SPECIAL'			=> 'Pre-defined groups user is a member of',	'USER_LIFTED_NR'				=> 'Successfully removed the users newly registered status.',	'USER_NO_ATTACHMENTS'			=> 'There are no attached files to display.',	'USER_OUTBOX_EMPTIED'			=> 'Successfully emptied users private message outbox.',	'USER_OUTBOX_EMPTY'				=> 'The users private message outbox was already empty.',	'USER_OVERVIEW_UPDATED'			=> 'User details updated.',	'USER_POSTS_DELETED'			=> 'Successfully removed all posts made by this user.',	'USER_POSTS_MOVED'				=> 'Successfully moved users posts to target forum.',	'USER_PREFS_UPDATED'			=> 'User preferences updated.',	'USER_PROFILE'					=> 'User profile',	'USER_PROFILE_UPDATED'			=> 'User profile updated.',	'USER_RANK'						=> 'User rank',	'USER_RANK_UPDATED'				=> 'User rank updated.',	'USER_SIG_UPDATED'				=> 'User signature successfully updated.',	'USER_WARNING_LOG_DELETED'		=> 'No information available. Possibly the log entry has been deleted.',	'USER_TOOLS'					=> 'Basic tools',));?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_board_info{	function module()	{		return array(			'filename'	=> 'acp_board',			'title'		=> 'ACP_BOARD_MANAGEMENT',			'version'	=> '1.0.0',			'modes'		=> array(				'settings'		=> array('title' => 'ACP_BOARD_SETTINGS', 'auth' => 'acl_a_board', 'cat' => array('ACP_BOARD_CONFIGURATION')),				'features'		=> array('title' => 'ACP_BOARD_FEATURES', 'auth' => 'acl_a_board', 'cat' => array('ACP_BOARD_CONFIGURATION')),				'avatar'		=> array('title' => 'ACP_AVATAR_SETTINGS', 'auth' => 'acl_a_board', 'cat' => array('ACP_BOARD_CONFIGURATION')),				'message'		=> array('title' => 'ACP_MESSAGE_SETTINGS', 'auth' => 'acl_a_board', 'cat' => array('ACP_BOARD_CONFIGURATION', 'ACP_MESSAGES')),				'post'			=> array('title' => 'ACP_POST_SETTINGS', 'auth' => 'acl_a_board', 'cat' => array('ACP_BOARD_CONFIGURATION', 'ACP_MESSAGES')),				'signature'		=> array('title' => 'ACP_SIGNATURE_SETTINGS', 'auth' => 'acl_a_board', 'cat' => array('ACP_BOARD_CONFIGURATION')),				'feed'			=> array('title' => 'ACP_FEED_SETTINGS', 'auth' => 'acl_a_board', 'cat' => array('ACP_BOARD_CONFIGURATION')),				'registration'	=> array('title' => 'ACP_REGISTER_SETTINGS', 'auth' => 'acl_a_board', 'cat' => array('ACP_BOARD_CONFIGURATION')),				'auth'		=> array('title' => 'ACP_AUTH_SETTINGS', 'auth' => 'acl_a_server', 'cat' => array('ACP_CLIENT_COMMUNICATION')),				'email'		=> array('title' => 'ACP_EMAIL_SETTINGS', 'auth' => 'acl_a_server', 'cat' => array('ACP_CLIENT_COMMUNICATION')),				'cookie'	=> array('title' => 'ACP_COOKIE_SETTINGS', 'auth' => 'acl_a_server', 'cat' => array('ACP_SERVER_CONFIGURATION')),				'server'	=> array('title' => 'ACP_SERVER_SETTINGS', 'auth' => 'acl_a_server', 'cat' => array('ACP_SERVER_CONFIGURATION')),				'security'	=> array('title' => 'ACP_SECURITY_SETTINGS', 'auth' => 'acl_a_server', 'cat' => array('ACP_SERVER_CONFIGURATION')),				'load'		=> array('title' => 'ACP_LOAD_SETTINGS', 'auth' => 'acl_a_server', 'cat' => array('ACP_SERVER_CONFIGURATION')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);define('ADMIN_START', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);// Start session management$user->session_begin(false);$auth->acl($user->data);$user->setup();// Set custom template for admin area$template->set_custom_template($phpbb_root_path . 'adm/style', 'admin');$template->set_filenames(array(	'body' => 'colour_swatch.html'));$form = request_var('form', '');$name = request_var('name', '');// We validate form and name here, only id/class allowed$form = (!preg_match('/^[a-z0-9_-]+$/i', $form)) ? '' : $form;$name = (!preg_match('/^[a-z0-9_-]+$/i', $name)) ? '' : $name;$template->assign_vars(array(	'OPENER'		=> $form,	'NAME'			=> $name,	'T_IMAGES_PATH'	=> "{$phpbb_root_path}images/",	'S_USER_LANG'			=> $user->lang['USER_LANG'],	'S_CONTENT_DIRECTION'	=> $user->lang['DIRECTION'],	'S_CONTENT_ENCODING'	=> 'UTF-8',));$template->display('body');garbage_collection();?>
<?php return array(''=>'');
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** BBCode class* @package phpBB3*/class bbcode{	var $bbcode_uid = '';	var $bbcode_bitfield = '';	var $bbcode_cache = array();	var $bbcode_template = array();	var $bbcodes = array();	var $template_bitfield;	var $template_filename = '';	/**	* Constructor	* Init bbcode cache entries if bitfield is specified	*/	function bbcode($bitfield = '')	{		if ($bitfield)		{			$this->bbcode_bitfield = $bitfield;			$this->bbcode_cache_init();		}	}	/**	* Second pass bbcodes	*/	function bbcode_second_pass(&$message, $bbcode_uid = '', $bbcode_bitfield = false)	{		if ($bbcode_uid)		{			$this->bbcode_uid = $bbcode_uid;		}		if ($bbcode_bitfield !== false)		{			$this->bbcode_bitfield = $bbcode_bitfield;			// Init those added with a new bbcode_bitfield (already stored codes will not get parsed again)			$this->bbcode_cache_init();		}		if (!$this->bbcode_bitfield)		{			// Remove the uid from tags that have not been transformed into HTML			if ($this->bbcode_uid)			{				$message = str_replace(':' . $this->bbcode_uid, '', $message);			}			return;		}		$str = array('search' => array(), 'replace' => array());		$preg = array('search' => array(), 'replace' => array());		$bitfield = new bitfield($this->bbcode_bitfield);		$bbcodes_set = $bitfield->get_all_set();		$undid_bbcode_specialchars = false;		foreach ($bbcodes_set as $bbcode_id)		{			if (!empty($this->bbcode_cache[$bbcode_id]))			{				foreach ($this->bbcode_cache[$bbcode_id] as $type => $array)				{					foreach ($array as $search => $replace)					{						${$type}['search'][] = str_replace('$uid', $this->bbcode_uid, $search);						${$type}['replace'][] = $replace;					}					if (sizeof($str['search']))					{						$message = str_replace($str['search'], $str['replace'], $message);						$str = array('search' => array(), 'replace' => array());					}					if (sizeof($preg['search']))					{						// we need to turn the entities back into their original form to allow the						// search patterns to work properly						if (!$undid_bbcode_specialchars)						{							$message = str_replace(array('&#58;', '&#46;'), array(':', '.'), $message);							$undid_bbcode_specialchars = true;						}						$message = preg_replace($preg['search'], $preg['replace'], $message);						$preg = array('search' => array(), 'replace' => array());					}				}			}		}		// Remove the uid from tags that have not been transformed into HTML		$message = str_replace(':' . $this->bbcode_uid, '', $message);	}	/**	* Init bbcode cache	*	* requires: $this->bbcode_bitfield	* sets: $this->bbcode_cache with bbcode templates needed for bbcode_bitfield	*/	function bbcode_cache_init()	{		global $phpbb_root_path, $template, $user;		if (empty($this->template_filename))		{			$this->template_bitfield = new bitfield($user->theme['bbcode_bitfield']);			$this->template_filename = $phpbb_root_path . 'styles/' . $user->theme['template_path'] . '/template/bbcode.html';			if (!@file_exists($this->template_filename))			{				if (isset($user->theme['template_inherits_id']) && $user->theme['template_inherits_id'])				{					$this->template_filename = $phpbb_root_path . 'styles/' . $user->theme['template_inherit_path'] . '/template/bbcode.html';					if (!@file_exists($this->template_filename))					{						trigger_error('The file ' . $this->template_filename . ' is missing.', E_USER_ERROR);					}				}				else				{					trigger_error('The file ' . $this->template_filename . ' is missing.', E_USER_ERROR);				}			}		}		$bbcode_ids = $rowset = $sql = array();		$bitfield = new bitfield($this->bbcode_bitfield);		$bbcodes_set = $bitfield->get_all_set();		foreach ($bbcodes_set as $bbcode_id)		{			if (isset($this->bbcode_cache[$bbcode_id]))			{				// do not try to re-cache it if it's already in				continue;			}			$bbcode_ids[] = $bbcode_id;			if ($bbcode_id > NUM_CORE_BBCODES)			{				$sql[] = $bbcode_id;			}		}		if (sizeof($sql))		{			global $db;			$sql = 'SELECT *				FROM ' . BBCODES_TABLE . '				WHERE ' . $db->sql_in_set('bbcode_id', $sql);			$result = $db->sql_query($sql, 3600);			while ($row = $db->sql_fetchrow($result))			{				// To circumvent replacing newlines with <br /> for the generated html,				// we use carriage returns here. They are later changed back to newlines				$row['bbcode_tpl'] = str_replace("\n", "\r", $row['bbcode_tpl']);				$row['second_pass_replace'] = str_replace("\n", "\r", $row['second_pass_replace']);				$rowset[$row['bbcode_id']] = $row;			}			$db->sql_freeresult($result);		}		foreach ($bbcode_ids as $bbcode_id)		{			switch ($bbcode_id)			{				case 0:					$this->bbcode_cache[$bbcode_id] = array(						'str' => array(							'[/quote:$uid]'	=> $this->bbcode_tpl('quote_close', $bbcode_id)						),						'preg' => array(							'#\[quote(?:=&quot;(.*?)&quot;)?:$uid\]((?!\[quote(?:=&quot;.*?&quot;)?:$uid\]).)?#ise'	=> "\$this->bbcode_second_pass_quote('\$1', '\$2')"						)					);				break;				case 1:					$this->bbcode_cache[$bbcode_id] = array(						'str' => array(							'[b:$uid]'	=> $this->bbcode_tpl('b_open', $bbcode_id),							'[/b:$uid]'	=> $this->bbcode_tpl('b_close', $bbcode_id),						)					);				break;				case 2:					$this->bbcode_cache[$bbcode_id] = array(						'str' => array(							'[i:$uid]'	=> $this->bbcode_tpl('i_open', $bbcode_id),							'[/i:$uid]'	=> $this->bbcode_tpl('i_close', $bbcode_id),						)					);				break;				case 3:					$this->bbcode_cache[$bbcode_id] = array(						'preg' => array(							'#\[url:$uid\]((.*?))\[/url:$uid\]#s'			=> $this->bbcode_tpl('url', $bbcode_id),							'#\[url=([^\[]+?):$uid\](.*?)\[/url:$uid\]#s'	=> $this->bbcode_tpl('url', $bbcode_id),						)					);				break;				case 4:					if ($user->optionget('viewimg'))					{						$this->bbcode_cache[$bbcode_id] = array(							'preg' => array(								'#\[img:$uid\](.*?)\[/img:$uid\]#s'		=> $this->bbcode_tpl('img', $bbcode_id),							)						);					}					else					{						$this->bbcode_cache[$bbcode_id] = array(							'preg' => array(								'#\[img:$uid\](.*?)\[/img:$uid\]#s'		=> str_replace('$2', '[ img ]', $this->bbcode_tpl('url', $bbcode_id, true)),							)						);					}				break;				case 5:					$this->bbcode_cache[$bbcode_id] = array(						'preg' => array(							'#\[size=([\-\+]?\d+):$uid\](.*?)\[/size:$uid\]#s'	=> $this->bbcode_tpl('size', $bbcode_id),						)					);				break;				case 6:					$this->bbcode_cache[$bbcode_id] = array(						'preg' => array(							'!\[color=(#[0-9a-f]{3}|#[0-9a-f]{6}|[a-z\-]+):$uid\](.*?)\[/color:$uid\]!is'	=> $this->bbcode_tpl('color', $bbcode_id),						)					);				break;				case 7:					$this->bbcode_cache[$bbcode_id] = array(						'str' => array(							'[u:$uid]'	=> $this->bbcode_tpl('u_open', $bbcode_id),							'[/u:$uid]'	=> $this->bbcode_tpl('u_close', $bbcode_id),						)					);				break;				case 8:					$this->bbcode_cache[$bbcode_id] = array(						'preg' => array(							'#\[code(?:=([a-z]+))?:$uid\](.*?)\[/code:$uid\]#ise'	=> "\$this->bbcode_second_pass_code('\$1', '\$2')",						)					);				break;				case 9:					$this->bbcode_cache[$bbcode_id] = array(						'preg' => array(							'#(\[\/?(list|\*):[mou]?:?$uid\])[\n]{1}#'	=> "\$1",							'#(\[list=([^\[]+):$uid\])[\n]{1}#'			=> "\$1",							'#\[list=([^\[]+):$uid\]#e'					=> "\$this->bbcode_list('\$1')",						),						'str' => array(							'[list:$uid]'		=> $this->bbcode_tpl('ulist_open_default', $bbcode_id),							'[/list:u:$uid]'	=> $this->bbcode_tpl('ulist_close', $bbcode_id),							'[/list:o:$uid]'	=> $this->bbcode_tpl('olist_close', $bbcode_id),							'[*:$uid]'			=> $this->bbcode_tpl('listitem', $bbcode_id),							'[/*:$uid]'			=> $this->bbcode_tpl('listitem_close', $bbcode_id),							'[/*:m:$uid]'		=> $this->bbcode_tpl('listitem_close', $bbcode_id)						),					);				break;				case 10:					$this->bbcode_cache[$bbcode_id] = array(						'preg' => array(							'#\[email:$uid\]((.*?))\[/email:$uid\]#is'			=> $this->bbcode_tpl('email', $bbcode_id),							'#\[email=([^\[]+):$uid\](.*?)\[/email:$uid\]#is'	=> $this->bbcode_tpl('email', $bbcode_id)						)					);				break;				case 11:					if ($user->optionget('viewflash'))					{						$this->bbcode_cache[$bbcode_id] = array(							'preg' => array(								'#\[flash=([0-9]+),([0-9]+):$uid\](.*?)\[/flash:$uid\]#'	=> $this->bbcode_tpl('flash', $bbcode_id),							)						);					}					else					{						$this->bbcode_cache[$bbcode_id] = array(							'preg' => array(								'#\[flash=([0-9]+),([0-9]+):$uid\](.*?)\[/flash:$uid\]#'	=> str_replace('$1', '$3', str_replace('$2', '[ flash ]', $this->bbcode_tpl('url', $bbcode_id, true)))							)						);					}				break;				case 12:					$this->bbcode_cache[$bbcode_id] = array(						'str'	=> array(							'[/attachment:$uid]'	=> $this->bbcode_tpl('inline_attachment_close', $bbcode_id)						),						'preg'	=> array(							'#\[attachment=([0-9]+):$uid\]#'	=> $this->bbcode_tpl('inline_attachment_open', $bbcode_id)						)					);				break;				default:					if (isset($rowset[$bbcode_id]))					{						if ($this->template_bitfield->get($bbcode_id))						{							// The bbcode requires a custom template to be loaded							if (!$bbcode_tpl = $this->bbcode_tpl($rowset[$bbcode_id]['bbcode_tag'], $bbcode_id))							{								// For some reason, the required template seems not to be available, use the default template								$bbcode_tpl = (!empty($rowset[$bbcode_id]['second_pass_replace'])) ? $rowset[$bbcode_id]['second_pass_replace'] : $rowset[$bbcode_id]['bbcode_tpl'];							}							else							{								// In order to use templates with custom bbcodes we need								// to replace all {VARS} to corresponding backreferences								// Note that backreferences are numbered from bbcode_match								if (preg_match_all('/\{(URL|LOCAL_URL|EMAIL|TEXT|SIMPLETEXT|INTTEXT|IDENTIFIER|COLOR|NUMBER)[0-9]*\}/', $rowset[$bbcode_id]['bbcode_match'], $m))								{									foreach ($m[0] as $i => $tok)									{										$bbcode_tpl = str_replace($tok, '$' . ($i + 1), $bbcode_tpl);									}								}							}						}						else						{							// Default template							$bbcode_tpl = (!empty($rowset[$bbcode_id]['second_pass_replace'])) ? $rowset[$bbcode_id]['second_pass_replace'] : $rowset[$bbcode_id]['bbcode_tpl'];						}						// Replace {L_*} lang strings						$bbcode_tpl = preg_replace('/{L_([A-Z_]+)}/e', "(!empty(\$user->lang['\$1'])) ? \$user->lang['\$1'] : ucwords(strtolower(str_replace('_', ' ', '\$1')))", $bbcode_tpl);						if (!empty($rowset[$bbcode_id]['second_pass_replace']))						{							// The custom BBCode requires second-pass pattern replacements							$this->bbcode_cache[$bbcode_id] = array(								'preg' => array($rowset[$bbcode_id]['second_pass_match'] => $bbcode_tpl)							);						}						else						{							$this->bbcode_cache[$bbcode_id] = array(								'str' => array($rowset[$bbcode_id]['second_pass_match'] => $bbcode_tpl)							);						}					}					else					{						$this->bbcode_cache[$bbcode_id] = false;					}				break;			}		}	}	/**	* Return bbcode template	*/	function bbcode_tpl($tpl_name, $bbcode_id = -1, $skip_bitfield_check = false)	{		static $bbcode_hardtpl = array();		if (empty($bbcode_hardtpl))		{			global $user;			$bbcode_hardtpl = array(				'b_open'	=> '<span style="font-weight: bold">',				'b_close'	=> '</span>',				'i_open'	=> '<span style="font-style: italic">',				'i_close'	=> '</span>',				'u_open'	=> '<span style="text-decoration: underline">',				'u_close'	=> '</span>',				'img'		=> '<img src="$1" alt="' . $user->lang['IMAGE'] . '" />',				'size'		=> '<span style="font-size: $1%; line-height: normal">$2</span>',				'color'		=> '<span style="color: $1">$2</span>',				'email'		=> '<a href="mailto:$1">$2</a>'			);		}		if ($bbcode_id != -1 && !$skip_bitfield_check && !$this->template_bitfield->get($bbcode_id))		{			return (isset($bbcode_hardtpl[$tpl_name])) ? $bbcode_hardtpl[$tpl_name] : false;		}		if (empty($this->bbcode_template))		{			if (($tpl = file_get_contents($this->template_filename)) === false)			{				trigger_error('Could not load bbcode template', E_USER_ERROR);			}			// replace \ with \\ and then ' with \'.			$tpl = str_replace('\\', '\\\\', $tpl);			$tpl = str_replace("'", "\'", $tpl);			// strip newlines and indent			$tpl = preg_replace("/\n[\n\r\s\t]*/", '', $tpl);			// Turn template blocks into PHP assignment statements for the values of $bbcode_tpl..			$this->bbcode_template = array();			$matches = preg_match_all('#<!-- BEGIN (.*?) -->(.*?)<!-- END (?:.*?) -->#', $tpl, $match);			for ($i = 0; $i < $matches; $i++)			{				if (empty($match[1][$i]))				{					continue;				}				$this->bbcode_template[$match[1][$i]] = $this->bbcode_tpl_replace($match[1][$i], $match[2][$i]);			}		}		return (isset($this->bbcode_template[$tpl_name])) ? $this->bbcode_template[$tpl_name] : ((isset($bbcode_hardtpl[$tpl_name])) ? $bbcode_hardtpl[$tpl_name] : false);	}	/**	* Return bbcode template replacement	*/	function bbcode_tpl_replace($tpl_name, $tpl)	{		global $user;		static $replacements = array(			'quote_username_open'	=> array('{USERNAME}'	=> '$1'),			'color'					=> array('{COLOR}'		=> '$1', '{TEXT}'			=> '$2'),			'size'					=> array('{SIZE}'		=> '$1', '{TEXT}'			=> '$2'),			'img'					=> array('{URL}'		=> '$1'),			'flash'					=> array('{WIDTH}'		=> '$1', '{HEIGHT}'			=> '$2', '{URL}'	=> '$3'),			'url'					=> array('{URL}'		=> '$1', '{DESCRIPTION}'	=> '$2'),			'email'					=> array('{EMAIL}'		=> '$1', '{DESCRIPTION}'	=> '$2')		);		$tpl = preg_replace('/{L_([A-Z_]+)}/e', "(!empty(\$user->lang['\$1'])) ? \$user->lang['\$1'] : ucwords(strtolower(str_replace('_', ' ', '\$1')))", $tpl);		if (!empty($replacements[$tpl_name]))		{			$tpl = strtr($tpl, $replacements[$tpl_name]);		}		return trim($tpl);	}	/**	* Second parse list bbcode	*/	function bbcode_list($type)	{		if ($type == '')		{			$tpl = 'ulist_open_default';			$type = 'default';		}		else if ($type == 'i')		{			$tpl = 'olist_open';			$type = 'lower-roman';		}		else if ($type == 'I')		{			$tpl = 'olist_open';			$type = 'upper-roman';		}		else if (preg_match('#^(disc|circle|square)$#i', $type))		{			$tpl = 'ulist_open';			$type = strtolower($type);		}		else if (preg_match('#^[a-z]$#', $type))		{			$tpl = 'olist_open';			$type = 'lower-alpha';		}		else if (preg_match('#[A-Z]#', $type))		{			$tpl = 'olist_open';			$type = 'upper-alpha';		}		else if (is_numeric($type))		{			$tpl = 'olist_open';			$type = 'decimal';		}		else		{			$tpl = 'olist_open';			$type = 'decimal';		}		return str_replace('{LIST_TYPE}', $type, $this->bbcode_tpl($tpl));	}	/**	* Second parse quote tag	*/	function bbcode_second_pass_quote($username, $quote)	{		// when using the /e modifier, preg_replace slashes double-quotes but does not		// seem to slash anything else		$quote = str_replace('\"', '"', $quote);		$username = str_replace('\"', '"', $username);		// remove newline at the beginning		if ($quote == "\n")		{			$quote = '';		}		$quote = (($username) ? str_replace('$1', $username, $this->bbcode_tpl('quote_username_open')) : $this->bbcode_tpl('quote_open')) . $quote;		return $quote;	}	/**	* Second parse code tag	*/	function bbcode_second_pass_code($type, $code)	{		// when using the /e modifier, preg_replace slashes double-quotes but does not		// seem to slash anything else		$code = str_replace('\"', '"', $code);		switch ($type)		{			case 'php':				// Not the english way, but valid because of hardcoded syntax highlighting				if (strpos($code, '<span class="syntaxdefault"><br /></span>') === 0)				{					$code = substr($code, 41);				}			// no break;			default:				$code = str_replace("\t", '&nbsp; &nbsp;', $code);				$code = str_replace('  ', '&nbsp; ', $code);				$code = str_replace('  ', ' &nbsp;', $code);				$code = str_replace("\n ", "\n&nbsp;", $code);				// keep space at the beginning				if (!empty($code) && $code[0] == ' ')				{					$code = '&nbsp;' . substr($code, 1);				}				// remove newline at the beginning				if (!empty($code) && $code[0] == "\n")				{					$code = substr($code, 1);				}			break;		}		$code = $this->bbcode_tpl('code_open') . $code . $this->bbcode_tpl('code_close');		return $code;	}}?>
<?php/*** @package phpBB3* @version $Id$* @copyright (c) 2009 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License** Idea and original RSS Feed 2.0 MOD (Version 1.0.8/9) by leviatan21* Original MOD: http://www.phpbb.com/community/viewtopic.php?f=69&t=1214645* MOD Author Profile: http://www.phpbb.com/community/memberlist.php?mode=viewprofile&u=345763* MOD Author Homepage: http://www.mssti.com/phpbb3/***//*** @ignore**/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);if (!$config['feed_enable']){	trigger_error('NO_FEED_ENABLED');}// Start session$user->session_begin();if (!empty($config['feed_http_auth']) && request_var('auth', '') == 'http'){	phpbb_http_login(array(		'auth_message'	=> 'Feed',		'viewonline'	=> request_var('viewonline', true),	));}$auth->acl($user->data);$user->setup();// Initial var setup$forum_id	= request_var('f', 0);$topic_id	= request_var('t', 0);$mode		= request_var('mode', '');// We do not use a template, therefore we simply define the global template variables here$global_vars = $item_vars = array();$feed_updated_time = 0;// Generate params array for use in append_sid() to correctly link back to this page$params = false;if ($forum_id || $topic_id || $mode){	$params = array(		'f'		=> ($forum_id) ? $forum_id : NULL,		't'		=> ($topic_id) ? $topic_id : NULL,		'mode'	=> ($mode) ? $mode : NULL,	);}// This boards URL$board_url = generate_board_url();// Get correct feed object$feed = phpbb_feed_factory::init($mode, $forum_id, $topic_id);// No feed foundif ($feed === false){	trigger_error('NO_FEED');}// Open Feed$feed->open();// Iterate through itemswhile ($row = $feed->get_item()){	// BBCode options to correctly disable urls, smilies, bbcode...	if ($feed->get('options') === NULL)	{		// Allow all combinations		$options = 7;		if ($feed->get('enable_bbcode') !== NULL && $feed->get('enable_smilies') !== NULL && $feed->get('enable_magic_url') !== NULL)		{			$options = (($row[$feed->get('enable_bbcode')]) ? OPTION_FLAG_BBCODE : 0) + (($row[$feed->get('enable_smilies')]) ? OPTION_FLAG_SMILIES : 0) + (($row[$feed->get('enable_magic_url')]) ? OPTION_FLAG_LINKS : 0);		}	}	else	{		$options = $row[$feed->get('options')];	}	$title = (isset($row[$feed->get('title')]) && $row[$feed->get('title')] !== '') ? $row[$feed->get('title')] : ((isset($row[$feed->get('title2')])) ? $row[$feed->get('title2')] : '');	$published = ($feed->get('published') !== NULL) ? (int) $row[$feed->get('published')] : 0;	$updated = ($feed->get('updated') !== NULL) ? (int) $row[$feed->get('updated')] : 0;	$item_row = array(		'author'		=> ($feed->get('creator') !== NULL) ? $row[$feed->get('creator')] : '',		'published'		=> ($published > 0) ? feed_format_date($published) : '',		'updated'		=> ($updated > 0) ? feed_format_date($updated) : '',		'link'			=> '',		'title'			=> censor_text($title),		'category'		=> ($config['feed_item_statistics'] && !empty($row['forum_id'])) ? $board_url . '/viewforum.' . $phpEx . '?f=' . $row['forum_id'] : '',		'category_name'	=> ($config['feed_item_statistics'] && isset($row['forum_name'])) ? $row['forum_name'] : '',		'description'	=> censor_text(feed_generate_content($row[$feed->get('text')], $row[$feed->get('bbcode_uid')], $row[$feed->get('bitfield')], $options)),		'statistics'	=> '',	);	// Adjust items, fill link, etc.	$feed->adjust_item($item_row, $row);	$item_vars[] = $item_row;	$feed_updated_time = max($feed_updated_time, $published, $updated);}// If we do not have any items at all, sending the current time is better than sending no time.if (!$feed_updated_time){	$feed_updated_time = time();}// Some default assignments// FEED_IMAGE is not used (atom)$global_vars = array_merge($global_vars, array(	'FEED_IMAGE'			=> ($user->img('site_logo', '', false, '', 'src')) ? $board_url . '/' . substr($user->img('site_logo', '', false, '', 'src'), strlen($phpbb_root_path)) : '',	'SELF_LINK'				=> feed_append_sid('/feed.' . $phpEx, $params),	'FEED_LINK'				=> $board_url . '/index.' . $phpEx,	'FEED_TITLE'			=> $config['sitename'],	'FEED_SUBTITLE'			=> $config['site_desc'],	'FEED_UPDATED'			=> feed_format_date($feed_updated_time),	'FEED_LANG'				=> $user->lang['USER_LANG'],	'FEED_AUTHOR'			=> $config['sitename'],));$feed->close();// Output page// gzip_compressionif ($config['gzip_compress']){	if (@extension_loaded('zlib') && !headers_sent())	{		ob_start('ob_gzhandler');	}}// IF debug extra is enabled and admin want to "explain" the page we need to set other headers...if (defined('DEBUG_EXTRA') && request_var('explain', 0) && $auth->acl_get('a_')){	header('Content-type: text/html; charset=UTF-8');	header('Cache-Control: private, no-cache="set-cookie"');	header('Expires: 0');	header('Pragma: no-cache');	$mtime = explode(' ', microtime());	$totaltime = $mtime[0] + $mtime[1] - $starttime;	if (method_exists($db, 'sql_report'))	{		$db->sql_report('display');	}	garbage_collection();	exit_handler();}header("Content-Type: application/atom+xml; charset=UTF-8");header("Last-Modified: " . gmdate('D, d M Y H:i:s', $feed_updated_time) . ' GMT');if (!empty($user->data['is_bot'])){	// Let reverse proxies know we detected a bot.	header('X-PHPBB-IS-BOT: yes');}echo '<?xml version="1.0" encoding="UTF-8"?>' . "\n";echo '<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="' . $global_vars['FEED_LANG'] . '">' . "\n";echo '<link rel="self" type="application/atom+xml" href="' . $global_vars['SELF_LINK'] . '" />' . "\n\n";echo (!empty($global_vars['FEED_TITLE'])) ? '<title>' . $global_vars['FEED_TITLE'] . '</title>' . "\n" : '';echo (!empty($global_vars['FEED_SUBTITLE'])) ? '<subtitle>' . $global_vars['FEED_SUBTITLE'] . '</subtitle>' . "\n" : '';echo (!empty($global_vars['FEED_LINK'])) ? '<link href="' . $global_vars['FEED_LINK'] .'" />' . "\n" : '';echo '<updated>' . $global_vars['FEED_UPDATED'] . '</updated>' . "\n\n";echo '<author><name><![CDATA[' . $global_vars['FEED_AUTHOR'] . ']]></name></author>' . "\n";echo '<id>' . $global_vars['SELF_LINK'] . '</id>' . "\n";foreach ($item_vars as $row){	echo '<entry>' . "\n";	if (!empty($row['author']))	{		echo '<author><name><![CDATA[' . $row['author'] . ']]></name></author>' . "\n";	}	echo '<updated>' . ((!empty($row['updated'])) ? $row['updated'] : $row['published']) . '</updated>' . "\n";	if (!empty($row['published']))	{		echo '<published>' . $row['published'] . '</published>' . "\n";	}	echo '<id>' . $row['link'] . '</id>' . "\n";	echo '<link href="' . $row['link'] . '"/>' . "\n";	echo '<title type="html"><![CDATA[' . $row['title'] . ']]></title>' . "\n\n";	if (!empty($row['category']) && isset($row['category_name']) && $row['category_name'] !== '')	{		echo '<category term="' . $row['category_name'] . '" scheme="' . $row['category'] . '" label="' . $row['category_name'] . '"/>' . "\n";	}	echo '<content type="html" xml:base="' . $row['link'] . '"><![CDATA[' . "\n";	echo $row['description'];	if (!empty($row['statistics']))	{		echo '<p>' . $user->lang['STATISTICS'] . ': ' . $row['statistics'] . '</p>';	}	echo '<hr />' . "\n" . ']]></content>' . "\n";	echo '</entry>' . "\n";}echo '</feed>';garbage_collection();exit_handler();/*** Run links through append_sid(), prepend generate_board_url() and remove session id**/function feed_append_sid($url, $params){	global $board_url;	return append_sid($board_url . $url, $params, true, '');}/*** Generate ISO 8601 date string (RFC 3339)**/function feed_format_date($time){	static $zone_offset;	static $offset_string;	if (empty($offset_string))	{		global $user;		$zone_offset = (int) $user->timezone + (int) $user->dst;		$sign = ($zone_offset < 0) ? '-' : '+';		$time_offset = abs($zone_offset);		$offset_seconds	= $time_offset % 3600;		$offset_minutes	= $offset_seconds / 60;		$offset_hours	= ($time_offset - $offset_seconds) / 3600;		$offset_string	= sprintf("%s%02d:%02d", $sign, $offset_hours, $offset_minutes);	}	return gmdate("Y-m-d\TH:i:s", $time + $zone_offset) . $offset_string;}/*** Generate text content**/function feed_generate_content($content, $uid, $bitfield, $options){	global $user, $config, $phpbb_root_path, $phpEx, $board_url;	if (empty($content))	{		return '';	}	// Prepare some bbcodes for better parsing	$content	= preg_replace("#\[quote(=&quot;.*?&quot;)?:$uid\]\s*(.*?)\s*\[/quote:$uid\]#si", "[quote$1:$uid]<br />$2<br />[/quote:$uid]", $content);	$content = generate_text_for_display($content, $uid, $bitfield, $options);	// Add newlines	$content = str_replace('<br />', '<br />' . "\n", $content);	// Convert smiley Relative paths to Absolute path, Windows style	$content = str_replace($phpbb_root_path . $config['smilies_path'], $board_url . '/' . $config['smilies_path'], $content);	// Remove "Select all" link and mouse events	$content = str_replace('<a href="#" onclick="selectCode(this); return false;">' . $user->lang['SELECT_ALL_CODE'] . '</a>', '', $content);	$content = preg_replace('#(onkeypress|onclick)="(.*?)"#si', '', $content);	// Firefox does not support CSS for feeds, though	// Remove font sizes//	$content = preg_replace('#<span style="font-size: [0-9]+%; line-height: [0-9]+%;">([^>]+)</span>#iU', '\1', $content);	// Make text strong :P//	$content = preg_replace('#<span style="font-weight: bold?">(.*?)</span>#iU', '<strong>\1</strong>', $content);	// Italic//	$content = preg_replace('#<span style="font-style: italic?">([^<]+)</span>#iU', '<em>\1</em>', $content);	// Underline//	$content = preg_replace('#<span style="text-decoration: underline?">([^<]+)</span>#iU', '<u>\1</u>', $content);	// Remove embed Windows Media Streams	$content	= preg_replace( '#<\!--\[if \!IE\]>-->([^[]+)<\!--<!\[endif\]-->#si', '', $content);	// Do not use &lt; and &gt;, because we want to retain code contained in [code][/code]	// Remove embed and objects	$content	= preg_replace( '#<(object|embed)(.*?) (value|src)=(.*?) ([^[]+)(object|embed)>#si',' <a href=$4 target="_blank"><strong>$1</strong></a> ',$content);	// Remove some specials html tag, because somewhere there are a mod to allow html tags ;)	$content	= preg_replace( '#<(script|iframe)([^[]+)\1>#siU', ' <strong>$1</strong> ', $content);	// Remove Comments from inline attachments [ia]	$content	= preg_replace('#<div class="(inline-attachment|attachtitle)">(.*?)<!-- ia(.*?) -->(.*?)<!-- ia(.*?) -->(.*?)</div>#si','$4',$content);	// Replace some entities with their unicode counterpart	$entities = array(		'&nbsp;'	=> "\xC2\xA0",		'&bull;'	=> "\xE2\x80\xA2",		'&middot;'	=> "\xC2\xB7",		'&copy;'	=> "\xC2\xA9",	);	$content = str_replace(array_keys($entities), array_values($entities), $content);	// Remove CDATA blocks. ;)	$content = preg_replace('#\<\!\[CDATA\[(.*?)\]\]\>#s', '', $content);	// Other control characters	$content = preg_replace('#(?:[\x00-\x1F\x7F]+|(?:\xC2[\x80-\x9F])+)#', '', $content);	return $content;}/*** Factory class to return correct object* @package phpBB3*/class phpbb_feed_factory{	/**	* Return correct object for specified mode	*	* @param string	$mode		The feeds mode.	* @param int	$forum_id	Forum id specified by the script if forum feed provided.	* @param int	$topic_id	Topic id specified by the script if topic feed provided.	*	* @return object	Returns correct feeds object for specified mode.	*/	function init($mode, $forum_id, $topic_id)	{		global $config;		switch ($mode)		{			case 'forums':				if (!$config['feed_overall_forums'])				{					return false;				}				return new phpbb_feed_forums();			break;			case 'topics':			case 'topics_new':				if (!$config['feed_topics_new'])				{					return false;				}				return new phpbb_feed_topics();			break;			case 'topics_active':				if (!$config['feed_topics_active'])				{					return false;				}				return new phpbb_feed_topics_active();			break;			case 'news':				global $db;				// Get at least one news forum				$sql = 'SELECT forum_id					FROM ' . FORUMS_TABLE . '					WHERE ' . $db->sql_bit_and('forum_options', FORUM_OPTION_FEED_NEWS, '<> 0');				$result = $db->sql_query_limit($sql, 1, 0, 600);				$s_feed_news = (int) $db->sql_fetchfield('forum_id');				$db->sql_freeresult($result);				if (!$s_feed_news)				{					return false;				}				return new phpbb_feed_news();			break;			default:				if ($topic_id && $config['feed_topic'])				{					return new phpbb_feed_topic($topic_id);				}				else if ($forum_id && $config['feed_forum'])				{					return new phpbb_feed_forum($forum_id);				}				else if ($config['feed_overall'])				{					return new phpbb_feed_overall();				}				return false;			break;		}	}}/*** Base class with some generic functions and settings.** @package phpBB3*/class phpbb_feed_base{	/**	* SQL Query to be executed to get feed items	*/	var $sql = array();	/**	* Keys specified for retrieval of title, content, etc.	*/	var $keys = array();	/**	* Number of items to fetch. Usually overwritten by $config['feed_something']	*/	var $num_items = 15;	/**	* Separator for title elements to separate items (for example forum / topic)	*/	var $separator = "\xE2\x80\xA2"; // &bull;	/**	* Separator for the statistics row (Posted by, post date, replies, etc.)	*/	var $separator_stats = "\xE2\x80\x94"; // &mdash;	/**	* Constructor	*/	function phpbb_feed_base()	{		global $config;		$this->set_keys();		// Allow num_items to be string		if (is_string($this->num_items))		{			$this->num_items = (int) $config[$this->num_items];			// A precaution			if (!$this->num_items)			{				$this->num_items = 10;			}		}	}	/**	* Set keys.	*/	function set_keys()	{	}	/**	* Open feed	*/	function open()	{	}	/**	* Close feed	*/	function close()	{		global $db;		if (!empty($this->result))		{			$db->sql_freeresult($this->result);		}	}	/**	* Set key	*/	function set($key, $value)	{		$this->keys[$key] = $value;	}	/**	* Get key	*/	function get($key)	{		return (isset($this->keys[$key])) ? $this->keys[$key] : NULL;	}	function get_readable_forums()	{		global $auth;		static $forum_ids;		if (!isset($forum_ids))		{			$forum_ids = array_keys($auth->acl_getf('f_read', true));		}		return $forum_ids;	}	function get_moderator_approve_forums()	{		global $auth;		static $forum_ids;		if (!isset($forum_ids))		{			$forum_ids = array_keys($auth->acl_getf('m_approve', true));		}		return $forum_ids;	}	function is_moderator_approve_forum($forum_id)	{		static $forum_ids;		if (!isset($forum_ids))		{			$forum_ids = array_flip($this->get_moderator_approve_forums());		}		if (!$forum_id)		{			// Global announcement, your a moderator in any forum than it's okay.			return (!empty($forum_ids)) ? true : false;		}		return (isset($forum_ids[$forum_id])) ? true : false;	}	function get_excluded_forums()	{		global $db, $cache;		static $forum_ids;		// Matches acp/acp_board.php		$cache_name	= 'feed_excluded_forum_ids';		if (!isset($forum_ids) && ($forum_ids = $cache->get('_' . $cache_name)) === false)		{			$sql = 'SELECT forum_id				FROM ' . FORUMS_TABLE . '				WHERE ' . $db->sql_bit_and('forum_options', FORUM_OPTION_FEED_EXCLUDE, '<> 0');			$result = $db->sql_query($sql);			$forum_ids = array();			while ($forum_id = (int) $db->sql_fetchfield('forum_id'))			{				$forum_ids[$forum_id] = $forum_id;			}			$db->sql_freeresult($result);			$cache->put('_' . $cache_name, $forum_ids);		}		return $forum_ids;	}	function is_excluded_forum($forum_id)	{		$forum_ids = $this->get_excluded_forums();		return isset($forum_ids[$forum_id]) ? true : false;	}	function get_passworded_forums()	{		global $user;		return $user->get_passworded_forums();	}	function get_item()	{		global $db, $cache;		static $result;		if (!isset($result))		{			if (!$this->get_sql())			{				return false;			}			// Query database			$sql = $db->sql_build_query('SELECT', $this->sql);			$result = $db->sql_query_limit($sql, $this->num_items);		}		return $db->sql_fetchrow($result);	}	function user_viewprofile($row)	{		global $phpEx, $user;		$author_id = (int) $row[$this->get('author_id')];		if ($author_id == ANONYMOUS)		{			// Since we cannot link to a profile, we just return GUEST			// instead of $row['username']			return $user->lang['GUEST'];		}		return '<a href="' . feed_append_sid('/memberlist.' . $phpEx, 'mode=viewprofile&amp;u=' . $author_id) . '">' . $row[$this->get('creator')] . '</a>';	}}/*** Abstract class for post based feeds** @package phpBB3*/class phpbb_feed_post_base extends phpbb_feed_base{	var $num_items = 'feed_limit_post';	function set_keys()	{		$this->set('title',		'post_subject');		$this->set('title2',	'topic_title');		$this->set('author_id',	'user_id');		$this->set('creator',	'username');		$this->set('published',	'post_time');		$this->set('updated',	'post_edit_time');		$this->set('text',		'post_text');		$this->set('bitfield',	'bbcode_bitfield');		$this->set('bbcode_uid','bbcode_uid');		$this->set('enable_bbcode',		'enable_bbcode');		$this->set('enable_smilies',	'enable_smilies');		$this->set('enable_magic_url',	'enable_magic_url');	}	function adjust_item(&$item_row, &$row)	{		global $phpEx, $config, $user;		$item_row['link'] = feed_append_sid('/viewtopic.' . $phpEx, "t={$row['topic_id']}&amp;p={$row['post_id']}#p{$row['post_id']}");		if ($config['feed_item_statistics'])		{			$item_row['statistics'] = $user->lang['POSTED'] . ' ' . $user->lang['POST_BY_AUTHOR'] . ' ' . $this->user_viewprofile($row)				. ' ' . $this->separator_stats . ' ' . $user->format_date($row[$this->get('published')])				. (($this->is_moderator_approve_forum($row['forum_id']) && !$row['post_approved']) ? ' ' . $this->separator_stats . ' ' . $user->lang['POST_UNAPPROVED'] : '');		}	}}/*** Abstract class for topic based feeds** @package phpBB3*/class phpbb_feed_topic_base extends phpbb_feed_base{	var $num_items = 'feed_limit_topic';	function set_keys()	{		$this->set('title',		'topic_title');		$this->set('title2',	'forum_name');		$this->set('author_id',	'topic_poster');		$this->set('creator',	'topic_first_poster_name');		$this->set('published',	'post_time');		$this->set('updated',	'post_edit_time');		$this->set('text',		'post_text');		$this->set('bitfield',	'bbcode_bitfield');		$this->set('bbcode_uid','bbcode_uid');		$this->set('enable_bbcode',		'enable_bbcode');		$this->set('enable_smilies',	'enable_smilies');		$this->set('enable_magic_url',	'enable_magic_url');	}	function adjust_item(&$item_row, &$row)	{		global $phpEx, $config, $user;		$item_row['link'] = feed_append_sid('/viewtopic.' . $phpEx, 't=' . $row['topic_id'] . '&amp;p=' . $row['post_id'] . '#p' . $row['post_id']);		if ($config['feed_item_statistics'])		{			$item_row['statistics'] = $user->lang['POSTED'] . ' ' . $user->lang['POST_BY_AUTHOR'] . ' ' . $this->user_viewprofile($row)				. ' ' . $this->separator_stats . ' ' . $user->format_date($row[$this->get('published')])				. ' ' . $this->separator_stats . ' ' . $user->lang['REPLIES'] . ' ' . (($this->is_moderator_approve_forum($row['forum_id'])) ? $row['topic_replies_real'] : $row['topic_replies'])				. ' ' . $this->separator_stats . ' ' . $user->lang['VIEWS'] . ' ' . $row['topic_views']				. (($this->is_moderator_approve_forum($row['forum_id']) && ($row['topic_replies_real'] != $row['topic_replies'])) ? ' ' . $this->separator_stats . ' ' . $user->lang['POSTS_UNAPPROVED'] : '');		}	}}/*** Board wide feed (aka overall feed)** This will give you the newest {$this->num_items} posts* from the whole board.** @package phpBB3*/class phpbb_feed_overall extends phpbb_feed_post_base{	function get_sql()	{		global $auth, $db;		$forum_ids = array_diff($this->get_readable_forums(), $this->get_excluded_forums(), $this->get_passworded_forums());		if (empty($forum_ids))		{			return false;		}		// Add global forum id		$forum_ids[] = 0;		// m_approve forums		$fid_m_approve = $this->get_moderator_approve_forums();		$sql_m_approve = (!empty($fid_m_approve)) ? 'OR ' . $db->sql_in_set('forum_id', $fid_m_approve) : '';		// Determine topics with recent activity		$sql = 'SELECT topic_id, topic_last_post_time			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('forum_id', $forum_ids) . '				AND topic_moved_id = 0				AND (topic_approved = 1					' . $sql_m_approve . ')			ORDER BY topic_last_post_time DESC';		$result = $db->sql_query_limit($sql, $this->num_items);		$topic_ids = array();		$min_post_time = 0;		while ($row = $db->sql_fetchrow())		{			$topic_ids[] = (int) $row['topic_id'];			$min_post_time = (int) $row['topic_last_post_time'];		}		$db->sql_freeresult($result);		if (empty($topic_ids))		{			return false;		}		// Get the actual data		$this->sql = array(			'SELECT'	=>	'f.forum_id, f.forum_name, ' .							'p.post_id, p.topic_id, p.post_time, p.post_edit_time, p.post_approved, p.post_subject, p.post_text, p.bbcode_bitfield, p.bbcode_uid, p.enable_bbcode, p.enable_smilies, p.enable_magic_url, ' .							'u.username, u.user_id',			'FROM'		=> array(				USERS_TABLE		=> 'u',				POSTS_TABLE		=> 'p',			),			'LEFT_JOIN'	=> array(				array(					'FROM'	=> array(FORUMS_TABLE	=> 'f'),					'ON'	=> 'f.forum_id = p.forum_id',				),			),			'WHERE'		=> $db->sql_in_set('p.topic_id', $topic_ids) . '							AND (p.post_approved = 1								' . str_replace('forum_id', 'p.forum_id', $sql_m_approve) . ')							AND p.post_time >= ' . $min_post_time . '							AND u.user_id = p.poster_id',			'ORDER_BY'	=> 'p.post_time DESC',		);		return true;	}	function adjust_item(&$item_row, &$row)	{		parent::adjust_item($item_row, $row);		$item_row['title'] = (isset($row['forum_name']) && $row['forum_name'] !== '') ? $row['forum_name'] . ' ' . $this->separator . ' ' . $item_row['title'] : $item_row['title'];	}}/*** Forum feed** This will give you the last {$this->num_items} posts made* within a specific forum.** @package phpBB3*/class phpbb_feed_forum extends phpbb_feed_post_base{	var $forum_id		= 0;	var $forum_data		= array();	function phpbb_feed_forum($forum_id)	{		parent::phpbb_feed_base();		$this->forum_id = (int) $forum_id;	}	function open()	{		global $db, $auth;		// Check if forum exists		$sql = 'SELECT forum_id, forum_name, forum_password, forum_type, forum_options			FROM ' . FORUMS_TABLE . '			WHERE forum_id = ' . $this->forum_id;		$result = $db->sql_query($sql);		$this->forum_data = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (empty($this->forum_data))		{			trigger_error('NO_FORUM');		}		// Forum needs to be postable		if ($this->forum_data['forum_type'] != FORUM_POST)		{			trigger_error('NO_FEED');		}		// Make sure forum is not excluded from feed		if (phpbb_optionget(FORUM_OPTION_FEED_EXCLUDE, $this->forum_data['forum_options']))		{			trigger_error('NO_FEED');		}		// Make sure we can read this forum		if (!$auth->acl_get('f_read', $this->forum_id))		{			trigger_error('SORRY_AUTH_READ');		}		// Make sure forum is not passworded or user is authed		if ($this->forum_data['forum_password'])		{			$forum_ids_passworded = $this->get_passworded_forums();			if (isset($forum_ids_passworded[$this->forum_id]))			{				trigger_error('SORRY_AUTH_READ');			}			unset($forum_ids_passworded);		}	}	function get_sql()	{		global $auth, $db;		$m_approve = ($auth->acl_get('m_approve', $this->forum_id)) ? true : false;		$forum_ids = array(0, $this->forum_id);		// Determine topics with recent activity		$sql = 'SELECT topic_id, topic_last_post_time			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('forum_id', $forum_ids) . '				AND topic_moved_id = 0				' . ((!$m_approve) ? 'AND topic_approved = 1' : '') . '			ORDER BY topic_last_post_time DESC';		$result = $db->sql_query_limit($sql, $this->num_items);		$topic_ids = array();		$min_post_time = 0;		while ($row = $db->sql_fetchrow())		{			$topic_ids[] = (int) $row['topic_id'];			$min_post_time = (int) $row['topic_last_post_time'];		}		$db->sql_freeresult($result);		if (empty($topic_ids))		{			return false;		}		$this->sql = array(			'SELECT'	=>	'p.post_id, p.topic_id, p.post_time, p.post_edit_time, p.post_approved, p.post_subject, p.post_text, p.bbcode_bitfield, p.bbcode_uid, p.enable_bbcode, p.enable_smilies, p.enable_magic_url, ' .							'u.username, u.user_id',			'FROM'		=> array(				POSTS_TABLE		=> 'p',				USERS_TABLE		=> 'u',			),			'WHERE'		=> $db->sql_in_set('p.topic_id', $topic_ids) . '							' . ((!$m_approve) ? 'AND p.post_approved = 1' : '') . '							AND p.post_time >= ' . $min_post_time . '							AND p.poster_id = u.user_id',			'ORDER_BY'	=> 'p.post_time DESC',		);		return true;	}	function adjust_item(&$item_row, &$row)	{		parent::adjust_item($item_row, $row);		$item_row['title'] = (isset($row['forum_name']) && $row['forum_name'] !== '') ? $row['forum_name'] . ' ' . $this->separator . ' ' . $item_row['title'] : $item_row['title'];	}	function get_item()	{		return ($row = parent::get_item()) ? array_merge($this->forum_data, $row) : $row;	}}/*** Topic feed for a specific topic** This will give you the last {$this->num_items} posts made within this topic.** @package phpBB3*/class phpbb_feed_topic extends phpbb_feed_post_base{	var $topic_id		= 0;	var $forum_id		= 0;	var $topic_data		= array();	function phpbb_feed_topic($topic_id)	{		parent::phpbb_feed_base();		$this->topic_id = (int) $topic_id;	}	function open()	{		global $auth, $db, $user;		$sql = 'SELECT f.forum_options, f.forum_password, t.topic_id, t.forum_id, t.topic_approved, t.topic_title, t.topic_time, t.topic_views, t.topic_replies, t.topic_type			FROM ' . TOPICS_TABLE . ' t			LEFT JOIN ' . FORUMS_TABLE . ' f				ON (f.forum_id = t.forum_id)			WHERE t.topic_id = ' . $this->topic_id;		$result = $db->sql_query($sql);		$this->topic_data = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (empty($this->topic_data))		{			trigger_error('NO_TOPIC');		}		if ($this->topic_data['topic_type'] == POST_GLOBAL)		{			// We need to find at least one postable forum where feeds are enabled,			// that the user can read and maybe also has approve permissions.			$in_fid_ary = $this->get_readable_forums();			if (empty($in_fid_ary))			{				// User cannot read any forums				trigger_error('SORRY_AUTH_READ');			}			if (!$this->topic_data['topic_approved'])			{				// Also require m_approve				$in_fid_ary = array_intersect($in_fid_ary, $this->get_moderator_approve_forums());				if (empty($in_fid_ary))				{					trigger_error('SORRY_AUTH_READ');				}			}			// Diff excluded forums			$in_fid_ary = array_diff($in_fid_ary, $this->get_excluded_forums());			if (empty($in_fid_ary))			{				trigger_error('SORRY_AUTH_READ');			}			// Also exclude passworded forums			$in_fid_ary = array_diff($in_fid_ary, $this->get_passworded_forums());			if (empty($in_fid_ary))			{				trigger_error('SORRY_AUTH_READ');			}			$sql = 'SELECT forum_id, left_id				FROM ' . FORUMS_TABLE . '				WHERE forum_type = ' . FORUM_POST . '					AND ' . $db->sql_in_set('forum_id', $in_fid_ary) . '				ORDER BY left_id ASC';			$result = $db->sql_query_limit($sql, 1);			$this->forum_data = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (empty($this->forum_data))			{				// No forum found.				trigger_error('SORRY_AUTH_READ');			}			unset($in_fid_ary);		}		else		{			$this->forum_id = (int) $this->topic_data['forum_id'];			// Make sure topic is either approved or user authed			if (!$this->topic_data['topic_approved'] && !$auth->acl_get('m_approve', $this->forum_id))			{				trigger_error('SORRY_AUTH_READ');			}			// Make sure forum is not excluded from feed			if (phpbb_optionget(FORUM_OPTION_FEED_EXCLUDE, $this->topic_data['forum_options']))			{				trigger_error('NO_FEED');			}			// Make sure we can read this forum			if (!$auth->acl_get('f_read', $this->forum_id))			{				trigger_error('SORRY_AUTH_READ');			}			// Make sure forum is not passworded or user is authed			if ($this->topic_data['forum_password'])			{				$forum_ids_passworded = $this->get_passworded_forums();				if (isset($forum_ids_passworded[$this->forum_id]))				{					trigger_error('SORRY_AUTH_READ');				}				unset($forum_ids_passworded);			}		}	}	function get_sql()	{		global $auth, $db;		$this->sql = array(			'SELECT'	=>	'p.post_id, p.post_time, p.post_edit_time, p.post_approved, p.post_subject, p.post_text, p.bbcode_bitfield, p.bbcode_uid, p.enable_bbcode, p.enable_smilies, p.enable_magic_url, ' .							'u.username, u.user_id',			'FROM'		=> array(				POSTS_TABLE		=> 'p',				USERS_TABLE		=> 'u',			),			'WHERE'		=> 'p.topic_id = ' . $this->topic_id . '								' . ($this->forum_id && !$auth->acl_get('m_approve', $this->forum_id) ? 'AND p.post_approved = 1' : '') . '								AND p.poster_id = u.user_id',			'ORDER_BY'	=> 'p.post_time DESC',		);		return true;	}	function get_item()	{		return ($row = parent::get_item()) ? array_merge($this->topic_data, $row) : $row;	}}/*** 'All Forums' feed** This will give you a list of all postable forums where feeds are enabled* including forum description, topic stats and post stats** @package phpBB3*/class phpbb_feed_forums extends phpbb_feed_base{	var $num_items	= 0;	function set_keys()	{		$this->set('title',		'forum_name');		$this->set('text',		'forum_desc');		$this->set('bitfield',	'forum_desc_bitfield');		$this->set('bbcode_uid','forum_desc_uid');		$this->set('updated',	'forum_last_post_time');		$this->set('options',	'forum_desc_options');	}	function get_sql()	{		global $auth, $db;		$in_fid_ary = array_diff($this->get_readable_forums(), $this->get_excluded_forums());		if (empty($in_fid_ary))		{			return false;		}		// Build SQL Query		$this->sql = array(			'SELECT'	=> 'f.forum_id, f.left_id, f.forum_name, f.forum_last_post_time,							f.forum_desc, f.forum_desc_bitfield, f.forum_desc_uid, f.forum_desc_options,							f.forum_topics, f.forum_posts',			'FROM'		=> array(FORUMS_TABLE => 'f'),			'WHERE'		=> 'f.forum_type = ' . FORUM_POST . '							AND ' . $db->sql_in_set('f.forum_id', $in_fid_ary),			'ORDER_BY'	=> 'f.left_id ASC',		);		return true;	}	function adjust_item(&$item_row, &$row)	{		global $phpEx, $config;		$item_row['link'] = feed_append_sid('/viewforum.' . $phpEx, 'f=' . $row['forum_id']);		if ($config['feed_item_statistics'])		{			global $user;			$item_row['statistics'] = sprintf($user->lang['TOTAL_TOPICS_OTHER'], $row['forum_topics'])				. ' ' . $this->separator_stats . ' ' . sprintf($user->lang['TOTAL_POSTS_OTHER'], $row['forum_posts']);		}	}}/*** News feed** This will give you {$this->num_items} first posts* of all topics in the selected news forums.** @package phpBB3*/class phpbb_feed_news extends phpbb_feed_topic_base{	function get_news_forums()	{		global $db, $cache;		static $forum_ids;		// Matches acp/acp_board.php		$cache_name	= 'feed_news_forum_ids';		if (!isset($forum_ids) && ($forum_ids = $cache->get('_' . $cache_name)) === false)		{			$sql = 'SELECT forum_id				FROM ' . FORUMS_TABLE . '				WHERE ' . $db->sql_bit_and('forum_options', FORUM_OPTION_FEED_NEWS, '<> 0');			$result = $db->sql_query($sql);			$forum_ids = array();			while ($forum_id = (int) $db->sql_fetchfield('forum_id'))			{				$forum_ids[$forum_id] = $forum_id;			}			$db->sql_freeresult($result);			$cache->put('_' . $cache_name, $forum_ids);		}		return $forum_ids;	}	function get_sql()	{		global $auth, $config, $db;		// Determine forum ids		$in_fid_ary = array_intersect($this->get_news_forums(), $this->get_readable_forums());		if (empty($in_fid_ary))		{			return false;		}		$in_fid_ary = array_diff($in_fid_ary, $this->get_passworded_forums());		if (empty($in_fid_ary))		{			return false;		}		// Add global forum		$in_fid_ary[] = 0;		// We really have to get the post ids first!		$sql = 'SELECT topic_first_post_id, topic_time			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('forum_id', $in_fid_ary) . '				AND topic_moved_id = 0				AND topic_approved = 1			ORDER BY topic_time DESC';		$result = $db->sql_query_limit($sql, $this->num_items);		$post_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$post_ids[] = (int) $row['topic_first_post_id'];		}		$db->sql_freeresult($result);		if (empty($post_ids))		{			return false;		}		$this->sql = array(			'SELECT'	=> 'f.forum_id, f.forum_name,							t.topic_id, t.topic_title, t.topic_poster, t.topic_first_poster_name, t.topic_replies, t.topic_replies_real, t.topic_views, t.topic_time, t.topic_last_post_time,							p.post_id, p.post_time, p.post_edit_time, p.post_text, p.bbcode_bitfield, p.bbcode_uid, p.enable_bbcode, p.enable_smilies, p.enable_magic_url',			'FROM'		=> array(				TOPICS_TABLE	=> 't',				POSTS_TABLE		=> 'p',			),			'LEFT_JOIN'	=> array(				array(					'FROM'	=> array(FORUMS_TABLE => 'f'),					'ON'	=> 'p.forum_id = f.forum_id',				),			),			'WHERE'		=> 'p.topic_id = t.topic_id							AND ' . $db->sql_in_set('p.post_id', $post_ids),			'ORDER_BY'	=> 'p.post_time DESC',		);		return true;	}}/*** New Topics feed** This will give you the last {$this->num_items} created topics* including the first post.** @package phpBB3*/class phpbb_feed_topics extends phpbb_feed_topic_base{	function get_sql()	{		global $db, $config;		$forum_ids_read = $this->get_readable_forums();		if (empty($forum_ids_read))		{			return false;		}		$in_fid_ary = array_diff($forum_ids_read, $this->get_excluded_forums(), $this->get_passworded_forums());		if (empty($in_fid_ary))		{			return false;		}		// Add global forum		$in_fid_ary[] = 0;		// We really have to get the post ids first!		$sql = 'SELECT topic_first_post_id, topic_time			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('forum_id', $in_fid_ary) . '				AND topic_moved_id = 0				AND topic_approved = 1			ORDER BY topic_time DESC';		$result = $db->sql_query_limit($sql, $this->num_items);		$post_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$post_ids[] = (int) $row['topic_first_post_id'];		}		$db->sql_freeresult($result);		if (empty($post_ids))		{			return false;		}		$this->sql = array(			'SELECT'	=> 'f.forum_id, f.forum_name,							t.topic_id, t.topic_title, t.topic_poster, t.topic_first_poster_name, t.topic_replies, t.topic_replies_real, t.topic_views, t.topic_time, t.topic_last_post_time,							p.post_id, p.post_time, p.post_edit_time, p.post_text, p.bbcode_bitfield, p.bbcode_uid, p.enable_bbcode, p.enable_smilies, p.enable_magic_url',			'FROM'		=> array(				TOPICS_TABLE	=> 't',				POSTS_TABLE		=> 'p',			),			'LEFT_JOIN'	=> array(				array(					'FROM'	=> array(FORUMS_TABLE => 'f'),					'ON'	=> 'p.forum_id = f.forum_id',				),			),			'WHERE'		=> 'p.topic_id = t.topic_id							AND ' . $db->sql_in_set('p.post_id', $post_ids),			'ORDER_BY'	=> 'p.post_time DESC',		);		return true;	}	function adjust_item(&$item_row, &$row)	{		parent::adjust_item($item_row, $row);		$item_row['title'] = (isset($row['forum_name']) && $row['forum_name'] !== '') ? $row['forum_name'] . ' ' . $this->separator . ' ' . $item_row['title'] : $item_row['title'];	}}/*** Active Topics feed** This will give you the last {$this->num_items} topics* with replies made withing the last {$this->sort_days} days* including the last post.** @package phpBB3*/class phpbb_feed_topics_active extends phpbb_feed_topic_base{	var $sort_days = 7;	function set_keys()	{		parent::set_keys();		$this->set('author_id',	'topic_last_poster_id');		$this->set('creator',	'topic_last_poster_name');	}	function get_sql()	{		global $db, $config;		$forum_ids_read = $this->get_readable_forums();		if (empty($forum_ids_read))		{			return false;		}		$in_fid_ary = array_intersect($forum_ids_read, $this->get_forum_ids());		$in_fid_ary = array_diff($in_fid_ary, $this->get_passworded_forums());		if (empty($in_fid_ary))		{			return false;		}		// Add global forum		$in_fid_ary[] = 0;		// Search for topics in last X days		$last_post_time_sql = ($this->sort_days) ? ' AND topic_last_post_time > ' . (time() - ($this->sort_days * 24 * 3600)) : '';		// We really have to get the post ids first!		$sql = 'SELECT topic_last_post_id, topic_last_post_time			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('forum_id', $in_fid_ary) . '				AND topic_moved_id = 0				AND topic_approved = 1				' . $last_post_time_sql . '			ORDER BY topic_last_post_time DESC';		$result = $db->sql_query_limit($sql, $this->num_items);		$post_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$post_ids[] = (int) $row['topic_last_post_id'];		}		$db->sql_freeresult($result);		if (empty($post_ids))		{			return false;		}		$this->sql = array(			'SELECT'	=> 'f.forum_id, f.forum_name,							t.topic_id, t.topic_title, t.topic_replies, t.topic_replies_real, t.topic_views,							t.topic_last_poster_id, t.topic_last_poster_name, t.topic_last_post_time,							p.post_id, p.post_time, p.post_edit_time, p.post_text, p.bbcode_bitfield, p.bbcode_uid, p.enable_bbcode, p.enable_smilies, p.enable_magic_url',			'FROM'		=> array(				TOPICS_TABLE	=> 't',				POSTS_TABLE		=> 'p',			),			'LEFT_JOIN'	=> array(				array(					'FROM'	=> array(FORUMS_TABLE => 'f'),					'ON'	=> 'p.forum_id = f.forum_id',				),			),			'WHERE'		=> 'p.topic_id = t.topic_id							AND ' . $db->sql_in_set('p.post_id', $post_ids),			'ORDER_BY'	=> 'p.post_time DESC',		);		return true;	}	function get_forum_ids()	{		global $db, $cache;		static $forum_ids;		$cache_name	= 'feed_topic_active_forum_ids';		if (!isset($forum_ids) && ($forum_ids = $cache->get('_' . $cache_name)) === false)		{			$sql = 'SELECT forum_id				FROM ' . FORUMS_TABLE . '				WHERE forum_type = ' . FORUM_POST . '					AND ' . $db->sql_bit_and('forum_options', FORUM_OPTION_FEED_EXCLUDE, '= 0') . '					AND ' . $db->sql_bit_and('forum_flags', log(FORUM_FLAG_ACTIVE_TOPICS, 2), '<> 0');			$result = $db->sql_query($sql);			$forum_ids = array();			while ($forum_id = (int) $db->sql_fetchfield('forum_id'))			{				$forum_ids[$forum_id] = $forum_id;			}			$db->sql_freeresult($result);			$cache->put('_' . $cache_name, $forum_ids, 180);		}		return $forum_ids;	}	function adjust_item(&$item_row, &$row)	{		parent::adjust_item($item_row, $row);		$item_row['title'] = (isset($row['forum_name']) && $row['forum_name'] !== '') ? $row['forum_name'] . ' ' . $this->separator . ' ' . $item_row['title'] : $item_row['title'];	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_inactive_info{	function module()	{		return array(			'filename'	=> 'acp_inactive',			'title'		=> 'ACP_INACTIVE_USERS',			'version'	=> '1.0.0',			'modes'		=> array(				'list'		=> array('title' => 'ACP_INACTIVE_USERS', 'auth' => 'acl_a_user', 'cat' => array('ACP_CAT_USERS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** help_faq [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/if (!defined('IN_PHPBB')){	exit;}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$help = array(	array(		0 => '--',		1 => 'Login and Registration Issues'	),	array(		0 => 'Why cant I login?',		1 => 'There are several reasons why this could occur. First, ensure your username and password are correct. If they are, contact the board owner to make sure you havent been banned. It is also possible the website owner has a configuration error on their end, and they would need to fix it.'	),	array(		0 => 'Why do I need to register at all?',		1 => 'You may not have to, it is up to the administrator of the board as to whether you need to register in order to post messages. However; registration will give you access to additional features not available to guest users such as definable avatar images, private messaging, emailing of fellow users, usergroup subscription, etc. It only takes a few moments to register so it is recommended you do so.'	),	array(		0 => 'Why do I get logged off automatically?',		1 => 'If you do not check the <em>Log me in automatically</em> box when you login, the board will only keep you logged in for a preset time. This prevents misuse of your account by anyone else. To stay logged in, check the box during login. This is not recommended if you access the board from a shared computer, e.g. library, internet cafe, university computer lab, etc. If you do not see this checkbox, it means the board administrator has disabled this feature.'	),	array(		0 => 'How do I prevent my username appearing in the online user listings?',		1 => 'Within your User Control Panel, under Board preferences, you will find the option <em>Hide your online status</em>. Enable this option with <samp>Yes</samp> and you will only appear to the administrators, moderators and yourself. You will be counted as a hidden user.'	),	array(		0 => 'Ive lost my password!',		1 => 'Dont panic! While your password cannot be retrieved, it can easily be reset. Visit the login page and click <em>Ive forgotten my password</em>. Follow the instructions and you should be able to log in again shortly.'	),	array(		0 => 'I registered but cannot login!',		1 => 'First, check your username and password. If they are correct, then one of two things may have happened. If COPPA support is enabled and you specified being under 13 years old during registration, you will have to follow the instructions you received. Some boards will also require new registrations to be activated, either by yourself or by an administrator before you can logon; this information was present during registration. If you were sent an e-mail, follow the instructions. If you did not receive an e-mail, you may have provided an incorrect e-mail address or the e-mail may have been picked up by a spam filer. If you are sure the e-mail address you provided is correct, try contacting an administrator.'	),	array(		0 => 'I registered in the past but cannot login any more?!',		1 => 'It is possible an administrator has deactivated or deleted your account for some reason. Also, many boards periodically remove users who have not posted for a long time to reduce the size of the database. If this has happened, try registering again and being more involved in discussions.'	),	array(		0 => 'What is COPPA?',		1 => 'COPPA, or the Child Online Privacy and Protection Act of 1998, is a law in the United States requiring websites which can potentially collect information from minors under the age of 13 to have written parental consent or some other method of legal guardian acknowledgment, allowing the collection of personally identifiable information from a minor under the age of 13. If you are unsure if this applies to you as someone trying to register or to the website you are trying to register on, contact legal counsel for assistance. Please note that the phpBB Group cannot provide legal advice and is not a point of contact for legal concerns of any kind, except as outlined below.',	),	array(		0 => 'Why cant I register?',		1 => 'It is possible the website owner has banned your IP address or disallowed the username you are attempting to register. The website owner could have also disabled registration to prevent new visitors from signing up. Contact a board administrator for assistance.',	),	array(		0 => 'What does the Delete all board cookies do?',		1 => 'Delete all board cookies deletes the cookies created by phpBB which keep you authenticated and logged into the board. It also provides functions such as read tracking if they have been enabled by the board owner. If you are having login or logout problems, deleting board cookies may help.',	),	array(		0 => '--',		1 => 'User Preferences and settings'	),	array(		0 => 'How do I change my settings?',		1 => 'If you are a registered user, all your settings are stored in the board database. To alter them, visit your User Control Panel; a link can usually be found at the top of board pages. This system will allow you to change all your settings and preferences.'	),	array(		0 => 'The times are not correct!',		1 => 'It is possible the time displayed is from a timezone different from the one you are in. If this is the case, visit your User Control Panel and change your timezone to match your particular area, e.g. London, Paris, New York, Sydney, etc. Please note that changing the timezone, like most settings, can only be done by registered users. If you are not registered, this is a good time to do so.'	),	array(		0 => 'I changed the timezone and the time is still wrong!',		1 => 'If you are sure you have set the timezone and Summer Time/DST correctly and the time is still incorrect, then the time stored on the server clock is incorrect. Please notify an administrator to correct the problem.'	),	array(		0 => 'My language is not in the list!',		1 => 'Either the administrator has not installed your language or nobody has translated this board into your language. Try asking the board administrator if they can install the language pack you need. If the language pack does not exist, feel free to create a new translation. More information can be found at the phpBB website (see link at the bottom of board pages).'	),	array(		0 => 'How do I show an image along with my username?',		1 => 'There are two images which may appear along with a username when viewing posts. One of them may be an image associated with your rank, generally in the form of stars, blocks or dots, indicating how many posts you have made or your status on the board. Another, usually a larger image, is known as an avatar and is generally unique or personal to each user. It is up to the board administrator to enable avatars and to choose the way in which avatars can be made available. If you are unable to use avatars, contact a board administrator and ask them for their reasons.'	),	array(		0 => 'What is my rank and how do I change it?',		1 => 'Ranks, which appear below your username, indicate the number of posts you have made or identify certain users, e.g. moderators and administrators. In general, you cannot directly change the wording of any board ranks as they are set by the board administrator. Please do not abuse the board by posting unnecessarily just to increase your rank. Most boards will not tolerate this and the moderator or administrator will simply lower your post count.'	),	array(		0 => 'When I click the e-mail link for a user it asks me to login?',		1 => 'Only registered users can send e-mail to other users via the built-in e-mail form, and only if the administrator has enabled this feature. This is to prevent malicious use of the e-mail system by anonymous users.'	),	array(		0 => '--',		1 => 'Posting Issues'	),	array(		0 => 'How do I post a topic in a forum?',		1 => 'To post a new topic in a forum, click the relevant button on either the forum or topic screens. You may need to register before you can post a message. A list of your permissions in each forum is available at the bottom of the forum and topic screens. Example: You can post new topics, You can vote in polls, etc.'	),	array(		0 => 'How do I edit or delete a post?',		1 => 'Unless you are a board administrator or moderator, you can only edit or delete your own posts. You can edit a post by clicking the edit button for the relevant post, sometimes for only a limited time after the post was made. If someone has already replied to the post, you will find a small piece of text output below the post when you return to the topic which lists the number of times you edited it along with the date and time. This will only appear if someone has made a reply; it will not appear if a moderator or administrator edited the post, though they may leave a note as to why theyve edited the post at their own discretion. Please note that normal users cannot delete a post once someone has replied.'	),	array(		0 => 'How do I add a signature to my post?',		1 => 'To add a signature to a post you must first create one via your User Control Panel. Once created, you can check the <em>Attach a signature</em> box on the posting form to add your signature. You can also add a signature by default to all your posts by checking the appropriate radio button in your profile. If you do so, you can still prevent a signature being added to individual posts by un-checking the add signature box within the posting form.'	),	array(		0 => 'How do I create a poll?',		1 => 'When posting a new topic or editing the first post of a topic, click the Poll creation tab below the main posting form; if you cannot see this, you do not have appropriate permissions to create polls. Enter a title and at least two options in the appropriate fields, making sure each option is on a separate line in the textarea. You can also set the number of options users may select during voting under Options per user, a time limit in days for the poll (0 for infinite duration) and lastly the option to allow users to amend their votes.'	),	array(		0 => 'Why cant I add more poll options?',		1 => 'The limit for poll options is set by the board administrator. If you feel you need to add more options to your poll than the allowed amount, contact the board administrator.'	),	array(		0 => 'How do I edit or delete a poll?',		1 => 'As with posts, polls can only be edited by the original poster, a moderator or an administrator. To edit a poll, click to edit the first post in the topic; this always has the poll associated with it. If no one has cast a vote, users can delete the poll or edit any poll option. However, if members have already placed votes, only moderators or administrators can edit or delete it. This prevents the polls options from being changed mid-way through a poll.'	),	array(		0 => 'Why cant I access a forum?',		1 => 'Some forums may be limited to certain users or groups. To view, read, post or perform another action you may need special permissions. Contact a moderator or board administrator to grant you access.'	),	array(		0 => 'Why cant I add attachments?',		1 => 'Attachment permissions are granted on a per forum, per group, or per user basis. The board administrator may not have allowed attachments to be added for the specific forum you are posting in, or perhaps only certain groups can post attachments. Contact the board administrator if you are unsure about why you are unable to add attachments.'	),	array(		0 => 'Why did I receive a warning?',		1 => 'Each board administrator has their own set of rules for their site. If you have broken a rule, you may be issued a warning. Please note that this is the board administrators decision, and the phpBB Group has nothing to do with the warnings on the given site. Contact the board administrator if you are unsure about why you were issued a warning.'	),	array(		0 => 'How can I report posts to a moderator?',		1 => 'If the board administrator has allowed it, you should see a button for reporting posts next to the post you wish to report. Clicking this will walk you through the steps necessary to report the post.'	),	array(		0 => 'What is the Save button for in topic posting?',		1 => 'This allows you to save passages to be completed and submitted at a later date. To reload a saved passage, visit the User Control Panel.'	),	array(		0 => 'Why does my post need to be approved?',		1 => 'The board administrator may have decided that posts in the forum you are posting to require review before submission. It is also possible that the administrator has placed you in a group of users whose posts require review before submission. Please contact the board administrator for further details.'	),	array(		0 => 'How do I bump my topic?',		1 => 'By clicking the Bump topic link when you are viewing it, you can bump the topic to the top of the forum on the first page. However, if you do not see this, then topic bumping may be disabled or the time allowance between bumps has not yet been reached. It is also possible to bump the topic simply by replying to it, however, be sure to follow the board rules when doing so.'	),	array(		0 => '--',		1 => 'Formatting and Topic Types'	),	array(		0 => 'What is BBCode?',		1 => 'BBCode is a special implementation of HTML, offering great formatting control on particular objects in a post. The use of BBCode is granted by the administrator, but it can also be disabled on a per post basis from the posting form. BBCode itself is similar in style to HTML, but tags are enclosed in square brackets [ and ] rather than &lt; and &gt;. For more information on BBCode see the guide which can be accessed from the posting page.'	),	array(		0 => 'Can I use HTML?',		1 => 'No. It is not possible to post HTML on this board and have it rendered as HTML. Most formatting which can be carried out using HTML can be applied using BBCode instead.'	),	array(		0 => 'What are Smilies?',		1 => 'Smilies, or Emoticons, are small images which can be used to express a feeling using a short code, e.g. :) denotes happy, while :( denotes sad. The full list of emoticons can be seen in the posting form. Try not to overuse smilies, however, as they can quickly render a post unreadable and a moderator may edit them out or remove the post altogether. The board administrator may also have set a limit to the number of smilies you may use within a post.'	),	array(		0 => 'Can I post images?',		1 => 'Yes, images can be shown in your posts. If the administrator has allowed attachments, you may be able to upload the image to the board. Otherwise, you must link to an image stored on a publicly accessible web server, e.g. http://www.example.com/my-picture.gif. You cannot link to pictures stored on your own PC (unless it is a publicly accessible server) nor images stored behind authentication mechanisms, e.g. hotmail or yahoo mailboxes, password protected sites, etc. To display the image use the BBCode [img] tag.'	),	array(		0 => 'What are global announcements?',		1 => 'Global announcements contain important information and you should read them whenever possible. They will appear at the top of every forum and within your User Control Panel. Global announcement permissions are granted by the board administrator.'	),	array(		0 => 'What are announcements?',		1 => 'Announcements often contain important information for the forum you are currently reading and you should read them whenever possible. Announcements appear at the top of every page in the forum to which they are posted. As with global announcements, announcement permissions are granted by the board administrator.'	),	array(		0 => 'What are sticky topics?',		1 => 'Sticky topics within the forum appear below announcements and only on the first page. They are often quite important so you should read them whenever possible. As with announcements and global announcements, sticky topic permissions are granted by the board administrator.'	),	array(		0 => 'What are locked topics?',		1 => 'Locked topics are topics where users can no longer reply and any poll it contained was automatically ended. Topics may be locked for many reasons and were set this way by either the forum moderator or board administrator. You may also be able to lock your own topics depending on the permissions you are granted by the board administrator.'	),	array(		0 => 'What are topic icons?',		1 => 'Topic icons are author chosen images associated with posts to indicate their content. The ability to use topic icons depends on the permissions set by the board administrator.'	),	// This block will switch the FAQ-Questions to the second template column	array(		0 => '--',		1 => '--'	),	array(		0 => '--',		1 => 'User Levels and Groups'	),	array(		0 => 'What are Administrators?',		1 => 'Administrators are members assigned with the highest level of control over the entire board. These members can control all facets of board operation, including setting permissions, banning users, creating usergroups or moderators, etc., dependent upon the board founder and what permissions he or she has given the other administrators. They may also have full moderator capabilities in all forums, depending on the settings put forth by the board founder.'	),	array(		0 => 'What are Moderators?',		1 => 'Moderators are individuals (or groups of individuals) who look after the forums from day to day. They have the authority to edit or delete posts and lock, unlock, move, delete and split topics in the forum they moderate. Generally, moderators are present to prevent users from going off-topic or posting abusive or offensive material.'	),	array(		0 => 'What are usergroups?',		1 => 'Usergroups are groups of users that divide the community into manageable sections board administrators can work with. Each user can belong to several groups and each group can be assigned individual permissions. This provides an easy way for administrators to change permissions for many users at once, such as changing moderator permissions or granting users access to a private forum.'	),	array(		0 => 'Where are the usergroups and how do I join one?',		1 => 'You can view all usergroups via the Usergroups link within your User Control Panel. If you would like to join one, proceed by clicking the appropriate button. Not all groups have open access, however. Some may require approval to join, some may be closed and some may even have hidden memberships. If the group is open, you can join it by clicking the appropriate button. If a group requires approval to join you may request to join by clicking the appropriate button. The user group leader will need to approve your request and may ask why you want to join the group. Please do not harass a group leader if they reject your request; they will have their reasons.'	),	array(		0 => 'How do I become a usergroup leader?',		1 => 'A usergroup leader is usually assigned when usergroups are initially created by a board administrator. If you are interested in creating a usergroup, your first point of contact should be an administrator; try sending a private message.',	),	array(		0 => 'Why do some usergroups appear in a different colour?',		1 => 'It is possible for the board administrator to assign a colour to the members of a usergroup to make it easy to identify the members of this group.'	),	array(		0 => 'What is a Default usergroup?',		1 => 'If you are a member of more than one usergroup, your default is used to determine which group colour and group rank should be shown for you by default. The board administrator may grant you permission to change your default usergroup via your User Control Panel.'	),	array(		0 => 'What is The team link?',		1 => 'This page provides you with a list of board staff, including board administrators and moderators and other details such as the forums they moderate.'	),	array(		0 => '--',		1 => 'Private Messaging'	),	array(		0 => 'I cannot send private messages!',		1 => 'There are three reasons for this; you are not registered and/or not logged on, the board administrator has disabled private messaging for the entire board, or the board administrator has prevented you from sending messages. Contact a board administrator for more information.'	),	array(		0 => 'I keep getting unwanted private messages!',		1 => 'You can block a user from sending you private messages by using message rules within your User Control Panel. If you are receiving abusive private messages from a particular user, inform a board administrator; they have the power to prevent a user from sending private messages.'	),	array(		0 => 'I have received a spamming or abusive e-mail from someone on this board!',		1 => 'We are sorry to hear that. The e-mail form feature of this board includes safeguards to try and track users who send such posts, so e-mail the board administrator with a full copy of the e-mail you received. It is very important that this includes the headers that contain the details of the user that sent the e-mail. The board administrator can then take action.'	),	array(		0 => '--',		1 => 'Friends and Foes'	),	array(		0 => 'What are my Friends and Foes lists?',		1 => 'You can use these lists to organise other members of the board. Members added to your friends list will be listed within your User Control Panel for quick access to see their online status and to send them private messages. Subject to template support, posts from these users may also be highlighted. If you add a user to your foes list, any posts they make will be hidden by default.'	),	array(		0 => 'How can I add / remove users to my Friends or Foes list?',		1 => 'You can add users to your list in two ways. Within each users profile, there is a link to add them to either your Friend or Foe list. Alternatively, from your User Control Panel, you can directly add users by entering their member name. You may also remove users from your list using the same page.'	),	array(		0 => '--',		1 => 'Searching the Forums'	),	array(		0 => 'How can I search a forum or forums?',		1 => 'Enter a search term in the search box located on the index, forum or topic pages. Advanced search can be accessed by clicking the Advance Search link which is available on all pages on the forum. How to access the search may depend on the style used.'	),	array(		0 => 'Why does my search return no results?',		1 => 'Your search was probably too vague and included many common terms which are not indexed by phpBB3. Be more specific and use the options available within Advanced search.'	),	array(		0 => 'Why does my search return a blank page!?',		1 => 'Your search returned too many results for the webserver to handle. Use Advanced search and be more specific in the terms used and forums that are to be searched.'	),	array(		0 => 'How do I search for members?',		1 => 'Visit to the Members page and click the Find a member link.'	),	array(		0 => 'How can I find my own posts and topics?',		1 => 'Your own posts can be retrieved either by clicking the Search users posts within the User Control Panel or via your own profile page. To search for your topics, use the Advanced search page and fill in the various options appropriately.'	),	array(		0 => '--',		1 => 'Topic Subscriptions and Bookmarks'	),	array(		0 => 'What is the difference between bookmarking and subscribing?',		1 => 'Bookmarking in phpBB3 is much like bookmarking in your web browser. You arent alerted when theres an update, but you can come back to the topic later. Subscribing, however, will notify you when there is an update to the topic or forum on the board via your preferred method or methods.'	),	array(		0 => 'How do I subscribe to specific forums or topics?',		1 => 'To subscribe to a specific forum, click the Subscribe forum link upon entering the forum. To subscribe to a topic, reply to the topic with the subscribe checkbox checked or click the Subscribe topic link within the topic itself.'	),	array(		0 => 'How do I remove my subscriptions?',		1 => 'To remove your subscriptions, go to your User Control Panel and follow the links to your subscriptions.'	),	array(		0 => '--',		1 => 'Attachments'	),	array(		0 => 'What attachments are allowed on this board?',		1 => 'Each board administrator can allow or disallow certain attachment types. If you are unsure what is allowed to be uploaded, contact the board administrator for assistance.'	),	array(		0 => 'How do I find all my attachments?',		1 => 'To find your list of attachments that you have uploaded, go to your User Control Panel and follow the links to the attachments section.'	),	array(		0 => '--',		1 => 'phpBB 3 Issues'	),	array(		0 => 'Who wrote this bulletin board?',		1 => 'This software (in its unmodified form) is produced, released and is copyright <a href="http://www.phpbb.com/">phpBB Group</a>. It is made available under the GNU General Public License and may be freely distributed. See the link for more details.'	),	array(		0 => 'Why isnt X feature available?',		1 => 'This software was written by and licensed through phpBB Group. If you believe a feature needs to be added, please visit the phpbb.com website and see what phpBB Group have to say. Please do not post feature requests to the board at phpbb.com, the group uses SourceForge to handle tasking of new features. Please read through the forums and see what, if any, our position may already be for a feature and then follow the procedure given there.'	),	array(		0 => 'Who do I contact about abusive and/or legal matters related to this board?',		1 => 'Any of the administrators listed on the The team page should be an appropriate point of contact for your complaints. If this still gets no response then you should contact the owner of the domain (do a <a href="http://www.google.com/search?q=whois">whois lookup</a>) or, if this is running on a free service (e.g. Yahoo!, free.fr, f2s.com, etc.), the management or abuse department of that service. Please note that the phpBB Group has <strong>absolutely no jurisdiction</strong> and cannot in any way be held liable over how, where or by whom this board is used. Do not contact the phpBB Group in relation to any legal (cease and desist, liable, defamatory comment, etc.) matter <strong>not directly related</strong> to the phpBB.com website or the discrete software of phpBB itself. If you do e-mail phpBB Group <strong>about any third party</strong> use of this software then you should expect a terse response or no response at all.'	));?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_logs_info{	function module()	{		return array(			'filename'	=> 'acp_logs',			'title'		=> 'ACP_LOGGING',			'version'	=> '1.0.0',			'modes'		=> array(				'admin'		=> array('title' => 'ACP_ADMIN_LOGS', 'auth' => 'acl_a_viewlogs', 'cat' => array('ACP_FORUM_LOGS')),				'mod'		=> array('title' => 'ACP_MOD_LOGS', 'auth' => 'acl_a_viewlogs', 'cat' => array('ACP_FORUM_LOGS')),				'users'		=> array('title' => 'ACP_USERS_LOGS', 'auth' => 'acl_a_viewlogs', 'cat' => array('ACP_FORUM_LOGS')),				'critical'	=> array('title' => 'ACP_CRITICAL_LOGS', 'auth' => 'acl_a_viewlogs', 'cat' => array('ACP_FORUM_LOGS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** acp_profile [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// Custom profile fields$lang = array_merge($lang, array(	'ADDED_PROFILE_FIELD'	=> 'Successfully added custom profile field.',	'ALPHA_ONLY'			=> 'Alphanumeric only',	'ALPHA_SPACERS'			=> 'Alphanumeric and spacers',	'ALWAYS_TODAY'			=> 'Always the current date',	'BOOL_ENTRIES_EXPLAIN'	=> 'Enter your options now',	'BOOL_TYPE_EXPLAIN'		=> 'Define the type, either a checkbox or radio buttons. A checkbox will only be displayed if it is checked for a given user. In that case the <strong>second</strong> language option will be used. Radio buttons will display regardless of their value.',	'CHANGED_PROFILE_FIELD'		=> 'Successfully changed profile field.',	'CHARS_ANY'					=> 'Any character',	'CHECKBOX'					=> 'Checkbox',	'COLUMNS'					=> 'Columns',	'CP_LANG_DEFAULT_VALUE'		=> 'Default value',	'CP_LANG_EXPLAIN'			=> 'Field description',	'CP_LANG_EXPLAIN_EXPLAIN'	=> 'The explanation for this field presented to the user.',	'CP_LANG_NAME'				=> 'Field name/title presented to the user',	'CP_LANG_OPTIONS'			=> 'Options',	'CREATE_NEW_FIELD'			=> 'Create new field',	'CUSTOM_FIELDS_NOT_TRANSLATED'	=> 'At least one custom profile field has not yet been translated. Please enter the required information by clicking on the Translate link.',	'DEFAULT_ISO_LANGUAGE'			=> 'Default language [%s]',	'DEFAULT_LANGUAGE_NOT_FILLED'	=> 'The language entries for the default language are not filled for this profile field.',	'DEFAULT_VALUE'					=> 'Default value',	'DELETE_PROFILE_FIELD'			=> 'Remove profile field',	'DELETE_PROFILE_FIELD_CONFIRM'	=> 'Are you sure you want to delete this profile field?',	'DISPLAY_AT_PROFILE'			=> 'Display in user control panel',	'DISPLAY_AT_PROFILE_EXPLAIN'	=> 'The user is able to change this profile field within the user control panel.',	'DISPLAY_AT_REGISTER'			=> 'Display on registration screen',	'DISPLAY_AT_REGISTER_EXPLAIN'	=> 'If this option is enabled, the field will be displayed on registration.',	'DISPLAY_ON_VT'					=> 'Display on viewtopic screen',	'DISPLAY_ON_VT_EXPLAIN'			=> 'If this option is enabled, the field will be displayed in the mini-profile on the topic screen.',	'DISPLAY_PROFILE_FIELD'			=> 'Publicly display profile field',	'DISPLAY_PROFILE_FIELD_EXPLAIN'	=> 'The profile field will be shown in all locations allowed within the load settings. Setting this to no will hide the field from topic pages, profiles and the memberlist.',	'DROPDOWN_ENTRIES_EXPLAIN'		=> 'Enter your options now, every option in one line.',	'EDIT_DROPDOWN_LANG_EXPLAIN'	=> 'Please note that you are able to change your options text and also able to add new options to the end. It is not advised to add new options between existing options - this could result in wrong options assigned to your users. This can also happen if you remove options in-between. Removing options from the end result in users having assigned this item now reverting back to the default one.',	'EMPTY_FIELD_IDENT'				=> 'Empty field identification',	'EMPTY_USER_FIELD_NAME'			=> 'Please enter a field name/title',	'ENTRIES'						=> 'Entries',	'EVERYTHING_OK'					=> 'Everything OK',	'FIELD_BOOL'				=> 'Boolean (Yes/No)',	'FIELD_DATE'				=> 'Date',	'FIELD_DESCRIPTION'			=> 'Field description',	'FIELD_DESCRIPTION_EXPLAIN'	=> 'The explanation for this field presented to the user.',	'FIELD_DROPDOWN'			=> 'Dropdown box',	'FIELD_IDENT'				=> 'Field identification',	'FIELD_IDENT_ALREADY_EXIST'	=> 'The chosen field identification already exist. Please choose another name.',	'FIELD_IDENT_EXPLAIN'		=> 'The field identification is a name to identify the profile field within the database and the templates.',	'FIELD_INT'					=> 'Numbers',	'FIELD_LENGTH'				=> 'Length of input box',	'FIELD_NOT_FOUND'			=> 'Profile field not found.',	'FIELD_STRING'				=> 'Single text field',	'FIELD_TEXT'				=> 'Textarea',	'FIELD_TYPE'				=> 'Field type',	'FIELD_TYPE_EXPLAIN'		=> 'You are not able to change the field type later.',	'FIELD_VALIDATION'			=> 'Field validation',	'FIRST_OPTION'				=> 'First option',	'HIDE_PROFILE_FIELD'			=> 'Hide profile field',	'HIDE_PROFILE_FIELD_EXPLAIN'	=> 'Hide the profile field from all other users except the user, administrators and moderators who are still able to see this field. If the Display in user control panel option is disabled, the user will not be able to see or change this field and the field can only be changed by administrators.',	'INVALID_CHARS_FIELD_IDENT'	=> 'Field identification can only contain lowercase a-z and _',	'INVALID_FIELD_IDENT_LEN'	=> 'Field identification can only be 17 characters long',	'ISO_LANGUAGE'				=> 'Language [%s]',	'LANG_SPECIFIC_OPTIONS'		=> 'Language specific options [<strong>%s</strong>]',	'MAX_FIELD_CHARS'		=> 'Maximum number of characters',	'MAX_FIELD_NUMBER'		=> 'Highest allowed number',	'MIN_FIELD_CHARS'		=> 'Minimum number of characters',	'MIN_FIELD_NUMBER'		=> 'Lowest allowed number',	'NO_FIELD_ENTRIES'			=> 'No entries defined',	'NO_FIELD_ID'				=> 'No field id specified.',	'NO_FIELD_TYPE'				=> 'No Field type specified.',	'NO_VALUE_OPTION'			=> 'Option equal to non entered value',	'NO_VALUE_OPTION_EXPLAIN'	=> 'Value for a non-entry. If the field is required, the user gets an error if he choose the option selected here.',	'NUMBERS_ONLY'				=> 'Only numbers (0-9)',	'PROFILE_BASIC_OPTIONS'		=> 'Basic options',	'PROFILE_FIELD_ACTIVATED'	=> 'Profile field successfully activated.',	'PROFILE_FIELD_DEACTIVATED'	=> 'Profile field successfully deactivated.',	'PROFILE_LANG_OPTIONS'		=> 'Language specific options',	'PROFILE_TYPE_OPTIONS'		=> 'Profile type specific options',	'RADIO_BUTTONS'				=> 'Radio buttons',	'REMOVED_PROFILE_FIELD'		=> 'Successfully removed profile field.',	'REQUIRED_FIELD'			=> 'Required field',	'REQUIRED_FIELD_EXPLAIN'	=> 'Force profile field to be filled out or specified by user or administrator. If display at registration screen option is disabled, the field will only be required when the user edits their profile.',	'ROWS'						=> 'Rows',	'SAVE'							=> 'Save',	'SECOND_OPTION'					=> 'Second option',	'STEP_1_EXPLAIN_CREATE'			=> 'Here you can enter the first basic parameters of your new profile field. This information is needed for the second step where youll be able to set remaining options and tweak your profile field further.',	'STEP_1_EXPLAIN_EDIT'			=> 'Here you can change the basic parameters of your profile field. The relevant options are re-calculated within the second step.',	'STEP_1_TITLE_CREATE'			=> 'Add profile field',	'STEP_1_TITLE_EDIT'				=> 'Edit profile field',	'STEP_2_EXPLAIN_CREATE'			=> 'Here you are able to define some common options you may want to adjust.',	'STEP_2_EXPLAIN_EDIT'			=> 'Here you are able to change some common options.<br /><strong>Please note that changes to profile fields will not affect existing profile fields entered by your users.</strong>',	'STEP_2_TITLE_CREATE'			=> 'Profile type specific options',	'STEP_2_TITLE_EDIT'				=> 'Profile type specific options',	'STEP_3_EXPLAIN_CREATE'			=> 'Since you have more than one board language installed, you have to fill out the remaining language items too. The profile field will work with the default language enabled, you are able to fill out the remaining language items later too.',	'STEP_3_EXPLAIN_EDIT'			=> 'Since you have more than one board language installed, you now can change or add the remaining language items too. The profile field will work with the default language enabled.',	'STEP_3_TITLE_CREATE'			=> 'Remaining language definitions',	'STEP_3_TITLE_EDIT'				=> 'Language definitions',	'STRING_DEFAULT_VALUE_EXPLAIN'	=> 'Enter a default phrase to be displayed, a default value. Leave empty if you want to show it empty at the first place.',	'TEXT_DEFAULT_VALUE_EXPLAIN'	=> 'Enter a default text to be displayed, a default value. Leave empty if you want to show it empty at the first place.',	'TRANSLATE'						=> 'Translate',	'USER_FIELD_NAME'	=> 'Field name/title presented to the user',	'VISIBILITY_OPTION'				=> 'Visibility options',));?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_ranks_info{	function module()	{		return array(			'filename'	=> 'acp_ranks',			'title'		=> 'ACP_RANKS',			'version'	=> '1.0.0',			'modes'		=> array(				'ranks'		=> array('title' => 'ACP_MANAGE_RANKS', 'auth' => 'acl_a_ranks', 'cat' => array('ACP_CAT_USERS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ucp_remind* Sending password reminders* @package ucp*/class ucp_remind{	var $u_action;	function main($id, $mode)	{		global $config, $phpbb_root_path, $phpEx;		global $db, $user, $auth, $template;		$username	= request_var('username', '', true);		$email		= strtolower(request_var('email', ''));		$submit		= (isset($_POST['submit'])) ? true : false;		if ($submit)		{			$sql = 'SELECT user_id, username, user_permissions, user_email, user_jabber, user_notify_type, user_type, user_lang, user_inactive_reason				FROM ' . USERS_TABLE . "				WHERE user_email_hash = '" . $db->sql_escape(phpbb_email_hash($email)) . "'					AND username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";			$result = $db->sql_query($sql);			$user_row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$user_row)			{				trigger_error('NO_EMAIL_USER');			}			if ($user_row['user_type'] == USER_IGNORE)			{				trigger_error('NO_USER');			}			if ($user_row['user_type'] == USER_INACTIVE)			{				if ($user_row['user_inactive_reason'] == INACTIVE_MANUAL)				{					trigger_error('ACCOUNT_DEACTIVATED');				}				else				{					trigger_error('ACCOUNT_NOT_ACTIVATED');				}			}			// Check users permissions			$auth2 = new auth();			$auth2->acl($user_row);			if (!$auth2->acl_get('u_chgpasswd'))			{				trigger_error('NO_AUTH_PASSWORD_REMINDER');			}			$server_url = generate_board_url();			// Make password at least 8 characters long, make it longer if admin wants to.			// gen_rand_string() however has a limit of 12 or 13.			$user_password = gen_rand_string_friendly(max(8, mt_rand((int) $config['min_pass_chars'], (int) $config['max_pass_chars'])));			// For the activation key a random length between 6 and 10 will do.			$user_actkey = gen_rand_string(mt_rand(6, 10));			$sql = 'UPDATE ' . USERS_TABLE . "				SET user_newpasswd = '" . $db->sql_escape(phpbb_hash($user_password)) . "', user_actkey = '" . $db->sql_escape($user_actkey) . "'				WHERE user_id = " . $user_row['user_id'];			$db->sql_query($sql);			include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);			$messenger = new messenger(false);			$messenger->template('user_activate_passwd', $user_row['user_lang']);			$messenger->to($user_row['user_email'], $user_row['username']);			$messenger->im($user_row['user_jabber'], $user_row['username']);			$messenger->assign_vars(array(				'USERNAME'		=> htmlspecialchars_decode($user_row['username']),				'PASSWORD'		=> htmlspecialchars_decode($user_password),				'U_ACTIVATE'	=> "$server_url/ucp.$phpEx?mode=activate&u={$user_row['user_id']}&k=$user_actkey")			);			$messenger->send($user_row['user_notify_type']);			meta_refresh(3, append_sid("{$phpbb_root_path}index.$phpEx"));			$message = $user->lang['PASSWORD_UPDATED'] . '<br /><br />' . sprintf($user->lang['RETURN_INDEX'], '<a href="' . append_sid("{$phpbb_root_path}index.$phpEx") . '">', '</a>');			trigger_error($message);		}		$template->assign_vars(array(			'USERNAME'			=> $username,			'EMAIL'				=> $email,			'S_PROFILE_ACTION'	=> append_sid($phpbb_root_path . 'ucp.' . $phpEx, 'mode=sendpassword'))		);		$this->tpl_name = 'ucp_remind';		$this->page_title = 'UCP_REMIND';	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class mcp_reports_info{	function module()	{		return array(			'filename'	=> 'mcp_reports',			'title'		=> 'MCP_REPORTS',			'version'	=> '1.0.0',			'modes'		=> array(				'reports'			=> array('title' => 'MCP_REPORTS_OPEN', 'auth' => 'aclf_m_report', 'cat' => array('MCP_REPORTS')),				'reports_closed'	=> array('title' => 'MCP_REPORTS_CLOSED', 'auth' => 'aclf_m_report', 'cat' => array('MCP_REPORTS')),				'report_details'	=> array('title' => 'MCP_REPORT_DETAILS', 'auth' => 'acl_m_report,$id || (!$id && aclf_m_report)', 'cat' => array('MCP_REPORTS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_email_info{	function module()	{		return array(			'filename'	=> 'acp_email',			'title'		=> 'ACP_MASS_EMAIL',			'version'	=> '1.0.0',			'modes'		=> array(				'email'		=> array('title' => 'ACP_MASS_EMAIL', 'auth' => 'acl_a_email && cfg_email_enable', 'cat' => array('ACP_GENERAL_TASKS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php return array('A'=>'a','B'=>'b','C'=>'c','D'=>'d','E'=>'e','F'=>'f','G'=>'g','H'=>'h','I'=>'i','J'=>'j','K'=>'k','L'=>'l','M'=>'m','N'=>'n','O'=>'o','P'=>'p','Q'=>'q','R'=>'r','S'=>'s','T'=>'t','U'=>'u','V'=>'v','W'=>'w','X'=>'x','Y'=>'y','Z'=>'z',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'s',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'k',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'20',''=>'30',''=>'40',''=>'50',''=>'60',''=>'70',''=>'80',''=>'90',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9');
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package mcp*/class mcp_ban{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpEx;		include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		// Include the admin banning interface...		include($phpbb_root_path . 'includes/acp/acp_ban.' . $phpEx);		$bansubmit		= (isset($_POST['bansubmit'])) ? true : false;		$unbansubmit	= (isset($_POST['unbansubmit'])) ? true : false;		$current_time	= time();		$user->add_lang(array('acp/ban', 'acp/users'));		$this->tpl_name = 'mcp_ban';		// Ban submitted?		if ($bansubmit)		{			// Grab the list of entries			$ban				= request_var('ban', '', ($mode === 'user') ? true : false);			if ($mode === 'user')			{				$ban = utf8_normalize_nfc($ban);			}			$ban_len			= request_var('banlength', 0);			$ban_len_other		= request_var('banlengthother', '');			$ban_exclude		= request_var('banexclude', 0);			$ban_reason			= utf8_normalize_nfc(request_var('banreason', '', true));			$ban_give_reason	= utf8_normalize_nfc(request_var('bangivereason', '', true));			if ($ban)			{				if (confirm_box(true))				{					user_ban($mode, $ban, $ban_len, $ban_len_other, $ban_exclude, $ban_reason, $ban_give_reason);					trigger_error($user->lang['BAN_UPDATE_SUCCESSFUL'] . '<br /><br /><a href="' . $this->u_action . '">&laquo; ' . $user->lang['BACK_TO_PREV'] . '</a>');				}				else				{					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(						'mode'				=> $mode,						'ban'				=> $ban,						'bansubmit'			=> true,						'banlength'			=> $ban_len,						'banlengthother'	=> $ban_len_other,						'banexclude'		=> $ban_exclude,						'banreason'			=> $ban_reason,						'bangivereason'		=> $ban_give_reason)));				}			}		}		else if ($unbansubmit)		{			$ban = request_var('unban', array(''));			if ($ban)			{				if (confirm_box(true))				{					user_unban($mode, $ban);					trigger_error($user->lang['BAN_UPDATE_SUCCESSFUL'] . '<br /><br /><a href="' . $this->u_action . '">&laquo; ' . $user->lang['BACK_TO_PREV'] . '</a>');				}				else				{					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(						'mode'			=> $mode,						'unbansubmit'	=> true,						'unban'			=> $ban)));				}			}		}		// Ban length options		$ban_end_text = array(0 => $user->lang['PERMANENT'], 30 => $user->lang['30_MINS'], 60 => $user->lang['1_HOUR'], 360 => $user->lang['6_HOURS'], 1440 => $user->lang['1_DAY'], 10080 => $user->lang['7_DAYS'], 20160 => $user->lang['2_WEEKS'], 40320 => $user->lang['1_MONTH'], -1 => $user->lang['UNTIL'] . ' -&gt; ');		$ban_end_options = '';		foreach ($ban_end_text as $length => $text)		{			$ban_end_options .= '<option value="' . $length . '">' . $text . '</option>';		}		// Define language vars		$this->page_title = $user->lang[strtoupper($mode) . '_BAN'];		$l_ban_explain = $user->lang[strtoupper($mode) . '_BAN_EXPLAIN'];		$l_ban_exclude_explain = $user->lang[strtoupper($mode) . '_BAN_EXCLUDE_EXPLAIN'];		$l_unban_title = $user->lang[strtoupper($mode) . '_UNBAN'];		$l_unban_explain = $user->lang[strtoupper($mode) . '_UNBAN_EXPLAIN'];		$l_no_ban_cell = $user->lang[strtoupper($mode) . '_NO_BANNED'];		switch ($mode)		{			case 'user':				$l_ban_cell = $user->lang['USERNAME'];			break;			case 'ip':				$l_ban_cell = $user->lang['IP_HOSTNAME'];			break;			case 'email':				$l_ban_cell = $user->lang['EMAIL_ADDRESS'];			break;		}		acp_ban::display_ban_options($mode);		$template->assign_vars(array(			'L_TITLE'				=> $this->page_title,			'L_EXPLAIN'				=> $l_ban_explain,			'L_UNBAN_TITLE'			=> $l_unban_title,			'L_UNBAN_EXPLAIN'		=> $l_unban_explain,			'L_BAN_CELL'			=> $l_ban_cell,			'L_BAN_EXCLUDE_EXPLAIN'	=> $l_ban_exclude_explain,			'L_NO_BAN_CELL'			=> $l_no_ban_cell,			'S_USERNAME_BAN'	=> ($mode == 'user') ? true : false,			'U_ACTION'			=> $this->u_action,			'U_FIND_USERNAME'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=mcp_ban&amp;field=ban'),		));		if ($mode === 'email' && !$auth->acl_get('a_user'))		{			return;		}		// As a "service" we will check if any post id is specified and populate the username of the poster id if given		$post_id = request_var('p', 0);		$user_id = request_var('u', 0);		$username = $pre_fill = false;		if ($user_id && $user_id <> ANONYMOUS)		{			$sql = 'SELECT username, user_email, user_ip				FROM ' . USERS_TABLE . '				WHERE user_id = ' . $user_id;			$result = $db->sql_query($sql);			switch ($mode)			{				case 'user':					$pre_fill = (string) $db->sql_fetchfield('username');				break;								case 'ip':					$pre_fill = (string) $db->sql_fetchfield('user_ip');				break;				case 'email':					$pre_fill = (string) $db->sql_fetchfield('user_email');				break;			}			$db->sql_freeresult($result);		}		else if ($post_id)		{			$post_info = get_post_data($post_id, 'm_ban');			if (sizeof($post_info) && !empty($post_info[$post_id]))			{				switch ($mode)				{					case 'user':						$pre_fill = $post_info[$post_id]['username'];					break;					case 'ip':						$pre_fill = $post_info[$post_id]['poster_ip'];					break;					case 'email':						$pre_fill = $post_info[$post_id]['user_email'];					break;				}			}		}		if ($pre_fill)		{			// left for legacy template compatibility			$template->assign_var('USERNAMES', $pre_fill);			$template->assign_var('BAN_QUANTIFIER', $pre_fill);		}	}}?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2008 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** A small class for 3.0.x (no autoloader in 3.0.x)** @package VC*/class phpbb_captcha_factory{	/**	* return an instance of class $name in file $name_plugin.php	*/	function &get_instance($name)	{		global $phpbb_root_path, $phpEx;		$name = basename($name);		if (!class_exists($name))		{			include($phpbb_root_path . "includes/captcha/plugins/{$name}_plugin." . $phpEx);		}		$instance = call_user_func(array($name, 'get_instance'));		return $instance;	}	/**	* Call the garbage collector	*/	function garbage_collect($name)	{		global $phpbb_root_path, $phpEx;		$name = basename($name);		if (!class_exists($name))		{			include($phpbb_root_path . "includes/captcha/plugins/{$name}_plugin." . $phpEx);		}		call_user_func(array($name, 'garbage_collect'), 0);	}	/**	* return a list of all discovered CAPTCHA plugins	*/	function get_captcha_types()	{		global $phpbb_root_path, $phpEx;		$captchas = array(			'available'		=> array(),			'unavailable'	=> array(),		);		$dp = @opendir($phpbb_root_path . 'includes/captcha/plugins');		if ($dp)		{			while (($file = readdir($dp)) !== false)			{				if ((preg_match('#_plugin\.' . $phpEx . '$#', $file)))				{					$name = preg_replace('#^(.*?)_plugin\.' . $phpEx . '$#', '\1', $file);					if (!class_exists($name))					{						include($phpbb_root_path . "includes/captcha/plugins/$file");					}					if (call_user_func(array($name, 'is_available')))					{						$captchas['available'][$name] = call_user_func(array($name, 'get_name'));					}					else					{						$captchas['unavailable'][$name] = call_user_func(array($name, 'get_name'));					}				}			}			closedir($dp);		}		return $captchas;	}}?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2006, 2008 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}global $table_prefix;define('CAPTCHA_QUESTIONS_TABLE',	$table_prefix . 'captcha_questions');define('CAPTCHA_ANSWERS_TABLE',		$table_prefix . 'captcha_answers');define('CAPTCHA_QA_CONFIRM_TABLE',	$table_prefix . 'qa_confirm');/*** And now to something completely different. Let's make a captcha without extending the abstract class.* QA CAPTCHA sample implementation** @package VC*/class phpbb_captcha_qa{	var $confirm_id;	var $answer;	var $question_ids;	var $question_text;	var $question_lang;	var $question_strict;	var $attempts = 0;	var $type;	// dirty trick: 0 is false, but can still encode that the captcha is not yet validated	var $solved = 0;	/**	* @param int $type  as per the CAPTCHA API docs, the type	*/	function init($type)	{		global $config, $db, $user;		// load our language file		$user->add_lang('captcha_qa');		// read input		$this->confirm_id = request_var('qa_confirm_id', '');		$this->answer = utf8_normalize_nfc(request_var('qa_answer', '', true));		$this->type = (int) $type;		$this->question_lang = $user->lang_name;		// we need all defined questions - shouldn't be too many, so we can just grab them		// try the user's lang first		$sql = 'SELECT question_id			FROM ' . CAPTCHA_QUESTIONS_TABLE . "			WHERE lang_iso = '" . $db->sql_escape($user->lang_name) . "'";		$result = $db->sql_query($sql, 3600);		while ($row = $db->sql_fetchrow($result))		{			$this->question_ids[$row['question_id']] = $row['question_id'];		}		$db->sql_freeresult($result);		// fallback to the board default lang		if (!sizeof($this->question_ids))		{			$this->question_lang = $config['default_lang'];			$sql = 'SELECT question_id				FROM ' . CAPTCHA_QUESTIONS_TABLE . "				WHERE lang_iso = '" . $db->sql_escape($config['default_lang']) . "'";			$result = $db->sql_query($sql, 7200);			while ($row = $db->sql_fetchrow($result))			{				$this->question_ids[$row['question_id']] = $row['question_id'];			}			$db->sql_freeresult($result);		}			// okay, if there is a confirm_id, we try to load that confirm's state. If not, we try to find one		if (!$this->load_answer() && (!$this->load_confirm_id() || !$this->load_answer()))		{			// we have no valid confirm ID, better get ready to ask something			$this->select_question();		}	}	/**	*  API function	*/	function &get_instance()	{		$instance =& new phpbb_captcha_qa();		return $instance;	}	/**	* See if the captcha has created its tables.	*/	function is_installed()	{		global $db, $phpbb_root_path, $phpEx;		if (!class_exists('phpbb_db_tools'))		{			include("$phpbb_root_path/includes/db/db_tools.$phpEx");		}		$db_tool = new phpbb_db_tools($db);		return $db_tool->sql_table_exists(CAPTCHA_QUESTIONS_TABLE);	}	/**	*  API function - for the captcha to be available, it must have installed itself and there has to be at least one question in the board's default lang	*/	function is_available()	{		global $config, $db, $phpbb_root_path, $phpEx, $user;		// load language file for pretty display in the ACP dropdown		$user->add_lang('captcha_qa');		if (!phpbb_captcha_qa::is_installed())		{			return false;		}		$sql = 'SELECT COUNT(question_id) AS question_count			FROM ' . CAPTCHA_QUESTIONS_TABLE . "			WHERE lang_iso = '" . $db->sql_escape($config['default_lang']) . "'";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		return ((bool) $row['question_count']);	}	/**	*  API function	*/	function has_config()	{		return true;	}	/**	*  API function	*/	function get_name()	{		return 'CAPTCHA_QA';	}	/**	*  API function	*/	function get_class_name()	{		return 'phpbb_captcha_qa';	}	/**	*  API function - not needed as we don't display an image	*/	function execute_demo()	{	}	/**	*  API function - not needed as we don't display an image	*/	function execute()	{	}	/**	*  API function - send the question to the template	*/	function get_template()	{		global $template;		if ($this->is_solved())		{			return false;		}		else		{			$template->assign_vars(array(				'QA_CONFIRM_QUESTION'		=> $this->question_text,				'QA_CONFIRM_ID'				=> $this->confirm_id,				'S_CONFIRM_CODE'			=> true,				'S_TYPE'					=> $this->type,			));			return 'captcha_qa.html';		}	}	/**	*  API function - we just display a mockup so that the captcha doesn't need to be installed	*/	function get_demo_template()	{		global $config, $db, $template;		if ($this->is_available())		{			$sql = 'SELECT question_text				FROM ' . CAPTCHA_QUESTIONS_TABLE . "				WHERE lang_iso = '" . $db->sql_escape($config['default_lang']) . "'";			$result = $db->sql_query_limit($sql, 1);			if ($row = $db->sql_fetchrow($result))			{				$template->assign_vars(array(					'QA_CONFIRM_QUESTION'		=> $row['question_text'],				));			}			$db->sql_freeresult($result);		}		return 'captcha_qa_acp_demo.html';	}	/**	*  API function	*/	function get_hidden_fields()	{		$hidden_fields = array();		// this is required - otherwise we would forget about the captcha being already solved		if ($this->solved)		{			$hidden_fields['qa_answer'] = $this->answer;		}		$hidden_fields['qa_confirm_id'] = $this->confirm_id;		return $hidden_fields;	}	/**	*  API function	*/	function garbage_collect($type = 0)	{		global $db, $config;		$sql = 'SELECT c.confirm_id			FROM ' . CAPTCHA_QA_CONFIRM_TABLE . ' c			LEFT JOIN ' . SESSIONS_TABLE . ' s				ON (c.session_id = s.session_id)			WHERE s.session_id IS NULL' .				((empty($type)) ? '' : ' AND c.confirm_type = ' . (int) $type);		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			$sql_in = array();			do			{				$sql_in[] = (string) $row['confirm_id'];			}			while ($row = $db->sql_fetchrow($result));			if (sizeof($sql_in))			{				$sql = 'DELETE FROM ' . CAPTCHA_QA_CONFIRM_TABLE . '					WHERE ' . $db->sql_in_set('confirm_id', $sql_in);				$db->sql_query($sql);			}		}		$db->sql_freeresult($result);	}	/**	*  API function - we don't drop the tables here, as that would cause the loss of all entered questions.	*/	function uninstall()	{		$this->garbage_collect(0);	}	/**	*  API function - set up shop	*/	function install()	{		global $db, $phpbb_root_path, $phpEx;		if (!class_exists('phpbb_db_tools'))		{			include("$phpbb_root_path/includes/db/db_tools.$phpEx");		}		$db_tool = new phpbb_db_tools($db);		$tables = array(CAPTCHA_QUESTIONS_TABLE, CAPTCHA_ANSWERS_TABLE, CAPTCHA_QA_CONFIRM_TABLE);		$schemas = array(				CAPTCHA_QUESTIONS_TABLE		=> array (					'COLUMNS' => array(						'question_id'	=> array('UINT', Null, 'auto_increment'),						'strict'		=> array('BOOL', 0),						'lang_id'		=> array('UINT', 0),						'lang_iso'		=> array('VCHAR:30', ''),						'question_text'	=> array('TEXT_UNI', ''),					),					'PRIMARY_KEY'		=> 'question_id',					'KEYS'				=> array(						'lang'			=> array('INDEX', 'lang_iso'),					),				),				CAPTCHA_ANSWERS_TABLE		=> array (					'COLUMNS' => array(						'question_id'	=> array('UINT', 0),						'answer_text'	=> array('STEXT_UNI', ''),					),					'KEYS'				=> array(						'qid'			=> array('INDEX', 'question_id'),					),				),				CAPTCHA_QA_CONFIRM_TABLE		=> array (					'COLUMNS' => array(						'session_id'	=> array('CHAR:32', ''),						'confirm_id'	=> array('CHAR:32', ''),						'lang_iso'		=> array('VCHAR:30', ''),						'question_id'	=> array('UINT', 0),						'attempts'		=> array('UINT', 0),						'confirm_type'	=> array('USINT', 0),					),					'KEYS'				=> array(						'session_id'			=> array('INDEX', 'session_id'),						'lookup'				=> array('INDEX', array('confirm_id', 'session_id', 'lang_iso')),					),					'PRIMARY_KEY'		=> 'confirm_id',				),		);		foreach($schemas as $table => $schema)		{			if (!$db_tool->sql_table_exists($table))			{				$db_tool->sql_create_table($table, $schema);			}		}	}	/**	*  API function - see what has to be done to validate	*/	function validate()	{		global $config, $db, $user;		$error = '';				if (!sizeof($this->question_ids))		{			return false;		}				if (!$this->confirm_id)		{			$error = $user->lang['CONFIRM_QUESTION_WRONG'];		}		else		{			if ($this->check_answer())			{				// $this->delete_code(); commented out to allow posting.php to repeat the question				$this->solved = true;			}			else			{				$error = $user->lang['CONFIRM_QUESTION_WRONG'];			}		}		if (strlen($error))		{			// okay, incorrect answer. Let's ask a new question.			$this->new_attempt();			$this->solved = false;			return $error;		}		else		{			return false;		}	}	/**	*  Select a question	*/	function select_question()	{		global $db, $user;		if (!sizeof($this->question_ids))		{			return false;		}		$this->confirm_id = md5(unique_id($user->ip));		$this->question = (int) array_rand($this->question_ids);		$sql = 'INSERT INTO ' . CAPTCHA_QA_CONFIRM_TABLE . ' ' . $db->sql_build_array('INSERT', array(			'confirm_id'	=> (string) $this->confirm_id,			'session_id'	=> (string) $user->session_id,			'lang_iso'		=> (string) $this->question_lang,			'confirm_type'	=> (int) $this->type,			'question_id'	=> (int) $this->question,		));		$db->sql_query($sql);		$this->load_answer();	}	/**	* New Question, if desired.	*/	function reselect_question()	{		global $db, $user;				if (!sizeof($this->question_ids))		{			return false;		}		$this->question = (int) array_rand($this->question_ids);		$this->solved = 0;		$sql = 'UPDATE ' . CAPTCHA_QA_CONFIRM_TABLE . '			SET question_id = ' . (int) $this->question . "			WHERE confirm_id = '" . $db->sql_escape($this->confirm_id) . "'				AND session_id = '" . $db->sql_escape($user->session_id) . "'";		$db->sql_query($sql);		$this->load_answer();	}	/**	* Wrong answer, so we increase the attempts and use a different question.	*/	function new_attempt()	{		global $db, $user;		// yah, I would prefer a stronger rand, but this should work		$this->question = (int) array_rand($this->question_ids);		$this->solved = 0;		$sql = 'UPDATE ' . CAPTCHA_QA_CONFIRM_TABLE . '			SET question_id = ' . (int) $this->question . ",				attempts = attempts + 1			WHERE confirm_id = '" . $db->sql_escape($this->confirm_id) . "'				AND session_id = '" . $db->sql_escape($user->session_id) . "'";		$db->sql_query($sql);		$this->load_answer();	}	/**	* See if there is already an entry for the current session.	*/	function load_confirm_id()	{		global $db, $user;		$sql = 'SELECT confirm_id			FROM ' . CAPTCHA_QA_CONFIRM_TABLE . " 			WHERE 				session_id = '" . $db->sql_escape($user->session_id) . "'				AND lang_iso = '" . $db->sql_escape($this->question_lang) . "'				AND confirm_type = " . $this->type;		$result = $db->sql_query_limit($sql, 1);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			$this->confirm_id = $row['confirm_id'];			return true;		}		return false;	}	/**	* Look up everything we need and populate the instance variables.	*/	function load_answer()	{		global $db, $user;				if (!strlen($this->confirm_id) || !sizeof($this->question_ids))		{			return false;		}		$sql = 'SELECT con.question_id, attempts, question_text, strict			FROM ' . CAPTCHA_QA_CONFIRM_TABLE . ' con, ' . CAPTCHA_QUESTIONS_TABLE . " qes			WHERE con.question_id = qes.question_id				AND confirm_id = '" . $db->sql_escape($this->confirm_id) . "'				AND session_id = '" . $db->sql_escape($user->session_id) . "'				AND qes.lang_iso = '" . $db->sql_escape($this->question_lang) . "'				AND confirm_type = " . $this->type;		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			$this->question = $row['question_id'];			$this->attempts = $row['attempts'];			$this->question_strict = $row['strict'];			$this->question_text = $row['question_text'];			return true;		}		return false;	}	/**	*  The actual validation	*/	function check_answer()	{		global $db;		$answer = ($this->question_strict) ? utf8_normalize_nfc(request_var('qa_answer', '', true)) : utf8_clean_string(utf8_normalize_nfc(request_var('qa_answer', '', true)));		$sql = 'SELECT answer_text			FROM ' . CAPTCHA_ANSWERS_TABLE . '			WHERE question_id = ' . (int) $this->question;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$solution = ($this->question_strict) ? $row['answer_text'] : utf8_clean_string($row['answer_text']);			if ($solution === $answer)			{				$this->solved = true;				break;			}		}		$db->sql_freeresult($result);		return $this->solved;	}	/**	*  API function - clean the entry	*/	function delete_code()	{		global $db, $user;		$sql = 'DELETE FROM ' . CAPTCHA_QA_CONFIRM_TABLE . "			WHERE confirm_id = '" . $db->sql_escape($confirm_id) . "'				AND session_id = '" . $db->sql_escape($user->session_id) . "'				AND confirm_type = " . $this->type;		$db->sql_query($sql);	}	/**	*  API function	*/	function get_attempt_count()	{		return $this->attempts;	}	/**	*  API function	*/	function reset()	{		global $db, $user;		$sql = 'DELETE FROM ' . CAPTCHA_QA_CONFIRM_TABLE . "			WHERE session_id = '" . $db->sql_escape($user->session_id) . "'				AND confirm_type = " . (int) $this->type;		$db->sql_query($sql);		// we leave the class usable by generating a new question		$this->select_question();	}	/**	*  API function	*/	function is_solved()	{		if (request_var('qa_answer', false) && $this->solved === 0)		{			$this->validate();		}		return (bool) $this->solved;	}	/**	*  API function - The ACP backend, this marks the end of the easy methods	*/	function acp_page($id, &$module)	{		global $db, $user, $auth, $template;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('acp/board');		$user->add_lang('captcha_qa');		if (!$this->is_installed())		{			$this->install();		}		$module->tpl_name = 'captcha_qa_acp';		$module->page_title = 'ACP_VC_SETTINGS';		$form_key = 'acp_captcha';		add_form_key($form_key);		$submit = request_var('submit', false);		$question_id = request_var('question_id', 0);		$action = request_var('action', '');		// we have two pages, so users might want to navigate from one to the other		$list_url = $module->u_action . "&amp;configure=1&amp;select_captcha=" . $this->get_class_name();		$template->assign_vars(array(			'U_ACTION'		=> $module->u_action,			'QUESTION_ID'	=> $question_id ,			'CLASS'			=> $this->get_class_name(),		));		// show the list?		if (!$question_id && $action != 'add')		{			$this->acp_question_list($module);		}		else if ($question_id && $action == 'delete')		{			if ($this->get_class_name() !== $config['captcha_plugin'] || !$this->acp_is_last($question_id))			{				if (confirm_box(true))				{					$this->acp_delete_question($question_id);					trigger_error($user->lang['QUESTION_DELETED'] . adm_back_link($list_url));				}				else				{					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(						'question_id'		=> $question_id,						'action'			=> $action,						'configure'			=> 1,						'select_captcha'	=> $this->get_class_name(),						))					);				}			}			else			{				trigger_error($user->lang['QA_LAST_QUESTION'] . adm_back_link($list_url), E_USER_WARNING);			}		}		else		{			// okay, show the editor			$error = false;			$input_question = request_var('question_text', '', true);			$input_answers = request_var('answers', '', true);			$input_lang = request_var('lang_iso', '', true);			$input_strict = request_var('strict', false);			$langs = $this->get_languages();			foreach ($langs as $lang => $entry)			{				$template->assign_block_vars('langs', array(					'ISO' => $lang,					'NAME' => $entry['name'],				));			}			$template->assign_vars(array(				'U_LIST' => $list_url,			));			if ($question_id)			{				if ($question = $this->acp_get_question_data($question_id))				{					$answers = (isset($input_answers[$lang])) ? $input_answers[$lang] : implode("\n", $question['answers']);					$template->assign_vars(array(						'QUESTION_TEXT'		=> ($input_question) ? $input_question : $question['question_text'],						'LANG_ISO'			=> ($input_lang) ? $input_lang : $question['lang_iso'],						'STRICT'			=> (isset($_REQUEST['strict'])) ? $input_strict : $question['strict'],						'ANSWERS'			=> $answers,					));				}				else				{					trigger_error($user->lang['FORM_INVALID'] . adm_back_link($list_url));				}			}			else			{				$template->assign_vars(array(					'QUESTION_TEXT'		=> $input_question,					'LANG_ISO'			=> $input_lang,					'STRICT'			=> $input_strict,					'ANSWERS'			=> $input_answers,				));			}			if ($submit && check_form_key($form_key))			{				$data = $this->acp_get_question_input();				if (!$this->validate_input($data))				{					$template->assign_vars(array(						'S_ERROR'			=> true,					));				}				else				{					if ($question_id)					{						$this->acp_update_question($data, $question_id);					}					else					{						$this->acp_add_question($data);					}					add_log('admin', 'LOG_CONFIG_VISUAL');					trigger_error($user->lang['CONFIG_UPDATED'] . adm_back_link($list_url));				}			}			else if ($submit)			{				trigger_error($user->lang['FORM_INVALID'] . adm_back_link($list_url), E_USER_WARNING);			}		}	}	/**	*  This handles the list overview	*/	function acp_question_list(&$module)	{		global $db, $template;		$sql = 'SELECT *			FROM ' . CAPTCHA_QUESTIONS_TABLE;		$result = $db->sql_query($sql);		$template->assign_vars(array(			'S_LIST'			=> true,		));		while ($row = $db->sql_fetchrow($result))		{			$url = $module->u_action . "&amp;question_id={$row['question_id']}&amp;configure=1&amp;select_captcha=" . $this->get_class_name() . '&amp;';			$template->assign_block_vars('questions', array(				'QUESTION_TEXT'		=> $row['question_text'],				'QUESTION_ID'		=> $row['question_id'],				'QUESTION_LANG'		=> $row['lang_iso'],				'U_DELETE'			=> "{$url}action=delete",				'U_EDIT'			=> "{$url}action=edit",			));		}		$db->sql_freeresult($result);	}	/**	*  Grab a question and bring it into a format the editor understands	*/	function acp_get_question_data($question_id)	{		global $db;		if ($question_id)		{			$sql = 'SELECT *				FROM ' . CAPTCHA_QUESTIONS_TABLE . '				WHERE question_id = ' . $question_id;			$result = $db->sql_query($sql);			$question = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$question)			{				return false;			}			$question['answers'] = array();			$sql = 'SELECT *				FROM ' . CAPTCHA_ANSWERS_TABLE . '				WHERE question_id = ' . $question_id;			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$question['answers'][] = $row['answer_text'];			}			$db->sql_freeresult($result);			return $question;		}	}	/**	*  Grab a question from input and bring it into a format the editor understands	*/	function acp_get_question_input()	{		$answers = utf8_normalize_nfc(request_var('answers', '', true));		$question = array(			'question_text'	=> request_var('question_text', '', true),			'strict'		=> request_var('strict', false),			'lang_iso'		=> request_var('lang_iso', ''),			'answers'		=> (strlen($answers)) ? explode("\n", $answers) : '',		);		return $question;	}	/**	*  Update a question.	* param mixed $data : an array as created from acp_get_question_input or acp_get_question_data	*/	function acp_update_question($data, $question_id)	{		global $db, $cache;		// easier to delete all answers than to figure out which to update		$sql = 'DELETE FROM ' . CAPTCHA_ANSWERS_TABLE . " WHERE question_id = $question_id";		$db->sql_query($sql);		$langs = $this->get_languages();		$question_ary = $data;		$question_ary['lang_id'] = $langs[$question_ary['lang_iso']]['id'];		unset($question_ary['answers']);		$sql = 'UPDATE ' . CAPTCHA_QUESTIONS_TABLE . '			SET ' . $db->sql_build_array('UPDATE', $question_ary) . "			WHERE question_id = $question_id";		$db->sql_query($sql);		$this->acp_insert_answers($data, $question_id);		$cache->destroy('sql', CAPTCHA_QUESTIONS_TABLE);	}	/**	*  Insert a question.	* param mixed $data : an array as created from acp_get_question_input or acp_get_question_data	*/	function acp_add_question($data)	{		global $db, $cache;		$langs = $this->get_languages();		$question_ary = $data;		$question_ary['lang_id'] = $langs[$data['lang_iso']]['id'];		unset($question_ary['answers']);		$sql = 'INSERT INTO ' . CAPTCHA_QUESTIONS_TABLE . ' ' . $db->sql_build_array('INSERT', $question_ary);		$db->sql_query($sql);		$question_id = $db->sql_nextid();		$this->acp_insert_answers($data, $question_id);		$cache->destroy('sql', CAPTCHA_QUESTIONS_TABLE);	}	/**	*  Insert the answers.	* param mixed $data : an array as created from acp_get_question_input or acp_get_question_data	*/	function acp_insert_answers($data, $question_id)	{		global $db, $cache;		foreach ($data['answers'] as $answer)		{			$answer_ary = array(				'question_id'	=> $question_id,				'answer_text'	=> $answer,			);			$sql = 'INSERT INTO ' . CAPTCHA_ANSWERS_TABLE . ' ' . $db->sql_build_array('INSERT', $answer_ary);			$db->sql_query($sql);		}		$cache->destroy('sql', CAPTCHA_ANSWERS_TABLE);	}	/**	*  Delete a question.	*/	function acp_delete_question($question_id)	{		global $db, $cache;		$tables = array(CAPTCHA_QUESTIONS_TABLE, CAPTCHA_ANSWERS_TABLE);		foreach ($tables as $table)		{			$sql = "DELETE FROM $table				WHERE question_id = $question_id";			$db->sql_query($sql);		}		$cache->destroy('sql', $tables);	}	/**	*  Check if the entered data can be inserted/used	* param mixed $data : an array as created from acp_get_question_input or acp_get_question_data	*/	function validate_input($question_data)	{		$langs = $this->get_languages();		if (!isset($question_data['lang_iso']) ||			!isset($question_data['question_text']) ||			!isset($question_data['strict']) ||			!isset($question_data['answers']))		{			return false;		}		if (!isset($langs[$question_data['lang_iso']]) ||			!strlen($question_data['question_text']) ||			!sizeof($question_data['answers']) ||			!is_array($question_data['answers']))		{			return false;		}		return true;	}	/**	* List the installed language packs	*/	function get_languages()	{		global $db;		$sql = 'SELECT *			FROM ' . LANG_TABLE;		$result = $db->sql_query($sql);		$langs = array();		while ($row = $db->sql_fetchrow($result))		{			$langs[$row['lang_iso']] = array(				'name'	=> $row['lang_local_name'],				'id'	=> (int) $row['lang_id'],			);		}		$db->sql_freeresult($result);		return $langs;	}				/**	*  See if there is a question other than the one we have	*/	function acp_is_last($question_id)	{		global $config, $db;		if ($question_id)		{			$sql = 'SELECT question_id				FROM ' . CAPTCHA_QUESTIONS_TABLE . "				WHERE lang_iso = '" . $db->sql_escape($config['default_lang']) . "'					AND  question_id <> " .  (int) $question_id;			$result = $db->sql_query_limit($sql, 1);			$question = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$question)			{				return true;			}			return false;		}	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** MCP Front Panel*/function mcp_front_view($id, $mode, $action){	global $phpEx, $phpbb_root_path, $config;	global $template, $db, $user, $auth, $module;	// Latest 5 unapproved	if ($module->loaded('queue'))	{		$forum_list = array_values(array_intersect(get_forum_list('f_read'), get_forum_list('m_approve')));		$post_list = array();		$forum_names = array();		$forum_id = request_var('f', 0);		$template->assign_var('S_SHOW_UNAPPROVED', (!empty($forum_list)) ? true : false);		if (!empty($forum_list))		{			$sql = 'SELECT COUNT(post_id) AS total				FROM ' . POSTS_TABLE . '				WHERE forum_id IN (0, ' . implode(', ', $forum_list) . ')					AND post_approved = 0';			$result = $db->sql_query($sql);			$total = (int) $db->sql_fetchfield('total');			$db->sql_freeresult($result);			if ($total)			{				$global_id = $forum_list[0];				$sql = 'SELECT forum_id, forum_name					FROM ' . FORUMS_TABLE . '					WHERE ' . $db->sql_in_set('forum_id', $forum_list);				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$forum_names[$row['forum_id']] = $row['forum_name'];				}				$db->sql_freeresult($result);				$sql = 'SELECT post_id					FROM ' . POSTS_TABLE . '					WHERE forum_id IN (0, ' . implode(', ', $forum_list) . ')						AND post_approved = 0					ORDER BY post_time DESC';				$result = $db->sql_query_limit($sql, 5);				while ($row = $db->sql_fetchrow($result))				{					$post_list[] = $row['post_id'];				}				$db->sql_freeresult($result);				if (empty($post_list))				{					$total = 0;				}			}			if ($total)			{				$sql = 'SELECT p.post_id, p.post_subject, p.post_time, p.poster_id, p.post_username, u.username, u.username_clean, u.user_colour, t.topic_id, t.topic_title, t.topic_first_post_id, p.forum_id					FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . ' t, ' . USERS_TABLE . ' u					WHERE ' . $db->sql_in_set('p.post_id', $post_list) . '						AND t.topic_id = p.topic_id						AND p.poster_id = u.user_id					ORDER BY p.post_time DESC';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$global_topic = ($row['forum_id']) ? false : true;					if ($global_topic)					{						$row['forum_id'] = $global_id;					}					$template->assign_block_vars('unapproved', array(						'U_POST_DETAILS'	=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue&amp;mode=approve_details&amp;f=' . $row['forum_id'] . '&amp;p=' . $row['post_id']),						'U_MCP_FORUM'		=> (!$global_topic) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main&amp;mode=forum_view&amp;f=' . $row['forum_id']) : '',						'U_MCP_TOPIC'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main&amp;mode=topic_view&amp;f=' . $row['forum_id'] . '&amp;t=' . $row['topic_id']),						'U_FORUM'			=> (!$global_topic) ? append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $row['forum_id']) : '',						'U_TOPIC'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $row['forum_id'] . '&amp;t=' . $row['topic_id']),						'AUTHOR_FULL'		=> get_username_string('full', $row['poster_id'], $row['username'], $row['user_colour']),						'AUTHOR'			=> get_username_string('username', $row['poster_id'], $row['username'], $row['user_colour']),						'AUTHOR_COLOUR'		=> get_username_string('colour', $row['poster_id'], $row['username'], $row['user_colour']),						'U_AUTHOR'			=> get_username_string('profile', $row['poster_id'], $row['username'], $row['user_colour']),						'FORUM_NAME'	=> (!$global_topic) ? $forum_names[$row['forum_id']] : $user->lang['GLOBAL_ANNOUNCEMENT'],						'POST_ID'		=> $row['post_id'],						'TOPIC_TITLE'	=> $row['topic_title'],						'SUBJECT'		=> ($row['post_subject']) ? $row['post_subject'] : $user->lang['NO_SUBJECT'],						'POST_TIME'		=> $user->format_date($row['post_time']))					);				}				$db->sql_freeresult($result);			}			$s_hidden_fields = build_hidden_fields(array(				'redirect'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main' . (($forum_id) ? '&amp;f=' . $forum_id : ''))			));			$template->assign_vars(array(				'S_HIDDEN_FIELDS'		=> $s_hidden_fields,				'S_MCP_QUEUE_ACTION'	=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=queue"),			));			if ($total == 0)			{				$template->assign_vars(array(					'L_UNAPPROVED_TOTAL'		=> $user->lang['UNAPPROVED_POSTS_ZERO_TOTAL'],					'S_HAS_UNAPPROVED_POSTS'	=> false)				);			}			else			{				$template->assign_vars(array(					'L_UNAPPROVED_TOTAL'		=> ($total == 1) ? $user->lang['UNAPPROVED_POST_TOTAL'] : sprintf($user->lang['UNAPPROVED_POSTS_TOTAL'], $total),					'S_HAS_UNAPPROVED_POSTS'	=> true)				);			}		}	}	// Latest 5 reported	if ($module->loaded('reports'))	{		$forum_list = array_values(array_intersect(get_forum_list('f_read'), get_forum_list('m_report')));		$template->assign_var('S_SHOW_REPORTS', (!empty($forum_list)) ? true : false);		if (!empty($forum_list))		{			$sql = 'SELECT COUNT(r.report_id) AS total				FROM ' . REPORTS_TABLE . ' r, ' . POSTS_TABLE . ' p				WHERE r.post_id = p.post_id					AND r.pm_id = 0					AND r.report_closed = 0					AND p.forum_id IN (0, ' . implode(', ', $forum_list) . ')';			$result = $db->sql_query($sql);			$total = (int) $db->sql_fetchfield('total');			$db->sql_freeresult($result);			if ($total)			{				$global_id = $forum_list[0];				$sql = $db->sql_build_query('SELECT', array(					'SELECT'	=> 'r.report_time, p.post_id, p.post_subject, p.post_time, u.username, u.username_clean, u.user_colour, u.user_id, u2.username as author_name, u2.username_clean as author_name_clean, u2.user_colour as author_colour, u2.user_id as author_id, t.topic_id, t.topic_title, f.forum_id, f.forum_name',					'FROM'		=> array(						REPORTS_TABLE			=> 'r',						REPORTS_REASONS_TABLE	=> 'rr',						TOPICS_TABLE			=> 't',						USERS_TABLE				=> array('u', 'u2'),						POSTS_TABLE				=> 'p'					),					'LEFT_JOIN'	=> array(						array(							'FROM'	=> array(FORUMS_TABLE => 'f'),							'ON'	=> 'f.forum_id = p.forum_id'						)					),					'WHERE'		=> 'r.post_id = p.post_id						AND r.pm_id = 0						AND r.report_closed = 0						AND r.reason_id = rr.reason_id						AND p.topic_id = t.topic_id						AND r.user_id = u.user_id						AND p.poster_id = u2.user_id						AND p.forum_id IN (0, ' . implode(', ', $forum_list) . ')',					'ORDER_BY'	=> 'p.post_time DESC'				));				$result = $db->sql_query_limit($sql, 5);				while ($row = $db->sql_fetchrow($result))				{					$global_topic = ($row['forum_id']) ? false : true;					if ($global_topic)					{						$row['forum_id'] = $global_id;					}					$template->assign_block_vars('report', array(						'U_POST_DETAILS'	=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'f=' . $row['forum_id'] . '&amp;p=' . $row['post_id'] . "&amp;i=reports&amp;mode=report_details"),						'U_MCP_FORUM'		=> (!$global_topic) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'f=' . $row['forum_id'] . "&amp;i=$id&amp;mode=forum_view") : '',						'U_MCP_TOPIC'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'f=' . $row['forum_id'] . '&amp;t=' . $row['topic_id'] . "&amp;i=$id&amp;mode=topic_view"),						'U_FORUM'			=> (!$global_topic) ? append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $row['forum_id']) : '',						'U_TOPIC'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $row['forum_id'] . '&amp;t=' . $row['topic_id']),						'REPORTER_FULL'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']),						'REPORTER'			=> get_username_string('username', $row['user_id'], $row['username'], $row['user_colour']),						'REPORTER_COLOUR'	=> get_username_string('colour', $row['user_id'], $row['username'], $row['user_colour']),						'U_REPORTER'		=> get_username_string('profile', $row['user_id'], $row['username'], $row['user_colour']),						'AUTHOR_FULL'		=> get_username_string('full', $row['author_id'], $row['author_name'], $row['author_colour']),						'AUTHOR'			=> get_username_string('username', $row['author_id'], $row['author_name'], $row['author_colour']),						'AUTHOR_COLOUR'		=> get_username_string('colour', $row['author_id'], $row['author_name'], $row['author_colour']),						'U_AUTHOR'			=> get_username_string('profile', $row['author_id'], $row['author_name'], $row['author_colour']),						'FORUM_NAME'	=> (!$global_topic) ? $row['forum_name'] : $user->lang['GLOBAL_ANNOUNCEMENT'],						'TOPIC_TITLE'	=> $row['topic_title'],						'SUBJECT'		=> ($row['post_subject']) ? $row['post_subject'] : $user->lang['NO_SUBJECT'],						'REPORT_TIME'	=> $user->format_date($row['report_time']),						'POST_TIME'		=> $user->format_date($row['post_time']),					));				}			}			if ($total == 0)			{				$template->assign_vars(array(					'L_REPORTS_TOTAL'	=>	$user->lang['REPORTS_ZERO_TOTAL'],					'S_HAS_REPORTS'		=>	false)				);			}			else			{				$template->assign_vars(array(					'L_REPORTS_TOTAL'	=> ($total == 1) ? $user->lang['REPORT_TOTAL'] : sprintf($user->lang['REPORTS_TOTAL'], $total),					'S_HAS_REPORTS'		=> true)				);			}		}	}	// Latest 5 reported PMs	if ($module->loaded('pm_reports') && $auth->acl_getf_global('m_report'))	{		$template->assign_var('S_SHOW_PM_REPORTS', true);		$user->add_lang(array('ucp'));		$sql = 'SELECT COUNT(r.report_id) AS total			FROM ' . REPORTS_TABLE . ' r, ' . PRIVMSGS_TABLE . ' p			WHERE r.post_id = 0				AND r.pm_id = p.msg_id				AND r.report_closed = 0';		$result = $db->sql_query($sql);		$total = (int) $db->sql_fetchfield('total');		$db->sql_freeresult($result);		if ($total)		{			include($phpbb_root_path . 'includes/functions_privmsgs.' . $phpEx);			$sql = $db->sql_build_query('SELECT', array(				'SELECT'	=> 'r.report_id, r.report_time, p.msg_id, p.message_subject, p.message_time, p.to_address, p.bcc_address, u.username, u.username_clean, u.user_colour, u.user_id, u2.username as author_name, u2.username_clean as author_name_clean, u2.user_colour as author_colour, u2.user_id as author_id',				'FROM'		=> array(					REPORTS_TABLE			=> 'r',					REPORTS_REASONS_TABLE	=> 'rr',					USERS_TABLE				=> array('u', 'u2'),					PRIVMSGS_TABLE				=> 'p'				),				'WHERE'		=> 'r.pm_id = p.msg_id					AND r.post_id = 0					AND r.report_closed = 0					AND r.reason_id = rr.reason_id					AND r.user_id = u.user_id					AND p.author_id = u2.user_id',				'ORDER_BY'	=> 'p.message_time DESC'			));			$result = $db->sql_query_limit($sql, 5);			$pm_by_id = $pm_list = array();			while ($row = $db->sql_fetchrow($result))			{				$pm_by_id[(int) $row['msg_id']] = $row;				$pm_list[] = (int) $row['msg_id'];			}			$address_list = get_recipient_strings($pm_by_id);			foreach ($pm_list as $message_id)			{				$row = $pm_by_id[$message_id];				$template->assign_block_vars('pm_report', array(					'U_PM_DETAILS'	=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'r=' . $row['report_id'] . "&amp;i=pm_reports&amp;mode=pm_report_details"),					'REPORTER_FULL'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']),					'REPORTER'			=> get_username_string('username', $row['user_id'], $row['username'], $row['user_colour']),					'REPORTER_COLOUR'	=> get_username_string('colour', $row['user_id'], $row['username'], $row['user_colour']),					'U_REPORTER'		=> get_username_string('profile', $row['user_id'], $row['username'], $row['user_colour']),					'PM_AUTHOR_FULL'		=> get_username_string('full', $row['author_id'], $row['author_name'], $row['author_colour']),					'PM_AUTHOR'			=> get_username_string('username', $row['author_id'], $row['author_name'], $row['author_colour']),					'PM_AUTHOR_COLOUR'		=> get_username_string('colour', $row['author_id'], $row['author_name'], $row['author_colour']),					'U_PM_AUTHOR'			=> get_username_string('profile', $row['author_id'], $row['author_name'], $row['author_colour']),					'PM_SUBJECT'		=> $row['message_subject'],					'REPORT_TIME'		=> $user->format_date($row['report_time']),					'PM_TIME'			=> $user->format_date($row['message_time']),					'RECIPIENTS'		=> implode(', ', $address_list[$row['msg_id']]),				));			}		}		if ($total == 0)		{			$template->assign_vars(array(				'L_PM_REPORTS_TOTAL'	=>	$user->lang['PM_REPORTS_ZERO_TOTAL'],				'S_HAS_PM_REPORTS'		=>	false)			);		}		else		{			$template->assign_vars(array(				'L_PM_REPORTS_TOTAL'	=> ($total == 1) ? $user->lang['PM_REPORT_TOTAL'] : sprintf($user->lang['PM_REPORTS_TOTAL'], $total),				'S_HAS_PM_REPORTS'		=> true)			);		}	}	// Latest 5 logs	if ($module->loaded('logs'))	{		$forum_list = array_values(array_intersect(get_forum_list('f_read'), get_forum_list('m_')));		if (!empty($forum_list))		{			// Add forum_id 0 for global announcements			$forum_list[] = 0;			$log_count = false;			$log = array();			view_log('mod', $log, $log_count, 5, 0, $forum_list);			foreach ($log as $row)			{				$template->assign_block_vars('log', array(					'USERNAME'		=> $row['username_full'],					'IP'			=> $row['ip'],					'TIME'			=> $user->format_date($row['time']),					'ACTION'		=> $row['action'],					'U_VIEW_TOPIC'	=> (!empty($row['viewtopic'])) ? $row['viewtopic'] : '',					'U_VIEWLOGS'	=> (!empty($row['viewlogs'])) ? $row['viewlogs'] : '')				);			}		}		$template->assign_vars(array(			'S_SHOW_LOGS'	=> (!empty($forum_list)) ? true : false,			'S_HAS_LOGS'	=> (!empty($log)) ? true : false)		);	}	$template->assign_var('S_MCP_ACTION', append_sid("{$phpbb_root_path}mcp.$phpEx"));	make_jumpbox(append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main&amp;mode=forum_view'), 0, false, 'm_', true);}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_permission_roles{	var $u_action;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		include_once($phpbb_root_path . 'includes/functions_user.' . $phpEx);		include_once($phpbb_root_path . 'includes/acp/auth.' . $phpEx);		$auth_admin = new auth_admin();		$user->add_lang('acp/permissions');		add_permission_language();		$this->tpl_name = 'acp_permission_roles';		$submit = (isset($_POST['submit'])) ? true : false;		$role_id = request_var('role_id', 0);		$action = request_var('action', '');		$action = (isset($_POST['add'])) ? 'add' : $action;		$form_name = 'acp_permissions';		add_form_key($form_name);		switch ($mode)		{			case 'admin_roles':				$permission_type = 'a_';				$this->page_title = 'ACP_ADMIN_ROLES';			break;			case 'user_roles':				$permission_type = 'u_';				$this->page_title = 'ACP_USER_ROLES';			break;			case 'mod_roles':				$permission_type = 'm_';				$this->page_title = 'ACP_MOD_ROLES';			break;			case 'forum_roles':				$permission_type = 'f_';				$this->page_title = 'ACP_FORUM_ROLES';			break;			default:				trigger_error('NO_MODE', E_USER_ERROR);			break;		}		$template->assign_vars(array(			'L_TITLE'		=> $user->lang[$this->page_title],			'L_EXPLAIN'		=> $user->lang[$this->page_title . '_EXPLAIN'])		);		// Take action... admin submitted something		if ($submit || $action == 'remove')		{			switch ($action)			{				case 'remove':					if (!$role_id)					{						trigger_error($user->lang['NO_ROLE_SELECTED'] . adm_back_link($this->u_action), E_USER_WARNING);					}					$sql = 'SELECT *						FROM ' . ACL_ROLES_TABLE . '						WHERE role_id = ' . $role_id;					$result = $db->sql_query($sql);					$role_row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if (!$role_row)					{						trigger_error($user->lang['NO_ROLE_SELECTED'] . adm_back_link($this->u_action), E_USER_WARNING);					}					if (confirm_box(true))					{						$this->remove_role($role_id, $permission_type);						$role_name = (!empty($user->lang[$role_row['role_name']])) ? $user->lang[$role_row['role_name']] : $role_row['role_name'];						add_log('admin', 'LOG_' . strtoupper($permission_type) . 'ROLE_REMOVED', $role_name);						trigger_error($user->lang['ROLE_DELETED'] . adm_back_link($this->u_action));					}					else					{						confirm_box(false, 'DELETE_ROLE', build_hidden_fields(array(							'i'			=> $id,							'mode'		=> $mode,							'role_id'	=> $role_id,							'action'	=> $action,						)));					}				break;				case 'edit':					if (!$role_id)					{						trigger_error($user->lang['NO_ROLE_SELECTED'] . adm_back_link($this->u_action), E_USER_WARNING);					}					// Get role we edit					$sql = 'SELECT *						FROM ' . ACL_ROLES_TABLE . '						WHERE role_id = ' . $role_id;					$result = $db->sql_query($sql);					$role_row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if (!$role_row)					{						trigger_error($user->lang['NO_ROLE_SELECTED'] . adm_back_link($this->u_action), E_USER_WARNING);					}				// no break;				case 'add':					if (!check_form_key($form_name))					{						trigger_error($user->lang['FORM_INVALID']. adm_back_link($this->u_action), E_USER_WARNING);					}					$role_name = utf8_normalize_nfc(request_var('role_name', '', true));					$role_description = utf8_normalize_nfc(request_var('role_description', '', true));					$auth_settings = request_var('setting', array('' => 0));					if (!$role_name)					{						trigger_error($user->lang['NO_ROLE_NAME_SPECIFIED'] . adm_back_link($this->u_action), E_USER_WARNING);					}					if (utf8_strlen($role_description) > 4000)					{						trigger_error($user->lang['ROLE_DESCRIPTION_LONG'] . adm_back_link($this->u_action), E_USER_WARNING);					}					// if we add/edit a role we check the name to be unique among the settings...					$sql = 'SELECT role_id						FROM ' . ACL_ROLES_TABLE . "						WHERE role_type = '" . $db->sql_escape($permission_type) . "'							AND role_name = '" . $db->sql_escape($role_name) . "'";					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					// Make sure we only print out the error if we add the role or change it's name					if ($row && ($mode == 'add' || ($mode == 'edit' && $role_row['role_name'] != $role_name)))					{						trigger_error(sprintf($user->lang['ROLE_NAME_ALREADY_EXIST'], $role_name) . adm_back_link($this->u_action), E_USER_WARNING);					}					$sql_ary = array(						'role_name'			=> (string) $role_name,						'role_description'	=> (string) $role_description,						'role_type'			=> (string) $permission_type,					);					if ($action == 'edit')					{						$sql = 'UPDATE ' . ACL_ROLES_TABLE . '							SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '							WHERE role_id = ' . $role_id;						$db->sql_query($sql);					}					else					{						// Get maximum role order for inserting a new role...						$sql = 'SELECT MAX(role_order) as max_order							FROM ' . ACL_ROLES_TABLE . "							WHERE role_type = '" . $db->sql_escape($permission_type) . "'";						$result = $db->sql_query($sql);						$max_order = (int) $db->sql_fetchfield('max_order');						$db->sql_freeresult($result);						$sql_ary['role_order'] = $max_order + 1;						$sql = 'INSERT INTO ' . ACL_ROLES_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);						$db->sql_query($sql);						$role_id = $db->sql_nextid();					}					// Now add the auth settings					$auth_admin->acl_set_role($role_id, $auth_settings);					$role_name = (!empty($user->lang[$role_name])) ? $user->lang[$role_name] : $role_name;					add_log('admin', 'LOG_' . strtoupper($permission_type) . 'ROLE_' . strtoupper($action), $role_name);					trigger_error($user->lang['ROLE_' . strtoupper($action) . '_SUCCESS'] . adm_back_link($this->u_action));				break;			}		}		// Display screens		switch ($action)		{			case 'add':				$options_from = request_var('options_from', 0);				$role_row = array(					'role_name'			=> utf8_normalize_nfc(request_var('role_name', '', true)),					'role_description'	=> utf8_normalize_nfc(request_var('role_description', '', true)),					'role_type'			=> $permission_type,				);				if ($options_from)				{					$sql = 'SELECT p.auth_option_id, p.auth_setting, o.auth_option						FROM ' . ACL_ROLES_DATA_TABLE . ' p, ' . ACL_OPTIONS_TABLE . ' o						WHERE o.auth_option_id = p.auth_option_id							AND p.role_id = ' . $options_from . '						ORDER BY p.auth_option_id';					$result = $db->sql_query($sql);					$auth_options = array();					while ($row = $db->sql_fetchrow($result))					{						$auth_options[$row['auth_option']] = $row['auth_setting'];					}					$db->sql_freeresult($result);				}				else				{					$sql = 'SELECT auth_option_id, auth_option						FROM ' . ACL_OPTIONS_TABLE . "						WHERE auth_option " . $db->sql_like_expression($permission_type . $db->any_char) . "							AND auth_option <> '{$permission_type}'						ORDER BY auth_option_id";					$result = $db->sql_query($sql);					$auth_options = array();					while ($row = $db->sql_fetchrow($result))					{						$auth_options[$row['auth_option']] = ACL_NO;					}					$db->sql_freeresult($result);				}			// no break;			case 'edit':				if ($action == 'edit')				{					if (!$role_id)					{						trigger_error($user->lang['NO_ROLE_SELECTED'] . adm_back_link($this->u_action), E_USER_WARNING);					}										$sql = 'SELECT *						FROM ' . ACL_ROLES_TABLE . '						WHERE role_id = ' . $role_id;					$result = $db->sql_query($sql);					$role_row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					$sql = 'SELECT p.auth_option_id, p.auth_setting, o.auth_option						FROM ' . ACL_ROLES_DATA_TABLE . ' p, ' . ACL_OPTIONS_TABLE . ' o						WHERE o.auth_option_id = p.auth_option_id							AND p.role_id = ' . $role_id . '						ORDER BY p.auth_option_id';					$result = $db->sql_query($sql);					$auth_options = array();					while ($row = $db->sql_fetchrow($result))					{						$auth_options[$row['auth_option']] = $row['auth_setting'];					}					$db->sql_freeresult($result);				}				if (!$role_row)				{					trigger_error($user->lang['NO_ROLE_SELECTED'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$template->assign_vars(array(					'S_EDIT'			=> true,					'U_ACTION'			=> $this->u_action . "&amp;action={$action}&amp;role_id={$role_id}",					'U_BACK'			=> $this->u_action,					'ROLE_NAME'			=> $role_row['role_name'],					'ROLE_DESCRIPTION'	=> $role_row['role_description'],					'L_ACL_TYPE'		=> $user->lang['ACL_TYPE_' . strtoupper($permission_type)],					)				);				// We need to fill the auth options array with ACL_NO options ;)				$sql = 'SELECT auth_option_id, auth_option					FROM ' . ACL_OPTIONS_TABLE . "					WHERE auth_option " . $db->sql_like_expression($permission_type . $db->any_char) . "						AND auth_option <> '{$permission_type}'					ORDER BY auth_option_id";				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					if (!isset($auth_options[$row['auth_option']]))					{						$auth_options[$row['auth_option']] = ACL_NO;					}				}				$db->sql_freeresult($result);				// Unset global permission option				unset($auth_options[$permission_type]);				// Display auth options				$this->display_auth_options($auth_options);				// Get users/groups/forums using this preset...				if ($action == 'edit')				{					$hold_ary = $auth_admin->get_role_mask($role_id);					if (sizeof($hold_ary))					{						$role_name = (!empty($user->lang[$role_row['role_name']])) ? $user->lang[$role_row['role_name']] : $role_row['role_name'];						$template->assign_vars(array(							'S_DISPLAY_ROLE_MASK'	=> true,							'L_ROLE_ASSIGNED_TO'	=> sprintf($user->lang['ROLE_ASSIGNED_TO'], $role_name))						);						$auth_admin->display_role_mask($hold_ary);					}				}				return;			break;			case 'move_up':			case 'move_down':				$order = request_var('order', 0);				$order_total = $order * 2 + (($action == 'move_up') ? -1 : 1);				$sql = 'UPDATE ' . ACL_ROLES_TABLE . '					SET role_order = ' . $order_total . " - role_order					WHERE role_type = '" . $db->sql_escape($permission_type) . "'						AND role_order IN ($order, " . (($action == 'move_up') ? $order - 1 : $order + 1) . ')';				$db->sql_query($sql);			break;		}		// By default, check that role_order is valid and fix it if necessary		$sql = 'SELECT role_id, role_order			FROM ' . ACL_ROLES_TABLE . "			WHERE role_type = '" . $db->sql_escape($permission_type) . "'			ORDER BY role_order ASC";		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			$order = 0;			do			{				$order++;				if ($row['role_order'] != $order)				{					$db->sql_query('UPDATE ' . ACL_ROLES_TABLE . " SET role_order = $order WHERE role_id = {$row['role_id']}");				}			}			while ($row = $db->sql_fetchrow($result));		}		$db->sql_freeresult($result);		// Display assigned items?		$display_item = request_var('display_item', 0);		// Select existing roles		$sql = 'SELECT *			FROM ' . ACL_ROLES_TABLE . "			WHERE role_type = '" . $db->sql_escape($permission_type) . "'			ORDER BY role_order ASC";		$result = $db->sql_query($sql);		$s_role_options = '';		while ($row = $db->sql_fetchrow($result))		{			$role_name = (!empty($user->lang[$row['role_name']])) ? $user->lang[$row['role_name']] : $row['role_name'];			$template->assign_block_vars('roles', array(				'ROLE_NAME'				=> $role_name,				'ROLE_DESCRIPTION'		=> (!empty($user->lang[$row['role_description']])) ? $user->lang[$row['role_description']] : nl2br($row['role_description']),				'U_EDIT'			=> $this->u_action . '&amp;action=edit&amp;role_id=' . $row['role_id'],				'U_REMOVE'			=> $this->u_action . '&amp;action=remove&amp;role_id=' . $row['role_id'],				'U_MOVE_UP'			=> $this->u_action . '&amp;action=move_up&amp;order=' . $row['role_order'],				'U_MOVE_DOWN'		=> $this->u_action . '&amp;action=move_down&amp;order=' . $row['role_order'],				'U_DISPLAY_ITEMS'	=> ($row['role_id'] == $display_item) ? '' : $this->u_action . '&amp;display_item=' . $row['role_id'] . '#assigned_to')			);			$s_role_options .= '<option value="' . $row['role_id'] . '">' . $role_name . '</option>';			if ($display_item == $row['role_id'])			{				$template->assign_vars(array(					'L_ROLE_ASSIGNED_TO'	=> sprintf($user->lang['ROLE_ASSIGNED_TO'], $role_name))				);			}		}		$db->sql_freeresult($result);		$template->assign_vars(array(			'S_ROLE_OPTIONS'		=> $s_role_options)		);		if ($display_item)		{			$template->assign_vars(array(				'S_DISPLAY_ROLE_MASK'	=> true)			);			$hold_ary = $auth_admin->get_role_mask($display_item);			$auth_admin->display_role_mask($hold_ary);		}	}	/**	* Display permission settings able to be set	*/	function display_auth_options($auth_options)	{		global $template, $user;		$content_array = $categories = array();		$key_sort_array = array(0);		$auth_options = array(0 => $auth_options);		// Making use of auth_admin method here (we do not really want to change two similar code fragments)		auth_admin::build_permission_array($auth_options, $content_array, $categories, $key_sort_array);		$content_array = $content_array[0];		$template->assign_var('S_NUM_PERM_COLS', sizeof($categories));		// Assign to template		foreach ($content_array as $cat => $cat_array)		{			$template->assign_block_vars('auth', array(				'CAT_NAME'	=> $user->lang['permission_cat'][$cat],				'S_YES'		=> ($cat_array['S_YES'] && !$cat_array['S_NEVER'] && !$cat_array['S_NO']) ? true : false,				'S_NEVER'	=> ($cat_array['S_NEVER'] && !$cat_array['S_YES'] && !$cat_array['S_NO']) ? true : false,				'S_NO'		=> ($cat_array['S_NO'] && !$cat_array['S_NEVER'] && !$cat_array['S_YES']) ? true : false)			);			foreach ($cat_array['permissions'] as $permission => $allowed)			{				$template->assign_block_vars('auth.mask', array(					'S_YES'		=> ($allowed == ACL_YES) ? true : false,					'S_NEVER'	=> ($allowed == ACL_NEVER) ? true : false,					'S_NO'		=> ($allowed == ACL_NO) ? true : false,					'FIELD_NAME'	=> $permission,					'PERMISSION'	=> $user->lang['acl_' . $permission]['lang'])				);			}		}	}	/**	* Remove role	*/	function remove_role($role_id, $permission_type)	{		global $db;		$auth_admin = new auth_admin();		// Get complete auth array		$sql = 'SELECT auth_option, auth_option_id			FROM ' . ACL_OPTIONS_TABLE . "			WHERE auth_option " . $db->sql_like_expression($permission_type . $db->any_char);		$result = $db->sql_query($sql);		$auth_settings = array();		while ($row = $db->sql_fetchrow($result))		{			$auth_settings[$row['auth_option']] = ACL_NO;		}		$db->sql_freeresult($result);		// Get the role auth settings we need to re-set...		$sql = 'SELECT o.auth_option, r.auth_setting			FROM ' . ACL_ROLES_DATA_TABLE . ' r, ' . ACL_OPTIONS_TABLE . ' o			WHERE o.auth_option_id = r.auth_option_id				AND r.role_id = ' . $role_id;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$auth_settings[$row['auth_option']] = $row['auth_setting'];		}		$db->sql_freeresult($result);		// Get role assignments		$hold_ary = $auth_admin->get_role_mask($role_id);		// Re-assign permissions		foreach ($hold_ary as $forum_id => $forum_ary)		{			if (isset($forum_ary['users']))			{				$auth_admin->acl_set('user', $forum_id, $forum_ary['users'], $auth_settings, 0, false);			}			if (isset($forum_ary['groups']))			{				$auth_admin->acl_set('group', $forum_id, $forum_ary['groups'], $auth_settings, 0, false);			}		}		// Remove role from users and groups just to be sure (happens through acl_set)		$sql = 'DELETE FROM ' . ACL_USERS_TABLE . '			WHERE auth_role_id = ' . $role_id;		$db->sql_query($sql);		$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . '			WHERE auth_role_id = ' . $role_id;		$db->sql_query($sql);		// Remove role data and role		$sql = 'DELETE FROM ' . ACL_ROLES_DATA_TABLE . '			WHERE role_id = ' . $role_id;		$db->sql_query($sql);		$sql = 'DELETE FROM ' . ACL_ROLES_TABLE . '			WHERE role_id = ' . $role_id;		$db->sql_query($sql);		$auth_admin->acl_clear_prefetch();	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Permission/Auth class* @package phpBB3*/class auth{	var $acl = array();	var $cache = array();	var $acl_options = array();	var $acl_forum_ids = false;	/**	* Init permissions	*/	function acl(&$userdata)	{		global $db, $cache;		$this->acl = $this->cache = $this->acl_options = array();		$this->acl_forum_ids = false;		if (($this->acl_options = $cache->get('_acl_options')) === false)		{			$sql = 'SELECT auth_option_id, auth_option, is_global, is_local				FROM ' . ACL_OPTIONS_TABLE . '				ORDER BY auth_option_id';			$result = $db->sql_query($sql);			$global = $local = 0;			$this->acl_options = array();			while ($row = $db->sql_fetchrow($result))			{				if ($row['is_global'])				{					$this->acl_options['global'][$row['auth_option']] = $global++;				}				if ($row['is_local'])				{					$this->acl_options['local'][$row['auth_option']] = $local++;				}				$this->acl_options['id'][$row['auth_option']] = (int) $row['auth_option_id'];				$this->acl_options['option'][(int) $row['auth_option_id']] = $row['auth_option'];			}			$db->sql_freeresult($result);			$cache->put('_acl_options', $this->acl_options);		}		if (!trim($userdata['user_permissions']))		{			$this->acl_cache($userdata);		}		// Fill ACL array		$this->_fill_acl($userdata['user_permissions']);		// Verify bitstring length with options provided...		$renew = false;		$global_length = sizeof($this->acl_options['global']);		$local_length = sizeof($this->acl_options['local']);		// Specify comparing length (bitstring is padded to 31 bits)		$global_length = ($global_length % 31) ? ($global_length - ($global_length % 31) + 31) : $global_length;		$local_length = ($local_length % 31) ? ($local_length - ($local_length % 31) + 31) : $local_length;		// You thought we are finished now? Noooo... now compare them.		foreach ($this->acl as $forum_id => $bitstring)		{			if (($forum_id && strlen($bitstring) != $local_length) || (!$forum_id && strlen($bitstring) != $global_length))			{				$renew = true;				break;			}		}		// If a bitstring within the list does not match the options, we have a user with incorrect permissions set and need to renew them		if ($renew)		{			$this->acl_cache($userdata);			$this->_fill_acl($userdata['user_permissions']);		}		return;	}	/**	* Fill ACL array with relevant bitstrings from user_permissions column	* @access private	*/	function _fill_acl($user_permissions)	{		$seq_cache = array();		$this->acl = array();		$user_permissions = explode("\n", $user_permissions);		foreach ($user_permissions as $f => $seq)		{			if ($seq)			{				$i = 0;				if (!isset($this->acl[$f]))				{					$this->acl[$f] = '';				}				while ($subseq = substr($seq, $i, 6))				{					if (isset($seq_cache[$subseq]))					{						$converted = $seq_cache[$subseq];					}					else					{						$converted = $seq_cache[$subseq] = str_pad(base_convert($subseq, 36, 2), 31, 0, STR_PAD_LEFT);					}					// We put the original bitstring into the acl array					$this->acl[$f] .= $converted;					$i += 6;				}			}		}	}	/**	* Look up an option	* if the option is prefixed with !, then the result becomes negated	*	* If a forum id is specified the local option will be combined with a global option if one exist.	* If a forum id is not specified, only the global option will be checked.	*/	function acl_get($opt, $f = 0)	{		$negate = false;		if (strpos($opt, '!') === 0)		{			$negate = true;			$opt = substr($opt, 1);		}		if (!isset($this->cache[$f][$opt]))		{			// We combine the global/local option with an OR because some options are global and local.			// If the user has the global permission the local one is true too and vice versa			$this->cache[$f][$opt] = false;			// Is this option a global permission setting?			if (isset($this->acl_options['global'][$opt]))			{				if (isset($this->acl[0]))				{					$this->cache[$f][$opt] = $this->acl[0][$this->acl_options['global'][$opt]];				}			}			// Is this option a local permission setting?			// But if we check for a global option only, we won't combine the options...			if ($f != 0 && isset($this->acl_options['local'][$opt]))			{				if (isset($this->acl[$f]) && isset($this->acl[$f][$this->acl_options['local'][$opt]]))				{					$this->cache[$f][$opt] |= $this->acl[$f][$this->acl_options['local'][$opt]];				}			}		}		// Founder always has all global options set to true...		return ($negate) ? !$this->cache[$f][$opt] : $this->cache[$f][$opt];	}	/**	* Get forums with the specified permission setting	* if the option is prefixed with !, then the result becomes nagated	*	* @param bool $clean set to true if only values needs to be returned which are set/unset	*/	function acl_getf($opt, $clean = false)	{		$acl_f = array();		$negate = false;		if (strpos($opt, '!') === 0)		{			$negate = true;			$opt = substr($opt, 1);		}		// If we retrieve a list of forums not having permissions in, we need to get every forum_id		if ($negate)		{			if ($this->acl_forum_ids === false)			{				global $db;				$sql = 'SELECT forum_id					FROM ' . FORUMS_TABLE;				if (sizeof($this->acl))				{					$sql .= ' WHERE ' . $db->sql_in_set('forum_id', array_keys($this->acl), true);				}				$result = $db->sql_query($sql);				$this->acl_forum_ids = array();				while ($row = $db->sql_fetchrow($result))				{					$this->acl_forum_ids[] = $row['forum_id'];				}				$db->sql_freeresult($result);			}		}		if (isset($this->acl_options['local'][$opt]))		{			foreach ($this->acl as $f => $bitstring)			{				// Skip global settings				if (!$f)				{					continue;				}				$allowed = (!isset($this->cache[$f][$opt])) ? $this->acl_get($opt, $f) : $this->cache[$f][$opt];				if (!$clean)				{					$acl_f[$f][$opt] = ($negate) ? !$allowed : $allowed;				}				else				{					if (($negate && !$allowed) || (!$negate && $allowed))					{						$acl_f[$f][$opt] = 1;					}				}			}		}		// If we get forum_ids not having this permission, we need to fill the remaining parts		if ($negate && sizeof($this->acl_forum_ids))		{			foreach ($this->acl_forum_ids as $f)			{				$acl_f[$f][$opt] = 1;			}		}		return $acl_f;	}	/**	* Get local permission state for any forum.	*	* Returns true if user has the permission in one or more forums, false if in no forum.	* If global option is checked it returns the global state (same as acl_get($opt))	* Local option has precedence...	*/	function acl_getf_global($opt)	{		if (is_array($opt))		{			// evaluates to true as soon as acl_getf_global is true for one option			foreach ($opt as $check_option)			{				if ($this->acl_getf_global($check_option))				{					return true;				}			}			return false;		}		if (isset($this->acl_options['local'][$opt]))		{			foreach ($this->acl as $f => $bitstring)			{				// Skip global settings				if (!$f)				{					continue;				}				// as soon as the user has any permission we're done so return true				if ((!isset($this->cache[$f][$opt])) ? $this->acl_get($opt, $f) : $this->cache[$f][$opt])				{					return true;				}			}		}		else if (isset($this->acl_options['global'][$opt]))		{			return $this->acl_get($opt);		}		return false;	}	/**	* Get permission settings (more than one)	*/	function acl_gets()	{		$args = func_get_args();		$f = array_pop($args);		if (!is_numeric($f))		{			$args[] = $f;			$f = 0;		}		// alternate syntax: acl_gets(array('m_', 'a_'), $forum_id)		if (is_array($args[0]))		{			$args = $args[0];		}		$acl = 0;		foreach ($args as $opt)		{			$acl |= $this->acl_get($opt, $f);		}		return $acl;	}	/**	* Get permission listing based on user_id/options/forum_ids	*	* Be careful when using this function with permissions a_, m_, u_ and f_ !	* It may not work correctly. When a user group grants an a_* permission,	* e.g. a_foo, but the user's a_foo permission is set to "Never", then	* the user does not in fact have the a_ permission.	* But the user will still be listed as having the a_ permission.	*	* For more information see: http://tracker.phpbb.com/browse/PHPBB3-10252	*/	function acl_get_list($user_id = false, $opts = false, $forum_id = false)	{		if ($user_id !== false && !is_array($user_id) && $opts === false && $forum_id === false)		{			$hold_ary = array($user_id => $this->acl_raw_data_single_user($user_id));		}		else		{			$hold_ary = $this->acl_raw_data($user_id, $opts, $forum_id);		}		$auth_ary = array();		foreach ($hold_ary as $user_id => $forum_ary)		{			foreach ($forum_ary as $forum_id => $auth_option_ary)			{				foreach ($auth_option_ary as $auth_option => $auth_setting)				{					if ($auth_setting)					{						$auth_ary[$forum_id][$auth_option][] = $user_id;					}				}			}		}		return $auth_ary;	}	/**	* Cache data to user_permissions row	*/	function acl_cache(&$userdata)	{		global $db;		// Empty user_permissions		$userdata['user_permissions'] = '';		$hold_ary = $this->acl_raw_data_single_user($userdata['user_id']);		// Key 0 in $hold_ary are global options, all others are forum_ids		// If this user is founder we're going to force fill the admin options ...		if ($userdata['user_type'] == USER_FOUNDER)		{			foreach ($this->acl_options['global'] as $opt => $id)			{				if (strpos($opt, 'a_') === 0)				{					$hold_ary[0][$this->acl_options['id'][$opt]] = ACL_YES;				}			}		}		$hold_str = $this->build_bitstring($hold_ary);		if ($hold_str)		{			$userdata['user_permissions'] = $hold_str;			$sql = 'UPDATE ' . USERS_TABLE . "				SET user_permissions = '" . $db->sql_escape($userdata['user_permissions']) . "',					user_perm_from = 0				WHERE user_id = " . $userdata['user_id'];			$db->sql_query($sql);		}		return;	}	/**	* Build bitstring from permission set	*/	function build_bitstring(&$hold_ary)	{		$hold_str = '';		if (sizeof($hold_ary))		{			ksort($hold_ary);			$last_f = 0;			foreach ($hold_ary as $f => $auth_ary)			{				$ary_key = (!$f) ? 'global' : 'local';				$bitstring = array();				foreach ($this->acl_options[$ary_key] as $opt => $id)				{					if (isset($auth_ary[$this->acl_options['id'][$opt]]))					{						$bitstring[$id] = $auth_ary[$this->acl_options['id'][$opt]];						$option_key = substr($opt, 0, strpos($opt, '_') + 1);						// If one option is allowed, the global permission for this option has to be allowed too						// example: if the user has the a_ permission this means he has one or more a_* permissions						if ($auth_ary[$this->acl_options['id'][$opt]] == ACL_YES && (!isset($bitstring[$this->acl_options[$ary_key][$option_key]]) || $bitstring[$this->acl_options[$ary_key][$option_key]] == ACL_NEVER))						{							$bitstring[$this->acl_options[$ary_key][$option_key]] = ACL_YES;						}					}					else					{						$bitstring[$id] = ACL_NEVER;					}				}				// Now this bitstring defines the permission setting for the current forum $f (or global setting)				$bitstring = implode('', $bitstring);				// The line number indicates the id, therefore we have to add empty lines for those ids not present				$hold_str .= str_repeat("\n", $f - $last_f);				// Convert bitstring for storage - we do not use binary/bytes because PHP's string functions are not fully binary safe				for ($i = 0, $bit_length = strlen($bitstring); $i < $bit_length; $i += 31)				{					$hold_str .= str_pad(base_convert(str_pad(substr($bitstring, $i, 31), 31, 0, STR_PAD_RIGHT), 2, 36), 6, 0, STR_PAD_LEFT);				}				$last_f = $f;			}			unset($bitstring);			$hold_str = rtrim($hold_str);		}		return $hold_str;	}	/**	* Clear one or all users cached permission settings	*/	function acl_clear_prefetch($user_id = false)	{		global $db, $cache;		// Rebuild options cache		$cache->destroy('_role_cache');		$sql = 'SELECT *			FROM ' . ACL_ROLES_DATA_TABLE . '			ORDER BY role_id ASC';		$result = $db->sql_query($sql);		$this->role_cache = array();		while ($row = $db->sql_fetchrow($result))		{			$this->role_cache[$row['role_id']][$row['auth_option_id']] = (int) $row['auth_setting'];		}		$db->sql_freeresult($result);		foreach ($this->role_cache as $role_id => $role_options)		{			$this->role_cache[$role_id] = serialize($role_options);		}		$cache->put('_role_cache', $this->role_cache);		// Now empty user permissions		$where_sql = '';		if ($user_id !== false)		{			$user_id = (!is_array($user_id)) ? $user_id = array((int) $user_id) : array_map('intval', $user_id);			$where_sql = ' WHERE ' . $db->sql_in_set('user_id', $user_id);		}		$sql = 'UPDATE ' . USERS_TABLE . "			SET user_permissions = '',				user_perm_from = 0			$where_sql";		$db->sql_query($sql);		return;	}	/**	* Get assigned roles	*/	function acl_role_data($user_type, $role_type, $ug_id = false, $forum_id = false)	{		global $db;		$roles = array();		$sql_id = ($user_type == 'user') ? 'user_id' : 'group_id';		$sql_ug = ($ug_id !== false) ? ((!is_array($ug_id)) ? "AND a.$sql_id = $ug_id" : 'AND ' . $db->sql_in_set("a.$sql_id", $ug_id)) : '';		$sql_forum = ($forum_id !== false) ? ((!is_array($forum_id)) ? "AND a.forum_id = $forum_id" : 'AND ' . $db->sql_in_set('a.forum_id', $forum_id)) : '';		// Grab assigned roles...		$sql = 'SELECT a.auth_role_id, a.' . $sql_id . ', a.forum_id			FROM ' . (($user_type == 'user') ? ACL_USERS_TABLE : ACL_GROUPS_TABLE) . ' a, ' . ACL_ROLES_TABLE . " r			WHERE a.auth_role_id = r.role_id				AND r.role_type = '" . $db->sql_escape($role_type) . "'				$sql_ug				$sql_forum			ORDER BY r.role_order ASC";		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$roles[$row[$sql_id]][$row['forum_id']] = $row['auth_role_id'];		}		$db->sql_freeresult($result);		return $roles;	}	/**	* Get raw acl data based on user/option/forum	*/	function acl_raw_data($user_id = false, $opts = false, $forum_id = false)	{		global $db;		$sql_user = ($user_id !== false) ? ((!is_array($user_id)) ? 'user_id = ' . (int) $user_id : $db->sql_in_set('user_id', array_map('intval', $user_id))) : '';		$sql_forum = ($forum_id !== false) ? ((!is_array($forum_id)) ? 'AND a.forum_id = ' . (int) $forum_id : 'AND ' . $db->sql_in_set('a.forum_id', array_map('intval', $forum_id))) : '';		$sql_opts = $sql_opts_select = $sql_opts_from = '';		$hold_ary = array();		if ($opts !== false)		{			$sql_opts_select = ', ao.auth_option';			$sql_opts_from = ', ' . ACL_OPTIONS_TABLE . ' ao';			$this->build_auth_option_statement('ao.auth_option', $opts, $sql_opts);		}		$sql_ary = array();		// Grab non-role settings - user-specific		$sql_ary[] = 'SELECT a.user_id, a.forum_id, a.auth_setting, a.auth_option_id' . $sql_opts_select . '			FROM ' . ACL_USERS_TABLE . ' a' . $sql_opts_from . '			WHERE a.auth_role_id = 0 ' .				(($sql_opts_from) ? 'AND a.auth_option_id = ao.auth_option_id ' : '') .				(($sql_user) ? 'AND a.' . $sql_user : '') . "				$sql_forum				$sql_opts";		// Now the role settings - user-specific		$sql_ary[] = 'SELECT a.user_id, a.forum_id, r.auth_option_id, r.auth_setting, r.auth_option_id' . $sql_opts_select . '			FROM ' . ACL_USERS_TABLE . ' a, ' . ACL_ROLES_DATA_TABLE . ' r' . $sql_opts_from . '			WHERE a.auth_role_id = r.role_id ' .				(($sql_opts_from) ? 'AND r.auth_option_id = ao.auth_option_id ' : '') .				(($sql_user) ? 'AND a.' . $sql_user : '') . "				$sql_forum				$sql_opts";		foreach ($sql_ary as $sql)		{			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$option = ($sql_opts_select) ? $row['auth_option'] : $this->acl_options['option'][$row['auth_option_id']];				$hold_ary[$row['user_id']][$row['forum_id']][$option] = $row['auth_setting'];			}			$db->sql_freeresult($result);		}		$sql_ary = array();		// Now grab group settings - non-role specific...		$sql_ary[] = 'SELECT ug.user_id, a.forum_id, a.auth_setting, a.auth_option_id' . $sql_opts_select . '			FROM ' . ACL_GROUPS_TABLE . ' a, ' . USER_GROUP_TABLE . ' ug, ' . GROUPS_TABLE . ' g' . $sql_opts_from . '			WHERE a.auth_role_id = 0 ' .				(($sql_opts_from) ? 'AND a.auth_option_id = ao.auth_option_id ' : '') . '				AND a.group_id = ug.group_id				AND g.group_id = ug.group_id				AND ug.user_pending = 0				AND NOT (ug.group_leader = 1 AND g.group_skip_auth = 1)				' . (($sql_user) ? 'AND ug.' . $sql_user : '') . "				$sql_forum				$sql_opts";		// Now grab group settings - role specific...		$sql_ary[] = 'SELECT ug.user_id, a.forum_id, r.auth_setting, r.auth_option_id' . $sql_opts_select . '			FROM ' . ACL_GROUPS_TABLE . ' a, ' . USER_GROUP_TABLE . ' ug, ' . GROUPS_TABLE . ' g, ' . ACL_ROLES_DATA_TABLE . ' r' . $sql_opts_from . '			WHERE a.auth_role_id = r.role_id ' .				(($sql_opts_from) ? 'AND r.auth_option_id = ao.auth_option_id ' : '') . '				AND a.group_id = ug.group_id				AND g.group_id = ug.group_id				AND ug.user_pending = 0				AND NOT (ug.group_leader = 1 AND g.group_skip_auth = 1)				' . (($sql_user) ? 'AND ug.' . $sql_user : '') . "				$sql_forum				$sql_opts";		foreach ($sql_ary as $sql)		{			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$option = ($sql_opts_select) ? $row['auth_option'] : $this->acl_options['option'][$row['auth_option_id']];				if (!isset($hold_ary[$row['user_id']][$row['forum_id']][$option]) || (isset($hold_ary[$row['user_id']][$row['forum_id']][$option]) && $hold_ary[$row['user_id']][$row['forum_id']][$option] != ACL_NEVER))				{					$hold_ary[$row['user_id']][$row['forum_id']][$option] = $row['auth_setting'];					// If we detect ACL_NEVER, we will unset the flag option (within building the bitstring it is correctly set again)					if ($row['auth_setting'] == ACL_NEVER)					{						$flag = substr($option, 0, strpos($option, '_') + 1);						if (isset($hold_ary[$row['user_id']][$row['forum_id']][$flag]) && $hold_ary[$row['user_id']][$row['forum_id']][$flag] == ACL_YES)						{							unset($hold_ary[$row['user_id']][$row['forum_id']][$flag]);/*							if (in_array(ACL_YES, $hold_ary[$row['user_id']][$row['forum_id']]))							{								$hold_ary[$row['user_id']][$row['forum_id']][$flag] = ACL_YES;							}*/						}					}				}			}			$db->sql_freeresult($result);		}		return $hold_ary;	}	/**	* Get raw user based permission settings	*/	function acl_user_raw_data($user_id = false, $opts = false, $forum_id = false)	{		global $db;		$sql_user = ($user_id !== false) ? ((!is_array($user_id)) ? 'user_id = ' . (int) $user_id : $db->sql_in_set('user_id', array_map('intval', $user_id))) : '';		$sql_forum = ($forum_id !== false) ? ((!is_array($forum_id)) ? 'AND a.forum_id = ' . (int) $forum_id : 'AND ' . $db->sql_in_set('a.forum_id', array_map('intval', $forum_id))) : '';		$sql_opts = '';		$hold_ary = $sql_ary = array();		if ($opts !== false)		{			$this->build_auth_option_statement('ao.auth_option', $opts, $sql_opts);		}		// Grab user settings - non-role specific...		$sql_ary[] = 'SELECT a.user_id, a.forum_id, a.auth_setting, a.auth_option_id, ao.auth_option			FROM ' . ACL_USERS_TABLE . ' a, ' . ACL_OPTIONS_TABLE . ' ao			WHERE a.auth_role_id = 0				AND a.auth_option_id = ao.auth_option_id ' .				(($sql_user) ? 'AND a.' . $sql_user : '') . "				$sql_forum				$sql_opts			ORDER BY a.forum_id, ao.auth_option";		// Now the role settings - user-specific		$sql_ary[] = 'SELECT a.user_id, a.forum_id, r.auth_option_id, r.auth_setting, r.auth_option_id, ao.auth_option			FROM ' . ACL_USERS_TABLE . ' a, ' . ACL_ROLES_DATA_TABLE . ' r, ' . ACL_OPTIONS_TABLE . ' ao			WHERE a.auth_role_id = r.role_id				AND r.auth_option_id = ao.auth_option_id ' .				(($sql_user) ? 'AND a.' . $sql_user : '') . "				$sql_forum				$sql_opts			ORDER BY a.forum_id, ao.auth_option";		foreach ($sql_ary as $sql)		{			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$hold_ary[$row['user_id']][$row['forum_id']][$row['auth_option']] = $row['auth_setting'];			}			$db->sql_freeresult($result);		}		return $hold_ary;	}	/**	* Get raw group based permission settings	*/	function acl_group_raw_data($group_id = false, $opts = false, $forum_id = false)	{		global $db;		$sql_group = ($group_id !== false) ? ((!is_array($group_id)) ? 'group_id = ' . (int) $group_id : $db->sql_in_set('group_id', array_map('intval', $group_id))) : '';		$sql_forum = ($forum_id !== false) ? ((!is_array($forum_id)) ? 'AND a.forum_id = ' . (int) $forum_id : 'AND ' . $db->sql_in_set('a.forum_id', array_map('intval', $forum_id))) : '';		$sql_opts = '';		$hold_ary = $sql_ary = array();		if ($opts !== false)		{			$this->build_auth_option_statement('ao.auth_option', $opts, $sql_opts);		}		// Grab group settings - non-role specific...		$sql_ary[] = 'SELECT a.group_id, a.forum_id, a.auth_setting, a.auth_option_id, ao.auth_option			FROM ' . ACL_GROUPS_TABLE . ' a, ' . ACL_OPTIONS_TABLE . ' ao			WHERE a.auth_role_id = 0				AND a.auth_option_id = ao.auth_option_id ' .				(($sql_group) ? 'AND a.' . $sql_group : '') . "				$sql_forum				$sql_opts			ORDER BY a.forum_id, ao.auth_option";		// Now grab group settings - role specific...		$sql_ary[] = 'SELECT a.group_id, a.forum_id, r.auth_setting, r.auth_option_id, ao.auth_option			FROM ' . ACL_GROUPS_TABLE . ' a, ' . ACL_ROLES_DATA_TABLE . ' r, ' . ACL_OPTIONS_TABLE . ' ao			WHERE a.auth_role_id = r.role_id				AND r.auth_option_id = ao.auth_option_id ' .				(($sql_group) ? 'AND a.' . $sql_group : '') . "				$sql_forum				$sql_opts			ORDER BY a.forum_id, ao.auth_option";		foreach ($sql_ary as $sql)		{			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$hold_ary[$row['group_id']][$row['forum_id']][$row['auth_option']] = $row['auth_setting'];			}			$db->sql_freeresult($result);		}		return $hold_ary;	}	/**	* Get raw acl data based on user for caching user_permissions	* This function returns the same data as acl_raw_data(), but without the user id as the first key within the array.	*/	function acl_raw_data_single_user($user_id)	{		global $db, $cache;		// Check if the role-cache is there		if (($this->role_cache = $cache->get('_role_cache')) === false)		{			$this->role_cache = array();			// We pre-fetch roles			$sql = 'SELECT *				FROM ' . ACL_ROLES_DATA_TABLE . '				ORDER BY role_id ASC';			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$this->role_cache[$row['role_id']][$row['auth_option_id']] = (int) $row['auth_setting'];			}			$db->sql_freeresult($result);			foreach ($this->role_cache as $role_id => $role_options)			{				$this->role_cache[$role_id] = serialize($role_options);			}			$cache->put('_role_cache', $this->role_cache);		}		$hold_ary = array();		// Grab user-specific permission settings		$sql = 'SELECT forum_id, auth_option_id, auth_role_id, auth_setting			FROM ' . ACL_USERS_TABLE . '			WHERE user_id = ' . $user_id;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			// If a role is assigned, assign all options included within this role. Else, only set this one option.			if ($row['auth_role_id'])			{				$hold_ary[$row['forum_id']] = (empty($hold_ary[$row['forum_id']])) ? unserialize($this->role_cache[$row['auth_role_id']]) : $hold_ary[$row['forum_id']] + unserialize($this->role_cache[$row['auth_role_id']]);			}			else			{				$hold_ary[$row['forum_id']][$row['auth_option_id']] = $row['auth_setting'];			}		}		$db->sql_freeresult($result);		// Now grab group-specific permission settings		$sql = 'SELECT a.forum_id, a.auth_option_id, a.auth_role_id, a.auth_setting			FROM ' . ACL_GROUPS_TABLE . ' a, ' . USER_GROUP_TABLE . ' ug, ' . GROUPS_TABLE . ' g			WHERE a.group_id = ug.group_id				AND g.group_id = ug.group_id				AND ug.user_pending = 0				AND NOT (ug.group_leader = 1 AND g.group_skip_auth = 1)				AND ug.user_id = ' . $user_id;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if (!$row['auth_role_id'])			{				$this->_set_group_hold_ary($hold_ary[$row['forum_id']], $row['auth_option_id'], $row['auth_setting']);			}			else if (!empty($this->role_cache[$row['auth_role_id']]))			{				foreach (unserialize($this->role_cache[$row['auth_role_id']]) as $option_id => $setting)				{					$this->_set_group_hold_ary($hold_ary[$row['forum_id']], $option_id, $setting);				}			}		}		$db->sql_freeresult($result);		return $hold_ary;	}	/**	* Private function snippet for setting a specific piece of the hold_ary	*/	function _set_group_hold_ary(&$hold_ary, $option_id, $setting)	{		if (!isset($hold_ary[$option_id]) || (isset($hold_ary[$option_id]) && $hold_ary[$option_id] != ACL_NEVER))		{			$hold_ary[$option_id] = $setting;			// If we detect ACL_NEVER, we will unset the flag option (within building the bitstring it is correctly set again)			if ($setting == ACL_NEVER)			{				$flag = substr($this->acl_options['option'][$option_id], 0, strpos($this->acl_options['option'][$option_id], '_') + 1);				$flag = (int) $this->acl_options['id'][$flag];				if (isset($hold_ary[$flag]) && $hold_ary[$flag] == ACL_YES)				{					unset($hold_ary[$flag]);/*					This is uncommented, because i suspect this being slightly wrong due to mixed permission classes being possible					if (in_array(ACL_YES, $hold_ary))					{						$hold_ary[$flag] = ACL_YES;					}*/				}			}		}	}	/**	* Authentication plug-ins is largely down to Sergey Kanareykin, our thanks to him.	*/	function login($username, $password, $autologin = false, $viewonline = 1, $admin = 0)	{		global $config, $db, $user, $phpbb_root_path, $phpEx;		$method = trim(basename($config['auth_method']));		include_once($phpbb_root_path . 'includes/auth/auth_' . $method . '.' . $phpEx);		$method = 'login_' . $method;		if (function_exists($method))		{			$login = $method($username, $password, $user->ip, $user->browser, $user->forwarded_for);			// If the auth module wants us to create an empty profile do so and then treat the status as LOGIN_SUCCESS			if ($login['status'] == LOGIN_SUCCESS_CREATE_PROFILE)			{				// we are going to use the user_add function so include functions_user.php if it wasn't defined yet				if (!function_exists('user_add'))				{					include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				}				user_add($login['user_row'], (isset($login['cp_data'])) ? $login['cp_data'] : false);				$sql = 'SELECT user_id, username, user_password, user_passchg, user_email, user_type					FROM ' . USERS_TABLE . "					WHERE username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					return array(						'status'		=> LOGIN_ERROR_EXTERNAL_AUTH,						'error_msg'		=> 'AUTH_NO_PROFILE_CREATED',						'user_row'		=> array('user_id' => ANONYMOUS),					);				}				$login = array(					'status'	=> LOGIN_SUCCESS,					'error_msg'	=> false,					'user_row'	=> $row,				);			}			// If login succeeded, we will log the user in... else we pass the login array through...			if ($login['status'] == LOGIN_SUCCESS)			{				$old_session_id = $user->session_id;				if ($admin)				{					global $SID, $_SID;					$cookie_expire = time() - 31536000;					$user->set_cookie('u', '', $cookie_expire);					$user->set_cookie('sid', '', $cookie_expire);					unset($cookie_expire);					$SID = '?sid=';					$user->session_id = $_SID = '';				}				$result = $user->session_create($login['user_row']['user_id'], $admin, $autologin, $viewonline);				// Successful session creation				if ($result === true)				{					// If admin re-authentication we remove the old session entry because a new one has been created...					if ($admin)					{						// the login array is used because the user ids do not differ for re-authentication						$sql = 'DELETE FROM ' . SESSIONS_TABLE . "							WHERE session_id = '" . $db->sql_escape($old_session_id) . "'							AND session_user_id = {$login['user_row']['user_id']}";						$db->sql_query($sql);					}					return array(						'status'		=> LOGIN_SUCCESS,						'error_msg'		=> false,						'user_row'		=> $login['user_row'],					);				}				return array(					'status'		=> LOGIN_BREAK,					'error_msg'		=> $result,					'user_row'		=> $login['user_row'],				);			}			return $login;		}		trigger_error('Authentication method not found', E_USER_ERROR);	}	/**	* Fill auth_option statement for later querying based on the supplied options	*/	function build_auth_option_statement($key, $auth_options, &$sql_opts)	{		global $db;		if (!is_array($auth_options))		{			if (strpos($auth_options, '%') !== false)			{				$sql_opts = "AND $key " . $db->sql_like_expression(str_replace('%', $db->any_char, $auth_options));			}			else			{				$sql_opts = "AND $key = '" . $db->sql_escape($auth_options) . "'";			}		}		else		{			$is_like_expression = false;			foreach ($auth_options as $option)			{				if (strpos($option, '%') !== false)				{					$is_like_expression = true;				}			}			if (!$is_like_expression)			{				$sql_opts = 'AND ' . $db->sql_in_set($key, $auth_options);			}			else			{				$sql = array();				foreach ($auth_options as $option)				{					if (strpos($option, '%') !== false)					{						$sql[] = $key . ' ' . $db->sql_like_expression(str_replace('%', $db->any_char, $option));					}					else					{						$sql[] = $key . " = '" . $db->sql_escape($option) . "'";					}				}				$sql_opts = 'AND (' . implode(' OR ', $sql) . ')';			}		}	}}?>
<?php$GLOBALS['utf_canonical_comp']=array('A'=>'','A'=>'','A'=>'','A'=>'','A'=>'','A'=>'','C'=>'','E'=>'','E'=>'','E'=>'','E'=>'','I'=>'','I'=>'','I'=>'','I'=>'','N'=>'','O'=>'','O'=>'','O'=>'','O'=>'','O'=>'','U'=>'','U'=>'','U'=>'','U'=>'','Y'=>'','a'=>'','a'=>'','a'=>'','a'=>'','a'=>'','a'=>'','c'=>'','e'=>'','e'=>'','e'=>'','e'=>'','i'=>'','i'=>'','i'=>'','i'=>'','n'=>'','o'=>'','o'=>'','o'=>'','o'=>'','o'=>'','u'=>'','u'=>'','u'=>'','u'=>'','y'=>'','y'=>'','A'=>'','a'=>'','A'=>'','a'=>'','A'=>'','a'=>'','C'=>'','c'=>'','C'=>'','c'=>'','C'=>'','c'=>'','C'=>'','c'=>'','D'=>'','d'=>'','E'=>'','e'=>'','E'=>'','e'=>'','E'=>'','e'=>'','E'=>'','e'=>'','E'=>'','e'=>'','G'=>'','g'=>'','G'=>'','g'=>'','G'=>'','g'=>'','G'=>'','g'=>'','H'=>'','h'=>'','I'=>'','i'=>'','I'=>'','i'=>'','I'=>'','i'=>'','I'=>'','i'=>'','I'=>'','J'=>'','j'=>'','K'=>'','k'=>'','L'=>'','l'=>'','L'=>'','l'=>'','L'=>'','l'=>'','N'=>'','n'=>'','N'=>'','n'=>'','N'=>'','n'=>'','O'=>'','o'=>'','O'=>'','o'=>'','O'=>'','o'=>'','R'=>'','r'=>'','R'=>'','r'=>'','R'=>'','r'=>'','S'=>'','s'=>'','S'=>'','s'=>'','S'=>'','s'=>'','S'=>'','s'=>'','T'=>'','t'=>'','T'=>'','t'=>'','U'=>'','u'=>'','U'=>'','u'=>'','U'=>'','u'=>'','U'=>'','u'=>'','U'=>'','u'=>'','U'=>'','u'=>'','W'=>'','w'=>'','Y'=>'','y'=>'','Y'=>'','Z'=>'','z'=>'','Z'=>'','z'=>'','Z'=>'','z'=>'','O'=>'','o'=>'','U'=>'','u'=>'','A'=>'','a'=>'','I'=>'','i'=>'','O'=>'','o'=>'','U'=>'','u'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','G'=>'','g'=>'','K'=>'','k'=>'','O'=>'','o'=>'',''=>'',''=>'',''=>'',''=>'','j'=>'','G'=>'','g'=>'','N'=>'','n'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','A'=>'','a'=>'','A'=>'','a'=>'','E'=>'','e'=>'','E'=>'','e'=>'','I'=>'','i'=>'','I'=>'','i'=>'','O'=>'','o'=>'','O'=>'','o'=>'','R'=>'','r'=>'','R'=>'','r'=>'','U'=>'','u'=>'','U'=>'','u'=>'','S'=>'','s'=>'','T'=>'','t'=>'','H'=>'','h'=>'','A'=>'','a'=>'','E'=>'','e'=>'',''=>'',''=>'',''=>'',''=>'','O'=>'','o'=>'',''=>'',''=>'','Y'=>'','y'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','A'=>'','a'=>'','B'=>'','b'=>'','B'=>'','b'=>'','B'=>'','b'=>'',''=>'',''=>'','D'=>'','d'=>'','D'=>'','d'=>'','D'=>'','d'=>'','D'=>'','d'=>'','D'=>'','d'=>'',''=>'',''=>'',''=>'',''=>'','E'=>'','e'=>'','E'=>'','e'=>'',''=>'',''=>'','F'=>'','f'=>'','G'=>'','g'=>'','H'=>'','h'=>'','H'=>'','h'=>'','H'=>'','h'=>'','H'=>'','h'=>'','H'=>'','h'=>'','I'=>'','i'=>'',''=>'',''=>'','K'=>'','k'=>'','K'=>'','k'=>'','K'=>'','k'=>'','L'=>'','l'=>'',''=>'',''=>'','L'=>'','l'=>'','L'=>'','l'=>'','M'=>'','m'=>'','M'=>'','m'=>'','M'=>'','m'=>'','N'=>'','n'=>'','N'=>'','n'=>'','N'=>'','n'=>'','N'=>'','n'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','P'=>'','p'=>'','P'=>'','p'=>'','R'=>'','r'=>'','R'=>'','r'=>'',''=>'',''=>'','R'=>'','r'=>'','S'=>'','s'=>'','S'=>'','s'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','T'=>'','t'=>'','T'=>'','t'=>'','T'=>'','t'=>'','T'=>'','t'=>'','U'=>'','u'=>'','U'=>'','u'=>'','U'=>'','u'=>'',''=>'',''=>'',''=>'',''=>'','V'=>'','v'=>'','V'=>'','v'=>'','W'=>'','w'=>'','W'=>'','w'=>'','W'=>'','w'=>'','W'=>'','w'=>'','W'=>'','w'=>'','X'=>'','x'=>'','X'=>'','x'=>'','Y'=>'','y'=>'','Z'=>'','z'=>'','Z'=>'','z'=>'','Z'=>'','z'=>'','h'=>'','t'=>'','w'=>'','y'=>'',''=>'','A'=>'','a'=>'','A'=>'','a'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','E'=>'','e'=>'','E'=>'','e'=>'','E'=>'','e'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','I'=>'','i'=>'','I'=>'','i'=>'','O'=>'','o'=>'','O'=>'','o'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','U'=>'','u'=>'','U'=>'','u'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','Y'=>'','y'=>'','Y'=>'','y'=>'','Y'=>'','y'=>'','Y'=>'','y'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','='=>'',''=>'',''=>'','<'=>'','>'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_words_info{	function module()	{		return array(			'filename'	=> 'acp_words',			'title'		=> 'ACP_WORDS',			'version'	=> '1.0.0',			'modes'		=> array(				'words'		=> array('title' => 'ACP_WORDS', 'auth' => 'acl_a_words', 'cat' => array('ACP_MESSAGES')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/*** Corrects avatar filenames to match the new avatar delivery method.** You should make a backup from your users table and the avatar directory in case something goes wrong*/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.'.$phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$echos = 0; if (!isset($config['avatar_salt'])){	$cache->purge();	if (!isset($config['avatar_salt']))	{		die('database not up to date');	}	die('database not up to date');}// let's start with the users using a group_avatar.$sql = 'SELECT group_id, group_avatar	FROM ' . GROUPS_TABLE . '	WHERE group_avatar_type = ' . AVATAR_UPLOAD;// We'll skip these, so remember them$group_avatars = array();echo '<br /> Updating groups' . "\n";$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$new_avatar_name = adjust_avatar($row['group_avatar'], 'g' . $row['group_id']);	$group_avatars[] = $new_avatar_name;		// failure is probably due to the avatar name already being adjusted	if ($new_avatar_name !== false)	{		$sql = 'UPDATE ' . USERS_TABLE . "			SET user_avatar = '" . $db->sql_escape($new_avatar_name) . "'			WHERE user_avatar = '" . $db->sql_escape($row['group_avatar']) . "' 			AND user_avatar_type = " . AVATAR_UPLOAD;		$db->sql_query($sql);				$sql = 'UPDATE ' . GROUPS_TABLE . "			SET group_avatar = '" . $db->sql_escape($new_avatar_name) . "'			WHERE group_id = {$row['group_id']}";		$db->sql_query($sql);	}	else	{		echo '<br /> Failed updating group ' . $row['group_id'] . "\n";	}	if ($echos > 200)	{		echo '<br />' . "\n";		$echos = 0;	}	echo '.';	$echos++;	flush();}$db->sql_freeresult($result);$sql = 'SELECT user_id, username, user_avatar, user_avatar_type	FROM ' . USERS_TABLE . ' 	WHERE user_avatar_type = ' . AVATAR_UPLOAD . ' 	AND ' . $db->sql_in_set('user_avatar', $group_avatars, true, true);$result = $db->sql_query($sql);echo '<br /> Updating users' . "\n";while ($row = $db->sql_fetchrow($result)){	$new_avatar_name = adjust_avatar($row['user_avatar'], $row['user_id']);	// failure is probably due to the avatar name already being adjusted	if ($new_avatar_name !== false)	{		$sql = 'UPDATE ' . USERS_TABLE . "			SET user_avatar = '" . $db->sql_escape($new_avatar_name) . "'			WHERE user_id = {$row['user_id']}";		$db->sql_query($sql);	}	else	{		// nuke this avatar		$sql = 'UPDATE ' . USERS_TABLE . "			SET user_avatar = '', user_avatar_type = 0			WHERE user_id = {$row['user_id']}";		$db->sql_query($sql);		echo '<br /> Failed updating user ' . $row['user_id'] . "\n";	}		if ($echos > 200)	{		echo '<br />' . "\n";		$echos = 0;	}	echo '.';	$echos++;	flush();}$db->sql_freeresult($result);echo 'FINISHED';// Done$db->sql_close();function adjust_avatar($old_name, $midfix){	global $config, $phpbb_root_path;		$avatar_path = $phpbb_root_path . $config['avatar_path'];	$extension = strtolower(substr(strrchr($old_name, '.'), 1));	$new_name = $config['avatar_salt'] . '_' . $midfix . '.' . $extension;	if (@file_exists($avatar_path . '/' . $old_name) && @is_writable($avatar_path . '/' . $old_name) && @is_writable($avatar_path . '/' . $new_name))	{		@rename($avatar_path . '/' . $old_name, $avatar_path . '/' . $new_name);		return $midfix . '.' . $extension;	}	return false;}?>
<?php/**** @package diff* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Code from pear.php.net, Text_Diff-1.1.0 package* http://pear.php.net/package/Text_Diff/** Modified by phpBB Group to meet our coding standards* and being able to integrate into phpBB** A class to render Diffs in different formats.** This class renders the diff in classic diff format. It is intended that* this class be customized via inheritance, to obtain fancier outputs.** Copyright 2004-2008 The Horde Project (http://www.horde.org/)** @package diff*/class diff_renderer{	/**	* Number of leading context "lines" to preserve.	*	* This should be left at zero for this class, but subclasses may want to	* set this to other values.	*/	var $_leading_context_lines = 0;	/**	* Number of trailing context "lines" to preserve.	*	* This should be left at zero for this class, but subclasses may want to	* set this to other values.	*/	var $_trailing_context_lines = 0;	/**	* Constructor.	*/	function diff_renderer($params = array())	{		foreach ($params as $param => $value)		{			$v = '_' . $param;			if (isset($this->$v))			{				$this->$v = $value;			}		}	}	/**	* Get any renderer parameters.	*	* @return array  All parameters of this renderer object.	*/	function get_params()	{		$params = array();		foreach (get_object_vars($this) as $k => $v)		{			if ($k[0] == '_')			{				$params[substr($k, 1)] = $v;			}		}		return $params;	}	/**	* Renders a diff.	*	* @param diff &$diff A diff object.	*	* @return string  The formatted output.	*/	function render(&$diff)	{		$xi = $yi = 1;		$block = false;		$context = array();		// Create a new diff object if it is a 3-way diff		if (is_a($diff, 'diff3'))		{			$diff3 = &$diff;			$diff_1 = $diff3->get_original();			$diff_2 = $diff3->merged_output();			unset($diff3);			$diff = new diff($diff_1, $diff_2);		}		$nlead = $this->_leading_context_lines;		$ntrail = $this->_trailing_context_lines;		$output = $this->_start_diff();		$diffs = $diff->get_diff();		foreach ($diffs as $i => $edit)		{			// If these are unchanged (copied) lines, and we want to keep leading or trailing context lines, extract them from the copy block.			if (is_a($edit, 'diff_op_copy'))			{				// Do we have any diff blocks yet?				if (is_array($block))				{					// How many lines to keep as context from the copy block.					$keep = ($i == sizeof($diffs) - 1) ? $ntrail : $nlead + $ntrail;					if (sizeof($edit->orig) <= $keep)					{						// We have less lines in the block than we want for context => keep the whole block.						$block[] = $edit;					}					else					{						if ($ntrail)						{							// Create a new block with as many lines as we need for the trailing context.							$context = array_slice($edit->orig, 0, $ntrail);							$block[] = new diff_op_copy($context);						}						$output .= $this->_block($x0, $ntrail + $xi - $x0, $y0, $ntrail + $yi - $y0, $block);						$block = false;					}				}				// Keep the copy block as the context for the next block.				$context = $edit->orig;			}			else			{				// Don't we have any diff blocks yet?				if (!is_array($block))				{					// Extract context lines from the preceding copy block.					$context = array_slice($context, sizeof($context) - $nlead);					$x0 = $xi - sizeof($context);					$y0 = $yi - sizeof($context);					$block = array();					if ($context)					{						$block[] = new diff_op_copy($context);					}				}				$block[] = $edit;			}			$xi += ($edit->orig) ? sizeof($edit->orig) : 0;			$yi += ($edit->final) ? sizeof($edit->final) : 0;		}		if (is_array($block))		{			$output .= $this->_block($x0, $xi - $x0, $y0, $yi - $y0, $block);		}		return $output . $this->_end_diff();	}	function _block($xbeg, $xlen, $ybeg, $ylen, &$edits)	{		$output = $this->_start_block($this->_block_header($xbeg, $xlen, $ybeg, $ylen));		foreach ($edits as $edit)		{			switch (get_class($edit))			{				case 'diff_op_copy':					$output .= $this->_context($edit->orig);				break;				case 'diff_op_add':					$output .= $this->_added($edit->final);				break;				case 'diff_op_delete':					$output .= $this->_deleted($edit->orig);				break;				case 'diff_op_change':					$output .= $this->_changed($edit->orig, $edit->final);				break;			}		}		return $output . $this->_end_block();	}	function _start_diff()	{		return '';	}	function _end_diff()	{		return '';	}	function _block_header($xbeg, $xlen, $ybeg, $ylen)	{		if ($xlen > 1)		{			$xbeg .= ',' . ($xbeg + $xlen - 1);		}		if ($ylen > 1)		{			$ybeg .= ',' . ($ybeg + $ylen - 1);		}		// this matches the GNU Diff behaviour		if ($xlen && !$ylen)		{			$ybeg--;		}		else if (!$xlen)		{			$xbeg--;		}		return $xbeg . ($xlen ? ($ylen ? 'c' : 'd') : 'a') . $ybeg;	}	function _start_block($header)	{		return $header . "\n";	}	function _end_block()	{		return '';	}	function _lines($lines, $prefix = ' ')	{		return $prefix . implode("\n$prefix", $lines) . "\n";	}	function _context($lines)	{		return $this->_lines($lines, '  ');	}	function _added($lines)	{		return $this->_lines($lines, '> ');	}	function _deleted($lines)	{		return $this->_lines($lines, '< ');	}	function _changed($orig, $final)	{		return $this->_deleted($orig) . "---\n" . $this->_added($final);	}	/**	* Our function to get the diff	*/	function get_diff_content($diff)	{		return $this->render($diff);	}}/*** Renders a unified diff* @package diff*/class diff_renderer_unified extends diff_renderer{	var $_leading_context_lines = 4;	var $_trailing_context_lines = 4;	/**	* Our function to get the diff	*/	function get_diff_content($diff)	{		return nl2br($this->render($diff));	}	function _block_header($xbeg, $xlen, $ybeg, $ylen)	{		if ($xlen != 1)		{			$xbeg .= ',' . $xlen;		}		if ($ylen != 1)		{			$ybeg .= ',' . $ylen;		}		return '<div class="diff"><big class="info">@@ -' . $xbeg . ' +' . $ybeg . ' @@</big></div>';	}	function _context($lines)	{		return '<pre class="diff context">' . htmlspecialchars($this->_lines($lines, ' ')) . '<br /></pre>';	}	function _added($lines)	{		return '<pre class="diff added">' . htmlspecialchars($this->_lines($lines, '+')) . '<br /></pre>';	}	function _deleted($lines)	{		return '<pre class="diff removed">' . htmlspecialchars($this->_lines($lines, '-')) . '<br /></pre>';	}	function _changed($orig, $final)	{		return $this->_deleted($orig) . $this->_added($final);	}	function _start_diff()	{		$start = '<div class="file">';		return $start;	}	function _end_diff()	{		return '</div>';	}	function _end_block()	{		return '';	}}/*** "Inline" diff renderer.** This class renders diffs in the Wiki-style "inline" format.** @author  Ciprian Popovici* @package diff*/class diff_renderer_inline extends diff_renderer{	var $_leading_context_lines = 10000;	var $_trailing_context_lines = 10000;	// Prefix and suffix for inserted text	var $_ins_prefix = '<span class="ins">';	var $_ins_suffix = '</span>';	// Prefix and suffix for deleted text	var $_del_prefix = '<span class="del">';	var $_del_suffix = '</span>';	var $_block_head = '';	// What are we currently splitting on? Used to recurse to show word-level	var $_split_level = 'lines';	/**	* Our function to get the diff	*/	function get_diff_content($diff)	{		return '<pre>' . nl2br($this->render($diff)) . '<br /></pre>';	}	function _start_diff()	{		return '';	}	function _end_diff()	{		return '';	}	function _block_header($xbeg, $xlen, $ybeg, $ylen)	{		return $this->_block_head;	}	function _start_block($header)	{		return $header;	}	function _lines($lines, $prefix = ' ', $encode = true)	{		if ($encode)		{			array_walk($lines, array(&$this, '_encode'));		}		if ($this->_split_level == 'words')		{			return implode('', $lines);		}		else		{			return implode("\n", $lines) . "\n";		}	}	function _added($lines)	{		array_walk($lines, array(&$this, '_encode'));		$lines[0] = $this->_ins_prefix . $lines[0];		$lines[sizeof($lines) - 1] .= $this->_ins_suffix;		return $this->_lines($lines, ' ', false);	}	function _deleted($lines, $words = false)	{		array_walk($lines, array(&$this, '_encode'));		$lines[0] = $this->_del_prefix . $lines[0];		$lines[sizeof($lines) - 1] .= $this->_del_suffix;		return $this->_lines($lines, ' ', false);	}	function _changed($orig, $final)	{		// If we've already split on words, don't try to do so again - just display.		if ($this->_split_level == 'words')		{			$prefix = '';			while ($orig[0] !== false && $final[0] !== false && substr($orig[0], 0, 1) == ' ' && substr($final[0], 0, 1) == ' ')			{				$prefix .= substr($orig[0], 0, 1);				$orig[0] = substr($orig[0], 1);				$final[0] = substr($final[0], 1);			}			return $prefix . $this->_deleted($orig) . $this->_added($final);		}		$text1 = implode("\n", $orig);		$text2 = implode("\n", $final);		// Non-printing newline marker.		$nl = "\0";		// We want to split on word boundaries, but we need to preserve whitespace as well.		// Therefore we split on words, but include all blocks of whitespace in the wordlist.		$splitted_text_1 = $this->_split_on_words($text1, $nl);		$splitted_text_2 = $this->_split_on_words($text2, $nl);		$diff = new diff($splitted_text_1, $splitted_text_2);		unset($splitted_text_1, $splitted_text_2);		// Get the diff in inline format.		$renderer = new diff_renderer_inline(array_merge($this->get_params(), array('split_level' => 'words')));		// Run the diff and get the output.		return str_replace($nl, "\n", $renderer->render($diff)) . "\n";	}	function _split_on_words($string, $newline_escape = "\n")	{		// Ignore \0; otherwise the while loop will never finish.		$string = str_replace("\0", '', $string);		$words = array();		$length = strlen($string);		$pos = 0;		$tab_there = true;		while ($pos < $length)		{			// Check for tabs... do not include them			if ($tab_there && substr($string, $pos, 1) === "\t")			{				$words[] = "\t";				$pos++;				continue;			}			else			{				$tab_there = false;			}			// Eat a word with any preceding whitespace.			$spaces = strspn(substr($string, $pos), " \n");			$nextpos = strcspn(substr($string, $pos + $spaces), " \n");			$words[] = str_replace("\n", $newline_escape, substr($string, $pos, $spaces + $nextpos));			$pos += $spaces + $nextpos;		}		return $words;	}	function _encode(&$string)	{		$string = htmlspecialchars($string);	}}/*** "raw" diff renderer.* This class could be used to output a raw unified patch file** @package diff*/class diff_renderer_raw extends diff_renderer{	var $_leading_context_lines = 4;	var $_trailing_context_lines = 4;	/**	* Our function to get the diff	*/	function get_diff_content($diff)	{		return '<textarea style="height: 290px;" rows="15" cols="76" class="full">' . htmlspecialchars($this->render($diff)) . '</textarea>';	}	function _block_header($xbeg, $xlen, $ybeg, $ylen)	{		if ($xlen != 1)		{			$xbeg .= ',' . $xlen;		}		if ($ylen != 1)		{			$ybeg .= ',' . $ylen;		}		return '@@ -' . $xbeg . ' +' . $ybeg . ' @@';	}	function _context($lines)	{		return $this->_lines($lines, ' ');	}	function _added($lines)	{		return $this->_lines($lines, '+');	}	function _deleted($lines)	{		return $this->_lines($lines, '-');	}	function _changed($orig, $final)	{		return $this->_deleted($orig) . $this->_added($final);	}}/*** "chora (Horde)" diff renderer - similar style.* This renderer class is a modified human_readable function from the Horde Framework.** @package diff*/class diff_renderer_side_by_side extends diff_renderer{	var $_leading_context_lines = 3;	var $_trailing_context_lines = 3;	var $lines = array();	// Hold the left and right columns of lines for change blocks.	var $cols;	var $state;	var $data = false;	/**	* Our function to get the diff	*/	function get_diff_content($diff)	{		global $user;		$output = '';		$output .= '<table cellspacing="0" class="hrdiff"><caption>	<span class="unmodified">&nbsp;</span> ' . $user->lang['LINE_UNMODIFIED'] . '	<span class="added">&nbsp;</span> ' . $user->lang['LINE_ADDED'] . '	<span class="modified">&nbsp;</span> ' . $user->lang['LINE_MODIFIED'] . '	<span class="removed">&nbsp;</span> ' . $user->lang['LINE_REMOVED'] . '</caption><tbody>';		$this->render($diff);		// Is the diff empty?		if (!sizeof($this->lines))		{			$output .= '<tr><th colspan="2">' . $user->lang['NO_VISIBLE_CHANGES'] . '</th></tr>';		}		else		{			// Iterate through every header block of changes			foreach ($this->lines as $header)			{				$output .= '<tr><th>' . $user->lang['LINE'] . ' ' . $header['oldline'] . '</th><th>' . $user->lang['LINE'] . ' ' . $header['newline'] . '</th></tr>';				// Each header block consists of a number of changes (add, remove, change).				$current_context = '';				foreach ($header['contents'] as $change)				{					if (!empty($current_context) && $change['type'] != 'empty')					{						$line = $current_context;						$current_context = '';						$output .= '<tr class="unmodified"><td><pre>' . ((strlen($line)) ? $line : '&nbsp;') . '<br /></pre></td>							<td><pre>' . ((strlen($line)) ? $line : '&nbsp;') . '<br /></pre></td></tr>';					}					switch ($change['type'])					{						case 'add':							$line = '';							foreach ($change['lines'] as $_line)							{								$line .= htmlspecialchars($_line) . '<br />';							}							$output .= '<tr><td class="added_empty">&nbsp;</td><td class="added"><pre>' . ((strlen($line)) ? $line : '&nbsp;') . '<br /></pre></td></tr>';						break;						case 'remove':							$line = '';							foreach ($change['lines'] as $_line)							{								$line .= htmlspecialchars($_line) . '<br />';							}							$output .= '<tr><td class="removed"><pre>' . ((strlen($line)) ? $line : '&nbsp;') . '<br /></pre></td><td class="removed_empty">&nbsp;</td></tr>';						break;						case 'empty':							$current_context .= htmlspecialchars($change['line']) . '<br />';						break;						case 'change':							// Pop the old/new stacks one by one, until both are empty.							$oldsize = sizeof($change['old']);							$newsize = sizeof($change['new']);							$left = $right = '';							for ($row = 0, $row_max = max($oldsize, $newsize); $row < $row_max; ++$row)							{								$left .= isset($change['old'][$row]) ? htmlspecialchars($change['old'][$row]) : '';								$left .= '<br />';								$right .= isset($change['new'][$row]) ? htmlspecialchars($change['new'][$row]) : '';								$right .= '<br />';							}							$output .= '<tr>';							if (!empty($left))							{								$output .= '<td class="modified"><pre>' . $left . '<br /></pre></td>';							}							else if ($row < $oldsize)							{								$output .= '<td class="modified">&nbsp;</td>';							}							else							{								$output .= '<td class="unmodified">&nbsp;</td>';							}							if (!empty($right))							{								$output .= '<td class="modified"><pre>' . $right . '<br /></pre></td>';							}							else if ($row < $newsize)							{								$output .= '<td class="modified">&nbsp;</td>';							}							else							{								$output .= '<td class="unmodified">&nbsp;</td>';							}							$output .= '</tr>';						break;					}				}				if (!empty($current_context))				{					$line = $current_context;					$current_context = '';					$output .= '<tr class="unmodified"><td><pre>' . ((strlen($line)) ? $line : '&nbsp;') . '<br /></pre></td>';					$output .= '<td><pre>' . ((strlen($line)) ? $line : '&nbsp;') . '<br /></pre></td></tr>';				}			}		}		$output .= '</tbody></table>';		return $output;	}	function _start_diff()	{		$this->lines = array();		$this->data = false;		$this->cols = array(array(), array());		$this->state = 'empty';		return '';	}	function _end_diff()	{		// Just flush any remaining entries in the columns stack.		switch ($this->state)		{			case 'add':				$this->data['contents'][] = array('type' => 'add', 'lines' => $this->cols[0]);			break;			case 'remove':				// We have some removal lines pending in our stack, so flush them.				$this->data['contents'][] = array('type' => 'remove', 'lines' => $this->cols[0]);			break;			case 'change':				// We have both remove and addition lines, so this is a change block.				$this->data['contents'][] = array('type' => 'change', 'old' => $this->cols[0], 'new' => $this->cols[1]);			break;		}		if ($this->data !== false)		{			$this->lines[] = $this->data;		}		return '';	}	function _block_header($xbeg, $xlen, $ybeg, $ylen)	{		// Push any previous header information to the return stack.		if ($this->data !== false)		{			$this->lines[] = $this->data;		}		$this->data = array('type' => 'header', 'oldline' => $xbeg, 'newline' => $ybeg, 'contents' => array());		$this->state = 'dump';	}	function _added($lines)	{		array_walk($lines, array(&$this, '_perform_add'));	}	function _perform_add($line)	{		if ($this->state == 'empty')		{			return '';		}		// This is just an addition line.		if ($this->state == 'dump' || $this->state == 'add')		{			// Start adding to the addition stack.			$this->cols[0][] = $line;			$this->state = 'add';		}		else		{			// This is inside a change block, so start accumulating lines.			$this->state = 'change';			$this->cols[1][] = $line;		}	}	function _deleted($lines)	{		array_walk($lines, array(&$this, '_perform_delete'));	}	function _perform_delete($line)	{		// This is a removal line.		$this->state = 'remove';		$this->cols[0][] = $line;	}	function _context($lines)	{		array_walk($lines, array(&$this, '_perform_context'));	}	function _perform_context($line)	{		// An empty block with no action.		switch ($this->state)		{			case 'add':				$this->data['contents'][] = array('type' => 'add', 'lines' => $this->cols[0]);			break;			case 'remove':				// We have some removal lines pending in our stack, so flush them.				$this->data['contents'][] = array('type' => 'remove', 'lines' => $this->cols[0]);			break;			case 'change':				// We have both remove and addition lines, so this is a change block.				$this->data['contents'][] = array('type' => 'change', 'old' => $this->cols[0], 'new' => $this->cols[1]);			break;		}		$this->cols = array(array(), array());		$this->data['contents'][] = array('type' => 'empty', 'line' => $line);		$this->state = 'dump';	}	function _changed($orig, $final)	{		return $this->_deleted($orig) . $this->_added($final);	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_search_info{	function module()	{		return array(			'filename'	=> 'acp_search',			'title'		=> 'ACP_SEARCH',			'version'	=> '1.0.0',			'modes'		=> array(				'settings'	=> array('title' => 'ACP_SEARCH_SETTINGS', 'auth' => 'acl_a_search', 'cat' => array('ACP_SERVER_CONFIGURATION')),				'index'		=> array('title' => 'ACP_SEARCH_INDEX', 'auth' => 'acl_a_search', 'cat' => array('ACP_CAT_DATABASE')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** captcha_qa [English]** @package language* @version $Id$* @copyright (c) 2009 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'CAPTCHA_QA'				=> 'Q&amp;A',	'CONFIRM_QUESTION_EXPLAIN'	=> 'This question is a means of preventing automated form submissions by spambots.',	'CONFIRM_QUESTION_WRONG'	=> 'You have provided an invalid answer to the question.',	'QUESTION_ANSWERS'			=> 'Answers',	'ANSWERS_EXPLAIN'			=> 'Please enter valid answers to the question, one per line.',	'CONFIRM_QUESTION'			=> 'Question',	'ANSWER'					=> 'Answer',	'EDIT_QUESTION'				=> 'Edit Question',	'QUESTIONS'					=> 'Questions',	'QUESTIONS_EXPLAIN'			=> 'For every form submission where you have enabled the Q&amp;A plugin, users will be asked one of the questions specified here. To use this plugin at least one question must be set in the default language. These questions should be easy for your target audience to answer but beyond the ability of a bot capable of running a Google search. Using a large and regularly changed set of questions will yield the best results. Enable the strict setting if your question relies on mixed case, punctuation or whitespace.',	'QUESTION_DELETED'			=> 'Question deleted',	'QUESTION_LANG'				=> 'Language',	'QUESTION_LANG_EXPLAIN'		=> 'The language this question and its answers are written in.',	'QUESTION_STRICT'			=> 'Strict check',	'QUESTION_STRICT_EXPLAIN'	=> 'Enable to enforce mixed case, punctuation and whitespace.',	'QUESTION_TEXT'				=> 'Question',	'QUESTION_TEXT_EXPLAIN'		=> 'The question presented to the user.',	'QA_ERROR_MSG'				=> 'Please fill in all fields and enter at least one answer.',	'QA_LAST_QUESTION'			=> 'You cannot delete all questions while the plugin is active.',));?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Main non-gd captcha class* @ignore* @package VC*/class captcha{	var $filtered_pngs;	var $width = 320;	var $height = 50;	/**	* Define filtered pngs on init	*/	function captcha()	{		// If we can we will generate a single filtered png, we avoid nastiness via emulation of some Zlib stuff		$this->define_filtered_pngs();	}	/**	* Create the image containing $code with a seed of $seed	*/	function execute($code, $seed)	{		$img_height = $this->height - 10;		$img_width = 0;		mt_srand($seed);		$char_widths = $hold_chars = array();		$code_len = strlen($code);		for ($i = 0; $i < $code_len; $i++)		{			$char = $code[$i];			$width = mt_rand(0, 4);			$raw_width = $this->filtered_pngs[$char]['width'];			$char_widths[$i] = $width;			$img_width += $raw_width - $width;			// Split the char into chunks of $raw_width + 1 length			if (empty($hold_chars[$char]))			{				$hold_chars[$char] = str_split(base64_decode($this->filtered_pngs[$char]['data']), $raw_width + 1);			}		}		$offset_x = mt_rand(0, $this->width - $img_width);		$offset_y = mt_rand(0, $this->height - $img_height);		$image = '';		for ($i = 0; $i < $this->height; $i++)		{			$image .= chr(0);			if ($i > $offset_y && $i < $offset_y + $img_height)			{				for ($j = 0; $j < $offset_x; $j++)				{					$image .= chr(mt_rand(140, 255));				}				for ($j = 0; $j < $code_len; $j++)				{					$image .= $this->randomise(substr($hold_chars[$code{$j}][$i - $offset_y - 1], 1), $char_widths[$j]);				}				for ($j = $offset_x + $img_width; $j < $this->width; $j++)				{					$image .= chr(mt_rand(140, 255));				}			}			else			{				for ($j = 0; $j < $this->width; $j++)				{					$image .= chr(mt_rand(140, 255));				}			}		}		unset($hold_chars);		$image = $this->create_png($image, $this->width, $this->height);		// Output image		header('Content-Type: image/png');		header('Cache-control: no-cache, no-store');		echo $image;		exit;	}	/**	* This is designed to randomise the pixels of the image data within	* certain limits so as to keep it readable. It also varies the image	* width a little	*/	function randomise($scanline, $width)	{		$new_line = '';		$end = strlen($scanline) - ceil($width/2);		for ($i = floor($width/2); $i < $end; $i++)		{			$pixel = ord($scanline{$i});			if ($pixel < 190)			{				$new_line .= chr(mt_rand(0, 205));			}			else if ($pixel > 190)			{				$new_line .= chr(mt_rand(145, 255));			}			else			{				$new_line .= $scanline{$i};			}		}		return $new_line;	}	/**	* This creates a chunk of the given type, with the given data	* of the given length adding the relevant crc	*/	function png_chunk($length, $type, $data)	{		$raw = $type . $data;		return pack('N', $length) . $raw . pack('N', crc32($raw));	}	/**	* Creates greyscale 8bit png - The PNG spec can be found at	* http://www.libpng.org/pub/png/spec/PNG-Contents.html we use	* png because it's a fully recognised open standard and supported	* by practically all modern browsers and OSs	*/	function create_png($raw_image, $width, $height)	{		// SIG		$image = pack('C8', 137, 80, 78, 71, 13, 10, 26, 10);		// IHDR		$raw = pack('N2', $width, $height);		$raw .= pack('C5', 8, 0, 0, 0, 0);		$image .= $this->png_chunk(13, 'IHDR', $raw);		// IDAT		if (@extension_loaded('zlib'))		{			$raw_image = gzcompress($raw_image);			$length = strlen($raw_image);		}		else		{			// The total length of this image, uncompressed, is just a calculation of pixels			$length = ($width + 1) * $height;			// Adler-32 hash generation			// Note: The hash is _backwards_ so we must reverse it			if (@extension_loaded('hash'))			{				$adler_hash = strrev(hash('adler32', $raw_image, true));			}			else if (@extension_loaded('mhash'))			{				$adler_hash = strrev(mhash(MHASH_ADLER32, $raw_image));			}			else			{				// Optimized Adler-32 loop ported from the GNU Classpath project				$temp_length = $length;				$s1 = 1;				$s2 = $index = 0;				while ($temp_length > 0)				{					// We can defer the modulo operation:					// s1 maximally grows from 65521 to 65521 + 255 * 3800					// s2 maximally grows by 3800 * median(s1) = 2090079800 < 2^31					$substract_value = ($temp_length < 3800) ? $temp_length : 3800;					$temp_length -= $substract_value;					while (--$substract_value >= 0)					{						$s1 += ord($raw_image[$index]);						$s2 += $s1;						$index++;					}					$s1 %= 65521;					$s2 %= 65521;				}				$adler_hash = pack('N', ($s2 << 16) | $s1);			}			// This is the same thing as gzcompress($raw_image, 0) but does not need zlib			$raw_image = pack('C3v2', 0x78, 0x01, 0x01, $length, ~$length) . $raw_image . $adler_hash;			// The Zlib header + Adler hash make us add on 11			$length += 11;		}		// IDAT		$image .= $this->png_chunk($length, 'IDAT', $raw_image);		// IEND		$image .= $this->png_chunk(0, 'IEND', '');		return $image;	}	/**	* png image data	* Each 'data' element is base64_encoded uncompressed IDAT	*/	function define_filtered_pngs()	{		$this->filtered_pngs = array(			'0' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A///////////////////olFAkBAAAGDyA4P///M31/////////////wD////////////////0dAgAAAAAAAAAAAAEcPipFGHn////////////AP//////////////6DAAAAAAAAAAAAAAAAAALSEAN+T///////////8A//////////////xAAAAAAAAAAAAAAAAAAAAAACPA/////////////wD/////////////oAAAAAAAAAAAAAAAAAAAAAAAev//////////////AP////////////8oAAAAAAAAPNj/zDAAAAAAAABD//////////////8A////////////1AAAAAAAABjw////5BAAAAAAAADo/////////////wD///////////+QAAAAAAAAbP//////QgAAAAAAAKj/////////////AP///////////1wAAAAAAACs/////8AXAAAAAAAAcP////////////8A////////////OAAAAAAAAND////dNwAAAAAAAABI/////////////wD///////////8gAAAAAAAA4P//7koACwAAAAAAACT/////////////AP///////////wgAAAAAAAD///VqAwaPAAAAAAAAEP////////////8A////////////AAAAAAAAAP/8kQYDavUAAAAAAAAA/////////////wD///////////8AAAAAAAAA/6kNAEru/wAAAAAAAAD/////////////AP///////////wAAAAAAAADAIwA33f//AAAAAAAAAP////////////8A////////////FAAAAAAAADYAI8D///8AAAAAAAAQ/////////////wD///////////8kAAAAAAAAAA2p////5AAAAAAAACD/////////////AP///////////0gAAAAAAAAFkfz////UAAAAAAAAQP////////////8A////////////cAAAAAAAAET1/////7AAAAAAAABo/////////////wD///////////+oAAAAAAAAXfX/////sAAAAAAAAGj/////////////AAAAALgAAAAAAAAwAAAAAAAAAAAAAAD////////////oAAAAAAAACOT////oEAAAAAAAAOD/////////////AP////////////8+AAAAAAAAKMz/zDQAAAAAAAA0//////////////8A////////////7jgAAAAAAAAAAAAAAAAAAAAAAKT//////////////wD///////////VqAwIAAAAAAAAAAAAAAAAAAAA8////////////////AP//////////rQcDaVEAAAAAAAAAAAAAAAAAKOj///////////////8A///////////nblnu/IAIAAAAAAAAAAAAAFzw/////////////////wD////////////79////+iITCAAAAAgSITg////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////w==',				'width' => 40			),			'1' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////8BAAAAAAAP//////////////////AP////////////////////////9sAAAAAAAA//////////////////8A////////////////////////pAAAAAAAAAD//////////////////wD//////////////////////6wEAAAAAAAAAP//////////////////AP////////////////////h4AAAAAAAAAAAA//////////////////8A//////////////////ygJAAAAAAAAAAAAAD//////////////////wD//////////////9x8HAAAAAAAAAAAAAAAAP//////////////////AP//////////////AAAAAAAAAAAAAAAAAAAA//////////////////8A//////////////8AAAAAAAAAAAAAAAAAAAD//////////////////wD//////////////wAAAAAAAAR4AAAAAAAAAP//////////////////AP//////////////AAAAAAA4zP8AAAAAAAAA//////////////////8A//////////////8AAAA4sP///wAAAAAAAAD//////////////////wD//////////////yR80P//////AAAAAAAAAP//////////////////AP////////////////////////8AAAAAAAAA//////////////////8A/////////////////////////wAAAAAAAAD//////////////////wD/////////////////////////AAAAAAAAAP//////////////////AP////////////////////////8AAAAAAAAA//////////////////8A/////////////////////////wAAAAAAAAD//////////////////wD/////////////////////////AAAAAAAAAP//////////////////AP////////////////////////8AAAAAAAAA//////////////////8A/////////////////////////wAAAAAAAAD//////////////////wD/////////////////////////AAAAAAAAAP//////////////////AP////////////////////////8AAAAAAAAA//////////////////8A/////////////////////////wAAAAAAAAD//////////////////wD/////////////////////////AAAAAAAAAP//////////////////AP////////////////////////8AAAAAAAAA//////////////////8A/////////////////////////wAAAAAAAAD//////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'2' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP/////////////////okFAkCAAABCBIfNT///////////////////8A///////////////8hAgAAAAAAAAAAAAAAFTo/////////////////wD//////////////1QAAAAAAAAAAAAAAAAAACjo////////////////AP////////////+MAAAAAAAAAAAAAAAAAAAAADj///////////////8A////////////9BAAAAAAAAAAAAAAAAAAAAAAALD//////////////wD///////////+gAAAAAAAAAHjs+KwMAAAAAAAAVP//////////////AP///////////1gAAAAAAABM/////6QAAAAAAAAU//////////////8A////////////KAAAAAAAALj/////+AAAAAAAAAD//////////////wD///////////+MfGBMOCAI8P/////wAAAAAAAACP//////////////AP///////////////////////////5wAAAAAAAAw//////////////8A///////////////////////////oFAAAAAAAAHz//////////////wD/////////////////////////6CgAAAAAAAAE3P//////////////AP///////////////////////9ggAAAAAAAAAHT///////////////8A//////////////////////+0DAAAAAAAAAA8+P///////////////wD/////////////////////gAAAAAAAAAAAKOj/////////////////AP//////////////////9FAAAAAAAAAAADzw//////////////////8A/////////////////+g4AAAAAAAAAABk/P///////////////////wD////////////////oKAAAAAAAAAAMqP//////////////////////AP//////////////6CgAAAAAAAAAMNz///////////////////////8A//////////////g4AAAAAAAAAFT0/////////////////////////wD/////////////bAAAAAAAAABU/P//////////////////////////AP///////////8wAAAAAAAAAAAAAAAAAAAAAAAAA//////////////8A////////////SAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////9wAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////hAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////8A//////////9AAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////xAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'3' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD////////////////8sGg0FAAAACA4cLz8////////////////////AP//////////////rBgAAAAAAAAAAAAAACTA//////////////////8A/////////////3QAAAAAAAAAAAAAAAAAAASs/////////////////wD///////////+YAAAAAAAAAAAAAAAAAAAAAAjc////////////////AP//////////6AwAAAAAAAAAAAAAAAAAAAAAAGT///////////////8A//////////94AAAAAAAABJDw/8g4AAAAAAAAHP///////////////wD//////////yAAAAAAAACE/////9gAAAAAAAAA////////////////AP///////////NSwiGQ4FOT//////AAAAAAAABD///////////////8A//////////////////////////+YAAAAAAAAVP///////////////wD//////////////////////P/ggAQAAAAAAATM////////////////AP////////////////////9gAAAAAAAAAAAElP////////////////8A/////////////////////0AAAAAAAAAAHLj//////////////////wD/////////////////////OAAAAAAAAAAwkPj/////////////////AP////////////////////8gAAAAAAAAAAAAINj///////////////8A/////////////////////xAAAAAAAAAAAAAAIPD//////////////wD/////////////////////uOz/4HgEAAAAAAAAhP//////////////AP///////////////////////////3wAAAAAAAAw//////////////8A////////////////////////////6AAAAAAAAAj//////////////wD/////////////////////////////AAAAAAAAAP//////////////AP//////////tJh8YEQoDNz//////+AAAAAAAAAY//////////////8A//////////88AAAAAAAAaP//////dAAAAAAAAEz//////////////wD//////////6QAAAAAAAAAdOD/5HQAAAAAAAAApP//////////////AP///////////CgAAAAAAAAAAAAAAAAAAAAAACD4//////////////8A////////////yAQAAAAAAAAAAAAAAAAAAAAEuP///////////////wD/////////////rAQAAAAAAAAAAAAAAAAABJD/////////////////AP//////////////zDQAAAAAAAAAAAAAACTA//////////////////8A/////////////////8BwOCAAAAAUNGi0/P///////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'4' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP//////////////////////////nAAAAAAAAAD///////////////8A/////////////////////////8AEAAAAAAAAAP///////////////wD////////////////////////gGAAAAAAAAAAA////////////////AP//////////////////////9DAAAAAAAAAAAAD///////////////8A//////////////////////9UAAAAAAAAAAAAAP///////////////wD/////////////////////hAAAAAAAAAAAAAAA////////////////AP///////////////////7QAAAAAAAAAAAAAAAD///////////////8A///////////////////UDAAAAAAUAAAAAAAAAP///////////////wD/////////////////7CQAAAAABMAAAAAAAAAA////////////////AP////////////////xEAAAAAACU/wAAAAAAAAD///////////////8A////////////////cAAAAAAAZP//AAAAAAAAAP///////////////wD//////////////6AAAAAAADz8//8AAAAAAAAA////////////////AP/////////////IBAAAAAAc6P///wAAAAAAAAD///////////////8A////////////5BgAAAAADMz/////AAAAAAAAAP///////////////wD///////////g0AAAAAACk//////8AAAAAAAAA////////////////AP//////////XAAAAAAAfP///////wAAAAAAAAD///////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////8A////////////////////////////AAAAAAAAAP///////////////wD///////////////////////////8AAAAAAAAA////////////////AP///////////////////////////wAAAAAAAAD///////////////8A////////////////////////////AAAAAAAAAP///////////////wD///////////////////////////8AAAAAAAAA////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'5' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP//////////////8AAAAAAAAAAAAAAAAAAAAAAA//////////////8A///////////////MAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////////6wAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////////iAAAAAAAAAAAAAAAAAAAAAAA//////////////8A//////////////9kAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////////0QAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////////IAAAAAAAYP////////////////////////////8A//////////////wAAAAAAAB8/////////////////////////////wD/////////////3AAAAAAAAIj/////////////////////////////AP////////////+4AAAAAAAAoLRYHAAEKGTE//////////////////8A/////////////5QAAAAAAAAQAAAAAAAAAABY9P///////////////wD/////////////dAAAAAAAAAAAAAAAAAAAAAA89P//////////////AP////////////9QAAAAAAAAAAAAAAAAAAAAAABg//////////////8A/////////////zAAAAAAAAAAAAAAAAAAAAAAAADQ/////////////wD/////////////IAAAAAAAAGjY/+h4BAAAAAAAAGz/////////////AP//////////////9NS0lHSc//////90AAAAAAAALP////////////8A/////////////////////////////9QAAAAAAAAE/////////////wD//////////////////////////////wAAAAAAAAD/////////////AP/////////////////////////////8AAAAAAAAEP////////////8A////////////pIRwWEAgDOD//////8wAAAAAAAA8/////////////wD///////////9EAAAAAAAAaP//////ZAAAAAAAAHz/////////////AP///////////6QAAAAAAAAAaOD/4GQAAAAAAAAE4P////////////8A/////////////CQAAAAAAAAAAAAAAAAAAAAAAGD//////////////wD/////////////yAQAAAAAAAAAAAAAAAAAAAAc7P//////////////AP//////////////rAwAAAAAAAAAAAAAAAAAGNj///////////////8A////////////////0EAAAAAAAAAAAAAAAFTo/////////////////wD//////////////////8h4QCAAAAAcQHzU////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'6' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD///////////////////+0ZCwMAAAUNGjI////////////////////AP/////////////////EMAAAAAAAAAAAAABM6P////////////////8A////////////////lAQAAAAAAAAAAAAAAAAo6P///////////////wD//////////////6wAAAAAAAAAAAAAAAAAAABI////////////////AP/////////////oEAAAAAAAAAAAAAAAAAAAAACw//////////////8A/////////////3AAAAAAAAAoxP/YPAAAAAAAAEj//////////////wD////////////4EAAAAAAACOD////YDCBAVGiAoP//////////////AP///////////7gAAAAAAABY//////////////////////////////8A////////////eAAAAAAAAJT//////////////////////////////wD///////////9MAAAAAAAAvP/IXBgABCx03P//////////////////AP///////////ygAAAAAAADcdAAAAAAAAAAEiP////////////////8A////////////FAAAAAAAAFAAAAAAAAAAAAAAcP///////////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAlP//////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAQ8P////////////8A////////////AAAAAAAAAABAyP/kZAAAAAAAAACQ/////////////wD///////////8MAAAAAAAALPj/////WAAAAAAAAET/////////////AP///////////yQAAAAAAACY///////MAAAAAAAAFP////////////8A////////////SAAAAAAAAMD///////wAAAAAAAAA/////////////wD///////////9wAAAAAAAAvP///////wAAAAAAAAD/////////////AP///////////7QAAAAAAACI///////UAAAAAAAAJP////////////8A////////////+AwAAAAAACDw/////2wAAAAAAABY/////////////wD/////////////cAAAAAAAADC8/Ox4AAAAAAAAAKj/////////////AP/////////////oEAAAAAAAAAAAAAAAAAAAAAAk/P////////////8A//////////////+oAAAAAAAAAAAAAAAAAAAABLj//////////////wD///////////////+QAAAAAAAAAAAAAAAAAACQ////////////////AP////////////////+0JAAAAAAAAAAAAAAkuP////////////////8A///////////////////8sGg0FAAADCxgqPz//////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'7' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAABP////////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAAAy4/////////////wD//////////////////////////+QUAAAAAAAEuP//////////////AP/////////////////////////8QAAAAAAAAKT///////////////8A/////////////////////////4wAAAAAAAB0/////////////////wD////////////////////////cCAAAAAAANPz/////////////////AP///////////////////////0QAAAAAAATY//////////////////8A//////////////////////+0AAAAAAAAeP///////////////////wD//////////////////////CQAAAAAABTw////////////////////AP////////////////////+gAAAAAAAAkP////////////////////8A/////////////////////ywAAAAAABDw/////////////////////wD///////////////////+4AAAAAAAAbP//////////////////////AP///////////////////1wAAAAAAADQ//////////////////////8A///////////////////4DAAAAAAAMP///////////////////////wD//////////////////7QAAAAAAAB8////////////////////////AP//////////////////aAAAAAAAAMj///////////////////////8A//////////////////8oAAAAAAAM/P///////////////////////wD/////////////////8AAAAAAAAET/////////////////////////AP////////////////+0AAAAAAAAcP////////////////////////8A/////////////////4wAAAAAAACY/////////////////////////wD/////////////////WAAAAAAAAMD/////////////////////////AP////////////////80AAAAAAAA4P////////////////////////8A/////////////////xAAAAAAAAD4/////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'8' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD////////////////////IdDQUAAAEIEiA1P//////////////////AP/////////////////gRAAAAAAAAAAAAAAAROD///////////////8A////////////////0BgAAAAAAAAAAAAAAAAAEMj//////////////wD///////////////AcAAAAAAAAAAAAAAAAAAAAHPD/////////////AP//////////////hAAAAAAAAAAAAAAAAAAAAAAAhP////////////8A//////////////8sAAAAAAAAKMz/zCgAAAAAAAAs/////////////wD//////////////wAAAAAAAADM////zAAAAAAAAAD/////////////AP//////////////BAAAAAAAAP//////AAAAAAAABP////////////8A//////////////8sAAAAAAAAzP///9QAAAAAAAAw/////////////wD//////////////3wAAAAAAAAoyP/YNAAAAAAAAIT/////////////AP//////////////7BgAAAAAAAAAAAAAAAAAAAAc8P////////////8A////////////////xBgAAAAAAAAAAAAAAAAAGNj//////////////wD/////////////////tAQAAAAAAAAAAAAAAACo////////////////AP///////////////HAAAAAAAAAAAAAAAAAAAAB8//////////////8A//////////////9gAAAAAAAAAAAAAAAAAAAAAAB8/////////////wD/////////////wAAAAAAAAABk4P/UWAAAAAAAAATQ////////////AP////////////9UAAAAAAAAaP//////XAAAAAAAAGT///////////8A/////////////xgAAAAAAADg///////cAAAAAAAAJP///////////wD/////////////AAAAAAAAAP////////8AAAAAAAAA////////////AP////////////8AAAAAAAAA4P//////3AAAAAAAAAT///////////8A/////////////ygAAAAAAABg//////9cAAAAAAAALP///////////wD/////////////ZAAAAAAAAABY1P/cXAAAAAAAAABw////////////AP/////////////QAAAAAAAAAAAAAAAAAAAAAAAABNz///////////8A//////////////9gAAAAAAAAAAAAAAAAAAAAAAB0/////////////wD///////////////Q8AAAAAAAAAAAAAAAAAAAAUPz/////////////AP////////////////x4CAAAAAAAAAAAAAAAEIT8//////////////8A///////////////////smFQwGAAAABg0ZKT0/////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'9' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD///////////////////ysYCwMAAAUNGiw/P//////////////////AP////////////////+4JAAAAAAAAAAAAAAkuP////////////////8A////////////////lAQAAAAAAAAAAAAAAAAAkP///////////////wD//////////////8AEAAAAAAAAAAAAAAAAAAAAqP//////////////AP/////////////8JAAAAAAAAAAAAAAAAAAAAAAQ7P////////////8A/////////////6wAAAAAAAAAfOz8vCwAAAAAAABw/////////////wD/////////////WAAAAAAAAHD/////7BgAAAAAAAz4////////////AP////////////8kAAAAAAAA1P//////hAAAAAAAALT///////////8A/////////////wAAAAAAAAD///////+4AAAAAAAAcP///////////wD/////////////AAAAAAAAAPz//////8AAAAAAAABI////////////AP////////////8UAAAAAAAAzP//////lAAAAAAAACT///////////8A/////////////0QAAAAAAABY//////gsAAAAAAAADP///////////wD/////////////kAAAAAAAAABw5P/IPAAAAAAAAAAA////////////AP/////////////wEAAAAAAAAAAAAAAAAAAAAAAAAAD///////////8A//////////////+UAAAAAAAAAAAAAAAAAAAAAAAAAP///////////wD///////////////9wAAAAAAAAAAAAAFAAAAAAAAAU////////////AP////////////////+IBAAAAAAAAABw3AAAAAAAACj///////////8A///////////////////cdCwEABhcxP+8AAAAAAAATP///////////wD//////////////////////////////5AAAAAAAAB4////////////AP//////////////////////////////UAAAAAAAALj///////////8A//////////////+kgGxUQCAM2P///+AIAAAAAAAQ+P///////////wD//////////////0gAAAAAAAA42P/EKAAAAAAAAHD/////////////AP//////////////sAAAAAAAAAAAAAAAAAAAAAAQ6P////////////8A////////////////TAAAAAAAAAAAAAAAAAAAAKz//////////////wD////////////////oKAAAAAAAAAAAAAAAAASU////////////////AP/////////////////sUAAAAAAAAAAAAAAwxP////////////////8A////////////////////yHA0FAAADCxktP///////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'A' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD//////////////////+QAAAAAAAAAAAAAAOT/////////////////AP//////////////////kAAAAAAAAAAAAAAAkP////////////////8A//////////////////88AAAAAAAAAAAAAAA8/////////////////wD/////////////////5AAAAAAAAAAAAAAAAADk////////////////AP////////////////+QAAAAAAAAAAAAAAAAAJD///////////////8A/////////////////zwAAAAAAAAAAAAAAAAAPP///////////////wD////////////////kAAAAAAAAAAgAAAAAAAAA5P//////////////AP///////////////5AAAAAAAAAAgAAAAAAAAACQ//////////////8A////////////////PAAAAAAAAAz8HAAAAAAAADz//////////////wD//////////////+QAAAAAAAAAWP9kAAAAAAAAANz/////////////AP//////////////kAAAAAAAAACk/7wAAAAAAAAAhP////////////8A//////////////88AAAAAAAABOz//BQAAAAAAAAw/////////////wD/////////////4AAAAAAAAAA8////ZAAAAAAAAADc////////////AP////////////+EAAAAAAAAAIj///+8AAAAAAAAAIT///////////8A/////////////zAAAAAAAAAA2P////wQAAAAAAAAMP///////////wD////////////cAAAAAAAAACT//////1wAAAAAAAAA3P//////////AP///////////4QAAAAAAAAAAAAAAAAAAAAAAAAAAACE//////////8A////////////MAAAAAAAAAAAAAAAAAAAAAAAAAAAADD//////////wD//////////9wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANz/////////AP//////////hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhP////////8A//////////8wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAw/////////wD/////////3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADc////////AP////////+EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIT///////8A/////////zAAAAAAAAAAhP///////////2QAAAAAAAAAMP///////wD////////cAAAAAAAAAADM////////////vAAAAAAAAAAA3P//////AP///////4QAAAAAAAAAHP/////////////4DAAAAAAAAACE//////8A////////MAAAAAAAAABk//////////////9cAAAAAAAAADD//////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'B' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAEDh83P///////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAEhP//////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAeP////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAxP///////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAABY////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAABT///////////8A//////////8AAAAAAAAAAP/////4zEwAAAAAAAAAAP///////////wD//////////wAAAAAAAAAA////////7AAAAAAAAAAQ////////////AP//////////AAAAAAAAAAD////////sAAAAAAAAAEj///////////8A//////////8AAAAAAAAAAP/////4zEQAAAAAAAAAtP///////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAFz/////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAiA/P////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAIjPj//////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAGKz/////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAJT///////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAABNz//////////wD//////////wAAAAAAAAAA///////sqCAAAAAAAAAAbP//////////AP//////////AAAAAAAAAAD/////////yAAAAAAAAAAs//////////8A//////////8AAAAAAAAAAP//////////AAAAAAAAAAT//////////wD//////////wAAAAAAAAAA/////////7wAAAAAAAAAAP//////////AP//////////AAAAAAAAAAD//////+ikGAAAAAAAAAAY//////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFT//////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsP//////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAADj///////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAc6P///////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAATOj/////////////AP//////////AAAAAAAAAAAAAAAAAAAEIEBkkNj///////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'C' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP//////////////////5JRULBAAAAgkTIDQ//////////////////8A////////////////1FAAAAAAAAAAAAAAAABAyP///////////////wD//////////////4gEAAAAAAAAAAAAAAAAAAAElP//////////////AP////////////9wAAAAAAAAAAAAAAAAAAAAAAAAlP////////////8A////////////kAAAAAAAAAAAAAAAAAAAAAAAAAAEyP///////////wD//////////9wIAAAAAAAAAAAAAAAAAAAAAAAAAAAw////////////AP//////////WAAAAAAAAAAAWMz/8JwQAAAAAAAAAACw//////////8A/////////+wEAAAAAAAAAID//////9QMAAAAAAAAAET//////////wD/////////nAAAAAAAAAAo/P///////3wAAAAABDBspP//////////AP////////9gAAAAAAAAAIz/////////3BxQjMT0//////////////8A/////////zQAAAAAAAAAzP///////////////////////////////wD/////////GAAAAAAAAADo////////////////////////////////AP////////8AAAAAAAAAAP////////////////////////////////8A/////////wAAAAAAAAAA/////////////////////////////////wD/////////AAAAAAAAAAD/////////////////////////////////AP////////8cAAAAAAAAAOj///////////////////////////////8A/////////zgAAAAAAAAA0P/////////kIGio7P///////////////wD/////////bAAAAAAAAACg/////////5wAAAAAMHS49P//////////AP////////+oAAAAAAAAAEz/////////PAAAAAAAAAAc//////////8A//////////QIAAAAAAAAALz//////6QAAAAAAAAAAGT//////////wD//////////3AAAAAAAAAADIzo/+SEBAAAAAAAAAAAyP//////////AP//////////7BAAAAAAAAAAAAAAAAAAAAAAAAAAAED///////////8A////////////rAAAAAAAAAAAAAAAAAAAAAAAAAAE0P///////////wD/////////////fAAAAAAAAAAAAAAAAAAAAAAAAJz/////////////AP//////////////iAQAAAAAAAAAAAAAAAAAAASY//////////////8A////////////////yEAAAAAAAAAAAAAAAAA8yP///////////////wD//////////////////9yIUCwQAAAAIEB4yP//////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'D' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD///////////8AAAAAAAAAAAAAAAAADChQkOT/////////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAABGjw//////////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAACDY/////////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAABjk////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAED///////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAKj//////////wD///////////8AAAAAAAAAAP///+isSAAAAAAAAAAANP//////////AP///////////wAAAAAAAAAA////////hAAAAAAAAAAA2P////////8A////////////AAAAAAAAAAD/////////MAAAAAAAAACQ/////////wD///////////8AAAAAAAAAAP////////+MAAAAAAAAAFj/////////AP///////////wAAAAAAAAAA/////////8gAAAAAAAAAMP////////8A////////////AAAAAAAAAAD/////////5AAAAAAAAAAY/////////wD///////////8AAAAAAAAAAP//////////AAAAAAAAAAD/////////AP///////////wAAAAAAAAAA//////////8AAAAAAAAAAP////////8A////////////AAAAAAAAAAD//////////wAAAAAAAAAA/////////wD///////////8AAAAAAAAAAP/////////wAAAAAAAAABD/////////AP///////////wAAAAAAAAAA/////////9QAAAAAAAAAJP////////8A////////////AAAAAAAAAAD/////////qAAAAAAAAABI/////////wD///////////8AAAAAAAAAAP////////9QAAAAAAAAAHj/////////AP///////////wAAAAAAAAAA////////uAAAAAAAAAAAvP////////8A////////////AAAAAAAAAAD////w0HwEAAAAAAAAACT8/////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAoP//////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAAADz8//////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAY6P///////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAKNz/////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAACHT0//////////////8A////////////AAAAAAAAAAAAAAAAABg4bKj0/////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'E' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP//////////AAAAAAAAAAD///////////////////////////////8A//////////8AAAAAAAAAAP///////////////////////////////wD//////////wAAAAAAAAAA////////////////////////////////AP//////////AAAAAAAAAAD///////////////////////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////8A//////////8AAAAAAAAAAP///////////////////////////////wD//////////wAAAAAAAAAA////////////////////////////////AP//////////AAAAAAAAAAD///////////////////////////////8A//////////8AAAAAAAAAAP///////////////////////////////wD//////////wAAAAAAAAAA////////////////////////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'F' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAP///////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAP///////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'G' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD//////////////////MB8TCgQAAAACCA4YJzs////////////////AP///////////////JQcAAAAAAAAAAAAAAAAAAhw8P////////////8A/////////////9gwAAAAAAAAAAAAAAAAAAAAAAAk2P///////////wD////////////EDAAAAAAAAAAAAAAAAAAAAAAAAAAc7P//////////AP//////////2AwAAAAAAAAAAAAAAAAAAAAAAAAAAABY//////////8A//////////wwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQ/////////wD/////////kAAAAAAAAAAAEHzQ/P/gmCAAAAAAAAAAAFz/////////AP////////wcAAAAAAAAACjg////////8CwAAAAAAAAgWP////////8A////////vAAAAAAAAAAI2P//////////yBRAcJjI8P///////////wD///////94AAAAAAAAAGD/////////////////////////////////AP///////0AAAAAAAAAAsP////////////////////////////////8A////////IAAAAAAAAADc/////////////////////////////////wD///////8AAAAAAAAAAP///////wAAAAAAAAAAAAAAAAD/////////AP///////wAAAAAAAAAA////////AAAAAAAAAAAAAAAAAP////////8A////////AAAAAAAAAAD///////8AAAAAAAAAAAAAAAAA/////////wD///////8gAAAAAAAAAOD//////wAAAAAAAAAAAAAAAAD/////////AP///////0AAAAAAAAAAtP//////AAAAAAAAAAAAAAAAAP////////8A////////cAAAAAAAAABw//////8AAAAAAAAAAAAAAAAA/////////wD///////+8AAAAAAAAABDs////////////AAAAAAAAAAD/////////AP////////wYAAAAAAAAADz0//////////AAAAAAAAAAAP////////8A/////////5AAAAAAAAAAACCY4P//3KhcCAAAAAAAAAAA/////////wD/////////+CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////AP//////////xAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIP////////8A////////////rAQAAAAAAAAAAAAAAAAAAAAAAAAAAGTw/////////wD/////////////vBQAAAAAAAAAAAAAAAAAAAAAADjI////////////AP//////////////8HAQAAAAAAAAAAAAAAAAAEiw//////////////8A//////////////////iwcEAgBAAABCA4aKDk/////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'H' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'I' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAP///////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAP///////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAP///////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAP///////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'J' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP///////////////////////////wAAAAAAAAAA//////////////8A////////////////////////////AAAAAAAAAAD//////////////wD///////////////////////////8AAAAAAAAAAP//////////////AP///////////////////////////wAAAAAAAAAA//////////////8A////////////////////////////AAAAAAAAAAD//////////////wD///////////////////////////8AAAAAAAAAAP//////////////AP///////////////////////////wAAAAAAAAAA//////////////8A////////////////////////////AAAAAAAAAAD//////////////wD///////////////////////////8AAAAAAAAAAP//////////////AP///////////////////////////wAAAAAAAAAA//////////////8A////////////////////////////AAAAAAAAAAD//////////////wD///////////////////////////8AAAAAAAAAAP//////////////AP///////////////////////////wAAAAAAAAAA//////////////8A////////////////////////////AAAAAAAAAAD//////////////wD///////////////////////////8AAAAAAAAAAP//////////////AP///////////////////////////wAAAAAAAAAA//////////////8A////////////////////////////AAAAAAAAAAj//////////////wD//////////+zMrIxwUDAQ//////wAAAAAAAAAIP//////////////AP//////////DAAAAAAAAADo////2AAAAAAAAAA0//////////////8A//////////8wAAAAAAAAAKj///+YAAAAAAAAAFj//////////////wD//////////2gAAAAAAAAAIND/yBgAAAAAAAAAkP//////////////AP//////////vAAAAAAAAAAAAAAAAAAAAAAAAADc//////////////8A////////////MAAAAAAAAAAAAAAAAAAAAAAAUP///////////////wD////////////EBAAAAAAAAAAAAAAAAAAAABjk////////////////AP////////////+sBAAAAAAAAAAAAAAAAAAY2P////////////////8A///////////////EMAAAAAAAAAAAAAAAVOj//////////////////wD/////////////////vHBAIAAAABg8fNT/////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'K' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD///////8AAAAAAAAAAP//////////wAQAAAAAAAAAAABw////////AP///////wAAAAAAAAAA/////////9AMAAAAAAAAAAAAcP////////8A////////AAAAAAAAAAD////////cGAAAAAAAAAAAAHD//////////wD///////8AAAAAAAAAAP//////6CgAAAAAAAAAAABs////////////AP///////wAAAAAAAAAA//////Q0AAAAAAAAAAAAVPz///////////8A////////AAAAAAAAAAD////8RAAAAAAAAAAAAFT8/////////////wD///////8AAAAAAAAAAP///1gAAAAAAAAAAABU/P//////////////AP///////wAAAAAAAAAA//9wAAAAAAAAAAAASPz///////////////8A////////AAAAAAAAAAD/jAAAAAAAAAAAADz0/////////////////wD///////8AAAAAAAAAAKQAAAAAAAAAAAA89P//////////////////AP///////wAAAAAAAAAABAAAAAAAAAAAFPT///////////////////8A////////AAAAAAAAAAAAAAAAAAAAAAAApP///////////////////wD///////8AAAAAAAAAAAAAAAAAAAAAAAAU8P//////////////////AP///////wAAAAAAAAAAAAAAAAAAAAAAAABk//////////////////8A////////AAAAAAAAAAAAAAAAAAAAAAAAAADE/////////////////wD///////8AAAAAAAAAAAAAAAAoEAAAAAAAACz8////////////////AP///////wAAAAAAAAAAAAAAGNiAAAAAAAAAAIj///////////////8A////////AAAAAAAAAAAAABjY//gYAAAAAAAACOD//////////////wD///////8AAAAAAAAAAAAY2P///5wAAAAAAAAASP//////////////AP///////wAAAAAAAAAAGNj//////CgAAAAAAAAAqP////////////8A////////AAAAAAAAAADI////////sAAAAAAAAAAc8P///////////wD///////8AAAAAAAAAAP//////////QAAAAAAAAABs////////////AP///////wAAAAAAAAAA///////////IAAAAAAAAAATI//////////8A////////AAAAAAAAAAD///////////9YAAAAAAAAADD8/////////wD///////8AAAAAAAAAAP///////////9wEAAAAAAAAAJD/////////AP///////wAAAAAAAAAA/////////////3AAAAAAAAAADOT///////8A////////AAAAAAAAAAD/////////////7BAAAAAAAAAAUP///////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'L' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'M' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A//////8AAAAAAAAAAAAAAHz//////3wAAAAAAAAAAAAAAP///////wD//////wAAAAAAAAAAAAAATP//////UAAAAAAAAAAAAAAA////////AP//////AAAAAAAAAAAAAAAc//////8cAAAAAAAAAAAAAAD///////8A//////8AAAAAAAAAAAAAAADw////8AAAAAAAAAAAAAAAAP///////wD//////wAAAAAAAAAAAAAAALz////AAAAAAAAAAAAAAAAA////////AP//////AAAAAAAAAAAAAAAAkP///5AAAAAAAAAAAAAAAAD///////8A//////8AAAAAAAAAAAAAAABc////ZAAAAAAAAAAAAAAAAP///////wD//////wAAAAAAAAAoAAAAADD///8wAAAAACQAAAAAAAAA////////AP//////AAAAAAAAAFwAAAAABPz//AgAAAAAXAAAAAAAAAD///////8A//////8AAAAAAAAAkAAAAAAA0P/UAAAAAACQAAAAAAAAAP///////wD//////wAAAAAAAADMAAAAAACg/6gAAAAAAMQAAAAAAAAA////////AP//////AAAAAAAAAPgEAAAAAHD/dAAAAAAE+AAAAAAAAAD///////8A//////8AAAAAAAAA/zQAAAAAQP9IAAAAADD/AAAAAAAAAP///////wD//////wAAAAAAAAD/bAAAAAAQ/xQAAAAAaP8AAAAAAAAA////////AP//////AAAAAAAAAP+gAAAAAADQAAAAAACc/wAAAAAAAAD///////8A//////8AAAAAAAAA/9QAAAAAAGgAAAAAAND/AAAAAAAAAP///////wD//////wAAAAAAAAD//wwAAAAAFAAAAAAM/P8AAAAAAAAA////////AP//////AAAAAAAAAP//RAAAAAAAAAAAADz//wAAAAAAAAD///////8A//////8AAAAAAAAA//94AAAAAAAAAAAAcP//AAAAAAAAAP///////wD//////wAAAAAAAAD//7AAAAAAAAAAAACo//8AAAAAAAAA////////AP//////AAAAAAAAAP//5AAAAAAAAAAAANz//wAAAAAAAAD///////8A//////8AAAAAAAAA////HAAAAAAAAAAQ////AAAAAAAAAP///////wD//////wAAAAAAAAD///9QAAAAAAAAAEz///8AAAAAAAAA////////AP//////AAAAAAAAAP///4gAAAAAAAAAfP///wAAAAAAAAD///////8A//////8AAAAAAAAA////vAAAAAAAAACw////AAAAAAAAAP///////wD//////wAAAAAAAAD////wAAAAAAAAAOz///8AAAAAAAAA////////AP//////AAAAAAAAAP////8sAAAAAAAc/////wAAAAAAAAD///////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'N' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////AAAAAAAAALD/////////////AAAAAAAAAP//////////AP////////8AAAAAAAAAFOj///////////8AAAAAAAAA//////////8A/////////wAAAAAAAAAASP///////////wAAAAAAAAD//////////wD/////////AAAAAAAAAAAAkP//////////AAAAAAAAAP//////////AP////////8AAAAAAAAAAAAI1P////////8AAAAAAAAA//////////8A/////////wAAAAAAAAAAAAAw+P///////wAAAAAAAAD//////////wD/////////AAAAAAAAAAAAAABw////////AAAAAAAAAP//////////AP////////8AAAAAAAAAAAAAAAC8//////8AAAAAAAAA//////////8A/////////wAAAAAAAAAAAAAAABzs/////wAAAAAAAAD//////////wD/////////AAAAAAAAAAAAAAAAAFD/////AAAAAAAAAP//////////AP////////8AAAAAAAAAAAAAAAAAAJz///8AAAAAAAAA//////////8A/////////wAAAAAAAAAUAAAAAAAADNz//wAAAAAAAAD//////////wD/////////AAAAAAAAALQAAAAAAAAANPz/AAAAAAAAAP//////////AP////////8AAAAAAAAA/2wAAAAAAAAAfP8AAAAAAAAA//////////8A/////////wAAAAAAAAD/+CwAAAAAAAAExAAAAAAAAAD//////////wD/////////AAAAAAAAAP//0AQAAAAAAAAgAAAAAAAAAP//////////AP////////8AAAAAAAAA////jAAAAAAAAAAAAAAAAAAA//////////8A/////////wAAAAAAAAD/////RAAAAAAAAAAAAAAAAAD//////////wD/////////AAAAAAAAAP/////kFAAAAAAAAAAAAAAAAP//////////AP////////8AAAAAAAAA//////+sAAAAAAAAAAAAAAAA//////////8A/////////wAAAAAAAAD///////9kAAAAAAAAAAAAAAD//////////wD/////////AAAAAAAAAP////////QkAAAAAAAAAAAAAP//////////AP////////8AAAAAAAAA/////////8wEAAAAAAAAAAAA//////////8A/////////wAAAAAAAAD//////////4QAAAAAAAAAAAD//////////wD/////////AAAAAAAAAP///////////DwAAAAAAAAAAP//////////AP////////8AAAAAAAAA////////////4BAAAAAAAAAA//////////8A/////////wAAAAAAAAD/////////////qAAAAAAAAAD//////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'O' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A///////////////////0qGw4HAAAABw4aKT0/////////////////wD////////////////wcAwAAAAAAAAAAAAAAAho6P//////////////AP//////////////uBQAAAAAAAAAAAAAAAAAAAAMoP////////////8A/////////////6AEAAAAAAAAAAAAAAAAAAAAAAAAkP///////////wD///////////+4BAAAAAAAAAAAAAAAAAAAAAAAAAAAoP//////////AP//////////8BQAAAAAAAAAAAAAAAAAAAAAAAAAAAAM5P////////8A//////////9wAAAAAAAAAAAsrPD/7KQsAAAAAAAAAABg/////////wD/////////+BAAAAAAAAAAUPj///////hQAAAAAAAAAAjs////////AP////////+sAAAAAAAAABDw//////////AYAAAAAAAAAKD///////8A/////////2wAAAAAAAAAdP///////////3wAAAAAAAAAYP///////wD/////////OAAAAAAAAAC4////////////xAAAAAAAAAAw////////AP////////8cAAAAAAAAAOD////////////oAAAAAAAAABT///////8A/////////wAAAAAAAAAA//////////////8AAAAAAAAAAP///////wD/////////AAAAAAAAAAD//////////////wAAAAAAAAAA////////AP////////8AAAAAAAAAAP/////////////8AAAAAAAAAAD///////8A/////////xwAAAAAAAAA5P///////////+AAAAAAAAAAHP///////wD/////////NAAAAAAAAAC8////////////uAAAAAAAAAA4////////AP////////9oAAAAAAAAAHj///////////98AAAAAAAAAGT///////8A/////////6gAAAAAAAAAGPD/////////+BgAAAAAAAAApP///////wD/////////9AwAAAAAAAAAUPz///////xcAAAAAAAAAAjs////////AP//////////cAAAAAAAAAAALKjs//CwOAAAAAAAAAAAYP////////8A///////////wFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzk/////////wD///////////+4BAAAAAAAAAAAAAAAAAAAAAAAAAAAoP//////////AP////////////+QAAAAAAAAAAAAAAAAAAAAAAAAAJD///////////8A//////////////+sEAAAAAAAAAAAAAAAAAAAAAyg/////////////wD////////////////oZAgAAAAAAAAAAAAAAARg4P//////////////AP//////////////////9KhsOCAAAAAUMFyc7P////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'P' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP///////////wAAAAAAAAAAAAAAAAAACCxguP////////////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAOOD//////////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAGOD/////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAARP////////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAxP///////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAAABo////////////AP///////////wAAAAAAAAAA////6JwMAAAAAAAAADD///////////8A////////////AAAAAAAAAAD//////6AAAAAAAAAADP///////////wD///////////8AAAAAAAAAAP//////9AAAAAAAAAAA////////////AP///////////wAAAAAAAAAA///////0AAAAAAAAAAD///////////8A////////////AAAAAAAAAAD//////5gAAAAAAAAAHP///////////wD///////////8AAAAAAAAAAP///9iICAAAAAAAAABI////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAJD///////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAI6P///////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAAIT/////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAABU/P////////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAIhPz//////////////wD///////////8AAAAAAAAAAAAAAAAABCRMkOz/////////////////AP///////////wAAAAAAAAAA//////////////////////////////8A////////////AAAAAAAAAAD//////////////////////////////wD///////////8AAAAAAAAAAP//////////////////////////////AP///////////wAAAAAAAAAA//////////////////////////////8A////////////AAAAAAAAAAD//////////////////////////////wD///////////8AAAAAAAAAAP//////////////////////////////AP///////////wAAAAAAAAAA//////////////////////////////8A////////////AAAAAAAAAAD//////////////////////////////wD///////////8AAAAAAAAAAP//////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'Q' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////SoaDQcAAAAHDhoqPT///////////////////8A//////////////BwDAAAAAAAAAAAAAAACHDo/////////////////wD///////////+4FAAAAAAAAAAAAAAAAAAAABCo////////////////AP//////////nAQAAAAAAAAAAAAAAAAAAAAAAACQ//////////////8A/////////7gEAAAAAAAAAAAAAAAAAAAAAAAAAACg/////////////wD////////wFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzo////////////AP///////3AAAAAAAAAAACyo8P/sqCwAAAAAAAAAAGT///////////8A///////4EAAAAAAAAABM+P///////FQAAAAAAAAACPT//////////wD//////7AAAAAAAAAAFPD/////////9BgAAAAAAAAApP//////////AP//////bAAAAAAAAAB4////////////fAAAAAAAAABk//////////8A//////84AAAAAAAAALz///////////+8AAAAAAAAADT//////////wD//////xwAAAAAAAAA6P///////////+QAAAAAAAAAHP//////////AP//////AAAAAAAAAAD//////////////wAAAAAAAAAA//////////8A//////8AAAAAAAAAAP//////////////AAAAAAAAAAD//////////wD//////wAAAAAAAAAA/P////////////8AAAAAAAAAAP//////////AP//////GAAAAAAAAADg////////////4AAAAAAAAAAc//////////8A//////84AAAAAAAAALT////MJHTo//+8AAAAAAAAADT//////////wD//////2wAAAAAAAAAdP///2AAABCg/3wAAAAAAAAAZP//////////AP//////rAAAAAAAAAAY9P/sCAAAAABMGAAAAAAAAACk//////////8A///////4EAAAAAAAAABU/P+0OAAAAAAAAAAAAAAACPT//////////wD///////94AAAAAAAAAAA4sPD/gAAAAAAAAAAAAABk////////////AP////////AcAAAAAAAAAAAAAAAAAAAAAAAAAAAADOT///////////8A/////////7wEAAAAAAAAAAAAAAAAAAAAAAAAAACQ/////////////wD//////////6wEAAAAAAAAAAAAAAAAAAAAAAAAABSs////////////AP///////////7gUAAAAAAAAAAAAAAAAAAAAAAAAAABAwP////////8A//////////////BwDAAAAAAAAAAAAAAABAgAAAAAAAA8/////////wD////////////////0qGg0GAAAABgwXJjkxBgAAAAAALD/////////AP//////////////////////////////////5DQAAAAk/P////////8A////////////////////////////////////+GwAAJD//////////wD//////////////////////////////////////8A49P//////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'R' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////wAAAAAAAAAAAAAAAAAAAAQgOGSk+P///////////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAcuP//////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAEsP////////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQ6P///////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADD///////////8A/////////wAAAAAAAAAA///////svDgAAAAAAAAACP///////////wD/////////AAAAAAAAAAD/////////7AAAAAAAAAAA////////////AP////////8AAAAAAAAAAP/////////cAAAAAAAAABD///////////8A/////////wAAAAAAAAAA//////DQoCQAAAAAAAAAQP///////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACU////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAIPj///////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAzU/////////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAA02P//////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAxctPz///////////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAEDY/////////////////wD/////////AAAAAAAAAAD/9LAsAAAAAAAAAAzc////////////////AP////////8AAAAAAAAAAP///+wkAAAAAAAAADD8//////////////8A/////////wAAAAAAAAAA/////8QAAAAAAAAAAJD//////////////wD/////////AAAAAAAAAAD//////1QAAAAAAAAAFPD/////////////AP////////8AAAAAAAAAAP//////3AQAAAAAAAAAgP////////////8A/////////wAAAAAAAAAA////////aAAAAAAAAAAM6P///////////wD/////////AAAAAAAAAAD////////oCAAAAAAAAABs////////////AP////////8AAAAAAAAAAP////////+AAAAAAAAAAATc//////////8A/////////wAAAAAAAAAA//////////AUAAAAAAAAAFj//////////wD/////////AAAAAAAAAAD//////////5AAAAAAAAAAAND/////////AP////////8AAAAAAAAAAP//////////+CQAAAAAAAAAQP////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'S' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP/////////////////8vHBEIAgAAAQgQHC8/P////////////////8A////////////////pCQAAAAAAAAAAAAAAAAcoP///////////////wD//////////////FwAAAAAAAAAAAAAAAAAAAAAXP//////////////AP////////////9oAAAAAAAAAAAAAAAAAAAAAAAAhP////////////8A////////////zAAAAAAAAAAAAAAAAAAAAAAAAAAI6P///////////wD///////////9cAAAAAAAAAAAAAAAAAAAAAAAAAACA////////////AP///////////xgAAAAAAAAAUOD/8KwkAAAAAAAAADj///////////8A////////////AAAAAAAAAAD0/////8wABCAgICxASP///////////wD///////////8MAAAAAAAAAMz/////////////////////////////AP///////////0AAAAAAAAAACFiQxPT///////////////////////8A////////////oAAAAAAAAAAAAAAAADBwtPT//////////////////wD////////////8QAAAAAAAAAAAAAAAAAAACFTA////////////////AP/////////////oOAAAAAAAAAAAAAAAAAAAAABM6P////////////8A///////////////4fAgAAAAAAAAAAAAAAAAAAAAY2P///////////wD/////////////////7IwwAAAAAAAAAAAAAAAAAAAo+P//////////AP/////////////////////koGw0BAAAAAAAAAAAAACU//////////8A///////////////////////////4uFgAAAAAAAAAADz//////////wD//////////2BgSEA0IBwA6P///////5QAAAAAAAAADP//////////AP//////////JAAAAAAAAACc/////////AAAAAAAAAAA//////////8A//////////9YAAAAAAAAACDo///////AAAAAAAAAABT//////////wD//////////6QAAAAAAAAAACCk7P/snBQAAAAAAAAAUP//////////AP//////////+BAAAAAAAAAAAAAAAAAAAAAAAAAAAACs//////////8A////////////kAAAAAAAAAAAAAAAAAAAAAAAAAAAOP///////////wD////////////8RAAAAAAAAAAAAAAAAAAAAAAAABjc////////////AP/////////////0PAAAAAAAAAAAAAAAAAAAAAAg2P////////////8A///////////////8hBQAAAAAAAAAAAAAAAAMdPT//////////////wD/////////////////+LRwSCAMAAAAHDhoqPT/////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'T' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'U' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////JAAAAAAAAADk/////////+gAAAAAAAAAHP//////////AP////////9MAAAAAAAAAJz/////////nAAAAAAAAABE//////////8A/////////4gAAAAAAAAAHOj//////+ggAAAAAAAAAHz//////////wD/////////0AAAAAAAAAAAIJzs/+ykIAAAAAAAAAAA0P//////////AP//////////QAAAAAAAAAAAAAAAAAAAAAAAAAAAAED///////////8A///////////IBAAAAAAAAAAAAAAAAAAAAAAAAAAE0P///////////wD///////////+YAAAAAAAAAAAAAAAAAAAAAAAAAJj/////////////AP////////////+UBAAAAAAAAAAAAAAAAAAAAASU//////////////8A///////////////IPAAAAAAAAAAAAAAAAAAwyP///////////////wD/////////////////0IxYOCAIAAAEIEiAyP//////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'V' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD//////zAAAAAAAAAAYP//////////////ZAAAAAAAAAAw////////AP//////kAAAAAAAAAAU/P////////////8UAAAAAAAAAJD///////8A///////oBAAAAAAAAADE////////////xAAAAAAAAAAE7P///////wD///////9MAAAAAAAAAHD///////////94AAAAAAAAAEz/////////AP///////6gAAAAAAAAAJP///////////yQAAAAAAAAArP////////8A////////+BAAAAAAAAAA1P/////////YAAAAAAAAABT4/////////wD/////////aAAAAAAAAACE/////////4QAAAAAAAAAbP//////////AP/////////EAAAAAAAAADT/////////OAAAAAAAAADM//////////8A//////////8kAAAAAAAAAOT//////+QAAAAAAAAAKP///////////wD//////////4QAAAAAAAAAmP//////nAAAAAAAAACI////////////AP//////////5AAAAAAAAABE//////9EAAAAAAAABOT///////////8A////////////QAAAAAAAAAT0////9AgAAAAAAABI/////////////wD///////////+gAAAAAAAAAKT///+kAAAAAAAAAKj/////////////AP////////////QIAAAAAAAAXP///1wAAAAAAAAM+P////////////8A/////////////1wAAAAAAAAM+P/8DAAAAAAAAGT//////////////wD/////////////vAAAAAAAAAC8/7wAAAAAAAAAxP//////////////AP//////////////HAAAAAAAAGj/aAAAAAAAACT///////////////8A//////////////94AAAAAAAAHP8cAAAAAAAAhP///////////////wD//////////////9gAAAAAAAAAkAAAAAAAAADk////////////////AP///////////////zgAAAAAAAAQAAAAAAAAQP////////////////8A////////////////lAAAAAAAAAAAAAAAAACg/////////////////wD////////////////sCAAAAAAAAAAAAAAADPT/////////////////AP////////////////9QAAAAAAAAAAAAAABg//////////////////8A/////////////////7AAAAAAAAAAAAAAAMD//////////////////wD//////////////////BQAAAAAAAAAAAAc////////////////////AP//////////////////cAAAAAAAAAAAAHz///////////////////8A///////////////////MAAAAAAAAAAAA3P///////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'W' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A//8cAAAAAAAAALz/////4AAAAAAAAAAA6P////+8AAAAAAAAABz//wD//1QAAAAAAAAAjP////+gAAAAAAAAAACo/////4wAAAAAAAAAUP//AP//jAAAAAAAAABU/////2AAAAAAAAAAAGj/////VAAAAAAAAACM//8A///EAAAAAAAAACT/////IAAAAAAAAAAAKP////8kAAAAAAAAAMT//wD///gEAAAAAAAAAPD//+AAAAAAAAAAAAAA6P//8AAAAAAAAAAE9P//AP///zAAAAAAAAAAvP//oAAAAAAAAAAAAACo//+8AAAAAAAAADD///8A////bAAAAAAAAACM//9gAAAAAAAAAAAAAGT//4wAAAAAAAAAaP///wD///+kAAAAAAAAAFT//yAAAAAAAAAAAAAAIP//VAAAAAAAAACc////AP///9gAAAAAAAAAJP/gAAAAAAAAAAAAAAAA4P8kAAAAAAAAANT///8A/////xAAAAAAAAAA8KAAAAAAAAAAAAAAAACg8AAAAAAAAAAQ/////wD/////TAAAAAAAAAC8YAAAAAAAAAAAAAAAAGC8AAAAAAAAAET/////AP////+AAAAAAAAAAIwgAAAAAAAAAAAAAAAAIIwAAAAAAAAAfP////8A/////7gAAAAAAAAANAAAAAAAACwwAAAAAAAANAAAAAAAAACw/////wD/////8AAAAAAAAAAAAAAAAAAAdHgAAAAAAAAAAAAAAAAAAOz/////AP//////KAAAAAAAAAAAAAAAAAC4vAAAAAAAAAAAAAAAAAAg//////8A//////9gAAAAAAAAAAAAAAAACPj4CAAAAAAAAAAAAAAAAFj//////wD//////5QAAAAAAAAAAAAAAABE//9IAAAAAAAAAAAAAAAAkP//////AP//////0AAAAAAAAAAAAAAAAIj//4wAAAAAAAAAAAAAAADI//////8A///////8DAAAAAAAAAAAAAAAzP//1AAAAAAAAAAAAAAABPj//////wD///////88AAAAAAAAAAAAABT/////GAAAAAAAAAAAAAA0////////AP///////3QAAAAAAAAAAAAAWP////9gAAAAAAAAAAAAAHD///////8A////////sAAAAAAAAAAAAACg/////6QAAAAAAAAAAAAApP///////wD////////kAAAAAAAAAAAAAOT/////6AAAAAAAAAAAAADc////////AP////////8cAAAAAAAAAAAo////////MAAAAAAAAAAAEP////////8A/////////1QAAAAAAAAAAHD///////94AAAAAAAAAABM/////////wD/////////jAAAAAAAAAAAtP///////7wAAAAAAAAAAID/////////AP/////////EAAAAAAAAAAT0////////+AgAAAAAAAAAuP////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'X' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD///////9UAAAAAAAAAKz///////////+sAAAAAAAAAFD/////////AP///////+QQAAAAAAAAFOT/////////8BwAAAAAAAAM5P////////8A/////////5gAAAAAAAAATP////////9kAAAAAAAAAJD//////////wD//////////0AAAAAAAAAAoP//////wAAAAAAAAAA0/P//////////AP//////////2AgAAAAAAAAQ4P////gkAAAAAAAABMz///////////8A////////////iAAAAAAAAABA////dAAAAAAAAABw/////////////wD////////////8MAAAAAAAAACU/9AEAAAAAAAAHPD/////////////AP/////////////IBAAAAAAAAAzYMAAAAAAAAACs//////////////8A//////////////90AAAAAAAAABAAAAAAAAAATP///////////////wD///////////////QgAAAAAAAAAAAAAAAAAAzg////////////////AP///////////////7wAAAAAAAAAAAAAAAAAjP////////////////8A/////////////////2AAAAAAAAAAAAAAADD8/////////////////wD/////////////////7BQAAAAAAAAAAAAEyP//////////////////AP/////////////////gDAAAAAAAAAAAAAjY//////////////////8A/////////////////0AAAAAAAAAAAAAAADj8/////////////////wD///////////////+UAAAAAAAAAAAAAAAAAJD/////////////////AP//////////////4AwAAAAAAAAAAAAAAAAADOD///////////////8A//////////////9AAAAAAAAAAAAAAAAAAAAAQP///////////////wD/////////////nAAAAAAAAAAAWAAAAAAAAAAAlP//////////////AP///////////+QQAAAAAAAAAGD/YAAAAAAAAAAM4P////////////8A////////////TAAAAAAAAAAs9P/0LAAAAAAAAABM/////////////wD//////////6AAAAAAAAAADNT////UDAAAAAAAAACg////////////AP/////////kEAAAAAAAAACg//////+gAAAAAAAAABDk//////////8A/////////0wAAAAAAAAAYP////////9gAAAAAAAAAEz//////////wD///////+oAAAAAAAAACz0//////////QsAAAAAAAAAKT/////////AP//////7BQAAAAAAAAM1P///////////9QMAAAAAAAAFOz///////8A//////9UAAAAAAAAAKD//////////////6AAAAAAAAAAVP///////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'Y' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP///////1QAAAAAAAAAAGj//////////2gAAAAAAAAAAFT///////8A////////5BAAAAAAAAAAAMT////////EAAAAAAAAAAAQ5P///////wD/////////mAAAAAAAAAAAKPj/////+CgAAAAAAAAAAJj/////////AP//////////PAAAAAAAAAAAgP////+AAAAAAAAAAAA8//////////8A///////////YCAAAAAAAAAAE2P//2AQAAAAAAAAACNj//////////wD///////////+AAAAAAAAAAAA4//84AAAAAAAAAACA////////////AP////////////woAAAAAAAAAACUlAAAAAAAAAAAKPz///////////8A/////////////8gAAAAAAAAAABAQAAAAAAAAAADI/////////////wD//////////////2wAAAAAAAAAAAAAAAAAAAAAbP//////////////AP//////////////8BwAAAAAAAAAAAAAAAAAABzw//////////////8A////////////////tAAAAAAAAAAAAAAAAAAAtP///////////////wD/////////////////VAAAAAAAAAAAAAAAAFT/////////////////AP/////////////////oEAAAAAAAAAAAAAAQ6P////////////////8A//////////////////+cAAAAAAAAAAAAAJz//////////////////wD///////////////////9AAAAAAAAAAABA////////////////////AP///////////////////9gAAAAAAAAAANj///////////////////8A/////////////////////wAAAAAAAAAA/////////////////////wD/////////////////////AAAAAAAAAAD/////////////////////AP////////////////////8AAAAAAAAAAP////////////////////8A/////////////////////wAAAAAAAAAA/////////////////////wD/////////////////////AAAAAAAAAAD/////////////////////AP////////////////////8AAAAAAAAAAP////////////////////8A/////////////////////wAAAAAAAAAA/////////////////////wD/////////////////////AAAAAAAAAAD/////////////////////AP////////////////////8AAAAAAAAAAP////////////////////8A/////////////////////wAAAAAAAAAA/////////////////////wD/////////////////////AAAAAAAAAAD/////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'Z' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAQ//////////////8A/////////////////////////1AAAAAAAAAABLz//////////////wD///////////////////////98AAAAAAAAAACY////////////////AP//////////////////////pAAAAAAAAAAAaP////////////////8A/////////////////////8QIAAAAAAAAAET8/////////////////wD////////////////////gGAAAAAAAAAAo9P//////////////////AP//////////////////9CwAAAAAAAAAFNz///////////////////8A//////////////////xMAAAAAAAAAATA/////////////////////wD/////////////////eAAAAAAAAAAAnP//////////////////////AP///////////////5wAAAAAAAAAAHT///////////////////////8A///////////////ABAAAAAAAAABM/P///////////////////////wD/////////////3BQAAAAAAAAALPT/////////////////////////AP////////////QoAAAAAAAAABjg//////////////////////////8A///////////8SAAAAAAAAAAExP///////////////////////////wD//////////2wAAAAAAAAAAKD/////////////////////////////AP////////+YAAAAAAAAAAB8//////////////////////////////8A/////////wQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),		);	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_profile_info{	function module()	{		return array(			'filename'	=> 'acp_profile',			'title'		=> 'ACP_CUSTOM_PROFILE_FIELDS',			'version'	=> '1.0.0',			'modes'		=> array(				'profile'	=> array('title' => 'ACP_CUSTOM_PROFILE_FIELDS', 'auth' => 'acl_a_profile', 'cat' => array('ACP_CAT_USERS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'20',''=>'30',''=>'40',''=>'50',''=>'60',''=>'70',''=>'80',''=>'90',''=>'100',''=>'10000',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'17',''=>'18',''=>'19',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9');
<?php/**** @package install* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/if (!defined('IN_INSTALL')){	// Someone has tried to access the file direct. This is not a good idea, so exit	exit;}if (!empty($setmodules)){	$module[] = array(		'module_type'		=> 'install',		'module_title'		=> 'CONVERT',		'module_filename'	=> substr(basename(__FILE__), 0, -strlen($phpEx)-1),		'module_order'		=> 20,		'module_subs'		=> '',		'module_stages'		=> array('INTRO', 'SETTINGS', 'IN_PROGRESS', 'FINAL'),		'module_reqs'		=> ''	);}/*** Class holding all convertor-specific details.* @package install*/class convert{	var $options = array();	var $convertor_tag = '';	var $src_dbms = '';	var $src_dbhost = '';	var $src_dbport = '';	var $src_dbuser = '';	var $src_dbpasswd = '';	var $src_dbname = '';	var $src_table_prefix = '';	var $convertor_data = array();	var $tables = array();	var $config_schema = array();	var $convertor = array();	var $src_truncate_statement = 'DELETE FROM ';	var $truncate_statement = 'DELETE FROM ';	var $fulltext_search;	// Batch size, can be adjusted by the conversion file	// For big boards a value of 6000 seems to be optimal	var $batch_size = 2000;	// Number of rows to be inserted at once (extended insert) if supported	// For installations having enough memory a value of 60 may be good.	var $num_wait_rows = 20;	// Mysqls internal recoding engine messing up with our (better) functions? We at least support more encodings than mysql so should use it in favor.	var $mysql_convert = false;	var $p_master;	function convert(&$p_master)	{		$this->p_master = &$p_master;	}}/*** Convert class for conversions* @package install*/class install_convert extends module{	/**	* Variables used while converting, they are accessible from the global variable $convert	*/	function install_convert(&$p_master)	{		$this->p_master = &$p_master;	}	function main($mode, $sub)	{		global $lang, $template, $phpbb_root_path, $phpEx, $cache, $config, $language, $table_prefix;		global $convert;		$this->tpl_name = 'install_convert';		$this->mode = $mode;		$convert = new convert($this->p_master);		switch ($sub)		{			case 'intro':				// Try opening config file				// @todo If phpBB is not installed, we need to do a cut-down installation here				// For now, we redirect to the installation script instead				if (@file_exists($phpbb_root_path . 'config.' . $phpEx))				{					include($phpbb_root_path . 'config.' . $phpEx);				}				if (!defined('PHPBB_INSTALLED'))				{					$template->assign_vars(array(						'S_NOT_INSTALLED'		=> true,						'TITLE'					=> $lang['BOARD_NOT_INSTALLED'],						'BODY'					=> sprintf($lang['BOARD_NOT_INSTALLED_EXPLAIN'], append_sid($phpbb_root_path . 'install/index.' . $phpEx, 'mode=install&amp;language=' . $language)),					));					return;				}				require($phpbb_root_path . 'config.' . $phpEx);				require($phpbb_root_path . 'includes/constants.' . $phpEx);				require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);				require($phpbb_root_path . 'includes/functions_convert.' . $phpEx);				$db = new $sql_db();				$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, true);				unset($dbpasswd);				// We need to fill the config to let internal functions correctly work				$sql = 'SELECT *					FROM ' . CONFIG_TABLE;				$result = $db->sql_query($sql);				$config = array();				while ($row = $db->sql_fetchrow($result))				{					$config[$row['config_name']] = $row['config_value'];				}				$db->sql_freeresult($result);				// Detect if there is already a conversion in progress at this point and offer to resume				// It's quite possible that the user will get disconnected during a large conversion so they need to be able to resume it				$new_conversion = request_var('new_conv', 0);				if ($new_conversion)				{					$config['convert_progress'] = '';					$config['convert_db_server'] = '';					$config['convert_db_user'] = '';					$db->sql_query('DELETE FROM ' . CONFIG_TABLE . "						WHERE config_name = 'convert_progress'							OR config_name = 'convert_db_server'							OR config_name = 'convert_db_user'"					);				}				// Let's see if there is a conversion in the works...				$options = array();				if (!empty($config['convert_progress']) && !empty($config['convert_db_server']) && !empty($config['convert_db_user']) && !empty($config['convert_options']))				{					$options = unserialize($config['convert_progress']);					$options = array_merge($options, unserialize($config['convert_db_server']), unserialize($config['convert_db_user']), unserialize($config['convert_options']));				}				// This information should have already been checked once, but do it again for safety				if (!empty($options) && !empty($options['tag']) &&					isset($options['dbms']) &&					isset($options['dbhost']) &&					isset($options['dbport']) &&					isset($options['dbuser']) &&					isset($options['dbpasswd']) &&					isset($options['dbname']) &&					isset($options['table_prefix']))				{					$this->page_title = $lang['CONTINUE_CONVERT'];					$template->assign_vars(array(						'TITLE'			=> $lang['CONTINUE_CONVERT'],						'BODY'			=> $lang['CONTINUE_CONVERT_BODY'],						'L_NEW'			=> $lang['CONVERT_NEW_CONVERSION'],						'L_CONTINUE'	=> $lang['CONTINUE_OLD_CONVERSION'],						'S_CONTINUE'	=> true,						'U_NEW_ACTION'		=> $this->p_master->module_url . "?mode={$this->mode}&amp;sub=intro&amp;new_conv=1&amp;language=$language",						'U_CONTINUE_ACTION'	=> $this->p_master->module_url . "?mode={$this->mode}&amp;sub=in_progress&amp;tag={$options['tag']}{$options['step']}&amp;language=$language",					));					return;				}				$this->list_convertors($sub);			break;			case 'settings':				$this->get_convert_settings($sub);			break;			case 'in_progress':				$this->convert_data($sub);			break;			case 'final':				$this->page_title = $lang['CONVERT_COMPLETE'];				$template->assign_vars(array(					'TITLE'		=> $lang['CONVERT_COMPLETE'],					'BODY'		=> $lang['CONVERT_COMPLETE_EXPLAIN'],				));				// If we reached this step (conversion completed) we want to purge the cache and log the user out.				// This is for making sure the session get not screwed due to the 3.0.x users table being completely new.				$cache->purge();				require($phpbb_root_path . 'config.' . $phpEx);				require($phpbb_root_path . 'includes/constants.' . $phpEx);				require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);				require($phpbb_root_path . 'includes/functions_convert.' . $phpEx);				$db = new $sql_db();				$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, true);				unset($dbpasswd);				$sql = 'SELECT config_value					FROM ' . CONFIG_TABLE . '					WHERE config_name = \'search_type\'';				$result = $db->sql_query($sql);				if ($db->sql_fetchfield('config_value') != 'fulltext_mysql')				{					$template->assign_vars(array(						'S_ERROR_BOX'	=> true,						'ERROR_TITLE'	=> $lang['SEARCH_INDEX_UNCONVERTED'],						'ERROR_MSG'		=> $lang['SEARCH_INDEX_UNCONVERTED_EXPLAIN'],					));				}				switch ($db->sql_layer)				{					case 'sqlite':					case 'firebird':						$db->sql_query('DELETE FROM ' . SESSIONS_KEYS_TABLE);						$db->sql_query('DELETE FROM ' . SESSIONS_TABLE);					break;					default:						$db->sql_query('TRUNCATE TABLE ' . SESSIONS_KEYS_TABLE);						$db->sql_query('TRUNCATE TABLE ' . SESSIONS_TABLE);					break;				}			break;		}	}	/**	* Generate a list of all available conversion modules	*/	function list_convertors($sub)	{		global $lang, $language, $template, $phpbb_root_path, $phpEx;		$this->page_title = $lang['SUB_INTRO'];		$template->assign_vars(array(			'TITLE'		=> $lang['CONVERT_INTRO'],			'BODY'		=> $lang['CONVERT_INTRO_BODY'],			'L_AUTHOR'					=> $lang['AUTHOR'],			'L_AVAILABLE_CONVERTORS'	=> $lang['AVAILABLE_CONVERTORS'],			'L_CONVERT'					=> $lang['CONVERT'],			'L_NO_CONVERTORS'			=> $lang['NO_CONVERTORS'],			'L_OPTIONS'					=> $lang['CONVERT_OPTIONS'],			'L_SOFTWARE'				=> $lang['SOFTWARE'],			'L_VERSION'					=> $lang['VERSION'],			'S_LIST'	=> true,		));		$convertors = $sort = array();		$get_info = true;		$handle = @opendir('./convertors/');		if (!$handle)		{			$this->error('Unable to access the convertors directory', __LINE__, __FILE__);		}		while ($entry = readdir($handle))		{			if (preg_match('/^convert_([a-z0-9_]+).' . $phpEx . '$/i', $entry, $m))			{				include('./convertors/' . $entry);				if (isset($convertor_data))				{					$sort[strtolower($convertor_data['forum_name'])] = sizeof($convertors);					$convertors[] = array(						'tag'			=>	$m[1],						'forum_name'	=>	$convertor_data['forum_name'],						'version'		=>	$convertor_data['version'],						'dbms'			=>	$convertor_data['dbms'],						'dbhost'		=>	$convertor_data['dbhost'],						'dbport'		=>	$convertor_data['dbport'],						'dbuser'		=>	$convertor_data['dbuser'],						'dbpasswd'		=>	$convertor_data['dbpasswd'],						'dbname'		=>	$convertor_data['dbname'],						'table_prefix'	=>	$convertor_data['table_prefix'],						'author'		=>	$convertor_data['author']					);				}				unset($convertor_data);			}		}		closedir($handle);		@ksort($sort);		foreach ($sort as $void => $index)		{			$template->assign_block_vars('convertors', array(				'AUTHOR'	=> $convertors[$index]['author'],				'SOFTWARE'	=> $convertors[$index]['forum_name'],				'VERSION'	=> $convertors[$index]['version'],				'U_CONVERT'	=> $this->p_master->module_url . "?mode={$this->mode}&amp;language=$language&amp;sub=settings&amp;tag=" . $convertors[$index]['tag'],			));		}	}	/**	*/	function get_convert_settings($sub)	{		global $lang, $language, $template, $db, $phpbb_root_path, $phpEx, $config, $cache;		require($phpbb_root_path . 'config.' . $phpEx);		require($phpbb_root_path . 'includes/constants.' . $phpEx);		require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);		require($phpbb_root_path . 'includes/functions_convert.' . $phpEx);		$db = new $sql_db();		$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, true);		unset($dbpasswd);		$this->page_title = $lang['STAGE_SETTINGS'];		// We need to fill the config to let internal functions correctly work		$sql = 'SELECT *			FROM ' . CONFIG_TABLE;		$result = $db->sql_query($sql);		$config = array();		while ($row = $db->sql_fetchrow($result))		{			$config[$row['config_name']] = $row['config_value'];		}		$db->sql_freeresult($result);		$convertor_tag = request_var('tag', '');		if (empty($convertor_tag))		{			$this->p_master->error($lang['NO_CONVERT_SPECIFIED'], __LINE__, __FILE__);		}		$get_info = true;		// check security implications of direct inclusion		$convertor_tag = basename($convertor_tag);		if (!file_exists('./convertors/convert_' . $convertor_tag . '.' . $phpEx))		{			$this->p_master->error($lang['CONVERT_NOT_EXIST'], __LINE__, __FILE__);		}		include('./convertors/convert_' . $convertor_tag . '.' . $phpEx);		// The test_file is a file that should be present in the location of the old board.		if (!isset($test_file))		{			$this->p_master->error($lang['DEV_NO_TEST_FILE'], __LINE__, __FILE__);		}		$submit = (isset($_POST['submit'])) ? true : false;		$src_dbms			= request_var('src_dbms', $convertor_data['dbms']);		$src_dbhost			= request_var('src_dbhost', $convertor_data['dbhost']);		$src_dbport			= request_var('src_dbport', $convertor_data['dbport']);		$src_dbuser			= request_var('src_dbuser', $convertor_data['dbuser']);		$src_dbpasswd		= request_var('src_dbpasswd', $convertor_data['dbpasswd']);		$src_dbname			= request_var('src_dbname', $convertor_data['dbname']);		$src_table_prefix	= request_var('src_table_prefix', $convertor_data['table_prefix']);		$forum_path			= request_var('forum_path', $convertor_data['forum_path']);		$refresh			= request_var('refresh', 1);		// Default URL of the old board		// @todo Are we going to use this for attempting to convert URL references in posts, or should we remove it?		//		-> We should convert old urls to the new relative urls format		// $src_url = request_var('src_url', 'Not in use at the moment');		// strip trailing slash from old forum path		$forum_path = (strlen($forum_path) && $forum_path[strlen($forum_path) - 1] == '/') ? substr($forum_path, 0, -1) : $forum_path;		$error = array();		if ($submit)		{			if (!@file_exists('./../' . $forum_path . '/' . $test_file))			{				$error[] = sprintf($lang['COULD_NOT_FIND_PATH'], $forum_path);			}			$connect_test = false;			$available_dbms = get_available_dbms(false, true, true);			if (!isset($available_dbms[$src_dbms]) || !$available_dbms[$src_dbms]['AVAILABLE'])			{				$error['db'][] = $lang['INST_ERR_NO_DB'];				$connect_test = false;			}			else			{				$connect_test = connect_check_db(true, $error, $available_dbms[$src_dbms], $src_table_prefix, $src_dbhost, $src_dbuser, htmlspecialchars_decode($src_dbpasswd), $src_dbname, $src_dbport, true, ($src_dbms == $dbms) ? false : true, false);			}			// The forum prefix of the old and the new forum can only be the same if two different databases are used.			if ($src_table_prefix == $table_prefix && $src_dbms == $dbms && $src_dbhost == $dbhost && $src_dbport == $dbport && $src_dbname == $dbname)			{				$error[] = sprintf($lang['TABLE_PREFIX_SAME'], $src_table_prefix);			}			// Check table prefix			if (!sizeof($error))			{				// initiate database connection to old db if old and new db differ				global $src_db, $same_db;				$src_db = $same_db = false;				if ($src_dbms != $dbms || $src_dbhost != $dbhost || $src_dbport != $dbport || $src_dbname != $dbname || $src_dbuser != $dbuser)				{					$sql_db = 'dbal_' . $src_dbms;					$src_db = new $sql_db();					$src_db->sql_connect($src_dbhost, $src_dbuser, htmlspecialchars_decode($src_dbpasswd), $src_dbname, $src_dbport, false, true);					$same_db = false;				}				else				{					$src_db = $db;					$same_db = true;				}				$src_db->sql_return_on_error(true);				$db->sql_return_on_error(true);				// Try to select one row from the first table to see if the prefix is OK				$result = $src_db->sql_query_limit('SELECT * FROM ' . $src_table_prefix . $tables[0], 1);				if (!$result)				{					$prefixes = array();					$tables_existing = get_tables($src_db);					$tables_existing = array_map('strtolower', $tables_existing);					foreach ($tables_existing as $table_name)					{						compare_table($tables, $table_name, $prefixes);					}					unset($tables_existing);					foreach ($prefixes as $prefix => $count)					{						if ($count >= sizeof($tables))						{							$possible_prefix = $prefix;							break;						}					}					$msg = '';					if (!empty($convertor_data['table_prefix']))					{						$msg .= sprintf($lang['DEFAULT_PREFIX_IS'], $convertor_data['forum_name'], $convertor_data['table_prefix']);					}					if (!empty($possible_prefix))					{						$msg .= '<br />';						$msg .= ($possible_prefix == '*') ? $lang['BLANK_PREFIX_FOUND'] : sprintf($lang['PREFIX_FOUND'], $possible_prefix);						$src_table_prefix = ($possible_prefix == '*') ? '' : $possible_prefix;					}					$error[] = $msg;				}				$src_db->sql_freeresult($result);				$src_db->sql_return_on_error(false);			}			if (!sizeof($error))			{				// Save convertor Status				set_config('convert_progress', serialize(array(					'step'			=> '',					'table_prefix'	=> $src_table_prefix,					'tag'			=> $convertor_tag,				)), true);				set_config('convert_db_server', serialize(array(					'dbms'			=> $src_dbms,					'dbhost'		=> $src_dbhost,					'dbport'		=> $src_dbport,					'dbname'		=> $src_dbname,				)), true);				set_config('convert_db_user', serialize(array(					'dbuser'		=> $src_dbuser,					'dbpasswd'		=> $src_dbpasswd,				)), true);				// Save options				set_config('convert_options', serialize(array('forum_path' => './../' . $forum_path, 'refresh' => $refresh)), true);				$template->assign_block_vars('checks', array(					'TITLE'		=> $lang['VERIFY_OPTIONS'],					'RESULT'	=> $lang['CONVERT_SETTINGS_VERIFIED'],				));				$template->assign_vars(array(					'L_SUBMIT'	=> $lang['BEGIN_CONVERT'],//					'S_HIDDEN'	=> $s_hidden_fields,					'U_ACTION'	=> $this->p_master->module_url . "?mode={$this->mode}&amp;sub=in_progress&amp;tag=$convertor_tag&amp;language=$language",				));				return;			}			else			{				$template->assign_block_vars('checks', array(					'TITLE'		=> $lang['VERIFY_OPTIONS'],					'RESULT'	=> '<b style="color:red">' . implode('<br />', $error) . '</b>',				));			}		} // end submit		foreach ($this->convert_options as $config_key => $vars)		{			if (!is_array($vars) && strpos($config_key, 'legend') === false)			{				continue;			}			if (strpos($config_key, 'legend') !== false)			{				$template->assign_block_vars('options', array(					'S_LEGEND'		=> true,					'LEGEND'		=> $lang[$vars])				);				continue;			}			$options = isset($vars['options']) ? $vars['options'] : '';			$template->assign_block_vars('options', array(				'KEY'			=> $config_key,				'TITLE'			=> $lang[$vars['lang']],				'S_EXPLAIN'		=> $vars['explain'],				'S_LEGEND'		=> false,				'TITLE_EXPLAIN'	=> ($vars['explain']) ? $lang[$vars['lang'] . '_EXPLAIN'] : '',				'CONTENT'		=> $this->p_master->input_field($config_key, $vars['type'], $$config_key, $options),				)			);		}		$template->assign_vars(array(			'TITLE'		=> $lang['STAGE_SETTINGS'],			'BODY'		=> $lang['CONV_OPTIONS_BODY'],			'L_SUBMIT'	=> $lang['BEGIN_CONVERT'],			'U_ACTION'	=> $this->p_master->module_url . "?mode={$this->mode}&amp;sub=settings&amp;tag=$convertor_tag&amp;language=$language",		));	}	/**	* The function which does the actual work (or dispatches it to the relevant places)	*/	function convert_data($sub)	{		global $template, $user, $phpbb_root_path, $phpEx, $db, $lang, $config, $cache;		global $convert, $convert_row, $message_parser, $skip_rows, $language;		require($phpbb_root_path . 'config.' . $phpEx);		require($phpbb_root_path . 'includes/constants.' . $phpEx);		require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);		require($phpbb_root_path . 'includes/functions_convert.' . $phpEx);		$db = new $sql_db();		$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, true);		unset($dbpasswd);		$sql = 'SELECT *			FROM ' . CONFIG_TABLE;		$result = $db->sql_query($sql);		$config = array();		while ($row = $db->sql_fetchrow($result))		{			$config[$row['config_name']] = $row['config_value'];		}		$db->sql_freeresult($result);		// Override a couple of config variables for the duration		$config['max_quote_depth'] = 0;		// @todo Need to confirm that max post length in source is <= max post length in destination or there may be interesting formatting issues		$config['max_post_chars'] = $config['min_post_chars'] = 0;		// Set up a user as well. We _should_ have enough of a database here at this point to do this		// and it helps for any core code we call		$user->session_begin();		$user->page = $user->extract_current_page($phpbb_root_path);		// This is a little bit of a fudge, but it allows the language entries to be available to the		// core code without us loading them again		$user->lang = &$lang;		$this->page_title = $user->lang['STAGE_IN_PROGRESS'];		$convert->options = array();		if (isset($config['convert_progress']))		{			$convert->options = unserialize($config['convert_progress']);			$convert->options = array_merge($convert->options, unserialize($config['convert_db_server']), unserialize($config['convert_db_user']), unserialize($config['convert_options']));		}		// This information should have already been checked once, but do it again for safety		if (empty($convert->options) || empty($convert->options['tag']) ||			!isset($convert->options['dbms']) ||			!isset($convert->options['dbhost']) ||			!isset($convert->options['dbport']) ||			!isset($convert->options['dbuser']) ||			!isset($convert->options['dbpasswd']) ||			!isset($convert->options['dbname']) ||			!isset($convert->options['table_prefix']))		{			$this->p_master->error($user->lang['NO_CONVERT_SPECIFIED'], __LINE__, __FILE__);		}		// Make some short variables accessible, for easier referencing		$convert->convertor_tag = basename($convert->options['tag']);		$convert->src_dbms = $convert->options['dbms'];		$convert->src_dbhost = $convert->options['dbhost'];		$convert->src_dbport = $convert->options['dbport'];		$convert->src_dbuser = $convert->options['dbuser'];		$convert->src_dbpasswd = $convert->options['dbpasswd'];		$convert->src_dbname = $convert->options['dbname'];		$convert->src_table_prefix = $convert->options['table_prefix'];		// initiate database connection to old db if old and new db differ		global $src_db, $same_db;		$src_db = $same_db = null;		if ($convert->src_dbms != $dbms || $convert->src_dbhost != $dbhost || $convert->src_dbport != $dbport || $convert->src_dbname != $dbname || $convert->src_dbuser != $dbuser)		{			if ($convert->src_dbms != $dbms)			{				require($phpbb_root_path . 'includes/db/' . $convert->src_dbms . '.' . $phpEx);			}			$sql_db = 'dbal_' . $convert->src_dbms;			$src_db = new $sql_db();			$src_db->sql_connect($convert->src_dbhost, $convert->src_dbuser, htmlspecialchars_decode($convert->src_dbpasswd), $convert->src_dbname, $convert->src_dbport, false, true);			$same_db = false;		}		else		{			$src_db = $db;			$same_db = true;		}		$convert->mysql_convert = false;		switch ($src_db->sql_layer)		{			case 'sqlite':			case 'firebird':				$convert->src_truncate_statement = 'DELETE FROM ';			break;			// Thanks MySQL, for silently converting...			case 'mysql':			case 'mysql4':				if (version_compare($src_db->sql_server_info(true, false), '4.1.3', '>='))				{					$convert->mysql_convert = true;				}				$convert->src_truncate_statement = 'TRUNCATE TABLE ';			break;			case 'mysqli':				$convert->mysql_convert = true;				$convert->src_truncate_statement = 'TRUNCATE TABLE ';			break;			default:				$convert->src_truncate_statement = 'TRUNCATE TABLE ';			break;		}		if ($convert->mysql_convert && !$same_db)		{			$src_db->sql_query("SET NAMES 'binary'");		}		switch ($db->sql_layer)		{			case 'sqlite':			case 'firebird':				$convert->truncate_statement = 'DELETE FROM ';			break;			default:				$convert->truncate_statement = 'TRUNCATE TABLE ';			break;		}		$get_info = false;		// check security implications of direct inclusion		if (!file_exists('./convertors/convert_' . $convert->convertor_tag . '.' . $phpEx))		{			$this->p_master->error($user->lang['CONVERT_NOT_EXIST'], __LINE__, __FILE__);		}		if (file_exists('./convertors/functions_' . $convert->convertor_tag . '.' . $phpEx))		{			include('./convertors/functions_' . $convert->convertor_tag . '.' . $phpEx);		}		$get_info = true;		include('./convertors/convert_' . $convert->convertor_tag . '.' . $phpEx);		// Map some variables...		$convert->convertor_data = $convertor_data;		$convert->tables = $tables;		$convert->config_schema = $config_schema;		// Now include the real data		$get_info = false;		include('./convertors/convert_' . $convert->convertor_tag . '.' . $phpEx);		$convert->convertor_data = $convertor_data;		$convert->tables = $tables;		$convert->config_schema = $config_schema;		$convert->convertor = $convertor;		// The test_file is a file that should be present in the location of the old board.		if (!file_exists($convert->options['forum_path'] . '/' . $test_file))		{			$this->p_master->error(sprintf($user->lang['COULD_NOT_FIND_PATH'], $convert->options['forum_path']), __LINE__, __FILE__);		}		$search_type = basename(trim($config['search_type']));		// For conversions we are a bit less strict and set to a search backend we know exist...		if (!file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx))		{			$search_type = 'fulltext_native';			set_config('search_type', $search_type);		}		if (!file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx))		{			trigger_error('NO_SUCH_SEARCH_MODULE');		}		require($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx);		$error = false;		$convert->fulltext_search = new $search_type($error);		if ($error)		{			trigger_error($error);		}		include($phpbb_root_path . 'includes/message_parser.' . $phpEx);		$message_parser = new parse_message();		$jump = request_var('jump', 0);		$final_jump = request_var('final_jump', 0);		$sync_batch = request_var('sync_batch', -1);		$last_statement = request_var('last', 0);		// We are running sync...		if ($sync_batch >= 0)		{			$this->sync_forums($sync_batch);			return;		}		if ($jump)		{			$this->jump($jump, $last_statement);			return;		}		if ($final_jump)		{			$this->final_jump($final_jump);			return;		}		$current_table = request_var('current_table', 0);		$old_current_table = min(-1, $current_table - 1);		$skip_rows = request_var('skip_rows', 0);		if (!$current_table && !$skip_rows)		{			if (empty($_REQUEST['confirm']))			{				// If avatars / ranks / smilies folders are specified make sure they are writable				$bad_folders = array();				$local_paths = array(					'avatar_path'			=> path($config['avatar_path']),					'avatar_gallery_path'	=> path($config['avatar_gallery_path']),					'icons_path'			=> path($config['icons_path']),					'ranks_path'			=> path($config['ranks_path']),					'smilies_path'			=> path($config['smilies_path'])				);				foreach ($local_paths as $folder => $local_path)				{					if (isset($convert->convertor[$folder]))					{						if (empty($convert->convertor['test_file']))						{							// test_file is mandantory at the moment so this should never be reached, but just in case...							$this->p_master->error($user->lang['DEV_NO_TEST_FILE'], __LINE__, __FILE__);						}						if (!$local_path || !phpbb_is_writable($phpbb_root_path . $local_path))						{							if (!$local_path)							{								$bad_folders[] = sprintf($user->lang['CONFIG_PHPBB_EMPTY'], $folder);							}							else							{								$bad_folders[] = $local_path;							}						}					}				}				if (sizeof($bad_folders))				{					$msg = (sizeof($bad_folders) == 1) ? $user->lang['MAKE_FOLDER_WRITABLE'] : $user->lang['MAKE_FOLDERS_WRITABLE'];					sort($bad_folders);					$this->p_master->error(sprintf($msg, implode('<br />', $bad_folders)), __LINE__, __FILE__, true);					$template->assign_vars(array(						'L_SUBMIT'	=> $user->lang['INSTALL_TEST'],						'U_ACTION'	=> $this->p_master->module_url . "?mode={$this->mode}&amp;sub=in_progress&amp;tag={$convert->convertor_tag}&amp;language=$language",					));					return;				}				// Grab all the tables used in convertor				$missing_tables = $tables_list = $aliases = array();				foreach ($convert->convertor['schema'] as $schema)				{					// Skip those not used (because of addons/plugins not detected)					if (!$schema['target'])					{						continue;					}					foreach ($schema as $key => $val)					{						// we're dealing with an array like:						// array('forum_status',			'forums.forum_status',				'is_item_locked')						if (is_int($key) && !empty($val[1]))						{							$temp_data = $val[1];							if (!is_array($temp_data))							{								$temp_data = array($temp_data);							}							foreach ($temp_data as $val)							{								if (preg_match('/([a-z0-9_]+)\.([a-z0-9_]+)\)* ?A?S? ?([a-z0-9_]*?)\.?([a-z0-9_]*)$/i', $val, $m))								{									$table = $convert->src_table_prefix . $m[1];									$tables_list[$table] = $table;									if (!empty($m[3]))									{										$aliases[] = $convert->src_table_prefix . $m[3];									}								}							}						}						// 'left_join'		=> 'topics LEFT JOIN vote_desc ON topics.topic_id = vote_desc.topic_id AND topics.topic_vote = 1'						else if ($key == 'left_join')						{							// Convert the value if it wasn't an array already.							if (!is_array($val))							{								$val = array($val);							}							for ($j = 0; $j < sizeof($val); ++$j)							{								if (preg_match('/LEFT JOIN ([a-z0-9_]+) AS ([a-z0-9_]+)/i', $val[$j], $m))								{									$table = $convert->src_table_prefix . $m[1];									$tables_list[$table] = $table;									if (!empty($m[2]))									{										$aliases[] = $convert->src_table_prefix . $m[2];									}								}							}						}					}				}				// Remove aliased tables from $tables_list				foreach ($aliases as $alias)				{					unset($tables_list[$alias]);				}				// Check if the tables that we need exist				$src_db->sql_return_on_error(true);				foreach ($tables_list as $table => $null)				{					$sql = 'SELECT 1 FROM ' . $table;					$_result = $src_db->sql_query_limit($sql, 1);					if (!$_result)					{						$missing_tables[] = $table;					}					$src_db->sql_freeresult($_result);				}				$src_db->sql_return_on_error(false);				// Throw an error if some tables are missing				// We used to do some guessing here, but since we have a suggestion of possible values earlier, I don't see it adding anything here to do it again				if (sizeof($missing_tables) == sizeof($tables_list))				{					$this->p_master->error($user->lang['NO_TABLES_FOUND'] . ' ' . $user->lang['CHECK_TABLE_PREFIX'], __LINE__, __FILE__);				}				else if (sizeof($missing_tables))				{					$this->p_master->error(sprintf($user->lang['TABLES_MISSING'], implode(', ', $missing_tables)) . '<br /><br />' . $user->lang['CHECK_TABLE_PREFIX'], __LINE__, __FILE__);				}				$url = $this->save_convert_progress('&amp;confirm=1');				$msg = $user->lang['PRE_CONVERT_COMPLETE'];				if ($convert->convertor_data['author_notes'])				{					$msg .= '</p><p>' . sprintf($user->lang['AUTHOR_NOTES'], $convert->convertor_data['author_notes']);				}				$template->assign_vars(array(					'L_SUBMIT'		=> $user->lang['CONTINUE_CONVERT'],					'L_MESSAGE'		=> $msg,					'U_ACTION'		=> $url,				));				return;			} // if (empty($_REQUEST['confirm']))			$template->assign_block_vars('checks', array(				'S_LEGEND'		=> true,				'LEGEND'		=> $user->lang['STARTING_CONVERT'],			));			// Convert the config table and load the settings of the old board			if (!empty($convert->config_schema))			{				restore_config($convert->config_schema);				// Override a couple of config variables for the duration				$config['max_quote_depth'] = 0;				// @todo Need to confirm that max post length in source is <= max post length in destination or there may be interesting formatting issues				$config['max_post_chars'] = $config['min_post_chars'] = 0;			}			$template->assign_block_vars('checks', array(				'TITLE'		=> $user->lang['CONFIG_CONVERT'],				'RESULT'	=> $user->lang['DONE'],			));			// Now process queries and execute functions that have to be executed prior to the conversion			if (!empty($convert->convertor['execute_first']))			{				eval($convert->convertor['execute_first']);			}			if (!empty($convert->convertor['query_first']))			{				if (!is_array($convert->convertor['query_first']))				{					$convert->convertor['query_first'] = array('target', array($convert->convertor['query_first']));				}				else if (!is_array($convert->convertor['query_first'][0]))				{					$convert->convertor['query_first'] = array(array($convert->convertor['query_first'][0], $convert->convertor['query_first'][1]));				}				foreach ($convert->convertor['query_first'] as $query_first)				{					if ($query_first[0] == 'src')					{						if ($convert->mysql_convert && $same_db)						{							$src_db->sql_query("SET NAMES 'binary'");						}						$src_db->sql_query($query_first[1]);						if ($convert->mysql_convert && $same_db)						{							$src_db->sql_query("SET NAMES 'utf8'");						}					}					else					{						$db->sql_query($query_first[1]);					}				}			}			$template->assign_block_vars('checks', array(				'TITLE'		=> $user->lang['PREPROCESS_STEP'],				'RESULT'	=> $user->lang['DONE'],			));		} // if (!$current_table && !$skip_rows)		$template->assign_block_vars('checks', array(			'S_LEGEND'		=> true,			'LEGEND'		=> $user->lang['FILLING_TABLES'],		));		// This loop takes one target table and processes it		while ($current_table < sizeof($convert->convertor['schema']))		{			$schema = $convert->convertor['schema'][$current_table];			// The target table isn't set, this can be because a module (for example the attachement mod) is taking care of this.			if (empty($schema['target']))			{				$current_table++;				continue;			}			$template->assign_block_vars('checks', array(				'TITLE'	=> sprintf($user->lang['FILLING_TABLE'], $schema['target']),			));			// This is only the case when we first start working on the tables.			if (!$skip_rows)			{				// process execute_first and query_first for this table...				if (!empty($schema['execute_first']))				{					eval($schema['execute_first']);				}				if (!empty($schema['query_first']))				{					if (!is_array($schema['query_first']))					{						$schema['query_first'] = array('target', array($schema['query_first']));					}					else if (!is_array($schema['query_first'][0]))					{						$schema['query_first'] = array(array($schema['query_first'][0], $schema['query_first'][1]));					}					foreach ($schema['query_first'] as $query_first)					{						if ($query_first[0] == 'src')						{							if ($convert->mysql_convert && $same_db)							{								$src_db->sql_query("SET NAMES 'binary'");							}							$src_db->sql_query($query_first[1]);							if ($convert->mysql_convert && $same_db)							{								$src_db->sql_query("SET NAMES 'utf8'");							}						}						else						{							$db->sql_query($query_first[1]);						}					}				}				if (!empty($schema['autoincrement']))				{					switch ($db->sql_layer)					{						case 'postgres':							$db->sql_query("SELECT SETVAL('" . $schema['target'] . "_seq',(select case when max(" . $schema['autoincrement'] . ")>0 then max(" . $schema['autoincrement'] . ")+1 else 1 end from " . $schema['target'] . '));');						break;						case 'oracle':							$result = $db->sql_query('SELECT MAX(' . $schema['autoincrement'] . ') as max_id FROM ' . $schema['target']);							$row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							$largest_id = (int) $row['max_id'];							if ($largest_id)							{								$db->sql_query('DROP SEQUENCE ' . $schema['target'] . '_seq');								$db->sql_query('CREATE SEQUENCE ' . $schema['target'] . '_seq START WITH ' . ($largest_id + 1));							}						break;					}				}			}			// Process execute_always for this table			// This is for code which needs to be executed on every pass of this table if			// it gets split because of time restrictions			if (!empty($schema['execute_always']))			{				eval($schema['execute_always']);			}			//			// Set up some variables			//			// $waiting_rows	holds rows for multirows insertion (MySQL only)			// $src_tables		holds unique tables with aliases to select from			// $src_fields		will quickly refer source fields (or aliases) corresponding to the current index			// $select_fields	holds the names of the fields to retrieve			//			$sql_data = array(				'source_fields'		=> array(),				'target_fields'		=> array(),				'source_tables'		=> array(),				'select_fields'		=> array(),			);			// This statement is building the keys for later insertion.			$insert_query = $this->build_insert_query($schema, $sql_data, $current_table);			// If no source table is affected, we skip the table			if (empty($sql_data['source_tables']))			{				$skip_rows = 0;				$current_table++;				continue;			}			$distinct = (!empty($schema['distinct'])) ? 'DISTINCT ' : '';			$sql = 'SELECT ' . $distinct . implode(', ', $sql_data['select_fields']) . " \nFROM " . implode(', ', $sql_data['source_tables']);			// Where			$sql .= (!empty($schema['where'])) ? "\nWHERE (" . $schema['where'] . ')' : '';			// Group By			if (!empty($schema['group_by']))			{				$schema['group_by'] = array($schema['group_by']);				foreach ($sql_data['select_fields'] as $select)				{					$alias = strpos(strtolower($select), ' as ');					$select = ($alias) ? substr($select, 0, $alias) : $select;					if (!in_array($select, $schema['group_by']))					{						$schema['group_by'][] = $select;					}				}			}			$sql .= (!empty($schema['group_by'])) ? "\nGROUP BY " . implode(', ', $schema['group_by']) : '';			// Having			$sql .= (!empty($schema['having'])) ? "\nHAVING " . $schema['having'] : '';			// Order By			if (empty($schema['order_by']) && !empty($schema['primary']))			{				$schema['order_by'] = $schema['primary'];			}			$sql .= (!empty($schema['order_by'])) ? "\nORDER BY " . $schema['order_by'] : '';			// Counting basically holds the amount of rows processed.			$counting = -1;			$batch_time = 0;			while ($counting === -1 || ($counting >= $convert->batch_size && still_on_time()))			{				$old_current_table = $current_table;				$rows = '';				$waiting_rows = array();				if (!empty($batch_time))				{					$mtime = explode(' ', microtime());					$mtime = $mtime[0] + $mtime[1];					$rows = ceil($counting/($mtime - $batch_time)) . " rows/s ($counting rows) | ";				}				$template->assign_block_vars('checks', array(					'TITLE'		=> "skip_rows = $skip_rows",					'RESULT'	=> $rows . ((defined('DEBUG_EXTRA') && function_exists('memory_get_usage')) ? ceil(memory_get_usage()/1024) . ' ' . $user->lang['KIB'] : ''),				));				$mtime = explode(' ', microtime());				$batch_time = $mtime[0] + $mtime[1];				if ($convert->mysql_convert && $same_db)				{					$src_db->sql_query("SET NAMES 'binary'");				}				// Take skip rows into account and only fetch batch_size amount of rows				$___result = $src_db->sql_query_limit($sql, $convert->batch_size, $skip_rows);				if ($convert->mysql_convert && $same_db)				{					$src_db->sql_query("SET NAMES 'utf8'");				}				// This loop processes each row				$counting = 0;				$convert->row = $convert_row = array();				if (!empty($schema['autoincrement']))				{					switch ($db->sql_layer)					{						case 'mssql':						case 'mssql_odbc':						case 'mssqlnative':							$db->sql_query('SET IDENTITY_INSERT ' . $schema['target'] . ' ON');						break;					}				}				// Now handle the rows until time is over or no more rows to process...				while ($counting === 0 || still_on_time())				{					$convert_row = $src_db->sql_fetchrow($___result);					if (!$convert_row)					{						// move to the next batch or table						break;					}					// With this we are able to always save the last state					$convert->row = $convert_row;					// Increment the counting variable, it stores the number of rows we have processed					$counting++;					$insert_values = array();					$sql_flag = $this->process_row($schema, $sql_data, $insert_values);					if ($sql_flag === true)					{						switch ($db->sql_layer)						{							// If MySQL, we'll wait to have num_wait_rows rows to submit at once							case 'mysql':							case 'mysql4':							case 'mysqli':								$waiting_rows[] = '(' . implode(', ', $insert_values) . ')';								if (sizeof($waiting_rows) >= $convert->num_wait_rows)								{									$errored = false;									$db->sql_return_on_error(true);									if (!$db->sql_query($insert_query . implode(', ', $waiting_rows)))									{										$errored = true;									}									$db->sql_return_on_error(false);									if ($errored)									{										$db->sql_return_on_error(true);										// Because it errored out we will try to insert the rows one by one... most of the time this										// is caused by duplicate entries - but we also do not want to miss one...										foreach ($waiting_rows as $waiting_sql)										{											if (!$db->sql_query($insert_query . $waiting_sql))											{												$this->p_master->db_error($user->lang['DB_ERR_INSERT'], htmlspecialchars($insert_query . $waiting_sql) . '<br /><br />' . htmlspecialchars(print_r($db->_sql_error(), true)), __LINE__, __FILE__, true);											}										}										$db->sql_return_on_error(false);									}									$waiting_rows = array();								}							break;							default:								$insert_sql = $insert_query . '(' . implode(', ', $insert_values) . ')';								$db->sql_return_on_error(true);								if (!$db->sql_query($insert_sql))								{									$this->p_master->db_error($user->lang['DB_ERR_INSERT'], htmlspecialchars($insert_sql) . '<br /><br />' . htmlspecialchars(print_r($db->_sql_error(), true)), __LINE__, __FILE__, true);								}								$db->sql_return_on_error(false);								$waiting_rows = array();							break;						}					}					$skip_rows++;				}				$src_db->sql_freeresult($___result);				// We might still have some rows waiting				if (sizeof($waiting_rows))				{					$errored = false;					$db->sql_return_on_error(true);					if (!$db->sql_query($insert_query . implode(', ', $waiting_rows)))					{						$errored = true;					}					$db->sql_return_on_error(false);					if ($errored)					{						$db->sql_return_on_error(true);						// Because it errored out we will try to insert the rows one by one... most of the time this						// is caused by duplicate entries - but we also do not want to miss one...						foreach ($waiting_rows as $waiting_sql)						{							$db->sql_query($insert_query . $waiting_sql);							$this->p_master->db_error($user->lang['DB_ERR_INSERT'], htmlspecialchars($insert_query . $waiting_sql) . '<br /><br />' . htmlspecialchars(print_r($db->_sql_error(), true)), __LINE__, __FILE__, true);						}						$db->sql_return_on_error(false);					}					$waiting_rows = array();				}				if (!empty($schema['autoincrement']))				{					switch ($db->sql_layer)					{						case 'mssql':						case 'mssql_odbc':						case 'mssqlnative':							$db->sql_query('SET IDENTITY_INSERT ' . $schema['target'] . ' OFF');						break;						case 'postgres':							$db->sql_query("SELECT SETVAL('" . $schema['target'] . "_seq',(select case when max(" . $schema['autoincrement'] . ")>0 then max(" . $schema['autoincrement'] . ")+1 else 1 end from " . $schema['target'] . '));');						break;						case 'oracle':							$result = $db->sql_query('SELECT MAX(' . $schema['autoincrement'] . ') as max_id FROM ' . $schema['target']);							$row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							$largest_id = (int) $row['max_id'];							if ($largest_id)							{								$db->sql_query('DROP SEQUENCE ' . $schema['target'] . '_seq');								$db->sql_query('CREATE SEQUENCE ' . $schema['target'] . '_seq START WITH ' . ($largest_id + 1));							}						break;					}				}			}			// When we reach this point, either the current table has been processed or we're running out of time.			if (still_on_time() && $counting < $convert->batch_size/* && !defined('DEBUG_EXTRA')*/)			{				$skip_rows = 0;				$current_table++;			}			else			{/*				if (still_on_time() && $counting < $convert->batch_size)				{					$skip_rows = 0;					$current_table++;				}*/				// Looks like we ran out of time.				$url = $this->save_convert_progress('&amp;current_table=' . $current_table . '&amp;skip_rows=' . $skip_rows);				$current_table++;//				$percentage = ($skip_rows == 0) ? 0 : floor(100 / ($total_rows / $skip_rows));				$msg = sprintf($user->lang['STEP_PERCENT_COMPLETED'], $current_table, sizeof($convert->convertor['schema']));				$template->assign_vars(array(					'L_MESSAGE'		=> $msg,					'L_SUBMIT'		=> $user->lang['CONTINUE_CONVERT'],					'U_ACTION'		=> $url,				));				$this->meta_refresh($url);				return;			}		}		// Process execute_last then we'll be done		$url = $this->save_convert_progress('&amp;jump=1');		$template->assign_vars(array(			'L_SUBMIT'		=> $user->lang['FINAL_STEP'],			'U_ACTION'		=> $url,		));		$this->meta_refresh($url);		return;	}	/**	* Sync function being executed at the middle, some functions need to be executed after a successful sync.	*/	function sync_forums($sync_batch)	{		global $template, $user, $db, $phpbb_root_path, $phpEx, $config, $cache;		global $convert;		$template->assign_block_vars('checks', array(			'S_LEGEND'	=> true,			'LEGEND'	=> $user->lang['SYNC_TOPICS'],		));		$batch_size = $convert->batch_size;		$sql = 'SELECT MIN(topic_id) as min_value, MAX(topic_id) AS max_value			FROM ' . TOPICS_TABLE;		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		// Set values of minimum/maximum primary value for this table.		$primary_min = $row['min_value'];		$primary_max = $row['max_value'];		if ($sync_batch == 0)		{			$sync_batch = (int) $primary_min;		}		if ($sync_batch == 0)		{			$sync_batch = 1;		}		// Fetch a batch of rows, process and insert them.		while ($sync_batch <= $primary_max && still_on_time())		{			$end = ($sync_batch + $batch_size - 1);			// Sync all topics in batch mode...			sync('topic_approved', 'range', 'topic_id BETWEEN ' . $sync_batch . ' AND ' . $end, true, false);			sync('topic', 'range', 'topic_id BETWEEN ' . $sync_batch . ' AND ' . $end, true, true);			$template->assign_block_vars('checks', array(				'TITLE'		=> sprintf($user->lang['SYNC_TOPIC_ID'], $sync_batch, ($sync_batch + $batch_size)) . ((defined('DEBUG_EXTRA') && function_exists('memory_get_usage')) ? ' [' . ceil(memory_get_usage()/1024) . ' ' . $user->lang['KIB'] . ']' : ''),				'RESULT'	=> $user->lang['DONE'],			));			$sync_batch += $batch_size;		}		if ($sync_batch >= $primary_max)		{			$url = $this->save_convert_progress('&amp;final_jump=1');			$template->assign_vars(array(				'L_SUBMIT'		=> $user->lang['CONTINUE_CONVERT'],				'U_ACTION'		=> $url,			));			$this->meta_refresh($url);			return;		}		else		{			$sync_batch--;		}		$url = $this->save_convert_progress('&amp;sync_batch=' . $sync_batch);		$template->assign_vars(array(			'L_SUBMIT'		=> $user->lang['CONTINUE_CONVERT'],			'U_ACTION'		=> $url,		));		$this->meta_refresh($url);		return;	}	/**	* Save the convertor status	*/	function save_convert_progress($step)	{		global $convert, $language;		// Save convertor Status		set_config('convert_progress', serialize(array(			'step'			=> $step,			'table_prefix'	=> $convert->src_table_prefix,			'tag'			=> $convert->convertor_tag,		)), true);		set_config('convert_db_server', serialize(array(			'dbms'			=> $convert->src_dbms,			'dbhost'		=> $convert->src_dbhost,			'dbport'		=> $convert->src_dbport,			'dbname'		=> $convert->src_dbname,		)), true);		set_config('convert_db_user', serialize(array(			'dbuser'		=> $convert->src_dbuser,			'dbpasswd'		=> $convert->src_dbpasswd,		)), true);		return $this->p_master->module_url . "?mode={$this->mode}&amp;sub=in_progress&amp;tag={$convert->convertor_tag}$step&amp;language=$language";	}	/**	* Finish conversion, the last function to be called.	*/	function finish_conversion()	{		global $db, $phpbb_root_path, $phpEx, $convert, $config, $language, $user, $template;		$db->sql_query('DELETE FROM ' . CONFIG_TABLE . "			WHERE config_name = 'convert_progress'				OR config_name = 'convert_options'				OR config_name = 'convert_db_server'				OR config_name = 'convert_db_user'");		$db->sql_query('DELETE FROM ' . SESSIONS_TABLE);		@unlink($phpbb_root_path . 'cache/data_global.' . $phpEx);		cache_moderators();		// And finally, add a note to the log		add_log('admin', 'LOG_INSTALL_CONVERTED', $convert->convertor_data['forum_name'], $config['version']);		$url = $this->p_master->module_url . "?mode={$this->mode}&amp;sub=final&amp;language=$language";		$template->assign_vars(array(			'L_SUBMIT'		=> $user->lang['FINAL_STEP'],			'U_ACTION'		=> $url,		));		$this->meta_refresh($url);		return;	}	/**	* This function marks the steps after syncing	*/	function final_jump($final_jump)	{		global $template, $user, $src_db, $same_db, $db, $phpbb_root_path, $phpEx, $config, $cache;		global $convert;		$template->assign_block_vars('checks', array(			'S_LEGEND'	=> true,			'LEGEND'	=> $user->lang['PROCESS_LAST'],		));		if ($final_jump == 1)		{			$db->sql_return_on_error(true);			update_topics_posted();			$template->assign_block_vars('checks', array(				'TITLE'		=> $user->lang['UPDATE_TOPICS_POSTED'],				'RESULT'	=> $user->lang['DONE'],			));			if ($db->sql_error_triggered)			{				$template->assign_vars(array(					'S_ERROR_BOX'	=> true,					'ERROR_TITLE'	=> $user->lang['UPDATE_TOPICS_POSTED'],					'ERROR_MSG'		=> $user->lang['UPDATE_TOPICS_POSTED_ERR'],				));			}			$db->sql_return_on_error(false);			$this->finish_conversion();			return;		}	}	/**	* This function marks the steps before syncing (jump=1)	*/	function jump($jump, $last_statement)	{		global $template, $user, $src_db, $same_db, $db, $phpbb_root_path, $phpEx, $config, $cache;		global $convert;		$template->assign_block_vars('checks', array(			'S_LEGEND'	=> true,			'LEGEND'	=> $user->lang['PROCESS_LAST'],		));		if ($jump == 1)		{			// Execute 'last' statements/queries			if (!empty($convert->convertor['execute_last']))			{				if (!is_array($convert->convertor['execute_last']))				{					eval($convert->convertor['execute_last']);				}				else				{					while ($last_statement < sizeof($convert->convertor['execute_last']))					{						eval($convert->convertor['execute_last'][$last_statement]);						$template->assign_block_vars('checks', array(							'TITLE'		=> $convert->convertor['execute_last'][$last_statement],							'RESULT'	=> $user->lang['DONE'],						));						$last_statement++;						$url = $this->save_convert_progress('&amp;jump=1&amp;last=' . $last_statement);						$percentage = ($last_statement == 0) ? 0 : floor(100 / (sizeof($convert->convertor['execute_last']) / $last_statement));						$msg = sprintf($user->lang['STEP_PERCENT_COMPLETED'], $last_statement, sizeof($convert->convertor['execute_last']), $percentage);						$template->assign_vars(array(							'L_SUBMIT'		=> $user->lang['CONTINUE_LAST'],							'L_MESSAGE'		=> $msg,							'U_ACTION'		=> $url,						));						$this->meta_refresh($url);						return;					}				}			}			if (!empty($convert->convertor['query_last']))			{				if (!is_array($convert->convertor['query_last']))				{					$convert->convertor['query_last'] = array('target', array($convert->convertor['query_last']));				}				else if (!is_array($convert->convertor['query_last'][0]))				{					$convert->convertor['query_last'] = array(array($convert->convertor['query_last'][0], $convert->convertor['query_last'][1]));				}				foreach ($convert->convertor['query_last'] as $query_last)				{					if ($query_last[0] == 'src')					{						if ($convert->mysql_convert && $same_db)						{							$src_db->sql_query("SET NAMES 'binary'");						}						$src_db->sql_query($query_last[1]);						if ($convert->mysql_convert && $same_db)						{							$src_db->sql_query("SET NAMES 'utf8'");						}					}					else					{						$db->sql_query($query_last[1]);					}				}			}			// Sanity check			$db->sql_return_on_error(false);			$src_db->sql_return_on_error(false);			fix_empty_primary_groups();			$sql = 'SELECT MIN(user_regdate) AS board_startdate				FROM ' . USERS_TABLE;			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!isset($config['board_startdate']) || ($row['board_startdate'] < $config['board_startdate'] && $row['board_startdate'] > 0))			{				set_config('board_startdate', $row['board_startdate']);				$db->sql_query('UPDATE ' . USERS_TABLE . ' SET user_regdate = ' . $row['board_startdate'] . ' WHERE user_id = ' . ANONYMOUS);			}			update_dynamic_config();			$template->assign_block_vars('checks', array(				'TITLE'		=> $user->lang['CLEAN_VERIFY'],				'RESULT'	=> $user->lang['DONE'],			));			$url = $this->save_convert_progress('&amp;jump=2');			$template->assign_vars(array(				'L_SUBMIT'		=> $user->lang['CONTINUE_CONVERT'],				'U_ACTION'		=> $url,			));			$this->meta_refresh($url);			return;		}		if ($jump == 2)		{			$db->sql_query('UPDATE ' . USERS_TABLE . " SET user_permissions = ''");			// TODO: sync() is likely going to bomb out on forums with a considerable amount of topics.			// TODO: the sync function is able to handle FROM-TO values, we should use them here (batch processing)			sync('forum', '', '', false, true);			$cache->destroy('sql', FORUMS_TABLE);			$template->assign_block_vars('checks', array(				'TITLE'		=> $user->lang['SYNC_FORUMS'],				'RESULT'	=> $user->lang['DONE'],			));			// Continue with synchronizing the forums...			$url = $this->save_convert_progress('&amp;sync_batch=0');			$template->assign_vars(array(				'L_SUBMIT'		=> $user->lang['CONTINUE_CONVERT'],				'U_ACTION'		=> $url,			));			$this->meta_refresh($url);			return;		}	}	function build_insert_query(&$schema, &$sql_data, $current_table)	{		global $db, $user;		global $convert;		// Can we use IGNORE with this DBMS?		$sql_ignore = (strpos($db->sql_layer, 'mysql') === 0 && !defined('DEBUG_EXTRA')) ? 'IGNORE ' : '';		$insert_query = 'INSERT ' . $sql_ignore . 'INTO ' . $schema['target'] . ' (';		$aliases = array();		$sql_data = array(			'source_fields'		=> array(),			'target_fields'		=> array(),			'source_tables'		=> array(),			'select_fields'		=> array(),		);		foreach ($schema as $key => $val)		{			// Example: array('group_name',				'extension_groups.group_name',		'htmlspecialchars'),			if (is_int($key))			{				if (!empty($val[0]))				{					// Target fields					$sql_data['target_fields'][$val[0]] = $key;					$insert_query .= $val[0] . ', ';				}				if (!is_array($val[1]))				{					$val[1] = array($val[1]);				}				foreach ($val[1] as $valkey => $value_1)				{					// This should cover about any case:					//					// table.field					=> SELECT table.field				FROM table					// table.field AS alias			=> SELECT table.field	AS alias	FROM table					// table.field AS table2.alias	=> SELECT table2.field	AS alias	FROM table table2					// table.field AS table2.field	=> SELECT table2.field				FROM table table2					//					if (preg_match('/^([a-z0-9_]+)\.([a-z0-9_]+)( +AS +(([a-z0-9_]+?)\.)?([a-z0-9_]+))?$/i', $value_1, $m))					{						// There is 'AS ...' in the field names						if (!empty($m[3]))						{							$value_1 = ($m[2] == $m[6]) ? $m[1] . '.' . $m[2] : $m[1] . '.' . $m[2] . ' AS ' . $m[6];							// Table alias: store it then replace the source table with it							if (!empty($m[5]) && $m[5] != $m[1])							{								$aliases[$m[5]] = $m[1];								$value_1 = str_replace($m[1] . '.' . $m[2], $m[5] . '.' . $m[2], $value_1);							}						}						else						{							// No table alias							$sql_data['source_tables'][$m[1]] = (empty($convert->src_table_prefix)) ? $m[1] : $convert->src_table_prefix . $m[1] . ' ' . $m[1];						}						$sql_data['select_fields'][$value_1] = $value_1;						$sql_data['source_fields'][$key][$valkey] = (!empty($m[6])) ? $m[6] : $m[2];					}				}			}			else if ($key == 'where' || $key == 'group_by' || $key == 'order_by' || $key == 'having')			{				if (@preg_match_all('/([a-z0-9_]+)\.([a-z0-9_]+)/i', $val, $m))				{					foreach ($m[1] as $value)					{						$sql_data['source_tables'][$value] = (empty($convert->src_table_prefix)) ? $value : $convert->src_table_prefix . $value . ' ' . $value;					}				}			}		}		// Add the aliases to the list of tables		foreach ($aliases as $alias => $table)		{			$sql_data['source_tables'][$alias] = $convert->src_table_prefix . $table . ' ' . $alias;		}		// 'left_join'		=> 'forums LEFT JOIN forum_prune ON forums.forum_id = forum_prune.forum_id',		if (!empty($schema['left_join']))		{			if (!is_array($schema['left_join']))			{				$schema['left_join'] = array($schema['left_join']);			}			foreach ($schema['left_join'] as $left_join)			{				// This won't handle concatened LEFT JOINs				if (!preg_match('/([a-z0-9_]+) LEFT JOIN ([a-z0-9_]+) A?S? ?([a-z0-9_]*?) ?(ON|USING)(.*)/i', $left_join, $m))				{					$this->p_master->error(sprintf($user->lang['NOT_UNDERSTAND'], 'LEFT JOIN', $left_join, $current_table, $schema['target']), __LINE__, __FILE__);				}				if (!empty($aliases[$m[2]]))				{					if (!empty($m[3]))					{						$this->p_master->error(sprintf($user->lang['NAMING_CONFLICT'], $m[2], $m[3], $schema['left_join']), __LINE__, __FILE__);					}					$m[2] = $aliases[$m[2]];					$m[3] = $m[2];				}				$right_table = $convert->src_table_prefix . $m[2];				if (!empty($m[3]))				{					unset($sql_data['source_tables'][$m[3]]);				}				else if ($m[2] != $m[1])				{					unset($sql_data['source_tables'][$m[2]]);				}				if (strpos($sql_data['source_tables'][$m[1]], "\nLEFT JOIN") !== false)				{					$sql_data['source_tables'][$m[1]] = '(' . $sql_data['source_tables'][$m[1]] . ")\nLEFT JOIN $right_table";				}				else				{					$sql_data['source_tables'][$m[1]] .= "\nLEFT JOIN $right_table";				}				if (!empty($m[3]))				{					unset($sql_data['source_tables'][$m[3]]);					$sql_data['source_tables'][$m[1]] .= ' AS ' . $m[3];				}				else if (!empty($convert->src_table_prefix))				{					$sql_data['source_tables'][$m[1]] .= ' AS ' . $m[2];				}				$sql_data['source_tables'][$m[1]] .= ' ' . $m[4] . $m[5];			}		}		// Remove ", " from the end of the insert query		$insert_query = substr($insert_query, 0, -2) . ') VALUES ';		return $insert_query;	}	/**	* Function for processing the currently handled row	*/	function process_row(&$schema, &$sql_data, &$insert_values)	{		global $template, $user, $phpbb_root_path, $phpEx, $db, $lang, $config, $cache;		global $convert, $convert_row;		$sql_flag = false;		foreach ($schema as $key => $fields)		{			// We are only interested in the lines with:			// array('comment', 'attachments_desc.comment', 'htmlspecialchars'),			if (is_int($key))			{				if (!is_array($fields[1]))				{					$fields[1] = array($fields[1]);				}				$firstkey_set = false;				$firstkey = 0;				foreach ($fields[1] as $inner_key => $inner_value)				{					if (!$firstkey_set)					{						$firstkey = $inner_key;						$firstkey_set = true;					}					$src_field = isset($sql_data['source_fields'][$key][$inner_key]) ? $sql_data['source_fields'][$key][$inner_key] : '';					if (!empty($src_field))					{						$fields[1][$inner_key] = $convert->row[$src_field];					}				}				if (!empty($fields[0]))				{					// We have a target field, if we haven't set $sql_flag yet it will be set to TRUE.					// If a function has already set it to FALSE it won't change it.					if ($sql_flag === false)					{						$sql_flag = true;					}					// No function assigned?					if (empty($fields[2]))					{						$value = $fields[1][$firstkey];					}					else if (is_array($fields[2]))					{						// Execute complex function/eval/typecast						$value = $fields[1];						foreach ($fields[2] as $type => $execution)						{							if (strpos($type, 'typecast') === 0)							{								if (!is_array($value))								{									$value = array($value);								}								$value = $value[0];								settype($value, $execution);							}							else if (strpos($type, 'function') === 0)							{								if (!is_array($value))								{									$value = array($value);								}								$value = call_user_func_array($execution, $value);							}							else if (strpos($type, 'execute') === 0)							{								if (!is_array($value))								{									$value = array($value);								}								$execution = str_replace('{RESULT}', '$value', $execution);								$execution = str_replace('{VALUE}', '$value', $execution);								eval($execution);							}						}					}					else					{						$value = call_user_func_array($fields[2], $fields[1]);					}					if (is_null($value))					{						$value = '';					}					$insert_values[] = $db->_sql_validate_value($value);				}				else if (!empty($fields[2]))				{					if (is_array($fields[2]))					{						// Execute complex function/eval/typecast						$value = '';						foreach ($fields[2] as $type => $execution)						{							if (strpos($type, 'typecast') === 0)							{								$value = settype($value, $execution);							}							else if (strpos($type, 'function') === 0)							{								if (!is_array($value))								{									$value = array($value);								}								$value = call_user_func_array($execution, $value);							}							else if (strpos($type, 'execute') === 0)							{								if (!is_array($value))								{									$value = array($value);								}								$execution = str_replace('{RESULT}', '$value', $execution);								$execution = str_replace('{VALUE}', '$value', $execution);								eval($execution);							}						}					}					else					{						call_user_func_array($fields[2], $fields[1]);					}				}			}		}		return $sql_flag;	}	/**	* Own meta refresh function to be able to change the global time used	*/	function meta_refresh($url)	{		global $convert, $template;		if ($convert->options['refresh'])		{			// Because we should not rely on correct settings, we simply use the relative path here directly.			$template->assign_vars(array(				'S_REFRESH'	=> true,				'META'		=> '<meta http-equiv="refresh" content="5;url=' . $url . '" />')			);		}	}	/**	* The information below will be used to build the input fields presented to the user	*/	var $convert_options = array(		'legend1'			=> 'SPECIFY_OPTIONS',		'src_dbms'			=> array('lang' => 'DBMS',			'type' => 'select', 'options' => 'dbms_select(\'{VALUE}\', true)', 'explain' => false),		'src_dbhost'		=> array('lang' => 'DB_HOST',		'type' => 'text:25:100', 'explain' => true),		'src_dbport'		=> array('lang' => 'DB_PORT',		'type' => 'text:25:100', 'explain' => true),		'src_dbname'		=> array('lang' => 'DB_NAME',		'type' => 'text:25:100', 'explain' => false),		'src_dbuser'		=> array('lang' => 'DB_USERNAME',	'type' => 'text:25:100', 'explain' => false),		'src_dbpasswd'		=> array('lang' => 'DB_PASSWORD',	'type' => 'password:25:100', 'explain' => false),		'src_table_prefix'	=> array('lang' => 'TABLE_PREFIX',	'type' => 'text:25:100', 'explain' => false),		//'src_url'			=> array('lang' => 'FORUM_ADDRESS',	'type' => 'text:50:100', 'explain' => true),		'forum_path'		=> array('lang' => 'FORUM_PATH',	'type' => 'text:25:100', 'explain' => true),		'refresh'			=> array('lang' => 'REFRESH_PAGE',	'type' => 'radio:yes_no', 'explain' => true),	);}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** This class collects data which is used to create some usage statistics.** The collected data is - after authorization of the administrator - submitted* to a central server. For privacy reasons we try to collect only data which aren't private* or don't give any information which might help to identify the user.** @author		Johannes Schlueter <johannes@php.net>* @copyright	(c) 2007-2008 Johannes Schlueter*/class phpbb_questionnaire_data_collector{	var $providers;	var $data = null;	var $install_id = '';	/**	* Constructor.	*	* @param	string	*/	function phpbb_questionnaire_data_collector($install_id)	{		$this->install_id = $install_id;		$this->providers = array();	}	function add_data_provider(&$provider)	{		$this->providers[] = &$provider;	}	/**	* Get data as an array.	*	* @return	array	All Data	*/	function get_data_raw()	{		if (!$this->data)		{			$this->collect();		}		return $this->data;	}	function get_data_for_form()	{		return base64_encode(serialize($this->get_data_raw()));	}	/**	* Collect info into the data property.	*	* @return	void	*/	function collect()	{		foreach (array_keys($this->providers) as $key)		{			$provider = &$this->providers[$key];			$this->data[$provider->get_identifier()] = $provider->get_data();		}		$this->data['install_id'] = $this->install_id;	}}/** interface: get_indentifier(), get_data() *//*** Questionnaire PHP data provider* @package phpBB3*/class phpbb_questionnaire_php_data_provider{	function get_identifier()	{		return 'PHP';	}	/**	* Get data about the PHP runtime setup.	*	* @return	array	*/	function get_data()	{		return array(			'version'						=> PHP_VERSION,			'sapi'							=> PHP_SAPI,			'int_size'						=> defined('PHP_INT_SIZE') ? PHP_INT_SIZE : '',			'safe_mode'						=> (int) @ini_get('safe_mode'),			'open_basedir'					=> (int) @ini_get('open_basedir'),			'memory_limit'					=> @ini_get('memory_limit'),			'allow_url_fopen'				=> (int) @ini_get('allow_url_fopen'),			'allow_url_include'				=> (int) @ini_get('allow_url_include'),			'file_uploads'					=> (int) @ini_get('file_uploads'),			'upload_max_filesize'			=> @ini_get('upload_max_filesize'),			'post_max_size'					=> @ini_get('post_max_size'),			'disable_functions'				=> @ini_get('disable_functions'),			'disable_classes'				=> @ini_get('disable_classes'),			'enable_dl'						=> (int) @ini_get('enable_dl'),			'magic_quotes_gpc'				=> (int) @ini_get('magic_quotes_gpc'),			'register_globals'				=> (int) @ini_get('register_globals'),			'filter.default'				=> @ini_get('filter.default'),			'zend.ze1_compatibility_mode'	=> (int) @ini_get('zend.ze1_compatibility_mode'),			'unicode.semantics'				=> (int) @ini_get('unicode.semantics'),			'zend_thread_safty'				=> (int) function_exists('zend_thread_id'),			'extensions'					=> get_loaded_extensions(),		);	}}/*** Questionnaire System data provider* @package phpBB3*/class phpbb_questionnaire_system_data_provider{	function get_identifier()	{		return 'System';	}	/**	* Get data about the general system information, like OS or IP (shortened).	*	* @return	array	*/	function get_data()	{		// Start discovering the IPV4 server address, if available		$server_address = '0.0.0.0';		if (!empty($_SERVER['SERVER_ADDR']))		{			$server_address = $_SERVER['SERVER_ADDR'];		}		// Running on IIS?		if (!empty($_SERVER['LOCAL_ADDR']))		{			$server_address = $_SERVER['LOCAL_ADDR'];		}		return array(			'os'	=> PHP_OS,			'httpd'	=> $_SERVER['SERVER_SOFTWARE'],			// we don't want the real IP address (for privacy policy reasons) but only			// a network address to see whether your installation is running on a private or public network.			'private_ip'	=> $this->is_private_ip($server_address),			'ipv6'			=> strpos($server_address, ':') !== false,		);	}	/**	* Checks whether the given IP is in a private network.	*	* @param	string	$ip	IP in v4 dot-decimal or v6 hex format	* @return	bool		true if the IP is from a private network, else false	*/	function is_private_ip($ip)	{		// IPv4		if (strpos($ip, ':') === false)		{			$ip_address_ary = explode('.', $ip);			// build ip			if (!isset($ip_address_ary[0]) || !isset($ip_address_ary[1]))			{				$ip_address_ary = explode('.', '0.0.0.0');			}			// IANA reserved addresses for private networks (RFC 1918) are:			// - 10.0.0.0/8			// - 172.16.0.0/12			// - 192.168.0.0/16			if ($ip_address_ary[0] == '10' ||				($ip_address_ary[0] == '172' && intval($ip_address_ary[1]) > 15 && intval($ip_address_ary[1]) < 32) ||				($ip_address_ary[0] == '192' && $ip_address_ary[1] == '168') ||				($ip_address_ary[0] == '192' && $ip_address_ary[1] == '168'))			{				return true;			}		}		// IPv6		else		{			// unique local unicast			$prefix = substr($ip, 0, 2);			if ($prefix == 'fc' || $prefix == 'fd')			{				return true;			}		}		return false;	}}/*** Questionnaire phpBB data provider* @package phpBB3*/class phpbb_questionnaire_phpbb_data_provider{	var $config;	var $unique_id;	/**	* Constructor.	*	* @param	array	$config	*/	function phpbb_questionnaire_phpbb_data_provider($config)	{		// generate a unique id if necessary		if (empty($config['questionnaire_unique_id']))		{			$this->unique_id = unique_id();			set_config('questionnaire_unique_id', $this->unique_id);		}		else		{			$this->unique_id = $config['questionnaire_unique_id'];		}		$this->config = $config;	}	/**	* Returns a string identifier for this data provider	*	* @return	string	"phpBB"	*/	function get_identifier()	{		return 'phpBB';	}	/**	* Get data about this phpBB installation.	*	* @return	array	Relevant anonymous config options	*/	function get_data()	{		global $phpbb_root_path, $phpEx;		include("{$phpbb_root_path}config.$phpEx");		unset($dbhost, $dbport, $dbname, $dbuser, $dbpasswd); // Just a precaution		// Only send certain config vars		$config_vars = array(			'active_sessions' => true,			'allow_attachments' => true,			'allow_autologin' => true,			'allow_avatar' => true,			'allow_avatar_local' => true,			'allow_avatar_remote' => true,			'allow_avatar_upload' => true,			'allow_bbcode' => true,			'allow_birthdays' => true,			'allow_bookmarks' => true,			'allow_emailreuse' => true,			'allow_forum_notify' => true,			'allow_mass_pm' => true,			'allow_name_chars' => true,			'allow_namechange' => true,			'allow_nocensors' => true,			'allow_pm_attach' => true,			'allow_pm_report' => true,			'allow_post_flash' => true,			'allow_post_links' => true,			'allow_privmsg' => true,			'allow_quick_reply' => true,			'allow_sig' => true,			'allow_sig_bbcode' => true,			'allow_sig_flash' => true,			'allow_sig_img' => true,			'allow_sig_links' => true,			'allow_sig_pm' => true,			'allow_sig_smilies' => true,			'allow_smilies' => true,			'allow_topic_notify' => true,			'attachment_quota' => true,			'auth_bbcode_pm' => true,			'auth_flash_pm' => true,			'auth_img_pm' => true,			'auth_method' => true,			'auth_smilies_pm' => true,			'avatar_filesize' => true,			'avatar_max_height' => true,			'avatar_max_width' => true,			'avatar_min_height' => true,			'avatar_min_width' => true,			'board_dst' => true,			'board_email_form' => true,			'board_hide_emails' => true,			'board_timezone' => true,			'browser_check' => true,			'bump_interval' => true,			'bump_type' => true,			'cache_gc' => true,			'captcha_plugin' => true,			'captcha_gd' => true,			'captcha_gd_foreground_noise' => true,			'captcha_gd_x_grid' => true,			'captcha_gd_y_grid' => true,			'captcha_gd_wave' => true,			'captcha_gd_3d_noise' => true,			'captcha_gd_fonts' => true,			'confirm_refresh' => true,			'check_attachment_content' => true,			'check_dnsbl' => true,			'chg_passforce' => true,			'cookie_secure' => true,			'coppa_enable' => true,			'database_gc' => true,			'dbms_version' => true,			'default_dateformat' => true,			'default_lang' => true,			'display_last_edited' => true,			'display_order' => true,			'edit_time' => true,			'email_check_mx' => true,			'email_enable' => true,			'email_function_name' => true,			'email_package_size' => true,			'enable_confirm' => true,			'enable_pm_icons' => true,			'enable_post_confirm' => true,			'feed_enable' => true,			'feed_http_auth' => true,			'feed_limit_post' => true,			'feed_limit_topic' => true,			'feed_overall' => true,			'feed_overall_forums' => true,			'feed_forum' => true,			'feed_topic' => true,			'feed_topics_new' => true,			'feed_topics_active' => true,			'feed_item_statistics' => true,			'flood_interval' => true,			'force_server_vars' => true,			'form_token_lifetime' => true,			'form_token_mintime' => true,			'form_token_sid_guests' => true,			'forward_pm' => true,			'forwarded_for_check' => true,			'full_folder_action' => true,			'fulltext_native_common_thres' => true,			'fulltext_native_load_upd' => true,			'fulltext_native_max_chars' => true,			'fulltext_native_min_chars' => true,			'gzip_compress' => true,			'hot_threshold' => true,			'img_create_thumbnail' => true,			'img_display_inlined' => true,			'img_imagick' => true,			'img_link_height' => true,			'img_link_width' => true,			'img_max_height' => true,			'img_max_thumb_width' => true,			'img_max_width' => true,			'img_min_thumb_filesize' => true,			'ip_check' => true,			'jab_enable' => true,			'jab_package_size' => true,			'jab_use_ssl' => true,			'limit_load' => true,			'limit_search_load' => true,			'load_anon_lastread' => true,			'load_birthdays' => true,			'load_cpf_memberlist' => true,			'load_cpf_viewprofile' => true,			'load_cpf_viewtopic' => true,			'load_db_lastread' => true,			'load_db_track' => true,			'load_jumpbox' => true,			'load_moderators' => true,			'load_online' => true,			'load_online_guests' => true,			'load_online_time' => true,			'load_onlinetrack' => true,			'load_search' => true,			'load_tplcompile' => true,			'load_user_activity' => true,			'max_attachments' => true,			'max_attachments_pm' => true,			'max_autologin_time' => true,			'max_filesize' => true,			'max_filesize_pm' => true,			'max_login_attempts' => true,			'max_name_chars' => true,			'max_num_search_keywords' => true,			'max_pass_chars' => true,			'max_poll_options' => true,			'max_post_chars' => true,			'max_post_font_size' => true,			'max_post_img_height' => true,			'max_post_img_width' => true,			'max_post_smilies' => true,			'max_post_urls' => true,			'max_quote_depth' => true,			'max_reg_attempts' => true,			'max_sig_chars' => true,			'max_sig_font_size' => true,			'max_sig_img_height' => true,			'max_sig_img_width' => true,			'max_sig_smilies' => true,			'max_sig_urls' => true,			'min_name_chars' => true,			'min_pass_chars' => true,			'min_post_chars' => true,			'min_search_author_chars' => true,			'mime_triggers' => true,			'new_member_post_limit' => true,			'new_member_group_default' => true,			'override_user_style' => true,			'pass_complex' => true,			'pm_edit_time' => true,			'pm_max_boxes' => true,			'pm_max_msgs' => true,			'pm_max_recipients' => true,			'posts_per_page' => true,			'print_pm' => true,			'queue_interval' => true,			'require_activation' => true,			'referer_validation' => true,			'search_block_size' => true,			'search_gc' => true,			'search_interval' => true,			'search_anonymous_interval' => true,			'search_type' => true,			'search_store_results' => true,			'secure_allow_deny' => true,			'secure_allow_empty_referer' => true,			'secure_downloads' => true,			'session_gc' => true,			'session_length' => true,			'smtp_auth_method' => true,			'smtp_delivery' => true,			'topics_per_page' => true,			'tpl_allow_php' => true,			'version' => true,			'warnings_expire_days' => true,			'warnings_gc' => true,			'num_files' => true,			'num_posts' => true,			'num_topics' => true,			'num_users' => true,			'record_online_users' => true,		);		$result = array();		foreach ($config_vars as $name => $void)		{			if (isset($this->config[$name]))			{				$result['config_' . $name] = $this->config[$name];			}		}		global $db;		$result['dbms'] = $dbms;		$result['acm_type'] = $acm_type;		$result['load_extensions'] = $load_extensions;		$result['user_agent'] = 'Unknown';		$result['dbms_version'] = $db->sql_server_info(true);		// Try to get user agent vendor and version		$match = array();		$user_agent = (!empty($_SERVER['HTTP_USER_AGENT'])) ? (string) $_SERVER['HTTP_USER_AGENT'] : '';		$agents = array('firefox', 'msie', 'opera', 'chrome', 'safari', 'mozilla', 'seamonkey', 'konqueror', 'netscape', 'gecko', 'navigator', 'mosaic', 'lynx', 'amaya', 'omniweb', 'avant', 'camino', 'flock', 'aol');		// We check here 1 by 1 because some strings occur after others (for example Mozilla [...] Firefox/)		foreach ($agents as $agent)		{			if (preg_match('#(' . $agent . ')[/ ]?([0-9.]*)#i', $user_agent, $match))			{				$result['user_agent'] = $match[1] . ' ' . $match[2];				break;			}		}		return $result;	}}?>
<?php/**** @package install* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** NOTE to potential convertor authors. Please use this file to get* familiar with the structure since we added some bare explanations here.** Since this file gets included more than once on one page you are not able to add functions to it.* Instead use a functions_ file.** @ignore*/if (!defined('IN_PHPBB')){	exit;}include($phpbb_root_path . 'config.' . $phpEx);unset($dbpasswd);/*** $convertor_data provides some basic information about this convertor which is* used on the initial list of convertors and to populate the default settings*/$convertor_data = array(	'forum_name'	=> 'phpBB 2.0.x',	'version'		=> '1.0.3',	'phpbb_version'	=> '3.0.10',	'author'		=> '<a href="http://www.phpbb.com/">phpBB Group</a>',	'dbms'			=> $dbms,	'dbhost'		=> $dbhost,	'dbport'		=> $dbport,	'dbuser'		=> $dbuser,	'dbpasswd'		=> '',	'dbname'		=> $dbname,	'table_prefix'	=> 'phpbb_',	'forum_path'	=> '../forums',	'author_notes'	=> '',);/*** $tables is a list of the tables (minus prefix) which we expect to find in the* source forum. It is used to guess the prefix if the specified prefix is incorrect*/$tables = array(	'auth_access',	'banlist',	'categories',	'disallow',	'forum_prune',	'forums',	'groups',	'posts',	'posts_text',	'privmsgs',	'privmsgs_text',	'ranks',	'smilies',	'topics',	'topics_watch',	'user_group',	'users',	'vote_desc',	'vote_results',	'vote_voters',	'words');/*** $config_schema details how the board configuration information is stored in the source forum.** 'table_format' can take the value 'file' to indicate a config file. In this case array_name* is set to indicate the name of the array the config values are stored in* Example of using a file:* $config_schema = array(* 	'table_format'	=>	'file',* 	'filename'	=>	'NAME OF FILE', // If the file is not in the root directory, the path needs to be added with no leading slash* 	'array_name' => 'NAME OF ARRAY', // Only used if the configuration file stores the setting in an array.* 	'settings'		=>	array(*        'board_email' => 'SUPPORT_EMAIL', // target config name => source target name* 	)* );* 'table_format' can be an array if the values are stored in a table which is an assosciative array* (as per phpBB 2.0.x)* If left empty, values are assumed to be stored in a table where each config setting is* a column (as per phpBB 1.x)** In either of the latter cases 'table_name' indicates the name of the table in the database** 'settings' is an array which maps the name of the config directive in the source forum* to the config directive in phpBB3. It can either be a direct mapping or use a function.* Please note that the contents of the old config value are passed to the function, therefore* an in-built function requiring the variable passed by reference is not able to be used. Since* empty() is such a function we created the function is_empty() to be used instead.*/$config_schema = array(	'table_name'	=>	'config',	'table_format'	=>	array('config_name' => 'config_value'),	'settings'		=>	array(		'allow_bbcode'			=> 'allow_bbcode',		'allow_smilies'			=> 'allow_smilies',		'allow_sig'				=> 'allow_sig',		'allow_namechange'		=> 'allow_namechange',		'allow_avatar_local'	=> 'allow_avatar_local',		'allow_avatar_remote'	=> 'allow_avatar_remote',		'allow_avatar_upload'	=> 'allow_avatar_upload',		'board_disable'			=> 'board_disable',		'sitename'				=> 'phpbb_set_encoding(sitename)',		'site_desc'				=> 'phpbb_set_encoding(site_desc)',		'session_length'		=> 'session_length',		'board_email_sig'		=> 'phpbb_set_encoding(board_email_sig)',		'posts_per_page'		=> 'posts_per_page',		'topics_per_page'		=> 'topics_per_page',		'enable_confirm'		=> 'enable_confirm',		'board_email_form'		=> 'board_email_form',		'override_user_style'	=> 'override_user_style',		'hot_threshold'			=> 'hot_threshold',		'max_poll_options'		=> 'max_poll_options',		'max_sig_chars'			=> 'max_sig_chars',		'pm_max_msgs'			=> 'max_inbox_privmsgs',		'smtp_delivery'			=> 'smtp_delivery',		'smtp_host'				=> 'smtp_host',		'smtp_username'			=> 'smtp_username',		'smtp_password'			=> 'smtp_password',		'require_activation'	=> 'require_activation',		'flood_interval'		=> 'flood_interval',		'avatar_filesize'		=> 'avatar_filesize',		'avatar_max_width'		=> 'avatar_max_width',		'avatar_max_height'		=> 'avatar_max_height',		'default_dateformat'	=> 'phpbb_set_encoding(default_dateformat)',		'board_timezone'		=> 'board_timezone',		'allow_privmsg'			=> 'not(privmsg_disable)',		'gzip_compress'			=> 'gzip_compress',		'coppa_enable'			=> '!is_empty(coppa_mail)',		'coppa_fax'				=> 'coppa_fax',		'coppa_mail'			=> 'coppa_mail',		'record_online_users'	=> 'record_online_users',		'record_online_date'	=> 'record_online_date',		'board_startdate'		=> 'board_startdate',	));/*** $test_file is the name of a file which is present on the source* forum which can be used to check that the path specified by the* user was correct*/$test_file = 'modcp.php';/*** If this is set then we are not generating the first page of information but getting the conversion information.*/if (!$get_info){	// Test to see if the birthday MOD is installed on the source forum	// Niels' birthday mod	if (get_config_value('birthday_required') !== false || get_config_value('bday_require') !== false)	{		define('MOD_BIRTHDAY', true);	}	// TerraFrost's validated birthday mod	if (get_config_value('bday_require') !== false)	{		define('MOD_BIRTHDAY_TERRA', true);	}	// Test to see if the attachment MOD is installed on the source forum	// If it is, we will convert this data as well	$src_db->sql_return_on_error(true);	$sql = "SELECT config_value		FROM {$convert->src_table_prefix}attachments_config		WHERE config_name = 'upload_dir'";	$result = $src_db->sql_query($sql);	if ($result && $row = $src_db->sql_fetchrow($result))	{		// Here the constant is defined		define('MOD_ATTACHMENT', true);		// Here i add more tables to be checked in the old forum		$tables += array(			'attachments',			'attachments_desc',			'extensions',			'extension_groups'		);		$src_db->sql_freeresult($result);	}	else if ($result)	{		$src_db->sql_freeresult($result);	}	/**	* Tests for further MODs can be included here.	* Please use constants for this, prefixing them with MOD_	*/	$src_db->sql_return_on_error(false);	// Now let us set a temporary config variable for user id incrementing	$sql = "SELECT user_id		FROM {$convert->src_table_prefix}users		WHERE user_id = 1";	$result = $src_db->sql_query($sql);	$user_id = (int) $src_db->sql_fetchfield('user_id');	$src_db->sql_freeresult($result);	// If there is a user id 1, we need to increment user ids. :/	if ($user_id === 1)	{		// Try to get the maximum user id possible...		$sql = "SELECT MAX(user_id) AS max_user_id			FROM {$convert->src_table_prefix}users";		$result = $src_db->sql_query($sql);		$user_id = (int) $src_db->sql_fetchfield('max_user_id');		$src_db->sql_freeresult($result);		set_config('increment_user_id', ($user_id + 1), true);	}	else	{		set_config('increment_user_id', 0, true);	}	// Overwrite maximum avatar width/height	@define('DEFAULT_AVATAR_X_CUSTOM', get_config_value('avatar_max_width'));	@define('DEFAULT_AVATAR_Y_CUSTOM', get_config_value('avatar_max_height'));	// additional table used only during conversion	@define('USERCONV_TABLE', $table_prefix . 'userconv');/***	Description on how to use the convertor framework.**	'schema' Syntax Description*		-> 'target'			=> Target Table. If not specified the next table will be handled*		-> 'primary'		=> Primary Key. If this is specified then this table is processed in batches*		-> 'query_first'	=> array('target' or 'src', Query to execute before beginning the process*								(if more than one then specified as array))*		-> 'function_first'	=> Function to execute before beginning the process (if more than one then specified as array)*								(This is mostly useful if variables need to be given to the converting process)*		-> 'test_file'		=> This is not used at the moment but should be filled with a file from the old installation**		// DB Functions*		'distinct'	=> Add DISTINCT to the select query*		'where'		=> Add WHERE to the select query*		'group_by'	=> Add GROUP BY to the select query*		'left_join'	=> Add LEFT JOIN to the select query (if more than one joins specified as array)*		'having'	=> Add HAVING to the select query**		// DB INSERT array*		This one consist of three parameters*		First Parameter:*							The key need to be filled within the target table*							If this is empty, the target table gets not assigned the source value*		Second Parameter:*							Source value. If the first parameter is specified, it will be assigned this value.*							If the first parameter is empty, this only gets added to the select query*		Third Parameter:*							Custom Function. Function to execute while storing source value into target table.*							The functions return value get stored.*							The function parameter consist of the value of the second parameter.**							types:*								- empty string == execute nothing*								- string == function to execute*								- array == complex execution instructions**		Complex execution instructions:*		@todo test complex execution instructions - in theory they will work fine**							By defining an array as the third parameter you are able to define some statements to be executed. The key*							is defining what to execute, numbers can be appended...**							'function' => execute function*							'execute' => run code, whereby all occurrences of {VALUE} get replaced by the last returned value.*										The result *must* be assigned/stored to {RESULT}.*							'typecast'	=> typecast value**							The returned variables will be made always available to the next function to continue to work with.**							example (variable inputted is an integer of 1):**							array(*								'function1'		=> 'increment_by_one',		// returned variable is 2*								'typecast'		=> 'string',				// typecast variable to be a string*								'execute'		=> '{RESULT} = {VALUE} . ' is good';', // returned variable is '2 is good'*								'function2'		=> 'replace_good_with_bad',				// returned variable is '2 is bad'*							),**/	$convertor = array(		'test_file'				=> 'viewtopic.php',		'avatar_path'			=> get_config_value('avatar_path') . '/',		'avatar_gallery_path'	=> get_config_value('avatar_gallery_path') . '/',		'smilies_path'			=> get_config_value('smilies_path') . '/',		'upload_path'			=> (defined('MOD_ATTACHMENT')) ? phpbb_get_files_dir() . '/' : '',		'thumbnails'			=> (defined('MOD_ATTACHMENT')) ? array('thumbs/', 't_') : '',		'ranks_path'			=> false, // phpBB 2.0.x had no config value for a ranks path		// We empty some tables to have clean data available		'query_first'			=> array(			array('target', $convert->truncate_statement . SEARCH_RESULTS_TABLE),			array('target', $convert->truncate_statement . SEARCH_WORDLIST_TABLE),			array('target', $convert->truncate_statement . SEARCH_WORDMATCH_TABLE),			array('target', $convert->truncate_statement . LOG_TABLE),		),//	with this you are able to import all attachment files on the fly. For large boards this is not an option, therefore commented out by default.//	Instead every file gets copied while processing the corresponding attachment entry.//		if (defined("MOD_ATTACHMENT")) { import_attachment_files(); phpbb_copy_thumbnails(); }		// phpBB2 allowed some similar usernames to coexist which would have the same		// username_clean in phpBB3 which is not possible, so we'll give the admin a list		// of user ids and usernames and let him deicde what he wants to do with them		'execute_first'	=> '			phpbb_create_userconv_table();			import_avatar_gallery();			if (defined("MOD_ATTACHMENT")) phpbb_import_attach_config();			phpbb_insert_forums();		',		'execute_last'	=> array('			add_bots();		', '			update_folder_pm_count();		', '			update_unread_count();		', '			phpbb_convert_authentication(\'start\');		', '			phpbb_convert_authentication(\'first\');		', '			phpbb_convert_authentication(\'second\');		', '			phpbb_convert_authentication(\'third\');		'),		'schema' => array(			array(				'target'	=> USERCONV_TABLE,				'query_first'   => array('target', $convert->truncate_statement . USERCONV_TABLE),				array('user_id',			'users.user_id', 	''),				array('username_clean',		'users.username',	array('function1' => 'phpbb_set_encoding', 'function2' => 'utf8_clean_string')),			),			array(				'target'		=> (defined('MOD_ATTACHMENT')) ? ATTACHMENTS_TABLE : '',				'primary'		=> 'attachments.attach_id',				'query_first'	=> (defined('MOD_ATTACHMENT')) ? array('target', $convert->truncate_statement . ATTACHMENTS_TABLE) : '',				'autoincrement'	=> 'attach_id',				array('attach_id',				'attachments.attach_id',				''),				array('post_msg_id',			'attachments.post_id',					''),				array('topic_id',				'posts.topic_id',						''),				array('in_message',				0,										''),				array('is_orphan',				0,										''),				array('poster_id',				'attachments.user_id_1 AS poster_id',	'phpbb_user_id'),				array('physical_filename',		'attachments_desc.physical_filename',	'import_attachment'),				array('real_filename',			'attachments_desc.real_filename',		'phpbb_set_encoding'),				array('download_count',			'attachments_desc.download_count',		''),				array('attach_comment',			'attachments_desc.comment',				array('function1' => 'phpbb_set_encoding', 'function2' => 'utf8_htmlspecialchars')),				array('extension',				'attachments_desc.extension',			''),				array('mimetype',				'attachments_desc.mimetype',			''),				array('filesize',				'attachments_desc.filesize',			''),				array('filetime',				'attachments_desc.filetime',			''),				array('thumbnail',				'attachments_desc.thumbnail',			''),				'where'			=> 'attachments_desc.attach_id = attachments.attach_id AND attachments.privmsgs_id = 0 AND posts.post_id = attachments.post_id',				'group_by'		=> 'attachments.attach_id'			),			array(				'target'		=> (defined('MOD_ATTACHMENT')) ? ATTACHMENTS_TABLE : '',				'primary'		=> 'attachments.attach_id',				'autoincrement'	=> 'attach_id',				array('attach_id',				'attachments.attach_id',				''),				array('post_msg_id',			'attachments.privmsgs_id',				''),				array('topic_id',				0,										''),				array('in_message',				1,										''),				array('is_orphan',				0,										''),				array('poster_id',				'attachments.user_id_1 AS poster_id',	'phpbb_user_id'),				array('physical_filename',		'attachments_desc.physical_filename',	'import_attachment'),				array('real_filename',			'attachments_desc.real_filename',		''),				array('download_count',			'attachments_desc.download_count',		''),				array('attach_comment',			'attachments_desc.comment',				array('function1' => 'phpbb_set_encoding', 'function2' => 'utf8_htmlspecialchars')),				array('extension',				'attachments_desc.extension',			''),				array('mimetype',				'attachments_desc.mimetype',			''),				array('filesize',				'attachments_desc.filesize',			''),				array('filetime',				'attachments_desc.filetime',			''),				array('thumbnail',				'attachments_desc.thumbnail',			''),				'where'			=> 'attachments_desc.attach_id = attachments.attach_id AND attachments.post_id = 0',				'group_by'		=> 'attachments.attach_id'			),			array(				'target'		=> (defined('MOD_ATTACHMENT')) ? EXTENSIONS_TABLE : '',				'query_first'	=> (defined('MOD_ATTACHMENT')) ? array('target', $convert->truncate_statement . EXTENSIONS_TABLE) : '',				'autoincrement'	=> 'extension_id',				array('extension_id',			'extensions.ext_id',				''),				array('group_id',				'extensions.group_id',				''),				array('extension',				'extensions.extension',				''),			),			array(				'target'		=> (defined('MOD_ATTACHMENT')) ? EXTENSION_GROUPS_TABLE : '',				'query_first'	=> (defined('MOD_ATTACHMENT')) ? array('target', $convert->truncate_statement . EXTENSION_GROUPS_TABLE) : '',				'autoincrement'	=> 'group_id',				array('group_id',				'extension_groups.group_id',			''),				array('group_name',				'extension_groups.group_name',			array('function1' => 'phpbb_set_encoding', 'function2' => 'utf8_htmlspecialchars')),				array('cat_id',					'extension_groups.cat_id',				'phpbb_attachment_category'),				array('allow_group',			'extension_groups.allow_group',			''),				array('download_mode',			1,										''),				array('upload_icon',			'',										''),				array('max_filesize',			'extension_groups.max_filesize',		''),				array('allowed_forums',			'extension_groups.forum_permissions',	'phpbb_attachment_forum_perms'),				array('allow_in_pm',			1,										''),			),			array(				'target'		=> BANLIST_TABLE,				'execute_first'	=> 'phpbb_check_username_collisions();',				'query_first'	=> array('target', $convert->truncate_statement . BANLIST_TABLE),				array('ban_ip',					'banlist.ban_ip',					'decode_ban_ip'),				array('ban_userid',				'banlist.ban_userid',				'phpbb_user_id'),				array('ban_email',				'banlist.ban_email',				''),				array('ban_reason',				'',									''),				array('ban_give_reason',		'',									''),				'where'			=> "banlist.ban_ip NOT LIKE '%.%'",			),			array(				'target'		=> BANLIST_TABLE,				array('ban_ip',					'banlist.ban_ip',	''),				array('ban_userid',				0,					''),				array('ban_email',				'',					''),				array('ban_reason',				'',					''),				array('ban_give_reason',		'',					''),				'where'			=> "banlist.ban_ip LIKE '%.%'",			),			array(				'target'		=> DISALLOW_TABLE,				'query_first'	=> array('target', $convert->truncate_statement . DISALLOW_TABLE),				array('disallow_username',		'disallow.disallow_username',				'phpbb_disallowed_username'),			),			array(				'target'		=> RANKS_TABLE,				'query_first'	=> array('target', $convert->truncate_statement . RANKS_TABLE),				'autoincrement'	=> 'rank_id',				array('rank_id',					'ranks.rank_id',				''),				array('rank_title',					'ranks.rank_title',				array('function1' => 'phpbb_set_default_encoding', 'function2' => 'utf8_htmlspecialchars')),				array('rank_min',					'ranks.rank_min',				array('typecast' => 'int', 'execute' => '{RESULT} = ({VALUE}[0] < 0) ? 0 : {VALUE}[0];')),				array('rank_special',				'ranks.rank_special',			''),				array('rank_image',					'ranks.rank_image',				'import_rank'),			),			array(				'target'		=> TOPICS_TABLE,				'query_first'	=> array('target', $convert->truncate_statement . TOPICS_TABLE),				'primary'		=> 'topics.topic_id',				'autoincrement'	=> 'topic_id',				array('topic_id',				'topics.topic_id',					''),				array('forum_id',				'topics.forum_id',					''),				array('icon_id',				0,									''),				array('topic_poster',			'topics.topic_poster AS poster_id',	'phpbb_user_id'),				array('topic_attachment',		((defined('MOD_ATTACHMENT')) ? 'topics.topic_attachment' : 0), ''),				array('topic_title',			'topics.topic_title',				'phpbb_set_encoding'),				array('topic_time',				'topics.topic_time',				''),				array('topic_views',			'topics.topic_views',				''),				array('topic_replies',			'topics.topic_replies',				''),				array('topic_replies_real',		'topics.topic_replies',				''),				array('topic_last_post_id',		'topics.topic_last_post_id',		''),				array('topic_status',			'topics.topic_status',				'is_topic_locked'),				array('topic_moved_id',			0,									''),				array('topic_type',				'topics.topic_type',				'phpbb_convert_topic_type'),				array('topic_first_post_id',	'topics.topic_first_post_id',		''),				array('topic_last_view_time',	'posts.post_time',					'intval'),				array('poll_title',				'vote_desc.vote_text',				array('function1' => 'null_to_str', 'function2' => 'phpbb_set_encoding', 'function3' => 'htmlspecialchars_decode', 'function4' => 'utf8_htmlspecialchars')),				array('poll_start',				'vote_desc.vote_start',				'null_to_zero'),				array('poll_length',			'vote_desc.vote_length',			'null_to_zero'),				array('poll_max_options',		1,									''),				array('poll_vote_change',		0,									''),				'left_join'		=>	array (	'topics LEFT JOIN vote_desc ON topics.topic_id = vote_desc.topic_id AND topics.topic_vote = 1',											'topics LEFT JOIN posts ON topics.topic_last_post_id = posts.post_id',									),				'where'			=> 'topics.topic_moved_id = 0',			),			array(				'target'		=> TOPICS_TABLE,				'primary'		=> 'topics.topic_id',				'autoincrement'	=> 'topic_id',				array('topic_id',				'topics.topic_id',					''),				array('forum_id',				'topics.forum_id',					''),				array('icon_id',				0,									''),				array('topic_poster',			'topics.topic_poster AS poster_id',	'phpbb_user_id'),				array('topic_attachment',		((defined('MOD_ATTACHMENT')) ? 'topics.topic_attachment' : 0), ''),				array('topic_title',			'topics.topic_title',				'phpbb_set_encoding'),				array('topic_time',				'topics.topic_time',				''),				array('topic_views',			'topics.topic_views',				''),				array('topic_replies',			'topics.topic_replies',				''),				array('topic_replies_real',		'topics.topic_replies',				''),				array('topic_last_post_id',		'topics.topic_last_post_id',		''),				array('topic_status',			ITEM_MOVED,							''),				array('topic_moved_id',			'topics.topic_moved_id',			''),				array('topic_type',				'topics.topic_type',				'phpbb_convert_topic_type'),				array('topic_first_post_id',	'topics.topic_first_post_id',		''),				array('poll_title',				'vote_desc.vote_text',				array('function1' => 'null_to_str', 'function2' => 'phpbb_set_encoding', 'function3' => 'htmlspecialchars_decode', 'function4' => 'utf8_htmlspecialchars')),				array('poll_start',				'vote_desc.vote_start',				'null_to_zero'),				array('poll_length',			'vote_desc.vote_length',			'null_to_zero'),				array('poll_max_options',		1,									''),				array('poll_vote_change',		0,									''),				'left_join'		=> 'topics LEFT JOIN vote_desc ON topics.topic_id = vote_desc.topic_id AND topics.topic_vote = 1',				'where'			=> 'topics.topic_moved_id <> 0',			),			array(				'target'		=> TOPICS_WATCH_TABLE,				'primary'		=> 'topics_watch.topic_id',				'query_first'	=> array('target', $convert->truncate_statement . TOPICS_WATCH_TABLE),				array('topic_id',				'topics_watch.topic_id',			''),				array('user_id',				'topics_watch.user_id',				'phpbb_user_id'),				array('notify_status',			'topics_watch.notify_status',		''),			),			array(				'target'		=> SMILIES_TABLE,				'query_first'	=> array('target', $convert->truncate_statement . SMILIES_TABLE),				'autoincrement'	=> 'smiley_id',				array('smiley_id',				'smilies.smilies_id',				''),				array('code',					'smilies.code',						array('function1' => 'phpbb_smilie_html_decode', 'function2' => 'phpbb_set_encoding', 'function3' => 'utf8_htmlspecialchars')),				array('emotion',				'smilies.emoticon',					'phpbb_set_encoding'),				array('smiley_url',				'smilies.smile_url',				'import_smiley'),				array('smiley_width',			'smilies.smile_url',				'get_smiley_width'),				array('smiley_height',			'smilies.smile_url',				'get_smiley_height'),				array('smiley_order',			'smilies.smilies_id',				''),				array('display_on_posting',		'smilies.smilies_id',				'get_smiley_display'),				'order_by'		=> 'smilies.smilies_id ASC',			),			array(				'target'		=> POLL_OPTIONS_TABLE,				'primary'		=> 'vote_results.vote_option_id',				'query_first'	=> array('target', $convert->truncate_statement . POLL_OPTIONS_TABLE),				array('poll_option_id',			'vote_results.vote_option_id',		''),				array('topic_id',				'vote_desc.topic_id',				''),				array('',						'topics.topic_poster AS poster_id',	'phpbb_user_id'),				array('poll_option_text',		'vote_results.vote_option_text',	array('function1' => 'phpbb_set_encoding', 'function2' => 'htmlspecialchars_decode', 'function3' => 'utf8_htmlspecialchars')),				array('poll_option_total',		'vote_results.vote_result',			''),				'where'			=> 'vote_results.vote_id = vote_desc.vote_id',				'left_join'		=> 'vote_desc LEFT JOIN topics ON topics.topic_id = vote_desc.topic_id',			),			array(				'target'		=> POLL_VOTES_TABLE,				'primary'		=> 'vote_desc.topic_id',				'query_first'	=> array('target', $convert->truncate_statement . POLL_VOTES_TABLE),				array('poll_option_id',			VOTE_CONVERTED,						''),				array('topic_id',				'vote_desc.topic_id',				''),				array('vote_user_id',			'vote_voters.vote_user_id',			'phpbb_user_id'),				array('vote_user_ip',			'vote_voters.vote_user_ip',			'decode_ip'),				'where'			=> 'vote_voters.vote_id = vote_desc.vote_id',			),			array(				'target'		=> WORDS_TABLE,				'primary'		=> 'words.word_id',				'query_first'	=> array('target', $convert->truncate_statement . WORDS_TABLE),				'autoincrement'	=> 'word_id',				array('word_id',				'words.word_id',					''),				array('word',					'words.word',						'phpbb_set_encoding'),				array('replacement',			'words.replacement',				'phpbb_set_encoding'),			),			array(				'target'		=> POSTS_TABLE,				'primary'		=> 'posts.post_id',				'autoincrement'	=> 'post_id',				'query_first'	=> array('target', $convert->truncate_statement . POSTS_TABLE),				'execute_first'	=> '					$config["max_post_chars"] = 0;					$config["min_post_chars"] = 0;					$config["max_quote_depth"] = 0;				',				array('post_id',				'posts.post_id',					''),				array('topic_id',				'posts.topic_id',					''),				array('forum_id',				'posts.forum_id',					''),				array('poster_id',				'posts.poster_id',					'phpbb_user_id'),				array('icon_id',				0,									''),				array('poster_ip',				'posts.poster_ip',					'decode_ip'),				array('post_time',				'posts.post_time',					''),				array('enable_bbcode',			'posts.enable_bbcode',				''),				array('',						'posts.enable_html',				''),				array('enable_smilies',			'posts.enable_smilies',				''),				array('enable_sig',				'posts.enable_sig',					''),				array('enable_magic_url',		1,									''),				array('post_username',			'posts.post_username',				'phpbb_set_encoding'),				array('post_subject',			'posts_text.post_subject',			'phpbb_set_encoding'),				array('post_attachment',		((defined('MOD_ATTACHMENT')) ? 'posts.post_attachment' : 0), ''),				array('post_edit_time',			'posts.post_edit_time',				array('typecast' => 'int')),				array('post_edit_count',		'posts.post_edit_count',			''),				array('post_edit_reason',		'',									''),				array('post_edit_user',			'',									'phpbb_post_edit_user'),				array('bbcode_uid',				'posts.post_time',					'make_uid'),				array('post_text',				'posts_text.post_text',				'phpbb_prepare_message'),				array('',						'posts_text.bbcode_uid AS old_bbcode_uid',			''),				array('bbcode_bitfield',		'',									'get_bbcode_bitfield'),				array('post_checksum',			'',									''),				// Commented out inline search indexing, this takes up a LOT of time. :D				// @todo We either need to enable this or call the rebuild search functionality post convert/*				array('',						'',									'search_indexing'),				array('',						'posts_text.post_text AS message',	''),				array('',						'posts_text.post_subject AS title',	''),*/				'where'			=>	'posts.post_id = posts_text.post_id'			),			array(				'target'		=> PRIVMSGS_TABLE,				'primary'		=> 'privmsgs.privmsgs_id',				'autoincrement'	=> 'msg_id',				'query_first'	=> array(					array('target', $convert->truncate_statement . PRIVMSGS_TABLE),					array('target', $convert->truncate_statement . PRIVMSGS_RULES_TABLE),				),				'execute_first'	=> '					$config["max_post_chars"] = 0;					$config["min_post_chars"] = 0;					$config["max_quote_depth"] = 0;				',				array('msg_id',					'privmsgs.privmsgs_id',				''),				array('root_level',				0,									''),				array('author_id',				'privmsgs.privmsgs_from_userid AS poster_id',	'phpbb_user_id'),				array('icon_id',				0,									''),				array('author_ip',				'privmsgs.privmsgs_ip',				'decode_ip'),				array('message_time',			'privmsgs.privmsgs_date',			''),				array('enable_bbcode',			'privmsgs.privmsgs_enable_bbcode AS enable_bbcode',	''),				array('',						'privmsgs.privmsgs_enable_html AS enable_html',	''),				array('enable_smilies',			'privmsgs.privmsgs_enable_smilies AS enable_smilies',	''),				array('enable_magic_url',		1,									''),				array('enable_sig',				'privmsgs.privmsgs_attach_sig',		''),				array('message_subject',		'privmsgs.privmsgs_subject',		'phpbb_set_encoding'), // Already specialchared in 2.0.x				array('message_attachment',		((defined('MOD_ATTACHMENT')) ? 'privmsgs.privmsgs_attachment' : 0), ''),				array('message_edit_reason',	'',									''),				array('message_edit_user',		0,									''),				array('message_edit_time',		0,									''),				array('message_edit_count',		0,									''),				array('bbcode_uid',				'privmsgs.privmsgs_date AS post_time',	'make_uid'),				array('message_text',			'privmsgs_text.privmsgs_text',			'phpbb_prepare_message'),				array('',						'privmsgs_text.privmsgs_bbcode_uid AS old_bbcode_uid',			''),				array('bbcode_bitfield',		'',										'get_bbcode_bitfield'),				array('to_address',				'privmsgs.privmsgs_to_userid',			'phpbb_privmsgs_to_userid'),				array('bcc_address',			'',										''),				'where'			=>	'privmsgs.privmsgs_id = privmsgs_text.privmsgs_text_id'			),			array(				'target'		=> PRIVMSGS_FOLDER_TABLE,				'primary'		=> 'users.user_id',				'query_first'	=> array('target', $convert->truncate_statement . PRIVMSGS_FOLDER_TABLE),				array('user_id',				'users.user_id',						'phpbb_user_id'),				array('folder_name',			$user->lang['CONV_SAVED_MESSAGES'],		''),				array('pm_count',				0,										''),				'where'			=> 'users.user_id <> -1',			),			// Inbox			array(				'target'		=> PRIVMSGS_TO_TABLE,				'primary'		=> 'privmsgs.privmsgs_id',				'query_first'	=> array('target', $convert->truncate_statement . PRIVMSGS_TO_TABLE),				array('msg_id',					'privmsgs.privmsgs_id',					''),				array('user_id',				'privmsgs.privmsgs_to_userid',			'phpbb_user_id'),				array('author_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('pm_deleted',				0,										''),				array('pm_new',					'privmsgs.privmsgs_type',				'phpbb_new_pm'),				array('pm_unread',				'privmsgs.privmsgs_type',				'phpbb_unread_pm'),				array('pm_replied',				0,										''),				array('pm_marked',				0,										''),				array('pm_forwarded',			0,										''),				array('folder_id',				PRIVMSGS_INBOX,							''),				'where'			=> 'privmsgs.privmsgs_id = privmsgs_text.privmsgs_text_id										AND (privmsgs.privmsgs_type = 0 OR privmsgs.privmsgs_type = 1 OR privmsgs.privmsgs_type = 5)',			),			// Outbox			array(				'target'		=> PRIVMSGS_TO_TABLE,				'primary'		=> 'privmsgs.privmsgs_id',				array('msg_id',					'privmsgs.privmsgs_id',					''),				array('user_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('author_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('pm_deleted',				0,										''),				array('pm_new',					0,										''),				array('pm_unread',				0,										''),				array('pm_replied',				0,										''),				array('pm_marked',				0,										''),				array('pm_forwarded',			0,										''),				array('folder_id',				PRIVMSGS_OUTBOX,						''),				'where'			=> 'privmsgs.privmsgs_id = privmsgs_text.privmsgs_text_id										AND (privmsgs.privmsgs_type = 1 OR privmsgs.privmsgs_type = 5)',			),			// Sentbox			array(				'target'		=> PRIVMSGS_TO_TABLE,				'primary'		=> 'privmsgs.privmsgs_id',				array('msg_id',					'privmsgs.privmsgs_id',					''),				array('user_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('author_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('pm_deleted',				0,										''),				array('pm_new',					'privmsgs.privmsgs_type',				'phpbb_new_pm'),				array('pm_unread',				'privmsgs.privmsgs_type',				'phpbb_unread_pm'),				array('pm_replied',				0,										''),				array('pm_marked',				0,										''),				array('pm_forwarded',			0,										''),				array('folder_id',				PRIVMSGS_SENTBOX,						''),				'where'			=> 'privmsgs.privmsgs_id = privmsgs_text.privmsgs_text_id										AND privmsgs.privmsgs_type = 2',			),			// Savebox (SAVED IN)			array(				'target'		=> PRIVMSGS_TO_TABLE,				'primary'		=> 'privmsgs.privmsgs_id',				array('msg_id',					'privmsgs.privmsgs_id',					''),				array('user_id',				'privmsgs.privmsgs_to_userid',			'phpbb_user_id'),				array('author_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('pm_deleted',				0,										''),				array('pm_new',					'privmsgs.privmsgs_type',				'phpbb_new_pm'),				array('pm_unread',				'privmsgs.privmsgs_type',				'phpbb_unread_pm'),				array('pm_replied',				0,										''),				array('pm_marked',				0,										''),				array('pm_forwarded',			0,										''),				array('folder_id',				'privmsgs.privmsgs_to_userid',			'phpbb_get_savebox_id'),				'where'			=> 'privmsgs.privmsgs_id = privmsgs_text.privmsgs_text_id										AND privmsgs.privmsgs_type = 3',			),			// Savebox (SAVED OUT)			array(				'target'		=> PRIVMSGS_TO_TABLE,				'primary'		=> 'privmsgs.privmsgs_id',				array('msg_id',					'privmsgs.privmsgs_id',					''),				array('user_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('author_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('pm_deleted',				0,										''),				array('pm_new',					'privmsgs.privmsgs_type',				'phpbb_new_pm'),				array('pm_unread',				'privmsgs.privmsgs_type',				'phpbb_unread_pm'),				array('pm_replied',				0,										''),				array('pm_marked',				0,										''),				array('pm_forwarded',			0,										''),				array('folder_id',				'privmsgs.privmsgs_from_userid',		'phpbb_get_savebox_id'),				'where'			=> 'privmsgs.privmsgs_id = privmsgs_text.privmsgs_text_id										AND privmsgs.privmsgs_type = 4',			),			array(				'target'		=> GROUPS_TABLE,				'autoincrement'	=> 'group_id',				'query_first'	=> array('target', $convert->truncate_statement . GROUPS_TABLE),				array('group_id',				'groups.group_id',					''),				array('group_type',				'groups.group_type',				'phpbb_convert_group_type'),				array('group_display',			0,									''),				array('group_legend',			0,									''),				array('group_name',				'groups.group_name',				'phpbb_convert_group_name'), // phpbb_set_encoding called in phpbb_convert_group_name				array('group_desc',				'groups.group_description',			'phpbb_set_encoding'),				'where'			=> 'groups.group_single_user = 0',			),			array(				'target'		=> USER_GROUP_TABLE,				'query_first'	=> array('target', $convert->truncate_statement . USER_GROUP_TABLE),				'execute_first'	=> '					add_default_groups();				',				array('group_id',		'groups.group_id',					''),				array('user_id',		'groups.group_moderator',			'phpbb_user_id'),				array('group_leader',	1,									''),				array('user_pending',	0,									''),				'where'			=> 'groups.group_single_user = 0 AND groups.group_moderator <> 0',			),			array(				'target'		=> USER_GROUP_TABLE,				array('group_id',		'user_group.group_id',				''),				array('user_id',		'user_group.user_id',				'phpbb_user_id'),				array('group_leader',	0,									''),				array('user_pending',	'user_group.user_pending',			''),				'where'			=> 'user_group.group_id = groups.group_id AND groups.group_single_user = 0 AND groups.group_moderator <> user_group.user_id',			),			array(				'target'		=> USERS_TABLE,				'primary'		=> 'users.user_id',				'autoincrement'	=> 'user_id',				'query_first'	=> array(					array('target', 'DELETE FROM ' . USERS_TABLE . ' WHERE user_id <> ' . ANONYMOUS),					array('target', $convert->truncate_statement . BOTS_TABLE)				),				'execute_last'	=> '					remove_invalid_users();				',				array('user_id',				'users.user_id',					'phpbb_user_id'),				array('',						'users.user_id AS poster_id',		'phpbb_user_id'),				array('user_type',				'users.user_active',				'set_user_type'),				array('group_id',				'users.user_level',					'phpbb_set_primary_group'),				array('user_regdate',			'users.user_regdate',				''),				array('username',				'users.username',					'phpbb_set_default_encoding'), // recode to utf8 with default lang				array('username_clean',			'users.username',					array('function1' => 'phpbb_set_default_encoding', 'function2' => 'utf8_clean_string')),				array('user_password',			'users.user_password',				'phpbb_hash'),				array('user_pass_convert',		1,									''),				array('user_posts',				'users.user_posts',					'intval'),				array('user_email',				'users.user_email',					'strtolower'),				array('user_email_hash',		'users.user_email',					'gen_email_hash'),				array('user_birthday',			((defined('MOD_BIRTHDAY')) ? 'users.user_birthday' : ''),	'phpbb_get_birthday'),				array('user_lastvisit',			'users.user_lastvisit',				'intval'),				array('user_lastmark',			'users.user_lastvisit',				'intval'),				array('user_lang',				$config['default_lang'],			''),				array('',						'users.user_lang',					''),				array('user_timezone',			'users.user_timezone',				'floatval'),				array('user_dateformat',		'users.user_dateformat',			array('function1' => 'phpbb_set_encoding', 'function2' => 'fill_dateformat')),				array('user_inactive_reason',	'',									'phpbb_inactive_reason'),				array('user_inactive_time',		'',									'phpbb_inactive_time'),				array('user_interests',			'users.user_interests',				array('function1' => 'phpbb_set_encoding')),				array('user_occ',				'users.user_occ',					array('function1' => 'phpbb_set_encoding')),				array('user_website',			'users.user_website',				'validate_website'),				array('user_jabber',			'',									''),				array('user_msnm',				'users.user_msnm',					array('function1' => 'phpbb_set_encoding')),				array('user_yim',				'users.user_yim',					array('function1' => 'phpbb_set_encoding')),				array('user_aim',				'users.user_aim',					array('function1' => 'phpbb_set_encoding')),				array('user_icq',				'users.user_icq',					array('function1' => 'phpbb_set_encoding')),				array('user_from',				'users.user_from',					array('function1' => 'phpbb_set_encoding')),				array('user_rank',				'users.user_rank',					'intval'),				array('user_permissions',		'',									''),				array('user_avatar',			'users.user_avatar',				'phpbb_import_avatar'),				array('user_avatar_type',		'users.user_avatar_type',			'phpbb_avatar_type'),				array('user_avatar_width',		'users.user_avatar',				'phpbb_get_avatar_width'),				array('user_avatar_height',		'users.user_avatar',				'phpbb_get_avatar_height'),				array('user_new_privmsg',		'users.user_new_privmsg',			''),				array('user_unread_privmsg',	0,									''), //'users.user_unread_privmsg'				array('user_last_privmsg',		'users.user_last_privmsg',			'intval'),				array('user_emailtime',			'users.user_emailtime',				'null_to_zero'),				array('user_notify',			'users.user_notify',				'intval'),				array('user_notify_pm',			'users.user_notify_pm',				'intval'),				array('user_notify_type',		NOTIFY_EMAIL,						''),				array('user_allow_pm',			'users.user_allow_pm',				'intval'),				array('user_allow_viewonline',	'users.user_allow_viewonline',		'intval'),				array('user_allow_viewemail',	'users.user_viewemail',				'intval'),				array('user_actkey',			'users.user_actkey',				''),				array('user_newpasswd',			'',									''), // Users need to re-request their password...				array('user_style',				$config['default_style'],			''),				array('user_options',			'',									'set_user_options'),				array('',						'users.user_popup_pm AS popuppm',	''),				array('',						'users.user_allowhtml AS html',		''),				array('',						'users.user_allowbbcode AS bbcode',	''),				array('',						'users.user_allowsmile AS smile',	''),				array('',						'users.user_attachsig AS attachsig',''),				array('user_sig_bbcode_uid',		'users.user_regdate',							'make_uid'),				array('user_sig',					'users.user_sig',								'phpbb_prepare_message'),				array('',							'users.user_sig_bbcode_uid AS old_bbcode_uid',	''),				array('user_sig_bbcode_bitfield',	'',												'get_bbcode_bitfield'),				array('',							'users.user_regdate AS post_time',				''),				'where'			=> 'users.user_id <> -1',			),		),	);}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** - Able to check for new module versions (modes changed/adjusted/added/removed)* Icons for:* - module enabled and displayed (common)* - module enabled and not displayed* - module deactivated* - category (enabled)* - category disabled*//*** @package acp*/class acp_modules{	var $module_class = '';	var $parent_id;	var $u_action;	function main($id, $mode)	{		global $db, $user, $auth, $template, $module;		global $config, $phpbb_admin_path, $phpbb_root_path, $phpEx;		// Set a global define for modules we might include (the author is able to prevent execution of code by checking this constant)		define('MODULE_INCLUDE', true);		$user->add_lang('acp/modules');		$this->tpl_name = 'acp_modules';		// module class		$this->module_class = $mode;		if ($this->module_class == 'ucp')		{			$user->add_lang('ucp');		}		else if ($this->module_class == 'mcp')		{			$user->add_lang('mcp');		}		if ($module->p_class != $this->module_class)		{			$module->add_mod_info($this->module_class);		}		$this->page_title = strtoupper($this->module_class);		$this->parent_id = request_var('parent_id', 0);		$module_id = request_var('m', 0);		$action = request_var('action', '');		$errors = array();		switch ($action)		{			case 'delete':				if (!$module_id)				{					trigger_error($user->lang['NO_MODULE_ID'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				if (confirm_box(true))				{					// Make sure we are not directly within a module					if ($module_id == $this->parent_id)					{						$sql = 'SELECT parent_id							FROM ' . MODULES_TABLE . '							WHERE module_id = ' . $module_id;						$result = $db->sql_query($sql);						$this->parent_id = (int) $db->sql_fetchfield('parent_id');						$db->sql_freeresult($result);					}					$errors = $this->delete_module($module_id);					if (!sizeof($errors))					{						$this->remove_cache_file();						trigger_error($user->lang['MODULE_DELETED'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id));					}				}				else				{					confirm_box(false, 'DELETE_MODULE', build_hidden_fields(array(						'i'			=> $id,						'mode'		=> $mode,						'parent_id'	=> $this->parent_id,						'module_id'	=> $module_id,						'action'	=> $action,					)));				}			break;						case 'enable':			case 'disable':				if (!$module_id)				{					trigger_error($user->lang['NO_MODULE_ID'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . MODULES_TABLE . "					WHERE module_class = '" . $db->sql_escape($this->module_class) . "'						AND module_id = $module_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['NO_MODULE'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				$sql = 'UPDATE ' . MODULES_TABLE . '					SET module_enabled = ' . (($action == 'enable') ? 1 : 0) . "					WHERE module_class = '" . $db->sql_escape($this->module_class) . "'						AND module_id = $module_id";				$db->sql_query($sql);				add_log('admin', 'LOG_MODULE_' . strtoupper($action), $this->lang_name($row['module_langname']));				$this->remove_cache_file();			break;			case 'move_up':			case 'move_down':				if (!$module_id)				{					trigger_error($user->lang['NO_MODULE_ID'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . MODULES_TABLE . "					WHERE module_class = '" . $db->sql_escape($this->module_class) . "'						AND module_id = $module_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['NO_MODULE'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				$move_module_name = $this->move_module_by($row, $action, 1);				if ($move_module_name !== false)				{					add_log('admin', 'LOG_MODULE_' . strtoupper($action), $this->lang_name($row['module_langname']), $move_module_name);					$this->remove_cache_file();				}					break;			case 'quickadd':				$quick_install = request_var('quick_install', '');				if (confirm_box(true))				{					if (!$quick_install || strpos($quick_install, '::') === false)					{						break;					}					list($module_basename, $module_mode) = explode('::', $quick_install);					// Check if module name and mode exist...					$fileinfo = $this->get_module_infos($module_basename);					$fileinfo = $fileinfo[$module_basename];					if (isset($fileinfo['modes'][$module_mode]))					{						$module_data = array(							'module_basename'	=> $module_basename,							'module_enabled'	=> 0,							'module_display'	=> (isset($fileinfo['modes'][$module_mode]['display'])) ? $fileinfo['modes'][$module_mode]['display'] : 1,							'parent_id'			=> $this->parent_id,							'module_class'		=> $this->module_class,							'module_langname'	=> $fileinfo['modes'][$module_mode]['title'],							'module_mode'		=> $module_mode,							'module_auth'		=> $fileinfo['modes'][$module_mode]['auth'],						);						$errors = $this->update_module_data($module_data);						if (!sizeof($errors))						{							$this->remove_cache_file();								trigger_error($user->lang['MODULE_ADDED'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id));						}					}				}				else				{					confirm_box(false, 'ADD_MODULE', build_hidden_fields(array(						'i'			=> $id,						'mode'		=> $mode,						'parent_id'	=> $this->parent_id,						'action'	=> 'quickadd',						'quick_install'	=> $quick_install,					)));				}			break;			case 'edit':				if (!$module_id)				{					trigger_error($user->lang['NO_MODULE_ID'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}								$module_row = $this->get_module_row($module_id);			// no break			case 'add':				if ($action == 'add')				{					$module_row = array(						'module_basename'	=> '',						'module_enabled'	=> 0,						'module_display'	=> 1,						'parent_id'			=> 0,						'module_langname'	=> utf8_normalize_nfc(request_var('module_langname', '', true)),						'module_mode'		=> '',						'module_auth'		=> '',					);				}								$module_data = array();				$module_data['module_basename'] = request_var('module_basename', (string) $module_row['module_basename']);				$module_data['module_enabled'] = request_var('module_enabled', (int) $module_row['module_enabled']);				$module_data['module_display'] = request_var('module_display', (int) $module_row['module_display']);				$module_data['parent_id'] = request_var('module_parent_id', (int) $module_row['parent_id']);				$module_data['module_class'] = $this->module_class;				$module_data['module_langname'] = utf8_normalize_nfc(request_var('module_langname', (string) $module_row['module_langname'], true));				$module_data['module_mode'] = request_var('module_mode', (string) $module_row['module_mode']);				$submit = (isset($_POST['submit'])) ? true : false;				if ($submit)				{					if (!$module_data['module_langname'])					{						trigger_error($user->lang['NO_MODULE_LANGNAME'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);					}					$module_type = request_var('module_type', 'category');					if ($module_type == 'category')					{						$module_data['module_basename'] = $module_data['module_mode'] = $module_data['module_auth'] = '';						$module_data['module_display'] = 1;					}					if ($action == 'edit')					{						$module_data['module_id'] = $module_id;					}					// Adjust auth row					if ($module_data['module_basename'] && $module_data['module_mode'])					{						$fileinfo = $this->get_module_infos($module_data['module_basename']);						$module_data['module_auth'] = $fileinfo[$module_data['module_basename']]['modes'][$module_data['module_mode']]['auth'];					}					$errors = $this->update_module_data($module_data);					if (!sizeof($errors))					{						$this->remove_cache_file();							trigger_error((($action == 'add') ? $user->lang['MODULE_ADDED'] : $user->lang['MODULE_EDITED']) . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id));					}				}				// Category/not category?				$is_cat = (!$module_data['module_basename']) ? true : false;				// Get module information				$module_infos = $this->get_module_infos();				// Build name options				$s_name_options = $s_mode_options = '';				foreach ($module_infos as $option => $values)				{					if (!$module_data['module_basename'])					{						$module_data['module_basename'] = $option;					}					// Name options					$s_name_options .= '<option value="' . $option . '"' . (($option == $module_data['module_basename']) ? ' selected="selected"' : '') . '>' . $this->lang_name($values['title']) . ' [' . $this->module_class . '_' . $option . ']</option>';					$template->assign_block_vars('m_names', array('NAME' => $option, 'A_NAME' => addslashes($option)));					// Build module modes					foreach ($values['modes'] as $m_mode => $m_values)					{						if ($option == $module_data['module_basename'])						{							$s_mode_options .= '<option value="' . $m_mode . '"' . (($m_mode == $module_data['module_mode']) ? ' selected="selected"' : '') . '>' . $this->lang_name($m_values['title']) . '</option>';						}												$template->assign_block_vars('m_names.modes', array(							'OPTION'		=> $m_mode,							'VALUE'			=> $this->lang_name($m_values['title']),							'A_OPTION'		=> addslashes($m_mode),							'A_VALUE'		=> addslashes($this->lang_name($m_values['title'])))						);					}				}								$s_cat_option = '<option value="0"' . (($module_data['parent_id'] == 0) ? ' selected="selected"' : '') . '>' . $user->lang['NO_PARENT'] . '</option>';				$template->assign_vars(array_merge(array(					'S_EDIT_MODULE'		=> true,					'S_IS_CAT'			=> $is_cat,					'S_CAT_OPTIONS'		=> $s_cat_option . $this->make_module_select($module_data['parent_id'], ($action == 'edit') ? $module_row['module_id'] : false, false, false, false, true),					'S_MODULE_NAMES'	=> $s_name_options,					'S_MODULE_MODES'	=> $s_mode_options,					'U_BACK'			=> $this->u_action . '&amp;parent_id=' . $this->parent_id,					'U_EDIT_ACTION'		=> $this->u_action . '&amp;parent_id=' . $this->parent_id,					'L_TITLE'			=> $user->lang[strtoupper($action) . '_MODULE'],										'MODULENAME'		=> $this->lang_name($module_data['module_langname']),					'ACTION'			=> $action,					'MODULE_ID'			=> $module_id,				),					array_change_key_case($module_data, CASE_UPPER))				);				if (sizeof($errors))				{					$template->assign_vars(array(						'S_ERROR'	=> true,						'ERROR_MSG'	=> implode('<br />', $errors))					);				}				return;			break;		}		// Default management page		if (sizeof($errors))		{			$template->assign_vars(array(				'S_ERROR'	=> true,				'ERROR_MSG'	=> implode('<br />', $errors))			);		}		if (!$this->parent_id)		{			$navigation = strtoupper($this->module_class);		}		else		{			$navigation = '<a href="' . $this->u_action . '">' . strtoupper($this->module_class) . '</a>';			$modules_nav = $this->get_module_branch($this->parent_id, 'parents', 'descending');			foreach ($modules_nav as $row)			{				$langname = $this->lang_name($row['module_langname']);				if ($row['module_id'] == $this->parent_id)				{					$navigation .= ' -&gt; ' . $langname;				}				else				{					$navigation .= ' -&gt; <a href="' . $this->u_action . '&amp;parent_id=' . $row['module_id'] . '">' . $langname . '</a>';				}			}		}		// Jumpbox		$module_box = $this->make_module_select($this->parent_id, false, false, false, false);		$sql = 'SELECT *			FROM ' . MODULES_TABLE . "			WHERE parent_id = {$this->parent_id}				AND module_class = '" . $db->sql_escape($this->module_class) . "'			ORDER BY left_id";		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			do			{				$langname = $this->lang_name($row['module_langname']);				if (!$row['module_enabled'])				{					$module_image = '<img src="images/icon_folder_lock.gif" alt="' . $user->lang['DEACTIVATED_MODULE'] .'" />';				}				else				{					$module_image = (!$row['module_basename'] || $row['left_id'] + 1 != $row['right_id']) ? '<img src="images/icon_subfolder.gif" alt="' . $user->lang['CATEGORY'] . '" />' : '<img src="images/icon_folder.gif" alt="' . $user->lang['MODULE'] . '" />';				}				$url = $this->u_action . '&amp;parent_id=' . $this->parent_id . '&amp;m=' . $row['module_id'];				$template->assign_block_vars('modules', array(					'MODULE_IMAGE'		=> $module_image,					'MODULE_TITLE'		=> $langname,					'MODULE_ENABLED'	=> ($row['module_enabled']) ? true : false,					'MODULE_DISPLAYED'	=> ($row['module_display']) ? true : false,					'S_ACP_CAT_SYSTEM'			=> ($this->module_class == 'acp' && $row['module_langname'] == 'ACP_CAT_SYSTEM') ? true : false,					'S_ACP_MODULE_MANAGEMENT'	=> ($this->module_class == 'acp' && ($row['module_basename'] == 'modules' || $row['module_langname'] == 'ACP_MODULE_MANAGEMENT')) ? true : false,					'U_MODULE'			=> $this->u_action . '&amp;parent_id=' . $row['module_id'],					'U_MOVE_UP'			=> $url . '&amp;action=move_up',					'U_MOVE_DOWN'		=> $url . '&amp;action=move_down',					'U_EDIT'			=> $url . '&amp;action=edit',					'U_DELETE'			=> $url . '&amp;action=delete',					'U_ENABLE'			=> $url . '&amp;action=enable',					'U_DISABLE'			=> $url . '&amp;action=disable')				);			}			while ($row = $db->sql_fetchrow($result));		}		else if ($this->parent_id)		{			$row = $this->get_module_row($this->parent_id);			$url = $this->u_action . '&amp;parent_id=' . $this->parent_id . '&amp;m=' . $row['module_id'];			$template->assign_vars(array(				'S_NO_MODULES'		=> true,				'MODULE_TITLE'		=> $langname,				'MODULE_ENABLED'	=> ($row['module_enabled']) ? true : false,				'MODULE_DISPLAYED'	=> ($row['module_display']) ? true : false,				'U_EDIT'			=> $url . '&amp;action=edit',				'U_DELETE'			=> $url . '&amp;action=delete',				'U_ENABLE'			=> $url . '&amp;action=enable',				'U_DISABLE'			=> $url . '&amp;action=disable')			);		}		$db->sql_freeresult($result);		// Quick adding module		$module_infos = $this->get_module_infos();		// Build quick options		$s_install_options = '';		foreach ($module_infos as $option => $values)		{			// Name options			$s_install_options .= '<optgroup label="' . $this->lang_name($values['title']) . ' [' . $this->module_class . '_' . $option . ']">';			// Build module modes			foreach ($values['modes'] as $m_mode => $m_values)			{				$s_install_options .= '<option value="' . $option . '::' . $m_mode . '">&nbsp; &nbsp;' . $this->lang_name($m_values['title']) . '</option>';			}			$s_install_options .= '</optgroup>';		}		$template->assign_vars(array(			'U_SEL_ACTION'		=> $this->u_action,			'U_ACTION'			=> $this->u_action . '&amp;parent_id=' . $this->parent_id,			'NAVIGATION'		=> $navigation,			'MODULE_BOX'		=> $module_box,			'PARENT_ID'			=> $this->parent_id,			'S_INSTALL_OPTIONS'	=> $s_install_options,			)		);	}	/**	* Get row for specified module	*/	function get_module_row($module_id)	{		global $db, $user;		$sql = 'SELECT *			FROM ' . MODULES_TABLE . "			WHERE module_class = '" . $db->sql_escape($this->module_class) . "'				AND module_id = $module_id";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);				if (!$row)		{			trigger_error($user->lang['NO_MODULE'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);		}		return $row;	}		/**	* Get available module information from module files	*/	function get_module_infos($module = '', $module_class = false)	{		global $phpbb_root_path, $phpEx;				$module_class = ($module_class === false) ? $this->module_class : $module_class;		$directory = $phpbb_root_path . 'includes/' . $module_class . '/info/';		$fileinfo = array();		if (!$module)		{			$dh = @opendir($directory);			if (!$dh)			{				return $fileinfo;			}			while (($file = readdir($dh)) !== false)			{				// Is module?				if (preg_match('/^' . $module_class . '_.+\.' . $phpEx . '$/', $file))				{					$class = str_replace(".$phpEx", '', $file) . '_info';					if (!class_exists($class))					{						include($directory . $file);					}					// Get module title tag					if (class_exists($class))					{						$c_class = new $class();						$module_info = $c_class->module();						$fileinfo[str_replace($module_class . '_', '', $module_info['filename'])] = $module_info;					}				}			}			closedir($dh);			ksort($fileinfo);		}		else		{			$filename = $module_class . '_' . basename($module);			$class = $module_class . '_' . basename($module) . '_info';			if (!class_exists($class))			{				include($directory . $filename . '.' . $phpEx);			}			// Get module title tag			if (class_exists($class))			{				$c_class = new $class();				$module_info = $c_class->module();				$fileinfo[str_replace($module_class . '_', '', $module_info['filename'])] = $module_info;			}		}				return $fileinfo;	}	/**	* Simple version of jumpbox, just lists modules	*/	function make_module_select($select_id = false, $ignore_id = false, $ignore_acl = false, $ignore_nonpost = false, $ignore_emptycat = true, $ignore_noncat = false)	{		global $db, $user, $auth, $config;		$sql = 'SELECT module_id, module_enabled, module_basename, parent_id, module_langname, left_id, right_id, module_auth			FROM ' . MODULES_TABLE . "			WHERE module_class = '" . $db->sql_escape($this->module_class) . "'			ORDER BY left_id ASC";		$result = $db->sql_query($sql);		$right = $iteration = 0;		$padding_store = array('0' => '');		$module_list = $padding = '';		while ($row = $db->sql_fetchrow($result))		{			if ($row['left_id'] < $right)			{				$padding .= '&nbsp; &nbsp;';				$padding_store[$row['parent_id']] = $padding;			}			else if ($row['left_id'] > $right + 1)			{				$padding = (isset($padding_store[$row['parent_id']])) ? $padding_store[$row['parent_id']] : '';			}			$right = $row['right_id'];			if (!$ignore_acl && $row['module_auth'])			{				// We use zero as the forum id to check - global setting.				if (!p_master::module_auth($row['module_auth'], 0))				{					continue;				}			}			// ignore this module?			if ((is_array($ignore_id) && in_array($row['module_id'], $ignore_id)) || $row['module_id'] == $ignore_id)			{				continue;			}			// empty category			if (!$row['module_basename'] && ($row['left_id'] + 1 == $row['right_id']) && $ignore_emptycat)			{				continue;			}			// ignore non-category?			if ($row['module_basename'] && $ignore_noncat)			{				continue;			}			$selected = (is_array($select_id)) ? ((in_array($row['module_id'], $select_id)) ? ' selected="selected"' : '') : (($row['module_id'] == $select_id) ? ' selected="selected"' : '');			$langname = $this->lang_name($row['module_langname']);			$module_list .= '<option value="' . $row['module_id'] . '"' . $selected . ((!$row['module_enabled']) ? ' class="disabled"' : '') . '>' . $padding . $langname . '</option>';			$iteration++;		}		$db->sql_freeresult($result);		unset($padding_store);		return $module_list;	}	/**	* Get module branch	*/	function get_module_branch($module_id, $type = 'all', $order = 'descending', $include_module = true)	{		global $db;		switch ($type)		{			case 'parents':				$condition = 'm1.left_id BETWEEN m2.left_id AND m2.right_id';			break;			case 'children':				$condition = 'm2.left_id BETWEEN m1.left_id AND m1.right_id';			break;			default:				$condition = 'm2.left_id BETWEEN m1.left_id AND m1.right_id OR m1.left_id BETWEEN m2.left_id AND m2.right_id';			break;		}		$rows = array();		$sql = 'SELECT m2.*			FROM ' . MODULES_TABLE . ' m1			LEFT JOIN ' . MODULES_TABLE . " m2 ON ($condition)			WHERE m1.module_class = '" . $db->sql_escape($this->module_class) . "'				AND m2.module_class = '" . $db->sql_escape($this->module_class) . "'				AND m1.module_id = $module_id			ORDER BY m2.left_id " . (($order == 'descending') ? 'ASC' : 'DESC');		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if (!$include_module && $row['module_id'] == $module_id)			{				continue;			}			$rows[] = $row;		}		$db->sql_freeresult($result);		return $rows;	}	/**	* Remove modules cache file	*/	function remove_cache_file()	{		global $cache;		// Sanitise for future path use, it's escaped as appropriate for queries		$p_class = str_replace(array('.', '/', '\\'), '', basename($this->module_class));				$cache->destroy('_modules_' . $p_class);		// Additionally remove sql cache		$cache->destroy('sql', MODULES_TABLE);	}	/**	* Return correct language name	*/	function lang_name($module_langname)	{		global $user;		return (!empty($user->lang[$module_langname])) ? $user->lang[$module_langname] : $module_langname;	}	/**	* Update/Add module	*	* @param bool $run_inline if set to true errors will be returned and no logs being written	*/	function update_module_data(&$module_data, $run_inline = false)	{		global $db, $user;		if (!isset($module_data['module_id']))		{			// no module_id means we're creating a new category/module			if ($module_data['parent_id'])			{				$sql = 'SELECT left_id, right_id					FROM ' . MODULES_TABLE . "					WHERE module_class = '" . $db->sql_escape($module_data['module_class']) . "'						AND module_id = " . (int) $module_data['parent_id'];				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					if ($run_inline)					{						return 'PARENT_NO_EXIST';					}					trigger_error($user->lang['PARENT_NO_EXIST'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				// Workaround				$row['left_id'] = (int) $row['left_id'];				$row['right_id'] = (int) $row['right_id'];				$sql = 'UPDATE ' . MODULES_TABLE . "					SET left_id = left_id + 2, right_id = right_id + 2					WHERE module_class = '" . $db->sql_escape($module_data['module_class']) . "'						AND left_id > {$row['right_id']}";				$db->sql_query($sql);				$sql = 'UPDATE ' . MODULES_TABLE . "					SET right_id = right_id + 2					WHERE module_class = '" . $db->sql_escape($module_data['module_class']) . "'						AND {$row['left_id']} BETWEEN left_id AND right_id";				$db->sql_query($sql);				$module_data['left_id'] = (int) $row['right_id'];				$module_data['right_id'] = (int) $row['right_id'] + 1;			}			else			{				$sql = 'SELECT MAX(right_id) AS right_id					FROM ' . MODULES_TABLE . "					WHERE module_class = '" . $db->sql_escape($module_data['module_class']) . "'";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$module_data['left_id'] = (int) $row['right_id'] + 1;				$module_data['right_id'] = (int) $row['right_id'] + 2;			}			$sql = 'INSERT INTO ' . MODULES_TABLE . ' ' . $db->sql_build_array('INSERT', $module_data);			$db->sql_query($sql);			$module_data['module_id'] = $db->sql_nextid();			if (!$run_inline)			{				add_log('admin', 'LOG_MODULE_ADD', $this->lang_name($module_data['module_langname']));			}		}		else		{			$row = $this->get_module_row($module_data['module_id']);			if ($module_data['module_basename'] && !$row['module_basename'])			{				// we're turning a category into a module				$branch = $this->get_module_branch($module_data['module_id'], 'children', 'descending', false);				if (sizeof($branch))				{					return array($user->lang['NO_CATEGORY_TO_MODULE']);				}			}			if ($row['parent_id'] != $module_data['parent_id'])			{				$this->move_module($module_data['module_id'], $module_data['parent_id']);			}			$update_ary = $module_data;			unset($update_ary['module_id']);			$sql = 'UPDATE ' . MODULES_TABLE . '				SET ' . $db->sql_build_array('UPDATE', $update_ary) . "				WHERE module_class = '" . $db->sql_escape($module_data['module_class']) . "'					AND module_id = " . (int) $module_data['module_id'];			$db->sql_query($sql);			if (!$run_inline)			{				add_log('admin', 'LOG_MODULE_EDIT', $this->lang_name($module_data['module_langname']));			}		}		return array();	}	/**	* Move module around the tree	*/	function move_module($from_module_id, $to_parent_id)	{		global $db;		$moved_modules = $this->get_module_branch($from_module_id, 'children', 'descending');		$from_data = $moved_modules[0];		$diff = sizeof($moved_modules) * 2;		$moved_ids = array();		for ($i = 0; $i < sizeof($moved_modules); ++$i)		{			$moved_ids[] = $moved_modules[$i]['module_id'];		}		// Resync parents		$sql = 'UPDATE ' . MODULES_TABLE . "			SET right_id = right_id - $diff			WHERE module_class = '" . $db->sql_escape($this->module_class) . "'				AND left_id < " . (int) $from_data['right_id'] . '				AND right_id > ' . (int) $from_data['right_id'];		$db->sql_query($sql);		// Resync righthand side of tree		$sql = 'UPDATE ' . MODULES_TABLE . "			SET left_id = left_id - $diff, right_id = right_id - $diff			WHERE module_class = '" . $db->sql_escape($this->module_class) . "'				AND left_id > " . (int) $from_data['right_id'];		$db->sql_query($sql);		if ($to_parent_id > 0)		{			$to_data = $this->get_module_row($to_parent_id);			// Resync new parents			$sql = 'UPDATE ' . MODULES_TABLE . "				SET right_id = right_id + $diff				WHERE module_class = '" . $db->sql_escape($this->module_class) . "'					AND " . (int) $to_data['right_id'] . ' BETWEEN left_id AND right_id					AND ' . $db->sql_in_set('module_id', $moved_ids, true);			$db->sql_query($sql);			// Resync the righthand side of the tree			$sql = 'UPDATE ' . MODULES_TABLE . "				SET left_id = left_id + $diff, right_id = right_id + $diff				WHERE module_class = '" . $db->sql_escape($this->module_class) . "'					AND left_id > " . (int) $to_data['right_id'] . '					AND ' . $db->sql_in_set('module_id', $moved_ids, true);			$db->sql_query($sql);			// Resync moved branch			$to_data['right_id'] += $diff;			if ($to_data['right_id'] > $from_data['right_id'])			{				$diff = '+ ' . ($to_data['right_id'] - $from_data['right_id'] - 1);			}			else			{				$diff = '- ' . abs($to_data['right_id'] - $from_data['right_id'] - 1);			}		}		else		{			$sql = 'SELECT MAX(right_id) AS right_id				FROM ' . MODULES_TABLE . "				WHERE module_class = '" . $db->sql_escape($this->module_class) . "'					AND " . $db->sql_in_set('module_id', $moved_ids, true);			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			$diff = '+ ' . (int) ($row['right_id'] - $from_data['left_id'] + 1);		}		$sql = 'UPDATE ' . MODULES_TABLE . "			SET left_id = left_id $diff, right_id = right_id $diff			WHERE module_class = '" . $db->sql_escape($this->module_class) . "'				AND " . $db->sql_in_set('module_id', $moved_ids);		$db->sql_query($sql);	}	/**	* Remove module from tree	*/	function delete_module($module_id)	{		global $db, $user;		$row = $this->get_module_row($module_id);		$branch = $this->get_module_branch($module_id, 'children', 'descending', false);		if (sizeof($branch))		{			return array($user->lang['CANNOT_REMOVE_MODULE']);		}		// If not move		$diff = 2;		$sql = 'DELETE FROM ' . MODULES_TABLE . "			WHERE module_class = '" . $db->sql_escape($this->module_class) . "'				AND module_id = $module_id";		$db->sql_query($sql);		$row['right_id'] = (int) $row['right_id'];		$row['left_id'] = (int) $row['left_id'];		// Resync tree		$sql = 'UPDATE ' . MODULES_TABLE . "			SET right_id = right_id - $diff			WHERE module_class = '" . $db->sql_escape($this->module_class) . "'				AND left_id < {$row['right_id']} AND right_id > {$row['right_id']}";		$db->sql_query($sql);		$sql = 'UPDATE ' . MODULES_TABLE . "			SET left_id = left_id - $diff, right_id = right_id - $diff			WHERE module_class = '" . $db->sql_escape($this->module_class) . "'				AND left_id > {$row['right_id']}";		$db->sql_query($sql);		add_log('admin', 'LOG_MODULE_REMOVED', $this->lang_name($row['module_langname']));		return array();	}	/**	* Move module position by $steps up/down	*/	function move_module_by($module_row, $action = 'move_up', $steps = 1)	{		global $db;		/**		* Fetch all the siblings between the module's current spot		* and where we want to move it to. If there are less than $steps		* siblings between the current spot and the target then the		* module will move as far as possible		*/		$sql = 'SELECT module_id, left_id, right_id, module_langname			FROM ' . MODULES_TABLE . "			WHERE module_class = '" . $db->sql_escape($this->module_class) . "'				AND parent_id = " . (int) $module_row['parent_id'] . '				AND ' . (($action == 'move_up') ? 'right_id < ' . (int) $module_row['right_id'] . ' ORDER BY right_id DESC' : 'left_id > ' . (int) $module_row['left_id'] . ' ORDER BY left_id ASC');		$result = $db->sql_query_limit($sql, $steps);		$target = array();		while ($row = $db->sql_fetchrow($result))		{			$target = $row;		}		$db->sql_freeresult($result);		if (!sizeof($target))		{			// The module is already on top or bottom			return false;		}		/**		* $left_id and $right_id define the scope of the nodes that are affected by the move.		* $diff_up and $diff_down are the values to substract or add to each node's left_id		* and right_id in order to move them up or down.		* $move_up_left and $move_up_right define the scope of the nodes that are moving		* up. Other nodes in the scope of ($left_id, $right_id) are considered to move down.		*/		if ($action == 'move_up')		{			$left_id = (int) $target['left_id'];			$right_id = (int) $module_row['right_id'];			$diff_up = (int) ($module_row['left_id'] - $target['left_id']);			$diff_down = (int) ($module_row['right_id'] + 1 - $module_row['left_id']);			$move_up_left = (int) $module_row['left_id'];			$move_up_right = (int) $module_row['right_id'];		}		else		{			$left_id = (int) $module_row['left_id'];			$right_id = (int) $target['right_id'];			$diff_up = (int) ($module_row['right_id'] + 1 - $module_row['left_id']);			$diff_down = (int) ($target['right_id'] - $module_row['right_id']);			$move_up_left = (int) ($module_row['right_id'] + 1);			$move_up_right = (int) $target['right_id'];		}		// Now do the dirty job		$sql = 'UPDATE ' . MODULES_TABLE . "			SET left_id = left_id + CASE				WHEN left_id BETWEEN {$move_up_left} AND {$move_up_right} THEN -{$diff_up}				ELSE {$diff_down}			END,			right_id = right_id + CASE				WHEN right_id BETWEEN {$move_up_left} AND {$move_up_right} THEN -{$diff_up}				ELSE {$diff_down}			END			WHERE module_class = '" . $db->sql_escape($this->module_class) . "'				AND left_id BETWEEN {$left_id} AND {$right_id}				AND right_id BETWEEN {$left_id} AND {$right_id}";		$db->sql_query($sql);		$this->remove_cache_file();		return $this->lang_name($target['module_langname']);	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_update_info{	function module()	{		return array(			'filename'	=> 'acp_update',			'title'		=> 'ACP_UPDATE',			'version'	=> '1.0.0',			'modes'		=> array(				'version_check'		=> array('title' => 'ACP_VERSION_CHECK', 'auth' => 'acl_a_board', 'cat' => array('ACP_AUTOMATION')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @todo [smilies] check regular expressions for special char replacements (stored specialchared in db)* @package acp*/class acp_icons{	var $u_action;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('acp/posting');		// Set up general vars		$action = request_var('action', '');		$action = (isset($_POST['add'])) ? 'add' : $action;		$action = (isset($_POST['edit'])) ? 'edit' : $action;		$action = (isset($_POST['import'])) ? 'import' : $action;		$icon_id = request_var('id', 0);		$mode = ($mode == 'smilies') ? 'smilies' : 'icons';		$this->tpl_name = 'acp_icons';		// What are we working on?		switch ($mode)		{			case 'smilies':				$table = SMILIES_TABLE;				$lang = 'SMILIES';				$fields = 'smiley';				$img_path = $config['smilies_path'];			break;			case 'icons':				$table = ICONS_TABLE;				$lang = 'ICONS';				$fields = 'icons';				$img_path = $config['icons_path'];			break;		}		$this->page_title = 'ACP_' . $lang;		// Clear some arrays		$_images = $_paks = array();		$notice = '';		// Grab file list of paks and images		if ($action == 'edit' || $action == 'add' || $action == 'import')		{			$imglist = filelist($phpbb_root_path . $img_path, '');			foreach ($imglist as $path => $img_ary)			{				if (empty($img_ary))				{					continue;				}				asort($img_ary, SORT_STRING);				foreach ($img_ary as $img)				{					$img_size = getimagesize($phpbb_root_path . $img_path . '/' . $path . $img);					if (!$img_size[0] || !$img_size[1] || strlen($img) > 255)					{						continue;					}					// adjust the width and height to be lower than 128px while perserving the aspect ratio (for icons)					if ($mode == 'icons')					{						if ($img_size[0] > 127 && $img_size[0] > $img_size[1])						{							$img_size[1] = (int) ($img_size[1] * (127 / $img_size[0]));							$img_size[0] = 127;						}						else if ($img_size[1] > 127)						{							$img_size[0] = (int) ($img_size[0] * (127 / $img_size[1]));							$img_size[1] = 127;						}					}					$_images[$path . $img]['file'] = $path . $img;					$_images[$path . $img]['width'] = $img_size[0];					$_images[$path . $img]['height'] = $img_size[1];				}			}			unset($imglist);			if ($dir = @opendir($phpbb_root_path . $img_path))			{				while (($file = readdir($dir)) !== false)				{					if (is_file($phpbb_root_path . $img_path . '/' . $file) && preg_match('#\.pak$#i', $file))					{						$_paks[] = $file;					}				}				closedir($dir);				if (!empty($_paks))				{					asort($_paks, SORT_STRING);				}			}		}		// What shall we do today? Oops, I believe that's trademarked ...		switch ($action)		{			case 'edit':				unset($_images);				$_images = array();			// no break;			case 'add':				$smilies = $default_row = array();				$smiley_options = $order_list = $add_order_list = '';				if ($action == 'add' && $mode == 'smilies')				{					$sql = 'SELECT *						FROM ' . SMILIES_TABLE . '						ORDER BY smiley_order';					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						if (empty($smilies[$row['smiley_url']]))						{							$smilies[$row['smiley_url']] = $row;						}					}					$db->sql_freeresult($result);					if (sizeof($smilies))					{						foreach ($smilies as $row)						{							$selected = false;							if (!$smiley_options)							{								$selected = true;								$default_row = $row;							}							$smiley_options .= '<option value="' . $row['smiley_url'] . '"' . (($selected) ? ' selected="selected"' : '') . '>' . $row['smiley_url'] . '</option>';							$template->assign_block_vars('smile', array(								'SMILEY_URL'	=> addslashes($row['smiley_url']),								'CODE'			=> addslashes($row['code']),								'EMOTION'		=> addslashes($row['emotion']),								'WIDTH'			=> $row['smiley_width'],								'HEIGHT'		=> $row['smiley_height'],								'ORDER'			=> $row['smiley_order'] + 1,							));						}					}				}				$sql = "SELECT *					FROM $table					ORDER BY {$fields}_order " . (($icon_id || $action == 'add') ? 'DESC' : 'ASC');				$result = $db->sql_query($sql);				$data = array();				$after = false;				$display = 0;				$order_lists = array('', '');				$add_order_lists = array('', '');				$display_count = 0;				while ($row = $db->sql_fetchrow($result))				{					if ($action == 'add')					{						unset($_images[$row[$fields . '_url']]);					}					if ($row[$fields . '_id'] == $icon_id)					{						$after = true;						$display = $row['display_on_posting'];						$data[$row[$fields . '_url']] = $row;					}					else					{						if ($action == 'edit' && !$icon_id)						{							$data[$row[$fields . '_url']] = $row;						}						$selected = '';						if (!empty($after))						{							$selected = ' selected="selected"';							$after = false;						}						if ($row['display_on_posting'])						{							$display_count++;						}						$after_txt = ($mode == 'smilies') ? $row['code'] : $row['icons_url'];						$order_lists[$row['display_on_posting']] = '<option value="' . ($row[$fields . '_order'] + 1) . '"' . $selected . '>' . sprintf($user->lang['AFTER_' . $lang], ' -&gt; ' . $after_txt) . '</option>' . $order_lists[$row['display_on_posting']];						if (!empty($default_row))						{							$add_order_lists[$row['display_on_posting']] = '<option value="' . ($row[$fields . '_order'] + 1) . '"' . (($row[$fields . '_id'] == $default_row['smiley_id']) ? ' selected="selected"' : '') . '>' . sprintf($user->lang['AFTER_' . $lang], ' -&gt; ' . $after_txt) . '</option>' . $add_order_lists[$row['display_on_posting']];						}					}				}				$db->sql_freeresult($result);				$order_list = '<option value="1"' . ((!isset($after)) ? ' selected="selected"' : '') . '>' . $user->lang['FIRST'] . '</option>';				$add_order_list = '<option value="1">' . $user->lang['FIRST'] . '</option>';				if ($action == 'add')				{					$data = $_images;				}				$colspan = (($mode == 'smilies') ? 7 : 5);				$colspan += ($icon_id) ? 1 : 0;				$colspan += ($action == 'add') ? 2 : 0;				$template->assign_vars(array(					'S_EDIT'		=> true,					'S_SMILIES'		=> ($mode == 'smilies') ? true : false,					'S_ADD'			=> ($action == 'add') ? true : false,					'S_ORDER_LIST_DISPLAY'		=> $order_list . $order_lists[1],					'S_ORDER_LIST_UNDISPLAY'	=> $order_list . $order_lists[0],					'S_ORDER_LIST_DISPLAY_COUNT'	=> $display_count + 1,					'L_TITLE'		=> $user->lang['ACP_' . $lang],					'L_EXPLAIN'		=> $user->lang['ACP_' . $lang . '_EXPLAIN'],					'L_CONFIG'		=> $user->lang[$lang . '_CONFIG'],					'L_URL'			=> $user->lang[$lang . '_URL'],					'L_LOCATION'	=> $user->lang[$lang . '_LOCATION'],					'L_WIDTH'		=> $user->lang[$lang . '_WIDTH'],					'L_HEIGHT'		=> $user->lang[$lang . '_HEIGHT'],					'L_ORDER'		=> $user->lang[$lang . '_ORDER'],					'L_NO_ICONS'	=> $user->lang['NO_' . $lang . '_' . strtoupper($action)],					'COLSPAN'		=> $colspan,					'ID'			=> $icon_id,					'U_BACK'		=> $this->u_action,					'U_ACTION'		=> $this->u_action . '&amp;action=' . (($action == 'add') ? 'create' : 'modify'),				));				foreach ($data as $img => $img_row)				{					$template->assign_block_vars('items', array(						'IMG'		=> $img,						'A_IMG'		=> addslashes($img),						'IMG_SRC'	=> $phpbb_root_path . $img_path . '/' . $img,						'CODE'		=> ($mode == 'smilies' && isset($img_row['code'])) ? $img_row['code'] : '',						'EMOTION'	=> ($mode == 'smilies' && isset($img_row['emotion'])) ? $img_row['emotion'] : '',						'S_ID'				=> (isset($img_row[$fields . '_id'])) ? true : false,						'ID'				=> (isset($img_row[$fields . '_id'])) ? $img_row[$fields . '_id'] : 0,						'WIDTH'				=> (!empty($img_row[$fields .'_width'])) ? $img_row[$fields .'_width'] : $img_row['width'],						'HEIGHT'			=> (!empty($img_row[$fields .'_height'])) ? $img_row[$fields .'_height'] : $img_row['height'],						'POSTING_CHECKED'	=> (!empty($img_row['display_on_posting']) || $action == 'add') ? ' checked="checked"' : '',					));				}				// Ok, another row for adding an addition code for a pre-existing image...				if ($action == 'add' && $mode == 'smilies' && sizeof($smilies))				{					$template->assign_vars(array(						'S_ADD_CODE'		=> true,						'S_IMG_OPTIONS'		=> $smiley_options,						'S_ADD_ORDER_LIST_DISPLAY'		=> $add_order_list . $add_order_lists[1],						'S_ADD_ORDER_LIST_UNDISPLAY'	=> $add_order_list . $add_order_lists[0],						'IMG_SRC'			=> $phpbb_root_path . $img_path . '/' . $default_row['smiley_url'],						'IMG_PATH'			=> $img_path,						'PHPBB_ROOT_PATH'	=> $phpbb_root_path,						'CODE'				=> $default_row['code'],						'EMOTION'			=> $default_row['emotion'],						'WIDTH'				=> $default_row['smiley_width'],						'HEIGHT'			=> $default_row['smiley_height'],					));				}				return;			break;			case 'create':			case 'modify':				// Get items to create/modify				$images = (isset($_POST['image'])) ? array_keys(request_var('image', array('' => 0))) : array();				// Now really get the items				$image_id		= (isset($_POST['id'])) ? request_var('id', array('' => 0)) : array();				$image_order	= (isset($_POST['order'])) ? request_var('order', array('' => 0)) : array();				$image_width	= (isset($_POST['width'])) ? request_var('width', array('' => 0)) : array();				$image_height	= (isset($_POST['height'])) ? request_var('height', array('' => 0)) : array();				$image_add		= (isset($_POST['add_img'])) ? request_var('add_img', array('' => 0)) : array();				$image_emotion	= utf8_normalize_nfc(request_var('emotion', array('' => ''), true));				$image_code		= utf8_normalize_nfc(request_var('code', array('' => ''), true));				$image_display_on_posting = (isset($_POST['display_on_posting'])) ? request_var('display_on_posting', array('' => 0)) : array();				// Ok, add the relevant bits if we are adding new codes to existing emoticons...				if (!empty($_POST['add_additional_code']))				{					$add_image			= request_var('add_image', '');					$add_code			= utf8_normalize_nfc(request_var('add_code', '', true));					$add_emotion		= utf8_normalize_nfc(request_var('add_emotion', '', true));					if ($add_image && $add_emotion && $add_code)					{						$images[] = $add_image;						$image_add[$add_image] = true;						$image_code[$add_image] = $add_code;						$image_emotion[$add_image] = $add_emotion;						$image_width[$add_image] = request_var('add_width', 0);						$image_height[$add_image] = request_var('add_height', 0);						if (!empty($_POST['add_display_on_posting']))						{							$image_display_on_posting[$add_image] = 1;						}						$image_order[$add_image] = request_var('add_order', 0);					}				}				if ($mode == 'smilies' && $action == 'create')				{					$smiley_count = $this->item_count($table);					$addable_smileys_count = sizeof($images);					foreach ($images as $image)					{						if (!isset($image_add[$image]))						{							--$addable_smileys_count;						}					}					if ($smiley_count + $addable_smileys_count > SMILEY_LIMIT)					{						trigger_error(sprintf($user->lang['TOO_MANY_SMILIES'], SMILEY_LIMIT) . adm_back_link($this->u_action), E_USER_WARNING);					}				}				$icons_updated = 0;				$errors = array();				foreach ($images as $image)				{					if ($mode == 'smilies' && ($image_emotion[$image] == '' || $image_code[$image] == ''))					{						$errors[$image] = 'SMILIE_NO_' . (($image_emotion[$image] == '') ? 'EMOTION' : 'CODE');					}					else if ($action == 'create' && !isset($image_add[$image]))					{						// skip images where add wasn't checked					}					else if (!file_exists($phpbb_root_path . $img_path . '/' . $image))					{						$errors[$image] = 'SMILIE_NO_FILE';					}					else					{						if ($image_width[$image] == 0 || $image_height[$image] == 0)						{							$img_size = getimagesize($phpbb_root_path . $img_path . '/' . $image);							$image_width[$image] = $img_size[0];							$image_height[$image] = $img_size[1];						}						// Adjust image width/height for icons						if ($mode == 'icons')						{							if ($image_width[$image] > 127 && $image_width[$image] > $image_height[$image])							{								$image_height[$image] = (int) ($image_height[$image] * (127 / $image_width[$image]));								$image_width[$image] = 127;							}							else if ($image_height[$image] > 127)							{								$image_width[$image] = (int) ($image_width[$image] * (127 / $image_height[$image]));								$image_height[$image] = 127;							}						}						$img_sql = array(							$fields . '_url'		=> $image,							$fields . '_width'		=> $image_width[$image],							$fields . '_height'		=> $image_height[$image],							'display_on_posting'	=> (isset($image_display_on_posting[$image])) ? 1 : 0,						);						if ($mode == 'smilies')						{							$img_sql = array_merge($img_sql, array(								'emotion'	=> $image_emotion[$image],								'code'		=> $image_code[$image])							);						}						// Image_order holds the 'new' order value						if (!empty($image_order[$image]))						{							$img_sql = array_merge($img_sql, array(								$fields . '_order'	=>	$image_order[$image])							);							// Since we always add 'after' an item, we just need to increase all following + the current by one							$sql = "UPDATE $table								SET {$fields}_order = {$fields}_order + 1								WHERE {$fields}_order >= {$image_order[$image]}";							$db->sql_query($sql);							// If we adjust the order, we need to adjust all other orders too - they became inaccurate...							foreach ($image_order as $_image => $_order)							{								if ($_image == $image)								{									continue;								}								if ($_order >= $image_order[$image])								{									$image_order[$_image]++;								}							}						}						if ($action == 'modify'  && !empty($image_id[$image]))						{							$sql = "UPDATE $table								SET " . $db->sql_build_array('UPDATE', $img_sql) . "								WHERE {$fields}_id = " . $image_id[$image];							$db->sql_query($sql);							$icons_updated++;						}						else if ($action !== 'modify')						{							$sql = "INSERT INTO $table " . $db->sql_build_array('INSERT', $img_sql);							$db->sql_query($sql);							$icons_updated++;						} 					}				}				$cache->destroy('_icons');				$cache->destroy('sql', $table);				$level = E_USER_NOTICE;				switch ($icons_updated)				{					case 0:						$suc_lang = "{$lang}_NONE";						$level = E_USER_WARNING;						break;					case 1:						$suc_lang = "{$lang}_ONE";						break;					default:						$suc_lang = $lang;				}				$errormsgs = '';				foreach ($errors as $img => $error)				{					$errormsgs .= '<br />' . sprintf($user->lang[$error], $img);				}				if ($action == 'modify')				{					trigger_error($user->lang[$suc_lang . '_EDITED'] . $errormsgs . adm_back_link($this->u_action), $level);				}				else				{					trigger_error($user->lang[$suc_lang . '_ADDED'] . $errormsgs . adm_back_link($this->u_action), $level);				}			break;			case 'import':				$pak = request_var('pak', '');				$current = request_var('current', '');				if ($pak != '')				{					$order = 0;					if (!($pak_ary = @file($phpbb_root_path . $img_path . '/' . $pak)))					{						trigger_error($user->lang['PAK_FILE_NOT_READABLE'] . adm_back_link($this->u_action), E_USER_WARNING);					}					// Make sure the pak_ary is valid					foreach ($pak_ary as $pak_entry)					{						if (preg_match_all("#'(.*?)', ?#", $pak_entry, $data))						{							if ((sizeof($data[1]) != 4 && $mode == 'icons') ||								((sizeof($data[1]) != 6 || (empty($data[1][4]) || empty($data[1][5]))) && $mode == 'smilies' ))							{								trigger_error($user->lang['WRONG_PAK_TYPE'] . adm_back_link($this->u_action), E_USER_WARNING);							}						}						else						{							trigger_error($user->lang['WRONG_PAK_TYPE'] . adm_back_link($this->u_action), E_USER_WARNING);						}					}					// The user has already selected a smilies_pak file					if ($current == 'delete')					{						switch ($db->sql_layer)						{							case 'sqlite':							case 'firebird':								$db->sql_query('DELETE FROM ' . $table);							break;							default:								$db->sql_query('TRUNCATE TABLE ' . $table);							break;						}						switch ($mode)						{							case 'smilies':							break;							case 'icons':								// Reset all icon_ids								$db->sql_query('UPDATE ' . TOPICS_TABLE . ' SET icon_id = 0');								$db->sql_query('UPDATE ' . POSTS_TABLE . ' SET icon_id = 0');							break;						}					}					else					{						$cur_img = array();						$field_sql = ($mode == 'smilies') ? 'code' : 'icons_url';						$sql = "SELECT $field_sql							FROM $table";						$result = $db->sql_query($sql);						while ($row = $db->sql_fetchrow($result))						{							++$order;							$cur_img[$row[$field_sql]] = 1;						}						$db->sql_freeresult($result);					}					if ($mode == 'smilies')					{						$smiley_count = $this->item_count($table);						if ($smiley_count + sizeof($pak_ary) > SMILEY_LIMIT)						{							trigger_error(sprintf($user->lang['TOO_MANY_SMILIES'], SMILEY_LIMIT) . adm_back_link($this->u_action), E_USER_WARNING);						}					}					foreach ($pak_ary as $pak_entry)					{						$data = array();						if (preg_match_all("#'(.*?)', ?#", $pak_entry, $data))						{							if ((sizeof($data[1]) != 4 && $mode == 'icons') ||								(sizeof($data[1]) != 6 && $mode == 'smilies'))							{								trigger_error($user->lang['WRONG_PAK_TYPE'] . adm_back_link($this->u_action), E_USER_WARNING);							}							// Stripslash here because it got addslashed before... (on export)							$img = stripslashes($data[1][0]);							$width = stripslashes($data[1][1]);							$height = stripslashes($data[1][2]);							$display_on_posting = stripslashes($data[1][3]);							if (isset($data[1][4]) && isset($data[1][5]))							{								$emotion = stripslashes($data[1][4]);								$code = stripslashes($data[1][5]);							}							if ($current == 'replace' &&								(($mode == 'smilies' && !empty($cur_img[$code])) ||								($mode == 'icons' && !empty($cur_img[$img]))))							{								$replace_sql = ($mode == 'smilies') ? $code : $img;								$sql = array(									$fields . '_url'		=> $img,									$fields . '_height'		=> (int) $height,									$fields . '_width'		=> (int) $width,									'display_on_posting'	=> (int) $display_on_posting,								);								if ($mode == 'smilies')								{									$sql = array_merge($sql, array(										'emotion'				=> $emotion,									));								}								$sql = "UPDATE $table SET " . $db->sql_build_array('UPDATE', $sql) . "									WHERE $field_sql = '" . $db->sql_escape($replace_sql) . "'";								$db->sql_query($sql);							}							else							{								++$order;								$sql = array(									$fields . '_url'	=> $img,									$fields . '_height'	=> (int) $height,									$fields . '_width'	=> (int) $width,									$fields . '_order'	=> (int) $order,									'display_on_posting'=> (int) $display_on_posting,								);								if ($mode == 'smilies')								{									$sql = array_merge($sql, array(										'code'				=> $code,										'emotion'			=> $emotion,									));								}								$db->sql_query("INSERT INTO $table " . $db->sql_build_array('INSERT', $sql));							}						}					}					$cache->destroy('_icons');					$cache->destroy('sql', $table);					trigger_error($user->lang[$lang . '_IMPORT_SUCCESS'] . adm_back_link($this->u_action));				}				else				{					$pak_options = '';					foreach ($_paks as $pak)					{						$pak_options .= '<option value="' . $pak . '">' . htmlspecialchars($pak) . '</option>';					}					$template->assign_vars(array(						'S_CHOOSE_PAK'		=> true,						'S_PAK_OPTIONS'		=> $pak_options,						'L_TITLE'			=> $user->lang['ACP_' . $lang],						'L_EXPLAIN'			=> $user->lang['ACP_' . $lang . '_EXPLAIN'],						'L_NO_PAK_OPTIONS'	=> $user->lang['NO_' . $lang . '_PAK'],						'L_CURRENT'			=> $user->lang['CURRENT_' . $lang],						'L_CURRENT_EXPLAIN'	=> $user->lang['CURRENT_' . $lang . '_EXPLAIN'],						'L_IMPORT_SUBMIT'	=> $user->lang['IMPORT_' . $lang],						'U_BACK'		=> $this->u_action,						'U_ACTION'		=> $this->u_action . '&amp;action=import',						)					);				}			break;			case 'export':				$this->page_title = 'EXPORT_' . $lang;				$this->tpl_name = 'message_body';				$template->assign_vars(array(					'MESSAGE_TITLE'		=> $user->lang['EXPORT_' . $lang],					'MESSAGE_TEXT'		=> sprintf($user->lang['EXPORT_' . $lang . '_EXPLAIN'], '<a href="' . $this->u_action . '&amp;action=send">', '</a>'),					'S_USER_NOTICE'		=> true,					)				);				return;			break;			case 'send':				$sql = "SELECT *					FROM $table					ORDER BY {$fields}_order";				$result = $db->sql_query($sql);				$pak = '';				while ($row = $db->sql_fetchrow($result))				{					$pak .= "'" . addslashes($row[$fields . '_url']) . "', ";					$pak .= "'" . addslashes($row[$fields . '_width']) . "', ";					$pak .= "'" . addslashes($row[$fields . '_height']) . "', ";					$pak .= "'" . addslashes($row['display_on_posting']) . "', ";					if ($mode == 'smilies')					{						$pak .= "'" . addslashes($row['emotion']) . "', ";						$pak .= "'" . addslashes($row['code']) . "', ";					}					$pak .= "\n";				}				$db->sql_freeresult($result);				if ($pak != '')				{					garbage_collection();					header('Pragma: public');					// Send out the Headers					header('Content-Type: text/x-delimtext; name="' . $mode . '.pak"');					header('Content-Disposition: inline; filename="' . $mode . '.pak"');					echo $pak;					flush();					exit;				}				else				{					trigger_error($user->lang['NO_' . strtoupper($fields) . '_EXPORT'] . adm_back_link($this->u_action), E_USER_WARNING);				}			break;			case 'delete':				if (confirm_box(true))				{					$sql = "DELETE FROM $table						WHERE {$fields}_id = $icon_id";					$db->sql_query($sql);					switch ($mode)					{						case 'smilies':						break;						case 'icons':							// Reset appropriate icon_ids							$db->sql_query('UPDATE ' . TOPICS_TABLE . "								SET icon_id = 0								WHERE icon_id = $icon_id");							$db->sql_query('UPDATE ' . POSTS_TABLE . "								SET icon_id = 0								WHERE icon_id = $icon_id");						break;					}					$notice = $user->lang[$lang . '_DELETED'];					$cache->destroy('_icons');					$cache->destroy('sql', $table);				}				else				{					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(						'i'			=> $id,						'mode'		=> $mode,						'id'		=> $icon_id,						'action'	=> 'delete',					)));				}			break;			case 'move_up':			case 'move_down':				// Get current order id...				$sql = "SELECT {$fields}_order as current_order					FROM $table					WHERE {$fields}_id = $icon_id";				$result = $db->sql_query($sql);				$current_order = (int) $db->sql_fetchfield('current_order');				$db->sql_freeresult($result);				if ($current_order == 0 && $action == 'move_up')				{					break;				}				// on move_down, switch position with next order_id...				// on move_up, switch position with previous order_id...				$switch_order_id = ($action == 'move_down') ? $current_order + 1 : $current_order - 1;				//				$sql = "UPDATE $table					SET {$fields}_order = $current_order					WHERE {$fields}_order = $switch_order_id						AND {$fields}_id <> $icon_id";				$db->sql_query($sql);				// Only update the other entry too if the previous entry got updated				if ($db->sql_affectedrows())				{					$sql = "UPDATE $table						SET {$fields}_order = $switch_order_id						WHERE {$fields}_order = $current_order							AND {$fields}_id = $icon_id";					$db->sql_query($sql);				}				$cache->destroy('_icons');				$cache->destroy('sql', $table);			break;		}		// By default, check that image_order is valid and fix it if necessary		$sql = "SELECT {$fields}_id AS order_id, {$fields}_order AS fields_order			FROM $table			ORDER BY display_on_posting DESC, {$fields}_order";		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			$order = 0;			do			{				++$order;				if ($row['fields_order'] != $order)				{					$db->sql_query("UPDATE $table						SET {$fields}_order = $order						WHERE {$fields}_id = " . $row['order_id']);				}			}			while ($row = $db->sql_fetchrow($result));		}		$db->sql_freeresult($result);		$template->assign_vars(array(			'L_TITLE'			=> $user->lang['ACP_' . $lang],			'L_EXPLAIN'			=> $user->lang['ACP_' . $lang . '_EXPLAIN'],			'L_IMPORT'			=> $user->lang['IMPORT_' . $lang],			'L_EXPORT'			=> $user->lang['EXPORT_' . $lang],			'L_NOT_DISPLAYED'	=> $user->lang[$lang . '_NOT_DISPLAYED'],			'L_ICON_ADD'		=> $user->lang['ADD_' . $lang],			'L_ICON_EDIT'		=> $user->lang['EDIT_' . $lang],			'NOTICE'			=> $notice,			'COLSPAN'			=> ($mode == 'smilies') ? 5 : 3,			'S_SMILIES'			=> ($mode == 'smilies') ? true : false,			'U_ACTION'			=> $this->u_action,			'U_IMPORT'			=> $this->u_action . '&amp;action=import',			'U_EXPORT'			=> $this->u_action . '&amp;action=export',			)		);		$spacer = false;		$pagination_start = request_var('start', 0);		$item_count = $this->item_count($table);		$sql = "SELECT *			FROM $table			ORDER BY {$fields}_order ASC";		$result = $db->sql_query_limit($sql, $config['smilies_per_page'], $pagination_start);		while ($row = $db->sql_fetchrow($result))		{			$alt_text = ($mode == 'smilies') ? $row['code'] : '';			$template->assign_block_vars('items', array(				'S_SPACER'		=> (!$spacer && !$row['display_on_posting']) ? true : false,				'ALT_TEXT'		=> $alt_text,				'IMG_SRC'		=> $phpbb_root_path . $img_path . '/' . $row[$fields . '_url'],				'WIDTH'			=> $row[$fields . '_width'],				'HEIGHT'		=> $row[$fields . '_height'],				'CODE'			=> (isset($row['code'])) ? $row['code'] : '',				'EMOTION'		=> (isset($row['emotion'])) ? $row['emotion'] : '',				'U_EDIT'		=> $this->u_action . '&amp;action=edit&amp;id=' . $row[$fields . '_id'],				'U_DELETE'		=> $this->u_action . '&amp;action=delete&amp;id=' . $row[$fields . '_id'],				'U_MOVE_UP'		=> $this->u_action . '&amp;action=move_up&amp;id=' . $row[$fields . '_id'] . '&amp;start=' . $pagination_start,				'U_MOVE_DOWN'	=> $this->u_action . '&amp;action=move_down&amp;id=' . $row[$fields . '_id'] . '&amp;start=' . $pagination_start,			));			if (!$spacer && !$row['display_on_posting'])			{				$spacer = true;			}		}		$db->sql_freeresult($result);		$template->assign_var('PAGINATION',			generate_pagination($this->u_action, $item_count, $config['smilies_per_page'], $pagination_start, true)		);	}	/**	 * Returns the count of smilies or icons in the database	 *	 * @param string $table The table of items to count.	 * @return int number of items	 */	/* private */ function item_count($table)	{		global $db;		$sql = "SELECT COUNT(*) AS item_count			FROM $table";		$result = $db->sql_query($sql);		$item_count = (int) $db->sql_fetchfield('item_count');		$db->sql_freeresult($result);		return $item_count;	}}?>
<?php/**** acp_forums [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// Forum Admin$lang = array_merge($lang, array(	'AUTO_PRUNE_DAYS'			=> 'Auto-prune post age',	'AUTO_PRUNE_DAYS_EXPLAIN'	=> 'Number of days since last post after which topic is removed.',	'AUTO_PRUNE_FREQ'			=> 'Auto-prune frequency',	'AUTO_PRUNE_FREQ_EXPLAIN'	=> 'Time in days between pruning events.',	'AUTO_PRUNE_VIEWED'			=> 'Auto-prune post viewed age',	'AUTO_PRUNE_VIEWED_EXPLAIN'	=> 'Number of days since topic was viewed after which topic is removed.',	'CONTINUE'						=> 'Continue',	'COPY_PERMISSIONS'				=> 'Copy permissions from',	'COPY_PERMISSIONS_EXPLAIN'		=> 'To ease up the permission setup for your new forum, you can copy the permissions of an existing forum.',	'COPY_PERMISSIONS_ADD_EXPLAIN'	=> 'Once created, the forum will have the same permissions as the one you select here. If no forum is selected the newly created forum will not be visible until permissions had been set.',	'COPY_PERMISSIONS_EDIT_EXPLAIN'	=> 'If you select to copy permissions, the forum will have the same permissions as the one you select here. This will overwrite any permissions you have previously set for this forum with the permissions of the forum you select here. If no forum is selected the current permissions will be kept.',	'COPY_TO_ACL'					=> 'Alternatively, you are also able to %sset up new permissions%s for this forum.',	'CREATE_FORUM'					=> 'Create new forum',	'DECIDE_MOVE_DELETE_CONTENT'		=> 'Delete content or move to forum',	'DECIDE_MOVE_DELETE_SUBFORUMS'		=> 'Delete subforums or move to forum',	'DEFAULT_STYLE'						=> 'Default style',	'DELETE_ALL_POSTS'					=> 'Delete posts',	'DELETE_SUBFORUMS'					=> 'Delete subforums and posts',	'DISPLAY_ACTIVE_TOPICS'				=> 'Enable active topics',	'DISPLAY_ACTIVE_TOPICS_EXPLAIN'		=> 'If set to yes active topics in selected subforums will be displayed under this category.',	'EDIT_FORUM'					=> 'Edit forum',	'ENABLE_INDEXING'				=> 'Enable search indexing',	'ENABLE_INDEXING_EXPLAIN'		=> 'If set to yes posts made to this forum will be indexed for searching.',	'ENABLE_POST_REVIEW'			=> 'Enable post review',	'ENABLE_POST_REVIEW_EXPLAIN'	=> 'If set to yes users are able to review their post if new posts were made to the topic while users wrote theirs. This should be disabled for chat forums.',	'ENABLE_QUICK_REPLY'			=> 'Enable quick reply',	'ENABLE_QUICK_REPLY_EXPLAIN'	=> 'Enables the quick reply in this forum. This setting is not considered if the quick reply is disabled board wide. The quick reply will only be displayed for users who have permission to post in this forum.',	'ENABLE_RECENT'					=> 'Display active topics',	'ENABLE_RECENT_EXPLAIN'			=> 'If set to yes topics made to this forum will be shown in the active topics list.',	'ENABLE_TOPIC_ICONS'			=> 'Enable topic icons',	'FORUM_ADMIN'						=> 'Forum administration',	'FORUM_ADMIN_EXPLAIN'				=> 'In phpBB3 everything is forum based. A category is just a special type of forum. Each forum can have an unlimited number of sub-forums and you can determine whether each may be posted to or not (i.e. whether it acts like an old category). Here you can add, edit, delete, lock, unlock individual forums as well as set certain additional controls. If your posts and topics have got out of sync you can also resynchronise a forum. <strong>You need to copy or set appropriate permissions for newly created forums to have them displayed.</strong>',	'FORUM_AUTO_PRUNE'					=> 'Enable auto-pruning',	'FORUM_AUTO_PRUNE_EXPLAIN'			=> 'Prunes the forum of topics, set the frequency/age parameters below.',	'FORUM_CREATED'						=> 'Forum created successfully.',	'FORUM_DATA_NEGATIVE'				=> 'Pruning parameters cannot be negative.',	'FORUM_DESC_TOO_LONG'				=> 'The forum description is too long, it must be less than 4000 characters.',	'FORUM_DELETE'						=> 'Delete forum',	'FORUM_DELETE_EXPLAIN'				=> 'The form below will allow you to delete a forum. If the forum is postable you are able to decide where you want to put all topics (or forums) it contained.',	'FORUM_DELETED'						=> 'Forum successfully deleted.',	'FORUM_DESC'						=> 'Description',	'FORUM_DESC_EXPLAIN'				=> 'Any HTML markup entered here will be displayed as is.',	'FORUM_EDIT_EXPLAIN'				=> 'The form below will allow you to customise this forum. Please note that moderation and post count controls are set via forum permissions for each user or usergroup.',	'FORUM_IMAGE'						=> 'Forum image',	'FORUM_IMAGE_EXPLAIN'				=> 'Location, relative to the phpBB root directory, of an additional image to associate with this forum.',	'FORUM_IMAGE_NO_EXIST'				=> 'The specified forum image does not exist',	'FORUM_LINK_EXPLAIN'				=> 'Full URL (including the protocol, i.e.: <samp>http://</samp>) to the destination location that clicking this forum will take the user, e.g.: <samp>http://www.phpbb.com/</samp>.',	'FORUM_LINK_TRACK'					=> 'Track link redirects',	'FORUM_LINK_TRACK_EXPLAIN'			=> 'Records the number of times a forum link was clicked.',	'FORUM_NAME'						=> 'Forum name',	'FORUM_NAME_EMPTY'					=> 'You must enter a name for this forum.',	'FORUM_PARENT'						=> 'Parent forum',	'FORUM_PASSWORD'					=> 'Forum password',	'FORUM_PASSWORD_CONFIRM'			=> 'Confirm forum password',	'FORUM_PASSWORD_CONFIRM_EXPLAIN'	=> 'Only needs to be set if a forum password is entered.',	'FORUM_PASSWORD_EXPLAIN'			=> 'Defines a password for this forum, use the permission system in preference.',	'FORUM_PASSWORD_UNSET'				=> 'Remove forum password',	'FORUM_PASSWORD_UNSET_EXPLAIN'		=> 'Check here if you want to remove the forum password.',	'FORUM_PASSWORD_OLD'				=> 'The forum password is using an old hashing method and should be changed.',	'FORUM_PASSWORD_MISMATCH'			=> 'The passwords you entered did not match.',	'FORUM_PRUNE_SETTINGS'				=> 'Forum prune settings',	'FORUM_RESYNCED'					=> 'Forum %s successfully resynced',	'FORUM_RULES_EXPLAIN'				=> 'Forum rules are displayed at any page within the given forum.',	'FORUM_RULES_LINK'					=> 'Link to forum rules',	'FORUM_RULES_LINK_EXPLAIN'			=> 'You are able to enter the URL of the page/post containing your forum rules here. This setting will override the forum rules text you specified.',	'FORUM_RULES_PREVIEW'				=> 'Forum rules preview',	'FORUM_RULES_TOO_LONG'				=> 'The forum rules must be less than 4000 characters.',	'FORUM_SETTINGS'					=> 'Forum settings',	'FORUM_STATUS'						=> 'Forum status',	'FORUM_STYLE'						=> 'Forum style',	'FORUM_TOPICS_PAGE'					=> 'Topics per page',	'FORUM_TOPICS_PAGE_EXPLAIN'			=> 'If non-zero this value will override the default topics per page setting.',	'FORUM_TYPE'						=> 'Forum type',	'FORUM_UPDATED'						=> 'Forum information updated successfully.',	'FORUM_WITH_SUBFORUMS_NOT_TO_LINK'		=> 'You want to change a postable forum having subforums to a link. Please move all subforums out of this forum before you proceed, because after changing to a link you are no longer able to see the subforums currently connected to this forum.',	'GENERAL_FORUM_SETTINGS'	=> 'General forum settings',	'LINK'						=> 'Link',	'LIST_INDEX'				=> 'List subforum in parent-forums legend',	'LIST_INDEX_EXPLAIN'		=> 'Displays this forum on the index and elsewhere as a link within the legend of its parent-forum if the parent-forums List subforums in legend option is enabled.',	'LIST_SUBFORUMS'			=> 'List subforums in legend',	'LIST_SUBFORUMS_EXPLAIN'	=> 'Displays this forums subforums on the index and elsewhere as a link within the legend if their List subforum in parent-forums legend option is enabled.',	'LOCKED'					=> 'Locked',	'MOVE_POSTS_NO_POSTABLE_FORUM'	=> 'The forum you selected for moving the posts to is not postable. Please select a postable forum.',	'MOVE_POSTS_TO'					=> 'Move posts to',	'MOVE_SUBFORUMS_TO'				=> 'Move subforums to',	'NO_DESTINATION_FORUM'			=> 'You have not specified a forum to move content to.',	'NO_FORUM_ACTION'				=> 'No action defined for what happens with the forum content.',	'NO_PARENT'						=> 'No parent',	'NO_PERMISSIONS'				=> 'Do not copy permissions',	'NO_PERMISSION_FORUM_ADD'		=> 'You do not have the necessary permissions to add forums.',	'NO_PERMISSION_FORUM_DELETE'	=> 'You do not have the necessary permissions to delete forums.',	'PARENT_IS_LINK_FORUM'		=> 'The parent you specified is a forum link. Link forums are not able to hold other forums, please specify a category or forum as the parent forum.',	'PARENT_NOT_EXIST'			=> 'Parent does not exist.',	'PRUNE_ANNOUNCEMENTS'		=> 'Prune announcements',	'PRUNE_STICKY'				=> 'Prune stickies',	'PRUNE_OLD_POLLS'			=> 'Prune old polls',	'PRUNE_OLD_POLLS_EXPLAIN'	=> 'Removes topics with polls not voted in for post age days.',	'REDIRECT_ACL'	=> 'Now you are able to %sset permissions%s for this forum.',	'SYNC_IN_PROGRESS'			=> 'Synchronizing forum',	'SYNC_IN_PROGRESS_EXPLAIN'	=> 'Currently resyncing topic range %1$d/%2$d.',	'TYPE_CAT'			=> 'Category',	'TYPE_FORUM'		=> 'Forum',	'TYPE_LINK'			=> 'Link',	'UNLOCKED'			=> 'Unlocked',));?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ucp_resend* Resending activation emails* @package ucp*/class ucp_resend{	var $u_action;	function main($id, $mode)	{		global $config, $phpbb_root_path, $phpEx;		global $db, $user, $auth, $template;		$username	= request_var('username', '', true);		$email		= strtolower(request_var('email', ''));		$submit		= (isset($_POST['submit'])) ? true : false;		add_form_key('ucp_resend');		if ($submit)		{			if (!check_form_key('ucp_resend'))			{				trigger_error('FORM_INVALID');			}			$sql = 'SELECT user_id, group_id, username, user_email, user_type, user_lang, user_actkey, user_inactive_reason				FROM ' . USERS_TABLE . "				WHERE user_email_hash = '" . $db->sql_escape(phpbb_email_hash($email)) . "'					AND username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";			$result = $db->sql_query($sql);			$user_row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$user_row)			{				trigger_error('NO_EMAIL_USER');			}			if ($user_row['user_type'] == USER_IGNORE)			{				trigger_error('NO_USER');			}			if (!$user_row['user_actkey'] && $user_row['user_type'] != USER_INACTIVE)			{				trigger_error('ACCOUNT_ALREADY_ACTIVATED');			}			if (!$user_row['user_actkey'] || ($user_row['user_type'] == USER_INACTIVE && $user_row['user_inactive_reason'] == INACTIVE_MANUAL))			{				trigger_error('ACCOUNT_DEACTIVATED');			}			// Determine coppa status on group (REGISTERED(_COPPA))			$sql = 'SELECT group_name, group_type				FROM ' . GROUPS_TABLE . '				WHERE group_id = ' . $user_row['group_id'];			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$row)			{				trigger_error('NO_GROUP');			}			$coppa = ($row['group_name'] == 'REGISTERED_COPPA' && $row['group_type'] == GROUP_SPECIAL) ? true : false;			include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);			$messenger = new messenger(false);			if ($config['require_activation'] == USER_ACTIVATION_SELF || $coppa)			{				$messenger->template(($coppa) ? 'coppa_resend_inactive' : 'user_resend_inactive', $user_row['user_lang']);				$messenger->to($user_row['user_email'], $user_row['username']);				$messenger->anti_abuse_headers($config, $user);				$messenger->assign_vars(array(					'WELCOME_MSG'	=> htmlspecialchars_decode(sprintf($user->lang['WELCOME_SUBJECT'], $config['sitename'])),					'USERNAME'		=> htmlspecialchars_decode($user_row['username']),					'U_ACTIVATE'	=> generate_board_url() . "/ucp.$phpEx?mode=activate&u={$user_row['user_id']}&k={$user_row['user_actkey']}")				);				if ($coppa)				{					$messenger->assign_vars(array(						'FAX_INFO'		=> $config['coppa_fax'],						'MAIL_INFO'		=> $config['coppa_mail'],						'EMAIL_ADDRESS'	=> $user_row['user_email'])					);				}				$messenger->send(NOTIFY_EMAIL);			}			if ($config['require_activation'] == USER_ACTIVATION_ADMIN)			{				// Grab an array of user_id's with a_user permissions ... these users can activate a user				$admin_ary = $auth->acl_get_list(false, 'a_user', false);				$sql = 'SELECT user_id, username, user_email, user_lang, user_jabber, user_notify_type					FROM ' . USERS_TABLE . '					WHERE ' . $db->sql_in_set('user_id', $admin_ary[0]['a_user']);				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$messenger->template('admin_activate', $row['user_lang']);					$messenger->to($row['user_email'], $row['username']);					$messenger->im($row['user_jabber'], $row['username']);					$messenger->anti_abuse_headers($config, $user);					$messenger->assign_vars(array(						'USERNAME'			=> htmlspecialchars_decode($user_row['username']),						'U_USER_DETAILS'	=> generate_board_url() . "/memberlist.$phpEx?mode=viewprofile&u={$user_row['user_id']}",						'U_ACTIVATE'		=> generate_board_url() . "/ucp.$phpEx?mode=activate&u={$user_row['user_id']}&k={$user_row['user_actkey']}")					);					$messenger->send($row['user_notify_type']);				}				$db->sql_freeresult($result);			}			meta_refresh(3, append_sid("{$phpbb_root_path}index.$phpEx"));			$message = ($config['require_activation'] == USER_ACTIVATION_ADMIN) ? $user->lang['ACTIVATION_EMAIL_SENT_ADMIN'] : $user->lang['ACTIVATION_EMAIL_SENT'];			$message .= '<br /><br />' . sprintf($user->lang['RETURN_INDEX'], '<a href="' . append_sid("{$phpbb_root_path}index.$phpEx") . '">', '</a>');			trigger_error($message);		}		$template->assign_vars(array(			'USERNAME'			=> $username,			'EMAIL'				=> $email,			'S_PROFILE_ACTION'	=> append_sid($phpbb_root_path . 'ucp.' . $phpEx, 'mode=resend_act'))		);		$this->tpl_name = 'ucp_resend';		$this->page_title = 'UCP_RESEND';	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);include($phpbb_root_path . 'includes/functions_admin.' . $phpEx);require($phpbb_root_path . 'includes/functions_module.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup('mcp');$module = new p_master();// Setting a variable to let the style designer know where he is...$template->assign_var('S_IN_MCP', true);// Basic parameter data$id = request_var('i', '');if (isset($_REQUEST['mode']) && is_array($_REQUEST['mode'])){	$mode = request_var('mode', array(''));	list($mode, ) = each($mode);}else{	$mode = request_var('mode', '');}// Only Moderators can go beyond this pointif (!$user->data['is_registered']){	if ($user->data['is_bot'])	{		redirect(append_sid("{$phpbb_root_path}index.$phpEx"));	}	login_box('', $user->lang['LOGIN_EXPLAIN_MCP']);}$quickmod = (isset($_REQUEST['quickmod'])) ? true : false;$action = request_var('action', '');$action_ary = request_var('action', array('' => 0));$forum_action = request_var('forum_action', '');if ($forum_action !== '' && !empty($_POST['sort'])){	$action = $forum_action;}if (sizeof($action_ary)){	list($action, ) = each($action_ary);}unset($action_ary);if ($mode == 'topic_logs'){	$id = 'logs';	$quickmod = false;}$post_id = request_var('p', 0);$topic_id = request_var('t', 0);$forum_id = request_var('f', 0);$report_id = request_var('r', 0);$user_id = request_var('u', 0);$username = utf8_normalize_nfc(request_var('username', '', true));if ($post_id){	// We determine the topic and forum id here, to make sure the moderator really has moderative rights on this post	$sql = 'SELECT topic_id, forum_id		FROM ' . POSTS_TABLE . "		WHERE post_id = $post_id";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	$topic_id = (int) $row['topic_id'];	$forum_id = (int) ($row['forum_id']) ? $row['forum_id'] : $forum_id;}else if ($topic_id){	$sql = 'SELECT forum_id		FROM ' . TOPICS_TABLE . "		WHERE topic_id = $topic_id";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	$forum_id = (int) $row['forum_id'];}// If the user doesn't have any moderator powers (globally or locally) he can't access the mcpif (!$auth->acl_getf_global('m_')){	// Except he is using one of the quickmod tools for users	$user_quickmod_actions = array(		'lock'			=> 'f_user_lock',		'make_sticky'	=> 'f_sticky',		'make_announce'	=> 'f_announce',		'make_global'	=> 'f_announce',		'make_normal'	=> array('f_announce', 'f_sticky')	);	$allow_user = false;	if ($quickmod && isset($user_quickmod_actions[$action]) && $user->data['is_registered'] && $auth->acl_gets($user_quickmod_actions[$action], $forum_id))	{		$topic_info = get_topic_data(array($topic_id));		if ($topic_info[$topic_id]['topic_poster'] == $user->data['user_id'])		{			$allow_user = true;		}	}	if (!$allow_user)	{		trigger_error('NOT_AUTHORISED');	}}// if the user cannot read the forum he tries to access then we won't allow mcp access eitherif ($forum_id && !$auth->acl_get('f_read', $forum_id)){	trigger_error('NOT_AUTHORISED');}if ($forum_id){	$module->acl_forum_id = $forum_id;}// Instantiate module system and generate list of available modules$module->list_modules('mcp');if ($quickmod){	$mode = 'quickmod';	switch ($action)	{		case 'lock':		case 'unlock':		case 'lock_post':		case 'unlock_post':		case 'make_sticky':		case 'make_announce':		case 'make_global':		case 'make_normal':		case 'fork':		case 'move':		case 'delete_post':		case 'delete_topic':			$module->load('mcp', 'main', 'quickmod');			return;		break;		case 'topic_logs':			// Reset start parameter if we jumped from the quickmod dropdown			if (request_var('start', 0))			{				$_REQUEST['start'] = 0;			}			$module->set_active('logs', 'topic_logs');		break;		case 'merge_topic':			$module->set_active('main', 'forum_view');		break;		case 'split':		case 'merge':			$module->set_active('main', 'topic_view');		break;		default:			trigger_error("$action not allowed as quickmod", E_USER_ERROR);		break;	}}else{	// Select the active module	$module->set_active($id, $mode);}// Hide some of the options if we don't have the relevant information to use themif (!$post_id){	$module->set_display('main', 'post_details', false);	$module->set_display('warn', 'warn_post', false);}if ($mode == '' || $mode == 'unapproved_topics' || $mode == 'unapproved_posts'){	$module->set_display('queue', 'approve_details', false);}if ($mode == '' || $mode == 'reports' || $mode == 'reports_closed' || $mode == 'pm_reports' || $mode == 'pm_reports_closed' || $mode == 'pm_report_details'){	$module->set_display('reports', 'report_details', false);}if ($mode == '' || $mode == 'reports' || $mode == 'reports_closed' || $mode == 'pm_reports' || $mode == 'pm_reports_closed' || $mode == 'report_details'){	$module->set_display('pm_reports', 'pm_report_details', false);}if (!$topic_id){	$module->set_display('main', 'topic_view', false);	$module->set_display('logs', 'topic_logs', false);}if (!$forum_id){	$module->set_display('main', 'forum_view', false);	$module->set_display('logs', 'forum_logs', false);}if (!$user_id && $username == ''){	$module->set_display('notes', 'user_notes', false);	$module->set_display('warn', 'warn_user', false);}// Load and execute the relevant module$module->load_active();// Assign data to the template engine for the list of modules$module->assign_tpl_vars(append_sid("{$phpbb_root_path}mcp.$phpEx"));// Generate urls for letting the moderation control panel being accessed in different modes$template->assign_vars(array(	'U_MCP'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main'),	'U_MCP_FORUM'	=> ($forum_id) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "i=main&amp;mode=forum_view&amp;f=$forum_id") : '',	'U_MCP_TOPIC'	=> ($forum_id && $topic_id) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "i=main&amp;mode=topic_view&amp;t=$topic_id") : '',	'U_MCP_POST'	=> ($forum_id && $topic_id && $post_id) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "i=main&amp;mode=post_details&amp;t=$topic_id&amp;p=$post_id") : '',));// Generate the page, do not display/query online list$module->display($module->get_page_title(), false);/*** Functions used to generate additional URL paramters*/function _module__url($mode, &$module_row){	return extra_url();}function _module_notes_url($mode, &$module_row){	if ($mode == 'front')	{		return '';	}	global $user_id;	return ($user_id) ? "&amp;u=$user_id" : '';}function _module_warn_url($mode, &$module_row){	if ($mode == 'front' || $mode == 'list')	{		global $forum_id;		return ($forum_id) ? "&amp;f=$forum_id" : '';	}	if ($mode == 'warn_post')	{		global $forum_id, $post_id;		$url_extra = ($forum_id) ? "&amp;f=$forum_id" : '';		$url_extra .= ($post_id) ? "&amp;p=$post_id" : '';		return $url_extra;	}	else	{		global $user_id;		return ($user_id) ? "&amp;u=$user_id" : '';	}}function _module_main_url($mode, &$module_row){	return extra_url();}function _module_logs_url($mode, &$module_row){	return extra_url();}function _module_ban_url($mode, &$module_row){	return extra_url();}function _module_queue_url($mode, &$module_row){	return extra_url();}function _module_reports_url($mode, &$module_row){	return extra_url();}function extra_url(){	global $forum_id, $topic_id, $post_id, $report_id, $user_id;	$url_extra = '';	$url_extra .= ($forum_id) ? "&amp;f=$forum_id" : '';	$url_extra .= ($topic_id) ? "&amp;t=$topic_id" : '';	$url_extra .= ($post_id) ? "&amp;p=$post_id" : '';	$url_extra .= ($user_id) ? "&amp;u=$user_id" : '';	$url_extra .= ($report_id) ? "&amp;r=$report_id" : '';	return $url_extra;}/*** Get simple topic data*/function get_topic_data($topic_ids, $acl_list = false, $read_tracking = false){	global $auth, $db, $config, $user;	static $rowset = array();	$topics = array();	if (!sizeof($topic_ids))	{		return array();	}	// cache might not contain read tracking info, so we can't use it if read	// tracking information is requested	if (!$read_tracking)	{		$cache_topic_ids = array_intersect($topic_ids, array_keys($rowset));		$topic_ids = array_diff($topic_ids, array_keys($rowset));	}	else	{		$cache_topic_ids = array();	}	if (sizeof($topic_ids))	{		$sql_array = array(			'SELECT'	=> 't.*, f.*',			'FROM'		=> array(				TOPICS_TABLE	=> 't',			),			'LEFT_JOIN'	=> array(				array(					'FROM'	=> array(FORUMS_TABLE => 'f'),					'ON'	=> 'f.forum_id = t.forum_id'				)			),			'WHERE'		=> $db->sql_in_set('t.topic_id', $topic_ids)		);		if ($read_tracking && $config['load_db_lastread'])		{			$sql_array['SELECT'] .= ', tt.mark_time, ft.mark_time as forum_mark_time';			$sql_array['LEFT_JOIN'][] = array(				'FROM'	=> array(TOPICS_TRACK_TABLE => 'tt'),				'ON'	=> 'tt.user_id = ' . $user->data['user_id'] . ' AND t.topic_id = tt.topic_id'			);			$sql_array['LEFT_JOIN'][] = array(				'FROM'	=> array(FORUMS_TRACK_TABLE => 'ft'),				'ON'	=> 'ft.user_id = ' . $user->data['user_id'] . ' AND t.forum_id = ft.forum_id'			);		}		$sql = $db->sql_build_query('SELECT', $sql_array);		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if (!$row['forum_id'])			{				// Global Announcement?				$row['forum_id'] = request_var('f', 0);			}			$rowset[$row['topic_id']] = $row;			if ($acl_list && !$auth->acl_gets($acl_list, $row['forum_id']))			{				continue;			}			$topics[$row['topic_id']] = $row;		}		$db->sql_freeresult($result);	}	foreach ($cache_topic_ids as $id)	{		if (!$acl_list || $auth->acl_gets($acl_list, $rowset[$id]['forum_id']))		{			$topics[$id] = $rowset[$id];		}	}	return $topics;}/*** Get simple post data*/function get_post_data($post_ids, $acl_list = false, $read_tracking = false){	global $db, $auth, $config, $user;	$rowset = array();	if (!sizeof($post_ids))	{		return array();	}	$sql_array = array(		'SELECT'	=> 'p.*, u.*, t.*, f.*',		'FROM'		=> array(			USERS_TABLE		=> 'u',			POSTS_TABLE		=> 'p',			TOPICS_TABLE	=> 't',		),		'LEFT_JOIN'	=> array(			array(				'FROM'	=> array(FORUMS_TABLE => 'f'),				'ON'	=> 'f.forum_id = t.forum_id'			)		),		'WHERE'		=> $db->sql_in_set('p.post_id', $post_ids) . '			AND u.user_id = p.poster_id			AND t.topic_id = p.topic_id',	);	if ($read_tracking && $config['load_db_lastread'])	{		$sql_array['SELECT'] .= ', tt.mark_time, ft.mark_time as forum_mark_time';		$sql_array['LEFT_JOIN'][] = array(			'FROM'	=> array(TOPICS_TRACK_TABLE => 'tt'),			'ON'	=> 'tt.user_id = ' . $user->data['user_id'] . ' AND t.topic_id = tt.topic_id'		);		$sql_array['LEFT_JOIN'][] = array(			'FROM'	=> array(FORUMS_TRACK_TABLE => 'ft'),			'ON'	=> 'ft.user_id = ' . $user->data['user_id'] . ' AND t.forum_id = ft.forum_id'		);	}	$sql = $db->sql_build_query('SELECT', $sql_array);	$result = $db->sql_query($sql);	unset($sql_array);	while ($row = $db->sql_fetchrow($result))	{		if (!$row['forum_id'])		{			// Global Announcement?			$row['forum_id'] = request_var('f', 0);		}		if ($acl_list && !$auth->acl_gets($acl_list, $row['forum_id']))		{			continue;		}		if (!$row['post_approved'] && !$auth->acl_get('m_approve', $row['forum_id']))		{			// Moderators without the permission to approve post should at least not see them. ;)			continue;		}		$rowset[$row['post_id']] = $row;	}	$db->sql_freeresult($result);	return $rowset;}/*** Get simple forum data*/function get_forum_data($forum_id, $acl_list = 'f_list', $read_tracking = false){	global $auth, $db, $user, $config;	$rowset = array();	if (!is_array($forum_id))	{		$forum_id = array($forum_id);	}	if (!sizeof($forum_id))	{		return array();	}	if ($read_tracking && $config['load_db_lastread'])	{		$read_tracking_join = ' LEFT JOIN ' . FORUMS_TRACK_TABLE . ' ft ON (ft.user_id = ' . $user->data['user_id'] . '			AND ft.forum_id = f.forum_id)';		$read_tracking_select = ', ft.mark_time';	}	else	{		$read_tracking_join = $read_tracking_select = '';	}	$sql = "SELECT f.* $read_tracking_select		FROM " . FORUMS_TABLE . " f$read_tracking_join		WHERE " . $db->sql_in_set('f.forum_id', $forum_id);	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		if ($acl_list && !$auth->acl_gets($acl_list, $row['forum_id']))		{			continue;		}		if ($auth->acl_get('m_approve', $row['forum_id']))		{			$row['forum_topics'] = $row['forum_topics_real'];		}		$rowset[$row['forum_id']] = $row;	}	$db->sql_freeresult($result);	return $rowset;}/*** Get simple pm data*/function get_pm_data($pm_ids){	global $db, $auth, $config, $user;	$rowset = array();	if (!sizeof($pm_ids))	{		return array();	}	$sql_array = array(		'SELECT'	=> 'p.*, u.*',		'FROM'		=> array(			USERS_TABLE			=> 'u',			PRIVMSGS_TABLE		=> 'p',		),		'WHERE'		=> $db->sql_in_set('p.msg_id', $pm_ids) . '			AND u.user_id = p.author_id',	);	$sql = $db->sql_build_query('SELECT', $sql_array);	$result = $db->sql_query($sql);	unset($sql_array);	while ($row = $db->sql_fetchrow($result))	{		$rowset[$row['msg_id']] = $row;	}	$db->sql_freeresult($result);	return $rowset;}/*** sorting in mcp** @param string $where_sql should either be WHERE (default if ommited) or end with AND or OR** $mode reports and reports_closed: the $where parameters uses aliases p for posts table and r for report table* $mode unapproved_posts: the $where parameters uses aliases p for posts table and t for topic table*/function mcp_sorting($mode, &$sort_days, &$sort_key, &$sort_dir, &$sort_by_sql, &$sort_order_sql, &$total, $forum_id = 0, $topic_id = 0, $where_sql = 'WHERE'){	global $db, $user, $auth, $template;	$sort_days = request_var('st', 0);	$min_time = ($sort_days) ? time() - ($sort_days * 86400) : 0;	switch ($mode)	{		case 'viewforum':			$type = 'topics';			$default_key = 't';			$default_dir = 'd';			$sql = 'SELECT COUNT(topic_id) AS total				FROM ' . TOPICS_TABLE . "				$where_sql forum_id = $forum_id					AND topic_type NOT IN (" . POST_ANNOUNCE . ', ' . POST_GLOBAL . ")					AND topic_last_post_time >= $min_time";			if (!$auth->acl_get('m_approve', $forum_id))			{				$sql .= 'AND topic_approved = 1';			}		break;		case 'viewtopic':			$type = 'posts';			$default_key = 't';			$default_dir = 'a';			$sql = 'SELECT COUNT(post_id) AS total				FROM ' . POSTS_TABLE . "				$where_sql topic_id = $topic_id					AND post_time >= $min_time";			if (!$auth->acl_get('m_approve', $forum_id))			{				$sql .= 'AND post_approved = 1';			}		break;		case 'unapproved_posts':			$type = 'posts';			$default_key = 't';			$default_dir = 'd';			$where_sql .= ($topic_id) ? ' p.topic_id = ' . $topic_id . ' AND' : '';			$sql = 'SELECT COUNT(p.post_id) AS total				FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . " t				$where_sql " . $db->sql_in_set('p.forum_id', ($forum_id) ? array($forum_id) : array_intersect(get_forum_list('f_read'), get_forum_list('m_approve'))) . '					AND p.post_approved = 0					AND t.topic_id = p.topic_id					AND t.topic_first_post_id <> p.post_id';			if ($min_time)			{				$sql .= ' AND post_time >= ' . $min_time;			}		break;		case 'unapproved_topics':			$type = 'topics';			$default_key = 't';			$default_dir = 'd';			$sql = 'SELECT COUNT(topic_id) AS total				FROM ' . TOPICS_TABLE . "				$where_sql " . $db->sql_in_set('forum_id', ($forum_id) ? array($forum_id) : array_intersect(get_forum_list('f_read'), get_forum_list('m_approve'))) . '					AND topic_approved = 0';			if ($min_time)			{				$sql .= ' AND topic_time >= ' . $min_time;			}		break;		case 'pm_reports':		case 'pm_reports_closed':		case 'reports':		case 'reports_closed':			$pm = (strpos($mode, 'pm_') === 0) ? true : false;			$type = ($pm) ? 'pm_reports' : 'reports';			$default_key = 't';			$default_dir = 'd';			$limit_time_sql = ($min_time) ? "AND r.report_time >= $min_time" : '';			if ($topic_id)			{				$where_sql .= ' p.topic_id = ' . $topic_id . ' AND ';			}			else if ($forum_id)			{				$where_sql .= ' p.forum_id = ' . $forum_id . ' AND ';			}			else if (!$pm)			{				$where_sql .= ' ' . $db->sql_in_set('p.forum_id', get_forum_list(array('!f_read', '!m_report')), true, true) . ' AND ';			}			if ($mode == 'reports' || $mode == 'pm_reports')			{				$where_sql .= ' r.report_closed = 0 AND ';			}			else			{				$where_sql .= ' r.report_closed = 1 AND ';			}			if ($pm)			{				$sql = 'SELECT COUNT(r.report_id) AS total					FROM ' . REPORTS_TABLE . ' r, ' . PRIVMSGS_TABLE . " p					$where_sql r.post_id = 0						AND p.msg_id = r.pm_id						$limit_time_sql";			}			else			{				$sql = 'SELECT COUNT(r.report_id) AS total					FROM ' . REPORTS_TABLE . ' r, ' . POSTS_TABLE . " p					$where_sql r.pm_id = 0						AND p.post_id = r.post_id						$limit_time_sql";			}		break;		case 'viewlogs':			$type = 'logs';			$default_key = 't';			$default_dir = 'd';			$sql = 'SELECT COUNT(log_id) AS total				FROM ' . LOG_TABLE . "				$where_sql " . $db->sql_in_set('forum_id', ($forum_id) ? array($forum_id) : array_intersect(get_forum_list('f_read'), get_forum_list('m_'))) . '					AND log_time >= ' . $min_time . '					AND log_type = ' . LOG_MOD;		break;	}	$sort_key = request_var('sk', $default_key);	$sort_dir = request_var('sd', $default_dir);	$sort_dir_text = array('a' => $user->lang['ASCENDING'], 'd' => $user->lang['DESCENDING']);	switch ($type)	{		case 'topics':			$limit_days = array(0 => $user->lang['ALL_TOPICS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);			$sort_by_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 'tt' => $user->lang['TOPIC_TIME'], 'r' => $user->lang['REPLIES'], 's' => $user->lang['SUBJECT'], 'v' => $user->lang['VIEWS']);			$sort_by_sql = array('a' => 't.topic_first_poster_name', 't' => 't.topic_last_post_time', 'tt' => 't.topic_time', 'r' => (($auth->acl_get('m_approve', $forum_id)) ? 't.topic_replies_real' : 't.topic_replies'), 's' => 't.topic_title', 'v' => 't.topic_views');			$limit_time_sql = ($min_time) ? "AND t.topic_last_post_time >= $min_time" : '';		break;		case 'posts':			$limit_days = array(0 => $user->lang['ALL_POSTS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);			$sort_by_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 's' => $user->lang['SUBJECT']);			$sort_by_sql = array('a' => 'u.username_clean', 't' => 'p.post_time', 's' => 'p.post_subject');			$limit_time_sql = ($min_time) ? "AND p.post_time >= $min_time" : '';		break;		case 'reports':			$limit_days = array(0 => $user->lang['ALL_REPORTS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);			$sort_by_text = array('a' => $user->lang['AUTHOR'], 'r' => $user->lang['REPORTER'], 'p' => $user->lang['POST_TIME'], 't' => $user->lang['REPORT_TIME'], 's' => $user->lang['SUBJECT']);			$sort_by_sql = array('a' => 'u.username_clean', 'r' => 'ru.username', 'p' => 'p.post_time', 't' => 'r.report_time', 's' => 'p.post_subject');		break;		case 'pm_reports':			$limit_days = array(0 => $user->lang['ALL_REPORTS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);			$sort_by_text = array('a' => $user->lang['AUTHOR'], 'r' => $user->lang['REPORTER'], 'p' => $user->lang['POST_TIME'], 't' => $user->lang['REPORT_TIME'], 's' => $user->lang['SUBJECT']);			$sort_by_sql = array('a' => 'u.username_clean', 'r' => 'ru.username', 'p' => 'p.message_time', 't' => 'r.report_time', 's' => 'p.message_subject');		break;		case 'logs':			$limit_days = array(0 => $user->lang['ALL_ENTRIES'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);			$sort_by_text = array('u' => $user->lang['SORT_USERNAME'], 't' => $user->lang['SORT_DATE'], 'i' => $user->lang['SORT_IP'], 'o' => $user->lang['SORT_ACTION']);			$sort_by_sql = array('u' => 'u.username_clean', 't' => 'l.log_time', 'i' => 'l.log_ip', 'o' => 'l.log_operation');			$limit_time_sql = ($min_time) ? "AND l.log_time >= $min_time" : '';		break;	}	if (!isset($sort_by_sql[$sort_key]))	{		$sort_key = $default_key;	}	$sort_order_sql = $sort_by_sql[$sort_key] . ' ' . (($sort_dir == 'd') ? 'DESC' : 'ASC');	$s_limit_days = $s_sort_key = $s_sort_dir = $sort_url = '';	gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $sort_url);	$template->assign_vars(array(		'S_SELECT_SORT_DIR'		=> $s_sort_dir,		'S_SELECT_SORT_KEY'		=> $s_sort_key,		'S_SELECT_SORT_DAYS'	=> $s_limit_days)	);	if (($sort_days && $mode != 'viewlogs') || in_array($mode, array('reports', 'unapproved_topics', 'unapproved_posts')) || $where_sql != 'WHERE')	{		$result = $db->sql_query($sql);		$total = (int) $db->sql_fetchfield('total');		$db->sql_freeresult($result);	}	else	{		$total = -1;	}}/*** Validate ids** @param	array	&$ids			The relevant ids to check* @param	string	$table			The table to find the ids in* @param	string	$sql_id			The ids relevant column name* @param	array	$acl_list		A list of permissions the user need to have* @param	mixed	$singe_forum	Limit to one forum id (int) or the first forum found (true)** @return	mixed	False if no ids were able to be retrieved, true if at least one id left.*					Additionally, this value can be the forum_id assigned if $single_forum was set.*					Therefore checking the result for with !== false is the best method.*/function check_ids(&$ids, $table, $sql_id, $acl_list = false, $single_forum = false){	global $db, $auth;	if (!is_array($ids) || empty($ids))	{		return false;	}	$sql = "SELECT $sql_id, forum_id FROM $table		WHERE " . $db->sql_in_set($sql_id, $ids);	$result = $db->sql_query($sql);	$ids = array();	$forum_id = false;	while ($row = $db->sql_fetchrow($result))	{		if ($acl_list && $row['forum_id'] && !$auth->acl_gets($acl_list, $row['forum_id']))		{			continue;		}		if ($acl_list && !$row['forum_id'] && !$auth->acl_getf_global($acl_list))		{			continue;		}		// Limit forum? If not, just assign the id.		if ($single_forum === false)		{			$ids[] = $row[$sql_id];			continue;		}		// Limit forum to a specific forum id?		// This can get really tricky, because we do not want to create a failure on global topics. :)		if ($row['forum_id'])		{			if ($single_forum !== true && $row['forum_id'] == (int) $single_forum)			{				$forum_id = (int) $single_forum;			}			else if ($forum_id === false)			{				$forum_id = $row['forum_id'];			}			if ($row['forum_id'] == $forum_id)			{				$ids[] = $row[$sql_id];			}		}		else		{			// Always add a global topic			$ids[] = $row[$sql_id];		}	}	$db->sql_freeresult($result);	if (!sizeof($ids))	{		return false;	}	// If forum id is false and ids populated we may have only global announcements selected (returning 0 because of (int) $forum_id)	return ($single_forum === false) ? true : (int) $forum_id;}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** mcp_reports* Handling the reports queue* @package mcp*/class mcp_reports{	var $p_master;	var $u_action;	function mcp_reports(&$p_master)	{		$this->p_master = &$p_master;	}	function main($id, $mode)	{		global $auth, $db, $user, $template, $cache;		global $config, $phpbb_root_path, $phpEx, $action;		include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);		$forum_id = request_var('f', 0);		$start = request_var('start', 0);		$this->page_title = 'MCP_REPORTS';		switch ($action)		{			case 'close':			case 'delete':				include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);				$report_id_list = request_var('report_id_list', array(0));				if (!sizeof($report_id_list))				{					trigger_error('NO_REPORT_SELECTED');				}				close_report($report_id_list, $mode, $action);			break;		}		switch ($mode)		{			case 'report_details':				$user->add_lang(array('posting', 'viewforum', 'viewtopic'));				$post_id = request_var('p', 0);				// closed reports are accessed by report id				$report_id = request_var('r', 0);				$sql = 'SELECT r.post_id, r.user_id, r.report_id, r.report_closed, report_time, r.report_text, rr.reason_title, rr.reason_description, u.username, u.username_clean, u.user_colour					FROM ' . REPORTS_TABLE . ' r, ' . REPORTS_REASONS_TABLE . ' rr, ' . USERS_TABLE . ' u					WHERE ' . (($report_id) ? 'r.report_id = ' . $report_id : "r.post_id = $post_id") . '						AND rr.reason_id = r.reason_id						AND r.user_id = u.user_id						AND r.pm_id = 0					ORDER BY report_closed ASC';				$result = $db->sql_query_limit($sql, 1);				$report = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$report)				{					trigger_error('NO_REPORT');				}				if (!$report_id && $report['report_closed'])				{					trigger_error('REPORT_CLOSED');				}				$post_id = $report['post_id'];				$report_id = $report['report_id'];				$post_info = get_post_data(array($post_id), 'm_report', true);				if (!sizeof($post_info))				{					trigger_error('NO_REPORT_SELECTED');				}				$post_info = $post_info[$post_id];				$reason = array('title' => $report['reason_title'], 'description' => $report['reason_description']);				if (isset($user->lang['report_reasons']['TITLE'][strtoupper($reason['title'])]) && isset($user->lang['report_reasons']['DESCRIPTION'][strtoupper($reason['title'])]))				{					$reason['description'] = $user->lang['report_reasons']['DESCRIPTION'][strtoupper($reason['title'])];					$reason['title'] = $user->lang['report_reasons']['TITLE'][strtoupper($reason['title'])];				}				if (topic_review($post_info['topic_id'], $post_info['forum_id'], 'topic_review', 0, false))				{					$template->assign_vars(array(						'S_TOPIC_REVIEW'	=> true,						'S_BBCODE_ALLOWED'	=> $post_info['enable_bbcode'],						'TOPIC_TITLE'		=> $post_info['topic_title'])					);				}				$topic_tracking_info = $extensions = $attachments = array();				// Get topic tracking info				if ($config['load_db_lastread'])				{					$tmp_topic_data = array($post_info['topic_id'] => $post_info);					$topic_tracking_info = get_topic_tracking($post_info['forum_id'], $post_info['topic_id'], $tmp_topic_data, array($post_info['forum_id'] => $post_info['forum_mark_time']));					unset($tmp_topic_data);				}				else				{					$topic_tracking_info = get_complete_topic_tracking($post_info['forum_id'], $post_info['topic_id']);				}				$post_unread = (isset($topic_tracking_info[$post_info['topic_id']]) && $post_info['post_time'] > $topic_tracking_info[$post_info['topic_id']]) ? true : false;				// Process message, leave it uncensored				$message = $post_info['post_text'];				if ($post_info['bbcode_bitfield'])				{					include_once($phpbb_root_path . 'includes/bbcode.' . $phpEx);					$bbcode = new bbcode($post_info['bbcode_bitfield']);					$bbcode->bbcode_second_pass($message, $post_info['bbcode_uid'], $post_info['bbcode_bitfield']);				}				$message = bbcode_nl2br($message);				$message = smiley_text($message);				$report['report_text'] = make_clickable(bbcode_nl2br($report['report_text']));				if ($post_info['post_attachment'] && $auth->acl_get('u_download') && $auth->acl_get('f_download', $post_info['forum_id']))				{					$sql = 'SELECT *						FROM ' . ATTACHMENTS_TABLE . '						WHERE post_msg_id = ' . $post_id . '							AND in_message = 0						ORDER BY filetime DESC';					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$attachments[] = $row;					}					$db->sql_freeresult($result);					if (sizeof($attachments))					{						$update_count = array();						parse_attachments($post_info['forum_id'], $message, $attachments, $update_count);					}					// Display not already displayed Attachments for this post, we already parsed them. ;)					if (!empty($attachments))					{						$template->assign_var('S_HAS_ATTACHMENTS', true);						foreach ($attachments as $attachment)						{							$template->assign_block_vars('attachment', array(								'DISPLAY_ATTACHMENT'	=> $attachment)							);						}					}				}				$template->assign_vars(array(					'S_MCP_REPORT'			=> true,					'S_CLOSE_ACTION'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports&amp;mode=report_details&amp;f=' . $post_info['forum_id'] . '&amp;p=' . $post_id),					'S_CAN_VIEWIP'			=> $auth->acl_get('m_info', $post_info['forum_id']),					'S_POST_REPORTED'		=> $post_info['post_reported'],					'S_POST_UNAPPROVED'		=> !$post_info['post_approved'],					'S_POST_LOCKED'			=> $post_info['post_edit_locked'],					'S_USER_NOTES'			=> true,					'U_EDIT'					=> ($auth->acl_get('m_edit', $post_info['forum_id'])) ? append_sid("{$phpbb_root_path}posting.$phpEx", "mode=edit&amp;f={$post_info['forum_id']}&amp;p={$post_info['post_id']}") : '',					'U_MCP_APPROVE'				=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue&amp;mode=approve_details&amp;f=' . $post_info['forum_id'] . '&amp;p=' . $post_id),					'U_MCP_REPORT'				=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports&amp;mode=report_details&amp;f=' . $post_info['forum_id'] . '&amp;p=' . $post_id),					'U_MCP_REPORTER_NOTES'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $report['user_id']),					'U_MCP_USER_NOTES'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $post_info['user_id']),					'U_MCP_WARN_REPORTER'		=> ($auth->acl_get('m_warn')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=warn&amp;mode=warn_user&amp;u=' . $report['user_id']) : '',					'U_MCP_WARN_USER'			=> ($auth->acl_get('m_warn')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=warn&amp;mode=warn_user&amp;u=' . $post_info['user_id']) : '',					'U_VIEW_FORUM'				=> append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $post_info['forum_id']),					'U_VIEW_POST'				=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $post_info['forum_id'] . '&amp;p=' . $post_info['post_id'] . '#p' . $post_info['post_id']),					'U_VIEW_TOPIC'				=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $post_info['forum_id'] . '&amp;t=' . $post_info['topic_id']),					'EDIT_IMG'				=> $user->img('icon_post_edit', $user->lang['EDIT_POST']),					'MINI_POST_IMG'			=> ($post_unread) ? $user->img('icon_post_target_unread', 'UNREAD_POST') : $user->img('icon_post_target', 'POST'),					'UNAPPROVED_IMG'		=> $user->img('icon_topic_unapproved', $user->lang['POST_UNAPPROVED']),					'RETURN_REPORTS'			=> sprintf($user->lang['RETURN_REPORTS'], '<a href="' . append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports' . (($post_info['post_reported']) ? '&amp;mode=reports' : '&amp;mode=reports_closed') . '&amp;start=' . $start . '&amp;f=' . $post_info['forum_id']) . '">', '</a>'),					'REPORTED_IMG'				=> $user->img('icon_topic_reported', $user->lang['POST_REPORTED']),					'REPORT_DATE'				=> $user->format_date($report['report_time']),					'REPORT_ID'					=> $report_id,					'REPORT_REASON_TITLE'		=> $reason['title'],					'REPORT_REASON_DESCRIPTION'	=> $reason['description'],					'REPORT_TEXT'				=> $report['report_text'],					'POST_AUTHOR_FULL'		=> get_username_string('full', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),					'POST_AUTHOR_COLOUR'	=> get_username_string('colour', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),					'POST_AUTHOR'			=> get_username_string('username', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),					'U_POST_AUTHOR'			=> get_username_string('profile', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),					'REPORTER_FULL'				=> get_username_string('full', $report['user_id'], $report['username'], $report['user_colour']),					'REPORTER_COLOUR'			=> get_username_string('colour', $report['user_id'], $report['username'], $report['user_colour']),					'REPORTER_NAME'				=> get_username_string('username', $report['user_id'], $report['username'], $report['user_colour']),					'U_VIEW_REPORTER_PROFILE'	=> get_username_string('profile', $report['user_id'], $report['username'], $report['user_colour']),					'POST_PREVIEW'			=> $message,					'POST_SUBJECT'			=> ($post_info['post_subject']) ? $post_info['post_subject'] : $user->lang['NO_SUBJECT'],					'POST_DATE'				=> $user->format_date($post_info['post_time']),					'POST_IP'				=> $post_info['poster_ip'],					'POST_IPADDR'			=> ($auth->acl_get('m_info', $post_info['forum_id']) && request_var('lookup', '')) ? @gethostbyaddr($post_info['poster_ip']) : '',					'POST_ID'				=> $post_info['post_id'],					'U_LOOKUP_IP'			=> ($auth->acl_get('m_info', $post_info['forum_id'])) ? $this->u_action . '&amp;r=' . $report_id . '&amp;p=' . $post_id . '&amp;f=' . $forum_id . '&amp;lookup=' . $post_info['poster_ip'] . '#ip' : '',				));				$this->tpl_name = 'mcp_post';			break;			case 'reports':			case 'reports_closed':				$topic_id = request_var('t', 0);				$forum_info = array();				$forum_list_reports = get_forum_list('m_report', false, true);				$forum_list_read = array_flip(get_forum_list('f_read', true, true)); // Flipped so we can isset() the forum IDs				// Remove forums we cannot read				foreach ($forum_list_reports as $k => $forum_data)				{					if (!isset($forum_list_read[$forum_data['forum_id']]))					{						unset($forum_list_reports[$k]);					}				}				unset($forum_list_read);				if ($topic_id)				{					$topic_info = get_topic_data(array($topic_id));					if (!sizeof($topic_info))					{						trigger_error('TOPIC_NOT_EXIST');					}					if ($forum_id != $topic_info[$topic_id]['forum_id'])					{						$topic_id = 0;					}					else					{						$topic_info = $topic_info[$topic_id];						$forum_id = (int) $topic_info['forum_id'];					}				}				$forum_list = array();				if (!$forum_id)				{					foreach ($forum_list_reports as $row)					{						$forum_list[] = $row['forum_id'];					}					if (!sizeof($forum_list))					{						trigger_error('NOT_MODERATOR');					}					$global_id = $forum_list[0];					$sql = 'SELECT SUM(forum_topics) as sum_forum_topics						FROM ' . FORUMS_TABLE . '						WHERE ' . $db->sql_in_set('forum_id', $forum_list);					$result = $db->sql_query($sql);					$forum_info['forum_topics'] = (int) $db->sql_fetchfield('sum_forum_topics');					$db->sql_freeresult($result);				}				else				{					$forum_info = get_forum_data(array($forum_id), 'm_report');					if (!sizeof($forum_info))					{						trigger_error('NOT_MODERATOR');					}					$forum_info = $forum_info[$forum_id];					$forum_list = array($forum_id);					$global_id = $forum_id;				}				$forum_list[] = 0;				$forum_data = array();				$forum_options = '<option value="0"' . (($forum_id == 0) ? ' selected="selected"' : '') . '>' . $user->lang['ALL_FORUMS'] . '</option>';				foreach ($forum_list_reports as $row)				{					$forum_options .= '<option value="' . $row['forum_id'] . '"' . (($forum_id == $row['forum_id']) ? ' selected="selected"' : '') . '>' . str_repeat('&nbsp; &nbsp;', $row['padding']) . $row['forum_name'] . '</option>';					$forum_data[$row['forum_id']] = $row;				}				unset($forum_list_reports);				$sort_days = $total = 0;				$sort_key = $sort_dir = '';				$sort_by_sql = $sort_order_sql = array();				mcp_sorting($mode, $sort_days, $sort_key, $sort_dir, $sort_by_sql, $sort_order_sql, $total, $forum_id, $topic_id);				$forum_topics = ($total == -1) ? $forum_info['forum_topics'] : $total;				$limit_time_sql = ($sort_days) ? 'AND r.report_time >= ' . (time() - ($sort_days * 86400)) : '';				if ($mode == 'reports')				{					$report_state = 'AND p.post_reported = 1 AND r.report_closed = 0';				}				else				{					$report_state = 'AND r.report_closed = 1';				}				$sql = 'SELECT r.report_id					FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . ' t, ' . REPORTS_TABLE . ' r ' . (($sort_order_sql[0] == 'u') ? ', ' . USERS_TABLE . ' u' : '') . (($sort_order_sql[0] == 'r') ? ', ' . USERS_TABLE . ' ru' : '') . '					WHERE ' . $db->sql_in_set('p.forum_id', $forum_list) . "						$report_state						AND r.post_id = p.post_id						" . (($sort_order_sql[0] == 'u') ? 'AND u.user_id = p.poster_id' : '') . '						' . (($sort_order_sql[0] == 'r') ? 'AND ru.user_id = r.user_id' : '') . '						' . (($topic_id) ? 'AND p.topic_id = ' . $topic_id : '') . "						AND t.topic_id = p.topic_id						AND r.pm_id = 0						$limit_time_sql					ORDER BY $sort_order_sql";				$result = $db->sql_query_limit($sql, $config['topics_per_page'], $start);				$i = 0;				$report_ids = array();				while ($row = $db->sql_fetchrow($result))				{					$report_ids[] = $row['report_id'];					$row_num[$row['report_id']] = $i++;				}				$db->sql_freeresult($result);				if (sizeof($report_ids))				{					$sql = 'SELECT t.forum_id, t.topic_id, t.topic_title, p.post_id, p.post_subject, p.post_username, p.poster_id, p.post_time, u.username, u.username_clean, u.user_colour, r.user_id as reporter_id, ru.username as reporter_name, ru.user_colour as reporter_colour, r.report_time, r.report_id						FROM ' . REPORTS_TABLE . ' r, ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . ' t, ' . USERS_TABLE . ' u, ' . USERS_TABLE . ' ru						WHERE ' . $db->sql_in_set('r.report_id', $report_ids) . '							AND t.topic_id = p.topic_id							AND r.post_id = p.post_id							AND u.user_id = p.poster_id							AND ru.user_id = r.user_id							AND r.pm_id = 0						ORDER BY ' . $sort_order_sql;					$result = $db->sql_query($sql);					$report_data = $rowset = array();					while ($row = $db->sql_fetchrow($result))					{						$global_topic = ($row['forum_id']) ? false : true;						if ($global_topic)						{							$row['forum_id'] = $global_id;						}						$template->assign_block_vars('postrow', array(							'U_VIEWFORUM'				=> (!$global_topic) ? append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $row['forum_id']) : '',							'U_VIEWPOST'				=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $row['forum_id'] . '&amp;p=' . $row['post_id']) . '#p' . $row['post_id'],							'U_VIEW_DETAILS'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=reports&amp;start=$start&amp;mode=report_details&amp;f={$row['forum_id']}&amp;r={$row['report_id']}"),							'POST_AUTHOR_FULL'		=> get_username_string('full', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),							'POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),							'POST_AUTHOR'			=> get_username_string('username', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),							'U_POST_AUTHOR'			=> get_username_string('profile', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),							'REPORTER_FULL'			=> get_username_string('full', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),							'REPORTER_COLOUR'		=> get_username_string('colour', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),							'REPORTER'				=> get_username_string('username', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),							'U_REPORTER'			=> get_username_string('profile', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),							'FORUM_NAME'	=> (!$global_topic) ? $forum_data[$row['forum_id']]['forum_name'] : $user->lang['GLOBAL_ANNOUNCEMENT'],							'POST_ID'		=> $row['post_id'],							'POST_SUBJECT'	=> ($row['post_subject']) ? $row['post_subject'] : $user->lang['NO_SUBJECT'],							'POST_TIME'		=> $user->format_date($row['post_time']),							'REPORT_ID'		=> $row['report_id'],							'REPORT_TIME'	=> $user->format_date($row['report_time']),							'TOPIC_TITLE'	=> $row['topic_title'])						);					}					$db->sql_freeresult($result);					unset($report_ids, $row);				}				// Now display the page				$template->assign_vars(array(					'L_EXPLAIN'				=> ($mode == 'reports') ? $user->lang['MCP_REPORTS_OPEN_EXPLAIN'] : $user->lang['MCP_REPORTS_CLOSED_EXPLAIN'],					'L_TITLE'				=> ($mode == 'reports') ? $user->lang['MCP_REPORTS_OPEN'] : $user->lang['MCP_REPORTS_CLOSED'],					'L_ONLY_TOPIC'			=> ($topic_id) ? sprintf($user->lang['ONLY_TOPIC'], $topic_info['topic_title']) : '',					'S_MCP_ACTION'			=> $this->u_action,					'S_FORUM_OPTIONS'		=> $forum_options,					'S_CLOSED'				=> ($mode == 'reports_closed') ? true : false,					'PAGINATION'			=> generate_pagination($this->u_action . "&amp;f=$forum_id&amp;t=$topic_id&amp;st=$sort_days&amp;sk=$sort_key&amp;sd=$sort_dir", $total, $config['topics_per_page'], $start),					'PAGE_NUMBER'			=> on_page($total, $config['topics_per_page'], $start),					'TOPIC_ID'				=> $topic_id,					'TOTAL'					=> $total,					'TOTAL_REPORTS'			=> ($total == 1) ? $user->lang['LIST_REPORT'] : sprintf($user->lang['LIST_REPORTS'], $total),					)				);				$this->tpl_name = 'mcp_reports';			break;		}	}}/*** Closes a report*/function close_report($report_id_list, $mode, $action, $pm = false){	global $db, $template, $user, $config, $auth;	global $phpEx, $phpbb_root_path;	$pm_where = ($pm) ? ' AND r.post_id = 0 ' : ' AND r.pm_id = 0 ';	$id_column = ($pm) ? 'pm_id' : 'post_id';	$module = ($pm) ? 'pm_reports' : 'reports';	$pm_prefix = ($pm) ? 'PM_' : '';	$sql = "SELECT r.$id_column		FROM " . REPORTS_TABLE . ' r		WHERE ' . $db->sql_in_set('r.report_id', $report_id_list) . $pm_where;	$result = $db->sql_query($sql);	$post_id_list = array();	while ($row = $db->sql_fetchrow($result))	{		$post_id_list[] = $row[$id_column];	}	$post_id_list = array_unique($post_id_list);	if ($pm)	{		if (!$auth->acl_getf_global('m_report'))		{			trigger_error('NOT_AUTHORISED');		}	}	else	{		if (!check_ids($post_id_list, POSTS_TABLE, 'post_id', array('m_report')))		{			trigger_error('NOT_AUTHORISED');		}	}	if ($action == 'delete' && strpos($user->data['session_page'], 'mode=report_details') !== false)	{		$redirect = request_var('redirect', build_url(array('mode', 'r', 'quickmod')) . '&amp;mode=reports');	}	elseif ($action == 'delete' && strpos($user->data['session_page'], 'mode=pm_report_details') !== false)	{		$redirect = request_var('redirect', build_url(array('mode', 'r', 'quickmod')) . '&amp;mode=pm_reports');	}	else if ($action == 'close' && !request_var('r', 0))	{		$redirect = request_var('redirect', build_url(array('mode', 'p', 'quickmod')) . '&amp;mode=' . $module);	}	else	{		$redirect = request_var('redirect', build_url(array('quickmod')));	}	$success_msg = '';	$forum_ids = array();	$topic_ids = array();	$s_hidden_fields = build_hidden_fields(array(		'i'					=> $module,		'mode'				=> $mode,		'report_id_list'	=> $report_id_list,		'action'			=> $action,		'redirect'			=> $redirect)	);	if (confirm_box(true))	{		$post_info = ($pm) ? get_pm_data($post_id_list) : get_post_data($post_id_list, 'm_report');		$sql = "SELECT r.report_id, r.$id_column, r.report_closed, r.user_id, r.user_notify, u.username, u.username_clean, u.user_email, u.user_jabber, u.user_lang, u.user_notify_type			FROM " . REPORTS_TABLE . ' r, ' . USERS_TABLE . ' u			WHERE ' . $db->sql_in_set('r.report_id', $report_id_list) . '				' . (($action == 'close') ? 'AND r.report_closed = 0' : '') . '				AND r.user_id = u.user_id' . $pm_where;		$result = $db->sql_query($sql);		$reports = $close_report_posts = $close_report_topics = $notify_reporters = $report_id_list = array();		while ($report = $db->sql_fetchrow($result))		{			$reports[$report['report_id']] = $report;			$report_id_list[] = $report['report_id'];			if (!$report['report_closed'])			{				$close_report_posts[] = $report[$id_column];				if (!$pm)				{					$close_report_topics[] = $post_info[$report['post_id']]['topic_id'];				}			}			if ($report['user_notify'] && !$report['report_closed'])			{				$notify_reporters[$report['report_id']] = &$reports[$report['report_id']];			}		}		$db->sql_freeresult($result);		if (sizeof($reports))		{			$close_report_posts = array_unique($close_report_posts);			$close_report_topics = array_unique($close_report_topics);			if (!$pm && sizeof($close_report_posts))			{				// Get a list of topics that still contain reported posts				$sql = 'SELECT DISTINCT topic_id					FROM ' . POSTS_TABLE . '					WHERE ' . $db->sql_in_set('topic_id', $close_report_topics) . '						AND post_reported = 1						AND ' . $db->sql_in_set('post_id', $close_report_posts, true);				$result = $db->sql_query($sql);				$keep_report_topics = array();				while ($row = $db->sql_fetchrow($result))				{					$keep_report_topics[] = $row['topic_id'];				}				$db->sql_freeresult($result);				$close_report_topics = array_diff($close_report_topics, $keep_report_topics);				unset($keep_report_topics);			}			$db->sql_transaction('begin');			if ($action == 'close')			{				$sql = 'UPDATE ' . REPORTS_TABLE . '					SET report_closed = 1					WHERE ' . $db->sql_in_set('report_id', $report_id_list);			}			else			{				$sql = 'DELETE FROM ' . REPORTS_TABLE . '					WHERE ' . $db->sql_in_set('report_id', $report_id_list);			}			$db->sql_query($sql);			if (sizeof($close_report_posts))			{				if ($pm)				{					$sql = 'UPDATE ' . PRIVMSGS_TABLE . '						SET message_reported = 0						WHERE ' . $db->sql_in_set('msg_id', $close_report_posts);					$db->sql_query($sql);					if ($action == 'delete')					{						delete_pm(ANONYMOUS, $close_report_posts, PRIVMSGS_INBOX);					}				}				else				{					$sql = 'UPDATE ' . POSTS_TABLE . '						SET post_reported = 0						WHERE ' . $db->sql_in_set('post_id', $close_report_posts);					$db->sql_query($sql);					if (sizeof($close_report_topics))					{						$sql = 'UPDATE ' . TOPICS_TABLE . '							SET topic_reported = 0							WHERE ' . $db->sql_in_set('topic_id', $close_report_topics) . '								OR ' . $db->sql_in_set('topic_moved_id', $close_report_topics);						$db->sql_query($sql);					}				}			}			$db->sql_transaction('commit');		}		unset($close_report_posts, $close_report_topics);		foreach ($reports as $report)		{			if ($pm)			{				add_log('mod', 0, 0, 'LOG_PM_REPORT_' .  strtoupper($action) . 'D', $post_info[$report['pm_id']]['message_subject']);			}			else			{				add_log('mod', $post_info[$report['post_id']]['forum_id'], $post_info[$report['post_id']]['topic_id'], 'LOG_REPORT_' .  strtoupper($action) . 'D', $post_info[$report['post_id']]['post_subject']);			}		}		$messenger = new messenger();		// Notify reporters		if (sizeof($notify_reporters))		{			foreach ($notify_reporters as $report_id => $reporter)			{				if ($reporter['user_id'] == ANONYMOUS)				{					continue;				}				$post_id = $reporter[$id_column];				$messenger->template((($pm) ? 'pm_report_' : 'report_') . $action . 'd', $reporter['user_lang']);				$messenger->to($reporter['user_email'], $reporter['username']);				$messenger->im($reporter['user_jabber'], $reporter['username']);				if ($pm)				{					$messenger->assign_vars(array(						'USERNAME'		=> htmlspecialchars_decode($reporter['username']),						'CLOSER_NAME'	=> htmlspecialchars_decode($user->data['username']),						'PM_SUBJECT'	=> htmlspecialchars_decode(censor_text($post_info[$post_id]['message_subject'])),					));				}				else				{					$messenger->assign_vars(array(						'USERNAME'		=> htmlspecialchars_decode($reporter['username']),						'CLOSER_NAME'	=> htmlspecialchars_decode($user->data['username']),						'POST_SUBJECT'	=> htmlspecialchars_decode(censor_text($post_info[$post_id]['post_subject'])),						'TOPIC_TITLE'	=> htmlspecialchars_decode(censor_text($post_info[$post_id]['topic_title'])))					);				}				$messenger->send($reporter['user_notify_type']);			}		}		if (!$pm)		{			foreach ($post_info as $post)			{				$forum_ids[$post['forum_id']] = $post['forum_id'];				$topic_ids[$post['topic_id']] = $post['topic_id'];			}		}		unset($notify_reporters, $post_info, $reports);		$messenger->save_queue();		$success_msg = (sizeof($report_id_list) == 1) ? "{$pm_prefix}REPORT_" . strtoupper($action) . 'D_SUCCESS' : "{$pm_prefix}REPORTS_" . strtoupper($action) . 'D_SUCCESS';	}	else	{		confirm_box(false, $user->lang[strtoupper($action) . "_{$pm_prefix}REPORT" . ((sizeof($report_id_list) == 1) ? '' : 'S') . '_CONFIRM'], $s_hidden_fields);	}	$redirect = request_var('redirect', "index.$phpEx");	$redirect = reapply_sid($redirect);	if (!$success_msg)	{		redirect($redirect);	}	else	{		meta_refresh(3, $redirect);		$return_forum = '';		$return_topic = '';		if (!$pm)		{			if (sizeof($forum_ids) === 1)			{				$return_forum = sprintf($user->lang['RETURN_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . current($forum_ids)) . '">', '</a>') . '<br /><br />';			}			if (sizeof($topic_ids) === 1)			{				$return_topic = sprintf($user->lang['RETURN_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 't=' . current($topic_ids) . '&amp;f=' . current($forum_ids)) . '">', '</a>') . '<br /><br />';			}		}		trigger_error($user->lang[$success_msg] . '<br /><br />' . $return_forum . $return_topic . sprintf($user->lang['RETURN_PAGE'], "<a href=\"$redirect\">", '</a>'));	}}?>
<?php return array(''=>'',''=>'');
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_send_statistics_info{	function module()	{		return array(			'filename'	=> 'acp_send_statistics',			'title'		=> 'ACP_SEND_STATISTICS',			'version'	=> '1.0.0',			'modes'		=> array(				'send_statistics'		=> array('title' => 'ACP_SEND_STATISTICS', 'auth' => 'acl_a_server', 'cat' => array('ACP_SERVER_CONFIGURATION')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_groups_info{	function module()	{		return array(			'filename'	=> 'acp_groups',			'title'		=> 'ACP_GROUPS_MANAGEMENT',			'version'	=> '1.0.0',			'modes'		=> array(				'manage'		=> array('title' => 'ACP_GROUPS_MANAGE', 'auth' => 'acl_a_group', 'cat' => array('ACP_GROUPS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** viewtopic [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ATTACHMENT'						=> 'Attachment',	'ATTACHMENT_FUNCTIONALITY_DISABLED'	=> 'The attachments feature has been disabled.',	'BOOKMARK_ADDED'		=> 'Bookmarked topic successfully.',	'BOOKMARK_ERR'			=> 'Bookmarking the topic failed. Please try again.',	'BOOKMARK_REMOVED'		=> 'Removed bookmarked topic successfully.',	'BOOKMARK_TOPIC'		=> 'Bookmark topic',	'BOOKMARK_TOPIC_REMOVE'	=> 'Remove from bookmarks',	'BUMPED_BY'				=> 'Last bumped by %1$s on %2$s.',	'BUMP_TOPIC'			=> 'Bump topic',	'CODE'					=> 'Code',	'COLLAPSE_QR'			=> 'Hide Quick Reply',	'DELETE_TOPIC'			=> 'Delete topic',	'DOWNLOAD_NOTICE'		=> 'You do not have the required permissions to view the files attached to this post.',	'EDITED_TIMES_TOTAL'	=> 'Last edited by %1$s on %2$s, edited %3$d times in total.',	'EDITED_TIME_TOTAL'		=> 'Last edited by %1$s on %2$s, edited %3$d time in total.',	'EMAIL_TOPIC'			=> 'E-mail friend',	'ERROR_NO_ATTACHMENT'	=> 'The selected attachment does not exist anymore.',	'FILE_NOT_FOUND_404'	=> 'The file <strong>%s</strong> does not exist.',	'FORK_TOPIC'			=> 'Copy topic',	'FULL_EDITOR'			=> 'Full Editor',		'LINKAGE_FORBIDDEN'		=> 'You are not authorised to view, download or link from/to this site.',	'LOGIN_NOTIFY_TOPIC'	=> 'You have been notified about this topic, please login to view it.',	'LOGIN_VIEWTOPIC'		=> 'The board requires you to be registered and logged in to view this topic.',	'MAKE_ANNOUNCE'				=> 'Change to Announcement',	'MAKE_GLOBAL'				=> 'Change to Global',	'MAKE_NORMAL'				=> 'Change to Standard Topic',	'MAKE_STICKY'				=> 'Change to Sticky',	'MAX_OPTIONS_SELECT'		=> 'You may select up to <strong>%d</strong> options',	'MAX_OPTION_SELECT'			=> 'You may select <strong>1</strong> option',	'MISSING_INLINE_ATTACHMENT'	=> 'The attachment <strong>%s</strong> is no longer available',	'MOVE_TOPIC'				=> 'Move topic',	'NO_ATTACHMENT_SELECTED'=> 'You havent selected an attachment to download or view.',	'NO_NEWER_TOPICS'		=> 'There are no newer topics in this forum.',	'NO_OLDER_TOPICS'		=> 'There are no older topics in this forum.',	'NO_UNREAD_POSTS'		=> 'There are no new unread posts for this topic.',	'NO_VOTE_OPTION'		=> 'You must specify an option when voting.',	'NO_VOTES'				=> 'No votes',	'POLL_ENDED_AT'			=> 'Poll ended at %s',	'POLL_RUN_TILL'			=> 'Poll runs till %s',	'POLL_VOTED_OPTION'		=> 'You voted for this option',	'PRINT_TOPIC'			=> 'Print view',	'QUICK_MOD'				=> 'Quick-mod tools',	'QUICKREPLY'			=> 'Quick Reply',	'QUOTE'					=> 'Quote',	'REPLY_TO_TOPIC'		=> 'Reply to topic',	'RETURN_POST'			=> '%sReturn to the post%s',	'SHOW_QR'				=> 'Quick Reply',	'SUBMIT_VOTE'			=> 'Submit vote',	'TOTAL_VOTES'			=> 'Total votes',	'UNLOCK_TOPIC'			=> 'Unlock topic',	'VIEW_INFO'				=> 'Post details',	'VIEW_NEXT_TOPIC'		=> 'Next topic',	'VIEW_PREVIOUS_TOPIC'	=> 'Previous topic',	'VIEW_RESULTS'			=> 'View results',	'VIEW_TOPIC_POST'		=> '1 post',	'VIEW_TOPIC_POSTS'		=> '%d posts',	'VIEW_UNREAD_POST'		=> 'First unread post',	'VISIT_WEBSITE'			=> 'WWW',	'VOTE_SUBMITTED'		=> 'Your vote has been cast.',	'VOTE_CONVERTED'		=> 'Changing votes is not supported for converted polls.',));?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License*//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_captcha{	var $u_action;	function main($id, $mode)	{		global $db, $user, $auth, $template;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('acp/board');		include($phpbb_root_path . 'includes/captcha/captcha_factory.' . $phpEx);		$captchas = phpbb_captcha_factory::get_captcha_types();		$selected = request_var('select_captcha', $config['captcha_plugin']);		$selected = (isset($captchas['available'][$selected]) || isset($captchas['unavailable'][$selected])) ? $selected : $config['captcha_plugin'];		$configure = request_var('configure', false);		// Oh, they are just here for the view		if (isset($_GET['captcha_demo']))		{			$this->deliver_demo($selected);		}		// Delegate		if ($configure)		{			$config_captcha =& phpbb_captcha_factory::get_instance($selected);			$config_captcha->acp_page($id, $this);		}		else		{			$config_vars = array(				'enable_confirm'		=> array('tpl' => 'REG_ENABLE', 'default' => false),				'enable_post_confirm'	=> array('tpl' => 'POST_ENABLE', 'default' => false),				'confirm_refresh'		=> array('tpl' => 'CONFIRM_REFRESH', 'default' => false),				'max_reg_attempts'		=> array('tpl' => 'REG_LIMIT', 'default' => 0),				'max_login_attempts'		=> array('tpl' => 'MAX_LOGIN_ATTEMPTS', 'default' => 0),			);			$this->tpl_name = 'acp_captcha';			$this->page_title = 'ACP_VC_SETTINGS';			$form_key = 'acp_captcha';			add_form_key($form_key);			$submit = request_var('main_submit', false);			if ($submit && check_form_key($form_key))			{				foreach ($config_vars as $config_var => $options)				{					set_config($config_var, request_var($config_var, $options['default']));				}				if ($selected !== $config['captcha_plugin'])				{					// sanity check					if (isset($captchas['available'][$selected]))					{						$old_captcha =& phpbb_captcha_factory::get_instance($config['captcha_plugin']);						$old_captcha->uninstall();						set_config('captcha_plugin', $selected);						$new_captcha =& phpbb_captcha_factory::get_instance($config['captcha_plugin']);						$new_captcha->install();						add_log('admin', 'LOG_CONFIG_VISUAL');					}					else					{						trigger_error($user->lang['CAPTCHA_UNAVAILABLE'] . adm_back_link($this->u_action), E_USER_WARNING);					}				}				trigger_error($user->lang['CONFIG_UPDATED'] . adm_back_link($this->u_action));			}			else if ($submit)			{				trigger_error($user->lang['FORM_INVALID'] . adm_back_link(), E_USER_WARNING);			}			else			{				$captcha_select = '';				foreach ($captchas['available'] as $value => $title)				{					$current = ($selected !== false && $value == $selected) ? ' selected="selected"' : '';					$captcha_select .= '<option value="' . $value . '"' . $current . '>' . $user->lang[$title] . '</option>';				}				foreach ($captchas['unavailable'] as $value => $title)				{					$current = ($selected !== false && $value == $selected) ? ' selected="selected"' : '';					$captcha_select .= '<option value="' . $value . '"' . $current . ' class="disabled-option">' . $user->lang[$title] . '</option>';				}				$demo_captcha =& phpbb_captcha_factory::get_instance($selected);				foreach ($config_vars as $config_var => $options)				{					$template->assign_var($options['tpl'], (isset($_POST[$config_var])) ? request_var($config_var, $options['default']) : $config[$config_var]) ;				}				$template->assign_vars(array(					'CAPTCHA_PREVIEW_TPL'	=> $demo_captcha->get_demo_template($id),					'S_CAPTCHA_HAS_CONFIG'	=> $demo_captcha->has_config(),					'CAPTCHA_SELECT'		=> $captcha_select,				));			}		}	}	/**	* Entry point for delivering image CAPTCHAs in the ACP.	*/	function deliver_demo($selected)	{		global $db, $user, $config;		$captcha =& phpbb_captcha_factory::get_instance($selected);		$captcha->init(CONFIRM_REG);		$captcha->execute_demo();		garbage_collection();		exit_handler();	}}?>
<?php/**** @package search* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @ignore*/include_once($phpbb_root_path . 'includes/search/search.' . $phpEx);/*** fulltext_native* phpBB's own db driven fulltext search, version 2* @package search*/class fulltext_native extends search_backend{	var $stats = array();	var $word_length = array();	var $search_query;	var $common_words = array();	var $must_contain_ids = array();	var $must_not_contain_ids = array();	var $must_exclude_one_ids = array();	/**	* Initialises the fulltext_native search backend with min/max word length and makes sure the UTF-8 normalizer is loaded.	*	* @param	boolean|string	&$error	is passed by reference and should either be set to false on success or an error message on failure.	*	* @access	public	*/	function fulltext_native(&$error)	{		global $phpbb_root_path, $phpEx, $config;		$this->word_length = array('min' => $config['fulltext_native_min_chars'], 'max' => $config['fulltext_native_max_chars']);		/**		* Load the UTF tools		*/		if (!class_exists('utf_normalizer'))		{			include($phpbb_root_path . 'includes/utf/utf_normalizer.' . $phpEx);		}		$error = false;	}	/**	* This function fills $this->search_query with the cleaned user search query.	*	* If $terms is 'any' then the words will be extracted from the search query	* and combined with | inside brackets. They will afterwards be treated like	* an standard search query.	*	* Then it analyses the query and fills the internal arrays $must_not_contain_ids,	* $must_contain_ids and $must_exclude_one_ids which are later used by keyword_search().	*	* @param	string	$keywords	contains the search query string as entered by the user	* @param	string	$terms		is either 'all' (use search query as entered, default words to 'must be contained in post')	* 	or 'any' (find all posts containing at least one of the given words)	* @return	boolean				false if no valid keywords were found and otherwise true	*	* @access	public	*/	function split_keywords($keywords, $terms)	{		global $db, $user, $config;		$tokens = '+-|()*';		$keywords = trim($this->cleanup($keywords, $tokens));		// allow word|word|word without brackets		if ((strpos($keywords, ' ') === false) && (strpos($keywords, '|') !== false) && (strpos($keywords, '(') === false))		{			$keywords = '(' . $keywords . ')';		}		$open_bracket = $space = false;		for ($i = 0, $n = strlen($keywords); $i < $n; $i++)		{			if ($open_bracket !== false)			{				switch ($keywords[$i])				{					case ')':						if ($open_bracket + 1 == $i)						{							$keywords[$i - 1] = '|';							$keywords[$i] = '|';						}						$open_bracket = false;					break;					case '(':						$keywords[$i] = '|';					break;					case '+':					case '-':					case ' ':						$keywords[$i] = '|';					break;					case '*':						if ($i === 0 || ($keywords[$i - 1] !== '*' && strcspn($keywords[$i - 1], $tokens) === 0))						{							if ($i === $n - 1 || ($keywords[$i + 1] !== '*' && strcspn($keywords[$i + 1], $tokens) === 0))							{								$keywords = substr($keywords, 0, $i) . substr($keywords, $i + 1);							}						}					break;				}			}			else			{				switch ($keywords[$i])				{					case ')':						$keywords[$i] = ' ';					break;					case '(':						$open_bracket = $i;						$space = false;					break;					case '|':						$keywords[$i] = ' ';					break;					case '-':					case '+':						$space = $keywords[$i];					break;					case ' ':						if ($space !== false)						{							$keywords[$i] = $space;						}					break;					default:						$space = false;				}			}		}		if ($open_bracket)		{			$keywords .= ')';		}		$match = array(			'#  +#',			'#\|\|+#',			'#(\+|\-)(?:\+|\-)+#',			'#\(\|#',			'#\|\)#',		);		$replace = array(			' ',			'|',			'$1',			'(',			')',		);		$keywords = preg_replace($match, $replace, $keywords);		$num_keywords = sizeof(explode(' ', $keywords));		// We limit the number of allowed keywords to minimize load on the database		if ($config['max_num_search_keywords'] && $num_keywords > $config['max_num_search_keywords'])		{			trigger_error($user->lang('MAX_NUM_SEARCH_KEYWORDS_REFINE', $config['max_num_search_keywords'], $num_keywords));		}		// $keywords input format: each word separated by a space, words in a bracket are not separated		// the user wants to search for any word, convert the search query		if ($terms == 'any')		{			$words = array();			preg_match_all('#([^\\s+\\-|()]+)(?:$|[\\s+\\-|()])#u', $keywords, $words);			if (sizeof($words[1]))			{				$keywords = '(' . implode('|', $words[1]) . ')';			}		}		// set the search_query which is shown to the user		$this->search_query = $keywords;		$exact_words = array();		preg_match_all('#([^\\s+\\-|*()]+)(?:$|[\\s+\\-|()])#u', $keywords, $exact_words);		$exact_words = $exact_words[1];		$common_ids = $words = array();		if (sizeof($exact_words))		{			$sql = 'SELECT word_id, word_text, word_common				FROM ' . SEARCH_WORDLIST_TABLE . '				WHERE ' . $db->sql_in_set('word_text', $exact_words) . '				ORDER BY word_count ASC';			$result = $db->sql_query($sql);			// store an array of words and ids, remove common words			while ($row = $db->sql_fetchrow($result))			{				if ($row['word_common'])				{					$this->common_words[] = $row['word_text'];					$common_ids[$row['word_text']] = (int) $row['word_id'];					continue;				}				$words[$row['word_text']] = (int) $row['word_id'];			}			$db->sql_freeresult($result);		}		unset($exact_words);		// now analyse the search query, first split it using the spaces		$query = explode(' ', $keywords);		$this->must_contain_ids = array();		$this->must_not_contain_ids = array();		$this->must_exclude_one_ids = array();		$mode = '';		$ignore_no_id = true;		foreach ($query as $word)		{			if (empty($word))			{				continue;			}			// words which should not be included			if ($word[0] == '-')			{				$word = substr($word, 1);				// a group of which at least one may not be in the resulting posts				if ($word[0] == '(')				{					$word = array_unique(explode('|', substr($word, 1, -1)));					$mode = 'must_exclude_one';				}				// one word which should not be in the resulting posts				else				{					$mode = 'must_not_contain';				}				$ignore_no_id = true;			}			// words which have to be included			else			{				// no prefix is the same as a +prefix				if ($word[0] == '+')				{					$word = substr($word, 1);				}				// a group of words of which at least one word should be in every resulting post				if ($word[0] == '(')				{					$word = array_unique(explode('|', substr($word, 1, -1)));				}				$ignore_no_id = false;				$mode = 'must_contain';			}			if (empty($word))			{				continue;			}			// if this is an array of words then retrieve an id for each			if (is_array($word))			{				$non_common_words = array();				$id_words = array();				foreach ($word as $i => $word_part)				{					if (strpos($word_part, '*') !== false)					{						$id_words[] = '\'' . $db->sql_escape(str_replace('*', '%', $word_part)) . '\'';						$non_common_words[] = $word_part;					}					else if (isset($words[$word_part]))					{						$id_words[] = $words[$word_part];						$non_common_words[] = $word_part;					}					else					{						$len = utf8_strlen($word_part);						if ($len < $this->word_length['min'] || $len > $this->word_length['max'])						{							$this->common_words[] = $word_part;						}					}				}				if (sizeof($id_words))				{					sort($id_words);					if (sizeof($id_words) > 1)					{						$this->{$mode . '_ids'}[] = $id_words;					}					else					{						$mode = ($mode == 'must_exclude_one') ? 'must_not_contain' : $mode;						$this->{$mode . '_ids'}[] = $id_words[0];					}				}				// throw an error if we shall not ignore unexistant words				else if (!$ignore_no_id && sizeof($non_common_words))				{					trigger_error(sprintf($user->lang['WORDS_IN_NO_POST'], implode(', ', $non_common_words)));				}				unset($non_common_words);			}			// else we only need one id			else if (($wildcard = strpos($word, '*') !== false) || isset($words[$word]))			{				if ($wildcard)				{					$len = utf8_strlen(str_replace('*', '', $word));					if ($len >= $this->word_length['min'] && $len <= $this->word_length['max'])					{						$this->{$mode . '_ids'}[] = '\'' . $db->sql_escape(str_replace('*', '%', $word)) . '\'';					}					else					{						$this->common_words[] = $word;					}				}				else				{					$this->{$mode . '_ids'}[] = $words[$word];				}			}			// throw an error if we shall not ignore unexistant words			else if (!$ignore_no_id)			{				if (!isset($common_ids[$word]))				{					$len = utf8_strlen($word);					if ($len >= $this->word_length['min'] && $len <= $this->word_length['max'])					{						trigger_error(sprintf($user->lang['WORD_IN_NO_POST'], $word));					}					else					{						$this->common_words[] = $word;					}				}			}			else			{				$len = utf8_strlen($word);				if ($len < $this->word_length['min'] || $len > $this->word_length['max'])				{					$this->common_words[] = $word;				}			}		}		// we can't search for negatives only		if (!sizeof($this->must_contain_ids))		{			return false;		}		if (!empty($this->search_query))		{			return true;		}		return false;	}	/**	* Performs a search on keywords depending on display specific params. You have to run split_keywords() first.	*	* @param	string		$type				contains either posts or topics depending on what should be searched for	* @param	string		$fields				contains either titleonly (topic titles should be searched), msgonly (only message bodies should be searched), firstpost (only subject and body of the first post should be searched) or all (all post bodies and subjects should be searched)	* @param	string		$terms				is either 'all' (use query as entered, words without prefix should default to "have to be in field") or 'any' (ignore search query parts and just return all posts that contain any of the specified words)	* @param	array		$sort_by_sql		contains SQL code for the ORDER BY part of a query	* @param	string		$sort_key			is the key of $sort_by_sql for the selected sorting	* @param	string		$sort_dir			is either a or d representing ASC and DESC	* @param	string		$sort_days			specifies the maximum amount of days a post may be old	* @param	array		$ex_fid_ary			specifies an array of forum ids which should not be searched	* @param	array		$m_approve_fid_ary	specifies an array of forum ids in which the searcher is allowed to view unapproved posts	* @param	int			$topic_id			is set to 0 or a topic id, if it is not 0 then only posts in this topic should be searched	* @param	array		$author_ary			an array of author ids if the author should be ignored during the search the array is empty	* @param	string		$author_name		specifies the author match, when ANONYMOUS is also a search-match	* @param	array		&$id_ary			passed by reference, to be filled with ids for the page specified by $start and $per_page, should be ordered	* @param	int			$start				indicates the first index of the page	* @param	int			$per_page			number of ids each page is supposed to contain	* @return	boolean|int						total number of results	*	* @access	public	*/	function keyword_search($type, $fields, $terms, $sort_by_sql, $sort_key, $sort_dir, $sort_days, $ex_fid_ary, $m_approve_fid_ary, $topic_id, $author_ary, $author_name, &$id_ary, $start, $per_page)	{		global $config, $db;		// No keywords? No posts.		if (empty($this->search_query))		{			return false;		}		$must_contain_ids = $this->must_contain_ids;		$must_not_contain_ids = $this->must_not_contain_ids;		$must_exclude_one_ids = $this->must_exclude_one_ids;		sort($must_contain_ids);		sort($must_not_contain_ids);		sort($must_exclude_one_ids);		// generate a search_key from all the options to identify the results		$search_key = md5(implode('#', array(			serialize($must_contain_ids),			serialize($must_not_contain_ids),			serialize($must_exclude_one_ids),			$type,			$fields,			$terms,			$sort_days,			$sort_key,			$topic_id,			implode(',', $ex_fid_ary),			implode(',', $m_approve_fid_ary),			implode(',', $author_ary),			$author_name,		)));		// try reading the results from cache		$total_results = 0;		if ($this->obtain_ids($search_key, $total_results, $id_ary, $start, $per_page, $sort_dir) == SEARCH_RESULT_IN_CACHE)		{			return $total_results;		}		$id_ary = array();		$sql_where = array();		$group_by = false;		$m_num = 0;		$w_num = 0;		$sql_array = array(			'SELECT'	=> ($type == 'posts') ? 'p.post_id' : 'p.topic_id',			'FROM'		=> array(				SEARCH_WORDMATCH_TABLE	=> array(),				SEARCH_WORDLIST_TABLE	=> array(),			),			'LEFT_JOIN' => array(array(				'FROM'	=> array(POSTS_TABLE => 'p'),				'ON'	=> 'm0.post_id = p.post_id',			)),		);		$title_match = '';		$left_join_topics = false;		$group_by = true;		// Build some display specific sql strings		switch ($fields)		{			case 'titleonly':				$title_match = 'title_match = 1';				$group_by = false;			// no break			case 'firstpost':				$left_join_topics = true;				$sql_where[] = 'p.post_id = t.topic_first_post_id';			break;			case 'msgonly':				$title_match = 'title_match = 0';				$group_by = false;			break;		}		if ($type == 'topics')		{			$left_join_topics = true;			$group_by = true;		}		/**		* @todo Add a query optimizer (handle stuff like "+(4|3) +4")		*/		foreach ($this->must_contain_ids as $subquery)		{			if (is_array($subquery))			{				$group_by = true;				$word_id_sql = array();				$word_ids = array();				foreach ($subquery as $id)				{					if (is_string($id))					{						$sql_array['LEFT_JOIN'][] = array(							'FROM'	=> array(SEARCH_WORDLIST_TABLE => 'w' . $w_num),							'ON'	=> "w$w_num.word_text LIKE $id"						);						$word_ids[] = "w$w_num.word_id";						$w_num++;					}					else					{						$word_ids[] = $id;					}				}				$sql_where[] = $db->sql_in_set("m$m_num.word_id", $word_ids);				unset($word_id_sql);				unset($word_ids);			}			else if (is_string($subquery))			{				$sql_array['FROM'][SEARCH_WORDLIST_TABLE][] = 'w' . $w_num;				$sql_where[] = "w$w_num.word_text LIKE $subquery";				$sql_where[] = "m$m_num.word_id = w$w_num.word_id";				$group_by = true;				$w_num++;			}			else			{				$sql_where[] = "m$m_num.word_id = $subquery";			}			$sql_array['FROM'][SEARCH_WORDMATCH_TABLE][] = 'm' . $m_num;			if ($title_match)			{				$sql_where[] = "m$m_num.$title_match";			}			if ($m_num != 0)			{				$sql_where[] = "m$m_num.post_id = m0.post_id";			}			$m_num++;		}		foreach ($this->must_not_contain_ids as $key => $subquery)		{			if (is_string($subquery))			{				$sql_array['LEFT_JOIN'][] = array(					'FROM'	=> array(SEARCH_WORDLIST_TABLE => 'w' . $w_num),					'ON'	=> "w$w_num.word_text LIKE $subquery"				);				$this->must_not_contain_ids[$key] = "w$w_num.word_id";				$group_by = true;				$w_num++;			}		}		if (sizeof($this->must_not_contain_ids))		{			$sql_array['LEFT_JOIN'][] = array(				'FROM'	=> array(SEARCH_WORDMATCH_TABLE => 'm' . $m_num),				'ON'	=> $db->sql_in_set("m$m_num.word_id", $this->must_not_contain_ids) . (($title_match) ? " AND m$m_num.$title_match" : '') . " AND m$m_num.post_id = m0.post_id"			);			$sql_where[] = "m$m_num.word_id IS NULL";			$m_num++;		}		foreach ($this->must_exclude_one_ids as $ids)		{			$is_null_joins = array();			foreach ($ids as $id)			{				if (is_string($id))				{					$sql_array['LEFT_JOIN'][] = array(						'FROM'	=> array(SEARCH_WORDLIST_TABLE => 'w' . $w_num),						'ON'	=> "w$w_num.word_text LIKE $id"					);					$id = "w$w_num.word_id";					$group_by = true;					$w_num++;				}				$sql_array['LEFT_JOIN'][] = array(					'FROM'	=> array(SEARCH_WORDMATCH_TABLE => 'm' . $m_num),					'ON'	=> "m$m_num.word_id = $id AND m$m_num.post_id = m0.post_id" . (($title_match) ? " AND m$m_num.$title_match" : '')				);				$is_null_joins[] = "m$m_num.word_id IS NULL";				$m_num++;			}			$sql_where[] = '(' . implode(' OR ', $is_null_joins) . ')';		}		if (!sizeof($m_approve_fid_ary))		{			$sql_where[] = 'p.post_approved = 1';		}		else if ($m_approve_fid_ary !== array(-1))		{			$sql_where[] = '(p.post_approved = 1 OR ' . $db->sql_in_set('p.forum_id', $m_approve_fid_ary, true) . ')';		}		if ($topic_id)		{			$sql_where[] = 'p.topic_id = ' . $topic_id;		}		if (sizeof($author_ary))		{			if ($author_name)			{				// first one matches post of registered users, second one guests and deleted users				$sql_author = '(' . $db->sql_in_set('p.poster_id', array_diff($author_ary, array(ANONYMOUS)), false, true) . ' OR p.post_username ' . $author_name . ')';			}			else			{				$sql_author = $db->sql_in_set('p.poster_id', $author_ary);			}			$sql_where[] = $sql_author;		}		if (sizeof($ex_fid_ary))		{			$sql_where[] = $db->sql_in_set('p.forum_id', $ex_fid_ary, true);		}		if ($sort_days)		{			$sql_where[] = 'p.post_time >= ' . (time() - ($sort_days * 86400));		}		$sql_array['WHERE'] = implode(' AND ', $sql_where);		$is_mysql = false;		// if the total result count is not cached yet, retrieve it from the db		if (!$total_results)		{			$sql = '';			$sql_array_count = $sql_array;			if ($left_join_topics)			{				$sql_array_count['LEFT_JOIN'][] = array(					'FROM'	=> array(TOPICS_TABLE => 't'),					'ON'	=> 'p.topic_id = t.topic_id'				);			}			switch ($db->sql_layer)			{				case 'mysql4':				case 'mysqli':					// 3.x does not support SQL_CALC_FOUND_ROWS					// $sql_array['SELECT'] = 'SQL_CALC_FOUND_ROWS ' . $sql_array['SELECT'];					$is_mysql = true;				break;				case 'sqlite':					$sql_array_count['SELECT'] = ($type == 'posts') ? 'DISTINCT p.post_id' : 'DISTINCT p.topic_id';					$sql = 'SELECT COUNT(' . (($type == 'posts') ? 'post_id' : 'topic_id') . ') as total_results							FROM (' . $db->sql_build_query('SELECT', $sql_array_count) . ')';				// no break				default:					$sql_array_count['SELECT'] = ($type == 'posts') ? 'COUNT(DISTINCT p.post_id) AS total_results' : 'COUNT(DISTINCT p.topic_id) AS total_results';					$sql = (!$sql) ? $db->sql_build_query('SELECT', $sql_array_count) : $sql;					$result = $db->sql_query($sql);					$total_results = (int) $db->sql_fetchfield('total_results');					$db->sql_freeresult($result);					if (!$total_results)					{						return false;					}				break;			}			unset($sql_array_count, $sql);		}		// Build sql strings for sorting		$sql_sort = $sort_by_sql[$sort_key] . (($sort_dir == 'a') ? ' ASC' : ' DESC');		switch ($sql_sort[0])		{			case 'u':				$sql_array['FROM'][USERS_TABLE] = 'u';				$sql_where[] = 'u.user_id = p.poster_id ';			break;			case 't':				$left_join_topics = true;			break;			case 'f':				$sql_array['FROM'][FORUMS_TABLE] = 'f';				$sql_where[] = 'f.forum_id = p.forum_id';			break;		}		if ($left_join_topics)		{			$sql_array['LEFT_JOIN'][] = array(				'FROM'	=> array(TOPICS_TABLE => 't'),				'ON'	=> 'p.topic_id = t.topic_id'			);		}		$sql_array['WHERE'] = implode(' AND ', $sql_where);		$sql_array['GROUP_BY'] = ($group_by) ? (($type == 'posts') ? 'p.post_id' : 'p.topic_id') . ', ' . $sort_by_sql[$sort_key] : '';		$sql_array['ORDER_BY'] = $sql_sort;		unset($sql_where, $sql_sort, $group_by);		$sql = $db->sql_build_query('SELECT', $sql_array);		$result = $db->sql_query_limit($sql, $config['search_block_size'], $start);		while ($row = $db->sql_fetchrow($result))		{			$id_ary[] = (int) $row[(($type == 'posts') ? 'post_id' : 'topic_id')];		}		$db->sql_freeresult($result);		if (!sizeof($id_ary))		{			return false;		}		// if we use mysql and the total result count is not cached yet, retrieve it from the db		if (!$total_results && $is_mysql)		{			// Count rows for the executed queries. Replace $select within $sql with SQL_CALC_FOUND_ROWS, and run it.			$sql_array_copy = $sql_array;			$sql_array_copy['SELECT'] = 'SQL_CALC_FOUND_ROWS p.post_id ';			$sql = $db->sql_build_query('SELECT', $sql_array_copy);			unset($sql_array_copy);			$db->sql_query($sql);			$db->sql_freeresult($result);			$sql = 'SELECT FOUND_ROWS() as total_results';			$result = $db->sql_query($sql);			$total_results = (int) $db->sql_fetchfield('total_results');			$db->sql_freeresult($result);			if (!$total_results)			{				return false;			}		}		// store the ids, from start on then delete anything that isn't on the current page because we only need ids for one page		$this->save_ids($search_key, $this->search_query, $author_ary, $total_results, $id_ary, $start, $sort_dir);		$id_ary = array_slice($id_ary, 0, (int) $per_page);		return $total_results;	}	/**	* Performs a search on an author's posts without caring about message contents. Depends on display specific params	*	* @param	string		$type				contains either posts or topics depending on what should be searched for	* @param	boolean		$firstpost_only		if true, only topic starting posts will be considered	* @param	array		$sort_by_sql		contains SQL code for the ORDER BY part of a query	* @param	string		$sort_key			is the key of $sort_by_sql for the selected sorting	* @param	string		$sort_dir			is either a or d representing ASC and DESC	* @param	string		$sort_days			specifies the maximum amount of days a post may be old	* @param	array		$ex_fid_ary			specifies an array of forum ids which should not be searched	* @param	array		$m_approve_fid_ary	specifies an array of forum ids in which the searcher is allowed to view unapproved posts	* @param	int			$topic_id			is set to 0 or a topic id, if it is not 0 then only posts in this topic should be searched	* @param	array		$author_ary			an array of author ids	* @param	string		$author_name		specifies the author match, when ANONYMOUS is also a search-match	* @param	array		&$id_ary			passed by reference, to be filled with ids for the page specified by $start and $per_page, should be ordered	* @param	int			$start				indicates the first index of the page	* @param	int			$per_page			number of ids each page is supposed to contain	* @return	boolean|int						total number of results	*	* @access	public	*/	function author_search($type, $firstpost_only, $sort_by_sql, $sort_key, $sort_dir, $sort_days, $ex_fid_ary, $m_approve_fid_ary, $topic_id, $author_ary, $author_name, &$id_ary, $start, $per_page)	{		global $config, $db;		// No author? No posts.		if (!sizeof($author_ary))		{			return 0;		}		// generate a search_key from all the options to identify the results		$search_key = md5(implode('#', array(			'',			$type,			($firstpost_only) ? 'firstpost' : '',			'',			'',			$sort_days,			$sort_key,			$topic_id,			implode(',', $ex_fid_ary),			implode(',', $m_approve_fid_ary),			implode(',', $author_ary),			$author_name,		)));		// try reading the results from cache		$total_results = 0;		if ($this->obtain_ids($search_key, $total_results, $id_ary, $start, $per_page, $sort_dir) == SEARCH_RESULT_IN_CACHE)		{			return $total_results;		}		$id_ary = array();		// Create some display specific sql strings		if ($author_name)		{			// first one matches post of registered users, second one guests and deleted users			$sql_author = '(' . $db->sql_in_set('p.poster_id', array_diff($author_ary, array(ANONYMOUS)), false, true) . ' OR p.post_username ' . $author_name . ')';		}		else		{			$sql_author = $db->sql_in_set('p.poster_id', $author_ary);		}		$sql_fora		= (sizeof($ex_fid_ary)) ? ' AND ' . $db->sql_in_set('p.forum_id', $ex_fid_ary, true) : '';		$sql_time		= ($sort_days) ? ' AND p.post_time >= ' . (time() - ($sort_days * 86400)) : '';		$sql_topic_id	= ($topic_id) ? ' AND p.topic_id = ' . (int) $topic_id : '';		$sql_firstpost = ($firstpost_only) ? ' AND p.post_id = t.topic_first_post_id' : '';		// Build sql strings for sorting		$sql_sort = $sort_by_sql[$sort_key] . (($sort_dir == 'a') ? ' ASC' : ' DESC');		$sql_sort_table = $sql_sort_join = '';		switch ($sql_sort[0])		{			case 'u':				$sql_sort_table	= USERS_TABLE . ' u, ';				$sql_sort_join	= ' AND u.user_id = p.poster_id ';			break;			case 't':				$sql_sort_table	= ($type == 'posts' && !$firstpost_only) ? TOPICS_TABLE . ' t, ' : '';				$sql_sort_join	= ($type == 'posts' && !$firstpost_only) ? ' AND t.topic_id = p.topic_id ' : '';			break;			case 'f':				$sql_sort_table	= FORUMS_TABLE . ' f, ';				$sql_sort_join	= ' AND f.forum_id = p.forum_id ';			break;		}		if (!sizeof($m_approve_fid_ary))		{			$m_approve_fid_sql = ' AND p.post_approved = 1';		}		else if ($m_approve_fid_ary == array(-1))		{			$m_approve_fid_sql = '';		}		else		{			$m_approve_fid_sql = ' AND (p.post_approved = 1 OR ' . $db->sql_in_set('p.forum_id', $m_approve_fid_ary, true) . ')';		}		$select = ($type == 'posts') ? 'p.post_id' : 't.topic_id';		$is_mysql = false;		// If the cache was completely empty count the results		if (!$total_results)		{			switch ($db->sql_layer)			{				case 'mysql4':				case 'mysqli'://					$select = 'SQL_CALC_FOUND_ROWS ' . $select;					$is_mysql = true;				break;				default:					if ($type == 'posts')					{						$sql = 'SELECT COUNT(p.post_id) as total_results							FROM ' . POSTS_TABLE . ' p' . (($firstpost_only) ? ', ' . TOPICS_TABLE . ' t ' : ' ') . "							WHERE $sql_author								$sql_topic_id								$sql_firstpost								$m_approve_fid_sql								$sql_fora								$sql_time";					}					else					{						if ($db->sql_layer == 'sqlite')						{							$sql = 'SELECT COUNT(topic_id) as total_results								FROM (SELECT DISTINCT t.topic_id';						}						else						{							$sql = 'SELECT COUNT(DISTINCT t.topic_id) as total_results';						}						$sql .= ' FROM ' . TOPICS_TABLE . ' t, ' . POSTS_TABLE . " p							WHERE $sql_author								$sql_topic_id								$sql_firstpost								$m_approve_fid_sql								$sql_fora								AND t.topic_id = p.topic_id								$sql_time" . (($db->sql_layer == 'sqlite') ? ')' : '');					}					$result = $db->sql_query($sql);					$total_results = (int) $db->sql_fetchfield('total_results');					$db->sql_freeresult($result);					if (!$total_results)					{						return false;					}				break;			}		}		// Build the query for really selecting the post_ids		if ($type == 'posts')		{			$sql = "SELECT $select				FROM " . $sql_sort_table . POSTS_TABLE . ' p' . (($firstpost_only) ? ', ' . TOPICS_TABLE . ' t' : '') . "				WHERE $sql_author					$sql_topic_id					$sql_firstpost					$m_approve_fid_sql					$sql_fora					$sql_sort_join					$sql_time				ORDER BY $sql_sort";			$field = 'post_id';		}		else		{			$sql = "SELECT $select				FROM " . $sql_sort_table . TOPICS_TABLE . ' t, ' . POSTS_TABLE . " p				WHERE $sql_author					$sql_topic_id					$sql_firstpost					$m_approve_fid_sql					$sql_fora					AND t.topic_id = p.topic_id					$sql_sort_join					$sql_time				GROUP BY t.topic_id, " . $sort_by_sql[$sort_key] . '				ORDER BY ' . $sql_sort;			$field = 'topic_id';		}		// Only read one block of posts from the db and then cache it		$result = $db->sql_query_limit($sql, $config['search_block_size'], $start);		while ($row = $db->sql_fetchrow($result))		{			$id_ary[] = (int) $row[$field];		}		$db->sql_freeresult($result);		if (!$total_results && $is_mysql)		{			// Count rows for the executed queries. Replace $select within $sql with SQL_CALC_FOUND_ROWS, and run it.			$sql = str_replace('SELECT ' . $select, 'SELECT DISTINCT SQL_CALC_FOUND_ROWS p.post_id', $sql);			$db->sql_query($sql);			$db->sql_freeresult($result);			$sql = 'SELECT FOUND_ROWS() as total_results';			$result = $db->sql_query($sql);			$total_results = (int) $db->sql_fetchfield('total_results');			$db->sql_freeresult($result);			if (!$total_results)			{				return false;			}		}		if (sizeof($id_ary))		{			$this->save_ids($search_key, '', $author_ary, $total_results, $id_ary, $start, $sort_dir);			$id_ary = array_slice($id_ary, 0, $per_page);			return $total_results;		}		return false;	}	/**	* Split a text into words of a given length	*	* The text is converted to UTF-8, cleaned up, and split. Then, words that	* conform to the defined length range are returned in an array.	*	* NOTE: duplicates are NOT removed from the return array	*	* @param	string	$text	Text to split, encoded in UTF-8	* @return	array			Array of UTF-8 words	*	* @access	private	*/	function split_message($text)	{		global $phpbb_root_path, $phpEx, $user;		$match = $words = array();		/**		* Taken from the original code		*/		// Do not index code		$match[] = '#\[code(?:=.*?)?(\:?[0-9a-z]{5,})\].*?\[\/code(\:?[0-9a-z]{5,})\]#is';		// BBcode		$match[] = '#\[\/?[a-z0-9\*\+\-]+(?:=.*?)?(?::[a-z])?(\:?[0-9a-z]{5,})\]#';		$min = $this->word_length['min'];		$max = $this->word_length['max'];		$isset_min = $min - 1;		/**		* Clean up the string, remove HTML tags, remove BBCodes		*/		$word = strtok($this->cleanup(preg_replace($match, ' ', strip_tags($text)), -1), ' ');		while (strlen($word))		{			if (strlen($word) > 255 || strlen($word) <= $isset_min)			{				/**				* Words longer than 255 bytes are ignored. This will have to be				* changed whenever we change the length of search_wordlist.word_text				*				* Words shorter than $isset_min bytes are ignored, too				*/				$word = strtok(' ');				continue;			}			$len = utf8_strlen($word);			/**			* Test whether the word is too short to be indexed.			*			* Note that this limit does NOT apply to CJK and Hangul			*/			if ($len < $min)			{				/**				* Note: this could be optimized. If the codepoint is lower than Hangul's range				* we know that it will also be lower than CJK ranges				*/				if ((strncmp($word, UTF8_HANGUL_FIRST, 3) < 0 || strncmp($word, UTF8_HANGUL_LAST, 3) > 0)				 && (strncmp($word, UTF8_CJK_FIRST, 3) < 0 || strncmp($word, UTF8_CJK_LAST, 3) > 0)				 && (strncmp($word, UTF8_CJK_B_FIRST, 4) < 0 || strncmp($word, UTF8_CJK_B_LAST, 4) > 0))				{					$word = strtok(' ');					continue;				}			}			$words[] = $word;			$word = strtok(' ');		}		return $words;	}	/**	* Updates wordlist and wordmatch tables when a message is posted or changed	*	* @param	string	$mode		Contains the post mode: edit, post, reply, quote	* @param	int		$post_id	The id of the post which is modified/created	* @param	string	&$message	New or updated post content	* @param	string	&$subject	New or updated post subject	* @param	int		$poster_id	Post author's user id	* @param	int		$forum_id	The id of the forum in which the post is located	*	* @access	public	*/	function index($mode, $post_id, &$message, &$subject, $poster_id, $forum_id)	{		global $config, $db, $user;		if (!$config['fulltext_native_load_upd'])		{			/**			* The search indexer is disabled, return			*/			return;		}		// Split old and new post/subject to obtain array of 'words'		$split_text = $this->split_message($message);		$split_title = $this->split_message($subject);		$cur_words = array('post' => array(), 'title' => array());		$words = array();		if ($mode == 'edit')		{			$words['add']['post'] = array();			$words['add']['title'] = array();			$words['del']['post'] = array();			$words['del']['title'] = array();			$sql = 'SELECT w.word_id, w.word_text, m.title_match				FROM ' . SEARCH_WORDLIST_TABLE . ' w, ' . SEARCH_WORDMATCH_TABLE . " m				WHERE m.post_id = $post_id					AND w.word_id = m.word_id";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$which = ($row['title_match']) ? 'title' : 'post';				$cur_words[$which][$row['word_text']] = $row['word_id'];			}			$db->sql_freeresult($result);			$words['add']['post'] = array_diff($split_text, array_keys($cur_words['post']));			$words['add']['title'] = array_diff($split_title, array_keys($cur_words['title']));			$words['del']['post'] = array_diff(array_keys($cur_words['post']), $split_text);			$words['del']['title'] = array_diff(array_keys($cur_words['title']), $split_title);		}		else		{			$words['add']['post'] = $split_text;			$words['add']['title'] = $split_title;			$words['del']['post'] = array();			$words['del']['title'] = array();		}		unset($split_text);		unset($split_title);		// Get unique words from the above arrays		$unique_add_words = array_unique(array_merge($words['add']['post'], $words['add']['title']));		// We now have unique arrays of all words to be added and removed and		// individual arrays of added and removed words for text and title. What		// we need to do now is add the new words (if they don't already exist)		// and then add (or remove) matches between the words and this post		if (sizeof($unique_add_words))		{			$sql = 'SELECT word_id, word_text				FROM ' . SEARCH_WORDLIST_TABLE . '				WHERE ' . $db->sql_in_set('word_text', $unique_add_words);			$result = $db->sql_query($sql);			$word_ids = array();			while ($row = $db->sql_fetchrow($result))			{				$word_ids[$row['word_text']] = $row['word_id'];			}			$db->sql_freeresult($result);			$new_words = array_diff($unique_add_words, array_keys($word_ids));			$db->sql_transaction('begin');			if (sizeof($new_words))			{				$sql_ary = array();				foreach ($new_words as $word)				{					$sql_ary[] = array('word_text' => (string) $word, 'word_count' => 0);				}				$db->sql_return_on_error(true);				$db->sql_multi_insert(SEARCH_WORDLIST_TABLE, $sql_ary);				$db->sql_return_on_error(false);			}			unset($new_words, $sql_ary);		}		else		{			$db->sql_transaction('begin');		}		// now update the search match table, remove links to removed words and add links to new words		foreach ($words['del'] as $word_in => $word_ary)		{			$title_match = ($word_in == 'title') ? 1 : 0;			if (sizeof($word_ary))			{				$sql_in = array();				foreach ($word_ary as $word)				{					$sql_in[] = $cur_words[$word_in][$word];				}				$sql = 'DELETE FROM ' . SEARCH_WORDMATCH_TABLE . '					WHERE ' . $db->sql_in_set('word_id', $sql_in) . '						AND post_id = ' . intval($post_id) . "						AND title_match = $title_match";				$db->sql_query($sql);				$sql = 'UPDATE ' . SEARCH_WORDLIST_TABLE . '					SET word_count = word_count - 1					WHERE ' . $db->sql_in_set('word_id', $sql_in) . '						AND word_count > 0';				$db->sql_query($sql);				unset($sql_in);			}		}		$db->sql_return_on_error(true);		foreach ($words['add'] as $word_in => $word_ary)		{			$title_match = ($word_in == 'title') ? 1 : 0;			if (sizeof($word_ary))			{				$sql = 'INSERT INTO ' . SEARCH_WORDMATCH_TABLE . ' (post_id, word_id, title_match)					SELECT ' . (int) $post_id . ', word_id, ' . (int) $title_match . '					FROM ' . SEARCH_WORDLIST_TABLE . '					WHERE ' . $db->sql_in_set('word_text', $word_ary);				$db->sql_query($sql);				$sql = 'UPDATE ' . SEARCH_WORDLIST_TABLE . '					SET word_count = word_count + 1					WHERE ' . $db->sql_in_set('word_text', $word_ary);				$db->sql_query($sql);			}		}		$db->sql_return_on_error(false);		$db->sql_transaction('commit');		// destroy cached search results containing any of the words removed or added		$this->destroy_cache(array_unique(array_merge($words['add']['post'], $words['add']['title'], $words['del']['post'], $words['del']['title'])), array($poster_id));		unset($unique_add_words);		unset($words);		unset($cur_words);	}	/**	* Removes entries from the wordmatch table for the specified post_ids	*/	function index_remove($post_ids, $author_ids, $forum_ids)	{		global $db;		if (sizeof($post_ids))		{			$sql = 'SELECT w.word_id, w.word_text, m.title_match				FROM ' . SEARCH_WORDMATCH_TABLE . ' m, ' . SEARCH_WORDLIST_TABLE . ' w				WHERE ' . $db->sql_in_set('m.post_id', $post_ids) . '					AND w.word_id = m.word_id';			$result = $db->sql_query($sql);			$message_word_ids = $title_word_ids = $word_texts = array();			while ($row = $db->sql_fetchrow($result))			{				if ($row['title_match'])				{					$title_word_ids[] = $row['word_id'];				}				else				{					$message_word_ids[] = $row['word_id'];				}				$word_texts[] = $row['word_text'];			}			$db->sql_freeresult($result);			if (sizeof($title_word_ids))			{				$sql = 'UPDATE ' . SEARCH_WORDLIST_TABLE . '					SET word_count = word_count - 1					WHERE ' . $db->sql_in_set('word_id', $title_word_ids) . '						AND word_count > 0';				$db->sql_query($sql);			}			if (sizeof($message_word_ids))			{				$sql = 'UPDATE ' . SEARCH_WORDLIST_TABLE . '					SET word_count = word_count - 1					WHERE ' . $db->sql_in_set('word_id', $message_word_ids) . '						AND word_count > 0';				$db->sql_query($sql);			}			unset($title_word_ids);			unset($message_word_ids);			$sql = 'DELETE FROM ' . SEARCH_WORDMATCH_TABLE . '				WHERE ' . $db->sql_in_set('post_id', $post_ids);			$db->sql_query($sql);		}		$this->destroy_cache(array_unique($word_texts), $author_ids);	}	/**	* Tidy up indexes: Tag 'common words' and remove	* words no longer referenced in the match table	*/	function tidy()	{		global $db, $config;		// Is the fulltext indexer disabled? If yes then we need not		// carry on ... it's okay ... I know when I'm not wanted boo hoo		if (!$config['fulltext_native_load_upd'])		{			set_config('search_last_gc', time(), true);			return;		}		$destroy_cache_words = array();		// Remove common words		if ($config['num_posts'] >= 100 && $config['fulltext_native_common_thres'])		{			$common_threshold = ((double) $config['fulltext_native_common_thres']) / 100.0;			// First, get the IDs of common words			$sql = 'SELECT word_id, word_text				FROM ' . SEARCH_WORDLIST_TABLE . '				WHERE word_count > ' . floor($config['num_posts'] * $common_threshold) . '					OR word_common = 1';			$result = $db->sql_query($sql);			$sql_in = array();			while ($row = $db->sql_fetchrow($result))			{				$sql_in[] = $row['word_id'];				$destroy_cache_words[] = $row['word_text'];			}			$db->sql_freeresult($result);			if (sizeof($sql_in))			{				// Flag the words				$sql = 'UPDATE ' . SEARCH_WORDLIST_TABLE . '					SET word_common = 1					WHERE ' . $db->sql_in_set('word_id', $sql_in);				$db->sql_query($sql);				// by setting search_last_gc to the new time here we make sure that if a user reloads because the				// following query takes too long, he won't run into it again				set_config('search_last_gc', time(), true);				// Delete the matches				$sql = 'DELETE FROM ' . SEARCH_WORDMATCH_TABLE . '					WHERE ' . $db->sql_in_set('word_id', $sql_in);				$db->sql_query($sql);			}			unset($sql_in);		}		if (sizeof($destroy_cache_words))		{			// destroy cached search results containing any of the words that are now common or were removed			$this->destroy_cache(array_unique($destroy_cache_words));		}		set_config('search_last_gc', time(), true);	}	/**	* Deletes all words from the index	*/	function delete_index($acp_module, $u_action)	{		global $db;		switch ($db->sql_layer)		{			case 'sqlite':			case 'firebird':				$db->sql_query('DELETE FROM ' . SEARCH_WORDLIST_TABLE);				$db->sql_query('DELETE FROM ' . SEARCH_WORDMATCH_TABLE);				$db->sql_query('DELETE FROM ' . SEARCH_RESULTS_TABLE);			break;			default:				$db->sql_query('TRUNCATE TABLE ' . SEARCH_WORDLIST_TABLE);				$db->sql_query('TRUNCATE TABLE ' . SEARCH_WORDMATCH_TABLE);				$db->sql_query('TRUNCATE TABLE ' . SEARCH_RESULTS_TABLE);			break;		}	}	/**	* Returns true if both FULLTEXT indexes exist	*/	function index_created()	{		if (!sizeof($this->stats))		{			$this->get_stats();		}		return ($this->stats['total_words'] && $this->stats['total_matches']) ? true : false;	}	/**	* Returns an associative array containing information about the indexes	*/	function index_stats()	{		global $user;		if (!sizeof($this->stats))		{			$this->get_stats();		}		return array(			$user->lang['TOTAL_WORDS']		=> $this->stats['total_words'],			$user->lang['TOTAL_MATCHES']	=> $this->stats['total_matches']);	}	function get_stats()	{		global $db;		$sql = 'SELECT COUNT(*) as total_words			FROM ' . SEARCH_WORDLIST_TABLE;		$result = $db->sql_query($sql);		$this->stats['total_words'] = (int) $db->sql_fetchfield('total_words');		$db->sql_freeresult($result);		$sql = 'SELECT COUNT(*) as total_matches			FROM ' . SEARCH_WORDMATCH_TABLE;		$result = $db->sql_query($sql);		$this->stats['total_matches'] = (int) $db->sql_fetchfield('total_matches');		$db->sql_freeresult($result);	}	/**	* Clean up a text to remove non-alphanumeric characters	*	* This method receives a UTF-8 string, normalizes and validates it, replaces all	* non-alphanumeric characters with strings then returns the result.	*	* Any number of "allowed chars" can be passed as a UTF-8 string in NFC.	*	* @param	string	$text			Text to split, in UTF-8 (not normalized or sanitized)	* @param	string	$allowed_chars	String of special chars to allow	* @param	string	$encoding		Text encoding	* @return	string					Cleaned up text, only alphanumeric chars are left	*	* @todo normalizer::cleanup being able to be used?	*/	function cleanup($text, $allowed_chars = null, $encoding = 'utf-8')	{		global $phpbb_root_path, $phpEx;		static $conv = array(), $conv_loaded = array();		$words = $allow = array();		// Convert the text to UTF-8		$encoding = strtolower($encoding);		if ($encoding != 'utf-8')		{			$text = utf8_recode($text, $encoding);		}		$utf_len_mask = array(			"\xC0"	=>	2,			"\xD0"	=>	2,			"\xE0"	=>	3,			"\xF0"	=>	4		);		/**		* Replace HTML entities and NCRs		*/		$text = htmlspecialchars_decode(utf8_decode_ncr($text), ENT_QUOTES);		/**		* Load the UTF-8 normalizer		*		* If we use it more widely, an instance of that class should be held in a		* a global variable instead		*/		utf_normalizer::nfc($text);		/**		* The first thing we do is:		*		* - convert ASCII-7 letters to lowercase		* - remove the ASCII-7 non-alpha characters		* - remove the bytes that should not appear in a valid UTF-8 string: 0xC0,		*   0xC1 and 0xF5-0xFF		*		* @todo in theory, the third one is already taken care of during normalization and those chars should have been replaced by Unicode replacement chars		*/		$sb_match	= "ISTCPAMELRDOJBNHFGVWUQKYXZ\r\n\t!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\x00\x01\x02\x03\x04\x05\x06\x07\x08\x0B\x0C\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\xC0\xC1\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF";		$sb_replace	= 'istcpamelrdojbnhfgvwuqkyxz                                                                              ';		/**		* This is the list of legal ASCII chars, it is automatically extended		* with ASCII chars from $allowed_chars		*/		$legal_ascii = ' eaisntroludcpmghbfvq10xy2j9kw354867z';		/**		* Prepare an array containing the extra chars to allow		*/		if (isset($allowed_chars[0]))		{			$pos = 0;			$len = strlen($allowed_chars);			do			{				$c = $allowed_chars[$pos];				if ($c < "\x80")				{					/**					* ASCII char					*/					$sb_pos = strpos($sb_match, $c);					if (is_int($sb_pos))					{						/**						* Remove the char from $sb_match and its corresponding						* replacement in $sb_replace						*/						$sb_match = substr($sb_match, 0, $sb_pos) . substr($sb_match, $sb_pos + 1);						$sb_replace = substr($sb_replace, 0, $sb_pos) . substr($sb_replace, $sb_pos + 1);						$legal_ascii .= $c;					}					++$pos;				}				else				{					/**					* UTF-8 char					*/					$utf_len = $utf_len_mask[$c & "\xF0"];					$allow[substr($allowed_chars, $pos, $utf_len)] = 1;					$pos += $utf_len;				}			}			while ($pos < $len);		}		$text = strtr($text, $sb_match, $sb_replace);		$ret = '';		$pos = 0;		$len = strlen($text);		do		{			/**			* Do all consecutive ASCII chars at once			*/			if ($spn = strspn($text, $legal_ascii, $pos))			{				$ret .= substr($text, $pos, $spn);				$pos += $spn;			}			if ($pos >= $len)			{				return $ret;			}			/**			* Capture the UTF char			*/			$utf_len = $utf_len_mask[$text[$pos] & "\xF0"];			$utf_char = substr($text, $pos, $utf_len);			$pos += $utf_len;			if (($utf_char >= UTF8_HANGUL_FIRST && $utf_char <= UTF8_HANGUL_LAST)			 || ($utf_char >= UTF8_CJK_FIRST && $utf_char <= UTF8_CJK_LAST)			 || ($utf_char >= UTF8_CJK_B_FIRST && $utf_char <= UTF8_CJK_B_LAST))			{				/**				* All characters within these ranges are valid				*				* We separate them with a space in order to index each character				* individually				*/				$ret .= ' ' . $utf_char . ' ';				continue;			}			if (isset($allow[$utf_char]))			{				/**				* The char is explicitly allowed				*/				$ret .= $utf_char;				continue;			}			if (isset($conv[$utf_char]))			{				/**				* The char is mapped to something, maybe to itself actually				*/				$ret .= $conv[$utf_char];				continue;			}			/**			* The char isn't mapped, but did we load its conversion table?			*			* The search indexer table is split into blocks. The block number of			* each char is equal to its codepoint right-shifted for 11 bits. It			* means that out of the 11, 16 or 21 meaningful bits of a 2-, 3- or			* 4- byte sequence we only keep the leftmost 0, 5 or 10 bits. Thus,			* all UTF chars encoded in 2 bytes are in the same first block.			*/			if (isset($utf_char[2]))			{				if (isset($utf_char[3]))				{					/**					* 1111 0nnn 10nn nnnn 10nx xxxx 10xx xxxx					* 0000 0111 0011 1111 0010 0000					*/					$idx = ((ord($utf_char[0]) & 0x07) << 7) | ((ord($utf_char[1]) & 0x3F) << 1) | ((ord($utf_char[2]) & 0x20) >> 5);				}				else				{					/**					* 1110 nnnn 10nx xxxx 10xx xxxx					* 0000 0111 0010 0000					*/					$idx = ((ord($utf_char[0]) & 0x07) << 1) | ((ord($utf_char[1]) & 0x20) >> 5);				}			}			else			{				/**				* 110x xxxx 10xx xxxx				* 0000 0000 0000 0000				*/				$idx = 0;			}			/**			* Check if the required conv table has been loaded already			*/			if (!isset($conv_loaded[$idx]))			{				$conv_loaded[$idx] = 1;				$file = $phpbb_root_path . 'includes/utf/data/search_indexer_' . $idx . '.' . $phpEx;				if (file_exists($file))				{					$conv += include($file);				}			}			if (isset($conv[$utf_char]))			{				$ret .= $conv[$utf_char];			}			else			{				/**				* We add an entry to the conversion table so that we				* don't have to convert to codepoint and perform the checks				* that are above this block				*/				$conv[$utf_char] = ' ';				$ret .= ' ';			}		}		while (1);		return $ret;	}	/**	* Returns a list of options for the ACP to display	*/	function acp()	{		global $user, $config;		/**		* if we need any options, copied from fulltext_native for now, will have to be adjusted or removed		*/		$tpl = '		<dl>			<dt><label for="fulltext_native_load_upd">' . $user->lang['YES_SEARCH_UPDATE'] . ':</label><br /><span>' . $user->lang['YES_SEARCH_UPDATE_EXPLAIN'] . '</span></dt>			<dd><label><input type="radio" id="fulltext_native_load_upd" name="config[fulltext_native_load_upd]" value="1"' . (($config['fulltext_native_load_upd']) ? ' checked="checked"' : '') . ' class="radio" /> ' . $user->lang['YES'] . '</label><label><input type="radio" name="config[fulltext_native_load_upd]" value="0"' . ((!$config['fulltext_native_load_upd']) ? ' checked="checked"' : '') . ' class="radio" /> ' . $user->lang['NO'] . '</label></dd>		</dl>		<dl>			<dt><label for="fulltext_native_min_chars">' . $user->lang['MIN_SEARCH_CHARS'] . ':</label><br /><span>' . $user->lang['MIN_SEARCH_CHARS_EXPLAIN'] . '</span></dt>			<dd><input id="fulltext_native_min_chars" type="text" size="3" maxlength="3" name="config[fulltext_native_min_chars]" value="' . (int) $config['fulltext_native_min_chars'] . '" /></dd>		</dl>		<dl>			<dt><label for="fulltext_native_max_chars">' . $user->lang['MAX_SEARCH_CHARS'] . ':</label><br /><span>' . $user->lang['MAX_SEARCH_CHARS_EXPLAIN'] . '</span></dt>			<dd><input id="fulltext_native_max_chars" type="text" size="3" maxlength="3" name="config[fulltext_native_max_chars]" value="' . (int) $config['fulltext_native_max_chars'] . '" /></dd>		</dl>		<dl>			<dt><label for="fulltext_native_common_thres">' . $user->lang['COMMON_WORD_THRESHOLD'] . ':</label><br /><span>' . $user->lang['COMMON_WORD_THRESHOLD_EXPLAIN'] . '</span></dt>			<dd><input id="fulltext_native_common_thres" type="text" size="3" maxlength="3" name="config[fulltext_native_common_thres]" value="' . (double) $config['fulltext_native_common_thres'] . '" /> %</dd>		</dl>		';		// These are fields required in the config table		return array(			'tpl'		=> $tpl,			'config'	=> array('fulltext_native_load_upd' => 'bool', 'fulltext_native_min_chars' => 'integer:0:255', 'fulltext_native_max_chars' => 'integer:0:255', 'fulltext_native_common_thres' => 'double:0:100')		);	}}?>
<?php/**** @package phpBB* @version $Id$* @copyright (c) 2011 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}class phpbb_error_collector{	var $errors;	function phpbb_error_collector()	{		$this->errors = array();	}	function install()	{		set_error_handler(array(&$this, 'error_handler'));	}	function uninstall()	{		restore_error_handler();	}	function error_handler($errno, $msg_text, $errfile, $errline)	{		$this->errors[] = array($errno, $msg_text, $errfile, $errline);	}	function format_errors()	{		$text = '';		foreach ($this->errors as $error)		{			if (!empty($text))			{				$text .= "<br />\n";			}			list($errno, $msg_text, $errfile, $errline) = $error;			// Prevent leakage of local path to phpBB install			$errfile = phpbb_filter_root_path($errfile);			$text .= "Errno $errno: $msg_text at $errfile line $errline";		}		return $text;	}}
<?php/**** install [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ADMIN_CONFIG'				=> 'Administrator configuration',	'ADMIN_PASSWORD'			=> 'Administrator password',	'ADMIN_PASSWORD_CONFIRM'	=> 'Confirm administrator password',	'ADMIN_PASSWORD_EXPLAIN'	=> 'Please enter a password between 6 and 30 characters in length.',	'ADMIN_TEST'				=> 'Check administrator settings',	'ADMIN_USERNAME'			=> 'Administrator username',	'ADMIN_USERNAME_EXPLAIN'	=> 'Please enter a username between 3 and 20 characters in length.',	'APP_MAGICK'				=> 'Imagemagick support [ Attachments ]',	'AUTHOR_NOTES'				=> 'Author notes<br /> %s',	'AVAILABLE'					=> 'Available',	'AVAILABLE_CONVERTORS'		=> 'Available convertors',	'BEGIN_CONVERT'					=> 'Begin conversion',	'BLANK_PREFIX_FOUND'			=> 'A scan of your tables has shown a valid installation using no table prefix.',	'BOARD_NOT_INSTALLED'			=> 'No installation found',	'BOARD_NOT_INSTALLED_EXPLAIN'	=> 'The phpBB Unified Convertor Framework requires a default installation of phpBB3 to function, please <a href="%s">proceed by first installing phpBB3</a>.',	'CATEGORY'					=> 'Category',	'CACHE_STORE'				=> 'Cache type',	'CACHE_STORE_EXPLAIN'		=> 'The physical location where data is cached, filesystem is preferred.',	'CAT_CONVERT'				=> 'Convert',	'CAT_INSTALL'				=> 'Install',	'CAT_OVERVIEW'				=> 'Overview',	'CAT_UPDATE'				=> 'Update',	'CHANGE'					=> 'Change',	'CHECK_TABLE_PREFIX'		=> 'Please check your table prefix and try again.',	'CLEAN_VERIFY'				=> 'Cleaning up and verifying the final structure',	'CLEANING_USERNAMES'		=> 'Cleaning usernames',	'COLLIDING_CLEAN_USERNAME'	=> '<strong>%s</strong> is the clean username for:',	'COLLIDING_USERNAMES_FOUND'	=> 'Colliding usernames were found on your old board. In order to complete the conversion please delete or rename these users so that there is only one user on your old board for each clean username.',	'COLLIDING_USER'			=> ' user id: <strong>%d</strong> username: <strong>%s</strong> (%d posts)',	'CONFIG_CONVERT'			=> 'Converting the configuration',	'CONFIG_FILE_UNABLE_WRITE'	=> 'It was not possible to write the configuration file. Alternative methods for this file to be created are presented below.',	'CONFIG_FILE_WRITTEN'		=> 'The configuration file has been written. You may now proceed to the next step of the installation.',	'CONFIG_PHPBB_EMPTY'		=> 'The phpBB3 config variable for %s is empty.',	'CONFIG_RETRY'				=> 'Retry',	'CONTACT_EMAIL_CONFIRM'		=> 'Confirm contact e-mail',	'CONTINUE_CONVERT'			=> 'Continue conversion',	'CONTINUE_CONVERT_BODY'		=> 'A previous conversion attempt has been determined. You are now able to choose between starting a new conversion or continuing the conversion.',	'CONTINUE_LAST'				=> 'Continue last statements',	'CONTINUE_OLD_CONVERSION'	=> 'Continue previously started conversion',	'CONVERT'					=> 'Convert',	'CONVERT_COMPLETE'			=> 'Conversion completed',	'CONVERT_COMPLETE_EXPLAIN'	=> 'You have now successfully converted your board to phpBB 3.0. You can now login and <a href="../">access your board</a>. Please ensure that the settings were transferred correctly before enabling your board by deleting the install directory. Remember that help on using phpBB is available online via the <a href="http://www.phpbb.com/support/documentation/3.0/">Documentation</a> and the <a href="http://www.phpbb.com/community/viewforum.php?f=46">support forums</a>.',	'CONVERT_INTRO'				=> 'Welcome to the phpBB Unified Convertor Framework',	'CONVERT_INTRO_BODY'		=> 'From here, you are able to import data from other (installed) board systems. The list below shows all the conversion modules currently available. If there is no convertor shown in this list for the board software you wish to convert from, please check our website where further conversion modules may be available for download.',	'CONVERT_NEW_CONVERSION'	=> 'New conversion',	'CONVERT_NOT_EXIST'			=> 'The specified convertor does not exist.',	'CONVERT_OPTIONS'			=> 'Options',	'CONVERT_SETTINGS_VERIFIED'	=> 'The information you entered has been verified. To start the conversion process, please push the button below.',	'CONV_ERR_FATAL'			=> 'Fatal conversion error',	'CONV_ERROR_ATTACH_FTP_DIR'			=> 'FTP upload for attachments is enabled at the old board. Please disable the FTP upload option and make sure a valid upload directory is specified, then copy all attachment files to this new web accessible directory. Once you have done this, restart the convertor.',	'CONV_ERROR_CONFIG_EMPTY'			=> 'There is no configuration information available for the conversion.',	'CONV_ERROR_FORUM_ACCESS'			=> 'Unable to get forum access information.',	'CONV_ERROR_GET_CATEGORIES'			=> 'Unable to get categories.',	'CONV_ERROR_GET_CONFIG'				=> 'Could not retrieve your board configuration.',	'CONV_ERROR_COULD_NOT_READ'			=> 'Unable to access/read %s.',	'CONV_ERROR_GROUP_ACCESS'			=> 'Unable to get group authentication information.',	'CONV_ERROR_INCONSISTENT_GROUPS'	=> 'Inconsistency in groups table detected in add_bots() - you need to add all special groups if you do it manually.',	'CONV_ERROR_INSERT_BOT'				=> 'Unable to insert bot into users table.',	'CONV_ERROR_INSERT_BOTGROUP'		=> 'Unable to insert bot into bots table.',	'CONV_ERROR_INSERT_USER_GROUP'		=> 'Unable to insert user into user_group table.',	'CONV_ERROR_MESSAGE_PARSER'			=> 'Message parser error',	'CONV_ERROR_NO_AVATAR_PATH'			=> 'Note to developer: you must specify $convertor[\'avatar_path\'] to use %s.',	'CONV_ERROR_NO_FORUM_PATH'			=> 'The relative path to the source board has not been specified.',	'CONV_ERROR_NO_GALLERY_PATH'		=> 'Note to developer: you must specify $convertor[\'avatar_gallery_path\'] to use %s.',	'CONV_ERROR_NO_GROUP'				=> 'Group %1$s could not be found in %2$s.',	'CONV_ERROR_NO_RANKS_PATH'			=> 'Note to developer: you must specify $convertor[\'ranks_path\'] to use %s.',	'CONV_ERROR_NO_SMILIES_PATH'		=> 'Note to developer: you must specify $convertor[\'smilies_path\'] to use %s.',	'CONV_ERROR_NO_UPLOAD_DIR'			=> 'Note to developer: you must specify $convertor[\'upload_path\'] to use %s.',	'CONV_ERROR_PERM_SETTING'			=> 'Unable to insert/update permission setting.',	'CONV_ERROR_PM_COUNT'				=> 'Unable to select folder pm count.',	'CONV_ERROR_REPLACE_CATEGORY'		=> 'Unable to insert new forum replacing old category.',	'CONV_ERROR_REPLACE_FORUM'			=> 'Unable to insert new forum replacing old forum.',	'CONV_ERROR_USER_ACCESS'			=> 'Unable to get user authentication information.',	'CONV_ERROR_WRONG_GROUP'			=> 'Wrong group %1$s defined in %2$s.',	'CONV_OPTIONS_BODY'					=> 'This page collects the data required to access the source board. Enter the database details of your former board; the converter will not change anything in the database given below. The source board should be disabled to allow a consistent conversion.',	'CONV_SAVED_MESSAGES'				=> 'Saved messages',	'COULD_NOT_COPY'			=> 'Could not copy file <strong>%1$s</strong> to <strong>%2$s</strong><br /><br />Please check that the target directory exists and is writable by the webserver.',	'COULD_NOT_FIND_PATH'		=> 'Could not find path to your former board. Please check your settings and try again.<br /> %s was specified as the source path.',	'DBMS'						=> 'Database type',	'DB_CONFIG'					=> 'Database configuration',	'DB_CONNECTION'				=> 'Database connection',	'DB_ERR_INSERT'				=> 'Error while processing <code>INSERT</code> query.',	'DB_ERR_LAST'				=> 'Error while processing <var>query_last</var>.',	'DB_ERR_QUERY_FIRST'		=> 'Error while executing <var>query_first</var>.',	'DB_ERR_QUERY_FIRST_TABLE'	=> 'Error while executing <var>query_first</var>, %s (%s).',	'DB_ERR_SELECT'				=> 'Error while running <code>SELECT</code> query.',	'DB_HOST'					=> 'Database server hostname or DSN',	'DB_HOST_EXPLAIN'			=> 'DSN stands for Data Source Name and is relevant only for ODBC installs. On PostgreSQL, use localhost to connect to the local server via UNIX domain socket and 127.0.0.1 to connect via TCP. For SQLite, enter the full path to your database file.',	'DB_NAME'					=> 'Database name',	'DB_PASSWORD'				=> 'Database password',	'DB_PORT'					=> 'Database server port',	'DB_PORT_EXPLAIN'			=> 'Leave this blank unless you know the server operates on a non-standard port.',	'DB_UPDATE_NOT_SUPPORTED'	=> 'We are sorry, but this script does not support updating from versions of phpBB prior to %1$s. The version you currently have installed is %2$s. Please update to a previous version before running this script. Assistance with this is available in the Support Forum on phpBB.com.',	'DB_USERNAME'				=> 'Database username',	'DB_TEST'					=> 'Test connection',	'DEFAULT_LANG'				=> 'Default board language',	'DEFAULT_PREFIX_IS'			=> 'The convertor was not able to find tables with the specified prefix. Please make sure you have entered the correct details for the board you are converting from. The default table prefix for %1$s is <strong>%2$s</strong>.',	'DEV_NO_TEST_FILE'			=> 'No value has been specified for the test_file variable in the convertor. If you are a user of this convertor, you should not be seeing this error, please report this message to the convertor author. If you are a convertor author, you must specify the name of a file which exists in the source board to allow the path to it to be verified.',	'DIRECTORIES_AND_FILES'		=> 'Directory and file setup',	'DISABLE_KEYS'				=> 'Disabling keys',	'DLL_FIREBIRD'				=> 'Firebird',	'DLL_FTP'					=> 'Remote FTP support [ Installation ]',	'DLL_GD'					=> 'GD graphics support [ Visual Confirmation ]',	'DLL_MBSTRING'				=> 'Multi-byte character support',	'DLL_MSSQL'					=> 'MSSQL Server 2000+',	'DLL_MSSQL_ODBC'			=> 'MSSQL Server 2000+ via ODBC',	'DLL_MSSQLNATIVE'			=> 'MSSQL Server 2005+ [ Native ]',	'DLL_MYSQL'					=> 'MySQL',	'DLL_MYSQLI'				=> 'MySQL with MySQLi Extension',	'DLL_ORACLE'				=> 'Oracle',	'DLL_POSTGRES'				=> 'PostgreSQL',	'DLL_SQLITE'				=> 'SQLite',	'DLL_XML'					=> 'XML support [ Jabber ]',	'DLL_ZLIB'					=> 'zlib compression support [ gz, .tar.gz, .zip ]',	'DL_CONFIG'					=> 'Download config',	'DL_CONFIG_EXPLAIN'			=> 'You may download the complete config.php to your own PC. You will then need to upload the file manually, replacing any existing config.php in your phpBB 3.0 root directory. Please remember to upload the file in ASCII format (see your FTP application documentation if you are unsure how to achieve this). When you have uploaded the config.php please click Done to move to the next stage.',	'DL_DOWNLOAD'				=> 'Download',	'DONE'						=> 'Done',	'ENABLE_KEYS'				=> 'Re-enabling keys. This can take a while.',	'FILES_OPTIONAL'			=> 'Optional files and directories',	'FILES_OPTIONAL_EXPLAIN'	=> '<strong>Optional</strong> - These files, directories or permission settings are not required. The installation system will attempt to use various techniques to create them if they do not exist or cannot be written to. However, the presence of these will speed installation.',	'FILES_REQUIRED'			=> 'Files and Directories',	'FILES_REQUIRED_EXPLAIN'	=> '<strong>Required</strong> - In order to function correctly phpBB needs to be able to access or write to certain files or directories. If you see Not Found you need to create the relevant file or directory. If you see Unwritable you need to change the permissions on the file or directory to allow phpBB to write to it.',	'FILLING_TABLE'				=> 'Filling table <strong>%s</strong>',	'FILLING_TABLES'			=> 'Filling tables',	'FIREBIRD_DBMS_UPDATE_REQUIRED'		=> 'phpBB no longer supports Firebird/Interbase prior to Version 2.1. Please update your Firebird installation to at least 2.1.0 before proceeding with the update.',	'FINAL_STEP'				=> 'Process final step',	'FORUM_ADDRESS'				=> 'Board address',	'FORUM_ADDRESS_EXPLAIN'		=> 'This is the URL of your former board, for example <samp>http://www.example.com/phpBB2/</samp>. If an address is entered here and not left empty every instance of this address will be replaced by your new board address within messages, private messages and signatures.',	'FORUM_PATH'				=> 'Board path',	'FORUM_PATH_EXPLAIN'		=> 'This is the <strong>relative</strong> path on disk to your former board from the <strong>root of this phpBB3 installation</strong>.',	'FOUND'						=> 'Found',	'FTP_CONFIG'				=> 'Transfer config by FTP',	'FTP_CONFIG_EXPLAIN'		=> 'phpBB has detected the presence of the FTP module on this server. You may attempt to install your config.php via this if you wish. You will need to supply the information listed below. Remember your username and password are those to your server! (ask your hosting provider for details if you are unsure what these are).',	'FTP_PATH'					=> 'FTP path',	'FTP_PATH_EXPLAIN'			=> 'This is the path from your root directory to that of phpBB, e.g. <samp>htdocs/phpBB3/</samp>.',	'FTP_UPLOAD'				=> 'Upload',	'GPL'						=> 'General Public License',	'INITIAL_CONFIG'			=> 'Basic configuration',	'INITIAL_CONFIG_EXPLAIN'	=> 'Now that install has determined your server can run phpBB you need to supply some specific information. If you do not know how to connect to your database please contact your hosting provider (in the first instance) or use the phpBB support forums. When entering data please ensure you check it thoroughly before continuing.',	'INSTALL_CONGRATS'			=> 'Congratulations!',	'INSTALL_CONGRATS_EXPLAIN'	=> '		You have successfully installed phpBB %1$s. Please proceed by choosing one of the following options:</p>		<h2>Convert an existing board to phpBB3</h2>		<p>The phpBB Unified Convertor Framework supports the conversion of phpBB 2.0.x and other board systems to phpBB3. If you have an existing board that you wish to convert, please <a href="%2$s">proceed to the convertor</a>.</p>		<h2>Go live with your phpBB3!</h2>		<p>Clicking the button below will take you to a form for submitting statistical data to phpBB in your Administration Control Panel (ACP). We would appreciate it if you could help us by sending that information. Afterwards you should take some time to examine the options available to you. Remember that help is available online via the <a href="http://www.phpbb.com/support/documentation/3.0/">Documentation</a>, <a href="%3$s">README</a> and the <a href="http://www.phpbb.com/community/viewforum.php?f=46">Support Forums</a>.</p><p><strong>Please delete, move or rename the install directory before using your board. While this directory exists, only the Administration Control Panel (ACP) will be accessible.</strong>',	'INSTALL_INTRO'				=> 'Welcome to Installation',	'INSTALL_INTRO_BODY'		=> 'With this option, it is possible to install phpBB3 onto your server.</p><p>In order to proceed, you will need your database settings. If you do not know your database settings, please contact your host and ask for them. You will not be able to continue without them. You need:</p>	<ul>		<li>The Database Type - the database you will be using.</li>		<li>The Database server hostname or DSN - the address of the database server.</li>		<li>The Database server port - the port of the database server (most of the time this is not needed).</li>		<li>The Database name - the name of the database on the server.</li>		<li>The Database username and Database password - the login data to access the database.</li>	</ul>	<p><strong>Note:</strong> if you are installing using SQLite, you should enter the full path to your database file in the DSN field and leave the username and password fields blank. For security reasons, you should make sure that the database file is not stored in a location accessible from the web.</p>	<p>phpBB3 supports the following databases:</p>	<ul>		<li>MySQL 3.23 or above (MySQLi supported)</li>		<li>PostgreSQL 7.3+</li>		<li>SQLite 2.8.2+</li>		<li>Firebird 2.1+</li>		<li>MS SQL Server 2000 or above (directly or via ODBC)</li>		<li>MS SQL Server 2005 or above (native)</li>		<li>Oracle</li>	</ul>	<p>Only those databases supported on your server will be displayed.',	'INSTALL_INTRO_NEXT'		=> 'To commence the installation, please press the button below.',	'INSTALL_LOGIN'				=> 'Login',	'INSTALL_NEXT'				=> 'Next stage',	'INSTALL_NEXT_FAIL'			=> 'Some tests failed and you should correct these problems before proceeding to the next stage. Failure to do so may result in an incomplete installation.',	'INSTALL_NEXT_PASS'			=> 'All the basic tests have been passed and you may proceed to the next stage of installation. If you have changed any permissions, modules, etc. and wish to re-test you can do so if you wish.',	'INSTALL_PANEL'				=> 'Installation Panel',	'INSTALL_SEND_CONFIG'		=> 'Unfortunately phpBB could not write the configuration information directly to your config.php. This may be because the file does not exist or is not writable. A number of options will be listed below enabling you to complete installation of config.php.',	'INSTALL_START'				=> 'Start install',	'INSTALL_TEST'				=> 'Test again',	'INST_ERR'					=> 'Installation error',	'INST_ERR_DB_CONNECT'		=> 'Could not connect to the database, see error message below.',	'INST_ERR_DB_FORUM_PATH'	=> 'The database file specified is within your board directory tree. You should put this file in a non web-accessible location.',	'INST_ERR_DB_INVALID_PREFIX'=> 'The prefix you entered is invalid. It must start with a letter and must only contain letters, numbers and underscores.',	'INST_ERR_DB_NO_ERROR'		=> 'No error message given.',	'INST_ERR_DB_NO_MYSQLI'		=> 'The version of MySQL installed on this machine is incompatible with the MySQL with MySQLi Extension option you have selected. Please try the MySQL option instead.',	'INST_ERR_DB_NO_SQLITE'		=> 'The version of the SQLite extension you have installed is too old, it must be upgraded to at least 2.8.2.',	'INST_ERR_DB_NO_ORACLE'		=> 'The version of Oracle installed on this machine requires you to set the <var>NLS_CHARACTERSET</var> parameter to <var>UTF8</var>. Either upgrade your installation to 9.2+ or change the parameter.',	'INST_ERR_DB_NO_FIREBIRD'	=> 'The version of Firebird installed on this machine is older than 2.1, please upgrade to a newer version.',	'INST_ERR_DB_NO_FIREBIRD_PS'=> 'The database you selected for Firebird has a page size less than 8192, it must be at least 8192.',	'INST_ERR_DB_NO_POSTGRES'	=> 'The database you have selected was not created in <var>UNICODE</var> or <var>UTF8</var> encoding. Try installing with a database in <var>UNICODE</var> or <var>UTF8</var> encoding.',	'INST_ERR_DB_NO_NAME'		=> 'No database name specified.',	'INST_ERR_EMAIL_INVALID'	=> 'The e-mail address you entered is invalid.',	'INST_ERR_EMAIL_MISMATCH'	=> 'The e-mails you entered did not match.',	'INST_ERR_FATAL'			=> 'Fatal installation error',	'INST_ERR_FATAL_DB'			=> 'A fatal and unrecoverable database error has occurred. This may be because the specified user does not have appropriate permissions to <code>CREATE TABLES</code> or <code>INSERT</code> data, etc. Further information may be given below. Please contact your hosting provider in the first instance or the support forums of phpBB for further assistance.',	'INST_ERR_FTP_PATH'			=> 'Could not change to the given directory, please check the path.',	'INST_ERR_FTP_LOGIN'		=> 'Could not login to FTP server, check your username and password.',	'INST_ERR_MISSING_DATA'		=> 'You must fill out all fields in this block.',	'INST_ERR_NO_DB'			=> 'Cannot load the PHP module for the selected database type.',	'INST_ERR_PASSWORD_MISMATCH'	=> 'The passwords you entered did not match.',	'INST_ERR_PASSWORD_TOO_LONG'	=> 'The password you entered is too long. The maximum length is 30 characters.',	'INST_ERR_PASSWORD_TOO_SHORT'	=> 'The password you entered is too short. The minimum length is 6 characters.',	'INST_ERR_PREFIX'			=> 'Tables with the specified prefix already exist, please choose an alternative.',	'INST_ERR_PREFIX_INVALID'	=> 'The table prefix you have specified is invalid for your database. Please try another, removing characters such as the hyphen.',	'INST_ERR_PREFIX_TOO_LONG'	=> 'The table prefix you have specified is too long. The maximum length is %d characters.',	'INST_ERR_USER_TOO_LONG'	=> 'The username you entered is too long. The maximum length is 20 characters.',	'INST_ERR_USER_TOO_SHORT'	=> 'The username you entered is too short. The minimum length is 3 characters.',	'INVALID_PRIMARY_KEY'		=> 'Invalid primary key : %s',	'LONG_SCRIPT_EXECUTION'		=> 'Please note that this can take a while... Please do not stop the script.',	// mbstring	'MBSTRING_CHECK'						=> '<samp>mbstring</samp> extension check',	'MBSTRING_CHECK_EXPLAIN'				=> '<strong>Required</strong> - <samp>mbstring</samp> is a PHP extension that provides multibyte string functions. Certain features of mbstring are not compatible with phpBB and must be disabled.',	'MBSTRING_FUNC_OVERLOAD'				=> 'Function overloading',	'MBSTRING_FUNC_OVERLOAD_EXPLAIN'		=> '<var>mbstring.func_overload</var> must be set to either 0 or 4.',	'MBSTRING_ENCODING_TRANSLATION'			=> 'Transparent character encoding',	'MBSTRING_ENCODING_TRANSLATION_EXPLAIN'	=> '<var>mbstring.encoding_translation</var> must be set to 0.',	'MBSTRING_HTTP_INPUT'					=> 'HTTP input character conversion',	'MBSTRING_HTTP_INPUT_EXPLAIN'			=> '<var>mbstring.http_input</var> must be set to <samp>pass</samp>.',	'MBSTRING_HTTP_OUTPUT'					=> 'HTTP output character conversion',	'MBSTRING_HTTP_OUTPUT_EXPLAIN'			=> '<var>mbstring.http_output</var> must be set to <samp>pass</samp>.',	'MAKE_FOLDER_WRITABLE'		=> 'Please make sure that this folder exists and is writable by the webserver then try again:<br /><strong>%s</strong>.',	'MAKE_FOLDERS_WRITABLE'		=> 'Please make sure that these folders exist and are writable by the webserver then try again:<br /><strong>%s</strong>.',	'MYSQL_SCHEMA_UPDATE_REQUIRED'	=> 'Your MySQL database schema for phpBB is outdated. phpBB detected a schema for MySQL 3.x/4.x, but the server runs on MySQL %2$s.<br /><strong>Before you proceed the update, you need to upgrade the schema.</strong><br /><br />Please refer to the <a href="http://www.phpbb.com/kb/article/doesnt-have-a-default-value-errors/">Knowledge Base article about upgrading the MySQL schema</a>. If you encounter problems, please use <a href="http://www.phpbb.com/community/viewforum.php?f=46">our support forums</a>.',	'NAMING_CONFLICT'			=> 'Naming conflict: %s and %s are both aliases<br /><br />%s',	'NEXT_STEP'					=> 'Proceed to next step',	'NOT_FOUND'					=> 'Cannot find',	'NOT_UNDERSTAND'			=> 'Could not understand %s #%d, table %s (%s)',	'NO_CONVERTORS'				=> 'No convertors are available for use.',	'NO_CONVERT_SPECIFIED'		=> 'No convertor specified.',	'NO_LOCATION'				=> 'Cannot determine location. If you know Imagemagick is installed, you may specify the location later within your administration control panel',	'NO_TABLES_FOUND'			=> 'No tables found.',	'OVERVIEW_BODY'				=> 'Welcome to phpBB3!<br /><br />phpBB is the most widely used open source bulletin board solution in the world. phpBB3 is the latest installment in a package line started in 2000. Like its predecessors, phpBB3 is feature-rich, user-friendly, and fully supported by the phpBB Team. phpBB3 greatly improves on what made phpBB2 popular, and adds commonly requested features that were not present in previous versions. We hope it exceeds your expectations.<br /><br />This installation system will guide you through installing phpBB3, updating to the latest version of phpBB3 from past releases, as well as converting to phpBB3 from a different discussion board system (including phpBB2). For more information, we encourage you to read <a href="../docs/INSTALL.html">the installation guide</a>.<br /><br />To read the phpBB3 license or learn about obtaining support and our stance on it, please select the respective options from the side menu. To continue, please select the appropriate tab above.',	'PCRE_UTF_SUPPORT'				=> 'PCRE UTF-8 support',	'PCRE_UTF_SUPPORT_EXPLAIN'		=> 'phpBB will <strong>not</strong> run if your PHP installation is not compiled with UTF-8 support in the PCRE extension.',	'PHP_GETIMAGESIZE_SUPPORT'			=> 'PHP function getimagesize() is available',	'PHP_GETIMAGESIZE_SUPPORT_EXPLAIN'	=> '<strong>Required</strong> - In order for phpBB to function correctly, the getimagesize function needs to be available.',	'PHP_OPTIONAL_MODULE'			=> 'Optional modules',	'PHP_OPTIONAL_MODULE_EXPLAIN'	=> '<strong>Optional</strong> - These modules or applications are optional. However, if they are available they will enable extra features.',	'PHP_SUPPORTED_DB'				=> 'Supported databases',	'PHP_SUPPORTED_DB_EXPLAIN'		=> '<strong>Required</strong> - You must have support for at least one compatible database within PHP. If no database modules are shown as available you should contact your hosting provider or review the relevant PHP installation documentation for advice.',	'PHP_REGISTER_GLOBALS'			=> 'PHP setting <var>register_globals</var> is disabled',	'PHP_REGISTER_GLOBALS_EXPLAIN'	=> 'phpBB will still run if this setting is enabled, but if possible, it is recommended that register_globals is disabled on your PHP install for security reasons.',	'PHP_SAFE_MODE'					=> 'Safe mode',	'PHP_SETTINGS'					=> 'PHP version and settings',	'PHP_SETTINGS_EXPLAIN'			=> '<strong>Required</strong> - You must be running at least version 4.3.3 of PHP in order to install phpBB. If <var>safe mode</var> is displayed below your PHP installation is running in that mode. This will impose limitations on remote administration and similar features.',	'PHP_URL_FOPEN_SUPPORT'			=> 'PHP setting <var>allow_url_fopen</var> is enabled',	'PHP_URL_FOPEN_SUPPORT_EXPLAIN'	=> '<strong>Optional</strong> - This setting is optional, however certain phpBB functions like off-site avatars will not work properly without it.',	'PHP_VERSION_REQD'				=> 'PHP version >= 4.3.3',	'POST_ID'						=> 'Post ID',	'PREFIX_FOUND'					=> 'A scan of your tables has shown a valid installation using <strong>%s</strong> as table prefix.',	'PREPROCESS_STEP'				=> 'Executing pre-processing functions/queries',	'PRE_CONVERT_COMPLETE'			=> 'All pre-conversion steps have successfully been completed. You may now begin the actual conversion process. Please note that you may have to manually do and adjust several things. After conversion, especially check the permissions assigned, rebuild your search index which is not converted and also make sure files got copied correctly, for example avatars and smilies.',	'PROCESS_LAST'					=> 'Processing last statements',	'REFRESH_PAGE'				=> 'Refresh page to continue conversion',	'REFRESH_PAGE_EXPLAIN'		=> 'If set to yes, the convertor will refresh the page to continue the conversion after having finished a step. If this is your first conversion for testing purposes and to determine any errors in advance, we suggest to set this to No.',	'REQUIREMENTS_TITLE'		=> 'Installation compatibility',	'REQUIREMENTS_EXPLAIN'		=> 'Before proceeding with the full installation phpBB will carry out some tests on your server configuration and files to ensure that you are able to install and run phpBB. Please ensure you read through the results thoroughly and do not proceed until all the required tests are passed. If you wish to use any of the features depending on the optional tests, you should ensure that these tests are passed also.',	'RETRY_WRITE'				=> 'Retry writing config',	'RETRY_WRITE_EXPLAIN'		=> 'If you wish you can change the permissions on config.php to allow phpBB to write to it. Should you wish to do that you can click Retry below to try again. Remember to return the permissions on config.php after phpBB has finished installation.',	'SCRIPT_PATH'				=> 'Script path',	'SCRIPT_PATH_EXPLAIN'		=> 'The path where phpBB is located relative to the domain name, e.g. <samp>/phpBB3</samp>.',	'SELECT_LANG'				=> 'Select language',	'SERVER_CONFIG'				=> 'Server configuration',	'SEARCH_INDEX_UNCONVERTED'	=> 'Search index was not converted',	'SEARCH_INDEX_UNCONVERTED_EXPLAIN'	=> 'Your old search index was not converted. Searching will always yield an empty result. To create a new search index go to the Administration Control Panel, select Maintenance and then choose Search index from the submenu.',	'SOFTWARE'					=> 'Board software',	'SPECIFY_OPTIONS'			=> 'Specify conversion options',	'STAGE_ADMINISTRATOR'		=> 'Administrator details',	'STAGE_ADVANCED'			=> 'Advanced settings',	'STAGE_ADVANCED_EXPLAIN'	=> 'The settings on this page are only necessary to set if you know that you require something different from the default. If you are unsure, just proceed to the next page, as these settings can be altered from the Administration Control Panel later.',	'STAGE_CONFIG_FILE'			=> 'Configuration file',	'STAGE_CREATE_TABLE'		=> 'Create database tables',	'STAGE_CREATE_TABLE_EXPLAIN'	=> 'The database tables used by phpBB 3.0 have been created and populated with some initial data. Proceed to the next screen to finish installing phpBB.',	'STAGE_DATABASE'			=> 'Database settings',	'STAGE_FINAL'				=> 'Final stage',	'STAGE_INTRO'				=> 'Introduction',	'STAGE_IN_PROGRESS'			=> 'Conversion in progress',	'STAGE_REQUIREMENTS'		=> 'Requirements',	'STAGE_SETTINGS'			=> 'Settings',	'STARTING_CONVERT'			=> 'Starting conversion process',	'STEP_PERCENT_COMPLETED'	=> 'Step <strong>%d</strong> of <strong>%d</strong>',	'SUB_INTRO'					=> 'Introduction',	'SUB_LICENSE'				=> 'License',	'SUB_SUPPORT'				=> 'Support',	'SUCCESSFUL_CONNECT'		=> 'Successful connection',	'SUPPORT_BODY'				=> 'Full support will be provided for the current stable release of phpBB3, free of charge. This includes:</p><ul><li>installation</li><li>configuration</li><li>technical questions</li><li>problems relating to potential bugs in the software</li><li>updating from Release Candidate (RC) versions to the latest stable version</li><li>converting from phpBB 2.0.x to phpBB3</li><li>converting from other discussion board software to phpBB3 (please see the <a href="http://www.phpbb.com/community/viewforum.php?f=65">Convertors Forum</a>)</li></ul><p>We encourage users still running beta versions of phpBB3 to replace their installation with a fresh copy of the latest version.</p><h2>MODs / Styles</h2><p>For issues relating to MODs, please post in the appropriate <a href="http://www.phpbb.com/community/viewforum.php?f=81">Modifications Forum</a>.<br />For issues relating to styles, templates and imagesets, please post in the appropriate <a href="http://www.phpbb.com/community/viewforum.php?f=80">Styles Forum</a>.<br /><br />If your question relates to a specific package, please post directly in the topic dedicated to the package.</p><h2>Obtaining Support</h2><p><a href="http://www.phpbb.com/community/viewtopic.php?f=14&amp;t=571070">The phpBB Welcome Package</a><br /><a href="http://www.phpbb.com/support/">Support Section</a><br /><a href="http://www.phpbb.com/support/documentation/3.0/quickstart/">Quick Start Guide</a><br /><br />To ensure you stay up to date with the latest news and releases, why not <a href="http://www.phpbb.com/support/">subscribe to our mailing list</a>?<br /><br />',	'SYNC_FORUMS'				=> 'Starting to synchronise forums',	'SYNC_POST_COUNT'			=> 'Synchronising post_counts',	'SYNC_POST_COUNT_ID'		=> 'Synchronising post_counts from <var>entry</var> %1$s to %2$s.',	'SYNC_TOPICS'				=> 'Starting to synchronise topics',	'SYNC_TOPIC_ID'				=> 'Synchronising topics from <var>topic_id</var> %1$s to %2$s.',	'TABLES_MISSING'			=> 'Could not find these tables<br /> <strong>%s</strong>.',	'TABLE_PREFIX'				=> 'Prefix for tables in database',	'TABLE_PREFIX_EXPLAIN'		=> 'The prefix must start with a letter and must only contain letters, numbers and underscores.',	'TABLE_PREFIX_SAME'			=> 'The table prefix needs to be the one used by the software you are converting from.<br /> Specified table prefix was %s.',	'TESTS_PASSED'				=> 'Tests passed',	'TESTS_FAILED'				=> 'Tests failed',	'UNABLE_WRITE_LOCK'			=> 'Unable to write lock file.',	'UNAVAILABLE'				=> 'Unavailable',	'UNWRITABLE'				=> 'Unwritable',	'UPDATE_TOPICS_POSTED'		=> 'Generating topics posted information',	'UPDATE_TOPICS_POSTED_ERR'	=> 'An error occured while generating topics posted information. You can retry this step in the ACP after the conversion process is completed.',	'VERIFY_OPTIONS'			=> 'Verifying conversion options',	'VERSION'					=> 'Version',	'WELCOME_INSTALL'			=> 'Welcome to phpBB3 Installation',	'WRITABLE'					=> 'Writable',));// Updater$lang = array_merge($lang, array(	'ALL_FILES_UP_TO_DATE'		=> 'All files are up to date with the latest phpBB version. You should now <a href="../ucp.php?mode=login">login to your board</a> and check if everything is working fine. Do not forget to delete, rename or move your install directory! Please send us updated information about your server and board configurations from the <a href="../ucp.php?mode=login&amp;redirect=adm/index.php%3Fi=send_statistics%26mode=send_statistics">Send statistics</a> module in your ACP.',	'ARCHIVE_FILE'				=> 'Source file within archive',	'BACK'				=> 'Back',	'BINARY_FILE'		=> 'Binary file',	'BOT'				=> 'Spider/Robot',	'CHANGE_CLEAN_NAMES'			=> 'The method used to make sure a username is not used by multiple users has been changed. There are some users which have the same name when compared with the new method. You have to delete or rename these users to make sure that each name is only used by one user before you can proceed.',	'CHECK_FILES'					=> 'Check files',	'CHECK_FILES_AGAIN'				=> 'Check files again',	'CHECK_FILES_EXPLAIN'			=> 'Within the next step all files will be checked against the update files - this can take a while if this is the first file check.',	'CHECK_FILES_UP_TO_DATE'		=> 'According to your database your version is up to date. You may want to proceed with the file check to make sure all files are really up to date with the latest phpBB version.',	'CHECK_UPDATE_DATABASE'			=> 'Continue update process',	'COLLECTED_INFORMATION'			=> 'File information',	'COLLECTED_INFORMATION_EXPLAIN'	=> 'The list below shows information about the files needing an update. Please read the information in front of every status block to see what they mean and what you may need to do to perform a successful update.',	'COLLECTING_FILE_DIFFS'			=> 'Collecting file differences',	'COMPLETE_LOGIN_TO_BOARD'		=> 'You should now <a href="../ucp.php?mode=login">login to your board</a> and check if everything is working fine. Do not forget to delete, rename or move your install directory!',	'CONTINUE_UPDATE_NOW'			=> 'Continue the update process now',		// Shown within the database update script at the end if called from the updater	'CONTINUE_UPDATE'				=> 'Continue update now',					// Shown after file upload to indicate the update process is not yet finished	'CURRENT_FILE'					=> 'Begin of Conflict - Original File code before update',	'CURRENT_VERSION'				=> 'Current version',	'DATABASE_TYPE'						=> 'Database type',	'DATABASE_UPDATE_INFO_OLD'			=> 'The database update file within the install directory is outdated. Please make sure you uploaded the correct version of the file.',	'DELETE_USER_REMOVE'				=> 'Delete user and remove posts',	'DELETE_USER_RETAIN'				=> 'Delete user but keep posts',	'DESTINATION'						=> 'Destination file',	'DIFF_INLINE'						=> 'Inline',	'DIFF_RAW'							=> 'Raw unified diff',	'DIFF_SEP_EXPLAIN'					=> 'Code block used within the updated/new file',	'DIFF_SIDE_BY_SIDE'					=> 'Side by Side',	'DIFF_UNIFIED'						=> 'Unified diff',	'DO_NOT_UPDATE'						=> 'Do not update this file',	'DONE'								=> 'Done',	'DOWNLOAD'							=> 'Download',	'DOWNLOAD_AS'						=> 'Download as',	'DOWNLOAD_UPDATE_METHOD_BUTTON'		=> 'Download modified files archive (recommended)',	'DOWNLOAD_CONFLICTS'				=> 'Download conflicts for this file',	'DOWNLOAD_CONFLICTS_EXPLAIN'		=> 'Search for &lt;&lt;&lt; to spot conflicts',	'DOWNLOAD_UPDATE_METHOD'			=> 'Download modified files archive',	'DOWNLOAD_UPDATE_METHOD_EXPLAIN'	=> 'Once downloaded you should unpack the archive. You will find the modified files you need to upload to your phpBB root directory within it. Please upload the files to their respective locations then. After you have uploaded all files, please check the files again with the other button below.',	'ERROR'			=> 'Error',	'EDIT_USERNAME'	=> 'Edit username',	'FILE_ALREADY_UP_TO_DATE'		=> 'File is already up to date.',	'FILE_DIFF_NOT_ALLOWED'			=> 'File not allowed to be diffed.',	'FILE_USED'						=> 'Information used from',			// Single file	'FILES_CONFLICT'				=> 'Conflict files',	'FILES_CONFLICT_EXPLAIN'		=> 'The following files are modified and do not represent the original files from the old version. phpBB determined that these files create conflicts if they are tried to be merged. Please investigate the conflicts and try to manually resolve them or continue the update choosing the preferred merging method. If you resolve the conflicts manually check the files again after you modified them. You are also able to choose between the preferred merge method for every file. The first one will result in a file where the conflicting lines from your old file will be lost, the other one will result in losing the changes from the newer file.',	'FILES_MODIFIED'				=> 'Modified files',	'FILES_MODIFIED_EXPLAIN'		=> 'The following files are modified and do not represent the original files from the old version. The updated file will be a merge between your modifications and the new file.',	'FILES_NEW'						=> 'New files',	'FILES_NEW_EXPLAIN'				=> 'The following files currently do not exist within your installation. These files will be added to your installation.',	'FILES_NEW_CONFLICT'			=> 'New conflicting files',	'FILES_NEW_CONFLICT_EXPLAIN'	=> 'The following files are new within the latest version but it has been determined that there is already a file with the same name within the same position. This file will be overwritten by the new file.',	'FILES_NOT_MODIFIED'			=> 'Not modified files',	'FILES_NOT_MODIFIED_EXPLAIN'	=> 'The following files are not modified and represent the original phpBB files from the version you want to update from.',	'FILES_UP_TO_DATE'				=> 'Already updated files',	'FILES_UP_TO_DATE_EXPLAIN'		=> 'The following files are already up to date and do not need to be updated.',	'FTP_SETTINGS'					=> 'FTP settings',	'FTP_UPDATE_METHOD'				=> 'FTP upload',	'INCOMPATIBLE_UPDATE_FILES'		=> 'The update files found are incompatible with your installed version. Your installed version is %1$s and the update file is for updating phpBB %2$s to %3$s.',	'INCOMPLETE_UPDATE_FILES'		=> 'The update files are incomplete.',	'INLINE_UPDATE_SUCCESSFUL'		=> 'The database update was successful. Now you need to continue the update process.',	'KEEP_OLD_NAME'		=> 'Keep username',	'LATEST_VERSION'		=> 'Latest version',	'LINE'					=> 'Line',	'LINE_ADDED'			=> 'Added',	'LINE_MODIFIED'			=> 'Modified',	'LINE_REMOVED'			=> 'Removed',	'LINE_UNMODIFIED'		=> 'Unmodified',	'LOGIN_UPDATE_EXPLAIN'	=> 'In order to update your installation you need to login first.',	'MAPPING_FILE_STRUCTURE'	=> 'To ease the upload here are the file locations which map your phpBB installation.',	'MERGE_MODIFICATIONS_OPTION'	=> 'Merge modifications',	'MERGE_NO_MERGE_NEW_OPTION'	=> 'Do not merge - use new file',	'MERGE_NO_MERGE_MOD_OPTION'	=> 'Do not merge - use currently installed file',	'MERGE_MOD_FILE_OPTION'		=> 'Merge modifications (removes new phpBB code within conflicting block)',	'MERGE_NEW_FILE_OPTION'		=> 'Merge modifications (removes modified code within conflicting block)',	'MERGE_SELECT_ERROR'		=> 'Conflicting file merge modes are not correctly selected.',	'MERGING_FILES'				=> 'Merging differences',	'MERGING_FILES_EXPLAIN'		=> 'Currently collecting final file changes.<br /><br />Please wait until phpBB has completed all operations on changed files.',	'NEW_FILE'						=> 'End of Conflict',	'NEW_USERNAME'					=> 'New username',	'NO_AUTH_UPDATE'				=> 'Not authorised to update',	'NO_ERRORS'						=> 'No errors',	'NO_UPDATE_FILES'				=> 'Not updating the following files',	'NO_UPDATE_FILES_EXPLAIN'		=> 'The following files are new or modified but the directory they normally reside in could not be found on your installation. If this list contains files to other directories than language/ or styles/ than you may have modified your directory structure and the update may be incomplete.',	'NO_UPDATE_FILES_OUTDATED'		=> 'No valid update directory was found, please make sure you uploaded the relevant files.<br /><br />Your installation does <strong>not</strong> seem to be up to date. Updates are available for your version of phpBB %1$s, please visit <a href="http://www.phpbb.com/downloads/" rel="external">http://www.phpbb.com/downloads/</a> to obtain the correct package to update from Version %2$s to Version %3$s.',	'NO_UPDATE_FILES_UP_TO_DATE'	=> 'Your version is up to date. There is no need to run the update tool. If you want to make an integrity check on your files make sure you uploaded the correct update files.',	'NO_UPDATE_INFO'				=> 'Update file information could not be found.',	'NO_UPDATES_REQUIRED'			=> 'No updates required',	'NO_VISIBLE_CHANGES'			=> 'No visible changes',	'NOTICE'						=> 'Notice',	'NUM_CONFLICTS'					=> 'Number of conflicts',	'NUMBER_OF_FILES_COLLECTED'		=> 'Currently differences from %1$d of %2$d files have been checked.<br />Please wait until all files are checked.',	'OLD_UPDATE_FILES'		=> 'Update files are out of date. The update files found are for updating from phpBB %1$s to phpBB %2$s but the latest version of phpBB is %3$s.',	'PACKAGE_UPDATES_TO'				=> 'Current package updates to version',	'PERFORM_DATABASE_UPDATE'			=> 'Perform database update',	'PERFORM_DATABASE_UPDATE_EXPLAIN'	=> 'Below you will find a button to the database update script. The database update can take a while, so please do not stop the execution if it seems to hang. After the database update has been performed just follow the instructions to continue the update process.',	'PREVIOUS_VERSION'					=> 'Previous version',	'PROGRESS'							=> 'Progress',	'RESULT'					=> 'Result',	'RUN_DATABASE_SCRIPT'		=> 'Update my database now',	'SELECT_DIFF_MODE'			=> 'Select diff mode',	'SELECT_DOWNLOAD_FORMAT'	=> 'Select download archive format',	'SELECT_FTP_SETTINGS'		=> 'Select FTP settings',	'SHOW_DIFF_CONFLICT'		=> 'Show differences/conflicts',	'SHOW_DIFF_FINAL'			=> 'Show resulting file',	'SHOW_DIFF_MODIFIED'		=> 'Show merged differences',	'SHOW_DIFF_NEW'				=> 'Show file contents',	'SHOW_DIFF_NEW_CONFLICT'	=> 'Show differences',	'SHOW_DIFF_NOT_MODIFIED'	=> 'Show differences',	'SOME_QUERIES_FAILED'		=> 'Some queries failed, the statements and errors are listed below.',	'SQL'						=> 'SQL',	'SQL_FAILURE_EXPLAIN'		=> 'This is probably nothing to worry about, update will continue. Should this fail to complete you may need to seek help at our support forums. See <a href="../docs/README.html">README</a> for details on how to obtain advice.',	'STAGE_FILE_CHECK'			=> 'Check files',	'STAGE_UPDATE_DB'			=> 'Update database',	'STAGE_UPDATE_FILES'		=> 'Update files',	'STAGE_VERSION_CHECK'		=> 'Version check',	'STATUS_CONFLICT'			=> 'Modified file producing conflicts',	'STATUS_MODIFIED'			=> 'Modified file',	'STATUS_NEW'				=> 'New file',	'STATUS_NEW_CONFLICT'		=> 'Conflicting new file',	'STATUS_NOT_MODIFIED'		=> 'Not modified file',	'STATUS_UP_TO_DATE'			=> 'Already updated file',	'TOGGLE_DISPLAY'			=> 'View/Hide file list',	'TRY_DOWNLOAD_METHOD'		=> 'You may want to try the download modified files method.<br />This method always works and is also the recommended update path.',	'TRY_DOWNLOAD_METHOD_BUTTON'=> 'Try this method now',	'UPDATE_COMPLETED'				=> 'Update completed',	'UPDATE_DATABASE'				=> 'Update database',	'UPDATE_DATABASE_EXPLAIN'		=> 'Within the next step the database will be updated.',	'UPDATE_DATABASE_SCHEMA'		=> 'Updating database schema',	'UPDATE_FILES'					=> 'Update files',	'UPDATE_FILES_NOTICE'			=> 'Please make sure you have updated your board files too, this file is only updating your database.',	'UPDATE_INSTALLATION'			=> 'Update phpBB installation',	'UPDATE_INSTALLATION_EXPLAIN'	=> 'With this option, it is possible to update your phpBB installation to the latest version.<br />During the process all of your files will be checked for their integrity. You are able to review all differences and files before the update.<br /><br />The file update itself can be done in two different ways.</p><h2>Manual Update</h2><p>With this update you only download your personal set of changed files to make sure you do not lose your file modifications you may have done. After you downloaded this package you need to manually upload the files to their correct position under your phpBB root directory. Once done, you are able to do the file check stage again to see if you moved the files to their correct location.</p><h2>Automatic Update with FTP</h2><p>This method is similar to the first one but without the need to download the changed files and uploading them on your own. This will be done for you. In order to use this method you need to know your FTP login details since you will be asked for them. Once finished you will be redirected to the file check again to make sure everything got updated correctly.<br /><br />',	'UPDATE_INSTRUCTIONS'			=> '		<h1>Release announcement</h1>		<p>Please read <a href="%1$s" title="%1$s"><strong>the release announcement for the latest version</strong></a> before you continue your update process, it may contain useful information. It also contains full download links as well as the change log.</p>		<br />		<h1>How to update your installation with the Automatic Update Package</h1>		<p>The recommended way of updating your installation listed here is only valid for the automatic update package. You are also able to update your installation using the methods listed within the INSTALL.html document. The steps for updating phpBB3 automatically are:</p>		<ul style="margin-left: 20px; font-size: 1.1em;">			<li>Go to the <a href="http://www.phpbb.com/downloads/" title="http://www.phpbb.com/downloads/">phpBB.com downloads page</a> and download the "Automatic Update Package" archive.<br /><br /></li>			<li>Unpack the archive.<br /><br /></li>			<li>Upload the complete uncompressed install folder to your phpBB root directory (where your config.php file is).<br /><br /></li>		</ul>		<p>Once uploaded your board will be offline for normal users due to the install directory you uploaded now present.<br /><br />		<strong><a href="%2$s" title="%2$s">Now start the update process by pointing your browser to the install folder</a>.</strong><br />		<br />		You will then be guided through the update process. You will be notified once the update is complete.		</p>	',	'UPDATE_INSTRUCTIONS_INCOMPLETE'	=> '		<h1>Incomplete update detected</h1>		<p>phpBB detected an incomplete automatic update. Please make sure you followed every step within the automatic update tool. Below you will find the link again, or go directly to your install directory.</p>	',	'UPDATE_METHOD'					=> 'Update method',	'UPDATE_METHOD_EXPLAIN'			=> 'You are now able to choose your preferred update method. Using the FTP upload will present you with a form you need to enter your FTP account details into. With this method the files will be automatically moved to the new location and backups of the old files being created by appending .bak to the filename. If you choose to download the modified files you are able to unpack and upload them to their correct location manually later.',	'UPDATE_REQUIRES_FILE'			=> 'The updater requires that the following file is present: %s',	'UPDATE_SUCCESS'				=> 'Update was successful',	'UPDATE_SUCCESS_EXPLAIN'		=> 'Successfully updated all files. The next step involves checking all files again to make sure the files got updated correctly.',	'UPDATE_VERSION_OPTIMIZE'		=> 'Updating version and optimising tables',	'UPDATING_DATA'					=> 'Updating data',	'UPDATING_TO_LATEST_STABLE'		=> 'Updating database to latest stable release',	'UPDATED_VERSION'				=> 'Updated version',	'UPGRADE_INSTRUCTIONS'			=> 'A new feature release <strong>%1$s</strong> is available. Please read <a href="%2$s" title="%2$s"><strong>the release announcement</strong></a> to learn about what it has to offer, and how to upgrade.',	'UPLOAD_METHOD'					=> 'Upload method',	'UPDATE_DB_SUCCESS'				=> 'Database update was successful.',	'USER_ACTIVE'					=> 'Active user',	'USER_INACTIVE'					=> 'Inactive user',	'VERSION_CHECK'					=> 'Version check',	'VERSION_CHECK_EXPLAIN'			=> 'Checks to see if your phpBB installation is up to date.',	'VERSION_NOT_UP_TO_DATE'		=> 'Your phpBB installation is not up to date. Please continue the update process.',	'VERSION_NOT_UP_TO_DATE_ACP'	=> 'Your phpBB installation is not up to date.<br />Below is a link to the release announcement, which contains more information as well as instructions on updating.',	'VERSION_NOT_UP_TO_DATE_TITLE'	=> 'Your phpBB installation is not up to date.',	'VERSION_UP_TO_DATE'			=> 'Your phpBB installation is up to date. Although there are no updates available at this time, you may continue in order to perform a file validity check.',	'VERSION_UP_TO_DATE_ACP'		=> 'Your phpBB installation is up to date. There are no updates available at this time.',	'VIEWING_FILE_CONTENTS'			=> 'Viewing file contents',	'VIEWING_FILE_DIFF'				=> 'Viewing file differences',	'WRONG_INFO_FILE_FORMAT'	=> 'Wrong info file format',));// Default database schema entries...$lang = array_merge($lang, array(	'CONFIG_BOARD_EMAIL_SIG'		=> 'Thanks, The Management',	'CONFIG_SITE_DESC'				=> 'A short text to describe your forum',	'CONFIG_SITENAME'				=> 'yourdomain.com',	'DEFAULT_INSTALL_POST'			=> 'This is an example post in your phpBB3 installation. Everything seems to be working. You may delete this post if you like and continue to set up your board. During the installation process your first category and your first forum are assigned an appropriate set of permissions for the predefined usergroups administrators, bots, global moderators, guests, registered users and registered COPPA users. If you also choose to delete your first category and your first forum, do not forget to assign permissions for all these usergroups for all new categories and forums you create. It is recommended to rename your first category and your first forum and copy permissions from these while creating new categories and forums. Have fun!',	'FORUMS_FIRST_CATEGORY'			=> 'Your first category',	'FORUMS_TEST_FORUM_DESC'		=> 'Description of your first forum.',	'FORUMS_TEST_FORUM_TITLE'		=> 'Your first forum',	'RANKS_SITE_ADMIN_TITLE'		=> 'Site Admin',	'REPORT_WAREZ'					=> 'The post contains links to illegal or pirated software.',	'REPORT_SPAM'					=> 'The reported post has the only purpose to advertise for a website or another product.',	'REPORT_OFF_TOPIC'				=> 'The reported post is off topic.',	'REPORT_OTHER'					=> 'The reported post does not fit into any other category, please use the further information field.',	'SMILIES_ARROW'					=> 'Arrow',	'SMILIES_CONFUSED'				=> 'Confused',	'SMILIES_COOL'					=> 'Cool',	'SMILIES_CRYING'				=> 'Crying or Very Sad',	'SMILIES_EMARRASSED'			=> 'Embarrassed',	'SMILIES_EVIL'					=> 'Evil or Very Mad',	'SMILIES_EXCLAMATION'			=> 'Exclamation',	'SMILIES_GEEK'					=> 'Geek',	'SMILIES_IDEA'					=> 'Idea',	'SMILIES_LAUGHING'				=> 'Laughing',	'SMILIES_MAD'					=> 'Mad',	'SMILIES_MR_GREEN'				=> 'Mr. Green',	'SMILIES_NEUTRAL'				=> 'Neutral',	'SMILIES_QUESTION'				=> 'Question',	'SMILIES_RAZZ'					=> 'Razz',	'SMILIES_ROLLING_EYES'			=> 'Rolling Eyes',	'SMILIES_SAD'					=> 'Sad',	'SMILIES_SHOCKED'				=> 'Shocked',	'SMILIES_SMILE'					=> 'Smile',	'SMILIES_SURPRISED'				=> 'Surprised',	'SMILIES_TWISTED_EVIL'			=> 'Twisted Evil',	'SMILIES_UBER_GEEK'				=> 'Uber Geek',	'SMILIES_VERY_HAPPY'			=> 'Very Happy',	'SMILIES_WINK'					=> 'Wink',	'TOPICS_TOPIC_TITLE'			=> 'Welcome to phpBB3',));?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2006, 2008 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** This class holds the code shared by the two default 3.0.x CAPTCHAs.** @package VC*/class phpbb_default_captcha{	var $confirm_id;	var $confirm_code;	var $code;	var $seed;	var $attempts = 0;	var $type;	var $solved = 0;	var $captcha_vars = false;	function init($type)	{		global $config, $db, $user;		// read input		$this->confirm_id = request_var('confirm_id', '');		$this->confirm_code = request_var('confirm_code', '');		$refresh = request_var('refresh_vc', false) && $config['confirm_refresh'];		$this->type = (int) $type;		if (!strlen($this->confirm_id) || !$this->load_code())		{			// we have no confirm ID, better get ready to display something			$this->generate_code();		}		else if ($refresh)		{			$this->regenerate_code();		}	}	function execute_demo()	{		global $user;		$this->code = gen_rand_string_friendly(mt_rand(CAPTCHA_MIN_CHARS, CAPTCHA_MAX_CHARS));		$this->seed = hexdec(substr(unique_id(), 4, 10));		// compute $seed % 0x7fffffff		$this->seed -= 0x7fffffff * floor($this->seed / 0x7fffffff);		$captcha = new captcha();		define('IMAGE_OUTPUT', 1);		$captcha->execute($this->code, $this->seed);	}	function execute()	{		if (empty($this->code))		{			if (!$this->load_code())			{				// invalid request, bail out				return false;			}		}		$captcha = new captcha();		define('IMAGE_OUTPUT', 1);		$captcha->execute($this->code, $this->seed);	}	function get_template()	{		global $config, $user, $template, $phpEx, $phpbb_root_path;		if ($this->is_solved())		{			return false;		}		else		{			$link = append_sid($phpbb_root_path . 'ucp.' . $phpEx,  'mode=confirm&amp;confirm_id=' . $this->confirm_id . '&amp;type=' . $this->type);			$explain = $user->lang(($this->type != CONFIRM_POST) ? 'CONFIRM_EXPLAIN' : 'POST_CONFIRM_EXPLAIN', '<a href="mailto:' . htmlspecialchars($config['board_contact']) . '">', '</a>');			$template->assign_vars(array(				'CONFIRM_IMAGE_LINK'		=> $link,				'CONFIRM_IMAGE'				=> '<img src="' . $link . '" />',				'CONFIRM_IMG'				=> '<img src="' . $link . '" />',				'CONFIRM_ID'				=> $this->confirm_id,				'S_CONFIRM_CODE'			=> true,				'S_TYPE'					=> $this->type,				'S_CONFIRM_REFRESH'			=> ($config['enable_confirm'] && $config['confirm_refresh'] && $this->type == CONFIRM_REG) ? true : false,				'L_CONFIRM_EXPLAIN'			=> $explain,			));			return 'captcha_default.html';		}	}	function get_demo_template($id)	{		global $config, $user, $template, $phpbb_admin_path, $phpEx;		$variables = '';		if (is_array($this->captcha_vars))		{			foreach ($this->captcha_vars as $captcha_var => $template_var)			{				$variables .= '&amp;' . rawurlencode($captcha_var) . '=' . request_var($captcha_var, (int) $config[$captcha_var]);			}		}		// acp_captcha has a delivery function; let's use it		$template->assign_vars(array(			'CONFIRM_IMAGE'		=> append_sid($phpbb_admin_path . 'index.' . $phpEx, 'captcha_demo=1&amp;mode=visual&amp;i=' . $id . '&amp;select_captcha=' . $this->get_class_name()) . $variables,			'CONFIRM_ID'		=> $this->confirm_id,		));		return 'captcha_default_acp_demo.html';	}	function get_hidden_fields()	{		$hidden_fields = array();		// this is required for posting.php - otherwise we would forget about the captcha being already solved		if ($this->solved)		{			$hidden_fields['confirm_code'] = $this->confirm_code;		}		$hidden_fields['confirm_id'] = $this->confirm_id;		return $hidden_fields;	}	function garbage_collect($type)	{		global $db, $config;		$sql = 'SELECT DISTINCT c.session_id			FROM ' . CONFIRM_TABLE . ' c			LEFT JOIN ' . SESSIONS_TABLE . ' s ON (c.session_id = s.session_id)			WHERE s.session_id IS NULL' .				((empty($type)) ? '' : ' AND c.confirm_type = ' . (int) $type);		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			$sql_in = array();			do			{				$sql_in[] = (string) $row['session_id'];			}			while ($row = $db->sql_fetchrow($result));			if (sizeof($sql_in))			{				$sql = 'DELETE FROM ' . CONFIRM_TABLE . '					WHERE ' . $db->sql_in_set('session_id', $sql_in);				$db->sql_query($sql);			}		}		$db->sql_freeresult($result);	}	function uninstall()	{		$this->garbage_collect(0);	}	function install()	{		return;	}	function validate()	{		global $config, $db, $user;		if (empty($user->lang))		{			$user->setup();		}		$error = '';		if (!$this->confirm_id)		{			$error = $user->lang['CONFIRM_CODE_WRONG'];		}		else		{			if ($this->check_code())			{				// $this->delete_code(); commented out to allow posting.php to repeat the question				$this->solved = true;			}			else			{				$error = $user->lang['CONFIRM_CODE_WRONG'];			}		}		if (strlen($error))		{			// okay, incorrect answer. Let's ask a new question.			$this->new_attempt();			return $error;		}		else		{			return false;		}	}	/**	* The old way to generate code, suitable for GD and non-GD. Resets the internal state.	*/	function generate_code()	{		global $db, $user;		$this->code = gen_rand_string_friendly(mt_rand(CAPTCHA_MIN_CHARS, CAPTCHA_MAX_CHARS));		$this->confirm_id = md5(unique_id($user->ip));		$this->seed = hexdec(substr(unique_id(), 4, 10));		$this->solved = 0;		// compute $seed % 0x7fffffff		$this->seed -= 0x7fffffff * floor($this->seed / 0x7fffffff);		$sql = 'INSERT INTO ' . CONFIRM_TABLE . ' ' . $db->sql_build_array('INSERT', array(				'confirm_id'	=> (string) $this->confirm_id,				'session_id'	=> (string) $user->session_id,				'confirm_type'	=> (int) $this->type,				'code'			=> (string) $this->code,				'seed'			=> (int) $this->seed)		);		$db->sql_query($sql);	}	/**	* New Question, if desired.	*/	function regenerate_code()	{		global $db, $user;		$this->code = gen_rand_string_friendly(mt_rand(CAPTCHA_MIN_CHARS, CAPTCHA_MAX_CHARS));		$this->seed = hexdec(substr(unique_id(), 4, 10));		$this->solved = 0;		// compute $seed % 0x7fffffff		$this->seed -= 0x7fffffff * floor($this->seed / 0x7fffffff);		$sql = 'UPDATE ' . CONFIRM_TABLE . ' SET ' . $db->sql_build_array('UPDATE', array(				'code'			=> (string) $this->code,				'seed'			=> (int) $this->seed)) . '				WHERE				confirm_id = \'' . $db->sql_escape($this->confirm_id) . '\'					AND session_id = \'' . $db->sql_escape($user->session_id) . '\'';		$db->sql_query($sql);	}	/**	* New Question, if desired.	*/	function new_attempt()	{		global $db, $user;		$this->code = gen_rand_string_friendly(mt_rand(CAPTCHA_MIN_CHARS, CAPTCHA_MAX_CHARS));		$this->seed = hexdec(substr(unique_id(), 4, 10));		$this->solved = 0;		// compute $seed % 0x7fffffff		$this->seed -= 0x7fffffff * floor($this->seed / 0x7fffffff);		$sql = 'UPDATE ' . CONFIRM_TABLE . ' SET ' . $db->sql_build_array('UPDATE', array(				'code'			=> (string) $this->code,				'seed'			=> (int) $this->seed)) . '				, attempts = attempts + 1				WHERE				confirm_id = \'' . $db->sql_escape($this->confirm_id) . '\'					AND session_id = \'' . $db->sql_escape($user->session_id) . '\'';		$db->sql_query($sql);	}	/**	* Look up everything we need for painting&checking.	*/	function load_code()	{		global $db, $user;		$sql = 'SELECT code, seed, attempts			FROM ' . CONFIRM_TABLE . "			WHERE confirm_id = '" . $db->sql_escape($this->confirm_id) . "'				AND session_id = '" . $db->sql_escape($user->session_id) . "'				AND confirm_type = " . $this->type;		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			$this->code = $row['code'];			$this->seed = $row['seed'];			$this->attempts = $row['attempts'];			return true;		}		return false;	}	function check_code()	{		return (strcasecmp($this->code, $this->confirm_code) === 0);	}	function delete_code()	{		global $db, $user;		$sql = 'DELETE FROM ' . CONFIRM_TABLE . "			WHERE confirm_id = '" . $db->sql_escape($confirm_id) . "'				AND session_id = '" . $db->sql_escape($user->session_id) . "'				AND confirm_type = " . $this->type;		$db->sql_query($sql);	}	function get_attempt_count()	{		return $this->attempts;	}	function reset()	{		global $db, $user;		$sql = 'DELETE FROM ' . CONFIRM_TABLE . "			WHERE session_id = '" . $db->sql_escape($user->session_id) . "'				AND confirm_type = " . (int) $this->type;		$db->sql_query($sql);		// we leave the class usable by generating a new question		$this->generate_code();	}	function is_solved()	{		if (request_var('confirm_code', false) && $this->solved === 0)		{			$this->validate();		}		return (bool) $this->solved;	}	/**	*  API function	*/	function has_config()	{		return false;	}}?>
<?php//// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");// IP regular expressions$dec_octet = '(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])';$h16 = '[\dA-F]{1,4}';$ipv4 = "(?:$dec_octet\.){3}$dec_octet";$ls32 = "(?:$h16:$h16|$ipv4)";$ipv6_construct = array(	array(false,	'',		'{6}',	$ls32),	array(false,	'::',	'{0,5}', "(?:$h16(?::$h16)?|$ipv4)"),	array('',		':',	'{4}',	$ls32),	array('{1,2}',	':',	'{3}',	$ls32),	array('{1,3}',	':',	'{2}',	$ls32),	array('{1,4}',	':',	'',		$ls32),	array('{1,5}',	':',	false,	$ls32),	array('{1,6}',	':',	false,	$h16),	array('{1,7}',	':',	false,	''),	array(false, '::', false, ''));$ipv6 = '(?:';foreach ($ipv6_construct as $ip_type){	$ipv6 .= '(?:';	if ($ip_type[0] !== false)	{		$ipv6 .= "(?:$h16:)" . $ip_type[0];	}	$ipv6 .= $ip_type[1];	if ($ip_type[2] !== false)	{		$ipv6 .= "(?:$h16:)" . $ip_type[2];	}	$ipv6 .= $ip_type[3] . ')|';}$ipv6 = substr($ipv6, 0, -1) . ')';echo 'IPv4: ' . $ipv4 . "<br />\nIPv6: " . $ipv6 . "<br />\n";// URL regular expressions$pct_encoded = "%[\dA-F]{2}";$unreserved = 'a-z0-9\-._~';$sub_delims = '!$&\'()*+,;=';$pchar = "(?:[$unreserved$sub_delims:@|]+|$pct_encoded)"; // rfc: no "|"$scheme = '[a-z][a-z\d+\-.]*';$reg_name = "(?:[$unreserved$sub_delims:@|]+|$pct_encoded)+"; // rfc: * instead of + and no "|" and no "@" and no ":" (included instead of userinfo)//$userinfo = "(?:(?:[$unreserved$sub_delims:]+|$pct_encoded))*";$ipv4_simple = '[0-9.]+';$ipv6_simple = '\[[a-z0-9.]+:[a-z0-9.]+:[a-z0-9.:]+\]';$host = "(?:$reg_name|$ipv4_simple|$ipv6_simple)";$port = '\d*';//$authority = "(?:$userinfo@)?$host(?::$port)?";$authority = "$host(?::$port)?";$segment = "$pchar*";$path_abempty = "(?:/$segment)*";$hier_part = "/{2}$authority$path_abempty";$query = "(?:[$unreserved$sub_delims:@/?|]+|$pct_encoded)*"; // pchar | "/" | "?", rfc: no "|"$fragment = $query;$url =  "$scheme:$hier_part(?:\?$query)?(?:\#$fragment)?";echo 'URL: ' . $url . "<br />\n";// no scheme, shortened authority, but host has to start with www.$www_url =  "www\.$reg_name(?::$port)?$path_abempty(?:\?$query)?(?:\#$fragment)?";echo 'www.URL: ' . $www_url . "<br />\n";// no schema and no authority$relative_url = "$segment$path_abempty(?:\?$query)?(?:\#$fragment)?";echo 'relative URL: ' . $relative_url . "<br />\n";?>
<?php return array(''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'10',''=>'20',''=>'30',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'21',''=>'22',''=>'23',''=>'24',''=>'25',''=>'26',''=>'27',''=>'28',''=>'29',''=>'30',''=>'31',''=>'32',''=>'33',''=>'34',''=>'35',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'36',''=>'37',''=>'38',''=>'39',''=>'40',''=>'41',''=>'42',''=>'43',''=>'44',''=>'45',''=>'46',''=>'47',''=>'48',''=>'49',''=>'50',''=>'');
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class mcp_queue_info{	function module()	{		return array(			'filename'	=> 'mcp_queue',			'title'		=> 'MCP_QUEUE',			'version'	=> '1.0.0',			'modes'		=> array(				'unapproved_topics'	=> array('title' => 'MCP_QUEUE_UNAPPROVED_TOPICS', 'auth' => 'aclf_m_approve', 'cat' => array('MCP_QUEUE')),				'unapproved_posts'	=> array('title' => 'MCP_QUEUE_UNAPPROVED_POSTS', 'auth' => 'aclf_m_approve', 'cat' => array('MCP_QUEUE')),				'approve_details'	=> array('title' => 'MCP_QUEUE_APPROVE_DETAILS', 'auth' => 'acl_m_approve,$id || (!$id && aclf_m_approve)', 'cat' => array('MCP_QUEUE')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** acp_prune [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// User pruning$lang = array_merge($lang, array(	'ACP_PRUNE_USERS_EXPLAIN'	=> 'This section allows you to delete or deactivate users on your board. Accounts can be filtered in a variety of ways; by post count, most recent activity, etc. Criteria may be combined to narrow down which accounts are affected. For example, you can prune users with fewer than 10 posts, who were also inactive after 2002-01-01. Alternatively, you may skip the criteria selection completely by entering a list of users (each on a separate line) into the text field. Take care with this facility! Once a user is deleted, there is no way to reverse the action.',	'DEACTIVATE_DELETE'			=> 'Deactivate or delete',	'DEACTIVATE_DELETE_EXPLAIN'	=> 'Choose whether to deactivate users or delete them entirely. Please note that deleted users cannot be restored!',	'DELETE_USERS'				=> 'Delete',	'DELETE_USER_POSTS'			=> 'Delete pruned user posts',	'DELETE_USER_POSTS_EXPLAIN' => 'Removes posts made by deleted users, has no effect if users are deactivated.',	'JOINED_EXPLAIN'			=> 'Enter a date in <kbd>YYYY-MM-DD</kbd> format.',	'LAST_ACTIVE_EXPLAIN'		=> 'Enter a date in <kbd>YYYY-MM-DD</kbd> format. Enter <kbd>0000-00-00</kbd> to prune users who never logged in, <em>Before</em> and <em>After</em> conditions will be ignored.',	'PRUNE_USERS_LIST'				=> 'Users to be pruned',	'PRUNE_USERS_LIST_DELETE'		=> 'With the selected critera for pruning users the following accounts will be removed.',	'PRUNE_USERS_LIST_DEACTIVATE'	=> 'With the selected critera for pruning users the following accounts will be deactivated.',	'SELECT_USERS_EXPLAIN'		=> 'Enter specific usernames here, they will be used in preference to the criteria above. Founders cannot be pruned.',	'USER_DEACTIVATE_SUCCESS'	=> 'The selected users have been deactivated successfully.',	'USER_DELETE_SUCCESS'		=> 'The selected users have been deleted successfully.',	'USER_PRUNE_FAILURE'		=> 'No users fit the selected criteria.',	'WRONG_ACTIVE_JOINED_DATE'	=> 'The date entered is wrong, it is expected in <kbd>YYYY-MM-DD</kbd> format.',));// Forum Pruning$lang = array_merge($lang, array(	'ACP_PRUNE_FORUMS_EXPLAIN'	=> 'This will delete any topic which has not been posted to or viewed within the number of days you select. If you do not enter a number then all topics will be deleted. By default, it will not remove topics in which polls are still running nor will it remove stickies and announcements.',	'FORUM_PRUNE'		=> 'Forum prune',	'NO_PRUNE'			=> 'No forums pruned.',	'SELECTED_FORUM'	=> 'Selected forum',	'SELECTED_FORUMS'	=> 'Selected forums',	'POSTS_PRUNED'					=> 'Posts pruned',	'PRUNE_ANNOUNCEMENTS'			=> 'Prune announcements',	'PRUNE_FINISHED_POLLS'			=> 'Prune closed polls',	'PRUNE_FINISHED_POLLS_EXPLAIN'	=> 'Removes topics with polls which have ended.',	'PRUNE_FORUM_CONFIRM'			=> 'Are you sure you want to prune the selected forums with the settings specified? Once removed, there is no way to recover the pruned posts and topics.',	'PRUNE_NOT_POSTED'				=> 'Days since last posted',	'PRUNE_NOT_VIEWED'				=> 'Days since last viewed',	'PRUNE_OLD_POLLS'				=> 'Prune old polls',	'PRUNE_OLD_POLLS_EXPLAIN'		=> 'Removes topics with polls not voted in for post age days.',	'PRUNE_STICKY'					=> 'Prune stickies',	'PRUNE_SUCCESS'					=> 'Pruning of forums was successful.',	'TOPICS_PRUNED'		=> 'Topics pruned',));?>
<?php/**** @package phpBB3* @copyright (c) 2011 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/if (!defined('IN_PHPBB')){	exit;}// Report all errors, except notices and deprecation messagesif (!defined('E_DEPRECATED')){	define('E_DEPRECATED', 8192);}error_reporting(E_ALL & ~E_NOTICE & ~E_DEPRECATED);/** Remove variables created by register_globals from the global scope* Thanks to Matt Kavanagh*/function deregister_globals(){	$not_unset = array(		'GLOBALS'	=> true,		'_GET'		=> true,		'_POST'		=> true,		'_COOKIE'	=> true,		'_REQUEST'	=> true,		'_SERVER'	=> true,		'_SESSION'	=> true,		'_ENV'		=> true,		'_FILES'	=> true,		'phpEx'		=> true,		'phpbb_root_path'	=> true	);	// Not only will array_merge and array_keys give a warning if	// a parameter is not an array, array_merge will actually fail.	// So we check if _SESSION has been initialised.	if (!isset($_SESSION) || !is_array($_SESSION))	{		$_SESSION = array();	}	// Merge all into one extremely huge array; unset this later	$input = array_merge(		array_keys($_GET),		array_keys($_POST),		array_keys($_COOKIE),		array_keys($_SERVER),		array_keys($_SESSION),		array_keys($_ENV),		array_keys($_FILES)	);	foreach ($input as $varname)	{		if (isset($not_unset[$varname]))		{			// Hacking attempt. No point in continuing unless it's a COOKIE (so a cookie called GLOBALS doesn't lock users out completely)			if ($varname !== 'GLOBALS' || isset($_GET['GLOBALS']) || isset($_POST['GLOBALS']) || isset($_SERVER['GLOBALS']) || isset($_SESSION['GLOBALS']) || isset($_ENV['GLOBALS']) || isset($_FILES['GLOBALS']))			{				exit;			}			else			{				$cookie = &$_COOKIE;				while (isset($cookie['GLOBALS']))				{					if (!is_array($cookie['GLOBALS']))					{						break;					}					foreach ($cookie['GLOBALS'] as $registered_var => $value)					{						if (!isset($not_unset[$registered_var]))						{							unset($GLOBALS[$registered_var]);						}					}					$cookie = &$cookie['GLOBALS'];				}			}		}		unset($GLOBALS[$varname]);	}	unset($input);}// Register globals and magic quotes have been dropped in PHP 5.4if (version_compare(PHP_VERSION, '5.4.0-dev', '>=')){	/**	* @ignore	*/	define('STRIP', false);}else{	@set_magic_quotes_runtime(0);	// Be paranoid with passed vars	if (@ini_get('register_globals') == '1' || strtolower(@ini_get('register_globals')) == 'on' || !function_exists('ini_get'))	{		deregister_globals();	}	define('STRIP', (get_magic_quotes_gpc()) ? true : false);}// Prevent date/time functions from throwing E_WARNING on PHP 5.3 by setting a default timezoneif (function_exists('date_default_timezone_set') && function_exists('date_default_timezone_get')){	// For PHP 5.1.0 the date/time functions have been rewritten	// and setting a timezone is required prior to calling any date/time function.	// Since PHP 5.2.0 calls to date/time functions without having a timezone set	// result in E_STRICT errors being thrown.	// Note: We already exclude E_STRICT errors	// (to be exact: they are not included in E_ALL in PHP 5.2)	// In PHP 5.3.0 the error level has been raised to E_WARNING which causes problems	// because we show E_WARNING errors and do not set a default timezone.	// This is because we have our own timezone handling and work in UTC only anyway.	// So what we basically want to do is set our timezone to UTC,	// but we don't know what other scripts (such as bridges) are involved,	// so we check whether a timezone is already set by calling date_default_timezone_get().	// Unfortunately, date_default_timezone_get() itself might throw E_WARNING	// if no timezone has been set, so we have to keep it quiet with @.	// date_default_timezone_get() tries to guess the correct timezone first	// and then falls back to UTC when everything fails.	// We just set the timezone to whatever date_default_timezone_get() returns.	date_default_timezone_set(@date_default_timezone_get());}$starttime = explode(' ', microtime());$starttime = $starttime[1] + $starttime[0];
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php return array(''=>'ss',''=>'i',''=>'n',''=>'j',''=>'',''=>'',''=>'',''=>'h',''=>'t',''=>'w',''=>'y',''=>'a',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'ff',''=>'fi',''=>'fl',''=>'ffi',''=>'ffl',''=>'st',''=>'st',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** acp_email [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// Email settings$lang = array_merge($lang, array(	'ACP_MASS_EMAIL_EXPLAIN'		=> 'Here you can e-mail a message to either all of your users or all users of a specific group <strong>having the option to receive mass e-mails enabled</strong>. To achieve this an e-mail will be sent out to the administrative e-mail address supplied, with a blind carbon copy sent to all recipients. The default setting is to only include 50 recipients in such an e-mail, for more recipients more e-mails will be sent. If you are emailing a large group of people please be patient after submitting and do not stop the page halfway through. It is normal for a mass emailing to take a long time, you will be notified when the script has completed.',	'ALL_USERS'						=> 'All users',	'COMPOSE'				=> 'Compose',	'EMAIL_SEND_ERROR'		=> 'There were one or more errors while sending the e-mail. Please check the %sError log%s for detailed error messages.',	'EMAIL_SENT'			=> 'This message has been sent.',	'EMAIL_SENT_QUEUE'		=> 'This message has been queued for sending.',	'LOG_SESSION'			=> 'Log mail session to critical log',	'SEND_IMMEDIATELY'		=> 'Send immediately',	'SEND_TO_GROUP'			=> 'Send to group',	'SEND_TO_USERS'			=> 'Send to users',	'SEND_TO_USERS_EXPLAIN'	=> 'Entering names here will override any group selected above. Enter each username on a new line.',	'MAIL_BANNED'			=> 'Mail banned users',	'MAIL_BANNED_EXPLAIN'	=> 'When sending a mass e-mail to a group you can select here whether banned users will also receive the e-mail.',	'MAIL_HIGH_PRIORITY'	=> 'High',	'MAIL_LOW_PRIORITY'		=> 'Low',	'MAIL_NORMAL_PRIORITY'	=> 'Normal',	'MAIL_PRIORITY'			=> 'Mail priority',	'MASS_MESSAGE'			=> 'Your message',	'MASS_MESSAGE_EXPLAIN'	=> 'Please note that you may enter only plain text. All markup will be removed before sending.',	'NO_EMAIL_MESSAGE'		=> 'You must enter a message.',	'NO_EMAIL_SUBJECT'		=> 'You must specify a subject for your message.',));?>
<?php/**** acp_modules [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ACP_MODULE_MANAGEMENT_EXPLAIN'	=> 'Here you are able to manage all kind of modules. Please note that the ACP has a three-level menu structure (Category -> Category -> Module) whereby the others having a two-level menu structure (Category -> Module) which must be kept. Please also be aware that you may lock out yourself if you disable or delete the modules responsible for the module management itself.',	'ADD_MODULE'					=> 'Add module',	'ADD_MODULE_CONFIRM'			=> 'Are you sure you want to add the selected module with the selected mode?',	'ADD_MODULE_TITLE'				=> 'Add module',	'CANNOT_REMOVE_MODULE'	=> 'Unable to remove module, it has assigned children. Please remove or move all children before performing this action.',	'CATEGORY'				=> 'Category',	'CHOOSE_MODE'			=> 'Choose module mode',	'CHOOSE_MODE_EXPLAIN'	=> 'Choose the modules mode being used.',	'CHOOSE_MODULE'			=> 'Choose module',	'CHOOSE_MODULE_EXPLAIN'	=> 'Choose the file being called by this module.',	'CREATE_MODULE'			=> 'Create new module',	'DEACTIVATED_MODULE'	=> 'Deactivated module',	'DELETE_MODULE'			=> 'Delete module',	'DELETE_MODULE_CONFIRM'	=> 'Are you sure you want to remove this module?',	'EDIT_MODULE'			=> 'Edit module',	'EDIT_MODULE_EXPLAIN'	=> 'Here you are able to enter module specific settings.',	'HIDDEN_MODULE'			=> 'Hidden module',	'MODULE'					=> 'Module',	'MODULE_ADDED'				=> 'Module successfully added.',	'MODULE_DELETED'			=> 'Module successfully removed.',	'MODULE_DISPLAYED'			=> 'Module displayed',	'MODULE_DISPLAYED_EXPLAIN'	=> 'If you do not wish to display this module, but want to use it, set this to no.',	'MODULE_EDITED'				=> 'Module successfully edited.',	'MODULE_ENABLED'			=> 'Module enabled',	'MODULE_LANGNAME'			=> 'Module language name',	'MODULE_LANGNAME_EXPLAIN'	=> 'Enter the displayed module name. Use language constant if name is served from language file.',	'MODULE_TYPE'				=> 'Module type',	'NO_CATEGORY_TO_MODULE'	=> 'Unable to turn category into module. Please remove/move all children before performing this action.',	'NO_MODULE'				=> 'No module found.',	'NO_MODULE_ID'			=> 'No module id specified.',	'NO_MODULE_LANGNAME'	=> 'No module language name specified.',	'NO_PARENT'				=> 'No Parent',	'PARENT'				=> 'Parent',	'PARENT_NO_EXIST'		=> 'Parent does not exist.',	'SELECT_MODULE'			=> 'Select a module',));?>
<?php$GLOBALS['utf_nfc_qc']=array(''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0);
