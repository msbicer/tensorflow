<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/if (!defined('IN_PHPBB')){	exit;}/*	Ability to simply add own rules by doing three things:		1) Add an appropriate constant		2) Add a new check array to the global_privmsgs_rules variable and the condition array (if one is required)		3) Add a new language variable to ucp.php		The user is then able to select the new rule. It will be checked against and handled as specified.		To add new actions (yes, checks can be added here too) to the rule management, the core code has to be modified.*/define('RULE_IS_LIKE', 1);		// Is Likedefine('RULE_IS_NOT_LIKE', 2);	// Is Not Likedefine('RULE_IS', 3);			// Isdefine('RULE_IS_NOT', 4);		// Is Notdefine('RULE_BEGINS_WITH', 5);	// Begins withdefine('RULE_ENDS_WITH', 6);	// Ends withdefine('RULE_IS_FRIEND', 7);	// Is Frienddefine('RULE_IS_FOE', 8);		// Is Foedefine('RULE_IS_USER', 9);		// Is Userdefine('RULE_IS_GROUP', 10);	// Is In Usergroupdefine('RULE_ANSWERED', 11);	// Answereddefine('RULE_FORWARDED', 12);	// Forwardeddefine('RULE_TO_GROUP', 14);	// Usergroupdefine('RULE_TO_ME', 15);		// Medefine('ACTION_PLACE_INTO_FOLDER', 1);define('ACTION_MARK_AS_READ', 2);define('ACTION_MARK_AS_IMPORTANT', 3);define('ACTION_DELETE_MESSAGE', 4);define('CHECK_SUBJECT', 1);define('CHECK_SENDER', 2);define('CHECK_MESSAGE', 3);define('CHECK_STATUS', 4);define('CHECK_TO', 5);/*** Global private message rules* These rules define what to do if a rule is hit*/$global_privmsgs_rules = array(	CHECK_SUBJECT	=> array(		RULE_IS_LIKE		=> array('check0' => 'message_subject', 'function' => 'preg_match("/" . preg_quote({STRING}, "/") . "/i", {CHECK0})'),		RULE_IS_NOT_LIKE	=> array('check0' => 'message_subject', 'function' => '!(preg_match("/" . preg_quote({STRING}, "/") . "/i", {CHECK0}))'),		RULE_IS				=> array('check0' => 'message_subject', 'function' => '{CHECK0} == {STRING}'),		RULE_IS_NOT			=> array('check0' => 'message_subject', 'function' => '{CHECK0} != {STRING}'),		RULE_BEGINS_WITH	=> array('check0' => 'message_subject', 'function' => 'preg_match("/^" . preg_quote({STRING}, "/") . "/i", {CHECK0})'),		RULE_ENDS_WITH		=> array('check0' => 'message_subject', 'function' => 'preg_match("/" . preg_quote({STRING}, "/") . "$/i", {CHECK0})'),	),	CHECK_SENDER	=> array(		RULE_IS_LIKE		=> array('check0' => 'username', 'function' => 'preg_match("/" . preg_quote({STRING}, "/") . "/i", {CHECK0})'),		RULE_IS_NOT_LIKE	=> array('check0' => 'username', 'function' => '!(preg_match("/" . preg_quote({STRING}, "/") . "/i", {CHECK0}))'),		RULE_IS				=> array('check0' => 'username', 'function' => '{CHECK0} == {STRING}'),		RULE_IS_NOT			=> array('check0' => 'username', 'function' => '{CHECK0} != {STRING}'),		RULE_BEGINS_WITH	=> array('check0' => 'username', 'function' => 'preg_match("/^" . preg_quote({STRING}, "/") . "/i", {CHECK0})'),		RULE_ENDS_WITH		=> array('check0' => 'username', 'function' => 'preg_match("/" . preg_quote({STRING}, "/") . "$/i", {CHECK0})'),		RULE_IS_FRIEND		=> array('check0' => 'friend', 'function' => '{CHECK0} == 1'),		RULE_IS_FOE			=> array('check0' => 'foe', 'function' => '{CHECK0} == 1'),		RULE_IS_USER		=> array('check0' => 'author_id', 'function' => '{CHECK0} == {USER_ID}'),		RULE_IS_GROUP		=> array('check0' => 'author_in_group', 'function' => 'in_array({GROUP_ID}, {CHECK0})'),	),	CHECK_MESSAGE	=> array(		RULE_IS_LIKE		=> array('check0' => 'message_text', 'function' => 'preg_match("/" . preg_quote({STRING}, "/") . "/i", {CHECK0})'),		RULE_IS_NOT_LIKE	=> array('check0' => 'message_text', 'function' => '!(preg_match("/" . preg_quote({STRING}, "/") . "/i", {CHECK0}))'),		RULE_IS				=> array('check0' => 'message_text', 'function' => '{CHECK0} == {STRING}'),		RULE_IS_NOT			=> array('check0' => 'message_text', 'function' => '{CHECK0} != {STRING}'),	),	CHECK_STATUS	=> array(		RULE_ANSWERED		=> array('check0' => 'pm_replied', 'function' => '{CHECK0} == 1'),		RULE_FORWARDED		=> array('check0' => 'pm_forwarded', 'function' => '{CHECK0} == 1'),	),	CHECK_TO		=> array(		RULE_TO_GROUP		=> array('check0' => 'to', 'check1' => 'bcc', 'check2' => 'user_in_group', 'function' => 'in_array("g_" . {CHECK2}, {CHECK0}) || in_array("g_" . {CHECK2}, {CHECK1})'),		RULE_TO_ME			=> array('check0' => 'to', 'check1' => 'bcc', 'function' => 'in_array("u_" . $user_id, {CHECK0}) || in_array("u_" . $user_id, {CHECK1})'),	));/*** This is for defining which condition fields to show for which Rule*/$global_rule_conditions = array(	RULE_IS_LIKE		=> 'text',	RULE_IS_NOT_LIKE	=> 'text',	RULE_IS				=> 'text',	RULE_IS_NOT			=> 'text',	RULE_BEGINS_WITH	=> 'text',	RULE_ENDS_WITH		=> 'text',	RULE_IS_USER		=> 'user',	RULE_IS_GROUP		=> 'group');/*** Get all folder*/function get_folder($user_id, $folder_id = false){	global $db, $user, $template;	global $phpbb_root_path, $phpEx;	$folder = array();	// Get folder information	$sql = 'SELECT folder_id, COUNT(msg_id) as num_messages, SUM(pm_unread) as num_unread		FROM ' . PRIVMSGS_TO_TABLE . "		WHERE user_id = $user_id			AND folder_id <> " . PRIVMSGS_NO_BOX . '		GROUP BY folder_id';	$result = $db->sql_query($sql);	$num_messages = $num_unread = array();	while ($row = $db->sql_fetchrow($result))	{		$num_messages[(int) $row['folder_id']] = $row['num_messages'];		$num_unread[(int) $row['folder_id']] = $row['num_unread'];	}	$db->sql_freeresult($result);	// Make sure the default boxes are defined	$available_folder = array(PRIVMSGS_INBOX, PRIVMSGS_OUTBOX, PRIVMSGS_SENTBOX);	foreach ($available_folder as $default_folder)	{		if (!isset($num_messages[$default_folder]))		{			$num_messages[$default_folder] = 0;		}		if (!isset($num_unread[$default_folder]))		{			$num_unread[$default_folder] = 0;		}	}	// Adjust unread status for outbox	$num_unread[PRIVMSGS_OUTBOX] = $num_messages[PRIVMSGS_OUTBOX];	$folder[PRIVMSGS_INBOX] = array(		'folder_name'		=> $user->lang['PM_INBOX'],		'num_messages'		=> $num_messages[PRIVMSGS_INBOX],		'unread_messages'	=> $num_unread[PRIVMSGS_INBOX]	);	// Custom Folder	$sql = 'SELECT folder_id, folder_name, pm_count		FROM ' . PRIVMSGS_FOLDER_TABLE . "			WHERE user_id = $user_id";	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$folder[$row['folder_id']] = array(			'folder_name'		=> $row['folder_name'],			'num_messages'		=> $row['pm_count'],			'unread_messages'	=> ((isset($num_unread[$row['folder_id']])) ? $num_unread[$row['folder_id']] : 0)		);	}	$db->sql_freeresult($result);	$folder[PRIVMSGS_OUTBOX] = array(		'folder_name'		=> $user->lang['PM_OUTBOX'],		'num_messages'		=> $num_messages[PRIVMSGS_OUTBOX],		'unread_messages'	=> $num_unread[PRIVMSGS_OUTBOX]	);	$folder[PRIVMSGS_SENTBOX] = array(		'folder_name'		=> $user->lang['PM_SENTBOX'],		'num_messages'		=> $num_messages[PRIVMSGS_SENTBOX],		'unread_messages'	=> $num_unread[PRIVMSGS_SENTBOX]	);	// Define Folder Array for template designers (and for making custom folders usable by the template too)	foreach ($folder as $f_id => $folder_ary)	{		$folder_id_name = ($f_id == PRIVMSGS_INBOX) ? 'inbox' : (($f_id == PRIVMSGS_OUTBOX) ? 'outbox' : 'sentbox');		$template->assign_block_vars('folder', array(			'FOLDER_ID'			=> $f_id,			'FOLDER_NAME'		=> $folder_ary['folder_name'],			'NUM_MESSAGES'		=> $folder_ary['num_messages'],			'UNREAD_MESSAGES'	=> $folder_ary['unread_messages'],			'U_FOLDER'			=> ($f_id > 0) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=' . $f_id) : append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=' . $folder_id_name),			'S_CUR_FOLDER'		=> ($f_id === $folder_id) ? true : false,			'S_UNREAD_MESSAGES'	=> ($folder_ary['unread_messages']) ? true : false,			'S_CUSTOM_FOLDER'	=> ($f_id > 0) ? true : false)		);	}	if ($folder_id !== false && !isset($folder[$folder_id]))	{		trigger_error('UNKNOWN_FOLDER');	}	return $folder;}/*** Delete Messages From Sentbox* we are doing this here because this saves us a bunch of checks and queries*/function clean_sentbox($num_sentbox_messages){	global $db, $user, $config;	// Check Message Limit	if ($user->data['message_limit'] && $num_sentbox_messages > $user->data['message_limit'])	{		// Delete old messages		$sql = 'SELECT t.msg_id			FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p			WHERE t.msg_id = p.msg_id				AND t.user_id = ' . $user->data['user_id'] . '				AND t.folder_id = ' . PRIVMSGS_SENTBOX . '			ORDER BY p.message_time ASC';		$result = $db->sql_query_limit($sql, ($num_sentbox_messages - $user->data['message_limit']));		$delete_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$delete_ids[] = $row['msg_id'];		}		$db->sql_freeresult($result);		delete_pm($user->data['user_id'], $delete_ids, PRIVMSGS_SENTBOX);	}}/*** Check Rule against Message Information*/function check_rule(&$rules, &$rule_row, &$message_row, $user_id){	global $user, $config;	if (!isset($rules[$rule_row['rule_check']][$rule_row['rule_connection']]))	{		return false;	}	$check_ary = $rules[$rule_row['rule_check']][$rule_row['rule_connection']];	// Replace Check Literals	$evaluate = $check_ary['function'];	$evaluate = preg_replace('/{(CHECK[0-9])}/', '$message_row[$check_ary[strtolower("\1")]]', $evaluate);	// Replace Rule Literals	$evaluate = preg_replace('/{(STRING|USER_ID|GROUP_ID)}/', '$rule_row["rule_" . strtolower("\1")]', $evaluate);	// Evil Statement	$result = false;	eval('$result = (' . $evaluate . ') ? true : false;');	if (!$result)	{		return false;	}	switch ($rule_row['rule_action'])	{		case ACTION_PLACE_INTO_FOLDER:			return array('action' => $rule_row['rule_action'], 'folder_id' => $rule_row['rule_folder_id']);		break;		case ACTION_MARK_AS_READ:		case ACTION_MARK_AS_IMPORTANT:			return array('action' => $rule_row['rule_action'], 'pm_unread' => $message_row['pm_unread'], 'pm_marked' => $message_row['pm_marked']);		break;		case ACTION_DELETE_MESSAGE:			global $db, $auth;			// Check for admins/mods - users are not allowed to remove those messages...			// We do the check here to make sure the data we use is consistent			$sql = 'SELECT user_id, user_type, user_permissions				FROM ' . USERS_TABLE . '				WHERE user_id = ' . (int) $message_row['author_id'];			$result = $db->sql_query($sql);			$userdata = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			$auth2 = new auth();			$auth2->acl($userdata);			if (!$auth2->acl_get('a_') && !$auth2->acl_get('m_') && !$auth2->acl_getf_global('m_'))			{				return array('action' => $rule_row['rule_action'], 'pm_unread' => $message_row['pm_unread'], 'pm_marked' => $message_row['pm_marked']);			}			return false;		break;		default:			return false;	}	return false;}/*** Update user PM count*/function update_pm_counts(){	global $user, $db;	// Update unread count	$sql = 'SELECT COUNT(msg_id) as num_messages		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE pm_unread = 1			AND folder_id <> ' . PRIVMSGS_OUTBOX . '			AND user_id = ' . $user->data['user_id'];	$result = $db->sql_query($sql);	$user->data['user_unread_privmsg'] = (int) $db->sql_fetchfield('num_messages');	$db->sql_freeresult($result);	// Update new pm count	$sql = 'SELECT COUNT(msg_id) as num_messages		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE pm_new = 1			AND folder_id IN (' . PRIVMSGS_NO_BOX . ', ' . PRIVMSGS_HOLD_BOX . ')			AND user_id = ' . $user->data['user_id'];	$result = $db->sql_query($sql);	$user->data['user_new_privmsg'] = (int) $db->sql_fetchfield('num_messages');	$db->sql_freeresult($result);	$db->sql_query('UPDATE ' . USERS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', array(		'user_unread_privmsg'	=> (int) $user->data['user_unread_privmsg'],		'user_new_privmsg'		=> (int) $user->data['user_new_privmsg'],	)) . ' WHERE user_id = ' . $user->data['user_id']);	// Ok, here we need to repair something, other boxes than privmsgs_no_box and privmsgs_hold_box should not carry the pm_new flag.	if (!$user->data['user_new_privmsg'])	{		$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '			SET pm_new = 0			WHERE pm_new = 1				AND folder_id NOT IN (' . PRIVMSGS_NO_BOX . ', ' . PRIVMSGS_HOLD_BOX . ')				AND user_id = ' . $user->data['user_id'];		$db->sql_query($sql);	}}/*** Place new messages into appropriate folder*/function place_pm_into_folder(&$global_privmsgs_rules, $release = false){	global $db, $user, $config;	if (!$user->data['user_new_privmsg'])	{		return array('not_moved' => 0, 'removed' => 0);	}	$user_message_rules = (int) $user->data['user_message_rules'];	$user_id = (int) $user->data['user_id'];	$action_ary = $move_into_folder = array();	$num_removed = 0;	// Newly processing on-hold messages	if ($release)	{		$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '			SET folder_id = ' . PRIVMSGS_NO_BOX . '			WHERE folder_id = ' . PRIVMSGS_HOLD_BOX . "				AND user_id = $user_id";		$db->sql_query($sql);	}	// Get those messages not yet placed into any box	$retrieve_sql = 'SELECT t.*, p.*, u.username, u.user_id, u.group_id		FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p, ' . USERS_TABLE . " u		WHERE t.user_id = $user_id			AND p.author_id = u.user_id			AND t.folder_id = " . PRIVMSGS_NO_BOX . '			AND t.msg_id = p.msg_id';	// Just place into the appropriate arrays if no rules need to be checked	if (!$user_message_rules)	{		$result = $db->sql_query($retrieve_sql);		while ($row = $db->sql_fetchrow($result))		{			$action_ary[$row['msg_id']][] = array('action' => false);		}		$db->sql_freeresult($result);	}	else	{		$user_rules = $zebra = $check_rows = array();		$user_ids = $memberships = array();		// First of all, grab all rules and retrieve friends/foes		$sql = 'SELECT *			FROM ' . PRIVMSGS_RULES_TABLE . "			WHERE user_id = $user_id";		$result = $db->sql_query($sql);		$user_rules = $db->sql_fetchrowset($result);		$db->sql_freeresult($result);		if (sizeof($user_rules))		{			$sql = 'SELECT zebra_id, friend, foe				FROM ' . ZEBRA_TABLE . "				WHERE user_id = $user_id";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$zebra[$row['zebra_id']] = $row;			}			$db->sql_freeresult($result);		}		// Now build a bare-bone check_row array		$result = $db->sql_query($retrieve_sql);		while ($row = $db->sql_fetchrow($result))		{			$check_rows[] = array_merge($row, array(				'to'				=> explode(':', $row['to_address']),				'bcc'				=> explode(':', $row['bcc_address']),				'friend'			=> (isset($zebra[$row['author_id']])) ? $zebra[$row['author_id']]['friend'] : 0,				'foe'				=> (isset($zebra[$row['author_id']])) ? $zebra[$row['author_id']]['foe'] : 0,				'user_in_group'		=> array($user->data['group_id']),				'author_in_group'	=> array())			);			$user_ids[] = $row['user_id'];		}		$db->sql_freeresult($result);		// Retrieve user memberships		if (sizeof($user_ids))		{			$sql = 'SELECT *				FROM ' . USER_GROUP_TABLE . '				WHERE ' . $db->sql_in_set('user_id', $user_ids) . '					AND user_pending = 0';			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$memberships[$row['user_id']][] = $row['group_id'];			}			$db->sql_freeresult($result);		}		// Now place into the appropriate folder		foreach ($check_rows as $row)		{			// Add membership if set			if (isset($memberships[$row['author_id']]))			{				$row['author_in_group'] = $memberships[$row['user_id']];			}			// Check Rule - this should be very quick since we have all information we need			$is_match = false;			foreach ($user_rules as $rule_row)			{				if (($action = check_rule($global_privmsgs_rules, $rule_row, $row, $user_id)) !== false)				{					$is_match = true;					$action_ary[$row['msg_id']][] = $action;				}			}			if (!$is_match)			{				$action_ary[$row['msg_id']][] = array('action' => false);			}		}		unset($user_rules, $zebra, $check_rows, $user_ids, $memberships);	}	// We place actions into arrays, to save queries.	$sql = $unread_ids = $delete_ids = $important_ids = array();	foreach ($action_ary as $msg_id => $msg_ary)	{		// It is allowed to execute actions more than once, except placing messages into folder		$folder_action = $message_removed = false;		foreach ($msg_ary as $pos => $rule_ary)		{			if ($folder_action && $rule_ary['action'] == ACTION_PLACE_INTO_FOLDER)			{				continue;			}			switch ($rule_ary['action'])			{				case ACTION_PLACE_INTO_FOLDER:					// Folder actions have precedence, so we will remove any other ones					$folder_action = true;					$move_into_folder[(int) $rule_ary['folder_id']][] = $msg_id;				break;				case ACTION_MARK_AS_READ:					if ($rule_ary['pm_unread'])					{						$unread_ids[] = $msg_id;					}				break;				case ACTION_DELETE_MESSAGE:					$delete_ids[] = $msg_id;					$message_removed = true;				break;				case ACTION_MARK_AS_IMPORTANT:					if (!$rule_ary['pm_marked'])					{						$important_ids[] = $msg_id;					}				break;			}		}		// We place this here because it could happen that the messages are doubled if a rule marks a message and then moves it into a specific		// folder. Here we simply move the message into the INBOX if it gets not removed and also not put into a custom folder.		if (!$folder_action && !$message_removed)		{			$move_into_folder[PRIVMSGS_INBOX][] = $msg_id;		}	}	// Do not change the order of processing	// The number of queries needed to be executed here highly depends on the defined rules and are	// only gone through if new messages arrive.	// Delete messages	if (sizeof($delete_ids))	{		$num_removed += sizeof($delete_ids);		delete_pm($user_id, $delete_ids, PRIVMSGS_NO_BOX);	}	// Set messages to Unread	if (sizeof($unread_ids))	{		$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '			SET pm_unread = 0			WHERE ' . $db->sql_in_set('msg_id', $unread_ids) . "				AND user_id = $user_id				AND folder_id = " . PRIVMSGS_NO_BOX;		$db->sql_query($sql);	}	// mark messages as important	if (sizeof($important_ids))	{		$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '			SET pm_marked = 1 - pm_marked			WHERE folder_id = ' . PRIVMSGS_NO_BOX . "				AND user_id = $user_id				AND " . $db->sql_in_set('msg_id', $important_ids);		$db->sql_query($sql);	}	// Move into folder	$folder = array();	if (sizeof($move_into_folder))	{		// Determine Full Folder Action - we need the move to folder id later eventually		$full_folder_action = ($user->data['user_full_folder'] == FULL_FOLDER_NONE) ? ($config['full_folder_action'] - (FULL_FOLDER_NONE*(-1))) : $user->data['user_full_folder'];		$sql_folder = array_keys($move_into_folder);		if ($full_folder_action >= 0)		{			$sql_folder[] = $full_folder_action;		}		$sql = 'SELECT folder_id, pm_count			FROM ' . PRIVMSGS_FOLDER_TABLE . '			WHERE ' . $db->sql_in_set('folder_id', $sql_folder) . "				AND user_id = $user_id";		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$folder[(int) $row['folder_id']] = (int) $row['pm_count'];		}		$db->sql_freeresult($result);		unset($sql_folder);		if (isset($move_into_folder[PRIVMSGS_INBOX]))		{			$sql = 'SELECT COUNT(msg_id) as num_messages				FROM ' . PRIVMSGS_TO_TABLE . "				WHERE user_id = $user_id					AND folder_id = " . PRIVMSGS_INBOX;			$result = $db->sql_query($sql);			$folder[PRIVMSGS_INBOX] = (int) $db->sql_fetchfield('num_messages');			$db->sql_freeresult($result);		}	}	// Here we have ideally only one folder to move into	foreach ($move_into_folder as $folder_id => $msg_ary)	{		$dest_folder = $folder_id;		$full_folder_action = FULL_FOLDER_NONE;		// Check Message Limit - we calculate with the complete array, most of the time it is one message		// But we are making sure that the other way around works too (more messages in queue than allowed to be stored)		if ($user->data['message_limit'] && $folder[$folder_id] && ($folder[$folder_id] + sizeof($msg_ary)) > $user->data['message_limit'])		{			$full_folder_action = ($user->data['user_full_folder'] == FULL_FOLDER_NONE) ? ($config['full_folder_action'] - (FULL_FOLDER_NONE*(-1))) : $user->data['user_full_folder'];			// If destination folder itself is full...			if ($full_folder_action >= 0 && ($folder[$full_folder_action] + sizeof($msg_ary)) > $user->data['message_limit'])			{				$full_folder_action = $config['full_folder_action'] - (FULL_FOLDER_NONE*(-1));			}			// If Full Folder Action is to move to another folder, we simply adjust the destination folder			if ($full_folder_action >= 0)			{				$dest_folder = $full_folder_action;			}			else if ($full_folder_action == FULL_FOLDER_DELETE)			{				// Delete some messages. NOTE: Ordered by msg_id here instead of message_time!				$sql = 'SELECT msg_id					FROM ' . PRIVMSGS_TO_TABLE . "					WHERE user_id = $user_id						AND folder_id = $dest_folder					ORDER BY msg_id ASC";				$result = $db->sql_query_limit($sql, (($folder[$dest_folder] + sizeof($msg_ary)) - $user->data['message_limit']));				$delete_ids = array();				while ($row = $db->sql_fetchrow($result))				{					$delete_ids[] = $row['msg_id'];				}				$db->sql_freeresult($result);				$num_removed += sizeof($delete_ids);				delete_pm($user_id, $delete_ids, $dest_folder);			}		}		//		if ($full_folder_action == FULL_FOLDER_HOLD)		{			$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '				SET folder_id = ' . PRIVMSGS_HOLD_BOX . '				WHERE folder_id = ' . PRIVMSGS_NO_BOX . "					AND user_id = $user_id					AND " . $db->sql_in_set('msg_id', $msg_ary);			$db->sql_query($sql);		}		else		{			$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . "				SET folder_id = $dest_folder, pm_new = 0				WHERE folder_id = " . PRIVMSGS_NO_BOX . "					AND user_id = $user_id					AND pm_new = 1					AND " . $db->sql_in_set('msg_id', $msg_ary);			$db->sql_query($sql);			if ($dest_folder != PRIVMSGS_INBOX)			{				$sql = 'UPDATE ' . PRIVMSGS_FOLDER_TABLE . '					SET pm_count = pm_count + ' . (int) $db->sql_affectedrows() . "					WHERE folder_id = $dest_folder						AND user_id = $user_id";				$db->sql_query($sql);			}		}	}	if (sizeof($action_ary))	{		// Move from OUTBOX to SENTBOX		// We are not checking any full folder status here... SENTBOX is a special treatment (old messages get deleted)		$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '			SET folder_id = ' . PRIVMSGS_SENTBOX . '			WHERE folder_id = ' . PRIVMSGS_OUTBOX . '				AND ' . $db->sql_in_set('msg_id', array_keys($action_ary));		$db->sql_query($sql);	}	// Update new/unread count	update_pm_counts();	// Now check how many messages got not moved...	$sql = 'SELECT COUNT(msg_id) as num_messages		FROM ' . PRIVMSGS_TO_TABLE . "		WHERE user_id = $user_id			AND folder_id = " . PRIVMSGS_HOLD_BOX;	$result = $db->sql_query($sql);	$num_not_moved = (int) $db->sql_fetchfield('num_messages');	$db->sql_freeresult($result);	return array('not_moved' => $num_not_moved, 'removed' => $num_removed);}/*** Move PM from one to another folder*/function move_pm($user_id, $message_limit, $move_msg_ids, $dest_folder, $cur_folder_id){	global $db, $user;	global $phpbb_root_path, $phpEx;	$num_moved = 0;	if (!is_array($move_msg_ids))	{		$move_msg_ids = array($move_msg_ids);	}	if (sizeof($move_msg_ids) && !in_array($dest_folder, array(PRIVMSGS_NO_BOX, PRIVMSGS_OUTBOX, PRIVMSGS_SENTBOX)) &&		!in_array($cur_folder_id, array(PRIVMSGS_NO_BOX, PRIVMSGS_OUTBOX)) && $cur_folder_id != $dest_folder)	{		// We have to check the destination folder ;)		if ($dest_folder != PRIVMSGS_INBOX)		{			$sql = 'SELECT folder_id, folder_name, pm_count				FROM ' . PRIVMSGS_FOLDER_TABLE . "				WHERE folder_id = $dest_folder					AND user_id = $user_id";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$row)			{				trigger_error('NOT_AUTHORISED');			}			if ($message_limit && $row['pm_count'] + sizeof($move_msg_ids) > $message_limit)			{				$message = sprintf($user->lang['NOT_ENOUGH_SPACE_FOLDER'], $row['folder_name']) . '<br /><br />';				$message .= sprintf($user->lang['CLICK_RETURN_FOLDER'], '<a href="' . append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=' . $row['folder_id']) . '">', '</a>', $row['folder_name']);				trigger_error($message);			}		}		else		{			$sql = 'SELECT COUNT(msg_id) as num_messages				FROM ' . PRIVMSGS_TO_TABLE . '				WHERE folder_id = ' . PRIVMSGS_INBOX . "					AND user_id = $user_id";			$result = $db->sql_query($sql);			$num_messages = (int) $db->sql_fetchfield('num_messages');			$db->sql_freeresult($result);			if ($message_limit && $num_messages + sizeof($move_msg_ids) > $message_limit)			{				$message = sprintf($user->lang['NOT_ENOUGH_SPACE_FOLDER'], $user->lang['PM_INBOX']) . '<br /><br />';				$message .= sprintf($user->lang['CLICK_RETURN_FOLDER'], '<a href="' . append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=inbox') . '">', '</a>', $user->lang['PM_INBOX']);				trigger_error($message);			}		}		$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . "			SET folder_id = $dest_folder			WHERE folder_id = $cur_folder_id				AND user_id = $user_id				AND " . $db->sql_in_set('msg_id', $move_msg_ids);		$db->sql_query($sql);		$num_moved = $db->sql_affectedrows();		// Update pm counts		if ($num_moved)		{			if (!in_array($cur_folder_id, array(PRIVMSGS_INBOX, PRIVMSGS_OUTBOX, PRIVMSGS_SENTBOX)))			{				$sql = 'UPDATE ' . PRIVMSGS_FOLDER_TABLE . "					SET pm_count = pm_count - $num_moved					WHERE folder_id = $cur_folder_id						AND user_id = $user_id";				$db->sql_query($sql);			}			if ($dest_folder != PRIVMSGS_INBOX)			{				$sql = 'UPDATE ' . PRIVMSGS_FOLDER_TABLE . "					SET pm_count = pm_count + $num_moved					WHERE folder_id = $dest_folder						AND user_id = $user_id";				$db->sql_query($sql);			}		}	}	else if (in_array($cur_folder_id, array(PRIVMSGS_NO_BOX, PRIVMSGS_OUTBOX)))	{		trigger_error('CANNOT_MOVE_SPECIAL');	}	return $num_moved;}/*** Update unread message status*/function update_unread_status($unread, $msg_id, $user_id, $folder_id){	if (!$unread)	{		return;	}	global $db, $user;	$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . "		SET pm_unread = 0		WHERE msg_id = $msg_id			AND user_id = $user_id			AND folder_id = $folder_id";	$db->sql_query($sql);	$sql = 'UPDATE ' . USERS_TABLE . "		SET user_unread_privmsg = user_unread_privmsg - 1		WHERE user_id = $user_id";	$db->sql_query($sql);	if ($user->data['user_id'] == $user_id)	{		$user->data['user_unread_privmsg']--;		// Try to cope with previous wrong conversions...		if ($user->data['user_unread_privmsg'] < 0)		{			$sql = 'UPDATE ' . USERS_TABLE . "				SET user_unread_privmsg = 0				WHERE user_id = $user_id";			$db->sql_query($sql);			$user->data['user_unread_privmsg'] = 0;		}	}}/*** Handle all actions possible with marked messages*/function handle_mark_actions($user_id, $mark_action){	global $db, $user, $phpbb_root_path, $phpEx;	$msg_ids		= request_var('marked_msg_id', array(0));	$cur_folder_id	= request_var('cur_folder_id', PRIVMSGS_NO_BOX);	$confirm		= (isset($_POST['confirm'])) ? true : false;	if (!sizeof($msg_ids))	{		return false;	}	switch ($mark_action)	{		case 'mark_important':			$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . "				SET pm_marked = 1 - pm_marked				WHERE folder_id = $cur_folder_id					AND user_id = $user_id					AND " . $db->sql_in_set('msg_id', $msg_ids);			$db->sql_query($sql);		break;		case 'delete_marked':			global $auth;			if (!$auth->acl_get('u_pm_delete'))			{				trigger_error('NO_AUTH_DELETE_MESSAGE');			}			if (confirm_box(true))			{				delete_pm($user_id, $msg_ids, $cur_folder_id);				$success_msg = (sizeof($msg_ids) == 1) ? 'MESSAGE_DELETED' : 'MESSAGES_DELETED';				$redirect = append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=' . $cur_folder_id);				meta_refresh(3, $redirect);				trigger_error($user->lang[$success_msg] . '<br /><br />' . sprintf($user->lang['RETURN_FOLDER'], '<a href="' . $redirect . '">', '</a>'));			}			else			{				$s_hidden_fields = array(					'cur_folder_id'	=> $cur_folder_id,					'mark_option'	=> 'delete_marked',					'submit_mark'	=> true,					'marked_msg_id'	=> $msg_ids				);				confirm_box(false, 'DELETE_MARKED_PM', build_hidden_fields($s_hidden_fields));			}		break;		default:			return false;	}	return true;}/*** Delete PM(s)*/function delete_pm($user_id, $msg_ids, $folder_id){	global $db, $user, $phpbb_root_path, $phpEx;	$user_id	= (int) $user_id;	$folder_id	= (int) $folder_id;	if (!$user_id)	{		return false;	}	if (!is_array($msg_ids))	{		if (!$msg_ids)		{			return false;		}		$msg_ids = array($msg_ids);	}	if (!sizeof($msg_ids))	{		return false;	}	// Get PM Information for later deleting	$sql = 'SELECT msg_id, pm_unread, pm_new		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE ' . $db->sql_in_set('msg_id', array_map('intval', $msg_ids)) . "			AND folder_id = $folder_id			AND user_id = $user_id";	$result = $db->sql_query($sql);	$delete_rows = array();	$num_unread = $num_new = $num_deleted = 0;	while ($row = $db->sql_fetchrow($result))	{		$num_unread += (int) $row['pm_unread'];		$num_new += (int) $row['pm_new'];		$delete_rows[$row['msg_id']] = 1;	}	$db->sql_freeresult($result);	unset($msg_ids);	if (!sizeof($delete_rows))	{		return false;	}	$db->sql_transaction('begin');	// if no one has read the message yet (meaning it is in users outbox)	// then mark the message as deleted...	if ($folder_id == PRIVMSGS_OUTBOX)	{		// Remove PM from Outbox		$sql = 'DELETE FROM ' . PRIVMSGS_TO_TABLE . "			WHERE user_id = $user_id AND folder_id = " . PRIVMSGS_OUTBOX . '				AND ' . $db->sql_in_set('msg_id', array_keys($delete_rows));		$db->sql_query($sql);		// Update PM Information for safety		$sql = 'UPDATE ' . PRIVMSGS_TABLE . " SET message_text = ''			WHERE " . $db->sql_in_set('msg_id', array_keys($delete_rows));		$db->sql_query($sql);		// Set delete flag for those intended to receive the PM		// We do not remove the message actually, to retain some basic information (sent time for example)		$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '			SET pm_deleted = 1			WHERE ' . $db->sql_in_set('msg_id', array_keys($delete_rows));		$db->sql_query($sql);		$num_deleted = $db->sql_affectedrows();	}	else	{		// Delete private message data		$sql = 'DELETE FROM ' . PRIVMSGS_TO_TABLE . "			WHERE user_id = $user_id				AND folder_id = $folder_id				AND " . $db->sql_in_set('msg_id', array_keys($delete_rows));		$db->sql_query($sql);		$num_deleted = $db->sql_affectedrows();	}	// if folder id is user defined folder then decrease pm_count	if (!in_array($folder_id, array(PRIVMSGS_INBOX, PRIVMSGS_OUTBOX, PRIVMSGS_SENTBOX, PRIVMSGS_NO_BOX)))	{		$sql = 'UPDATE ' . PRIVMSGS_FOLDER_TABLE . "			SET pm_count = pm_count - $num_deleted			WHERE folder_id = $folder_id";		$db->sql_query($sql);	}	// Update unread and new status field	if ($num_unread || $num_new)	{		$set_sql = ($num_unread) ? 'user_unread_privmsg = user_unread_privmsg - ' . $num_unread : '';		if ($num_new)		{			$set_sql .= ($set_sql != '') ? ', ' : '';			$set_sql .= 'user_new_privmsg = user_new_privmsg - ' . $num_new;		}		$db->sql_query('UPDATE ' . USERS_TABLE . " SET $set_sql WHERE user_id = $user_id");		$user->data['user_new_privmsg'] -= $num_new;		$user->data['user_unread_privmsg'] -= $num_unread;	}	// Now we have to check which messages we can delete completely	$sql = 'SELECT msg_id		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE ' . $db->sql_in_set('msg_id', array_keys($delete_rows));	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		unset($delete_rows[$row['msg_id']]);	}	$db->sql_freeresult($result);	$delete_ids = array_keys($delete_rows);	if (sizeof($delete_ids))	{		// Check if there are any attachments we need to remove		if (!function_exists('delete_attachments'))		{			include($phpbb_root_path . 'includes/functions_admin.' . $phpEx);		}		delete_attachments('message', $delete_ids, false);		$sql = 'DELETE FROM ' . PRIVMSGS_TABLE . '			WHERE ' . $db->sql_in_set('msg_id', $delete_ids);		$db->sql_query($sql);	}	$db->sql_transaction('commit');	return true;}/*** Rebuild message header*/function rebuild_header($check_ary){	global $db;	$address = array();	foreach ($check_ary as $check_type => $address_field)	{		// Split Addresses into users and groups		preg_match_all('/:?(u|g)_([0-9]+):?/', $address_field, $match);		$u = $g = array();		foreach ($match[1] as $id => $type)		{			${$type}[] = (int) $match[2][$id];		}		$_types = array('u', 'g');		foreach ($_types as $type)		{			if (sizeof($$type))			{				foreach ($$type as $id)				{					$address[$type][$id] = $check_type;				}			}		}	}	return $address;}/*** Print out/assign recipient information*/function write_pm_addresses($check_ary, $author_id, $plaintext = false){	global $db, $user, $template, $phpbb_root_path, $phpEx;	$addresses = array();	foreach ($check_ary as $check_type => $address_field)	{		if (!is_array($address_field))		{			// Split Addresses into users and groups			preg_match_all('/:?(u|g)_([0-9]+):?/', $address_field, $match);			$u = $g = array();			foreach ($match[1] as $id => $type)			{				${$type}[] = (int) $match[2][$id];			}		}		else		{			$u = $address_field['u'];			$g = $address_field['g'];		}		$address = array();		if (sizeof($u))		{			$sql = 'SELECT user_id, username, user_colour				FROM ' . USERS_TABLE . '				WHERE ' . $db->sql_in_set('user_id', $u);			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if ($check_type == 'to' || $author_id == $user->data['user_id'] || $row['user_id'] == $user->data['user_id'])				{					if ($plaintext)					{						$address[] = $row['username'];					}					else					{						$address['user'][$row['user_id']] = array('name' => $row['username'], 'colour' => $row['user_colour']);					}				}			}			$db->sql_freeresult($result);		}		if (sizeof($g))		{			if ($plaintext)			{				$sql = 'SELECT group_name, group_type					FROM ' . GROUPS_TABLE . '						WHERE ' . $db->sql_in_set('group_id', $g);				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					if ($check_type == 'to' || $author_id == $user->data['user_id'] || $row['user_id'] == $user->data['user_id'])					{						$address[] = ($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name'];					}				}				$db->sql_freeresult($result);			}			else			{				$sql = 'SELECT g.group_id, g.group_name, g.group_colour, g.group_type, ug.user_id					FROM ' . GROUPS_TABLE . ' g, ' . USER_GROUP_TABLE . ' ug						WHERE ' . $db->sql_in_set('g.group_id', $g) . '						AND g.group_id = ug.group_id						AND ug.user_pending = 0';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					if (!isset($address['group'][$row['group_id']]))					{						if ($check_type == 'to' || $author_id == $user->data['user_id'] || $row['user_id'] == $user->data['user_id'])						{							$row['group_name'] = ($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name'];							$address['group'][$row['group_id']] = array('name' => $row['group_name'], 'colour' => $row['group_colour']);						}					}					if (isset($address['user'][$row['user_id']]))					{						$address['user'][$row['user_id']]['in_group'] = $row['group_id'];					}				}				$db->sql_freeresult($result);			}		}		if (sizeof($address) && !$plaintext)		{			$template->assign_var('S_' . strtoupper($check_type) . '_RECIPIENT', true);			foreach ($address as $type => $adr_ary)			{				foreach ($adr_ary as $id => $row)				{					$tpl_ary = array(						'IS_GROUP'	=> ($type == 'group') ? true : false,						'IS_USER'	=> ($type == 'user') ? true : false,						'UG_ID'		=> $id,						'NAME'		=> $row['name'],						'COLOUR'	=> ($row['colour']) ? '#' . $row['colour'] : '',						'TYPE'		=> $type,					);					if ($type == 'user')					{						$tpl_ary = array_merge($tpl_ary, array(							'U_VIEW'		=> get_username_string('profile', $id, $row['name'], $row['colour']),							'NAME_FULL'		=> get_username_string('full', $id, $row['name'], $row['colour']),						));					}					else					{						$tpl_ary = array_merge($tpl_ary, array(							'U_VIEW'		=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=group&amp;g=' . $id),						));					}					$template->assign_block_vars($check_type . '_recipient', $tpl_ary);				}			}		}		$addresses[$check_type] = $address;	}	return $addresses;}/*** Get folder status*/function get_folder_status($folder_id, $folder){	global $db, $user, $config;	if (isset($folder[$folder_id]))	{		$folder = $folder[$folder_id];	}	else	{		return false;	}	$return = array(		'folder_name'	=> $folder['folder_name'],		'cur'			=> $folder['num_messages'],		'remaining'		=> ($user->data['message_limit']) ? $user->data['message_limit'] - $folder['num_messages'] : 0,		'max'			=> $user->data['message_limit'],		'percent'		=> ($user->data['message_limit']) ? (($user->data['message_limit'] > 0) ? round(($folder['num_messages'] / $user->data['message_limit']) * 100) : 100) : 0,	);	$return['message']	= sprintf($user->lang['FOLDER_STATUS_MSG'], $return['percent'], $return['cur'], $return['max']);	return $return;}//// COMPOSE MESSAGES///*** Submit PM*/function submit_pm($mode, $subject, &$data, $put_in_outbox = true){	global $db, $auth, $config, $phpEx, $template, $user, $phpbb_root_path;	// We do not handle erasing pms here	if ($mode == 'delete')	{		return false;	}	$current_time = time();	// Collect some basic information about which tables and which rows to update/insert	$sql_data = array();	$root_level = 0;	// Recipient Information	$recipients = $to = $bcc = array();	if ($mode != 'edit')	{		// Build Recipient List		// u|g => array($user_id => 'to'|'bcc')		$_types = array('u', 'g');		foreach ($_types as $ug_type)		{			if (isset($data['address_list'][$ug_type]) && sizeof($data['address_list'][$ug_type]))			{				foreach ($data['address_list'][$ug_type] as $id => $field)				{					$id = (int) $id;					// Do not rely on the address list being "valid"					if (!$id || ($ug_type == 'u' && $id == ANONYMOUS))					{						continue;					}					$field = ($field == 'to') ? 'to' : 'bcc';					if ($ug_type == 'u')					{						$recipients[$id] = $field;					}					${$field}[] = $ug_type . '_' . $id;				}			}		}		if (isset($data['address_list']['g']) && sizeof($data['address_list']['g']))		{			// We need to check the PM status of group members (do they want to receive PM's?)			// Only check if not a moderator or admin, since they are allowed to override this user setting			$sql_allow_pm = (!$auth->acl_gets('a_', 'm_') && !$auth->acl_getf_global('m_')) ? ' AND u.user_allow_pm = 1' : '';			$sql = 'SELECT u.user_type, ug.group_id, ug.user_id				FROM ' . USERS_TABLE . ' u, ' . USER_GROUP_TABLE . ' ug				WHERE ' . $db->sql_in_set('ug.group_id', array_keys($data['address_list']['g'])) . '					AND ug.user_pending = 0					AND u.user_id = ug.user_id					AND u.user_type IN (' . USER_NORMAL . ', ' . USER_FOUNDER . ')' .					$sql_allow_pm;			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				// Additionally, do not include the sender if he is in the group he wants to send to. ;)				if ($row['user_id'] === $user->data['user_id'])				{					continue;				}				$field = ($data['address_list']['g'][$row['group_id']] == 'to') ? 'to' : 'bcc';				$recipients[$row['user_id']] = $field;			}			$db->sql_freeresult($result);		}		if (!sizeof($recipients))		{			trigger_error('NO_RECIPIENT');		}	}	// First of all make sure the subject are having the correct length.	$subject = truncate_string($subject);	$db->sql_transaction('begin');	$sql = '';	switch ($mode)	{		case 'reply':		case 'quote':			$root_level = ($data['reply_from_root_level']) ? $data['reply_from_root_level'] : $data['reply_from_msg_id'];			// Set message_replied switch for this user			$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '				SET pm_replied = 1				WHERE user_id = ' . $data['from_user_id'] . '					AND msg_id = ' . $data['reply_from_msg_id'];		// no break		case 'forward':		case 'post':		case 'quotepost':			$sql_data = array(				'root_level'		=> $root_level,				'author_id'			=> $data['from_user_id'],				'icon_id'			=> $data['icon_id'],				'author_ip'			=> $data['from_user_ip'],				'message_time'		=> $current_time,				'enable_bbcode'		=> $data['enable_bbcode'],				'enable_smilies'	=> $data['enable_smilies'],				'enable_magic_url'	=> $data['enable_urls'],				'enable_sig'		=> $data['enable_sig'],				'message_subject'	=> $subject,				'message_text'		=> $data['message'],				'message_attachment'=> (!empty($data['attachment_data'])) ? 1 : 0,				'bbcode_bitfield'	=> $data['bbcode_bitfield'],				'bbcode_uid'		=> $data['bbcode_uid'],				'to_address'		=> implode(':', $to),				'bcc_address'		=> implode(':', $bcc),				'message_reported'	=> 0,			);		break;		case 'edit':			$sql_data = array(				'icon_id'			=> $data['icon_id'],				'message_edit_time'	=> $current_time,				'enable_bbcode'		=> $data['enable_bbcode'],				'enable_smilies'	=> $data['enable_smilies'],				'enable_magic_url'	=> $data['enable_urls'],				'enable_sig'		=> $data['enable_sig'],				'message_subject'	=> $subject,				'message_text'		=> $data['message'],				'message_attachment'=> (!empty($data['attachment_data'])) ? 1 : 0,				'bbcode_bitfield'	=> $data['bbcode_bitfield'],				'bbcode_uid'		=> $data['bbcode_uid']			);		break;	}	if (sizeof($sql_data))	{		$query = '';		if ($mode == 'post' || $mode == 'reply' || $mode == 'quote' || $mode == 'quotepost' || $mode == 'forward')		{			$db->sql_query('INSERT INTO ' . PRIVMSGS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_data));			$data['msg_id'] = $db->sql_nextid();		}		else if ($mode == 'edit')		{			$sql = 'UPDATE ' . PRIVMSGS_TABLE . '				SET message_edit_count = message_edit_count + 1, ' . $db->sql_build_array('UPDATE', $sql_data) . '				WHERE msg_id = ' . $data['msg_id'];			$db->sql_query($sql);		}	}	if ($mode != 'edit')	{		if ($sql)		{			$db->sql_query($sql);		}		unset($sql);		$sql_ary = array();		foreach ($recipients as $user_id => $type)		{			$sql_ary[] = array(				'msg_id'		=> (int) $data['msg_id'],				'user_id'		=> (int) $user_id,				'author_id'		=> (int) $data['from_user_id'],				'folder_id'		=> PRIVMSGS_NO_BOX,				'pm_new'		=> 1,				'pm_unread'		=> 1,				'pm_forwarded'	=> ($mode == 'forward') ? 1 : 0			);		}		$db->sql_multi_insert(PRIVMSGS_TO_TABLE, $sql_ary);		$sql = 'UPDATE ' . USERS_TABLE . '			SET user_new_privmsg = user_new_privmsg + 1, user_unread_privmsg = user_unread_privmsg + 1, user_last_privmsg = ' . time() . '			WHERE ' . $db->sql_in_set('user_id', array_keys($recipients));		$db->sql_query($sql);		// Put PM into outbox		if ($put_in_outbox)		{			$db->sql_query('INSERT INTO ' . PRIVMSGS_TO_TABLE . ' ' . $db->sql_build_array('INSERT', array(				'msg_id'		=> (int) $data['msg_id'],				'user_id'		=> (int) $data['from_user_id'],				'author_id'		=> (int) $data['from_user_id'],				'folder_id'		=> PRIVMSGS_OUTBOX,				'pm_new'		=> 0,				'pm_unread'		=> 0,				'pm_forwarded'	=> ($mode == 'forward') ? 1 : 0))			);		}	}	// Set user last post time	if ($mode == 'reply' || $mode == 'quote' || $mode == 'quotepost' || $mode == 'forward' || $mode == 'post')	{		$sql = 'UPDATE ' . USERS_TABLE . "			SET user_lastpost_time = $current_time			WHERE user_id = " . $data['from_user_id'];		$db->sql_query($sql);	}	// Submit Attachments	if (!empty($data['attachment_data']) && $data['msg_id'] && in_array($mode, array('post', 'reply', 'quote', 'quotepost', 'edit', 'forward')))	{		$space_taken = $files_added = 0;		$orphan_rows = array();		foreach ($data['attachment_data'] as $pos => $attach_row)		{			$orphan_rows[(int) $attach_row['attach_id']] = array();		}		if (sizeof($orphan_rows))		{			$sql = 'SELECT attach_id, filesize, physical_filename				FROM ' . ATTACHMENTS_TABLE . '				WHERE ' . $db->sql_in_set('attach_id', array_keys($orphan_rows)) . '					AND in_message = 1					AND is_orphan = 1					AND poster_id = ' . $user->data['user_id'];			$result = $db->sql_query($sql);			$orphan_rows = array();			while ($row = $db->sql_fetchrow($result))			{				$orphan_rows[$row['attach_id']] = $row;			}			$db->sql_freeresult($result);		}		foreach ($data['attachment_data'] as $pos => $attach_row)		{			if ($attach_row['is_orphan'] && !isset($orphan_rows[$attach_row['attach_id']]))			{				continue;			}			if (!$attach_row['is_orphan'])			{				// update entry in db if attachment already stored in db and filespace				$sql = 'UPDATE ' . ATTACHMENTS_TABLE . "					SET attach_comment = '" . $db->sql_escape($attach_row['attach_comment']) . "'					WHERE attach_id = " . (int) $attach_row['attach_id'] . '						AND is_orphan = 0';				$db->sql_query($sql);			}			else			{				// insert attachment into db				if (!@file_exists($phpbb_root_path . $config['upload_path'] . '/' . utf8_basename($orphan_rows[$attach_row['attach_id']]['physical_filename'])))				{					continue;				}				$space_taken += $orphan_rows[$attach_row['attach_id']]['filesize'];				$files_added++;				$attach_sql = array(					'post_msg_id'		=> $data['msg_id'],					'topic_id'			=> 0,					'is_orphan'			=> 0,					'poster_id'			=> $data['from_user_id'],					'attach_comment'	=> $attach_row['attach_comment'],				);				$sql = 'UPDATE ' . ATTACHMENTS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $attach_sql) . '					WHERE attach_id = ' . $attach_row['attach_id'] . '						AND is_orphan = 1						AND poster_id = ' . $user->data['user_id'];				$db->sql_query($sql);			}		}		if ($space_taken && $files_added)		{			set_config_count('upload_dir_size', $space_taken, true);			set_config_count('num_files', $files_added, true);		}	}	// Delete draft if post was loaded...	$draft_id = request_var('draft_loaded', 0);	if ($draft_id)	{		$sql = 'DELETE FROM ' . DRAFTS_TABLE . "			WHERE draft_id = $draft_id				AND user_id = " . $data['from_user_id'];		$db->sql_query($sql);	}	$db->sql_transaction('commit');	// Send Notifications	if ($mode != 'edit')	{		pm_notification($mode, $data['from_username'], $recipients, $subject, $data['message'], $data['msg_id']);	}	return $data['msg_id'];}/*** PM Notification*/function pm_notification($mode, $author, $recipients, $subject, $message, $msg_id){	global $db, $user, $config, $phpbb_root_path, $phpEx, $auth;	$subject = censor_text($subject);	unset($recipients[ANONYMOUS], $recipients[$user->data['user_id']]);	if (!sizeof($recipients))	{		return;	}	// Get banned User ID's	$sql = 'SELECT ban_userid		FROM ' . BANLIST_TABLE . '		WHERE ' . $db->sql_in_set('ban_userid', array_map('intval', array_keys($recipients))) . '			AND ban_exclude = 0';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		unset($recipients[$row['ban_userid']]);	}	$db->sql_freeresult($result);	if (!sizeof($recipients))	{		return;	}	$sql = 'SELECT user_id, username, user_email, user_lang, user_notify_pm, user_notify_type, user_jabber		FROM ' . USERS_TABLE . '		WHERE ' . $db->sql_in_set('user_id', array_map('intval', array_keys($recipients)));	$result = $db->sql_query($sql);	$msg_list_ary = array();	while ($row = $db->sql_fetchrow($result))	{		if ($row['user_notify_pm'] == 1 && trim($row['user_email']))		{			$msg_list_ary[] = array(				'method'	=> $row['user_notify_type'],				'email'		=> $row['user_email'],				'jabber'	=> $row['user_jabber'],				'name'		=> $row['username'],				'lang'		=> $row['user_lang']			);		}	}	$db->sql_freeresult($result);	if (!sizeof($msg_list_ary))	{		return;	}	include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);	$messenger = new messenger();	foreach ($msg_list_ary as $pos => $addr)	{		$messenger->template('privmsg_notify', $addr['lang']);		$messenger->to($addr['email'], $addr['name']);		$messenger->im($addr['jabber'], $addr['name']);		$messenger->assign_vars(array(			'SUBJECT'		=> htmlspecialchars_decode($subject),			'AUTHOR_NAME'	=> htmlspecialchars_decode($author),			'USERNAME'		=> htmlspecialchars_decode($addr['name']),			'U_INBOX'			=> generate_board_url() . "/ucp.$phpEx?i=pm&folder=inbox",			'U_VIEW_MESSAGE'	=> generate_board_url() . "/ucp.$phpEx?i=pm&mode=view&p=$msg_id",		));		$messenger->send($addr['method']);	}	unset($msg_list_ary);	$messenger->save_queue();	unset($messenger);}/*** Display Message History*/function message_history($msg_id, $user_id, $message_row, $folder, $in_post_mode = false){	global $db, $user, $config, $template, $phpbb_root_path, $phpEx, $auth, $bbcode;	// Select all receipts and the author from the pm we currently view, to only display their pm-history	$sql = 'SELECT author_id, user_id		FROM ' . PRIVMSGS_TO_TABLE . "		WHERE msg_id = $msg_id			AND folder_id <> " . PRIVMSGS_HOLD_BOX;	$result = $db->sql_query($sql);	$recipients = array();	while ($row = $db->sql_fetchrow($result))	{		$recipients[] = (int) $row['user_id'];		$recipients[] = (int) $row['author_id'];	}	$db->sql_freeresult($result);	$recipients = array_unique($recipients);	// Get History Messages (could be newer)	$sql = 'SELECT t.*, p.*, u.*		FROM ' . PRIVMSGS_TABLE . ' p, ' . PRIVMSGS_TO_TABLE . ' t, ' . USERS_TABLE . ' u		WHERE t.msg_id = p.msg_id			AND p.author_id = u.user_id			AND t.folder_id NOT IN (' . PRIVMSGS_NO_BOX . ', ' . PRIVMSGS_HOLD_BOX . ')			AND ' . $db->sql_in_set('t.author_id', $recipients, false, true) . "			AND t.user_id = $user_id";	// We no longer need those.	unset($recipients);	if (!$message_row['root_level'])	{		$sql .= " AND (p.root_level = $msg_id OR (p.root_level = 0 AND p.msg_id = $msg_id))";	}	else	{		$sql .= " AND (p.root_level = " . $message_row['root_level'] . ' OR p.msg_id = ' . $message_row['root_level'] . ')';	}	$sql .= ' ORDER BY p.message_time DESC';	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	if (!$row)	{		$db->sql_freeresult($result);		return false;	}	$title = $row['message_subject'];	$rowset = array();	$bbcode_bitfield = '';	$folder_url = append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm') . '&amp;folder=';	do	{		$folder_id = (int) $row['folder_id'];		$row['folder'][] = (isset($folder[$folder_id])) ? '<a href="' . $folder_url . $folder_id . '">' . $folder[$folder_id]['folder_name'] . '</a>' : $user->lang['UNKNOWN_FOLDER'];		if (isset($rowset[$row['msg_id']]))		{			$rowset[$row['msg_id']]['folder'][] = (isset($folder[$folder_id])) ? '<a href="' . $folder_url . $folder_id . '">' . $folder[$folder_id]['folder_name'] . '</a>' : $user->lang['UNKNOWN_FOLDER'];		}		else		{			$rowset[$row['msg_id']] = $row;			$bbcode_bitfield = $bbcode_bitfield | base64_decode($row['bbcode_bitfield']);		}	}	while ($row = $db->sql_fetchrow($result));	$db->sql_freeresult($result);	if (sizeof($rowset) == 1 && !$in_post_mode)	{		return false;	}	// Instantiate BBCode class	if ((empty($bbcode) || $bbcode === false) && $bbcode_bitfield !== '')	{		if (!class_exists('bbcode'))		{			include($phpbb_root_path . 'includes/bbcode.' . $phpEx);		}		$bbcode = new bbcode(base64_encode($bbcode_bitfield));	}	$title = censor_text($title);	$url = append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm');	$next_history_pm = $previous_history_pm = $prev_id = 0;	// Re-order rowset to be able to get the next/prev message rows...	$rowset = array_values($rowset);	for ($i = 0, $size = sizeof($rowset); $i < $size; $i++)	{		$row = &$rowset[$i];		$id = (int) $row['msg_id'];		$author_id	= $row['author_id'];		$folder_id	= (int) $row['folder_id'];		$subject	= $row['message_subject'];		$message	= $row['message_text'];		$message = censor_text($message);		$decoded_message = false;		if ($in_post_mode && $auth->acl_get('u_sendpm') && $author_id != ANONYMOUS)		{			$decoded_message = $message;			decode_message($decoded_message, $row['bbcode_uid']);			$decoded_message = bbcode_nl2br($decoded_message);		}		if ($row['bbcode_bitfield'])		{			$bbcode->bbcode_second_pass($message, $row['bbcode_uid'], $row['bbcode_bitfield']);		}		$message = bbcode_nl2br($message);		$message = smiley_text($message, !$row['enable_smilies']);		$subject = censor_text($subject);		if ($id == $msg_id)		{			$next_history_pm = (isset($rowset[$i + 1])) ? (int) $rowset[$i + 1]['msg_id'] : 0;			$previous_history_pm = $prev_id;		}		$template->assign_block_vars('history_row', array(			'MESSAGE_AUTHOR_QUOTE'		=> (($decoded_message) ? addslashes(get_username_string('username', $author_id, $row['username'], $row['user_colour'], $row['username'])) : ''),			'MESSAGE_AUTHOR_FULL'		=> get_username_string('full', $author_id, $row['username'], $row['user_colour'], $row['username']),			'MESSAGE_AUTHOR_COLOUR'		=> get_username_string('colour', $author_id, $row['username'], $row['user_colour'], $row['username']),			'MESSAGE_AUTHOR'			=> get_username_string('username', $author_id, $row['username'], $row['user_colour'], $row['username']),			'U_MESSAGE_AUTHOR'			=> get_username_string('profile', $author_id, $row['username'], $row['user_colour'], $row['username']),			'SUBJECT'			=> $subject,			'SENT_DATE'			=> $user->format_date($row['message_time']),			'MESSAGE'			=> $message,			'FOLDER'			=> implode(', ', $row['folder']),			'DECODED_MESSAGE'	=> $decoded_message,			'S_CURRENT_MSG'		=> ($row['msg_id'] == $msg_id),			'S_AUTHOR_DELETED'	=> ($author_id == ANONYMOUS) ? true : false,			'S_IN_POST_MODE'	=> $in_post_mode,			'MSG_ID'			=> $row['msg_id'],			'U_VIEW_MESSAGE'	=> "$url&amp;f=$folder_id&amp;p=" . $row['msg_id'],			'U_QUOTE'			=> (!$in_post_mode && $auth->acl_get('u_sendpm') && $author_id != ANONYMOUS) ? "$url&amp;mode=compose&amp;action=quote&amp;f=" . $folder_id . "&amp;p=" . $row['msg_id'] : '',			'U_POST_REPLY_PM'	=> ($author_id != $user->data['user_id'] && $author_id != ANONYMOUS && $auth->acl_get('u_sendpm')) ? "$url&amp;mode=compose&amp;action=reply&amp;f=$folder_id&amp;p=" . $row['msg_id'] : '')		);		unset($rowset[$i]);		$prev_id = $id;	}	$template->assign_vars(array(		'QUOTE_IMG'			=> $user->img('icon_post_quote', $user->lang['REPLY_WITH_QUOTE']),		'HISTORY_TITLE'		=> $title,		'U_VIEW_NEXT_HISTORY'		=> ($next_history_pm) ? "$url&amp;p=" . $next_history_pm : '',		'U_VIEW_PREVIOUS_HISTORY'	=> ($previous_history_pm) ? "$url&amp;p=" . $previous_history_pm : '',	));	return true;}/*** Set correct users max messages in PM folder.* If several group memberships define different amount of messages, the highest will be chosen.*/function set_user_message_limit(){	global $user, $db, $config;	// Get maximum about from user memberships - if it is 0, there is no limit set and we use the maximum value within the config.	$sql = 'SELECT MAX(g.group_message_limit) as max_message_limit		FROM ' . GROUPS_TABLE . ' g, ' . USER_GROUP_TABLE . ' ug		WHERE ug.user_id = ' . $user->data['user_id'] . '			AND ug.user_pending = 0			AND ug.group_id = g.group_id';	$result = $db->sql_query($sql);	$message_limit = (int) $db->sql_fetchfield('max_message_limit');	$db->sql_freeresult($result);	$user->data['message_limit'] = (!$message_limit) ? $config['pm_max_msgs'] : $message_limit;}/*** Generates an array of coloured recipient names from a list of PMs - (groups & users)** @param	array	$pm_by_id	An array of rows from PRIVMSGS_TABLE, keys are the msg_ids.** @return	array				2D Array: array(msg_id => array('username or group string', ...), ...)*								Usernames are generated with {@link get_username_string get_username_string}*								Groups are coloured and have a link to the membership page*/function get_recipient_strings($pm_by_id){	global $db, $phpbb_root_path, $phpEx, $user;	$address_list = $recipient_list = $address = array();	$_types = array('u', 'g');	foreach ($pm_by_id as $message_id => $row)	{		$address[$message_id] = rebuild_header(array('to' => $row['to_address'], 'bcc' => $row['bcc_address']));		foreach ($_types as $ug_type)		{			if (isset($address[$message_id][$ug_type]) && sizeof($address[$message_id][$ug_type]))			{				foreach ($address[$message_id][$ug_type] as $ug_id => $in_to)				{					$recipient_list[$ug_type][$ug_id] = array('name' => $user->lang['NA'], 'colour' => '');				}			}		}	}	foreach ($_types as $ug_type)	{		if (!empty($recipient_list[$ug_type]))		{			if ($ug_type == 'u')			{				$sql = 'SELECT user_id as id, username as name, user_colour as colour					FROM ' . USERS_TABLE . '					WHERE ';			}			else			{				$sql = 'SELECT group_id as id, group_name as name, group_colour as colour, group_type					FROM ' . GROUPS_TABLE . '					WHERE ';			}			$sql .= $db->sql_in_set(($ug_type == 'u') ? 'user_id' : 'group_id', array_map('intval', array_keys($recipient_list[$ug_type])));			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if ($ug_type == 'g')				{					$row['name'] = ($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['name']] : $row['name'];				}				$recipient_list[$ug_type][$row['id']] = array('name' => $row['name'], 'colour' => $row['colour']);			}			$db->sql_freeresult($result);		}	}	foreach ($address as $message_id => $adr_ary)	{		foreach ($adr_ary as $type => $id_ary)		{			foreach ($id_ary as $ug_id => $_id)			{				if ($type == 'u')				{					$address_list[$message_id][] = get_username_string('full', $ug_id, $recipient_list[$type][$ug_id]['name'], $recipient_list[$type][$ug_id]['colour']);				}				else				{					$user_colour = ($recipient_list[$type][$ug_id]['colour']) ? ' style="font-weight: bold; color:#' . $recipient_list[$type][$ug_id]['colour'] . '"' : '';					$link = '<a href="' . append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=group&amp;g=' . $ug_id) . '"' . $user_colour . '>';					$address_list[$message_id][] = $link . $recipient_list[$type][$ug_id]['name'] . (($link) ? '</a>' : '');				}			}		}	}	return $address_list;}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}// Common global functions/*** set_var** Set variable, used by {@link request_var the request_var function}** @access private*/function set_var(&$result, $var, $type, $multibyte = false){	settype($var, $type);	$result = $var;	if ($type == 'string')	{		$result = trim(htmlspecialchars(str_replace(array("\r\n", "\r", "\0"), array("\n", "\n", ''), $result), ENT_COMPAT, 'UTF-8'));		if (!empty($result))		{			// Make sure multibyte characters are wellformed			if ($multibyte)			{				if (!preg_match('/^./u', $result))				{					$result = '';				}			}			else			{				// no multibyte, allow only ASCII (0-127)				$result = preg_replace('/[\x80-\xFF]/', '?', $result);			}		}		$result = (STRIP) ? stripslashes($result) : $result;	}}/*** request_var** Used to get passed variable*/function request_var($var_name, $default, $multibyte = false, $cookie = false){	if (!$cookie && isset($_COOKIE[$var_name]))	{		if (!isset($_GET[$var_name]) && !isset($_POST[$var_name]))		{			return (is_array($default)) ? array() : $default;		}		$_REQUEST[$var_name] = isset($_POST[$var_name]) ? $_POST[$var_name] : $_GET[$var_name];	}	$super_global = ($cookie) ? '_COOKIE' : '_REQUEST';	if (!isset($GLOBALS[$super_global][$var_name]) || is_array($GLOBALS[$super_global][$var_name]) != is_array($default))	{		return (is_array($default)) ? array() : $default;	}	$var = $GLOBALS[$super_global][$var_name];	if (!is_array($default))	{		$type = gettype($default);	}	else	{		list($key_type, $type) = each($default);		$type = gettype($type);		$key_type = gettype($key_type);		if ($type == 'array')		{			reset($default);			$default = current($default);			list($sub_key_type, $sub_type) = each($default);			$sub_type = gettype($sub_type);			$sub_type = ($sub_type == 'array') ? 'NULL' : $sub_type;			$sub_key_type = gettype($sub_key_type);		}	}	if (is_array($var))	{		$_var = $var;		$var = array();		foreach ($_var as $k => $v)		{			set_var($k, $k, $key_type);			if ($type == 'array' && is_array($v))			{				foreach ($v as $_k => $_v)				{					if (is_array($_v))					{						$_v = null;					}					set_var($_k, $_k, $sub_key_type, $multibyte);					set_var($var[$k][$_k], $_v, $sub_type, $multibyte);				}			}			else			{				if ($type == 'array' || is_array($v))				{					$v = null;				}				set_var($var[$k], $v, $type, $multibyte);			}		}	}	else	{		set_var($var, $var, $type, $multibyte);	}	return $var;}/*** Set config value. Creates missing config entry.*/function set_config($config_name, $config_value, $is_dynamic = false){	global $db, $cache, $config;	$sql = 'UPDATE ' . CONFIG_TABLE . "		SET config_value = '" . $db->sql_escape($config_value) . "'		WHERE config_name = '" . $db->sql_escape($config_name) . "'";	$db->sql_query($sql);	if (!$db->sql_affectedrows() && !isset($config[$config_name]))	{		$sql = 'INSERT INTO ' . CONFIG_TABLE . ' ' . $db->sql_build_array('INSERT', array(			'config_name'	=> $config_name,			'config_value'	=> $config_value,			'is_dynamic'	=> ($is_dynamic) ? 1 : 0));		$db->sql_query($sql);	}	$config[$config_name] = $config_value;	if (!$is_dynamic)	{		$cache->destroy('config');	}}/*** Set dynamic config value with arithmetic operation.*/function set_config_count($config_name, $increment, $is_dynamic = false){	global $db, $cache;	switch ($db->sql_layer)	{		case 'firebird':			// Precision must be from 1 to 18			$sql_update = 'CAST(CAST(config_value as DECIMAL(18, 0)) + ' . (int) $increment . ' as VARCHAR(255))';		break;		case 'postgres':			// Need to cast to text first for PostgreSQL 7.x			$sql_update = 'CAST(CAST(config_value::text as DECIMAL(255, 0)) + ' . (int) $increment . ' as VARCHAR(255))';		break;		// MySQL, SQlite, mssql, mssql_odbc, oracle		default:			$sql_update = 'config_value + ' . (int) $increment;		break;	}	$db->sql_query('UPDATE ' . CONFIG_TABLE . ' SET config_value = ' . $sql_update . " WHERE config_name = '" . $db->sql_escape($config_name) . "'");	if (!$is_dynamic)	{		$cache->destroy('config');	}}/*** Generates an alphanumeric random string of given length** @return string*/function gen_rand_string($num_chars = 8){	// [a, z] + [0, 9] = 36	return substr(strtoupper(base_convert(unique_id(), 16, 36)), 0, $num_chars);}/*** Generates a user-friendly alphanumeric random string of given length* We remove 0 and O so users cannot confuse those in passwords etc.** @return string*/function gen_rand_string_friendly($num_chars = 8){	$rand_str = unique_id();	// Remove Z and Y from the base_convert(), replace 0 with Z and O with Y	// [a, z] + [0, 9] - {z, y} = [a, z] + [0, 9] - {0, o} = 34	$rand_str = str_replace(array('0', 'O'), array('Z', 'Y'), strtoupper(base_convert($rand_str, 16, 34)));	return substr($rand_str, 0, $num_chars);}/*** Return unique id* @param string $extra additional entropy*/function unique_id($extra = 'c'){	static $dss_seeded = false;	global $config;	$val = $config['rand_seed'] . microtime();	$val = md5($val);	$config['rand_seed'] = md5($config['rand_seed'] . $val . $extra);	if ($dss_seeded !== true && ($config['rand_seed_last_update'] < time() - rand(1,10)))	{		set_config('rand_seed_last_update', time(), true);		set_config('rand_seed', $config['rand_seed'], true);		$dss_seeded = true;	}	return substr($val, 4, 16);}/*** Wrapper for mt_rand() which allows swapping $min and $max parameters.** PHP does not allow us to swap the order of the arguments for mt_rand() anymore.* (since PHP 5.3.4, see http://bugs.php.net/46587)** @param int $min		Lowest value to be returned* @param int $max		Highest value to be returned** @return int			Random integer between $min and $max (or $max and $min)*/function phpbb_mt_rand($min, $max){	return ($min > $max) ? mt_rand($max, $min) : mt_rand($min, $max);}/*** Wrapper for getdate() which returns the equivalent array for UTC timestamps.** @param int $time		Unix timestamp (optional)** @return array			Returns an associative array of information related to the timestamp.*						See http://www.php.net/manual/en/function.getdate.php*/function phpbb_gmgetdate($time = false){	if ($time === false)	{		$time = time();	}	// getdate() interprets timestamps in local time.	// What follows uses the fact that getdate() and	// date('Z') balance each other out.	return getdate($time - date('Z'));}/*** Return formatted string for filesizes** @param int	$value			filesize in bytes* @param bool	$string_only	true if language string should be returned* @param array	$allowed_units	only allow these units (data array indexes)** @return mixed					data array if $string_only is false* @author bantu*/function get_formatted_filesize($value, $string_only = true, $allowed_units = false){	global $user;	$available_units = array(		'gb' => array(			'min' 		=> 1073741824, // pow(2, 30)			'index'		=> 3,			'si_unit'	=> 'GB',			'iec_unit'	=> 'GIB',		),		'mb' => array(			'min'		=> 1048576, // pow(2, 20)			'index'		=> 2,			'si_unit'	=> 'MB',			'iec_unit'	=> 'MIB',		),		'kb' => array(			'min'		=> 1024, // pow(2, 10)			'index'		=> 1,			'si_unit'	=> 'KB',			'iec_unit'	=> 'KIB',		),		'b' => array(			'min'		=> 0,			'index'		=> 0,			'si_unit'	=> 'BYTES', // Language index			'iec_unit'	=> 'BYTES',  // Language index		),	);	foreach ($available_units as $si_identifier => $unit_info)	{		if (!empty($allowed_units) && $si_identifier != 'b' && !in_array($si_identifier, $allowed_units))		{			continue;		}		if ($value >= $unit_info['min'])		{			$unit_info['si_identifier'] = $si_identifier;			break;		}	}	unset($available_units);	for ($i = 0; $i < $unit_info['index']; $i++)	{		$value /= 1024;	}	$value = round($value, 2);	// Lookup units in language dictionary	$unit_info['si_unit'] = (isset($user->lang[$unit_info['si_unit']])) ? $user->lang[$unit_info['si_unit']] : $unit_info['si_unit'];	$unit_info['iec_unit'] = (isset($user->lang[$unit_info['iec_unit']])) ? $user->lang[$unit_info['iec_unit']] : $unit_info['iec_unit'];	// Default to IEC	$unit_info['unit'] = $unit_info['iec_unit'];	if (!$string_only)	{		$unit_info['value'] = $value;		return $unit_info;	}	return $value  . ' ' . $unit_info['unit'];}/*** Determine whether we are approaching the maximum execution time. Should be called once* at the beginning of the script in which it's used.* @return	bool	Either true if the maximum execution time is nearly reached, or false*					if some time is still left.*/function still_on_time($extra_time = 15){	static $max_execution_time, $start_time;	$time = explode(' ', microtime());	$current_time = $time[0] + $time[1];	if (empty($max_execution_time))	{		$max_execution_time = (function_exists('ini_get')) ? (int) @ini_get('max_execution_time') : (int) @get_cfg_var('max_execution_time');		// If zero, then set to something higher to not let the user catch the ten seconds barrier.		if ($max_execution_time === 0)		{			$max_execution_time = 50 + $extra_time;		}		$max_execution_time = min(max(10, ($max_execution_time - $extra_time)), 50);		// For debugging purposes		// $max_execution_time = 10;		global $starttime;		$start_time = (empty($starttime)) ? $current_time : $starttime;	}	return (ceil($current_time - $start_time) < $max_execution_time) ? true : false;}/**** @version Version 0.1 / slightly modified for phpBB 3.0.x (using $H$ as hash type identifier)** Portable PHP password hashing framework.** Written by Solar Designer <solar at openwall.com> in 2004-2006 and placed in* the public domain.** There's absolutely no warranty.** The homepage URL for this framework is:**	http://www.openwall.com/phpass/** Please be sure to update the Version line if you edit this file in any way.* It is suggested that you leave the main version number intact, but indicate* your project name (after the slash) and add your own revision information.** Please do not change the "private" password hashing method implemented in* here, thereby making your hashes incompatible.  However, if you must, please* change the hash type identifier (the "$P$") to something different.** Obviously, since this code is in the public domain, the above are not* requirements (there can be none), but merely suggestions.*** Hash the password*/function phpbb_hash($password){	$itoa64 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';	$random_state = unique_id();	$random = '';	$count = 6;	if (($fh = @fopen('/dev/urandom', 'rb')))	{		$random = fread($fh, $count);		fclose($fh);	}	if (strlen($random) < $count)	{		$random = '';		for ($i = 0; $i < $count; $i += 16)		{			$random_state = md5(unique_id() . $random_state);			$random .= pack('H*', md5($random_state));		}		$random = substr($random, 0, $count);	}	$hash = _hash_crypt_private($password, _hash_gensalt_private($random, $itoa64), $itoa64);	if (strlen($hash) == 34)	{		return $hash;	}	return md5($password);}/*** Check for correct password** @param string $password The password in plain text* @param string $hash The stored password hash** @return bool Returns true if the password is correct, false if not.*/function phpbb_check_hash($password, $hash){	$itoa64 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';	if (strlen($hash) == 34)	{		return (_hash_crypt_private($password, $hash, $itoa64) === $hash) ? true : false;	}	return (md5($password) === $hash) ? true : false;}/*** Generate salt for hash generation*/function _hash_gensalt_private($input, &$itoa64, $iteration_count_log2 = 6){	if ($iteration_count_log2 < 4 || $iteration_count_log2 > 31)	{		$iteration_count_log2 = 8;	}	$output = '$H$';	$output .= $itoa64[min($iteration_count_log2 + ((PHP_VERSION >= 5) ? 5 : 3), 30)];	$output .= _hash_encode64($input, 6, $itoa64);	return $output;}/*** Encode hash*/function _hash_encode64($input, $count, &$itoa64){	$output = '';	$i = 0;	do	{		$value = ord($input[$i++]);		$output .= $itoa64[$value & 0x3f];		if ($i < $count)		{			$value |= ord($input[$i]) << 8;		}		$output .= $itoa64[($value >> 6) & 0x3f];		if ($i++ >= $count)		{			break;		}		if ($i < $count)		{			$value |= ord($input[$i]) << 16;		}		$output .= $itoa64[($value >> 12) & 0x3f];		if ($i++ >= $count)		{			break;		}		$output .= $itoa64[($value >> 18) & 0x3f];	}	while ($i < $count);	return $output;}/*** The crypt function/replacement*/function _hash_crypt_private($password, $setting, &$itoa64){	$output = '*';	// Check for correct hash	if (substr($setting, 0, 3) != '$H$' && substr($setting, 0, 3) != '$P$')	{		return $output;	}	$count_log2 = strpos($itoa64, $setting[3]);	if ($count_log2 < 7 || $count_log2 > 30)	{		return $output;	}	$count = 1 << $count_log2;	$salt = substr($setting, 4, 8);	if (strlen($salt) != 8)	{		return $output;	}	/**	* We're kind of forced to use MD5 here since it's the only	* cryptographic primitive available in all versions of PHP	* currently in use.  To implement our own low-level crypto	* in PHP would result in much worse performance and	* consequently in lower iteration counts and hashes that are	* quicker to crack (by non-PHP code).	*/	if (PHP_VERSION >= 5)	{		$hash = md5($salt . $password, true);		do		{			$hash = md5($hash . $password, true);		}		while (--$count);	}	else	{		$hash = pack('H*', md5($salt . $password));		do		{			$hash = pack('H*', md5($hash . $password));		}		while (--$count);	}	$output = substr($setting, 0, 12);	$output .= _hash_encode64($hash, 16, $itoa64);	return $output;}/*** Hashes an email address to a big integer** @param string $email		Email address** @return string			Unsigned Big Integer*/function phpbb_email_hash($email){	return sprintf('%u', crc32(strtolower($email))) . strlen($email);}/*** Wrapper for version_compare() that allows using uppercase A and B* for alpha and beta releases.** See http://www.php.net/manual/en/function.version-compare.php** @param string $version1		First version number* @param string $version2		Second version number* @param string $operator		Comparison operator (optional)** @return mixed					Boolean (true, false) if comparison operator is specified.*								Integer (-1, 0, 1) otherwise.*/function phpbb_version_compare($version1, $version2, $operator = null){	$version1 = strtolower($version1);	$version2 = strtolower($version2);	if (is_null($operator))	{		return version_compare($version1, $version2);	}	else	{		return version_compare($version1, $version2, $operator);	}}/*** Global function for chmodding directories and files for internal use** This function determines owner and group whom the file belongs to and user and group of PHP and then set safest possible file permissions.* The function determines owner and group from common.php file and sets the same to the provided file.* The function uses bit fields to build the permissions.* The function sets the appropiate execute bit on directories.** Supported constants representing bit fields are:** CHMOD_ALL - all permissions (7)* CHMOD_READ - read permission (4)* CHMOD_WRITE - write permission (2)* CHMOD_EXECUTE - execute permission (1)** NOTE: The function uses POSIX extension and fileowner()/filegroup() functions. If any of them is disabled, this function tries to build proper permissions, by calling is_readable() and is_writable() functions.** @param string	$filename	The file/directory to be chmodded* @param int	$perms		Permissions to set** @return bool	true on success, otherwise false* @author faw, phpBB Group*/function phpbb_chmod($filename, $perms = CHMOD_READ){	static $_chmod_info;	// Return if the file no longer exists.	if (!file_exists($filename))	{		return false;	}	// Determine some common vars	if (empty($_chmod_info))	{		if (!function_exists('fileowner') || !function_exists('filegroup'))		{			// No need to further determine owner/group - it is unknown			$_chmod_info['process'] = false;		}		else		{			global $phpbb_root_path, $phpEx;			// Determine owner/group of common.php file and the filename we want to change here			$common_php_owner = @fileowner($phpbb_root_path . 'common.' . $phpEx);			$common_php_group = @filegroup($phpbb_root_path . 'common.' . $phpEx);			// And the owner and the groups PHP is running under.			$php_uid = (function_exists('posix_getuid')) ? @posix_getuid() : false;			$php_gids = (function_exists('posix_getgroups')) ? @posix_getgroups() : false;			// If we are unable to get owner/group, then do not try to set them by guessing			if (!$php_uid || empty($php_gids) || !$common_php_owner || !$common_php_group)			{				$_chmod_info['process'] = false;			}			else			{				$_chmod_info = array(					'process'		=> true,					'common_owner'	=> $common_php_owner,					'common_group'	=> $common_php_group,					'php_uid'		=> $php_uid,					'php_gids'		=> $php_gids,				);			}		}	}	if ($_chmod_info['process'])	{		$file_uid = @fileowner($filename);		$file_gid = @filegroup($filename);		// Change owner		if (@chown($filename, $_chmod_info['common_owner']))		{			clearstatcache();			$file_uid = @fileowner($filename);		}		// Change group		if (@chgrp($filename, $_chmod_info['common_group']))		{			clearstatcache();			$file_gid = @filegroup($filename);		}		// If the file_uid/gid now match the one from common.php we can process further, else we are not able to change something		if ($file_uid != $_chmod_info['common_owner'] || $file_gid != $_chmod_info['common_group'])		{			$_chmod_info['process'] = false;		}	}	// Still able to process?	if ($_chmod_info['process'])	{		if ($file_uid == $_chmod_info['php_uid'])		{			$php = 'owner';		}		else if (in_array($file_gid, $_chmod_info['php_gids']))		{			$php = 'group';		}		else		{			// Since we are setting the everyone bit anyway, no need to do expensive operations			$_chmod_info['process'] = false;		}	}	// We are not able to determine or change something	if (!$_chmod_info['process'])	{		$php = 'other';	}	// Owner always has read/write permission	$owner = CHMOD_READ | CHMOD_WRITE;	if (is_dir($filename))	{		$owner |= CHMOD_EXECUTE;		// Only add execute bit to the permission if the dir needs to be readable		if ($perms & CHMOD_READ)		{			$perms |= CHMOD_EXECUTE;		}	}	switch ($php)	{		case 'owner':			$result = @chmod($filename, ($owner << 6) + (0 << 3) + (0 << 0));			clearstatcache();			if (is_readable($filename) && phpbb_is_writable($filename))			{				break;			}		case 'group':			$result = @chmod($filename, ($owner << 6) + ($perms << 3) + (0 << 0));			clearstatcache();			if ((!($perms & CHMOD_READ) || is_readable($filename)) && (!($perms & CHMOD_WRITE) || phpbb_is_writable($filename)))			{				break;			}		case 'other':			$result = @chmod($filename, ($owner << 6) + ($perms << 3) + ($perms << 0));			clearstatcache();			if ((!($perms & CHMOD_READ) || is_readable($filename)) && (!($perms & CHMOD_WRITE) || phpbb_is_writable($filename)))			{				break;			}		default:			return false;		break;	}	return $result;}/*** Test if a file/directory is writable** This function calls the native is_writable() when not running under* Windows and it is not disabled.** @param string $file Path to perform write test on* @return bool True when the path is writable, otherwise false.*/function phpbb_is_writable($file){	if (strtolower(substr(PHP_OS, 0, 3)) === 'win' || !function_exists('is_writable'))	{		if (file_exists($file))		{			// Canonicalise path to absolute path			$file = phpbb_realpath($file);			if (is_dir($file))			{				// Test directory by creating a file inside the directory				$result = @tempnam($file, 'i_w');				if (is_string($result) && file_exists($result))				{					unlink($result);					// Ensure the file is actually in the directory (returned realpathed)					return (strpos($result, $file) === 0) ? true : false;				}			}			else			{				$handle = @fopen($file, 'r+');				if (is_resource($handle))				{					fclose($handle);					return true;				}			}		}		else		{			// file does not exist test if we can write to the directory			$dir = dirname($file);			if (file_exists($dir) && is_dir($dir) && phpbb_is_writable($dir))			{				return true;			}		}		return false;	}	else	{		return is_writable($file);	}}// Compatibility functionsif (!function_exists('array_combine')){	/**	* A wrapper for the PHP5 function array_combine()	* @param array $keys contains keys for the resulting array	* @param array $values contains values for the resulting array	*	* @return Returns an array by using the values from the keys array as keys and the	* 	values from the values array as the corresponding values. Returns false if the	* 	number of elements for each array isn't equal or if the arrays are empty.	*/	function array_combine($keys, $values)	{		$keys = array_values($keys);		$values = array_values($values);		$n = sizeof($keys);		$m = sizeof($values);		if (!$n || !$m || ($n != $m))		{			return false;		}		$combined = array();		for ($i = 0; $i < $n; $i++)		{			$combined[$keys[$i]] = $values[$i];		}		return $combined;	}}if (!function_exists('str_split')){	/**	* A wrapper for the PHP5 function str_split()	* @param array $string contains the string to be converted	* @param array $split_length contains the length of each chunk	*	* @return  Converts a string to an array. If the optional split_length parameter is specified,	*  	the returned array will be broken down into chunks with each being split_length in length,	*  	otherwise each chunk will be one character in length. FALSE is returned if split_length is	*  	less than 1. If the split_length length exceeds the length of string, the entire string is	*  	returned as the first (and only) array element.	*/	function str_split($string, $split_length = 1)	{		if ($split_length < 1)		{			return false;		}		else if ($split_length >= strlen($string))		{			return array($string);		}		else		{			preg_match_all('#.{1,' . $split_length . '}#s', $string, $matches);			return $matches[0];		}	}}if (!function_exists('stripos')){	/**	* A wrapper for the PHP5 function stripos	* Find position of first occurrence of a case-insensitive string	*	* @param string $haystack is the string to search in	* @param string $needle is the string to search for	*	* @return mixed Returns the numeric position of the first occurrence of needle in the haystack string. Unlike strpos(), stripos() is case-insensitive.	* Note that the needle may be a string of one or more characters.	* If needle is not found, stripos() will return boolean FALSE.	*/	function stripos($haystack, $needle)	{		if (preg_match('#' . preg_quote($needle, '#') . '#i', $haystack, $m))		{			return strpos($haystack, $m[0]);		}		return false;	}}/*** Checks if a path ($path) is absolute or relative** @param string $path Path to check absoluteness of* @return boolean*/function is_absolute($path){	return ($path[0] == '/' || (DIRECTORY_SEPARATOR == '\\' && preg_match('#^[a-z]:[/\\\]#i', $path))) ? true : false;}/*** @author Chris Smith <chris@project-minerva.org>* @copyright 2006 Project Minerva Team* @param string $path The path which we should attempt to resolve.* @return mixed*/function phpbb_own_realpath($path){	// Now to perform funky shizzle	// Switch to use UNIX slashes	$path = str_replace(DIRECTORY_SEPARATOR, '/', $path);	$path_prefix = '';	// Determine what sort of path we have	if (is_absolute($path))	{		$absolute = true;		if ($path[0] == '/')		{			// Absolute path, *NIX style			$path_prefix = '';		}		else		{			// Absolute path, Windows style			// Remove the drive letter and colon			$path_prefix = $path[0] . ':';			$path = substr($path, 2);		}	}	else	{		// Relative Path		// Prepend the current working directory		if (function_exists('getcwd'))		{			// This is the best method, hopefully it is enabled!			$path = str_replace(DIRECTORY_SEPARATOR, '/', getcwd()) . '/' . $path;			$absolute = true;			if (preg_match('#^[a-z]:#i', $path))			{				$path_prefix = $path[0] . ':';				$path = substr($path, 2);			}			else			{				$path_prefix = '';			}		}		else if (isset($_SERVER['SCRIPT_FILENAME']) && !empty($_SERVER['SCRIPT_FILENAME']))		{			// Warning: If chdir() has been used this will lie!			// Warning: This has some problems sometime (CLI can create them easily)			$path = str_replace(DIRECTORY_SEPARATOR, '/', dirname($_SERVER['SCRIPT_FILENAME'])) . '/' . $path;			$absolute = true;			$path_prefix = '';		}		else		{			// We have no way of getting the absolute path, just run on using relative ones.			$absolute = false;			$path_prefix = '.';		}	}	// Remove any repeated slashes	$path = preg_replace('#/{2,}#', '/', $path);	// Remove the slashes from the start and end of the path	$path = trim($path, '/');	// Break the string into little bits for us to nibble on	$bits = explode('/', $path);	// Remove any . in the path, renumber array for the loop below	$bits = array_values(array_diff($bits, array('.')));	// Lets get looping, run over and resolve any .. (up directory)	for ($i = 0, $max = sizeof($bits); $i < $max; $i++)	{		// @todo Optimise		if ($bits[$i] == '..' )		{			if (isset($bits[$i - 1]))			{				if ($bits[$i - 1] != '..')				{					// We found a .. and we are able to traverse upwards, lets do it!					unset($bits[$i]);					unset($bits[$i - 1]);					$i -= 2;					$max -= 2;					$bits = array_values($bits);				}			}			else if ($absolute) // ie. !isset($bits[$i - 1]) && $absolute			{				// We have an absolute path trying to descend above the root of the filesystem				// ... Error!				return false;			}		}	}	// Prepend the path prefix	array_unshift($bits, $path_prefix);	$resolved = '';	$max = sizeof($bits) - 1;	// Check if we are able to resolve symlinks, Windows cannot.	$symlink_resolve = (function_exists('readlink')) ? true : false;	foreach ($bits as $i => $bit)	{		if (@is_dir("$resolved/$bit") || ($i == $max && @is_file("$resolved/$bit")))		{			// Path Exists			if ($symlink_resolve && is_link("$resolved/$bit") && ($link = readlink("$resolved/$bit")))			{				// Resolved a symlink.				$resolved = $link . (($i == $max) ? '' : '/');				continue;			}		}		else		{			// Something doesn't exist here!			// This is correct realpath() behaviour but sadly open_basedir and safe_mode make this problematic			// return false;		}		$resolved .= $bit . (($i == $max) ? '' : '/');	}	// @todo If the file exists fine and open_basedir only has one path we should be able to prepend it	// because we must be inside that basedir, the question is where...	// @internal The slash in is_dir() gets around an open_basedir restriction	if (!@file_exists($resolved) || (!@is_dir($resolved . '/') && !is_file($resolved)))	{		return false;	}	// Put the slashes back to the native operating systems slashes	$resolved = str_replace('/', DIRECTORY_SEPARATOR, $resolved);	// Check for DIRECTORY_SEPARATOR at the end (and remove it!)	if (substr($resolved, -1) == DIRECTORY_SEPARATOR)	{		return substr($resolved, 0, -1);	}	return $resolved; // We got here, in the end!}if (!function_exists('realpath')){	/**	* A wrapper for realpath	* @ignore	*/	function phpbb_realpath($path)	{		return phpbb_own_realpath($path);	}}else{	/**	* A wrapper for realpath	*/	function phpbb_realpath($path)	{		$realpath = realpath($path);		// Strangely there are provider not disabling realpath but returning strange values. :o		// We at least try to cope with them.		if ($realpath === $path || $realpath === false)		{			return phpbb_own_realpath($path);		}		// Check for DIRECTORY_SEPARATOR at the end (and remove it!)		if (substr($realpath, -1) == DIRECTORY_SEPARATOR)		{			$realpath = substr($realpath, 0, -1);		}		return $realpath;	}}if (!function_exists('htmlspecialchars_decode')){	/**	* A wrapper for htmlspecialchars_decode	* @ignore	*/	function htmlspecialchars_decode($string, $quote_style = ENT_COMPAT)	{		return strtr($string, array_flip(get_html_translation_table(HTML_SPECIALCHARS, $quote_style)));	}}// functions used for building option fields/*** Pick a language, any language ...*/function language_select($default = ''){	global $db;	$sql = 'SELECT lang_iso, lang_local_name		FROM ' . LANG_TABLE . '		ORDER BY lang_english_name';	$result = $db->sql_query($sql);	$lang_options = '';	while ($row = $db->sql_fetchrow($result))	{		$selected = ($row['lang_iso'] == $default) ? ' selected="selected"' : '';		$lang_options .= '<option value="' . $row['lang_iso'] . '"' . $selected . '>' . $row['lang_local_name'] . '</option>';	}	$db->sql_freeresult($result);	return $lang_options;}/*** Pick a template/theme combo,*/function style_select($default = '', $all = false){	global $db;	$sql_where = (!$all) ? 'WHERE style_active = 1 ' : '';	$sql = 'SELECT style_id, style_name		FROM ' . STYLES_TABLE . "		$sql_where		ORDER BY style_name";	$result = $db->sql_query($sql);	$style_options = '';	while ($row = $db->sql_fetchrow($result))	{		$selected = ($row['style_id'] == $default) ? ' selected="selected"' : '';		$style_options .= '<option value="' . $row['style_id'] . '"' . $selected . '>' . $row['style_name'] . '</option>';	}	$db->sql_freeresult($result);	return $style_options;}/*** Pick a timezone*/function tz_select($default = '', $truncate = false){	global $user;	$tz_select = '';	foreach ($user->lang['tz_zones'] as $offset => $zone)	{		if ($truncate)		{			$zone_trunc = truncate_string($zone, 50, 255, false, '...');		}		else		{			$zone_trunc = $zone;		}		if (is_numeric($offset))		{			$selected = ($offset == $default) ? ' selected="selected"' : '';			$tz_select .= '<option title="' . $zone . '" value="' . $offset . '"' . $selected . '>' . $zone_trunc . '</option>';		}	}	return $tz_select;}// Functions handling topic/post tracking/marking/*** Marks a topic/forum as read* Marks a topic as posted to** @param int $user_id can only be used with $mode == 'post'*/function markread($mode, $forum_id = false, $topic_id = false, $post_time = 0, $user_id = 0){	global $db, $user, $config;	if ($mode == 'all')	{		if ($forum_id === false || !sizeof($forum_id))		{			if ($config['load_db_lastread'] && $user->data['is_registered'])			{				// Mark all forums read (index page)				$db->sql_query('DELETE FROM ' . TOPICS_TRACK_TABLE . " WHERE user_id = {$user->data['user_id']}");				$db->sql_query('DELETE FROM ' . FORUMS_TRACK_TABLE . " WHERE user_id = {$user->data['user_id']}");				$db->sql_query('UPDATE ' . USERS_TABLE . ' SET user_lastmark = ' . time() . " WHERE user_id = {$user->data['user_id']}");			}			else if ($config['load_anon_lastread'] || $user->data['is_registered'])			{				$tracking_topics = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';				$tracking_topics = ($tracking_topics) ? tracking_unserialize($tracking_topics) : array();				unset($tracking_topics['tf']);				unset($tracking_topics['t']);				unset($tracking_topics['f']);				$tracking_topics['l'] = base_convert(time() - $config['board_startdate'], 10, 36);				$user->set_cookie('track', tracking_serialize($tracking_topics), time() + 31536000);				$_COOKIE[$config['cookie_name'] . '_track'] = (STRIP) ? addslashes(tracking_serialize($tracking_topics)) : tracking_serialize($tracking_topics);				unset($tracking_topics);				if ($user->data['is_registered'])				{					$db->sql_query('UPDATE ' . USERS_TABLE . ' SET user_lastmark = ' . time() . " WHERE user_id = {$user->data['user_id']}");				}			}		}		return;	}	else if ($mode == 'topics')	{		// Mark all topics in forums read		if (!is_array($forum_id))		{			$forum_id = array($forum_id);		}		// Add 0 to forums array to mark global announcements correctly		// $forum_id[] = 0;		if ($config['load_db_lastread'] && $user->data['is_registered'])		{			$sql = 'DELETE FROM ' . TOPICS_TRACK_TABLE . "				WHERE user_id = {$user->data['user_id']}					AND " . $db->sql_in_set('forum_id', $forum_id);			$db->sql_query($sql);			$sql = 'SELECT forum_id				FROM ' . FORUMS_TRACK_TABLE . "				WHERE user_id = {$user->data['user_id']}					AND " . $db->sql_in_set('forum_id', $forum_id);			$result = $db->sql_query($sql);			$sql_update = array();			while ($row = $db->sql_fetchrow($result))			{				$sql_update[] = (int) $row['forum_id'];			}			$db->sql_freeresult($result);			if (sizeof($sql_update))			{				$sql = 'UPDATE ' . FORUMS_TRACK_TABLE . '					SET mark_time = ' . time() . "					WHERE user_id = {$user->data['user_id']}						AND " . $db->sql_in_set('forum_id', $sql_update);				$db->sql_query($sql);			}			if ($sql_insert = array_diff($forum_id, $sql_update))			{				$sql_ary = array();				foreach ($sql_insert as $f_id)				{					$sql_ary[] = array(						'user_id'	=> (int) $user->data['user_id'],						'forum_id'	=> (int) $f_id,						'mark_time'	=> time()					);				}				$db->sql_multi_insert(FORUMS_TRACK_TABLE, $sql_ary);			}		}		else if ($config['load_anon_lastread'] || $user->data['is_registered'])		{			$tracking = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';			$tracking = ($tracking) ? tracking_unserialize($tracking) : array();			foreach ($forum_id as $f_id)			{				$topic_ids36 = (isset($tracking['tf'][$f_id])) ? $tracking['tf'][$f_id] : array();				if (isset($tracking['tf'][$f_id]))				{					unset($tracking['tf'][$f_id]);				}				foreach ($topic_ids36 as $topic_id36)				{					unset($tracking['t'][$topic_id36]);				}				if (isset($tracking['f'][$f_id]))				{					unset($tracking['f'][$f_id]);				}				$tracking['f'][$f_id] = base_convert(time() - $config['board_startdate'], 10, 36);			}			if (isset($tracking['tf']) && empty($tracking['tf']))			{				unset($tracking['tf']);			}			$user->set_cookie('track', tracking_serialize($tracking), time() + 31536000);			$_COOKIE[$config['cookie_name'] . '_track'] = (STRIP) ? addslashes(tracking_serialize($tracking)) : tracking_serialize($tracking);			unset($tracking);		}		return;	}	else if ($mode == 'topic')	{		if ($topic_id === false || $forum_id === false)		{			return;		}		if ($config['load_db_lastread'] && $user->data['is_registered'])		{			$sql = 'UPDATE ' . TOPICS_TRACK_TABLE . '				SET mark_time = ' . (($post_time) ? $post_time : time()) . "				WHERE user_id = {$user->data['user_id']}					AND topic_id = $topic_id";			$db->sql_query($sql);			// insert row			if (!$db->sql_affectedrows())			{				$db->sql_return_on_error(true);				$sql_ary = array(					'user_id'		=> (int) $user->data['user_id'],					'topic_id'		=> (int) $topic_id,					'forum_id'		=> (int) $forum_id,					'mark_time'		=> ($post_time) ? (int) $post_time : time(),				);				$db->sql_query('INSERT INTO ' . TOPICS_TRACK_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));				$db->sql_return_on_error(false);			}		}		else if ($config['load_anon_lastread'] || $user->data['is_registered'])		{			$tracking = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';			$tracking = ($tracking) ? tracking_unserialize($tracking) : array();			$topic_id36 = base_convert($topic_id, 10, 36);			if (!isset($tracking['t'][$topic_id36]))			{				$tracking['tf'][$forum_id][$topic_id36] = true;			}			$post_time = ($post_time) ? $post_time : time();			$tracking['t'][$topic_id36] = base_convert($post_time - $config['board_startdate'], 10, 36);			// If the cookie grows larger than 10000 characters we will remove the smallest value			// This can result in old topics being unread - but most of the time it should be accurate...			if (isset($_COOKIE[$config['cookie_name'] . '_track']) && strlen($_COOKIE[$config['cookie_name'] . '_track']) > 10000)			{				//echo 'Cookie grown too large' . print_r($tracking, true);				// We get the ten most minimum stored time offsets and its associated topic ids				$time_keys = array();				for ($i = 0; $i < 10 && sizeof($tracking['t']); $i++)				{					$min_value = min($tracking['t']);					$m_tkey = array_search($min_value, $tracking['t']);					unset($tracking['t'][$m_tkey]);					$time_keys[$m_tkey] = $min_value;				}				// Now remove the topic ids from the array...				foreach ($tracking['tf'] as $f_id => $topic_id_ary)				{					foreach ($time_keys as $m_tkey => $min_value)					{						if (isset($topic_id_ary[$m_tkey]))						{							$tracking['f'][$f_id] = $min_value;							unset($tracking['tf'][$f_id][$m_tkey]);						}					}				}				if ($user->data['is_registered'])				{					$user->data['user_lastmark'] = intval(base_convert(max($time_keys) + $config['board_startdate'], 36, 10));					$db->sql_query('UPDATE ' . USERS_TABLE . ' SET user_lastmark = ' . $user->data['user_lastmark'] . " WHERE user_id = {$user->data['user_id']}");				}				else				{					$tracking['l'] = max($time_keys);				}			}			$user->set_cookie('track', tracking_serialize($tracking), time() + 31536000);			$_COOKIE[$config['cookie_name'] . '_track'] = (STRIP) ? addslashes(tracking_serialize($tracking)) : tracking_serialize($tracking);		}		return;	}	else if ($mode == 'post')	{		if ($topic_id === false)		{			return;		}		$use_user_id = (!$user_id) ? $user->data['user_id'] : $user_id;		if ($config['load_db_track'] && $use_user_id != ANONYMOUS)		{			$db->sql_return_on_error(true);			$sql_ary = array(				'user_id'		=> (int) $use_user_id,				'topic_id'		=> (int) $topic_id,				'topic_posted'	=> 1			);			$db->sql_query('INSERT INTO ' . TOPICS_POSTED_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));			$db->sql_return_on_error(false);		}		return;	}}/*** Get topic tracking info by using already fetched info*/function get_topic_tracking($forum_id, $topic_ids, &$rowset, $forum_mark_time, $global_announce_list = false){	global $config, $user;	$last_read = array();	if (!is_array($topic_ids))	{		$topic_ids = array($topic_ids);	}	foreach ($topic_ids as $topic_id)	{		if (!empty($rowset[$topic_id]['mark_time']))		{			$last_read[$topic_id] = $rowset[$topic_id]['mark_time'];		}	}	$topic_ids = array_diff($topic_ids, array_keys($last_read));	if (sizeof($topic_ids))	{		$mark_time = array();		// Get global announcement info		if ($global_announce_list && sizeof($global_announce_list))		{			if (!isset($forum_mark_time[0]))			{				global $db;				$sql = 'SELECT mark_time					FROM ' . FORUMS_TRACK_TABLE . "					WHERE user_id = {$user->data['user_id']}						AND forum_id = 0";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if ($row)				{					$mark_time[0] = $row['mark_time'];				}			}			else			{				if ($forum_mark_time[0] !== false)				{					$mark_time[0] = $forum_mark_time[0];				}			}		}		if (!empty($forum_mark_time[$forum_id]) && $forum_mark_time[$forum_id] !== false)		{			$mark_time[$forum_id] = $forum_mark_time[$forum_id];		}		$user_lastmark = (isset($mark_time[$forum_id])) ? $mark_time[$forum_id] : $user->data['user_lastmark'];		foreach ($topic_ids as $topic_id)		{			if ($global_announce_list && isset($global_announce_list[$topic_id]))			{				$last_read[$topic_id] = (isset($mark_time[0])) ? $mark_time[0] : $user_lastmark;			}			else			{				$last_read[$topic_id] = $user_lastmark;			}		}	}	return $last_read;}/*** Get topic tracking info from db (for cookie based tracking only this function is used)*/function get_complete_topic_tracking($forum_id, $topic_ids, $global_announce_list = false){	global $config, $user;	$last_read = array();	if (!is_array($topic_ids))	{		$topic_ids = array($topic_ids);	}	if ($config['load_db_lastread'] && $user->data['is_registered'])	{		global $db;		$sql = 'SELECT topic_id, mark_time			FROM ' . TOPICS_TRACK_TABLE . "			WHERE user_id = {$user->data['user_id']}				AND " . $db->sql_in_set('topic_id', $topic_ids);		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$last_read[$row['topic_id']] = $row['mark_time'];		}		$db->sql_freeresult($result);		$topic_ids = array_diff($topic_ids, array_keys($last_read));		if (sizeof($topic_ids))		{			$sql = 'SELECT forum_id, mark_time				FROM ' . FORUMS_TRACK_TABLE . "				WHERE user_id = {$user->data['user_id']}					AND forum_id " .					(($global_announce_list && sizeof($global_announce_list)) ? "IN (0, $forum_id)" : "= $forum_id");			$result = $db->sql_query($sql);			$mark_time = array();			while ($row = $db->sql_fetchrow($result))			{				$mark_time[$row['forum_id']] = $row['mark_time'];			}			$db->sql_freeresult($result);			$user_lastmark = (isset($mark_time[$forum_id])) ? $mark_time[$forum_id] : $user->data['user_lastmark'];			foreach ($topic_ids as $topic_id)			{				if ($global_announce_list && isset($global_announce_list[$topic_id]))				{					$last_read[$topic_id] = (isset($mark_time[0])) ? $mark_time[0] : $user_lastmark;				}				else				{					$last_read[$topic_id] = $user_lastmark;				}			}		}	}	else if ($config['load_anon_lastread'] || $user->data['is_registered'])	{		global $tracking_topics;		if (!isset($tracking_topics) || !sizeof($tracking_topics))		{			$tracking_topics = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';			$tracking_topics = ($tracking_topics) ? tracking_unserialize($tracking_topics) : array();		}		if (!$user->data['is_registered'])		{			$user_lastmark = (isset($tracking_topics['l'])) ? base_convert($tracking_topics['l'], 36, 10) + $config['board_startdate'] : 0;		}		else		{			$user_lastmark = $user->data['user_lastmark'];		}		foreach ($topic_ids as $topic_id)		{			$topic_id36 = base_convert($topic_id, 10, 36);			if (isset($tracking_topics['t'][$topic_id36]))			{				$last_read[$topic_id] = base_convert($tracking_topics['t'][$topic_id36], 36, 10) + $config['board_startdate'];			}		}		$topic_ids = array_diff($topic_ids, array_keys($last_read));		if (sizeof($topic_ids))		{			$mark_time = array();			if ($global_announce_list && sizeof($global_announce_list))			{				if (isset($tracking_topics['f'][0]))				{					$mark_time[0] = base_convert($tracking_topics['f'][0], 36, 10) + $config['board_startdate'];				}			}			if (isset($tracking_topics['f'][$forum_id]))			{				$mark_time[$forum_id] = base_convert($tracking_topics['f'][$forum_id], 36, 10) + $config['board_startdate'];			}			$user_lastmark = (isset($mark_time[$forum_id])) ? $mark_time[$forum_id] : $user_lastmark;			foreach ($topic_ids as $topic_id)			{				if ($global_announce_list && isset($global_announce_list[$topic_id]))				{					$last_read[$topic_id] = (isset($mark_time[0])) ? $mark_time[0] : $user_lastmark;				}				else				{					$last_read[$topic_id] = $user_lastmark;				}			}		}	}	return $last_read;}/*** Get list of unread topics** @param int $user_id			User ID (or false for current user)* @param string $sql_extra		Extra WHERE SQL statement* @param string $sql_sort		ORDER BY SQL sorting statement* @param string $sql_limit		Limits the size of unread topics list, 0 for unlimited query* @param string $sql_limit_offset  Sets the offset of the first row to search, 0 to search from the start** @return array[int][int]		Topic ids as keys, mark_time of topic as value*/function get_unread_topics($user_id = false, $sql_extra = '', $sql_sort = '', $sql_limit = 1001, $sql_limit_offset = 0){	global $config, $db, $user;	$user_id = ($user_id === false) ? (int) $user->data['user_id'] : (int) $user_id;	// Data array we're going to return	$unread_topics = array();	if (empty($sql_sort))	{		$sql_sort = 'ORDER BY t.topic_last_post_time DESC';	}	if ($config['load_db_lastread'] && $user->data['is_registered'])	{		// Get list of the unread topics		$last_mark = (int) $user->data['user_lastmark'];		$sql_array = array(			'SELECT'		=> 't.topic_id, t.topic_last_post_time, tt.mark_time as topic_mark_time, ft.mark_time as forum_mark_time',			'FROM'			=> array(TOPICS_TABLE => 't'),			'LEFT_JOIN'		=> array(				array(					'FROM'	=> array(TOPICS_TRACK_TABLE => 'tt'),					'ON'	=> "tt.user_id = $user_id AND t.topic_id = tt.topic_id",				),				array(					'FROM'	=> array(FORUMS_TRACK_TABLE => 'ft'),					'ON'	=> "ft.user_id = $user_id AND t.forum_id = ft.forum_id",				),			),			'WHERE'			=> "				 t.topic_last_post_time > $last_mark AND				(				(tt.mark_time IS NOT NULL AND t.topic_last_post_time > tt.mark_time) OR				(tt.mark_time IS NULL AND ft.mark_time IS NOT NULL AND t.topic_last_post_time > ft.mark_time) OR				(tt.mark_time IS NULL AND ft.mark_time IS NULL)				)				$sql_extra				$sql_sort",		);		$sql = $db->sql_build_query('SELECT', $sql_array);		$result = $db->sql_query_limit($sql, $sql_limit, $sql_limit_offset);		while ($row = $db->sql_fetchrow($result))		{			$topic_id = (int) $row['topic_id'];			$unread_topics[$topic_id] = ($row['topic_mark_time']) ? (int) $row['topic_mark_time'] : (($row['forum_mark_time']) ? (int) $row['forum_mark_time'] : $last_mark);		}		$db->sql_freeresult($result);	}	else if ($config['load_anon_lastread'] || $user->data['is_registered'])	{		global $tracking_topics;		if (empty($tracking_topics))		{			$tracking_topics = request_var($config['cookie_name'] . '_track', '', false, true);			$tracking_topics = ($tracking_topics) ? tracking_unserialize($tracking_topics) : array();		}		if (!$user->data['is_registered'])		{			$user_lastmark = (isset($tracking_topics['l'])) ? base_convert($tracking_topics['l'], 36, 10) + $config['board_startdate'] : 0;		}		else		{			$user_lastmark = (int) $user->data['user_lastmark'];		}		$sql = 'SELECT t.topic_id, t.forum_id, t.topic_last_post_time			FROM ' . TOPICS_TABLE . ' t			WHERE t.topic_last_post_time > ' . $user_lastmark . "			$sql_extra			$sql_sort";		$result = $db->sql_query_limit($sql, $sql_limit, $sql_limit_offset);		while ($row = $db->sql_fetchrow($result))		{			$forum_id = (int) $row['forum_id'];			$topic_id = (int) $row['topic_id'];			$topic_id36 = base_convert($topic_id, 10, 36);			if (isset($tracking_topics['t'][$topic_id36]))			{				$last_read = base_convert($tracking_topics['t'][$topic_id36], 36, 10) + $config['board_startdate'];				if ($row['topic_last_post_time'] > $last_read)				{					$unread_topics[$topic_id] = $last_read;				}			}			else if (isset($tracking_topics['f'][$forum_id]))			{				$mark_time = base_convert($tracking_topics['f'][$forum_id], 36, 10) + $config['board_startdate'];				if ($row['topic_last_post_time'] > $mark_time)				{					$unread_topics[$topic_id] = $mark_time;				}			}			else			{				$unread_topics[$topic_id] = $user_lastmark;			}		}		$db->sql_freeresult($result);	}	return $unread_topics;}/*** Check for read forums and update topic tracking info accordingly** @param int $forum_id the forum id to check* @param int $forum_last_post_time the forums last post time* @param int $f_mark_time the forums last mark time if user is registered and load_db_lastread enabled* @param int $mark_time_forum false if the mark time needs to be obtained, else the last users forum mark time** @return true if complete forum got marked read, else false.*/function update_forum_tracking_info($forum_id, $forum_last_post_time, $f_mark_time = false, $mark_time_forum = false){	global $db, $tracking_topics, $user, $config, $auth;	// Determine the users last forum mark time if not given.	if ($mark_time_forum === false)	{		if ($config['load_db_lastread'] && $user->data['is_registered'])		{			$mark_time_forum = (!empty($f_mark_time)) ? $f_mark_time : $user->data['user_lastmark'];		}		else if ($config['load_anon_lastread'] || $user->data['is_registered'])		{			$tracking_topics = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';			$tracking_topics = ($tracking_topics) ? tracking_unserialize($tracking_topics) : array();			if (!$user->data['is_registered'])			{				$user->data['user_lastmark'] = (isset($tracking_topics['l'])) ? (int) (base_convert($tracking_topics['l'], 36, 10) + $config['board_startdate']) : 0;			}			$mark_time_forum = (isset($tracking_topics['f'][$forum_id])) ? (int) (base_convert($tracking_topics['f'][$forum_id], 36, 10) + $config['board_startdate']) : $user->data['user_lastmark'];		}	}	// Handle update of unapproved topics info.	// Only update for moderators having m_approve permission for the forum.	$sql_update_unapproved = ($auth->acl_get('m_approve', $forum_id)) ? '': 'AND t.topic_approved = 1';	// Check the forum for any left unread topics.	// If there are none, we mark the forum as read.	if ($config['load_db_lastread'] && $user->data['is_registered'])	{		if ($mark_time_forum >= $forum_last_post_time)		{			// We do not need to mark read, this happened before. Therefore setting this to true			$row = true;		}		else		{			$sql = 'SELECT t.forum_id FROM ' . TOPICS_TABLE . ' t				LEFT JOIN ' . TOPICS_TRACK_TABLE . ' tt ON (tt.topic_id = t.topic_id AND tt.user_id = ' . $user->data['user_id'] . ')				WHERE t.forum_id = ' . $forum_id . '					AND t.topic_last_post_time > ' . $mark_time_forum . '					AND t.topic_moved_id = 0 ' .					$sql_update_unapproved . '					AND (tt.topic_id IS NULL OR tt.mark_time < t.topic_last_post_time)				GROUP BY t.forum_id';			$result = $db->sql_query_limit($sql, 1);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);		}	}	else if ($config['load_anon_lastread'] || $user->data['is_registered'])	{		// Get information from cookie		$row = false;		if (!isset($tracking_topics['tf'][$forum_id]))		{			// We do not need to mark read, this happened before. Therefore setting this to true			$row = true;		}		else		{			$sql = 'SELECT t.topic_id				FROM ' . TOPICS_TABLE . ' t				WHERE t.forum_id = ' . $forum_id . '					AND t.topic_last_post_time > ' . $mark_time_forum . '					AND t.topic_moved_id = 0 ' .					$sql_update_unapproved;			$result = $db->sql_query($sql);			$check_forum = $tracking_topics['tf'][$forum_id];			$unread = false;			while ($row = $db->sql_fetchrow($result))			{				if (!isset($check_forum[base_convert($row['topic_id'], 10, 36)]))				{					$unread = true;					break;				}			}			$db->sql_freeresult($result);			$row = $unread;		}	}	else	{		$row = true;	}	if (!$row)	{		markread('topics', $forum_id);		return true;	}	return false;}/*** Transform an array into a serialized format*/function tracking_serialize($input){	$out = '';	foreach ($input as $key => $value)	{		if (is_array($value))		{			$out .= $key . ':(' . tracking_serialize($value) . ');';		}		else		{			$out .= $key . ':' . $value . ';';		}	}	return $out;}/*** Transform a serialized array into an actual array*/function tracking_unserialize($string, $max_depth = 3){	$n = strlen($string);	if ($n > 10010)	{		die('Invalid data supplied');	}	$data = $stack = array();	$key = '';	$mode = 0;	$level = &$data;	for ($i = 0; $i < $n; ++$i)	{		switch ($mode)		{			case 0:				switch ($string[$i])				{					case ':':						$level[$key] = 0;						$mode = 1;					break;					case ')':						unset($level);						$level = array_pop($stack);						$mode = 3;					break;					default:						$key .= $string[$i];				}			break;			case 1:				switch ($string[$i])				{					case '(':						if (sizeof($stack) >= $max_depth)						{							die('Invalid data supplied');						}						$stack[] = &$level;						$level[$key] = array();						$level = &$level[$key];						$key = '';						$mode = 0;					break;					default:						$level[$key] = $string[$i];						$mode = 2;					break;				}			break;			case 2:				switch ($string[$i])				{					case ')':						unset($level);						$level = array_pop($stack);						$mode = 3;					break;					case ';':						$key = '';						$mode = 0;					break;					default:						$level[$key] .= $string[$i];					break;				}			break;			case 3:				switch ($string[$i])				{					case ')':						unset($level);						$level = array_pop($stack);					break;					case ';':						$key = '';						$mode = 0;					break;					default:						die('Invalid data supplied');					break;				}			break;		}	}	if (sizeof($stack) != 0 || ($mode != 0 && $mode != 3))	{		die('Invalid data supplied');	}	return $level;}// Pagination functions/*** Pagination routine, generates page number sequence* tpl_prefix is for using different pagination blocks at one page*/function generate_pagination($base_url, $num_items, $per_page, $start_item, $add_prevnext_text = false, $tpl_prefix = ''){	global $template, $user;	// Make sure $per_page is a valid value	$per_page = ($per_page <= 0) ? 1 : $per_page;	$seperator = '<span class="page-sep">' . $user->lang['COMMA_SEPARATOR'] . '</span>';	$total_pages = ceil($num_items / $per_page);	if ($total_pages == 1 || !$num_items)	{		return false;	}	$on_page = floor($start_item / $per_page) + 1;	$url_delim = (strpos($base_url, '?') === false) ? '?' : ((strpos($base_url, '?') === strlen($base_url) - 1) ? '' : '&amp;');	$page_string = ($on_page == 1) ? '<strong>1</strong>' : '<a href="' . $base_url . '">1</a>';	if ($total_pages > 5)	{		$start_cnt = min(max(1, $on_page - 4), $total_pages - 5);		$end_cnt = max(min($total_pages, $on_page + 4), 6);		$page_string .= ($start_cnt > 1) ? '<span class="page-dots"> ... </span>' : $seperator;		for ($i = $start_cnt + 1; $i < $end_cnt; $i++)		{			$page_string .= ($i == $on_page) ? '<strong>' . $i . '</strong>' : '<a href="' . $base_url . "{$url_delim}start=" . (($i - 1) * $per_page) . '">' . $i . '</a>';			if ($i < $end_cnt - 1)			{				$page_string .= $seperator;			}		}		$page_string .= ($end_cnt < $total_pages) ? '<span class="page-dots"> ... </span>' : $seperator;	}	else	{		$page_string .= $seperator;		for ($i = 2; $i < $total_pages; $i++)		{			$page_string .= ($i == $on_page) ? '<strong>' . $i . '</strong>' : '<a href="' . $base_url . "{$url_delim}start=" . (($i - 1) * $per_page) . '">' . $i . '</a>';			if ($i < $total_pages)			{				$page_string .= $seperator;			}		}	}	$page_string .= ($on_page == $total_pages) ? '<strong>' . $total_pages . '</strong>' : '<a href="' . $base_url . "{$url_delim}start=" . (($total_pages - 1) * $per_page) . '">' . $total_pages . '</a>';	if ($add_prevnext_text)	{		if ($on_page != 1)		{			$page_string = '<a href="' . $base_url . "{$url_delim}start=" . (($on_page - 2) * $per_page) . '">' . $user->lang['PREVIOUS'] . '</a>&nbsp;&nbsp;' . $page_string;		}		if ($on_page != $total_pages)		{			$page_string .= '&nbsp;&nbsp;<a href="' . $base_url . "{$url_delim}start=" . ($on_page * $per_page) . '">' . $user->lang['NEXT'] . '</a>';		}	}	$template->assign_vars(array(		$tpl_prefix . 'BASE_URL'		=> $base_url,		'A_' . $tpl_prefix . 'BASE_URL'	=> addslashes($base_url),		$tpl_prefix . 'PER_PAGE'		=> $per_page,		$tpl_prefix . 'PREVIOUS_PAGE'	=> ($on_page == 1) ? '' : $base_url . "{$url_delim}start=" . (($on_page - 2) * $per_page),		$tpl_prefix . 'NEXT_PAGE'		=> ($on_page == $total_pages) ? '' : $base_url . "{$url_delim}start=" . ($on_page * $per_page),		$tpl_prefix . 'TOTAL_PAGES'		=> $total_pages,	));	return $page_string;}/*** Return current page (pagination)*/function on_page($num_items, $per_page, $start){	global $template, $user;	// Make sure $per_page is a valid value	$per_page = ($per_page <= 0) ? 1 : $per_page;	$on_page = floor($start / $per_page) + 1;	$template->assign_vars(array(		'ON_PAGE'		=> $on_page)	);	return sprintf($user->lang['PAGE_OF'], $on_page, max(ceil($num_items / $per_page), 1));}// Server functions (building urls, redirecting...)/*** Append session id to url.* This function supports hooks.** @param string $url The url the session id needs to be appended to (can have params)* @param mixed $params String or array of additional url parameters* @param bool $is_amp Is url using &amp; (true) or & (false)* @param string $session_id Possibility to use a custom session id instead of the global one** Examples:* <code>* append_sid("{$phpbb_root_path}viewtopic.$phpEx?t=1&amp;f=2");* append_sid("{$phpbb_root_path}viewtopic.$phpEx", 't=1&amp;f=2');* append_sid("{$phpbb_root_path}viewtopic.$phpEx", 't=1&f=2', false);* append_sid("{$phpbb_root_path}viewtopic.$phpEx", array('t' => 1, 'f' => 2));* </code>**/function append_sid($url, $params = false, $is_amp = true, $session_id = false){	global $_SID, $_EXTRA_URL, $phpbb_hook;	if ($params === '' || (is_array($params) && empty($params)))	{		// Do not append the ? if the param-list is empty anyway.		$params = false;	}	// Developers using the hook function need to globalise the $_SID and $_EXTRA_URL on their own and also handle it appropriately.	// They could mimic most of what is within this function	if (!empty($phpbb_hook) && $phpbb_hook->call_hook(__FUNCTION__, $url, $params, $is_amp, $session_id))	{		if ($phpbb_hook->hook_return(__FUNCTION__))		{			return $phpbb_hook->hook_return_result(__FUNCTION__);		}	}	$params_is_array = is_array($params);	// Get anchor	$anchor = '';	if (strpos($url, '#') !== false)	{		list($url, $anchor) = explode('#', $url, 2);		$anchor = '#' . $anchor;	}	else if (!$params_is_array && strpos($params, '#') !== false)	{		list($params, $anchor) = explode('#', $params, 2);		$anchor = '#' . $anchor;	}	// Handle really simple cases quickly	if ($_SID == '' && $session_id === false && empty($_EXTRA_URL) && !$params_is_array && !$anchor)	{		if ($params === false)		{			return $url;		}		$url_delim = (strpos($url, '?') === false) ? '?' : (($is_amp) ? '&amp;' : '&');		return $url . ($params !== false ? $url_delim. $params : '');	}	// Assign sid if session id is not specified	if ($session_id === false)	{		$session_id = $_SID;	}	$amp_delim = ($is_amp) ? '&amp;' : '&';	$url_delim = (strpos($url, '?') === false) ? '?' : $amp_delim;	// Appending custom url parameter?	$append_url = (!empty($_EXTRA_URL)) ? implode($amp_delim, $_EXTRA_URL) : '';	// Use the short variant if possible ;)	if ($params === false)	{		// Append session id		if (!$session_id)		{			return $url . (($append_url) ? $url_delim . $append_url : '') . $anchor;		}		else		{			return $url . (($append_url) ? $url_delim . $append_url . $amp_delim : $url_delim) . 'sid=' . $session_id . $anchor;		}	}	// Build string if parameters are specified as array	if (is_array($params))	{		$output = array();		foreach ($params as $key => $item)		{			if ($item === NULL)			{				continue;			}			if ($key == '#')			{				$anchor = '#' . $item;				continue;			}			$output[] = $key . '=' . $item;		}		$params = implode($amp_delim, $output);	}	// Append session id and parameters (even if they are empty)	// If parameters are empty, the developer can still append his/her parameters without caring about the delimiter	return $url . (($append_url) ? $url_delim . $append_url . $amp_delim : $url_delim) . $params . ((!$session_id) ? '' : $amp_delim . 'sid=' . $session_id) . $anchor;}/*** Generate board url (example: http://www.example.com/phpBB)** @param bool $without_script_path if set to true the script path gets not appended (example: http://www.example.com)** @return string the generated board url*/function generate_board_url($without_script_path = false){	global $config, $user;	$server_name = $user->host;	$server_port = (!empty($_SERVER['SERVER_PORT'])) ? (int) $_SERVER['SERVER_PORT'] : (int) getenv('SERVER_PORT');	// Forcing server vars is the only way to specify/override the protocol	if ($config['force_server_vars'] || !$server_name)	{		$server_protocol = ($config['server_protocol']) ? $config['server_protocol'] : (($config['cookie_secure']) ? 'https://' : 'http://');		$server_name = $config['server_name'];		$server_port = (int) $config['server_port'];		$script_path = $config['script_path'];		$url = $server_protocol . $server_name;		$cookie_secure = $config['cookie_secure'];	}	else	{		// Do not rely on cookie_secure, users seem to think that it means a secured cookie instead of an encrypted connection		$cookie_secure = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? 1 : 0;		$url = (($cookie_secure) ? 'https://' : 'http://') . $server_name;		$script_path = $user->page['root_script_path'];	}	if ($server_port && (($cookie_secure && $server_port <> 443) || (!$cookie_secure && $server_port <> 80)))	{		// HTTP HOST can carry a port number (we fetch $user->host, but for old versions this may be true)		if (strpos($server_name, ':') === false)		{			$url .= ':' . $server_port;		}	}	if (!$without_script_path)	{		$url .= $script_path;	}	// Strip / from the end	if (substr($url, -1, 1) == '/')	{		$url = substr($url, 0, -1);	}	return $url;}/*** Redirects the user to another page then exits the script nicely* This function is intended for urls within the board. It's not meant to redirect to cross-domains.** @param string $url The url to redirect to* @param bool $return If true, do not redirect but return the sanitized URL. Default is no return.* @param bool $disable_cd_check If true, redirect() will redirect to an external domain. If false, the redirect point to the boards url if it does not match the current domain. Default is false.*/function redirect($url, $return = false, $disable_cd_check = false){	global $db, $cache, $config, $user, $phpbb_root_path;	$failover_flag = false;	if (empty($user->lang))	{		$user->add_lang('common');	}	if (!$return)	{		garbage_collection();	}	// Make sure no &amp;'s are in, this will break the redirect	$url = str_replace('&amp;', '&', $url);	// Determine which type of redirect we need to handle...	$url_parts = @parse_url($url);	if ($url_parts === false)	{		// Malformed url, redirect to current page...		$url = generate_board_url() . '/' . $user->page['page'];	}	else if (!empty($url_parts['scheme']) && !empty($url_parts['host']))	{		// Attention: only able to redirect within the same domain if $disable_cd_check is false (yourdomain.com -> www.yourdomain.com will not work)		if (!$disable_cd_check && $url_parts['host'] !== $user->host)		{			$url = generate_board_url();		}	}	else if ($url[0] == '/')	{		// Absolute uri, prepend direct url...		$url = generate_board_url(true) . $url;	}	else	{		// Relative uri		$pathinfo = pathinfo($url);		if (!$disable_cd_check && !file_exists($pathinfo['dirname'] . '/'))		{			$url = str_replace('../', '', $url);			$pathinfo = pathinfo($url);			if (!file_exists($pathinfo['dirname'] . '/'))			{				// fallback to "last known user page"				// at least this way we know the user does not leave the phpBB root				$url = generate_board_url() . '/' . $user->page['page'];				$failover_flag = true;			}		}		if (!$failover_flag)		{			// Is the uri pointing to the current directory?			if ($pathinfo['dirname'] == '.')			{				$url = str_replace('./', '', $url);				// Strip / from the beginning				if ($url && substr($url, 0, 1) == '/')				{					$url = substr($url, 1);				}				if ($user->page['page_dir'])				{					$url = generate_board_url() . '/' . $user->page['page_dir'] . '/' . $url;				}				else				{					$url = generate_board_url() . '/' . $url;				}			}			else			{				// Used ./ before, but $phpbb_root_path is working better with urls within another root path				$root_dirs = explode('/', str_replace('\\', '/', phpbb_realpath($phpbb_root_path)));				$page_dirs = explode('/', str_replace('\\', '/', phpbb_realpath($pathinfo['dirname'])));				$intersection = array_intersect_assoc($root_dirs, $page_dirs);				$root_dirs = array_diff_assoc($root_dirs, $intersection);				$page_dirs = array_diff_assoc($page_dirs, $intersection);				$dir = str_repeat('../', sizeof($root_dirs)) . implode('/', $page_dirs);				// Strip / from the end				if ($dir && substr($dir, -1, 1) == '/')				{					$dir = substr($dir, 0, -1);				}				// Strip / from the beginning				if ($dir && substr($dir, 0, 1) == '/')				{					$dir = substr($dir, 1);				}				$url = str_replace($pathinfo['dirname'] . '/', '', $url);				// Strip / from the beginning				if (substr($url, 0, 1) == '/')				{					$url = substr($url, 1);				}				$url = (!empty($dir) ? $dir . '/' : '') . $url;				$url = generate_board_url() . '/' . $url;			}		}	}	// Make sure no linebreaks are there... to prevent http response splitting for PHP < 4.4.2	if (strpos(urldecode($url), "\n") !== false || strpos(urldecode($url), "\r") !== false || strpos($url, ';') !== false)	{		trigger_error('Tried to redirect to potentially insecure url.', E_USER_ERROR);	}	// Now, also check the protocol and for a valid url the last time...	$allowed_protocols = array('http', 'https', 'ftp', 'ftps');	$url_parts = parse_url($url);	if ($url_parts === false || empty($url_parts['scheme']) || !in_array($url_parts['scheme'], $allowed_protocols))	{		trigger_error('Tried to redirect to potentially insecure url.', E_USER_ERROR);	}	if ($return)	{		return $url;	}	// Redirect via an HTML form for PITA webservers	if (@preg_match('#Microsoft|WebSTAR|Xitami#', getenv('SERVER_SOFTWARE')))	{		header('Refresh: 0; URL=' . $url);		echo '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">';		echo '<html xmlns="http://www.w3.org/1999/xhtml" dir="' . $user->lang['DIRECTION'] . '" lang="' . $user->lang['USER_LANG'] . '" xml:lang="' . $user->lang['USER_LANG'] . '">';		echo '<head>';		echo '<meta http-equiv="content-type" content="text/html; charset=utf-8" />';		echo '<meta http-equiv="refresh" content="0; url=' . str_replace('&', '&amp;', $url) . '" />';		echo '<title>' . $user->lang['REDIRECT'] . '</title>';		echo '</head>';		echo '<body>';		echo '<div style="text-align: center;">' . sprintf($user->lang['URL_REDIRECT'], '<a href="' . str_replace('&', '&amp;', $url) . '">', '</a>') . '</div>';		echo '</body>';		echo '</html>';		exit;	}	// Behave as per HTTP/1.1 spec for others	header('Location: ' . $url);	exit;}/*** Re-Apply session id after page reloads*/function reapply_sid($url){	global $phpEx, $phpbb_root_path;	if ($url === "index.$phpEx")	{		return append_sid("index.$phpEx");	}	else if ($url === "{$phpbb_root_path}index.$phpEx")	{		return append_sid("{$phpbb_root_path}index.$phpEx");	}	// Remove previously added sid	if (strpos($url, 'sid=') !== false)	{		// All kind of links		$url = preg_replace('/(\?)?(&amp;|&)?sid=[a-z0-9]+/', '', $url);		// if the sid was the first param, make the old second as first ones		$url = preg_replace("/$phpEx(&amp;|&)+?/", "$phpEx?", $url);	}	return append_sid($url);}/*** Returns url from the session/current page with an re-appended SID with optionally stripping vars from the url*/function build_url($strip_vars = false){	global $user, $phpbb_root_path;	// Append SID	$redirect = append_sid($user->page['page'], false, false);	// Add delimiter if not there...	if (strpos($redirect, '?') === false)	{		$redirect .= '?';	}	// Strip vars...	if ($strip_vars !== false && strpos($redirect, '?') !== false)	{		if (!is_array($strip_vars))		{			$strip_vars = array($strip_vars);		}		$query = $_query = array();		$args = substr($redirect, strpos($redirect, '?') + 1);		$args = ($args) ? explode('&', $args) : array();		$redirect = substr($redirect, 0, strpos($redirect, '?'));		foreach ($args as $argument)		{			$arguments = explode('=', $argument);			$key = $arguments[0];			unset($arguments[0]);			if ($key === '')			{				continue;			}			$query[$key] = implode('=', $arguments);		}		// Strip the vars off		foreach ($strip_vars as $strip)		{			if (isset($query[$strip]))			{				unset($query[$strip]);			}		}		// Glue the remaining parts together... already urlencoded		foreach ($query as $key => $value)		{			$_query[] = $key . '=' . $value;		}		$query = implode('&', $_query);		$redirect .= ($query) ? '?' . $query : '';	}	// We need to be cautious here.	// On some situations, the redirect path is an absolute URL, sometimes a relative path	// For a relative path, let's prefix it with $phpbb_root_path to point to the correct location,	// else we use the URL directly.	$url_parts = @parse_url($redirect);	// URL	if ($url_parts !== false && !empty($url_parts['scheme']) && !empty($url_parts['host']))	{		return str_replace('&', '&amp;', $redirect);	}	return $phpbb_root_path . str_replace('&', '&amp;', $redirect);}/*** Meta refresh assignment* Adds META template variable with meta http tag.** @param int $time Time in seconds for meta refresh tag* @param string $url URL to redirect to. The url will go through redirect() first before the template variable is assigned* @param bool $disable_cd_check If true, meta_refresh() will redirect to an external domain. If false, the redirect point to the boards url if it does not match the current domain. Default is false.*/function meta_refresh($time, $url, $disable_cd_check = false){	global $template;	$url = redirect($url, true, $disable_cd_check);	$url = str_replace('&', '&amp;', $url);	// For XHTML compatibility we change back & to &amp;	$template->assign_vars(array(		'META' => '<meta http-equiv="refresh" content="' . $time . ';url=' . $url . '" />')	);	return $url;}/*** Outputs correct status line header.** Depending on php sapi one of the two following forms is used:** Status: 404 Not Found** HTTP/1.x 404 Not Found** HTTP version is taken from HTTP_VERSION environment variable,* and defaults to 1.0.** Sample usage:** send_status_line(404, 'Not Found');** @param int $code HTTP status code* @param string $message Message for the status code* @return void*/function send_status_line($code, $message){	if (substr(strtolower(@php_sapi_name()), 0, 3) === 'cgi')	{		// in theory, we shouldn't need that due to php doing it. Reality offers a differing opinion, though		header("Status: $code $message", true, $code);	}	else	{		if (!empty($_SERVER['SERVER_PROTOCOL']))		{			$version = $_SERVER['SERVER_PROTOCOL'];		}		else		{			$version = 'HTTP/1.0';		}		header("$version $code $message", true, $code);	}}//Form validation/*** Add a secret hash   for use in links/GET requests* @param string  $link_name The name of the link; has to match the name used in check_link_hash, otherwise no restrictions apply* @return string the hash*/function generate_link_hash($link_name){	global $user;	if (!isset($user->data["hash_$link_name"]))	{		$user->data["hash_$link_name"] = substr(sha1($user->data['user_form_salt'] . $link_name), 0, 8);	}	return $user->data["hash_$link_name"];}/*** checks a link hash - for GET requests* @param string $token the submitted token* @param string $link_name The name of the link* @return boolean true if all is fine*/function check_link_hash($token, $link_name){	return $token === generate_link_hash($link_name);}/*** Add a secret token to the form (requires the S_FORM_TOKEN template variable)* @param string  $form_name The name of the form; has to match the name used in check_form_key, otherwise no restrictions apply*/function add_form_key($form_name){	global $config, $template, $user;	$now = time();	$token_sid = ($user->data['user_id'] == ANONYMOUS && !empty($config['form_token_sid_guests'])) ? $user->session_id : '';	$token = sha1($now . $user->data['user_form_salt'] . $form_name . $token_sid);	$s_fields = build_hidden_fields(array(		'creation_time' => $now,		'form_token'	=> $token,	));	$template->assign_vars(array(		'S_FORM_TOKEN'	=> $s_fields,	));}/*** Check the form key. Required for all altering actions not secured by confirm_box* @param string  $form_name The name of the form; has to match the name used in add_form_key, otherwise no restrictions apply* @param int $timespan The maximum acceptable age for a submitted form in seconds. Defaults to the config setting.* @param string $return_page The address for the return link* @param bool $trigger If true, the function will triger an error when encountering an invalid form*/function check_form_key($form_name, $timespan = false, $return_page = '', $trigger = false){	global $config, $user;	if ($timespan === false)	{		// we enforce a minimum value of half a minute here.		$timespan = ($config['form_token_lifetime'] == -1) ? -1 : max(30, $config['form_token_lifetime']);	}	if (isset($_POST['creation_time']) && isset($_POST['form_token']))	{		$creation_time	= abs(request_var('creation_time', 0));		$token = request_var('form_token', '');		$diff = time() - $creation_time;		// If creation_time and the time() now is zero we can assume it was not a human doing this (the check for if ($diff)...		if ($diff && ($diff <= $timespan || $timespan === -1))		{			$token_sid = ($user->data['user_id'] == ANONYMOUS && !empty($config['form_token_sid_guests'])) ? $user->session_id : '';			$key = sha1($creation_time . $user->data['user_form_salt'] . $form_name . $token_sid);			if ($key === $token)			{				return true;			}		}	}	if ($trigger)	{		trigger_error($user->lang['FORM_INVALID'] . $return_page);	}	return false;}// Message/Login boxes/*** Build Confirm box* @param boolean $check True for checking if confirmed (without any additional parameters) and false for displaying the confirm box* @param string $title Title/Message used for confirm box.*		message text is _CONFIRM appended to title.*		If title cannot be found in user->lang a default one is displayed*		If title_CONFIRM cannot be found in user->lang the text given is used.* @param string $hidden Hidden variables* @param string $html_body Template used for confirm box* @param string $u_action Custom form action*/function confirm_box($check, $title = '', $hidden = '', $html_body = 'confirm_body.html', $u_action = ''){	global $user, $template, $db;	global $phpEx, $phpbb_root_path;	if (isset($_POST['cancel']))	{		return false;	}	$confirm = false;	if (isset($_POST['confirm']))	{		// language frontier		if ($_POST['confirm'] === $user->lang['YES'])		{			$confirm = true;		}	}	if ($check && $confirm)	{		$user_id = request_var('confirm_uid', 0);		$session_id = request_var('sess', '');		$confirm_key = request_var('confirm_key', '');		if ($user_id != $user->data['user_id'] || $session_id != $user->session_id || !$confirm_key || !$user->data['user_last_confirm_key'] || $confirm_key != $user->data['user_last_confirm_key'])		{			return false;		}		// Reset user_last_confirm_key		$sql = 'UPDATE ' . USERS_TABLE . " SET user_last_confirm_key = ''			WHERE user_id = " . $user->data['user_id'];		$db->sql_query($sql);		return true;	}	else if ($check)	{		return false;	}	$s_hidden_fields = build_hidden_fields(array(		'confirm_uid'	=> $user->data['user_id'],		'sess'			=> $user->session_id,		'sid'			=> $user->session_id,	));	// generate activation key	$confirm_key = gen_rand_string(10);	if (defined('IN_ADMIN') && isset($user->data['session_admin']) && $user->data['session_admin'])	{		adm_page_header((!isset($user->lang[$title])) ? $user->lang['CONFIRM'] : $user->lang[$title]);	}	else	{		page_header(((!isset($user->lang[$title])) ? $user->lang['CONFIRM'] : $user->lang[$title]), false);	}	$template->set_filenames(array(		'body' => $html_body)	);	// If activation key already exist, we better do not re-use the key (something very strange is going on...)	if (request_var('confirm_key', ''))	{		// This should not occur, therefore we cancel the operation to safe the user		return false;	}	// re-add sid / transform & to &amp; for user->page (user->page is always using &)	$use_page = ($u_action) ? $phpbb_root_path . $u_action : $phpbb_root_path . str_replace('&', '&amp;', $user->page['page']);	$u_action = reapply_sid($use_page);	$u_action .= ((strpos($u_action, '?') === false) ? '?' : '&amp;') . 'confirm_key=' . $confirm_key;	$template->assign_vars(array(		'MESSAGE_TITLE'		=> (!isset($user->lang[$title])) ? $user->lang['CONFIRM'] : $user->lang[$title],		'MESSAGE_TEXT'		=> (!isset($user->lang[$title . '_CONFIRM'])) ? $title : $user->lang[$title . '_CONFIRM'],		'YES_VALUE'			=> $user->lang['YES'],		'S_CONFIRM_ACTION'	=> $u_action,		'S_HIDDEN_FIELDS'	=> $hidden . $s_hidden_fields)	);	$sql = 'UPDATE ' . USERS_TABLE . " SET user_last_confirm_key = '" . $db->sql_escape($confirm_key) . "'		WHERE user_id = " . $user->data['user_id'];	$db->sql_query($sql);	if (defined('IN_ADMIN') && isset($user->data['session_admin']) && $user->data['session_admin'])	{		adm_page_footer();	}	else	{		page_footer();	}}/*** Generate login box or verify password*/function login_box($redirect = '', $l_explain = '', $l_success = '', $admin = false, $s_display = true){	global $db, $user, $template, $auth, $phpEx, $phpbb_root_path, $config;	if (!class_exists('phpbb_captcha_factory'))	{		include($phpbb_root_path . 'includes/captcha/captcha_factory.' . $phpEx);	}	$err = '';	// Make sure user->setup() has been called	if (empty($user->lang))	{		$user->setup();	}	// Print out error if user tries to authenticate as an administrator without having the privileges...	if ($admin && !$auth->acl_get('a_'))	{		// Not authd		// anonymous/inactive users are never able to go to the ACP even if they have the relevant permissions		if ($user->data['is_registered'])		{			add_log('admin', 'LOG_ADMIN_AUTH_FAIL');		}		trigger_error('NO_AUTH_ADMIN');	}	if (isset($_POST['login']))	{		// Get credential		if ($admin)		{			$credential = request_var('credential', '');			if (strspn($credential, 'abcdef0123456789') !== strlen($credential) || strlen($credential) != 32)			{				if ($user->data['is_registered'])				{					add_log('admin', 'LOG_ADMIN_AUTH_FAIL');				}				trigger_error('NO_AUTH_ADMIN');			}			$password	= request_var('password_' . $credential, '', true);		}		else		{			$password	= request_var('password', '', true);		}		$username	= request_var('username', '', true);		$autologin	= (!empty($_POST['autologin'])) ? true : false;		$viewonline = (!empty($_POST['viewonline'])) ? 0 : 1;		$admin 		= ($admin) ? 1 : 0;		$viewonline = ($admin) ? $user->data['session_viewonline'] : $viewonline;		// Check if the supplied username is equal to the one stored within the database if re-authenticating		if ($admin && utf8_clean_string($username) != utf8_clean_string($user->data['username']))		{			// We log the attempt to use a different username...			add_log('admin', 'LOG_ADMIN_AUTH_FAIL');			trigger_error('NO_AUTH_ADMIN_USER_DIFFER');		}		// If authentication is successful we redirect user to previous page		$result = $auth->login($username, $password, $autologin, $viewonline, $admin);		// If admin authentication and login, we will log if it was a success or not...		// We also break the operation on the first non-success login - it could be argued that the user already knows		if ($admin)		{			if ($result['status'] == LOGIN_SUCCESS)			{				add_log('admin', 'LOG_ADMIN_AUTH_SUCCESS');			}			else			{				// Only log the failed attempt if a real user tried to.				// anonymous/inactive users are never able to go to the ACP even if they have the relevant permissions				if ($user->data['is_registered'])				{					add_log('admin', 'LOG_ADMIN_AUTH_FAIL');				}			}		}		// The result parameter is always an array, holding the relevant information...		if ($result['status'] == LOGIN_SUCCESS)		{			$redirect = request_var('redirect', "{$phpbb_root_path}index.$phpEx");			$message = ($l_success) ? $l_success : $user->lang['LOGIN_REDIRECT'];			$l_redirect = ($admin) ? $user->lang['PROCEED_TO_ACP'] : (($redirect === "{$phpbb_root_path}index.$phpEx" || $redirect === "index.$phpEx") ? $user->lang['RETURN_INDEX'] : $user->lang['RETURN_PAGE']);			// append/replace SID (may change during the session for AOL users)			$redirect = reapply_sid($redirect);			// Special case... the user is effectively banned, but we allow founders to login			if (defined('IN_CHECK_BAN') && $result['user_row']['user_type'] != USER_FOUNDER)			{				return;			}			$redirect = meta_refresh(3, $redirect);			trigger_error($message . '<br /><br />' . sprintf($l_redirect, '<a href="' . $redirect . '">', '</a>'));		}		// Something failed, determine what...		if ($result['status'] == LOGIN_BREAK)		{			trigger_error($result['error_msg']);		}		// Special cases... determine		switch ($result['status'])		{			case LOGIN_ERROR_ATTEMPTS:				$captcha = phpbb_captcha_factory::get_instance($config['captcha_plugin']);				$captcha->init(CONFIRM_LOGIN);				// $captcha->reset();				$template->assign_vars(array(					'CAPTCHA_TEMPLATE'			=> $captcha->get_template(),				));				$err = $user->lang[$result['error_msg']];			break;			case LOGIN_ERROR_PASSWORD_CONVERT:				$err = sprintf(					$user->lang[$result['error_msg']],					($config['email_enable']) ? '<a href="' . append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=sendpassword') . '">' : '',					($config['email_enable']) ? '</a>' : '',					($config['board_contact']) ? '<a href="mailto:' . htmlspecialchars($config['board_contact']) . '">' : '',					($config['board_contact']) ? '</a>' : ''				);			break;			// Username, password, etc...			default:				$err = $user->lang[$result['error_msg']];				// Assign admin contact to some error messages				if ($result['error_msg'] == 'LOGIN_ERROR_USERNAME' || $result['error_msg'] == 'LOGIN_ERROR_PASSWORD')				{					$err = (!$config['board_contact']) ? sprintf($user->lang[$result['error_msg']], '', '') : sprintf($user->lang[$result['error_msg']], '<a href="mailto:' . htmlspecialchars($config['board_contact']) . '">', '</a>');				}			break;		}	}	// Assign credential for username/password pair	$credential = ($admin) ? md5(unique_id()) : false;	$s_hidden_fields = array(		'sid'		=> $user->session_id,	);	if ($redirect)	{		$s_hidden_fields['redirect'] = $redirect;	}	if ($admin)	{		$s_hidden_fields['credential'] = $credential;	}	$s_hidden_fields = build_hidden_fields($s_hidden_fields);	$template->assign_vars(array(		'LOGIN_ERROR'		=> $err,		'LOGIN_EXPLAIN'		=> $l_explain,		'U_SEND_PASSWORD' 		=> ($config['email_enable']) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=sendpassword') : '',		'U_RESEND_ACTIVATION'	=> ($config['require_activation'] == USER_ACTIVATION_SELF && $config['email_enable']) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=resend_act') : '',		'U_TERMS_USE'			=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=terms'),		'U_PRIVACY'				=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=privacy'),		'S_DISPLAY_FULL_LOGIN'	=> ($s_display) ? true : false,		'S_HIDDEN_FIELDS' 		=> $s_hidden_fields,		'S_ADMIN_AUTH'			=> $admin,		'USERNAME'				=> ($admin) ? $user->data['username'] : '',		'USERNAME_CREDENTIAL'	=> 'username',		'PASSWORD_CREDENTIAL'	=> ($admin) ? 'password_' . $credential : 'password',	));	page_header($user->lang['LOGIN'], false);	$template->set_filenames(array(		'body' => 'login_body.html')	);	make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"));	page_footer();}/*** Generate forum login box*/function login_forum_box($forum_data){	global $db, $config, $user, $template, $phpEx;	$password = request_var('password', '', true);	$sql = 'SELECT forum_id		FROM ' . FORUMS_ACCESS_TABLE . '		WHERE forum_id = ' . $forum_data['forum_id'] . '			AND user_id = ' . $user->data['user_id'] . "			AND session_id = '" . $db->sql_escape($user->session_id) . "'";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		return true;	}	if ($password)	{		// Remove expired authorised sessions		$sql = 'SELECT f.session_id			FROM ' . FORUMS_ACCESS_TABLE . ' f			LEFT JOIN ' . SESSIONS_TABLE . ' s ON (f.session_id = s.session_id)			WHERE s.session_id IS NULL';		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			$sql_in = array();			do			{				$sql_in[] = (string) $row['session_id'];			}			while ($row = $db->sql_fetchrow($result));			// Remove expired sessions			$sql = 'DELETE FROM ' . FORUMS_ACCESS_TABLE . '				WHERE ' . $db->sql_in_set('session_id', $sql_in);			$db->sql_query($sql);		}		$db->sql_freeresult($result);		if (phpbb_check_hash($password, $forum_data['forum_password']))		{			$sql_ary = array(				'forum_id'		=> (int) $forum_data['forum_id'],				'user_id'		=> (int) $user->data['user_id'],				'session_id'	=> (string) $user->session_id,			);			$db->sql_query('INSERT INTO ' . FORUMS_ACCESS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));			return true;		}		$template->assign_var('LOGIN_ERROR', $user->lang['WRONG_PASSWORD']);	}	page_header($user->lang['LOGIN'], false);	$template->assign_vars(array(		'S_LOGIN_ACTION'		=> build_url(array('f')),		'S_HIDDEN_FIELDS'		=> build_hidden_fields(array('f' => $forum_data['forum_id'])))	);	$template->set_filenames(array(		'body' => 'login_forum.html')	);	page_footer();}// Little helpers/*** Little helper for the build_hidden_fields function*/function _build_hidden_fields($key, $value, $specialchar, $stripslashes){	$hidden_fields = '';	if (!is_array($value))	{		$value = ($stripslashes) ? stripslashes($value) : $value;		$value = ($specialchar) ? htmlspecialchars($value, ENT_COMPAT, 'UTF-8') : $value;		$hidden_fields .= '<input type="hidden" name="' . $key . '" value="' . $value . '" />' . "\n";	}	else	{		foreach ($value as $_key => $_value)		{			$_key = ($stripslashes) ? stripslashes($_key) : $_key;			$_key = ($specialchar) ? htmlspecialchars($_key, ENT_COMPAT, 'UTF-8') : $_key;			$hidden_fields .= _build_hidden_fields($key . '[' . $_key . ']', $_value, $specialchar, $stripslashes);		}	}	return $hidden_fields;}/*** Build simple hidden fields from array** @param array $field_ary an array of values to build the hidden field from* @param bool $specialchar if true, keys and values get specialchared* @param bool $stripslashes if true, keys and values get stripslashed** @return string the hidden fields*/function build_hidden_fields($field_ary, $specialchar = false, $stripslashes = false){	$s_hidden_fields = '';	foreach ($field_ary as $name => $vars)	{		$name = ($stripslashes) ? stripslashes($name) : $name;		$name = ($specialchar) ? htmlspecialchars($name, ENT_COMPAT, 'UTF-8') : $name;		$s_hidden_fields .= _build_hidden_fields($name, $vars, $specialchar, $stripslashes);	}	return $s_hidden_fields;}/*** Parse cfg file*/function parse_cfg_file($filename, $lines = false){	$parsed_items = array();	if ($lines === false)	{		$lines = file($filename);	}	foreach ($lines as $line)	{		$line = trim($line);		if (!$line || $line[0] == '#' || ($delim_pos = strpos($line, '=')) === false)		{			continue;		}		// Determine first occurrence, since in values the equal sign is allowed		$key = strtolower(trim(substr($line, 0, $delim_pos)));		$value = trim(substr($line, $delim_pos + 1));		if (in_array($value, array('off', 'false', '0')))		{			$value = false;		}		else if (in_array($value, array('on', 'true', '1')))		{			$value = true;		}		else if (!trim($value))		{			$value = '';		}		else if (($value[0] == "'" && $value[sizeof($value) - 1] == "'") || ($value[0] == '"' && $value[sizeof($value) - 1] == '"'))		{			$value = substr($value, 1, sizeof($value)-2);		}		$parsed_items[$key] = $value;	}	return $parsed_items;}/*** Add log event*/function add_log(){	global $db, $user;	// In phpBB 3.1.x i want to have logging in a class to be able to control it	// For now, we need a quite hakish approach to circumvent logging for some actions	// @todo implement cleanly	if (!empty($GLOBALS['skip_add_log']))	{		return false;	}	$args = func_get_args();	$mode			= array_shift($args);	$reportee_id	= ($mode == 'user') ? intval(array_shift($args)) : '';	$forum_id		= ($mode == 'mod') ? intval(array_shift($args)) : '';	$topic_id		= ($mode == 'mod') ? intval(array_shift($args)) : '';	$action			= array_shift($args);	$data			= (!sizeof($args)) ? '' : serialize($args);	$sql_ary = array(		'user_id'		=> (empty($user->data)) ? ANONYMOUS : $user->data['user_id'],		'log_ip'		=> $user->ip,		'log_time'		=> time(),		'log_operation'	=> $action,		'log_data'		=> $data,	);	switch ($mode)	{		case 'admin':			$sql_ary['log_type'] = LOG_ADMIN;		break;		case 'mod':			$sql_ary += array(				'log_type'	=> LOG_MOD,				'forum_id'	=> $forum_id,				'topic_id'	=> $topic_id			);		break;		case 'user':			$sql_ary += array(				'log_type'		=> LOG_USERS,				'reportee_id'	=> $reportee_id			);		break;		case 'critical':			$sql_ary['log_type'] = LOG_CRITICAL;		break;		default:			return false;	}	$db->sql_query('INSERT INTO ' . LOG_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));	return $db->sql_nextid();}/*** Return a nicely formatted backtrace.** Turns the array returned by debug_backtrace() into HTML markup.* Also filters out absolute paths to phpBB root.** @return string	HTML markup*/function get_backtrace(){	$output = '<div style="font-family: monospace;">';	$backtrace = debug_backtrace();	// We skip the first one, because it only shows this file/function	unset($backtrace[0]);	foreach ($backtrace as $trace)	{		// Strip the current directory from path		$trace['file'] = (empty($trace['file'])) ? '(not given by php)' : htmlspecialchars(phpbb_filter_root_path($trace['file']));		$trace['line'] = (empty($trace['line'])) ? '(not given by php)' : $trace['line'];		// Only show function arguments for include etc.		// Other parameters may contain sensible information		$argument = '';		if (!empty($trace['args'][0]) && in_array($trace['function'], array('include', 'require', 'include_once', 'require_once')))		{			$argument = htmlspecialchars(phpbb_filter_root_path($trace['args'][0]));		}		$trace['class'] = (!isset($trace['class'])) ? '' : $trace['class'];		$trace['type'] = (!isset($trace['type'])) ? '' : $trace['type'];		$output .= '<br />';		$output .= '<b>FILE:</b> ' . $trace['file'] . '<br />';		$output .= '<b>LINE:</b> ' . ((!empty($trace['line'])) ? $trace['line'] : '') . '<br />';		$output .= '<b>CALL:</b> ' . htmlspecialchars($trace['class'] . $trace['type'] . $trace['function']);		$output .= '(' . (($argument !== '') ? "'$argument'" : '') . ')<br />';	}	$output .= '</div>';	return $output;}/*** This function returns a regular expression pattern for commonly used expressions* Use with / as delimiter for email mode and # for url modes* mode can be: email|bbcode_htm|url|url_inline|www_url|www_url_inline|relative_url|relative_url_inline|ipv4|ipv6*/function get_preg_expression($mode){	switch ($mode)	{		case 'email':			// Regex written by James Watts and Francisco Jose Martin Moreno			// http://fightingforalostcause.net/misc/2006/compare-email-regex.php			return '([\w\!\#$\%\&\'\*\+\-\/\=\?\^\`{\|\}\~]+\.)*(?:[\w\!\#$\%\'\*\+\-\/\=\?\^\`{\|\}\~]|&amp;)+@((((([a-z0-9]{1}[a-z0-9\-]{0,62}[a-z0-9]{1})|[a-z])\.)+[a-z]{2,6})|(\d{1,3}\.){3}\d{1,3}(\:\d{1,5})?)';		break;		case 'bbcode_htm':			return array(				'#<!\-\- e \-\-><a href="mailto:(.*?)">.*?</a><!\-\- e \-\->#',				'#<!\-\- l \-\-><a (?:class="[\w-]+" )?href="(.*?)(?:(&amp;|\?)sid=[0-9a-f]{32})?">.*?</a><!\-\- l \-\->#',				'#<!\-\- ([mw]) \-\-><a (?:class="[\w-]+" )?href="(.*?)">.*?</a><!\-\- \1 \-\->#',				'#<!\-\- s(.*?) \-\-><img src="\{SMILIES_PATH\}\/.*? \/><!\-\- s\1 \-\->#',				'#<!\-\- .*? \-\->#s',				'#<.*?>#s',			);		break;		// Whoa these look impressive!		// The code to generate the following two regular expressions which match valid IPv4/IPv6 addresses		// can be found in the develop directory		case 'ipv4':			return '#^(?:(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$#';		break;		case 'ipv6':			return '#^(?:(?:(?:[\dA-F]{1,4}:){6}(?:[\dA-F]{1,4}:[\dA-F]{1,4}|(?:(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])))|(?:::(?:[\dA-F]{1,4}:){0,5}(?:[\dA-F]{1,4}(?::[\dA-F]{1,4})?|(?:(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])))|(?:(?:[\dA-F]{1,4}:):(?:[\dA-F]{1,4}:){4}(?:[\dA-F]{1,4}:[\dA-F]{1,4}|(?:(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])))|(?:(?:[\dA-F]{1,4}:){1,2}:(?:[\dA-F]{1,4}:){3}(?:[\dA-F]{1,4}:[\dA-F]{1,4}|(?:(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])))|(?:(?:[\dA-F]{1,4}:){1,3}:(?:[\dA-F]{1,4}:){2}(?:[\dA-F]{1,4}:[\dA-F]{1,4}|(?:(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])))|(?:(?:[\dA-F]{1,4}:){1,4}:(?:[\dA-F]{1,4}:)(?:[\dA-F]{1,4}:[\dA-F]{1,4}|(?:(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])))|(?:(?:[\dA-F]{1,4}:){1,5}:(?:[\dA-F]{1,4}:[\dA-F]{1,4}|(?:(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])))|(?:(?:[\dA-F]{1,4}:){1,6}:[\dA-F]{1,4})|(?:(?:[\dA-F]{1,4}:){1,7}:)|(?:::))$#i';		break;		case 'url':		case 'url_inline':			$inline = ($mode == 'url') ? ')' : '';			$scheme = ($mode == 'url') ? '[a-z\d+\-.]' : '[a-z\d+]'; // avoid automatic parsing of "word" in "last word.http://..."			// generated with regex generation file in the develop folder			return "[a-z]$scheme*:/{2}(?:(?:[a-z0-9\-._~!$&'($inline*+,;=:@|]+|%[\dA-F]{2})+|[0-9.]+|\[[a-z0-9.]+:[a-z0-9.]+:[a-z0-9.:]+\])(?::\d*)?(?:/(?:[a-z0-9\-._~!$&'($inline*+,;=:@|]+|%[\dA-F]{2})*)*(?:\?(?:[a-z0-9\-._~!$&'($inline*+,;=:@/?|]+|%[\dA-F]{2})*)?(?:\#(?:[a-z0-9\-._~!$&'($inline*+,;=:@/?|]+|%[\dA-F]{2})*)?";		break;		case 'www_url':		case 'www_url_inline':			$inline = ($mode == 'www_url') ? ')' : '';			return "www\.(?:[a-z0-9\-._~!$&'($inline*+,;=:@|]+|%[\dA-F]{2})+(?::\d*)?(?:/(?:[a-z0-9\-._~!$&'($inline*+,;=:@|]+|%[\dA-F]{2})*)*(?:\?(?:[a-z0-9\-._~!$&'($inline*+,;=:@/?|]+|%[\dA-F]{2})*)?(?:\#(?:[a-z0-9\-._~!$&'($inline*+,;=:@/?|]+|%[\dA-F]{2})*)?";		break;		case 'relative_url':		case 'relative_url_inline':			$inline = ($mode == 'relative_url') ? ')' : '';			return "(?:[a-z0-9\-._~!$&'($inline*+,;=:@|]+|%[\dA-F]{2})*(?:/(?:[a-z0-9\-._~!$&'($inline*+,;=:@|]+|%[\dA-F]{2})*)*(?:\?(?:[a-z0-9\-._~!$&'($inline*+,;=:@/?|]+|%[\dA-F]{2})*)?(?:\#(?:[a-z0-9\-._~!$&'($inline*+,;=:@/?|]+|%[\dA-F]{2})*)?";		break;		case 'table_prefix':			return '#^[a-zA-Z][a-zA-Z0-9_]*$#';		break;	}	return '';}/*** Generate regexp for naughty words censoring* Depends on whether installed PHP version supports unicode properties** @param string	$word			word template to be replaced* @param bool	$use_unicode	whether or not to take advantage of PCRE supporting unicode** @return string $preg_expr		regex to use with word censor*/function get_censor_preg_expression($word, $use_unicode = true){	static $unicode_support = null;	// Check whether PHP version supports unicode properties	if (is_null($unicode_support))	{		$unicode_support = ((version_compare(PHP_VERSION, '5.1.0', '>=') || (version_compare(PHP_VERSION, '5.0.0-dev', '<=') && version_compare(PHP_VERSION, '4.4.0', '>='))) && @preg_match('/\p{L}/u', 'a') !== false) ? true : false;	}	// Unescape the asterisk to simplify further conversions	$word = str_replace('\*', '*', preg_quote($word, '#'));	if ($use_unicode && $unicode_support)	{		// Replace asterisk(s) inside the pattern, at the start and at the end of it with regexes		$word = preg_replace(array('#(?<=[\p{Nd}\p{L}_])\*+(?=[\p{Nd}\p{L}_])#iu', '#^\*+#', '#\*+$#'), array('([\x20]*?|[\p{Nd}\p{L}_-]*?)', '[\p{Nd}\p{L}_-]*?', '[\p{Nd}\p{L}_-]*?'), $word);		// Generate the final substitution		$preg_expr = '#(?<![\p{Nd}\p{L}_-])(' . $word . ')(?![\p{Nd}\p{L}_-])#iu';	}	else	{		// Replace the asterisk inside the pattern, at the start and at the end of it with regexes		$word = preg_replace(array('#(?<=\S)\*+(?=\S)#iu', '#^\*+#', '#\*+$#'), array('(\x20*?\S*?)', '\S*?', '\S*?'), $word);		// Generate the final substitution		$preg_expr = '#(?<!\S)(' . $word . ')(?!\S)#iu';	}	return $preg_expr;}/*** Returns the first block of the specified IPv6 address and as many additional* ones as specified in the length paramater.* If length is zero, then an empty string is returned.* If length is greater than 3 the complete IP will be returned*/function short_ipv6($ip, $length){	if ($length < 1)	{		return '';	}	// extend IPv6 addresses	$blocks = substr_count($ip, ':') + 1;	if ($blocks < 9)	{		$ip = str_replace('::', ':' . str_repeat('0000:', 9 - $blocks), $ip);	}	if ($ip[0] == ':')	{		$ip = '0000' . $ip;	}	if ($length < 4)	{		$ip = implode(':', array_slice(explode(':', $ip), 0, 1 + $length));	}	return $ip;}/*** Wrapper for php's checkdnsrr function.** @param string $host	Fully-Qualified Domain Name* @param string $type	Resource record type to lookup*						Supported types are: MX (default), A, AAAA, NS, TXT, CNAME*						Other types may work or may not work** @return mixed		true if entry found,*					false if entry not found,*					null if this function is not supported by this environment** Since null can also be returned, you probably want to compare the result* with === true or === false,** @author bantu*/function phpbb_checkdnsrr($host, $type = 'MX'){	// The dot indicates to search the DNS root (helps those having DNS prefixes on the same domain)	if (substr($host, -1) == '.')	{		$host_fqdn = $host;		$host = substr($host, 0, -1);	}	else	{		$host_fqdn = $host . '.';	}	// $host		has format	some.host.example.com	// $host_fqdn	has format	some.host.example.com.	// If we're looking for an A record we can use gethostbyname()	if ($type == 'A' && function_exists('gethostbyname'))	{		return (@gethostbyname($host_fqdn) == $host_fqdn) ? false : true;	}	// checkdnsrr() is available on Windows since PHP 5.3,	// but until 5.3.3 it only works for MX records	// See: http://bugs.php.net/bug.php?id=51844	// Call checkdnsrr() if	// we're looking for an MX record or	// we're not on Windows or	// we're running a PHP version where #51844 has been fixed	// checkdnsrr() supports AAAA since 5.0.0	// checkdnsrr() supports TXT since 5.2.4	if (		($type == 'MX' || DIRECTORY_SEPARATOR != '\\' || version_compare(PHP_VERSION, '5.3.3', '>=')) &&		($type != 'AAAA' || version_compare(PHP_VERSION, '5.0.0', '>=')) &&		($type != 'TXT' || version_compare(PHP_VERSION, '5.2.4', '>=')) &&		function_exists('checkdnsrr')	)	{		return checkdnsrr($host_fqdn, $type);	}	// dns_get_record() is available since PHP 5; since PHP 5.3 also on Windows,	// but on Windows it does not work reliable for AAAA records before PHP 5.3.1	// Call dns_get_record() if	// we're not looking for an AAAA record or	// we're not on Windows or	// we're running a PHP version where AAAA lookups work reliable	if (		($type != 'AAAA' || DIRECTORY_SEPARATOR != '\\' || version_compare(PHP_VERSION, '5.3.1', '>=')) &&		function_exists('dns_get_record')	)	{		// dns_get_record() expects an integer as second parameter		// We have to convert the string $type to the corresponding integer constant.		$type_constant = 'DNS_' . $type;		$type_param = (defined($type_constant)) ? constant($type_constant) : DNS_ANY;		// dns_get_record() might throw E_WARNING and return false for records that do not exist		$resultset = @dns_get_record($host_fqdn, $type_param);		if (empty($resultset) || !is_array($resultset))		{			return false;		}		else if ($type_param == DNS_ANY)		{			// $resultset is a non-empty array			return true;		}		foreach ($resultset as $result)		{			if (				isset($result['host']) && $result['host'] == $host &&				isset($result['type']) && $result['type'] == $type			)			{				return true;			}		}		return false;	}	// If we're on Windows we can still try to call nslookup via exec() as a last resort	if (DIRECTORY_SEPARATOR == '\\' && function_exists('exec'))	{		@exec('nslookup -type=' . escapeshellarg($type) . ' ' . escapeshellarg($host_fqdn), $output);		// If output is empty, the nslookup failed		if (empty($output))		{			return NULL;		}		foreach ($output as $line)		{			$line = trim($line);			if (empty($line))			{				continue;			}			// Squash tabs and multiple whitespaces to a single whitespace.			$line = preg_replace('/\s+/', ' ', $line);			switch ($type)			{				case 'MX':					if (stripos($line, "$host MX") === 0)					{						return true;					}				break;				case 'NS':					if (stripos($line, "$host nameserver") === 0)					{						return true;					}				break;				case 'TXT':					if (stripos($line, "$host text") === 0)					{						return true;					}				break;				case 'CNAME':					if (stripos($line, "$host canonical name") === 0)					{						return true;					}				break;				default:				case 'AAAA':					// AAAA records returned by nslookup on Windows XP/2003 have this format.					// Later Windows versions use the A record format below for AAAA records.					if (stripos($line, "$host AAAA IPv6 address") === 0)					{						return true;					}				// No break				case 'A':					if (!empty($host_matches))					{						// Second line						if (stripos($line, "Address: ") === 0)						{							return true;						}						else						{							$host_matches = false;						}					}					else if (stripos($line, "Name: $host") === 0)					{						// First line						$host_matches = true;					}				break;			}		}		return false;	}	return NULL;}// Handler, header and footer/*** Error and message handler, call with trigger_error if reqd*/function msg_handler($errno, $msg_text, $errfile, $errline){	global $cache, $db, $auth, $template, $config, $user;	global $phpEx, $phpbb_root_path, $msg_title, $msg_long_text;	// Do not display notices if we suppress them via @	if (error_reporting() == 0 && $errno != E_USER_ERROR && $errno != E_USER_WARNING && $errno != E_USER_NOTICE)	{		return;	}	// Message handler is stripping text. In case we need it, we are possible to define long text...	if (isset($msg_long_text) && $msg_long_text && !$msg_text)	{		$msg_text = $msg_long_text;	}	if (!defined('E_DEPRECATED'))	{		define('E_DEPRECATED', 8192);	}	switch ($errno)	{		case E_NOTICE:		case E_WARNING:			// Check the error reporting level and return if the error level does not match			// If DEBUG is defined the default level is E_ALL			if (($errno & ((defined('DEBUG')) ? E_ALL : error_reporting())) == 0)			{				return;			}			if (strpos($errfile, 'cache') === false && strpos($errfile, 'template.') === false)			{				$errfile = phpbb_filter_root_path($errfile);				$msg_text = phpbb_filter_root_path($msg_text);				$error_name = ($errno === E_WARNING) ? 'PHP Warning' : 'PHP Notice';				echo '<b>[phpBB Debug] ' . $error_name . '</b>: in file <b>' . $errfile . '</b> on line <b>' . $errline . '</b>: <b>' . $msg_text . '</b><br />' . "\n";				// we are writing an image - the user won't see the debug, so let's place it in the log				if (defined('IMAGE_OUTPUT') || defined('IN_CRON'))				{					add_log('critical', 'LOG_IMAGE_GENERATION_ERROR', $errfile, $errline, $msg_text);				}				// echo '<br /><br />BACKTRACE<br />' . get_backtrace() . '<br />' . "\n";			}			return;		break;		case E_USER_ERROR:			if (!empty($user) && !empty($user->lang))			{				$msg_text = (!empty($user->lang[$msg_text])) ? $user->lang[$msg_text] : $msg_text;				$msg_title = (!isset($msg_title)) ? $user->lang['GENERAL_ERROR'] : ((!empty($user->lang[$msg_title])) ? $user->lang[$msg_title] : $msg_title);				$l_return_index = sprintf($user->lang['RETURN_INDEX'], '<a href="' . $phpbb_root_path . '">', '</a>');				$l_notify = '';				if (!empty($config['board_contact']))				{					$l_notify = '<p>' . sprintf($user->lang['NOTIFY_ADMIN_EMAIL'], $config['board_contact']) . '</p>';				}			}			else			{				$msg_title = 'General Error';				$l_return_index = '<a href="' . $phpbb_root_path . '">Return to index page</a>';				$l_notify = '';				if (!empty($config['board_contact']))				{					$l_notify = '<p>Please notify the board administrator or webmaster: <a href="mailto:' . $config['board_contact'] . '">' . $config['board_contact'] . '</a></p>';				}			}			if ((defined('DEBUG') || defined('IN_CRON') || defined('IMAGE_OUTPUT')) && isset($db))			{				// let's avoid loops				$db->sql_return_on_error(true);				add_log('critical', 'LOG_GENERAL_ERROR', $msg_title, $msg_text);				$db->sql_return_on_error(false);			}			// Do not send 200 OK, but service unavailable on errors			send_status_line(503, 'Service Unavailable');			garbage_collection();			// Try to not call the adm page data...			echo '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">';			echo '<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr">';			echo '<head>';			echo '<meta http-equiv="content-type" content="text/html; charset=utf-8" />';			echo '<title>' . $msg_title . '</title>';			echo '<style type="text/css">' . "\n" . '/* <![CDATA[ */' . "\n";			echo '* { margin: 0; padding: 0; } html { font-size: 100%; height: 100%; margin-bottom: 1px; background-color: #E4EDF0; } body { font-family: "Lucida Grande", Verdana, Helvetica, Arial, sans-serif; color: #536482; background: #E4EDF0; font-size: 62.5%; margin: 0; } ';			echo 'a:link, a:active, a:visited { color: #006699; text-decoration: none; } a:hover { color: #DD6900; text-decoration: underline; } ';			echo '#wrap { padding: 0 20px 15px 20px; min-width: 615px; } #page-header { text-align: right; height: 40px; } #page-footer { clear: both; font-size: 1em; text-align: center; } ';			echo '.panel { margin: 4px 0; background-color: #FFFFFF; border: solid 1px  #A9B8C2; } ';			echo '#errorpage #page-header a { font-weight: bold; line-height: 6em; } #errorpage #content { padding: 10px; } #errorpage #content h1 { line-height: 1.2em; margin-bottom: 0; color: #DF075C; } ';			echo '#errorpage #content div { margin-top: 20px; margin-bottom: 5px; border-bottom: 1px solid #CCCCCC; padding-bottom: 5px; color: #333333; font: bold 1.2em "Lucida Grande", Arial, Helvetica, sans-serif; text-decoration: none; line-height: 120%; text-align: left; } ';			echo "\n" . '/* ]]> */' . "\n";			echo '</style>';			echo '</head>';			echo '<body id="errorpage">';			echo '<div id="wrap">';			echo '	<div id="page-header">';			echo '		' . $l_return_index;			echo '	</div>';			echo '	<div id="acp">';			echo '	<div class="panel">';			echo '		<div id="content">';			echo '			<h1>' . $msg_title . '</h1>';			echo '			<div>' . $msg_text . '</div>';			echo $l_notify;			echo '		</div>';			echo '	</div>';			echo '	</div>';			echo '	<div id="page-footer">';			echo '		Powered by <a href="http://www.phpbb.com/">phpBB</a>&reg; Forum Software &copy; phpBB Group';			echo '	</div>';			echo '</div>';			echo '</body>';			echo '</html>';			exit_handler();			// On a fatal error (and E_USER_ERROR *is* fatal) we never want other scripts to continue and force an exit here.			exit;		break;		case E_USER_WARNING:		case E_USER_NOTICE:			define('IN_ERROR_HANDLER', true);			if (empty($user->data))			{				$user->session_begin();			}			// We re-init the auth array to get correct results on login/logout			$auth->acl($user->data);			if (empty($user->lang))			{				$user->setup();			}			if ($msg_text == 'ERROR_NO_ATTACHMENT' || $msg_text == 'NO_FORUM' || $msg_text == 'NO_TOPIC' || $msg_text == 'NO_USER')			{				send_status_line(404, 'Not Found');			}			$msg_text = (!empty($user->lang[$msg_text])) ? $user->lang[$msg_text] : $msg_text;			$msg_title = (!isset($msg_title)) ? $user->lang['INFORMATION'] : ((!empty($user->lang[$msg_title])) ? $user->lang[$msg_title] : $msg_title);			if (!defined('HEADER_INC'))			{				if (defined('IN_ADMIN') && isset($user->data['session_admin']) && $user->data['session_admin'])				{					adm_page_header($msg_title);				}				else				{					page_header($msg_title, false);				}			}			$template->set_filenames(array(				'body' => 'message_body.html')			);			$template->assign_vars(array(				'MESSAGE_TITLE'		=> $msg_title,				'MESSAGE_TEXT'		=> $msg_text,				'S_USER_WARNING'	=> ($errno == E_USER_WARNING) ? true : false,				'S_USER_NOTICE'		=> ($errno == E_USER_NOTICE) ? true : false)			);			// We do not want the cron script to be called on error messages			define('IN_CRON', true);			if (defined('IN_ADMIN') && isset($user->data['session_admin']) && $user->data['session_admin'])			{				adm_page_footer();			}			else			{				page_footer();			}			exit_handler();		break;		// PHP4 compatibility		case E_DEPRECATED:			return true;		break;	}	// If we notice an error not handled here we pass this back to PHP by returning false	// This may not work for all php versions	return false;}/*** Removes absolute path to phpBB root directory from error messages* and converts backslashes to forward slashes.** @param string $errfile	Absolute file path*							(e.g. /var/www/phpbb3/phpBB/includes/functions.php)*							Please note that if $errfile is outside of the phpBB root,*							the root path will not be found and can not be filtered.* @return string			Relative file path*							(e.g. /includes/functions.php)*/function phpbb_filter_root_path($errfile){	static $root_path;	if (empty($root_path))	{		$root_path = phpbb_realpath(dirname(__FILE__) . '/../');	}	return str_replace(array($root_path, '\\'), array('[ROOT]', '/'), $errfile);}/*** Queries the session table to get information about online guests* @param int $item_id Limits the search to the item with this id* @param string $item The name of the item which is stored in the session table as session_{$item}_id* @return int The number of active distinct guest sessions*/function obtain_guest_count($item_id = 0, $item = 'forum'){	global $db, $config;	if ($item_id)	{		$reading_sql = ' AND s.session_' . $item . '_id = ' . (int) $item_id;	}	else	{		$reading_sql = '';	}	$time = (time() - (intval($config['load_online_time']) * 60));	// Get number of online guests	if ($db->sql_layer === 'sqlite')	{		$sql = 'SELECT COUNT(session_ip) as num_guests			FROM (				SELECT DISTINCT s.session_ip				FROM ' . SESSIONS_TABLE . ' s				WHERE s.session_user_id = ' . ANONYMOUS . '					AND s.session_time >= ' . ($time - ((int) ($time % 60))) .				$reading_sql .			')';	}	else	{		$sql = 'SELECT COUNT(DISTINCT s.session_ip) as num_guests			FROM ' . SESSIONS_TABLE . ' s			WHERE s.session_user_id = ' . ANONYMOUS . '				AND s.session_time >= ' . ($time - ((int) ($time % 60))) .			$reading_sql;	}	$result = $db->sql_query($sql);	$guests_online = (int) $db->sql_fetchfield('num_guests');	$db->sql_freeresult($result);	return $guests_online;}/*** Queries the session table to get information about online users* @param int $item_id Limits the search to the item with this id* @param string $item The name of the item which is stored in the session table as session_{$item}_id* @return array An array containing the ids of online, hidden and visible users, as well as statistical info*/function obtain_users_online($item_id = 0, $item = 'forum'){	global $db, $config, $user;	$reading_sql = '';	if ($item_id !== 0)	{		$reading_sql = ' AND s.session_' . $item . '_id = ' . (int) $item_id;	}	$online_users = array(		'online_users'			=> array(),		'hidden_users'			=> array(),		'total_online'			=> 0,		'visible_online'		=> 0,		'hidden_online'			=> 0,		'guests_online'			=> 0,	);	if ($config['load_online_guests'])	{		$online_users['guests_online'] = obtain_guest_count($item_id, $item);	}	// a little discrete magic to cache this for 30 seconds	$time = (time() - (intval($config['load_online_time']) * 60));	$sql = 'SELECT s.session_user_id, s.session_ip, s.session_viewonline		FROM ' . SESSIONS_TABLE . ' s		WHERE s.session_time >= ' . ($time - ((int) ($time % 30))) .			$reading_sql .		' AND s.session_user_id <> ' . ANONYMOUS;	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		// Skip multiple sessions for one user		if (!isset($online_users['online_users'][$row['session_user_id']]))		{			$online_users['online_users'][$row['session_user_id']] = (int) $row['session_user_id'];			if ($row['session_viewonline'])			{				$online_users['visible_online']++;			}			else			{				$online_users['hidden_users'][$row['session_user_id']] = (int) $row['session_user_id'];				$online_users['hidden_online']++;			}		}	}	$online_users['total_online'] = $online_users['guests_online'] + $online_users['visible_online'] + $online_users['hidden_online'];	$db->sql_freeresult($result);	return $online_users;}/*** Uses the result of obtain_users_online to generate a localized, readable representation.* @param mixed $online_users result of obtain_users_online - array with user_id lists for total, hidden and visible users, and statistics* @param int $item_id Indicate that the data is limited to one item and not global* @param string $item The name of the item which is stored in the session table as session_{$item}_id* @return array An array containing the string for output to the template*/function obtain_users_online_string($online_users, $item_id = 0, $item = 'forum'){	global $config, $db, $user, $auth;	$user_online_link = $online_userlist = '';	// Need caps version of $item for language-strings	$item_caps = strtoupper($item);	if (sizeof($online_users['online_users']))	{		$sql = 'SELECT username, username_clean, user_id, user_type, user_allow_viewonline, user_colour				FROM ' . USERS_TABLE . '				WHERE ' . $db->sql_in_set('user_id', $online_users['online_users']) . '				ORDER BY username_clean ASC';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			// User is logged in and therefore not a guest			if ($row['user_id'] != ANONYMOUS)			{				if (isset($online_users['hidden_users'][$row['user_id']]))				{					$row['username'] = '<em>' . $row['username'] . '</em>';				}				if (!isset($online_users['hidden_users'][$row['user_id']]) || $auth->acl_get('u_viewonline'))				{					$user_online_link = get_username_string(($row['user_type'] <> USER_IGNORE) ? 'full' : 'no_profile', $row['user_id'], $row['username'], $row['user_colour']);					$online_userlist .= ($online_userlist != '') ? ', ' . $user_online_link : $user_online_link;				}			}		}		$db->sql_freeresult($result);	}	if (!$online_userlist)	{		$online_userlist = $user->lang['NO_ONLINE_USERS'];	}	if ($item_id === 0)	{		$online_userlist = $user->lang['REGISTERED_USERS'] . ' ' . $online_userlist;	}	else if ($config['load_online_guests'])	{		$l_online = ($online_users['guests_online'] === 1) ? $user->lang['BROWSING_' . $item_caps . '_GUEST'] : $user->lang['BROWSING_' . $item_caps . '_GUESTS'];		$online_userlist = sprintf($l_online, $online_userlist, $online_users['guests_online']);	}	else	{		$online_userlist = sprintf($user->lang['BROWSING_' . $item_caps], $online_userlist);	}	// Build online listing	$vars_online = array(		'ONLINE'	=> array('total_online', 'l_t_user_s', 0),		'REG'		=> array('visible_online', 'l_r_user_s', !$config['load_online_guests']),		'HIDDEN'	=> array('hidden_online', 'l_h_user_s', $config['load_online_guests']),		'GUEST'		=> array('guests_online', 'l_g_user_s', 0)	);	foreach ($vars_online as $l_prefix => $var_ary)	{		if ($var_ary[2])		{			$l_suffix = '_AND';		}		else		{			$l_suffix = '';		}		switch ($online_users[$var_ary[0]])		{			case 0:				${$var_ary[1]} = $user->lang[$l_prefix . '_USERS_ZERO_TOTAL' . $l_suffix];			break;			case 1:				${$var_ary[1]} = $user->lang[$l_prefix . '_USER_TOTAL' . $l_suffix];			break;			default:				${$var_ary[1]} = $user->lang[$l_prefix . '_USERS_TOTAL' . $l_suffix];			break;		}	}	unset($vars_online);	$l_online_users = sprintf($l_t_user_s, $online_users['total_online']);	$l_online_users .= sprintf($l_r_user_s, $online_users['visible_online']);	$l_online_users .= sprintf($l_h_user_s, $online_users['hidden_online']);	if ($config['load_online_guests'])	{		$l_online_users .= sprintf($l_g_user_s, $online_users['guests_online']);	}	return array(		'online_userlist'	=> $online_userlist,		'l_online_users'	=> $l_online_users,	);}/*** Get option bitfield from custom data** @param int	$bit		The bit/value to get* @param int	$data		Current bitfield to check* @return bool	Returns true if value of constant is set in bitfield, else false*/function phpbb_optionget($bit, $data){	return ($data & 1 << (int) $bit) ? true : false;}/*** Set option bitfield** @param int	$bit		The bit/value to set/unset* @param bool	$set		True if option should be set, false if option should be unset.* @param int	$data		Current bitfield to change** @return int	The new bitfield*/function phpbb_optionset($bit, $set, $data){	if ($set && !($data & 1 << $bit))	{		$data += 1 << $bit;	}	else if (!$set && ($data & 1 << $bit))	{		$data -= 1 << $bit;	}	return $data;}/*** Login using http authenticate.** @param array	$param		Parameter array, see $param_defaults array.** @return void*/function phpbb_http_login($param){	global $auth, $user;	global $config;	$param_defaults = array(		'auth_message'	=> '',		'autologin'		=> false,		'viewonline'	=> true,		'admin'			=> false,	);	// Overwrite default values with passed values	$param = array_merge($param_defaults, $param);	// User is already logged in	// We will not overwrite his session	if (!empty($user->data['is_registered']))	{		return;	}	// $_SERVER keys to check	$username_keys = array(		'PHP_AUTH_USER',		'Authorization',		'REMOTE_USER', 'REDIRECT_REMOTE_USER',		'HTTP_AUTHORIZATION', 'REDIRECT_HTTP_AUTHORIZATION',		'REMOTE_AUTHORIZATION', 'REDIRECT_REMOTE_AUTHORIZATION',		'AUTH_USER',	);	$password_keys = array(		'PHP_AUTH_PW',		'REMOTE_PASSWORD',		'AUTH_PASSWORD',	);	$username = null;	foreach ($username_keys as $k)	{		if (isset($_SERVER[$k]))		{			$username = $_SERVER[$k];			break;		}	}	$password = null;	foreach ($password_keys as $k)	{		if (isset($_SERVER[$k]))		{			$password = $_SERVER[$k];			break;		}	}	// Decode encoded information (IIS, CGI, FastCGI etc.)	if (!is_null($username) && is_null($password) && strpos($username, 'Basic ') === 0)	{		list($username, $password) = explode(':', base64_decode(substr($username, 6)), 2);	}	if (!is_null($username) && !is_null($password))	{		set_var($username, $username, 'string', true);		set_var($password, $password, 'string', true);		$auth_result = $auth->login($username, $password, $param['autologin'], $param['viewonline'], $param['admin']);		if ($auth_result['status'] == LOGIN_SUCCESS)		{			return;		}		else if ($auth_result['status'] == LOGIN_ERROR_ATTEMPTS)		{			send_status_line(401, 'Unauthorized');			trigger_error('NOT_AUTHORISED');		}	}	// Prepend sitename to auth_message	$param['auth_message'] = ($param['auth_message'] === '') ? $config['sitename'] : $config['sitename'] . ' - ' . $param['auth_message'];	// We should probably filter out non-ASCII characters - RFC2616	$param['auth_message'] = preg_replace('/[\x80-\xFF]/', '?', $param['auth_message']);	header('WWW-Authenticate: Basic realm="' . $param['auth_message'] . '"');	send_status_line(401, 'Unauthorized');	trigger_error('NOT_AUTHORISED');}/*** Generate page header*/function page_header($page_title = '', $display_online_list = true, $item_id = 0, $item = 'forum'){	global $db, $config, $template, $SID, $_SID, $_EXTRA_URL, $user, $auth, $phpEx, $phpbb_root_path;	if (defined('HEADER_INC'))	{		return;	}	define('HEADER_INC', true);	// gzip_compression	if ($config['gzip_compress'])	{		// to avoid partially compressed output resulting in blank pages in		// the browser or error messages, compression is disabled in a few cases:		//		// 1) if headers have already been sent, this indicates plaintext output		//    has been started so further content must not be compressed		// 2) the length of the current output buffer is non-zero. This means		//    there is already some uncompressed content in this output buffer		//    so further output must not be compressed		// 3) if more than one level of output buffering is used because we		//    cannot test all output buffer level content lengths. One level		//    could be caused by php.ini output_buffering. Anything		//    beyond that is manual, so the code wrapping phpBB in output buffering		//    can easily compress the output itself.		//		if (@extension_loaded('zlib') && !headers_sent() && ob_get_level() <= 1 && ob_get_length() == 0)		{			ob_start('ob_gzhandler');		}	}	// Generate logged in/logged out status	if ($user->data['user_id'] != ANONYMOUS)	{		$u_login_logout = append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=logout', true, $user->session_id);		$l_login_logout = sprintf($user->lang['LOGOUT_USER'], $user->data['username']);	}	else	{		$u_login_logout = append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=login');		$l_login_logout = $user->lang['LOGIN'];	}	// Last visit date/time	$s_last_visit = ($user->data['user_id'] != ANONYMOUS) ? $user->format_date($user->data['session_last_visit']) : '';	// Get users online list ... if required	$l_online_users = $online_userlist = $l_online_record = $l_online_time = '';	if ($config['load_online'] && $config['load_online_time'] && $display_online_list)	{		/**		* Load online data:		* For obtaining another session column use $item and $item_id in the function-parameter, whereby the column is session_{$item}_id.		*/		$item_id = max($item_id, 0);		$online_users = obtain_users_online($item_id, $item);		$user_online_strings = obtain_users_online_string($online_users, $item_id, $item);		$l_online_users = $user_online_strings['l_online_users'];		$online_userlist = $user_online_strings['online_userlist'];		$total_online_users = $online_users['total_online'];		if ($total_online_users > $config['record_online_users'])		{			set_config('record_online_users', $total_online_users, true);			set_config('record_online_date', time(), true);		}		$l_online_record = sprintf($user->lang['RECORD_ONLINE_USERS'], $config['record_online_users'], $user->format_date($config['record_online_date'], false, true));		$l_online_time = ($config['load_online_time'] == 1) ? 'VIEW_ONLINE_TIME' : 'VIEW_ONLINE_TIMES';		$l_online_time = sprintf($user->lang[$l_online_time], $config['load_online_time']);	}	$l_privmsgs_text = $l_privmsgs_text_unread = '';	$s_privmsg_new = false;	// Obtain number of new private messages if user is logged in	if (!empty($user->data['is_registered']))	{		if ($user->data['user_new_privmsg'])		{			$l_message_new = ($user->data['user_new_privmsg'] == 1) ? $user->lang['NEW_PM'] : $user->lang['NEW_PMS'];			$l_privmsgs_text = sprintf($l_message_new, $user->data['user_new_privmsg']);			if (!$user->data['user_last_privmsg'] || $user->data['user_last_privmsg'] > $user->data['session_last_visit'])			{				$sql = 'UPDATE ' . USERS_TABLE . '					SET user_last_privmsg = ' . $user->data['session_last_visit'] . '					WHERE user_id = ' . $user->data['user_id'];				$db->sql_query($sql);				$s_privmsg_new = true;			}			else			{				$s_privmsg_new = false;			}		}		else		{			$l_privmsgs_text = $user->lang['NO_NEW_PM'];			$s_privmsg_new = false;		}		$l_privmsgs_text_unread = '';		if ($user->data['user_unread_privmsg'] && $user->data['user_unread_privmsg'] != $user->data['user_new_privmsg'])		{			$l_message_unread = ($user->data['user_unread_privmsg'] == 1) ? $user->lang['UNREAD_PM'] : $user->lang['UNREAD_PMS'];			$l_privmsgs_text_unread = sprintf($l_message_unread, $user->data['user_unread_privmsg']);		}	}	$forum_id = request_var('f', 0);	$topic_id = request_var('t', 0);	$s_feed_news = false;	// Get option for news	if ($config['feed_enable'])	{		$sql = 'SELECT forum_id			FROM ' . FORUMS_TABLE . '			WHERE ' . $db->sql_bit_and('forum_options', FORUM_OPTION_FEED_NEWS, '<> 0');		$result = $db->sql_query_limit($sql, 1, 0, 600);		$s_feed_news = (int) $db->sql_fetchfield('forum_id');		$db->sql_freeresult($result);	}	// Determine board url - we may need it later	$board_url = generate_board_url() . '/';	$web_path = (defined('PHPBB_USE_BOARD_URL_PATH') && PHPBB_USE_BOARD_URL_PATH) ? $board_url : $phpbb_root_path;	// Which timezone?	$tz = ($user->data['user_id'] != ANONYMOUS) ? strval(doubleval($user->data['user_timezone'])) : strval(doubleval($config['board_timezone']));	// Send a proper content-language to the output	$user_lang = $user->lang['USER_LANG'];	if (strpos($user_lang, '-x-') !== false)	{		$user_lang = substr($user_lang, 0, strpos($user_lang, '-x-'));	}	$s_search_hidden_fields = array();	if ($_SID)	{		$s_search_hidden_fields['sid'] = $_SID;	}	if (!empty($_EXTRA_URL))	{		foreach ($_EXTRA_URL as $url_param)		{			$url_param = explode('=', $url_param, 2);			$s_hidden_fields[$url_param[0]] = $url_param[1];		}	}	// The following assigns all _common_ variables that may be used at any point in a template.	$template->assign_vars(array(		'SITENAME'						=> $config['sitename'],		'SITE_DESCRIPTION'				=> $config['site_desc'],		'PAGE_TITLE'					=> $page_title,		'SCRIPT_NAME'					=> str_replace('.' . $phpEx, '', $user->page['page_name']),		'LAST_VISIT_DATE'				=> sprintf($user->lang['YOU_LAST_VISIT'], $s_last_visit),		'LAST_VISIT_YOU'				=> $s_last_visit,		'CURRENT_TIME'					=> sprintf($user->lang['CURRENT_TIME'], $user->format_date(time(), false, true)),		'TOTAL_USERS_ONLINE'			=> $l_online_users,		'LOGGED_IN_USER_LIST'			=> $online_userlist,		'RECORD_USERS'					=> $l_online_record,		'PRIVATE_MESSAGE_INFO'			=> $l_privmsgs_text,		'PRIVATE_MESSAGE_INFO_UNREAD'	=> $l_privmsgs_text_unread,		'S_USER_NEW_PRIVMSG'			=> $user->data['user_new_privmsg'],		'S_USER_UNREAD_PRIVMSG'			=> $user->data['user_unread_privmsg'],		'S_USER_NEW'					=> $user->data['user_new'],		'SID'				=> $SID,		'_SID'				=> $_SID,		'SESSION_ID'		=> $user->session_id,		'ROOT_PATH'			=> $phpbb_root_path,		'BOARD_URL'			=> $board_url,		'L_LOGIN_LOGOUT'	=> $l_login_logout,		'L_INDEX'			=> $user->lang['FORUM_INDEX'],		'L_ONLINE_EXPLAIN'	=> $l_online_time,		'U_PRIVATEMSGS'			=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=inbox'),		'U_RETURN_INBOX'		=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=inbox'),		'U_POPUP_PM'			=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=popup'),		'UA_POPUP_PM'			=> addslashes(append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=popup')),		'U_MEMBERLIST'			=> append_sid("{$phpbb_root_path}memberlist.$phpEx"),		'U_VIEWONLINE'			=> ($auth->acl_gets('u_viewprofile', 'a_user', 'a_useradd', 'a_userdel')) ? append_sid("{$phpbb_root_path}viewonline.$phpEx") : '',		'U_LOGIN_LOGOUT'		=> $u_login_logout,		'U_INDEX'				=> append_sid("{$phpbb_root_path}index.$phpEx"),		'U_SEARCH'				=> append_sid("{$phpbb_root_path}search.$phpEx"),		'U_REGISTER'			=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=register'),		'U_PROFILE'				=> append_sid("{$phpbb_root_path}ucp.$phpEx"),		'U_MODCP'				=> append_sid("{$phpbb_root_path}mcp.$phpEx", false, true, $user->session_id),		'U_FAQ'					=> append_sid("{$phpbb_root_path}faq.$phpEx"),		'U_SEARCH_SELF'			=> append_sid("{$phpbb_root_path}search.$phpEx", 'search_id=egosearch'),		'U_SEARCH_NEW'			=> append_sid("{$phpbb_root_path}search.$phpEx", 'search_id=newposts'),		'U_SEARCH_UNANSWERED'	=> append_sid("{$phpbb_root_path}search.$phpEx", 'search_id=unanswered'),		'U_SEARCH_UNREAD'		=> append_sid("{$phpbb_root_path}search.$phpEx", 'search_id=unreadposts'),		'U_SEARCH_ACTIVE_TOPICS'=> append_sid("{$phpbb_root_path}search.$phpEx", 'search_id=active_topics'),		'U_DELETE_COOKIES'		=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=delete_cookies'),		'U_TEAM'				=> ($user->data['user_id'] != ANONYMOUS && !$auth->acl_get('u_viewprofile')) ? '' : append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=leaders'),		'U_TERMS_USE'			=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=terms'),		'U_PRIVACY'				=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=privacy'),		'U_RESTORE_PERMISSIONS'	=> ($user->data['user_perm_from'] && $auth->acl_get('a_switchperm')) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=restore_perm') : '',		'U_FEED'				=> generate_board_url() . "/feed.$phpEx",		'S_USER_LOGGED_IN'		=> ($user->data['user_id'] != ANONYMOUS) ? true : false,		'S_AUTOLOGIN_ENABLED'	=> ($config['allow_autologin']) ? true : false,		'S_BOARD_DISABLED'		=> ($config['board_disable']) ? true : false,		'S_REGISTERED_USER'		=> (!empty($user->data['is_registered'])) ? true : false,		'S_IS_BOT'				=> (!empty($user->data['is_bot'])) ? true : false,		'S_USER_PM_POPUP'		=> $user->optionget('popuppm'),		'S_USER_LANG'			=> $user_lang,		'S_USER_BROWSER'		=> (isset($user->data['session_browser'])) ? $user->data['session_browser'] : $user->lang['UNKNOWN_BROWSER'],		'S_USERNAME'			=> $user->data['username'],		'S_CONTENT_DIRECTION'	=> $user->lang['DIRECTION'],		'S_CONTENT_FLOW_BEGIN'	=> ($user->lang['DIRECTION'] == 'ltr') ? 'left' : 'right',		'S_CONTENT_FLOW_END'	=> ($user->lang['DIRECTION'] == 'ltr') ? 'right' : 'left',		'S_CONTENT_ENCODING'	=> 'UTF-8',		'S_TIMEZONE'			=> ($user->data['user_dst'] || ($user->data['user_id'] == ANONYMOUS && $config['board_dst'])) ? sprintf($user->lang['ALL_TIMES'], $user->lang['tz'][$tz], $user->lang['tz']['dst']) : sprintf($user->lang['ALL_TIMES'], $user->lang['tz'][$tz], ''),		'S_DISPLAY_ONLINE_LIST'	=> ($l_online_time) ? 1 : 0,		'S_DISPLAY_SEARCH'		=> (!$config['load_search']) ? 0 : (isset($auth) ? ($auth->acl_get('u_search') && $auth->acl_getf_global('f_search')) : 1),		'S_DISPLAY_PM'			=> ($config['allow_privmsg'] && !empty($user->data['is_registered']) && ($auth->acl_get('u_readpm') || $auth->acl_get('u_sendpm'))) ? true : false,		'S_DISPLAY_MEMBERLIST'	=> (isset($auth)) ? $auth->acl_get('u_viewprofile') : 0,		'S_NEW_PM'				=> ($s_privmsg_new) ? 1 : 0,		'S_REGISTER_ENABLED'	=> ($config['require_activation'] != USER_ACTIVATION_DISABLE) ? true : false,		'S_FORUM_ID'			=> $forum_id,		'S_TOPIC_ID'			=> $topic_id,		'S_LOGIN_ACTION'		=> ((!defined('ADMIN_START')) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=login') : append_sid("index.$phpEx", false, true, $user->session_id)),		'S_LOGIN_REDIRECT'		=> build_hidden_fields(array('redirect' => build_url())),		'S_ENABLE_FEEDS'			=> ($config['feed_enable']) ? true : false,		'S_ENABLE_FEEDS_OVERALL'	=> ($config['feed_overall']) ? true : false,		'S_ENABLE_FEEDS_FORUMS'		=> ($config['feed_overall_forums']) ? true : false,		'S_ENABLE_FEEDS_TOPICS'		=> ($config['feed_topics_new']) ? true : false,		'S_ENABLE_FEEDS_TOPICS_ACTIVE'	=> ($config['feed_topics_active']) ? true : false,		'S_ENABLE_FEEDS_NEWS'		=> ($s_feed_news) ? true : false,		'S_LOAD_UNREADS'			=> ($config['load_unreads_search'] && ($config['load_anon_lastread'] || $user->data['is_registered'])) ? true : false,		'S_SEARCH_HIDDEN_FIELDS'	=> build_hidden_fields($s_search_hidden_fields),		'T_THEME_PATH'			=> "{$web_path}styles/" . $user->theme['theme_path'] . '/theme',		'T_TEMPLATE_PATH'		=> "{$web_path}styles/" . $user->theme['template_path'] . '/template',		'T_SUPER_TEMPLATE_PATH'	=> (isset($user->theme['template_inherit_path']) && $user->theme['template_inherit_path']) ? "{$web_path}styles/" . $user->theme['template_inherit_path'] . '/template' : "{$web_path}styles/" . $user->theme['template_path'] . '/template',		'T_IMAGESET_PATH'		=> "{$web_path}styles/" . $user->theme['imageset_path'] . '/imageset',		'T_IMAGESET_LANG_PATH'	=> "{$web_path}styles/" . $user->theme['imageset_path'] . '/imageset/' . $user->lang_name,		'T_IMAGES_PATH'			=> "{$web_path}images/",		'T_SMILIES_PATH'		=> "{$web_path}{$config['smilies_path']}/",		'T_AVATAR_PATH'			=> "{$web_path}{$config['avatar_path']}/",		'T_AVATAR_GALLERY_PATH'	=> "{$web_path}{$config['avatar_gallery_path']}/",		'T_ICONS_PATH'			=> "{$web_path}{$config['icons_path']}/",		'T_RANKS_PATH'			=> "{$web_path}{$config['ranks_path']}/",		'T_UPLOAD_PATH'			=> "{$web_path}{$config['upload_path']}/",		'T_STYLESHEET_LINK'		=> (!$user->theme['theme_storedb']) ? "{$web_path}styles/" . $user->theme['theme_path'] . '/theme/stylesheet.css' : append_sid("{$phpbb_root_path}style.$phpEx", 'id=' . $user->theme['style_id'] . '&amp;lang=' . $user->lang_name),		'T_STYLESHEET_NAME'		=> $user->theme['theme_name'],		'T_THEME_NAME'			=> $user->theme['theme_path'],		'T_TEMPLATE_NAME'		=> $user->theme['template_path'],		'T_SUPER_TEMPLATE_NAME'	=> (isset($user->theme['template_inherit_path']) && $user->theme['template_inherit_path']) ? $user->theme['template_inherit_path'] : $user->theme['template_path'],		'T_IMAGESET_NAME'		=> $user->theme['imageset_path'],		'T_IMAGESET_LANG_NAME'	=> $user->data['user_lang'],		'T_IMAGES'				=> 'images',		'T_SMILIES'				=> $config['smilies_path'],		'T_AVATAR'				=> $config['avatar_path'],		'T_AVATAR_GALLERY'		=> $config['avatar_gallery_path'],		'T_ICONS'				=> $config['icons_path'],		'T_RANKS'				=> $config['ranks_path'],		'T_UPLOAD'				=> $config['upload_path'],		'SITE_LOGO_IMG'			=> $user->img('site_logo'),		'A_COOKIE_SETTINGS'		=> addslashes('; path=' . $config['cookie_path'] . ((!$config['cookie_domain'] || $config['cookie_domain'] == 'localhost' || $config['cookie_domain'] == '127.0.0.1') ? '' : '; domain=' . $config['cookie_domain']) . ((!$config['cookie_secure']) ? '' : '; secure')),	));	// application/xhtml+xml not used because of IE	header('Content-type: text/html; charset=UTF-8');	header('Cache-Control: private, no-cache="set-cookie"');	header('Expires: 0');	header('Pragma: no-cache');	if (!empty($user->data['is_bot']))	{		// Let reverse proxies know we detected a bot.		header('X-PHPBB-IS-BOT: yes');	}	return;}/*** Generate page footer*/function page_footer($run_cron = true){	global $db, $config, $template, $user, $auth, $cache, $starttime, $phpbb_root_path, $phpEx;	// Output page creation time	if (defined('DEBUG'))	{		$mtime = explode(' ', microtime());		$totaltime = $mtime[0] + $mtime[1] - $starttime;		if (!empty($_REQUEST['explain']) && $auth->acl_get('a_') && defined('DEBUG_EXTRA') && method_exists($db, 'sql_report'))		{			$db->sql_report('display');		}		$debug_output = sprintf('Time : %.3fs | ' . $db->sql_num_queries() . ' Queries | GZIP : ' . (($config['gzip_compress'] && @extension_loaded('zlib')) ? 'On' : 'Off') . (($user->load) ? ' | Load : ' . $user->load : ''), $totaltime);		if ($auth->acl_get('a_') && defined('DEBUG_EXTRA'))		{			if (function_exists('memory_get_usage'))			{				if ($memory_usage = memory_get_usage())				{					global $base_memory_usage;					$memory_usage -= $base_memory_usage;					$memory_usage = get_formatted_filesize($memory_usage);					$debug_output .= ' | Memory Usage: ' . $memory_usage;				}			}			$debug_output .= ' | <a href="' . build_url() . '&amp;explain=1">Explain</a>';		}	}	$template->assign_vars(array(		'DEBUG_OUTPUT'			=> (defined('DEBUG')) ? $debug_output : '',		'TRANSLATION_INFO'		=> (!empty($user->lang['TRANSLATION_INFO'])) ? $user->lang['TRANSLATION_INFO'] : '',		'U_ACP' => ($auth->acl_get('a_') && !empty($user->data['is_registered'])) ? append_sid("{$phpbb_root_path}adm/index.$phpEx", false, true, $user->session_id) : '')	);	// Call cron-type script	$call_cron = false;	if (!defined('IN_CRON') && $run_cron && !$config['board_disable'] && !$user->data['is_bot'])	{		$call_cron = true;		$time_now = (!empty($user->time_now) && is_int($user->time_now)) ? $user->time_now : time();		// Any old lock present?		if (!empty($config['cron_lock']))		{			$cron_time = explode(' ', $config['cron_lock']);			// If 1 hour lock is present we do not call cron.php			if ($cron_time[0] + 3600 >= $time_now)			{				$call_cron = false;			}		}	}	// Call cron job?	if ($call_cron)	{		$cron_type = '';		if ($time_now - $config['queue_interval'] > $config['last_queue_run'] && !defined('IN_ADMIN') && file_exists($phpbb_root_path . 'cache/queue.' . $phpEx))		{			// Process email queue			$cron_type = 'queue';		}		else if (method_exists($cache, 'tidy') && $time_now - $config['cache_gc'] > $config['cache_last_gc'])		{			// Tidy the cache			$cron_type = 'tidy_cache';		}		else if ($config['warnings_expire_days'] && ($time_now - $config['warnings_gc'] > $config['warnings_last_gc']))		{			$cron_type = 'tidy_warnings';		}		else if ($time_now - $config['database_gc'] > $config['database_last_gc'])		{			// Tidy the database			$cron_type = 'tidy_database';		}		else if ($time_now - $config['search_gc'] > $config['search_last_gc'])		{			// Tidy the search			$cron_type = 'tidy_search';		}		else if ($time_now - $config['session_gc'] > $config['session_last_gc'])		{			$cron_type = 'tidy_sessions';		}		if ($cron_type)		{			$template->assign_var('RUN_CRON_TASK', '<img src="' . append_sid($phpbb_root_path . 'cron.' . $phpEx, 'cron_type=' . $cron_type) . '" width="1" height="1" alt="cron" />');		}	}	$template->display('body');	garbage_collection();	exit_handler();}/*** Closing the cache object and the database* Cool function name, eh? We might want to add operations to it later*/function garbage_collection(){	global $cache, $db;	// Unload cache, must be done before the DB connection if closed	if (!empty($cache))	{		$cache->unload();	}	// Close our DB connection.	if (!empty($db))	{		$db->sql_close();	}}/*** Handler for exit calls in phpBB.* This function supports hooks.** Note: This function is called after the template has been outputted.*/function exit_handler(){	global $phpbb_hook, $config;	if (!empty($phpbb_hook) && $phpbb_hook->call_hook(__FUNCTION__))	{		if ($phpbb_hook->hook_return(__FUNCTION__))		{			return $phpbb_hook->hook_return_result(__FUNCTION__);		}	}	// As a pre-caution... some setups display a blank page if the flush() is not there.	(ob_get_level() > 0) ? @ob_flush() : @flush();	exit;}/*** Handler for init calls in phpBB. This function is called in user::setup();* This function supports hooks.*/function phpbb_user_session_handler(){	global $phpbb_hook;	if (!empty($phpbb_hook) && $phpbb_hook->call_hook(__FUNCTION__))	{		if ($phpbb_hook->hook_return(__FUNCTION__))		{			return $phpbb_hook->hook_return_result(__FUNCTION__);		}	}	return;}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_users{	var $u_action;	var $p_master;	function acp_users(&$p_master)	{		$this->p_master = &$p_master;	}	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $table_prefix, $file_uploads;		$user->add_lang(array('posting', 'ucp', 'acp/users'));		$this->tpl_name = 'acp_users';		$this->page_title = 'ACP_USER_' . strtoupper($mode);		$error		= array();		$username	= utf8_normalize_nfc(request_var('username', '', true));		$user_id	= request_var('u', 0);		$action		= request_var('action', '');		$submit		= (isset($_POST['update']) && !isset($_POST['cancel'])) ? true : false;		$form_name = 'acp_users';		add_form_key($form_name);		// Whois (special case)		if ($action == 'whois')		{			include($phpbb_root_path . 'includes/functions_user.' . $phpEx);			$this->page_title = 'WHOIS';			$this->tpl_name = 'simple_body';			$user_ip = request_var('user_ip', '');			$domain = gethostbyaddr($user_ip);			$ipwhois = user_ipwhois($user_ip);			$template->assign_vars(array(				'MESSAGE_TITLE'		=> sprintf($user->lang['IP_WHOIS_FOR'], $domain),				'MESSAGE_TEXT'		=> nl2br($ipwhois))			);			return;		}		// Show user selection mask		if (!$username && !$user_id)		{			$this->page_title = 'SELECT_USER';			$template->assign_vars(array(				'U_ACTION'			=> $this->u_action,				'ANONYMOUS_USER_ID'	=> ANONYMOUS,				'S_SELECT_USER'		=> true,				'U_FIND_USERNAME'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=select_user&amp;field=username&amp;select_single=true'),			));			return;		}		if (!$user_id)		{			$sql = 'SELECT user_id				FROM ' . USERS_TABLE . "				WHERE username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";			$result = $db->sql_query($sql);			$user_id = (int) $db->sql_fetchfield('user_id');			$db->sql_freeresult($result);			if (!$user_id)			{				trigger_error($user->lang['NO_USER'] . adm_back_link($this->u_action), E_USER_WARNING);			}		}		// Generate content for all modes		$sql = 'SELECT u.*, s.*			FROM ' . USERS_TABLE . ' u				LEFT JOIN ' . SESSIONS_TABLE . ' s ON (s.session_user_id = u.user_id)			WHERE u.user_id = ' . $user_id . '			ORDER BY s.session_time DESC';		$result = $db->sql_query_limit($sql, 1);		$user_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$user_row)		{			trigger_error($user->lang['NO_USER'] . adm_back_link($this->u_action), E_USER_WARNING);		}		// Generate overall "header" for user admin		$s_form_options = '';		// Build modes dropdown list		$sql = 'SELECT module_mode, module_auth			FROM ' . MODULES_TABLE . "			WHERE module_basename = 'users'				AND module_enabled = 1				AND module_class = 'acp'			ORDER BY left_id, module_mode";		$result = $db->sql_query($sql);		$dropdown_modes = array();		while ($row = $db->sql_fetchrow($result))		{			if (!$this->p_master->module_auth($row['module_auth']))			{				continue;			}			$dropdown_modes[$row['module_mode']] = true;		}		$db->sql_freeresult($result);		foreach ($dropdown_modes as $module_mode => $null)		{			$selected = ($mode == $module_mode) ? ' selected="selected"' : '';			$s_form_options .= '<option value="' . $module_mode . '"' . $selected . '>' . $user->lang['ACP_USER_' . strtoupper($module_mode)] . '</option>';		}		$template->assign_vars(array(			'U_BACK'			=> $this->u_action,			'U_MODE_SELECT'		=> append_sid("{$phpbb_admin_path}index.$phpEx", "i=$id&amp;u=$user_id"),			'U_ACTION'			=> $this->u_action . '&amp;u=' . $user_id,			'S_FORM_OPTIONS'	=> $s_form_options,			'MANAGED_USERNAME'	=> $user_row['username'])		);		// Prevent normal users/admins change/view founders if they are not a founder by themselves		if ($user->data['user_type'] != USER_FOUNDER && $user_row['user_type'] == USER_FOUNDER)		{			trigger_error($user->lang['NOT_MANAGE_FOUNDER'] . adm_back_link($this->u_action), E_USER_WARNING);		}		switch ($mode)		{			case 'overview':				include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$user->add_lang('acp/ban');				$delete			= request_var('delete', 0);				$delete_type	= request_var('delete_type', '');				$ip				= request_var('ip', 'ip');				if ($submit)				{					// You can't delete the founder					if ($delete && $user_row['user_type'] != USER_FOUNDER)					{						if (!$auth->acl_get('a_userdel'))						{							trigger_error($user->lang['NO_AUTH_OPERATION'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);						}						// Check if the user wants to remove himself or the guest user account						if ($user_id == ANONYMOUS)						{							trigger_error($user->lang['CANNOT_REMOVE_ANONYMOUS'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);						}						if ($user_id == $user->data['user_id'])						{							trigger_error($user->lang['CANNOT_REMOVE_YOURSELF'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);						}						if ($delete_type)						{							if (confirm_box(true))							{								user_delete($delete_type, $user_id, $user_row['username']);								add_log('admin', 'LOG_USER_DELETED', $user_row['username']);								trigger_error($user->lang['USER_DELETED'] . adm_back_link($this->u_action));							}							else							{								confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(									'u'				=> $user_id,									'i'				=> $id,									'mode'			=> $mode,									'action'		=> $action,									'update'		=> true,									'delete'		=> 1,									'delete_type'	=> $delete_type))								);							}						}						else						{							trigger_error($user->lang['NO_MODE'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);						}					}					// Handle quicktool actions					switch ($action)					{						case 'banuser':						case 'banemail':						case 'banip':							if ($user_id == $user->data['user_id'])							{								trigger_error($user->lang['CANNOT_BAN_YOURSELF'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($user_id == ANONYMOUS)							{								trigger_error($user->lang['CANNOT_BAN_ANONYMOUS'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($user_row['user_type'] == USER_FOUNDER)							{								trigger_error($user->lang['CANNOT_BAN_FOUNDER'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if (!check_form_key($form_name))							{								trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							$ban = array();							switch ($action)							{								case 'banuser':									$ban[] = $user_row['username'];									$reason = 'USER_ADMIN_BAN_NAME_REASON';									$log = 'LOG_USER_BAN_USER';								break;								case 'banemail':									$ban[] = $user_row['user_email'];									$reason = 'USER_ADMIN_BAN_EMAIL_REASON';									$log = 'LOG_USER_BAN_EMAIL';								break;								case 'banip':									$ban[] = $user_row['user_ip'];									$sql = 'SELECT DISTINCT poster_ip										FROM ' . POSTS_TABLE . "										WHERE poster_id = $user_id";									$result = $db->sql_query($sql);									while ($row = $db->sql_fetchrow($result))									{										$ban[] = $row['poster_ip'];									}									$db->sql_freeresult($result);									$reason = 'USER_ADMIN_BAN_IP_REASON';									$log = 'LOG_USER_BAN_IP';								break;							}							$ban_reason = utf8_normalize_nfc(request_var('ban_reason', $user->lang[$reason], true));							$ban_give_reason = utf8_normalize_nfc(request_var('ban_give_reason', '', true));							// Log not used at the moment, we simply utilize the ban function.							$result = user_ban(substr($action, 3), $ban, 0, 0, 0, $ban_reason, $ban_give_reason);							trigger_error((($result === false) ? $user->lang['BAN_ALREADY_ENTERED'] : $user->lang['BAN_SUCCESSFUL']) . adm_back_link($this->u_action . '&amp;u=' . $user_id));						break;						case 'reactivate':							if ($user_id == $user->data['user_id'])							{								trigger_error($user->lang['CANNOT_FORCE_REACT_YOURSELF'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if (!check_form_key($form_name))							{								trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($user_row['user_type'] == USER_FOUNDER)							{								trigger_error($user->lang['CANNOT_FORCE_REACT_FOUNDER'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($user_row['user_type'] == USER_IGNORE)							{								trigger_error($user->lang['CANNOT_FORCE_REACT_BOT'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($config['email_enable'])							{								include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);								$server_url = generate_board_url();								$user_actkey = gen_rand_string(mt_rand(6, 10));								$email_template = ($user_row['user_type'] == USER_NORMAL) ? 'user_reactivate_account' : 'user_resend_inactive';								if ($user_row['user_type'] == USER_NORMAL)								{									user_active_flip('deactivate', $user_id, INACTIVE_REMIND);									$sql = 'UPDATE ' . USERS_TABLE . "										SET user_actkey = '" . $db->sql_escape($user_actkey) . "'										WHERE user_id = $user_id";									$db->sql_query($sql);								}								else								{									// Grabbing the last confirm key - we only send a reminder									$sql = 'SELECT user_actkey										FROM ' . USERS_TABLE . '										WHERE user_id = ' . $user_id;									$result = $db->sql_query($sql);									$user_actkey = (string) $db->sql_fetchfield('user_actkey');									$db->sql_freeresult($result);								}								$messenger = new messenger(false);								$messenger->template($email_template, $user_row['user_lang']);								$messenger->to($user_row['user_email'], $user_row['username']);								$messenger->anti_abuse_headers($config, $user);								$messenger->assign_vars(array(									'WELCOME_MSG'	=> htmlspecialchars_decode(sprintf($user->lang['WELCOME_SUBJECT'], $config['sitename'])),									'USERNAME'		=> htmlspecialchars_decode($user_row['username']),									'U_ACTIVATE'	=> "$server_url/ucp.$phpEx?mode=activate&u={$user_row['user_id']}&k=$user_actkey")								);								$messenger->send(NOTIFY_EMAIL);								add_log('admin', 'LOG_USER_REACTIVATE', $user_row['username']);								add_log('user', $user_id, 'LOG_USER_REACTIVATE_USER');								trigger_error($user->lang['FORCE_REACTIVATION_SUCCESS'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));							}						break;						case 'active':							if ($user_id == $user->data['user_id'])							{								// It is only deactivation since the user is already activated (else he would not have reached this page)								trigger_error($user->lang['CANNOT_DEACTIVATE_YOURSELF'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if (!check_form_key($form_name))							{								trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($user_row['user_type'] == USER_FOUNDER)							{								trigger_error($user->lang['CANNOT_DEACTIVATE_FOUNDER'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($user_row['user_type'] == USER_IGNORE)							{								trigger_error($user->lang['CANNOT_DEACTIVATE_BOT'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							user_active_flip('flip', $user_id);							if ($user_row['user_type'] == USER_INACTIVE)							{								if ($config['require_activation'] == USER_ACTIVATION_ADMIN)								{									include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);									$messenger = new messenger(false);									$messenger->template('admin_welcome_activated', $user_row['user_lang']);									$messenger->to($user_row['user_email'], $user_row['username']);									$messenger->anti_abuse_headers($config, $user);									$messenger->assign_vars(array(										'USERNAME'	=> htmlspecialchars_decode($user_row['username']))									);									$messenger->send(NOTIFY_EMAIL);								}							}							$message = ($user_row['user_type'] == USER_INACTIVE) ? 'USER_ADMIN_ACTIVATED' : 'USER_ADMIN_DEACTIVED';							$log = ($user_row['user_type'] == USER_INACTIVE) ? 'LOG_USER_ACTIVE' : 'LOG_USER_INACTIVE';							add_log('admin', $log, $user_row['username']);							add_log('user', $user_id, $log . '_USER');							trigger_error($user->lang[$message] . adm_back_link($this->u_action . '&amp;u=' . $user_id));						break;						case 'delsig':							if (!check_form_key($form_name))							{								trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							$sql_ary = array(								'user_sig'					=> '',								'user_sig_bbcode_uid'		=> '',								'user_sig_bbcode_bitfield'	=> ''							);							$sql = 'UPDATE ' . USERS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "								WHERE user_id = $user_id";							$db->sql_query($sql);							add_log('admin', 'LOG_USER_DEL_SIG', $user_row['username']);							add_log('user', $user_id, 'LOG_USER_DEL_SIG_USER');							trigger_error($user->lang['USER_ADMIN_SIG_REMOVED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));						break;						case 'delavatar':							if (!check_form_key($form_name))							{								trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							$sql_ary = array(								'user_avatar'			=> '',								'user_avatar_type'		=> 0,								'user_avatar_width'		=> 0,								'user_avatar_height'	=> 0,							);							$sql = 'UPDATE ' . USERS_TABLE . '								SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "								WHERE user_id = $user_id";							$db->sql_query($sql);							// Delete old avatar if present							if ($user_row['user_avatar'] && $user_row['user_avatar_type'] != AVATAR_GALLERY)							{								avatar_delete('user', $user_row);							}							add_log('admin', 'LOG_USER_DEL_AVATAR', $user_row['username']);							add_log('user', $user_id, 'LOG_USER_DEL_AVATAR_USER');							trigger_error($user->lang['USER_ADMIN_AVATAR_REMOVED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));						break;						case 'delposts':							if (confirm_box(true))							{								// Delete posts, attachments, etc.								delete_posts('poster_id', $user_id);								add_log('admin', 'LOG_USER_DEL_POSTS', $user_row['username']);								trigger_error($user->lang['USER_POSTS_DELETED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));							}							else							{								confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(									'u'				=> $user_id,									'i'				=> $id,									'mode'			=> $mode,									'action'		=> $action,									'update'		=> true))								);							}						break;						case 'delattach':							if (confirm_box(true))							{								delete_attachments('user', $user_id);								add_log('admin', 'LOG_USER_DEL_ATTACH', $user_row['username']);								trigger_error($user->lang['USER_ATTACHMENTS_REMOVED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));							}							else							{								confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(									'u'				=> $user_id,									'i'				=> $id,									'mode'			=> $mode,									'action'		=> $action,									'update'		=> true))								);							}						break;						case 'deloutbox':							if (confirm_box(true))							{								$msg_ids = array();								$lang = 'EMPTY';								$sql = 'SELECT msg_id									FROM ' . PRIVMSGS_TO_TABLE . "									WHERE author_id = $user_id										AND folder_id = " . PRIVMSGS_OUTBOX;								$result = $db->sql_query($sql);								if ($row = $db->sql_fetchrow($result))								{									if (!function_exists('delete_pm'))									{										include($phpbb_root_path . 'includes/functions_privmsgs.' . $phpEx);									}									do									{										$msg_ids[] = (int) $row['msg_id'];									}									while ($row = $db->sql_fetchrow($result));									$db->sql_freeresult($result);									delete_pm($user_id, $msg_ids, PRIVMSGS_OUTBOX);									add_log('admin', 'LOG_USER_DEL_OUTBOX', $user_row['username']);									$lang = 'EMPTIED';								}								$db->sql_freeresult($result);								trigger_error($user->lang['USER_OUTBOX_' . $lang] . adm_back_link($this->u_action . '&amp;u=' . $user_id));							}							else							{								confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(									'u'				=> $user_id,									'i'				=> $id,									'mode'			=> $mode,									'action'		=> $action,									'update'		=> true))								);							}						break;						case 'moveposts':							if (!check_form_key($form_name))							{								trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							$user->add_lang('acp/forums');							$new_forum_id = request_var('new_f', 0);							if (!$new_forum_id)							{								$this->page_title = 'USER_ADMIN_MOVE_POSTS';								$template->assign_vars(array(									'S_SELECT_FORUM'		=> true,									'U_ACTION'				=> $this->u_action . "&amp;action=$action&amp;u=$user_id",									'U_BACK'				=> $this->u_action . "&amp;u=$user_id",									'S_FORUM_OPTIONS'		=> make_forum_select(false, false, false, true))								);								return;							}							// Is the new forum postable to?							$sql = 'SELECT forum_name, forum_type								FROM ' . FORUMS_TABLE . "								WHERE forum_id = $new_forum_id";							$result = $db->sql_query($sql);							$forum_info = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							if (!$forum_info)							{								trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($forum_info['forum_type'] != FORUM_POST)							{								trigger_error($user->lang['MOVE_POSTS_NO_POSTABLE_FORUM'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							// Two stage?							// Move topics comprising only posts from this user							$topic_id_ary = $move_topic_ary = $move_post_ary = $new_topic_id_ary = array();							$forum_id_ary = array($new_forum_id);							$sql = 'SELECT topic_id, COUNT(post_id) AS total_posts								FROM ' . POSTS_TABLE . "								WHERE poster_id = $user_id									AND forum_id <> $new_forum_id								GROUP BY topic_id";							$result = $db->sql_query($sql);							while ($row = $db->sql_fetchrow($result))							{								$topic_id_ary[$row['topic_id']] = $row['total_posts'];							}							$db->sql_freeresult($result);							if (sizeof($topic_id_ary))							{								$sql = 'SELECT topic_id, forum_id, topic_title, topic_replies, topic_replies_real, topic_attachment									FROM ' . TOPICS_TABLE . '									WHERE ' . $db->sql_in_set('topic_id', array_keys($topic_id_ary));								$result = $db->sql_query($sql);								while ($row = $db->sql_fetchrow($result))								{									if (max($row['topic_replies'], $row['topic_replies_real']) + 1 == $topic_id_ary[$row['topic_id']])									{										$move_topic_ary[] = $row['topic_id'];									}									else									{										$move_post_ary[$row['topic_id']]['title'] = $row['topic_title'];										$move_post_ary[$row['topic_id']]['attach'] = ($row['topic_attachment']) ? 1 : 0;									}									$forum_id_ary[] = $row['forum_id'];								}								$db->sql_freeresult($result);							}							// Entire topic comprises posts by this user, move these topics							if (sizeof($move_topic_ary))							{								move_topics($move_topic_ary, $new_forum_id, false);							}							if (sizeof($move_post_ary))							{								// Create new topic								// Update post_ids, report_ids, attachment_ids								foreach ($move_post_ary as $topic_id => $post_ary)								{									// Create new topic									$sql = 'INSERT INTO ' . TOPICS_TABLE . ' ' . $db->sql_build_array('INSERT', array(										'topic_poster'				=> $user_id,										'topic_time'				=> time(),										'forum_id' 					=> $new_forum_id,										'icon_id'					=> 0,										'topic_approved'			=> 1,										'topic_title' 				=> $post_ary['title'],										'topic_first_poster_name'	=> $user_row['username'],										'topic_type'				=> POST_NORMAL,										'topic_time_limit'			=> 0,										'topic_attachment'			=> $post_ary['attach'])									);									$db->sql_query($sql);									$new_topic_id = $db->sql_nextid();									// Move posts									$sql = 'UPDATE ' . POSTS_TABLE . "										SET forum_id = $new_forum_id, topic_id = $new_topic_id										WHERE topic_id = $topic_id											AND poster_id = $user_id";									$db->sql_query($sql);									if ($post_ary['attach'])									{										$sql = 'UPDATE ' . ATTACHMENTS_TABLE . "											SET topic_id = $new_topic_id											WHERE topic_id = $topic_id												AND poster_id = $user_id";										$db->sql_query($sql);									}									$new_topic_id_ary[] = $new_topic_id;								}							}							$forum_id_ary = array_unique($forum_id_ary);							$topic_id_ary = array_unique(array_merge(array_keys($topic_id_ary), $new_topic_id_ary));							if (sizeof($topic_id_ary))							{								sync('topic_reported', 'topic_id', $topic_id_ary);								sync('topic', 'topic_id', $topic_id_ary);							}							if (sizeof($forum_id_ary))							{								sync('forum', 'forum_id', $forum_id_ary, false, true);							}							add_log('admin', 'LOG_USER_MOVE_POSTS', $user_row['username'], $forum_info['forum_name']);							add_log('user', $user_id, 'LOG_USER_MOVE_POSTS_USER', $forum_info['forum_name']);							trigger_error($user->lang['USER_POSTS_MOVED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));						break;						case 'leave_nr':							if (confirm_box(true))							{								remove_newly_registered($user_id, $user_row);								add_log('admin', 'LOG_USER_REMOVED_NR', $user_row['username']);								trigger_error($user->lang['USER_LIFTED_NR'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));							}							else							{								confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(									'u'				=> $user_id,									'i'				=> $id,									'mode'			=> $mode,									'action'		=> $action,									'update'		=> true))								);							}						break;					}					// Handle registration info updates					$data = array(						'username'			=> utf8_normalize_nfc(request_var('user', $user_row['username'], true)),						'user_founder'		=> request_var('user_founder', ($user_row['user_type'] == USER_FOUNDER) ? 1 : 0),						'email'				=> strtolower(request_var('user_email', $user_row['user_email'])),						'email_confirm'		=> strtolower(request_var('email_confirm', '')),						'new_password'		=> request_var('new_password', '', true),						'password_confirm'	=> request_var('password_confirm', '', true),					);					// Validation data - we do not check the password complexity setting here					$check_ary = array(						'new_password'		=> array(							array('string', true, $config['min_pass_chars'], $config['max_pass_chars']),							array('password')),						'password_confirm'	=> array('string', true, $config['min_pass_chars'], $config['max_pass_chars']),					);					// Check username if altered					if ($data['username'] != $user_row['username'])					{						$check_ary += array(							'username'			=> array(								array('string', false, $config['min_name_chars'], $config['max_name_chars']),								array('username', $user_row['username'])							),						);					}					// Check email if altered					if ($data['email'] != $user_row['user_email'])					{						$check_ary += array(							'email'				=> array(								array('string', false, 6, 60),								array('email', $user_row['user_email'])							),							'email_confirm'		=> array('string', true, 6, 60)						);					}					$error = validate_data($data, $check_ary);					if ($data['new_password'] && $data['password_confirm'] != $data['new_password'])					{						$error[] = 'NEW_PASSWORD_ERROR';					}					if ($data['email'] != $user_row['user_email'] && $data['email_confirm'] != $data['email'])					{						$error[] = 'NEW_EMAIL_ERROR';					}					if (!check_form_key($form_name))					{						$error[] = 'FORM_INVALID';					}					// Which updates do we need to do?					$update_username = ($user_row['username'] != $data['username']) ? $data['username'] : false;					$update_password = ($data['new_password'] && !phpbb_check_hash($data['new_password'], $user_row['user_password'])) ? true : false;					$update_email = ($data['email'] != $user_row['user_email']) ? $data['email'] : false;					if (!sizeof($error))					{						$sql_ary = array();						if ($user_row['user_type'] != USER_FOUNDER || $user->data['user_type'] == USER_FOUNDER)						{							// Only allow founders updating the founder status...							if ($user->data['user_type'] == USER_FOUNDER)							{								// Setting a normal member to be a founder								if ($data['user_founder'] && $user_row['user_type'] != USER_FOUNDER)								{									// Make sure the user is not setting an Inactive or ignored user to be a founder									if ($user_row['user_type'] == USER_IGNORE)									{										trigger_error($user->lang['CANNOT_SET_FOUNDER_IGNORED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);									}									if ($user_row['user_type'] == USER_INACTIVE)									{										trigger_error($user->lang['CANNOT_SET_FOUNDER_INACTIVE'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);									}									$sql_ary['user_type'] = USER_FOUNDER;								}								else if (!$data['user_founder'] && $user_row['user_type'] == USER_FOUNDER)								{									// Check if at least one founder is present									$sql = 'SELECT user_id										FROM ' . USERS_TABLE . '										WHERE user_type = ' . USER_FOUNDER . '											AND user_id <> ' . $user_id;									$result = $db->sql_query_limit($sql, 1);									$row = $db->sql_fetchrow($result);									$db->sql_freeresult($result);									if ($row)									{										$sql_ary['user_type'] = USER_NORMAL;									}									else									{										trigger_error($user->lang['AT_LEAST_ONE_FOUNDER'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);									}								}							}						}						if ($update_username !== false)						{							$sql_ary['username'] = $update_username;							$sql_ary['username_clean'] = utf8_clean_string($update_username);							add_log('user', $user_id, 'LOG_USER_UPDATE_NAME', $user_row['username'], $update_username);						}						if ($update_email !== false)						{							$sql_ary += array(								'user_email'		=> $update_email,								'user_email_hash'	=> phpbb_email_hash($update_email),							);							add_log('user', $user_id, 'LOG_USER_UPDATE_EMAIL', $user_row['username'], $user_row['user_email'], $update_email);						}						if ($update_password)						{							$sql_ary += array(								'user_password'		=> phpbb_hash($data['new_password']),								'user_passchg'		=> time(),								'user_pass_convert'	=> 0,							);							$user->reset_login_keys($user_id);							add_log('user', $user_id, 'LOG_USER_NEW_PASSWORD', $user_row['username']);						}						if (sizeof($sql_ary))						{							$sql = 'UPDATE ' . USERS_TABLE . '								SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '								WHERE user_id = ' . $user_id;							$db->sql_query($sql);						}						if ($update_username)						{							user_update_name($user_row['username'], $update_username);						}						// Let the users permissions being updated						$auth->acl_clear_prefetch($user_id);						add_log('admin', 'LOG_USER_USER_UPDATE', $data['username']);						trigger_error($user->lang['USER_OVERVIEW_UPDATED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				if ($user_id == $user->data['user_id'])				{					$quick_tool_ary = array('delsig' => 'DEL_SIG', 'delavatar' => 'DEL_AVATAR', 'moveposts' => 'MOVE_POSTS', 'delposts' => 'DEL_POSTS', 'delattach' => 'DEL_ATTACH', 'deloutbox' => 'DEL_OUTBOX');					if ($user_row['user_new'])					{						$quick_tool_ary['leave_nr'] = 'LEAVE_NR';					}				}				else				{					$quick_tool_ary = array();					if ($user_row['user_type'] != USER_FOUNDER)					{						$quick_tool_ary += array('banuser' => 'BAN_USER', 'banemail' => 'BAN_EMAIL', 'banip' => 'BAN_IP');					}					if ($user_row['user_type'] != USER_FOUNDER && $user_row['user_type'] != USER_IGNORE)					{						$quick_tool_ary += array('active' => (($user_row['user_type'] == USER_INACTIVE) ? 'ACTIVATE' : 'DEACTIVATE'));					}					$quick_tool_ary += array('delsig' => 'DEL_SIG', 'delavatar' => 'DEL_AVATAR', 'moveposts' => 'MOVE_POSTS', 'delposts' => 'DEL_POSTS', 'delattach' => 'DEL_ATTACH', 'deloutbox' => 'DEL_OUTBOX');					if ($config['email_enable'] && ($user_row['user_type'] == USER_NORMAL || $user_row['user_type'] == USER_INACTIVE))					{						$quick_tool_ary['reactivate'] = 'FORCE';					}					if ($user_row['user_new'])					{						$quick_tool_ary['leave_nr'] = 'LEAVE_NR';					}				}				$s_action_options = '<option class="sep" value="">' . $user->lang['SELECT_OPTION'] . '</option>';				foreach ($quick_tool_ary as $value => $lang)				{					$s_action_options .= '<option value="' . $value . '">' . $user->lang['USER_ADMIN_' . $lang] . '</option>';				}				if ($config['load_onlinetrack'])				{					$sql = 'SELECT MAX(session_time) AS session_time, MIN(session_viewonline) AS session_viewonline						FROM ' . SESSIONS_TABLE . "						WHERE session_user_id = $user_id";					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					$user_row['session_time'] = (isset($row['session_time'])) ? $row['session_time'] : 0;					$user_row['session_viewonline'] = (isset($row['session_viewonline'])) ? $row['session_viewonline'] : 0;					unset($row);				}				$last_visit = (!empty($user_row['session_time'])) ? $user_row['session_time'] : $user_row['user_lastvisit'];				$inactive_reason = '';				if ($user_row['user_type'] == USER_INACTIVE)				{					$inactive_reason = $user->lang['INACTIVE_REASON_UNKNOWN'];					switch ($user_row['user_inactive_reason'])					{						case INACTIVE_REGISTER:							$inactive_reason = $user->lang['INACTIVE_REASON_REGISTER'];						break;						case INACTIVE_PROFILE:							$inactive_reason = $user->lang['INACTIVE_REASON_PROFILE'];						break;						case INACTIVE_MANUAL:							$inactive_reason = $user->lang['INACTIVE_REASON_MANUAL'];						break;						case INACTIVE_REMIND:							$inactive_reason = $user->lang['INACTIVE_REASON_REMIND'];						break;					}				}				// Posts in Queue				$sql = 'SELECT COUNT(post_id) as posts_in_queue					FROM ' . POSTS_TABLE . '					WHERE poster_id = ' . $user_id . '						AND post_approved = 0';				$result = $db->sql_query($sql);				$user_row['posts_in_queue'] = (int) $db->sql_fetchfield('posts_in_queue');				$db->sql_freeresult($result);				$template->assign_vars(array(					'L_NAME_CHARS_EXPLAIN'		=> sprintf($user->lang[$config['allow_name_chars'] . '_EXPLAIN'], $config['min_name_chars'], $config['max_name_chars']),					'L_CHANGE_PASSWORD_EXPLAIN'	=> sprintf($user->lang[$config['pass_complex'] . '_EXPLAIN'], $config['min_pass_chars'], $config['max_pass_chars']),					'L_POSTS_IN_QUEUE'			=> $user->lang('NUM_POSTS_IN_QUEUE', $user_row['posts_in_queue']),					'S_FOUNDER'					=> ($user->data['user_type'] == USER_FOUNDER) ? true : false,					'S_OVERVIEW'		=> true,					'S_USER_IP'			=> ($user_row['user_ip']) ? true : false,					'S_USER_FOUNDER'	=> ($user_row['user_type'] == USER_FOUNDER) ? true : false,					'S_ACTION_OPTIONS'	=> $s_action_options,					'S_OWN_ACCOUNT'		=> ($user_id == $user->data['user_id']) ? true : false,					'S_USER_INACTIVE'	=> ($user_row['user_type'] == USER_INACTIVE) ? true : false,					'U_SHOW_IP'		=> $this->u_action . "&amp;u=$user_id&amp;ip=" . (($ip == 'ip') ? 'hostname' : 'ip'),					'U_WHOIS'		=> $this->u_action . "&amp;action=whois&amp;user_ip={$user_row['user_ip']}",					'U_MCP_QUEUE'	=> ($auth->acl_getf_global('m_approve')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue', true, $user->session_id) : '',					'U_SWITCH_PERMISSIONS'	=> ($auth->acl_get('a_switchperm') && $user->data['user_id'] != $user_row['user_id']) ? append_sid("{$phpbb_root_path}ucp.$phpEx", "mode=switch_perm&amp;u={$user_row['user_id']}&amp;hash=" . generate_link_hash('switchperm')) : '',					'POSTS_IN_QUEUE'	=> $user_row['posts_in_queue'],					'USER'				=> $user_row['username'],					'USER_REGISTERED'	=> $user->format_date($user_row['user_regdate']),					'REGISTERED_IP'		=> ($ip == 'hostname') ? gethostbyaddr($user_row['user_ip']) : $user_row['user_ip'],					'USER_LASTACTIVE'	=> ($last_visit) ? $user->format_date($last_visit) : ' - ',					'USER_EMAIL'		=> $user_row['user_email'],					'USER_WARNINGS'		=> $user_row['user_warnings'],					'USER_POSTS'		=> $user_row['user_posts'],					'USER_INACTIVE_REASON'	=> $inactive_reason,				));			break;			case 'feedback':				$user->add_lang('mcp');				// Set up general vars				$start		= request_var('start', 0);				$deletemark = (isset($_POST['delmarked'])) ? true : false;				$deleteall	= (isset($_POST['delall'])) ? true : false;				$marked		= request_var('mark', array(0));				$message	= utf8_normalize_nfc(request_var('message', '', true));				// Sort keys				$sort_days	= request_var('st', 0);				$sort_key	= request_var('sk', 't');				$sort_dir	= request_var('sd', 'd');				// Delete entries if requested and able				if (($deletemark || $deleteall) && $auth->acl_get('a_clearlogs'))				{					if (!check_form_key($form_name))					{						trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					$where_sql = '';					if ($deletemark && $marked)					{						$sql_in = array();						foreach ($marked as $mark)						{							$sql_in[] = $mark;						}						$where_sql = ' AND ' . $db->sql_in_set('log_id', $sql_in);						unset($sql_in);					}					if ($where_sql || $deleteall)					{						$sql = 'DELETE FROM ' . LOG_TABLE . '							WHERE log_type = ' . LOG_USERS . "							AND reportee_id = $user_id							$where_sql";						$db->sql_query($sql);						add_log('admin', 'LOG_CLEAR_USER', $user_row['username']);					}				}				if ($submit && $message)				{					if (!check_form_key($form_name))					{						trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					add_log('admin', 'LOG_USER_FEEDBACK', $user_row['username']);					add_log('mod', 0, 0, 'LOG_USER_FEEDBACK', $user_row['username']);					add_log('user', $user_id, 'LOG_USER_GENERAL', $message);					trigger_error($user->lang['USER_FEEDBACK_ADDED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));				}				// Sorting				$limit_days = array(0 => $user->lang['ALL_ENTRIES'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);				$sort_by_text = array('u' => $user->lang['SORT_USERNAME'], 't' => $user->lang['SORT_DATE'], 'i' => $user->lang['SORT_IP'], 'o' => $user->lang['SORT_ACTION']);				$sort_by_sql = array('u' => 'u.username_clean', 't' => 'l.log_time', 'i' => 'l.log_ip', 'o' => 'l.log_operation');				$s_limit_days = $s_sort_key = $s_sort_dir = $u_sort_param = '';				gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);				// Define where and sort sql for use in displaying logs				$sql_where = ($sort_days) ? (time() - ($sort_days * 86400)) : 0;				$sql_sort = $sort_by_sql[$sort_key] . ' ' . (($sort_dir == 'd') ? 'DESC' : 'ASC');				// Grab log data				$log_data = array();				$log_count = 0;				$start = view_log('user', $log_data, $log_count, $config['topics_per_page'], $start, 0, 0, $user_id, $sql_where, $sql_sort);				$template->assign_vars(array(					'S_FEEDBACK'	=> true,					'S_ON_PAGE'		=> on_page($log_count, $config['topics_per_page'], $start),					'PAGINATION'	=> generate_pagination($this->u_action . "&amp;u=$user_id&amp;$u_sort_param", $log_count, $config['topics_per_page'], $start, true),					'S_LIMIT_DAYS'	=> $s_limit_days,					'S_SORT_KEY'	=> $s_sort_key,					'S_SORT_DIR'	=> $s_sort_dir,					'S_CLEARLOGS'	=> $auth->acl_get('a_clearlogs'))				);				foreach ($log_data as $row)				{					$template->assign_block_vars('log', array(						'USERNAME'		=> $row['username_full'],						'IP'			=> $row['ip'],						'DATE'			=> $user->format_date($row['time']),						'ACTION'		=> nl2br($row['action']),						'ID'			=> $row['id'])					);				}			break;			case 'warnings':				$user->add_lang('mcp');				// Set up general vars				$start		= request_var('start', 0);				$deletemark	= (isset($_POST['delmarked'])) ? true : false;				$deleteall	= (isset($_POST['delall'])) ? true : false;				$confirm	= (isset($_POST['confirm'])) ? true : false;				$marked		= request_var('mark', array(0));				$message	= utf8_normalize_nfc(request_var('message', '', true));				// Sort keys				$sort_days	= request_var('st', 0);				$sort_key	= request_var('sk', 't');				$sort_dir	= request_var('sd', 'd');				// Delete entries if requested and able				if ($deletemark || $deleteall || $confirm)				{					if (confirm_box(true))					{						$where_sql = '';						$deletemark = request_var('delmarked', 0);						$deleteall = request_var('delall', 0);						if ($deletemark && $marked)						{							$where_sql = ' AND ' . $db->sql_in_set('warning_id', array_values($marked));						}						if ($where_sql || $deleteall)						{							$sql = 'DELETE FROM ' . WARNINGS_TABLE . "								WHERE user_id = $user_id									$where_sql";							$db->sql_query($sql);							if ($deleteall)							{								$log_warnings = $deleted_warnings = 0;							}							else							{								$num_warnings = (int) $db->sql_affectedrows();								$deleted_warnings = ' user_warnings - ' . $num_warnings;								$log_warnings = ($num_warnings > 2) ? 2 : $num_warnings;							}							$sql = 'UPDATE ' . USERS_TABLE . "								SET user_warnings = $deleted_warnings								WHERE user_id = $user_id";							$db->sql_query($sql);							switch ($log_warnings)							{								case 2:									add_log('admin', 'LOG_WARNINGS_DELETED', $user_row['username'], $num_warnings);								break;								case 1:									add_log('admin', 'LOG_WARNING_DELETED', $user_row['username']);								break;								default:									add_log('admin', 'LOG_WARNINGS_DELETED_ALL', $user_row['username']);								break;							}						}					}					else					{						$s_hidden_fields = array(							'i'				=> $id,							'mode'			=> $mode,							'u'				=> $user_id,							'mark'			=> $marked,						);						if (isset($_POST['delmarked']))						{							$s_hidden_fields['delmarked'] = 1;						}						if (isset($_POST['delall']))						{							$s_hidden_fields['delall'] = 1;						}						if (isset($_POST['delall']) || (isset($_POST['delmarked']) && sizeof($marked)))						{							confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields($s_hidden_fields));						}					}				}				$sql = 'SELECT w.warning_id, w.warning_time, w.post_id, l.log_operation, l.log_data, l.user_id AS mod_user_id, m.username AS mod_username, m.user_colour AS mod_user_colour					FROM ' . WARNINGS_TABLE . ' w					LEFT JOIN ' . LOG_TABLE . ' l						ON (w.log_id = l.log_id)					LEFT JOIN ' . USERS_TABLE . ' m						ON (l.user_id = m.user_id)					WHERE w.user_id = ' . $user_id . '					ORDER BY w.warning_time DESC';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					if (!$row['log_operation'])					{						// We do not have a log-entry anymore, so there is no data available						$row['action'] = $user->lang['USER_WARNING_LOG_DELETED'];					}					else					{						$row['action'] = (isset($user->lang[$row['log_operation']])) ? $user->lang[$row['log_operation']] : '{' . ucfirst(str_replace('_', ' ', $row['log_operation'])) . '}';						if (!empty($row['log_data']))						{							$log_data_ary = @unserialize($row['log_data']);							$log_data_ary = ($log_data_ary === false) ? array() : $log_data_ary;							if (isset($user->lang[$row['log_operation']]))							{								// Check if there are more occurrences of % than arguments, if there are we fill out the arguments array								// It doesn't matter if we add more arguments than placeholders								if ((substr_count($row['action'], '%') - sizeof($log_data_ary)) > 0)								{									$log_data_ary = array_merge($log_data_ary, array_fill(0, substr_count($row['action'], '%') - sizeof($log_data_ary), ''));								}								$row['action'] = vsprintf($row['action'], $log_data_ary);								$row['action'] = bbcode_nl2br(censor_text($row['action']));							}							else if (!empty($log_data_ary))							{								$row['action'] .= '<br />' . implode('', $log_data_ary);							}						}					}					$template->assign_block_vars('warn', array(						'ID'		=> $row['warning_id'],						'USERNAME'	=> ($row['log_operation']) ? get_username_string('full', $row['mod_user_id'], $row['mod_username'], $row['mod_user_colour']) : '-',						'ACTION'	=> make_clickable($row['action']),						'DATE'		=> $user->format_date($row['warning_time']),					));				}				$db->sql_freeresult($result);				$template->assign_vars(array(					'S_WARNINGS'	=> true,				));			break;			case 'profile':				include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				include($phpbb_root_path . 'includes/functions_profile_fields.' . $phpEx);				$cp = new custom_profile();				$cp_data = $cp_error = array();				$sql = 'SELECT lang_id					FROM ' . LANG_TABLE . "					WHERE lang_iso = '" . $db->sql_escape($user->data['user_lang']) . "'";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$user_row['iso_lang_id'] = $row['lang_id'];				$data = array(					'icq'			=> request_var('icq', $user_row['user_icq']),					'aim'			=> request_var('aim', $user_row['user_aim']),					'msn'			=> request_var('msn', $user_row['user_msnm']),					'yim'			=> request_var('yim', $user_row['user_yim']),					'jabber'		=> utf8_normalize_nfc(request_var('jabber', $user_row['user_jabber'], true)),					'website'		=> request_var('website', $user_row['user_website']),					'location'		=> utf8_normalize_nfc(request_var('location', $user_row['user_from'], true)),					'occupation'	=> utf8_normalize_nfc(request_var('occupation', $user_row['user_occ'], true)),					'interests'		=> utf8_normalize_nfc(request_var('interests', $user_row['user_interests'], true)),					'bday_day'		=> 0,					'bday_month'	=> 0,					'bday_year'		=> 0,				);				if ($user_row['user_birthday'])				{					list($data['bday_day'], $data['bday_month'], $data['bday_year']) = explode('-', $user_row['user_birthday']);				}				$data['bday_day']		= request_var('bday_day', $data['bday_day']);				$data['bday_month']		= request_var('bday_month', $data['bday_month']);				$data['bday_year']		= request_var('bday_year', $data['bday_year']);				$data['user_birthday']	= sprintf('%2d-%2d-%4d', $data['bday_day'], $data['bday_month'], $data['bday_year']);				if ($submit)				{					$error = validate_data($data, array(						'icq'			=> array(							array('string', true, 3, 15),							array('match', true, '#^[0-9]+$#i')),						'aim'			=> array('string', true, 3, 255),						'msn'			=> array('string', true, 5, 255),						'jabber'		=> array(							array('string', true, 5, 255),							array('jabber')),						'yim'			=> array('string', true, 5, 255),						'website'		=> array(							array('string', true, 12, 255),							array('match', true, '#^http[s]?://(.*?\.)*?[a-z0-9\-]+\.[a-z]{2,4}#i')),						'location'		=> array('string', true, 2, 100),						'occupation'	=> array('string', true, 2, 500),						'interests'		=> array('string', true, 2, 500),						'bday_day'		=> array('num', true, 1, 31),						'bday_month'	=> array('num', true, 1, 12),						'bday_year'		=> array('num', true, 1901, gmdate('Y', time())),						'user_birthday'	=> array('date', true),					));					// validate custom profile fields					$cp->submit_cp_field('profile', $user_row['iso_lang_id'], $cp_data, $cp_error);					if (sizeof($cp_error))					{						$error = array_merge($error, $cp_error);					}					if (!check_form_key($form_name))					{						$error[] = 'FORM_INVALID';					}					if (!sizeof($error))					{						$sql_ary = array(							'user_icq'		=> $data['icq'],							'user_aim'		=> $data['aim'],							'user_msnm'		=> $data['msn'],							'user_yim'		=> $data['yim'],							'user_jabber'	=> $data['jabber'],							'user_website'	=> $data['website'],							'user_from'		=> $data['location'],							'user_occ'		=> $data['occupation'],							'user_interests'=> $data['interests'],							'user_birthday'	=> $data['user_birthday'],						);						$sql = 'UPDATE ' . USERS_TABLE . '							SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "							WHERE user_id = $user_id";						$db->sql_query($sql);						// Update Custom Fields						$cp->update_profile_field_data($user_id, $cp_data);						trigger_error($user->lang['USER_PROFILE_UPDATED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				$s_birthday_day_options = '<option value="0"' . ((!$data['bday_day']) ? ' selected="selected"' : '') . '>--</option>';				for ($i = 1; $i < 32; $i++)				{					$selected = ($i == $data['bday_day']) ? ' selected="selected"' : '';					$s_birthday_day_options .= "<option value=\"$i\"$selected>$i</option>";				}				$s_birthday_month_options = '<option value="0"' . ((!$data['bday_month']) ? ' selected="selected"' : '') . '>--</option>';				for ($i = 1; $i < 13; $i++)				{					$selected = ($i == $data['bday_month']) ? ' selected="selected"' : '';					$s_birthday_month_options .= "<option value=\"$i\"$selected>$i</option>";				}				$s_birthday_year_options = '';				$now = getdate();				$s_birthday_year_options = '<option value="0"' . ((!$data['bday_year']) ? ' selected="selected"' : '') . '>--</option>';				for ($i = $now['year'] - 100; $i <= $now['year']; $i++)				{					$selected = ($i == $data['bday_year']) ? ' selected="selected"' : '';					$s_birthday_year_options .= "<option value=\"$i\"$selected>$i</option>";				}				unset($now);				$template->assign_vars(array(					'ICQ'			=> $data['icq'],					'YIM'			=> $data['yim'],					'AIM'			=> $data['aim'],					'MSN'			=> $data['msn'],					'JABBER'		=> $data['jabber'],					'WEBSITE'		=> $data['website'],					'LOCATION'		=> $data['location'],					'OCCUPATION'	=> $data['occupation'],					'INTERESTS'		=> $data['interests'],					'S_BIRTHDAY_DAY_OPTIONS'	=> $s_birthday_day_options,					'S_BIRTHDAY_MONTH_OPTIONS'	=> $s_birthday_month_options,					'S_BIRTHDAY_YEAR_OPTIONS'	=> $s_birthday_year_options,					'S_PROFILE'		=> true)				);				// Get additional profile fields and assign them to the template block var 'profile_fields'				$user->get_profile_fields($user_id);				$cp->generate_profile_fields('profile', $user_row['iso_lang_id']);			break;			case 'prefs':				include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$data = array(					'dateformat'		=> utf8_normalize_nfc(request_var('dateformat', $user_row['user_dateformat'], true)),					'lang'				=> basename(request_var('lang', $user_row['user_lang'])),					'tz'				=> request_var('tz', (float) $user_row['user_timezone']),					'style'				=> request_var('style', $user_row['user_style']),					'dst'				=> request_var('dst', $user_row['user_dst']),					'viewemail'			=> request_var('viewemail', $user_row['user_allow_viewemail']),					'massemail'			=> request_var('massemail', $user_row['user_allow_massemail']),					'hideonline'		=> request_var('hideonline', !$user_row['user_allow_viewonline']),					'notifymethod'		=> request_var('notifymethod', $user_row['user_notify_type']),					'notifypm'			=> request_var('notifypm', $user_row['user_notify_pm']),					'popuppm'			=> request_var('popuppm', $this->optionget($user_row, 'popuppm')),					'allowpm'			=> request_var('allowpm', $user_row['user_allow_pm']),					'topic_sk'			=> request_var('topic_sk', ($user_row['user_topic_sortby_type']) ? $user_row['user_topic_sortby_type'] : 't'),					'topic_sd'			=> request_var('topic_sd', ($user_row['user_topic_sortby_dir']) ? $user_row['user_topic_sortby_dir'] : 'd'),					'topic_st'			=> request_var('topic_st', ($user_row['user_topic_show_days']) ? $user_row['user_topic_show_days'] : 0),					'post_sk'			=> request_var('post_sk', ($user_row['user_post_sortby_type']) ? $user_row['user_post_sortby_type'] : 't'),					'post_sd'			=> request_var('post_sd', ($user_row['user_post_sortby_dir']) ? $user_row['user_post_sortby_dir'] : 'a'),					'post_st'			=> request_var('post_st', ($user_row['user_post_show_days']) ? $user_row['user_post_show_days'] : 0),					'view_images'		=> request_var('view_images', $this->optionget($user_row, 'viewimg')),					'view_flash'		=> request_var('view_flash', $this->optionget($user_row, 'viewflash')),					'view_smilies'		=> request_var('view_smilies', $this->optionget($user_row, 'viewsmilies')),					'view_sigs'			=> request_var('view_sigs', $this->optionget($user_row, 'viewsigs')),					'view_avatars'		=> request_var('view_avatars', $this->optionget($user_row, 'viewavatars')),					'view_wordcensor'	=> request_var('view_wordcensor', $this->optionget($user_row, 'viewcensors')),					'bbcode'	=> request_var('bbcode', $this->optionget($user_row, 'bbcode')),					'smilies'	=> request_var('smilies', $this->optionget($user_row, 'smilies')),					'sig'		=> request_var('sig', $this->optionget($user_row, 'attachsig')),					'notify'	=> request_var('notify', $user_row['user_notify']),				);				if ($submit)				{					$error = validate_data($data, array(						'dateformat'	=> array('string', false, 1, 30),						'lang'			=> array('match', false, '#^[a-z_\-]{2,}$#i'),						'tz'			=> array('num', false, -14, 14),						'topic_sk'		=> array('string', false, 1, 1),						'topic_sd'		=> array('string', false, 1, 1),						'post_sk'		=> array('string', false, 1, 1),						'post_sd'		=> array('string', false, 1, 1),					));					if (!check_form_key($form_name))					{						$error[] = 'FORM_INVALID';					}					if (!sizeof($error))					{						$this->optionset($user_row, 'popuppm', $data['popuppm']);						$this->optionset($user_row, 'viewimg', $data['view_images']);						$this->optionset($user_row, 'viewflash', $data['view_flash']);						$this->optionset($user_row, 'viewsmilies', $data['view_smilies']);						$this->optionset($user_row, 'viewsigs', $data['view_sigs']);						$this->optionset($user_row, 'viewavatars', $data['view_avatars']);						$this->optionset($user_row, 'viewcensors', $data['view_wordcensor']);						$this->optionset($user_row, 'bbcode', $data['bbcode']);						$this->optionset($user_row, 'smilies', $data['smilies']);						$this->optionset($user_row, 'attachsig', $data['sig']);						$sql_ary = array(							'user_options'			=> $user_row['user_options'],							'user_allow_pm'			=> $data['allowpm'],							'user_allow_viewemail'	=> $data['viewemail'],							'user_allow_massemail'	=> $data['massemail'],							'user_allow_viewonline'	=> !$data['hideonline'],							'user_notify_type'		=> $data['notifymethod'],							'user_notify_pm'		=> $data['notifypm'],							'user_dst'				=> $data['dst'],							'user_dateformat'		=> $data['dateformat'],							'user_lang'				=> $data['lang'],							'user_timezone'			=> $data['tz'],							'user_style'			=> $data['style'],							'user_topic_sortby_type'	=> $data['topic_sk'],							'user_post_sortby_type'		=> $data['post_sk'],							'user_topic_sortby_dir'		=> $data['topic_sd'],							'user_post_sortby_dir'		=> $data['post_sd'],							'user_topic_show_days'	=> $data['topic_st'],							'user_post_show_days'	=> $data['post_st'],							'user_notify'	=> $data['notify'],						);						$sql = 'UPDATE ' . USERS_TABLE . '							SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "							WHERE user_id = $user_id";						$db->sql_query($sql);						// Check if user has an active session						if ($user_row['session_id'])						{							// We'll update the session if user_allow_viewonline has changed and the user is a bot							// Or if it's a regular user and the admin set it to hide the session							if ($user_row['user_allow_viewonline'] != $sql_ary['user_allow_viewonline'] && $user_row['user_type'] == USER_IGNORE								|| $user_row['user_allow_viewonline'] && !$sql_ary['user_allow_viewonline'])							{								// We also need to check if the user has the permission to cloak.								$user_auth = new auth();								$user_auth->acl($user_row);								$session_sql_ary = array(									'session_viewonline'	=> ($user_auth->acl_get('u_hideonline')) ? $sql_ary['user_allow_viewonline'] : true,								);								$sql = 'UPDATE ' . SESSIONS_TABLE . '									SET ' . $db->sql_build_array('UPDATE', $session_sql_ary) . "									WHERE session_user_id = $user_id";								$db->sql_query($sql);								unset($user_auth);							}						}						trigger_error($user->lang['USER_PREFS_UPDATED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				$dateformat_options = '';				foreach ($user->lang['dateformats'] as $format => $null)				{					$dateformat_options .= '<option value="' . $format . '"' . (($format == $data['dateformat']) ? ' selected="selected"' : '') . '>';					$dateformat_options .= $user->format_date(time(), $format, false) . ((strpos($format, '|') !== false) ? $user->lang['VARIANT_DATE_SEPARATOR'] . $user->format_date(time(), $format, true) : '');					$dateformat_options .= '</option>';				}				$s_custom = false;				$dateformat_options .= '<option value="custom"';				if (!isset($user->lang['dateformats'][$data['dateformat']]))				{					$dateformat_options .= ' selected="selected"';					$s_custom = true;				}				$dateformat_options .= '>' . $user->lang['CUSTOM_DATEFORMAT'] . '</option>';				$sort_dir_text = array('a' => $user->lang['ASCENDING'], 'd' => $user->lang['DESCENDING']);				// Topic ordering options				$limit_topic_days = array(0 => $user->lang['ALL_TOPICS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);				$sort_by_topic_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 'r' => $user->lang['REPLIES'], 's' => $user->lang['SUBJECT'], 'v' => $user->lang['VIEWS']);				// Post ordering options				$limit_post_days = array(0 => $user->lang['ALL_POSTS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);				$sort_by_post_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 's' => $user->lang['SUBJECT']);				$_options = array('topic', 'post');				foreach ($_options as $sort_option)				{					${'s_limit_' . $sort_option . '_days'} = '<select name="' . $sort_option . '_st">';					foreach (${'limit_' . $sort_option . '_days'} as $day => $text)					{						$selected = ($data[$sort_option . '_st'] == $day) ? ' selected="selected"' : '';						${'s_limit_' . $sort_option . '_days'} .= '<option value="' . $day . '"' . $selected . '>' . $text . '</option>';					}					${'s_limit_' . $sort_option . '_days'} .= '</select>';					${'s_sort_' . $sort_option . '_key'} = '<select name="' . $sort_option . '_sk">';					foreach (${'sort_by_' . $sort_option . '_text'} as $key => $text)					{						$selected = ($data[$sort_option . '_sk'] == $key) ? ' selected="selected"' : '';						${'s_sort_' . $sort_option . '_key'} .= '<option value="' . $key . '"' . $selected . '>' . $text . '</option>';					}					${'s_sort_' . $sort_option . '_key'} .= '</select>';					${'s_sort_' . $sort_option . '_dir'} = '<select name="' . $sort_option . '_sd">';					foreach ($sort_dir_text as $key => $value)					{						$selected = ($data[$sort_option . '_sd'] == $key) ? ' selected="selected"' : '';						${'s_sort_' . $sort_option . '_dir'} .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';					}					${'s_sort_' . $sort_option . '_dir'} .= '</select>';				}				$template->assign_vars(array(					'S_PREFS'			=> true,					'S_JABBER_DISABLED'	=> ($config['jab_enable'] && $user_row['user_jabber'] && @extension_loaded('xml')) ? false : true,					'VIEW_EMAIL'		=> $data['viewemail'],					'MASS_EMAIL'		=> $data['massemail'],					'ALLOW_PM'			=> $data['allowpm'],					'HIDE_ONLINE'		=> $data['hideonline'],					'NOTIFY_EMAIL'		=> ($data['notifymethod'] == NOTIFY_EMAIL) ? true : false,					'NOTIFY_IM'			=> ($data['notifymethod'] == NOTIFY_IM) ? true : false,					'NOTIFY_BOTH'		=> ($data['notifymethod'] == NOTIFY_BOTH) ? true : false,					'NOTIFY_PM'			=> $data['notifypm'],					'POPUP_PM'			=> $data['popuppm'],					'DST'				=> $data['dst'],					'BBCODE'			=> $data['bbcode'],					'SMILIES'			=> $data['smilies'],					'ATTACH_SIG'		=> $data['sig'],					'NOTIFY'			=> $data['notify'],					'VIEW_IMAGES'		=> $data['view_images'],					'VIEW_FLASH'		=> $data['view_flash'],					'VIEW_SMILIES'		=> $data['view_smilies'],					'VIEW_SIGS'			=> $data['view_sigs'],					'VIEW_AVATARS'		=> $data['view_avatars'],					'VIEW_WORDCENSOR'	=> $data['view_wordcensor'],					'S_TOPIC_SORT_DAYS'		=> $s_limit_topic_days,					'S_TOPIC_SORT_KEY'		=> $s_sort_topic_key,					'S_TOPIC_SORT_DIR'		=> $s_sort_topic_dir,					'S_POST_SORT_DAYS'		=> $s_limit_post_days,					'S_POST_SORT_KEY'		=> $s_sort_post_key,					'S_POST_SORT_DIR'		=> $s_sort_post_dir,					'DATE_FORMAT'			=> $data['dateformat'],					'S_DATEFORMAT_OPTIONS'	=> $dateformat_options,					'S_CUSTOM_DATEFORMAT'	=> $s_custom,					'DEFAULT_DATEFORMAT'	=> $config['default_dateformat'],					'A_DEFAULT_DATEFORMAT'	=> addslashes($config['default_dateformat']),					'S_LANG_OPTIONS'	=> language_select($data['lang']),					'S_STYLE_OPTIONS'	=> style_select($data['style']),					'S_TZ_OPTIONS'		=> tz_select($data['tz'], true),					)				);			break;			case 'avatar':				include($phpbb_root_path . 'includes/functions_display.' . $phpEx);				include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$can_upload = (file_exists($phpbb_root_path . $config['avatar_path']) && phpbb_is_writable($phpbb_root_path . $config['avatar_path']) && $file_uploads) ? true : false;				if ($submit)				{					if (!check_form_key($form_name))					{							trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					if (avatar_process_user($error, $user_row, $can_upload))					{						trigger_error($user->lang['USER_AVATAR_UPDATED'] . adm_back_link($this->u_action . '&amp;u=' . $user_row['user_id']));					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				if (!$config['allow_avatar'] && $user_row['user_avatar_type'])				{					$error[] = $user->lang['USER_AVATAR_NOT_ALLOWED'];				}				else if ((($user_row['user_avatar_type'] == AVATAR_UPLOAD) && !$config['allow_avatar_upload']) ||				 (($user_row['user_avatar_type'] == AVATAR_REMOTE) && !$config['allow_avatar_remote']) ||				 (($user_row['user_avatar_type'] == AVATAR_GALLERY) && !$config['allow_avatar_local']))				{					$error[] = $user->lang['USER_AVATAR_TYPE_NOT_ALLOWED'];				}				// Generate users avatar				$avatar_img = ($user_row['user_avatar']) ? get_user_avatar($user_row['user_avatar'], $user_row['user_avatar_type'], $user_row['user_avatar_width'], $user_row['user_avatar_height'], 'USER_AVATAR', true) : '<img src="' . $phpbb_admin_path . 'images/no_avatar.gif" alt="" />';				$display_gallery = (isset($_POST['display_gallery'])) ? true : false;				$avatar_select = basename(request_var('avatar_select', ''));				$category = basename(request_var('category', ''));				if ($config['allow_avatar_local'] && $display_gallery)				{					avatar_gallery($category, $avatar_select, 4);				}				$template->assign_vars(array(					'S_AVATAR'			=> true,					'S_CAN_UPLOAD'		=> $can_upload,					'S_UPLOAD_FILE'		=> ($config['allow_avatar'] && $can_upload && $config['allow_avatar_upload']) ? true : false,					'S_REMOTE_UPLOAD'	=> ($config['allow_avatar'] && $can_upload && $config['allow_avatar_remote_upload']) ? true : false,					'S_ALLOW_REMOTE'	=> ($config['allow_avatar'] && $config['allow_avatar_remote']) ? true : false,					'S_DISPLAY_GALLERY'	=> ($config['allow_avatar'] && $config['allow_avatar_local'] && !$display_gallery) ? true : false,					'S_IN_GALLERY'		=> ($config['allow_avatar'] && $config['allow_avatar_local'] && $display_gallery) ? true : false,					'AVATAR_IMAGE'			=> $avatar_img,					'AVATAR_MAX_FILESIZE'	=> $config['avatar_filesize'],					'USER_AVATAR_WIDTH'		=> $user_row['user_avatar_width'],					'USER_AVATAR_HEIGHT'	=> $user_row['user_avatar_height'],					'L_AVATAR_EXPLAIN'	=> sprintf($user->lang['AVATAR_EXPLAIN'], $config['avatar_max_width'], $config['avatar_max_height'], round($config['avatar_filesize'] / 1024)))				);			break;			case 'rank':				if ($submit)				{					if (!check_form_key($form_name))					{						trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					$rank_id = request_var('user_rank', 0);					$sql = 'UPDATE ' . USERS_TABLE . "						SET user_rank = $rank_id						WHERE user_id = $user_id";					$db->sql_query($sql);					trigger_error($user->lang['USER_RANK_UPDATED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));				}				$sql = 'SELECT *					FROM ' . RANKS_TABLE . '					WHERE rank_special = 1					ORDER BY rank_title';				$result = $db->sql_query($sql);				$s_rank_options = '<option value="0"' . ((!$user_row['user_rank']) ? ' selected="selected"' : '') . '>' . $user->lang['NO_SPECIAL_RANK'] . '</option>';				while ($row = $db->sql_fetchrow($result))				{					$selected = ($user_row['user_rank'] && $row['rank_id'] == $user_row['user_rank']) ? ' selected="selected"' : '';					$s_rank_options .= '<option value="' . $row['rank_id'] . '"' . $selected . '>' . $row['rank_title'] . '</option>';				}				$db->sql_freeresult($result);				$template->assign_vars(array(					'S_RANK'			=> true,					'S_RANK_OPTIONS'	=> $s_rank_options)				);			break;			case 'sig':				include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);				include_once($phpbb_root_path . 'includes/functions_display.' . $phpEx);				$enable_bbcode	= ($config['allow_sig_bbcode']) ? (bool) $this->optionget($user_row, 'sig_bbcode') : false;				$enable_smilies	= ($config['allow_sig_smilies']) ? (bool) $this->optionget($user_row, 'sig_smilies') : false;				$enable_urls	= ($config['allow_sig_links']) ? (bool) $this->optionget($user_row, 'sig_links') : false;				$signature		= utf8_normalize_nfc(request_var('signature', (string) $user_row['user_sig'], true));				$preview		= (isset($_POST['preview'])) ? true : false;				if ($submit || $preview)				{					include_once($phpbb_root_path . 'includes/message_parser.' . $phpEx);					$enable_bbcode	= ($config['allow_sig_bbcode']) ? ((request_var('disable_bbcode', false)) ? false : true) : false;					$enable_smilies	= ($config['allow_sig_smilies']) ? ((request_var('disable_smilies', false)) ? false : true) : false;					$enable_urls	= ($config['allow_sig_links']) ? ((request_var('disable_magic_url', false)) ? false : true) : false;					$message_parser = new parse_message($signature);					// Allowing Quote BBCode					$message_parser->parse($enable_bbcode, $enable_urls, $enable_smilies, $config['allow_sig_img'], $config['allow_sig_flash'], true, $config['allow_sig_links'], true, 'sig');					if (sizeof($message_parser->warn_msg))					{						$error[] = implode('<br />', $message_parser->warn_msg);					}					if (!check_form_key($form_name))					{						$error = 'FORM_INVALID';					}					if (!sizeof($error) && $submit)					{						$this->optionset($user_row, 'sig_bbcode', $enable_bbcode);						$this->optionset($user_row, 'sig_smilies', $enable_smilies);						$this->optionset($user_row, 'sig_links', $enable_urls);						$sql_ary = array(							'user_sig'					=> (string) $message_parser->message,							'user_options'				=> $user_row['user_options'],							'user_sig_bbcode_uid'		=> (string) $message_parser->bbcode_uid,							'user_sig_bbcode_bitfield'	=> (string) $message_parser->bbcode_bitfield						);						$sql = 'UPDATE ' . USERS_TABLE . '							SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '							WHERE user_id = ' . $user_id;						$db->sql_query($sql);						trigger_error($user->lang['USER_SIG_UPDATED'] . adm_back_link($this->u_action . '&amp;u=' . $user_id));					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				$signature_preview = '';				if ($preview)				{					// Now parse it for displaying					$signature_preview = $message_parser->format_display($enable_bbcode, $enable_urls, $enable_smilies, false);					unset($message_parser);				}				decode_message($signature, $user_row['user_sig_bbcode_uid']);				$template->assign_vars(array(					'S_SIGNATURE'		=> true,					'SIGNATURE'			=> $signature,					'SIGNATURE_PREVIEW'	=> $signature_preview,					'S_BBCODE_CHECKED'		=> (!$enable_bbcode) ? ' checked="checked"' : '',					'S_SMILIES_CHECKED'		=> (!$enable_smilies) ? ' checked="checked"' : '',					'S_MAGIC_URL_CHECKED'	=> (!$enable_urls) ? ' checked="checked"' : '',					'BBCODE_STATUS'			=> ($config['allow_sig_bbcode']) ? sprintf($user->lang['BBCODE_IS_ON'], '<a href="' . append_sid("{$phpbb_root_path}faq.$phpEx", 'mode=bbcode') . '">', '</a>') : sprintf($user->lang['BBCODE_IS_OFF'], '<a href="' . append_sid("{$phpbb_root_path}faq.$phpEx", 'mode=bbcode') . '">', '</a>'),					'SMILIES_STATUS'		=> ($config['allow_sig_smilies']) ? $user->lang['SMILIES_ARE_ON'] : $user->lang['SMILIES_ARE_OFF'],					'IMG_STATUS'			=> ($config['allow_sig_img']) ? $user->lang['IMAGES_ARE_ON'] : $user->lang['IMAGES_ARE_OFF'],					'FLASH_STATUS'			=> ($config['allow_sig_flash']) ? $user->lang['FLASH_IS_ON'] : $user->lang['FLASH_IS_OFF'],					'URL_STATUS'			=> ($config['allow_sig_links']) ? $user->lang['URL_IS_ON'] : $user->lang['URL_IS_OFF'],					'L_SIGNATURE_EXPLAIN'	=> sprintf($user->lang['SIGNATURE_EXPLAIN'], $config['max_sig_chars']),					'S_BBCODE_ALLOWED'		=> $config['allow_sig_bbcode'],					'S_SMILIES_ALLOWED'		=> $config['allow_sig_smilies'],					'S_BBCODE_IMG'			=> ($config['allow_sig_img']) ? true : false,					'S_BBCODE_FLASH'		=> ($config['allow_sig_flash']) ? true : false,					'S_LINKS_ALLOWED'		=> ($config['allow_sig_links']) ? true : false)				);				// Assigning custom bbcodes				display_custom_bbcodes();			break;			case 'attach':				$start		= request_var('start', 0);				$deletemark = (isset($_POST['delmarked'])) ? true : false;				$marked		= request_var('mark', array(0));				// Sort keys				$sort_key	= request_var('sk', 'a');				$sort_dir	= request_var('sd', 'd');				if ($deletemark && sizeof($marked))				{					$sql = 'SELECT attach_id						FROM ' . ATTACHMENTS_TABLE . '						WHERE poster_id = ' . $user_id . '							AND is_orphan = 0							AND ' . $db->sql_in_set('attach_id', $marked);					$result = $db->sql_query($sql);					$marked = array();					while ($row = $db->sql_fetchrow($result))					{						$marked[] = $row['attach_id'];					}					$db->sql_freeresult($result);				}				if ($deletemark && sizeof($marked))				{					if (confirm_box(true))					{						$sql = 'SELECT real_filename							FROM ' . ATTACHMENTS_TABLE . '							WHERE ' . $db->sql_in_set('attach_id', $marked);						$result = $db->sql_query($sql);						$log_attachments = array();						while ($row = $db->sql_fetchrow($result))						{							$log_attachments[] = $row['real_filename'];						}						$db->sql_freeresult($result);						delete_attachments('attach', $marked);						$message = (sizeof($log_attachments) == 1) ? $user->lang['ATTACHMENT_DELETED'] : $user->lang['ATTACHMENTS_DELETED'];						add_log('admin', 'LOG_ATTACHMENTS_DELETED', implode(', ', $log_attachments));						trigger_error($message . adm_back_link($this->u_action . '&amp;u=' . $user_id));					}					else					{						confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(							'u'				=> $user_id,							'i'				=> $id,							'mode'			=> $mode,							'action'		=> $action,							'delmarked'		=> true,							'mark'			=> $marked))						);					}				}				$sk_text = array('a' => $user->lang['SORT_FILENAME'], 'c' => $user->lang['SORT_EXTENSION'], 'd' => $user->lang['SORT_SIZE'], 'e' => $user->lang['SORT_DOWNLOADS'], 'f' => $user->lang['SORT_POST_TIME'], 'g' => $user->lang['SORT_TOPIC_TITLE']);				$sk_sql = array('a' => 'a.real_filename', 'c' => 'a.extension', 'd' => 'a.filesize', 'e' => 'a.download_count', 'f' => 'a.filetime', 'g' => 't.topic_title');				$sd_text = array('a' => $user->lang['ASCENDING'], 'd' => $user->lang['DESCENDING']);				$s_sort_key = '';				foreach ($sk_text as $key => $value)				{					$selected = ($sort_key == $key) ? ' selected="selected"' : '';					$s_sort_key .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';				}				$s_sort_dir = '';				foreach ($sd_text as $key => $value)				{					$selected = ($sort_dir == $key) ? ' selected="selected"' : '';					$s_sort_dir .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';				}				if (!isset($sk_sql[$sort_key]))				{					$sort_key = 'a';				}				$order_by = $sk_sql[$sort_key] . ' ' . (($sort_dir == 'a') ? 'ASC' : 'DESC');				$sql = 'SELECT COUNT(attach_id) as num_attachments					FROM ' . ATTACHMENTS_TABLE . "					WHERE poster_id = $user_id						AND is_orphan = 0";				$result = $db->sql_query_limit($sql, 1);				$num_attachments = (int) $db->sql_fetchfield('num_attachments');				$db->sql_freeresult($result);				$sql = 'SELECT a.*, t.topic_title, p.message_subject as message_title					FROM ' . ATTACHMENTS_TABLE . ' a						LEFT JOIN ' . TOPICS_TABLE . ' t ON (a.topic_id = t.topic_id							AND a.in_message = 0)						LEFT JOIN ' . PRIVMSGS_TABLE . ' p ON (a.post_msg_id = p.msg_id							AND a.in_message = 1)					WHERE a.poster_id = ' . $user_id . "						AND a.is_orphan = 0					ORDER BY $order_by";				$result = $db->sql_query_limit($sql, $config['posts_per_page'], $start);				while ($row = $db->sql_fetchrow($result))				{					if ($row['in_message'])					{						$view_topic = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&amp;p={$row['post_msg_id']}");					}					else					{						$view_topic = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "t={$row['topic_id']}&amp;p={$row['post_msg_id']}") . '#p' . $row['post_msg_id'];					}					$template->assign_block_vars('attach', array(						'REAL_FILENAME'		=> $row['real_filename'],						'COMMENT'			=> nl2br($row['attach_comment']),						'EXTENSION'			=> $row['extension'],						'SIZE'				=> get_formatted_filesize($row['filesize']),						'DOWNLOAD_COUNT'	=> $row['download_count'],						'POST_TIME'			=> $user->format_date($row['filetime']),						'TOPIC_TITLE'		=> ($row['in_message']) ? $row['message_title'] : $row['topic_title'],						'ATTACH_ID'			=> $row['attach_id'],						'POST_ID'			=> $row['post_msg_id'],						'TOPIC_ID'			=> $row['topic_id'],						'S_IN_MESSAGE'		=> $row['in_message'],						'U_DOWNLOAD'		=> append_sid("{$phpbb_root_path}download/file.$phpEx", 'mode=view&amp;id=' . $row['attach_id']),						'U_VIEW_TOPIC'		=> $view_topic)					);				}				$db->sql_freeresult($result);				$template->assign_vars(array(					'S_ATTACHMENTS'		=> true,					'S_ON_PAGE'			=> on_page($num_attachments, $config['topics_per_page'], $start),					'S_SORT_KEY'		=> $s_sort_key,					'S_SORT_DIR'		=> $s_sort_dir,					'PAGINATION'		=> generate_pagination($this->u_action . "&amp;u=$user_id&amp;sk=$sort_key&amp;sd=$sort_dir", $num_attachments, $config['topics_per_page'], $start, true))				);			break;			case 'groups':				include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$user->add_lang(array('groups', 'acp/groups'));				$group_id = request_var('g', 0);				if ($group_id)				{					// Check the founder only entry for this group to make sure everything is well					$sql = 'SELECT group_founder_manage						FROM ' . GROUPS_TABLE . '						WHERE group_id = ' . $group_id;					$result = $db->sql_query($sql);					$founder_manage = (int) $db->sql_fetchfield('group_founder_manage');					$db->sql_freeresult($result);					if ($user->data['user_type'] != USER_FOUNDER && $founder_manage)					{						trigger_error($user->lang['NOT_ALLOWED_MANAGE_GROUP'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}				}				else				{					$founder_manage = 0;				}				switch ($action)				{					case 'demote':					case 'promote':					case 'default':						if (!$group_id)						{							trigger_error($user->lang['NO_GROUP'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);						}						group_user_attributes($action, $group_id, $user_id);						if ($action == 'default')						{							$user_row['group_id'] = $group_id;						}					break;					case 'delete':						if (confirm_box(true))						{							if (!$group_id)							{								trigger_error($user->lang['NO_GROUP'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							if ($error = group_user_del($group_id, $user_id))							{								trigger_error($user->lang[$error] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							$error = array();							// The delete action was successful - therefore update the user row...							$sql = 'SELECT u.*, s.*								FROM ' . USERS_TABLE . ' u									LEFT JOIN ' . SESSIONS_TABLE . ' s ON (s.session_user_id = u.user_id)								WHERE u.user_id = ' . $user_id . '								ORDER BY s.session_time DESC';							$result = $db->sql_query_limit($sql, 1);							$user_row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);						}						else						{							confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(								'u'				=> $user_id,								'i'				=> $id,								'mode'			=> $mode,								'action'		=> $action,								'g'				=> $group_id))							);						}					break;					case 'approve':						if (confirm_box(true))						{							if (!$group_id)							{								trigger_error($user->lang['NO_GROUP'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);							}							group_user_attributes($action, $group_id, $user_id);						}						else						{							confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(								'u'				=> $user_id,								'i'				=> $id,								'mode'			=> $mode,								'action'		=> $action,								'g'				=> $group_id))							);						}					break;				}				// Add user to group?				if ($submit)				{					if (!check_form_key($form_name))					{						trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					if (!$group_id)					{						trigger_error($user->lang['NO_GROUP'] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					// Add user/s to group					if ($error = group_user_add($group_id, $user_id))					{						trigger_error($user->lang[$error] . adm_back_link($this->u_action . '&amp;u=' . $user_id), E_USER_WARNING);					}					$error = array();				}				$sql = 'SELECT ug.*, g.*					FROM ' . GROUPS_TABLE . ' g, ' . USER_GROUP_TABLE . " ug					WHERE ug.user_id = $user_id						AND g.group_id = ug.group_id					ORDER BY g.group_type DESC, ug.user_pending ASC, g.group_name";				$result = $db->sql_query($sql);				$i = 0;				$group_data = $id_ary = array();				while ($row = $db->sql_fetchrow($result))				{					$type = ($row['group_type'] == GROUP_SPECIAL) ? 'special' : (($row['user_pending']) ? 'pending' : 'normal');					$group_data[$type][$i]['group_id']		= $row['group_id'];					$group_data[$type][$i]['group_name']	= $row['group_name'];					$group_data[$type][$i]['group_leader']	= ($row['group_leader']) ? 1 : 0;					$id_ary[] = $row['group_id'];					$i++;				}				$db->sql_freeresult($result);				// Select box for other groups				$sql = 'SELECT group_id, group_name, group_type, group_founder_manage					FROM ' . GROUPS_TABLE . '					' . ((sizeof($id_ary)) ? 'WHERE ' . $db->sql_in_set('group_id', $id_ary, true) : '') . '					ORDER BY group_type DESC, group_name ASC';				$result = $db->sql_query($sql);				$s_group_options = '';				while ($row = $db->sql_fetchrow($result))				{					if (!$config['coppa_enable'] && $row['group_name'] == 'REGISTERED_COPPA')					{						continue;					}					// Do not display those groups not allowed to be managed					if ($user->data['user_type'] != USER_FOUNDER && $row['group_founder_manage'])					{						continue;					}					$s_group_options .= '<option' . (($row['group_type'] == GROUP_SPECIAL) ? ' class="sep"' : '') . ' value="' . $row['group_id'] . '">' . (($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name']) . '</option>';				}				$db->sql_freeresult($result);				$current_type = '';				foreach ($group_data as $group_type => $data_ary)				{					if ($current_type != $group_type)					{						$template->assign_block_vars('group', array(							'S_NEW_GROUP_TYPE'		=> true,							'GROUP_TYPE'			=> $user->lang['USER_GROUP_' . strtoupper($group_type)])						);					}					foreach ($data_ary as $data)					{						$template->assign_block_vars('group', array(							'U_EDIT_GROUP'		=> append_sid("{$phpbb_admin_path}index.$phpEx", "i=groups&amp;mode=manage&amp;action=edit&amp;u=$user_id&amp;g={$data['group_id']}&amp;back_link=acp_users_groups"),							'U_DEFAULT'			=> $this->u_action . "&amp;action=default&amp;u=$user_id&amp;g=" . $data['group_id'],							'U_DEMOTE_PROMOTE'	=> $this->u_action . '&amp;action=' . (($data['group_leader']) ? 'demote' : 'promote') . "&amp;u=$user_id&amp;g=" . $data['group_id'],							'U_DELETE'			=> $this->u_action . "&amp;action=delete&amp;u=$user_id&amp;g=" . $data['group_id'],							'U_APPROVE'			=> ($group_type == 'pending') ? $this->u_action . "&amp;action=approve&amp;u=$user_id&amp;g=" . $data['group_id'] : '',							'GROUP_NAME'		=> ($group_type == 'special') ? $user->lang['G_' . $data['group_name']] : $data['group_name'],							'L_DEMOTE_PROMOTE'	=> ($data['group_leader']) ? $user->lang['GROUP_DEMOTE'] : $user->lang['GROUP_PROMOTE'],							'S_IS_MEMBER'		=> ($group_type != 'pending') ? true : false,							'S_NO_DEFAULT'		=> ($user_row['group_id'] != $data['group_id']) ? true : false,							'S_SPECIAL_GROUP'	=> ($group_type == 'special') ? true : false,							)						);					}				}				$template->assign_vars(array(					'S_GROUPS'			=> true,					'S_GROUP_OPTIONS'	=> $s_group_options)				);			break;			case 'perm':				include_once($phpbb_root_path . 'includes/acp/auth.' . $phpEx);				$auth_admin = new auth_admin();				$user->add_lang('acp/permissions');				add_permission_language();				$forum_id = request_var('f', 0);				// Global Permissions				if (!$forum_id)				{					// Select auth options					$sql = 'SELECT auth_option, is_local, is_global						FROM ' . ACL_OPTIONS_TABLE . '						WHERE auth_option ' . $db->sql_like_expression($db->any_char . '_') . '							AND is_global = 1						ORDER BY auth_option';					$result = $db->sql_query($sql);					$hold_ary = array();					while ($row = $db->sql_fetchrow($result))					{						$hold_ary = $auth_admin->get_mask('view', $user_id, false, false, $row['auth_option'], 'global', ACL_NEVER);						$auth_admin->display_mask('view', $row['auth_option'], $hold_ary, 'user', false, false);					}					$db->sql_freeresult($result);					unset($hold_ary);				}				else				{					$sql = 'SELECT auth_option, is_local, is_global						FROM ' . ACL_OPTIONS_TABLE . "						WHERE auth_option " . $db->sql_like_expression($db->any_char . '_') . "							AND is_local = 1						ORDER BY is_global DESC, auth_option";					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$hold_ary = $auth_admin->get_mask('view', $user_id, false, $forum_id, $row['auth_option'], 'local', ACL_NEVER);						$auth_admin->display_mask('view', $row['auth_option'], $hold_ary, 'user', true, false);					}					$db->sql_freeresult($result);				}				$s_forum_options = '<option value="0"' . ((!$forum_id) ? ' selected="selected"' : '') . '>' . $user->lang['VIEW_GLOBAL_PERMS'] . '</option>';				$s_forum_options .= make_forum_select($forum_id, false, true, false, false, false);				$template->assign_vars(array(					'S_PERMISSIONS'				=> true,					'S_GLOBAL'					=> (!$forum_id) ? true : false,					'S_FORUM_OPTIONS'			=> $s_forum_options,					'U_ACTION'					=> $this->u_action . '&amp;u=' . $user_id,					'U_USER_PERMISSIONS'		=> append_sid("{$phpbb_admin_path}index.$phpEx" ,'i=permissions&amp;mode=setting_user_global&amp;user_id[]=' . $user_id),					'U_USER_FORUM_PERMISSIONS'	=> append_sid("{$phpbb_admin_path}index.$phpEx", 'i=permissions&amp;mode=setting_user_local&amp;user_id[]=' . $user_id))				);			break;		}		// Assign general variables		$template->assign_vars(array(			'S_ERROR'			=> (sizeof($error)) ? true : false,			'ERROR_MSG'			=> (sizeof($error)) ? implode('<br />', $error) : '')		);	}	/**	* Optionset replacement for this module based on $user->optionset	*/	function optionset(&$user_row, $key, $value, $data = false)	{		global $user;		$var = ($data) ? $data : $user_row['user_options'];		if ($value && !($var & 1 << $user->keyoptions[$key]))		{			$var += 1 << $user->keyoptions[$key];		}		else if (!$value && ($var & 1 << $user->keyoptions[$key]))		{			$var -= 1 << $user->keyoptions[$key];		}		else		{			return ($data) ? $var : false;		}		if (!$data)		{			$user_row['user_options'] = $var;			return true;		}		else		{			return $var;		}	}	/**	* Optionget replacement for this module based on $user->optionget	*/	function optionget(&$user_row, $key, $data = false)	{		global $user;		$var = ($data) ? $data : $user_row['user_options'];		return ($var & 1 << $user->keyoptions[$key]) ? true : false;	}}?>
<?php/**** ucp [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// Privacy policy and T&C$lang = array_merge($lang, array(	'TERMS_OF_USE_CONTENT'	=> 'By accessing %1$s (hereinafter we, us, our, %1$s, %2$s), you agree to be legally bound by the following terms. If you do not agree to be legally bound by all of the following terms then please do not access and/or use %1$s. We may change these at any time and well do our utmost in informing you, though it would be prudent to review this regularly yourself as your continued usage of %1$s after changes mean you agree to be legally bound by these terms as they are updated and/or amended.<br />	<br />	Our forums are powered by phpBB (hereinafter they, them, their, phpBB software, www.phpbb.com, phpBB Group, phpBB Teams) which is a bulletin board solution released under the <a href="http://opensource.org/licenses/gpl-license.php">General Public License</a> (hereinafter GPL) and can be downloaded from <a href="http://www.phpbb.com/">www.phpbb.com</a>. The phpBB software only facilitates internet based discussions, the phpBB Group are not responsible for what we allow and/or disallow as permissible content and/or conduct. For further information about phpBB, please see: <a href="http://www.phpbb.com/">http://www.phpbb.com/</a>.<br />	<br />	You agree not to post any abusive, obscene, vulgar, slanderous, hateful, threatening, sexually-orientated or any other material that may violate any laws be it of your country, the country where %1$s is hosted or International Law. Doing so may lead to you being immediately and permanently banned, with notification of your Internet Service Provider if deemed required by us. The IP address of all posts are recorded to aid in enforcing these conditions. You agree that %1$s have the right to remove, edit, move or close any topic at any time should we see fit. As a user you agree to any information you have entered to being stored in a database. While this information will not be disclosed to any third party without your consent, neither %1$s nor phpBB shall be held responsible for any hacking attempt that may lead to the data being compromised.	',	'PRIVACY_POLICY'		=> 'This policy explains in detail how %1$s along with its affiliated companies (hereinafter we, us, our, %1$s, %2$s) and phpBB (hereinafter they, them, their, phpBB software, www.phpbb.com, phpBB Group, phpBB Teams) use any information collected during any session of usage by you (hereinafter your information).<br />	<br />	Your information is collected via two ways. Firstly, by browsing %1$s will cause the phpBB software to create a number of cookies, which are small text files that are downloaded on to your computers web browser temporary files. The first two cookies just contain a user identifier (hereinafter user-id) and an anonymous session identifier (hereinafter session-id), automatically assigned to you by the phpBB software. A third cookie will be created once you have browsed topics within %1$s and is used to store which topics have been read, thereby improving your user experience.<br />	<br />	We may also create cookies external to the phpBB software whilst browsing %1$s, though these are outside the scope of this document which is intended to only cover the pages created by the phpBB software. The second way in which we collect your information is by what you submit to us. This can be, and is not limited to: posting as an anonymous user (hereinafter anonymous posts), registering on %1$s (hereinafter your account) and posts submitted by you after registration and whilst logged in (hereinafter your posts).<br />	<br />	Your account will at a bare minimum contain a uniquely identifiable name (hereinafter your user name), a personal password used for logging into your account (hereinafter your password) and a personal, valid e-mail address (hereinafter your e-mail). Your information for your account at %1$s is protected by data-protection laws applicable in the country that hosts us. Any information beyond your user name, your password, and your e-mail address required by %1$s during the registration process is either mandatory or optional, at the discretion of %1$s. In all cases, you have the option of what information in your account is publicly displayed. Furthermore, within your account, you have the option to opt-in or opt-out of automatically generated e-mails from the phpBB software.<br />	<br />	Your password is ciphered (a one-way hash) so that it is secure. However, it is recommended that you do not reuse the same password across a number of different websites. Your password is the means of accessing your account at %1$s, so please guard it carefully and under no circumstance will anyone affiliated with %1$s, phpBB or another 3rd party, legitimately ask you for your password. Should you forget your password for your account, you can use the I forgot my password feature provided by the phpBB software. This process will ask you to submit your user name and your e-mail, then the phpBB software will generate a new password to reclaim your account.<br />	',));// Common language entries$lang = array_merge($lang, array(	'ACCOUNT_ACTIVE'				=> 'Your account has now been activated. Thank you for registering.',	'ACCOUNT_ACTIVE_ADMIN'			=> 'The account has now been activated.',	'ACCOUNT_ACTIVE_PROFILE'		=> 'Your account has now been successfully reactivated.',	'ACCOUNT_ADDED'					=> 'Thank you for registering, your account has been created. You may now login with your username and password.',	'ACCOUNT_COPPA'					=> 'Your account has been created but has to be approved, please check your e-mail for details.',	'ACCOUNT_EMAIL_CHANGED'			=> 'Your account has been updated. However, this board requires account reactivation on e-mail changes. An activation key has been sent to the new e-mail address you provided. Please check your e-mail for further information.',	'ACCOUNT_EMAIL_CHANGED_ADMIN'	=> 'Your account has been updated. However, this board requires account reactivation by the administrators on e-mail changes. An e-mail has been sent to them and you will be informed when your account has been reactivated.',	'ACCOUNT_INACTIVE'				=> 'Your account has been created. However, this board requires account activation, an activation key has been sent to the e-mail address you provided. Please check your e-mail for further information.',	'ACCOUNT_INACTIVE_ADMIN'		=> 'Your account has been created. However, this board requires account activation by the administrator group. An e-mail has been sent to them and you will be informed when your account has been activated.',	'ACTIVATION_EMAIL_SENT'			=> 'The activation e-mail has been sent to your e-mail address.',	'ACTIVATION_EMAIL_SENT_ADMIN'	=> 'The activation e-mail has been sent to the administrators e-mail addresses.',	'ADD'							=> 'Add',	'ADD_BCC'						=> 'Add [BCC]',	'ADD_FOES'						=> 'Add new foes',	'ADD_FOES_EXPLAIN'				=> 'You may enter several usernames each on a different line.',	'ADD_FOLDER'					=> 'Add folder',	'ADD_FRIENDS'					=> 'Add new friends',	'ADD_FRIENDS_EXPLAIN'			=> 'You may enter several usernames each on a different line.',	'ADD_NEW_RULE'					=> 'Add new rule',	'ADD_RULE'						=> 'Add rule',	'ADD_TO'						=> 'Add [To]',	'ADD_USERS_UCP_EXPLAIN'			=> 'Here you can add new users to the group. You may select whether this group becomes the new default for the selected users. Please enter each username on a separate line.',	'ADMIN_EMAIL'					=> 'Administrators can e-mail me information',	'AGREE'							=> 'I agree to these terms',	'ALLOW_PM'						=> 'Allow users to send you private messages',	'ALLOW_PM_EXPLAIN'				=> 'Note that administrators and moderators will always be able to send you messages.',	'ALREADY_ACTIVATED'				=> 'You have already activated your account.',	'ATTACHMENTS_EXPLAIN'			=> 'This is a list of attachments you have made in posts to this board.',	'ATTACHMENTS_DELETED'			=> 'Attachments successfully deleted.',	'ATTACHMENT_DELETED'			=> 'Attachment successfully deleted.',	'AVATAR_CATEGORY'				=> 'Category',	'AVATAR_EXPLAIN'				=> 'Maximum dimensions; width: %1$d pixels, height: %2$d pixels, file size: %3$.2f KiB.',	'AVATAR_FEATURES_DISABLED'		=> 'The avatar functionality is currently disabled.',	'AVATAR_GALLERY'				=> 'Local gallery',	'AVATAR_GENERAL_UPLOAD_ERROR'	=> 'Could not upload avatar to %s.',	'AVATAR_NOT_ALLOWED'			=> 'Your avatar cannot be displayed because avatars have been disallowed.',	'AVATAR_PAGE'					=> 'Page',	'AVATAR_TYPE_NOT_ALLOWED'		=> 'Your current avatar cannot be displayed because its type has been disallowed.',	'BACK_TO_DRAFTS'			=> 'Back to saved drafts',	'BACK_TO_LOGIN'				=> 'Back to login screen',	'BIRTHDAY'					=> 'Birthday',	'BIRTHDAY_EXPLAIN'			=> 'Setting a year will list your age when it is your birthday.',	'BOARD_DATE_FORMAT'			=> 'My date format',	'BOARD_DATE_FORMAT_EXPLAIN'	=> 'The syntax used is identical to the PHP <a href="http://www.php.net/date">date()</a> function.',	'BOARD_DST'					=> 'Summer Time/<abbr title="Daylight Saving Time">DST</abbr> is in effect',	'BOARD_LANGUAGE'			=> 'My language',	'BOARD_STYLE'				=> 'My board style',	'BOARD_TIMEZONE'			=> 'My timezone',	'BOOKMARKS'					=> 'Bookmarks',	'BOOKMARKS_EXPLAIN'			=> 'You can bookmark topics for future reference. Select the checkbox for any bookmark you wish to delete, then press the <em>Remove marked bookmarks</em> button.',	'BOOKMARKS_DISABLED'		=> 'Bookmarks are disabled on this board.',	'BOOKMARKS_REMOVED'			=> 'Bookmarks removed successfully.',	'CANNOT_EDIT_MESSAGE_TIME'	=> 'You can no longer edit or delete that message.',	'CANNOT_MOVE_TO_SAME_FOLDER'=> 'Messages cannot be moved to the folder you want to remove.',	'CANNOT_MOVE_FROM_SPECIAL'	=> 'Messages cannot be moved from the outbox.',	'CANNOT_RENAME_FOLDER'		=> 'This folder cannot be renamed.',	'CANNOT_REMOVE_FOLDER'		=> 'This folder cannot be removed.',	'CHANGE_DEFAULT_GROUP'		=> 'Change default group',	'CHANGE_PASSWORD'			=> 'Change password',	'CLICK_GOTO_FOLDER'			=> '%1$sGo to your %3$s folder%2$s',	'CLICK_RETURN_FOLDER'		=> '%1$sReturn to your %3$s folder%2$s',	'CONFIRMATION'				=> 'Confirmation of registration',	'CONFIRM_CHANGES'			=> 'Confirm changes',	'CONFIRM_EMAIL'				=> 'Confirm e-mail address',	'CONFIRM_EMAIL_EXPLAIN'		=> 'You only need to specify this if you are changing your e-mail address.',	'CONFIRM_EXPLAIN'			=> 'To prevent automated registrations the board requires you to enter a confirmation code. The code is displayed in the image you should see below. If you are visually impaired or cannot otherwise read this code please contact the %sBoard Administrator%s.',	'VC_REFRESH'				=> 'Refresh confirmation code',	'VC_REFRESH_EXPLAIN'		=> 'If you cannot read the code you can request a new one by clicking the button.',	'CONFIRM_PASSWORD'			=> 'Confirm password',	'CONFIRM_PASSWORD_EXPLAIN'	=> 'You only need to confirm your password if you changed it above.',	'COPPA_BIRTHDAY'			=> 'To continue with the registration procedure please tell us when you were born.',	'COPPA_COMPLIANCE'			=> 'COPPA compliance',	'COPPA_EXPLAIN'				=> 'Please note that clicking submit will create your account. However it cannot be activated until a parent or guardian approves your registration. You will be emailed a copy of the necessary form with details of where to send it.',	'CREATE_FOLDER'				=> 'Add folder',	'CURRENT_IMAGE'				=> 'Current image',	'CURRENT_PASSWORD'			=> 'Current password',	'CURRENT_PASSWORD_EXPLAIN'	=> 'You must confirm your current password if you wish to change it, alter your e-mail address or username.',	'CUR_PASSWORD_EMPTY'		=> 'You did not enter your current password.',	'CUR_PASSWORD_ERROR'		=> 'The current password you entered is incorrect.',	'CUSTOM_DATEFORMAT'			=> 'Custom',	'DEFAULT_ACTION'			=> 'Default action',	'DEFAULT_ACTION_EXPLAIN'	=> 'This action will be triggered if none of the above is applicable.',	'DEFAULT_ADD_SIG'			=> 'Attach my signature by default',	'DEFAULT_BBCODE'			=> 'Enable BBCode by default',	'DEFAULT_NOTIFY'			=> 'Notify me upon replies by default',	'DEFAULT_SMILIES'			=> 'Enable smilies by default',	'DEFINED_RULES'				=> 'Defined rules',	'DELETED_TOPIC'				=> 'Topic has been removed.',	'DELETE_ATTACHMENT'			=> 'Delete attachment',	'DELETE_ATTACHMENTS'		=> 'Delete attachments',	'DELETE_ATTACHMENT_CONFIRM'	=> 'Are you sure you want to delete this attachment?',	'DELETE_ATTACHMENTS_CONFIRM'=> 'Are you sure you want to delete these attachments?',	'DELETE_AVATAR'				=> 'Delete image',	'DELETE_COOKIES_CONFIRM'	=> 'Are you sure you want to delete all cookies set by this board?',	'DELETE_MARKED_PM'			=> 'Delete marked messages',	'DELETE_MARKED_PM_CONFIRM'	=> 'Are you sure you want to delete all marked messages?',	'DELETE_OLDEST_MESSAGES'	=> 'Delete oldest messages',	'DELETE_MESSAGE'			=> 'Delete message',	'DELETE_MESSAGE_CONFIRM'	=> 'Are you sure you want to delete this private message?',	'DELETE_MESSAGES_IN_FOLDER'	=> 'Delete all messages within removed folder',	'DELETE_RULE'				=> 'Delete rule',	'DELETE_RULE_CONFIRM'		=> 'Are you sure you want to delete this rule?',	'DEMOTE_SELECTED'			=> 'Demote selected',	'DISABLE_CENSORS'			=> 'Enable word censoring',	'DISPLAY_GALLERY'			=> 'Display gallery',	'DOMAIN_NO_MX_RECORD_EMAIL'	=> 'The entered e-mail domain has no valid MX record.',	'DOWNLOADS'					=> 'Downloads',	'DRAFTS_DELETED'			=> 'All selected drafts were successfully deleted.',	'DRAFTS_EXPLAIN'			=> 'Here you can view, edit and delete your saved drafts.',	'DRAFT_UPDATED'				=> 'Draft successfully updated.',	'EDIT_DRAFT_EXPLAIN'		=> 'Here you are able to edit your draft. Drafts do not contain attachment and poll information.',	'EMAIL_BANNED_EMAIL'		=> 'The e-mail address you entered is not allowed to be used.',	'EMAIL_INVALID_EMAIL'		=> 'The e-mail address you entered is invalid.',	'EMAIL_REMIND'				=> 'This must be the e-mail address associated with your account. If you have not changed this via your user control panel then it is the e-mail address you registered your account with.',	'EMAIL_TAKEN_EMAIL'			=> 'The entered e-mail address is already in use.',	'EMPTY_DRAFT'				=> 'You must enter a message to submit your changes.',	'EMPTY_DRAFT_TITLE'			=> 'You must enter a draft title.',	'EXPORT_AS_XML'				=> 'Export as XML',	'EXPORT_AS_CSV'				=> 'Export as CSV',	'EXPORT_AS_CSV_EXCEL'		=> 'Export as CSV (Excel)',	'EXPORT_AS_TXT'				=> 'Export as TXT',	'EXPORT_AS_MSG'				=> 'Export as MSG',	'EXPORT_FOLDER'				=> 'Export this view',	'FIELD_REQUIRED'					=> 'The field %s must be completed.',	'FIELD_TOO_SHORT'					=> 'The field %1$s is too short, a minimum of %2$d characters is required.',	'FIELD_TOO_LONG'					=> 'The field %1$s is too long, a maximum of %2$d characters is allowed.',	'FIELD_TOO_SMALL'					=> 'The value of %1$s is too small, a minimum value of %2$d is required.',	'FIELD_TOO_LARGE'					=> 'The value of %1$s is too large, a maximum value of %2$d is allowed.',	'FIELD_INVALID_CHARS_NUMBERS_ONLY'	=> 'The field %s has invalid characters, only numbers are allowed.',	'FIELD_INVALID_CHARS_ALPHA_ONLY'	=> 'The field %s has invalid characters, only alphanumeric characters are allowed.',	'FIELD_INVALID_CHARS_SPACERS_ONLY'	=> 'The field %s has invalid characters, only alphanumeric, space or -+_[] characters are allowed.',	'FIELD_INVALID_DATE'				=> 'The field %s has an invalid date.',	'FIELD_INVALID_VALUE'				=> 'The field %s has an invalid value.',	'FOE_MESSAGE'				=> 'Message from foe',	'FOES_EXPLAIN'				=> 'Foes are users which will be ignored by default. Posts by these users will not be fully visible. Personal messages from foes are still permitted. Please note that you cannot ignore moderators or administrators.',	'FOES_UPDATED'				=> 'Your foes list has been updated successfully.',	'FOLDER_ADDED'				=> 'Folder successfully added.',	'FOLDER_MESSAGE_STATUS'		=> '%1$d from %2$d messages stored',	'FOLDER_NAME_EMPTY'			=> 'You must enter a name for this folder.',	'FOLDER_NAME_EXIST'			=> 'Folder <strong>%s</strong> already exists.',	'FOLDER_OPTIONS'			=> 'Folder options',	'FOLDER_RENAMED'			=> 'Folder successfully renamed.',	'FOLDER_REMOVED'			=> 'Folder successfully removed.',	'FOLDER_STATUS_MSG'			=> 'Folder is %1$d%% full (%2$d from %3$d messages stored)',	'FORWARD_PM'				=> 'Forward PM',	'FORCE_PASSWORD_EXPLAIN'	=> 'Before you may continue browsing the board you are required to change your password.',	'FRIEND_MESSAGE'			=> 'Message from friend',	'FRIENDS'					=> 'Friends',	'FRIENDS_EXPLAIN'			=> 'Friends enable you quick access to members you communicate with frequently. If the template has relevant support any posts made by a friend may be highlighted.',	'FRIENDS_OFFLINE'			=> 'Offline',	'FRIENDS_ONLINE'			=> 'Online',	'FRIENDS_UPDATED'			=> 'Your friends list has been updated successfully.',	'FULL_FOLDER_OPTION_CHANGED'=> 'The action to take when a folder is full has been changed successfully.',	'FWD_ORIGINAL_MESSAGE'		=> '-------- Original Message --------',	'FWD_SUBJECT'				=> 'Subject: %s',	'FWD_DATE'					=> 'Date: %s',	'FWD_FROM'					=> 'From: %s',	'FWD_TO'					=> 'To: %s',	'GLOBAL_ANNOUNCEMENT'		=> 'Global announcement',	'HIDE_ONLINE'				=> 'Hide my online status',	'HIDE_ONLINE_EXPLAIN'		=> 'Changing this setting wont become effective until your next visit to the board.',	'HOLD_NEW_MESSAGES'			=> 'Do not accept new messages (New messages will be held back until enough space is available)',	'HOLD_NEW_MESSAGES_SHORT'	=> 'New messages will be held back',	'IF_FOLDER_FULL'			=> 'If folder is full',	'IMPORTANT_NEWS'			=> 'Important announcements',	'INVALID_USER_BIRTHDAY'			=> 'The entered birthday is not a valid date.',	'INVALID_CHARS_USERNAME'	=> 'The username contains forbidden characters.',	'INVALID_CHARS_NEW_PASSWORD'=> 'The password does not contain the required characters.',	'ITEMS_REQUIRED'			=> 'The items marked with * are required profile fields and need to be filled out.',	'JOIN_SELECTED'				=> 'Join selected',	'LANGUAGE'					=> 'Language',	'LINK_REMOTE_AVATAR'		=> 'Link off-site',	'LINK_REMOTE_AVATAR_EXPLAIN'=> 'Enter the URL of the location containing the avatar image you wish to link to.',	'LINK_REMOTE_SIZE'			=> 'Avatar dimensions',	'LINK_REMOTE_SIZE_EXPLAIN'	=> 'Specify the width and height of the avatar, leave blank to attempt automatic verification.',	'LOGIN_EXPLAIN_UCP'			=> 'Please login in order to access the User Control Panel.',	'LOGIN_REDIRECT'			=> 'You have been successfully logged in.',	'LOGOUT_FAILED'				=> 'You were not logged out, as the request did not match your session. Please contact the board administrator if you continue to experience problems.',	'LOGOUT_REDIRECT'			=> 'You have been successfully logged out.',	'MARK_IMPORTANT'				=> 'Mark/Unmark as important',	'MARKED_MESSAGE'				=> 'Marked message',	'MAX_FOLDER_REACHED'			=> 'Maximum number of allowed user defined folders reached.',	'MESSAGE_BY_AUTHOR'				=> 'by',	'MESSAGE_COLOURS'				=> 'Message colours',	'MESSAGE_DELETED'				=> 'Message successfully deleted.',	'MESSAGE_HISTORY'				=> 'Message history',	'MESSAGE_REMOVED_FROM_OUTBOX'	=> 'This message has been removed by its author before it was delivered.',	'MESSAGE_SENT_ON'				=> 'on',	'MESSAGE_STORED'				=> 'This message has been sent successfully.',	'MESSAGE_TO'					=> 'To',	'MESSAGES_DELETED'				=> 'Messages successfully deleted',	'MOVE_DELETED_MESSAGES_TO'		=> 'Move messages from removed folder to',	'MOVE_DOWN'						=> 'Move down',	'MOVE_MARKED_TO_FOLDER'			=> 'Move marked to %s',	'MOVE_PM_ERROR'					=> 'An error occurred while moving the messages to the new folder, only %1d from %2d messages were moved.',	'MOVE_TO_FOLDER'				=> 'Move to folder',	'MOVE_UP'						=> 'Move up',	'NEW_EMAIL_CONFIRM_EMPTY'		=> 'You did not enter a confirm e-mail address.',	'NEW_EMAIL_ERROR'				=> 'The e-mail addresses you entered do not match.',	'NEW_FOLDER_NAME'				=> 'New folder name',	'NEW_PASSWORD'					=> 'New password',	'NEW_PASSWORD_CONFIRM_EMPTY'	=> 'You did not enter a confirm password.',	'NEW_PASSWORD_ERROR'			=> 'The passwords you entered do not match.',	'NOTIFY_METHOD'					=> 'Notification method',	'NOTIFY_METHOD_BOTH'			=> 'Both',	'NOTIFY_METHOD_EMAIL'			=> 'E-mail only',	'NOTIFY_METHOD_EXPLAIN'			=> 'Method for sending messages sent via this board.',	'NOTIFY_METHOD_IM'				=> 'Jabber only',	'NOTIFY_ON_PM'					=> 'Notify me on new private messages',	'NOT_ADDED_FRIENDS_ANONYMOUS'	=> 'You cannot add the anonymous user to your friends list.',	'NOT_ADDED_FRIENDS_BOTS'		=> 'You cannot add bots to your friends list.',	'NOT_ADDED_FRIENDS_FOES'		=> 'You cannot add users to your friends list who are on your foes list.',	'NOT_ADDED_FRIENDS_SELF'		=> 'You cannot add yourself to the friends list.',	'NOT_ADDED_FOES_MOD_ADMIN'		=> 'You cannot add administrators and moderators to your foes list.',	'NOT_ADDED_FOES_ANONYMOUS'		=> 'You cannot add the anonymous user to your foes list.',	'NOT_ADDED_FOES_BOTS'			=> 'You cannot add bots to your foes list.',	'NOT_ADDED_FOES_FRIENDS'		=> 'You cannot add users to your foes list who are on your friends list.',	'NOT_ADDED_FOES_SELF'			=> 'You cannot add yourself to the foes list.',	'NOT_AGREE'						=> 'I do not agree to these terms',	'NOT_ENOUGH_SPACE_FOLDER'		=> 'The destination folder %s seems to be full. The requested action has not been taken.',	'NOT_MOVED_MESSAGE'				=> 'You have 1 private message currently on hold because of full folder.',	'NOT_MOVED_MESSAGES'			=> 'You have %d private messages currently on hold because of full folder.',	'NO_ACTION_MODE'				=> 'No message action specified.',	'NO_AUTHOR'						=> 'No author defined for this message',	'NO_AVATAR_CATEGORY'			=> 'None',	'NO_AUTH_DELETE_MESSAGE'		=> 'You are not authorised to delete private messages.',	'NO_AUTH_EDIT_MESSAGE'			=> 'You are not authorised to edit private messages.',	'NO_AUTH_FORWARD_MESSAGE'		=> 'You are not authorised to forward private messages.',	'NO_AUTH_GROUP_MESSAGE'			=> 'You are not authorised to send private messages to groups.',	'NO_AUTH_PASSWORD_REMINDER'		=> 'You are not authorised to request a new password.',	'NO_AUTH_READ_HOLD_MESSAGE'		=> 'You are not authorised to read private messages that are on hold.',	'NO_AUTH_READ_MESSAGE'			=> 'You are not authorised to read private messages.',	'NO_AUTH_READ_REMOVED_MESSAGE'	=> 'You are not able to read this message because it was removed by the author.',	'NO_AUTH_SEND_MESSAGE'			=> 'You are not authorised to send private messages.',	'NO_AUTH_SIGNATURE'				=> 'You are not authorised to define a signature.',	'NO_BCC_RECIPIENT'			=> 'None',	'NO_BOOKMARKS'				=> 'You have no bookmarks.',	'NO_BOOKMARKS_SELECTED'		=> 'You have selected no bookmarks.',	'NO_EDIT_READ_MESSAGE'		=> 'Private message cannot be edited because it has already been read.',	'NO_EMAIL_USER'				=> 'The e-mail/username information submitted could not be found.',	'NO_FOES'					=> 'No foes currently defined',	'NO_FRIENDS'				=> 'No friends currently defined',	'NO_FRIENDS_OFFLINE'		=> 'No friends offline',	'NO_FRIENDS_ONLINE'			=> 'No friends online',	'NO_GROUP_SELECTED'			=> 'No group specified.',	'NO_IMPORTANT_NEWS'			=> 'No important announcements present.',	'NO_MESSAGE'				=> 'Private message could not be found.',	'NO_NEW_FOLDER_NAME'		=> 'You have to specify a new folder name.',	'NO_NEWER_PM'				=> 'No newer messages.',	'NO_OLDER_PM'				=> 'No older messages.',	'NO_PASSWORD_SUPPLIED'		=> 'You cannot login without a password.',	'NO_RECIPIENT'				=> 'No recipient defined.',	'NO_RULES_DEFINED'			=> 'No rules defined.',	'NO_SAVED_DRAFTS'			=> 'No drafts saved.',	'NO_TO_RECIPIENT'			=> 'None',	'NO_WATCHED_FORUMS'			=> 'You are not subscribed to any forums.',	'NO_WATCHED_SELECTED'		=> 'You have not selected any subscribed topics or forums.',	'NO_WATCHED_TOPICS'			=> 'You are not subscribed to any topics.',	'PASS_TYPE_ALPHA_EXPLAIN'	=> 'Password must be between %1$d and %2$d characters long, must contain letters in mixed case and must contain numbers.',	'PASS_TYPE_ANY_EXPLAIN'		=> 'Must be between %1$d and %2$d characters.',	'PASS_TYPE_CASE_EXPLAIN'	=> 'Password must be between %1$d and %2$d characters long and must contain letters in mixed case.',	'PASS_TYPE_SYMBOL_EXPLAIN'	=> 'Password must be between %1$d and %2$d characters long, must contain letters in mixed case, must contain numbers and must contain symbols.',	'PASSWORD'					=> 'Password',	'PASSWORD_ACTIVATED'		=> 'Your new password has been activated.',	'PASSWORD_UPDATED'			=> 'A new password was sent to your registered e-mail address.',	'PERMISSIONS_RESTORED'		=> 'Successfully restored original permissions.',	'PERMISSIONS_TRANSFERRED'	=> 'Successfully transferred permissions from <strong>%s</strong>, you are now able to browse the board with this users permissions.<br />Please note that admin permissions were not transferred. You are able to revert to your permission set at any time.',	'PM_DISABLED'				=> 'Private messaging has been disabled on this board.',	'PM_FROM'					=> 'From',	'PM_FROM_REMOVED_AUTHOR'	=> 'This message was sent by a user no longer registered.',	'PM_ICON'					=> 'PM icon',	'PM_INBOX'					=> 'Inbox',	'PM_NO_USERS'				=> 'The requested users to be added do not exist.',	'PM_OUTBOX'					=> 'Outbox',	'PM_SENTBOX'				=> 'Sent messages',	'PM_SUBJECT'				=> 'Message subject',	'PM_TO'						=> 'Send to',	'PM_USERS_REMOVED_NO_PM'	=> 'Some users couldnt be added as they have disabled private message receipt.',	'POPUP_ON_PM'				=> 'Pop up window on new private message',	'POST_EDIT_PM'				=> 'Edit message',	'POST_FORWARD_PM'			=> 'Forward message',	'POST_NEW_PM'				=> 'Compose message',	'POST_PM_LOCKED'			=> 'Private messaging is locked.',	'POST_PM_POST'				=> 'Quote post',	'POST_QUOTE_PM'				=> 'Quote message',	'POST_REPLY_PM'				=> 'Reply to message',	'PRINT_PM'					=> 'Print view',	'PREFERENCES_UPDATED'		=> 'Your preferences have been updated.',	'PROFILE_INFO_NOTICE'		=> 'Please note that this information may be viewable to other members. Be careful when including any personal details. Any fields marked with a * must be completed.',	'PROFILE_UPDATED'			=> 'Your profile has been updated.',	'RECIPIENT'							=> 'Recipient',	'RECIPIENTS'						=> 'Recipients',	'REGISTRATION'						=> 'Registration',	'RELEASE_MESSAGES'					=> '%sRelease all on-hold messages%s they will be re-sorted into the appropriate folder if enough space is made available.',	'REMOVE_ADDRESS'					=> 'Remove address',	'REMOVE_SELECTED_BOOKMARKS'			=> 'Remove selected bookmarks',	'REMOVE_SELECTED_BOOKMARKS_CONFIRM'	=> 'Are you sure you want to delete all selected bookmarks?',	'REMOVE_BOOKMARK_MARKED'			=> 'Remove marked bookmarks',	'REMOVE_FOLDER'						=> 'Remove folder',	'REMOVE_FOLDER_CONFIRM'				=> 'Are you sure you want to remove this folder?',	'RENAME'							=> 'Rename',	'RENAME_FOLDER'						=> 'Rename folder',	'REPLIED_MESSAGE'					=> 'Replied to message',	'REPLY_TO_ALL'						=> 'Reply to sender and all recipients.',	'REPORT_PM'							=> 'Report private message',	'RESIGN_SELECTED'					=> 'Resign selected',	'RETURN_FOLDER'						=> '%1$sReturn to previous folder%2$s',	'RETURN_UCP'						=> '%sReturn to the User Control Panel%s',	'RULE_ADDED'						=> 'Rule successfully added.',	'RULE_ALREADY_DEFINED'				=> 'This rule was defined previously.',	'RULE_DELETED'						=> 'Rule successfully removed.',	'RULE_NOT_DEFINED'					=> 'Rule not correctly specified.',	'RULE_REMOVED_MESSAGE'				=> 'One private message had been removed due to private message filters.',	'RULE_REMOVED_MESSAGES'				=> '%d private messages were removed due to private message filters.',	'SAME_PASSWORD_ERROR'		=> 'The new password you entered is the same as your current password.',	'SEARCH_YOUR_POSTS'			=> 'Show your posts',	'SEND_PASSWORD'				=> 'Send password',	'SENT_AT'					=> 'Sent',			// Used before dates in private messages	'SHOW_EMAIL'				=> 'Users can contact me by e-mail',	'SIGNATURE_EXPLAIN'			=> 'This is a block of text that can be added to posts you make. There is a %d character limit.',	'SIGNATURE_PREVIEW'			=> 'Your signature will appear like this in posts',	'SIGNATURE_TOO_LONG'		=> 'Your signature is too long.',	'SORT'						=> 'Sort',	'SORT_COMMENT'				=> 'File comment',	'SORT_DOWNLOADS'			=> 'Downloads',	'SORT_EXTENSION'			=> 'Extension',	'SORT_FILENAME'				=> 'Filename',	'SORT_POST_TIME'			=> 'Post time',	'SORT_SIZE'					=> 'File size',	'TIMEZONE'					=> 'Timezone',	'TO'						=> 'To',	'TOO_MANY_RECIPIENTS'		=> 'You tried to send a private message to too many recipients.',	'TOO_MANY_REGISTERS'		=> 'You have exceeded the maximum number of registration attempts for this session. Please try again later.',	'UCP'						=> 'User Control Panel',	'UCP_ACTIVATE'				=> 'Activate account',	'UCP_ADMIN_ACTIVATE'		=> 'Please note that you will need to enter a valid e-mail address before your account is activated. The administrator will review your account and if approved you will receive an e-mail at the address you specified.',	'UCP_AIM'					=> 'AOL Instant Messenger',	'UCP_ATTACHMENTS'			=> 'Attachments',	'UCP_COPPA_BEFORE'			=> 'Before %s',	'UCP_COPPA_ON_AFTER'		=> 'On or after %s',	'UCP_EMAIL_ACTIVATE'		=> 'Please note that you will need to enter a valid e-mail address before your account is activated. You will receive an e-mail at the address you provide that contains an account activation link.',	'UCP_ICQ'					=> 'ICQ number',	'UCP_JABBER'				=> 'Jabber address',	'UCP_MAIN'					=> 'Overview',	'UCP_MAIN_ATTACHMENTS'		=> 'Manage attachments',	'UCP_MAIN_BOOKMARKS'		=> 'Manage bookmarks',	'UCP_MAIN_DRAFTS'			=> 'Manage drafts',	'UCP_MAIN_FRONT'			=> 'Front page',	'UCP_MAIN_SUBSCRIBED'		=> 'Manage subscriptions',	'UCP_MSNM'					=> 'WL/MSN Messenger',	'UCP_NO_ATTACHMENTS'		=> 'You have posted no files.',	'UCP_PREFS'					=> 'Board preferences',	'UCP_PREFS_PERSONAL'		=> 'Edit global settings',	'UCP_PREFS_POST'			=> 'Edit posting defaults',	'UCP_PREFS_VIEW'			=> 'Edit display options',	'UCP_PM'					=> 'Private messages',	'UCP_PM_COMPOSE'			=> 'Compose message',	'UCP_PM_DRAFTS'				=> 'Manage PM drafts',	'UCP_PM_OPTIONS'			=> 'Rules, folders &amp; settings',	'UCP_PM_POPUP'				=> 'Private messages',	'UCP_PM_POPUP_TITLE'		=> 'Private message popup',	'UCP_PM_UNREAD'				=> 'Unread messages',	'UCP_PM_VIEW'				=> 'View messages',	'UCP_PROFILE'				=> 'Profile',	'UCP_PROFILE_AVATAR'		=> 'Edit avatar',	'UCP_PROFILE_PROFILE_INFO'	=> 'Edit profile',	'UCP_PROFILE_REG_DETAILS'	=> 'Edit account settings',	'UCP_PROFILE_SIGNATURE'		=> 'Edit signature',	'UCP_USERGROUPS'			=> 'Usergroups',	'UCP_USERGROUPS_MEMBER'		=> 'Edit memberships',	'UCP_USERGROUPS_MANAGE'		=> 'Manage groups',	'UCP_REGISTER_DISABLE'			=> 'Creating a new account is currently not possible.',	'UCP_REMIND'					=> 'Send password',	'UCP_RESEND'					=> 'Send activation e-mail',	'UCP_WELCOME'					=> 'Welcome to the User Control Panel. From here you can monitor, view and update your profile, preferences, subscribed forums and topics. You can also send messages to other users (if permitted). Please ensure you read any announcements before continuing.',	'UCP_YIM'						=> 'Yahoo Messenger',	'UCP_ZEBRA'						=> 'Friends &amp; Foes',	'UCP_ZEBRA_FOES'				=> 'Manage foes',	'UCP_ZEBRA_FRIENDS'				=> 'Manage friends',	'UNDISCLOSED_RECIPIENT'			=> 'Undisclosed Recipient',	'UNKNOWN_FOLDER'				=> 'Unknown folder',	'UNWATCH_MARKED'				=> 'Unwatch marked',	'UPLOAD_AVATAR_FILE'			=> 'Upload from your machine',	'UPLOAD_AVATAR_URL'				=> 'Upload from a URL',	'UPLOAD_AVATAR_URL_EXPLAIN'		=> 'Enter the URL of the location containing the image. The image will be copied to this site.',	'USERNAME_ALPHA_ONLY_EXPLAIN'	=> 'Username must be between %1$d and %2$d chars long and use only alphanumeric characters.',	'USERNAME_ALPHA_SPACERS_EXPLAIN'=> 'Username must be between %1$d and %2$d chars long and use alphanumeric, space or -+_[] characters.',	'USERNAME_ASCII_EXPLAIN'		=> 'Username must be between %1$d and %2$d chars long and use only ASCII characters, so no special symbols.',	'USERNAME_LETTER_NUM_EXPLAIN'	=> 'Username must be between %1$d and %2$d chars long and use only letter or number characters.',	'USERNAME_LETTER_NUM_SPACERS_EXPLAIN'=> 'Username must be between %1$d and %2$d chars long and use letter, number, space or -+_[] characters.',	'USERNAME_CHARS_ANY_EXPLAIN'	=> 'Length must be between %1$d and %2$d characters.',	'USERNAME_TAKEN_USERNAME'		=> 'The username you entered is already in use, please select an alternative.',	'USERNAME_DISALLOWED_USERNAME'	=> 'The username you entered has been disallowed or contains a disallowed word. Please choose a different name.',	'USER_NOT_FOUND_OR_INACTIVE'	=> 'The usernames you specified could either not be found or are not activated users.',	'VIEW_AVATARS'				=> 'Display avatars',	'VIEW_EDIT'					=> 'View/Edit',	'VIEW_FLASH'				=> 'Display Flash animations',	'VIEW_IMAGES'				=> 'Display images within posts',	'VIEW_NEXT_HISTORY'			=> 'Next PM in history',	'VIEW_NEXT_PM'				=> 'Next PM',	'VIEW_PM'					=> 'View message',	'VIEW_PM_INFO'				=> 'Message details',	'VIEW_PM_MESSAGE'			=> '1 message',	'VIEW_PM_MESSAGES'			=> '%d messages',	'VIEW_PREVIOUS_HISTORY'		=> 'Previous PM in history',	'VIEW_PREVIOUS_PM'			=> 'Previous PM',	'VIEW_SIGS'					=> 'Display signatures',	'VIEW_SMILIES'				=> 'Display smilies as images',	'VIEW_TOPICS_DAYS'			=> 'Display topics from previous days',	'VIEW_TOPICS_DIR'			=> 'Display topic order direction',	'VIEW_TOPICS_KEY'			=> 'Display topics ordering by',	'VIEW_POSTS_DAYS'			=> 'Display posts from previous days',	'VIEW_POSTS_DIR'			=> 'Display post order direction',	'VIEW_POSTS_KEY'			=> 'Display posts ordering by',	'WATCHED_EXPLAIN'			=> 'Below is a list of forums and topics you are subscribed to. You will be notified of new posts in either. To unsubscribe mark the forum or topic and then press the <em>Unwatch marked</em> button.',	'WATCHED_FORUMS'			=> 'Watched forums',	'WATCHED_TOPICS'			=> 'Watched topics',	'WRONG_ACTIVATION'			=> 'The activation key you supplied does not match any in the database.',	'YOUR_DETAILS'				=> 'Your activity',	'YOUR_FOES'					=> 'Your foes',	'YOUR_FOES_EXPLAIN'			=> 'To remove usernames select them and click submit.',	'YOUR_FRIENDS'				=> 'Your friends',	'YOUR_FRIENDS_EXPLAIN'		=> 'To remove usernames select them and click submit.',	'YOUR_WARNINGS'				=> 'Your warning level',	'PM_ACTION' => array(		'PLACE_INTO_FOLDER'	=> 'Place into folder',		'MARK_AS_READ'		=> 'Mark as read',		'MARK_AS_IMPORTANT'	=> 'Mark message',		'DELETE_MESSAGE'	=> 'Delete message'	),	'PM_CHECK' => array(		'SUBJECT'	=> 'Subject',		'SENDER'	=> 'Sender',		'MESSAGE'	=> 'Message',		'STATUS'	=> 'Message status',		'TO'		=> 'Sent To'	),	'PM_RULE' => array(		'IS_LIKE'		=> 'is like',		'IS_NOT_LIKE'	=> 'is not like',		'IS'			=> 'is',		'IS_NOT'		=> 'is not',		'BEGINS_WITH'	=> 'begins with',		'ENDS_WITH'		=> 'ends with',		'IS_FRIEND'		=> 'is friend',		'IS_FOE'		=> 'is foe',		'IS_USER'		=> 'is user',		'IS_GROUP'		=> 'is in usergroup',		'ANSWERED'		=> 'answered',		'FORWARDED'		=> 'forwarded',		'TO_GROUP'		=> 'to my default usergroup',		'TO_ME'			=> 'to me'	),	'GROUPS_EXPLAIN'	=> 'Usergroups enable board admins to better administer users. By default you will be placed in a specific group, this is your default group. This group defines how you may appear to other users, for example your username colouration, avatar, rank, etc. Depending on whether the administrator allows it you may be allowed to change your default group. You may also be placed in or allowed to join other groups. Some groups may give you additional permissions to view content or increase your capabilities in other areas.',	'GROUP_LEADER'		=> 'Leaderships',	'GROUP_MEMBER'		=> 'Memberships',	'GROUP_PENDING'		=> 'Pending memberships',	'GROUP_NONMEMBER'	=> 'Non-memberships',	'GROUP_DETAILS'		=> 'Group details',	'NO_LEADER'		=> 'No group leaderships',	'NO_MEMBER'		=> 'No group memberships',	'NO_PENDING'	=> 'No pending memberships',	'NO_NONMEMBER'	=> 'No non-member groups',));?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**/if (php_sapi_name() != 'cli'){	die("This program must be run from the command line.\n");}//// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = '../';$phpEx = substr(strrchr(__FILE__, '.'), 1);echo "Checking for required files\n";download('http://unicode.org/reports/tr39/data/confusables.txt');download('http://unicode.org/Public/UNIDATA/CaseFolding.txt');echo "\n";/*** Load the confusables table*/echo "Loading confusables\n";$unidata = file_get_contents('confusables.txt');/*** Load the CaseFolding table*/echo "Loading CaseFolding\n";$casefolds = file_get_contents('CaseFolding.txt');function utf8_chr($cp){    if ($cp > 0xFFFF)    {        return chr(0xF0 | ($cp >> 18)) . chr(0x80 | (($cp >> 12) & 0x3F)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));    }    else if ($cp > 0x7FF)    {        return chr(0xE0 | ($cp >> 12)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));    }    else if ($cp > 0x7F)    {        return chr(0xC0 | ($cp >> 6)) . chr(0x80 | ($cp & 0x3F));    }    else    {        return chr($cp);    }}preg_match_all('/^([0-9A-F]+) ;\s((?:[0-9A-F]+ )*);.*?$/im', $unidata, $array, PREG_SET_ORDER);preg_match_all('/^([0-9A-F]+); ([CFS]); ([0-9A-F]+(?: [0-9A-F]+)*);/im', $casefolds, $casefold_array);// some that we defined ourselves$uniarray = array(		"\xC2\xA1"			=>	"\x69",	// EXCLAMATION MARK, INVERTED => LATIN SMALL LETTER I		"\xC7\x83"			=>	"\x21",	// LATIN LETTER RETROFLEX CLICK => EXCLAMATION MARK		"\xCE\xB1"			=>	"\x61",	// GREEK SMALL LETTER ALPHA => LATIN SMALL LETTER A		"\xE1\x9A\x80"		=>	"\x20",	// OGHAM SPACE MARK		"\xC2\xAD"			=>	'',		// HYPHEN, SOFT => empty string		"\xDB\x9D"			=>	'',		// ARABIC END OF AYAH		"\xDC\x8F"			=>	'',		// SYRIAC ABBREVIATION MARK		"\xE1\xA0\x86"		=>	'',		// MONGOLIAN TODO SOFT HYPHEN		"\xE1\xA0\x8E"		=>	'',		// MONGOLIAN VOWEL SEPARATOR		"\xE2\x80\x8B"		=>	'',		// ZERO WIDTH SPACE		"\xE2\x80\x8C"		=>	'',		// ZERO WIDTH NON-JOINER		"\xE2\x80\x8D"		=>	'',		// ZERO WIDTH JOINER		"\xE2\x80\xA8"		=>	'',		// LINE SEPARATOR		"\xE2\x80\xA9"		=>	'',		// PARAGRAPH SEPARATOR		"\xE2\x81\xA0"		=>	'',		// WORD JOINER		"\xE2\x81\xA1"		=>	'',		// FUNCTION APPLICATION		"\xE2\x81\xA2"		=>	'',		// INVISIBLE TIMES		"\xE2\x81\xA3"		=>	'',		// INVISIBLE SEPARATOR		"\xE2\x81\xAA"		=>	'',		// [CONTROL CHARACTERS]		"\xE2\x81\xAB"		=>	'',		// [CONTROL CHARACTERS]		"\xE2\x81\xAC"		=>	'',		// [CONTROL CHARACTERS]		"\xE2\x81\xAD"		=>	'',		// [CONTROL CHARACTERS]		"\xE2\x81\xAE"		=>	'',		// [CONTROL CHARACTERS]		"\xE2\x81\xAF"		=>	'',		// [CONTROL CHARACTERS]		"\xEF\xBB\xBF"		=>	'',		// ZERO WIDTH NO-BREAK SPACE		"\xEF\xBF\xB9"		=>	'',		// [CONTROL CHARACTERS]		"\xEF\xBF\xBA"		=>	'',		// [CONTROL CHARACTERS]		"\xEF\xBF\xBB"		=>	'',		// [CONTROL CHARACTERS]		"\xEF\xBF\xBC"		=>	'',		// [CONTROL CHARACTERS]		"\xF0\x9D\x85\xB3"	=>	'',		// [MUSICAL CONTROL CHARACTERS]		"\xF0\x9D\x85\xB4"	=>	'',		// [MUSICAL CONTROL CHARACTERS]		"\xF0\x9D\x85\xB5"	=>	'',		// [MUSICAL CONTROL CHARACTERS]		"\xF0\x9D\x85\xB6"	=>	'',		// [MUSICAL CONTROL CHARACTERS]		"\xF0\x9D\x85\xB7"	=>	'',		// [MUSICAL CONTROL CHARACTERS]		"\xF0\x9D\x85\xB8"	=>	'',		// [MUSICAL CONTROL CHARACTERS]		"\xF0\x9D\x85\xB9"	=>	'',		// [MUSICAL CONTROL CHARACTERS]		"\xF0\x9D\x85\xBA"	=>	'',		// [MUSICAL CONTROL CHARACTERS]);$copy = $uniarray;/*** @todo we need to check that the $uniarray does not reverse any of the mappings defined in the unicode definition*/foreach ($array as $value){	$temp_hold = implode(array_map('utf8_chr', array_map('hexdec', explode(' ', trim($value[2])))));	if (isset($copy[utf8_chr(hexdec((string)$value[1]))]))	{		$num = '';		$string = utf8_chr(hexdec((string)$value[1]));		for ($i = 0; $i < strlen($string); $i++)		{			$num .= '\x' . str_pad(base_convert(ord($string[$i]), 10, 16), 2, '0', STR_PAD_LEFT);		}		echo $num . "\n";		if ($uniarray[$string] != $temp_hold)		{			echo "  --> $string\n";			echo "  --> " . $temp_hold . "\n";		}	}	// do some tests for things that transform into something with the number one	if (strpos($temp_hold, utf8_chr(0x0031)) !== false)	{		// any kind of letter L?		if (strpos($value[0], 'LETTER L') !== false || strpos($value[0], 'IOTA') !== false || strpos($value[0], 'SMALL L ') !== false || preg_match('/SMALL LIGATURE [^L]*L /', $value[0]))		{			// replace all of the mappings that transform some sort of letter l to number one instead to some sort of letter l to latin small letter l			$temp_hold = str_replace(utf8_chr(0x0031), utf8_chr(0x006C), $temp_hold);		}	}	// uppercased chars that were folded do not exist in this universe,	// no amount of normalization could ever "trick" this into not working	if (in_array($value[1], $casefold_array[1]))	{		continue;	}	$uniarray[utf8_chr(hexdec((string)$value[1]))] = $temp_hold;}echo "Writing to confusables.$phpEx\n";$fp = fopen($phpbb_root_path . 'includes/utf/data/confusables.' . $phpEx, 'wb');fwrite($fp, '<?php return ' . my_var_export($uniarray) . ';');fclose($fp);/*** Return a parsable string representation of a variable** This is function is limited to array/strings/integers** @param	mixed	$var		Variable* @return	string				PHP code representing the variable*/function my_var_export($var){	if (is_array($var))	{		$lines = array();		foreach ($var as $k => $v)		{			$lines[] = my_var_export($k) . '=>' . my_var_export($v);		}		return 'array(' . implode(',', $lines) . ')';	}	else if (is_string($var))	{		return "'" . str_replace(array('\\', "'"), array('\\\\', "\\'"), $var) . "'";	}	else	{		return $var;	}}/*** Download a file to the develop/ dir** @param	string	$url		URL of the file to download* @return	void*/function download($url){	global $phpbb_root_path;	if (file_exists($phpbb_root_path . 'develop/' . basename($url)))	{		return;	}	echo 'Downloading from ', $url, ' ';	if (!$fpr = fopen($url, 'rb'))	{		die("Can't download from $url\nPlease download it yourself and put it in the develop/ dir, kthxbai");	}	if (!$fpw = fopen($phpbb_root_path . 'develop/' . basename($url), 'wb'))	{		die("Can't open develop/" . basename($url) . " for output... please check your permissions or something");	}	$i = 0;	$chunk = 32768;	$done = '';	while (!feof($fpr))	{		$i += fwrite($fpw, fread($fpr, $chunk));		echo str_repeat("\x08", strlen($done));		$done = ($i >> 10) . ' KiB';		echo $done;	}	fclose($fpr);	fclose($fpw);	echo "\n";}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Custom Profile Fields* @package phpBB3*/class custom_profile{	var $profile_types = array(FIELD_INT => 'int', FIELD_STRING => 'string', FIELD_TEXT => 'text', FIELD_BOOL => 'bool', FIELD_DROPDOWN => 'dropdown', FIELD_DATE => 'date');	var $profile_cache = array();	var $options_lang = array();	/**	* Assign editable fields to template, mode can be profile (for profile change) or register (for registration)	* Called by ucp_profile and ucp_register	* @access public	*/	function generate_profile_fields($mode, $lang_id)	{		global $db, $template, $auth;		$sql_where = '';		switch ($mode)		{			case 'register':				// If the field is required we show it on the registration page				$sql_where .= ' AND f.field_show_on_reg = 1';			break;			case 'profile':				// Show hidden fields to moderators/admins				if (!$auth->acl_gets('a_', 'm_') && !$auth->acl_getf_global('m_'))				{					$sql_where .= ' AND f.field_show_profile = 1';				}			break;			default:				trigger_error('Wrong profile mode specified', E_USER_ERROR);			break;		}		$sql = 'SELECT l.*, f.*			FROM ' . PROFILE_LANG_TABLE . ' l, ' . PROFILE_FIELDS_TABLE . " f			WHERE f.field_active = 1				$sql_where				AND l.lang_id = $lang_id				AND l.field_id = f.field_id			ORDER BY f.field_order";		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			// Return templated field			$tpl_snippet = $this->process_field_row('change', $row);			// Some types are multivalue, we can't give them a field_id as we would not know which to pick			$type = (int) $row['field_type'];			$template->assign_block_vars('profile_fields', array(				'LANG_NAME'		=> $row['lang_name'],				'LANG_EXPLAIN'	=> $row['lang_explain'],				'FIELD'			=> $tpl_snippet,				'FIELD_ID'		=> ($type == FIELD_DATE || ($type == FIELD_BOOL && $row['field_length'] == '1')) ? '' : 'pf_' . $row['field_ident'],				'S_REQUIRED'	=> ($row['field_required']) ? true : false)			);		}		$db->sql_freeresult($result);	}	/**	* Validate entered profile field data	* @access public	*/	function validate_profile_field($field_type, &$field_value, $field_data)	{		switch ($field_type)		{			case FIELD_DATE:				$field_validate = explode('-', $field_value);				$day = (isset($field_validate[0])) ? (int) $field_validate[0] : 0;				$month = (isset($field_validate[1])) ? (int) $field_validate[1] : 0;				$year = (isset($field_validate[2])) ? (int) $field_validate[2] : 0;				if ((!$day || !$month || !$year) && !$field_data['field_required'])				{					return false;				}				if ((!$day || !$month || !$year) && $field_data['field_required'])				{					return 'FIELD_REQUIRED';				}				if ($day < 0 || $day > 31 || $month < 0 || $month > 12 || ($year < 1901 && $year > 0) || $year > gmdate('Y', time()) + 50)				{					return 'FIELD_INVALID_DATE';				}				if (checkdate($month, $day, $year) === false)				{					return 'FIELD_INVALID_DATE';				}			break;			case FIELD_BOOL:				$field_value = (bool) $field_value;							if (!$field_value && $field_data['field_required'])				{					return 'FIELD_REQUIRED';				}			break;			case FIELD_INT:				if (trim($field_value) === '' && !$field_data['field_required'])				{					return false;				}								$field_value = (int) $field_value;				if ($field_value < $field_data['field_minlen'])				{					return 'FIELD_TOO_SMALL';				}				else if ($field_value > $field_data['field_maxlen'])				{					return 'FIELD_TOO_LARGE';				}			break;			case FIELD_DROPDOWN:				$field_value = (int) $field_value;				// retrieve option lang data if necessary				if (!isset($this->options_lang[$field_data['field_id']]) || !isset($this->options_lang[$field_data['field_id']][$field_data['lang_id']]) || !sizeof($this->options_lang[$file_data['field_id']][$field_data['lang_id']]))				{					$this->get_option_lang($field_data['field_id'], $field_data['lang_id'], FIELD_DROPDOWN, false);				}				if (!isset($this->options_lang[$field_data['field_id']][$field_data['lang_id']][$field_value]))				{					return 'FIELD_INVALID_VALUE';				}				if ($field_value == $field_data['field_novalue'] && $field_data['field_required'])				{					return 'FIELD_REQUIRED';				}			break;			case FIELD_STRING:			case FIELD_TEXT:				if (trim($field_value) === '' && !$field_data['field_required'])				{					return false;				}				else if (trim($field_value) === '' && $field_data['field_required'])				{					return 'FIELD_REQUIRED';				}				if ($field_data['field_minlen'] && utf8_strlen($field_value) < $field_data['field_minlen'])				{					return 'FIELD_TOO_SHORT';				}				else if ($field_data['field_maxlen'] && utf8_strlen($field_value) > $field_data['field_maxlen'])				{					return 'FIELD_TOO_LONG';				}				if (!empty($field_data['field_validation']) && $field_data['field_validation'] != '.*')				{					$field_validate = ($field_type == FIELD_STRING) ? $field_value : bbcode_nl2br($field_value);					if (!preg_match('#^' . str_replace('\\\\', '\\', $field_data['field_validation']) . '$#i', $field_validate))					{						return 'FIELD_INVALID_CHARS';					}				}			break;		}		return false;	}	/**	* Build profile cache, used for display	* @access private	*/	function build_cache()	{		global $db, $user, $auth;		$this->profile_cache = array();		// Display hidden/no_view fields for admin/moderator		$sql = 'SELECT l.*, f.*			FROM ' . PROFILE_LANG_TABLE . ' l, ' . PROFILE_FIELDS_TABLE . ' f			WHERE l.lang_id = ' . $user->get_iso_lang_id() . '				AND f.field_active = 1 ' .				((!$auth->acl_gets('a_', 'm_') && !$auth->acl_getf_global('m_')) ? '	AND f.field_hide = 0 ' : '') . '				AND f.field_no_view = 0				AND l.field_id = f.field_id			ORDER BY f.field_order';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$this->profile_cache[$row['field_ident']] = $row;		}		$db->sql_freeresult($result);	}	/**	* Get language entries for options and store them here for later use	*/	function get_option_lang($field_id, $lang_id, $field_type, $preview)	{		global $db;		if ($preview)		{			$lang_options = (!is_array($this->vars['lang_options'])) ? explode("\n", $this->vars['lang_options']) : $this->vars['lang_options'];			foreach ($lang_options as $num => $var)			{				$this->options_lang[$field_id][$lang_id][($num + 1)] = $var;			}		}		else		{			$sql = 'SELECT option_id, lang_value				FROM ' . PROFILE_FIELDS_LANG_TABLE . "					WHERE field_id = $field_id					AND lang_id = $lang_id					AND field_type = $field_type				ORDER BY option_id";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$this->options_lang[$field_id][$lang_id][($row['option_id'] + 1)] = $row['lang_value'];			}			$db->sql_freeresult($result);		}	}	/**	* Submit profile field for validation	* @access public	*/	function submit_cp_field($mode, $lang_id, &$cp_data, &$cp_error)	{		global $auth, $db, $user;		$sql_where = '';		switch ($mode)		{			case 'register':				// If the field is required we show it on the registration page				$sql_where .= ' AND f.field_show_on_reg = 1';			break;			case 'profile':				// Show hidden fields to moderators/admins				if (!$auth->acl_gets('a_', 'm_') && !$auth->acl_getf_global('m_'))				{					$sql_where .= ' AND f.field_show_profile = 1';				}			break;			default:				trigger_error('Wrong profile mode specified', E_USER_ERROR);			break;		}		$sql = 'SELECT l.*, f.*			FROM ' . PROFILE_LANG_TABLE . ' l, ' . PROFILE_FIELDS_TABLE . " f			WHERE l.lang_id = $lang_id				AND f.field_active = 1				$sql_where				AND l.field_id = f.field_id			ORDER BY f.field_order";		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$cp_data['pf_' . $row['field_ident']] = $this->get_profile_field($row);			$check_value = $cp_data['pf_' . $row['field_ident']];			if (($cp_result = $this->validate_profile_field($row['field_type'], $check_value, $row)) !== false)			{				// If not and only showing common error messages, use this one				$error = '';				switch ($cp_result)				{					case 'FIELD_INVALID_DATE':					case 'FIELD_INVALID_VALUE':					case 'FIELD_REQUIRED':						$error = sprintf($user->lang[$cp_result], $row['lang_name']);					break;					case 'FIELD_TOO_SHORT':					case 'FIELD_TOO_SMALL':						$error = sprintf($user->lang[$cp_result], $row['lang_name'], $row['field_minlen']);					break;					case 'FIELD_TOO_LONG':					case 'FIELD_TOO_LARGE':						$error = sprintf($user->lang[$cp_result], $row['lang_name'], $row['field_maxlen']);					break;					case 'FIELD_INVALID_CHARS':						switch ($row['field_validation'])						{							case '[0-9]+':								$error = sprintf($user->lang[$cp_result . '_NUMBERS_ONLY'], $row['lang_name']);							break;							case '[\w]+':								$error = sprintf($user->lang[$cp_result . '_ALPHA_ONLY'], $row['lang_name']);							break;							case '[\w_\+\. \-\[\]]+':								$error = sprintf($user->lang[$cp_result . '_SPACERS_ONLY'], $row['lang_name']);							break;						}					break;				}				if ($error != '')				{					$cp_error[] = $error;				}			}		}		$db->sql_freeresult($result);	}	/**	* Update profile field data directly	*/	function update_profile_field_data($user_id, &$cp_data)	{		global $db;		if (!sizeof($cp_data))		{			return;		}		switch ($db->sql_layer)		{			case 'oracle':			case 'firebird':			case 'postgres':				$right_delim = $left_delim = '"';			break;			case 'sqlite':			case 'mssql':			case 'mssql_odbc':			case 'mssqlnative':				$right_delim = ']';				$left_delim = '[';			break;			case 'mysql':			case 'mysql4':			case 'mysqli':				$right_delim = $left_delim = '`';			break;		}		// use new array for the UPDATE; changes in the key do not affect the original array		$cp_data_sql = array();		foreach ($cp_data as $key => $value)		{			// Firebird is case sensitive with delimiter			$cp_data_sql[$left_delim . (($db->sql_layer == 'firebird' || $db->sql_layer == 'oracle') ? strtoupper($key) : $key) . $right_delim] = $value;		}		$sql = 'UPDATE ' . PROFILE_FIELDS_DATA_TABLE . '			SET ' . $db->sql_build_array('UPDATE', $cp_data_sql) . "			WHERE user_id = $user_id";		$db->sql_query($sql);		if (!$db->sql_affectedrows())		{			$cp_data_sql['user_id'] = (int) $user_id;			$db->sql_return_on_error(true);			$sql = 'INSERT INTO ' . PROFILE_FIELDS_DATA_TABLE . ' ' . $db->sql_build_array('INSERT', $cp_data_sql);			$db->sql_query($sql);			$db->sql_return_on_error(false);		}	}	/**	* Assign fields to template, used for viewprofile, viewtopic and memberlist (if load setting is enabled)	* This is directly connected to the user -> mode == grab is to grab the user specific fields, mode == show is for assigning the row to the template	* @access public	*/	function generate_profile_fields_template($mode, $user_id = 0, $profile_row = false)	{		global $db;		if ($mode == 'grab')		{			if (!is_array($user_id))			{				$user_id = array($user_id);			}			if (!sizeof($this->profile_cache))			{				$this->build_cache();			}			if (!sizeof($user_id))			{				return array();			}			$sql = 'SELECT *				FROM ' . PROFILE_FIELDS_DATA_TABLE . '				WHERE ' . $db->sql_in_set('user_id', array_map('intval', $user_id));			$result = $db->sql_query($sql);			$field_data = array();			while ($row = $db->sql_fetchrow($result))			{				$field_data[$row['user_id']] = $row;			}			$db->sql_freeresult($result);			$user_fields = array();			// Go through the fields in correct order			foreach (array_keys($this->profile_cache) as $used_ident)			{				foreach ($field_data as $user_id => $row)				{					$user_fields[$user_id][$used_ident]['value'] = $row['pf_' . $used_ident];					$user_fields[$user_id][$used_ident]['data'] = $this->profile_cache[$used_ident];				}			}			return $user_fields;		}		else if ($mode == 'show')		{			// $profile_row == $user_fields[$row['user_id']];			$tpl_fields = array();			$tpl_fields['row'] = $tpl_fields['blockrow'] = array();			foreach ($profile_row as $ident => $ident_ary)			{				$value = $this->get_profile_value($ident_ary);				if ($value === NULL)				{					continue;				}				$tpl_fields['row'] += array(					'PROFILE_' . strtoupper($ident) . '_VALUE'	=> $value,					'PROFILE_' . strtoupper($ident) . '_TYPE'	=> $ident_ary['data']['field_type'],					'PROFILE_' . strtoupper($ident) . '_NAME'	=> $ident_ary['data']['lang_name'],					'PROFILE_' . strtoupper($ident) . '_EXPLAIN'=> $ident_ary['data']['lang_explain'],					'S_PROFILE_' . strtoupper($ident)			=> true				);				$tpl_fields['blockrow'][] = array(					'PROFILE_FIELD_VALUE'	=> $value,					'PROFILE_FIELD_TYPE'	=> $ident_ary['data']['field_type'],					'PROFILE_FIELD_NAME'	=> $ident_ary['data']['lang_name'],					'PROFILE_FIELD_EXPLAIN'	=> $ident_ary['data']['lang_explain'],					'S_PROFILE_' . strtoupper($ident)		=> true				);			}			return $tpl_fields;		}		else		{			trigger_error('Wrong mode for custom profile', E_USER_ERROR);		}	}	/**	* Get Profile Value for display	*/	function get_profile_value($ident_ary)	{		$value = $ident_ary['value'];		$field_type = $ident_ary['data']['field_type'];		switch ($this->profile_types[$field_type])		{			case 'int':				if ($value === '')				{					return NULL;				}				return (int) $value;			break;			case 'string':			case 'text':				if (!$value)				{					return NULL;				}				$value = make_clickable($value);				$value = censor_text($value);				$value = bbcode_nl2br($value);				return $value;			break;			// case 'datetime':			case 'date':				$date = explode('-', $value);				$day = (isset($date[0])) ? (int) $date[0] : 0;				$month = (isset($date[1])) ? (int) $date[1] : 0;				$year = (isset($date[2])) ? (int) $date[2] : 0;				if (!$day && !$month && !$year)				{					return NULL;				}				else if ($day && $month && $year)				{					global $user;					// Date should display as the same date for every user regardless of timezone, so remove offset					// to compensate for the offset added by user::format_date()					return $user->format_date(gmmktime(0, 0, 0, $month, $day, $year) - ($user->timezone + $user->dst), $user->lang['DATE_FORMAT'], true);				}				return $value;			break;			case 'dropdown':				$field_id = $ident_ary['data']['field_id'];				$lang_id = $ident_ary['data']['lang_id'];				if (!isset($this->options_lang[$field_id][$lang_id]))				{					$this->get_option_lang($field_id, $lang_id, FIELD_DROPDOWN, false);				}				if ($value == $ident_ary['data']['field_novalue'])				{					return NULL;				}				$value = (int) $value;				// User not having a value assigned				if (!isset($this->options_lang[$field_id][$lang_id][$value]))				{					return NULL;				}				return $this->options_lang[$field_id][$lang_id][$value];			break;			case 'bool':				$field_id = $ident_ary['data']['field_id'];				$lang_id = $ident_ary['data']['lang_id'];				if (!isset($this->options_lang[$field_id][$lang_id]))				{					$this->get_option_lang($field_id, $lang_id, FIELD_BOOL, false);				}				if ($ident_ary['data']['field_length'] == 1)				{					return (isset($this->options_lang[$field_id][$lang_id][(int) $value])) ? $this->options_lang[$field_id][$lang_id][(int) $value] : NULL;				}				else if (!$value)				{					return NULL;				}				else				{					return $this->options_lang[$field_id][$lang_id][(int) ($value) + 1];				}			break;			default:				trigger_error('Unknown profile type', E_USER_ERROR);			break;		}	}	/**	* Get field value for registration/profile	* @access private	*/	function get_var($field_validation, &$profile_row, $default_value, $preview)	{		global $user;		$profile_row['field_ident'] = (isset($profile_row['var_name'])) ? $profile_row['var_name'] : 'pf_' . $profile_row['field_ident'];		$user_ident = $profile_row['field_ident'];		// checkbox - only testing for isset		if ($profile_row['field_type'] == FIELD_BOOL && $profile_row['field_length'] == 2)		{			$value = (isset($_REQUEST[$profile_row['field_ident']])) ? true : ((!isset($user->profile_fields[$user_ident]) || $preview) ? $default_value : $user->profile_fields[$user_ident]);		}		else if ($profile_row['field_type'] == FIELD_INT)		{			if (isset($_REQUEST[$profile_row['field_ident']]))			{				$value = ($_REQUEST[$profile_row['field_ident']] === '') ? NULL : request_var($profile_row['field_ident'], $default_value);			}			else			{				if (!$preview && array_key_exists($user_ident, $user->profile_fields) && is_null($user->profile_fields[$user_ident]))				{					$value = NULL;				}				else if (!isset($user->profile_fields[$user_ident]) || $preview)				{					$value = $default_value;				}				else				{					$value = $user->profile_fields[$user_ident];				}			}			return (is_null($value) || $value === '') ? '' : (int) $value;		}		else		{			$value = (isset($_REQUEST[$profile_row['field_ident']])) ? request_var($profile_row['field_ident'], $default_value, true) : ((!isset($user->profile_fields[$user_ident]) || $preview) ? $default_value : $user->profile_fields[$user_ident]);			if (gettype($value) == 'string')			{				$value = utf8_normalize_nfc($value);			}		}		switch ($field_validation)		{			case 'int':				return (int) $value;			break;		}		return $value;	}	/**	* Process int-type	* @access private	*/	function generate_int($profile_row, $preview = false)	{		global $template;		$profile_row['field_value'] = $this->get_var('int', $profile_row, $profile_row['field_default_value'], $preview);		$template->assign_block_vars($this->profile_types[$profile_row['field_type']], array_change_key_case($profile_row, CASE_UPPER));	}	/**	* Process date-type	* @access private	*/	function generate_date($profile_row, $preview = false)	{		global $user, $template;		$profile_row['field_ident'] = (isset($profile_row['var_name'])) ? $profile_row['var_name'] : 'pf_' . $profile_row['field_ident'];		$user_ident = $profile_row['field_ident'];		$now = getdate();		if (!isset($_REQUEST[$profile_row['field_ident'] . '_day']))		{			if ($profile_row['field_default_value'] == 'now')			{				$profile_row['field_default_value'] = sprintf('%2d-%2d-%4d', $now['mday'], $now['mon'], $now['year']);			}			list($day, $month, $year) = explode('-', ((!isset($user->profile_fields[$user_ident]) || $preview) ? $profile_row['field_default_value'] : $user->profile_fields[$user_ident]));		}		else		{			if ($preview && $profile_row['field_default_value'] == 'now')			{				$profile_row['field_default_value'] = sprintf('%2d-%2d-%4d', $now['mday'], $now['mon'], $now['year']);				list($day, $month, $year) = explode('-', ((!isset($user->profile_fields[$user_ident]) || $preview) ? $profile_row['field_default_value'] : $user->profile_fields[$user_ident]));			}			else			{				$day = request_var($profile_row['field_ident'] . '_day', 0);				$month = request_var($profile_row['field_ident'] . '_month', 0);				$year = request_var($profile_row['field_ident'] . '_year', 0);			}		}		$profile_row['s_day_options'] = '<option value="0"' . ((!$day) ? ' selected="selected"' : '') . '>--</option>';		for ($i = 1; $i < 32; $i++)		{			$profile_row['s_day_options'] .= '<option value="' . $i . '"' . (($i == $day) ? ' selected="selected"' : '') . ">$i</option>";		}		$profile_row['s_month_options'] = '<option value="0"' . ((!$month) ? ' selected="selected"' : '') . '>--</option>';		for ($i = 1; $i < 13; $i++)		{			$profile_row['s_month_options'] .= '<option value="' . $i . '"' . (($i == $month) ? ' selected="selected"' : '') . ">$i</option>";		}		$profile_row['s_year_options'] = '<option value="0"' . ((!$year) ? ' selected="selected"' : '') . '>--</option>';		for ($i = $now['year'] - 100; $i <= $now['year'] + 100; $i++)		{			$profile_row['s_year_options'] .= '<option value="' . $i . '"' . (($i == $year) ? ' selected="selected"' : '') . ">$i</option>";		}		unset($now);		$profile_row['field_value'] = 0;		$template->assign_block_vars($this->profile_types[$profile_row['field_type']], array_change_key_case($profile_row, CASE_UPPER));	}	/**	* Process bool-type	* @access private	*/	function generate_bool($profile_row, $preview = false)	{		global $template;		$value = $this->get_var('int', $profile_row, $profile_row['field_default_value'], $preview);		$profile_row['field_value'] = $value;		$template->assign_block_vars($this->profile_types[$profile_row['field_type']], array_change_key_case($profile_row, CASE_UPPER));		if ($profile_row['field_length'] == 1)		{			if (!isset($this->options_lang[$profile_row['field_id']][$profile_row['lang_id']]) || !sizeof($this->options_lang[$profile_row['field_id']][$profile_row['lang_id']]))			{				$this->get_option_lang($profile_row['field_id'], $profile_row['lang_id'], FIELD_BOOL, $preview);			}			foreach ($this->options_lang[$profile_row['field_id']][$profile_row['lang_id']] as $option_id => $option_value)			{				$template->assign_block_vars('bool.options', array(					'OPTION_ID'	=> $option_id,					'CHECKED'	=> ($value == $option_id) ? ' checked="checked"' : '',					'VALUE'		=> $option_value)				);			}		}	}	/**	* Process string-type	* @access private	*/	function generate_string($profile_row, $preview = false)	{		global $template;		$profile_row['field_value'] = $this->get_var('string', $profile_row, $profile_row['lang_default_value'], $preview);		$template->assign_block_vars($this->profile_types[$profile_row['field_type']], array_change_key_case($profile_row, CASE_UPPER));	}	/**	* Process text-type	* @access private	*/	function generate_text($profile_row, $preview = false)	{		global $template;		global $user, $phpEx, $phpbb_root_path;		$field_length = explode('|', $profile_row['field_length']);		$profile_row['field_rows'] = $field_length[0];		$profile_row['field_cols'] = $field_length[1];		$profile_row['field_value'] = $this->get_var('string', $profile_row, $profile_row['lang_default_value'], $preview);		$template->assign_block_vars($this->profile_types[$profile_row['field_type']], array_change_key_case($profile_row, CASE_UPPER));	}	/**	* Process dropdown-type	* @access private	*/	function generate_dropdown($profile_row, $preview = false)	{		global $user, $template;		$value = $this->get_var('int', $profile_row, $profile_row['field_default_value'], $preview);		if (!isset($this->options_lang[$profile_row['field_id']]) || !isset($this->options_lang[$profile_row['field_id']][$profile_row['lang_id']]) || !sizeof($this->options_lang[$profile_row['field_id']][$profile_row['lang_id']]))		{			$this->get_option_lang($profile_row['field_id'], $profile_row['lang_id'], FIELD_DROPDOWN, $preview);		}		$profile_row['field_value'] = $value;		$template->assign_block_vars($this->profile_types[$profile_row['field_type']], array_change_key_case($profile_row, CASE_UPPER));		foreach ($this->options_lang[$profile_row['field_id']][$profile_row['lang_id']] as $option_id => $option_value)		{			$template->assign_block_vars('dropdown.options', array(				'OPTION_ID'	=> $option_id,				'SELECTED'	=> ($value == $option_id) ? ' selected="selected"' : '',				'VALUE'		=> $option_value)			);		}	}	/**	* Return Templated value/field. Possible values for $mode are:	* change == user is able to set/enter profile values; preview == just show the value	* @access private	*/	function process_field_row($mode, $profile_row)	{		global $template;		$preview = ($mode == 'preview') ? true : false;		// set template filename		$template->set_filenames(array(			'cp_body'		=> 'custom_profile_fields.html')		);		// empty previously filled blockvars		foreach ($this->profile_types as $field_case => $field_type)		{			$template->destroy_block_vars($field_type);		}		// Assign template variables		$type_func = 'generate_' . $this->profile_types[$profile_row['field_type']];		$this->$type_func($profile_row, $preview);		// Return templated data		return $template->assign_display('cp_body');	}	/**	* Build Array for user insertion into custom profile fields table	*/	function build_insert_sql_array($cp_data)	{		global $db, $user, $auth;		$sql_not_in = array();		foreach ($cp_data as $key => $null)		{			$sql_not_in[] = (strncmp($key, 'pf_', 3) === 0) ? substr($key, 3) : $key;		}		$sql = 'SELECT f.field_type, f.field_ident, f.field_default_value, l.lang_default_value			FROM ' . PROFILE_LANG_TABLE . ' l, ' . PROFILE_FIELDS_TABLE . ' f			WHERE l.lang_id = ' . $user->get_iso_lang_id() . '				' . ((sizeof($sql_not_in)) ? ' AND ' . $db->sql_in_set('f.field_ident', $sql_not_in, true) : '') . '				AND l.field_id = f.field_id';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if ($row['field_default_value'] == 'now' && $row['field_type'] == FIELD_DATE)			{				$now = getdate();				$row['field_default_value'] = sprintf('%2d-%2d-%4d', $now['mday'], $now['mon'], $now['year']);			}			else if ($row['field_default_value'] === '' && $row['field_type'] == FIELD_INT)			{				// We cannot insert an empty string into an integer column.				$row['field_default_value'] = NULL;			}			$cp_data['pf_' . $row['field_ident']] = (in_array($row['field_type'], array(FIELD_TEXT, FIELD_STRING))) ? $row['lang_default_value'] : $row['field_default_value'];		}		$db->sql_freeresult($result);		return $cp_data;	}	/**	* Get profile field value on submit	* @access private	*/	function get_profile_field($profile_row)	{		global $phpbb_root_path, $phpEx;		global $config;		$var_name = 'pf_' . $profile_row['field_ident'];		switch ($profile_row['field_type'])		{			case FIELD_DATE:				if (!isset($_REQUEST[$var_name . '_day']))				{					if ($profile_row['field_default_value'] == 'now')					{						$now = getdate();						$profile_row['field_default_value'] = sprintf('%2d-%2d-%4d', $now['mday'], $now['mon'], $now['year']);					}					list($day, $month, $year) = explode('-', $profile_row['field_default_value']);				}				else				{					$day = request_var($var_name . '_day', 0);					$month = request_var($var_name . '_month', 0);					$year = request_var($var_name . '_year', 0);				}				$var = sprintf('%2d-%2d-%4d', $day, $month, $year);			break;			case FIELD_BOOL:				// Checkbox				if ($profile_row['field_length'] == 2)				{					$var = (isset($_REQUEST[$var_name])) ? 1 : 0;				}				else				{					$var = request_var($var_name, (int) $profile_row['field_default_value']);				}			break;			case FIELD_STRING:			case FIELD_TEXT:				$var = utf8_normalize_nfc(request_var($var_name, (string) $profile_row['field_default_value'], true));			break;			case FIELD_INT:				if (isset($_REQUEST[$var_name]) && $_REQUEST[$var_name] === '')				{					$var = NULL;				}				else				{					$var = request_var($var_name, (int) $profile_row['field_default_value']);				}			break;			case FIELD_DROPDOWN:				$var = request_var($var_name, (int) $profile_row['field_default_value']);			break;			default:				$var = request_var($var_name, $profile_row['field_default_value']);			break;		}		return $var;	}}/*** Custom Profile Fields ACP* @package phpBB3*/class custom_profile_admin extends custom_profile{	var $vars = array();	/**	* Return possible validation options	*/	function validate_options()	{		global $user;		$validate_ary = array('CHARS_ANY' => '.*', 'NUMBERS_ONLY' => '[0-9]+', 'ALPHA_ONLY' => '[\w]+', 'ALPHA_SPACERS' => '[\w_\+\. \-\[\]]+');		$validate_options = '';		foreach ($validate_ary as $lang => $value)		{			$selected = ($this->vars['field_validation'] == $value) ? ' selected="selected"' : '';			$validate_options .= '<option value="' . $value . '"' . $selected . '>' . $user->lang[$lang] . '</option>';		}		return $validate_options;	}	/**	* Get string options for second step in ACP	*/	function get_string_options()	{		global $user;		$options = array(			0 => array('TITLE' => $user->lang['FIELD_LENGTH'],		'FIELD' => '<input type="text" name="field_length" size="5" value="' . $this->vars['field_length'] . '" />'),			1 => array('TITLE' => $user->lang['MIN_FIELD_CHARS'],	'FIELD' => '<input type="text" name="field_minlen" size="5" value="' . $this->vars['field_minlen'] . '" />'),			2 => array('TITLE' => $user->lang['MAX_FIELD_CHARS'],	'FIELD' => '<input type="text" name="field_maxlen" size="5" value="' . $this->vars['field_maxlen'] . '" />'),			3 => array('TITLE' => $user->lang['FIELD_VALIDATION'],	'FIELD' => '<select name="field_validation">' . $this->validate_options() . '</select>')		);		return $options;	}	/**	* Get text options for second step in ACP	*/	function get_text_options()	{		global $user;		$options = array(			0 => array('TITLE' => $user->lang['FIELD_LENGTH'],		'FIELD' => '<input name="rows" size="5" value="' . $this->vars['rows'] . '" /> ' . $user->lang['ROWS'] . '</dd><dd><input name="columns" size="5" value="' . $this->vars['columns'] . '" /> ' . $user->lang['COLUMNS'] . ' <input type="hidden" name="field_length" value="' . $this->vars['field_length'] . '" />'),			1 => array('TITLE' => $user->lang['MIN_FIELD_CHARS'],	'FIELD' => '<input type="text" name="field_minlen" size="10" value="' . $this->vars['field_minlen'] . '" />'),			2 => array('TITLE' => $user->lang['MAX_FIELD_CHARS'],	'FIELD' => '<input type="text" name="field_maxlen" size="10" value="' . $this->vars['field_maxlen'] . '" />'),			3 => array('TITLE' => $user->lang['FIELD_VALIDATION'],	'FIELD' => '<select name="field_validation">' . $this->validate_options() . '</select>')		);		return $options;	}	/**	* Get int options for second step in ACP	*/	function get_int_options()	{		global $user;		$options = array(			0 => array('TITLE' => $user->lang['FIELD_LENGTH'],		'FIELD' => '<input type="text" name="field_length" size="5" value="' . $this->vars['field_length'] . '" />'),			1 => array('TITLE' => $user->lang['MIN_FIELD_NUMBER'],	'FIELD' => '<input type="text" name="field_minlen" size="5" value="' . $this->vars['field_minlen'] . '" />'),			2 => array('TITLE' => $user->lang['MAX_FIELD_NUMBER'],	'FIELD' => '<input type="text" name="field_maxlen" size="5" value="' . $this->vars['field_maxlen'] . '" />'),			3 => array('TITLE' => $user->lang['DEFAULT_VALUE'],		'FIELD' => '<input type="post" name="field_default_value" value="' . $this->vars['field_default_value'] . '" />')		);		return $options;	}	/**	* Get bool options for second step in ACP	*/	function get_bool_options()	{		global $user, $config, $lang_defs;		$default_lang_id = $lang_defs['iso'][$config['default_lang']];		$profile_row = array(			'var_name'				=> 'field_default_value',			'field_id'				=> 1,			'lang_name'				=> $this->vars['lang_name'],			'lang_explain'			=> $this->vars['lang_explain'],			'lang_id'				=> $default_lang_id,			'field_default_value'	=> $this->vars['field_default_value'],			'field_ident'			=> 'field_default_value',			'field_type'			=> FIELD_BOOL,			'field_length'			=> $this->vars['field_length'],			'lang_options'			=> $this->vars['lang_options']		);		$options = array(			0 => array('TITLE' => $user->lang['FIELD_TYPE'], 'EXPLAIN' => $user->lang['BOOL_TYPE_EXPLAIN'], 'FIELD' => '<label><input type="radio" class="radio" name="field_length" value="1"' . (($this->vars['field_length'] == 1) ? ' checked="checked"' : '') . ' onchange="document.getElementById(\'add_profile_field\').submit();" /> ' . $user->lang['RADIO_BUTTONS'] . '</label><label><input type="radio" class="radio" name="field_length" value="2"' . (($this->vars['field_length'] == 2) ? ' checked="checked"' : '') . ' onchange="document.getElementById(\'add_profile_field\').submit();" /> ' . $user->lang['CHECKBOX'] . '</label>'),			1 => array('TITLE' => $user->lang['DEFAULT_VALUE'], 'FIELD' => $this->process_field_row('preview', $profile_row))		);		return $options;	}	/**	* Get dropdown options for second step in ACP	*/	function get_dropdown_options()	{		global $user, $config, $lang_defs;		$default_lang_id = $lang_defs['iso'][$config['default_lang']];		$profile_row[0] = array(			'var_name'				=> 'field_default_value',			'field_id'				=> 1,			'lang_name'				=> $this->vars['lang_name'],			'lang_explain'			=> $this->vars['lang_explain'],			'lang_id'				=> $default_lang_id,			'field_default_value'	=> $this->vars['field_default_value'],			'field_ident'			=> 'field_default_value',			'field_type'			=> FIELD_DROPDOWN,			'lang_options'			=> $this->vars['lang_options']		);		$profile_row[1] = $profile_row[0];		$profile_row[1]['var_name'] = 'field_novalue';		$profile_row[1]['field_ident'] = 'field_novalue';		$profile_row[1]['field_default_value']	= $this->vars['field_novalue'];		$options = array(			0 => array('TITLE' => $user->lang['DEFAULT_VALUE'], 'FIELD' => $this->process_field_row('preview', $profile_row[0])),			1 => array('TITLE' => $user->lang['NO_VALUE_OPTION'], 'EXPLAIN' => $user->lang['NO_VALUE_OPTION_EXPLAIN'], 'FIELD' => $this->process_field_row('preview', $profile_row[1]))		);		return $options;	}	/**	* Get date options for second step in ACP	*/	function get_date_options()	{		global $user, $config, $lang_defs;		$default_lang_id = $lang_defs['iso'][$config['default_lang']];		$profile_row = array(			'var_name'				=> 'field_default_value',			'lang_name'				=> $this->vars['lang_name'],			'lang_explain'			=> $this->vars['lang_explain'],			'lang_id'				=> $default_lang_id,			'field_default_value'	=> $this->vars['field_default_value'],			'field_ident'			=> 'field_default_value',			'field_type'			=> FIELD_DATE,			'field_length'			=> $this->vars['field_length']		);		$always_now = request_var('always_now', -1);		if ($always_now == -1)		{			$s_checked = ($this->vars['field_default_value'] == 'now') ? true : false;		}		else		{			$s_checked = ($always_now) ? true : false;		}		$options = array(			0 => array('TITLE' => $user->lang['DEFAULT_VALUE'],	'FIELD' => $this->process_field_row('preview', $profile_row)),			1 => array('TITLE' => $user->lang['ALWAYS_TODAY'],	'FIELD' => '<label><input type="radio" class="radio" name="always_now" value="1"' . (($s_checked) ? ' checked="checked"' : '') . ' onchange="document.getElementById(\'add_profile_field\').submit();" /> ' . $user->lang['YES'] . '</label><label><input type="radio" class="radio" name="always_now" value="0"' . ((!$s_checked) ? ' checked="checked"' : '') . ' onchange="document.getElementById(\'add_profile_field\').submit();" /> ' . $user->lang['NO'] . '</label>'),		);		return $options;	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);include($phpbb_root_path . 'includes/functions_display.' . $phpEx);// Start session$user->session_begin();$auth->acl($user->data);// Start initial var setup$forum_id	= request_var('f', 0);$mark_read	= request_var('mark', '');$start		= request_var('start', 0);$default_sort_days	= (!empty($user->data['user_topic_show_days'])) ? $user->data['user_topic_show_days'] : 0;$default_sort_key	= (!empty($user->data['user_topic_sortby_type'])) ? $user->data['user_topic_sortby_type'] : 't';$default_sort_dir	= (!empty($user->data['user_topic_sortby_dir'])) ? $user->data['user_topic_sortby_dir'] : 'd';$sort_days	= request_var('st', $default_sort_days);$sort_key	= request_var('sk', $default_sort_key);$sort_dir	= request_var('sd', $default_sort_dir);// Check if the user has actually sent a forum ID with his/her request// If not give them a nice error page.if (!$forum_id){	trigger_error('NO_FORUM');}$sql_from = FORUMS_TABLE . ' f';$lastread_select = '';// Grab appropriate forum dataif ($config['load_db_lastread'] && $user->data['is_registered']){	$sql_from .= ' LEFT JOIN ' . FORUMS_TRACK_TABLE . ' ft ON (ft.user_id = ' . $user->data['user_id'] . '		AND ft.forum_id = f.forum_id)';	$lastread_select .= ', ft.mark_time';}if ($user->data['is_registered']){	$sql_from .= ' LEFT JOIN ' . FORUMS_WATCH_TABLE . ' fw ON (fw.forum_id = f.forum_id AND fw.user_id = ' . $user->data['user_id'] . ')';	$lastread_select .= ', fw.notify_status';}$sql = "SELECT f.* $lastread_select	FROM $sql_from	WHERE f.forum_id = $forum_id";$result = $db->sql_query($sql);$forum_data = $db->sql_fetchrow($result);$db->sql_freeresult($result);if (!$forum_data){	trigger_error('NO_FORUM');}// Configure style, language, etc.$user->setup('viewforum', $forum_data['forum_style']);// Redirect to login upon emailed notification linksif (isset($_GET['e']) && !$user->data['is_registered']){	login_box('', $user->lang['LOGIN_NOTIFY_FORUM']);}// Permissions checkif (!$auth->acl_gets('f_list', 'f_read', $forum_id) || ($forum_data['forum_type'] == FORUM_LINK && $forum_data['forum_link'] && !$auth->acl_get('f_read', $forum_id))){	if ($user->data['user_id'] != ANONYMOUS)	{		trigger_error('SORRY_AUTH_READ');	}	login_box('', $user->lang['LOGIN_VIEWFORUM']);}// Forum is passworded ... check whether access has been granted to this// user this session, if not show login boxif ($forum_data['forum_password']){	login_forum_box($forum_data);}// Is this forum a link? ... User got here either because the// number of clicks is being tracked or they guessed the idif ($forum_data['forum_type'] == FORUM_LINK && $forum_data['forum_link']){	// Does it have click tracking enabled?	if ($forum_data['forum_flags'] & FORUM_FLAG_LINK_TRACK)	{		$sql = 'UPDATE ' . FORUMS_TABLE . '			SET forum_posts = forum_posts + 1			WHERE forum_id = ' . $forum_id;		$db->sql_query($sql);	}	// We redirect to the url. The third parameter indicates that external redirects are allowed.	redirect($forum_data['forum_link'], false, true);	return;}// Build navigation linksgenerate_forum_nav($forum_data);// Forum Rulesif ($auth->acl_get('f_read', $forum_id)){	generate_forum_rules($forum_data);}// Do we have subforums?$active_forum_ary = $moderators = array();if ($forum_data['left_id'] != $forum_data['right_id'] - 1){	list($active_forum_ary, $moderators) = display_forums($forum_data, $config['load_moderators'], $config['load_moderators']);}else{	$template->assign_var('S_HAS_SUBFORUM', false);	if ($config['load_moderators'])	{		get_moderators($moderators, $forum_id);	}}// Dump out the page header and load viewforum templatepage_header($user->lang['VIEW_FORUM'] . ' - ' . $forum_data['forum_name'], true, $forum_id);$template->set_filenames(array(	'body' => 'viewforum_body.html'));make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"), $forum_id);$template->assign_vars(array(	'U_VIEW_FORUM'			=> append_sid("{$phpbb_root_path}viewforum.$phpEx", "f=$forum_id" . (($start == 0) ? '' : "&amp;start=$start")),));// Not postable forum or showing active topics?if (!($forum_data['forum_type'] == FORUM_POST || (($forum_data['forum_flags'] & FORUM_FLAG_ACTIVE_TOPICS) && $forum_data['forum_type'] == FORUM_CAT))){	page_footer();}// Ok, if someone has only list-access, we only display the forum list.// We also make this circumstance available to the template in case we want to display a notice. ;)if (!$auth->acl_get('f_read', $forum_id)){	$template->assign_vars(array(		'S_NO_READ_ACCESS'		=> true,	));	page_footer();}// Handle marking postsif ($mark_read == 'topics'){	$token = request_var('hash', '');	if (check_link_hash($token, 'global'))	{		// Add 0 to forums array to mark global announcements correctly		markread('topics', array($forum_id, 0));	}	$redirect_url = append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id);	meta_refresh(3, $redirect_url);	trigger_error($user->lang['TOPICS_MARKED'] . '<br /><br />' . sprintf($user->lang['RETURN_FORUM'], '<a href="' . $redirect_url . '">', '</a>'));}// Is a forum specific topic count required?if ($forum_data['forum_topics_per_page']){	$config['topics_per_page'] = $forum_data['forum_topics_per_page'];}// Do the forum Prune thang - cron type job ...if ($forum_data['prune_next'] < time() && $forum_data['enable_prune']){	$template->assign_var('RUN_CRON_TASK', '<img src="' . append_sid($phpbb_root_path . 'cron.' . $phpEx, 'cron_type=prune_forum&amp;f=' . $forum_id) . '" alt="cron" width="1" height="1" />');}// Forum rules and subscription info$s_watching_forum = array(	'link'			=> '',	'title'			=> '',	'is_watching'	=> false,);if (($config['email_enable'] || $config['jab_enable']) && $config['allow_forum_notify'] && $forum_data['forum_type'] == FORUM_POST && ($auth->acl_get('f_subscribe', $forum_id) || $user->data['user_id'] == ANONYMOUS)){	$notify_status = (isset($forum_data['notify_status'])) ? $forum_data['notify_status'] : NULL;	watch_topic_forum('forum', $s_watching_forum, $user->data['user_id'], $forum_id, 0, $notify_status, $start, $forum_data['forum_name']);}$s_forum_rules = '';gen_forum_auth_level('forum', $forum_id, $forum_data['forum_status']);// Topic ordering options$limit_days = array(0 => $user->lang['ALL_TOPICS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);$sort_by_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 'r' => $user->lang['REPLIES'], 's' => $user->lang['SUBJECT'], 'v' => $user->lang['VIEWS']);$sort_by_sql = array('a' => 't.topic_first_poster_name', 't' => 't.topic_last_post_time', 'r' => 't.topic_replies', 's' => 't.topic_title', 'v' => 't.topic_views');$s_limit_days = $s_sort_key = $s_sort_dir = $u_sort_param = '';gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param, $default_sort_days, $default_sort_key, $default_sort_dir);// Limit topics to certain time frame, obtain correct topic count// global announcements must not be counted, normal announcements have to// be counted, as forum_topics(_real) includes themif ($sort_days){	$min_post_time = time() - ($sort_days * 86400);	$sql = 'SELECT COUNT(topic_id) AS num_topics		FROM ' . TOPICS_TABLE . "		WHERE forum_id = $forum_id			AND ((topic_type <> " . POST_GLOBAL . " AND topic_last_post_time >= $min_post_time)				OR topic_type = " . POST_ANNOUNCE . ")		" . (($auth->acl_get('m_approve', $forum_id)) ? '' : 'AND topic_approved = 1');	$result = $db->sql_query($sql);	$topics_count = (int) $db->sql_fetchfield('num_topics');	$db->sql_freeresult($result);	if (isset($_POST['sort']))	{		$start = 0;	}	$sql_limit_time = "AND t.topic_last_post_time >= $min_post_time";	// Make sure we have information about day selection ready	$template->assign_var('S_SORT_DAYS', true);}else{	$topics_count = ($auth->acl_get('m_approve', $forum_id)) ? $forum_data['forum_topics_real'] : $forum_data['forum_topics'];	$sql_limit_time = '';}// Make sure $start is set to the last page if it exceeds the amountif ($start < 0 || $start > $topics_count){	$start = ($start < 0) ? 0 : floor(($topics_count - 1) / $config['topics_per_page']) * $config['topics_per_page'];}// Basic pagewide vars$post_alt = ($forum_data['forum_status'] == ITEM_LOCKED) ? $user->lang['FORUM_LOCKED'] : $user->lang['POST_NEW_TOPIC'];// Display active topics?$s_display_active = ($forum_data['forum_type'] == FORUM_CAT && ($forum_data['forum_flags'] & FORUM_FLAG_ACTIVE_TOPICS)) ? true : false;$s_search_hidden_fields = array('fid' => array($forum_id));if ($_SID){	$s_search_hidden_fields['sid'] = $_SID;}if (!empty($_EXTRA_URL)){	foreach ($_EXTRA_URL as $url_param)	{		$url_param = explode('=', $url_param, 2);		$s_hidden_fields[$url_param[0]] = $url_param[1];	}}$template->assign_vars(array(	'MODERATORS'	=> (!empty($moderators[$forum_id])) ? implode(', ', $moderators[$forum_id]) : '',	'POST_IMG'					=> ($forum_data['forum_status'] == ITEM_LOCKED) ? $user->img('button_topic_locked', $post_alt) : $user->img('button_topic_new', $post_alt),	'NEWEST_POST_IMG'			=> $user->img('icon_topic_newest', 'VIEW_NEWEST_POST'),	'LAST_POST_IMG'				=> $user->img('icon_topic_latest', 'VIEW_LATEST_POST'),	'FOLDER_IMG'				=> $user->img('topic_read', 'NO_UNREAD_POSTS'),	'FOLDER_UNREAD_IMG'			=> $user->img('topic_unread', 'UNREAD_POSTS'),	'FOLDER_HOT_IMG'			=> $user->img('topic_read_hot', 'NO_UNREAD_POSTS_HOT'),	'FOLDER_HOT_UNREAD_IMG'		=> $user->img('topic_unread_hot', 'UNREAD_POSTS_HOT'),	'FOLDER_LOCKED_IMG'			=> $user->img('topic_read_locked', 'NO_UNREAD_POSTS_LOCKED'),	'FOLDER_LOCKED_UNREAD_IMG'	=> $user->img('topic_unread_locked', 'UNREAD_POSTS_LOCKED'),	'FOLDER_STICKY_IMG'			=> $user->img('sticky_read', 'POST_STICKY'),	'FOLDER_STICKY_UNREAD_IMG'	=> $user->img('sticky_unread', 'POST_STICKY'),	'FOLDER_ANNOUNCE_IMG'		=> $user->img('announce_read', 'POST_ANNOUNCEMENT'),	'FOLDER_ANNOUNCE_UNREAD_IMG'=> $user->img('announce_unread', 'POST_ANNOUNCEMENT'),	'FOLDER_MOVED_IMG'			=> $user->img('topic_moved', 'TOPIC_MOVED'),	'REPORTED_IMG'				=> $user->img('icon_topic_reported', 'TOPIC_REPORTED'),	'UNAPPROVED_IMG'			=> $user->img('icon_topic_unapproved', 'TOPIC_UNAPPROVED'),	'GOTO_PAGE_IMG'				=> $user->img('icon_post_target', 'GOTO_PAGE'),	'L_NO_TOPICS' 			=> ($forum_data['forum_status'] == ITEM_LOCKED) ? $user->lang['POST_FORUM_LOCKED'] : $user->lang['NO_TOPICS'],	'S_DISPLAY_POST_INFO'	=> ($forum_data['forum_type'] == FORUM_POST && ($auth->acl_get('f_post', $forum_id) || $user->data['user_id'] == ANONYMOUS)) ? true : false,	'S_IS_POSTABLE'			=> ($forum_data['forum_type'] == FORUM_POST) ? true : false,	'S_USER_CAN_POST'		=> ($auth->acl_get('f_post', $forum_id)) ? true : false,	'S_DISPLAY_ACTIVE'		=> $s_display_active,	'S_SELECT_SORT_DIR'		=> $s_sort_dir,	'S_SELECT_SORT_KEY'		=> $s_sort_key,	'S_SELECT_SORT_DAYS'	=> $s_limit_days,	'S_TOPIC_ICONS'			=> ($s_display_active && sizeof($active_forum_ary)) ? max($active_forum_ary['enable_icons']) : (($forum_data['enable_icons']) ? true : false),	'S_WATCH_FORUM_LINK'	=> $s_watching_forum['link'],	'S_WATCH_FORUM_TITLE'	=> $s_watching_forum['title'],	'S_WATCHING_FORUM'		=> $s_watching_forum['is_watching'],	'S_FORUM_ACTION'		=> append_sid("{$phpbb_root_path}viewforum.$phpEx", "f=$forum_id" . (($start == 0) ? '' : "&amp;start=$start")),	'S_DISPLAY_SEARCHBOX'	=> ($auth->acl_get('u_search') && $auth->acl_get('f_search', $forum_id) && $config['load_search']) ? true : false,	'S_SEARCHBOX_ACTION'	=> append_sid("{$phpbb_root_path}search.$phpEx"),	'S_SEARCH_LOCAL_HIDDEN_FIELDS'	=> build_hidden_fields($s_search_hidden_fields),	'S_SINGLE_MODERATOR'	=> (!empty($moderators[$forum_id]) && sizeof($moderators[$forum_id]) > 1) ? false : true,	'S_IS_LOCKED'			=> ($forum_data['forum_status'] == ITEM_LOCKED) ? true : false,	'S_VIEWFORUM'			=> true,	'U_MCP'				=> ($auth->acl_get('m_', $forum_id)) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "f=$forum_id&amp;i=main&amp;mode=forum_view", true, $user->session_id) : '',	'U_POST_NEW_TOPIC'	=> ($auth->acl_get('f_post', $forum_id) || $user->data['user_id'] == ANONYMOUS) ? append_sid("{$phpbb_root_path}posting.$phpEx", 'mode=post&amp;f=' . $forum_id) : '',	'U_VIEW_FORUM'		=> append_sid("{$phpbb_root_path}viewforum.$phpEx", "f=$forum_id" . ((strlen($u_sort_param)) ? "&amp;$u_sort_param" : '') . (($start == 0) ? '' : "&amp;start=$start")),	'U_MARK_TOPICS'		=> ($user->data['is_registered'] || $config['load_anon_lastread']) ? append_sid("{$phpbb_root_path}viewforum.$phpEx", 'hash=' . generate_link_hash('global') . "&amp;f=$forum_id&amp;mark=topics") : '',));// Grab icons$icons = $cache->obtain_icons();// Grab all topic data$rowset = $announcement_list = $topic_list = $global_announce_list = array();$sql_array = array(	'SELECT'	=> 't.*',	'FROM'		=> array(		TOPICS_TABLE		=> 't'	),	'LEFT_JOIN'	=> array(),);$sql_approved = ($auth->acl_get('m_approve', $forum_id)) ? '' : 'AND t.topic_approved = 1';if ($user->data['is_registered']){	if ($config['load_db_track'])	{		$sql_array['LEFT_JOIN'][] = array('FROM' => array(TOPICS_POSTED_TABLE => 'tp'), 'ON' => 'tp.topic_id = t.topic_id AND tp.user_id = ' . $user->data['user_id']);		$sql_array['SELECT'] .= ', tp.topic_posted';	}	if ($config['load_db_lastread'])	{		$sql_array['LEFT_JOIN'][] = array('FROM' => array(TOPICS_TRACK_TABLE => 'tt'), 'ON' => 'tt.topic_id = t.topic_id AND tt.user_id = ' . $user->data['user_id']);		$sql_array['SELECT'] .= ', tt.mark_time';		if ($s_display_active && sizeof($active_forum_ary))		{			$sql_array['LEFT_JOIN'][] = array('FROM' => array(FORUMS_TRACK_TABLE => 'ft'), 'ON' => 'ft.forum_id = t.forum_id AND ft.user_id = ' . $user->data['user_id']);			$sql_array['SELECT'] .= ', ft.mark_time AS forum_mark_time';		}	}}if ($forum_data['forum_type'] == FORUM_POST){	// Obtain announcements ... removed sort ordering, sort by time in all cases	$sql = $db->sql_build_query('SELECT', array(		'SELECT'	=> $sql_array['SELECT'],		'FROM'		=> $sql_array['FROM'],		'LEFT_JOIN'	=> $sql_array['LEFT_JOIN'],		'WHERE'		=> 't.forum_id IN (' . $forum_id . ', 0)			AND t.topic_type IN (' . POST_ANNOUNCE . ', ' . POST_GLOBAL . ')',		'ORDER_BY'	=> 't.topic_time DESC',	));	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		if (!$row['topic_approved'] && !$auth->acl_get('m_approve', $row['forum_id']))		{			// Do not display announcements that are waiting for approval.			continue;		}		$rowset[$row['topic_id']] = $row;		$announcement_list[] = $row['topic_id'];		if ($row['topic_type'] == POST_GLOBAL)		{			$global_announce_list[$row['topic_id']] = true;		}		else		{			$topics_count--;		}	}	$db->sql_freeresult($result);}// If the user is trying to reach late pages, start searching from the end$store_reverse = false;$sql_limit = $config['topics_per_page'];if ($start > $topics_count / 2){	$store_reverse = true;	if ($start + $config['topics_per_page'] > $topics_count)	{		$sql_limit = min($config['topics_per_page'], max(1, $topics_count - $start));	}	// Select the sort order	$sql_sort_order = $sort_by_sql[$sort_key] . ' ' . (($sort_dir == 'd') ? 'ASC' : 'DESC');	$sql_start = max(0, $topics_count - $sql_limit - $start);}else{	// Select the sort order	$sql_sort_order = $sort_by_sql[$sort_key] . ' ' . (($sort_dir == 'd') ? 'DESC' : 'ASC');	$sql_start = $start;}if ($forum_data['forum_type'] == FORUM_POST || !sizeof($active_forum_ary)){	$sql_where = 't.forum_id = ' . $forum_id;}else if (empty($active_forum_ary['exclude_forum_id'])){	$sql_where = $db->sql_in_set('t.forum_id', $active_forum_ary['forum_id']);}else{	$get_forum_ids = array_diff($active_forum_ary['forum_id'], $active_forum_ary['exclude_forum_id']);	$sql_where = (sizeof($get_forum_ids)) ? $db->sql_in_set('t.forum_id', $get_forum_ids) : 't.forum_id = ' . $forum_id;}// Grab just the sorted topic ids$sql = 'SELECT t.topic_id	FROM ' . TOPICS_TABLE . " t	WHERE $sql_where		AND t.topic_type IN (" . POST_NORMAL . ', ' . POST_STICKY . ")		$sql_approved		$sql_limit_time	ORDER BY t.topic_type " . ((!$store_reverse) ? 'DESC' : 'ASC') . ', ' . $sql_sort_order;$result = $db->sql_query_limit($sql, $sql_limit, $sql_start);while ($row = $db->sql_fetchrow($result)){	$topic_list[] = (int) $row['topic_id'];}$db->sql_freeresult($result);// For storing shadow topics$shadow_topic_list = array();if (sizeof($topic_list)){	// SQL array for obtaining topics/stickies	$sql_array = array(		'SELECT'		=> $sql_array['SELECT'],		'FROM'			=> $sql_array['FROM'],		'LEFT_JOIN'		=> $sql_array['LEFT_JOIN'],		'WHERE'			=> $db->sql_in_set('t.topic_id', $topic_list),	);	// If store_reverse, then first obtain topics, then stickies, else the other way around...	// Funnily enough you typically save one query if going from the last page to the middle (store_reverse) because	// the number of stickies are not known	$sql = $db->sql_build_query('SELECT', $sql_array);	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		if ($row['topic_status'] == ITEM_MOVED)		{			$shadow_topic_list[$row['topic_moved_id']] = $row['topic_id'];		}		$rowset[$row['topic_id']] = $row;	}	$db->sql_freeresult($result);}// If we have some shadow topics, update the rowset to reflect their topic informationif (sizeof($shadow_topic_list)){	$sql = 'SELECT *		FROM ' . TOPICS_TABLE . '		WHERE ' . $db->sql_in_set('topic_id', array_keys($shadow_topic_list));	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$orig_topic_id = $shadow_topic_list[$row['topic_id']];		// If the shadow topic is already listed within the rowset (happens for active topics for example), then do not include it...		if (isset($rowset[$row['topic_id']]))		{			// We need to remove any trace regarding this topic. :)			unset($rowset[$orig_topic_id]);			unset($topic_list[array_search($orig_topic_id, $topic_list)]);			$topics_count--;			continue;		}		// Do not include those topics the user has no permission to access		if (!$auth->acl_get('f_read', $row['forum_id']))		{			// We need to remove any trace regarding this topic. :)			unset($rowset[$orig_topic_id]);			unset($topic_list[array_search($orig_topic_id, $topic_list)]);			$topics_count--;			continue;		}		// We want to retain some values		$row = array_merge($row, array(			'topic_moved_id'	=> $rowset[$orig_topic_id]['topic_moved_id'],			'topic_status'		=> $rowset[$orig_topic_id]['topic_status'],			'topic_type'		=> $rowset[$orig_topic_id]['topic_type'],			'topic_title'		=> $rowset[$orig_topic_id]['topic_title'],		));		// Shadow topics are never reported		$row['topic_reported'] = 0;		$rowset[$orig_topic_id] = $row;	}	$db->sql_freeresult($result);}unset($shadow_topic_list);// Ok, adjust topics count for active topics listif ($s_display_active){	$topics_count = 1;}// We need to readd the local announcements to the forums total topic count, otherwise the number is different from the one on the forum list$total_topic_count = $topics_count + sizeof($announcement_list) - sizeof($global_announce_list);$template->assign_vars(array(	'PAGINATION'	=> generate_pagination(append_sid("{$phpbb_root_path}viewforum.$phpEx", "f=$forum_id" . ((strlen($u_sort_param)) ? "&amp;$u_sort_param" : '')), $topics_count, $config['topics_per_page'], $start),	'PAGE_NUMBER'	=> on_page($topics_count, $config['topics_per_page'], $start),	'TOTAL_TOPICS'	=> ($s_display_active) ? false : (($total_topic_count == 1) ? $user->lang['VIEW_FORUM_TOPIC'] : sprintf($user->lang['VIEW_FORUM_TOPICS'], $total_topic_count))));$topic_list = ($store_reverse) ? array_merge($announcement_list, array_reverse($topic_list)) : array_merge($announcement_list, $topic_list);$topic_tracking_info = $tracking_topics = array();// Okay, lets dump out the page ...if (sizeof($topic_list)){	$mark_forum_read = true;	$mark_time_forum = 0;	// Active topics?	if ($s_display_active && sizeof($active_forum_ary))	{		// Generate topic forum list...		$topic_forum_list = array();		foreach ($rowset as $t_id => $row)		{			$topic_forum_list[$row['forum_id']]['forum_mark_time'] = ($config['load_db_lastread'] && $user->data['is_registered'] && isset($row['forum_mark_time'])) ? $row['forum_mark_time'] : 0;			$topic_forum_list[$row['forum_id']]['topics'][] = $t_id;		}		if ($config['load_db_lastread'] && $user->data['is_registered'])		{			foreach ($topic_forum_list as $f_id => $topic_row)			{				$topic_tracking_info += get_topic_tracking($f_id, $topic_row['topics'], $rowset, array($f_id => $topic_row['forum_mark_time']), false);			}		}		else if ($config['load_anon_lastread'] || $user->data['is_registered'])		{			foreach ($topic_forum_list as $f_id => $topic_row)			{				$topic_tracking_info += get_complete_topic_tracking($f_id, $topic_row['topics'], false);			}		}		unset($topic_forum_list);	}	else	{		if ($config['load_db_lastread'] && $user->data['is_registered'])		{			$topic_tracking_info = get_topic_tracking($forum_id, $topic_list, $rowset, array($forum_id => $forum_data['mark_time']), $global_announce_list);			$mark_time_forum = (!empty($forum_data['mark_time'])) ? $forum_data['mark_time'] : $user->data['user_lastmark'];		}		else if ($config['load_anon_lastread'] || $user->data['is_registered'])		{			$topic_tracking_info = get_complete_topic_tracking($forum_id, $topic_list, $global_announce_list);			if (!$user->data['is_registered'])			{				$user->data['user_lastmark'] = (isset($tracking_topics['l'])) ? (int) (base_convert($tracking_topics['l'], 36, 10) + $config['board_startdate']) : 0;			}			$mark_time_forum = (isset($tracking_topics['f'][$forum_id])) ? (int) (base_convert($tracking_topics['f'][$forum_id], 36, 10) + $config['board_startdate']) : $user->data['user_lastmark'];		}	}	$s_type_switch = 0;	foreach ($topic_list as $topic_id)	{		$row = &$rowset[$topic_id];		$topic_forum_id = ($row['forum_id']) ? (int) $row['forum_id'] : $forum_id;		// This will allow the style designer to output a different header		// or even separate the list of announcements from sticky and normal topics		$s_type_switch_test = ($row['topic_type'] == POST_ANNOUNCE || $row['topic_type'] == POST_GLOBAL) ? 1 : 0;		// Replies		$replies = ($auth->acl_get('m_approve', $topic_forum_id)) ? $row['topic_replies_real'] : $row['topic_replies'];		if ($row['topic_status'] == ITEM_MOVED)		{			$topic_id = $row['topic_moved_id'];			$unread_topic = false;		}		else		{			$unread_topic = (isset($topic_tracking_info[$topic_id]) && $row['topic_last_post_time'] > $topic_tracking_info[$topic_id]) ? true : false;		}		// Get folder img, topic status/type related information		$folder_img = $folder_alt = $topic_type = '';		topic_status($row, $replies, $unread_topic, $folder_img, $folder_alt, $topic_type);		// Generate all the URIs ...		$view_topic_url_params = 'f=' . $topic_forum_id . '&amp;t=' . $topic_id;		$view_topic_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", $view_topic_url_params);		$topic_unapproved = (!$row['topic_approved'] && $auth->acl_get('m_approve', $topic_forum_id)) ? true : false;		$posts_unapproved = ($row['topic_approved'] && $row['topic_replies'] < $row['topic_replies_real'] && $auth->acl_get('m_approve', $topic_forum_id)) ? true : false;		$u_mcp_queue = ($topic_unapproved || $posts_unapproved) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue&amp;mode=' . (($topic_unapproved) ? 'approve_details' : 'unapproved_posts') . "&amp;t=$topic_id", true, $user->session_id) : '';		// Send vars to template		$template->assign_block_vars('topicrow', array(			'FORUM_ID'					=> $topic_forum_id,			'TOPIC_ID'					=> $topic_id,			'TOPIC_AUTHOR'				=> get_username_string('username', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'TOPIC_AUTHOR_COLOUR'		=> get_username_string('colour', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'TOPIC_AUTHOR_FULL'			=> get_username_string('full', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'FIRST_POST_TIME'			=> $user->format_date($row['topic_time']),			'LAST_POST_SUBJECT'			=> censor_text($row['topic_last_post_subject']),			'LAST_POST_TIME'			=> $user->format_date($row['topic_last_post_time']),			'LAST_VIEW_TIME'			=> $user->format_date($row['topic_last_view_time']),			'LAST_POST_AUTHOR'			=> get_username_string('username', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'LAST_POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'LAST_POST_AUTHOR_FULL'		=> get_username_string('full', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'PAGINATION'		=> topic_generate_pagination($replies, $view_topic_url),			'REPLIES'			=> $replies,			'VIEWS'				=> $row['topic_views'],			'TOPIC_TITLE'		=> censor_text($row['topic_title']),			'TOPIC_TYPE'		=> $topic_type,			'TOPIC_FOLDER_IMG'		=> $user->img($folder_img, $folder_alt),			'TOPIC_FOLDER_IMG_SRC'	=> $user->img($folder_img, $folder_alt, false, '', 'src'),			'TOPIC_FOLDER_IMG_ALT'	=> $user->lang[$folder_alt],			'TOPIC_FOLDER_IMG_WIDTH'=> $user->img($folder_img, '', false, '', 'width'),			'TOPIC_FOLDER_IMG_HEIGHT'	=> $user->img($folder_img, '', false, '', 'height'),			'TOPIC_ICON_IMG'		=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['img'] : '',			'TOPIC_ICON_IMG_WIDTH'	=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['width'] : '',			'TOPIC_ICON_IMG_HEIGHT'	=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['height'] : '',			'ATTACH_ICON_IMG'		=> ($auth->acl_get('u_download') && $auth->acl_get('f_download', $topic_forum_id) && $row['topic_attachment']) ? $user->img('icon_topic_attach', $user->lang['TOTAL_ATTACHMENTS']) : '',			'UNAPPROVED_IMG'		=> ($topic_unapproved || $posts_unapproved) ? $user->img('icon_topic_unapproved', ($topic_unapproved) ? 'TOPIC_UNAPPROVED' : 'POSTS_UNAPPROVED') : '',			'S_TOPIC_TYPE'			=> $row['topic_type'],			'S_USER_POSTED'			=> (isset($row['topic_posted']) && $row['topic_posted']) ? true : false,			'S_UNREAD_TOPIC'		=> $unread_topic,			'S_TOPIC_REPORTED'		=> (!empty($row['topic_reported']) && $auth->acl_get('m_report', $topic_forum_id)) ? true : false,			'S_TOPIC_UNAPPROVED'	=> $topic_unapproved,			'S_POSTS_UNAPPROVED'	=> $posts_unapproved,			'S_HAS_POLL'			=> ($row['poll_start']) ? true : false,			'S_POST_ANNOUNCE'		=> ($row['topic_type'] == POST_ANNOUNCE) ? true : false,			'S_POST_GLOBAL'			=> ($row['topic_type'] == POST_GLOBAL) ? true : false,			'S_POST_STICKY'			=> ($row['topic_type'] == POST_STICKY) ? true : false,			'S_TOPIC_LOCKED'		=> ($row['topic_status'] == ITEM_LOCKED) ? true : false,			'S_TOPIC_MOVED'			=> ($row['topic_status'] == ITEM_MOVED) ? true : false,			'U_NEWEST_POST'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", $view_topic_url_params . '&amp;view=unread') . '#unread',			'U_LAST_POST'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", $view_topic_url_params . '&amp;p=' . $row['topic_last_post_id']) . '#p' . $row['topic_last_post_id'],			'U_LAST_POST_AUTHOR'	=> get_username_string('profile', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),			'U_TOPIC_AUTHOR'		=> get_username_string('profile', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),			'U_VIEW_TOPIC'			=> $view_topic_url,			'U_MCP_REPORT'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports&amp;mode=reports&amp;f=' . $topic_forum_id . '&amp;t=' . $topic_id, true, $user->session_id),			'U_MCP_QUEUE'			=> $u_mcp_queue,			'S_TOPIC_TYPE_SWITCH'	=> ($s_type_switch == $s_type_switch_test) ? -1 : $s_type_switch_test)		);		$s_type_switch = ($row['topic_type'] == POST_ANNOUNCE || $row['topic_type'] == POST_GLOBAL) ? 1 : 0;		if ($unread_topic)		{			$mark_forum_read = false;		}		unset($rowset[$topic_id]);	}}// This is rather a fudge but it's the best I can think of without requiring information// on all topics (as we do in 2.0.x). It looks for unread or new topics, if it doesn't find// any it updates the forum last read cookie. This requires that the user visit the forum// after reading a topicif ($forum_data['forum_type'] == FORUM_POST && sizeof($topic_list) && $mark_forum_read){	update_forum_tracking_info($forum_id, $forum_data['forum_last_post_time'], false, $mark_time_forum);}page_footer();?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ucp_prefs* Changing user preferences* @package ucp*/class ucp_prefs{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $phpbb_root_path, $phpEx;		$submit = (isset($_POST['submit'])) ? true : false;		$error = $data = array();		$s_hidden_fields = '';		switch ($mode)		{			case 'personal':				add_form_key('ucp_prefs_personal');				$data = array(					'notifymethod'	=> request_var('notifymethod', $user->data['user_notify_type']),					'dateformat'	=> request_var('dateformat', $user->data['user_dateformat'], true),					'lang'			=> basename(request_var('lang', $user->data['user_lang'])),					'style'			=> request_var('style', (int) $user->data['user_style']),					'tz'			=> request_var('tz', (float) $user->data['user_timezone']),					'dst'			=> request_var('dst', (bool) $user->data['user_dst']),					'viewemail'		=> request_var('viewemail', (bool) $user->data['user_allow_viewemail']),					'massemail'		=> request_var('massemail', (bool) $user->data['user_allow_massemail']),					'hideonline'	=> request_var('hideonline', (bool) !$user->data['user_allow_viewonline']),					'notifypm'		=> request_var('notifypm', (bool) $user->data['user_notify_pm']),					'popuppm'		=> request_var('popuppm', (bool) $user->optionget('popuppm')),					'allowpm'		=> request_var('allowpm', (bool) $user->data['user_allow_pm']),				);				if ($data['notifymethod'] == NOTIFY_IM && (!$config['jab_enable'] || !$user->data['user_jabber'] || !@extension_loaded('xml')))				{					// Jabber isnt enabled, or no jabber field filled in. Update the users table to be sure its correct.					$data['notifymethod'] = NOTIFY_BOTH;				}				if ($submit)				{					$data['style'] = ($config['override_user_style']) ? $config['default_style'] : $data['style'];					$error = validate_data($data, array(						'dateformat'	=> array('string', false, 1, 30),						'lang'			=> array('language_iso_name'),						'tz'			=> array('num', false, -14, 14),					));					if (!check_form_key('ucp_prefs_personal'))					{						$error[] = 'FORM_INVALID';					}					if (!sizeof($error))					{						$user->optionset('popuppm', $data['popuppm']);						$sql_ary = array(							'user_allow_pm'			=> $data['allowpm'],							'user_allow_viewemail'	=> $data['viewemail'],							'user_allow_massemail'	=> $data['massemail'],							'user_allow_viewonline'	=> ($auth->acl_get('u_hideonline')) ? !$data['hideonline'] : $user->data['user_allow_viewonline'],							'user_notify_type'		=> $data['notifymethod'],							'user_notify_pm'		=> $data['notifypm'],							'user_options'			=> $user->data['user_options'],							'user_dst'				=> $data['dst'],							'user_dateformat'		=> $data['dateformat'],							'user_lang'				=> $data['lang'],							'user_timezone'			=> $data['tz'],							'user_style'			=> $data['style'],						);						$sql = 'UPDATE ' . USERS_TABLE . '							SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '							WHERE user_id = ' . $user->data['user_id'];						$db->sql_query($sql);						meta_refresh(3, $this->u_action);						$message = $user->lang['PREFERENCES_UPDATED'] . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $this->u_action . '">', '</a>');						trigger_error($message);					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				$dateformat_options = '';				foreach ($user->lang['dateformats'] as $format => $null)				{					$dateformat_options .= '<option value="' . $format . '"' . (($format == $data['dateformat']) ? ' selected="selected"' : '') . '>';					$dateformat_options .= $user->format_date(time(), $format, false) . ((strpos($format, '|') !== false) ? $user->lang['VARIANT_DATE_SEPARATOR'] . $user->format_date(time(), $format, true) : '');					$dateformat_options .= '</option>';				}				$s_custom = false;				$dateformat_options .= '<option value="custom"';				if (!isset($user->lang['dateformats'][$data['dateformat']]))				{					$dateformat_options .= ' selected="selected"';					$s_custom = true;				}				$dateformat_options .= '>' . $user->lang['CUSTOM_DATEFORMAT'] . '</option>';				$template->assign_vars(array(					'ERROR'				=> (sizeof($error)) ? implode('<br />', $error) : '',					'S_NOTIFY_EMAIL'	=> ($data['notifymethod'] == NOTIFY_EMAIL) ? true : false,					'S_NOTIFY_IM'		=> ($data['notifymethod'] == NOTIFY_IM) ? true : false,					'S_NOTIFY_BOTH'		=> ($data['notifymethod'] == NOTIFY_BOTH) ? true : false,					'S_VIEW_EMAIL'		=> $data['viewemail'],					'S_MASS_EMAIL'		=> $data['massemail'],					'S_ALLOW_PM'		=> $data['allowpm'],					'S_HIDE_ONLINE'		=> $data['hideonline'],					'S_NOTIFY_PM'		=> $data['notifypm'],					'S_POPUP_PM'		=> $data['popuppm'],					'S_DST'				=> $data['dst'],					'DATE_FORMAT'			=> $data['dateformat'],					'A_DATE_FORMAT'			=> addslashes($data['dateformat']),					'S_DATEFORMAT_OPTIONS'	=> $dateformat_options,					'S_CUSTOM_DATEFORMAT'	=> $s_custom,					'DEFAULT_DATEFORMAT'	=> $config['default_dateformat'],					'A_DEFAULT_DATEFORMAT'	=> addslashes($config['default_dateformat']),					'S_LANG_OPTIONS'		=> language_select($data['lang']),					'S_STYLE_OPTIONS'		=> ($config['override_user_style']) ? '' : style_select($data['style']),					'S_TZ_OPTIONS'			=> tz_select($data['tz'], true),					'S_CAN_HIDE_ONLINE'		=> ($auth->acl_get('u_hideonline')) ? true : false,					'S_SELECT_NOTIFY'		=> ($config['jab_enable'] && $user->data['user_jabber'] && @extension_loaded('xml')) ? true : false)				);			break;			case 'view':				add_form_key('ucp_prefs_view');				$data = array(					'topic_sk'		=> request_var('topic_sk', (!empty($user->data['user_topic_sortby_type'])) ? $user->data['user_topic_sortby_type'] : 't'),					'topic_sd'		=> request_var('topic_sd', (!empty($user->data['user_topic_sortby_dir'])) ? $user->data['user_topic_sortby_dir'] : 'd'),					'topic_st'		=> request_var('topic_st', (!empty($user->data['user_topic_show_days'])) ? $user->data['user_topic_show_days'] : 0),					'post_sk'		=> request_var('post_sk', (!empty($user->data['user_post_sortby_type'])) ? $user->data['user_post_sortby_type'] : 't'),					'post_sd'		=> request_var('post_sd', (!empty($user->data['user_post_sortby_dir'])) ? $user->data['user_post_sortby_dir'] : 'a'),					'post_st'		=> request_var('post_st', (!empty($user->data['user_post_show_days'])) ? $user->data['user_post_show_days'] : 0),					'images'		=> request_var('images', (bool) $user->optionget('viewimg')),					'flash'			=> request_var('flash', (bool) $user->optionget('viewflash')),					'smilies'		=> request_var('smilies', (bool) $user->optionget('viewsmilies')),					'sigs'			=> request_var('sigs', (bool) $user->optionget('viewsigs')),					'avatars'		=> request_var('avatars', (bool) $user->optionget('viewavatars')),					'wordcensor'	=> request_var('wordcensor', (bool) $user->optionget('viewcensors')),				);				if ($submit)				{					$error = validate_data($data, array(						'topic_sk'	=> array('string', false, 1, 1),						'topic_sd'	=> array('string', false, 1, 1),						'post_sk'	=> array('string', false, 1, 1),						'post_sd'	=> array('string', false, 1, 1),					));					if (!check_form_key('ucp_prefs_view'))					{						$error[] = 'FORM_INVALID';					}					if (!sizeof($error))					{						$user->optionset('viewimg', $data['images']);						$user->optionset('viewflash', $data['flash']);						$user->optionset('viewsmilies', $data['smilies']);						$user->optionset('viewsigs', $data['sigs']);						$user->optionset('viewavatars', $data['avatars']);						if ($auth->acl_get('u_chgcensors'))						{							$user->optionset('viewcensors', $data['wordcensor']);						}						$sql_ary = array(							'user_options'				=> $user->data['user_options'],							'user_topic_sortby_type'	=> $data['topic_sk'],							'user_post_sortby_type'		=> $data['post_sk'],							'user_topic_sortby_dir'		=> $data['topic_sd'],							'user_post_sortby_dir'		=> $data['post_sd'],							'user_topic_show_days'	=> $data['topic_st'],							'user_post_show_days'	=> $data['post_st'],						);						$sql = 'UPDATE ' . USERS_TABLE . '							SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '							WHERE user_id = ' . $user->data['user_id'];						$db->sql_query($sql);						meta_refresh(3, $this->u_action);						$message = $user->lang['PREFERENCES_UPDATED'] . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $this->u_action . '">', '</a>');						trigger_error($message);					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				$sort_dir_text = array('a' => $user->lang['ASCENDING'], 'd' => $user->lang['DESCENDING']);				// Topic ordering options				$limit_topic_days = array(0 => $user->lang['ALL_TOPICS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);				$sort_by_topic_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 'r' => $user->lang['REPLIES'], 's' => $user->lang['SUBJECT'], 'v' => $user->lang['VIEWS']);				$sort_by_topic_sql = array('a' => 't.topic_first_poster_name', 't' => 't.topic_last_post_time', 'r' => 't.topic_replies', 's' => 't.topic_title', 'v' => 't.topic_views');				// Post ordering options				$limit_post_days = array(0 => $user->lang['ALL_POSTS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);				$sort_by_post_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 's' => $user->lang['SUBJECT']);				$sort_by_post_sql = array('a' => 'u.username_clean', 't' => 'p.post_id', 's' => 'p.post_subject');				$_options = array('topic', 'post');				foreach ($_options as $sort_option)				{					${'s_limit_' . $sort_option . '_days'} = '<select name="' . $sort_option . '_st">';					foreach (${'limit_' . $sort_option . '_days'} as $day => $text)					{						$selected = ($data[$sort_option . '_st'] == $day) ? ' selected="selected"' : '';						${'s_limit_' . $sort_option . '_days'} .= '<option value="' . $day . '"' . $selected . '>' . $text . '</option>';					}					${'s_limit_' . $sort_option . '_days'} .= '</select>';					${'s_sort_' . $sort_option . '_key'} = '<select name="' . $sort_option . '_sk">';					foreach (${'sort_by_' . $sort_option . '_text'} as $key => $text)					{						$selected = ($data[$sort_option . '_sk'] == $key) ? ' selected="selected"' : '';						${'s_sort_' . $sort_option . '_key'} .= '<option value="' . $key . '"' . $selected . '>' . $text . '</option>';					}					${'s_sort_' . $sort_option . '_key'} .= '</select>';					${'s_sort_' . $sort_option . '_dir'} = '<select name="' . $sort_option . '_sd">';					foreach ($sort_dir_text as $key => $value)					{						$selected = ($data[$sort_option . '_sd'] == $key) ? ' selected="selected"' : '';						${'s_sort_' . $sort_option . '_dir'} .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';					}					${'s_sort_' . $sort_option . '_dir'} .= '</select>';				}				$template->assign_vars(array(					'ERROR'				=> (sizeof($error)) ? implode('<br />', $error) : '',					'S_IMAGES'			=> $data['images'],					'S_FLASH'			=> $data['flash'],					'S_SMILIES'			=> $data['smilies'],					'S_SIGS'			=> $data['sigs'],					'S_AVATARS'			=> $data['avatars'],					'S_DISABLE_CENSORS'	=> $data['wordcensor'],					'S_CHANGE_CENSORS'		=> ($auth->acl_get('u_chgcensors') && $config['allow_nocensors']) ? true : false,					'S_TOPIC_SORT_DAYS'		=> $s_limit_topic_days,					'S_TOPIC_SORT_KEY'		=> $s_sort_topic_key,					'S_TOPIC_SORT_DIR'		=> $s_sort_topic_dir,					'S_POST_SORT_DAYS'		=> $s_limit_post_days,					'S_POST_SORT_KEY'		=> $s_sort_post_key,					'S_POST_SORT_DIR'		=> $s_sort_post_dir)				);			break;			case 'post':				$data = array(					'bbcode'	=> request_var('bbcode', $user->optionget('bbcode')),					'smilies'	=> request_var('smilies', $user->optionget('smilies')),					'sig'		=> request_var('sig', $user->optionget('attachsig')),					'notify'	=> request_var('notify', (bool) $user->data['user_notify']),				);				add_form_key('ucp_prefs_post');				if ($submit)				{					if (check_form_key('ucp_prefs_post'))					{						$user->optionset('bbcode', $data['bbcode']);						$user->optionset('smilies', $data['smilies']);						$user->optionset('attachsig', $data['sig']);						$sql_ary = array(							'user_options'	=> $user->data['user_options'],							'user_notify'	=> $data['notify'],						);						$sql = 'UPDATE ' . USERS_TABLE . '							SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '							WHERE user_id = ' . $user->data['user_id'];						$db->sql_query($sql);						$msg = $user->lang['PREFERENCES_UPDATED'];					}					else					{						$msg = $user->lang['FORM_INVALID'];					}					meta_refresh(3, $this->u_action);					$message = $msg . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $this->u_action . '">', '</a>');					trigger_error($message);				}				$template->assign_vars(array(					'S_BBCODE'	=> $data['bbcode'],					'S_SMILIES'	=> $data['smilies'],					'S_SIG'		=> $data['sig'],					'S_NOTIFY'	=> $data['notify'])				);			break;		}		$template->assign_vars(array(			'L_TITLE'			=> $user->lang['UCP_PREFS_' . strtoupper($mode)],			'S_HIDDEN_FIELDS'	=> $s_hidden_fields,			'S_UCP_ACTION'		=> $this->u_action)		);		$this->tpl_name = 'ucp_prefs_' . $mode;		$this->page_title = 'UCP_PREFS_' . strtoupper($mode);	}}?>
<?php/**** @package dbal* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}include_once($phpbb_root_path . 'includes/db/dbal.' . $phpEx);/*** MSSQL Database Abstraction Layer* Minimum Requirement is MSSQL 2000+* @package dbal*/class dbal_mssql extends dbal{	/**	* Connect to server	*/	function sql_connect($sqlserver, $sqluser, $sqlpassword, $database, $port = false, $persistency = false, $new_link = false)	{		$this->persistency = $persistency;		$this->user = $sqluser;		$this->dbname = $database;		$port_delimiter = (defined('PHP_OS') && substr(PHP_OS, 0, 3) === 'WIN') ? ',' : ':';		$this->server = $sqlserver . (($port) ? $port_delimiter . $port : '');		@ini_set('mssql.charset', 'UTF-8');		@ini_set('mssql.textlimit', 2147483647);		@ini_set('mssql.textsize', 2147483647);		if (version_compare(PHP_VERSION, '5.1.0', '>=') || (version_compare(PHP_VERSION, '5.0.0-dev', '<=') && version_compare(PHP_VERSION, '4.4.1', '>=')))		{			$this->db_connect_id = ($this->persistency) ? @mssql_pconnect($this->server, $this->user, $sqlpassword, $new_link) : @mssql_connect($this->server, $this->user, $sqlpassword, $new_link);		}		else		{			$this->db_connect_id = ($this->persistency) ? @mssql_pconnect($this->server, $this->user, $sqlpassword) : @mssql_connect($this->server, $this->user, $sqlpassword);		}		if ($this->db_connect_id && $this->dbname != '')		{			if (!@mssql_select_db($this->dbname, $this->db_connect_id))			{				@mssql_close($this->db_connect_id);				return false;			}		}		return ($this->db_connect_id) ? $this->db_connect_id : $this->sql_error('');	}	/**	* Version information about used database	* @param bool $raw if true, only return the fetched sql_server_version	* @param bool $use_cache If true, it is safe to retrieve the value from the cache	* @return string sql server version	*/	function sql_server_info($raw = false, $use_cache = true)	{		global $cache;		if (!$use_cache || empty($cache) || ($this->sql_server_version = $cache->get('mssql_version')) === false)		{			$result_id = @mssql_query("SELECT SERVERPROPERTY('productversion'), SERVERPROPERTY('productlevel'), SERVERPROPERTY('edition')", $this->db_connect_id);			$row = false;			if ($result_id)			{				$row = @mssql_fetch_assoc($result_id);				@mssql_free_result($result_id);			}			$this->sql_server_version = ($row) ? trim(implode(' ', $row)) : 0;			if (!empty($cache) && $use_cache)			{				$cache->put('mssql_version', $this->sql_server_version);			}		}		if ($raw)		{			return $this->sql_server_version;		}		return ($this->sql_server_version) ? 'MSSQL<br />' . $this->sql_server_version : 'MSSQL';	}	/**	* SQL Transaction	* @access private	*/	function _sql_transaction($status = 'begin')	{		switch ($status)		{			case 'begin':				return @mssql_query('BEGIN TRANSACTION', $this->db_connect_id);			break;			case 'commit':				return @mssql_query('COMMIT TRANSACTION', $this->db_connect_id);			break;			case 'rollback':				return @mssql_query('ROLLBACK TRANSACTION', $this->db_connect_id);			break;		}		return true;	}	/**	* Base query method	*	* @param	string	$query		Contains the SQL query which shall be executed	* @param	int		$cache_ttl	Either 0 to avoid caching or the time in seconds which the result shall be kept in cache	* @return	mixed				When casted to bool the returned value returns true on success and false on failure	*	* @access	public	*/	function sql_query($query = '', $cache_ttl = 0)	{		if ($query != '')		{			global $cache;			// EXPLAIN only in extra debug mode			if (defined('DEBUG_EXTRA'))			{				$this->sql_report('start', $query);			}			$this->query_result = ($cache_ttl && method_exists($cache, 'sql_load')) ? $cache->sql_load($query) : false;			$this->sql_add_num_queries($this->query_result);			if ($this->query_result === false)			{				if (($this->query_result = @mssql_query($query, $this->db_connect_id)) === false)				{					$this->sql_error($query);				}				if (defined('DEBUG_EXTRA'))				{					$this->sql_report('stop', $query);				}				if ($cache_ttl && method_exists($cache, 'sql_save'))				{					$this->open_queries[(int) $this->query_result] = $this->query_result;					$cache->sql_save($query, $this->query_result, $cache_ttl);				}				else if (strpos($query, 'SELECT') === 0 && $this->query_result)				{					$this->open_queries[(int) $this->query_result] = $this->query_result;				}			}			else if (defined('DEBUG_EXTRA'))			{				$this->sql_report('fromcache', $query);			}		}		else		{			return false;		}		return $this->query_result;	}	/**	* Build LIMIT query	*/	function _sql_query_limit($query, $total, $offset = 0, $cache_ttl = 0)	{		$this->query_result = false;		// Since TOP is only returning a set number of rows we won't need it if total is set to 0 (return all rows)		if ($total)		{			// We need to grab the total number of rows + the offset number of rows to get the correct result			if (strpos($query, 'SELECT DISTINCT') === 0)			{				$query = 'SELECT DISTINCT TOP ' . ($total + $offset) . ' ' . substr($query, 15);			}			else			{				$query = 'SELECT TOP ' . ($total + $offset) . ' ' . substr($query, 6);			}		}		$result = $this->sql_query($query, $cache_ttl);		// Seek by $offset rows		if ($offset)		{			$this->sql_rowseek($offset, $result);		}		return $result;	}	/**	* Return number of affected rows	*/	function sql_affectedrows()	{		return ($this->db_connect_id) ? @mssql_rows_affected($this->db_connect_id) : false;	}	/**	* Fetch current row	*/	function sql_fetchrow($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_fetchrow($query_id);		}		if ($query_id === false)		{			return false;		}		$row = @mssql_fetch_assoc($query_id);		// I hope i am able to remove this later... hopefully only a PHP or MSSQL bug		if ($row)		{			foreach ($row as $key => $value)			{				$row[$key] = ($value === ' ' || $value === NULL) ? '' : $value;			}		}		return $row;	}	/**	* Seek to given row number	* rownum is zero-based	*/	function sql_rowseek($rownum, &$query_id)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_rowseek($rownum, $query_id);		}		return ($query_id !== false) ? @mssql_data_seek($query_id, $rownum) : false;	}	/**	* Get last inserted id after insert statement	*/	function sql_nextid()	{		$result_id = @mssql_query('SELECT SCOPE_IDENTITY()', $this->db_connect_id);		if ($result_id)		{			if ($row = @mssql_fetch_assoc($result_id))			{				@mssql_free_result($result_id);				return $row['computed'];			}			@mssql_free_result($result_id);		}		return false;	}	/**	* Free sql result	*/	function sql_freeresult($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_freeresult($query_id);		}		if (isset($this->open_queries[$query_id]))		{			unset($this->open_queries[$query_id]);			return @mssql_free_result($query_id);		}		return false;	}	/**	* Escape string used in sql query	*/	function sql_escape($msg)	{		return str_replace(array("'", "\0"), array("''", ''), $msg);	}	/**	* Build LIKE expression	* @access private	*/	function _sql_like_expression($expression)	{		return $expression . " ESCAPE '\\'";	}	/**	* return sql error array	* @access private	*/	function _sql_error()	{		$error = array(			'message'	=> @mssql_get_last_message(),			'code'		=> ''		);		// Get error code number		$result_id = @mssql_query('SELECT @@ERROR as code', $this->db_connect_id);		if ($result_id)		{			$row = @mssql_fetch_assoc($result_id);			$error['code'] = $row['code'];			@mssql_free_result($result_id);		}		// Get full error message if possible		$sql = 'SELECT CAST(description as varchar(255)) as message			FROM master.dbo.sysmessages			WHERE error = ' . $error['code'];		$result_id = @mssql_query($sql);				if ($result_id)		{			$row = @mssql_fetch_assoc($result_id);			if (!empty($row['message']))			{				$error['message'] .= '<br />' . $row['message'];			}			@mssql_free_result($result_id);		}		return $error;	}	/**	* Build db-specific query data	* @access private	*/	function _sql_custom_build($stage, $data)	{		return $data;	}	/**	* Close sql connection	* @access private	*/	function _sql_close()	{		return @mssql_close($this->db_connect_id);	}	/**	* Build db-specific report	* @access private	*/	function _sql_report($mode, $query = '')	{		switch ($mode)		{			case 'start':				$html_table = false;				@mssql_query('SET SHOWPLAN_TEXT ON;', $this->db_connect_id);				if ($result = @mssql_query($query, $this->db_connect_id))				{					@mssql_next_result($result);					while ($row = @mssql_fetch_row($result))					{						$html_table = $this->sql_report('add_select_row', $query, $html_table, $row);					}				}				@mssql_query('SET SHOWPLAN_TEXT OFF;', $this->db_connect_id);				@mssql_free_result($result);				if ($html_table)				{					$this->html_hold .= '</table>';				}			break;			case 'fromcache':				$endtime = explode(' ', microtime());				$endtime = $endtime[0] + $endtime[1];				$result = @mssql_query($query, $this->db_connect_id);				while ($void = @mssql_fetch_assoc($result))				{					// Take the time spent on parsing rows into account				}				@mssql_free_result($result);				$splittime = explode(' ', microtime());				$splittime = $splittime[0] + $splittime[1];				$this->sql_report('record_fromcache', $query, $endtime, $splittime);			break;		}	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** mcp_warn* Handling warning the users* @package mcp*/class mcp_warn{	var $p_master;	var $u_action;	function mcp_warn(&$p_master)	{		$this->p_master = &$p_master;	}	function main($id, $mode)	{		global $auth, $db, $user, $template;		global $config, $phpbb_root_path, $phpEx;		$action = request_var('action', array('' => ''));		if (is_array($action))		{			list($action, ) = each($action);		}		$this->page_title = 'MCP_WARN';		add_form_key('mcp_warn');		switch ($mode)		{			case 'front':				$this->mcp_warn_front_view();				$this->tpl_name = 'mcp_warn_front';			break;			case 'list':				$this->mcp_warn_list_view($action);				$this->tpl_name = 'mcp_warn_list';			break;			case 'warn_post':				$this->mcp_warn_post_view($action);				$this->tpl_name = 'mcp_warn_post';			break;			case 'warn_user':				$this->mcp_warn_user_view($action);				$this->tpl_name = 'mcp_warn_user';			break;		}	}	/**	* Generates the summary on the main page of the warning module	*/	function mcp_warn_front_view()	{		global $phpEx, $phpbb_root_path, $config;		global $template, $db, $user, $auth;		$template->assign_vars(array(			'U_FIND_USERNAME'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=mcp&amp;field=username&amp;select_single=true'),			'U_POST_ACTION'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=warn&amp;mode=warn_user'),		));		// Obtain a list of the 5 naughtiest users....		// These are the 5 users with the highest warning count		$highest = array();		$count = 0;		view_warned_users($highest, $count, 5);		foreach ($highest as $row)		{			$template->assign_block_vars('highest', array(				'U_NOTES'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $row['user_id']),				'USERNAME_FULL'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']),				'USERNAME'			=> $row['username'],				'USERNAME_COLOUR'	=> ($row['user_colour']) ? '#' . $row['user_colour'] : '',				'U_USER'			=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=viewprofile&amp;u=' . $row['user_id']),				'WARNING_TIME'	=> $user->format_date($row['user_last_warning']),				'WARNINGS'		=> $row['user_warnings'],			));		}		// And now the 5 most recent users to get in trouble		$sql = 'SELECT u.user_id, u.username, u.username_clean, u.user_colour, u.user_warnings, w.warning_time			FROM ' . USERS_TABLE . ' u, ' . WARNINGS_TABLE . ' w			WHERE u.user_id = w.user_id			ORDER BY w.warning_time DESC';		$result = $db->sql_query_limit($sql, 5);		while ($row = $db->sql_fetchrow($result))		{			$template->assign_block_vars('latest', array(				'U_NOTES'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $row['user_id']),				'USERNAME_FULL'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']),				'USERNAME'			=> $row['username'],				'USERNAME_COLOUR'	=> ($row['user_colour']) ? '#' . $row['user_colour'] : '',				'U_USER'			=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=viewprofile&amp;u=' . $row['user_id']),				'WARNING_TIME'	=> $user->format_date($row['warning_time']),				'WARNINGS'		=> $row['user_warnings'],			));		}		$db->sql_freeresult($result);	}	/**	* Lists all users with warnings	*/	function mcp_warn_list_view($action)	{		global $phpEx, $phpbb_root_path, $config;		global $template, $db, $user, $auth;		$user->add_lang('memberlist');		$start	= request_var('start', 0);		$st		= request_var('st', 0);		$sk		= request_var('sk', 'b');		$sd		= request_var('sd', 'd');		$limit_days = array(0 => $user->lang['ALL_ENTRIES'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);		$sort_by_text = array('a' => $user->lang['SORT_USERNAME'], 'b' => $user->lang['SORT_DATE'], 'c' => $user->lang['SORT_WARNINGS']);		$sort_by_sql = array('a' => 'username_clean', 'b' => 'user_last_warning', 'c' => 'user_warnings');		$s_limit_days = $s_sort_key = $s_sort_dir = $u_sort_param = '';		gen_sort_selects($limit_days, $sort_by_text, $st, $sk, $sd, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);		// Define where and sort sql for use in displaying logs		$sql_where = ($st) ? (time() - ($st * 86400)) : 0;		$sql_sort = $sort_by_sql[$sk] . ' ' . (($sd == 'd') ? 'DESC' : 'ASC');		$users = array();		$user_count = 0;		view_warned_users($users, $user_count, $config['topics_per_page'], $start, $sql_where, $sql_sort);		foreach ($users as $row)		{			$template->assign_block_vars('user', array(				'U_NOTES'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $row['user_id']),				'USERNAME_FULL'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']),				'USERNAME'			=> $row['username'],				'USERNAME_COLOUR'	=> ($row['user_colour']) ? '#' . $row['user_colour'] : '',				'U_USER'			=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=viewprofile&amp;u=' . $row['user_id']),				'WARNING_TIME'	=> $user->format_date($row['user_last_warning']),				'WARNINGS'		=> $row['user_warnings'],			));		}		$template->assign_vars(array(			'U_POST_ACTION'			=> $this->u_action,			'S_CLEAR_ALLOWED'		=> ($auth->acl_get('a_clearlogs')) ? true : false,			'S_SELECT_SORT_DIR'		=> $s_sort_dir,			'S_SELECT_SORT_KEY'		=> $s_sort_key,			'S_SELECT_SORT_DAYS'	=> $s_limit_days,			'PAGE_NUMBER'		=> on_page($user_count, $config['topics_per_page'], $start),			'PAGINATION'		=> generate_pagination(append_sid("{$phpbb_root_path}mcp.$phpEx", "i=warn&amp;mode=list&amp;st=$st&amp;sk=$sk&amp;sd=$sd"), $user_count, $config['topics_per_page'], $start),			'TOTAL_USERS'		=> ($user_count == 1) ? $user->lang['LIST_USER'] : sprintf($user->lang['LIST_USERS'], $user_count),		));	}	/**	* Handles warning the user when the warning is for a specific post	*/	function mcp_warn_post_view($action)	{		global $phpEx, $phpbb_root_path, $config;		global $template, $db, $user, $auth;		$post_id = request_var('p', 0);		$forum_id = request_var('f', 0);		$notify = (isset($_REQUEST['notify_user'])) ? true : false;		$warning = utf8_normalize_nfc(request_var('warning', '', true));		$sql = 'SELECT u.*, p.*			FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . " u			WHERE p.post_id = $post_id				AND u.user_id = p.poster_id";		$result = $db->sql_query($sql);		$user_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$user_row)		{			trigger_error('NO_POST');		}		// There is no point issuing a warning to ignored users (ie anonymous and bots)		if ($user_row['user_type'] == USER_IGNORE)		{			trigger_error('CANNOT_WARN_ANONYMOUS');		}		// Prevent someone from warning themselves		if ($user_row['user_id'] == $user->data['user_id'])		{			trigger_error('CANNOT_WARN_SELF');		}		// Check if there is already a warning for this post to prevent multiple		// warnings for the same offence		$sql = 'SELECT post_id			FROM ' . WARNINGS_TABLE . "			WHERE post_id = $post_id";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			trigger_error('ALREADY_WARNED');		}		$user_id = $user_row['user_id'];		if (strpos($this->u_action, "&amp;f=$forum_id&amp;p=$post_id") === false)		{			$this->p_master->adjust_url("&amp;f=$forum_id&amp;p=$post_id");			$this->u_action .= "&amp;f=$forum_id&amp;p=$post_id";		}		// Check if can send a notification		if ($config['allow_privmsg'])		{			$auth2 = new auth();			$auth2->acl($user_row);			$s_can_notify = ($auth2->acl_get('u_readpm')) ? true : false;			unset($auth2);		}		else		{			$s_can_notify = false;		}		// Prevent against clever people		if ($notify && !$s_can_notify)		{			$notify = false;		}		if ($warning && $action == 'add_warning')		{			if (check_form_key('mcp_warn'))			{				add_warning($user_row, $warning, $notify, $post_id);				$msg = $user->lang['USER_WARNING_ADDED'];			}			else			{				$msg = $user->lang['FORM_INVALID'];			}			$redirect = append_sid("{$phpbb_root_path}mcp.$phpEx", "i=notes&amp;mode=user_notes&amp;u=$user_id");			meta_refresh(2, $redirect);			trigger_error($msg . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $redirect . '">', '</a>'));		}		// OK, they didn't submit a warning so lets build the page for them to do so		// We want to make the message available here as a reminder		// Parse the message and subject		$message = censor_text($user_row['post_text']);		// Second parse bbcode here		if ($user_row['bbcode_bitfield'])		{			include_once($phpbb_root_path . 'includes/bbcode.' . $phpEx);			$bbcode = new bbcode($user_row['bbcode_bitfield']);			$bbcode->bbcode_second_pass($message, $user_row['bbcode_uid'], $user_row['bbcode_bitfield']);		}		$message = bbcode_nl2br($message);		$message = smiley_text($message);		// Generate the appropriate user information for the user we are looking at		if (!function_exists('get_user_avatar'))		{			include($phpbb_root_path . 'includes/functions_display.' . $phpEx);		}		$rank_title = $rank_img = '';		$avatar_img = get_user_avatar($user_row['user_avatar'], $user_row['user_avatar_type'], $user_row['user_avatar_width'], $user_row['user_avatar_height']);		$template->assign_vars(array(			'U_POST_ACTION'		=> $this->u_action,			'POST'				=> $message,			'USERNAME'			=> $user_row['username'],			'USER_COLOR'		=> (!empty($user_row['user_colour'])) ? $user_row['user_colour'] : '',			'RANK_TITLE'		=> $rank_title,			'JOINED'			=> $user->format_date($user_row['user_regdate']),			'POSTS'				=> ($user_row['user_posts']) ? $user_row['user_posts'] : 0,			'WARNINGS'			=> ($user_row['user_warnings']) ? $user_row['user_warnings'] : 0,			'AVATAR_IMG'		=> $avatar_img,			'RANK_IMG'			=> $rank_img,			'L_WARNING_POST_DEFAULT'	=> sprintf($user->lang['WARNING_POST_DEFAULT'], generate_board_url() . "/viewtopic.$phpEx?f=$forum_id&amp;p=$post_id#p$post_id"),			'S_CAN_NOTIFY'		=> $s_can_notify,		));	}	/**	* Handles warning the user	*/	function mcp_warn_user_view($action)	{		global $phpEx, $phpbb_root_path, $config, $module;		global $template, $db, $user, $auth;		$user_id = request_var('u', 0);		$username = request_var('username', '', true);		$notify = (isset($_REQUEST['notify_user'])) ? true : false;		$warning = utf8_normalize_nfc(request_var('warning', '', true));		$sql_where = ($user_id) ? "user_id = $user_id" : "username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";		$sql = 'SELECT *			FROM ' . USERS_TABLE . '			WHERE ' . $sql_where;		$result = $db->sql_query($sql);		$user_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$user_row)		{			trigger_error('NO_USER');		}		// Prevent someone from warning themselves		if ($user_row['user_id'] == $user->data['user_id'])		{			trigger_error('CANNOT_WARN_SELF');		}		$user_id = $user_row['user_id'];		if (strpos($this->u_action, "&amp;u=$user_id") === false)		{			$this->p_master->adjust_url('&amp;u=' . $user_id);			$this->u_action .= "&amp;u=$user_id";		}		// Check if can send a notification		if ($config['allow_privmsg'])		{			$auth2 = new auth();			$auth2->acl($user_row);			$s_can_notify = ($auth2->acl_get('u_readpm')) ? true : false;			unset($auth2);		}		else		{			$s_can_notify = false;		}		// Prevent against clever people		if ($notify && !$s_can_notify)		{			$notify = false;		}		if ($warning && $action == 'add_warning')		{			if (check_form_key('mcp_warn'))			{				add_warning($user_row, $warning, $notify);				$msg = $user->lang['USER_WARNING_ADDED'];			}			else			{				$msg = $user->lang['FORM_INVALID'];			}			$redirect = append_sid("{$phpbb_root_path}mcp.$phpEx", "i=notes&amp;mode=user_notes&amp;u=$user_id");			meta_refresh(2, $redirect);			trigger_error($msg . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $redirect . '">', '</a>'));		}		// Generate the appropriate user information for the user we are looking at		if (!function_exists('get_user_avatar'))		{			include($phpbb_root_path . 'includes/functions_display.' . $phpEx);		}		$rank_title = $rank_img = '';		$avatar_img = get_user_avatar($user_row['user_avatar'], $user_row['user_avatar_type'], $user_row['user_avatar_width'], $user_row['user_avatar_height']);		// OK, they didn't submit a warning so lets build the page for them to do so		$template->assign_vars(array(			'U_POST_ACTION'		=> $this->u_action,			'RANK_TITLE'		=> $rank_title,			'JOINED'			=> $user->format_date($user_row['user_regdate']),			'POSTS'				=> ($user_row['user_posts']) ? $user_row['user_posts'] : 0,			'WARNINGS'			=> ($user_row['user_warnings']) ? $user_row['user_warnings'] : 0,			'USERNAME_FULL'		=> get_username_string('full', $user_row['user_id'], $user_row['username'], $user_row['user_colour']),			'USERNAME_COLOUR'	=> get_username_string('colour', $user_row['user_id'], $user_row['username'], $user_row['user_colour']),			'USERNAME'			=> get_username_string('username', $user_row['user_id'], $user_row['username'], $user_row['user_colour']),			'U_PROFILE'			=> get_username_string('profile', $user_row['user_id'], $user_row['username'], $user_row['user_colour']),			'AVATAR_IMG'		=> $avatar_img,			'RANK_IMG'			=> $rank_img,			'S_CAN_NOTIFY'		=> $s_can_notify,		));		return $user_id;	}}/*** Insert the warning into the database*/function add_warning($user_row, $warning, $send_pm = true, $post_id = 0){	global $phpEx, $phpbb_root_path, $config;	global $template, $db, $user, $auth;	if ($send_pm)	{		include_once($phpbb_root_path . 'includes/functions_privmsgs.' . $phpEx);		include_once($phpbb_root_path . 'includes/message_parser.' . $phpEx);		$user_row['user_lang'] = (file_exists($phpbb_root_path . 'language/' . $user_row['user_lang'] . "/mcp.$phpEx")) ? $user_row['user_lang'] : $config['default_lang'];		include($phpbb_root_path . 'language/' . basename($user_row['user_lang']) . "/mcp.$phpEx");		$message_parser = new parse_message();		$message_parser->message = sprintf($lang['WARNING_PM_BODY'], $warning);		$message_parser->parse(true, true, true, false, false, true, true);		$pm_data = array(			'from_user_id'			=> $user->data['user_id'],			'from_user_ip'			=> $user->ip,			'from_username'			=> $user->data['username'],			'enable_sig'			=> false,			'enable_bbcode'			=> true,			'enable_smilies'		=> true,			'enable_urls'			=> false,			'icon_id'				=> 0,			'bbcode_bitfield'		=> $message_parser->bbcode_bitfield,			'bbcode_uid'			=> $message_parser->bbcode_uid,			'message'				=> $message_parser->message,			'address_list'			=> array('u' => array($user_row['user_id'] => 'to')),		);		submit_pm('post', $lang['WARNING_PM_SUBJECT'], $pm_data, false);	}	add_log('admin', 'LOG_USER_WARNING', $user_row['username']);	$log_id = add_log('user', $user_row['user_id'], 'LOG_USER_WARNING_BODY', $warning);	$sql_ary = array(		'user_id'		=> $user_row['user_id'],		'post_id'		=> $post_id,		'log_id'		=> $log_id,		'warning_time'	=> time(),	);	$db->sql_query('INSERT INTO ' . WARNINGS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));	$sql = 'UPDATE ' . USERS_TABLE . '		SET user_warnings = user_warnings + 1,			user_last_warning = ' . time() . '		WHERE user_id = ' . $user_row['user_id'];	$db->sql_query($sql);	// We add this to the mod log too for moderators to see that a specific user got warned.	$sql = 'SELECT forum_id, topic_id		FROM ' . POSTS_TABLE . '		WHERE post_id = ' . $post_id;	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	add_log('mod', $row['forum_id'], $row['topic_id'], 'LOG_USER_WARNING', $user_row['username']);}?>
<?php/**** @package install* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/if (!defined('IN_INSTALL')){	// Someone has tried to access the file direct. This is not a good idea, so exit	exit;}if (!empty($setmodules)){	// If phpBB is already installed we do not include this module	if (@file_exists($phpbb_root_path . 'config.' . $phpEx) && !file_exists($phpbb_root_path . 'cache/install_lock'))	{		include_once($phpbb_root_path . 'config.' . $phpEx);		if (defined('PHPBB_INSTALLED'))		{			return;		}	}	$module[] = array(		'module_type'		=> 'install',		'module_title'		=> 'INSTALL',		'module_filename'	=> substr(basename(__FILE__), 0, -strlen($phpEx)-1),		'module_order'		=> 10,		'module_subs'		=> '',		'module_stages'		=> array('INTRO', 'REQUIREMENTS', 'DATABASE', 'ADMINISTRATOR', 'CONFIG_FILE', 'ADVANCED', 'CREATE_TABLE', 'FINAL'),		'module_reqs'		=> ''	);}/*** Installation* @package install*/class install_install extends module{	function install_install(&$p_master)	{		$this->p_master = &$p_master;	}	function main($mode, $sub)	{		global $lang, $template, $language, $phpbb_root_path;		switch ($sub)		{			case 'intro':				$this->page_title = $lang['SUB_INTRO'];				$template->assign_vars(array(					'TITLE'			=> $lang['INSTALL_INTRO'],					'BODY'			=> $lang['INSTALL_INTRO_BODY'],					'L_SUBMIT'		=> $lang['NEXT_STEP'],					'S_LANG_SELECT'	=> '<select id="language" name="language">' . $this->p_master->inst_language_select($language) . '</select>',					'U_ACTION'		=> $this->p_master->module_url . "?mode=$mode&amp;sub=requirements&amp;language=$language",				));			break;			case 'requirements':				$this->check_server_requirements($mode, $sub);			break;			case 'database':				$this->obtain_database_settings($mode, $sub);			break;			case 'administrator':				$this->obtain_admin_settings($mode, $sub);			break;			case 'config_file':				$this->create_config_file($mode, $sub);			break;			case 'advanced':				$this->obtain_advanced_settings($mode, $sub);			break;			case 'create_table':				$this->load_schema($mode, $sub);			break;			case 'final':				$this->build_search_index($mode, $sub);				$this->add_modules($mode, $sub);				$this->add_language($mode, $sub);				$this->add_bots($mode, $sub);				$this->email_admin($mode, $sub);				// Remove the lock file				@unlink($phpbb_root_path . 'cache/install_lock');			break;		}		$this->tpl_name = 'install_install';	}	/**	* Checks that the server we are installing on meets the requirements for running phpBB	*/	function check_server_requirements($mode, $sub)	{		global $lang, $template, $phpbb_root_path, $phpEx, $language;		$this->page_title = $lang['STAGE_REQUIREMENTS'];		$template->assign_vars(array(			'TITLE'		=> $lang['REQUIREMENTS_TITLE'],			'BODY'		=> $lang['REQUIREMENTS_EXPLAIN'],		));		$passed = array('php' => false, 'db' => false, 'files' => false, 'pcre' => false, 'imagesize' => false,);		// Test for basic PHP settings		$template->assign_block_vars('checks', array(			'S_LEGEND'			=> true,			'LEGEND'			=> $lang['PHP_SETTINGS'],			'LEGEND_EXPLAIN'	=> $lang['PHP_SETTINGS_EXPLAIN'],		));		// Test the minimum PHP version		$php_version = PHP_VERSION;		if (version_compare($php_version, '4.3.3') < 0)		{			$result = '<strong style="color:red">' . $lang['NO'] . '</strong>';		}		else		{			$passed['php'] = true;			// We also give feedback on whether we're running in safe mode			$result = '<strong style="color:green">' . $lang['YES'];			if (@ini_get('safe_mode') == '1' || strtolower(@ini_get('safe_mode')) == 'on')			{				$result .= ', ' . $lang['PHP_SAFE_MODE'];			}			$result .= '</strong>';		}		$template->assign_block_vars('checks', array(			'TITLE'			=> $lang['PHP_VERSION_REQD'],			'RESULT'		=> $result,			'S_EXPLAIN'		=> false,			'S_LEGEND'		=> false,		));		// Check for register_globals being enabled		if (@ini_get('register_globals') == '1' || strtolower(@ini_get('register_globals')) == 'on')		{			$result = '<strong style="color:red">' . $lang['NO'] . '</strong>';		}		else		{			$result = '<strong style="color:green">' . $lang['YES'] . '</strong>';		}		$template->assign_block_vars('checks', array(			'TITLE'			=> $lang['PHP_REGISTER_GLOBALS'],			'TITLE_EXPLAIN'	=> $lang['PHP_REGISTER_GLOBALS_EXPLAIN'],			'RESULT'		=> $result,			'S_EXPLAIN'		=> true,			'S_LEGEND'		=> false,		));		// Check for url_fopen		if (@ini_get('allow_url_fopen') == '1' || strtolower(@ini_get('allow_url_fopen')) == 'on')		{			$result = '<strong style="color:green">' . $lang['YES'] . '</strong>';		}		else		{			$result = '<strong style="color:red">' . $lang['NO'] . '</strong>';		}		$template->assign_block_vars('checks', array(			'TITLE'			=> $lang['PHP_URL_FOPEN_SUPPORT'],			'TITLE_EXPLAIN'	=> $lang['PHP_URL_FOPEN_SUPPORT_EXPLAIN'],			'RESULT'		=> $result,			'S_EXPLAIN'		=> true,			'S_LEGEND'		=> false,		));		// Check for getimagesize		if (@function_exists('getimagesize'))		{			$passed['imagesize'] = true;			$result = '<strong style="color:green">' . $lang['YES'] . '</strong>';		}		else		{			$result = '<strong style="color:red">' . $lang['NO'] . '</strong>';		}		$template->assign_block_vars('checks', array(			'TITLE'			=> $lang['PHP_GETIMAGESIZE_SUPPORT'],			'TITLE_EXPLAIN'	=> $lang['PHP_GETIMAGESIZE_SUPPORT_EXPLAIN'],			'RESULT'		=> $result,			'S_EXPLAIN'		=> true,			'S_LEGEND'		=> false,		));		// Check for PCRE UTF-8 support		if (@preg_match('//u', ''))		{			$passed['pcre'] = true;			$result = '<strong style="color:green">' . $lang['YES'] . '</strong>';		}		else		{			$result = '<strong style="color:red">' . $lang['NO'] . '</strong>';		}		$template->assign_block_vars('checks', array(			'TITLE'			=> $lang['PCRE_UTF_SUPPORT'],			'TITLE_EXPLAIN'	=> $lang['PCRE_UTF_SUPPORT_EXPLAIN'],			'RESULT'		=> $result,			'S_EXPLAIN'		=> true,			'S_LEGEND'		=> false,		));/***		Better not enabling and adding to the loaded extensions due to the specific requirements needed		if (!@extension_loaded('mbstring'))		{			can_load_dll('mbstring');		}*/		$passed['mbstring'] = true;		if (@extension_loaded('mbstring'))		{			// Test for available database modules			$template->assign_block_vars('checks', array(				'S_LEGEND'			=> true,				'LEGEND'			=> $lang['MBSTRING_CHECK'],				'LEGEND_EXPLAIN'	=> $lang['MBSTRING_CHECK_EXPLAIN'],			));			$checks = array(				array('func_overload', '&', MB_OVERLOAD_MAIL|MB_OVERLOAD_STRING),				array('encoding_translation', '!=', 0),				array('http_input', '!=', 'pass'),				array('http_output', '!=', 'pass')			);			foreach ($checks as $mb_checks)			{				$ini_val = @ini_get('mbstring.' . $mb_checks[0]);				switch ($mb_checks[1])				{					case '&':						if (intval($ini_val) & $mb_checks[2])						{							$result = '<strong style="color:red">' . $lang['NO'] . '</strong>';							$passed['mbstring'] = false;						}						else						{							$result = '<strong style="color:green">' . $lang['YES'] . '</strong>';						}					break;					case '!=':						if ($ini_val != $mb_checks[2])						{							$result = '<strong style="color:red">' . $lang['NO'] . '</strong>';							$passed['mbstring'] = false;						}						else						{							$result = '<strong style="color:green">' . $lang['YES'] . '</strong>';						}					break;				}				$template->assign_block_vars('checks', array(					'TITLE'			=> $lang['MBSTRING_' . strtoupper($mb_checks[0])],					'TITLE_EXPLAIN'	=> $lang['MBSTRING_' . strtoupper($mb_checks[0]) . '_EXPLAIN'],					'RESULT'		=> $result,					'S_EXPLAIN'		=> true,					'S_LEGEND'		=> false,				));			}		}		// Test for available database modules		$template->assign_block_vars('checks', array(			'S_LEGEND'			=> true,			'LEGEND'			=> $lang['PHP_SUPPORTED_DB'],			'LEGEND_EXPLAIN'	=> $lang['PHP_SUPPORTED_DB_EXPLAIN'],		));		$available_dbms = get_available_dbms(false, true);		$passed['db'] = $available_dbms['ANY_DB_SUPPORT'];		unset($available_dbms['ANY_DB_SUPPORT']);		foreach ($available_dbms as $db_name => $db_ary)		{			if (!$db_ary['AVAILABLE'])			{				$template->assign_block_vars('checks', array(					'TITLE'		=> $lang['DLL_' . strtoupper($db_name)],					'RESULT'	=> '<span style="color:red">' . $lang['UNAVAILABLE'] . '</span>',					'S_EXPLAIN'	=> false,					'S_LEGEND'	=> false,				));			}			else			{				$template->assign_block_vars('checks', array(					'TITLE'		=> $lang['DLL_' . strtoupper($db_name)],					'RESULT'	=> '<strong style="color:green">' . $lang['AVAILABLE'] . '</strong>',					'S_EXPLAIN'	=> false,					'S_LEGEND'	=> false,				));			}		}		// Test for other modules		$template->assign_block_vars('checks', array(			'S_LEGEND'			=> true,			'LEGEND'			=> $lang['PHP_OPTIONAL_MODULE'],			'LEGEND_EXPLAIN'	=> $lang['PHP_OPTIONAL_MODULE_EXPLAIN'],		));		foreach ($this->php_dlls_other as $dll)		{			if (!@extension_loaded($dll))			{				if (!can_load_dll($dll))				{					$template->assign_block_vars('checks', array(						'TITLE'		=> $lang['DLL_' . strtoupper($dll)],						'RESULT'	=> '<strong style="color:red">' . $lang['UNAVAILABLE'] . '</strong>',						'S_EXPLAIN'	=> false,						'S_LEGEND'	=> false,					));					continue;				}			}			$template->assign_block_vars('checks', array(				'TITLE'		=> $lang['DLL_' . strtoupper($dll)],				'RESULT'	=> '<strong style="color:green">' . $lang['AVAILABLE'] . '</strong>',				'S_EXPLAIN'	=> false,				'S_LEGEND'	=> false,			));		}		// Can we find Imagemagick anywhere on the system?		$exe = (DIRECTORY_SEPARATOR == '\\') ? '.exe' : '';		$magic_home = getenv('MAGICK_HOME');		$img_imagick = '';		if (empty($magic_home))		{			$locations = array('C:/WINDOWS/', 'C:/WINNT/', 'C:/WINDOWS/SYSTEM/', 'C:/WINNT/SYSTEM/', 'C:/WINDOWS/SYSTEM32/', 'C:/WINNT/SYSTEM32/', '/usr/bin/', '/usr/sbin/', '/usr/local/bin/', '/usr/local/sbin/', '/opt/', '/usr/imagemagick/', '/usr/bin/imagemagick/');			$path_locations = str_replace('\\', '/', (explode(($exe) ? ';' : ':', getenv('PATH'))));			$locations = array_merge($path_locations, $locations);			foreach ($locations as $location)			{				// The path might not end properly, fudge it				if (substr($location, -1, 1) !== '/')				{					$location .= '/';				}				if (@file_exists($location) && @is_readable($location . 'mogrify' . $exe) && @filesize($location . 'mogrify' . $exe) > 3000)				{					$img_imagick = str_replace('\\', '/', $location);					continue;				}			}		}		else		{			$img_imagick = str_replace('\\', '/', $magic_home);		}		$template->assign_block_vars('checks', array(			'TITLE'		=> $lang['APP_MAGICK'],			'RESULT'	=> ($img_imagick) ? '<strong style="color:green">' . $lang['AVAILABLE'] . ', ' . $img_imagick . '</strong>' : '<strong style="color:blue">' . $lang['NO_LOCATION'] . '</strong>',			'S_EXPLAIN'	=> false,			'S_LEGEND'	=> false,		));		// Check permissions on files/directories we need access to		$template->assign_block_vars('checks', array(			'S_LEGEND'			=> true,			'LEGEND'			=> $lang['FILES_REQUIRED'],			'LEGEND_EXPLAIN'	=> $lang['FILES_REQUIRED_EXPLAIN'],		));		$directories = array('cache/', 'files/', 'store/');		umask(0);		$passed['files'] = true;		foreach ($directories as $dir)		{			$exists = $write = false;			// Try to create the directory if it does not exist			if (!file_exists($phpbb_root_path . $dir))			{				@mkdir($phpbb_root_path . $dir, 0777);				phpbb_chmod($phpbb_root_path . $dir, CHMOD_READ | CHMOD_WRITE);			}			// Now really check			if (file_exists($phpbb_root_path . $dir) && is_dir($phpbb_root_path . $dir))			{				phpbb_chmod($phpbb_root_path . $dir, CHMOD_READ | CHMOD_WRITE);				$exists = true;			}			// Now check if it is writable by storing a simple file			$fp = @fopen($phpbb_root_path . $dir . 'test_lock', 'wb');			if ($fp !== false)			{				$write = true;			}			@fclose($fp);			@unlink($phpbb_root_path . $dir . 'test_lock');			$passed['files'] = ($exists && $write && $passed['files']) ? true : false;			$exists = ($exists) ? '<strong style="color:green">' . $lang['FOUND'] . '</strong>' : '<strong style="color:red">' . $lang['NOT_FOUND'] . '</strong>';			$write = ($write) ? ', <strong style="color:green">' . $lang['WRITABLE'] . '</strong>' : (($exists) ? ', <strong style="color:red">' . $lang['UNWRITABLE'] . '</strong>' : '');			$template->assign_block_vars('checks', array(				'TITLE'		=> $dir,				'RESULT'	=> $exists . $write,				'S_EXPLAIN'	=> false,				'S_LEGEND'	=> false,			));		}		// Check permissions on files/directories it would be useful access to		$template->assign_block_vars('checks', array(			'S_LEGEND'			=> true,			'LEGEND'			=> $lang['FILES_OPTIONAL'],			'LEGEND_EXPLAIN'	=> $lang['FILES_OPTIONAL_EXPLAIN'],		));		$directories = array('config.' . $phpEx, 'images/avatars/upload/');		foreach ($directories as $dir)		{			$write = $exists = true;			if (file_exists($phpbb_root_path . $dir))			{				if (!phpbb_is_writable($phpbb_root_path . $dir))				{					$write = false;				}			}			else			{				$write = $exists = false;			}			$exists_str = ($exists) ? '<strong style="color:green">' . $lang['FOUND'] . '</strong>' : '<strong style="color:red">' . $lang['NOT_FOUND'] . '</strong>';			$write_str = ($write) ? ', <strong style="color:green">' . $lang['WRITABLE'] . '</strong>' : (($exists) ? ', <strong style="color:red">' . $lang['UNWRITABLE'] . '</strong>' : '');			$template->assign_block_vars('checks', array(				'TITLE'		=> $dir,				'RESULT'	=> $exists_str . $write_str,				'S_EXPLAIN'	=> false,				'S_LEGEND'	=> false,			));		}		// And finally where do we want to go next (well today is taken isn't it :P)		$s_hidden_fields = ($img_imagick) ? '<input type="hidden" name="img_imagick" value="' . addslashes($img_imagick) . '" />' : '';		$url = (!in_array(false, $passed)) ? $this->p_master->module_url . "?mode=$mode&amp;sub=database&amp;language=$language" : $this->p_master->module_url . "?mode=$mode&amp;sub=requirements&amp;language=$language	";		$submit = (!in_array(false, $passed)) ? $lang['INSTALL_START'] : $lang['INSTALL_TEST'];		$template->assign_vars(array(			'L_SUBMIT'	=> $submit,			'S_HIDDEN'	=> $s_hidden_fields,			'U_ACTION'	=> $url,		));	}	/**	* Obtain the information required to connect to the database	*/	function obtain_database_settings($mode, $sub)	{		global $lang, $template, $phpEx;		$this->page_title = $lang['STAGE_DATABASE'];		// Obtain any submitted data		$data = $this->get_submitted_data();		$connect_test = false;		$error = array();		$available_dbms = get_available_dbms(false, true);		// Has the user opted to test the connection?		if (isset($_POST['testdb']))		{			if (!isset($available_dbms[$data['dbms']]) || !$available_dbms[$data['dbms']]['AVAILABLE'])			{				$error[] = $lang['INST_ERR_NO_DB'];				$connect_test = false;			}			else if (!preg_match(get_preg_expression('table_prefix'), $data['table_prefix']))			{				$error[] = $lang['INST_ERR_DB_INVALID_PREFIX'];				$connect_test = false;			}			else			{				$connect_test = connect_check_db(true, $error, $available_dbms[$data['dbms']], $data['table_prefix'], $data['dbhost'], $data['dbuser'], htmlspecialchars_decode($data['dbpasswd']), $data['dbname'], $data['dbport']);			}			$template->assign_block_vars('checks', array(				'S_LEGEND'			=> true,				'LEGEND'			=> $lang['DB_CONNECTION'],				'LEGEND_EXPLAIN'	=> false,			));			if ($connect_test)			{				$template->assign_block_vars('checks', array(					'TITLE'		=> $lang['DB_TEST'],					'RESULT'	=> '<strong style="color:green">' . $lang['SUCCESSFUL_CONNECT'] . '</strong>',					'S_EXPLAIN'	=> false,					'S_LEGEND'	=> false,				));			}			else			{				$template->assign_block_vars('checks', array(					'TITLE'		=> $lang['DB_TEST'],					'RESULT'	=> '<strong style="color:red">' . implode('<br />', $error) . '</strong>',					'S_EXPLAIN'	=> false,					'S_LEGEND'	=> false,				));			}		}		if (!$connect_test)		{			// Update the list of available DBMS modules to only contain those which can be used			$available_dbms_temp = array();			foreach ($available_dbms as $type => $dbms_ary)			{				if (!$dbms_ary['AVAILABLE'])				{					continue;				}				$available_dbms_temp[$type] = $dbms_ary;			}			$available_dbms = &$available_dbms_temp;			// And now for the main part of this page			$data['table_prefix'] = (!empty($data['table_prefix']) ? $data['table_prefix'] : 'phpbb_');			foreach ($this->db_config_options as $config_key => $vars)			{				if (!is_array($vars) && strpos($config_key, 'legend') === false)				{					continue;				}				if (strpos($config_key, 'legend') !== false)				{					$template->assign_block_vars('options', array(						'S_LEGEND'		=> true,						'LEGEND'		=> $lang[$vars])					);					continue;				}				$options = isset($vars['options']) ? $vars['options'] : '';				$template->assign_block_vars('options', array(					'KEY'			=> $config_key,					'TITLE'			=> $lang[$vars['lang']],					'S_EXPLAIN'		=> $vars['explain'],					'S_LEGEND'		=> false,					'TITLE_EXPLAIN'	=> ($vars['explain']) ? $lang[$vars['lang'] . '_EXPLAIN'] : '',					'CONTENT'		=> $this->p_master->input_field($config_key, $vars['type'], $data[$config_key], $options),					)				);			}		}		// And finally where do we want to go next (well today is taken isn't it :P)		$s_hidden_fields = ($data['img_imagick']) ? '<input type="hidden" name="img_imagick" value="' . addslashes($data['img_imagick']) . '" />' : '';		$s_hidden_fields .= '<input type="hidden" name="language" value="' . $data['language'] . '" />';		if ($connect_test)		{			foreach ($this->db_config_options as $config_key => $vars)			{				if (!is_array($vars))				{					continue;				}				$s_hidden_fields .= '<input type="hidden" name="' . $config_key . '" value="' . $data[$config_key] . '" />';			}		}		$url = ($connect_test) ? $this->p_master->module_url . "?mode=$mode&amp;sub=administrator" : $this->p_master->module_url . "?mode=$mode&amp;sub=database";		$s_hidden_fields .= ($connect_test) ? '' : '<input type="hidden" name="testdb" value="true" />';		$submit = $lang['NEXT_STEP'];		$template->assign_vars(array(			'L_SUBMIT'	=> $submit,			'S_HIDDEN'	=> $s_hidden_fields,			'U_ACTION'	=> $url,		));	}	/**	* Obtain the administrator's name, password and email address	*/	function obtain_admin_settings($mode, $sub)	{		global $lang, $template, $phpEx;		$this->page_title = $lang['STAGE_ADMINISTRATOR'];		// Obtain any submitted data		$data = $this->get_submitted_data();		if ($data['dbms'] == '')		{			// Someone's been silly and tried calling this page direct			// So we send them back to the start to do it again properly			$this->p_master->redirect("index.$phpEx?mode=install");		}		$s_hidden_fields = ($data['img_imagick']) ? '<input type="hidden" name="img_imagick" value="' . addslashes($data['img_imagick']) . '" />' : '';		$passed = false;		$data['default_lang'] = ($data['default_lang'] !== '') ? $data['default_lang'] : $data['language'];		if (isset($_POST['check']))		{			$error = array();			// Check the entered email address and password			if ($data['admin_name'] == '' || $data['admin_pass1'] == '' || $data['admin_pass2'] == '' || $data['board_email1'] == '' || $data['board_email2'] == '')			{				$error[] = $lang['INST_ERR_MISSING_DATA'];			}			if ($data['admin_pass1'] != $data['admin_pass2'] && $data['admin_pass1'] != '')			{				$error[] = $lang['INST_ERR_PASSWORD_MISMATCH'];			}			// Test against the default username rules			if ($data['admin_name'] != '' && utf8_strlen($data['admin_name']) < 3)			{				$error[] = $lang['INST_ERR_USER_TOO_SHORT'];			}			if ($data['admin_name'] != '' && utf8_strlen($data['admin_name']) > 20)			{				$error[] = $lang['INST_ERR_USER_TOO_LONG'];			}			// Test against the default password rules			if ($data['admin_pass1'] != '' && utf8_strlen($data['admin_pass1']) < 6)			{				$error[] = $lang['INST_ERR_PASSWORD_TOO_SHORT'];			}			if ($data['admin_pass1'] != '' && utf8_strlen($data['admin_pass1']) > 30)			{				$error[] = $lang['INST_ERR_PASSWORD_TOO_LONG'];			}			if ($data['board_email1'] != $data['board_email2'] && $data['board_email1'] != '')			{				$error[] = $lang['INST_ERR_EMAIL_MISMATCH'];			}			if ($data['board_email1'] != '' && !preg_match('/^' . get_preg_expression('email') . '$/i', $data['board_email1']))			{				$error[] = $lang['INST_ERR_EMAIL_INVALID'];			}			$template->assign_block_vars('checks', array(				'S_LEGEND'			=> true,				'LEGEND'			=> $lang['STAGE_ADMINISTRATOR'],				'LEGEND_EXPLAIN'	=> false,			));			if (!sizeof($error))			{				$passed = true;				$template->assign_block_vars('checks', array(					'TITLE'		=> $lang['ADMIN_TEST'],					'RESULT'	=> '<strong style="color:green">' . $lang['TESTS_PASSED'] . '</strong>',					'S_EXPLAIN'	=> false,					'S_LEGEND'	=> false,				));			}			else			{				$template->assign_block_vars('checks', array(					'TITLE'		=> $lang['ADMIN_TEST'],					'RESULT'	=> '<strong style="color:red">' . implode('<br />', $error) . '</strong>',					'S_EXPLAIN'	=> false,					'S_LEGEND'	=> false,				));			}		}		if (!$passed)		{			foreach ($this->admin_config_options as $config_key => $vars)			{				if (!is_array($vars) && strpos($config_key, 'legend') === false)				{					continue;				}				if (strpos($config_key, 'legend') !== false)				{					$template->assign_block_vars('options', array(						'S_LEGEND'		=> true,						'LEGEND'		=> $lang[$vars])					);					continue;				}				$options = isset($vars['options']) ? $vars['options'] : '';				$template->assign_block_vars('options', array(					'KEY'			=> $config_key,					'TITLE'			=> $lang[$vars['lang']],					'S_EXPLAIN'		=> $vars['explain'],					'S_LEGEND'		=> false,					'TITLE_EXPLAIN'	=> ($vars['explain']) ? $lang[$vars['lang'] . '_EXPLAIN'] : '',					'CONTENT'		=> $this->p_master->input_field($config_key, $vars['type'], $data[$config_key], $options),					)				);			}		}		else		{			foreach ($this->admin_config_options as $config_key => $vars)			{				if (!is_array($vars))				{					continue;				}				$s_hidden_fields .= '<input type="hidden" name="' . $config_key . '" value="' . $data[$config_key] . '" />';			}		}		$s_hidden_fields .= ($data['img_imagick']) ? '<input type="hidden" name="img_imagick" value="' . addslashes($data['img_imagick']) . '" />' : '';		$s_hidden_fields .= '<input type="hidden" name="language" value="' . $data['language'] . '" />';		foreach ($this->db_config_options as $config_key => $vars)		{			if (!is_array($vars))			{				continue;			}			$s_hidden_fields .= '<input type="hidden" name="' . $config_key . '" value="' . $data[$config_key] . '" />';		}		$submit = $lang['NEXT_STEP'];		$url = ($passed) ? $this->p_master->module_url . "?mode=$mode&amp;sub=config_file" : $this->p_master->module_url . "?mode=$mode&amp;sub=administrator";		$s_hidden_fields .= ($passed) ? '' : '<input type="hidden" name="check" value="true" />';		$template->assign_vars(array(			'L_SUBMIT'	=> $submit,			'S_HIDDEN'	=> $s_hidden_fields,			'U_ACTION'	=> $url,		));	}	/**	* Writes the config file to disk, or if unable to do so offers alternative methods	*/	function create_config_file($mode, $sub)	{		global $lang, $template, $phpbb_root_path, $phpEx;		$this->page_title = $lang['STAGE_CONFIG_FILE'];		// Obtain any submitted data		$data = $this->get_submitted_data();		if ($data['dbms'] == '')		{			// Someone's been silly and tried calling this page direct			// So we send them back to the start to do it again properly			$this->p_master->redirect("index.$phpEx?mode=install");		}		$s_hidden_fields = ($data['img_imagick']) ? '<input type="hidden" name="img_imagick" value="' . addslashes($data['img_imagick']) . '" />' : '';		$s_hidden_fields .= '<input type="hidden" name="language" value="' . $data['language'] . '" />';		$written = false;		// Create a list of any PHP modules we wish to have loaded		$load_extensions = array();		$available_dbms = get_available_dbms($data['dbms']);		$check_exts = array_merge(array($available_dbms[$data['dbms']]['MODULE']), $this->php_dlls_other);		foreach ($check_exts as $dll)		{			if (!@extension_loaded($dll))			{				if (!can_load_dll($dll))				{					continue;				}				$load_extensions[] = $dll . '.' . PHP_SHLIB_SUFFIX;			}		}		// Create a lock file to indicate that there is an install in progress		$fp = @fopen($phpbb_root_path . 'cache/install_lock', 'wb');		if ($fp === false)		{			// We were unable to create the lock file - abort			$this->p_master->error($lang['UNABLE_WRITE_LOCK'], __LINE__, __FILE__);		}		@fclose($fp);		@chmod($phpbb_root_path . 'cache/install_lock', 0777);		$load_extensions = implode(',', $load_extensions);		// Time to convert the data provided into a config file		$config_data = "<?php\n";		$config_data .= "// phpBB 3.0.x auto-generated configuration file\n// Do not change anything in this file!\n";		$config_data_array = array(			'dbms'			=> $available_dbms[$data['dbms']]['DRIVER'],			'dbhost'		=> $data['dbhost'],			'dbport'		=> $data['dbport'],			'dbname'		=> $data['dbname'],			'dbuser'		=> $data['dbuser'],			'dbpasswd'		=> htmlspecialchars_decode($data['dbpasswd']),			'table_prefix'	=> $data['table_prefix'],			'acm_type'		=> 'file',			'load_extensions'	=> $load_extensions,		);		foreach ($config_data_array as $key => $value)		{			$config_data .= "\${$key} = '" . str_replace("'", "\\'", str_replace('\\', '\\\\', $value)) . "';\n";		}		unset($config_data_array);		$config_data .= "\n@define('PHPBB_INSTALLED', true);\n";		$config_data .= "// @define('DEBUG', true);\n";		$config_data .= "// @define('DEBUG_EXTRA', true);\n";		$config_data .= '?' . '>'; // Done this to prevent highlighting editors getting confused!		// Attempt to write out the config file directly. If it works, this is the easiest way to do it ...		if ((file_exists($phpbb_root_path . 'config.' . $phpEx) && phpbb_is_writable($phpbb_root_path . 'config.' . $phpEx)) || phpbb_is_writable($phpbb_root_path))		{			// Assume it will work ... if nothing goes wrong below			$written = true;			if (!($fp = @fopen($phpbb_root_path . 'config.' . $phpEx, 'w')))			{				// Something went wrong ... so let's try another method				$written = false;			}			if (!(@fwrite($fp, $config_data)))			{				// Something went wrong ... so let's try another method				$written = false;			}			@fclose($fp);			if ($written)			{				// We may revert back to chmod() if we see problems with users not able to change their config.php file directly				phpbb_chmod($phpbb_root_path . 'config.' . $phpEx, CHMOD_READ);			}		}		if (isset($_POST['dldone']))		{			// Do a basic check to make sure that the file has been uploaded			// Note that all we check is that the file has _something_ in it			// We don't compare the contents exactly - if they can't upload			// a single file correctly, it's likely they will have other problems....			if (filesize($phpbb_root_path . 'config.' . $phpEx) > 10)			{				$written = true;			}		}		$config_options = array_merge($this->db_config_options, $this->admin_config_options);		foreach ($config_options as $config_key => $vars)		{			if (!is_array($vars))			{				continue;			}			$s_hidden_fields .= '<input type="hidden" name="' . $config_key . '" value="' . $data[$config_key] . '" />';		}		if (!$written)		{			// OK, so it didn't work let's try the alternatives			if (isset($_POST['dlconfig']))			{				// They want a copy of the file to download, so send the relevant headers and dump out the data				header("Content-Type: text/x-delimtext; name=\"config.$phpEx\"");				header("Content-disposition: attachment; filename=config.$phpEx");				echo $config_data;				exit;			}			// The option to download the config file is always available, so output it here			$template->assign_vars(array(				'BODY'					=> $lang['CONFIG_FILE_UNABLE_WRITE'],				'L_DL_CONFIG'			=> $lang['DL_CONFIG'],				'L_DL_CONFIG_EXPLAIN'	=> $lang['DL_CONFIG_EXPLAIN'],				'L_DL_DONE'				=> $lang['DONE'],				'L_DL_DOWNLOAD'			=> $lang['DL_DOWNLOAD'],				'S_HIDDEN'				=> $s_hidden_fields,				'S_SHOW_DOWNLOAD'		=> true,				'U_ACTION'				=> $this->p_master->module_url . "?mode=$mode&amp;sub=config_file",			));			return;		}		else		{			$template->assign_vars(array(				'BODY'		=> $lang['CONFIG_FILE_WRITTEN'],				'L_SUBMIT'	=> $lang['NEXT_STEP'],				'S_HIDDEN'	=> $s_hidden_fields,				'U_ACTION'	=> $this->p_master->module_url . "?mode=$mode&amp;sub=advanced",			));			return;		}	}	/**	* Provide an opportunity to customise some advanced settings during the install	* in case it is necessary for them to be set to access later	*/	function obtain_advanced_settings($mode, $sub)	{		global $lang, $template, $phpEx;		$this->page_title = $lang['STAGE_ADVANCED'];		// Obtain any submitted data		$data = $this->get_submitted_data();		if ($data['dbms'] == '')		{			// Someone's been silly and tried calling this page direct			// So we send them back to the start to do it again properly			$this->p_master->redirect("index.$phpEx?mode=install");		}		$s_hidden_fields = ($data['img_imagick']) ? '<input type="hidden" name="img_imagick" value="' . addslashes($data['img_imagick']) . '" />' : '';		$s_hidden_fields .= '<input type="hidden" name="language" value="' . $data['language'] . '" />';		// HTTP_HOST is having the correct browser url in most cases...		$server_name = (!empty($_SERVER['HTTP_HOST'])) ? strtolower($_SERVER['HTTP_HOST']) : ((!empty($_SERVER['SERVER_NAME'])) ? $_SERVER['SERVER_NAME'] : getenv('SERVER_NAME'));		// HTTP HOST can carry a port number...		if (strpos($server_name, ':') !== false)		{			$server_name = substr($server_name, 0, strpos($server_name, ':'));		}		$data['email_enable'] = ($data['email_enable'] !== '') ? $data['email_enable'] : true;		$data['server_name'] = ($data['server_name'] !== '') ? $data['server_name'] : $server_name;		$data['server_port'] = ($data['server_port'] !== '') ? $data['server_port'] : ((!empty($_SERVER['SERVER_PORT'])) ? (int) $_SERVER['SERVER_PORT'] : (int) getenv('SERVER_PORT'));		$data['server_protocol'] = ($data['server_protocol'] !== '') ? $data['server_protocol'] : ((isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? 'https://' : 'http://');		$data['cookie_secure'] = ($data['cookie_secure'] !== '') ? $data['cookie_secure'] : ((isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? true : false);		if ($data['script_path'] === '')		{			$name = (!empty($_SERVER['PHP_SELF'])) ? $_SERVER['PHP_SELF'] : getenv('PHP_SELF');			if (!$name)			{				$name = (!empty($_SERVER['REQUEST_URI'])) ? $_SERVER['REQUEST_URI'] : getenv('REQUEST_URI');			}			// Replace backslashes and doubled slashes (could happen on some proxy setups)			$name = str_replace(array('\\', '//', '/install'), '/', $name);			$data['script_path'] = trim(dirname($name));		}		foreach ($this->advanced_config_options as $config_key => $vars)		{			if (!is_array($vars) && strpos($config_key, 'legend') === false)			{				continue;			}			if (strpos($config_key, 'legend') !== false)			{				$template->assign_block_vars('options', array(					'S_LEGEND'		=> true,					'LEGEND'		=> $lang[$vars])				);				continue;			}			$options = isset($vars['options']) ? $vars['options'] : '';			$template->assign_block_vars('options', array(				'KEY'			=> $config_key,				'TITLE'			=> $lang[$vars['lang']],				'S_EXPLAIN'		=> $vars['explain'],				'S_LEGEND'		=> false,				'TITLE_EXPLAIN'	=> ($vars['explain']) ? $lang[$vars['lang'] . '_EXPLAIN'] : '',				'CONTENT'		=> $this->p_master->input_field($config_key, $vars['type'], $data[$config_key], $options),				)			);		}		$config_options = array_merge($this->db_config_options, $this->admin_config_options);		foreach ($config_options as $config_key => $vars)		{			if (!is_array($vars))			{				continue;			}			$s_hidden_fields .= '<input type="hidden" name="' . $config_key . '" value="' . $data[$config_key] . '" />';		}		$submit = $lang['NEXT_STEP'];		$url = $this->p_master->module_url . "?mode=$mode&amp;sub=create_table";		$template->assign_vars(array(			'BODY'		=> $lang['STAGE_ADVANCED_EXPLAIN'],			'L_SUBMIT'	=> $submit,			'S_HIDDEN'	=> $s_hidden_fields,			'U_ACTION'	=> $url,		));	}	/**	* Load the contents of the schema into the database and then alter it based on what has been input during the installation	*/	function load_schema($mode, $sub)	{		global $db, $lang, $template, $phpbb_root_path, $phpEx;		$this->page_title = $lang['STAGE_CREATE_TABLE'];		$s_hidden_fields = '';		// Obtain any submitted data		$data = $this->get_submitted_data();		if ($data['dbms'] == '')		{			// Someone's been silly and tried calling this page direct			// So we send them back to the start to do it again properly			$this->p_master->redirect("index.$phpEx?mode=install");		}		// HTTP_HOST is having the correct browser url in most cases...		$server_name = (!empty($_SERVER['HTTP_HOST'])) ? strtolower($_SERVER['HTTP_HOST']) : ((!empty($_SERVER['SERVER_NAME'])) ? $_SERVER['SERVER_NAME'] : getenv('SERVER_NAME'));		$referer = (!empty($_SERVER['HTTP_REFERER'])) ? strtolower($_SERVER['HTTP_REFERER']) : getenv('HTTP_REFERER');		// HTTP HOST can carry a port number...		if (strpos($server_name, ':') !== false)		{			$server_name = substr($server_name, 0, strpos($server_name, ':'));		}		$cookie_domain = ($data['server_name'] != '') ? $data['server_name'] : $server_name;		// Try to come up with the best solution for cookie domain...		if (strpos($cookie_domain, 'www.') === 0)		{			$cookie_domain = str_replace('www.', '.', $cookie_domain);		}		// If we get here and the extension isn't loaded it should be safe to just go ahead and load it		$available_dbms = get_available_dbms($data['dbms']);		if (!isset($available_dbms[$data['dbms']]))		{			// Someone's been silly and tried providing a non-existant dbms			$this->p_master->redirect("index.$phpEx?mode=install");		}		$dbms = $available_dbms[$data['dbms']]['DRIVER'];		// Load the appropriate database class if not already loaded		include($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);		// Instantiate the database		$db = new $sql_db();		$db->sql_connect($data['dbhost'], $data['dbuser'], htmlspecialchars_decode($data['dbpasswd']), $data['dbname'], $data['dbport'], false, false);		// NOTE: trigger_error does not work here.		$db->sql_return_on_error(true);		// If mysql is chosen, we need to adjust the schema filename slightly to reflect the correct version. ;)		if ($data['dbms'] == 'mysql')		{			if (version_compare($db->sql_server_info(true), '4.1.3', '>='))			{				$available_dbms[$data['dbms']]['SCHEMA'] .= '_41';			}			else			{				$available_dbms[$data['dbms']]['SCHEMA'] .= '_40';			}		}		// Ok we have the db info go ahead and read in the relevant schema		// and work on building the table		$dbms_schema = 'schemas/' . $available_dbms[$data['dbms']]['SCHEMA'] . '_schema.sql';		// How should we treat this schema?		$remove_remarks = $available_dbms[$data['dbms']]['COMMENTS'];		$delimiter = $available_dbms[$data['dbms']]['DELIM'];		$sql_query = @file_get_contents($dbms_schema);		$sql_query = preg_replace('#phpbb_#i', $data['table_prefix'], $sql_query);		$remove_remarks($sql_query);		$sql_query = split_sql_file($sql_query, $delimiter);		foreach ($sql_query as $sql)		{			//$sql = trim(str_replace('|', ';', $sql));			if (!$db->sql_query($sql))			{				$error = $db->sql_error();				$this->p_master->db_error($error['message'], $sql, __LINE__, __FILE__);			}		}		unset($sql_query);		// Ok tables have been built, let's fill in the basic information		$sql_query = file_get_contents('schemas/schema_data.sql');		// Deal with any special comments		switch ($data['dbms'])		{			case 'mssql':			case 'mssql_odbc':			case 'mssqlnative':				$sql_query = preg_replace('#\# MSSQL IDENTITY (phpbb_[a-z_]+) (ON|OFF) \##s', 'SET IDENTITY_INSERT \1 \2;', $sql_query);			break;			case 'postgres':				$sql_query = preg_replace('#\# POSTGRES (BEGIN|COMMIT) \##s', '\1; ', $sql_query);			break;		}		// Change prefix		$sql_query = preg_replace('# phpbb_([^\s]*) #i', ' ' . $data['table_prefix'] . '\1 ', $sql_query);		// Change language strings...		$sql_query = preg_replace_callback('#\{L_([A-Z0-9\-_]*)\}#s', 'adjust_language_keys_callback', $sql_query);		// Since there is only one schema file we know the comment style and are able to remove it directly with remove_remarks		remove_remarks($sql_query);		$sql_query = split_sql_file($sql_query, ';');		foreach ($sql_query as $sql)		{			//$sql = trim(str_replace('|', ';', $sql));			if (!$db->sql_query($sql))			{				$error = $db->sql_error();				$this->p_master->db_error($error['message'], $sql, __LINE__, __FILE__);			}		}		unset($sql_query);		$current_time = time();		$user_ip = (!empty($_SERVER['REMOTE_ADDR'])) ? htmlspecialchars($_SERVER['REMOTE_ADDR']) : '';		$user_ip = (stripos($user_ip, '::ffff:') === 0) ? substr($user_ip, 7) : $user_ip;		if ($data['script_path'] !== '/')		{			// Adjust destination path (no trailing slash)			if (substr($data['script_path'], -1) == '/')			{				$data['script_path'] = substr($data['script_path'], 0, -1);			}			$data['script_path'] = str_replace(array('../', './'), '', $data['script_path']);			if ($data['script_path'][0] != '/')			{				$data['script_path'] = '/' . $data['script_path'];			}		}		// Set default config and post data, this applies to all DB's		$sql_ary = array(			'INSERT INTO ' . $data['table_prefix'] . "config (config_name, config_value)				VALUES ('board_startdate', '$current_time')",			'INSERT INTO ' . $data['table_prefix'] . "config (config_name, config_value)				VALUES ('default_lang', '" . $db->sql_escape($data['default_lang']) . "')",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['img_imagick']) . "'				WHERE config_name = 'img_imagick'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['server_name']) . "'				WHERE config_name = 'server_name'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['server_port']) . "'				WHERE config_name = 'server_port'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['board_email1']) . "'				WHERE config_name = 'board_email'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['board_email1']) . "'				WHERE config_name = 'board_contact'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($cookie_domain) . "'				WHERE config_name = 'cookie_domain'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($lang['default_dateformat']) . "'				WHERE config_name = 'default_dateformat'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['email_enable']) . "'				WHERE config_name = 'email_enable'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['smtp_delivery']) . "'				WHERE config_name = 'smtp_delivery'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['smtp_host']) . "'				WHERE config_name = 'smtp_host'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['smtp_auth']) . "'				WHERE config_name = 'smtp_auth_method'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['smtp_user']) . "'				WHERE config_name = 'smtp_username'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['smtp_pass']) . "'				WHERE config_name = 'smtp_password'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['cookie_secure']) . "'				WHERE config_name = 'cookie_secure'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['force_server_vars']) . "'				WHERE config_name = 'force_server_vars'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['script_path']) . "'				WHERE config_name = 'script_path'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['server_protocol']) . "'				WHERE config_name = 'server_protocol'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($data['admin_name']) . "'				WHERE config_name = 'newest_username'",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . md5(mt_rand()) . "'				WHERE config_name = 'avatar_salt'",			'UPDATE ' . $data['table_prefix'] . "users				SET username = '" . $db->sql_escape($data['admin_name']) . "', user_password='" . $db->sql_escape(md5($data['admin_pass1'])) . "', user_ip = '" . $db->sql_escape($user_ip) . "', user_lang = '" . $db->sql_escape($data['default_lang']) . "', user_email='" . $db->sql_escape($data['board_email1']) . "', user_dateformat='" . $db->sql_escape($lang['default_dateformat']) . "', user_email_hash = " . $db->sql_escape(phpbb_email_hash($data['board_email1'])) . ", username_clean = '" . $db->sql_escape(utf8_clean_string($data['admin_name'])) . "'				WHERE username = 'Admin'",			'UPDATE ' . $data['table_prefix'] . "moderator_cache				SET username = '" . $db->sql_escape($data['admin_name']) . "'				WHERE username = 'Admin'",			'UPDATE ' . $data['table_prefix'] . "forums				SET forum_last_poster_name = '" . $db->sql_escape($data['admin_name']) . "'				WHERE forum_last_poster_name = 'Admin'",			'UPDATE ' . $data['table_prefix'] . "topics				SET topic_first_poster_name = '" . $db->sql_escape($data['admin_name']) . "', topic_last_poster_name = '" . $db->sql_escape($data['admin_name']) . "'				WHERE topic_first_poster_name = 'Admin'					OR topic_last_poster_name = 'Admin'",			'UPDATE ' . $data['table_prefix'] . "users				SET user_regdate = $current_time",			'UPDATE ' . $data['table_prefix'] . "posts				SET post_time = $current_time, poster_ip = '" . $db->sql_escape($user_ip) . "'",			'UPDATE ' . $data['table_prefix'] . "topics				SET topic_time = $current_time, topic_last_post_time = $current_time",			'UPDATE ' . $data['table_prefix'] . "forums				SET forum_last_post_time = $current_time",			'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '" . $db->sql_escape($db->sql_server_info(true)) . "'				WHERE config_name = 'dbms_version'",		);		if (@extension_loaded('gd') || can_load_dll('gd'))		{			$sql_ary[] = 'UPDATE ' . $data['table_prefix'] . "config				SET config_value = 'phpbb_captcha_gd'				WHERE config_name = 'captcha_plugin'";			$sql_ary[] = 'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '1'				WHERE config_name = 'captcha_gd'";		}		$ref = substr($referer, strpos($referer, '://') + 3);		if (!(stripos($ref, $server_name) === 0))		{			$sql_ary[] = 'UPDATE ' . $data['table_prefix'] . "config				SET config_value = '0'				WHERE config_name = 'referer_validation'";		}		// We set a (semi-)unique cookie name to bypass login issues related to the cookie name.		$cookie_name = 'phpbb3_';		$rand_str = md5(mt_rand());		$rand_str = str_replace('0', 'z', base_convert($rand_str, 16, 35));		$rand_str = substr($rand_str, 0, 5);		$cookie_name .= strtolower($rand_str);		$sql_ary[] = 'UPDATE ' . $data['table_prefix'] . "config			SET config_value = '" . $db->sql_escape($cookie_name) . "'			WHERE config_name = 'cookie_name'";		foreach ($sql_ary as $sql)		{			//$sql = trim(str_replace('|', ';', $sql));			if (!$db->sql_query($sql))			{				$error = $db->sql_error();				$this->p_master->db_error($error['message'], $sql, __LINE__, __FILE__);			}		}		$submit = $lang['NEXT_STEP'];		$url = $this->p_master->module_url . "?mode=$mode&amp;sub=final";		$template->assign_vars(array(			'BODY'		=> $lang['STAGE_CREATE_TABLE_EXPLAIN'],			'L_SUBMIT'	=> $submit,			'S_HIDDEN'	=> build_hidden_fields($data),			'U_ACTION'	=> $url,		));	}	/**	* Build the search index...	*/	function build_search_index($mode, $sub)	{		global $db, $lang, $phpbb_root_path, $phpEx, $config;		// Obtain any submitted data		$data = $this->get_submitted_data();		$table_prefix = $data['table_prefix'];		// If we get here and the extension isn't loaded it should be safe to just go ahead and load it		$available_dbms = get_available_dbms($data['dbms']);		if (!isset($available_dbms[$data['dbms']]))		{			// Someone's been silly and tried providing a non-existant dbms			$this->p_master->redirect("index.$phpEx?mode=install");		}		$dbms = $available_dbms[$data['dbms']]['DRIVER'];		// Load the appropriate database class if not already loaded		include($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);		// Instantiate the database		$db = new $sql_db();		$db->sql_connect($data['dbhost'], $data['dbuser'], htmlspecialchars_decode($data['dbpasswd']), $data['dbname'], $data['dbport'], false, false);		// NOTE: trigger_error does not work here.		$db->sql_return_on_error(true);		include_once($phpbb_root_path . 'includes/constants.' . $phpEx);		include_once($phpbb_root_path . 'includes/search/fulltext_native.' . $phpEx);		// Fill the config array - it is needed by those functions we call		$sql = 'SELECT *			FROM ' . CONFIG_TABLE;		$result = $db->sql_query($sql);		$config = array();		while ($row = $db->sql_fetchrow($result))		{			$config[$row['config_name']] = $row['config_value'];		}		$db->sql_freeresult($result);		$error = false;		$search = new fulltext_native($error);		$sql = 'SELECT post_id, post_subject, post_text, poster_id, forum_id			FROM ' . POSTS_TABLE;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$search->index('post', $row['post_id'], $row['post_text'], $row['post_subject'], $row['poster_id'], $row['forum_id']);		}		$db->sql_freeresult($result);	}	/**	* Populate the module tables	*/	function add_modules($mode, $sub)	{		global $db, $lang, $phpbb_root_path, $phpEx;		include_once($phpbb_root_path . 'includes/acp/acp_modules.' . $phpEx);		$_module = new acp_modules();		$module_classes = array('acp', 'mcp', 'ucp');		// Add categories		foreach ($module_classes as $module_class)		{			$categories = array();			// Set the module class			$_module->module_class = $module_class;			foreach ($this->module_categories[$module_class] as $cat_name => $subs)			{				$module_data = array(					'module_basename'	=> '',					'module_enabled'	=> 1,					'module_display'	=> 1,					'parent_id'			=> 0,					'module_class'		=> $module_class,					'module_langname'	=> $cat_name,					'module_mode'		=> '',					'module_auth'		=> '',				);				// Add category				$_module->update_module_data($module_data, true);				// Check for last sql error happened				if ($db->sql_error_triggered)				{					$error = $db->sql_error($db->sql_error_sql);					$this->p_master->db_error($error['message'], $db->sql_error_sql, __LINE__, __FILE__);				}				$categories[$cat_name]['id'] = (int) $module_data['module_id'];				$categories[$cat_name]['parent_id'] = 0;				// Create sub-categories...				if (is_array($subs))				{					foreach ($subs as $level2_name)					{						$module_data = array(							'module_basename'	=> '',							'module_enabled'	=> 1,							'module_display'	=> 1,							'parent_id'			=> (int) $categories[$cat_name]['id'],							'module_class'		=> $module_class,							'module_langname'	=> $level2_name,							'module_mode'		=> '',							'module_auth'		=> '',						);						$_module->update_module_data($module_data, true);						// Check for last sql error happened						if ($db->sql_error_triggered)						{							$error = $db->sql_error($db->sql_error_sql);							$this->p_master->db_error($error['message'], $db->sql_error_sql, __LINE__, __FILE__);						}						$categories[$level2_name]['id'] = (int) $module_data['module_id'];						$categories[$level2_name]['parent_id'] = (int) $categories[$cat_name]['id'];					}				}			}			// Get the modules we want to add... returned sorted by name			$module_info = $_module->get_module_infos('', $module_class);			foreach ($module_info as $module_basename => $fileinfo)			{				foreach ($fileinfo['modes'] as $module_mode => $row)				{					foreach ($row['cat'] as $cat_name)					{						if (!isset($categories[$cat_name]))						{							continue;						}						$module_data = array(							'module_basename'	=> $module_basename,							'module_enabled'	=> 1,							'module_display'	=> (isset($row['display'])) ? (int) $row['display'] : 1,							'parent_id'			=> (int) $categories[$cat_name]['id'],							'module_class'		=> $module_class,							'module_langname'	=> $row['title'],							'module_mode'		=> $module_mode,							'module_auth'		=> $row['auth'],						);						$_module->update_module_data($module_data, true);						// Check for last sql error happened						if ($db->sql_error_triggered)						{							$error = $db->sql_error($db->sql_error_sql);							$this->p_master->db_error($error['message'], $db->sql_error_sql, __LINE__, __FILE__);						}					}				}			}			// Move some of the modules around since the code above will put them in the wrong place			if ($module_class == 'acp')			{				// Move main module 4 up...				$sql = 'SELECT *					FROM ' . MODULES_TABLE . "					WHERE module_basename = 'main'						AND module_class = 'acp'						AND module_mode = 'main'";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$_module->move_module_by($row, 'move_up', 4);				// Move permissions intro screen module 4 up...				$sql = 'SELECT *					FROM ' . MODULES_TABLE . "					WHERE module_basename = 'permissions'						AND module_class = 'acp'						AND module_mode = 'intro'";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$_module->move_module_by($row, 'move_up', 4);				// Move manage users screen module 5 up...				$sql = 'SELECT *					FROM ' . MODULES_TABLE . "					WHERE module_basename = 'users'						AND module_class = 'acp'						AND module_mode = 'overview'";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$_module->move_module_by($row, 'move_up', 5);			}			if ($module_class == 'ucp')			{				// Move attachment module 4 down...				$sql = 'SELECT *					FROM ' . MODULES_TABLE . "					WHERE module_basename = 'attachments'						AND module_class = 'ucp'						AND module_mode = 'attachments'";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$_module->move_module_by($row, 'move_down', 4);			}			// And now for the special ones			// (these are modules which appear in multiple categories and thus get added manually to some for more control)			if (isset($this->module_extras[$module_class]))			{				foreach ($this->module_extras[$module_class] as $cat_name => $mods)				{					$sql = 'SELECT module_id, left_id, right_id						FROM ' . MODULES_TABLE . "						WHERE module_langname = '" . $db->sql_escape($cat_name) . "'							AND module_class = '" . $db->sql_escape($module_class) . "'";					$result = $db->sql_query_limit($sql, 1);					$row2 = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					foreach ($mods as $mod_name)					{						$sql = 'SELECT *							FROM ' . MODULES_TABLE . "							WHERE module_langname = '" . $db->sql_escape($mod_name) . "'								AND module_class = '" . $db->sql_escape($module_class) . "'								AND module_basename <> ''";						$result = $db->sql_query_limit($sql, 1);						$row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						$module_data = array(							'module_basename'	=> $row['module_basename'],							'module_enabled'	=> (int) $row['module_enabled'],							'module_display'	=> (int) $row['module_display'],							'parent_id'			=> (int) $row2['module_id'],							'module_class'		=> $row['module_class'],							'module_langname'	=> $row['module_langname'],							'module_mode'		=> $row['module_mode'],							'module_auth'		=> $row['module_auth'],						);						$_module->update_module_data($module_data, true);						// Check for last sql error happened						if ($db->sql_error_triggered)						{							$error = $db->sql_error($db->sql_error_sql);							$this->p_master->db_error($error['message'], $db->sql_error_sql, __LINE__, __FILE__);						}					}				}			}			$_module->remove_cache_file();		}	}	/**	* Populate the language tables	*/	function add_language($mode, $sub)	{		global $db, $lang, $phpbb_root_path, $phpEx;		$dir = @opendir($phpbb_root_path . 'language');		if (!$dir)		{			$this->error('Unable to access the language directory', __LINE__, __FILE__);		}		while (($file = readdir($dir)) !== false)		{			$path = $phpbb_root_path . 'language/' . $file;			if ($file == '.' || $file == '..' || is_link($path) || is_file($path) || $file == 'CVS')			{				continue;			}			if (is_dir($path) && file_exists($path . '/iso.txt'))			{				$lang_file = file("$path/iso.txt");				$lang_pack = array(					'lang_iso'			=> basename($path),					'lang_dir'			=> basename($path),					'lang_english_name'	=> trim(htmlspecialchars($lang_file[0])),					'lang_local_name'	=> trim(htmlspecialchars($lang_file[1], ENT_COMPAT, 'UTF-8')),					'lang_author'		=> trim(htmlspecialchars($lang_file[2], ENT_COMPAT, 'UTF-8')),				);				$db->sql_query('INSERT INTO ' . LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $lang_pack));				if ($db->sql_error_triggered)				{					$error = $db->sql_error($db->sql_error_sql);					$this->p_master->db_error($error['message'], $db->sql_error_sql, __LINE__, __FILE__);				}				$valid_localized = array(					'icon_back_top', 'icon_contact_aim', 'icon_contact_email', 'icon_contact_icq', 'icon_contact_jabber', 'icon_contact_msnm', 'icon_contact_pm', 'icon_contact_yahoo', 'icon_contact_www', 'icon_post_delete', 'icon_post_edit', 'icon_post_info', 'icon_post_quote', 'icon_post_report', 'icon_user_online', 'icon_user_offline', 'icon_user_profile', 'icon_user_search', 'icon_user_warn', 'button_pm_forward', 'button_pm_new', 'button_pm_reply', 'button_topic_locked', 'button_topic_new', 'button_topic_reply',				);				$sql_ary = array();				$sql = 'SELECT *					FROM ' . STYLES_IMAGESET_TABLE;				$result = $db->sql_query($sql);				while ($imageset_row = $db->sql_fetchrow($result))				{					if (@file_exists("{$phpbb_root_path}styles/{$imageset_row['imageset_path']}/imageset/{$lang_pack['lang_iso']}/imageset.cfg"))					{						$cfg_data_imageset_data = parse_cfg_file("{$phpbb_root_path}styles/{$imageset_row['imageset_path']}/imageset/{$lang_pack['lang_iso']}/imageset.cfg");						foreach ($cfg_data_imageset_data as $image_name => $value)						{							if (strpos($value, '*') !== false)							{								if (substr($value, -1, 1) === '*')								{									list($image_filename, $image_height) = explode('*', $value);									$image_width = 0;								}								else								{									list($image_filename, $image_height, $image_width) = explode('*', $value);								}							}							else							{								$image_filename = $value;								$image_height = $image_width = 0;							}							if (strpos($image_name, 'img_') === 0 && $image_filename)							{								$image_name = substr($image_name, 4);								if (in_array($image_name, $valid_localized))								{									$sql_ary[] = array(										'image_name'		=> (string) $image_name,										'image_filename'	=> (string) $image_filename,										'image_height'		=> (int) $image_height,										'image_width'		=> (int) $image_width,										'imageset_id'		=> (int) $imageset_row['imageset_id'],										'image_lang'		=> (string) $lang_pack['lang_iso'],									);								}							}						}					}				}				$db->sql_freeresult($result);				if (sizeof($sql_ary))				{					$db->sql_multi_insert(STYLES_IMAGESET_DATA_TABLE, $sql_ary);					if ($db->sql_error_triggered)					{						$error = $db->sql_error($db->sql_error_sql);						$this->p_master->db_error($error['message'], $db->sql_error_sql, __LINE__, __FILE__);					}				}			}		}		closedir($dir);	}	/**	* Add search robots to the database	*/	function add_bots($mode, $sub)	{		global $db, $lang, $phpbb_root_path, $phpEx, $config;		// Obtain any submitted data		$data = $this->get_submitted_data();		// Fill the config array - it is needed by those functions we call		$sql = 'SELECT *			FROM ' . CONFIG_TABLE;		$result = $db->sql_query($sql);		$config = array();		while ($row = $db->sql_fetchrow($result))		{			$config[$row['config_name']] = $row['config_value'];		}		$db->sql_freeresult($result);		$sql = 'SELECT group_id			FROM ' . GROUPS_TABLE . "			WHERE group_name = 'BOTS'";		$result = $db->sql_query($sql);		$group_id = (int) $db->sql_fetchfield('group_id');		$db->sql_freeresult($result);		if (!$group_id)		{			// If we reach this point then something has gone very wrong			$this->p_master->error($lang['NO_GROUP'], __LINE__, __FILE__);		}		if (!function_exists('user_add'))		{			include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		}		foreach ($this->bot_list as $bot_name => $bot_ary)		{			$user_row = array(				'user_type'				=> USER_IGNORE,				'group_id'				=> $group_id,				'username'				=> $bot_name,				'user_regdate'			=> time(),				'user_password'			=> '',				'user_colour'			=> '9E8DA7',				'user_email'			=> '',				'user_lang'				=> $data['default_lang'],				'user_style'			=> 1,				'user_timezone'			=> 0,				'user_dateformat'		=> $lang['default_dateformat'],				'user_allow_massemail'	=> 0,			);			$user_id = user_add($user_row);			if (!$user_id)			{				// If we can't insert this user then continue to the next one to avoid inconsistent data				$this->p_master->db_error('Unable to insert bot into users table', $db->sql_error_sql, __LINE__, __FILE__, true);				continue;			}			$sql = 'INSERT INTO ' . BOTS_TABLE . ' ' . $db->sql_build_array('INSERT', array(				'bot_active'	=> 1,				'bot_name'		=> (string) $bot_name,				'user_id'		=> (int) $user_id,				'bot_agent'		=> (string) $bot_ary[0],				'bot_ip'		=> (string) $bot_ary[1],			));			$result = $db->sql_query($sql);		}	}	/**	* Sends an email to the board administrator with their password and some useful links	*/	function email_admin($mode, $sub)	{		global $auth, $config, $db, $lang, $template, $user, $phpbb_root_path, $phpEx;		$this->page_title = $lang['STAGE_FINAL'];		// Obtain any submitted data		$data = $this->get_submitted_data();		$sql = 'SELECT *			FROM ' . CONFIG_TABLE;		$result = $db->sql_query($sql);		$config = array();		while ($row = $db->sql_fetchrow($result))		{			$config[$row['config_name']] = $row['config_value'];		}		$db->sql_freeresult($result);		$user->session_begin();		$auth->login($data['admin_name'], $data['admin_pass1'], false, true, true);		// OK, Now that we've reached this point we can be confident that everything		// is installed and working......I hope :)		// So it's time to send an email to the administrator confirming the details		// they entered		if ($config['email_enable'])		{			include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);			$messenger = new messenger(false);			$messenger->template('installed', $data['language']);			$messenger->to($data['board_email1'], $data['admin_name']);			$messenger->anti_abuse_headers($config, $user);			$messenger->assign_vars(array(				'USERNAME'		=> htmlspecialchars_decode($data['admin_name']),				'PASSWORD'		=> htmlspecialchars_decode($data['admin_pass1']))			);			$messenger->send(NOTIFY_EMAIL);		}		// And finally, add a note to the log		add_log('admin', 'LOG_INSTALL_INSTALLED', $config['version']);		$template->assign_vars(array(			'TITLE'		=> $lang['INSTALL_CONGRATS'],			'BODY'		=> sprintf($lang['INSTALL_CONGRATS_EXPLAIN'], $config['version'], append_sid($phpbb_root_path . 'install/index.' . $phpEx, 'mode=convert&amp;language=' . $data['language']), '../docs/README.html'),			'L_SUBMIT'	=> $lang['INSTALL_LOGIN'],			'U_ACTION'	=> append_sid($phpbb_root_path . 'adm/index.' . $phpEx, 'i=send_statistics&amp;mode=send_statistics'),		));	}	/**	* Generate a list of available mail server authentication methods	*/	function mail_auth_select($selected_method)	{		global $lang;		$auth_methods = array('PLAIN', 'LOGIN', 'CRAM-MD5', 'DIGEST-MD5', 'POP-BEFORE-SMTP');		$s_smtp_auth_options = '';		foreach ($auth_methods as $method)		{			$s_smtp_auth_options .= '<option value="' . $method . '"' . (($selected_method == $method) ? ' selected="selected"' : '') . '>' . $lang['SMTP_' . str_replace('-', '_', $method)] . '</option>';		}		return $s_smtp_auth_options;	}	/**	* Get submitted data	*/	function get_submitted_data()	{		return array(			'language'		=> basename(request_var('language', '')),			'dbms'			=> request_var('dbms', ''),			'dbhost'		=> request_var('dbhost', ''),			'dbport'		=> request_var('dbport', ''),			'dbuser'		=> request_var('dbuser', ''),			'dbpasswd'		=> request_var('dbpasswd', '', true),			'dbname'		=> request_var('dbname', ''),			'table_prefix'	=> request_var('table_prefix', ''),			'default_lang'	=> basename(request_var('default_lang', '')),			'admin_name'	=> utf8_normalize_nfc(request_var('admin_name', '', true)),			'admin_pass1'	=> request_var('admin_pass1', '', true),			'admin_pass2'	=> request_var('admin_pass2', '', true),			'board_email1'	=> strtolower(request_var('board_email1', '')),			'board_email2'	=> strtolower(request_var('board_email2', '')),			'img_imagick'	=> request_var('img_imagick', ''),			'ftp_path'		=> request_var('ftp_path', ''),			'ftp_user'		=> request_var('ftp_user', ''),			'ftp_pass'		=> request_var('ftp_pass', ''),			'email_enable'	=> request_var('email_enable', ''),			'smtp_delivery'	=> request_var('smtp_delivery', ''),			'smtp_host'		=> request_var('smtp_host', ''),			'smtp_auth'		=> request_var('smtp_auth', ''),			'smtp_user'		=> request_var('smtp_user', ''),			'smtp_pass'		=> request_var('smtp_pass', ''),			'cookie_secure'	=> request_var('cookie_secure', ''),			'force_server_vars'	=> request_var('force_server_vars', ''),			'server_protocol'	=> request_var('server_protocol', ''),			'server_name'	=> request_var('server_name', ''),			'server_port'	=> request_var('server_port', ''),			'script_path'	=> request_var('script_path', ''),		);	}	/**	* The information below will be used to build the input fields presented to the user	*/	var $db_config_options = array(		'legend1'				=> 'DB_CONFIG',		'dbms'					=> array('lang' => 'DBMS',			'type' => 'select', 'options' => 'dbms_select(\'{VALUE}\')', 'explain' => false),		'dbhost'				=> array('lang' => 'DB_HOST',		'type' => 'text:25:100', 'explain' => true),		'dbport'				=> array('lang' => 'DB_PORT',		'type' => 'text:25:100', 'explain' => true),		'dbname'				=> array('lang' => 'DB_NAME',		'type' => 'text:25:100', 'explain' => false),		'dbuser'				=> array('lang' => 'DB_USERNAME',	'type' => 'text:25:100', 'explain' => false),		'dbpasswd'				=> array('lang' => 'DB_PASSWORD',	'type' => 'password:25:100', 'explain' => false),		'table_prefix'			=> array('lang' => 'TABLE_PREFIX',	'type' => 'text:25:100', 'explain' => true),	);	var $admin_config_options = array(		'legend1'				=> 'ADMIN_CONFIG',		'default_lang'			=> array('lang' => 'DEFAULT_LANG',				'type' => 'select', 'options' => '$this->module->inst_language_select(\'{VALUE}\')', 'explain' => false),		'admin_name'			=> array('lang' => 'ADMIN_USERNAME',			'type' => 'text:25:100', 'explain' => true),		'admin_pass1'			=> array('lang' => 'ADMIN_PASSWORD',			'type' => 'password:25:100', 'explain' => true),		'admin_pass2'			=> array('lang' => 'ADMIN_PASSWORD_CONFIRM',	'type' => 'password:25:100', 'explain' => false),		'board_email1'			=> array('lang' => 'CONTACT_EMAIL',				'type' => 'text:25:100', 'explain' => false),		'board_email2'			=> array('lang' => 'CONTACT_EMAIL_CONFIRM',		'type' => 'text:25:100', 'explain' => false),	);	var $advanced_config_options = array(		'legend1'				=> 'ACP_EMAIL_SETTINGS',		'email_enable'			=> array('lang' => 'ENABLE_EMAIL',		'type' => 'radio:enabled_disabled', 'explain' => true),		'smtp_delivery'			=> array('lang' => 'USE_SMTP',			'type' => 'radio:yes_no', 'explain' => true),		'smtp_host'				=> array('lang' => 'SMTP_SERVER',		'type' => 'text:25:50', 'explain' => false),		'smtp_auth'				=> array('lang' => 'SMTP_AUTH_METHOD',	'type' => 'select', 'options' => '$this->module->mail_auth_select(\'{VALUE}\')', 'explain' => true),		'smtp_user'				=> array('lang' => 'SMTP_USERNAME',		'type' => 'text:25:255', 'explain' => true),		'smtp_pass'				=> array('lang' => 'SMTP_PASSWORD',		'type' => 'password:25:255', 'explain' => true),		'legend2'				=> 'SERVER_URL_SETTINGS',		'cookie_secure'			=> array('lang' => 'COOKIE_SECURE',		'type' => 'radio:enabled_disabled', 'explain' => true),		'force_server_vars'		=> array('lang' => 'FORCE_SERVER_VARS',	'type' => 'radio:yes_no', 'explain' => true),		'server_protocol'		=> array('lang' => 'SERVER_PROTOCOL',	'type' => 'text:10:10', 'explain' => true),		'server_name'			=> array('lang' => 'SERVER_NAME',		'type' => 'text:40:255', 'explain' => true),		'server_port'			=> array('lang' => 'SERVER_PORT',		'type' => 'text:5:5', 'explain' => true),		'script_path'			=> array('lang' => 'SCRIPT_PATH',		'type' => 'text::255', 'explain' => true),	);	/**	* Specific PHP modules we may require for certain optional or extended features	*/	var $php_dlls_other = array('zlib', 'ftp', 'gd', 'xml');	/**	* A list of the web-crawlers/bots we recognise by default	*	* Candidates but not included:	* 'Accoona [Bot]'				'Accoona-AI-Agent/'	* 'ASPseek [Crawler]'			'ASPseek/'	* 'Boitho [Crawler]'			'boitho.com-dc/'	* 'Bunnybot [Bot]'				'powered by www.buncat.de'	* 'Cosmix [Bot]'				'cfetch/'	* 'Crawler Search [Crawler]'	'.Crawler-Search.de'	* 'Findexa [Crawler]'			'Findexa Crawler ('	* 'GBSpider [Spider]'			'GBSpider v'	* 'genie [Bot]'					'genieBot ('	* 'Hogsearch [Bot]'				'oegp v. 1.3.0'	* 'Insuranco [Bot]'				'InsurancoBot'	* 'IRLbot [Bot]'				'http://irl.cs.tamu.edu/crawler'	* 'ISC Systems [Bot]'			'ISC Systems iRc Search'	* 'Jyxobot [Bot]'				'Jyxobot/'	* 'Kraehe [Metasuche]'			'-DIE-KRAEHE- META-SEARCH-ENGINE/'	* 'LinkWalker'					'LinkWalker'	* 'MMSBot [Bot]'				'http://www.mmsweb.at/bot.html'	* 'Naver [Bot]'					'nhnbot@naver.com)'	* 'NetResearchServer'			'NetResearchServer/'	* 'Nimble [Crawler]'			'NimbleCrawler'	* 'Ocelli [Bot]'				'Ocelli/'	* 'Onsearch [Bot]'				'onCHECK-Robot'	* 'Orange [Spider]'				'OrangeSpider'	* 'Sproose [Bot]'				'http://www.sproose.com/bot'	* 'Susie [Sync]'				'!Susie (http://www.sync2it.com/susie)'	* 'Tbot [Bot]'					'Tbot/'	* 'Thumbshots [Capture]'		'thumbshots-de-Bot'	* 'Vagabondo [Crawler]'			'http://webagent.wise-guys.nl/'	* 'Walhello [Bot]'				'appie 1.1 (www.walhello.com)'	* 'WissenOnline [Bot]'			'WissenOnline-Bot'	* 'WWWeasel [Bot]'				'WWWeasel Robot v'	* 'Xaldon [Spider]'				'Xaldon WebSpider'	*/	var $bot_list = array(		'AdsBot [Google]'			=> array('AdsBot-Google', ''),		'Alexa [Bot]'				=> array('ia_archiver', ''),		'Alta Vista [Bot]'			=> array('Scooter/', ''),		'Ask Jeeves [Bot]'			=> array('Ask Jeeves', ''),		'Baidu [Spider]'			=> array('Baiduspider+(', ''),		'Bing [Bot]'                => array('bingbot/', ''),		'Exabot [Bot]'				=> array('Exabot/', ''),		'FAST Enterprise [Crawler]'	=> array('FAST Enterprise Crawler', ''),		'FAST WebCrawler [Crawler]'	=> array('FAST-WebCrawler/', ''),		'Francis [Bot]'				=> array('http://www.neomo.de/', ''),		'Gigabot [Bot]'				=> array('Gigabot/', ''),		'Google Adsense [Bot]'		=> array('Mediapartners-Google', ''),		'Google Desktop'			=> array('Google Desktop', ''),		'Google Feedfetcher'		=> array('Feedfetcher-Google', ''),		'Google [Bot]'				=> array('Googlebot', ''),		'Heise IT-Markt [Crawler]'	=> array('heise-IT-Markt-Crawler', ''),		'Heritrix [Crawler]'		=> array('heritrix/1.', ''),		'IBM Research [Bot]'		=> array('ibm.com/cs/crawler', ''),		'ICCrawler - ICjobs'		=> array('ICCrawler - ICjobs', ''),		'ichiro [Crawler]'			=> array('ichiro/', ''),		'Majestic-12 [Bot]'			=> array('MJ12bot/', ''),		'Metager [Bot]'				=> array('MetagerBot/', ''),		'MSN NewsBlogs'				=> array('msnbot-NewsBlogs/', ''),		'MSN [Bot]'					=> array('msnbot/', ''),		'MSNbot Media'				=> array('msnbot-media/', ''),		'NG-Search [Bot]'			=> array('NG-Search/', ''),		'Nutch [Bot]'				=> array('http://lucene.apache.org/nutch/', ''),		'Nutch/CVS [Bot]'			=> array('NutchCVS/', ''),		'OmniExplorer [Bot]'		=> array('OmniExplorer_Bot/', ''),		'Online link [Validator]'	=> array('online link validator', ''),		'psbot [Picsearch]'			=> array('psbot/0', ''),		'Seekport [Bot]'			=> array('Seekbot/', ''),		'Sensis [Crawler]'			=> array('Sensis Web Crawler', ''),		'SEO Crawler'				=> array('SEO search Crawler/', ''),		'Seoma [Crawler]'			=> array('Seoma [SEO Crawler]', ''),		'SEOSearch [Crawler]'		=> array('SEOsearch/', ''),		'Snappy [Bot]'				=> array('Snappy/1.1 ( http://www.urltrends.com/ )', ''),		'Steeler [Crawler]'			=> array('http://www.tkl.iis.u-tokyo.ac.jp/~crawler/', ''),		'Synoo [Bot]'				=> array('SynooBot/', ''),		'Telekom [Bot]'				=> array('crawleradmin.t-info@telekom.de', ''),		'TurnitinBot [Bot]'			=> array('TurnitinBot/', ''),		'Voyager [Bot]'				=> array('voyager/1.0', ''),		'W3 [Sitesearch]'			=> array('W3 SiteSearch Crawler', ''),		'W3C [Linkcheck]'			=> array('W3C-checklink/', ''),		'W3C [Validator]'			=> array('W3C_*Validator', ''),		'WiseNut [Bot]'				=> array('http://www.WISEnutbot.com', ''),		'YaCy [Bot]'				=> array('yacybot', ''),		'Yahoo MMCrawler [Bot]'		=> array('Yahoo-MMCrawler/', ''),		'Yahoo Slurp [Bot]'			=> array('Yahoo! DE Slurp', ''),		'Yahoo [Bot]'				=> array('Yahoo! Slurp', ''),		'YahooSeeker [Bot]'			=> array('YahooSeeker/', ''),	);	/**	* Define the module structure so that we can populate the database without	* needing to hard-code module_id values	*/	var $module_categories = array(		'acp'	=> array(			'ACP_CAT_GENERAL'		=> array(				'ACP_QUICK_ACCESS',				'ACP_BOARD_CONFIGURATION',				'ACP_CLIENT_COMMUNICATION',				'ACP_SERVER_CONFIGURATION',			),			'ACP_CAT_FORUMS'		=> array(				'ACP_MANAGE_FORUMS',				'ACP_FORUM_BASED_PERMISSIONS',			),			'ACP_CAT_POSTING'		=> array(				'ACP_MESSAGES',				'ACP_ATTACHMENTS',			),			'ACP_CAT_USERGROUP'		=> array(				'ACP_CAT_USERS',				'ACP_GROUPS',				'ACP_USER_SECURITY',			),			'ACP_CAT_PERMISSIONS'	=> array(				'ACP_GLOBAL_PERMISSIONS',				'ACP_FORUM_BASED_PERMISSIONS',				'ACP_PERMISSION_ROLES',				'ACP_PERMISSION_MASKS',			),			'ACP_CAT_STYLES'		=> array(				'ACP_STYLE_MANAGEMENT',				'ACP_STYLE_COMPONENTS',			),			'ACP_CAT_MAINTENANCE'	=> array(				'ACP_FORUM_LOGS',				'ACP_CAT_DATABASE',			),			'ACP_CAT_SYSTEM'		=> array(				'ACP_AUTOMATION',				'ACP_GENERAL_TASKS',				'ACP_MODULE_MANAGEMENT',			),			'ACP_CAT_DOT_MODS'		=> null,		),		'mcp'	=> array(			'MCP_MAIN'		=> null,			'MCP_QUEUE'		=> null,			'MCP_REPORTS'	=> null,			'MCP_NOTES'		=> null,			'MCP_WARN'		=> null,			'MCP_LOGS'		=> null,			'MCP_BAN'		=> null,		),		'ucp'	=> array(			'UCP_MAIN'			=> null,			'UCP_PROFILE'		=> null,			'UCP_PREFS'			=> null,			'UCP_PM'			=> null,			'UCP_USERGROUPS'	=> null,			'UCP_ZEBRA'			=> null,		),	);	var $module_extras = array(		'acp'	=> array(			'ACP_QUICK_ACCESS' => array(				'ACP_MANAGE_USERS',				'ACP_GROUPS_MANAGE',				'ACP_MANAGE_FORUMS',				'ACP_MOD_LOGS',				'ACP_BOTS',				'ACP_PHP_INFO',			),			'ACP_FORUM_BASED_PERMISSIONS' => array(				'ACP_FORUM_PERMISSIONS',				'ACP_FORUM_PERMISSIONS_COPY',				'ACP_FORUM_MODERATORS',				'ACP_USERS_FORUM_PERMISSIONS',				'ACP_GROUPS_FORUM_PERMISSIONS',			),		),	);}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**/if (php_sapi_name() != 'cli'){	die("This program must be run from the command line.\n");}//// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = '../';$phpEx = substr(strrchr(__FILE__, '.'), 1);echo "Checking for required files\n";download('http://www.unicode.org/Public/UNIDATA/CompositionExclusions.txt');download('http://www.unicode.org/Public/UNIDATA/DerivedNormalizationProps.txt');download('http://www.unicode.org/Public/UNIDATA/UnicodeData.txt');echo "\n";require_once($phpbb_root_path . 'includes/utf/utf_normalizer.' . $phpEx);$file_contents = array();/*** Generate some Hangul/Jamo stuff*/echo "\nGenerating Hangul and Jamo tables\n";for ($i = 0; $i < UNICODE_HANGUL_LCOUNT; ++$i){	$utf_char = cp_to_utf(UNICODE_HANGUL_LBASE + $i);	$file_contents['utf_normalizer_common']['utf_jamo_index'][$utf_char] = $i * UNICODE_HANGUL_VCOUNT * UNICODE_HANGUL_TCOUNT + UNICODE_HANGUL_SBASE;	$file_contents['utf_normalizer_common']['utf_jamo_type'][$utf_char] = UNICODE_JAMO_L;}for ($i = 0; $i < UNICODE_HANGUL_VCOUNT; ++$i){	$utf_char = cp_to_utf(UNICODE_HANGUL_VBASE + $i);	$file_contents['utf_normalizer_common']['utf_jamo_index'][$utf_char] = $i * UNICODE_HANGUL_TCOUNT;	$file_contents['utf_normalizer_common']['utf_jamo_type'][$utf_char] = UNICODE_JAMO_V;}for ($i = 0; $i < UNICODE_HANGUL_TCOUNT; ++$i){	$utf_char = cp_to_utf(UNICODE_HANGUL_TBASE + $i);	$file_contents['utf_normalizer_common']['utf_jamo_index'][$utf_char] = $i;	$file_contents['utf_normalizer_common']['utf_jamo_type'][$utf_char] = UNICODE_JAMO_T;}/*** Load the CompositionExclusions table*/echo "Loading CompositionExclusion\n";$fp = fopen('CompositionExclusions.txt', 'rt');$exclude = array();while (!feof($fp)){	$line = fgets($fp, 1024);	if (!strpos(' 0123456789ABCDEFabcdef', $line[0]))	{		continue;	}	$cp = strtok($line, ' ');	if ($pos = strpos($cp, '..'))	{		$start = hexdec(substr($cp, 0, $pos));		$end = hexdec(substr($cp, $pos + 2));		for ($i = $start; $i < $end; ++$i)		{			$exclude[$i] = 1;		}	}	else	{		$exclude[hexdec($cp)] = 1;	}}fclose($fp);/*** Load QuickCheck tables*/echo "Generating QuickCheck tables\n";$fp = fopen('DerivedNormalizationProps.txt', 'rt');while (!feof($fp)){	$line = fgets($fp, 1024);	if (!strpos(' 0123456789ABCDEFabcdef', $line[0]))	{		continue;	}	$p = array_map('trim', explode(';', strtok($line, '#')));	/**	* Capture only NFC_QC, NFKC_QC	*/	if (!preg_match('#^NFK?C_QC$#', $p[1]))	{		continue;	}	if ($pos = strpos($p[0], '..'))	{		$start = hexdec(substr($p[0], 0, $pos));		$end = hexdec(substr($p[0], $pos + 2));	}	else	{		$start = $end = hexdec($p[0]);	}	if ($start >= UTF8_HANGUL_FIRST && $end <= UTF8_HANGUL_LAST)	{		/**		* We do not store Hangul syllables in the array		*/		continue;	}	if ($p[2] == 'M')	{		$val = UNICODE_QC_MAYBE;	}	else	{		$val = UNICODE_QC_NO;	}	if ($p[1] == 'NFKC_QC')	{		$file = 'utf_nfkc_qc';	}	else	{		$file = 'utf_nfc_qc';	}	for ($i = $start; $i <= $end; ++$i)	{		/**		* The vars have the same name as the file: $utf_nfc_qc is in utf_nfc_qc.php		*/		$file_contents[$file][$file][cp_to_utf($i)] = $val;	}}fclose($fp);/*** Do mappings*/echo "Loading Unicode decomposition mappings\n";$fp = fopen($phpbb_root_path . 'develop/UnicodeData.txt', 'rt');$map = array();while (!feof($fp)){	$p = explode(';', fgets($fp, 1024));	$cp = hexdec($p[0]);	if (!empty($p[3]))	{		/**		* Store combining class > 0		*/		$file_contents['utf_normalizer_common']['utf_combining_class'][cp_to_utf($cp)] = (int) $p[3];	}	if (!isset($p[5]) || !preg_match_all('#[0-9A-F]+#', strip_tags($p[5]), $m))	{		continue;	}	if (strpos($p[5], '>'))	{		$map['NFKD'][$cp] = implode(' ', array_map('hexdec', $m[0]));	}	else	{		$map['NFD'][$cp] = $map['NFKD'][$cp] = implode(' ', array_map('hexdec', $m[0]));	}}fclose($fp);/*** Build the canonical composition table*/echo "Generating the Canonical Composition table\n";foreach ($map['NFD'] as $cp => $decomp_seq){	if (!strpos($decomp_seq, ' ') || isset($exclude[$cp]))	{		/**		* Singletons are excluded from canonical composition		*/		continue;	}	$utf_seq = implode('', array_map('cp_to_utf', explode(' ', $decomp_seq)));	if (!isset($file_contents['utf_canonical_comp']['utf_canonical_comp'][$utf_seq]))	{		$file_contents['utf_canonical_comp']['utf_canonical_comp'][$utf_seq] = cp_to_utf($cp);	}}/*** Decompose the NF[K]D mappings recursively and prepare the file contents*/echo "Generating the Canonical and Compatibility Decomposition tables\n\n";foreach ($map as $type => $decomp_map){	foreach ($decomp_map as $cp => $decomp_seq)	{		$decomp_map[$cp] = decompose($decomp_map, $decomp_seq);	}	unset($decomp_seq);	if ($type == 'NFKD')	{		$file = 'utf_compatibility_decomp';		$var = 'utf_compatibility_decomp';	}	else	{		$file = 'utf_canonical_decomp';		$var = 'utf_canonical_decomp';	}	/**	* Generate the corresponding file	*/	foreach ($decomp_map as $cp => $decomp_seq)	{		$file_contents[$file][$var][cp_to_utf($cp)] = implode('', array_map('cp_to_utf', explode(' ', $decomp_seq)));	}}/*** Generate and/or alter the files*/foreach ($file_contents as $file => $contents){	/**	* Generate a new file	*/	echo "Writing to $file.$phpEx\n";	if (!$fp = fopen($phpbb_root_path . 'includes/utf/data/' . $file . '.' . $phpEx, 'wb'))	{		trigger_error('Cannot open ' . $file . ' for write');	}	fwrite($fp, '<?php');	foreach ($contents as $var => $val)	{		fwrite($fp, "\n\$GLOBALS[" . my_var_export($var) . ']=' . my_var_export($val) . ";");	}	fclose($fp);}echo "\n*** UTF-8 normalization tables done\n\n";/*** Now we'll generate the files needed by the search indexer*/echo "Generating search indexer tables\n";$fp = fopen($phpbb_root_path . 'develop/UnicodeData.txt', 'rt');$map = array();while ($line = fgets($fp, 1024)){	/**	* The current line is split, $m[0] hold the codepoint in hexadecimal and	* all other fields numbered as in http://www.unicode.org/Public/UNIDATA/UCD.html#UnicodeData.txt	*/	$m = explode(';', $line);	/**	* @var	integer	$cp			Current char codepoint	* @var	string	$utf_char	UTF-8 representation of current char	*/	$cp = hexdec($m[0]);	$utf_char = cp_to_utf($cp);	/**	* $m[2] holds the "General Category" of the character	* @link http://www.unicode.org/Public/UNIDATA/UCD.html#General_Category_Values	*/	switch ($m[2][0])	{		case 'L':			/**			* We allow all letters and map them to their lowercased counterpart on the fly			*/			$map_to_hex = (isset($m[13][0])) ? $m[13] : $m[0];			if (preg_match('#^LATIN.*(?:LETTER|LIGATURE) ([A-Z]{2}(?![A-Z]))$#', $m[1], $capture))			{				/**				* Special hack for some latin ligatures. Using the name of a character				* is bad practice, but for now it works well enough.				*				* @todo Note that ligatures with combining marks such as U+01E2 are				* not supported at this time				*/				$map[$cp] = strtolower($capture[1]);			}			else if (isset($m[13][0]))			{				/**				* If the letter has a lowercased form, use it				*/				$map[$cp] = hex_to_utf($m[13]);			}			else			{				/**				* In all other cases, map the letter to itself				*/				$map[$cp] = $utf_char;			}			break;		case 'M':			/**			* We allow all marks, they are mapped to themselves			*/			$map[$cp] = $utf_char;			break;		case 'N':			/**			* We allow all numbers, but we map them to their numeric value whenever			* possible. The numeric value (field #8) is in ASCII already			*			* @todo Note that fractions such as U+00BD will be converted to something			* like "1/2", with a slash. However, "1/2" entered in ASCII is converted			* to "1 2". This will have to be fixed.			*/			$map[$cp] = (isset($m[8][0])) ? $m[8] : $utf_char;			break;		default:			/**			* Everything else is ignored, skip to the next line			*/			continue 2;	}}fclose($fp);/*** Add some cheating*/$cheats = array(	'00DF'	=>	'ss',		#	German sharp S	'00C5'	=>	'ae',		#	Capital A with diaeresis	'00E4'	=>	'ae',		#	Small A with diaeresis	'00D6'	=>	'oe',		#	Capital O with diaeresis	'00F6'	=>	'oe',		#	Small O with diaeresis	'00DC'	=>	'ue',		#	Capital U with diaeresis	'00FC'	=>	'ue',		#	Small U with diaeresis);/*** Add our "cheat replacements" to the map*/foreach ($cheats as $hex => $map_to){	$map[hexdec($hex)] = $map_to;}/*** Split the map into smaller blocks*/$file_contents = array();foreach ($map as $cp => $map_to){	$file_contents[$cp >> 11][cp_to_utf($cp)] = $map_to;}unset($map);foreach ($file_contents as $idx => $contents){	echo "Writing to search_indexer_$idx.$phpEx\n";	$fp = fopen($phpbb_root_path . 'includes/utf/data/search_indexer_' . $idx . '.' . $phpEx, 'wb');	fwrite($fp, '<?php return ' . my_var_export($contents) . ';');	fclose($fp);}echo "\n*** Search indexer tables done\n\n";die("\nAll done!\n");//////////////////////////////////////////////////////////////////////////////////                             Internal functions                             ///////////////////////////////////////////////////////////////////////////////////*** Decompose a sequence recusively** @param	array	$decomp_map	Decomposition mapping, passed by reference* @param	string	$decomp_seq	Decomposition sequence as decimal codepoints separated with a space* @return	string				Decomposition sequence, fully decomposed*/function decompose(&$decomp_map, $decomp_seq){	$ret = array();	foreach (explode(' ', $decomp_seq) as $cp)	{		if (isset($decomp_map[$cp]))		{			$ret[] = decompose($decomp_map, $decomp_map[$cp]);		}		else		{			$ret[] = $cp;		}	}	return implode(' ', $ret);}/*** Return a parsable string representation of a variable** This is function is limited to array/strings/integers** @param	mixed	$var		Variable* @return	string				PHP code representing the variable*/function my_var_export($var){	if (is_array($var))	{		$lines = array();		foreach ($var as $k => $v)		{			$lines[] = my_var_export($k) . '=>' . my_var_export($v);		}		return 'array(' . implode(',', $lines) . ')';	}	else if (is_string($var))	{		return "'" . str_replace(array('\\', "'"), array('\\\\', "\\'"), $var) . "'";	}	else	{		return $var;	}}/*** Download a file to the develop/ dir** @param	string	$url		URL of the file to download* @return	void*/function download($url){	global $phpbb_root_path;	if (file_exists($phpbb_root_path . 'develop/' . basename($url)))	{		return;	}	echo 'Downloading from ', $url, ' ';	if (!$fpr = fopen($url, 'rb'))	{		die("Can't download from $url\nPlease download it yourself and put it in the develop/ dir, kthxbai");	}	if (!$fpw = fopen($phpbb_root_path . 'develop/' . basename($url), 'wb'))	{		die("Can't open develop/" . basename($url) . " for output... please check your permissions or something");	}	$i = 0;	$chunk = 32768;	$done = '';	while (!feof($fpr))	{		$i += fwrite($fpw, fread($fpr, $chunk));		echo str_repeat("\x08", strlen($done));		$done = ($i >> 10) . ' KiB';		echo $done;	}	fclose($fpr);	fclose($fpw);	echo "\n";}/*** Convert a codepoint in hexadecimal to a UTF-8 char** @param	string	$hex		Codepoint, in hexadecimal* @return	string				UTF-8 char*/function hex_to_utf($hex){	return cp_to_utf(hexdec($hex));}/*** Return a UTF string formed from a sequence of codepoints in hexadecimal** @param	string	$seq		Sequence of codepoints, separated with a space* @return	string				UTF-8 string*/function hexseq_to_utf($seq){	return implode('', array_map('hex_to_utf', explode(' ', $seq)));}/*** Convert a codepoint to a UTF-8 char** @param	integer	$cp			Unicode codepoint* @return	string				UTF-8 string*/function cp_to_utf($cp){	if ($cp > 0xFFFF)	{		return chr(0xF0 | ($cp >> 18)) . chr(0x80 | (($cp >> 12) & 0x3F)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));	}	else if ($cp > 0x7FF)	{		return chr(0xE0 | ($cp >> 12)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));	}	else if ($cp > 0x7F)	{		return chr(0xC0 | ($cp >> 6)) . chr(0x80 | ($cp & 0x3F));	}	else	{		return chr($cp);	}}
