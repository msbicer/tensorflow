<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class ucp_groups_info{	function module()	{		return array(			'filename'	=> 'ucp_groups',			'title'		=> 'UCP_USERGROUPS',			'version'	=> '1.0.0',			'modes'		=> array(				'membership'	=> array('title' => 'UCP_USERGROUPS_MEMBER', 'auth' => '', 'cat' => array('UCP_USERGROUPS')),				'manage'		=> array('title' => 'UCP_USERGROUPS_MANAGE', 'auth' => '', 'cat' => array('UCP_USERGROUPS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?phpphpinfo();?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2006, 2008 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** This class holds the code shared by the two default 3.0.x CAPTCHAs.** @package VC*/class phpbb_default_captcha{	var $confirm_id;	var $confirm_code;	var $code;	var $seed;	var $attempts = 0;	var $type;	var $solved = 0;	var $captcha_vars = false;	function init($type)	{		global $config, $db, $user;		// read input		$this->confirm_id = request_var('confirm_id', '');		$this->confirm_code = request_var('confirm_code', '');		$refresh = request_var('refresh_vc', false) && $config['confirm_refresh'];		$this->type = (int) $type;		if (!strlen($this->confirm_id) || !$this->load_code())		{			// we have no confirm ID, better get ready to display something			$this->generate_code();		}		else if ($refresh)		{			$this->regenerate_code();		}	}	function execute_demo()	{		global $user;		$this->code = gen_rand_string_friendly(mt_rand(CAPTCHA_MIN_CHARS, CAPTCHA_MAX_CHARS));		$this->seed = hexdec(substr(unique_id(), 4, 10));		// compute $seed % 0x7fffffff		$this->seed -= 0x7fffffff * floor($this->seed / 0x7fffffff);		$captcha = new captcha();		define('IMAGE_OUTPUT', 1);		$captcha->execute($this->code, $this->seed);	}	function execute()	{		if (empty($this->code))		{			if (!$this->load_code())			{				// invalid request, bail out				return false;			}		}		$captcha = new captcha();		define('IMAGE_OUTPUT', 1);		$captcha->execute($this->code, $this->seed);	}	function get_template()	{		global $config, $user, $template, $phpEx, $phpbb_root_path;		if ($this->is_solved())		{			return false;		}		else		{			$link = append_sid($phpbb_root_path . 'ucp.' . $phpEx,  'mode=confirm&amp;confirm_id=' . $this->confirm_id . '&amp;type=' . $this->type);			$explain = $user->lang(($this->type != CONFIRM_POST) ? 'CONFIRM_EXPLAIN' : 'POST_CONFIRM_EXPLAIN', '<a href="mailto:' . htmlspecialchars($config['board_contact']) . '">', '</a>');			$template->assign_vars(array(				'CONFIRM_IMAGE_LINK'		=> $link,				'CONFIRM_IMAGE'				=> '<img src="' . $link . '" />',				'CONFIRM_IMG'				=> '<img src="' . $link . '" />',				'CONFIRM_ID'				=> $this->confirm_id,				'S_CONFIRM_CODE'			=> true,				'S_TYPE'					=> $this->type,				'S_CONFIRM_REFRESH'			=> ($config['enable_confirm'] && $config['confirm_refresh'] && $this->type == CONFIRM_REG) ? true : false,				'L_CONFIRM_EXPLAIN'			=> $explain,			));			return 'captcha_default.html';		}	}	function get_demo_template($id)	{		global $config, $user, $template, $phpbb_admin_path, $phpEx;		$variables = '';		if (is_array($this->captcha_vars))		{			foreach ($this->captcha_vars as $captcha_var => $template_var)			{				$variables .= '&amp;' . rawurlencode($captcha_var) . '=' . request_var($captcha_var, (int) $config[$captcha_var]);			}		}		// acp_captcha has a delivery function; let's use it		$template->assign_vars(array(			'CONFIRM_IMAGE'		=> append_sid($phpbb_admin_path . 'index.' . $phpEx, 'captcha_demo=1&amp;mode=visual&amp;i=' . $id . '&amp;select_captcha=' . $this->get_class_name()) . $variables,			'CONFIRM_ID'		=> $this->confirm_id,		));		return 'captcha_default_acp_demo.html';	}	function get_hidden_fields()	{		$hidden_fields = array();		// this is required for posting.php - otherwise we would forget about the captcha being already solved		if ($this->solved)		{			$hidden_fields['confirm_code'] = $this->confirm_code;		}		$hidden_fields['confirm_id'] = $this->confirm_id;		return $hidden_fields;	}	function garbage_collect($type)	{		global $db, $config;		$sql = 'SELECT DISTINCT c.session_id			FROM ' . CONFIRM_TABLE . ' c			LEFT JOIN ' . SESSIONS_TABLE . ' s ON (c.session_id = s.session_id)			WHERE s.session_id IS NULL' .				((empty($type)) ? '' : ' AND c.confirm_type = ' . (int) $type);		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			$sql_in = array();			do			{				$sql_in[] = (string) $row['session_id'];			}			while ($row = $db->sql_fetchrow($result));			if (sizeof($sql_in))			{				$sql = 'DELETE FROM ' . CONFIRM_TABLE . '					WHERE ' . $db->sql_in_set('session_id', $sql_in);				$db->sql_query($sql);			}		}		$db->sql_freeresult($result);	}	function uninstall()	{		$this->garbage_collect(0);	}	function install()	{		return;	}	function validate()	{		global $config, $db, $user;		if (empty($user->lang))		{			$user->setup();		}		$error = '';		if (!$this->confirm_id)		{			$error = $user->lang['CONFIRM_CODE_WRONG'];		}		else		{			if ($this->check_code())			{				// $this->delete_code(); commented out to allow posting.php to repeat the question				$this->solved = true;			}			else			{				$error = $user->lang['CONFIRM_CODE_WRONG'];			}		}		if (strlen($error))		{			// okay, incorrect answer. Let's ask a new question.			$this->new_attempt();			return $error;		}		else		{			return false;		}	}	/**	* The old way to generate code, suitable for GD and non-GD. Resets the internal state.	*/	function generate_code()	{		global $db, $user;		$this->code = gen_rand_string_friendly(mt_rand(CAPTCHA_MIN_CHARS, CAPTCHA_MAX_CHARS));		$this->confirm_id = md5(unique_id($user->ip));		$this->seed = hexdec(substr(unique_id(), 4, 10));		$this->solved = 0;		// compute $seed % 0x7fffffff		$this->seed -= 0x7fffffff * floor($this->seed / 0x7fffffff);		$sql = 'INSERT INTO ' . CONFIRM_TABLE . ' ' . $db->sql_build_array('INSERT', array(				'confirm_id'	=> (string) $this->confirm_id,				'session_id'	=> (string) $user->session_id,				'confirm_type'	=> (int) $this->type,				'code'			=> (string) $this->code,				'seed'			=> (int) $this->seed)		);		$db->sql_query($sql);	}	/**	* New Question, if desired.	*/	function regenerate_code()	{		global $db, $user;		$this->code = gen_rand_string_friendly(mt_rand(CAPTCHA_MIN_CHARS, CAPTCHA_MAX_CHARS));		$this->seed = hexdec(substr(unique_id(), 4, 10));		$this->solved = 0;		// compute $seed % 0x7fffffff		$this->seed -= 0x7fffffff * floor($this->seed / 0x7fffffff);		$sql = 'UPDATE ' . CONFIRM_TABLE . ' SET ' . $db->sql_build_array('UPDATE', array(				'code'			=> (string) $this->code,				'seed'			=> (int) $this->seed)) . '				WHERE				confirm_id = \'' . $db->sql_escape($this->confirm_id) . '\'					AND session_id = \'' . $db->sql_escape($user->session_id) . '\'';		$db->sql_query($sql);	}	/**	* New Question, if desired.	*/	function new_attempt()	{		global $db, $user;		$this->code = gen_rand_string_friendly(mt_rand(CAPTCHA_MIN_CHARS, CAPTCHA_MAX_CHARS));		$this->seed = hexdec(substr(unique_id(), 4, 10));		$this->solved = 0;		// compute $seed % 0x7fffffff		$this->seed -= 0x7fffffff * floor($this->seed / 0x7fffffff);		$sql = 'UPDATE ' . CONFIRM_TABLE . ' SET ' . $db->sql_build_array('UPDATE', array(				'code'			=> (string) $this->code,				'seed'			=> (int) $this->seed)) . '				, attempts = attempts + 1				WHERE				confirm_id = \'' . $db->sql_escape($this->confirm_id) . '\'					AND session_id = \'' . $db->sql_escape($user->session_id) . '\'';		$db->sql_query($sql);	}	/**	* Look up everything we need for painting&checking.	*/	function load_code()	{		global $db, $user;		$sql = 'SELECT code, seed, attempts			FROM ' . CONFIRM_TABLE . "			WHERE confirm_id = '" . $db->sql_escape($this->confirm_id) . "'				AND session_id = '" . $db->sql_escape($user->session_id) . "'				AND confirm_type = " . $this->type;		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			$this->code = $row['code'];			$this->seed = $row['seed'];			$this->attempts = $row['attempts'];			return true;		}		return false;	}	function check_code()	{		return (strcasecmp($this->code, $this->confirm_code) === 0);	}	function delete_code()	{		global $db, $user;		$sql = 'DELETE FROM ' . CONFIRM_TABLE . "			WHERE confirm_id = '" . $db->sql_escape($confirm_id) . "'				AND session_id = '" . $db->sql_escape($user->session_id) . "'				AND confirm_type = " . $this->type;		$db->sql_query($sql);	}	function get_attempt_count()	{		return $this->attempts;	}	function reset()	{		global $db, $user;		$sql = 'DELETE FROM ' . CONFIRM_TABLE . "			WHERE session_id = '" . $db->sql_escape($user->session_id) . "'				AND confirm_type = " . (int) $this->type;		$db->sql_query($sql);		// we leave the class usable by generating a new question		$this->generate_code();	}	function is_solved()	{		if (request_var('confirm_code', false) && $this->solved === 0)		{			$this->validate();		}		return (bool) $this->solved;	}	/**	*  API function	*/	function has_config()	{		return false;	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Permission/Auth class* @package phpBB3*/class auth{	var $acl = array();	var $cache = array();	var $acl_options = array();	var $acl_forum_ids = false;	/**	* Init permissions	*/	function acl(&$userdata)	{		global $db, $cache;		$this->acl = $this->cache = $this->acl_options = array();		$this->acl_forum_ids = false;		if (($this->acl_options = $cache->get('_acl_options')) === false)		{			$sql = 'SELECT auth_option_id, auth_option, is_global, is_local				FROM ' . ACL_OPTIONS_TABLE . '				ORDER BY auth_option_id';			$result = $db->sql_query($sql);			$global = $local = 0;			$this->acl_options = array();			while ($row = $db->sql_fetchrow($result))			{				if ($row['is_global'])				{					$this->acl_options['global'][$row['auth_option']] = $global++;				}				if ($row['is_local'])				{					$this->acl_options['local'][$row['auth_option']] = $local++;				}				$this->acl_options['id'][$row['auth_option']] = (int) $row['auth_option_id'];				$this->acl_options['option'][(int) $row['auth_option_id']] = $row['auth_option'];			}			$db->sql_freeresult($result);			$cache->put('_acl_options', $this->acl_options);		}		if (!trim($userdata['user_permissions']))		{			$this->acl_cache($userdata);		}		// Fill ACL array		$this->_fill_acl($userdata['user_permissions']);		// Verify bitstring length with options provided...		$renew = false;		$global_length = sizeof($this->acl_options['global']);		$local_length = sizeof($this->acl_options['local']);		// Specify comparing length (bitstring is padded to 31 bits)		$global_length = ($global_length % 31) ? ($global_length - ($global_length % 31) + 31) : $global_length;		$local_length = ($local_length % 31) ? ($local_length - ($local_length % 31) + 31) : $local_length;		// You thought we are finished now? Noooo... now compare them.		foreach ($this->acl as $forum_id => $bitstring)		{			if (($forum_id && strlen($bitstring) != $local_length) || (!$forum_id && strlen($bitstring) != $global_length))			{				$renew = true;				break;			}		}		// If a bitstring within the list does not match the options, we have a user with incorrect permissions set and need to renew them		if ($renew)		{			$this->acl_cache($userdata);			$this->_fill_acl($userdata['user_permissions']);		}		return;	}	/**	* Fill ACL array with relevant bitstrings from user_permissions column	* @access private	*/	function _fill_acl($user_permissions)	{		$seq_cache = array();		$this->acl = array();		$user_permissions = explode("\n", $user_permissions);		foreach ($user_permissions as $f => $seq)		{			if ($seq)			{				$i = 0;				if (!isset($this->acl[$f]))				{					$this->acl[$f] = '';				}				while ($subseq = substr($seq, $i, 6))				{					if (isset($seq_cache[$subseq]))					{						$converted = $seq_cache[$subseq];					}					else					{						$converted = $seq_cache[$subseq] = str_pad(base_convert($subseq, 36, 2), 31, 0, STR_PAD_LEFT);					}					// We put the original bitstring into the acl array					$this->acl[$f] .= $converted;					$i += 6;				}			}		}	}	/**	* Look up an option	* if the option is prefixed with !, then the result becomes negated	*	* If a forum id is specified the local option will be combined with a global option if one exist.	* If a forum id is not specified, only the global option will be checked.	*/	function acl_get($opt, $f = 0)	{		$negate = false;		if (strpos($opt, '!') === 0)		{			$negate = true;			$opt = substr($opt, 1);		}		if (!isset($this->cache[$f][$opt]))		{			// We combine the global/local option with an OR because some options are global and local.			// If the user has the global permission the local one is true too and vice versa			$this->cache[$f][$opt] = false;			// Is this option a global permission setting?			if (isset($this->acl_options['global'][$opt]))			{				if (isset($this->acl[0]))				{					$this->cache[$f][$opt] = $this->acl[0][$this->acl_options['global'][$opt]];				}			}			// Is this option a local permission setting?			// But if we check for a global option only, we won't combine the options...			if ($f != 0 && isset($this->acl_options['local'][$opt]))			{				if (isset($this->acl[$f]) && isset($this->acl[$f][$this->acl_options['local'][$opt]]))				{					$this->cache[$f][$opt] |= $this->acl[$f][$this->acl_options['local'][$opt]];				}			}		}		// Founder always has all global options set to true...		return ($negate) ? !$this->cache[$f][$opt] : $this->cache[$f][$opt];	}	/**	* Get forums with the specified permission setting	* if the option is prefixed with !, then the result becomes nagated	*	* @param bool $clean set to true if only values needs to be returned which are set/unset	*/	function acl_getf($opt, $clean = false)	{		$acl_f = array();		$negate = false;		if (strpos($opt, '!') === 0)		{			$negate = true;			$opt = substr($opt, 1);		}		// If we retrieve a list of forums not having permissions in, we need to get every forum_id		if ($negate)		{			if ($this->acl_forum_ids === false)			{				global $db;				$sql = 'SELECT forum_id					FROM ' . FORUMS_TABLE;				if (sizeof($this->acl))				{					$sql .= ' WHERE ' . $db->sql_in_set('forum_id', array_keys($this->acl), true);				}				$result = $db->sql_query($sql);				$this->acl_forum_ids = array();				while ($row = $db->sql_fetchrow($result))				{					$this->acl_forum_ids[] = $row['forum_id'];				}				$db->sql_freeresult($result);			}		}		if (isset($this->acl_options['local'][$opt]))		{			foreach ($this->acl as $f => $bitstring)			{				// Skip global settings				if (!$f)				{					continue;				}				$allowed = (!isset($this->cache[$f][$opt])) ? $this->acl_get($opt, $f) : $this->cache[$f][$opt];				if (!$clean)				{					$acl_f[$f][$opt] = ($negate) ? !$allowed : $allowed;				}				else				{					if (($negate && !$allowed) || (!$negate && $allowed))					{						$acl_f[$f][$opt] = 1;					}				}			}		}		// If we get forum_ids not having this permission, we need to fill the remaining parts		if ($negate && sizeof($this->acl_forum_ids))		{			foreach ($this->acl_forum_ids as $f)			{				$acl_f[$f][$opt] = 1;			}		}		return $acl_f;	}	/**	* Get local permission state for any forum.	*	* Returns true if user has the permission in one or more forums, false if in no forum.	* If global option is checked it returns the global state (same as acl_get($opt))	* Local option has precedence...	*/	function acl_getf_global($opt)	{		if (is_array($opt))		{			// evaluates to true as soon as acl_getf_global is true for one option			foreach ($opt as $check_option)			{				if ($this->acl_getf_global($check_option))				{					return true;				}			}			return false;		}		if (isset($this->acl_options['local'][$opt]))		{			foreach ($this->acl as $f => $bitstring)			{				// Skip global settings				if (!$f)				{					continue;				}				// as soon as the user has any permission we're done so return true				if ((!isset($this->cache[$f][$opt])) ? $this->acl_get($opt, $f) : $this->cache[$f][$opt])				{					return true;				}			}		}		else if (isset($this->acl_options['global'][$opt]))		{			return $this->acl_get($opt);		}		return false;	}	/**	* Get permission settings (more than one)	*/	function acl_gets()	{		$args = func_get_args();		$f = array_pop($args);		if (!is_numeric($f))		{			$args[] = $f;			$f = 0;		}		// alternate syntax: acl_gets(array('m_', 'a_'), $forum_id)		if (is_array($args[0]))		{			$args = $args[0];		}		$acl = 0;		foreach ($args as $opt)		{			$acl |= $this->acl_get($opt, $f);		}		return $acl;	}	/**	* Get permission listing based on user_id/options/forum_ids	*	* Be careful when using this function with permissions a_, m_, u_ and f_ !	* It may not work correctly. When a user group grants an a_* permission,	* e.g. a_foo, but the user's a_foo permission is set to "Never", then	* the user does not in fact have the a_ permission.	* But the user will still be listed as having the a_ permission.	*	* For more information see: http://tracker.phpbb.com/browse/PHPBB3-10252	*/	function acl_get_list($user_id = false, $opts = false, $forum_id = false)	{		if ($user_id !== false && !is_array($user_id) && $opts === false && $forum_id === false)		{			$hold_ary = array($user_id => $this->acl_raw_data_single_user($user_id));		}		else		{			$hold_ary = $this->acl_raw_data($user_id, $opts, $forum_id);		}		$auth_ary = array();		foreach ($hold_ary as $user_id => $forum_ary)		{			foreach ($forum_ary as $forum_id => $auth_option_ary)			{				foreach ($auth_option_ary as $auth_option => $auth_setting)				{					if ($auth_setting)					{						$auth_ary[$forum_id][$auth_option][] = $user_id;					}				}			}		}		return $auth_ary;	}	/**	* Cache data to user_permissions row	*/	function acl_cache(&$userdata)	{		global $db;		// Empty user_permissions		$userdata['user_permissions'] = '';		$hold_ary = $this->acl_raw_data_single_user($userdata['user_id']);		// Key 0 in $hold_ary are global options, all others are forum_ids		// If this user is founder we're going to force fill the admin options ...		if ($userdata['user_type'] == USER_FOUNDER)		{			foreach ($this->acl_options['global'] as $opt => $id)			{				if (strpos($opt, 'a_') === 0)				{					$hold_ary[0][$this->acl_options['id'][$opt]] = ACL_YES;				}			}		}		$hold_str = $this->build_bitstring($hold_ary);		if ($hold_str)		{			$userdata['user_permissions'] = $hold_str;			$sql = 'UPDATE ' . USERS_TABLE . "				SET user_permissions = '" . $db->sql_escape($userdata['user_permissions']) . "',					user_perm_from = 0				WHERE user_id = " . $userdata['user_id'];			$db->sql_query($sql);		}		return;	}	/**	* Build bitstring from permission set	*/	function build_bitstring(&$hold_ary)	{		$hold_str = '';		if (sizeof($hold_ary))		{			ksort($hold_ary);			$last_f = 0;			foreach ($hold_ary as $f => $auth_ary)			{				$ary_key = (!$f) ? 'global' : 'local';				$bitstring = array();				foreach ($this->acl_options[$ary_key] as $opt => $id)				{					if (isset($auth_ary[$this->acl_options['id'][$opt]]))					{						$bitstring[$id] = $auth_ary[$this->acl_options['id'][$opt]];						$option_key = substr($opt, 0, strpos($opt, '_') + 1);						// If one option is allowed, the global permission for this option has to be allowed too						// example: if the user has the a_ permission this means he has one or more a_* permissions						if ($auth_ary[$this->acl_options['id'][$opt]] == ACL_YES && (!isset($bitstring[$this->acl_options[$ary_key][$option_key]]) || $bitstring[$this->acl_options[$ary_key][$option_key]] == ACL_NEVER))						{							$bitstring[$this->acl_options[$ary_key][$option_key]] = ACL_YES;						}					}					else					{						$bitstring[$id] = ACL_NEVER;					}				}				// Now this bitstring defines the permission setting for the current forum $f (or global setting)				$bitstring = implode('', $bitstring);				// The line number indicates the id, therefore we have to add empty lines for those ids not present				$hold_str .= str_repeat("\n", $f - $last_f);				// Convert bitstring for storage - we do not use binary/bytes because PHP's string functions are not fully binary safe				for ($i = 0, $bit_length = strlen($bitstring); $i < $bit_length; $i += 31)				{					$hold_str .= str_pad(base_convert(str_pad(substr($bitstring, $i, 31), 31, 0, STR_PAD_RIGHT), 2, 36), 6, 0, STR_PAD_LEFT);				}				$last_f = $f;			}			unset($bitstring);			$hold_str = rtrim($hold_str);		}		return $hold_str;	}	/**	* Clear one or all users cached permission settings	*/	function acl_clear_prefetch($user_id = false)	{		global $db, $cache;		// Rebuild options cache		$cache->destroy('_role_cache');		$sql = 'SELECT *			FROM ' . ACL_ROLES_DATA_TABLE . '			ORDER BY role_id ASC';		$result = $db->sql_query($sql);		$this->role_cache = array();		while ($row = $db->sql_fetchrow($result))		{			$this->role_cache[$row['role_id']][$row['auth_option_id']] = (int) $row['auth_setting'];		}		$db->sql_freeresult($result);		foreach ($this->role_cache as $role_id => $role_options)		{			$this->role_cache[$role_id] = serialize($role_options);		}		$cache->put('_role_cache', $this->role_cache);		// Now empty user permissions		$where_sql = '';		if ($user_id !== false)		{			$user_id = (!is_array($user_id)) ? $user_id = array((int) $user_id) : array_map('intval', $user_id);			$where_sql = ' WHERE ' . $db->sql_in_set('user_id', $user_id);		}		$sql = 'UPDATE ' . USERS_TABLE . "			SET user_permissions = '',				user_perm_from = 0			$where_sql";		$db->sql_query($sql);		return;	}	/**	* Get assigned roles	*/	function acl_role_data($user_type, $role_type, $ug_id = false, $forum_id = false)	{		global $db;		$roles = array();		$sql_id = ($user_type == 'user') ? 'user_id' : 'group_id';		$sql_ug = ($ug_id !== false) ? ((!is_array($ug_id)) ? "AND a.$sql_id = $ug_id" : 'AND ' . $db->sql_in_set("a.$sql_id", $ug_id)) : '';		$sql_forum = ($forum_id !== false) ? ((!is_array($forum_id)) ? "AND a.forum_id = $forum_id" : 'AND ' . $db->sql_in_set('a.forum_id', $forum_id)) : '';		// Grab assigned roles...		$sql = 'SELECT a.auth_role_id, a.' . $sql_id . ', a.forum_id			FROM ' . (($user_type == 'user') ? ACL_USERS_TABLE : ACL_GROUPS_TABLE) . ' a, ' . ACL_ROLES_TABLE . " r			WHERE a.auth_role_id = r.role_id				AND r.role_type = '" . $db->sql_escape($role_type) . "'				$sql_ug				$sql_forum			ORDER BY r.role_order ASC";		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$roles[$row[$sql_id]][$row['forum_id']] = $row['auth_role_id'];		}		$db->sql_freeresult($result);		return $roles;	}	/**	* Get raw acl data based on user/option/forum	*/	function acl_raw_data($user_id = false, $opts = false, $forum_id = false)	{		global $db;		$sql_user = ($user_id !== false) ? ((!is_array($user_id)) ? 'user_id = ' . (int) $user_id : $db->sql_in_set('user_id', array_map('intval', $user_id))) : '';		$sql_forum = ($forum_id !== false) ? ((!is_array($forum_id)) ? 'AND a.forum_id = ' . (int) $forum_id : 'AND ' . $db->sql_in_set('a.forum_id', array_map('intval', $forum_id))) : '';		$sql_opts = $sql_opts_select = $sql_opts_from = '';		$hold_ary = array();		if ($opts !== false)		{			$sql_opts_select = ', ao.auth_option';			$sql_opts_from = ', ' . ACL_OPTIONS_TABLE . ' ao';			$this->build_auth_option_statement('ao.auth_option', $opts, $sql_opts);		}		$sql_ary = array();		// Grab non-role settings - user-specific		$sql_ary[] = 'SELECT a.user_id, a.forum_id, a.auth_setting, a.auth_option_id' . $sql_opts_select . '			FROM ' . ACL_USERS_TABLE . ' a' . $sql_opts_from . '			WHERE a.auth_role_id = 0 ' .				(($sql_opts_from) ? 'AND a.auth_option_id = ao.auth_option_id ' : '') .				(($sql_user) ? 'AND a.' . $sql_user : '') . "				$sql_forum				$sql_opts";		// Now the role settings - user-specific		$sql_ary[] = 'SELECT a.user_id, a.forum_id, r.auth_option_id, r.auth_setting, r.auth_option_id' . $sql_opts_select . '			FROM ' . ACL_USERS_TABLE . ' a, ' . ACL_ROLES_DATA_TABLE . ' r' . $sql_opts_from . '			WHERE a.auth_role_id = r.role_id ' .				(($sql_opts_from) ? 'AND r.auth_option_id = ao.auth_option_id ' : '') .				(($sql_user) ? 'AND a.' . $sql_user : '') . "				$sql_forum				$sql_opts";		foreach ($sql_ary as $sql)		{			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$option = ($sql_opts_select) ? $row['auth_option'] : $this->acl_options['option'][$row['auth_option_id']];				$hold_ary[$row['user_id']][$row['forum_id']][$option] = $row['auth_setting'];			}			$db->sql_freeresult($result);		}		$sql_ary = array();		// Now grab group settings - non-role specific...		$sql_ary[] = 'SELECT ug.user_id, a.forum_id, a.auth_setting, a.auth_option_id' . $sql_opts_select . '			FROM ' . ACL_GROUPS_TABLE . ' a, ' . USER_GROUP_TABLE . ' ug, ' . GROUPS_TABLE . ' g' . $sql_opts_from . '			WHERE a.auth_role_id = 0 ' .				(($sql_opts_from) ? 'AND a.auth_option_id = ao.auth_option_id ' : '') . '				AND a.group_id = ug.group_id				AND g.group_id = ug.group_id				AND ug.user_pending = 0				AND NOT (ug.group_leader = 1 AND g.group_skip_auth = 1)				' . (($sql_user) ? 'AND ug.' . $sql_user : '') . "				$sql_forum				$sql_opts";		// Now grab group settings - role specific...		$sql_ary[] = 'SELECT ug.user_id, a.forum_id, r.auth_setting, r.auth_option_id' . $sql_opts_select . '			FROM ' . ACL_GROUPS_TABLE . ' a, ' . USER_GROUP_TABLE . ' ug, ' . GROUPS_TABLE . ' g, ' . ACL_ROLES_DATA_TABLE . ' r' . $sql_opts_from . '			WHERE a.auth_role_id = r.role_id ' .				(($sql_opts_from) ? 'AND r.auth_option_id = ao.auth_option_id ' : '') . '				AND a.group_id = ug.group_id				AND g.group_id = ug.group_id				AND ug.user_pending = 0				AND NOT (ug.group_leader = 1 AND g.group_skip_auth = 1)				' . (($sql_user) ? 'AND ug.' . $sql_user : '') . "				$sql_forum				$sql_opts";		foreach ($sql_ary as $sql)		{			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$option = ($sql_opts_select) ? $row['auth_option'] : $this->acl_options['option'][$row['auth_option_id']];				if (!isset($hold_ary[$row['user_id']][$row['forum_id']][$option]) || (isset($hold_ary[$row['user_id']][$row['forum_id']][$option]) && $hold_ary[$row['user_id']][$row['forum_id']][$option] != ACL_NEVER))				{					$hold_ary[$row['user_id']][$row['forum_id']][$option] = $row['auth_setting'];					// If we detect ACL_NEVER, we will unset the flag option (within building the bitstring it is correctly set again)					if ($row['auth_setting'] == ACL_NEVER)					{						$flag = substr($option, 0, strpos($option, '_') + 1);						if (isset($hold_ary[$row['user_id']][$row['forum_id']][$flag]) && $hold_ary[$row['user_id']][$row['forum_id']][$flag] == ACL_YES)						{							unset($hold_ary[$row['user_id']][$row['forum_id']][$flag]);/*							if (in_array(ACL_YES, $hold_ary[$row['user_id']][$row['forum_id']]))							{								$hold_ary[$row['user_id']][$row['forum_id']][$flag] = ACL_YES;							}*/						}					}				}			}			$db->sql_freeresult($result);		}		return $hold_ary;	}	/**	* Get raw user based permission settings	*/	function acl_user_raw_data($user_id = false, $opts = false, $forum_id = false)	{		global $db;		$sql_user = ($user_id !== false) ? ((!is_array($user_id)) ? 'user_id = ' . (int) $user_id : $db->sql_in_set('user_id', array_map('intval', $user_id))) : '';		$sql_forum = ($forum_id !== false) ? ((!is_array($forum_id)) ? 'AND a.forum_id = ' . (int) $forum_id : 'AND ' . $db->sql_in_set('a.forum_id', array_map('intval', $forum_id))) : '';		$sql_opts = '';		$hold_ary = $sql_ary = array();		if ($opts !== false)		{			$this->build_auth_option_statement('ao.auth_option', $opts, $sql_opts);		}		// Grab user settings - non-role specific...		$sql_ary[] = 'SELECT a.user_id, a.forum_id, a.auth_setting, a.auth_option_id, ao.auth_option			FROM ' . ACL_USERS_TABLE . ' a, ' . ACL_OPTIONS_TABLE . ' ao			WHERE a.auth_role_id = 0				AND a.auth_option_id = ao.auth_option_id ' .				(($sql_user) ? 'AND a.' . $sql_user : '') . "				$sql_forum				$sql_opts			ORDER BY a.forum_id, ao.auth_option";		// Now the role settings - user-specific		$sql_ary[] = 'SELECT a.user_id, a.forum_id, r.auth_option_id, r.auth_setting, r.auth_option_id, ao.auth_option			FROM ' . ACL_USERS_TABLE . ' a, ' . ACL_ROLES_DATA_TABLE . ' r, ' . ACL_OPTIONS_TABLE . ' ao			WHERE a.auth_role_id = r.role_id				AND r.auth_option_id = ao.auth_option_id ' .				(($sql_user) ? 'AND a.' . $sql_user : '') . "				$sql_forum				$sql_opts			ORDER BY a.forum_id, ao.auth_option";		foreach ($sql_ary as $sql)		{			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$hold_ary[$row['user_id']][$row['forum_id']][$row['auth_option']] = $row['auth_setting'];			}			$db->sql_freeresult($result);		}		return $hold_ary;	}	/**	* Get raw group based permission settings	*/	function acl_group_raw_data($group_id = false, $opts = false, $forum_id = false)	{		global $db;		$sql_group = ($group_id !== false) ? ((!is_array($group_id)) ? 'group_id = ' . (int) $group_id : $db->sql_in_set('group_id', array_map('intval', $group_id))) : '';		$sql_forum = ($forum_id !== false) ? ((!is_array($forum_id)) ? 'AND a.forum_id = ' . (int) $forum_id : 'AND ' . $db->sql_in_set('a.forum_id', array_map('intval', $forum_id))) : '';		$sql_opts = '';		$hold_ary = $sql_ary = array();		if ($opts !== false)		{			$this->build_auth_option_statement('ao.auth_option', $opts, $sql_opts);		}		// Grab group settings - non-role specific...		$sql_ary[] = 'SELECT a.group_id, a.forum_id, a.auth_setting, a.auth_option_id, ao.auth_option			FROM ' . ACL_GROUPS_TABLE . ' a, ' . ACL_OPTIONS_TABLE . ' ao			WHERE a.auth_role_id = 0				AND a.auth_option_id = ao.auth_option_id ' .				(($sql_group) ? 'AND a.' . $sql_group : '') . "				$sql_forum				$sql_opts			ORDER BY a.forum_id, ao.auth_option";		// Now grab group settings - role specific...		$sql_ary[] = 'SELECT a.group_id, a.forum_id, r.auth_setting, r.auth_option_id, ao.auth_option			FROM ' . ACL_GROUPS_TABLE . ' a, ' . ACL_ROLES_DATA_TABLE . ' r, ' . ACL_OPTIONS_TABLE . ' ao			WHERE a.auth_role_id = r.role_id				AND r.auth_option_id = ao.auth_option_id ' .				(($sql_group) ? 'AND a.' . $sql_group : '') . "				$sql_forum				$sql_opts			ORDER BY a.forum_id, ao.auth_option";		foreach ($sql_ary as $sql)		{			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$hold_ary[$row['group_id']][$row['forum_id']][$row['auth_option']] = $row['auth_setting'];			}			$db->sql_freeresult($result);		}		return $hold_ary;	}	/**	* Get raw acl data based on user for caching user_permissions	* This function returns the same data as acl_raw_data(), but without the user id as the first key within the array.	*/	function acl_raw_data_single_user($user_id)	{		global $db, $cache;		// Check if the role-cache is there		if (($this->role_cache = $cache->get('_role_cache')) === false)		{			$this->role_cache = array();			// We pre-fetch roles			$sql = 'SELECT *				FROM ' . ACL_ROLES_DATA_TABLE . '				ORDER BY role_id ASC';			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$this->role_cache[$row['role_id']][$row['auth_option_id']] = (int) $row['auth_setting'];			}			$db->sql_freeresult($result);			foreach ($this->role_cache as $role_id => $role_options)			{				$this->role_cache[$role_id] = serialize($role_options);			}			$cache->put('_role_cache', $this->role_cache);		}		$hold_ary = array();		// Grab user-specific permission settings		$sql = 'SELECT forum_id, auth_option_id, auth_role_id, auth_setting			FROM ' . ACL_USERS_TABLE . '			WHERE user_id = ' . $user_id;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			// If a role is assigned, assign all options included within this role. Else, only set this one option.			if ($row['auth_role_id'])			{				$hold_ary[$row['forum_id']] = (empty($hold_ary[$row['forum_id']])) ? unserialize($this->role_cache[$row['auth_role_id']]) : $hold_ary[$row['forum_id']] + unserialize($this->role_cache[$row['auth_role_id']]);			}			else			{				$hold_ary[$row['forum_id']][$row['auth_option_id']] = $row['auth_setting'];			}		}		$db->sql_freeresult($result);		// Now grab group-specific permission settings		$sql = 'SELECT a.forum_id, a.auth_option_id, a.auth_role_id, a.auth_setting			FROM ' . ACL_GROUPS_TABLE . ' a, ' . USER_GROUP_TABLE . ' ug, ' . GROUPS_TABLE . ' g			WHERE a.group_id = ug.group_id				AND g.group_id = ug.group_id				AND ug.user_pending = 0				AND NOT (ug.group_leader = 1 AND g.group_skip_auth = 1)				AND ug.user_id = ' . $user_id;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if (!$row['auth_role_id'])			{				$this->_set_group_hold_ary($hold_ary[$row['forum_id']], $row['auth_option_id'], $row['auth_setting']);			}			else if (!empty($this->role_cache[$row['auth_role_id']]))			{				foreach (unserialize($this->role_cache[$row['auth_role_id']]) as $option_id => $setting)				{					$this->_set_group_hold_ary($hold_ary[$row['forum_id']], $option_id, $setting);				}			}		}		$db->sql_freeresult($result);		return $hold_ary;	}	/**	* Private function snippet for setting a specific piece of the hold_ary	*/	function _set_group_hold_ary(&$hold_ary, $option_id, $setting)	{		if (!isset($hold_ary[$option_id]) || (isset($hold_ary[$option_id]) && $hold_ary[$option_id] != ACL_NEVER))		{			$hold_ary[$option_id] = $setting;			// If we detect ACL_NEVER, we will unset the flag option (within building the bitstring it is correctly set again)			if ($setting == ACL_NEVER)			{				$flag = substr($this->acl_options['option'][$option_id], 0, strpos($this->acl_options['option'][$option_id], '_') + 1);				$flag = (int) $this->acl_options['id'][$flag];				if (isset($hold_ary[$flag]) && $hold_ary[$flag] == ACL_YES)				{					unset($hold_ary[$flag]);/*					This is uncommented, because i suspect this being slightly wrong due to mixed permission classes being possible					if (in_array(ACL_YES, $hold_ary))					{						$hold_ary[$flag] = ACL_YES;					}*/				}			}		}	}	/**	* Authentication plug-ins is largely down to Sergey Kanareykin, our thanks to him.	*/	function login($username, $password, $autologin = false, $viewonline = 1, $admin = 0)	{		global $config, $db, $user, $phpbb_root_path, $phpEx;		$method = trim(basename($config['auth_method']));		include_once($phpbb_root_path . 'includes/auth/auth_' . $method . '.' . $phpEx);		$method = 'login_' . $method;		if (function_exists($method))		{			$login = $method($username, $password, $user->ip, $user->browser, $user->forwarded_for);			// If the auth module wants us to create an empty profile do so and then treat the status as LOGIN_SUCCESS			if ($login['status'] == LOGIN_SUCCESS_CREATE_PROFILE)			{				// we are going to use the user_add function so include functions_user.php if it wasn't defined yet				if (!function_exists('user_add'))				{					include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				}				user_add($login['user_row'], (isset($login['cp_data'])) ? $login['cp_data'] : false);				$sql = 'SELECT user_id, username, user_password, user_passchg, user_email, user_type					FROM ' . USERS_TABLE . "					WHERE username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					return array(						'status'		=> LOGIN_ERROR_EXTERNAL_AUTH,						'error_msg'		=> 'AUTH_NO_PROFILE_CREATED',						'user_row'		=> array('user_id' => ANONYMOUS),					);				}				$login = array(					'status'	=> LOGIN_SUCCESS,					'error_msg'	=> false,					'user_row'	=> $row,				);			}			// If login succeeded, we will log the user in... else we pass the login array through...			if ($login['status'] == LOGIN_SUCCESS)			{				$old_session_id = $user->session_id;				if ($admin)				{					global $SID, $_SID;					$cookie_expire = time() - 31536000;					$user->set_cookie('u', '', $cookie_expire);					$user->set_cookie('sid', '', $cookie_expire);					unset($cookie_expire);					$SID = '?sid=';					$user->session_id = $_SID = '';				}				$result = $user->session_create($login['user_row']['user_id'], $admin, $autologin, $viewonline);				// Successful session creation				if ($result === true)				{					// If admin re-authentication we remove the old session entry because a new one has been created...					if ($admin)					{						// the login array is used because the user ids do not differ for re-authentication						$sql = 'DELETE FROM ' . SESSIONS_TABLE . "							WHERE session_id = '" . $db->sql_escape($old_session_id) . "'							AND session_user_id = {$login['user_row']['user_id']}";						$db->sql_query($sql);					}					return array(						'status'		=> LOGIN_SUCCESS,						'error_msg'		=> false,						'user_row'		=> $login['user_row'],					);				}				return array(					'status'		=> LOGIN_BREAK,					'error_msg'		=> $result,					'user_row'		=> $login['user_row'],				);			}			return $login;		}		trigger_error('Authentication method not found', E_USER_ERROR);	}	/**	* Fill auth_option statement for later querying based on the supplied options	*/	function build_auth_option_statement($key, $auth_options, &$sql_opts)	{		global $db;		if (!is_array($auth_options))		{			if (strpos($auth_options, '%') !== false)			{				$sql_opts = "AND $key " . $db->sql_like_expression(str_replace('%', $db->any_char, $auth_options));			}			else			{				$sql_opts = "AND $key = '" . $db->sql_escape($auth_options) . "'";			}		}		else		{			$is_like_expression = false;			foreach ($auth_options as $option)			{				if (strpos($option, '%') !== false)				{					$is_like_expression = true;				}			}			if (!$is_like_expression)			{				$sql_opts = 'AND ' . $db->sql_in_set($key, $auth_options);			}			else			{				$sql = array();				foreach ($auth_options as $option)				{					if (strpos($option, '%') !== false)					{						$sql[] = $key . ' ' . $db->sql_like_expression(str_replace('%', $db->any_char, $option));					}					else					{						$sql[] = $key . " = '" . $db->sql_escape($option) . "'";					}				}				$sql_opts = 'AND (' . implode(' OR ', $sql) . ')';			}		}	}}?>
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'20',''=>'30',''=>'40',''=>'50',''=>'60',''=>'70',''=>'80',''=>'90',''=>'100',''=>'200',''=>'300',''=>'400',''=>'500',''=>'600',''=>'700',''=>'800',''=>'900',''=>'1000',''=>'2000',''=>'3000',''=>'4000',''=>'5000',''=>'6000',''=>'7000',''=>'8000',''=>'9000',''=>'10000',''=>'20000',''=>'30000',''=>'40000',''=>'50000',''=>'60000',''=>'70000',''=>'80000',''=>'90000',''=>'1/4',''=>'1/2',''=>'1',''=>'5',''=>'50',''=>'500',''=>'5000',''=>'50000',''=>'5',''=>'10',''=>'50',''=>'100',''=>'500',''=>'1000',''=>'5000',''=>'5',''=>'10',''=>'50',''=>'100',''=>'500',''=>'1000',''=>'10000',''=>'50000',''=>'10',''=>'1',''=>'1',''=>'1',''=>'2',''=>'2',''=>'2',''=>'2',''=>'5',''=>'10',''=>'10',''=>'10',''=>'10',''=>'10',''=>'30',''=>'50',''=>'50',''=>'50',''=>'50',''=>'100',''=>'300',''=>'500',''=>'500',''=>'500',''=>'500',''=>'500',''=>'1000',''=>'5000',''=>'5',''=>'50',''=>'1/2',''=>'1/2',''=>'2/3',''=>'3/4',''=>'0',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'5',''=>'10',''=>'50',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'90',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'900',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'10',''=>'20',''=>'100',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9');
<?php/**** install [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ADMIN_CONFIG'				=> 'Administrator configuration',	'ADMIN_PASSWORD'			=> 'Administrator password',	'ADMIN_PASSWORD_CONFIRM'	=> 'Confirm administrator password',	'ADMIN_PASSWORD_EXPLAIN'	=> 'Please enter a password between 6 and 30 characters in length.',	'ADMIN_TEST'				=> 'Check administrator settings',	'ADMIN_USERNAME'			=> 'Administrator username',	'ADMIN_USERNAME_EXPLAIN'	=> 'Please enter a username between 3 and 20 characters in length.',	'APP_MAGICK'				=> 'Imagemagick support [ Attachments ]',	'AUTHOR_NOTES'				=> 'Author notes<br /> %s',	'AVAILABLE'					=> 'Available',	'AVAILABLE_CONVERTORS'		=> 'Available convertors',	'BEGIN_CONVERT'					=> 'Begin conversion',	'BLANK_PREFIX_FOUND'			=> 'A scan of your tables has shown a valid installation using no table prefix.',	'BOARD_NOT_INSTALLED'			=> 'No installation found',	'BOARD_NOT_INSTALLED_EXPLAIN'	=> 'The phpBB Unified Convertor Framework requires a default installation of phpBB3 to function, please <a href="%s">proceed by first installing phpBB3</a>.',	'CATEGORY'					=> 'Category',	'CACHE_STORE'				=> 'Cache type',	'CACHE_STORE_EXPLAIN'		=> 'The physical location where data is cached, filesystem is preferred.',	'CAT_CONVERT'				=> 'Convert',	'CAT_INSTALL'				=> 'Install',	'CAT_OVERVIEW'				=> 'Overview',	'CAT_UPDATE'				=> 'Update',	'CHANGE'					=> 'Change',	'CHECK_TABLE_PREFIX'		=> 'Please check your table prefix and try again.',	'CLEAN_VERIFY'				=> 'Cleaning up and verifying the final structure',	'CLEANING_USERNAMES'		=> 'Cleaning usernames',	'COLLIDING_CLEAN_USERNAME'	=> '<strong>%s</strong> is the clean username for:',	'COLLIDING_USERNAMES_FOUND'	=> 'Colliding usernames were found on your old board. In order to complete the conversion please delete or rename these users so that there is only one user on your old board for each clean username.',	'COLLIDING_USER'			=> ' user id: <strong>%d</strong> username: <strong>%s</strong> (%d posts)',	'CONFIG_CONVERT'			=> 'Converting the configuration',	'CONFIG_FILE_UNABLE_WRITE'	=> 'It was not possible to write the configuration file. Alternative methods for this file to be created are presented below.',	'CONFIG_FILE_WRITTEN'		=> 'The configuration file has been written. You may now proceed to the next step of the installation.',	'CONFIG_PHPBB_EMPTY'		=> 'The phpBB3 config variable for %s is empty.',	'CONFIG_RETRY'				=> 'Retry',	'CONTACT_EMAIL_CONFIRM'		=> 'Confirm contact e-mail',	'CONTINUE_CONVERT'			=> 'Continue conversion',	'CONTINUE_CONVERT_BODY'		=> 'A previous conversion attempt has been determined. You are now able to choose between starting a new conversion or continuing the conversion.',	'CONTINUE_LAST'				=> 'Continue last statements',	'CONTINUE_OLD_CONVERSION'	=> 'Continue previously started conversion',	'CONVERT'					=> 'Convert',	'CONVERT_COMPLETE'			=> 'Conversion completed',	'CONVERT_COMPLETE_EXPLAIN'	=> 'You have now successfully converted your board to phpBB 3.0. You can now login and <a href="../">access your board</a>. Please ensure that the settings were transferred correctly before enabling your board by deleting the install directory. Remember that help on using phpBB is available online via the <a href="http://www.phpbb.com/support/documentation/3.0/">Documentation</a> and the <a href="http://www.phpbb.com/community/viewforum.php?f=46">support forums</a>.',	'CONVERT_INTRO'				=> 'Welcome to the phpBB Unified Convertor Framework',	'CONVERT_INTRO_BODY'		=> 'From here, you are able to import data from other (installed) board systems. The list below shows all the conversion modules currently available. If there is no convertor shown in this list for the board software you wish to convert from, please check our website where further conversion modules may be available for download.',	'CONVERT_NEW_CONVERSION'	=> 'New conversion',	'CONVERT_NOT_EXIST'			=> 'The specified convertor does not exist.',	'CONVERT_OPTIONS'			=> 'Options',	'CONVERT_SETTINGS_VERIFIED'	=> 'The information you entered has been verified. To start the conversion process, please push the button below.',	'CONV_ERR_FATAL'			=> 'Fatal conversion error',	'CONV_ERROR_ATTACH_FTP_DIR'			=> 'FTP upload for attachments is enabled at the old board. Please disable the FTP upload option and make sure a valid upload directory is specified, then copy all attachment files to this new web accessible directory. Once you have done this, restart the convertor.',	'CONV_ERROR_CONFIG_EMPTY'			=> 'There is no configuration information available for the conversion.',	'CONV_ERROR_FORUM_ACCESS'			=> 'Unable to get forum access information.',	'CONV_ERROR_GET_CATEGORIES'			=> 'Unable to get categories.',	'CONV_ERROR_GET_CONFIG'				=> 'Could not retrieve your board configuration.',	'CONV_ERROR_COULD_NOT_READ'			=> 'Unable to access/read %s.',	'CONV_ERROR_GROUP_ACCESS'			=> 'Unable to get group authentication information.',	'CONV_ERROR_INCONSISTENT_GROUPS'	=> 'Inconsistency in groups table detected in add_bots() - you need to add all special groups if you do it manually.',	'CONV_ERROR_INSERT_BOT'				=> 'Unable to insert bot into users table.',	'CONV_ERROR_INSERT_BOTGROUP'		=> 'Unable to insert bot into bots table.',	'CONV_ERROR_INSERT_USER_GROUP'		=> 'Unable to insert user into user_group table.',	'CONV_ERROR_MESSAGE_PARSER'			=> 'Message parser error',	'CONV_ERROR_NO_AVATAR_PATH'			=> 'Note to developer: you must specify $convertor[\'avatar_path\'] to use %s.',	'CONV_ERROR_NO_FORUM_PATH'			=> 'The relative path to the source board has not been specified.',	'CONV_ERROR_NO_GALLERY_PATH'		=> 'Note to developer: you must specify $convertor[\'avatar_gallery_path\'] to use %s.',	'CONV_ERROR_NO_GROUP'				=> 'Group %1$s could not be found in %2$s.',	'CONV_ERROR_NO_RANKS_PATH'			=> 'Note to developer: you must specify $convertor[\'ranks_path\'] to use %s.',	'CONV_ERROR_NO_SMILIES_PATH'		=> 'Note to developer: you must specify $convertor[\'smilies_path\'] to use %s.',	'CONV_ERROR_NO_UPLOAD_DIR'			=> 'Note to developer: you must specify $convertor[\'upload_path\'] to use %s.',	'CONV_ERROR_PERM_SETTING'			=> 'Unable to insert/update permission setting.',	'CONV_ERROR_PM_COUNT'				=> 'Unable to select folder pm count.',	'CONV_ERROR_REPLACE_CATEGORY'		=> 'Unable to insert new forum replacing old category.',	'CONV_ERROR_REPLACE_FORUM'			=> 'Unable to insert new forum replacing old forum.',	'CONV_ERROR_USER_ACCESS'			=> 'Unable to get user authentication information.',	'CONV_ERROR_WRONG_GROUP'			=> 'Wrong group %1$s defined in %2$s.',	'CONV_OPTIONS_BODY'					=> 'This page collects the data required to access the source board. Enter the database details of your former board; the converter will not change anything in the database given below. The source board should be disabled to allow a consistent conversion.',	'CONV_SAVED_MESSAGES'				=> 'Saved messages',	'COULD_NOT_COPY'			=> 'Could not copy file <strong>%1$s</strong> to <strong>%2$s</strong><br /><br />Please check that the target directory exists and is writable by the webserver.',	'COULD_NOT_FIND_PATH'		=> 'Could not find path to your former board. Please check your settings and try again.<br /> %s was specified as the source path.',	'DBMS'						=> 'Database type',	'DB_CONFIG'					=> 'Database configuration',	'DB_CONNECTION'				=> 'Database connection',	'DB_ERR_INSERT'				=> 'Error while processing <code>INSERT</code> query.',	'DB_ERR_LAST'				=> 'Error while processing <var>query_last</var>.',	'DB_ERR_QUERY_FIRST'		=> 'Error while executing <var>query_first</var>.',	'DB_ERR_QUERY_FIRST_TABLE'	=> 'Error while executing <var>query_first</var>, %s (%s).',	'DB_ERR_SELECT'				=> 'Error while running <code>SELECT</code> query.',	'DB_HOST'					=> 'Database server hostname or DSN',	'DB_HOST_EXPLAIN'			=> 'DSN stands for Data Source Name and is relevant only for ODBC installs. On PostgreSQL, use localhost to connect to the local server via UNIX domain socket and 127.0.0.1 to connect via TCP. For SQLite, enter the full path to your database file.',	'DB_NAME'					=> 'Database name',	'DB_PASSWORD'				=> 'Database password',	'DB_PORT'					=> 'Database server port',	'DB_PORT_EXPLAIN'			=> 'Leave this blank unless you know the server operates on a non-standard port.',	'DB_UPDATE_NOT_SUPPORTED'	=> 'We are sorry, but this script does not support updating from versions of phpBB prior to %1$s. The version you currently have installed is %2$s. Please update to a previous version before running this script. Assistance with this is available in the Support Forum on phpBB.com.',	'DB_USERNAME'				=> 'Database username',	'DB_TEST'					=> 'Test connection',	'DEFAULT_LANG'				=> 'Default board language',	'DEFAULT_PREFIX_IS'			=> 'The convertor was not able to find tables with the specified prefix. Please make sure you have entered the correct details for the board you are converting from. The default table prefix for %1$s is <strong>%2$s</strong>.',	'DEV_NO_TEST_FILE'			=> 'No value has been specified for the test_file variable in the convertor. If you are a user of this convertor, you should not be seeing this error, please report this message to the convertor author. If you are a convertor author, you must specify the name of a file which exists in the source board to allow the path to it to be verified.',	'DIRECTORIES_AND_FILES'		=> 'Directory and file setup',	'DISABLE_KEYS'				=> 'Disabling keys',	'DLL_FIREBIRD'				=> 'Firebird',	'DLL_FTP'					=> 'Remote FTP support [ Installation ]',	'DLL_GD'					=> 'GD graphics support [ Visual Confirmation ]',	'DLL_MBSTRING'				=> 'Multi-byte character support',	'DLL_MSSQL'					=> 'MSSQL Server 2000+',	'DLL_MSSQL_ODBC'			=> 'MSSQL Server 2000+ via ODBC',	'DLL_MSSQLNATIVE'			=> 'MSSQL Server 2005+ [ Native ]',	'DLL_MYSQL'					=> 'MySQL',	'DLL_MYSQLI'				=> 'MySQL with MySQLi Extension',	'DLL_ORACLE'				=> 'Oracle',	'DLL_POSTGRES'				=> 'PostgreSQL',	'DLL_SQLITE'				=> 'SQLite',	'DLL_XML'					=> 'XML support [ Jabber ]',	'DLL_ZLIB'					=> 'zlib compression support [ gz, .tar.gz, .zip ]',	'DL_CONFIG'					=> 'Download config',	'DL_CONFIG_EXPLAIN'			=> 'You may download the complete config.php to your own PC. You will then need to upload the file manually, replacing any existing config.php in your phpBB 3.0 root directory. Please remember to upload the file in ASCII format (see your FTP application documentation if you are unsure how to achieve this). When you have uploaded the config.php please click Done to move to the next stage.',	'DL_DOWNLOAD'				=> 'Download',	'DONE'						=> 'Done',	'ENABLE_KEYS'				=> 'Re-enabling keys. This can take a while.',	'FILES_OPTIONAL'			=> 'Optional files and directories',	'FILES_OPTIONAL_EXPLAIN'	=> '<strong>Optional</strong> - These files, directories or permission settings are not required. The installation system will attempt to use various techniques to create them if they do not exist or cannot be written to. However, the presence of these will speed installation.',	'FILES_REQUIRED'			=> 'Files and Directories',	'FILES_REQUIRED_EXPLAIN'	=> '<strong>Required</strong> - In order to function correctly phpBB needs to be able to access or write to certain files or directories. If you see Not Found you need to create the relevant file or directory. If you see Unwritable you need to change the permissions on the file or directory to allow phpBB to write to it.',	'FILLING_TABLE'				=> 'Filling table <strong>%s</strong>',	'FILLING_TABLES'			=> 'Filling tables',	'FIREBIRD_DBMS_UPDATE_REQUIRED'		=> 'phpBB no longer supports Firebird/Interbase prior to Version 2.1. Please update your Firebird installation to at least 2.1.0 before proceeding with the update.',	'FINAL_STEP'				=> 'Process final step',	'FORUM_ADDRESS'				=> 'Board address',	'FORUM_ADDRESS_EXPLAIN'		=> 'This is the URL of your former board, for example <samp>http://www.example.com/phpBB2/</samp>. If an address is entered here and not left empty every instance of this address will be replaced by your new board address within messages, private messages and signatures.',	'FORUM_PATH'				=> 'Board path',	'FORUM_PATH_EXPLAIN'		=> 'This is the <strong>relative</strong> path on disk to your former board from the <strong>root of this phpBB3 installation</strong>.',	'FOUND'						=> 'Found',	'FTP_CONFIG'				=> 'Transfer config by FTP',	'FTP_CONFIG_EXPLAIN'		=> 'phpBB has detected the presence of the FTP module on this server. You may attempt to install your config.php via this if you wish. You will need to supply the information listed below. Remember your username and password are those to your server! (ask your hosting provider for details if you are unsure what these are).',	'FTP_PATH'					=> 'FTP path',	'FTP_PATH_EXPLAIN'			=> 'This is the path from your root directory to that of phpBB, e.g. <samp>htdocs/phpBB3/</samp>.',	'FTP_UPLOAD'				=> 'Upload',	'GPL'						=> 'General Public License',	'INITIAL_CONFIG'			=> 'Basic configuration',	'INITIAL_CONFIG_EXPLAIN'	=> 'Now that install has determined your server can run phpBB you need to supply some specific information. If you do not know how to connect to your database please contact your hosting provider (in the first instance) or use the phpBB support forums. When entering data please ensure you check it thoroughly before continuing.',	'INSTALL_CONGRATS'			=> 'Congratulations!',	'INSTALL_CONGRATS_EXPLAIN'	=> '		You have successfully installed phpBB %1$s. Please proceed by choosing one of the following options:</p>		<h2>Convert an existing board to phpBB3</h2>		<p>The phpBB Unified Convertor Framework supports the conversion of phpBB 2.0.x and other board systems to phpBB3. If you have an existing board that you wish to convert, please <a href="%2$s">proceed to the convertor</a>.</p>		<h2>Go live with your phpBB3!</h2>		<p>Clicking the button below will take you to a form for submitting statistical data to phpBB in your Administration Control Panel (ACP). We would appreciate it if you could help us by sending that information. Afterwards you should take some time to examine the options available to you. Remember that help is available online via the <a href="http://www.phpbb.com/support/documentation/3.0/">Documentation</a>, <a href="%3$s">README</a> and the <a href="http://www.phpbb.com/community/viewforum.php?f=46">Support Forums</a>.</p><p><strong>Please delete, move or rename the install directory before using your board. While this directory exists, only the Administration Control Panel (ACP) will be accessible.</strong>',	'INSTALL_INTRO'				=> 'Welcome to Installation',	'INSTALL_INTRO_BODY'		=> 'With this option, it is possible to install phpBB3 onto your server.</p><p>In order to proceed, you will need your database settings. If you do not know your database settings, please contact your host and ask for them. You will not be able to continue without them. You need:</p>	<ul>		<li>The Database Type - the database you will be using.</li>		<li>The Database server hostname or DSN - the address of the database server.</li>		<li>The Database server port - the port of the database server (most of the time this is not needed).</li>		<li>The Database name - the name of the database on the server.</li>		<li>The Database username and Database password - the login data to access the database.</li>	</ul>	<p><strong>Note:</strong> if you are installing using SQLite, you should enter the full path to your database file in the DSN field and leave the username and password fields blank. For security reasons, you should make sure that the database file is not stored in a location accessible from the web.</p>	<p>phpBB3 supports the following databases:</p>	<ul>		<li>MySQL 3.23 or above (MySQLi supported)</li>		<li>PostgreSQL 7.3+</li>		<li>SQLite 2.8.2+</li>		<li>Firebird 2.1+</li>		<li>MS SQL Server 2000 or above (directly or via ODBC)</li>		<li>MS SQL Server 2005 or above (native)</li>		<li>Oracle</li>	</ul>	<p>Only those databases supported on your server will be displayed.',	'INSTALL_INTRO_NEXT'		=> 'To commence the installation, please press the button below.',	'INSTALL_LOGIN'				=> 'Login',	'INSTALL_NEXT'				=> 'Next stage',	'INSTALL_NEXT_FAIL'			=> 'Some tests failed and you should correct these problems before proceeding to the next stage. Failure to do so may result in an incomplete installation.',	'INSTALL_NEXT_PASS'			=> 'All the basic tests have been passed and you may proceed to the next stage of installation. If you have changed any permissions, modules, etc. and wish to re-test you can do so if you wish.',	'INSTALL_PANEL'				=> 'Installation Panel',	'INSTALL_SEND_CONFIG'		=> 'Unfortunately phpBB could not write the configuration information directly to your config.php. This may be because the file does not exist or is not writable. A number of options will be listed below enabling you to complete installation of config.php.',	'INSTALL_START'				=> 'Start install',	'INSTALL_TEST'				=> 'Test again',	'INST_ERR'					=> 'Installation error',	'INST_ERR_DB_CONNECT'		=> 'Could not connect to the database, see error message below.',	'INST_ERR_DB_FORUM_PATH'	=> 'The database file specified is within your board directory tree. You should put this file in a non web-accessible location.',	'INST_ERR_DB_INVALID_PREFIX'=> 'The prefix you entered is invalid. It must start with a letter and must only contain letters, numbers and underscores.',	'INST_ERR_DB_NO_ERROR'		=> 'No error message given.',	'INST_ERR_DB_NO_MYSQLI'		=> 'The version of MySQL installed on this machine is incompatible with the MySQL with MySQLi Extension option you have selected. Please try the MySQL option instead.',	'INST_ERR_DB_NO_SQLITE'		=> 'The version of the SQLite extension you have installed is too old, it must be upgraded to at least 2.8.2.',	'INST_ERR_DB_NO_ORACLE'		=> 'The version of Oracle installed on this machine requires you to set the <var>NLS_CHARACTERSET</var> parameter to <var>UTF8</var>. Either upgrade your installation to 9.2+ or change the parameter.',	'INST_ERR_DB_NO_FIREBIRD'	=> 'The version of Firebird installed on this machine is older than 2.1, please upgrade to a newer version.',	'INST_ERR_DB_NO_FIREBIRD_PS'=> 'The database you selected for Firebird has a page size less than 8192, it must be at least 8192.',	'INST_ERR_DB_NO_POSTGRES'	=> 'The database you have selected was not created in <var>UNICODE</var> or <var>UTF8</var> encoding. Try installing with a database in <var>UNICODE</var> or <var>UTF8</var> encoding.',	'INST_ERR_DB_NO_NAME'		=> 'No database name specified.',	'INST_ERR_EMAIL_INVALID'	=> 'The e-mail address you entered is invalid.',	'INST_ERR_EMAIL_MISMATCH'	=> 'The e-mails you entered did not match.',	'INST_ERR_FATAL'			=> 'Fatal installation error',	'INST_ERR_FATAL_DB'			=> 'A fatal and unrecoverable database error has occurred. This may be because the specified user does not have appropriate permissions to <code>CREATE TABLES</code> or <code>INSERT</code> data, etc. Further information may be given below. Please contact your hosting provider in the first instance or the support forums of phpBB for further assistance.',	'INST_ERR_FTP_PATH'			=> 'Could not change to the given directory, please check the path.',	'INST_ERR_FTP_LOGIN'		=> 'Could not login to FTP server, check your username and password.',	'INST_ERR_MISSING_DATA'		=> 'You must fill out all fields in this block.',	'INST_ERR_NO_DB'			=> 'Cannot load the PHP module for the selected database type.',	'INST_ERR_PASSWORD_MISMATCH'	=> 'The passwords you entered did not match.',	'INST_ERR_PASSWORD_TOO_LONG'	=> 'The password you entered is too long. The maximum length is 30 characters.',	'INST_ERR_PASSWORD_TOO_SHORT'	=> 'The password you entered is too short. The minimum length is 6 characters.',	'INST_ERR_PREFIX'			=> 'Tables with the specified prefix already exist, please choose an alternative.',	'INST_ERR_PREFIX_INVALID'	=> 'The table prefix you have specified is invalid for your database. Please try another, removing characters such as the hyphen.',	'INST_ERR_PREFIX_TOO_LONG'	=> 'The table prefix you have specified is too long. The maximum length is %d characters.',	'INST_ERR_USER_TOO_LONG'	=> 'The username you entered is too long. The maximum length is 20 characters.',	'INST_ERR_USER_TOO_SHORT'	=> 'The username you entered is too short. The minimum length is 3 characters.',	'INVALID_PRIMARY_KEY'		=> 'Invalid primary key : %s',	'LONG_SCRIPT_EXECUTION'		=> 'Please note that this can take a while... Please do not stop the script.',	// mbstring	'MBSTRING_CHECK'						=> '<samp>mbstring</samp> extension check',	'MBSTRING_CHECK_EXPLAIN'				=> '<strong>Required</strong> - <samp>mbstring</samp> is a PHP extension that provides multibyte string functions. Certain features of mbstring are not compatible with phpBB and must be disabled.',	'MBSTRING_FUNC_OVERLOAD'				=> 'Function overloading',	'MBSTRING_FUNC_OVERLOAD_EXPLAIN'		=> '<var>mbstring.func_overload</var> must be set to either 0 or 4.',	'MBSTRING_ENCODING_TRANSLATION'			=> 'Transparent character encoding',	'MBSTRING_ENCODING_TRANSLATION_EXPLAIN'	=> '<var>mbstring.encoding_translation</var> must be set to 0.',	'MBSTRING_HTTP_INPUT'					=> 'HTTP input character conversion',	'MBSTRING_HTTP_INPUT_EXPLAIN'			=> '<var>mbstring.http_input</var> must be set to <samp>pass</samp>.',	'MBSTRING_HTTP_OUTPUT'					=> 'HTTP output character conversion',	'MBSTRING_HTTP_OUTPUT_EXPLAIN'			=> '<var>mbstring.http_output</var> must be set to <samp>pass</samp>.',	'MAKE_FOLDER_WRITABLE'		=> 'Please make sure that this folder exists and is writable by the webserver then try again:<br /><strong>%s</strong>.',	'MAKE_FOLDERS_WRITABLE'		=> 'Please make sure that these folders exist and are writable by the webserver then try again:<br /><strong>%s</strong>.',	'MYSQL_SCHEMA_UPDATE_REQUIRED'	=> 'Your MySQL database schema for phpBB is outdated. phpBB detected a schema for MySQL 3.x/4.x, but the server runs on MySQL %2$s.<br /><strong>Before you proceed the update, you need to upgrade the schema.</strong><br /><br />Please refer to the <a href="http://www.phpbb.com/kb/article/doesnt-have-a-default-value-errors/">Knowledge Base article about upgrading the MySQL schema</a>. If you encounter problems, please use <a href="http://www.phpbb.com/community/viewforum.php?f=46">our support forums</a>.',	'NAMING_CONFLICT'			=> 'Naming conflict: %s and %s are both aliases<br /><br />%s',	'NEXT_STEP'					=> 'Proceed to next step',	'NOT_FOUND'					=> 'Cannot find',	'NOT_UNDERSTAND'			=> 'Could not understand %s #%d, table %s (%s)',	'NO_CONVERTORS'				=> 'No convertors are available for use.',	'NO_CONVERT_SPECIFIED'		=> 'No convertor specified.',	'NO_LOCATION'				=> 'Cannot determine location. If you know Imagemagick is installed, you may specify the location later within your administration control panel',	'NO_TABLES_FOUND'			=> 'No tables found.',	'OVERVIEW_BODY'				=> 'Welcome to phpBB3!<br /><br />phpBB is the most widely used open source bulletin board solution in the world. phpBB3 is the latest installment in a package line started in 2000. Like its predecessors, phpBB3 is feature-rich, user-friendly, and fully supported by the phpBB Team. phpBB3 greatly improves on what made phpBB2 popular, and adds commonly requested features that were not present in previous versions. We hope it exceeds your expectations.<br /><br />This installation system will guide you through installing phpBB3, updating to the latest version of phpBB3 from past releases, as well as converting to phpBB3 from a different discussion board system (including phpBB2). For more information, we encourage you to read <a href="../docs/INSTALL.html">the installation guide</a>.<br /><br />To read the phpBB3 license or learn about obtaining support and our stance on it, please select the respective options from the side menu. To continue, please select the appropriate tab above.',	'PCRE_UTF_SUPPORT'				=> 'PCRE UTF-8 support',	'PCRE_UTF_SUPPORT_EXPLAIN'		=> 'phpBB will <strong>not</strong> run if your PHP installation is not compiled with UTF-8 support in the PCRE extension.',	'PHP_GETIMAGESIZE_SUPPORT'			=> 'PHP function getimagesize() is available',	'PHP_GETIMAGESIZE_SUPPORT_EXPLAIN'	=> '<strong>Required</strong> - In order for phpBB to function correctly, the getimagesize function needs to be available.',	'PHP_OPTIONAL_MODULE'			=> 'Optional modules',	'PHP_OPTIONAL_MODULE_EXPLAIN'	=> '<strong>Optional</strong> - These modules or applications are optional. However, if they are available they will enable extra features.',	'PHP_SUPPORTED_DB'				=> 'Supported databases',	'PHP_SUPPORTED_DB_EXPLAIN'		=> '<strong>Required</strong> - You must have support for at least one compatible database within PHP. If no database modules are shown as available you should contact your hosting provider or review the relevant PHP installation documentation for advice.',	'PHP_REGISTER_GLOBALS'			=> 'PHP setting <var>register_globals</var> is disabled',	'PHP_REGISTER_GLOBALS_EXPLAIN'	=> 'phpBB will still run if this setting is enabled, but if possible, it is recommended that register_globals is disabled on your PHP install for security reasons.',	'PHP_SAFE_MODE'					=> 'Safe mode',	'PHP_SETTINGS'					=> 'PHP version and settings',	'PHP_SETTINGS_EXPLAIN'			=> '<strong>Required</strong> - You must be running at least version 4.3.3 of PHP in order to install phpBB. If <var>safe mode</var> is displayed below your PHP installation is running in that mode. This will impose limitations on remote administration and similar features.',	'PHP_URL_FOPEN_SUPPORT'			=> 'PHP setting <var>allow_url_fopen</var> is enabled',	'PHP_URL_FOPEN_SUPPORT_EXPLAIN'	=> '<strong>Optional</strong> - This setting is optional, however certain phpBB functions like off-site avatars will not work properly without it.',	'PHP_VERSION_REQD'				=> 'PHP version >= 4.3.3',	'POST_ID'						=> 'Post ID',	'PREFIX_FOUND'					=> 'A scan of your tables has shown a valid installation using <strong>%s</strong> as table prefix.',	'PREPROCESS_STEP'				=> 'Executing pre-processing functions/queries',	'PRE_CONVERT_COMPLETE'			=> 'All pre-conversion steps have successfully been completed. You may now begin the actual conversion process. Please note that you may have to manually do and adjust several things. After conversion, especially check the permissions assigned, rebuild your search index which is not converted and also make sure files got copied correctly, for example avatars and smilies.',	'PROCESS_LAST'					=> 'Processing last statements',	'REFRESH_PAGE'				=> 'Refresh page to continue conversion',	'REFRESH_PAGE_EXPLAIN'		=> 'If set to yes, the convertor will refresh the page to continue the conversion after having finished a step. If this is your first conversion for testing purposes and to determine any errors in advance, we suggest to set this to No.',	'REQUIREMENTS_TITLE'		=> 'Installation compatibility',	'REQUIREMENTS_EXPLAIN'		=> 'Before proceeding with the full installation phpBB will carry out some tests on your server configuration and files to ensure that you are able to install and run phpBB. Please ensure you read through the results thoroughly and do not proceed until all the required tests are passed. If you wish to use any of the features depending on the optional tests, you should ensure that these tests are passed also.',	'RETRY_WRITE'				=> 'Retry writing config',	'RETRY_WRITE_EXPLAIN'		=> 'If you wish you can change the permissions on config.php to allow phpBB to write to it. Should you wish to do that you can click Retry below to try again. Remember to return the permissions on config.php after phpBB has finished installation.',	'SCRIPT_PATH'				=> 'Script path',	'SCRIPT_PATH_EXPLAIN'		=> 'The path where phpBB is located relative to the domain name, e.g. <samp>/phpBB3</samp>.',	'SELECT_LANG'				=> 'Select language',	'SERVER_CONFIG'				=> 'Server configuration',	'SEARCH_INDEX_UNCONVERTED'	=> 'Search index was not converted',	'SEARCH_INDEX_UNCONVERTED_EXPLAIN'	=> 'Your old search index was not converted. Searching will always yield an empty result. To create a new search index go to the Administration Control Panel, select Maintenance and then choose Search index from the submenu.',	'SOFTWARE'					=> 'Board software',	'SPECIFY_OPTIONS'			=> 'Specify conversion options',	'STAGE_ADMINISTRATOR'		=> 'Administrator details',	'STAGE_ADVANCED'			=> 'Advanced settings',	'STAGE_ADVANCED_EXPLAIN'	=> 'The settings on this page are only necessary to set if you know that you require something different from the default. If you are unsure, just proceed to the next page, as these settings can be altered from the Administration Control Panel later.',	'STAGE_CONFIG_FILE'			=> 'Configuration file',	'STAGE_CREATE_TABLE'		=> 'Create database tables',	'STAGE_CREATE_TABLE_EXPLAIN'	=> 'The database tables used by phpBB 3.0 have been created and populated with some initial data. Proceed to the next screen to finish installing phpBB.',	'STAGE_DATABASE'			=> 'Database settings',	'STAGE_FINAL'				=> 'Final stage',	'STAGE_INTRO'				=> 'Introduction',	'STAGE_IN_PROGRESS'			=> 'Conversion in progress',	'STAGE_REQUIREMENTS'		=> 'Requirements',	'STAGE_SETTINGS'			=> 'Settings',	'STARTING_CONVERT'			=> 'Starting conversion process',	'STEP_PERCENT_COMPLETED'	=> 'Step <strong>%d</strong> of <strong>%d</strong>',	'SUB_INTRO'					=> 'Introduction',	'SUB_LICENSE'				=> 'License',	'SUB_SUPPORT'				=> 'Support',	'SUCCESSFUL_CONNECT'		=> 'Successful connection',	'SUPPORT_BODY'				=> 'Full support will be provided for the current stable release of phpBB3, free of charge. This includes:</p><ul><li>installation</li><li>configuration</li><li>technical questions</li><li>problems relating to potential bugs in the software</li><li>updating from Release Candidate (RC) versions to the latest stable version</li><li>converting from phpBB 2.0.x to phpBB3</li><li>converting from other discussion board software to phpBB3 (please see the <a href="http://www.phpbb.com/community/viewforum.php?f=65">Convertors Forum</a>)</li></ul><p>We encourage users still running beta versions of phpBB3 to replace their installation with a fresh copy of the latest version.</p><h2>MODs / Styles</h2><p>For issues relating to MODs, please post in the appropriate <a href="http://www.phpbb.com/community/viewforum.php?f=81">Modifications Forum</a>.<br />For issues relating to styles, templates and imagesets, please post in the appropriate <a href="http://www.phpbb.com/community/viewforum.php?f=80">Styles Forum</a>.<br /><br />If your question relates to a specific package, please post directly in the topic dedicated to the package.</p><h2>Obtaining Support</h2><p><a href="http://www.phpbb.com/community/viewtopic.php?f=14&amp;t=571070">The phpBB Welcome Package</a><br /><a href="http://www.phpbb.com/support/">Support Section</a><br /><a href="http://www.phpbb.com/support/documentation/3.0/quickstart/">Quick Start Guide</a><br /><br />To ensure you stay up to date with the latest news and releases, why not <a href="http://www.phpbb.com/support/">subscribe to our mailing list</a>?<br /><br />',	'SYNC_FORUMS'				=> 'Starting to synchronise forums',	'SYNC_POST_COUNT'			=> 'Synchronising post_counts',	'SYNC_POST_COUNT_ID'		=> 'Synchronising post_counts from <var>entry</var> %1$s to %2$s.',	'SYNC_TOPICS'				=> 'Starting to synchronise topics',	'SYNC_TOPIC_ID'				=> 'Synchronising topics from <var>topic_id</var> %1$s to %2$s.',	'TABLES_MISSING'			=> 'Could not find these tables<br /> <strong>%s</strong>.',	'TABLE_PREFIX'				=> 'Prefix for tables in database',	'TABLE_PREFIX_EXPLAIN'		=> 'The prefix must start with a letter and must only contain letters, numbers and underscores.',	'TABLE_PREFIX_SAME'			=> 'The table prefix needs to be the one used by the software you are converting from.<br /> Specified table prefix was %s.',	'TESTS_PASSED'				=> 'Tests passed',	'TESTS_FAILED'				=> 'Tests failed',	'UNABLE_WRITE_LOCK'			=> 'Unable to write lock file.',	'UNAVAILABLE'				=> 'Unavailable',	'UNWRITABLE'				=> 'Unwritable',	'UPDATE_TOPICS_POSTED'		=> 'Generating topics posted information',	'UPDATE_TOPICS_POSTED_ERR'	=> 'An error occured while generating topics posted information. You can retry this step in the ACP after the conversion process is completed.',	'VERIFY_OPTIONS'			=> 'Verifying conversion options',	'VERSION'					=> 'Version',	'WELCOME_INSTALL'			=> 'Welcome to phpBB3 Installation',	'WRITABLE'					=> 'Writable',));// Updater$lang = array_merge($lang, array(	'ALL_FILES_UP_TO_DATE'		=> 'All files are up to date with the latest phpBB version. You should now <a href="../ucp.php?mode=login">login to your board</a> and check if everything is working fine. Do not forget to delete, rename or move your install directory! Please send us updated information about your server and board configurations from the <a href="../ucp.php?mode=login&amp;redirect=adm/index.php%3Fi=send_statistics%26mode=send_statistics">Send statistics</a> module in your ACP.',	'ARCHIVE_FILE'				=> 'Source file within archive',	'BACK'				=> 'Back',	'BINARY_FILE'		=> 'Binary file',	'BOT'				=> 'Spider/Robot',	'CHANGE_CLEAN_NAMES'			=> 'The method used to make sure a username is not used by multiple users has been changed. There are some users which have the same name when compared with the new method. You have to delete or rename these users to make sure that each name is only used by one user before you can proceed.',	'CHECK_FILES'					=> 'Check files',	'CHECK_FILES_AGAIN'				=> 'Check files again',	'CHECK_FILES_EXPLAIN'			=> 'Within the next step all files will be checked against the update files - this can take a while if this is the first file check.',	'CHECK_FILES_UP_TO_DATE'		=> 'According to your database your version is up to date. You may want to proceed with the file check to make sure all files are really up to date with the latest phpBB version.',	'CHECK_UPDATE_DATABASE'			=> 'Continue update process',	'COLLECTED_INFORMATION'			=> 'File information',	'COLLECTED_INFORMATION_EXPLAIN'	=> 'The list below shows information about the files needing an update. Please read the information in front of every status block to see what they mean and what you may need to do to perform a successful update.',	'COLLECTING_FILE_DIFFS'			=> 'Collecting file differences',	'COMPLETE_LOGIN_TO_BOARD'		=> 'You should now <a href="../ucp.php?mode=login">login to your board</a> and check if everything is working fine. Do not forget to delete, rename or move your install directory!',	'CONTINUE_UPDATE_NOW'			=> 'Continue the update process now',		// Shown within the database update script at the end if called from the updater	'CONTINUE_UPDATE'				=> 'Continue update now',					// Shown after file upload to indicate the update process is not yet finished	'CURRENT_FILE'					=> 'Begin of Conflict - Original File code before update',	'CURRENT_VERSION'				=> 'Current version',	'DATABASE_TYPE'						=> 'Database type',	'DATABASE_UPDATE_INFO_OLD'			=> 'The database update file within the install directory is outdated. Please make sure you uploaded the correct version of the file.',	'DELETE_USER_REMOVE'				=> 'Delete user and remove posts',	'DELETE_USER_RETAIN'				=> 'Delete user but keep posts',	'DESTINATION'						=> 'Destination file',	'DIFF_INLINE'						=> 'Inline',	'DIFF_RAW'							=> 'Raw unified diff',	'DIFF_SEP_EXPLAIN'					=> 'Code block used within the updated/new file',	'DIFF_SIDE_BY_SIDE'					=> 'Side by Side',	'DIFF_UNIFIED'						=> 'Unified diff',	'DO_NOT_UPDATE'						=> 'Do not update this file',	'DONE'								=> 'Done',	'DOWNLOAD'							=> 'Download',	'DOWNLOAD_AS'						=> 'Download as',	'DOWNLOAD_UPDATE_METHOD_BUTTON'		=> 'Download modified files archive (recommended)',	'DOWNLOAD_CONFLICTS'				=> 'Download conflicts for this file',	'DOWNLOAD_CONFLICTS_EXPLAIN'		=> 'Search for &lt;&lt;&lt; to spot conflicts',	'DOWNLOAD_UPDATE_METHOD'			=> 'Download modified files archive',	'DOWNLOAD_UPDATE_METHOD_EXPLAIN'	=> 'Once downloaded you should unpack the archive. You will find the modified files you need to upload to your phpBB root directory within it. Please upload the files to their respective locations then. After you have uploaded all files, please check the files again with the other button below.',	'ERROR'			=> 'Error',	'EDIT_USERNAME'	=> 'Edit username',	'FILE_ALREADY_UP_TO_DATE'		=> 'File is already up to date.',	'FILE_DIFF_NOT_ALLOWED'			=> 'File not allowed to be diffed.',	'FILE_USED'						=> 'Information used from',			// Single file	'FILES_CONFLICT'				=> 'Conflict files',	'FILES_CONFLICT_EXPLAIN'		=> 'The following files are modified and do not represent the original files from the old version. phpBB determined that these files create conflicts if they are tried to be merged. Please investigate the conflicts and try to manually resolve them or continue the update choosing the preferred merging method. If you resolve the conflicts manually check the files again after you modified them. You are also able to choose between the preferred merge method for every file. The first one will result in a file where the conflicting lines from your old file will be lost, the other one will result in losing the changes from the newer file.',	'FILES_MODIFIED'				=> 'Modified files',	'FILES_MODIFIED_EXPLAIN'		=> 'The following files are modified and do not represent the original files from the old version. The updated file will be a merge between your modifications and the new file.',	'FILES_NEW'						=> 'New files',	'FILES_NEW_EXPLAIN'				=> 'The following files currently do not exist within your installation. These files will be added to your installation.',	'FILES_NEW_CONFLICT'			=> 'New conflicting files',	'FILES_NEW_CONFLICT_EXPLAIN'	=> 'The following files are new within the latest version but it has been determined that there is already a file with the same name within the same position. This file will be overwritten by the new file.',	'FILES_NOT_MODIFIED'			=> 'Not modified files',	'FILES_NOT_MODIFIED_EXPLAIN'	=> 'The following files are not modified and represent the original phpBB files from the version you want to update from.',	'FILES_UP_TO_DATE'				=> 'Already updated files',	'FILES_UP_TO_DATE_EXPLAIN'		=> 'The following files are already up to date and do not need to be updated.',	'FTP_SETTINGS'					=> 'FTP settings',	'FTP_UPDATE_METHOD'				=> 'FTP upload',	'INCOMPATIBLE_UPDATE_FILES'		=> 'The update files found are incompatible with your installed version. Your installed version is %1$s and the update file is for updating phpBB %2$s to %3$s.',	'INCOMPLETE_UPDATE_FILES'		=> 'The update files are incomplete.',	'INLINE_UPDATE_SUCCESSFUL'		=> 'The database update was successful. Now you need to continue the update process.',	'KEEP_OLD_NAME'		=> 'Keep username',	'LATEST_VERSION'		=> 'Latest version',	'LINE'					=> 'Line',	'LINE_ADDED'			=> 'Added',	'LINE_MODIFIED'			=> 'Modified',	'LINE_REMOVED'			=> 'Removed',	'LINE_UNMODIFIED'		=> 'Unmodified',	'LOGIN_UPDATE_EXPLAIN'	=> 'In order to update your installation you need to login first.',	'MAPPING_FILE_STRUCTURE'	=> 'To ease the upload here are the file locations which map your phpBB installation.',	'MERGE_MODIFICATIONS_OPTION'	=> 'Merge modifications',	'MERGE_NO_MERGE_NEW_OPTION'	=> 'Do not merge - use new file',	'MERGE_NO_MERGE_MOD_OPTION'	=> 'Do not merge - use currently installed file',	'MERGE_MOD_FILE_OPTION'		=> 'Merge modifications (removes new phpBB code within conflicting block)',	'MERGE_NEW_FILE_OPTION'		=> 'Merge modifications (removes modified code within conflicting block)',	'MERGE_SELECT_ERROR'		=> 'Conflicting file merge modes are not correctly selected.',	'MERGING_FILES'				=> 'Merging differences',	'MERGING_FILES_EXPLAIN'		=> 'Currently collecting final file changes.<br /><br />Please wait until phpBB has completed all operations on changed files.',	'NEW_FILE'						=> 'End of Conflict',	'NEW_USERNAME'					=> 'New username',	'NO_AUTH_UPDATE'				=> 'Not authorised to update',	'NO_ERRORS'						=> 'No errors',	'NO_UPDATE_FILES'				=> 'Not updating the following files',	'NO_UPDATE_FILES_EXPLAIN'		=> 'The following files are new or modified but the directory they normally reside in could not be found on your installation. If this list contains files to other directories than language/ or styles/ than you may have modified your directory structure and the update may be incomplete.',	'NO_UPDATE_FILES_OUTDATED'		=> 'No valid update directory was found, please make sure you uploaded the relevant files.<br /><br />Your installation does <strong>not</strong> seem to be up to date. Updates are available for your version of phpBB %1$s, please visit <a href="http://www.phpbb.com/downloads/" rel="external">http://www.phpbb.com/downloads/</a> to obtain the correct package to update from Version %2$s to Version %3$s.',	'NO_UPDATE_FILES_UP_TO_DATE'	=> 'Your version is up to date. There is no need to run the update tool. If you want to make an integrity check on your files make sure you uploaded the correct update files.',	'NO_UPDATE_INFO'				=> 'Update file information could not be found.',	'NO_UPDATES_REQUIRED'			=> 'No updates required',	'NO_VISIBLE_CHANGES'			=> 'No visible changes',	'NOTICE'						=> 'Notice',	'NUM_CONFLICTS'					=> 'Number of conflicts',	'NUMBER_OF_FILES_COLLECTED'		=> 'Currently differences from %1$d of %2$d files have been checked.<br />Please wait until all files are checked.',	'OLD_UPDATE_FILES'		=> 'Update files are out of date. The update files found are for updating from phpBB %1$s to phpBB %2$s but the latest version of phpBB is %3$s.',	'PACKAGE_UPDATES_TO'				=> 'Current package updates to version',	'PERFORM_DATABASE_UPDATE'			=> 'Perform database update',	'PERFORM_DATABASE_UPDATE_EXPLAIN'	=> 'Below you will find a button to the database update script. The database update can take a while, so please do not stop the execution if it seems to hang. After the database update has been performed just follow the instructions to continue the update process.',	'PREVIOUS_VERSION'					=> 'Previous version',	'PROGRESS'							=> 'Progress',	'RESULT'					=> 'Result',	'RUN_DATABASE_SCRIPT'		=> 'Update my database now',	'SELECT_DIFF_MODE'			=> 'Select diff mode',	'SELECT_DOWNLOAD_FORMAT'	=> 'Select download archive format',	'SELECT_FTP_SETTINGS'		=> 'Select FTP settings',	'SHOW_DIFF_CONFLICT'		=> 'Show differences/conflicts',	'SHOW_DIFF_FINAL'			=> 'Show resulting file',	'SHOW_DIFF_MODIFIED'		=> 'Show merged differences',	'SHOW_DIFF_NEW'				=> 'Show file contents',	'SHOW_DIFF_NEW_CONFLICT'	=> 'Show differences',	'SHOW_DIFF_NOT_MODIFIED'	=> 'Show differences',	'SOME_QUERIES_FAILED'		=> 'Some queries failed, the statements and errors are listed below.',	'SQL'						=> 'SQL',	'SQL_FAILURE_EXPLAIN'		=> 'This is probably nothing to worry about, update will continue. Should this fail to complete you may need to seek help at our support forums. See <a href="../docs/README.html">README</a> for details on how to obtain advice.',	'STAGE_FILE_CHECK'			=> 'Check files',	'STAGE_UPDATE_DB'			=> 'Update database',	'STAGE_UPDATE_FILES'		=> 'Update files',	'STAGE_VERSION_CHECK'		=> 'Version check',	'STATUS_CONFLICT'			=> 'Modified file producing conflicts',	'STATUS_MODIFIED'			=> 'Modified file',	'STATUS_NEW'				=> 'New file',	'STATUS_NEW_CONFLICT'		=> 'Conflicting new file',	'STATUS_NOT_MODIFIED'		=> 'Not modified file',	'STATUS_UP_TO_DATE'			=> 'Already updated file',	'TOGGLE_DISPLAY'			=> 'View/Hide file list',	'TRY_DOWNLOAD_METHOD'		=> 'You may want to try the download modified files method.<br />This method always works and is also the recommended update path.',	'TRY_DOWNLOAD_METHOD_BUTTON'=> 'Try this method now',	'UPDATE_COMPLETED'				=> 'Update completed',	'UPDATE_DATABASE'				=> 'Update database',	'UPDATE_DATABASE_EXPLAIN'		=> 'Within the next step the database will be updated.',	'UPDATE_DATABASE_SCHEMA'		=> 'Updating database schema',	'UPDATE_FILES'					=> 'Update files',	'UPDATE_FILES_NOTICE'			=> 'Please make sure you have updated your board files too, this file is only updating your database.',	'UPDATE_INSTALLATION'			=> 'Update phpBB installation',	'UPDATE_INSTALLATION_EXPLAIN'	=> 'With this option, it is possible to update your phpBB installation to the latest version.<br />During the process all of your files will be checked for their integrity. You are able to review all differences and files before the update.<br /><br />The file update itself can be done in two different ways.</p><h2>Manual Update</h2><p>With this update you only download your personal set of changed files to make sure you do not lose your file modifications you may have done. After you downloaded this package you need to manually upload the files to their correct position under your phpBB root directory. Once done, you are able to do the file check stage again to see if you moved the files to their correct location.</p><h2>Automatic Update with FTP</h2><p>This method is similar to the first one but without the need to download the changed files and uploading them on your own. This will be done for you. In order to use this method you need to know your FTP login details since you will be asked for them. Once finished you will be redirected to the file check again to make sure everything got updated correctly.<br /><br />',	'UPDATE_INSTRUCTIONS'			=> '		<h1>Release announcement</h1>		<p>Please read <a href="%1$s" title="%1$s"><strong>the release announcement for the latest version</strong></a> before you continue your update process, it may contain useful information. It also contains full download links as well as the change log.</p>		<br />		<h1>How to update your installation with the Automatic Update Package</h1>		<p>The recommended way of updating your installation listed here is only valid for the automatic update package. You are also able to update your installation using the methods listed within the INSTALL.html document. The steps for updating phpBB3 automatically are:</p>		<ul style="margin-left: 20px; font-size: 1.1em;">			<li>Go to the <a href="http://www.phpbb.com/downloads/" title="http://www.phpbb.com/downloads/">phpBB.com downloads page</a> and download the "Automatic Update Package" archive.<br /><br /></li>			<li>Unpack the archive.<br /><br /></li>			<li>Upload the complete uncompressed install folder to your phpBB root directory (where your config.php file is).<br /><br /></li>		</ul>		<p>Once uploaded your board will be offline for normal users due to the install directory you uploaded now present.<br /><br />		<strong><a href="%2$s" title="%2$s">Now start the update process by pointing your browser to the install folder</a>.</strong><br />		<br />		You will then be guided through the update process. You will be notified once the update is complete.		</p>	',	'UPDATE_INSTRUCTIONS_INCOMPLETE'	=> '		<h1>Incomplete update detected</h1>		<p>phpBB detected an incomplete automatic update. Please make sure you followed every step within the automatic update tool. Below you will find the link again, or go directly to your install directory.</p>	',	'UPDATE_METHOD'					=> 'Update method',	'UPDATE_METHOD_EXPLAIN'			=> 'You are now able to choose your preferred update method. Using the FTP upload will present you with a form you need to enter your FTP account details into. With this method the files will be automatically moved to the new location and backups of the old files being created by appending .bak to the filename. If you choose to download the modified files you are able to unpack and upload them to their correct location manually later.',	'UPDATE_REQUIRES_FILE'			=> 'The updater requires that the following file is present: %s',	'UPDATE_SUCCESS'				=> 'Update was successful',	'UPDATE_SUCCESS_EXPLAIN'		=> 'Successfully updated all files. The next step involves checking all files again to make sure the files got updated correctly.',	'UPDATE_VERSION_OPTIMIZE'		=> 'Updating version and optimising tables',	'UPDATING_DATA'					=> 'Updating data',	'UPDATING_TO_LATEST_STABLE'		=> 'Updating database to latest stable release',	'UPDATED_VERSION'				=> 'Updated version',	'UPGRADE_INSTRUCTIONS'			=> 'A new feature release <strong>%1$s</strong> is available. Please read <a href="%2$s" title="%2$s"><strong>the release announcement</strong></a> to learn about what it has to offer, and how to upgrade.',	'UPLOAD_METHOD'					=> 'Upload method',	'UPDATE_DB_SUCCESS'				=> 'Database update was successful.',	'USER_ACTIVE'					=> 'Active user',	'USER_INACTIVE'					=> 'Inactive user',	'VERSION_CHECK'					=> 'Version check',	'VERSION_CHECK_EXPLAIN'			=> 'Checks to see if your phpBB installation is up to date.',	'VERSION_NOT_UP_TO_DATE'		=> 'Your phpBB installation is not up to date. Please continue the update process.',	'VERSION_NOT_UP_TO_DATE_ACP'	=> 'Your phpBB installation is not up to date.<br />Below is a link to the release announcement, which contains more information as well as instructions on updating.',	'VERSION_NOT_UP_TO_DATE_TITLE'	=> 'Your phpBB installation is not up to date.',	'VERSION_UP_TO_DATE'			=> 'Your phpBB installation is up to date. Although there are no updates available at this time, you may continue in order to perform a file validity check.',	'VERSION_UP_TO_DATE_ACP'		=> 'Your phpBB installation is up to date. There are no updates available at this time.',	'VIEWING_FILE_CONTENTS'			=> 'Viewing file contents',	'VIEWING_FILE_DIFF'				=> 'Viewing file differences',	'WRONG_INFO_FILE_FORMAT'	=> 'Wrong info file format',));// Default database schema entries...$lang = array_merge($lang, array(	'CONFIG_BOARD_EMAIL_SIG'		=> 'Thanks, The Management',	'CONFIG_SITE_DESC'				=> 'A short text to describe your forum',	'CONFIG_SITENAME'				=> 'yourdomain.com',	'DEFAULT_INSTALL_POST'			=> 'This is an example post in your phpBB3 installation. Everything seems to be working. You may delete this post if you like and continue to set up your board. During the installation process your first category and your first forum are assigned an appropriate set of permissions for the predefined usergroups administrators, bots, global moderators, guests, registered users and registered COPPA users. If you also choose to delete your first category and your first forum, do not forget to assign permissions for all these usergroups for all new categories and forums you create. It is recommended to rename your first category and your first forum and copy permissions from these while creating new categories and forums. Have fun!',	'FORUMS_FIRST_CATEGORY'			=> 'Your first category',	'FORUMS_TEST_FORUM_DESC'		=> 'Description of your first forum.',	'FORUMS_TEST_FORUM_TITLE'		=> 'Your first forum',	'RANKS_SITE_ADMIN_TITLE'		=> 'Site Admin',	'REPORT_WAREZ'					=> 'The post contains links to illegal or pirated software.',	'REPORT_SPAM'					=> 'The reported post has the only purpose to advertise for a website or another product.',	'REPORT_OFF_TOPIC'				=> 'The reported post is off topic.',	'REPORT_OTHER'					=> 'The reported post does not fit into any other category, please use the further information field.',	'SMILIES_ARROW'					=> 'Arrow',	'SMILIES_CONFUSED'				=> 'Confused',	'SMILIES_COOL'					=> 'Cool',	'SMILIES_CRYING'				=> 'Crying or Very Sad',	'SMILIES_EMARRASSED'			=> 'Embarrassed',	'SMILIES_EVIL'					=> 'Evil or Very Mad',	'SMILIES_EXCLAMATION'			=> 'Exclamation',	'SMILIES_GEEK'					=> 'Geek',	'SMILIES_IDEA'					=> 'Idea',	'SMILIES_LAUGHING'				=> 'Laughing',	'SMILIES_MAD'					=> 'Mad',	'SMILIES_MR_GREEN'				=> 'Mr. Green',	'SMILIES_NEUTRAL'				=> 'Neutral',	'SMILIES_QUESTION'				=> 'Question',	'SMILIES_RAZZ'					=> 'Razz',	'SMILIES_ROLLING_EYES'			=> 'Rolling Eyes',	'SMILIES_SAD'					=> 'Sad',	'SMILIES_SHOCKED'				=> 'Shocked',	'SMILIES_SMILE'					=> 'Smile',	'SMILIES_SURPRISED'				=> 'Surprised',	'SMILIES_TWISTED_EVIL'			=> 'Twisted Evil',	'SMILIES_UBER_GEEK'				=> 'Uber Geek',	'SMILIES_VERY_HAPPY'			=> 'Very Happy',	'SMILIES_WINK'					=> 'Wink',	'TOPICS_TOPIC_TITLE'			=> 'Welcome to phpBB3',));?>
<?php/*** Adjust username_clean column.** You should make a backup from your users table in case something goes wrong*/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.'.$phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$echos = 0;$sql = 'SELECT user_id, username	FROM ' . USERS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$sql = 'UPDATE ' . USERS_TABLE . "		SET username_clean = '" . $db->sql_escape(utf8_clean_string($row['username'])) . "'		WHERE user_id = " . $row['user_id'];	$db->sql_query($sql);	if ($echos > 200)	{		echo '<br />' . "\n";		$echos = 0;	}	echo '.';	$echos++;	flush();}$db->sql_freeresult($result);echo 'FINISHED';// Done$db->sql_close();?>
<?php/**** acp_board [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// Board Settings$lang = array_merge($lang, array(	'ACP_BOARD_SETTINGS_EXPLAIN'	=> 'Here you can determine the basic operation of your board, give it a fitting name and description, and among other settings adjust the default values for timezone and language.',	'CUSTOM_DATEFORMAT'				=> 'Custom',	'DEFAULT_DATE_FORMAT'			=> 'Date format',	'DEFAULT_DATE_FORMAT_EXPLAIN'	=> 'The date format is the same as the PHP <code>date</code> function.',	'DEFAULT_LANGUAGE'				=> 'Default language',	'DEFAULT_STYLE'					=> 'Default style',	'DISABLE_BOARD'					=> 'Disable board',	'DISABLE_BOARD_EXPLAIN'			=> 'This will make the board unavailable to users. You can also enter a short (255 character) message to display if you wish.',	'OVERRIDE_STYLE'				=> 'Override user style',	'OVERRIDE_STYLE_EXPLAIN'		=> 'Replaces users style with the default.',	'SITE_DESC'						=> 'Site description',	'SITE_NAME'						=> 'Site name',	'SYSTEM_DST'					=> 'Enable Summer Time/<abbr title="Daylight Saving Time">DST</abbr>',	'SYSTEM_TIMEZONE'				=> 'Guest timezone',	'SYSTEM_TIMEZONE_EXPLAIN'			=> 'Timezone to use for displaying times to users who are not logged in (guests, bots). Logged in users set their timezone during registration and can change it in their user control panel.',	'WARNINGS_EXPIRE'				=> 'Warning duration',	'WARNINGS_EXPIRE_EXPLAIN'		=> 'Number of days that will elapse before the warning will automatically expire from a users record. Set this value to 0 to make warnings permanent.',));// Board Features$lang = array_merge($lang, array(	'ACP_BOARD_FEATURES_EXPLAIN'	=> 'Here you can enable/disable several board features.',	'ALLOW_ATTACHMENTS'			=> 'Allow attachments',	'ALLOW_BIRTHDAYS'			=> 'Allow birthdays',	'ALLOW_BIRTHDAYS_EXPLAIN'	=> 'Allow birthdays to be entered and age being displayed in profiles. Please note the birthday list within the board index is controlled by a separate load setting.',	'ALLOW_BOOKMARKS'			=> 'Allow bookmarking topics',	'ALLOW_BOOKMARKS_EXPLAIN'	=> 'User is able to store personal bookmarks.',	'ALLOW_BBCODE'				=> 'Allow BBCode',	'ALLOW_FORUM_NOTIFY'		=> 'Allow subscribing to forums',	'ALLOW_NAME_CHANGE'			=> 'Allow username changes',	'ALLOW_NO_CENSORS'			=> 'Allow disabling of word censoring',	'ALLOW_NO_CENSORS_EXPLAIN'	=> 'Users can choose to disable the automatic word censoring of posts and private messages.',	'ALLOW_PM_ATTACHMENTS'		=> 'Allow attachments in private messages',	'ALLOW_PM_REPORT'			=> 'Allow users to report private messages',	'ALLOW_PM_REPORT_EXPLAIN'	=> 'If this setting is enabled, users have the option of reporting a private message they have received or sent to the boards moderators. These private messages will then be visible in the Moderator Control Panel.',	'ALLOW_QUICK_REPLY'			=> 'Allow quick reply',	'ALLOW_QUICK_REPLY_EXPLAIN'	=> 'This switch allows for the quick reply to be disabled board-wide. When enabled, forum specific settings will be used to determine whether the quick reply is displayed in individual forums.',	'ALLOW_QUICK_REPLY_BUTTON'	=> 'Submit and enable quick reply in all forums',	'ALLOW_SIG'					=> 'Allow signatures',	'ALLOW_SIG_BBCODE'			=> 'Allow BBCode in user signatures',	'ALLOW_SIG_FLASH'			=> 'Allow use of <code>[FLASH]</code> BBCode tag in user signatures',	'ALLOW_SIG_IMG'				=> 'Allow use of <code>[IMG]</code> BBCode tag in user signatures',	'ALLOW_SIG_LINKS'			=> 'Allow use of links in user signatures',	'ALLOW_SIG_LINKS_EXPLAIN'	=> 'If disallowed the <code>[URL]</code> BBCode tag and automatic/magic URLs are disabled.',	'ALLOW_SIG_SMILIES'			=> 'Allow use of smilies in user signatures',	'ALLOW_SMILIES'				=> 'Allow smilies',	'ALLOW_TOPIC_NOTIFY'		=> 'Allow subscribing to topics',	'BOARD_PM'					=> 'Private messaging',	'BOARD_PM_EXPLAIN'			=> 'Enable private messaging for all users.',));// Avatar Settings$lang = array_merge($lang, array(	'ACP_AVATAR_SETTINGS_EXPLAIN'	=> 'Avatars are generally small, unique images a user can associate with themselves. Depending on the style they are usually displayed below the username when viewing topics. Here you can determine how users can define their avatars. Please note that in order to upload avatars you need to have created the directory you name below and ensure it can be written to by the web server. Please also note that file size limits are only imposed on uploaded avatars, they do not apply to remotely linked images.',	'ALLOW_AVATARS'					=> 'Enable avatars',	'ALLOW_AVATARS_EXPLAIN'			=> 'Allow general usage of avatars;<br />If you disable avatars in general or avatars of a certain mode, the disabled avatars will no longer be shown on the board, but users will still be able to download their own avatars in the User Control Panel.',	'ALLOW_LOCAL'					=> 'Enable gallery avatars',	'ALLOW_REMOTE'					=> 'Enable remote avatars',	'ALLOW_REMOTE_EXPLAIN'			=> 'Avatars linked to from another website.',	'ALLOW_REMOTE_UPLOAD'			=> 'Enable remote avatar uploading',	'ALLOW_REMOTE_UPLOAD_EXPLAIN'	=> 'Allow uploading of avatars from another website.',	'ALLOW_UPLOAD'					=> 'Enable avatar uploading',	'AVATAR_GALLERY_PATH'			=> 'Avatar gallery path',	'AVATAR_GALLERY_PATH_EXPLAIN'	=> 'Path under your phpBB root directory for pre-loaded images, e.g. <samp>images/avatars/gallery</samp>.',	'AVATAR_STORAGE_PATH'			=> 'Avatar storage path',	'AVATAR_STORAGE_PATH_EXPLAIN'	=> 'Path under your phpBB root directory, e.g. <samp>images/avatars/upload</samp>.',	'MAX_AVATAR_SIZE'				=> 'Maximum avatar dimensions',	'MAX_AVATAR_SIZE_EXPLAIN'		=> 'Width x Height in pixels.',	'MAX_FILESIZE'					=> 'Maximum avatar file size',	'MAX_FILESIZE_EXPLAIN'			=> 'For uploaded avatar files.',	'MIN_AVATAR_SIZE'				=> 'Minimum avatar dimensions',	'MIN_AVATAR_SIZE_EXPLAIN'		=> 'Width x Height in pixels.',));// Message Settings$lang = array_merge($lang, array(	'ACP_MESSAGE_SETTINGS_EXPLAIN'		=> 'Here you can set all default settings for private messaging.',	'ALLOW_BBCODE_PM'			=> 'Allow BBCode in private messages',	'ALLOW_FLASH_PM'			=> 'Allow use of <code>[FLASH]</code> BBCode tag',	'ALLOW_FLASH_PM_EXPLAIN'	=> 'Note that the ability to use flash in private messages, if enabled here, also depends on the permissions.',	'ALLOW_FORWARD_PM'			=> 'Allow forwarding of private messages',	'ALLOW_IMG_PM'				=> 'Allow use of <code>[IMG]</code> BBCode tag',	'ALLOW_MASS_PM'				=> 'Allow sending of private messages to multiple users and groups',	'ALLOW_MASS_PM_EXPLAIN'		=> 'Sending to groups can be adjusted per group within the group settings page.',	'ALLOW_PRINT_PM'			=> 'Allow print view in private messaging',	'ALLOW_QUOTE_PM'			=> 'Allow quotes in private messages',	'ALLOW_SIG_PM'				=> 'Allow signature in private messages',	'ALLOW_SMILIES_PM'			=> 'Allow smilies in private messages',	'BOXES_LIMIT'				=> 'Maximum private messages per box',	'BOXES_LIMIT_EXPLAIN'		=> 'Users may receive no more than this many messages in each of their private message boxes. Set this value to 0 to allow unlimited messages.',	'BOXES_MAX'					=> 'Maximum private message folders',	'BOXES_MAX_EXPLAIN'			=> 'By default users may create this many personal folders for private messages.',	'ENABLE_PM_ICONS'			=> 'Enable use of topic icons in private messages',	'FULL_FOLDER_ACTION'		=> 'Full folder default action',	'FULL_FOLDER_ACTION_EXPLAIN'=> 'Default action to take if a users folder is full assuming the users folder action, if set at all, is not applicable. The only exception is for the Sent messages folder where the default action is always to delete old messages.',	'HOLD_NEW_MESSAGES'			=> 'Hold new messages',	'PM_EDIT_TIME'				=> 'Limit editing time',	'PM_EDIT_TIME_EXPLAIN'		=> 'Limits the time available to edit a private message not already delivered. Setting the value to 0 disables this behaviour.',	'PM_MAX_RECIPIENTS'			=> 'Maximum number of allowed recipients',	'PM_MAX_RECIPIENTS_EXPLAIN'	=> 'The maximum number of allowed recipients in a private message. If 0 is entered, an unlimited number is allowed. This setting can be adjusted for every group within the group settings page.',));// Post Settings$lang = array_merge($lang, array(	'ACP_POST_SETTINGS_EXPLAIN'			=> 'Here you can set all default settings for posting.',	'ALLOW_POST_LINKS'					=> 'Allow links in posts/private messages',	'ALLOW_POST_LINKS_EXPLAIN'			=> 'If disallowed the <code>[URL]</code> BBCode tag and automatic/magic URLs are disabled.',	'ALLOW_POST_FLASH'					=> 'Allow use of <code>[FLASH]</code> BBCode tag in posts',	'ALLOW_POST_FLASH_EXPLAIN'			=> 'If disallowed the <code>[FLASH]</code> BBCode tag is disabled in posts. Otherwise the permission system controls which users can use the <code>[FLASH]</code> BBCode tag.',	'BUMP_INTERVAL'					=> 'Bump interval',	'BUMP_INTERVAL_EXPLAIN'			=> 'Number of minutes, hours or days between the last post to a topic and the ability to bump that topic. Setting the value to 0 disables bumping entirely.',	'CHAR_LIMIT'					=> 'Maximum characters per post/message',	'CHAR_LIMIT_EXPLAIN'			=> 'The number of characters allowed within a post/private message. Set to 0 for unlimited characters.',	'DELETE_TIME'					=> 'Limit deleting time',	'DELETE_TIME_EXPLAIN'			=> 'Limits the time available to delete a new post. Setting the value to 0 disables this behaviour.',	'DISPLAY_LAST_EDITED'			=> 'Display last edited time information',	'DISPLAY_LAST_EDITED_EXPLAIN'	=> 'Choose if the last edited by information to be displayed on posts.',	'EDIT_TIME'						=> 'Limit editing time',	'EDIT_TIME_EXPLAIN'				=> 'Limits the time available to edit a new post. Setting the value to 0 disables this behaviour.',	'FLOOD_INTERVAL'				=> 'Flood interval',	'FLOOD_INTERVAL_EXPLAIN'		=> 'Number of seconds a user must wait between posting new messages. To enable users to ignore this alter their permissions.',	'HOT_THRESHOLD'					=> 'Popular topic threshold',	'HOT_THRESHOLD_EXPLAIN'			=> 'Posts per topic threshold required for the popular topic annotation. Set to 0 to disable popular topics.',	'MAX_POLL_OPTIONS'				=> 'Maximum number of poll options',	'MAX_POST_FONT_SIZE'			=> 'Maximum font size per post',	'MAX_POST_FONT_SIZE_EXPLAIN'	=> 'Maximum font size allowed in a post. Set to 0 for unlimited font size.',	'MAX_POST_IMG_HEIGHT'			=> 'Maximum image height per post',	'MAX_POST_IMG_HEIGHT_EXPLAIN'	=> 'Maximum height of an image/flash file in postings. Set to 0 for unlimited size.',	'MAX_POST_IMG_WIDTH'			=> 'Maximum image width per post',	'MAX_POST_IMG_WIDTH_EXPLAIN'	=> 'Maximum width of an image/flash file in postings. Set to 0 for unlimited size.',	'MAX_POST_URLS'					=> 'Maximum links per post',	'MAX_POST_URLS_EXPLAIN'			=> 'Maximum number of URLs in a post. Set to 0 for unlimited links.',	'MIN_CHAR_LIMIT'				=> 'Minimum characters per post/message',	'MIN_CHAR_LIMIT_EXPLAIN'		=> 'The minimum number of characters the user need to enter within a post/private message. The minimum for this setting is 1.',	'POSTING'						=> 'Posting',	'POSTS_PER_PAGE'				=> 'Posts per page',	'QUOTE_DEPTH_LIMIT'				=> 'Maximum nesting depth for quotes',	'QUOTE_DEPTH_LIMIT_EXPLAIN'		=> 'Maximum quote nesting depth in a post. Set to 0 for unlimited depth.',	'SMILIES_LIMIT'					=> 'Maximum smilies per post',	'SMILIES_LIMIT_EXPLAIN'			=> 'Maximum number of smilies in a post. Set to 0 for unlimited smilies.',	'SMILIES_PER_PAGE'				=> 'Smilies per page',	'TOPICS_PER_PAGE'				=> 'Topics per page',));// Signature Settings$lang = array_merge($lang, array(	'ACP_SIGNATURE_SETTINGS_EXPLAIN'	=> 'Here you can set all default settings for signatures.',	'MAX_SIG_FONT_SIZE'				=> 'Maximum signature font size',	'MAX_SIG_FONT_SIZE_EXPLAIN'		=> 'Maximum font size allowed in user signatures. Set to 0 for unlimited size.',	'MAX_SIG_IMG_HEIGHT'			=> 'Maximum signature image height',	'MAX_SIG_IMG_HEIGHT_EXPLAIN'	=> 'Maximum height of an image/flash file in user signatures. Set to 0 for unlimited height.',	'MAX_SIG_IMG_WIDTH'				=> 'Maximum signature image width',	'MAX_SIG_IMG_WIDTH_EXPLAIN'		=> 'Maximum width of an image/flash file in user signatures. Set to 0 for unlimited width.',	'MAX_SIG_LENGTH'				=> 'Maximum signature length',	'MAX_SIG_LENGTH_EXPLAIN'		=> 'Maximum number of characters in user signatures.',	'MAX_SIG_SMILIES'				=> 'Maximum smilies per signature',	'MAX_SIG_SMILIES_EXPLAIN'		=> 'Maximum smilies allowed in user signatures. Set to 0 for unlimited smilies.',	'MAX_SIG_URLS'					=> 'Maximum signature links',	'MAX_SIG_URLS_EXPLAIN'			=> 'Maximum number of links in user signatures. Set to 0 for unlimited links.',));// Registration Settings$lang = array_merge($lang, array(	'ACP_REGISTER_SETTINGS_EXPLAIN'		=> 'Here you are able to define registration and profile related settings.',	'ACC_ACTIVATION'				=> 'Account activation',	'ACC_ACTIVATION_EXPLAIN'		=> 'This determines whether users have immediate access to the board or if confirmation is required. You can also completely disable new registrations. Board-wide e-mail must be enabled in order to use user or admin activation.',	'NEW_MEMBER_POST_LIMIT'			=> 'New member post limit',	'NEW_MEMBER_POST_LIMIT_EXPLAIN'	=> 'New members are within the <em>Newly Registered Users</em> group until they reach this number of posts. You can use this group to keep them from using the PM system or to review their posts. <strong>A value of 0 disables this feature.</strong>',	'NEW_MEMBER_GROUP_DEFAULT'		=> 'Set Newly Registered Users group to default',	'NEW_MEMBER_GROUP_DEFAULT_EXPLAIN'	=> 'If set to yes, and a new member post limit is specified, newly registered users will not only be put into the <em>Newly Registered Users</em> group, but this group will also be their default one. This may come in handy if you want to assign a group default rank and/or avatar the user then inherits.',	'ACC_ADMIN'					=> 'By admin',	'ACC_DISABLE'				=> 'Disable registration',	'ACC_NONE'					=> 'No activation (immediate access)',	'ACC_USER'					=> 'By user (e-mail verification)',//	'ACC_USER_ADMIN'			=> 'User + Admin',	'ALLOW_EMAIL_REUSE'			=> 'Allow e-mail address re-use',	'ALLOW_EMAIL_REUSE_EXPLAIN'	=> 'Different users can register with the same e-mail address.',	'COPPA'						=> 'COPPA',	'COPPA_FAX'					=> 'COPPA fax number',	'COPPA_MAIL'				=> 'COPPA mailing address',	'COPPA_MAIL_EXPLAIN'		=> 'This is the mailing address where parents will send COPPA registration forms.',	'ENABLE_COPPA'				=> 'Enable COPPA',	'ENABLE_COPPA_EXPLAIN'		=> 'This requires users to declare whether they are 13 or over for compliance with the U.S. COPPA. If this is disabled the COPPA specific groups will no longer be displayed.',	'MAX_CHARS'					=> 'Max',	'MIN_CHARS'					=> 'Min',	'NO_AUTH_PLUGIN'			=> 'No suitable auth plugin found.',	'PASSWORD_LENGTH'			=> 'Password length',	'PASSWORD_LENGTH_EXPLAIN'	=> 'Minimum and maximum number of characters in passwords.',	'REG_LIMIT'					=> 'Registration attempts',	'REG_LIMIT_EXPLAIN'			=> 'Number of attempts users can make at solving the anti-spambot task before being locked out of that session.',	'USERNAME_ALPHA_ONLY'		=> 'Alphanumeric only',	'USERNAME_ALPHA_SPACERS'	=> 'Alphanumeric and spacers',	'USERNAME_ASCII'			=> 'ASCII (no international unicode)',	'USERNAME_LETTER_NUM'		=> 'Any letter and number',	'USERNAME_LETTER_NUM_SPACERS'	=> 'Any letter, number, and spacer',	'USERNAME_CHARS'			=> 'Limit username chars',	'USERNAME_CHARS_ANY'		=> 'Any character',	'USERNAME_CHARS_EXPLAIN'	=> 'Restrict type of characters that may be used in usernames, spacers are: space, -, +, _, [ and ].',	'USERNAME_LENGTH'			=> 'Username length',	'USERNAME_LENGTH_EXPLAIN'	=> 'Minimum and maximum number of characters in usernames.',));// Feeds$lang = array_merge($lang, array(	'ACP_FEED_MANAGEMENT'				=> 'General syndication feeds settings',	'ACP_FEED_MANAGEMENT_EXPLAIN'		=> 'This module makes available various ATOM feeds, parsing any BBCode in posts to make them readable in external feeds.',	'ACP_FEED_GENERAL'					=> 'General feed settings',	'ACP_FEED_POST_BASED'				=> 'Post-based feed settings',	'ACP_FEED_TOPIC_BASED'				=> 'Topic-based feed settings',	'ACP_FEED_SETTINGS_OTHER'			=> 'Other feeds and settings',	'ACP_FEED_ENABLE'					=> 'Enable feeds',	'ACP_FEED_ENABLE_EXPLAIN'			=> 'Turns on or off ATOM feeds for the entire board.<br />Disabling this switches off all feeds, no matter how the options below are set.',	'ACP_FEED_LIMIT'					=> 'Number of items',	'ACP_FEED_LIMIT_EXPLAIN'			=> 'The maximum number of feed items to display.',	'ACP_FEED_OVERALL'					=> 'Enable board-wide feed',	'ACP_FEED_OVERALL_EXPLAIN'			=> 'Board-wide new posts.',	'ACP_FEED_FORUM'					=> 'Enable per-forum feeds',	'ACP_FEED_FORUM_EXPLAIN'			=> 'Single forum and subforums new posts.',	'ACP_FEED_TOPIC'					=> 'Enable per-topic feeds',	'ACP_FEED_TOPIC_EXPLAIN'			=> 'Single topics new posts.',	'ACP_FEED_TOPICS_NEW'				=> 'Enable new topics feed',	'ACP_FEED_TOPICS_NEW_EXPLAIN'		=> 'Enables the New Topics feed, which displays the last created topics including the first post.',	'ACP_FEED_TOPICS_ACTIVE'			=> 'Enable active topics feed',	'ACP_FEED_TOPICS_ACTIVE_EXPLAIN'	=> 'Enables the Active Topics feed, which displays the last active topics including the last post.',	'ACP_FEED_NEWS'						=> 'News feed',	'ACP_FEED_NEWS_EXPLAIN'				=> 'Pull the first post from these forums. Select no forums to disable news feed.<br />Select multiple forums by holding <samp>CTRL</samp> and clicking.',	'ACP_FEED_OVERALL_FORUMS'			=> 'Enable forums feed',	'ACP_FEED_OVERALL_FORUMS_EXPLAIN'	=> 'Enables the All forums feed, which displays a list of forums.',	'ACP_FEED_HTTP_AUTH'				=> 'Allow HTTP Authentication',	'ACP_FEED_HTTP_AUTH_EXPLAIN'		=> 'Enables HTTP authentication, which allows users to receive content that is hidden to guest users by adding the <samp>auth=http</samp> parameter to the feed URL. Please note that some PHP setups require additional changes to the .htaccess file. Instructions can be found in that file.',	'ACP_FEED_ITEM_STATISTICS'			=> 'Item statistics',	'ACP_FEED_ITEM_STATISTICS_EXPLAIN'	=> 'Display individual statistics underneath feed items<br />(e.g. posted by, date and time, replies, views)',	'ACP_FEED_EXCLUDE_ID'				=> 'Exclude these forums',	'ACP_FEED_EXCLUDE_ID_EXPLAIN'		=> 'Content from these will be <strong>not included in feeds</strong>. Select no forum to pull data from all forums.<br />Select/Deselect multiple forums by holding <samp>CTRL</samp> and clicking.',));// Visual Confirmation Settings$lang = array_merge($lang, array(	'ACP_VC_SETTINGS_EXPLAIN'				=> 'Here you can select and configure plugins, which are designed to block automated form submissions by spambots. These plugins typically work by challenging the user with a <em>CAPTCHA</em>, a test which is designed to be difficult for computers to solve.',	'AVAILABLE_CAPTCHAS'					=> 'Available plugins',	'CAPTCHA_UNAVAILABLE'					=> 'The plugin cannot be selected as its requirements are not met.',	'CAPTCHA_GD'							=> 'GD image',	'CAPTCHA_GD_3D'							=> 'GD 3D image',	'CAPTCHA_GD_FOREGROUND_NOISE'			=> 'Foreground noise',	'CAPTCHA_GD_EXPLAIN'					=> 'Uses GD to make a more advanced anti-spambot image.',	'CAPTCHA_GD_FOREGROUND_NOISE_EXPLAIN'	=> 'Use foreground noise to make the image harder to read.',	'CAPTCHA_GD_X_GRID'						=> 'Background noise x-axis',	'CAPTCHA_GD_X_GRID_EXPLAIN'				=> 'Use lower settings of this to make the image harder to read. 0 will disable x-axis background noise.',	'CAPTCHA_GD_Y_GRID'						=> 'Background noise y-axis',	'CAPTCHA_GD_Y_GRID_EXPLAIN'				=> 'Use lower settings of this to make the image harder to read. 0 will disable y-axis background noise.',	'CAPTCHA_GD_WAVE'						=> 'Wave distortion',	'CAPTCHA_GD_WAVE_EXPLAIN'				=> 'This applies a wave distortion to the image.',	'CAPTCHA_GD_3D_NOISE'					=> 'Add 3D-noise objects',	'CAPTCHA_GD_3D_NOISE_EXPLAIN'			=> 'This adds additional objects to the image, over the letters.',	'CAPTCHA_GD_FONTS'						=> 'Use different fonts',	'CAPTCHA_GD_FONTS_EXPLAIN'				=> 'This setting controls how many different letter shapes are used. You can just use the default shapes or introduce altered letters. Adding lowercase letters is also possible.',	'CAPTCHA_FONT_DEFAULT'					=> 'Default',	'CAPTCHA_FONT_NEW'						=> 'New Shapes',	'CAPTCHA_FONT_LOWER'					=> 'Also use lowercase',	'CAPTCHA_NO_GD'							=> 'Simple image',	'CAPTCHA_PREVIEW_MSG'					=> 'Your changes have not been saved, this is just a preview.',	'CAPTCHA_PREVIEW_EXPLAIN'				=> 'The plugin as it would look like using the current selection.',	'CAPTCHA_SELECT'						=> 'Installed plugins',	'CAPTCHA_SELECT_EXPLAIN'				=> 'The dropdown holds the plugins recognised by the board. Grey entries are not available right now and might need configuration prior to use.',	'CAPTCHA_CONFIGURE'						=> 'Configure plugins',	'CAPTCHA_CONFIGURE_EXPLAIN'				=> 'Change the settings for the selected plugin.',	'CONFIGURE'								=> 'Configure',	'CAPTCHA_NO_OPTIONS'					=> 'This plugin has no configuration options.',	'VISUAL_CONFIRM_POST'					=> 'Enable spambot countermeasures for guest postings',	'VISUAL_CONFIRM_POST_EXPLAIN'			=> 'Requires guest users to pass the anti-spambot task to help prevent automated postings.',	'VISUAL_CONFIRM_REG'					=> 'Enable spambot countermeasures for registrations',	'VISUAL_CONFIRM_REG_EXPLAIN'			=> 'Requires new users to pass the anti-spambot task to help prevent automated registrations.',	'VISUAL_CONFIRM_REFRESH'				=> 'Allow users to refresh the anti-spambot task',	'VISUAL_CONFIRM_REFRESH_EXPLAIN'		=> 'Allows users to request a new anti-spambot task if they are unable to solve the current task during registration. Some plugins might not support this option.',));// Cookie Settings$lang = array_merge($lang, array(	'ACP_COOKIE_SETTINGS_EXPLAIN'		=> 'These details define the data used to send cookies to your users browsers. In most cases the default values for the cookie settings should be sufficient. If you do need to change any do so with care, incorrect settings can prevent users logging in.',	'COOKIE_DOMAIN'				=> 'Cookie domain',	'COOKIE_NAME'				=> 'Cookie name',	'COOKIE_PATH'				=> 'Cookie path',	'COOKIE_SECURE'				=> 'Cookie secure',	'COOKIE_SECURE_EXPLAIN'		=> 'If your server is running via SSL set this to enabled else leave as disabled. Having this enabled and not running via SSL will result in server errors during redirects.',	'ONLINE_LENGTH'				=> 'View online time span',	'ONLINE_LENGTH_EXPLAIN'		=> 'Number of minutes after which inactive users will not appear in Who is online listings. The higher this value the greater is the processing required to generate the listing.',	'SESSION_LENGTH'			=> 'Session length',	'SESSION_LENGTH_EXPLAIN'	=> 'Sessions will expire after this time, in seconds.',));// Load Settings$lang = array_merge($lang, array(	'ACP_LOAD_SETTINGS_EXPLAIN'	=> 'Here you can enable and disable certain board functions to reduce the amount of processing required. On most servers there is no need to disable any functions. However on certain systems or in shared hosting environments it may be beneficial to disable capabilities you do not really need. You can also specify limits for system load and active sessions beyond which the board will go offline.',	'CUSTOM_PROFILE_FIELDS'			=> 'Custom profile fields',	'LIMIT_LOAD'					=> 'Limit system load',	'LIMIT_LOAD_EXPLAIN'			=> 'If the systems 1-minute load average exceeds this value the board will automatically go offline. A value of 1.0 equals ~100% utilisation of one processor. This only functions on UNIX based servers and where this information is accessible. The value here resets itself to 0 if phpBB was unable to get the load limit.',	'LIMIT_SESSIONS'				=> 'Limit sessions',	'LIMIT_SESSIONS_EXPLAIN'		=> 'If the number of sessions exceeds this value within a one minute period the board will go offline. Set to 0 for unlimited sessions.',	'LOAD_CPF_MEMBERLIST'			=> 'Allow styles to display custom profile fields in memberlist',	'LOAD_CPF_VIEWPROFILE'			=> 'Display custom profile fields in user profiles',	'LOAD_CPF_VIEWTOPIC'			=> 'Display custom profile fields on topic pages',	'LOAD_USER_ACTIVITY'			=> 'Show users activity',	'LOAD_USER_ACTIVITY_EXPLAIN'	=> 'Displays active topic/forum in user profiles and user control panel. It is recommended to disable this on boards with more than one million posts.',	'RECOMPILE_STYLES'				=> 'Recompile stale style components',	'RECOMPILE_STYLES_EXPLAIN'		=> 'Check for updated style components on filesystem and recompile.',	'YES_ANON_READ_MARKING'			=> 'Enable topic marking for guests',	'YES_ANON_READ_MARKING_EXPLAIN'	=> 'Stores read/unread status information for guests. If disabled, posts are always marked read for guests.',	'YES_BIRTHDAYS'					=> 'Enable birthday listing',	'YES_BIRTHDAYS_EXPLAIN'			=> 'If disabled the birthday listing is no longer displayed. To let this setting take effect the birthday feature needs to be enabled too.',	'YES_JUMPBOX'					=> 'Enable display of jumpbox',	'YES_MODERATORS'				=> 'Enable display of moderators',	'YES_ONLINE'					=> 'Enable online user listings',	'YES_ONLINE_EXPLAIN'			=> 'Display online user information on index, forum and topic pages.',	'YES_ONLINE_GUESTS'				=> 'Enable online guest listings in viewonline',	'YES_ONLINE_GUESTS_EXPLAIN'		=> 'Allow display of guest user information in viewonline.',	'YES_ONLINE_TRACK'				=> 'Enable display of user online/offline information',	'YES_ONLINE_TRACK_EXPLAIN'		=> 'Display online information for user in profiles and topic pages.',	'YES_POST_MARKING'				=> 'Enable dotted topics',	'YES_POST_MARKING_EXPLAIN'		=> 'Indicates whether user has posted to a topic.',	'YES_READ_MARKING'				=> 'Enable server-side topic marking',	'YES_READ_MARKING_EXPLAIN'		=> 'Stores read/unread status information in the database rather than a cookie.',	'YES_UNREAD_SEARCH'				=> 'Enable search for unread posts',));// Auth settings$lang = array_merge($lang, array(	'ACP_AUTH_SETTINGS_EXPLAIN'	=> 'phpBB supports authentication plug-ins, or modules. These allow you determine how users are authenticated when they log into the board. By default three plug-ins are provided; DB, LDAP and Apache. Not all methods require additional information so only fill out fields if they are relevant to the selected method.',	'AUTH_METHOD'				=> 'Select an authentication method',	'APACHE_SETUP_BEFORE_USE'	=> 'You have to setup apache authentication before you switch phpBB to this authentication method. Keep in mind that the username you use for apache authentication has to be the same as your phpBB username. Apache authentication can only be used with mod_php (not with a CGI version) and safe_mode disabled.',	'LDAP_DN'						=> 'LDAP base <var>dn</var>',	'LDAP_DN_EXPLAIN'				=> 'This is the Distinguished Name, locating the user information, e.g. <samp>o=My Company,c=US</samp>.',	'LDAP_EMAIL'					=> 'LDAP e-mail attribute',	'LDAP_EMAIL_EXPLAIN'			=> 'Set this to the name of your user entry e-mail attribute (if one exists) in order to automatically set the e-mail address for new users. Leaving this empty results in empty e-mail address for users who log in for the first time.',	'LDAP_INCORRECT_USER_PASSWORD'	=> 'Binding to LDAP server failed with specified user/password.',	'LDAP_NO_EMAIL'					=> 'The specified e-mail attribute does not exist.',	'LDAP_NO_IDENTITY'				=> 'Could not find a login identity for %s.',	'LDAP_PASSWORD'					=> 'LDAP password',	'LDAP_PASSWORD_EXPLAIN'			=> 'Leave blank to use anonymous binding, otherwise fill in the password for the above user. Required for Active Directory Servers.<br /><em><strong>Warning:</strong> This password will be stored as plain text in the database, visible to everybody who can access your database or who can view this configuration page.</em>',	'LDAP_PORT'						=> 'LDAP server port',	'LDAP_PORT_EXPLAIN'				=> 'Optionally you can specify a port which should be used to connect to the LDAP server instead of the default port 389.',	'LDAP_SERVER'					=> 'LDAP server name',	'LDAP_SERVER_EXPLAIN'			=> 'If using LDAP this is the hostname or IP address of the LDAP server. Alternatively you can specify an URL like ldap://hostname:port/',	'LDAP_UID'						=> 'LDAP <var>uid</var>',	'LDAP_UID_EXPLAIN'				=> 'This is the key under which to search for a given login identity, e.g. <var>uid</var>, <var>sn</var>, etc.',	'LDAP_USER'						=> 'LDAP user <var>dn</var>',	'LDAP_USER_EXPLAIN'				=> 'Leave blank to use anonymous binding. If filled in phpBB uses the specified distinguished name on login attempts to find the correct user, e.g. <samp>uid=Username,ou=MyUnit,o=MyCompany,c=US</samp>. Required for Active Directory Servers.',	'LDAP_USER_FILTER'				=> 'LDAP user filter',	'LDAP_USER_FILTER_EXPLAIN'		=> 'Optionally you can further limit the searched objects with additional filters. For example <samp>objectClass=posixGroup</samp> would result in the use of <samp>(&amp;(uid=$username)(objectClass=posixGroup))</samp>',));// Server Settings$lang = array_merge($lang, array(	'ACP_SERVER_SETTINGS_EXPLAIN'	=> 'Here you define server and domain dependant settings. Please ensure the data you enter is accurate, errors will result in e-mails containing incorrect information. When entering the domain name remember it does include http:// or other protocol term. Only alter the port number if you know your server uses a different value, port 80 is correct in most cases.',	'ENABLE_GZIP'				=> 'Enable GZip compression',	'ENABLE_GZIP_EXPLAIN'		=> 'Generated content will be compressed prior to sending it to the user. This can reduce network traffic but will also increase CPU usage on both server and client side. Requires zlib PHP extension to be loaded.',	'FORCE_SERVER_VARS'			=> 'Force server URL settings',	'FORCE_SERVER_VARS_EXPLAIN'	=> 'If set to yes the server settings defined here will be used in favour of the automatically determined values.',	'ICONS_PATH'				=> 'Post icons storage path',	'ICONS_PATH_EXPLAIN'		=> 'Path under your phpBB root directory, e.g. <samp>images/icons</samp>.',	'PATH_SETTINGS'				=> 'Path settings',	'RANKS_PATH'				=> 'Rank image storage path',	'RANKS_PATH_EXPLAIN'		=> 'Path under your phpBB root directory, e.g. <samp>images/ranks</samp>.',	'SCRIPT_PATH'				=> 'Script path',	'SCRIPT_PATH_EXPLAIN'		=> 'The path where phpBB is located relative to the domain name, e.g. <samp>/phpBB3</samp>.',	'SERVER_NAME'				=> 'Domain name',	'SERVER_NAME_EXPLAIN'		=> 'The domain name this board runs from (for example: <samp>www.example.com</samp>).',	'SERVER_PORT'				=> 'Server port',	'SERVER_PORT_EXPLAIN'		=> 'The port your server is running on, usually 80, only change if different.',	'SERVER_PROTOCOL'			=> 'Server protocol',	'SERVER_PROTOCOL_EXPLAIN'	=> 'This is used as the server protocol if these settings are forced. If empty or not forced the protocol is determined by the cookie secure settings (<samp>http://</samp> or <samp>https://</samp>).',	'SERVER_URL_SETTINGS'		=> 'Server URL settings',	'SMILIES_PATH'				=> 'Smilies storage path',	'SMILIES_PATH_EXPLAIN'		=> 'Path under your phpBB root directory, e.g. <samp>images/smilies</samp>.',	'UPLOAD_ICONS_PATH'			=> 'Extension group icons storage path',	'UPLOAD_ICONS_PATH_EXPLAIN'	=> 'Path under your phpBB root directory, e.g. <samp>images/upload_icons</samp>.',));// Security Settings$lang = array_merge($lang, array(	'ACP_SECURITY_SETTINGS_EXPLAIN'		=> 'Here you are able to define session and login related settings.',	'ALL'							=> 'All',	'ALLOW_AUTOLOGIN'				=> 'Allow persistent logins',	'ALLOW_AUTOLOGIN_EXPLAIN'		=> 'Determines whether users can autologin when they visit the board.',	'AUTOLOGIN_LENGTH'				=> 'Persistent login key expiration length (in days)',	'AUTOLOGIN_LENGTH_EXPLAIN'		=> 'Number of days after which persistent login keys are removed or zero to disable.',	'BROWSER_VALID'					=> 'Validate browser',	'BROWSER_VALID_EXPLAIN'			=> 'Enables browser validation for each session improving security.',	'CHECK_DNSBL'					=> 'Check IP against DNS Blackhole List',	'CHECK_DNSBL_EXPLAIN'			=> 'If enabled the users IP address is checked against the following DNSBL services on registration and posting: <a href="http://spamcop.net">spamcop.net</a> and <a href="http://www.spamhaus.org">www.spamhaus.org</a>. This lookup may take a while, depending on the servers configuration. If slowdowns are experienced or too many false positives reported it is recommended to disable this check.',	'CLASS_B'						=> 'A.B',	'CLASS_C'						=> 'A.B.C',	'EMAIL_CHECK_MX'				=> 'Check e-mail domain for valid MX record',	'EMAIL_CHECK_MX_EXPLAIN'		=> 'If enabled, the e-mail domain provided on registration and profile changes is checked for a valid MX record.',	'FORCE_PASS_CHANGE'				=> 'Force password change',	'FORCE_PASS_CHANGE_EXPLAIN'		=> 'Require user to change their password after a set number of days. Setting this value to 0 disables this behaviour.',	'FORM_TIME_MAX'					=> 'Maximum time to submit forms',	'FORM_TIME_MAX_EXPLAIN'			=> 'The time a user has to submit a form. Use -1 to disable. Note that a form might become invalid if the session expires, regardless of this setting.',	'FORM_SID_GUESTS'				=> 'Tie forms to guest sessions',	'FORM_SID_GUESTS_EXPLAIN'		=> 'If enabled, the form token issued to guests will be session-exclusive. This can cause problems with some ISPs.',	'FORWARDED_FOR_VALID'			=> 'Validate <var>X_FORWARDED_FOR</var> header',	'FORWARDED_FOR_VALID_EXPLAIN'	=> 'Sessions will only be continued if the sent <var>X_FORWARDED_FOR</var> header equals the one sent with the previous request. Bans will be checked against IPs in <var>X_FORWARDED_FOR</var> too.',	'IP_VALID'						=> 'Session IP validation',	'IP_VALID_EXPLAIN'				=> 'Determines how much of the users IP is used to validate a session; <samp>All</samp> compares the complete address, <samp>A.B.C</samp> the first x.x.x, <samp>A.B</samp> the first x.x, <samp>None</samp> disables checking. On IPv6 addresses <samp>A.B.C</samp> compares the first 4 blocks and <samp>A.B</samp> the first 3 blocks.',	'IP_LOGIN_LIMIT_MAX'			=> 'Maximum number of login attempts per IP address',	'IP_LOGIN_LIMIT_MAX_EXPLAIN'	=> 'The threshold of login attempts allowed from a single IP address before an anti-spambot task is triggered. Enter 0 to prevent the anti-spambot task from being triggered by IP addresses.',	'IP_LOGIN_LIMIT_TIME'			=> 'IP address login attempt expiration time',	'IP_LOGIN_LIMIT_TIME_EXPLAIN'	=> 'Login attempts expire after this period.',	'IP_LOGIN_LIMIT_USE_FORWARDED'	=> 'Limit login attempts by <var>X_FORWARDED_FOR</var> header',	'IP_LOGIN_LIMIT_USE_FORWARDED_EXPLAIN'	=> 'Instead of limiting login attempts by IP address they are limited by <var>X_FORWARDED_FOR</var> values. <br /><em><strong>Warning:</strong> Only enable this if you are operating a proxy server that sets <var>X_FORWARDED_FOR</var> to trustworthy values.</em>',	'MAX_LOGIN_ATTEMPTS'			=> 'Maximum number of login attempts per username',	'MAX_LOGIN_ATTEMPTS_EXPLAIN'	=> 'The number of login attempts allowed for a single account before the anti-spambot task is triggered. Enter 0 to prevent the anti-spambot task from being triggered for distinct user accounts.',	'NO_IP_VALIDATION'				=> 'None',	'NO_REF_VALIDATION'				=> 'None',	'PASSWORD_TYPE'					=> 'Password complexity',	'PASSWORD_TYPE_EXPLAIN'			=> 'Determines how complex a password needs to be when set or altered, subsequent options include the previous ones.',	'PASS_TYPE_ALPHA'				=> 'Must contain letters and numbers',	'PASS_TYPE_ANY'					=> 'No requirements',	'PASS_TYPE_CASE'				=> 'Must be mixed case',	'PASS_TYPE_SYMBOL'				=> 'Must contain symbols',	'REF_HOST'						=> 'Only validate host',	'REF_PATH'						=> 'Also validate path',	'REFERER_VALID'					=> 'Validate Referer',	'REFERER_VALID_EXPLAIN'			=> 'If enabled, the referer of POST requests will be checked against the host/script path settings. This may cause issues with boards using several domains and or external logins.',	'TPL_ALLOW_PHP'					=> 'Allow php in templates',	'TPL_ALLOW_PHP_EXPLAIN'			=> 'If this option is enabled, <code>PHP</code> and <code>INCLUDEPHP</code> statements will be recognised and parsed in templates.',));// Email Settings$lang = array_merge($lang, array(	'ACP_EMAIL_SETTINGS_EXPLAIN'	=> 'This information is used when the board sends e-mails to your users. Please ensure the e-mail address you specify is valid, any bounced or undeliverable messages will likely be sent to that address. If your host does not provide a native (PHP based) e-mail service you can instead send messages directly using SMTP. This requires the address of an appropriate server (ask your provider if necessary). If the server requires authentication (and only if it does) enter the necessary username, password and authentication method.',	'ADMIN_EMAIL'					=> 'Return e-mail address',	'ADMIN_EMAIL_EXPLAIN'			=> 'This will be used as the return address on all e-mails, the technical contact e-mail address. It will always be used as the <samp>Return-Path</samp> and <samp>Sender</samp> address in e-mails.',	'BOARD_EMAIL_FORM'				=> 'Users send e-mail via board',	'BOARD_EMAIL_FORM_EXPLAIN'		=> 'Instead of showing the users e-mail address users are able to send e-mails via the board.',	'BOARD_HIDE_EMAILS'				=> 'Hide e-mail addresses',	'BOARD_HIDE_EMAILS_EXPLAIN'		=> 'This function keeps e-mail addresses completely private.',	'CONTACT_EMAIL'					=> 'Contact e-mail address',	'CONTACT_EMAIL_EXPLAIN'			=> 'This address will be used whenever a specific contact point is needed, e.g. spam, error output, etc. It will always be used as the <samp>From</samp> and <samp>Reply-To</samp> address in e-mails.',	'EMAIL_FUNCTION_NAME'			=> 'E-mail function name',	'EMAIL_FUNCTION_NAME_EXPLAIN'	=> 'The e-mail function used to send mails through PHP.',	'EMAIL_PACKAGE_SIZE'			=> 'E-mail package size',	'EMAIL_PACKAGE_SIZE_EXPLAIN'	=> 'This is the number of maximum e-mails sent out in one package. This setting is applied to the internal message queue; set this value to 0 if you have problems with non-delivered notification e-mails.',	'EMAIL_SIG'						=> 'E-mail signature',	'EMAIL_SIG_EXPLAIN'				=> 'This text will be attached to all e-mails the board sends.',	'ENABLE_EMAIL'					=> 'Enable board-wide e-mails',	'ENABLE_EMAIL_EXPLAIN'			=> 'If this is set to disabled no e-mails will be sent by the board at all. <em>Note the user and admin account activation settings require this setting to be enabled. If currently using user or admin activation in the activation settings, disabling this setting will require no activation of new accounts.</em>',	'SMTP_AUTH_METHOD'				=> 'Authentication method for SMTP',	'SMTP_AUTH_METHOD_EXPLAIN'		=> 'Only used if a username/password is set, ask your provider if you are unsure which method to use.',	'SMTP_CRAM_MD5'					=> 'CRAM-MD5',	'SMTP_DIGEST_MD5'				=> 'DIGEST-MD5',	'SMTP_LOGIN'					=> 'LOGIN',	'SMTP_PASSWORD'					=> 'SMTP password',	'SMTP_PASSWORD_EXPLAIN'			=> 'Only enter a password if your SMTP server requires it.<br /><em><strong>Warning:</strong> This password will be stored as plain text in the database, visible to everybody who can access your database or who can view this configuration page.</em>',	'SMTP_PLAIN'					=> 'PLAIN',	'SMTP_POP_BEFORE_SMTP'			=> 'POP-BEFORE-SMTP',	'SMTP_PORT'						=> 'SMTP server port',	'SMTP_PORT_EXPLAIN'				=> 'Only change this if you know your SMTP server is on a different port.',	'SMTP_SERVER'					=> 'SMTP server address',	'SMTP_SETTINGS'					=> 'SMTP settings',	'SMTP_USERNAME'					=> 'SMTP username',	'SMTP_USERNAME_EXPLAIN'			=> 'Only enter a username if your SMTP server requires it.',	'USE_SMTP'						=> 'Use SMTP server for e-mail',	'USE_SMTP_EXPLAIN'				=> 'Select Yes if you want or have to send e-mail via a named server instead of the local mail function.',));// Jabber settings$lang = array_merge($lang, array(	'ACP_JABBER_SETTINGS_EXPLAIN'	=> 'Here you can enable and control the use of Jabber for instant messaging and board notifications. Jabber is an open source protocol and therefore available for use by anyone. Some Jabber servers include gateways or transports which allow you to contact users on other networks. Not all servers offer all transports and changes in protocols can prevent transports from operating. Please be sure to enter already registered account details - phpBB will use the details you enter here as is.',	'JAB_ENABLE'				=> 'Enable Jabber',	'JAB_ENABLE_EXPLAIN'		=> 'Enables use of Jabber messaging and notifications.',	'JAB_GTALK_NOTE'			=> 'Please note that GTalk will not work because the <samp>dns_get_record</samp> function could not be found. This function is not available in PHP4, and is not implemented on Windows platforms. It currently does not work on BSD-based systems, including Mac OS.',	'JAB_PACKAGE_SIZE'			=> 'Jabber package size',	'JAB_PACKAGE_SIZE_EXPLAIN'	=> 'This is the number of messages sent in one package. If set to 0 the message is sent immediately and will not be queued for later sending.',	'JAB_PASSWORD'				=> 'Jabber password',	'JAB_PASSWORD_EXPLAIN'		=> '<em><strong>Warning:</strong> This password will be stored as plain text in the database, visible to everybody who can access your database or who can view this configuration page.</em>',	'JAB_PORT'					=> 'Jabber port',	'JAB_PORT_EXPLAIN'			=> 'Leave blank unless you know it is not port 5222.',	'JAB_SERVER'				=> 'Jabber server',	'JAB_SERVER_EXPLAIN'		=> 'See %sjabber.org%s for a list of servers.',	'JAB_SETTINGS_CHANGED'		=> 'Jabber settings changed successfully.',	'JAB_USE_SSL'				=> 'Use SSL to connect',	'JAB_USE_SSL_EXPLAIN'		=> 'If enabled a secure connection is tried to be established. The Jabber port will be modified to 5223 if port 5222 is specified.',	'JAB_USERNAME'				=> 'Jabber username or JID',	'JAB_USERNAME_EXPLAIN'		=> 'Specify a registered username or a valid JID. The username will not be checked for validity. If you only specify a username, then your JID will be the username and the server you specified above. Else, specify a valid JID, for example user@jabber.org.',));?>
<?php/**** @package install* @version $Id$* @copyright (c) 2007 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}function utf8_new_case_fold($text, $option = 'full'){	static $uniarray = array();	global $phpbb_root_path, $phpEx;	// common is always set	if (!isset($uniarray['c']))	{		$uniarray['c'] = include($phpbb_root_path . 'includes/utf/data/case_fold_c.' . $phpEx);	}	// only set full if we need to	if ($option === 'full' && !isset($uniarray['f']))	{		$uniarray['f'] = include($phpbb_root_path . 'includes/utf/data/case_fold_f.' . $phpEx);	}	// only set simple if we need to	if ($option !== 'full' && !isset($uniarray['s']))	{		$uniarray['s'] = include($phpbb_root_path . 'includes/utf/data/case_fold_s.' . $phpEx);	}	// common is always replaced	$text = strtr($text, $uniarray['c']);	if ($option === 'full')	{		// full replaces a character with multiple characters		$text = strtr($text, $uniarray['f']);	}	else	{		// simple replaces a character with another character		$text = strtr($text, $uniarray['s']);	}	return $text;}function utf8_new_case_fold_nfkc($text, $option = 'full'){	static $fc_nfkc_closure = array(		"\xCD\xBA"	=> "\x20\xCE\xB9",		"\xCF\x92"	=> "\xCF\x85",		"\xCF\x93"	=> "\xCF\x8D",		"\xCF\x94"	=> "\xCF\x8B",		"\xCF\xB2"	=> "\xCF\x83",		"\xCF\xB9"	=> "\xCF\x83",		"\xE1\xB4\xAC"	=> "\x61",		"\xE1\xB4\xAD"	=> "\xC3\xA6",		"\xE1\xB4\xAE"	=> "\x62",		"\xE1\xB4\xB0"	=> "\x64",		"\xE1\xB4\xB1"	=> "\x65",		"\xE1\xB4\xB2"	=> "\xC7\x9D",		"\xE1\xB4\xB3"	=> "\x67",		"\xE1\xB4\xB4"	=> "\x68",		"\xE1\xB4\xB5"	=> "\x69",		"\xE1\xB4\xB6"	=> "\x6A",		"\xE1\xB4\xB7"	=> "\x6B",		"\xE1\xB4\xB8"	=> "\x6C",		"\xE1\xB4\xB9"	=> "\x6D",		"\xE1\xB4\xBA"	=> "\x6E",		"\xE1\xB4\xBC"	=> "\x6F",		"\xE1\xB4\xBD"	=> "\xC8\xA3",		"\xE1\xB4\xBE"	=> "\x70",		"\xE1\xB4\xBF"	=> "\x72",		"\xE1\xB5\x80"	=> "\x74",		"\xE1\xB5\x81"	=> "\x75",		"\xE1\xB5\x82"	=> "\x77",		"\xE2\x82\xA8"	=> "\x72\x73",		"\xE2\x84\x82"	=> "\x63",		"\xE2\x84\x83"	=> "\xC2\xB0\x63",		"\xE2\x84\x87"	=> "\xC9\x9B",		"\xE2\x84\x89"	=> "\xC2\xB0\x66",		"\xE2\x84\x8B"	=> "\x68",		"\xE2\x84\x8C"	=> "\x68",		"\xE2\x84\x8D"	=> "\x68",		"\xE2\x84\x90"	=> "\x69",		"\xE2\x84\x91"	=> "\x69",		"\xE2\x84\x92"	=> "\x6C",		"\xE2\x84\x95"	=> "\x6E",		"\xE2\x84\x96"	=> "\x6E\x6F",		"\xE2\x84\x99"	=> "\x70",		"\xE2\x84\x9A"	=> "\x71",		"\xE2\x84\x9B"	=> "\x72",		"\xE2\x84\x9C"	=> "\x72",		"\xE2\x84\x9D"	=> "\x72",		"\xE2\x84\xA0"	=> "\x73\x6D",		"\xE2\x84\xA1"	=> "\x74\x65\x6C",		"\xE2\x84\xA2"	=> "\x74\x6D",		"\xE2\x84\xA4"	=> "\x7A",		"\xE2\x84\xA8"	=> "\x7A",		"\xE2\x84\xAC"	=> "\x62",		"\xE2\x84\xAD"	=> "\x63",		"\xE2\x84\xB0"	=> "\x65",		"\xE2\x84\xB1"	=> "\x66",		"\xE2\x84\xB3"	=> "\x6D",		"\xE2\x84\xBB"	=> "\x66\x61\x78",		"\xE2\x84\xBE"	=> "\xCE\xB3",		"\xE2\x84\xBF"	=> "\xCF\x80",		"\xE2\x85\x85"	=> "\x64",		"\xE3\x89\x90"	=> "\x70\x74\x65",		"\xE3\x8B\x8C"	=> "\x68\x67",		"\xE3\x8B\x8E"	=> "\x65\x76",		"\xE3\x8B\x8F"	=> "\x6C\x74\x64",		"\xE3\x8D\xB1"	=> "\x68\x70\x61",		"\xE3\x8D\xB3"	=> "\x61\x75",		"\xE3\x8D\xB5"	=> "\x6F\x76",		"\xE3\x8D\xBA"	=> "\x69\x75",		"\xE3\x8E\x80"	=> "\x70\x61",		"\xE3\x8E\x81"	=> "\x6E\x61",		"\xE3\x8E\x82"	=> "\xCE\xBC\x61",		"\xE3\x8E\x83"	=> "\x6D\x61",		"\xE3\x8E\x84"	=> "\x6B\x61",		"\xE3\x8E\x85"	=> "\x6B\x62",		"\xE3\x8E\x86"	=> "\x6D\x62",		"\xE3\x8E\x87"	=> "\x67\x62",		"\xE3\x8E\x8A"	=> "\x70\x66",		"\xE3\x8E\x8B"	=> "\x6E\x66",		"\xE3\x8E\x8C"	=> "\xCE\xBC\x66",		"\xE3\x8E\x90"	=> "\x68\x7A",		"\xE3\x8E\x91"	=> "\x6B\x68\x7A",		"\xE3\x8E\x92"	=> "\x6D\x68\x7A",		"\xE3\x8E\x93"	=> "\x67\x68\x7A",		"\xE3\x8E\x94"	=> "\x74\x68\x7A",		"\xE3\x8E\xA9"	=> "\x70\x61",		"\xE3\x8E\xAA"	=> "\x6B\x70\x61",		"\xE3\x8E\xAB"	=> "\x6D\x70\x61",		"\xE3\x8E\xAC"	=> "\x67\x70\x61",		"\xE3\x8E\xB4"	=> "\x70\x76",		"\xE3\x8E\xB5"	=> "\x6E\x76",		"\xE3\x8E\xB6"	=> "\xCE\xBC\x76",		"\xE3\x8E\xB7"	=> "\x6D\x76",		"\xE3\x8E\xB8"	=> "\x6B\x76",		"\xE3\x8E\xB9"	=> "\x6D\x76",		"\xE3\x8E\xBA"	=> "\x70\x77",		"\xE3\x8E\xBB"	=> "\x6E\x77",		"\xE3\x8E\xBC"	=> "\xCE\xBC\x77",		"\xE3\x8E\xBD"	=> "\x6D\x77",		"\xE3\x8E\xBE"	=> "\x6B\x77",		"\xE3\x8E\xBF"	=> "\x6D\x77",		"\xE3\x8F\x80"	=> "\x6B\xCF\x89",		"\xE3\x8F\x81"	=> "\x6D\xCF\x89",		"\xE3\x8F\x83"	=> "\x62\x71",		"\xE3\x8F\x86"	=> "\x63\xE2\x88\x95\x6B\x67",		"\xE3\x8F\x87"	=> "\x63\x6F\x2E",		"\xE3\x8F\x88"	=> "\x64\x62",		"\xE3\x8F\x89"	=> "\x67\x79",		"\xE3\x8F\x8B"	=> "\x68\x70",		"\xE3\x8F\x8D"	=> "\x6B\x6B",		"\xE3\x8F\x8E"	=> "\x6B\x6D",		"\xE3\x8F\x97"	=> "\x70\x68",		"\xE3\x8F\x99"	=> "\x70\x70\x6D",		"\xE3\x8F\x9A"	=> "\x70\x72",		"\xE3\x8F\x9C"	=> "\x73\x76",		"\xE3\x8F\x9D"	=> "\x77\x62",		"\xE3\x8F\x9E"	=> "\x76\xE2\x88\x95\x6D",		"\xE3\x8F\x9F"	=> "\x61\xE2\x88\x95\x6D",		"\xF0\x9D\x90\x80"	=> "\x61",		"\xF0\x9D\x90\x81"	=> "\x62",		"\xF0\x9D\x90\x82"	=> "\x63",		"\xF0\x9D\x90\x83"	=> "\x64",		"\xF0\x9D\x90\x84"	=> "\x65",		"\xF0\x9D\x90\x85"	=> "\x66",		"\xF0\x9D\x90\x86"	=> "\x67",		"\xF0\x9D\x90\x87"	=> "\x68",		"\xF0\x9D\x90\x88"	=> "\x69",		"\xF0\x9D\x90\x89"	=> "\x6A",		"\xF0\x9D\x90\x8A"	=> "\x6B",		"\xF0\x9D\x90\x8B"	=> "\x6C",		"\xF0\x9D\x90\x8C"	=> "\x6D",		"\xF0\x9D\x90\x8D"	=> "\x6E",		"\xF0\x9D\x90\x8E"	=> "\x6F",		"\xF0\x9D\x90\x8F"	=> "\x70",		"\xF0\x9D\x90\x90"	=> "\x71",		"\xF0\x9D\x90\x91"	=> "\x72",		"\xF0\x9D\x90\x92"	=> "\x73",		"\xF0\x9D\x90\x93"	=> "\x74",		"\xF0\x9D\x90\x94"	=> "\x75",		"\xF0\x9D\x90\x95"	=> "\x76",		"\xF0\x9D\x90\x96"	=> "\x77",		"\xF0\x9D\x90\x97"	=> "\x78",		"\xF0\x9D\x90\x98"	=> "\x79",		"\xF0\x9D\x90\x99"	=> "\x7A",		"\xF0\x9D\x90\xB4"	=> "\x61",		"\xF0\x9D\x90\xB5"	=> "\x62",		"\xF0\x9D\x90\xB6"	=> "\x63",		"\xF0\x9D\x90\xB7"	=> "\x64",		"\xF0\x9D\x90\xB8"	=> "\x65",		"\xF0\x9D\x90\xB9"	=> "\x66",		"\xF0\x9D\x90\xBA"	=> "\x67",		"\xF0\x9D\x90\xBB"	=> "\x68",		"\xF0\x9D\x90\xBC"	=> "\x69",		"\xF0\x9D\x90\xBD"	=> "\x6A",		"\xF0\x9D\x90\xBE"	=> "\x6B",		"\xF0\x9D\x90\xBF"	=> "\x6C",		"\xF0\x9D\x91\x80"	=> "\x6D",		"\xF0\x9D\x91\x81"	=> "\x6E",		"\xF0\x9D\x91\x82"	=> "\x6F",		"\xF0\x9D\x91\x83"	=> "\x70",		"\xF0\x9D\x91\x84"	=> "\x71",		"\xF0\x9D\x91\x85"	=> "\x72",		"\xF0\x9D\x91\x86"	=> "\x73",		"\xF0\x9D\x91\x87"	=> "\x74",		"\xF0\x9D\x91\x88"	=> "\x75",		"\xF0\x9D\x91\x89"	=> "\x76",		"\xF0\x9D\x91\x8A"	=> "\x77",		"\xF0\x9D\x91\x8B"	=> "\x78",		"\xF0\x9D\x91\x8C"	=> "\x79",		"\xF0\x9D\x91\x8D"	=> "\x7A",		"\xF0\x9D\x91\xA8"	=> "\x61",		"\xF0\x9D\x91\xA9"	=> "\x62",		"\xF0\x9D\x91\xAA"	=> "\x63",		"\xF0\x9D\x91\xAB"	=> "\x64",		"\xF0\x9D\x91\xAC"	=> "\x65",		"\xF0\x9D\x91\xAD"	=> "\x66",		"\xF0\x9D\x91\xAE"	=> "\x67",		"\xF0\x9D\x91\xAF"	=> "\x68",		"\xF0\x9D\x91\xB0"	=> "\x69",		"\xF0\x9D\x91\xB1"	=> "\x6A",		"\xF0\x9D\x91\xB2"	=> "\x6B",		"\xF0\x9D\x91\xB3"	=> "\x6C",		"\xF0\x9D\x91\xB4"	=> "\x6D",		"\xF0\x9D\x91\xB5"	=> "\x6E",		"\xF0\x9D\x91\xB6"	=> "\x6F",		"\xF0\x9D\x91\xB7"	=> "\x70",		"\xF0\x9D\x91\xB8"	=> "\x71",		"\xF0\x9D\x91\xB9"	=> "\x72",		"\xF0\x9D\x91\xBA"	=> "\x73",		"\xF0\x9D\x91\xBB"	=> "\x74",		"\xF0\x9D\x91\xBC"	=> "\x75",		"\xF0\x9D\x91\xBD"	=> "\x76",		"\xF0\x9D\x91\xBE"	=> "\x77",		"\xF0\x9D\x91\xBF"	=> "\x78",		"\xF0\x9D\x92\x80"	=> "\x79",		"\xF0\x9D\x92\x81"	=> "\x7A",		"\xF0\x9D\x92\x9C"	=> "\x61",		"\xF0\x9D\x92\x9E"	=> "\x63",		"\xF0\x9D\x92\x9F"	=> "\x64",		"\xF0\x9D\x92\xA2"	=> "\x67",		"\xF0\x9D\x92\xA5"	=> "\x6A",		"\xF0\x9D\x92\xA6"	=> "\x6B",		"\xF0\x9D\x92\xA9"	=> "\x6E",		"\xF0\x9D\x92\xAA"	=> "\x6F",		"\xF0\x9D\x92\xAB"	=> "\x70",		"\xF0\x9D\x92\xAC"	=> "\x71",		"\xF0\x9D\x92\xAE"	=> "\x73",		"\xF0\x9D\x92\xAF"	=> "\x74",		"\xF0\x9D\x92\xB0"	=> "\x75",		"\xF0\x9D\x92\xB1"	=> "\x76",		"\xF0\x9D\x92\xB2"	=> "\x77",		"\xF0\x9D\x92\xB3"	=> "\x78",		"\xF0\x9D\x92\xB4"	=> "\x79",		"\xF0\x9D\x92\xB5"	=> "\x7A",		"\xF0\x9D\x93\x90"	=> "\x61",		"\xF0\x9D\x93\x91"	=> "\x62",		"\xF0\x9D\x93\x92"	=> "\x63",		"\xF0\x9D\x93\x93"	=> "\x64",		"\xF0\x9D\x93\x94"	=> "\x65",		"\xF0\x9D\x93\x95"	=> "\x66",		"\xF0\x9D\x93\x96"	=> "\x67",		"\xF0\x9D\x93\x97"	=> "\x68",		"\xF0\x9D\x93\x98"	=> "\x69",		"\xF0\x9D\x93\x99"	=> "\x6A",		"\xF0\x9D\x93\x9A"	=> "\x6B",		"\xF0\x9D\x93\x9B"	=> "\x6C",		"\xF0\x9D\x93\x9C"	=> "\x6D",		"\xF0\x9D\x93\x9D"	=> "\x6E",		"\xF0\x9D\x93\x9E"	=> "\x6F",		"\xF0\x9D\x93\x9F"	=> "\x70",		"\xF0\x9D\x93\xA0"	=> "\x71",		"\xF0\x9D\x93\xA1"	=> "\x72",		"\xF0\x9D\x93\xA2"	=> "\x73",		"\xF0\x9D\x93\xA3"	=> "\x74",		"\xF0\x9D\x93\xA4"	=> "\x75",		"\xF0\x9D\x93\xA5"	=> "\x76",		"\xF0\x9D\x93\xA6"	=> "\x77",		"\xF0\x9D\x93\xA7"	=> "\x78",		"\xF0\x9D\x93\xA8"	=> "\x79",		"\xF0\x9D\x93\xA9"	=> "\x7A",		"\xF0\x9D\x94\x84"	=> "\x61",		"\xF0\x9D\x94\x85"	=> "\x62",		"\xF0\x9D\x94\x87"	=> "\x64",		"\xF0\x9D\x94\x88"	=> "\x65",		"\xF0\x9D\x94\x89"	=> "\x66",		"\xF0\x9D\x94\x8A"	=> "\x67",		"\xF0\x9D\x94\x8D"	=> "\x6A",		"\xF0\x9D\x94\x8E"	=> "\x6B",		"\xF0\x9D\x94\x8F"	=> "\x6C",		"\xF0\x9D\x94\x90"	=> "\x6D",		"\xF0\x9D\x94\x91"	=> "\x6E",		"\xF0\x9D\x94\x92"	=> "\x6F",		"\xF0\x9D\x94\x93"	=> "\x70",		"\xF0\x9D\x94\x94"	=> "\x71",		"\xF0\x9D\x94\x96"	=> "\x73",		"\xF0\x9D\x94\x97"	=> "\x74",		"\xF0\x9D\x94\x98"	=> "\x75",		"\xF0\x9D\x94\x99"	=> "\x76",		"\xF0\x9D\x94\x9A"	=> "\x77",		"\xF0\x9D\x94\x9B"	=> "\x78",		"\xF0\x9D\x94\x9C"	=> "\x79",		"\xF0\x9D\x94\xB8"	=> "\x61",		"\xF0\x9D\x94\xB9"	=> "\x62",		"\xF0\x9D\x94\xBB"	=> "\x64",		"\xF0\x9D\x94\xBC"	=> "\x65",		"\xF0\x9D\x94\xBD"	=> "\x66",		"\xF0\x9D\x94\xBE"	=> "\x67",		"\xF0\x9D\x95\x80"	=> "\x69",		"\xF0\x9D\x95\x81"	=> "\x6A",		"\xF0\x9D\x95\x82"	=> "\x6B",		"\xF0\x9D\x95\x83"	=> "\x6C",		"\xF0\x9D\x95\x84"	=> "\x6D",		"\xF0\x9D\x95\x86"	=> "\x6F",		"\xF0\x9D\x95\x8A"	=> "\x73",		"\xF0\x9D\x95\x8B"	=> "\x74",		"\xF0\x9D\x95\x8C"	=> "\x75",		"\xF0\x9D\x95\x8D"	=> "\x76",		"\xF0\x9D\x95\x8E"	=> "\x77",		"\xF0\x9D\x95\x8F"	=> "\x78",		"\xF0\x9D\x95\x90"	=> "\x79",		"\xF0\x9D\x95\xAC"	=> "\x61",		"\xF0\x9D\x95\xAD"	=> "\x62",		"\xF0\x9D\x95\xAE"	=> "\x63",		"\xF0\x9D\x95\xAF"	=> "\x64",		"\xF0\x9D\x95\xB0"	=> "\x65",		"\xF0\x9D\x95\xB1"	=> "\x66",		"\xF0\x9D\x95\xB2"	=> "\x67",		"\xF0\x9D\x95\xB3"	=> "\x68",		"\xF0\x9D\x95\xB4"	=> "\x69",		"\xF0\x9D\x95\xB5"	=> "\x6A",		"\xF0\x9D\x95\xB6"	=> "\x6B",		"\xF0\x9D\x95\xB7"	=> "\x6C",		"\xF0\x9D\x95\xB8"	=> "\x6D",		"\xF0\x9D\x95\xB9"	=> "\x6E",		"\xF0\x9D\x95\xBA"	=> "\x6F",		"\xF0\x9D\x95\xBB"	=> "\x70",		"\xF0\x9D\x95\xBC"	=> "\x71",		"\xF0\x9D\x95\xBD"	=> "\x72",		"\xF0\x9D\x95\xBE"	=> "\x73",		"\xF0\x9D\x95\xBF"	=> "\x74",		"\xF0\x9D\x96\x80"	=> "\x75",		"\xF0\x9D\x96\x81"	=> "\x76",		"\xF0\x9D\x96\x82"	=> "\x77",		"\xF0\x9D\x96\x83"	=> "\x78",		"\xF0\x9D\x96\x84"	=> "\x79",		"\xF0\x9D\x96\x85"	=> "\x7A",		"\xF0\x9D\x96\xA0"	=> "\x61",		"\xF0\x9D\x96\xA1"	=> "\x62",		"\xF0\x9D\x96\xA2"	=> "\x63",		"\xF0\x9D\x96\xA3"	=> "\x64",		"\xF0\x9D\x96\xA4"	=> "\x65",		"\xF0\x9D\x96\xA5"	=> "\x66",		"\xF0\x9D\x96\xA6"	=> "\x67",		"\xF0\x9D\x96\xA7"	=> "\x68",		"\xF0\x9D\x96\xA8"	=> "\x69",		"\xF0\x9D\x96\xA9"	=> "\x6A",		"\xF0\x9D\x96\xAA"	=> "\x6B",		"\xF0\x9D\x96\xAB"	=> "\x6C",		"\xF0\x9D\x96\xAC"	=> "\x6D",		"\xF0\x9D\x96\xAD"	=> "\x6E",		"\xF0\x9D\x96\xAE"	=> "\x6F",		"\xF0\x9D\x96\xAF"	=> "\x70",		"\xF0\x9D\x96\xB0"	=> "\x71",		"\xF0\x9D\x96\xB1"	=> "\x72",		"\xF0\x9D\x96\xB2"	=> "\x73",		"\xF0\x9D\x96\xB3"	=> "\x74",		"\xF0\x9D\x96\xB4"	=> "\x75",		"\xF0\x9D\x96\xB5"	=> "\x76",		"\xF0\x9D\x96\xB6"	=> "\x77",		"\xF0\x9D\x96\xB7"	=> "\x78",		"\xF0\x9D\x96\xB8"	=> "\x79",		"\xF0\x9D\x96\xB9"	=> "\x7A",		"\xF0\x9D\x97\x94"	=> "\x61",		"\xF0\x9D\x97\x95"	=> "\x62",		"\xF0\x9D\x97\x96"	=> "\x63",		"\xF0\x9D\x97\x97"	=> "\x64",		"\xF0\x9D\x97\x98"	=> "\x65",		"\xF0\x9D\x97\x99"	=> "\x66",		"\xF0\x9D\x97\x9A"	=> "\x67",		"\xF0\x9D\x97\x9B"	=> "\x68",		"\xF0\x9D\x97\x9C"	=> "\x69",		"\xF0\x9D\x97\x9D"	=> "\x6A",		"\xF0\x9D\x97\x9E"	=> "\x6B",		"\xF0\x9D\x97\x9F"	=> "\x6C",		"\xF0\x9D\x97\xA0"	=> "\x6D",		"\xF0\x9D\x97\xA1"	=> "\x6E",		"\xF0\x9D\x97\xA2"	=> "\x6F",		"\xF0\x9D\x97\xA3"	=> "\x70",		"\xF0\x9D\x97\xA4"	=> "\x71",		"\xF0\x9D\x97\xA5"	=> "\x72",		"\xF0\x9D\x97\xA6"	=> "\x73",		"\xF0\x9D\x97\xA7"	=> "\x74",		"\xF0\x9D\x97\xA8"	=> "\x75",		"\xF0\x9D\x97\xA9"	=> "\x76",		"\xF0\x9D\x97\xAA"	=> "\x77",		"\xF0\x9D\x97\xAB"	=> "\x78",		"\xF0\x9D\x97\xAC"	=> "\x79",		"\xF0\x9D\x97\xAD"	=> "\x7A",		"\xF0\x9D\x98\x88"	=> "\x61",		"\xF0\x9D\x98\x89"	=> "\x62",		"\xF0\x9D\x98\x8A"	=> "\x63",		"\xF0\x9D\x98\x8B"	=> "\x64",		"\xF0\x9D\x98\x8C"	=> "\x65",		"\xF0\x9D\x98\x8D"	=> "\x66",		"\xF0\x9D\x98\x8E"	=> "\x67",		"\xF0\x9D\x98\x8F"	=> "\x68",		"\xF0\x9D\x98\x90"	=> "\x69",		"\xF0\x9D\x98\x91"	=> "\x6A",		"\xF0\x9D\x98\x92"	=> "\x6B",		"\xF0\x9D\x98\x93"	=> "\x6C",		"\xF0\x9D\x98\x94"	=> "\x6D",		"\xF0\x9D\x98\x95"	=> "\x6E",		"\xF0\x9D\x98\x96"	=> "\x6F",		"\xF0\x9D\x98\x97"	=> "\x70",		"\xF0\x9D\x98\x98"	=> "\x71",		"\xF0\x9D\x98\x99"	=> "\x72",		"\xF0\x9D\x98\x9A"	=> "\x73",		"\xF0\x9D\x98\x9B"	=> "\x74",		"\xF0\x9D\x98\x9C"	=> "\x75",		"\xF0\x9D\x98\x9D"	=> "\x76",		"\xF0\x9D\x98\x9E"	=> "\x77",		"\xF0\x9D\x98\x9F"	=> "\x78",		"\xF0\x9D\x98\xA0"	=> "\x79",		"\xF0\x9D\x98\xA1"	=> "\x7A",		"\xF0\x9D\x98\xBC"	=> "\x61",		"\xF0\x9D\x98\xBD"	=> "\x62",		"\xF0\x9D\x98\xBE"	=> "\x63",		"\xF0\x9D\x98\xBF"	=> "\x64",		"\xF0\x9D\x99\x80"	=> "\x65",		"\xF0\x9D\x99\x81"	=> "\x66",		"\xF0\x9D\x99\x82"	=> "\x67",		"\xF0\x9D\x99\x83"	=> "\x68",		"\xF0\x9D\x99\x84"	=> "\x69",		"\xF0\x9D\x99\x85"	=> "\x6A",		"\xF0\x9D\x99\x86"	=> "\x6B",		"\xF0\x9D\x99\x87"	=> "\x6C",		"\xF0\x9D\x99\x88"	=> "\x6D",		"\xF0\x9D\x99\x89"	=> "\x6E",		"\xF0\x9D\x99\x8A"	=> "\x6F",		"\xF0\x9D\x99\x8B"	=> "\x70",		"\xF0\x9D\x99\x8C"	=> "\x71",		"\xF0\x9D\x99\x8D"	=> "\x72",		"\xF0\x9D\x99\x8E"	=> "\x73",		"\xF0\x9D\x99\x8F"	=> "\x74",		"\xF0\x9D\x99\x90"	=> "\x75",		"\xF0\x9D\x99\x91"	=> "\x76",		"\xF0\x9D\x99\x92"	=> "\x77",		"\xF0\x9D\x99\x93"	=> "\x78",		"\xF0\x9D\x99\x94"	=> "\x79",		"\xF0\x9D\x99\x95"	=> "\x7A",		"\xF0\x9D\x99\xB0"	=> "\x61",		"\xF0\x9D\x99\xB1"	=> "\x62",		"\xF0\x9D\x99\xB2"	=> "\x63",		"\xF0\x9D\x99\xB3"	=> "\x64",		"\xF0\x9D\x99\xB4"	=> "\x65",		"\xF0\x9D\x99\xB5"	=> "\x66",		"\xF0\x9D\x99\xB6"	=> "\x67",		"\xF0\x9D\x99\xB7"	=> "\x68",		"\xF0\x9D\x99\xB8"	=> "\x69",		"\xF0\x9D\x99\xB9"	=> "\x6A",		"\xF0\x9D\x99\xBA"	=> "\x6B",		"\xF0\x9D\x99\xBB"	=> "\x6C",		"\xF0\x9D\x99\xBC"	=> "\x6D",		"\xF0\x9D\x99\xBD"	=> "\x6E",		"\xF0\x9D\x99\xBE"	=> "\x6F",		"\xF0\x9D\x99\xBF"	=> "\x70",		"\xF0\x9D\x9A\x80"	=> "\x71",		"\xF0\x9D\x9A\x81"	=> "\x72",		"\xF0\x9D\x9A\x82"	=> "\x73",		"\xF0\x9D\x9A\x83"	=> "\x74",		"\xF0\x9D\x9A\x84"	=> "\x75",		"\xF0\x9D\x9A\x85"	=> "\x76",		"\xF0\x9D\x9A\x86"	=> "\x77",		"\xF0\x9D\x9A\x87"	=> "\x78",		"\xF0\x9D\x9A\x88"	=> "\x79",		"\xF0\x9D\x9A\x89"	=> "\x7A",		"\xF0\x9D\x9A\xA8"	=> "\xCE\xB1",		"\xF0\x9D\x9A\xA9"	=> "\xCE\xB2",		"\xF0\x9D\x9A\xAA"	=> "\xCE\xB3",		"\xF0\x9D\x9A\xAB"	=> "\xCE\xB4",		"\xF0\x9D\x9A\xAC"	=> "\xCE\xB5",		"\xF0\x9D\x9A\xAD"	=> "\xCE\xB6",		"\xF0\x9D\x9A\xAE"	=> "\xCE\xB7",		"\xF0\x9D\x9A\xAF"	=> "\xCE\xB8",		"\xF0\x9D\x9A\xB0"	=> "\xCE\xB9",		"\xF0\x9D\x9A\xB1"	=> "\xCE\xBA",		"\xF0\x9D\x9A\xB2"	=> "\xCE\xBB",		"\xF0\x9D\x9A\xB3"	=> "\xCE\xBC",		"\xF0\x9D\x9A\xB4"	=> "\xCE\xBD",		"\xF0\x9D\x9A\xB5"	=> "\xCE\xBE",		"\xF0\x9D\x9A\xB6"	=> "\xCE\xBF",		"\xF0\x9D\x9A\xB7"	=> "\xCF\x80",		"\xF0\x9D\x9A\xB8"	=> "\xCF\x81",		"\xF0\x9D\x9A\xB9"	=> "\xCE\xB8",		"\xF0\x9D\x9A\xBA"	=> "\xCF\x83",		"\xF0\x9D\x9A\xBB"	=> "\xCF\x84",		"\xF0\x9D\x9A\xBC"	=> "\xCF\x85",		"\xF0\x9D\x9A\xBD"	=> "\xCF\x86",		"\xF0\x9D\x9A\xBE"	=> "\xCF\x87",		"\xF0\x9D\x9A\xBF"	=> "\xCF\x88",		"\xF0\x9D\x9B\x80"	=> "\xCF\x89",		"\xF0\x9D\x9B\x93"	=> "\xCF\x83",		"\xF0\x9D\x9B\xA2"	=> "\xCE\xB1",		"\xF0\x9D\x9B\xA3"	=> "\xCE\xB2",		"\xF0\x9D\x9B\xA4"	=> "\xCE\xB3",		"\xF0\x9D\x9B\xA5"	=> "\xCE\xB4",		"\xF0\x9D\x9B\xA6"	=> "\xCE\xB5",		"\xF0\x9D\x9B\xA7"	=> "\xCE\xB6",		"\xF0\x9D\x9B\xA8"	=> "\xCE\xB7",		"\xF0\x9D\x9B\xA9"	=> "\xCE\xB8",		"\xF0\x9D\x9B\xAA"	=> "\xCE\xB9",		"\xF0\x9D\x9B\xAB"	=> "\xCE\xBA",		"\xF0\x9D\x9B\xAC"	=> "\xCE\xBB",		"\xF0\x9D\x9B\xAD"	=> "\xCE\xBC",		"\xF0\x9D\x9B\xAE"	=> "\xCE\xBD",		"\xF0\x9D\x9B\xAF"	=> "\xCE\xBE",		"\xF0\x9D\x9B\xB0"	=> "\xCE\xBF",		"\xF0\x9D\x9B\xB1"	=> "\xCF\x80",		"\xF0\x9D\x9B\xB2"	=> "\xCF\x81",		"\xF0\x9D\x9B\xB3"	=> "\xCE\xB8",		"\xF0\x9D\x9B\xB4"	=> "\xCF\x83",		"\xF0\x9D\x9B\xB5"	=> "\xCF\x84",		"\xF0\x9D\x9B\xB6"	=> "\xCF\x85",		"\xF0\x9D\x9B\xB7"	=> "\xCF\x86",		"\xF0\x9D\x9B\xB8"	=> "\xCF\x87",		"\xF0\x9D\x9B\xB9"	=> "\xCF\x88",		"\xF0\x9D\x9B\xBA"	=> "\xCF\x89",		"\xF0\x9D\x9C\x8D"	=> "\xCF\x83",		"\xF0\x9D\x9C\x9C"	=> "\xCE\xB1",		"\xF0\x9D\x9C\x9D"	=> "\xCE\xB2",		"\xF0\x9D\x9C\x9E"	=> "\xCE\xB3",		"\xF0\x9D\x9C\x9F"	=> "\xCE\xB4",		"\xF0\x9D\x9C\xA0"	=> "\xCE\xB5",		"\xF0\x9D\x9C\xA1"	=> "\xCE\xB6",		"\xF0\x9D\x9C\xA2"	=> "\xCE\xB7",		"\xF0\x9D\x9C\xA3"	=> "\xCE\xB8",		"\xF0\x9D\x9C\xA4"	=> "\xCE\xB9",		"\xF0\x9D\x9C\xA5"	=> "\xCE\xBA",		"\xF0\x9D\x9C\xA6"	=> "\xCE\xBB",		"\xF0\x9D\x9C\xA7"	=> "\xCE\xBC",		"\xF0\x9D\x9C\xA8"	=> "\xCE\xBD",		"\xF0\x9D\x9C\xA9"	=> "\xCE\xBE",		"\xF0\x9D\x9C\xAA"	=> "\xCE\xBF",		"\xF0\x9D\x9C\xAB"	=> "\xCF\x80",		"\xF0\x9D\x9C\xAC"	=> "\xCF\x81",		"\xF0\x9D\x9C\xAD"	=> "\xCE\xB8",		"\xF0\x9D\x9C\xAE"	=> "\xCF\x83",		"\xF0\x9D\x9C\xAF"	=> "\xCF\x84",		"\xF0\x9D\x9C\xB0"	=> "\xCF\x85",		"\xF0\x9D\x9C\xB1"	=> "\xCF\x86",		"\xF0\x9D\x9C\xB2"	=> "\xCF\x87",		"\xF0\x9D\x9C\xB3"	=> "\xCF\x88",		"\xF0\x9D\x9C\xB4"	=> "\xCF\x89",		"\xF0\x9D\x9D\x87"	=> "\xCF\x83",		"\xF0\x9D\x9D\x96"	=> "\xCE\xB1",		"\xF0\x9D\x9D\x97"	=> "\xCE\xB2",		"\xF0\x9D\x9D\x98"	=> "\xCE\xB3",		"\xF0\x9D\x9D\x99"	=> "\xCE\xB4",		"\xF0\x9D\x9D\x9A"	=> "\xCE\xB5",		"\xF0\x9D\x9D\x9B"	=> "\xCE\xB6",		"\xF0\x9D\x9D\x9C"	=> "\xCE\xB7",		"\xF0\x9D\x9D\x9D"	=> "\xCE\xB8",		"\xF0\x9D\x9D\x9E"	=> "\xCE\xB9",		"\xF0\x9D\x9D\x9F"	=> "\xCE\xBA",		"\xF0\x9D\x9D\xA0"	=> "\xCE\xBB",		"\xF0\x9D\x9D\xA1"	=> "\xCE\xBC",		"\xF0\x9D\x9D\xA2"	=> "\xCE\xBD",		"\xF0\x9D\x9D\xA3"	=> "\xCE\xBE",		"\xF0\x9D\x9D\xA4"	=> "\xCE\xBF",		"\xF0\x9D\x9D\xA5"	=> "\xCF\x80",		"\xF0\x9D\x9D\xA6"	=> "\xCF\x81",		"\xF0\x9D\x9D\xA7"	=> "\xCE\xB8",		"\xF0\x9D\x9D\xA8"	=> "\xCF\x83",		"\xF0\x9D\x9D\xA9"	=> "\xCF\x84",		"\xF0\x9D\x9D\xAA"	=> "\xCF\x85",		"\xF0\x9D\x9D\xAB"	=> "\xCF\x86",		"\xF0\x9D\x9D\xAC"	=> "\xCF\x87",		"\xF0\x9D\x9D\xAD"	=> "\xCF\x88",		"\xF0\x9D\x9D\xAE"	=> "\xCF\x89",		"\xF0\x9D\x9E\x81"	=> "\xCF\x83",		"\xF0\x9D\x9E\x90"	=> "\xCE\xB1",		"\xF0\x9D\x9E\x91"	=> "\xCE\xB2",		"\xF0\x9D\x9E\x92"	=> "\xCE\xB3",		"\xF0\x9D\x9E\x93"	=> "\xCE\xB4",		"\xF0\x9D\x9E\x94"	=> "\xCE\xB5",		"\xF0\x9D\x9E\x95"	=> "\xCE\xB6",		"\xF0\x9D\x9E\x96"	=> "\xCE\xB7",		"\xF0\x9D\x9E\x97"	=> "\xCE\xB8",		"\xF0\x9D\x9E\x98"	=> "\xCE\xB9",		"\xF0\x9D\x9E\x99"	=> "\xCE\xBA",		"\xF0\x9D\x9E\x9A"	=> "\xCE\xBB",		"\xF0\x9D\x9E\x9B"	=> "\xCE\xBC",		"\xF0\x9D\x9E\x9C"	=> "\xCE\xBD",		"\xF0\x9D\x9E\x9D"	=> "\xCE\xBE",		"\xF0\x9D\x9E\x9E"	=> "\xCE\xBF",		"\xF0\x9D\x9E\x9F"	=> "\xCF\x80",		"\xF0\x9D\x9E\xA0"	=> "\xCF\x81",		"\xF0\x9D\x9E\xA1"	=> "\xCE\xB8",		"\xF0\x9D\x9E\xA2"	=> "\xCF\x83",		"\xF0\x9D\x9E\xA3"	=> "\xCF\x84",		"\xF0\x9D\x9E\xA4"	=> "\xCF\x85",		"\xF0\x9D\x9E\xA5"	=> "\xCF\x86",		"\xF0\x9D\x9E\xA6"	=> "\xCF\x87",		"\xF0\x9D\x9E\xA7"	=> "\xCF\x88",		"\xF0\x9D\x9E\xA8"	=> "\xCF\x89",		"\xF0\x9D\x9E\xBB"	=> "\xCF\x83",		"\xF0\x9D\x9F\x8A"	=> "\xCF\x9D",	);	global $phpbb_root_path, $phpEx;	// do the case fold	$text = utf8_new_case_fold($text, $option);	if (!class_exists('utf_normalizer'))	{		global $phpbb_root_path, $phpEx;		include($phpbb_root_path . 'includes/utf/utf_normalizer.' . $phpEx);	}	// convert to NFKC	utf_new_normalizer::nfkc($text);	// FC_NFKC_Closure, http://www.unicode.org/Public/5.0.0/ucd/DerivedNormalizationProps.txt	$text = strtr($text, $fc_nfkc_closure);	return $text;}return array(''=>'i',''=>'!',''=>'a',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'o',''=>'o',''=>'',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>'`',''=>'`',''=>'',''=>'^',''=>'^',''=>'_',''=>'_',''=>'_',''=>'_',''=>'',''=>'-',''=>'-',''=>'-',''=>'-',''=>'-',''=>'-',''=>'',''=>'',''=>'',''=>',',''=>',',''=>'',''=>'',''=>';',''=>';',''=>':',''=>':',''=>':',''=>':',''=>'::=',''=>'.',''=>'.',''=>'.',''=>'..',''=>'...',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'4',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'L',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'(',''=>'(1)',''=>'(l)',''=>'(10)',''=>'(11)',''=>'(12)',''=>'(13)',''=>'(14)',''=>'(15)',''=>'(16)',''=>'(17)',''=>'(18)',''=>'(19)',''=>'(2)',''=>'(20)',''=>'(3)',''=>'(4)',''=>'(5)',''=>'(6)',''=>'(7)',''=>'(8)',''=>'(9)',''=>'(a)',''=>'(b)',''=>'(c)',''=>'(d)',''=>'(e)',''=>'(f)',''=>'(g)',''=>'(h)',''=>'(i)',''=>'(j)',''=>'(k)',''=>'(m)',''=>'(n)',''=>'(o)',''=>'(p)',''=>'(q)',''=>'(r)',''=>'(s)',''=>'(t)',''=>'(u)',''=>'(v)',''=>'(w)',''=>'(x)',''=>'(y)',''=>'(z)',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>')',''=>'[',''=>'[',''=>']',''=>']',''=>'{',''=>'}',''=>'',''=>'',''=>'',''=>'',''=>'@',''=>'*',''=>'/',''=>'/',''=>'/',''=>'\\',''=>'&',''=>'#',''=>'%',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','\''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','"'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'+',''=>'+',''=>'<',''=>'<',''=>'=',''=>'==',''=>'===',''=>'>',''=>'>',''=>'',''=>'',''=>'~',''=>'~',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'$',''=>'',''=>'Y',''=>'W',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'',''=>'',''=>'0',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1','l'=>'l',''=>'l',''=>'1',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'',''=>'l',''=>'l',''=>'l',''=>'l',''=>'',''=>'1.',''=>'l',''=>'1',''=>'',''=>'10.',''=>'10',''=>'10',''=>'10',''=>'11.',''=>'11',''=>'11',''=>'11',''=>'12.',''=>'12',''=>'12',''=>'12',''=>'13.',''=>'13',''=>'13',''=>'14.',''=>'14',''=>'14',''=>'15.',''=>'15',''=>'15',''=>'16.',''=>'16',''=>'16',''=>'17.',''=>'17',''=>'17',''=>'18.',''=>'18',''=>'18',''=>'19.',''=>'19',''=>'19',''=>'lj',''=>'1',''=>'1',''=>'1',''=>'2',''=>'2',''=>'2',''=>'2',''=>'2',''=>'2',''=>'2',''=>'',''=>'',''=>'2.',''=>'20.',''=>'20',''=>'20',''=>'21',''=>'21',''=>'22',''=>'22',''=>'23',''=>'23',''=>'24',''=>'24',''=>'25',''=>'26',''=>'27',''=>'28',''=>'29',''=>'2',''=>'2',''=>'2',''=>'3',''=>'3',''=>'3',''=>'3',''=>'3',''=>'3',''=>'',''=>'',''=>'3.',''=>'30',''=>'31',''=>'3',''=>'3',''=>'3',''=>'4',''=>'4',''=>'4',''=>'4',''=>'4',''=>'4',''=>'4',''=>'',''=>'4.',''=>'4',''=>'4',''=>'4',''=>'4',''=>'5',''=>'5',''=>'5',''=>'5',''=>'5',''=>'5',''=>'',''=>'5.',''=>'5',''=>'5',''=>'5',''=>'6',''=>'6',''=>'6',''=>'6',''=>'6',''=>'6',''=>'6',''=>'',''=>'6.',''=>'6',''=>'6',''=>'6',''=>'7',''=>'7',''=>'7',''=>'7',''=>'7',''=>'7',''=>'',''=>'',''=>'7.',''=>'7',''=>'7',''=>'7',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'',''=>'',''=>'8.',''=>'8',''=>'8',''=>'8',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'',''=>'',''=>'9.',''=>'9',''=>'9',''=>'9',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a/c',''=>'a/s',''=>'ae',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c/o',''=>'c/u',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'dz',''=>'d',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'E',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'',''=>'',''=>'',''=>'',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'ii',''=>'iii',''=>'ij',''=>'iv',''=>'ix',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'nj',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'oe',''=>'o',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'q',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'',''=>'',''=>'',''=>'',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'t',''=>'',''=>'',''=>'t',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'vi',''=>'vii',''=>'viii',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'xi',''=>'xii',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'','?'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','!'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'ae',''=>'r',''=>'r',''=>'',''=>'',''=>'i',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'o',''=>'o',''=>'c',''=>'',''=>'y',''=>'y',''=>'h',''=>'',''=>'',''=>'',''=>'',''=>'q',''=>'n',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'   ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'o',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'y',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'w',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'P',''=>'d',''=>'J',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'P',''=>'P',''=>'',''=>'d',''=>'d',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'J',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'x',''=>'x',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'P',''=>'',''=>'d',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'',''=>'',''=>'',''=>'',''=>'J',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'J',''=>'',''=>'',''=>'',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','|'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'C',''=>'F',''=>'',''=>'FAX',''=>'N',''=>'No',''=>'Q',''=>'Rs',''=>'T',''=>'TEL',''=>'U',''=>'W',''=>'W',''=>'X',''=>'Y',''=>'',''=>'',''=>'',''=>'c',''=>'Y',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'b',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'a',''=>'b',''=>'b',''=>'c',''=>'d',''=>'d',''=>'e',''=>'',''=>'',''=>'',''=>'f',''=>'g',''=>'h',''=>'h',''=>'h',''=>'h',''=>'i',''=>'i',''=>'i',''=>'j',''=>'j',''=>'m',''=>'n',''=>'n',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'p',''=>'p',''=>'',''=>'q',''=>'',''=>'',''=>'r',''=>'r',''=>'s',''=>'u',''=>'u',''=>'v',''=>'v',''=>'w',''=>'w',''=>'x',''=>'x',''=>'y',''=>'y',''=>'',''=>'',''=>'',''=>'',''=>'i',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'A',''=>'J',''=>'H',''=>'V',''=>'P',''=>'B',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'A',''=>'B',''=>'C',''=>'D',''=>'E',''=>'F',''=>'G',''=>'H',''=>'J',''=>'K',''=>'L',''=>'M',''=>'P',''=>'R',''=>'S',''=>'V',''=>'Z');?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Handling actions in post details screen*/function mcp_post_details($id, $mode, $action){	global $phpEx, $phpbb_root_path, $config;	global $template, $db, $user, $auth, $cache;	$user->add_lang('posting');	$post_id = request_var('p', 0);	$start	= request_var('start', 0);	// Get post data	$post_info = get_post_data(array($post_id), false, true);	add_form_key('mcp_post_details');	if (!sizeof($post_info))	{		trigger_error('POST_NOT_EXIST');	}	$post_info = $post_info[$post_id];	$url = append_sid("{$phpbb_root_path}mcp.$phpEx?" . extra_url());	switch ($action)	{		case 'whois':			if ($auth->acl_get('m_info', $post_info['forum_id']))			{				$ip = request_var('ip', '');				include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$template->assign_vars(array(					'RETURN_POST'	=> sprintf($user->lang['RETURN_POST'], '<a href="' . append_sid("{$phpbb_root_path}mcp.$phpEx", "i=$id&amp;mode=$mode&amp;p=$post_id") . '">', '</a>'),					'U_RETURN_POST'	=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=$id&amp;mode=$mode&amp;p=$post_id"),					'L_RETURN_POST'	=> sprintf($user->lang['RETURN_POST'], '', ''),					'WHOIS'			=> user_ipwhois($ip),				));			}			// We're done with the whois page so return			return;		break;		case 'chgposter':		case 'chgposter_ip':			if ($action == 'chgposter')			{				$username = request_var('username', '', true);				$sql_where = "username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";			}			else			{				$new_user_id = request_var('u', 0);				$sql_where = 'user_id = ' . $new_user_id;			}			$sql = 'SELECT *				FROM ' . USERS_TABLE . '				WHERE ' . $sql_where;			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$row)			{				trigger_error('NO_USER');			}			if ($auth->acl_get('m_chgposter', $post_info['forum_id']))			{				if (check_form_key('mcp_post_details'))				{					change_poster($post_info, $row);				}				else				{					trigger_error('FORM_INVALID');				}			}		break;	}	// Set some vars	$users_ary = $usernames_ary = array();	$attachments = $extensions = array();	$post_id = $post_info['post_id'];	$topic_tracking_info = array();	// Get topic tracking info	if ($config['load_db_lastread'])	{		$tmp_topic_data = array($post_info['topic_id'] => $post_info);		$topic_tracking_info = get_topic_tracking($post_info['forum_id'], $post_info['topic_id'], $tmp_topic_data, array($post_info['forum_id'] => $post_info['forum_mark_time']));		unset($tmp_topic_data);	}	else	{		$topic_tracking_info = get_complete_topic_tracking($post_info['forum_id'], $post_info['topic_id']);	}	$post_unread = (isset($topic_tracking_info[$post_info['topic_id']]) && $post_info['post_time'] > $topic_tracking_info[$post_info['topic_id']]) ? true : false;	// Process message, leave it uncensored	$message = $post_info['post_text'];	if ($post_info['bbcode_bitfield'])	{		include_once($phpbb_root_path . 'includes/bbcode.' . $phpEx);		$bbcode = new bbcode($post_info['bbcode_bitfield']);		$bbcode->bbcode_second_pass($message, $post_info['bbcode_uid'], $post_info['bbcode_bitfield']);	}	$message = bbcode_nl2br($message);	$message = smiley_text($message);	if ($post_info['post_attachment'] && $auth->acl_get('u_download') && $auth->acl_get('f_download', $post_info['forum_id']))	{		$extensions = $cache->obtain_attach_extensions($post_info['forum_id']);		$sql = 'SELECT *			FROM ' . ATTACHMENTS_TABLE . '			WHERE post_msg_id = ' . $post_id . '				AND in_message = 0			ORDER BY filetime DESC, post_msg_id ASC';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$attachments[] = $row;		}		$db->sql_freeresult($result);		if (sizeof($attachments))		{			$update_count = array();			parse_attachments($post_info['forum_id'], $message, $attachments, $update_count);		}		// Display not already displayed Attachments for this post, we already parsed them. ;)		if (!empty($attachments))		{			$template->assign_var('S_HAS_ATTACHMENTS', true);			foreach ($attachments as $attachment)			{				$template->assign_block_vars('attachment', array(					'DISPLAY_ATTACHMENT'	=> $attachment)				);			}		}	}	$template->assign_vars(array(		'U_MCP_ACTION'			=> "$url&amp;i=main&amp;quickmod=1&amp;mode=post_details", // Use this for mode paramaters		'U_POST_ACTION'			=> "$url&amp;i=$id&amp;mode=post_details", // Use this for action parameters		'U_APPROVE_ACTION'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=queue&amp;p=$post_id&amp;f={$post_info['forum_id']}"),		'S_CAN_VIEWIP'			=> $auth->acl_get('m_info', $post_info['forum_id']),		'S_CAN_CHGPOSTER'		=> $auth->acl_get('m_chgposter', $post_info['forum_id']),		'S_CAN_LOCK_POST'		=> $auth->acl_get('m_lock', $post_info['forum_id']),		'S_CAN_DELETE_POST'		=> $auth->acl_get('m_delete', $post_info['forum_id']),		'S_POST_REPORTED'		=> ($post_info['post_reported']) ? true : false,		'S_POST_UNAPPROVED'		=> (!$post_info['post_approved']) ? true : false,		'S_POST_LOCKED'			=> ($post_info['post_edit_locked']) ? true : false,		'S_USER_NOTES'			=> true,		'S_CLEAR_ALLOWED'		=> ($auth->acl_get('a_clearlogs')) ? true : false,		'U_EDIT'				=> ($auth->acl_get('m_edit', $post_info['forum_id'])) ? append_sid("{$phpbb_root_path}posting.$phpEx", "mode=edit&amp;f={$post_info['forum_id']}&amp;p={$post_info['post_id']}") : '',		'U_FIND_USERNAME'		=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=mcp_chgposter&amp;field=username&amp;select_single=true'),		'U_MCP_APPROVE'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue&amp;mode=approve_details&amp;f=' . $post_info['forum_id'] . '&amp;p=' . $post_id),		'U_MCP_REPORT'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports&amp;mode=report_details&amp;f=' . $post_info['forum_id'] . '&amp;p=' . $post_id),		'U_MCP_USER_NOTES'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $post_info['user_id']),		'U_MCP_WARN_USER'		=> ($auth->acl_get('m_warn')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=warn&amp;mode=warn_user&amp;u=' . $post_info['user_id']) : '',		'U_VIEW_POST'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $post_info['forum_id'] . '&amp;p=' . $post_info['post_id'] . '#p' . $post_info['post_id']),		'U_VIEW_TOPIC'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $post_info['forum_id'] . '&amp;t=' . $post_info['topic_id']),		'MINI_POST_IMG'			=> ($post_unread) ? $user->img('icon_post_target_unread', 'UNREAD_POST') : $user->img('icon_post_target', 'POST'),		'RETURN_TOPIC'			=> sprintf($user->lang['RETURN_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f={$post_info['forum_id']}&amp;p=$post_id") . "#p$post_id\">", '</a>'),		'RETURN_FORUM'			=> sprintf($user->lang['RETURN_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", "f={$post_info['forum_id']}&amp;start={$start}") . '">', '</a>'),		'REPORTED_IMG'			=> $user->img('icon_topic_reported', $user->lang['POST_REPORTED']),		'UNAPPROVED_IMG'		=> $user->img('icon_topic_unapproved', $user->lang['POST_UNAPPROVED']),		'EDIT_IMG'				=> $user->img('icon_post_edit', $user->lang['EDIT_POST']),		'SEARCH_IMG'			=> $user->img('icon_user_search', $user->lang['SEARCH']),		'POST_AUTHOR_FULL'		=> get_username_string('full', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),		'POST_AUTHOR_COLOUR'	=> get_username_string('colour', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),		'POST_AUTHOR'			=> get_username_string('username', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),		'U_POST_AUTHOR'			=> get_username_string('profile', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),		'POST_PREVIEW'			=> $message,		'POST_SUBJECT'			=> $post_info['post_subject'],		'POST_DATE'				=> $user->format_date($post_info['post_time']),		'POST_IP'				=> $post_info['poster_ip'],		'POST_IPADDR'			=> ($auth->acl_get('m_info', $post_info['forum_id']) && request_var('lookup', '')) ? @gethostbyaddr($post_info['poster_ip']) : '',		'POST_ID'				=> $post_info['post_id'],		'U_LOOKUP_IP'			=> ($auth->acl_get('m_info', $post_info['forum_id'])) ? "$url&amp;i=$id&amp;mode=$mode&amp;lookup={$post_info['poster_ip']}#ip" : '',		'U_WHOIS'				=> ($auth->acl_get('m_info', $post_info['forum_id'])) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "i=$id&amp;mode=$mode&amp;action=whois&amp;p=$post_id&amp;ip={$post_info['poster_ip']}") : '',	));	// Get User Notes	$log_data = array();	$log_count = false;	view_log('user', $log_data, $log_count, $config['posts_per_page'], 0, 0, 0, $post_info['user_id']);	if (!empty($log_data))	{		$template->assign_var('S_USER_NOTES', true);		foreach ($log_data as $row)		{			$template->assign_block_vars('usernotes', array(				'REPORT_BY'		=> $row['username_full'],				'REPORT_AT'		=> $user->format_date($row['time']),				'ACTION'		=> $row['action'],				'ID'			=> $row['id'])			);		}	}	// Get Reports	if ($auth->acl_get('m_report', $post_info['forum_id']))	{		$sql = 'SELECT r.*, re.*, u.user_id, u.username			FROM ' . REPORTS_TABLE . ' r, ' . USERS_TABLE . ' u, ' . REPORTS_REASONS_TABLE . " re			WHERE r.post_id = $post_id				AND r.reason_id = re.reason_id				AND u.user_id = r.user_id			ORDER BY r.report_time DESC";		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			$template->assign_var('S_SHOW_REPORTS', true);			do			{				// If the reason is defined within the language file, we will use the localized version, else just use the database entry...				if (isset($user->lang['report_reasons']['TITLE'][strtoupper($row['reason_title'])]) && isset($user->lang['report_reasons']['DESCRIPTION'][strtoupper($row['reason_title'])]))				{					$row['reson_description'] = $user->lang['report_reasons']['DESCRIPTION'][strtoupper($row['reason_title'])];					$row['reason_title'] = $user->lang['report_reasons']['TITLE'][strtoupper($row['reason_title'])];				}				$template->assign_block_vars('reports', array(					'REPORT_ID'		=> $row['report_id'],					'REASON_TITLE'	=> $row['reason_title'],					'REASON_DESC'	=> $row['reason_description'],					'REPORTER'		=> ($row['user_id'] != ANONYMOUS) ? $row['username'] : $user->lang['GUEST'],					'U_REPORTER'	=> ($row['user_id'] != ANONYMOUS) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=viewprofile&amp;u=' . $row['user_id']) : '',					'USER_NOTIFY'	=> ($row['user_notify']) ? true : false,					'REPORT_TIME'	=> $user->format_date($row['report_time']),					'REPORT_TEXT'	=> bbcode_nl2br(trim($row['report_text'])),				));			}			while ($row = $db->sql_fetchrow($result));		}		$db->sql_freeresult($result);	}	// Get IP	if ($auth->acl_get('m_info', $post_info['forum_id']))	{		$rdns_ip_num = request_var('rdns', '');		if ($rdns_ip_num != 'all')		{			$template->assign_vars(array(				'U_LOOKUP_ALL'	=> "$url&amp;i=main&amp;mode=post_details&amp;rdns=all")			);		}		// Get other users who've posted under this IP		$sql = 'SELECT poster_id, COUNT(poster_id) as postings			FROM ' . POSTS_TABLE . "			WHERE poster_ip = '" . $db->sql_escape($post_info['poster_ip']) . "'			GROUP BY poster_id			ORDER BY postings DESC";		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			// Fill the user select list with users who have posted under this IP			if ($row['poster_id'] != $post_info['poster_id'])			{				$users_ary[$row['poster_id']] = $row;			}		}		$db->sql_freeresult($result);		if (sizeof($users_ary))		{			// Get the usernames			$sql = 'SELECT user_id, username				FROM ' . USERS_TABLE . '				WHERE ' . $db->sql_in_set('user_id', array_keys($users_ary));			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$users_ary[$row['user_id']]['username'] = $row['username'];				$usernames_ary[utf8_clean_string($row['username'])] = $users_ary[$row['user_id']];			}			$db->sql_freeresult($result);			foreach ($users_ary as $user_id => $user_row)			{				$template->assign_block_vars('userrow', array(					'USERNAME'		=> ($user_id == ANONYMOUS) ? $user->lang['GUEST'] : $user_row['username'],					'NUM_POSTS'		=> $user_row['postings'],					'L_POST_S'		=> ($user_row['postings'] == 1) ? $user->lang['POST'] : $user->lang['POSTS'],					'U_PROFILE'		=> ($user_id == ANONYMOUS) ? '' : append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=viewprofile&amp;u=' . $user_id),					'U_SEARCHPOSTS' => append_sid("{$phpbb_root_path}search.$phpEx", 'author_id=' . $user_id . '&amp;sr=topics'))				);			}		}		// Get other IP's this user has posted under		// A compound index on poster_id, poster_ip (posts table) would help speed up this query a lot,		// but the extra size is only valuable if there are persons having more than a thousands posts.		// This is better left to the really really big forums.		$sql = 'SELECT poster_ip, COUNT(poster_ip) AS postings			FROM ' . POSTS_TABLE . '			WHERE poster_id = ' . $post_info['poster_id'] . "			GROUP BY poster_ip			ORDER BY postings DESC";		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$hostname = (($rdns_ip_num == $row['poster_ip'] || $rdns_ip_num == 'all') && $row['poster_ip']) ? @gethostbyaddr($row['poster_ip']) : '';			$template->assign_block_vars('iprow', array(				'IP'			=> $row['poster_ip'],				'HOSTNAME'		=> $hostname,				'NUM_POSTS'		=> $row['postings'],				'L_POST_S'		=> ($row['postings'] == 1) ? $user->lang['POST'] : $user->lang['POSTS'],				'U_LOOKUP_IP'	=> ($rdns_ip_num == $row['poster_ip'] || $rdns_ip_num == 'all') ? '' : "$url&amp;i=$id&amp;mode=post_details&amp;rdns={$row['poster_ip']}#ip",				'U_WHOIS'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=$id&amp;mode=$mode&amp;action=whois&amp;p=$post_id&amp;ip={$row['poster_ip']}"))			);		}		$db->sql_freeresult($result);		$user_select = '';		if (sizeof($usernames_ary))		{			ksort($usernames_ary);			foreach ($usernames_ary as $row)			{				$user_select .= '<option value="' . $row['poster_id'] . '">' . $row['username'] . "</option>\n";			}		}		$template->assign_var('S_USER_SELECT', $user_select);	}}/*** Change a post's poster*/function change_poster(&$post_info, $userdata){	global $auth, $db, $config, $phpbb_root_path, $phpEx;	if (empty($userdata) || $userdata['user_id'] == $post_info['user_id'])	{		return;	}	$post_id = $post_info['post_id'];	$sql = 'UPDATE ' . POSTS_TABLE . "		SET poster_id = {$userdata['user_id']}		WHERE post_id = $post_id";	$db->sql_query($sql);	// Resync topic/forum if needed	if ($post_info['topic_last_post_id'] == $post_id || $post_info['forum_last_post_id'] == $post_id || $post_info['topic_first_post_id'] == $post_id)	{		sync('topic', 'topic_id', $post_info['topic_id'], false, false);		sync('forum', 'forum_id', $post_info['forum_id'], false, false);	}	// Adjust post counts... only if the post is approved (else, it was not added the users post count anyway)	if ($post_info['post_postcount'] && $post_info['post_approved'])	{		$sql = 'UPDATE ' . USERS_TABLE . '			SET user_posts = user_posts - 1			WHERE user_id = ' . $post_info['user_id'] .'			AND user_posts > 0';		$db->sql_query($sql);		$sql = 'UPDATE ' . USERS_TABLE . '			SET user_posts = user_posts + 1			WHERE user_id = ' . $userdata['user_id'];		$db->sql_query($sql);	}	// Add posted to information for this topic for the new user	markread('post', $post_info['forum_id'], $post_info['topic_id'], time(), $userdata['user_id']);	// Remove the dotted topic option if the old user has no more posts within this topic	if ($config['load_db_track'] && $post_info['user_id'] != ANONYMOUS)	{		$sql = 'SELECT topic_id			FROM ' . POSTS_TABLE . '			WHERE topic_id = ' . $post_info['topic_id'] . '				AND poster_id = ' . $post_info['user_id'];		$result = $db->sql_query_limit($sql, 1);		$topic_id = (int) $db->sql_fetchfield('topic_id');		$db->sql_freeresult($result);		if (!$topic_id)		{			$sql = 'DELETE FROM ' . TOPICS_POSTED_TABLE . '				WHERE user_id = ' . $post_info['user_id'] . '					AND topic_id = ' . $post_info['topic_id'];			$db->sql_query($sql);		}	}	// change the poster_id within the attachments table, else the data becomes out of sync and errors displayed because of wrong ownership	if ($post_info['post_attachment'])	{		$sql = 'UPDATE ' . ATTACHMENTS_TABLE . '			SET poster_id = ' . $userdata['user_id'] . '			WHERE poster_id = ' . $post_info['user_id'] . '				AND post_msg_id = ' . $post_info['post_id'] . '				AND topic_id = ' . $post_info['topic_id'];		$db->sql_query($sql);	}	// refresh search cache of this post	$search_type = basename($config['search_type']);	if (file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx))	{		require("{$phpbb_root_path}includes/search/$search_type.$phpEx");		// We do some additional checks in the module to ensure it can actually be utilised		$error = false;		$search = new $search_type($error);		if (!$error && method_exists($search, 'destroy_cache'))		{			$search->destroy_cache(array(), array($post_info['user_id'], $userdata['user_id']));		}	}	$from_username = $post_info['username'];	$to_username = $userdata['username'];	// Renew post info	$post_info = get_post_data(array($post_id), false, true);	if (!sizeof($post_info))	{		trigger_error('POST_NOT_EXIST');	}	$post_info = $post_info[$post_id];	// Now add log entry	add_log('mod', $post_info['forum_id'], $post_info['topic_id'], 'LOG_MCP_CHANGE_POSTER', $post_info['topic_title'], $from_username, $to_username);}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** valid external constants:* PHPBB_MSG_HANDLER* PHPBB_DB_NEW_LINK* PHPBB_ROOT_PATH* PHPBB_ADMIN_PATH*/// phpBB Versiondefine('PHPBB_VERSION', '3.0.10');// QA-related// define('PHPBB_QA', 1);// User relateddefine('ANONYMOUS', 1);define('USER_ACTIVATION_NONE', 0);define('USER_ACTIVATION_SELF', 1);define('USER_ACTIVATION_ADMIN', 2);define('USER_ACTIVATION_DISABLE', 3);define('AVATAR_UPLOAD', 1);define('AVATAR_REMOTE', 2);define('AVATAR_GALLERY', 3);define('USER_NORMAL', 0);define('USER_INACTIVE', 1);define('USER_IGNORE', 2);define('USER_FOUNDER', 3);define('INACTIVE_REGISTER', 1);define('INACTIVE_PROFILE', 2);define('INACTIVE_MANUAL', 3);define('INACTIVE_REMIND', 4);// ACLdefine('ACL_NEVER', 0);define('ACL_YES', 1);define('ACL_NO', -1);// Login error codesdefine('LOGIN_CONTINUE', 1);define('LOGIN_BREAK', 2);define('LOGIN_SUCCESS', 3);define('LOGIN_SUCCESS_CREATE_PROFILE', 20);define('LOGIN_ERROR_USERNAME', 10);define('LOGIN_ERROR_PASSWORD', 11);define('LOGIN_ERROR_ACTIVE', 12);define('LOGIN_ERROR_ATTEMPTS', 13);define('LOGIN_ERROR_EXTERNAL_AUTH', 14);define('LOGIN_ERROR_PASSWORD_CONVERT', 15);// Maximum login attempts// The value is arbitrary, but it has to fit into the user_login_attempts field.define('LOGIN_ATTEMPTS_MAX', 100);// Group settingsdefine('GROUP_OPEN', 0);define('GROUP_CLOSED', 1);define('GROUP_HIDDEN', 2);define('GROUP_SPECIAL', 3);define('GROUP_FREE', 4);// Forum/Topic statesdefine('FORUM_CAT', 0);define('FORUM_POST', 1);define('FORUM_LINK', 2);define('ITEM_UNLOCKED', 0);define('ITEM_LOCKED', 1);define('ITEM_MOVED', 2);// Forum Flagsdefine('FORUM_FLAG_LINK_TRACK', 1);define('FORUM_FLAG_PRUNE_POLL', 2);define('FORUM_FLAG_PRUNE_ANNOUNCE', 4);define('FORUM_FLAG_PRUNE_STICKY', 8);define('FORUM_FLAG_ACTIVE_TOPICS', 16);define('FORUM_FLAG_POST_REVIEW', 32);define('FORUM_FLAG_QUICK_REPLY', 64);// Forum Options... sequential order. Modifications should begin at number 10 (number 29 is maximum)define('FORUM_OPTION_FEED_NEWS', 1);define('FORUM_OPTION_FEED_EXCLUDE', 2);// Optional text flagsdefine('OPTION_FLAG_BBCODE', 1);define('OPTION_FLAG_SMILIES', 2);define('OPTION_FLAG_LINKS', 4);// Topic typesdefine('POST_NORMAL', 0);define('POST_STICKY', 1);define('POST_ANNOUNCE', 2);define('POST_GLOBAL', 3);// Lastread typesdefine('TRACK_NORMAL', 0);define('TRACK_POSTED', 1);// Notify methodsdefine('NOTIFY_EMAIL', 0);define('NOTIFY_IM', 1);define('NOTIFY_BOTH', 2);// Notify statusdefine('NOTIFY_YES', 0);define('NOTIFY_NO', 1);// Email Priority Settingsdefine('MAIL_LOW_PRIORITY', 4);define('MAIL_NORMAL_PRIORITY', 3);define('MAIL_HIGH_PRIORITY', 2);// Log typesdefine('LOG_ADMIN', 0);define('LOG_MOD', 1);define('LOG_CRITICAL', 2);define('LOG_USERS', 3);// Private messaging - Do NOT change these valuesdefine('PRIVMSGS_HOLD_BOX', -4);define('PRIVMSGS_NO_BOX', -3);define('PRIVMSGS_OUTBOX', -2);define('PRIVMSGS_SENTBOX', -1);define('PRIVMSGS_INBOX', 0);// Full Folder Actionsdefine('FULL_FOLDER_NONE', -3);define('FULL_FOLDER_DELETE', -2);define('FULL_FOLDER_HOLD', -1);// Download Modes - Attachmentsdefine('INLINE_LINK', 1);// This mode is only used internally to allow modders extending the attachment functionalitydefine('PHYSICAL_LINK', 2);// Confirm typesdefine('CONFIRM_REG', 1);define('CONFIRM_LOGIN', 2);define('CONFIRM_POST', 3);// Categories - Attachmentsdefine('ATTACHMENT_CATEGORY_NONE', 0);define('ATTACHMENT_CATEGORY_IMAGE', 1); // Inline Imagesdefine('ATTACHMENT_CATEGORY_WM', 2); // Windows Media Files - Streamingdefine('ATTACHMENT_CATEGORY_RM', 3); // Real Media Files - Streamingdefine('ATTACHMENT_CATEGORY_THUMB', 4); // Not used within the database, only while displaying postsdefine('ATTACHMENT_CATEGORY_FLASH', 5); // Flash/SWF filesdefine('ATTACHMENT_CATEGORY_QUICKTIME', 6); // Quicktime/Mov files// BBCode UID lengthdefine('BBCODE_UID_LEN', 8);// Number of core BBCodesdefine('NUM_CORE_BBCODES', 12);// BBCode hard limitdefine('BBCODE_LIMIT', 1511);// Smiley hard limitdefine('SMILEY_LIMIT', 1000);// Magic url typesdefine('MAGIC_URL_EMAIL', 1);define('MAGIC_URL_FULL', 2);define('MAGIC_URL_LOCAL', 3);define('MAGIC_URL_WWW', 4);// Profile Field Typesdefine('FIELD_INT', 1);define('FIELD_STRING', 2);define('FIELD_TEXT', 3);define('FIELD_BOOL', 4);define('FIELD_DROPDOWN', 5);define('FIELD_DATE', 6);// referer validationdefine('REFERER_VALIDATE_NONE', 0);define('REFERER_VALIDATE_HOST', 1);define('REFERER_VALIDATE_PATH', 2);// phpbb_chmod() permissions@define('CHMOD_ALL', 7);@define('CHMOD_READ', 4);@define('CHMOD_WRITE', 2);@define('CHMOD_EXECUTE', 1);// Captcha code lengthdefine('CAPTCHA_MIN_CHARS', 4);define('CAPTCHA_MAX_CHARS', 7);// Additional constantsdefine('VOTE_CONVERTED', 127);// Table namesdefine('ACL_GROUPS_TABLE',			$table_prefix . 'acl_groups');define('ACL_OPTIONS_TABLE',			$table_prefix . 'acl_options');define('ACL_ROLES_DATA_TABLE',		$table_prefix . 'acl_roles_data');define('ACL_ROLES_TABLE',			$table_prefix . 'acl_roles');define('ACL_USERS_TABLE',			$table_prefix . 'acl_users');define('ATTACHMENTS_TABLE',			$table_prefix . 'attachments');define('BANLIST_TABLE',				$table_prefix . 'banlist');define('BBCODES_TABLE',				$table_prefix . 'bbcodes');define('BOOKMARKS_TABLE',			$table_prefix . 'bookmarks');define('BOTS_TABLE',				$table_prefix . 'bots');define('CONFIG_TABLE',				$table_prefix . 'config');define('CONFIRM_TABLE',				$table_prefix . 'confirm');define('DISALLOW_TABLE',			$table_prefix . 'disallow');define('DRAFTS_TABLE',				$table_prefix . 'drafts');define('EXTENSIONS_TABLE',			$table_prefix . 'extensions');define('EXTENSION_GROUPS_TABLE',	$table_prefix . 'extension_groups');define('FORUMS_TABLE',				$table_prefix . 'forums');define('FORUMS_ACCESS_TABLE',		$table_prefix . 'forums_access');define('FORUMS_TRACK_TABLE',		$table_prefix . 'forums_track');define('FORUMS_WATCH_TABLE',		$table_prefix . 'forums_watch');define('GROUPS_TABLE',				$table_prefix . 'groups');define('ICONS_TABLE',				$table_prefix . 'icons');define('LANG_TABLE',				$table_prefix . 'lang');define('LOG_TABLE',					$table_prefix . 'log');define('LOGIN_ATTEMPT_TABLE',		$table_prefix . 'login_attempts');define('MODERATOR_CACHE_TABLE',		$table_prefix . 'moderator_cache');define('MODULES_TABLE',				$table_prefix . 'modules');define('POLL_OPTIONS_TABLE',		$table_prefix . 'poll_options');define('POLL_VOTES_TABLE',			$table_prefix . 'poll_votes');define('POSTS_TABLE',				$table_prefix . 'posts');define('PRIVMSGS_TABLE',			$table_prefix . 'privmsgs');define('PRIVMSGS_FOLDER_TABLE',		$table_prefix . 'privmsgs_folder');define('PRIVMSGS_RULES_TABLE',		$table_prefix . 'privmsgs_rules');define('PRIVMSGS_TO_TABLE',			$table_prefix . 'privmsgs_to');define('PROFILE_FIELDS_TABLE',		$table_prefix . 'profile_fields');define('PROFILE_FIELDS_DATA_TABLE',	$table_prefix . 'profile_fields_data');define('PROFILE_FIELDS_LANG_TABLE',	$table_prefix . 'profile_fields_lang');define('PROFILE_LANG_TABLE',		$table_prefix . 'profile_lang');define('RANKS_TABLE',				$table_prefix . 'ranks');define('REPORTS_TABLE',				$table_prefix . 'reports');define('REPORTS_REASONS_TABLE',		$table_prefix . 'reports_reasons');define('SEARCH_RESULTS_TABLE',		$table_prefix . 'search_results');define('SEARCH_WORDLIST_TABLE',		$table_prefix . 'search_wordlist');define('SEARCH_WORDMATCH_TABLE',	$table_prefix . 'search_wordmatch');define('SESSIONS_TABLE',			$table_prefix . 'sessions');define('SESSIONS_KEYS_TABLE',		$table_prefix . 'sessions_keys');define('SITELIST_TABLE',			$table_prefix . 'sitelist');define('SMILIES_TABLE',				$table_prefix . 'smilies');define('STYLES_TABLE',				$table_prefix . 'styles');define('STYLES_TEMPLATE_TABLE',		$table_prefix . 'styles_template');define('STYLES_TEMPLATE_DATA_TABLE',$table_prefix . 'styles_template_data');define('STYLES_THEME_TABLE',		$table_prefix . 'styles_theme');define('STYLES_IMAGESET_TABLE',		$table_prefix . 'styles_imageset');define('STYLES_IMAGESET_DATA_TABLE',$table_prefix . 'styles_imageset_data');define('TOPICS_TABLE',				$table_prefix . 'topics');define('TOPICS_POSTED_TABLE',		$table_prefix . 'topics_posted');define('TOPICS_TRACK_TABLE',		$table_prefix . 'topics_track');define('TOPICS_WATCH_TABLE',		$table_prefix . 'topics_watch');define('USER_GROUP_TABLE',			$table_prefix . 'user_group');define('USERS_TABLE',				$table_prefix . 'users');define('WARNINGS_TABLE',			$table_prefix . 'warnings');define('WORDS_TABLE',				$table_prefix . 'words');define('ZEBRA_TABLE',				$table_prefix . 'zebra');// Additional tables?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_words_info{	function module()	{		return array(			'filename'	=> 'acp_words',			'title'		=> 'ACP_WORDS',			'version'	=> '1.0.0',			'modes'		=> array(				'words'		=> array('title' => 'ACP_WORDS', 'auth' => 'acl_a_words', 'cat' => array('ACP_MESSAGES')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acm* @version $Id$* @copyright (c) 2005, 2009 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}// Include the abstract baseif (!class_exists('acm_memory')){	require("{$phpbb_root_path}includes/acm/acm_memory.$phpEx");}/*** ACM for XCache* @package acm** To use this module you need ini_get() enabled and the following INI settings configured as follows:* - xcache.var_size > 0* - xcache.admin.enable_auth = off (or xcache.admin.user and xcache.admin.password set)**/class acm extends acm_memory{	var $extension = 'XCache';	function acm()	{		parent::acm_memory();		if (!function_exists('ini_get') || (int) ini_get('xcache.var_size') <= 0)		{			trigger_error('Increase xcache.var_size setting above 0 or enable ini_get() to use this ACM module.', E_USER_ERROR);		}	}	/**	* Purge cache data	*	* @return void	*/	function purge()	{		// Run before for XCache, if admin functions are disabled it will terminate execution		parent::purge();		// If the admin authentication is enabled but not set up, this will cause a nasty error.		// Not much we can do about it though.		$n = xcache_count(XC_TYPE_VAR);		for ($i = 0; $i < $n; $i++)		{			xcache_clear_cache(XC_TYPE_VAR, $i);		}	}	/**	* Fetch an item from the cache	*	* @access protected	* @param string $var Cache key	* @return mixed Cached data	*/	function _read($var)	{		$result = xcache_get($this->key_prefix . $var);		return ($result !== null) ? $result : false;	}	/**	* Store data in the cache	*	* @access protected	* @param string $var Cache key	* @param mixed $data Data to store	* @param int $ttl Time-to-live of cached data	* @return bool True if the operation succeeded	*/	function _write($var, $data, $ttl = 2592000)	{		return xcache_set($this->key_prefix . $var, $data, $ttl);	}	/**	* Remove an item from the cache	*	* @access protected	* @param string $var Cache key	* @return bool True if the operation succeeded	*/	function _delete($var)	{		return xcache_unset($this->key_prefix . $var);	}	/**	* Check if a cache var exists	*	* @access protected	* @param string $var Cache key	* @return bool True if it exists, otherwise false	*/		function _isset($var)	{		return xcache_isset($this->key_prefix . $var);	}}?>
<?php/**** acp_modules [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ACP_MODULE_MANAGEMENT_EXPLAIN'	=> 'Here you are able to manage all kind of modules. Please note that the ACP has a three-level menu structure (Category -> Category -> Module) whereby the others having a two-level menu structure (Category -> Module) which must be kept. Please also be aware that you may lock out yourself if you disable or delete the modules responsible for the module management itself.',	'ADD_MODULE'					=> 'Add module',	'ADD_MODULE_CONFIRM'			=> 'Are you sure you want to add the selected module with the selected mode?',	'ADD_MODULE_TITLE'				=> 'Add module',	'CANNOT_REMOVE_MODULE'	=> 'Unable to remove module, it has assigned children. Please remove or move all children before performing this action.',	'CATEGORY'				=> 'Category',	'CHOOSE_MODE'			=> 'Choose module mode',	'CHOOSE_MODE_EXPLAIN'	=> 'Choose the modules mode being used.',	'CHOOSE_MODULE'			=> 'Choose module',	'CHOOSE_MODULE_EXPLAIN'	=> 'Choose the file being called by this module.',	'CREATE_MODULE'			=> 'Create new module',	'DEACTIVATED_MODULE'	=> 'Deactivated module',	'DELETE_MODULE'			=> 'Delete module',	'DELETE_MODULE_CONFIRM'	=> 'Are you sure you want to remove this module?',	'EDIT_MODULE'			=> 'Edit module',	'EDIT_MODULE_EXPLAIN'	=> 'Here you are able to enter module specific settings.',	'HIDDEN_MODULE'			=> 'Hidden module',	'MODULE'					=> 'Module',	'MODULE_ADDED'				=> 'Module successfully added.',	'MODULE_DELETED'			=> 'Module successfully removed.',	'MODULE_DISPLAYED'			=> 'Module displayed',	'MODULE_DISPLAYED_EXPLAIN'	=> 'If you do not wish to display this module, but want to use it, set this to no.',	'MODULE_EDITED'				=> 'Module successfully edited.',	'MODULE_ENABLED'			=> 'Module enabled',	'MODULE_LANGNAME'			=> 'Module language name',	'MODULE_LANGNAME_EXPLAIN'	=> 'Enter the displayed module name. Use language constant if name is served from language file.',	'MODULE_TYPE'				=> 'Module type',	'NO_CATEGORY_TO_MODULE'	=> 'Unable to turn category into module. Please remove/move all children before performing this action.',	'NO_MODULE'				=> 'No module found.',	'NO_MODULE_ID'			=> 'No module id specified.',	'NO_MODULE_LANGNAME'	=> 'No module language name specified.',	'NO_PARENT'				=> 'No Parent',	'PARENT'				=> 'Parent',	'PARENT_NO_EXIST'		=> 'Parent does not exist.',	'SELECT_MODULE'			=> 'Select a module',));?>
<?php/**** @package install* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**/if (!defined('IN_PHPBB')){	exit;}/*** Helper functions for phpBB 2.0.x to phpBB 3.0.x conversion*//*** Set forum flags - only prune old polls by default*/function phpbb_forum_flags(){	// Set forum flags	$forum_flags = 0;	// FORUM_FLAG_LINK_TRACK	$forum_flags += 0;	// FORUM_FLAG_PRUNE_POLL	$forum_flags += FORUM_FLAG_PRUNE_POLL;	// FORUM_FLAG_PRUNE_ANNOUNCE	$forum_flags += 0;	// FORUM_FLAG_PRUNE_STICKY	$forum_flags += 0;	// FORUM_FLAG_ACTIVE_TOPICS	$forum_flags += 0;	// FORUM_FLAG_POST_REVIEW	$forum_flags += FORUM_FLAG_POST_REVIEW;	return $forum_flags;}/*** Insert/Convert forums*/function phpbb_insert_forums(){	global $db, $src_db, $same_db, $convert, $user, $config;	$db->sql_query($convert->truncate_statement . FORUMS_TABLE);	// Determine the highest id used within the old forums table (we add the categories after the forum ids)	$sql = 'SELECT MAX(forum_id) AS max_forum_id		FROM ' . $convert->src_table_prefix . 'forums';	$result = $src_db->sql_query($sql);	$max_forum_id = (int) $src_db->sql_fetchfield('max_forum_id');	$src_db->sql_freeresult($result);	$max_forum_id++;	// pruning disabled globally?	$sql = "SELECT config_value		FROM {$convert->src_table_prefix}config		WHERE config_name = 'prune_enable'";	$result = $src_db->sql_query($sql);	$prune_enabled = (int) $src_db->sql_fetchfield('config_value');	$src_db->sql_freeresult($result);	// Insert categories	$sql = 'SELECT cat_id, cat_title		FROM ' . $convert->src_table_prefix . 'categories		ORDER BY cat_order';	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'binary'");	}	$result = $src_db->sql_query($sql);	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'utf8'");	}	switch ($db->sql_layer)	{		case 'mssql':		case 'mssql_odbc':		case 'mssqlnative':			$db->sql_query('SET IDENTITY_INSERT ' . FORUMS_TABLE . ' ON');		break;	}	$cats_added = array();	while ($row = $src_db->sql_fetchrow($result))	{		$sql_ary = array(			'forum_id'		=> (int) $max_forum_id,			'forum_name'	=> ($row['cat_title']) ? htmlspecialchars(phpbb_set_default_encoding($row['cat_title']), ENT_COMPAT, 'UTF-8') : $user->lang['CATEGORY'],			'parent_id'		=> 0,			'forum_parents'	=> '',			'forum_desc'	=> '',			'forum_type'	=> FORUM_CAT,			'forum_status'	=> ITEM_UNLOCKED,			'forum_rules'	=> '',		);		$sql = 'SELECT MAX(right_id) AS right_id			FROM ' . FORUMS_TABLE;		$_result = $db->sql_query($sql);		$cat_row = $db->sql_fetchrow($_result);		$db->sql_freeresult($_result);		$sql_ary['left_id'] = (int) ($cat_row['right_id'] + 1);		$sql_ary['right_id'] = (int) ($cat_row['right_id'] + 2);		$sql = 'INSERT INTO ' . FORUMS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);		$db->sql_query($sql);		$cats_added[$row['cat_id']] = $max_forum_id;		$max_forum_id++;	}	$src_db->sql_freeresult($result);	// There may be installations having forums with non-existant category ids.	// We try to catch them and add them to an "unknown" category instead of leaving them out.	$sql = 'SELECT cat_id		FROM ' . $convert->src_table_prefix . 'forums		GROUP BY cat_id';	$result = $src_db->sql_query($sql);	$unknown_cat_id = false;	while ($row = $src_db->sql_fetchrow($result))	{		// Catch those categories not been added before		if (!isset($cats_added[$row['cat_id']]))		{			$unknown_cat_id = true;		}	}	$src_db->sql_freeresult($result);	// Is there at least one category not known?	if ($unknown_cat_id === true)	{		$unknown_cat_id = 'ghost';		$sql_ary = array(			'forum_id'		=> (int) $max_forum_id,			'forum_name'	=> (string) $user->lang['CATEGORY'],			'parent_id'		=> 0,			'forum_parents'	=> '',			'forum_desc'	=> '',			'forum_type'	=> FORUM_CAT,			'forum_status'	=> ITEM_UNLOCKED,			'forum_rules'	=> '',		);		$sql = 'SELECT MAX(right_id) AS right_id			FROM ' . FORUMS_TABLE;		$_result = $db->sql_query($sql);		$cat_row = $db->sql_fetchrow($_result);		$db->sql_freeresult($_result);		$sql_ary['left_id'] = (int) ($cat_row['right_id'] + 1);		$sql_ary['right_id'] = (int) ($cat_row['right_id'] + 2);		$sql = 'INSERT INTO ' . FORUMS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);		$db->sql_query($sql);		$cats_added[$unknown_cat_id] = $max_forum_id;		$max_forum_id++;	}	// Now insert the forums	$sql = 'SELECT f.forum_id, f.forum_name, f.cat_id, f.forum_desc, f.forum_status, f.prune_enable, f.prune_next, fp.prune_days, fp.prune_freq FROM ' . $convert->src_table_prefix . 'forums f		LEFT JOIN ' . $convert->src_table_prefix . 'forum_prune fp ON f.forum_id = fp.forum_id		GROUP BY f.forum_id, f.forum_name, f.cat_id, f.forum_desc, f.forum_status, f.prune_enable, f.prune_next, f.forum_order, fp.prune_days, fp.prune_freq		ORDER BY f.cat_id, f.forum_order';	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'binary'");	}	$result = $src_db->sql_query($sql);	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'utf8'");	}	while ($row = $src_db->sql_fetchrow($result))	{		// Some might have forums here with an id not being "possible"...		// To be somewhat friendly we "change" the category id for those to a previously created ghost category		if (!isset($cats_added[$row['cat_id']]) && $unknown_cat_id !== false)		{			$row['cat_id'] = $unknown_cat_id;		}		if (!isset($cats_added[$row['cat_id']]))		{			continue;		}		// Define the new forums sql ary		$sql_ary = array(			'forum_id'			=> (int) $row['forum_id'],			'forum_name'		=> htmlspecialchars(phpbb_set_default_encoding($row['forum_name']), ENT_COMPAT, 'UTF-8'),			'parent_id'			=> (int) $cats_added[$row['cat_id']],			'forum_parents'		=> '',			'forum_desc'		=> htmlspecialchars(phpbb_set_default_encoding($row['forum_desc']), ENT_COMPAT, 'UTF-8'),			'forum_type'		=> FORUM_POST,			'forum_status'		=> is_item_locked($row['forum_status']),			'enable_prune'		=> ($prune_enabled) ? (int)$row['prune_enable'] : 0,			'prune_next'		=> (int) null_to_zero($row['prune_next']),			'prune_days'		=> (int) null_to_zero($row['prune_days']),			'prune_viewed'		=> 0,			'prune_freq'		=> (int) null_to_zero($row['prune_freq']),			'forum_flags'		=> phpbb_forum_flags(),			'forum_options'		=> 0,			// Default values			'forum_desc_bitfield'		=> '',			'forum_desc_options'		=> 7,			'forum_desc_uid'			=> '',			'forum_link'				=> '',			'forum_password'			=> '',			'forum_style'				=> 0,			'forum_image'				=> '',			'forum_rules'				=> '',			'forum_rules_link'			=> '',			'forum_rules_bitfield'		=> '',			'forum_rules_options'		=> 7,			'forum_rules_uid'			=> '',			'forum_topics_per_page'		=> 0,			'forum_posts'				=> 0,			'forum_topics'				=> 0,			'forum_topics_real'			=> 0,			'forum_last_post_id'		=> 0,			'forum_last_poster_id'		=> 0,			'forum_last_post_subject'	=> '',			'forum_last_post_time'		=> 0,			'forum_last_poster_name'	=> '',			'forum_last_poster_colour'	=> '',			'display_on_index'			=> 1,			'enable_indexing'			=> 1,			'enable_icons'				=> 0,		);		// Now add the forums with proper left/right ids		$sql = 'SELECT left_id, right_id			FROM ' . FORUMS_TABLE . '			WHERE forum_id = ' . $cats_added[$row['cat_id']];		$_result = $db->sql_query($sql);		$cat_row = $db->sql_fetchrow($_result);		$db->sql_freeresult($_result);		$sql = 'UPDATE ' . FORUMS_TABLE . '			SET left_id = left_id + 2, right_id = right_id + 2			WHERE left_id > ' . $cat_row['right_id'];		$db->sql_query($sql);		$sql = 'UPDATE ' . FORUMS_TABLE . '			SET right_id = right_id + 2			WHERE ' . $cat_row['left_id'] . ' BETWEEN left_id AND right_id';		$db->sql_query($sql);		$sql_ary['left_id'] = (int) $cat_row['right_id'];		$sql_ary['right_id'] = (int) ($cat_row['right_id'] + 1);		$sql = 'INSERT INTO ' . FORUMS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);		$db->sql_query($sql);	}	$src_db->sql_freeresult($result);	switch ($db->sql_layer)	{		case 'postgres':			$db->sql_query("SELECT SETVAL('" . FORUMS_TABLE . "_seq',(select case when max(forum_id)>0 then max(forum_id)+1 else 1 end from " . FORUMS_TABLE . '));');		break;		case 'mssql':		case 'mssql_odbc':		case 'mssqlnative':			$db->sql_query('SET IDENTITY_INSERT ' . FORUMS_TABLE . ' OFF');		break;		case 'oracle':			$result = $db->sql_query('SELECT MAX(forum_id) as max_id FROM ' . FORUMS_TABLE);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			$largest_id = (int) $row['max_id'];			if ($largest_id)			{				$db->sql_query('DROP SEQUENCE ' . FORUMS_TABLE . '_seq');				$db->sql_query('CREATE SEQUENCE ' . FORUMS_TABLE . '_seq START WITH ' . ($largest_id + 1));			}		break;	}}/*** Function for recoding text with the default language** @param string $text text to recode to utf8* @param bool $grab_user_lang if set to true the function tries to use $convert_row['user_lang'] (and falls back to $convert_row['poster_id']) instead of the boards default language*/function phpbb_set_encoding($text, $grab_user_lang = true){	global $lang_enc_array, $convert_row;	global $convert, $phpEx;	/*static $lang_enc_array = array(		'korean'						=> 'euc-kr',		'serbian'						=> 'windows-1250',		'polish'						=> 'iso-8859-2',		'kurdish'						=> 'windows-1254',		'slovak'						=> 'Windows-1250',		'russian'						=> 'windows-1251',		'estonian'						=> 'iso-8859-4',		'chinese_simplified'			=> 'gb2312',		'macedonian'					=> 'windows-1251',		'azerbaijani'					=> 'UTF-8',		'romanian'						=> 'iso-8859-2',		'romanian_diacritice'			=> 'iso-8859-2',		'lithuanian'					=> 'windows-1257',		'turkish'						=> 'iso-8859-9',		'ukrainian'						=> 'windows-1251',		'japanese'						=> 'shift_jis',		'hungarian'						=> 'ISO-8859-2',		'romanian_no_diacritics'		=> 'iso-8859-2',		'mongolian'						=> 'UTF-8',		'slovenian'						=> 'windows-1250',		'bosnian'						=> 'windows-1250',		'czech'							=> 'Windows-1250',		'farsi'							=> 'Windows-1256',		'croatian'						=> 'windows-1250',		'greek'							=> 'iso-8859-7',		'russian_tu'					=> 'windows-1251',		'sakha'							=> 'UTF-8',		'serbian_cyrillic'				=> 'windows-1251',		'bulgarian'						=> 'windows-1251',		'chinese_traditional_taiwan'	=> 'big5',		'chinese_traditional'			=> 'big5',		'arabic'						=> 'windows-1256',		'hebrew'						=> 'WINDOWS-1255',		'thai'							=> 'windows-874',		//'chinese_traditional_taiwan'	=> 'utf-8' // custom modified, we may have to do an include :-(	);*/	if (empty($lang_enc_array))	{		$lang_enc_array = array();	}	$get_lang = trim(get_config_value('default_lang'));	// Do we need the users language encoding?	if ($grab_user_lang && !empty($convert_row))	{		if (!empty($convert_row['user_lang']))		{			$get_lang = trim($convert_row['user_lang']);		}		else if (!empty($convert_row['poster_id']))		{			global $src_db, $same_db;			if ($convert->mysql_convert && $same_db)			{				$src_db->sql_query("SET NAMES 'binary'");			}			$sql = 'SELECT user_lang				FROM ' . $convert->src_table_prefix . 'users				WHERE user_id = ' . (int) $convert_row['poster_id'];			$result = $src_db->sql_query($sql);			$get_lang = (string) $src_db->sql_fetchfield('user_lang');			$src_db->sql_freeresult($result);			if ($convert->mysql_convert && $same_db)			{				$src_db->sql_query("SET NAMES 'utf8'");			}			$get_lang = (!trim($get_lang)) ? trim(get_config_value('default_lang')) : trim($get_lang);		}	}	if (!isset($lang_enc_array[$get_lang]))	{		$filename = $convert->options['forum_path'] . '/language/lang_' . $get_lang . '/lang_main.' . $phpEx;		if (!file_exists($filename))		{			$get_lang = trim(get_config_value('default_lang'));		}		if (!isset($lang_enc_array[$get_lang]))		{			include($convert->options['forum_path'] . '/language/lang_' . $get_lang . '/lang_main.' . $phpEx);			$lang_enc_array[$get_lang] = $lang['ENCODING'];			unset($lang);		}	}	$encoding = $lang_enc_array[$get_lang];	return utf8_recode($text, $lang_enc_array[$get_lang]);}/*** Same as phpbb_set_encoding, but forcing boards default language*/function phpbb_set_default_encoding($text){	return phpbb_set_encoding($text, false);}/*** Convert Birthday from Birthday MOD to phpBB Format*/function phpbb_get_birthday($birthday = ''){	if (defined('MOD_BIRTHDAY_TERRA'))	{		$birthday = (string) $birthday;		// stored as month, day, year		if (!$birthday)		{			return ' 0- 0-   0';		}		// We use the original mod code to retrieve the birthday (not ideal)		preg_match('/(..)(..)(....)/', sprintf('%08d', $birthday), $birthday_parts);		$month = $birthday_parts[1];		$day = $birthday_parts[2];		$year =  $birthday_parts[3];		return sprintf('%2d-%2d-%4d', $day, $month, $year);	}	else	{		$birthday = (int) $birthday;		if (!$birthday || $birthday == 999999 || ((version_compare(PHP_VERSION, '5.1.0') < 0) && $birthday < 0))		{			return ' 0- 0-   0';		}		// The birthday mod from niels is using this code to transform to day/month/year		return sprintf('%2d-%2d-%4d', gmdate('j', $birthday * 86400 + 1), gmdate('n', $birthday * 86400 + 1), gmdate('Y', $birthday * 86400 + 1));	}}/*** Return correct user id value* Everyone's id will be one higher to allow the guest/anonymous user to have a positive id as well*/function phpbb_user_id($user_id){	global $config;	// Increment user id if the old forum is having a user with the id 1	if (!isset($config['increment_user_id']))	{		global $src_db, $same_db, $convert;		if ($convert->mysql_convert && $same_db)		{			$src_db->sql_query("SET NAMES 'binary'");		}		// Now let us set a temporary config variable for user id incrementing		$sql = "SELECT user_id			FROM {$convert->src_table_prefix}users			WHERE user_id = 1";		$result = $src_db->sql_query($sql);		$id = (int) $src_db->sql_fetchfield('user_id');		$src_db->sql_freeresult($result);		// Try to get the maximum user id possible...		$sql = "SELECT MAX(user_id) AS max_user_id			FROM {$convert->src_table_prefix}users";		$result = $src_db->sql_query($sql);		$max_id = (int) $src_db->sql_fetchfield('max_user_id');		$src_db->sql_freeresult($result);		if ($convert->mysql_convert && $same_db)		{			$src_db->sql_query("SET NAMES 'utf8'");		}		// If there is a user id 1, we need to increment user ids. :/		if ($id === 1)		{			set_config('increment_user_id', ($max_id + 1), true);			$config['increment_user_id'] = $max_id + 1;		}		else		{			set_config('increment_user_id', 0, true);			$config['increment_user_id'] = 0;		}	}	// If the old user id is -1 in 2.0.x it is the anonymous user...	if ($user_id == -1)	{		return ANONYMOUS;	}	if (!empty($config['increment_user_id']) && $user_id == 1)	{		return $config['increment_user_id'];	}	// A user id of 0 can happen, for example within the ban table if no user is banned...	// Within the posts and topics table this can be "dangerous" but is the fault of the user	// having mods installed (a poster id of 0 is not possible in 2.0.x).	// Therefore, we return the user id "as is".	return (int) $user_id;}/* Copy additional table fields from old forum to new forum if user wants this (for Mod compatibility for example)function phpbb_copy_table_fields(){}*//*** Convert authentication* user, group and forum table has to be filled in order to work*/function phpbb_convert_authentication($mode){	global $db, $src_db, $same_db, $convert, $user, $config, $cache;	if ($mode == 'start')	{		$db->sql_query($convert->truncate_statement . ACL_USERS_TABLE);		$db->sql_query($convert->truncate_statement . ACL_GROUPS_TABLE);		// What we will do is handling all 2.0.x admins as founder to replicate what is common in 2.0.x.		// After conversion the main admin need to make sure he is removing permissions and the founder status if wanted.		// Grab user ids of users with user_level of ADMIN		$sql = "SELECT user_id			FROM {$convert->src_table_prefix}users			WHERE user_level = 1			ORDER BY user_regdate ASC";		$result = $src_db->sql_query($sql);		while ($row = $src_db->sql_fetchrow($result))		{			$user_id = (int) phpbb_user_id($row['user_id']);			// Set founder admin...			$sql = 'UPDATE ' . USERS_TABLE . '				SET user_type = ' . USER_FOUNDER . "				WHERE user_id = $user_id";			$db->sql_query($sql);		}		$src_db->sql_freeresult($result);		$sql = 'SELECT group_id			FROM ' . GROUPS_TABLE . "			WHERE group_name = '" . $db->sql_escape('BOTS') . "'";		$result = $db->sql_query($sql);		$bot_group_id = (int) $db->sql_fetchfield('group_id');		$db->sql_freeresult($result);	}	// Grab forum auth information	$sql = "SELECT *		FROM {$convert->src_table_prefix}forums";	$result = $src_db->sql_query($sql);	$forum_access = array();	while ($row = $src_db->sql_fetchrow($result))	{		$forum_access[$row['forum_id']] = $row;	}	$src_db->sql_freeresult($result);	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'binary'");	}	// Grab user auth information from 2.0.x board	$sql = "SELECT ug.user_id, aa.*		FROM {$convert->src_table_prefix}auth_access aa, {$convert->src_table_prefix}user_group ug, {$convert->src_table_prefix}groups g, {$convert->src_table_prefix}forums f		WHERE g.group_id = aa.group_id			AND g.group_single_user = 1			AND ug.group_id = g.group_id			AND f.forum_id = aa.forum_id";	$result = $src_db->sql_query($sql);	$user_access = array();	while ($row = $src_db->sql_fetchrow($result))	{		$user_access[$row['forum_id']][] = $row;	}	$src_db->sql_freeresult($result);	// Grab group auth information	$sql = "SELECT g.group_id, aa.*		FROM {$convert->src_table_prefix}auth_access aa, {$convert->src_table_prefix}groups g		WHERE g.group_id = aa.group_id			AND g.group_single_user <> 1";	$result = $src_db->sql_query($sql);	$group_access = array();	while ($row = $src_db->sql_fetchrow($result))	{		$group_access[$row['forum_id']][] = $row;	}	$src_db->sql_freeresult($result);	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'utf8'");	}	// Add Forum Access List	$auth_map = array(		'auth_view'			=> array('f_', 'f_list'),		'auth_read'			=> array('f_read', 'f_search'),		'auth_post'			=> array('f_post', 'f_bbcode', 'f_smilies', 'f_img', 'f_sigs', 'f_postcount', 'f_report', 'f_subscribe', 'f_print', 'f_email'),		'auth_reply'		=> 'f_reply',		'auth_edit'			=> 'f_edit',		'auth_delete'		=> 'f_delete',		'auth_pollcreate'	=> 'f_poll',		'auth_vote'			=> 'f_vote',		'auth_announce'		=> 'f_announce',		'auth_sticky'		=> 'f_sticky',		'auth_attachments'	=> array('f_attach', 'f_download'),		'auth_download'		=> 'f_download',	);	// Define the ACL constants used in 2.0 to make the code slightly more readable	define('AUTH_ALL', 0);	define('AUTH_REG', 1);	define('AUTH_ACL', 2);	define('AUTH_MOD', 3);	define('AUTH_ADMIN', 5);	// A mapping of the simple permissions used by 2.0	$simple_auth_ary = array(		'public'			=> array(			'auth_view'			=> AUTH_ALL,			'auth_read'			=> AUTH_ALL,			'auth_post'			=> AUTH_ALL,			'auth_reply'		=> AUTH_ALL,			'auth_edit'			=> AUTH_REG,			'auth_delete'		=> AUTH_REG,			'auth_sticky'		=> AUTH_MOD,			'auth_announce'		=> AUTH_MOD,			'auth_vote'			=> AUTH_REG,			'auth_pollcreate'	=> AUTH_REG,		),		'registered'		=> array(			'auth_view'			=> AUTH_ALL,			'auth_read'			=> AUTH_ALL,			'auth_post'			=> AUTH_REG,			'auth_reply'		=> AUTH_REG,			'auth_edit'			=> AUTH_REG,			'auth_delete'		=> AUTH_REG,			'auth_sticky'		=> AUTH_MOD,			'auth_announce'		=> AUTH_MOD,			'auth_vote'			=> AUTH_REG,			'auth_pollcreate'	=> AUTH_REG,		),		'registered_hidden'	=> array(			'auth_view'			=> AUTH_REG,			'auth_read'			=> AUTH_REG,			'auth_post'			=> AUTH_REG,			'auth_reply'		=> AUTH_REG,			'auth_edit'			=> AUTH_REG,			'auth_delete'		=> AUTH_REG,			'auth_sticky'		=> AUTH_MOD,			'auth_announce'		=> AUTH_MOD,			'auth_vote'			=> AUTH_REG,			'auth_pollcreate'	=> AUTH_REG,		),		'private'			=> array(			'auth_view'			=> AUTH_ALL,			'auth_read'			=> AUTH_ACL,			'auth_post'			=> AUTH_ACL,			'auth_reply'		=> AUTH_ACL,			'auth_edit'			=> AUTH_ACL,			'auth_delete'		=> AUTH_ACL,			'auth_sticky'		=> AUTH_ACL,			'auth_announce'		=> AUTH_MOD,			'auth_vote'			=> AUTH_ACL,			'auth_pollcreate'	=> AUTH_ACL,		),		'private_hidden'	=> array(			'auth_view'			=> AUTH_ACL,			'auth_read'			=> AUTH_ACL,			'auth_post'			=> AUTH_ACL,			'auth_reply'		=> AUTH_ACL,			'auth_edit'			=> AUTH_ACL,			'auth_delete'		=> AUTH_ACL,			'auth_sticky'		=> AUTH_ACL,			'auth_announce'		=> AUTH_MOD,			'auth_vote'			=> AUTH_ACL,			'auth_pollcreate'	=> AUTH_ACL,		),		'moderator'			=> array(			'auth_view'			=> AUTH_ALL,			'auth_read'			=> AUTH_MOD,			'auth_post'			=> AUTH_MOD,			'auth_reply'		=> AUTH_MOD,			'auth_edit'			=> AUTH_MOD,			'auth_delete'		=> AUTH_MOD,			'auth_sticky'		=> AUTH_MOD,			'auth_announce'		=> AUTH_MOD,			'auth_vote'			=> AUTH_MOD,			'auth_pollcreate'	=> AUTH_MOD,		),		'moderator_hidden'	=> array(			'auth_view'			=> AUTH_MOD,			'auth_read'			=> AUTH_MOD,			'auth_post'			=> AUTH_MOD,			'auth_reply'		=> AUTH_MOD,			'auth_edit'			=> AUTH_MOD,			'auth_delete'		=> AUTH_MOD,			'auth_sticky'		=> AUTH_MOD,			'auth_announce'		=> AUTH_MOD,			'auth_vote'			=> AUTH_MOD,			'auth_pollcreate'	=> AUTH_MOD,		),	);	if ($mode == 'start')	{		user_group_auth('guests', 'SELECT user_id, {GUESTS} FROM ' . USERS_TABLE . ' WHERE user_id = ' . ANONYMOUS, false);		user_group_auth('registered', 'SELECT user_id, {REGISTERED} FROM ' . USERS_TABLE . ' WHERE user_id <> ' . ANONYMOUS . " AND group_id <> $bot_group_id", false);		// Selecting from old table		if (!empty($config['increment_user_id']))		{			$auth_sql = 'SELECT user_id, {ADMINISTRATORS} FROM ' . $convert->src_table_prefix . 'users WHERE user_level = 1 AND user_id <> 1';			user_group_auth('administrators', $auth_sql, true);			$auth_sql = 'SELECT ' . $config['increment_user_id'] . ' as user_id, {ADMINISTRATORS} FROM ' . $convert->src_table_prefix . 'users WHERE user_level = 1 AND user_id = 1';			user_group_auth('administrators', $auth_sql, true);		}		else		{			$auth_sql = 'SELECT user_id, {ADMINISTRATORS} FROM ' . $convert->src_table_prefix . 'users WHERE user_level = 1';			user_group_auth('administrators', $auth_sql, true);		}		if (!empty($config['increment_user_id']))		{			$auth_sql = 'SELECT user_id, {GLOBAL_MODERATORS} FROM ' . $convert->src_table_prefix . 'users WHERE user_level = 1 AND user_id <> 1';			user_group_auth('global_moderators', $auth_sql, true);			$auth_sql = 'SELECT ' . $config['increment_user_id'] . ' as user_id, {GLOBAL_MODERATORS} FROM ' . $convert->src_table_prefix . 'users WHERE user_level = 1 AND user_id = 1';			user_group_auth('global_moderators', $auth_sql, true);		}		else		{			$auth_sql = 'SELECT user_id, {GLOBAL_MODERATORS} FROM ' . $convert->src_table_prefix . 'users WHERE user_level = 1';			user_group_auth('global_moderators', $auth_sql, true);		}	}	else if ($mode == 'first')	{		// Go through all 2.0.x forums		foreach ($forum_access as $forum)		{			$new_forum_id = (int) $forum['forum_id'];			// Administrators have full access to all forums whatever happens			mass_auth('group_role', $new_forum_id, 'administrators', 'FORUM_FULL');			$matched_type = '';			foreach ($simple_auth_ary as $key => $auth_levels)			{				$matched = 1;				foreach ($auth_levels as $k => $level)				{					if ($forum[$k] != $auth_levels[$k])					{						$matched = 0;					}				}				if ($matched)				{					$matched_type = $key;					break;				}			}			switch ($matched_type)			{				case 'public':					mass_auth('group_role', $new_forum_id, 'guests', 'FORUM_LIMITED');					mass_auth('group_role', $new_forum_id, 'registered', 'FORUM_LIMITED_POLLS');					mass_auth('group_role', $new_forum_id, 'bots', 'FORUM_BOT');				break;				case 'registered':					mass_auth('group_role', $new_forum_id, 'guests', 'FORUM_READONLY');					mass_auth('group_role', $new_forum_id, 'bots', 'FORUM_BOT');				// no break;				case 'registered_hidden':					mass_auth('group_role', $new_forum_id, 'registered', 'FORUM_POLLS');				break;				case 'private':				case 'private_hidden':				case 'moderator':				case 'moderator_hidden':				default:					// The permissions don't match a simple set, so we're going to have to map them directly					// No post approval for all, in 2.0.x this feature does not exist					mass_auth('group', $new_forum_id, 'guests', 'f_noapprove', ACL_YES);					mass_auth('group', $new_forum_id, 'registered', 'f_noapprove', ACL_YES);					// Go through authentication map					foreach ($auth_map as $old_auth_key => $new_acl)					{						// If old authentication key does not exist we continue						// This is helpful for mods adding additional authentication fields, we need to add them to the auth_map array						if (!isset($forum[$old_auth_key]))						{							continue;						}						// Now set the new ACL correctly						switch ($forum[$old_auth_key])						{							// AUTH_ALL							case AUTH_ALL:								mass_auth('group', $new_forum_id, 'guests', $new_acl, ACL_YES);								mass_auth('group', $new_forum_id, 'bots', $new_acl, ACL_YES);								mass_auth('group', $new_forum_id, 'registered', $new_acl, ACL_YES);							break;							// AUTH_REG							case AUTH_REG:								mass_auth('group', $new_forum_id, 'registered', $new_acl, ACL_YES);							break;							// AUTH_ACL							case AUTH_ACL:								// Go through the old group access list for this forum								if (isset($group_access[$forum['forum_id']]))								{									foreach ($group_access[$forum['forum_id']] as $index => $access)									{										// We only check for ACL_YES equivalence entry										if (isset($access[$old_auth_key]) && $access[$old_auth_key] == 1)										{											mass_auth('group', $new_forum_id, (int) $access['group_id'], $new_acl, ACL_YES);										}									}								}								if (isset($user_access[$forum['forum_id']]))								{									foreach ($user_access[$forum['forum_id']] as $index => $access)									{										// We only check for ACL_YES equivalence entry										if (isset($access[$old_auth_key]) && $access[$old_auth_key] == 1)										{											mass_auth('user', $new_forum_id, (int) phpbb_user_id($access['user_id']), $new_acl, ACL_YES);										}									}								}							break;							// AUTH_MOD							case AUTH_MOD:								if (isset($group_access[$forum['forum_id']]))								{									foreach ($group_access[$forum['forum_id']] as $index => $access)									{										// We only check for ACL_YES equivalence entry										if (isset($access[$old_auth_key]) && $access[$old_auth_key] == 1)										{											mass_auth('group', $new_forum_id, (int) $access['group_id'], $new_acl, ACL_YES);										}									}								}								if (isset($user_access[$forum['forum_id']]))								{									foreach ($user_access[$forum['forum_id']] as $index => $access)									{										// We only check for ACL_YES equivalence entry										if (isset($access[$old_auth_key]) && $access[$old_auth_key] == 1)										{											mass_auth('user', $new_forum_id, (int) phpbb_user_id($access['user_id']), $new_acl, ACL_YES);										}									}								}							break;						}					}				break;			}		}	}	else if ($mode == 'second')	{		// Assign permission roles and other default permissions		// guests having u_download and u_search ability		$db->sql_query('INSERT INTO ' . ACL_GROUPS_TABLE . ' (group_id, forum_id, auth_option_id, auth_role_id, auth_setting) SELECT ' . get_group_id('guests') . ', 0, auth_option_id, 0, 1 FROM ' . ACL_OPTIONS_TABLE . " WHERE auth_option IN ('u_', 'u_download', 'u_search')");		// administrators/global mods having full user features		mass_auth('group_role', 0, 'administrators', 'USER_FULL');		mass_auth('group_role', 0, 'global_moderators', 'USER_FULL');		// By default all converted administrators are given full access		mass_auth('group_role', 0, 'administrators', 'ADMIN_FULL');		// All registered users are assigned the standard user role		mass_auth('group_role', 0, 'registered', 'USER_STANDARD');		mass_auth('group_role', 0, 'registered_coppa', 'USER_STANDARD');		// Instead of administrators being global moderators we give the MOD_FULL role to global mods (admins already assigned to this group)		mass_auth('group_role', 0, 'global_moderators', 'MOD_FULL');		// And now those who have had their avatar rights removed get assigned a more restrictive role		$sql = 'SELECT user_id FROM ' . $convert->src_table_prefix . 'users			WHERE user_allowavatar = 0				AND user_id > 0';		$result = $src_db->sql_query($sql);		while ($row = $src_db->sql_fetchrow($result))		{			mass_auth('user_role', 0, (int) phpbb_user_id($row['user_id']), 'USER_NOAVATAR');		}		$src_db->sql_freeresult($result);		// And the same for those who have had their PM rights removed		$sql = 'SELECT user_id FROM ' . $convert->src_table_prefix . 'users			WHERE user_allow_pm = 0				AND user_id > 0';		$result = $src_db->sql_query($sql);		while ($row = $src_db->sql_fetchrow($result))		{			mass_auth('user_role', 0, (int) phpbb_user_id($row['user_id']), 'USER_NOPM');		}		$src_db->sql_freeresult($result);	}	else if ($mode == 'third')	{		// And now the moderators		// We make sure that they have at least standard access to the forums they moderate in addition to the moderating permissions		$mod_post_map = array(			'auth_announce'		=> 'f_announce',			'auth_sticky'		=> 'f_sticky'		);		foreach ($user_access as $forum_id => $access_map)		{			$forum_id = (int) $forum_id;			foreach ($access_map as $access)			{				if (isset($access['auth_mod']) && $access['auth_mod'] == 1)				{					mass_auth('user_role', $forum_id, (int) phpbb_user_id($access['user_id']), 'MOD_STANDARD');					mass_auth('user_role', $forum_id, (int) phpbb_user_id($access['user_id']), 'FORUM_STANDARD');					foreach ($mod_post_map as $old => $new)					{						if (isset($forum_access[$forum_id]) && isset($forum_access[$forum_id][$old]) && $forum_access[$forum_id][$old] == AUTH_MOD)						{							mass_auth('user', $forum_id, (int) phpbb_user_id($access['user_id']), $new, ACL_YES);						}					}				}			}		}		foreach ($group_access as $forum_id => $access_map)		{			$forum_id = (int) $forum_id;			foreach ($access_map as $access)			{				if (isset($access['auth_mod']) && $access['auth_mod'] == 1)				{					mass_auth('group_role', $forum_id, (int) $access['group_id'], 'MOD_STANDARD');					mass_auth('group_role', $forum_id, (int) $access['group_id'], 'FORUM_STANDARD');					foreach ($mod_post_map as $old => $new)					{						if (isset($forum_access[$forum_id]) && isset($forum_access[$forum_id][$old]) && $forum_access[$forum_id][$old] == AUTH_MOD)						{							mass_auth('group', $forum_id, (int) $access['group_id'], $new, ACL_YES);						}					}				}			}		}		// We grant everyone readonly access to the categories to ensure that the forums are visible		$sql = 'SELECT forum_id, forum_name, parent_id, left_id, right_id			FROM ' . FORUMS_TABLE . '			ORDER BY left_id ASC';		$result = $db->sql_query($sql);		$parent_forums = $forums = array();		while ($row = $db->sql_fetchrow($result))		{			if ($row['parent_id'] == 0)			{				mass_auth('group_role', $row['forum_id'], 'administrators', 'FORUM_FULL');				mass_auth('group_role', $row['forum_id'], 'global_moderators', 'FORUM_FULL');				$parent_forums[] = $row;			}			else			{				$forums[] = $row;			}		}		$db->sql_freeresult($result);		global $auth;		// Let us see which groups have access to these forums...		foreach ($parent_forums as $row)		{			// Get the children			$branch = $forum_ids = array();			foreach ($forums as $key => $_row)			{				if ($_row['left_id'] > $row['left_id'] && $_row['left_id'] < $row['right_id'])				{					$branch[] = $_row;					$forum_ids[] = $_row['forum_id'];					continue;				}			}			if (sizeof($forum_ids))			{				// Now make sure the user is able to read these forums				$hold_ary = $auth->acl_group_raw_data(false, 'f_list', $forum_ids);				if (empty($hold_ary))				{					continue;				}				foreach ($hold_ary as $g_id => $f_id_ary)				{					$set_group = false;					foreach ($f_id_ary as $f_id => $auth_ary)					{						foreach ($auth_ary as $auth_option => $setting)						{							if ($setting == ACL_YES)							{								$set_group = true;								break 2;							}						}					}					if ($set_group)					{						mass_auth('group', $row['forum_id'], $g_id, 'f_list', ACL_YES);					}				}			}		}	}}/*** Set primary group.* Really simple and only based on user_level (remaining groups will be assigned later)*/function phpbb_set_primary_group($user_level){	global $convert_row;	if ($user_level == 1)	{		return get_group_id('administrators');	}/*	else if ($user_level == 2)	{		return get_group_id('global_moderators');	}	else if ($user_level == 0 && $convert_row['user_active'])*/	else if ($convert_row['user_active'])	{		return get_group_id('registered');	}	return 0;}/*** Convert the group name, making sure to avoid conflicts with 3.0 special groups*/function phpbb_convert_group_name($group_name){	$default_groups = array(		'GUESTS',		'REGISTERED',		'REGISTERED_COPPA',		'GLOBAL_MODERATORS',		'ADMINISTRATORS',		'BOTS',	);	if (in_array(strtoupper($group_name), $default_groups))	{		return 'phpBB2 - ' . $group_name;	}	return phpbb_set_default_encoding($group_name);}/*** Convert the group type constants*/function phpbb_convert_group_type($group_type){	switch ($group_type)	{		case 0:			return GROUP_OPEN;		break;		case 1:			return GROUP_CLOSED;		break;		case 2:			return GROUP_HIDDEN;		break;	}	// Never return GROUP_SPECIAL here, because only phpBB3's default groups are allowed to have this type set.	return GROUP_HIDDEN;}/*** Convert the topic type constants*/function phpbb_convert_topic_type($topic_type){	switch ($topic_type)	{		case 0:			return POST_NORMAL;		break;		case 1:			return POST_STICKY;		break;		case 2:			return POST_ANNOUNCE;		break;		case 3:			return POST_GLOBAL;		break;	}	return POST_NORMAL;}function phpbb_replace_size($matches){	return '[size=' . min(200, ceil(100.0 * (((double) $matches[1])/12.0))) . ':' . $matches[2] . ']';}/*** Reparse the message stripping out the bbcode_uid values and adding new ones and setting the bitfield* @todo What do we want to do about HTML in messages - currently it gets converted to the entities, but there may be some objections to this*/function phpbb_prepare_message($message){	global $phpbb_root_path, $phpEx, $db, $convert, $user, $config, $cache, $convert_row, $message_parser;	if (!$message)	{		$convert->row['mp_bbcode_bitfield'] = $convert_row['mp_bbcode_bitfield'] = 0;		return '';	}	// Decode phpBB 2.0.x Message	if (isset($convert->row['old_bbcode_uid']) && $convert->row['old_bbcode_uid'] != '')	{		// Adjust size...		if (strpos($message, '[size=') !== false)		{			$message = preg_replace_callback('/\[size=(\d*):(' . $convert->row['old_bbcode_uid'] . ')\]/', 'phpbb_replace_size', $message);		}		$message = preg_replace('/\:(([a-z0-9]:)?)' . $convert->row['old_bbcode_uid'] . '/s', '', $message);	}	if (strpos($message, '[quote=') !== false)	{		$message = preg_replace('/\[quote="(.*?)"\]/s', '[quote=&quot;\1&quot;]', $message);		$message = preg_replace('/\[quote=\\\"(.*?)\\\"\]/s', '[quote=&quot;\1&quot;]', $message);		// let's hope that this solves more problems than it causes. Deal with escaped quotes.		$message = str_replace('\"', '&quot;', $message);		$message = str_replace('\&quot;', '&quot;', $message);	}	// Already the new user id ;)	$user_id = $convert->row['poster_id'];	$message = str_replace('<br />', "\n", $message);	$message = str_replace('<', '&lt;', $message);	$message = str_replace('>', '&gt;', $message);	// make the post UTF-8	$message = phpbb_set_encoding($message);	$message_parser->warn_msg = array(); // Reset the errors from the previous message	$message_parser->bbcode_uid = make_uid($convert->row['post_time']);	$message_parser->message = $message;	unset($message);	// Make sure options are set.//	$enable_html = (!isset($row['enable_html'])) ? false : $row['enable_html'];	$enable_bbcode = (!isset($convert->row['enable_bbcode'])) ? true : $convert->row['enable_bbcode'];	$enable_smilies = (!isset($convert->row['enable_smilies'])) ? true : $convert->row['enable_smilies'];	$enable_magic_url = (!isset($convert->row['enable_magic_url'])) ? true : $convert->row['enable_magic_url'];	// parse($allow_bbcode, $allow_magic_url, $allow_smilies, $allow_img_bbcode = true, $allow_flash_bbcode = true, $allow_quote_bbcode = true, $allow_url_bbcode = true, $update_this_message = true, $mode = 'post')	$message_parser->parse($enable_bbcode, $enable_magic_url, $enable_smilies);	if (sizeof($message_parser->warn_msg))	{		$msg_id = isset($convert->row['post_id']) ? $convert->row['post_id'] : $convert->row['privmsgs_id'];		$convert->p_master->error('<span style="color:red">' . $user->lang['POST_ID'] . ': ' . $msg_id . ' ' . $user->lang['CONV_ERROR_MESSAGE_PARSER'] . ': <br /><br />' . implode('<br />', $message_parser->warn_msg), __LINE__, __FILE__, true);	}	$convert->row['mp_bbcode_bitfield'] = $convert_row['mp_bbcode_bitfield'] = $message_parser->bbcode_bitfield;	$message = $message_parser->message;	unset($message_parser->message);	return $message;}/*** Return the bitfield calculated by the previous function*/function get_bbcode_bitfield(){	global $convert_row;	return $convert_row['mp_bbcode_bitfield'];}/*** Determine the last user to edit a post* In practice we only tracked edits by the original poster in 2.0.x so this will only be set if they had edited their own post*/function phpbb_post_edit_user(){	global $convert_row, $config;	if (isset($convert_row['post_edit_count']))	{		return phpbb_user_id($convert_row['poster_id']);	}	return 0;}/*** Obtain the path to uploaded files on the 2.0.x forum* This is only used if the Attachment MOD was installed*/function phpbb_get_files_dir(){	if (!defined('MOD_ATTACHMENT'))	{		return;	}	global $src_db, $same_db, $convert, $user, $config, $cache;	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'binary'");	}	$sql = 'SELECT config_value AS upload_dir		FROM ' . $convert->src_table_prefix . "attachments_config		WHERE config_name = 'upload_dir'";	$result = $src_db->sql_query($sql);	$upload_path = $src_db->sql_fetchfield('upload_dir');	$src_db->sql_freeresult($result);	$sql = 'SELECT config_value AS ftp_upload		FROM ' . $convert->src_table_prefix . "attachments_config		WHERE config_name = 'allow_ftp_upload'";	$result = $src_db->sql_query($sql);	$ftp_upload = (int) $src_db->sql_fetchfield('ftp_upload');	$src_db->sql_freeresult($result);	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'utf8'");	}	if ($ftp_upload)	{		$convert->p_master->error($user->lang['CONV_ERROR_ATTACH_FTP_DIR'], __LINE__, __FILE__);	}	return $upload_path;}/*** Copy thumbnails of uploaded images from the 2.0.x forum* This is only used if the Attachment MOD was installed*/function phpbb_copy_thumbnails(){	global $db, $convert, $user, $config, $cache, $phpbb_root_path;	$src_path = $convert->options['forum_path'] . '/' . phpbb_get_files_dir() . '/thumbs/';	if ($handle = @opendir($src_path))	{		while ($entry = readdir($handle))		{			if ($entry[0] == '.')			{				continue;			}			if (is_dir($src_path . $entry))			{				continue;			}			else			{				copy_file($src_path . $entry, $config['upload_path'] . '/' . preg_replace('/^t_/', 'thumb_', $entry));				@unlink($phpbb_root_path . $config['upload_path'] . '/thumbs/' . $entry);			}		}		closedir($handle);	}}/*** Convert the attachment category constants* This is only used if the Attachment MOD was installed*/function phpbb_attachment_category($cat_id){	switch ($cat_id)	{		case 1:			return ATTACHMENT_CATEGORY_IMAGE;		break;		case 2:			return ATTACHMENT_CATEGORY_WM;		break;		case 3:			return ATTACHMENT_CATEGORY_FLASH;		break;	}	return ATTACHMENT_CATEGORY_NONE;}/*** Obtain list of forums in which different attachment categories can be used*/function phpbb_attachment_forum_perms($forum_permissions){	if (empty($forum_permissions))	{		return '';	}	// Decode forum permissions	$forum_ids = array();	$one_char_encoding = '#';	$two_char_encoding = '.';	$auth_len = 1;	for ($pos = 0; $pos < strlen($forum_permissions); $pos += $auth_len)	{		$forum_auth = substr($forum_permissions, $pos, 1);		if ($forum_auth == $one_char_encoding)		{			$auth_len = 1;			continue;		}		else if ($forum_auth == $two_char_encoding)		{			$auth_len = 2;			$pos--;			continue;		}		$forum_auth = substr($forum_permissions, $pos, $auth_len);		$forum_id = base64_unpack($forum_auth);		$forum_ids[] = (int) $forum_id;	}	if (sizeof($forum_ids))	{		return attachment_forum_perms($forum_ids);	}	return '';}/*** Convert the avatar type constants*/function phpbb_avatar_type($type){	switch ($type)	{		case 1:			return AVATAR_UPLOAD;		break;		case 2:			return AVATAR_REMOTE;		break;		case 3:			return AVATAR_GALLERY;		break;	}	return 0;}/*** Just undos the replacing of '<' and '>'*/function  phpbb_smilie_html_decode($code){	$code = str_replace('&lt;', '<', $code);	return str_replace('&gt;', '>', $code);}/*** Transfer avatars, copying the image if it was uploaded*/function phpbb_import_avatar($user_avatar){	global $convert_row;	if (!$convert_row['user_avatar_type'])	{		return '';	}	else if ($convert_row['user_avatar_type'] == 1)	{		// Uploaded avatar		return import_avatar($user_avatar, false, $convert_row['user_id']);	}	else if ($convert_row['user_avatar_type'] == 2)	{		// Remote avatar		return $user_avatar;	}	else if ($convert_row['user_avatar_type'] == 3)	{		// Gallery avatar		return $user_avatar;	}	return '';}/*** Find out about the avatar's dimensions*/function phpbb_get_avatar_height($user_avatar){	global $convert_row;	if (empty($convert_row['user_avatar_type']))	{		return 0;	}	return get_avatar_height($user_avatar, 'phpbb_avatar_type', $convert_row['user_avatar_type']);}/*** Find out about the avatar's dimensions*/function phpbb_get_avatar_width($user_avatar){	global $convert_row;	if (empty($convert_row['user_avatar_type']))	{		return 0;	}	return get_avatar_width($user_avatar, 'phpbb_avatar_type', $convert_row['user_avatar_type']);}/*** Calculate the correct to_address field for private messages*/function phpbb_privmsgs_to_userid($to_userid){	global $config;	return 'u_' . phpbb_user_id($to_userid);}/*** Calculate whether a private message was unread using the bitfield*/function phpbb_unread_pm($pm_type){	return ($pm_type == 5) ? 1 : 0;}/*** Calculate whether a private message was new using the bitfield*/function phpbb_new_pm($pm_type){	return ($pm_type == 1) ? 1 : 0;}/*** Obtain the folder_id for the custom folder created to replace the savebox from 2.0.x (used to store saved private messages)*/function phpbb_get_savebox_id($user_id){	global $db;	$user_id = phpbb_user_id($user_id);	// Only one custom folder, check only one	$sql = 'SELECT folder_id		FROM ' . PRIVMSGS_FOLDER_TABLE . '		WHERE user_id = ' . $user_id;	$result = $db->sql_query_limit($sql, 1);	$folder_id = (int) $db->sql_fetchfield('folder_id');	$db->sql_freeresult($result);	return $folder_id;}/*** Transfer attachment specific configuration options* These were not stored in the main config table on 2.0.x* This is only used if the Attachment MOD was installed*/function phpbb_import_attach_config(){	global $db, $src_db, $same_db, $convert, $config;	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'binary'");	}	$sql = 'SELECT *		FROM ' . $convert->src_table_prefix . 'attachments_config';	$result = $src_db->sql_query($sql);	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'utf8'");	}	$attach_config = array();	while ($row = $src_db->sql_fetchrow($result))	{		$attach_config[$row['config_name']] = $row['config_value'];	}	$src_db->sql_freeresult($result);	set_config('allow_attachments', 1);	// old attachment mod? Must be very old if this entry do not exist...	if (!empty($attach_config['display_order']))	{		set_config('display_order', $attach_config['display_order']);	}	set_config('max_filesize', $attach_config['max_filesize']);	set_config('max_filesize_pm', $attach_config['max_filesize_pm']);	set_config('attachment_quota', $attach_config['attachment_quota']);	set_config('max_attachments', $attach_config['max_attachments']);	set_config('max_attachments_pm', $attach_config['max_attachments_pm']);	set_config('allow_pm_attach', $attach_config['allow_pm_attach']);	set_config('img_display_inlined', $attach_config['img_display_inlined']);	set_config('img_max_width', $attach_config['img_max_width']);	set_config('img_max_height', $attach_config['img_max_height']);	set_config('img_link_width', $attach_config['img_link_width']);	set_config('img_link_height', $attach_config['img_link_height']);	set_config('img_create_thumbnail', $attach_config['img_create_thumbnail']);	set_config('img_max_thumb_width', 400);	set_config('img_min_thumb_filesize', $attach_config['img_min_thumb_filesize']);	set_config('img_imagick', $attach_config['img_imagick']);}/*** Calculate the date a user became inactive*/function phpbb_inactive_time(){	global $convert_row;	if ($convert_row['user_active'])	{		return 0;	}	if ($convert_row['user_lastvisit'])	{		return $convert_row['user_lastvisit'];	}	return $convert_row['user_regdate'];}/*** Calculate the reason a user became inactive* We can't actually tell the difference between a manual deactivation and one for profile changes* from the data available to assume the latter*/function phpbb_inactive_reason(){	global $convert_row;	if ($convert_row['user_active'])	{		return 0;	}	if ($convert_row['user_lastvisit'])	{		return INACTIVE_PROFILE;	}	return INACTIVE_REGISTER;}/*** Adjust 2.0.x disallowed names to 3.0.x format*/function phpbb_disallowed_username($username){	// Replace * with %	$username = phpbb_set_default_encoding(str_replace('*', '%', $username));	return utf8_htmlspecialchars($username);}/*** Checks whether there are any usernames on the old board that would map to the same* username_clean on phpBB3. Prints out a list if any exist and exits.*/function phpbb_create_userconv_table(){	global $db, $src_db, $convert, $table_prefix, $user, $lang;	$map_dbms = '';	switch ($db->sql_layer)	{		case 'mysql':			$map_dbms = 'mysql_40';		break;		case 'mysql4':			if (version_compare($db->sql_server_info(true), '4.1.3', '>='))			{				$map_dbms = 'mysql_41';			}			else			{				$map_dbms = 'mysql_40';			}		break;		case 'mysqli':			$map_dbms = 'mysql_41';		break;		case 'mssql':		case 'mssql_odbc':		case 'mssqlnative':			$map_dbms = 'mssql';		break;		default:			$map_dbms = $db->sql_layer;		break;	}	// create a temporary table in which we store the clean usernames	$drop_sql = 'DROP TABLE ' . USERCONV_TABLE;	switch ($map_dbms)	{		case 'firebird':			$create_sql = 'CREATE TABLE ' . USERCONV_TABLE . ' (				user_id INTEGER NOT NULL,				username_clean VARCHAR(255) CHARACTER SET UTF8 DEFAULT \'\' NOT NULL COLLATE UNICODE			)';		break;		case 'mssql':			$create_sql = 'CREATE TABLE [' . USERCONV_TABLE . '] (				[user_id] [int] NOT NULL ,				[username_clean] [varchar] (255) DEFAULT (\'\') NOT NULL			)';		break;		case 'mysql_40':			$create_sql = 'CREATE TABLE ' . USERCONV_TABLE . ' (				user_id mediumint(8) NOT NULL,				username_clean blob NOT NULL			)';		break;		case 'mysql_41':			$create_sql = 'CREATE TABLE ' . USERCONV_TABLE . ' (				user_id mediumint(8) NOT NULL,				username_clean varchar(255) DEFAULT \'\' NOT NULL			) CHARACTER SET `utf8` COLLATE `utf8_bin`';		break;		case 'oracle':			$create_sql = 'CREATE TABLE ' . USERCONV_TABLE . ' (				user_id number(8) NOT NULL,				username_clean varchar2(255) DEFAULT \'\'			)';		break;		case 'postgres':			$create_sql = 'CREATE TABLE ' . USERCONV_TABLE . ' (				user_id INT4 DEFAULT \'0\',				username_clean varchar_ci DEFAULT \'\' NOT NULL			)';		break;		case 'sqlite':			$create_sql = 'CREATE TABLE ' . USERCONV_TABLE . ' (				user_id INTEGER NOT NULL DEFAULT \'0\',				username_clean varchar(255) NOT NULL DEFAULT \'\'			)';		break;	}	$db->sql_return_on_error(true);	$db->sql_query($drop_sql);	$db->sql_return_on_error(false);	$db->sql_query($create_sql);}function phpbb_check_username_collisions(){	global $db, $src_db, $convert, $table_prefix, $user, $lang;	// now find the clean version of the usernames that collide	$sql = 'SELECT username_clean		FROM ' . USERCONV_TABLE .'		GROUP BY username_clean		HAVING COUNT(user_id) > 1';	$result = $db->sql_query($sql);	$colliding_names = array();	while ($row = $db->sql_fetchrow($result))	{		$colliding_names[] = $row['username_clean'];	}	$db->sql_freeresult($result);	// there was at least one collision, the admin will have to solve it before conversion can continue	if (sizeof($colliding_names))	{		$sql = 'SELECT user_id, username_clean			FROM ' . USERCONV_TABLE . '			WHERE ' . $db->sql_in_set('username_clean', $colliding_names);		$result = $db->sql_query($sql);		unset($colliding_names);		$colliding_user_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$colliding_user_ids[(int) $row['user_id']] = $row['username_clean'];		}		$db->sql_freeresult($result);		$sql = 'SELECT username, user_id, user_posts			FROM ' . $convert->src_table_prefix . 'users			WHERE ' . $src_db->sql_in_set('user_id', array_keys($colliding_user_ids));		$result = $src_db->sql_query($sql);		$colliding_users = array();		while ($row = $src_db->sql_fetchrow($result))		{			$row['user_id'] = (int) $row['user_id'];			if (isset($colliding_user_ids[$row['user_id']]))			{				$colliding_users[$colliding_user_ids[$row['user_id']]][] = $row;			}		}		$src_db->sql_freeresult($result);		unset($colliding_user_ids);		$list = '';		foreach ($colliding_users as $username_clean => $users)		{			$list .= sprintf($user->lang['COLLIDING_CLEAN_USERNAME'], $username_clean) . "<br />\n";			foreach ($users as $i => $row)			{				$list .= sprintf($user->lang['COLLIDING_USER'], $row['user_id'], phpbb_set_default_encoding($row['username']), $row['user_posts']) . "<br />\n";			}		}		$lang['INST_ERR_FATAL'] = $user->lang['CONV_ERR_FATAL'];		$convert->p_master->error('<span style="color:red">' . $user->lang['COLLIDING_USERNAMES_FOUND'] . '</span></b><br /><br />' . $list . '<b>', __LINE__, __FILE__);	}	$drop_sql = 'DROP TABLE ' . USERCONV_TABLE;	$db->sql_query($drop_sql);}?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Main non-gd captcha class* @ignore* @package VC*/class captcha{	var $filtered_pngs;	var $width = 320;	var $height = 50;	/**	* Define filtered pngs on init	*/	function captcha()	{		// If we can we will generate a single filtered png, we avoid nastiness via emulation of some Zlib stuff		$this->define_filtered_pngs();	}	/**	* Create the image containing $code with a seed of $seed	*/	function execute($code, $seed)	{		$img_height = $this->height - 10;		$img_width = 0;		mt_srand($seed);		$char_widths = $hold_chars = array();		$code_len = strlen($code);		for ($i = 0; $i < $code_len; $i++)		{			$char = $code[$i];			$width = mt_rand(0, 4);			$raw_width = $this->filtered_pngs[$char]['width'];			$char_widths[$i] = $width;			$img_width += $raw_width - $width;			// Split the char into chunks of $raw_width + 1 length			if (empty($hold_chars[$char]))			{				$hold_chars[$char] = str_split(base64_decode($this->filtered_pngs[$char]['data']), $raw_width + 1);			}		}		$offset_x = mt_rand(0, $this->width - $img_width);		$offset_y = mt_rand(0, $this->height - $img_height);		$image = '';		for ($i = 0; $i < $this->height; $i++)		{			$image .= chr(0);			if ($i > $offset_y && $i < $offset_y + $img_height)			{				for ($j = 0; $j < $offset_x; $j++)				{					$image .= chr(mt_rand(140, 255));				}				for ($j = 0; $j < $code_len; $j++)				{					$image .= $this->randomise(substr($hold_chars[$code{$j}][$i - $offset_y - 1], 1), $char_widths[$j]);				}				for ($j = $offset_x + $img_width; $j < $this->width; $j++)				{					$image .= chr(mt_rand(140, 255));				}			}			else			{				for ($j = 0; $j < $this->width; $j++)				{					$image .= chr(mt_rand(140, 255));				}			}		}		unset($hold_chars);		$image = $this->create_png($image, $this->width, $this->height);		// Output image		header('Content-Type: image/png');		header('Cache-control: no-cache, no-store');		echo $image;		exit;	}	/**	* This is designed to randomise the pixels of the image data within	* certain limits so as to keep it readable. It also varies the image	* width a little	*/	function randomise($scanline, $width)	{		$new_line = '';		$end = strlen($scanline) - ceil($width/2);		for ($i = floor($width/2); $i < $end; $i++)		{			$pixel = ord($scanline{$i});			if ($pixel < 190)			{				$new_line .= chr(mt_rand(0, 205));			}			else if ($pixel > 190)			{				$new_line .= chr(mt_rand(145, 255));			}			else			{				$new_line .= $scanline{$i};			}		}		return $new_line;	}	/**	* This creates a chunk of the given type, with the given data	* of the given length adding the relevant crc	*/	function png_chunk($length, $type, $data)	{		$raw = $type . $data;		return pack('N', $length) . $raw . pack('N', crc32($raw));	}	/**	* Creates greyscale 8bit png - The PNG spec can be found at	* http://www.libpng.org/pub/png/spec/PNG-Contents.html we use	* png because it's a fully recognised open standard and supported	* by practically all modern browsers and OSs	*/	function create_png($raw_image, $width, $height)	{		// SIG		$image = pack('C8', 137, 80, 78, 71, 13, 10, 26, 10);		// IHDR		$raw = pack('N2', $width, $height);		$raw .= pack('C5', 8, 0, 0, 0, 0);		$image .= $this->png_chunk(13, 'IHDR', $raw);		// IDAT		if (@extension_loaded('zlib'))		{			$raw_image = gzcompress($raw_image);			$length = strlen($raw_image);		}		else		{			// The total length of this image, uncompressed, is just a calculation of pixels			$length = ($width + 1) * $height;			// Adler-32 hash generation			// Note: The hash is _backwards_ so we must reverse it			if (@extension_loaded('hash'))			{				$adler_hash = strrev(hash('adler32', $raw_image, true));			}			else if (@extension_loaded('mhash'))			{				$adler_hash = strrev(mhash(MHASH_ADLER32, $raw_image));			}			else			{				// Optimized Adler-32 loop ported from the GNU Classpath project				$temp_length = $length;				$s1 = 1;				$s2 = $index = 0;				while ($temp_length > 0)				{					// We can defer the modulo operation:					// s1 maximally grows from 65521 to 65521 + 255 * 3800					// s2 maximally grows by 3800 * median(s1) = 2090079800 < 2^31					$substract_value = ($temp_length < 3800) ? $temp_length : 3800;					$temp_length -= $substract_value;					while (--$substract_value >= 0)					{						$s1 += ord($raw_image[$index]);						$s2 += $s1;						$index++;					}					$s1 %= 65521;					$s2 %= 65521;				}				$adler_hash = pack('N', ($s2 << 16) | $s1);			}			// This is the same thing as gzcompress($raw_image, 0) but does not need zlib			$raw_image = pack('C3v2', 0x78, 0x01, 0x01, $length, ~$length) . $raw_image . $adler_hash;			// The Zlib header + Adler hash make us add on 11			$length += 11;		}		// IDAT		$image .= $this->png_chunk($length, 'IDAT', $raw_image);		// IEND		$image .= $this->png_chunk(0, 'IEND', '');		return $image;	}	/**	* png image data	* Each 'data' element is base64_encoded uncompressed IDAT	*/	function define_filtered_pngs()	{		$this->filtered_pngs = array(			'0' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A///////////////////olFAkBAAAGDyA4P///M31/////////////wD////////////////0dAgAAAAAAAAAAAAEcPipFGHn////////////AP//////////////6DAAAAAAAAAAAAAAAAAALSEAN+T///////////8A//////////////xAAAAAAAAAAAAAAAAAAAAAACPA/////////////wD/////////////oAAAAAAAAAAAAAAAAAAAAAAAev//////////////AP////////////8oAAAAAAAAPNj/zDAAAAAAAABD//////////////8A////////////1AAAAAAAABjw////5BAAAAAAAADo/////////////wD///////////+QAAAAAAAAbP//////QgAAAAAAAKj/////////////AP///////////1wAAAAAAACs/////8AXAAAAAAAAcP////////////8A////////////OAAAAAAAAND////dNwAAAAAAAABI/////////////wD///////////8gAAAAAAAA4P//7koACwAAAAAAACT/////////////AP///////////wgAAAAAAAD///VqAwaPAAAAAAAAEP////////////8A////////////AAAAAAAAAP/8kQYDavUAAAAAAAAA/////////////wD///////////8AAAAAAAAA/6kNAEru/wAAAAAAAAD/////////////AP///////////wAAAAAAAADAIwA33f//AAAAAAAAAP////////////8A////////////FAAAAAAAADYAI8D///8AAAAAAAAQ/////////////wD///////////8kAAAAAAAAAA2p////5AAAAAAAACD/////////////AP///////////0gAAAAAAAAFkfz////UAAAAAAAAQP////////////8A////////////cAAAAAAAAET1/////7AAAAAAAABo/////////////wD///////////+oAAAAAAAAXfX/////sAAAAAAAAGj/////////////AAAAALgAAAAAAAAwAAAAAAAAAAAAAAD////////////oAAAAAAAACOT////oEAAAAAAAAOD/////////////AP////////////8+AAAAAAAAKMz/zDQAAAAAAAA0//////////////8A////////////7jgAAAAAAAAAAAAAAAAAAAAAAKT//////////////wD///////////VqAwIAAAAAAAAAAAAAAAAAAAA8////////////////AP//////////rQcDaVEAAAAAAAAAAAAAAAAAKOj///////////////8A///////////nblnu/IAIAAAAAAAAAAAAAFzw/////////////////wD////////////79////+iITCAAAAAgSITg////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////w==',				'width' => 40			),			'1' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////8BAAAAAAAP//////////////////AP////////////////////////9sAAAAAAAA//////////////////8A////////////////////////pAAAAAAAAAD//////////////////wD//////////////////////6wEAAAAAAAAAP//////////////////AP////////////////////h4AAAAAAAAAAAA//////////////////8A//////////////////ygJAAAAAAAAAAAAAD//////////////////wD//////////////9x8HAAAAAAAAAAAAAAAAP//////////////////AP//////////////AAAAAAAAAAAAAAAAAAAA//////////////////8A//////////////8AAAAAAAAAAAAAAAAAAAD//////////////////wD//////////////wAAAAAAAAR4AAAAAAAAAP//////////////////AP//////////////AAAAAAA4zP8AAAAAAAAA//////////////////8A//////////////8AAAA4sP///wAAAAAAAAD//////////////////wD//////////////yR80P//////AAAAAAAAAP//////////////////AP////////////////////////8AAAAAAAAA//////////////////8A/////////////////////////wAAAAAAAAD//////////////////wD/////////////////////////AAAAAAAAAP//////////////////AP////////////////////////8AAAAAAAAA//////////////////8A/////////////////////////wAAAAAAAAD//////////////////wD/////////////////////////AAAAAAAAAP//////////////////AP////////////////////////8AAAAAAAAA//////////////////8A/////////////////////////wAAAAAAAAD//////////////////wD/////////////////////////AAAAAAAAAP//////////////////AP////////////////////////8AAAAAAAAA//////////////////8A/////////////////////////wAAAAAAAAD//////////////////wD/////////////////////////AAAAAAAAAP//////////////////AP////////////////////////8AAAAAAAAA//////////////////8A/////////////////////////wAAAAAAAAD//////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'2' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP/////////////////okFAkCAAABCBIfNT///////////////////8A///////////////8hAgAAAAAAAAAAAAAAFTo/////////////////wD//////////////1QAAAAAAAAAAAAAAAAAACjo////////////////AP////////////+MAAAAAAAAAAAAAAAAAAAAADj///////////////8A////////////9BAAAAAAAAAAAAAAAAAAAAAAALD//////////////wD///////////+gAAAAAAAAAHjs+KwMAAAAAAAAVP//////////////AP///////////1gAAAAAAABM/////6QAAAAAAAAU//////////////8A////////////KAAAAAAAALj/////+AAAAAAAAAD//////////////wD///////////+MfGBMOCAI8P/////wAAAAAAAACP//////////////AP///////////////////////////5wAAAAAAAAw//////////////8A///////////////////////////oFAAAAAAAAHz//////////////wD/////////////////////////6CgAAAAAAAAE3P//////////////AP///////////////////////9ggAAAAAAAAAHT///////////////8A//////////////////////+0DAAAAAAAAAA8+P///////////////wD/////////////////////gAAAAAAAAAAAKOj/////////////////AP//////////////////9FAAAAAAAAAAADzw//////////////////8A/////////////////+g4AAAAAAAAAABk/P///////////////////wD////////////////oKAAAAAAAAAAMqP//////////////////////AP//////////////6CgAAAAAAAAAMNz///////////////////////8A//////////////g4AAAAAAAAAFT0/////////////////////////wD/////////////bAAAAAAAAABU/P//////////////////////////AP///////////8wAAAAAAAAAAAAAAAAAAAAAAAAA//////////////8A////////////SAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////9wAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////hAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////8A//////////9AAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////xAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'3' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD////////////////8sGg0FAAAACA4cLz8////////////////////AP//////////////rBgAAAAAAAAAAAAAACTA//////////////////8A/////////////3QAAAAAAAAAAAAAAAAAAASs/////////////////wD///////////+YAAAAAAAAAAAAAAAAAAAAAAjc////////////////AP//////////6AwAAAAAAAAAAAAAAAAAAAAAAGT///////////////8A//////////94AAAAAAAABJDw/8g4AAAAAAAAHP///////////////wD//////////yAAAAAAAACE/////9gAAAAAAAAA////////////////AP///////////NSwiGQ4FOT//////AAAAAAAABD///////////////8A//////////////////////////+YAAAAAAAAVP///////////////wD//////////////////////P/ggAQAAAAAAATM////////////////AP////////////////////9gAAAAAAAAAAAElP////////////////8A/////////////////////0AAAAAAAAAAHLj//////////////////wD/////////////////////OAAAAAAAAAAwkPj/////////////////AP////////////////////8gAAAAAAAAAAAAINj///////////////8A/////////////////////xAAAAAAAAAAAAAAIPD//////////////wD/////////////////////uOz/4HgEAAAAAAAAhP//////////////AP///////////////////////////3wAAAAAAAAw//////////////8A////////////////////////////6AAAAAAAAAj//////////////wD/////////////////////////////AAAAAAAAAP//////////////AP//////////tJh8YEQoDNz//////+AAAAAAAAAY//////////////8A//////////88AAAAAAAAaP//////dAAAAAAAAEz//////////////wD//////////6QAAAAAAAAAdOD/5HQAAAAAAAAApP//////////////AP///////////CgAAAAAAAAAAAAAAAAAAAAAACD4//////////////8A////////////yAQAAAAAAAAAAAAAAAAAAAAEuP///////////////wD/////////////rAQAAAAAAAAAAAAAAAAABJD/////////////////AP//////////////zDQAAAAAAAAAAAAAACTA//////////////////8A/////////////////8BwOCAAAAAUNGi0/P///////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'4' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP//////////////////////////nAAAAAAAAAD///////////////8A/////////////////////////8AEAAAAAAAAAP///////////////wD////////////////////////gGAAAAAAAAAAA////////////////AP//////////////////////9DAAAAAAAAAAAAD///////////////8A//////////////////////9UAAAAAAAAAAAAAP///////////////wD/////////////////////hAAAAAAAAAAAAAAA////////////////AP///////////////////7QAAAAAAAAAAAAAAAD///////////////8A///////////////////UDAAAAAAUAAAAAAAAAP///////////////wD/////////////////7CQAAAAABMAAAAAAAAAA////////////////AP////////////////xEAAAAAACU/wAAAAAAAAD///////////////8A////////////////cAAAAAAAZP//AAAAAAAAAP///////////////wD//////////////6AAAAAAADz8//8AAAAAAAAA////////////////AP/////////////IBAAAAAAc6P///wAAAAAAAAD///////////////8A////////////5BgAAAAADMz/////AAAAAAAAAP///////////////wD///////////g0AAAAAACk//////8AAAAAAAAA////////////////AP//////////XAAAAAAAfP///////wAAAAAAAAD///////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////8A////////////////////////////AAAAAAAAAP///////////////wD///////////////////////////8AAAAAAAAA////////////////AP///////////////////////////wAAAAAAAAD///////////////8A////////////////////////////AAAAAAAAAP///////////////wD///////////////////////////8AAAAAAAAA////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'5' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP//////////////8AAAAAAAAAAAAAAAAAAAAAAA//////////////8A///////////////MAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////////6wAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////////iAAAAAAAAAAAAAAAAAAAAAAA//////////////8A//////////////9kAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////////0QAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////////IAAAAAAAYP////////////////////////////8A//////////////wAAAAAAAB8/////////////////////////////wD/////////////3AAAAAAAAIj/////////////////////////////AP////////////+4AAAAAAAAoLRYHAAEKGTE//////////////////8A/////////////5QAAAAAAAAQAAAAAAAAAABY9P///////////////wD/////////////dAAAAAAAAAAAAAAAAAAAAAA89P//////////////AP////////////9QAAAAAAAAAAAAAAAAAAAAAABg//////////////8A/////////////zAAAAAAAAAAAAAAAAAAAAAAAADQ/////////////wD/////////////IAAAAAAAAGjY/+h4BAAAAAAAAGz/////////////AP//////////////9NS0lHSc//////90AAAAAAAALP////////////8A/////////////////////////////9QAAAAAAAAE/////////////wD//////////////////////////////wAAAAAAAAD/////////////AP/////////////////////////////8AAAAAAAAEP////////////8A////////////pIRwWEAgDOD//////8wAAAAAAAA8/////////////wD///////////9EAAAAAAAAaP//////ZAAAAAAAAHz/////////////AP///////////6QAAAAAAAAAaOD/4GQAAAAAAAAE4P////////////8A/////////////CQAAAAAAAAAAAAAAAAAAAAAAGD//////////////wD/////////////yAQAAAAAAAAAAAAAAAAAAAAc7P//////////////AP//////////////rAwAAAAAAAAAAAAAAAAAGNj///////////////8A////////////////0EAAAAAAAAAAAAAAAFTo/////////////////wD//////////////////8h4QCAAAAAcQHzU////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'6' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD///////////////////+0ZCwMAAAUNGjI////////////////////AP/////////////////EMAAAAAAAAAAAAABM6P////////////////8A////////////////lAQAAAAAAAAAAAAAAAAo6P///////////////wD//////////////6wAAAAAAAAAAAAAAAAAAABI////////////////AP/////////////oEAAAAAAAAAAAAAAAAAAAAACw//////////////8A/////////////3AAAAAAAAAoxP/YPAAAAAAAAEj//////////////wD////////////4EAAAAAAACOD////YDCBAVGiAoP//////////////AP///////////7gAAAAAAABY//////////////////////////////8A////////////eAAAAAAAAJT//////////////////////////////wD///////////9MAAAAAAAAvP/IXBgABCx03P//////////////////AP///////////ygAAAAAAADcdAAAAAAAAAAEiP////////////////8A////////////FAAAAAAAAFAAAAAAAAAAAAAAcP///////////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAlP//////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAQ8P////////////8A////////////AAAAAAAAAABAyP/kZAAAAAAAAACQ/////////////wD///////////8MAAAAAAAALPj/////WAAAAAAAAET/////////////AP///////////yQAAAAAAACY///////MAAAAAAAAFP////////////8A////////////SAAAAAAAAMD///////wAAAAAAAAA/////////////wD///////////9wAAAAAAAAvP///////wAAAAAAAAD/////////////AP///////////7QAAAAAAACI///////UAAAAAAAAJP////////////8A////////////+AwAAAAAACDw/////2wAAAAAAABY/////////////wD/////////////cAAAAAAAADC8/Ox4AAAAAAAAAKj/////////////AP/////////////oEAAAAAAAAAAAAAAAAAAAAAAk/P////////////8A//////////////+oAAAAAAAAAAAAAAAAAAAABLj//////////////wD///////////////+QAAAAAAAAAAAAAAAAAACQ////////////////AP////////////////+0JAAAAAAAAAAAAAAkuP////////////////8A///////////////////8sGg0FAAADCxgqPz//////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'7' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAABP////////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAAAy4/////////////wD//////////////////////////+QUAAAAAAAEuP//////////////AP/////////////////////////8QAAAAAAAAKT///////////////8A/////////////////////////4wAAAAAAAB0/////////////////wD////////////////////////cCAAAAAAANPz/////////////////AP///////////////////////0QAAAAAAATY//////////////////8A//////////////////////+0AAAAAAAAeP///////////////////wD//////////////////////CQAAAAAABTw////////////////////AP////////////////////+gAAAAAAAAkP////////////////////8A/////////////////////ywAAAAAABDw/////////////////////wD///////////////////+4AAAAAAAAbP//////////////////////AP///////////////////1wAAAAAAADQ//////////////////////8A///////////////////4DAAAAAAAMP///////////////////////wD//////////////////7QAAAAAAAB8////////////////////////AP//////////////////aAAAAAAAAMj///////////////////////8A//////////////////8oAAAAAAAM/P///////////////////////wD/////////////////8AAAAAAAAET/////////////////////////AP////////////////+0AAAAAAAAcP////////////////////////8A/////////////////4wAAAAAAACY/////////////////////////wD/////////////////WAAAAAAAAMD/////////////////////////AP////////////////80AAAAAAAA4P////////////////////////8A/////////////////xAAAAAAAAD4/////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'8' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD////////////////////IdDQUAAAEIEiA1P//////////////////AP/////////////////gRAAAAAAAAAAAAAAAROD///////////////8A////////////////0BgAAAAAAAAAAAAAAAAAEMj//////////////wD///////////////AcAAAAAAAAAAAAAAAAAAAAHPD/////////////AP//////////////hAAAAAAAAAAAAAAAAAAAAAAAhP////////////8A//////////////8sAAAAAAAAKMz/zCgAAAAAAAAs/////////////wD//////////////wAAAAAAAADM////zAAAAAAAAAD/////////////AP//////////////BAAAAAAAAP//////AAAAAAAABP////////////8A//////////////8sAAAAAAAAzP///9QAAAAAAAAw/////////////wD//////////////3wAAAAAAAAoyP/YNAAAAAAAAIT/////////////AP//////////////7BgAAAAAAAAAAAAAAAAAAAAc8P////////////8A////////////////xBgAAAAAAAAAAAAAAAAAGNj//////////////wD/////////////////tAQAAAAAAAAAAAAAAACo////////////////AP///////////////HAAAAAAAAAAAAAAAAAAAAB8//////////////8A//////////////9gAAAAAAAAAAAAAAAAAAAAAAB8/////////////wD/////////////wAAAAAAAAABk4P/UWAAAAAAAAATQ////////////AP////////////9UAAAAAAAAaP//////XAAAAAAAAGT///////////8A/////////////xgAAAAAAADg///////cAAAAAAAAJP///////////wD/////////////AAAAAAAAAP////////8AAAAAAAAA////////////AP////////////8AAAAAAAAA4P//////3AAAAAAAAAT///////////8A/////////////ygAAAAAAABg//////9cAAAAAAAALP///////////wD/////////////ZAAAAAAAAABY1P/cXAAAAAAAAABw////////////AP/////////////QAAAAAAAAAAAAAAAAAAAAAAAABNz///////////8A//////////////9gAAAAAAAAAAAAAAAAAAAAAAB0/////////////wD///////////////Q8AAAAAAAAAAAAAAAAAAAAUPz/////////////AP////////////////x4CAAAAAAAAAAAAAAAEIT8//////////////8A///////////////////smFQwGAAAABg0ZKT0/////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'9' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD///////////////////ysYCwMAAAUNGiw/P//////////////////AP////////////////+4JAAAAAAAAAAAAAAkuP////////////////8A////////////////lAQAAAAAAAAAAAAAAAAAkP///////////////wD//////////////8AEAAAAAAAAAAAAAAAAAAAAqP//////////////AP/////////////8JAAAAAAAAAAAAAAAAAAAAAAQ7P////////////8A/////////////6wAAAAAAAAAfOz8vCwAAAAAAABw/////////////wD/////////////WAAAAAAAAHD/////7BgAAAAAAAz4////////////AP////////////8kAAAAAAAA1P//////hAAAAAAAALT///////////8A/////////////wAAAAAAAAD///////+4AAAAAAAAcP///////////wD/////////////AAAAAAAAAPz//////8AAAAAAAABI////////////AP////////////8UAAAAAAAAzP//////lAAAAAAAACT///////////8A/////////////0QAAAAAAABY//////gsAAAAAAAADP///////////wD/////////////kAAAAAAAAABw5P/IPAAAAAAAAAAA////////////AP/////////////wEAAAAAAAAAAAAAAAAAAAAAAAAAD///////////8A//////////////+UAAAAAAAAAAAAAAAAAAAAAAAAAP///////////wD///////////////9wAAAAAAAAAAAAAFAAAAAAAAAU////////////AP////////////////+IBAAAAAAAAABw3AAAAAAAACj///////////8A///////////////////cdCwEABhcxP+8AAAAAAAATP///////////wD//////////////////////////////5AAAAAAAAB4////////////AP//////////////////////////////UAAAAAAAALj///////////8A//////////////+kgGxUQCAM2P///+AIAAAAAAAQ+P///////////wD//////////////0gAAAAAAAA42P/EKAAAAAAAAHD/////////////AP//////////////sAAAAAAAAAAAAAAAAAAAAAAQ6P////////////8A////////////////TAAAAAAAAAAAAAAAAAAAAKz//////////////wD////////////////oKAAAAAAAAAAAAAAAAASU////////////////AP/////////////////sUAAAAAAAAAAAAAAwxP////////////////8A////////////////////yHA0FAAADCxktP///////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'A' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD//////////////////+QAAAAAAAAAAAAAAOT/////////////////AP//////////////////kAAAAAAAAAAAAAAAkP////////////////8A//////////////////88AAAAAAAAAAAAAAA8/////////////////wD/////////////////5AAAAAAAAAAAAAAAAADk////////////////AP////////////////+QAAAAAAAAAAAAAAAAAJD///////////////8A/////////////////zwAAAAAAAAAAAAAAAAAPP///////////////wD////////////////kAAAAAAAAAAgAAAAAAAAA5P//////////////AP///////////////5AAAAAAAAAAgAAAAAAAAACQ//////////////8A////////////////PAAAAAAAAAz8HAAAAAAAADz//////////////wD//////////////+QAAAAAAAAAWP9kAAAAAAAAANz/////////////AP//////////////kAAAAAAAAACk/7wAAAAAAAAAhP////////////8A//////////////88AAAAAAAABOz//BQAAAAAAAAw/////////////wD/////////////4AAAAAAAAAA8////ZAAAAAAAAADc////////////AP////////////+EAAAAAAAAAIj///+8AAAAAAAAAIT///////////8A/////////////zAAAAAAAAAA2P////wQAAAAAAAAMP///////////wD////////////cAAAAAAAAACT//////1wAAAAAAAAA3P//////////AP///////////4QAAAAAAAAAAAAAAAAAAAAAAAAAAACE//////////8A////////////MAAAAAAAAAAAAAAAAAAAAAAAAAAAADD//////////wD//////////9wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANz/////////AP//////////hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhP////////8A//////////8wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAw/////////wD/////////3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADc////////AP////////+EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIT///////8A/////////zAAAAAAAAAAhP///////////2QAAAAAAAAAMP///////wD////////cAAAAAAAAAADM////////////vAAAAAAAAAAA3P//////AP///////4QAAAAAAAAAHP/////////////4DAAAAAAAAACE//////8A////////MAAAAAAAAABk//////////////9cAAAAAAAAADD//////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'B' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAEDh83P///////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAEhP//////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAeP////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAxP///////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAABY////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAABT///////////8A//////////8AAAAAAAAAAP/////4zEwAAAAAAAAAAP///////////wD//////////wAAAAAAAAAA////////7AAAAAAAAAAQ////////////AP//////////AAAAAAAAAAD////////sAAAAAAAAAEj///////////8A//////////8AAAAAAAAAAP/////4zEQAAAAAAAAAtP///////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAFz/////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAiA/P////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAIjPj//////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAGKz/////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAJT///////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAABNz//////////wD//////////wAAAAAAAAAA///////sqCAAAAAAAAAAbP//////////AP//////////AAAAAAAAAAD/////////yAAAAAAAAAAs//////////8A//////////8AAAAAAAAAAP//////////AAAAAAAAAAT//////////wD//////////wAAAAAAAAAA/////////7wAAAAAAAAAAP//////////AP//////////AAAAAAAAAAD//////+ikGAAAAAAAAAAY//////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFT//////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsP//////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAADj///////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAc6P///////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAATOj/////////////AP//////////AAAAAAAAAAAAAAAAAAAEIEBkkNj///////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'C' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP//////////////////5JRULBAAAAgkTIDQ//////////////////8A////////////////1FAAAAAAAAAAAAAAAABAyP///////////////wD//////////////4gEAAAAAAAAAAAAAAAAAAAElP//////////////AP////////////9wAAAAAAAAAAAAAAAAAAAAAAAAlP////////////8A////////////kAAAAAAAAAAAAAAAAAAAAAAAAAAEyP///////////wD//////////9wIAAAAAAAAAAAAAAAAAAAAAAAAAAAw////////////AP//////////WAAAAAAAAAAAWMz/8JwQAAAAAAAAAACw//////////8A/////////+wEAAAAAAAAAID//////9QMAAAAAAAAAET//////////wD/////////nAAAAAAAAAAo/P///////3wAAAAABDBspP//////////AP////////9gAAAAAAAAAIz/////////3BxQjMT0//////////////8A/////////zQAAAAAAAAAzP///////////////////////////////wD/////////GAAAAAAAAADo////////////////////////////////AP////////8AAAAAAAAAAP////////////////////////////////8A/////////wAAAAAAAAAA/////////////////////////////////wD/////////AAAAAAAAAAD/////////////////////////////////AP////////8cAAAAAAAAAOj///////////////////////////////8A/////////zgAAAAAAAAA0P/////////kIGio7P///////////////wD/////////bAAAAAAAAACg/////////5wAAAAAMHS49P//////////AP////////+oAAAAAAAAAEz/////////PAAAAAAAAAAc//////////8A//////////QIAAAAAAAAALz//////6QAAAAAAAAAAGT//////////wD//////////3AAAAAAAAAADIzo/+SEBAAAAAAAAAAAyP//////////AP//////////7BAAAAAAAAAAAAAAAAAAAAAAAAAAAED///////////8A////////////rAAAAAAAAAAAAAAAAAAAAAAAAAAE0P///////////wD/////////////fAAAAAAAAAAAAAAAAAAAAAAAAJz/////////////AP//////////////iAQAAAAAAAAAAAAAAAAAAASY//////////////8A////////////////yEAAAAAAAAAAAAAAAAA8yP///////////////wD//////////////////9yIUCwQAAAAIEB4yP//////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'D' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD///////////8AAAAAAAAAAAAAAAAADChQkOT/////////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAABGjw//////////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAACDY/////////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAABjk////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAED///////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAKj//////////wD///////////8AAAAAAAAAAP///+isSAAAAAAAAAAANP//////////AP///////////wAAAAAAAAAA////////hAAAAAAAAAAA2P////////8A////////////AAAAAAAAAAD/////////MAAAAAAAAACQ/////////wD///////////8AAAAAAAAAAP////////+MAAAAAAAAAFj/////////AP///////////wAAAAAAAAAA/////////8gAAAAAAAAAMP////////8A////////////AAAAAAAAAAD/////////5AAAAAAAAAAY/////////wD///////////8AAAAAAAAAAP//////////AAAAAAAAAAD/////////AP///////////wAAAAAAAAAA//////////8AAAAAAAAAAP////////8A////////////AAAAAAAAAAD//////////wAAAAAAAAAA/////////wD///////////8AAAAAAAAAAP/////////wAAAAAAAAABD/////////AP///////////wAAAAAAAAAA/////////9QAAAAAAAAAJP////////8A////////////AAAAAAAAAAD/////////qAAAAAAAAABI/////////wD///////////8AAAAAAAAAAP////////9QAAAAAAAAAHj/////////AP///////////wAAAAAAAAAA////////uAAAAAAAAAAAvP////////8A////////////AAAAAAAAAAD////w0HwEAAAAAAAAACT8/////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAoP//////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAAADz8//////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAY6P///////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAKNz/////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAACHT0//////////////8A////////////AAAAAAAAAAAAAAAAABg4bKj0/////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'E' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP//////////AAAAAAAAAAD///////////////////////////////8A//////////8AAAAAAAAAAP///////////////////////////////wD//////////wAAAAAAAAAA////////////////////////////////AP//////////AAAAAAAAAAD///////////////////////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////8A//////////8AAAAAAAAAAP///////////////////////////////wD//////////wAAAAAAAAAA////////////////////////////////AP//////////AAAAAAAAAAD///////////////////////////////8A//////////8AAAAAAAAAAP///////////////////////////////wD//////////wAAAAAAAAAA////////////////////////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'F' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAP///////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAP///////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'G' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD//////////////////MB8TCgQAAAACCA4YJzs////////////////AP///////////////JQcAAAAAAAAAAAAAAAAAAhw8P////////////8A/////////////9gwAAAAAAAAAAAAAAAAAAAAAAAk2P///////////wD////////////EDAAAAAAAAAAAAAAAAAAAAAAAAAAc7P//////////AP//////////2AwAAAAAAAAAAAAAAAAAAAAAAAAAAABY//////////8A//////////wwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQ/////////wD/////////kAAAAAAAAAAAEHzQ/P/gmCAAAAAAAAAAAFz/////////AP////////wcAAAAAAAAACjg////////8CwAAAAAAAAgWP////////8A////////vAAAAAAAAAAI2P//////////yBRAcJjI8P///////////wD///////94AAAAAAAAAGD/////////////////////////////////AP///////0AAAAAAAAAAsP////////////////////////////////8A////////IAAAAAAAAADc/////////////////////////////////wD///////8AAAAAAAAAAP///////wAAAAAAAAAAAAAAAAD/////////AP///////wAAAAAAAAAA////////AAAAAAAAAAAAAAAAAP////////8A////////AAAAAAAAAAD///////8AAAAAAAAAAAAAAAAA/////////wD///////8gAAAAAAAAAOD//////wAAAAAAAAAAAAAAAAD/////////AP///////0AAAAAAAAAAtP//////AAAAAAAAAAAAAAAAAP////////8A////////cAAAAAAAAABw//////8AAAAAAAAAAAAAAAAA/////////wD///////+8AAAAAAAAABDs////////////AAAAAAAAAAD/////////AP////////wYAAAAAAAAADz0//////////AAAAAAAAAAAP////////8A/////////5AAAAAAAAAAACCY4P//3KhcCAAAAAAAAAAA/////////wD/////////+CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////AP//////////xAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIP////////8A////////////rAQAAAAAAAAAAAAAAAAAAAAAAAAAAGTw/////////wD/////////////vBQAAAAAAAAAAAAAAAAAAAAAADjI////////////AP//////////////8HAQAAAAAAAAAAAAAAAAAEiw//////////////8A//////////////////iwcEAgBAAABCA4aKDk/////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'H' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'I' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAP///////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAP///////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAP///////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAP///////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'J' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP///////////////////////////wAAAAAAAAAA//////////////8A////////////////////////////AAAAAAAAAAD//////////////wD///////////////////////////8AAAAAAAAAAP//////////////AP///////////////////////////wAAAAAAAAAA//////////////8A////////////////////////////AAAAAAAAAAD//////////////wD///////////////////////////8AAAAAAAAAAP//////////////AP///////////////////////////wAAAAAAAAAA//////////////8A////////////////////////////AAAAAAAAAAD//////////////wD///////////////////////////8AAAAAAAAAAP//////////////AP///////////////////////////wAAAAAAAAAA//////////////8A////////////////////////////AAAAAAAAAAD//////////////wD///////////////////////////8AAAAAAAAAAP//////////////AP///////////////////////////wAAAAAAAAAA//////////////8A////////////////////////////AAAAAAAAAAD//////////////wD///////////////////////////8AAAAAAAAAAP//////////////AP///////////////////////////wAAAAAAAAAA//////////////8A////////////////////////////AAAAAAAAAAj//////////////wD//////////+zMrIxwUDAQ//////wAAAAAAAAAIP//////////////AP//////////DAAAAAAAAADo////2AAAAAAAAAA0//////////////8A//////////8wAAAAAAAAAKj///+YAAAAAAAAAFj//////////////wD//////////2gAAAAAAAAAIND/yBgAAAAAAAAAkP//////////////AP//////////vAAAAAAAAAAAAAAAAAAAAAAAAADc//////////////8A////////////MAAAAAAAAAAAAAAAAAAAAAAAUP///////////////wD////////////EBAAAAAAAAAAAAAAAAAAAABjk////////////////AP////////////+sBAAAAAAAAAAAAAAAAAAY2P////////////////8A///////////////EMAAAAAAAAAAAAAAAVOj//////////////////wD/////////////////vHBAIAAAABg8fNT/////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'K' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD///////8AAAAAAAAAAP//////////wAQAAAAAAAAAAABw////////AP///////wAAAAAAAAAA/////////9AMAAAAAAAAAAAAcP////////8A////////AAAAAAAAAAD////////cGAAAAAAAAAAAAHD//////////wD///////8AAAAAAAAAAP//////6CgAAAAAAAAAAABs////////////AP///////wAAAAAAAAAA//////Q0AAAAAAAAAAAAVPz///////////8A////////AAAAAAAAAAD////8RAAAAAAAAAAAAFT8/////////////wD///////8AAAAAAAAAAP///1gAAAAAAAAAAABU/P//////////////AP///////wAAAAAAAAAA//9wAAAAAAAAAAAASPz///////////////8A////////AAAAAAAAAAD/jAAAAAAAAAAAADz0/////////////////wD///////8AAAAAAAAAAKQAAAAAAAAAAAA89P//////////////////AP///////wAAAAAAAAAABAAAAAAAAAAAFPT///////////////////8A////////AAAAAAAAAAAAAAAAAAAAAAAApP///////////////////wD///////8AAAAAAAAAAAAAAAAAAAAAAAAU8P//////////////////AP///////wAAAAAAAAAAAAAAAAAAAAAAAABk//////////////////8A////////AAAAAAAAAAAAAAAAAAAAAAAAAADE/////////////////wD///////8AAAAAAAAAAAAAAAAoEAAAAAAAACz8////////////////AP///////wAAAAAAAAAAAAAAGNiAAAAAAAAAAIj///////////////8A////////AAAAAAAAAAAAABjY//gYAAAAAAAACOD//////////////wD///////8AAAAAAAAAAAAY2P///5wAAAAAAAAASP//////////////AP///////wAAAAAAAAAAGNj//////CgAAAAAAAAAqP////////////8A////////AAAAAAAAAADI////////sAAAAAAAAAAc8P///////////wD///////8AAAAAAAAAAP//////////QAAAAAAAAABs////////////AP///////wAAAAAAAAAA///////////IAAAAAAAAAATI//////////8A////////AAAAAAAAAAD///////////9YAAAAAAAAADD8/////////wD///////8AAAAAAAAAAP///////////9wEAAAAAAAAAJD/////////AP///////wAAAAAAAAAA/////////////3AAAAAAAAAADOT///////8A////////AAAAAAAAAAD/////////////7BAAAAAAAAAAUP///////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'L' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'M' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A//////8AAAAAAAAAAAAAAHz//////3wAAAAAAAAAAAAAAP///////wD//////wAAAAAAAAAAAAAATP//////UAAAAAAAAAAAAAAA////////AP//////AAAAAAAAAAAAAAAc//////8cAAAAAAAAAAAAAAD///////8A//////8AAAAAAAAAAAAAAADw////8AAAAAAAAAAAAAAAAP///////wD//////wAAAAAAAAAAAAAAALz////AAAAAAAAAAAAAAAAA////////AP//////AAAAAAAAAAAAAAAAkP///5AAAAAAAAAAAAAAAAD///////8A//////8AAAAAAAAAAAAAAABc////ZAAAAAAAAAAAAAAAAP///////wD//////wAAAAAAAAAoAAAAADD///8wAAAAACQAAAAAAAAA////////AP//////AAAAAAAAAFwAAAAABPz//AgAAAAAXAAAAAAAAAD///////8A//////8AAAAAAAAAkAAAAAAA0P/UAAAAAACQAAAAAAAAAP///////wD//////wAAAAAAAADMAAAAAACg/6gAAAAAAMQAAAAAAAAA////////AP//////AAAAAAAAAPgEAAAAAHD/dAAAAAAE+AAAAAAAAAD///////8A//////8AAAAAAAAA/zQAAAAAQP9IAAAAADD/AAAAAAAAAP///////wD//////wAAAAAAAAD/bAAAAAAQ/xQAAAAAaP8AAAAAAAAA////////AP//////AAAAAAAAAP+gAAAAAADQAAAAAACc/wAAAAAAAAD///////8A//////8AAAAAAAAA/9QAAAAAAGgAAAAAAND/AAAAAAAAAP///////wD//////wAAAAAAAAD//wwAAAAAFAAAAAAM/P8AAAAAAAAA////////AP//////AAAAAAAAAP//RAAAAAAAAAAAADz//wAAAAAAAAD///////8A//////8AAAAAAAAA//94AAAAAAAAAAAAcP//AAAAAAAAAP///////wD//////wAAAAAAAAD//7AAAAAAAAAAAACo//8AAAAAAAAA////////AP//////AAAAAAAAAP//5AAAAAAAAAAAANz//wAAAAAAAAD///////8A//////8AAAAAAAAA////HAAAAAAAAAAQ////AAAAAAAAAP///////wD//////wAAAAAAAAD///9QAAAAAAAAAEz///8AAAAAAAAA////////AP//////AAAAAAAAAP///4gAAAAAAAAAfP///wAAAAAAAAD///////8A//////8AAAAAAAAA////vAAAAAAAAACw////AAAAAAAAAP///////wD//////wAAAAAAAAD////wAAAAAAAAAOz///8AAAAAAAAA////////AP//////AAAAAAAAAP////8sAAAAAAAc/////wAAAAAAAAD///////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'N' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////AAAAAAAAALD/////////////AAAAAAAAAP//////////AP////////8AAAAAAAAAFOj///////////8AAAAAAAAA//////////8A/////////wAAAAAAAAAASP///////////wAAAAAAAAD//////////wD/////////AAAAAAAAAAAAkP//////////AAAAAAAAAP//////////AP////////8AAAAAAAAAAAAI1P////////8AAAAAAAAA//////////8A/////////wAAAAAAAAAAAAAw+P///////wAAAAAAAAD//////////wD/////////AAAAAAAAAAAAAABw////////AAAAAAAAAP//////////AP////////8AAAAAAAAAAAAAAAC8//////8AAAAAAAAA//////////8A/////////wAAAAAAAAAAAAAAABzs/////wAAAAAAAAD//////////wD/////////AAAAAAAAAAAAAAAAAFD/////AAAAAAAAAP//////////AP////////8AAAAAAAAAAAAAAAAAAJz///8AAAAAAAAA//////////8A/////////wAAAAAAAAAUAAAAAAAADNz//wAAAAAAAAD//////////wD/////////AAAAAAAAALQAAAAAAAAANPz/AAAAAAAAAP//////////AP////////8AAAAAAAAA/2wAAAAAAAAAfP8AAAAAAAAA//////////8A/////////wAAAAAAAAD/+CwAAAAAAAAExAAAAAAAAAD//////////wD/////////AAAAAAAAAP//0AQAAAAAAAAgAAAAAAAAAP//////////AP////////8AAAAAAAAA////jAAAAAAAAAAAAAAAAAAA//////////8A/////////wAAAAAAAAD/////RAAAAAAAAAAAAAAAAAD//////////wD/////////AAAAAAAAAP/////kFAAAAAAAAAAAAAAAAP//////////AP////////8AAAAAAAAA//////+sAAAAAAAAAAAAAAAA//////////8A/////////wAAAAAAAAD///////9kAAAAAAAAAAAAAAD//////////wD/////////AAAAAAAAAP////////QkAAAAAAAAAAAAAP//////////AP////////8AAAAAAAAA/////////8wEAAAAAAAAAAAA//////////8A/////////wAAAAAAAAD//////////4QAAAAAAAAAAAD//////////wD/////////AAAAAAAAAP///////////DwAAAAAAAAAAP//////////AP////////8AAAAAAAAA////////////4BAAAAAAAAAA//////////8A/////////wAAAAAAAAD/////////////qAAAAAAAAAD//////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'O' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A///////////////////0qGw4HAAAABw4aKT0/////////////////wD////////////////wcAwAAAAAAAAAAAAAAAho6P//////////////AP//////////////uBQAAAAAAAAAAAAAAAAAAAAMoP////////////8A/////////////6AEAAAAAAAAAAAAAAAAAAAAAAAAkP///////////wD///////////+4BAAAAAAAAAAAAAAAAAAAAAAAAAAAoP//////////AP//////////8BQAAAAAAAAAAAAAAAAAAAAAAAAAAAAM5P////////8A//////////9wAAAAAAAAAAAsrPD/7KQsAAAAAAAAAABg/////////wD/////////+BAAAAAAAAAAUPj///////hQAAAAAAAAAAjs////////AP////////+sAAAAAAAAABDw//////////AYAAAAAAAAAKD///////8A/////////2wAAAAAAAAAdP///////////3wAAAAAAAAAYP///////wD/////////OAAAAAAAAAC4////////////xAAAAAAAAAAw////////AP////////8cAAAAAAAAAOD////////////oAAAAAAAAABT///////8A/////////wAAAAAAAAAA//////////////8AAAAAAAAAAP///////wD/////////AAAAAAAAAAD//////////////wAAAAAAAAAA////////AP////////8AAAAAAAAAAP/////////////8AAAAAAAAAAD///////8A/////////xwAAAAAAAAA5P///////////+AAAAAAAAAAHP///////wD/////////NAAAAAAAAAC8////////////uAAAAAAAAAA4////////AP////////9oAAAAAAAAAHj///////////98AAAAAAAAAGT///////8A/////////6gAAAAAAAAAGPD/////////+BgAAAAAAAAApP///////wD/////////9AwAAAAAAAAAUPz///////xcAAAAAAAAAAjs////////AP//////////cAAAAAAAAAAALKjs//CwOAAAAAAAAAAAYP////////8A///////////wFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzk/////////wD///////////+4BAAAAAAAAAAAAAAAAAAAAAAAAAAAoP//////////AP////////////+QAAAAAAAAAAAAAAAAAAAAAAAAAJD///////////8A//////////////+sEAAAAAAAAAAAAAAAAAAAAAyg/////////////wD////////////////oZAgAAAAAAAAAAAAAAARg4P//////////////AP//////////////////9KhsOCAAAAAUMFyc7P////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'P' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP///////////wAAAAAAAAAAAAAAAAAACCxguP////////////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAOOD//////////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAGOD/////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAARP////////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAxP///////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAAABo////////////AP///////////wAAAAAAAAAA////6JwMAAAAAAAAADD///////////8A////////////AAAAAAAAAAD//////6AAAAAAAAAADP///////////wD///////////8AAAAAAAAAAP//////9AAAAAAAAAAA////////////AP///////////wAAAAAAAAAA///////0AAAAAAAAAAD///////////8A////////////AAAAAAAAAAD//////5gAAAAAAAAAHP///////////wD///////////8AAAAAAAAAAP///9iICAAAAAAAAABI////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAJD///////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAI6P///////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAAIT/////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAABU/P////////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAIhPz//////////////wD///////////8AAAAAAAAAAAAAAAAABCRMkOz/////////////////AP///////////wAAAAAAAAAA//////////////////////////////8A////////////AAAAAAAAAAD//////////////////////////////wD///////////8AAAAAAAAAAP//////////////////////////////AP///////////wAAAAAAAAAA//////////////////////////////8A////////////AAAAAAAAAAD//////////////////////////////wD///////////8AAAAAAAAAAP//////////////////////////////AP///////////wAAAAAAAAAA//////////////////////////////8A////////////AAAAAAAAAAD//////////////////////////////wD///////////8AAAAAAAAAAP//////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'Q' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////SoaDQcAAAAHDhoqPT///////////////////8A//////////////BwDAAAAAAAAAAAAAAACHDo/////////////////wD///////////+4FAAAAAAAAAAAAAAAAAAAABCo////////////////AP//////////nAQAAAAAAAAAAAAAAAAAAAAAAACQ//////////////8A/////////7gEAAAAAAAAAAAAAAAAAAAAAAAAAACg/////////////wD////////wFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzo////////////AP///////3AAAAAAAAAAACyo8P/sqCwAAAAAAAAAAGT///////////8A///////4EAAAAAAAAABM+P///////FQAAAAAAAAACPT//////////wD//////7AAAAAAAAAAFPD/////////9BgAAAAAAAAApP//////////AP//////bAAAAAAAAAB4////////////fAAAAAAAAABk//////////8A//////84AAAAAAAAALz///////////+8AAAAAAAAADT//////////wD//////xwAAAAAAAAA6P///////////+QAAAAAAAAAHP//////////AP//////AAAAAAAAAAD//////////////wAAAAAAAAAA//////////8A//////8AAAAAAAAAAP//////////////AAAAAAAAAAD//////////wD//////wAAAAAAAAAA/P////////////8AAAAAAAAAAP//////////AP//////GAAAAAAAAADg////////////4AAAAAAAAAAc//////////8A//////84AAAAAAAAALT////MJHTo//+8AAAAAAAAADT//////////wD//////2wAAAAAAAAAdP///2AAABCg/3wAAAAAAAAAZP//////////AP//////rAAAAAAAAAAY9P/sCAAAAABMGAAAAAAAAACk//////////8A///////4EAAAAAAAAABU/P+0OAAAAAAAAAAAAAAACPT//////////wD///////94AAAAAAAAAAA4sPD/gAAAAAAAAAAAAABk////////////AP////////AcAAAAAAAAAAAAAAAAAAAAAAAAAAAADOT///////////8A/////////7wEAAAAAAAAAAAAAAAAAAAAAAAAAACQ/////////////wD//////////6wEAAAAAAAAAAAAAAAAAAAAAAAAABSs////////////AP///////////7gUAAAAAAAAAAAAAAAAAAAAAAAAAABAwP////////8A//////////////BwDAAAAAAAAAAAAAAABAgAAAAAAAA8/////////wD////////////////0qGg0GAAAABgwXJjkxBgAAAAAALD/////////AP//////////////////////////////////5DQAAAAk/P////////8A////////////////////////////////////+GwAAJD//////////wD//////////////////////////////////////8A49P//////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'R' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////wAAAAAAAAAAAAAAAAAAAAQgOGSk+P///////////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAcuP//////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAEsP////////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQ6P///////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADD///////////8A/////////wAAAAAAAAAA///////svDgAAAAAAAAACP///////////wD/////////AAAAAAAAAAD/////////7AAAAAAAAAAA////////////AP////////8AAAAAAAAAAP/////////cAAAAAAAAABD///////////8A/////////wAAAAAAAAAA//////DQoCQAAAAAAAAAQP///////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACU////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAIPj///////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAzU/////////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAA02P//////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAxctPz///////////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAEDY/////////////////wD/////////AAAAAAAAAAD/9LAsAAAAAAAAAAzc////////////////AP////////8AAAAAAAAAAP///+wkAAAAAAAAADD8//////////////8A/////////wAAAAAAAAAA/////8QAAAAAAAAAAJD//////////////wD/////////AAAAAAAAAAD//////1QAAAAAAAAAFPD/////////////AP////////8AAAAAAAAAAP//////3AQAAAAAAAAAgP////////////8A/////////wAAAAAAAAAA////////aAAAAAAAAAAM6P///////////wD/////////AAAAAAAAAAD////////oCAAAAAAAAABs////////////AP////////8AAAAAAAAAAP////////+AAAAAAAAAAATc//////////8A/////////wAAAAAAAAAA//////////AUAAAAAAAAAFj//////////wD/////////AAAAAAAAAAD//////////5AAAAAAAAAAAND/////////AP////////8AAAAAAAAAAP//////////+CQAAAAAAAAAQP////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'S' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP/////////////////8vHBEIAgAAAQgQHC8/P////////////////8A////////////////pCQAAAAAAAAAAAAAAAAcoP///////////////wD//////////////FwAAAAAAAAAAAAAAAAAAAAAXP//////////////AP////////////9oAAAAAAAAAAAAAAAAAAAAAAAAhP////////////8A////////////zAAAAAAAAAAAAAAAAAAAAAAAAAAI6P///////////wD///////////9cAAAAAAAAAAAAAAAAAAAAAAAAAACA////////////AP///////////xgAAAAAAAAAUOD/8KwkAAAAAAAAADj///////////8A////////////AAAAAAAAAAD0/////8wABCAgICxASP///////////wD///////////8MAAAAAAAAAMz/////////////////////////////AP///////////0AAAAAAAAAACFiQxPT///////////////////////8A////////////oAAAAAAAAAAAAAAAADBwtPT//////////////////wD////////////8QAAAAAAAAAAAAAAAAAAACFTA////////////////AP/////////////oOAAAAAAAAAAAAAAAAAAAAABM6P////////////8A///////////////4fAgAAAAAAAAAAAAAAAAAAAAY2P///////////wD/////////////////7IwwAAAAAAAAAAAAAAAAAAAo+P//////////AP/////////////////////koGw0BAAAAAAAAAAAAACU//////////8A///////////////////////////4uFgAAAAAAAAAADz//////////wD//////////2BgSEA0IBwA6P///////5QAAAAAAAAADP//////////AP//////////JAAAAAAAAACc/////////AAAAAAAAAAA//////////8A//////////9YAAAAAAAAACDo///////AAAAAAAAAABT//////////wD//////////6QAAAAAAAAAACCk7P/snBQAAAAAAAAAUP//////////AP//////////+BAAAAAAAAAAAAAAAAAAAAAAAAAAAACs//////////8A////////////kAAAAAAAAAAAAAAAAAAAAAAAAAAAOP///////////wD////////////8RAAAAAAAAAAAAAAAAAAAAAAAABjc////////////AP/////////////0PAAAAAAAAAAAAAAAAAAAAAAg2P////////////8A///////////////8hBQAAAAAAAAAAAAAAAAMdPT//////////////wD/////////////////+LRwSCAMAAAAHDhoqPT/////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'T' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'U' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////JAAAAAAAAADk/////////+gAAAAAAAAAHP//////////AP////////9MAAAAAAAAAJz/////////nAAAAAAAAABE//////////8A/////////4gAAAAAAAAAHOj//////+ggAAAAAAAAAHz//////////wD/////////0AAAAAAAAAAAIJzs/+ykIAAAAAAAAAAA0P//////////AP//////////QAAAAAAAAAAAAAAAAAAAAAAAAAAAAED///////////8A///////////IBAAAAAAAAAAAAAAAAAAAAAAAAAAE0P///////////wD///////////+YAAAAAAAAAAAAAAAAAAAAAAAAAJj/////////////AP////////////+UBAAAAAAAAAAAAAAAAAAAAASU//////////////8A///////////////IPAAAAAAAAAAAAAAAAAAwyP///////////////wD/////////////////0IxYOCAIAAAEIEiAyP//////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'V' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD//////zAAAAAAAAAAYP//////////////ZAAAAAAAAAAw////////AP//////kAAAAAAAAAAU/P////////////8UAAAAAAAAAJD///////8A///////oBAAAAAAAAADE////////////xAAAAAAAAAAE7P///////wD///////9MAAAAAAAAAHD///////////94AAAAAAAAAEz/////////AP///////6gAAAAAAAAAJP///////////yQAAAAAAAAArP////////8A////////+BAAAAAAAAAA1P/////////YAAAAAAAAABT4/////////wD/////////aAAAAAAAAACE/////////4QAAAAAAAAAbP//////////AP/////////EAAAAAAAAADT/////////OAAAAAAAAADM//////////8A//////////8kAAAAAAAAAOT//////+QAAAAAAAAAKP///////////wD//////////4QAAAAAAAAAmP//////nAAAAAAAAACI////////////AP//////////5AAAAAAAAABE//////9EAAAAAAAABOT///////////8A////////////QAAAAAAAAAT0////9AgAAAAAAABI/////////////wD///////////+gAAAAAAAAAKT///+kAAAAAAAAAKj/////////////AP////////////QIAAAAAAAAXP///1wAAAAAAAAM+P////////////8A/////////////1wAAAAAAAAM+P/8DAAAAAAAAGT//////////////wD/////////////vAAAAAAAAAC8/7wAAAAAAAAAxP//////////////AP//////////////HAAAAAAAAGj/aAAAAAAAACT///////////////8A//////////////94AAAAAAAAHP8cAAAAAAAAhP///////////////wD//////////////9gAAAAAAAAAkAAAAAAAAADk////////////////AP///////////////zgAAAAAAAAQAAAAAAAAQP////////////////8A////////////////lAAAAAAAAAAAAAAAAACg/////////////////wD////////////////sCAAAAAAAAAAAAAAADPT/////////////////AP////////////////9QAAAAAAAAAAAAAABg//////////////////8A/////////////////7AAAAAAAAAAAAAAAMD//////////////////wD//////////////////BQAAAAAAAAAAAAc////////////////////AP//////////////////cAAAAAAAAAAAAHz///////////////////8A///////////////////MAAAAAAAAAAAA3P///////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'W' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A//8cAAAAAAAAALz/////4AAAAAAAAAAA6P////+8AAAAAAAAABz//wD//1QAAAAAAAAAjP////+gAAAAAAAAAACo/////4wAAAAAAAAAUP//AP//jAAAAAAAAABU/////2AAAAAAAAAAAGj/////VAAAAAAAAACM//8A///EAAAAAAAAACT/////IAAAAAAAAAAAKP////8kAAAAAAAAAMT//wD///gEAAAAAAAAAPD//+AAAAAAAAAAAAAA6P//8AAAAAAAAAAE9P//AP///zAAAAAAAAAAvP//oAAAAAAAAAAAAACo//+8AAAAAAAAADD///8A////bAAAAAAAAACM//9gAAAAAAAAAAAAAGT//4wAAAAAAAAAaP///wD///+kAAAAAAAAAFT//yAAAAAAAAAAAAAAIP//VAAAAAAAAACc////AP///9gAAAAAAAAAJP/gAAAAAAAAAAAAAAAA4P8kAAAAAAAAANT///8A/////xAAAAAAAAAA8KAAAAAAAAAAAAAAAACg8AAAAAAAAAAQ/////wD/////TAAAAAAAAAC8YAAAAAAAAAAAAAAAAGC8AAAAAAAAAET/////AP////+AAAAAAAAAAIwgAAAAAAAAAAAAAAAAIIwAAAAAAAAAfP////8A/////7gAAAAAAAAANAAAAAAAACwwAAAAAAAANAAAAAAAAACw/////wD/////8AAAAAAAAAAAAAAAAAAAdHgAAAAAAAAAAAAAAAAAAOz/////AP//////KAAAAAAAAAAAAAAAAAC4vAAAAAAAAAAAAAAAAAAg//////8A//////9gAAAAAAAAAAAAAAAACPj4CAAAAAAAAAAAAAAAAFj//////wD//////5QAAAAAAAAAAAAAAABE//9IAAAAAAAAAAAAAAAAkP//////AP//////0AAAAAAAAAAAAAAAAIj//4wAAAAAAAAAAAAAAADI//////8A///////8DAAAAAAAAAAAAAAAzP//1AAAAAAAAAAAAAAABPj//////wD///////88AAAAAAAAAAAAABT/////GAAAAAAAAAAAAAA0////////AP///////3QAAAAAAAAAAAAAWP////9gAAAAAAAAAAAAAHD///////8A////////sAAAAAAAAAAAAACg/////6QAAAAAAAAAAAAApP///////wD////////kAAAAAAAAAAAAAOT/////6AAAAAAAAAAAAADc////////AP////////8cAAAAAAAAAAAo////////MAAAAAAAAAAAEP////////8A/////////1QAAAAAAAAAAHD///////94AAAAAAAAAABM/////////wD/////////jAAAAAAAAAAAtP///////7wAAAAAAAAAAID/////////AP/////////EAAAAAAAAAAT0////////+AgAAAAAAAAAuP////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'X' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD///////9UAAAAAAAAAKz///////////+sAAAAAAAAAFD/////////AP///////+QQAAAAAAAAFOT/////////8BwAAAAAAAAM5P////////8A/////////5gAAAAAAAAATP////////9kAAAAAAAAAJD//////////wD//////////0AAAAAAAAAAoP//////wAAAAAAAAAA0/P//////////AP//////////2AgAAAAAAAAQ4P////gkAAAAAAAABMz///////////8A////////////iAAAAAAAAABA////dAAAAAAAAABw/////////////wD////////////8MAAAAAAAAACU/9AEAAAAAAAAHPD/////////////AP/////////////IBAAAAAAAAAzYMAAAAAAAAACs//////////////8A//////////////90AAAAAAAAABAAAAAAAAAATP///////////////wD///////////////QgAAAAAAAAAAAAAAAAAAzg////////////////AP///////////////7wAAAAAAAAAAAAAAAAAjP////////////////8A/////////////////2AAAAAAAAAAAAAAADD8/////////////////wD/////////////////7BQAAAAAAAAAAAAEyP//////////////////AP/////////////////gDAAAAAAAAAAAAAjY//////////////////8A/////////////////0AAAAAAAAAAAAAAADj8/////////////////wD///////////////+UAAAAAAAAAAAAAAAAAJD/////////////////AP//////////////4AwAAAAAAAAAAAAAAAAADOD///////////////8A//////////////9AAAAAAAAAAAAAAAAAAAAAQP///////////////wD/////////////nAAAAAAAAAAAWAAAAAAAAAAAlP//////////////AP///////////+QQAAAAAAAAAGD/YAAAAAAAAAAM4P////////////8A////////////TAAAAAAAAAAs9P/0LAAAAAAAAABM/////////////wD//////////6AAAAAAAAAADNT////UDAAAAAAAAACg////////////AP/////////kEAAAAAAAAACg//////+gAAAAAAAAABDk//////////8A/////////0wAAAAAAAAAYP////////9gAAAAAAAAAEz//////////wD///////+oAAAAAAAAACz0//////////QsAAAAAAAAAKT/////////AP//////7BQAAAAAAAAM1P///////////9QMAAAAAAAAFOz///////8A//////9UAAAAAAAAAKD//////////////6AAAAAAAAAAVP///////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'Y' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP///////1QAAAAAAAAAAGj//////////2gAAAAAAAAAAFT///////8A////////5BAAAAAAAAAAAMT////////EAAAAAAAAAAAQ5P///////wD/////////mAAAAAAAAAAAKPj/////+CgAAAAAAAAAAJj/////////AP//////////PAAAAAAAAAAAgP////+AAAAAAAAAAAA8//////////8A///////////YCAAAAAAAAAAE2P//2AQAAAAAAAAACNj//////////wD///////////+AAAAAAAAAAAA4//84AAAAAAAAAACA////////////AP////////////woAAAAAAAAAACUlAAAAAAAAAAAKPz///////////8A/////////////8gAAAAAAAAAABAQAAAAAAAAAADI/////////////wD//////////////2wAAAAAAAAAAAAAAAAAAAAAbP//////////////AP//////////////8BwAAAAAAAAAAAAAAAAAABzw//////////////8A////////////////tAAAAAAAAAAAAAAAAAAAtP///////////////wD/////////////////VAAAAAAAAAAAAAAAAFT/////////////////AP/////////////////oEAAAAAAAAAAAAAAQ6P////////////////8A//////////////////+cAAAAAAAAAAAAAJz//////////////////wD///////////////////9AAAAAAAAAAABA////////////////////AP///////////////////9gAAAAAAAAAANj///////////////////8A/////////////////////wAAAAAAAAAA/////////////////////wD/////////////////////AAAAAAAAAAD/////////////////////AP////////////////////8AAAAAAAAAAP////////////////////8A/////////////////////wAAAAAAAAAA/////////////////////wD/////////////////////AAAAAAAAAAD/////////////////////AP////////////////////8AAAAAAAAAAP////////////////////8A/////////////////////wAAAAAAAAAA/////////////////////wD/////////////////////AAAAAAAAAAD/////////////////////AP////////////////////8AAAAAAAAAAP////////////////////8A/////////////////////wAAAAAAAAAA/////////////////////wD/////////////////////AAAAAAAAAAD/////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'Z' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAQ//////////////8A/////////////////////////1AAAAAAAAAABLz//////////////wD///////////////////////98AAAAAAAAAACY////////////////AP//////////////////////pAAAAAAAAAAAaP////////////////8A/////////////////////8QIAAAAAAAAAET8/////////////////wD////////////////////gGAAAAAAAAAAo9P//////////////////AP//////////////////9CwAAAAAAAAAFNz///////////////////8A//////////////////xMAAAAAAAAAATA/////////////////////wD/////////////////eAAAAAAAAAAAnP//////////////////////AP///////////////5wAAAAAAAAAAHT///////////////////////8A///////////////ABAAAAAAAAABM/P///////////////////////wD/////////////3BQAAAAAAAAALPT/////////////////////////AP////////////QoAAAAAAAAABjg//////////////////////////8A///////////8SAAAAAAAAAAExP///////////////////////////wD//////////2wAAAAAAAAAAKD/////////////////////////////AP////////+YAAAAAAAAAAB8//////////////////////////////8A/////////wQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),		);	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** mcp_reports* Handling the reports queue* @package mcp*/class mcp_reports{	var $p_master;	var $u_action;	function mcp_reports(&$p_master)	{		$this->p_master = &$p_master;	}	function main($id, $mode)	{		global $auth, $db, $user, $template, $cache;		global $config, $phpbb_root_path, $phpEx, $action;		include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);		$forum_id = request_var('f', 0);		$start = request_var('start', 0);		$this->page_title = 'MCP_REPORTS';		switch ($action)		{			case 'close':			case 'delete':				include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);				$report_id_list = request_var('report_id_list', array(0));				if (!sizeof($report_id_list))				{					trigger_error('NO_REPORT_SELECTED');				}				close_report($report_id_list, $mode, $action);			break;		}		switch ($mode)		{			case 'report_details':				$user->add_lang(array('posting', 'viewforum', 'viewtopic'));				$post_id = request_var('p', 0);				// closed reports are accessed by report id				$report_id = request_var('r', 0);				$sql = 'SELECT r.post_id, r.user_id, r.report_id, r.report_closed, report_time, r.report_text, rr.reason_title, rr.reason_description, u.username, u.username_clean, u.user_colour					FROM ' . REPORTS_TABLE . ' r, ' . REPORTS_REASONS_TABLE . ' rr, ' . USERS_TABLE . ' u					WHERE ' . (($report_id) ? 'r.report_id = ' . $report_id : "r.post_id = $post_id") . '						AND rr.reason_id = r.reason_id						AND r.user_id = u.user_id						AND r.pm_id = 0					ORDER BY report_closed ASC';				$result = $db->sql_query_limit($sql, 1);				$report = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$report)				{					trigger_error('NO_REPORT');				}				if (!$report_id && $report['report_closed'])				{					trigger_error('REPORT_CLOSED');				}				$post_id = $report['post_id'];				$report_id = $report['report_id'];				$post_info = get_post_data(array($post_id), 'm_report', true);				if (!sizeof($post_info))				{					trigger_error('NO_REPORT_SELECTED');				}				$post_info = $post_info[$post_id];				$reason = array('title' => $report['reason_title'], 'description' => $report['reason_description']);				if (isset($user->lang['report_reasons']['TITLE'][strtoupper($reason['title'])]) && isset($user->lang['report_reasons']['DESCRIPTION'][strtoupper($reason['title'])]))				{					$reason['description'] = $user->lang['report_reasons']['DESCRIPTION'][strtoupper($reason['title'])];					$reason['title'] = $user->lang['report_reasons']['TITLE'][strtoupper($reason['title'])];				}				if (topic_review($post_info['topic_id'], $post_info['forum_id'], 'topic_review', 0, false))				{					$template->assign_vars(array(						'S_TOPIC_REVIEW'	=> true,						'S_BBCODE_ALLOWED'	=> $post_info['enable_bbcode'],						'TOPIC_TITLE'		=> $post_info['topic_title'])					);				}				$topic_tracking_info = $extensions = $attachments = array();				// Get topic tracking info				if ($config['load_db_lastread'])				{					$tmp_topic_data = array($post_info['topic_id'] => $post_info);					$topic_tracking_info = get_topic_tracking($post_info['forum_id'], $post_info['topic_id'], $tmp_topic_data, array($post_info['forum_id'] => $post_info['forum_mark_time']));					unset($tmp_topic_data);				}				else				{					$topic_tracking_info = get_complete_topic_tracking($post_info['forum_id'], $post_info['topic_id']);				}				$post_unread = (isset($topic_tracking_info[$post_info['topic_id']]) && $post_info['post_time'] > $topic_tracking_info[$post_info['topic_id']]) ? true : false;				// Process message, leave it uncensored				$message = $post_info['post_text'];				if ($post_info['bbcode_bitfield'])				{					include_once($phpbb_root_path . 'includes/bbcode.' . $phpEx);					$bbcode = new bbcode($post_info['bbcode_bitfield']);					$bbcode->bbcode_second_pass($message, $post_info['bbcode_uid'], $post_info['bbcode_bitfield']);				}				$message = bbcode_nl2br($message);				$message = smiley_text($message);				$report['report_text'] = make_clickable(bbcode_nl2br($report['report_text']));				if ($post_info['post_attachment'] && $auth->acl_get('u_download') && $auth->acl_get('f_download', $post_info['forum_id']))				{					$sql = 'SELECT *						FROM ' . ATTACHMENTS_TABLE . '						WHERE post_msg_id = ' . $post_id . '							AND in_message = 0						ORDER BY filetime DESC';					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$attachments[] = $row;					}					$db->sql_freeresult($result);					if (sizeof($attachments))					{						$update_count = array();						parse_attachments($post_info['forum_id'], $message, $attachments, $update_count);					}					// Display not already displayed Attachments for this post, we already parsed them. ;)					if (!empty($attachments))					{						$template->assign_var('S_HAS_ATTACHMENTS', true);						foreach ($attachments as $attachment)						{							$template->assign_block_vars('attachment', array(								'DISPLAY_ATTACHMENT'	=> $attachment)							);						}					}				}				$template->assign_vars(array(					'S_MCP_REPORT'			=> true,					'S_CLOSE_ACTION'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports&amp;mode=report_details&amp;f=' . $post_info['forum_id'] . '&amp;p=' . $post_id),					'S_CAN_VIEWIP'			=> $auth->acl_get('m_info', $post_info['forum_id']),					'S_POST_REPORTED'		=> $post_info['post_reported'],					'S_POST_UNAPPROVED'		=> !$post_info['post_approved'],					'S_POST_LOCKED'			=> $post_info['post_edit_locked'],					'S_USER_NOTES'			=> true,					'U_EDIT'					=> ($auth->acl_get('m_edit', $post_info['forum_id'])) ? append_sid("{$phpbb_root_path}posting.$phpEx", "mode=edit&amp;f={$post_info['forum_id']}&amp;p={$post_info['post_id']}") : '',					'U_MCP_APPROVE'				=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue&amp;mode=approve_details&amp;f=' . $post_info['forum_id'] . '&amp;p=' . $post_id),					'U_MCP_REPORT'				=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports&amp;mode=report_details&amp;f=' . $post_info['forum_id'] . '&amp;p=' . $post_id),					'U_MCP_REPORTER_NOTES'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $report['user_id']),					'U_MCP_USER_NOTES'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $post_info['user_id']),					'U_MCP_WARN_REPORTER'		=> ($auth->acl_get('m_warn')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=warn&amp;mode=warn_user&amp;u=' . $report['user_id']) : '',					'U_MCP_WARN_USER'			=> ($auth->acl_get('m_warn')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=warn&amp;mode=warn_user&amp;u=' . $post_info['user_id']) : '',					'U_VIEW_FORUM'				=> append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $post_info['forum_id']),					'U_VIEW_POST'				=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $post_info['forum_id'] . '&amp;p=' . $post_info['post_id'] . '#p' . $post_info['post_id']),					'U_VIEW_TOPIC'				=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $post_info['forum_id'] . '&amp;t=' . $post_info['topic_id']),					'EDIT_IMG'				=> $user->img('icon_post_edit', $user->lang['EDIT_POST']),					'MINI_POST_IMG'			=> ($post_unread) ? $user->img('icon_post_target_unread', 'UNREAD_POST') : $user->img('icon_post_target', 'POST'),					'UNAPPROVED_IMG'		=> $user->img('icon_topic_unapproved', $user->lang['POST_UNAPPROVED']),					'RETURN_REPORTS'			=> sprintf($user->lang['RETURN_REPORTS'], '<a href="' . append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports' . (($post_info['post_reported']) ? '&amp;mode=reports' : '&amp;mode=reports_closed') . '&amp;start=' . $start . '&amp;f=' . $post_info['forum_id']) . '">', '</a>'),					'REPORTED_IMG'				=> $user->img('icon_topic_reported', $user->lang['POST_REPORTED']),					'REPORT_DATE'				=> $user->format_date($report['report_time']),					'REPORT_ID'					=> $report_id,					'REPORT_REASON_TITLE'		=> $reason['title'],					'REPORT_REASON_DESCRIPTION'	=> $reason['description'],					'REPORT_TEXT'				=> $report['report_text'],					'POST_AUTHOR_FULL'		=> get_username_string('full', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),					'POST_AUTHOR_COLOUR'	=> get_username_string('colour', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),					'POST_AUTHOR'			=> get_username_string('username', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),					'U_POST_AUTHOR'			=> get_username_string('profile', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),					'REPORTER_FULL'				=> get_username_string('full', $report['user_id'], $report['username'], $report['user_colour']),					'REPORTER_COLOUR'			=> get_username_string('colour', $report['user_id'], $report['username'], $report['user_colour']),					'REPORTER_NAME'				=> get_username_string('username', $report['user_id'], $report['username'], $report['user_colour']),					'U_VIEW_REPORTER_PROFILE'	=> get_username_string('profile', $report['user_id'], $report['username'], $report['user_colour']),					'POST_PREVIEW'			=> $message,					'POST_SUBJECT'			=> ($post_info['post_subject']) ? $post_info['post_subject'] : $user->lang['NO_SUBJECT'],					'POST_DATE'				=> $user->format_date($post_info['post_time']),					'POST_IP'				=> $post_info['poster_ip'],					'POST_IPADDR'			=> ($auth->acl_get('m_info', $post_info['forum_id']) && request_var('lookup', '')) ? @gethostbyaddr($post_info['poster_ip']) : '',					'POST_ID'				=> $post_info['post_id'],					'U_LOOKUP_IP'			=> ($auth->acl_get('m_info', $post_info['forum_id'])) ? $this->u_action . '&amp;r=' . $report_id . '&amp;p=' . $post_id . '&amp;f=' . $forum_id . '&amp;lookup=' . $post_info['poster_ip'] . '#ip' : '',				));				$this->tpl_name = 'mcp_post';			break;			case 'reports':			case 'reports_closed':				$topic_id = request_var('t', 0);				$forum_info = array();				$forum_list_reports = get_forum_list('m_report', false, true);				$forum_list_read = array_flip(get_forum_list('f_read', true, true)); // Flipped so we can isset() the forum IDs				// Remove forums we cannot read				foreach ($forum_list_reports as $k => $forum_data)				{					if (!isset($forum_list_read[$forum_data['forum_id']]))					{						unset($forum_list_reports[$k]);					}				}				unset($forum_list_read);				if ($topic_id)				{					$topic_info = get_topic_data(array($topic_id));					if (!sizeof($topic_info))					{						trigger_error('TOPIC_NOT_EXIST');					}					if ($forum_id != $topic_info[$topic_id]['forum_id'])					{						$topic_id = 0;					}					else					{						$topic_info = $topic_info[$topic_id];						$forum_id = (int) $topic_info['forum_id'];					}				}				$forum_list = array();				if (!$forum_id)				{					foreach ($forum_list_reports as $row)					{						$forum_list[] = $row['forum_id'];					}					if (!sizeof($forum_list))					{						trigger_error('NOT_MODERATOR');					}					$global_id = $forum_list[0];					$sql = 'SELECT SUM(forum_topics) as sum_forum_topics						FROM ' . FORUMS_TABLE . '						WHERE ' . $db->sql_in_set('forum_id', $forum_list);					$result = $db->sql_query($sql);					$forum_info['forum_topics'] = (int) $db->sql_fetchfield('sum_forum_topics');					$db->sql_freeresult($result);				}				else				{					$forum_info = get_forum_data(array($forum_id), 'm_report');					if (!sizeof($forum_info))					{						trigger_error('NOT_MODERATOR');					}					$forum_info = $forum_info[$forum_id];					$forum_list = array($forum_id);					$global_id = $forum_id;				}				$forum_list[] = 0;				$forum_data = array();				$forum_options = '<option value="0"' . (($forum_id == 0) ? ' selected="selected"' : '') . '>' . $user->lang['ALL_FORUMS'] . '</option>';				foreach ($forum_list_reports as $row)				{					$forum_options .= '<option value="' . $row['forum_id'] . '"' . (($forum_id == $row['forum_id']) ? ' selected="selected"' : '') . '>' . str_repeat('&nbsp; &nbsp;', $row['padding']) . $row['forum_name'] . '</option>';					$forum_data[$row['forum_id']] = $row;				}				unset($forum_list_reports);				$sort_days = $total = 0;				$sort_key = $sort_dir = '';				$sort_by_sql = $sort_order_sql = array();				mcp_sorting($mode, $sort_days, $sort_key, $sort_dir, $sort_by_sql, $sort_order_sql, $total, $forum_id, $topic_id);				$forum_topics = ($total == -1) ? $forum_info['forum_topics'] : $total;				$limit_time_sql = ($sort_days) ? 'AND r.report_time >= ' . (time() - ($sort_days * 86400)) : '';				if ($mode == 'reports')				{					$report_state = 'AND p.post_reported = 1 AND r.report_closed = 0';				}				else				{					$report_state = 'AND r.report_closed = 1';				}				$sql = 'SELECT r.report_id					FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . ' t, ' . REPORTS_TABLE . ' r ' . (($sort_order_sql[0] == 'u') ? ', ' . USERS_TABLE . ' u' : '') . (($sort_order_sql[0] == 'r') ? ', ' . USERS_TABLE . ' ru' : '') . '					WHERE ' . $db->sql_in_set('p.forum_id', $forum_list) . "						$report_state						AND r.post_id = p.post_id						" . (($sort_order_sql[0] == 'u') ? 'AND u.user_id = p.poster_id' : '') . '						' . (($sort_order_sql[0] == 'r') ? 'AND ru.user_id = r.user_id' : '') . '						' . (($topic_id) ? 'AND p.topic_id = ' . $topic_id : '') . "						AND t.topic_id = p.topic_id						AND r.pm_id = 0						$limit_time_sql					ORDER BY $sort_order_sql";				$result = $db->sql_query_limit($sql, $config['topics_per_page'], $start);				$i = 0;				$report_ids = array();				while ($row = $db->sql_fetchrow($result))				{					$report_ids[] = $row['report_id'];					$row_num[$row['report_id']] = $i++;				}				$db->sql_freeresult($result);				if (sizeof($report_ids))				{					$sql = 'SELECT t.forum_id, t.topic_id, t.topic_title, p.post_id, p.post_subject, p.post_username, p.poster_id, p.post_time, u.username, u.username_clean, u.user_colour, r.user_id as reporter_id, ru.username as reporter_name, ru.user_colour as reporter_colour, r.report_time, r.report_id						FROM ' . REPORTS_TABLE . ' r, ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . ' t, ' . USERS_TABLE . ' u, ' . USERS_TABLE . ' ru						WHERE ' . $db->sql_in_set('r.report_id', $report_ids) . '							AND t.topic_id = p.topic_id							AND r.post_id = p.post_id							AND u.user_id = p.poster_id							AND ru.user_id = r.user_id							AND r.pm_id = 0						ORDER BY ' . $sort_order_sql;					$result = $db->sql_query($sql);					$report_data = $rowset = array();					while ($row = $db->sql_fetchrow($result))					{						$global_topic = ($row['forum_id']) ? false : true;						if ($global_topic)						{							$row['forum_id'] = $global_id;						}						$template->assign_block_vars('postrow', array(							'U_VIEWFORUM'				=> (!$global_topic) ? append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $row['forum_id']) : '',							'U_VIEWPOST'				=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $row['forum_id'] . '&amp;p=' . $row['post_id']) . '#p' . $row['post_id'],							'U_VIEW_DETAILS'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=reports&amp;start=$start&amp;mode=report_details&amp;f={$row['forum_id']}&amp;r={$row['report_id']}"),							'POST_AUTHOR_FULL'		=> get_username_string('full', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),							'POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),							'POST_AUTHOR'			=> get_username_string('username', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),							'U_POST_AUTHOR'			=> get_username_string('profile', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),							'REPORTER_FULL'			=> get_username_string('full', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),							'REPORTER_COLOUR'		=> get_username_string('colour', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),							'REPORTER'				=> get_username_string('username', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),							'U_REPORTER'			=> get_username_string('profile', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),							'FORUM_NAME'	=> (!$global_topic) ? $forum_data[$row['forum_id']]['forum_name'] : $user->lang['GLOBAL_ANNOUNCEMENT'],							'POST_ID'		=> $row['post_id'],							'POST_SUBJECT'	=> ($row['post_subject']) ? $row['post_subject'] : $user->lang['NO_SUBJECT'],							'POST_TIME'		=> $user->format_date($row['post_time']),							'REPORT_ID'		=> $row['report_id'],							'REPORT_TIME'	=> $user->format_date($row['report_time']),							'TOPIC_TITLE'	=> $row['topic_title'])						);					}					$db->sql_freeresult($result);					unset($report_ids, $row);				}				// Now display the page				$template->assign_vars(array(					'L_EXPLAIN'				=> ($mode == 'reports') ? $user->lang['MCP_REPORTS_OPEN_EXPLAIN'] : $user->lang['MCP_REPORTS_CLOSED_EXPLAIN'],					'L_TITLE'				=> ($mode == 'reports') ? $user->lang['MCP_REPORTS_OPEN'] : $user->lang['MCP_REPORTS_CLOSED'],					'L_ONLY_TOPIC'			=> ($topic_id) ? sprintf($user->lang['ONLY_TOPIC'], $topic_info['topic_title']) : '',					'S_MCP_ACTION'			=> $this->u_action,					'S_FORUM_OPTIONS'		=> $forum_options,					'S_CLOSED'				=> ($mode == 'reports_closed') ? true : false,					'PAGINATION'			=> generate_pagination($this->u_action . "&amp;f=$forum_id&amp;t=$topic_id&amp;st=$sort_days&amp;sk=$sort_key&amp;sd=$sort_dir", $total, $config['topics_per_page'], $start),					'PAGE_NUMBER'			=> on_page($total, $config['topics_per_page'], $start),					'TOPIC_ID'				=> $topic_id,					'TOTAL'					=> $total,					'TOTAL_REPORTS'			=> ($total == 1) ? $user->lang['LIST_REPORT'] : sprintf($user->lang['LIST_REPORTS'], $total),					)				);				$this->tpl_name = 'mcp_reports';			break;		}	}}/*** Closes a report*/function close_report($report_id_list, $mode, $action, $pm = false){	global $db, $template, $user, $config, $auth;	global $phpEx, $phpbb_root_path;	$pm_where = ($pm) ? ' AND r.post_id = 0 ' : ' AND r.pm_id = 0 ';	$id_column = ($pm) ? 'pm_id' : 'post_id';	$module = ($pm) ? 'pm_reports' : 'reports';	$pm_prefix = ($pm) ? 'PM_' : '';	$sql = "SELECT r.$id_column		FROM " . REPORTS_TABLE . ' r		WHERE ' . $db->sql_in_set('r.report_id', $report_id_list) . $pm_where;	$result = $db->sql_query($sql);	$post_id_list = array();	while ($row = $db->sql_fetchrow($result))	{		$post_id_list[] = $row[$id_column];	}	$post_id_list = array_unique($post_id_list);	if ($pm)	{		if (!$auth->acl_getf_global('m_report'))		{			trigger_error('NOT_AUTHORISED');		}	}	else	{		if (!check_ids($post_id_list, POSTS_TABLE, 'post_id', array('m_report')))		{			trigger_error('NOT_AUTHORISED');		}	}	if ($action == 'delete' && strpos($user->data['session_page'], 'mode=report_details') !== false)	{		$redirect = request_var('redirect', build_url(array('mode', 'r', 'quickmod')) . '&amp;mode=reports');	}	elseif ($action == 'delete' && strpos($user->data['session_page'], 'mode=pm_report_details') !== false)	{		$redirect = request_var('redirect', build_url(array('mode', 'r', 'quickmod')) . '&amp;mode=pm_reports');	}	else if ($action == 'close' && !request_var('r', 0))	{		$redirect = request_var('redirect', build_url(array('mode', 'p', 'quickmod')) . '&amp;mode=' . $module);	}	else	{		$redirect = request_var('redirect', build_url(array('quickmod')));	}	$success_msg = '';	$forum_ids = array();	$topic_ids = array();	$s_hidden_fields = build_hidden_fields(array(		'i'					=> $module,		'mode'				=> $mode,		'report_id_list'	=> $report_id_list,		'action'			=> $action,		'redirect'			=> $redirect)	);	if (confirm_box(true))	{		$post_info = ($pm) ? get_pm_data($post_id_list) : get_post_data($post_id_list, 'm_report');		$sql = "SELECT r.report_id, r.$id_column, r.report_closed, r.user_id, r.user_notify, u.username, u.username_clean, u.user_email, u.user_jabber, u.user_lang, u.user_notify_type			FROM " . REPORTS_TABLE . ' r, ' . USERS_TABLE . ' u			WHERE ' . $db->sql_in_set('r.report_id', $report_id_list) . '				' . (($action == 'close') ? 'AND r.report_closed = 0' : '') . '				AND r.user_id = u.user_id' . $pm_where;		$result = $db->sql_query($sql);		$reports = $close_report_posts = $close_report_topics = $notify_reporters = $report_id_list = array();		while ($report = $db->sql_fetchrow($result))		{			$reports[$report['report_id']] = $report;			$report_id_list[] = $report['report_id'];			if (!$report['report_closed'])			{				$close_report_posts[] = $report[$id_column];				if (!$pm)				{					$close_report_topics[] = $post_info[$report['post_id']]['topic_id'];				}			}			if ($report['user_notify'] && !$report['report_closed'])			{				$notify_reporters[$report['report_id']] = &$reports[$report['report_id']];			}		}		$db->sql_freeresult($result);		if (sizeof($reports))		{			$close_report_posts = array_unique($close_report_posts);			$close_report_topics = array_unique($close_report_topics);			if (!$pm && sizeof($close_report_posts))			{				// Get a list of topics that still contain reported posts				$sql = 'SELECT DISTINCT topic_id					FROM ' . POSTS_TABLE . '					WHERE ' . $db->sql_in_set('topic_id', $close_report_topics) . '						AND post_reported = 1						AND ' . $db->sql_in_set('post_id', $close_report_posts, true);				$result = $db->sql_query($sql);				$keep_report_topics = array();				while ($row = $db->sql_fetchrow($result))				{					$keep_report_topics[] = $row['topic_id'];				}				$db->sql_freeresult($result);				$close_report_topics = array_diff($close_report_topics, $keep_report_topics);				unset($keep_report_topics);			}			$db->sql_transaction('begin');			if ($action == 'close')			{				$sql = 'UPDATE ' . REPORTS_TABLE . '					SET report_closed = 1					WHERE ' . $db->sql_in_set('report_id', $report_id_list);			}			else			{				$sql = 'DELETE FROM ' . REPORTS_TABLE . '					WHERE ' . $db->sql_in_set('report_id', $report_id_list);			}			$db->sql_query($sql);			if (sizeof($close_report_posts))			{				if ($pm)				{					$sql = 'UPDATE ' . PRIVMSGS_TABLE . '						SET message_reported = 0						WHERE ' . $db->sql_in_set('msg_id', $close_report_posts);					$db->sql_query($sql);					if ($action == 'delete')					{						delete_pm(ANONYMOUS, $close_report_posts, PRIVMSGS_INBOX);					}				}				else				{					$sql = 'UPDATE ' . POSTS_TABLE . '						SET post_reported = 0						WHERE ' . $db->sql_in_set('post_id', $close_report_posts);					$db->sql_query($sql);					if (sizeof($close_report_topics))					{						$sql = 'UPDATE ' . TOPICS_TABLE . '							SET topic_reported = 0							WHERE ' . $db->sql_in_set('topic_id', $close_report_topics) . '								OR ' . $db->sql_in_set('topic_moved_id', $close_report_topics);						$db->sql_query($sql);					}				}			}			$db->sql_transaction('commit');		}		unset($close_report_posts, $close_report_topics);		foreach ($reports as $report)		{			if ($pm)			{				add_log('mod', 0, 0, 'LOG_PM_REPORT_' .  strtoupper($action) . 'D', $post_info[$report['pm_id']]['message_subject']);			}			else			{				add_log('mod', $post_info[$report['post_id']]['forum_id'], $post_info[$report['post_id']]['topic_id'], 'LOG_REPORT_' .  strtoupper($action) . 'D', $post_info[$report['post_id']]['post_subject']);			}		}		$messenger = new messenger();		// Notify reporters		if (sizeof($notify_reporters))		{			foreach ($notify_reporters as $report_id => $reporter)			{				if ($reporter['user_id'] == ANONYMOUS)				{					continue;				}				$post_id = $reporter[$id_column];				$messenger->template((($pm) ? 'pm_report_' : 'report_') . $action . 'd', $reporter['user_lang']);				$messenger->to($reporter['user_email'], $reporter['username']);				$messenger->im($reporter['user_jabber'], $reporter['username']);				if ($pm)				{					$messenger->assign_vars(array(						'USERNAME'		=> htmlspecialchars_decode($reporter['username']),						'CLOSER_NAME'	=> htmlspecialchars_decode($user->data['username']),						'PM_SUBJECT'	=> htmlspecialchars_decode(censor_text($post_info[$post_id]['message_subject'])),					));				}				else				{					$messenger->assign_vars(array(						'USERNAME'		=> htmlspecialchars_decode($reporter['username']),						'CLOSER_NAME'	=> htmlspecialchars_decode($user->data['username']),						'POST_SUBJECT'	=> htmlspecialchars_decode(censor_text($post_info[$post_id]['post_subject'])),						'TOPIC_TITLE'	=> htmlspecialchars_decode(censor_text($post_info[$post_id]['topic_title'])))					);				}				$messenger->send($reporter['user_notify_type']);			}		}		if (!$pm)		{			foreach ($post_info as $post)			{				$forum_ids[$post['forum_id']] = $post['forum_id'];				$topic_ids[$post['topic_id']] = $post['topic_id'];			}		}		unset($notify_reporters, $post_info, $reports);		$messenger->save_queue();		$success_msg = (sizeof($report_id_list) == 1) ? "{$pm_prefix}REPORT_" . strtoupper($action) . 'D_SUCCESS' : "{$pm_prefix}REPORTS_" . strtoupper($action) . 'D_SUCCESS';	}	else	{		confirm_box(false, $user->lang[strtoupper($action) . "_{$pm_prefix}REPORT" . ((sizeof($report_id_list) == 1) ? '' : 'S') . '_CONFIRM'], $s_hidden_fields);	}	$redirect = request_var('redirect', "index.$phpEx");	$redirect = reapply_sid($redirect);	if (!$success_msg)	{		redirect($redirect);	}	else	{		meta_refresh(3, $redirect);		$return_forum = '';		$return_topic = '';		if (!$pm)		{			if (sizeof($forum_ids) === 1)			{				$return_forum = sprintf($user->lang['RETURN_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . current($forum_ids)) . '">', '</a>') . '<br /><br />';			}			if (sizeof($topic_ids) === 1)			{				$return_topic = sprintf($user->lang['RETURN_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 't=' . current($topic_ids) . '&amp;f=' . current($forum_ids)) . '">', '</a>') . '<br /><br />';			}		}		trigger_error($user->lang[$success_msg] . '<br /><br />' . $return_forum . $return_topic . sprintf($user->lang['RETURN_PAGE'], "<a href=\"$redirect\">", '</a>'));	}}?>
<?php/**** acp_search [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ACP_SEARCH_INDEX_EXPLAIN'				=> 'Here you can manage the search backends indexes. Since you normally use only one backend you should delete all indexes that you do not make use of. After altering some of the search settings (e.g. the number of minimum/maximum chars) it might be worth recreating the index so it reflects those changes.',	'ACP_SEARCH_SETTINGS_EXPLAIN'			=> 'Here you can define what search backend will be used for indexing posts and performing searches. You can set various options that can influence how much processing these actions require. Some of these settings are the same for all search engine backends.',	'COMMON_WORD_THRESHOLD'					=> 'Common word threshold',	'COMMON_WORD_THRESHOLD_EXPLAIN'			=> 'Words which are contained in a greater percentage of all posts will be regarded as common. Common words are ignored in search queries. Set to zero to disable. Only takes effect if there are more than 100 posts. If you want words that are currently regarded as common to be reconsidered you have to recreate the index.',	'CONFIRM_SEARCH_BACKEND'				=> 'Are you sure you wish to switch to a different search backend? After changing the search backend you will have to create an index for the new search backend. If you dont plan on switching back to the old search backend you can also delete the old backends index in order to free system resources.',	'CONTINUE_DELETING_INDEX'				=> 'Continue previous index removal process',	'CONTINUE_DELETING_INDEX_EXPLAIN'		=> 'An index removal process has been started. In order to access the search index page you will have to complete it or cancel it.',	'CONTINUE_INDEXING'						=> 'Continue previous indexing process',	'CONTINUE_INDEXING_EXPLAIN'				=> 'An indexing process has been started. In order to access the search index page you will have to complete it or cancel it.',	'CREATE_INDEX'							=> 'Create index',	'DELETE_INDEX'							=> 'Delete index',	'DELETING_INDEX_IN_PROGRESS'			=> 'Deleting the index in progress',	'DELETING_INDEX_IN_PROGRESS_EXPLAIN'	=> 'The search backend is currently cleaning its index. This can take a few minutes.',	'FULLTEXT_MYSQL_INCOMPATIBLE_VERSION'	=> 'The MySQL fulltext backend can only be used with MySQL4 and above.',	'FULLTEXT_MYSQL_NOT_MYISAM'				=> 'MySQL fulltext indexes can only be used with MyISAM tables.',	'FULLTEXT_MYSQL_TOTAL_POSTS'			=> 'Total number of indexed posts',	'FULLTEXT_MYSQL_MBSTRING'				=> 'Support for non-latin UTF-8 characters using mbstring:',	'FULLTEXT_MYSQL_PCRE'					=> 'Support for non-latin UTF-8 characters using PCRE:',	'FULLTEXT_MYSQL_MBSTRING_EXPLAIN'		=> 'If PCRE does not have unicode character properties, the search backend will try to use mbstrings regular expression engine.',	'FULLTEXT_MYSQL_PCRE_EXPLAIN'			=> 'This search backend requires PCRE unicode character properties, only available in PHP 4.4, 5.1 and above, if you want to search for non-latin characters.',	'FULLTEXT_MYSQL_MIN_SEARCH_CHARS_EXPLAIN'	=> 'Words with at least this many characters will be indexed for searching. You or your host can only change this setting by changing the mysql configuration.',	'FULLTEXT_MYSQL_MAX_SEARCH_CHARS_EXPLAIN'	=> 'Words with no more than this many characters will be indexed for searching. You or your host can only change this setting by changing the mysql configuration.',	'GENERAL_SEARCH_SETTINGS'				=> 'General search settings',	'GO_TO_SEARCH_INDEX'					=> 'Go to search index page',	'INDEX_STATS'							=> 'Index statistics',	'INDEXING_IN_PROGRESS'					=> 'Indexing in progress',	'INDEXING_IN_PROGRESS_EXPLAIN'			=> 'The search backend is currently indexing all posts on the board. This can take from a few minutes to a few hours depending on your boards size.',	'LIMIT_SEARCH_LOAD'						=> 'Search page system load limit',	'LIMIT_SEARCH_LOAD_EXPLAIN'				=> 'If the 1 minute system load exceeds this value the search page will go offline, 1.0 equals ~100% utilisation of one processor. This only functions on UNIX based servers.',	'MAX_SEARCH_CHARS'						=> 'Max characters indexed by search',	'MAX_SEARCH_CHARS_EXPLAIN'				=> 'Words with no more than this many characters will be indexed for searching.',	'MAX_NUM_SEARCH_KEYWORDS'				=> 'Maximum number of allowed keywords',	'MAX_NUM_SEARCH_KEYWORDS_EXPLAIN'		=> 'Maximum number of words the user is able to search for. A value of 0 allows an unlimited number of words.',	'MIN_SEARCH_CHARS'						=> 'Min characters indexed by search',	'MIN_SEARCH_CHARS_EXPLAIN'				=> 'Words with at least this many characters will be indexed for searching.',	'MIN_SEARCH_AUTHOR_CHARS'				=> 'Min author name characters',	'MIN_SEARCH_AUTHOR_CHARS_EXPLAIN'		=> 'Users have to enter at least this many characters of the name when performing a wildcard author search. If the authors username is shorter than this number you can still search for the authors posts by entering the complete username.',	'PROGRESS_BAR'							=> 'Progress bar',	'SEARCH_GUEST_INTERVAL'					=> 'Guest search flood interval',	'SEARCH_GUEST_INTERVAL_EXPLAIN'			=> 'Number of seconds guests must wait between searches. If one guest searches all others have to wait until the time interval passed.',	'SEARCH_INDEX_CREATE_REDIRECT'			=> 'All posts up to post id %1$d have now been indexed, of which %2$d posts were within this step.<br />The current rate of indexing is approximately %3$.1f posts per second.<br />Indexing in progress',	'SEARCH_INDEX_DELETE_REDIRECT'			=> 'All posts up to post id %1$d have been removed from the search index.<br />Deleting in progress',	'SEARCH_INDEX_CREATED'					=> 'Successfully indexed all posts in the board database.',	'SEARCH_INDEX_REMOVED'					=> 'Successfully deleted the search index for this backend.',	'SEARCH_INTERVAL'						=> 'User search flood interval',	'SEARCH_INTERVAL_EXPLAIN'				=> 'Number of seconds users must wait between searches. This interval is checked independently for each user.',	'SEARCH_STORE_RESULTS'					=> 'Search result cache length',	'SEARCH_STORE_RESULTS_EXPLAIN'			=> 'Cached search results will expire after this time, in seconds. Set to 0 if you want to disable search cache.',	'SEARCH_TYPE'							=> 'Search backend',	'SEARCH_TYPE_EXPLAIN'					=> 'phpBB allows you to choose the backend that is used for searching text in post contents. By default the search will use phpBBs own fulltext search.',	'SWITCHED_SEARCH_BACKEND'				=> 'You switched the search backend. In order to use the new search backend you should make sure that there is an index for the backend you chose.',	'TOTAL_WORDS'							=> 'Total number of indexed words',	'TOTAL_MATCHES'							=> 'Total number of word to post relations indexed',	'YES_SEARCH'							=> 'Enable search facilities',	'YES_SEARCH_EXPLAIN'					=> 'Enables user facing search functionality including member search.',	'YES_SEARCH_UPDATE'						=> 'Enable fulltext updating',	'YES_SEARCH_UPDATE_EXPLAIN'				=> 'Updating of fulltext indexes when posting, overridden if search is disabled.',));?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** MCP Front Panel*/function mcp_front_view($id, $mode, $action){	global $phpEx, $phpbb_root_path, $config;	global $template, $db, $user, $auth, $module;	// Latest 5 unapproved	if ($module->loaded('queue'))	{		$forum_list = array_values(array_intersect(get_forum_list('f_read'), get_forum_list('m_approve')));		$post_list = array();		$forum_names = array();		$forum_id = request_var('f', 0);		$template->assign_var('S_SHOW_UNAPPROVED', (!empty($forum_list)) ? true : false);		if (!empty($forum_list))		{			$sql = 'SELECT COUNT(post_id) AS total				FROM ' . POSTS_TABLE . '				WHERE forum_id IN (0, ' . implode(', ', $forum_list) . ')					AND post_approved = 0';			$result = $db->sql_query($sql);			$total = (int) $db->sql_fetchfield('total');			$db->sql_freeresult($result);			if ($total)			{				$global_id = $forum_list[0];				$sql = 'SELECT forum_id, forum_name					FROM ' . FORUMS_TABLE . '					WHERE ' . $db->sql_in_set('forum_id', $forum_list);				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$forum_names[$row['forum_id']] = $row['forum_name'];				}				$db->sql_freeresult($result);				$sql = 'SELECT post_id					FROM ' . POSTS_TABLE . '					WHERE forum_id IN (0, ' . implode(', ', $forum_list) . ')						AND post_approved = 0					ORDER BY post_time DESC';				$result = $db->sql_query_limit($sql, 5);				while ($row = $db->sql_fetchrow($result))				{					$post_list[] = $row['post_id'];				}				$db->sql_freeresult($result);				if (empty($post_list))				{					$total = 0;				}			}			if ($total)			{				$sql = 'SELECT p.post_id, p.post_subject, p.post_time, p.poster_id, p.post_username, u.username, u.username_clean, u.user_colour, t.topic_id, t.topic_title, t.topic_first_post_id, p.forum_id					FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . ' t, ' . USERS_TABLE . ' u					WHERE ' . $db->sql_in_set('p.post_id', $post_list) . '						AND t.topic_id = p.topic_id						AND p.poster_id = u.user_id					ORDER BY p.post_time DESC';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$global_topic = ($row['forum_id']) ? false : true;					if ($global_topic)					{						$row['forum_id'] = $global_id;					}					$template->assign_block_vars('unapproved', array(						'U_POST_DETAILS'	=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue&amp;mode=approve_details&amp;f=' . $row['forum_id'] . '&amp;p=' . $row['post_id']),						'U_MCP_FORUM'		=> (!$global_topic) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main&amp;mode=forum_view&amp;f=' . $row['forum_id']) : '',						'U_MCP_TOPIC'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main&amp;mode=topic_view&amp;f=' . $row['forum_id'] . '&amp;t=' . $row['topic_id']),						'U_FORUM'			=> (!$global_topic) ? append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $row['forum_id']) : '',						'U_TOPIC'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $row['forum_id'] . '&amp;t=' . $row['topic_id']),						'AUTHOR_FULL'		=> get_username_string('full', $row['poster_id'], $row['username'], $row['user_colour']),						'AUTHOR'			=> get_username_string('username', $row['poster_id'], $row['username'], $row['user_colour']),						'AUTHOR_COLOUR'		=> get_username_string('colour', $row['poster_id'], $row['username'], $row['user_colour']),						'U_AUTHOR'			=> get_username_string('profile', $row['poster_id'], $row['username'], $row['user_colour']),						'FORUM_NAME'	=> (!$global_topic) ? $forum_names[$row['forum_id']] : $user->lang['GLOBAL_ANNOUNCEMENT'],						'POST_ID'		=> $row['post_id'],						'TOPIC_TITLE'	=> $row['topic_title'],						'SUBJECT'		=> ($row['post_subject']) ? $row['post_subject'] : $user->lang['NO_SUBJECT'],						'POST_TIME'		=> $user->format_date($row['post_time']))					);				}				$db->sql_freeresult($result);			}			$s_hidden_fields = build_hidden_fields(array(				'redirect'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main' . (($forum_id) ? '&amp;f=' . $forum_id : ''))			));			$template->assign_vars(array(				'S_HIDDEN_FIELDS'		=> $s_hidden_fields,				'S_MCP_QUEUE_ACTION'	=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=queue"),			));			if ($total == 0)			{				$template->assign_vars(array(					'L_UNAPPROVED_TOTAL'		=> $user->lang['UNAPPROVED_POSTS_ZERO_TOTAL'],					'S_HAS_UNAPPROVED_POSTS'	=> false)				);			}			else			{				$template->assign_vars(array(					'L_UNAPPROVED_TOTAL'		=> ($total == 1) ? $user->lang['UNAPPROVED_POST_TOTAL'] : sprintf($user->lang['UNAPPROVED_POSTS_TOTAL'], $total),					'S_HAS_UNAPPROVED_POSTS'	=> true)				);			}		}	}	// Latest 5 reported	if ($module->loaded('reports'))	{		$forum_list = array_values(array_intersect(get_forum_list('f_read'), get_forum_list('m_report')));		$template->assign_var('S_SHOW_REPORTS', (!empty($forum_list)) ? true : false);		if (!empty($forum_list))		{			$sql = 'SELECT COUNT(r.report_id) AS total				FROM ' . REPORTS_TABLE . ' r, ' . POSTS_TABLE . ' p				WHERE r.post_id = p.post_id					AND r.pm_id = 0					AND r.report_closed = 0					AND p.forum_id IN (0, ' . implode(', ', $forum_list) . ')';			$result = $db->sql_query($sql);			$total = (int) $db->sql_fetchfield('total');			$db->sql_freeresult($result);			if ($total)			{				$global_id = $forum_list[0];				$sql = $db->sql_build_query('SELECT', array(					'SELECT'	=> 'r.report_time, p.post_id, p.post_subject, p.post_time, u.username, u.username_clean, u.user_colour, u.user_id, u2.username as author_name, u2.username_clean as author_name_clean, u2.user_colour as author_colour, u2.user_id as author_id, t.topic_id, t.topic_title, f.forum_id, f.forum_name',					'FROM'		=> array(						REPORTS_TABLE			=> 'r',						REPORTS_REASONS_TABLE	=> 'rr',						TOPICS_TABLE			=> 't',						USERS_TABLE				=> array('u', 'u2'),						POSTS_TABLE				=> 'p'					),					'LEFT_JOIN'	=> array(						array(							'FROM'	=> array(FORUMS_TABLE => 'f'),							'ON'	=> 'f.forum_id = p.forum_id'						)					),					'WHERE'		=> 'r.post_id = p.post_id						AND r.pm_id = 0						AND r.report_closed = 0						AND r.reason_id = rr.reason_id						AND p.topic_id = t.topic_id						AND r.user_id = u.user_id						AND p.poster_id = u2.user_id						AND p.forum_id IN (0, ' . implode(', ', $forum_list) . ')',					'ORDER_BY'	=> 'p.post_time DESC'				));				$result = $db->sql_query_limit($sql, 5);				while ($row = $db->sql_fetchrow($result))				{					$global_topic = ($row['forum_id']) ? false : true;					if ($global_topic)					{						$row['forum_id'] = $global_id;					}					$template->assign_block_vars('report', array(						'U_POST_DETAILS'	=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'f=' . $row['forum_id'] . '&amp;p=' . $row['post_id'] . "&amp;i=reports&amp;mode=report_details"),						'U_MCP_FORUM'		=> (!$global_topic) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'f=' . $row['forum_id'] . "&amp;i=$id&amp;mode=forum_view") : '',						'U_MCP_TOPIC'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'f=' . $row['forum_id'] . '&amp;t=' . $row['topic_id'] . "&amp;i=$id&amp;mode=topic_view"),						'U_FORUM'			=> (!$global_topic) ? append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $row['forum_id']) : '',						'U_TOPIC'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $row['forum_id'] . '&amp;t=' . $row['topic_id']),						'REPORTER_FULL'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']),						'REPORTER'			=> get_username_string('username', $row['user_id'], $row['username'], $row['user_colour']),						'REPORTER_COLOUR'	=> get_username_string('colour', $row['user_id'], $row['username'], $row['user_colour']),						'U_REPORTER'		=> get_username_string('profile', $row['user_id'], $row['username'], $row['user_colour']),						'AUTHOR_FULL'		=> get_username_string('full', $row['author_id'], $row['author_name'], $row['author_colour']),						'AUTHOR'			=> get_username_string('username', $row['author_id'], $row['author_name'], $row['author_colour']),						'AUTHOR_COLOUR'		=> get_username_string('colour', $row['author_id'], $row['author_name'], $row['author_colour']),						'U_AUTHOR'			=> get_username_string('profile', $row['author_id'], $row['author_name'], $row['author_colour']),						'FORUM_NAME'	=> (!$global_topic) ? $row['forum_name'] : $user->lang['GLOBAL_ANNOUNCEMENT'],						'TOPIC_TITLE'	=> $row['topic_title'],						'SUBJECT'		=> ($row['post_subject']) ? $row['post_subject'] : $user->lang['NO_SUBJECT'],						'REPORT_TIME'	=> $user->format_date($row['report_time']),						'POST_TIME'		=> $user->format_date($row['post_time']),					));				}			}			if ($total == 0)			{				$template->assign_vars(array(					'L_REPORTS_TOTAL'	=>	$user->lang['REPORTS_ZERO_TOTAL'],					'S_HAS_REPORTS'		=>	false)				);			}			else			{				$template->assign_vars(array(					'L_REPORTS_TOTAL'	=> ($total == 1) ? $user->lang['REPORT_TOTAL'] : sprintf($user->lang['REPORTS_TOTAL'], $total),					'S_HAS_REPORTS'		=> true)				);			}		}	}	// Latest 5 reported PMs	if ($module->loaded('pm_reports') && $auth->acl_getf_global('m_report'))	{		$template->assign_var('S_SHOW_PM_REPORTS', true);		$user->add_lang(array('ucp'));		$sql = 'SELECT COUNT(r.report_id) AS total			FROM ' . REPORTS_TABLE . ' r, ' . PRIVMSGS_TABLE . ' p			WHERE r.post_id = 0				AND r.pm_id = p.msg_id				AND r.report_closed = 0';		$result = $db->sql_query($sql);		$total = (int) $db->sql_fetchfield('total');		$db->sql_freeresult($result);		if ($total)		{			include($phpbb_root_path . 'includes/functions_privmsgs.' . $phpEx);			$sql = $db->sql_build_query('SELECT', array(				'SELECT'	=> 'r.report_id, r.report_time, p.msg_id, p.message_subject, p.message_time, p.to_address, p.bcc_address, u.username, u.username_clean, u.user_colour, u.user_id, u2.username as author_name, u2.username_clean as author_name_clean, u2.user_colour as author_colour, u2.user_id as author_id',				'FROM'		=> array(					REPORTS_TABLE			=> 'r',					REPORTS_REASONS_TABLE	=> 'rr',					USERS_TABLE				=> array('u', 'u2'),					PRIVMSGS_TABLE				=> 'p'				),				'WHERE'		=> 'r.pm_id = p.msg_id					AND r.post_id = 0					AND r.report_closed = 0					AND r.reason_id = rr.reason_id					AND r.user_id = u.user_id					AND p.author_id = u2.user_id',				'ORDER_BY'	=> 'p.message_time DESC'			));			$result = $db->sql_query_limit($sql, 5);			$pm_by_id = $pm_list = array();			while ($row = $db->sql_fetchrow($result))			{				$pm_by_id[(int) $row['msg_id']] = $row;				$pm_list[] = (int) $row['msg_id'];			}			$address_list = get_recipient_strings($pm_by_id);			foreach ($pm_list as $message_id)			{				$row = $pm_by_id[$message_id];				$template->assign_block_vars('pm_report', array(					'U_PM_DETAILS'	=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'r=' . $row['report_id'] . "&amp;i=pm_reports&amp;mode=pm_report_details"),					'REPORTER_FULL'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']),					'REPORTER'			=> get_username_string('username', $row['user_id'], $row['username'], $row['user_colour']),					'REPORTER_COLOUR'	=> get_username_string('colour', $row['user_id'], $row['username'], $row['user_colour']),					'U_REPORTER'		=> get_username_string('profile', $row['user_id'], $row['username'], $row['user_colour']),					'PM_AUTHOR_FULL'		=> get_username_string('full', $row['author_id'], $row['author_name'], $row['author_colour']),					'PM_AUTHOR'			=> get_username_string('username', $row['author_id'], $row['author_name'], $row['author_colour']),					'PM_AUTHOR_COLOUR'		=> get_username_string('colour', $row['author_id'], $row['author_name'], $row['author_colour']),					'U_PM_AUTHOR'			=> get_username_string('profile', $row['author_id'], $row['author_name'], $row['author_colour']),					'PM_SUBJECT'		=> $row['message_subject'],					'REPORT_TIME'		=> $user->format_date($row['report_time']),					'PM_TIME'			=> $user->format_date($row['message_time']),					'RECIPIENTS'		=> implode(', ', $address_list[$row['msg_id']]),				));			}		}		if ($total == 0)		{			$template->assign_vars(array(				'L_PM_REPORTS_TOTAL'	=>	$user->lang['PM_REPORTS_ZERO_TOTAL'],				'S_HAS_PM_REPORTS'		=>	false)			);		}		else		{			$template->assign_vars(array(				'L_PM_REPORTS_TOTAL'	=> ($total == 1) ? $user->lang['PM_REPORT_TOTAL'] : sprintf($user->lang['PM_REPORTS_TOTAL'], $total),				'S_HAS_PM_REPORTS'		=> true)			);		}	}	// Latest 5 logs	if ($module->loaded('logs'))	{		$forum_list = array_values(array_intersect(get_forum_list('f_read'), get_forum_list('m_')));		if (!empty($forum_list))		{			// Add forum_id 0 for global announcements			$forum_list[] = 0;			$log_count = false;			$log = array();			view_log('mod', $log, $log_count, 5, 0, $forum_list);			foreach ($log as $row)			{				$template->assign_block_vars('log', array(					'USERNAME'		=> $row['username_full'],					'IP'			=> $row['ip'],					'TIME'			=> $user->format_date($row['time']),					'ACTION'		=> $row['action'],					'U_VIEW_TOPIC'	=> (!empty($row['viewtopic'])) ? $row['viewtopic'] : '',					'U_VIEWLOGS'	=> (!empty($row['viewlogs'])) ? $row['viewlogs'] : '')				);			}		}		$template->assign_vars(array(			'S_SHOW_LOGS'	=> (!empty($forum_list)) ? true : false,			'S_HAS_LOGS'	=> (!empty($log)) ? true : false)		);	}	$template->assign_var('S_MCP_ACTION', append_sid("{$phpbb_root_path}mcp.$phpEx"));	make_jumpbox(append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main&amp;mode=forum_view'), 0, false, 'm_', true);}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ucp_activate* User activation* @package ucp*/class ucp_activate{	var $u_action;	function main($id, $mode)	{		global $config, $phpbb_root_path, $phpEx;		global $db, $user, $auth, $template;		$user_id = request_var('u', 0);		$key = request_var('k', '');		$sql = 'SELECT user_id, username, user_type, user_email, user_newpasswd, user_lang, user_notify_type, user_actkey, user_inactive_reason			FROM ' . USERS_TABLE . "			WHERE user_id = $user_id";		$result = $db->sql_query($sql);		$user_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$user_row)		{			trigger_error('NO_USER');		}		if ($user_row['user_type'] <> USER_INACTIVE && !$user_row['user_newpasswd'])		{			meta_refresh(3, append_sid("{$phpbb_root_path}index.$phpEx"));			trigger_error('ALREADY_ACTIVATED');		}		if (($user_row['user_inactive_reason'] ==  INACTIVE_MANUAL) || $user_row['user_actkey'] != $key)		{			trigger_error('WRONG_ACTIVATION');		}		// Do not allow activating by non administrators when admin activation is on		// Only activation type the user should be able to do is INACTIVE_REMIND		// or activate a new password which is not an activation state :@		if (!$user_row['user_newpasswd'] && $user_row['user_inactive_reason'] != INACTIVE_REMIND && $config['require_activation'] == USER_ACTIVATION_ADMIN && !$auth->acl_get('a_user'))		{			if (!$user->data['is_registered'])			{				login_box('', $user->lang['NO_AUTH_OPERATION']);			}			trigger_error('NO_AUTH_OPERATION');		}		$update_password = ($user_row['user_newpasswd']) ? true : false;		if ($update_password)		{			$sql_ary = array(				'user_actkey'		=> '',				'user_password'		=> $user_row['user_newpasswd'],				'user_newpasswd'	=> '',				'user_pass_convert'	=> 0,				'user_login_attempts'	=> 0,			);			$sql = 'UPDATE ' . USERS_TABLE . '				SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '				WHERE user_id = ' . $user_row['user_id'];			$db->sql_query($sql);			add_log('user', $user_row['user_id'], 'LOG_USER_NEW_PASSWORD', $user_row['username']);		}		if (!$update_password)		{			include_once($phpbb_root_path . 'includes/functions_user.' . $phpEx);			user_active_flip('activate', $user_row['user_id']);			$sql = 'UPDATE ' . USERS_TABLE . "				SET user_actkey = ''				WHERE user_id = {$user_row['user_id']}";			$db->sql_query($sql);			// Create the correct logs			add_log('user', $user_row['user_id'], 'LOG_USER_ACTIVE_USER');			if ($auth->acl_get('a_user'))			{				add_log('admin', 'LOG_USER_ACTIVE', $user_row['username']);			}		}		if ($config['require_activation'] == USER_ACTIVATION_ADMIN && !$update_password)		{			include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);			$messenger = new messenger(false);			$messenger->template('admin_welcome_activated', $user_row['user_lang']);			$messenger->to($user_row['user_email'], $user_row['username']);			$messenger->anti_abuse_headers($config, $user);			$messenger->assign_vars(array(				'USERNAME'	=> htmlspecialchars_decode($user_row['username']))			);			$messenger->send($user_row['user_notify_type']);			$message = 'ACCOUNT_ACTIVE_ADMIN';		}		else		{			if (!$update_password)			{				$message = ($user_row['user_inactive_reason'] == INACTIVE_PROFILE) ? 'ACCOUNT_ACTIVE_PROFILE' : 'ACCOUNT_ACTIVE';			}			else			{				$message = 'PASSWORD_ACTIVATED';			}		}		meta_refresh(3, append_sid("{$phpbb_root_path}index.$phpEx"));		trigger_error($user->lang[$message]);	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class mcp_pm_reports_info{	function module()	{		return array(			'filename'	=> 'mcp_pm_reports',			'title'		=> 'MCP_PM_REPORTS',			'version'	=> '1.0.0',			'modes'		=> array(				'pm_reports'			=> array('title' => 'MCP_PM_REPORTS_OPEN', 'auth' => 'aclf_m_report', 'cat' => array('MCP_REPORTS')),				'pm_reports_closed'	=> array('title' => 'MCP_PM_REPORTS_CLOSED', 'auth' => 'aclf_m_report', 'cat' => array('MCP_REPORTS')),				'pm_report_details'	=> array('title' => 'MCP_PM_REPORT_DETAILS', 'auth' => 'aclf_m_report', 'cat' => array('MCP_REPORTS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** BBCode class* @package phpBB3*/class bbcode{	var $bbcode_uid = '';	var $bbcode_bitfield = '';	var $bbcode_cache = array();	var $bbcode_template = array();	var $bbcodes = array();	var $template_bitfield;	var $template_filename = '';	/**	* Constructor	* Init bbcode cache entries if bitfield is specified	*/	function bbcode($bitfield = '')	{		if ($bitfield)		{			$this->bbcode_bitfield = $bitfield;			$this->bbcode_cache_init();		}	}	/**	* Second pass bbcodes	*/	function bbcode_second_pass(&$message, $bbcode_uid = '', $bbcode_bitfield = false)	{		if ($bbcode_uid)		{			$this->bbcode_uid = $bbcode_uid;		}		if ($bbcode_bitfield !== false)		{			$this->bbcode_bitfield = $bbcode_bitfield;			// Init those added with a new bbcode_bitfield (already stored codes will not get parsed again)			$this->bbcode_cache_init();		}		if (!$this->bbcode_bitfield)		{			// Remove the uid from tags that have not been transformed into HTML			if ($this->bbcode_uid)			{				$message = str_replace(':' . $this->bbcode_uid, '', $message);			}			return;		}		$str = array('search' => array(), 'replace' => array());		$preg = array('search' => array(), 'replace' => array());		$bitfield = new bitfield($this->bbcode_bitfield);		$bbcodes_set = $bitfield->get_all_set();		$undid_bbcode_specialchars = false;		foreach ($bbcodes_set as $bbcode_id)		{			if (!empty($this->bbcode_cache[$bbcode_id]))			{				foreach ($this->bbcode_cache[$bbcode_id] as $type => $array)				{					foreach ($array as $search => $replace)					{						${$type}['search'][] = str_replace('$uid', $this->bbcode_uid, $search);						${$type}['replace'][] = $replace;					}					if (sizeof($str['search']))					{						$message = str_replace($str['search'], $str['replace'], $message);						$str = array('search' => array(), 'replace' => array());					}					if (sizeof($preg['search']))					{						// we need to turn the entities back into their original form to allow the						// search patterns to work properly						if (!$undid_bbcode_specialchars)						{							$message = str_replace(array('&#58;', '&#46;'), array(':', '.'), $message);							$undid_bbcode_specialchars = true;						}						$message = preg_replace($preg['search'], $preg['replace'], $message);						$preg = array('search' => array(), 'replace' => array());					}				}			}		}		// Remove the uid from tags that have not been transformed into HTML		$message = str_replace(':' . $this->bbcode_uid, '', $message);	}	/**	* Init bbcode cache	*	* requires: $this->bbcode_bitfield	* sets: $this->bbcode_cache with bbcode templates needed for bbcode_bitfield	*/	function bbcode_cache_init()	{		global $phpbb_root_path, $template, $user;		if (empty($this->template_filename))		{			$this->template_bitfield = new bitfield($user->theme['bbcode_bitfield']);			$this->template_filename = $phpbb_root_path . 'styles/' . $user->theme['template_path'] . '/template/bbcode.html';			if (!@file_exists($this->template_filename))			{				if (isset($user->theme['template_inherits_id']) && $user->theme['template_inherits_id'])				{					$this->template_filename = $phpbb_root_path . 'styles/' . $user->theme['template_inherit_path'] . '/template/bbcode.html';					if (!@file_exists($this->template_filename))					{						trigger_error('The file ' . $this->template_filename . ' is missing.', E_USER_ERROR);					}				}				else				{					trigger_error('The file ' . $this->template_filename . ' is missing.', E_USER_ERROR);				}			}		}		$bbcode_ids = $rowset = $sql = array();		$bitfield = new bitfield($this->bbcode_bitfield);		$bbcodes_set = $bitfield->get_all_set();		foreach ($bbcodes_set as $bbcode_id)		{			if (isset($this->bbcode_cache[$bbcode_id]))			{				// do not try to re-cache it if it's already in				continue;			}			$bbcode_ids[] = $bbcode_id;			if ($bbcode_id > NUM_CORE_BBCODES)			{				$sql[] = $bbcode_id;			}		}		if (sizeof($sql))		{			global $db;			$sql = 'SELECT *				FROM ' . BBCODES_TABLE . '				WHERE ' . $db->sql_in_set('bbcode_id', $sql);			$result = $db->sql_query($sql, 3600);			while ($row = $db->sql_fetchrow($result))			{				// To circumvent replacing newlines with <br /> for the generated html,				// we use carriage returns here. They are later changed back to newlines				$row['bbcode_tpl'] = str_replace("\n", "\r", $row['bbcode_tpl']);				$row['second_pass_replace'] = str_replace("\n", "\r", $row['second_pass_replace']);				$rowset[$row['bbcode_id']] = $row;			}			$db->sql_freeresult($result);		}		foreach ($bbcode_ids as $bbcode_id)		{			switch ($bbcode_id)			{				case 0:					$this->bbcode_cache[$bbcode_id] = array(						'str' => array(							'[/quote:$uid]'	=> $this->bbcode_tpl('quote_close', $bbcode_id)						),						'preg' => array(							'#\[quote(?:=&quot;(.*?)&quot;)?:$uid\]((?!\[quote(?:=&quot;.*?&quot;)?:$uid\]).)?#ise'	=> "\$this->bbcode_second_pass_quote('\$1', '\$2')"						)					);				break;				case 1:					$this->bbcode_cache[$bbcode_id] = array(						'str' => array(							'[b:$uid]'	=> $this->bbcode_tpl('b_open', $bbcode_id),							'[/b:$uid]'	=> $this->bbcode_tpl('b_close', $bbcode_id),						)					);				break;				case 2:					$this->bbcode_cache[$bbcode_id] = array(						'str' => array(							'[i:$uid]'	=> $this->bbcode_tpl('i_open', $bbcode_id),							'[/i:$uid]'	=> $this->bbcode_tpl('i_close', $bbcode_id),						)					);				break;				case 3:					$this->bbcode_cache[$bbcode_id] = array(						'preg' => array(							'#\[url:$uid\]((.*?))\[/url:$uid\]#s'			=> $this->bbcode_tpl('url', $bbcode_id),							'#\[url=([^\[]+?):$uid\](.*?)\[/url:$uid\]#s'	=> $this->bbcode_tpl('url', $bbcode_id),						)					);				break;				case 4:					if ($user->optionget('viewimg'))					{						$this->bbcode_cache[$bbcode_id] = array(							'preg' => array(								'#\[img:$uid\](.*?)\[/img:$uid\]#s'		=> $this->bbcode_tpl('img', $bbcode_id),							)						);					}					else					{						$this->bbcode_cache[$bbcode_id] = array(							'preg' => array(								'#\[img:$uid\](.*?)\[/img:$uid\]#s'		=> str_replace('$2', '[ img ]', $this->bbcode_tpl('url', $bbcode_id, true)),							)						);					}				break;				case 5:					$this->bbcode_cache[$bbcode_id] = array(						'preg' => array(							'#\[size=([\-\+]?\d+):$uid\](.*?)\[/size:$uid\]#s'	=> $this->bbcode_tpl('size', $bbcode_id),						)					);				break;				case 6:					$this->bbcode_cache[$bbcode_id] = array(						'preg' => array(							'!\[color=(#[0-9a-f]{3}|#[0-9a-f]{6}|[a-z\-]+):$uid\](.*?)\[/color:$uid\]!is'	=> $this->bbcode_tpl('color', $bbcode_id),						)					);				break;				case 7:					$this->bbcode_cache[$bbcode_id] = array(						'str' => array(							'[u:$uid]'	=> $this->bbcode_tpl('u_open', $bbcode_id),							'[/u:$uid]'	=> $this->bbcode_tpl('u_close', $bbcode_id),						)					);				break;				case 8:					$this->bbcode_cache[$bbcode_id] = array(						'preg' => array(							'#\[code(?:=([a-z]+))?:$uid\](.*?)\[/code:$uid\]#ise'	=> "\$this->bbcode_second_pass_code('\$1', '\$2')",						)					);				break;				case 9:					$this->bbcode_cache[$bbcode_id] = array(						'preg' => array(							'#(\[\/?(list|\*):[mou]?:?$uid\])[\n]{1}#'	=> "\$1",							'#(\[list=([^\[]+):$uid\])[\n]{1}#'			=> "\$1",							'#\[list=([^\[]+):$uid\]#e'					=> "\$this->bbcode_list('\$1')",						),						'str' => array(							'[list:$uid]'		=> $this->bbcode_tpl('ulist_open_default', $bbcode_id),							'[/list:u:$uid]'	=> $this->bbcode_tpl('ulist_close', $bbcode_id),							'[/list:o:$uid]'	=> $this->bbcode_tpl('olist_close', $bbcode_id),							'[*:$uid]'			=> $this->bbcode_tpl('listitem', $bbcode_id),							'[/*:$uid]'			=> $this->bbcode_tpl('listitem_close', $bbcode_id),							'[/*:m:$uid]'		=> $this->bbcode_tpl('listitem_close', $bbcode_id)						),					);				break;				case 10:					$this->bbcode_cache[$bbcode_id] = array(						'preg' => array(							'#\[email:$uid\]((.*?))\[/email:$uid\]#is'			=> $this->bbcode_tpl('email', $bbcode_id),							'#\[email=([^\[]+):$uid\](.*?)\[/email:$uid\]#is'	=> $this->bbcode_tpl('email', $bbcode_id)						)					);				break;				case 11:					if ($user->optionget('viewflash'))					{						$this->bbcode_cache[$bbcode_id] = array(							'preg' => array(								'#\[flash=([0-9]+),([0-9]+):$uid\](.*?)\[/flash:$uid\]#'	=> $this->bbcode_tpl('flash', $bbcode_id),							)						);					}					else					{						$this->bbcode_cache[$bbcode_id] = array(							'preg' => array(								'#\[flash=([0-9]+),([0-9]+):$uid\](.*?)\[/flash:$uid\]#'	=> str_replace('$1', '$3', str_replace('$2', '[ flash ]', $this->bbcode_tpl('url', $bbcode_id, true)))							)						);					}				break;				case 12:					$this->bbcode_cache[$bbcode_id] = array(						'str'	=> array(							'[/attachment:$uid]'	=> $this->bbcode_tpl('inline_attachment_close', $bbcode_id)						),						'preg'	=> array(							'#\[attachment=([0-9]+):$uid\]#'	=> $this->bbcode_tpl('inline_attachment_open', $bbcode_id)						)					);				break;				default:					if (isset($rowset[$bbcode_id]))					{						if ($this->template_bitfield->get($bbcode_id))						{							// The bbcode requires a custom template to be loaded							if (!$bbcode_tpl = $this->bbcode_tpl($rowset[$bbcode_id]['bbcode_tag'], $bbcode_id))							{								// For some reason, the required template seems not to be available, use the default template								$bbcode_tpl = (!empty($rowset[$bbcode_id]['second_pass_replace'])) ? $rowset[$bbcode_id]['second_pass_replace'] : $rowset[$bbcode_id]['bbcode_tpl'];							}							else							{								// In order to use templates with custom bbcodes we need								// to replace all {VARS} to corresponding backreferences								// Note that backreferences are numbered from bbcode_match								if (preg_match_all('/\{(URL|LOCAL_URL|EMAIL|TEXT|SIMPLETEXT|INTTEXT|IDENTIFIER|COLOR|NUMBER)[0-9]*\}/', $rowset[$bbcode_id]['bbcode_match'], $m))								{									foreach ($m[0] as $i => $tok)									{										$bbcode_tpl = str_replace($tok, '$' . ($i + 1), $bbcode_tpl);									}								}							}						}						else						{							// Default template							$bbcode_tpl = (!empty($rowset[$bbcode_id]['second_pass_replace'])) ? $rowset[$bbcode_id]['second_pass_replace'] : $rowset[$bbcode_id]['bbcode_tpl'];						}						// Replace {L_*} lang strings						$bbcode_tpl = preg_replace('/{L_([A-Z_]+)}/e', "(!empty(\$user->lang['\$1'])) ? \$user->lang['\$1'] : ucwords(strtolower(str_replace('_', ' ', '\$1')))", $bbcode_tpl);						if (!empty($rowset[$bbcode_id]['second_pass_replace']))						{							// The custom BBCode requires second-pass pattern replacements							$this->bbcode_cache[$bbcode_id] = array(								'preg' => array($rowset[$bbcode_id]['second_pass_match'] => $bbcode_tpl)							);						}						else						{							$this->bbcode_cache[$bbcode_id] = array(								'str' => array($rowset[$bbcode_id]['second_pass_match'] => $bbcode_tpl)							);						}					}					else					{						$this->bbcode_cache[$bbcode_id] = false;					}				break;			}		}	}	/**	* Return bbcode template	*/	function bbcode_tpl($tpl_name, $bbcode_id = -1, $skip_bitfield_check = false)	{		static $bbcode_hardtpl = array();		if (empty($bbcode_hardtpl))		{			global $user;			$bbcode_hardtpl = array(				'b_open'	=> '<span style="font-weight: bold">',				'b_close'	=> '</span>',				'i_open'	=> '<span style="font-style: italic">',				'i_close'	=> '</span>',				'u_open'	=> '<span style="text-decoration: underline">',				'u_close'	=> '</span>',				'img'		=> '<img src="$1" alt="' . $user->lang['IMAGE'] . '" />',				'size'		=> '<span style="font-size: $1%; line-height: normal">$2</span>',				'color'		=> '<span style="color: $1">$2</span>',				'email'		=> '<a href="mailto:$1">$2</a>'			);		}		if ($bbcode_id != -1 && !$skip_bitfield_check && !$this->template_bitfield->get($bbcode_id))		{			return (isset($bbcode_hardtpl[$tpl_name])) ? $bbcode_hardtpl[$tpl_name] : false;		}		if (empty($this->bbcode_template))		{			if (($tpl = file_get_contents($this->template_filename)) === false)			{				trigger_error('Could not load bbcode template', E_USER_ERROR);			}			// replace \ with \\ and then ' with \'.			$tpl = str_replace('\\', '\\\\', $tpl);			$tpl = str_replace("'", "\'", $tpl);			// strip newlines and indent			$tpl = preg_replace("/\n[\n\r\s\t]*/", '', $tpl);			// Turn template blocks into PHP assignment statements for the values of $bbcode_tpl..			$this->bbcode_template = array();			$matches = preg_match_all('#<!-- BEGIN (.*?) -->(.*?)<!-- END (?:.*?) -->#', $tpl, $match);			for ($i = 0; $i < $matches; $i++)			{				if (empty($match[1][$i]))				{					continue;				}				$this->bbcode_template[$match[1][$i]] = $this->bbcode_tpl_replace($match[1][$i], $match[2][$i]);			}		}		return (isset($this->bbcode_template[$tpl_name])) ? $this->bbcode_template[$tpl_name] : ((isset($bbcode_hardtpl[$tpl_name])) ? $bbcode_hardtpl[$tpl_name] : false);	}	/**	* Return bbcode template replacement	*/	function bbcode_tpl_replace($tpl_name, $tpl)	{		global $user;		static $replacements = array(			'quote_username_open'	=> array('{USERNAME}'	=> '$1'),			'color'					=> array('{COLOR}'		=> '$1', '{TEXT}'			=> '$2'),			'size'					=> array('{SIZE}'		=> '$1', '{TEXT}'			=> '$2'),			'img'					=> array('{URL}'		=> '$1'),			'flash'					=> array('{WIDTH}'		=> '$1', '{HEIGHT}'			=> '$2', '{URL}'	=> '$3'),			'url'					=> array('{URL}'		=> '$1', '{DESCRIPTION}'	=> '$2'),			'email'					=> array('{EMAIL}'		=> '$1', '{DESCRIPTION}'	=> '$2')		);		$tpl = preg_replace('/{L_([A-Z_]+)}/e', "(!empty(\$user->lang['\$1'])) ? \$user->lang['\$1'] : ucwords(strtolower(str_replace('_', ' ', '\$1')))", $tpl);		if (!empty($replacements[$tpl_name]))		{			$tpl = strtr($tpl, $replacements[$tpl_name]);		}		return trim($tpl);	}	/**	* Second parse list bbcode	*/	function bbcode_list($type)	{		if ($type == '')		{			$tpl = 'ulist_open_default';			$type = 'default';		}		else if ($type == 'i')		{			$tpl = 'olist_open';			$type = 'lower-roman';		}		else if ($type == 'I')		{			$tpl = 'olist_open';			$type = 'upper-roman';		}		else if (preg_match('#^(disc|circle|square)$#i', $type))		{			$tpl = 'ulist_open';			$type = strtolower($type);		}		else if (preg_match('#^[a-z]$#', $type))		{			$tpl = 'olist_open';			$type = 'lower-alpha';		}		else if (preg_match('#[A-Z]#', $type))		{			$tpl = 'olist_open';			$type = 'upper-alpha';		}		else if (is_numeric($type))		{			$tpl = 'olist_open';			$type = 'decimal';		}		else		{			$tpl = 'olist_open';			$type = 'decimal';		}		return str_replace('{LIST_TYPE}', $type, $this->bbcode_tpl($tpl));	}	/**	* Second parse quote tag	*/	function bbcode_second_pass_quote($username, $quote)	{		// when using the /e modifier, preg_replace slashes double-quotes but does not		// seem to slash anything else		$quote = str_replace('\"', '"', $quote);		$username = str_replace('\"', '"', $username);		// remove newline at the beginning		if ($quote == "\n")		{			$quote = '';		}		$quote = (($username) ? str_replace('$1', $username, $this->bbcode_tpl('quote_username_open')) : $this->bbcode_tpl('quote_open')) . $quote;		return $quote;	}	/**	* Second parse code tag	*/	function bbcode_second_pass_code($type, $code)	{		// when using the /e modifier, preg_replace slashes double-quotes but does not		// seem to slash anything else		$code = str_replace('\"', '"', $code);		switch ($type)		{			case 'php':				// Not the english way, but valid because of hardcoded syntax highlighting				if (strpos($code, '<span class="syntaxdefault"><br /></span>') === 0)				{					$code = substr($code, 41);				}			// no break;			default:				$code = str_replace("\t", '&nbsp; &nbsp;', $code);				$code = str_replace('  ', '&nbsp; ', $code);				$code = str_replace('  ', ' &nbsp;', $code);				$code = str_replace("\n ", "\n&nbsp;", $code);				// keep space at the beginning				if (!empty($code) && $code[0] == ' ')				{					$code = '&nbsp;' . substr($code, 1);				}				// remove newline at the beginning				if (!empty($code) && $code[0] == "\n")				{					$code = substr($code, 1);				}			break;		}		$code = $this->bbcode_tpl('code_open') . $code . $this->bbcode_tpl('code_close');		return $code;	}}?>
<?php/**** @package phpBB3* @copyright (c) 2011 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/if (!defined('IN_PHPBB')){	exit;}// Report all errors, except notices and deprecation messagesif (!defined('E_DEPRECATED')){	define('E_DEPRECATED', 8192);}error_reporting(E_ALL & ~E_NOTICE & ~E_DEPRECATED);/** Remove variables created by register_globals from the global scope* Thanks to Matt Kavanagh*/function deregister_globals(){	$not_unset = array(		'GLOBALS'	=> true,		'_GET'		=> true,		'_POST'		=> true,		'_COOKIE'	=> true,		'_REQUEST'	=> true,		'_SERVER'	=> true,		'_SESSION'	=> true,		'_ENV'		=> true,		'_FILES'	=> true,		'phpEx'		=> true,		'phpbb_root_path'	=> true	);	// Not only will array_merge and array_keys give a warning if	// a parameter is not an array, array_merge will actually fail.	// So we check if _SESSION has been initialised.	if (!isset($_SESSION) || !is_array($_SESSION))	{		$_SESSION = array();	}	// Merge all into one extremely huge array; unset this later	$input = array_merge(		array_keys($_GET),		array_keys($_POST),		array_keys($_COOKIE),		array_keys($_SERVER),		array_keys($_SESSION),		array_keys($_ENV),		array_keys($_FILES)	);	foreach ($input as $varname)	{		if (isset($not_unset[$varname]))		{			// Hacking attempt. No point in continuing unless it's a COOKIE (so a cookie called GLOBALS doesn't lock users out completely)			if ($varname !== 'GLOBALS' || isset($_GET['GLOBALS']) || isset($_POST['GLOBALS']) || isset($_SERVER['GLOBALS']) || isset($_SESSION['GLOBALS']) || isset($_ENV['GLOBALS']) || isset($_FILES['GLOBALS']))			{				exit;			}			else			{				$cookie = &$_COOKIE;				while (isset($cookie['GLOBALS']))				{					if (!is_array($cookie['GLOBALS']))					{						break;					}					foreach ($cookie['GLOBALS'] as $registered_var => $value)					{						if (!isset($not_unset[$registered_var]))						{							unset($GLOBALS[$registered_var]);						}					}					$cookie = &$cookie['GLOBALS'];				}			}		}		unset($GLOBALS[$varname]);	}	unset($input);}// Register globals and magic quotes have been dropped in PHP 5.4if (version_compare(PHP_VERSION, '5.4.0-dev', '>=')){	/**	* @ignore	*/	define('STRIP', false);}else{	@set_magic_quotes_runtime(0);	// Be paranoid with passed vars	if (@ini_get('register_globals') == '1' || strtolower(@ini_get('register_globals')) == 'on' || !function_exists('ini_get'))	{		deregister_globals();	}	define('STRIP', (get_magic_quotes_gpc()) ? true : false);}// Prevent date/time functions from throwing E_WARNING on PHP 5.3 by setting a default timezoneif (function_exists('date_default_timezone_set') && function_exists('date_default_timezone_get')){	// For PHP 5.1.0 the date/time functions have been rewritten	// and setting a timezone is required prior to calling any date/time function.	// Since PHP 5.2.0 calls to date/time functions without having a timezone set	// result in E_STRICT errors being thrown.	// Note: We already exclude E_STRICT errors	// (to be exact: they are not included in E_ALL in PHP 5.2)	// In PHP 5.3.0 the error level has been raised to E_WARNING which causes problems	// because we show E_WARNING errors and do not set a default timezone.	// This is because we have our own timezone handling and work in UTC only anyway.	// So what we basically want to do is set our timezone to UTC,	// but we don't know what other scripts (such as bridges) are involved,	// so we check whether a timezone is already set by calling date_default_timezone_get().	// Unfortunately, date_default_timezone_get() itself might throw E_WARNING	// if no timezone has been set, so we have to keep it quiet with @.	// date_default_timezone_get() tries to guess the correct timezone first	// and then falls back to UTC when everything fails.	// We just set the timezone to whatever date_default_timezone_get() returns.	date_default_timezone_set(@date_default_timezone_get());}$starttime = explode(' ', microtime());$starttime = $starttime[1] + $starttime[0];
<?php/**** @package VC* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Original Author - Xore (Robert Hetzler)* With contributions from Neothermic** @package VC*/class captcha{	var $width = 360;	var $height = 96;	/**	* Create the image containing $code with a seed of $seed	*/	function execute($code, $seed)	{		global $config;				mt_srand($seed);		// Create image		$img = imagecreatetruecolor($this->width, $this->height);		// Generate colours		$colour = new colour_manager($img, array(			'random'	=> true,			'min_value'	=> 60,		), 'hsv');		$scheme = $colour->colour_scheme('background', false);		$scheme = $colour->mono_range($scheme, 10, false);		shuffle($scheme);		$bg_colours = array_splice($scheme, mt_rand(6, 12));		// Generate code characters		$characters = $sizes = $bounding_boxes = $noise = array();		$width_avail = $this->width - 15;		$code_len = strlen($code);		$captcha_bitmaps = $this->captcha_bitmaps();		for ($i = 0; $i < $code_len; ++$i)		{			$characters[$i] = new char_cube3d($captcha_bitmaps, $code[$i]);			list($min, $max) = $characters[$i]->range();			$sizes[$i] = mt_rand($min, $max);			$box = $characters[$i]->dimensions($sizes[$i]);			$width_avail -= ($box[2] - $box[0]);			$bounding_boxes[$i] = $box;		} 		// Redistribute leftover x-space		$offset = array();		for ($i = 0; $i < $code_len; ++$i)		{			$denom = ($code_len - $i);			$denom = max(1.3, $denom);			$offset[$i] = phpbb_mt_rand(0, (int) round((1.5 * $width_avail) / $denom));			$width_avail -= $offset[$i];		}		if ($config['captcha_gd_x_grid'])		{			$grid = (int) $config['captcha_gd_x_grid'];			for ($y = 0; $y < $this->height; $y += mt_rand($grid - 2, $grid + 2))			{				$current_colour = $scheme[array_rand($scheme)];				imageline($img, mt_rand(0,4), mt_rand($y - 3, $y), mt_rand($this->width - 5, $this->width), mt_rand($y - 3, $y), $current_colour);			}		}		if ($config['captcha_gd_y_grid'])		{			$grid = (int) $config['captcha_gd_y_grid'];			for ($x = 0; $x < $this->width; $x += mt_rand($grid - 2, $grid + 2))			{				$current_colour = $scheme[array_rand($scheme)];				imagedashedline($img, mt_rand($x -3, $x + 3), mt_rand(0, 4), mt_rand($x -3, $x + 3), mt_rand($this->height - 5, $this->height), $current_colour);			}		}		if ($config['captcha_gd_wave'] && ($config['captcha_gd_y_grid'] || $config['captcha_gd_y_grid']))		{			$this->wave($img);		}						if ($config['captcha_gd_3d_noise'])		{			$xoffset = mt_rand(0,9);			$noise_bitmaps = $this->captcha_noise_bg_bitmaps();			for ($i = 0; $i < $code_len; ++$i)			{				$noise[$i] = new char_cube3d($noise_bitmaps, mt_rand(1, sizeof($noise_bitmaps['data'])));				list($min, $max) = $noise[$i]->range();				//$box = $noise[$i]->dimensions($sizes[$i]);			}			$xoffset = 0;			for ($i = 0; $i < $code_len; ++$i)			{				$dimm = $bounding_boxes[$i];				$xoffset += ($offset[$i] - $dimm[0]);				$yoffset = mt_rand(-$dimm[1], $this->height - $dimm[3]);	 				$noise[$i]->drawchar($sizes[$i], $xoffset, $yoffset, $img, $colour->get_resource('background'), $scheme);				$xoffset += $dimm[2];			}		}		$xoffset = 5;		for ($i = 0; $i < $code_len; ++$i)		{			$dimm = $bounding_boxes[$i];			$xoffset += ($offset[$i] - $dimm[0]);			$yoffset = mt_rand(-$dimm[1], $this->height - $dimm[3]);			$characters[$i]->drawchar($sizes[$i], $xoffset, $yoffset, $img, $colour->get_resource('background'), $scheme);			$xoffset += $dimm[2];		}		if ($config['captcha_gd_wave'])		{			$this->wave($img);		}		if ($config['captcha_gd_foreground_noise'])		{			$this->noise_line($img, 0, 0, $this->width, $this->height, $colour->get_resource('background'), $scheme, $bg_colours);		}		// Send image		header('Content-Type: image/png');		header('Cache-control: no-cache, no-store');		imagepng($img);		imagedestroy($img);	}	/**	* Sinus	*/	function wave($img)	{		global $config;				$period_x = mt_rand(12,18);		$period_y = mt_rand(7,14);		$amp_x = mt_rand(5,10);		$amp_y = mt_rand(2,4); 		$socket = mt_rand(0,100);				$dampen_x = mt_rand($this->width/5, $this->width/2);		$dampen_y = mt_rand($this->height/5, $this->height/2);		$direction_x = (mt_rand (0, 1));		$direction_y = (mt_rand (0, 1));		for ($i = 0; $i < $this->width; $i++)		{			$dir = ($direction_x) ? $i : ($this->width - $i);			imagecopy($img, $img, $i-1, sin($socket+ $i/($period_x + $dir/$dampen_x)) * $amp_x, $i, 0, 1, $this->height);		}		$socket = mt_rand(0,100);		for ($i = 0; $i < $this->height; $i++)		{			$dir = ($direction_y) ? $i : ($this->height - $i);			imagecopy($img, $img ,sin($socket + $i/($period_y + ($dir)/$dampen_y)) * $amp_y, $i-1, 0, $i, $this->width, 1);		}		return $img;	}		/**	* Noise line	*/	function noise_line($img, $min_x, $min_y, $max_x, $max_y, $bg, $font, $non_font)	{		imagesetthickness($img, 2);		$x1 = $min_x;		$x2 = $max_x;		$y1 = $min_y;		$y2 = $min_y;		do		{			$line = array_merge(				array_fill(0, mt_rand(30, 60), $non_font[array_rand($non_font)]),				array_fill(0, mt_rand(30, 60), $bg)			);			imagesetstyle($img, $line);			imageline($img, $x1, $y1, $x2, $y2, IMG_COLOR_STYLED);			$y1 += mt_rand(12, 35);			$y2 += mt_rand(12, 35);		}		while ($y1 < $max_y && $y2 < $max_y);		$x1 = $min_x;		$x2 = $min_x;		$y1 = $min_y;		$y2 = $max_y;		do		{			$line = array_merge(				array_fill(0, mt_rand(30, 60), $non_font[array_rand($non_font)]),				array_fill(0, mt_rand(30, 60), $bg)			);			imagesetstyle($img, $line);			imageline($img, $x1, $y1, $x2, $y2, IMG_COLOR_STYLED);			$x1 += mt_rand(20, 35);			$x2 += mt_rand(20, 35);		}		while ($x1 < $max_x && $x2 < $max_x);		imagesetthickness($img, 1);	}	function captcha_noise_bg_bitmaps()	{				return array(			'width'		=> 15,			'height'	=> 5,			'data'		=> array(			1 => array(				array(1,0,0,0,1,0,0,0,0,0,0,0,0,0,0),				array(1,0,0,0,0,1,0,0,0,0,0,0,0,0,0),				array(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0),				array(1,0,0,0,0,1,0,0,0,0,0,0,1,0,0),				array(1,0,0,0,0,0,1,0,0,0,0,1,0,0,0),			),			2 => array(				array(1,1,mt_rand(0,1),1,0,1,1,1,1,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,1,0,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,0,0,1,1,0,1,1,1),			),			3 => array(				array(1,0,0,0,0,0,0,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,0,0,0,0,0,1,0),				array(0,0,0,0,1,0,0,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,0,0,0,0,0,1,0),				array(1,0,0,0,0,0,0,0,0,0,0,0,0,0,1),			),			4 => array(				array(1,0,1,0,1,0,0,1,1,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,1,0,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),				array(1,0,1,0,0,0,0,0,0,0,0,0,0,0,0),			),			5 => array(				array(1,1,1,1,0,0,0,1,1,1,0,0,1,0,1),				array(0,0,0,0,0,0,0,1,0,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),				array(1,0,1,0,0,0,0,0,0,0,0,0,0,0,0),			),			6 => array(				array(mt_rand(0,1),mt_rand(0,1),mt_rand(0,1),mt_rand(0,1),mt_rand(0,1),0,mt_rand(0,1),mt_rand(0,1),mt_rand(0,1),mt_rand(0,1),mt_rand(0,1),0,mt_rand(0,1),mt_rand(0,1),mt_rand(0,1)),				array(0,0,0,0,0,0,0,mt_rand(0,1),0,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),				array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),				array(mt_rand(0,1),0,mt_rand(0,1),0,0,0,0,0,0,0,0,0,0,0,0),			),			7 => array(				array(0,0,0,0,0,0,0,0,0,0,1,1,0,1,1),				array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),				array(0,0,1,1,0,0,0,1,0,0,0,0,0,0,0),				array(0,1,0,0,0,1,0,0,0,0,0,0,0,0,0),				array(1,0,0,0,0,0,0,0,0,0,0,0,0,0,0),			),		));	}		/**	* Return bitmaps	*/	function captcha_bitmaps()	{		global $config;				$chars = array(			'A'	=>	array(						array(							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,1,1,1,1,1,1,0),							array(0,1,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,1,1,0,1,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,1,1,1,1,1,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(1,1,1,0,0,0,1,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,1,1,1,1,1,0,0),							array(0,1,1,0,0,0,1,1,0),							array(1,1,0,0,0,0,0,1,1),							array(1,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,1,1),							array(0,0,0,0,0,1,1,1,1),							array(0,0,0,1,1,1,0,0,1),							array(0,1,1,1,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,1,0,0,0,0,1,1,1),							array(0,1,1,1,1,1,1,0,1),						),					),		'B'	=>		array(						array(							array(1,1,1,1,1,1,1,0,0),							array(1,0,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,1,0),							array(1,1,1,1,1,1,1,0,0),							array(1,0,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,1,0),							array(1,1,1,1,1,1,1,0,0),						),						array(							array(1,1,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(1,1,1,1,1,1,1,0,0),						),						array(							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,1,1,1,1,1,0,0),						),					),		'C'	=>		array(						array(							array(0,0,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,1,1,1,1,0,0),						),						array(							array(0,0,1,1,1,1,1,0,1),							array(0,1,0,0,0,0,0,1,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,1),							array(0,0,1,1,1,1,1,0,1),						),					),		'D'	=>		array(						array(							array(1,1,1,1,1,1,1,0,0),							array(1,0,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,1,0),							array(1,1,1,1,1,1,1,0,0),						),						array(							array(1,1,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(1,1,1,1,1,1,1,0,0),						),						array(							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,1,1,1,1,1,0,1),							array(0,1,1,0,0,0,1,1,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,1,0,0,0,1,1,1),							array(0,0,1,1,1,1,1,0,1),						),					),		'E'	=>		array(						array(							array(1,1,1,1,1,1,1,1,1),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,1,1,1,1,1,1,1,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,1,1,1,1,1,1,1,1),						),						array(							array(1,1,1,1,1,1,1,1,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,1,1,1,1,1,1,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,1),							array(1,1,1,1,1,1,1,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,1,1,1,1,1,0,0),							array(0,1,1,0,0,0,1,1,0),							array(1,1,0,0,0,0,0,1,1),							array(1,1,1,1,1,1,1,1,1),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,1),							array(1,1,0,0,0,0,0,1,1),							array(0,1,1,1,1,1,1,1,0),						),					),		'F'	=>		array(						array(							array(1,1,1,1,1,1,1,1,1),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,1,1,1,1,1,1,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),						),						array(							array(0,1,1,1,1,1,1,1,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(1,1,1,0,0,0,0,0,0),						),						array(							array(0,0,0,1,1,0,0,0,0),							array(0,0,1,1,0,0,0,0,0),							array(0,1,1,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(1,1,1,1,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),						),					),		'G'	=>		array(						array(							array(0,0,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,1,1,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,1,1,1,1,0,0),						),						array(							array(0,0,1,1,1,1,1,0,1),							array(0,1,0,0,0,0,0,1,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,1,1,1,1,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,1),							array(0,0,1,1,1,1,1,0,1),						),						array(							array(0,0,1,1,1,1,1,0,1),							array(0,1,1,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,1,1,0,0,0,0,0,1),							array(0,0,1,1,1,1,1,1,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,1,1),							array(1,1,1,1,1,1,1,1,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),						),					),		'H'	=>		array(						array(							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,1,1,1,1,1,1,1,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),						),						array(							array(1,1,1,0,0,0,1,1,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,1,1,1,1,1,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(1,1,1,0,0,0,1,1,1),						),						array(							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,1,1,1,0,0,0),							array(1,1,1,1,0,1,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),						),					),		'I'	=>		array(						array(							array(1,1,1,1,1,1,1,1,1),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(1,1,1,1,1,1,1,1,1),						),						array(							array(0,0,0,1,1,1,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,1,1,1,0,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,1,1,1,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,1,1,1,0,0,0),						),					),		'J'	=>		array(						array(							array(1,1,1,1,1,1,1,1,1),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(1,0,0,0,0,1,0,0,0),							array(1,0,0,0,0,1,0,0,0),							array(0,1,0,0,1,0,0,0,0),							array(0,0,1,1,0,0,0,0,0),						),						array(							array(1,1,1,1,1,1,1,1,1),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(1,0,0,0,0,1,0,0,0),							array(1,0,0,0,0,1,0,0,0),							array(1,1,0,0,1,0,0,0,0),							array(1,0,1,1,0,0,0,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(1,0,0,0,0,1,0,0,0),							array(1,0,0,0,0,1,0,0,0),							array(0,1,0,0,1,0,0,0,0),							array(0,0,1,1,0,0,0,0,0),						),					),		'K'	=>		array(						array(    // New 'K', supplied by NeoThermic							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,1,0,0,0),							array(1,0,0,0,1,0,0,0,0),							array(1,0,0,1,0,0,0,0,0),							array(1,0,1,0,0,0,0,0,0),							array(1,1,0,0,0,0,0,0,0),							array(1,0,1,0,0,0,0,0,0),							array(1,0,0,1,0,0,0,0,0),							array(1,0,0,0,1,0,0,0,0),							array(1,0,0,0,0,1,0,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),						),						array(							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,1,0,0),							array(0,1,0,0,0,1,0,0,0),							array(0,1,0,0,1,0,0,0,0),							array(0,1,0,1,0,0,0,0,0),							array(0,1,1,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,1,0,0,0,0,0,0),							array(0,1,0,1,0,0,0,0,0),							array(0,1,0,0,1,0,0,0,0),							array(0,1,0,0,0,1,0,0,0),							array(0,1,0,0,0,0,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(1,1,1,0,0,0,1,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,1,0,0,0),							array(0,1,0,0,1,0,0,0,0),							array(0,1,0,1,0,0,0,0,0),							array(0,1,1,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,1,0,0,0,0,0,0),							array(0,1,0,1,0,0,0,0,0),							array(0,1,0,0,1,0,0,0,0),							array(0,1,0,0,0,1,0,0,0),							array(0,1,0,0,0,0,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),						),					),		'L'	=>		array(						array(							array(0,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,1,1,1,1,1,1,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,1),							array(1,1,1,1,1,1,1,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,1,0,0,0,0,0,0),							array(0,0,1,1,1,0,0,0,0),						),					),		'M'	=>		array(						array(							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,0,1,0,0,0,1,0,1),							array(1,0,1,0,0,0,1,0,1),							array(1,0,1,0,0,0,1,0,1),							array(1,0,0,1,0,1,0,0,1),							array(1,0,0,1,0,1,0,0,1),							array(1,0,0,1,0,1,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,1,0,0,0,1,1,0),							array(0,1,1,0,0,0,1,1,0),							array(0,1,1,0,0,0,1,1,0),							array(0,1,0,1,0,1,0,1,0),							array(0,1,0,1,0,1,0,1,0),							array(0,1,0,1,0,1,0,1,0),							array(0,1,0,0,1,0,0,1,0),							array(0,1,0,0,1,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(1,1,1,0,0,0,1,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,1,1,1,0,1,1,1,0),							array(1,1,0,1,1,1,0,1,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),						),					),		'N'	=>		array(						array(							array(1,1,0,0,0,0,0,0,1),							array(1,1,0,0,0,0,0,0,1),							array(1,0,1,0,0,0,0,0,1),							array(1,0,1,0,0,0,0,0,1),							array(1,0,0,1,0,0,0,0,1),							array(1,0,0,1,0,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,0,1,0,0,1),							array(1,0,0,0,0,1,0,0,1),							array(1,0,0,0,0,0,1,0,1),							array(1,0,0,0,0,0,1,0,1),							array(1,0,0,0,0,0,0,1,1),							array(1,0,0,0,0,0,0,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,1,0,0,0,0,1,0),							array(0,1,1,0,0,0,0,1,0),							array(0,1,1,0,0,0,0,1,0),							array(0,1,0,1,0,0,0,1,0),							array(0,1,0,1,0,0,0,1,0),							array(0,1,0,1,0,0,0,1,0),							array(0,1,0,0,1,0,0,1,0),							array(0,1,0,0,1,1,0,1,0),							array(0,1,0,0,0,1,0,1,0),							array(0,1,0,0,0,1,1,1,0),							array(0,1,0,0,0,0,1,1,0),							array(0,1,0,0,0,0,0,1,0),							array(1,1,1,0,0,0,1,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(1,0,1,1,1,1,0,0,0),							array(1,1,1,0,0,1,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),						),					),		'O'	=>		array(						array(							array(0,0,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,1,1,1,1,0,0),						),						array(							array(0,0,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,1,1,1,1,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,1,1,1,1,1,0,0,0),							array(1,1,1,0,0,1,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,1,0,0,0,1,1,0,0),							array(0,1,1,1,1,1,0,0,0),						),					),		'P'	=>		array(						array(							array(1,1,1,1,1,1,1,0,0),							array(1,0,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,1,0),							array(1,1,1,1,1,1,1,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),						),						array(							array(1,1,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(1,1,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(1,1,1,0,0,0,0,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,1,1,0,0,0,0,0),							array(1,1,0,1,1,0,0,0,0),							array(1,0,0,0,1,0,0,0,0),							array(1,0,0,0,1,0,0,0,0),							array(1,0,0,1,1,0,0,0,0),							array(1,1,1,1,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),						),					),		'Q'	=>		array(						array(							array(0,0,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,1,0,0,1),							array(1,0,0,0,0,0,1,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,1,1,1,1,0,1),						),						array(							array(0,0,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,1,0,0,1,1,0,1,1),							array(0,1,1,1,1,1,1,1,0),							array(0,0,0,0,0,0,1,1,0),							array(0,0,0,0,0,0,0,1,1),							array(0,0,0,0,0,0,0,0,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,1,1,1,1),							array(0,0,0,0,1,1,0,0,1),							array(0,0,0,0,1,0,0,0,1),							array(0,0,0,0,1,0,0,0,1),							array(0,0,0,0,1,1,0,1,1),							array(0,0,0,0,0,1,1,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),						),					),		'R'	=>		array(						array(							array(1,1,1,1,1,1,1,0,0),							array(1,0,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,1,0),							array(1,1,1,1,1,1,1,0,0),							array(1,1,1,0,0,0,0,0,0),							array(1,0,0,1,0,0,0,0,0),							array(1,0,0,0,1,0,0,0,0),							array(1,0,0,0,0,1,0,0,0),							array(1,0,0,0,0,0,1,0,0),							array(1,0,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),						),						array(							array(1,1,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(1,1,1,1,1,1,1,0,0),							array(0,1,1,0,0,0,0,0,0),							array(0,1,1,1,0,0,0,0,0),							array(0,1,0,1,1,0,0,0,0),							array(0,1,0,0,1,1,0,0,0),							array(0,1,0,0,0,1,1,0,0),							array(0,1,0,0,0,0,1,1,0),							array(1,1,1,0,0,0,1,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,1,1,1,1,0,0,0,0),							array(1,1,0,0,1,1,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),						),					),		'S'	=>		array(						array(							array(0,0,1,1,1,1,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,0,1,1,1,1,1,0,0),							array(0,0,0,0,0,0,0,1,0),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,1,1,1,1,0,0),						),						array(							array(0,0,1,1,1,1,1,0,1),							array(0,1,0,0,0,0,0,1,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(0,0,1,1,1,1,1,0,0),							array(0,0,0,0,0,0,0,1,0),							array(0,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,1,0,0,0,0,0,1,0),							array(1,0,1,1,1,1,1,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,1,1,1,1,0,0,0,0),							array(1,0,0,0,0,1,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,1,0,0,0,0,0,0,0),							array(0,1,1,1,1,0,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(1,0,0,0,1,1,0,0,0),							array(0,1,1,1,1,0,0,0,0),						),					),		'T'	=>		array(						array(							array(1,1,1,1,1,1,1,1,1),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),						),						array(							array(1,1,1,1,1,1,1,1,1),							array(1,0,0,0,1,0,0,0,1),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,1,1,1,0,0,0),						),						array(							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,1,1,1,1,1,1,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,1,0,0,0),							array(0,0,0,0,0,1,1,1,0),						),					),		'U'	=>		array(						array(							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,1,1,1,1,0,0),						),						array(							array(1,0,0,0,0,0,0,0,0),							array(1,1,1,0,0,0,1,1,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,1,0,0,0,1,1,0),							array(0,0,1,1,1,1,1,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,1,0,0,0,0,0,1),							array(0,0,1,0,0,0,0,0,1),							array(0,0,1,0,0,0,0,0,1),							array(0,0,1,0,0,0,0,0,1),							array(0,0,1,0,0,0,0,0,1),							array(0,0,1,0,0,0,0,1,1),							array(0,0,1,1,0,0,1,1,1),							array(0,0,0,1,1,1,1,0,1),						),					),		'V'	=>		array(						array(							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(1,1,1,0,0,0,1,1,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),						),					),		'W'	=>		array(						array(							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,0,1,0,0,0,1),							array(1,0,0,1,0,1,0,0,1),							array(1,0,0,1,0,1,0,0,1),							array(1,0,0,1,0,1,0,0,1),							array(1,0,1,0,0,0,1,0,1),							array(1,0,1,0,0,0,1,0,1),							array(1,0,1,0,0,0,1,0,1),							array(1,1,0,0,0,0,0,1,1),							array(1,1,0,0,0,0,0,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(1,1,1,0,0,0,1,1,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,1,0,0,1,0),							array(0,1,0,0,1,0,0,1,0),							array(0,1,0,1,1,1,0,1,0),							array(0,1,0,1,0,1,0,1,0),							array(0,1,1,1,0,1,1,1,0),							array(0,1,1,0,0,0,1,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,0,0,0,0,0,0,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,1,0,0,1,0),							array(0,1,0,0,1,0,0,1,0),							array(0,1,0,1,1,1,0,1,0),							array(0,1,0,1,0,1,0,1,0),							array(0,1,1,1,0,1,1,1,0),							array(0,1,1,0,0,0,1,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,0,0,0,0,0,0,0,0),						),					),		'X'	=>		array(						array(							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,1,0,0,0,0,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(1,1,1,0,0,0,1,1,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,1,0,0,0,0,1,0,0),							array(0,1,0,0,0,0,0,1,0),							array(1,1,1,0,0,0,1,1,1),							array(0,0,0,0,0,0,0,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,1,0),							array(0,1,1,0,0,0,1,1,0),							array(0,0,1,1,0,1,1,0,0),							array(0,0,0,1,1,1,0,0,0),							array(0,0,0,1,1,1,0,0,0),							array(0,0,1,1,0,1,1,0,0),							array(0,1,1,0,0,0,1,1,0),							array(0,0,0,0,0,0,0,0,0),						),					),		'Y'	=>		array(						array(							array(1,0,0,0,0,0,0,0,1),							array(1,0,0,0,0,0,0,0,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(1,1,1,0,0,0,1,1,1),							array(0,1,0,0,0,0,0,1,0),							array(0,1,0,0,0,0,0,1,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,1,0,0,0,1,0,0),							array(0,0,0,1,0,1,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,1,1,1,0,0,0),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,1,0,0,0,0,1),							array(0,0,0,1,1,0,0,0,1),							array(0,0,0,0,1,0,0,1,1),							array(0,0,0,0,1,1,0,1,0),							array(0,0,0,0,0,1,1,1,0),							array(0,0,0,0,0,0,1,0,0),							array(0,0,0,0,0,1,1,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,1,1,0,0,0),							array(0,0,1,1,1,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),						),					),		'Z'	=>		array(						array(							array(1,1,1,1,1,1,1,1,1),							array(1,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,1,0),							array(0,0,0,0,0,0,1,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,1,0,0,0,0),							array(0,0,0,1,0,0,0,0,0),							array(0,0,0,1,0,0,0,0,0),							array(0,0,1,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,1),							array(1,1,1,1,1,1,1,1,1),						),						array(							array(1,1,1,1,1,1,1,1,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,0,1),							array(0,0,0,0,0,0,0,1,0),							array(0,0,0,0,0,0,1,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,0,0,0,1,0,0,0),							array(0,0,1,1,1,1,1,0,0),							array(0,0,0,1,0,0,0,0,0),							array(0,0,0,1,0,0,0,0,0),							array(0,0,1,0,0,0,0,0,0),							array(0,1,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,0,0,0,0,0,0,0,0),							array(1,1,1,1,1,1,1,1,1),						),						array(							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,0,0,0,0,0,0,0,0),							array(0,1,1,1,1,1,1,1,0),							array(0,0,0,0,0,1,1,0,0),							array(0,0,0,0,1,1,0,0,0),							array(0,0,0,1,1,0,0,0,0),							array(0,0,1,1,0,0,0,0,0),							array(0,0,1,0,0,0,0,0,0),							array(0,1,1,1,1,1,1,1,0),						),					),				);		return array(			'width'		=> 9,			'height'	=> 15,			'data'		=> array(			'A' =>	$chars['A'][mt_rand(0, min(sizeof($chars['A']), $config['captcha_gd_fonts']) -1)],			'B' =>	$chars['B'][mt_rand(0, min(sizeof($chars['B']), $config['captcha_gd_fonts']) -1)],			'C' =>	$chars['C'][mt_rand(0, min(sizeof($chars['C']), $config['captcha_gd_fonts']) -1)],			'D' =>	$chars['D'][mt_rand(0, min(sizeof($chars['D']), $config['captcha_gd_fonts']) -1)],			'E' =>	$chars['E'][mt_rand(0, min(sizeof($chars['E']), $config['captcha_gd_fonts']) -1)],			'F' =>	$chars['F'][mt_rand(0, min(sizeof($chars['F']), $config['captcha_gd_fonts']) -1)],			'G' =>	$chars['G'][mt_rand(0, min(sizeof($chars['G']), $config['captcha_gd_fonts']) -1)],			'H' =>	$chars['H'][mt_rand(0, min(sizeof($chars['H']), $config['captcha_gd_fonts']) -1)],			'I' =>	$chars['I'][mt_rand(0, min(sizeof($chars['I']), $config['captcha_gd_fonts']) -1)],			'J' =>	$chars['J'][mt_rand(0, min(sizeof($chars['J']), $config['captcha_gd_fonts']) -1)],			'K' =>	$chars['K'][mt_rand(0, min(sizeof($chars['K']), $config['captcha_gd_fonts']) -1)],			'L' =>	$chars['L'][mt_rand(0, min(sizeof($chars['L']), $config['captcha_gd_fonts']) -1)],			'M' =>	$chars['M'][mt_rand(0, min(sizeof($chars['M']), $config['captcha_gd_fonts']) -1)],  			'N' =>	$chars['N'][mt_rand(0, min(sizeof($chars['N']), $config['captcha_gd_fonts']) -1)],			'O' =>	$chars['O'][mt_rand(0, min(sizeof($chars['O']), $config['captcha_gd_fonts']) -1)],			'P' =>	$chars['P'][mt_rand(0, min(sizeof($chars['P']), $config['captcha_gd_fonts']) -1)],			'Q' =>	$chars['Q'][mt_rand(0, min(sizeof($chars['Q']), $config['captcha_gd_fonts']) -1)],			'R' =>	$chars['R'][mt_rand(0, min(sizeof($chars['R']), $config['captcha_gd_fonts']) -1)],			'S' =>	$chars['S'][mt_rand(0, min(sizeof($chars['S']), $config['captcha_gd_fonts']) -1)],			'T' =>	$chars['T'][mt_rand(0, min(sizeof($chars['T']), $config['captcha_gd_fonts']) -1)],			'U' =>	$chars['U'][mt_rand(0, min(sizeof($chars['U']), $config['captcha_gd_fonts']) -1)],			'V' =>	$chars['V'][mt_rand(0, min(sizeof($chars['V']), $config['captcha_gd_fonts']) -1)],			'W' =>	$chars['W'][mt_rand(0, min(sizeof($chars['W']), $config['captcha_gd_fonts']) -1)],			'X' =>	$chars['X'][mt_rand(0, min(sizeof($chars['X']), $config['captcha_gd_fonts']) -1)],			'Y' =>	$chars['Y'][mt_rand(0, min(sizeof($chars['Y']), $config['captcha_gd_fonts']) -1)],			'Z' =>	$chars['Z'][mt_rand(0, min(sizeof($chars['Z']), $config['captcha_gd_fonts']) -1)],			'1' => array(				array(0,0,0,1,1,0,0,0,0),				array(0,0,1,0,1,0,0,0,0),				array(0,1,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,1,1,1,1,1,1,1,0),			),			'2' => array(    // New '2' supplied by Anon				array(0,0,0,1,1,1,0,0,0),				array(0,0,1,0,0,0,1,0,0),				array(0,1,0,0,0,0,1,1,0),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,1,1),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,0,1,0,0),				array(0,0,0,0,0,1,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,1,0,0,0,0,0),				array(0,0,1,0,0,0,0,0,0),				array(0,1,0,0,0,0,0,0,0),				array(1,1,1,1,1,1,1,1,1),				array(0,0,0,0,0,0,0,0,0),			),			'3' => array(				array(0,0,1,1,1,1,1,0,0),				array(0,1,0,0,0,0,0,1,0),				array(1,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,1,1,0,0),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(0,1,0,0,0,0,0,1,0),				array(0,0,1,1,1,1,1,0,0),			),			'4' => array(				array(0,0,0,0,0,0,1,1,0),				array(0,0,0,0,0,1,0,1,0),				array(0,0,0,0,1,0,0,1,0),				array(0,0,0,1,0,0,0,1,0),				array(0,0,1,0,0,0,0,1,0),				array(0,1,0,0,0,0,0,1,0),				array(1,0,0,0,0,0,0,1,0),				array(1,0,0,0,0,0,0,1,0),				array(1,1,1,1,1,1,1,1,1),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,0,0,1,0),			),			'5' => array(				array(1,1,1,1,1,1,1,1,1),				array(1,0,0,0,0,0,0,0,0),				array(1,0,0,0,0,0,0,0,0),				array(1,0,0,0,0,0,0,0,0),				array(1,0,0,0,0,0,0,0,0),				array(0,1,0,0,0,0,0,0,0),				array(0,0,1,1,1,1,1,0,0),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(0,1,0,0,0,0,0,1,0),				array(0,0,1,1,1,1,1,0,0),			),			'6' => array(				array(0,0,1,1,1,1,1,0,0),				array(0,1,0,0,0,0,0,1,0),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,0),				array(1,0,0,0,0,0,0,0,0),				array(1,0,0,1,1,1,1,0,0),				array(1,0,1,0,0,0,0,1,0),				array(1,1,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(0,1,0,0,0,0,0,1,0),				array(0,0,1,1,1,1,1,0,0),			),			'7' => array(				array(1,1,1,1,1,1,1,1,1),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,0,0,1,0),				array(0,0,0,0,0,0,1,0,0),				array(0,0,0,0,0,1,0,0,0),				array(0,0,0,0,0,1,0,0,0),				array(0,0,0,0,1,0,0,0,0),				array(0,0,0,1,0,0,0,0,0),				array(0,0,0,1,0,0,0,0,0),				array(0,0,1,0,0,0,0,0,0),				array(0,1,0,0,0,0,0,0,0),				array(0,1,0,0,0,0,0,0,0),				array(1,0,0,0,0,0,0,0,0),				array(1,0,0,0,0,0,0,0,0),			),			'8' => array(				array(0,0,1,1,1,1,1,0,0),				array(0,1,0,0,0,0,0,1,0),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(0,1,0,0,0,0,0,1,0),				array(0,0,1,1,1,1,1,0,0),				array(0,1,0,0,0,0,0,1,0),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(0,1,0,0,0,0,0,1,0),				array(0,0,1,1,1,1,1,0,0),			),			'9' => array(				array(0,0,1,1,1,1,1,0,0),				array(0,1,0,0,0,0,0,1,0),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,1,1),				array(0,1,0,0,0,0,1,0,1),				array(0,0,1,1,1,1,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(0,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(1,0,0,0,0,0,0,0,1),				array(0,1,0,0,0,0,0,1,0),				array(0,0,1,1,1,1,1,0,0),			),			)		);	}}/*** @package VC*/class char_cube3d{	var $bitmap;	var $bitmap_width;	var $bitmap_height;	var $basis_matrix = array(array(1, 0, 0), array(0, 1, 0), array(0, 0, 1));	var $abs_x = array(1, 0);	var $abs_y = array(0, 1);	var $x = 0;	var $y = 1;	var $z = 2;	var $letter = '';	/**	*/	function char_cube3d(&$bitmaps, $letter)	{		$this->bitmap			= $bitmaps['data'][$letter];		$this->bitmap_width		= $bitmaps['width'];		$this->bitmap_height	= $bitmaps['height'];		$this->basis_matrix[0][0] = mt_rand(-600, 600);		$this->basis_matrix[0][1] = mt_rand(-600, 600);		$this->basis_matrix[0][2] = (mt_rand(0, 1) * 2000) - 1000;		$this->basis_matrix[1][0] = mt_rand(-1000, 1000);		$this->basis_matrix[1][1] = mt_rand(-1000, 1000);		$this->basis_matrix[1][2] = mt_rand(-1000, 1000);		$this->normalize($this->basis_matrix[0]);		$this->normalize($this->basis_matrix[1]);		$this->basis_matrix[2] = $this->cross_product($this->basis_matrix[0], $this->basis_matrix[1]);		$this->normalize($this->basis_matrix[2]);		// $this->basis_matrix[1] might not be (probably isn't) orthogonal to $basis_matrix[0]		$this->basis_matrix[1] = $this->cross_product($this->basis_matrix[0], $this->basis_matrix[2]);		$this->normalize($this->basis_matrix[1]);		// Make sure our cube is facing into the canvas (assuming +z == in)		for ($i = 0; $i < 3; ++$i)		{			if ($this->basis_matrix[$i][2] < 0)			{				$this->basis_matrix[$i][0] *= -1;				$this->basis_matrix[$i][1] *= -1;				$this->basis_matrix[$i][2] *= -1;			}		}		// Force our "z" basis vector to be the one with greatest absolute z value		$this->x = 0;		$this->y = 1;		$this->z = 2;		// Swap "y" with "z"		if ($this->basis_matrix[1][2] > $this->basis_matrix[2][2])		{			$this->z = 1;			$this->y = 2;		}		// Swap "x" with "z"		if ($this->basis_matrix[0][2] > $this->basis_matrix[$this->z][2])		{			$this->x = $this->z;			$this->z = 0;		}		// Still need to determine which of $x,$y are which.		// wrong orientation if y's y-component is less than it's x-component		// likewise if x's x-component is less than it's y-component		// if they disagree, go with the one with the greater weight difference.		// rotate if positive		$weight = (abs($this->basis_matrix[$this->x][1]) - abs($this->basis_matrix[$this->x][0])) + (abs($this->basis_matrix[$this->y][0]) - abs($this->basis_matrix[$this->y][1]));		// Swap "x" with "y"		if ($weight > 0)		{			list($this->x, $this->y) = array($this->y, $this->x);		}		$this->abs_x = array($this->basis_matrix[$this->x][0], $this->basis_matrix[$this->x][1]);		$this->abs_y = array($this->basis_matrix[$this->y][0], $this->basis_matrix[$this->y][1]);		if ($this->abs_x[0] < 0)		{			$this->abs_x[0] *= -1;			$this->abs_x[1] *= -1;		}		if ($this->abs_y[1] > 0)		{			$this->abs_y[0] *= -1;			$this->abs_y[1] *= -1;		}		$this->letter = $letter;	}	/**	* Draw a character	*/	function drawchar($scale, $xoff, $yoff, $img, $background, $colours)	{		$width	= $this->bitmap_width;		$height	= $this->bitmap_height;		$bitmap	= $this->bitmap;		$colour1 = $colours[array_rand($colours)];		$colour2 = $colours[array_rand($colours)];		$swapx = ($this->basis_matrix[$this->x][0] > 0);		$swapy = ($this->basis_matrix[$this->y][1] < 0);		for ($y = 0; $y < $height; ++$y)		{			for ($x = 0; $x < $width; ++$x)			{				$xp = ($swapx) ? ($width - $x - 1) : $x;				$yp = ($swapy) ? ($height - $y - 1) : $y;				if ($bitmap[$height - $yp - 1][$xp])				{					$dx = $this->scale($this->abs_x, ($xp - ($swapx ? ($width / 2) : ($width / 2) - 1)) * $scale);					$dy = $this->scale($this->abs_y, ($yp - ($swapy ? ($height / 2) : ($height / 2) - 1)) * $scale);					$xo = $xoff + $dx[0] + $dy[0];					$yo = $yoff + $dx[1] + $dy[1];					$origin = array(0, 0, 0);					$xvec = $this->scale($this->basis_matrix[$this->x], $scale);					$yvec = $this->scale($this->basis_matrix[$this->y], $scale);					$face_corner = $this->sum2($xvec, $yvec);					$zvec = $this->scale($this->basis_matrix[$this->z], $scale);					$x_corner = $this->sum2($xvec, $zvec);					$y_corner = $this->sum2($yvec, $zvec);					imagefilledpolygon($img, $this->gen_poly($xo, $yo, $origin, $xvec, $x_corner,$zvec), 4, $colour1);					imagefilledpolygon($img, $this->gen_poly($xo, $yo, $origin, $yvec, $y_corner,$zvec), 4, $colour2);					$face = $this->gen_poly($xo, $yo, $origin, $xvec, $face_corner, $yvec);					imagefilledpolygon($img, $face, 4, $background);					imagepolygon($img, $face, 4, $colour1);				}			}		}	}	/*	* return a roughly acceptable range of sizes for rendering with this texttype	*/	function range()	{		return array(3, 4);	}	/**	* Vector length	*/	function vectorlen($vector)	{		return sqrt(pow($vector[0], 2) + pow($vector[1], 2) + pow($vector[2], 2));	}	/**	* Normalize	*/	function normalize(&$vector, $length = 1)	{		$length = (( $length < 1) ? 1 : $length);		$length /= $this->vectorlen($vector);		$vector[0] *= $length;		$vector[1] *= $length;		$vector[2] *= $length;	}	/**	*/	function cross_product($vector1, $vector2)	{		$retval = array(0, 0, 0);		$retval[0] =  (($vector1[1] * $vector2[2]) - ($vector1[2] * $vector2[1]));		$retval[1] = -(($vector1[0] * $vector2[2]) - ($vector1[2] * $vector2[0]));		$retval[2] =  (($vector1[0] * $vector2[1]) - ($vector1[1] * $vector2[0]));		return $retval;	}	/**	*/	function sum($vector1, $vector2)	{		return array($vector1[0] + $vector2[0], $vector1[1] + $vector2[1], $vector1[2] + $vector2[2]);	}	/**	*/	function sum2($vector1, $vector2)	{		return array($vector1[0] + $vector2[0], $vector1[1] + $vector2[1]);	}	/**	*/	function scale($vector, $length)	{		if (sizeof($vector) == 2)		{			return array($vector[0] * $length, $vector[1] * $length);		}		return array($vector[0] * $length, $vector[1] * $length, $vector[2] * $length);	}	/**	*/	function gen_poly($xoff, $yoff, &$vec1, &$vec2, &$vec3, &$vec4)	{		$poly = array();		$poly[0] = $xoff + $vec1[0];		$poly[1] = $yoff + $vec1[1];		$poly[2] = $xoff + $vec2[0];		$poly[3] = $yoff + $vec2[1];		$poly[4] = $xoff + $vec3[0];		$poly[5] = $yoff + $vec3[1];		$poly[6] = $xoff + $vec4[0];		$poly[7] = $yoff + $vec4[1];		return $poly;	}	/**	* dimensions	*/	function dimensions($size)	{		$xn = $this->scale($this->basis_matrix[$this->x], -($this->bitmap_width / 2) * $size);		$xp = $this->scale($this->basis_matrix[$this->x], ($this->bitmap_width / 2) * $size);		$yn = $this->scale($this->basis_matrix[$this->y], -($this->bitmap_height / 2) * $size);		$yp = $this->scale($this->basis_matrix[$this->y], ($this->bitmap_height / 2) * $size);		$p = array();		$p[0] = $this->sum2($xn, $yn);		$p[1] = $this->sum2($xp, $yn);		$p[2] = $this->sum2($xp, $yp);		$p[3] = $this->sum2($xn, $yp);		$min_x = $max_x = $p[0][0];		$min_y = $max_y = $p[0][1];		for ($i = 1; $i < 4; ++$i)		{			$min_x = ($min_x > $p[$i][0]) ? $p[$i][0] : $min_x;			$min_y = ($min_y > $p[$i][1]) ? $p[$i][1] : $min_y;			$max_x = ($max_x < $p[$i][0]) ? $p[$i][0] : $max_x;			$max_y = ($max_y < $p[$i][1]) ? $p[$i][1] : $max_y;		}		return array($min_x, $min_y, $max_x, $max_y);	}}/*** @package VC*/class colour_manager{	var $img;	var $mode;	var $colours;	var $named_colours;	/**	* Create the colour manager, link it to the image resource	*/	function colour_manager($img, $background = false, $mode = 'ahsv')	{		$this->img = $img;		$this->mode = $mode;		$this->colours = array();		$this->named_colours = array();		if ($background !== false)		{			$bg = $this->allocate_named('background', $background);			imagefill($this->img, 0, 0, $bg);		}	}	/**	* Lookup a named colour resource	*/	function get_resource($named_colour)	{		if (isset($this->named_colours[$named_colour]))		{			return $this->named_colours[$named_colour];		}		if (isset($this->named_rgb[$named_colour]))		{			return $this->allocate_named($named_colour, $this->named_rgb[$named_colour], 'rgb');		}		return false;	}	/**	* Assign a name to a colour resource	*/	function name_colour($name, $resource)	{		$this->named_colours[$name] = $resource;	}	/**	* names and allocates a colour resource	*/	function allocate_named($name, $colour, $mode = false)	{		$resource = $this->allocate($colour, $mode);		if ($resource !== false)		{			$this->name_colour($name, $resource);		}		return $resource;	}	/**	* allocates a specified colour into the image	*/	function allocate($colour, $mode = false)	{		if ($mode === false)		{			$mode = $this->mode;		}				if (!is_array($colour))		{			if (isset($this->named_rgb[$colour]))			{				return $this->allocate_named($colour, $this->named_rgb[$colour], 'rgb');			}			if (!is_int($colour))			{				return false;			}			$mode = 'rgb';			$colour = array(255 & ($colour >> 16), 255 & ($colour >>  8), 255 & $colour);		}		if (isset($colour['mode']))		{			$mode = $colour['mode'];			unset($colour['mode']);		}		if (isset($colour['random']))		{			unset($colour['random']);			// everything else is params			return $this->random_colour($colour, $mode);		}		$rgb		= colour_manager::model_convert($colour, $mode, 'rgb');		$store		= ($this->mode == 'rgb') ? $rgb : colour_manager::model_convert($colour, $mode, $this->mode);		$resource	= imagecolorallocate($this->img, $rgb[0], $rgb[1], $rgb[2]);		$this->colours[$resource] = $store;		return $resource;	}	/**	* randomly generates a colour, with optional params	*/	function random_colour($params = array(), $mode = false)	{		if ($mode === false)		{			$mode = $this->mode;		}		switch ($mode)		{			case 'rgb':				// @TODO random rgb generation. do we intend to do this, or is it just too tedious?			break;			case 'ahsv':			case 'hsv':			default:				$default_params = array(					'hue_bias'			=> false,	// degree / 'r'/'g'/'b'/'c'/'m'/'y'   /'o'					'hue_range'			=> false,	// if hue bias, then difference range +/- from bias					'min_saturation'	=> 30,		// 0 - 100					'max_saturation'	=> 80,		// 0 - 100					'min_value'			=> 30,		// 0 - 100					'max_value'			=> 80,		// 0 - 100				);				$alt = ($mode == 'ahsv') ? true : false;				$params = array_merge($default_params, $params);				$min_hue		= 0;				$max_hue		= 359;				$min_saturation	= max(0, $params['min_saturation']);				$max_saturation	= min(100, $params['max_saturation']);				$min_value		= max(0, $params['min_value']);				$max_value		= min(100, $params['max_value']);				if ($params['hue_bias'] !== false)				{					if (is_numeric($params['hue_bias']))					{						$h = intval($params['hue_bias']) % 360;					}					else					{						switch ($params['hue_bias'])						{							case 'o':								$h = $alt ?  60 :  30;							break;							case 'y':								$h = $alt ? 120 :  60;							break;							case 'g':								$h = $alt ? 180 : 120;							break;							case 'c':								$h = $alt ? 210 : 180;							break;							case 'b':								$h = 240;							break;							case 'm':								$h = 300;							break;							case 'r':							default:								$h = 0;							break;						}					}					$min_hue = $h + 360;					$max_hue = $h + 360;					if ($params['hue_range'])					{						$min_hue -= min(180, $params['hue_range']);						$max_hue += min(180, $params['hue_range']);					}				}				$h = mt_rand($min_hue, $max_hue);				$s = mt_rand($min_saturation, $max_saturation);				$v = mt_rand($min_value, $max_value);				return $this->allocate(array($h, $s, $v), $mode);			break;		}	}	/**	*/	function colour_scheme($resource, $include_original = true)	{		$mode = 'hsv';		if (($pre = $this->get_resource($resource)) !== false)		{			$resource = $pre;		}		$colour = colour_manager::model_convert($this->colours[$resource], $this->mode, $mode);		$results = ($include_original) ? array($resource) : array();		$colour2 = $colour3 = $colour4 = $colour;		$colour2[0] += 150;		$colour3[0] += 180;		$colour4[0] += 210;		$results[] = $this->allocate($colour2, $mode);		$results[] = $this->allocate($colour3, $mode);		$results[] = $this->allocate($colour4, $mode);		return $results;	}	/**	*/	function mono_range($resource, $count = 5, $include_original = true)	{		if (is_array($resource))		{			$results = array();			for ($i = 0, $size = sizeof($resource); $i < $size; ++$i)			{				$results = array_merge($results, $this->mono_range($resource[$i], $count, $include_original));			}			return $results;		}		$mode = (in_array($this->mode, array('hsv', 'ahsv'), true) ? $this->mode : 'ahsv');		if (($pre = $this->get_resource($resource)) !== false)		{			$resource = $pre;		}		$colour = colour_manager::model_convert($this->colours[$resource], $this->mode, $mode);		$results = array();		if ($include_original)		{			$results[] = $resource;			$count--;		}		// This is a hard problem. I chicken out and try to maintain readability at the cost of less randomness.				while ($count > 0)		{			$colour[1] = ($colour[1] + mt_rand(40,60)) % 99;			$colour[2] = ($colour[2] + mt_rand(40,60));			$results[] = $this->allocate($colour, $mode);			$count--;		}		return $results;	}	/**	* Convert from one colour model to another	*/	function model_convert($colour, $from_model, $to_model)	{		if ($from_model == $to_model)		{			return $colour;		}		switch ($to_model)		{			case 'hsv':				switch ($from_model)				{					case 'ahsv':						return colour_manager::ah2h($colour);					break;					case 'rgb':						return colour_manager::rgb2hsv($colour);					break;				}			break;			case 'ahsv':				switch ($from_model)				{					case 'hsv':						return colour_manager::h2ah($colour);					break;					case 'rgb':						return colour_manager::h2ah(colour_manager::rgb2hsv($colour));					break;				}			break;			case 'rgb':				switch ($from_model)				{					case 'hsv':						return colour_manager::hsv2rgb($colour);					break;					case 'ahsv':						return colour_manager::hsv2rgb(colour_manager::ah2h($colour));					break;				}			break;		}		return false;	}	/**	* Slightly altered from wikipedia's algorithm	*/	function hsv2rgb($hsv)	{		colour_manager::normalize_hue($hsv[0]);		$h = $hsv[0];		$s = min(1, max(0, $hsv[1] / 100));		$v = min(1, max(0, $hsv[2] / 100));		// calculate hue sector		$hi = floor($hsv[0] / 60);		// calculate opposite colour		$p = $v * (1 - $s);		// calculate distance between hex vertices		$f = ($h / 60) - $hi;		// coming in or going out?		if (!($hi & 1))		{			$f = 1 - $f;		}		// calculate adjacent colour		$q = $v * (1 - ($f * $s));		switch ($hi)		{			case 0:				$rgb = array($v, $q, $p);			break;			case 1:				$rgb = array($q, $v, $p);			break;			case 2:				$rgb = array($p, $v, $q);			break;			case 3:				$rgb = array($p, $q, $v);			break;			case 4:				$rgb = array($q, $p, $v);			break;			case 5:				$rgb = array($v, $p, $q);			break;			default:				return array(0, 0, 0);			break;		}		return array(255 * $rgb[0], 255 * $rgb[1], 255 * $rgb[2]);	}	/**	* (more than) Slightly altered from wikipedia's algorithm	*/	function rgb2hsv($rgb)	{		$r = min(255, max(0, $rgb[0]));		$g = min(255, max(0, $rgb[1]));		$b = min(255, max(0, $rgb[2]));		$max = max($r, $g, $b);		$min = min($r, $g, $b);		$v = $max / 255;		$s = (!$max) ? 0 : 1 - ($min / $max);		// if max - min is 0, we want hue to be 0 anyway.		$h = $max - $min;		if ($h)		{			switch ($max)			{				case $g:					$h = 120 + (60 * ($b - $r) / $h);				break;				case $b:					$h = 240 + (60 * ($r - $g) / $h);				break;				case $r:					$h = 360 + (60 * ($g - $b) / $h);				break;			}		}		colour_manager::normalize_hue($h);		return array($h, $s * 100, $v * 100);	}	/**	*/	function normalize_hue(&$hue)	{		$hue %= 360;		if ($hue < 0)		{			$hue += 360;		}	}	/**	* Alternate hue to hue	*/	function ah2h($ahue)	{		if (is_array($ahue))		{			$ahue[0] = colour_manager::ah2h($ahue[0]);			return $ahue;		}		colour_manager::normalize_hue($ahue);		// blue through red is already ok		if ($ahue >= 240)		{			return $ahue;		}		// ahue green is at 180		if ($ahue >= 180)		{			// return (240 - (2 * (240 - $ahue)));			return (2 * $ahue) - 240; // equivalent		}		// ahue yellow is at 120   (RYB rather than RGB)		if ($ahue >= 120)		{			return $ahue - 60;		}		return $ahue / 2;	}	/**	* hue to Alternate hue	*/	function h2ah($hue)	{		if (is_array($hue))		{			$hue[0] = colour_manager::h2ah($hue[0]);			return $hue;		}		colour_manager::normalize_hue($hue);		// blue through red is already ok		if ($hue >= 240)		{			return $hue;		}		else if ($hue <= 60)		{			return $hue * 2;		}		else if ($hue <= 120)		{			return $hue + 60;		}		else		{			return ($hue + 240) / 2;		}	}}?>
<?php//// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");//// Do not change anything below this line.//// Just a handy script to completely wipe out the contents of a // database.. Use with caution :)if(!isset($submit)){	?>	<FORM ACTION="<?php echo $PHP_SELF?>" METHOD="post" >	<table>	<tr>		<td>DB host:</td>		<td><INPUT TYPE="text" name="dbhost" value="localhost"></td>	</tr><tr>		<td>DB name:</td>		<td><INPUT TYPE="text" name="dbname" value="phpBB"></td>	</tr><tr>		<td>DB username:</td>		<td><INPUT TYPE="text" name="dbuser" value="root"></td>	</tr><tr>		<td>DB password:</td>		<td><INPUT TYPE="password" name="dbpass"></td>	</tr></table>	<INPUT TYPE="submit" name="submit" value="Submit">	</FORM>	<?php}else{	mysql_connect($dbhost, $dbuser, $dbpass) || die(mysql_error());	mysql_select_db($dbname);	$result = mysql_query("SHOW TABLES");	while($row = mysql_fetch_row($result)){		$table = $row[0];		print "Going to drop $table...";		mysql_query("DROP TABLE $table") || die();		print "Done.<br>\n";		flush();	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** - Able to check for new module versions (modes changed/adjusted/added/removed)* Icons for:* - module enabled and displayed (common)* - module enabled and not displayed* - module deactivated* - category (enabled)* - category disabled*//*** @package acp*/class acp_modules{	var $module_class = '';	var $parent_id;	var $u_action;	function main($id, $mode)	{		global $db, $user, $auth, $template, $module;		global $config, $phpbb_admin_path, $phpbb_root_path, $phpEx;		// Set a global define for modules we might include (the author is able to prevent execution of code by checking this constant)		define('MODULE_INCLUDE', true);		$user->add_lang('acp/modules');		$this->tpl_name = 'acp_modules';		// module class		$this->module_class = $mode;		if ($this->module_class == 'ucp')		{			$user->add_lang('ucp');		}		else if ($this->module_class == 'mcp')		{			$user->add_lang('mcp');		}		if ($module->p_class != $this->module_class)		{			$module->add_mod_info($this->module_class);		}		$this->page_title = strtoupper($this->module_class);		$this->parent_id = request_var('parent_id', 0);		$module_id = request_var('m', 0);		$action = request_var('action', '');		$errors = array();		switch ($action)		{			case 'delete':				if (!$module_id)				{					trigger_error($user->lang['NO_MODULE_ID'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				if (confirm_box(true))				{					// Make sure we are not directly within a module					if ($module_id == $this->parent_id)					{						$sql = 'SELECT parent_id							FROM ' . MODULES_TABLE . '							WHERE module_id = ' . $module_id;						$result = $db->sql_query($sql);						$this->parent_id = (int) $db->sql_fetchfield('parent_id');						$db->sql_freeresult($result);					}					$errors = $this->delete_module($module_id);					if (!sizeof($errors))					{						$this->remove_cache_file();						trigger_error($user->lang['MODULE_DELETED'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id));					}				}				else				{					confirm_box(false, 'DELETE_MODULE', build_hidden_fields(array(						'i'			=> $id,						'mode'		=> $mode,						'parent_id'	=> $this->parent_id,						'module_id'	=> $module_id,						'action'	=> $action,					)));				}			break;						case 'enable':			case 'disable':				if (!$module_id)				{					trigger_error($user->lang['NO_MODULE_ID'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . MODULES_TABLE . "					WHERE module_class = '" . $db->sql_escape($this->module_class) . "'						AND module_id = $module_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['NO_MODULE'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				$sql = 'UPDATE ' . MODULES_TABLE . '					SET module_enabled = ' . (($action == 'enable') ? 1 : 0) . "					WHERE module_class = '" . $db->sql_escape($this->module_class) . "'						AND module_id = $module_id";				$db->sql_query($sql);				add_log('admin', 'LOG_MODULE_' . strtoupper($action), $this->lang_name($row['module_langname']));				$this->remove_cache_file();			break;			case 'move_up':			case 'move_down':				if (!$module_id)				{					trigger_error($user->lang['NO_MODULE_ID'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . MODULES_TABLE . "					WHERE module_class = '" . $db->sql_escape($this->module_class) . "'						AND module_id = $module_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['NO_MODULE'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				$move_module_name = $this->move_module_by($row, $action, 1);				if ($move_module_name !== false)				{					add_log('admin', 'LOG_MODULE_' . strtoupper($action), $this->lang_name($row['module_langname']), $move_module_name);					$this->remove_cache_file();				}					break;			case 'quickadd':				$quick_install = request_var('quick_install', '');				if (confirm_box(true))				{					if (!$quick_install || strpos($quick_install, '::') === false)					{						break;					}					list($module_basename, $module_mode) = explode('::', $quick_install);					// Check if module name and mode exist...					$fileinfo = $this->get_module_infos($module_basename);					$fileinfo = $fileinfo[$module_basename];					if (isset($fileinfo['modes'][$module_mode]))					{						$module_data = array(							'module_basename'	=> $module_basename,							'module_enabled'	=> 0,							'module_display'	=> (isset($fileinfo['modes'][$module_mode]['display'])) ? $fileinfo['modes'][$module_mode]['display'] : 1,							'parent_id'			=> $this->parent_id,							'module_class'		=> $this->module_class,							'module_langname'	=> $fileinfo['modes'][$module_mode]['title'],							'module_mode'		=> $module_mode,							'module_auth'		=> $fileinfo['modes'][$module_mode]['auth'],						);						$errors = $this->update_module_data($module_data);						if (!sizeof($errors))						{							$this->remove_cache_file();								trigger_error($user->lang['MODULE_ADDED'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id));						}					}				}				else				{					confirm_box(false, 'ADD_MODULE', build_hidden_fields(array(						'i'			=> $id,						'mode'		=> $mode,						'parent_id'	=> $this->parent_id,						'action'	=> 'quickadd',						'quick_install'	=> $quick_install,					)));				}			break;			case 'edit':				if (!$module_id)				{					trigger_error($user->lang['NO_MODULE_ID'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}								$module_row = $this->get_module_row($module_id);			// no break			case 'add':				if ($action == 'add')				{					$module_row = array(						'module_basename'	=> '',						'module_enabled'	=> 0,						'module_display'	=> 1,						'parent_id'			=> 0,						'module_langname'	=> utf8_normalize_nfc(request_var('module_langname', '', true)),						'module_mode'		=> '',						'module_auth'		=> '',					);				}								$module_data = array();				$module_data['module_basename'] = request_var('module_basename', (string) $module_row['module_basename']);				$module_data['module_enabled'] = request_var('module_enabled', (int) $module_row['module_enabled']);				$module_data['module_display'] = request_var('module_display', (int) $module_row['module_display']);				$module_data['parent_id'] = request_var('module_parent_id', (int) $module_row['parent_id']);				$module_data['module_class'] = $this->module_class;				$module_data['module_langname'] = utf8_normalize_nfc(request_var('module_langname', (string) $module_row['module_langname'], true));				$module_data['module_mode'] = request_var('module_mode', (string) $module_row['module_mode']);				$submit = (isset($_POST['submit'])) ? true : false;				if ($submit)				{					if (!$module_data['module_langname'])					{						trigger_error($user->lang['NO_MODULE_LANGNAME'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);					}					$module_type = request_var('module_type', 'category');					if ($module_type == 'category')					{						$module_data['module_basename'] = $module_data['module_mode'] = $module_data['module_auth'] = '';						$module_data['module_display'] = 1;					}					if ($action == 'edit')					{						$module_data['module_id'] = $module_id;					}					// Adjust auth row					if ($module_data['module_basename'] && $module_data['module_mode'])					{						$fileinfo = $this->get_module_infos($module_data['module_basename']);						$module_data['module_auth'] = $fileinfo[$module_data['module_basename']]['modes'][$module_data['module_mode']]['auth'];					}					$errors = $this->update_module_data($module_data);					if (!sizeof($errors))					{						$this->remove_cache_file();							trigger_error((($action == 'add') ? $user->lang['MODULE_ADDED'] : $user->lang['MODULE_EDITED']) . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id));					}				}				// Category/not category?				$is_cat = (!$module_data['module_basename']) ? true : false;				// Get module information				$module_infos = $this->get_module_infos();				// Build name options				$s_name_options = $s_mode_options = '';				foreach ($module_infos as $option => $values)				{					if (!$module_data['module_basename'])					{						$module_data['module_basename'] = $option;					}					// Name options					$s_name_options .= '<option value="' . $option . '"' . (($option == $module_data['module_basename']) ? ' selected="selected"' : '') . '>' . $this->lang_name($values['title']) . ' [' . $this->module_class . '_' . $option . ']</option>';					$template->assign_block_vars('m_names', array('NAME' => $option, 'A_NAME' => addslashes($option)));					// Build module modes					foreach ($values['modes'] as $m_mode => $m_values)					{						if ($option == $module_data['module_basename'])						{							$s_mode_options .= '<option value="' . $m_mode . '"' . (($m_mode == $module_data['module_mode']) ? ' selected="selected"' : '') . '>' . $this->lang_name($m_values['title']) . '</option>';						}												$template->assign_block_vars('m_names.modes', array(							'OPTION'		=> $m_mode,							'VALUE'			=> $this->lang_name($m_values['title']),							'A_OPTION'		=> addslashes($m_mode),							'A_VALUE'		=> addslashes($this->lang_name($m_values['title'])))						);					}				}								$s_cat_option = '<option value="0"' . (($module_data['parent_id'] == 0) ? ' selected="selected"' : '') . '>' . $user->lang['NO_PARENT'] . '</option>';				$template->assign_vars(array_merge(array(					'S_EDIT_MODULE'		=> true,					'S_IS_CAT'			=> $is_cat,					'S_CAT_OPTIONS'		=> $s_cat_option . $this->make_module_select($module_data['parent_id'], ($action == 'edit') ? $module_row['module_id'] : false, false, false, false, true),					'S_MODULE_NAMES'	=> $s_name_options,					'S_MODULE_MODES'	=> $s_mode_options,					'U_BACK'			=> $this->u_action . '&amp;parent_id=' . $this->parent_id,					'U_EDIT_ACTION'		=> $this->u_action . '&amp;parent_id=' . $this->parent_id,					'L_TITLE'			=> $user->lang[strtoupper($action) . '_MODULE'],										'MODULENAME'		=> $this->lang_name($module_data['module_langname']),					'ACTION'			=> $action,					'MODULE_ID'			=> $module_id,				),					array_change_key_case($module_data, CASE_UPPER))				);				if (sizeof($errors))				{					$template->assign_vars(array(						'S_ERROR'	=> true,						'ERROR_MSG'	=> implode('<br />', $errors))					);				}				return;			break;		}		// Default management page		if (sizeof($errors))		{			$template->assign_vars(array(				'S_ERROR'	=> true,				'ERROR_MSG'	=> implode('<br />', $errors))			);		}		if (!$this->parent_id)		{			$navigation = strtoupper($this->module_class);		}		else		{			$navigation = '<a href="' . $this->u_action . '">' . strtoupper($this->module_class) . '</a>';			$modules_nav = $this->get_module_branch($this->parent_id, 'parents', 'descending');			foreach ($modules_nav as $row)			{				$langname = $this->lang_name($row['module_langname']);				if ($row['module_id'] == $this->parent_id)				{					$navigation .= ' -&gt; ' . $langname;				}				else				{					$navigation .= ' -&gt; <a href="' . $this->u_action . '&amp;parent_id=' . $row['module_id'] . '">' . $langname . '</a>';				}			}		}		// Jumpbox		$module_box = $this->make_module_select($this->parent_id, false, false, false, false);		$sql = 'SELECT *			FROM ' . MODULES_TABLE . "			WHERE parent_id = {$this->parent_id}				AND module_class = '" . $db->sql_escape($this->module_class) . "'			ORDER BY left_id";		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			do			{				$langname = $this->lang_name($row['module_langname']);				if (!$row['module_enabled'])				{					$module_image = '<img src="images/icon_folder_lock.gif" alt="' . $user->lang['DEACTIVATED_MODULE'] .'" />';				}				else				{					$module_image = (!$row['module_basename'] || $row['left_id'] + 1 != $row['right_id']) ? '<img src="images/icon_subfolder.gif" alt="' . $user->lang['CATEGORY'] . '" />' : '<img src="images/icon_folder.gif" alt="' . $user->lang['MODULE'] . '" />';				}				$url = $this->u_action . '&amp;parent_id=' . $this->parent_id . '&amp;m=' . $row['module_id'];				$template->assign_block_vars('modules', array(					'MODULE_IMAGE'		=> $module_image,					'MODULE_TITLE'		=> $langname,					'MODULE_ENABLED'	=> ($row['module_enabled']) ? true : false,					'MODULE_DISPLAYED'	=> ($row['module_display']) ? true : false,					'S_ACP_CAT_SYSTEM'			=> ($this->module_class == 'acp' && $row['module_langname'] == 'ACP_CAT_SYSTEM') ? true : false,					'S_ACP_MODULE_MANAGEMENT'	=> ($this->module_class == 'acp' && ($row['module_basename'] == 'modules' || $row['module_langname'] == 'ACP_MODULE_MANAGEMENT')) ? true : false,					'U_MODULE'			=> $this->u_action . '&amp;parent_id=' . $row['module_id'],					'U_MOVE_UP'			=> $url . '&amp;action=move_up',					'U_MOVE_DOWN'		=> $url . '&amp;action=move_down',					'U_EDIT'			=> $url . '&amp;action=edit',					'U_DELETE'			=> $url . '&amp;action=delete',					'U_ENABLE'			=> $url . '&amp;action=enable',					'U_DISABLE'			=> $url . '&amp;action=disable')				);			}			while ($row = $db->sql_fetchrow($result));		}		else if ($this->parent_id)		{			$row = $this->get_module_row($this->parent_id);			$url = $this->u_action . '&amp;parent_id=' . $this->parent_id . '&amp;m=' . $row['module_id'];			$template->assign_vars(array(				'S_NO_MODULES'		=> true,				'MODULE_TITLE'		=> $langname,				'MODULE_ENABLED'	=> ($row['module_enabled']) ? true : false,				'MODULE_DISPLAYED'	=> ($row['module_display']) ? true : false,				'U_EDIT'			=> $url . '&amp;action=edit',				'U_DELETE'			=> $url . '&amp;action=delete',				'U_ENABLE'			=> $url . '&amp;action=enable',				'U_DISABLE'			=> $url . '&amp;action=disable')			);		}		$db->sql_freeresult($result);		// Quick adding module		$module_infos = $this->get_module_infos();		// Build quick options		$s_install_options = '';		foreach ($module_infos as $option => $values)		{			// Name options			$s_install_options .= '<optgroup label="' . $this->lang_name($values['title']) . ' [' . $this->module_class . '_' . $option . ']">';			// Build module modes			foreach ($values['modes'] as $m_mode => $m_values)			{				$s_install_options .= '<option value="' . $option . '::' . $m_mode . '">&nbsp; &nbsp;' . $this->lang_name($m_values['title']) . '</option>';			}			$s_install_options .= '</optgroup>';		}		$template->assign_vars(array(			'U_SEL_ACTION'		=> $this->u_action,			'U_ACTION'			=> $this->u_action . '&amp;parent_id=' . $this->parent_id,			'NAVIGATION'		=> $navigation,			'MODULE_BOX'		=> $module_box,			'PARENT_ID'			=> $this->parent_id,			'S_INSTALL_OPTIONS'	=> $s_install_options,			)		);	}	/**	* Get row for specified module	*/	function get_module_row($module_id)	{		global $db, $user;		$sql = 'SELECT *			FROM ' . MODULES_TABLE . "			WHERE module_class = '" . $db->sql_escape($this->module_class) . "'				AND module_id = $module_id";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);				if (!$row)		{			trigger_error($user->lang['NO_MODULE'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);		}		return $row;	}		/**	* Get available module information from module files	*/	function get_module_infos($module = '', $module_class = false)	{		global $phpbb_root_path, $phpEx;				$module_class = ($module_class === false) ? $this->module_class : $module_class;		$directory = $phpbb_root_path . 'includes/' . $module_class . '/info/';		$fileinfo = array();		if (!$module)		{			$dh = @opendir($directory);			if (!$dh)			{				return $fileinfo;			}			while (($file = readdir($dh)) !== false)			{				// Is module?				if (preg_match('/^' . $module_class . '_.+\.' . $phpEx . '$/', $file))				{					$class = str_replace(".$phpEx", '', $file) . '_info';					if (!class_exists($class))					{						include($directory . $file);					}					// Get module title tag					if (class_exists($class))					{						$c_class = new $class();						$module_info = $c_class->module();						$fileinfo[str_replace($module_class . '_', '', $module_info['filename'])] = $module_info;					}				}			}			closedir($dh);			ksort($fileinfo);		}		else		{			$filename = $module_class . '_' . basename($module);			$class = $module_class . '_' . basename($module) . '_info';			if (!class_exists($class))			{				include($directory . $filename . '.' . $phpEx);			}			// Get module title tag			if (class_exists($class))			{				$c_class = new $class();				$module_info = $c_class->module();				$fileinfo[str_replace($module_class . '_', '', $module_info['filename'])] = $module_info;			}		}				return $fileinfo;	}	/**	* Simple version of jumpbox, just lists modules	*/	function make_module_select($select_id = false, $ignore_id = false, $ignore_acl = false, $ignore_nonpost = false, $ignore_emptycat = true, $ignore_noncat = false)	{		global $db, $user, $auth, $config;		$sql = 'SELECT module_id, module_enabled, module_basename, parent_id, module_langname, left_id, right_id, module_auth			FROM ' . MODULES_TABLE . "			WHERE module_class = '" . $db->sql_escape($this->module_class) . "'			ORDER BY left_id ASC";		$result = $db->sql_query($sql);		$right = $iteration = 0;		$padding_store = array('0' => '');		$module_list = $padding = '';		while ($row = $db->sql_fetchrow($result))		{			if ($row['left_id'] < $right)			{				$padding .= '&nbsp; &nbsp;';				$padding_store[$row['parent_id']] = $padding;			}			else if ($row['left_id'] > $right + 1)			{				$padding = (isset($padding_store[$row['parent_id']])) ? $padding_store[$row['parent_id']] : '';			}			$right = $row['right_id'];			if (!$ignore_acl && $row['module_auth'])			{				// We use zero as the forum id to check - global setting.				if (!p_master::module_auth($row['module_auth'], 0))				{					continue;				}			}			// ignore this module?			if ((is_array($ignore_id) && in_array($row['module_id'], $ignore_id)) || $row['module_id'] == $ignore_id)			{				continue;			}			// empty category			if (!$row['module_basename'] && ($row['left_id'] + 1 == $row['right_id']) && $ignore_emptycat)			{				continue;			}			// ignore non-category?			if ($row['module_basename'] && $ignore_noncat)			{				continue;			}			$selected = (is_array($select_id)) ? ((in_array($row['module_id'], $select_id)) ? ' selected="selected"' : '') : (($row['module_id'] == $select_id) ? ' selected="selected"' : '');			$langname = $this->lang_name($row['module_langname']);			$module_list .= '<option value="' . $row['module_id'] . '"' . $selected . ((!$row['module_enabled']) ? ' class="disabled"' : '') . '>' . $padding . $langname . '</option>';			$iteration++;		}		$db->sql_freeresult($result);		unset($padding_store);		return $module_list;	}	/**	* Get module branch	*/	function get_module_branch($module_id, $type = 'all', $order = 'descending', $include_module = true)	{		global $db;		switch ($type)		{			case 'parents':				$condition = 'm1.left_id BETWEEN m2.left_id AND m2.right_id';			break;			case 'children':				$condition = 'm2.left_id BETWEEN m1.left_id AND m1.right_id';			break;			default:				$condition = 'm2.left_id BETWEEN m1.left_id AND m1.right_id OR m1.left_id BETWEEN m2.left_id AND m2.right_id';			break;		}		$rows = array();		$sql = 'SELECT m2.*			FROM ' . MODULES_TABLE . ' m1			LEFT JOIN ' . MODULES_TABLE . " m2 ON ($condition)			WHERE m1.module_class = '" . $db->sql_escape($this->module_class) . "'				AND m2.module_class = '" . $db->sql_escape($this->module_class) . "'				AND m1.module_id = $module_id			ORDER BY m2.left_id " . (($order == 'descending') ? 'ASC' : 'DESC');		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if (!$include_module && $row['module_id'] == $module_id)			{				continue;			}			$rows[] = $row;		}		$db->sql_freeresult($result);		return $rows;	}	/**	* Remove modules cache file	*/	function remove_cache_file()	{		global $cache;		// Sanitise for future path use, it's escaped as appropriate for queries		$p_class = str_replace(array('.', '/', '\\'), '', basename($this->module_class));				$cache->destroy('_modules_' . $p_class);		// Additionally remove sql cache		$cache->destroy('sql', MODULES_TABLE);	}	/**	* Return correct language name	*/	function lang_name($module_langname)	{		global $user;		return (!empty($user->lang[$module_langname])) ? $user->lang[$module_langname] : $module_langname;	}	/**	* Update/Add module	*	* @param bool $run_inline if set to true errors will be returned and no logs being written	*/	function update_module_data(&$module_data, $run_inline = false)	{		global $db, $user;		if (!isset($module_data['module_id']))		{			// no module_id means we're creating a new category/module			if ($module_data['parent_id'])			{				$sql = 'SELECT left_id, right_id					FROM ' . MODULES_TABLE . "					WHERE module_class = '" . $db->sql_escape($module_data['module_class']) . "'						AND module_id = " . (int) $module_data['parent_id'];				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					if ($run_inline)					{						return 'PARENT_NO_EXIST';					}					trigger_error($user->lang['PARENT_NO_EXIST'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				// Workaround				$row['left_id'] = (int) $row['left_id'];				$row['right_id'] = (int) $row['right_id'];				$sql = 'UPDATE ' . MODULES_TABLE . "					SET left_id = left_id + 2, right_id = right_id + 2					WHERE module_class = '" . $db->sql_escape($module_data['module_class']) . "'						AND left_id > {$row['right_id']}";				$db->sql_query($sql);				$sql = 'UPDATE ' . MODULES_TABLE . "					SET right_id = right_id + 2					WHERE module_class = '" . $db->sql_escape($module_data['module_class']) . "'						AND {$row['left_id']} BETWEEN left_id AND right_id";				$db->sql_query($sql);				$module_data['left_id'] = (int) $row['right_id'];				$module_data['right_id'] = (int) $row['right_id'] + 1;			}			else			{				$sql = 'SELECT MAX(right_id) AS right_id					FROM ' . MODULES_TABLE . "					WHERE module_class = '" . $db->sql_escape($module_data['module_class']) . "'";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$module_data['left_id'] = (int) $row['right_id'] + 1;				$module_data['right_id'] = (int) $row['right_id'] + 2;			}			$sql = 'INSERT INTO ' . MODULES_TABLE . ' ' . $db->sql_build_array('INSERT', $module_data);			$db->sql_query($sql);			$module_data['module_id'] = $db->sql_nextid();			if (!$run_inline)			{				add_log('admin', 'LOG_MODULE_ADD', $this->lang_name($module_data['module_langname']));			}		}		else		{			$row = $this->get_module_row($module_data['module_id']);			if ($module_data['module_basename'] && !$row['module_basename'])			{				// we're turning a category into a module				$branch = $this->get_module_branch($module_data['module_id'], 'children', 'descending', false);				if (sizeof($branch))				{					return array($user->lang['NO_CATEGORY_TO_MODULE']);				}			}			if ($row['parent_id'] != $module_data['parent_id'])			{				$this->move_module($module_data['module_id'], $module_data['parent_id']);			}			$update_ary = $module_data;			unset($update_ary['module_id']);			$sql = 'UPDATE ' . MODULES_TABLE . '				SET ' . $db->sql_build_array('UPDATE', $update_ary) . "				WHERE module_class = '" . $db->sql_escape($module_data['module_class']) . "'					AND module_id = " . (int) $module_data['module_id'];			$db->sql_query($sql);			if (!$run_inline)			{				add_log('admin', 'LOG_MODULE_EDIT', $this->lang_name($module_data['module_langname']));			}		}		return array();	}	/**	* Move module around the tree	*/	function move_module($from_module_id, $to_parent_id)	{		global $db;		$moved_modules = $this->get_module_branch($from_module_id, 'children', 'descending');		$from_data = $moved_modules[0];		$diff = sizeof($moved_modules) * 2;		$moved_ids = array();		for ($i = 0; $i < sizeof($moved_modules); ++$i)		{			$moved_ids[] = $moved_modules[$i]['module_id'];		}		// Resync parents		$sql = 'UPDATE ' . MODULES_TABLE . "			SET right_id = right_id - $diff			WHERE module_class = '" . $db->sql_escape($this->module_class) . "'				AND left_id < " . (int) $from_data['right_id'] . '				AND right_id > ' . (int) $from_data['right_id'];		$db->sql_query($sql);		// Resync righthand side of tree		$sql = 'UPDATE ' . MODULES_TABLE . "			SET left_id = left_id - $diff, right_id = right_id - $diff			WHERE module_class = '" . $db->sql_escape($this->module_class) . "'				AND left_id > " . (int) $from_data['right_id'];		$db->sql_query($sql);		if ($to_parent_id > 0)		{			$to_data = $this->get_module_row($to_parent_id);			// Resync new parents			$sql = 'UPDATE ' . MODULES_TABLE . "				SET right_id = right_id + $diff				WHERE module_class = '" . $db->sql_escape($this->module_class) . "'					AND " . (int) $to_data['right_id'] . ' BETWEEN left_id AND right_id					AND ' . $db->sql_in_set('module_id', $moved_ids, true);			$db->sql_query($sql);			// Resync the righthand side of the tree			$sql = 'UPDATE ' . MODULES_TABLE . "				SET left_id = left_id + $diff, right_id = right_id + $diff				WHERE module_class = '" . $db->sql_escape($this->module_class) . "'					AND left_id > " . (int) $to_data['right_id'] . '					AND ' . $db->sql_in_set('module_id', $moved_ids, true);			$db->sql_query($sql);			// Resync moved branch			$to_data['right_id'] += $diff;			if ($to_data['right_id'] > $from_data['right_id'])			{				$diff = '+ ' . ($to_data['right_id'] - $from_data['right_id'] - 1);			}			else			{				$diff = '- ' . abs($to_data['right_id'] - $from_data['right_id'] - 1);			}		}		else		{			$sql = 'SELECT MAX(right_id) AS right_id				FROM ' . MODULES_TABLE . "				WHERE module_class = '" . $db->sql_escape($this->module_class) . "'					AND " . $db->sql_in_set('module_id', $moved_ids, true);			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			$diff = '+ ' . (int) ($row['right_id'] - $from_data['left_id'] + 1);		}		$sql = 'UPDATE ' . MODULES_TABLE . "			SET left_id = left_id $diff, right_id = right_id $diff			WHERE module_class = '" . $db->sql_escape($this->module_class) . "'				AND " . $db->sql_in_set('module_id', $moved_ids);		$db->sql_query($sql);	}	/**	* Remove module from tree	*/	function delete_module($module_id)	{		global $db, $user;		$row = $this->get_module_row($module_id);		$branch = $this->get_module_branch($module_id, 'children', 'descending', false);		if (sizeof($branch))		{			return array($user->lang['CANNOT_REMOVE_MODULE']);		}		// If not move		$diff = 2;		$sql = 'DELETE FROM ' . MODULES_TABLE . "			WHERE module_class = '" . $db->sql_escape($this->module_class) . "'				AND module_id = $module_id";		$db->sql_query($sql);		$row['right_id'] = (int) $row['right_id'];		$row['left_id'] = (int) $row['left_id'];		// Resync tree		$sql = 'UPDATE ' . MODULES_TABLE . "			SET right_id = right_id - $diff			WHERE module_class = '" . $db->sql_escape($this->module_class) . "'				AND left_id < {$row['right_id']} AND right_id > {$row['right_id']}";		$db->sql_query($sql);		$sql = 'UPDATE ' . MODULES_TABLE . "			SET left_id = left_id - $diff, right_id = right_id - $diff			WHERE module_class = '" . $db->sql_escape($this->module_class) . "'				AND left_id > {$row['right_id']}";		$db->sql_query($sql);		add_log('admin', 'LOG_MODULE_REMOVED', $this->lang_name($row['module_langname']));		return array();	}	/**	* Move module position by $steps up/down	*/	function move_module_by($module_row, $action = 'move_up', $steps = 1)	{		global $db;		/**		* Fetch all the siblings between the module's current spot		* and where we want to move it to. If there are less than $steps		* siblings between the current spot and the target then the		* module will move as far as possible		*/		$sql = 'SELECT module_id, left_id, right_id, module_langname			FROM ' . MODULES_TABLE . "			WHERE module_class = '" . $db->sql_escape($this->module_class) . "'				AND parent_id = " . (int) $module_row['parent_id'] . '				AND ' . (($action == 'move_up') ? 'right_id < ' . (int) $module_row['right_id'] . ' ORDER BY right_id DESC' : 'left_id > ' . (int) $module_row['left_id'] . ' ORDER BY left_id ASC');		$result = $db->sql_query_limit($sql, $steps);		$target = array();		while ($row = $db->sql_fetchrow($result))		{			$target = $row;		}		$db->sql_freeresult($result);		if (!sizeof($target))		{			// The module is already on top or bottom			return false;		}		/**		* $left_id and $right_id define the scope of the nodes that are affected by the move.		* $diff_up and $diff_down are the values to substract or add to each node's left_id		* and right_id in order to move them up or down.		* $move_up_left and $move_up_right define the scope of the nodes that are moving		* up. Other nodes in the scope of ($left_id, $right_id) are considered to move down.		*/		if ($action == 'move_up')		{			$left_id = (int) $target['left_id'];			$right_id = (int) $module_row['right_id'];			$diff_up = (int) ($module_row['left_id'] - $target['left_id']);			$diff_down = (int) ($module_row['right_id'] + 1 - $module_row['left_id']);			$move_up_left = (int) $module_row['left_id'];			$move_up_right = (int) $module_row['right_id'];		}		else		{			$left_id = (int) $module_row['left_id'];			$right_id = (int) $target['right_id'];			$diff_up = (int) ($module_row['right_id'] + 1 - $module_row['left_id']);			$diff_down = (int) ($target['right_id'] - $module_row['right_id']);			$move_up_left = (int) ($module_row['right_id'] + 1);			$move_up_right = (int) $target['right_id'];		}		// Now do the dirty job		$sql = 'UPDATE ' . MODULES_TABLE . "			SET left_id = left_id + CASE				WHEN left_id BETWEEN {$move_up_left} AND {$move_up_right} THEN -{$diff_up}				ELSE {$diff_down}			END,			right_id = right_id + CASE				WHEN right_id BETWEEN {$move_up_left} AND {$move_up_right} THEN -{$diff_up}				ELSE {$diff_down}			END			WHERE module_class = '" . $db->sql_escape($this->module_class) . "'				AND left_id BETWEEN {$left_id} AND {$right_id}				AND right_id BETWEEN {$left_id} AND {$right_id}";		$db->sql_query($sql);		$this->remove_cache_file();		return $this->lang_name($target['module_langname']);	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group, sections (c) 2001 ispi of Lincoln Inc* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Base Template class.* @package phpBB3*/class template{	/** variable that holds all the data we'll be substituting into	* the compiled templates. Takes form:	* --> $this->_tpldata[block][iteration#][child][iteration#][child2][iteration#][variablename] == value	* if it's a root-level variable, it'll be like this:	* --> $this->_tpldata[.][0][varname] == value	*/	var $_tpldata = array('.' => array(0 => array()));	var $_rootref;	// Root dir and hash of filenames for each template handle.	var $root = '';	var $cachepath = '';	var $files = array();	var $filename = array();	var $files_inherit = array();	var $files_template = array();	var $inherit_root = '';	var $orig_tpl_storedb;	var $orig_tpl_inherits_id;	// this will hash handle names to the compiled/uncompiled code for that handle.	var $compiled_code = array();	/**	* Set template location	* @access public	*/	function set_template()	{		global $phpbb_root_path, $user;		if (file_exists($phpbb_root_path . 'styles/' . $user->theme['template_path'] . '/template'))		{			$this->root = $phpbb_root_path . 'styles/' . $user->theme['template_path'] . '/template';			$this->cachepath = $phpbb_root_path . 'cache/tpl_' . str_replace('_', '-', $user->theme['template_path']) . '_';			if ($this->orig_tpl_storedb === null)			{				$this->orig_tpl_storedb = $user->theme['template_storedb'];			}			if ($this->orig_tpl_inherits_id === null)			{				$this->orig_tpl_inherits_id = $user->theme['template_inherits_id'];			}			$user->theme['template_storedb'] = $this->orig_tpl_storedb;			$user->theme['template_inherits_id'] = $this->orig_tpl_inherits_id;			if ($user->theme['template_inherits_id'])			{				$this->inherit_root = $phpbb_root_path . 'styles/' . $user->theme['template_inherit_path'] . '/template';			}		}		else		{			trigger_error('Template path could not be found: styles/' . $user->theme['template_path'] . '/template', E_USER_ERROR);		}		$this->_rootref = &$this->_tpldata['.'][0];		return true;	}	/**	* Set custom template location (able to use directory outside of phpBB)	* @access public	*/	function set_custom_template($template_path, $template_name, $fallback_template_path = false)	{		global $phpbb_root_path, $user;		// Make sure $template_path has no ending slash		if (substr($template_path, -1) == '/')		{			$template_path = substr($template_path, 0, -1);		}		$this->root = $template_path;		$this->cachepath = $phpbb_root_path . 'cache/ctpl_' . str_replace('_', '-', $template_name) . '_';		if ($fallback_template_path !== false)		{			if (substr($fallback_template_path, -1) == '/')			{				$fallback_template_path = substr($fallback_template_path, 0, -1);			}			$this->inherit_root = $fallback_template_path;			$this->orig_tpl_inherits_id = true;		}		else		{			$this->orig_tpl_inherits_id = false;		}		// the database does not store the path or name of a custom template		// so there is no way we can properly store custom templates there		$this->orig_tpl_storedb = false;		$this->_rootref = &$this->_tpldata['.'][0];		return true;	}	/**	* Sets the template filenames for handles. $filename_array	* should be a hash of handle => filename pairs.	* @access public	*/	function set_filenames($filename_array)	{		if (!is_array($filename_array))		{			return false;		}		foreach ($filename_array as $handle => $filename)		{			if (empty($filename))			{				trigger_error("template->set_filenames: Empty filename specified for $handle", E_USER_ERROR);			}			$this->filename[$handle] = $filename;			$this->files[$handle] = $this->root . '/' . $filename;			if ($this->inherit_root)			{				$this->files_inherit[$handle] = $this->inherit_root . '/' . $filename;			}		}		return true;	}	/**	* Destroy template data set	* @access public	*/	function destroy()	{		$this->_tpldata = array('.' => array(0 => array()));		$this->_rootref = &$this->_tpldata['.'][0];	}	/**	* Reset/empty complete block	* @access public	*/	function destroy_block_vars($blockname)	{		if (strpos($blockname, '.') !== false)		{			// Nested block.			$blocks = explode('.', $blockname);			$blockcount = sizeof($blocks) - 1;			$str = &$this->_tpldata;			for ($i = 0; $i < $blockcount; $i++)			{				$str = &$str[$blocks[$i]];				$str = &$str[sizeof($str) - 1];			}			unset($str[$blocks[$blockcount]]);		}		else		{			// Top-level block.			unset($this->_tpldata[$blockname]);		}		return true;	}	/**	* Display handle	* @access public	*/	function display($handle, $include_once = true)	{		global $user, $phpbb_hook;		if (!empty($phpbb_hook) && $phpbb_hook->call_hook(array(__CLASS__, __FUNCTION__), $handle, $include_once, $this))		{			if ($phpbb_hook->hook_return(array(__CLASS__, __FUNCTION__)))			{				return $phpbb_hook->hook_return_result(array(__CLASS__, __FUNCTION__));			}		}		if (defined('IN_ERROR_HANDLER'))		{			if ((E_NOTICE & error_reporting()) == E_NOTICE)			{				error_reporting(error_reporting() ^ E_NOTICE);			}		}		if ($filename = $this->_tpl_load($handle))		{			($include_once) ? include_once($filename) : include($filename);		}		else		{			eval(' ?>' . $this->compiled_code[$handle] . '<?php ');		}		return true;	}	/**	* Display the handle and assign the output to a template variable or return the compiled result.	* @access public	*/	function assign_display($handle, $template_var = '', $return_content = true, $include_once = false)	{		ob_start();		$this->display($handle, $include_once);		$contents = ob_get_clean();		if ($return_content)		{			return $contents;		}		$this->assign_var($template_var, $contents);		return true;	}	/**	* Load a compiled template if possible, if not, recompile it	* @access private	*/	function _tpl_load(&$handle)	{		global $user, $phpEx, $config;		if (!isset($this->filename[$handle]))		{			trigger_error("template->_tpl_load(): No file specified for handle $handle", E_USER_ERROR);		}		// reload these settings to have the values they had when this object was initialised		// using set_template or set_custom_template, they might otherwise have been overwritten		// by other template class instances in between.		$user->theme['template_storedb'] = $this->orig_tpl_storedb;		$user->theme['template_inherits_id'] = $this->orig_tpl_inherits_id;		$filename = $this->cachepath . str_replace('/', '.', $this->filename[$handle]) . '.' . $phpEx;		$this->files_template[$handle] = (isset($user->theme['template_id'])) ? $user->theme['template_id'] : 0;		$recompile = false;		if (!file_exists($filename) || @filesize($filename) === 0 || defined('DEBUG_EXTRA'))		{			$recompile = true;		}		else if ($config['load_tplcompile'])		{			// No way around it: we need to check inheritance here			if ($user->theme['template_inherits_id'] && !file_exists($this->files[$handle]))			{				$this->files[$handle] = $this->files_inherit[$handle];				$this->files_template[$handle] = $user->theme['template_inherits_id'];			}			$recompile = (@filemtime($filename) < filemtime($this->files[$handle])) ? true : false;		}		// Recompile page if the original template is newer, otherwise load the compiled version		if (!$recompile)		{			return $filename;		}		global $db, $phpbb_root_path;		if (!class_exists('template_compile'))		{			include($phpbb_root_path . 'includes/functions_template.' . $phpEx);		}		// Inheritance - we point to another template file for this one. Equality is also used for store_db		if (isset($user->theme['template_inherits_id']) && $user->theme['template_inherits_id'] && !file_exists($this->files[$handle]))		{			$this->files[$handle] = $this->files_inherit[$handle];			$this->files_template[$handle] = $user->theme['template_inherits_id'];		}		$compile = new template_compile($this);		// If we don't have a file assigned to this handle, die.		if (!isset($this->files[$handle]))		{			trigger_error("template->_tpl_load(): No file specified for handle $handle", E_USER_ERROR);		}		// Just compile if no user object is present (happens within the installer)		if (!$user)		{			$compile->_tpl_load_file($handle);			return false;		}		if (isset($user->theme['template_storedb']) && $user->theme['template_storedb'])		{			$rows = array();			$ids = array();			// Inheritance			if (isset($user->theme['template_inherits_id']) && $user->theme['template_inherits_id'])			{				$ids[] = $user->theme['template_inherits_id'];			}			$ids[] = $user->theme['template_id'];			foreach ($ids as $id)			{				$sql = 'SELECT *				FROM ' . STYLES_TEMPLATE_DATA_TABLE . '				WHERE template_id = ' . $id . "					AND (template_filename = '" . $db->sql_escape($this->filename[$handle]) . "'						OR template_included " . $db->sql_like_expression($db->any_char . $this->filename[$handle] . ':' . $db->any_char) . ')';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$rows[$row['template_filename']] = $row;				}				$db->sql_freeresult($result);			}			if (sizeof($rows))			{				foreach ($rows as $row)				{					$file = $this->root . '/' . $row['template_filename'];					$force_reload = false;					if ($row['template_id'] != $user->theme['template_id'])					{						// make sure that we are not overlooking a file not in the db yet						if (isset($user->theme['template_inherits_id']) && $user->theme['template_inherits_id'] && !file_exists($file))						{							$file = $this->inherit_root . '/' . $row['template_filename'];							$this->files[$row['template_filename']] = $file;							$this->files_inherit[$row['template_filename']] = $file;							$this->files_template[$row['template_filename']] = $user->theme['template_inherits_id'];						}						else if (isset($user->theme['template_inherits_id']) && $user->theme['template_inherits_id'])						{							// Ok, we have a situation. There is a file in the subtemplate, but nothing in the DB. We have to fix that.							$force_reload = true;							$this->files_template[$row['template_filename']] = $user->theme['template_inherits_id'];						}					}					else					{						$this->files_template[$row['template_filename']] = $user->theme['template_id'];					}					if ($force_reload || $row['template_mtime'] < filemtime($file))					{						if ($row['template_filename'] == $this->filename[$handle])						{							$compile->_tpl_load_file($handle, true);						}						else						{							$this->files[$row['template_filename']] = $file;							$this->filename[$row['template_filename']] = $row['template_filename'];							$compile->_tpl_load_file($row['template_filename'], true);							unset($this->compiled_code[$row['template_filename']]);							unset($this->files[$row['template_filename']]);							unset($this->filename[$row['template_filename']]);						}					}					if ($row['template_filename'] == $this->filename[$handle])					{						$this->compiled_code[$handle] = $compile->compile(trim($row['template_data']));						$compile->compile_write($handle, $this->compiled_code[$handle]);					}					else					{						// Only bother compiling if it doesn't already exist						if (!file_exists($this->cachepath . str_replace('/', '.', $row['template_filename']) . '.' . $phpEx))						{							$this->filename[$row['template_filename']] = $row['template_filename'];							$compile->compile_write($row['template_filename'], $compile->compile(trim($row['template_data'])));							unset($this->filename[$row['template_filename']]);						}					}				}			}			else			{				$file = $this->root . '/' . $row['template_filename'];				if (isset($user->theme['template_inherits_id']) && $user->theme['template_inherits_id'] && !file_exists($file))				{					$file = $this->inherit_root . '/' . $row['template_filename'];					$this->files[$row['template_filename']] = $file;					$this->files_inherit[$row['template_filename']] = $file;					$this->files_template[$row['template_filename']] = $user->theme['template_inherits_id'];				}				// Try to load from filesystem and instruct to insert into the styles table...				$compile->_tpl_load_file($handle, true);				return false;			}			return false;		}		$compile->_tpl_load_file($handle);		return false;	}	/**	* Assign key variable pairs from an array	* @access public	*/	function assign_vars($vararray)	{		foreach ($vararray as $key => $val)		{			$this->_rootref[$key] = $val;		}		return true;	}	/**	* Assign a single variable to a single key	* @access public	*/	function assign_var($varname, $varval)	{		$this->_rootref[$varname] = $varval;		return true;	}	/**	* Assign key variable pairs from an array to a specified block	* @access public	*/	function assign_block_vars($blockname, $vararray)	{		if (strpos($blockname, '.') !== false)		{			// Nested block.			$blocks = explode('.', $blockname);			$blockcount = sizeof($blocks) - 1;			$str = &$this->_tpldata;			for ($i = 0; $i < $blockcount; $i++)			{				$str = &$str[$blocks[$i]];				$str = &$str[sizeof($str) - 1];			}			$s_row_count = isset($str[$blocks[$blockcount]]) ? sizeof($str[$blocks[$blockcount]]) : 0;			$vararray['S_ROW_COUNT'] = $s_row_count;			// Assign S_FIRST_ROW			if (!$s_row_count)			{				$vararray['S_FIRST_ROW'] = true;			}			// Now the tricky part, we always assign S_LAST_ROW and remove the entry before			// This is much more clever than going through the complete template data on display (phew)			$vararray['S_LAST_ROW'] = true;			if ($s_row_count > 0)			{				unset($str[$blocks[$blockcount]][($s_row_count - 1)]['S_LAST_ROW']);			}			// Now we add the block that we're actually assigning to.			// We're adding a new iteration to this block with the given			// variable assignments.			$str[$blocks[$blockcount]][] = $vararray;		}		else		{			// Top-level block.			$s_row_count = (isset($this->_tpldata[$blockname])) ? sizeof($this->_tpldata[$blockname]) : 0;			$vararray['S_ROW_COUNT'] = $s_row_count;			// Assign S_FIRST_ROW			if (!$s_row_count)			{				$vararray['S_FIRST_ROW'] = true;			}			// We always assign S_LAST_ROW and remove the entry before			$vararray['S_LAST_ROW'] = true;			if ($s_row_count > 0)			{				unset($this->_tpldata[$blockname][($s_row_count - 1)]['S_LAST_ROW']);			}			// Add a new iteration to this block with the variable assignments we were given.			$this->_tpldata[$blockname][] = $vararray;		}		return true;	}	/**	* Change already assigned key variable pair (one-dimensional - single loop entry)	*	* An example of how to use this function:	* {@example alter_block_array.php}	*	* @param	string	$blockname	the blockname, for example 'loop'	* @param	array	$vararray	the var array to insert/add or merge	* @param	mixed	$key		Key to search for	*	* array: KEY => VALUE [the key/value pair to search for within the loop to determine the correct position]	*	* int: Position [the position to change or insert at directly given]	*	* If key is false the position is set to 0	* If key is true the position is set to the last entry	*	* @param	string	$mode		Mode to execute (valid modes are 'insert' and 'change')	*	*	If insert, the vararray is inserted at the given position (position counting from zero).	*	If change, the current block gets merged with the vararray (resulting in new key/value pairs be added and existing keys be replaced by the new value).	*	* Since counting begins by zero, inserting at the last position will result in this array: array(vararray, last positioned array)	* and inserting at position 1 will result in this array: array(first positioned array, vararray, following vars)	*	* @return bool false on error, true on success	* @access public	*/	function alter_block_array($blockname, $vararray, $key = false, $mode = 'insert')	{		if (strpos($blockname, '.') !== false)		{			// Nested blocks are not supported			return false;		}		// Change key to zero (change first position) if false and to last position if true		if ($key === false || $key === true)		{			$key = ($key === false) ? 0 : sizeof($this->_tpldata[$blockname]);		}		// Get correct position if array given		if (is_array($key))		{			// Search array to get correct position			list($search_key, $search_value) = @each($key);			$key = NULL;			foreach ($this->_tpldata[$blockname] as $i => $val_ary)			{				if ($val_ary[$search_key] === $search_value)				{					$key = $i;					break;				}			}			// key/value pair not found			if ($key === NULL)			{				return false;			}		}		// Insert Block		if ($mode == 'insert')		{			// Make sure we are not exceeding the last iteration			if ($key >= sizeof($this->_tpldata[$blockname]))			{				$key = sizeof($this->_tpldata[$blockname]);				unset($this->_tpldata[$blockname][($key - 1)]['S_LAST_ROW']);				$vararray['S_LAST_ROW'] = true;			}			else if ($key === 0)			{				unset($this->_tpldata[$blockname][0]['S_FIRST_ROW']);				$vararray['S_FIRST_ROW'] = true;			}			// Re-position template blocks			for ($i = sizeof($this->_tpldata[$blockname]); $i > $key; $i--)			{				$this->_tpldata[$blockname][$i] = $this->_tpldata[$blockname][$i-1];				$this->_tpldata[$blockname][$i]['S_ROW_COUNT'] = $i;			}			// Insert vararray at given position			$vararray['S_ROW_COUNT'] = $key;			$this->_tpldata[$blockname][$key] = $vararray;			return true;		}		// Which block to change?		if ($mode == 'change')		{			if ($key == sizeof($this->_tpldata[$blockname]))			{				$key--;			}			$this->_tpldata[$blockname][$key] = array_merge($this->_tpldata[$blockname][$key], $vararray);			return true;		}		return false;	}	/**	* Include a separate template	* @access private	*/	function _tpl_include($filename, $include = true)	{		$handle = $filename;		$this->filename[$handle] = $filename;		$this->files[$handle] = $this->root . '/' . $filename;		if ($this->inherit_root)		{			$this->files_inherit[$handle] = $this->inherit_root . '/' . $filename;		}		$filename = $this->_tpl_load($handle);		if ($include)		{			global $user;			if ($filename)			{				include($filename);				return;			}			eval(' ?>' . $this->compiled_code[$handle] . '<?php ');		}	}	/**	* Include a php-file	* @access private	*/	function _php_include($filename)	{		global $phpbb_root_path;		$file = $phpbb_root_path . $filename;		if (!file_exists($file))		{			// trigger_error cannot be used here, as the output already started			echo 'template->_php_include(): File ' . htmlspecialchars($file) . ' does not exist or is empty';			return;		}		include($file);	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ucp_register* Board registration* @package ucp*/class ucp_register{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $phpbb_root_path, $phpEx;		//		if ($config['require_activation'] == USER_ACTIVATION_DISABLE)		{			trigger_error('UCP_REGISTER_DISABLE');		}		include($phpbb_root_path . 'includes/functions_profile_fields.' . $phpEx);		$coppa			= (isset($_REQUEST['coppa'])) ? ((!empty($_REQUEST['coppa'])) ? 1 : 0) : false;		$agreed			= (!empty($_POST['agreed'])) ? 1 : 0;		$submit			= (isset($_POST['submit'])) ? true : false;		$change_lang	= request_var('change_lang', '');		$user_lang		= request_var('lang', $user->lang_name);		if ($agreed)		{			add_form_key('ucp_register');		}		else		{			add_form_key('ucp_register_terms');		}		if ($change_lang || $user_lang != $config['default_lang'])		{			$use_lang = ($change_lang) ? basename($change_lang) : basename($user_lang);			if (!validate_language_iso_name($use_lang))			{				if ($change_lang)				{					$submit = false;					// Setting back agreed to let the user view the agreement in his/her language					$agreed = (empty($_GET['change_lang'])) ? 0 : $agreed;				}				$user->lang_name = $user_lang = $use_lang;				$user->lang = array();				$user->data['user_lang'] = $user->lang_name;				$user->add_lang(array('common', 'ucp'));			}			else			{				$change_lang = '';				$user_lang = $user->lang_name;			}		}		$cp = new custom_profile();		$error = $cp_data = $cp_error = array();		if (!$agreed || ($coppa === false && $config['coppa_enable']) || ($coppa && !$config['coppa_enable']))		{			$add_lang = ($change_lang) ? '&amp;change_lang=' . urlencode($change_lang) : '';			$add_coppa = ($coppa !== false) ? '&amp;coppa=' . $coppa : '';			$s_hidden_fields = array(				'change_lang'	=> $change_lang,			);			// If we change the language, we want to pass on some more possible parameter.			if ($change_lang)			{				// We do not include the password				$s_hidden_fields = array_merge($s_hidden_fields, array(					'username'			=> utf8_normalize_nfc(request_var('username', '', true)),					'email'				=> strtolower(request_var('email', '')),					'email_confirm'		=> strtolower(request_var('email_confirm', '')),					'lang'				=> $user->lang_name,					'tz'				=> request_var('tz', (float) $config['board_timezone']),				));			}			// Checking amount of available languages			$sql = 'SELECT lang_id				FROM ' . LANG_TABLE;			$result = $db->sql_query($sql);			$lang_row = array();			while ($row = $db->sql_fetchrow($result))			{				$lang_row[] = $row;			}			$db->sql_freeresult($result);			if ($coppa === false && $config['coppa_enable'])			{				$now = getdate();				$coppa_birthday = $user->format_date(mktime($now['hours'] + $user->data['user_dst'], $now['minutes'], $now['seconds'], $now['mon'], $now['mday'] - 1, $now['year'] - 13), $user->lang['DATE_FORMAT']);				unset($now);				$template->assign_vars(array(					'S_LANG_OPTIONS'	=> (sizeof($lang_row) > 1) ? language_select($user_lang) : '',					'L_COPPA_NO'		=> sprintf($user->lang['UCP_COPPA_BEFORE'], $coppa_birthday),					'L_COPPA_YES'		=> sprintf($user->lang['UCP_COPPA_ON_AFTER'], $coppa_birthday),					'U_COPPA_NO'		=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=register&amp;coppa=0' . $add_lang),					'U_COPPA_YES'		=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=register&amp;coppa=1' . $add_lang),					'S_SHOW_COPPA'		=> true,					'S_HIDDEN_FIELDS'	=> build_hidden_fields($s_hidden_fields),					'S_UCP_ACTION'		=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=register' . $add_lang),				));			}			else			{				$template->assign_vars(array(					'S_LANG_OPTIONS'	=> (sizeof($lang_row) > 1) ? language_select($user_lang) : '',					'L_TERMS_OF_USE'	=> sprintf($user->lang['TERMS_OF_USE_CONTENT'], $config['sitename'], generate_board_url()),					'S_SHOW_COPPA'		=> false,					'S_REGISTRATION'	=> true,					'S_HIDDEN_FIELDS'	=> build_hidden_fields($s_hidden_fields),					'S_UCP_ACTION'		=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=register' . $add_lang . $add_coppa),					)				);			}			unset($lang_row);			$this->tpl_name = 'ucp_agreement';			return;		}		// The CAPTCHA kicks in here. We can't help that the information gets lost on language change. 		if ($config['enable_confirm'])		{			include($phpbb_root_path . 'includes/captcha/captcha_factory.' . $phpEx);			$captcha =& phpbb_captcha_factory::get_instance($config['captcha_plugin']);			$captcha->init(CONFIRM_REG);		}		// Try to manually determine the timezone and adjust the dst if the server date/time complies with the default setting +/- 1		$timezone = date('Z') / 3600;		$is_dst = date('I');		if ($config['board_timezone'] == $timezone || $config['board_timezone'] == ($timezone - 1))		{			$timezone = ($is_dst) ? $timezone - 1 : $timezone;			if (!isset($user->lang['tz_zones'][(string) $timezone]))			{				$timezone = $config['board_timezone'];			}		}		else		{			$is_dst = $config['board_dst'];			$timezone = $config['board_timezone'];		}		$data = array(			'username'			=> utf8_normalize_nfc(request_var('username', '', true)),			'new_password'		=> request_var('new_password', '', true),			'password_confirm'	=> request_var('password_confirm', '', true),			'email'				=> strtolower(request_var('email', '')),			'email_confirm'		=> strtolower(request_var('email_confirm', '')),			'lang'				=> basename(request_var('lang', $user->lang_name)),			'tz'				=> request_var('tz', (float) $timezone),		);		// Check and initialize some variables if needed		if ($submit)		{			$error = validate_data($data, array(				'username'			=> array(					array('string', false, $config['min_name_chars'], $config['max_name_chars']),					array('username', '')),				'new_password'		=> array(					array('string', false, $config['min_pass_chars'], $config['max_pass_chars']),					array('password')),				'password_confirm'	=> array('string', false, $config['min_pass_chars'], $config['max_pass_chars']),				'email'				=> array(					array('string', false, 6, 60),					array('email')),				'email_confirm'		=> array('string', false, 6, 60),				'tz'				=> array('num', false, -14, 14),				'lang'				=> array('language_iso_name'),			));			if (!check_form_key('ucp_register'))			{				$error[] = $user->lang['FORM_INVALID'];			}			// Replace "error" strings with their real, localised form			$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);			if ($config['enable_confirm'])			{				$vc_response = $captcha->validate($data);				if ($vc_response !== false)				{					$error[] = $vc_response;				}				if ($config['max_reg_attempts'] && $captcha->get_attempt_count() > $config['max_reg_attempts'])				{					$error[] = $user->lang['TOO_MANY_REGISTERS'];				}			}			// DNSBL check			if ($config['check_dnsbl'])			{				if (($dnsbl = $user->check_dnsbl('register')) !== false)				{					$error[] = sprintf($user->lang['IP_BLACKLISTED'], $user->ip, $dnsbl[1]);				}			}			// validate custom profile fields			$cp->submit_cp_field('register', $user->get_iso_lang_id(), $cp_data, $error);			if (!sizeof($error))			{				if ($data['new_password'] != $data['password_confirm'])				{					$error[] = $user->lang['NEW_PASSWORD_ERROR'];				}				if ($data['email'] != $data['email_confirm'])				{					$error[] = $user->lang['NEW_EMAIL_ERROR'];				}			}			if (!sizeof($error))			{				$server_url = generate_board_url();				// Which group by default?				$group_name = ($coppa) ? 'REGISTERED_COPPA' : 'REGISTERED';				$sql = 'SELECT group_id					FROM ' . GROUPS_TABLE . "					WHERE group_name = '" . $db->sql_escape($group_name) . "'						AND group_type = " . GROUP_SPECIAL;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error('NO_GROUP');				}				$group_id = $row['group_id'];				if (($coppa ||					$config['require_activation'] == USER_ACTIVATION_SELF ||					$config['require_activation'] == USER_ACTIVATION_ADMIN) && $config['email_enable'])				{					$user_actkey = gen_rand_string(mt_rand(6, 10));					$user_type = USER_INACTIVE;					$user_inactive_reason = INACTIVE_REGISTER;					$user_inactive_time = time();				}				else				{					$user_type = USER_NORMAL;					$user_actkey = '';					$user_inactive_reason = 0;					$user_inactive_time = 0;				}				$user_row = array(					'username'				=> $data['username'],					'user_password'			=> phpbb_hash($data['new_password']),					'user_email'			=> $data['email'],					'group_id'				=> (int) $group_id,					'user_timezone'			=> (float) $data['tz'],					'user_dst'				=> $is_dst,					'user_lang'				=> $data['lang'],					'user_type'				=> $user_type,					'user_actkey'			=> $user_actkey,					'user_ip'				=> $user->ip,					'user_regdate'			=> time(),					'user_inactive_reason'	=> $user_inactive_reason,					'user_inactive_time'	=> $user_inactive_time,				);				if ($config['new_member_post_limit'])				{					$user_row['user_new'] = 1;				}				// Register user...				$user_id = user_add($user_row, $cp_data);				// This should not happen, because the required variables are listed above...				if ($user_id === false)				{					trigger_error('NO_USER', E_USER_ERROR);				}				// Okay, captcha, your job is done.				if ($config['enable_confirm'] && isset($captcha))				{					$captcha->reset();				}				if ($coppa && $config['email_enable'])				{					$message = $user->lang['ACCOUNT_COPPA'];					$email_template = 'coppa_welcome_inactive';				}				else if ($config['require_activation'] == USER_ACTIVATION_SELF && $config['email_enable'])				{					$message = $user->lang['ACCOUNT_INACTIVE'];					$email_template = 'user_welcome_inactive';				}				else if ($config['require_activation'] == USER_ACTIVATION_ADMIN && $config['email_enable'])				{					$message = $user->lang['ACCOUNT_INACTIVE_ADMIN'];					$email_template = 'admin_welcome_inactive';				}				else				{					$message = $user->lang['ACCOUNT_ADDED'];					$email_template = 'user_welcome';				}				if ($config['email_enable'])				{					include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);					$messenger = new messenger(false);					$messenger->template($email_template, $data['lang']);					$messenger->to($data['email'], $data['username']);					$messenger->anti_abuse_headers($config, $user);					$messenger->assign_vars(array(						'WELCOME_MSG'	=> htmlspecialchars_decode(sprintf($user->lang['WELCOME_SUBJECT'], $config['sitename'])),						'USERNAME'		=> htmlspecialchars_decode($data['username']),						'PASSWORD'		=> htmlspecialchars_decode($data['new_password']),						'U_ACTIVATE'	=> "$server_url/ucp.$phpEx?mode=activate&u=$user_id&k=$user_actkey")					);					if ($coppa)					{						$messenger->assign_vars(array(							'FAX_INFO'		=> $config['coppa_fax'],							'MAIL_INFO'		=> $config['coppa_mail'],							'EMAIL_ADDRESS'	=> $data['email'])						);					}					$messenger->send(NOTIFY_EMAIL);					if ($config['require_activation'] == USER_ACTIVATION_ADMIN)					{						// Grab an array of user_id's with a_user permissions ... these users can activate a user						$admin_ary = $auth->acl_get_list(false, 'a_user', false);						$admin_ary = (!empty($admin_ary[0]['a_user'])) ? $admin_ary[0]['a_user'] : array();						// Also include founders						$where_sql = ' WHERE user_type = ' . USER_FOUNDER;						if (sizeof($admin_ary))						{							$where_sql .= ' OR ' . $db->sql_in_set('user_id', $admin_ary);						}						$sql = 'SELECT user_id, username, user_email, user_lang, user_jabber, user_notify_type							FROM ' . USERS_TABLE . ' ' .							$where_sql;						$result = $db->sql_query($sql);						while ($row = $db->sql_fetchrow($result))						{							$messenger->template('admin_activate', $row['user_lang']);							$messenger->to($row['user_email'], $row['username']);							$messenger->im($row['user_jabber'], $row['username']);							$messenger->assign_vars(array(								'USERNAME'			=> htmlspecialchars_decode($data['username']),								'U_USER_DETAILS'	=> "$server_url/memberlist.$phpEx?mode=viewprofile&u=$user_id",								'U_ACTIVATE'		=> "$server_url/ucp.$phpEx?mode=activate&u=$user_id&k=$user_actkey")							);							$messenger->send($row['user_notify_type']);						}						$db->sql_freeresult($result);					}				}				$message = $message . '<br /><br />' . sprintf($user->lang['RETURN_INDEX'], '<a href="' . append_sid("{$phpbb_root_path}index.$phpEx") . '">', '</a>');				trigger_error($message);			}		}		$s_hidden_fields = array(			'agreed'		=> 'true',			'change_lang'	=> 0,		);		if ($config['coppa_enable'])		{			$s_hidden_fields['coppa'] = $coppa;		}		if ($config['enable_confirm'])		{			$s_hidden_fields = array_merge($s_hidden_fields, $captcha->get_hidden_fields());		}		$s_hidden_fields = build_hidden_fields($s_hidden_fields);		$confirm_image = '';		// Visual Confirmation - Show images		if ($config['enable_confirm'])		{			$template->assign_vars(array(				'CAPTCHA_TEMPLATE'		=> $captcha->get_template(),			));		}		//		$l_reg_cond = '';		switch ($config['require_activation'])		{			case USER_ACTIVATION_SELF:				$l_reg_cond = $user->lang['UCP_EMAIL_ACTIVATE'];			break;			case USER_ACTIVATION_ADMIN:				$l_reg_cond = $user->lang['UCP_ADMIN_ACTIVATE'];			break;		}		$template->assign_vars(array(			'ERROR'				=> (sizeof($error)) ? implode('<br />', $error) : '',			'USERNAME'			=> $data['username'],			'PASSWORD'			=> $data['new_password'],			'PASSWORD_CONFIRM'	=> $data['password_confirm'],			'EMAIL'				=> $data['email'],			'EMAIL_CONFIRM'		=> $data['email_confirm'],			'L_REG_COND'				=> $l_reg_cond,			'L_USERNAME_EXPLAIN'		=> sprintf($user->lang[$config['allow_name_chars'] . '_EXPLAIN'], $config['min_name_chars'], $config['max_name_chars']),			'L_PASSWORD_EXPLAIN'		=> sprintf($user->lang[$config['pass_complex'] . '_EXPLAIN'], $config['min_pass_chars'], $config['max_pass_chars']),			'S_LANG_OPTIONS'	=> language_select($data['lang']),			'S_TZ_OPTIONS'		=> tz_select($data['tz']),			'S_CONFIRM_REFRESH'	=> ($config['enable_confirm'] && $config['confirm_refresh']) ? true : false,			'S_REGISTRATION'	=> true,			'S_COPPA'			=> $coppa,			'S_HIDDEN_FIELDS'	=> $s_hidden_fields,			'S_UCP_ACTION'		=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=register'),		));		//		$user->profile_fields = array();		// Generate profile fields -> Template Block Variable profile_fields		$cp->generate_profile_fields('register', $user->get_iso_lang_id());		//		$this->tpl_name = 'ucp_register';		$this->page_title = 'UCP_REGISTRATION';	}}?>
<?php return array(''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'ue',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** @package install* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//**#@+* @ignore*/define('IN_PHPBB', true);define('IN_INSTALL', true);/**#@-*/$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);// @todo Review this test and see if we can find out what it is which prevents PHP 4.2.x from even displaying the page with requirements on itif (version_compare(PHP_VERSION, '4.3.3') < 0){	die('You are running an unsupported PHP version. Please upgrade to PHP 4.3.3 or higher before trying to install phpBB 3.0');}function phpbb_require_updated($path, $optional = false){	global $phpbb_root_path;	$new_path = $phpbb_root_path . 'install/update/new/' . $path;	$old_path = $phpbb_root_path . $path;	if (file_exists($new_path))	{		require($new_path);	}	else if (!$optional || file_exists($old_path))	{		require($old_path);	}}phpbb_require_updated('includes/startup.' . $phpEx);// Try to override some limits - maybe it helps some...@set_time_limit(0);$mem_limit = @ini_get('memory_limit');if (!empty($mem_limit)){	$unit = strtolower(substr($mem_limit, -1, 1));	$mem_limit = (int) $mem_limit;	if ($unit == 'k')	{		$mem_limit = floor($mem_limit / 1024);	}	else if ($unit == 'g')	{		$mem_limit *= 1024;	}	else if (is_numeric($unit))	{		$mem_limit = floor((int) ($mem_limit . $unit) / 1048576);	}	$mem_limit = max(128, $mem_limit) . 'M';}else{	$mem_limit = '128M';}@ini_set('memory_limit', $mem_limit);// Include essential scriptsrequire($phpbb_root_path . 'includes/functions.' . $phpEx);phpbb_require_updated('includes/functions_content.' . $phpEx, true);include($phpbb_root_path . 'includes/auth.' . $phpEx);include($phpbb_root_path . 'includes/session.' . $phpEx);include($phpbb_root_path . 'includes/template.' . $phpEx);include($phpbb_root_path . 'includes/acm/acm_file.' . $phpEx);include($phpbb_root_path . 'includes/cache.' . $phpEx);include($phpbb_root_path . 'includes/functions_admin.' . $phpEx);include($phpbb_root_path . 'includes/utf/utf_tools.' . $phpEx);require($phpbb_root_path . 'includes/functions_install.' . $phpEx);// Try and load an appropriate language if required$language = basename(request_var('language', ''));if (!empty($_SERVER['HTTP_ACCEPT_LANGUAGE']) && !$language){	$accept_lang_ary = explode(',', strtolower($_SERVER['HTTP_ACCEPT_LANGUAGE']));	foreach ($accept_lang_ary as $accept_lang)	{		// Set correct format ... guess full xx_yy form		$accept_lang = substr($accept_lang, 0, 2) . '_' . substr($accept_lang, 3, 2);		if (file_exists($phpbb_root_path . 'language/' . $accept_lang) && is_dir($phpbb_root_path . 'language/' . $accept_lang))		{			$language = $accept_lang;			break;		}		else		{			// No match on xx_yy so try xx			$accept_lang = substr($accept_lang, 0, 2);			if (file_exists($phpbb_root_path . 'language/' . $accept_lang) && is_dir($phpbb_root_path . 'language/' . $accept_lang))			{				$language = $accept_lang;				break;			}		}	}}// No appropriate language found ... so let's use the first one in the language// dir, this may or may not be Englishif (!$language){	$dir = @opendir($phpbb_root_path . 'language');	if (!$dir)	{		die('Unable to access the language directory');		exit;	}	while (($file = readdir($dir)) !== false)	{		$path = $phpbb_root_path . 'language/' . $file;		if (!is_file($path) && !is_link($path) && file_exists($path . '/iso.txt'))		{			$language = $file;			break;		}	}	closedir($dir);}if (!file_exists($phpbb_root_path . 'language/' . $language) || !is_dir($phpbb_root_path . 'language/' . $language)){	die('No language found!');}// And finally, load the relevant language filesinclude($phpbb_root_path . 'language/' . $language . '/common.' . $phpEx);include($phpbb_root_path . 'language/' . $language . '/acp/common.' . $phpEx);include($phpbb_root_path . 'language/' . $language . '/acp/board.' . $phpEx);include($phpbb_root_path . 'language/' . $language . '/install.' . $phpEx);include($phpbb_root_path . 'language/' . $language . '/posting.' . $phpEx);// usually we would need every single constant here - and it would be consistent. For 3.0.x, use a dirty hack... :(// Define needed constantsdefine('CHMOD_ALL', 7);define('CHMOD_READ', 4);define('CHMOD_WRITE', 2);define('CHMOD_EXECUTE', 1);$mode = request_var('mode', 'overview');$sub = request_var('sub', '');// Set PHP error handler to oursset_error_handler(defined('PHPBB_MSG_HANDLER') ? PHPBB_MSG_HANDLER : 'msg_handler');$user = new user();$auth = new auth();$cache = new cache();$template = new template();// Add own hook handler, if present. :oif (file_exists($phpbb_root_path . 'includes/hooks/index.' . $phpEx)){	require($phpbb_root_path . 'includes/hooks/index.' . $phpEx);	$phpbb_hook = new phpbb_hook(array('exit_handler', 'phpbb_user_session_handler', 'append_sid', array('template', 'display')));	foreach ($cache->obtain_hooks() as $hook)	{		@include($phpbb_root_path . 'includes/hooks/' . $hook . '.' . $phpEx);	}}else{	$phpbb_hook = false;}// Set some standard variables we want to force$config = array(	'load_tplcompile'	=> '1');$template->set_custom_template('../adm/style', 'admin');$template->assign_var('T_TEMPLATE_PATH', '../adm/style');// the acp template is never stored in the database$user->theme['template_storedb'] = false;$install = new module();$install->create('install', "index.$phpEx", $mode, $sub);$install->load();// Generate the page$install->page_header();$install->generate_navigation();$template->set_filenames(array(	'body' => $install->get_tpl_name()));$install->page_footer();/*** @package install*/class module{	var $id = 0;	var $type = 'install';	var $module_ary = array();	var $filename;	var $module_url = '';	var $tpl_name = '';	var $mode;	var $sub;	/**	* Private methods, should not be overwritten	*/	function create($module_type, $module_url, $selected_mod = false, $selected_submod = false)	{		global $db, $config, $phpEx, $phpbb_root_path;		$module = array();		// Grab module information using Bart's "neat-o-module" system (tm)		$dir = @opendir('.');		if (!$dir)		{			$this->error('Unable to access the installation directory', __LINE__, __FILE__);		}		$setmodules = 1;		while (($file = readdir($dir)) !== false)		{			if (preg_match('#^install_(.*?)\.' . $phpEx . '$#', $file))			{				include($file);			}		}		closedir($dir);		unset($setmodules);		if (!sizeof($module))		{			$this->error('No installation modules found', __LINE__, __FILE__);		}		// Order to use and count further if modules get assigned to the same position or not having an order		$max_module_order = 1000;		foreach ($module as $row)		{			// Module order not specified or module already assigned at this position?			if (!isset($row['module_order']) || isset($this->module_ary[$row['module_order']]))			{				$row['module_order'] = $max_module_order;				$max_module_order++;			}			$this->module_ary[$row['module_order']]['name'] = $row['module_title'];			$this->module_ary[$row['module_order']]['filename'] = $row['module_filename'];			$this->module_ary[$row['module_order']]['subs'] = $row['module_subs'];			$this->module_ary[$row['module_order']]['stages'] = $row['module_stages'];			if (strtolower($selected_mod) == strtolower($row['module_title']))			{				$this->id = (int) $row['module_order'];				$this->filename = (string) $row['module_filename'];				$this->module_url = (string) $module_url;				$this->mode = (string) $selected_mod;				// Check that the sub-mode specified is valid or set a default if not				if (is_array($row['module_subs']))				{					$this->sub = strtolower((in_array(strtoupper($selected_submod), $row['module_subs'])) ? $selected_submod : $row['module_subs'][0]);				}				else if (is_array($row['module_stages']))				{					$this->sub = strtolower((in_array(strtoupper($selected_submod), $row['module_stages'])) ? $selected_submod : $row['module_stages'][0]);				}				else				{					$this->sub = '';				}			}		} // END foreach	} // END create	/**	* Load and run the relevant module if applicable	*/	function load($mode = false, $run = true)	{		global $phpbb_root_path, $phpEx;		if ($run)		{			if (!empty($mode))			{				$this->mode = $mode;			}			$module = $this->filename;			if (!class_exists($module))			{				$this->error('Module "' . htmlspecialchars($module) . '" not accessible.', __LINE__, __FILE__);			}			$this->module = new $module($this);			if (method_exists($this->module, 'main'))			{				$this->module->main($this->mode, $this->sub);			}		}	}	/**	* Output the standard page header	*/	function page_header()	{		if (defined('HEADER_INC'))		{			return;		}		define('HEADER_INC', true);		global $template, $lang, $stage, $phpbb_root_path;		$template->assign_vars(array(			'L_CHANGE'				=> $lang['CHANGE'],			'L_INSTALL_PANEL'		=> $lang['INSTALL_PANEL'],			'L_SELECT_LANG'			=> $lang['SELECT_LANG'],			'L_SKIP'				=> $lang['SKIP'],			'PAGE_TITLE'			=> $this->get_page_title(),			'T_IMAGE_PATH'			=> $phpbb_root_path . 'adm/images/',			'S_CONTENT_DIRECTION' 	=> $lang['DIRECTION'],			'S_CONTENT_FLOW_BEGIN'	=> ($lang['DIRECTION'] == 'ltr') ? 'left' : 'right',			'S_CONTENT_FLOW_END'	=> ($lang['DIRECTION'] == 'ltr') ? 'right' : 'left',			'S_CONTENT_ENCODING' 	=> 'UTF-8',			'S_USER_LANG'			=> $lang['USER_LANG'],			)		);		header('Content-type: text/html; charset=UTF-8');		header('Cache-Control: private, no-cache="set-cookie"');		header('Expires: 0');		header('Pragma: no-cache');		return;	}	/**	* Output the standard page footer	*/	function page_footer()	{		global $db, $template;		$template->display('body');		// Close our DB connection.		if (!empty($db) && is_object($db))		{			$db->sql_close();		}		if (function_exists('exit_handler'))		{			exit_handler();		}	}	/**	* Returns desired template name	*/	function get_tpl_name()	{		return $this->module->tpl_name . '.html';	}	/**	* Returns the desired page title	*/	function get_page_title()	{		global $lang;		if (!isset($this->module->page_title))		{			return '';		}		return (isset($lang[$this->module->page_title])) ? $lang[$this->module->page_title] : $this->module->page_title;	}	/**	* Generate an HTTP/1.1 header to redirect the user to another page	* This is used during the installation when we do not have a database available to call the normal redirect function	* @param string $page The page to redirect to relative to the installer root path	*/	function redirect($page)	{		// HTTP_HOST is having the correct browser url in most cases...		$server_name = (!empty($_SERVER['HTTP_HOST'])) ? strtolower($_SERVER['HTTP_HOST']) : ((!empty($_SERVER['SERVER_NAME'])) ? $_SERVER['SERVER_NAME'] : getenv('SERVER_NAME'));		$server_port = (!empty($_SERVER['SERVER_PORT'])) ? (int) $_SERVER['SERVER_PORT'] : (int) getenv('SERVER_PORT');		$secure = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? 1 : 0;		$script_name = (!empty($_SERVER['PHP_SELF'])) ? $_SERVER['PHP_SELF'] : getenv('PHP_SELF');		if (!$script_name)		{			$script_name = (!empty($_SERVER['REQUEST_URI'])) ? $_SERVER['REQUEST_URI'] : getenv('REQUEST_URI');		}		// Replace backslashes and doubled slashes (could happen on some proxy setups)		$script_name = str_replace(array('\\', '//'), '/', $script_name);		$script_path = trim(dirname($script_name));		$url = (($secure) ? 'https://' : 'http://') . $server_name;		if ($server_port && (($secure && $server_port <> 443) || (!$secure && $server_port <> 80)))		{			// HTTP HOST can carry a port number...			if (strpos($server_name, ':') === false)			{				$url .= ':' . $server_port;			}		}		$url .= $script_path . '/' . $page;		header('Location: ' . $url);		exit;	}	/**	* Generate the navigation tabs	*/	function generate_navigation()	{		global $lang, $template, $phpEx, $language;		if (is_array($this->module_ary))		{			@ksort($this->module_ary);			foreach ($this->module_ary as $cat_ary)			{				$cat = $cat_ary['name'];				$l_cat = (!empty($lang['CAT_' . $cat])) ? $lang['CAT_' . $cat] : preg_replace('#_#', ' ', $cat);				$cat = strtolower($cat);				$url = $this->module_url . "?mode=$cat&amp;language=$language";				if ($this->mode == $cat)				{					$template->assign_block_vars('t_block1', array(						'L_TITLE'		=> $l_cat,						'S_SELECTED'	=> true,						'U_TITLE'		=> $url,					));					if (is_array($this->module_ary[$this->id]['subs']))					{						$subs = $this->module_ary[$this->id]['subs'];						foreach ($subs as $option)						{							$l_option = (!empty($lang['SUB_' . $option])) ? $lang['SUB_' . $option] : preg_replace('#_#', ' ', $option);							$option = strtolower($option);							$url = $this->module_url . '?mode=' . $this->mode . "&amp;sub=$option&amp;language=$language";							$template->assign_block_vars('l_block1', array(								'L_TITLE'		=> $l_option,								'S_SELECTED'	=> ($this->sub == $option),								'U_TITLE'		=> $url,							));						}					}					if (is_array($this->module_ary[$this->id]['stages']))					{						$subs = $this->module_ary[$this->id]['stages'];						$matched = false;						foreach ($subs as $option)						{							$l_option = (!empty($lang['STAGE_' . $option])) ? $lang['STAGE_' . $option] : preg_replace('#_#', ' ', $option);							$option = strtolower($option);							$matched = ($this->sub == $option) ? true : $matched;							$template->assign_block_vars('l_block2', array(								'L_TITLE'		=> $l_option,								'S_SELECTED'	=> ($this->sub == $option),								'S_COMPLETE'	=> !$matched,							));						}					}				}				else				{					$template->assign_block_vars('t_block1', array(						'L_TITLE'		=> $l_cat,						'S_SELECTED'	=> false,						'U_TITLE'		=> $url,					));				}			}		}	}	/**	* Output an error message	* If skip is true, return and continue execution, else exit	*/	function error($error, $line, $file, $skip = false)	{		global $lang, $db, $template;		if ($skip)		{			$template->assign_block_vars('checks', array(				'S_LEGEND'	=> true,				'LEGEND'	=> $lang['INST_ERR'],			));			$template->assign_block_vars('checks', array(				'TITLE'		=> basename($file) . ' [ ' . $line . ' ]',				'RESULT'	=> '<b style="color:red">' . $error . '</b>',			));			return;		}		echo '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">';		echo '<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr">';		echo '<head>';		echo '<meta http-equiv="content-type" content="text/html; charset=utf-8" />';		echo '<title>' . $lang['INST_ERR_FATAL'] . '</title>';		echo '<link href="../adm/style/admin.css" rel="stylesheet" type="text/css" media="screen" />';		echo '</head>';		echo '<body id="errorpage">';		echo '<div id="wrap">';		echo '	<div id="page-header">';		echo '	</div>';		echo '	<div id="page-body">';		echo '		<div id="acp">';		echo '		<div class="panel">';		echo '			<span class="corners-top"><span></span></span>';		echo '			<div id="content">';		echo '				<h1>' . $lang['INST_ERR_FATAL'] . '</h1>';		echo '		<p>' . $lang['INST_ERR_FATAL'] . "</p>\n";		echo '		<p>' . basename($file) . ' [ ' . $line . " ]</p>\n";		echo '		<p><b>' . $error . "</b></p>\n";		echo '			</div>';		echo '			<span class="corners-bottom"><span></span></span>';		echo '		</div>';		echo '		</div>';		echo '	</div>';		echo '	<div id="page-footer">';		echo '		Powered by <a href="http://www.phpbb.com/">phpBB</a>&reg; Forum Software &copy; phpBB Group';		echo '	</div>';		echo '</div>';		echo '</body>';		echo '</html>';		if (!empty($db) && is_object($db))		{			$db->sql_close();		}		exit_handler();	}	/**	* Output an error message for a database related problem	* If skip is true, return and continue execution, else exit	*/	function db_error($error, $sql, $line, $file, $skip = false)	{		global $lang, $db, $template;		if ($skip)		{			$template->assign_block_vars('checks', array(				'S_LEGEND'	=> true,				'LEGEND'	=> $lang['INST_ERR_FATAL'],			));			$template->assign_block_vars('checks', array(				'TITLE'		=> basename($file) . ' [ ' . $line . ' ]',				'RESULT'	=> '<b style="color:red">' . $error . '</b><br />&#187; SQL:' . $sql,			));			return;		}		$template->set_filenames(array(			'body' => 'install_error.html')		);		$this->page_header();		$this->generate_navigation();		$template->assign_vars(array(			'MESSAGE_TITLE'		=> $lang['INST_ERR_FATAL_DB'],			'MESSAGE_TEXT'		=> '<p>' . basename($file) . ' [ ' . $line . ' ]</p><p>SQL : ' . $sql . '</p><p><b>' . $error . '</b></p>',		));		// Rollback if in transaction		if ($db->transaction)		{			$db->sql_transaction('rollback');		}		$this->page_footer();	}	/**	* Generate the relevant HTML for an input field and the associated label and explanatory text	*/	function input_field($name, $type, $value='', $options='')	{		global $lang;		$tpl_type = explode(':', $type);		$tpl = '';		switch ($tpl_type[0])		{			case 'text':			case 'password':				$size = (int) $tpl_type[1];				$maxlength = (int) $tpl_type[2];				$tpl = '<input id="' . $name . '" type="' . $tpl_type[0] . '"' . (($size) ? ' size="' . $size . '"' : '') . ' maxlength="' . (($maxlength) ? $maxlength : 255) . '" name="' . $name . '" value="' . $value . '" />';			break;			case 'textarea':				$rows = (int) $tpl_type[1];				$cols = (int) $tpl_type[2];				$tpl = '<textarea id="' . $name . '" name="' . $name . '" rows="' . $rows . '" cols="' . $cols . '">' . $value . '</textarea>';			break;			case 'radio':				$key_yes	= ($value) ? ' checked="checked" id="' . $name . '"' : '';				$key_no		= (!$value) ? ' checked="checked" id="' . $name . '"' : '';				$tpl_type_cond = explode('_', $tpl_type[1]);				$type_no = ($tpl_type_cond[0] == 'disabled' || $tpl_type_cond[0] == 'enabled') ? false : true;				$tpl_no = '<label><input type="radio" name="' . $name . '" value="0"' . $key_no . ' class="radio" /> ' . (($type_no) ? $lang['NO'] : $lang['DISABLED']) . '</label>';				$tpl_yes = '<label><input type="radio" name="' . $name . '" value="1"' . $key_yes . ' class="radio" /> ' . (($type_no) ? $lang['YES'] : $lang['ENABLED']) . '</label>';				$tpl = ($tpl_type_cond[0] == 'yes' || $tpl_type_cond[0] == 'enabled') ? $tpl_yes . '&nbsp;&nbsp;' . $tpl_no : $tpl_no . '&nbsp;&nbsp;' . $tpl_yes;			break;			case 'select':				eval('$s_options = ' . str_replace('{VALUE}', $value, $options) . ';');				$tpl = '<select id="' . $name . '" name="' . $name . '">' . $s_options . '</select>';			break;			case 'custom':				eval('$tpl = ' . str_replace('{VALUE}', $value, $options) . ';');			break;			default:			break;		}		return $tpl;	}	/**	* Generate the drop down of available language packs	*/	function inst_language_select($default = '')	{		global $phpbb_root_path, $phpEx;		$dir = @opendir($phpbb_root_path . 'language');		if (!$dir)		{			$this->error('Unable to access the language directory', __LINE__, __FILE__);		}		while ($file = readdir($dir))		{			$path = $phpbb_root_path . 'language/' . $file;			if ($file == '.' || $file == '..' || is_link($path) || is_file($path) || $file == 'CVS')			{				continue;			}			if (file_exists($path . '/iso.txt'))			{				list($displayname, $localname) = @file($path . '/iso.txt');				$lang[$localname] = $file;			}		}		closedir($dir);		@asort($lang);		@reset($lang);		$user_select = '';		foreach ($lang as $displayname => $filename)		{			$selected = (strtolower($default) == strtolower($filename)) ? ' selected="selected"' : '';			$user_select .= '<option value="' . $filename . '"' . $selected . '>' . ucwords($displayname) . '</option>';		}		return $user_select;	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** mcp_logs* Handling warning the users* @package mcp*/class mcp_logs{	var $u_action;	var $p_master;	function mcp_logs(&$p_master)	{		$this->p_master = &$p_master;	}	function main($id, $mode)	{		global $auth, $db, $user, $template;		global $config, $phpbb_root_path, $phpEx;		$user->add_lang('acp/common');		$action = request_var('action', array('' => ''));		if (is_array($action))		{			list($action, ) = each($action);		}		else		{			$action = request_var('action', '');		}		// Set up general vars		$start		= request_var('start', 0);		$deletemark = ($action == 'del_marked') ? true : false;		$deleteall	= ($action == 'del_all') ? true : false;		$marked		= request_var('mark', array(0));		// Sort keys		$sort_days	= request_var('st', 0);		$sort_key	= request_var('sk', 't');		$sort_dir	= request_var('sd', 'd');		$this->tpl_name = 'mcp_logs';		$this->page_title = 'MCP_LOGS';		$forum_list = array_values(array_intersect(get_forum_list('f_read'), get_forum_list('m_')));		$forum_list[] = 0;		$forum_id = $topic_id = 0;		switch ($mode)		{			case 'front':			break;			case 'forum_logs':				$forum_id = request_var('f', 0);				if (!in_array($forum_id, $forum_list))				{					trigger_error('NOT_AUTHORISED');				}				$forum_list = array($forum_id);			break;			case 'topic_logs':				$topic_id = request_var('t', 0);				$sql = 'SELECT forum_id					FROM ' . TOPICS_TABLE . '					WHERE topic_id = ' . $topic_id;				$result = $db->sql_query($sql);				$forum_id = (int) $db->sql_fetchfield('forum_id');				$db->sql_freeresult($result);				if (!in_array($forum_id, $forum_list))				{					trigger_error('NOT_AUTHORISED');				}				$forum_list = array($forum_id);			break;		}		// Delete entries if requested and able		if (($deletemark || $deleteall) && $auth->acl_get('a_clearlogs'))		{			if (confirm_box(true))			{				if ($deletemark && sizeof($marked))				{					$sql = 'DELETE FROM ' . LOG_TABLE . '						WHERE log_type = ' . LOG_MOD . '							AND ' . $db->sql_in_set('forum_id', $forum_list) . '							AND ' . $db->sql_in_set('log_id', $marked);					$db->sql_query($sql);					add_log('admin', 'LOG_CLEAR_MOD');				}				else if ($deleteall)				{					$sql = 'DELETE FROM ' . LOG_TABLE . '						WHERE log_type = ' . LOG_MOD . '							AND ' . $db->sql_in_set('forum_id', $forum_list);					if ($mode == 'topic_logs')					{						$sql .= ' AND topic_id = ' . $topic_id;					}					$db->sql_query($sql);					add_log('admin', 'LOG_CLEAR_MOD');				}			}			else			{				confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(					'f'			=> $forum_id,					't'			=> $topic_id,					'start'		=> $start,					'delmarked'	=> $deletemark,					'delall'	=> $deleteall,					'mark'		=> $marked,					'st'		=> $sort_days,					'sk'		=> $sort_key,					'sd'		=> $sort_dir,					'i'			=> $id,					'mode'		=> $mode,					'action'	=> request_var('action', array('' => ''))))				);			}		}		// Sorting		$limit_days = array(0 => $user->lang['ALL_ENTRIES'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);		$sort_by_text = array('u' => $user->lang['SORT_USERNAME'], 't' => $user->lang['SORT_DATE'], 'i' => $user->lang['SORT_IP'], 'o' => $user->lang['SORT_ACTION']);		$sort_by_sql = array('u' => 'u.username_clean', 't' => 'l.log_time', 'i' => 'l.log_ip', 'o' => 'l.log_operation');		$s_limit_days = $s_sort_key = $s_sort_dir = $u_sort_param = '';		gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);		// Define where and sort sql for use in displaying logs		$sql_where = ($sort_days) ? (time() - ($sort_days * 86400)) : 0;		$sql_sort = $sort_by_sql[$sort_key] . ' ' . (($sort_dir == 'd') ? 'DESC' : 'ASC');		$keywords = utf8_normalize_nfc(request_var('keywords', '', true));		$keywords_param = !empty($keywords) ? '&amp;keywords=' . urlencode(htmlspecialchars_decode($keywords)) : '';		// Grab log data		$log_data = array();		$log_count = 0;		$start = view_log('mod', $log_data, $log_count, $config['topics_per_page'], $start, $forum_list, $topic_id, 0, $sql_where, $sql_sort, $keywords);		$template->assign_vars(array(			'PAGE_NUMBER'		=> on_page($log_count, $config['topics_per_page'], $start),			'TOTAL'				=> ($log_count == 1) ? $user->lang['TOTAL_LOG'] : sprintf($user->lang['TOTAL_LOGS'], $log_count),			'PAGINATION'		=> generate_pagination($this->u_action . "&amp;$u_sort_param$keywords_param", $log_count, $config['topics_per_page'], $start),			'L_TITLE'			=> $user->lang['MCP_LOGS'],			'U_POST_ACTION'			=> $this->u_action . "&amp;$u_sort_param$keywords_param&amp;start=$start",			'S_CLEAR_ALLOWED'		=> ($auth->acl_get('a_clearlogs')) ? true : false,			'S_SELECT_SORT_DIR'		=> $s_sort_dir,			'S_SELECT_SORT_KEY'		=> $s_sort_key,			'S_SELECT_SORT_DAYS'	=> $s_limit_days,			'S_LOGS'				=> ($log_count > 0),			'S_KEYWORDS'			=> $keywords,			)		);		foreach ($log_data as $row)		{			$data = array();			$checks = array('viewtopic', 'viewforum');			foreach ($checks as $check)			{				if (isset($row[$check]) && $row[$check])				{					$data[] = '<a href="' . $row[$check] . '">' . $user->lang['LOGVIEW_' . strtoupper($check)] . '</a>';				}			}			$template->assign_block_vars('log', array(				'USERNAME'		=> $row['username_full'],				'IP'			=> $row['ip'],				'DATE'			=> $user->format_date($row['time']),				'ACTION'		=> $row['action'],				'DATA'			=> (sizeof($data)) ? implode(' | ', $data) : '',				'ID'			=> $row['id'],				)			);		}	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_bots_info{	function module()	{		return array(			'filename'	=> 'acp_bots',			'title'		=> 'ACP_BOTS',			'version'	=> '1.0.0',			'modes'		=> array(				'bots'		=> array('title' => 'ACP_BOTS', 'auth' => 'acl_a_bots', 'cat' => array('ACP_GENERAL_TASKS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);require($phpbb_root_path . 'includes/startup.' . $phpEx);require($phpbb_root_path . 'config.' . $phpEx);if (!defined('PHPBB_INSTALLED') || empty($dbms) || empty($acm_type)){	exit;}// Load Extensionsif (!empty($load_extensions) && function_exists('dl')){	$load_extensions = explode(',', $load_extensions);	foreach ($load_extensions as $extension)	{		@dl(trim($extension));	}}$id = (isset($_GET['id'])) ? intval($_GET['id']) : 0;// This is a simple script to grab and output the requested CSS data stored in the DB// We include a session_id check to try and limit 3rd party linking ... unless they// happen to have a current session it will output nothing. We will also cache the// resulting CSS data for five minutes ... anything to reduce the load on the SQL// server a littleif ($id){	// Include files	require($phpbb_root_path . 'includes/acm/acm_' . $acm_type . '.' . $phpEx);	require($phpbb_root_path . 'includes/cache.' . $phpEx);	require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);	require($phpbb_root_path . 'includes/constants.' . $phpEx);	require($phpbb_root_path . 'includes/functions.' . $phpEx);	$db = new $sql_db();	$cache = new cache();	// Connect to DB	if (!@$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, false))	{		exit;	}	unset($dbpasswd);	$config = $cache->obtain_config();	$user = false;	// try to get a session ID from REQUEST array	$sid = request_var('sid', '');	if (!$sid)	{		// if that failed, then look in the cookies		$sid = request_var($config['cookie_name'] . '_sid', '', false, true);	}	if (strspn($sid, 'abcdefABCDEF0123456789') !== strlen($sid))	{		$sid = '';	}	if ($sid)	{		$sql = 'SELECT u.user_id, u.user_lang			FROM ' . SESSIONS_TABLE . ' s, ' . USERS_TABLE . " u			WHERE s.session_id = '" . $db->sql_escape($sid) . "'				AND s.session_user_id = u.user_id";		$result = $db->sql_query($sql);		$user = $db->sql_fetchrow($result);		$db->sql_freeresult($result);	}	$recompile = $config['load_tplcompile'];	if (!$user)	{		$id			= ($id) ? $id : $config['default_style'];//		Commented out because calls do not always include the SID anymore//		$recompile	= false;		$user		= array('user_id' => ANONYMOUS);	}	$sql = 'SELECT s.style_id, c.theme_id, c.theme_data, c.theme_path, c.theme_name, c.theme_mtime, i.*, t.template_path		FROM ' . STYLES_TABLE . ' s, ' . STYLES_TEMPLATE_TABLE . ' t, ' . STYLES_THEME_TABLE . ' c, ' . STYLES_IMAGESET_TABLE . ' i		WHERE s.style_id = ' . $id . '			AND t.template_id = s.template_id			AND c.theme_id = s.theme_id			AND i.imageset_id = s.imageset_id';	$result = $db->sql_query($sql, 300);	$theme = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$theme)	{		exit;	}	if ($user['user_id'] == ANONYMOUS)	{		$user['user_lang'] = $config['default_lang'];	}	$user_image_lang = (file_exists($phpbb_root_path . 'styles/' . $theme['imageset_path'] . '/imageset/' . $user['user_lang'])) ? $user['user_lang'] : $config['default_lang'];	// Same query in session.php	$sql = 'SELECT *		FROM ' . STYLES_IMAGESET_DATA_TABLE . '		WHERE imageset_id = ' . $theme['imageset_id'] . "		AND image_filename <> ''		AND image_lang IN ('" . $db->sql_escape($user_image_lang) . "', '')";	$result = $db->sql_query($sql, 3600);	$img_array = array();	while ($row = $db->sql_fetchrow($result))	{		$img_array[$row['image_name']] = $row;	}	$db->sql_freeresult($result);	// gzip_compression	if ($config['gzip_compress'])	{		// IE6 is not able to compress the style (do not ask us why!)		$browser = (!empty($_SERVER['HTTP_USER_AGENT'])) ? strtolower(htmlspecialchars((string) $_SERVER['HTTP_USER_AGENT'])) : '';		if ($browser && strpos($browser, 'msie 6.0') === false && @extension_loaded('zlib') && !headers_sent())		{			ob_start('ob_gzhandler');		}	}	// Expire time of seven days if not recached	$expire_time = 7*86400;	$recache = false;	// Re-cache stylesheet data if necessary	if ($recompile || empty($theme['theme_data']))	{		$recache = (empty($theme['theme_data'])) ? true : false;		$update_time = time();		// We test for stylesheet.css because it is faster and most likely the only file changed on common themes		if (!$recache && $theme['theme_mtime'] < @filemtime("{$phpbb_root_path}styles/" . $theme['theme_path'] . '/theme/stylesheet.css'))		{			$recache = true;			$update_time = @filemtime("{$phpbb_root_path}styles/" . $theme['theme_path'] . '/theme/stylesheet.css');		}		else if (!$recache)		{			$last_change = $theme['theme_mtime'];			$dir = @opendir("{$phpbb_root_path}styles/{$theme['theme_path']}/theme");			if ($dir)			{				while (($entry = readdir($dir)) !== false)				{					if (substr(strrchr($entry, '.'), 1) == 'css' && $last_change < @filemtime("{$phpbb_root_path}styles/{$theme['theme_path']}/theme/{$entry}"))					{						$recache = true;						break;					}				}				closedir($dir);			}		}	}	if ($recache)	{		include_once($phpbb_root_path . 'includes/acp/acp_styles.' . $phpEx);		$theme['theme_data'] = acp_styles::db_theme_data($theme);		$theme['theme_mtime'] = $update_time;		// Save CSS contents		$sql_ary = array(			'theme_mtime'	=> $theme['theme_mtime'],			'theme_data'	=> $theme['theme_data']		);		$sql = 'UPDATE ' . STYLES_THEME_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "			WHERE theme_id = {$theme['theme_id']}";		$db->sql_query($sql);		$cache->destroy('sql', STYLES_THEME_TABLE);	}	// Only set the expire time if the theme changed data is older than 30 minutes - to cope with changes from the ACP	if ($recache || $theme['theme_mtime'] > (time() - 1800))	{		header('Expires: 0');	}	else	{		header('Expires: ' . gmdate('D, d M Y H:i:s \G\M\T', time() + $expire_time));	}	header('Content-type: text/css; charset=UTF-8');	// Parse Theme Data	$replace = array(		'{T_THEME_PATH}'			=> "{$phpbb_root_path}styles/" . $theme['theme_path'] . '/theme',		'{T_TEMPLATE_PATH}'			=> "{$phpbb_root_path}styles/" . $theme['template_path'] . '/template',		'{T_IMAGESET_PATH}'			=> "{$phpbb_root_path}styles/" . $theme['imageset_path'] . '/imageset',		'{T_IMAGESET_LANG_PATH}'	=> "{$phpbb_root_path}styles/" . $theme['imageset_path'] . '/imageset/' . $user_image_lang,		'{T_STYLESHEET_NAME}'		=> $theme['theme_name'],		'{S_USER_LANG}'				=> $user['user_lang']	);	$theme['theme_data'] = str_replace(array_keys($replace), array_values($replace), $theme['theme_data']);	$matches = array();	preg_match_all('#\{IMG_([A-Za-z0-9_]*?)_(WIDTH|HEIGHT|SRC)\}#', $theme['theme_data'], $matches);	$imgs = $find = $replace = array();	if (isset($matches[0]) && sizeof($matches[0]))	{		foreach ($matches[1] as $i => $img)		{			$img = strtolower($img);			$find[] = $matches[0][$i];			if (!isset($img_array[$img]))			{				$replace[] = '';				continue;			}			if (!isset($imgs[$img]))			{				$img_data = &$img_array[$img];				$imgsrc = ($img_data['image_lang'] ? $img_data['image_lang'] . '/' : '') . $img_data['image_filename'];				$imgs[$img] = array(					'src'		=> $phpbb_root_path . 'styles/' . $theme['imageset_path'] . '/imageset/' . $imgsrc,					'width'		=> $img_data['image_width'],					'height'	=> $img_data['image_height'],				);			}			switch ($matches[2][$i])			{				case 'SRC':					$replace[] = $imgs[$img]['src'];				break;				case 'WIDTH':					$replace[] = $imgs[$img]['width'];				break;				case 'HEIGHT':					$replace[] = $imgs[$img]['height'];				break;				default:					continue;			}		}		if (sizeof($find))		{			$theme['theme_data'] = str_replace($find, $replace, $theme['theme_data']);		}	}	echo $theme['theme_data'];	if (!empty($cache))	{		$cache->unload();	}	$db->sql_close();}exit;?>
<?php/**** acp_bots [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// Bot settings$lang = array_merge($lang, array(	'BOTS'				=> 'Manage bots',	'BOTS_EXPLAIN'		=> 'Bots, spiders or crawlers are automated agents most commonly used by search engines to update their databases. Since they rarely make proper use of sessions they can distort visitor counts, increase load and sometimes fail to index sites correctly. Here you can define a special type of user to overcome these problems.',	'BOT_ACTIVATE'		=> 'Activate',	'BOT_ACTIVE'		=> 'Bot active',	'BOT_ADD'			=> 'Add bot',	'BOT_ADDED'			=> 'New bot successfully added.',	'BOT_AGENT'			=> 'Agent match',	'BOT_AGENT_EXPLAIN'	=> 'A string matching the bots browser agent, partial matches are allowed.',	'BOT_DEACTIVATE'	=> 'Deactivate',	'BOT_DELETED'		=> 'Bot deleted successfully.',	'BOT_EDIT'			=> 'Edit bots',	'BOT_EDIT_EXPLAIN'	=> 'Here you can add or edit an existing bot entry. You may define an agent string and/or one or more IP addresses (or range of addresses) to match. Be careful when defining matching agent strings or addresses. You may also specify a style and language that the bot will view the board using. This may allow you to reduce bandwidth use by setting a simple style for bots. Remember to set appropriate permissions for the special Bot usergroup.',	'BOT_LANG'			=> 'Bot language',	'BOT_LANG_EXPLAIN'	=> 'The language presented to the bot as it browses.',	'BOT_LAST_VISIT'	=> 'Last visit',	'BOT_IP'			=> 'Bot IP address',	'BOT_IP_EXPLAIN'	=> 'Partial matches are allowed, separate addresses with a comma.',	'BOT_NAME'			=> 'Bot name',	'BOT_NAME_EXPLAIN'	=> 'Used only for your own information.',	'BOT_NAME_TAKEN'	=> 'The name is already in use on your board and cant be used for the Bot.',	'BOT_NEVER'			=> 'Never',	'BOT_STYLE'			=> 'Bot style',	'BOT_STYLE_EXPLAIN'	=> 'The style used for the board by the bot.',	'BOT_UPDATED'		=> 'Existing bot updated successfully.',	'ERR_BOT_AGENT_MATCHES_UA'	=> 'The bot agent you supplied is similar to the one you are currently using. Please adjust the agent for this bot.',	'ERR_BOT_NO_IP'				=> 'The IP addresses you supplied were invalid or the hostname could not be resolved.',	'ERR_BOT_NO_MATCHES'		=> 'You must supply at least one of an agent or IP for this bot match.',	'NO_BOT'		=> 'Found no bot with the specified ID.',	'NO_BOT_GROUP'	=> 'Unable to find special bot group.',));?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_main_info{	function module()	{		return array(			'filename'	=> 'acp_main',			'title'		=> 'ACP_INDEX',			'version'	=> '1.0.0',			'modes'		=> array(				'main'		=> array('title' => 'ACP_INDEX', 'auth' => '', 'cat' => array('ACP_CAT_GENERAL')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package dbal* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}include_once($phpbb_root_path . 'includes/db/dbal.' . $phpEx);if (!class_exists('phpbb_error_collector')){	include($phpbb_root_path . 'includes/error_collector.' . $phpEx);}/*** PostgreSQL Database Abstraction Layer* Minimum Requirement is Version 7.3+* @package dbal*/class dbal_postgres extends dbal{	var $last_query_text = '';	var $connect_error = '';	/**	* Connect to server	*/	function sql_connect($sqlserver, $sqluser, $sqlpassword, $database, $port = false, $persistency = false, $new_link = false)	{		$connect_string = '';		if ($sqluser)		{			$connect_string .= "user=$sqluser ";		}		if ($sqlpassword)		{			$connect_string .= "password=$sqlpassword ";		}		if ($sqlserver)		{			// $sqlserver can carry a port separated by : for compatibility reasons			// If $sqlserver has more than one : it's probably an IPv6 address.			// In this case we only allow passing a port via the $port variable.			if (substr_count($sqlserver, ':') === 1)			{				list($sqlserver, $port) = explode(':', $sqlserver);			}			if ($sqlserver !== 'localhost')			{				$connect_string .= "host=$sqlserver ";			}			if ($port)			{				$connect_string .= "port=$port ";			}		}		$schema = '';		if ($database)		{			$this->dbname = $database;			if (strpos($database, '.') !== false)			{				list($database, $schema) = explode('.', $database);			}			$connect_string .= "dbname=$database";		}		$this->persistency = $persistency;		if ($this->persistency)		{			if (!function_exists('pg_pconnect'))			{				$this->connect_error = 'pg_pconnect function does not exist, is pgsql extension installed?';				return $this->sql_error('');			}			$collector = new phpbb_error_collector;			$collector->install();			$this->db_connect_id = (!$new_link) ? @pg_pconnect($connect_string) : @pg_pconnect($connect_string, PGSQL_CONNECT_FORCE_NEW);		}		else		{			if (!function_exists('pg_connect'))			{				$this->connect_error = 'pg_connect function does not exist, is pgsql extension installed?';				return $this->sql_error('');			}			$collector = new phpbb_error_collector;			$collector->install();			$this->db_connect_id = (!$new_link) ? @pg_connect($connect_string) : @pg_connect($connect_string, PGSQL_CONNECT_FORCE_NEW);		}		$collector->uninstall();		if ($this->db_connect_id)		{			if (version_compare($this->sql_server_info(true), '8.2', '>='))			{				$this->multi_insert = true;			}			if ($schema !== '')			{				@pg_query($this->db_connect_id, 'SET search_path TO ' . $schema);			}			return $this->db_connect_id;		}		$this->connect_error = $collector->format_errors();		return $this->sql_error('');	}	/**	* Version information about used database	* @param bool $raw if true, only return the fetched sql_server_version	* @param bool $use_cache If true, it is safe to retrieve the value from the cache	* @return string sql server version	*/	function sql_server_info($raw = false, $use_cache = true)	{		global $cache;		if (!$use_cache || empty($cache) || ($this->sql_server_version = $cache->get('pgsql_version')) === false)		{			$query_id = @pg_query($this->db_connect_id, 'SELECT VERSION() AS version');			$row = @pg_fetch_assoc($query_id, null);			@pg_free_result($query_id);			$this->sql_server_version = (!empty($row['version'])) ? trim(substr($row['version'], 10)) : 0;			if (!empty($cache) && $use_cache)			{				$cache->put('pgsql_version', $this->sql_server_version);			}		}		return ($raw) ? $this->sql_server_version : 'PostgreSQL ' . $this->sql_server_version;	}	/**	* SQL Transaction	* @access private	*/	function _sql_transaction($status = 'begin')	{		switch ($status)		{			case 'begin':				return @pg_query($this->db_connect_id, 'BEGIN');			break;			case 'commit':				return @pg_query($this->db_connect_id, 'COMMIT');			break;			case 'rollback':				return @pg_query($this->db_connect_id, 'ROLLBACK');			break;		}		return true;	}	/**	* Base query method	*	* @param	string	$query		Contains the SQL query which shall be executed	* @param	int		$cache_ttl	Either 0 to avoid caching or the time in seconds which the result shall be kept in cache	* @return	mixed				When casted to bool the returned value returns true on success and false on failure	*	* @access	public	*/	function sql_query($query = '', $cache_ttl = 0)	{		if ($query != '')		{			global $cache;			// EXPLAIN only in extra debug mode			if (defined('DEBUG_EXTRA'))			{				$this->sql_report('start', $query);			}			$this->last_query_text = $query;			$this->query_result = ($cache_ttl && method_exists($cache, 'sql_load')) ? $cache->sql_load($query) : false;			$this->sql_add_num_queries($this->query_result);			if ($this->query_result === false)			{				if (($this->query_result = @pg_query($this->db_connect_id, $query)) === false)				{					$this->sql_error($query);				}				if (defined('DEBUG_EXTRA'))				{					$this->sql_report('stop', $query);				}				if ($cache_ttl && method_exists($cache, 'sql_save'))				{					$this->open_queries[(int) $this->query_result] = $this->query_result;					$cache->sql_save($query, $this->query_result, $cache_ttl);				}				else if (strpos($query, 'SELECT') === 0 && $this->query_result)				{					$this->open_queries[(int) $this->query_result] = $this->query_result;				}			}			else if (defined('DEBUG_EXTRA'))			{				$this->sql_report('fromcache', $query);			}		}		else		{			return false;		}		return $this->query_result;	}	/**	* Build db-specific query data	* @access private	*/	function _sql_custom_build($stage, $data)	{		return $data;	}	/**	* Build LIMIT query	*/	function _sql_query_limit($query, $total, $offset = 0, $cache_ttl = 0)	{		$this->query_result = false;		// if $total is set to 0 we do not want to limit the number of rows		if ($total == 0)		{			$total = 'ALL';		}		$query .= "\n LIMIT $total OFFSET $offset";		return $this->sql_query($query, $cache_ttl);	}	/**	* Return number of affected rows	*/	function sql_affectedrows()	{		return ($this->query_result) ? @pg_affected_rows($this->query_result) : false;	}	/**	* Fetch current row	*/	function sql_fetchrow($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_fetchrow($query_id);		}		return ($query_id !== false) ? @pg_fetch_assoc($query_id, null) : false;	}	/**	* Seek to given row number	* rownum is zero-based	*/	function sql_rowseek($rownum, &$query_id)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_rowseek($rownum, $query_id);		}		return ($query_id !== false) ? @pg_result_seek($query_id, $rownum) : false;	}	/**	* Get last inserted id after insert statement	*/	function sql_nextid()	{		$query_id = $this->query_result;		if ($query_id !== false && $this->last_query_text != '')		{			if (preg_match("/^INSERT[\t\n ]+INTO[\t\n ]+([a-z0-9\_\-]+)/is", $this->last_query_text, $tablename))			{				$query = "SELECT currval('" . $tablename[1] . "_seq') AS last_value";				$temp_q_id = @pg_query($this->db_connect_id, $query);				if (!$temp_q_id)				{					return false;				}				$temp_result = @pg_fetch_assoc($temp_q_id, NULL);				@pg_free_result($query_id);				return ($temp_result) ? $temp_result['last_value'] : false;			}		}		return false;	}	/**	* Free sql result	*/	function sql_freeresult($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_freeresult($query_id);		}		if (isset($this->open_queries[(int) $query_id]))		{			unset($this->open_queries[(int) $query_id]);			return @pg_free_result($query_id);		}		return false;	}	/**	* Escape string used in sql query	* Note: Do not use for bytea values if we may use them at a later stage	*/	function sql_escape($msg)	{		return @pg_escape_string($msg);	}	/**	* Build LIKE expression	* @access private	*/	function _sql_like_expression($expression)	{		return $expression;	}	/**	* return sql error array	* @access private	*/	function _sql_error()	{		// pg_last_error only works when there is an established connection.		// Connection errors have to be tracked by us manually.		if ($this->db_connect_id)		{			$message = @pg_last_error($this->db_connect_id);		}		else		{			$message = $this->connect_error;		}		return array(			'message'	=> $message,			'code'		=> ''		);	}	/**	* Close sql connection	* @access private	*/	function _sql_close()	{		return @pg_close($this->db_connect_id);	}	/**	* Build db-specific report	* @access private	*/	function _sql_report($mode, $query = '')	{		switch ($mode)		{			case 'start':				$explain_query = $query;				if (preg_match('/UPDATE ([a-z0-9_]+).*?WHERE(.*)/s', $query, $m))				{					$explain_query = 'SELECT * FROM ' . $m[1] . ' WHERE ' . $m[2];				}				else if (preg_match('/DELETE FROM ([a-z0-9_]+).*?WHERE(.*)/s', $query, $m))				{					$explain_query = 'SELECT * FROM ' . $m[1] . ' WHERE ' . $m[2];				}				if (preg_match('/^SELECT/', $explain_query))				{					$html_table = false;					if ($result = @pg_query($this->db_connect_id, "EXPLAIN $explain_query"))					{						while ($row = @pg_fetch_assoc($result, NULL))						{							$html_table = $this->sql_report('add_select_row', $query, $html_table, $row);						}					}					@pg_free_result($result);					if ($html_table)					{						$this->html_hold .= '</table>';					}				}			break;			case 'fromcache':				$endtime = explode(' ', microtime());				$endtime = $endtime[0] + $endtime[1];				$result = @pg_query($this->db_connect_id, $query);				while ($void = @pg_fetch_assoc($result, NULL))				{					// Take the time spent on parsing rows into account				}				@pg_free_result($result);				$splittime = explode(' ', microtime());				$splittime = $splittime[0] + $splittime[1];				$this->sql_report('record_fromcache', $query, $endtime, $splittime);			break;		}	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_prune{	var $u_action;	function main($id, $mode)	{		global $user, $phpEx, $phpbb_admin_path, $phpbb_root_path;		$user->add_lang('acp/prune');		include_once($phpbb_root_path . 'includes/functions_user.' . $phpEx);		switch ($mode)		{			case 'forums':				$this->tpl_name = 'acp_prune_forums';				$this->page_title = 'ACP_PRUNE_FORUMS';				$this->prune_forums($id, $mode);			break;			case 'users':				$this->tpl_name = 'acp_prune_users';				$this->page_title = 'ACP_PRUNE_USERS';				$this->prune_users($id, $mode);			break;		}	}	/**	* Prune forums	*/	function prune_forums($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$all_forums = request_var('all_forums', 0);		$forum_id = request_var('f', array(0));		$submit = (isset($_POST['submit'])) ? true : false;		if ($all_forums)		{			$sql = 'SELECT forum_id				FROM ' . FORUMS_TABLE . '				ORDER BY left_id';			$result = $db->sql_query($sql);			$forum_id = array();			while ($row = $db->sql_fetchrow($result))			{				$forum_id[] = $row['forum_id'];			}			$db->sql_freeresult($result);		}		if ($submit)		{			if (confirm_box(true))			{				$prune_posted = request_var('prune_days', 0);				$prune_viewed = request_var('prune_vieweddays', 0);				$prune_all = (!$prune_posted && !$prune_viewed) ? true : false;						$prune_flags = 0;				$prune_flags += (request_var('prune_old_polls', 0)) ? 2 : 0;				$prune_flags += (request_var('prune_announce', 0)) ? 4 : 0;				$prune_flags += (request_var('prune_sticky', 0)) ? 8 : 0;				// Convert days to seconds for timestamp functions...				$prunedate_posted = time() - ($prune_posted * 86400);				$prunedate_viewed = time() - ($prune_viewed * 86400);				$template->assign_vars(array(					'S_PRUNED'		=> true)				);				$sql_forum = (sizeof($forum_id)) ? ' AND ' . $db->sql_in_set('forum_id', $forum_id) : '';				// Get a list of forum's or the data for the forum that we are pruning.				$sql = 'SELECT forum_id, forum_name					FROM ' . FORUMS_TABLE . '					WHERE forum_type = ' . FORUM_POST . "						$sql_forum					ORDER BY left_id ASC";				$result = $db->sql_query($sql);				if ($row = $db->sql_fetchrow($result))				{					$prune_ids = array();					$p_result['topics'] = 0;					$p_result['posts'] = 0;					$log_data = '';								do					{						if (!$auth->acl_get('f_list', $row['forum_id']))						{							continue;						}						if ($prune_all)						{							$p_result = prune($row['forum_id'], 'posted', time(), $prune_flags, false);						}						else						{							if ($prune_posted)							{								$return = prune($row['forum_id'], 'posted', $prunedate_posted, $prune_flags, false);								$p_result['topics'] += $return['topics'];								$p_result['posts'] += $return['posts'];							}										if ($prune_viewed)							{								$return = prune($row['forum_id'], 'viewed', $prunedate_viewed, $prune_flags, false);								$p_result['topics'] += $return['topics'];								$p_result['posts'] += $return['posts'];							}						}						$prune_ids[] = $row['forum_id'];						$template->assign_block_vars('pruned', array(							'FORUM_NAME'	=> $row['forum_name'],							'NUM_TOPICS'	=> $p_result['topics'],							'NUM_POSTS'		=> $p_result['posts'])						);								$log_data .= (($log_data != '') ? ', ' : '') . $row['forum_name'];					}					while ($row = $db->sql_fetchrow($result));							// Sync all pruned forums at once					sync('forum', 'forum_id', $prune_ids, true, true);					add_log('admin', 'LOG_PRUNE', $log_data);				}				$db->sql_freeresult($result);				return;			}			else			{				confirm_box(false, $user->lang['PRUNE_FORUM_CONFIRM'], build_hidden_fields(array(					'i'				=> $id,					'mode'			=> $mode,					'submit'		=> 1,					'all_forums'	=> $all_forums,					'f'				=> $forum_id,					'prune_days'		=> request_var('prune_days', 0),					'prune_vieweddays'	=> request_var('prune_vieweddays', 0),					'prune_old_polls'	=> request_var('prune_old_polls', 0),					'prune_announce'	=> request_var('prune_announce', 0),					'prune_sticky'		=> request_var('prune_sticky', 0),				)));			}		}		// If they haven't selected a forum for pruning yet then		// display a select box to use for pruning.		if (!sizeof($forum_id))		{			$template->assign_vars(array(				'U_ACTION'			=> $this->u_action,				'S_SELECT_FORUM'	=> true,				'S_FORUM_OPTIONS'	=> make_forum_select(false, false, false))			);		}		else		{			$sql = 'SELECT forum_id, forum_name				FROM ' . FORUMS_TABLE . '				WHERE ' . $db->sql_in_set('forum_id', $forum_id);			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			if (!$row)			{				$db->sql_freeresult($result);				trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action), E_USER_WARNING);			}			$forum_list = $s_hidden_fields = '';			do			{				$forum_list .= (($forum_list != '') ? ', ' : '') . '<b>' . $row['forum_name'] . '</b>';				$s_hidden_fields .= '<input type="hidden" name="f[]" value="' . $row['forum_id'] . '" />';			}			while ($row = $db->sql_fetchrow($result));			$db->sql_freeresult($result);			$l_selected_forums = (sizeof($forum_id) == 1) ? 'SELECTED_FORUM' : 'SELECTED_FORUMS';			$template->assign_vars(array(				'L_SELECTED_FORUMS'		=> $user->lang[$l_selected_forums],				'U_ACTION'				=> $this->u_action,				'U_BACK'				=> $this->u_action,				'FORUM_LIST'			=> $forum_list,				'S_HIDDEN_FIELDS'		=> $s_hidden_fields)			);		}	}	/**	* Prune users	*/	function prune_users($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('memberlist');		$prune = (isset($_POST['prune'])) ? true : false;		if ($prune)		{			$action = request_var('action', 'deactivate');			$deleteposts = request_var('deleteposts', 0);			if (confirm_box(true))			{				$user_ids = $usernames = array();				$this->get_prune_users($user_ids, $usernames);				if (sizeof($user_ids))				{					if ($action == 'deactivate')					{						user_active_flip('deactivate', $user_ids);						$l_log = 'LOG_PRUNE_USER_DEAC';					}					else if ($action == 'delete')					{						if ($deleteposts)						{							foreach ($user_ids as $user_id)							{								user_delete('remove', $user_id);							}														$l_log = 'LOG_PRUNE_USER_DEL_DEL';						}						else						{							foreach ($user_ids as $user_id)							{								user_delete('retain', $user_id, $usernames[$user_id]);							}							$l_log = 'LOG_PRUNE_USER_DEL_ANON';						}					}					add_log('admin', $l_log, implode(', ', $usernames));					$msg = $user->lang['USER_' . strtoupper($action) . '_SUCCESS'];				}				else				{					$msg = $user->lang['USER_PRUNE_FAILURE'];				}				trigger_error($msg . adm_back_link($this->u_action));			}			else			{				// We list the users which will be pruned...				$user_ids = $usernames = array();				$this->get_prune_users($user_ids, $usernames);				if (!sizeof($user_ids))				{					trigger_error($user->lang['USER_PRUNE_FAILURE'] . adm_back_link($this->u_action), E_USER_WARNING);				}				// Assign to template				foreach ($user_ids as $user_id)				{					$template->assign_block_vars('users', array(						'USERNAME'			=> $usernames[$user_id],						'U_PROFILE'			=> append_sid($phpbb_root_path . 'memberlist.' . $phpEx, 'mode=viewprofile&amp;u=' . $user_id),						'U_USER_ADMIN'		=> ($auth->acl_get('a_user')) ? append_sid("{$phpbb_admin_path}index.$phpEx", 'i=users&amp;mode=overview&amp;u=' . $user_id, true, $user->session_id) : '',					));				}				$template->assign_vars(array(					'S_DEACTIVATE'		=> ($action == 'deactivate') ? true : false,					'S_DELETE'			=> ($action == 'delete') ? true : false,				));				confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(					'i'				=> $id,					'mode'			=> $mode,					'prune'			=> 1,					'users'			=> utf8_normalize_nfc(request_var('users', '', true)),					'username'		=> utf8_normalize_nfc(request_var('username', '', true)),					'email'			=> request_var('email', ''),					'joined_select'	=> request_var('joined_select', ''),					'joined'		=> request_var('joined', ''),					'active_select'	=> request_var('active_select', ''),					'active'		=> request_var('active', ''),					'count_select'	=> request_var('count_select', ''),					'count'			=> request_var('count', ''),					'deleteposts'	=> request_var('deleteposts', 0),					'action'		=> request_var('action', ''),				)), 'confirm_body_prune.html');			}		}		$find_count = array('lt' => $user->lang['LESS_THAN'], 'eq' => $user->lang['EQUAL_TO'], 'gt' => $user->lang['MORE_THAN']);		$s_find_count = '';		foreach ($find_count as $key => $value)		{			$selected = ($key == 'eq') ? ' selected="selected"' : '';			$s_find_count .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';		}		$find_time = array('lt' => $user->lang['BEFORE'], 'gt' => $user->lang['AFTER']);		$s_find_join_time = '';		foreach ($find_time as $key => $value)		{			$s_find_join_time .= '<option value="' . $key . '">' . $value . '</option>';		}				$s_find_active_time = '';		foreach ($find_time as $key => $value)		{			$s_find_active_time .= '<option value="' . $key . '">' . $value . '</option>';		}		$template->assign_vars(array(			'U_ACTION'			=> $this->u_action,			'S_JOINED_OPTIONS'	=> $s_find_join_time,			'S_ACTIVE_OPTIONS'	=> $s_find_active_time,			'S_COUNT_OPTIONS'	=> $s_find_count,			'U_FIND_USERNAME'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=acp_prune&amp;field=users'),		));	}	/**	* Get user_ids/usernames from those being pruned	*/	function get_prune_users(&$user_ids, &$usernames)	{		global $user, $db;		$users = utf8_normalize_nfc(request_var('users', '', true));				if ($users)		{			$users = explode("\n", $users);			$where_sql = ' AND ' . $db->sql_in_set('username_clean', array_map('utf8_clean_string', $users));		}		else		{			$username = utf8_normalize_nfc(request_var('username', '', true));			$email = request_var('email', '');			$joined_select = request_var('joined_select', 'lt');			$active_select = request_var('active_select', 'lt');			$count_select = request_var('count_select', 'eq');			$joined = request_var('joined', '');			$active = request_var('active', '');			$active = ($active) ? explode('-', $active) : array();			$joined = ($joined) ? explode('-', $joined) : array();			if ((sizeof($active) && sizeof($active) != 3) || (sizeof($joined) && sizeof($joined) != 3))			{				trigger_error($user->lang['WRONG_ACTIVE_JOINED_DATE'] . adm_back_link($this->u_action), E_USER_WARNING);			}			$count = request_var('count', '');			$key_match = array('lt' => '<', 'gt' => '>', 'eq' => '=');			$sort_by_types = array('username', 'user_email', 'user_posts', 'user_regdate', 'user_lastvisit');			$where_sql = '';			$where_sql .= ($username) ? ' AND username_clean ' . $db->sql_like_expression(str_replace('*', $db->any_char, utf8_clean_string($username))) : '';			$where_sql .= ($email) ? ' AND user_email ' . $db->sql_like_expression(str_replace('*', $db->any_char, $email)) . ' ' : '';			$where_sql .= (sizeof($joined)) ? " AND user_regdate " . $key_match[$joined_select] . ' ' . gmmktime(0, 0, 0, (int) $joined[1], (int) $joined[2], (int) $joined[0]) : '';			$where_sql .= ($count !== '') ? " AND user_posts " . $key_match[$count_select] . ' ' . (int) $count . ' ' : '';			// First handle pruning of users who never logged in, last active date is 0000-00-00			if (sizeof($active) && (int) $active[0] == 0 && (int) $active[1] == 0 && (int) $active[2] == 0)			{				$where_sql .= ' AND user_lastvisit = 0';			}						else if (sizeof($active) && $active_select != 'lt')			{				$where_sql .= ' AND user_lastvisit ' . $key_match[$active_select] . ' ' . gmmktime(0, 0, 0, (int) $active[1], (int) $active[2], (int) $active[0]);			}			else if (sizeof($active))			{				$where_sql .= ' AND (user_lastvisit > 0 AND user_lastvisit < ' . gmmktime(0, 0, 0, (int) $active[1], (int) $active[2], (int) $active[0]) . ')';			}		}		// Protect the admin, do not prune if no options are given...		if (!$where_sql)		{			return;		}		// Get bot ids		$sql = 'SELECT user_id			FROM ' . BOTS_TABLE;		$result = $db->sql_query($sql);		$bot_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$bot_ids[] = $row['user_id'];		}		$db->sql_freeresult($result);		// Do not prune founder members		$sql = 'SELECT user_id, username			FROM ' . USERS_TABLE . '			WHERE user_id <> ' . ANONYMOUS . '				AND user_type <> ' . USER_FOUNDER . "			$where_sql";		$result = $db->sql_query($sql);		$where_sql = '';		$user_ids = $usernames = array();		while ($row = $db->sql_fetchrow($result))		{			// Do not prune bots and the user currently pruning.			if ($row['user_id'] != $user->data['user_id'] && !in_array($row['user_id'], $bot_ids))			{				$user_ids[] = $row['user_id'];				$usernames[$row['user_id']] = $row['username'];			}		}		$db->sql_freeresult($result);	}}?>
<?php return array(''=>'');
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$mode = request_var('mode', '');// Load the appropriate faq fileswitch ($mode){	case 'bbcode':		$l_title = $user->lang['BBCODE_GUIDE'];		$user->add_lang('bbcode', false, true);	break;	default:		$l_title = $user->lang['FAQ_EXPLAIN'];		$user->add_lang('faq', false, true);	break;}// Pull the array data from the lang pack$switch_column = $found_switch = false;$help_blocks = array();foreach ($user->help as $help_ary){	if ($help_ary[0] == '--')	{		if ($help_ary[1] == '--')		{			$switch_column = true;			$found_switch = true;			continue;		}		$template->assign_block_vars('faq_block', array(			'BLOCK_TITLE'		=> $help_ary[1],			'SWITCH_COLUMN'		=> $switch_column,		));		if ($switch_column)		{			$switch_column = false;		}		continue;	}	$template->assign_block_vars('faq_block.faq_row', array(		'FAQ_QUESTION'		=> $help_ary[0],		'FAQ_ANSWER'		=> $help_ary[1])	);}// Lets build a page ...$template->assign_vars(array(	'L_FAQ_TITLE'				=> $l_title,	'L_BACK_TO_TOP'				=> $user->lang['BACK_TO_TOP'],	'SWITCH_COLUMN_MANUALLY'	=> (!$found_switch) ? true : false,));page_header($l_title, false);$template->set_filenames(array(	'body' => 'faq_body.html'));make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"));page_footer();?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package mcp*/class mcp_ban{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpEx;		include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		// Include the admin banning interface...		include($phpbb_root_path . 'includes/acp/acp_ban.' . $phpEx);		$bansubmit		= (isset($_POST['bansubmit'])) ? true : false;		$unbansubmit	= (isset($_POST['unbansubmit'])) ? true : false;		$current_time	= time();		$user->add_lang(array('acp/ban', 'acp/users'));		$this->tpl_name = 'mcp_ban';		// Ban submitted?		if ($bansubmit)		{			// Grab the list of entries			$ban				= request_var('ban', '', ($mode === 'user') ? true : false);			if ($mode === 'user')			{				$ban = utf8_normalize_nfc($ban);			}			$ban_len			= request_var('banlength', 0);			$ban_len_other		= request_var('banlengthother', '');			$ban_exclude		= request_var('banexclude', 0);			$ban_reason			= utf8_normalize_nfc(request_var('banreason', '', true));			$ban_give_reason	= utf8_normalize_nfc(request_var('bangivereason', '', true));			if ($ban)			{				if (confirm_box(true))				{					user_ban($mode, $ban, $ban_len, $ban_len_other, $ban_exclude, $ban_reason, $ban_give_reason);					trigger_error($user->lang['BAN_UPDATE_SUCCESSFUL'] . '<br /><br /><a href="' . $this->u_action . '">&laquo; ' . $user->lang['BACK_TO_PREV'] . '</a>');				}				else				{					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(						'mode'				=> $mode,						'ban'				=> $ban,						'bansubmit'			=> true,						'banlength'			=> $ban_len,						'banlengthother'	=> $ban_len_other,						'banexclude'		=> $ban_exclude,						'banreason'			=> $ban_reason,						'bangivereason'		=> $ban_give_reason)));				}			}		}		else if ($unbansubmit)		{			$ban = request_var('unban', array(''));			if ($ban)			{				if (confirm_box(true))				{					user_unban($mode, $ban);					trigger_error($user->lang['BAN_UPDATE_SUCCESSFUL'] . '<br /><br /><a href="' . $this->u_action . '">&laquo; ' . $user->lang['BACK_TO_PREV'] . '</a>');				}				else				{					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(						'mode'			=> $mode,						'unbansubmit'	=> true,						'unban'			=> $ban)));				}			}		}		// Ban length options		$ban_end_text = array(0 => $user->lang['PERMANENT'], 30 => $user->lang['30_MINS'], 60 => $user->lang['1_HOUR'], 360 => $user->lang['6_HOURS'], 1440 => $user->lang['1_DAY'], 10080 => $user->lang['7_DAYS'], 20160 => $user->lang['2_WEEKS'], 40320 => $user->lang['1_MONTH'], -1 => $user->lang['UNTIL'] . ' -&gt; ');		$ban_end_options = '';		foreach ($ban_end_text as $length => $text)		{			$ban_end_options .= '<option value="' . $length . '">' . $text . '</option>';		}		// Define language vars		$this->page_title = $user->lang[strtoupper($mode) . '_BAN'];		$l_ban_explain = $user->lang[strtoupper($mode) . '_BAN_EXPLAIN'];		$l_ban_exclude_explain = $user->lang[strtoupper($mode) . '_BAN_EXCLUDE_EXPLAIN'];		$l_unban_title = $user->lang[strtoupper($mode) . '_UNBAN'];		$l_unban_explain = $user->lang[strtoupper($mode) . '_UNBAN_EXPLAIN'];		$l_no_ban_cell = $user->lang[strtoupper($mode) . '_NO_BANNED'];		switch ($mode)		{			case 'user':				$l_ban_cell = $user->lang['USERNAME'];			break;			case 'ip':				$l_ban_cell = $user->lang['IP_HOSTNAME'];			break;			case 'email':				$l_ban_cell = $user->lang['EMAIL_ADDRESS'];			break;		}		acp_ban::display_ban_options($mode);		$template->assign_vars(array(			'L_TITLE'				=> $this->page_title,			'L_EXPLAIN'				=> $l_ban_explain,			'L_UNBAN_TITLE'			=> $l_unban_title,			'L_UNBAN_EXPLAIN'		=> $l_unban_explain,			'L_BAN_CELL'			=> $l_ban_cell,			'L_BAN_EXCLUDE_EXPLAIN'	=> $l_ban_exclude_explain,			'L_NO_BAN_CELL'			=> $l_no_ban_cell,			'S_USERNAME_BAN'	=> ($mode == 'user') ? true : false,			'U_ACTION'			=> $this->u_action,			'U_FIND_USERNAME'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=mcp_ban&amp;field=ban'),		));		if ($mode === 'email' && !$auth->acl_get('a_user'))		{			return;		}		// As a "service" we will check if any post id is specified and populate the username of the poster id if given		$post_id = request_var('p', 0);		$user_id = request_var('u', 0);		$username = $pre_fill = false;		if ($user_id && $user_id <> ANONYMOUS)		{			$sql = 'SELECT username, user_email, user_ip				FROM ' . USERS_TABLE . '				WHERE user_id = ' . $user_id;			$result = $db->sql_query($sql);			switch ($mode)			{				case 'user':					$pre_fill = (string) $db->sql_fetchfield('username');				break;								case 'ip':					$pre_fill = (string) $db->sql_fetchfield('user_ip');				break;				case 'email':					$pre_fill = (string) $db->sql_fetchfield('user_email');				break;			}			$db->sql_freeresult($result);		}		else if ($post_id)		{			$post_info = get_post_data($post_id, 'm_ban');			if (sizeof($post_info) && !empty($post_info[$post_id]))			{				switch ($mode)				{					case 'user':						$pre_fill = $post_info[$post_id]['username'];					break;					case 'ip':						$pre_fill = $post_info[$post_id]['poster_ip'];					break;					case 'email':						$pre_fill = $post_info[$post_id]['user_email'];					break;				}			}		}		if ($pre_fill)		{			// left for legacy template compatibility			$template->assign_var('USERNAMES', $pre_fill);			$template->assign_var('BAN_QUANTIFIER', $pre_fill);		}	}}?>
<?php/**** @package phpBB* @version $Id$* @copyright (c) 2011 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}class phpbb_error_collector{	var $errors;	function phpbb_error_collector()	{		$this->errors = array();	}	function install()	{		set_error_handler(array(&$this, 'error_handler'));	}	function uninstall()	{		restore_error_handler();	}	function error_handler($errno, $msg_text, $errfile, $errline)	{		$this->errors[] = array($errno, $msg_text, $errfile, $errline);	}	function format_errors()	{		$text = '';		foreach ($this->errors as $error)		{			if (!empty($text))			{				$text .= "<br />\n";			}			list($errno, $msg_text, $errfile, $errline) = $error;			// Prevent leakage of local path to phpBB install			$errfile = phpbb_filter_root_path($errfile);			$text .= "Errno $errno: $msg_text at $errfile line $errline";		}		return $text;	}}
<?php/**** @package acm* @copyright (c) 2010 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}// Include the abstract baseif (!class_exists('acm_memory')){	require("{$phpbb_root_path}includes/acm/acm_memory.$phpEx");}/*** ACM for WinCache* @package acm*/class acm extends acm_memory{	var $extension = 'wincache';	/**	* Purge cache data	*	* @return void	*/	function purge()	{		wincache_ucache_clear();		parent::purge();	}	/**	* Fetch an item from the cache	*	* @access protected	* @param string $var Cache key	* @return mixed Cached data	*/	function _read($var)	{		$success = false;		$result = wincache_ucache_get($this->key_prefix . $var, $success);		return ($success) ? $result : false;	}	/**	* Store data in the cache	*	* @access protected	* @param string $var Cache key	* @param mixed $data Data to store	* @param int $ttl Time-to-live of cached data	* @return bool True if the operation succeeded	*/	function _write($var, $data, $ttl = 2592000)	{		return wincache_ucache_set($this->key_prefix . $var, $data, $ttl);	}	/**	* Remove an item from the cache	*	* @access protected	* @param string $var Cache key	* @return bool True if the operation succeeded	*/	function _delete($var)	{		return wincache_ucache_delete($this->key_prefix . $var);	}}
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php//// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");//// Do not change anything below this line.//$phpbb_root_path = "../";include($phpbb_root_path . 'extension.inc');include($phpbb_root_path . 'common.'.$phpEx);include($phpbb_root_path . 'includes/post.'.$phpEx);include($phpbb_root_path . 'includes/bbcode.'.$phpEx);srand ((double) microtime() * 1000000);set_time_limit(240*60);// Here's the text we stick in posts..$bigass_text = ' phpBB BBCode test suite v0.0.2auto-linkification:http://something.comwww.something.comnate@phpbb.comhttp://something.com/foo.php?this=that&theother=some%20encoded%20string is a link.[code]Simple code block with some <html> <tags>.[/code][b]bolded[/b], [i]italic[/i][email]james@totalgeek.org[/email][url=http://www.totalgeek.org]totalgeek.org[/url][url]www.totalgeek.org[/url] [list] [*] This is the first bulleted item.[*] This is the second bulleted item.[/list] [list=A] [*] This is the first bulleted item.[*] This is the second bulleted item.[/list] [quote]And a quote![/quote]';// The script expects the ID's in the tables to sequential (1,2,3,4,5), // so no holes please (1,4,5,8)...$nr_of_users  = nrof(USERS_TABLE);$nr_of_cats   = nrof(CATEGORIES_TABLE);$nr_of_forums = nrof(FORUMS_TABLE);$nr_of_posts  = nrof(POSTS_TABLE);$u = $users;$starttime = microtime();$usercreationcount = 0;while($users > 0){	$name = "testuser_" . substr(md5(uniqid(rand())), 0, 10);	if (make_user($name))	{		$usercreationcount++;		$users--;	}	if (($usercreationcount % 500) == 0)	{		echo "status: $usercreationcount <br>\n";		flush();	}	}if ($posts > 0){	filldb($posts);}$endtime = microtime();if ($submit="" || !isset($submit)){    ?>Hello, welcome to this little phpBB Benchmarking script :)<p>At the moment there are:<br><table><tr><td align="right"><?php echo $nr_of_users?></td><td>Users</td></tr><tr><td align="right"><?php echo $nr_of_forums?></td><td>Forums</td></tr><tr><td align="right"><?php echo $nr_of_posts?></td><td>Posts</td></tr></table><p>What do you want to create?<p><form method="get" action="<?php echo $PHP_SELF?>"><input type="text" name="users" size="3"> Users<br><input type="text" name="posts" size="3"> Posts/topics (optional: post size in <input type="text" name="size" size="3"> bytes)<br><input type="submit" name="submit"></form>    <?php} else {	list ($starttime_msec,$starttime_sec) = explode(" ",$starttime);	list ($endtime_msec,$endtime_sec) = explode(" ",$endtime);	$timetaken_sec = ($endtime_sec+$endtime_msec) - ($starttime_sec+$starttime_msec);	print "<B>TIME TAKEN : ".$timetaken_sec."s</B><BR>\n"; 	print "<p>\n<a href=\"$PHP_SELF\">Back to the overview page</a>\n";}function filldb($newposts){	global $nr_of_forums;	global $nr_of_users;  	$forum_topic_counts = array();  	for ($i = 1; $i <= $nr_of_forums; $i++)	{  		$forum_topic_counts[$i] = get_topic_count($i);	}  	for($i = 0; $i < $newposts; $i++)	{		$userid   = rand(2, $nr_of_users - 1);		$forum    = rand(1,$nr_of_forums);				if ((rand(0,30) < 1) || ($forum_topic_count[$forum] == 0))		{			// create a new topic 1 in 30 times (or when there are none);			$topic = make_topic($userid, "Testing topic $i", $forum);			$forum_topic_count[$forum]++;		} 		else 		{			// Otherwise create a reply(posting) somewhere.			$topic = get_smallest_topic($forum);			create_posting($userid, $topic, $forum, "reply");		}				if (($i % 1000) == 0)		{			echo "status: $i <br>";			flush();		}	 	}}function get_smallest_topic($forum_id){	global $db;		$sql = "SELECT topic_id		FROM " . TOPICS_TABLE . "		WHERE (forum_id = $forum_id)		ORDER BY topic_replies ASC LIMIT 1";	if($result = $db->sql_query($sql))	{		$row = $db->sql_fetchrow($result);		$topic_id = $row['topic_id'];		unset($result);		unset($row);		return $topic_id;	}	else	{		message_die(GENERAL_ERROR, "Couldn't get smallest topic.", "", __LINE__, __FILE__, $sql);	}	}function get_topic_count($forum_id){	global $db;		$sql = "SELECT forum_topics		FROM " . FORUMS_TABLE . "		WHERE (forum_id = $forum_id)";	if($result = $db->sql_query($sql))	{		$row = $db->sql_fetchrow($result);		$topic_count = $row['forum_topics'];		unset($result);		unset($row);		return $topic_count;	}	else	{		message_die(GENERAL_ERROR, "Couldn't get topic count.", "", __LINE__, __FILE__, $sql);	}	}function make_topic($user_id, $subject, $forum_id){	global $db;	$topic_type = POST_NORMAL;	$topic_vote = 0;	$current_time = time();		$sql  = "INSERT INTO " . TOPICS_TABLE . " (topic_title, topic_poster, topic_time, forum_id, topic_status, topic_type, topic_vote)			VALUES ('$subject', $user_id, $current_time, $forum_id, " . TOPIC_UNLOCKED . ", $topic_type, $topic_vote)";	if( $result = $db->sql_query($sql, BEGIN_TRANSACTION) )	{		$new_topic_id = $db->sql_nextid();	}	else	{		message_die(GENERAL_ERROR, "Error inserting data into topics table", "", __LINE__, __FILE__, $sql);	}		create_posting($user_id, $new_topic_id, $forum_id);		return $new_topic_id;}function create_posting($userid, $topic_id, $forum, $mode='newtopic'){	$message = generatepost();	return make_post($topic_id, $forum, $userid, "", $message, $mode);}function make_post($new_topic_id, $forum_id, $user_id, $post_username, $text, $mode='newtopic'){	global $db;	$current_time = time();	$user_ip = "ac100202";	$bbcode_on = 1;	$html_on = 1;	$smilies_on = 1;	$attach_sig = 1;	$bbcode_uid = make_bbcode_uid();		$post_subject = 'random subject';		$post_message = prepare_message($text, $html_on, $bbcode_on, $smilies_on, $bbcode_uid);			$sql = "INSERT INTO " . POSTS_TABLE . " (topic_id, forum_id, poster_id, attach_id, icon_id, post_username, post_time, poster_ip, post_approved, bbcode_uid, enable_bbcode, enable_html, enable_smilies, enable_sig, post_subject, post_text)		VALUES ($new_topic_id, $forum_id, $user_id, 0, 0, '$post_username', $current_time, '$user_ip', 1, '$bbcode_uid', $bbcode_on, $html_on, $smilies_on, $attach_sig, '$post_subject', '$post_message')";	$result = $db->sql_query($sql);		if ($result)	{		$new_post_id = $db->sql_nextid();			$sql = "UPDATE " . TOPICS_TABLE . "			SET topic_last_post_id = $new_post_id";		if($mode == "reply")		{			$sql .= ", topic_replies = topic_replies + 1 ";		}		$sql .= " WHERE topic_id = $new_topic_id";		if($db->sql_query($sql))		{			$sql = "UPDATE " . FORUMS_TABLE . "				SET forum_last_post_id = $new_post_id, forum_posts = forum_posts + 1";			if($mode == "newtopic")			{				$sql .= ", forum_topics = forum_topics + 1";			}			$sql .= " WHERE forum_id = $forum_id";				if($db->sql_query($sql))			{				$sql = "UPDATE " . USERS_TABLE . "					SET user_posts = user_posts + 1					WHERE user_id = " . $user_id;					if($db->sql_query($sql, END_TRANSACTION))				{					// SUCCESS.					return true;				}				else				{					message_die(GENERAL_ERROR, "Error updating users table", "", __LINE__, __FILE__, $sql);				}			}			else			{				message_die(GENERAL_ERROR, "Error updating forums table", "", __LINE__, __FILE__, $sql);			}		}		else		{			// Rollback			if($db->sql_layer == "mysql")			{				$sql = "DELETE FROM " . POSTS_TABLE . "					WHERE post_id = $new_post_id";				$db->sql_query($sql);			}			message_die(GENERAL_ERROR, "Error updating topics table", "", __LINE__, __FILE__, $sql);		}	}	else	{		message_die(GENERAL_ERROR, "Error inserting data into posts table", "", __LINE__, __FILE__, $sql);	}	}function generatepost($size=850){   global $bigass_text;   // Returns a string with a length between $size and $size*0.2   $size = rand(0.2*$size, $size);      $textsize = strlen($bigass_text);   $currentsize = 0;   // Add whole $text multiple times   while($currentsize < $size && $size-$currentsize <= $textsize)   {      $message .= $bigass_text;      $currentsize += $textsize;   }   // Add the remainder number of chars and return it.   $message .= substr($bigass_text, 0, $size-$currentsize);   return (addslashes($message));}         function nrof($table){	global $db;	$sql = "SELECT count(*) AS counted FROM $table";	$result = $db->sql_query($sql);	$topics = $db->sql_fetchrow($result);	return $topics[counted];}function make_user($username){	global $db, $board_config;	$password = md5("benchpass");	$email = "nobody@localhost";	$icq = "12345678";	$website = "http://www.phpbb.com";	$occupation = "phpBB tester";	$location = "phpBB world hq";	$interests = "Eating, sleeping, living, and breathing phpBB";	$signature = "$username: phpBB tester.";	$signature_bbcode_uid = "";	$avatar_filename = "";	$viewemail = 0;	$aim = 0;	$yim = 0;	$msn = 0;	$attachsig = 1;	$allowsmilies = 1;	$allowhtml = 1;	$allowbbcode = 1;	$allowviewonline = 1;	$notifyreply = 0;	$notifypm = 0;	$user_timezone = $board_config['board_timezone'];	$user_dateformat = $board_config['default_dateformat'];	$user_lang = $board_config['default_lang'];	$user_style = $board_config['default_style'];	$sql = "SELECT MAX(user_id) AS total		FROM " . USERS_TABLE;	if($result = $db->sql_query($sql))	{		$row = $db->sql_fetchrow($result);		$new_user_id = $row['total'] + 1;		unset($result);		unset($row);	}	else	{		message_die(GENERAL_ERROR, "Couldn't obtained next user_id information.", "", __LINE__, __FILE__, $sql);	}	$sql = "SELECT MAX(group_id) AS total		FROM " . GROUPS_TABLE;	if($result = $db->sql_query($sql))	{		$row = $db->sql_fetchrow($result);		$new_group_id = $row['total'] + 1;		unset($result);		unset($row);	}	else	{		message_die(GENERAL_ERROR, "Couldn't obtained next user_id information.", "", __LINE__, __FILE__, $sql);	}	$sql = "INSERT INTO " . USERS_TABLE . "	(user_id, username, user_regdate, user_password, user_email, user_icq, user_website, user_occ, user_from, user_interests, user_sig, user_sig_bbcode_uid, user_avatar, user_viewemail, user_aim, user_yim, user_msnm, user_attachsig, user_allowsmilies, user_allowhtml, user_allowbbcode, user_allow_viewonline, user_notify, user_notify_pm, user_timezone, user_dateformat, user_lang, user_style, user_level, user_allow_pm, user_active, user_actkey)		VALUES ($new_user_id, '$username', " . time() . ", '$password', '$email', '$icq', '$website', '$occupation', '$location', '$interests', '$signature', '$signature_bbcode_uid', '$avatar_filename', $viewemail, '$aim', '$yim', '$msn', $attachsig, $allowsmilies, $allowhtml, $allowbbcode, $allowviewonline, $notifyreply, $notifypm, $user_timezone, '$user_dateformat', '$user_lang', $user_style, 0, 1, ";		$sql .= "1, '')";		if($result = $db->sql_query($sql, BEGIN_TRANSACTION))	{		$sql = "INSERT INTO " . GROUPS_TABLE . " (group_id, group_name, group_description, group_single_user, group_moderator)			VALUES ($new_group_id, '', 'Personal User', 1, 0)";		if($result = $db->sql_query($sql))		{			$sql = "INSERT INTO " . USER_GROUP_TABLE . " (user_id, group_id, user_pending)				VALUES ($new_user_id, $new_group_id, 0)";			if($result = $db->sql_query($sql, END_TRANSACTION))			{								// SUCCESS.				return true;			}			else			{				message_die(GENERAL_ERROR, "Couldn't insert data into user_group table", "", __LINE__, __FILE__, $sql);			}		}		else		{			message_die(GENERAL_ERROR, "Couldn't insert data into groups table", "", __LINE__, __FILE__, $sql);		}	}	else	{		message_die(GENERAL_ERROR, "Couldn't insert data into users table", "", __LINE__, __FILE__, $sql);	}}?>
<?php/*** Adds class="postlink" to magic urls** You should make a backup from your users, posts and privmsgs table in case something goes wrong* Forum descriptions and rules need to be re-submitted manually.*/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.'.$phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$echos = 0;$replace = array(	'<!-- l --><a href="',	'<!-- m --><a href="',	'<!-- w --><a href="',);$with = array(	'<!-- l --><a class="postlink-local" href="',	'<!-- m --><a class="postlink" href="',	'<!-- w --><a class="postlink" href="',);// Adjust user signatures$sql = 'SELECT user_id, user_sig	FROM ' . USERS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$new_content = str_replace($replace, $with, $row['user_sig']);	if ($new_content != $row['user_sig'])	{		$sql = 'UPDATE ' . USERS_TABLE . " SET user_sig = '" . $db->sql_escape($new_content) . "'			WHERE user_id = " . $row['user_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Now adjust posts$sql = 'SELECT post_id, post_text	FROM ' . POSTS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$new_content = str_replace($replace, $with, $row['post_text']);	if ($row['post_text'] != $new_content)	{		$sql = 'UPDATE ' . POSTS_TABLE . " SET post_text = '" . $db->sql_escape($new_content) . "'			WHERE post_id = " . $row['post_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Now to the private messages$sql = 'SELECT msg_id, message_text	FROM ' . PRIVMSGS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$new_content = str_replace($replace, $with, $row['message_text']);	if ($row['message_text'] != $new_content)	{		$sql = 'UPDATE ' . PRIVMSGS_TABLE . " SET bbcode_bitfield = '" . $db->sql_escape($new_content) . "'			WHERE msg_id = " . $row['msg_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Done$db->sql_close();?>
<?php/**** @package diff* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Code from pear.php.net, Text_Diff-1.1.0 package* http://pear.php.net/package/Text_Diff/** Modified by phpBB Group to meet our coding standards* and being able to integrate into phpBB** A class to render Diffs in different formats.** This class renders the diff in classic diff format. It is intended that* this class be customized via inheritance, to obtain fancier outputs.** Copyright 2004-2008 The Horde Project (http://www.horde.org/)** @package diff*/class diff_renderer{	/**	* Number of leading context "lines" to preserve.	*	* This should be left at zero for this class, but subclasses may want to	* set this to other values.	*/	var $_leading_context_lines = 0;	/**	* Number of trailing context "lines" to preserve.	*	* This should be left at zero for this class, but subclasses may want to	* set this to other values.	*/	var $_trailing_context_lines = 0;	/**	* Constructor.	*/	function diff_renderer($params = array())	{		foreach ($params as $param => $value)		{			$v = '_' . $param;			if (isset($this->$v))			{				$this->$v = $value;			}		}	}	/**	* Get any renderer parameters.	*	* @return array  All parameters of this renderer object.	*/	function get_params()	{		$params = array();		foreach (get_object_vars($this) as $k => $v)		{			if ($k[0] == '_')			{				$params[substr($k, 1)] = $v;			}		}		return $params;	}	/**	* Renders a diff.	*	* @param diff &$diff A diff object.	*	* @return string  The formatted output.	*/	function render(&$diff)	{		$xi = $yi = 1;		$block = false;		$context = array();		// Create a new diff object if it is a 3-way diff		if (is_a($diff, 'diff3'))		{			$diff3 = &$diff;			$diff_1 = $diff3->get_original();			$diff_2 = $diff3->merged_output();			unset($diff3);			$diff = new diff($diff_1, $diff_2);		}		$nlead = $this->_leading_context_lines;		$ntrail = $this->_trailing_context_lines;		$output = $this->_start_diff();		$diffs = $diff->get_diff();		foreach ($diffs as $i => $edit)		{			// If these are unchanged (copied) lines, and we want to keep leading or trailing context lines, extract them from the copy block.			if (is_a($edit, 'diff_op_copy'))			{				// Do we have any diff blocks yet?				if (is_array($block))				{					// How many lines to keep as context from the copy block.					$keep = ($i == sizeof($diffs) - 1) ? $ntrail : $nlead + $ntrail;					if (sizeof($edit->orig) <= $keep)					{						// We have less lines in the block than we want for context => keep the whole block.						$block[] = $edit;					}					else					{						if ($ntrail)						{							// Create a new block with as many lines as we need for the trailing context.							$context = array_slice($edit->orig, 0, $ntrail);							$block[] = new diff_op_copy($context);						}						$output .= $this->_block($x0, $ntrail + $xi - $x0, $y0, $ntrail + $yi - $y0, $block);						$block = false;					}				}				// Keep the copy block as the context for the next block.				$context = $edit->orig;			}			else			{				// Don't we have any diff blocks yet?				if (!is_array($block))				{					// Extract context lines from the preceding copy block.					$context = array_slice($context, sizeof($context) - $nlead);					$x0 = $xi - sizeof($context);					$y0 = $yi - sizeof($context);					$block = array();					if ($context)					{						$block[] = new diff_op_copy($context);					}				}				$block[] = $edit;			}			$xi += ($edit->orig) ? sizeof($edit->orig) : 0;			$yi += ($edit->final) ? sizeof($edit->final) : 0;		}		if (is_array($block))		{			$output .= $this->_block($x0, $xi - $x0, $y0, $yi - $y0, $block);		}		return $output . $this->_end_diff();	}	function _block($xbeg, $xlen, $ybeg, $ylen, &$edits)	{		$output = $this->_start_block($this->_block_header($xbeg, $xlen, $ybeg, $ylen));		foreach ($edits as $edit)		{			switch (get_class($edit))			{				case 'diff_op_copy':					$output .= $this->_context($edit->orig);				break;				case 'diff_op_add':					$output .= $this->_added($edit->final);				break;				case 'diff_op_delete':					$output .= $this->_deleted($edit->orig);				break;				case 'diff_op_change':					$output .= $this->_changed($edit->orig, $edit->final);				break;			}		}		return $output . $this->_end_block();	}	function _start_diff()	{		return '';	}	function _end_diff()	{		return '';	}	function _block_header($xbeg, $xlen, $ybeg, $ylen)	{		if ($xlen > 1)		{			$xbeg .= ',' . ($xbeg + $xlen - 1);		}		if ($ylen > 1)		{			$ybeg .= ',' . ($ybeg + $ylen - 1);		}		// this matches the GNU Diff behaviour		if ($xlen && !$ylen)		{			$ybeg--;		}		else if (!$xlen)		{			$xbeg--;		}		return $xbeg . ($xlen ? ($ylen ? 'c' : 'd') : 'a') . $ybeg;	}	function _start_block($header)	{		return $header . "\n";	}	function _end_block()	{		return '';	}	function _lines($lines, $prefix = ' ')	{		return $prefix . implode("\n$prefix", $lines) . "\n";	}	function _context($lines)	{		return $this->_lines($lines, '  ');	}	function _added($lines)	{		return $this->_lines($lines, '> ');	}	function _deleted($lines)	{		return $this->_lines($lines, '< ');	}	function _changed($orig, $final)	{		return $this->_deleted($orig) . "---\n" . $this->_added($final);	}	/**	* Our function to get the diff	*/	function get_diff_content($diff)	{		return $this->render($diff);	}}/*** Renders a unified diff* @package diff*/class diff_renderer_unified extends diff_renderer{	var $_leading_context_lines = 4;	var $_trailing_context_lines = 4;	/**	* Our function to get the diff	*/	function get_diff_content($diff)	{		return nl2br($this->render($diff));	}	function _block_header($xbeg, $xlen, $ybeg, $ylen)	{		if ($xlen != 1)		{			$xbeg .= ',' . $xlen;		}		if ($ylen != 1)		{			$ybeg .= ',' . $ylen;		}		return '<div class="diff"><big class="info">@@ -' . $xbeg . ' +' . $ybeg . ' @@</big></div>';	}	function _context($lines)	{		return '<pre class="diff context">' . htmlspecialchars($this->_lines($lines, ' ')) . '<br /></pre>';	}	function _added($lines)	{		return '<pre class="diff added">' . htmlspecialchars($this->_lines($lines, '+')) . '<br /></pre>';	}	function _deleted($lines)	{		return '<pre class="diff removed">' . htmlspecialchars($this->_lines($lines, '-')) . '<br /></pre>';	}	function _changed($orig, $final)	{		return $this->_deleted($orig) . $this->_added($final);	}	function _start_diff()	{		$start = '<div class="file">';		return $start;	}	function _end_diff()	{		return '</div>';	}	function _end_block()	{		return '';	}}/*** "Inline" diff renderer.** This class renders diffs in the Wiki-style "inline" format.** @author  Ciprian Popovici* @package diff*/class diff_renderer_inline extends diff_renderer{	var $_leading_context_lines = 10000;	var $_trailing_context_lines = 10000;	// Prefix and suffix for inserted text	var $_ins_prefix = '<span class="ins">';	var $_ins_suffix = '</span>';	// Prefix and suffix for deleted text	var $_del_prefix = '<span class="del">';	var $_del_suffix = '</span>';	var $_block_head = '';	// What are we currently splitting on? Used to recurse to show word-level	var $_split_level = 'lines';	/**	* Our function to get the diff	*/	function get_diff_content($diff)	{		return '<pre>' . nl2br($this->render($diff)) . '<br /></pre>';	}	function _start_diff()	{		return '';	}	function _end_diff()	{		return '';	}	function _block_header($xbeg, $xlen, $ybeg, $ylen)	{		return $this->_block_head;	}	function _start_block($header)	{		return $header;	}	function _lines($lines, $prefix = ' ', $encode = true)	{		if ($encode)		{			array_walk($lines, array(&$this, '_encode'));		}		if ($this->_split_level == 'words')		{			return implode('', $lines);		}		else		{			return implode("\n", $lines) . "\n";		}	}	function _added($lines)	{		array_walk($lines, array(&$this, '_encode'));		$lines[0] = $this->_ins_prefix . $lines[0];		$lines[sizeof($lines) - 1] .= $this->_ins_suffix;		return $this->_lines($lines, ' ', false);	}	function _deleted($lines, $words = false)	{		array_walk($lines, array(&$this, '_encode'));		$lines[0] = $this->_del_prefix . $lines[0];		$lines[sizeof($lines) - 1] .= $this->_del_suffix;		return $this->_lines($lines, ' ', false);	}	function _changed($orig, $final)	{		// If we've already split on words, don't try to do so again - just display.		if ($this->_split_level == 'words')		{			$prefix = '';			while ($orig[0] !== false && $final[0] !== false && substr($orig[0], 0, 1) == ' ' && substr($final[0], 0, 1) == ' ')			{				$prefix .= substr($orig[0], 0, 1);				$orig[0] = substr($orig[0], 1);				$final[0] = substr($final[0], 1);			}			return $prefix . $this->_deleted($orig) . $this->_added($final);		}		$text1 = implode("\n", $orig);		$text2 = implode("\n", $final);		// Non-printing newline marker.		$nl = "\0";		// We want to split on word boundaries, but we need to preserve whitespace as well.		// Therefore we split on words, but include all blocks of whitespace in the wordlist.		$splitted_text_1 = $this->_split_on_words($text1, $nl);		$splitted_text_2 = $this->_split_on_words($text2, $nl);		$diff = new diff($splitted_text_1, $splitted_text_2);		unset($splitted_text_1, $splitted_text_2);		// Get the diff in inline format.		$renderer = new diff_renderer_inline(array_merge($this->get_params(), array('split_level' => 'words')));		// Run the diff and get the output.		return str_replace($nl, "\n", $renderer->render($diff)) . "\n";	}	function _split_on_words($string, $newline_escape = "\n")	{		// Ignore \0; otherwise the while loop will never finish.		$string = str_replace("\0", '', $string);		$words = array();		$length = strlen($string);		$pos = 0;		$tab_there = true;		while ($pos < $length)		{			// Check for tabs... do not include them			if ($tab_there && substr($string, $pos, 1) === "\t")			{				$words[] = "\t";				$pos++;				continue;			}			else			{				$tab_there = false;			}			// Eat a word with any preceding whitespace.			$spaces = strspn(substr($string, $pos), " \n");			$nextpos = strcspn(substr($string, $pos + $spaces), " \n");			$words[] = str_replace("\n", $newline_escape, substr($string, $pos, $spaces + $nextpos));			$pos += $spaces + $nextpos;		}		return $words;	}	function _encode(&$string)	{		$string = htmlspecialchars($string);	}}/*** "raw" diff renderer.* This class could be used to output a raw unified patch file** @package diff*/class diff_renderer_raw extends diff_renderer{	var $_leading_context_lines = 4;	var $_trailing_context_lines = 4;	/**	* Our function to get the diff	*/	function get_diff_content($diff)	{		return '<textarea style="height: 290px;" rows="15" cols="76" class="full">' . htmlspecialchars($this->render($diff)) . '</textarea>';	}	function _block_header($xbeg, $xlen, $ybeg, $ylen)	{		if ($xlen != 1)		{			$xbeg .= ',' . $xlen;		}		if ($ylen != 1)		{			$ybeg .= ',' . $ylen;		}		return '@@ -' . $xbeg . ' +' . $ybeg . ' @@';	}	function _context($lines)	{		return $this->_lines($lines, ' ');	}	function _added($lines)	{		return $this->_lines($lines, '+');	}	function _deleted($lines)	{		return $this->_lines($lines, '-');	}	function _changed($orig, $final)	{		return $this->_deleted($orig) . $this->_added($final);	}}/*** "chora (Horde)" diff renderer - similar style.* This renderer class is a modified human_readable function from the Horde Framework.** @package diff*/class diff_renderer_side_by_side extends diff_renderer{	var $_leading_context_lines = 3;	var $_trailing_context_lines = 3;	var $lines = array();	// Hold the left and right columns of lines for change blocks.	var $cols;	var $state;	var $data = false;	/**	* Our function to get the diff	*/	function get_diff_content($diff)	{		global $user;		$output = '';		$output .= '<table cellspacing="0" class="hrdiff"><caption>	<span class="unmodified">&nbsp;</span> ' . $user->lang['LINE_UNMODIFIED'] . '	<span class="added">&nbsp;</span> ' . $user->lang['LINE_ADDED'] . '	<span class="modified">&nbsp;</span> ' . $user->lang['LINE_MODIFIED'] . '	<span class="removed">&nbsp;</span> ' . $user->lang['LINE_REMOVED'] . '</caption><tbody>';		$this->render($diff);		// Is the diff empty?		if (!sizeof($this->lines))		{			$output .= '<tr><th colspan="2">' . $user->lang['NO_VISIBLE_CHANGES'] . '</th></tr>';		}		else		{			// Iterate through every header block of changes			foreach ($this->lines as $header)			{				$output .= '<tr><th>' . $user->lang['LINE'] . ' ' . $header['oldline'] . '</th><th>' . $user->lang['LINE'] . ' ' . $header['newline'] . '</th></tr>';				// Each header block consists of a number of changes (add, remove, change).				$current_context = '';				foreach ($header['contents'] as $change)				{					if (!empty($current_context) && $change['type'] != 'empty')					{						$line = $current_context;						$current_context = '';						$output .= '<tr class="unmodified"><td><pre>' . ((strlen($line)) ? $line : '&nbsp;') . '<br /></pre></td>							<td><pre>' . ((strlen($line)) ? $line : '&nbsp;') . '<br /></pre></td></tr>';					}					switch ($change['type'])					{						case 'add':							$line = '';							foreach ($change['lines'] as $_line)							{								$line .= htmlspecialchars($_line) . '<br />';							}							$output .= '<tr><td class="added_empty">&nbsp;</td><td class="added"><pre>' . ((strlen($line)) ? $line : '&nbsp;') . '<br /></pre></td></tr>';						break;						case 'remove':							$line = '';							foreach ($change['lines'] as $_line)							{								$line .= htmlspecialchars($_line) . '<br />';							}							$output .= '<tr><td class="removed"><pre>' . ((strlen($line)) ? $line : '&nbsp;') . '<br /></pre></td><td class="removed_empty">&nbsp;</td></tr>';						break;						case 'empty':							$current_context .= htmlspecialchars($change['line']) . '<br />';						break;						case 'change':							// Pop the old/new stacks one by one, until both are empty.							$oldsize = sizeof($change['old']);							$newsize = sizeof($change['new']);							$left = $right = '';							for ($row = 0, $row_max = max($oldsize, $newsize); $row < $row_max; ++$row)							{								$left .= isset($change['old'][$row]) ? htmlspecialchars($change['old'][$row]) : '';								$left .= '<br />';								$right .= isset($change['new'][$row]) ? htmlspecialchars($change['new'][$row]) : '';								$right .= '<br />';							}							$output .= '<tr>';							if (!empty($left))							{								$output .= '<td class="modified"><pre>' . $left . '<br /></pre></td>';							}							else if ($row < $oldsize)							{								$output .= '<td class="modified">&nbsp;</td>';							}							else							{								$output .= '<td class="unmodified">&nbsp;</td>';							}							if (!empty($right))							{								$output .= '<td class="modified"><pre>' . $right . '<br /></pre></td>';							}							else if ($row < $newsize)							{								$output .= '<td class="modified">&nbsp;</td>';							}							else							{								$output .= '<td class="unmodified">&nbsp;</td>';							}							$output .= '</tr>';						break;					}				}				if (!empty($current_context))				{					$line = $current_context;					$current_context = '';					$output .= '<tr class="unmodified"><td><pre>' . ((strlen($line)) ? $line : '&nbsp;') . '<br /></pre></td>';					$output .= '<td><pre>' . ((strlen($line)) ? $line : '&nbsp;') . '<br /></pre></td></tr>';				}			}		}		$output .= '</tbody></table>';		return $output;	}	function _start_diff()	{		$this->lines = array();		$this->data = false;		$this->cols = array(array(), array());		$this->state = 'empty';		return '';	}	function _end_diff()	{		// Just flush any remaining entries in the columns stack.		switch ($this->state)		{			case 'add':				$this->data['contents'][] = array('type' => 'add', 'lines' => $this->cols[0]);			break;			case 'remove':				// We have some removal lines pending in our stack, so flush them.				$this->data['contents'][] = array('type' => 'remove', 'lines' => $this->cols[0]);			break;			case 'change':				// We have both remove and addition lines, so this is a change block.				$this->data['contents'][] = array('type' => 'change', 'old' => $this->cols[0], 'new' => $this->cols[1]);			break;		}		if ($this->data !== false)		{			$this->lines[] = $this->data;		}		return '';	}	function _block_header($xbeg, $xlen, $ybeg, $ylen)	{		// Push any previous header information to the return stack.		if ($this->data !== false)		{			$this->lines[] = $this->data;		}		$this->data = array('type' => 'header', 'oldline' => $xbeg, 'newline' => $ybeg, 'contents' => array());		$this->state = 'dump';	}	function _added($lines)	{		array_walk($lines, array(&$this, '_perform_add'));	}	function _perform_add($line)	{		if ($this->state == 'empty')		{			return '';		}		// This is just an addition line.		if ($this->state == 'dump' || $this->state == 'add')		{			// Start adding to the addition stack.			$this->cols[0][] = $line;			$this->state = 'add';		}		else		{			// This is inside a change block, so start accumulating lines.			$this->state = 'change';			$this->cols[1][] = $line;		}	}	function _deleted($lines)	{		array_walk($lines, array(&$this, '_perform_delete'));	}	function _perform_delete($line)	{		// This is a removal line.		$this->state = 'remove';		$this->cols[0][] = $line;	}	function _context($lines)	{		array_walk($lines, array(&$this, '_perform_context'));	}	function _perform_context($line)	{		// An empty block with no action.		switch ($this->state)		{			case 'add':				$this->data['contents'][] = array('type' => 'add', 'lines' => $this->cols[0]);			break;			case 'remove':				// We have some removal lines pending in our stack, so flush them.				$this->data['contents'][] = array('type' => 'remove', 'lines' => $this->cols[0]);			break;			case 'change':				// We have both remove and addition lines, so this is a change block.				$this->data['contents'][] = array('type' => 'change', 'old' => $this->cols[0], 'new' => $this->cols[1]);			break;		}		$this->cols = array(array(), array());		$this->data['contents'][] = array('type' => 'empty', 'line' => $line);		$this->state = 'dump';	}	function _changed($orig, $final)	{		return $this->_deleted($orig) . $this->_added($final);	}}?>
<?php/**** @package acm* @version $Id$* @copyright (c) 2005, 2009 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}// Include the abstract baseif (!class_exists('acm_memory')){	require("{$phpbb_root_path}includes/acm/acm_memory.$phpEx");}/*** ACM for APC* @package acm*/class acm extends acm_memory{	var $extension = 'apc';	/**	* Purge cache data	*	* @return void	*/	function purge()	{		apc_clear_cache('user');		parent::purge();	}	/**	* Fetch an item from the cache	*	* @access protected	* @param string $var Cache key	* @return mixed Cached data	*/	function _read($var)	{		return apc_fetch($this->key_prefix . $var);	}	/**	* Store data in the cache	*	* @access protected	* @param string $var Cache key	* @param mixed $data Data to store	* @param int $ttl Time-to-live of cached data	* @return bool True if the operation succeeded	*/	function _write($var, $data, $ttl = 2592000)	{		return apc_store($this->key_prefix . $var, $data, $ttl);	}	/**	* Remove an item from the cache	*	* @access protected	* @param string $var Cache key	* @return bool True if the operation succeeded	*/	function _delete($var)	{		return apc_delete($this->key_prefix . $var);	}}?>
<?php/**** acp_database [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// Database Backup/Restore$lang = array_merge($lang, array(	'ACP_BACKUP_EXPLAIN'	=> 'Here you can backup all your phpBB related data. You may store the resulting archive in your <samp>store/</samp> folder or download it directly. Depending on your server configuration you may be able to compress the file in a number of formats.',	'ACP_RESTORE_EXPLAIN'	=> 'This will perform a full restore of all phpBB tables from a saved file. If your server supports it you may use a gzip or bzip2 compressed text file and it will automatically be decompressed. <strong>WARNING</strong> This will overwrite any existing data. The restore may take a long time to process please do not move from this page till it is complete. Backups are stored in the <samp>store/</samp> folder and are assumed to be generated by phpBBs backup functionality. Restoring backups that were not created by the built in system may or may not work.',	'BACKUP_DELETE'		=> 'The backup file has been deleted successfully.',	'BACKUP_INVALID'	=> 'The selected file to backup is invalid.',	'BACKUP_OPTIONS'	=> 'Backup options',	'BACKUP_SUCCESS'	=> 'The backup file has been created successfully.',	'BACKUP_TYPE'		=> 'Backup type',	'DATABASE'			=> 'Database utilities',	'DATA_ONLY'			=> 'Data only',	'DELETE_BACKUP'		=> 'Delete backup',	'DELETE_SELECTED_BACKUP'	=> 'Are you sure you want to delete the selected backup?',	'DESELECT_ALL'		=> 'Deselect all',	'DOWNLOAD_BACKUP'	=> 'Download backup',	'FILE_TYPE'			=> 'File type',	'FILE_WRITE_FAIL'	=> 'Unable to write file to storage folder.',	'FULL_BACKUP'		=> 'Full',	'RESTORE_FAILURE'		=> 'The backup file may be corrupt.',	'RESTORE_OPTIONS'		=> 'Restore options',	'RESTORE_SELECTED_BACKUP'	=> 'Are you sure you want to restore the selected backup?',	'RESTORE_SUCCESS'		=> 'The database has been successfully restored.<br /><br />Your board should be back to the state it was when the backup was made.',	'SELECT_ALL'			=> 'Select all',	'SELECT_FILE'			=> 'Select a file',	'START_BACKUP'			=> 'Start backup',	'START_RESTORE'			=> 'Start restore',	'STORE_AND_DOWNLOAD'	=> 'Store and download',	'STORE_LOCAL'			=> 'Store file locally',	'STRUCTURE_ONLY'		=> 'Structure only',	'TABLE_SELECT'		=> 'Table select',	'TABLE_SELECT_ERROR'=> 'You must select at least one table.',));?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class ucp_prefs_info{	function module()	{		return array(			'filename'	=> 'ucp_prefs',			'title'		=> 'UCP_PREFS',			'version'	=> '1.0.0',			'modes'		=> array(				'personal'	=> array('title' => 'UCP_PREFS_PERSONAL', 'auth' => '', 'cat' => array('UCP_PREFS')),				'post'		=> array('title' => 'UCP_PREFS_POST', 'auth' => '', 'cat' => array('UCP_PREFS')),				'view'		=> array('title' => 'UCP_PREFS_VIEW', 'auth' => '', 'cat' => array('UCP_PREFS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}if (!class_exists('bbcode')){	include($phpbb_root_path . 'includes/bbcode.' . $phpEx);}/*** BBCODE FIRSTPASS* BBCODE first pass class (functions for parsing messages for db storage)* @package phpBB3*/class bbcode_firstpass extends bbcode{	var $message = '';	var $warn_msg = array();	var $parsed_items = array();	/**	* Parse BBCode	*/	function parse_bbcode()	{		if (!$this->bbcodes)		{			$this->bbcode_init();		}		global $user;		$this->bbcode_bitfield = '';		$bitfield = new bitfield();		foreach ($this->bbcodes as $bbcode_name => $bbcode_data)		{			if (isset($bbcode_data['disabled']) && $bbcode_data['disabled'])			{				foreach ($bbcode_data['regexp'] as $regexp => $replacement)				{					if (preg_match($regexp, $this->message))					{						$this->warn_msg[] = sprintf($user->lang['UNAUTHORISED_BBCODE'] , '[' . $bbcode_name . ']');						continue;					}				}			}			else			{				foreach ($bbcode_data['regexp'] as $regexp => $replacement)				{					// The pattern gets compiled and cached by the PCRE extension,					// it should not demand recompilation					if (preg_match($regexp, $this->message))					{						$this->message = preg_replace($regexp, $replacement, $this->message);						$bitfield->set($bbcode_data['bbcode_id']);					}				}			}		}		$this->bbcode_bitfield = $bitfield->get_base64();	}	/**	* Prepare some bbcodes for better parsing	*/	function prepare_bbcodes()	{		// Ok, seems like users instead want the no-parsing of urls, smilies, etc. after and before and within quote tags being tagged as "not a bug".		// Fine by me ;) Will ease our live... but do not come back and cry at us, we won't hear you.		/* Add newline at the end and in front of each quote block to prevent parsing errors (urls, smilies, etc.)		if (strpos($this->message, '[quote') !== false && strpos($this->message, '[/quote]') !== false)		{			$this->message = str_replace("\r\n", "\n", $this->message);			// We strip newlines and spaces after and before quotes in quotes (trimming) and then add exactly one newline			$this->message = preg_replace('#\[quote(=&quot;.*?&quot;)?\]\s*(.*?)\s*\[/quote\]#siu', '[quote\1]' . "\n" . '\2' ."\n[/quote]", $this->message);		}		*/		// Add other checks which needs to be placed before actually parsing anything (be it bbcodes, smilies, urls...)	}	/**	* Init bbcode data for later parsing	*/	function bbcode_init($allow_custom_bbcode = true)	{		static $rowset;		// This array holds all bbcode data. BBCodes will be processed in this		// order, so it is important to keep [code] in first position and		// [quote] in second position.		// To parse multiline URL we enable dotall option setting only for URL text		// but not for link itself, thus [url][/url] is not affected.		$this->bbcodes = array(			'code'			=> array('bbcode_id' => 8,	'regexp' => array('#\[code(?:=([a-z]+))?\](.+\[/code\])#uise' => "\$this->bbcode_code('\$1', '\$2')")),			'quote'			=> array('bbcode_id' => 0,	'regexp' => array('#\[quote(?:=&quot;(.*?)&quot;)?\](.+)\[/quote\]#uise' => "\$this->bbcode_quote('\$0')")),			'attachment'	=> array('bbcode_id' => 12,	'regexp' => array('#\[attachment=([0-9]+)\](.*?)\[/attachment\]#uise' => "\$this->bbcode_attachment('\$1', '\$2')")),			'b'				=> array('bbcode_id' => 1,	'regexp' => array('#\[b\](.*?)\[/b\]#uise' => "\$this->bbcode_strong('\$1')")),			'i'				=> array('bbcode_id' => 2,	'regexp' => array('#\[i\](.*?)\[/i\]#uise' => "\$this->bbcode_italic('\$1')")),			'url'			=> array('bbcode_id' => 3,	'regexp' => array('#\[url(=(.*))?\](?(1)((?s).*(?-s))|(.*))\[/url\]#uiUe' => "\$this->validate_url('\$2', ('\$3') ? '\$3' : '\$4')")),			'img'			=> array('bbcode_id' => 4,	'regexp' => array('#\[img\](.*)\[/img\]#uiUe' => "\$this->bbcode_img('\$1')")),			'size'			=> array('bbcode_id' => 5,	'regexp' => array('#\[size=([\-\+]?\d+)\](.*?)\[/size\]#uise' => "\$this->bbcode_size('\$1', '\$2')")),			'color'			=> array('bbcode_id' => 6,	'regexp' => array('!\[color=(#[0-9a-f]{3}|#[0-9a-f]{6}|[a-z\-]+)\](.*?)\[/color\]!uise' => "\$this->bbcode_color('\$1', '\$2')")),			'u'				=> array('bbcode_id' => 7,	'regexp' => array('#\[u\](.*?)\[/u\]#uise' => "\$this->bbcode_underline('\$1')")),			'list'			=> array('bbcode_id' => 9,	'regexp' => array('#\[list(?:=(?:[a-z0-9]|disc|circle|square))?].*\[/list]#uise' => "\$this->bbcode_parse_list('\$0')")),			'email'			=> array('bbcode_id' => 10,	'regexp' => array('#\[email=?(.*?)?\](.*?)\[/email\]#uise' => "\$this->validate_email('\$1', '\$2')")),			'flash'			=> array('bbcode_id' => 11,	'regexp' => array('#\[flash=([0-9]+),([0-9]+)\](.*?)\[/flash\]#uie' => "\$this->bbcode_flash('\$1', '\$2', '\$3')"))		);		// Zero the parsed items array		$this->parsed_items = array();		foreach ($this->bbcodes as $tag => $bbcode_data)		{			$this->parsed_items[$tag] = 0;		}		if (!$allow_custom_bbcode)		{			return;		}		if (!is_array($rowset))		{			global $db;			$rowset = array();			$sql = 'SELECT *				FROM ' . BBCODES_TABLE;			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$rowset[] = $row;			}			$db->sql_freeresult($result);		}		foreach ($rowset as $row)		{			$this->bbcodes[$row['bbcode_tag']] = array(				'bbcode_id'	=> (int) $row['bbcode_id'],				'regexp'	=> array($row['first_pass_match'] => str_replace('$uid', $this->bbcode_uid, $row['first_pass_replace']))			);		}	}	/**	* Making some pre-checks for bbcodes as well as increasing the number of parsed items	*/	function check_bbcode($bbcode, &$in)	{		// when using the /e modifier, preg_replace slashes double-quotes but does not		// seem to slash anything else		$in = str_replace("\r\n", "\n", str_replace('\"', '"', $in));		// Trimming here to make sure no empty bbcodes are parsed accidently		if (trim($in) == '')		{			return false;		}		$this->parsed_items[$bbcode]++;		return true;	}	/**	* Transform some characters in valid bbcodes	*/	function bbcode_specialchars($text)	{		$str_from = array('<', '>', '[', ']', '.', ':');		$str_to = array('&lt;', '&gt;', '&#91;', '&#93;', '&#46;', '&#58;');		return str_replace($str_from, $str_to, $text);	}	/**	* Parse size tag	*/	function bbcode_size($stx, $in)	{		global $user, $config;		if (!$this->check_bbcode('size', $in))		{			return $in;		}		if ($config['max_' . $this->mode . '_font_size'] && $config['max_' . $this->mode . '_font_size'] < $stx)		{			$this->warn_msg[] = sprintf($user->lang['MAX_FONT_SIZE_EXCEEDED'], $config['max_' . $this->mode . '_font_size']);			return '[size=' . $stx . ']' . $in . '[/size]';		}		// Do not allow size=0		if ($stx <= 0)		{			return '[size=' . $stx . ']' . $in . '[/size]';		}		return '[size=' . $stx . ':' . $this->bbcode_uid . ']' . $in . '[/size:' . $this->bbcode_uid . ']';	}	/**	* Parse color tag	*/	function bbcode_color($stx, $in)	{		if (!$this->check_bbcode('color', $in))		{			return $in;		}		return '[color=' . $stx . ':' . $this->bbcode_uid . ']' . $in . '[/color:' . $this->bbcode_uid . ']';	}	/**	* Parse u tag	*/	function bbcode_underline($in)	{		if (!$this->check_bbcode('u', $in))		{			return $in;		}		return '[u:' . $this->bbcode_uid . ']' . $in . '[/u:' . $this->bbcode_uid . ']';	}	/**	* Parse b tag	*/	function bbcode_strong($in)	{		if (!$this->check_bbcode('b', $in))		{			return $in;		}		return '[b:' . $this->bbcode_uid . ']' . $in . '[/b:' . $this->bbcode_uid . ']';	}	/**	* Parse i tag	*/	function bbcode_italic($in)	{		if (!$this->check_bbcode('i', $in))		{			return $in;		}		return '[i:' . $this->bbcode_uid . ']' . $in . '[/i:' . $this->bbcode_uid . ']';	}	/**	* Parse img tag	*/	function bbcode_img($in)	{		global $user, $config;		if (!$this->check_bbcode('img', $in))		{			return $in;		}		$in = trim($in);		$error = false;		$in = str_replace(' ', '%20', $in);		// Checking urls		if (!preg_match('#^' . get_preg_expression('url') . '$#i', $in) && !preg_match('#^' . get_preg_expression('www_url') . '$#i', $in))		{			return '[img]' . $in . '[/img]';		}		// Try to cope with a common user error... not specifying a protocol but only a subdomain		if (!preg_match('#^[a-z0-9]+://#i', $in))		{			$in = 'http://' . $in;		}		if ($config['max_' . $this->mode . '_img_height'] || $config['max_' . $this->mode . '_img_width'])		{			$stats = @getimagesize(htmlspecialchars_decode($in));			if ($stats === false)			{				$error = true;				$this->warn_msg[] = $user->lang['UNABLE_GET_IMAGE_SIZE'];			}			else			{				if ($config['max_' . $this->mode . '_img_height'] && $config['max_' . $this->mode . '_img_height'] < $stats[1])				{					$error = true;					$this->warn_msg[] = sprintf($user->lang['MAX_IMG_HEIGHT_EXCEEDED'], $config['max_' . $this->mode . '_img_height']);				}				if ($config['max_' . $this->mode . '_img_width'] && $config['max_' . $this->mode . '_img_width'] < $stats[0])				{					$error = true;					$this->warn_msg[] = sprintf($user->lang['MAX_IMG_WIDTH_EXCEEDED'], $config['max_' . $this->mode . '_img_width']);				}			}		}		if ($error || $this->path_in_domain($in))		{			return '[img]' . $in . '[/img]';		}		return '[img:' . $this->bbcode_uid . ']' . $this->bbcode_specialchars($in) . '[/img:' . $this->bbcode_uid . ']';	}	/**	* Parse flash tag	*/	function bbcode_flash($width, $height, $in)	{		global $user, $config;		if (!$this->check_bbcode('flash', $in))		{			return $in;		}		$in = trim($in);		$error = false;		// Do not allow 0-sizes generally being entered		if ($width <= 0 || $height <= 0)		{			return '[flash=' . $width . ',' . $height . ']' . $in . '[/flash]';		}		$in = str_replace(' ', '%20', $in);		// Make sure $in is a URL.		if (!preg_match('#^' . get_preg_expression('url') . '$#i', $in) &&			!preg_match('#^' . get_preg_expression('www_url') . '$#i', $in))		{			return '[flash=' . $width . ',' . $height . ']' . $in . '[/flash]';		}		// Apply the same size checks on flash files as on images		if ($config['max_' . $this->mode . '_img_height'] || $config['max_' . $this->mode . '_img_width'])		{			if ($config['max_' . $this->mode . '_img_height'] && $config['max_' . $this->mode . '_img_height'] < $height)			{				$error = true;				$this->warn_msg[] = sprintf($user->lang['MAX_FLASH_HEIGHT_EXCEEDED'], $config['max_' . $this->mode . '_img_height']);			}			if ($config['max_' . $this->mode . '_img_width'] && $config['max_' . $this->mode . '_img_width'] < $width)			{				$error = true;				$this->warn_msg[] = sprintf($user->lang['MAX_FLASH_WIDTH_EXCEEDED'], $config['max_' . $this->mode . '_img_width']);			}		}		if ($error || $this->path_in_domain($in))		{			return '[flash=' . $width . ',' . $height . ']' . $in . '[/flash]';		}		return '[flash=' . $width . ',' . $height . ':' . $this->bbcode_uid . ']' . $this->bbcode_specialchars($in) . '[/flash:' . $this->bbcode_uid . ']';	}	/**	* Parse inline attachments [ia]	*/	function bbcode_attachment($stx, $in)	{		if (!$this->check_bbcode('attachment', $in))		{			return $in;		}		return '[attachment=' . $stx . ':' . $this->bbcode_uid . ']<!-- ia' . $stx . ' -->' . trim($in) . '<!-- ia' . $stx . ' -->[/attachment:' . $this->bbcode_uid . ']';	}	/**	* Parse code text from code tag	* @access private	*/	function bbcode_parse_code($stx, &$code)	{		switch (strtolower($stx))		{			case 'php':				$remove_tags = false;				$str_from = array('&lt;', '&gt;', '&#91;', '&#93;', '&#46;', '&#58;', '&#058;');				$str_to = array('<', '>', '[', ']', '.', ':', ':');				$code = str_replace($str_from, $str_to, $code);				if (!preg_match('/\<\?.*?\?\>/is', $code))				{					$remove_tags = true;					$code = "<?php $code ?>";				}				$conf = array('highlight.bg', 'highlight.comment', 'highlight.default', 'highlight.html', 'highlight.keyword', 'highlight.string');				foreach ($conf as $ini_var)				{					@ini_set($ini_var, str_replace('highlight.', 'syntax', $ini_var));				}				// Because highlight_string is specialcharing the text (but we already did this before), we have to reverse this in order to get correct results				$code = htmlspecialchars_decode($code);				$code = highlight_string($code, true);				$str_from = array('<span style="color: ', '<font color="syntax', '</font>', '<code>', '</code>','[', ']', '.', ':');				$str_to = array('<span class="', '<span class="syntax', '</span>', '', '', '&#91;', '&#93;', '&#46;', '&#58;');				if ($remove_tags)				{					$str_from[] = '<span class="syntaxdefault">&lt;?php </span>';					$str_to[] = '';					$str_from[] = '<span class="syntaxdefault">&lt;?php&nbsp;';					$str_to[] = '<span class="syntaxdefault">';				}				$code = str_replace($str_from, $str_to, $code);				$code = preg_replace('#^(<span class="[a-z_]+">)\n?(.*?)\n?(</span>)$#is', '$1$2$3', $code);				if ($remove_tags)				{					$code = preg_replace('#(<span class="[a-z]+">)?\?&gt;(</span>)#', '$1&nbsp;$2', $code);				}				$code = preg_replace('#^<span class="[a-z]+"><span class="([a-z]+)">(.*)</span></span>#s', '<span class="$1">$2</span>', $code);				$code = preg_replace('#(?:\s++|&nbsp;)*+</span>$#u', '</span>', $code);				// remove newline at the end				if (!empty($code) && substr($code, -1) == "\n")				{					$code = substr($code, 0, -1);				}				return "[code=$stx:" . $this->bbcode_uid . ']' . $code . '[/code:' . $this->bbcode_uid . ']';			break;			default:				return '[code:' . $this->bbcode_uid . ']' . $this->bbcode_specialchars($code) . '[/code:' . $this->bbcode_uid . ']';			break;		}	}	/**	* Parse code tag	* Expects the argument to start right after the opening [code] tag and to end with [/code]	*/	function bbcode_code($stx, $in)	{		if (!$this->check_bbcode('code', $in))		{			return $in;		}		// We remove the hardcoded elements from the code block here because it is not used in code blocks		// Having it here saves us one preg_replace per message containing [code] blocks		// Additionally, magic url parsing should go after parsing bbcodes, but for safety those are stripped out too...		$htm_match = get_preg_expression('bbcode_htm');		unset($htm_match[4], $htm_match[5]);		$htm_replace = array('\1', '\1', '\2', '\1');		$out = $code_block = '';		$open = 1;		while ($in)		{			// Determine position and tag length of next code block			preg_match('#(.*?)(\[code(?:=([a-z]+))?\])(.+)#is', $in, $buffer);			$pos = (isset($buffer[1])) ? strlen($buffer[1]) : false;			$tag_length = (isset($buffer[2])) ? strlen($buffer[2]) : false;			// Determine position of ending code tag			$pos2 = stripos($in, '[/code]');			// Which is the next block, ending code or code block			if ($pos !== false && $pos < $pos2)			{				// Open new block				if (!$open)				{					$out .= substr($in, 0, $pos);					$in = substr($in, $pos);					$stx = (isset($buffer[3])) ? $buffer[3] : '';					$code_block = '';				}				else				{					// Already opened block, just append to the current block					$code_block .= substr($in, 0, $pos) . ((isset($buffer[2])) ? $buffer[2] : '');					$in = substr($in, $pos);				}				$in = substr($in, $tag_length);				$open++;			}			else			{				// Close the block				if ($open == 1)				{					$code_block .= substr($in, 0, $pos2);					$code_block = preg_replace($htm_match, $htm_replace, $code_block);					// Parse this code block					$out .= $this->bbcode_parse_code($stx, $code_block);					$code_block = '';					$open--;				}				else if ($open)				{					// Close one open tag... add to the current code block					$code_block .= substr($in, 0, $pos2 + 7);					$open--;				}				else				{					// end code without opening code... will be always outside code block					$out .= substr($in, 0, $pos2 + 7);				}				$in = substr($in, $pos2 + 7);			}		}		// if now $code_block has contents we need to parse the remaining code while removing the last closing tag to match up.		if ($code_block)		{			$code_block = substr($code_block, 0, -7);			$code_block = preg_replace($htm_match, $htm_replace, $code_block);			$out .= $this->bbcode_parse_code($stx, $code_block);		}		return $out;	}	/**	* Parse list bbcode	* Expects the argument to start with a tag	*/	function bbcode_parse_list($in)	{		if (!$this->check_bbcode('list', $in))		{			return $in;		}		// $tok holds characters to stop at. Since the string starts with a '[' we'll get everything up to the first ']' which should be the opening [list] tag		$tok = ']';		$out = '[';		// First character is [		$in = substr($in, 1);		$list_end_tags = $item_end_tags = array();		do		{			$pos = strlen($in);			for ($i = 0, $tok_len = strlen($tok); $i < $tok_len; ++$i)			{				$tmp_pos = strpos($in, $tok[$i]);				if ($tmp_pos !== false && $tmp_pos < $pos)				{					$pos = $tmp_pos;				}			}			$buffer = substr($in, 0, $pos);			$tok = $in[$pos];			$in = substr($in, $pos + 1);			if ($tok == ']')			{				// if $tok is ']' the buffer holds a tag				if (strtolower($buffer) == '/list' && sizeof($list_end_tags))				{					// valid [/list] tag, check nesting so that we don't hit false positives					if (sizeof($item_end_tags) && sizeof($item_end_tags) >= sizeof($list_end_tags))					{						// current li tag has not been closed						$out = preg_replace('/\n?\[$/', '[', $out) . array_pop($item_end_tags) . '][';					}					$out .= array_pop($list_end_tags) . ']';					$tok = '[';				}				else if (preg_match('#^list(=[0-9a-z]+)?$#i', $buffer, $m))				{					// sub-list, add a closing tag					if (empty($m[1]) || preg_match('/^=(?:disc|square|circle)$/i', $m[1]))					{						array_push($list_end_tags, '/list:u:' . $this->bbcode_uid);					}					else					{						array_push($list_end_tags, '/list:o:' . $this->bbcode_uid);					}					$out .= 'list' . substr($buffer, 4) . ':' . $this->bbcode_uid . ']';					$tok = '[';				}				else				{					if (($buffer == '*' || substr($buffer, -2) == '[*') && sizeof($list_end_tags))					{						// the buffer holds a bullet tag and we have a [list] tag open						if (sizeof($item_end_tags) >= sizeof($list_end_tags))						{							if (substr($buffer, -2) == '[*')							{								$out .= substr($buffer, 0, -2) . '[';							}							// current li tag has not been closed							if (preg_match('/\n\[$/', $out, $m))							{								$out = preg_replace('/\n\[$/', '[', $out);								$buffer = array_pop($item_end_tags) . "]\n[*:" . $this->bbcode_uid;							}							else							{								$buffer = array_pop($item_end_tags) . '][*:' . $this->bbcode_uid;							}						}						else						{							$buffer = '*:' . $this->bbcode_uid;						}						$item_end_tags[] = '/*:m:' . $this->bbcode_uid;					}					else if ($buffer == '/*')					{						array_pop($item_end_tags);						$buffer = '/*:' . $this->bbcode_uid;					}					$out .= $buffer . $tok;					$tok = '[]';				}			}			else			{				// Not within a tag, just add buffer to the return string				$out .= $buffer . $tok;				$tok = ($tok == '[') ? ']' : '[]';			}		}		while ($in);		// do we have some tags open? close them now		if (sizeof($item_end_tags))		{			$out .= '[' . implode('][', $item_end_tags) . ']';		}		if (sizeof($list_end_tags))		{			$out .= '[' . implode('][', $list_end_tags) . ']';		}		return $out;	}	/**	* Parse quote bbcode	* Expects the argument to start with a tag	*/	function bbcode_quote($in)	{		global $config, $user;		/**		* If you change this code, make sure the cases described within the following reports are still working:		* #3572 - [quote="[test]test"]test [ test[/quote] - (correct: parsed)		* #14667 - [quote]test[/quote] test ] and [ test [quote]test[/quote] (correct: parsed)		* #14770 - [quote="["]test[/quote] (correct: parsed)		* [quote="[i]test[/i]"]test[/quote] (correct: parsed)		* [quote="[quote]test[/quote]"]test[/quote] (correct: parsed - Username displayed as [quote]test[/quote])		* #20735 - [quote]test[/[/b]quote] test [/quote][/quote] test - (correct: quoted: "test[/[/b]quote] test" / non-quoted: "[/quote] test" - also failed if layout distorted)		* #40565 - [quote="a"]a[/quote][quote="a]a[/quote] (correct: first quote tag parsed, second quote tag unparsed)		*/		$in = str_replace("\r\n", "\n", str_replace('\"', '"', trim($in)));		if (!$in)		{			return '';		}		// To let the parser not catch tokens within quote_username quotes we encode them before we start this...		$in = preg_replace('#quote=&quot;(.*?)&quot;\]#ie', "'quote=&quot;' . str_replace(array('[', ']', '\\\"'), array('&#91;', '&#93;', '\"'), '\$1') . '&quot;]'", $in);		$tok = ']';		$out = '[';		$in = substr($in, 1);		$close_tags = $error_ary = array();		$buffer = '';		do		{			$pos = strlen($in);			for ($i = 0, $tok_len = strlen($tok); $i < $tok_len; ++$i)			{				$tmp_pos = strpos($in, $tok[$i]);				if ($tmp_pos !== false && $tmp_pos < $pos)				{					$pos = $tmp_pos;				}			}			$buffer .= substr($in, 0, $pos);			$tok = $in[$pos];			$in = substr($in, $pos + 1);			if ($tok == ']')			{				if (strtolower($buffer) == '/quote' && sizeof($close_tags) && substr($out, -1, 1) == '[')				{					// we have found a closing tag					$out .= array_pop($close_tags) . ']';					$tok = '[';					$buffer = '';					/* Add space at the end of the closing tag if not happened before to allow following urls/smilies to be parsed correctly					* Do not try to think for the user. :/ Do not parse urls/smilies if there is no space - is the same as with other bbcodes too.					* Also, we won't have any spaces within $in anyway, only adding up spaces -> #10982					if (!$in || $in[0] !== ' ')					{						$out .= ' ';					}*/				}				else if (preg_match('#^quote(?:=&quot;(.*?)&quot;)?$#is', $buffer, $m) && substr($out, -1, 1) == '[')				{					$this->parsed_items['quote']++;					// the buffer holds a valid opening tag					if ($config['max_quote_depth'] && sizeof($close_tags) >= $config['max_quote_depth'])					{						// there are too many nested quotes						$error_ary['quote_depth'] = sprintf($user->lang['QUOTE_DEPTH_EXCEEDED'], $config['max_quote_depth']);						$out .= $buffer . $tok;						$tok = '[]';						$buffer = '';						continue;					}					array_push($close_tags, '/quote:' . $this->bbcode_uid);					if (isset($m[1]) && $m[1])					{						$username = str_replace(array('&#91;', '&#93;'), array('[', ']'), $m[1]);						$username = preg_replace('#\[(?!b|i|u|color|url|email|/b|/i|/u|/color|/url|/email)#iU', '&#91;$1', $username);						$end_tags = array();						$error = false;						preg_match_all('#\[((?:/)?(?:[a-z]+))#i', $username, $tags);						foreach ($tags[1] as $tag)						{							if ($tag[0] != '/')							{								$end_tags[] = '/' . $tag;							}							else							{								$end_tag = array_pop($end_tags);								$error = ($end_tag != $tag) ? true : false;							}						}						if ($error)						{							$username = $m[1];						}						$out .= 'quote=&quot;' . $username . '&quot;:' . $this->bbcode_uid . ']';					}					else					{						$out .= 'quote:' . $this->bbcode_uid . ']';					}					$tok = '[';					$buffer = '';				}				else if (preg_match('#^quote=&quot;(.*?)#is', $buffer, $m))				{					// the buffer holds an invalid opening tag					$buffer .= ']';				}				else				{					$out .= $buffer . $tok;					$tok = '[]';					$buffer = '';				}			}			else			{/***				Old quote code working fine, but having errors listed in bug #3572**				$out .= $buffer . $tok;*				$tok = ($tok == '[') ? ']' : '[]';*				$buffer = '';*/				$out .= $buffer . $tok;				if ($tok == '[')				{					// Search the text for the next tok... if an ending quote comes first, then change tok to []					$pos1 = stripos($in, '[/quote');					// If the token ] comes first, we change it to ]					$pos2 = strpos($in, ']');					// If the token [ comes first, we change it to [					$pos3 = strpos($in, '[');					if ($pos1 !== false && ($pos2 === false || $pos1 < $pos2) && ($pos3 === false || $pos1 < $pos3))					{						$tok = '[]';					}					else if ($pos3 !== false && ($pos2 === false || $pos3 < $pos2))					{						$tok = '[';					}					else					{						$tok = ']';					}				}				else				{					$tok = '[]';				}				$buffer = '';			}		}		while ($in);		$out .= $buffer;		if (sizeof($close_tags))		{			$out .= '[' . implode('][', $close_tags) . ']';		}		foreach ($error_ary as $error_msg)		{			$this->warn_msg[] = $error_msg;		}		return $out;	}	/**	* Validate email	*/	function validate_email($var1, $var2)	{		$var1 = str_replace("\r\n", "\n", str_replace('\"', '"', trim($var1)));		$var2 = str_replace("\r\n", "\n", str_replace('\"', '"', trim($var2)));		$txt = $var2;		$email = ($var1) ? $var1 : $var2;		$validated = true;		if (!preg_match('/^' . get_preg_expression('email') . '$/i', $email))		{			$validated = false;		}		if (!$validated)		{			return '[email' . (($var1) ? "=$var1" : '') . ']' . $var2 . '[/email]';		}		$this->parsed_items['email']++;		if ($var1)		{			$retval = '[email=' . $this->bbcode_specialchars($email) . ':' . $this->bbcode_uid . ']' . $txt . '[/email:' . $this->bbcode_uid . ']';		}		else		{			$retval = '[email:' . $this->bbcode_uid . ']' . $this->bbcode_specialchars($email) . '[/email:' . $this->bbcode_uid . ']';		}		return $retval;	}	/**	* Validate url	*	* @param string $var1 optional url parameter for url bbcode: [url(=$var1)]$var2[/url]	* @param string $var2 url bbcode content: [url(=$var1)]$var2[/url]	*/	function validate_url($var1, $var2)	{		global $config;		$var1 = str_replace("\r\n", "\n", str_replace('\"', '"', trim($var1)));		$var2 = str_replace("\r\n", "\n", str_replace('\"', '"', trim($var2)));		$url = ($var1) ? $var1 : $var2;		if ($var1 && !$var2)		{			$var2 = $var1;		}		if (!$url)		{			return '[url' . (($var1) ? '=' . $var1 : '') . ']' . $var2 . '[/url]';		}		$valid = false;		$url = str_replace(' ', '%20', $url);		// Checking urls		if (preg_match('#^' . get_preg_expression('url') . '$#i', $url) ||			preg_match('#^' . get_preg_expression('www_url') . '$#i', $url) ||			preg_match('#^' . preg_quote(generate_board_url(), '#') . get_preg_expression('relative_url') . '$#i', $url))		{			$valid = true;		}		if ($valid)		{			$this->parsed_items['url']++;			// if there is no scheme, then add http schema			if (!preg_match('#^[a-z][a-z\d+\-.]*:/{2}#i', $url))			{				$url = 'http://' . $url;			}			// Is this a link to somewhere inside this board? If so then remove the session id from the url			if (strpos($url, generate_board_url()) !== false && strpos($url, 'sid=') !== false)			{				$url = preg_replace('/(&amp;|\?)sid=[0-9a-f]{32}&amp;/', '\1', $url);				$url = preg_replace('/(&amp;|\?)sid=[0-9a-f]{32}$/', '', $url);				$url = append_sid($url);			}			return ($var1) ? '[url=' . $this->bbcode_specialchars($url) . ':' . $this->bbcode_uid . ']' . $var2 . '[/url:' . $this->bbcode_uid . ']' : '[url:' . $this->bbcode_uid . ']' . $this->bbcode_specialchars($url) . '[/url:' . $this->bbcode_uid . ']';		}		return '[url' . (($var1) ? '=' . $var1 : '') . ']' . $var2 . '[/url]';	}	/**	* Check if url is pointing to this domain/script_path/php-file	*	* @param string $url the url to check	* @return true if the url is pointing to this domain/script_path/php-file, false if not	*	* @access private	*/	function path_in_domain($url)	{		global $config, $phpEx, $user;		if ($config['force_server_vars'])		{			$check_path = $config['script_path'];		}		else		{			$check_path = ($user->page['root_script_path'] != '/') ? substr($user->page['root_script_path'], 0, -1) : '/';		}		// Is the user trying to link to a php file in this domain and script path?		if (strpos($url, ".{$phpEx}") !== false && strpos($url, $check_path) !== false)		{			$server_name = $user->host;			// Forcing server vars is the only way to specify/override the protocol			if ($config['force_server_vars'] || !$server_name)			{				$server_name = $config['server_name'];			}			// Check again in correct order...			$pos_ext = strpos($url, ".{$phpEx}");			$pos_path = strpos($url, $check_path);			$pos_domain = strpos($url, $server_name);			if ($pos_domain !== false && $pos_path >= $pos_domain && $pos_ext >= $pos_path)			{				// Ok, actually we allow linking to some files (this may be able to be extended in some way later...)				if (strpos($url, '/' . $check_path . '/download/file.' . $phpEx) !== 0)				{					return false;				}				return true;			}		}		return false;	}}/*** Main message parser for posting, pm, etc. takes raw message* and parses it for attachments, bbcode and smilies* @package phpBB3*/class parse_message extends bbcode_firstpass{	var $attachment_data = array();	var $filename_data = array();	// Helps ironing out user error	var $message_status = '';	var $allow_img_bbcode = true;	var $allow_flash_bbcode = true;	var $allow_quote_bbcode = true;	var $allow_url_bbcode = true;	var $mode;	/**	* Init - give message here or manually	*/	function parse_message($message = '')	{		// Init BBCode UID		$this->bbcode_uid = substr(base_convert(unique_id(), 16, 36), 0, BBCODE_UID_LEN);		$this->message = $message;	}	/**	* Parse Message	*/	function parse($allow_bbcode, $allow_magic_url, $allow_smilies, $allow_img_bbcode = true, $allow_flash_bbcode = true, $allow_quote_bbcode = true, $allow_url_bbcode = true, $update_this_message = true, $mode = 'post')	{		global $config, $db, $user;		$this->mode = $mode;		foreach (array('chars', 'smilies', 'urls', 'font_size', 'img_height', 'img_width') as $key)		{			if (!isset($config['max_' . $mode . '_' . $key]))			{				$config['max_' . $mode . '_' . $key] = 0;			}		}		$this->allow_img_bbcode = $allow_img_bbcode;		$this->allow_flash_bbcode = $allow_flash_bbcode;		$this->allow_quote_bbcode = $allow_quote_bbcode;		$this->allow_url_bbcode = $allow_url_bbcode;		// If false, then $this->message won't be altered, the text will be returned instead.		if (!$update_this_message)		{			$tmp_message = $this->message;			$return_message = &$this->message;		}		if ($this->message_status == 'display')		{			$this->decode_message();		}		// Do some general 'cleanup' first before processing message,		// e.g. remove excessive newlines(?), smilies(?)		$match = array('#(script|about|applet|activex|chrome):#i');		$replace = array("\\1&#058;");		$this->message = preg_replace($match, $replace, trim($this->message));		// Store message length...		$message_length = ($mode == 'post') ? utf8_strlen($this->message) : utf8_strlen(preg_replace('#\[\/?[a-z\*\+\-]+(=[\S]+)?\]#ius', ' ', $this->message));		// Maximum message length check. 0 disables this check completely.		if ((int) $config['max_' . $mode . '_chars'] > 0 && $message_length > (int) $config['max_' . $mode . '_chars'])		{			$this->warn_msg[] = sprintf($user->lang['TOO_MANY_CHARS_' . strtoupper($mode)], $message_length, (int) $config['max_' . $mode . '_chars']);			return (!$update_this_message) ? $return_message : $this->warn_msg;		}		// Minimum message length check for post only		if ($mode === 'post')		{			if (!$message_length || $message_length < (int) $config['min_post_chars'])			{				$this->warn_msg[] = (!$message_length) ? $user->lang['TOO_FEW_CHARS'] : sprintf($user->lang['TOO_FEW_CHARS_LIMIT'], $message_length, (int) $config['min_post_chars']);				return (!$update_this_message) ? $return_message : $this->warn_msg;			}		}		// Prepare BBcode (just prepares some tags for better parsing)		if ($allow_bbcode && strpos($this->message, '[') !== false)		{			$this->bbcode_init();			$disallow = array('img', 'flash', 'quote', 'url');			foreach ($disallow as $bool)			{				if (!${'allow_' . $bool . '_bbcode'})				{					$this->bbcodes[$bool]['disabled'] = true;				}			}			$this->prepare_bbcodes();		}		// Parse smilies		if ($allow_smilies)		{			$this->smilies($config['max_' . $mode . '_smilies']);		}		$num_urls = 0;		// Parse BBCode		if ($allow_bbcode && strpos($this->message, '[') !== false)		{			$this->parse_bbcode();			$num_urls += $this->parsed_items['url'];		}		// Parse URL's		if ($allow_magic_url)		{			$this->magic_url(generate_board_url());			if ($config['max_' . $mode . '_urls'])			{				$num_urls += preg_match_all('#\<!-- ([lmwe]) --\>.*?\<!-- \1 --\>#', $this->message, $matches);			}		}		// Check for "empty" message. We do not check here for maximum length, because bbcode, smilies, etc. can add to the length.		// The maximum length check happened before any parsings.		if ($mode === 'post' && utf8_clean_string($this->message) === '')		{			$this->warn_msg[] = $user->lang['TOO_FEW_CHARS'];			return (!$update_this_message) ? $return_message : $this->warn_msg;		}		// Check number of links		if ($config['max_' . $mode . '_urls'] && $num_urls > $config['max_' . $mode . '_urls'])		{			$this->warn_msg[] = sprintf($user->lang['TOO_MANY_URLS'], $config['max_' . $mode . '_urls']);			return (!$update_this_message) ? $return_message : $this->warn_msg;		}		if (!$update_this_message)		{			unset($this->message);			$this->message = $tmp_message;			return $return_message;		}		$this->message_status = 'parsed';		return false;	}	/**	* Formatting text for display	*/	function format_display($allow_bbcode, $allow_magic_url, $allow_smilies, $update_this_message = true)	{		// If false, then the parsed message get returned but internal message not processed.		if (!$update_this_message)		{			$tmp_message = $this->message;			$return_message = &$this->message;		}		if ($this->message_status == 'plain')		{			// Force updating message - of course.			$this->parse($allow_bbcode, $allow_magic_url, $allow_smilies, $this->allow_img_bbcode, $this->allow_flash_bbcode, $this->allow_quote_bbcode, $this->allow_url_bbcode, true);		}		// Replace naughty words such as farty pants		$this->message = censor_text($this->message);		// Parse BBcode		if ($allow_bbcode)		{			$this->bbcode_cache_init();			// We are giving those parameters to be able to use the bbcode class on its own			$this->bbcode_second_pass($this->message, $this->bbcode_uid);		}		$this->message = bbcode_nl2br($this->message);		$this->message = smiley_text($this->message, !$allow_smilies);		if (!$update_this_message)		{			unset($this->message);			$this->message = $tmp_message;			return $return_message;		}		$this->message_status = 'display';		return false;	}	/**	* Decode message to be placed back into form box	*/	function decode_message($custom_bbcode_uid = '', $update_this_message = true)	{		// If false, then the parsed message get returned but internal message not processed.		if (!$update_this_message)		{			$tmp_message = $this->message;			$return_message = &$this->message;		}		($custom_bbcode_uid) ? decode_message($this->message, $custom_bbcode_uid) : decode_message($this->message, $this->bbcode_uid);		if (!$update_this_message)		{			unset($this->message);			$this->message = $tmp_message;			return $return_message;		}		$this->message_status = 'plain';		return false;	}	/**	* Replace magic urls of form http://xxx.xxx., www.xxx. and xxx@xxx.xxx.	* Cuts down displayed size of link if over 50 chars, turns absolute links	* into relative versions when the server/script path matches the link	*/	function magic_url($server_url)	{		// We use the global make_clickable function		$this->message = make_clickable($this->message, $server_url);	}	/**	* Parse Smilies	*/	function smilies($max_smilies = 0)	{		global $db, $user;		static $match;		static $replace;		// See if the static arrays have already been filled on an earlier invocation		if (!is_array($match))		{			$match = $replace = array();			// NOTE: obtain_* function? chaching the table contents?			// For now setting the ttl to 10 minutes			switch ($db->sql_layer)			{				case 'mssql':				case 'mssql_odbc':				case 'mssqlnative':					$sql = 'SELECT *						FROM ' . SMILIES_TABLE . '						ORDER BY LEN(code) DESC';				break;				case 'firebird':					$sql = 'SELECT *						FROM ' . SMILIES_TABLE . '						ORDER BY CHAR_LENGTH(code) DESC';				break;				// LENGTH supported by MySQL, IBM DB2, Oracle and Access for sure...				default:					$sql = 'SELECT *						FROM ' . SMILIES_TABLE . '						ORDER BY LENGTH(code) DESC';				break;			}			$result = $db->sql_query($sql, 600);			while ($row = $db->sql_fetchrow($result))			{				if (empty($row['code']))				{					continue;				}				// (assertion)				$match[] = preg_quote($row['code'], '#');				$replace[] = '<!-- s' . $row['code'] . ' --><img src="{SMILIES_PATH}/' . $row['smiley_url'] . '" alt="' . $row['code'] . '" title="' . $row['emotion'] . '" /><!-- s' . $row['code'] . ' -->';			}			$db->sql_freeresult($result);		}		if (sizeof($match))		{			if ($max_smilies)			{				// 'u' modifier has been added to correctly parse smilies within unicode strings				// For details: http://tracker.phpbb.com/browse/PHPBB3-10117				$num_matches = preg_match_all('#(?<=^|[\n .])(?:' . implode('|', $match) . ')(?![^<>]*>)#u', $this->message, $matches);				unset($matches);				if ($num_matches !== false && $num_matches > $max_smilies)				{					$this->warn_msg[] = sprintf($user->lang['TOO_MANY_SMILIES'], $max_smilies);					return;				}			}			// Make sure the delimiter # is added in front and at the end of every element within $match			// 'u' modifier has been added to correctly parse smilies within unicode strings			// For details: http://tracker.phpbb.com/browse/PHPBB3-10117			$this->message = trim(preg_replace(explode(chr(0), '#(?<=^|[\n .])' . implode('(?![^<>]*>)#u' . chr(0) . '#(?<=^|[\n .])', $match) . '(?![^<>]*>)#u'), $replace, $this->message));		}	}	/**	* Parse Attachments	*/	function parse_attachments($form_name, $mode, $forum_id, $submit, $preview, $refresh, $is_message = false)	{		global $config, $auth, $user, $phpbb_root_path, $phpEx, $db;		$error = array();		$num_attachments = sizeof($this->attachment_data);		$this->filename_data['filecomment'] = utf8_normalize_nfc(request_var('filecomment', '', true));		$upload_file = (isset($_FILES[$form_name]) && $_FILES[$form_name]['name'] != 'none' && trim($_FILES[$form_name]['name'])) ? true : false;		$add_file		= (isset($_POST['add_file'])) ? true : false;		$delete_file	= (isset($_POST['delete_file'])) ? true : false;		// First of all adjust comments if changed		$actual_comment_list = utf8_normalize_nfc(request_var('comment_list', array(''), true));		foreach ($actual_comment_list as $comment_key => $comment)		{			if (!isset($this->attachment_data[$comment_key]))			{				continue;			}			if ($this->attachment_data[$comment_key]['attach_comment'] != $actual_comment_list[$comment_key])			{				$this->attachment_data[$comment_key]['attach_comment'] = $actual_comment_list[$comment_key];			}		}		$cfg = array();		$cfg['max_attachments'] = ($is_message) ? $config['max_attachments_pm'] : $config['max_attachments'];		$forum_id = ($is_message) ? 0 : $forum_id;		if ($submit && in_array($mode, array('post', 'reply', 'quote', 'edit')) && $upload_file)		{			if ($num_attachments < $cfg['max_attachments'] || $auth->acl_get('a_') || $auth->acl_get('m_', $forum_id))			{				$filedata = upload_attachment($form_name, $forum_id, false, '', $is_message);				$error = $filedata['error'];				if ($filedata['post_attach'] && !sizeof($error))				{					$sql_ary = array(						'physical_filename'	=> $filedata['physical_filename'],						'attach_comment'	=> $this->filename_data['filecomment'],						'real_filename'		=> $filedata['real_filename'],						'extension'			=> $filedata['extension'],						'mimetype'			=> $filedata['mimetype'],						'filesize'			=> $filedata['filesize'],						'filetime'			=> $filedata['filetime'],						'thumbnail'			=> $filedata['thumbnail'],						'is_orphan'			=> 1,						'in_message'		=> ($is_message) ? 1 : 0,						'poster_id'			=> $user->data['user_id'],					);					$db->sql_query('INSERT INTO ' . ATTACHMENTS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));					$new_entry = array(						'attach_id'		=> $db->sql_nextid(),						'is_orphan'		=> 1,						'real_filename'	=> $filedata['real_filename'],						'attach_comment'=> $this->filename_data['filecomment'],					);					$this->attachment_data = array_merge(array(0 => $new_entry), $this->attachment_data);					$this->message = preg_replace('#\[attachment=([0-9]+)\](.*?)\[\/attachment\]#e', "'[attachment='.(\\1 + 1).']\\2[/attachment]'", $this->message);					$this->filename_data['filecomment'] = '';					// This Variable is set to false here, because Attachments are entered into the					// Database in two modes, one if the id_list is 0 and the second one if post_attach is true					// Since post_attach is automatically switched to true if an Attachment got added to the filesystem,					// but we are assigning an id of 0 here, we have to reset the post_attach variable to false.					//					// This is very relevant, because it could happen that the post got not submitted, but we do not					// know this circumstance here. We could be at the posting page or we could be redirected to the entered					// post. :)					$filedata['post_attach'] = false;				}			}			else			{				$error[] = sprintf($user->lang['TOO_MANY_ATTACHMENTS'], $cfg['max_attachments']);			}		}		if ($preview || $refresh || sizeof($error))		{			// Perform actions on temporary attachments			if ($delete_file)			{				include_once($phpbb_root_path . 'includes/functions_admin.' . $phpEx);				$index = array_keys(request_var('delete_file', array(0 => 0)));				$index = (!empty($index)) ? $index[0] : false;				if ($index !== false && !empty($this->attachment_data[$index]))				{					// delete selected attachment					if ($this->attachment_data[$index]['is_orphan'])					{						$sql = 'SELECT attach_id, physical_filename, thumbnail							FROM ' . ATTACHMENTS_TABLE . '							WHERE attach_id = ' . (int) $this->attachment_data[$index]['attach_id'] . '								AND is_orphan = 1								AND poster_id = ' . $user->data['user_id'];						$result = $db->sql_query($sql);						$row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if ($row)						{							phpbb_unlink($row['physical_filename'], 'file');							if ($row['thumbnail'])							{								phpbb_unlink($row['physical_filename'], 'thumbnail');							}							$db->sql_query('DELETE FROM ' . ATTACHMENTS_TABLE . ' WHERE attach_id = ' . (int) $this->attachment_data[$index]['attach_id']);						}					}					else					{						delete_attachments('attach', array(intval($this->attachment_data[$index]['attach_id'])));					}					unset($this->attachment_data[$index]);					$this->message = preg_replace('#\[attachment=([0-9]+)\](.*?)\[\/attachment\]#e', "(\\1 == \$index) ? '' : ((\\1 > \$index) ? '[attachment=' . (\\1 - 1) . ']\\2[/attachment]' : '\\0')", $this->message);					// Reindex Array					$this->attachment_data = array_values($this->attachment_data);				}			}			else if (($add_file || $preview) && $upload_file)			{				if ($num_attachments < $cfg['max_attachments'] || $auth->acl_gets('m_', 'a_', $forum_id))				{					$filedata = upload_attachment($form_name, $forum_id, false, '', $is_message);					$error = array_merge($error, $filedata['error']);					if (!sizeof($error))					{						$sql_ary = array(							'physical_filename'	=> $filedata['physical_filename'],							'attach_comment'	=> $this->filename_data['filecomment'],							'real_filename'		=> $filedata['real_filename'],							'extension'			=> $filedata['extension'],							'mimetype'			=> $filedata['mimetype'],							'filesize'			=> $filedata['filesize'],							'filetime'			=> $filedata['filetime'],							'thumbnail'			=> $filedata['thumbnail'],							'is_orphan'			=> 1,							'in_message'		=> ($is_message) ? 1 : 0,							'poster_id'			=> $user->data['user_id'],						);						$db->sql_query('INSERT INTO ' . ATTACHMENTS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));						$new_entry = array(							'attach_id'		=> $db->sql_nextid(),							'is_orphan'		=> 1,							'real_filename'	=> $filedata['real_filename'],							'attach_comment'=> $this->filename_data['filecomment'],						);						$this->attachment_data = array_merge(array(0 => $new_entry), $this->attachment_data);						$this->message = preg_replace('#\[attachment=([0-9]+)\](.*?)\[\/attachment\]#e', "'[attachment='.(\\1 + 1).']\\2[/attachment]'", $this->message);						$this->filename_data['filecomment'] = '';					}				}				else				{					$error[] = sprintf($user->lang['TOO_MANY_ATTACHMENTS'], $cfg['max_attachments']);				}			}		}		foreach ($error as $error_msg)		{			$this->warn_msg[] = $error_msg;		}	}	/**	* Get Attachment Data	*/	function get_submitted_attachment_data($check_user_id = false)	{		global $user, $db, $phpbb_root_path, $phpEx, $config;		$this->filename_data['filecomment'] = utf8_normalize_nfc(request_var('filecomment', '', true));		$attachment_data = (isset($_POST['attachment_data'])) ? $_POST['attachment_data'] : array();		$this->attachment_data = array();		$check_user_id = ($check_user_id === false) ? $user->data['user_id'] : $check_user_id;		if (!sizeof($attachment_data))		{			return;		}		$not_orphan = $orphan = array();		foreach ($attachment_data as $pos => $var_ary)		{			if ($var_ary['is_orphan'])			{				$orphan[(int) $var_ary['attach_id']] = $pos;			}			else			{				$not_orphan[(int) $var_ary['attach_id']] = $pos;			}		}		// Regenerate already posted attachments		if (sizeof($not_orphan))		{			// Get the attachment data, based on the poster id...			$sql = 'SELECT attach_id, is_orphan, real_filename, attach_comment				FROM ' . ATTACHMENTS_TABLE . '				WHERE ' . $db->sql_in_set('attach_id', array_keys($not_orphan)) . '					AND poster_id = ' . $check_user_id;			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$pos = $not_orphan[$row['attach_id']];				$this->attachment_data[$pos] = $row;				set_var($this->attachment_data[$pos]['attach_comment'], $_POST['attachment_data'][$pos]['attach_comment'], 'string', true);				unset($not_orphan[$row['attach_id']]);			}			$db->sql_freeresult($result);		}		if (sizeof($not_orphan))		{			trigger_error('NO_ACCESS_ATTACHMENT', E_USER_ERROR);		}		// Regenerate newly uploaded attachments		if (sizeof($orphan))		{			$sql = 'SELECT attach_id, is_orphan, real_filename, attach_comment				FROM ' . ATTACHMENTS_TABLE . '				WHERE ' . $db->sql_in_set('attach_id', array_keys($orphan)) . '					AND poster_id = ' . $user->data['user_id'] . '					AND is_orphan = 1';			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$pos = $orphan[$row['attach_id']];				$this->attachment_data[$pos] = $row;				set_var($this->attachment_data[$pos]['attach_comment'], $_POST['attachment_data'][$pos]['attach_comment'], 'string', true);				unset($orphan[$row['attach_id']]);			}			$db->sql_freeresult($result);		}		if (sizeof($orphan))		{			trigger_error('NO_ACCESS_ATTACHMENT', E_USER_ERROR);		}		ksort($this->attachment_data);	}	/**	* Parse Poll	*/	function parse_poll(&$poll)	{		global $auth, $user, $config;		$poll_max_options = $poll['poll_max_options'];		// Parse Poll Option text ;)		$tmp_message = $this->message;		$this->message = $poll['poll_option_text'];		$bbcode_bitfield = $this->bbcode_bitfield;		$poll['poll_option_text'] = $this->parse($poll['enable_bbcode'], ($config['allow_post_links']) ? $poll['enable_urls'] : false, $poll['enable_smilies'], $poll['img_status'], false, false, $config['allow_post_links'], false, 'poll');		$bbcode_bitfield = base64_encode(base64_decode($bbcode_bitfield) | base64_decode($this->bbcode_bitfield));		$this->message = $tmp_message;		// Parse Poll Title		$tmp_message = $this->message;		$this->message = $poll['poll_title'];		$this->bbcode_bitfield = $bbcode_bitfield;		$poll['poll_options'] = explode("\n", trim($poll['poll_option_text']));		$poll['poll_options_size'] = sizeof($poll['poll_options']);		if (!$poll['poll_title'] && $poll['poll_options_size'])		{			$this->warn_msg[] = $user->lang['NO_POLL_TITLE'];		}		else		{			if (utf8_strlen(preg_replace('#\[\/?[a-z\*\+\-]+(=[\S]+)?\]#ius', ' ', $this->message)) > 100)			{				$this->warn_msg[] = $user->lang['POLL_TITLE_TOO_LONG'];			}			$poll['poll_title'] = $this->parse($poll['enable_bbcode'], ($config['allow_post_links']) ? $poll['enable_urls'] : false, $poll['enable_smilies'], $poll['img_status'], false, false, $config['allow_post_links'], false, 'poll');			if (strlen($poll['poll_title']) > 255)			{				$this->warn_msg[] = $user->lang['POLL_TITLE_COMP_TOO_LONG'];			}		}		$this->bbcode_bitfield = base64_encode(base64_decode($bbcode_bitfield) | base64_decode($this->bbcode_bitfield));		$this->message = $tmp_message;		unset($tmp_message);		if (sizeof($poll['poll_options']) == 1)		{			$this->warn_msg[] = $user->lang['TOO_FEW_POLL_OPTIONS'];		}		else if ($poll['poll_options_size'] > (int) $config['max_poll_options'])		{			$this->warn_msg[] = $user->lang['TOO_MANY_POLL_OPTIONS'];		}		else if ($poll_max_options > $poll['poll_options_size'])		{			$this->warn_msg[] = $user->lang['TOO_MANY_USER_OPTIONS'];		}		$poll['poll_max_options'] = ($poll['poll_max_options'] < 1) ? 1 : (($poll['poll_max_options'] > $config['max_poll_options']) ? $config['max_poll_options'] : $poll['poll_max_options']);	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_attachments{	var $u_action;	var $new_config;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_admin_path, $phpbb_root_path, $phpEx;		$user->add_lang(array('posting', 'viewtopic', 'acp/attachments'));		$error = $notify = array();		$submit = (isset($_POST['submit'])) ? true : false;		$action = request_var('action', '');		$form_key = 'acp_attach';		add_form_key($form_key);		if ($submit && !check_form_key($form_key))		{			trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action), E_USER_WARNING);		}		switch ($mode)		{			case 'attach':				$l_title = 'ACP_ATTACHMENT_SETTINGS';			break;			case 'extensions':				$l_title = 'ACP_MANAGE_EXTENSIONS';			break;			case 'ext_groups':				$l_title = 'ACP_EXTENSION_GROUPS';			break;			case 'orphan':				$l_title = 'ACP_ORPHAN_ATTACHMENTS';			break;			default:				trigger_error('NO_MODE', E_USER_ERROR);			break;		}		$this->tpl_name = 'acp_attachments';		$this->page_title = $l_title;		$template->assign_vars(array(			'L_TITLE'			=> $user->lang[$l_title],			'L_TITLE_EXPLAIN'	=> $user->lang[$l_title . '_EXPLAIN'],			'U_ACTION'			=> $this->u_action)		);		switch ($mode)		{			case 'attach':				include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);				$sql = 'SELECT group_name, cat_id					FROM ' . EXTENSION_GROUPS_TABLE . '					WHERE cat_id > 0					ORDER BY cat_id';				$result = $db->sql_query($sql);				$s_assigned_groups = array();				while ($row = $db->sql_fetchrow($result))				{					$row['group_name'] = (isset($user->lang['EXT_GROUP_' . $row['group_name']])) ? $user->lang['EXT_GROUP_' . $row['group_name']] : $row['group_name'];					$s_assigned_groups[$row['cat_id']][] = $row['group_name'];				}				$db->sql_freeresult($result);				$l_legend_cat_images = $user->lang['SETTINGS_CAT_IMAGES'] . ' [' . $user->lang['ASSIGNED_GROUP'] . ': ' . ((!empty($s_assigned_groups[ATTACHMENT_CATEGORY_IMAGE])) ? implode(', ', $s_assigned_groups[ATTACHMENT_CATEGORY_IMAGE]) : $user->lang['NO_EXT_GROUP']) . ']';				$display_vars = array(					'title'	=> 'ACP_ATTACHMENT_SETTINGS',					'vars'	=> array(						'legend1'				=> 'ACP_ATTACHMENT_SETTINGS',						'img_max_width'			=> array('lang' => 'MAX_IMAGE_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'img_max_height'		=> array('lang' => 'MAX_IMAGE_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'img_link_width'		=> array('lang' => 'IMAGE_LINK_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'img_link_height'		=> array('lang' => 'IMAGE_LINK_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'allow_attachments'		=> array('lang' => 'ALLOW_ATTACHMENTS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_pm_attach'		=> array('lang' => 'ALLOW_PM_ATTACHMENTS',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'upload_path'			=> array('lang' => 'UPLOAD_DIR',			'validate' => 'wpath',	'type' => 'text:25:100', 'explain' => true),						'display_order'			=> array('lang' => 'DISPLAY_ORDER',			'validate' => 'bool',	'type' => 'custom', 'method' => 'display_order', 'explain' => true),						'attachment_quota'		=> array('lang' => 'ATTACH_QUOTA',			'validate' => 'string',	'type' => 'custom', 'method' => 'max_filesize', 'explain' => true),						'max_filesize'			=> array('lang' => 'ATTACH_MAX_FILESIZE',	'validate' => 'string',	'type' => 'custom', 'method' => 'max_filesize', 'explain' => true),						'max_filesize_pm'		=> array('lang' => 'ATTACH_MAX_PM_FILESIZE','validate' => 'string',	'type' => 'custom', 'method' => 'max_filesize', 'explain' => true),						'max_attachments'		=> array('lang' => 'MAX_ATTACHMENTS',		'validate' => 'int',	'type' => 'text:3:3', 'explain' => false),						'max_attachments_pm'	=> array('lang' => 'MAX_ATTACHMENTS_PM',	'validate' => 'int',	'type' => 'text:3:3', 'explain' => false),						'secure_downloads'		=> array('lang' => 'SECURE_DOWNLOADS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'secure_allow_deny'		=> array('lang' => 'SECURE_ALLOW_DENY',		'validate' => 'int',	'type' => 'custom', 'method' => 'select_allow_deny', 'explain' => true),						'secure_allow_empty_referer'	=> array('lang' => 'SECURE_EMPTY_REFERRER', 'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'check_attachment_content' 		=> array('lang' => 'CHECK_CONTENT', 'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'legend2'					=> $l_legend_cat_images,						'img_display_inlined'		=> array('lang' => 'DISPLAY_INLINED',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'img_create_thumbnail'		=> array('lang' => 'CREATE_THUMBNAIL',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'img_max_thumb_width'		=> array('lang' => 'MAX_THUMB_WIDTH',		'validate' => 'int',	'type' => 'text:7:15', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'img_min_thumb_filesize'	=> array('lang' => 'MIN_THUMB_FILESIZE',	'validate' => 'int',	'type' => 'text:7:15', 'explain' => true, 'append' => ' ' . $user->lang['BYTES']),						'img_imagick'				=> array('lang' => 'IMAGICK_PATH',			'validate' => 'string',	'type' => 'text:20:200', 'explain' => true, 'append' => '&nbsp;&nbsp;<span>[ <a href="' . $this->u_action . '&amp;action=imgmagick">' . $user->lang['SEARCH_IMAGICK'] . '</a> ]</span>'),						'img_max'					=> array('lang' => 'MAX_IMAGE_SIZE',		'validate' => 'int',	'type' => 'dimension:3:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'img_link'					=> array('lang' => 'IMAGE_LINK_SIZE',		'validate' => 'int',	'type' => 'dimension:3:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),					)				);				$this->new_config = $config;				$cfg_array = (isset($_REQUEST['config'])) ? request_var('config', array('' => '')) : $this->new_config;				$error = array();				// We validate the complete config if whished				validate_config_vars($display_vars['vars'], $cfg_array, $error);				// Do not write values if there is an error				if (sizeof($error))				{					$submit = false;				}				// We go through the display_vars to make sure no one is trying to set variables he/she is not allowed to...				foreach ($display_vars['vars'] as $config_name => $null)				{					if (!isset($cfg_array[$config_name]) || strpos($config_name, 'legend') !== false)					{						continue;					}					$this->new_config[$config_name] = $config_value = $cfg_array[$config_name];					if (in_array($config_name, array('attachment_quota', 'max_filesize', 'max_filesize_pm')))					{						$size_var = request_var($config_name, '');						$this->new_config[$config_name] = $config_value = ($size_var == 'kb') ? round($config_value * 1024) : (($size_var == 'mb') ? round($config_value * 1048576) : $config_value);					}					if ($submit)					{						set_config($config_name, $config_value);					}				}				$this->perform_site_list();				if ($submit)				{					add_log('admin', 'LOG_CONFIG_ATTACH');					// Check Settings					$this->test_upload($error, $this->new_config['upload_path'], false);					if (!sizeof($error))					{						trigger_error($user->lang['CONFIG_UPDATED'] . adm_back_link($this->u_action));					}				}				$template->assign_var('S_ATTACHMENT_SETTINGS', true);				if ($action == 'imgmagick')				{					$this->new_config['img_imagick'] = $this->search_imagemagick();				}				// We strip eventually manual added convert program, we only want the patch				if ($this->new_config['img_imagick'])				{					// Change path separator					$this->new_config['img_imagick'] = str_replace('\\', '/', $this->new_config['img_imagick']);					$this->new_config['img_imagick'] = str_replace(array('convert', '.exe'), array('', ''), $this->new_config['img_imagick']);					// Check for trailing slash					if (substr($this->new_config['img_imagick'], -1) !== '/')					{						$this->new_config['img_imagick'] .= '/';					}				}				$supported_types = get_supported_image_types();				// Check Thumbnail Support				if (!$this->new_config['img_imagick'] && (!isset($supported_types['format']) || !sizeof($supported_types['format'])))				{					$this->new_config['img_create_thumbnail'] = 0;				}				$template->assign_vars(array(					'U_SEARCH_IMAGICK'		=> $this->u_action . '&amp;action=imgmagick',					'S_THUMBNAIL_SUPPORT'	=> (!$this->new_config['img_imagick'] && (!isset($supported_types['format']) || !sizeof($supported_types['format']))) ? false : true)				);				// Secure Download Options - Same procedure as with banning				$allow_deny = ($this->new_config['secure_allow_deny']) ? 'ALLOWED' : 'DISALLOWED';				$sql = 'SELECT *					FROM ' . SITELIST_TABLE;				$result = $db->sql_query($sql);				$defined_ips = '';				$ips = array();				while ($row = $db->sql_fetchrow($result))				{					$value = ($row['site_ip']) ? $row['site_ip'] : $row['site_hostname'];					if ($value)					{						$defined_ips .= '<option' . (($row['ip_exclude']) ? ' class="sep"' : '') . ' value="' . $row['site_id'] . '">' . $value . '</option>';						$ips[$row['site_id']] = $value;					}				}				$db->sql_freeresult($result);				$template->assign_vars(array(					'S_SECURE_DOWNLOADS'	=> $this->new_config['secure_downloads'],					'S_DEFINED_IPS'			=> ($defined_ips != '') ? true : false,					'S_WARNING'				=> (sizeof($error)) ? true : false,					'WARNING_MSG'			=> implode('<br />', $error),					'DEFINED_IPS'			=> $defined_ips,					'L_SECURE_TITLE'		=> $user->lang['DEFINE_' . $allow_deny . '_IPS'],					'L_IP_EXCLUDE'			=> $user->lang['EXCLUDE_FROM_' . $allow_deny . '_IP'],					'L_REMOVE_IPS'			=> $user->lang['REMOVE_' . $allow_deny . '_IPS'])				);				// Output relevant options				foreach ($display_vars['vars'] as $config_key => $vars)				{					if (!is_array($vars) && strpos($config_key, 'legend') === false)					{						continue;					}					if (strpos($config_key, 'legend') !== false)					{						$template->assign_block_vars('options', array(							'S_LEGEND'		=> true,							'LEGEND'		=> (isset($user->lang[$vars])) ? $user->lang[$vars] : $vars)						);						continue;					}					$type = explode(':', $vars['type']);					$l_explain = '';					if ($vars['explain'] && isset($vars['lang_explain']))					{						$l_explain = (isset($user->lang[$vars['lang_explain']])) ? $user->lang[$vars['lang_explain']] : $vars['lang_explain'];					}					else if ($vars['explain'])					{						$l_explain = (isset($user->lang[$vars['lang'] . '_EXPLAIN'])) ? $user->lang[$vars['lang'] . '_EXPLAIN'] : '';					}					$content = build_cfg_template($type, $config_key, $this->new_config, $config_key, $vars);					if (empty($content))					{						continue;					}					$template->assign_block_vars('options', array(						'KEY'			=> $config_key,						'TITLE'			=> $user->lang[$vars['lang']],						'S_EXPLAIN'		=> $vars['explain'],						'TITLE_EXPLAIN'	=> $l_explain,						'CONTENT'		=> $content,						)					);					unset($display_vars['vars'][$config_key]);				}			break;			case 'extensions':				if ($submit || isset($_POST['add_extension_check']))				{					if ($submit)					{						// Change Extensions ?						$extension_change_list	= request_var('extension_change_list', array(0));						$group_select_list		= request_var('group_select', array(0));						// Generate correct Change List						$extensions = array();						for ($i = 0, $size = sizeof($extension_change_list); $i < $size; $i++)						{							$extensions[$extension_change_list[$i]]['group_id'] = $group_select_list[$i];						}						$sql = 'SELECT *							FROM ' . EXTENSIONS_TABLE . '							ORDER BY extension_id';						$result = $db->sql_query($sql);						while ($row = $db->sql_fetchrow($result))						{							if ($row['group_id'] != $extensions[$row['extension_id']]['group_id'])							{								$sql = 'UPDATE ' . EXTENSIONS_TABLE . '									SET group_id = ' . (int) $extensions[$row['extension_id']]['group_id'] . '									WHERE extension_id = ' . $row['extension_id'];								$db->sql_query($sql);								add_log('admin', 'LOG_ATTACH_EXT_UPDATE', $row['extension']);							}						}						$db->sql_freeresult($result);						// Delete Extension?						$extension_id_list = request_var('extension_id_list', array(0));						if (sizeof($extension_id_list))						{							$sql = 'SELECT extension								FROM ' . EXTENSIONS_TABLE . '								WHERE ' . $db->sql_in_set('extension_id', $extension_id_list);							$result = $db->sql_query($sql);							$extension_list = '';							while ($row = $db->sql_fetchrow($result))							{								$extension_list .= ($extension_list == '') ? $row['extension'] : ', ' . $row['extension'];							}							$db->sql_freeresult($result);							$sql = 'DELETE								FROM ' . EXTENSIONS_TABLE . '								WHERE ' . $db->sql_in_set('extension_id', $extension_id_list);							$db->sql_query($sql);							add_log('admin', 'LOG_ATTACH_EXT_DEL', $extension_list);						}					}					// Add Extension?					$add_extension			= strtolower(request_var('add_extension', ''));					$add_extension_group	= request_var('add_group_select', 0);					$add					= (isset($_POST['add_extension_check'])) ? true : false;					if ($add_extension && $add)					{						if (!sizeof($error))						{							$sql = 'SELECT extension_id								FROM ' . EXTENSIONS_TABLE . "								WHERE extension = '" . $db->sql_escape($add_extension) . "'";							$result = $db->sql_query($sql);							if ($row = $db->sql_fetchrow($result))							{								$error[] = sprintf($user->lang['EXTENSION_EXIST'], $add_extension);							}							$db->sql_freeresult($result);							if (!sizeof($error))							{								$sql_ary = array(									'group_id'	=>	$add_extension_group,									'extension'	=>	$add_extension								);								$db->sql_query('INSERT INTO ' . EXTENSIONS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));								add_log('admin', 'LOG_ATTACH_EXT_ADD', $add_extension);							}						}					}					if (!sizeof($error))					{						$notify[] = $user->lang['EXTENSIONS_UPDATED'];					}					$cache->destroy('_extensions');				}				$template->assign_vars(array(					'S_EXTENSIONS'			=> true,					'ADD_EXTENSION'			=> (isset($add_extension)) ? $add_extension : '',					'GROUP_SELECT_OPTIONS'	=> (isset($_POST['add_extension_check'])) ? $this->group_select('add_group_select', $add_extension_group, 'extension_group') : $this->group_select('add_group_select', false, 'extension_group'))				);				$sql = 'SELECT *					FROM ' . EXTENSIONS_TABLE . '					ORDER BY group_id, extension';				$result = $db->sql_query($sql);				if ($row = $db->sql_fetchrow($result))				{					$old_group_id = $row['group_id'];					do					{						$s_spacer = false;						$current_group_id = $row['group_id'];						if ($old_group_id != $current_group_id)						{							$s_spacer = true;							$old_group_id = $current_group_id;						}						$template->assign_block_vars('extensions', array(							'S_SPACER'		=> $s_spacer,							'EXTENSION_ID'	=> $row['extension_id'],							'EXTENSION'		=> $row['extension'],							'GROUP_OPTIONS'	=> $this->group_select('group_select[]', $row['group_id']))						);					}					while ($row = $db->sql_fetchrow($result));				}				$db->sql_freeresult($result);			break;			case 'ext_groups':				$template->assign_var('S_EXTENSION_GROUPS', true);				if ($submit)				{					$action = request_var('action', '');					$group_id = request_var('g', 0);					if ($action != 'add' && $action != 'edit')					{						trigger_error('NO_MODE', E_USER_ERROR);					}					if (!$group_id && $action == 'edit')					{						trigger_error($user->lang['NO_EXT_GROUP_SPECIFIED'] . adm_back_link($this->u_action), E_USER_WARNING);					}					if ($group_id)					{						$sql = 'SELECT *							FROM ' . EXTENSION_GROUPS_TABLE . "							WHERE group_id = $group_id";						$result = $db->sql_query($sql);						$ext_row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$ext_row)						{							trigger_error($user->lang['NO_EXT_GROUP_SPECIFIED'] . adm_back_link($this->u_action), E_USER_WARNING);						}					}					else					{						$ext_row = array();					}					$group_name = utf8_normalize_nfc(request_var('group_name', '', true));					$new_group_name = ($action == 'add') ? $group_name : (($ext_row['group_name'] != $group_name) ? $group_name : '');					if (!$group_name)					{						$error[] = $user->lang['NO_EXT_GROUP_NAME'];					}					// Check New Group Name					if ($new_group_name)					{						$sql = 'SELECT group_id							FROM ' . EXTENSION_GROUPS_TABLE . "							WHERE LOWER(group_name) = '" . $db->sql_escape(utf8_strtolower($new_group_name)) . "'";						if ($group_id)						{							$sql .= ' AND group_id <> ' . $group_id;						}						$result = $db->sql_query($sql);						if ($db->sql_fetchrow($result))						{							$error[] = sprintf($user->lang['EXTENSION_GROUP_EXIST'], $new_group_name);						}						$db->sql_freeresult($result);					}					if (!sizeof($error))					{						// Ok, build the update/insert array						$upload_icon	= request_var('upload_icon', 'no_image');						$size_select	= request_var('size_select', 'b');						$forum_select	= request_var('forum_select', false);						$allowed_forums	= request_var('allowed_forums', array(0));						$allow_in_pm	= (isset($_POST['allow_in_pm'])) ? true : false;						$max_filesize	= request_var('max_filesize', 0);						$max_filesize	= ($size_select == 'kb') ? round($max_filesize * 1024) : (($size_select == 'mb') ? round($max_filesize * 1048576) : $max_filesize);						$allow_group	= (isset($_POST['allow_group'])) ? true : false;						if ($max_filesize == $config['max_filesize'])						{							$max_filesize = 0;						}						if (!sizeof($allowed_forums))						{							$forum_select = false;						}						$group_ary = array(							'group_name'	=> $group_name,							'cat_id'		=> request_var('special_category', ATTACHMENT_CATEGORY_NONE),							'allow_group'	=> ($allow_group) ? 1 : 0,							'upload_icon'	=> ($upload_icon == 'no_image') ? '' : $upload_icon,							'max_filesize'	=> $max_filesize,							'allowed_forums'=> ($forum_select) ? serialize($allowed_forums) : '',							'allow_in_pm'	=> ($allow_in_pm) ? 1 : 0,						);						if ($action == 'add')						{							$group_ary['download_mode'] = INLINE_LINK;						}						$sql = ($action == 'add') ? 'INSERT INTO ' . EXTENSION_GROUPS_TABLE . ' ' : 'UPDATE ' . EXTENSION_GROUPS_TABLE . ' SET ';						$sql .= $db->sql_build_array((($action == 'add') ? 'INSERT' : 'UPDATE'), $group_ary);						$sql .= ($action == 'edit') ? " WHERE group_id = $group_id" : '';						$db->sql_query($sql);						if ($action == 'add')						{							$group_id = $db->sql_nextid();						}						$group_name = (isset($user->lang['EXT_GROUP_' . $group_name])) ? $user->lang['EXT_GROUP_' . $group_name] : $group_name;						add_log('admin', 'LOG_ATTACH_EXTGROUP_' . strtoupper($action), $group_name);					}					$extension_list = request_var('extensions', array(0));					if ($action == 'edit' && sizeof($extension_list))					{						$sql = 'UPDATE ' . EXTENSIONS_TABLE . "							SET group_id = 0							WHERE group_id = $group_id";						$db->sql_query($sql);					}					if (sizeof($extension_list))					{						$sql = 'UPDATE ' . EXTENSIONS_TABLE . "							SET group_id = $group_id							WHERE " . $db->sql_in_set('extension_id', $extension_list);						$db->sql_query($sql);					}					$cache->destroy('_extensions');					if (!sizeof($error))					{						$notify[] = $user->lang['SUCCESS_EXTENSION_GROUP_' . strtoupper($action)];					}				}				$cat_lang = array(					ATTACHMENT_CATEGORY_NONE		=> $user->lang['NO_FILE_CAT'],					ATTACHMENT_CATEGORY_IMAGE		=> $user->lang['CAT_IMAGES'],					ATTACHMENT_CATEGORY_WM			=> $user->lang['CAT_WM_FILES'],					ATTACHMENT_CATEGORY_RM			=> $user->lang['CAT_RM_FILES'],					ATTACHMENT_CATEGORY_FLASH		=> $user->lang['CAT_FLASH_FILES'],					ATTACHMENT_CATEGORY_QUICKTIME	=> $user->lang['CAT_QUICKTIME_FILES'],				);				$group_id = request_var('g', 0);				$action = (isset($_POST['add'])) ? 'add' : $action;				switch ($action)				{					case 'delete':						if (confirm_box(true))						{							$sql = 'SELECT group_name								FROM ' . EXTENSION_GROUPS_TABLE . "								WHERE group_id = $group_id";							$result = $db->sql_query($sql);							$group_name = (string) $db->sql_fetchfield('group_name');							$db->sql_freeresult($result);							$sql = 'DELETE								FROM ' . EXTENSION_GROUPS_TABLE . "								WHERE group_id = $group_id";							$db->sql_query($sql);							// Set corresponding Extensions to a pending Group							$sql = 'UPDATE ' . EXTENSIONS_TABLE . "								SET group_id = 0								WHERE group_id = $group_id";							$db->sql_query($sql);							add_log('admin', 'LOG_ATTACH_EXTGROUP_DEL', $group_name);							$cache->destroy('_extensions');							trigger_error($user->lang['EXTENSION_GROUP_DELETED'] . adm_back_link($this->u_action));						}						else						{							confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(								'i'			=> $id,								'mode'		=> $mode,								'group_id'	=> $group_id,								'action'	=> 'delete',							)));						}					break;					case 'edit':						if (!$group_id)						{							trigger_error($user->lang['NO_EXT_GROUP_SPECIFIED'] . adm_back_link($this->u_action), E_USER_WARNING);						}						$sql = 'SELECT *							FROM ' . EXTENSION_GROUPS_TABLE . "							WHERE group_id = $group_id";						$result = $db->sql_query($sql);						$ext_group_row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						$forum_ids = (!$ext_group_row['allowed_forums']) ? array() : unserialize(trim($ext_group_row['allowed_forums']));					// no break;					case 'add':						if ($action == 'add')						{							$ext_group_row = array(								'group_name'	=> utf8_normalize_nfc(request_var('group_name', '', true)),								'cat_id'		=> 0,								'allow_group'	=> 1,								'allow_in_pm'	=> 1,								'upload_icon'	=> '',								'max_filesize'	=> 0,							);							$forum_ids = array();						}						$extensions = array();						$sql = 'SELECT *							FROM ' . EXTENSIONS_TABLE . "							WHERE group_id = $group_id								OR group_id = 0							ORDER BY extension";						$result = $db->sql_query($sql);						$extensions = $db->sql_fetchrowset($result);						$db->sql_freeresult($result);						if ($ext_group_row['max_filesize'] == 0)						{							$ext_group_row['max_filesize'] = (int) $config['max_filesize'];						}						$max_filesize = get_formatted_filesize($ext_group_row['max_filesize'], false, array('mb', 'kb', 'b'));						$size_format = $max_filesize['si_identifier'];						$ext_group_row['max_filesize'] = $max_filesize['value'];						$img_path = $config['upload_icons_path'];						$filename_list = '';						$no_image_select = false;						$imglist = filelist($phpbb_root_path . $img_path);						if (!empty($imglist['']))						{							$imglist = array_values($imglist);							$imglist = $imglist[0];							foreach ($imglist as $key => $img)							{								if (!$ext_group_row['upload_icon'])								{									$no_image_select = true;									$selected = '';								}								else								{									$selected = ($ext_group_row['upload_icon'] == $img) ? ' selected="selected"' : '';								}								if (strlen($img) > 255)								{									continue;								}								$filename_list .= '<option value="' . htmlspecialchars($img) . '"' . $selected . '>' . htmlspecialchars($img) . '</option>';							}						}						$i = 0;						$assigned_extensions = '';						foreach ($extensions as $num => $row)						{							if ($row['group_id'] == $group_id && $group_id)							{								$assigned_extensions .= ($i) ? ', ' . $row['extension'] : $row['extension'];								$i++;							}						}						$s_extension_options = '';						foreach ($extensions as $row)						{							$s_extension_options .= '<option' . ((!$row['group_id']) ? ' class="disabled"' : '') . ' value="' . $row['extension_id'] . '"' . (($row['group_id'] == $group_id && $group_id) ? ' selected="selected"' : '') . '>' . $row['extension'] . '</option>';						}						$template->assign_vars(array(							'PHPBB_ROOT_PATH'		=> $phpbb_root_path,							'IMG_PATH'				=> $img_path,							'ACTION'				=> $action,							'GROUP_ID'				=> $group_id,							'GROUP_NAME'			=> $ext_group_row['group_name'],							'ALLOW_GROUP'			=> $ext_group_row['allow_group'],							'ALLOW_IN_PM'			=> $ext_group_row['allow_in_pm'],							'UPLOAD_ICON_SRC'		=> $phpbb_root_path . $img_path . '/' . $ext_group_row['upload_icon'],							'EXTGROUP_FILESIZE'		=> $ext_group_row['max_filesize'],							'ASSIGNED_EXTENSIONS'	=> $assigned_extensions,							'S_CATEGORY_SELECT'			=> $this->category_select('special_category', $group_id, 'category'),							'S_EXT_GROUP_SIZE_OPTIONS'	=> size_select_options($size_format),							'S_EXTENSION_OPTIONS'		=> $s_extension_options,							'S_FILENAME_LIST'			=> $filename_list,							'S_EDIT_GROUP'				=> true,							'S_NO_IMAGE'				=> $no_image_select,							'S_FORUM_IDS'				=> (sizeof($forum_ids)) ? true : false,							'U_EXTENSIONS'		=> append_sid("{$phpbb_admin_path}index.$phpEx", "i=$id&amp;mode=extensions"),							'U_BACK'			=> $this->u_action,							'L_LEGEND'			=> $user->lang[strtoupper($action) . '_EXTENSION_GROUP'])						);						$s_forum_id_options = '';						/** @todo use in-built function **/						$sql = 'SELECT forum_id, forum_name, parent_id, forum_type, left_id, right_id							FROM ' . FORUMS_TABLE . '							ORDER BY left_id ASC';						$result = $db->sql_query($sql, 600);						$right = $cat_right = $padding_inc = 0;						$padding = $forum_list = $holding = '';						$padding_store = array('0' => '');						while ($row = $db->sql_fetchrow($result))						{							if ($row['forum_type'] == FORUM_CAT && ($row['left_id'] + 1 == $row['right_id']))							{								// Non-postable forum with no subforums, don't display								continue;							}							if (!$auth->acl_get('f_list', $row['forum_id']))							{								// if the user does not have permissions to list this forum skip								continue;							}							if ($row['left_id'] < $right)							{								$padding .= '&nbsp; &nbsp;';								$padding_store[$row['parent_id']] = $padding;							}							else if ($row['left_id'] > $right + 1)							{								$padding = empty($padding_store[$row['parent_id']]) ? '' : $padding_store[$row['parent_id']];							}							$right = $row['right_id'];							$selected = (in_array($row['forum_id'], $forum_ids)) ? ' selected="selected"' : '';							if ($row['left_id'] > $cat_right)							{								// make sure we don't forget anything								$s_forum_id_options .= $holding;								$holding = '';							}							if ($row['right_id'] - $row['left_id'] > 1)							{								$cat_right = max($cat_right, $row['right_id']);								$holding .= '<option value="' . $row['forum_id'] . '"' . (($row['forum_type'] == FORUM_POST) ? ' class="sep"' : '') . $selected . '>' . $padding . $row['forum_name'] . '</option>';							}							else							{								$s_forum_id_options .= $holding . '<option value="' . $row['forum_id'] . '"' . (($row['forum_type'] == FORUM_POST) ? ' class="sep"' : '') . $selected . '>' . $padding . $row['forum_name'] . '</option>';								$holding = '';							}						}						if ($holding)						{							$s_forum_id_options .= $holding;						}						$db->sql_freeresult($result);						unset($padding_store);						$template->assign_vars(array(							'S_FORUM_ID_OPTIONS'	=> $s_forum_id_options)						);					break;				}				$sql = 'SELECT *					FROM ' . EXTENSION_GROUPS_TABLE . '					ORDER BY allow_group DESC, allow_in_pm DESC, group_name';				$result = $db->sql_query($sql);				$old_allow_group = $old_allow_pm = 1;				while ($row = $db->sql_fetchrow($result))				{					$s_add_spacer = ($old_allow_group != $row['allow_group'] || $old_allow_pm != $row['allow_in_pm']) ? true : false;					$template->assign_block_vars('groups', array(						'S_ADD_SPACER'		=> $s_add_spacer,						'S_ALLOWED_IN_PM'	=> ($row['allow_in_pm']) ? true : false,						'S_GROUP_ALLOWED'	=> ($row['allow_group']) ? true : false,						'U_EDIT'		=> $this->u_action . "&amp;action=edit&amp;g={$row['group_id']}",						'U_DELETE'		=> $this->u_action . "&amp;action=delete&amp;g={$row['group_id']}",						'GROUP_NAME'	=> (isset($user->lang['EXT_GROUP_' . $row['group_name']])) ? $user->lang['EXT_GROUP_' . $row['group_name']] : $row['group_name'],						'CATEGORY'		=> $cat_lang[$row['cat_id']],						)					);					$old_allow_group = $row['allow_group'];					$old_allow_pm = $row['allow_in_pm'];				}				$db->sql_freeresult($result);			break;			case 'orphan':				if ($submit)				{					$delete_files = (isset($_POST['delete'])) ? array_keys(request_var('delete', array('' => 0))) : array();					$add_files = (isset($_POST['add'])) ? array_keys(request_var('add', array('' => 0))) : array();					$post_ids = request_var('post_id', array('' => 0));					if (sizeof($delete_files))					{						$sql = 'SELECT *							FROM ' . ATTACHMENTS_TABLE . '							WHERE ' . $db->sql_in_set('attach_id', $delete_files) . '								AND is_orphan = 1';						$result = $db->sql_query($sql);						$delete_files = array();						while ($row = $db->sql_fetchrow($result))						{							phpbb_unlink($row['physical_filename'], 'file');							if ($row['thumbnail'])							{								phpbb_unlink($row['physical_filename'], 'thumbnail');							}							$delete_files[$row['attach_id']] = $row['real_filename'];						}						$db->sql_freeresult($result);					}					if (sizeof($delete_files))					{						$sql = 'DELETE FROM ' . ATTACHMENTS_TABLE . '							WHERE ' . $db->sql_in_set('attach_id', array_keys($delete_files));						$db->sql_query($sql);						add_log('admin', 'LOG_ATTACH_ORPHAN_DEL', implode(', ', $delete_files));						$notify[] = sprintf($user->lang['LOG_ATTACH_ORPHAN_DEL'], implode(', ', $delete_files));					}					$upload_list = array();					foreach ($add_files as $attach_id)					{						if (!isset($delete_files[$attach_id]) && !empty($post_ids[$attach_id]))						{							$upload_list[$attach_id] = $post_ids[$attach_id];						}					}					unset($add_files);					if (sizeof($upload_list))					{						$template->assign_var('S_UPLOADING_FILES', true);						$sql = 'SELECT forum_id, forum_name							FROM ' . FORUMS_TABLE;						$result = $db->sql_query($sql);						$forum_names = array();						while ($row = $db->sql_fetchrow($result))						{							$forum_names[$row['forum_id']] = $row['forum_name'];						}						$db->sql_freeresult($result);						$sql = 'SELECT forum_id, topic_id, post_id, poster_id							FROM ' . POSTS_TABLE . '							WHERE ' . $db->sql_in_set('post_id', $upload_list);						$result = $db->sql_query($sql);						$post_info = array();						while ($row = $db->sql_fetchrow($result))						{							$post_info[$row['post_id']] = $row;						}						$db->sql_freeresult($result);						// Select those attachments we want to change...						$sql = 'SELECT *							FROM ' . ATTACHMENTS_TABLE . '							WHERE ' . $db->sql_in_set('attach_id', array_keys($upload_list)) . '								AND is_orphan = 1';						$result = $db->sql_query($sql);						$files_added = $space_taken = 0;						while ($row = $db->sql_fetchrow($result))						{							$post_row = $post_info[$upload_list[$row['attach_id']]];							$template->assign_block_vars('upload', array(								'FILE_INFO'		=> sprintf($user->lang['UPLOADING_FILE_TO'], $row['real_filename'], $post_row['post_id']),								'S_DENIED'		=> (!$auth->acl_get('f_attach', $post_row['forum_id'])) ? true : false,								'L_DENIED'		=> (!$auth->acl_get('f_attach', $post_row['forum_id'])) ? sprintf($user->lang['UPLOAD_DENIED_FORUM'], $forum_names[$row['forum_id']]) : '')							);							if (!$auth->acl_get('f_attach', $post_row['forum_id']))							{								continue;							}							// Adjust attachment entry							$sql_ary = array(								'in_message'	=> 0,								'is_orphan'		=> 0,								'poster_id'		=> $post_row['poster_id'],								'post_msg_id'	=> $post_row['post_id'],								'topic_id'		=> $post_row['topic_id'],							);							$sql = 'UPDATE ' . ATTACHMENTS_TABLE . '								SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '								WHERE attach_id = ' . $row['attach_id'];							$db->sql_query($sql);							$sql = 'UPDATE ' . POSTS_TABLE . '								SET post_attachment = 1								WHERE post_id = ' . $post_row['post_id'];							$db->sql_query($sql);							$sql = 'UPDATE ' . TOPICS_TABLE . '								SET topic_attachment = 1								WHERE topic_id = ' . $post_row['topic_id'];							$db->sql_query($sql);							$space_taken += $row['filesize'];							$files_added++;							add_log('admin', 'LOG_ATTACH_FILEUPLOAD', $post_row['post_id'], $row['real_filename']);						}						$db->sql_freeresult($result);						if ($files_added)						{							set_config_count('upload_dir_size', $space_taken, true);							set_config_count('num_files', $files_added, true);						}					}				}				$template->assign_vars(array(					'S_ORPHAN'		=> true)				);				// Just get the files with is_orphan set and older than 3 hours				$sql = 'SELECT *					FROM ' . ATTACHMENTS_TABLE . '					WHERE is_orphan = 1						AND filetime < ' . (time() - 3*60*60) . '					ORDER BY filetime DESC';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$template->assign_block_vars('orphan', array(						'FILESIZE'			=> get_formatted_filesize($row['filesize']),						'FILETIME'			=> $user->format_date($row['filetime']),						'REAL_FILENAME'		=> utf8_basename($row['real_filename']),						'PHYSICAL_FILENAME'	=> utf8_basename($row['physical_filename']),						'ATTACH_ID'			=> $row['attach_id'],						'POST_IDS'			=> (!empty($post_ids[$row['attach_id']])) ? $post_ids[$row['attach_id']] : '',						'U_FILE'			=> append_sid($phpbb_root_path . 'download/file.' . $phpEx, 'mode=view&amp;id=' . $row['attach_id']))					);				}				$db->sql_freeresult($result);			break;		}		if (sizeof($error))		{			$template->assign_vars(array(				'S_WARNING'		=> true,				'WARNING_MSG'	=> implode('<br />', $error))			);		}		if (sizeof($notify))		{			$template->assign_vars(array(				'S_NOTIFY'		=> true,				'NOTIFY_MSG'	=> implode('<br />', $notify))			);		}	}	/**	* Build Select for category items	*/	function category_select($select_name, $group_id = false, $key = '')	{		global $db, $user;		$types = array(			ATTACHMENT_CATEGORY_NONE		=> $user->lang['NO_FILE_CAT'],			ATTACHMENT_CATEGORY_IMAGE		=> $user->lang['CAT_IMAGES'],			ATTACHMENT_CATEGORY_WM			=> $user->lang['CAT_WM_FILES'],			ATTACHMENT_CATEGORY_RM			=> $user->lang['CAT_RM_FILES'],			ATTACHMENT_CATEGORY_FLASH		=> $user->lang['CAT_FLASH_FILES'],			ATTACHMENT_CATEGORY_QUICKTIME	=> $user->lang['CAT_QUICKTIME_FILES'],		);		if ($group_id)		{			$sql = 'SELECT cat_id				FROM ' . EXTENSION_GROUPS_TABLE . '				WHERE group_id = ' . (int) $group_id;			$result = $db->sql_query($sql);			$cat_type = (!($row = $db->sql_fetchrow($result))) ? ATTACHMENT_CATEGORY_NONE : $row['cat_id'];			$db->sql_freeresult($result);		}		else		{			$cat_type = ATTACHMENT_CATEGORY_NONE;		}		$group_select = '<select name="' . $select_name . '"' . (($key) ? ' id="' . $key . '"' : '') . '>';		foreach ($types as $type => $mode)		{			$selected = ($type == $cat_type) ? ' selected="selected"' : '';			$group_select .= '<option value="' . $type . '"' . $selected . '>' . $mode . '</option>';		}		$group_select .= '</select>';		return $group_select;	}	/**	* Extension group select	*/	function group_select($select_name, $default_group = false, $key = '')	{		global $db, $user;		$group_select = '<select name="' . $select_name . '"' . (($key) ? ' id="' . $key . '"' : '') . '>';		$sql = 'SELECT group_id, group_name			FROM ' . EXTENSION_GROUPS_TABLE . '			ORDER BY group_name';		$result = $db->sql_query($sql);		$group_name = array();		while ($row = $db->sql_fetchrow($result))		{			$row['group_name'] = (isset($user->lang['EXT_GROUP_' . $row['group_name']])) ? $user->lang['EXT_GROUP_' . $row['group_name']] : $row['group_name'];			$group_name[] = $row;		}		$db->sql_freeresult($result);		$row['group_id'] = 0;		$row['group_name'] = $user->lang['NOT_ASSIGNED'];		$group_name[] = $row;		for ($i = 0; $i < sizeof($group_name); $i++)		{			if ($default_group === false)			{				$selected = ($i == 0) ? ' selected="selected"' : '';			}			else			{				$selected = ($group_name[$i]['group_id'] == $default_group) ? ' selected="selected"' : '';			}			$group_select .= '<option value="' . $group_name[$i]['group_id'] . '"' . $selected . '>' . $group_name[$i]['group_name'] . '</option>';		}		$group_select .= '</select>';		return $group_select;	}	/**	* Search Imagick	*/	function search_imagemagick()	{		$imagick = '';		$exe = ((defined('PHP_OS')) && (preg_match('#^win#i', PHP_OS))) ? '.exe' : '';		$magic_home = getenv('MAGICK_HOME');		if (empty($magic_home))		{			$locations = array('C:/WINDOWS/', 'C:/WINNT/', 'C:/WINDOWS/SYSTEM/', 'C:/WINNT/SYSTEM/', 'C:/WINDOWS/SYSTEM32/', 'C:/WINNT/SYSTEM32/', '/usr/bin/', '/usr/sbin/', '/usr/local/bin/', '/usr/local/sbin/', '/opt/', '/usr/imagemagick/', '/usr/bin/imagemagick/');			$path_locations = str_replace('\\', '/', (explode(($exe) ? ';' : ':', getenv('PATH'))));			$locations = array_merge($path_locations, $locations);			foreach ($locations as $location)			{				// The path might not end properly, fudge it				if (substr($location, -1) !== '/')				{					$location .= '/';				}				if (@file_exists($location) && @is_readable($location . 'mogrify' . $exe) && @filesize($location . 'mogrify' . $exe) > 3000)				{					$imagick = str_replace('\\', '/', $location);					continue;				}			}		}		else		{			$imagick = str_replace('\\', '/', $magic_home);		}		return $imagick;	}	/**	* Test Settings	*/	function test_upload(&$error, $upload_dir, $create_directory = false)	{		global $user, $phpbb_root_path;		// Does the target directory exist, is it a directory and writable.		if ($create_directory)		{			if (!file_exists($phpbb_root_path . $upload_dir))			{				@mkdir($phpbb_root_path . $upload_dir, 0777);				phpbb_chmod($phpbb_root_path . $upload_dir, CHMOD_READ | CHMOD_WRITE);			}		}		if (!file_exists($phpbb_root_path . $upload_dir))		{			$error[] = sprintf($user->lang['NO_UPLOAD_DIR'], $upload_dir);			return;		}		if (!is_dir($phpbb_root_path . $upload_dir))		{			$error[] = sprintf($user->lang['UPLOAD_NOT_DIR'], $upload_dir);			return;		}		if (!phpbb_is_writable($phpbb_root_path . $upload_dir))		{			$error[] = sprintf($user->lang['NO_WRITE_UPLOAD'], $upload_dir);			return;		}	}	/**	* Perform operations on sites for external linking	*/	function perform_site_list()	{		global $db, $user;		if (isset($_REQUEST['securesubmit']))		{			// Grab the list of entries			$ips = request_var('ips', '');			$ip_list = array_unique(explode("\n", $ips));			$ip_list_log = implode(', ', $ip_list);			$ip_exclude = (!empty($_POST['ipexclude'])) ? 1 : 0;			$iplist = array();			$hostlist = array();			foreach ($ip_list as $item)			{				if (preg_match('#^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})[ ]*\-[ ]*([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$#', trim($item), $ip_range_explode))				{					// Don't ask about all this, just don't ask ... !					$ip_1_counter = $ip_range_explode[1];					$ip_1_end = $ip_range_explode[5];					while ($ip_1_counter <= $ip_1_end)					{						$ip_2_counter = ($ip_1_counter == $ip_range_explode[1]) ? $ip_range_explode[2] : 0;						$ip_2_end = ($ip_1_counter < $ip_1_end) ? 254 : $ip_range_explode[6];						if ($ip_2_counter == 0 && $ip_2_end == 254)						{							$ip_2_counter = 256;							$ip_2_fragment = 256;							$iplist[] = "'$ip_1_counter.*'";						}						while ($ip_2_counter <= $ip_2_end)						{							$ip_3_counter = ($ip_2_counter == $ip_range_explode[2] && $ip_1_counter == $ip_range_explode[1]) ? $ip_range_explode[3] : 0;							$ip_3_end = ($ip_2_counter < $ip_2_end || $ip_1_counter < $ip_1_end) ? 254 : $ip_range_explode[7];							if ($ip_3_counter == 0 && $ip_3_end == 254)							{								$ip_3_counter = 256;								$ip_3_fragment = 256;								$iplist[] = "'$ip_1_counter.$ip_2_counter.*'";							}							while ($ip_3_counter <= $ip_3_end)							{								$ip_4_counter = ($ip_3_counter == $ip_range_explode[3] && $ip_2_counter == $ip_range_explode[2] && $ip_1_counter == $ip_range_explode[1]) ? $ip_range_explode[4] : 0;								$ip_4_end = ($ip_3_counter < $ip_3_end || $ip_2_counter < $ip_2_end) ? 254 : $ip_range_explode[8];								if ($ip_4_counter == 0 && $ip_4_end == 254)								{									$ip_4_counter = 256;									$ip_4_fragment = 256;									$iplist[] = "'$ip_1_counter.$ip_2_counter.$ip_3_counter.*'";								}								while ($ip_4_counter <= $ip_4_end)								{									$iplist[] = "'$ip_1_counter.$ip_2_counter.$ip_3_counter.$ip_4_counter'";									$ip_4_counter++;								}								$ip_3_counter++;							}							$ip_2_counter++;						}						$ip_1_counter++;					}				}				else if (preg_match('#^([0-9]{1,3})\.([0-9\*]{1,3})\.([0-9\*]{1,3})\.([0-9\*]{1,3})$#', trim($item)) || preg_match('#^[a-f0-9:]+\*?$#i', trim($item)))				{					$iplist[] = "'" . trim($item) . "'";				}				else if (preg_match('#^([\w\-_]\.?){2,}$#is', trim($item)))				{					$hostlist[] = "'" . trim($item) . "'";				}				else if (preg_match("#^([a-z0-9\-\*\._/]+?)$#is", trim($item)))				{					$hostlist[] = "'" . trim($item) . "'";				}			}			$sql = 'SELECT site_ip, site_hostname				FROM ' . SITELIST_TABLE . "				WHERE ip_exclude = $ip_exclude";			$result = $db->sql_query($sql);			if ($row = $db->sql_fetchrow($result))			{				$iplist_tmp = array();				$hostlist_tmp = array();				do				{					if ($row['site_ip'])					{						if (strlen($row['site_ip']) > 40)						{							continue;						}						$iplist_tmp[] = "'" . $row['site_ip'] . "'";					}					else if ($row['site_hostname'])					{						if (strlen($row['site_hostname']) > 255)						{							continue;						}						$hostlist_tmp[] = "'" . $row['site_hostname'] . "'";					}					// break;				}				while ($row = $db->sql_fetchrow($result));				$iplist = array_unique(array_diff($iplist, $iplist_tmp));				$hostlist = array_unique(array_diff($hostlist, $hostlist_tmp));				unset($iplist_tmp);				unset($hostlist_tmp);			}			$db->sql_freeresult($result);			if (sizeof($iplist))			{				foreach ($iplist as $ip_entry)				{					$sql = 'INSERT INTO ' . SITELIST_TABLE . " (site_ip, ip_exclude)						VALUES ($ip_entry, $ip_exclude)";					$db->sql_query($sql);				}			}			if (sizeof($hostlist))			{				foreach ($hostlist as $host_entry)				{					$sql = 'INSERT INTO ' . SITELIST_TABLE . " (site_hostname, ip_exclude)						VALUES ($host_entry, $ip_exclude)";					$db->sql_query($sql);				}			}			if (!empty($ip_list_log))			{				// Update log				$log_entry = ($ip_exclude) ? 'LOG_DOWNLOAD_EXCLUDE_IP' : 'LOG_DOWNLOAD_IP';				add_log('admin', $log_entry, $ip_list_log);			}			trigger_error($user->lang['SECURE_DOWNLOAD_UPDATE_SUCCESS'] . adm_back_link($this->u_action));		}		else if (isset($_POST['unsecuresubmit']))		{			$unip_sql = request_var('unip', array(0));			if (sizeof($unip_sql))			{				$l_unip_list = '';				// Grab details of ips for logging information later				$sql = 'SELECT site_ip, site_hostname					FROM ' . SITELIST_TABLE . '					WHERE ' . $db->sql_in_set('site_id', $unip_sql);				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$l_unip_list .= (($l_unip_list != '') ? ', ' : '') . (($row['site_ip']) ? $row['site_ip'] : $row['site_hostname']);				}				$db->sql_freeresult($result);				$sql = 'DELETE FROM ' . SITELIST_TABLE . '					WHERE ' . $db->sql_in_set('site_id', $unip_sql);				$db->sql_query($sql);				add_log('admin', 'LOG_DOWNLOAD_REMOVE_IP', $l_unip_list);			}			trigger_error($user->lang['SECURE_DOWNLOAD_UPDATE_SUCCESS'] . adm_back_link($this->u_action));		}	}	/**	* Write display_order config field	*/	function display_order($value, $key = '')	{		$radio_ary = array(0 => 'DESCENDING', 1 => 'ASCENDING');		return h_radio('config[display_order]', $radio_ary, $value, $key);	}	/**	* Adjust all three max_filesize config vars for display	*/	function max_filesize($value, $key = '')	{		// Determine size var and adjust the value accordingly		$filesize = get_formatted_filesize($value, false, array('mb', 'kb', 'b'));		$size_var = $filesize['si_identifier'];		$value = $filesize['value'];		return '<input type="text" id="' . $key . '" size="8" maxlength="15" name="config[' . $key . ']" value="' . $value . '" /> <select name="' . $key . '">' . size_select_options($size_var) . '</select>';	}	/**	* Write secure_allow_deny config field	*/	function select_allow_deny($value, $key = '')	{		$radio_ary = array(1 => 'ORDER_ALLOW_DENY', 0 => 'ORDER_DENY_ALLOW');		return h_radio('config[' . $key . ']', $radio_ary, $value, $key);	}}?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** Wave3D CAPTCHA** @author Robert Hetzler* @package VC*/class captcha{	var $width		= 360;	var $height		= 96;	function execute($code, $seed)	{		global $starttime;		// seed the random generator		mt_srand($seed);		// set height and width		$img_x = $this->width;		$img_y = $this->height;		// Generate image		$img	= imagecreatetruecolor($img_x, $img_y);		$x_grid = mt_rand(6, 10);		$y_grid = mt_rand(6, 10);		// Ok, so lets cut to the chase. We could accurately represent this in 3d and		// do all the appropriate linear transforms. my questions is... why bother?		// The computational overhead is unnecessary when you consider the simple fact:		// we're not here to accurately represent a model, but to just show off some random-ish		// polygons		// Conceive of 3 spaces.		// 1) planar-space (discrete "pixel" grid)		// 2) 3-space. (planar-space with z/height aspect)		// 3) image space (pixels on the screen)		// resolution of the planar-space we're embedding the text code in		$plane_x	= 100;		$plane_y	= 30;		$subdivision_factor = 3;		// $box is the 4 points in img_space that correspond to the corners of the plane in 3-space		$box = array(			'upper_left'	=> array(				'x' => mt_rand(5, 15),				'y' => mt_rand(10, 15)			),			'upper_right'	=> array(				'x' => mt_rand($img_x - 35, $img_x - 19),				'y' => mt_rand(10, 17)			),			'lower_left'	=> array(				'x' => mt_rand($img_x - 45, $img_x - 5),				'y' => mt_rand($img_y - 15, $img_y - 0),			),		);		$box['lower_right'] = array(			'x' => $box['lower_left']['x'] + $box['upper_left']['x'] - $box['upper_right']['x'],			'y' => $box['lower_left']['y'] + $box['upper_left']['y'] - $box['upper_right']['y'],		);		// TODO		$background = imagecolorallocate($img, mt_rand(155, 255), mt_rand(155, 255), mt_rand(155, 255));		imagefill($img, 0, 0, $background);		$black = imagecolorallocate($img, 0, 0, 0);		$random = array();		$fontcolors = array();		for ($i = 0; $i < 15; ++$i)		{			$random[$i] = imagecolorallocate($img, mt_rand(120, 255), mt_rand(120, 255), mt_rand(120, 255));		}		$fontcolors[0] = imagecolorallocate($img, mt_rand(0, 120), mt_rand(0, 120), mt_rand(0, 120)); 		$colors = array();		$minr = mt_rand(20, 30);		$ming = mt_rand(20, 30);		$minb = mt_rand(20, 30);		$maxr = mt_rand(150, 230);		$maxg = mt_rand(150, 230);		$maxb = mt_rand(150, 230);		for ($i = -30; $i <= 30; ++$i)		{			$coeff1 = ($i + 12) / 45;			$coeff2 = 1 - $coeff1;			$colors[$i] = imagecolorallocate($img, ($coeff2 * $maxr) + ($coeff1 * $minr), ($coeff2 * $maxg) + ($coeff1 * $ming), ($coeff2 * $maxb) + ($coeff1 * $minb));		}		// $img_buffer is the last row of 3-space positions (converted to img-space), cached		// (using this means we don't need to recalculate all 4 positions for each new polygon,		// merely the newest point that we're adding, which is then cached.		$img_buffer = array(array(), array());		// In image-space, the x- and y-offset necessary to move one unit in the x-direction in planar-space		$dxx = ($box['upper_right']['x'] - $box['upper_left']['x']) / ($subdivision_factor * $plane_x);		$dxy = ($box['upper_right']['y'] - $box['upper_left']['y']) / ($subdivision_factor * $plane_x);		// In image-space, the x- and y-offset necessary to move one unit in the y-direction in planar-space		$dyx = ($box['lower_right']['x'] - $box['upper_left']['x']) / ($subdivision_factor * $plane_y);		$dyy = ($box['lower_right']['y'] - $box['upper_left']['y']) / ($subdivision_factor * $plane_y);		// Initial captcha-letter offset in planar-space		$plane_offset_x = mt_rand(3, 8);		$plane_offset_y = mt_rand( 12, 15);		// character map		$map = $this->captcha_bitmaps();		// matrix		$plane = array();		// for each character, we'll silkscreen it into our boolean pixel plane		for ($c = 0, $code_num = strlen($code); $c < $code_num; ++$c)		{			$letter = $code[$c];			for ($x = $map['width'] - 1; $x >= 0; --$x)			{				for ($y = $map['height'] - 1; $y >= 0; --$y)				{					if ($map['data'][$letter][$y][$x])					{						$plane[$y + $plane_offset_y + (($c & 1) ? 1 : -1)][$x + $plane_offset_x] = true;					}				}			}			$plane_offset_x += 11;		}		// calculate our first buffer, we can't actually draw polys with these yet		// img_pos_prev == screen x,y location to our immediate left.		// img_pos_cur == current screen x,y location		// we calculate screen position of our		// current cell based on the difference from the previous cell		// rather than recalculating from absolute coordinates		// What we cache into the $img_buffer contains the raised text coordinates.		$img_pos_prev	= $img_buffer[0][0] = array($box['upper_left']['x'], $box['upper_left']['y']);		$cur_height		= $prev_height = $this->wave_height(0, 0, $subdivision_factor);		$full_x			= $plane_x * $subdivision_factor;		$full_y			= $plane_y * $subdivision_factor;		for ($x = 1; $x <= $full_x; ++$x)		{			$cur_height		= $this->wave_height($x, 0, $subdivision_factor);			$offset			= $cur_height - $prev_height;			$img_pos_cur	= array($img_pos_prev[0] + $dxx, $img_pos_prev[1] + $dxy + $offset);			$img_buffer[0][$x]	= $img_pos_cur;			$img_pos_prev		= $img_pos_cur;			$prev_height		= $cur_height;		}		for ($y = 1; $y <= $full_y; ++$y)		{			// swap buffers			$buffer_cur		= $y & 1;			$buffer_prev	= 1 - $buffer_cur;			$prev_height	= $this->wave_height(0, $y, $subdivision_factor);			$offset			= $prev_height - $this->wave_height(0, $y - 1, $subdivision_factor);			$img_pos_cur	= array($img_buffer[$buffer_prev][0][0] + $dyx, min($img_buffer[$buffer_prev][0][1] + $dyy + $offset, $img_y - 1));			// make sure we don't try to write off the page			$img_pos_prev	= $img_pos_cur;			$img_buffer[$buffer_cur][0]	= $img_pos_cur;			for ($x = 1; $x <= $full_x; ++$x)			{				$cur_height		= $this->wave_height($x, $y, $subdivision_factor) + $this->grid_height($x, $y, 1, $x_grid, $y_grid);				// height is a z-factor, not a y-factor				$offset			= $cur_height - $prev_height;				$img_pos_cur	= array($img_pos_prev[0] + $dxx, $img_pos_prev[1] + $dxy + $offset);				// height is float, index it to an int, get closest color				$color			= $colors[intval($cur_height)];				$img_pos_prev	= $img_pos_cur;				$prev_height	= $cur_height;				$y_index_old = intval(($y - 1) / $subdivision_factor);				$y_index_new = intval($y / $subdivision_factor);				$x_index_old = intval(($x - 1) / $subdivision_factor);				$x_index_new = intval($x / $subdivision_factor);				if (!empty($plane[$y_index_new][$x_index_new]))				{					$img_pos_cur[1]	+= $this->wave_height($x, $y, $subdivision_factor, 1) - 30 - $cur_height;					$color			= $colors[20];				}				$img_pos_cur[1] = min($img_pos_cur[1], $img_y - 1);				$img_buffer[$buffer_cur][$x] = $img_pos_cur;				// Smooth the edges as much as possible by having not more than one low<->high traingle per square				// Otherwise, just				$diag_down	= (empty($plane[$y_index_old][$x_index_old]) == empty($plane[$y_index_new][$x_index_new]));				$diag_up	= (empty($plane[$y_index_old][$x_index_new]) == empty($plane[$y_index_new][$x_index_old]));				// natural switching				$mode = ($x + $y) & 1;				// override if it requires it				if ($diag_down != $diag_up)				{					$mode = $diag_up;				}				if ($mode)				{					//		+-/			  /					// 1	|/		2	 /|					//		/			/-+					$poly1 = array_merge($img_buffer[$buffer_cur][$x - 1], $img_buffer[$buffer_prev][$x - 1], $img_buffer[$buffer_prev][$x]);					$poly2 = array_merge($img_buffer[$buffer_cur][$x - 1], $img_buffer[$buffer_cur][$x], $img_buffer[$buffer_prev][$x]);				}				else				{					//		\			\-+					// 1	|\		2	 \|					//		+-\			  \					$poly1 = array_merge($img_buffer[$buffer_cur][$x - 1], $img_buffer[$buffer_prev][$x - 1], $img_buffer[$buffer_cur][$x]);					$poly2 = array_merge($img_buffer[$buffer_prev][$x - 1], $img_buffer[$buffer_prev][$x], $img_buffer[$buffer_cur][$x]);				}				imagefilledpolygon($img, $poly1, 3, $color);				imagefilledpolygon($img, $poly2, 3, $color);			}		}		// Output image		header('Content-Type: image/png');		header('Cache-control: no-cache, no-store');		//$mtime = explode(' ', microtime());		//$totaltime = $mtime[0] + $mtime[1] - $starttime;		//echo $totaltime . "<br />\n";		//echo memory_get_usage() - $tmp;		imagepng($img);		imagedestroy($img);	}	function wave_height($x, $y, $factor = 1, $tweak = 0.7)	{		// stretch the wave. TODO: pretty it up		$x = $x/5 + 180;		$y = $y/4;		return ((sin($x / (3 * $factor)) + sin($y / (3 * $factor))) * 10 * $tweak);	}	function grid_height($x, $y, $factor = 1, $x_grid, $y_grid)	{		return ((!($x % ($x_grid * $factor)) || !($y % ($y_grid * $factor))) ? 3 : 0);	}	function captcha_bitmaps()	{		return array(			'width'		=> 9,			'height'	=> 13,			'data'		=> array(				'A' => array(					array(0,0,1,1,1,1,0,0,0),					array(0,1,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,1,1,1,1,1,1,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,0,0),				),				'B' => array(					array(1,1,1,1,1,1,0,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,1,0,0),					array(1,1,1,1,1,1,0,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,1,0,0),					array(1,1,1,1,1,1,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'C' => array(					array(0,0,1,1,1,1,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'D' => array(					array(1,1,1,1,1,1,1,0,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,1,0),					array(1,1,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'E' => array(					array(0,0,1,1,1,1,1,1,1),					array(0,1,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,1,1,1,1,1,1,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(0,1,0,0,0,0,0,0,0),					array(0,0,1,1,1,1,1,1,1),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'F' => array(					array(0,0,1,1,1,1,1,1,0),					array(0,1,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,1,1,1,1,1,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'G' => array(					array(0,0,1,1,1,1,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,1,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'H' => array(					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,1,1,1,1,1,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'I' => array(					array(0,1,1,1,1,1,1,1,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,1,1,1,1,1,1,1,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'J' => array(					array(0,0,0,0,0,0,1,1,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,0,1),					array(0,0,1,0,0,0,0,1,0),					array(0,0,0,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'K' => array(					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,1,0,0,0),					array(1,0,0,0,1,0,0,0,0),					array(1,0,0,1,0,0,0,0,0),					array(1,0,1,0,0,0,0,0,0),					array(1,1,0,0,0,0,0,0,0),					array(1,0,1,0,0,0,0,0,0),					array(1,0,0,1,0,0,0,0,0),					array(1,0,0,0,1,0,0,0,0),					array(1,0,0,0,0,1,0,0,0),					array(1,0,0,0,0,0,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'L' => array(					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(0,1,0,0,0,0,0,0,0),					array(0,0,1,1,1,1,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'M' => array(					array(0,1,0,0,0,0,0,1,0),					array(0,1,1,0,0,0,1,1,0),					array(0,1,0,1,0,1,0,1,0),					array(0,1,0,0,1,0,0,1,0),					array(0,1,0,0,0,0,0,1,0),					array(0,1,0,0,0,0,0,1,0),					array(0,1,0,0,0,0,0,1,0),					array(0,1,0,0,0,0,0,1,0),					array(0,1,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'N' => array(					array(1,0,0,0,0,0,0,0,1),					array(1,1,0,0,0,0,0,0,1),					array(1,0,1,0,0,0,0,0,1),					array(1,0,0,1,0,0,0,0,1),					array(1,0,0,0,1,0,0,0,1),					array(1,0,0,0,0,1,0,0,1),					array(1,0,0,0,0,0,1,0,1),					array(1,0,0,0,0,0,0,1,1),					array(1,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'O' => array(					array(0,0,0,1,1,1,0,0,0),					array(0,0,1,0,0,0,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,0,0,0,1,0,0),					array(0,0,0,1,1,1,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'P' => array(					array(1,1,1,1,1,1,0,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,1,0,0),					array(1,1,1,1,1,1,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'Q' => array(					array(0,0,1,1,1,1,0,0,0),					array(0,1,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,1,0,0,1,0),					array(1,0,0,0,0,1,0,1,0),					array(0,1,0,0,0,0,1,0,0),					array(0,0,1,1,1,1,0,1,0),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'R' => array(					array(1,1,1,1,1,1,0,0,0),					array(1,0,0,0,0,0,1,0,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,1,0,0),					array(1,1,1,1,1,1,0,0,0),					array(1,0,1,0,0,0,0,0,0),					array(1,0,0,1,0,0,0,0,0),					array(1,0,0,0,1,0,0,0,0),					array(1,0,0,0,0,1,0,0,0),					array(1,0,0,0,0,0,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'S' => array(					array(0,0,1,1,1,1,1,1,1),					array(0,1,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(0,1,0,0,0,0,0,0,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,1,0),					array(1,1,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'T' => array(					array(1,1,1,1,1,1,1,1,1),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'U' => array(					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'V' => array(					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,0,0,0,1,0,0),					array(0,0,0,1,0,1,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'W' => array(					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,1,0,0,0,1),					array(1,0,0,1,0,1,0,0,1),					array(1,0,1,0,0,0,1,0,1),					array(1,1,0,0,0,0,0,1,1),					array(1,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'X' => array(					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,0,0,0,1,0,0),					array(0,0,0,1,0,1,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,1,0,1,0,0,0),					array(0,0,1,0,0,0,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'Y' => array(					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,0,0,0,1,0,0),					array(0,0,0,1,0,1,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'Z' => array(					array(1,1,1,1,1,1,1,1,1),					array(1,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,1,0,0),					array(0,0,0,0,0,1,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,1,0,0,0,0,0),					array(0,0,1,0,0,0,0,0,0),					array(0,1,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,1),					array(1,1,1,1,1,1,1,1,1),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'1' => array(					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,1,1,0,0,0,0),					array(0,0,1,0,1,0,0,0,0),					array(0,1,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,1,1,1,1,1,1,1,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'2' => array(					array(0,0,0,1,1,1,0,0,0),					array(0,0,1,0,0,0,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,1,0,0),					array(0,0,0,0,0,1,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,1,0,0,0,0,0),					array(0,0,1,0,0,0,0,0,0),					array(0,1,1,1,1,1,1,1,1),					array(0,0,0,0,0,0,0,0,0),				),				'3' => array(					array(0,0,0,1,1,1,1,0,0),					array(0,0,1,0,0,0,0,1,0),					array(0,1,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,1,1,0,0),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,0,1),					array(0,0,1,0,0,0,0,1,0),					array(0,0,0,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'4' => array(					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,1,1,0),					array(0,0,0,0,0,1,0,1,0),					array(0,0,0,0,1,0,0,1,0),					array(0,0,0,1,0,0,0,1,0),					array(0,0,1,0,0,0,0,1,0),					array(0,1,1,1,1,1,1,1,1),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'5' => array(					array(1,1,1,1,1,1,1,1,1),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(0,1,0,0,0,0,0,0,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'6' => array(					array(0,0,1,1,1,1,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,0,0,0,0,0,0),					array(1,0,0,1,1,1,1,0,0),					array(1,0,1,0,0,0,0,1,0),					array(1,1,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'7' => array(					array(1,1,1,1,1,1,1,1,1),					array(1,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,1,0),					array(0,0,0,0,0,0,1,0,0),					array(0,0,0,0,0,1,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,1,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'8' => array(					array(0,0,1,1,1,1,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,1,1,1,1,0,0),					array(0,1,0,0,0,0,0,1,0),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(1,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,0),					array(0,0,1,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),				),				'9' => array(					array(0,0,0,1,1,1,1,0,0),					array(0,0,1,0,0,0,0,1,0),					array(0,1,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,1,1),					array(0,0,1,1,1,1,1,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,0,0,0,0,0,0,0,1),					array(0,1,0,0,0,0,0,0,1),					array(0,0,1,0,0,0,0,1,0),					array(0,0,0,1,1,1,1,0,0),					array(0,0,0,0,0,0,0,0,0),					array(0,0,0,0,0,0,0,0,0),				),			)		);	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Transfer class, wrapper for ftp/sftp/ssh* @package phpBB3*/class transfer{	var $connection;	var $host;	var $port;	var $username;	var $password;	var $timeout;	var $root_path;	var $tmp_path;	var $file_perms;	var $dir_perms;	/**	* Constructor - init some basic values	*/	function transfer()	{		global $phpbb_root_path;		$this->file_perms	= 0644;		$this->dir_perms	= 0777;		// We use the store directory as temporary path to circumvent open basedir restrictions		$this->tmp_path = $phpbb_root_path . 'store/';	}	/**	* Write file to location	*/	function write_file($destination_file = '', $contents = '')	{		global $phpbb_root_path;		$destination_file = $this->root_path . str_replace($phpbb_root_path, '', $destination_file);		// need to create a temp file and then move that temp file.		// ftp functions can only move files around and can't create.		// This means that the users will need to have access to write		// temporary files or have write access on a folder within phpBB		// like the cache folder. If the user can't do either, then		// he/she needs to use the fsock ftp method		$temp_name = tempnam($this->tmp_path, 'transfer_');		@unlink($temp_name);		$fp = @fopen($temp_name, 'w');		if (!$fp)		{			trigger_error('Unable to create temporary file ' . $temp_name, E_USER_ERROR);		}		@fwrite($fp, $contents);		@fclose($fp);		$result = $this->overwrite_file($temp_name, $destination_file);		// remove temporary file now		@unlink($temp_name);		return $result;	}	/**	* Moving file into location. If the destination file already exists it gets overwritten	*/	function overwrite_file($source_file, $destination_file)	{		/**		* @todo generally think about overwriting files in another way, by creating a temporary file and then renaming it		* @todo check for the destination file existance too		*/		$this->_delete($destination_file);		$result = $this->_put($source_file, $destination_file);		$this->_chmod($destination_file, $this->file_perms);		return $result;	}	/**	* Create directory structure	*/	function make_dir($dir)	{		global $phpbb_root_path;		$dir = str_replace($phpbb_root_path, '', $dir);		$dir = explode('/', $dir);		$dirs = '';		for ($i = 0, $total = sizeof($dir); $i < $total; $i++)		{			$result = true;			if (strpos($dir[$i], '.') === 0)			{				continue;			}			$cur_dir = $dir[$i] . '/';			if (!file_exists($phpbb_root_path . $dirs . $cur_dir))			{				// create the directory				$result = $this->_mkdir($dir[$i]);				$this->_chmod($dir[$i], $this->dir_perms);			}			$this->_chdir($this->root_path . $dirs . $dir[$i]);			$dirs .= $cur_dir;		}		$this->_chdir($this->root_path);		/**		* @todo stack result into array to make sure every path creation has been taken care of		*/		return $result;	}	/**	* Copy file from source location to destination location	*/	function copy_file($from_loc, $to_loc)	{		global $phpbb_root_path;		$from_loc = ((strpos($from_loc, $phpbb_root_path) !== 0) ? $phpbb_root_path : '') . $from_loc;		$to_loc = $this->root_path . str_replace($phpbb_root_path, '', $to_loc);		if (!file_exists($from_loc))		{			return false;		}		$result = $this->overwrite_file($from_loc, $to_loc);		return $result;	}	/**	* Remove file	*/	function delete_file($file)	{		global $phpbb_root_path;		$file = $this->root_path . str_replace($phpbb_root_path, '', $file);		return $this->_delete($file);	}	/**	* Remove directory	* @todo remove child directories?	*/	function remove_dir($dir)	{		global $phpbb_root_path;		$dir = $this->root_path . str_replace($phpbb_root_path, '', $dir);		return $this->_rmdir($dir);	}	/**	* Rename a file or folder	*/	function rename($old_handle, $new_handle)	{		global $phpbb_root_path;		$old_handle = $this->root_path . str_replace($phpbb_root_path, '', $old_handle);		return $this->_rename($old_handle, $new_handle);	}	/**	* Check if a specified file exist...	*/	function file_exists($directory, $filename)	{		global $phpbb_root_path;		$directory = $this->root_path . str_replace($phpbb_root_path, '', $directory);		$this->_chdir($directory);		$result = $this->_ls();		if ($result !== false && is_array($result))		{			return (in_array($filename, $result)) ? true : false;		}		return false;	}	/**	* Open session	*/	function open_session()	{		return $this->_init();	}	/**	* Close current session	*/	function close_session()	{		return $this->_close();	}	/**	* Determine methods able to be used	*/	function methods()	{		$methods = array();		$disabled_functions = explode(',', @ini_get('disable_functions'));		if (@extension_loaded('ftp'))		{			$methods[] = 'ftp';		}		if (!in_array('fsockopen', $disabled_functions))		{			$methods[] = 'ftp_fsock';		}		return $methods;	}}/*** FTP transfer class* @package phpBB3*/class ftp extends transfer{	/**	* Standard parameters for FTP session	*/	function ftp($host, $username, $password, $root_path, $port = 21, $timeout = 10)	{		$this->host			= $host;		$this->port			= $port;		$this->username		= $username;		$this->password		= $password;		$this->timeout		= $timeout;		// Make sure $this->root_path is layed out the same way as the $user->page['root_script_path'] value (/ at the end)		$this->root_path	= str_replace('\\', '/', $this->root_path);		if (!empty($root_path))		{			$this->root_path = (($root_path[0] != '/' ) ? '/' : '') . $root_path . ((substr($root_path, -1, 1) == '/') ? '' : '/');		}		// Init some needed values		transfer::transfer();		return;	}	/**	* Requests data	*/	function data()	{		global $user;		return array(			'host'		=> 'localhost',			'username'	=> 'anonymous',			'password'	=> '',			'root_path'	=> $user->page['root_script_path'],			'port'		=> 21,			'timeout'	=> 10		);	}	/**	* Init FTP Session	* @access private	*/	function _init()	{		// connect to the server		$this->connection = @ftp_connect($this->host, $this->port, $this->timeout);		if (!$this->connection)		{			return 'ERR_CONNECTING_SERVER';		}		// login to the server		if (!@ftp_login($this->connection, $this->username, $this->password))		{			return 'ERR_UNABLE_TO_LOGIN';		}		// attempt to turn pasv mode on		@ftp_pasv($this->connection, true);		// change to the root directory		if (!$this->_chdir($this->root_path))		{			return 'ERR_CHANGING_DIRECTORY';		}		return true;	}	/**	* Create Directory (MKDIR)	* @access private	*/	function _mkdir($dir)	{		return @ftp_mkdir($this->connection, $dir);	}	/**	* Remove directory (RMDIR)	* @access private	*/	function _rmdir($dir)	{		return @ftp_rmdir($this->connection, $dir);	}	/**	* Rename file	* @access private	*/	function _rename($old_handle, $new_handle)	{		return @ftp_rename($this->connection, $old_handle, $new_handle);	}	/**	* Change current working directory (CHDIR)	* @access private	*/	function _chdir($dir = '')	{		if ($dir && $dir !== '/')		{			if (substr($dir, -1, 1) == '/')			{				$dir = substr($dir, 0, -1);			}		}		return @ftp_chdir($this->connection, $dir);	}	/**	* change file permissions (CHMOD)	* @access private	*/	function _chmod($file, $perms)	{		if (function_exists('ftp_chmod'))		{			$err = @ftp_chmod($this->connection, $perms, $file);		}		else		{			// Unfortunatly CHMOD is not expecting an octal value...			// We need to transform the integer (which was an octal) to an octal representation (to get the int) and then pass as is. ;)			$chmod_cmd = 'CHMOD ' . base_convert($perms, 10, 8) . ' ' . $file;			$err = $this->_site($chmod_cmd);		}		return $err;	}	/**	* Upload file to location (PUT)	* @access private	*/	function _put($from_file, $to_file)	{		// get the file extension		$file_extension = strtolower(substr(strrchr($to_file, '.'), 1));		// We only use the BINARY file mode to cicumvent rewrite actions from ftp server (mostly linefeeds being replaced)		$mode = FTP_BINARY;		$to_dir = dirname($to_file);		$to_file = basename($to_file);		$this->_chdir($to_dir);		$result = @ftp_put($this->connection, $to_file, $from_file, $mode);		$this->_chdir($this->root_path);		return $result;	}	/**	* Delete file (DELETE)	* @access private	*/	function _delete($file)	{		return @ftp_delete($this->connection, $file);	}	/**	* Close ftp session (CLOSE)	* @access private	*/	function _close()	{		if (!$this->connection)		{			return false;		}		return @ftp_quit($this->connection);	}	/**	* Return current working directory (CWD)	* At the moment not used by parent class	* @access private	*/	function _cwd()	{		return @ftp_pwd($this->connection);	}	/**	* Return list of files in a given directory (LS)	* @access private	*/	function _ls($dir = './')	{		$list = @ftp_nlist($this->connection, $dir);		// See bug #46295 - Some FTP daemons don't like './'		if ($dir === './')		{			// Let's try some alternatives			$list = (empty($list)) ? @ftp_nlist($this->connection, '.') : $list;			$list = (empty($list)) ? @ftp_nlist($this->connection, '') : $list;		}		// Return on error		if ($list === false)		{			return false;		}		// Remove path if prepended		foreach ($list as $key => $item)		{			// Use same separator for item and dir			$item = str_replace('\\', '/', $item);			$dir = str_replace('\\', '/', $dir);			if (!empty($dir) && strpos($item, $dir) === 0)			{				$item = substr($item, strlen($dir));			}			$list[$key] = $item;		}		return $list;	}	/**	* FTP SITE command (ftp-only function)	* @access private	*/	function _site($command)	{		return @ftp_site($this->connection, $command);	}}/*** FTP fsock transfer class** @author wGEric* @package phpBB3*/class ftp_fsock extends transfer{	var $data_connection;	/**	* Standard parameters for FTP session	*/	function ftp_fsock($host, $username, $password, $root_path, $port = 21, $timeout = 10)	{		$this->host			= $host;		$this->port			= $port;		$this->username		= $username;		$this->password		= $password;		$this->timeout		= $timeout;		// Make sure $this->root_path is layed out the same way as the $user->page['root_script_path'] value (/ at the end)		$this->root_path	= str_replace('\\', '/', $this->root_path);		if (!empty($root_path))		{			$this->root_path = (($root_path[0] != '/' ) ? '/' : '') . $root_path . ((substr($root_path, -1, 1) == '/') ? '' : '/');		}		// Init some needed values		transfer::transfer();		return;	}	/**	* Requests data	*/	function data()	{		global $user;		return array(			'host'		=> 'localhost',			'username'	=> 'anonymous',			'password'	=> '',			'root_path'	=> $user->page['root_script_path'],			'port'		=> 21,			'timeout'	=> 10		);	}	/**	* Init FTP Session	* @access private	*/	function _init()	{		$errno = 0;		$errstr = '';		// connect to the server		$this->connection = @fsockopen($this->host, $this->port, $errno, $errstr, $this->timeout);		if (!$this->connection || !$this->_check_command())		{			return 'ERR_CONNECTING_SERVER';		}		@stream_set_timeout($this->connection, $this->timeout);		// login		if (!$this->_send_command('USER', $this->username))		{			return 'ERR_UNABLE_TO_LOGIN';		}		if (!$this->_send_command('PASS', $this->password))		{			return 'ERR_UNABLE_TO_LOGIN';		}		// change to the root directory		if (!$this->_chdir($this->root_path))		{			return 'ERR_CHANGING_DIRECTORY';		}		return true;	}	/**	* Create Directory (MKDIR)	* @access private	*/	function _mkdir($dir)	{		return $this->_send_command('MKD', $dir);	}	/**	* Remove directory (RMDIR)	* @access private	*/	function _rmdir($dir)	{		return $this->_send_command('RMD', $dir);	}	/**	* Rename File	* @access private	*/	function _rename($old_handle, $new_handle)	{		$this->_send_command('RNFR', $old_handle);		return $this->_send_command('RNTO', $new_handle);	}	/**	* Change current working directory (CHDIR)	* @access private	*/	function _chdir($dir = '')	{		if ($dir && $dir !== '/')		{			if (substr($dir, -1, 1) == '/')			{				$dir = substr($dir, 0, -1);			}		}		return $this->_send_command('CWD', $dir);	}	/**	* change file permissions (CHMOD)	* @access private	*/	function _chmod($file, $perms)	{		// Unfortunatly CHMOD is not expecting an octal value...		// We need to transform the integer (which was an octal) to an octal representation (to get the int) and then pass as is. ;)		return $this->_send_command('SITE CHMOD', base_convert($perms, 10, 8) . ' ' . $file);	}	/**	* Upload file to location (PUT)	* @access private	*/	function _put($from_file, $to_file)	{		// We only use the BINARY file mode to cicumvent rewrite actions from ftp server (mostly linefeeds being replaced)		// 'I' == BINARY		// 'A' == ASCII		if (!$this->_send_command('TYPE', 'I'))		{			return false;		}		// open the connection to send file over		if (!$this->_open_data_connection())		{			return false;		}		$this->_send_command('STOR', $to_file, false);		// send the file		$fp = @fopen($from_file, 'rb');		while (!@feof($fp))		{			@fwrite($this->data_connection, @fread($fp, 4096));		}		@fclose($fp);		// close connection		$this->_close_data_connection();		return $this->_check_command();	}	/**	* Delete file (DELETE)	* @access private	*/	function _delete($file)	{		return $this->_send_command('DELE', $file);	}	/**	* Close ftp session (CLOSE)	* @access private	*/	function _close()	{		if (!$this->connection)		{			return false;		}		return $this->_send_command('QUIT');	}	/**	* Return current working directory (CWD)	* At the moment not used by parent class	* @access private	*/	function _cwd()	{		$this->_send_command('PWD', '', false);		return preg_replace('#^[0-9]{3} "(.+)" .+\r\n#', '\\1', $this->_check_command(true));	}	/**	* Return list of files in a given directory (LS)	* @access private	*/	function _ls($dir = './')	{		if (!$this->_open_data_connection())		{			return false;		}		$this->_send_command('NLST', $dir);		$list = array();		while (!@feof($this->data_connection))		{			$filename = preg_replace('#[\r\n]#', '', @fgets($this->data_connection, 512));			if ($filename !== '')			{				$list[] = $filename;			}		}		$this->_close_data_connection();		// Clear buffer		$this->_check_command();		// See bug #46295 - Some FTP daemons don't like './'		if ($dir === './' && empty($list))		{			// Let's try some alternatives			$list = $this->_ls('.');			if (empty($list))			{				$list = $this->_ls('');			}			return $list;		}		// Remove path if prepended		foreach ($list as $key => $item)		{			// Use same separator for item and dir			$item = str_replace('\\', '/', $item);			$dir = str_replace('\\', '/', $dir);			if (!empty($dir) && strpos($item, $dir) === 0)			{				$item = substr($item, strlen($dir));			}			$list[$key] = $item;		}		return $list;	}	/**	* Send a command to server (FTP fsock only function)	* @access private	*/	function _send_command($command, $args = '', $check = true)	{		if (!empty($args))		{			$command = "$command $args";		}		fwrite($this->connection, $command . "\r\n");		if ($check === true && !$this->_check_command())		{			return false;		}		return true;	}	/**	* Opens a connection to send data (FTP fosck only function)	* @access private	*/	function _open_data_connection()	{		// Try to find out whether we have a IPv4 or IPv6 (control) connection		if (function_exists('stream_socket_get_name'))		{			$socket_name = stream_socket_get_name($this->connection, true);			$server_ip = substr($socket_name, 0, strrpos($socket_name, ':'));		}		if (!isset($server_ip) || preg_match(get_preg_expression('ipv4'), $server_ip))		{			// Passive mode			$this->_send_command('PASV', '', false);			if (!$ip_port = $this->_check_command(true))			{				return false;			}			// open the connection to start sending the file			if (!preg_match('#[0-9]{1,3},[0-9]{1,3},[0-9]{1,3},[0-9]{1,3},[0-9]+,[0-9]+#', $ip_port, $temp))			{				// bad ip and port				return false;			}			$temp = explode(',', $temp[0]);			$server_ip = $temp[0] . '.' . $temp[1] . '.' . $temp[2] . '.' . $temp[3];			$server_port = $temp[4] * 256 + $temp[5];		}		else		{			// Extended Passive Mode - RFC2428			$this->_send_command('EPSV', '', false);			if (!$epsv_response = $this->_check_command(true))			{				return false;			}			// Response looks like "229 Entering Extended Passive Mode (|||12345|)"			// where 12345 is the tcp port for the data connection			if (!preg_match('#\(\|\|\|([0-9]+)\|\)#', $epsv_response, $match))			{				return false;			}			$server_port = (int) $match[1];			// fsockopen expects IPv6 address in square brackets			$server_ip = "[$server_ip]";		}		$errno = 0;		$errstr = '';		if (!$this->data_connection = @fsockopen($server_ip, $server_port, $errno, $errstr, $this->timeout))		{			return false;		}		@stream_set_timeout($this->data_connection, $this->timeout);		return true;	}	/**	* Closes a connection used to send data	* @access private	*/	function _close_data_connection()	{		return @fclose($this->data_connection);	}	/**	* Check to make sure command was successful (FTP fsock only function)	* @access private	*/	function _check_command($return = false)	{		$response = '';		do		{			$result = @fgets($this->connection, 512);			$response .= $result;		}		while (substr($result, 3, 1) !== ' ');		if (!preg_match('#^[123]#', $response))		{			return false;		}		return ($return) ? $response : true;	}}?>
<?php/**** @package search* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @ignore*/define('SEARCH_RESULT_NOT_IN_CACHE', 0);define('SEARCH_RESULT_IN_CACHE', 1);define('SEARCH_RESULT_INCOMPLETE', 2);/*** search_backend* optional base class for search plugins providing simple caching based on ACM* and functions to retrieve ignore_words and synonyms* @package search*/class search_backend{	var $ignore_words = array();	var $match_synonym = array();	var $replace_synonym = array();	function search_backend(&$error)	{		// This class cannot be used as a search plugin		$error = true;	}	/**	* Retrieves a language dependend list of words that should be ignored by the search	*/	function get_ignore_words()	{		if (!sizeof($this->ignore_words))		{			global $user, $phpEx;			$words = array();			if (file_exists("{$user->lang_path}{$user->lang_name}/search_ignore_words.$phpEx"))			{				// include the file containing ignore words				include("{$user->lang_path}{$user->lang_name}/search_ignore_words.$phpEx");			}			$this->ignore_words = $words;			unset($words);		}	}	/**	* Stores a list of synonyms that should be replaced in $this->match_synonym and $this->replace_synonym and caches them	*/	function get_synonyms()	{		if (!sizeof($this->match_synonym))		{			global $user, $phpEx;			$synonyms = array();			if (file_exists("{$user->lang_path}{$user->lang_name}/search_synonyms.$phpEx"))			{				// include the file containing synonyms				include("{$user->lang_path}{$user->lang_name}/search_synonyms.$phpEx");			}			$this->match_synonym = array_keys($synonyms);			$this->replace_synonym = array_values($synonyms);			unset($synonyms);		}	}	/**	* Retrieves cached search results	*	* @param int &$result_count will contain the number of all results for the search (not only for the current page)	* @param array &$id_ary is filled with the ids belonging to the requested page that are stored in the cache	*	* @return int SEARCH_RESULT_NOT_IN_CACHE or SEARCH_RESULT_IN_CACHE or SEARCH_RESULT_INCOMPLETE	*/	function obtain_ids($search_key, &$result_count, &$id_ary, $start, $per_page, $sort_dir)	{		global $cache;		if (!($stored_ids = $cache->get('_search_results_' . $search_key)))		{			// no search results cached for this search_key			return SEARCH_RESULT_NOT_IN_CACHE;		}		else		{			$result_count = $stored_ids[-1];			$reverse_ids = ($stored_ids[-2] != $sort_dir) ? true : false;			$complete = true;			// change the start to the actual end of the current request if the sort direction differs			// from the dirction in the cache and reverse the ids later			if ($reverse_ids)			{				$start = $result_count - $start - $per_page;				// the user requested a page past the last index				if ($start < 0)				{					return SEARCH_RESULT_NOT_IN_CACHE;				}			}			for ($i = $start, $n = $start + $per_page; ($i < $n) && ($i < $result_count); $i++)			{				if (!isset($stored_ids[$i]))				{					$complete = false;				}				else				{					$id_ary[] = $stored_ids[$i];				}			}			unset($stored_ids);			if ($reverse_ids)			{				$id_ary = array_reverse($id_ary);			}			if (!$complete)			{				return SEARCH_RESULT_INCOMPLETE;			}			return SEARCH_RESULT_IN_CACHE;		}	}	/**	* Caches post/topic ids	*	* @param array &$id_ary contains a list of post or topic ids that shall be cached, the first element	* 	must have the absolute index $start in the result set.	*/	function save_ids($search_key, $keywords, $author_ary, $result_count, &$id_ary, $start, $sort_dir)	{		global $cache, $config, $db, $user;		$length = min(sizeof($id_ary), $config['search_block_size']);		// nothing to cache so exit		if (!$length)		{			return;		}		$store_ids = array_slice($id_ary, 0, $length);		// create a new resultset if there is none for this search_key yet		// or add the ids to the existing resultset		if (!($store = $cache->get('_search_results_' . $search_key)))		{			// add the current keywords to the recent searches in the cache which are listed on the search page			if (!empty($keywords) || sizeof($author_ary))			{				$sql = 'SELECT search_time					FROM ' . SEARCH_RESULTS_TABLE . '					WHERE search_key = \'' . $db->sql_escape($search_key) . '\'';				$result = $db->sql_query($sql);				if (!$db->sql_fetchrow($result))				{					$sql_ary = array(						'search_key'		=> $search_key,						'search_time'		=> time(),						'search_keywords'	=> $keywords,						'search_authors'	=> ' ' . implode(' ', $author_ary) . ' '					);					$sql = 'INSERT INTO ' . SEARCH_RESULTS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);					$db->sql_query($sql);				}				$db->sql_freeresult($result);			}			$sql = 'UPDATE ' . USERS_TABLE . '				SET user_last_search = ' . time() . '				WHERE user_id = ' . $user->data['user_id'];			$db->sql_query($sql);			$store = array(-1 => $result_count, -2 => $sort_dir);			$id_range = range($start, $start + $length - 1);		}		else		{			// we use one set of results for both sort directions so we have to calculate the indizes			// for the reversed array and we also have to reverse the ids themselves			if ($store[-2] != $sort_dir)			{				$store_ids = array_reverse($store_ids);				$id_range = range($store[-1] - $start - $length, $store[-1] - $start - 1);			}			else			{				$id_range = range($start, $start + $length - 1);			}		}		$store_ids = array_combine($id_range, $store_ids);		// append the ids		if (is_array($store_ids))		{			$store += $store_ids;			// if the cache is too big			if (sizeof($store) - 2 > 20 * $config['search_block_size'])			{				// remove everything in front of two blocks in front of the current start index				for ($i = 0, $n = $id_range[0] - 2 * $config['search_block_size']; $i < $n; $i++)				{					if (isset($store[$i]))					{						unset($store[$i]);					}				}				// remove everything after two blocks after the current stop index				end($id_range);				for ($i = $store[-1] - 1, $n = current($id_range) + 2 * $config['search_block_size']; $i > $n; $i--)				{					if (isset($store[$i]))					{						unset($store[$i]);					}				}			}			$cache->put('_search_results_' . $search_key, $store, $config['search_store_results']);			$sql = 'UPDATE ' . SEARCH_RESULTS_TABLE . '				SET search_time = ' . time() . '				WHERE search_key = \'' . $db->sql_escape($search_key) . '\'';			$db->sql_query($sql);		}		unset($store);		unset($store_ids);		unset($id_range);	}	/**	* Removes old entries from the search results table and removes searches with keywords that contain a word in $words.	*/	function destroy_cache($words, $authors = false)	{		global $db, $cache, $config;		// clear all searches that searched for the specified words		if (sizeof($words))		{			$sql_where = '';			foreach ($words as $word)			{				$sql_where .= " OR search_keywords " . $db->sql_like_expression($db->any_char . $word . $db->any_char);			}			$sql = 'SELECT search_key				FROM ' . SEARCH_RESULTS_TABLE . "				WHERE search_keywords LIKE '%*%' $sql_where";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$cache->destroy('_search_results_' . $row['search_key']);			}			$db->sql_freeresult($result);		}		// clear all searches that searched for the specified authors		if (is_array($authors) && sizeof($authors))		{			$sql_where = '';			foreach ($authors as $author)			{				$sql_where .= (($sql_where) ? ' OR ' : '') . 'search_authors LIKE \'% ' . (int) $author . ' %\'';			}			$sql = 'SELECT search_key				FROM ' . SEARCH_RESULTS_TABLE . "				WHERE $sql_where";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$cache->destroy('_search_results_' . $row['search_key']);			}			$db->sql_freeresult($result);		}		$sql = 'DELETE			FROM ' . SEARCH_RESULTS_TABLE . '			WHERE search_time < ' . (time() - $config['search_store_results']);		$db->sql_query($sql);	}}?>
<?php/**** acp_permissions [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ACP_PERMISSIONS_EXPLAIN'	=> '		<p>Permissions are highly granular and grouped into four major sections, which are:</p>		<h2>Global Permissions</h2>		<p>These are used to control access on a global level and apply to the entire bulletin board. They are further divided into Users Permissions, Groups Permissions, Administrators and Global Moderators.</p>		<h2>Forum Based Permissions</h2>		<p>These are used to control access on a per forum basis. They are further divided into Forum Permissions, Forum Moderators, Users Forum Permissions and Groups Forum Permissions.</p>		<h2>Permission Roles</h2>		<p>These are used to create different sets of permissions for the different permission types later being able to be assigned on a role-based basis. The default roles should cover the administration of bulletin boards large and small, though within each of the four divisions, you can add/edit/delete roles as you see fit.</p>		<h2>Permission Masks</h2>		<p>These are used to view the effective permissions assigned to Users, Moderators (Local and Global), Administrators or Forums.</p>		<br />		<p>For further information on setting up and managing permissions on your phpBB3 board, please see <a href="http://www.phpbb.com/support/documentation/3.0/quickstart/quick_permissions.html">Chapter 1.5 of our Quick Start Guide</a>.</p>	',	'ACL_NEVER'				=> 'Never',	'ACL_SET'				=> 'Setting permissions',	'ACL_SET_EXPLAIN'		=> 'Permissions are based on a simple <samp>YES</samp>/<samp>NO</samp> system. Setting an option to <samp>NEVER</samp> for a user or usergroup overrides any other value assigned to it. If you do not wish to assign a value for an option for this user or group select <samp>NO</samp>. If values are assigned for this option elsewhere they will be used in preference, else <samp>NEVER</samp> is assumed. All objects marked (with the checkbox in front of them) will copy the permission set you defined.',	'ACL_SETTING'			=> 'Setting',	'ACL_TYPE_A_'			=> 'Administrative permissions',	'ACL_TYPE_F_'			=> 'Forum permissions',	'ACL_TYPE_M_'			=> 'Moderative permissions',	'ACL_TYPE_U_'			=> 'User permissions',	'ACL_TYPE_GLOBAL_A_'	=> 'Administrative permissions',	'ACL_TYPE_GLOBAL_U_'	=> 'User permissions',	'ACL_TYPE_GLOBAL_M_'	=> 'Global Moderator permissions',	'ACL_TYPE_LOCAL_M_'		=> 'Forum Moderator permissions',	'ACL_TYPE_LOCAL_F_'		=> 'Forum permissions',	'ACL_NO'				=> 'No',	'ACL_VIEW'				=> 'Viewing permissions',	'ACL_VIEW_EXPLAIN'		=> 'Here you can see the effective permissions the user/group is having. A red square indicates that the user/group does not have the permission, a green square indicates that the user/group does have the permission.',	'ACL_YES'				=> 'Yes',	'ACP_ADMINISTRATORS_EXPLAIN'				=> 'Here you can assign administrator permissions to users or groups. All users with administrator permissions can view the administration control panel.',	'ACP_FORUM_MODERATORS_EXPLAIN'				=> 'Here you can assign users and groups as forum moderators. To assign users access to forums, to define global moderative permissions or administrators please use the appropriate page.',	'ACP_FORUM_PERMISSIONS_EXPLAIN'				=> 'Here you can alter which users and groups can access which forums. To assign moderators or define administrators please use the appropriate page.',	'ACP_FORUM_PERMISSIONS_COPY_EXPLAIN'		=> 'Here you can copy forum permissions from one forum to one or more other forums.',	'ACP_GLOBAL_MODERATORS_EXPLAIN'				=> 'Here you can assign global moderator permissions to users or groups. These moderators are like ordinary moderators except they have access to every forum on your board.',	'ACP_GROUPS_FORUM_PERMISSIONS_EXPLAIN'		=> 'Here you can assign forum permissions to groups.',	'ACP_GROUPS_PERMISSIONS_EXPLAIN'			=> 'Here you can assign global permissions to groups - user permissions, global moderator permissions and administrator permissions. User permissions include capabilities such as the use of avatars, sending private messages, et cetera; global moderator permissions such as approving posts, manage topics, manage bans, et cetera and lastly administrator permissions such as altering permissions, define custom BBCodes, manage forums, et cetera. Individual users permissions should only be changed in rare occasions, the preferred method is putting users in groups and assigning the groups permissions.',	'ACP_ADMIN_ROLES_EXPLAIN'					=> 'Here you are able to manage the roles for administrative permissions. Roles are effective permissions, if you change a role the items having this role assigned will change its permissions too.',	'ACP_FORUM_ROLES_EXPLAIN'					=> 'Here you are able to manage the roles for forum permissions. Roles are effective permissions, if you change a role the items having this role assigned will change its permissions too.',	'ACP_MOD_ROLES_EXPLAIN'						=> 'Here you are able to manage the roles for moderative permissions. Roles are effective permissions, if you change a role the items having this role assigned will change its permissions too.',	'ACP_USER_ROLES_EXPLAIN'					=> 'Here you are able to manage the roles for user permissions. Roles are effective permissions, if you change a role the items having this role assigned will change its permissions too.',	'ACP_USERS_FORUM_PERMISSIONS_EXPLAIN'		=> 'Here you can assign forum permissions to users.',	'ACP_USERS_PERMISSIONS_EXPLAIN'				=> 'Here you can assign global permissions to users - user permissions, global moderator permissions and administrator permissions. User permissions include capabilities such as the use of avatars, sending private messages, et cetera; global moderator permissions such as approving posts, manage topics, manage bans, et cetera and lastly administrator permissions such as altering permissions, define custom BBCodes, manage forums, et cetera. To alter these settings for large numbers of users the Group permissions system is the preferred method. Users permissions should only be changed in rare occasions, the preferred method is putting users in groups and assigning the groups permissions.',	'ACP_VIEW_ADMIN_PERMISSIONS_EXPLAIN'		=> 'Here you can view the effective administrative permissions assigned to the selected users/groups.',	'ACP_VIEW_GLOBAL_MOD_PERMISSIONS_EXPLAIN'	=> 'Here you can view the global moderative permissions assigned to the selected users/groups.',	'ACP_VIEW_FORUM_PERMISSIONS_EXPLAIN'		=> 'Here you can view the forum permissions assigned to the selected users/groups and forums.',	'ACP_VIEW_FORUM_MOD_PERMISSIONS_EXPLAIN'	=> 'Here you can view the forum moderator permissions assigned to the selected users/groups and forums.',	'ACP_VIEW_USER_PERMISSIONS_EXPLAIN'			=> 'Here you can view the effective user permissions assigned to the selected users/groups.',	'ADD_GROUPS'				=> 'Add groups',	'ADD_PERMISSIONS'			=> 'Add permissions',	'ADD_USERS'					=> 'Add users',	'ADVANCED_PERMISSIONS'		=> 'Advanced Permissions',	'ALL_GROUPS'				=> 'Select all groups',	'ALL_NEVER'					=> 'All <samp>NEVER</samp>',	'ALL_NO'					=> 'All <samp>NO</samp>',	'ALL_USERS'					=> 'Select all users',	'ALL_YES'					=> 'All <samp>YES</samp>',	'APPLY_ALL_PERMISSIONS'		=> 'Apply all permissions',	'APPLY_PERMISSIONS'			=> 'Apply permissions',	'APPLY_PERMISSIONS_EXPLAIN'	=> 'The permissions and role defined for this item will only be applied to this item and all checked items.',	'AUTH_UPDATED'				=> 'Permissions have been updated.',	'COPY_PERMISSIONS_CONFIRM'				=> 'Are you sure you wish to carry out this operation? Please be aware that this will overwrite any existing permissions on the selected targets.',	'COPY_PERMISSIONS_FORUM_FROM_EXPLAIN'	=> 'The source forum you want to copy permissions from.',	'COPY_PERMISSIONS_FORUM_TO_EXPLAIN'		=> 'The destination forums you want the copied permissions applied to.',	'COPY_PERMISSIONS_FROM'					=> 'Copy permissions from',	'COPY_PERMISSIONS_TO'					=> 'Apply permissions to',	'CREATE_ROLE'				=> 'Create role',	'CREATE_ROLE_FROM'			=> 'Use settings from',	'CUSTOM'					=> 'Custom',	'DEFAULT'					=> 'Default',	'DELETE_ROLE'				=> 'Delete role',	'DELETE_ROLE_CONFIRM'		=> 'Are you sure you want to remove this role? Items having this role assigned will <strong>not</strong> lose their permission settings.',	'DISPLAY_ROLE_ITEMS'		=> 'View items using this role',	'EDIT_PERMISSIONS'			=> 'Edit permissions',	'EDIT_ROLE'					=> 'Edit role',	'GROUPS_NOT_ASSIGNED'		=> 'No group assigned to this role',	'LOOK_UP_GROUP'				=> 'Look up usergroup',	'LOOK_UP_USER'				=> 'Look up user',	'MANAGE_GROUPS'		=> 'Manage groups',	'MANAGE_USERS'		=> 'Manage users',	'NO_AUTH_SETTING_FOUND'		=> 'Permission settings not defined.',	'NO_ROLE_ASSIGNED'			=> 'No role assigned',	'NO_ROLE_ASSIGNED_EXPLAIN'	=> 'Setting to this role does not change permissions on the right. If you want to unset/remove all permissions you should use the All <samp>NO</samp> link.',	'NO_ROLE_AVAILABLE'			=> 'No role available',	'NO_ROLE_NAME_SPECIFIED'	=> 'Please give the role a name.',	'NO_ROLE_SELECTED'			=> 'Role could not be found.',	'NO_USER_GROUP_SELECTED'	=> 'You havent selected any user or group.',	'ONLY_FORUM_DEFINED'	=> 'You only defined forums in your selection. Please also select at least one user or one group.',	'PERMISSION_APPLIED_TO_ALL'		=> 'Permissions and role will also be applied to all checked objects',	'PLUS_SUBFORUMS'				=> '+Subforums',	'REMOVE_PERMISSIONS'			=> 'Remove permissions',	'REMOVE_ROLE'					=> 'Remove role',	'RESULTING_PERMISSION'			=> 'Resulting permission',	'ROLE'							=> 'Role',	'ROLE_ADD_SUCCESS'				=> 'Role successfully added.',	'ROLE_ASSIGNED_TO'				=> 'Users/Groups assigned to %s',	'ROLE_DELETED'					=> 'Role successfully removed.',	'ROLE_DESCRIPTION'				=> 'Role description',	'ROLE_ADMIN_FORUM'			=> 'Forum Admin',	'ROLE_ADMIN_FULL'			=> 'Full Admin',	'ROLE_ADMIN_STANDARD'		=> 'Standard Admin',	'ROLE_ADMIN_USERGROUP'		=> 'User and Groups Admin',	'ROLE_FORUM_BOT'			=> 'Bot Access',	'ROLE_FORUM_FULL'			=> 'Full Access',	'ROLE_FORUM_LIMITED'		=> 'Limited Access',	'ROLE_FORUM_LIMITED_POLLS'	=> 'Limited Access + Polls',	'ROLE_FORUM_NOACCESS'		=> 'No Access',	'ROLE_FORUM_ONQUEUE'		=> 'On Moderation Queue',	'ROLE_FORUM_POLLS'			=> 'Standard Access + Polls',	'ROLE_FORUM_READONLY'		=> 'Read Only Access',	'ROLE_FORUM_STANDARD'		=> 'Standard Access',	'ROLE_FORUM_NEW_MEMBER'		=> 'Newly registered User',	'ROLE_MOD_FULL'				=> 'Full Moderator',	'ROLE_MOD_QUEUE'			=> 'Queue Moderator',	'ROLE_MOD_SIMPLE'			=> 'Simple Moderator',	'ROLE_MOD_STANDARD'			=> 'Standard Moderator',	'ROLE_USER_FULL'			=> 'All Features',	'ROLE_USER_LIMITED'			=> 'Limited Features',	'ROLE_USER_NOAVATAR'		=> 'No Avatar',	'ROLE_USER_NOPM'			=> 'No Private Messages',	'ROLE_USER_STANDARD'		=> 'Standard Features',	'ROLE_USER_NEW_MEMBER'		=> 'Newly registered User',	'ROLE_DESCRIPTION_ADMIN_FORUM'			=> 'Can access the forum management and forum permission settings.',	'ROLE_DESCRIPTION_ADMIN_FULL'			=> 'Has access to all administrative functions of this board.<br />Not recommended.',	'ROLE_DESCRIPTION_ADMIN_STANDARD'		=> 'Has access to most administrative features but is not allowed to use server or system related tools.',	'ROLE_DESCRIPTION_ADMIN_USERGROUP'		=> 'Can manage groups and users: Able to change permissions, settings, manage bans, and manage ranks.',	'ROLE_DESCRIPTION_FORUM_BOT'			=> 'This role is recommended for bots and search spiders.',	'ROLE_DESCRIPTION_FORUM_FULL'			=> 'Can use all forum features, including posting of announcements and stickies. Can also ignore the flood limit.<br />Not recommended for normal users.',	'ROLE_DESCRIPTION_FORUM_LIMITED'		=> 'Can use some forum features, but cannot attach files or use post icons.',	'ROLE_DESCRIPTION_FORUM_LIMITED_POLLS'	=> 'As per Limited Access but can also create polls.',	'ROLE_DESCRIPTION_FORUM_NOACCESS'		=> 'Can neither see nor access the forum.',	'ROLE_DESCRIPTION_FORUM_ONQUEUE'		=> 'Can use most forum features including attachments, but posts and topics need to be approved by a moderator.',	'ROLE_DESCRIPTION_FORUM_POLLS'			=> 'Like Standard Access but can also create polls.',	'ROLE_DESCRIPTION_FORUM_READONLY'		=> 'Can read the forum, but cannot create new topics or reply to posts.',	'ROLE_DESCRIPTION_FORUM_STANDARD'		=> 'Can use most forum features including attachments and deleting own topics, but cannot lock own topics, and cannot create polls.',	'ROLE_DESCRIPTION_FORUM_NEW_MEMBER'		=> 'A role for members of the special newly registered users group; contains <samp>NEVER</samp> permissions to lock features for new users.',	'ROLE_DESCRIPTION_MOD_FULL'				=> 'Can use all moderating features, including banning.',	'ROLE_DESCRIPTION_MOD_QUEUE'			=> 'Can use the Moderation Queue to validate and edit posts, but nothing else.',	'ROLE_DESCRIPTION_MOD_SIMPLE'			=> 'Can only use basic topic actions. Cannot send warnings or use moderation queue.',	'ROLE_DESCRIPTION_MOD_STANDARD'			=> 'Can use most moderating tools, but cannot ban users or change the post author.',	'ROLE_DESCRIPTION_USER_FULL'			=> 'Can use all available forum features for users, including changing the user name or ignoring the flood limit.<br />Not recommended.',	'ROLE_DESCRIPTION_USER_LIMITED'			=> 'Can access some of the user features. Attachments, e-mails, or instant messages are not allowed.',	'ROLE_DESCRIPTION_USER_NOAVATAR'		=> 'Has a limited feature set and is not allowed to use the Avatar feature.',	'ROLE_DESCRIPTION_USER_NOPM'			=> 'Has a limited feature set, and is not allowed to use Private Messages.',	'ROLE_DESCRIPTION_USER_STANDARD'		=> 'Can access most but not all user features. Cannot change user name or ignore the flood limit, for instance.',	'ROLE_DESCRIPTION_USER_NEW_MEMBER'		=> 'A role for members of the special newly registered users group; contains <samp>NEVER</samp> permissions to lock features for new users.',	'ROLE_DESCRIPTION_EXPLAIN'		=> 'You are able to enter a short explanation of what the role is doing or for what it is meant for. The text you enter here will be displayed within the permissions screens too.',	'ROLE_DESCRIPTION_LONG'			=> 'The role description is too long, please limit it to 4000 characters.',	'ROLE_DETAILS'					=> 'Role details',	'ROLE_EDIT_SUCCESS'				=> 'Role successfully edited.',	'ROLE_NAME'						=> 'Role name',	'ROLE_NAME_ALREADY_EXIST'		=> 'A role named <strong>%s</strong> already exist for the specified permission type.',	'ROLE_NOT_ASSIGNED'				=> 'Role has not been assigned yet.',	'SELECTED_FORUM_NOT_EXIST'		=> 'The selected forum(s) do not exist.',	'SELECTED_GROUP_NOT_EXIST'		=> 'The selected group(s) do not exist.',	'SELECTED_USER_NOT_EXIST'		=> 'The selected user(s) do not exist.',	'SELECT_FORUM_SUBFORUM_EXPLAIN'	=> 'The forum you select here will include all subforums into the selection.',	'SELECT_ROLE'					=> 'Select role',	'SELECT_TYPE'					=> 'Select type',	'SET_PERMISSIONS'				=> 'Set permissions',	'SET_ROLE_PERMISSIONS'			=> 'Set role permissions',	'SET_USERS_PERMISSIONS'			=> 'Set users permissions',	'SET_USERS_FORUM_PERMISSIONS'	=> 'Set users forum permissions',	'TRACE_DEFAULT'					=> 'By default every permission is <samp>NO</samp> (unset). So the permission can be overwritten by other settings.',	'TRACE_FOR'						=> 'Trace for',	'TRACE_GLOBAL_SETTING'			=> '%s (global)',	'TRACE_GROUP_NEVER_TOTAL_NEVER'	=> 'This groups permission is set to <samp>NEVER</samp> like the total result so the old result is kept.',	'TRACE_GROUP_NEVER_TOTAL_NEVER_LOCAL'	=> 'This groups permission for this forum is set to <samp>NEVER</samp> like the total result so the old result is kept.',	'TRACE_GROUP_NEVER_TOTAL_NO'	=> 'This groups permission is set to <samp>NEVER</samp> which becomes the new total value because it wasnt set yet (set to <samp>NO</samp>).',	'TRACE_GROUP_NEVER_TOTAL_NO_LOCAL'	=> 'This groups permission for this forum is set to <samp>NEVER</samp> which becomes the new total value because it wasnt set yet (set to <samp>NO</samp>).',	'TRACE_GROUP_NEVER_TOTAL_YES'	=> 'This groups permission is set to <samp>NEVER</samp> which overwrites the total <samp>YES</samp> to a <samp>NEVER</samp> for this user.',	'TRACE_GROUP_NEVER_TOTAL_YES_LOCAL'	=> 'This groups permission for this forum is set to <samp>NEVER</samp> which overwrites the total <samp>YES</samp> to a <samp>NEVER</samp> for this user.',	'TRACE_GROUP_NO'				=> 'The permission is <samp>NO</samp> for this group so the old total value is kept.',	'TRACE_GROUP_NO_LOCAL'			=> 'The permission is <samp>NO</samp> for this group within this forum so the old total value is kept.',	'TRACE_GROUP_YES_TOTAL_NEVER'	=> 'This groups permission is set to <samp>YES</samp> but the total <samp>NEVER</samp> cannot be overwritten.',	'TRACE_GROUP_YES_TOTAL_NEVER_LOCAL'	=> 'This groups permission for this forum is set to <samp>YES</samp> but the total <samp>NEVER</samp> cannot be overwritten.',	'TRACE_GROUP_YES_TOTAL_NO'		=> 'This groups permission is set to <samp>YES</samp> which becomes the new total value because it wasnt set yet (set to <samp>NO</samp>).',	'TRACE_GROUP_YES_TOTAL_NO_LOCAL'	=> 'This groups permission for this forum is set to <samp>YES</samp> which becomes the new total value because it wasnt set yet (set to <samp>NO</samp>).',	'TRACE_GROUP_YES_TOTAL_YES'		=> 'This groups permission is set to <samp>YES</samp> and the total permission is already set to <samp>YES</samp>, so the total result is kept.',	'TRACE_GROUP_YES_TOTAL_YES_LOCAL'	=> 'This groups permission for this forum is set to <samp>YES</samp> and the total permission is already set to <samp>YES</samp>, so the total result is kept.',	'TRACE_PERMISSION'				=> 'Trace permission - %s',	'TRACE_RESULT'					=> 'Trace result',	'TRACE_SETTING'					=> 'Trace setting',	'TRACE_USER_GLOBAL_YES_TOTAL_YES'		=> 'The forum independent user permission evaluates to <samp>YES</samp> but the total permission is already set to <samp>YES</samp>, so the total result is kept. %sTrace global permission%s',	'TRACE_USER_GLOBAL_YES_TOTAL_NEVER'		=> 'The forum independent user permission evaluates to <samp>YES</samp> which overwrites the current local result <samp>NEVER</samp>. %sTrace global permission%s',	'TRACE_USER_GLOBAL_NEVER_TOTAL_KEPT'	=> 'The forum independent user permission evaluates to <samp>NEVER</samp> which doesnt influence the local permission. %sTrace global permission%s',	'TRACE_USER_FOUNDER'					=> 'The user is a founder, therefore admin permissions are always set to <samp>YES</samp>.',	'TRACE_USER_KEPT'						=> 'The users permission is <samp>NO</samp> so the old total value is kept.',	'TRACE_USER_KEPT_LOCAL'					=> 'The users permission for this forum is <samp>NO</samp> so the old total value is kept.',	'TRACE_USER_NEVER_TOTAL_NEVER'			=> 'The users permission is set to <samp>NEVER</samp> and the total value is set to <samp>NEVER</samp>, so nothing is changed.',	'TRACE_USER_NEVER_TOTAL_NEVER_LOCAL'	=> 'The users permission for this forum is set to <samp>NEVER</samp> and the total value is set to <samp>NEVER</samp>, so nothing is changed.',	'TRACE_USER_NEVER_TOTAL_NO'				=> 'The users permission is set to <samp>NEVER</samp> which becomes the total value because it was set to NO.',	'TRACE_USER_NEVER_TOTAL_NO_LOCAL'		=> 'The users permission for this forum is set to <samp>NEVER</samp> which becomes the total value because it was set to NO.',	'TRACE_USER_NEVER_TOTAL_YES'			=> 'The users permission is set to <samp>NEVER</samp> and overwrites the previous <samp>YES</samp>.',	'TRACE_USER_NEVER_TOTAL_YES_LOCAL'		=> 'The users permission for this forum is set to <samp>NEVER</samp> and overwrites the previous <samp>YES</samp>.',	'TRACE_USER_NO_TOTAL_NO'				=> 'The users permission is <samp>NO</samp> and the total value was set to NO so it defaults to <samp>NEVER</samp>.',	'TRACE_USER_NO_TOTAL_NO_LOCAL'			=> 'The users permission for this forum is <samp>NO</samp> and the total value was set to NO so it defaults to <samp>NEVER</samp>.',	'TRACE_USER_YES_TOTAL_NEVER'			=> 'The users permission is set to <samp>YES</samp> but the total <samp>NEVER</samp> cannot be overwritten.',	'TRACE_USER_YES_TOTAL_NEVER_LOCAL'		=> 'The users permission for this forum is set to <samp>YES</samp> but the total <samp>NEVER</samp> cannot be overwritten.',	'TRACE_USER_YES_TOTAL_NO'				=> 'The users permission is set to <samp>YES</samp> which becomes the total value because it was set to <samp>NO</samp>.',	'TRACE_USER_YES_TOTAL_NO_LOCAL'			=> 'The users permission for this forum is set to <samp>YES</samp> which becomes the total value because it was set to <samp>NO</samp>.',	'TRACE_USER_YES_TOTAL_YES'				=> 'The users permission is set to <samp>YES</samp> and the total value is set to <samp>YES</samp>, so nothing is changed.',	'TRACE_USER_YES_TOTAL_YES_LOCAL'		=> 'The users permission for this forum is set to <samp>YES</samp> and the total value is set to <samp>YES</samp>, so nothing is changed.',	'TRACE_WHO'								=> 'Who',	'TRACE_TOTAL'							=> 'Total',	'USERS_NOT_ASSIGNED'			=> 'No user assigned to this role',	'USER_IS_MEMBER_OF_DEFAULT'		=> 'is a member of the following pre-defined groups',	'USER_IS_MEMBER_OF_CUSTOM'		=> 'is a member of the following user defined groups',	'VIEW_ASSIGNED_ITEMS'	=> 'View assigned items',	'VIEW_LOCAL_PERMS'		=> 'Local permissions',	'VIEW_GLOBAL_PERMS'		=> 'Global permissions',	'VIEW_PERMISSIONS'		=> 'View permissions',	'WRONG_PERMISSION_TYPE'				=> 'Wrong permission type selected.',	'WRONG_PERMISSION_SETTING_FORMAT'	=> 'The permission settings are in a wrong format, phpBB is not able to process them correctly.',));?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2006, 2008 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}global $table_prefix;define('CAPTCHA_QUESTIONS_TABLE',	$table_prefix . 'captcha_questions');define('CAPTCHA_ANSWERS_TABLE',		$table_prefix . 'captcha_answers');define('CAPTCHA_QA_CONFIRM_TABLE',	$table_prefix . 'qa_confirm');/*** And now to something completely different. Let's make a captcha without extending the abstract class.* QA CAPTCHA sample implementation** @package VC*/class phpbb_captcha_qa{	var $confirm_id;	var $answer;	var $question_ids;	var $question_text;	var $question_lang;	var $question_strict;	var $attempts = 0;	var $type;	// dirty trick: 0 is false, but can still encode that the captcha is not yet validated	var $solved = 0;	/**	* @param int $type  as per the CAPTCHA API docs, the type	*/	function init($type)	{		global $config, $db, $user;		// load our language file		$user->add_lang('captcha_qa');		// read input		$this->confirm_id = request_var('qa_confirm_id', '');		$this->answer = utf8_normalize_nfc(request_var('qa_answer', '', true));		$this->type = (int) $type;		$this->question_lang = $user->lang_name;		// we need all defined questions - shouldn't be too many, so we can just grab them		// try the user's lang first		$sql = 'SELECT question_id			FROM ' . CAPTCHA_QUESTIONS_TABLE . "			WHERE lang_iso = '" . $db->sql_escape($user->lang_name) . "'";		$result = $db->sql_query($sql, 3600);		while ($row = $db->sql_fetchrow($result))		{			$this->question_ids[$row['question_id']] = $row['question_id'];		}		$db->sql_freeresult($result);		// fallback to the board default lang		if (!sizeof($this->question_ids))		{			$this->question_lang = $config['default_lang'];			$sql = 'SELECT question_id				FROM ' . CAPTCHA_QUESTIONS_TABLE . "				WHERE lang_iso = '" . $db->sql_escape($config['default_lang']) . "'";			$result = $db->sql_query($sql, 7200);			while ($row = $db->sql_fetchrow($result))			{				$this->question_ids[$row['question_id']] = $row['question_id'];			}			$db->sql_freeresult($result);		}			// okay, if there is a confirm_id, we try to load that confirm's state. If not, we try to find one		if (!$this->load_answer() && (!$this->load_confirm_id() || !$this->load_answer()))		{			// we have no valid confirm ID, better get ready to ask something			$this->select_question();		}	}	/**	*  API function	*/	function &get_instance()	{		$instance =& new phpbb_captcha_qa();		return $instance;	}	/**	* See if the captcha has created its tables.	*/	function is_installed()	{		global $db, $phpbb_root_path, $phpEx;		if (!class_exists('phpbb_db_tools'))		{			include("$phpbb_root_path/includes/db/db_tools.$phpEx");		}		$db_tool = new phpbb_db_tools($db);		return $db_tool->sql_table_exists(CAPTCHA_QUESTIONS_TABLE);	}	/**	*  API function - for the captcha to be available, it must have installed itself and there has to be at least one question in the board's default lang	*/	function is_available()	{		global $config, $db, $phpbb_root_path, $phpEx, $user;		// load language file for pretty display in the ACP dropdown		$user->add_lang('captcha_qa');		if (!phpbb_captcha_qa::is_installed())		{			return false;		}		$sql = 'SELECT COUNT(question_id) AS question_count			FROM ' . CAPTCHA_QUESTIONS_TABLE . "			WHERE lang_iso = '" . $db->sql_escape($config['default_lang']) . "'";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		return ((bool) $row['question_count']);	}	/**	*  API function	*/	function has_config()	{		return true;	}	/**	*  API function	*/	function get_name()	{		return 'CAPTCHA_QA';	}	/**	*  API function	*/	function get_class_name()	{		return 'phpbb_captcha_qa';	}	/**	*  API function - not needed as we don't display an image	*/	function execute_demo()	{	}	/**	*  API function - not needed as we don't display an image	*/	function execute()	{	}	/**	*  API function - send the question to the template	*/	function get_template()	{		global $template;		if ($this->is_solved())		{			return false;		}		else		{			$template->assign_vars(array(				'QA_CONFIRM_QUESTION'		=> $this->question_text,				'QA_CONFIRM_ID'				=> $this->confirm_id,				'S_CONFIRM_CODE'			=> true,				'S_TYPE'					=> $this->type,			));			return 'captcha_qa.html';		}	}	/**	*  API function - we just display a mockup so that the captcha doesn't need to be installed	*/	function get_demo_template()	{		global $config, $db, $template;		if ($this->is_available())		{			$sql = 'SELECT question_text				FROM ' . CAPTCHA_QUESTIONS_TABLE . "				WHERE lang_iso = '" . $db->sql_escape($config['default_lang']) . "'";			$result = $db->sql_query_limit($sql, 1);			if ($row = $db->sql_fetchrow($result))			{				$template->assign_vars(array(					'QA_CONFIRM_QUESTION'		=> $row['question_text'],				));			}			$db->sql_freeresult($result);		}		return 'captcha_qa_acp_demo.html';	}	/**	*  API function	*/	function get_hidden_fields()	{		$hidden_fields = array();		// this is required - otherwise we would forget about the captcha being already solved		if ($this->solved)		{			$hidden_fields['qa_answer'] = $this->answer;		}		$hidden_fields['qa_confirm_id'] = $this->confirm_id;		return $hidden_fields;	}	/**	*  API function	*/	function garbage_collect($type = 0)	{		global $db, $config;		$sql = 'SELECT c.confirm_id			FROM ' . CAPTCHA_QA_CONFIRM_TABLE . ' c			LEFT JOIN ' . SESSIONS_TABLE . ' s				ON (c.session_id = s.session_id)			WHERE s.session_id IS NULL' .				((empty($type)) ? '' : ' AND c.confirm_type = ' . (int) $type);		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			$sql_in = array();			do			{				$sql_in[] = (string) $row['confirm_id'];			}			while ($row = $db->sql_fetchrow($result));			if (sizeof($sql_in))			{				$sql = 'DELETE FROM ' . CAPTCHA_QA_CONFIRM_TABLE . '					WHERE ' . $db->sql_in_set('confirm_id', $sql_in);				$db->sql_query($sql);			}		}		$db->sql_freeresult($result);	}	/**	*  API function - we don't drop the tables here, as that would cause the loss of all entered questions.	*/	function uninstall()	{		$this->garbage_collect(0);	}	/**	*  API function - set up shop	*/	function install()	{		global $db, $phpbb_root_path, $phpEx;		if (!class_exists('phpbb_db_tools'))		{			include("$phpbb_root_path/includes/db/db_tools.$phpEx");		}		$db_tool = new phpbb_db_tools($db);		$tables = array(CAPTCHA_QUESTIONS_TABLE, CAPTCHA_ANSWERS_TABLE, CAPTCHA_QA_CONFIRM_TABLE);		$schemas = array(				CAPTCHA_QUESTIONS_TABLE		=> array (					'COLUMNS' => array(						'question_id'	=> array('UINT', Null, 'auto_increment'),						'strict'		=> array('BOOL', 0),						'lang_id'		=> array('UINT', 0),						'lang_iso'		=> array('VCHAR:30', ''),						'question_text'	=> array('TEXT_UNI', ''),					),					'PRIMARY_KEY'		=> 'question_id',					'KEYS'				=> array(						'lang'			=> array('INDEX', 'lang_iso'),					),				),				CAPTCHA_ANSWERS_TABLE		=> array (					'COLUMNS' => array(						'question_id'	=> array('UINT', 0),						'answer_text'	=> array('STEXT_UNI', ''),					),					'KEYS'				=> array(						'qid'			=> array('INDEX', 'question_id'),					),				),				CAPTCHA_QA_CONFIRM_TABLE		=> array (					'COLUMNS' => array(						'session_id'	=> array('CHAR:32', ''),						'confirm_id'	=> array('CHAR:32', ''),						'lang_iso'		=> array('VCHAR:30', ''),						'question_id'	=> array('UINT', 0),						'attempts'		=> array('UINT', 0),						'confirm_type'	=> array('USINT', 0),					),					'KEYS'				=> array(						'session_id'			=> array('INDEX', 'session_id'),						'lookup'				=> array('INDEX', array('confirm_id', 'session_id', 'lang_iso')),					),					'PRIMARY_KEY'		=> 'confirm_id',				),		);		foreach($schemas as $table => $schema)		{			if (!$db_tool->sql_table_exists($table))			{				$db_tool->sql_create_table($table, $schema);			}		}	}	/**	*  API function - see what has to be done to validate	*/	function validate()	{		global $config, $db, $user;		$error = '';				if (!sizeof($this->question_ids))		{			return false;		}				if (!$this->confirm_id)		{			$error = $user->lang['CONFIRM_QUESTION_WRONG'];		}		else		{			if ($this->check_answer())			{				// $this->delete_code(); commented out to allow posting.php to repeat the question				$this->solved = true;			}			else			{				$error = $user->lang['CONFIRM_QUESTION_WRONG'];			}		}		if (strlen($error))		{			// okay, incorrect answer. Let's ask a new question.			$this->new_attempt();			$this->solved = false;			return $error;		}		else		{			return false;		}	}	/**	*  Select a question	*/	function select_question()	{		global $db, $user;		if (!sizeof($this->question_ids))		{			return false;		}		$this->confirm_id = md5(unique_id($user->ip));		$this->question = (int) array_rand($this->question_ids);		$sql = 'INSERT INTO ' . CAPTCHA_QA_CONFIRM_TABLE . ' ' . $db->sql_build_array('INSERT', array(			'confirm_id'	=> (string) $this->confirm_id,			'session_id'	=> (string) $user->session_id,			'lang_iso'		=> (string) $this->question_lang,			'confirm_type'	=> (int) $this->type,			'question_id'	=> (int) $this->question,		));		$db->sql_query($sql);		$this->load_answer();	}	/**	* New Question, if desired.	*/	function reselect_question()	{		global $db, $user;				if (!sizeof($this->question_ids))		{			return false;		}		$this->question = (int) array_rand($this->question_ids);		$this->solved = 0;		$sql = 'UPDATE ' . CAPTCHA_QA_CONFIRM_TABLE . '			SET question_id = ' . (int) $this->question . "			WHERE confirm_id = '" . $db->sql_escape($this->confirm_id) . "'				AND session_id = '" . $db->sql_escape($user->session_id) . "'";		$db->sql_query($sql);		$this->load_answer();	}	/**	* Wrong answer, so we increase the attempts and use a different question.	*/	function new_attempt()	{		global $db, $user;		// yah, I would prefer a stronger rand, but this should work		$this->question = (int) array_rand($this->question_ids);		$this->solved = 0;		$sql = 'UPDATE ' . CAPTCHA_QA_CONFIRM_TABLE . '			SET question_id = ' . (int) $this->question . ",				attempts = attempts + 1			WHERE confirm_id = '" . $db->sql_escape($this->confirm_id) . "'				AND session_id = '" . $db->sql_escape($user->session_id) . "'";		$db->sql_query($sql);		$this->load_answer();	}	/**	* See if there is already an entry for the current session.	*/	function load_confirm_id()	{		global $db, $user;		$sql = 'SELECT confirm_id			FROM ' . CAPTCHA_QA_CONFIRM_TABLE . " 			WHERE 				session_id = '" . $db->sql_escape($user->session_id) . "'				AND lang_iso = '" . $db->sql_escape($this->question_lang) . "'				AND confirm_type = " . $this->type;		$result = $db->sql_query_limit($sql, 1);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			$this->confirm_id = $row['confirm_id'];			return true;		}		return false;	}	/**	* Look up everything we need and populate the instance variables.	*/	function load_answer()	{		global $db, $user;				if (!strlen($this->confirm_id) || !sizeof($this->question_ids))		{			return false;		}		$sql = 'SELECT con.question_id, attempts, question_text, strict			FROM ' . CAPTCHA_QA_CONFIRM_TABLE . ' con, ' . CAPTCHA_QUESTIONS_TABLE . " qes			WHERE con.question_id = qes.question_id				AND confirm_id = '" . $db->sql_escape($this->confirm_id) . "'				AND session_id = '" . $db->sql_escape($user->session_id) . "'				AND qes.lang_iso = '" . $db->sql_escape($this->question_lang) . "'				AND confirm_type = " . $this->type;		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			$this->question = $row['question_id'];			$this->attempts = $row['attempts'];			$this->question_strict = $row['strict'];			$this->question_text = $row['question_text'];			return true;		}		return false;	}	/**	*  The actual validation	*/	function check_answer()	{		global $db;		$answer = ($this->question_strict) ? utf8_normalize_nfc(request_var('qa_answer', '', true)) : utf8_clean_string(utf8_normalize_nfc(request_var('qa_answer', '', true)));		$sql = 'SELECT answer_text			FROM ' . CAPTCHA_ANSWERS_TABLE . '			WHERE question_id = ' . (int) $this->question;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$solution = ($this->question_strict) ? $row['answer_text'] : utf8_clean_string($row['answer_text']);			if ($solution === $answer)			{				$this->solved = true;				break;			}		}		$db->sql_freeresult($result);		return $this->solved;	}	/**	*  API function - clean the entry	*/	function delete_code()	{		global $db, $user;		$sql = 'DELETE FROM ' . CAPTCHA_QA_CONFIRM_TABLE . "			WHERE confirm_id = '" . $db->sql_escape($confirm_id) . "'				AND session_id = '" . $db->sql_escape($user->session_id) . "'				AND confirm_type = " . $this->type;		$db->sql_query($sql);	}	/**	*  API function	*/	function get_attempt_count()	{		return $this->attempts;	}	/**	*  API function	*/	function reset()	{		global $db, $user;		$sql = 'DELETE FROM ' . CAPTCHA_QA_CONFIRM_TABLE . "			WHERE session_id = '" . $db->sql_escape($user->session_id) . "'				AND confirm_type = " . (int) $this->type;		$db->sql_query($sql);		// we leave the class usable by generating a new question		$this->select_question();	}	/**	*  API function	*/	function is_solved()	{		if (request_var('qa_answer', false) && $this->solved === 0)		{			$this->validate();		}		return (bool) $this->solved;	}	/**	*  API function - The ACP backend, this marks the end of the easy methods	*/	function acp_page($id, &$module)	{		global $db, $user, $auth, $template;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('acp/board');		$user->add_lang('captcha_qa');		if (!$this->is_installed())		{			$this->install();		}		$module->tpl_name = 'captcha_qa_acp';		$module->page_title = 'ACP_VC_SETTINGS';		$form_key = 'acp_captcha';		add_form_key($form_key);		$submit = request_var('submit', false);		$question_id = request_var('question_id', 0);		$action = request_var('action', '');		// we have two pages, so users might want to navigate from one to the other		$list_url = $module->u_action . "&amp;configure=1&amp;select_captcha=" . $this->get_class_name();		$template->assign_vars(array(			'U_ACTION'		=> $module->u_action,			'QUESTION_ID'	=> $question_id ,			'CLASS'			=> $this->get_class_name(),		));		// show the list?		if (!$question_id && $action != 'add')		{			$this->acp_question_list($module);		}		else if ($question_id && $action == 'delete')		{			if ($this->get_class_name() !== $config['captcha_plugin'] || !$this->acp_is_last($question_id))			{				if (confirm_box(true))				{					$this->acp_delete_question($question_id);					trigger_error($user->lang['QUESTION_DELETED'] . adm_back_link($list_url));				}				else				{					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(						'question_id'		=> $question_id,						'action'			=> $action,						'configure'			=> 1,						'select_captcha'	=> $this->get_class_name(),						))					);				}			}			else			{				trigger_error($user->lang['QA_LAST_QUESTION'] . adm_back_link($list_url), E_USER_WARNING);			}		}		else		{			// okay, show the editor			$error = false;			$input_question = request_var('question_text', '', true);			$input_answers = request_var('answers', '', true);			$input_lang = request_var('lang_iso', '', true);			$input_strict = request_var('strict', false);			$langs = $this->get_languages();			foreach ($langs as $lang => $entry)			{				$template->assign_block_vars('langs', array(					'ISO' => $lang,					'NAME' => $entry['name'],				));			}			$template->assign_vars(array(				'U_LIST' => $list_url,			));			if ($question_id)			{				if ($question = $this->acp_get_question_data($question_id))				{					$answers = (isset($input_answers[$lang])) ? $input_answers[$lang] : implode("\n", $question['answers']);					$template->assign_vars(array(						'QUESTION_TEXT'		=> ($input_question) ? $input_question : $question['question_text'],						'LANG_ISO'			=> ($input_lang) ? $input_lang : $question['lang_iso'],						'STRICT'			=> (isset($_REQUEST['strict'])) ? $input_strict : $question['strict'],						'ANSWERS'			=> $answers,					));				}				else				{					trigger_error($user->lang['FORM_INVALID'] . adm_back_link($list_url));				}			}			else			{				$template->assign_vars(array(					'QUESTION_TEXT'		=> $input_question,					'LANG_ISO'			=> $input_lang,					'STRICT'			=> $input_strict,					'ANSWERS'			=> $input_answers,				));			}			if ($submit && check_form_key($form_key))			{				$data = $this->acp_get_question_input();				if (!$this->validate_input($data))				{					$template->assign_vars(array(						'S_ERROR'			=> true,					));				}				else				{					if ($question_id)					{						$this->acp_update_question($data, $question_id);					}					else					{						$this->acp_add_question($data);					}					add_log('admin', 'LOG_CONFIG_VISUAL');					trigger_error($user->lang['CONFIG_UPDATED'] . adm_back_link($list_url));				}			}			else if ($submit)			{				trigger_error($user->lang['FORM_INVALID'] . adm_back_link($list_url), E_USER_WARNING);			}		}	}	/**	*  This handles the list overview	*/	function acp_question_list(&$module)	{		global $db, $template;		$sql = 'SELECT *			FROM ' . CAPTCHA_QUESTIONS_TABLE;		$result = $db->sql_query($sql);		$template->assign_vars(array(			'S_LIST'			=> true,		));		while ($row = $db->sql_fetchrow($result))		{			$url = $module->u_action . "&amp;question_id={$row['question_id']}&amp;configure=1&amp;select_captcha=" . $this->get_class_name() . '&amp;';			$template->assign_block_vars('questions', array(				'QUESTION_TEXT'		=> $row['question_text'],				'QUESTION_ID'		=> $row['question_id'],				'QUESTION_LANG'		=> $row['lang_iso'],				'U_DELETE'			=> "{$url}action=delete",				'U_EDIT'			=> "{$url}action=edit",			));		}		$db->sql_freeresult($result);	}	/**	*  Grab a question and bring it into a format the editor understands	*/	function acp_get_question_data($question_id)	{		global $db;		if ($question_id)		{			$sql = 'SELECT *				FROM ' . CAPTCHA_QUESTIONS_TABLE . '				WHERE question_id = ' . $question_id;			$result = $db->sql_query($sql);			$question = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$question)			{				return false;			}			$question['answers'] = array();			$sql = 'SELECT *				FROM ' . CAPTCHA_ANSWERS_TABLE . '				WHERE question_id = ' . $question_id;			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$question['answers'][] = $row['answer_text'];			}			$db->sql_freeresult($result);			return $question;		}	}	/**	*  Grab a question from input and bring it into a format the editor understands	*/	function acp_get_question_input()	{		$answers = utf8_normalize_nfc(request_var('answers', '', true));		$question = array(			'question_text'	=> request_var('question_text', '', true),			'strict'		=> request_var('strict', false),			'lang_iso'		=> request_var('lang_iso', ''),			'answers'		=> (strlen($answers)) ? explode("\n", $answers) : '',		);		return $question;	}	/**	*  Update a question.	* param mixed $data : an array as created from acp_get_question_input or acp_get_question_data	*/	function acp_update_question($data, $question_id)	{		global $db, $cache;		// easier to delete all answers than to figure out which to update		$sql = 'DELETE FROM ' . CAPTCHA_ANSWERS_TABLE . " WHERE question_id = $question_id";		$db->sql_query($sql);		$langs = $this->get_languages();		$question_ary = $data;		$question_ary['lang_id'] = $langs[$question_ary['lang_iso']]['id'];		unset($question_ary['answers']);		$sql = 'UPDATE ' . CAPTCHA_QUESTIONS_TABLE . '			SET ' . $db->sql_build_array('UPDATE', $question_ary) . "			WHERE question_id = $question_id";		$db->sql_query($sql);		$this->acp_insert_answers($data, $question_id);		$cache->destroy('sql', CAPTCHA_QUESTIONS_TABLE);	}	/**	*  Insert a question.	* param mixed $data : an array as created from acp_get_question_input or acp_get_question_data	*/	function acp_add_question($data)	{		global $db, $cache;		$langs = $this->get_languages();		$question_ary = $data;		$question_ary['lang_id'] = $langs[$data['lang_iso']]['id'];		unset($question_ary['answers']);		$sql = 'INSERT INTO ' . CAPTCHA_QUESTIONS_TABLE . ' ' . $db->sql_build_array('INSERT', $question_ary);		$db->sql_query($sql);		$question_id = $db->sql_nextid();		$this->acp_insert_answers($data, $question_id);		$cache->destroy('sql', CAPTCHA_QUESTIONS_TABLE);	}	/**	*  Insert the answers.	* param mixed $data : an array as created from acp_get_question_input or acp_get_question_data	*/	function acp_insert_answers($data, $question_id)	{		global $db, $cache;		foreach ($data['answers'] as $answer)		{			$answer_ary = array(				'question_id'	=> $question_id,				'answer_text'	=> $answer,			);			$sql = 'INSERT INTO ' . CAPTCHA_ANSWERS_TABLE . ' ' . $db->sql_build_array('INSERT', $answer_ary);			$db->sql_query($sql);		}		$cache->destroy('sql', CAPTCHA_ANSWERS_TABLE);	}	/**	*  Delete a question.	*/	function acp_delete_question($question_id)	{		global $db, $cache;		$tables = array(CAPTCHA_QUESTIONS_TABLE, CAPTCHA_ANSWERS_TABLE);		foreach ($tables as $table)		{			$sql = "DELETE FROM $table				WHERE question_id = $question_id";			$db->sql_query($sql);		}		$cache->destroy('sql', $tables);	}	/**	*  Check if the entered data can be inserted/used	* param mixed $data : an array as created from acp_get_question_input or acp_get_question_data	*/	function validate_input($question_data)	{		$langs = $this->get_languages();		if (!isset($question_data['lang_iso']) ||			!isset($question_data['question_text']) ||			!isset($question_data['strict']) ||			!isset($question_data['answers']))		{			return false;		}		if (!isset($langs[$question_data['lang_iso']]) ||			!strlen($question_data['question_text']) ||			!sizeof($question_data['answers']) ||			!is_array($question_data['answers']))		{			return false;		}		return true;	}	/**	* List the installed language packs	*/	function get_languages()	{		global $db;		$sql = 'SELECT *			FROM ' . LANG_TABLE;		$result = $db->sql_query($sql);		$langs = array();		while ($row = $db->sql_fetchrow($result))		{			$langs[$row['lang_iso']] = array(				'name'	=> $row['lang_local_name'],				'id'	=> (int) $row['lang_id'],			);		}		$db->sql_freeresult($result);		return $langs;	}				/**	*  See if there is a question other than the one we have	*/	function acp_is_last($question_id)	{		global $config, $db;		if ($question_id)		{			$sql = 'SELECT question_id				FROM ' . CAPTCHA_QUESTIONS_TABLE . "				WHERE lang_iso = '" . $db->sql_escape($config['default_lang']) . "'					AND  question_id <> " .  (int) $question_id;			$result = $db->sql_query_limit($sql, 1);			$question = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$question)			{				return true;			}			return false;		}	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_prune_info{	function module()	{		return array(			'filename'	=> 'acp_prune',			'title'		=> 'ACP_PRUNING',			'version'	=> '1.0.0',			'modes'		=> array(				'forums'	=> array('title' => 'ACP_PRUNE_FORUMS', 'auth' => 'acl_a_prune', 'cat' => array('ACP_MANAGE_FORUMS')),				'users'		=> array('title' => 'ACP_PRUNE_USERS', 'auth' => 'acl_a_userdel', 'cat' => array('ACP_USER_SECURITY')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_ranks{	var $u_action;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('acp/posting');		// Set up general vars		$action = request_var('action', '');		$action = (isset($_POST['add'])) ? 'add' : $action;		$action = (isset($_POST['save'])) ? 'save' : $action;		$rank_id = request_var('id', 0);		$this->tpl_name = 'acp_ranks';		$this->page_title = 'ACP_MANAGE_RANKS';		$form_name = 'acp_ranks';		add_form_key($form_name);		switch ($action)		{			case 'save':				if (!check_form_key($form_name))				{					trigger_error($user->lang['FORM_INVALID']. adm_back_link($this->u_action), E_USER_WARNING);				}				$rank_title = utf8_normalize_nfc(request_var('title', '', true));				$special_rank = request_var('special_rank', 0);				$min_posts = ($special_rank) ? 0 : request_var('min_posts', 0);				$rank_image = request_var('rank_image', '');				// The rank image has to be a jpg, gif or png				if ($rank_image != '' && !preg_match('#(\.gif|\.png|\.jpg|\.jpeg)$#i', $rank_image))				{					$rank_image = '';				}				if (!$rank_title)				{					trigger_error($user->lang['NO_RANK_TITLE'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql_ary = array(					'rank_title'		=> $rank_title,					'rank_special'		=> $special_rank,					'rank_min'			=> $min_posts,					'rank_image'		=> htmlspecialchars_decode($rank_image)				);								if ($rank_id)				{					$sql = 'UPDATE ' . RANKS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . " WHERE rank_id = $rank_id";					$message = $user->lang['RANK_UPDATED'];					add_log('admin', 'LOG_RANK_UPDATED', $rank_title);				}				else				{					$sql = 'INSERT INTO ' . RANKS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);					$message = $user->lang['RANK_ADDED'];					add_log('admin', 'LOG_RANK_ADDED', $rank_title);				}				$db->sql_query($sql);				$cache->destroy('_ranks');				trigger_error($message . adm_back_link($this->u_action));			break;			case 'delete':				if (!$rank_id)				{					trigger_error($user->lang['MUST_SELECT_RANK'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (confirm_box(true))				{					$sql = 'SELECT rank_title						FROM ' . RANKS_TABLE . '						WHERE rank_id = ' . $rank_id;					$result = $db->sql_query($sql);					$rank_title = (string) $db->sql_fetchfield('rank_title');					$db->sql_freeresult($result);					$sql = 'DELETE FROM ' . RANKS_TABLE . "						WHERE rank_id = $rank_id";					$db->sql_query($sql);					$sql = 'UPDATE ' . USERS_TABLE . "						SET user_rank = 0						WHERE user_rank = $rank_id";					$db->sql_query($sql);					$cache->destroy('_ranks');					add_log('admin', 'LOG_RANK_REMOVED', $rank_title);				}				else				{					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(						'i'			=> $id,						'mode'		=> $mode,						'rank_id'	=> $rank_id,						'action'	=> 'delete',					)));				}			break;			case 'edit':			case 'add':				$data = $ranks = $existing_imgs = array();								$sql = 'SELECT *					FROM ' . RANKS_TABLE . '					ORDER BY rank_min ASC, rank_special ASC';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$existing_imgs[] = $row['rank_image'];					if ($action == 'edit' && $rank_id == $row['rank_id'])					{						$ranks = $row;					}				}				$db->sql_freeresult($result);				$imglist = filelist($phpbb_root_path . $config['ranks_path'], '');				$edit_img = $filename_list = '';				foreach ($imglist as $path => $img_ary)				{					sort($img_ary);					foreach ($img_ary as $img)					{						$img = $path . $img;						if ($ranks && $img == $ranks['rank_image'])						{							$selected = ' selected="selected"';							$edit_img = $img;						}						else						{							$selected = '';						}						if (strlen($img) > 255)						{							continue;						}						$filename_list .= '<option value="' . htmlspecialchars($img) . '"' . $selected . '>' . $img . ((in_array($img, $existing_imgs)) ? ' ' . $user->lang['RANK_IMAGE_IN_USE'] : '') . '</option>';					}				}				$filename_list = '<option value=""' . (($edit_img == '') ? ' selected="selected"' : '') . '>----------</option>' . $filename_list;				unset($existing_imgs, $imglist);				$template->assign_vars(array(					'S_EDIT'			=> true,					'U_BACK'			=> $this->u_action,					'RANKS_PATH'		=> $phpbb_root_path . $config['ranks_path'],					'U_ACTION'			=> $this->u_action . '&amp;id=' . $rank_id,					'RANK_TITLE'		=> (isset($ranks['rank_title'])) ? $ranks['rank_title'] : '',					'S_FILENAME_LIST'	=> $filename_list,					'RANK_IMAGE'		=> ($edit_img) ? $phpbb_root_path . $config['ranks_path'] . '/' . $edit_img : $phpbb_admin_path . 'images/spacer.gif',					'S_SPECIAL_RANK'	=> (isset($ranks['rank_special']) && $ranks['rank_special']) ? true : false,					'MIN_POSTS'			=> (isset($ranks['rank_min']) && !$ranks['rank_special']) ? $ranks['rank_min'] : 0)				);										return;			break;		}			$template->assign_vars(array(			'U_ACTION'		=> $this->u_action)		);		$sql = 'SELECT *			FROM ' . RANKS_TABLE . '			ORDER BY rank_special DESC, rank_min ASC, rank_title ASC';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$template->assign_block_vars('ranks', array(				'S_RANK_IMAGE'		=> ($row['rank_image']) ? true : false,				'S_SPECIAL_RANK'	=> ($row['rank_special']) ? true : false,				'RANK_IMAGE'		=> $phpbb_root_path . $config['ranks_path'] . '/' . $row['rank_image'],				'RANK_TITLE'		=> $row['rank_title'],				'MIN_POSTS'			=> $row['rank_min'],				'U_EDIT'			=> $this->u_action . '&amp;action=edit&amp;id=' . $row['rank_id'],				'U_DELETE'			=> $this->u_action . '&amp;action=delete&amp;id=' . $row['rank_id'])			);			}		$db->sql_freeresult($result);	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_jabber_info{	function module()	{		return array(			'filename'	=> 'acp_jabber',			'title'		=> 'ACP_JABBER_SETTINGS',			'version'	=> '1.0.0',			'modes'		=> array(				'settings'		=> array('title' => 'ACP_JABBER_SETTINGS', 'auth' => 'acl_a_jabber', 'cat' => array('ACP_CLIENT_COMMUNICATION')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/define('IN_PHPBB', true);define('IN_CRON', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);// Do not update users last page entry$user->session_begin(false);$auth->acl($user->data);$cron_type = request_var('cron_type', '');// Output transparent gifheader('Cache-Control: no-cache');header('Content-type: image/gif');header('Content-length: 43');echo base64_decode('R0lGODlhAQABAIAAAP///wAAACH5BAEAAAAALAAAAAABAAEAAAICRAEAOw==');// Flush here to prevent browser from showing the page as loading while running cron.flush();if (!isset($config['cron_lock'])){	set_config('cron_lock', '0', true);}// make sure cron doesn't run multiple times in parallelif ($config['cron_lock']){	// if the other process is running more than an hour already we have to assume it	// aborted without cleaning the lock	$time = explode(' ', $config['cron_lock']);	$time = $time[0];	if ($time + 3600 >= time())	{		exit;	}}define('CRON_ID', time() . ' ' . unique_id());$sql = 'UPDATE ' . CONFIG_TABLE . "	SET config_value = '" . $db->sql_escape(CRON_ID) . "'	WHERE config_name = 'cron_lock' AND config_value = '" . $db->sql_escape($config['cron_lock']) . "'";$db->sql_query($sql);// another cron process altered the table between script start and UPDATE query so exitif ($db->sql_affectedrows() != 1){	exit;}/*** Run cron-like action* Real cron-based layer will be introduced in 3.2*/switch ($cron_type){	case 'queue':		if (time() - $config['queue_interval'] <= $config['last_queue_run'] || !file_exists($phpbb_root_path . 'cache/queue.' . $phpEx))		{			break;		}		include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);		$queue = new queue();		$queue->process();	break;	case 'tidy_cache':		if (time() - $config['cache_gc'] <= $config['cache_last_gc'] || !method_exists($cache, 'tidy'))		{			break;		}		$cache->tidy();	break;	case 'tidy_search':				// Select the search method		$search_type = basename($config['search_type']);		if (time() - $config['search_gc'] <= $config['search_last_gc'] || !file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx))		{			break;		}		include_once("{$phpbb_root_path}includes/search/$search_type.$phpEx");		// We do some additional checks in the module to ensure it can actually be utilised		$error = false;		$search = new $search_type($error);		if ($error)		{			break;		}		$search->tidy();	break;	case 'tidy_warnings':		if (time() - $config['warnings_gc'] <= $config['warnings_last_gc'])		{			break;		}		include_once($phpbb_root_path . 'includes/functions_admin.' . $phpEx);		tidy_warnings();	break;	case 'tidy_database':		if (time() - $config['database_gc'] <= $config['database_last_gc'])		{			break;		}		include_once($phpbb_root_path . 'includes/functions_admin.' . $phpEx);		tidy_database();	break;	case 'tidy_sessions':		if (time() - $config['session_gc'] <= $config['session_last_gc'])		{			break;		}		$user->session_gc();	break;	case 'prune_forum':		$forum_id = request_var('f', 0);		$sql = 'SELECT forum_id, prune_next, enable_prune, prune_days, prune_viewed, forum_flags, prune_freq			FROM ' . FORUMS_TABLE . "			WHERE forum_id = $forum_id";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$row)		{			break;		}		// Do the forum Prune thang		if ($row['prune_next'] < time() && $row['enable_prune'])		{			include_once($phpbb_root_path . 'includes/functions_admin.' . $phpEx);			if ($row['prune_days'])			{				auto_prune($row['forum_id'], 'posted', $row['forum_flags'], $row['prune_days'], $row['prune_freq']);			}			if ($row['prune_viewed'])			{				auto_prune($row['forum_id'], 'viewed', $row['forum_flags'], $row['prune_viewed'], $row['prune_freq']);			}		}	break;}// Unloading cache and closing db after having done the dirty work.unlock_cron();garbage_collection();exit;/*** Unlock cron script*/function unlock_cron(){	global $db;	$sql = 'UPDATE ' . CONFIG_TABLE . "		SET config_value = '0'		WHERE config_name = 'cron_lock' AND config_value = '" . $db->sql_escape(CRON_ID) . "'";	$db->sql_query($sql);}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_email{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $table_prefix;		$user->add_lang('acp/email');		$this->tpl_name = 'acp_email';		$this->page_title = 'ACP_MASS_EMAIL';		$form_key = 'acp_email';		add_form_key($form_key);		// Set some vars		$submit = (isset($_POST['submit'])) ? true : false;		$error = array();		$usernames	= request_var('usernames', '', true);		$group_id	= request_var('g', 0);		$subject	= utf8_normalize_nfc(request_var('subject', '', true));		$message	= utf8_normalize_nfc(request_var('message', '', true));		// Do the job ...		if ($submit)		{			// Error checking needs to go here ... if no subject and/or no message then skip			// over the send and return to the form			$use_queue		= (isset($_POST['send_immediately'])) ? false : true;			$priority		= request_var('mail_priority_flag', MAIL_NORMAL_PRIORITY);			if (!check_form_key($form_key))			{				$error[] = $user->lang['FORM_INVALID'];			}			if (!$subject)			{				$error[] = $user->lang['NO_EMAIL_SUBJECT'];			}			if (!$message)			{				$error[] = $user->lang['NO_EMAIL_MESSAGE'];			}			if (!sizeof($error))			{				if ($usernames)				{					// If giving usernames the admin is able to email inactive users too...					$sql = 'SELECT username, user_email, user_jabber, user_notify_type, user_lang						FROM ' . USERS_TABLE . '						WHERE ' . $db->sql_in_set('username_clean', array_map('utf8_clean_string', explode("\n", $usernames))) . '							AND user_allow_massemail = 1						ORDER BY user_lang, user_notify_type'; // , SUBSTRING(user_email FROM INSTR(user_email, '@'))				}				else				{					if ($group_id)					{						$sql_ary = array(							'SELECT'	=> 'u.user_email, u.username, u.username_clean, u.user_lang, u.user_jabber, u.user_notify_type',							'FROM'		=> array(								USERS_TABLE			=> 'u',								USER_GROUP_TABLE	=> 'ug',							),							'WHERE'		=> 'ug.group_id = ' . $group_id . '								AND ug.user_pending = 0								AND u.user_id = ug.user_id								AND u.user_allow_massemail = 1								AND u.user_type IN (' . USER_NORMAL . ', ' . USER_FOUNDER . ')',							'ORDER_BY'	=> 'u.user_lang, u.user_notify_type',						);					}					else					{						$sql_ary = array(							'SELECT'	=> 'u.username, u.username_clean, u.user_email, u.user_jabber, u.user_lang, u.user_notify_type',							'FROM'		=> array(								USERS_TABLE	=> 'u',							),							'WHERE'		=> 'u.user_allow_massemail = 1								AND u.user_type IN (' . USER_NORMAL . ', ' . USER_FOUNDER . ')',							'ORDER_BY'	=> 'u.user_lang, u.user_notify_type',						);					}					// Mail banned or not					if (!isset($_REQUEST['mail_banned_flag']))					{						$sql_ary['WHERE'] .= ' AND (b.ban_id IS NULL						        OR b.ban_exclude = 1)';						$sql_ary['LEFT_JOIN'] = array(							array(								'FROM'	=> array(									BANLIST_TABLE	=> 'b',								),								'ON'	=> 'u.user_id = b.ban_userid',							),						);					}					$sql = $db->sql_build_query('SELECT', $sql_ary);				}				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				if (!$row)				{					$db->sql_freeresult($result);					trigger_error($user->lang['NO_USER'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$i = $j = 0;				// Send with BCC				// Maximum number of bcc recipients				$max_chunk_size = (int) $config['email_max_chunk_size'];				$email_list = array();				$old_lang = $row['user_lang'];				$old_notify_type = $row['user_notify_type'];				do				{					if (($row['user_notify_type'] == NOTIFY_EMAIL && $row['user_email']) ||						($row['user_notify_type'] == NOTIFY_IM && $row['user_jabber']) ||						($row['user_notify_type'] == NOTIFY_BOTH && ($row['user_email'] || $row['user_jabber'])))					{						if ($i == $max_chunk_size || $row['user_lang'] != $old_lang || $row['user_notify_type'] != $old_notify_type)						{							$i = 0;							if (sizeof($email_list))							{								$j++;							}							$old_lang = $row['user_lang'];							$old_notify_type = $row['user_notify_type'];						}						$email_list[$j][$i]['lang']		= $row['user_lang'];						$email_list[$j][$i]['method']	= $row['user_notify_type'];						$email_list[$j][$i]['email']	= $row['user_email'];						$email_list[$j][$i]['name']		= $row['username'];						$email_list[$j][$i]['jabber']	= $row['user_jabber'];						$i++;					}				}				while ($row = $db->sql_fetchrow($result));				$db->sql_freeresult($result);				// Send the messages				include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);				include_once($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$messenger = new messenger($use_queue);				$errored = false;				for ($i = 0, $size = sizeof($email_list); $i < $size; $i++)				{					$used_lang = $email_list[$i][0]['lang'];					$used_method = $email_list[$i][0]['method'];					for ($j = 0, $list_size = sizeof($email_list[$i]); $j < $list_size; $j++)					{						$email_row = $email_list[$i][$j];						$messenger->{((sizeof($email_list[$i]) == 1) ? 'to' : 'bcc')}($email_row['email'], $email_row['name']);						$messenger->im($email_row['jabber'], $email_row['name']);					}					$messenger->template('admin_send_email', $used_lang);					$messenger->anti_abuse_headers($config, $user);					$messenger->subject(htmlspecialchars_decode($subject));					$messenger->set_mail_priority($priority);					$messenger->assign_vars(array(						'CONTACT_EMAIL' => $config['board_contact'],						'MESSAGE'		=> htmlspecialchars_decode($message))					);					if (!($messenger->send($used_method)))					{						$errored = true;					}				}				unset($email_list);				$messenger->save_queue();				if ($usernames)				{					$usernames = explode("\n", $usernames);					add_log('admin', 'LOG_MASS_EMAIL', implode(', ', utf8_normalize_nfc($usernames)));				}				else				{					if ($group_id)					{						$group_name = get_group_name($group_id);					}					else					{						// Not great but the logging routine doesn't cope well with localising on the fly						$group_name = $user->lang['ALL_USERS'];					}					add_log('admin', 'LOG_MASS_EMAIL', $group_name);				}				if (!$errored)				{					$message = ($use_queue) ? $user->lang['EMAIL_SENT_QUEUE'] : $user->lang['EMAIL_SENT'];					trigger_error($message . adm_back_link($this->u_action));				}				else				{					$message = sprintf($user->lang['EMAIL_SEND_ERROR'], '<a href="' . append_sid("{$phpbb_admin_path}index.$phpEx", 'i=logs&amp;mode=critical') . '">', '</a>');					trigger_error($message . adm_back_link($this->u_action), E_USER_WARNING);				}			}		}		// Exclude bots and guests...		$sql = 'SELECT group_id			FROM ' . GROUPS_TABLE . "			WHERE group_name IN ('BOTS', 'GUESTS')";		$result = $db->sql_query($sql);		$exclude = array();		while ($row = $db->sql_fetchrow($result))		{			$exclude[] = $row['group_id'];		}		$db->sql_freeresult($result);		$select_list = '<option value="0"' . ((!$group_id) ? ' selected="selected"' : '') . '>' . $user->lang['ALL_USERS'] . '</option>';		$select_list .= group_select_options($group_id, $exclude);		$s_priority_options = '<option value="' . MAIL_LOW_PRIORITY . '">' . $user->lang['MAIL_LOW_PRIORITY'] . '</option>';		$s_priority_options .= '<option value="' . MAIL_NORMAL_PRIORITY . '" selected="selected">' . $user->lang['MAIL_NORMAL_PRIORITY'] . '</option>';		$s_priority_options .= '<option value="' . MAIL_HIGH_PRIORITY . '">' . $user->lang['MAIL_HIGH_PRIORITY'] . '</option>';		$template->assign_vars(array(			'S_WARNING'				=> (sizeof($error)) ? true : false,			'WARNING_MSG'			=> (sizeof($error)) ? implode('<br />', $error) : '',			'U_ACTION'				=> $this->u_action,			'S_GROUP_OPTIONS'		=> $select_list,			'USERNAMES'				=> $usernames,			'U_FIND_USERNAME'		=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=acp_email&amp;field=usernames'),			'SUBJECT'				=> $subject,			'MESSAGE'				=> $message,			'S_PRIORITY_OPTIONS'	=> $s_priority_options)		);	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class ucp_profile_info{	function module()	{		return array(			'filename'	=> 'ucp_profile',			'title'		=> 'UCP_PROFILE',			'version'	=> '1.0.0',			'modes'		=> array(				'profile_info'	=> array('title' => 'UCP_PROFILE_PROFILE_INFO', 'auth' => '', 'cat' => array('UCP_PROFILE')),				'signature'		=> array('title' => 'UCP_PROFILE_SIGNATURE', 'auth' => '', 'cat' => array('UCP_PROFILE')),				'avatar'		=> array('title' => 'UCP_PROFILE_AVATAR', 'auth' => 'cfg_allow_avatar && (cfg_allow_avatar_local || cfg_allow_avatar_remote || cfg_allow_avatar_upload || cfg_allow_avatar_remote_upload)', 'cat' => array('UCP_PROFILE')),				'reg_details'	=> array('title' => 'UCP_PROFILE_REG_DETAILS', 'auth' => '', 'cat' => array('UCP_PROFILE')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_inactive{	var $u_action;	var $p_master;	function acp_inactive(&$p_master)	{		$this->p_master = &$p_master;	}	function main($id, $mode)	{		global $config, $db, $user, $auth, $template;		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $table_prefix;		include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		$user->add_lang('memberlist');		$action = request_var('action', '');		$mark	= (isset($_REQUEST['mark'])) ? request_var('mark', array(0)) : array();		$start	= request_var('start', 0);		$submit = isset($_POST['submit']);		// Sort keys		$sort_days	= request_var('st', 0);		$sort_key	= request_var('sk', 'i');		$sort_dir	= request_var('sd', 'd');		$form_key = 'acp_inactive';		add_form_key($form_key);		// We build the sort key and per page settings here, because they may be needed later		// Number of entries to display		$per_page = request_var('users_per_page', (int) $config['topics_per_page']);		// Sorting		$limit_days = array(0 => $user->lang['ALL_ENTRIES'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);		$sort_by_text = array('i' => $user->lang['SORT_INACTIVE'], 'j' => $user->lang['SORT_REG_DATE'], 'l' => $user->lang['SORT_LAST_VISIT'], 'd' => $user->lang['SORT_LAST_REMINDER'], 'r' => $user->lang['SORT_REASON'], 'u' => $user->lang['SORT_USERNAME'], 'p' => $user->lang['SORT_POSTS'], 'e' => $user->lang['SORT_REMINDER']);		$sort_by_sql = array('i' => 'user_inactive_time', 'j' => 'user_regdate', 'l' => 'user_lastvisit', 'd' => 'user_reminded_time', 'r' => 'user_inactive_reason', 'u' => 'username_clean', 'p' => 'user_posts', 'e' => 'user_reminded');		$s_limit_days = $s_sort_key = $s_sort_dir = $u_sort_param = '';		gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);		if ($submit && sizeof($mark))		{			if ($action !== 'delete' && !check_form_key($form_key))			{				trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action), E_USER_WARNING);			}			switch ($action)			{				case 'activate':				case 'delete':					$sql = 'SELECT user_id, username						FROM ' . USERS_TABLE . '						WHERE ' . $db->sql_in_set('user_id', $mark);					$result = $db->sql_query($sql);					$user_affected = array();					while ($row = $db->sql_fetchrow($result))					{						$user_affected[$row['user_id']] = $row['username'];					}					$db->sql_freeresult($result);					if ($action == 'activate')					{						// Get those 'being activated'...						$sql = 'SELECT user_id, username' . (($config['require_activation'] == USER_ACTIVATION_ADMIN) ? ', user_email, user_lang' : '') . '							FROM ' . USERS_TABLE . '							WHERE ' . $db->sql_in_set('user_id', $mark) . '								AND user_type = ' . USER_INACTIVE;						$result = $db->sql_query($sql);						$inactive_users = array();						while ($row = $db->sql_fetchrow($result))						{							$inactive_users[] = $row;						}						$db->sql_freeresult($result);						user_active_flip('activate', $mark);						if ($config['require_activation'] == USER_ACTIVATION_ADMIN && !empty($inactive_users))						{							include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);							$messenger = new messenger(false);							foreach ($inactive_users as $row)							{								$messenger->template('admin_welcome_activated', $row['user_lang']);								$messenger->to($row['user_email'], $row['username']);								$messenger->anti_abuse_headers($config, $user);								$messenger->assign_vars(array(									'USERNAME'	=> htmlspecialchars_decode($row['username']))								);								$messenger->send(NOTIFY_EMAIL);							}							$messenger->save_queue();						}						if (!empty($inactive_users))						{							foreach ($inactive_users as $row)							{								add_log('admin', 'LOG_USER_ACTIVE', $row['username']);								add_log('user', $row['user_id'], 'LOG_USER_ACTIVE_USER');							}						}						// For activate we really need to redirect, else a refresh can result in users being deactivated again						$u_action = $this->u_action . "&amp;$u_sort_param&amp;start=$start";						$u_action .= ($per_page != $config['topics_per_page']) ? "&amp;users_per_page=$per_page" : '';						redirect($u_action);					}					else if ($action == 'delete')					{						if (confirm_box(true))						{							if (!$auth->acl_get('a_userdel'))							{								trigger_error($user->lang['NO_AUTH_OPERATION'] . adm_back_link($this->u_action), E_USER_WARNING);							}							foreach ($mark as $user_id)							{								user_delete('retain', $user_id, $user_affected[$user_id]);							}							add_log('admin', 'LOG_INACTIVE_' . strtoupper($action), implode(', ', $user_affected));						}						else						{							$s_hidden_fields = array(								'mode'			=> $mode,								'action'		=> $action,								'mark'			=> $mark,								'submit'		=> 1,								'start'			=> $start,							);							confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields($s_hidden_fields));						}					}				break;				case 'remind':					if (empty($config['email_enable']))					{						trigger_error($user->lang['EMAIL_DISABLED'] . adm_back_link($this->u_action), E_USER_WARNING);					}					$sql = 'SELECT user_id, username, user_email, user_lang, user_jabber, user_notify_type, user_regdate, user_actkey						FROM ' . USERS_TABLE . '						WHERE ' . $db->sql_in_set('user_id', $mark) . '							AND user_inactive_reason';					$sql .= ($config['require_activation'] == USER_ACTIVATION_ADMIN) ? ' = ' . INACTIVE_REMIND : ' <> ' . INACTIVE_MANUAL;					$result = $db->sql_query($sql);					if ($row = $db->sql_fetchrow($result))					{						// Send the messages						include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);						$messenger = new messenger();						$usernames = $user_ids = array();						do						{							$messenger->template('user_remind_inactive', $row['user_lang']);							$messenger->to($row['user_email'], $row['username']);							$messenger->im($row['user_jabber'], $row['username']);							$messenger->anti_abuse_headers($config, $user);							$messenger->assign_vars(array(								'USERNAME'		=> htmlspecialchars_decode($row['username']),								'REGISTER_DATE'	=> $user->format_date($row['user_regdate'], false, true),								'U_ACTIVATE'	=> generate_board_url() . "/ucp.$phpEx?mode=activate&u=" . $row['user_id'] . '&k=' . $row['user_actkey'])							);							$messenger->send($row['user_notify_type']);							$usernames[] = $row['username'];							$user_ids[] = (int) $row['user_id'];						}						while ($row = $db->sql_fetchrow($result));						$messenger->save_queue();						// Add the remind state to the database						$sql = 'UPDATE ' . USERS_TABLE . '							SET user_reminded = user_reminded + 1,								user_reminded_time = ' . time() . '							WHERE ' . $db->sql_in_set('user_id', $user_ids);						$db->sql_query($sql);						add_log('admin', 'LOG_INACTIVE_REMIND', implode(', ', $usernames));						unset($usernames);					}					$db->sql_freeresult($result);					// For remind we really need to redirect, else a refresh can result in more than one reminder					$u_action = $this->u_action . "&amp;$u_sort_param&amp;start=$start";					$u_action .= ($per_page != $config['topics_per_page']) ? "&amp;users_per_page=$per_page" : '';					redirect($u_action);				break;			}		}		// Define where and sort sql for use in displaying logs		$sql_where = ($sort_days) ? (time() - ($sort_days * 86400)) : 0;		$sql_sort = $sort_by_sql[$sort_key] . ' ' . (($sort_dir == 'd') ? 'DESC' : 'ASC');		$inactive = array();		$inactive_count = 0;		$start = view_inactive_users($inactive, $inactive_count, $per_page, $start, $sql_where, $sql_sort);		foreach ($inactive as $row)		{			$template->assign_block_vars('inactive', array(				'INACTIVE_DATE'	=> $user->format_date($row['user_inactive_time']),				'REMINDED_DATE'	=> $user->format_date($row['user_reminded_time']),				'JOINED'		=> $user->format_date($row['user_regdate']),				'LAST_VISIT'	=> (!$row['user_lastvisit']) ? ' - ' : $user->format_date($row['user_lastvisit']),				'REASON'		=> $row['inactive_reason'],				'USER_ID'		=> $row['user_id'],				'POSTS'			=> ($row['user_posts']) ? $row['user_posts'] : 0,				'REMINDED'		=> $row['user_reminded'],				'REMINDED_EXPLAIN'	=> $user->lang('USER_LAST_REMINDED', (int) $row['user_reminded'], $user->format_date($row['user_reminded_time'])),				'USERNAME_FULL'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour'], false, append_sid("{$phpbb_admin_path}index.$phpEx", 'i=users&amp;mode=overview')),				'USERNAME'			=> get_username_string('username', $row['user_id'], $row['username'], $row['user_colour']),				'USER_COLOR'		=> get_username_string('colour', $row['user_id'], $row['username'], $row['user_colour']),				'U_USER_ADMIN'	=> append_sid("{$phpbb_admin_path}index.$phpEx", "i=users&amp;mode=overview&amp;u={$row['user_id']}"),				'U_SEARCH_USER'	=> ($auth->acl_get('u_search')) ? append_sid("{$phpbb_root_path}search.$phpEx", "author_id={$row['user_id']}&amp;sr=posts") : '',			));		}		$option_ary = array('activate' => 'ACTIVATE', 'delete' => 'DELETE');		if ($config['email_enable'])		{			$option_ary += array('remind' => 'REMIND');		}		$template->assign_vars(array(			'S_INACTIVE_USERS'		=> true,			'S_INACTIVE_OPTIONS'	=> build_select($option_ary),			'S_LIMIT_DAYS'	=> $s_limit_days,			'S_SORT_KEY'	=> $s_sort_key,			'S_SORT_DIR'	=> $s_sort_dir,			'S_ON_PAGE'		=> on_page($inactive_count, $per_page, $start),			'PAGINATION'	=> generate_pagination($this->u_action . "&amp;$u_sort_param&amp;users_per_page=$per_page", $inactive_count, $per_page, $start, true),			'USERS_PER_PAGE'	=> $per_page,			'U_ACTION'		=> $this->u_action . "&amp;$u_sort_param&amp;users_per_page=$per_page&amp;start=$start",		));		$this->tpl_name = 'acp_inactive';		$this->page_title = 'ACP_INACTIVE_USERS';	}}?>
<?php/**** help_bbcode [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/if (!defined('IN_PHPBB')){	exit;}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$help = array(	array(		0 => '--',		1 => 'Introduction'	),	array(		0 => 'What is BBCode?',		1 => 'BBCode is a special implementation of HTML. Whether you can actually use BBCode in your posts on the forum is determined by the administrator. In addition you can disable BBCode on a per post basis via the posting form. BBCode itself is similar in style to HTML, tags are enclosed in square brackets [ and ] rather than &lt; and &gt; and it offers greater control over what and how something is displayed. Depending on the template you are using you may find adding BBCode to your posts is made much easier through a clickable interface above the message area on the posting form. Even with this you may find the following guide useful.'	),	array(		0 => '--',		1 => 'Text Formatting'	),	array(		0 => 'How to create bold, italic and underlined text',		1 => 'BBCode includes tags to allow you to quickly change the basic style of your text. This is achieved in the following ways: <ul><li>To make a piece of text bold enclose it in <strong>[b][/b]</strong>, e.g. <br /><br /><strong>[b]</strong>Hello<strong>[/b]</strong><br /><br />will become <strong>Hello</strong></li><li>For underlining use <strong>[u][/u]</strong>, for example:<br /><br /><strong>[u]</strong>Good Morning<strong>[/u]</strong><br /><br />becomes <span style="text-decoration: underline">Good Morning</span></li><li>To italicise text use <strong>[i][/i]</strong>, e.g.<br /><br />This is <strong>[i]</strong>Great!<strong>[/i]</strong><br /><br />would give This is <i>Great!</i></li></ul>'	),	array(		0 => 'How to change the text colour or size',		1 => 'To alter the colour or size of your text the following tags can be used. Keep in mind that how the output appears will depend on the viewers browser and system: <ul><li>Changing the colour of text is achieved by wrapping it in <strong>[color=][/color]</strong>. You can specify either a recognised colour name (eg. red, blue, yellow, etc.) or the hexadecimal triplet alternative, e.g. #FFFFFF, #000000. For example, to create red text you could use:<br /><br /><strong>[color=red]</strong>Hello!<strong>[/color]</strong><br /><br />or<br /><br /><strong>[color=#FF0000]</strong>Hello!<strong>[/color]</strong><br /><br />Both will output <span style="color:red">Hello!</span></li><li>Changing the text size is achieved in a similar way using <strong>[size=][/size]</strong>. This tag is dependent on the template the user has selected but the recommended format is a numerical value representing the text size in percent, starting at 20 (very small) through to 200 (very large) by default. For example:<br /><br /><strong>[size=30]</strong>SMALL<strong>[/size]</strong><br /><br />will generally be <span style="font-size:30%;">SMALL</span><br /><br />whereas:<br /><br /><strong>[size=200]</strong>HUGE!<strong>[/size]</strong><br /><br />will be <span style="font-size:200%;">HUGE!</span></li></ul>'	),	array(		0 => 'Can I combine formatting tags?',		1 => 'Yes, of course you can, for example to get someones attention you may write:<br /><br /><strong>[size=200][color=red][b]</strong>LOOK AT ME!<strong>[/b][/color][/size]</strong><br /><br />this would output <span style="color:red;font-size:200%;"><strong>LOOK AT ME!</strong></span><br /><br />We dont recommend you output lots of text that looks like this though! Remember it is up to you, the poster, to ensure tags are closed correctly. For example the following is incorrect:<br /><br /><strong>[b][u]</strong>This is wrong<strong>[/b][/u]</strong>'	),	array(		0 => '--',		1 => 'Quoting and outputting fixed-width text'	),	array(		0 => 'Quoting text in replies',		1 => 'There are two ways you can quote text, with a reference or without.<ul><li>When you utilise the Quote function to reply to a post on the board you should notice that the post text is added to the message window enclosed in a <strong>[quote=&quot;&quot;][/quote]</strong> block. This method allows you to quote with a reference to a person or whatever else you choose to put! For example to quote a piece of text Mr. Blobby wrote you would enter:<br /><br /><strong>[quote=&quot;Mr. Blobby&quot;]</strong>The text Mr. Blobby wrote would go here<strong>[/quote]</strong><br /><br />The resulting output will automatically add &quot;Mr. Blobby wrote:&quot; before the actual text. Remember you <strong>must</strong> include the quotation marks &quot;&quot; around the name you are quoting, they are not optional.</li><li>The second method allows you to blindly quote something. To utilise this enclose the text in <strong>[quote][/quote]</strong> tags. When you view the message it will simply show the text within a quotation block.</li></ul>'	),	array(		0 => 'Outputting code or fixed width data',		1 => 'If you want to output a piece of code or in fact anything that requires a fixed width, e.g. Courier type font you should enclose the text in <strong>[code][/code]</strong> tags, e.g.<br /><br /><strong>[code]</strong>echo &quot;This is some code&quot;;<strong>[/code]</strong><br /><br />All formatting used within <strong>[code][/code]</strong> tags is retained when you later view it. PHP syntax highlighting can be enabled using <strong>[code=php][/code]</strong> and is recommended when posting PHP code samples as it improves readability.'	),	array(		0 => '--',		1 => 'Generating lists'	),	array(		0 => 'Creating an Unordered list',		1 => 'BBCode supports two types of lists, unordered and ordered. They are essentially the same as their HTML equivalents. An unordered list outputs each item in your list sequentially one after the other indenting each with a bullet character. To create an unordered list you use <strong>[list][/list]</strong> and define each item within the list using <strong>[*]</strong>. For example to list your favourite colours you could use:<br /><br /><strong>[list]</strong><br /><strong>[*]</strong>Red<br /><strong>[*]</strong>Blue<br /><strong>[*]</strong>Yellow<br /><strong>[/list]</strong><br /><br />This would generate the following list:<ul><li>Red</li><li>Blue</li><li>Yellow</li></ul>'	),	array(		0 => 'Creating an Ordered list',		1 => 'The second type of list, an ordered list, gives you control over what is output before each item. To create an ordered list you use <strong>[list=1][/list]</strong> to create a numbered list or alternatively <strong>[list=a][/list]</strong> for an alphabetical list. As with the unordered list, items are specified using <strong>[*]</strong>. For example:<br /><br /><strong>[list=1]</strong><br /><strong>[*]</strong>Go to the shops<br /><strong>[*]</strong>Buy a new computer<br /><strong>[*]</strong>Swear at computer when it crashes<br /><strong>[/list]</strong><br /><br />will generate the following:<ol style="list-style-type: decimal;"><li>Go to the shops</li><li>Buy a new computer</li><li>Swear at computer when it crashes</li></ol>Whereas for an alphabetical list you would use:<br /><br /><strong>[list=a]</strong><br /><strong>[*]</strong>The first possible answer<br /><strong>[*]</strong>The second possible answer<br /><strong>[*]</strong>The third possible answer<br /><strong>[/list]</strong><br /><br />giving<ol style="list-style-type: lower-alpha"><li>The first possible answer</li><li>The second possible answer</li><li>The third possible answer</li></ol>'	),	// This block will switch the FAQ-Questions to the second template column	array(		0 => '--',		1 => '--'	),	array(		0 => '--',		1 => 'Creating Links'	),	array(		0 => 'Linking to another site',		1 => 'phpBB BBCode supports a number of ways of creating URIs (Uniform Resource Indicators) better known as URLs.<ul><li>The first of these uses the <strong>[url=][/url]</strong> tag, whatever you type after the = sign will cause the contents of that tag to act as a URL. For example to link to phpBB.com you could use:<br /><br /><strong>[url=http://www.phpbb.com/]</strong>Visit phpBB!<strong>[/url]</strong><br /><br />This would generate the following link, <a href="http://www.phpbb.com/">Visit phpBB!</a> Please notice that the link opens in the same window or a new window depending on the users browser preferences.</li><li>If you want the URL itself displayed as the link you can do this by simply using:<br /><br /><strong>[url]</strong>http://www.phpbb.com/<strong>[/url]</strong><br /><br />This would generate the following link, <a href="http://www.phpbb.com/">http://www.phpbb.com/</a></li><li>Additionally, phpBB features something called <i>Magic Links</i>, this will turn any syntactically correct URL into a link without you needing to specify any tags or even the leading http://. For example typing www.phpbb.com into your message will automatically lead to <a href="http://www.phpbb.com/">www.phpbb.com</a> being output when you view the message.</li><li>The same thing applies equally to e-mail addresses, you can either specify an address explicitly for example:<br /><br /><strong>[email]</strong>no.one@domain.adr<strong>[/email]</strong><br /><br />which will output <a href="mailto:no.one@domain.adr">no.one@domain.adr</a> or you can just type no.one@domain.adr into your message and it will be automatically converted when you view.</li></ul>As with all the BBCode tags you can wrap URLs around any of the other tags such as <strong>[img][/img]</strong> (see next entry), <strong>[b][/b]</strong>, etc. As with the formatting tags it is up to you to ensure the correct open and close order is following, for example:<br /><br /><strong>[url=http://www.google.com/][img]</strong>http://www.google.com/intl/en_ALL/images/logo.gif<strong>[/url][/img]</strong><br /><br />is <span style="text-decoration: underline">not</span> correct which may lead to your post being deleted so take care.'	),	array(		0 => '--',		1 => 'Showing images in posts'	),	array(		0 => 'Adding an image to a post',		1 => 'phpBB BBCode incorporates a tag for including images in your posts. Two very important things to remember when using this tag are: many users do not appreciate lots of images being shown in posts and secondly the image you display must already be available on the internet (it cannot exist only on your computer for example, unless you run a webserver!). To display an image you must surround the URL pointing to the image with <strong>[img][/img]</strong> tags. For example:<br /><br /><strong>[img]</strong>http://www.google.com/intl/en_ALL/images/logo.gif<strong>[/img]</strong><br /><br />As noted in the URL section above you can wrap an image in a <strong>[url][/url]</strong> tag if you wish, e.g.<br /><br /><strong>[url=http://www.google.com/][img]</strong>http://www.google.com/intl/en_ALL/images/logo.gif<strong>[/img][/url]</strong><br /><br />would generate:<br /><br /><a href="http://www.google.com/"><img src="http://www.google.com/intl/en_ALL/images/logo.gif" alt="" /></a>'	),	array(		0 => 'Adding attachments into a post',		1 => 'Attachments can now be placed in any part of a post by using the new <strong>[attachment=][/attachment]</strong> BBCode, if the attachments functionality has been enabled by a board administrator and if you are given the appropriate permissions to create attachments. Within the posting screen is a drop-down box (respectively a button) for placing attachments inline.'	),	array(		0 => '--',		1 => 'Other matters'	),	array(		0 => 'Can I add my own tags?',		1 => 'If you are an administrator on this board and have the proper permissions, you can add further BBCodes through the Custom BBCodes section.'	));?>
<?php/**** @package install* @version $Id$* @copyright (c) 2007 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** A wrapper function for the normalizer which takes care of including the class if required and modifies the passed strings* to be in NFC (Normalization Form Composition).** @param	mixed	$strings	a string or an array of strings to normalize* @return	mixed				the normalized content, preserving array keys if array given.*/function utf8_new_normalize_nfc($strings){	if (empty($strings))	{		return $strings;	}	if (!is_array($strings))	{		utf_new_normalizer::nfc($strings);	}	else if (is_array($strings))	{		foreach ($strings as $key => $string)		{			if (is_array($string))			{				foreach ($string as $_key => $_string)				{					utf_new_normalizer::nfc($strings[$key][$_key]);				}			}			else			{				utf_new_normalizer::nfc($strings[$key]);			}		}	}	return $strings;}class utf_new_normalizer{	/**	* Validate, cleanup and normalize a string	*	* The ultimate convenience function! Clean up invalid UTF-8 sequences,	* and convert to Normal Form C, canonical composition.	*	* @param	string	&$str	The dirty string	* @return	string			The same string, all shiny and cleaned-up	*/	function cleanup(&$str)	{		// The string below is the list of all autorized characters, sorted by frequency in latin text		$pos = strspn($str, "\x20\x65\x69\x61\x73\x6E\x74\x72\x6F\x6C\x75\x64\x5D\x5B\x63\x6D\x70\x27\x0A\x67\x7C\x68\x76\x2E\x66\x62\x2C\x3A\x3D\x2D\x71\x31\x30\x43\x32\x2A\x79\x78\x29\x28\x4C\x39\x41\x53\x2F\x50\x22\x45\x6A\x4D\x49\x6B\x33\x3E\x35\x54\x3C\x44\x34\x7D\x42\x7B\x38\x46\x77\x52\x36\x37\x55\x47\x4E\x3B\x4A\x7A\x56\x23\x48\x4F\x57\x5F\x26\x21\x4B\x3F\x58\x51\x25\x59\x5C\x09\x5A\x2B\x7E\x5E\x24\x40\x60\x7F\x0D");		$len = strlen($str);		if ($pos == $len)		{			// ASCII strings with no special chars return immediately			return;		}		// Note: we do not check for $GLOBALS['utf_canonical_decomp']. It is assumed they are always loaded together		if (!isset($GLOBALS['utf_nfc_qc']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_nfc_qc.' . $phpEx);		}		if (!isset($GLOBALS['utf_canonical_decomp']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_canonical_decomp.' . $phpEx);		}		// Replace any byte in the range 0x00..0x1F, except for \r, \n and \t		// We replace those characters with a 0xFF byte, which is illegal in UTF-8 and will in turn be replaced with a UTF replacement char		$str = strtr(			$str,			"\x00\x01\x02\x03\x04\x05\x06\x07\x08\x0B\x0C\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F",			"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"		);		$str = utf_new_normalizer::recompose($str, $pos, $len, $GLOBALS['utf_nfc_qc'], $GLOBALS['utf_canonical_decomp']);	}	/**	* Validate and normalize a UTF string to NFC	*	* @param	string	&$str	Unchecked UTF string	* @return	string			The string, validated and in normal form	*/	function nfc(&$str)	{		$pos = strspn($str, UTF8_ASCII_RANGE);		$len = strlen($str);		if ($pos == $len)		{			// ASCII strings return immediately			return;		}		if (!isset($GLOBALS['utf_nfc_qc']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_nfc_qc.' . $phpEx);		}		if (!isset($GLOBALS['utf_canonical_decomp']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_canonical_decomp.' . $phpEx);		}		$str = utf_new_normalizer::recompose($str, $pos, $len, $GLOBALS['utf_nfc_qc'], $GLOBALS['utf_canonical_decomp']);	}	/**	* Validate and normalize a UTF string to NFKC	*	* @param	string	&$str	Unchecked UTF string	* @return	string			The string, validated and in normal form	*/	function nfkc(&$str)	{		$pos = strspn($str, UTF8_ASCII_RANGE);		$len = strlen($str);		if ($pos == $len)		{			// ASCII strings return immediately			return;		}		if (!isset($GLOBALS['utf_nfkc_qc']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_nfkc_qc.' . $phpEx);		}		if (!isset($GLOBALS['utf_compatibility_decomp']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_compatibility_decomp.' . $phpEx);		}		$str = utf_new_normalizer::recompose($str, $pos, $len, $GLOBALS['utf_nfkc_qc'], $GLOBALS['utf_compatibility_decomp']);	}	/**	* Recompose a UTF string	*	* @param	string	$str			Unchecked UTF string	* @param	integer	$pos			Position of the first UTF char (in bytes)	* @param	integer	$len			Length of the string (in bytes)	* @param	array	&$qc			Quick-check array, passed by reference but never modified	* @param	array	&$decomp_map	Decomposition mapping, passed by reference but never modified	* @return	string					The string, validated and recomposed	*	* @access	private	*/	function recompose($str, $pos, $len, &$qc, &$decomp_map)	{		global $utf_canonical_comp;		// Load the canonical composition table		if (!isset($utf_canonical_comp))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_canonical_comp.' . $phpEx);		}		return utf_normalizer::recompose($str, $pos, $len, $qc, $decomp_map);	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}include($phpbb_root_path . 'includes/questionnaire/questionnaire.' . $phpEx);/*** @package acp*/class acp_send_statistics{	var $u_action;	function main($id, $mode)	{		global $config, $template, $phpbb_admin_path, $phpEx;		$collect_url = "http://www.phpbb.com/stats/receive_stats.php";		$this->tpl_name = 'acp_send_statistics';		$this->page_title = 'ACP_SEND_STATISTICS';		// generate a unique id if necessary		if (!isset($config['questionnaire_unique_id']))		{			$install_id = unique_id();			set_config('questionnaire_unique_id', $install_id);		}		else		{			$install_id = $config['questionnaire_unique_id'];		}		$collector = new phpbb_questionnaire_data_collector($install_id);		// Add data provider		$collector->add_data_provider(new phpbb_questionnaire_php_data_provider());		$collector->add_data_provider(new phpbb_questionnaire_system_data_provider());		$collector->add_data_provider(new phpbb_questionnaire_phpbb_data_provider($config));		$template->assign_vars(array(			'U_COLLECT_STATS'	=> $collect_url,			'RAW_DATA'			=> $collector->get_data_for_form(),			'U_ACP_MAIN'		=> append_sid("{$phpbb_admin_path}index.$phpEx"),		));		$raw = $collector->get_data_raw();		foreach ($raw as $provider => $data)		{			if ($provider == 'install_id')			{				$data = array($provider => $data);			}			$template->assign_block_vars('providers', array(				'NAME'	=> htmlspecialchars($provider),			));			foreach ($data as $key => $value)			{				if (is_array($value))				{					$value = utf8_wordwrap(serialize($value), 75, "\n", true);				}				$template->assign_block_vars('providers.values', array(					'KEY'	=> utf8_htmlspecialchars($key),					'VALUE'	=> utf8_htmlspecialchars($value),				));			}		}	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ucp_groups* @package ucp*/class ucp_groups{	var $u_action;	function main($id, $mode)	{		global $config, $phpbb_root_path, $phpEx;		global $db, $user, $auth, $cache, $template;		$user->add_lang('groups');		$return_page = '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $this->u_action . '">', '</a>');		$mark_ary	= request_var('mark', array(0));		$submit		= (!empty($_POST['submit'])) ? true : false;		$delete		= (!empty($_POST['delete'])) ? true : false;		$error = $data = array();		switch ($mode)		{			case 'membership':				$this->page_title = 'UCP_USERGROUPS_MEMBER';				if ($submit || isset($_POST['change_default']))				{					$action = (isset($_POST['change_default'])) ? 'change_default' : request_var('action', '');					$group_id = ($action == 'change_default') ? request_var('default', 0) : request_var('selected', 0);					if (!$group_id)					{						trigger_error('NO_GROUP_SELECTED');					}					$sql = 'SELECT group_id, group_name, group_type						FROM ' . GROUPS_TABLE . "						WHERE group_id IN ($group_id, {$user->data['group_id']})";					$result = $db->sql_query($sql);					$group_row = array();					while ($row = $db->sql_fetchrow($result))					{						$row['group_name'] = ($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name'];						$group_row[$row['group_id']] = $row;					}					$db->sql_freeresult($result);					if (!sizeof($group_row))					{						trigger_error('GROUP_NOT_EXIST');					}					switch ($action)					{						case 'change_default':							// User already having this group set as default?							if ($group_id == $user->data['group_id'])							{								trigger_error($user->lang['ALREADY_DEFAULT_GROUP'] . $return_page);							}							if (!$auth->acl_get('u_chggrp'))							{								trigger_error($user->lang['NOT_AUTHORISED'] . $return_page);							}							// User needs to be member of the group in order to make it default							if (!group_memberships($group_id, $user->data['user_id'], true))							{								trigger_error($user->lang['NOT_MEMBER_OF_GROUP'] . $return_page);							}							if (confirm_box(true))							{								group_user_attributes('default', $group_id, $user->data['user_id']);								add_log('user', $user->data['user_id'], 'LOG_USER_GROUP_CHANGE', sprintf($user->lang['USER_GROUP_CHANGE'], $group_row[$user->data['group_id']]['group_name'], $group_row[$group_id]['group_name']));								meta_refresh(3, $this->u_action);								trigger_error($user->lang['CHANGED_DEFAULT_GROUP'] . $return_page);							}							else							{								$s_hidden_fields = array(									'default'		=> $group_id,									'change_default'=> true								);								confirm_box(false, sprintf($user->lang['GROUP_CHANGE_DEFAULT'], $group_row[$group_id]['group_name']), build_hidden_fields($s_hidden_fields));							}						break;						case 'resign':							// User tries to resign from default group but is not allowed to change it?							if ($group_id == $user->data['group_id'] && !$auth->acl_get('u_chggrp'))							{								trigger_error($user->lang['NOT_RESIGN_FROM_DEFAULT_GROUP'] . $return_page);							}							if (!($row = group_memberships($group_id, $user->data['user_id'])))							{								trigger_error($user->lang['NOT_MEMBER_OF_GROUP'] . $return_page);							}							list(, $row) = each($row);							$sql = 'SELECT group_type								FROM ' . GROUPS_TABLE . '								WHERE group_id = ' . $group_id;							$result = $db->sql_query($sql);							$group_type = (int) $db->sql_fetchfield('group_type');							$db->sql_freeresult($result);							if ($group_type != GROUP_OPEN && $group_type != GROUP_FREE)							{								trigger_error($user->lang['CANNOT_RESIGN_GROUP'] . $return_page);							}							if (confirm_box(true))							{								group_user_del($group_id, $user->data['user_id']);								add_log('user', $user->data['user_id'], 'LOG_USER_GROUP_RESIGN', $group_row[$group_id]['group_name']);								meta_refresh(3, $this->u_action);								trigger_error($user->lang[($row['user_pending']) ? 'GROUP_RESIGNED_PENDING' : 'GROUP_RESIGNED_MEMBERSHIP'] . $return_page);							}							else							{								$s_hidden_fields = array(									'selected'		=> $group_id,									'action'		=> 'resign',									'submit'		=> true								);								confirm_box(false, ($row['user_pending']) ? 'GROUP_RESIGN_PENDING' : 'GROUP_RESIGN_MEMBERSHIP', build_hidden_fields($s_hidden_fields));							}						break;						case 'join':							$sql = 'SELECT ug.*, u.username, u.username_clean, u.user_email								FROM ' . USER_GROUP_TABLE . ' ug, ' . USERS_TABLE . ' u								WHERE ug.user_id = u.user_id									AND ug.group_id = ' . $group_id . '									AND ug.user_id = ' . $user->data['user_id'];							$result = $db->sql_query($sql);							$row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							if ($row)							{								if ($row['user_pending'])								{									trigger_error($user->lang['ALREADY_IN_GROUP_PENDING'] . $return_page);								}								trigger_error($user->lang['ALREADY_IN_GROUP'] . $return_page);							}							// Check permission to join (open group or request)							if ($group_row[$group_id]['group_type'] != GROUP_OPEN && $group_row[$group_id]['group_type'] != GROUP_FREE)							{								trigger_error($user->lang['CANNOT_JOIN_GROUP'] . $return_page);							}							if (confirm_box(true))							{								if ($group_row[$group_id]['group_type'] == GROUP_FREE)								{									group_user_add($group_id, $user->data['user_id']);								}								else								{									group_user_add($group_id, $user->data['user_id'], false, false, false, 0, 1);									include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);									$messenger = new messenger();									$sql = 'SELECT u.username, u.username_clean, u.user_email, u.user_notify_type, u.user_jabber, u.user_lang										FROM ' . USER_GROUP_TABLE . ' ug, ' . USERS_TABLE . " u										WHERE ug.user_id = u.user_id											AND ug.group_leader = 1											AND ug.group_id = $group_id";									$result = $db->sql_query($sql);									while ($row = $db->sql_fetchrow($result))									{										$messenger->template('group_request', $row['user_lang']);										$messenger->to($row['user_email'], $row['username']);										$messenger->im($row['user_jabber'], $row['username']);										$messenger->assign_vars(array(											'USERNAME'			=> htmlspecialchars_decode($row['username']),											'GROUP_NAME'		=> htmlspecialchars_decode($group_row[$group_id]['group_name']),											'REQUEST_USERNAME'	=> $user->data['username'],											'U_PENDING'		=> generate_board_url() . "/ucp.$phpEx?i=groups&mode=manage&action=list&g=$group_id",											'U_GROUP'		=> generate_board_url() . "/memberlist.$phpEx?mode=group&g=$group_id")										);										$messenger->send($row['user_notify_type']);									}									$db->sql_freeresult($result);									$messenger->save_queue();								}								add_log('user', $user->data['user_id'], 'LOG_USER_GROUP_JOIN' . (($group_row[$group_id]['group_type'] == GROUP_FREE) ? '' : '_PENDING'), $group_row[$group_id]['group_name']);								meta_refresh(3, $this->u_action);								trigger_error($user->lang[($group_row[$group_id]['group_type'] == GROUP_FREE) ? 'GROUP_JOINED' : 'GROUP_JOINED_PENDING'] . $return_page);							}							else							{								$s_hidden_fields = array(									'selected'		=> $group_id,									'action'		=> 'join',									'submit'		=> true								);								confirm_box(false, ($group_row[$group_id]['group_type'] == GROUP_FREE) ? 'GROUP_JOIN' : 'GROUP_JOIN_PENDING', build_hidden_fields($s_hidden_fields));							}						break;						case 'demote':							if (!($row = group_memberships($group_id, $user->data['user_id'])))							{								trigger_error($user->lang['NOT_MEMBER_OF_GROUP'] . $return_page);							}							list(, $row) = each($row);							if (!$row['group_leader'])							{								trigger_error($user->lang['NOT_LEADER_OF_GROUP'] . $return_page);							}							if (confirm_box(true))							{								group_user_attributes('demote', $group_id, $user->data['user_id']);								add_log('user', $user->data['user_id'], 'LOG_USER_GROUP_DEMOTE', $group_row[$group_id]['group_name']);								meta_refresh(3, $this->u_action);								trigger_error($user->lang['USER_GROUP_DEMOTED'] . $return_page);							}							else							{								$s_hidden_fields = array(									'selected'		=> $group_id,									'action'		=> 'demote',									'submit'		=> true								);								confirm_box(false, 'USER_GROUP_DEMOTE', build_hidden_fields($s_hidden_fields));							}						break;					}				}				$sql = 'SELECT g.*, ug.group_leader, ug.user_pending					FROM ' . GROUPS_TABLE . ' g, ' . USER_GROUP_TABLE . ' ug					WHERE ug.user_id = ' . $user->data['user_id'] . '						AND g.group_id = ug.group_id					ORDER BY g.group_type DESC, g.group_name';				$result = $db->sql_query($sql);				$group_id_ary = array();				$leader_count = $member_count = $pending_count = 0;				while ($row = $db->sql_fetchrow($result))				{					$block = ($row['group_leader']) ? 'leader' : (($row['user_pending']) ? 'pending' : 'member');					switch ($row['group_type'])					{						case GROUP_OPEN:							$group_status = 'OPEN';						break;						case GROUP_CLOSED:							$group_status = 'CLOSED';						break;						case GROUP_HIDDEN:							$group_status = 'HIDDEN';						break;						case GROUP_SPECIAL:							$group_status = 'SPECIAL';						break;						case GROUP_FREE:							$group_status = 'FREE';						break;					}					$template->assign_block_vars($block, array(						'GROUP_ID'		=> $row['group_id'],						'GROUP_NAME'	=> ($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name'],						'GROUP_DESC'	=> ($row['group_type'] <> GROUP_SPECIAL) ? generate_text_for_display($row['group_desc'], $row['group_desc_uid'], $row['group_desc_bitfield'], $row['group_desc_options']) : $user->lang['GROUP_IS_SPECIAL'],						'GROUP_SPECIAL'	=> ($row['group_type'] <> GROUP_SPECIAL) ? false : true,						'GROUP_STATUS'	=> $user->lang['GROUP_IS_' . $group_status],						'GROUP_COLOUR'	=> $row['group_colour'],						'U_VIEW_GROUP'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=group&amp;g=' . $row['group_id']),						'S_GROUP_DEFAULT'	=> ($row['group_id'] == $user->data['group_id']) ? true : false,						'S_ROW_COUNT'		=> ${$block . '_count'}++)					);					$group_id_ary[] = (int) $row['group_id'];				}				$db->sql_freeresult($result);				// Hide hidden groups unless user is an admin with group privileges				$sql_and = ($auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel')) ? '<> ' . GROUP_SPECIAL : 'NOT IN (' . GROUP_SPECIAL . ', ' . GROUP_HIDDEN . ')';				$sql = 'SELECT group_id, group_name, group_colour, group_desc, group_desc_uid, group_desc_bitfield, group_desc_options, group_type, group_founder_manage					FROM ' . GROUPS_TABLE . '					WHERE ' . ((sizeof($group_id_ary)) ? $db->sql_in_set('group_id', $group_id_ary, true) . ' AND ' : '') . "						group_type $sql_and					ORDER BY group_type DESC, group_name";				$result = $db->sql_query($sql);				$nonmember_count = 0;				while ($row = $db->sql_fetchrow($result))				{					switch ($row['group_type'])					{						case GROUP_OPEN:							$group_status = 'OPEN';						break;						case GROUP_CLOSED:							$group_status = 'CLOSED';						break;						case GROUP_HIDDEN:							$group_status = 'HIDDEN';						break;						case GROUP_SPECIAL:							$group_status = 'SPECIAL';						break;						case GROUP_FREE:							$group_status = 'FREE';						break;					}					$template->assign_block_vars('nonmember', array(						'GROUP_ID'		=> $row['group_id'],						'GROUP_NAME'	=> ($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name'],						'GROUP_DESC'	=> ($row['group_type'] <> GROUP_SPECIAL) ? generate_text_for_display($row['group_desc'], $row['group_desc_uid'], $row['group_desc_bitfield'], $row['group_desc_options']) : $user->lang['GROUP_IS_SPECIAL'],						'GROUP_SPECIAL'	=> ($row['group_type'] <> GROUP_SPECIAL) ? false : true,						'GROUP_CLOSED'	=> ($row['group_type'] <> GROUP_CLOSED || $auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel')) ? false : true,						'GROUP_STATUS'	=> $user->lang['GROUP_IS_' . $group_status],						'S_CAN_JOIN'	=> ($row['group_type'] == GROUP_OPEN || $row['group_type'] == GROUP_FREE) ? true : false,						'GROUP_COLOUR'	=> $row['group_colour'],						'U_VIEW_GROUP'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=group&amp;g=' . $row['group_id']),						'S_ROW_COUNT'	=> $nonmember_count++)					);				}				$db->sql_freeresult($result);				$template->assign_vars(array(					'S_CHANGE_DEFAULT'	=> ($auth->acl_get('u_chggrp')) ? true : false,					'S_LEADER_COUNT'	=> $leader_count,					'S_MEMBER_COUNT'	=> $member_count,					'S_PENDING_COUNT'	=> $pending_count,					'S_NONMEMBER_COUNT'	=> $nonmember_count,					'S_UCP_ACTION'			=> $this->u_action)				);			break;			case 'manage':				$this->page_title = 'UCP_USERGROUPS_MANAGE';				$action		= (isset($_POST['addusers'])) ? 'addusers' : request_var('action', '');				$group_id	= request_var('g', 0);				include($phpbb_root_path . 'includes/functions_display.' . $phpEx);				add_form_key('ucp_groups');				if ($group_id)				{					$sql = 'SELECT *						FROM ' . GROUPS_TABLE . "						WHERE group_id = $group_id";					$result = $db->sql_query($sql);					$group_row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if (!$group_row)					{						trigger_error($user->lang['NO_GROUP'] . $return_page);					}					// Check if the user is allowed to manage this group if set to founder only.					if ($user->data['user_type'] != USER_FOUNDER && $group_row['group_founder_manage'])					{						trigger_error($user->lang['NOT_ALLOWED_MANAGE_GROUP'] . $return_page, E_USER_WARNING);					}					$group_name = $group_row['group_name'];					$group_type = $group_row['group_type'];					$avatar_img = (!empty($group_row['group_avatar'])) ? get_user_avatar($group_row['group_avatar'], $group_row['group_avatar_type'], $group_row['group_avatar_width'], $group_row['group_avatar_height'], 'GROUP_AVATAR') : '<img src="' . $phpbb_root_path . 'adm/images/no_avatar.gif" alt="" />';					$template->assign_vars(array(						'GROUP_NAME'			=> ($group_type == GROUP_SPECIAL) ? $user->lang['G_' . $group_name] : $group_name,						'GROUP_INTERNAL_NAME'	=> $group_name,						'GROUP_COLOUR'			=> (isset($group_row['group_colour'])) ? $group_row['group_colour'] : '',						'GROUP_DESC_DISP'		=> generate_text_for_display($group_row['group_desc'], $group_row['group_desc_uid'], $group_row['group_desc_bitfield'], $group_row['group_desc_options']),						'GROUP_TYPE'			=> $group_row['group_type'],						'AVATAR'				=> $avatar_img,						'AVATAR_IMAGE'			=> $avatar_img,						'AVATAR_WIDTH'			=> (isset($group_row['group_avatar_width'])) ? $group_row['group_avatar_width'] : '',						'AVATAR_HEIGHT'			=> (isset($group_row['group_avatar_height'])) ? $group_row['group_avatar_height'] : '',					));				}				switch ($action)				{					case 'edit':						if (!$group_id)						{							trigger_error($user->lang['NO_GROUP'] . $return_page);						}						if (!($row = group_memberships($group_id, $user->data['user_id'])))						{							trigger_error($user->lang['NOT_MEMBER_OF_GROUP'] . $return_page);						}						list(, $row) = each($row);						if (!$row['group_leader'])						{							trigger_error($user->lang['NOT_LEADER_OF_GROUP'] . $return_page);						}						$file_uploads = (@ini_get('file_uploads') || strtolower(@ini_get('file_uploads')) == 'on') ? true : false;						$user->add_lang(array('acp/groups', 'acp/common'));						$data = $submit_ary = array();						$update	= (isset($_POST['update'])) ? true : false;						$error = array();						$avatar_select = basename(request_var('avatar_select', ''));						$category = basename(request_var('category', ''));						$can_upload = (file_exists($phpbb_root_path . $config['avatar_path']) && phpbb_is_writable($phpbb_root_path . $config['avatar_path']) && $file_uploads) ? true : false;						// Did we submit?						if ($update)						{							$group_name	= utf8_normalize_nfc(request_var('group_name', '', true));							$group_desc = utf8_normalize_nfc(request_var('group_desc', '', true));							$group_type	= request_var('group_type', GROUP_FREE);							$allow_desc_bbcode	= request_var('desc_parse_bbcode', false);							$allow_desc_urls	= request_var('desc_parse_urls', false);							$allow_desc_smilies	= request_var('desc_parse_smilies', false);							$submit_ary = array(								'colour'		=> request_var('group_colour', ''),								'rank'			=> request_var('group_rank', 0),								'receive_pm'	=> isset($_REQUEST['group_receive_pm']) ? 1 : 0,								'message_limit'	=> request_var('group_message_limit', 0),								'max_recipients'=> request_var('group_max_recipients', 0),							);							$data['uploadurl']	= request_var('uploadurl', '');							$data['remotelink'] = request_var('remotelink', '');							$data['width']		= request_var('width', '');							$data['height']		= request_var('height', '');							$delete				= request_var('delete', '');							if (!empty($_FILES['uploadfile']['tmp_name']) || $data['uploadurl'] || $data['remotelink'])							{								// Avatar stuff								$var_ary = array(									'uploadurl'		=> array('string', true, 5, 255),									'remotelink'	=> array('string', true, 5, 255),									'width'			=> array('string', true, 1, 3),									'height'		=> array('string', true, 1, 3),								);								if (!($error = validate_data($data, $var_ary)))								{									$data['user_id'] = "g$group_id";									if ((!empty($_FILES['uploadfile']['tmp_name']) || $data['uploadurl']) && $can_upload)									{										list($submit_ary['avatar_type'], $submit_ary['avatar'], $submit_ary['avatar_width'], $submit_ary['avatar_height']) = avatar_upload($data, $error);									}									else if ($data['remotelink'])									{										list($submit_ary['avatar_type'], $submit_ary['avatar'], $submit_ary['avatar_width'], $submit_ary['avatar_height']) = avatar_remote($data, $error);									}								}							}							else if ($avatar_select && $config['allow_avatar_local'])							{								// check avatar gallery								if (is_dir($phpbb_root_path . $config['avatar_gallery_path'] . '/' . $category))								{									$submit_ary['avatar_type'] = AVATAR_GALLERY;									list($submit_ary['avatar_width'], $submit_ary['avatar_height']) = getimagesize($phpbb_root_path . $config['avatar_gallery_path'] . '/' . $category . '/' . $avatar_select);									$submit_ary['avatar'] = $category . '/' . $avatar_select;								}							}							else if ($delete)							{								$submit_ary['avatar'] = '';								$submit_ary['avatar_type'] = $submit_ary['avatar_width'] = $submit_ary['avatar_height'] = 0;							}							else if ($data['width'] && $data['height'])							{								// Only update the dimensions?								if ($config['avatar_max_width'] || $config['avatar_max_height'])								{									if ($data['width'] > $config['avatar_max_width'] || $data['height'] > $config['avatar_max_height'])									{										$error[] = sprintf($user->lang['AVATAR_WRONG_SIZE'], $config['avatar_min_width'], $config['avatar_min_height'], $config['avatar_max_width'], $config['avatar_max_height'], $data['width'], $data['height']);									}								}								if (!sizeof($error))								{									if ($config['avatar_min_width'] || $config['avatar_min_height'])									{										if ($data['width'] < $config['avatar_min_width'] || $data['height'] < $config['avatar_min_height'])										{											$error[] = sprintf($user->lang['AVATAR_WRONG_SIZE'], $config['avatar_min_width'], $config['avatar_min_height'], $config['avatar_max_width'], $config['avatar_max_height'], $data['width'], $data['height']);										}									}								}								if (!sizeof($error))								{									$submit_ary['avatar_width'] = $data['width'];									$submit_ary['avatar_height'] = $data['height'];								}							}							if ((isset($submit_ary['avatar']) && $submit_ary['avatar'] && (!isset($group_row['group_avatar']))) || $delete)							{								if (isset($group_row['group_avatar']) && $group_row['group_avatar'])								{									avatar_delete('group', $group_row, true);								}							}							if (!check_form_key('ucp_groups'))							{								$error[] = $user->lang['FORM_INVALID'];							}							if (!sizeof($error))							{								// Only set the rank, colour, etc. if it's changed or if we're adding a new								// group. This prevents existing group members being updated if no changes								// were made.								$group_attributes = array();								$test_variables = array(									'rank'			=> 'int',									'colour'		=> 'string',									'avatar'		=> 'string',									'avatar_type'	=> 'int',									'avatar_width'	=> 'int',									'avatar_height'	=> 'int',									'receive_pm'	=> 'int',									'legend'		=> 'int',									'message_limit'	=> 'int',									'max_recipients'=> 'int',								);								foreach ($test_variables as $test => $type)								{									if (isset($submit_ary[$test]) && ($action == 'add' || $group_row['group_' . $test] != $submit_ary[$test]))									{										settype($submit_ary[$test], $type);										$group_attributes['group_' . $test] = $group_row['group_' . $test] = $submit_ary[$test];									}								}								if (!($error = group_create($group_id, $group_type, $group_name, $group_desc, $group_attributes, $allow_desc_bbcode, $allow_desc_urls, $allow_desc_smilies)))								{									$cache->destroy('sql', GROUPS_TABLE);									$message = ($action == 'edit') ? 'GROUP_UPDATED' : 'GROUP_CREATED';									trigger_error($user->lang[$message] . $return_page);								}							}							if (sizeof($error))							{								$group_rank = $submit_ary['rank'];								$group_desc_data = array(									'text'			=> $group_desc,									'allow_bbcode'	=> $allow_desc_bbcode,									'allow_smilies'	=> $allow_desc_smilies,									'allow_urls'	=> $allow_desc_urls								);							}						}						else if (!$group_id)						{							$group_name = utf8_normalize_nfc(request_var('group_name', '', true));							$group_desc_data = array(								'text'			=> '',								'allow_bbcode'	=> true,								'allow_smilies'	=> true,								'allow_urls'	=> true							);							$group_rank = 0;							$group_type = GROUP_OPEN;						}						else						{							$group_desc_data = generate_text_for_edit($group_row['group_desc'], $group_row['group_desc_uid'], $group_row['group_desc_options']);							$group_rank = $group_row['group_rank'];						}						$sql = 'SELECT *							FROM ' . RANKS_TABLE . '							WHERE rank_special = 1							ORDER BY rank_title';						$result = $db->sql_query($sql);						$rank_options = '<option value="0"' . ((!$group_rank) ? ' selected="selected"' : '') . '>' . $user->lang['USER_DEFAULT'] . '</option>';						while ($row = $db->sql_fetchrow($result))						{							$selected = ($group_rank && $row['rank_id'] == $group_rank) ? ' selected="selected"' : '';							$rank_options .= '<option value="' . $row['rank_id'] . '"' . $selected . '>' . $row['rank_title'] . '</option>';						}						$db->sql_freeresult($result);						$type_free		= ($group_type == GROUP_FREE) ? ' checked="checked"' : '';						$type_open		= ($group_type == GROUP_OPEN) ? ' checked="checked"' : '';						$type_closed	= ($group_type == GROUP_CLOSED) ? ' checked="checked"' : '';						$type_hidden	= ($group_type == GROUP_HIDDEN) ? ' checked="checked"' : '';						$display_gallery = (isset($_POST['display_gallery'])) ? true : false;						if ($config['allow_avatar'] && $config['allow_avatar_local'] && $display_gallery)						{							avatar_gallery($category, $avatar_select, 4);						}						$avatars_enabled = ($config['allow_avatar'] && (($can_upload && ($config['allow_avatar_upload'] || $config['allow_avatar_remote_upload'])) || ($config['allow_avatar_local'] || $config['allow_avatar_remote']))) ? true : false;						$template->assign_vars(array(							'S_EDIT'			=> true,							'S_INCLUDE_SWATCH'	=> true,							'S_FORM_ENCTYPE'	=> ($config['allow_avatar'] && $can_upload && ($config['allow_avatar_upload'] || $config['allow_avatar_remote_upload'])) ? ' enctype="multipart/form-data"' : '',							'S_ERROR'			=> (sizeof($error)) ? true : false,							'S_SPECIAL_GROUP'	=> ($group_type == GROUP_SPECIAL) ? true : false,							'S_AVATARS_ENABLED'	=> $avatars_enabled,							'S_DISPLAY_GALLERY'	=> ($config['allow_avatar'] && $config['allow_avatar_local'] && !$display_gallery) ? true : false,							'S_IN_GALLERY'		=> ($config['allow_avatar_local'] && $display_gallery) ? true : false,							'S_UPLOAD_AVATAR_FILE'	=> ($config['allow_avatar'] && $config['allow_avatar_upload'] && $can_upload) ? true : false,							'S_UPLOAD_AVATAR_URL'	=> ($config['allow_avatar'] && $config['allow_avatar_remote_upload'] && $can_upload) ? true : false,							'S_LINK_AVATAR'			=> ($config['allow_avatar'] && $config['allow_avatar_remote']) ? true : false,							'ERROR_MSG'				=> (sizeof($error)) ? implode('<br />', $error) : '',							'GROUP_RECEIVE_PM'		=> (isset($group_row['group_receive_pm']) && $group_row['group_receive_pm']) ? ' checked="checked"' : '',							'GROUP_MESSAGE_LIMIT'	=> (isset($group_row['group_message_limit'])) ? $group_row['group_message_limit'] : 0,							'GROUP_MAX_RECIPIENTS'	=> (isset($group_row['group_max_recipients'])) ? $group_row['group_max_recipients'] : 0,							'GROUP_DESC'			=> $group_desc_data['text'],							'S_DESC_BBCODE_CHECKED'	=> $group_desc_data['allow_bbcode'],							'S_DESC_URLS_CHECKED'	=> $group_desc_data['allow_urls'],							'S_DESC_SMILIES_CHECKED'=> $group_desc_data['allow_smilies'],							'S_RANK_OPTIONS'		=> $rank_options,							'AVATAR_MAX_FILESIZE'	=> $config['avatar_filesize'],							'GROUP_TYPE_FREE'		=> GROUP_FREE,							'GROUP_TYPE_OPEN'		=> GROUP_OPEN,							'GROUP_TYPE_CLOSED'		=> GROUP_CLOSED,							'GROUP_TYPE_HIDDEN'		=> GROUP_HIDDEN,							'GROUP_TYPE_SPECIAL'	=> GROUP_SPECIAL,							'GROUP_FREE'		=> $type_free,							'GROUP_OPEN'		=> $type_open,							'GROUP_CLOSED'		=> $type_closed,							'GROUP_HIDDEN'		=> $type_hidden,							'U_SWATCH'			=> append_sid("{$phpbb_root_path}adm/swatch.$phpEx", 'form=ucp&amp;name=group_colour'),							'S_UCP_ACTION'		=> $this->u_action . "&amp;action=$action&amp;g=$group_id",							'L_AVATAR_EXPLAIN'	=> sprintf($user->lang['AVATAR_EXPLAIN'], $config['avatar_max_width'], $config['avatar_max_height'], $config['avatar_filesize'] / 1024),						));					break;					case 'list':						if (!$group_id)						{							trigger_error($user->lang['NO_GROUP'] . $return_page);						}						if (!($row = group_memberships($group_id, $user->data['user_id'])))						{							trigger_error($user->lang['NOT_MEMBER_OF_GROUP'] . $return_page);						}						list(, $row) = each($row);						if (!$row['group_leader'])						{							trigger_error($user->lang['NOT_LEADER_OF_GROUP'] . $return_page);						}						$user->add_lang(array('acp/groups', 'acp/common'));						$start = request_var('start', 0);						// Grab the leaders - always, on every page...						$sql = 'SELECT u.user_id, u.username, u.username_clean, u.user_colour, u.user_regdate, u.user_posts, u.group_id, ug.group_leader, ug.user_pending							FROM ' . USERS_TABLE . ' u, ' . USER_GROUP_TABLE . " ug							WHERE ug.group_id = $group_id								AND u.user_id = ug.user_id								AND ug.group_leader = 1							ORDER BY ug.user_pending DESC, u.username_clean";						$result = $db->sql_query($sql);						while ($row = $db->sql_fetchrow($result))						{							$template->assign_block_vars('leader', array(								'USERNAME'			=> $row['username'],								'USERNAME_COLOUR'	=> $row['user_colour'],								'USERNAME_FULL'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']),								'U_USER_VIEW'		=> get_username_string('profile', $row['user_id'], $row['username']),								'S_GROUP_DEFAULT'	=> ($row['group_id'] == $group_id) ? true : false,								'JOINED'			=> ($row['user_regdate']) ? $user->format_date($row['user_regdate']) : ' - ',								'USER_POSTS'		=> $row['user_posts'],								'USER_ID'			=> $row['user_id'])							);						}						$db->sql_freeresult($result);						// Total number of group members (non-leaders)						$sql = 'SELECT COUNT(user_id) AS total_members							FROM ' . USER_GROUP_TABLE . "							WHERE group_id = $group_id								AND group_leader = 0";						$result = $db->sql_query($sql);						$total_members = (int) $db->sql_fetchfield('total_members');						$db->sql_freeresult($result);						// Grab the members						$sql = 'SELECT u.user_id, u.username, u.username_clean, u.user_colour, u.user_regdate, u.user_posts, u.group_id, ug.group_leader, ug.user_pending							FROM ' . USERS_TABLE . ' u, ' . USER_GROUP_TABLE . " ug							WHERE ug.group_id = $group_id								AND u.user_id = ug.user_id								AND ug.group_leader = 0							ORDER BY ug.user_pending DESC, u.username_clean";						$result = $db->sql_query_limit($sql, $config['topics_per_page'], $start);						$pending = false;						$approved = false;						while ($row = $db->sql_fetchrow($result))						{							if ($row['user_pending'] && !$pending)							{								$template->assign_block_vars('member', array(									'S_PENDING'		=> true)								);								$template->assign_var('S_PENDING_SET', true);								$pending = true;							}							else if (!$row['user_pending'] && !$approved)							{								$template->assign_block_vars('member', array(									'S_APPROVED'		=> true)								);								$template->assign_var('S_APPROVED_SET', true);								$approved = true;							}							$template->assign_block_vars('member', array(								'USERNAME'			=> $row['username'],								'USERNAME_COLOUR'	=> $row['user_colour'],								'USERNAME_FULL'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']),								'U_USER_VIEW'		=> get_username_string('profile', $row['user_id'], $row['username']),								'S_GROUP_DEFAULT'	=> ($row['group_id'] == $group_id) ? true : false,								'JOINED'			=> ($row['user_regdate']) ? $user->format_date($row['user_regdate']) : ' - ',								'USER_POSTS'		=> $row['user_posts'],								'USER_ID'			=> $row['user_id'])							);						}						$db->sql_freeresult($result);						$s_action_options = '';						$options = array('default' => 'DEFAULT', 'approve' => 'APPROVE', 'deleteusers' => 'DELETE');						foreach ($options as $option => $lang)						{							$s_action_options .= '<option value="' . $option . '">' . $user->lang['GROUP_' . $lang] . '</option>';						}						$template->assign_vars(array(							'S_LIST'			=> true,							'S_ACTION_OPTIONS'	=> $s_action_options,							'S_ON_PAGE'			=> on_page($total_members, $config['topics_per_page'], $start),							'PAGINATION'		=> generate_pagination($this->u_action . "&amp;action=$action&amp;g=$group_id", $total_members, $config['topics_per_page'], $start),							'U_ACTION'			=> $this->u_action . "&amp;g=$group_id",							'S_UCP_ACTION'		=> $this->u_action . "&amp;g=$group_id",							'U_FIND_USERNAME'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=ucp&amp;field=usernames'),						));					break;					case 'approve':						if (!$group_id)						{							trigger_error($user->lang['NO_GROUP'] . $return_page);						}						if (!($row = group_memberships($group_id, $user->data['user_id'])))						{							trigger_error($user->lang['NOT_MEMBER_OF_GROUP'] . $return_page);						}						list(, $row) = each($row);						if (!$row['group_leader'])						{							trigger_error($user->lang['NOT_LEADER_OF_GROUP'] . $return_page);						}						$user->add_lang('acp/groups');						// Approve, demote or promote						group_user_attributes('approve', $group_id, $mark_ary, false, false);						trigger_error($user->lang['USERS_APPROVED'] . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $this->u_action . '&amp;action=list&amp;g=' . $group_id . '">', '</a>'));					break;					case 'default':						if (!$group_id)						{							trigger_error($user->lang['NO_GROUP'] . $return_page);						}						if (!($row = group_memberships($group_id, $user->data['user_id'])))						{							trigger_error($user->lang['NOT_MEMBER_OF_GROUP'] . $return_page);						}						list(, $row) = each($row);						if (!$row['group_leader'])						{							trigger_error($user->lang['NOT_LEADER_OF_GROUP'] . $return_page);						}						$group_row['group_name'] = ($group_row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $group_row['group_name']] : $group_row['group_name'];						if (confirm_box(true))						{							if (!sizeof($mark_ary))							{								$start = 0;								do								{									$sql = 'SELECT user_id										FROM ' . USER_GROUP_TABLE . "										WHERE group_id = $group_id										ORDER BY user_id";									$result = $db->sql_query_limit($sql, 200, $start);									$mark_ary = array();									if ($row = $db->sql_fetchrow($result))									{										do										{											$mark_ary[] = $row['user_id'];										}										while ($row = $db->sql_fetchrow($result));										group_user_attributes('default', $group_id, $mark_ary, false, $group_row['group_name'], $group_row);										$start = (sizeof($mark_ary) < 200) ? 0 : $start + 200;									}									else									{										$start = 0;									}									$db->sql_freeresult($result);								}								while ($start);							}							else							{								group_user_attributes('default', $group_id, $mark_ary, false, $group_row['group_name'], $group_row);							}							$user->add_lang('acp/groups');							trigger_error($user->lang['GROUP_DEFS_UPDATED'] . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $this->u_action . '&amp;action=list&amp;g=' . $group_id . '">', '</a>'));						}						else						{							$user->add_lang('acp/common');							confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(								'mark'		=> $mark_ary,								'g'			=> $group_id,								'i'			=> $id,								'mode'		=> $mode,								'action'	=> $action))							);						}						// redirect to last screen						redirect($this->u_action . '&amp;action=list&amp;g=' . $group_id);					break;					case 'deleteusers':						$user->add_lang(array('acp/groups', 'acp/common'));						if (!($row = group_memberships($group_id, $user->data['user_id'])))						{							trigger_error($user->lang['NOT_MEMBER_OF_GROUP'] . $return_page);						}						list(, $row) = each($row);						if (!$row['group_leader'])						{							trigger_error($user->lang['NOT_LEADER_OF_GROUP'] . $return_page);						}						$group_row['group_name'] = ($group_row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $group_row['group_name']] : $group_row['group_name'];						if (confirm_box(true))						{							if (!$group_id)							{								trigger_error($user->lang['NO_GROUP'] . $return_page);							}							$error = group_user_del($group_id, $mark_ary, false, $group_row['group_name']);							if ($error)							{								trigger_error($user->lang[$error] . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $this->u_action . '&amp;action=list&amp;g=' . $group_id . '">', '</a>'));							}							trigger_error($user->lang['GROUP_USERS_REMOVE'] . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $this->u_action . '&amp;action=list&amp;g=' . $group_id . '">', '</a>'));						}						else						{							confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(								'mark'		=> $mark_ary,								'g'			=> $group_id,								'i'			=> $id,								'mode'		=> $mode,								'action'	=> $action))							);						}						// redirect to last screen						redirect($this->u_action . '&amp;action=list&amp;g=' . $group_id);					break;					case 'addusers':						$user->add_lang(array('acp/groups', 'acp/common'));						$names = utf8_normalize_nfc(request_var('usernames', '', true));						if (!$group_id)						{							trigger_error($user->lang['NO_GROUP'] . $return_page);						}						if (!$names)						{							trigger_error($user->lang['NO_USERS'] . $return_page);						}						if (!($row = group_memberships($group_id, $user->data['user_id'])))						{							trigger_error($user->lang['NOT_MEMBER_OF_GROUP'] . $return_page);						}						list(, $row) = each($row);						if (!$row['group_leader'])						{							trigger_error($user->lang['NOT_LEADER_OF_GROUP'] . $return_page);						}						$name_ary = array_unique(explode("\n", $names));						$group_name = ($group_row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $group_row['group_name']] : $group_row['group_name'];						$default = request_var('default', 0);						if (confirm_box(true))						{							// Add user/s to group							if ($error = group_user_add($group_id, false, $name_ary, $group_name, $default, 0, 0, $group_row))							{								trigger_error($user->lang[$error] . $return_page);							}							trigger_error($user->lang['GROUP_USERS_ADDED'] . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $this->u_action . '&amp;action=list&amp;g=' . $group_id . '">', '</a>'));						}						else						{							$s_hidden_fields = array(								'default'	=> $default,								'usernames'	=> $names,								'g'			=> $group_id,								'i'			=> $id,								'mode'		=> $mode,								'action'	=> $action							);							confirm_box(false, sprintf($user->lang['GROUP_CONFIRM_ADD_USER' . ((sizeof($name_ary) == 1) ? '' : 'S')], implode(', ', $name_ary)), build_hidden_fields($s_hidden_fields));						}						trigger_error($user->lang['NO_USERS_ADDED'] . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $this->u_action . '&amp;action=list&amp;g=' . $group_id . '">', '</a>'));					break;					default:						$user->add_lang('acp/common');						$sql = 'SELECT g.group_id, g.group_name, g.group_colour, g.group_desc, g.group_desc_uid, g.group_desc_bitfield, g.group_desc_options, g.group_type, ug.group_leader							FROM ' . GROUPS_TABLE . ' g, ' . USER_GROUP_TABLE . ' ug							WHERE ug.user_id = ' . $user->data['user_id'] . '								AND g.group_id = ug.group_id								AND ug.group_leader = 1							ORDER BY g.group_type DESC, g.group_name';						$result = $db->sql_query($sql);						while ($value = $db->sql_fetchrow($result))						{							$template->assign_block_vars('leader', array(								'GROUP_NAME'	=> ($value['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $value['group_name']] : $value['group_name'],								'GROUP_DESC'	=> generate_text_for_display($value['group_desc'], $value['group_desc_uid'], $value['group_desc_bitfield'], $value['group_desc_options']),								'GROUP_TYPE'	=> $value['group_type'],								'GROUP_ID'		=> $value['group_id'],								'GROUP_COLOUR'	=> $value['group_colour'],								'U_LIST'	=> $this->u_action . "&amp;action=list&amp;g={$value['group_id']}",								'U_EDIT'	=> $this->u_action . "&amp;action=edit&amp;g={$value['group_id']}")							);						}						$db->sql_freeresult($result);					break;				}			break;		}		$this->tpl_name = 'ucp_groups_' . $mode;	}}?>
<?php/**** acp_styles [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ACP_IMAGESETS_EXPLAIN'	=> 'Imagesets comprise all the button, forum, folder, etc. and other non-style specific images used by the board. Here you can edit, export or delete existing imagesets and import or activate new sets.',	'ACP_STYLES_EXPLAIN'	=> 'Here you can manage the available styles on your board. A style consists of a template, theme and imageset. You may alter existing styles, delete, deactivate, reactivate, create or import new ones. You can also see what a style will look like using the preview function. The current default style is noted by the presence of an asterisk (*). Also listed is the total user count for each style, note that overriding user styles will not be reflected here.',	'ACP_TEMPLATES_EXPLAIN'	=> 'A template set comprises all the markup used to generate the layout of your board. Here you can edit existing template sets, delete, export, import and preview sets. You can also modify the templating code used to generate BBCode.',	'ACP_THEMES_EXPLAIN'	=> 'From here you can create, install, edit, delete and export themes. A theme is the combination of colours and images that are applied to your templates to define the basic look of your board. The range of options open to you depends on the configuration of your server and phpBB installation, see the manual for further details. Please note that when creating new themes the use of an existing theme as a basis is optional.',	'ADD_IMAGESET'			=> 'Create imageset',	'ADD_IMAGESET_EXPLAIN'	=> 'Here you can create a new imageset. Depending on your server configuration and file permissions you may have additional options here. For example you may be able to base this imageset on an existing one. You may also be able to upload or import (from the store directory) a imageset archive. If you upload or import an archive the imageset name can be optionally taken from the archive name (to do this leave the imageset name blank).',	'ADD_STYLE'				=> 'Create style',	'ADD_STYLE_EXPLAIN'		=> 'Here you can create a new style. Depending on your server configuration and file permissions you may have additional options. For example you may be able to base this style on an existing one. You may also be able to upload or import (from the store directory) a style archive. If you upload or import an archive the style name will be determined automatically.',	'ADD_TEMPLATE'			=> 'Create template',	'ADD_TEMPLATE_EXPLAIN'	=> 'Here you can add a new template. Depending on your server configuration and file permissions you may have additional options here. For example you may be able to base this template set on an existing one. You may also be able to upload or import (from the store directory) a template archive. If you upload or import an archive the template name can be optionally taken from the archive name (to do this leave the template name blank).',	'ADD_THEME'				=> 'Create theme',	'ADD_THEME_EXPLAIN'		=> 'Here you can add a new theme. Depending on your server configuration and file permissions you may have additional options here. For example you may be able to base this theme on an existing one. You may also be able to upload or import (from the store directory) a theme archive. If you upload or import an archive the theme name can be optionally taken from the archive name (to do this leave the theme name blank).',	'ARCHIVE_FORMAT'		=> 'Archive file type',	'AUTOMATIC_EXPLAIN'		=> 'Leave blank to attempt automatic detection.',	'BACKGROUND'			=> 'Background',	'BACKGROUND_COLOUR'		=> 'Background colour',	'BACKGROUND_IMAGE'		=> 'Background image',	'BACKGROUND_REPEAT'		=> 'Background repeat',	'BOLD'					=> 'Bold',	'CACHE'							=> 'Cache',	'CACHE_CACHED'					=> 'Cached',	'CACHE_FILENAME'				=> 'Template file',	'CACHE_FILESIZE'				=> 'File size',	'CACHE_MODIFIED'				=> 'Modified',	'CONFIRM_IMAGESET_REFRESH'		=> 'Are you sure you wish to refresh all imageset data? The settings from the imageset configuration file will overwrite all modifications to the imageset which have been carried out with the imageset editor.',	'CONFIRM_TEMPLATE_CLEAR_CACHE'	=> 'Are you sure you wish to clear all cached versions of your template files?',	'CONFIRM_TEMPLATE_REFRESH'		=> 'Are you sure you wish to refresh all template data in the database with the contents of the template files on the filesystem? This will overwrite all modifications which have been carried out with the template editor while the template was stored in the database.',	'CONFIRM_THEME_REFRESH'			=> 'Are you sure you wish to refresh the theme data stored in the database with the contents of the theme on the filesystem? This will overwrite all modifications which have been carried out with the theme editor while the theme was stored in the database.',	'COPYRIGHT'						=> 'Copyright',	'CREATE_IMAGESET'				=> 'Create new imageset',	'CREATE_STYLE'					=> 'Create new style',	'CREATE_TEMPLATE'				=> 'Create new template set',	'CREATE_THEME'					=> 'Create new theme',	'CURRENT_IMAGE'					=> 'Current image',	'DEACTIVATE_DEFAULT'		=> 'You cannot deactivate the default style.',	'DELETE_FROM_FS'			=> 'Delete from filesystem',	'DELETE_IMAGESET'			=> 'Delete imageset',	'DELETE_IMAGESET_EXPLAIN'	=> 'Here you can remove the selected imageset from the database. Please note that there is no undo capability. It is recommended that you first export your set for possible future use.',	'DELETE_STYLE'				=> 'Delete style',	'DELETE_STYLE_EXPLAIN'		=> 'Here you can remove the selected style. Take care in deleting styles, there is no undo capability.',	'DELETE_TEMPLATE'			=> 'Delete template',	'DELETE_TEMPLATE_EXPLAIN'	=> 'Here you can remove the selected template set from the database. Please note that there is no undo capability. It is recommended that you first export your set for possible future use.',	'DELETE_THEME'				=> 'Delete theme',	'DELETE_THEME_EXPLAIN'		=> 'Here you can remove the selected theme from the database. Please note that there is no undo capability. It is recommended that you first export your theme for possible future use.',	'DETAILS'					=> 'Details',	'DIMENSIONS_EXPLAIN'		=> 'Selecting yes here will include width/height parameters.',	'EDIT_DETAILS_IMAGESET'				=> 'Edit imageset details',	'EDIT_DETAILS_IMAGESET_EXPLAIN'		=> 'Here you can edit certain imageset details such as its name.',	'EDIT_DETAILS_STYLE'				=> 'Edit style',	'EDIT_DETAILS_STYLE_EXPLAIN'		=> 'Using the form below you can modify this existing style. You may alter the combination of template, theme and imageset which define the style itself. You may also make the style the default one.',	'EDIT_DETAILS_TEMPLATE'				=> 'Edit template details',	'EDIT_DETAILS_TEMPLATE_EXPLAIN'		=> 'Here you can edit certain template details such as its name. You may also have the option to switch storage of the stylesheet from the filesystem to the database and vice versa. This option depends on your PHP configuration and whether your template set can be written to by the web server.',	'EDIT_DETAILS_THEME'				=> 'Edit theme details',	'EDIT_DETAILS_THEME_EXPLAIN'		=> 'Here you can edit certain theme details such as its name. You may also have the option to switch storage of the stylesheet from the filesystem to the database and vice versa. This option depends on your PHP configuration and whether your stylesheet can be written to by the web server.',	'EDIT_IMAGESET'						=> 'Edit imageset',	'EDIT_IMAGESET_EXPLAIN'				=> 'Here you can edit the individual images which define the imageset. You can also specify dimensions for the image. Dimensions are optional, specifying them can overcome certain rendering issues with some browsers. By not specifying them you reduce the size of the database record a little.',	'EDIT_TEMPLATE'						=> 'Edit template',	'EDIT_TEMPLATE_EXPLAIN'				=> 'Here you can edit your template set directly. Please remember that these edits are permanent and cannot be undone once submitted. If PHP can write to the template files in your styles directory any changes here will be written directly to those files. If PHP cannot write to those files they will be copied into the database and all changes will only be reflected there. Please take care when editing your template set, remember to close all replacement variable terms {XXXX} and conditional statements.',	'EDIT_TEMPLATE_STORED_DB'			=> 'The template file was unwritable so the template set is now stored in the database containing the modified file.',	'EDIT_THEME'						=> 'Edit theme',	'EDIT_THEME_EXPLAIN'				=> 'Here you can edit the selected theme, changing colours, images, etc.',	'EDIT_THEME_STORED_DB'				=> 'The stylesheet file was unwritable so the stylesheet is now stored in the database containing your modification.',	'EDIT_THEME_STORE_PARSED'			=> 'The theme requires that its stylesheet is parsed. This is only possible if its stored in the database.',	'EDITOR_DISABLED'					=> 'The template editor is disabled.',	'EXPORT'							=> 'Export',	'FOREGROUND'			=> 'Foreground',	'FONT_COLOUR'			=> 'Font colour',	'FONT_FACE'				=> 'Font face',	'FONT_FACE_EXPLAIN'		=> 'You can specify multiple fonts separated by commas. If a user doesnt have the first font installed the first other working font will be chosen.',	'FONT_SIZE'				=> 'Font size',	'GLOBAL_IMAGES'			=> 'Global',	'HIDE_CSS'				=> 'Hide raw CSS',	'IMAGE_WIDTH'				=> 'Image width',	'IMAGE_HEIGHT'				=> 'Image height',	'IMAGE'						=> 'Image',	'IMAGE_NAME'				=> 'Image name',	'IMAGE_PARAMETER'			=> 'Parameter',	'IMAGE_VALUE'				=> 'Value',	'IMAGESET_ADDED'			=> 'New imageset added on filesystem.',	'IMAGESET_ADDED_DB'			=> 'New imageset added to database.',	'IMAGESET_DELETED'			=> 'Imageset deleted successfully.',	'IMAGESET_DELETED_FS'		=> 'Imageset removed from database but some files may remain on the filesystem.',	'IMAGESET_DETAILS_UPDATED'	=> 'Imageset details successfully updated.',	'IMAGESET_ERR_ARCHIVE'		=> 'Please select an archive method.',	'IMAGESET_ERR_COPY_LONG'	=> 'The copyright can be no longer than 60 characters.',	'IMAGESET_ERR_NAME_CHARS'	=> 'The imageset name can only contain alphanumeric characters, -, +, _ and space.',	'IMAGESET_ERR_NAME_EXIST'	=> 'A imageset with that name already exists.',	'IMAGESET_ERR_NAME_LONG'	=> 'The imageset name can be no longer than 30 characters.',	'IMAGESET_ERR_NOT_IMAGESET'	=> 'The archive you specified does not contain a valid imageset.',	'IMAGESET_ERR_STYLE_NAME'	=> 'You must supply a name for this imageset.',	'IMAGESET_EXPORT'			=> 'Export imageset',	'IMAGESET_EXPORT_EXPLAIN'	=> 'Here you can export an imageset in the form of an archive. This archive will contain all the data necessary to install the set of images on another board. You may select whether to download the file directly or to place it in your store folder for download later or via FTP.',	'IMAGESET_EXPORTED'			=> 'Imageset exported successfully and stored in %s.',	'IMAGESET_NAME'				=> 'Imageset name',	'IMAGESET_REFRESHED'		=> 'Imageset refreshed successfully.',	'IMAGESET_UPDATED'			=> 'Imageset updated successfully.',	'ITALIC'					=> 'Italic',	'IMG_CAT_BUTTONS'		=> 'Localised buttons',	'IMG_CAT_CUSTOM'		=> 'Custom images',	'IMG_CAT_FOLDERS'		=> 'Topic icons',	'IMG_CAT_FORUMS'		=> 'Forum icons',	'IMG_CAT_ICONS'			=> 'General icons',	'IMG_CAT_LOGOS'			=> 'Logos',	'IMG_CAT_POLLS'			=> 'Polling images',	'IMG_CAT_UI'			=> 'General user interface elements',	'IMG_CAT_USER'			=> 'Additional images',	'IMG_SITE_LOGO'			=> 'Main logo',	'IMG_UPLOAD_BAR'		=> 'Upload progress bar',	'IMG_POLL_LEFT'			=> 'Poll left end',	'IMG_POLL_CENTER'		=> 'Poll centre',	'IMG_POLL_RIGHT'		=> 'Poll right end',	'IMG_ICON_FRIEND'		=> 'Add as friend',	'IMG_ICON_FOE'			=> 'Add as foe',	'IMG_FORUM_LINK'			=> 'Forum link',	'IMG_FORUM_READ'			=> 'Forum',	'IMG_FORUM_READ_LOCKED'		=> 'Forum locked',	'IMG_FORUM_READ_SUBFORUM'	=> 'Subforum',	'IMG_FORUM_UNREAD'			=> 'Forum unread posts',	'IMG_FORUM_UNREAD_LOCKED'	=> 'Forum unread posts locked',	'IMG_FORUM_UNREAD_SUBFORUM'	=> 'Subforum unread posts',	'IMG_SUBFORUM_READ'			=> 'Legend subforum',	'IMG_SUBFORUM_UNREAD'		=> 'Legend subforum unread posts',	'IMG_TOPIC_MOVED'			=> 'Topic moved',	'IMG_TOPIC_READ'				=> 'Topic',	'IMG_TOPIC_READ_MINE'			=> 'Topic posted to',	'IMG_TOPIC_READ_HOT'			=> 'Topic popular',	'IMG_TOPIC_READ_HOT_MINE'		=> 'Topic popular posted to',	'IMG_TOPIC_READ_LOCKED'			=> 'Topic locked',	'IMG_TOPIC_READ_LOCKED_MINE'	=> 'Topic locked posted to',	'IMG_TOPIC_UNREAD'				=> 'Topic unread posts',	'IMG_TOPIC_UNREAD_MINE'			=> 'Topic posted to unread',	'IMG_TOPIC_UNREAD_HOT'			=> 'Topic popular unread posts',	'IMG_TOPIC_UNREAD_HOT_MINE'		=> 'Topic popular posted to unread',	'IMG_TOPIC_UNREAD_LOCKED'		=> 'Topic locked unread',	'IMG_TOPIC_UNREAD_LOCKED_MINE'	=> 'Topic locked posted to unread',	'IMG_STICKY_READ'				=> 'Sticky topic',	'IMG_STICKY_READ_MINE'			=> 'Sticky topic posted to',	'IMG_STICKY_READ_LOCKED'		=> 'Sticky topic locked',	'IMG_STICKY_READ_LOCKED_MINE'	=> 'Sticky topic locked posted to',	'IMG_STICKY_UNREAD'				=> 'Sticky topic unread posts',	'IMG_STICKY_UNREAD_MINE'		=> 'Sticky topic posted to unread',	'IMG_STICKY_UNREAD_LOCKED'		=> 'Sticky topic locked unread posts',	'IMG_STICKY_UNREAD_LOCKED_MINE'	=> 'Sticky topic locked posted to unread',	'IMG_ANNOUNCE_READ'					=> 'Announcement',	'IMG_ANNOUNCE_READ_MINE'			=> 'Announcement posted to',	'IMG_ANNOUNCE_READ_LOCKED'			=> 'Announcement locked',	'IMG_ANNOUNCE_READ_LOCKED_MINE'		=> 'Announcement locked posted to',	'IMG_ANNOUNCE_UNREAD'				=> 'Announcement unread posts',	'IMG_ANNOUNCE_UNREAD_MINE'			=> 'Announcement posted to unread',	'IMG_ANNOUNCE_UNREAD_LOCKED'		=> 'Announcement locked unread posts',	'IMG_ANNOUNCE_UNREAD_LOCKED_MINE'	=> 'Announcement locked posted to unread',	'IMG_GLOBAL_READ'					=> 'Global',	'IMG_GLOBAL_READ_MINE'				=> 'Global posted to',	'IMG_GLOBAL_READ_LOCKED'			=> 'Global locked',	'IMG_GLOBAL_READ_LOCKED_MINE'		=> 'Global locked posted to',	'IMG_GLOBAL_UNREAD'					=> 'Global unread posts',	'IMG_GLOBAL_UNREAD_MINE'			=> 'Global posted to unread',	'IMG_GLOBAL_UNREAD_LOCKED'			=> 'Global locked unread posts',	'IMG_GLOBAL_UNREAD_LOCKED_MINE'		=> 'Global locked posted to unread',	'IMG_PM_READ'		=> 'Read private message',	'IMG_PM_UNREAD'		=> 'Unread private message',	'IMG_ICON_BACK_TOP'		=> 'Top',	'IMG_ICON_CONTACT_AIM'		=> 'AIM',	'IMG_ICON_CONTACT_EMAIL'	=> 'Send e-mail',	'IMG_ICON_CONTACT_ICQ'		=> 'ICQ',	'IMG_ICON_CONTACT_JABBER'	=> 'Jabber',	'IMG_ICON_CONTACT_MSNM'		=> 'MSNM',	'IMG_ICON_CONTACT_PM'		=> 'Send message',	'IMG_ICON_CONTACT_YAHOO'	=> 'YIM',	'IMG_ICON_CONTACT_WWW'		=> 'Website',	'IMG_ICON_POST_DELETE'			=> 'Delete post',	'IMG_ICON_POST_EDIT'			=> 'Edit post',	'IMG_ICON_POST_INFO'			=> 'Show post details',	'IMG_ICON_POST_QUOTE'			=> 'Quote post',	'IMG_ICON_POST_REPORT'			=> 'Report post',	'IMG_ICON_POST_TARGET'			=> 'Minipost',	'IMG_ICON_POST_TARGET_UNREAD'	=> 'New minipost',	'IMG_ICON_TOPIC_ATTACH'			=> 'Attachment',	'IMG_ICON_TOPIC_LATEST'			=> 'Last post',	'IMG_ICON_TOPIC_NEWEST'			=> 'Last unread post',	'IMG_ICON_TOPIC_REPORTED'		=> 'Post reported',	'IMG_ICON_TOPIC_UNAPPROVED'		=> 'Post unapproved',	'IMG_ICON_USER_ONLINE'		=> 'User online',	'IMG_ICON_USER_OFFLINE'		=> 'User offline',	'IMG_ICON_USER_PROFILE'		=> 'Show profile',	'IMG_ICON_USER_SEARCH'		=> 'Search posts',	'IMG_ICON_USER_WARN'		=> 'Warn user',	'IMG_BUTTON_PM_FORWARD'		=> 'Forward private message',	'IMG_BUTTON_PM_NEW'			=> 'New private message',	'IMG_BUTTON_PM_REPLY'		=> 'Reply private message',	'IMG_BUTTON_TOPIC_LOCKED'	=> 'Topic locked',	'IMG_BUTTON_TOPIC_NEW'		=> 'New topic',	'IMG_BUTTON_TOPIC_REPLY'	=> 'Reply topic',	'IMG_USER_ICON1'		=> 'User defined image 1',	'IMG_USER_ICON2'		=> 'User defined image 2',	'IMG_USER_ICON3'		=> 'User defined image 3',	'IMG_USER_ICON4'		=> 'User defined image 4',	'IMG_USER_ICON5'		=> 'User defined image 5',	'IMG_USER_ICON6'		=> 'User defined image 6',	'IMG_USER_ICON7'		=> 'User defined image 7',	'IMG_USER_ICON8'		=> 'User defined image 8',	'IMG_USER_ICON9'		=> 'User defined image 9',	'IMG_USER_ICON10'		=> 'User defined image 10',	'INCLUDE_DIMENSIONS'		=> 'Include dimensions',	'INCLUDE_IMAGESET'			=> 'Include imageset',	'INCLUDE_TEMPLATE'			=> 'Include template',	'INCLUDE_THEME'				=> 'Include theme',	'INHERITING_FROM'			=> 'Inherits from',	'INSTALL_IMAGESET'			=> 'Install imageset',	'INSTALL_IMAGESET_EXPLAIN'	=> 'Here you can install your selected imageset. You can edit certain details if you wish or use the installation defaults.',	'INSTALL_STYLE'				=> 'Install style',	'INSTALL_STYLE_EXPLAIN'		=> 'Here you can install a new style and if appropriate the corresponding style elements. If you already have the relevant style elements installed they will not be overwritten. Some styles require existing style elements to already be installed. If you try installing such a style and do not have the required elements you will be notified.',	'INSTALL_TEMPLATE'			=> 'Install Template',	'INSTALL_TEMPLATE_EXPLAIN'	=> 'Here you can install a new template set. Depending on your server configuration you may have a number of options here.',	'INSTALL_THEME'				=> 'Install theme',	'INSTALL_THEME_EXPLAIN'		=> 'Here you can install your selected theme. You can edit certain details if you wish or use the installation defaults.',	'INSTALLED_IMAGESET'		=> 'Installed imagesets',	'INSTALLED_STYLE'			=> 'Installed styles',	'INSTALLED_TEMPLATE'		=> 'Installed templates',	'INSTALLED_THEME'			=> 'Installed themes',	'KEEP_IMAGESET'				=> 'Keep %s imageset',	'KEEP_TEMPLATE'				=> 'Keep %s template',	'KEEP_THEME'				=> 'Keep %s theme',	'LINE_SPACING'				=> 'Line spacing',	'LOCALISED_IMAGES'			=> 'Localised',	'LOCATION_DISABLED_EXPLAIN'	=> 'This setting is inherited and cannot be changed.',	'NO_CLASS'					=> 'Cannot find class in stylesheet.',	'NO_IMAGESET'				=> 'Cannot find imageset on filesystem.',	'NO_IMAGE'					=> 'No image',	'NO_IMAGE_ERROR'			=> 'Cannot find image on filesystem.',	'NO_STYLE'					=> 'Cannot find style on filesystem.',	'NO_TEMPLATE'				=> 'Cannot find template on filesystem.',	'NO_THEME'					=> 'Cannot find theme on filesystem.',	'NO_UNINSTALLED_IMAGESET'	=> 'No uninstalled imagesets detected.',	'NO_UNINSTALLED_STYLE'		=> 'No uninstalled styles detected.',	'NO_UNINSTALLED_TEMPLATE'	=> 'No uninstalled templates detected.',	'NO_UNINSTALLED_THEME'		=> 'No uninstalled themes detected.',	'NO_UNIT'					=> 'None',	'ONLY_IMAGESET'			=> 'This is the only remaining imageset, you cannot delete it.',	'ONLY_STYLE'			=> 'This is the only remaining style, you cannot delete it.',	'ONLY_TEMPLATE'			=> 'This is the only remaining template set, you cannot delete it.',	'ONLY_THEME'			=> 'This is the only remaining theme, you cannot delete it.',	'OPTIONAL_BASIS'		=> 'Optional basis',	'REFRESH'					=> 'Refresh',	'REPEAT_NO'					=> 'None',	'REPEAT_X'					=> 'Only horizontally',	'REPEAT_Y'					=> 'Only vertically',	'REPEAT_ALL'				=> 'Both directions',	'REPLACE_IMAGESET'			=> 'Replace imageset with',	'REPLACE_IMAGESET_EXPLAIN'	=> 'This imageset will replace the one you are deleting in any styles that use it.',	'REPLACE_STYLE'				=> 'Replace style with',	'REPLACE_STYLE_EXPLAIN'		=> 'This style will replace the one being deleted for members that use it.',	'REPLACE_TEMPLATE'			=> 'Replace template with',	'REPLACE_TEMPLATE_EXPLAIN'	=> 'This template set will replace the one you are deleting in any styles that use it.',	'REPLACE_THEME'				=> 'Replace theme with',	'REPLACE_THEME_EXPLAIN'		=> 'This theme will replace the one you are deleting in any styles that use it.',	'REPLACE_WITH_OPTION'		=> 'Replace with %s',	'REQUIRES_IMAGESET'			=> 'This style requires the %s imageset to be installed.',	'REQUIRES_TEMPLATE'			=> 'This style requires the %s template set to be installed.',	'REQUIRES_THEME'			=> 'This style requires the %s theme to be installed.',	'SELECT_IMAGE'				=> 'Select image',	'SELECT_TEMPLATE'			=> 'Select template file',	'SELECT_THEME'				=> 'Select theme file',	'SELECTED_IMAGE'			=> 'Selected image',	'SELECTED_IMAGESET'			=> 'Selected imageset',	'SELECTED_TEMPLATE'			=> 'Selected template',	'SELECTED_TEMPLATE_FILE'	=> 'Selected template file',	'SELECTED_THEME'			=> 'Selected theme',	'SELECTED_THEME_FILE'		=> 'Selected theme file',	'STORE_DATABASE'			=> 'Database',	'STORE_FILESYSTEM'			=> 'Filesystem',	'STYLE_ACTIVATE'			=> 'Activate',	'STYLE_ACTIVE'				=> 'Active',	'STYLE_ADDED'				=> 'Style added successfully.',	'STYLE_DEACTIVATE'			=> 'Deactivate',	'STYLE_DEFAULT'				=> 'Make default style',	'STYLE_DELETED'				=> 'Style deleted successfully.',	'STYLE_DETAILS_UPDATED'		=> 'Style edited successfully.',	'STYLE_ERR_ARCHIVE'			=> 'Please select an archive method.',	'STYLE_ERR_COPY_LONG'		=> 'The copyright can be no longer than 60 characters.',	'STYLE_ERR_MORE_ELEMENTS'	=> 'You must select at least one style element.',	'STYLE_ERR_NAME_CHARS'		=> 'The style name can only contain alphanumeric characters, -, +, _ and space.',	'STYLE_ERR_NAME_EXIST'		=> 'A style with that name already exists.',	'STYLE_ERR_NAME_LONG'		=> 'The style name can be no longer than 30 characters.',	'STYLE_ERR_NO_IDS'			=> 'You must select a template, theme and imageset for this style.',	'STYLE_ERR_NOT_STYLE'		=> 'The imported or uploaded file did not contain a valid style archive.',	'STYLE_ERR_STYLE_NAME'		=> 'You must supply a name for this style.',	'STYLE_EXPORT'				=> 'Export style',	'STYLE_EXPORT_EXPLAIN'		=> 'Here you can export a style in the form of an archive. A style does not need to contain all elements but it must contain at least one. For example if you have created a new theme and imageset for a commonly used template you could simply export the theme and imageset and omit the template. You may select whether to download the file directly or to place it in your store folder for download later or via FTP.',	'STYLE_EXPORTED'			=> 'Style exported successfully and stored in %s.',	'STYLE_IMAGESET'			=> 'Imageset',	'STYLE_NAME'				=> 'Style name',	'STYLE_TEMPLATE'			=> 'Template',	'STYLE_THEME'				=> 'Theme',	'STYLE_USED_BY'				=> 'Used by (including robots)',	'TEMPLATE_ADDED'			=> 'Template set added and stored on filesystem.',	'TEMPLATE_ADDED_DB'			=> 'Template set added and stored in database.',	'TEMPLATE_CACHE'			=> 'Template cache',	'TEMPLATE_CACHE_EXPLAIN'	=> 'By default phpBB caches the compiled version of its templates. This decreases the load on the server each time a page is viewed and thus may reduce the page generation time. Here you can view the cache status of each file and delete individual files or the entire cache.',	'TEMPLATE_CACHE_CLEARED'	=> 'Template cache cleared successfully.',	'TEMPLATE_CACHE_EMPTY'		=> 'There are no cached templates.',	'TEMPLATE_DELETED'			=> 'Template set deleted successfully.',	'TEMPLATE_DELETE_DEPENDENT'	=> 'The template set cannot be deleted as there are one or more other template sets inheriting from it:',	'TEMPLATE_DELETED_FS'		=> 'Template set removed from database but some files may remain on the filesystem.',	'TEMPLATE_DETAILS_UPDATED'	=> 'Template details successfully updated.',	'TEMPLATE_EDITOR'			=> 'Raw HTML template editor',	'TEMPLATE_EDITOR_HEIGHT'	=> 'Template editor height',	'TEMPLATE_ERR_ARCHIVE'		=> 'Please select an archive method.',	'TEMPLATE_ERR_CACHE_READ'	=> 'The cache directory used to store cached versions of template files could not be opened.',	'TEMPLATE_ERR_COPY_LONG'	=> 'The copyright can be no longer than 60 characters.',	'TEMPLATE_ERR_NAME_CHARS'	=> 'The template name can only contain alphanumeric characters, -, +, _ and space.',	'TEMPLATE_ERR_NAME_EXIST'	=> 'A template set with that name already exists.',	'TEMPLATE_ERR_NAME_LONG'	=> 'The template name can be no longer than 30 characters.',	'TEMPLATE_ERR_NOT_TEMPLATE'	=> 'The archive you specified does not contain a valid template set.',	'TEMPLATE_ERR_REQUIRED_OR_INCOMPLETE' => 'The new template set requires the template %s to be installed and not inheriting itself.',	'TEMPLATE_ERR_STYLE_NAME'	=> 'You must supply a name for this template.',	'TEMPLATE_EXPORT'			=> 'Export templates',	'TEMPLATE_EXPORT_EXPLAIN'	=> 'Here you can export a template set in the form of an archive. This archive will contain all the files necessary to install the templates on another board. You may select whether to download the file directly or to place it in your store folder for download later or via FTP.',	'TEMPLATE_EXPORTED'			=> 'Templates exported successfully and stored in %s.',	'TEMPLATE_FILE'				=> 'Template file',	'TEMPLATE_FILE_UPDATED'		=> 'Template file updated successfully.',	'TEMPLATE_INHERITS'			=> 'This template sets inherits from %s and thus cannot have a different storage setting than its super template.',	'TEMPLATE_LOCATION'			=> 'Store templates in',	'TEMPLATE_LOCATION_EXPLAIN'	=> 'Images are always stored on the filesystem.',	'TEMPLATE_NAME'				=> 'Template name',	'TEMPLATE_FILE_NOT_WRITABLE'=> 'Unable to write to template file %s. Please check the permissions for the directory and the files.',	'TEMPLATE_REFRESHED'		=> 'Template refreshed successfully.',	'THEME_ADDED'				=> 'New theme added on filesystem.',	'THEME_ADDED_DB'			=> 'New theme added to database.',	'THEME_CLASS_ADDED'			=> 'Custom class added successfully.',	'THEME_DELETED'				=> 'Theme deleted successfully.',	'THEME_DELETED_FS'			=> 'Theme removed from database but files remain on the filesystem.',	'THEME_DETAILS_UPDATED'		=> 'Theme details successfully updated.',	'THEME_EDITOR'				=> 'Theme editor',	'THEME_EDITOR_HEIGHT'		=> 'Theme editor height',	'THEME_ERR_ARCHIVE'			=> 'Please select an archive method.',	'THEME_ERR_CLASS_CHARS'		=> 'Only alphanumeric characters plus ., :, -, _ and # are valid in class names.',	'THEME_ERR_COPY_LONG'		=> 'The copyright can be no longer than 60 characters.',	'THEME_ERR_NAME_CHARS'		=> 'The theme name can only contain alphanumeric characters, -, +, _ and space.',	'THEME_ERR_NAME_EXIST'		=> 'A theme with that name already exists.',	'THEME_ERR_NAME_LONG'		=> 'The theme name can be no longer than 30 characters.',	'THEME_ERR_NOT_THEME'		=> 'The archive you specified does not contain a valid theme.',	'THEME_ERR_REFRESH_FS'		=> 'This theme is stored on the filesystem so there is no need to refresh it.',	'THEME_ERR_STYLE_NAME'		=> 'You must supply a name for this theme.',	'THEME_FILE'				=> 'Theme file',	'THEME_EXPORT'				=> 'Export Theme',	'THEME_EXPORT_EXPLAIN'		=> 'Here you can export a theme in the form of an archive. This archive will contain all the data necessary to install the theme on another board. You may select whether to download the file directly or to place it in your store folder for download later or via FTP.',	'THEME_EXPORTED'			=> 'Theme exported successfully and stored in %s.',	'THEME_LOCATION'			=> 'Store stylesheet in',	'THEME_LOCATION_EXPLAIN'	=> 'Images are always stored on the filesystem.',	'THEME_NAME'				=> 'Theme name',	'THEME_REFRESHED'			=> 'Theme refreshed successfully.',	'THEME_UPDATED'				=> 'Theme updated successfully.',	'UNDERLINE'				=> 'Underline',	'UNINSTALLED_IMAGESET'	=> 'Uninstalled imagesets',	'UNINSTALLED_STYLE'		=> 'Uninstalled styles',	'UNINSTALLED_TEMPLATE'	=> 'Uninstalled templates',	'UNINSTALLED_THEME'		=> 'Uninstalled themes',	'UNSET'					=> 'Undefined',));?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_forums{	var $u_action;	var $parent_id = 0;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_admin_path, $phpbb_root_path, $phpEx;		$user->add_lang('acp/forums');		$this->tpl_name = 'acp_forums';		$this->page_title = 'ACP_MANAGE_FORUMS';		$form_key = 'acp_forums';		add_form_key($form_key);		$action		= request_var('action', '');		$update		= (isset($_POST['update'])) ? true : false;		$forum_id	= request_var('f', 0);		$this->parent_id	= request_var('parent_id', 0);		$forum_data = $errors = array();		if ($update && !check_form_key($form_key))		{			$update = false;			$errors[] = $user->lang['FORM_INVALID'];		}		// Check additional permissions		switch ($action)		{			case 'progress_bar':				$start = request_var('start', 0);				$total = request_var('total', 0);				$this->display_progress_bar($start, $total);				exit;			break;			case 'delete':				if (!$auth->acl_get('a_forumdel'))				{					trigger_error($user->lang['NO_PERMISSION_FORUM_DELETE'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}			break;			case 'add':				if (!$auth->acl_get('a_forumadd'))				{					trigger_error($user->lang['NO_PERMISSION_FORUM_ADD'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}			break;		}		// Major routines		if ($update)		{			switch ($action)			{				case 'delete':					$action_subforums	= request_var('action_subforums', '');					$subforums_to_id	= request_var('subforums_to_id', 0);					$action_posts		= request_var('action_posts', '');					$posts_to_id		= request_var('posts_to_id', 0);					$errors = $this->delete_forum($forum_id, $action_posts, $action_subforums, $posts_to_id, $subforums_to_id);					if (sizeof($errors))					{						break;					}					$auth->acl_clear_prefetch();					$cache->destroy('sql', FORUMS_TABLE);					trigger_error($user->lang['FORUM_DELETED'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id));				break;				case 'edit':					$forum_data = array(						'forum_id'		=>	$forum_id					);				// No break here				case 'add':					$forum_data += array(						'parent_id'				=> request_var('forum_parent_id', $this->parent_id),						'forum_type'			=> request_var('forum_type', FORUM_POST),						'type_action'			=> request_var('type_action', ''),						'forum_status'			=> request_var('forum_status', ITEM_UNLOCKED),						'forum_parents'			=> '',						'forum_name'			=> utf8_normalize_nfc(request_var('forum_name', '', true)),						'forum_link'			=> request_var('forum_link', ''),						'forum_link_track'		=> request_var('forum_link_track', false),						'forum_desc'			=> utf8_normalize_nfc(request_var('forum_desc', '', true)),						'forum_desc_uid'		=> '',						'forum_desc_options'	=> 7,						'forum_desc_bitfield'	=> '',						'forum_rules'			=> utf8_normalize_nfc(request_var('forum_rules', '', true)),						'forum_rules_uid'		=> '',						'forum_rules_options'	=> 7,						'forum_rules_bitfield'	=> '',						'forum_rules_link'		=> request_var('forum_rules_link', ''),						'forum_image'			=> request_var('forum_image', ''),						'forum_style'			=> request_var('forum_style', 0),						'display_subforum_list'	=> request_var('display_subforum_list', false),						'display_on_index'		=> request_var('display_on_index', false),						'forum_topics_per_page'	=> request_var('topics_per_page', 0),						'enable_indexing'		=> request_var('enable_indexing', true),						'enable_icons'			=> request_var('enable_icons', false),						'enable_prune'			=> request_var('enable_prune', false),						'enable_post_review'	=> request_var('enable_post_review', true),						'enable_quick_reply'	=> request_var('enable_quick_reply', false),						'prune_days'			=> request_var('prune_days', 7),						'prune_viewed'			=> request_var('prune_viewed', 7),						'prune_freq'			=> request_var('prune_freq', 1),						'prune_old_polls'		=> request_var('prune_old_polls', false),						'prune_announce'		=> request_var('prune_announce', false),						'prune_sticky'			=> request_var('prune_sticky', false),						'forum_password'		=> request_var('forum_password', '', true),						'forum_password_confirm'=> request_var('forum_password_confirm', '', true),						'forum_password_unset'	=> request_var('forum_password_unset', false),					);					// On add, add empty forum_options... else do not consider it (not updating it)					if ($action == 'add')					{						$forum_data['forum_options'] = 0;					}					// Use link_display_on_index setting if forum type is link					if ($forum_data['forum_type'] == FORUM_LINK)					{						$forum_data['display_on_index'] = request_var('link_display_on_index', false);					}					// Linked forums and categories are not able to be locked...					if ($forum_data['forum_type'] == FORUM_LINK || $forum_data['forum_type'] == FORUM_CAT)					{						$forum_data['forum_status'] = ITEM_UNLOCKED;					}					$forum_data['show_active'] = ($forum_data['forum_type'] == FORUM_POST) ? request_var('display_recent', true) : request_var('display_active', false);					// Get data for forum rules if specified...					if ($forum_data['forum_rules'])					{						generate_text_for_storage($forum_data['forum_rules'], $forum_data['forum_rules_uid'], $forum_data['forum_rules_bitfield'], $forum_data['forum_rules_options'], request_var('rules_parse_bbcode', false), request_var('rules_parse_urls', false), request_var('rules_parse_smilies', false));					}					// Get data for forum description if specified					if ($forum_data['forum_desc'])					{						generate_text_for_storage($forum_data['forum_desc'], $forum_data['forum_desc_uid'], $forum_data['forum_desc_bitfield'], $forum_data['forum_desc_options'], request_var('desc_parse_bbcode', false), request_var('desc_parse_urls', false), request_var('desc_parse_smilies', false));					}					$errors = $this->update_forum_data($forum_data);					if (!sizeof($errors))					{						$forum_perm_from = request_var('forum_perm_from', 0);						$cache->destroy('sql', FORUMS_TABLE);						$copied_permissions = false;						// Copy permissions?						if ($forum_perm_from && $forum_perm_from != $forum_data['forum_id'] &&							($action != 'edit' || empty($forum_id) || ($auth->acl_get('a_fauth') && $auth->acl_get('a_authusers') && $auth->acl_get('a_authgroups') && $auth->acl_get('a_mauth'))))						{							copy_forum_permissions($forum_perm_from, $forum_data['forum_id'], ($action == 'edit') ? true : false);							cache_moderators();							$copied_permissions = true;						}/* Commented out because of questionable UI workflow - re-visit for 3.0.7						else if (!$this->parent_id && $action != 'edit' && $auth->acl_get('a_fauth') && $auth->acl_get('a_authusers') && $auth->acl_get('a_authgroups') && $auth->acl_get('a_mauth'))						{							$this->copy_permission_page($forum_data);							return;						}*/						$auth->acl_clear_prefetch();						$acl_url = '&amp;mode=setting_forum_local&amp;forum_id[]=' . $forum_data['forum_id'];						$message = ($action == 'add') ? $user->lang['FORUM_CREATED'] : $user->lang['FORUM_UPDATED'];						// redirect directly to permission settings screen if authed						if ($action == 'add' && !$copied_permissions && $auth->acl_get('a_fauth'))						{							$message .= '<br /><br />' . sprintf($user->lang['REDIRECT_ACL'], '<a href="' . append_sid("{$phpbb_admin_path}index.$phpEx", 'i=permissions' . $acl_url) . '">', '</a>');							meta_refresh(4, append_sid("{$phpbb_admin_path}index.$phpEx", 'i=permissions' . $acl_url));						}						trigger_error($message . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id));					}				break;			}		}		switch ($action)		{			case 'move_up':			case 'move_down':				if (!$forum_id)				{					trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . FORUMS_TABLE . "					WHERE forum_id = $forum_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				$move_forum_name = $this->move_forum_by($row, $action, 1);				if ($move_forum_name !== false)				{					add_log('admin', 'LOG_FORUM_' . strtoupper($action), $row['forum_name'], $move_forum_name);					$cache->destroy('sql', FORUMS_TABLE);				}			break;			case 'sync':				if (!$forum_id)				{					trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				@set_time_limit(0);				$sql = 'SELECT forum_name, forum_topics_real					FROM ' . FORUMS_TABLE . "					WHERE forum_id = $forum_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				if ($row['forum_topics_real'])				{					$sql = 'SELECT MIN(topic_id) as min_topic_id, MAX(topic_id) as max_topic_id						FROM ' . TOPICS_TABLE . '						WHERE forum_id = ' . $forum_id;					$result = $db->sql_query($sql);					$row2 = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					// Typecast to int if there is no data available					$row2['min_topic_id'] = (int) $row2['min_topic_id'];					$row2['max_topic_id'] = (int) $row2['max_topic_id'];					$start = request_var('start', $row2['min_topic_id']);					$batch_size = 2000;					$end = $start + $batch_size;					// Sync all topics in batch mode...					sync('topic_approved', 'range', 'topic_id BETWEEN ' . $start . ' AND ' . $end, true, false);					sync('topic', 'range', 'topic_id BETWEEN ' . $start . ' AND ' . $end, true, true);					if ($end < $row2['max_topic_id'])					{						// We really need to find a way of showing statistics... no progress here						$sql = 'SELECT COUNT(topic_id) as num_topics							FROM ' . TOPICS_TABLE . '							WHERE forum_id = ' . $forum_id . '								AND topic_id BETWEEN ' . $start . ' AND ' . $end;						$result = $db->sql_query($sql);						$topics_done = request_var('topics_done', 0) + (int) $db->sql_fetchfield('num_topics');						$db->sql_freeresult($result);						$start += $batch_size;						$url = $this->u_action . "&amp;parent_id={$this->parent_id}&amp;f=$forum_id&amp;action=sync&amp;start=$start&amp;topics_done=$topics_done&amp;total={$row['forum_topics_real']}";						meta_refresh(0, $url);						$template->assign_vars(array(							'U_PROGRESS_BAR'		=> $this->u_action . "&amp;action=progress_bar&amp;start=$topics_done&amp;total={$row['forum_topics_real']}",							'UA_PROGRESS_BAR'		=> addslashes($this->u_action . "&amp;action=progress_bar&amp;start=$topics_done&amp;total={$row['forum_topics_real']}"),							'S_CONTINUE_SYNC'		=> true,							'L_PROGRESS_EXPLAIN'	=> sprintf($user->lang['SYNC_IN_PROGRESS_EXPLAIN'], $topics_done, $row['forum_topics_real']))						);						return;					}				}				$url = $this->u_action . "&amp;parent_id={$this->parent_id}&amp;f=$forum_id&amp;action=sync_forum";				meta_refresh(0, $url);				$template->assign_vars(array(					'U_PROGRESS_BAR'		=> $this->u_action . '&amp;action=progress_bar',					'UA_PROGRESS_BAR'		=> addslashes($this->u_action . '&amp;action=progress_bar'),					'S_CONTINUE_SYNC'		=> true,					'L_PROGRESS_EXPLAIN'	=> sprintf($user->lang['SYNC_IN_PROGRESS_EXPLAIN'], 0, $row['forum_topics_real']))				);				return;			break;			case 'sync_forum':				$sql = 'SELECT forum_name, forum_type					FROM ' . FORUMS_TABLE . "					WHERE forum_id = $forum_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				sync('forum', 'forum_id', $forum_id, false, true);				add_log('admin', 'LOG_FORUM_SYNC', $row['forum_name']);				$cache->destroy('sql', FORUMS_TABLE);				$template->assign_var('L_FORUM_RESYNCED', sprintf($user->lang['FORUM_RESYNCED'], $row['forum_name']));			break;			case 'add':			case 'edit':				if ($update)				{					$forum_data['forum_flags'] = 0;					$forum_data['forum_flags'] += (request_var('forum_link_track', false)) ? FORUM_FLAG_LINK_TRACK : 0;					$forum_data['forum_flags'] += (request_var('prune_old_polls', false)) ? FORUM_FLAG_PRUNE_POLL : 0;					$forum_data['forum_flags'] += (request_var('prune_announce', false)) ? FORUM_FLAG_PRUNE_ANNOUNCE : 0;					$forum_data['forum_flags'] += (request_var('prune_sticky', false)) ? FORUM_FLAG_PRUNE_STICKY : 0;					$forum_data['forum_flags'] += ($forum_data['show_active']) ? FORUM_FLAG_ACTIVE_TOPICS : 0;					$forum_data['forum_flags'] += (request_var('enable_post_review', true)) ? FORUM_FLAG_POST_REVIEW : 0;					$forum_data['forum_flags'] += (request_var('enable_quick_reply', false)) ? FORUM_FLAG_QUICK_REPLY : 0;				}				// Show form to create/modify a forum				if ($action == 'edit')				{					$this->page_title = 'EDIT_FORUM';					$row = $this->get_forum_info($forum_id);					$old_forum_type = $row['forum_type'];					if (!$update)					{						$forum_data = $row;					}					else					{						$forum_data['left_id'] = $row['left_id'];						$forum_data['right_id'] = $row['right_id'];					}					// Make sure no direct child forums are able to be selected as parents.					$exclude_forums = array();					foreach (get_forum_branch($forum_id, 'children') as $row)					{						$exclude_forums[] = $row['forum_id'];					}					$parents_list = make_forum_select($forum_data['parent_id'], $exclude_forums, false, false, false);					$forum_data['forum_password_confirm'] = $forum_data['forum_password'];				}				else				{					$this->page_title = 'CREATE_FORUM';					$forum_id = $this->parent_id;					$parents_list = make_forum_select($this->parent_id, false, false, false, false);					// Fill forum data with default values					if (!$update)					{						$forum_data = array(							'parent_id'				=> $this->parent_id,							'forum_type'			=> FORUM_POST,							'forum_status'			=> ITEM_UNLOCKED,							'forum_name'			=> utf8_normalize_nfc(request_var('forum_name', '', true)),							'forum_link'			=> '',							'forum_link_track'		=> false,							'forum_desc'			=> '',							'forum_rules'			=> '',							'forum_rules_link'		=> '',							'forum_image'			=> '',							'forum_style'			=> 0,							'display_subforum_list'	=> true,							'display_on_index'		=> false,							'forum_topics_per_page'	=> 0,							'enable_indexing'		=> true,							'enable_icons'			=> false,							'enable_prune'			=> false,							'prune_days'			=> 7,							'prune_viewed'			=> 7,							'prune_freq'			=> 1,							'forum_flags'			=> FORUM_FLAG_POST_REVIEW + FORUM_FLAG_ACTIVE_TOPICS,							'forum_options'			=> 0,							'forum_password'		=> '',							'forum_password_confirm'=> '',						);					}				}				$forum_rules_data = array(					'text'			=> $forum_data['forum_rules'],					'allow_bbcode'	=> true,					'allow_smilies'	=> true,					'allow_urls'	=> true				);				$forum_desc_data = array(					'text'			=> $forum_data['forum_desc'],					'allow_bbcode'	=> true,					'allow_smilies'	=> true,					'allow_urls'	=> true				);				$forum_rules_preview = '';				// Parse rules if specified				if ($forum_data['forum_rules'])				{					if (!isset($forum_data['forum_rules_uid']))					{						// Before we are able to display the preview and plane text, we need to parse our request_var()'d value...						$forum_data['forum_rules_uid'] = '';						$forum_data['forum_rules_bitfield'] = '';						$forum_data['forum_rules_options'] = 0;						generate_text_for_storage($forum_data['forum_rules'], $forum_data['forum_rules_uid'], $forum_data['forum_rules_bitfield'], $forum_data['forum_rules_options'], request_var('rules_allow_bbcode', false), request_var('rules_allow_urls', false), request_var('rules_allow_smilies', false));					}					// Generate preview content					$forum_rules_preview = generate_text_for_display($forum_data['forum_rules'], $forum_data['forum_rules_uid'], $forum_data['forum_rules_bitfield'], $forum_data['forum_rules_options']);					// decode...					$forum_rules_data = generate_text_for_edit($forum_data['forum_rules'], $forum_data['forum_rules_uid'], $forum_data['forum_rules_options']);				}				// Parse desciption if specified				if ($forum_data['forum_desc'])				{					if (!isset($forum_data['forum_desc_uid']))					{						// Before we are able to display the preview and plane text, we need to parse our request_var()'d value...						$forum_data['forum_desc_uid'] = '';						$forum_data['forum_desc_bitfield'] = '';						$forum_data['forum_desc_options'] = 0;						generate_text_for_storage($forum_data['forum_desc'], $forum_data['forum_desc_uid'], $forum_data['forum_desc_bitfield'], $forum_data['forum_desc_options'], request_var('desc_allow_bbcode', false), request_var('desc_allow_urls', false), request_var('desc_allow_smilies', false));					}					// decode...					$forum_desc_data = generate_text_for_edit($forum_data['forum_desc'], $forum_data['forum_desc_uid'], $forum_data['forum_desc_options']);				}				$forum_type_options = '';				$forum_type_ary = array(FORUM_CAT => 'CAT', FORUM_POST => 'FORUM', FORUM_LINK => 'LINK');				foreach ($forum_type_ary as $value => $lang)				{					$forum_type_options .= '<option value="' . $value . '"' . (($value == $forum_data['forum_type']) ? ' selected="selected"' : '') . '>' . $user->lang['TYPE_' . $lang] . '</option>';				}				$styles_list = style_select($forum_data['forum_style'], true);				$statuslist = '<option value="' . ITEM_UNLOCKED . '"' . (($forum_data['forum_status'] == ITEM_UNLOCKED) ? ' selected="selected"' : '') . '>' . $user->lang['UNLOCKED'] . '</option><option value="' . ITEM_LOCKED . '"' . (($forum_data['forum_status'] == ITEM_LOCKED) ? ' selected="selected"' : '') . '>' . $user->lang['LOCKED'] . '</option>';				$sql = 'SELECT forum_id					FROM ' . FORUMS_TABLE . '					WHERE forum_type = ' . FORUM_POST . "						AND forum_id <> $forum_id";				$result = $db->sql_query_limit($sql, 1);				$postable_forum_exists = false;				if ($db->sql_fetchrow($result))				{					$postable_forum_exists = true;				}				$db->sql_freeresult($result);				// Subforum move options				if ($action == 'edit' && $forum_data['forum_type'] == FORUM_CAT)				{					$subforums_id = array();					$subforums = get_forum_branch($forum_id, 'children');					foreach ($subforums as $row)					{						$subforums_id[] = $row['forum_id'];					}					$forums_list = make_forum_select($forum_data['parent_id'], $subforums_id);					if ($postable_forum_exists)					{						$template->assign_vars(array(							'S_MOVE_FORUM_OPTIONS'		=> make_forum_select($forum_data['parent_id'], $subforums_id)) // , false, true, false???						);					}					$template->assign_vars(array(						'S_HAS_SUBFORUMS'		=> ($forum_data['right_id'] - $forum_data['left_id'] > 1) ? true : false,						'S_FORUMS_LIST'			=> $forums_list)					);				}				else if ($postable_forum_exists)				{					$template->assign_vars(array(						'S_MOVE_FORUM_OPTIONS'		=> make_forum_select($forum_data['parent_id'], $forum_id, false, true, false))					);				}				$s_show_display_on_index = false;				if ($forum_data['parent_id'] > 0)				{					// if this forum is a subforum put the "display on index" checkbox					if ($parent_info = $this->get_forum_info($forum_data['parent_id']))					{						if ($parent_info['parent_id'] > 0 || $parent_info['forum_type'] == FORUM_CAT)						{							$s_show_display_on_index = true;						}					}				}				if (strlen($forum_data['forum_password']) == 32)				{					$errors[] = $user->lang['FORUM_PASSWORD_OLD'];				}				$template->assign_vars(array(					'S_EDIT_FORUM'		=> true,					'S_ERROR'			=> (sizeof($errors)) ? true : false,					'S_PARENT_ID'		=> $this->parent_id,					'S_FORUM_PARENT_ID'	=> $forum_data['parent_id'],					'S_ADD_ACTION'		=> ($action == 'add') ? true : false,					'U_BACK'		=> $this->u_action . '&amp;parent_id=' . $this->parent_id,					'U_EDIT_ACTION'	=> $this->u_action . "&amp;parent_id={$this->parent_id}&amp;action=$action&amp;f=$forum_id",					'L_COPY_PERMISSIONS_EXPLAIN'	=> $user->lang['COPY_PERMISSIONS_' . strtoupper($action) . '_EXPLAIN'],					'L_TITLE'						=> $user->lang[$this->page_title],					'ERROR_MSG'						=> (sizeof($errors)) ? implode('<br />', $errors) : '',					'FORUM_NAME'				=> $forum_data['forum_name'],					'FORUM_DATA_LINK'			=> $forum_data['forum_link'],					'FORUM_IMAGE'				=> $forum_data['forum_image'],					'FORUM_IMAGE_SRC'			=> ($forum_data['forum_image']) ? $phpbb_root_path . $forum_data['forum_image'] : '',					'FORUM_POST'				=> FORUM_POST,					'FORUM_LINK'				=> FORUM_LINK,					'FORUM_CAT'					=> FORUM_CAT,					'PRUNE_FREQ'				=> $forum_data['prune_freq'],					'PRUNE_DAYS'				=> $forum_data['prune_days'],					'PRUNE_VIEWED'				=> $forum_data['prune_viewed'],					'TOPICS_PER_PAGE'			=> $forum_data['forum_topics_per_page'],					'FORUM_RULES_LINK'			=> $forum_data['forum_rules_link'],					'FORUM_RULES'				=> $forum_data['forum_rules'],					'FORUM_RULES_PREVIEW'		=> $forum_rules_preview,					'FORUM_RULES_PLAIN'			=> $forum_rules_data['text'],					'S_BBCODE_CHECKED'			=> ($forum_rules_data['allow_bbcode']) ? true : false,					'S_SMILIES_CHECKED'			=> ($forum_rules_data['allow_smilies']) ? true : false,					'S_URLS_CHECKED'			=> ($forum_rules_data['allow_urls']) ? true : false,					'S_FORUM_PASSWORD_SET'		=> (empty($forum_data['forum_password'])) ? false : true,					'FORUM_DESC'				=> $forum_desc_data['text'],					'S_DESC_BBCODE_CHECKED'		=> ($forum_desc_data['allow_bbcode']) ? true : false,					'S_DESC_SMILIES_CHECKED'	=> ($forum_desc_data['allow_smilies']) ? true : false,					'S_DESC_URLS_CHECKED'		=> ($forum_desc_data['allow_urls']) ? true : false,					'S_FORUM_TYPE_OPTIONS'		=> $forum_type_options,					'S_STATUS_OPTIONS'			=> $statuslist,					'S_PARENT_OPTIONS'			=> $parents_list,					'S_STYLES_OPTIONS'			=> $styles_list,					'S_FORUM_OPTIONS'			=> make_forum_select(($action == 'add') ? $forum_data['parent_id'] : false, ($action == 'edit') ? $forum_data['forum_id'] : false, false, false, false),					'S_SHOW_DISPLAY_ON_INDEX'	=> $s_show_display_on_index,					'S_FORUM_POST'				=> ($forum_data['forum_type'] == FORUM_POST) ? true : false,					'S_FORUM_ORIG_POST'			=> (isset($old_forum_type) && $old_forum_type == FORUM_POST) ? true : false,					'S_FORUM_ORIG_CAT'			=> (isset($old_forum_type) && $old_forum_type == FORUM_CAT) ? true : false,					'S_FORUM_ORIG_LINK'			=> (isset($old_forum_type) && $old_forum_type == FORUM_LINK) ? true : false,					'S_FORUM_LINK'				=> ($forum_data['forum_type'] == FORUM_LINK) ? true : false,					'S_FORUM_CAT'				=> ($forum_data['forum_type'] == FORUM_CAT) ? true : false,					'S_ENABLE_INDEXING'			=> ($forum_data['enable_indexing']) ? true : false,					'S_TOPIC_ICONS'				=> ($forum_data['enable_icons']) ? true : false,					'S_DISPLAY_SUBFORUM_LIST'	=> ($forum_data['display_subforum_list']) ? true : false,					'S_DISPLAY_ON_INDEX'		=> ($forum_data['display_on_index']) ? true : false,					'S_PRUNE_ENABLE'			=> ($forum_data['enable_prune']) ? true : false,					'S_FORUM_LINK_TRACK'		=> ($forum_data['forum_flags'] & FORUM_FLAG_LINK_TRACK) ? true : false,					'S_PRUNE_OLD_POLLS'			=> ($forum_data['forum_flags'] & FORUM_FLAG_PRUNE_POLL) ? true : false,					'S_PRUNE_ANNOUNCE'			=> ($forum_data['forum_flags'] & FORUM_FLAG_PRUNE_ANNOUNCE) ? true : false,					'S_PRUNE_STICKY'			=> ($forum_data['forum_flags'] & FORUM_FLAG_PRUNE_STICKY) ? true : false,					'S_DISPLAY_ACTIVE_TOPICS'	=> ($forum_data['forum_type'] == FORUM_POST) ? ($forum_data['forum_flags'] & FORUM_FLAG_ACTIVE_TOPICS) : true,					'S_ENABLE_ACTIVE_TOPICS'	=> ($forum_data['forum_type'] == FORUM_CAT) ? ($forum_data['forum_flags'] & FORUM_FLAG_ACTIVE_TOPICS) : false,					'S_ENABLE_POST_REVIEW'		=> ($forum_data['forum_flags'] & FORUM_FLAG_POST_REVIEW) ? true : false,					'S_ENABLE_QUICK_REPLY'		=> ($forum_data['forum_flags'] & FORUM_FLAG_QUICK_REPLY) ? true : false,					'S_CAN_COPY_PERMISSIONS'	=> ($action != 'edit' || empty($forum_id) || ($auth->acl_get('a_fauth') && $auth->acl_get('a_authusers') && $auth->acl_get('a_authgroups') && $auth->acl_get('a_mauth'))) ? true : false,				));				return;			break;			case 'delete':				if (!$forum_id)				{					trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				$forum_data = $this->get_forum_info($forum_id);				$subforums_id = array();				$subforums = get_forum_branch($forum_id, 'children');				foreach ($subforums as $row)				{					$subforums_id[] = $row['forum_id'];				}				$forums_list = make_forum_select($forum_data['parent_id'], $subforums_id);				$sql = 'SELECT forum_id					FROM ' . FORUMS_TABLE . '					WHERE forum_type = ' . FORUM_POST . "						AND forum_id <> $forum_id";				$result = $db->sql_query_limit($sql, 1);				if ($db->sql_fetchrow($result))				{					$template->assign_vars(array(						'S_MOVE_FORUM_OPTIONS'		=> make_forum_select($forum_data['parent_id'], $subforums_id, false, true)) // , false, true, false???					);				}				$db->sql_freeresult($result);				$parent_id = ($this->parent_id == $forum_id) ? 0 : $this->parent_id;				$template->assign_vars(array(					'S_DELETE_FORUM'		=> true,					'U_ACTION'				=> $this->u_action . "&amp;parent_id={$parent_id}&amp;action=delete&amp;f=$forum_id",					'U_BACK'				=> $this->u_action . '&amp;parent_id=' . $this->parent_id,					'FORUM_NAME'			=> $forum_data['forum_name'],					'S_FORUM_POST'			=> ($forum_data['forum_type'] == FORUM_POST) ? true : false,					'S_FORUM_LINK'			=> ($forum_data['forum_type'] == FORUM_LINK) ? true : false,					'S_HAS_SUBFORUMS'		=> ($forum_data['right_id'] - $forum_data['left_id'] > 1) ? true : false,					'S_FORUMS_LIST'			=> $forums_list,					'S_ERROR'				=> (sizeof($errors)) ? true : false,					'ERROR_MSG'				=> (sizeof($errors)) ? implode('<br />', $errors) : '')				);				return;			break;			case 'copy_perm':				$forum_perm_from = request_var('forum_perm_from', 0);				// Copy permissions?				if (!empty($forum_perm_from) && $forum_perm_from != $forum_id)				{					copy_forum_permissions($forum_perm_from, $forum_id, true);					cache_moderators();					$auth->acl_clear_prefetch();					$cache->destroy('sql', FORUMS_TABLE);					$acl_url = '&amp;mode=setting_forum_local&amp;forum_id[]=' . $forum_id;					$message = $user->lang['FORUM_UPDATED'];					// Redirect to permissions					if ($auth->acl_get('a_fauth'))					{						$message .= '<br /><br />' . sprintf($user->lang['REDIRECT_ACL'], '<a href="' . append_sid("{$phpbb_admin_path}index.$phpEx", 'i=permissions' . $acl_url) . '">', '</a>');					}					trigger_error($message . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id));				}			break;		}		// Default management page		if (!$this->parent_id)		{			$navigation = $user->lang['FORUM_INDEX'];		}		else		{			$navigation = '<a href="' . $this->u_action . '">' . $user->lang['FORUM_INDEX'] . '</a>';			$forums_nav = get_forum_branch($this->parent_id, 'parents', 'descending');			foreach ($forums_nav as $row)			{				if ($row['forum_id'] == $this->parent_id)				{					$navigation .= ' -&gt; ' . $row['forum_name'];				}				else				{					$navigation .= ' -&gt; <a href="' . $this->u_action . '&amp;parent_id=' . $row['forum_id'] . '">' . $row['forum_name'] . '</a>';				}			}		}		// Jumpbox		$forum_box = make_forum_select($this->parent_id, false, false, false, false); //make_forum_select($this->parent_id);		if ($action == 'sync' || $action == 'sync_forum')		{			$template->assign_var('S_RESYNCED', true);		}		$sql = 'SELECT *			FROM ' . FORUMS_TABLE . "			WHERE parent_id = $this->parent_id			ORDER BY left_id";		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			do			{				$forum_type = $row['forum_type'];				if ($row['forum_status'] == ITEM_LOCKED)				{					$folder_image = '<img src="images/icon_folder_lock.gif" alt="' . $user->lang['LOCKED'] . '" />';				}				else				{					switch ($forum_type)					{						case FORUM_LINK:							$folder_image = '<img src="images/icon_folder_link.gif" alt="' . $user->lang['LINK'] . '" />';						break;						default:							$folder_image = ($row['left_id'] + 1 != $row['right_id']) ? '<img src="images/icon_subfolder.gif" alt="' . $user->lang['SUBFORUM'] . '" />' : '<img src="images/icon_folder.gif" alt="' . $user->lang['FOLDER'] . '" />';						break;					}				}				$url = $this->u_action . "&amp;parent_id=$this->parent_id&amp;f={$row['forum_id']}";				$template->assign_block_vars('forums', array(					'FOLDER_IMAGE'		=> $folder_image,					'FORUM_IMAGE'		=> ($row['forum_image']) ? '<img src="' . $phpbb_root_path . $row['forum_image'] . '" alt="" />' : '',					'FORUM_IMAGE_SRC'	=> ($row['forum_image']) ? $phpbb_root_path . $row['forum_image'] : '',					'FORUM_NAME'		=> $row['forum_name'],					'FORUM_DESCRIPTION'	=> generate_text_for_display($row['forum_desc'], $row['forum_desc_uid'], $row['forum_desc_bitfield'], $row['forum_desc_options']),					'FORUM_TOPICS'		=> $row['forum_topics'],					'FORUM_POSTS'		=> $row['forum_posts'],					'S_FORUM_LINK'		=> ($forum_type == FORUM_LINK) ? true : false,					'S_FORUM_POST'		=> ($forum_type == FORUM_POST) ? true : false,					'U_FORUM'			=> $this->u_action . '&amp;parent_id=' . $row['forum_id'],					'U_MOVE_UP'			=> $url . '&amp;action=move_up',					'U_MOVE_DOWN'		=> $url . '&amp;action=move_down',					'U_EDIT'			=> $url . '&amp;action=edit',					'U_DELETE'			=> $url . '&amp;action=delete',					'U_SYNC'			=> $url . '&amp;action=sync')				);			}			while ($row = $db->sql_fetchrow($result));		}		else if ($this->parent_id)		{			$row = $this->get_forum_info($this->parent_id);			$url = $this->u_action . '&amp;parent_id=' . $this->parent_id . '&amp;f=' . $row['forum_id'];			$template->assign_vars(array(				'S_NO_FORUMS'		=> true,				'U_EDIT'			=> $url . '&amp;action=edit',				'U_DELETE'			=> $url . '&amp;action=delete',				'U_SYNC'			=> $url . '&amp;action=sync')			);		}		$db->sql_freeresult($result);		$template->assign_vars(array(			'ERROR_MSG'		=> (sizeof($errors)) ? implode('<br />', $errors) : '',			'NAVIGATION'	=> $navigation,			'FORUM_BOX'		=> $forum_box,			'U_SEL_ACTION'	=> $this->u_action,			'U_ACTION'		=> $this->u_action . '&amp;parent_id=' . $this->parent_id,			'U_PROGRESS_BAR'	=> $this->u_action . '&amp;action=progress_bar',			'UA_PROGRESS_BAR'	=> addslashes($this->u_action . '&amp;action=progress_bar'),		));	}	/**	* Get forum details	*/	function get_forum_info($forum_id)	{		global $db;		$sql = 'SELECT *			FROM ' . FORUMS_TABLE . "			WHERE forum_id = $forum_id";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$row)		{			trigger_error("Forum #$forum_id does not exist", E_USER_ERROR);		}		return $row;	}	/**	* Update forum data	*/	function update_forum_data(&$forum_data)	{		global $db, $user, $cache, $phpbb_root_path;		$errors = array();		if ($forum_data['forum_name'] == '')		{			$errors[] = $user->lang['FORUM_NAME_EMPTY'];		}		if (utf8_strlen($forum_data['forum_desc']) > 4000)		{			$errors[] = $user->lang['FORUM_DESC_TOO_LONG'];		}		if (utf8_strlen($forum_data['forum_rules']) > 4000)		{			$errors[] = $user->lang['FORUM_RULES_TOO_LONG'];		}		if ($forum_data['forum_password'] || $forum_data['forum_password_confirm'])		{			if ($forum_data['forum_password'] != $forum_data['forum_password_confirm'])			{				$forum_data['forum_password'] = $forum_data['forum_password_confirm'] = '';				$errors[] = $user->lang['FORUM_PASSWORD_MISMATCH'];			}		}		if ($forum_data['prune_days'] < 0 || $forum_data['prune_viewed'] < 0 || $forum_data['prune_freq'] < 0)		{			$forum_data['prune_days'] = $forum_data['prune_viewed'] = $forum_data['prune_freq'] = 0;			$errors[] = $user->lang['FORUM_DATA_NEGATIVE'];		}		$range_test_ary = array(			array('lang' => 'FORUM_TOPICS_PAGE', 'value' => $forum_data['forum_topics_per_page'], 'column_type' => 'TINT:0'),		);		if (!empty($forum_data['forum_image']) && !file_exists($phpbb_root_path . $forum_data['forum_image']))		{			$errors[] = $user->lang['FORUM_IMAGE_NO_EXIST'];		}		validate_range($range_test_ary, $errors);		// Set forum flags		// 1 = link tracking		// 2 = prune old polls		// 4 = prune announcements		// 8 = prune stickies		// 16 = show active topics		// 32 = enable post review		$forum_data['forum_flags'] = 0;		$forum_data['forum_flags'] += ($forum_data['forum_link_track']) ? FORUM_FLAG_LINK_TRACK : 0;		$forum_data['forum_flags'] += ($forum_data['prune_old_polls']) ? FORUM_FLAG_PRUNE_POLL : 0;		$forum_data['forum_flags'] += ($forum_data['prune_announce']) ? FORUM_FLAG_PRUNE_ANNOUNCE : 0;		$forum_data['forum_flags'] += ($forum_data['prune_sticky']) ? FORUM_FLAG_PRUNE_STICKY : 0;		$forum_data['forum_flags'] += ($forum_data['show_active']) ? FORUM_FLAG_ACTIVE_TOPICS : 0;		$forum_data['forum_flags'] += ($forum_data['enable_post_review']) ? FORUM_FLAG_POST_REVIEW : 0;		$forum_data['forum_flags'] += ($forum_data['enable_quick_reply']) ? FORUM_FLAG_QUICK_REPLY : 0;		// Unset data that are not database fields		$forum_data_sql = $forum_data;		unset($forum_data_sql['forum_link_track']);		unset($forum_data_sql['prune_old_polls']);		unset($forum_data_sql['prune_announce']);		unset($forum_data_sql['prune_sticky']);		unset($forum_data_sql['show_active']);		unset($forum_data_sql['enable_post_review']);		unset($forum_data_sql['enable_quick_reply']);		unset($forum_data_sql['forum_password_confirm']);		// What are we going to do tonight Brain? The same thing we do everynight,		// try to take over the world ... or decide whether to continue update		// and if so, whether it's a new forum/cat/link or an existing one		if (sizeof($errors))		{			return $errors;		}		// As we don't know the old password, it's kinda tricky to detect changes		if ($forum_data_sql['forum_password_unset'])		{			$forum_data_sql['forum_password'] = '';		}		else if (empty($forum_data_sql['forum_password']))		{			unset($forum_data_sql['forum_password']);		}		else		{			$forum_data_sql['forum_password'] = phpbb_hash($forum_data_sql['forum_password']);		}		unset($forum_data_sql['forum_password_unset']);		if (!isset($forum_data_sql['forum_id']))		{			// no forum_id means we're creating a new forum			unset($forum_data_sql['type_action']);			if ($forum_data_sql['parent_id'])			{				$sql = 'SELECT left_id, right_id, forum_type					FROM ' . FORUMS_TABLE . '					WHERE forum_id = ' . $forum_data_sql['parent_id'];				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['PARENT_NOT_EXIST'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				if ($row['forum_type'] == FORUM_LINK)				{					$errors[] = $user->lang['PARENT_IS_LINK_FORUM'];					return $errors;				}				$sql = 'UPDATE ' . FORUMS_TABLE . '					SET left_id = left_id + 2, right_id = right_id + 2					WHERE left_id > ' . $row['right_id'];				$db->sql_query($sql);				$sql = 'UPDATE ' . FORUMS_TABLE . '					SET right_id = right_id + 2					WHERE ' . $row['left_id'] . ' BETWEEN left_id AND right_id';				$db->sql_query($sql);				$forum_data_sql['left_id'] = $row['right_id'];				$forum_data_sql['right_id'] = $row['right_id'] + 1;			}			else			{				$sql = 'SELECT MAX(right_id) AS right_id					FROM ' . FORUMS_TABLE;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$forum_data_sql['left_id'] = $row['right_id'] + 1;				$forum_data_sql['right_id'] = $row['right_id'] + 2;			}			$sql = 'INSERT INTO ' . FORUMS_TABLE . ' ' . $db->sql_build_array('INSERT', $forum_data_sql);			$db->sql_query($sql);			$forum_data['forum_id'] = $db->sql_nextid();			add_log('admin', 'LOG_FORUM_ADD', $forum_data['forum_name']);		}		else		{			$row = $this->get_forum_info($forum_data_sql['forum_id']);			if ($row['forum_type'] == FORUM_POST && $row['forum_type'] != $forum_data_sql['forum_type'])			{				// Has subforums and want to change into a link?				if ($row['right_id'] - $row['left_id'] > 1 && $forum_data_sql['forum_type'] == FORUM_LINK)				{					$errors[] = $user->lang['FORUM_WITH_SUBFORUMS_NOT_TO_LINK'];					return $errors;				}				// we're turning a postable forum into a non-postable forum				if ($forum_data_sql['type_action'] == 'move')				{					$to_forum_id = request_var('to_forum_id', 0);					if ($to_forum_id)					{						$errors = $this->move_forum_content($forum_data_sql['forum_id'], $to_forum_id);					}					else					{						return array($user->lang['NO_DESTINATION_FORUM']);					}				}				else if ($forum_data_sql['type_action'] == 'delete')				{					$errors = $this->delete_forum_content($forum_data_sql['forum_id']);				}				else				{					return array($user->lang['NO_FORUM_ACTION']);				}				$forum_data_sql['forum_posts'] = $forum_data_sql['forum_topics'] = $forum_data_sql['forum_topics_real'] = $forum_data_sql['forum_last_post_id'] = $forum_data_sql['forum_last_poster_id'] = $forum_data_sql['forum_last_post_time'] = 0;				$forum_data_sql['forum_last_poster_name'] = $forum_data_sql['forum_last_poster_colour'] = '';			}			else if ($row['forum_type'] == FORUM_CAT && $forum_data_sql['forum_type'] == FORUM_LINK)			{				// Has subforums?				if ($row['right_id'] - $row['left_id'] > 1)				{					// We are turning a category into a link - but need to decide what to do with the subforums.					$action_subforums = request_var('action_subforums', '');					$subforums_to_id = request_var('subforums_to_id', 0);					if ($action_subforums == 'delete')					{						$rows = get_forum_branch($row['forum_id'], 'children', 'descending', false);						foreach ($rows as $_row)						{							// Do not remove the forum id we are about to change. ;)							if ($_row['forum_id'] == $row['forum_id'])							{								continue;							}							$forum_ids[] = $_row['forum_id'];							$errors = array_merge($errors, $this->delete_forum_content($_row['forum_id']));						}						if (sizeof($errors))						{							return $errors;						}						if (sizeof($forum_ids))						{							$sql = 'DELETE FROM ' . FORUMS_TABLE . '								WHERE ' . $db->sql_in_set('forum_id', $forum_ids);							$db->sql_query($sql);							$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . '								WHERE ' . $db->sql_in_set('forum_id', $forum_ids);							$db->sql_query($sql);							$sql = 'DELETE FROM ' . ACL_USERS_TABLE . '								WHERE ' . $db->sql_in_set('forum_id', $forum_ids);							$db->sql_query($sql);							// Delete forum ids from extension groups table							$sql = 'SELECT group_id, allowed_forums								FROM ' . EXTENSION_GROUPS_TABLE;							$result = $db->sql_query($sql);							while ($_row = $db->sql_fetchrow($result))							{								if (!$_row['allowed_forums'])								{									continue;								}								$allowed_forums = unserialize(trim($_row['allowed_forums']));								$allowed_forums = array_diff($allowed_forums, $forum_ids);								$sql = 'UPDATE ' . EXTENSION_GROUPS_TABLE . "									SET allowed_forums = '" . ((sizeof($allowed_forums)) ? serialize($allowed_forums) : '') . "'									WHERE group_id = {$_row['group_id']}";								$db->sql_query($sql);							}							$db->sql_freeresult($result);							$cache->destroy('_extensions');						}					}					else if ($action_subforums == 'move')					{						if (!$subforums_to_id)						{							return array($user->lang['NO_DESTINATION_FORUM']);						}						$sql = 'SELECT forum_name							FROM ' . FORUMS_TABLE . '							WHERE forum_id = ' . $subforums_to_id;						$result = $db->sql_query($sql);						$_row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$_row)						{							return array($user->lang['NO_FORUM']);						}						$subforums_to_name = $_row['forum_name'];						$sql = 'SELECT forum_id							FROM ' . FORUMS_TABLE . "							WHERE parent_id = {$row['forum_id']}";						$result = $db->sql_query($sql);						while ($_row = $db->sql_fetchrow($result))						{							$this->move_forum($_row['forum_id'], $subforums_to_id);						}						$db->sql_freeresult($result);						$sql = 'UPDATE ' . FORUMS_TABLE . "							SET parent_id = $subforums_to_id							WHERE parent_id = {$row['forum_id']}";						$db->sql_query($sql);					}					// Adjust the left/right id					$sql = 'UPDATE ' . FORUMS_TABLE . '						SET right_id = left_id + 1						WHERE forum_id = ' . $row['forum_id'];					$db->sql_query($sql);				}			}			else if ($row['forum_type'] == FORUM_CAT && $forum_data_sql['forum_type'] == FORUM_POST)			{				// Changing a category to a forum? Reset the data (you can't post directly in a cat, you must use a forum)				$forum_data_sql['forum_posts'] = 0;				$forum_data_sql['forum_topics'] = 0;				$forum_data_sql['forum_topics_real'] = 0;				$forum_data_sql['forum_last_post_id'] = 0;				$forum_data_sql['forum_last_post_subject'] = '';				$forum_data_sql['forum_last_post_time'] = 0;				$forum_data_sql['forum_last_poster_id'] = 0;				$forum_data_sql['forum_last_poster_name'] = '';				$forum_data_sql['forum_last_poster_colour'] = '';			}			if (sizeof($errors))			{				return $errors;			}			if ($row['parent_id'] != $forum_data_sql['parent_id'])			{				if ($row['forum_id'] != $forum_data_sql['parent_id'])				{					$errors = $this->move_forum($forum_data_sql['forum_id'], $forum_data_sql['parent_id']);				}				else				{					$forum_data_sql['parent_id'] = $row['parent_id'];				}			}			if (sizeof($errors))			{				return $errors;			}			unset($forum_data_sql['type_action']);			if ($row['forum_name'] != $forum_data_sql['forum_name'])			{				// the forum name has changed, clear the parents list of all forums (for safety)				$sql = 'UPDATE ' . FORUMS_TABLE . "					SET forum_parents = ''";				$db->sql_query($sql);			}			// Setting the forum id to the forum id is not really received well by some dbs. ;)			$forum_id = $forum_data_sql['forum_id'];			unset($forum_data_sql['forum_id']);			$sql = 'UPDATE ' . FORUMS_TABLE . '				SET ' . $db->sql_build_array('UPDATE', $forum_data_sql) . '				WHERE forum_id = ' . $forum_id;			$db->sql_query($sql);			// Add it back			$forum_data['forum_id'] = $forum_id;			add_log('admin', 'LOG_FORUM_EDIT', $forum_data['forum_name']);		}		return $errors;	}	/**	* Move forum	*/	function move_forum($from_id, $to_id)	{		global $db, $user;		$to_data = $moved_ids = $errors = array();		// Check if we want to move to a parent with link type		if ($to_id > 0)		{			$to_data = $this->get_forum_info($to_id);			if ($to_data['forum_type'] == FORUM_LINK)			{				$errors[] = $user->lang['PARENT_IS_LINK_FORUM'];				return $errors;			}		}		$moved_forums = get_forum_branch($from_id, 'children', 'descending');		$from_data = $moved_forums[0];		$diff = sizeof($moved_forums) * 2;		$moved_ids = array();		for ($i = 0; $i < sizeof($moved_forums); ++$i)		{			$moved_ids[] = $moved_forums[$i]['forum_id'];		}		// Resync parents		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET right_id = right_id - $diff, forum_parents = ''			WHERE left_id < " . $from_data['right_id'] . "				AND right_id > " . $from_data['right_id'];		$db->sql_query($sql);		// Resync righthand side of tree		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET left_id = left_id - $diff, right_id = right_id - $diff, forum_parents = ''			WHERE left_id > " . $from_data['right_id'];		$db->sql_query($sql);		if ($to_id > 0)		{			// Retrieve $to_data again, it may have been changed...			$to_data = $this->get_forum_info($to_id);			// Resync new parents			$sql = 'UPDATE ' . FORUMS_TABLE . "				SET right_id = right_id + $diff, forum_parents = ''				WHERE " . $to_data['right_id'] . ' BETWEEN left_id AND right_id					AND ' . $db->sql_in_set('forum_id', $moved_ids, true);			$db->sql_query($sql);			// Resync the righthand side of the tree			$sql = 'UPDATE ' . FORUMS_TABLE . "				SET left_id = left_id + $diff, right_id = right_id + $diff, forum_parents = ''				WHERE left_id > " . $to_data['right_id'] . '					AND ' . $db->sql_in_set('forum_id', $moved_ids, true);			$db->sql_query($sql);			// Resync moved branch			$to_data['right_id'] += $diff;			if ($to_data['right_id'] > $from_data['right_id'])			{				$diff = '+ ' . ($to_data['right_id'] - $from_data['right_id'] - 1);			}			else			{				$diff = '- ' . abs($to_data['right_id'] - $from_data['right_id'] - 1);			}		}		else		{			$sql = 'SELECT MAX(right_id) AS right_id				FROM ' . FORUMS_TABLE . '				WHERE ' . $db->sql_in_set('forum_id', $moved_ids, true);			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			$diff = '+ ' . ($row['right_id'] - $from_data['left_id'] + 1);		}		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET left_id = left_id $diff, right_id = right_id $diff, forum_parents = ''			WHERE " . $db->sql_in_set('forum_id', $moved_ids);		$db->sql_query($sql);		return $errors;	}	/**	* Move forum content from one to another forum	*/	function move_forum_content($from_id, $to_id, $sync = true)	{		global $db;		$table_ary = array(LOG_TABLE, POSTS_TABLE, TOPICS_TABLE, DRAFTS_TABLE, TOPICS_TRACK_TABLE);		foreach ($table_ary as $table)		{			$sql = "UPDATE $table				SET forum_id = $to_id				WHERE forum_id = $from_id";			$db->sql_query($sql);		}		unset($table_ary);		$table_ary = array(FORUMS_ACCESS_TABLE, FORUMS_TRACK_TABLE, FORUMS_WATCH_TABLE, MODERATOR_CACHE_TABLE);		foreach ($table_ary as $table)		{			$sql = "DELETE FROM $table				WHERE forum_id = $from_id";			$db->sql_query($sql);		}		if ($sync)		{			// Delete ghost topics that link back to the same forum then resync counters			sync('topic_moved');			sync('forum', 'forum_id', $to_id, false, true);		}		return array();	}	/**	* Remove complete forum	*/	function delete_forum($forum_id, $action_posts = 'delete', $action_subforums = 'delete', $posts_to_id = 0, $subforums_to_id = 0)	{		global $db, $user, $cache;		$forum_data = $this->get_forum_info($forum_id);		$errors = array();		$log_action_posts = $log_action_forums = $posts_to_name = $subforums_to_name = '';		$forum_ids = array($forum_id);		if ($action_posts == 'delete')		{			$log_action_posts = 'POSTS';			$errors = array_merge($errors, $this->delete_forum_content($forum_id));		}		else if ($action_posts == 'move')		{			if (!$posts_to_id)			{				$errors[] = $user->lang['NO_DESTINATION_FORUM'];			}			else			{				$log_action_posts = 'MOVE_POSTS';				$sql = 'SELECT forum_name					FROM ' . FORUMS_TABLE . '					WHERE forum_id = ' . $posts_to_id;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					$errors[] = $user->lang['NO_FORUM'];				}				else				{					$posts_to_name = $row['forum_name'];					$errors = array_merge($errors, $this->move_forum_content($forum_id, $posts_to_id));				}			}		}		if (sizeof($errors))		{			return $errors;		}		if ($action_subforums == 'delete')		{			$log_action_forums = 'FORUMS';			$rows = get_forum_branch($forum_id, 'children', 'descending', false);			foreach ($rows as $row)			{				$forum_ids[] = $row['forum_id'];				$errors = array_merge($errors, $this->delete_forum_content($row['forum_id']));			}			if (sizeof($errors))			{				return $errors;			}			$diff = sizeof($forum_ids) * 2;			$sql = 'DELETE FROM ' . FORUMS_TABLE . '				WHERE ' . $db->sql_in_set('forum_id', $forum_ids);			$db->sql_query($sql);			$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . '				WHERE ' . $db->sql_in_set('forum_id', $forum_ids);			$db->sql_query($sql);			$sql = 'DELETE FROM ' . ACL_USERS_TABLE . '				WHERE ' . $db->sql_in_set('forum_id', $forum_ids);			$db->sql_query($sql);		}		else if ($action_subforums == 'move')		{			if (!$subforums_to_id)			{				$errors[] = $user->lang['NO_DESTINATION_FORUM'];			}			else			{				$log_action_forums = 'MOVE_FORUMS';				$sql = 'SELECT forum_name					FROM ' . FORUMS_TABLE . '					WHERE forum_id = ' . $subforums_to_id;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					$errors[] = $user->lang['NO_FORUM'];				}				else				{					$subforums_to_name = $row['forum_name'];					$sql = 'SELECT forum_id						FROM ' . FORUMS_TABLE . "						WHERE parent_id = $forum_id";					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$this->move_forum($row['forum_id'], $subforums_to_id);					}					$db->sql_freeresult($result);					// Grab new forum data for correct tree updating later					$forum_data = $this->get_forum_info($forum_id);					$sql = 'UPDATE ' . FORUMS_TABLE . "						SET parent_id = $subforums_to_id						WHERE parent_id = $forum_id";					$db->sql_query($sql);					$diff = 2;					$sql = 'DELETE FROM ' . FORUMS_TABLE . "						WHERE forum_id = $forum_id";					$db->sql_query($sql);					$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . "						WHERE forum_id = $forum_id";					$db->sql_query($sql);					$sql = 'DELETE FROM ' . ACL_USERS_TABLE . "						WHERE forum_id = $forum_id";					$db->sql_query($sql);				}			}			if (sizeof($errors))			{				return $errors;			}		}		else		{			$diff = 2;			$sql = 'DELETE FROM ' . FORUMS_TABLE . "				WHERE forum_id = $forum_id";			$db->sql_query($sql);			$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . "				WHERE forum_id = $forum_id";			$db->sql_query($sql);			$sql = 'DELETE FROM ' . ACL_USERS_TABLE . "				WHERE forum_id = $forum_id";			$db->sql_query($sql);		}		// Resync tree		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET right_id = right_id - $diff			WHERE left_id < {$forum_data['right_id']} AND right_id > {$forum_data['right_id']}";		$db->sql_query($sql);		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET left_id = left_id - $diff, right_id = right_id - $diff			WHERE left_id > {$forum_data['right_id']}";		$db->sql_query($sql);		// Delete forum ids from extension groups table		$sql = 'SELECT group_id, allowed_forums			FROM ' . EXTENSION_GROUPS_TABLE;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if (!$row['allowed_forums'])			{				continue;			}			$allowed_forums = unserialize(trim($row['allowed_forums']));			$allowed_forums = array_diff($allowed_forums, $forum_ids);			$sql = 'UPDATE ' . EXTENSION_GROUPS_TABLE . "				SET allowed_forums = '" . ((sizeof($allowed_forums)) ? serialize($allowed_forums) : '') . "'				WHERE group_id = {$row['group_id']}";			$db->sql_query($sql);		}		$db->sql_freeresult($result);		$cache->destroy('_extensions');		$log_action = implode('_', array($log_action_posts, $log_action_forums));		switch ($log_action)		{			case 'MOVE_POSTS_MOVE_FORUMS':				add_log('admin', 'LOG_FORUM_DEL_MOVE_POSTS_MOVE_FORUMS', $posts_to_name, $subforums_to_name, $forum_data['forum_name']);			break;			case 'MOVE_POSTS_FORUMS':				add_log('admin', 'LOG_FORUM_DEL_MOVE_POSTS_FORUMS', $posts_to_name, $forum_data['forum_name']);			break;			case 'POSTS_MOVE_FORUMS':				add_log('admin', 'LOG_FORUM_DEL_POSTS_MOVE_FORUMS', $subforums_to_name, $forum_data['forum_name']);			break;			case '_MOVE_FORUMS':				add_log('admin', 'LOG_FORUM_DEL_MOVE_FORUMS', $subforums_to_name, $forum_data['forum_name']);			break;			case 'MOVE_POSTS_':				add_log('admin', 'LOG_FORUM_DEL_MOVE_POSTS', $posts_to_name, $forum_data['forum_name']);			break;			case 'POSTS_FORUMS':				add_log('admin', 'LOG_FORUM_DEL_POSTS_FORUMS', $forum_data['forum_name']);			break;			case '_FORUMS':				add_log('admin', 'LOG_FORUM_DEL_FORUMS', $forum_data['forum_name']);			break;			case 'POSTS_':				add_log('admin', 'LOG_FORUM_DEL_POSTS', $forum_data['forum_name']);			break;			default:				add_log('admin', 'LOG_FORUM_DEL_FORUM', $forum_data['forum_name']);			break;		}		return $errors;	}	/**	* Delete forum content	*/	function delete_forum_content($forum_id)	{		global $db, $config, $phpbb_root_path, $phpEx;		include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);		$db->sql_transaction('begin');		// Select then delete all attachments		$sql = 'SELECT a.topic_id			FROM ' . POSTS_TABLE . ' p, ' . ATTACHMENTS_TABLE . " a			WHERE p.forum_id = $forum_id				AND a.in_message = 0				AND a.topic_id = p.topic_id";		$result = $db->sql_query($sql);		$topic_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$topic_ids[] = $row['topic_id'];		}		$db->sql_freeresult($result);		delete_attachments('topic', $topic_ids, false);		// Delete shadow topics pointing to topics in this forum		delete_topic_shadows($forum_id);		// Before we remove anything we make sure we are able to adjust the post counts later. ;)		$sql = 'SELECT poster_id			FROM ' . POSTS_TABLE . '			WHERE forum_id = ' . $forum_id . '				AND post_postcount = 1				AND post_approved = 1';		$result = $db->sql_query($sql);		$post_counts = array();		while ($row = $db->sql_fetchrow($result))		{			$post_counts[$row['poster_id']] = (!empty($post_counts[$row['poster_id']])) ? $post_counts[$row['poster_id']] + 1 : 1;		}		$db->sql_freeresult($result);		switch ($db->sql_layer)		{			case 'mysql4':			case 'mysqli':				// Delete everything else and thank MySQL for offering multi-table deletion				$tables_ary = array(					SEARCH_WORDMATCH_TABLE	=> 'post_id',					REPORTS_TABLE			=> 'post_id',					WARNINGS_TABLE			=> 'post_id',					BOOKMARKS_TABLE			=> 'topic_id',					TOPICS_WATCH_TABLE		=> 'topic_id',					TOPICS_POSTED_TABLE		=> 'topic_id',					POLL_OPTIONS_TABLE		=> 'topic_id',					POLL_VOTES_TABLE		=> 'topic_id',				);				$sql = 'DELETE ' . POSTS_TABLE;				$sql_using = "\nFROM " . POSTS_TABLE;				$sql_where = "\nWHERE " . POSTS_TABLE . ".forum_id = $forum_id\n";				foreach ($tables_ary as $table => $field)				{					$sql .= ", $table ";					$sql_using .= ", $table ";					$sql_where .= "\nAND $table.$field = " . POSTS_TABLE . ".$field";				}				$db->sql_query($sql . $sql_using . $sql_where);			break;			default:				// Delete everything else and curse your DB for not offering multi-table deletion				$tables_ary = array(					'post_id'	=>	array(						SEARCH_WORDMATCH_TABLE,						REPORTS_TABLE,						WARNINGS_TABLE,					),					'topic_id'	=>	array(						BOOKMARKS_TABLE,						TOPICS_WATCH_TABLE,						TOPICS_POSTED_TABLE,						POLL_OPTIONS_TABLE,						POLL_VOTES_TABLE,					)				);				// Amount of rows we select and delete in one iteration.				$batch_size = 500;				foreach ($tables_ary as $field => $tables)				{					$start = 0;					do					{						$sql = "SELECT $field							FROM " . POSTS_TABLE . '							WHERE forum_id = ' . $forum_id;						$result = $db->sql_query_limit($sql, $batch_size, $start);						$ids = array();						while ($row = $db->sql_fetchrow($result))						{							$ids[] = $row[$field];						}						$db->sql_freeresult($result);						if (sizeof($ids))						{							$start += sizeof($ids);							foreach ($tables as $table)							{								$db->sql_query("DELETE FROM $table WHERE " . $db->sql_in_set($field, $ids));							}						}					}					while (sizeof($ids) == $batch_size);				}				unset($ids);			break;		}		$table_ary = array(FORUMS_ACCESS_TABLE, FORUMS_TRACK_TABLE, FORUMS_WATCH_TABLE, LOG_TABLE, MODERATOR_CACHE_TABLE, POSTS_TABLE, TOPICS_TABLE, TOPICS_TRACK_TABLE);		foreach ($table_ary as $table)		{			$db->sql_query("DELETE FROM $table WHERE forum_id = $forum_id");		}		// Set forum ids to 0		$table_ary = array(DRAFTS_TABLE);		foreach ($table_ary as $table)		{			$db->sql_query("UPDATE $table SET forum_id = 0 WHERE forum_id = $forum_id");		}		// Adjust users post counts		if (sizeof($post_counts))		{			foreach ($post_counts as $poster_id => $substract)			{				$sql = 'UPDATE ' . USERS_TABLE . '					SET user_posts = 0					WHERE user_id = ' . $poster_id . '					AND user_posts < ' . $substract;				$db->sql_query($sql);				$sql = 'UPDATE ' . USERS_TABLE . '					SET user_posts = user_posts - ' . $substract . '					WHERE user_id = ' . $poster_id . '					AND user_posts >= ' . $substract;				$db->sql_query($sql);			}		}		$db->sql_transaction('commit');		// Make sure the overall post/topic count is correct...		$sql = 'SELECT COUNT(post_id) AS stat			FROM ' . POSTS_TABLE . '			WHERE post_approved = 1';		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		set_config('num_posts', (int) $row['stat'], true);		$sql = 'SELECT COUNT(topic_id) AS stat			FROM ' . TOPICS_TABLE . '			WHERE topic_approved = 1';		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		set_config('num_topics', (int) $row['stat'], true);		$sql = 'SELECT COUNT(attach_id) as stat			FROM ' . ATTACHMENTS_TABLE;		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		set_config('num_files', (int) $row['stat'], true);		$sql = 'SELECT SUM(filesize) as stat			FROM ' . ATTACHMENTS_TABLE;		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		set_config('upload_dir_size', (float) $row['stat'], true);		return array();	}	/**	* Move forum position by $steps up/down	*/	function move_forum_by($forum_row, $action = 'move_up', $steps = 1)	{		global $db;		/**		* Fetch all the siblings between the module's current spot		* and where we want to move it to. If there are less than $steps		* siblings between the current spot and the target then the		* module will move as far as possible		*/		$sql = 'SELECT forum_id, forum_name, left_id, right_id			FROM ' . FORUMS_TABLE . "			WHERE parent_id = {$forum_row['parent_id']}				AND " . (($action == 'move_up') ? "right_id < {$forum_row['right_id']} ORDER BY right_id DESC" : "left_id > {$forum_row['left_id']} ORDER BY left_id ASC");		$result = $db->sql_query_limit($sql, $steps);		$target = array();		while ($row = $db->sql_fetchrow($result))		{			$target = $row;		}		$db->sql_freeresult($result);		if (!sizeof($target))		{			// The forum is already on top or bottom			return false;		}		/**		* $left_id and $right_id define the scope of the nodes that are affected by the move.		* $diff_up and $diff_down are the values to substract or add to each node's left_id		* and right_id in order to move them up or down.		* $move_up_left and $move_up_right define the scope of the nodes that are moving		* up. Other nodes in the scope of ($left_id, $right_id) are considered to move down.		*/		if ($action == 'move_up')		{			$left_id = $target['left_id'];			$right_id = $forum_row['right_id'];			$diff_up = $forum_row['left_id'] - $target['left_id'];			$diff_down = $forum_row['right_id'] + 1 - $forum_row['left_id'];			$move_up_left = $forum_row['left_id'];			$move_up_right = $forum_row['right_id'];		}		else		{			$left_id = $forum_row['left_id'];			$right_id = $target['right_id'];			$diff_up = $forum_row['right_id'] + 1 - $forum_row['left_id'];			$diff_down = $target['right_id'] - $forum_row['right_id'];			$move_up_left = $forum_row['right_id'] + 1;			$move_up_right = $target['right_id'];		}		// Now do the dirty job		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET left_id = left_id + CASE				WHEN left_id BETWEEN {$move_up_left} AND {$move_up_right} THEN -{$diff_up}				ELSE {$diff_down}			END,			right_id = right_id + CASE				WHEN right_id BETWEEN {$move_up_left} AND {$move_up_right} THEN -{$diff_up}				ELSE {$diff_down}			END,			forum_parents = ''			WHERE				left_id BETWEEN {$left_id} AND {$right_id}				AND right_id BETWEEN {$left_id} AND {$right_id}";		$db->sql_query($sql);		return $target['forum_name'];	}	/**	* Display progress bar for syncinc forums	*/	function display_progress_bar($start, $total)	{		global $template, $user;		adm_page_header($user->lang['SYNC_IN_PROGRESS']);		$template->set_filenames(array(			'body'	=> 'progress_bar.html')		);		$template->assign_vars(array(			'L_PROGRESS'			=> $user->lang['SYNC_IN_PROGRESS'],			'L_PROGRESS_EXPLAIN'	=> ($start && $total) ? sprintf($user->lang['SYNC_IN_PROGRESS_EXPLAIN'], $start, $total) : $user->lang['SYNC_IN_PROGRESS'])		);		adm_page_footer();	}	/**	* Display copy permission page	* Not used at the moment - we will have a look at it for 3.0.7	*/	function copy_permission_page($forum_data)	{		global $phpEx, $phpbb_admin_path, $template, $user;		$acl_url = '&amp;mode=setting_forum_local&amp;forum_id[]=' . $forum_data['forum_id'];		$action = append_sid($this->u_action . "&amp;parent_id={$this->parent_id}&amp;f={$forum_data['forum_id']}&amp;action=copy_perm");		$l_acl = sprintf($user->lang['COPY_TO_ACL'], '<a href="' . append_sid("{$phpbb_admin_path}index.$phpEx", 'i=permissions' . $acl_url) . '">', '</a>');		$this->tpl_name = 'acp_forums_copy_perm';		$template->assign_vars(array(			'U_ACL'				=> append_sid("{$phpbb_admin_path}index.$phpEx", 'i=permissions' . $acl_url),			'L_ACL_LINK'		=> $l_acl,			'L_BACK_LINK'		=> adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id),			'S_COPY_ACTION'		=> $action,			'S_FORUM_OPTIONS'	=> make_forum_select($forum_data['parent_id'], $forum_data['forum_id'], false, false, false),		));	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup('memberlist');// Get and set some variables$mode		= request_var('mode', '');$session_id	= request_var('s', '');$start		= request_var('start', 0);$sort_key	= request_var('sk', 'b');$sort_dir	= request_var('sd', 'd');$show_guests= ($config['load_online_guests']) ? request_var('sg', 0) : 0;// Can this user view profiles/memberlist?if (!$auth->acl_gets('u_viewprofile', 'a_user', 'a_useradd', 'a_userdel')){	if ($user->data['user_id'] != ANONYMOUS)	{		trigger_error('NO_VIEW_USERS');	}	login_box('', $user->lang['LOGIN_EXPLAIN_VIEWONLINE']);}$sort_key_text = array('a' => $user->lang['SORT_USERNAME'], 'b' => $user->lang['SORT_JOINED'], 'c' => $user->lang['SORT_LOCATION']);$sort_key_sql = array('a' => 'u.username_clean', 'b' => 's.session_time', 'c' => 's.session_page');// Sorting and orderif (!isset($sort_key_text[$sort_key])){	$sort_key = 'b';}$order_by = $sort_key_sql[$sort_key] . ' ' . (($sort_dir == 'a') ? 'ASC' : 'DESC');// Whois requestedif ($mode == 'whois' && $auth->acl_get('a_') && $session_id){	include($phpbb_root_path . 'includes/functions_user.' . $phpEx);	$sql = 'SELECT u.user_id, u.username, u.user_type, s.session_ip		FROM ' . USERS_TABLE . ' u, ' . SESSIONS_TABLE . " s		WHERE s.session_id = '" . $db->sql_escape($session_id) . "'			AND	u.user_id = s.session_user_id";	$result = $db->sql_query($sql);	if ($row = $db->sql_fetchrow($result))	{		$template->assign_var('WHOIS', user_ipwhois($row['session_ip']));	}	$db->sql_freeresult($result);	// Output the page	page_header($user->lang['WHO_IS_ONLINE']);	$template->set_filenames(array(		'body' => 'viewonline_whois.html')	);	make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"));	page_footer();}// Forum info$sql = 'SELECT forum_id, forum_name, parent_id, forum_type, left_id, right_id	FROM ' . FORUMS_TABLE . '	ORDER BY left_id ASC';$result = $db->sql_query($sql, 600);$forum_data = array();while ($row = $db->sql_fetchrow($result)){	$forum_data[$row['forum_id']] = $row;}$db->sql_freeresult($result);$guest_counter = 0;// Get number of online guests (if we do not display them)if (!$show_guests){	switch ($db->sql_layer)	{		case 'sqlite':			$sql = 'SELECT COUNT(session_ip) as num_guests				FROM (					SELECT DISTINCT session_ip						FROM ' . SESSIONS_TABLE . '						WHERE session_user_id = ' . ANONYMOUS . '							AND session_time >= ' . (time() - ($config['load_online_time'] * 60)) .				')';		break;		default:			$sql = 'SELECT COUNT(DISTINCT session_ip) as num_guests				FROM ' . SESSIONS_TABLE . '				WHERE session_user_id = ' . ANONYMOUS . '					AND session_time >= ' . (time() - ($config['load_online_time'] * 60));		break;	}	$result = $db->sql_query($sql);	$guest_counter = (int) $db->sql_fetchfield('num_guests');	$db->sql_freeresult($result);}// Get user list$sql = 'SELECT u.user_id, u.username, u.username_clean, u.user_type, u.user_colour, s.session_id, s.session_time, s.session_page, s.session_ip, s.session_browser, s.session_viewonline, s.session_forum_id	FROM ' . USERS_TABLE . ' u, ' . SESSIONS_TABLE . ' s	WHERE u.user_id = s.session_user_id		AND s.session_time >= ' . (time() - ($config['load_online_time'] * 60)) .		((!$show_guests) ? ' AND s.session_user_id <> ' . ANONYMOUS : '') . '	ORDER BY ' . $order_by;$result = $db->sql_query($sql);$prev_id = $prev_ip = $user_list = array();$logged_visible_online = $logged_hidden_online = $counter = 0;while ($row = $db->sql_fetchrow($result)){	if ($row['user_id'] != ANONYMOUS && !isset($prev_id[$row['user_id']]))	{		$view_online = $s_user_hidden = false;		$user_colour = ($row['user_colour']) ? ' style="color:#' . $row['user_colour'] . '" class="username-coloured"' : '';		$username_full = ($row['user_type'] != USER_IGNORE) ? get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']) : '<span' . $user_colour . '>' . $row['username'] . '</span>';		if (!$row['session_viewonline'])		{			$view_online = ($auth->acl_get('u_viewonline')) ? true : false;			$logged_hidden_online++;			$username_full = '<em>' . $username_full . '</em>';			$s_user_hidden = true;		}		else		{			$view_online = true;			$logged_visible_online++;		}		$prev_id[$row['user_id']] = 1;		if ($view_online)		{			$counter++;		}		if (!$view_online || $counter > $start + $config['topics_per_page'] || $counter <= $start)		{			continue;		}	}	else if ($show_guests && $row['user_id'] == ANONYMOUS && !isset($prev_ip[$row['session_ip']]))	{		$prev_ip[$row['session_ip']] = 1;		$guest_counter++;		$counter++;		if ($counter > $start + $config['topics_per_page'] || $counter <= $start)		{			continue;		}		$s_user_hidden = false;		$username_full = get_username_string('full', $row['user_id'], $user->lang['GUEST']);	}	else	{		continue;	}	preg_match('#^([a-z0-9/_-]+)#i', $row['session_page'], $on_page);	if (!sizeof($on_page))	{		$on_page[1] = '';	}	switch ($on_page[1])	{		case 'index':			$location = $user->lang['INDEX'];			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;		case 'adm/index':			$location = $user->lang['ACP'];			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;		case 'posting':		case 'viewforum':		case 'viewtopic':			$forum_id = $row['session_forum_id'];			if ($forum_id && $auth->acl_get('f_list', $forum_id))			{				$location = '';				$location_url = append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id);				if ($forum_data[$forum_id]['forum_type'] == FORUM_LINK)				{					$location = sprintf($user->lang['READING_LINK'], $forum_data[$forum_id]['forum_name']);					break;				}				switch ($on_page[1])				{					case 'posting':						preg_match('#mode=([a-z]+)#', $row['session_page'], $on_page);						$posting_mode = (!empty($on_page[1])) ? $on_page[1] : '';						switch ($posting_mode)						{							case 'reply':							case 'quote':								$location = sprintf($user->lang['REPLYING_MESSAGE'], $forum_data[$forum_id]['forum_name']);							break;							default:								$location = sprintf($user->lang['POSTING_MESSAGE'], $forum_data[$forum_id]['forum_name']);							break;						}					break;					case 'viewtopic':						$location = sprintf($user->lang['READING_TOPIC'], $forum_data[$forum_id]['forum_name']);					break;					case 'viewforum':						$location = sprintf($user->lang['READING_FORUM'], $forum_data[$forum_id]['forum_name']);					break;				}			}			else			{				$location = $user->lang['INDEX'];				$location_url = append_sid("{$phpbb_root_path}index.$phpEx");			}		break;		case 'search':			$location = $user->lang['SEARCHING_FORUMS'];			$location_url = append_sid("{$phpbb_root_path}search.$phpEx");		break;		case 'faq':			$location = $user->lang['VIEWING_FAQ'];			$location_url = append_sid("{$phpbb_root_path}faq.$phpEx");		break;		case 'viewonline':			$location = $user->lang['VIEWING_ONLINE'];			$location_url = append_sid("{$phpbb_root_path}viewonline.$phpEx");		break;		case 'memberlist':			$location = (strpos($row['session_page'], 'mode=viewprofile') !== false) ? $user->lang['VIEWING_MEMBER_PROFILE'] : $user->lang['VIEWING_MEMBERS'];			$location_url = append_sid("{$phpbb_root_path}memberlist.$phpEx");		break;		case 'mcp':			$location = $user->lang['VIEWING_MCP'];			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;		case 'ucp':			$location = $user->lang['VIEWING_UCP'];			// Grab some common modules			$url_params = array(				'mode=register'		=> 'VIEWING_REGISTER',				'i=pm&mode=compose'	=> 'POSTING_PRIVATE_MESSAGE',				'i=pm&'				=> 'VIEWING_PRIVATE_MESSAGES',				'i=profile&'		=> 'CHANGING_PROFILE',				'i=prefs&'			=> 'CHANGING_PREFERENCES',			);			foreach ($url_params as $param => $lang)			{				if (strpos($row['session_page'], $param) !== false)				{					$location = $user->lang[$lang];					break;				}			}			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;		case 'download/file':			$location = $user->lang['DOWNLOADING_FILE'];			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;		case 'report':			$location = $user->lang['REPORTING_POST'];			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;		default:			$location = $user->lang['INDEX'];			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;	}	$template->assign_block_vars('user_row', array(		'USERNAME' 			=> $row['username'],		'USERNAME_COLOUR'	=> $row['user_colour'],		'USERNAME_FULL'		=> $username_full,		'LASTUPDATE'		=> $user->format_date($row['session_time']),		'FORUM_LOCATION'	=> $location,		'USER_IP'			=> ($auth->acl_get('a_')) ? (($mode == 'lookup' && $session_id == $row['session_id']) ? gethostbyaddr($row['session_ip']) : $row['session_ip']) : '',		'USER_BROWSER'		=> ($auth->acl_get('a_user')) ? $row['session_browser'] : '',		'U_USER_PROFILE'	=> ($row['user_type'] != USER_IGNORE) ? get_username_string('profile', $row['user_id'], '') : '',		'U_USER_IP'			=> append_sid("{$phpbb_root_path}viewonline.$phpEx", 'mode=lookup' . (($mode != 'lookup' || $row['session_id'] != $session_id) ? '&amp;s=' . $row['session_id'] : '') . "&amp;sg=$show_guests&amp;start=$start&amp;sk=$sort_key&amp;sd=$sort_dir"),		'U_WHOIS'			=> append_sid("{$phpbb_root_path}viewonline.$phpEx", 'mode=whois&amp;s=' . $row['session_id']),		'U_FORUM_LOCATION'	=> $location_url,		'S_USER_HIDDEN'		=> $s_user_hidden,		'S_GUEST'			=> ($row['user_id'] == ANONYMOUS) ? true : false,		'S_USER_TYPE'		=> $row['user_type'],	));}$db->sql_freeresult($result);unset($prev_id, $prev_ip);// Generate reg/hidden/guest online text$vars_online = array(	'REG'	=> array('logged_visible_online', 'l_r_user_s'),	'HIDDEN'=> array('logged_hidden_online', 'l_h_user_s'),	'GUEST'	=> array('guest_counter', 'l_g_user_s'));foreach ($vars_online as $l_prefix => $var_ary){	switch ($$var_ary[0])	{		case 0:			$$var_ary[1] = $user->lang[$l_prefix . '_USERS_ZERO_ONLINE'];		break;		case 1:			$$var_ary[1] = $user->lang[$l_prefix . '_USER_ONLINE'];		break;		default:			$$var_ary[1] = $user->lang[$l_prefix . '_USERS_ONLINE'];		break;	}}unset($vars_online);$pagination = generate_pagination(append_sid("{$phpbb_root_path}viewonline.$phpEx", "sg=$show_guests&amp;sk=$sort_key&amp;sd=$sort_dir"), $counter, $config['topics_per_page'], $start);// Grab group details for legend displayif ($auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel')){	$sql = 'SELECT group_id, group_name, group_colour, group_type		FROM ' . GROUPS_TABLE . '		WHERE group_legend = 1		ORDER BY group_name ASC';}else{	$sql = 'SELECT g.group_id, g.group_name, g.group_colour, g.group_type		FROM ' . GROUPS_TABLE . ' g		LEFT JOIN ' . USER_GROUP_TABLE . ' ug			ON (				g.group_id = ug.group_id				AND ug.user_id = ' . $user->data['user_id'] . '				AND ug.user_pending = 0			)		WHERE g.group_legend = 1			AND (g.group_type <> ' . GROUP_HIDDEN . ' OR ug.user_id = ' . $user->data['user_id'] . ')		ORDER BY g.group_name ASC';}$result = $db->sql_query($sql);$legend = '';while ($row = $db->sql_fetchrow($result)){	if ($row['group_name'] == 'BOTS')	{		$legend .= (($legend != '') ? ', ' : '') . '<span style="color:#' . $row['group_colour'] . '">' . $user->lang['G_BOTS'] . '</span>';	}	else	{		$legend .= (($legend != '') ? ', ' : '') . '<a style="color:#' . $row['group_colour'] . '" href="' . append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=group&amp;g=' . $row['group_id']) . '">' . (($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name']) . '</a>';	}}$db->sql_freeresult($result);// Refreshing the page every 60 seconds...meta_refresh(60, append_sid("{$phpbb_root_path}viewonline.$phpEx", "sg=$show_guests&amp;sk=$sort_key&amp;sd=$sort_dir&amp;start=$start"));// Send data to template$template->assign_vars(array(	'TOTAL_REGISTERED_USERS_ONLINE'	=> sprintf($l_r_user_s, $logged_visible_online) . sprintf($l_h_user_s, $logged_hidden_online),	'TOTAL_GUEST_USERS_ONLINE'		=> sprintf($l_g_user_s, $guest_counter),	'LEGEND'						=> $legend,	'PAGINATION'					=> $pagination,	'PAGE_NUMBER'					=> on_page($counter, $config['topics_per_page'], $start),	'U_SORT_USERNAME'		=> append_sid("{$phpbb_root_path}viewonline.$phpEx", 'sk=a&amp;sd=' . (($sort_key == 'a' && $sort_dir == 'a') ? 'd' : 'a') . '&amp;sg=' . ((int) $show_guests)),	'U_SORT_UPDATED'		=> append_sid("{$phpbb_root_path}viewonline.$phpEx", 'sk=b&amp;sd=' . (($sort_key == 'b' && $sort_dir == 'a') ? 'd' : 'a') . '&amp;sg=' . ((int) $show_guests)),	'U_SORT_LOCATION'		=> append_sid("{$phpbb_root_path}viewonline.$phpEx", 'sk=c&amp;sd=' . (($sort_key == 'c' && $sort_dir == 'a') ? 'd' : 'a') . '&amp;sg=' . ((int) $show_guests)),	'U_SWITCH_GUEST_DISPLAY'	=> append_sid("{$phpbb_root_path}viewonline.$phpEx", 'sg=' . ((int) !$show_guests)),	'L_SWITCH_GUEST_DISPLAY'	=> ($show_guests) ? $user->lang['HIDE_GUESTS'] : $user->lang['DISPLAY_GUESTS'],	'S_SWITCH_GUEST_DISPLAY'	=> ($config['load_online_guests']) ? true : false));// We do not need to load the who is online box here. ;)$config['load_online'] = false;// Output the pagepage_header($user->lang['WHO_IS_ONLINE']);$template->set_filenames(array(	'body' => 'viewonline_body.html'));make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"));page_footer();?>
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'10',''=>'20',''=>'100',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'10',''=>'20',''=>'100',''=>'1000');
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);// Thank you sun.if (isset($_SERVER['CONTENT_TYPE'])){	if ($_SERVER['CONTENT_TYPE'] === 'application/x-java-archive')	{		exit;	}}else if (isset($_SERVER['HTTP_USER_AGENT']) && strpos($_SERVER['HTTP_USER_AGENT'], 'Java') !== false){	exit;}if (isset($_GET['avatar'])){	require($phpbb_root_path . 'includes/startup.' . $phpEx);	require($phpbb_root_path . 'config.' . $phpEx);	if (!defined('PHPBB_INSTALLED') || empty($dbms) || empty($acm_type))	{		exit;	}	require($phpbb_root_path . 'includes/acm/acm_' . $acm_type . '.' . $phpEx);	require($phpbb_root_path . 'includes/cache.' . $phpEx);	require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);	require($phpbb_root_path . 'includes/constants.' . $phpEx);	require($phpbb_root_path . 'includes/functions.' . $phpEx);	$db = new $sql_db();	$cache = new cache();	// Connect to DB	if (!@$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, false))	{		exit;	}	unset($dbpasswd);	// worst-case default	$browser = (!empty($_SERVER['HTTP_USER_AGENT'])) ? htmlspecialchars((string) $_SERVER['HTTP_USER_AGENT']) : 'msie 6.0';	$config = $cache->obtain_config();	$filename = request_var('avatar', '');	$avatar_group = false;	$exit = false;	if (isset($filename[0]) && $filename[0] === 'g')	{		$avatar_group = true;		$filename = substr($filename, 1);	}	// '==' is not a bug - . as the first char is as bad as no dot at all	if (strpos($filename, '.') == false)	{		send_status_line(403, 'Forbidden');		$exit = true;	}	if (!$exit)	{		$ext		= substr(strrchr($filename, '.'), 1);		$stamp		= (int) substr(stristr($filename, '_'), 1);		$filename	= (int) $filename;		$exit = set_modified_headers($stamp, $browser);	}	if (!$exit && !in_array($ext, array('png', 'gif', 'jpg', 'jpeg')))	{		// no way such an avatar could exist. They are not following the rules, stop the show.		send_status_line(403, 'Forbidden');		$exit = true;	}	if (!$exit)	{		if (!$filename)		{			// no way such an avatar could exist. They are not following the rules, stop the show.			send_status_line(403, 'Forbidden');		}		else		{			send_avatar_to_browser(($avatar_group ? 'g' : '') . $filename . '.' . $ext, $browser);		}	}	file_gc();}// implicit else: we are not in avatar modeinclude($phpbb_root_path . 'common.' . $phpEx);$download_id = request_var('id', 0);$mode = request_var('mode', '');$thumbnail = request_var('t', false);// Start session management, do not update session page.$user->session_begin(false);$auth->acl($user->data);$user->setup('viewtopic');if (!$download_id){	send_status_line(404, 'Not Found');	trigger_error('NO_ATTACHMENT_SELECTED');}if (!$config['allow_attachments'] && !$config['allow_pm_attach']){	send_status_line(404, 'Not Found');	trigger_error('ATTACHMENT_FUNCTIONALITY_DISABLED');}$sql = 'SELECT attach_id, in_message, post_msg_id, extension, is_orphan, poster_id, filetime	FROM ' . ATTACHMENTS_TABLE . "	WHERE attach_id = $download_id";$result = $db->sql_query_limit($sql, 1);$attachment = $db->sql_fetchrow($result);$db->sql_freeresult($result);if (!$attachment){	send_status_line(404, 'Not Found');	trigger_error('ERROR_NO_ATTACHMENT');}if ((!$attachment['in_message'] && !$config['allow_attachments']) || ($attachment['in_message'] && !$config['allow_pm_attach'])){	send_status_line(404, 'Not Found');	trigger_error('ATTACHMENT_FUNCTIONALITY_DISABLED');}$row = array();if ($attachment['is_orphan']){	// We allow admins having attachment permissions to see orphan attachments...	$own_attachment = ($auth->acl_get('a_attach') || $attachment['poster_id'] == $user->data['user_id']) ? true : false;	if (!$own_attachment || ($attachment['in_message'] && !$auth->acl_get('u_pm_download')) || (!$attachment['in_message'] && !$auth->acl_get('u_download')))	{		send_status_line(404, 'Not Found');		trigger_error('ERROR_NO_ATTACHMENT');	}	// Obtain all extensions...	$extensions = $cache->obtain_attach_extensions(true);}else{	if (!$attachment['in_message'])	{		//		$sql = 'SELECT p.forum_id, f.forum_password, f.parent_id			FROM ' . POSTS_TABLE . ' p, ' . FORUMS_TABLE . ' f			WHERE p.post_id = ' . $attachment['post_msg_id'] . '				AND p.forum_id = f.forum_id';		$result = $db->sql_query_limit($sql, 1);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		// Global announcement?		$f_download = (!$row) ? $auth->acl_getf_global('f_download') : $auth->acl_get('f_download', $row['forum_id']);		if ($auth->acl_get('u_download') && $f_download)		{			if ($row && $row['forum_password'])			{				// Do something else ... ?				login_forum_box($row);			}		}		else		{			send_status_line(403, 'Forbidden');			trigger_error('SORRY_AUTH_VIEW_ATTACH');		}	}	else	{		$row['forum_id'] = false;		if (!$auth->acl_get('u_pm_download'))		{			send_status_line(403, 'Forbidden');			trigger_error('SORRY_AUTH_VIEW_ATTACH');		}		// Check if the attachment is within the users scope...		$sql = 'SELECT user_id, author_id			FROM ' . PRIVMSGS_TO_TABLE . '			WHERE msg_id = ' . $attachment['post_msg_id'];		$result = $db->sql_query($sql);		$allowed = false;		while ($user_row = $db->sql_fetchrow($result))		{			if ($user->data['user_id'] == $user_row['user_id'] || $user->data['user_id'] == $user_row['author_id'])			{				$allowed = true;				break;			}		}		$db->sql_freeresult($result);		if (!$allowed)		{			send_status_line(403, 'Forbidden');			trigger_error('ERROR_NO_ATTACHMENT');		}	}	// disallowed?	$extensions = array();	if (!extension_allowed($row['forum_id'], $attachment['extension'], $extensions))	{		send_status_line(404, 'Forbidden');		trigger_error(sprintf($user->lang['EXTENSION_DISABLED_AFTER_POSTING'], $attachment['extension']));	}}if (!download_allowed()){	send_status_line(403, 'Forbidden');	trigger_error($user->lang['LINKAGE_FORBIDDEN']);}$download_mode = (int) $extensions[$attachment['extension']]['download_mode'];// Fetching filename here to prevent sniffing of filename$sql = 'SELECT attach_id, is_orphan, in_message, post_msg_id, extension, physical_filename, real_filename, mimetype, filetime	FROM ' . ATTACHMENTS_TABLE . "	WHERE attach_id = $download_id";$result = $db->sql_query_limit($sql, 1);$attachment = $db->sql_fetchrow($result);$db->sql_freeresult($result);if (!$attachment){	send_status_line(404, 'Not Found');	trigger_error('ERROR_NO_ATTACHMENT');}$attachment['physical_filename'] = utf8_basename($attachment['physical_filename']);$display_cat = $extensions[$attachment['extension']]['display_cat'];if (($display_cat == ATTACHMENT_CATEGORY_IMAGE || $display_cat == ATTACHMENT_CATEGORY_THUMB) && !$user->optionget('viewimg')){	$display_cat = ATTACHMENT_CATEGORY_NONE;}if ($display_cat == ATTACHMENT_CATEGORY_FLASH && !$user->optionget('viewflash')){	$display_cat = ATTACHMENT_CATEGORY_NONE;}if ($thumbnail){	$attachment['physical_filename'] = 'thumb_' . $attachment['physical_filename'];}else if (($display_cat == ATTACHMENT_CATEGORY_NONE/* || $display_cat == ATTACHMENT_CATEGORY_IMAGE*/) && !$attachment['is_orphan']){	// Update download count	$sql = 'UPDATE ' . ATTACHMENTS_TABLE . '		SET download_count = download_count + 1		WHERE attach_id = ' . $attachment['attach_id'];	$db->sql_query($sql);}if ($display_cat == ATTACHMENT_CATEGORY_IMAGE && $mode === 'view' && (strpos($attachment['mimetype'], 'image') === 0) && ((strpos(strtolower($user->browser), 'msie') !== false) && (strpos(strtolower($user->browser), 'msie 8.0') === false))){	wrap_img_in_html(append_sid($phpbb_root_path . 'download/file.' . $phpEx, 'id=' . $attachment['attach_id']), $attachment['real_filename']);	file_gc();}else{	// Determine the 'presenting'-method	if ($download_mode == PHYSICAL_LINK)	{		// This presenting method should no longer be used		if (!@is_dir($phpbb_root_path . $config['upload_path']))		{			send_status_line(500, 'Internal Server Error');			trigger_error($user->lang['PHYSICAL_DOWNLOAD_NOT_POSSIBLE']);		}		redirect($phpbb_root_path . $config['upload_path'] . '/' . $attachment['physical_filename']);		file_gc();	}	else	{		send_file_to_browser($attachment, $config['upload_path'], $display_cat);		file_gc();	}}/*** A simplified function to deliver avatars* The argument needs to be checked before calling this function.*/function send_avatar_to_browser($file, $browser){	global $config, $phpbb_root_path;	$prefix = $config['avatar_salt'] . '_';	$image_dir = $config['avatar_path'];	// Adjust image_dir path (no trailing slash)	if (substr($image_dir, -1, 1) == '/' || substr($image_dir, -1, 1) == '\\')	{		$image_dir = substr($image_dir, 0, -1) . '/';	}	$image_dir = str_replace(array('../', '..\\', './', '.\\'), '', $image_dir);	if ($image_dir && ($image_dir[0] == '/' || $image_dir[0] == '\\'))	{		$image_dir = '';	}	$file_path = $phpbb_root_path . $image_dir . '/' . $prefix . $file;	if ((@file_exists($file_path) && @is_readable($file_path)) && !headers_sent())	{		header('Pragma: public');		$image_data = @getimagesize($file_path);		header('Content-Type: ' . image_type_to_mime_type($image_data[2]));		if (strpos(strtolower($browser), 'msie') !== false && strpos(strtolower($browser), 'msie 8.0') === false)		{			header('Content-Disposition: attachment; ' . header_filename($file));			if (strpos(strtolower($browser), 'msie 6.0') !== false)			{				header('Expires: -1');			}			else			{				header('Expires: ' . gmdate('D, d M Y H:i:s \G\M\T', time() + 31536000));			}		}		else		{			header('Content-Disposition: inline; ' . header_filename($file));			header('Expires: ' . gmdate('D, d M Y H:i:s \G\M\T', time() + 31536000));		}		$size = @filesize($file_path);		if ($size)		{			header("Content-Length: $size");		}		if (@readfile($file_path) == false)		{			$fp = @fopen($file_path, 'rb');			if ($fp !== false)			{				while (!feof($fp))				{					echo fread($fp, 8192);				}				fclose($fp);			}		}		flush();	}	else	{		send_status_line(404, 'Not Found');	}}/*** Wraps an url into a simple html page. Used to display attachments in IE.* this is a workaround for now; might be moved to template system later* direct any complaints to 1 Microsoft Way, Redmond*/function wrap_img_in_html($src, $title){	echo '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-Strict.dtd">';	echo '<html>';	echo '<head>';	echo '<meta http-equiv="content-type" content="text/html; charset=UTF-8" />';	echo '<title>' . $title . '</title>';	echo '</head>';	echo '<body>';	echo '<div>';	echo '<img src="' . $src . '" alt="' . $title . '" />';	echo '</div>';	echo '</body>';	echo '</html>';}/*** Send file to browser*/function send_file_to_browser($attachment, $upload_dir, $category){	global $user, $db, $config, $phpbb_root_path;	$filename = $phpbb_root_path . $upload_dir . '/' . $attachment['physical_filename'];	if (!@file_exists($filename))	{		send_status_line(404, 'Not Found');		trigger_error($user->lang['ERROR_NO_ATTACHMENT'] . '<br /><br />' . sprintf($user->lang['FILE_NOT_FOUND_404'], $filename));	}	// Correct the mime type - we force application/octetstream for all files, except images	// Please do not change this, it is a security precaution	if ($category != ATTACHMENT_CATEGORY_IMAGE || strpos($attachment['mimetype'], 'image') !== 0)	{		$attachment['mimetype'] = (strpos(strtolower($user->browser), 'msie') !== false || strpos(strtolower($user->browser), 'opera') !== false) ? 'application/octetstream' : 'application/octet-stream';	}	if (@ob_get_length())	{		@ob_end_clean();	}	// Now send the File Contents to the Browser	$size = @filesize($filename);	// To correctly display further errors we need to make sure we are using the correct headers for both (unsetting content-length may not work)	// Check if headers already sent or not able to get the file contents.	if (headers_sent() || !@file_exists($filename) || !@is_readable($filename))	{		// PHP track_errors setting On?		if (!empty($php_errormsg))		{			send_status_line(500, 'Internal Server Error');			trigger_error($user->lang['UNABLE_TO_DELIVER_FILE'] . '<br />' . sprintf($user->lang['TRACKED_PHP_ERROR'], $php_errormsg));		}		send_status_line(500, 'Internal Server Error');		trigger_error('UNABLE_TO_DELIVER_FILE');	}	// Now the tricky part... let's dance	header('Pragma: public');	/**	* Commented out X-Sendfile support. To not expose the physical filename within the header if xsendfile is absent we need to look into methods of checking it's status.	*	* Try X-Sendfile since it is much more server friendly - only works if the path is *not* outside of the root path...	* lighttpd has core support for it. An apache2 module is available at http://celebnamer.celebworld.ws/stuff/mod_xsendfile/	*	* Not really ideal, but should work fine...	* <code>	*	if (strpos($upload_dir, '/') !== 0 && strpos($upload_dir, '../') === false)	*	{	*		header('X-Sendfile: ' . $filename);	*	}	* </code>	*/	// Send out the Headers. Do not set Content-Disposition to inline please, it is a security measure for users using the Internet Explorer.	$is_ie8 = (strpos(strtolower($user->browser), 'msie 8.0') !== false);	header('Content-Type: ' . $attachment['mimetype']);	if ($is_ie8)	{		header('X-Content-Type-Options: nosniff');	}	if ($category == ATTACHMENT_CATEGORY_FLASH && request_var('view', 0) === 1)	{		// We use content-disposition: inline for flash files and view=1 to let it correctly play with flash player 10 - any other disposition will fail to play inline		header('Content-Disposition: inline');	}	else	{		if (empty($user->browser) || (!$is_ie8 && (strpos(strtolower($user->browser), 'msie') !== false)))		{			header('Content-Disposition: attachment; ' . header_filename(htmlspecialchars_decode($attachment['real_filename'])));			if (empty($user->browser) || (strpos(strtolower($user->browser), 'msie 6.0') !== false))			{				header('expires: -1');			}		}		else		{			header('Content-Disposition: ' . ((strpos($attachment['mimetype'], 'image') === 0) ? 'inline' : 'attachment') . '; ' . header_filename(htmlspecialchars_decode($attachment['real_filename'])));			if ($is_ie8 && (strpos($attachment['mimetype'], 'image') !== 0))			{				header('X-Download-Options: noopen');			}		}	}	if ($size)	{		header("Content-Length: $size");	}	// Close the db connection before sending the file	$db->sql_close();	if (!set_modified_headers($attachment['filetime'], $user->browser))	{		// Try to deliver in chunks		@set_time_limit(0);		$fp = @fopen($filename, 'rb');		if ($fp !== false)		{			while (!feof($fp))			{				echo fread($fp, 8192);			}			fclose($fp);		}		else		{			@readfile($filename);		}		flush();	}	file_gc();}/*** Get a browser friendly UTF-8 encoded filename*/function header_filename($file){	$user_agent = (!empty($_SERVER['HTTP_USER_AGENT'])) ? htmlspecialchars((string) $_SERVER['HTTP_USER_AGENT']) : '';	// There be dragons here.	// Not many follows the RFC...	if (strpos($user_agent, 'MSIE') !== false || strpos($user_agent, 'Safari') !== false || strpos($user_agent, 'Konqueror') !== false)	{		return "filename=" . rawurlencode($file);	}	// follow the RFC for extended filename for the rest	return "filename*=UTF-8''" . rawurlencode($file);}/*** Check if downloading item is allowed*/function download_allowed(){	global $config, $user, $db;	if (!$config['secure_downloads'])	{		return true;	}	$url = (!empty($_SERVER['HTTP_REFERER'])) ? trim($_SERVER['HTTP_REFERER']) : trim(getenv('HTTP_REFERER'));	if (!$url)	{		return ($config['secure_allow_empty_referer']) ? true : false;	}	// Split URL into domain and script part	$url = @parse_url($url);	if ($url === false)	{		return ($config['secure_allow_empty_referer']) ? true : false;	}	$hostname = $url['host'];	unset($url);	$allowed = ($config['secure_allow_deny']) ? false : true;	$iplist = array();	if (($ip_ary = @gethostbynamel($hostname)) !== false)	{		foreach ($ip_ary as $ip)		{			if ($ip)			{				$iplist[] = $ip;			}		}	}	// Check for own server...	$server_name = $user->host;	// Forcing server vars is the only way to specify/override the protocol	if ($config['force_server_vars'] || !$server_name)	{		$server_name = $config['server_name'];	}	if (preg_match('#^.*?' . preg_quote($server_name, '#') . '.*?$#i', $hostname))	{		$allowed = true;	}	// Get IP's and Hostnames	if (!$allowed)	{		$sql = 'SELECT site_ip, site_hostname, ip_exclude			FROM ' . SITELIST_TABLE;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$site_ip = trim($row['site_ip']);			$site_hostname = trim($row['site_hostname']);			if ($site_ip)			{				foreach ($iplist as $ip)				{					if (preg_match('#^' . str_replace('\*', '.*?', preg_quote($site_ip, '#')) . '$#i', $ip))					{						if ($row['ip_exclude'])						{							$allowed = ($config['secure_allow_deny']) ? false : true;							break 2;						}						else						{							$allowed = ($config['secure_allow_deny']) ? true : false;						}					}				}			}			if ($site_hostname)			{				if (preg_match('#^' . str_replace('\*', '.*?', preg_quote($site_hostname, '#')) . '$#i', $hostname))				{					if ($row['ip_exclude'])					{						$allowed = ($config['secure_allow_deny']) ? false : true;						break;					}					else					{						$allowed = ($config['secure_allow_deny']) ? true : false;					}				}			}		}		$db->sql_freeresult($result);	}	return $allowed;}/*** Check if the browser has the file already and set the appropriate headers-* @returns false if a resend is in order.*/function set_modified_headers($stamp, $browser){	// let's see if we have to send the file at all	$last_load 	=  isset($_SERVER['HTTP_IF_MODIFIED_SINCE']) ? strtotime(trim($_SERVER['HTTP_IF_MODIFIED_SINCE'])) : false;	if ((strpos(strtolower($browser), 'msie 6.0') === false) && (strpos(strtolower($browser), 'msie 8.0') === false))	{		if ($last_load !== false && $last_load >= $stamp)		{			send_status_line(304, 'Not Modified');			// seems that we need those too ... browsers			header('Pragma: public');			header('Expires: ' . gmdate('D, d M Y H:i:s \G\M\T', time() + 31536000));			return true;		}		else		{			header('Last-Modified: ' . gmdate('D, d M Y H:i:s', $stamp) . ' GMT');		}	}	return false;}function file_gc(){	global $cache, $db;	if (!empty($cache))	{		$cache->unload();	}	$db->sql_close();	exit;}?>
<?php/*** Corrects user_email_hash values if DB moved from 32-bit system to 64-bit system or vice versa.* The CRC32 function in PHP generates different results for both systems.* @PHP dev team: no, a hexdec() applied to it does not solve the issue. And please document it.**/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$start = request_var('start', 0);$num_items = 1000;echo '<br />Updating user email hashes' . "\n";$sql = 'SELECT user_id, user_email	FROM ' . USERS_TABLE . '	ORDER BY user_id ASC';$result = $db->sql_query($sql);$echos = 0;while ($row = $db->sql_fetchrow($result)){	$echos++;	$sql = 'UPDATE ' . USERS_TABLE . "		SET user_email_hash = '" . $db->sql_escape(phpbb_email_hash($row['user_email'])) . "'		WHERE user_id = " . (int) $row['user_id'];	$db->sql_query($sql);	if ($echos == 200)	{		echo '<br />';		$echos = 0;	}	echo '.';	flush();}$db->sql_freeresult($result);echo 'FINISHED';// Done$db->sql_close();?>
<?php/*** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Private Message Class** $_REQUEST['folder'] display folder with the id used* $_REQUEST['folder'] inbox|outbox|sentbox display folder with the associated name**	Display Messages (default to inbox) - mode=view*	Display single message - mode=view&p=[msg_id] or &p=[msg_id] (short linkage)**	if the folder id with (&f=[folder_id]) is used when displaying messages, one query will be saved. If it is not used, phpBB needs to grab*	the folder id first in order to display the input boxes and folder names and such things. ;) phpBB always checks this against the database to make*	sure the user is able to view the message.**	Composing Messages (mode=compose):*		To specific user (u=[user_id])*		To specific group (g=[group_id])*		Quoting a post (action=quotepost&p=[post_id])*		Quoting a PM (action=quote&p=[msg_id])*		Forwarding a PM (action=forward&p=[msg_id])** @package ucp*/class ucp_pm{	var $u_action;	function main($id, $mode)	{		global $user, $template, $phpbb_root_path, $auth, $phpEx, $db, $config;		if (!$user->data['is_registered'])		{			trigger_error('NO_MESSAGE');		}		// Is PM disabled?		if (!$config['allow_privmsg'])		{			trigger_error('PM_DISABLED');		}		$user->add_lang('posting');		$template->assign_var('S_PRIVMSGS', true);		// Folder directly specified?		$folder_specified = request_var('folder', '');		if (!in_array($folder_specified, array('inbox', 'outbox', 'sentbox')))		{			$folder_specified = (int) $folder_specified;		}		else		{			$folder_specified = ($folder_specified == 'inbox') ? PRIVMSGS_INBOX : (($folder_specified == 'outbox') ? PRIVMSGS_OUTBOX : PRIVMSGS_SENTBOX);		}		if (!$folder_specified)		{			$mode = (!$mode) ? request_var('mode', 'view') : $mode;		}		else		{			$mode = 'view';		}		include($phpbb_root_path . 'includes/functions_privmsgs.' . $phpEx);		switch ($mode)		{			// New private messages popup			case 'popup':				$l_new_message = '';				if ($user->data['is_registered'])				{					if ($user->data['user_new_privmsg'])					{						$l_new_message = ($user->data['user_new_privmsg'] == 1) ? $user->lang['YOU_NEW_PM'] : $user->lang['YOU_NEW_PMS'];					}					else					{						$l_new_message = $user->lang['YOU_NO_NEW_PM'];					}				}				$template->assign_vars(array(					'MESSAGE'			=> $l_new_message,					'S_NOT_LOGGED_IN'	=> ($user->data['user_id'] == ANONYMOUS) ? true : false,					'CLICK_TO_VIEW'		=> sprintf($user->lang['CLICK_VIEW_PRIVMSG'], '<a href="' . append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=inbox') . '" onclick="jump_to_inbox(this.href); return false;">', '</a>'),					'U_INBOX'			=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=inbox'),					'UA_INBOX'			=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&folder=inbox', false))				);				$tpl_file = 'ucp_pm_popup';			break;			// Compose message			case 'compose':				$action = request_var('action', 'post');				$user_folders = get_folder($user->data['user_id']);				if (!$auth->acl_get('u_sendpm'))				{					// trigger_error('NO_AUTH_SEND_MESSAGE');					$template->assign_vars(array(						'S_NO_AUTH_SEND_MESSAGE'	=> true,						'S_COMPOSE_PM_VIEW'			=> true,					));					$tpl_file = 'ucp_pm_viewfolder';					break;				}				include($phpbb_root_path . 'includes/ucp/ucp_pm_compose.' . $phpEx);				compose_pm($id, $mode, $action, $user_folders);				$tpl_file = 'posting_body';			break;			case 'options':				set_user_message_limit();				get_folder($user->data['user_id']);				include($phpbb_root_path . 'includes/ucp/ucp_pm_options.' . $phpEx);				message_options($id, $mode, $global_privmsgs_rules, $global_rule_conditions);				$tpl_file = 'ucp_pm_options';			break;			case 'drafts':				get_folder($user->data['user_id']);				$this->p_name = 'pm';				// Call another module... please do not try this at home... Hoochie Coochie Man				include($phpbb_root_path . 'includes/ucp/ucp_main.' . $phpEx);				$module = new ucp_main($this);				$module->u_action = $this->u_action;				$module->main($id, $mode);				$this->tpl_name = $module->tpl_name;				$this->page_title = 'UCP_PM_DRAFTS';				unset($module);				return;			break;			case 'view':				set_user_message_limit();				if ($folder_specified)				{					$folder_id = $folder_specified;					$action = 'view_folder';				}				else				{					$folder_id = request_var('f', PRIVMSGS_NO_BOX);					$action = request_var('action', 'view_folder');				}				$msg_id = request_var('p', 0);				$view	= request_var('view', '');				// View message if specified				if ($msg_id)				{					$action = 'view_message';				}				if (!$auth->acl_get('u_readpm'))				{					trigger_error('NO_AUTH_READ_MESSAGE');				}				// Do not allow hold messages to be seen				if ($folder_id == PRIVMSGS_HOLD_BOX)				{					trigger_error('NO_AUTH_READ_HOLD_MESSAGE');				}				// First Handle Mark actions and moving messages				$submit_mark	= (isset($_POST['submit_mark'])) ? true : false;				$move_pm		= (isset($_POST['move_pm'])) ? true : false;				$mark_option	= request_var('mark_option', '');				$dest_folder	= request_var('dest_folder', PRIVMSGS_NO_BOX);				// Is moving PM triggered through mark options?				if (!in_array($mark_option, array('mark_important', 'delete_marked')) && $submit_mark)				{					$move_pm = true;					$dest_folder = (int) $mark_option;					$submit_mark = false;				}				// Move PM				if ($move_pm)				{					$move_msg_ids	= (isset($_POST['marked_msg_id'])) ? request_var('marked_msg_id', array(0)) : array();					$cur_folder_id	= request_var('cur_folder_id', PRIVMSGS_NO_BOX);					if (move_pm($user->data['user_id'], $user->data['message_limit'], $move_msg_ids, $dest_folder, $cur_folder_id))					{						// Return to folder view if single message moved						if ($action == 'view_message')						{							$msg_id		= 0;							$folder_id	= request_var('cur_folder_id', PRIVMSGS_NO_BOX);							$action		= 'view_folder';						}					}				}				// Message Mark Options				if ($submit_mark)				{					handle_mark_actions($user->data['user_id'], $mark_option);				}				// If new messages arrived, place them into the appropriate folder				$num_not_moved = $num_removed = 0;				$release = request_var('release', 0);				if ($user->data['user_new_privmsg'] && ($action == 'view_folder' || $action == 'view_message'))				{					$return = place_pm_into_folder($global_privmsgs_rules, $release);					$num_not_moved = $return['not_moved'];					$num_removed = $return['removed'];				}				if (!$msg_id && $folder_id == PRIVMSGS_NO_BOX)				{					$folder_id = PRIVMSGS_INBOX;				}				else if ($msg_id && $folder_id == PRIVMSGS_NO_BOX)				{					$sql = 'SELECT folder_id						FROM ' . PRIVMSGS_TO_TABLE . "						WHERE msg_id = $msg_id							AND folder_id <> " . PRIVMSGS_NO_BOX . '							AND user_id = ' . $user->data['user_id'];					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if (!$row)					{						trigger_error('NO_MESSAGE');					}					$folder_id = (int) $row['folder_id'];				}				$message_row = array();				if ($action == 'view_message' && $msg_id)				{					// Get Message user want to see					if ($view == 'next' || $view == 'previous')					{						$sql_condition = ($view == 'next') ? '>' : '<';						$sql_ordering = ($view == 'next') ? 'ASC' : 'DESC';						$sql = 'SELECT t.msg_id							FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p, ' . PRIVMSGS_TABLE . " p2							WHERE p2.msg_id = $msg_id								AND t.folder_id = $folder_id								AND t.user_id = " . $user->data['user_id'] . "								AND t.msg_id = p.msg_id								AND p.message_time $sql_condition p2.message_time							ORDER BY p.message_time $sql_ordering";						$result = $db->sql_query_limit($sql, 1);						$row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$row)						{							$message = ($view == 'next') ? 'NO_NEWER_PM' : 'NO_OLDER_PM';							trigger_error($message);						}						else						{							$msg_id = $row['msg_id'];						}					}					$sql = 'SELECT t.*, p.*, u.*						FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p, ' . USERS_TABLE . ' u						WHERE t.user_id = ' . $user->data['user_id'] . "							AND p.author_id = u.user_id							AND t.folder_id = $folder_id							AND t.msg_id = p.msg_id							AND p.msg_id = $msg_id";					$result = $db->sql_query($sql);					$message_row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if (!$message_row)					{						trigger_error('NO_MESSAGE');					}					// Update unread status					update_unread_status($message_row['pm_unread'], $message_row['msg_id'], $user->data['user_id'], $folder_id);				}				$folder = get_folder($user->data['user_id'], $folder_id);				$s_folder_options = $s_to_folder_options = '';				foreach ($folder as $f_id => $folder_ary)				{					$option = '<option' . ((!in_array($f_id, array(PRIVMSGS_INBOX, PRIVMSGS_OUTBOX, PRIVMSGS_SENTBOX))) ? ' class="sep"' : '') . ' value="' . $f_id . '"' . (($f_id == $folder_id) ? ' selected="selected"' : '') . '>' . $folder_ary['folder_name'] . (($folder_ary['unread_messages']) ? ' [' . $folder_ary['unread_messages'] . '] ' : '') . '</option>';					$s_to_folder_options .= ($f_id != PRIVMSGS_OUTBOX && $f_id != PRIVMSGS_SENTBOX) ? $option : '';					$s_folder_options .= $option;				}				clean_sentbox($folder[PRIVMSGS_SENTBOX]['num_messages']);				// Header for message view - folder and so on				$folder_status = get_folder_status($folder_id, $folder);				$template->assign_vars(array(					'CUR_FOLDER_ID'			=> $folder_id,					'CUR_FOLDER_NAME'		=> $folder_status['folder_name'],					'NUM_NOT_MOVED'			=> $num_not_moved,					'NUM_REMOVED'			=> $num_removed,					'RELEASE_MESSAGE_INFO'	=> sprintf($user->lang['RELEASE_MESSAGES'], '<a href="' . $this->u_action . '&amp;folder=' . $folder_id . '&amp;release=1">', '</a>'),					'NOT_MOVED_MESSAGES'	=> ($num_not_moved == 1) ? $user->lang['NOT_MOVED_MESSAGE'] : sprintf($user->lang['NOT_MOVED_MESSAGES'], $num_not_moved),					'RULE_REMOVED_MESSAGES'	=> ($num_removed == 1) ? $user->lang['RULE_REMOVED_MESSAGE'] : sprintf($user->lang['RULE_REMOVED_MESSAGES'], $num_removed),					'S_FOLDER_OPTIONS'		=> $s_folder_options,					'S_TO_FOLDER_OPTIONS'	=> $s_to_folder_options,					'S_FOLDER_ACTION'		=> $this->u_action . '&amp;action=view_folder',					'S_PM_ACTION'			=> $this->u_action . '&amp;action=' . $action,					'U_INBOX'				=> $this->u_action . '&amp;folder=inbox',					'U_OUTBOX'				=> $this->u_action . '&amp;folder=outbox',					'U_SENTBOX'				=> $this->u_action . '&amp;folder=sentbox',					'U_CREATE_FOLDER'		=> $this->u_action . '&amp;mode=options',					'U_CURRENT_FOLDER'		=> $this->u_action . '&amp;folder=' . $folder_id,					'S_IN_INBOX'			=> ($folder_id == PRIVMSGS_INBOX) ? true : false,					'S_IN_OUTBOX'			=> ($folder_id == PRIVMSGS_OUTBOX) ? true : false,					'S_IN_SENTBOX'			=> ($folder_id == PRIVMSGS_SENTBOX) ? true : false,					'FOLDER_STATUS'				=> $folder_status['message'],					'FOLDER_MAX_MESSAGES'		=> $folder_status['max'],					'FOLDER_CUR_MESSAGES'		=> $folder_status['cur'],					'FOLDER_REMAINING_MESSAGES'	=> $folder_status['remaining'],					'FOLDER_PERCENT'			=> $folder_status['percent'])				);				if ($action == 'view_folder')				{					include($phpbb_root_path . 'includes/ucp/ucp_pm_viewfolder.' . $phpEx);					view_folder($id, $mode, $folder_id, $folder);					$tpl_file = 'ucp_pm_viewfolder';				}				else if ($action == 'view_message')				{					$template->assign_vars(array(						'S_VIEW_MESSAGE'	=> true,						'MSG_ID'			=> $msg_id)					);					if (!$msg_id)					{						trigger_error('NO_MESSAGE');					}					include($phpbb_root_path . 'includes/ucp/ucp_pm_viewmessage.' . $phpEx);					view_message($id, $mode, $folder_id, $msg_id, $folder, $message_row);					$tpl_file = ($view == 'print') ? 'ucp_pm_viewmessage_print' : 'ucp_pm_viewmessage';				}			break;			default:				trigger_error('NO_ACTION_MODE', E_USER_ERROR);			break;		}		$template->assign_vars(array(			'L_TITLE'			=> $user->lang['UCP_PM_' . strtoupper($mode)],			'S_UCP_ACTION'		=> $this->u_action . ((isset($action)) ? "&amp;action=$action" : ''))		);		// Set desired template		$this->tpl_name = $tpl_file;		$this->page_title = 'UCP_PM_' . strtoupper($mode);	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);include($phpbb_root_path . 'includes/functions_admin.' . $phpEx);require($phpbb_root_path . 'includes/functions_module.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup('mcp');$module = new p_master();// Setting a variable to let the style designer know where he is...$template->assign_var('S_IN_MCP', true);// Basic parameter data$id = request_var('i', '');if (isset($_REQUEST['mode']) && is_array($_REQUEST['mode'])){	$mode = request_var('mode', array(''));	list($mode, ) = each($mode);}else{	$mode = request_var('mode', '');}// Only Moderators can go beyond this pointif (!$user->data['is_registered']){	if ($user->data['is_bot'])	{		redirect(append_sid("{$phpbb_root_path}index.$phpEx"));	}	login_box('', $user->lang['LOGIN_EXPLAIN_MCP']);}$quickmod = (isset($_REQUEST['quickmod'])) ? true : false;$action = request_var('action', '');$action_ary = request_var('action', array('' => 0));$forum_action = request_var('forum_action', '');if ($forum_action !== '' && !empty($_POST['sort'])){	$action = $forum_action;}if (sizeof($action_ary)){	list($action, ) = each($action_ary);}unset($action_ary);if ($mode == 'topic_logs'){	$id = 'logs';	$quickmod = false;}$post_id = request_var('p', 0);$topic_id = request_var('t', 0);$forum_id = request_var('f', 0);$report_id = request_var('r', 0);$user_id = request_var('u', 0);$username = utf8_normalize_nfc(request_var('username', '', true));if ($post_id){	// We determine the topic and forum id here, to make sure the moderator really has moderative rights on this post	$sql = 'SELECT topic_id, forum_id		FROM ' . POSTS_TABLE . "		WHERE post_id = $post_id";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	$topic_id = (int) $row['topic_id'];	$forum_id = (int) ($row['forum_id']) ? $row['forum_id'] : $forum_id;}else if ($topic_id){	$sql = 'SELECT forum_id		FROM ' . TOPICS_TABLE . "		WHERE topic_id = $topic_id";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	$forum_id = (int) $row['forum_id'];}// If the user doesn't have any moderator powers (globally or locally) he can't access the mcpif (!$auth->acl_getf_global('m_')){	// Except he is using one of the quickmod tools for users	$user_quickmod_actions = array(		'lock'			=> 'f_user_lock',		'make_sticky'	=> 'f_sticky',		'make_announce'	=> 'f_announce',		'make_global'	=> 'f_announce',		'make_normal'	=> array('f_announce', 'f_sticky')	);	$allow_user = false;	if ($quickmod && isset($user_quickmod_actions[$action]) && $user->data['is_registered'] && $auth->acl_gets($user_quickmod_actions[$action], $forum_id))	{		$topic_info = get_topic_data(array($topic_id));		if ($topic_info[$topic_id]['topic_poster'] == $user->data['user_id'])		{			$allow_user = true;		}	}	if (!$allow_user)	{		trigger_error('NOT_AUTHORISED');	}}// if the user cannot read the forum he tries to access then we won't allow mcp access eitherif ($forum_id && !$auth->acl_get('f_read', $forum_id)){	trigger_error('NOT_AUTHORISED');}if ($forum_id){	$module->acl_forum_id = $forum_id;}// Instantiate module system and generate list of available modules$module->list_modules('mcp');if ($quickmod){	$mode = 'quickmod';	switch ($action)	{		case 'lock':		case 'unlock':		case 'lock_post':		case 'unlock_post':		case 'make_sticky':		case 'make_announce':		case 'make_global':		case 'make_normal':		case 'fork':		case 'move':		case 'delete_post':		case 'delete_topic':			$module->load('mcp', 'main', 'quickmod');			return;		break;		case 'topic_logs':			// Reset start parameter if we jumped from the quickmod dropdown			if (request_var('start', 0))			{				$_REQUEST['start'] = 0;			}			$module->set_active('logs', 'topic_logs');		break;		case 'merge_topic':			$module->set_active('main', 'forum_view');		break;		case 'split':		case 'merge':			$module->set_active('main', 'topic_view');		break;		default:			trigger_error("$action not allowed as quickmod", E_USER_ERROR);		break;	}}else{	// Select the active module	$module->set_active($id, $mode);}// Hide some of the options if we don't have the relevant information to use themif (!$post_id){	$module->set_display('main', 'post_details', false);	$module->set_display('warn', 'warn_post', false);}if ($mode == '' || $mode == 'unapproved_topics' || $mode == 'unapproved_posts'){	$module->set_display('queue', 'approve_details', false);}if ($mode == '' || $mode == 'reports' || $mode == 'reports_closed' || $mode == 'pm_reports' || $mode == 'pm_reports_closed' || $mode == 'pm_report_details'){	$module->set_display('reports', 'report_details', false);}if ($mode == '' || $mode == 'reports' || $mode == 'reports_closed' || $mode == 'pm_reports' || $mode == 'pm_reports_closed' || $mode == 'report_details'){	$module->set_display('pm_reports', 'pm_report_details', false);}if (!$topic_id){	$module->set_display('main', 'topic_view', false);	$module->set_display('logs', 'topic_logs', false);}if (!$forum_id){	$module->set_display('main', 'forum_view', false);	$module->set_display('logs', 'forum_logs', false);}if (!$user_id && $username == ''){	$module->set_display('notes', 'user_notes', false);	$module->set_display('warn', 'warn_user', false);}// Load and execute the relevant module$module->load_active();// Assign data to the template engine for the list of modules$module->assign_tpl_vars(append_sid("{$phpbb_root_path}mcp.$phpEx"));// Generate urls for letting the moderation control panel being accessed in different modes$template->assign_vars(array(	'U_MCP'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main'),	'U_MCP_FORUM'	=> ($forum_id) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "i=main&amp;mode=forum_view&amp;f=$forum_id") : '',	'U_MCP_TOPIC'	=> ($forum_id && $topic_id) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "i=main&amp;mode=topic_view&amp;t=$topic_id") : '',	'U_MCP_POST'	=> ($forum_id && $topic_id && $post_id) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "i=main&amp;mode=post_details&amp;t=$topic_id&amp;p=$post_id") : '',));// Generate the page, do not display/query online list$module->display($module->get_page_title(), false);/*** Functions used to generate additional URL paramters*/function _module__url($mode, &$module_row){	return extra_url();}function _module_notes_url($mode, &$module_row){	if ($mode == 'front')	{		return '';	}	global $user_id;	return ($user_id) ? "&amp;u=$user_id" : '';}function _module_warn_url($mode, &$module_row){	if ($mode == 'front' || $mode == 'list')	{		global $forum_id;		return ($forum_id) ? "&amp;f=$forum_id" : '';	}	if ($mode == 'warn_post')	{		global $forum_id, $post_id;		$url_extra = ($forum_id) ? "&amp;f=$forum_id" : '';		$url_extra .= ($post_id) ? "&amp;p=$post_id" : '';		return $url_extra;	}	else	{		global $user_id;		return ($user_id) ? "&amp;u=$user_id" : '';	}}function _module_main_url($mode, &$module_row){	return extra_url();}function _module_logs_url($mode, &$module_row){	return extra_url();}function _module_ban_url($mode, &$module_row){	return extra_url();}function _module_queue_url($mode, &$module_row){	return extra_url();}function _module_reports_url($mode, &$module_row){	return extra_url();}function extra_url(){	global $forum_id, $topic_id, $post_id, $report_id, $user_id;	$url_extra = '';	$url_extra .= ($forum_id) ? "&amp;f=$forum_id" : '';	$url_extra .= ($topic_id) ? "&amp;t=$topic_id" : '';	$url_extra .= ($post_id) ? "&amp;p=$post_id" : '';	$url_extra .= ($user_id) ? "&amp;u=$user_id" : '';	$url_extra .= ($report_id) ? "&amp;r=$report_id" : '';	return $url_extra;}/*** Get simple topic data*/function get_topic_data($topic_ids, $acl_list = false, $read_tracking = false){	global $auth, $db, $config, $user;	static $rowset = array();	$topics = array();	if (!sizeof($topic_ids))	{		return array();	}	// cache might not contain read tracking info, so we can't use it if read	// tracking information is requested	if (!$read_tracking)	{		$cache_topic_ids = array_intersect($topic_ids, array_keys($rowset));		$topic_ids = array_diff($topic_ids, array_keys($rowset));	}	else	{		$cache_topic_ids = array();	}	if (sizeof($topic_ids))	{		$sql_array = array(			'SELECT'	=> 't.*, f.*',			'FROM'		=> array(				TOPICS_TABLE	=> 't',			),			'LEFT_JOIN'	=> array(				array(					'FROM'	=> array(FORUMS_TABLE => 'f'),					'ON'	=> 'f.forum_id = t.forum_id'				)			),			'WHERE'		=> $db->sql_in_set('t.topic_id', $topic_ids)		);		if ($read_tracking && $config['load_db_lastread'])		{			$sql_array['SELECT'] .= ', tt.mark_time, ft.mark_time as forum_mark_time';			$sql_array['LEFT_JOIN'][] = array(				'FROM'	=> array(TOPICS_TRACK_TABLE => 'tt'),				'ON'	=> 'tt.user_id = ' . $user->data['user_id'] . ' AND t.topic_id = tt.topic_id'			);			$sql_array['LEFT_JOIN'][] = array(				'FROM'	=> array(FORUMS_TRACK_TABLE => 'ft'),				'ON'	=> 'ft.user_id = ' . $user->data['user_id'] . ' AND t.forum_id = ft.forum_id'			);		}		$sql = $db->sql_build_query('SELECT', $sql_array);		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if (!$row['forum_id'])			{				// Global Announcement?				$row['forum_id'] = request_var('f', 0);			}			$rowset[$row['topic_id']] = $row;			if ($acl_list && !$auth->acl_gets($acl_list, $row['forum_id']))			{				continue;			}			$topics[$row['topic_id']] = $row;		}		$db->sql_freeresult($result);	}	foreach ($cache_topic_ids as $id)	{		if (!$acl_list || $auth->acl_gets($acl_list, $rowset[$id]['forum_id']))		{			$topics[$id] = $rowset[$id];		}	}	return $topics;}/*** Get simple post data*/function get_post_data($post_ids, $acl_list = false, $read_tracking = false){	global $db, $auth, $config, $user;	$rowset = array();	if (!sizeof($post_ids))	{		return array();	}	$sql_array = array(		'SELECT'	=> 'p.*, u.*, t.*, f.*',		'FROM'		=> array(			USERS_TABLE		=> 'u',			POSTS_TABLE		=> 'p',			TOPICS_TABLE	=> 't',		),		'LEFT_JOIN'	=> array(			array(				'FROM'	=> array(FORUMS_TABLE => 'f'),				'ON'	=> 'f.forum_id = t.forum_id'			)		),		'WHERE'		=> $db->sql_in_set('p.post_id', $post_ids) . '			AND u.user_id = p.poster_id			AND t.topic_id = p.topic_id',	);	if ($read_tracking && $config['load_db_lastread'])	{		$sql_array['SELECT'] .= ', tt.mark_time, ft.mark_time as forum_mark_time';		$sql_array['LEFT_JOIN'][] = array(			'FROM'	=> array(TOPICS_TRACK_TABLE => 'tt'),			'ON'	=> 'tt.user_id = ' . $user->data['user_id'] . ' AND t.topic_id = tt.topic_id'		);		$sql_array['LEFT_JOIN'][] = array(			'FROM'	=> array(FORUMS_TRACK_TABLE => 'ft'),			'ON'	=> 'ft.user_id = ' . $user->data['user_id'] . ' AND t.forum_id = ft.forum_id'		);	}	$sql = $db->sql_build_query('SELECT', $sql_array);	$result = $db->sql_query($sql);	unset($sql_array);	while ($row = $db->sql_fetchrow($result))	{		if (!$row['forum_id'])		{			// Global Announcement?			$row['forum_id'] = request_var('f', 0);		}		if ($acl_list && !$auth->acl_gets($acl_list, $row['forum_id']))		{			continue;		}		if (!$row['post_approved'] && !$auth->acl_get('m_approve', $row['forum_id']))		{			// Moderators without the permission to approve post should at least not see them. ;)			continue;		}		$rowset[$row['post_id']] = $row;	}	$db->sql_freeresult($result);	return $rowset;}/*** Get simple forum data*/function get_forum_data($forum_id, $acl_list = 'f_list', $read_tracking = false){	global $auth, $db, $user, $config;	$rowset = array();	if (!is_array($forum_id))	{		$forum_id = array($forum_id);	}	if (!sizeof($forum_id))	{		return array();	}	if ($read_tracking && $config['load_db_lastread'])	{		$read_tracking_join = ' LEFT JOIN ' . FORUMS_TRACK_TABLE . ' ft ON (ft.user_id = ' . $user->data['user_id'] . '			AND ft.forum_id = f.forum_id)';		$read_tracking_select = ', ft.mark_time';	}	else	{		$read_tracking_join = $read_tracking_select = '';	}	$sql = "SELECT f.* $read_tracking_select		FROM " . FORUMS_TABLE . " f$read_tracking_join		WHERE " . $db->sql_in_set('f.forum_id', $forum_id);	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		if ($acl_list && !$auth->acl_gets($acl_list, $row['forum_id']))		{			continue;		}		if ($auth->acl_get('m_approve', $row['forum_id']))		{			$row['forum_topics'] = $row['forum_topics_real'];		}		$rowset[$row['forum_id']] = $row;	}	$db->sql_freeresult($result);	return $rowset;}/*** Get simple pm data*/function get_pm_data($pm_ids){	global $db, $auth, $config, $user;	$rowset = array();	if (!sizeof($pm_ids))	{		return array();	}	$sql_array = array(		'SELECT'	=> 'p.*, u.*',		'FROM'		=> array(			USERS_TABLE			=> 'u',			PRIVMSGS_TABLE		=> 'p',		),		'WHERE'		=> $db->sql_in_set('p.msg_id', $pm_ids) . '			AND u.user_id = p.author_id',	);	$sql = $db->sql_build_query('SELECT', $sql_array);	$result = $db->sql_query($sql);	unset($sql_array);	while ($row = $db->sql_fetchrow($result))	{		$rowset[$row['msg_id']] = $row;	}	$db->sql_freeresult($result);	return $rowset;}/*** sorting in mcp** @param string $where_sql should either be WHERE (default if ommited) or end with AND or OR** $mode reports and reports_closed: the $where parameters uses aliases p for posts table and r for report table* $mode unapproved_posts: the $where parameters uses aliases p for posts table and t for topic table*/function mcp_sorting($mode, &$sort_days, &$sort_key, &$sort_dir, &$sort_by_sql, &$sort_order_sql, &$total, $forum_id = 0, $topic_id = 0, $where_sql = 'WHERE'){	global $db, $user, $auth, $template;	$sort_days = request_var('st', 0);	$min_time = ($sort_days) ? time() - ($sort_days * 86400) : 0;	switch ($mode)	{		case 'viewforum':			$type = 'topics';			$default_key = 't';			$default_dir = 'd';			$sql = 'SELECT COUNT(topic_id) AS total				FROM ' . TOPICS_TABLE . "				$where_sql forum_id = $forum_id					AND topic_type NOT IN (" . POST_ANNOUNCE . ', ' . POST_GLOBAL . ")					AND topic_last_post_time >= $min_time";			if (!$auth->acl_get('m_approve', $forum_id))			{				$sql .= 'AND topic_approved = 1';			}		break;		case 'viewtopic':			$type = 'posts';			$default_key = 't';			$default_dir = 'a';			$sql = 'SELECT COUNT(post_id) AS total				FROM ' . POSTS_TABLE . "				$where_sql topic_id = $topic_id					AND post_time >= $min_time";			if (!$auth->acl_get('m_approve', $forum_id))			{				$sql .= 'AND post_approved = 1';			}		break;		case 'unapproved_posts':			$type = 'posts';			$default_key = 't';			$default_dir = 'd';			$where_sql .= ($topic_id) ? ' p.topic_id = ' . $topic_id . ' AND' : '';			$sql = 'SELECT COUNT(p.post_id) AS total				FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . " t				$where_sql " . $db->sql_in_set('p.forum_id', ($forum_id) ? array($forum_id) : array_intersect(get_forum_list('f_read'), get_forum_list('m_approve'))) . '					AND p.post_approved = 0					AND t.topic_id = p.topic_id					AND t.topic_first_post_id <> p.post_id';			if ($min_time)			{				$sql .= ' AND post_time >= ' . $min_time;			}		break;		case 'unapproved_topics':			$type = 'topics';			$default_key = 't';			$default_dir = 'd';			$sql = 'SELECT COUNT(topic_id) AS total				FROM ' . TOPICS_TABLE . "				$where_sql " . $db->sql_in_set('forum_id', ($forum_id) ? array($forum_id) : array_intersect(get_forum_list('f_read'), get_forum_list('m_approve'))) . '					AND topic_approved = 0';			if ($min_time)			{				$sql .= ' AND topic_time >= ' . $min_time;			}		break;		case 'pm_reports':		case 'pm_reports_closed':		case 'reports':		case 'reports_closed':			$pm = (strpos($mode, 'pm_') === 0) ? true : false;			$type = ($pm) ? 'pm_reports' : 'reports';			$default_key = 't';			$default_dir = 'd';			$limit_time_sql = ($min_time) ? "AND r.report_time >= $min_time" : '';			if ($topic_id)			{				$where_sql .= ' p.topic_id = ' . $topic_id . ' AND ';			}			else if ($forum_id)			{				$where_sql .= ' p.forum_id = ' . $forum_id . ' AND ';			}			else if (!$pm)			{				$where_sql .= ' ' . $db->sql_in_set('p.forum_id', get_forum_list(array('!f_read', '!m_report')), true, true) . ' AND ';			}			if ($mode == 'reports' || $mode == 'pm_reports')			{				$where_sql .= ' r.report_closed = 0 AND ';			}			else			{				$where_sql .= ' r.report_closed = 1 AND ';			}			if ($pm)			{				$sql = 'SELECT COUNT(r.report_id) AS total					FROM ' . REPORTS_TABLE . ' r, ' . PRIVMSGS_TABLE . " p					$where_sql r.post_id = 0						AND p.msg_id = r.pm_id						$limit_time_sql";			}			else			{				$sql = 'SELECT COUNT(r.report_id) AS total					FROM ' . REPORTS_TABLE . ' r, ' . POSTS_TABLE . " p					$where_sql r.pm_id = 0						AND p.post_id = r.post_id						$limit_time_sql";			}		break;		case 'viewlogs':			$type = 'logs';			$default_key = 't';			$default_dir = 'd';			$sql = 'SELECT COUNT(log_id) AS total				FROM ' . LOG_TABLE . "				$where_sql " . $db->sql_in_set('forum_id', ($forum_id) ? array($forum_id) : array_intersect(get_forum_list('f_read'), get_forum_list('m_'))) . '					AND log_time >= ' . $min_time . '					AND log_type = ' . LOG_MOD;		break;	}	$sort_key = request_var('sk', $default_key);	$sort_dir = request_var('sd', $default_dir);	$sort_dir_text = array('a' => $user->lang['ASCENDING'], 'd' => $user->lang['DESCENDING']);	switch ($type)	{		case 'topics':			$limit_days = array(0 => $user->lang['ALL_TOPICS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);			$sort_by_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 'tt' => $user->lang['TOPIC_TIME'], 'r' => $user->lang['REPLIES'], 's' => $user->lang['SUBJECT'], 'v' => $user->lang['VIEWS']);			$sort_by_sql = array('a' => 't.topic_first_poster_name', 't' => 't.topic_last_post_time', 'tt' => 't.topic_time', 'r' => (($auth->acl_get('m_approve', $forum_id)) ? 't.topic_replies_real' : 't.topic_replies'), 's' => 't.topic_title', 'v' => 't.topic_views');			$limit_time_sql = ($min_time) ? "AND t.topic_last_post_time >= $min_time" : '';		break;		case 'posts':			$limit_days = array(0 => $user->lang['ALL_POSTS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);			$sort_by_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 's' => $user->lang['SUBJECT']);			$sort_by_sql = array('a' => 'u.username_clean', 't' => 'p.post_time', 's' => 'p.post_subject');			$limit_time_sql = ($min_time) ? "AND p.post_time >= $min_time" : '';		break;		case 'reports':			$limit_days = array(0 => $user->lang['ALL_REPORTS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);			$sort_by_text = array('a' => $user->lang['AUTHOR'], 'r' => $user->lang['REPORTER'], 'p' => $user->lang['POST_TIME'], 't' => $user->lang['REPORT_TIME'], 's' => $user->lang['SUBJECT']);			$sort_by_sql = array('a' => 'u.username_clean', 'r' => 'ru.username', 'p' => 'p.post_time', 't' => 'r.report_time', 's' => 'p.post_subject');		break;		case 'pm_reports':			$limit_days = array(0 => $user->lang['ALL_REPORTS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);			$sort_by_text = array('a' => $user->lang['AUTHOR'], 'r' => $user->lang['REPORTER'], 'p' => $user->lang['POST_TIME'], 't' => $user->lang['REPORT_TIME'], 's' => $user->lang['SUBJECT']);			$sort_by_sql = array('a' => 'u.username_clean', 'r' => 'ru.username', 'p' => 'p.message_time', 't' => 'r.report_time', 's' => 'p.message_subject');		break;		case 'logs':			$limit_days = array(0 => $user->lang['ALL_ENTRIES'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);			$sort_by_text = array('u' => $user->lang['SORT_USERNAME'], 't' => $user->lang['SORT_DATE'], 'i' => $user->lang['SORT_IP'], 'o' => $user->lang['SORT_ACTION']);			$sort_by_sql = array('u' => 'u.username_clean', 't' => 'l.log_time', 'i' => 'l.log_ip', 'o' => 'l.log_operation');			$limit_time_sql = ($min_time) ? "AND l.log_time >= $min_time" : '';		break;	}	if (!isset($sort_by_sql[$sort_key]))	{		$sort_key = $default_key;	}	$sort_order_sql = $sort_by_sql[$sort_key] . ' ' . (($sort_dir == 'd') ? 'DESC' : 'ASC');	$s_limit_days = $s_sort_key = $s_sort_dir = $sort_url = '';	gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $sort_url);	$template->assign_vars(array(		'S_SELECT_SORT_DIR'		=> $s_sort_dir,		'S_SELECT_SORT_KEY'		=> $s_sort_key,		'S_SELECT_SORT_DAYS'	=> $s_limit_days)	);	if (($sort_days && $mode != 'viewlogs') || in_array($mode, array('reports', 'unapproved_topics', 'unapproved_posts')) || $where_sql != 'WHERE')	{		$result = $db->sql_query($sql);		$total = (int) $db->sql_fetchfield('total');		$db->sql_freeresult($result);	}	else	{		$total = -1;	}}/*** Validate ids** @param	array	&$ids			The relevant ids to check* @param	string	$table			The table to find the ids in* @param	string	$sql_id			The ids relevant column name* @param	array	$acl_list		A list of permissions the user need to have* @param	mixed	$singe_forum	Limit to one forum id (int) or the first forum found (true)** @return	mixed	False if no ids were able to be retrieved, true if at least one id left.*					Additionally, this value can be the forum_id assigned if $single_forum was set.*					Therefore checking the result for with !== false is the best method.*/function check_ids(&$ids, $table, $sql_id, $acl_list = false, $single_forum = false){	global $db, $auth;	if (!is_array($ids) || empty($ids))	{		return false;	}	$sql = "SELECT $sql_id, forum_id FROM $table		WHERE " . $db->sql_in_set($sql_id, $ids);	$result = $db->sql_query($sql);	$ids = array();	$forum_id = false;	while ($row = $db->sql_fetchrow($result))	{		if ($acl_list && $row['forum_id'] && !$auth->acl_gets($acl_list, $row['forum_id']))		{			continue;		}		if ($acl_list && !$row['forum_id'] && !$auth->acl_getf_global($acl_list))		{			continue;		}		// Limit forum? If not, just assign the id.		if ($single_forum === false)		{			$ids[] = $row[$sql_id];			continue;		}		// Limit forum to a specific forum id?		// This can get really tricky, because we do not want to create a failure on global topics. :)		if ($row['forum_id'])		{			if ($single_forum !== true && $row['forum_id'] == (int) $single_forum)			{				$forum_id = (int) $single_forum;			}			else if ($forum_id === false)			{				$forum_id = $row['forum_id'];			}			if ($row['forum_id'] == $forum_id)			{				$ids[] = $row[$sql_id];			}		}		else		{			// Always add a global topic			$ids[] = $row[$sql_id];		}	}	$db->sql_freeresult($result);	if (!sizeof($ids))	{		return false;	}	// If forum id is false and ids populated we may have only global announcements selected (returning 0 because of (int) $forum_id)	return ($single_forum === false) ? true : (int) $forum_id;}?>
<?php/**** @package install* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/if (!defined('IN_INSTALL')){	// Someone has tried to access the file direct. This is not a good idea, so exit	exit;}if (!empty($setmodules)){	$module[] = array(		'module_type'		=> 'install',		'module_title'		=> 'CONVERT',		'module_filename'	=> substr(basename(__FILE__), 0, -strlen($phpEx)-1),		'module_order'		=> 20,		'module_subs'		=> '',		'module_stages'		=> array('INTRO', 'SETTINGS', 'IN_PROGRESS', 'FINAL'),		'module_reqs'		=> ''	);}/*** Class holding all convertor-specific details.* @package install*/class convert{	var $options = array();	var $convertor_tag = '';	var $src_dbms = '';	var $src_dbhost = '';	var $src_dbport = '';	var $src_dbuser = '';	var $src_dbpasswd = '';	var $src_dbname = '';	var $src_table_prefix = '';	var $convertor_data = array();	var $tables = array();	var $config_schema = array();	var $convertor = array();	var $src_truncate_statement = 'DELETE FROM ';	var $truncate_statement = 'DELETE FROM ';	var $fulltext_search;	// Batch size, can be adjusted by the conversion file	// For big boards a value of 6000 seems to be optimal	var $batch_size = 2000;	// Number of rows to be inserted at once (extended insert) if supported	// For installations having enough memory a value of 60 may be good.	var $num_wait_rows = 20;	// Mysqls internal recoding engine messing up with our (better) functions? We at least support more encodings than mysql so should use it in favor.	var $mysql_convert = false;	var $p_master;	function convert(&$p_master)	{		$this->p_master = &$p_master;	}}/*** Convert class for conversions* @package install*/class install_convert extends module{	/**	* Variables used while converting, they are accessible from the global variable $convert	*/	function install_convert(&$p_master)	{		$this->p_master = &$p_master;	}	function main($mode, $sub)	{		global $lang, $template, $phpbb_root_path, $phpEx, $cache, $config, $language, $table_prefix;		global $convert;		$this->tpl_name = 'install_convert';		$this->mode = $mode;		$convert = new convert($this->p_master);		switch ($sub)		{			case 'intro':				// Try opening config file				// @todo If phpBB is not installed, we need to do a cut-down installation here				// For now, we redirect to the installation script instead				if (@file_exists($phpbb_root_path . 'config.' . $phpEx))				{					include($phpbb_root_path . 'config.' . $phpEx);				}				if (!defined('PHPBB_INSTALLED'))				{					$template->assign_vars(array(						'S_NOT_INSTALLED'		=> true,						'TITLE'					=> $lang['BOARD_NOT_INSTALLED'],						'BODY'					=> sprintf($lang['BOARD_NOT_INSTALLED_EXPLAIN'], append_sid($phpbb_root_path . 'install/index.' . $phpEx, 'mode=install&amp;language=' . $language)),					));					return;				}				require($phpbb_root_path . 'config.' . $phpEx);				require($phpbb_root_path . 'includes/constants.' . $phpEx);				require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);				require($phpbb_root_path . 'includes/functions_convert.' . $phpEx);				$db = new $sql_db();				$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, true);				unset($dbpasswd);				// We need to fill the config to let internal functions correctly work				$sql = 'SELECT *					FROM ' . CONFIG_TABLE;				$result = $db->sql_query($sql);				$config = array();				while ($row = $db->sql_fetchrow($result))				{					$config[$row['config_name']] = $row['config_value'];				}				$db->sql_freeresult($result);				// Detect if there is already a conversion in progress at this point and offer to resume				// It's quite possible that the user will get disconnected during a large conversion so they need to be able to resume it				$new_conversion = request_var('new_conv', 0);				if ($new_conversion)				{					$config['convert_progress'] = '';					$config['convert_db_server'] = '';					$config['convert_db_user'] = '';					$db->sql_query('DELETE FROM ' . CONFIG_TABLE . "						WHERE config_name = 'convert_progress'							OR config_name = 'convert_db_server'							OR config_name = 'convert_db_user'"					);				}				// Let's see if there is a conversion in the works...				$options = array();				if (!empty($config['convert_progress']) && !empty($config['convert_db_server']) && !empty($config['convert_db_user']) && !empty($config['convert_options']))				{					$options = unserialize($config['convert_progress']);					$options = array_merge($options, unserialize($config['convert_db_server']), unserialize($config['convert_db_user']), unserialize($config['convert_options']));				}				// This information should have already been checked once, but do it again for safety				if (!empty($options) && !empty($options['tag']) &&					isset($options['dbms']) &&					isset($options['dbhost']) &&					isset($options['dbport']) &&					isset($options['dbuser']) &&					isset($options['dbpasswd']) &&					isset($options['dbname']) &&					isset($options['table_prefix']))				{					$this->page_title = $lang['CONTINUE_CONVERT'];					$template->assign_vars(array(						'TITLE'			=> $lang['CONTINUE_CONVERT'],						'BODY'			=> $lang['CONTINUE_CONVERT_BODY'],						'L_NEW'			=> $lang['CONVERT_NEW_CONVERSION'],						'L_CONTINUE'	=> $lang['CONTINUE_OLD_CONVERSION'],						'S_CONTINUE'	=> true,						'U_NEW_ACTION'		=> $this->p_master->module_url . "?mode={$this->mode}&amp;sub=intro&amp;new_conv=1&amp;language=$language",						'U_CONTINUE_ACTION'	=> $this->p_master->module_url . "?mode={$this->mode}&amp;sub=in_progress&amp;tag={$options['tag']}{$options['step']}&amp;language=$language",					));					return;				}				$this->list_convertors($sub);			break;			case 'settings':				$this->get_convert_settings($sub);			break;			case 'in_progress':				$this->convert_data($sub);			break;			case 'final':				$this->page_title = $lang['CONVERT_COMPLETE'];				$template->assign_vars(array(					'TITLE'		=> $lang['CONVERT_COMPLETE'],					'BODY'		=> $lang['CONVERT_COMPLETE_EXPLAIN'],				));				// If we reached this step (conversion completed) we want to purge the cache and log the user out.				// This is for making sure the session get not screwed due to the 3.0.x users table being completely new.				$cache->purge();				require($phpbb_root_path . 'config.' . $phpEx);				require($phpbb_root_path . 'includes/constants.' . $phpEx);				require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);				require($phpbb_root_path . 'includes/functions_convert.' . $phpEx);				$db = new $sql_db();				$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, true);				unset($dbpasswd);				$sql = 'SELECT config_value					FROM ' . CONFIG_TABLE . '					WHERE config_name = \'search_type\'';				$result = $db->sql_query($sql);				if ($db->sql_fetchfield('config_value') != 'fulltext_mysql')				{					$template->assign_vars(array(						'S_ERROR_BOX'	=> true,						'ERROR_TITLE'	=> $lang['SEARCH_INDEX_UNCONVERTED'],						'ERROR_MSG'		=> $lang['SEARCH_INDEX_UNCONVERTED_EXPLAIN'],					));				}				switch ($db->sql_layer)				{					case 'sqlite':					case 'firebird':						$db->sql_query('DELETE FROM ' . SESSIONS_KEYS_TABLE);						$db->sql_query('DELETE FROM ' . SESSIONS_TABLE);					break;					default:						$db->sql_query('TRUNCATE TABLE ' . SESSIONS_KEYS_TABLE);						$db->sql_query('TRUNCATE TABLE ' . SESSIONS_TABLE);					break;				}			break;		}	}	/**	* Generate a list of all available conversion modules	*/	function list_convertors($sub)	{		global $lang, $language, $template, $phpbb_root_path, $phpEx;		$this->page_title = $lang['SUB_INTRO'];		$template->assign_vars(array(			'TITLE'		=> $lang['CONVERT_INTRO'],			'BODY'		=> $lang['CONVERT_INTRO_BODY'],			'L_AUTHOR'					=> $lang['AUTHOR'],			'L_AVAILABLE_CONVERTORS'	=> $lang['AVAILABLE_CONVERTORS'],			'L_CONVERT'					=> $lang['CONVERT'],			'L_NO_CONVERTORS'			=> $lang['NO_CONVERTORS'],			'L_OPTIONS'					=> $lang['CONVERT_OPTIONS'],			'L_SOFTWARE'				=> $lang['SOFTWARE'],			'L_VERSION'					=> $lang['VERSION'],			'S_LIST'	=> true,		));		$convertors = $sort = array();		$get_info = true;		$handle = @opendir('./convertors/');		if (!$handle)		{			$this->error('Unable to access the convertors directory', __LINE__, __FILE__);		}		while ($entry = readdir($handle))		{			if (preg_match('/^convert_([a-z0-9_]+).' . $phpEx . '$/i', $entry, $m))			{				include('./convertors/' . $entry);				if (isset($convertor_data))				{					$sort[strtolower($convertor_data['forum_name'])] = sizeof($convertors);					$convertors[] = array(						'tag'			=>	$m[1],						'forum_name'	=>	$convertor_data['forum_name'],						'version'		=>	$convertor_data['version'],						'dbms'			=>	$convertor_data['dbms'],						'dbhost'		=>	$convertor_data['dbhost'],						'dbport'		=>	$convertor_data['dbport'],						'dbuser'		=>	$convertor_data['dbuser'],						'dbpasswd'		=>	$convertor_data['dbpasswd'],						'dbname'		=>	$convertor_data['dbname'],						'table_prefix'	=>	$convertor_data['table_prefix'],						'author'		=>	$convertor_data['author']					);				}				unset($convertor_data);			}		}		closedir($handle);		@ksort($sort);		foreach ($sort as $void => $index)		{			$template->assign_block_vars('convertors', array(				'AUTHOR'	=> $convertors[$index]['author'],				'SOFTWARE'	=> $convertors[$index]['forum_name'],				'VERSION'	=> $convertors[$index]['version'],				'U_CONVERT'	=> $this->p_master->module_url . "?mode={$this->mode}&amp;language=$language&amp;sub=settings&amp;tag=" . $convertors[$index]['tag'],			));		}	}	/**	*/	function get_convert_settings($sub)	{		global $lang, $language, $template, $db, $phpbb_root_path, $phpEx, $config, $cache;		require($phpbb_root_path . 'config.' . $phpEx);		require($phpbb_root_path . 'includes/constants.' . $phpEx);		require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);		require($phpbb_root_path . 'includes/functions_convert.' . $phpEx);		$db = new $sql_db();		$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, true);		unset($dbpasswd);		$this->page_title = $lang['STAGE_SETTINGS'];		// We need to fill the config to let internal functions correctly work		$sql = 'SELECT *			FROM ' . CONFIG_TABLE;		$result = $db->sql_query($sql);		$config = array();		while ($row = $db->sql_fetchrow($result))		{			$config[$row['config_name']] = $row['config_value'];		}		$db->sql_freeresult($result);		$convertor_tag = request_var('tag', '');		if (empty($convertor_tag))		{			$this->p_master->error($lang['NO_CONVERT_SPECIFIED'], __LINE__, __FILE__);		}		$get_info = true;		// check security implications of direct inclusion		$convertor_tag = basename($convertor_tag);		if (!file_exists('./convertors/convert_' . $convertor_tag . '.' . $phpEx))		{			$this->p_master->error($lang['CONVERT_NOT_EXIST'], __LINE__, __FILE__);		}		include('./convertors/convert_' . $convertor_tag . '.' . $phpEx);		// The test_file is a file that should be present in the location of the old board.		if (!isset($test_file))		{			$this->p_master->error($lang['DEV_NO_TEST_FILE'], __LINE__, __FILE__);		}		$submit = (isset($_POST['submit'])) ? true : false;		$src_dbms			= request_var('src_dbms', $convertor_data['dbms']);		$src_dbhost			= request_var('src_dbhost', $convertor_data['dbhost']);		$src_dbport			= request_var('src_dbport', $convertor_data['dbport']);		$src_dbuser			= request_var('src_dbuser', $convertor_data['dbuser']);		$src_dbpasswd		= request_var('src_dbpasswd', $convertor_data['dbpasswd']);		$src_dbname			= request_var('src_dbname', $convertor_data['dbname']);		$src_table_prefix	= request_var('src_table_prefix', $convertor_data['table_prefix']);		$forum_path			= request_var('forum_path', $convertor_data['forum_path']);		$refresh			= request_var('refresh', 1);		// Default URL of the old board		// @todo Are we going to use this for attempting to convert URL references in posts, or should we remove it?		//		-> We should convert old urls to the new relative urls format		// $src_url = request_var('src_url', 'Not in use at the moment');		// strip trailing slash from old forum path		$forum_path = (strlen($forum_path) && $forum_path[strlen($forum_path) - 1] == '/') ? substr($forum_path, 0, -1) : $forum_path;		$error = array();		if ($submit)		{			if (!@file_exists('./../' . $forum_path . '/' . $test_file))			{				$error[] = sprintf($lang['COULD_NOT_FIND_PATH'], $forum_path);			}			$connect_test = false;			$available_dbms = get_available_dbms(false, true, true);			if (!isset($available_dbms[$src_dbms]) || !$available_dbms[$src_dbms]['AVAILABLE'])			{				$error['db'][] = $lang['INST_ERR_NO_DB'];				$connect_test = false;			}			else			{				$connect_test = connect_check_db(true, $error, $available_dbms[$src_dbms], $src_table_prefix, $src_dbhost, $src_dbuser, htmlspecialchars_decode($src_dbpasswd), $src_dbname, $src_dbport, true, ($src_dbms == $dbms) ? false : true, false);			}			// The forum prefix of the old and the new forum can only be the same if two different databases are used.			if ($src_table_prefix == $table_prefix && $src_dbms == $dbms && $src_dbhost == $dbhost && $src_dbport == $dbport && $src_dbname == $dbname)			{				$error[] = sprintf($lang['TABLE_PREFIX_SAME'], $src_table_prefix);			}			// Check table prefix			if (!sizeof($error))			{				// initiate database connection to old db if old and new db differ				global $src_db, $same_db;				$src_db = $same_db = false;				if ($src_dbms != $dbms || $src_dbhost != $dbhost || $src_dbport != $dbport || $src_dbname != $dbname || $src_dbuser != $dbuser)				{					$sql_db = 'dbal_' . $src_dbms;					$src_db = new $sql_db();					$src_db->sql_connect($src_dbhost, $src_dbuser, htmlspecialchars_decode($src_dbpasswd), $src_dbname, $src_dbport, false, true);					$same_db = false;				}				else				{					$src_db = $db;					$same_db = true;				}				$src_db->sql_return_on_error(true);				$db->sql_return_on_error(true);				// Try to select one row from the first table to see if the prefix is OK				$result = $src_db->sql_query_limit('SELECT * FROM ' . $src_table_prefix . $tables[0], 1);				if (!$result)				{					$prefixes = array();					$tables_existing = get_tables($src_db);					$tables_existing = array_map('strtolower', $tables_existing);					foreach ($tables_existing as $table_name)					{						compare_table($tables, $table_name, $prefixes);					}					unset($tables_existing);					foreach ($prefixes as $prefix => $count)					{						if ($count >= sizeof($tables))						{							$possible_prefix = $prefix;							break;						}					}					$msg = '';					if (!empty($convertor_data['table_prefix']))					{						$msg .= sprintf($lang['DEFAULT_PREFIX_IS'], $convertor_data['forum_name'], $convertor_data['table_prefix']);					}					if (!empty($possible_prefix))					{						$msg .= '<br />';						$msg .= ($possible_prefix == '*') ? $lang['BLANK_PREFIX_FOUND'] : sprintf($lang['PREFIX_FOUND'], $possible_prefix);						$src_table_prefix = ($possible_prefix == '*') ? '' : $possible_prefix;					}					$error[] = $msg;				}				$src_db->sql_freeresult($result);				$src_db->sql_return_on_error(false);			}			if (!sizeof($error))			{				// Save convertor Status				set_config('convert_progress', serialize(array(					'step'			=> '',					'table_prefix'	=> $src_table_prefix,					'tag'			=> $convertor_tag,				)), true);				set_config('convert_db_server', serialize(array(					'dbms'			=> $src_dbms,					'dbhost'		=> $src_dbhost,					'dbport'		=> $src_dbport,					'dbname'		=> $src_dbname,				)), true);				set_config('convert_db_user', serialize(array(					'dbuser'		=> $src_dbuser,					'dbpasswd'		=> $src_dbpasswd,				)), true);				// Save options				set_config('convert_options', serialize(array('forum_path' => './../' . $forum_path, 'refresh' => $refresh)), true);				$template->assign_block_vars('checks', array(					'TITLE'		=> $lang['VERIFY_OPTIONS'],					'RESULT'	=> $lang['CONVERT_SETTINGS_VERIFIED'],				));				$template->assign_vars(array(					'L_SUBMIT'	=> $lang['BEGIN_CONVERT'],//					'S_HIDDEN'	=> $s_hidden_fields,					'U_ACTION'	=> $this->p_master->module_url . "?mode={$this->mode}&amp;sub=in_progress&amp;tag=$convertor_tag&amp;language=$language",				));				return;			}			else			{				$template->assign_block_vars('checks', array(					'TITLE'		=> $lang['VERIFY_OPTIONS'],					'RESULT'	=> '<b style="color:red">' . implode('<br />', $error) . '</b>',				));			}		} // end submit		foreach ($this->convert_options as $config_key => $vars)		{			if (!is_array($vars) && strpos($config_key, 'legend') === false)			{				continue;			}			if (strpos($config_key, 'legend') !== false)			{				$template->assign_block_vars('options', array(					'S_LEGEND'		=> true,					'LEGEND'		=> $lang[$vars])				);				continue;			}			$options = isset($vars['options']) ? $vars['options'] : '';			$template->assign_block_vars('options', array(				'KEY'			=> $config_key,				'TITLE'			=> $lang[$vars['lang']],				'S_EXPLAIN'		=> $vars['explain'],				'S_LEGEND'		=> false,				'TITLE_EXPLAIN'	=> ($vars['explain']) ? $lang[$vars['lang'] . '_EXPLAIN'] : '',				'CONTENT'		=> $this->p_master->input_field($config_key, $vars['type'], $$config_key, $options),				)			);		}		$template->assign_vars(array(			'TITLE'		=> $lang['STAGE_SETTINGS'],			'BODY'		=> $lang['CONV_OPTIONS_BODY'],			'L_SUBMIT'	=> $lang['BEGIN_CONVERT'],			'U_ACTION'	=> $this->p_master->module_url . "?mode={$this->mode}&amp;sub=settings&amp;tag=$convertor_tag&amp;language=$language",		));	}	/**	* The function which does the actual work (or dispatches it to the relevant places)	*/	function convert_data($sub)	{		global $template, $user, $phpbb_root_path, $phpEx, $db, $lang, $config, $cache;		global $convert, $convert_row, $message_parser, $skip_rows, $language;		require($phpbb_root_path . 'config.' . $phpEx);		require($phpbb_root_path . 'includes/constants.' . $phpEx);		require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);		require($phpbb_root_path . 'includes/functions_convert.' . $phpEx);		$db = new $sql_db();		$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, true);		unset($dbpasswd);		$sql = 'SELECT *			FROM ' . CONFIG_TABLE;		$result = $db->sql_query($sql);		$config = array();		while ($row = $db->sql_fetchrow($result))		{			$config[$row['config_name']] = $row['config_value'];		}		$db->sql_freeresult($result);		// Override a couple of config variables for the duration		$config['max_quote_depth'] = 0;		// @todo Need to confirm that max post length in source is <= max post length in destination or there may be interesting formatting issues		$config['max_post_chars'] = $config['min_post_chars'] = 0;		// Set up a user as well. We _should_ have enough of a database here at this point to do this		// and it helps for any core code we call		$user->session_begin();		$user->page = $user->extract_current_page($phpbb_root_path);		// This is a little bit of a fudge, but it allows the language entries to be available to the		// core code without us loading them again		$user->lang = &$lang;		$this->page_title = $user->lang['STAGE_IN_PROGRESS'];		$convert->options = array();		if (isset($config['convert_progress']))		{			$convert->options = unserialize($config['convert_progress']);			$convert->options = array_merge($convert->options, unserialize($config['convert_db_server']), unserialize($config['convert_db_user']), unserialize($config['convert_options']));		}		// This information should have already been checked once, but do it again for safety		if (empty($convert->options) || empty($convert->options['tag']) ||			!isset($convert->options['dbms']) ||			!isset($convert->options['dbhost']) ||			!isset($convert->options['dbport']) ||			!isset($convert->options['dbuser']) ||			!isset($convert->options['dbpasswd']) ||			!isset($convert->options['dbname']) ||			!isset($convert->options['table_prefix']))		{			$this->p_master->error($user->lang['NO_CONVERT_SPECIFIED'], __LINE__, __FILE__);		}		// Make some short variables accessible, for easier referencing		$convert->convertor_tag = basename($convert->options['tag']);		$convert->src_dbms = $convert->options['dbms'];		$convert->src_dbhost = $convert->options['dbhost'];		$convert->src_dbport = $convert->options['dbport'];		$convert->src_dbuser = $convert->options['dbuser'];		$convert->src_dbpasswd = $convert->options['dbpasswd'];		$convert->src_dbname = $convert->options['dbname'];		$convert->src_table_prefix = $convert->options['table_prefix'];		// initiate database connection to old db if old and new db differ		global $src_db, $same_db;		$src_db = $same_db = null;		if ($convert->src_dbms != $dbms || $convert->src_dbhost != $dbhost || $convert->src_dbport != $dbport || $convert->src_dbname != $dbname || $convert->src_dbuser != $dbuser)		{			if ($convert->src_dbms != $dbms)			{				require($phpbb_root_path . 'includes/db/' . $convert->src_dbms . '.' . $phpEx);			}			$sql_db = 'dbal_' . $convert->src_dbms;			$src_db = new $sql_db();			$src_db->sql_connect($convert->src_dbhost, $convert->src_dbuser, htmlspecialchars_decode($convert->src_dbpasswd), $convert->src_dbname, $convert->src_dbport, false, true);			$same_db = false;		}		else		{			$src_db = $db;			$same_db = true;		}		$convert->mysql_convert = false;		switch ($src_db->sql_layer)		{			case 'sqlite':			case 'firebird':				$convert->src_truncate_statement = 'DELETE FROM ';			break;			// Thanks MySQL, for silently converting...			case 'mysql':			case 'mysql4':				if (version_compare($src_db->sql_server_info(true, false), '4.1.3', '>='))				{					$convert->mysql_convert = true;				}				$convert->src_truncate_statement = 'TRUNCATE TABLE ';			break;			case 'mysqli':				$convert->mysql_convert = true;				$convert->src_truncate_statement = 'TRUNCATE TABLE ';			break;			default:				$convert->src_truncate_statement = 'TRUNCATE TABLE ';			break;		}		if ($convert->mysql_convert && !$same_db)		{			$src_db->sql_query("SET NAMES 'binary'");		}		switch ($db->sql_layer)		{			case 'sqlite':			case 'firebird':				$convert->truncate_statement = 'DELETE FROM ';			break;			default:				$convert->truncate_statement = 'TRUNCATE TABLE ';			break;		}		$get_info = false;		// check security implications of direct inclusion		if (!file_exists('./convertors/convert_' . $convert->convertor_tag . '.' . $phpEx))		{			$this->p_master->error($user->lang['CONVERT_NOT_EXIST'], __LINE__, __FILE__);		}		if (file_exists('./convertors/functions_' . $convert->convertor_tag . '.' . $phpEx))		{			include('./convertors/functions_' . $convert->convertor_tag . '.' . $phpEx);		}		$get_info = true;		include('./convertors/convert_' . $convert->convertor_tag . '.' . $phpEx);		// Map some variables...		$convert->convertor_data = $convertor_data;		$convert->tables = $tables;		$convert->config_schema = $config_schema;		// Now include the real data		$get_info = false;		include('./convertors/convert_' . $convert->convertor_tag . '.' . $phpEx);		$convert->convertor_data = $convertor_data;		$convert->tables = $tables;		$convert->config_schema = $config_schema;		$convert->convertor = $convertor;		// The test_file is a file that should be present in the location of the old board.		if (!file_exists($convert->options['forum_path'] . '/' . $test_file))		{			$this->p_master->error(sprintf($user->lang['COULD_NOT_FIND_PATH'], $convert->options['forum_path']), __LINE__, __FILE__);		}		$search_type = basename(trim($config['search_type']));		// For conversions we are a bit less strict and set to a search backend we know exist...		if (!file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx))		{			$search_type = 'fulltext_native';			set_config('search_type', $search_type);		}		if (!file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx))		{			trigger_error('NO_SUCH_SEARCH_MODULE');		}		require($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx);		$error = false;		$convert->fulltext_search = new $search_type($error);		if ($error)		{			trigger_error($error);		}		include($phpbb_root_path . 'includes/message_parser.' . $phpEx);		$message_parser = new parse_message();		$jump = request_var('jump', 0);		$final_jump = request_var('final_jump', 0);		$sync_batch = request_var('sync_batch', -1);		$last_statement = request_var('last', 0);		// We are running sync...		if ($sync_batch >= 0)		{			$this->sync_forums($sync_batch);			return;		}		if ($jump)		{			$this->jump($jump, $last_statement);			return;		}		if ($final_jump)		{			$this->final_jump($final_jump);			return;		}		$current_table = request_var('current_table', 0);		$old_current_table = min(-1, $current_table - 1);		$skip_rows = request_var('skip_rows', 0);		if (!$current_table && !$skip_rows)		{			if (empty($_REQUEST['confirm']))			{				// If avatars / ranks / smilies folders are specified make sure they are writable				$bad_folders = array();				$local_paths = array(					'avatar_path'			=> path($config['avatar_path']),					'avatar_gallery_path'	=> path($config['avatar_gallery_path']),					'icons_path'			=> path($config['icons_path']),					'ranks_path'			=> path($config['ranks_path']),					'smilies_path'			=> path($config['smilies_path'])				);				foreach ($local_paths as $folder => $local_path)				{					if (isset($convert->convertor[$folder]))					{						if (empty($convert->convertor['test_file']))						{							// test_file is mandantory at the moment so this should never be reached, but just in case...							$this->p_master->error($user->lang['DEV_NO_TEST_FILE'], __LINE__, __FILE__);						}						if (!$local_path || !phpbb_is_writable($phpbb_root_path . $local_path))						{							if (!$local_path)							{								$bad_folders[] = sprintf($user->lang['CONFIG_PHPBB_EMPTY'], $folder);							}							else							{								$bad_folders[] = $local_path;							}						}					}				}				if (sizeof($bad_folders))				{					$msg = (sizeof($bad_folders) == 1) ? $user->lang['MAKE_FOLDER_WRITABLE'] : $user->lang['MAKE_FOLDERS_WRITABLE'];					sort($bad_folders);					$this->p_master->error(sprintf($msg, implode('<br />', $bad_folders)), __LINE__, __FILE__, true);					$template->assign_vars(array(						'L_SUBMIT'	=> $user->lang['INSTALL_TEST'],						'U_ACTION'	=> $this->p_master->module_url . "?mode={$this->mode}&amp;sub=in_progress&amp;tag={$convert->convertor_tag}&amp;language=$language",					));					return;				}				// Grab all the tables used in convertor				$missing_tables = $tables_list = $aliases = array();				foreach ($convert->convertor['schema'] as $schema)				{					// Skip those not used (because of addons/plugins not detected)					if (!$schema['target'])					{						continue;					}					foreach ($schema as $key => $val)					{						// we're dealing with an array like:						// array('forum_status',			'forums.forum_status',				'is_item_locked')						if (is_int($key) && !empty($val[1]))						{							$temp_data = $val[1];							if (!is_array($temp_data))							{								$temp_data = array($temp_data);							}							foreach ($temp_data as $val)							{								if (preg_match('/([a-z0-9_]+)\.([a-z0-9_]+)\)* ?A?S? ?([a-z0-9_]*?)\.?([a-z0-9_]*)$/i', $val, $m))								{									$table = $convert->src_table_prefix . $m[1];									$tables_list[$table] = $table;									if (!empty($m[3]))									{										$aliases[] = $convert->src_table_prefix . $m[3];									}								}							}						}						// 'left_join'		=> 'topics LEFT JOIN vote_desc ON topics.topic_id = vote_desc.topic_id AND topics.topic_vote = 1'						else if ($key == 'left_join')						{							// Convert the value if it wasn't an array already.							if (!is_array($val))							{								$val = array($val);							}							for ($j = 0; $j < sizeof($val); ++$j)							{								if (preg_match('/LEFT JOIN ([a-z0-9_]+) AS ([a-z0-9_]+)/i', $val[$j], $m))								{									$table = $convert->src_table_prefix . $m[1];									$tables_list[$table] = $table;									if (!empty($m[2]))									{										$aliases[] = $convert->src_table_prefix . $m[2];									}								}							}						}					}				}				// Remove aliased tables from $tables_list				foreach ($aliases as $alias)				{					unset($tables_list[$alias]);				}				// Check if the tables that we need exist				$src_db->sql_return_on_error(true);				foreach ($tables_list as $table => $null)				{					$sql = 'SELECT 1 FROM ' . $table;					$_result = $src_db->sql_query_limit($sql, 1);					if (!$_result)					{						$missing_tables[] = $table;					}					$src_db->sql_freeresult($_result);				}				$src_db->sql_return_on_error(false);				// Throw an error if some tables are missing				// We used to do some guessing here, but since we have a suggestion of possible values earlier, I don't see it adding anything here to do it again				if (sizeof($missing_tables) == sizeof($tables_list))				{					$this->p_master->error($user->lang['NO_TABLES_FOUND'] . ' ' . $user->lang['CHECK_TABLE_PREFIX'], __LINE__, __FILE__);				}				else if (sizeof($missing_tables))				{					$this->p_master->error(sprintf($user->lang['TABLES_MISSING'], implode(', ', $missing_tables)) . '<br /><br />' . $user->lang['CHECK_TABLE_PREFIX'], __LINE__, __FILE__);				}				$url = $this->save_convert_progress('&amp;confirm=1');				$msg = $user->lang['PRE_CONVERT_COMPLETE'];				if ($convert->convertor_data['author_notes'])				{					$msg .= '</p><p>' . sprintf($user->lang['AUTHOR_NOTES'], $convert->convertor_data['author_notes']);				}				$template->assign_vars(array(					'L_SUBMIT'		=> $user->lang['CONTINUE_CONVERT'],					'L_MESSAGE'		=> $msg,					'U_ACTION'		=> $url,				));				return;			} // if (empty($_REQUEST['confirm']))			$template->assign_block_vars('checks', array(				'S_LEGEND'		=> true,				'LEGEND'		=> $user->lang['STARTING_CONVERT'],			));			// Convert the config table and load the settings of the old board			if (!empty($convert->config_schema))			{				restore_config($convert->config_schema);				// Override a couple of config variables for the duration				$config['max_quote_depth'] = 0;				// @todo Need to confirm that max post length in source is <= max post length in destination or there may be interesting formatting issues				$config['max_post_chars'] = $config['min_post_chars'] = 0;			}			$template->assign_block_vars('checks', array(				'TITLE'		=> $user->lang['CONFIG_CONVERT'],				'RESULT'	=> $user->lang['DONE'],			));			// Now process queries and execute functions that have to be executed prior to the conversion			if (!empty($convert->convertor['execute_first']))			{				eval($convert->convertor['execute_first']);			}			if (!empty($convert->convertor['query_first']))			{				if (!is_array($convert->convertor['query_first']))				{					$convert->convertor['query_first'] = array('target', array($convert->convertor['query_first']));				}				else if (!is_array($convert->convertor['query_first'][0]))				{					$convert->convertor['query_first'] = array(array($convert->convertor['query_first'][0], $convert->convertor['query_first'][1]));				}				foreach ($convert->convertor['query_first'] as $query_first)				{					if ($query_first[0] == 'src')					{						if ($convert->mysql_convert && $same_db)						{							$src_db->sql_query("SET NAMES 'binary'");						}						$src_db->sql_query($query_first[1]);						if ($convert->mysql_convert && $same_db)						{							$src_db->sql_query("SET NAMES 'utf8'");						}					}					else					{						$db->sql_query($query_first[1]);					}				}			}			$template->assign_block_vars('checks', array(				'TITLE'		=> $user->lang['PREPROCESS_STEP'],				'RESULT'	=> $user->lang['DONE'],			));		} // if (!$current_table && !$skip_rows)		$template->assign_block_vars('checks', array(			'S_LEGEND'		=> true,			'LEGEND'		=> $user->lang['FILLING_TABLES'],		));		// This loop takes one target table and processes it		while ($current_table < sizeof($convert->convertor['schema']))		{			$schema = $convert->convertor['schema'][$current_table];			// The target table isn't set, this can be because a module (for example the attachement mod) is taking care of this.			if (empty($schema['target']))			{				$current_table++;				continue;			}			$template->assign_block_vars('checks', array(				'TITLE'	=> sprintf($user->lang['FILLING_TABLE'], $schema['target']),			));			// This is only the case when we first start working on the tables.			if (!$skip_rows)			{				// process execute_first and query_first for this table...				if (!empty($schema['execute_first']))				{					eval($schema['execute_first']);				}				if (!empty($schema['query_first']))				{					if (!is_array($schema['query_first']))					{						$schema['query_first'] = array('target', array($schema['query_first']));					}					else if (!is_array($schema['query_first'][0]))					{						$schema['query_first'] = array(array($schema['query_first'][0], $schema['query_first'][1]));					}					foreach ($schema['query_first'] as $query_first)					{						if ($query_first[0] == 'src')						{							if ($convert->mysql_convert && $same_db)							{								$src_db->sql_query("SET NAMES 'binary'");							}							$src_db->sql_query($query_first[1]);							if ($convert->mysql_convert && $same_db)							{								$src_db->sql_query("SET NAMES 'utf8'");							}						}						else						{							$db->sql_query($query_first[1]);						}					}				}				if (!empty($schema['autoincrement']))				{					switch ($db->sql_layer)					{						case 'postgres':							$db->sql_query("SELECT SETVAL('" . $schema['target'] . "_seq',(select case when max(" . $schema['autoincrement'] . ")>0 then max(" . $schema['autoincrement'] . ")+1 else 1 end from " . $schema['target'] . '));');						break;						case 'oracle':							$result = $db->sql_query('SELECT MAX(' . $schema['autoincrement'] . ') as max_id FROM ' . $schema['target']);							$row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							$largest_id = (int) $row['max_id'];							if ($largest_id)							{								$db->sql_query('DROP SEQUENCE ' . $schema['target'] . '_seq');								$db->sql_query('CREATE SEQUENCE ' . $schema['target'] . '_seq START WITH ' . ($largest_id + 1));							}						break;					}				}			}			// Process execute_always for this table			// This is for code which needs to be executed on every pass of this table if			// it gets split because of time restrictions			if (!empty($schema['execute_always']))			{				eval($schema['execute_always']);			}			//			// Set up some variables			//			// $waiting_rows	holds rows for multirows insertion (MySQL only)			// $src_tables		holds unique tables with aliases to select from			// $src_fields		will quickly refer source fields (or aliases) corresponding to the current index			// $select_fields	holds the names of the fields to retrieve			//			$sql_data = array(				'source_fields'		=> array(),				'target_fields'		=> array(),				'source_tables'		=> array(),				'select_fields'		=> array(),			);			// This statement is building the keys for later insertion.			$insert_query = $this->build_insert_query($schema, $sql_data, $current_table);			// If no source table is affected, we skip the table			if (empty($sql_data['source_tables']))			{				$skip_rows = 0;				$current_table++;				continue;			}			$distinct = (!empty($schema['distinct'])) ? 'DISTINCT ' : '';			$sql = 'SELECT ' . $distinct . implode(', ', $sql_data['select_fields']) . " \nFROM " . implode(', ', $sql_data['source_tables']);			// Where			$sql .= (!empty($schema['where'])) ? "\nWHERE (" . $schema['where'] . ')' : '';			// Group By			if (!empty($schema['group_by']))			{				$schema['group_by'] = array($schema['group_by']);				foreach ($sql_data['select_fields'] as $select)				{					$alias = strpos(strtolower($select), ' as ');					$select = ($alias) ? substr($select, 0, $alias) : $select;					if (!in_array($select, $schema['group_by']))					{						$schema['group_by'][] = $select;					}				}			}			$sql .= (!empty($schema['group_by'])) ? "\nGROUP BY " . implode(', ', $schema['group_by']) : '';			// Having			$sql .= (!empty($schema['having'])) ? "\nHAVING " . $schema['having'] : '';			// Order By			if (empty($schema['order_by']) && !empty($schema['primary']))			{				$schema['order_by'] = $schema['primary'];			}			$sql .= (!empty($schema['order_by'])) ? "\nORDER BY " . $schema['order_by'] : '';			// Counting basically holds the amount of rows processed.			$counting = -1;			$batch_time = 0;			while ($counting === -1 || ($counting >= $convert->batch_size && still_on_time()))			{				$old_current_table = $current_table;				$rows = '';				$waiting_rows = array();				if (!empty($batch_time))				{					$mtime = explode(' ', microtime());					$mtime = $mtime[0] + $mtime[1];					$rows = ceil($counting/($mtime - $batch_time)) . " rows/s ($counting rows) | ";				}				$template->assign_block_vars('checks', array(					'TITLE'		=> "skip_rows = $skip_rows",					'RESULT'	=> $rows . ((defined('DEBUG_EXTRA') && function_exists('memory_get_usage')) ? ceil(memory_get_usage()/1024) . ' ' . $user->lang['KIB'] : ''),				));				$mtime = explode(' ', microtime());				$batch_time = $mtime[0] + $mtime[1];				if ($convert->mysql_convert && $same_db)				{					$src_db->sql_query("SET NAMES 'binary'");				}				// Take skip rows into account and only fetch batch_size amount of rows				$___result = $src_db->sql_query_limit($sql, $convert->batch_size, $skip_rows);				if ($convert->mysql_convert && $same_db)				{					$src_db->sql_query("SET NAMES 'utf8'");				}				// This loop processes each row				$counting = 0;				$convert->row = $convert_row = array();				if (!empty($schema['autoincrement']))				{					switch ($db->sql_layer)					{						case 'mssql':						case 'mssql_odbc':						case 'mssqlnative':							$db->sql_query('SET IDENTITY_INSERT ' . $schema['target'] . ' ON');						break;					}				}				// Now handle the rows until time is over or no more rows to process...				while ($counting === 0 || still_on_time())				{					$convert_row = $src_db->sql_fetchrow($___result);					if (!$convert_row)					{						// move to the next batch or table						break;					}					// With this we are able to always save the last state					$convert->row = $convert_row;					// Increment the counting variable, it stores the number of rows we have processed					$counting++;					$insert_values = array();					$sql_flag = $this->process_row($schema, $sql_data, $insert_values);					if ($sql_flag === true)					{						switch ($db->sql_layer)						{							// If MySQL, we'll wait to have num_wait_rows rows to submit at once							case 'mysql':							case 'mysql4':							case 'mysqli':								$waiting_rows[] = '(' . implode(', ', $insert_values) . ')';								if (sizeof($waiting_rows) >= $convert->num_wait_rows)								{									$errored = false;									$db->sql_return_on_error(true);									if (!$db->sql_query($insert_query . implode(', ', $waiting_rows)))									{										$errored = true;									}									$db->sql_return_on_error(false);									if ($errored)									{										$db->sql_return_on_error(true);										// Because it errored out we will try to insert the rows one by one... most of the time this										// is caused by duplicate entries - but we also do not want to miss one...										foreach ($waiting_rows as $waiting_sql)										{											if (!$db->sql_query($insert_query . $waiting_sql))											{												$this->p_master->db_error($user->lang['DB_ERR_INSERT'], htmlspecialchars($insert_query . $waiting_sql) . '<br /><br />' . htmlspecialchars(print_r($db->_sql_error(), true)), __LINE__, __FILE__, true);											}										}										$db->sql_return_on_error(false);									}									$waiting_rows = array();								}							break;							default:								$insert_sql = $insert_query . '(' . implode(', ', $insert_values) . ')';								$db->sql_return_on_error(true);								if (!$db->sql_query($insert_sql))								{									$this->p_master->db_error($user->lang['DB_ERR_INSERT'], htmlspecialchars($insert_sql) . '<br /><br />' . htmlspecialchars(print_r($db->_sql_error(), true)), __LINE__, __FILE__, true);								}								$db->sql_return_on_error(false);								$waiting_rows = array();							break;						}					}					$skip_rows++;				}				$src_db->sql_freeresult($___result);				// We might still have some rows waiting				if (sizeof($waiting_rows))				{					$errored = false;					$db->sql_return_on_error(true);					if (!$db->sql_query($insert_query . implode(', ', $waiting_rows)))					{						$errored = true;					}					$db->sql_return_on_error(false);					if ($errored)					{						$db->sql_return_on_error(true);						// Because it errored out we will try to insert the rows one by one... most of the time this						// is caused by duplicate entries - but we also do not want to miss one...						foreach ($waiting_rows as $waiting_sql)						{							$db->sql_query($insert_query . $waiting_sql);							$this->p_master->db_error($user->lang['DB_ERR_INSERT'], htmlspecialchars($insert_query . $waiting_sql) . '<br /><br />' . htmlspecialchars(print_r($db->_sql_error(), true)), __LINE__, __FILE__, true);						}						$db->sql_return_on_error(false);					}					$waiting_rows = array();				}				if (!empty($schema['autoincrement']))				{					switch ($db->sql_layer)					{						case 'mssql':						case 'mssql_odbc':						case 'mssqlnative':							$db->sql_query('SET IDENTITY_INSERT ' . $schema['target'] . ' OFF');						break;						case 'postgres':							$db->sql_query("SELECT SETVAL('" . $schema['target'] . "_seq',(select case when max(" . $schema['autoincrement'] . ")>0 then max(" . $schema['autoincrement'] . ")+1 else 1 end from " . $schema['target'] . '));');						break;						case 'oracle':							$result = $db->sql_query('SELECT MAX(' . $schema['autoincrement'] . ') as max_id FROM ' . $schema['target']);							$row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							$largest_id = (int) $row['max_id'];							if ($largest_id)							{								$db->sql_query('DROP SEQUENCE ' . $schema['target'] . '_seq');								$db->sql_query('CREATE SEQUENCE ' . $schema['target'] . '_seq START WITH ' . ($largest_id + 1));							}						break;					}				}			}			// When we reach this point, either the current table has been processed or we're running out of time.			if (still_on_time() && $counting < $convert->batch_size/* && !defined('DEBUG_EXTRA')*/)			{				$skip_rows = 0;				$current_table++;			}			else			{/*				if (still_on_time() && $counting < $convert->batch_size)				{					$skip_rows = 0;					$current_table++;				}*/				// Looks like we ran out of time.				$url = $this->save_convert_progress('&amp;current_table=' . $current_table . '&amp;skip_rows=' . $skip_rows);				$current_table++;//				$percentage = ($skip_rows == 0) ? 0 : floor(100 / ($total_rows / $skip_rows));				$msg = sprintf($user->lang['STEP_PERCENT_COMPLETED'], $current_table, sizeof($convert->convertor['schema']));				$template->assign_vars(array(					'L_MESSAGE'		=> $msg,					'L_SUBMIT'		=> $user->lang['CONTINUE_CONVERT'],					'U_ACTION'		=> $url,				));				$this->meta_refresh($url);				return;			}		}		// Process execute_last then we'll be done		$url = $this->save_convert_progress('&amp;jump=1');		$template->assign_vars(array(			'L_SUBMIT'		=> $user->lang['FINAL_STEP'],			'U_ACTION'		=> $url,		));		$this->meta_refresh($url);		return;	}	/**	* Sync function being executed at the middle, some functions need to be executed after a successful sync.	*/	function sync_forums($sync_batch)	{		global $template, $user, $db, $phpbb_root_path, $phpEx, $config, $cache;		global $convert;		$template->assign_block_vars('checks', array(			'S_LEGEND'	=> true,			'LEGEND'	=> $user->lang['SYNC_TOPICS'],		));		$batch_size = $convert->batch_size;		$sql = 'SELECT MIN(topic_id) as min_value, MAX(topic_id) AS max_value			FROM ' . TOPICS_TABLE;		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		// Set values of minimum/maximum primary value for this table.		$primary_min = $row['min_value'];		$primary_max = $row['max_value'];		if ($sync_batch == 0)		{			$sync_batch = (int) $primary_min;		}		if ($sync_batch == 0)		{			$sync_batch = 1;		}		// Fetch a batch of rows, process and insert them.		while ($sync_batch <= $primary_max && still_on_time())		{			$end = ($sync_batch + $batch_size - 1);			// Sync all topics in batch mode...			sync('topic_approved', 'range', 'topic_id BETWEEN ' . $sync_batch . ' AND ' . $end, true, false);			sync('topic', 'range', 'topic_id BETWEEN ' . $sync_batch . ' AND ' . $end, true, true);			$template->assign_block_vars('checks', array(				'TITLE'		=> sprintf($user->lang['SYNC_TOPIC_ID'], $sync_batch, ($sync_batch + $batch_size)) . ((defined('DEBUG_EXTRA') && function_exists('memory_get_usage')) ? ' [' . ceil(memory_get_usage()/1024) . ' ' . $user->lang['KIB'] . ']' : ''),				'RESULT'	=> $user->lang['DONE'],			));			$sync_batch += $batch_size;		}		if ($sync_batch >= $primary_max)		{			$url = $this->save_convert_progress('&amp;final_jump=1');			$template->assign_vars(array(				'L_SUBMIT'		=> $user->lang['CONTINUE_CONVERT'],				'U_ACTION'		=> $url,			));			$this->meta_refresh($url);			return;		}		else		{			$sync_batch--;		}		$url = $this->save_convert_progress('&amp;sync_batch=' . $sync_batch);		$template->assign_vars(array(			'L_SUBMIT'		=> $user->lang['CONTINUE_CONVERT'],			'U_ACTION'		=> $url,		));		$this->meta_refresh($url);		return;	}	/**	* Save the convertor status	*/	function save_convert_progress($step)	{		global $convert, $language;		// Save convertor Status		set_config('convert_progress', serialize(array(			'step'			=> $step,			'table_prefix'	=> $convert->src_table_prefix,			'tag'			=> $convert->convertor_tag,		)), true);		set_config('convert_db_server', serialize(array(			'dbms'			=> $convert->src_dbms,			'dbhost'		=> $convert->src_dbhost,			'dbport'		=> $convert->src_dbport,			'dbname'		=> $convert->src_dbname,		)), true);		set_config('convert_db_user', serialize(array(			'dbuser'		=> $convert->src_dbuser,			'dbpasswd'		=> $convert->src_dbpasswd,		)), true);		return $this->p_master->module_url . "?mode={$this->mode}&amp;sub=in_progress&amp;tag={$convert->convertor_tag}$step&amp;language=$language";	}	/**	* Finish conversion, the last function to be called.	*/	function finish_conversion()	{		global $db, $phpbb_root_path, $phpEx, $convert, $config, $language, $user, $template;		$db->sql_query('DELETE FROM ' . CONFIG_TABLE . "			WHERE config_name = 'convert_progress'				OR config_name = 'convert_options'				OR config_name = 'convert_db_server'				OR config_name = 'convert_db_user'");		$db->sql_query('DELETE FROM ' . SESSIONS_TABLE);		@unlink($phpbb_root_path . 'cache/data_global.' . $phpEx);		cache_moderators();		// And finally, add a note to the log		add_log('admin', 'LOG_INSTALL_CONVERTED', $convert->convertor_data['forum_name'], $config['version']);		$url = $this->p_master->module_url . "?mode={$this->mode}&amp;sub=final&amp;language=$language";		$template->assign_vars(array(			'L_SUBMIT'		=> $user->lang['FINAL_STEP'],			'U_ACTION'		=> $url,		));		$this->meta_refresh($url);		return;	}	/**	* This function marks the steps after syncing	*/	function final_jump($final_jump)	{		global $template, $user, $src_db, $same_db, $db, $phpbb_root_path, $phpEx, $config, $cache;		global $convert;		$template->assign_block_vars('checks', array(			'S_LEGEND'	=> true,			'LEGEND'	=> $user->lang['PROCESS_LAST'],		));		if ($final_jump == 1)		{			$db->sql_return_on_error(true);			update_topics_posted();			$template->assign_block_vars('checks', array(				'TITLE'		=> $user->lang['UPDATE_TOPICS_POSTED'],				'RESULT'	=> $user->lang['DONE'],			));			if ($db->sql_error_triggered)			{				$template->assign_vars(array(					'S_ERROR_BOX'	=> true,					'ERROR_TITLE'	=> $user->lang['UPDATE_TOPICS_POSTED'],					'ERROR_MSG'		=> $user->lang['UPDATE_TOPICS_POSTED_ERR'],				));			}			$db->sql_return_on_error(false);			$this->finish_conversion();			return;		}	}	/**	* This function marks the steps before syncing (jump=1)	*/	function jump($jump, $last_statement)	{		global $template, $user, $src_db, $same_db, $db, $phpbb_root_path, $phpEx, $config, $cache;		global $convert;		$template->assign_block_vars('checks', array(			'S_LEGEND'	=> true,			'LEGEND'	=> $user->lang['PROCESS_LAST'],		));		if ($jump == 1)		{			// Execute 'last' statements/queries			if (!empty($convert->convertor['execute_last']))			{				if (!is_array($convert->convertor['execute_last']))				{					eval($convert->convertor['execute_last']);				}				else				{					while ($last_statement < sizeof($convert->convertor['execute_last']))					{						eval($convert->convertor['execute_last'][$last_statement]);						$template->assign_block_vars('checks', array(							'TITLE'		=> $convert->convertor['execute_last'][$last_statement],							'RESULT'	=> $user->lang['DONE'],						));						$last_statement++;						$url = $this->save_convert_progress('&amp;jump=1&amp;last=' . $last_statement);						$percentage = ($last_statement == 0) ? 0 : floor(100 / (sizeof($convert->convertor['execute_last']) / $last_statement));						$msg = sprintf($user->lang['STEP_PERCENT_COMPLETED'], $last_statement, sizeof($convert->convertor['execute_last']), $percentage);						$template->assign_vars(array(							'L_SUBMIT'		=> $user->lang['CONTINUE_LAST'],							'L_MESSAGE'		=> $msg,							'U_ACTION'		=> $url,						));						$this->meta_refresh($url);						return;					}				}			}			if (!empty($convert->convertor['query_last']))			{				if (!is_array($convert->convertor['query_last']))				{					$convert->convertor['query_last'] = array('target', array($convert->convertor['query_last']));				}				else if (!is_array($convert->convertor['query_last'][0]))				{					$convert->convertor['query_last'] = array(array($convert->convertor['query_last'][0], $convert->convertor['query_last'][1]));				}				foreach ($convert->convertor['query_last'] as $query_last)				{					if ($query_last[0] == 'src')					{						if ($convert->mysql_convert && $same_db)						{							$src_db->sql_query("SET NAMES 'binary'");						}						$src_db->sql_query($query_last[1]);						if ($convert->mysql_convert && $same_db)						{							$src_db->sql_query("SET NAMES 'utf8'");						}					}					else					{						$db->sql_query($query_last[1]);					}				}			}			// Sanity check			$db->sql_return_on_error(false);			$src_db->sql_return_on_error(false);			fix_empty_primary_groups();			$sql = 'SELECT MIN(user_regdate) AS board_startdate				FROM ' . USERS_TABLE;			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!isset($config['board_startdate']) || ($row['board_startdate'] < $config['board_startdate'] && $row['board_startdate'] > 0))			{				set_config('board_startdate', $row['board_startdate']);				$db->sql_query('UPDATE ' . USERS_TABLE . ' SET user_regdate = ' . $row['board_startdate'] . ' WHERE user_id = ' . ANONYMOUS);			}			update_dynamic_config();			$template->assign_block_vars('checks', array(				'TITLE'		=> $user->lang['CLEAN_VERIFY'],				'RESULT'	=> $user->lang['DONE'],			));			$url = $this->save_convert_progress('&amp;jump=2');			$template->assign_vars(array(				'L_SUBMIT'		=> $user->lang['CONTINUE_CONVERT'],				'U_ACTION'		=> $url,			));			$this->meta_refresh($url);			return;		}		if ($jump == 2)		{			$db->sql_query('UPDATE ' . USERS_TABLE . " SET user_permissions = ''");			// TODO: sync() is likely going to bomb out on forums with a considerable amount of topics.			// TODO: the sync function is able to handle FROM-TO values, we should use them here (batch processing)			sync('forum', '', '', false, true);			$cache->destroy('sql', FORUMS_TABLE);			$template->assign_block_vars('checks', array(				'TITLE'		=> $user->lang['SYNC_FORUMS'],				'RESULT'	=> $user->lang['DONE'],			));			// Continue with synchronizing the forums...			$url = $this->save_convert_progress('&amp;sync_batch=0');			$template->assign_vars(array(				'L_SUBMIT'		=> $user->lang['CONTINUE_CONVERT'],				'U_ACTION'		=> $url,			));			$this->meta_refresh($url);			return;		}	}	function build_insert_query(&$schema, &$sql_data, $current_table)	{		global $db, $user;		global $convert;		// Can we use IGNORE with this DBMS?		$sql_ignore = (strpos($db->sql_layer, 'mysql') === 0 && !defined('DEBUG_EXTRA')) ? 'IGNORE ' : '';		$insert_query = 'INSERT ' . $sql_ignore . 'INTO ' . $schema['target'] . ' (';		$aliases = array();		$sql_data = array(			'source_fields'		=> array(),			'target_fields'		=> array(),			'source_tables'		=> array(),			'select_fields'		=> array(),		);		foreach ($schema as $key => $val)		{			// Example: array('group_name',				'extension_groups.group_name',		'htmlspecialchars'),			if (is_int($key))			{				if (!empty($val[0]))				{					// Target fields					$sql_data['target_fields'][$val[0]] = $key;					$insert_query .= $val[0] . ', ';				}				if (!is_array($val[1]))				{					$val[1] = array($val[1]);				}				foreach ($val[1] as $valkey => $value_1)				{					// This should cover about any case:					//					// table.field					=> SELECT table.field				FROM table					// table.field AS alias			=> SELECT table.field	AS alias	FROM table					// table.field AS table2.alias	=> SELECT table2.field	AS alias	FROM table table2					// table.field AS table2.field	=> SELECT table2.field				FROM table table2					//					if (preg_match('/^([a-z0-9_]+)\.([a-z0-9_]+)( +AS +(([a-z0-9_]+?)\.)?([a-z0-9_]+))?$/i', $value_1, $m))					{						// There is 'AS ...' in the field names						if (!empty($m[3]))						{							$value_1 = ($m[2] == $m[6]) ? $m[1] . '.' . $m[2] : $m[1] . '.' . $m[2] . ' AS ' . $m[6];							// Table alias: store it then replace the source table with it							if (!empty($m[5]) && $m[5] != $m[1])							{								$aliases[$m[5]] = $m[1];								$value_1 = str_replace($m[1] . '.' . $m[2], $m[5] . '.' . $m[2], $value_1);							}						}						else						{							// No table alias							$sql_data['source_tables'][$m[1]] = (empty($convert->src_table_prefix)) ? $m[1] : $convert->src_table_prefix . $m[1] . ' ' . $m[1];						}						$sql_data['select_fields'][$value_1] = $value_1;						$sql_data['source_fields'][$key][$valkey] = (!empty($m[6])) ? $m[6] : $m[2];					}				}			}			else if ($key == 'where' || $key == 'group_by' || $key == 'order_by' || $key == 'having')			{				if (@preg_match_all('/([a-z0-9_]+)\.([a-z0-9_]+)/i', $val, $m))				{					foreach ($m[1] as $value)					{						$sql_data['source_tables'][$value] = (empty($convert->src_table_prefix)) ? $value : $convert->src_table_prefix . $value . ' ' . $value;					}				}			}		}		// Add the aliases to the list of tables		foreach ($aliases as $alias => $table)		{			$sql_data['source_tables'][$alias] = $convert->src_table_prefix . $table . ' ' . $alias;		}		// 'left_join'		=> 'forums LEFT JOIN forum_prune ON forums.forum_id = forum_prune.forum_id',		if (!empty($schema['left_join']))		{			if (!is_array($schema['left_join']))			{				$schema['left_join'] = array($schema['left_join']);			}			foreach ($schema['left_join'] as $left_join)			{				// This won't handle concatened LEFT JOINs				if (!preg_match('/([a-z0-9_]+) LEFT JOIN ([a-z0-9_]+) A?S? ?([a-z0-9_]*?) ?(ON|USING)(.*)/i', $left_join, $m))				{					$this->p_master->error(sprintf($user->lang['NOT_UNDERSTAND'], 'LEFT JOIN', $left_join, $current_table, $schema['target']), __LINE__, __FILE__);				}				if (!empty($aliases[$m[2]]))				{					if (!empty($m[3]))					{						$this->p_master->error(sprintf($user->lang['NAMING_CONFLICT'], $m[2], $m[3], $schema['left_join']), __LINE__, __FILE__);					}					$m[2] = $aliases[$m[2]];					$m[3] = $m[2];				}				$right_table = $convert->src_table_prefix . $m[2];				if (!empty($m[3]))				{					unset($sql_data['source_tables'][$m[3]]);				}				else if ($m[2] != $m[1])				{					unset($sql_data['source_tables'][$m[2]]);				}				if (strpos($sql_data['source_tables'][$m[1]], "\nLEFT JOIN") !== false)				{					$sql_data['source_tables'][$m[1]] = '(' . $sql_data['source_tables'][$m[1]] . ")\nLEFT JOIN $right_table";				}				else				{					$sql_data['source_tables'][$m[1]] .= "\nLEFT JOIN $right_table";				}				if (!empty($m[3]))				{					unset($sql_data['source_tables'][$m[3]]);					$sql_data['source_tables'][$m[1]] .= ' AS ' . $m[3];				}				else if (!empty($convert->src_table_prefix))				{					$sql_data['source_tables'][$m[1]] .= ' AS ' . $m[2];				}				$sql_data['source_tables'][$m[1]] .= ' ' . $m[4] . $m[5];			}		}		// Remove ", " from the end of the insert query		$insert_query = substr($insert_query, 0, -2) . ') VALUES ';		return $insert_query;	}	/**	* Function for processing the currently handled row	*/	function process_row(&$schema, &$sql_data, &$insert_values)	{		global $template, $user, $phpbb_root_path, $phpEx, $db, $lang, $config, $cache;		global $convert, $convert_row;		$sql_flag = false;		foreach ($schema as $key => $fields)		{			// We are only interested in the lines with:			// array('comment', 'attachments_desc.comment', 'htmlspecialchars'),			if (is_int($key))			{				if (!is_array($fields[1]))				{					$fields[1] = array($fields[1]);				}				$firstkey_set = false;				$firstkey = 0;				foreach ($fields[1] as $inner_key => $inner_value)				{					if (!$firstkey_set)					{						$firstkey = $inner_key;						$firstkey_set = true;					}					$src_field = isset($sql_data['source_fields'][$key][$inner_key]) ? $sql_data['source_fields'][$key][$inner_key] : '';					if (!empty($src_field))					{						$fields[1][$inner_key] = $convert->row[$src_field];					}				}				if (!empty($fields[0]))				{					// We have a target field, if we haven't set $sql_flag yet it will be set to TRUE.					// If a function has already set it to FALSE it won't change it.					if ($sql_flag === false)					{						$sql_flag = true;					}					// No function assigned?					if (empty($fields[2]))					{						$value = $fields[1][$firstkey];					}					else if (is_array($fields[2]))					{						// Execute complex function/eval/typecast						$value = $fields[1];						foreach ($fields[2] as $type => $execution)						{							if (strpos($type, 'typecast') === 0)							{								if (!is_array($value))								{									$value = array($value);								}								$value = $value[0];								settype($value, $execution);							}							else if (strpos($type, 'function') === 0)							{								if (!is_array($value))								{									$value = array($value);								}								$value = call_user_func_array($execution, $value);							}							else if (strpos($type, 'execute') === 0)							{								if (!is_array($value))								{									$value = array($value);								}								$execution = str_replace('{RESULT}', '$value', $execution);								$execution = str_replace('{VALUE}', '$value', $execution);								eval($execution);							}						}					}					else					{						$value = call_user_func_array($fields[2], $fields[1]);					}					if (is_null($value))					{						$value = '';					}					$insert_values[] = $db->_sql_validate_value($value);				}				else if (!empty($fields[2]))				{					if (is_array($fields[2]))					{						// Execute complex function/eval/typecast						$value = '';						foreach ($fields[2] as $type => $execution)						{							if (strpos($type, 'typecast') === 0)							{								$value = settype($value, $execution);							}							else if (strpos($type, 'function') === 0)							{								if (!is_array($value))								{									$value = array($value);								}								$value = call_user_func_array($execution, $value);							}							else if (strpos($type, 'execute') === 0)							{								if (!is_array($value))								{									$value = array($value);								}								$execution = str_replace('{RESULT}', '$value', $execution);								$execution = str_replace('{VALUE}', '$value', $execution);								eval($execution);							}						}					}					else					{						call_user_func_array($fields[2], $fields[1]);					}				}			}		}		return $sql_flag;	}	/**	* Own meta refresh function to be able to change the global time used	*/	function meta_refresh($url)	{		global $convert, $template;		if ($convert->options['refresh'])		{			// Because we should not rely on correct settings, we simply use the relative path here directly.			$template->assign_vars(array(				'S_REFRESH'	=> true,				'META'		=> '<meta http-equiv="refresh" content="5;url=' . $url . '" />')			);		}	}	/**	* The information below will be used to build the input fields presented to the user	*/	var $convert_options = array(		'legend1'			=> 'SPECIFY_OPTIONS',		'src_dbms'			=> array('lang' => 'DBMS',			'type' => 'select', 'options' => 'dbms_select(\'{VALUE}\', true)', 'explain' => false),		'src_dbhost'		=> array('lang' => 'DB_HOST',		'type' => 'text:25:100', 'explain' => true),		'src_dbport'		=> array('lang' => 'DB_PORT',		'type' => 'text:25:100', 'explain' => true),		'src_dbname'		=> array('lang' => 'DB_NAME',		'type' => 'text:25:100', 'explain' => false),		'src_dbuser'		=> array('lang' => 'DB_USERNAME',	'type' => 'text:25:100', 'explain' => false),		'src_dbpasswd'		=> array('lang' => 'DB_PASSWORD',	'type' => 'password:25:100', 'explain' => false),		'src_table_prefix'	=> array('lang' => 'TABLE_PREFIX',	'type' => 'text:25:100', 'explain' => false),		//'src_url'			=> array('lang' => 'FORUM_ADDRESS',	'type' => 'text:50:100', 'explain' => true),		'forum_path'		=> array('lang' => 'FORUM_PATH',	'type' => 'text:25:100', 'explain' => true),		'refresh'			=> array('lang' => 'REFRESH_PAGE',	'type' => 'radio:yes_no', 'explain' => true),	);}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_update{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('install');		$this->tpl_name = 'acp_update';		$this->page_title = 'ACP_VERSION_CHECK';		// Get current and latest version		$errstr = '';		$errno = 0;		$info = obtain_latest_version_info(request_var('versioncheck_force', false));		if ($info === false)		{			trigger_error('VERSIONCHECK_FAIL', E_USER_WARNING);		}		$info = explode("\n", $info);		$latest_version = trim($info[0]);		$announcement_url = trim($info[1]);		$announcement_url = (strpos($announcement_url, '&amp;') === false) ? str_replace('&', '&amp;', $announcement_url) : $announcement_url;		$update_link = append_sid($phpbb_root_path . 'install/index.' . $phpEx, 'mode=update');		// next feature release		$next_feature_version = $next_feature_announcement_url = false;		if (isset($info[2]) && trim($info[2]) !== '')		{			$next_feature_version = trim($info[2]);			$next_feature_announcement_url = trim($info[3]);		}		// Determine automatic update...		$sql = 'SELECT config_value			FROM ' . CONFIG_TABLE . "			WHERE config_name = 'version_update_from'";		$result = $db->sql_query($sql);		$version_update_from = (string) $db->sql_fetchfield('config_value');		$db->sql_freeresult($result);		$current_version = (!empty($version_update_from)) ? $version_update_from : $config['version'];		$template->assign_vars(array(			'S_UP_TO_DATE'		=> phpbb_version_compare($latest_version, $config['version'], '<='),			'S_UP_TO_DATE_AUTO'	=> phpbb_version_compare($latest_version, $current_version, '<='),			'S_VERSION_CHECK'	=> true,			'U_ACTION'			=> $this->u_action,			'U_VERSIONCHECK_FORCE' => append_sid($this->u_action . '&amp;versioncheck_force=1'),			'LATEST_VERSION'	=> $latest_version,			'CURRENT_VERSION'	=> $config['version'],			'AUTO_VERSION'		=> $version_update_from,			'NEXT_FEATURE_VERSION'	=> $next_feature_version,			'UPDATE_INSTRUCTIONS'	=> sprintf($user->lang['UPDATE_INSTRUCTIONS'], $announcement_url, $update_link),			'UPGRADE_INSTRUCTIONS'	=> $next_feature_version ? $user->lang('UPGRADE_INSTRUCTIONS', $next_feature_version, $next_feature_announcement_url) : false,		));	}}?>
