<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);include($phpbb_root_path . 'includes/functions_admin.' . $phpEx);require($phpbb_root_path . 'includes/functions_module.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup('mcp');$module = new p_master();// Setting a variable to let the style designer know where he is...$template->assign_var('S_IN_MCP', true);// Basic parameter data$id = request_var('i', '');if (isset($_REQUEST['mode']) && is_array($_REQUEST['mode'])){	$mode = request_var('mode', array(''));	list($mode, ) = each($mode);}else{	$mode = request_var('mode', '');}// Only Moderators can go beyond this pointif (!$user->data['is_registered']){	if ($user->data['is_bot'])	{		redirect(append_sid("{$phpbb_root_path}index.$phpEx"));	}	login_box('', $user->lang['LOGIN_EXPLAIN_MCP']);}$quickmod = (isset($_REQUEST['quickmod'])) ? true : false;$action = request_var('action', '');$action_ary = request_var('action', array('' => 0));$forum_action = request_var('forum_action', '');if ($forum_action !== '' && !empty($_POST['sort'])){	$action = $forum_action;}if (sizeof($action_ary)){	list($action, ) = each($action_ary);}unset($action_ary);if ($mode == 'topic_logs'){	$id = 'logs';	$quickmod = false;}$post_id = request_var('p', 0);$topic_id = request_var('t', 0);$forum_id = request_var('f', 0);$report_id = request_var('r', 0);$user_id = request_var('u', 0);$username = utf8_normalize_nfc(request_var('username', '', true));if ($post_id){	// We determine the topic and forum id here, to make sure the moderator really has moderative rights on this post	$sql = 'SELECT topic_id, forum_id		FROM ' . POSTS_TABLE . "		WHERE post_id = $post_id";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	$topic_id = (int) $row['topic_id'];	$forum_id = (int) ($row['forum_id']) ? $row['forum_id'] : $forum_id;}else if ($topic_id){	$sql = 'SELECT forum_id		FROM ' . TOPICS_TABLE . "		WHERE topic_id = $topic_id";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	$forum_id = (int) $row['forum_id'];}// If the user doesn't have any moderator powers (globally or locally) he can't access the mcpif (!$auth->acl_getf_global('m_')){	// Except he is using one of the quickmod tools for users	$user_quickmod_actions = array(		'lock'			=> 'f_user_lock',		'make_sticky'	=> 'f_sticky',		'make_announce'	=> 'f_announce',		'make_global'	=> 'f_announce',		'make_normal'	=> array('f_announce', 'f_sticky')	);	$allow_user = false;	if ($quickmod && isset($user_quickmod_actions[$action]) && $user->data['is_registered'] && $auth->acl_gets($user_quickmod_actions[$action], $forum_id))	{		$topic_info = get_topic_data(array($topic_id));		if ($topic_info[$topic_id]['topic_poster'] == $user->data['user_id'])		{			$allow_user = true;		}	}	if (!$allow_user)	{		trigger_error('NOT_AUTHORISED');	}}// if the user cannot read the forum he tries to access then we won't allow mcp access eitherif ($forum_id && !$auth->acl_get('f_read', $forum_id)){	trigger_error('NOT_AUTHORISED');}if ($forum_id){	$module->acl_forum_id = $forum_id;}// Instantiate module system and generate list of available modules$module->list_modules('mcp');if ($quickmod){	$mode = 'quickmod';	switch ($action)	{		case 'lock':		case 'unlock':		case 'lock_post':		case 'unlock_post':		case 'make_sticky':		case 'make_announce':		case 'make_global':		case 'make_normal':		case 'fork':		case 'move':		case 'delete_post':		case 'delete_topic':			$module->load('mcp', 'main', 'quickmod');			return;		break;		case 'topic_logs':			// Reset start parameter if we jumped from the quickmod dropdown			if (request_var('start', 0))			{				$_REQUEST['start'] = 0;			}			$module->set_active('logs', 'topic_logs');		break;		case 'merge_topic':			$module->set_active('main', 'forum_view');		break;		case 'split':		case 'merge':			$module->set_active('main', 'topic_view');		break;		default:			trigger_error("$action not allowed as quickmod", E_USER_ERROR);		break;	}}else{	// Select the active module	$module->set_active($id, $mode);}// Hide some of the options if we don't have the relevant information to use themif (!$post_id){	$module->set_display('main', 'post_details', false);	$module->set_display('warn', 'warn_post', false);}if ($mode == '' || $mode == 'unapproved_topics' || $mode == 'unapproved_posts'){	$module->set_display('queue', 'approve_details', false);}if ($mode == '' || $mode == 'reports' || $mode == 'reports_closed' || $mode == 'pm_reports' || $mode == 'pm_reports_closed' || $mode == 'pm_report_details'){	$module->set_display('reports', 'report_details', false);}if ($mode == '' || $mode == 'reports' || $mode == 'reports_closed' || $mode == 'pm_reports' || $mode == 'pm_reports_closed' || $mode == 'report_details'){	$module->set_display('pm_reports', 'pm_report_details', false);}if (!$topic_id){	$module->set_display('main', 'topic_view', false);	$module->set_display('logs', 'topic_logs', false);}if (!$forum_id){	$module->set_display('main', 'forum_view', false);	$module->set_display('logs', 'forum_logs', false);}if (!$user_id && $username == ''){	$module->set_display('notes', 'user_notes', false);	$module->set_display('warn', 'warn_user', false);}// Load and execute the relevant module$module->load_active();// Assign data to the template engine for the list of modules$module->assign_tpl_vars(append_sid("{$phpbb_root_path}mcp.$phpEx"));// Generate urls for letting the moderation control panel being accessed in different modes$template->assign_vars(array(	'U_MCP'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main'),	'U_MCP_FORUM'	=> ($forum_id) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "i=main&amp;mode=forum_view&amp;f=$forum_id") : '',	'U_MCP_TOPIC'	=> ($forum_id && $topic_id) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "i=main&amp;mode=topic_view&amp;t=$topic_id") : '',	'U_MCP_POST'	=> ($forum_id && $topic_id && $post_id) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "i=main&amp;mode=post_details&amp;t=$topic_id&amp;p=$post_id") : '',));// Generate the page, do not display/query online list$module->display($module->get_page_title(), false);/*** Functions used to generate additional URL paramters*/function _module__url($mode, &$module_row){	return extra_url();}function _module_notes_url($mode, &$module_row){	if ($mode == 'front')	{		return '';	}	global $user_id;	return ($user_id) ? "&amp;u=$user_id" : '';}function _module_warn_url($mode, &$module_row){	if ($mode == 'front' || $mode == 'list')	{		global $forum_id;		return ($forum_id) ? "&amp;f=$forum_id" : '';	}	if ($mode == 'warn_post')	{		global $forum_id, $post_id;		$url_extra = ($forum_id) ? "&amp;f=$forum_id" : '';		$url_extra .= ($post_id) ? "&amp;p=$post_id" : '';		return $url_extra;	}	else	{		global $user_id;		return ($user_id) ? "&amp;u=$user_id" : '';	}}function _module_main_url($mode, &$module_row){	return extra_url();}function _module_logs_url($mode, &$module_row){	return extra_url();}function _module_ban_url($mode, &$module_row){	return extra_url();}function _module_queue_url($mode, &$module_row){	return extra_url();}function _module_reports_url($mode, &$module_row){	return extra_url();}function extra_url(){	global $forum_id, $topic_id, $post_id, $report_id, $user_id;	$url_extra = '';	$url_extra .= ($forum_id) ? "&amp;f=$forum_id" : '';	$url_extra .= ($topic_id) ? "&amp;t=$topic_id" : '';	$url_extra .= ($post_id) ? "&amp;p=$post_id" : '';	$url_extra .= ($user_id) ? "&amp;u=$user_id" : '';	$url_extra .= ($report_id) ? "&amp;r=$report_id" : '';	return $url_extra;}/*** Get simple topic data*/function get_topic_data($topic_ids, $acl_list = false, $read_tracking = false){	global $auth, $db, $config, $user;	static $rowset = array();	$topics = array();	if (!sizeof($topic_ids))	{		return array();	}	// cache might not contain read tracking info, so we can't use it if read	// tracking information is requested	if (!$read_tracking)	{		$cache_topic_ids = array_intersect($topic_ids, array_keys($rowset));		$topic_ids = array_diff($topic_ids, array_keys($rowset));	}	else	{		$cache_topic_ids = array();	}	if (sizeof($topic_ids))	{		$sql_array = array(			'SELECT'	=> 't.*, f.*',			'FROM'		=> array(				TOPICS_TABLE	=> 't',			),			'LEFT_JOIN'	=> array(				array(					'FROM'	=> array(FORUMS_TABLE => 'f'),					'ON'	=> 'f.forum_id = t.forum_id'				)			),			'WHERE'		=> $db->sql_in_set('t.topic_id', $topic_ids)		);		if ($read_tracking && $config['load_db_lastread'])		{			$sql_array['SELECT'] .= ', tt.mark_time, ft.mark_time as forum_mark_time';			$sql_array['LEFT_JOIN'][] = array(				'FROM'	=> array(TOPICS_TRACK_TABLE => 'tt'),				'ON'	=> 'tt.user_id = ' . $user->data['user_id'] . ' AND t.topic_id = tt.topic_id'			);			$sql_array['LEFT_JOIN'][] = array(				'FROM'	=> array(FORUMS_TRACK_TABLE => 'ft'),				'ON'	=> 'ft.user_id = ' . $user->data['user_id'] . ' AND t.forum_id = ft.forum_id'			);		}		$sql = $db->sql_build_query('SELECT', $sql_array);		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if (!$row['forum_id'])			{				// Global Announcement?				$row['forum_id'] = request_var('f', 0);			}			$rowset[$row['topic_id']] = $row;			if ($acl_list && !$auth->acl_gets($acl_list, $row['forum_id']))			{				continue;			}			$topics[$row['topic_id']] = $row;		}		$db->sql_freeresult($result);	}	foreach ($cache_topic_ids as $id)	{		if (!$acl_list || $auth->acl_gets($acl_list, $rowset[$id]['forum_id']))		{			$topics[$id] = $rowset[$id];		}	}	return $topics;}/*** Get simple post data*/function get_post_data($post_ids, $acl_list = false, $read_tracking = false){	global $db, $auth, $config, $user;	$rowset = array();	if (!sizeof($post_ids))	{		return array();	}	$sql_array = array(		'SELECT'	=> 'p.*, u.*, t.*, f.*',		'FROM'		=> array(			USERS_TABLE		=> 'u',			POSTS_TABLE		=> 'p',			TOPICS_TABLE	=> 't',		),		'LEFT_JOIN'	=> array(			array(				'FROM'	=> array(FORUMS_TABLE => 'f'),				'ON'	=> 'f.forum_id = t.forum_id'			)		),		'WHERE'		=> $db->sql_in_set('p.post_id', $post_ids) . '			AND u.user_id = p.poster_id			AND t.topic_id = p.topic_id',	);	if ($read_tracking && $config['load_db_lastread'])	{		$sql_array['SELECT'] .= ', tt.mark_time, ft.mark_time as forum_mark_time';		$sql_array['LEFT_JOIN'][] = array(			'FROM'	=> array(TOPICS_TRACK_TABLE => 'tt'),			'ON'	=> 'tt.user_id = ' . $user->data['user_id'] . ' AND t.topic_id = tt.topic_id'		);		$sql_array['LEFT_JOIN'][] = array(			'FROM'	=> array(FORUMS_TRACK_TABLE => 'ft'),			'ON'	=> 'ft.user_id = ' . $user->data['user_id'] . ' AND t.forum_id = ft.forum_id'		);	}	$sql = $db->sql_build_query('SELECT', $sql_array);	$result = $db->sql_query($sql);	unset($sql_array);	while ($row = $db->sql_fetchrow($result))	{		if (!$row['forum_id'])		{			// Global Announcement?			$row['forum_id'] = request_var('f', 0);		}		if ($acl_list && !$auth->acl_gets($acl_list, $row['forum_id']))		{			continue;		}		if (!$row['post_approved'] && !$auth->acl_get('m_approve', $row['forum_id']))		{			// Moderators without the permission to approve post should at least not see them. ;)			continue;		}		$rowset[$row['post_id']] = $row;	}	$db->sql_freeresult($result);	return $rowset;}/*** Get simple forum data*/function get_forum_data($forum_id, $acl_list = 'f_list', $read_tracking = false){	global $auth, $db, $user, $config;	$rowset = array();	if (!is_array($forum_id))	{		$forum_id = array($forum_id);	}	if (!sizeof($forum_id))	{		return array();	}	if ($read_tracking && $config['load_db_lastread'])	{		$read_tracking_join = ' LEFT JOIN ' . FORUMS_TRACK_TABLE . ' ft ON (ft.user_id = ' . $user->data['user_id'] . '			AND ft.forum_id = f.forum_id)';		$read_tracking_select = ', ft.mark_time';	}	else	{		$read_tracking_join = $read_tracking_select = '';	}	$sql = "SELECT f.* $read_tracking_select		FROM " . FORUMS_TABLE . " f$read_tracking_join		WHERE " . $db->sql_in_set('f.forum_id', $forum_id);	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		if ($acl_list && !$auth->acl_gets($acl_list, $row['forum_id']))		{			continue;		}		if ($auth->acl_get('m_approve', $row['forum_id']))		{			$row['forum_topics'] = $row['forum_topics_real'];		}		$rowset[$row['forum_id']] = $row;	}	$db->sql_freeresult($result);	return $rowset;}/*** Get simple pm data*/function get_pm_data($pm_ids){	global $db, $auth, $config, $user;	$rowset = array();	if (!sizeof($pm_ids))	{		return array();	}	$sql_array = array(		'SELECT'	=> 'p.*, u.*',		'FROM'		=> array(			USERS_TABLE			=> 'u',			PRIVMSGS_TABLE		=> 'p',		),		'WHERE'		=> $db->sql_in_set('p.msg_id', $pm_ids) . '			AND u.user_id = p.author_id',	);	$sql = $db->sql_build_query('SELECT', $sql_array);	$result = $db->sql_query($sql);	unset($sql_array);	while ($row = $db->sql_fetchrow($result))	{		$rowset[$row['msg_id']] = $row;	}	$db->sql_freeresult($result);	return $rowset;}/*** sorting in mcp** @param string $where_sql should either be WHERE (default if ommited) or end with AND or OR** $mode reports and reports_closed: the $where parameters uses aliases p for posts table and r for report table* $mode unapproved_posts: the $where parameters uses aliases p for posts table and t for topic table*/function mcp_sorting($mode, &$sort_days, &$sort_key, &$sort_dir, &$sort_by_sql, &$sort_order_sql, &$total, $forum_id = 0, $topic_id = 0, $where_sql = 'WHERE'){	global $db, $user, $auth, $template;	$sort_days = request_var('st', 0);	$min_time = ($sort_days) ? time() - ($sort_days * 86400) : 0;	switch ($mode)	{		case 'viewforum':			$type = 'topics';			$default_key = 't';			$default_dir = 'd';			$sql = 'SELECT COUNT(topic_id) AS total				FROM ' . TOPICS_TABLE . "				$where_sql forum_id = $forum_id					AND topic_type NOT IN (" . POST_ANNOUNCE . ', ' . POST_GLOBAL . ")					AND topic_last_post_time >= $min_time";			if (!$auth->acl_get('m_approve', $forum_id))			{				$sql .= 'AND topic_approved = 1';			}		break;		case 'viewtopic':			$type = 'posts';			$default_key = 't';			$default_dir = 'a';			$sql = 'SELECT COUNT(post_id) AS total				FROM ' . POSTS_TABLE . "				$where_sql topic_id = $topic_id					AND post_time >= $min_time";			if (!$auth->acl_get('m_approve', $forum_id))			{				$sql .= 'AND post_approved = 1';			}		break;		case 'unapproved_posts':			$type = 'posts';			$default_key = 't';			$default_dir = 'd';			$where_sql .= ($topic_id) ? ' p.topic_id = ' . $topic_id . ' AND' : '';			$sql = 'SELECT COUNT(p.post_id) AS total				FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . " t				$where_sql " . $db->sql_in_set('p.forum_id', ($forum_id) ? array($forum_id) : array_intersect(get_forum_list('f_read'), get_forum_list('m_approve'))) . '					AND p.post_approved = 0					AND t.topic_id = p.topic_id					AND t.topic_first_post_id <> p.post_id';			if ($min_time)			{				$sql .= ' AND post_time >= ' . $min_time;			}		break;		case 'unapproved_topics':			$type = 'topics';			$default_key = 't';			$default_dir = 'd';			$sql = 'SELECT COUNT(topic_id) AS total				FROM ' . TOPICS_TABLE . "				$where_sql " . $db->sql_in_set('forum_id', ($forum_id) ? array($forum_id) : array_intersect(get_forum_list('f_read'), get_forum_list('m_approve'))) . '					AND topic_approved = 0';			if ($min_time)			{				$sql .= ' AND topic_time >= ' . $min_time;			}		break;		case 'pm_reports':		case 'pm_reports_closed':		case 'reports':		case 'reports_closed':			$pm = (strpos($mode, 'pm_') === 0) ? true : false;			$type = ($pm) ? 'pm_reports' : 'reports';			$default_key = 't';			$default_dir = 'd';			$limit_time_sql = ($min_time) ? "AND r.report_time >= $min_time" : '';			if ($topic_id)			{				$where_sql .= ' p.topic_id = ' . $topic_id . ' AND ';			}			else if ($forum_id)			{				$where_sql .= ' p.forum_id = ' . $forum_id . ' AND ';			}			else if (!$pm)			{				$where_sql .= ' ' . $db->sql_in_set('p.forum_id', get_forum_list(array('!f_read', '!m_report')), true, true) . ' AND ';			}			if ($mode == 'reports' || $mode == 'pm_reports')			{				$where_sql .= ' r.report_closed = 0 AND ';			}			else			{				$where_sql .= ' r.report_closed = 1 AND ';			}			if ($pm)			{				$sql = 'SELECT COUNT(r.report_id) AS total					FROM ' . REPORTS_TABLE . ' r, ' . PRIVMSGS_TABLE . " p					$where_sql r.post_id = 0						AND p.msg_id = r.pm_id						$limit_time_sql";			}			else			{				$sql = 'SELECT COUNT(r.report_id) AS total					FROM ' . REPORTS_TABLE . ' r, ' . POSTS_TABLE . " p					$where_sql r.pm_id = 0						AND p.post_id = r.post_id						$limit_time_sql";			}		break;		case 'viewlogs':			$type = 'logs';			$default_key = 't';			$default_dir = 'd';			$sql = 'SELECT COUNT(log_id) AS total				FROM ' . LOG_TABLE . "				$where_sql " . $db->sql_in_set('forum_id', ($forum_id) ? array($forum_id) : array_intersect(get_forum_list('f_read'), get_forum_list('m_'))) . '					AND log_time >= ' . $min_time . '					AND log_type = ' . LOG_MOD;		break;	}	$sort_key = request_var('sk', $default_key);	$sort_dir = request_var('sd', $default_dir);	$sort_dir_text = array('a' => $user->lang['ASCENDING'], 'd' => $user->lang['DESCENDING']);	switch ($type)	{		case 'topics':			$limit_days = array(0 => $user->lang['ALL_TOPICS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);			$sort_by_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 'tt' => $user->lang['TOPIC_TIME'], 'r' => $user->lang['REPLIES'], 's' => $user->lang['SUBJECT'], 'v' => $user->lang['VIEWS']);			$sort_by_sql = array('a' => 't.topic_first_poster_name', 't' => 't.topic_last_post_time', 'tt' => 't.topic_time', 'r' => (($auth->acl_get('m_approve', $forum_id)) ? 't.topic_replies_real' : 't.topic_replies'), 's' => 't.topic_title', 'v' => 't.topic_views');			$limit_time_sql = ($min_time) ? "AND t.topic_last_post_time >= $min_time" : '';		break;		case 'posts':			$limit_days = array(0 => $user->lang['ALL_POSTS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);			$sort_by_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 's' => $user->lang['SUBJECT']);			$sort_by_sql = array('a' => 'u.username_clean', 't' => 'p.post_time', 's' => 'p.post_subject');			$limit_time_sql = ($min_time) ? "AND p.post_time >= $min_time" : '';		break;		case 'reports':			$limit_days = array(0 => $user->lang['ALL_REPORTS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);			$sort_by_text = array('a' => $user->lang['AUTHOR'], 'r' => $user->lang['REPORTER'], 'p' => $user->lang['POST_TIME'], 't' => $user->lang['REPORT_TIME'], 's' => $user->lang['SUBJECT']);			$sort_by_sql = array('a' => 'u.username_clean', 'r' => 'ru.username', 'p' => 'p.post_time', 't' => 'r.report_time', 's' => 'p.post_subject');		break;		case 'pm_reports':			$limit_days = array(0 => $user->lang['ALL_REPORTS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);			$sort_by_text = array('a' => $user->lang['AUTHOR'], 'r' => $user->lang['REPORTER'], 'p' => $user->lang['POST_TIME'], 't' => $user->lang['REPORT_TIME'], 's' => $user->lang['SUBJECT']);			$sort_by_sql = array('a' => 'u.username_clean', 'r' => 'ru.username', 'p' => 'p.message_time', 't' => 'r.report_time', 's' => 'p.message_subject');		break;		case 'logs':			$limit_days = array(0 => $user->lang['ALL_ENTRIES'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);			$sort_by_text = array('u' => $user->lang['SORT_USERNAME'], 't' => $user->lang['SORT_DATE'], 'i' => $user->lang['SORT_IP'], 'o' => $user->lang['SORT_ACTION']);			$sort_by_sql = array('u' => 'u.username_clean', 't' => 'l.log_time', 'i' => 'l.log_ip', 'o' => 'l.log_operation');			$limit_time_sql = ($min_time) ? "AND l.log_time >= $min_time" : '';		break;	}	if (!isset($sort_by_sql[$sort_key]))	{		$sort_key = $default_key;	}	$sort_order_sql = $sort_by_sql[$sort_key] . ' ' . (($sort_dir == 'd') ? 'DESC' : 'ASC');	$s_limit_days = $s_sort_key = $s_sort_dir = $sort_url = '';	gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $sort_url);	$template->assign_vars(array(		'S_SELECT_SORT_DIR'		=> $s_sort_dir,		'S_SELECT_SORT_KEY'		=> $s_sort_key,		'S_SELECT_SORT_DAYS'	=> $s_limit_days)	);	if (($sort_days && $mode != 'viewlogs') || in_array($mode, array('reports', 'unapproved_topics', 'unapproved_posts')) || $where_sql != 'WHERE')	{		$result = $db->sql_query($sql);		$total = (int) $db->sql_fetchfield('total');		$db->sql_freeresult($result);	}	else	{		$total = -1;	}}/*** Validate ids** @param	array	&$ids			The relevant ids to check* @param	string	$table			The table to find the ids in* @param	string	$sql_id			The ids relevant column name* @param	array	$acl_list		A list of permissions the user need to have* @param	mixed	$singe_forum	Limit to one forum id (int) or the first forum found (true)** @return	mixed	False if no ids were able to be retrieved, true if at least one id left.*					Additionally, this value can be the forum_id assigned if $single_forum was set.*					Therefore checking the result for with !== false is the best method.*/function check_ids(&$ids, $table, $sql_id, $acl_list = false, $single_forum = false){	global $db, $auth;	if (!is_array($ids) || empty($ids))	{		return false;	}	$sql = "SELECT $sql_id, forum_id FROM $table		WHERE " . $db->sql_in_set($sql_id, $ids);	$result = $db->sql_query($sql);	$ids = array();	$forum_id = false;	while ($row = $db->sql_fetchrow($result))	{		if ($acl_list && $row['forum_id'] && !$auth->acl_gets($acl_list, $row['forum_id']))		{			continue;		}		if ($acl_list && !$row['forum_id'] && !$auth->acl_getf_global($acl_list))		{			continue;		}		// Limit forum? If not, just assign the id.		if ($single_forum === false)		{			$ids[] = $row[$sql_id];			continue;		}		// Limit forum to a specific forum id?		// This can get really tricky, because we do not want to create a failure on global topics. :)		if ($row['forum_id'])		{			if ($single_forum !== true && $row['forum_id'] == (int) $single_forum)			{				$forum_id = (int) $single_forum;			}			else if ($forum_id === false)			{				$forum_id = $row['forum_id'];			}			if ($row['forum_id'] == $forum_id)			{				$ids[] = $row[$sql_id];			}		}		else		{			// Always add a global topic			$ids[] = $row[$sql_id];		}	}	$db->sql_freeresult($result);	if (!sizeof($ids))	{		return false;	}	// If forum id is false and ids populated we may have only global announcements selected (returning 0 because of (int) $forum_id)	return ($single_forum === false) ? true : (int) $forum_id;}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** View private message*/function view_message($id, $mode, $folder_id, $msg_id, $folder, $message_row){	global $user, $template, $auth, $db, $cache;	global $phpbb_root_path, $phpEx, $config;	$user->add_lang(array('viewtopic', 'memberlist'));	$msg_id		= (int) $msg_id;	$folder_id	= (int) $folder_id;	$author_id	= (int) $message_row['author_id'];	$view		= request_var('view', '');	// Not able to view message, it was deleted by the sender	if ($message_row['pm_deleted'])	{		$meta_info = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&amp;folder=$folder_id");		$message = $user->lang['NO_AUTH_READ_REMOVED_MESSAGE'];		$message .= '<br /><br />' . sprintf($user->lang['RETURN_FOLDER'], '<a href="' . $meta_info . '">', '</a>');		trigger_error($message);	}	// Do not allow hold messages to be seen	if ($folder_id == PRIVMSGS_HOLD_BOX)	{		trigger_error('NO_AUTH_READ_HOLD_MESSAGE');	}	// Grab icons	$icons = $cache->obtain_icons();	$bbcode = false;	// Instantiate BBCode if need be	if ($message_row['bbcode_bitfield'])	{		include($phpbb_root_path . 'includes/bbcode.' . $phpEx);		$bbcode = new bbcode($message_row['bbcode_bitfield']);	}	// Assign TO/BCC Addresses to template	write_pm_addresses(array('to' => $message_row['to_address'], 'bcc' => $message_row['bcc_address']), $author_id);	$user_info = get_user_information($author_id, $message_row);	// Parse the message and subject	$message = censor_text($message_row['message_text']);	// Second parse bbcode here	if ($message_row['bbcode_bitfield'])	{		$bbcode->bbcode_second_pass($message, $message_row['bbcode_uid'], $message_row['bbcode_bitfield']);	}	// Always process smilies after parsing bbcodes	$message = bbcode_nl2br($message);	$message = smiley_text($message);	// Replace naughty words such as farty pants	$message_row['message_subject'] = censor_text($message_row['message_subject']);	// Editing information	if ($message_row['message_edit_count'] && $config['display_last_edited'])	{		$l_edit_time_total = ($message_row['message_edit_count'] == 1) ? $user->lang['EDITED_TIME_TOTAL'] : $user->lang['EDITED_TIMES_TOTAL'];		$l_edited_by = '<br /><br />' . sprintf($l_edit_time_total, (!$message_row['message_edit_user']) ? $message_row['username'] : $message_row['message_edit_user'], $user->format_date($message_row['message_edit_time'], false, true), $message_row['message_edit_count']);	}	else	{		$l_edited_by = '';	}	// Pull attachment data	$display_notice = false;	$attachments = array();	if ($message_row['message_attachment'] && $config['allow_pm_attach'])	{		if ($auth->acl_get('u_pm_download'))		{			$sql = 'SELECT *				FROM ' . ATTACHMENTS_TABLE . "				WHERE post_msg_id = $msg_id					AND in_message = 1				ORDER BY filetime DESC, post_msg_id ASC";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$attachments[] = $row;			}			$db->sql_freeresult($result);			// No attachments exist, but message table thinks they do so go ahead and reset attach flags			if (!sizeof($attachments))			{				$sql = 'UPDATE ' . PRIVMSGS_TABLE . "					SET message_attachment = 0					WHERE msg_id = $msg_id";				$db->sql_query($sql);			}		}		else		{			$display_notice = true;		}	}	// Assign inline attachments	if (!empty($attachments))	{		$update_count = array();		parse_attachments(false, $message, $attachments, $update_count);		// Update the attachment download counts		if (sizeof($update_count))		{			$sql = 'UPDATE ' . ATTACHMENTS_TABLE . '				SET download_count = download_count + 1				WHERE ' . $db->sql_in_set('attach_id', array_unique($update_count));			$db->sql_query($sql);		}	}	$user_info['sig'] = '';	$signature = ($message_row['enable_sig'] && $config['allow_sig'] && $auth->acl_get('u_sig') && $user->optionget('viewsigs')) ? $user_info['user_sig'] : '';	// End signature parsing, only if needed	if ($signature)	{		$signature = censor_text($signature);		if ($user_info['user_sig_bbcode_bitfield'])		{			if ($bbcode === false)			{				include($phpbb_root_path . 'includes/bbcode.' . $phpEx);				$bbcode = new bbcode($user_info['user_sig_bbcode_bitfield']);			}			$bbcode->bbcode_second_pass($signature, $user_info['user_sig_bbcode_uid'], $user_info['user_sig_bbcode_bitfield']);		}		$signature = bbcode_nl2br($signature);		$signature = smiley_text($signature);	}	$url = append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm');	// Number of "to" recipients	$num_recipients = (int) preg_match_all('/:?(u|g)_([0-9]+):?/', $message_row['to_address'], $match);	$bbcode_status	= ($config['allow_bbcode'] && $config['auth_bbcode_pm'] && $auth->acl_get('u_pm_bbcode')) ? true : false;	$template->assign_vars(array(		'MESSAGE_AUTHOR_FULL'		=> get_username_string('full', $author_id, $user_info['username'], $user_info['user_colour'], $user_info['username']),		'MESSAGE_AUTHOR_COLOUR'		=> get_username_string('colour', $author_id, $user_info['username'], $user_info['user_colour'], $user_info['username']),		'MESSAGE_AUTHOR'			=> get_username_string('username', $author_id, $user_info['username'], $user_info['user_colour'], $user_info['username']),		'U_MESSAGE_AUTHOR'			=> get_username_string('profile', $author_id, $user_info['username'], $user_info['user_colour'], $user_info['username']),		'RANK_TITLE'		=> $user_info['rank_title'],		'RANK_IMG'			=> $user_info['rank_image'],		'AUTHOR_AVATAR'		=> (isset($user_info['avatar'])) ? $user_info['avatar'] : '',		'AUTHOR_JOINED'		=> $user->format_date($user_info['user_regdate']),		'AUTHOR_POSTS'		=> (int) $user_info['user_posts'],		'AUTHOR_FROM'		=> (!empty($user_info['user_from'])) ? $user_info['user_from'] : '',		'ONLINE_IMG'		=> (!$config['load_onlinetrack']) ? '' : ((isset($user_info['online']) && $user_info['online']) ? $user->img('icon_user_online', $user->lang['ONLINE']) : $user->img('icon_user_offline', $user->lang['OFFLINE'])),		'S_ONLINE'			=> (!$config['load_onlinetrack']) ? false : ((isset($user_info['online']) && $user_info['online']) ? true : false),		'DELETE_IMG'		=> $user->img('icon_post_delete', $user->lang['DELETE_MESSAGE']),		'INFO_IMG'			=> $user->img('icon_post_info', $user->lang['VIEW_PM_INFO']),		'PROFILE_IMG'		=> $user->img('icon_user_profile', $user->lang['READ_PROFILE']),		'EMAIL_IMG'			=> $user->img('icon_contact_email', $user->lang['SEND_EMAIL']),		'QUOTE_IMG'			=> $user->img('icon_post_quote', $user->lang['POST_QUOTE_PM']),		'REPLY_IMG'			=> $user->img('button_pm_reply', $user->lang['POST_REPLY_PM']),		'REPORT_IMG'		=> $user->img('icon_post_report', 'REPORT_PM'),		'EDIT_IMG'			=> $user->img('icon_post_edit', $user->lang['POST_EDIT_PM']),		'MINI_POST_IMG'		=> $user->img('icon_post_target', $user->lang['PM']),		'SENT_DATE'			=> ($view == 'print') ? $user->format_date($message_row['message_time'], false, true) : $user->format_date($message_row['message_time']),		'SUBJECT'			=> $message_row['message_subject'],		'MESSAGE'			=> $message,		'SIGNATURE'			=> ($message_row['enable_sig']) ? $signature : '',		'EDITED_MESSAGE'	=> $l_edited_by,		'MESSAGE_ID'		=> $message_row['msg_id'],		'U_PM'			=> ($config['allow_privmsg'] && $auth->acl_get('u_sendpm') && ($user_info['user_allow_pm'] || $auth->acl_gets('a_', 'm_') || $auth->acl_getf_global('m_'))) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=compose&amp;u=' . $author_id) : '',		'U_WWW'			=> (!empty($user_info['user_website'])) ? $user_info['user_website'] : '',		'U_ICQ'			=> ($user_info['user_icq']) ? 'http://www.icq.com/people/' . urlencode($user_info['user_icq']) . '/' : '',		'U_AIM'			=> ($user_info['user_aim'] && $auth->acl_get('u_sendim')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=contact&amp;action=aim&amp;u=' . $author_id) : '',		'U_YIM'			=> ($user_info['user_yim']) ? 'http://edit.yahoo.com/config/send_webmesg?.target=' . urlencode($user_info['user_yim']) . '&amp;.src=pg' : '',		'U_MSN'			=> ($user_info['user_msnm'] && $auth->acl_get('u_sendim')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=contact&amp;action=msnm&amp;u=' . $author_id) : '',		'U_JABBER'		=> ($user_info['user_jabber'] && $auth->acl_get('u_sendim')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=contact&amp;action=jabber&amp;u=' . $author_id) : '',		'U_DELETE'			=> ($auth->acl_get('u_pm_delete')) ? "$url&amp;mode=compose&amp;action=delete&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] : '',		'U_EMAIL'			=> $user_info['email'],		'U_REPORT'			=> ($config['allow_pm_report']) ? append_sid("{$phpbb_root_path}report.$phpEx", "pm=" . $message_row['msg_id']) : '',		'U_QUOTE'			=> ($auth->acl_get('u_sendpm') && $author_id != ANONYMOUS) ? "$url&amp;mode=compose&amp;action=quote&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] : '',		'U_EDIT'			=> (($message_row['message_time'] > time() - ($config['pm_edit_time'] * 60) || !$config['pm_edit_time']) && $folder_id == PRIVMSGS_OUTBOX && $auth->acl_get('u_pm_edit')) ? "$url&amp;mode=compose&amp;action=edit&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] : '',		'U_POST_REPLY_PM'	=> ($auth->acl_get('u_sendpm') && $author_id != ANONYMOUS) ? "$url&amp;mode=compose&amp;action=reply&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] : '',		'U_POST_REPLY_ALL'	=> ($auth->acl_get('u_sendpm') && $author_id != ANONYMOUS) ? "$url&amp;mode=compose&amp;action=reply&amp;f=$folder_id&amp;reply_to_all=1&amp;p=" . $message_row['msg_id'] : '',		'U_PREVIOUS_PM'		=> "$url&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] . "&amp;view=previous",		'U_NEXT_PM'			=> "$url&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] . "&amp;view=next",		'U_PM_ACTION'		=> $url . '&amp;mode=compose&amp;f=' . $folder_id . '&amp;p=' . $message_row['msg_id'],		'S_HAS_ATTACHMENTS'	=> (sizeof($attachments)) ? true : false,		'S_DISPLAY_NOTICE'	=> $display_notice && $message_row['message_attachment'],		'S_AUTHOR_DELETED'	=> ($author_id == ANONYMOUS) ? true : false,		'S_SPECIAL_FOLDER'	=> in_array($folder_id, array(PRIVMSGS_NO_BOX, PRIVMSGS_OUTBOX)),		'S_PM_RECIPIENTS'	=> $num_recipients,		'S_BBCODE_ALLOWED'	=> ($bbcode_status) ? 1 : 0,		'U_PRINT_PM'		=> ($config['print_pm'] && $auth->acl_get('u_pm_printpm')) ? "$url&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] . "&amp;view=print" : '',		'U_FORWARD_PM'		=> ($config['forward_pm'] && $auth->acl_get('u_sendpm') && $auth->acl_get('u_pm_forward')) ? "$url&amp;mode=compose&amp;action=forward&amp;f=$folder_id&amp;p=" . $message_row['msg_id'] : '')	);	// Display not already displayed Attachments for this post, we already parsed them. ;)	if (isset($attachments) && sizeof($attachments))	{		foreach ($attachments as $attachment)		{			$template->assign_block_vars('attachment', array(				'DISPLAY_ATTACHMENT'	=> $attachment)			);		}	}	if (!isset($_REQUEST['view']) || $_REQUEST['view'] != 'print')	{		// Message History		if (message_history($msg_id, $user->data['user_id'], $message_row, $folder))		{			$template->assign_var('S_DISPLAY_HISTORY', true);		}	}}/*** Get user information (only for message display)*/function get_user_information($user_id, $user_row){	global $db, $auth, $user, $cache;	global $phpbb_root_path, $phpEx, $config;	if (!$user_id)	{		return array();	}	if (empty($user_row))	{		$sql = 'SELECT *			FROM ' . USERS_TABLE . '			WHERE user_id = ' . (int) $user_id;		$result = $db->sql_query($sql);		$user_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);	}	// Some standard values	$user_row['online'] = false;	$user_row['rank_title'] = $user_row['rank_image'] = $user_row['rank_image_src'] = $user_row['email'] = '';	// Generate online information for user	if ($config['load_onlinetrack'])	{		$sql = 'SELECT session_user_id, MAX(session_time) as online_time, MIN(session_viewonline) AS viewonline			FROM ' . SESSIONS_TABLE . "			WHERE session_user_id = $user_id			GROUP BY session_user_id";		$result = $db->sql_query_limit($sql, 1);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		$update_time = $config['load_online_time'] * 60;		if ($row)		{			$user_row['online'] = (time() - $update_time < $row['online_time'] && ($row['viewonline'] || $auth->acl_get('u_viewonline'))) ? true : false;		}	}	if (!function_exists('get_user_avatar'))	{		include($phpbb_root_path . 'includes/functions_display.' . $phpEx);	}	$user_row['avatar'] = ($user->optionget('viewavatars')) ? get_user_avatar($user_row['user_avatar'], $user_row['user_avatar_type'], $user_row['user_avatar_width'], $user_row['user_avatar_height']) : '';	get_user_rank($user_row['user_rank'], $user_row['user_posts'], $user_row['rank_title'], $user_row['rank_image'], $user_row['rank_image_src']);	if ((!empty($user_row['user_allow_viewemail']) && $auth->acl_get('u_sendemail')) || $auth->acl_get('a_email'))	{		$user_row['email'] = ($config['board_email_form'] && $config['email_enable']) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", "mode=email&amp;u=$user_id") : ((($config['board_hide_emails'] && !$auth->acl_get('a_email')) || empty($user_row['user_email'])) ? '' : 'mailto:' . $user_row['user_email']);	}	return $user_row;}?>
<?php/**** acp_groups [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ACP_GROUPS_MANAGE_EXPLAIN'		=> 'From this panel you can administer all your usergroups. You can delete, create and edit existing groups. Furthermore, you may choose group leaders, toggle open/hidden/closed group status and set the group name and description.',	'ADD_USERS'						=> 'Add users',	'ADD_USERS_EXPLAIN'				=> 'Here you can add new users to the group. You may select whether this group becomes the new default for the selected users. Additionally you can define them as group leaders. Please enter each username on a separate line.',	'COPY_PERMISSIONS'				=> 'Copy permissions from',	'COPY_PERMISSIONS_EXPLAIN'		=> 'Once created, the group will have the same permissions as the one you select here.',	'CREATE_GROUP'					=> 'Create new group',	'GROUPS_NO_MEMBERS'				=> 'This group has no members',	'GROUPS_NO_MODS'				=> 'No group leaders defined',	'GROUP_APPROVE'					=> 'Approve member',	'GROUP_APPROVED'				=> 'Approved members',	'GROUP_AVATAR'					=> 'Group avatar',	'GROUP_AVATAR_EXPLAIN'			=> 'This image will be displayed in the Group Control Panel.',	'GROUP_CLOSED'					=> 'Closed',	'GROUP_COLOR'					=> 'Group colour',	'GROUP_COLOR_EXPLAIN'			=> 'Defines the colour members usernames will appear in, leave blank for user default.',	'GROUP_CONFIRM_ADD_USER'		=> 'Are you sure that you want to add the user %1$s to the group?',	'GROUP_CONFIRM_ADD_USERS'		=> 'Are you sure that you want to add the users %1$s to the group?',	'GROUP_CREATED'					=> 'Group has been created successfully.',	'GROUP_DEFAULT'					=> 'Make group default for member',	'GROUP_DEFS_UPDATED'			=> 'Default group set for all selected members.',	'GROUP_DELETE'					=> 'Remove member from group',	'GROUP_DELETED'					=> 'Group deleted and user default groups set successfully.',	'GROUP_DEMOTE'					=> 'Demote group leader',	'GROUP_DESC'					=> 'Group description',	'GROUP_DETAILS'					=> 'Group details',	'GROUP_EDIT_EXPLAIN'			=> 'Here you can edit an existing group. You can change its name, description and type (open, closed, etc.). You can also set certain group wide options such as colouration, rank, etc. Changes made here override users current settings. Please note that group members can override group-avatar settings, unless you set appropriate user permissions.',	'GROUP_ERR_USERS_EXIST'			=> 'The specified users are already members of this group.',	'GROUP_FOUNDER_MANAGE'			=> 'Founder manage only',	'GROUP_FOUNDER_MANAGE_EXPLAIN'	=> 'Restrict management of this group to founders only. Users having group permissions are still able to see this group as well as this groups members.',	'GROUP_HIDDEN'					=> 'Hidden',	'GROUP_LANG'					=> 'Group language',	'GROUP_LEAD'					=> 'Group leaders',	'GROUP_LEADERS_ADDED'			=> 'New leaders added to group successfully.',	'GROUP_LEGEND'					=> 'Display group in legend',	'GROUP_LIST'					=> 'Current members',	'GROUP_LIST_EXPLAIN'			=> 'This is a complete list of all the current users with membership of this group. You can delete members (except in certain special groups) or add new ones as you see fit.',	'GROUP_MEMBERS'					=> 'Group members',	'GROUP_MEMBERS_EXPLAIN'			=> 'This is a complete listing of all the members of this usergroup. It includes separate sections for leaders, pending and existing members. From here you can manage all aspects of who has membership of this group and what their role is. To remove a leader but keep them in the group use Demote rather than delete. Similarly use Promote to make an existing member a leader.',	'GROUP_MESSAGE_LIMIT'			=> 'Group private message limit per folder',	'GROUP_MESSAGE_LIMIT_EXPLAIN'	=> 'This setting overrides the per-user folder message limit. A value of 0 means the user default limit will be used.',	'GROUP_MODS_ADDED'				=> 'New group leaders added successfully.',	'GROUP_MODS_DEMOTED'			=> 'Group leaders demoted successfully.',	'GROUP_MODS_PROMOTED'			=> 'Group members promoted successfully.',	'GROUP_NAME'					=> 'Group name',	'GROUP_NAME_TAKEN'				=> 'The group name you entered is already in use, please select an alternative.',	'GROUP_OPEN'					=> 'Open',	'GROUP_PENDING'					=> 'Pending members',	'GROUP_MAX_RECIPIENTS'			=> 'Maximum number of allowed recipients per private message',	'GROUP_MAX_RECIPIENTS_EXPLAIN'	=> 'The maximum number of allowed recipients in a private message. If 0 is entered, the board-wide setting is used.',	'GROUP_OPTIONS_SAVE'			=> 'Group wide options',	'GROUP_PROMOTE'					=> 'Promote to group leader',	'GROUP_RANK'					=> 'Group rank',	'GROUP_RECEIVE_PM'				=> 'Group able to receive private messages',	'GROUP_RECEIVE_PM_EXPLAIN'		=> 'Please note that hidden groups are not able to be messaged, regardless of this setting.',	'GROUP_REQUEST'					=> 'Request',	'GROUP_SETTINGS_SAVE'			=> 'Group wide settings',	'GROUP_SKIP_AUTH'				=> 'Exempt group leader from permissions',	'GROUP_SKIP_AUTH_EXPLAIN'		=> 'If enabled group leader no longer inherit permissions from the group.',	'GROUP_TYPE'					=> 'Group type',	'GROUP_TYPE_EXPLAIN'			=> 'This determines which users can join or view this group.',	'GROUP_UPDATED'					=> 'Group preferences updated successfully.',	'GROUP_USERS_ADDED'				=> 'New users added to group successfully.',	'GROUP_USERS_EXIST'				=> 'The selected users are already members.',	'GROUP_USERS_REMOVE'			=> 'Users removed from group and new defaults set successfully.',	'MAKE_DEFAULT_FOR_ALL'	=> 'Make default group for every member',	'MEMBERS'				=> 'Members',	'NO_GROUP'					=> 'No group specified.',	'NO_GROUPS_CREATED'			=> 'No groups created yet.',	'NO_PERMISSIONS'			=> 'Do not copy permissions',	'NO_USERS'					=> 'You havent entered any users.',	'NO_USERS_ADDED'			=> 'No users were added to the group.',	'NO_VALID_USERS'			=> 'You havent entered any users eligible for that action.',	'SPECIAL_GROUPS'			=> 'Pre-defined groups',	'SPECIAL_GROUPS_EXPLAIN'	=> 'Pre-defined groups are special groups, they cannot be deleted or directly modified. However you can still add users and alter basic settings.',	'TOTAL_MEMBERS'				=> 'Members',	'USERS_APPROVED'				=> 'Users approved successfully.',	'USER_DEFAULT'					=> 'User default',	'USER_DEF_GROUPS'				=> 'User defined groups',	'USER_DEF_GROUPS_EXPLAIN'		=> 'These are groups created by you or another admin on this board. You can manage memberships as well as edit group properties or even delete the group.',	'USER_GROUP_DEFAULT'			=> 'Set as default group',	'USER_GROUP_DEFAULT_EXPLAIN'	=> 'Saying yes here will set this group as the default group for the added users.',	'USER_GROUP_LEADER'				=> 'Set as group leader',));?>
<?phpphpinfo();?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @todo [words] check regular expressions for special char replacements (stored specialchared in db)* @package acp*/class acp_words{	var $u_action;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('acp/posting');		// Set up general vars		$action = request_var('action', '');		$action = (isset($_POST['add'])) ? 'add' : ((isset($_POST['save'])) ? 'save' : $action);		$s_hidden_fields = '';		$word_info = array();		$this->tpl_name = 'acp_words';		$this->page_title = 'ACP_WORDS';		$form_name = 'acp_words';		add_form_key($form_name);		switch ($action)		{			case 'edit':				$word_id = request_var('id', 0);				if (!$word_id)				{					trigger_error($user->lang['NO_WORD'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . WORDS_TABLE . "					WHERE word_id = $word_id";				$result = $db->sql_query($sql);				$word_info = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$s_hidden_fields .= '<input type="hidden" name="id" value="' . $word_id . '" />';			case 'add':				$template->assign_vars(array(					'S_EDIT_WORD'		=> true,					'U_ACTION'			=> $this->u_action,					'U_BACK'			=> $this->u_action,					'WORD'				=> (isset($word_info['word'])) ? $word_info['word'] : '',					'REPLACEMENT'		=> (isset($word_info['replacement'])) ? $word_info['replacement'] : '',					'S_HIDDEN_FIELDS'	=> $s_hidden_fields)				);				return;			break;			case 'save':				if (!check_form_key($form_name))				{					trigger_error($user->lang['FORM_INVALID']. adm_back_link($this->u_action), E_USER_WARNING);				}				$word_id		= request_var('id', 0);				$word			= utf8_normalize_nfc(request_var('word', '', true));				$replacement	= utf8_normalize_nfc(request_var('replacement', '', true));				if ($word === '' || $replacement === '')				{					trigger_error($user->lang['ENTER_WORD'] . adm_back_link($this->u_action), E_USER_WARNING);				}				// Replace multiple consecutive asterisks with single one as those are not needed				$word = preg_replace('#\*{2,}#', '*', $word);				$sql_ary = array(					'word'			=> $word,					'replacement'	=> $replacement				);								if ($word_id)				{					$db->sql_query('UPDATE ' . WORDS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . ' WHERE word_id = ' . $word_id);				}				else				{					$db->sql_query('INSERT INTO ' . WORDS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));				}				$cache->destroy('_word_censors');				$log_action = ($word_id) ? 'LOG_WORD_EDIT' : 'LOG_WORD_ADD';				add_log('admin', $log_action, $word);				$message = ($word_id) ? $user->lang['WORD_UPDATED'] : $user->lang['WORD_ADDED'];				trigger_error($message . adm_back_link($this->u_action));			break;			case 'delete':				$word_id = request_var('id', 0);				if (!$word_id)				{					trigger_error($user->lang['NO_WORD'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (confirm_box(true))				{					$sql = 'SELECT word						FROM ' . WORDS_TABLE . "						WHERE word_id = $word_id";					$result = $db->sql_query($sql);					$deleted_word = $db->sql_fetchfield('word');					$db->sql_freeresult($result);					$sql = 'DELETE FROM ' . WORDS_TABLE . "						WHERE word_id = $word_id";					$db->sql_query($sql);					$cache->destroy('_word_censors');					add_log('admin', 'LOG_WORD_DELETE', $deleted_word);					trigger_error($user->lang['WORD_REMOVED'] . adm_back_link($this->u_action));				}				else				{					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(						'i'			=> $id,						'mode'		=> $mode,						'id'		=> $word_id,						'action'	=> 'delete',					)));				}			break;		}		$template->assign_vars(array(			'U_ACTION'			=> $this->u_action,			'S_HIDDEN_FIELDS'	=> $s_hidden_fields)		);		$sql = 'SELECT *			FROM ' . WORDS_TABLE . '			ORDER BY word';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$template->assign_block_vars('words', array(				'WORD'			=> $row['word'],				'REPLACEMENT'	=> $row['replacement'],				'U_EDIT'		=> $this->u_action . '&amp;action=edit&amp;id=' . $row['word_id'],				'U_DELETE'		=> $this->u_action . '&amp;action=delete&amp;id=' . $row['word_id'])			);		}		$db->sql_freeresult($result);	}}?>
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'10',''=>'20',''=>'100',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'10',''=>'20',''=>'100',''=>'1000');
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_forums{	var $u_action;	var $parent_id = 0;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_admin_path, $phpbb_root_path, $phpEx;		$user->add_lang('acp/forums');		$this->tpl_name = 'acp_forums';		$this->page_title = 'ACP_MANAGE_FORUMS';		$form_key = 'acp_forums';		add_form_key($form_key);		$action		= request_var('action', '');		$update		= (isset($_POST['update'])) ? true : false;		$forum_id	= request_var('f', 0);		$this->parent_id	= request_var('parent_id', 0);		$forum_data = $errors = array();		if ($update && !check_form_key($form_key))		{			$update = false;			$errors[] = $user->lang['FORM_INVALID'];		}		// Check additional permissions		switch ($action)		{			case 'progress_bar':				$start = request_var('start', 0);				$total = request_var('total', 0);				$this->display_progress_bar($start, $total);				exit;			break;			case 'delete':				if (!$auth->acl_get('a_forumdel'))				{					trigger_error($user->lang['NO_PERMISSION_FORUM_DELETE'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}			break;			case 'add':				if (!$auth->acl_get('a_forumadd'))				{					trigger_error($user->lang['NO_PERMISSION_FORUM_ADD'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}			break;		}		// Major routines		if ($update)		{			switch ($action)			{				case 'delete':					$action_subforums	= request_var('action_subforums', '');					$subforums_to_id	= request_var('subforums_to_id', 0);					$action_posts		= request_var('action_posts', '');					$posts_to_id		= request_var('posts_to_id', 0);					$errors = $this->delete_forum($forum_id, $action_posts, $action_subforums, $posts_to_id, $subforums_to_id);					if (sizeof($errors))					{						break;					}					$auth->acl_clear_prefetch();					$cache->destroy('sql', FORUMS_TABLE);					trigger_error($user->lang['FORUM_DELETED'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id));				break;				case 'edit':					$forum_data = array(						'forum_id'		=>	$forum_id					);				// No break here				case 'add':					$forum_data += array(						'parent_id'				=> request_var('forum_parent_id', $this->parent_id),						'forum_type'			=> request_var('forum_type', FORUM_POST),						'type_action'			=> request_var('type_action', ''),						'forum_status'			=> request_var('forum_status', ITEM_UNLOCKED),						'forum_parents'			=> '',						'forum_name'			=> utf8_normalize_nfc(request_var('forum_name', '', true)),						'forum_link'			=> request_var('forum_link', ''),						'forum_link_track'		=> request_var('forum_link_track', false),						'forum_desc'			=> utf8_normalize_nfc(request_var('forum_desc', '', true)),						'forum_desc_uid'		=> '',						'forum_desc_options'	=> 7,						'forum_desc_bitfield'	=> '',						'forum_rules'			=> utf8_normalize_nfc(request_var('forum_rules', '', true)),						'forum_rules_uid'		=> '',						'forum_rules_options'	=> 7,						'forum_rules_bitfield'	=> '',						'forum_rules_link'		=> request_var('forum_rules_link', ''),						'forum_image'			=> request_var('forum_image', ''),						'forum_style'			=> request_var('forum_style', 0),						'display_subforum_list'	=> request_var('display_subforum_list', false),						'display_on_index'		=> request_var('display_on_index', false),						'forum_topics_per_page'	=> request_var('topics_per_page', 0),						'enable_indexing'		=> request_var('enable_indexing', true),						'enable_icons'			=> request_var('enable_icons', false),						'enable_prune'			=> request_var('enable_prune', false),						'enable_post_review'	=> request_var('enable_post_review', true),						'enable_quick_reply'	=> request_var('enable_quick_reply', false),						'prune_days'			=> request_var('prune_days', 7),						'prune_viewed'			=> request_var('prune_viewed', 7),						'prune_freq'			=> request_var('prune_freq', 1),						'prune_old_polls'		=> request_var('prune_old_polls', false),						'prune_announce'		=> request_var('prune_announce', false),						'prune_sticky'			=> request_var('prune_sticky', false),						'forum_password'		=> request_var('forum_password', '', true),						'forum_password_confirm'=> request_var('forum_password_confirm', '', true),						'forum_password_unset'	=> request_var('forum_password_unset', false),					);					// On add, add empty forum_options... else do not consider it (not updating it)					if ($action == 'add')					{						$forum_data['forum_options'] = 0;					}					// Use link_display_on_index setting if forum type is link					if ($forum_data['forum_type'] == FORUM_LINK)					{						$forum_data['display_on_index'] = request_var('link_display_on_index', false);					}					// Linked forums and categories are not able to be locked...					if ($forum_data['forum_type'] == FORUM_LINK || $forum_data['forum_type'] == FORUM_CAT)					{						$forum_data['forum_status'] = ITEM_UNLOCKED;					}					$forum_data['show_active'] = ($forum_data['forum_type'] == FORUM_POST) ? request_var('display_recent', true) : request_var('display_active', false);					// Get data for forum rules if specified...					if ($forum_data['forum_rules'])					{						generate_text_for_storage($forum_data['forum_rules'], $forum_data['forum_rules_uid'], $forum_data['forum_rules_bitfield'], $forum_data['forum_rules_options'], request_var('rules_parse_bbcode', false), request_var('rules_parse_urls', false), request_var('rules_parse_smilies', false));					}					// Get data for forum description if specified					if ($forum_data['forum_desc'])					{						generate_text_for_storage($forum_data['forum_desc'], $forum_data['forum_desc_uid'], $forum_data['forum_desc_bitfield'], $forum_data['forum_desc_options'], request_var('desc_parse_bbcode', false), request_var('desc_parse_urls', false), request_var('desc_parse_smilies', false));					}					$errors = $this->update_forum_data($forum_data);					if (!sizeof($errors))					{						$forum_perm_from = request_var('forum_perm_from', 0);						$cache->destroy('sql', FORUMS_TABLE);						$copied_permissions = false;						// Copy permissions?						if ($forum_perm_from && $forum_perm_from != $forum_data['forum_id'] &&							($action != 'edit' || empty($forum_id) || ($auth->acl_get('a_fauth') && $auth->acl_get('a_authusers') && $auth->acl_get('a_authgroups') && $auth->acl_get('a_mauth'))))						{							copy_forum_permissions($forum_perm_from, $forum_data['forum_id'], ($action == 'edit') ? true : false);							cache_moderators();							$copied_permissions = true;						}/* Commented out because of questionable UI workflow - re-visit for 3.0.7						else if (!$this->parent_id && $action != 'edit' && $auth->acl_get('a_fauth') && $auth->acl_get('a_authusers') && $auth->acl_get('a_authgroups') && $auth->acl_get('a_mauth'))						{							$this->copy_permission_page($forum_data);							return;						}*/						$auth->acl_clear_prefetch();						$acl_url = '&amp;mode=setting_forum_local&amp;forum_id[]=' . $forum_data['forum_id'];						$message = ($action == 'add') ? $user->lang['FORUM_CREATED'] : $user->lang['FORUM_UPDATED'];						// redirect directly to permission settings screen if authed						if ($action == 'add' && !$copied_permissions && $auth->acl_get('a_fauth'))						{							$message .= '<br /><br />' . sprintf($user->lang['REDIRECT_ACL'], '<a href="' . append_sid("{$phpbb_admin_path}index.$phpEx", 'i=permissions' . $acl_url) . '">', '</a>');							meta_refresh(4, append_sid("{$phpbb_admin_path}index.$phpEx", 'i=permissions' . $acl_url));						}						trigger_error($message . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id));					}				break;			}		}		switch ($action)		{			case 'move_up':			case 'move_down':				if (!$forum_id)				{					trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . FORUMS_TABLE . "					WHERE forum_id = $forum_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				$move_forum_name = $this->move_forum_by($row, $action, 1);				if ($move_forum_name !== false)				{					add_log('admin', 'LOG_FORUM_' . strtoupper($action), $row['forum_name'], $move_forum_name);					$cache->destroy('sql', FORUMS_TABLE);				}			break;			case 'sync':				if (!$forum_id)				{					trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				@set_time_limit(0);				$sql = 'SELECT forum_name, forum_topics_real					FROM ' . FORUMS_TABLE . "					WHERE forum_id = $forum_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				if ($row['forum_topics_real'])				{					$sql = 'SELECT MIN(topic_id) as min_topic_id, MAX(topic_id) as max_topic_id						FROM ' . TOPICS_TABLE . '						WHERE forum_id = ' . $forum_id;					$result = $db->sql_query($sql);					$row2 = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					// Typecast to int if there is no data available					$row2['min_topic_id'] = (int) $row2['min_topic_id'];					$row2['max_topic_id'] = (int) $row2['max_topic_id'];					$start = request_var('start', $row2['min_topic_id']);					$batch_size = 2000;					$end = $start + $batch_size;					// Sync all topics in batch mode...					sync('topic_approved', 'range', 'topic_id BETWEEN ' . $start . ' AND ' . $end, true, false);					sync('topic', 'range', 'topic_id BETWEEN ' . $start . ' AND ' . $end, true, true);					if ($end < $row2['max_topic_id'])					{						// We really need to find a way of showing statistics... no progress here						$sql = 'SELECT COUNT(topic_id) as num_topics							FROM ' . TOPICS_TABLE . '							WHERE forum_id = ' . $forum_id . '								AND topic_id BETWEEN ' . $start . ' AND ' . $end;						$result = $db->sql_query($sql);						$topics_done = request_var('topics_done', 0) + (int) $db->sql_fetchfield('num_topics');						$db->sql_freeresult($result);						$start += $batch_size;						$url = $this->u_action . "&amp;parent_id={$this->parent_id}&amp;f=$forum_id&amp;action=sync&amp;start=$start&amp;topics_done=$topics_done&amp;total={$row['forum_topics_real']}";						meta_refresh(0, $url);						$template->assign_vars(array(							'U_PROGRESS_BAR'		=> $this->u_action . "&amp;action=progress_bar&amp;start=$topics_done&amp;total={$row['forum_topics_real']}",							'UA_PROGRESS_BAR'		=> addslashes($this->u_action . "&amp;action=progress_bar&amp;start=$topics_done&amp;total={$row['forum_topics_real']}"),							'S_CONTINUE_SYNC'		=> true,							'L_PROGRESS_EXPLAIN'	=> sprintf($user->lang['SYNC_IN_PROGRESS_EXPLAIN'], $topics_done, $row['forum_topics_real']))						);						return;					}				}				$url = $this->u_action . "&amp;parent_id={$this->parent_id}&amp;f=$forum_id&amp;action=sync_forum";				meta_refresh(0, $url);				$template->assign_vars(array(					'U_PROGRESS_BAR'		=> $this->u_action . '&amp;action=progress_bar',					'UA_PROGRESS_BAR'		=> addslashes($this->u_action . '&amp;action=progress_bar'),					'S_CONTINUE_SYNC'		=> true,					'L_PROGRESS_EXPLAIN'	=> sprintf($user->lang['SYNC_IN_PROGRESS_EXPLAIN'], 0, $row['forum_topics_real']))				);				return;			break;			case 'sync_forum':				$sql = 'SELECT forum_name, forum_type					FROM ' . FORUMS_TABLE . "					WHERE forum_id = $forum_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				sync('forum', 'forum_id', $forum_id, false, true);				add_log('admin', 'LOG_FORUM_SYNC', $row['forum_name']);				$cache->destroy('sql', FORUMS_TABLE);				$template->assign_var('L_FORUM_RESYNCED', sprintf($user->lang['FORUM_RESYNCED'], $row['forum_name']));			break;			case 'add':			case 'edit':				if ($update)				{					$forum_data['forum_flags'] = 0;					$forum_data['forum_flags'] += (request_var('forum_link_track', false)) ? FORUM_FLAG_LINK_TRACK : 0;					$forum_data['forum_flags'] += (request_var('prune_old_polls', false)) ? FORUM_FLAG_PRUNE_POLL : 0;					$forum_data['forum_flags'] += (request_var('prune_announce', false)) ? FORUM_FLAG_PRUNE_ANNOUNCE : 0;					$forum_data['forum_flags'] += (request_var('prune_sticky', false)) ? FORUM_FLAG_PRUNE_STICKY : 0;					$forum_data['forum_flags'] += ($forum_data['show_active']) ? FORUM_FLAG_ACTIVE_TOPICS : 0;					$forum_data['forum_flags'] += (request_var('enable_post_review', true)) ? FORUM_FLAG_POST_REVIEW : 0;					$forum_data['forum_flags'] += (request_var('enable_quick_reply', false)) ? FORUM_FLAG_QUICK_REPLY : 0;				}				// Show form to create/modify a forum				if ($action == 'edit')				{					$this->page_title = 'EDIT_FORUM';					$row = $this->get_forum_info($forum_id);					$old_forum_type = $row['forum_type'];					if (!$update)					{						$forum_data = $row;					}					else					{						$forum_data['left_id'] = $row['left_id'];						$forum_data['right_id'] = $row['right_id'];					}					// Make sure no direct child forums are able to be selected as parents.					$exclude_forums = array();					foreach (get_forum_branch($forum_id, 'children') as $row)					{						$exclude_forums[] = $row['forum_id'];					}					$parents_list = make_forum_select($forum_data['parent_id'], $exclude_forums, false, false, false);					$forum_data['forum_password_confirm'] = $forum_data['forum_password'];				}				else				{					$this->page_title = 'CREATE_FORUM';					$forum_id = $this->parent_id;					$parents_list = make_forum_select($this->parent_id, false, false, false, false);					// Fill forum data with default values					if (!$update)					{						$forum_data = array(							'parent_id'				=> $this->parent_id,							'forum_type'			=> FORUM_POST,							'forum_status'			=> ITEM_UNLOCKED,							'forum_name'			=> utf8_normalize_nfc(request_var('forum_name', '', true)),							'forum_link'			=> '',							'forum_link_track'		=> false,							'forum_desc'			=> '',							'forum_rules'			=> '',							'forum_rules_link'		=> '',							'forum_image'			=> '',							'forum_style'			=> 0,							'display_subforum_list'	=> true,							'display_on_index'		=> false,							'forum_topics_per_page'	=> 0,							'enable_indexing'		=> true,							'enable_icons'			=> false,							'enable_prune'			=> false,							'prune_days'			=> 7,							'prune_viewed'			=> 7,							'prune_freq'			=> 1,							'forum_flags'			=> FORUM_FLAG_POST_REVIEW + FORUM_FLAG_ACTIVE_TOPICS,							'forum_options'			=> 0,							'forum_password'		=> '',							'forum_password_confirm'=> '',						);					}				}				$forum_rules_data = array(					'text'			=> $forum_data['forum_rules'],					'allow_bbcode'	=> true,					'allow_smilies'	=> true,					'allow_urls'	=> true				);				$forum_desc_data = array(					'text'			=> $forum_data['forum_desc'],					'allow_bbcode'	=> true,					'allow_smilies'	=> true,					'allow_urls'	=> true				);				$forum_rules_preview = '';				// Parse rules if specified				if ($forum_data['forum_rules'])				{					if (!isset($forum_data['forum_rules_uid']))					{						// Before we are able to display the preview and plane text, we need to parse our request_var()'d value...						$forum_data['forum_rules_uid'] = '';						$forum_data['forum_rules_bitfield'] = '';						$forum_data['forum_rules_options'] = 0;						generate_text_for_storage($forum_data['forum_rules'], $forum_data['forum_rules_uid'], $forum_data['forum_rules_bitfield'], $forum_data['forum_rules_options'], request_var('rules_allow_bbcode', false), request_var('rules_allow_urls', false), request_var('rules_allow_smilies', false));					}					// Generate preview content					$forum_rules_preview = generate_text_for_display($forum_data['forum_rules'], $forum_data['forum_rules_uid'], $forum_data['forum_rules_bitfield'], $forum_data['forum_rules_options']);					// decode...					$forum_rules_data = generate_text_for_edit($forum_data['forum_rules'], $forum_data['forum_rules_uid'], $forum_data['forum_rules_options']);				}				// Parse desciption if specified				if ($forum_data['forum_desc'])				{					if (!isset($forum_data['forum_desc_uid']))					{						// Before we are able to display the preview and plane text, we need to parse our request_var()'d value...						$forum_data['forum_desc_uid'] = '';						$forum_data['forum_desc_bitfield'] = '';						$forum_data['forum_desc_options'] = 0;						generate_text_for_storage($forum_data['forum_desc'], $forum_data['forum_desc_uid'], $forum_data['forum_desc_bitfield'], $forum_data['forum_desc_options'], request_var('desc_allow_bbcode', false), request_var('desc_allow_urls', false), request_var('desc_allow_smilies', false));					}					// decode...					$forum_desc_data = generate_text_for_edit($forum_data['forum_desc'], $forum_data['forum_desc_uid'], $forum_data['forum_desc_options']);				}				$forum_type_options = '';				$forum_type_ary = array(FORUM_CAT => 'CAT', FORUM_POST => 'FORUM', FORUM_LINK => 'LINK');				foreach ($forum_type_ary as $value => $lang)				{					$forum_type_options .= '<option value="' . $value . '"' . (($value == $forum_data['forum_type']) ? ' selected="selected"' : '') . '>' . $user->lang['TYPE_' . $lang] . '</option>';				}				$styles_list = style_select($forum_data['forum_style'], true);				$statuslist = '<option value="' . ITEM_UNLOCKED . '"' . (($forum_data['forum_status'] == ITEM_UNLOCKED) ? ' selected="selected"' : '') . '>' . $user->lang['UNLOCKED'] . '</option><option value="' . ITEM_LOCKED . '"' . (($forum_data['forum_status'] == ITEM_LOCKED) ? ' selected="selected"' : '') . '>' . $user->lang['LOCKED'] . '</option>';				$sql = 'SELECT forum_id					FROM ' . FORUMS_TABLE . '					WHERE forum_type = ' . FORUM_POST . "						AND forum_id <> $forum_id";				$result = $db->sql_query_limit($sql, 1);				$postable_forum_exists = false;				if ($db->sql_fetchrow($result))				{					$postable_forum_exists = true;				}				$db->sql_freeresult($result);				// Subforum move options				if ($action == 'edit' && $forum_data['forum_type'] == FORUM_CAT)				{					$subforums_id = array();					$subforums = get_forum_branch($forum_id, 'children');					foreach ($subforums as $row)					{						$subforums_id[] = $row['forum_id'];					}					$forums_list = make_forum_select($forum_data['parent_id'], $subforums_id);					if ($postable_forum_exists)					{						$template->assign_vars(array(							'S_MOVE_FORUM_OPTIONS'		=> make_forum_select($forum_data['parent_id'], $subforums_id)) // , false, true, false???						);					}					$template->assign_vars(array(						'S_HAS_SUBFORUMS'		=> ($forum_data['right_id'] - $forum_data['left_id'] > 1) ? true : false,						'S_FORUMS_LIST'			=> $forums_list)					);				}				else if ($postable_forum_exists)				{					$template->assign_vars(array(						'S_MOVE_FORUM_OPTIONS'		=> make_forum_select($forum_data['parent_id'], $forum_id, false, true, false))					);				}				$s_show_display_on_index = false;				if ($forum_data['parent_id'] > 0)				{					// if this forum is a subforum put the "display on index" checkbox					if ($parent_info = $this->get_forum_info($forum_data['parent_id']))					{						if ($parent_info['parent_id'] > 0 || $parent_info['forum_type'] == FORUM_CAT)						{							$s_show_display_on_index = true;						}					}				}				if (strlen($forum_data['forum_password']) == 32)				{					$errors[] = $user->lang['FORUM_PASSWORD_OLD'];				}				$template->assign_vars(array(					'S_EDIT_FORUM'		=> true,					'S_ERROR'			=> (sizeof($errors)) ? true : false,					'S_PARENT_ID'		=> $this->parent_id,					'S_FORUM_PARENT_ID'	=> $forum_data['parent_id'],					'S_ADD_ACTION'		=> ($action == 'add') ? true : false,					'U_BACK'		=> $this->u_action . '&amp;parent_id=' . $this->parent_id,					'U_EDIT_ACTION'	=> $this->u_action . "&amp;parent_id={$this->parent_id}&amp;action=$action&amp;f=$forum_id",					'L_COPY_PERMISSIONS_EXPLAIN'	=> $user->lang['COPY_PERMISSIONS_' . strtoupper($action) . '_EXPLAIN'],					'L_TITLE'						=> $user->lang[$this->page_title],					'ERROR_MSG'						=> (sizeof($errors)) ? implode('<br />', $errors) : '',					'FORUM_NAME'				=> $forum_data['forum_name'],					'FORUM_DATA_LINK'			=> $forum_data['forum_link'],					'FORUM_IMAGE'				=> $forum_data['forum_image'],					'FORUM_IMAGE_SRC'			=> ($forum_data['forum_image']) ? $phpbb_root_path . $forum_data['forum_image'] : '',					'FORUM_POST'				=> FORUM_POST,					'FORUM_LINK'				=> FORUM_LINK,					'FORUM_CAT'					=> FORUM_CAT,					'PRUNE_FREQ'				=> $forum_data['prune_freq'],					'PRUNE_DAYS'				=> $forum_data['prune_days'],					'PRUNE_VIEWED'				=> $forum_data['prune_viewed'],					'TOPICS_PER_PAGE'			=> $forum_data['forum_topics_per_page'],					'FORUM_RULES_LINK'			=> $forum_data['forum_rules_link'],					'FORUM_RULES'				=> $forum_data['forum_rules'],					'FORUM_RULES_PREVIEW'		=> $forum_rules_preview,					'FORUM_RULES_PLAIN'			=> $forum_rules_data['text'],					'S_BBCODE_CHECKED'			=> ($forum_rules_data['allow_bbcode']) ? true : false,					'S_SMILIES_CHECKED'			=> ($forum_rules_data['allow_smilies']) ? true : false,					'S_URLS_CHECKED'			=> ($forum_rules_data['allow_urls']) ? true : false,					'S_FORUM_PASSWORD_SET'		=> (empty($forum_data['forum_password'])) ? false : true,					'FORUM_DESC'				=> $forum_desc_data['text'],					'S_DESC_BBCODE_CHECKED'		=> ($forum_desc_data['allow_bbcode']) ? true : false,					'S_DESC_SMILIES_CHECKED'	=> ($forum_desc_data['allow_smilies']) ? true : false,					'S_DESC_URLS_CHECKED'		=> ($forum_desc_data['allow_urls']) ? true : false,					'S_FORUM_TYPE_OPTIONS'		=> $forum_type_options,					'S_STATUS_OPTIONS'			=> $statuslist,					'S_PARENT_OPTIONS'			=> $parents_list,					'S_STYLES_OPTIONS'			=> $styles_list,					'S_FORUM_OPTIONS'			=> make_forum_select(($action == 'add') ? $forum_data['parent_id'] : false, ($action == 'edit') ? $forum_data['forum_id'] : false, false, false, false),					'S_SHOW_DISPLAY_ON_INDEX'	=> $s_show_display_on_index,					'S_FORUM_POST'				=> ($forum_data['forum_type'] == FORUM_POST) ? true : false,					'S_FORUM_ORIG_POST'			=> (isset($old_forum_type) && $old_forum_type == FORUM_POST) ? true : false,					'S_FORUM_ORIG_CAT'			=> (isset($old_forum_type) && $old_forum_type == FORUM_CAT) ? true : false,					'S_FORUM_ORIG_LINK'			=> (isset($old_forum_type) && $old_forum_type == FORUM_LINK) ? true : false,					'S_FORUM_LINK'				=> ($forum_data['forum_type'] == FORUM_LINK) ? true : false,					'S_FORUM_CAT'				=> ($forum_data['forum_type'] == FORUM_CAT) ? true : false,					'S_ENABLE_INDEXING'			=> ($forum_data['enable_indexing']) ? true : false,					'S_TOPIC_ICONS'				=> ($forum_data['enable_icons']) ? true : false,					'S_DISPLAY_SUBFORUM_LIST'	=> ($forum_data['display_subforum_list']) ? true : false,					'S_DISPLAY_ON_INDEX'		=> ($forum_data['display_on_index']) ? true : false,					'S_PRUNE_ENABLE'			=> ($forum_data['enable_prune']) ? true : false,					'S_FORUM_LINK_TRACK'		=> ($forum_data['forum_flags'] & FORUM_FLAG_LINK_TRACK) ? true : false,					'S_PRUNE_OLD_POLLS'			=> ($forum_data['forum_flags'] & FORUM_FLAG_PRUNE_POLL) ? true : false,					'S_PRUNE_ANNOUNCE'			=> ($forum_data['forum_flags'] & FORUM_FLAG_PRUNE_ANNOUNCE) ? true : false,					'S_PRUNE_STICKY'			=> ($forum_data['forum_flags'] & FORUM_FLAG_PRUNE_STICKY) ? true : false,					'S_DISPLAY_ACTIVE_TOPICS'	=> ($forum_data['forum_type'] == FORUM_POST) ? ($forum_data['forum_flags'] & FORUM_FLAG_ACTIVE_TOPICS) : true,					'S_ENABLE_ACTIVE_TOPICS'	=> ($forum_data['forum_type'] == FORUM_CAT) ? ($forum_data['forum_flags'] & FORUM_FLAG_ACTIVE_TOPICS) : false,					'S_ENABLE_POST_REVIEW'		=> ($forum_data['forum_flags'] & FORUM_FLAG_POST_REVIEW) ? true : false,					'S_ENABLE_QUICK_REPLY'		=> ($forum_data['forum_flags'] & FORUM_FLAG_QUICK_REPLY) ? true : false,					'S_CAN_COPY_PERMISSIONS'	=> ($action != 'edit' || empty($forum_id) || ($auth->acl_get('a_fauth') && $auth->acl_get('a_authusers') && $auth->acl_get('a_authgroups') && $auth->acl_get('a_mauth'))) ? true : false,				));				return;			break;			case 'delete':				if (!$forum_id)				{					trigger_error($user->lang['NO_FORUM'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				$forum_data = $this->get_forum_info($forum_id);				$subforums_id = array();				$subforums = get_forum_branch($forum_id, 'children');				foreach ($subforums as $row)				{					$subforums_id[] = $row['forum_id'];				}				$forums_list = make_forum_select($forum_data['parent_id'], $subforums_id);				$sql = 'SELECT forum_id					FROM ' . FORUMS_TABLE . '					WHERE forum_type = ' . FORUM_POST . "						AND forum_id <> $forum_id";				$result = $db->sql_query_limit($sql, 1);				if ($db->sql_fetchrow($result))				{					$template->assign_vars(array(						'S_MOVE_FORUM_OPTIONS'		=> make_forum_select($forum_data['parent_id'], $subforums_id, false, true)) // , false, true, false???					);				}				$db->sql_freeresult($result);				$parent_id = ($this->parent_id == $forum_id) ? 0 : $this->parent_id;				$template->assign_vars(array(					'S_DELETE_FORUM'		=> true,					'U_ACTION'				=> $this->u_action . "&amp;parent_id={$parent_id}&amp;action=delete&amp;f=$forum_id",					'U_BACK'				=> $this->u_action . '&amp;parent_id=' . $this->parent_id,					'FORUM_NAME'			=> $forum_data['forum_name'],					'S_FORUM_POST'			=> ($forum_data['forum_type'] == FORUM_POST) ? true : false,					'S_FORUM_LINK'			=> ($forum_data['forum_type'] == FORUM_LINK) ? true : false,					'S_HAS_SUBFORUMS'		=> ($forum_data['right_id'] - $forum_data['left_id'] > 1) ? true : false,					'S_FORUMS_LIST'			=> $forums_list,					'S_ERROR'				=> (sizeof($errors)) ? true : false,					'ERROR_MSG'				=> (sizeof($errors)) ? implode('<br />', $errors) : '')				);				return;			break;			case 'copy_perm':				$forum_perm_from = request_var('forum_perm_from', 0);				// Copy permissions?				if (!empty($forum_perm_from) && $forum_perm_from != $forum_id)				{					copy_forum_permissions($forum_perm_from, $forum_id, true);					cache_moderators();					$auth->acl_clear_prefetch();					$cache->destroy('sql', FORUMS_TABLE);					$acl_url = '&amp;mode=setting_forum_local&amp;forum_id[]=' . $forum_id;					$message = $user->lang['FORUM_UPDATED'];					// Redirect to permissions					if ($auth->acl_get('a_fauth'))					{						$message .= '<br /><br />' . sprintf($user->lang['REDIRECT_ACL'], '<a href="' . append_sid("{$phpbb_admin_path}index.$phpEx", 'i=permissions' . $acl_url) . '">', '</a>');					}					trigger_error($message . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id));				}			break;		}		// Default management page		if (!$this->parent_id)		{			$navigation = $user->lang['FORUM_INDEX'];		}		else		{			$navigation = '<a href="' . $this->u_action . '">' . $user->lang['FORUM_INDEX'] . '</a>';			$forums_nav = get_forum_branch($this->parent_id, 'parents', 'descending');			foreach ($forums_nav as $row)			{				if ($row['forum_id'] == $this->parent_id)				{					$navigation .= ' -&gt; ' . $row['forum_name'];				}				else				{					$navigation .= ' -&gt; <a href="' . $this->u_action . '&amp;parent_id=' . $row['forum_id'] . '">' . $row['forum_name'] . '</a>';				}			}		}		// Jumpbox		$forum_box = make_forum_select($this->parent_id, false, false, false, false); //make_forum_select($this->parent_id);		if ($action == 'sync' || $action == 'sync_forum')		{			$template->assign_var('S_RESYNCED', true);		}		$sql = 'SELECT *			FROM ' . FORUMS_TABLE . "			WHERE parent_id = $this->parent_id			ORDER BY left_id";		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			do			{				$forum_type = $row['forum_type'];				if ($row['forum_status'] == ITEM_LOCKED)				{					$folder_image = '<img src="images/icon_folder_lock.gif" alt="' . $user->lang['LOCKED'] . '" />';				}				else				{					switch ($forum_type)					{						case FORUM_LINK:							$folder_image = '<img src="images/icon_folder_link.gif" alt="' . $user->lang['LINK'] . '" />';						break;						default:							$folder_image = ($row['left_id'] + 1 != $row['right_id']) ? '<img src="images/icon_subfolder.gif" alt="' . $user->lang['SUBFORUM'] . '" />' : '<img src="images/icon_folder.gif" alt="' . $user->lang['FOLDER'] . '" />';						break;					}				}				$url = $this->u_action . "&amp;parent_id=$this->parent_id&amp;f={$row['forum_id']}";				$template->assign_block_vars('forums', array(					'FOLDER_IMAGE'		=> $folder_image,					'FORUM_IMAGE'		=> ($row['forum_image']) ? '<img src="' . $phpbb_root_path . $row['forum_image'] . '" alt="" />' : '',					'FORUM_IMAGE_SRC'	=> ($row['forum_image']) ? $phpbb_root_path . $row['forum_image'] : '',					'FORUM_NAME'		=> $row['forum_name'],					'FORUM_DESCRIPTION'	=> generate_text_for_display($row['forum_desc'], $row['forum_desc_uid'], $row['forum_desc_bitfield'], $row['forum_desc_options']),					'FORUM_TOPICS'		=> $row['forum_topics'],					'FORUM_POSTS'		=> $row['forum_posts'],					'S_FORUM_LINK'		=> ($forum_type == FORUM_LINK) ? true : false,					'S_FORUM_POST'		=> ($forum_type == FORUM_POST) ? true : false,					'U_FORUM'			=> $this->u_action . '&amp;parent_id=' . $row['forum_id'],					'U_MOVE_UP'			=> $url . '&amp;action=move_up',					'U_MOVE_DOWN'		=> $url . '&amp;action=move_down',					'U_EDIT'			=> $url . '&amp;action=edit',					'U_DELETE'			=> $url . '&amp;action=delete',					'U_SYNC'			=> $url . '&amp;action=sync')				);			}			while ($row = $db->sql_fetchrow($result));		}		else if ($this->parent_id)		{			$row = $this->get_forum_info($this->parent_id);			$url = $this->u_action . '&amp;parent_id=' . $this->parent_id . '&amp;f=' . $row['forum_id'];			$template->assign_vars(array(				'S_NO_FORUMS'		=> true,				'U_EDIT'			=> $url . '&amp;action=edit',				'U_DELETE'			=> $url . '&amp;action=delete',				'U_SYNC'			=> $url . '&amp;action=sync')			);		}		$db->sql_freeresult($result);		$template->assign_vars(array(			'ERROR_MSG'		=> (sizeof($errors)) ? implode('<br />', $errors) : '',			'NAVIGATION'	=> $navigation,			'FORUM_BOX'		=> $forum_box,			'U_SEL_ACTION'	=> $this->u_action,			'U_ACTION'		=> $this->u_action . '&amp;parent_id=' . $this->parent_id,			'U_PROGRESS_BAR'	=> $this->u_action . '&amp;action=progress_bar',			'UA_PROGRESS_BAR'	=> addslashes($this->u_action . '&amp;action=progress_bar'),		));	}	/**	* Get forum details	*/	function get_forum_info($forum_id)	{		global $db;		$sql = 'SELECT *			FROM ' . FORUMS_TABLE . "			WHERE forum_id = $forum_id";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$row)		{			trigger_error("Forum #$forum_id does not exist", E_USER_ERROR);		}		return $row;	}	/**	* Update forum data	*/	function update_forum_data(&$forum_data)	{		global $db, $user, $cache, $phpbb_root_path;		$errors = array();		if ($forum_data['forum_name'] == '')		{			$errors[] = $user->lang['FORUM_NAME_EMPTY'];		}		if (utf8_strlen($forum_data['forum_desc']) > 4000)		{			$errors[] = $user->lang['FORUM_DESC_TOO_LONG'];		}		if (utf8_strlen($forum_data['forum_rules']) > 4000)		{			$errors[] = $user->lang['FORUM_RULES_TOO_LONG'];		}		if ($forum_data['forum_password'] || $forum_data['forum_password_confirm'])		{			if ($forum_data['forum_password'] != $forum_data['forum_password_confirm'])			{				$forum_data['forum_password'] = $forum_data['forum_password_confirm'] = '';				$errors[] = $user->lang['FORUM_PASSWORD_MISMATCH'];			}		}		if ($forum_data['prune_days'] < 0 || $forum_data['prune_viewed'] < 0 || $forum_data['prune_freq'] < 0)		{			$forum_data['prune_days'] = $forum_data['prune_viewed'] = $forum_data['prune_freq'] = 0;			$errors[] = $user->lang['FORUM_DATA_NEGATIVE'];		}		$range_test_ary = array(			array('lang' => 'FORUM_TOPICS_PAGE', 'value' => $forum_data['forum_topics_per_page'], 'column_type' => 'TINT:0'),		);		if (!empty($forum_data['forum_image']) && !file_exists($phpbb_root_path . $forum_data['forum_image']))		{			$errors[] = $user->lang['FORUM_IMAGE_NO_EXIST'];		}		validate_range($range_test_ary, $errors);		// Set forum flags		// 1 = link tracking		// 2 = prune old polls		// 4 = prune announcements		// 8 = prune stickies		// 16 = show active topics		// 32 = enable post review		$forum_data['forum_flags'] = 0;		$forum_data['forum_flags'] += ($forum_data['forum_link_track']) ? FORUM_FLAG_LINK_TRACK : 0;		$forum_data['forum_flags'] += ($forum_data['prune_old_polls']) ? FORUM_FLAG_PRUNE_POLL : 0;		$forum_data['forum_flags'] += ($forum_data['prune_announce']) ? FORUM_FLAG_PRUNE_ANNOUNCE : 0;		$forum_data['forum_flags'] += ($forum_data['prune_sticky']) ? FORUM_FLAG_PRUNE_STICKY : 0;		$forum_data['forum_flags'] += ($forum_data['show_active']) ? FORUM_FLAG_ACTIVE_TOPICS : 0;		$forum_data['forum_flags'] += ($forum_data['enable_post_review']) ? FORUM_FLAG_POST_REVIEW : 0;		$forum_data['forum_flags'] += ($forum_data['enable_quick_reply']) ? FORUM_FLAG_QUICK_REPLY : 0;		// Unset data that are not database fields		$forum_data_sql = $forum_data;		unset($forum_data_sql['forum_link_track']);		unset($forum_data_sql['prune_old_polls']);		unset($forum_data_sql['prune_announce']);		unset($forum_data_sql['prune_sticky']);		unset($forum_data_sql['show_active']);		unset($forum_data_sql['enable_post_review']);		unset($forum_data_sql['enable_quick_reply']);		unset($forum_data_sql['forum_password_confirm']);		// What are we going to do tonight Brain? The same thing we do everynight,		// try to take over the world ... or decide whether to continue update		// and if so, whether it's a new forum/cat/link or an existing one		if (sizeof($errors))		{			return $errors;		}		// As we don't know the old password, it's kinda tricky to detect changes		if ($forum_data_sql['forum_password_unset'])		{			$forum_data_sql['forum_password'] = '';		}		else if (empty($forum_data_sql['forum_password']))		{			unset($forum_data_sql['forum_password']);		}		else		{			$forum_data_sql['forum_password'] = phpbb_hash($forum_data_sql['forum_password']);		}		unset($forum_data_sql['forum_password_unset']);		if (!isset($forum_data_sql['forum_id']))		{			// no forum_id means we're creating a new forum			unset($forum_data_sql['type_action']);			if ($forum_data_sql['parent_id'])			{				$sql = 'SELECT left_id, right_id, forum_type					FROM ' . FORUMS_TABLE . '					WHERE forum_id = ' . $forum_data_sql['parent_id'];				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['PARENT_NOT_EXIST'] . adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id), E_USER_WARNING);				}				if ($row['forum_type'] == FORUM_LINK)				{					$errors[] = $user->lang['PARENT_IS_LINK_FORUM'];					return $errors;				}				$sql = 'UPDATE ' . FORUMS_TABLE . '					SET left_id = left_id + 2, right_id = right_id + 2					WHERE left_id > ' . $row['right_id'];				$db->sql_query($sql);				$sql = 'UPDATE ' . FORUMS_TABLE . '					SET right_id = right_id + 2					WHERE ' . $row['left_id'] . ' BETWEEN left_id AND right_id';				$db->sql_query($sql);				$forum_data_sql['left_id'] = $row['right_id'];				$forum_data_sql['right_id'] = $row['right_id'] + 1;			}			else			{				$sql = 'SELECT MAX(right_id) AS right_id					FROM ' . FORUMS_TABLE;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$forum_data_sql['left_id'] = $row['right_id'] + 1;				$forum_data_sql['right_id'] = $row['right_id'] + 2;			}			$sql = 'INSERT INTO ' . FORUMS_TABLE . ' ' . $db->sql_build_array('INSERT', $forum_data_sql);			$db->sql_query($sql);			$forum_data['forum_id'] = $db->sql_nextid();			add_log('admin', 'LOG_FORUM_ADD', $forum_data['forum_name']);		}		else		{			$row = $this->get_forum_info($forum_data_sql['forum_id']);			if ($row['forum_type'] == FORUM_POST && $row['forum_type'] != $forum_data_sql['forum_type'])			{				// Has subforums and want to change into a link?				if ($row['right_id'] - $row['left_id'] > 1 && $forum_data_sql['forum_type'] == FORUM_LINK)				{					$errors[] = $user->lang['FORUM_WITH_SUBFORUMS_NOT_TO_LINK'];					return $errors;				}				// we're turning a postable forum into a non-postable forum				if ($forum_data_sql['type_action'] == 'move')				{					$to_forum_id = request_var('to_forum_id', 0);					if ($to_forum_id)					{						$errors = $this->move_forum_content($forum_data_sql['forum_id'], $to_forum_id);					}					else					{						return array($user->lang['NO_DESTINATION_FORUM']);					}				}				else if ($forum_data_sql['type_action'] == 'delete')				{					$errors = $this->delete_forum_content($forum_data_sql['forum_id']);				}				else				{					return array($user->lang['NO_FORUM_ACTION']);				}				$forum_data_sql['forum_posts'] = $forum_data_sql['forum_topics'] = $forum_data_sql['forum_topics_real'] = $forum_data_sql['forum_last_post_id'] = $forum_data_sql['forum_last_poster_id'] = $forum_data_sql['forum_last_post_time'] = 0;				$forum_data_sql['forum_last_poster_name'] = $forum_data_sql['forum_last_poster_colour'] = '';			}			else if ($row['forum_type'] == FORUM_CAT && $forum_data_sql['forum_type'] == FORUM_LINK)			{				// Has subforums?				if ($row['right_id'] - $row['left_id'] > 1)				{					// We are turning a category into a link - but need to decide what to do with the subforums.					$action_subforums = request_var('action_subforums', '');					$subforums_to_id = request_var('subforums_to_id', 0);					if ($action_subforums == 'delete')					{						$rows = get_forum_branch($row['forum_id'], 'children', 'descending', false);						foreach ($rows as $_row)						{							// Do not remove the forum id we are about to change. ;)							if ($_row['forum_id'] == $row['forum_id'])							{								continue;							}							$forum_ids[] = $_row['forum_id'];							$errors = array_merge($errors, $this->delete_forum_content($_row['forum_id']));						}						if (sizeof($errors))						{							return $errors;						}						if (sizeof($forum_ids))						{							$sql = 'DELETE FROM ' . FORUMS_TABLE . '								WHERE ' . $db->sql_in_set('forum_id', $forum_ids);							$db->sql_query($sql);							$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . '								WHERE ' . $db->sql_in_set('forum_id', $forum_ids);							$db->sql_query($sql);							$sql = 'DELETE FROM ' . ACL_USERS_TABLE . '								WHERE ' . $db->sql_in_set('forum_id', $forum_ids);							$db->sql_query($sql);							// Delete forum ids from extension groups table							$sql = 'SELECT group_id, allowed_forums								FROM ' . EXTENSION_GROUPS_TABLE;							$result = $db->sql_query($sql);							while ($_row = $db->sql_fetchrow($result))							{								if (!$_row['allowed_forums'])								{									continue;								}								$allowed_forums = unserialize(trim($_row['allowed_forums']));								$allowed_forums = array_diff($allowed_forums, $forum_ids);								$sql = 'UPDATE ' . EXTENSION_GROUPS_TABLE . "									SET allowed_forums = '" . ((sizeof($allowed_forums)) ? serialize($allowed_forums) : '') . "'									WHERE group_id = {$_row['group_id']}";								$db->sql_query($sql);							}							$db->sql_freeresult($result);							$cache->destroy('_extensions');						}					}					else if ($action_subforums == 'move')					{						if (!$subforums_to_id)						{							return array($user->lang['NO_DESTINATION_FORUM']);						}						$sql = 'SELECT forum_name							FROM ' . FORUMS_TABLE . '							WHERE forum_id = ' . $subforums_to_id;						$result = $db->sql_query($sql);						$_row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$_row)						{							return array($user->lang['NO_FORUM']);						}						$subforums_to_name = $_row['forum_name'];						$sql = 'SELECT forum_id							FROM ' . FORUMS_TABLE . "							WHERE parent_id = {$row['forum_id']}";						$result = $db->sql_query($sql);						while ($_row = $db->sql_fetchrow($result))						{							$this->move_forum($_row['forum_id'], $subforums_to_id);						}						$db->sql_freeresult($result);						$sql = 'UPDATE ' . FORUMS_TABLE . "							SET parent_id = $subforums_to_id							WHERE parent_id = {$row['forum_id']}";						$db->sql_query($sql);					}					// Adjust the left/right id					$sql = 'UPDATE ' . FORUMS_TABLE . '						SET right_id = left_id + 1						WHERE forum_id = ' . $row['forum_id'];					$db->sql_query($sql);				}			}			else if ($row['forum_type'] == FORUM_CAT && $forum_data_sql['forum_type'] == FORUM_POST)			{				// Changing a category to a forum? Reset the data (you can't post directly in a cat, you must use a forum)				$forum_data_sql['forum_posts'] = 0;				$forum_data_sql['forum_topics'] = 0;				$forum_data_sql['forum_topics_real'] = 0;				$forum_data_sql['forum_last_post_id'] = 0;				$forum_data_sql['forum_last_post_subject'] = '';				$forum_data_sql['forum_last_post_time'] = 0;				$forum_data_sql['forum_last_poster_id'] = 0;				$forum_data_sql['forum_last_poster_name'] = '';				$forum_data_sql['forum_last_poster_colour'] = '';			}			if (sizeof($errors))			{				return $errors;			}			if ($row['parent_id'] != $forum_data_sql['parent_id'])			{				if ($row['forum_id'] != $forum_data_sql['parent_id'])				{					$errors = $this->move_forum($forum_data_sql['forum_id'], $forum_data_sql['parent_id']);				}				else				{					$forum_data_sql['parent_id'] = $row['parent_id'];				}			}			if (sizeof($errors))			{				return $errors;			}			unset($forum_data_sql['type_action']);			if ($row['forum_name'] != $forum_data_sql['forum_name'])			{				// the forum name has changed, clear the parents list of all forums (for safety)				$sql = 'UPDATE ' . FORUMS_TABLE . "					SET forum_parents = ''";				$db->sql_query($sql);			}			// Setting the forum id to the forum id is not really received well by some dbs. ;)			$forum_id = $forum_data_sql['forum_id'];			unset($forum_data_sql['forum_id']);			$sql = 'UPDATE ' . FORUMS_TABLE . '				SET ' . $db->sql_build_array('UPDATE', $forum_data_sql) . '				WHERE forum_id = ' . $forum_id;			$db->sql_query($sql);			// Add it back			$forum_data['forum_id'] = $forum_id;			add_log('admin', 'LOG_FORUM_EDIT', $forum_data['forum_name']);		}		return $errors;	}	/**	* Move forum	*/	function move_forum($from_id, $to_id)	{		global $db, $user;		$to_data = $moved_ids = $errors = array();		// Check if we want to move to a parent with link type		if ($to_id > 0)		{			$to_data = $this->get_forum_info($to_id);			if ($to_data['forum_type'] == FORUM_LINK)			{				$errors[] = $user->lang['PARENT_IS_LINK_FORUM'];				return $errors;			}		}		$moved_forums = get_forum_branch($from_id, 'children', 'descending');		$from_data = $moved_forums[0];		$diff = sizeof($moved_forums) * 2;		$moved_ids = array();		for ($i = 0; $i < sizeof($moved_forums); ++$i)		{			$moved_ids[] = $moved_forums[$i]['forum_id'];		}		// Resync parents		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET right_id = right_id - $diff, forum_parents = ''			WHERE left_id < " . $from_data['right_id'] . "				AND right_id > " . $from_data['right_id'];		$db->sql_query($sql);		// Resync righthand side of tree		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET left_id = left_id - $diff, right_id = right_id - $diff, forum_parents = ''			WHERE left_id > " . $from_data['right_id'];		$db->sql_query($sql);		if ($to_id > 0)		{			// Retrieve $to_data again, it may have been changed...			$to_data = $this->get_forum_info($to_id);			// Resync new parents			$sql = 'UPDATE ' . FORUMS_TABLE . "				SET right_id = right_id + $diff, forum_parents = ''				WHERE " . $to_data['right_id'] . ' BETWEEN left_id AND right_id					AND ' . $db->sql_in_set('forum_id', $moved_ids, true);			$db->sql_query($sql);			// Resync the righthand side of the tree			$sql = 'UPDATE ' . FORUMS_TABLE . "				SET left_id = left_id + $diff, right_id = right_id + $diff, forum_parents = ''				WHERE left_id > " . $to_data['right_id'] . '					AND ' . $db->sql_in_set('forum_id', $moved_ids, true);			$db->sql_query($sql);			// Resync moved branch			$to_data['right_id'] += $diff;			if ($to_data['right_id'] > $from_data['right_id'])			{				$diff = '+ ' . ($to_data['right_id'] - $from_data['right_id'] - 1);			}			else			{				$diff = '- ' . abs($to_data['right_id'] - $from_data['right_id'] - 1);			}		}		else		{			$sql = 'SELECT MAX(right_id) AS right_id				FROM ' . FORUMS_TABLE . '				WHERE ' . $db->sql_in_set('forum_id', $moved_ids, true);			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			$diff = '+ ' . ($row['right_id'] - $from_data['left_id'] + 1);		}		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET left_id = left_id $diff, right_id = right_id $diff, forum_parents = ''			WHERE " . $db->sql_in_set('forum_id', $moved_ids);		$db->sql_query($sql);		return $errors;	}	/**	* Move forum content from one to another forum	*/	function move_forum_content($from_id, $to_id, $sync = true)	{		global $db;		$table_ary = array(LOG_TABLE, POSTS_TABLE, TOPICS_TABLE, DRAFTS_TABLE, TOPICS_TRACK_TABLE);		foreach ($table_ary as $table)		{			$sql = "UPDATE $table				SET forum_id = $to_id				WHERE forum_id = $from_id";			$db->sql_query($sql);		}		unset($table_ary);		$table_ary = array(FORUMS_ACCESS_TABLE, FORUMS_TRACK_TABLE, FORUMS_WATCH_TABLE, MODERATOR_CACHE_TABLE);		foreach ($table_ary as $table)		{			$sql = "DELETE FROM $table				WHERE forum_id = $from_id";			$db->sql_query($sql);		}		if ($sync)		{			// Delete ghost topics that link back to the same forum then resync counters			sync('topic_moved');			sync('forum', 'forum_id', $to_id, false, true);		}		return array();	}	/**	* Remove complete forum	*/	function delete_forum($forum_id, $action_posts = 'delete', $action_subforums = 'delete', $posts_to_id = 0, $subforums_to_id = 0)	{		global $db, $user, $cache;		$forum_data = $this->get_forum_info($forum_id);		$errors = array();		$log_action_posts = $log_action_forums = $posts_to_name = $subforums_to_name = '';		$forum_ids = array($forum_id);		if ($action_posts == 'delete')		{			$log_action_posts = 'POSTS';			$errors = array_merge($errors, $this->delete_forum_content($forum_id));		}		else if ($action_posts == 'move')		{			if (!$posts_to_id)			{				$errors[] = $user->lang['NO_DESTINATION_FORUM'];			}			else			{				$log_action_posts = 'MOVE_POSTS';				$sql = 'SELECT forum_name					FROM ' . FORUMS_TABLE . '					WHERE forum_id = ' . $posts_to_id;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					$errors[] = $user->lang['NO_FORUM'];				}				else				{					$posts_to_name = $row['forum_name'];					$errors = array_merge($errors, $this->move_forum_content($forum_id, $posts_to_id));				}			}		}		if (sizeof($errors))		{			return $errors;		}		if ($action_subforums == 'delete')		{			$log_action_forums = 'FORUMS';			$rows = get_forum_branch($forum_id, 'children', 'descending', false);			foreach ($rows as $row)			{				$forum_ids[] = $row['forum_id'];				$errors = array_merge($errors, $this->delete_forum_content($row['forum_id']));			}			if (sizeof($errors))			{				return $errors;			}			$diff = sizeof($forum_ids) * 2;			$sql = 'DELETE FROM ' . FORUMS_TABLE . '				WHERE ' . $db->sql_in_set('forum_id', $forum_ids);			$db->sql_query($sql);			$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . '				WHERE ' . $db->sql_in_set('forum_id', $forum_ids);			$db->sql_query($sql);			$sql = 'DELETE FROM ' . ACL_USERS_TABLE . '				WHERE ' . $db->sql_in_set('forum_id', $forum_ids);			$db->sql_query($sql);		}		else if ($action_subforums == 'move')		{			if (!$subforums_to_id)			{				$errors[] = $user->lang['NO_DESTINATION_FORUM'];			}			else			{				$log_action_forums = 'MOVE_FORUMS';				$sql = 'SELECT forum_name					FROM ' . FORUMS_TABLE . '					WHERE forum_id = ' . $subforums_to_id;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					$errors[] = $user->lang['NO_FORUM'];				}				else				{					$subforums_to_name = $row['forum_name'];					$sql = 'SELECT forum_id						FROM ' . FORUMS_TABLE . "						WHERE parent_id = $forum_id";					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$this->move_forum($row['forum_id'], $subforums_to_id);					}					$db->sql_freeresult($result);					// Grab new forum data for correct tree updating later					$forum_data = $this->get_forum_info($forum_id);					$sql = 'UPDATE ' . FORUMS_TABLE . "						SET parent_id = $subforums_to_id						WHERE parent_id = $forum_id";					$db->sql_query($sql);					$diff = 2;					$sql = 'DELETE FROM ' . FORUMS_TABLE . "						WHERE forum_id = $forum_id";					$db->sql_query($sql);					$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . "						WHERE forum_id = $forum_id";					$db->sql_query($sql);					$sql = 'DELETE FROM ' . ACL_USERS_TABLE . "						WHERE forum_id = $forum_id";					$db->sql_query($sql);				}			}			if (sizeof($errors))			{				return $errors;			}		}		else		{			$diff = 2;			$sql = 'DELETE FROM ' . FORUMS_TABLE . "				WHERE forum_id = $forum_id";			$db->sql_query($sql);			$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . "				WHERE forum_id = $forum_id";			$db->sql_query($sql);			$sql = 'DELETE FROM ' . ACL_USERS_TABLE . "				WHERE forum_id = $forum_id";			$db->sql_query($sql);		}		// Resync tree		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET right_id = right_id - $diff			WHERE left_id < {$forum_data['right_id']} AND right_id > {$forum_data['right_id']}";		$db->sql_query($sql);		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET left_id = left_id - $diff, right_id = right_id - $diff			WHERE left_id > {$forum_data['right_id']}";		$db->sql_query($sql);		// Delete forum ids from extension groups table		$sql = 'SELECT group_id, allowed_forums			FROM ' . EXTENSION_GROUPS_TABLE;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if (!$row['allowed_forums'])			{				continue;			}			$allowed_forums = unserialize(trim($row['allowed_forums']));			$allowed_forums = array_diff($allowed_forums, $forum_ids);			$sql = 'UPDATE ' . EXTENSION_GROUPS_TABLE . "				SET allowed_forums = '" . ((sizeof($allowed_forums)) ? serialize($allowed_forums) : '') . "'				WHERE group_id = {$row['group_id']}";			$db->sql_query($sql);		}		$db->sql_freeresult($result);		$cache->destroy('_extensions');		$log_action = implode('_', array($log_action_posts, $log_action_forums));		switch ($log_action)		{			case 'MOVE_POSTS_MOVE_FORUMS':				add_log('admin', 'LOG_FORUM_DEL_MOVE_POSTS_MOVE_FORUMS', $posts_to_name, $subforums_to_name, $forum_data['forum_name']);			break;			case 'MOVE_POSTS_FORUMS':				add_log('admin', 'LOG_FORUM_DEL_MOVE_POSTS_FORUMS', $posts_to_name, $forum_data['forum_name']);			break;			case 'POSTS_MOVE_FORUMS':				add_log('admin', 'LOG_FORUM_DEL_POSTS_MOVE_FORUMS', $subforums_to_name, $forum_data['forum_name']);			break;			case '_MOVE_FORUMS':				add_log('admin', 'LOG_FORUM_DEL_MOVE_FORUMS', $subforums_to_name, $forum_data['forum_name']);			break;			case 'MOVE_POSTS_':				add_log('admin', 'LOG_FORUM_DEL_MOVE_POSTS', $posts_to_name, $forum_data['forum_name']);			break;			case 'POSTS_FORUMS':				add_log('admin', 'LOG_FORUM_DEL_POSTS_FORUMS', $forum_data['forum_name']);			break;			case '_FORUMS':				add_log('admin', 'LOG_FORUM_DEL_FORUMS', $forum_data['forum_name']);			break;			case 'POSTS_':				add_log('admin', 'LOG_FORUM_DEL_POSTS', $forum_data['forum_name']);			break;			default:				add_log('admin', 'LOG_FORUM_DEL_FORUM', $forum_data['forum_name']);			break;		}		return $errors;	}	/**	* Delete forum content	*/	function delete_forum_content($forum_id)	{		global $db, $config, $phpbb_root_path, $phpEx;		include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);		$db->sql_transaction('begin');		// Select then delete all attachments		$sql = 'SELECT a.topic_id			FROM ' . POSTS_TABLE . ' p, ' . ATTACHMENTS_TABLE . " a			WHERE p.forum_id = $forum_id				AND a.in_message = 0				AND a.topic_id = p.topic_id";		$result = $db->sql_query($sql);		$topic_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$topic_ids[] = $row['topic_id'];		}		$db->sql_freeresult($result);		delete_attachments('topic', $topic_ids, false);		// Delete shadow topics pointing to topics in this forum		delete_topic_shadows($forum_id);		// Before we remove anything we make sure we are able to adjust the post counts later. ;)		$sql = 'SELECT poster_id			FROM ' . POSTS_TABLE . '			WHERE forum_id = ' . $forum_id . '				AND post_postcount = 1				AND post_approved = 1';		$result = $db->sql_query($sql);		$post_counts = array();		while ($row = $db->sql_fetchrow($result))		{			$post_counts[$row['poster_id']] = (!empty($post_counts[$row['poster_id']])) ? $post_counts[$row['poster_id']] + 1 : 1;		}		$db->sql_freeresult($result);		switch ($db->sql_layer)		{			case 'mysql4':			case 'mysqli':				// Delete everything else and thank MySQL for offering multi-table deletion				$tables_ary = array(					SEARCH_WORDMATCH_TABLE	=> 'post_id',					REPORTS_TABLE			=> 'post_id',					WARNINGS_TABLE			=> 'post_id',					BOOKMARKS_TABLE			=> 'topic_id',					TOPICS_WATCH_TABLE		=> 'topic_id',					TOPICS_POSTED_TABLE		=> 'topic_id',					POLL_OPTIONS_TABLE		=> 'topic_id',					POLL_VOTES_TABLE		=> 'topic_id',				);				$sql = 'DELETE ' . POSTS_TABLE;				$sql_using = "\nFROM " . POSTS_TABLE;				$sql_where = "\nWHERE " . POSTS_TABLE . ".forum_id = $forum_id\n";				foreach ($tables_ary as $table => $field)				{					$sql .= ", $table ";					$sql_using .= ", $table ";					$sql_where .= "\nAND $table.$field = " . POSTS_TABLE . ".$field";				}				$db->sql_query($sql . $sql_using . $sql_where);			break;			default:				// Delete everything else and curse your DB for not offering multi-table deletion				$tables_ary = array(					'post_id'	=>	array(						SEARCH_WORDMATCH_TABLE,						REPORTS_TABLE,						WARNINGS_TABLE,					),					'topic_id'	=>	array(						BOOKMARKS_TABLE,						TOPICS_WATCH_TABLE,						TOPICS_POSTED_TABLE,						POLL_OPTIONS_TABLE,						POLL_VOTES_TABLE,					)				);				// Amount of rows we select and delete in one iteration.				$batch_size = 500;				foreach ($tables_ary as $field => $tables)				{					$start = 0;					do					{						$sql = "SELECT $field							FROM " . POSTS_TABLE . '							WHERE forum_id = ' . $forum_id;						$result = $db->sql_query_limit($sql, $batch_size, $start);						$ids = array();						while ($row = $db->sql_fetchrow($result))						{							$ids[] = $row[$field];						}						$db->sql_freeresult($result);						if (sizeof($ids))						{							$start += sizeof($ids);							foreach ($tables as $table)							{								$db->sql_query("DELETE FROM $table WHERE " . $db->sql_in_set($field, $ids));							}						}					}					while (sizeof($ids) == $batch_size);				}				unset($ids);			break;		}		$table_ary = array(FORUMS_ACCESS_TABLE, FORUMS_TRACK_TABLE, FORUMS_WATCH_TABLE, LOG_TABLE, MODERATOR_CACHE_TABLE, POSTS_TABLE, TOPICS_TABLE, TOPICS_TRACK_TABLE);		foreach ($table_ary as $table)		{			$db->sql_query("DELETE FROM $table WHERE forum_id = $forum_id");		}		// Set forum ids to 0		$table_ary = array(DRAFTS_TABLE);		foreach ($table_ary as $table)		{			$db->sql_query("UPDATE $table SET forum_id = 0 WHERE forum_id = $forum_id");		}		// Adjust users post counts		if (sizeof($post_counts))		{			foreach ($post_counts as $poster_id => $substract)			{				$sql = 'UPDATE ' . USERS_TABLE . '					SET user_posts = 0					WHERE user_id = ' . $poster_id . '					AND user_posts < ' . $substract;				$db->sql_query($sql);				$sql = 'UPDATE ' . USERS_TABLE . '					SET user_posts = user_posts - ' . $substract . '					WHERE user_id = ' . $poster_id . '					AND user_posts >= ' . $substract;				$db->sql_query($sql);			}		}		$db->sql_transaction('commit');		// Make sure the overall post/topic count is correct...		$sql = 'SELECT COUNT(post_id) AS stat			FROM ' . POSTS_TABLE . '			WHERE post_approved = 1';		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		set_config('num_posts', (int) $row['stat'], true);		$sql = 'SELECT COUNT(topic_id) AS stat			FROM ' . TOPICS_TABLE . '			WHERE topic_approved = 1';		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		set_config('num_topics', (int) $row['stat'], true);		$sql = 'SELECT COUNT(attach_id) as stat			FROM ' . ATTACHMENTS_TABLE;		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		set_config('num_files', (int) $row['stat'], true);		$sql = 'SELECT SUM(filesize) as stat			FROM ' . ATTACHMENTS_TABLE;		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		set_config('upload_dir_size', (float) $row['stat'], true);		return array();	}	/**	* Move forum position by $steps up/down	*/	function move_forum_by($forum_row, $action = 'move_up', $steps = 1)	{		global $db;		/**		* Fetch all the siblings between the module's current spot		* and where we want to move it to. If there are less than $steps		* siblings between the current spot and the target then the		* module will move as far as possible		*/		$sql = 'SELECT forum_id, forum_name, left_id, right_id			FROM ' . FORUMS_TABLE . "			WHERE parent_id = {$forum_row['parent_id']}				AND " . (($action == 'move_up') ? "right_id < {$forum_row['right_id']} ORDER BY right_id DESC" : "left_id > {$forum_row['left_id']} ORDER BY left_id ASC");		$result = $db->sql_query_limit($sql, $steps);		$target = array();		while ($row = $db->sql_fetchrow($result))		{			$target = $row;		}		$db->sql_freeresult($result);		if (!sizeof($target))		{			// The forum is already on top or bottom			return false;		}		/**		* $left_id and $right_id define the scope of the nodes that are affected by the move.		* $diff_up and $diff_down are the values to substract or add to each node's left_id		* and right_id in order to move them up or down.		* $move_up_left and $move_up_right define the scope of the nodes that are moving		* up. Other nodes in the scope of ($left_id, $right_id) are considered to move down.		*/		if ($action == 'move_up')		{			$left_id = $target['left_id'];			$right_id = $forum_row['right_id'];			$diff_up = $forum_row['left_id'] - $target['left_id'];			$diff_down = $forum_row['right_id'] + 1 - $forum_row['left_id'];			$move_up_left = $forum_row['left_id'];			$move_up_right = $forum_row['right_id'];		}		else		{			$left_id = $forum_row['left_id'];			$right_id = $target['right_id'];			$diff_up = $forum_row['right_id'] + 1 - $forum_row['left_id'];			$diff_down = $target['right_id'] - $forum_row['right_id'];			$move_up_left = $forum_row['right_id'] + 1;			$move_up_right = $target['right_id'];		}		// Now do the dirty job		$sql = 'UPDATE ' . FORUMS_TABLE . "			SET left_id = left_id + CASE				WHEN left_id BETWEEN {$move_up_left} AND {$move_up_right} THEN -{$diff_up}				ELSE {$diff_down}			END,			right_id = right_id + CASE				WHEN right_id BETWEEN {$move_up_left} AND {$move_up_right} THEN -{$diff_up}				ELSE {$diff_down}			END,			forum_parents = ''			WHERE				left_id BETWEEN {$left_id} AND {$right_id}				AND right_id BETWEEN {$left_id} AND {$right_id}";		$db->sql_query($sql);		return $target['forum_name'];	}	/**	* Display progress bar for syncinc forums	*/	function display_progress_bar($start, $total)	{		global $template, $user;		adm_page_header($user->lang['SYNC_IN_PROGRESS']);		$template->set_filenames(array(			'body'	=> 'progress_bar.html')		);		$template->assign_vars(array(			'L_PROGRESS'			=> $user->lang['SYNC_IN_PROGRESS'],			'L_PROGRESS_EXPLAIN'	=> ($start && $total) ? sprintf($user->lang['SYNC_IN_PROGRESS_EXPLAIN'], $start, $total) : $user->lang['SYNC_IN_PROGRESS'])		);		adm_page_footer();	}	/**	* Display copy permission page	* Not used at the moment - we will have a look at it for 3.0.7	*/	function copy_permission_page($forum_data)	{		global $phpEx, $phpbb_admin_path, $template, $user;		$acl_url = '&amp;mode=setting_forum_local&amp;forum_id[]=' . $forum_data['forum_id'];		$action = append_sid($this->u_action . "&amp;parent_id={$this->parent_id}&amp;f={$forum_data['forum_id']}&amp;action=copy_perm");		$l_acl = sprintf($user->lang['COPY_TO_ACL'], '<a href="' . append_sid("{$phpbb_admin_path}index.$phpEx", 'i=permissions' . $acl_url) . '">', '</a>');		$this->tpl_name = 'acp_forums_copy_perm';		$template->assign_vars(array(			'U_ACL'				=> append_sid("{$phpbb_admin_path}index.$phpEx", 'i=permissions' . $acl_url),			'L_ACL_LINK'		=> $l_acl,			'L_BACK_LINK'		=> adm_back_link($this->u_action . '&amp;parent_id=' . $this->parent_id),			'S_COPY_ACTION'		=> $action,			'S_FORUM_OPTIONS'	=> make_forum_select($forum_data['parent_id'], $forum_data['forum_id'], false, false, false),		));	}}?>
<?php/**** @package diff* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Code from pear.php.net, Text_Diff-1.1.0 package* http://pear.php.net/package/Text_Diff/** Modified by phpBB Group to meet our coding standards* and being able to integrate into phpBB** General API for generating and formatting diffs - the differences between* two sequences of strings.** Copyright 2004 Geoffrey T. Dairiki <dairiki@dairiki.org>* Copyright 2004-2008 The Horde Project (http://www.horde.org/)** @package diff* @author  Geoffrey T. Dairiki <dairiki@dairiki.org>*/class diff{	/**	* Array of changes.	* @var array	*/	var $_edits;	/**	* Computes diffs between sequences of strings.	*	* @param array $from_lines  An array of strings. Typically these are lines from a file.	* @param array $to_lines    An array of strings.	*/	function diff(&$from_content, &$to_content, $preserve_cr = true)	{		$diff_engine = new diff_engine();		$this->_edits = $diff_engine->diff($from_content, $to_content, $preserve_cr);	}	/**	* Returns the array of differences.	*/	function get_diff()	{		return $this->_edits;	}	/**	* returns the number of new (added) lines in a given diff.	*	* @since Text_Diff 1.1.0	*	* @return integer The number of new lines	*/	function count_added_lines()	{		$count = 0;		for ($i = 0, $size = sizeof($this->_edits); $i < $size; $i++)		{			$edit = $this->_edits[$i];			if (is_a($edit, 'diff_op_add') || is_a($edit, 'diff_op_change'))			{				$count += $edit->nfinal();			}		}		return $count;	}	/**	* Returns the number of deleted (removed) lines in a given diff.	*	* @since Text_Diff 1.1.0	*	* @return integer The number of deleted lines	*/	function count_deleted_lines()	{		$count = 0;		for ($i = 0, $size = sizeof($this->_edits); $i < $size; $i++)		{			$edit = $this->_edits[$i];			if (is_a($edit, 'diff_op_delete') || is_a($edit, 'diff_op_change'))			{				$count += $edit->norig();			}		}		return $count;	}	/**	* Computes a reversed diff.	*	* Example:	* <code>	* $diff = new diff($lines1, $lines2);	* $rev = $diff->reverse();	* </code>	*	* @return diff  A Diff object representing the inverse of the original diff.	*               Note that we purposely don't return a reference here, since	*               this essentially is a clone() method.	*/	function reverse()	{		if (version_compare(zend_version(), '2', '>'))		{			$rev = clone($this);		}		else		{			$rev = $this;		}		$rev->_edits = array();		for ($i = 0, $size = sizeof($this->_edits); $i < $size; $i++)		{			$edit = $this->_edits[$i];			$rev->_edits[] = $edit->reverse();		}		return $rev;	}	/**	* Checks for an empty diff.	*	* @return boolean  True if two sequences were identical.	*/	function is_empty()	{		for ($i = 0, $size = sizeof($this->_edits); $i < $size; $i++)		{			$edit = $this->_edits[$i];			// skip diff_op_copy			if (is_a($edit, 'diff_op_copy'))			{				continue;			}			if (is_a($edit, 'diff_op_delete') || is_a($edit, 'diff_op_add'))			{				$orig = $edit->orig;				$final = $edit->final;				// We can simplify one case where the array is usually supposed to be empty...				if (sizeof($orig) == 1 && trim($orig[0]) === '') $orig = array();				if (sizeof($final) == 1 && trim($final[0]) === '') $final = array();				if (!$orig && !$final)				{					continue;				}				return false;			}			return false;		}		return true;	}	/**	* Computes the length of the Longest Common Subsequence (LCS).	*	* This is mostly for diagnostic purposes.	*	* @return integer  The length of the LCS.	*/	function lcs()	{		$lcs = 0;		for ($i = 0, $size = sizeof($this->_edits); $i < $size; $i++)		{			$edit = $this->_edits[$i];			if (is_a($edit, 'diff_op_copy'))			{				$lcs += sizeof($edit->orig);			}		}		return $lcs;	}	/**	* Gets the original set of lines.	*	* This reconstructs the $from_lines parameter passed to the constructor.	*	* @return array  The original sequence of strings.	*/	function get_original()	{		$lines = array();		for ($i = 0, $size = sizeof($this->_edits); $i < $size; $i++)		{			$edit = $this->_edits[$i];			if ($edit->orig)			{				array_splice($lines, sizeof($lines), 0, $edit->orig);			}		}		return $lines;	}	/**	* Gets the final set of lines.	*	* This reconstructs the $to_lines parameter passed to the constructor.	*	* @return array  The sequence of strings.	*/	function get_final()	{		$lines = array();		for ($i = 0, $size = sizeof($this->_edits); $i < $size; $i++)		{			$edit = $this->_edits[$i];			if ($edit->final)			{				array_splice($lines, sizeof($lines), 0, $edit->final);			}		}		return $lines;	}	/**	* Removes trailing newlines from a line of text. This is meant to be used with array_walk().	*	* @param string &$line  The line to trim.	* @param integer $key  The index of the line in the array. Not used.	*/	function trim_newlines(&$line, $key)	{		$line = str_replace(array("\n", "\r"), '', $line);	}	/**	* Checks a diff for validity.	*	* This is here only for debugging purposes.	*/	function _check($from_lines, $to_lines)	{		if (serialize($from_lines) != serialize($this->get_original()))		{			trigger_error("[diff] Reconstructed original doesn't match", E_USER_ERROR);		}		if (serialize($to_lines) != serialize($this->get_final()))		{			trigger_error("[diff] Reconstructed final doesn't match", E_USER_ERROR);		}		$rev = $this->reverse();		if (serialize($to_lines) != serialize($rev->get_original()))		{			trigger_error("[diff] Reversed original doesn't match", E_USER_ERROR);		}		if (serialize($from_lines) != serialize($rev->get_final()))		{			trigger_error("[diff] Reversed final doesn't match", E_USER_ERROR);		}		$prevtype = null;		for ($i = 0, $size = sizeof($this->_edits); $i < $size; $i++)		{			$edit = $this->_edits[$i];			if ($prevtype == get_class($edit))			{				trigger_error("[diff] Edit sequence is non-optimal", E_USER_ERROR);			}			$prevtype = get_class($edit);		}		return true;	}}/*** @package diff* @author  Geoffrey T. Dairiki <dairiki@dairiki.org>*/class mapped_diff extends diff{	/**	* Computes a diff between sequences of strings.	*	* This can be used to compute things like case-insensitve diffs, or diffs	* which ignore changes in white-space.	*	* @param array $from_lines         An array of strings.	* @param array $to_lines           An array of strings.	* @param array $mapped_from_lines  This array should have the same size number of elements as $from_lines.	*                                  The elements in $mapped_from_lines and $mapped_to_lines are what is actually	*                                  compared when computing the diff.	* @param array $mapped_to_lines    This array should have the same number of elements as $to_lines.	*/	function mapped_diff(&$from_lines, &$to_lines, &$mapped_from_lines, &$mapped_to_lines)	{		if (sizeof($from_lines) != sizeof($mapped_from_lines) || sizeof($to_lines) != sizeof($mapped_to_lines))		{			return false;		}		parent::diff($mapped_from_lines, $mapped_to_lines);		$xi = $yi = 0;		for ($i = 0; $i < sizeof($this->_edits); $i++)		{			$orig = &$this->_edits[$i]->orig;			if (is_array($orig))			{				$orig = array_slice($from_lines, $xi, sizeof($orig));				$xi += sizeof($orig);			}			$final = &$this->_edits[$i]->final;			if (is_array($final))			{				$final = array_slice($to_lines, $yi, sizeof($final));				$yi += sizeof($final);			}		}	}}/*** @package diff* @author  Geoffrey T. Dairiki <dairiki@dairiki.org>** @access private*/class diff_op{	var $orig;	var $final;	function &reverse()	{		trigger_error('[diff] Abstract method', E_USER_ERROR);	}	function norig()	{		return ($this->orig) ? sizeof($this->orig) : 0;	}	function nfinal()	{		return ($this->final) ? sizeof($this->final) : 0;	}}/*** @package diff* @author  Geoffrey T. Dairiki <dairiki@dairiki.org>** @access private*/class diff_op_copy extends diff_op{	function diff_op_copy($orig, $final = false)	{		if (!is_array($final))		{			$final = $orig;		}		$this->orig = $orig;		$this->final = $final;	}	function &reverse()	{		$reverse = new diff_op_copy($this->final, $this->orig);		return $reverse;	}}/*** @package diff* @author  Geoffrey T. Dairiki <dairiki@dairiki.org>** @access private*/class diff_op_delete extends diff_op{	function diff_op_delete($lines)	{		$this->orig = $lines;		$this->final = false;	}	function &reverse()	{		$reverse = new diff_op_add($this->orig);		return $reverse;	}}/*** @package diff* @author  Geoffrey T. Dairiki <dairiki@dairiki.org>** @access private*/class diff_op_add extends diff_op{	function diff_op_add($lines)	{		$this->final = $lines;		$this->orig = false;	}	function &reverse()	{		$reverse = new diff_op_delete($this->final);		return $reverse;	}}/*** @package diff* @author  Geoffrey T. Dairiki <dairiki@dairiki.org>** @access private*/class diff_op_change extends diff_op{	function diff_op_change($orig, $final)	{		$this->orig = $orig;		$this->final = $final;	}	function &reverse()	{		$reverse = new diff_op_change($this->final, $this->orig);		return $reverse;	}}/*** A class for computing three way diffs.** @package diff* @author  Geoffrey T. Dairiki <dairiki@dairiki.org>*/class diff3 extends diff{	/**	* Conflict counter.	* @var integer	*/	var $_conflicting_blocks = 0;	/**	* Computes diff between 3 sequences of strings.	*	* @param array $orig    The original lines to use.	* @param array $final1  The first version to compare to.	* @param array $final2  The second version to compare to.	*/	function diff3(&$orig, &$final1, &$final2, $preserve_cr = true)	{		$diff_engine = new diff_engine();		$diff_1 = $diff_engine->diff($orig, $final1, $preserve_cr);		$diff_2 = $diff_engine->diff($orig, $final2, $preserve_cr);		unset($diff_engine);		$this->_edits = $this->_diff3($diff_1, $diff_2);	}	/**	* Return number of conflicts	*/	function get_num_conflicts()	{		$conflicts = 0;		for ($i = 0, $size = sizeof($this->_edits); $i < $size; $i++)		{			$edit = $this->_edits[$i];			if ($edit->is_conflict())			{				$conflicts++;			}		}		return $conflicts;	}	/**	* Get conflicts content for download. This is generally a merged file, but preserving conflicts and adding explanations to it.	* A user could then go through this file, search for the conflicts and changes the code accordingly.	*	* @param string $label1 the cvs file version/label from the original set of lines	* @param string $label2 the cvs file version/label from the new set of lines	* @param string $label_sep the explanation between label1 and label2 - more of a helper for the user	*	* @return mixed the merged output	*/	function get_conflicts_content($label1 = 'CURRENT_FILE', $label2 = 'NEW_FILE', $label_sep = 'DIFF_SEP_EXPLAIN')	{		global $user;		$label1 = (!empty($user->lang[$label1])) ? $user->lang[$label1] : $label1;		$label2 = (!empty($user->lang[$label2])) ? $user->lang[$label2] : $label2;		$label_sep = (!empty($user->lang[$label_sep])) ? $user->lang[$label_sep] : $label_sep;		$lines = array();		for ($i = 0, $size = sizeof($this->_edits); $i < $size; $i++)		{			$edit = $this->_edits[$i];			if ($edit->is_conflict())			{				// Start conflict label				$label_start	= array('<<<<<<< ' . $label1);				$label_mid		= array('======= ' . $label_sep);				$label_end		= array('>>>>>>> ' . $label2);				$lines = array_merge($lines, $label_start, $edit->final1, $label_mid, $edit->final2, $label_end);				$this->_conflicting_blocks++;			}			else			{				$lines = array_merge($lines, $edit->merged());			}		}		return $lines;	}	/**	* Return merged output (used by the renderer)	*	* @return mixed the merged output	*/	function merged_output()	{		return $this->get_conflicts_content();	}	/**	* Merge the output and use the new file code for conflicts	*/	function merged_new_output()	{		$lines = array();		for ($i = 0, $size = sizeof($this->_edits); $i < $size; $i++)		{			$edit = $this->_edits[$i];			if ($edit->is_conflict())			{				$lines = array_merge($lines, $edit->final2);			}			else			{				$lines = array_merge($lines, $edit->merged());			}		}		return $lines;	}	/**	* Merge the output and use the original file code for conflicts	*/	function merged_orig_output()	{		$lines = array();		for ($i = 0, $size = sizeof($this->_edits); $i < $size; $i++)		{			$edit = $this->_edits[$i];			if ($edit->is_conflict())			{				$lines = array_merge($lines, $edit->final1);			}			else			{				$lines = array_merge($lines, $edit->merged());			}		}		return $lines;	}	/**	* Get conflicting block(s)	*/	function get_conflicts()	{		$conflicts = array();		for ($i = 0, $size = sizeof($this->_edits); $i < $size; $i++)		{			$edit = $this->_edits[$i];			if ($edit->is_conflict())			{				$conflicts[] = array($edit->final1, $edit->final2);			}		}		return $conflicts;	}	/**	* @access private	*/	function _diff3(&$edits1, &$edits2)	{		$edits = array();		$bb = new diff3_block_builder();		$e1 = current($edits1);		$e2 = current($edits2);		while ($e1 || $e2)		{			if ($e1 && $e2 && is_a($e1, 'diff_op_copy') && is_a($e2, 'diff_op_copy'))			{				// We have copy blocks from both diffs. This is the (only) time we want to emit a diff3 copy block.				// Flush current diff3 diff block, if any.				if ($edit = $bb->finish())				{					$edits[] = $edit;				}				$ncopy = min($e1->norig(), $e2->norig());				$edits[] = new diff3_op_copy(array_slice($e1->orig, 0, $ncopy));				if ($e1->norig() > $ncopy)				{					array_splice($e1->orig, 0, $ncopy);					array_splice($e1->final, 0, $ncopy);				}				else				{					$e1 = next($edits1);				}				if ($e2->norig() > $ncopy)				{					array_splice($e2->orig, 0, $ncopy);					array_splice($e2->final, 0, $ncopy);				}				else				{					$e2 = next($edits2);				}			}			else			{				if ($e1 && $e2)				{					if ($e1->orig && $e2->orig)					{						$norig = min($e1->norig(), $e2->norig());						$orig = array_splice($e1->orig, 0, $norig);						array_splice($e2->orig, 0, $norig);						$bb->input($orig);					}					else					{						$norig = 0;					}					if (is_a($e1, 'diff_op_copy'))					{						$bb->out1(array_splice($e1->final, 0, $norig));					}					if (is_a($e2, 'diff_op_copy'))					{						$bb->out2(array_splice($e2->final, 0, $norig));					}				}				if ($e1 && ! $e1->orig)				{					$bb->out1($e1->final);					$e1 = next($edits1);				}				if ($e2 && ! $e2->orig)				{					$bb->out2($e2->final);					$e2 = next($edits2);				}			}		}		if ($edit = $bb->finish())		{			$edits[] = $edit;		}		return $edits;	}}/*** @package diff* @author  Geoffrey T. Dairiki <dairiki@dairiki.org>** @access private*/class diff3_op{	function diff3_op($orig = false, $final1 = false, $final2 = false)	{		$this->orig = $orig ? $orig : array();		$this->final1 = $final1 ? $final1 : array();		$this->final2 = $final2 ? $final2 : array();	}	function merged()	{		if (!isset($this->_merged))		{			// Prepare the arrays before we compare them. ;)			$this->solve_prepare();			if ($this->final1 === $this->final2)			{				$this->_merged = &$this->final1;			}			else if ($this->final1 === $this->orig)			{				$this->_merged = &$this->final2;			}			else if ($this->final2 === $this->orig)			{				$this->_merged = &$this->final1;			}			else			{				// The following tries to aggressively solve conflicts...				$this->_merged = false;				$this->solve_conflict();			}		}		return $this->_merged;	}	function is_conflict()	{		return ($this->merged() === false) ? true : false;	}	/**	* Function to prepare the arrays for comparing - we want to skip over newline changes	* @author acydburn	*/	function solve_prepare()	{		// We can simplify one case where the array is usually supposed to be empty...		if (sizeof($this->orig) == 1 && trim($this->orig[0]) === '') $this->orig = array();		if (sizeof($this->final1) == 1 && trim($this->final1[0]) === '') $this->final1 = array();		if (sizeof($this->final2) == 1 && trim($this->final2[0]) === '') $this->final2 = array();		// Now we only can have the case where the only difference between arrays are newlines, so compare all cases		// First, some strings we can compare...		$orig = $final1 = $final2 = '';		foreach ($this->orig as $null => $line) $orig .= trim($line);		foreach ($this->final1 as $null => $line) $final1 .= trim($line);		foreach ($this->final2 as $null => $line) $final2 .= trim($line);		// final1 === final2		if ($final1 === $final2)		{			// We preserve the part which will be used in the merge later			$this->final2 = $this->final1;		}		// final1 === orig		else if ($final1 === $orig)		{			// Here it does not really matter what we choose, but we will use the new code			$this->orig = $this->final1;		}		// final2 === orig		else if ($final2 === $orig)		{			// Here it does not really matter too (final1 will be used), but we will use the new code			$this->orig = $this->final2;		}	}	/**	* Find code portions from $orig in $final1 and use $final2 as merged instance if provided	* @author acydburn	*/	function _compare_conflict_seq($orig, $final1, $final2 = false)	{		$result = array('merge_found' => false, 'merge' => array());		$_orig = &$this->$orig;		$_final1 = &$this->$final1;		// Ok, we basically search for $orig in $final1		$compare_seq = sizeof($_orig);		// Go through the conflict code		for ($i = 0, $j = 0, $size = sizeof($_final1); $i < $size; $i++, $j = $i)		{			$line = $_final1[$i];			$skip = 0;			for ($x = 0; $x < $compare_seq; $x++)			{				// Try to skip all matching lines				if (trim($line) === trim($_orig[$x]))				{					$line = (++$j < $size) ? $_final1[$j] : $line;					$skip++;				}			}			if ($skip === $compare_seq)			{				$result['merge_found'] = true;				if ($final2 !== false)				{					$result['merge'] = array_merge($result['merge'], $this->$final2);				}				$i += ($skip - 1);			}			else if ($final2 !== false)			{				$result['merge'][] = $line;			}		}		return $result;	}	/**	* Tries to solve conflicts aggressively based on typical "assumptions"	* @author acydburn	*/	function solve_conflict()	{		$this->_merged = false;		// CASE ONE: orig changed into final2, but modified/unknown code in final1.		// IF orig is found "as is" in final1 we replace the code directly in final1 and populate this as final2/merge		if (sizeof($this->orig) && sizeof($this->final2))		{			$result = $this->_compare_conflict_seq('orig', 'final1', 'final2');			if ($result['merge_found'])			{				$this->final2 = $result['merge'];				$this->_merged = &$this->final2;				return;			}			$result = $this->_compare_conflict_seq('final2', 'final1');			if ($result['merge_found'])			{				$this->_merged = &$this->final1;				return;			}			// Try to solve $Id$ issues. ;)			if (sizeof($this->orig) == 1 && sizeof($this->final1) == 1 && sizeof($this->final2) == 1)			{				$match = '#^' . preg_quote('* @version $Id: ', '#') . '[a-z\._\- ]+[0-9]+ [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9\:Z]+ [a-z0-9_\- ]+\$$#';				if (preg_match($match, $this->orig[0]) && preg_match($match, $this->final1[0]) && preg_match($match, $this->final2[0]))				{					$this->_merged = &$this->final2;					return;				}			}			$second_run = false;			// Try to solve issues where the only reason why the above did not work is a newline being removed in the final1 code but exist in the orig/final2 code			if (trim($this->orig[0]) === '' && trim($this->final2[0]) === '')			{				unset($this->orig[0], $this->final2[0]);				$this->orig = array_values($this->orig);				$this->final2 = array_values($this->final2);				$second_run = true;			}			// The same is true for a line at the end. ;)			if (sizeof($this->orig) && sizeof($this->final2) && sizeof($this->orig) === sizeof($this->final2) && trim($this->orig[sizeof($this->orig)-1]) === '' && trim($this->final2[sizeof($this->final2)-1]) === '')			{				unset($this->orig[sizeof($this->orig)-1], $this->final2[sizeof($this->final2)-1]);				$this->orig = array_values($this->orig);				$this->final2 = array_values($this->final2);				$second_run = true;			}			if ($second_run)			{				$result = $this->_compare_conflict_seq('orig', 'final1', 'final2');				if ($result['merge_found'])				{					$this->final2 = $result['merge'];					$this->_merged = &$this->final2;					return;				}				$result = $this->_compare_conflict_seq('final2', 'final1');				if ($result['merge_found'])				{					$this->_merged = &$this->final1;					return;				}			}			return;		}		// CASE TWO: Added lines from orig to final2 but final1 had added lines too. Just merge them.		if (!sizeof($this->orig) && $this->final1 !== $this->final2 && sizeof($this->final1) && sizeof($this->final2))		{			$result = $this->_compare_conflict_seq('final2', 'final1');			if ($result['merge_found'])			{				$this->final2 = $this->final1;				$this->_merged = &$this->final1;			}			else			{				$result = $this->_compare_conflict_seq('final1', 'final2');				if (!$result['merge_found'])				{					$this->final2 = array_merge($this->final1, $this->final2);					$this->_merged = &$this->final2;				}				else				{					$this->final2 = $this->final1;					$this->_merged = &$this->final1;				}			}			return;		}		// CASE THREE: Removed lines (orig has the to-remove line(s), but final1 has additional lines which does not need to be removed). Just remove orig from final1 and then use final1 as final2/merge		if (!sizeof($this->final2) && sizeof($this->orig) && sizeof($this->final1) && $this->orig !== $this->final1)		{			$result = $this->_compare_conflict_seq('orig', 'final1');			if (!$result['merge_found'])			{				return;			}			// First of all, try to find the code in orig in final1. ;)			$compare_seq = sizeof($this->orig);			$begin = $end = -1;			$j = 0;			for ($i = 0, $size = sizeof($this->final1); $i < $size; $i++)			{				$line = $this->final1[$i];				if (trim($line) === trim($this->orig[$j]))				{					// Mark begin					if ($begin === -1)					{						$begin = $i;					}					// End is always $i, the last found line					$end = $i;					if (isset($this->orig[$j+1]))					{						$j++;					}				}			}			if ($begin !== -1 && $begin + ($compare_seq - 1) == $end)			{				foreach ($this->final1 as $i => $line)				{					if ($i < $begin || $i > $end)					{						$merged[] = $line;					}				}				$this->final2 = $merged;				$this->_merged = &$this->final2;			}			return;		}		return;	}}/*** @package diff* @author  Geoffrey T. Dairiki <dairiki@dairiki.org>** @access private*/class diff3_op_copy extends diff3_op{	function diff3_op_copy($lines = false)	{		$this->orig = $lines ? $lines : array();		$this->final1 = &$this->orig;		$this->final2 = &$this->orig;	}	function merged()	{		return $this->orig;	}	function is_conflict()	{		return false;	}}/*** @package diff* @author  Geoffrey T. Dairiki <dairiki@dairiki.org>** @access private*/class diff3_block_builder{	function diff3_block_builder()	{		$this->_init();	}	function input($lines)	{		if ($lines)		{			$this->_append($this->orig, $lines);		}	}	function out1($lines)	{		if ($lines)		{			$this->_append($this->final1, $lines);		}	}	function out2($lines)	{		if ($lines)		{			$this->_append($this->final2, $lines);		}	}	function is_empty()	{		return !$this->orig && !$this->final1 && !$this->final2;	}	function finish()	{		if ($this->is_empty())		{			return false;		}		else		{			$edit = new diff3_op($this->orig, $this->final1, $this->final2);			$this->_init();			return $edit;		}	}	function _init()	{		$this->orig = $this->final1 = $this->final2 = array();	}	function _append(&$array, $lines)	{		array_splice($array, sizeof($array), 0, $lines);	}}?>
<?php return array(''=>'');
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_profile_info{	function module()	{		return array(			'filename'	=> 'acp_profile',			'title'		=> 'ACP_CUSTOM_PROFILE_FIELDS',			'version'	=> '1.0.0',			'modes'		=> array(				'profile'	=> array('title' => 'ACP_CUSTOM_PROFILE_FIELDS', 'auth' => 'acl_a_profile', 'cat' => array('ACP_CAT_USERS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/*** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Private Message Class** $_REQUEST['folder'] display folder with the id used* $_REQUEST['folder'] inbox|outbox|sentbox display folder with the associated name**	Display Messages (default to inbox) - mode=view*	Display single message - mode=view&p=[msg_id] or &p=[msg_id] (short linkage)**	if the folder id with (&f=[folder_id]) is used when displaying messages, one query will be saved. If it is not used, phpBB needs to grab*	the folder id first in order to display the input boxes and folder names and such things. ;) phpBB always checks this against the database to make*	sure the user is able to view the message.**	Composing Messages (mode=compose):*		To specific user (u=[user_id])*		To specific group (g=[group_id])*		Quoting a post (action=quotepost&p=[post_id])*		Quoting a PM (action=quote&p=[msg_id])*		Forwarding a PM (action=forward&p=[msg_id])** @package ucp*/class ucp_pm{	var $u_action;	function main($id, $mode)	{		global $user, $template, $phpbb_root_path, $auth, $phpEx, $db, $config;		if (!$user->data['is_registered'])		{			trigger_error('NO_MESSAGE');		}		// Is PM disabled?		if (!$config['allow_privmsg'])		{			trigger_error('PM_DISABLED');		}		$user->add_lang('posting');		$template->assign_var('S_PRIVMSGS', true);		// Folder directly specified?		$folder_specified = request_var('folder', '');		if (!in_array($folder_specified, array('inbox', 'outbox', 'sentbox')))		{			$folder_specified = (int) $folder_specified;		}		else		{			$folder_specified = ($folder_specified == 'inbox') ? PRIVMSGS_INBOX : (($folder_specified == 'outbox') ? PRIVMSGS_OUTBOX : PRIVMSGS_SENTBOX);		}		if (!$folder_specified)		{			$mode = (!$mode) ? request_var('mode', 'view') : $mode;		}		else		{			$mode = 'view';		}		include($phpbb_root_path . 'includes/functions_privmsgs.' . $phpEx);		switch ($mode)		{			// New private messages popup			case 'popup':				$l_new_message = '';				if ($user->data['is_registered'])				{					if ($user->data['user_new_privmsg'])					{						$l_new_message = ($user->data['user_new_privmsg'] == 1) ? $user->lang['YOU_NEW_PM'] : $user->lang['YOU_NEW_PMS'];					}					else					{						$l_new_message = $user->lang['YOU_NO_NEW_PM'];					}				}				$template->assign_vars(array(					'MESSAGE'			=> $l_new_message,					'S_NOT_LOGGED_IN'	=> ($user->data['user_id'] == ANONYMOUS) ? true : false,					'CLICK_TO_VIEW'		=> sprintf($user->lang['CLICK_VIEW_PRIVMSG'], '<a href="' . append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=inbox') . '" onclick="jump_to_inbox(this.href); return false;">', '</a>'),					'U_INBOX'			=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=inbox'),					'UA_INBOX'			=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&folder=inbox', false))				);				$tpl_file = 'ucp_pm_popup';			break;			// Compose message			case 'compose':				$action = request_var('action', 'post');				$user_folders = get_folder($user->data['user_id']);				if (!$auth->acl_get('u_sendpm'))				{					// trigger_error('NO_AUTH_SEND_MESSAGE');					$template->assign_vars(array(						'S_NO_AUTH_SEND_MESSAGE'	=> true,						'S_COMPOSE_PM_VIEW'			=> true,					));					$tpl_file = 'ucp_pm_viewfolder';					break;				}				include($phpbb_root_path . 'includes/ucp/ucp_pm_compose.' . $phpEx);				compose_pm($id, $mode, $action, $user_folders);				$tpl_file = 'posting_body';			break;			case 'options':				set_user_message_limit();				get_folder($user->data['user_id']);				include($phpbb_root_path . 'includes/ucp/ucp_pm_options.' . $phpEx);				message_options($id, $mode, $global_privmsgs_rules, $global_rule_conditions);				$tpl_file = 'ucp_pm_options';			break;			case 'drafts':				get_folder($user->data['user_id']);				$this->p_name = 'pm';				// Call another module... please do not try this at home... Hoochie Coochie Man				include($phpbb_root_path . 'includes/ucp/ucp_main.' . $phpEx);				$module = new ucp_main($this);				$module->u_action = $this->u_action;				$module->main($id, $mode);				$this->tpl_name = $module->tpl_name;				$this->page_title = 'UCP_PM_DRAFTS';				unset($module);				return;			break;			case 'view':				set_user_message_limit();				if ($folder_specified)				{					$folder_id = $folder_specified;					$action = 'view_folder';				}				else				{					$folder_id = request_var('f', PRIVMSGS_NO_BOX);					$action = request_var('action', 'view_folder');				}				$msg_id = request_var('p', 0);				$view	= request_var('view', '');				// View message if specified				if ($msg_id)				{					$action = 'view_message';				}				if (!$auth->acl_get('u_readpm'))				{					trigger_error('NO_AUTH_READ_MESSAGE');				}				// Do not allow hold messages to be seen				if ($folder_id == PRIVMSGS_HOLD_BOX)				{					trigger_error('NO_AUTH_READ_HOLD_MESSAGE');				}				// First Handle Mark actions and moving messages				$submit_mark	= (isset($_POST['submit_mark'])) ? true : false;				$move_pm		= (isset($_POST['move_pm'])) ? true : false;				$mark_option	= request_var('mark_option', '');				$dest_folder	= request_var('dest_folder', PRIVMSGS_NO_BOX);				// Is moving PM triggered through mark options?				if (!in_array($mark_option, array('mark_important', 'delete_marked')) && $submit_mark)				{					$move_pm = true;					$dest_folder = (int) $mark_option;					$submit_mark = false;				}				// Move PM				if ($move_pm)				{					$move_msg_ids	= (isset($_POST['marked_msg_id'])) ? request_var('marked_msg_id', array(0)) : array();					$cur_folder_id	= request_var('cur_folder_id', PRIVMSGS_NO_BOX);					if (move_pm($user->data['user_id'], $user->data['message_limit'], $move_msg_ids, $dest_folder, $cur_folder_id))					{						// Return to folder view if single message moved						if ($action == 'view_message')						{							$msg_id		= 0;							$folder_id	= request_var('cur_folder_id', PRIVMSGS_NO_BOX);							$action		= 'view_folder';						}					}				}				// Message Mark Options				if ($submit_mark)				{					handle_mark_actions($user->data['user_id'], $mark_option);				}				// If new messages arrived, place them into the appropriate folder				$num_not_moved = $num_removed = 0;				$release = request_var('release', 0);				if ($user->data['user_new_privmsg'] && ($action == 'view_folder' || $action == 'view_message'))				{					$return = place_pm_into_folder($global_privmsgs_rules, $release);					$num_not_moved = $return['not_moved'];					$num_removed = $return['removed'];				}				if (!$msg_id && $folder_id == PRIVMSGS_NO_BOX)				{					$folder_id = PRIVMSGS_INBOX;				}				else if ($msg_id && $folder_id == PRIVMSGS_NO_BOX)				{					$sql = 'SELECT folder_id						FROM ' . PRIVMSGS_TO_TABLE . "						WHERE msg_id = $msg_id							AND folder_id <> " . PRIVMSGS_NO_BOX . '							AND user_id = ' . $user->data['user_id'];					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if (!$row)					{						trigger_error('NO_MESSAGE');					}					$folder_id = (int) $row['folder_id'];				}				$message_row = array();				if ($action == 'view_message' && $msg_id)				{					// Get Message user want to see					if ($view == 'next' || $view == 'previous')					{						$sql_condition = ($view == 'next') ? '>' : '<';						$sql_ordering = ($view == 'next') ? 'ASC' : 'DESC';						$sql = 'SELECT t.msg_id							FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p, ' . PRIVMSGS_TABLE . " p2							WHERE p2.msg_id = $msg_id								AND t.folder_id = $folder_id								AND t.user_id = " . $user->data['user_id'] . "								AND t.msg_id = p.msg_id								AND p.message_time $sql_condition p2.message_time							ORDER BY p.message_time $sql_ordering";						$result = $db->sql_query_limit($sql, 1);						$row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$row)						{							$message = ($view == 'next') ? 'NO_NEWER_PM' : 'NO_OLDER_PM';							trigger_error($message);						}						else						{							$msg_id = $row['msg_id'];						}					}					$sql = 'SELECT t.*, p.*, u.*						FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p, ' . USERS_TABLE . ' u						WHERE t.user_id = ' . $user->data['user_id'] . "							AND p.author_id = u.user_id							AND t.folder_id = $folder_id							AND t.msg_id = p.msg_id							AND p.msg_id = $msg_id";					$result = $db->sql_query($sql);					$message_row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if (!$message_row)					{						trigger_error('NO_MESSAGE');					}					// Update unread status					update_unread_status($message_row['pm_unread'], $message_row['msg_id'], $user->data['user_id'], $folder_id);				}				$folder = get_folder($user->data['user_id'], $folder_id);				$s_folder_options = $s_to_folder_options = '';				foreach ($folder as $f_id => $folder_ary)				{					$option = '<option' . ((!in_array($f_id, array(PRIVMSGS_INBOX, PRIVMSGS_OUTBOX, PRIVMSGS_SENTBOX))) ? ' class="sep"' : '') . ' value="' . $f_id . '"' . (($f_id == $folder_id) ? ' selected="selected"' : '') . '>' . $folder_ary['folder_name'] . (($folder_ary['unread_messages']) ? ' [' . $folder_ary['unread_messages'] . '] ' : '') . '</option>';					$s_to_folder_options .= ($f_id != PRIVMSGS_OUTBOX && $f_id != PRIVMSGS_SENTBOX) ? $option : '';					$s_folder_options .= $option;				}				clean_sentbox($folder[PRIVMSGS_SENTBOX]['num_messages']);				// Header for message view - folder and so on				$folder_status = get_folder_status($folder_id, $folder);				$template->assign_vars(array(					'CUR_FOLDER_ID'			=> $folder_id,					'CUR_FOLDER_NAME'		=> $folder_status['folder_name'],					'NUM_NOT_MOVED'			=> $num_not_moved,					'NUM_REMOVED'			=> $num_removed,					'RELEASE_MESSAGE_INFO'	=> sprintf($user->lang['RELEASE_MESSAGES'], '<a href="' . $this->u_action . '&amp;folder=' . $folder_id . '&amp;release=1">', '</a>'),					'NOT_MOVED_MESSAGES'	=> ($num_not_moved == 1) ? $user->lang['NOT_MOVED_MESSAGE'] : sprintf($user->lang['NOT_MOVED_MESSAGES'], $num_not_moved),					'RULE_REMOVED_MESSAGES'	=> ($num_removed == 1) ? $user->lang['RULE_REMOVED_MESSAGE'] : sprintf($user->lang['RULE_REMOVED_MESSAGES'], $num_removed),					'S_FOLDER_OPTIONS'		=> $s_folder_options,					'S_TO_FOLDER_OPTIONS'	=> $s_to_folder_options,					'S_FOLDER_ACTION'		=> $this->u_action . '&amp;action=view_folder',					'S_PM_ACTION'			=> $this->u_action . '&amp;action=' . $action,					'U_INBOX'				=> $this->u_action . '&amp;folder=inbox',					'U_OUTBOX'				=> $this->u_action . '&amp;folder=outbox',					'U_SENTBOX'				=> $this->u_action . '&amp;folder=sentbox',					'U_CREATE_FOLDER'		=> $this->u_action . '&amp;mode=options',					'U_CURRENT_FOLDER'		=> $this->u_action . '&amp;folder=' . $folder_id,					'S_IN_INBOX'			=> ($folder_id == PRIVMSGS_INBOX) ? true : false,					'S_IN_OUTBOX'			=> ($folder_id == PRIVMSGS_OUTBOX) ? true : false,					'S_IN_SENTBOX'			=> ($folder_id == PRIVMSGS_SENTBOX) ? true : false,					'FOLDER_STATUS'				=> $folder_status['message'],					'FOLDER_MAX_MESSAGES'		=> $folder_status['max'],					'FOLDER_CUR_MESSAGES'		=> $folder_status['cur'],					'FOLDER_REMAINING_MESSAGES'	=> $folder_status['remaining'],					'FOLDER_PERCENT'			=> $folder_status['percent'])				);				if ($action == 'view_folder')				{					include($phpbb_root_path . 'includes/ucp/ucp_pm_viewfolder.' . $phpEx);					view_folder($id, $mode, $folder_id, $folder);					$tpl_file = 'ucp_pm_viewfolder';				}				else if ($action == 'view_message')				{					$template->assign_vars(array(						'S_VIEW_MESSAGE'	=> true,						'MSG_ID'			=> $msg_id)					);					if (!$msg_id)					{						trigger_error('NO_MESSAGE');					}					include($phpbb_root_path . 'includes/ucp/ucp_pm_viewmessage.' . $phpEx);					view_message($id, $mode, $folder_id, $msg_id, $folder, $message_row);					$tpl_file = ($view == 'print') ? 'ucp_pm_viewmessage_print' : 'ucp_pm_viewmessage';				}			break;			default:				trigger_error('NO_ACTION_MODE', E_USER_ERROR);			break;		}		$template->assign_vars(array(			'L_TITLE'			=> $user->lang['UCP_PM_' . strtoupper($mode)],			'S_UCP_ACTION'		=> $this->u_action . ((isset($action)) ? "&amp;action=$action" : ''))		);		// Set desired template		$this->tpl_name = $tpl_file;		$this->page_title = 'UCP_PM_' . strtoupper($mode);	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_bots{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $table_prefix;		$action = request_var('action', '');		$submit = (isset($_POST['submit'])) ? true : false;		$mark	= request_var('mark', array(0));		$bot_id	= request_var('id', 0);		if (isset($_POST['add']))		{			$action = 'add';		}		$error = array();		$user->add_lang('acp/bots');		$this->tpl_name = 'acp_bots';		$this->page_title = 'ACP_BOTS';		$form_key = 'acp_bots';		add_form_key($form_key);		if ($submit && !check_form_key($form_key))		{			$error[] = $user->lang['FORM_INVALID'];		}		// User wants to do something, how inconsiderate of them!		switch ($action)		{			case 'activate':				if ($bot_id || sizeof($mark))				{					$sql_id = ($bot_id) ? " = $bot_id" : ' IN (' . implode(', ', $mark) . ')';					$sql = 'UPDATE ' . BOTS_TABLE . "						SET bot_active = 1						WHERE bot_id $sql_id";					$db->sql_query($sql);				}				$cache->destroy('_bots');			break;			case 'deactivate':				if ($bot_id || sizeof($mark))				{					$sql_id = ($bot_id) ? " = $bot_id" : ' IN (' . implode(', ', $mark) . ')';					$sql = 'UPDATE ' . BOTS_TABLE . "						SET bot_active = 0						WHERE bot_id $sql_id";					$db->sql_query($sql);				}				$cache->destroy('_bots');			break;			case 'delete':				if ($bot_id || sizeof($mark))				{					if (confirm_box(true))					{						// We need to delete the relevant user, usergroup and bot entries ...						$sql_id = ($bot_id) ? " = $bot_id" : ' IN (' . implode(', ', $mark) . ')';						$sql = 'SELECT bot_name, user_id							FROM ' . BOTS_TABLE . "							WHERE bot_id $sql_id";						$result = $db->sql_query($sql);						$user_id_ary = $bot_name_ary = array();						while ($row = $db->sql_fetchrow($result))						{							$user_id_ary[] = (int) $row['user_id'];							$bot_name_ary[] = $row['bot_name'];						}						$db->sql_freeresult($result);						$db->sql_transaction('begin');						$sql = 'DELETE FROM ' . BOTS_TABLE . "							WHERE bot_id $sql_id";						$db->sql_query($sql);						if (sizeof($user_id_ary))						{							$_tables = array(USERS_TABLE, USER_GROUP_TABLE);							foreach ($_tables as $table)							{								$sql = "DELETE FROM $table									WHERE " . $db->sql_in_set('user_id', $user_id_ary);								$db->sql_query($sql);							}						}						$db->sql_transaction('commit');						$cache->destroy('_bots');						add_log('admin', 'LOG_BOT_DELETE', implode(', ', $bot_name_ary));						trigger_error($user->lang['BOT_DELETED'] . adm_back_link($this->u_action));					}					else					{						confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(							'mark'		=> $mark,							'id'		=> $bot_id,							'mode'		=> $mode,							'action'	=> $action))						);					}				}			break;			case 'edit':			case 'add':				include_once($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$bot_row = array(					'bot_name'		=> utf8_normalize_nfc(request_var('bot_name', '', true)),					'bot_agent'		=> request_var('bot_agent', ''),					'bot_ip'		=> request_var('bot_ip', ''),					'bot_active'	=> request_var('bot_active', true),					'bot_lang'		=> request_var('bot_lang', $config['default_lang']),					'bot_style'		=> request_var('bot_style' , $config['default_style']),				);				if ($submit)				{					if (!$bot_row['bot_agent'] && !$bot_row['bot_ip'])					{						$error[] = $user->lang['ERR_BOT_NO_MATCHES'];					}								if ($bot_row['bot_ip'] && !preg_match('#^[\d\.,:]+$#', $bot_row['bot_ip']))					{						if (!$ip_list = gethostbynamel($bot_row['bot_ip']))						{							$error[] = $user->lang['ERR_BOT_NO_IP'];						}						else						{							$bot_row['bot_ip'] = implode(',', $ip_list);						}					}					$bot_row['bot_ip'] = str_replace(' ', '', $bot_row['bot_ip']);					// Make sure the admin is not adding a bot with an user agent similar to his one					if ($bot_row['bot_agent'] && substr($user->data['session_browser'], 0, 149) === substr($bot_row['bot_agent'], 0, 149))					{						$error[] = $user->lang['ERR_BOT_AGENT_MATCHES_UA'];					}										$bot_name = false;					if ($bot_id)					{						$sql = 'SELECT u.username_clean							FROM ' . BOTS_TABLE . ' b, ' . USERS_TABLE . " u							WHERE b.bot_id = $bot_id								AND u.user_id = b.user_id";						$result = $db->sql_query($sql);						$row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$bot_row)						{							$error[] = $user->lang['NO_BOT'];						}						else						{							$bot_name = $row['username_clean'];						}					}					if (!$this->validate_botname($bot_row['bot_name'], $bot_name))					{						$error[] = $user->lang['BOT_NAME_TAKEN'];					}										if (!sizeof($error))					{						// New bot? Create a new user and group entry						if ($action == 'add')						{							$sql = 'SELECT group_id, group_colour								FROM ' . GROUPS_TABLE . "								WHERE group_name = 'BOTS'									AND group_type = " . GROUP_SPECIAL;							$result = $db->sql_query($sql);							$group_row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							if (!$group_row)							{								trigger_error($user->lang['NO_BOT_GROUP'] . adm_back_link($this->u_action . "&amp;id=$bot_id&amp;action=$action"), E_USER_WARNING);							}													$user_id = user_add(array(								'user_type'				=> (int) USER_IGNORE,								'group_id'				=> (int) $group_row['group_id'],								'username'				=> (string) $bot_row['bot_name'],								'user_regdate'			=> time(),								'user_password'			=> '',								'user_colour'			=> (string) $group_row['group_colour'],								'user_email'			=> '',								'user_lang'				=> (string) $bot_row['bot_lang'],								'user_style'			=> (int) $bot_row['bot_style'],								'user_allow_massemail'	=> 0,							));								$sql = 'INSERT INTO ' . BOTS_TABLE . ' ' . $db->sql_build_array('INSERT', array(								'user_id'		=> (int) $user_id,								'bot_name'		=> (string) $bot_row['bot_name'],								'bot_active'	=> (int) $bot_row['bot_active'],								'bot_agent'		=> (string) $bot_row['bot_agent'],								'bot_ip'		=> (string) $bot_row['bot_ip'])							);							$db->sql_query($sql);								$log = 'ADDED';						}						else if ($bot_id)						{							$sql = 'SELECT user_id, bot_name								FROM ' . BOTS_TABLE . "								WHERE bot_id = $bot_id";							$result = $db->sql_query($sql);							$row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							if (!$row)							{								trigger_error($user->lang['NO_BOT'] . adm_back_link($this->u_action . "&amp;id=$bot_id&amp;action=$action"), E_USER_WARNING);							}							$sql_ary = array(								'user_style'	=> (int) $bot_row['bot_style'],								'user_lang'		=> (string) $bot_row['bot_lang'],							);							if ($bot_row['bot_name'] !== $row['bot_name'])							{								$sql_ary['username'] = (string) $bot_row['bot_name'];								$sql_ary['username_clean'] = (string) utf8_clean_string($bot_row['bot_name']);							}							$sql = 'UPDATE ' . USERS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . " WHERE user_id = {$row['user_id']}";							$db->sql_query($sql);							$sql = 'UPDATE ' . BOTS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', array(								'bot_name'		=> (string) $bot_row['bot_name'],								'bot_active'	=> (int) $bot_row['bot_active'],								'bot_agent'		=> (string) $bot_row['bot_agent'],								'bot_ip'		=> (string) $bot_row['bot_ip'])							) . " WHERE bot_id = $bot_id";							$db->sql_query($sql);							// Updated username?							if ($bot_row['bot_name'] !== $row['bot_name'])							{								user_update_name($row['bot_name'], $bot_row['bot_name']);							}							$log = 'UPDATED';						}												$cache->destroy('_bots');												add_log('admin', 'LOG_BOT_' . $log, $bot_row['bot_name']);						trigger_error($user->lang['BOT_' . $log] . adm_back_link($this->u_action));										}				}				else if ($bot_id)				{					$sql = 'SELECT b.*, u.user_lang, u.user_style						FROM ' . BOTS_TABLE . ' b, ' . USERS_TABLE . " u						WHERE b.bot_id = $bot_id							AND u.user_id = b.user_id";					$result = $db->sql_query($sql);					$bot_row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if (!$bot_row)					{						trigger_error($user->lang['NO_BOT'] . adm_back_link($this->u_action . "&amp;id=$bot_id&amp;action=$action"), E_USER_WARNING);					}					$bot_row['bot_lang'] = $bot_row['user_lang'];					$bot_row['bot_style'] = $bot_row['user_style'];					unset($bot_row['user_lang'], $bot_row['user_style']);				}				$s_active_options = '';				$_options = array('0' => 'NO', '1' => 'YES');				foreach ($_options as $value => $lang)				{					$selected = ($bot_row['bot_active'] == $value) ? ' selected="selected"' : '';					$s_active_options .= '<option value="' . $value . '"' . $selected . '>' . $user->lang[$lang] . '</option>';				}				$style_select = style_select($bot_row['bot_style'], true);				$lang_select = language_select($bot_row['bot_lang']);				$l_title = ($action == 'edit') ? 'EDIT' : 'ADD';				$template->assign_vars(array(					'L_TITLE'		=> $user->lang['BOT_' . $l_title],					'U_ACTION'		=> $this->u_action . "&amp;id=$bot_id&amp;action=$action",					'U_BACK'		=> $this->u_action,					'ERROR_MSG'		=> (sizeof($error)) ? implode('<br />', $error) : '',										'BOT_NAME'		=> $bot_row['bot_name'],					'BOT_IP'		=> $bot_row['bot_ip'],					'BOT_AGENT'		=> $bot_row['bot_agent'],										'S_EDIT_BOT'		=> true,					'S_ACTIVE_OPTIONS'	=> $s_active_options,					'S_STYLE_OPTIONS'	=> $style_select,					'S_LANG_OPTIONS'	=> $lang_select,					'S_ERROR'			=> (sizeof($error)) ? true : false,					)				);				return;			break;		}		$s_options = '';		$_options = array('activate' => 'BOT_ACTIVATE', 'deactivate' => 'BOT_DEACTIVATE', 'delete' => 'DELETE');		foreach ($_options as $value => $lang)		{			$s_options .= '<option value="' . $value . '">' . $user->lang[$lang] . '</option>';		}		$template->assign_vars(array(			'U_ACTION'		=> $this->u_action,			'S_BOT_OPTIONS'	=> $s_options)		);		$sql = 'SELECT b.bot_id, b.bot_name, b.bot_active, u.user_lastvisit			FROM ' . BOTS_TABLE . ' b, ' . USERS_TABLE . ' u			WHERE u.user_id = b.user_id			ORDER BY u.user_lastvisit DESC, b.bot_name ASC';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$active_lang = (!$row['bot_active']) ? 'BOT_ACTIVATE' : 'BOT_DEACTIVATE';			$active_value = (!$row['bot_active']) ? 'activate' : 'deactivate';			$template->assign_block_vars('bots', array(				'BOT_NAME'		=> $row['bot_name'],				'BOT_ID'		=> $row['bot_id'],				'LAST_VISIT'	=> ($row['user_lastvisit']) ? $user->format_date($row['user_lastvisit']) : $user->lang['BOT_NEVER'],				'U_ACTIVATE_DEACTIVATE'	=> $this->u_action . "&amp;id={$row['bot_id']}&amp;action=$active_value",				'L_ACTIVATE_DEACTIVATE'	=> $user->lang[$active_lang],				'U_EDIT'				=> $this->u_action . "&amp;id={$row['bot_id']}&amp;action=edit",				'U_DELETE'				=> $this->u_action . "&amp;id={$row['bot_id']}&amp;action=delete")			);		}		$db->sql_freeresult($result);	}		/**	* Validate bot name against username table	*/	function validate_botname($newname, $oldname = false)	{		global $db;		if ($oldname && utf8_clean_string($newname) === $oldname)		{			return true;		}		// Admins might want to use names otherwise forbidden, thus we only check for duplicates.		$sql = 'SELECT username			FROM ' . USERS_TABLE . "			WHERE username_clean = '" . $db->sql_escape(utf8_clean_string($newname)) . "'";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);				return ($row) ? false : true;	}}?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2006, 2008 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}global $table_prefix;define('CAPTCHA_QUESTIONS_TABLE',	$table_prefix . 'captcha_questions');define('CAPTCHA_ANSWERS_TABLE',		$table_prefix . 'captcha_answers');define('CAPTCHA_QA_CONFIRM_TABLE',	$table_prefix . 'qa_confirm');/*** And now to something completely different. Let's make a captcha without extending the abstract class.* QA CAPTCHA sample implementation** @package VC*/class phpbb_captcha_qa{	var $confirm_id;	var $answer;	var $question_ids;	var $question_text;	var $question_lang;	var $question_strict;	var $attempts = 0;	var $type;	// dirty trick: 0 is false, but can still encode that the captcha is not yet validated	var $solved = 0;	/**	* @param int $type  as per the CAPTCHA API docs, the type	*/	function init($type)	{		global $config, $db, $user;		// load our language file		$user->add_lang('captcha_qa');		// read input		$this->confirm_id = request_var('qa_confirm_id', '');		$this->answer = utf8_normalize_nfc(request_var('qa_answer', '', true));		$this->type = (int) $type;		$this->question_lang = $user->lang_name;		// we need all defined questions - shouldn't be too many, so we can just grab them		// try the user's lang first		$sql = 'SELECT question_id			FROM ' . CAPTCHA_QUESTIONS_TABLE . "			WHERE lang_iso = '" . $db->sql_escape($user->lang_name) . "'";		$result = $db->sql_query($sql, 3600);		while ($row = $db->sql_fetchrow($result))		{			$this->question_ids[$row['question_id']] = $row['question_id'];		}		$db->sql_freeresult($result);		// fallback to the board default lang		if (!sizeof($this->question_ids))		{			$this->question_lang = $config['default_lang'];			$sql = 'SELECT question_id				FROM ' . CAPTCHA_QUESTIONS_TABLE . "				WHERE lang_iso = '" . $db->sql_escape($config['default_lang']) . "'";			$result = $db->sql_query($sql, 7200);			while ($row = $db->sql_fetchrow($result))			{				$this->question_ids[$row['question_id']] = $row['question_id'];			}			$db->sql_freeresult($result);		}			// okay, if there is a confirm_id, we try to load that confirm's state. If not, we try to find one		if (!$this->load_answer() && (!$this->load_confirm_id() || !$this->load_answer()))		{			// we have no valid confirm ID, better get ready to ask something			$this->select_question();		}	}	/**	*  API function	*/	function &get_instance()	{		$instance =& new phpbb_captcha_qa();		return $instance;	}	/**	* See if the captcha has created its tables.	*/	function is_installed()	{		global $db, $phpbb_root_path, $phpEx;		if (!class_exists('phpbb_db_tools'))		{			include("$phpbb_root_path/includes/db/db_tools.$phpEx");		}		$db_tool = new phpbb_db_tools($db);		return $db_tool->sql_table_exists(CAPTCHA_QUESTIONS_TABLE);	}	/**	*  API function - for the captcha to be available, it must have installed itself and there has to be at least one question in the board's default lang	*/	function is_available()	{		global $config, $db, $phpbb_root_path, $phpEx, $user;		// load language file for pretty display in the ACP dropdown		$user->add_lang('captcha_qa');		if (!phpbb_captcha_qa::is_installed())		{			return false;		}		$sql = 'SELECT COUNT(question_id) AS question_count			FROM ' . CAPTCHA_QUESTIONS_TABLE . "			WHERE lang_iso = '" . $db->sql_escape($config['default_lang']) . "'";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		return ((bool) $row['question_count']);	}	/**	*  API function	*/	function has_config()	{		return true;	}	/**	*  API function	*/	function get_name()	{		return 'CAPTCHA_QA';	}	/**	*  API function	*/	function get_class_name()	{		return 'phpbb_captcha_qa';	}	/**	*  API function - not needed as we don't display an image	*/	function execute_demo()	{	}	/**	*  API function - not needed as we don't display an image	*/	function execute()	{	}	/**	*  API function - send the question to the template	*/	function get_template()	{		global $template;		if ($this->is_solved())		{			return false;		}		else		{			$template->assign_vars(array(				'QA_CONFIRM_QUESTION'		=> $this->question_text,				'QA_CONFIRM_ID'				=> $this->confirm_id,				'S_CONFIRM_CODE'			=> true,				'S_TYPE'					=> $this->type,			));			return 'captcha_qa.html';		}	}	/**	*  API function - we just display a mockup so that the captcha doesn't need to be installed	*/	function get_demo_template()	{		global $config, $db, $template;		if ($this->is_available())		{			$sql = 'SELECT question_text				FROM ' . CAPTCHA_QUESTIONS_TABLE . "				WHERE lang_iso = '" . $db->sql_escape($config['default_lang']) . "'";			$result = $db->sql_query_limit($sql, 1);			if ($row = $db->sql_fetchrow($result))			{				$template->assign_vars(array(					'QA_CONFIRM_QUESTION'		=> $row['question_text'],				));			}			$db->sql_freeresult($result);		}		return 'captcha_qa_acp_demo.html';	}	/**	*  API function	*/	function get_hidden_fields()	{		$hidden_fields = array();		// this is required - otherwise we would forget about the captcha being already solved		if ($this->solved)		{			$hidden_fields['qa_answer'] = $this->answer;		}		$hidden_fields['qa_confirm_id'] = $this->confirm_id;		return $hidden_fields;	}	/**	*  API function	*/	function garbage_collect($type = 0)	{		global $db, $config;		$sql = 'SELECT c.confirm_id			FROM ' . CAPTCHA_QA_CONFIRM_TABLE . ' c			LEFT JOIN ' . SESSIONS_TABLE . ' s				ON (c.session_id = s.session_id)			WHERE s.session_id IS NULL' .				((empty($type)) ? '' : ' AND c.confirm_type = ' . (int) $type);		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			$sql_in = array();			do			{				$sql_in[] = (string) $row['confirm_id'];			}			while ($row = $db->sql_fetchrow($result));			if (sizeof($sql_in))			{				$sql = 'DELETE FROM ' . CAPTCHA_QA_CONFIRM_TABLE . '					WHERE ' . $db->sql_in_set('confirm_id', $sql_in);				$db->sql_query($sql);			}		}		$db->sql_freeresult($result);	}	/**	*  API function - we don't drop the tables here, as that would cause the loss of all entered questions.	*/	function uninstall()	{		$this->garbage_collect(0);	}	/**	*  API function - set up shop	*/	function install()	{		global $db, $phpbb_root_path, $phpEx;		if (!class_exists('phpbb_db_tools'))		{			include("$phpbb_root_path/includes/db/db_tools.$phpEx");		}		$db_tool = new phpbb_db_tools($db);		$tables = array(CAPTCHA_QUESTIONS_TABLE, CAPTCHA_ANSWERS_TABLE, CAPTCHA_QA_CONFIRM_TABLE);		$schemas = array(				CAPTCHA_QUESTIONS_TABLE		=> array (					'COLUMNS' => array(						'question_id'	=> array('UINT', Null, 'auto_increment'),						'strict'		=> array('BOOL', 0),						'lang_id'		=> array('UINT', 0),						'lang_iso'		=> array('VCHAR:30', ''),						'question_text'	=> array('TEXT_UNI', ''),					),					'PRIMARY_KEY'		=> 'question_id',					'KEYS'				=> array(						'lang'			=> array('INDEX', 'lang_iso'),					),				),				CAPTCHA_ANSWERS_TABLE		=> array (					'COLUMNS' => array(						'question_id'	=> array('UINT', 0),						'answer_text'	=> array('STEXT_UNI', ''),					),					'KEYS'				=> array(						'qid'			=> array('INDEX', 'question_id'),					),				),				CAPTCHA_QA_CONFIRM_TABLE		=> array (					'COLUMNS' => array(						'session_id'	=> array('CHAR:32', ''),						'confirm_id'	=> array('CHAR:32', ''),						'lang_iso'		=> array('VCHAR:30', ''),						'question_id'	=> array('UINT', 0),						'attempts'		=> array('UINT', 0),						'confirm_type'	=> array('USINT', 0),					),					'KEYS'				=> array(						'session_id'			=> array('INDEX', 'session_id'),						'lookup'				=> array('INDEX', array('confirm_id', 'session_id', 'lang_iso')),					),					'PRIMARY_KEY'		=> 'confirm_id',				),		);		foreach($schemas as $table => $schema)		{			if (!$db_tool->sql_table_exists($table))			{				$db_tool->sql_create_table($table, $schema);			}		}	}	/**	*  API function - see what has to be done to validate	*/	function validate()	{		global $config, $db, $user;		$error = '';				if (!sizeof($this->question_ids))		{			return false;		}				if (!$this->confirm_id)		{			$error = $user->lang['CONFIRM_QUESTION_WRONG'];		}		else		{			if ($this->check_answer())			{				// $this->delete_code(); commented out to allow posting.php to repeat the question				$this->solved = true;			}			else			{				$error = $user->lang['CONFIRM_QUESTION_WRONG'];			}		}		if (strlen($error))		{			// okay, incorrect answer. Let's ask a new question.			$this->new_attempt();			$this->solved = false;			return $error;		}		else		{			return false;		}	}	/**	*  Select a question	*/	function select_question()	{		global $db, $user;		if (!sizeof($this->question_ids))		{			return false;		}		$this->confirm_id = md5(unique_id($user->ip));		$this->question = (int) array_rand($this->question_ids);		$sql = 'INSERT INTO ' . CAPTCHA_QA_CONFIRM_TABLE . ' ' . $db->sql_build_array('INSERT', array(			'confirm_id'	=> (string) $this->confirm_id,			'session_id'	=> (string) $user->session_id,			'lang_iso'		=> (string) $this->question_lang,			'confirm_type'	=> (int) $this->type,			'question_id'	=> (int) $this->question,		));		$db->sql_query($sql);		$this->load_answer();	}	/**	* New Question, if desired.	*/	function reselect_question()	{		global $db, $user;				if (!sizeof($this->question_ids))		{			return false;		}		$this->question = (int) array_rand($this->question_ids);		$this->solved = 0;		$sql = 'UPDATE ' . CAPTCHA_QA_CONFIRM_TABLE . '			SET question_id = ' . (int) $this->question . "			WHERE confirm_id = '" . $db->sql_escape($this->confirm_id) . "'				AND session_id = '" . $db->sql_escape($user->session_id) . "'";		$db->sql_query($sql);		$this->load_answer();	}	/**	* Wrong answer, so we increase the attempts and use a different question.	*/	function new_attempt()	{		global $db, $user;		// yah, I would prefer a stronger rand, but this should work		$this->question = (int) array_rand($this->question_ids);		$this->solved = 0;		$sql = 'UPDATE ' . CAPTCHA_QA_CONFIRM_TABLE . '			SET question_id = ' . (int) $this->question . ",				attempts = attempts + 1			WHERE confirm_id = '" . $db->sql_escape($this->confirm_id) . "'				AND session_id = '" . $db->sql_escape($user->session_id) . "'";		$db->sql_query($sql);		$this->load_answer();	}	/**	* See if there is already an entry for the current session.	*/	function load_confirm_id()	{		global $db, $user;		$sql = 'SELECT confirm_id			FROM ' . CAPTCHA_QA_CONFIRM_TABLE . " 			WHERE 				session_id = '" . $db->sql_escape($user->session_id) . "'				AND lang_iso = '" . $db->sql_escape($this->question_lang) . "'				AND confirm_type = " . $this->type;		$result = $db->sql_query_limit($sql, 1);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			$this->confirm_id = $row['confirm_id'];			return true;		}		return false;	}	/**	* Look up everything we need and populate the instance variables.	*/	function load_answer()	{		global $db, $user;				if (!strlen($this->confirm_id) || !sizeof($this->question_ids))		{			return false;		}		$sql = 'SELECT con.question_id, attempts, question_text, strict			FROM ' . CAPTCHA_QA_CONFIRM_TABLE . ' con, ' . CAPTCHA_QUESTIONS_TABLE . " qes			WHERE con.question_id = qes.question_id				AND confirm_id = '" . $db->sql_escape($this->confirm_id) . "'				AND session_id = '" . $db->sql_escape($user->session_id) . "'				AND qes.lang_iso = '" . $db->sql_escape($this->question_lang) . "'				AND confirm_type = " . $this->type;		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			$this->question = $row['question_id'];			$this->attempts = $row['attempts'];			$this->question_strict = $row['strict'];			$this->question_text = $row['question_text'];			return true;		}		return false;	}	/**	*  The actual validation	*/	function check_answer()	{		global $db;		$answer = ($this->question_strict) ? utf8_normalize_nfc(request_var('qa_answer', '', true)) : utf8_clean_string(utf8_normalize_nfc(request_var('qa_answer', '', true)));		$sql = 'SELECT answer_text			FROM ' . CAPTCHA_ANSWERS_TABLE . '			WHERE question_id = ' . (int) $this->question;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$solution = ($this->question_strict) ? $row['answer_text'] : utf8_clean_string($row['answer_text']);			if ($solution === $answer)			{				$this->solved = true;				break;			}		}		$db->sql_freeresult($result);		return $this->solved;	}	/**	*  API function - clean the entry	*/	function delete_code()	{		global $db, $user;		$sql = 'DELETE FROM ' . CAPTCHA_QA_CONFIRM_TABLE . "			WHERE confirm_id = '" . $db->sql_escape($confirm_id) . "'				AND session_id = '" . $db->sql_escape($user->session_id) . "'				AND confirm_type = " . $this->type;		$db->sql_query($sql);	}	/**	*  API function	*/	function get_attempt_count()	{		return $this->attempts;	}	/**	*  API function	*/	function reset()	{		global $db, $user;		$sql = 'DELETE FROM ' . CAPTCHA_QA_CONFIRM_TABLE . "			WHERE session_id = '" . $db->sql_escape($user->session_id) . "'				AND confirm_type = " . (int) $this->type;		$db->sql_query($sql);		// we leave the class usable by generating a new question		$this->select_question();	}	/**	*  API function	*/	function is_solved()	{		if (request_var('qa_answer', false) && $this->solved === 0)		{			$this->validate();		}		return (bool) $this->solved;	}	/**	*  API function - The ACP backend, this marks the end of the easy methods	*/	function acp_page($id, &$module)	{		global $db, $user, $auth, $template;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('acp/board');		$user->add_lang('captcha_qa');		if (!$this->is_installed())		{			$this->install();		}		$module->tpl_name = 'captcha_qa_acp';		$module->page_title = 'ACP_VC_SETTINGS';		$form_key = 'acp_captcha';		add_form_key($form_key);		$submit = request_var('submit', false);		$question_id = request_var('question_id', 0);		$action = request_var('action', '');		// we have two pages, so users might want to navigate from one to the other		$list_url = $module->u_action . "&amp;configure=1&amp;select_captcha=" . $this->get_class_name();		$template->assign_vars(array(			'U_ACTION'		=> $module->u_action,			'QUESTION_ID'	=> $question_id ,			'CLASS'			=> $this->get_class_name(),		));		// show the list?		if (!$question_id && $action != 'add')		{			$this->acp_question_list($module);		}		else if ($question_id && $action == 'delete')		{			if ($this->get_class_name() !== $config['captcha_plugin'] || !$this->acp_is_last($question_id))			{				if (confirm_box(true))				{					$this->acp_delete_question($question_id);					trigger_error($user->lang['QUESTION_DELETED'] . adm_back_link($list_url));				}				else				{					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(						'question_id'		=> $question_id,						'action'			=> $action,						'configure'			=> 1,						'select_captcha'	=> $this->get_class_name(),						))					);				}			}			else			{				trigger_error($user->lang['QA_LAST_QUESTION'] . adm_back_link($list_url), E_USER_WARNING);			}		}		else		{			// okay, show the editor			$error = false;			$input_question = request_var('question_text', '', true);			$input_answers = request_var('answers', '', true);			$input_lang = request_var('lang_iso', '', true);			$input_strict = request_var('strict', false);			$langs = $this->get_languages();			foreach ($langs as $lang => $entry)			{				$template->assign_block_vars('langs', array(					'ISO' => $lang,					'NAME' => $entry['name'],				));			}			$template->assign_vars(array(				'U_LIST' => $list_url,			));			if ($question_id)			{				if ($question = $this->acp_get_question_data($question_id))				{					$answers = (isset($input_answers[$lang])) ? $input_answers[$lang] : implode("\n", $question['answers']);					$template->assign_vars(array(						'QUESTION_TEXT'		=> ($input_question) ? $input_question : $question['question_text'],						'LANG_ISO'			=> ($input_lang) ? $input_lang : $question['lang_iso'],						'STRICT'			=> (isset($_REQUEST['strict'])) ? $input_strict : $question['strict'],						'ANSWERS'			=> $answers,					));				}				else				{					trigger_error($user->lang['FORM_INVALID'] . adm_back_link($list_url));				}			}			else			{				$template->assign_vars(array(					'QUESTION_TEXT'		=> $input_question,					'LANG_ISO'			=> $input_lang,					'STRICT'			=> $input_strict,					'ANSWERS'			=> $input_answers,				));			}			if ($submit && check_form_key($form_key))			{				$data = $this->acp_get_question_input();				if (!$this->validate_input($data))				{					$template->assign_vars(array(						'S_ERROR'			=> true,					));				}				else				{					if ($question_id)					{						$this->acp_update_question($data, $question_id);					}					else					{						$this->acp_add_question($data);					}					add_log('admin', 'LOG_CONFIG_VISUAL');					trigger_error($user->lang['CONFIG_UPDATED'] . adm_back_link($list_url));				}			}			else if ($submit)			{				trigger_error($user->lang['FORM_INVALID'] . adm_back_link($list_url), E_USER_WARNING);			}		}	}	/**	*  This handles the list overview	*/	function acp_question_list(&$module)	{		global $db, $template;		$sql = 'SELECT *			FROM ' . CAPTCHA_QUESTIONS_TABLE;		$result = $db->sql_query($sql);		$template->assign_vars(array(			'S_LIST'			=> true,		));		while ($row = $db->sql_fetchrow($result))		{			$url = $module->u_action . "&amp;question_id={$row['question_id']}&amp;configure=1&amp;select_captcha=" . $this->get_class_name() . '&amp;';			$template->assign_block_vars('questions', array(				'QUESTION_TEXT'		=> $row['question_text'],				'QUESTION_ID'		=> $row['question_id'],				'QUESTION_LANG'		=> $row['lang_iso'],				'U_DELETE'			=> "{$url}action=delete",				'U_EDIT'			=> "{$url}action=edit",			));		}		$db->sql_freeresult($result);	}	/**	*  Grab a question and bring it into a format the editor understands	*/	function acp_get_question_data($question_id)	{		global $db;		if ($question_id)		{			$sql = 'SELECT *				FROM ' . CAPTCHA_QUESTIONS_TABLE . '				WHERE question_id = ' . $question_id;			$result = $db->sql_query($sql);			$question = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$question)			{				return false;			}			$question['answers'] = array();			$sql = 'SELECT *				FROM ' . CAPTCHA_ANSWERS_TABLE . '				WHERE question_id = ' . $question_id;			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$question['answers'][] = $row['answer_text'];			}			$db->sql_freeresult($result);			return $question;		}	}	/**	*  Grab a question from input and bring it into a format the editor understands	*/	function acp_get_question_input()	{		$answers = utf8_normalize_nfc(request_var('answers', '', true));		$question = array(			'question_text'	=> request_var('question_text', '', true),			'strict'		=> request_var('strict', false),			'lang_iso'		=> request_var('lang_iso', ''),			'answers'		=> (strlen($answers)) ? explode("\n", $answers) : '',		);		return $question;	}	/**	*  Update a question.	* param mixed $data : an array as created from acp_get_question_input or acp_get_question_data	*/	function acp_update_question($data, $question_id)	{		global $db, $cache;		// easier to delete all answers than to figure out which to update		$sql = 'DELETE FROM ' . CAPTCHA_ANSWERS_TABLE . " WHERE question_id = $question_id";		$db->sql_query($sql);		$langs = $this->get_languages();		$question_ary = $data;		$question_ary['lang_id'] = $langs[$question_ary['lang_iso']]['id'];		unset($question_ary['answers']);		$sql = 'UPDATE ' . CAPTCHA_QUESTIONS_TABLE . '			SET ' . $db->sql_build_array('UPDATE', $question_ary) . "			WHERE question_id = $question_id";		$db->sql_query($sql);		$this->acp_insert_answers($data, $question_id);		$cache->destroy('sql', CAPTCHA_QUESTIONS_TABLE);	}	/**	*  Insert a question.	* param mixed $data : an array as created from acp_get_question_input or acp_get_question_data	*/	function acp_add_question($data)	{		global $db, $cache;		$langs = $this->get_languages();		$question_ary = $data;		$question_ary['lang_id'] = $langs[$data['lang_iso']]['id'];		unset($question_ary['answers']);		$sql = 'INSERT INTO ' . CAPTCHA_QUESTIONS_TABLE . ' ' . $db->sql_build_array('INSERT', $question_ary);		$db->sql_query($sql);		$question_id = $db->sql_nextid();		$this->acp_insert_answers($data, $question_id);		$cache->destroy('sql', CAPTCHA_QUESTIONS_TABLE);	}	/**	*  Insert the answers.	* param mixed $data : an array as created from acp_get_question_input or acp_get_question_data	*/	function acp_insert_answers($data, $question_id)	{		global $db, $cache;		foreach ($data['answers'] as $answer)		{			$answer_ary = array(				'question_id'	=> $question_id,				'answer_text'	=> $answer,			);			$sql = 'INSERT INTO ' . CAPTCHA_ANSWERS_TABLE . ' ' . $db->sql_build_array('INSERT', $answer_ary);			$db->sql_query($sql);		}		$cache->destroy('sql', CAPTCHA_ANSWERS_TABLE);	}	/**	*  Delete a question.	*/	function acp_delete_question($question_id)	{		global $db, $cache;		$tables = array(CAPTCHA_QUESTIONS_TABLE, CAPTCHA_ANSWERS_TABLE);		foreach ($tables as $table)		{			$sql = "DELETE FROM $table				WHERE question_id = $question_id";			$db->sql_query($sql);		}		$cache->destroy('sql', $tables);	}	/**	*  Check if the entered data can be inserted/used	* param mixed $data : an array as created from acp_get_question_input or acp_get_question_data	*/	function validate_input($question_data)	{		$langs = $this->get_languages();		if (!isset($question_data['lang_iso']) ||			!isset($question_data['question_text']) ||			!isset($question_data['strict']) ||			!isset($question_data['answers']))		{			return false;		}		if (!isset($langs[$question_data['lang_iso']]) ||			!strlen($question_data['question_text']) ||			!sizeof($question_data['answers']) ||			!is_array($question_data['answers']))		{			return false;		}		return true;	}	/**	* List the installed language packs	*/	function get_languages()	{		global $db;		$sql = 'SELECT *			FROM ' . LANG_TABLE;		$result = $db->sql_query($sql);		$langs = array();		while ($row = $db->sql_fetchrow($result))		{			$langs[$row['lang_iso']] = array(				'name'	=> $row['lang_local_name'],				'id'	=> (int) $row['lang_id'],			);		}		$db->sql_freeresult($result);		return $langs;	}				/**	*  See if there is a question other than the one we have	*/	function acp_is_last($question_id)	{		global $config, $db;		if ($question_id)		{			$sql = 'SELECT question_id				FROM ' . CAPTCHA_QUESTIONS_TABLE . "				WHERE lang_iso = '" . $db->sql_escape($config['default_lang']) . "'					AND  question_id <> " .  (int) $question_id;			$result = $db->sql_query_limit($sql, 1);			$question = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$question)			{				return true;			}			return false;		}	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Permission/Auth class* @package phpBB3*/class auth{	var $acl = array();	var $cache = array();	var $acl_options = array();	var $acl_forum_ids = false;	/**	* Init permissions	*/	function acl(&$userdata)	{		global $db, $cache;		$this->acl = $this->cache = $this->acl_options = array();		$this->acl_forum_ids = false;		if (($this->acl_options = $cache->get('_acl_options')) === false)		{			$sql = 'SELECT auth_option_id, auth_option, is_global, is_local				FROM ' . ACL_OPTIONS_TABLE . '				ORDER BY auth_option_id';			$result = $db->sql_query($sql);			$global = $local = 0;			$this->acl_options = array();			while ($row = $db->sql_fetchrow($result))			{				if ($row['is_global'])				{					$this->acl_options['global'][$row['auth_option']] = $global++;				}				if ($row['is_local'])				{					$this->acl_options['local'][$row['auth_option']] = $local++;				}				$this->acl_options['id'][$row['auth_option']] = (int) $row['auth_option_id'];				$this->acl_options['option'][(int) $row['auth_option_id']] = $row['auth_option'];			}			$db->sql_freeresult($result);			$cache->put('_acl_options', $this->acl_options);		}		if (!trim($userdata['user_permissions']))		{			$this->acl_cache($userdata);		}		// Fill ACL array		$this->_fill_acl($userdata['user_permissions']);		// Verify bitstring length with options provided...		$renew = false;		$global_length = sizeof($this->acl_options['global']);		$local_length = sizeof($this->acl_options['local']);		// Specify comparing length (bitstring is padded to 31 bits)		$global_length = ($global_length % 31) ? ($global_length - ($global_length % 31) + 31) : $global_length;		$local_length = ($local_length % 31) ? ($local_length - ($local_length % 31) + 31) : $local_length;		// You thought we are finished now? Noooo... now compare them.		foreach ($this->acl as $forum_id => $bitstring)		{			if (($forum_id && strlen($bitstring) != $local_length) || (!$forum_id && strlen($bitstring) != $global_length))			{				$renew = true;				break;			}		}		// If a bitstring within the list does not match the options, we have a user with incorrect permissions set and need to renew them		if ($renew)		{			$this->acl_cache($userdata);			$this->_fill_acl($userdata['user_permissions']);		}		return;	}	/**	* Fill ACL array with relevant bitstrings from user_permissions column	* @access private	*/	function _fill_acl($user_permissions)	{		$seq_cache = array();		$this->acl = array();		$user_permissions = explode("\n", $user_permissions);		foreach ($user_permissions as $f => $seq)		{			if ($seq)			{				$i = 0;				if (!isset($this->acl[$f]))				{					$this->acl[$f] = '';				}				while ($subseq = substr($seq, $i, 6))				{					if (isset($seq_cache[$subseq]))					{						$converted = $seq_cache[$subseq];					}					else					{						$converted = $seq_cache[$subseq] = str_pad(base_convert($subseq, 36, 2), 31, 0, STR_PAD_LEFT);					}					// We put the original bitstring into the acl array					$this->acl[$f] .= $converted;					$i += 6;				}			}		}	}	/**	* Look up an option	* if the option is prefixed with !, then the result becomes negated	*	* If a forum id is specified the local option will be combined with a global option if one exist.	* If a forum id is not specified, only the global option will be checked.	*/	function acl_get($opt, $f = 0)	{		$negate = false;		if (strpos($opt, '!') === 0)		{			$negate = true;			$opt = substr($opt, 1);		}		if (!isset($this->cache[$f][$opt]))		{			// We combine the global/local option with an OR because some options are global and local.			// If the user has the global permission the local one is true too and vice versa			$this->cache[$f][$opt] = false;			// Is this option a global permission setting?			if (isset($this->acl_options['global'][$opt]))			{				if (isset($this->acl[0]))				{					$this->cache[$f][$opt] = $this->acl[0][$this->acl_options['global'][$opt]];				}			}			// Is this option a local permission setting?			// But if we check for a global option only, we won't combine the options...			if ($f != 0 && isset($this->acl_options['local'][$opt]))			{				if (isset($this->acl[$f]) && isset($this->acl[$f][$this->acl_options['local'][$opt]]))				{					$this->cache[$f][$opt] |= $this->acl[$f][$this->acl_options['local'][$opt]];				}			}		}		// Founder always has all global options set to true...		return ($negate) ? !$this->cache[$f][$opt] : $this->cache[$f][$opt];	}	/**	* Get forums with the specified permission setting	* if the option is prefixed with !, then the result becomes nagated	*	* @param bool $clean set to true if only values needs to be returned which are set/unset	*/	function acl_getf($opt, $clean = false)	{		$acl_f = array();		$negate = false;		if (strpos($opt, '!') === 0)		{			$negate = true;			$opt = substr($opt, 1);		}		// If we retrieve a list of forums not having permissions in, we need to get every forum_id		if ($negate)		{			if ($this->acl_forum_ids === false)			{				global $db;				$sql = 'SELECT forum_id					FROM ' . FORUMS_TABLE;				if (sizeof($this->acl))				{					$sql .= ' WHERE ' . $db->sql_in_set('forum_id', array_keys($this->acl), true);				}				$result = $db->sql_query($sql);				$this->acl_forum_ids = array();				while ($row = $db->sql_fetchrow($result))				{					$this->acl_forum_ids[] = $row['forum_id'];				}				$db->sql_freeresult($result);			}		}		if (isset($this->acl_options['local'][$opt]))		{			foreach ($this->acl as $f => $bitstring)			{				// Skip global settings				if (!$f)				{					continue;				}				$allowed = (!isset($this->cache[$f][$opt])) ? $this->acl_get($opt, $f) : $this->cache[$f][$opt];				if (!$clean)				{					$acl_f[$f][$opt] = ($negate) ? !$allowed : $allowed;				}				else				{					if (($negate && !$allowed) || (!$negate && $allowed))					{						$acl_f[$f][$opt] = 1;					}				}			}		}		// If we get forum_ids not having this permission, we need to fill the remaining parts		if ($negate && sizeof($this->acl_forum_ids))		{			foreach ($this->acl_forum_ids as $f)			{				$acl_f[$f][$opt] = 1;			}		}		return $acl_f;	}	/**	* Get local permission state for any forum.	*	* Returns true if user has the permission in one or more forums, false if in no forum.	* If global option is checked it returns the global state (same as acl_get($opt))	* Local option has precedence...	*/	function acl_getf_global($opt)	{		if (is_array($opt))		{			// evaluates to true as soon as acl_getf_global is true for one option			foreach ($opt as $check_option)			{				if ($this->acl_getf_global($check_option))				{					return true;				}			}			return false;		}		if (isset($this->acl_options['local'][$opt]))		{			foreach ($this->acl as $f => $bitstring)			{				// Skip global settings				if (!$f)				{					continue;				}				// as soon as the user has any permission we're done so return true				if ((!isset($this->cache[$f][$opt])) ? $this->acl_get($opt, $f) : $this->cache[$f][$opt])				{					return true;				}			}		}		else if (isset($this->acl_options['global'][$opt]))		{			return $this->acl_get($opt);		}		return false;	}	/**	* Get permission settings (more than one)	*/	function acl_gets()	{		$args = func_get_args();		$f = array_pop($args);		if (!is_numeric($f))		{			$args[] = $f;			$f = 0;		}		// alternate syntax: acl_gets(array('m_', 'a_'), $forum_id)		if (is_array($args[0]))		{			$args = $args[0];		}		$acl = 0;		foreach ($args as $opt)		{			$acl |= $this->acl_get($opt, $f);		}		return $acl;	}	/**	* Get permission listing based on user_id/options/forum_ids	*	* Be careful when using this function with permissions a_, m_, u_ and f_ !	* It may not work correctly. When a user group grants an a_* permission,	* e.g. a_foo, but the user's a_foo permission is set to "Never", then	* the user does not in fact have the a_ permission.	* But the user will still be listed as having the a_ permission.	*	* For more information see: http://tracker.phpbb.com/browse/PHPBB3-10252	*/	function acl_get_list($user_id = false, $opts = false, $forum_id = false)	{		if ($user_id !== false && !is_array($user_id) && $opts === false && $forum_id === false)		{			$hold_ary = array($user_id => $this->acl_raw_data_single_user($user_id));		}		else		{			$hold_ary = $this->acl_raw_data($user_id, $opts, $forum_id);		}		$auth_ary = array();		foreach ($hold_ary as $user_id => $forum_ary)		{			foreach ($forum_ary as $forum_id => $auth_option_ary)			{				foreach ($auth_option_ary as $auth_option => $auth_setting)				{					if ($auth_setting)					{						$auth_ary[$forum_id][$auth_option][] = $user_id;					}				}			}		}		return $auth_ary;	}	/**	* Cache data to user_permissions row	*/	function acl_cache(&$userdata)	{		global $db;		// Empty user_permissions		$userdata['user_permissions'] = '';		$hold_ary = $this->acl_raw_data_single_user($userdata['user_id']);		// Key 0 in $hold_ary are global options, all others are forum_ids		// If this user is founder we're going to force fill the admin options ...		if ($userdata['user_type'] == USER_FOUNDER)		{			foreach ($this->acl_options['global'] as $opt => $id)			{				if (strpos($opt, 'a_') === 0)				{					$hold_ary[0][$this->acl_options['id'][$opt]] = ACL_YES;				}			}		}		$hold_str = $this->build_bitstring($hold_ary);		if ($hold_str)		{			$userdata['user_permissions'] = $hold_str;			$sql = 'UPDATE ' . USERS_TABLE . "				SET user_permissions = '" . $db->sql_escape($userdata['user_permissions']) . "',					user_perm_from = 0				WHERE user_id = " . $userdata['user_id'];			$db->sql_query($sql);		}		return;	}	/**	* Build bitstring from permission set	*/	function build_bitstring(&$hold_ary)	{		$hold_str = '';		if (sizeof($hold_ary))		{			ksort($hold_ary);			$last_f = 0;			foreach ($hold_ary as $f => $auth_ary)			{				$ary_key = (!$f) ? 'global' : 'local';				$bitstring = array();				foreach ($this->acl_options[$ary_key] as $opt => $id)				{					if (isset($auth_ary[$this->acl_options['id'][$opt]]))					{						$bitstring[$id] = $auth_ary[$this->acl_options['id'][$opt]];						$option_key = substr($opt, 0, strpos($opt, '_') + 1);						// If one option is allowed, the global permission for this option has to be allowed too						// example: if the user has the a_ permission this means he has one or more a_* permissions						if ($auth_ary[$this->acl_options['id'][$opt]] == ACL_YES && (!isset($bitstring[$this->acl_options[$ary_key][$option_key]]) || $bitstring[$this->acl_options[$ary_key][$option_key]] == ACL_NEVER))						{							$bitstring[$this->acl_options[$ary_key][$option_key]] = ACL_YES;						}					}					else					{						$bitstring[$id] = ACL_NEVER;					}				}				// Now this bitstring defines the permission setting for the current forum $f (or global setting)				$bitstring = implode('', $bitstring);				// The line number indicates the id, therefore we have to add empty lines for those ids not present				$hold_str .= str_repeat("\n", $f - $last_f);				// Convert bitstring for storage - we do not use binary/bytes because PHP's string functions are not fully binary safe				for ($i = 0, $bit_length = strlen($bitstring); $i < $bit_length; $i += 31)				{					$hold_str .= str_pad(base_convert(str_pad(substr($bitstring, $i, 31), 31, 0, STR_PAD_RIGHT), 2, 36), 6, 0, STR_PAD_LEFT);				}				$last_f = $f;			}			unset($bitstring);			$hold_str = rtrim($hold_str);		}		return $hold_str;	}	/**	* Clear one or all users cached permission settings	*/	function acl_clear_prefetch($user_id = false)	{		global $db, $cache;		// Rebuild options cache		$cache->destroy('_role_cache');		$sql = 'SELECT *			FROM ' . ACL_ROLES_DATA_TABLE . '			ORDER BY role_id ASC';		$result = $db->sql_query($sql);		$this->role_cache = array();		while ($row = $db->sql_fetchrow($result))		{			$this->role_cache[$row['role_id']][$row['auth_option_id']] = (int) $row['auth_setting'];		}		$db->sql_freeresult($result);		foreach ($this->role_cache as $role_id => $role_options)		{			$this->role_cache[$role_id] = serialize($role_options);		}		$cache->put('_role_cache', $this->role_cache);		// Now empty user permissions		$where_sql = '';		if ($user_id !== false)		{			$user_id = (!is_array($user_id)) ? $user_id = array((int) $user_id) : array_map('intval', $user_id);			$where_sql = ' WHERE ' . $db->sql_in_set('user_id', $user_id);		}		$sql = 'UPDATE ' . USERS_TABLE . "			SET user_permissions = '',				user_perm_from = 0			$where_sql";		$db->sql_query($sql);		return;	}	/**	* Get assigned roles	*/	function acl_role_data($user_type, $role_type, $ug_id = false, $forum_id = false)	{		global $db;		$roles = array();		$sql_id = ($user_type == 'user') ? 'user_id' : 'group_id';		$sql_ug = ($ug_id !== false) ? ((!is_array($ug_id)) ? "AND a.$sql_id = $ug_id" : 'AND ' . $db->sql_in_set("a.$sql_id", $ug_id)) : '';		$sql_forum = ($forum_id !== false) ? ((!is_array($forum_id)) ? "AND a.forum_id = $forum_id" : 'AND ' . $db->sql_in_set('a.forum_id', $forum_id)) : '';		// Grab assigned roles...		$sql = 'SELECT a.auth_role_id, a.' . $sql_id . ', a.forum_id			FROM ' . (($user_type == 'user') ? ACL_USERS_TABLE : ACL_GROUPS_TABLE) . ' a, ' . ACL_ROLES_TABLE . " r			WHERE a.auth_role_id = r.role_id				AND r.role_type = '" . $db->sql_escape($role_type) . "'				$sql_ug				$sql_forum			ORDER BY r.role_order ASC";		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$roles[$row[$sql_id]][$row['forum_id']] = $row['auth_role_id'];		}		$db->sql_freeresult($result);		return $roles;	}	/**	* Get raw acl data based on user/option/forum	*/	function acl_raw_data($user_id = false, $opts = false, $forum_id = false)	{		global $db;		$sql_user = ($user_id !== false) ? ((!is_array($user_id)) ? 'user_id = ' . (int) $user_id : $db->sql_in_set('user_id', array_map('intval', $user_id))) : '';		$sql_forum = ($forum_id !== false) ? ((!is_array($forum_id)) ? 'AND a.forum_id = ' . (int) $forum_id : 'AND ' . $db->sql_in_set('a.forum_id', array_map('intval', $forum_id))) : '';		$sql_opts = $sql_opts_select = $sql_opts_from = '';		$hold_ary = array();		if ($opts !== false)		{			$sql_opts_select = ', ao.auth_option';			$sql_opts_from = ', ' . ACL_OPTIONS_TABLE . ' ao';			$this->build_auth_option_statement('ao.auth_option', $opts, $sql_opts);		}		$sql_ary = array();		// Grab non-role settings - user-specific		$sql_ary[] = 'SELECT a.user_id, a.forum_id, a.auth_setting, a.auth_option_id' . $sql_opts_select . '			FROM ' . ACL_USERS_TABLE . ' a' . $sql_opts_from . '			WHERE a.auth_role_id = 0 ' .				(($sql_opts_from) ? 'AND a.auth_option_id = ao.auth_option_id ' : '') .				(($sql_user) ? 'AND a.' . $sql_user : '') . "				$sql_forum				$sql_opts";		// Now the role settings - user-specific		$sql_ary[] = 'SELECT a.user_id, a.forum_id, r.auth_option_id, r.auth_setting, r.auth_option_id' . $sql_opts_select . '			FROM ' . ACL_USERS_TABLE . ' a, ' . ACL_ROLES_DATA_TABLE . ' r' . $sql_opts_from . '			WHERE a.auth_role_id = r.role_id ' .				(($sql_opts_from) ? 'AND r.auth_option_id = ao.auth_option_id ' : '') .				(($sql_user) ? 'AND a.' . $sql_user : '') . "				$sql_forum				$sql_opts";		foreach ($sql_ary as $sql)		{			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$option = ($sql_opts_select) ? $row['auth_option'] : $this->acl_options['option'][$row['auth_option_id']];				$hold_ary[$row['user_id']][$row['forum_id']][$option] = $row['auth_setting'];			}			$db->sql_freeresult($result);		}		$sql_ary = array();		// Now grab group settings - non-role specific...		$sql_ary[] = 'SELECT ug.user_id, a.forum_id, a.auth_setting, a.auth_option_id' . $sql_opts_select . '			FROM ' . ACL_GROUPS_TABLE . ' a, ' . USER_GROUP_TABLE . ' ug, ' . GROUPS_TABLE . ' g' . $sql_opts_from . '			WHERE a.auth_role_id = 0 ' .				(($sql_opts_from) ? 'AND a.auth_option_id = ao.auth_option_id ' : '') . '				AND a.group_id = ug.group_id				AND g.group_id = ug.group_id				AND ug.user_pending = 0				AND NOT (ug.group_leader = 1 AND g.group_skip_auth = 1)				' . (($sql_user) ? 'AND ug.' . $sql_user : '') . "				$sql_forum				$sql_opts";		// Now grab group settings - role specific...		$sql_ary[] = 'SELECT ug.user_id, a.forum_id, r.auth_setting, r.auth_option_id' . $sql_opts_select . '			FROM ' . ACL_GROUPS_TABLE . ' a, ' . USER_GROUP_TABLE . ' ug, ' . GROUPS_TABLE . ' g, ' . ACL_ROLES_DATA_TABLE . ' r' . $sql_opts_from . '			WHERE a.auth_role_id = r.role_id ' .				(($sql_opts_from) ? 'AND r.auth_option_id = ao.auth_option_id ' : '') . '				AND a.group_id = ug.group_id				AND g.group_id = ug.group_id				AND ug.user_pending = 0				AND NOT (ug.group_leader = 1 AND g.group_skip_auth = 1)				' . (($sql_user) ? 'AND ug.' . $sql_user : '') . "				$sql_forum				$sql_opts";		foreach ($sql_ary as $sql)		{			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$option = ($sql_opts_select) ? $row['auth_option'] : $this->acl_options['option'][$row['auth_option_id']];				if (!isset($hold_ary[$row['user_id']][$row['forum_id']][$option]) || (isset($hold_ary[$row['user_id']][$row['forum_id']][$option]) && $hold_ary[$row['user_id']][$row['forum_id']][$option] != ACL_NEVER))				{					$hold_ary[$row['user_id']][$row['forum_id']][$option] = $row['auth_setting'];					// If we detect ACL_NEVER, we will unset the flag option (within building the bitstring it is correctly set again)					if ($row['auth_setting'] == ACL_NEVER)					{						$flag = substr($option, 0, strpos($option, '_') + 1);						if (isset($hold_ary[$row['user_id']][$row['forum_id']][$flag]) && $hold_ary[$row['user_id']][$row['forum_id']][$flag] == ACL_YES)						{							unset($hold_ary[$row['user_id']][$row['forum_id']][$flag]);/*							if (in_array(ACL_YES, $hold_ary[$row['user_id']][$row['forum_id']]))							{								$hold_ary[$row['user_id']][$row['forum_id']][$flag] = ACL_YES;							}*/						}					}				}			}			$db->sql_freeresult($result);		}		return $hold_ary;	}	/**	* Get raw user based permission settings	*/	function acl_user_raw_data($user_id = false, $opts = false, $forum_id = false)	{		global $db;		$sql_user = ($user_id !== false) ? ((!is_array($user_id)) ? 'user_id = ' . (int) $user_id : $db->sql_in_set('user_id', array_map('intval', $user_id))) : '';		$sql_forum = ($forum_id !== false) ? ((!is_array($forum_id)) ? 'AND a.forum_id = ' . (int) $forum_id : 'AND ' . $db->sql_in_set('a.forum_id', array_map('intval', $forum_id))) : '';		$sql_opts = '';		$hold_ary = $sql_ary = array();		if ($opts !== false)		{			$this->build_auth_option_statement('ao.auth_option', $opts, $sql_opts);		}		// Grab user settings - non-role specific...		$sql_ary[] = 'SELECT a.user_id, a.forum_id, a.auth_setting, a.auth_option_id, ao.auth_option			FROM ' . ACL_USERS_TABLE . ' a, ' . ACL_OPTIONS_TABLE . ' ao			WHERE a.auth_role_id = 0				AND a.auth_option_id = ao.auth_option_id ' .				(($sql_user) ? 'AND a.' . $sql_user : '') . "				$sql_forum				$sql_opts			ORDER BY a.forum_id, ao.auth_option";		// Now the role settings - user-specific		$sql_ary[] = 'SELECT a.user_id, a.forum_id, r.auth_option_id, r.auth_setting, r.auth_option_id, ao.auth_option			FROM ' . ACL_USERS_TABLE . ' a, ' . ACL_ROLES_DATA_TABLE . ' r, ' . ACL_OPTIONS_TABLE . ' ao			WHERE a.auth_role_id = r.role_id				AND r.auth_option_id = ao.auth_option_id ' .				(($sql_user) ? 'AND a.' . $sql_user : '') . "				$sql_forum				$sql_opts			ORDER BY a.forum_id, ao.auth_option";		foreach ($sql_ary as $sql)		{			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$hold_ary[$row['user_id']][$row['forum_id']][$row['auth_option']] = $row['auth_setting'];			}			$db->sql_freeresult($result);		}		return $hold_ary;	}	/**	* Get raw group based permission settings	*/	function acl_group_raw_data($group_id = false, $opts = false, $forum_id = false)	{		global $db;		$sql_group = ($group_id !== false) ? ((!is_array($group_id)) ? 'group_id = ' . (int) $group_id : $db->sql_in_set('group_id', array_map('intval', $group_id))) : '';		$sql_forum = ($forum_id !== false) ? ((!is_array($forum_id)) ? 'AND a.forum_id = ' . (int) $forum_id : 'AND ' . $db->sql_in_set('a.forum_id', array_map('intval', $forum_id))) : '';		$sql_opts = '';		$hold_ary = $sql_ary = array();		if ($opts !== false)		{			$this->build_auth_option_statement('ao.auth_option', $opts, $sql_opts);		}		// Grab group settings - non-role specific...		$sql_ary[] = 'SELECT a.group_id, a.forum_id, a.auth_setting, a.auth_option_id, ao.auth_option			FROM ' . ACL_GROUPS_TABLE . ' a, ' . ACL_OPTIONS_TABLE . ' ao			WHERE a.auth_role_id = 0				AND a.auth_option_id = ao.auth_option_id ' .				(($sql_group) ? 'AND a.' . $sql_group : '') . "				$sql_forum				$sql_opts			ORDER BY a.forum_id, ao.auth_option";		// Now grab group settings - role specific...		$sql_ary[] = 'SELECT a.group_id, a.forum_id, r.auth_setting, r.auth_option_id, ao.auth_option			FROM ' . ACL_GROUPS_TABLE . ' a, ' . ACL_ROLES_DATA_TABLE . ' r, ' . ACL_OPTIONS_TABLE . ' ao			WHERE a.auth_role_id = r.role_id				AND r.auth_option_id = ao.auth_option_id ' .				(($sql_group) ? 'AND a.' . $sql_group : '') . "				$sql_forum				$sql_opts			ORDER BY a.forum_id, ao.auth_option";		foreach ($sql_ary as $sql)		{			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$hold_ary[$row['group_id']][$row['forum_id']][$row['auth_option']] = $row['auth_setting'];			}			$db->sql_freeresult($result);		}		return $hold_ary;	}	/**	* Get raw acl data based on user for caching user_permissions	* This function returns the same data as acl_raw_data(), but without the user id as the first key within the array.	*/	function acl_raw_data_single_user($user_id)	{		global $db, $cache;		// Check if the role-cache is there		if (($this->role_cache = $cache->get('_role_cache')) === false)		{			$this->role_cache = array();			// We pre-fetch roles			$sql = 'SELECT *				FROM ' . ACL_ROLES_DATA_TABLE . '				ORDER BY role_id ASC';			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$this->role_cache[$row['role_id']][$row['auth_option_id']] = (int) $row['auth_setting'];			}			$db->sql_freeresult($result);			foreach ($this->role_cache as $role_id => $role_options)			{				$this->role_cache[$role_id] = serialize($role_options);			}			$cache->put('_role_cache', $this->role_cache);		}		$hold_ary = array();		// Grab user-specific permission settings		$sql = 'SELECT forum_id, auth_option_id, auth_role_id, auth_setting			FROM ' . ACL_USERS_TABLE . '			WHERE user_id = ' . $user_id;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			// If a role is assigned, assign all options included within this role. Else, only set this one option.			if ($row['auth_role_id'])			{				$hold_ary[$row['forum_id']] = (empty($hold_ary[$row['forum_id']])) ? unserialize($this->role_cache[$row['auth_role_id']]) : $hold_ary[$row['forum_id']] + unserialize($this->role_cache[$row['auth_role_id']]);			}			else			{				$hold_ary[$row['forum_id']][$row['auth_option_id']] = $row['auth_setting'];			}		}		$db->sql_freeresult($result);		// Now grab group-specific permission settings		$sql = 'SELECT a.forum_id, a.auth_option_id, a.auth_role_id, a.auth_setting			FROM ' . ACL_GROUPS_TABLE . ' a, ' . USER_GROUP_TABLE . ' ug, ' . GROUPS_TABLE . ' g			WHERE a.group_id = ug.group_id				AND g.group_id = ug.group_id				AND ug.user_pending = 0				AND NOT (ug.group_leader = 1 AND g.group_skip_auth = 1)				AND ug.user_id = ' . $user_id;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			if (!$row['auth_role_id'])			{				$this->_set_group_hold_ary($hold_ary[$row['forum_id']], $row['auth_option_id'], $row['auth_setting']);			}			else if (!empty($this->role_cache[$row['auth_role_id']]))			{				foreach (unserialize($this->role_cache[$row['auth_role_id']]) as $option_id => $setting)				{					$this->_set_group_hold_ary($hold_ary[$row['forum_id']], $option_id, $setting);				}			}		}		$db->sql_freeresult($result);		return $hold_ary;	}	/**	* Private function snippet for setting a specific piece of the hold_ary	*/	function _set_group_hold_ary(&$hold_ary, $option_id, $setting)	{		if (!isset($hold_ary[$option_id]) || (isset($hold_ary[$option_id]) && $hold_ary[$option_id] != ACL_NEVER))		{			$hold_ary[$option_id] = $setting;			// If we detect ACL_NEVER, we will unset the flag option (within building the bitstring it is correctly set again)			if ($setting == ACL_NEVER)			{				$flag = substr($this->acl_options['option'][$option_id], 0, strpos($this->acl_options['option'][$option_id], '_') + 1);				$flag = (int) $this->acl_options['id'][$flag];				if (isset($hold_ary[$flag]) && $hold_ary[$flag] == ACL_YES)				{					unset($hold_ary[$flag]);/*					This is uncommented, because i suspect this being slightly wrong due to mixed permission classes being possible					if (in_array(ACL_YES, $hold_ary))					{						$hold_ary[$flag] = ACL_YES;					}*/				}			}		}	}	/**	* Authentication plug-ins is largely down to Sergey Kanareykin, our thanks to him.	*/	function login($username, $password, $autologin = false, $viewonline = 1, $admin = 0)	{		global $config, $db, $user, $phpbb_root_path, $phpEx;		$method = trim(basename($config['auth_method']));		include_once($phpbb_root_path . 'includes/auth/auth_' . $method . '.' . $phpEx);		$method = 'login_' . $method;		if (function_exists($method))		{			$login = $method($username, $password, $user->ip, $user->browser, $user->forwarded_for);			// If the auth module wants us to create an empty profile do so and then treat the status as LOGIN_SUCCESS			if ($login['status'] == LOGIN_SUCCESS_CREATE_PROFILE)			{				// we are going to use the user_add function so include functions_user.php if it wasn't defined yet				if (!function_exists('user_add'))				{					include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				}				user_add($login['user_row'], (isset($login['cp_data'])) ? $login['cp_data'] : false);				$sql = 'SELECT user_id, username, user_password, user_passchg, user_email, user_type					FROM ' . USERS_TABLE . "					WHERE username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					return array(						'status'		=> LOGIN_ERROR_EXTERNAL_AUTH,						'error_msg'		=> 'AUTH_NO_PROFILE_CREATED',						'user_row'		=> array('user_id' => ANONYMOUS),					);				}				$login = array(					'status'	=> LOGIN_SUCCESS,					'error_msg'	=> false,					'user_row'	=> $row,				);			}			// If login succeeded, we will log the user in... else we pass the login array through...			if ($login['status'] == LOGIN_SUCCESS)			{				$old_session_id = $user->session_id;				if ($admin)				{					global $SID, $_SID;					$cookie_expire = time() - 31536000;					$user->set_cookie('u', '', $cookie_expire);					$user->set_cookie('sid', '', $cookie_expire);					unset($cookie_expire);					$SID = '?sid=';					$user->session_id = $_SID = '';				}				$result = $user->session_create($login['user_row']['user_id'], $admin, $autologin, $viewonline);				// Successful session creation				if ($result === true)				{					// If admin re-authentication we remove the old session entry because a new one has been created...					if ($admin)					{						// the login array is used because the user ids do not differ for re-authentication						$sql = 'DELETE FROM ' . SESSIONS_TABLE . "							WHERE session_id = '" . $db->sql_escape($old_session_id) . "'							AND session_user_id = {$login['user_row']['user_id']}";						$db->sql_query($sql);					}					return array(						'status'		=> LOGIN_SUCCESS,						'error_msg'		=> false,						'user_row'		=> $login['user_row'],					);				}				return array(					'status'		=> LOGIN_BREAK,					'error_msg'		=> $result,					'user_row'		=> $login['user_row'],				);			}			return $login;		}		trigger_error('Authentication method not found', E_USER_ERROR);	}	/**	* Fill auth_option statement for later querying based on the supplied options	*/	function build_auth_option_statement($key, $auth_options, &$sql_opts)	{		global $db;		if (!is_array($auth_options))		{			if (strpos($auth_options, '%') !== false)			{				$sql_opts = "AND $key " . $db->sql_like_expression(str_replace('%', $db->any_char, $auth_options));			}			else			{				$sql_opts = "AND $key = '" . $db->sql_escape($auth_options) . "'";			}		}		else		{			$is_like_expression = false;			foreach ($auth_options as $option)			{				if (strpos($option, '%') !== false)				{					$is_like_expression = true;				}			}			if (!$is_like_expression)			{				$sql_opts = 'AND ' . $db->sql_in_set($key, $auth_options);			}			else			{				$sql = array();				foreach ($auth_options as $option)				{					if (strpos($option, '%') !== false)					{						$sql[] = $key . ' ' . $db->sql_like_expression(str_replace('%', $db->any_char, $option));					}					else					{						$sql[] = $key . " = '" . $db->sql_escape($option) . "'";					}				}				$sql_opts = 'AND (' . implode(' OR ', $sql) . ')';			}		}	}}?>
<?php/**** viewtopic [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ATTACHMENT'						=> 'Attachment',	'ATTACHMENT_FUNCTIONALITY_DISABLED'	=> 'The attachments feature has been disabled.',	'BOOKMARK_ADDED'		=> 'Bookmarked topic successfully.',	'BOOKMARK_ERR'			=> 'Bookmarking the topic failed. Please try again.',	'BOOKMARK_REMOVED'		=> 'Removed bookmarked topic successfully.',	'BOOKMARK_TOPIC'		=> 'Bookmark topic',	'BOOKMARK_TOPIC_REMOVE'	=> 'Remove from bookmarks',	'BUMPED_BY'				=> 'Last bumped by %1$s on %2$s.',	'BUMP_TOPIC'			=> 'Bump topic',	'CODE'					=> 'Code',	'COLLAPSE_QR'			=> 'Hide Quick Reply',	'DELETE_TOPIC'			=> 'Delete topic',	'DOWNLOAD_NOTICE'		=> 'You do not have the required permissions to view the files attached to this post.',	'EDITED_TIMES_TOTAL'	=> 'Last edited by %1$s on %2$s, edited %3$d times in total.',	'EDITED_TIME_TOTAL'		=> 'Last edited by %1$s on %2$s, edited %3$d time in total.',	'EMAIL_TOPIC'			=> 'E-mail friend',	'ERROR_NO_ATTACHMENT'	=> 'The selected attachment does not exist anymore.',	'FILE_NOT_FOUND_404'	=> 'The file <strong>%s</strong> does not exist.',	'FORK_TOPIC'			=> 'Copy topic',	'FULL_EDITOR'			=> 'Full Editor',		'LINKAGE_FORBIDDEN'		=> 'You are not authorised to view, download or link from/to this site.',	'LOGIN_NOTIFY_TOPIC'	=> 'You have been notified about this topic, please login to view it.',	'LOGIN_VIEWTOPIC'		=> 'The board requires you to be registered and logged in to view this topic.',	'MAKE_ANNOUNCE'				=> 'Change to Announcement',	'MAKE_GLOBAL'				=> 'Change to Global',	'MAKE_NORMAL'				=> 'Change to Standard Topic',	'MAKE_STICKY'				=> 'Change to Sticky',	'MAX_OPTIONS_SELECT'		=> 'You may select up to <strong>%d</strong> options',	'MAX_OPTION_SELECT'			=> 'You may select <strong>1</strong> option',	'MISSING_INLINE_ATTACHMENT'	=> 'The attachment <strong>%s</strong> is no longer available',	'MOVE_TOPIC'				=> 'Move topic',	'NO_ATTACHMENT_SELECTED'=> 'You havent selected an attachment to download or view.',	'NO_NEWER_TOPICS'		=> 'There are no newer topics in this forum.',	'NO_OLDER_TOPICS'		=> 'There are no older topics in this forum.',	'NO_UNREAD_POSTS'		=> 'There are no new unread posts for this topic.',	'NO_VOTE_OPTION'		=> 'You must specify an option when voting.',	'NO_VOTES'				=> 'No votes',	'POLL_ENDED_AT'			=> 'Poll ended at %s',	'POLL_RUN_TILL'			=> 'Poll runs till %s',	'POLL_VOTED_OPTION'		=> 'You voted for this option',	'PRINT_TOPIC'			=> 'Print view',	'QUICK_MOD'				=> 'Quick-mod tools',	'QUICKREPLY'			=> 'Quick Reply',	'QUOTE'					=> 'Quote',	'REPLY_TO_TOPIC'		=> 'Reply to topic',	'RETURN_POST'			=> '%sReturn to the post%s',	'SHOW_QR'				=> 'Quick Reply',	'SUBMIT_VOTE'			=> 'Submit vote',	'TOTAL_VOTES'			=> 'Total votes',	'UNLOCK_TOPIC'			=> 'Unlock topic',	'VIEW_INFO'				=> 'Post details',	'VIEW_NEXT_TOPIC'		=> 'Next topic',	'VIEW_PREVIOUS_TOPIC'	=> 'Previous topic',	'VIEW_RESULTS'			=> 'View results',	'VIEW_TOPIC_POST'		=> '1 post',	'VIEW_TOPIC_POSTS'		=> '%d posts',	'VIEW_UNREAD_POST'		=> 'First unread post',	'VISIT_WEBSITE'			=> 'WWW',	'VOTE_SUBMITTED'		=> 'Your vote has been cast.',	'VOTE_CONVERTED'		=> 'Changing votes is not supported for converted polls.',));?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_php_info{	var $u_action;	function main($id, $mode)	{		global $db, $user, $auth, $template;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		if ($mode != 'info')		{			trigger_error('NO_MODE', E_USER_ERROR);		}		$this->tpl_name = 'acp_php_info';		$this->page_title = 'ACP_PHP_INFO';		ob_start();		phpinfo(INFO_GENERAL | INFO_CONFIGURATION | INFO_MODULES | INFO_VARIABLES);		$phpinfo = ob_get_clean();		$phpinfo = trim($phpinfo);		// Here we play around a little with the PHP Info HTML to try and stylise		// it along phpBB's lines ... hopefully without breaking anything. The idea		// for this was nabbed from the PHP annotated manual		preg_match_all('#<body[^>]*>(.*)</body>#si', $phpinfo, $output);		if (empty($phpinfo) || empty($output))		{			trigger_error('NO_PHPINFO_AVAILABLE', E_USER_WARNING);		}		$output = $output[1][0];		// expose_php can make the image not exist		if (preg_match('#<a[^>]*><img[^>]*></a>#', $output))		{			$output = preg_replace('#<tr class="v"><td>(.*?<a[^>]*><img[^>]*></a>)(.*?)</td></tr>#s', '<tr class="row1"><td><table class="type2"><tr><td>\2</td><td>\1</td></tr></table></td></tr>', $output);		}		else		{			$output = preg_replace('#<tr class="v"><td>(.*?)</td></tr>#s', '<tr class="row1"><td><table class="type2"><tr><td>\1</td></tr></table></td></tr>', $output);		}		$output = preg_replace('#<table[^>]+>#i', '<table>', $output);		$output = preg_replace('#<img border="0"#i', '<img', $output);		$output = str_replace(array('class="e"', 'class="v"', 'class="h"', '<hr />', '<font', '</font>'), array('class="row1"', 'class="row2"', '', '', '<span', '</span>'), $output);		// Fix invalid anchor names (eg "module_Zend Optimizer")		$output = preg_replace_callback('#<a name="([^"]+)">#', array($this, 'remove_spaces'), $output);		if (empty($output))		{			trigger_error('NO_PHPINFO_AVAILABLE', E_USER_WARNING);		}		$orig_output = $output;		preg_match_all('#<div class="center">(.*)</div>#siU', $output, $output);		$output = (!empty($output[1][0])) ? $output[1][0] : $orig_output;		$template->assign_var('PHPINFO', $output);	}		function remove_spaces($matches)	{		return '<a name="' . str_replace(' ', '_', $matches[1]) . '">';	}}?>
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php//// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.////// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");//// Do not change anything below this line.//set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = '../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.'.$phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$search_type = $config['search_type'];if (!file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx)){	trigger_error('NO_SUCH_SEARCH_MODULE');}require($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx);$error = false;$search = new $search_type($error);if ($error){	trigger_error($error);}print "<html>\n<body>\n";//// Fetch a batch of posts_text entries//$sql = "SELECT COUNT(*) as total, MAX(post_id) as max_post_id	FROM ". POSTS_TABLE;if ( !($result = $db->sql_query($sql)) ){	$error = $db->sql_error();	die("Couldn't get maximum post ID :: " . $sql . " :: " . $error['message']);}$max_post_id = $db->sql_fetchrow($result);$totalposts = $max_post_id['total'];$max_post_id = $max_post_id['max_post_id'];$postcounter = (!isset($HTTP_GET_VARS['batchstart'])) ? 0 : $HTTP_GET_VARS['batchstart'];$batchsize = 200; // Process this many posts per loop$batchcount = 0;for(;$postcounter <= $max_post_id; $postcounter += $batchsize){	$batchstart = $postcounter + 1;	$batchend = $postcounter + $batchsize;	$batchcount++;		$sql = "SELECT *		FROM " . POSTS_TABLE . "		WHERE post_id			BETWEEN $batchstart				AND $batchend";	if( !($result = $db->sql_query($sql)) )	{		$error = $db->sql_error();		die("Couldn't get post_text :: " . $sql . " :: " . $error['message']);	}	$rowset = $db->sql_fetchrowset($result);	$db->sql_freeresult($result);	$post_rows = sizeof($rowset);		if( $post_rows )	{	// $sql = "LOCK TABLES ".POST_TEXT_TABLE." WRITE";	// $result = $db->sql_query($sql);		print "\n<p>\n<a href='{$_SERVER['PHP_SELF']}?batchstart=$batchstart'>Restart from posting $batchstart</a><br>\n";		// For every post in the batch:		for($post_nr = 0; $post_nr < $post_rows; $post_nr++ )		{			print ".";			flush();			$post_id = $rowset[$post_nr]['post_id'];			$search->index('post', $rowset[$post_nr]['post_id'], $rowset[$post_nr]['post_text'], $rowset[$post_nr]['post_subject'], $rowset[$post_nr]['poster_id']);		}	// $sql = "UNLOCK TABLES";	// $result = $db->sql_query($sql);	}}print "<br>Removing common words (words that appear in more than 50% of the posts)<br>\n";flush();$search->tidy();print "Removed words that where too common.<br>";echo "<br>Done";?></body></html>
<?php/*** Updates smilies that were changed to the new ones*/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.'.$phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$echos = 0;$replace = array(	'<img src="{SMILIES_PATH}/icon_biggrin.gif',	'<img src="{SMILIES_PATH}/icon_confused.gif',	'<img src="{SMILIES_PATH}/icon_sad.gif',	'<img src="{SMILIES_PATH}/icon_smile.gif',	'<img src="{SMILIES_PATH}/icon_surprised.gif',	'<img src="{SMILIES_PATH}/icon_wink.gif',);$with = array(	'<img src="{SMILIES_PATH}/icon_e_biggrin.gif',	'<img src="{SMILIES_PATH}/icon_e_confused.gif',	'<img src="{SMILIES_PATH}/icon_e_sad.gif',	'<img src="{SMILIES_PATH}/icon_e_smile.gif',	'<img src="{SMILIES_PATH}/icon_e_surprised.gif',	'<img src="{SMILIES_PATH}/icon_e_wink.gif',);// Adjust user signatures$sql = 'SELECT user_id, user_sig	FROM ' . USERS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$new_content = str_replace($replace, $with, $row['user_sig']);	if ($new_content != $row['user_sig'])	{		$sql = 'UPDATE ' . USERS_TABLE . " SET user_sig = '" . $db->sql_escape($new_content) . "'			WHERE user_id = " . $row['user_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Now adjust posts$sql = 'SELECT post_id, post_text	FROM ' . POSTS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$new_content = str_replace($replace, $with, $row['post_text']);	if ($row['post_text'] != $new_content)	{		$sql = 'UPDATE ' . POSTS_TABLE . " SET post_text = '" . $db->sql_escape($new_content) . "'			WHERE post_id = " . $row['post_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Now to the private messages$sql = 'SELECT msg_id, message_text	FROM ' . PRIVMSGS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$new_content = str_replace($replace, $with, $row['message_text']);	if ($row['message_text'] != $new_content)	{		$sql = 'UPDATE ' . PRIVMSGS_TABLE . " SET bbcode_bitfield = '" . $db->sql_escape($new_content) . "'			WHERE msg_id = " . $row['msg_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Done$db->sql_close();?>
<?php/**** @package install* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/if (!defined('IN_INSTALL')){	// Someone has tried to access the file direct. This is not a good idea, so exit	exit;}if (!empty($setmodules)){	$module[] = array(		'module_type'		=> 'install',		'module_title'		=> 'CONVERT',		'module_filename'	=> substr(basename(__FILE__), 0, -strlen($phpEx)-1),		'module_order'		=> 20,		'module_subs'		=> '',		'module_stages'		=> array('INTRO', 'SETTINGS', 'IN_PROGRESS', 'FINAL'),		'module_reqs'		=> ''	);}/*** Class holding all convertor-specific details.* @package install*/class convert{	var $options = array();	var $convertor_tag = '';	var $src_dbms = '';	var $src_dbhost = '';	var $src_dbport = '';	var $src_dbuser = '';	var $src_dbpasswd = '';	var $src_dbname = '';	var $src_table_prefix = '';	var $convertor_data = array();	var $tables = array();	var $config_schema = array();	var $convertor = array();	var $src_truncate_statement = 'DELETE FROM ';	var $truncate_statement = 'DELETE FROM ';	var $fulltext_search;	// Batch size, can be adjusted by the conversion file	// For big boards a value of 6000 seems to be optimal	var $batch_size = 2000;	// Number of rows to be inserted at once (extended insert) if supported	// For installations having enough memory a value of 60 may be good.	var $num_wait_rows = 20;	// Mysqls internal recoding engine messing up with our (better) functions? We at least support more encodings than mysql so should use it in favor.	var $mysql_convert = false;	var $p_master;	function convert(&$p_master)	{		$this->p_master = &$p_master;	}}/*** Convert class for conversions* @package install*/class install_convert extends module{	/**	* Variables used while converting, they are accessible from the global variable $convert	*/	function install_convert(&$p_master)	{		$this->p_master = &$p_master;	}	function main($mode, $sub)	{		global $lang, $template, $phpbb_root_path, $phpEx, $cache, $config, $language, $table_prefix;		global $convert;		$this->tpl_name = 'install_convert';		$this->mode = $mode;		$convert = new convert($this->p_master);		switch ($sub)		{			case 'intro':				// Try opening config file				// @todo If phpBB is not installed, we need to do a cut-down installation here				// For now, we redirect to the installation script instead				if (@file_exists($phpbb_root_path . 'config.' . $phpEx))				{					include($phpbb_root_path . 'config.' . $phpEx);				}				if (!defined('PHPBB_INSTALLED'))				{					$template->assign_vars(array(						'S_NOT_INSTALLED'		=> true,						'TITLE'					=> $lang['BOARD_NOT_INSTALLED'],						'BODY'					=> sprintf($lang['BOARD_NOT_INSTALLED_EXPLAIN'], append_sid($phpbb_root_path . 'install/index.' . $phpEx, 'mode=install&amp;language=' . $language)),					));					return;				}				require($phpbb_root_path . 'config.' . $phpEx);				require($phpbb_root_path . 'includes/constants.' . $phpEx);				require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);				require($phpbb_root_path . 'includes/functions_convert.' . $phpEx);				$db = new $sql_db();				$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, true);				unset($dbpasswd);				// We need to fill the config to let internal functions correctly work				$sql = 'SELECT *					FROM ' . CONFIG_TABLE;				$result = $db->sql_query($sql);				$config = array();				while ($row = $db->sql_fetchrow($result))				{					$config[$row['config_name']] = $row['config_value'];				}				$db->sql_freeresult($result);				// Detect if there is already a conversion in progress at this point and offer to resume				// It's quite possible that the user will get disconnected during a large conversion so they need to be able to resume it				$new_conversion = request_var('new_conv', 0);				if ($new_conversion)				{					$config['convert_progress'] = '';					$config['convert_db_server'] = '';					$config['convert_db_user'] = '';					$db->sql_query('DELETE FROM ' . CONFIG_TABLE . "						WHERE config_name = 'convert_progress'							OR config_name = 'convert_db_server'							OR config_name = 'convert_db_user'"					);				}				// Let's see if there is a conversion in the works...				$options = array();				if (!empty($config['convert_progress']) && !empty($config['convert_db_server']) && !empty($config['convert_db_user']) && !empty($config['convert_options']))				{					$options = unserialize($config['convert_progress']);					$options = array_merge($options, unserialize($config['convert_db_server']), unserialize($config['convert_db_user']), unserialize($config['convert_options']));				}				// This information should have already been checked once, but do it again for safety				if (!empty($options) && !empty($options['tag']) &&					isset($options['dbms']) &&					isset($options['dbhost']) &&					isset($options['dbport']) &&					isset($options['dbuser']) &&					isset($options['dbpasswd']) &&					isset($options['dbname']) &&					isset($options['table_prefix']))				{					$this->page_title = $lang['CONTINUE_CONVERT'];					$template->assign_vars(array(						'TITLE'			=> $lang['CONTINUE_CONVERT'],						'BODY'			=> $lang['CONTINUE_CONVERT_BODY'],						'L_NEW'			=> $lang['CONVERT_NEW_CONVERSION'],						'L_CONTINUE'	=> $lang['CONTINUE_OLD_CONVERSION'],						'S_CONTINUE'	=> true,						'U_NEW_ACTION'		=> $this->p_master->module_url . "?mode={$this->mode}&amp;sub=intro&amp;new_conv=1&amp;language=$language",						'U_CONTINUE_ACTION'	=> $this->p_master->module_url . "?mode={$this->mode}&amp;sub=in_progress&amp;tag={$options['tag']}{$options['step']}&amp;language=$language",					));					return;				}				$this->list_convertors($sub);			break;			case 'settings':				$this->get_convert_settings($sub);			break;			case 'in_progress':				$this->convert_data($sub);			break;			case 'final':				$this->page_title = $lang['CONVERT_COMPLETE'];				$template->assign_vars(array(					'TITLE'		=> $lang['CONVERT_COMPLETE'],					'BODY'		=> $lang['CONVERT_COMPLETE_EXPLAIN'],				));				// If we reached this step (conversion completed) we want to purge the cache and log the user out.				// This is for making sure the session get not screwed due to the 3.0.x users table being completely new.				$cache->purge();				require($phpbb_root_path . 'config.' . $phpEx);				require($phpbb_root_path . 'includes/constants.' . $phpEx);				require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);				require($phpbb_root_path . 'includes/functions_convert.' . $phpEx);				$db = new $sql_db();				$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, true);				unset($dbpasswd);				$sql = 'SELECT config_value					FROM ' . CONFIG_TABLE . '					WHERE config_name = \'search_type\'';				$result = $db->sql_query($sql);				if ($db->sql_fetchfield('config_value') != 'fulltext_mysql')				{					$template->assign_vars(array(						'S_ERROR_BOX'	=> true,						'ERROR_TITLE'	=> $lang['SEARCH_INDEX_UNCONVERTED'],						'ERROR_MSG'		=> $lang['SEARCH_INDEX_UNCONVERTED_EXPLAIN'],					));				}				switch ($db->sql_layer)				{					case 'sqlite':					case 'firebird':						$db->sql_query('DELETE FROM ' . SESSIONS_KEYS_TABLE);						$db->sql_query('DELETE FROM ' . SESSIONS_TABLE);					break;					default:						$db->sql_query('TRUNCATE TABLE ' . SESSIONS_KEYS_TABLE);						$db->sql_query('TRUNCATE TABLE ' . SESSIONS_TABLE);					break;				}			break;		}	}	/**	* Generate a list of all available conversion modules	*/	function list_convertors($sub)	{		global $lang, $language, $template, $phpbb_root_path, $phpEx;		$this->page_title = $lang['SUB_INTRO'];		$template->assign_vars(array(			'TITLE'		=> $lang['CONVERT_INTRO'],			'BODY'		=> $lang['CONVERT_INTRO_BODY'],			'L_AUTHOR'					=> $lang['AUTHOR'],			'L_AVAILABLE_CONVERTORS'	=> $lang['AVAILABLE_CONVERTORS'],			'L_CONVERT'					=> $lang['CONVERT'],			'L_NO_CONVERTORS'			=> $lang['NO_CONVERTORS'],			'L_OPTIONS'					=> $lang['CONVERT_OPTIONS'],			'L_SOFTWARE'				=> $lang['SOFTWARE'],			'L_VERSION'					=> $lang['VERSION'],			'S_LIST'	=> true,		));		$convertors = $sort = array();		$get_info = true;		$handle = @opendir('./convertors/');		if (!$handle)		{			$this->error('Unable to access the convertors directory', __LINE__, __FILE__);		}		while ($entry = readdir($handle))		{			if (preg_match('/^convert_([a-z0-9_]+).' . $phpEx . '$/i', $entry, $m))			{				include('./convertors/' . $entry);				if (isset($convertor_data))				{					$sort[strtolower($convertor_data['forum_name'])] = sizeof($convertors);					$convertors[] = array(						'tag'			=>	$m[1],						'forum_name'	=>	$convertor_data['forum_name'],						'version'		=>	$convertor_data['version'],						'dbms'			=>	$convertor_data['dbms'],						'dbhost'		=>	$convertor_data['dbhost'],						'dbport'		=>	$convertor_data['dbport'],						'dbuser'		=>	$convertor_data['dbuser'],						'dbpasswd'		=>	$convertor_data['dbpasswd'],						'dbname'		=>	$convertor_data['dbname'],						'table_prefix'	=>	$convertor_data['table_prefix'],						'author'		=>	$convertor_data['author']					);				}				unset($convertor_data);			}		}		closedir($handle);		@ksort($sort);		foreach ($sort as $void => $index)		{			$template->assign_block_vars('convertors', array(				'AUTHOR'	=> $convertors[$index]['author'],				'SOFTWARE'	=> $convertors[$index]['forum_name'],				'VERSION'	=> $convertors[$index]['version'],				'U_CONVERT'	=> $this->p_master->module_url . "?mode={$this->mode}&amp;language=$language&amp;sub=settings&amp;tag=" . $convertors[$index]['tag'],			));		}	}	/**	*/	function get_convert_settings($sub)	{		global $lang, $language, $template, $db, $phpbb_root_path, $phpEx, $config, $cache;		require($phpbb_root_path . 'config.' . $phpEx);		require($phpbb_root_path . 'includes/constants.' . $phpEx);		require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);		require($phpbb_root_path . 'includes/functions_convert.' . $phpEx);		$db = new $sql_db();		$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, true);		unset($dbpasswd);		$this->page_title = $lang['STAGE_SETTINGS'];		// We need to fill the config to let internal functions correctly work		$sql = 'SELECT *			FROM ' . CONFIG_TABLE;		$result = $db->sql_query($sql);		$config = array();		while ($row = $db->sql_fetchrow($result))		{			$config[$row['config_name']] = $row['config_value'];		}		$db->sql_freeresult($result);		$convertor_tag = request_var('tag', '');		if (empty($convertor_tag))		{			$this->p_master->error($lang['NO_CONVERT_SPECIFIED'], __LINE__, __FILE__);		}		$get_info = true;		// check security implications of direct inclusion		$convertor_tag = basename($convertor_tag);		if (!file_exists('./convertors/convert_' . $convertor_tag . '.' . $phpEx))		{			$this->p_master->error($lang['CONVERT_NOT_EXIST'], __LINE__, __FILE__);		}		include('./convertors/convert_' . $convertor_tag . '.' . $phpEx);		// The test_file is a file that should be present in the location of the old board.		if (!isset($test_file))		{			$this->p_master->error($lang['DEV_NO_TEST_FILE'], __LINE__, __FILE__);		}		$submit = (isset($_POST['submit'])) ? true : false;		$src_dbms			= request_var('src_dbms', $convertor_data['dbms']);		$src_dbhost			= request_var('src_dbhost', $convertor_data['dbhost']);		$src_dbport			= request_var('src_dbport', $convertor_data['dbport']);		$src_dbuser			= request_var('src_dbuser', $convertor_data['dbuser']);		$src_dbpasswd		= request_var('src_dbpasswd', $convertor_data['dbpasswd']);		$src_dbname			= request_var('src_dbname', $convertor_data['dbname']);		$src_table_prefix	= request_var('src_table_prefix', $convertor_data['table_prefix']);		$forum_path			= request_var('forum_path', $convertor_data['forum_path']);		$refresh			= request_var('refresh', 1);		// Default URL of the old board		// @todo Are we going to use this for attempting to convert URL references in posts, or should we remove it?		//		-> We should convert old urls to the new relative urls format		// $src_url = request_var('src_url', 'Not in use at the moment');		// strip trailing slash from old forum path		$forum_path = (strlen($forum_path) && $forum_path[strlen($forum_path) - 1] == '/') ? substr($forum_path, 0, -1) : $forum_path;		$error = array();		if ($submit)		{			if (!@file_exists('./../' . $forum_path . '/' . $test_file))			{				$error[] = sprintf($lang['COULD_NOT_FIND_PATH'], $forum_path);			}			$connect_test = false;			$available_dbms = get_available_dbms(false, true, true);			if (!isset($available_dbms[$src_dbms]) || !$available_dbms[$src_dbms]['AVAILABLE'])			{				$error['db'][] = $lang['INST_ERR_NO_DB'];				$connect_test = false;			}			else			{				$connect_test = connect_check_db(true, $error, $available_dbms[$src_dbms], $src_table_prefix, $src_dbhost, $src_dbuser, htmlspecialchars_decode($src_dbpasswd), $src_dbname, $src_dbport, true, ($src_dbms == $dbms) ? false : true, false);			}			// The forum prefix of the old and the new forum can only be the same if two different databases are used.			if ($src_table_prefix == $table_prefix && $src_dbms == $dbms && $src_dbhost == $dbhost && $src_dbport == $dbport && $src_dbname == $dbname)			{				$error[] = sprintf($lang['TABLE_PREFIX_SAME'], $src_table_prefix);			}			// Check table prefix			if (!sizeof($error))			{				// initiate database connection to old db if old and new db differ				global $src_db, $same_db;				$src_db = $same_db = false;				if ($src_dbms != $dbms || $src_dbhost != $dbhost || $src_dbport != $dbport || $src_dbname != $dbname || $src_dbuser != $dbuser)				{					$sql_db = 'dbal_' . $src_dbms;					$src_db = new $sql_db();					$src_db->sql_connect($src_dbhost, $src_dbuser, htmlspecialchars_decode($src_dbpasswd), $src_dbname, $src_dbport, false, true);					$same_db = false;				}				else				{					$src_db = $db;					$same_db = true;				}				$src_db->sql_return_on_error(true);				$db->sql_return_on_error(true);				// Try to select one row from the first table to see if the prefix is OK				$result = $src_db->sql_query_limit('SELECT * FROM ' . $src_table_prefix . $tables[0], 1);				if (!$result)				{					$prefixes = array();					$tables_existing = get_tables($src_db);					$tables_existing = array_map('strtolower', $tables_existing);					foreach ($tables_existing as $table_name)					{						compare_table($tables, $table_name, $prefixes);					}					unset($tables_existing);					foreach ($prefixes as $prefix => $count)					{						if ($count >= sizeof($tables))						{							$possible_prefix = $prefix;							break;						}					}					$msg = '';					if (!empty($convertor_data['table_prefix']))					{						$msg .= sprintf($lang['DEFAULT_PREFIX_IS'], $convertor_data['forum_name'], $convertor_data['table_prefix']);					}					if (!empty($possible_prefix))					{						$msg .= '<br />';						$msg .= ($possible_prefix == '*') ? $lang['BLANK_PREFIX_FOUND'] : sprintf($lang['PREFIX_FOUND'], $possible_prefix);						$src_table_prefix = ($possible_prefix == '*') ? '' : $possible_prefix;					}					$error[] = $msg;				}				$src_db->sql_freeresult($result);				$src_db->sql_return_on_error(false);			}			if (!sizeof($error))			{				// Save convertor Status				set_config('convert_progress', serialize(array(					'step'			=> '',					'table_prefix'	=> $src_table_prefix,					'tag'			=> $convertor_tag,				)), true);				set_config('convert_db_server', serialize(array(					'dbms'			=> $src_dbms,					'dbhost'		=> $src_dbhost,					'dbport'		=> $src_dbport,					'dbname'		=> $src_dbname,				)), true);				set_config('convert_db_user', serialize(array(					'dbuser'		=> $src_dbuser,					'dbpasswd'		=> $src_dbpasswd,				)), true);				// Save options				set_config('convert_options', serialize(array('forum_path' => './../' . $forum_path, 'refresh' => $refresh)), true);				$template->assign_block_vars('checks', array(					'TITLE'		=> $lang['VERIFY_OPTIONS'],					'RESULT'	=> $lang['CONVERT_SETTINGS_VERIFIED'],				));				$template->assign_vars(array(					'L_SUBMIT'	=> $lang['BEGIN_CONVERT'],//					'S_HIDDEN'	=> $s_hidden_fields,					'U_ACTION'	=> $this->p_master->module_url . "?mode={$this->mode}&amp;sub=in_progress&amp;tag=$convertor_tag&amp;language=$language",				));				return;			}			else			{				$template->assign_block_vars('checks', array(					'TITLE'		=> $lang['VERIFY_OPTIONS'],					'RESULT'	=> '<b style="color:red">' . implode('<br />', $error) . '</b>',				));			}		} // end submit		foreach ($this->convert_options as $config_key => $vars)		{			if (!is_array($vars) && strpos($config_key, 'legend') === false)			{				continue;			}			if (strpos($config_key, 'legend') !== false)			{				$template->assign_block_vars('options', array(					'S_LEGEND'		=> true,					'LEGEND'		=> $lang[$vars])				);				continue;			}			$options = isset($vars['options']) ? $vars['options'] : '';			$template->assign_block_vars('options', array(				'KEY'			=> $config_key,				'TITLE'			=> $lang[$vars['lang']],				'S_EXPLAIN'		=> $vars['explain'],				'S_LEGEND'		=> false,				'TITLE_EXPLAIN'	=> ($vars['explain']) ? $lang[$vars['lang'] . '_EXPLAIN'] : '',				'CONTENT'		=> $this->p_master->input_field($config_key, $vars['type'], $$config_key, $options),				)			);		}		$template->assign_vars(array(			'TITLE'		=> $lang['STAGE_SETTINGS'],			'BODY'		=> $lang['CONV_OPTIONS_BODY'],			'L_SUBMIT'	=> $lang['BEGIN_CONVERT'],			'U_ACTION'	=> $this->p_master->module_url . "?mode={$this->mode}&amp;sub=settings&amp;tag=$convertor_tag&amp;language=$language",		));	}	/**	* The function which does the actual work (or dispatches it to the relevant places)	*/	function convert_data($sub)	{		global $template, $user, $phpbb_root_path, $phpEx, $db, $lang, $config, $cache;		global $convert, $convert_row, $message_parser, $skip_rows, $language;		require($phpbb_root_path . 'config.' . $phpEx);		require($phpbb_root_path . 'includes/constants.' . $phpEx);		require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);		require($phpbb_root_path . 'includes/functions_convert.' . $phpEx);		$db = new $sql_db();		$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, true);		unset($dbpasswd);		$sql = 'SELECT *			FROM ' . CONFIG_TABLE;		$result = $db->sql_query($sql);		$config = array();		while ($row = $db->sql_fetchrow($result))		{			$config[$row['config_name']] = $row['config_value'];		}		$db->sql_freeresult($result);		// Override a couple of config variables for the duration		$config['max_quote_depth'] = 0;		// @todo Need to confirm that max post length in source is <= max post length in destination or there may be interesting formatting issues		$config['max_post_chars'] = $config['min_post_chars'] = 0;		// Set up a user as well. We _should_ have enough of a database here at this point to do this		// and it helps for any core code we call		$user->session_begin();		$user->page = $user->extract_current_page($phpbb_root_path);		// This is a little bit of a fudge, but it allows the language entries to be available to the		// core code without us loading them again		$user->lang = &$lang;		$this->page_title = $user->lang['STAGE_IN_PROGRESS'];		$convert->options = array();		if (isset($config['convert_progress']))		{			$convert->options = unserialize($config['convert_progress']);			$convert->options = array_merge($convert->options, unserialize($config['convert_db_server']), unserialize($config['convert_db_user']), unserialize($config['convert_options']));		}		// This information should have already been checked once, but do it again for safety		if (empty($convert->options) || empty($convert->options['tag']) ||			!isset($convert->options['dbms']) ||			!isset($convert->options['dbhost']) ||			!isset($convert->options['dbport']) ||			!isset($convert->options['dbuser']) ||			!isset($convert->options['dbpasswd']) ||			!isset($convert->options['dbname']) ||			!isset($convert->options['table_prefix']))		{			$this->p_master->error($user->lang['NO_CONVERT_SPECIFIED'], __LINE__, __FILE__);		}		// Make some short variables accessible, for easier referencing		$convert->convertor_tag = basename($convert->options['tag']);		$convert->src_dbms = $convert->options['dbms'];		$convert->src_dbhost = $convert->options['dbhost'];		$convert->src_dbport = $convert->options['dbport'];		$convert->src_dbuser = $convert->options['dbuser'];		$convert->src_dbpasswd = $convert->options['dbpasswd'];		$convert->src_dbname = $convert->options['dbname'];		$convert->src_table_prefix = $convert->options['table_prefix'];		// initiate database connection to old db if old and new db differ		global $src_db, $same_db;		$src_db = $same_db = null;		if ($convert->src_dbms != $dbms || $convert->src_dbhost != $dbhost || $convert->src_dbport != $dbport || $convert->src_dbname != $dbname || $convert->src_dbuser != $dbuser)		{			if ($convert->src_dbms != $dbms)			{				require($phpbb_root_path . 'includes/db/' . $convert->src_dbms . '.' . $phpEx);			}			$sql_db = 'dbal_' . $convert->src_dbms;			$src_db = new $sql_db();			$src_db->sql_connect($convert->src_dbhost, $convert->src_dbuser, htmlspecialchars_decode($convert->src_dbpasswd), $convert->src_dbname, $convert->src_dbport, false, true);			$same_db = false;		}		else		{			$src_db = $db;			$same_db = true;		}		$convert->mysql_convert = false;		switch ($src_db->sql_layer)		{			case 'sqlite':			case 'firebird':				$convert->src_truncate_statement = 'DELETE FROM ';			break;			// Thanks MySQL, for silently converting...			case 'mysql':			case 'mysql4':				if (version_compare($src_db->sql_server_info(true, false), '4.1.3', '>='))				{					$convert->mysql_convert = true;				}				$convert->src_truncate_statement = 'TRUNCATE TABLE ';			break;			case 'mysqli':				$convert->mysql_convert = true;				$convert->src_truncate_statement = 'TRUNCATE TABLE ';			break;			default:				$convert->src_truncate_statement = 'TRUNCATE TABLE ';			break;		}		if ($convert->mysql_convert && !$same_db)		{			$src_db->sql_query("SET NAMES 'binary'");		}		switch ($db->sql_layer)		{			case 'sqlite':			case 'firebird':				$convert->truncate_statement = 'DELETE FROM ';			break;			default:				$convert->truncate_statement = 'TRUNCATE TABLE ';			break;		}		$get_info = false;		// check security implications of direct inclusion		if (!file_exists('./convertors/convert_' . $convert->convertor_tag . '.' . $phpEx))		{			$this->p_master->error($user->lang['CONVERT_NOT_EXIST'], __LINE__, __FILE__);		}		if (file_exists('./convertors/functions_' . $convert->convertor_tag . '.' . $phpEx))		{			include('./convertors/functions_' . $convert->convertor_tag . '.' . $phpEx);		}		$get_info = true;		include('./convertors/convert_' . $convert->convertor_tag . '.' . $phpEx);		// Map some variables...		$convert->convertor_data = $convertor_data;		$convert->tables = $tables;		$convert->config_schema = $config_schema;		// Now include the real data		$get_info = false;		include('./convertors/convert_' . $convert->convertor_tag . '.' . $phpEx);		$convert->convertor_data = $convertor_data;		$convert->tables = $tables;		$convert->config_schema = $config_schema;		$convert->convertor = $convertor;		// The test_file is a file that should be present in the location of the old board.		if (!file_exists($convert->options['forum_path'] . '/' . $test_file))		{			$this->p_master->error(sprintf($user->lang['COULD_NOT_FIND_PATH'], $convert->options['forum_path']), __LINE__, __FILE__);		}		$search_type = basename(trim($config['search_type']));		// For conversions we are a bit less strict and set to a search backend we know exist...		if (!file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx))		{			$search_type = 'fulltext_native';			set_config('search_type', $search_type);		}		if (!file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx))		{			trigger_error('NO_SUCH_SEARCH_MODULE');		}		require($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx);		$error = false;		$convert->fulltext_search = new $search_type($error);		if ($error)		{			trigger_error($error);		}		include($phpbb_root_path . 'includes/message_parser.' . $phpEx);		$message_parser = new parse_message();		$jump = request_var('jump', 0);		$final_jump = request_var('final_jump', 0);		$sync_batch = request_var('sync_batch', -1);		$last_statement = request_var('last', 0);		// We are running sync...		if ($sync_batch >= 0)		{			$this->sync_forums($sync_batch);			return;		}		if ($jump)		{			$this->jump($jump, $last_statement);			return;		}		if ($final_jump)		{			$this->final_jump($final_jump);			return;		}		$current_table = request_var('current_table', 0);		$old_current_table = min(-1, $current_table - 1);		$skip_rows = request_var('skip_rows', 0);		if (!$current_table && !$skip_rows)		{			if (empty($_REQUEST['confirm']))			{				// If avatars / ranks / smilies folders are specified make sure they are writable				$bad_folders = array();				$local_paths = array(					'avatar_path'			=> path($config['avatar_path']),					'avatar_gallery_path'	=> path($config['avatar_gallery_path']),					'icons_path'			=> path($config['icons_path']),					'ranks_path'			=> path($config['ranks_path']),					'smilies_path'			=> path($config['smilies_path'])				);				foreach ($local_paths as $folder => $local_path)				{					if (isset($convert->convertor[$folder]))					{						if (empty($convert->convertor['test_file']))						{							// test_file is mandantory at the moment so this should never be reached, but just in case...							$this->p_master->error($user->lang['DEV_NO_TEST_FILE'], __LINE__, __FILE__);						}						if (!$local_path || !phpbb_is_writable($phpbb_root_path . $local_path))						{							if (!$local_path)							{								$bad_folders[] = sprintf($user->lang['CONFIG_PHPBB_EMPTY'], $folder);							}							else							{								$bad_folders[] = $local_path;							}						}					}				}				if (sizeof($bad_folders))				{					$msg = (sizeof($bad_folders) == 1) ? $user->lang['MAKE_FOLDER_WRITABLE'] : $user->lang['MAKE_FOLDERS_WRITABLE'];					sort($bad_folders);					$this->p_master->error(sprintf($msg, implode('<br />', $bad_folders)), __LINE__, __FILE__, true);					$template->assign_vars(array(						'L_SUBMIT'	=> $user->lang['INSTALL_TEST'],						'U_ACTION'	=> $this->p_master->module_url . "?mode={$this->mode}&amp;sub=in_progress&amp;tag={$convert->convertor_tag}&amp;language=$language",					));					return;				}				// Grab all the tables used in convertor				$missing_tables = $tables_list = $aliases = array();				foreach ($convert->convertor['schema'] as $schema)				{					// Skip those not used (because of addons/plugins not detected)					if (!$schema['target'])					{						continue;					}					foreach ($schema as $key => $val)					{						// we're dealing with an array like:						// array('forum_status',			'forums.forum_status',				'is_item_locked')						if (is_int($key) && !empty($val[1]))						{							$temp_data = $val[1];							if (!is_array($temp_data))							{								$temp_data = array($temp_data);							}							foreach ($temp_data as $val)							{								if (preg_match('/([a-z0-9_]+)\.([a-z0-9_]+)\)* ?A?S? ?([a-z0-9_]*?)\.?([a-z0-9_]*)$/i', $val, $m))								{									$table = $convert->src_table_prefix . $m[1];									$tables_list[$table] = $table;									if (!empty($m[3]))									{										$aliases[] = $convert->src_table_prefix . $m[3];									}								}							}						}						// 'left_join'		=> 'topics LEFT JOIN vote_desc ON topics.topic_id = vote_desc.topic_id AND topics.topic_vote = 1'						else if ($key == 'left_join')						{							// Convert the value if it wasn't an array already.							if (!is_array($val))							{								$val = array($val);							}							for ($j = 0; $j < sizeof($val); ++$j)							{								if (preg_match('/LEFT JOIN ([a-z0-9_]+) AS ([a-z0-9_]+)/i', $val[$j], $m))								{									$table = $convert->src_table_prefix . $m[1];									$tables_list[$table] = $table;									if (!empty($m[2]))									{										$aliases[] = $convert->src_table_prefix . $m[2];									}								}							}						}					}				}				// Remove aliased tables from $tables_list				foreach ($aliases as $alias)				{					unset($tables_list[$alias]);				}				// Check if the tables that we need exist				$src_db->sql_return_on_error(true);				foreach ($tables_list as $table => $null)				{					$sql = 'SELECT 1 FROM ' . $table;					$_result = $src_db->sql_query_limit($sql, 1);					if (!$_result)					{						$missing_tables[] = $table;					}					$src_db->sql_freeresult($_result);				}				$src_db->sql_return_on_error(false);				// Throw an error if some tables are missing				// We used to do some guessing here, but since we have a suggestion of possible values earlier, I don't see it adding anything here to do it again				if (sizeof($missing_tables) == sizeof($tables_list))				{					$this->p_master->error($user->lang['NO_TABLES_FOUND'] . ' ' . $user->lang['CHECK_TABLE_PREFIX'], __LINE__, __FILE__);				}				else if (sizeof($missing_tables))				{					$this->p_master->error(sprintf($user->lang['TABLES_MISSING'], implode(', ', $missing_tables)) . '<br /><br />' . $user->lang['CHECK_TABLE_PREFIX'], __LINE__, __FILE__);				}				$url = $this->save_convert_progress('&amp;confirm=1');				$msg = $user->lang['PRE_CONVERT_COMPLETE'];				if ($convert->convertor_data['author_notes'])				{					$msg .= '</p><p>' . sprintf($user->lang['AUTHOR_NOTES'], $convert->convertor_data['author_notes']);				}				$template->assign_vars(array(					'L_SUBMIT'		=> $user->lang['CONTINUE_CONVERT'],					'L_MESSAGE'		=> $msg,					'U_ACTION'		=> $url,				));				return;			} // if (empty($_REQUEST['confirm']))			$template->assign_block_vars('checks', array(				'S_LEGEND'		=> true,				'LEGEND'		=> $user->lang['STARTING_CONVERT'],			));			// Convert the config table and load the settings of the old board			if (!empty($convert->config_schema))			{				restore_config($convert->config_schema);				// Override a couple of config variables for the duration				$config['max_quote_depth'] = 0;				// @todo Need to confirm that max post length in source is <= max post length in destination or there may be interesting formatting issues				$config['max_post_chars'] = $config['min_post_chars'] = 0;			}			$template->assign_block_vars('checks', array(				'TITLE'		=> $user->lang['CONFIG_CONVERT'],				'RESULT'	=> $user->lang['DONE'],			));			// Now process queries and execute functions that have to be executed prior to the conversion			if (!empty($convert->convertor['execute_first']))			{				eval($convert->convertor['execute_first']);			}			if (!empty($convert->convertor['query_first']))			{				if (!is_array($convert->convertor['query_first']))				{					$convert->convertor['query_first'] = array('target', array($convert->convertor['query_first']));				}				else if (!is_array($convert->convertor['query_first'][0]))				{					$convert->convertor['query_first'] = array(array($convert->convertor['query_first'][0], $convert->convertor['query_first'][1]));				}				foreach ($convert->convertor['query_first'] as $query_first)				{					if ($query_first[0] == 'src')					{						if ($convert->mysql_convert && $same_db)						{							$src_db->sql_query("SET NAMES 'binary'");						}						$src_db->sql_query($query_first[1]);						if ($convert->mysql_convert && $same_db)						{							$src_db->sql_query("SET NAMES 'utf8'");						}					}					else					{						$db->sql_query($query_first[1]);					}				}			}			$template->assign_block_vars('checks', array(				'TITLE'		=> $user->lang['PREPROCESS_STEP'],				'RESULT'	=> $user->lang['DONE'],			));		} // if (!$current_table && !$skip_rows)		$template->assign_block_vars('checks', array(			'S_LEGEND'		=> true,			'LEGEND'		=> $user->lang['FILLING_TABLES'],		));		// This loop takes one target table and processes it		while ($current_table < sizeof($convert->convertor['schema']))		{			$schema = $convert->convertor['schema'][$current_table];			// The target table isn't set, this can be because a module (for example the attachement mod) is taking care of this.			if (empty($schema['target']))			{				$current_table++;				continue;			}			$template->assign_block_vars('checks', array(				'TITLE'	=> sprintf($user->lang['FILLING_TABLE'], $schema['target']),			));			// This is only the case when we first start working on the tables.			if (!$skip_rows)			{				// process execute_first and query_first for this table...				if (!empty($schema['execute_first']))				{					eval($schema['execute_first']);				}				if (!empty($schema['query_first']))				{					if (!is_array($schema['query_first']))					{						$schema['query_first'] = array('target', array($schema['query_first']));					}					else if (!is_array($schema['query_first'][0]))					{						$schema['query_first'] = array(array($schema['query_first'][0], $schema['query_first'][1]));					}					foreach ($schema['query_first'] as $query_first)					{						if ($query_first[0] == 'src')						{							if ($convert->mysql_convert && $same_db)							{								$src_db->sql_query("SET NAMES 'binary'");							}							$src_db->sql_query($query_first[1]);							if ($convert->mysql_convert && $same_db)							{								$src_db->sql_query("SET NAMES 'utf8'");							}						}						else						{							$db->sql_query($query_first[1]);						}					}				}				if (!empty($schema['autoincrement']))				{					switch ($db->sql_layer)					{						case 'postgres':							$db->sql_query("SELECT SETVAL('" . $schema['target'] . "_seq',(select case when max(" . $schema['autoincrement'] . ")>0 then max(" . $schema['autoincrement'] . ")+1 else 1 end from " . $schema['target'] . '));');						break;						case 'oracle':							$result = $db->sql_query('SELECT MAX(' . $schema['autoincrement'] . ') as max_id FROM ' . $schema['target']);							$row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							$largest_id = (int) $row['max_id'];							if ($largest_id)							{								$db->sql_query('DROP SEQUENCE ' . $schema['target'] . '_seq');								$db->sql_query('CREATE SEQUENCE ' . $schema['target'] . '_seq START WITH ' . ($largest_id + 1));							}						break;					}				}			}			// Process execute_always for this table			// This is for code which needs to be executed on every pass of this table if			// it gets split because of time restrictions			if (!empty($schema['execute_always']))			{				eval($schema['execute_always']);			}			//			// Set up some variables			//			// $waiting_rows	holds rows for multirows insertion (MySQL only)			// $src_tables		holds unique tables with aliases to select from			// $src_fields		will quickly refer source fields (or aliases) corresponding to the current index			// $select_fields	holds the names of the fields to retrieve			//			$sql_data = array(				'source_fields'		=> array(),				'target_fields'		=> array(),				'source_tables'		=> array(),				'select_fields'		=> array(),			);			// This statement is building the keys for later insertion.			$insert_query = $this->build_insert_query($schema, $sql_data, $current_table);			// If no source table is affected, we skip the table			if (empty($sql_data['source_tables']))			{				$skip_rows = 0;				$current_table++;				continue;			}			$distinct = (!empty($schema['distinct'])) ? 'DISTINCT ' : '';			$sql = 'SELECT ' . $distinct . implode(', ', $sql_data['select_fields']) . " \nFROM " . implode(', ', $sql_data['source_tables']);			// Where			$sql .= (!empty($schema['where'])) ? "\nWHERE (" . $schema['where'] . ')' : '';			// Group By			if (!empty($schema['group_by']))			{				$schema['group_by'] = array($schema['group_by']);				foreach ($sql_data['select_fields'] as $select)				{					$alias = strpos(strtolower($select), ' as ');					$select = ($alias) ? substr($select, 0, $alias) : $select;					if (!in_array($select, $schema['group_by']))					{						$schema['group_by'][] = $select;					}				}			}			$sql .= (!empty($schema['group_by'])) ? "\nGROUP BY " . implode(', ', $schema['group_by']) : '';			// Having			$sql .= (!empty($schema['having'])) ? "\nHAVING " . $schema['having'] : '';			// Order By			if (empty($schema['order_by']) && !empty($schema['primary']))			{				$schema['order_by'] = $schema['primary'];			}			$sql .= (!empty($schema['order_by'])) ? "\nORDER BY " . $schema['order_by'] : '';			// Counting basically holds the amount of rows processed.			$counting = -1;			$batch_time = 0;			while ($counting === -1 || ($counting >= $convert->batch_size && still_on_time()))			{				$old_current_table = $current_table;				$rows = '';				$waiting_rows = array();				if (!empty($batch_time))				{					$mtime = explode(' ', microtime());					$mtime = $mtime[0] + $mtime[1];					$rows = ceil($counting/($mtime - $batch_time)) . " rows/s ($counting rows) | ";				}				$template->assign_block_vars('checks', array(					'TITLE'		=> "skip_rows = $skip_rows",					'RESULT'	=> $rows . ((defined('DEBUG_EXTRA') && function_exists('memory_get_usage')) ? ceil(memory_get_usage()/1024) . ' ' . $user->lang['KIB'] : ''),				));				$mtime = explode(' ', microtime());				$batch_time = $mtime[0] + $mtime[1];				if ($convert->mysql_convert && $same_db)				{					$src_db->sql_query("SET NAMES 'binary'");				}				// Take skip rows into account and only fetch batch_size amount of rows				$___result = $src_db->sql_query_limit($sql, $convert->batch_size, $skip_rows);				if ($convert->mysql_convert && $same_db)				{					$src_db->sql_query("SET NAMES 'utf8'");				}				// This loop processes each row				$counting = 0;				$convert->row = $convert_row = array();				if (!empty($schema['autoincrement']))				{					switch ($db->sql_layer)					{						case 'mssql':						case 'mssql_odbc':						case 'mssqlnative':							$db->sql_query('SET IDENTITY_INSERT ' . $schema['target'] . ' ON');						break;					}				}				// Now handle the rows until time is over or no more rows to process...				while ($counting === 0 || still_on_time())				{					$convert_row = $src_db->sql_fetchrow($___result);					if (!$convert_row)					{						// move to the next batch or table						break;					}					// With this we are able to always save the last state					$convert->row = $convert_row;					// Increment the counting variable, it stores the number of rows we have processed					$counting++;					$insert_values = array();					$sql_flag = $this->process_row($schema, $sql_data, $insert_values);					if ($sql_flag === true)					{						switch ($db->sql_layer)						{							// If MySQL, we'll wait to have num_wait_rows rows to submit at once							case 'mysql':							case 'mysql4':							case 'mysqli':								$waiting_rows[] = '(' . implode(', ', $insert_values) . ')';								if (sizeof($waiting_rows) >= $convert->num_wait_rows)								{									$errored = false;									$db->sql_return_on_error(true);									if (!$db->sql_query($insert_query . implode(', ', $waiting_rows)))									{										$errored = true;									}									$db->sql_return_on_error(false);									if ($errored)									{										$db->sql_return_on_error(true);										// Because it errored out we will try to insert the rows one by one... most of the time this										// is caused by duplicate entries - but we also do not want to miss one...										foreach ($waiting_rows as $waiting_sql)										{											if (!$db->sql_query($insert_query . $waiting_sql))											{												$this->p_master->db_error($user->lang['DB_ERR_INSERT'], htmlspecialchars($insert_query . $waiting_sql) . '<br /><br />' . htmlspecialchars(print_r($db->_sql_error(), true)), __LINE__, __FILE__, true);											}										}										$db->sql_return_on_error(false);									}									$waiting_rows = array();								}							break;							default:								$insert_sql = $insert_query . '(' . implode(', ', $insert_values) . ')';								$db->sql_return_on_error(true);								if (!$db->sql_query($insert_sql))								{									$this->p_master->db_error($user->lang['DB_ERR_INSERT'], htmlspecialchars($insert_sql) . '<br /><br />' . htmlspecialchars(print_r($db->_sql_error(), true)), __LINE__, __FILE__, true);								}								$db->sql_return_on_error(false);								$waiting_rows = array();							break;						}					}					$skip_rows++;				}				$src_db->sql_freeresult($___result);				// We might still have some rows waiting				if (sizeof($waiting_rows))				{					$errored = false;					$db->sql_return_on_error(true);					if (!$db->sql_query($insert_query . implode(', ', $waiting_rows)))					{						$errored = true;					}					$db->sql_return_on_error(false);					if ($errored)					{						$db->sql_return_on_error(true);						// Because it errored out we will try to insert the rows one by one... most of the time this						// is caused by duplicate entries - but we also do not want to miss one...						foreach ($waiting_rows as $waiting_sql)						{							$db->sql_query($insert_query . $waiting_sql);							$this->p_master->db_error($user->lang['DB_ERR_INSERT'], htmlspecialchars($insert_query . $waiting_sql) . '<br /><br />' . htmlspecialchars(print_r($db->_sql_error(), true)), __LINE__, __FILE__, true);						}						$db->sql_return_on_error(false);					}					$waiting_rows = array();				}				if (!empty($schema['autoincrement']))				{					switch ($db->sql_layer)					{						case 'mssql':						case 'mssql_odbc':						case 'mssqlnative':							$db->sql_query('SET IDENTITY_INSERT ' . $schema['target'] . ' OFF');						break;						case 'postgres':							$db->sql_query("SELECT SETVAL('" . $schema['target'] . "_seq',(select case when max(" . $schema['autoincrement'] . ")>0 then max(" . $schema['autoincrement'] . ")+1 else 1 end from " . $schema['target'] . '));');						break;						case 'oracle':							$result = $db->sql_query('SELECT MAX(' . $schema['autoincrement'] . ') as max_id FROM ' . $schema['target']);							$row = $db->sql_fetchrow($result);							$db->sql_freeresult($result);							$largest_id = (int) $row['max_id'];							if ($largest_id)							{								$db->sql_query('DROP SEQUENCE ' . $schema['target'] . '_seq');								$db->sql_query('CREATE SEQUENCE ' . $schema['target'] . '_seq START WITH ' . ($largest_id + 1));							}						break;					}				}			}			// When we reach this point, either the current table has been processed or we're running out of time.			if (still_on_time() && $counting < $convert->batch_size/* && !defined('DEBUG_EXTRA')*/)			{				$skip_rows = 0;				$current_table++;			}			else			{/*				if (still_on_time() && $counting < $convert->batch_size)				{					$skip_rows = 0;					$current_table++;				}*/				// Looks like we ran out of time.				$url = $this->save_convert_progress('&amp;current_table=' . $current_table . '&amp;skip_rows=' . $skip_rows);				$current_table++;//				$percentage = ($skip_rows == 0) ? 0 : floor(100 / ($total_rows / $skip_rows));				$msg = sprintf($user->lang['STEP_PERCENT_COMPLETED'], $current_table, sizeof($convert->convertor['schema']));				$template->assign_vars(array(					'L_MESSAGE'		=> $msg,					'L_SUBMIT'		=> $user->lang['CONTINUE_CONVERT'],					'U_ACTION'		=> $url,				));				$this->meta_refresh($url);				return;			}		}		// Process execute_last then we'll be done		$url = $this->save_convert_progress('&amp;jump=1');		$template->assign_vars(array(			'L_SUBMIT'		=> $user->lang['FINAL_STEP'],			'U_ACTION'		=> $url,		));		$this->meta_refresh($url);		return;	}	/**	* Sync function being executed at the middle, some functions need to be executed after a successful sync.	*/	function sync_forums($sync_batch)	{		global $template, $user, $db, $phpbb_root_path, $phpEx, $config, $cache;		global $convert;		$template->assign_block_vars('checks', array(			'S_LEGEND'	=> true,			'LEGEND'	=> $user->lang['SYNC_TOPICS'],		));		$batch_size = $convert->batch_size;		$sql = 'SELECT MIN(topic_id) as min_value, MAX(topic_id) AS max_value			FROM ' . TOPICS_TABLE;		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		// Set values of minimum/maximum primary value for this table.		$primary_min = $row['min_value'];		$primary_max = $row['max_value'];		if ($sync_batch == 0)		{			$sync_batch = (int) $primary_min;		}		if ($sync_batch == 0)		{			$sync_batch = 1;		}		// Fetch a batch of rows, process and insert them.		while ($sync_batch <= $primary_max && still_on_time())		{			$end = ($sync_batch + $batch_size - 1);			// Sync all topics in batch mode...			sync('topic_approved', 'range', 'topic_id BETWEEN ' . $sync_batch . ' AND ' . $end, true, false);			sync('topic', 'range', 'topic_id BETWEEN ' . $sync_batch . ' AND ' . $end, true, true);			$template->assign_block_vars('checks', array(				'TITLE'		=> sprintf($user->lang['SYNC_TOPIC_ID'], $sync_batch, ($sync_batch + $batch_size)) . ((defined('DEBUG_EXTRA') && function_exists('memory_get_usage')) ? ' [' . ceil(memory_get_usage()/1024) . ' ' . $user->lang['KIB'] . ']' : ''),				'RESULT'	=> $user->lang['DONE'],			));			$sync_batch += $batch_size;		}		if ($sync_batch >= $primary_max)		{			$url = $this->save_convert_progress('&amp;final_jump=1');			$template->assign_vars(array(				'L_SUBMIT'		=> $user->lang['CONTINUE_CONVERT'],				'U_ACTION'		=> $url,			));			$this->meta_refresh($url);			return;		}		else		{			$sync_batch--;		}		$url = $this->save_convert_progress('&amp;sync_batch=' . $sync_batch);		$template->assign_vars(array(			'L_SUBMIT'		=> $user->lang['CONTINUE_CONVERT'],			'U_ACTION'		=> $url,		));		$this->meta_refresh($url);		return;	}	/**	* Save the convertor status	*/	function save_convert_progress($step)	{		global $convert, $language;		// Save convertor Status		set_config('convert_progress', serialize(array(			'step'			=> $step,			'table_prefix'	=> $convert->src_table_prefix,			'tag'			=> $convert->convertor_tag,		)), true);		set_config('convert_db_server', serialize(array(			'dbms'			=> $convert->src_dbms,			'dbhost'		=> $convert->src_dbhost,			'dbport'		=> $convert->src_dbport,			'dbname'		=> $convert->src_dbname,		)), true);		set_config('convert_db_user', serialize(array(			'dbuser'		=> $convert->src_dbuser,			'dbpasswd'		=> $convert->src_dbpasswd,		)), true);		return $this->p_master->module_url . "?mode={$this->mode}&amp;sub=in_progress&amp;tag={$convert->convertor_tag}$step&amp;language=$language";	}	/**	* Finish conversion, the last function to be called.	*/	function finish_conversion()	{		global $db, $phpbb_root_path, $phpEx, $convert, $config, $language, $user, $template;		$db->sql_query('DELETE FROM ' . CONFIG_TABLE . "			WHERE config_name = 'convert_progress'				OR config_name = 'convert_options'				OR config_name = 'convert_db_server'				OR config_name = 'convert_db_user'");		$db->sql_query('DELETE FROM ' . SESSIONS_TABLE);		@unlink($phpbb_root_path . 'cache/data_global.' . $phpEx);		cache_moderators();		// And finally, add a note to the log		add_log('admin', 'LOG_INSTALL_CONVERTED', $convert->convertor_data['forum_name'], $config['version']);		$url = $this->p_master->module_url . "?mode={$this->mode}&amp;sub=final&amp;language=$language";		$template->assign_vars(array(			'L_SUBMIT'		=> $user->lang['FINAL_STEP'],			'U_ACTION'		=> $url,		));		$this->meta_refresh($url);		return;	}	/**	* This function marks the steps after syncing	*/	function final_jump($final_jump)	{		global $template, $user, $src_db, $same_db, $db, $phpbb_root_path, $phpEx, $config, $cache;		global $convert;		$template->assign_block_vars('checks', array(			'S_LEGEND'	=> true,			'LEGEND'	=> $user->lang['PROCESS_LAST'],		));		if ($final_jump == 1)		{			$db->sql_return_on_error(true);			update_topics_posted();			$template->assign_block_vars('checks', array(				'TITLE'		=> $user->lang['UPDATE_TOPICS_POSTED'],				'RESULT'	=> $user->lang['DONE'],			));			if ($db->sql_error_triggered)			{				$template->assign_vars(array(					'S_ERROR_BOX'	=> true,					'ERROR_TITLE'	=> $user->lang['UPDATE_TOPICS_POSTED'],					'ERROR_MSG'		=> $user->lang['UPDATE_TOPICS_POSTED_ERR'],				));			}			$db->sql_return_on_error(false);			$this->finish_conversion();			return;		}	}	/**	* This function marks the steps before syncing (jump=1)	*/	function jump($jump, $last_statement)	{		global $template, $user, $src_db, $same_db, $db, $phpbb_root_path, $phpEx, $config, $cache;		global $convert;		$template->assign_block_vars('checks', array(			'S_LEGEND'	=> true,			'LEGEND'	=> $user->lang['PROCESS_LAST'],		));		if ($jump == 1)		{			// Execute 'last' statements/queries			if (!empty($convert->convertor['execute_last']))			{				if (!is_array($convert->convertor['execute_last']))				{					eval($convert->convertor['execute_last']);				}				else				{					while ($last_statement < sizeof($convert->convertor['execute_last']))					{						eval($convert->convertor['execute_last'][$last_statement]);						$template->assign_block_vars('checks', array(							'TITLE'		=> $convert->convertor['execute_last'][$last_statement],							'RESULT'	=> $user->lang['DONE'],						));						$last_statement++;						$url = $this->save_convert_progress('&amp;jump=1&amp;last=' . $last_statement);						$percentage = ($last_statement == 0) ? 0 : floor(100 / (sizeof($convert->convertor['execute_last']) / $last_statement));						$msg = sprintf($user->lang['STEP_PERCENT_COMPLETED'], $last_statement, sizeof($convert->convertor['execute_last']), $percentage);						$template->assign_vars(array(							'L_SUBMIT'		=> $user->lang['CONTINUE_LAST'],							'L_MESSAGE'		=> $msg,							'U_ACTION'		=> $url,						));						$this->meta_refresh($url);						return;					}				}			}			if (!empty($convert->convertor['query_last']))			{				if (!is_array($convert->convertor['query_last']))				{					$convert->convertor['query_last'] = array('target', array($convert->convertor['query_last']));				}				else if (!is_array($convert->convertor['query_last'][0]))				{					$convert->convertor['query_last'] = array(array($convert->convertor['query_last'][0], $convert->convertor['query_last'][1]));				}				foreach ($convert->convertor['query_last'] as $query_last)				{					if ($query_last[0] == 'src')					{						if ($convert->mysql_convert && $same_db)						{							$src_db->sql_query("SET NAMES 'binary'");						}						$src_db->sql_query($query_last[1]);						if ($convert->mysql_convert && $same_db)						{							$src_db->sql_query("SET NAMES 'utf8'");						}					}					else					{						$db->sql_query($query_last[1]);					}				}			}			// Sanity check			$db->sql_return_on_error(false);			$src_db->sql_return_on_error(false);			fix_empty_primary_groups();			$sql = 'SELECT MIN(user_regdate) AS board_startdate				FROM ' . USERS_TABLE;			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!isset($config['board_startdate']) || ($row['board_startdate'] < $config['board_startdate'] && $row['board_startdate'] > 0))			{				set_config('board_startdate', $row['board_startdate']);				$db->sql_query('UPDATE ' . USERS_TABLE . ' SET user_regdate = ' . $row['board_startdate'] . ' WHERE user_id = ' . ANONYMOUS);			}			update_dynamic_config();			$template->assign_block_vars('checks', array(				'TITLE'		=> $user->lang['CLEAN_VERIFY'],				'RESULT'	=> $user->lang['DONE'],			));			$url = $this->save_convert_progress('&amp;jump=2');			$template->assign_vars(array(				'L_SUBMIT'		=> $user->lang['CONTINUE_CONVERT'],				'U_ACTION'		=> $url,			));			$this->meta_refresh($url);			return;		}		if ($jump == 2)		{			$db->sql_query('UPDATE ' . USERS_TABLE . " SET user_permissions = ''");			// TODO: sync() is likely going to bomb out on forums with a considerable amount of topics.			// TODO: the sync function is able to handle FROM-TO values, we should use them here (batch processing)			sync('forum', '', '', false, true);			$cache->destroy('sql', FORUMS_TABLE);			$template->assign_block_vars('checks', array(				'TITLE'		=> $user->lang['SYNC_FORUMS'],				'RESULT'	=> $user->lang['DONE'],			));			// Continue with synchronizing the forums...			$url = $this->save_convert_progress('&amp;sync_batch=0');			$template->assign_vars(array(				'L_SUBMIT'		=> $user->lang['CONTINUE_CONVERT'],				'U_ACTION'		=> $url,			));			$this->meta_refresh($url);			return;		}	}	function build_insert_query(&$schema, &$sql_data, $current_table)	{		global $db, $user;		global $convert;		// Can we use IGNORE with this DBMS?		$sql_ignore = (strpos($db->sql_layer, 'mysql') === 0 && !defined('DEBUG_EXTRA')) ? 'IGNORE ' : '';		$insert_query = 'INSERT ' . $sql_ignore . 'INTO ' . $schema['target'] . ' (';		$aliases = array();		$sql_data = array(			'source_fields'		=> array(),			'target_fields'		=> array(),			'source_tables'		=> array(),			'select_fields'		=> array(),		);		foreach ($schema as $key => $val)		{			// Example: array('group_name',				'extension_groups.group_name',		'htmlspecialchars'),			if (is_int($key))			{				if (!empty($val[0]))				{					// Target fields					$sql_data['target_fields'][$val[0]] = $key;					$insert_query .= $val[0] . ', ';				}				if (!is_array($val[1]))				{					$val[1] = array($val[1]);				}				foreach ($val[1] as $valkey => $value_1)				{					// This should cover about any case:					//					// table.field					=> SELECT table.field				FROM table					// table.field AS alias			=> SELECT table.field	AS alias	FROM table					// table.field AS table2.alias	=> SELECT table2.field	AS alias	FROM table table2					// table.field AS table2.field	=> SELECT table2.field				FROM table table2					//					if (preg_match('/^([a-z0-9_]+)\.([a-z0-9_]+)( +AS +(([a-z0-9_]+?)\.)?([a-z0-9_]+))?$/i', $value_1, $m))					{						// There is 'AS ...' in the field names						if (!empty($m[3]))						{							$value_1 = ($m[2] == $m[6]) ? $m[1] . '.' . $m[2] : $m[1] . '.' . $m[2] . ' AS ' . $m[6];							// Table alias: store it then replace the source table with it							if (!empty($m[5]) && $m[5] != $m[1])							{								$aliases[$m[5]] = $m[1];								$value_1 = str_replace($m[1] . '.' . $m[2], $m[5] . '.' . $m[2], $value_1);							}						}						else						{							// No table alias							$sql_data['source_tables'][$m[1]] = (empty($convert->src_table_prefix)) ? $m[1] : $convert->src_table_prefix . $m[1] . ' ' . $m[1];						}						$sql_data['select_fields'][$value_1] = $value_1;						$sql_data['source_fields'][$key][$valkey] = (!empty($m[6])) ? $m[6] : $m[2];					}				}			}			else if ($key == 'where' || $key == 'group_by' || $key == 'order_by' || $key == 'having')			{				if (@preg_match_all('/([a-z0-9_]+)\.([a-z0-9_]+)/i', $val, $m))				{					foreach ($m[1] as $value)					{						$sql_data['source_tables'][$value] = (empty($convert->src_table_prefix)) ? $value : $convert->src_table_prefix . $value . ' ' . $value;					}				}			}		}		// Add the aliases to the list of tables		foreach ($aliases as $alias => $table)		{			$sql_data['source_tables'][$alias] = $convert->src_table_prefix . $table . ' ' . $alias;		}		// 'left_join'		=> 'forums LEFT JOIN forum_prune ON forums.forum_id = forum_prune.forum_id',		if (!empty($schema['left_join']))		{			if (!is_array($schema['left_join']))			{				$schema['left_join'] = array($schema['left_join']);			}			foreach ($schema['left_join'] as $left_join)			{				// This won't handle concatened LEFT JOINs				if (!preg_match('/([a-z0-9_]+) LEFT JOIN ([a-z0-9_]+) A?S? ?([a-z0-9_]*?) ?(ON|USING)(.*)/i', $left_join, $m))				{					$this->p_master->error(sprintf($user->lang['NOT_UNDERSTAND'], 'LEFT JOIN', $left_join, $current_table, $schema['target']), __LINE__, __FILE__);				}				if (!empty($aliases[$m[2]]))				{					if (!empty($m[3]))					{						$this->p_master->error(sprintf($user->lang['NAMING_CONFLICT'], $m[2], $m[3], $schema['left_join']), __LINE__, __FILE__);					}					$m[2] = $aliases[$m[2]];					$m[3] = $m[2];				}				$right_table = $convert->src_table_prefix . $m[2];				if (!empty($m[3]))				{					unset($sql_data['source_tables'][$m[3]]);				}				else if ($m[2] != $m[1])				{					unset($sql_data['source_tables'][$m[2]]);				}				if (strpos($sql_data['source_tables'][$m[1]], "\nLEFT JOIN") !== false)				{					$sql_data['source_tables'][$m[1]] = '(' . $sql_data['source_tables'][$m[1]] . ")\nLEFT JOIN $right_table";				}				else				{					$sql_data['source_tables'][$m[1]] .= "\nLEFT JOIN $right_table";				}				if (!empty($m[3]))				{					unset($sql_data['source_tables'][$m[3]]);					$sql_data['source_tables'][$m[1]] .= ' AS ' . $m[3];				}				else if (!empty($convert->src_table_prefix))				{					$sql_data['source_tables'][$m[1]] .= ' AS ' . $m[2];				}				$sql_data['source_tables'][$m[1]] .= ' ' . $m[4] . $m[5];			}		}		// Remove ", " from the end of the insert query		$insert_query = substr($insert_query, 0, -2) . ') VALUES ';		return $insert_query;	}	/**	* Function for processing the currently handled row	*/	function process_row(&$schema, &$sql_data, &$insert_values)	{		global $template, $user, $phpbb_root_path, $phpEx, $db, $lang, $config, $cache;		global $convert, $convert_row;		$sql_flag = false;		foreach ($schema as $key => $fields)		{			// We are only interested in the lines with:			// array('comment', 'attachments_desc.comment', 'htmlspecialchars'),			if (is_int($key))			{				if (!is_array($fields[1]))				{					$fields[1] = array($fields[1]);				}				$firstkey_set = false;				$firstkey = 0;				foreach ($fields[1] as $inner_key => $inner_value)				{					if (!$firstkey_set)					{						$firstkey = $inner_key;						$firstkey_set = true;					}					$src_field = isset($sql_data['source_fields'][$key][$inner_key]) ? $sql_data['source_fields'][$key][$inner_key] : '';					if (!empty($src_field))					{						$fields[1][$inner_key] = $convert->row[$src_field];					}				}				if (!empty($fields[0]))				{					// We have a target field, if we haven't set $sql_flag yet it will be set to TRUE.					// If a function has already set it to FALSE it won't change it.					if ($sql_flag === false)					{						$sql_flag = true;					}					// No function assigned?					if (empty($fields[2]))					{						$value = $fields[1][$firstkey];					}					else if (is_array($fields[2]))					{						// Execute complex function/eval/typecast						$value = $fields[1];						foreach ($fields[2] as $type => $execution)						{							if (strpos($type, 'typecast') === 0)							{								if (!is_array($value))								{									$value = array($value);								}								$value = $value[0];								settype($value, $execution);							}							else if (strpos($type, 'function') === 0)							{								if (!is_array($value))								{									$value = array($value);								}								$value = call_user_func_array($execution, $value);							}							else if (strpos($type, 'execute') === 0)							{								if (!is_array($value))								{									$value = array($value);								}								$execution = str_replace('{RESULT}', '$value', $execution);								$execution = str_replace('{VALUE}', '$value', $execution);								eval($execution);							}						}					}					else					{						$value = call_user_func_array($fields[2], $fields[1]);					}					if (is_null($value))					{						$value = '';					}					$insert_values[] = $db->_sql_validate_value($value);				}				else if (!empty($fields[2]))				{					if (is_array($fields[2]))					{						// Execute complex function/eval/typecast						$value = '';						foreach ($fields[2] as $type => $execution)						{							if (strpos($type, 'typecast') === 0)							{								$value = settype($value, $execution);							}							else if (strpos($type, 'function') === 0)							{								if (!is_array($value))								{									$value = array($value);								}								$value = call_user_func_array($execution, $value);							}							else if (strpos($type, 'execute') === 0)							{								if (!is_array($value))								{									$value = array($value);								}								$execution = str_replace('{RESULT}', '$value', $execution);								$execution = str_replace('{VALUE}', '$value', $execution);								eval($execution);							}						}					}					else					{						call_user_func_array($fields[2], $fields[1]);					}				}			}		}		return $sql_flag;	}	/**	* Own meta refresh function to be able to change the global time used	*/	function meta_refresh($url)	{		global $convert, $template;		if ($convert->options['refresh'])		{			// Because we should not rely on correct settings, we simply use the relative path here directly.			$template->assign_vars(array(				'S_REFRESH'	=> true,				'META'		=> '<meta http-equiv="refresh" content="5;url=' . $url . '" />')			);		}	}	/**	* The information below will be used to build the input fields presented to the user	*/	var $convert_options = array(		'legend1'			=> 'SPECIFY_OPTIONS',		'src_dbms'			=> array('lang' => 'DBMS',			'type' => 'select', 'options' => 'dbms_select(\'{VALUE}\', true)', 'explain' => false),		'src_dbhost'		=> array('lang' => 'DB_HOST',		'type' => 'text:25:100', 'explain' => true),		'src_dbport'		=> array('lang' => 'DB_PORT',		'type' => 'text:25:100', 'explain' => true),		'src_dbname'		=> array('lang' => 'DB_NAME',		'type' => 'text:25:100', 'explain' => false),		'src_dbuser'		=> array('lang' => 'DB_USERNAME',	'type' => 'text:25:100', 'explain' => false),		'src_dbpasswd'		=> array('lang' => 'DB_PASSWORD',	'type' => 'password:25:100', 'explain' => false),		'src_table_prefix'	=> array('lang' => 'TABLE_PREFIX',	'type' => 'text:25:100', 'explain' => false),		//'src_url'			=> array('lang' => 'FORUM_ADDRESS',	'type' => 'text:50:100', 'explain' => true),		'forum_path'		=> array('lang' => 'FORUM_PATH',	'type' => 'text:25:100', 'explain' => true),		'refresh'			=> array('lang' => 'REFRESH_PAGE',	'type' => 'radio:yes_no', 'explain' => true),	);}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_database_info{	function module()	{		return array(			'filename'	=> 'acp_database',			'title'		=> 'ACP_DATABASE',			'version'	=> '1.0.0',			'modes'		=> array(				'backup'	=> array('title' => 'ACP_BACKUP', 'auth' => 'acl_a_backup', 'cat' => array('ACP_CAT_DATABASE')),				'restore'	=> array('title' => 'ACP_RESTORE', 'auth' => 'acl_a_backup', 'cat' => array('ACP_CAT_DATABASE')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** acp_database [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// Database Backup/Restore$lang = array_merge($lang, array(	'ACP_BACKUP_EXPLAIN'	=> 'Here you can backup all your phpBB related data. You may store the resulting archive in your <samp>store/</samp> folder or download it directly. Depending on your server configuration you may be able to compress the file in a number of formats.',	'ACP_RESTORE_EXPLAIN'	=> 'This will perform a full restore of all phpBB tables from a saved file. If your server supports it you may use a gzip or bzip2 compressed text file and it will automatically be decompressed. <strong>WARNING</strong> This will overwrite any existing data. The restore may take a long time to process please do not move from this page till it is complete. Backups are stored in the <samp>store/</samp> folder and are assumed to be generated by phpBBs backup functionality. Restoring backups that were not created by the built in system may or may not work.',	'BACKUP_DELETE'		=> 'The backup file has been deleted successfully.',	'BACKUP_INVALID'	=> 'The selected file to backup is invalid.',	'BACKUP_OPTIONS'	=> 'Backup options',	'BACKUP_SUCCESS'	=> 'The backup file has been created successfully.',	'BACKUP_TYPE'		=> 'Backup type',	'DATABASE'			=> 'Database utilities',	'DATA_ONLY'			=> 'Data only',	'DELETE_BACKUP'		=> 'Delete backup',	'DELETE_SELECTED_BACKUP'	=> 'Are you sure you want to delete the selected backup?',	'DESELECT_ALL'		=> 'Deselect all',	'DOWNLOAD_BACKUP'	=> 'Download backup',	'FILE_TYPE'			=> 'File type',	'FILE_WRITE_FAIL'	=> 'Unable to write file to storage folder.',	'FULL_BACKUP'		=> 'Full',	'RESTORE_FAILURE'		=> 'The backup file may be corrupt.',	'RESTORE_OPTIONS'		=> 'Restore options',	'RESTORE_SELECTED_BACKUP'	=> 'Are you sure you want to restore the selected backup?',	'RESTORE_SUCCESS'		=> 'The database has been successfully restored.<br /><br />Your board should be back to the state it was when the backup was made.',	'SELECT_ALL'			=> 'Select all',	'SELECT_FILE'			=> 'Select a file',	'START_BACKUP'			=> 'Start backup',	'START_RESTORE'			=> 'Start restore',	'STORE_AND_DOWNLOAD'	=> 'Store and download',	'STORE_LOCAL'			=> 'Store file locally',	'STRUCTURE_ONLY'		=> 'Structure only',	'TABLE_SELECT'		=> 'Table select',	'TABLE_SELECT_ERROR'=> 'You must select at least one table.',));?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_update{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('install');		$this->tpl_name = 'acp_update';		$this->page_title = 'ACP_VERSION_CHECK';		// Get current and latest version		$errstr = '';		$errno = 0;		$info = obtain_latest_version_info(request_var('versioncheck_force', false));		if ($info === false)		{			trigger_error('VERSIONCHECK_FAIL', E_USER_WARNING);		}		$info = explode("\n", $info);		$latest_version = trim($info[0]);		$announcement_url = trim($info[1]);		$announcement_url = (strpos($announcement_url, '&amp;') === false) ? str_replace('&', '&amp;', $announcement_url) : $announcement_url;		$update_link = append_sid($phpbb_root_path . 'install/index.' . $phpEx, 'mode=update');		// next feature release		$next_feature_version = $next_feature_announcement_url = false;		if (isset($info[2]) && trim($info[2]) !== '')		{			$next_feature_version = trim($info[2]);			$next_feature_announcement_url = trim($info[3]);		}		// Determine automatic update...		$sql = 'SELECT config_value			FROM ' . CONFIG_TABLE . "			WHERE config_name = 'version_update_from'";		$result = $db->sql_query($sql);		$version_update_from = (string) $db->sql_fetchfield('config_value');		$db->sql_freeresult($result);		$current_version = (!empty($version_update_from)) ? $version_update_from : $config['version'];		$template->assign_vars(array(			'S_UP_TO_DATE'		=> phpbb_version_compare($latest_version, $config['version'], '<='),			'S_UP_TO_DATE_AUTO'	=> phpbb_version_compare($latest_version, $current_version, '<='),			'S_VERSION_CHECK'	=> true,			'U_ACTION'			=> $this->u_action,			'U_VERSIONCHECK_FORCE' => append_sid($this->u_action . '&amp;versioncheck_force=1'),			'LATEST_VERSION'	=> $latest_version,			'CURRENT_VERSION'	=> $config['version'],			'AUTO_VERSION'		=> $version_update_from,			'NEXT_FEATURE_VERSION'	=> $next_feature_version,			'UPDATE_INSTRUCTIONS'	=> sprintf($user->lang['UPDATE_INSTRUCTIONS'], $announcement_url, $update_link),			'UPGRADE_INSTRUCTIONS'	=> $next_feature_version ? $user->lang('UPGRADE_INSTRUCTIONS', $next_feature_version, $next_feature_announcement_url) : false,		));	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class ucp_attachments_info{	function module()	{		return array(			'filename'	=> 'ucp_attachments',			'title'		=> 'UCP_ATTACHMENTS',			'version'	=> '1.0.0',			'modes'		=> array(				'attachments'	=> array('title' => 'UCP_MAIN_ATTACHMENTS', 'auth' => 'acl_u_attach', 'cat' => array('UCP_MAIN')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Responsible for holding all file relevant information, as well as doing file-specific operations.* The {@link fileupload fileupload class} can be used to upload several files, each of them being this object to operate further on.* @package phpBB3*/class filespec{	var $filename = '';	var $realname = '';	var $uploadname = '';	var $mimetype = '';	var $extension = '';	var $filesize = 0;	var $width = 0;	var $height = 0;	var $image_info = array();	var $destination_file = '';	var $destination_path = '';	var $file_moved = false;	var $init_error = false;	var $local = false;	var $error = array();	var $upload = '';	/**	* File Class	* @access private	*/	function filespec($upload_ary, $upload_namespace)	{		if (!isset($upload_ary))		{			$this->init_error = true;			return;		}		$this->filename = $upload_ary['tmp_name'];		$this->filesize = $upload_ary['size'];		$name = (STRIP) ? stripslashes($upload_ary['name']) : $upload_ary['name'];		$name = trim(utf8_htmlspecialchars(utf8_basename($name)));		$this->realname = $this->uploadname = $name;		$this->mimetype = $upload_ary['type'];		// Opera adds the name to the mime type		$this->mimetype	= (strpos($this->mimetype, '; name') !== false) ? str_replace(strstr($this->mimetype, '; name'), '', $this->mimetype) : $this->mimetype;		if (!$this->mimetype)		{			$this->mimetype = 'application/octetstream';		}		$this->extension = strtolower($this->get_extension($this->realname));		// Try to get real filesize from temporary folder (not always working) ;)		$this->filesize = (@filesize($this->filename)) ? @filesize($this->filename) : $this->filesize;		$this->width = $this->height = 0;		$this->file_moved = false;		$this->local = (isset($upload_ary['local_mode'])) ? true : false;		$this->upload = $upload_namespace;	}	/**	* Cleans destination filename	*	* @param real|unique|unique_ext $mode real creates a realname, filtering some characters, lowering every character. Unique creates an unique filename	* @param string $prefix Prefix applied to filename	* @access public	*/	function clean_filename($mode = 'unique', $prefix = '', $user_id = '')	{		if ($this->init_error)		{			return;		}		switch ($mode)		{			case 'real':				// Remove every extension from filename (to not let the mime bug being exposed)				if (strpos($this->realname, '.') !== false)				{					$this->realname = substr($this->realname, 0, strpos($this->realname, '.'));				}				// Replace any chars which may cause us problems with _				$bad_chars = array("'", "\\", ' ', '/', ':', '*', '?', '"', '<', '>', '|');				$this->realname = rawurlencode(str_replace($bad_chars, '_', strtolower($this->realname)));				$this->realname = preg_replace("/%(\w{2})/", '_', $this->realname);				$this->realname = $prefix . $this->realname . '.' . $this->extension;			break;			case 'unique':				$this->realname = $prefix . md5(unique_id());			break;			case 'avatar':				$this->extension = strtolower($this->extension);				$this->realname = $prefix . $user_id . '.' . $this->extension;			break;			case 'unique_ext':			default:				$this->realname = $prefix . md5(unique_id()) . '.' . $this->extension;			break;		}	}	/**	* Get property from file object	*/	function get($property)	{		if ($this->init_error || !isset($this->$property))		{			return false;		}		return $this->$property;	}	/**	* Check if file is an image (mimetype)	*	* @return true if it is an image, false if not	*/	function is_image()	{		return (strpos($this->mimetype, 'image/') !== false) ? true : false;	}	/**	* Check if the file got correctly uploaded	*	* @return true if it is a valid upload, false if not	*/	function is_uploaded()	{		if (!$this->local && !is_uploaded_file($this->filename))		{			return false;		}		if ($this->local && !file_exists($this->filename))		{			return false;		}		return true;	}	/**	* Remove file	*/	function remove()	{		if ($this->file_moved)		{			@unlink($this->destination_file);		}	}	/**	* Get file extension	*/	function get_extension($filename)	{		if (strpos($filename, '.') === false)		{			return '';		}		$filename = explode('.', $filename);		return array_pop($filename);	}	/**	* Get mimetype. Utilize mime_content_type if the function exist.	* Not used at the moment...	*/	function get_mimetype($filename)	{		$mimetype = '';		if (function_exists('mime_content_type'))		{			$mimetype = mime_content_type($filename);		}		// Some browsers choke on a mimetype of application/octet-stream		if (!$mimetype || $mimetype == 'application/octet-stream')		{			$mimetype = 'application/octetstream';		}		return $mimetype;	}	/**	* Get filesize	*/	function get_filesize($filename)	{		return @filesize($filename);	}	/**	* Check the first 256 bytes for forbidden content	*/	function check_content($disallowed_content)	{		if (empty($disallowed_content))		{			return true;		}		$fp = @fopen($this->filename, 'rb');		if ($fp !== false)		{			$ie_mime_relevant = fread($fp, 256);			fclose($fp);			foreach ($disallowed_content as $forbidden)			{				if (stripos($ie_mime_relevant, '<' . $forbidden) !== false)				{					return false;				}			}		}		return true;	}	/**	* Move file to destination folder	* The phpbb_root_path variable will be applied to the destination path	*	* @param string $destination_path Destination path, for example $config['avatar_path']	* @param bool $overwrite If set to true, an already existing file will be overwritten	* @param string $chmod Permission mask for chmodding the file after a successful move. The mode entered here reflects the mode defined by {@link phpbb_chmod()}	*	* @access public	*/	function move_file($destination, $overwrite = false, $skip_image_check = false, $chmod = false)	{		global $user, $phpbb_root_path;		if (sizeof($this->error))		{			return false;		}		$chmod = ($chmod === false) ? CHMOD_READ | CHMOD_WRITE : $chmod;		// We need to trust the admin in specifying valid upload directories and an attacker not being able to overwrite it...		$this->destination_path = $phpbb_root_path . $destination;		// Check if the destination path exist...		if (!file_exists($this->destination_path))		{			@unlink($this->filename);			return false;		}		$upload_mode = (@ini_get('open_basedir') || @ini_get('safe_mode') || strtolower(@ini_get('safe_mode')) == 'on') ? 'move' : 'copy';		$upload_mode = ($this->local) ? 'local' : $upload_mode;		$this->destination_file = $this->destination_path . '/' . utf8_basename($this->realname);		// Check if the file already exist, else there is something wrong...		if (file_exists($this->destination_file) && !$overwrite)		{			@unlink($this->filename);		}		else		{			if (file_exists($this->destination_file))			{				@unlink($this->destination_file);			}			switch ($upload_mode)			{				case 'copy':					if (!@copy($this->filename, $this->destination_file))					{						if (!@move_uploaded_file($this->filename, $this->destination_file))						{							$this->error[] = sprintf($user->lang[$this->upload->error_prefix . 'GENERAL_UPLOAD_ERROR'], $this->destination_file);						}					}				break;				case 'move':					if (!@move_uploaded_file($this->filename, $this->destination_file))					{						if (!@copy($this->filename, $this->destination_file))						{							$this->error[] = sprintf($user->lang[$this->upload->error_prefix . 'GENERAL_UPLOAD_ERROR'], $this->destination_file);						}					}				break;				case 'local':					if (!@copy($this->filename, $this->destination_file))					{						$this->error[] = sprintf($user->lang[$this->upload->error_prefix . 'GENERAL_UPLOAD_ERROR'], $this->destination_file);					}				break;			}			// Remove temporary filename			@unlink($this->filename);			if (sizeof($this->error))			{				return false;			}			phpbb_chmod($this->destination_file, $chmod);		}		// Try to get real filesize from destination folder		$this->filesize = (@filesize($this->destination_file)) ? @filesize($this->destination_file) : $this->filesize;		if ($this->is_image() && !$skip_image_check)		{			$this->width = $this->height = 0;			if (($this->image_info = @getimagesize($this->destination_file)) !== false)			{				$this->width = $this->image_info[0];				$this->height = $this->image_info[1];				if (!empty($this->image_info['mime']))				{					$this->mimetype = $this->image_info['mime'];				}				// Check image type				$types = $this->upload->image_types();				if (!isset($types[$this->image_info[2]]) || !in_array($this->extension, $types[$this->image_info[2]]))				{					if (!isset($types[$this->image_info[2]]))					{						$this->error[] = sprintf($user->lang['IMAGE_FILETYPE_INVALID'], $this->image_info[2], $this->mimetype);					}					else					{						$this->error[] = sprintf($user->lang['IMAGE_FILETYPE_MISMATCH'], $types[$this->image_info[2]][0], $this->extension);					}				}				// Make sure the dimensions match a valid image				if (empty($this->width) || empty($this->height))				{					$this->error[] = $user->lang['ATTACHED_IMAGE_NOT_IMAGE'];				}			}			else			{				$this->error[] = $user->lang['UNABLE_GET_IMAGE_SIZE'];			}		}		$this->file_moved = true;		$this->additional_checks();		unset($this->upload);		return true;	}	/**	* Performing additional checks	*/	function additional_checks()	{		global $user;		if (!$this->file_moved)		{			return false;		}		// Filesize is too big or it's 0 if it was larger than the maxsize in the upload form		if ($this->upload->max_filesize && ($this->get('filesize') > $this->upload->max_filesize || $this->filesize == 0))		{			$max_filesize = get_formatted_filesize($this->upload->max_filesize, false);			$this->error[] = sprintf($user->lang[$this->upload->error_prefix . 'WRONG_FILESIZE'], $max_filesize['value'], $max_filesize['unit']);			return false;		}		if (!$this->upload->valid_dimensions($this))		{			$this->error[] = sprintf($user->lang[$this->upload->error_prefix . 'WRONG_SIZE'], $this->upload->min_width, $this->upload->min_height, $this->upload->max_width, $this->upload->max_height, $this->width, $this->height);			return false;		}		return true;	}}/*** Class for assigning error messages before a real filespec class can be assigned** @package phpBB3*/class fileerror extends filespec{	function fileerror($error_msg)	{		$this->error[] = $error_msg;	}}/*** File upload class* Init class (all parameters optional and able to be set/overwritten separately) - scope is global and valid for all uploads** @package phpBB3*/class fileupload{	var $allowed_extensions = array();	var $disallowed_content = array('body', 'head', 'html', 'img', 'plaintext', 'a href', 'pre', 'script', 'table', 'title'); 	var $max_filesize = 0;	var $min_width = 0;	var $min_height = 0;	var $max_width = 0;	var $max_height = 0;	var $error_prefix = '';	/**	* Init file upload class.	*	* @param string $error_prefix Used error messages will get prefixed by this string	* @param array $allowed_extensions Array of allowed extensions, for example array('jpg', 'jpeg', 'gif', 'png')	* @param int $max_filesize Maximum filesize	* @param int $min_width Minimum image width (only checked for images)	* @param int $min_height Minimum image height (only checked for images)	* @param int $max_width Maximum image width (only checked for images)	* @param int $max_height Maximum image height (only checked for images)	*	*/	function fileupload($error_prefix = '', $allowed_extensions = false, $max_filesize = false, $min_width = false, $min_height = false, $max_width = false, $max_height = false, $disallowed_content = false)	{		$this->set_allowed_extensions($allowed_extensions);		$this->set_max_filesize($max_filesize);		$this->set_allowed_dimensions($min_width, $min_height, $max_width, $max_height);		$this->set_error_prefix($error_prefix);		$this->set_disallowed_content($disallowed_content);	}	/**	* Reset vars	*/	function reset_vars()	{		$this->max_filesize = 0;		$this->min_width = $this->min_height = $this->max_width = $this->max_height = 0;		$this->error_prefix = '';		$this->allowed_extensions = array();		$this->disallowed_content = array();	}	/**	* Set allowed extensions	*/	function set_allowed_extensions($allowed_extensions)	{		if ($allowed_extensions !== false && is_array($allowed_extensions))		{			$this->allowed_extensions = $allowed_extensions;		}	}	/**	* Set allowed dimensions	*/	function set_allowed_dimensions($min_width, $min_height, $max_width, $max_height)	{		$this->min_width = (int) $min_width;		$this->min_height = (int) $min_height;		$this->max_width = (int) $max_width;		$this->max_height = (int) $max_height;	}	/**	* Set maximum allowed filesize	*/	function set_max_filesize($max_filesize)	{		if ($max_filesize !== false && (int) $max_filesize)		{			$this->max_filesize = (int) $max_filesize;		}	}	/**	* Set disallowed strings	*/	function set_disallowed_content($disallowed_content)	{		if ($disallowed_content !== false && is_array($disallowed_content))		{			$this->disallowed_content = array_diff($disallowed_content, array(''));		}	}	/**	* Set error prefix	*/	function set_error_prefix($error_prefix)	{		$this->error_prefix = $error_prefix;	}	/**	* Form upload method	* Upload file from users harddisk	*	* @param string $form_name Form name assigned to the file input field (if it is an array, the key has to be specified)	* @return object $file Object "filespec" is returned, all further operations can be done with this object	* @access public	*/	function form_upload($form_name)	{		global $user;		unset($_FILES[$form_name]['local_mode']);		$file = new filespec($_FILES[$form_name], $this);		if ($file->init_error)		{			$file->error[] = '';			return $file;		}		// Error array filled?		if (isset($_FILES[$form_name]['error']))		{			$error = $this->assign_internal_error($_FILES[$form_name]['error']);			if ($error !== false)			{				$file->error[] = $error;				return $file;			}		}		// Check if empty file got uploaded (not catched by is_uploaded_file)		if (isset($_FILES[$form_name]['size']) && $_FILES[$form_name]['size'] == 0)		{			$file->error[] = $user->lang[$this->error_prefix . 'EMPTY_FILEUPLOAD'];			return $file;		}		// PHP Upload filesize exceeded		if ($file->get('filename') == 'none')		{			$max_filesize = @ini_get('upload_max_filesize');			$unit = 'MB';			if (!empty($max_filesize))			{				$unit = strtolower(substr($max_filesize, -1, 1));				$max_filesize = (int) $max_filesize;				$unit = ($unit == 'k') ? 'KB' : (($unit == 'g') ? 'GB' : 'MB');			}			$file->error[] = (empty($max_filesize)) ? $user->lang[$this->error_prefix . 'PHP_SIZE_NA'] : sprintf($user->lang[$this->error_prefix . 'PHP_SIZE_OVERRUN'], $max_filesize, $user->lang[$unit]);			return $file;		}		// Not correctly uploaded		if (!$file->is_uploaded())		{			$file->error[] = $user->lang[$this->error_prefix . 'NOT_UPLOADED'];			return $file;		}		$this->common_checks($file);		return $file;	}	/**	* Move file from another location to phpBB	*/	function local_upload($source_file, $filedata = false)	{		global $user;		$form_name = 'local';		$_FILES[$form_name]['local_mode'] = true;		$_FILES[$form_name]['tmp_name'] = $source_file;		if ($filedata === false)		{			$_FILES[$form_name]['name'] = utf8_basename($source_file);			$_FILES[$form_name]['size'] = 0;			$mimetype = '';			if (function_exists('mime_content_type'))			{				$mimetype = mime_content_type($source_file);			}			// Some browsers choke on a mimetype of application/octet-stream			if (!$mimetype || $mimetype == 'application/octet-stream')			{				$mimetype = 'application/octetstream';			}			$_FILES[$form_name]['type'] = $mimetype;		}		else		{			$_FILES[$form_name]['name'] = $filedata['realname'];			$_FILES[$form_name]['size'] = $filedata['size'];			$_FILES[$form_name]['type'] = $filedata['type'];		}		$file = new filespec($_FILES[$form_name], $this);		if ($file->init_error)		{			$file->error[] = '';			return $file;		}		if (isset($_FILES[$form_name]['error']))		{			$error = $this->assign_internal_error($_FILES[$form_name]['error']);			if ($error !== false)			{				$file->error[] = $error;				return $file;			}		}		// PHP Upload filesize exceeded		if ($file->get('filename') == 'none')		{			$max_filesize = @ini_get('upload_max_filesize');			$unit = 'MB';			if (!empty($max_filesize))			{				$unit = strtolower(substr($max_filesize, -1, 1));				$max_filesize = (int) $max_filesize;				$unit = ($unit == 'k') ? 'KB' : (($unit == 'g') ? 'GB' : 'MB');			}			$file->error[] = (empty($max_filesize)) ? $user->lang[$this->error_prefix . 'PHP_SIZE_NA'] : sprintf($user->lang[$this->error_prefix . 'PHP_SIZE_OVERRUN'], $max_filesize, $user->lang[$unit]);			return $file;		}		// Not correctly uploaded		if (!$file->is_uploaded())		{			$file->error[] = $user->lang[$this->error_prefix . 'NOT_UPLOADED'];			return $file;		}		$this->common_checks($file);		return $file;	}	/**	* Remote upload method	* Uploads file from given url	*	* @param string $upload_url URL pointing to file to upload, for example http://www.foobar.com/example.gif	* @return object $file Object "filespec" is returned, all further operations can be done with this object	* @access public	*/	function remote_upload($upload_url)	{		global $user, $phpbb_root_path;		$upload_ary = array();		$upload_ary['local_mode'] = true;		if (!preg_match('#^(https?://).*?\.(' . implode('|', $this->allowed_extensions) . ')$#i', $upload_url, $match))		{			$file = new fileerror($user->lang[$this->error_prefix . 'URL_INVALID']);			return $file;		}		if (empty($match[2]))		{			$file = new fileerror($user->lang[$this->error_prefix . 'URL_INVALID']);			return $file;		}		$url = parse_url($upload_url);		$host = $url['host'];		$path = $url['path'];		$port = (!empty($url['port'])) ? (int) $url['port'] : 80;		$upload_ary['type'] = 'application/octet-stream';		$url['path'] = explode('.', $url['path']);		$ext = array_pop($url['path']);		$url['path'] = implode('', $url['path']);		$upload_ary['name'] = utf8_basename($url['path']) . (($ext) ? '.' . $ext : '');		$filename = $url['path'];		$filesize = 0;		$errno = 0;		$errstr = '';		if (!($fsock = @fsockopen($host, $port, $errno, $errstr)))		{			$file = new fileerror($user->lang[$this->error_prefix . 'NOT_UPLOADED']);			return $file;		}		// Make sure $path not beginning with /		if (strpos($path, '/') === 0)		{			$path = substr($path, 1);		}		fputs($fsock, 'GET /' . $path . " HTTP/1.1\r\n");		fputs($fsock, "HOST: " . $host . "\r\n");		fputs($fsock, "Connection: close\r\n\r\n");		$get_info = false;		$data = '';		while (!@feof($fsock))		{			if ($get_info)			{				$block = @fread($fsock, 1024);				$filesize += strlen($block);				if ($this->max_filesize && $filesize > $this->max_filesize)				{					$max_filesize = get_formatted_filesize($this->max_filesize, false);					$file = new fileerror(sprintf($user->lang[$this->error_prefix . 'WRONG_FILESIZE'], $max_filesize['value'], $max_filesize['unit']));					return $file;				}				$data .= $block;			}			else			{				$line = @fgets($fsock, 1024);				if ($line == "\r\n")				{					$get_info = true;				}				else				{					if (stripos($line, 'content-type: ') !== false)					{						$upload_ary['type'] = rtrim(str_replace('content-type: ', '', strtolower($line)));					}					else if ($this->max_filesize && stripos($line, 'content-length: ') !== false)					{						$length = (int) str_replace('content-length: ', '', strtolower($line));						if ($length && $length > $this->max_filesize)						{							$max_filesize = get_formatted_filesize($this->max_filesize, false);							$file = new fileerror(sprintf($user->lang[$this->error_prefix . 'WRONG_FILESIZE'], $max_filesize['value'], $max_filesize['unit']));							return $file;						}					}					else if (stripos($line, '404 not found') !== false)					{						$file = new fileerror($user->lang[$this->error_prefix . 'URL_NOT_FOUND']);						return $file;					}				}			}		}		@fclose($fsock);		if (empty($data))		{			$file = new fileerror($user->lang[$this->error_prefix . 'EMPTY_REMOTE_DATA']);			return $file;		}		$tmp_path = (!@ini_get('safe_mode') || strtolower(@ini_get('safe_mode')) == 'off') ? false : $phpbb_root_path . 'cache';		$filename = tempnam($tmp_path, unique_id() . '-');		if (!($fp = @fopen($filename, 'wb')))		{			$file = new fileerror($user->lang[$this->error_prefix . 'NOT_UPLOADED']);			return $file;		}		$upload_ary['size'] = fwrite($fp, $data);		fclose($fp);		unset($data);		$upload_ary['tmp_name'] = $filename;		$file = new filespec($upload_ary, $this);		$this->common_checks($file);		return $file;	}	/**	* Assign internal error	* @access private	*/	function assign_internal_error($errorcode)	{		global $user;		switch ($errorcode)		{			case 1:				$max_filesize = @ini_get('upload_max_filesize');				$unit = 'MB';				if (!empty($max_filesize))				{					$unit = strtolower(substr($max_filesize, -1, 1));					$max_filesize = (int) $max_filesize;					$unit = ($unit == 'k') ? 'KB' : (($unit == 'g') ? 'GB' : 'MB');				}				$error = (empty($max_filesize)) ? $user->lang[$this->error_prefix . 'PHP_SIZE_NA'] : sprintf($user->lang[$this->error_prefix . 'PHP_SIZE_OVERRUN'], $max_filesize, $user->lang[$unit]);			break;			case 2:				$max_filesize = get_formatted_filesize($this->max_filesize, false);				$error = sprintf($user->lang[$this->error_prefix . 'WRONG_FILESIZE'], $max_filesize['value'], $max_filesize['unit']);			break;			case 3:				$error = $user->lang[$this->error_prefix . 'PARTIAL_UPLOAD'];			break;			case 4:				$error = $user->lang[$this->error_prefix . 'NOT_UPLOADED'];			break;			case 6:				$error = 'Temporary folder could not be found. Please check your PHP installation.';			break;			default:				$error = false;			break;		}		return $error;	}	/**	* Perform common checks	*/	function common_checks(&$file)	{		global $user;		// Filesize is too big or it's 0 if it was larger than the maxsize in the upload form		if ($this->max_filesize && ($file->get('filesize') > $this->max_filesize || $file->get('filesize') == 0))		{			$max_filesize = get_formatted_filesize($this->max_filesize, false);			$file->error[] = sprintf($user->lang[$this->error_prefix . 'WRONG_FILESIZE'], $max_filesize['value'], $max_filesize['unit']);		}		// check Filename		if (preg_match("#[\\/:*?\"<>|]#i", $file->get('realname')))		{			$file->error[] = sprintf($user->lang[$this->error_prefix . 'INVALID_FILENAME'], $file->get('realname'));		}		// Invalid Extension		if (!$this->valid_extension($file))		{			$file->error[] = sprintf($user->lang[$this->error_prefix . 'DISALLOWED_EXTENSION'], $file->get('extension'));		}		// MIME Sniffing		if (!$this->valid_content($file))		{			$file->error[] = sprintf($user->lang[$this->error_prefix . 'DISALLOWED_CONTENT']);		}	}	/**	* Check for allowed extension	*/	function valid_extension(&$file)	{		return (in_array($file->get('extension'), $this->allowed_extensions)) ? true : false;	}	/**	* Check for allowed dimension	*/	function valid_dimensions(&$file)	{		if (!$this->max_width && !$this->max_height && !$this->min_width && !$this->min_height)		{			return true;		}		if (($file->get('width') > $this->max_width && $this->max_width) ||			($file->get('height') > $this->max_height && $this->max_height) ||			($file->get('width') < $this->min_width && $this->min_width) ||			($file->get('height') < $this->min_height && $this->min_height))		{			return false;		}		return true;	}	/**	* Check if form upload is valid	*/	function is_valid($form_name)	{		return (isset($_FILES[$form_name]) && $_FILES[$form_name]['name'] != 'none') ? true : false;	}	/**	* Check for allowed extension	*/	function valid_content(&$file)	{		return ($file->check_content($this->disallowed_content));	}	/**	* Return image type/extension mapping	*/	function image_types()	{		return array(			1 => array('gif'),			2 => array('jpg', 'jpeg'),			3 => array('png'),			4 => array('swf'),			5 => array('psd'),			6 => array('bmp'),			7 => array('tif', 'tiff'),			8 => array('tif', 'tiff'),			9 => array('jpg', 'jpeg'),			10 => array('jpg', 'jpeg'),			11 => array('jpg', 'jpeg'),			12 => array('jpg', 'jpeg'),			13 => array('swc'),			14 => array('iff'),			15 => array('wbmp'),			16 => array('xbm'),		);	}}?>
<?php return array(''=>'ss',''=>'i',''=>'n',''=>'j',''=>'',''=>'',''=>'',''=>'h',''=>'t',''=>'w',''=>'y',''=>'a',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'ff',''=>'fi',''=>'fl',''=>'ffi',''=>'ffl',''=>'st',''=>'st',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** acp_language [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ACP_FILES'						=> 'Admin language files',	'ACP_LANGUAGE_PACKS_EXPLAIN'	=> 'Here you are able to install/remove language packs. The default language pack is marked with an asterisk (*).',	'EMAIL_FILES'			=> 'E-mail templates',	'FILE_CONTENTS'				=> 'File contents',	'FILE_FROM_STORAGE'			=> 'File from storage folder',	'HELP_FILES'				=> 'Help files',	'INSTALLED_LANGUAGE_PACKS'	=> 'Installed language packs',	'INVALID_LANGUAGE_PACK'		=> 'The selected language pack seems to be not valid. Please verify the language pack and upload it again if necessary.',	'INVALID_UPLOAD_METHOD'		=> 'The selected upload method is not valid, please choose a different method.',	'LANGUAGE_DETAILS_UPDATED'			=> 'Language details successfully updated.',	'LANGUAGE_ENTRIES'					=> 'Language entries',	'LANGUAGE_ENTRIES_EXPLAIN'			=> 'Here you are able to change existing language pack entries or not already translated ones.<br /><strong>Note:</strong> Once you changed a language file, the changes will be stored within a separate folder for you to download. The changes will not be seen by your users until you replace the original language files at your webspace (by uploading them).',	'LANGUAGE_FILES'					=> 'Language files',	'LANGUAGE_KEY'						=> 'Language key',	'LANGUAGE_PACK_ALREADY_INSTALLED'	=> 'This language pack is already installed.',	'LANGUAGE_PACK_DELETED'				=> 'The language pack <strong>%s</strong> has been removed successfully. All users using this language have been reset to the boards default language.',	'LANGUAGE_PACK_DETAILS'				=> 'Language pack details',	'LANGUAGE_PACK_INSTALLED'			=> 'The language pack <strong>%s</strong> has been successfully installed.',	'LANGUAGE_PACK_CPF_UPDATE'			=> 'The custom profile fields language strings were copied from the default language. Please change them if necessary.',	'LANGUAGE_PACK_ISO'					=> 'ISO',	'LANGUAGE_PACK_LOCALNAME'			=> 'Local name',	'LANGUAGE_PACK_NAME'				=> 'Name',	'LANGUAGE_PACK_NOT_EXIST'			=> 'The selected language pack does not exist.',	'LANGUAGE_PACK_USED_BY'				=> 'Used by (including robots)',	'LANGUAGE_VARIABLE'					=> 'Language variable',	'LANG_AUTHOR'						=> 'Language pack author',	'LANG_ENGLISH_NAME'					=> 'English name',	'LANG_ISO_CODE'						=> 'ISO code',	'LANG_LOCAL_NAME'					=> 'Local name',	'MISSING_LANGUAGE_FILE'		=> 'Missing language file: <strong style="color:red">%s</strong>',	'MISSING_LANG_VARIABLES'	=> 'Missing language variables',	'MODS_FILES'				=> 'MODs language files',	'NO_FILE_SELECTED'				=> 'You havent specified a language file.',	'NO_LANG_ID'					=> 'You havent specified a language pack.',	'NO_REMOVE_DEFAULT_LANG'		=> 'You are not able to remove the default language pack.<br />If you want to remove this language pack, change your boards default language first.',	'NO_UNINSTALLED_LANGUAGE_PACKS'	=> 'No uninstalled language packs',	'REMOVE_FROM_STORAGE_FOLDER'		=> 'Remove from storage folder',	'SELECT_DOWNLOAD_FORMAT'	=> 'Select download format',	'SUBMIT_AND_DOWNLOAD'		=> 'Submit and download file',	'SUBMIT_AND_UPLOAD'			=> 'Submit and upload file',	'THOSE_MISSING_LANG_FILES'			=> 'The following language files are missing from the %s language folder',	'THOSE_MISSING_LANG_VARIABLES'		=> 'The following language variables are missing from the <strong>%s</strong> language pack',	'UNINSTALLED_LANGUAGE_PACKS'	=> 'Uninstalled language packs',	'UNABLE_TO_WRITE_FILE'		=> 'The file could not be written to %s.',	'UPLOAD_COMPLETED'			=> 'The upload was completed successfully.',	'UPLOAD_FAILED'				=> 'The upload failed for unknown reasons. You may need to replace the relevant file manually.',	'UPLOAD_METHOD'				=> 'Upload method',	'UPLOAD_SETTINGS'			=> 'Upload settings',	'WRONG_LANGUAGE_FILE'		=> 'Selected language file is invalid.',));?>
<?php/*** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class ucp_pm_info{	function module()	{		return array(			'filename'	=> 'ucp_pm',			'title'		=> 'UCP_PM',			'version'	=> '1.0.0',			'modes'		=> array(				'view'		=> array('title' => 'UCP_PM_VIEW', 'auth' => 'cfg_allow_privmsg', 'display' => false, 'cat' => array('UCP_PM')),				'compose'	=> array('title' => 'UCP_PM_COMPOSE', 'auth' => 'cfg_allow_privmsg', 'cat' => array('UCP_PM')),				'drafts'	=> array('title' => 'UCP_PM_DRAFTS', 'auth' => 'cfg_allow_privmsg', 'cat' => array('UCP_PM')),				'options'	=> array('title' => 'UCP_PM_OPTIONS', 'auth' => 'cfg_allow_privmsg', 'cat' => array('UCP_PM')),				'popup'		=> array('title' => 'UCP_PM_POPUP_TITLE', 'auth' => 'cfg_allow_privmsg', 'display' => false, 'cat' => array('UCP_PM')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package install* @version $Id$* @copyright (c) 2007 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** A wrapper function for the normalizer which takes care of including the class if required and modifies the passed strings* to be in NFC (Normalization Form Composition).** @param	mixed	$strings	a string or an array of strings to normalize* @return	mixed				the normalized content, preserving array keys if array given.*/function utf8_new_normalize_nfc($strings){	if (empty($strings))	{		return $strings;	}	if (!is_array($strings))	{		utf_new_normalizer::nfc($strings);	}	else if (is_array($strings))	{		foreach ($strings as $key => $string)		{			if (is_array($string))			{				foreach ($string as $_key => $_string)				{					utf_new_normalizer::nfc($strings[$key][$_key]);				}			}			else			{				utf_new_normalizer::nfc($strings[$key]);			}		}	}	return $strings;}class utf_new_normalizer{	/**	* Validate, cleanup and normalize a string	*	* The ultimate convenience function! Clean up invalid UTF-8 sequences,	* and convert to Normal Form C, canonical composition.	*	* @param	string	&$str	The dirty string	* @return	string			The same string, all shiny and cleaned-up	*/	function cleanup(&$str)	{		// The string below is the list of all autorized characters, sorted by frequency in latin text		$pos = strspn($str, "\x20\x65\x69\x61\x73\x6E\x74\x72\x6F\x6C\x75\x64\x5D\x5B\x63\x6D\x70\x27\x0A\x67\x7C\x68\x76\x2E\x66\x62\x2C\x3A\x3D\x2D\x71\x31\x30\x43\x32\x2A\x79\x78\x29\x28\x4C\x39\x41\x53\x2F\x50\x22\x45\x6A\x4D\x49\x6B\x33\x3E\x35\x54\x3C\x44\x34\x7D\x42\x7B\x38\x46\x77\x52\x36\x37\x55\x47\x4E\x3B\x4A\x7A\x56\x23\x48\x4F\x57\x5F\x26\x21\x4B\x3F\x58\x51\x25\x59\x5C\x09\x5A\x2B\x7E\x5E\x24\x40\x60\x7F\x0D");		$len = strlen($str);		if ($pos == $len)		{			// ASCII strings with no special chars return immediately			return;		}		// Note: we do not check for $GLOBALS['utf_canonical_decomp']. It is assumed they are always loaded together		if (!isset($GLOBALS['utf_nfc_qc']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_nfc_qc.' . $phpEx);		}		if (!isset($GLOBALS['utf_canonical_decomp']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_canonical_decomp.' . $phpEx);		}		// Replace any byte in the range 0x00..0x1F, except for \r, \n and \t		// We replace those characters with a 0xFF byte, which is illegal in UTF-8 and will in turn be replaced with a UTF replacement char		$str = strtr(			$str,			"\x00\x01\x02\x03\x04\x05\x06\x07\x08\x0B\x0C\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F",			"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"		);		$str = utf_new_normalizer::recompose($str, $pos, $len, $GLOBALS['utf_nfc_qc'], $GLOBALS['utf_canonical_decomp']);	}	/**	* Validate and normalize a UTF string to NFC	*	* @param	string	&$str	Unchecked UTF string	* @return	string			The string, validated and in normal form	*/	function nfc(&$str)	{		$pos = strspn($str, UTF8_ASCII_RANGE);		$len = strlen($str);		if ($pos == $len)		{			// ASCII strings return immediately			return;		}		if (!isset($GLOBALS['utf_nfc_qc']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_nfc_qc.' . $phpEx);		}		if (!isset($GLOBALS['utf_canonical_decomp']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_canonical_decomp.' . $phpEx);		}		$str = utf_new_normalizer::recompose($str, $pos, $len, $GLOBALS['utf_nfc_qc'], $GLOBALS['utf_canonical_decomp']);	}	/**	* Validate and normalize a UTF string to NFKC	*	* @param	string	&$str	Unchecked UTF string	* @return	string			The string, validated and in normal form	*/	function nfkc(&$str)	{		$pos = strspn($str, UTF8_ASCII_RANGE);		$len = strlen($str);		if ($pos == $len)		{			// ASCII strings return immediately			return;		}		if (!isset($GLOBALS['utf_nfkc_qc']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_nfkc_qc.' . $phpEx);		}		if (!isset($GLOBALS['utf_compatibility_decomp']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_compatibility_decomp.' . $phpEx);		}		$str = utf_new_normalizer::recompose($str, $pos, $len, $GLOBALS['utf_nfkc_qc'], $GLOBALS['utf_compatibility_decomp']);	}	/**	* Recompose a UTF string	*	* @param	string	$str			Unchecked UTF string	* @param	integer	$pos			Position of the first UTF char (in bytes)	* @param	integer	$len			Length of the string (in bytes)	* @param	array	&$qc			Quick-check array, passed by reference but never modified	* @param	array	&$decomp_map	Decomposition mapping, passed by reference but never modified	* @return	string					The string, validated and recomposed	*	* @access	private	*/	function recompose($str, $pos, $len, &$qc, &$decomp_map)	{		global $utf_canonical_comp;		// Load the canonical composition table		if (!isset($utf_canonical_comp))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_canonical_comp.' . $phpEx);		}		return utf_normalizer::recompose($str, $pos, $len, $qc, $decomp_map);	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Handling actions in post details screen*/function mcp_post_details($id, $mode, $action){	global $phpEx, $phpbb_root_path, $config;	global $template, $db, $user, $auth, $cache;	$user->add_lang('posting');	$post_id = request_var('p', 0);	$start	= request_var('start', 0);	// Get post data	$post_info = get_post_data(array($post_id), false, true);	add_form_key('mcp_post_details');	if (!sizeof($post_info))	{		trigger_error('POST_NOT_EXIST');	}	$post_info = $post_info[$post_id];	$url = append_sid("{$phpbb_root_path}mcp.$phpEx?" . extra_url());	switch ($action)	{		case 'whois':			if ($auth->acl_get('m_info', $post_info['forum_id']))			{				$ip = request_var('ip', '');				include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$template->assign_vars(array(					'RETURN_POST'	=> sprintf($user->lang['RETURN_POST'], '<a href="' . append_sid("{$phpbb_root_path}mcp.$phpEx", "i=$id&amp;mode=$mode&amp;p=$post_id") . '">', '</a>'),					'U_RETURN_POST'	=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=$id&amp;mode=$mode&amp;p=$post_id"),					'L_RETURN_POST'	=> sprintf($user->lang['RETURN_POST'], '', ''),					'WHOIS'			=> user_ipwhois($ip),				));			}			// We're done with the whois page so return			return;		break;		case 'chgposter':		case 'chgposter_ip':			if ($action == 'chgposter')			{				$username = request_var('username', '', true);				$sql_where = "username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";			}			else			{				$new_user_id = request_var('u', 0);				$sql_where = 'user_id = ' . $new_user_id;			}			$sql = 'SELECT *				FROM ' . USERS_TABLE . '				WHERE ' . $sql_where;			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$row)			{				trigger_error('NO_USER');			}			if ($auth->acl_get('m_chgposter', $post_info['forum_id']))			{				if (check_form_key('mcp_post_details'))				{					change_poster($post_info, $row);				}				else				{					trigger_error('FORM_INVALID');				}			}		break;	}	// Set some vars	$users_ary = $usernames_ary = array();	$attachments = $extensions = array();	$post_id = $post_info['post_id'];	$topic_tracking_info = array();	// Get topic tracking info	if ($config['load_db_lastread'])	{		$tmp_topic_data = array($post_info['topic_id'] => $post_info);		$topic_tracking_info = get_topic_tracking($post_info['forum_id'], $post_info['topic_id'], $tmp_topic_data, array($post_info['forum_id'] => $post_info['forum_mark_time']));		unset($tmp_topic_data);	}	else	{		$topic_tracking_info = get_complete_topic_tracking($post_info['forum_id'], $post_info['topic_id']);	}	$post_unread = (isset($topic_tracking_info[$post_info['topic_id']]) && $post_info['post_time'] > $topic_tracking_info[$post_info['topic_id']]) ? true : false;	// Process message, leave it uncensored	$message = $post_info['post_text'];	if ($post_info['bbcode_bitfield'])	{		include_once($phpbb_root_path . 'includes/bbcode.' . $phpEx);		$bbcode = new bbcode($post_info['bbcode_bitfield']);		$bbcode->bbcode_second_pass($message, $post_info['bbcode_uid'], $post_info['bbcode_bitfield']);	}	$message = bbcode_nl2br($message);	$message = smiley_text($message);	if ($post_info['post_attachment'] && $auth->acl_get('u_download') && $auth->acl_get('f_download', $post_info['forum_id']))	{		$extensions = $cache->obtain_attach_extensions($post_info['forum_id']);		$sql = 'SELECT *			FROM ' . ATTACHMENTS_TABLE . '			WHERE post_msg_id = ' . $post_id . '				AND in_message = 0			ORDER BY filetime DESC, post_msg_id ASC';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$attachments[] = $row;		}		$db->sql_freeresult($result);		if (sizeof($attachments))		{			$update_count = array();			parse_attachments($post_info['forum_id'], $message, $attachments, $update_count);		}		// Display not already displayed Attachments for this post, we already parsed them. ;)		if (!empty($attachments))		{			$template->assign_var('S_HAS_ATTACHMENTS', true);			foreach ($attachments as $attachment)			{				$template->assign_block_vars('attachment', array(					'DISPLAY_ATTACHMENT'	=> $attachment)				);			}		}	}	$template->assign_vars(array(		'U_MCP_ACTION'			=> "$url&amp;i=main&amp;quickmod=1&amp;mode=post_details", // Use this for mode paramaters		'U_POST_ACTION'			=> "$url&amp;i=$id&amp;mode=post_details", // Use this for action parameters		'U_APPROVE_ACTION'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=queue&amp;p=$post_id&amp;f={$post_info['forum_id']}"),		'S_CAN_VIEWIP'			=> $auth->acl_get('m_info', $post_info['forum_id']),		'S_CAN_CHGPOSTER'		=> $auth->acl_get('m_chgposter', $post_info['forum_id']),		'S_CAN_LOCK_POST'		=> $auth->acl_get('m_lock', $post_info['forum_id']),		'S_CAN_DELETE_POST'		=> $auth->acl_get('m_delete', $post_info['forum_id']),		'S_POST_REPORTED'		=> ($post_info['post_reported']) ? true : false,		'S_POST_UNAPPROVED'		=> (!$post_info['post_approved']) ? true : false,		'S_POST_LOCKED'			=> ($post_info['post_edit_locked']) ? true : false,		'S_USER_NOTES'			=> true,		'S_CLEAR_ALLOWED'		=> ($auth->acl_get('a_clearlogs')) ? true : false,		'U_EDIT'				=> ($auth->acl_get('m_edit', $post_info['forum_id'])) ? append_sid("{$phpbb_root_path}posting.$phpEx", "mode=edit&amp;f={$post_info['forum_id']}&amp;p={$post_info['post_id']}") : '',		'U_FIND_USERNAME'		=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=mcp_chgposter&amp;field=username&amp;select_single=true'),		'U_MCP_APPROVE'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue&amp;mode=approve_details&amp;f=' . $post_info['forum_id'] . '&amp;p=' . $post_id),		'U_MCP_REPORT'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports&amp;mode=report_details&amp;f=' . $post_info['forum_id'] . '&amp;p=' . $post_id),		'U_MCP_USER_NOTES'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $post_info['user_id']),		'U_MCP_WARN_USER'		=> ($auth->acl_get('m_warn')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=warn&amp;mode=warn_user&amp;u=' . $post_info['user_id']) : '',		'U_VIEW_POST'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $post_info['forum_id'] . '&amp;p=' . $post_info['post_id'] . '#p' . $post_info['post_id']),		'U_VIEW_TOPIC'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $post_info['forum_id'] . '&amp;t=' . $post_info['topic_id']),		'MINI_POST_IMG'			=> ($post_unread) ? $user->img('icon_post_target_unread', 'UNREAD_POST') : $user->img('icon_post_target', 'POST'),		'RETURN_TOPIC'			=> sprintf($user->lang['RETURN_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f={$post_info['forum_id']}&amp;p=$post_id") . "#p$post_id\">", '</a>'),		'RETURN_FORUM'			=> sprintf($user->lang['RETURN_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", "f={$post_info['forum_id']}&amp;start={$start}") . '">', '</a>'),		'REPORTED_IMG'			=> $user->img('icon_topic_reported', $user->lang['POST_REPORTED']),		'UNAPPROVED_IMG'		=> $user->img('icon_topic_unapproved', $user->lang['POST_UNAPPROVED']),		'EDIT_IMG'				=> $user->img('icon_post_edit', $user->lang['EDIT_POST']),		'SEARCH_IMG'			=> $user->img('icon_user_search', $user->lang['SEARCH']),		'POST_AUTHOR_FULL'		=> get_username_string('full', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),		'POST_AUTHOR_COLOUR'	=> get_username_string('colour', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),		'POST_AUTHOR'			=> get_username_string('username', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),		'U_POST_AUTHOR'			=> get_username_string('profile', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),		'POST_PREVIEW'			=> $message,		'POST_SUBJECT'			=> $post_info['post_subject'],		'POST_DATE'				=> $user->format_date($post_info['post_time']),		'POST_IP'				=> $post_info['poster_ip'],		'POST_IPADDR'			=> ($auth->acl_get('m_info', $post_info['forum_id']) && request_var('lookup', '')) ? @gethostbyaddr($post_info['poster_ip']) : '',		'POST_ID'				=> $post_info['post_id'],		'U_LOOKUP_IP'			=> ($auth->acl_get('m_info', $post_info['forum_id'])) ? "$url&amp;i=$id&amp;mode=$mode&amp;lookup={$post_info['poster_ip']}#ip" : '',		'U_WHOIS'				=> ($auth->acl_get('m_info', $post_info['forum_id'])) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "i=$id&amp;mode=$mode&amp;action=whois&amp;p=$post_id&amp;ip={$post_info['poster_ip']}") : '',	));	// Get User Notes	$log_data = array();	$log_count = false;	view_log('user', $log_data, $log_count, $config['posts_per_page'], 0, 0, 0, $post_info['user_id']);	if (!empty($log_data))	{		$template->assign_var('S_USER_NOTES', true);		foreach ($log_data as $row)		{			$template->assign_block_vars('usernotes', array(				'REPORT_BY'		=> $row['username_full'],				'REPORT_AT'		=> $user->format_date($row['time']),				'ACTION'		=> $row['action'],				'ID'			=> $row['id'])			);		}	}	// Get Reports	if ($auth->acl_get('m_report', $post_info['forum_id']))	{		$sql = 'SELECT r.*, re.*, u.user_id, u.username			FROM ' . REPORTS_TABLE . ' r, ' . USERS_TABLE . ' u, ' . REPORTS_REASONS_TABLE . " re			WHERE r.post_id = $post_id				AND r.reason_id = re.reason_id				AND u.user_id = r.user_id			ORDER BY r.report_time DESC";		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			$template->assign_var('S_SHOW_REPORTS', true);			do			{				// If the reason is defined within the language file, we will use the localized version, else just use the database entry...				if (isset($user->lang['report_reasons']['TITLE'][strtoupper($row['reason_title'])]) && isset($user->lang['report_reasons']['DESCRIPTION'][strtoupper($row['reason_title'])]))				{					$row['reson_description'] = $user->lang['report_reasons']['DESCRIPTION'][strtoupper($row['reason_title'])];					$row['reason_title'] = $user->lang['report_reasons']['TITLE'][strtoupper($row['reason_title'])];				}				$template->assign_block_vars('reports', array(					'REPORT_ID'		=> $row['report_id'],					'REASON_TITLE'	=> $row['reason_title'],					'REASON_DESC'	=> $row['reason_description'],					'REPORTER'		=> ($row['user_id'] != ANONYMOUS) ? $row['username'] : $user->lang['GUEST'],					'U_REPORTER'	=> ($row['user_id'] != ANONYMOUS) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=viewprofile&amp;u=' . $row['user_id']) : '',					'USER_NOTIFY'	=> ($row['user_notify']) ? true : false,					'REPORT_TIME'	=> $user->format_date($row['report_time']),					'REPORT_TEXT'	=> bbcode_nl2br(trim($row['report_text'])),				));			}			while ($row = $db->sql_fetchrow($result));		}		$db->sql_freeresult($result);	}	// Get IP	if ($auth->acl_get('m_info', $post_info['forum_id']))	{		$rdns_ip_num = request_var('rdns', '');		if ($rdns_ip_num != 'all')		{			$template->assign_vars(array(				'U_LOOKUP_ALL'	=> "$url&amp;i=main&amp;mode=post_details&amp;rdns=all")			);		}		// Get other users who've posted under this IP		$sql = 'SELECT poster_id, COUNT(poster_id) as postings			FROM ' . POSTS_TABLE . "			WHERE poster_ip = '" . $db->sql_escape($post_info['poster_ip']) . "'			GROUP BY poster_id			ORDER BY postings DESC";		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			// Fill the user select list with users who have posted under this IP			if ($row['poster_id'] != $post_info['poster_id'])			{				$users_ary[$row['poster_id']] = $row;			}		}		$db->sql_freeresult($result);		if (sizeof($users_ary))		{			// Get the usernames			$sql = 'SELECT user_id, username				FROM ' . USERS_TABLE . '				WHERE ' . $db->sql_in_set('user_id', array_keys($users_ary));			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$users_ary[$row['user_id']]['username'] = $row['username'];				$usernames_ary[utf8_clean_string($row['username'])] = $users_ary[$row['user_id']];			}			$db->sql_freeresult($result);			foreach ($users_ary as $user_id => $user_row)			{				$template->assign_block_vars('userrow', array(					'USERNAME'		=> ($user_id == ANONYMOUS) ? $user->lang['GUEST'] : $user_row['username'],					'NUM_POSTS'		=> $user_row['postings'],					'L_POST_S'		=> ($user_row['postings'] == 1) ? $user->lang['POST'] : $user->lang['POSTS'],					'U_PROFILE'		=> ($user_id == ANONYMOUS) ? '' : append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=viewprofile&amp;u=' . $user_id),					'U_SEARCHPOSTS' => append_sid("{$phpbb_root_path}search.$phpEx", 'author_id=' . $user_id . '&amp;sr=topics'))				);			}		}		// Get other IP's this user has posted under		// A compound index on poster_id, poster_ip (posts table) would help speed up this query a lot,		// but the extra size is only valuable if there are persons having more than a thousands posts.		// This is better left to the really really big forums.		$sql = 'SELECT poster_ip, COUNT(poster_ip) AS postings			FROM ' . POSTS_TABLE . '			WHERE poster_id = ' . $post_info['poster_id'] . "			GROUP BY poster_ip			ORDER BY postings DESC";		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$hostname = (($rdns_ip_num == $row['poster_ip'] || $rdns_ip_num == 'all') && $row['poster_ip']) ? @gethostbyaddr($row['poster_ip']) : '';			$template->assign_block_vars('iprow', array(				'IP'			=> $row['poster_ip'],				'HOSTNAME'		=> $hostname,				'NUM_POSTS'		=> $row['postings'],				'L_POST_S'		=> ($row['postings'] == 1) ? $user->lang['POST'] : $user->lang['POSTS'],				'U_LOOKUP_IP'	=> ($rdns_ip_num == $row['poster_ip'] || $rdns_ip_num == 'all') ? '' : "$url&amp;i=$id&amp;mode=post_details&amp;rdns={$row['poster_ip']}#ip",				'U_WHOIS'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=$id&amp;mode=$mode&amp;action=whois&amp;p=$post_id&amp;ip={$row['poster_ip']}"))			);		}		$db->sql_freeresult($result);		$user_select = '';		if (sizeof($usernames_ary))		{			ksort($usernames_ary);			foreach ($usernames_ary as $row)			{				$user_select .= '<option value="' . $row['poster_id'] . '">' . $row['username'] . "</option>\n";			}		}		$template->assign_var('S_USER_SELECT', $user_select);	}}/*** Change a post's poster*/function change_poster(&$post_info, $userdata){	global $auth, $db, $config, $phpbb_root_path, $phpEx;	if (empty($userdata) || $userdata['user_id'] == $post_info['user_id'])	{		return;	}	$post_id = $post_info['post_id'];	$sql = 'UPDATE ' . POSTS_TABLE . "		SET poster_id = {$userdata['user_id']}		WHERE post_id = $post_id";	$db->sql_query($sql);	// Resync topic/forum if needed	if ($post_info['topic_last_post_id'] == $post_id || $post_info['forum_last_post_id'] == $post_id || $post_info['topic_first_post_id'] == $post_id)	{		sync('topic', 'topic_id', $post_info['topic_id'], false, false);		sync('forum', 'forum_id', $post_info['forum_id'], false, false);	}	// Adjust post counts... only if the post is approved (else, it was not added the users post count anyway)	if ($post_info['post_postcount'] && $post_info['post_approved'])	{		$sql = 'UPDATE ' . USERS_TABLE . '			SET user_posts = user_posts - 1			WHERE user_id = ' . $post_info['user_id'] .'			AND user_posts > 0';		$db->sql_query($sql);		$sql = 'UPDATE ' . USERS_TABLE . '			SET user_posts = user_posts + 1			WHERE user_id = ' . $userdata['user_id'];		$db->sql_query($sql);	}	// Add posted to information for this topic for the new user	markread('post', $post_info['forum_id'], $post_info['topic_id'], time(), $userdata['user_id']);	// Remove the dotted topic option if the old user has no more posts within this topic	if ($config['load_db_track'] && $post_info['user_id'] != ANONYMOUS)	{		$sql = 'SELECT topic_id			FROM ' . POSTS_TABLE . '			WHERE topic_id = ' . $post_info['topic_id'] . '				AND poster_id = ' . $post_info['user_id'];		$result = $db->sql_query_limit($sql, 1);		$topic_id = (int) $db->sql_fetchfield('topic_id');		$db->sql_freeresult($result);		if (!$topic_id)		{			$sql = 'DELETE FROM ' . TOPICS_POSTED_TABLE . '				WHERE user_id = ' . $post_info['user_id'] . '					AND topic_id = ' . $post_info['topic_id'];			$db->sql_query($sql);		}	}	// change the poster_id within the attachments table, else the data becomes out of sync and errors displayed because of wrong ownership	if ($post_info['post_attachment'])	{		$sql = 'UPDATE ' . ATTACHMENTS_TABLE . '			SET poster_id = ' . $userdata['user_id'] . '			WHERE poster_id = ' . $post_info['user_id'] . '				AND post_msg_id = ' . $post_info['post_id'] . '				AND topic_id = ' . $post_info['topic_id'];		$db->sql_query($sql);	}	// refresh search cache of this post	$search_type = basename($config['search_type']);	if (file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx))	{		require("{$phpbb_root_path}includes/search/$search_type.$phpEx");		// We do some additional checks in the module to ensure it can actually be utilised		$error = false;		$search = new $search_type($error);		if (!$error && method_exists($search, 'destroy_cache'))		{			$search->destroy_cache(array(), array($post_info['user_id'], $userdata['user_id']));		}	}	$from_username = $post_info['username'];	$to_username = $userdata['username'];	// Renew post info	$post_info = get_post_data(array($post_id), false, true);	if (!sizeof($post_info))	{		trigger_error('POST_NOT_EXIST');	}	$post_info = $post_info[$post_id];	// Now add log entry	add_log('mod', $post_info['forum_id'], $post_info['topic_id'], 'LOG_MCP_CHANGE_POSTER', $post_info['topic_title'], $from_username, $to_username);}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_icons_info{	function module()	{		return array(			'filename'	=> 'acp_icons',			'title'		=> 'ACP_ICONS_SMILIES',			'version'	=> '1.0.0',			'modes'		=> array(				'icons'		=> array('title' => 'ACP_ICONS', 'auth' => 'acl_a_icons', 'cat' => array('ACP_MESSAGES')),				'smilies'	=> array('title' => 'ACP_SMILIES', 'auth' => 'acl_a_icons', 'cat' => array('ACP_MESSAGES')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** acp_email [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// Email settings$lang = array_merge($lang, array(	'ACP_MASS_EMAIL_EXPLAIN'		=> 'Here you can e-mail a message to either all of your users or all users of a specific group <strong>having the option to receive mass e-mails enabled</strong>. To achieve this an e-mail will be sent out to the administrative e-mail address supplied, with a blind carbon copy sent to all recipients. The default setting is to only include 50 recipients in such an e-mail, for more recipients more e-mails will be sent. If you are emailing a large group of people please be patient after submitting and do not stop the page halfway through. It is normal for a mass emailing to take a long time, you will be notified when the script has completed.',	'ALL_USERS'						=> 'All users',	'COMPOSE'				=> 'Compose',	'EMAIL_SEND_ERROR'		=> 'There were one or more errors while sending the e-mail. Please check the %sError log%s for detailed error messages.',	'EMAIL_SENT'			=> 'This message has been sent.',	'EMAIL_SENT_QUEUE'		=> 'This message has been queued for sending.',	'LOG_SESSION'			=> 'Log mail session to critical log',	'SEND_IMMEDIATELY'		=> 'Send immediately',	'SEND_TO_GROUP'			=> 'Send to group',	'SEND_TO_USERS'			=> 'Send to users',	'SEND_TO_USERS_EXPLAIN'	=> 'Entering names here will override any group selected above. Enter each username on a new line.',	'MAIL_BANNED'			=> 'Mail banned users',	'MAIL_BANNED_EXPLAIN'	=> 'When sending a mass e-mail to a group you can select here whether banned users will also receive the e-mail.',	'MAIL_HIGH_PRIORITY'	=> 'High',	'MAIL_LOW_PRIORITY'		=> 'Low',	'MAIL_NORMAL_PRIORITY'	=> 'Normal',	'MAIL_PRIORITY'			=> 'Mail priority',	'MASS_MESSAGE'			=> 'Your message',	'MASS_MESSAGE_EXPLAIN'	=> 'Please note that you may enter only plain text. All markup will be removed before sending.',	'NO_EMAIL_MESSAGE'		=> 'You must enter a message.',	'NO_EMAIL_SUBJECT'		=> 'You must specify a subject for your message.',));?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_users_info{	function module()	{		return array(			'filename'	=> 'acp_users',			'title'		=> 'ACP_USER_MANAGEMENT',			'version'	=> '1.0.0',			'modes'		=> array(				'overview'		=> array('title' => 'ACP_MANAGE_USERS', 'auth' => 'acl_a_user', 'cat' => array('ACP_CAT_USERS')),				'feedback'		=> array('title' => 'ACP_USER_FEEDBACK', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'warnings'		=> array('title' => 'ACP_USER_WARNINGS', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'profile'		=> array('title' => 'ACP_USER_PROFILE', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'prefs'			=> array('title' => 'ACP_USER_PREFS', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'avatar'		=> array('title' => 'ACP_USER_AVATAR', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'rank'			=> array('title' => 'ACP_USER_RANK', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'sig'			=> array('title' => 'ACP_USER_SIG', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'groups'		=> array('title' => 'ACP_USER_GROUPS', 'auth' => 'acl_a_user && acl_a_group', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'perm'			=> array('title' => 'ACP_USER_PERM', 'auth' => 'acl_a_user && acl_a_viewauth', 'display' => false, 'cat' => array('ACP_CAT_USERS')),				'attach'		=> array('title' => 'ACP_USER_ATTACH', 'auth' => 'acl_a_user', 'display' => false, 'cat' => array('ACP_CAT_USERS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}include($phpbb_root_path . 'includes/questionnaire/questionnaire.' . $phpEx);/*** @package acp*/class acp_send_statistics{	var $u_action;	function main($id, $mode)	{		global $config, $template, $phpbb_admin_path, $phpEx;		$collect_url = "http://www.phpbb.com/stats/receive_stats.php";		$this->tpl_name = 'acp_send_statistics';		$this->page_title = 'ACP_SEND_STATISTICS';		// generate a unique id if necessary		if (!isset($config['questionnaire_unique_id']))		{			$install_id = unique_id();			set_config('questionnaire_unique_id', $install_id);		}		else		{			$install_id = $config['questionnaire_unique_id'];		}		$collector = new phpbb_questionnaire_data_collector($install_id);		// Add data provider		$collector->add_data_provider(new phpbb_questionnaire_php_data_provider());		$collector->add_data_provider(new phpbb_questionnaire_system_data_provider());		$collector->add_data_provider(new phpbb_questionnaire_phpbb_data_provider($config));		$template->assign_vars(array(			'U_COLLECT_STATS'	=> $collect_url,			'RAW_DATA'			=> $collector->get_data_for_form(),			'U_ACP_MAIN'		=> append_sid("{$phpbb_admin_path}index.$phpEx"),		));		$raw = $collector->get_data_raw();		foreach ($raw as $provider => $data)		{			if ($provider == 'install_id')			{				$data = array($provider => $data);			}			$template->assign_block_vars('providers', array(				'NAME'	=> htmlspecialchars($provider),			));			foreach ($data as $key => $value)			{				if (is_array($value))				{					$value = utf8_wordwrap(serialize($value), 75, "\n", true);				}				$template->assign_block_vars('providers.values', array(					'KEY'	=> utf8_htmlspecialchars($key),					'VALUE'	=> utf8_htmlspecialchars($value),				));			}		}	}}?>
<?php return array(''=>'',''=>'');
<?phpfunction iso_8859_1($string){	return utf8_encode($string);}function iso_8859_2($string){	static $transform = array(		"\x80" => "\xC2\x80",		"\x81" => "\xC2\x81",		"\x82" => "\xC2\x82",		"\x83" => "\xC2\x83",		"\x84" => "\xC2\x84",		"\x85" => "\xC2\x85",		"\x86" => "\xC2\x86",		"\x87" => "\xC2\x87",		"\x88" => "\xC2\x88",		"\x89" => "\xC2\x89",		"\x8A" => "\xC2\x8A",		"\x8B" => "\xC2\x8B",		"\x8C" => "\xC2\x8C",		"\x8D" => "\xC2\x8D",		"\x8E" => "\xC2\x8E",		"\x8F" => "\xC2\x8F",		"\x90" => "\xC2\x90",		"\x91" => "\xC2\x91",		"\x92" => "\xC2\x92",		"\x93" => "\xC2\x93",		"\x94" => "\xC2\x94",		"\x95" => "\xC2\x95",		"\x96" => "\xC2\x96",		"\x97" => "\xC2\x97",		"\x98" => "\xC2\x98",		"\x99" => "\xC2\x99",		"\x9A" => "\xC2\x9A",		"\x9B" => "\xC2\x9B",		"\x9C" => "\xC2\x9C",		"\x9D" => "\xC2\x9D",		"\x9E" => "\xC2\x9E",		"\x9F" => "\xC2\x9F",		"\xA0" => "\xC2\xA0",		"\xA1" => "\xC4\x84",		"\xA2" => "\xCB\x98",		"\xA3" => "\xC5\x81",		"\xA4" => "\xC2\xA4",		"\xA5" => "\xC4\xBD",		"\xA6" => "\xC5\x9A",		"\xA7" => "\xC2\xA7",		"\xA8" => "\xC2\xA8",		"\xA9" => "\xC5\xA0",		"\xAA" => "\xC5\x9E",		"\xAB" => "\xC5\xA4",		"\xAC" => "\xC5\xB9",		"\xAD" => "\xC2\xAD",		"\xAE" => "\xC5\xBD",		"\xAF" => "\xC5\xBB",		"\xB0" => "\xC2\xB0",		"\xB1" => "\xC4\x85",		"\xB2" => "\xCB\x9B",		"\xB3" => "\xC5\x82",		"\xB4" => "\xC2\xB4",		"\xB5" => "\xC4\xBE",		"\xB6" => "\xC5\x9B",		"\xB7" => "\xCB\x87",		"\xB8" => "\xC2\xB8",		"\xB9" => "\xC5\xA1",		"\xBA" => "\xC5\x9F",		"\xBB" => "\xC5\xA5",		"\xBC" => "\xC5\xBA",		"\xBD" => "\xCB\x9D",		"\xBE" => "\xC5\xBE",		"\xBF" => "\xC5\xBC",		"\xC0" => "\xC5\x94",		"\xC1" => "\xC3\x81",		"\xC2" => "\xC3\x82",		"\xC3" => "\xC4\x82",		"\xC4" => "\xC3\x84",		"\xC5" => "\xC4\xB9",		"\xC6" => "\xC4\x86",		"\xC7" => "\xC3\x87",		"\xC8" => "\xC4\x8C",		"\xC9" => "\xC3\x89",		"\xCA" => "\xC4\x98",		"\xCB" => "\xC3\x8B",		"\xCC" => "\xC4\x9A",		"\xCD" => "\xC3\x8D",		"\xCE" => "\xC3\x8E",		"\xCF" => "\xC4\x8E",		"\xD0" => "\xC4\x90",		"\xD1" => "\xC5\x83",		"\xD2" => "\xC5\x87",		"\xD3" => "\xC3\x93",		"\xD4" => "\xC3\x94",		"\xD5" => "\xC5\x90",		"\xD6" => "\xC3\x96",		"\xD7" => "\xC3\x97",		"\xD8" => "\xC5\x98",		"\xD9" => "\xC5\xAE",		"\xDA" => "\xC3\x9A",		"\xDB" => "\xC5\xB0",		"\xDC" => "\xC3\x9C",		"\xDD" => "\xC3\x9D",		"\xDE" => "\xC5\xA2",		"\xDF" => "\xC3\x9F",		"\xE0" => "\xC5\x95",		"\xE1" => "\xC3\xA1",		"\xE2" => "\xC3\xA2",		"\xE3" => "\xC4\x83",		"\xE4" => "\xC3\xA4",		"\xE5" => "\xC4\xBA",		"\xE6" => "\xC4\x87",		"\xE7" => "\xC3\xA7",		"\xE8" => "\xC4\x8D",		"\xE9" => "\xC3\xA9",		"\xEA" => "\xC4\x99",		"\xEB" => "\xC3\xAB",		"\xEC" => "\xC4\x9B",		"\xED" => "\xC3\xAD",		"\xEE" => "\xC3\xAE",		"\xEF" => "\xC4\x8F",		"\xF0" => "\xC4\x91",		"\xF1" => "\xC5\x84",		"\xF2" => "\xC5\x88",		"\xF3" => "\xC3\xB3",		"\xF4" => "\xC3\xB4",		"\xF5" => "\xC5\x91",		"\xF6" => "\xC3\xB6",		"\xF7" => "\xC3\xB7",		"\xF8" => "\xC5\x99",		"\xF9" => "\xC5\xAF",		"\xFA" => "\xC3\xBA",		"\xFB" => "\xC5\xB1",		"\xFC" => "\xC3\xBC",		"\xFD" => "\xC3\xBD",		"\xFE" => "\xC5\xA3",		"\xFF" => "\xCB\x99",	);	return strtr($string, $transform);}function iso_8859_4($string){	static $transform = array(		"\x80" => "\xC2\x80",		"\x81" => "\xC2\x81",		"\x82" => "\xC2\x82",		"\x83" => "\xC2\x83",		"\x84" => "\xC2\x84",		"\x85" => "\xC2\x85",		"\x86" => "\xC2\x86",		"\x87" => "\xC2\x87",		"\x88" => "\xC2\x88",		"\x89" => "\xC2\x89",		"\x8A" => "\xC2\x8A",		"\x8B" => "\xC2\x8B",		"\x8C" => "\xC2\x8C",		"\x8D" => "\xC2\x8D",		"\x8E" => "\xC2\x8E",		"\x8F" => "\xC2\x8F",		"\x90" => "\xC2\x90",		"\x91" => "\xC2\x91",		"\x92" => "\xC2\x92",		"\x93" => "\xC2\x93",		"\x94" => "\xC2\x94",		"\x95" => "\xC2\x95",		"\x96" => "\xC2\x96",		"\x97" => "\xC2\x97",		"\x98" => "\xC2\x98",		"\x99" => "\xC2\x99",		"\x9A" => "\xC2\x9A",		"\x9B" => "\xC2\x9B",		"\x9C" => "\xC2\x9C",		"\x9D" => "\xC2\x9D",		"\x9E" => "\xC2\x9E",		"\x9F" => "\xC2\x9F",		"\xA0" => "\xC2\xA0",		"\xA1" => "\xC4\x84",		"\xA2" => "\xC4\xB8",		"\xA3" => "\xC5\x96",		"\xA4" => "\xC2\xA4",		"\xA5" => "\xC4\xA8",		"\xA6" => "\xC4\xBB",		"\xA7" => "\xC2\xA7",		"\xA8" => "\xC2\xA8",		"\xA9" => "\xC5\xA0",		"\xAA" => "\xC4\x92",		"\xAB" => "\xC4\xA2",		"\xAC" => "\xC5\xA6",		"\xAD" => "\xC2\xAD",		"\xAE" => "\xC5\xBD",		"\xAF" => "\xC2\xAF",		"\xB0" => "\xC2\xB0",		"\xB1" => "\xC4\x85",		"\xB2" => "\xCB\x9B",		"\xB3" => "\xC5\x97",		"\xB4" => "\xC2\xB4",		"\xB5" => "\xC4\xA9",		"\xB6" => "\xC4\xBC",		"\xB7" => "\xCB\x87",		"\xB8" => "\xC2\xB8",		"\xB9" => "\xC5\xA1",		"\xBA" => "\xC4\x93",		"\xBB" => "\xC4\xA3",		"\xBC" => "\xC5\xA7",		"\xBD" => "\xC5\x8A",		"\xBE" => "\xC5\xBE",		"\xBF" => "\xC5\x8B",		"\xC0" => "\xC4\x80",		"\xC1" => "\xC3\x81",		"\xC2" => "\xC3\x82",		"\xC3" => "\xC3\x83",		"\xC4" => "\xC3\x84",		"\xC5" => "\xC3\x85",		"\xC6" => "\xC3\x86",		"\xC7" => "\xC4\xAE",		"\xC8" => "\xC4\x8C",		"\xC9" => "\xC3\x89",		"\xCA" => "\xC4\x98",		"\xCB" => "\xC3\x8B",		"\xCC" => "\xC4\x96",		"\xCD" => "\xC3\x8D",		"\xCE" => "\xC3\x8E",		"\xCF" => "\xC4\xAA",		"\xD0" => "\xC4\x90",		"\xD1" => "\xC5\x85",		"\xD2" => "\xC5\x8C",		"\xD3" => "\xC4\xB6",		"\xD4" => "\xC3\x94",		"\xD5" => "\xC3\x95",		"\xD6" => "\xC3\x96",		"\xD7" => "\xC3\x97",		"\xD8" => "\xC3\x98",		"\xD9" => "\xC5\xB2",		"\xDA" => "\xC3\x9A",		"\xDB" => "\xC3\x9B",		"\xDC" => "\xC3\x9C",		"\xDD" => "\xC5\xA8",		"\xDE" => "\xC5\xAA",		"\xDF" => "\xC3\x9F",		"\xE0" => "\xC4\x81",		"\xE1" => "\xC3\xA1",		"\xE2" => "\xC3\xA2",		"\xE3" => "\xC3\xA3",		"\xE4" => "\xC3\xA4",		"\xE5" => "\xC3\xA5",		"\xE6" => "\xC3\xA6",		"\xE7" => "\xC4\xAF",		"\xE8" => "\xC4\x8D",		"\xE9" => "\xC3\xA9",		"\xEA" => "\xC4\x99",		"\xEB" => "\xC3\xAB",		"\xEC" => "\xC4\x97",		"\xED" => "\xC3\xAD",		"\xEE" => "\xC3\xAE",		"\xEF" => "\xC4\xAB",		"\xF0" => "\xC4\x91",		"\xF1" => "\xC5\x86",		"\xF2" => "\xC5\x8D",		"\xF3" => "\xC4\xB7",		"\xF4" => "\xC3\xB4",		"\xF5" => "\xC3\xB5",		"\xF6" => "\xC3\xB6",		"\xF7" => "\xC3\xB7",		"\xF8" => "\xC3\xB8",		"\xF9" => "\xC5\xB3",		"\xFA" => "\xC3\xBA",		"\xFB" => "\xC3\xBB",		"\xFC" => "\xC3\xBC",		"\xFD" => "\xC5\xA9",		"\xFE" => "\xC5\xAB",		"\xFF" => "\xCB\x99",	);	return strtr($string, $transform);}function iso_8859_7($string){	static $transform = array(		"\x80" => "\xC2\x80",		"\x81" => "\xC2\x81",		"\x82" => "\xC2\x82",		"\x83" => "\xC2\x83",		"\x84" => "\xC2\x84",		"\x85" => "\xC2\x85",		"\x86" => "\xC2\x86",		"\x87" => "\xC2\x87",		"\x88" => "\xC2\x88",		"\x89" => "\xC2\x89",		"\x8A" => "\xC2\x8A",		"\x8B" => "\xC2\x8B",		"\x8C" => "\xC2\x8C",		"\x8D" => "\xC2\x8D",		"\x8E" => "\xC2\x8E",		"\x8F" => "\xC2\x8F",		"\x90" => "\xC2\x90",		"\x91" => "\xC2\x91",		"\x92" => "\xC2\x92",		"\x93" => "\xC2\x93",		"\x94" => "\xC2\x94",		"\x95" => "\xC2\x95",		"\x96" => "\xC2\x96",		"\x97" => "\xC2\x97",		"\x98" => "\xC2\x98",		"\x99" => "\xC2\x99",		"\x9A" => "\xC2\x9A",		"\x9B" => "\xC2\x9B",		"\x9C" => "\xC2\x9C",		"\x9D" => "\xC2\x9D",		"\x9E" => "\xC2\x9E",		"\x9F" => "\xC2\x9F",		"\xA0" => "\xC2\xA0",		"\xA1" => "\xE2\x80\x98",		"\xA2" => "\xE2\x80\x99",		"\xA3" => "\xC2\xA3",		"\xA4" => "\xE2\x82\xAC",		"\xA5" => "\xE2\x82\xAF",		"\xA6" => "\xC2\xA6",		"\xA7" => "\xC2\xA7",		"\xA8" => "\xC2\xA8",		"\xA9" => "\xC2\xA9",		"\xAA" => "\xCD\xBA",		"\xAB" => "\xC2\xAB",		"\xAC" => "\xC2\xAC",		"\xAD" => "\xC2\xAD",		"\xAF" => "\xE2\x80\x95",		"\xB0" => "\xC2\xB0",		"\xB1" => "\xC2\xB1",		"\xB2" => "\xC2\xB2",		"\xB3" => "\xC2\xB3",		"\xB4" => "\xCE\x84",		"\xB5" => "\xCE\x85",		"\xB6" => "\xCE\x86",		"\xB7" => "\xC2\xB7",		"\xB8" => "\xCE\x88",		"\xB9" => "\xCE\x89",		"\xBA" => "\xCE\x8A",		"\xBB" => "\xC2\xBB",		"\xBC" => "\xCE\x8C",		"\xBD" => "\xC2\xBD",		"\xBE" => "\xCE\x8E",		"\xBF" => "\xCE\x8F",		"\xC0" => "\xCE\x90",		"\xC1" => "\xCE\x91",		"\xC2" => "\xCE\x92",		"\xC3" => "\xCE\x93",		"\xC4" => "\xCE\x94",		"\xC5" => "\xCE\x95",		"\xC6" => "\xCE\x96",		"\xC7" => "\xCE\x97",		"\xC8" => "\xCE\x98",		"\xC9" => "\xCE\x99",		"\xCA" => "\xCE\x9A",		"\xCB" => "\xCE\x9B",		"\xCC" => "\xCE\x9C",		"\xCD" => "\xCE\x9D",		"\xCE" => "\xCE\x9E",		"\xCF" => "\xCE\x9F",		"\xD0" => "\xCE\xA0",		"\xD1" => "\xCE\xA1",		"\xD3" => "\xCE\xA3",		"\xD4" => "\xCE\xA4",		"\xD5" => "\xCE\xA5",		"\xD6" => "\xCE\xA6",		"\xD7" => "\xCE\xA7",		"\xD8" => "\xCE\xA8",		"\xD9" => "\xCE\xA9",		"\xDA" => "\xCE\xAA",		"\xDB" => "\xCE\xAB",		"\xDC" => "\xCE\xAC",		"\xDD" => "\xCE\xAD",		"\xDE" => "\xCE\xAE",		"\xDF" => "\xCE\xAF",		"\xE0" => "\xCE\xB0",		"\xE1" => "\xCE\xB1",		"\xE2" => "\xCE\xB2",		"\xE3" => "\xCE\xB3",		"\xE4" => "\xCE\xB4",		"\xE5" => "\xCE\xB5",		"\xE6" => "\xCE\xB6",		"\xE7" => "\xCE\xB7",		"\xE8" => "\xCE\xB8",		"\xE9" => "\xCE\xB9",		"\xEA" => "\xCE\xBA",		"\xEB" => "\xCE\xBB",		"\xEC" => "\xCE\xBC",		"\xED" => "\xCE\xBD",		"\xEE" => "\xCE\xBE",		"\xEF" => "\xCE\xBF",		"\xF0" => "\xCF\x80",		"\xF1" => "\xCF\x81",		"\xF2" => "\xCF\x82",		"\xF3" => "\xCF\x83",		"\xF4" => "\xCF\x84",		"\xF5" => "\xCF\x85",		"\xF6" => "\xCF\x86",		"\xF7" => "\xCF\x87",		"\xF8" => "\xCF\x88",		"\xF9" => "\xCF\x89",		"\xFA" => "\xCF\x8A",		"\xFB" => "\xCF\x8B",		"\xFC" => "\xCF\x8C",		"\xFD" => "\xCF\x8D",		"\xFE" => "\xCF\x8E",	);	return strtr($string, $transform);}function iso_8859_8($string){	static $transform = array(		"\xC2\xAA" => "\xC3\x97",		"\xC2\xBA" => "\xC3\xB7",		"\xC3\x9F" => "\xE2\x80\x97",		"\xC3\xA0" => "\xD7\x90",		"\xC3\xA1" => "\xD7\x91",		"\xC3\xA2" => "\xD7\x92",		"\xC3\xA3" => "\xD7\x93",		"\xC3\xA4" => "\xD7\x94",		"\xC3\xA5" => "\xD7\x95",		"\xC3\xA6" => "\xD7\x96",		"\xC3\xA7" => "\xD7\x97",		"\xC3\xA8" => "\xD7\x98",		"\xC3\xA9" => "\xD7\x99",		"\xC3\xAA" => "\xD7\x9A",		"\xC3\xAB" => "\xD7\x9B",		"\xC3\xAC" => "\xD7\x9C",		"\xC3\xAD" => "\xD7\x9D",		"\xC3\xAE" => "\xD7\x9E",		"\xC3\xAF" => "\xD7\x9F",		"\xC3\xB0" => "\xD7\xA0",		"\xC3\xB1" => "\xD7\xA1",		"\xC3\xB2" => "\xD7\xA2",		"\xC3\xB3" => "\xD7\xA3",		"\xC3\xB4" => "\xD7\xA4",		"\xC3\xB5" => "\xD7\xA5",		"\xC3\xB6" => "\xD7\xA6",		"\xC3\xB7" => "\xD7\xA7",		"\xC3\xB8" => "\xD7\xA8",		"\xC3\xB9" => "\xD7\xA9",		"\xC3\xBA" => "\xD7\xAA",		"\xC3\xBD" => "\xE2\x80\x8E",		"\xC3\xBE" => "\xE2\x80\x8F",	);	return strtr(utf8_encode($string), $transform);}function iso_8859_9($string){	static $transform = array(		"\xC3\x90" => "\xC4\x9E",		"\xC3\x9D" => "\xC4\xB0",		"\xC3\x9E" => "\xC5\x9E",		"\xC3\xB0" => "\xC4\x9F",		"\xC3\xBD" => "\xC4\xB1",		"\xC3\xBE" => "\xC5\x9F",	);	return strtr(utf8_encode($string), $transform);}function iso_8859_15($string){	static $transform = array(		"\xC2\xA4" => "\xE2\x82\xAC",		"\xC2\xA6" => "\xC5\xA0",		"\xC2\xA8" => "\xC5\xA1",		"\xC2\xB4" => "\xC5\xBD",		"\xC2\xB8" => "\xC5\xBE",		"\xC2\xBC" => "\xC5\x92",		"\xC2\xBD" => "\xC5\x93",		"\xC2\xBE" => "\xC5\xB8",	);	return strtr(utf8_encode($string), $transform);}// nearly the same as iso-8859-11function tis_620($string){	static $transform = array(		"\x80" => "\xC2\x80",		"\x81" => "\xC2\x81",		"\x82" => "\xC2\x82",		"\x83" => "\xC2\x83",		"\x84" => "\xC2\x84",		"\x85" => "\xC2\x85",		"\x86" => "\xC2\x86",		"\x87" => "\xC2\x87",		"\x88" => "\xC2\x88",		"\x89" => "\xC2\x89",		"\x8A" => "\xC2\x8A",		"\x8B" => "\xC2\x8B",		"\x8C" => "\xC2\x8C",		"\x8D" => "\xC2\x8D",		"\x8E" => "\xC2\x8E",		"\x8F" => "\xC2\x8F",		"\x90" => "\xC2\x90",		"\x91" => "\xC2\x91",		"\x92" => "\xC2\x92",		"\x93" => "\xC2\x93",		"\x94" => "\xC2\x94",		"\x95" => "\xC2\x95",		"\x96" => "\xC2\x96",		"\x97" => "\xC2\x97",		"\x98" => "\xC2\x98",		"\x99" => "\xC2\x99",		"\x9A" => "\xC2\x9A",		"\x9B" => "\xC2\x9B",		"\x9C" => "\xC2\x9C",		"\x9D" => "\xC2\x9D",		"\x9E" => "\xC2\x9E",		"\x9F" => "\xC2\x9F",		"\xA1" => "\xE0\xB8\x81",		"\xA2" => "\xE0\xB8\x82",		"\xA3" => "\xE0\xB8\x83",		"\xA4" => "\xE0\xB8\x84",		"\xA5" => "\xE0\xB8\x85",		"\xA6" => "\xE0\xB8\x86",		"\xA7" => "\xE0\xB8\x87",		"\xA8" => "\xE0\xB8\x88",		"\xA9" => "\xE0\xB8\x89",		"\xAA" => "\xE0\xB8\x8A",		"\xAB" => "\xE0\xB8\x8B",		"\xAC" => "\xE0\xB8\x8C",		"\xAD" => "\xE0\xB8\x8D",		"\xAE" => "\xE0\xB8\x8E",		"\xAF" => "\xE0\xB8\x8F",		"\xB0" => "\xE0\xB8\x90",		"\xB1" => "\xE0\xB8\x91",		"\xB2" => "\xE0\xB8\x92",		"\xB3" => "\xE0\xB8\x93",		"\xB4" => "\xE0\xB8\x94",		"\xB5" => "\xE0\xB8\x95",		"\xB6" => "\xE0\xB8\x96",		"\xB7" => "\xE0\xB8\x97",		"\xB8" => "\xE0\xB8\x98",		"\xB9" => "\xE0\xB8\x99",		"\xBA" => "\xE0\xB8\x9A",		"\xBB" => "\xE0\xB8\x9B",		"\xBC" => "\xE0\xB8\x9C",		"\xBD" => "\xE0\xB8\x9D",		"\xBE" => "\xE0\xB8\x9E",		"\xBF" => "\xE0\xB8\x9F",		"\xC0" => "\xE0\xB8\xA0",		"\xC1" => "\xE0\xB8\xA1",		"\xC2" => "\xE0\xB8\xA2",		"\xC3" => "\xE0\xB8\xA3",		"\xC4" => "\xE0\xB8\xA4",		"\xC5" => "\xE0\xB8\xA5",		"\xC6" => "\xE0\xB8\xA6",		"\xC7" => "\xE0\xB8\xA7",		"\xC8" => "\xE0\xB8\xA8",		"\xC9" => "\xE0\xB8\xA9",		"\xCA" => "\xE0\xB8\xAA",		"\xCB" => "\xE0\xB8\xAB",		"\xCC" => "\xE0\xB8\xAC",		"\xCD" => "\xE0\xB8\xAD",		"\xCE" => "\xE0\xB8\xAE",		"\xCF" => "\xE0\xB8\xAF",		"\xD0" => "\xE0\xB8\xB0",		"\xD1" => "\xE0\xB8\xB1",		"\xD2" => "\xE0\xB8\xB2",		"\xD3" => "\xE0\xB8\xB3",		"\xD4" => "\xE0\xB8\xB4",		"\xD5" => "\xE0\xB8\xB5",		"\xD6" => "\xE0\xB8\xB6",		"\xD7" => "\xE0\xB8\xB7",		"\xD8" => "\xE0\xB8\xB8",		"\xD9" => "\xE0\xB8\xB9",		"\xDA" => "\xE0\xB8\xBA",		"\xDF" => "\xE0\xB8\xBF",		"\xE0" => "\xE0\xB9\x80",		"\xE1" => "\xE0\xB9\x81",		"\xE2" => "\xE0\xB9\x82",		"\xE3" => "\xE0\xB9\x83",		"\xE4" => "\xE0\xB9\x84",		"\xE5" => "\xE0\xB9\x85",		"\xE6" => "\xE0\xB9\x86",		"\xE7" => "\xE0\xB9\x87",		"\xE8" => "\xE0\xB9\x88",		"\xE9" => "\xE0\xB9\x89",		"\xEA" => "\xE0\xB9\x8A",		"\xEB" => "\xE0\xB9\x8B",		"\xEC" => "\xE0\xB9\x8C",		"\xED" => "\xE0\xB9\x8D",		"\xEE" => "\xE0\xB9\x8E",		"\xEF" => "\xE0\xB9\x8F",		"\xF0" => "\xE0\xB9\x90",		"\xF1" => "\xE0\xB9\x91",		"\xF2" => "\xE0\xB9\x92",		"\xF3" => "\xE0\xB9\x93",		"\xF4" => "\xE0\xB9\x94",		"\xF5" => "\xE0\xB9\x95",		"\xF6" => "\xE0\xB9\x96",		"\xF7" => "\xE0\xB9\x97",		"\xF8" => "\xE0\xB9\x98",		"\xF9" => "\xE0\xB9\x99",		"\xFA" => "\xE0\xB9\x9A",		"\xFB" => "\xE0\xB9\x9B",	);	return strtr($string, $transform);}function cp874($string){	static $transform = array(		"\x80" => "\xE2\x82\xAC",		"\x85" => "\xE2\x80\xA6",		"\x91" => "\xE2\x80\x98",		"\x92" => "\xE2\x80\x99",		"\x93" => "\xE2\x80\x9C",		"\x94" => "\xE2\x80\x9D",		"\x95" => "\xE2\x80\xA2",		"\x96" => "\xE2\x80\x93",		"\x97" => "\xE2\x80\x94",		"\xA0" => "\xC2\xA0",		"\xA1" => "\xE0\xB8\x81",		"\xA2" => "\xE0\xB8\x82",		"\xA3" => "\xE0\xB8\x83",		"\xA4" => "\xE0\xB8\x84",		"\xA5" => "\xE0\xB8\x85",		"\xA6" => "\xE0\xB8\x86",		"\xA7" => "\xE0\xB8\x87",		"\xA8" => "\xE0\xB8\x88",		"\xA9" => "\xE0\xB8\x89",		"\xAA" => "\xE0\xB8\x8A",		"\xAB" => "\xE0\xB8\x8B",		"\xAC" => "\xE0\xB8\x8C",		"\xAD" => "\xE0\xB8\x8D",		"\xAE" => "\xE0\xB8\x8E",		"\xAF" => "\xE0\xB8\x8F",		"\xB0" => "\xE0\xB8\x90",		"\xB1" => "\xE0\xB8\x91",		"\xB2" => "\xE0\xB8\x92",		"\xB3" => "\xE0\xB8\x93",		"\xB4" => "\xE0\xB8\x94",		"\xB5" => "\xE0\xB8\x95",		"\xB6" => "\xE0\xB8\x96",		"\xB7" => "\xE0\xB8\x97",		"\xB8" => "\xE0\xB8\x98",		"\xB9" => "\xE0\xB8\x99",		"\xBA" => "\xE0\xB8\x9A",		"\xBB" => "\xE0\xB8\x9B",		"\xBC" => "\xE0\xB8\x9C",		"\xBD" => "\xE0\xB8\x9D",		"\xBE" => "\xE0\xB8\x9E",		"\xBF" => "\xE0\xB8\x9F",		"\xC0" => "\xE0\xB8\xA0",		"\xC1" => "\xE0\xB8\xA1",		"\xC2" => "\xE0\xB8\xA2",		"\xC3" => "\xE0\xB8\xA3",		"\xC4" => "\xE0\xB8\xA4",		"\xC5" => "\xE0\xB8\xA5",		"\xC6" => "\xE0\xB8\xA6",		"\xC7" => "\xE0\xB8\xA7",		"\xC8" => "\xE0\xB8\xA8",		"\xC9" => "\xE0\xB8\xA9",		"\xCA" => "\xE0\xB8\xAA",		"\xCB" => "\xE0\xB8\xAB",		"\xCC" => "\xE0\xB8\xAC",		"\xCD" => "\xE0\xB8\xAD",		"\xCE" => "\xE0\xB8\xAE",		"\xCF" => "\xE0\xB8\xAF",		"\xD0" => "\xE0\xB8\xB0",		"\xD1" => "\xE0\xB8\xB1",		"\xD2" => "\xE0\xB8\xB2",		"\xD3" => "\xE0\xB8\xB3",		"\xD4" => "\xE0\xB8\xB4",		"\xD5" => "\xE0\xB8\xB5",		"\xD6" => "\xE0\xB8\xB6",		"\xD7" => "\xE0\xB8\xB7",		"\xD8" => "\xE0\xB8\xB8",		"\xD9" => "\xE0\xB8\xB9",		"\xDA" => "\xE0\xB8\xBA",		"\xDF" => "\xE0\xB8\xBF",		"\xE0" => "\xE0\xB9\x80",		"\xE1" => "\xE0\xB9\x81",		"\xE2" => "\xE0\xB9\x82",		"\xE3" => "\xE0\xB9\x83",		"\xE4" => "\xE0\xB9\x84",		"\xE5" => "\xE0\xB9\x85",		"\xE6" => "\xE0\xB9\x86",		"\xE7" => "\xE0\xB9\x87",		"\xE8" => "\xE0\xB9\x88",		"\xE9" => "\xE0\xB9\x89",		"\xEA" => "\xE0\xB9\x8A",		"\xEB" => "\xE0\xB9\x8B",		"\xEC" => "\xE0\xB9\x8C",		"\xED" => "\xE0\xB9\x8D",		"\xEE" => "\xE0\xB9\x8E",		"\xEF" => "\xE0\xB9\x8F",		"\xF0" => "\xE0\xB9\x90",		"\xF1" => "\xE0\xB9\x91",		"\xF2" => "\xE0\xB9\x92",		"\xF3" => "\xE0\xB9\x93",		"\xF4" => "\xE0\xB9\x94",		"\xF5" => "\xE0\xB9\x95",		"\xF6" => "\xE0\xB9\x96",		"\xF7" => "\xE0\xB9\x97",		"\xF8" => "\xE0\xB9\x98",		"\xF9" => "\xE0\xB9\x99",		"\xFA" => "\xE0\xB9\x9A",		"\xFB" => "\xE0\xB9\x9B",	);	return strtr($string, $transform);}function cp1250($string){	static $transform = array(		"\x80" => "\xE2\x82\xAC",		"\x82" => "\xE2\x80\x9A",		"\x84" => "\xE2\x80\x9E",		"\x85" => "\xE2\x80\xA6",		"\x86" => "\xE2\x80\xA0",		"\x87" => "\xE2\x80\xA1",		"\x89" => "\xE2\x80\xB0",		"\x8A" => "\xC5\xA0",		"\x8B" => "\xE2\x80\xB9",		"\x8C" => "\xC5\x9A",		"\x8D" => "\xC5\xA4",		"\x8E" => "\xC5\xBD",		"\x8F" => "\xC5\xB9",		"\x91" => "\xE2\x80\x98",		"\x92" => "\xE2\x80\x99",		"\x93" => "\xE2\x80\x9C",		"\x94" => "\xE2\x80\x9D",		"\x95" => "\xE2\x80\xA2",		"\x96" => "\xE2\x80\x93",		"\x97" => "\xE2\x80\x94",		"\x99" => "\xE2\x84\xA2",		"\x9A" => "\xC5\xA1",		"\x9B" => "\xE2\x80\xBA",		"\x9C" => "\xC5\x9B",		"\x9D" => "\xC5\xA5",		"\x9E" => "\xC5\xBE",		"\x9F" => "\xC5\xBA",		"\xA0" => "\xC2\xA0",		"\xA1" => "\xCB\x87",		"\xA2" => "\xCB\x98",		"\xA3" => "\xC5\x81",		"\xA4" => "\xC2\xA4",		"\xA5" => "\xC4\x84",		"\xA6" => "\xC2\xA6",		"\xA7" => "\xC2\xA7",		"\xA8" => "\xC2\xA8",		"\xA9" => "\xC2\xA9",		"\xAA" => "\xC5\x9E",		"\xAB" => "\xC2\xAB",		"\xAC" => "\xC2\xAC",		"\xAD" => "\xC2\xAD",		"\xAE" => "\xC2\xAE",		"\xAF" => "\xC5\xBB",		"\xB0" => "\xC2\xB0",		"\xB1" => "\xC2\xB1",		"\xB2" => "\xCB\x9B",		"\xB3" => "\xC5\x82",		"\xB4" => "\xC2\xB4",		"\xB5" => "\xC2\xB5",		"\xB6" => "\xC2\xB6",		"\xB7" => "\xC2\xB7",		"\xB8" => "\xC2\xB8",		"\xB9" => "\xC4\x85",		"\xBA" => "\xC5\x9F",		"\xBB" => "\xC2\xBB",		"\xBC" => "\xC4\xBD",		"\xBD" => "\xCB\x9D",		"\xBE" => "\xC4\xBE",		"\xBF" => "\xC5\xBC",		"\xC0" => "\xC5\x94",		"\xC1" => "\xC3\x81",		"\xC2" => "\xC3\x82",		"\xC3" => "\xC4\x82",		"\xC4" => "\xC3\x84",		"\xC5" => "\xC4\xB9",		"\xC6" => "\xC4\x86",		"\xC7" => "\xC3\x87",		"\xC8" => "\xC4\x8C",		"\xC9" => "\xC3\x89",		"\xCA" => "\xC4\x98",		"\xCB" => "\xC3\x8B",		"\xCC" => "\xC4\x9A",		"\xCD" => "\xC3\x8D",		"\xCE" => "\xC3\x8E",		"\xCF" => "\xC4\x8E",		"\xD0" => "\xC4\x90",		"\xD1" => "\xC5\x83",		"\xD2" => "\xC5\x87",		"\xD3" => "\xC3\x93",		"\xD4" => "\xC3\x94",		"\xD5" => "\xC5\x90",		"\xD6" => "\xC3\x96",		"\xD7" => "\xC3\x97",		"\xD8" => "\xC5\x98",		"\xD9" => "\xC5\xAE",		"\xDA" => "\xC3\x9A",		"\xDB" => "\xC5\xB0",		"\xDC" => "\xC3\x9C",		"\xDD" => "\xC3\x9D",		"\xDE" => "\xC5\xA2",		"\xDF" => "\xC3\x9F",		"\xE0" => "\xC5\x95",		"\xE1" => "\xC3\xA1",		"\xE2" => "\xC3\xA2",		"\xE3" => "\xC4\x83",		"\xE4" => "\xC3\xA4",		"\xE5" => "\xC4\xBA",		"\xE6" => "\xC4\x87",		"\xE7" => "\xC3\xA7",		"\xE8" => "\xC4\x8D",		"\xE9" => "\xC3\xA9",		"\xEA" => "\xC4\x99",		"\xEB" => "\xC3\xAB",		"\xEC" => "\xC4\x9B",		"\xED" => "\xC3\xAD",		"\xEE" => "\xC3\xAE",		"\xEF" => "\xC4\x8F",		"\xF0" => "\xC4\x91",		"\xF1" => "\xC5\x84",		"\xF2" => "\xC5\x88",		"\xF3" => "\xC3\xB3",		"\xF4" => "\xC3\xB4",		"\xF5" => "\xC5\x91",		"\xF6" => "\xC3\xB6",		"\xF7" => "\xC3\xB7",		"\xF8" => "\xC5\x99",		"\xF9" => "\xC5\xAF",		"\xFA" => "\xC3\xBA",		"\xFB" => "\xC5\xB1",		"\xFC" => "\xC3\xBC",		"\xFD" => "\xC3\xBD",		"\xFE" => "\xC5\xA3",		"\xFF" => "\xCB\x99",	);	return strtr($string, $transform);}function cp1251($string){	static $transform = array(		"\x80" => "\xD0\x82",		"\x81" => "\xD0\x83",		"\x82" => "\xE2\x80\x9A",		"\x83" => "\xD1\x93",		"\x84" => "\xE2\x80\x9E",		"\x85" => "\xE2\x80\xA6",		"\x86" => "\xE2\x80\xA0",		"\x87" => "\xE2\x80\xA1",		"\x88" => "\xE2\x82\xAC",		"\x89" => "\xE2\x80\xB0",		"\x8A" => "\xD0\x89",		"\x8B" => "\xE2\x80\xB9",		"\x8C" => "\xD0\x8A",		"\x8D" => "\xD0\x8C",		"\x8E" => "\xD0\x8B",		"\x8F" => "\xD0\x8F",		"\x90" => "\xD1\x92",		"\x91" => "\xE2\x80\x98",		"\x92" => "\xE2\x80\x99",		"\x93" => "\xE2\x80\x9C",		"\x94" => "\xE2\x80\x9D",		"\x95" => "\xE2\x80\xA2",		"\x96" => "\xE2\x80\x93",		"\x97" => "\xE2\x80\x94",		"\x99" => "\xE2\x84\xA2",		"\x9A" => "\xD1\x99",		"\x9B" => "\xE2\x80\xBA",		"\x9C" => "\xD1\x9A",		"\x9D" => "\xD1\x9C",		"\x9E" => "\xD1\x9B",		"\x9F" => "\xD1\x9F",		"\xA0" => "\xC2\xA0",		"\xA1" => "\xD0\x8E",		"\xA2" => "\xD1\x9E",		"\xA3" => "\xD0\x88",		"\xA4" => "\xC2\xA4",		"\xA5" => "\xD2\x90",		"\xA6" => "\xC2\xA6",		"\xA7" => "\xC2\xA7",		"\xA8" => "\xD0\x81",		"\xA9" => "\xC2\xA9",		"\xAA" => "\xD0\x84",		"\xAB" => "\xC2\xAB",		"\xAC" => "\xC2\xAC",		"\xAD" => "\xC2\xAD",		"\xAE" => "\xC2\xAE",		"\xAF" => "\xD0\x87",		"\xB0" => "\xC2\xB0",		"\xB1" => "\xC2\xB1",		"\xB2" => "\xD0\x86",		"\xB3" => "\xD1\x96",		"\xB4" => "\xD2\x91",		"\xB5" => "\xC2\xB5",		"\xB6" => "\xC2\xB6",		"\xB7" => "\xC2\xB7",		"\xB8" => "\xD1\x91",		"\xB9" => "\xE2\x84\x96",		"\xBA" => "\xD1\x94",		"\xBB" => "\xC2\xBB",		"\xBC" => "\xD1\x98",		"\xBD" => "\xD0\x85",		"\xBE" => "\xD1\x95",		"\xBF" => "\xD1\x97",		"\xC0" => "\xD0\x90",		"\xC1" => "\xD0\x91",		"\xC2" => "\xD0\x92",		"\xC3" => "\xD0\x93",		"\xC4" => "\xD0\x94",		"\xC5" => "\xD0\x95",		"\xC6" => "\xD0\x96",		"\xC7" => "\xD0\x97",		"\xC8" => "\xD0\x98",		"\xC9" => "\xD0\x99",		"\xCA" => "\xD0\x9A",		"\xCB" => "\xD0\x9B",		"\xCC" => "\xD0\x9C",		"\xCD" => "\xD0\x9D",		"\xCE" => "\xD0\x9E",		"\xCF" => "\xD0\x9F",		"\xD0" => "\xD0\xA0",		"\xD1" => "\xD0\xA1",		"\xD2" => "\xD0\xA2",		"\xD3" => "\xD0\xA3",		"\xD4" => "\xD0\xA4",		"\xD5" => "\xD0\xA5",		"\xD6" => "\xD0\xA6",		"\xD7" => "\xD0\xA7",		"\xD8" => "\xD0\xA8",		"\xD9" => "\xD0\xA9",		"\xDA" => "\xD0\xAA",		"\xDB" => "\xD0\xAB",		"\xDC" => "\xD0\xAC",		"\xDD" => "\xD0\xAD",		"\xDE" => "\xD0\xAE",		"\xDF" => "\xD0\xAF",		"\xE0" => "\xD0\xB0",		"\xE1" => "\xD0\xB1",		"\xE2" => "\xD0\xB2",		"\xE3" => "\xD0\xB3",		"\xE4" => "\xD0\xB4",		"\xE5" => "\xD0\xB5",		"\xE6" => "\xD0\xB6",		"\xE7" => "\xD0\xB7",		"\xE8" => "\xD0\xB8",		"\xE9" => "\xD0\xB9",		"\xEA" => "\xD0\xBA",		"\xEB" => "\xD0\xBB",		"\xEC" => "\xD0\xBC",		"\xED" => "\xD0\xBD",		"\xEE" => "\xD0\xBE",		"\xEF" => "\xD0\xBF",		"\xF0" => "\xD1\x80",		"\xF1" => "\xD1\x81",		"\xF2" => "\xD1\x82",		"\xF3" => "\xD1\x83",		"\xF4" => "\xD1\x84",		"\xF5" => "\xD1\x85",		"\xF6" => "\xD1\x86",		"\xF7" => "\xD1\x87",		"\xF8" => "\xD1\x88",		"\xF9" => "\xD1\x89",		"\xFA" => "\xD1\x8A",		"\xFB" => "\xD1\x8B",		"\xFC" => "\xD1\x8C",		"\xFD" => "\xD1\x8D",		"\xFE" => "\xD1\x8E",		"\xFF" => "\xD1\x8F",	);	return strtr($string, $transform);}function cp1252($string){	static $transform = array(		"\xC2\x80" => "\xE2\x82\xAC",		"\xC2\x82" => "\xE2\x80\x9A",		"\xC2\x83" => "\xC6\x92",		"\xC2\x84" => "\xE2\x80\x9E",		"\xC2\x85" => "\xE2\x80\xA6",		"\xC2\x86" => "\xE2\x80\xA0",		"\xC2\x87" => "\xE2\x80\xA1",		"\xC2\x88" => "\xCB\x86",		"\xC2\x89" => "\xE2\x80\xB0",		"\xC2\x8A" => "\xC5\xA0",		"\xC2\x8B" => "\xE2\x80\xB9",		"\xC2\x8C" => "\xC5\x92",		"\xC2\x8E" => "\xC5\xBD",		"\xC2\x91" => "\xE2\x80\x98",		"\xC2\x92" => "\xE2\x80\x99",		"\xC2\x93" => "\xE2\x80\x9C",		"\xC2\x94" => "\xE2\x80\x9D",		"\xC2\x95" => "\xE2\x80\xA2",		"\xC2\x96" => "\xE2\x80\x93",		"\xC2\x97" => "\xE2\x80\x94",		"\xC2\x98" => "\xCB\x9C",		"\xC2\x99" => "\xE2\x84\xA2",		"\xC2\x9A" => "\xC5\xA1",		"\xC2\x9B" => "\xE2\x80\xBA",		"\xC2\x9C" => "\xC5\x93",		"\xC2\x9E" => "\xC5\xBE",		"\xC2\x9F" => "\xC5\xB8"	);	return strtr(utf8_encode($string), $transform);}function cp1254($string){	static $transform = array(		"\xC2\x80" => "\xE2\x82\xAC",		"\xC2\x82" => "\xE2\x80\x9A",		"\xC2\x83" => "\xC6\x92",		"\xC2\x84" => "\xE2\x80\x9E",		"\xC2\x85" => "\xE2\x80\xA6",		"\xC2\x86" => "\xE2\x80\xA0",		"\xC2\x87" => "\xE2\x80\xA1",		"\xC2\x88" => "\xCB\x86",		"\xC2\x89" => "\xE2\x80\xB0",		"\xC2\x8A" => "\xC5\xA0",		"\xC2\x8B" => "\xE2\x80\xB9",		"\xC2\x8C" => "\xC5\x92",		"\xC2\x91" => "\xE2\x80\x98",		"\xC2\x92" => "\xE2\x80\x99",		"\xC2\x93" => "\xE2\x80\x9C",		"\xC2\x94" => "\xE2\x80\x9D",		"\xC2\x95" => "\xE2\x80\xA2",		"\xC2\x96" => "\xE2\x80\x93",		"\xC2\x97" => "\xE2\x80\x94",		"\xC2\x98" => "\xCB\x9C",		"\xC2\x99" => "\xE2\x84\xA2",		"\xC2\x9A" => "\xC5\xA1",		"\xC2\x9B" => "\xE2\x80\xBA",		"\xC2\x9C" => "\xC5\x93",		"\xC2\x9F" => "\xC5\xB8",		"\xC3\x90" => "\xC4\x9E",		"\xC3\x9D" => "\xC4\xB0",		"\xC3\x9E" => "\xC5\x9E",		"\xC3\xB0" => "\xC4\x9F",		"\xC3\xBD" => "\xC4\xB1",		"\xC3\xBE" => "\xC5\x9F",	);	return strtr(utf8_encode($string), $transform);}function cp1255($string){	static $transform = array(		"\x80" => "\xE2\x82\xAC",		"\x82" => "\xE2\x80\x9A",		"\x83" => "\xC6\x92",		"\x84" => "\xE2\x80\x9E",		"\x85" => "\xE2\x80\xA6",		"\x86" => "\xE2\x80\xA0",		"\x87" => "\xE2\x80\xA1",		"\x88" => "\xCB\x86",		"\x89" => "\xE2\x80\xB0",		"\x8B" => "\xE2\x80\xB9",		"\x91" => "\xE2\x80\x98",		"\x92" => "\xE2\x80\x99",		"\x93" => "\xE2\x80\x9C",		"\x94" => "\xE2\x80\x9D",		"\x95" => "\xE2\x80\xA2",		"\x96" => "\xE2\x80\x93",		"\x97" => "\xE2\x80\x94",		"\x98" => "\xCB\x9C",		"\x99" => "\xE2\x84\xA2",		"\x9B" => "\xE2\x80\xBA",		"\xA0" => "\xC2\xA0",		"\xA1" => "\xC2\xA1",		"\xA2" => "\xC2\xA2",		"\xA3" => "\xC2\xA3",		"\xA4" => "\xE2\x82\xAA",		"\xA5" => "\xC2\xA5",		"\xA6" => "\xC2\xA6",		"\xA7" => "\xC2\xA7",		"\xA8" => "\xC2\xA8",		"\xA9" => "\xC2\xA9",		"\xAA" => "\xC3\x97",		"\xAB" => "\xC2\xAB",		"\xAC" => "\xC2\xAC",		"\xAD" => "\xC2\xAD",		"\xAE" => "\xC2\xAE",		"\xAF" => "\xC2\xAF",		"\xB0" => "\xC2\xB0",		"\xB1" => "\xC2\xB1",		"\xB2" => "\xC2\xB2",		"\xB3" => "\xC2\xB3",		"\xB4" => "\xC2\xB4",		"\xB5" => "\xC2\xB5",		"\xB6" => "\xC2\xB6",		"\xB7" => "\xC2\xB7",		"\xB8" => "\xC2\xB8",		"\xB9" => "\xC2\xB9",		"\xBA" => "\xC3\xB7",		"\xBB" => "\xC2\xBB",		"\xBC" => "\xC2\xBC",		"\xBD" => "\xC2\xBD",		"\xBE" => "\xC2\xBE",		"\xBF" => "\xC2\xBF",		"\xC0" => "\xD6\xB0",		"\xC1" => "\xD6\xB1",		"\xC2" => "\xD6\xB2",		"\xC3" => "\xD6\xB3",		"\xC4" => "\xD6\xB4",		"\xC5" => "\xD6\xB5",		"\xC6" => "\xD6\xB6",		"\xC7" => "\xD6\xB7",		"\xC8" => "\xD6\xB8",		"\xC9" => "\xD6\xB9",		"\xCB" => "\xD6\xBB",		"\xCC" => "\xD6\xBC",		"\xCD" => "\xD6\xBD",		"\xCE" => "\xD6\xBE",		"\xCF" => "\xD6\xBF",		"\xD0" => "\xD7\x80",		"\xD1" => "\xD7\x81",		"\xD2" => "\xD7\x82",		"\xD3" => "\xD7\x83",		"\xD4" => "\xD7\xB0",		"\xD5" => "\xD7\xB1",		"\xD6" => "\xD7\xB2",		"\xD7" => "\xD7\xB3",		"\xD8" => "\xD7\xB4",		"\xE0" => "\xD7\x90",		"\xE1" => "\xD7\x91",		"\xE2" => "\xD7\x92",		"\xE3" => "\xD7\x93",		"\xE4" => "\xD7\x94",		"\xE5" => "\xD7\x95",		"\xE6" => "\xD7\x96",		"\xE7" => "\xD7\x97",		"\xE8" => "\xD7\x98",		"\xE9" => "\xD7\x99",		"\xEA" => "\xD7\x9A",		"\xEB" => "\xD7\x9B",		"\xEC" => "\xD7\x9C",		"\xED" => "\xD7\x9D",		"\xEE" => "\xD7\x9E",		"\xEF" => "\xD7\x9F",		"\xF0" => "\xD7\xA0",		"\xF1" => "\xD7\xA1",		"\xF2" => "\xD7\xA2",		"\xF3" => "\xD7\xA3",		"\xF4" => "\xD7\xA4",		"\xF5" => "\xD7\xA5",		"\xF6" => "\xD7\xA6",		"\xF7" => "\xD7\xA7",		"\xF8" => "\xD7\xA8",		"\xF9" => "\xD7\xA9",		"\xFA" => "\xD7\xAA",		"\xFD" => "\xE2\x80\x8E",		"\xFE" => "\xE2\x80\x8F",	);	return strtr($string, $transform);}function cp1256($string){	static $transform = array(		"\x80" => "\xE2\x82\xAC",		"\x81" => "\xD9\xBE",		"\x82" => "\xE2\x80\x9A",		"\x83" => "\xC6\x92",		"\x84" => "\xE2\x80\x9E",		"\x85" => "\xE2\x80\xA6",		"\x86" => "\xE2\x80\xA0",		"\x87" => "\xE2\x80\xA1",		"\x88" => "\xCB\x86",		"\x89" => "\xE2\x80\xB0",		"\x8A" => "\xD9\xB9",		"\x8B" => "\xE2\x80\xB9",		"\x8C" => "\xC5\x92",		"\x8D" => "\xDA\x86",		"\x8E" => "\xDA\x98",		"\x8F" => "\xDA\x88",		"\x90" => "\xDA\xAF",		"\x91" => "\xE2\x80\x98",		"\x92" => "\xE2\x80\x99",		"\x93" => "\xE2\x80\x9C",		"\x94" => "\xE2\x80\x9D",		"\x95" => "\xE2\x80\xA2",		"\x96" => "\xE2\x80\x93",		"\x97" => "\xE2\x80\x94",		"\x98" => "\xDA\xA9",		"\x99" => "\xE2\x84\xA2",		"\x9A" => "\xDA\x91",		"\x9B" => "\xE2\x80\xBA",		"\x9C" => "\xC5\x93",		"\x9D" => "\xE2\x80\x8C",		"\x9E" => "\xE2\x80\x8D",		"\x9F" => "\xDA\xBA",		"\xA0" => "\xC2\xA0",		"\xA1" => "\xD8\x8C",		"\xA2" => "\xC2\xA2",		"\xA3" => "\xC2\xA3",		"\xA4" => "\xC2\xA4",		"\xA5" => "\xC2\xA5",		"\xA6" => "\xC2\xA6",		"\xA7" => "\xC2\xA7",		"\xA8" => "\xC2\xA8",		"\xA9" => "\xC2\xA9",		"\xAA" => "\xDA\xBE",		"\xAB" => "\xC2\xAB",		"\xAC" => "\xC2\xAC",		"\xAD" => "\xC2\xAD",		"\xAE" => "\xC2\xAE",		"\xAF" => "\xC2\xAF",		"\xB0" => "\xC2\xB0",		"\xB1" => "\xC2\xB1",		"\xB2" => "\xC2\xB2",		"\xB3" => "\xC2\xB3",		"\xB4" => "\xC2\xB4",		"\xB5" => "\xC2\xB5",		"\xB6" => "\xC2\xB6",		"\xB7" => "\xC2\xB7",		"\xB8" => "\xC2\xB8",		"\xB9" => "\xC2\xB9",		"\xBA" => "\xD8\x9B",		"\xBB" => "\xC2\xBB",		"\xBC" => "\xC2\xBC",		"\xBD" => "\xC2\xBD",		"\xBE" => "\xC2\xBE",		"\xBF" => "\xD8\x9F",		"\xC0" => "\xDB\x81",		"\xC1" => "\xD8\xA1",		"\xC2" => "\xD8\xA2",		"\xC3" => "\xD8\xA3",		"\xC4" => "\xD8\xA4",		"\xC5" => "\xD8\xA5",		"\xC6" => "\xD8\xA6",		"\xC7" => "\xD8\xA7",		"\xC8" => "\xD8\xA8",		"\xC9" => "\xD8\xA9",		"\xCA" => "\xD8\xAA",		"\xCB" => "\xD8\xAB",		"\xCC" => "\xD8\xAC",		"\xCD" => "\xD8\xAD",		"\xCE" => "\xD8\xAE",		"\xCF" => "\xD8\xAF",		"\xD0" => "\xD8\xB0",		"\xD1" => "\xD8\xB1",		"\xD2" => "\xD8\xB2",		"\xD3" => "\xD8\xB3",		"\xD4" => "\xD8\xB4",		"\xD5" => "\xD8\xB5",		"\xD6" => "\xD8\xB6",		"\xD7" => "\xC3\x97",		"\xD8" => "\xD8\xB7",		"\xD9" => "\xD8\xB8",		"\xDA" => "\xD8\xB9",		"\xDB" => "\xD8\xBA",		"\xDC" => "\xD9\x80",		"\xDD" => "\xD9\x81",		"\xDE" => "\xD9\x82",		"\xDF" => "\xD9\x83",		"\xE0" => "\xC3\xA0",		"\xE1" => "\xD9\x84",		"\xE2" => "\xC3\xA2",		"\xE3" => "\xD9\x85",		"\xE4" => "\xD9\x86",		"\xE5" => "\xD9\x87",		"\xE6" => "\xD9\x88",		"\xE7" => "\xC3\xA7",		"\xE8" => "\xC3\xA8",		"\xE9" => "\xC3\xA9",		"\xEA" => "\xC3\xAA",		"\xEB" => "\xC3\xAB",		"\xEC" => "\xD9\x89",		"\xED" => "\xD9\x8A",		"\xEE" => "\xC3\xAE",		"\xEF" => "\xC3\xAF",		"\xF0" => "\xD9\x8B",		"\xF1" => "\xD9\x8C",		"\xF2" => "\xD9\x8D",		"\xF3" => "\xD9\x8E",		"\xF4" => "\xC3\xB4",		"\xF5" => "\xD9\x8F",		"\xF6" => "\xD9\x90",		"\xF7" => "\xC3\xB7",		"\xF8" => "\xD9\x91",		"\xF9" => "\xC3\xB9",		"\xFA" => "\xD9\x92",		"\xFB" => "\xC3\xBB",		"\xFC" => "\xC3\xBC",		"\xFD" => "\xE2\x80\x8E",		"\xFE" => "\xE2\x80\x8F",		"\xFF" => "\xDB\x92",	);	return strtr($string, $transform);}function cp1257($string){	static $transform = array(		"\x80" => "\xE2\x82\xAC",		"\x82" => "\xE2\x80\x9A",		"\x84" => "\xE2\x80\x9E",		"\x85" => "\xE2\x80\xA6",		"\x86" => "\xE2\x80\xA0",		"\x87" => "\xE2\x80\xA1",		"\x89" => "\xE2\x80\xB0",		"\x8B" => "\xE2\x80\xB9",		"\x8D" => "\xC2\xA8",		"\x8E" => "\xCB\x87",		"\x8F" => "\xC2\xB8",		"\x91" => "\xE2\x80\x98",		"\x92" => "\xE2\x80\x99",		"\x93" => "\xE2\x80\x9C",		"\x94" => "\xE2\x80\x9D",		"\x95" => "\xE2\x80\xA2",		"\x96" => "\xE2\x80\x93",		"\x97" => "\xE2\x80\x94",		"\x99" => "\xE2\x84\xA2",		"\x9B" => "\xE2\x80\xBA",		"\x9D" => "\xC2\xAF",		"\x9E" => "\xCB\x9B",		"\xA0" => "\xC2\xA0",		"\xA2" => "\xC2\xA2",		"\xA3" => "\xC2\xA3",		"\xA4" => "\xC2\xA4",		"\xA6" => "\xC2\xA6",		"\xA7" => "\xC2\xA7",		"\xA8" => "\xC3\x98",		"\xA9" => "\xC2\xA9",		"\xAA" => "\xC5\x96",		"\xAB" => "\xC2\xAB",		"\xAC" => "\xC2\xAC",		"\xAD" => "\xC2\xAD",		"\xAE" => "\xC2\xAE",		"\xAF" => "\xC3\x86",		"\xB0" => "\xC2\xB0",		"\xB1" => "\xC2\xB1",		"\xB2" => "\xC2\xB2",		"\xB3" => "\xC2\xB3",		"\xB4" => "\xC2\xB4",		"\xB5" => "\xC2\xB5",		"\xB6" => "\xC2\xB6",		"\xB7" => "\xC2\xB7",		"\xB8" => "\xC3\xB8",		"\xB9" => "\xC2\xB9",		"\xBA" => "\xC5\x97",		"\xBB" => "\xC2\xBB",		"\xBC" => "\xC2\xBC",		"\xBD" => "\xC2\xBD",		"\xBE" => "\xC2\xBE",		"\xBF" => "\xC3\xA6",		"\xC0" => "\xC4\x84",		"\xC1" => "\xC4\xAE",		"\xC2" => "\xC4\x80",		"\xC3" => "\xC4\x86",		"\xC4" => "\xC3\x84",		"\xC5" => "\xC3\x85",		"\xC6" => "\xC4\x98",		"\xC7" => "\xC4\x92",		"\xC8" => "\xC4\x8C",		"\xC9" => "\xC3\x89",		"\xCA" => "\xC5\xB9",		"\xCB" => "\xC4\x96",		"\xCC" => "\xC4\xA2",		"\xCD" => "\xC4\xB6",		"\xCE" => "\xC4\xAA",		"\xCF" => "\xC4\xBB",		"\xD0" => "\xC5\xA0",		"\xD1" => "\xC5\x83",		"\xD2" => "\xC5\x85",		"\xD3" => "\xC3\x93",		"\xD4" => "\xC5\x8C",		"\xD5" => "\xC3\x95",		"\xD6" => "\xC3\x96",		"\xD7" => "\xC3\x97",		"\xD8" => "\xC5\xB2",		"\xD9" => "\xC5\x81",		"\xDA" => "\xC5\x9A",		"\xDB" => "\xC5\xAA",		"\xDC" => "\xC3\x9C",		"\xDD" => "\xC5\xBB",		"\xDE" => "\xC5\xBD",		"\xDF" => "\xC3\x9F",		"\xE0" => "\xC4\x85",		"\xE1" => "\xC4\xAF",		"\xE2" => "\xC4\x81",		"\xE3" => "\xC4\x87",		"\xE4" => "\xC3\xA4",		"\xE5" => "\xC3\xA5",		"\xE6" => "\xC4\x99",		"\xE7" => "\xC4\x93",		"\xE8" => "\xC4\x8D",		"\xE9" => "\xC3\xA9",		"\xEA" => "\xC5\xBA",		"\xEB" => "\xC4\x97",		"\xEC" => "\xC4\xA3",		"\xED" => "\xC4\xB7",		"\xEE" => "\xC4\xAB",		"\xEF" => "\xC4\xBC",		"\xF0" => "\xC5\xA1",		"\xF1" => "\xC5\x84",		"\xF2" => "\xC5\x86",		"\xF3" => "\xC3\xB3",		"\xF4" => "\xC5\x8D",		"\xF5" => "\xC3\xB5",		"\xF6" => "\xC3\xB6",		"\xF7" => "\xC3\xB7",		"\xF8" => "\xC5\xB3",		"\xF9" => "\xC5\x82",		"\xFA" => "\xC5\x9B",		"\xFB" => "\xC5\xAB",		"\xFC" => "\xC3\xBC",		"\xFD" => "\xC5\xBC",		"\xFE" => "\xC5\xBE",		"\xFF" => "\xCB\x99",	);	return strtr($string, $transform);}function utf8_to_cp1252($string){	static $transform = array(		"\xE2\x82\xAC" => "\x80",		"\xE2\x80\x9A" => "\x82",		"\xC6\x92" => "\x83",		"\xE2\x80\x9E" => "\x84",		"\xE2\x80\xA6" => "\x85",		"\xE2\x80\xA0" => "\x86",		"\xE2\x80\xA1" => "\x87",		"\xCB\x86" => "\x88",		"\xE2\x80\xB0" => "\x89",		"\xC5\xA0" => "\x8A",		"\xE2\x80\xB9" => "\x8B",		"\xC5\x92" => "\x8C",		"\xC5\xBD" => "\x8E",		"\xE2\x80\x98" => "\x91",		"\xE2\x80\x99" => "\x92",		"\xE2\x80\x9C" => "\x93",		"\xE2\x80\x9D" => "\x94",		"\xE2\x80\xA2" => "\x95",		"\xE2\x80\x93" => "\x96",		"\xE2\x80\x94" => "\x97",		"\xCB\x9C" => "\x98",		"\xE2\x84\xA2" => "\x99",		"\xC5\xA1" => "\x9A",		"\xE2\x80\xBA" => "\x9B",		"\xC5\x93" => "\x9C",		"\xC5\xBE" => "\x9E",		"\xC5\xB8" => "\x9F",		"\xC2\xA0" => "\xA0",		"\xC2\xA1" => "\xA1",		"\xC2\xA2" => "\xA2",		"\xC2\xA3" => "\xA3",		"\xC2\xA4" => "\xA4",		"\xC2\xA5" => "\xA5",		"\xC2\xA6" => "\xA6",		"\xC2\xA7" => "\xA7",		"\xC2\xA8" => "\xA8",		"\xC2\xA9" => "\xA9",		"\xC2\xAA" => "\xAA",		"\xC2\xAB" => "\xAB",		"\xC2\xAC" => "\xAC",		"\xC2\xAD" => "\xAD",		"\xC2\xAE" => "\xAE",		"\xC2\xAF" => "\xAF",		"\xC2\xB0" => "\xB0",		"\xC2\xB1" => "\xB1",		"\xC2\xB2" => "\xB2",		"\xC2\xB3" => "\xB3",		"\xC2\xB4" => "\xB4",		"\xC2\xB5" => "\xB5",		"\xC2\xB6" => "\xB6",		"\xC2\xB7" => "\xB7",		"\xC2\xB8" => "\xB8",		"\xC2\xB9" => "\xB9",		"\xC2\xBA" => "\xBA",		"\xC2\xBB" => "\xBB",		"\xC2\xBC" => "\xBC",		"\xC2\xBD" => "\xBD",		"\xC2\xBE" => "\xBE",		"\xC2\xBF" => "\xBF",		"\xC3\x80" => "\xC0",		"\xC3\x81" => "\xC1",		"\xC3\x82" => "\xC2",		"\xC3\x83" => "\xC3",		"\xC3\x84" => "\xC4",		"\xC3\x85" => "\xC5",		"\xC3\x86" => "\xC6",		"\xC3\x87" => "\xC7",		"\xC3\x88" => "\xC8",		"\xC3\x89" => "\xC9",		"\xC3\x8A" => "\xCA",		"\xC3\x8B" => "\xCB",		"\xC3\x8C" => "\xCC",		"\xC3\x8D" => "\xCD",		"\xC3\x8E" => "\xCE",		"\xC3\x8F" => "\xCF",		"\xC3\x90" => "\xD0",		"\xC3\x91" => "\xD1",		"\xC3\x92" => "\xD2",		"\xC3\x93" => "\xD3",		"\xC3\x94" => "\xD4",		"\xC3\x95" => "\xD5",		"\xC3\x96" => "\xD6",		"\xC3\x97" => "\xD7",		"\xC3\x98" => "\xD8",		"\xC3\x99" => "\xD9",		"\xC3\x9A" => "\xDA",		"\xC3\x9B" => "\xDB",		"\xC3\x9C" => "\xDC",		"\xC3\x9D" => "\xDD",		"\xC3\x9E" => "\xDE",		"\xC3\x9F" => "\xDF",		"\xC3\xA0" => "\xE0",		"\xC3\xA1" => "\xE1",		"\xC3\xA2" => "\xE2",		"\xC3\xA3" => "\xE3",		"\xC3\xA4" => "\xE4",		"\xC3\xA5" => "\xE5",		"\xC3\xA6" => "\xE6",		"\xC3\xA7" => "\xE7",		"\xC3\xA8" => "\xE8",		"\xC3\xA9" => "\xE9",		"\xC3\xAA" => "\xEA",		"\xC3\xAB" => "\xEB",		"\xC3\xAC" => "\xEC",		"\xC3\xAD" => "\xED",		"\xC3\xAE" => "\xEE",		"\xC3\xAF" => "\xEF",		"\xC3\xB0" => "\xF0",		"\xC3\xB1" => "\xF1",		"\xC3\xB2" => "\xF2",		"\xC3\xB3" => "\xF3",		"\xC3\xB4" => "\xF4",		"\xC3\xB5" => "\xF5",		"\xC3\xB6" => "\xF6",		"\xC3\xB7" => "\xF7",		"\xC3\xB8" => "\xF8",		"\xC3\xB9" => "\xF9",		"\xC3\xBA" => "\xFA",		"\xC3\xBB" => "\xFB",		"\xC3\xBC" => "\xFC",		"\xC3\xBD" => "\xFD",		"\xC3\xBE" => "\xFE",		"\xC3\xBF" => "\xFF"	);	return strtr($string, $transform);}?>
<?php/**** @package utf* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/if (!defined('IN_PHPBB')){	exit;}/*** Some Unicode characters encoded in UTF-8** Preserved for compatibility*/define('UTF8_REPLACEMENT', "\xEF\xBF\xBD");define('UTF8_MAX', "\xF4\x8F\xBF\xBF");define('UTF8_FFFE', "\xEF\xBF\xBE");define('UTF8_FFFF', "\xEF\xBF\xBF");define('UTF8_SURROGATE_FIRST', "\xED\xA0\x80");define('UTF8_SURROGATE_LAST', "\xED\xBF\xBF");define('UTF8_HANGUL_FIRST', "\xEA\xB0\x80");define('UTF8_HANGUL_LAST', "\xED\x9E\xA3");define('UTF8_CJK_FIRST', "\xE4\xB8\x80");define('UTF8_CJK_LAST', "\xE9\xBE\xBB");define('UTF8_CJK_B_FIRST', "\xF0\xA0\x80\x80");define('UTF8_CJK_B_LAST', "\xF0\xAA\x9B\x96");// Unset global variablesunset($GLOBALS['utf_jamo_index'], $GLOBALS['utf_jamo_type'], $GLOBALS['utf_nfc_qc'], $GLOBALS['utf_combining_class'], $GLOBALS['utf_canonical_comp'], $GLOBALS['utf_canonical_decomp'], $GLOBALS['utf_nfkc_qc'], $GLOBALS['utf_compatibility_decomp']);// NFC_QC and NFKC_QC valuesdefine('UNICODE_QC_MAYBE', 0);define('UNICODE_QC_NO', 1);// Contains all the ASCII characters appearing in UTF-8, sorted by frequencydefine('UTF8_ASCII_RANGE', "\x20\x65\x69\x61\x73\x6E\x74\x72\x6F\x6C\x75\x64\x5D\x5B\x63\x6D\x70\x27\x0A\x67\x7C\x68\x76\x2E\x66\x62\x2C\x3A\x3D\x2D\x71\x31\x30\x43\x32\x2A\x79\x78\x29\x28\x4C\x39\x41\x53\x2F\x50\x22\x45\x6A\x4D\x49\x6B\x33\x3E\x35\x54\x3C\x44\x34\x7D\x42\x7B\x38\x46\x77\x52\x36\x37\x55\x47\x4E\x3B\x4A\x7A\x56\x23\x48\x4F\x57\x5F\x26\x21\x4B\x3F\x58\x51\x25\x59\x5C\x09\x5A\x2B\x7E\x5E\x24\x40\x60\x7F\x00\x01\x02\x03\x04\x05\x06\x07\x08\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F");// Contains all the tail bytes that can appear in the composition of a UTF-8 chardefine('UTF8_TRAILING_BYTES', "\xA9\xA0\xA8\x80\xAA\x99\xA7\xBB\xAB\x89\x94\x82\xB4\xA2\xAE\x83\xB0\xB9\xB8\x93\xAF\xBC\xB3\x81\xA4\xB2\x9C\xA1\xB5\xBE\xBD\xBA\x98\xAD\xB1\x84\x95\xA6\xB6\x88\x8D\x90\xB7\xBF\x92\x85\xA5\x97\x8C\x86\xA3\x8E\x9F\x8F\x87\x91\x9D\xAC\x9E\x8B\x96\x9B\x8A\x9A");// Constants used by the Hangul [de]composition algorithmsdefine('UNICODE_HANGUL_SBASE', 0xAC00);define('UNICODE_HANGUL_LBASE', 0x1100);define('UNICODE_HANGUL_VBASE', 0x1161);define('UNICODE_HANGUL_TBASE', 0x11A7);define('UNICODE_HANGUL_SCOUNT', 11172);define('UNICODE_HANGUL_LCOUNT', 19);define('UNICODE_HANGUL_VCOUNT', 21);define('UNICODE_HANGUL_TCOUNT', 28);define('UNICODE_HANGUL_NCOUNT', 588);define('UNICODE_JAMO_L', 0);define('UNICODE_JAMO_V', 1);define('UNICODE_JAMO_T', 2);/*** Unicode normalization routines** @package utf*/class utf_normalizer{	/**	* Validate, cleanup and normalize a string	*	* The ultimate convenience function! Clean up invalid UTF-8 sequences,	* and convert to Normal Form C, canonical composition.	*	* @param	string	&$str	The dirty string	* @return	string			The same string, all shiny and cleaned-up	*/	function cleanup(&$str)	{		// The string below is the list of all autorized characters, sorted by frequency in latin text		$pos = strspn($str, "\x20\x65\x69\x61\x73\x6E\x74\x72\x6F\x6C\x75\x64\x5D\x5B\x63\x6D\x70\x27\x0A\x67\x7C\x68\x76\x2E\x66\x62\x2C\x3A\x3D\x2D\x71\x31\x30\x43\x32\x2A\x79\x78\x29\x28\x4C\x39\x41\x53\x2F\x50\x22\x45\x6A\x4D\x49\x6B\x33\x3E\x35\x54\x3C\x44\x34\x7D\x42\x7B\x38\x46\x77\x52\x36\x37\x55\x47\x4E\x3B\x4A\x7A\x56\x23\x48\x4F\x57\x5F\x26\x21\x4B\x3F\x58\x51\x25\x59\x5C\x09\x5A\x2B\x7E\x5E\x24\x40\x60\x7F\x0D");		$len = strlen($str);		if ($pos == $len)		{			// ASCII strings with no special chars return immediately			return;		}		// Note: we do not check for $GLOBALS['utf_canonical_decomp']. It is assumed they are always loaded together		if (!isset($GLOBALS['utf_nfc_qc']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_nfc_qc.' . $phpEx);		}		if (!isset($GLOBALS['utf_canonical_decomp']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_canonical_decomp.' . $phpEx);		}		// Replace any byte in the range 0x00..0x1F, except for \r, \n and \t		// We replace those characters with a 0xFF byte, which is illegal in UTF-8 and will in turn be replaced with a UTF replacement char		$str = strtr(			$str,			"\x00\x01\x02\x03\x04\x05\x06\x07\x08\x0B\x0C\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F",			"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"		);		$str = utf_normalizer::recompose($str, $pos, $len, $GLOBALS['utf_nfc_qc'], $GLOBALS['utf_canonical_decomp']);	}	/**	* Validate and normalize a UTF string to NFC	*	* @param	string	&$str	Unchecked UTF string	* @return	string			The string, validated and in normal form	*/	function nfc(&$str)	{		$pos = strspn($str, UTF8_ASCII_RANGE);		$len = strlen($str);		if ($pos == $len)		{			// ASCII strings return immediately			return;		}		if (!isset($GLOBALS['utf_nfc_qc']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_nfc_qc.' . $phpEx);		}		if (!isset($GLOBALS['utf_canonical_decomp']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_canonical_decomp.' . $phpEx);		}		$str = utf_normalizer::recompose($str, $pos, $len, $GLOBALS['utf_nfc_qc'], $GLOBALS['utf_canonical_decomp']);	}	/**	* Validate and normalize a UTF string to NFKC	*	* @param	string	&$str	Unchecked UTF string	* @return	string			The string, validated and in normal form	*/	function nfkc(&$str)	{		$pos = strspn($str, UTF8_ASCII_RANGE);		$len = strlen($str);		if ($pos == $len)		{			// ASCII strings return immediately			return;		}		if (!isset($GLOBALS['utf_nfkc_qc']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_nfkc_qc.' . $phpEx);		}		if (!isset($GLOBALS['utf_compatibility_decomp']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_compatibility_decomp.' . $phpEx);		}		$str = utf_normalizer::recompose($str, $pos, $len, $GLOBALS['utf_nfkc_qc'], $GLOBALS['utf_compatibility_decomp']);	}	/**	* Validate and normalize a UTF string to NFD	*	* @param	string	&$str	Unchecked UTF string	* @return	string			The string, validated and in normal form	*/	function nfd(&$str)	{		$pos = strspn($str, UTF8_ASCII_RANGE);		$len = strlen($str);		if ($pos == $len)		{			// ASCII strings return immediately			return;		}		if (!isset($GLOBALS['utf_canonical_decomp']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_canonical_decomp.' . $phpEx);		}		$str = utf_normalizer::decompose($str, $pos, $len, $GLOBALS['utf_canonical_decomp']);	}	/**	* Validate and normalize a UTF string to NFKD	*	* @param	string	&$str	Unchecked UTF string	* @return	string			The string, validated and in normal form	*/	function nfkd(&$str)	{		$pos = strspn($str, UTF8_ASCII_RANGE);		$len = strlen($str);		if ($pos == $len)		{			// ASCII strings return immediately			return;		}		if (!isset($GLOBALS['utf_compatibility_decomp']))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_compatibility_decomp.' . $phpEx);		}		$str = utf_normalizer::decompose($str, $pos, $len, $GLOBALS['utf_compatibility_decomp']);	}	/**	* Recompose a UTF string	*	* @param	string	$str			Unchecked UTF string	* @param	integer	$pos			Position of the first UTF char (in bytes)	* @param	integer	$len			Length of the string (in bytes)	* @param	array	&$qc			Quick-check array, passed by reference but never modified	* @param	array	&$decomp_map	Decomposition mapping, passed by reference but never modified	* @return	string					The string, validated and recomposed	*	* @access	private	*/	function recompose($str, $pos, $len, &$qc, &$decomp_map)	{		global $utf_combining_class, $utf_canonical_comp, $utf_jamo_type, $utf_jamo_index;		// Load some commonly-used tables		if (!isset($utf_jamo_index, $utf_jamo_type, $utf_combining_class))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_normalizer_common.' . $phpEx);		}		// Load the canonical composition table		if (!isset($utf_canonical_comp))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_canonical_comp.' . $phpEx);		}		// Buffer the last ASCII char before the UTF-8 stuff if applicable		$tmp = '';		$i = $tmp_pos = $last_cc = 0;		$buffer = ($pos) ? array(++$i => $str[$pos - 1]) : array();		// UTF char length array		// This array is used to determine the length of a UTF character.		// Be $c the result of ($str[$pos] & "\xF0") --where $str is the string we're operating on and $pos		// the position of the cursor--, if $utf_len_mask[$c] does not exist, the byte is an ASCII char.		// Otherwise, if $utf_len_mask[$c] is greater than 0, we have a the leading byte of a multibyte character		// whose length is $utf_len_mask[$c] and if it is equal to 0, the byte is a trailing byte.		$utf_len_mask = array(			// Leading bytes masks			"\xC0" => 2, "\xD0" => 2, "\xE0" => 3, "\xF0" => 4,			// Trailing bytes masks			"\x80" => 0, "\x90" => 0, "\xA0" => 0, "\xB0" => 0		);		$extra_check = array(			"\xED" => 1, "\xEF" => 1, "\xC0" => 1, "\xC1" => 1, "\xE0" => 1, "\xF0" => 1,			"\xF4" => 1, "\xF5" => 1, "\xF6" => 1, "\xF7" => 1, "\xF8" => 1, "\xF9" => 1,			"\xFA" => 1, "\xFB" => 1, "\xFC" => 1, "\xFD" => 1, "\xFE" => 1, "\xFF" => 1		);		$utf_validation_mask = array(			2	=> "\xE0\xC0",			3	=> "\xF0\xC0\xC0",			4	=> "\xF8\xC0\xC0\xC0"		);		$utf_validation_check = array(			2	=> "\xC0\x80",			3	=> "\xE0\x80\x80",			4	=> "\xF0\x80\x80\x80"		);		// Main loop		do		{			// STEP 0: Capture the current char and buffer it			$c = $str[$pos];			$c_mask = $c & "\xF0";			if (isset($utf_len_mask[$c_mask]))			{				// Byte at $pos is either a leading byte or a missplaced trailing byte				if ($utf_len = $utf_len_mask[$c_mask])				{					// Capture the char					$buffer[++$i & 7] = $utf_char = substr($str, $pos, $utf_len);					// Let's find out if a thorough check is needed					if (isset($qc[$utf_char]))					{						// If the UTF char is in the qc array then it may not be in normal form. We do nothing here, the actual processing is below this "if" block					}					else if (isset($utf_combining_class[$utf_char]))					{						if ($utf_combining_class[$utf_char] < $last_cc)						{							// A combining character that is NOT canonically ordered						}						else						{							// A combining character that IS canonically ordered, skip to the next char							$last_cc = $utf_combining_class[$utf_char];							$pos += $utf_len;							continue;						}					}					else					{						// At this point, $utf_char holds a UTF char that we know is not a NF[K]C_QC and is not a combining character.						// It can be a singleton, a canonical composite, a replacement char or an even an ill-formed bunch of bytes. Let's find out						$last_cc = 0;						// Check that we have the correct number of trailing bytes						if (($utf_char & $utf_validation_mask[$utf_len]) != $utf_validation_check[$utf_len])						{							// Current char isn't well-formed or legal: either one or several trailing bytes are missing, or the Unicode char							// has been encoded in a five- or six- byte sequence							if ($utf_char[0] >= "\xF8")							{								if ($utf_char[0] < "\xFC")								{									$trailing_bytes = 4;								}								else if ($utf_char[0] > "\xFD")								{									$trailing_bytes = 0;								}								else								{									$trailing_bytes = 5;								}							}							else							{								$trailing_bytes = $utf_len - 1;							}							$tmp .= substr($str, $tmp_pos, $pos - $tmp_pos) . UTF8_REPLACEMENT;							$pos += strspn($str, UTF8_TRAILING_BYTES, ++$pos, $trailing_bytes);							$tmp_pos = $pos;							continue;						}						if (isset($extra_check[$c]))						{							switch ($c)							{								// Note: 0xED is quite common in Korean								case "\xED":									if ($utf_char >= "\xED\xA0\x80")									{										// Surrogates (U+D800..U+DFFF) are not allowed in UTF-8 (UTF sequence 0xEDA080..0xEDBFBF)										$tmp .= substr($str, $tmp_pos, $pos - $tmp_pos) . UTF8_REPLACEMENT;										$pos += $utf_len;										$tmp_pos = $pos;										continue 2;									}								break;								// Note: 0xEF is quite common in Japanese								case "\xEF":									if ($utf_char == "\xEF\xBF\xBE" || $utf_char == "\xEF\xBF\xBF")									{										// U+FFFE and U+FFFF are explicitly disallowed (UTF sequence 0xEFBFBE..0xEFBFBF)										$tmp .= substr($str, $tmp_pos, $pos - $tmp_pos) . UTF8_REPLACEMENT;										$pos += $utf_len;										$tmp_pos = $pos;										continue 2;									}								break;								case "\xC0":								case "\xC1":									if ($utf_char <= "\xC1\xBF")									{										// Overlong sequence: Unicode char U+0000..U+007F encoded as a double-byte UTF char										$tmp .= substr($str, $tmp_pos, $pos - $tmp_pos) . UTF8_REPLACEMENT;										$pos += $utf_len;										$tmp_pos = $pos;										continue 2;									}								break;								case "\xE0":									if ($utf_char <= "\xE0\x9F\xBF")									{										// Unicode char U+0000..U+07FF encoded in 3 bytes										$tmp .= substr($str, $tmp_pos, $pos - $tmp_pos) . UTF8_REPLACEMENT;										$pos += $utf_len;										$tmp_pos = $pos;										continue 2;									}								break;								case "\xF0":									if ($utf_char <= "\xF0\x8F\xBF\xBF")									{										// Unicode char U+0000..U+FFFF encoded in 4 bytes										$tmp .= substr($str, $tmp_pos, $pos - $tmp_pos) . UTF8_REPLACEMENT;										$pos += $utf_len;										$tmp_pos = $pos;										continue 2;									}								break;								default:									// Five- and six- byte sequences do not need being checked for here anymore									if ($utf_char > UTF8_MAX)									{										// Out of the Unicode range										if ($utf_char[0] < "\xF8")										{											$trailing_bytes = 3;										}										else if ($utf_char[0] < "\xFC")										{											$trailing_bytes = 4;										}										else if ($utf_char[0] > "\xFD")										{											$trailing_bytes = 0;										}										else										{											$trailing_bytes = 5;										}										$tmp .= substr($str, $tmp_pos, $pos - $tmp_pos) . UTF8_REPLACEMENT;										$pos += strspn($str, UTF8_TRAILING_BYTES, ++$pos, $trailing_bytes);										$tmp_pos = $pos;										continue 2;									}								break;							}						}						// The char is a valid starter, move the cursor and go on						$pos += $utf_len;						continue;					}				}				else				{					// A trailing byte came out of nowhere, we will advance the cursor and treat the this byte and all following trailing bytes as if					// each of them was a Unicode replacement char					$spn = strspn($str, UTF8_TRAILING_BYTES, $pos);					$tmp .= substr($str, $tmp_pos, $pos - $tmp_pos) . str_repeat(UTF8_REPLACEMENT, $spn);					$pos += $spn;					$tmp_pos = $pos;					continue;				}				// STEP 1: Decompose current char				// We have found a character that is either:				//  - in the NFC_QC/NFKC_QC list				//  - a non-starter char that is not canonically ordered				//				// We are going to capture the shortest UTF sequence that satisfies these two conditions:				//				//  1 - If the sequence does not start at the begginning of the string, it must begin with a starter,				// and that starter must not have the NF[K]C_QC property equal to "MAYBE"				//				//  2 - If the sequence does not end at the end of the string, it must end with a non-starter and be				// immediately followed by a starter that is not on the QC list				//				$utf_seq = array();				$last_cc = 0;				$lpos = $pos;				$pos += $utf_len;				if (isset($decomp_map[$utf_char]))				{					$_pos = 0;					$_len = strlen($decomp_map[$utf_char]);					do					{						$_utf_len =& $utf_len_mask[$decomp_map[$utf_char][$_pos] & "\xF0"];						if (isset($_utf_len))						{							$utf_seq[] = substr($decomp_map[$utf_char], $_pos, $_utf_len);							$_pos += $_utf_len;						}						else						{							$utf_seq[] = $decomp_map[$utf_char][$_pos];							++$_pos;						}					}					while ($_pos < $_len);				}				else				{					// The char is not decomposable					$utf_seq = array($utf_char);				}				// STEP 2: Capture the starter				// Check out the combining class of the first character of the UTF sequence				$k = 0;				if (isset($utf_combining_class[$utf_seq[0]]) || $qc[$utf_char] == UNICODE_QC_MAYBE)				{					// Not a starter, inspect previous characters					// The last 8 characters are kept in a buffer so that we don't have to capture them everytime.					// This is enough for all real-life strings but even if it wasn't, we can capture characters in backward mode,					// although it is slower than this method.					//					// In the following loop, $j starts at the previous buffered character ($i - 1, because current character is					// at offset $i) and process them in backward mode until we find a starter.					//					// $k is the index on each UTF character inside of our UTF sequence. At this time, $utf_seq contains one or more					// characters numbered 0 to n. $k starts at 0 and for each char we prepend we pre-decrement it and for numbering					$starter_found = 0;					$j_min = max(1, $i - 7);					for ($j = $i - 1; $j >= $j_min && $lpos > $tmp_pos; --$j)					{						$utf_char = $buffer[$j & 7];						$lpos -= strlen($utf_char);						if (isset($decomp_map[$utf_char]))						{							// The char is a composite, decompose for storage							$decomp_seq = array();							$_pos = 0;							$_len = strlen($decomp_map[$utf_char]);							do							{								$c = $decomp_map[$utf_char][$_pos];								$_utf_len =& $utf_len_mask[$c & "\xF0"];								if (isset($_utf_len))								{									$decomp_seq[] = substr($decomp_map[$utf_char], $_pos, $_utf_len);									$_pos += $_utf_len;								}								else								{									$decomp_seq[] = $c;									++$_pos;								}							}							while ($_pos < $_len);							// Prepend the UTF sequence with our decomposed sequence							if (isset($decomp_seq[1]))							{								// The char expanded into several chars								$decomp_cnt = sizeof($decomp_seq);								foreach ($decomp_seq as $decomp_i => $decomp_char)								{									$utf_seq[$k + $decomp_i - $decomp_cnt] = $decomp_char;								}								$k -= $decomp_cnt;							}							else							{								// Decomposed to a single char, easier to prepend								$utf_seq[--$k] = $decomp_seq[0];							}						}						else						{							$utf_seq[--$k] = $utf_char;						}						if (!isset($utf_combining_class[$utf_seq[$k]]))						{							// We have found our starter							$starter_found = 1;							break;						}					}					if (!$starter_found && $lpos > $tmp_pos)					{						// The starter was not found in the buffer, let's rewind some more						do						{							// $utf_len_mask contains the masks of both leading bytes and trailing bytes. If $utf_en > 0 then it's a leading byte, otherwise it's a trailing byte.							$c = $str[--$lpos];							$c_mask = $c & "\xF0";							if (isset($utf_len_mask[$c_mask]))							{								// UTF byte								if ($utf_len = $utf_len_mask[$c_mask])								{									// UTF *leading* byte									$utf_char = substr($str, $lpos, $utf_len);									if (isset($decomp_map[$utf_char]))									{										// Decompose the character										$decomp_seq = array();										$_pos = 0;										$_len = strlen($decomp_map[$utf_char]);										do										{											$c = $decomp_map[$utf_char][$_pos];											$_utf_len =& $utf_len_mask[$c & "\xF0"];											if (isset($_utf_len))											{												$decomp_seq[] = substr($decomp_map[$utf_char], $_pos, $_utf_len);												$_pos += $_utf_len;											}											else											{												$decomp_seq[] = $c;												++$_pos;											}										}										while ($_pos < $_len);										// Prepend the UTF sequence with our decomposed sequence										if (isset($decomp_seq[1]))										{											// The char expanded into several chars											$decomp_cnt = sizeof($decomp_seq);											foreach ($decomp_seq as $decomp_i => $utf_char)											{												$utf_seq[$k + $decomp_i - $decomp_cnt] = $utf_char;											}											$k -= $decomp_cnt;										}										else										{											// Decomposed to a single char, easier to prepend											$utf_seq[--$k] = $decomp_seq[0];										}									}									else									{										$utf_seq[--$k] = $utf_char;									}								}							}							else							{								// ASCII char								$utf_seq[--$k] = $c;							}						}						while ($lpos > $tmp_pos);					}				}				// STEP 3: Capture following combining modifiers				while ($pos < $len)				{					$c_mask = $str[$pos] & "\xF0";					if (isset($utf_len_mask[$c_mask]))					{						if ($utf_len = $utf_len_mask[$c_mask])						{							$utf_char = substr($str, $pos, $utf_len);						}						else						{							// A trailing byte came out of nowhere							// Trailing bytes are replaced with Unicode replacement chars, we will just ignore it for now, break out of the loop							// as if it was a starter (replacement chars ARE starters) and let the next loop replace it							break;						}						if (isset($utf_combining_class[$utf_char]) || isset($qc[$utf_char]))						{							// Combining character, add it to the sequence and move the cursor							if (isset($decomp_map[$utf_char]))							{								// Decompose the character								$_pos = 0;								$_len = strlen($decomp_map[$utf_char]);								do								{									$c = $decomp_map[$utf_char][$_pos];									$_utf_len =& $utf_len_mask[$c & "\xF0"];									if (isset($_utf_len))									{										$utf_seq[] = substr($decomp_map[$utf_char], $_pos, $_utf_len);										$_pos += $_utf_len;									}									else									{										$utf_seq[] = $c;										++$_pos;									}								}								while ($_pos < $_len);							}							else							{								$utf_seq[] = $utf_char;							}							$pos += $utf_len;						}						else						{							// Combining class 0 and no QC, break out of the loop							// Note: we do not know if that character is valid. If it's not, the next iteration will replace it							break;						}					}					else					{						// ASCII chars are starters						break;					}				}				// STEP 4: Sort and combine				// Here we sort...				$k_max = $k + sizeof($utf_seq);				if (!$k && $k_max == 1)				{					// There is only one char in the UTF sequence, add it then jump to the next iteration of main loop						// Note: the two commented lines below can be enabled under PHP5 for a very small performance gain in most cases//						if (substr_compare($str, $utf_seq[0], $lpos, $pos - $lpos))//						{						$tmp .= substr($str, $tmp_pos, $lpos - $tmp_pos) . $utf_seq[0];						$tmp_pos = $pos;//						}					continue;				}				// ...there we combine				if (isset($utf_combining_class[$utf_seq[$k]]))				{					$starter = $nf_seq = '';				}				else				{					$starter = $utf_seq[$k++];					$nf_seq = '';				}				$utf_sort = array();				// We add an empty char at the end of the UTF char sequence. It will act as a starter and trigger the sort/combine routine				// at the end of the string without altering it				$utf_seq[] = '';				do				{					$utf_char = $utf_seq[$k++];					if (isset($utf_combining_class[$utf_char]))					{						$utf_sort[$utf_combining_class[$utf_char]][] = $utf_char;					}					else					{						if (empty($utf_sort))						{							// No combining characters... check for a composite of the two starters							if (isset($utf_canonical_comp[$starter . $utf_char]))							{								// Good ol' composite character								$starter = $utf_canonical_comp[$starter . $utf_char];							}							else if (isset($utf_jamo_type[$utf_char]))							{								// Current char is a composable jamo								if (isset($utf_jamo_type[$starter]) && $utf_jamo_type[$starter] == UNICODE_JAMO_L && $utf_jamo_type[$utf_char] == UNICODE_JAMO_V)								{									// We have a L jamo followed by a V jamo, we are going to prefetch the next char to see if it's a T jamo									if (isset($utf_jamo_type[$utf_seq[$k]]) && $utf_jamo_type[$utf_seq[$k]] == UNICODE_JAMO_T)									{										// L+V+T jamos, combine to a LVT Hangul syllable ($k is incremented)										$cp = $utf_jamo_index[$starter] + $utf_jamo_index[$utf_char] + $utf_jamo_index[$utf_seq[$k]];										++$k;									}									else									{										// L+V jamos, combine to a LV Hangul syllable										$cp = $utf_jamo_index[$starter] + $utf_jamo_index[$utf_char];									}									$starter = chr(0xE0 | ($cp >> 12)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));								}								else								{									// Non-composable jamo, just add it to the sequence									$nf_seq .= $starter;									$starter = $utf_char;								}							}							else							{								// No composite, just add the first starter to the sequence then continue with the other one								$nf_seq .= $starter;								$starter = $utf_char;							}						}						else						{							ksort($utf_sort);							// For each class of combining characters							foreach ($utf_sort as $cc => $utf_chars)							{								$j = 0;								do								{									// Look for a composite									if (isset($utf_canonical_comp[$starter . $utf_chars[$j]]))									{										// Found a composite, replace the starter										$starter = $utf_canonical_comp[$starter . $utf_chars[$j]];										unset($utf_sort[$cc][$j]);									}									else									{										// No composite, all following characters in that class are blocked										break;									}								}								while (isset($utf_sort[$cc][++$j]));							}							// Add the starter to the normalized sequence, followed by non-starters in canonical order							$nf_seq .= $starter;							foreach ($utf_sort as $utf_chars)							{								if (!empty($utf_chars))								{									$nf_seq .= implode('', $utf_chars);								}							}							// Reset the array and go on							$utf_sort = array();							$starter = $utf_char;						}					}				}				while ($k <= $k_max);				$tmp .= substr($str, $tmp_pos, $lpos - $tmp_pos) . $nf_seq;				$tmp_pos = $pos;			}			else			{				// Only a ASCII char can make the program get here				//				// First we skip the current byte with ++$pos, then we quickly skip following ASCII chars with strspn().				//				// The first two "if"'s here can be removed, with the consequences of being faster on latin text (lots of ASCII) and slower on				// multi-byte text (where the only ASCII chars are spaces and punctuation)				if (++$pos != $len)				{					if ($str[$pos] < "\x80")					{						$pos += strspn($str, UTF8_ASCII_RANGE, ++$pos);						$buffer[++$i & 7] = $str[$pos - 1];					}					else					{						$buffer[++$i & 7] = $c;					}				}			}		}		while ($pos < $len);		// Now is time to return the string		if ($tmp_pos)		{			// If the $tmp_pos cursor is not at the beggining of the string then at least one character was not in normal form. Replace $str with the fixed version			if ($tmp_pos == $len)			{				// The $tmp_pos cursor is at the end of $str, therefore $tmp holds the whole $str				return $tmp;			}			else			{				// The rightmost chunk of $str has not been appended to $tmp yet				return $tmp . substr($str, $tmp_pos);			}		}		// The string was already in normal form		return $str;	}	/**	* Decompose a UTF string	*	* @param	string	$str			UTF string	* @param	integer	$pos			Position of the first UTF char (in bytes)	* @param	integer	$len			Length of the string (in bytes)	* @param	array	&$decomp_map	Decomposition mapping, passed by reference but never modified	* @return	string					The string, decomposed and sorted canonically	*	* @access	private	*/	function decompose($str, $pos, $len, &$decomp_map)	{		global $utf_combining_class;		// Load some commonly-used tables		if (!isset($utf_combining_class))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/utf/data/utf_normalizer_common.' . $phpEx);		}		// UTF char length array		$utf_len_mask = array(			// Leading bytes masks			"\xC0" => 2, "\xD0" => 2, "\xE0" => 3, "\xF0" => 4,			// Trailing bytes masks			"\x80" => 0, "\x90" => 0, "\xA0" => 0, "\xB0" => 0		);		// Some extra checks are triggered on the first byte of a UTF sequence		$extra_check = array(			"\xED" => 1, "\xEF" => 1, "\xC0" => 1, "\xC1" => 1, "\xE0" => 1, "\xF0" => 1,			"\xF4" => 1, "\xF5" => 1, "\xF6" => 1, "\xF7" => 1, "\xF8" => 1, "\xF9" => 1,			"\xFA" => 1, "\xFB" => 1, "\xFC" => 1, "\xFD" => 1, "\xFE" => 1, "\xFF" => 1		);		// These masks are used to check if a UTF sequence is well formed. Here are the only 3 lengths we acknowledge:		//   - 2-byte: 110? ???? 10?? ????		//   - 3-byte: 1110 ???? 10?? ???? 10?? ????		//   - 4-byte: 1111 0??? 10?? ???? 10?? ???? 10?? ????		// Note that 5- and 6- byte sequences are automatically discarded		$utf_validation_mask = array(			2	=> "\xE0\xC0",			3	=> "\xF0\xC0\xC0",			4	=> "\xF8\xC0\xC0\xC0"		);		$utf_validation_check = array(			2	=> "\xC0\x80",			3	=> "\xE0\x80\x80",			4	=> "\xF0\x80\x80\x80"		);		$tmp = '';		$starter_pos = $pos;		$tmp_pos = $last_cc = $sort = $dump = 0;		$utf_sort = array();		// Main loop		do		{			// STEP 0: Capture the current char			$cur_mask = $str[$pos] & "\xF0";			if (isset($utf_len_mask[$cur_mask]))			{				if ($utf_len = $utf_len_mask[$cur_mask])				{					// Multibyte char					$utf_char = substr($str, $pos, $utf_len);					$pos += $utf_len;				}				else				{					// A trailing byte came out of nowhere, we will treat it and all following trailing bytes as if each of them was a Unicode					// replacement char and we will advance the cursor					$spn = strspn($str, UTF8_TRAILING_BYTES, $pos);					if ($dump)					{						$tmp .= substr($str, $tmp_pos, $starter_pos - $tmp_pos);						// Dump combiners						if (!empty($utf_sort))						{							if ($sort)							{								ksort($utf_sort);							}							foreach ($utf_sort as $utf_chars)							{								$tmp .= implode('', $utf_chars);							}						}						$tmp .= str_repeat(UTF8_REPLACEMENT, $spn);						$dump = $sort = 0;					}					else					{						$tmp .= substr($str, $tmp_pos, $pos - $tmp_pos) . str_repeat(UTF8_REPLACEMENT, $spn);					}					$pos += $spn;					$tmp_pos = $starter_pos = $pos;					$utf_sort = array();					$last_cc = 0;					continue;				}				// STEP 1: Decide what to do with current char				// Now, in that order:				//  - check if that character is decomposable				//  - check if that character is a non-starter				//  - check if that character requires extra checks to be performed				if (isset($decomp_map[$utf_char]))				{					// Decompose the char					$_pos = 0;					$_len = strlen($decomp_map[$utf_char]);					do					{						$c = $decomp_map[$utf_char][$_pos];						$_utf_len =& $utf_len_mask[$c & "\xF0"];						if (isset($_utf_len))						{							$_utf_char = substr($decomp_map[$utf_char], $_pos, $_utf_len);							$_pos += $_utf_len;							if (isset($utf_combining_class[$_utf_char]))							{								// The character decomposed to a non-starter, buffer it for sorting								$utf_sort[$utf_combining_class[$_utf_char]][] = $_utf_char;								if ($utf_combining_class[$_utf_char] < $last_cc)								{									// Not canonically ordered, will require sorting									$sort = $dump = 1;								}								else								{									$dump = 1;									$last_cc = $utf_combining_class[$_utf_char];								}							}							else							{								// This character decomposition contains a starter, dump the buffer and continue								if ($dump)								{									$tmp .= substr($str, $tmp_pos, $starter_pos - $tmp_pos);									// Dump combiners									if (!empty($utf_sort))									{										if ($sort)										{											ksort($utf_sort);										}										foreach ($utf_sort as $utf_chars)										{											$tmp .= implode('', $utf_chars);										}									}									$tmp .= $_utf_char;									$dump = $sort = 0;								}								else								{									$tmp .= substr($str, $tmp_pos, $starter_pos - $tmp_pos) . $_utf_char;								}								$tmp_pos = $starter_pos = $pos;								$utf_sort = array();								$last_cc = 0;							}						}						else						{							// This character decomposition contains an ASCII char, which is a starter. Dump the buffer and continue							++$_pos;							if ($dump)							{								$tmp .= substr($str, $tmp_pos, $starter_pos - $tmp_pos);								// Dump combiners								if (!empty($utf_sort))								{									if ($sort)									{										ksort($utf_sort);									}									foreach ($utf_sort as $utf_chars)									{										$tmp .= implode('', $utf_chars);									}								}								$tmp .= $c;								$dump = $sort = 0;							}							else							{								$tmp .= substr($str, $tmp_pos, $pos - $utf_len - $tmp_pos) . $c;							}							$tmp_pos = $starter_pos = $pos;							$utf_sort = array();							$last_cc = 0;						}					}					while ($_pos < $_len);				}				else if (isset($utf_combining_class[$utf_char]))				{					// Combining character					if ($utf_combining_class[$utf_char] < $last_cc)					{						// Not in canonical order						$sort = $dump = 1;					}					else					{						$last_cc = $utf_combining_class[$utf_char];					}					$utf_sort[$utf_combining_class[$utf_char]][] = $utf_char;				}				else				{					// Non-decomposable starter, check out if it's a Hangul syllable					if ($utf_char < UTF8_HANGUL_FIRST || $utf_char > UTF8_HANGUL_LAST)					{						// Nope, regular UTF char, check that we have the correct number of trailing bytes						if (($utf_char & $utf_validation_mask[$utf_len]) != $utf_validation_check[$utf_len])						{							// Current char isn't well-formed or legal: either one or several trailing bytes are missing, or the Unicode char							// has been encoded in a five- or six- byte sequence.							// Move the cursor back to its original position then advance it to the position it should really be at							$pos -= $utf_len;							$tmp .= substr($str, $tmp_pos, $starter_pos - $tmp_pos);							if (!empty($utf_sort))							{								ksort($utf_sort);								foreach ($utf_sort as $utf_chars)								{									$tmp .= implode('', $utf_chars);								}								$utf_sort = array();							}							// Add a replacement char then another replacement char for every trailing byte.							//							// @todo I'm not entirely sure that's how we're supposed to mark invalidated byte sequences, check this							$spn = strspn($str, UTF8_TRAILING_BYTES, ++$pos);							$tmp .= str_repeat(UTF8_REPLACEMENT, $spn + 1);							$dump = $sort = 0;							$pos += $spn;							$tmp_pos = $pos;							continue;						}						if (isset($extra_check[$utf_char[0]]))						{							switch ($utf_char[0])							{								// Note: 0xED is quite common in Korean								case "\xED":									if ($utf_char >= "\xED\xA0\x80")									{										// Surrogates (U+D800..U+DFFF) are not allowed in UTF-8 (UTF sequence 0xEDA080..0xEDBFBF)										$tmp .= substr($str, $tmp_pos, $starter_pos - $tmp_pos);										if (!empty($utf_sort))										{											ksort($utf_sort);											foreach ($utf_sort as $utf_chars)											{												$tmp .= implode('', $utf_chars);											}											$utf_sort = array();										}										$tmp .= UTF8_REPLACEMENT;										$dump = $sort = 0;										$tmp_pos = $starter_pos = $pos;										continue 2;									}								break;								// Note: 0xEF is quite common in Japanese								case "\xEF":									if ($utf_char == "\xEF\xBF\xBE" || $utf_char == "\xEF\xBF\xBF")									{										// U+FFFE and U+FFFF are explicitly disallowed (UTF sequence 0xEFBFBE..0xEFBFBF)										$tmp .= substr($str, $tmp_pos, $starter_pos - $tmp_pos);										if (!empty($utf_sort))										{											ksort($utf_sort);											foreach ($utf_sort as $utf_chars)											{												$tmp .= implode('', $utf_chars);											}											$utf_sort = array();										}										$tmp .= UTF8_REPLACEMENT;										$dump = $sort = 0;										$tmp_pos = $starter_pos = $pos;										continue 2;									}								break;								case "\xC0":								case "\xC1":									if ($utf_char <= "\xC1\xBF")									{										// Overlong sequence: Unicode char U+0000..U+007F encoded as a double-byte UTF char										$tmp .= substr($str, $tmp_pos, $starter_pos - $tmp_pos);										if (!empty($utf_sort))										{											ksort($utf_sort);											foreach ($utf_sort as $utf_chars)											{												$tmp .= implode('', $utf_chars);											}											$utf_sort = array();										}										$tmp .= UTF8_REPLACEMENT;										$dump = $sort = 0;										$tmp_pos = $starter_pos = $pos;										continue 2;									}								break;								case "\xE0":									if ($utf_char <= "\xE0\x9F\xBF")									{										// Unicode char U+0000..U+07FF encoded in 3 bytes										$tmp .= substr($str, $tmp_pos, $starter_pos - $tmp_pos);										if (!empty($utf_sort))										{											ksort($utf_sort);											foreach ($utf_sort as $utf_chars)											{												$tmp .= implode('', $utf_chars);											}											$utf_sort = array();										}										$tmp .= UTF8_REPLACEMENT;										$dump = $sort = 0;										$tmp_pos = $starter_pos = $pos;										continue 2;									}								break;								case "\xF0":									if ($utf_char <= "\xF0\x8F\xBF\xBF")									{										// Unicode char U+0000..U+FFFF encoded in 4 bytes										$tmp .= substr($str, $tmp_pos, $starter_pos - $tmp_pos);										if (!empty($utf_sort))										{											ksort($utf_sort);											foreach ($utf_sort as $utf_chars)											{												$tmp .= implode('', $utf_chars);											}											$utf_sort = array();										}										$tmp .= UTF8_REPLACEMENT;										$dump = $sort = 0;										$tmp_pos = $starter_pos = $pos;										continue 2;									}								break;								default:									if ($utf_char > UTF8_MAX)									{										// Out of the Unicode range										$tmp .= substr($str, $tmp_pos, $starter_pos - $tmp_pos);										if (!empty($utf_sort))										{											ksort($utf_sort);											foreach ($utf_sort as $utf_chars)											{												$tmp .= implode('', $utf_chars);											}											$utf_sort = array();										}										$tmp .= UTF8_REPLACEMENT;										$dump = $sort = 0;										$tmp_pos = $starter_pos = $pos;										continue 2;									}								break;							}						}					}					else					{						// Hangul syllable						$idx = (((ord($utf_char[0]) & 0x0F) << 12) | ((ord($utf_char[1]) & 0x3F) << 6) | (ord($utf_char[2]) & 0x3F)) - UNICODE_HANGUL_SBASE;						// LIndex can only range from 0 to 18, therefore it cannot influence the first two bytes of the L Jamo, which allows us to hardcode them (based on LBase).						//						// The same goes for VIndex, but for TIndex there's a catch: the value of the third byte could exceed 0xBF and we would have to increment the second byte						if ($t_index = $idx % UNICODE_HANGUL_TCOUNT)						{							if ($t_index < 25)							{								$utf_char = "\xE1\x84\x00\xE1\x85\x00\xE1\x86\x00";								$utf_char[8] = chr(0xA7 + $t_index);							}							else							{								$utf_char = "\xE1\x84\x00\xE1\x85\x00\xE1\x87\x00";								$utf_char[8] = chr(0x67 + $t_index);							}						}						else						{							$utf_char = "\xE1\x84\x00\xE1\x85\x00";						}						$utf_char[2] = chr(0x80 + (int) ($idx / UNICODE_HANGUL_NCOUNT));						$utf_char[5] = chr(0xA1 + (int) (($idx % UNICODE_HANGUL_NCOUNT) / UNICODE_HANGUL_TCOUNT));						// Just like other decompositions, the resulting Jamos must be dumped to the tmp string						$dump = 1;					}					// Do we need to dump stuff to the tmp string?					if ($dump)					{						$tmp .= substr($str, $tmp_pos, $starter_pos - $tmp_pos);						// Dump combiners						if (!empty($utf_sort))						{							if ($sort)							{								ksort($utf_sort);							}							foreach ($utf_sort as $utf_chars)							{								$tmp .= implode('', $utf_chars);							}						}						$tmp .= $utf_char;						$dump = $sort = 0;						$tmp_pos = $pos;					}					$last_cc = 0;					$utf_sort = array();					$starter_pos = $pos;				}			}			else			{				// ASCII char, which happens to be a starter (as any other ASCII char)				if ($dump)				{					$tmp .= substr($str, $tmp_pos, $starter_pos - $tmp_pos);					// Dump combiners					if (!empty($utf_sort))					{						if ($sort)						{							ksort($utf_sort);						}						foreach ($utf_sort as $utf_chars)						{							$tmp .= implode('', $utf_chars);						}					}					$tmp .= $str[$pos];					$dump = $sort = 0;					$tmp_pos = ++$pos;					$pos += strspn($str, UTF8_ASCII_RANGE, $pos);				}				else				{					$pos += strspn($str, UTF8_ASCII_RANGE, ++$pos);				}				$last_cc = 0;				$utf_sort = array();				$starter_pos = $pos;			}		}		while ($pos < $len);		// Now is time to return the string		if ($dump)		{			$tmp .= substr($str, $tmp_pos, $starter_pos - $tmp_pos);			// Dump combiners			if (!empty($utf_sort))			{				if ($sort)				{					ksort($utf_sort);				}				foreach ($utf_sort as $utf_chars)				{					$tmp .= implode('', $utf_chars);				}			}			return $tmp;		}		else if ($tmp_pos)		{			// If the $tmp_pos cursor was moved then at least one character was not in normal form. Replace $str with the fixed version			if ($tmp_pos == $len)			{				// The $tmp_pos cursor is at the end of $str, therefore $tmp holds the whole $str				return $tmp;			}			else			{				// The rightmost chunk of $str has not been appended to $tmp yet				return $tmp . substr($str, $tmp_pos);			}		}		// The string was already in normal form		return $str;	}}?>
<?php/**** @package acm* @version $Id$* @copyright (c) 2005, 2009 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ACM Null Caching* @package acm*/class acm{	/**	* Set cache path	*/	function acm()	{	}	/**	* Load global cache	*/	function load()	{		return true;	}	/**	* Unload cache object	*/	function unload()	{	}	/**	* Save modified objects	*/	function save()	{	}	/**	* Tidy cache	*/	function tidy()	{		// This cache always has a tidy room.		set_config('cache_last_gc', time(), true);	}	/**	* Get saved cache object	*/	function get($var_name)	{		return false;	}	/**	* Put data into cache	*/	function put($var_name, $var, $ttl = 0)	{	}	/**	* Purge cache data	*/	function purge()	{	}	/**	* Destroy cache data	*/	function destroy($var_name, $table = '')	{	}	/**	* Check if a given cache entry exist	*/	function _exists($var_name)	{		return false;	}	/**	* Load cached sql query	*/	function sql_load($query)	{		return false;	}	/**	* Save sql query	*/	function sql_save($query, &$query_result, $ttl)	{	}	/**	* Ceck if a given sql query exist in cache	*/	function sql_exists($query_id)	{		return false;	}	/**	* Fetch row from cache (database)	*/	function sql_fetchrow($query_id)	{		return false;	}	/**	* Fetch a field from the current row of a cached database result (database)	*/	function sql_fetchfield($query_id, $field)	{		return false;	}	/**	* Seek a specific row in an a cached database result (database)	*/	function sql_rowseek($rownum, $query_id)	{		return false;	}	/**	* Free memory used for a cached database result (database)	*/	function sql_freeresult($query_id)	{		return false;	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class mcp_reports_info{	function module()	{		return array(			'filename'	=> 'mcp_reports',			'title'		=> 'MCP_REPORTS',			'version'	=> '1.0.0',			'modes'		=> array(				'reports'			=> array('title' => 'MCP_REPORTS_OPEN', 'auth' => 'aclf_m_report', 'cat' => array('MCP_REPORTS')),				'reports_closed'	=> array('title' => 'MCP_REPORTS_CLOSED', 'auth' => 'aclf_m_report', 'cat' => array('MCP_REPORTS')),				'report_details'	=> array('title' => 'MCP_REPORT_DETAILS', 'auth' => 'acl_m_report,$id || (!$id && aclf_m_report)', 'cat' => array('MCP_REPORTS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php//// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");//// Do not change anything below this line.//$phpbb_root_path = "../";include($phpbb_root_path . 'extension.inc');include($phpbb_root_path . 'common.'.$phpEx);include($phpbb_root_path . 'includes/post.'.$phpEx);include($phpbb_root_path . 'includes/bbcode.'.$phpEx);srand ((double) microtime() * 1000000);set_time_limit(240*60);// Here's the text we stick in posts..$bigass_text = ' phpBB BBCode test suite v0.0.2auto-linkification:http://something.comwww.something.comnate@phpbb.comhttp://something.com/foo.php?this=that&theother=some%20encoded%20string is a link.[code]Simple code block with some <html> <tags>.[/code][b]bolded[/b], [i]italic[/i][email]james@totalgeek.org[/email][url=http://www.totalgeek.org]totalgeek.org[/url][url]www.totalgeek.org[/url] [list] [*] This is the first bulleted item.[*] This is the second bulleted item.[/list] [list=A] [*] This is the first bulleted item.[*] This is the second bulleted item.[/list] [quote]And a quote![/quote]';// The script expects the ID's in the tables to sequential (1,2,3,4,5), // so no holes please (1,4,5,8)...$nr_of_users  = nrof(USERS_TABLE);$nr_of_cats   = nrof(CATEGORIES_TABLE);$nr_of_forums = nrof(FORUMS_TABLE);$nr_of_posts  = nrof(POSTS_TABLE);$u = $users;$starttime = microtime();$usercreationcount = 0;while($users > 0){	$name = "testuser_" . substr(md5(uniqid(rand())), 0, 10);	if (make_user($name))	{		$usercreationcount++;		$users--;	}	if (($usercreationcount % 500) == 0)	{		echo "status: $usercreationcount <br>\n";		flush();	}	}if ($posts > 0){	filldb($posts);}$endtime = microtime();if ($submit="" || !isset($submit)){    ?>Hello, welcome to this little phpBB Benchmarking script :)<p>At the moment there are:<br><table><tr><td align="right"><?php echo $nr_of_users?></td><td>Users</td></tr><tr><td align="right"><?php echo $nr_of_forums?></td><td>Forums</td></tr><tr><td align="right"><?php echo $nr_of_posts?></td><td>Posts</td></tr></table><p>What do you want to create?<p><form method="get" action="<?php echo $PHP_SELF?>"><input type="text" name="users" size="3"> Users<br><input type="text" name="posts" size="3"> Posts/topics (optional: post size in <input type="text" name="size" size="3"> bytes)<br><input type="submit" name="submit"></form>    <?php} else {	list ($starttime_msec,$starttime_sec) = explode(" ",$starttime);	list ($endtime_msec,$endtime_sec) = explode(" ",$endtime);	$timetaken_sec = ($endtime_sec+$endtime_msec) - ($starttime_sec+$starttime_msec);	print "<B>TIME TAKEN : ".$timetaken_sec."s</B><BR>\n"; 	print "<p>\n<a href=\"$PHP_SELF\">Back to the overview page</a>\n";}function filldb($newposts){	global $nr_of_forums;	global $nr_of_users;  	$forum_topic_counts = array();  	for ($i = 1; $i <= $nr_of_forums; $i++)	{  		$forum_topic_counts[$i] = get_topic_count($i);	}  	for($i = 0; $i < $newposts; $i++)	{		$userid   = rand(2, $nr_of_users - 1);		$forum    = rand(1,$nr_of_forums);				if ((rand(0,30) < 1) || ($forum_topic_count[$forum] == 0))		{			// create a new topic 1 in 30 times (or when there are none);			$topic = make_topic($userid, "Testing topic $i", $forum);			$forum_topic_count[$forum]++;		} 		else 		{			// Otherwise create a reply(posting) somewhere.			$topic = get_smallest_topic($forum);			create_posting($userid, $topic, $forum, "reply");		}				if (($i % 1000) == 0)		{			echo "status: $i <br>";			flush();		}	 	}}function get_smallest_topic($forum_id){	global $db;		$sql = "SELECT topic_id		FROM " . TOPICS_TABLE . "		WHERE (forum_id = $forum_id)		ORDER BY topic_replies ASC LIMIT 1";	if($result = $db->sql_query($sql))	{		$row = $db->sql_fetchrow($result);		$topic_id = $row['topic_id'];		unset($result);		unset($row);		return $topic_id;	}	else	{		message_die(GENERAL_ERROR, "Couldn't get smallest topic.", "", __LINE__, __FILE__, $sql);	}	}function get_topic_count($forum_id){	global $db;		$sql = "SELECT forum_topics		FROM " . FORUMS_TABLE . "		WHERE (forum_id = $forum_id)";	if($result = $db->sql_query($sql))	{		$row = $db->sql_fetchrow($result);		$topic_count = $row['forum_topics'];		unset($result);		unset($row);		return $topic_count;	}	else	{		message_die(GENERAL_ERROR, "Couldn't get topic count.", "", __LINE__, __FILE__, $sql);	}	}function make_topic($user_id, $subject, $forum_id){	global $db;	$topic_type = POST_NORMAL;	$topic_vote = 0;	$current_time = time();		$sql  = "INSERT INTO " . TOPICS_TABLE . " (topic_title, topic_poster, topic_time, forum_id, topic_status, topic_type, topic_vote)			VALUES ('$subject', $user_id, $current_time, $forum_id, " . TOPIC_UNLOCKED . ", $topic_type, $topic_vote)";	if( $result = $db->sql_query($sql, BEGIN_TRANSACTION) )	{		$new_topic_id = $db->sql_nextid();	}	else	{		message_die(GENERAL_ERROR, "Error inserting data into topics table", "", __LINE__, __FILE__, $sql);	}		create_posting($user_id, $new_topic_id, $forum_id);		return $new_topic_id;}function create_posting($userid, $topic_id, $forum, $mode='newtopic'){	$message = generatepost();	return make_post($topic_id, $forum, $userid, "", $message, $mode);}function make_post($new_topic_id, $forum_id, $user_id, $post_username, $text, $mode='newtopic'){	global $db;	$current_time = time();	$user_ip = "ac100202";	$bbcode_on = 1;	$html_on = 1;	$smilies_on = 1;	$attach_sig = 1;	$bbcode_uid = make_bbcode_uid();		$post_subject = 'random subject';		$post_message = prepare_message($text, $html_on, $bbcode_on, $smilies_on, $bbcode_uid);			$sql = "INSERT INTO " . POSTS_TABLE . " (topic_id, forum_id, poster_id, attach_id, icon_id, post_username, post_time, poster_ip, post_approved, bbcode_uid, enable_bbcode, enable_html, enable_smilies, enable_sig, post_subject, post_text)		VALUES ($new_topic_id, $forum_id, $user_id, 0, 0, '$post_username', $current_time, '$user_ip', 1, '$bbcode_uid', $bbcode_on, $html_on, $smilies_on, $attach_sig, '$post_subject', '$post_message')";	$result = $db->sql_query($sql);		if ($result)	{		$new_post_id = $db->sql_nextid();			$sql = "UPDATE " . TOPICS_TABLE . "			SET topic_last_post_id = $new_post_id";		if($mode == "reply")		{			$sql .= ", topic_replies = topic_replies + 1 ";		}		$sql .= " WHERE topic_id = $new_topic_id";		if($db->sql_query($sql))		{			$sql = "UPDATE " . FORUMS_TABLE . "				SET forum_last_post_id = $new_post_id, forum_posts = forum_posts + 1";			if($mode == "newtopic")			{				$sql .= ", forum_topics = forum_topics + 1";			}			$sql .= " WHERE forum_id = $forum_id";				if($db->sql_query($sql))			{				$sql = "UPDATE " . USERS_TABLE . "					SET user_posts = user_posts + 1					WHERE user_id = " . $user_id;					if($db->sql_query($sql, END_TRANSACTION))				{					// SUCCESS.					return true;				}				else				{					message_die(GENERAL_ERROR, "Error updating users table", "", __LINE__, __FILE__, $sql);				}			}			else			{				message_die(GENERAL_ERROR, "Error updating forums table", "", __LINE__, __FILE__, $sql);			}		}		else		{			// Rollback			if($db->sql_layer == "mysql")			{				$sql = "DELETE FROM " . POSTS_TABLE . "					WHERE post_id = $new_post_id";				$db->sql_query($sql);			}			message_die(GENERAL_ERROR, "Error updating topics table", "", __LINE__, __FILE__, $sql);		}	}	else	{		message_die(GENERAL_ERROR, "Error inserting data into posts table", "", __LINE__, __FILE__, $sql);	}	}function generatepost($size=850){   global $bigass_text;   // Returns a string with a length between $size and $size*0.2   $size = rand(0.2*$size, $size);      $textsize = strlen($bigass_text);   $currentsize = 0;   // Add whole $text multiple times   while($currentsize < $size && $size-$currentsize <= $textsize)   {      $message .= $bigass_text;      $currentsize += $textsize;   }   // Add the remainder number of chars and return it.   $message .= substr($bigass_text, 0, $size-$currentsize);   return (addslashes($message));}         function nrof($table){	global $db;	$sql = "SELECT count(*) AS counted FROM $table";	$result = $db->sql_query($sql);	$topics = $db->sql_fetchrow($result);	return $topics[counted];}function make_user($username){	global $db, $board_config;	$password = md5("benchpass");	$email = "nobody@localhost";	$icq = "12345678";	$website = "http://www.phpbb.com";	$occupation = "phpBB tester";	$location = "phpBB world hq";	$interests = "Eating, sleeping, living, and breathing phpBB";	$signature = "$username: phpBB tester.";	$signature_bbcode_uid = "";	$avatar_filename = "";	$viewemail = 0;	$aim = 0;	$yim = 0;	$msn = 0;	$attachsig = 1;	$allowsmilies = 1;	$allowhtml = 1;	$allowbbcode = 1;	$allowviewonline = 1;	$notifyreply = 0;	$notifypm = 0;	$user_timezone = $board_config['board_timezone'];	$user_dateformat = $board_config['default_dateformat'];	$user_lang = $board_config['default_lang'];	$user_style = $board_config['default_style'];	$sql = "SELECT MAX(user_id) AS total		FROM " . USERS_TABLE;	if($result = $db->sql_query($sql))	{		$row = $db->sql_fetchrow($result);		$new_user_id = $row['total'] + 1;		unset($result);		unset($row);	}	else	{		message_die(GENERAL_ERROR, "Couldn't obtained next user_id information.", "", __LINE__, __FILE__, $sql);	}	$sql = "SELECT MAX(group_id) AS total		FROM " . GROUPS_TABLE;	if($result = $db->sql_query($sql))	{		$row = $db->sql_fetchrow($result);		$new_group_id = $row['total'] + 1;		unset($result);		unset($row);	}	else	{		message_die(GENERAL_ERROR, "Couldn't obtained next user_id information.", "", __LINE__, __FILE__, $sql);	}	$sql = "INSERT INTO " . USERS_TABLE . "	(user_id, username, user_regdate, user_password, user_email, user_icq, user_website, user_occ, user_from, user_interests, user_sig, user_sig_bbcode_uid, user_avatar, user_viewemail, user_aim, user_yim, user_msnm, user_attachsig, user_allowsmilies, user_allowhtml, user_allowbbcode, user_allow_viewonline, user_notify, user_notify_pm, user_timezone, user_dateformat, user_lang, user_style, user_level, user_allow_pm, user_active, user_actkey)		VALUES ($new_user_id, '$username', " . time() . ", '$password', '$email', '$icq', '$website', '$occupation', '$location', '$interests', '$signature', '$signature_bbcode_uid', '$avatar_filename', $viewemail, '$aim', '$yim', '$msn', $attachsig, $allowsmilies, $allowhtml, $allowbbcode, $allowviewonline, $notifyreply, $notifypm, $user_timezone, '$user_dateformat', '$user_lang', $user_style, 0, 1, ";		$sql .= "1, '')";		if($result = $db->sql_query($sql, BEGIN_TRANSACTION))	{		$sql = "INSERT INTO " . GROUPS_TABLE . " (group_id, group_name, group_description, group_single_user, group_moderator)			VALUES ($new_group_id, '', 'Personal User', 1, 0)";		if($result = $db->sql_query($sql))		{			$sql = "INSERT INTO " . USER_GROUP_TABLE . " (user_id, group_id, user_pending)				VALUES ($new_user_id, $new_group_id, 0)";			if($result = $db->sql_query($sql, END_TRANSACTION))			{								// SUCCESS.				return true;			}			else			{				message_die(GENERAL_ERROR, "Couldn't insert data into user_group table", "", __LINE__, __FILE__, $sql);			}		}		else		{			message_die(GENERAL_ERROR, "Couldn't insert data into groups table", "", __LINE__, __FILE__, $sql);		}	}	else	{		message_die(GENERAL_ERROR, "Couldn't insert data into users table", "", __LINE__, __FILE__, $sql);	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_language_info{	function module()	{		return array(			'filename'	=> 'acp_language',			'title'		=> 'ACP_LANGUAGE',			'version'	=> '1.0.0',			'modes'		=> array(				'lang_packs'		=> array('title' => 'ACP_LANGUAGE_PACKS', 'auth' => 'acl_a_language', 'cat' => array('ACP_GENERAL_TASKS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acm* @copyright (c) 2011 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}// Include the abstract baseif (!class_exists('acm_memory')){	require("{$phpbb_root_path}includes/acm/acm_memory.$phpEx");}if (!defined('PHPBB_ACM_REDIS_PORT')){	define('PHPBB_ACM_REDIS_PORT', 6379);}if (!defined('PHPBB_ACM_REDIS_HOST')){	define('PHPBB_ACM_REDIS_HOST', 'localhost');}/*** ACM for Redis** Compatible with the php extension phpredis available* at https://github.com/nicolasff/phpredis** @package acm*/class acm extends acm_memory{	var $extension = 'redis';	var $redis;	function acm()	{		// Call the parent constructor		parent::acm_memory();		$this->redis = new Redis();		$this->redis->connect(PHPBB_ACM_REDIS_HOST, PHPBB_ACM_REDIS_PORT);		if (defined('PHPBB_ACM_REDIS_PASSWORD'))		{			if (!$this->redis->auth(PHPBB_ACM_REDIS_PASSWORD))			{				global $acm_type;				trigger_error("Incorrect password for the ACM module $acm_type.", E_USER_ERROR);			}		}		$this->redis->setOption(Redis::OPT_SERIALIZER, Redis::SERIALIZER_PHP);		$this->redis->setOption(Redis::OPT_PREFIX, $this->key_prefix);		if (defined('PHPBB_ACM_REDIS_DB'))		{			if (!$this->redis->select(PHPBB_ACM_REDIS_DB))			{				global $acm_type;				trigger_error("Incorrect database for the ACM module $acm_type.", E_USER_ERROR);			}		}	}	/**	* Unload the cache resources	*	* @return void	*/	function unload()	{		parent::unload();		$this->redis->close();	}	/**	* Purge cache data	*	* @return void	*/	function purge()	{		$this->redis->flushDB();		parent::purge();	}	/**	* Fetch an item from the cache	*	* @access protected	* @param string $var Cache key	* @return mixed Cached data	*/	function _read($var)	{		return $this->redis->get($var);	}	/**	* Store data in the cache	*	* @access protected	* @param string $var Cache key	* @param mixed $data Data to store	* @param int $ttl Time-to-live of cached data	* @return bool True if the operation succeeded	*/	function _write($var, $data, $ttl = 2592000)	{		return $this->redis->setex($var, $ttl, $data);	}	/**	* Remove an item from the cache	*	* @access protected	* @param string $var Cache key	* @return bool True if the operation succeeded	*/	function _delete($var)	{		if ($this->redis->delete($var) > 0)		{			return true;		}		return false;	}}
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);define('ADMIN_START', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);// Start session management$user->session_begin(false);$auth->acl($user->data);$user->setup();// Set custom template for admin area$template->set_custom_template($phpbb_root_path . 'adm/style', 'admin');$template->set_filenames(array(	'body' => 'colour_swatch.html'));$form = request_var('form', '');$name = request_var('name', '');// We validate form and name here, only id/class allowed$form = (!preg_match('/^[a-z0-9_-]+$/i', $form)) ? '' : $form;$name = (!preg_match('/^[a-z0-9_-]+$/i', $name)) ? '' : $name;$template->assign_vars(array(	'OPENER'		=> $form,	'NAME'			=> $name,	'T_IMAGES_PATH'	=> "{$phpbb_root_path}images/",	'S_USER_LANG'			=> $user->lang['USER_LANG'],	'S_CONTENT_DIRECTION'	=> $user->lang['DIRECTION'],	'S_CONTENT_ENCODING'	=> 'UTF-8',));$template->display('body');garbage_collection();?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ucp_remind* Sending password reminders* @package ucp*/class ucp_remind{	var $u_action;	function main($id, $mode)	{		global $config, $phpbb_root_path, $phpEx;		global $db, $user, $auth, $template;		$username	= request_var('username', '', true);		$email		= strtolower(request_var('email', ''));		$submit		= (isset($_POST['submit'])) ? true : false;		if ($submit)		{			$sql = 'SELECT user_id, username, user_permissions, user_email, user_jabber, user_notify_type, user_type, user_lang, user_inactive_reason				FROM ' . USERS_TABLE . "				WHERE user_email_hash = '" . $db->sql_escape(phpbb_email_hash($email)) . "'					AND username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";			$result = $db->sql_query($sql);			$user_row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$user_row)			{				trigger_error('NO_EMAIL_USER');			}			if ($user_row['user_type'] == USER_IGNORE)			{				trigger_error('NO_USER');			}			if ($user_row['user_type'] == USER_INACTIVE)			{				if ($user_row['user_inactive_reason'] == INACTIVE_MANUAL)				{					trigger_error('ACCOUNT_DEACTIVATED');				}				else				{					trigger_error('ACCOUNT_NOT_ACTIVATED');				}			}			// Check users permissions			$auth2 = new auth();			$auth2->acl($user_row);			if (!$auth2->acl_get('u_chgpasswd'))			{				trigger_error('NO_AUTH_PASSWORD_REMINDER');			}			$server_url = generate_board_url();			// Make password at least 8 characters long, make it longer if admin wants to.			// gen_rand_string() however has a limit of 12 or 13.			$user_password = gen_rand_string_friendly(max(8, mt_rand((int) $config['min_pass_chars'], (int) $config['max_pass_chars'])));			// For the activation key a random length between 6 and 10 will do.			$user_actkey = gen_rand_string(mt_rand(6, 10));			$sql = 'UPDATE ' . USERS_TABLE . "				SET user_newpasswd = '" . $db->sql_escape(phpbb_hash($user_password)) . "', user_actkey = '" . $db->sql_escape($user_actkey) . "'				WHERE user_id = " . $user_row['user_id'];			$db->sql_query($sql);			include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);			$messenger = new messenger(false);			$messenger->template('user_activate_passwd', $user_row['user_lang']);			$messenger->to($user_row['user_email'], $user_row['username']);			$messenger->im($user_row['user_jabber'], $user_row['username']);			$messenger->assign_vars(array(				'USERNAME'		=> htmlspecialchars_decode($user_row['username']),				'PASSWORD'		=> htmlspecialchars_decode($user_password),				'U_ACTIVATE'	=> "$server_url/ucp.$phpEx?mode=activate&u={$user_row['user_id']}&k=$user_actkey")			);			$messenger->send($user_row['user_notify_type']);			meta_refresh(3, append_sid("{$phpbb_root_path}index.$phpEx"));			$message = $user->lang['PASSWORD_UPDATED'] . '<br /><br />' . sprintf($user->lang['RETURN_INDEX'], '<a href="' . append_sid("{$phpbb_root_path}index.$phpEx") . '">', '</a>');			trigger_error($message);		}		$template->assign_vars(array(			'USERNAME'			=> $username,			'EMAIL'				=> $email,			'S_PROFILE_ACTION'	=> append_sid($phpbb_root_path . 'ucp.' . $phpEx, 'mode=sendpassword'))		);		$this->tpl_name = 'ucp_remind';		$this->page_title = 'UCP_REMIND';	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2007 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/**** Jabber class from Flyspray project** @version class.jabber2.php 1595 2008-09-19 (0.9.9)* @copyright 2006 Flyspray.org* @author Florian Schmitz (floele)** Only slightly modified by Acyd Burn** @package phpBB3*/class jabber{	var $connection = null;	var $session = array();	var $timeout = 10;	var $server;	var $connect_server;	var $port;	var $username;	var $password;	var $use_ssl;	var $resource = 'functions_jabber.phpbb.php';	var $enable_logging;	var $log_array;	var $features = array();	/**	*/	function jabber($server, $port, $username, $password, $use_ssl = false)	{		$this->connect_server		= ($server) ? $server : 'localhost';		$this->port					= ($port) ? $port : 5222;		// Get the server and the username		if (strpos($username, '@') === false)		{			$this->server = $this->connect_server;			$this->username = $username;		}		else		{			$jid = explode('@', $username, 2);			$this->username = $jid[0];			$this->server = $jid[1];		}		$this->password				= $password;		$this->use_ssl				= ($use_ssl && $this->can_use_ssl()) ? true : false;		// Change port if we use SSL		if ($this->port == 5222 && $this->use_ssl)		{			$this->port = 5223;		}		$this->enable_logging		= true;		$this->log_array			= array();	}	/**	* Able to use the SSL functionality?	*/	function can_use_ssl()	{		// Will not work with PHP >= 5.2.1 or < 5.2.3RC2 until timeout problem with ssl hasn't been fixed (http://bugs.php.net/41236)		return ((version_compare(PHP_VERSION, '5.2.1', '<') || version_compare(PHP_VERSION, '5.2.3RC2', '>=')) && @extension_loaded('openssl')) ? true : false;	}	/**	* Able to use TLS?	*/	function can_use_tls()	{		if (!@extension_loaded('openssl') || !function_exists('stream_socket_enable_crypto') || !function_exists('stream_get_meta_data') || !function_exists('socket_set_blocking') || !function_exists('stream_get_wrappers'))		{			return false;		}		/**		* Make sure the encryption stream is supported		* Also seem to work without the crypto stream if correctly compiled		$streams = stream_get_wrappers();		if (!in_array('streams.crypto', $streams))		{			return false;		}		*/		return true;	}	/**	* Sets the resource which is used. No validation is done here, only escaping.	* @param string $name	* @access public	*/	function set_resource($name)	{		$this->resource = $name;	}	/**	* Connect	*/	function connect()	{/*		if (!$this->check_jid($this->username . '@' . $this->server))		{			$this->add_to_log('Error: Jabber ID is not valid: ' . $this->username . '@' . $this->server);			return false;		}*/		$this->session['ssl'] = $this->use_ssl;		if ($this->open_socket($this->connect_server, $this->port, $this->use_ssl))		{			$this->send("<?xml version='1.0' encoding='UTF-8' ?" . ">\n");			$this->send("<stream:stream to='{$this->server}' xmlns='jabber:client' xmlns:stream='http://etherx.jabber.org/streams' version='1.0'>\n");		}		else		{			$this->add_to_log('Error: connect() #2');			return false;		}		// Now we listen what the server has to say...and give appropriate responses		$this->response($this->listen());		return true;	}	/**	* Disconnect	*/	function disconnect()	{		if ($this->connected())		{			// disconnect gracefully			if (isset($this->session['sent_presence']))			{				$this->send_presence('offline', '', true);			}			$this->send('</stream:stream>');			$this->session = array();			return fclose($this->connection);		}		return false;	}	/**	* Connected?	*/	function connected()	{		return (is_resource($this->connection) && !feof($this->connection)) ? true : false;	}	/**	* Initiates login (using data from contructor, after calling connect())	* @access public	* @return bool	*/	function login()	{		if (!sizeof($this->features))		{			$this->add_to_log('Error: No feature information from server available.');			return false;		}		return $this->response($this->features);	}	/**	* Send data to the Jabber server	* @param string $xml	* @access public	* @return bool	*/	function send($xml)	{		if ($this->connected())		{			$xml = trim($xml);			$this->add_to_log('SEND: '. $xml);			return fwrite($this->connection, $xml);		}		else		{			$this->add_to_log('Error: Could not send, connection lost (flood?).');			return false;		}	}	/**	* OpenSocket	* @param string $server host to connect to	* @param int $port port number	* @param bool $use_ssl use ssl or not	* @access public	* @return bool	*/	function open_socket($server, $port, $use_ssl = false)	{		if (@function_exists('dns_get_record'))		{			$record = @dns_get_record("_xmpp-client._tcp.$server", DNS_SRV);			if (!empty($record) && !empty($record[0]['target']))			{				$server = $record[0]['target'];			}		}		$server = $use_ssl ? 'ssl://' . $server : $server;		if ($this->connection = @fsockopen($server, $port, $errorno, $errorstr, $this->timeout))		{			socket_set_blocking($this->connection, 0);			socket_set_timeout($this->connection, 60);			return true;		}		// Apparently an error occured...		$this->add_to_log('Error: open_socket() - ' . $errorstr);		return false;	}	/**	* Return log	*/	function get_log()	{		if ($this->enable_logging && sizeof($this->log_array))		{			return implode("<br /><br />", $this->log_array);		}		return '';	}	/**	* Add information to log	*/	function add_to_log($string)	{		if ($this->enable_logging)		{			$this->log_array[] = utf8_htmlspecialchars($string);		}	}	/**	* Listens to the connection until it gets data or the timeout is reached.	* Thus, it should only be called if data is expected to be received.	* @access public	* @return mixed either false for timeout or an array with the received data	*/	function listen($timeout = 10, $wait = false)	{		if (!$this->connected())		{			return false;		}		// Wait for a response until timeout is reached		$start = time();		$data = '';		do		{			$read = trim(fread($this->connection, 4096));			$data .= $read;		}		while (time() <= $start + $timeout && !feof($this->connection) && ($wait || $data == '' || $read != '' || (substr(rtrim($data), -1) != '>')));		if ($data != '')		{			$this->add_to_log('RECV: '. $data);			return $this->xmlize($data);		}		else		{			$this->add_to_log('Timeout, no response from server.');			return false;		}	}	/**	* Initiates account registration (based on data used for contructor)	* @access public	* @return bool	*/	function register()	{		if (!isset($this->session['id']) || isset($this->session['jid']))		{			$this->add_to_log('Error: Cannot initiate registration.');			return false;		}		$this->send("<iq type='get' id='reg_1'><query xmlns='jabber:iq:register'/></iq>");		return $this->response($this->listen());	}	/**	* Sets account presence. No additional info required (default is "online" status)	* @param $message online, offline...	* @param $type dnd, away, chat, xa or nothing	* @param $unavailable set this to true if you want to become unavailable	* @access public	* @return bool	*/	function send_presence($message = '', $type = '', $unavailable = false)	{		if (!isset($this->session['jid']))		{			$this->add_to_log('ERROR: send_presence() - Cannot set presence at this point, no jid given.');			return false;		}		$type = strtolower($type);		$type = (in_array($type, array('dnd', 'away', 'chat', 'xa'))) ? '<show>'. $type .'</show>' : '';		$unavailable = ($unavailable) ? " type='unavailable'" : '';		$message = ($message) ? '<status>' . utf8_htmlspecialchars($message) .'</status>' : '';		$this->session['sent_presence'] = !$unavailable;		return $this->send("<presence$unavailable>" . $type . $message . '</presence>');	}	/**	* This handles all the different XML elements	* @param array $xml	* @access public	* @return bool	*/	function response($xml)	{		if (!is_array($xml) || !sizeof($xml))		{			return false;		}		// did we get multiple elements? do one after another		// array('message' => ..., 'presence' => ...)		if (sizeof($xml) > 1)		{			foreach ($xml as $key => $value)			{				$this->response(array($key => $value));			}			return;		}		else		{			// or even multiple elements of the same type?			// array('message' => array(0 => ..., 1 => ...))			if (sizeof(reset($xml)) > 1)			{				foreach (reset($xml) as $value)				{					$this->response(array(key($xml) => array(0 => $value)));				}				return;			}		}		switch (key($xml))		{			case 'stream:stream':				// Connection initialised (or after authentication). Not much to do here...				if (isset($xml['stream:stream'][0]['#']['stream:features']))				{					// we already got all info we need					$this->features = $xml['stream:stream'][0]['#'];				}				else				{					$this->features = $this->listen();				}				$second_time = isset($this->session['id']);				$this->session['id'] = $xml['stream:stream'][0]['@']['id'];				if ($second_time)				{					// If we are here for the second time after TLS, we need to continue logging in					return $this->login();				}				// go on with authentication?				if (isset($this->features['stream:features'][0]['#']['bind']) || !empty($this->session['tls']))				{					return $this->response($this->features);				}			break;			case 'stream:features':				// Resource binding after successful authentication				if (isset($this->session['authenticated']))				{					// session required?					$this->session['sess_required'] = isset($xml['stream:features'][0]['#']['session']);					$this->send("<iq type='set' id='bind_1'>						<bind xmlns='urn:ietf:params:xml:ns:xmpp-bind'>							<resource>" . utf8_htmlspecialchars($this->resource) . '</resource>						</bind>					</iq>');					return $this->response($this->listen());				}				// Let's use TLS if SSL is not enabled and we can actually use it				if (!$this->session['ssl'] && $this->can_use_tls() && $this->can_use_ssl() && isset($xml['stream:features'][0]['#']['starttls']))				{					$this->add_to_log('Switching to TLS.');					$this->send("<starttls xmlns='urn:ietf:params:xml:ns:xmpp-tls'/>\n");					return $this->response($this->listen());				}				// Does the server support SASL authentication?				// I hope so, because we do (and no other method).				if (isset($xml['stream:features'][0]['#']['mechanisms'][0]['@']['xmlns']) && $xml['stream:features'][0]['#']['mechanisms'][0]['@']['xmlns'] == 'urn:ietf:params:xml:ns:xmpp-sasl')				{					// Now decide on method					$methods = array();					foreach ($xml['stream:features'][0]['#']['mechanisms'][0]['#']['mechanism'] as $value)					{						$methods[] = $value['#'];					}					// we prefer DIGEST-MD5					// we don't want to use plain authentication (neither does the server usually) if no encryption is in place					// http://www.xmpp.org/extensions/attic/jep-0078-1.7.html					// The plaintext mechanism SHOULD NOT be used unless the underlying stream is encrypted (using SSL or TLS)					// and the client has verified that the server certificate is signed by a trusted certificate authority.					if (in_array('DIGEST-MD5', $methods))					{						$this->send("<auth xmlns='urn:ietf:params:xml:ns:xmpp-sasl' mechanism='DIGEST-MD5'/>");					}					else if (in_array('PLAIN', $methods) && ($this->session['ssl'] || !empty($this->session['tls'])))					{						// http://www.ietf.org/rfc/rfc4616.txt (PLAIN SASL Mechanism)						$this->send("<auth xmlns='urn:ietf:params:xml:ns:xmpp-sasl' mechanism='PLAIN'>"							. base64_encode($this->username . '@' . $this->server . chr(0) . $this->username . chr(0) . $this->password) .							'</auth>');					}					else if (in_array('ANONYMOUS', $methods))					{						$this->send("<auth xmlns='urn:ietf:params:xml:ns:xmpp-sasl' mechanism='ANONYMOUS'/>");					}					else					{						// not good...						$this->add_to_log('Error: No authentication method supported.');						$this->disconnect();						return false;					}					return $this->response($this->listen());				}				else				{					// ok, this is it. bye.					$this->add_to_log('Error: Server does not offer SASL authentication.');					$this->disconnect();					return false;				}			break;			case 'challenge':				// continue with authentication...a challenge literally -_-				$decoded = base64_decode($xml['challenge'][0]['#']);				$decoded = $this->parse_data($decoded);				if (!isset($decoded['digest-uri']))				{					$decoded['digest-uri'] = 'xmpp/'. $this->server;				}				// better generate a cnonce, maybe it's needed				$decoded['cnonce'] = base64_encode(md5(uniqid(mt_rand(), true)));				// second challenge?				if (isset($decoded['rspauth']))				{					$this->send("<response xmlns='urn:ietf:params:xml:ns:xmpp-sasl'/>");				}				else				{					// Make sure we only use 'auth' for qop (relevant for $this->encrypt_password())					// If the <response> is choking up on the changed parameter we may need to adjust encrypt_password() directly					if (isset($decoded['qop']) && $decoded['qop'] != 'auth' && strpos($decoded['qop'], 'auth') !== false)					{						$decoded['qop'] = 'auth';					}					$response = array(						'username'	=> $this->username,						'response'	=> $this->encrypt_password(array_merge($decoded, array('nc' => '00000001'))),						'charset'	=> 'utf-8',						'nc'		=> '00000001',						'qop'		=> 'auth',			// only auth being supported					);					foreach (array('nonce', 'digest-uri', 'realm', 'cnonce') as $key)					{						if (isset($decoded[$key]))						{							$response[$key] = $decoded[$key];						}					}					$this->send("<response xmlns='urn:ietf:params:xml:ns:xmpp-sasl'>" . base64_encode($this->implode_data($response)) . '</response>');				}				return $this->response($this->listen());			break;			case 'failure':				$this->add_to_log('Error: Server sent "failure".');				$this->disconnect();				return false;			break;			case 'proceed':				// continue switching to TLS				$meta = stream_get_meta_data($this->connection);				socket_set_blocking($this->connection, 1);				if (!stream_socket_enable_crypto($this->connection, true, STREAM_CRYPTO_METHOD_TLS_CLIENT))				{					$this->add_to_log('Error: TLS mode change failed.');					return false;				}				socket_set_blocking($this->connection, $meta['blocked']);				$this->session['tls'] = true;				// new stream				$this->send("<?xml version='1.0' encoding='UTF-8' ?" . ">\n");				$this->send("<stream:stream to='{$this->server}' xmlns='jabber:client' xmlns:stream='http://etherx.jabber.org/streams' version='1.0'>\n");				return $this->response($this->listen());			break;			case 'success':				// Yay, authentication successful.				$this->send("<stream:stream to='{$this->server}' xmlns='jabber:client' xmlns:stream='http://etherx.jabber.org/streams' version='1.0'>\n");				$this->session['authenticated'] = true;				// we have to wait for another response				return $this->response($this->listen());			break;			case 'iq':				// we are not interested in IQs we did not expect				if (!isset($xml['iq'][0]['@']['id']))				{					return false;				}				// multiple possibilities here				switch ($xml['iq'][0]['@']['id'])				{					case 'bind_1':						$this->session['jid'] = $xml['iq'][0]['#']['bind'][0]['#']['jid'][0]['#'];						// and (maybe) yet another request to be able to send messages *finally*						if ($this->session['sess_required'])						{							$this->send("<iq to='{$this->server}' type='set' id='sess_1'>								<session xmlns='urn:ietf:params:xml:ns:xmpp-session'/>								</iq>");							return $this->response($this->listen());						}						return true;					break;					case 'sess_1':						return true;					break;					case 'reg_1':						$this->send("<iq type='set' id='reg_2'>								<query xmlns='jabber:iq:register'>									<username>" . utf8_htmlspecialchars($this->username) . "</username>									<password>" . utf8_htmlspecialchars($this->password) . "</password>								</query>							</iq>");						return $this->response($this->listen());					break;					case 'reg_2':						// registration end						if (isset($xml['iq'][0]['#']['error']))						{							$this->add_to_log('Warning: Registration failed.');							return false;						}						return true;					break;					case 'unreg_1':						return true;					break;					default:						$this->add_to_log('Notice: Received unexpected IQ.');						return false;					break;				}			break;			case 'message':				// we are only interested in content...				if (!isset($xml['message'][0]['#']['body']))				{					return false;				}				$message['body'] = $xml['message'][0]['#']['body'][0]['#'];				$message['from'] = $xml['message'][0]['@']['from'];				if (isset($xml['message'][0]['#']['subject']))				{					$message['subject'] = $xml['message'][0]['#']['subject'][0]['#'];				}				$this->session['messages'][] = $message;			break;			default:				// hm...don't know this response				$this->add_to_log('Notice: Unknown server response (' . key($xml) . ')');				return false;			break;		}	}	function send_message($to, $text, $subject = '', $type = 'normal')	{		if (!isset($this->session['jid']))		{			return false;		}		if (!in_array($type, array('chat', 'normal', 'error', 'groupchat', 'headline')))		{			$type = 'normal';		}		return $this->send("<message from='" . utf8_htmlspecialchars($this->session['jid']) . "' to='" . utf8_htmlspecialchars($to) . "' type='$type' id='" . uniqid('msg') . "'>			<subject>" . utf8_htmlspecialchars($subject) . "</subject>			<body>" . utf8_htmlspecialchars($text) . "</body>			</message>"		);	}	/**	* Encrypts a password as in RFC 2831	* @param array $data Needs data from the client-server connection	* @access public	* @return string	*/	function encrypt_password($data)	{		// let's me think about <challenge> again...		foreach (array('realm', 'cnonce', 'digest-uri') as $key)		{			if (!isset($data[$key]))			{				$data[$key] = '';			}		}		$pack = md5($this->username . ':' . $data['realm'] . ':' . $this->password);		if (isset($data['authzid']))		{			$a1 = pack('H32', $pack)  . sprintf(':%s:%s:%s', $data['nonce'], $data['cnonce'], $data['authzid']);		}		else		{			$a1 = pack('H32', $pack)  . sprintf(':%s:%s', $data['nonce'], $data['cnonce']);		}		// should be: qop = auth		$a2 = 'AUTHENTICATE:'. $data['digest-uri'];		return md5(sprintf('%s:%s:%s:%s:%s:%s', md5($a1), $data['nonce'], $data['nc'], $data['cnonce'], $data['qop'], md5($a2)));	}	/**	* parse_data like a="b",c="d",... or like a="a, b", c, d="e", f=g,...	* @param string $data	* @access public	* @return array a => b ...	*/	function parse_data($data)	{		$data = explode(',', $data);		$pairs = array();		$key = false;		foreach ($data as $pair)		{			$dd = strpos($pair, '=');			if ($dd)			{				$key = trim(substr($pair, 0, $dd));				$pairs[$key] = trim(trim(substr($pair, $dd + 1)), '"');			}			else if (strpos(strrev(trim($pair)), '"') === 0 && $key)			{				// We are actually having something left from "a, b" values, add it to the last one we handled.				$pairs[$key] .= ',' . trim(trim($pair), '"');				continue;			}		}		return $pairs;	}	/**	* opposite of jabber::parse_data()	* @param array $data	* @access public	* @return string	*/	function implode_data($data)	{		$return = array();		foreach ($data as $key => $value)		{			$return[] = $key . '="' . $value . '"';		}		return implode(',', $return);	}	/**	* xmlize()	* @author Hans Anderson	* @copyright Hans Anderson / http://www.hansanderson.com/php/xml/	*/	function xmlize($data, $skip_white = 1, $encoding = 'UTF-8')	{		$data = trim($data);		if (substr($data, 0, 5) != '<?xml')		{			// mod			$data = '<root>'. $data . '</root>';		}		$vals = $index = $array = array();		$parser = xml_parser_create($encoding);		xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);		xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, $skip_white);		xml_parse_into_struct($parser, $data, $vals, $index);		xml_parser_free($parser);		$i = 0;		$tagname = $vals[$i]['tag'];		$array[$tagname][0]['@'] = (isset($vals[$i]['attributes'])) ? $vals[$i]['attributes'] : array();		$array[$tagname][0]['#'] = $this->_xml_depth($vals, $i);		if (substr($data, 0, 5) != '<?xml')		{			$array = $array['root'][0]['#'];		}		return $array;	}	/**	* _xml_depth()	* @author Hans Anderson	* @copyright Hans Anderson / http://www.hansanderson.com/php/xml/	*/	function _xml_depth($vals, &$i)	{		$children = array();		if (isset($vals[$i]['value']))		{			array_push($children, $vals[$i]['value']);		}		while (++$i < sizeof($vals))		{			switch ($vals[$i]['type'])			{				case 'open':					$tagname = (isset($vals[$i]['tag'])) ? $vals[$i]['tag'] : '';					$size = (isset($children[$tagname])) ? sizeof($children[$tagname]) : 0;					if (isset($vals[$i]['attributes']))					{						$children[$tagname][$size]['@'] = $vals[$i]['attributes'];					}					$children[$tagname][$size]['#'] = $this->_xml_depth($vals, $i);				break;				case 'cdata':					array_push($children, $vals[$i]['value']);				break;				case 'complete':					$tagname = $vals[$i]['tag'];					$size = (isset($children[$tagname])) ? sizeof($children[$tagname]) : 0;					$children[$tagname][$size]['#'] = (isset($vals[$i]['value'])) ? $vals[$i]['value'] : array();					if (isset($vals[$i]['attributes']))					{						$children[$tagname][$size]['@'] = $vals[$i]['attributes'];					}				break;				case 'close':					return $children;				break;			}		}		return $children;	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_reasons_info{	function module()	{		return array(			'filename'	=> 'acp_reasons',			'title'		=> 'ACP_REASONS',			'version'	=> '1.0.0',			'modes'		=> array(				'main'		=> array('title' => 'ACP_MANAGE_REASONS', 'auth' => 'acl_a_reasons', 'cat' => array('ACP_GENERAL_TASKS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_language{	var $u_action;	var $main_files;	var $language_header = '';	var $lang_header = '';	var $language_file = '';	var $language_directory = '';	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $table_prefix;		global $safe_mode, $file_uploads;		include_once($phpbb_root_path . 'includes/functions_user.' . $phpEx);		$this->default_variables();		// Check and set some common vars		$action		= (isset($_POST['update_details'])) ? 'update_details' : '';		$action		= (isset($_POST['download_file'])) ? 'download_file' : $action;		$action		= (isset($_POST['upload_file'])) ? 'upload_file' : $action;		$action		= (isset($_POST['upload_data'])) ? 'upload_data' : $action;		$action		= (isset($_POST['submit_file'])) ? 'submit_file' : $action;		$action		= (isset($_POST['remove_store'])) ? 'details' : $action;		$submit = (empty($action) && !isset($_POST['update']) && !isset($_POST['test_connection'])) ? false : true;		$action = (empty($action)) ? request_var('action', '') : $action;		$form_name = 'acp_lang';		add_form_key('acp_lang');		$lang_id = request_var('id', 0);		if (isset($_POST['missing_file']))		{			$missing_file = request_var('missing_file', array('' => 0));			list($_REQUEST['language_file'], ) = array_keys($missing_file);		}		$selected_lang_file = request_var('language_file', '|common.' . $phpEx);		list($this->language_directory, $this->language_file) = explode('|', $selected_lang_file);		$this->language_directory = basename($this->language_directory);		$this->language_file = basename($this->language_file);		$user->add_lang('acp/language');		$this->tpl_name = 'acp_language';		$this->page_title = 'ACP_LANGUAGE_PACKS';		if ($submit && $action == 'upload_data' && request_var('test_connection', ''))		{			$test_connection = false;			$action = 'upload_file';			$method = request_var('method', '');			include_once($phpbb_root_path . 'includes/functions_transfer.' . $phpEx);			switch ($method)			{				case 'ftp':					$transfer = new ftp(request_var('host', ''), request_var('username', ''), request_var('password', ''), request_var('root_path', ''), request_var('port', ''), request_var('timeout', ''));				break;				case 'ftp_fsock':					$transfer = new ftp_fsock(request_var('host', ''), request_var('username', ''), request_var('password', ''), request_var('root_path', ''), request_var('port', ''), request_var('timeout', ''));				break;				default:					trigger_error($user->lang['INVALID_UPLOAD_METHOD'], E_USER_ERROR);				break;			}			$test_connection = $transfer->open_session();			$transfer->close_session();		}		switch ($action)		{			case 'upload_file':				include_once($phpbb_root_path . 'includes/functions_transfer.' . $phpEx);				$method = request_var('method', '');				if (!class_exists($method))				{					trigger_error('Method does not exist.', E_USER_ERROR);				}				$requested_data = call_user_func(array($method, 'data'));				foreach ($requested_data as $data => $default)				{					$template->assign_block_vars('data', array(						'DATA'		=> $data,						'NAME'		=> $user->lang[strtoupper($method . '_' . $data)],						'EXPLAIN'	=> $user->lang[strtoupper($method . '_' . $data) . '_EXPLAIN'],						'DEFAULT'	=> (!empty($_REQUEST[$data])) ? request_var($data, '') : $default					));				}				$hidden_data = build_hidden_fields(array(					'file'			=> $this->language_file,					'dir'			=> $this->language_directory,					'language_file'	=> $selected_lang_file,					'method'		=> $method)				);				$hidden_data .= build_hidden_fields(array('entry' => $_POST['entry']), true, STRIP);				$template->assign_vars(array(					'S_UPLOAD'	=> true,					'NAME'		=> $method,					'U_ACTION'	=> $this->u_action . "&amp;id=$lang_id&amp;action=upload_data",					'U_BACK'	=> $this->u_action . "&amp;id=$lang_id&amp;action=details&amp;language_file=" . urlencode($selected_lang_file),					'HIDDEN'	=> $hidden_data,					'S_CONNECTION_SUCCESS'		=> (request_var('test_connection', '') && $test_connection === true) ? true : false,					'S_CONNECTION_FAILED'		=> (request_var('test_connection', '') && $test_connection !== true) ? true : false				));			break;			case 'update_details':				if (!$submit || !check_form_key($form_name))				{					trigger_error($user->lang['FORM_INVALID']. adm_back_link($this->u_action), E_USER_WARNING);				}				if (!$lang_id)				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . LANG_TABLE . "					WHERE lang_id = $lang_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$sql_ary	= array(					'lang_english_name'		=> request_var('lang_english_name', $row['lang_english_name']),					'lang_local_name'		=> utf8_normalize_nfc(request_var('lang_local_name', $row['lang_local_name'], true)),					'lang_author'			=> utf8_normalize_nfc(request_var('lang_author', $row['lang_author'], true)),				);				$db->sql_query('UPDATE ' . LANG_TABLE . '					SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '					WHERE lang_id = ' . $lang_id);				add_log('admin', 'LOG_LANGUAGE_PACK_UPDATED', $sql_ary['lang_english_name']);				trigger_error($user->lang['LANGUAGE_DETAILS_UPDATED'] . adm_back_link($this->u_action));			break;			case 'submit_file':			case 'download_file':			case 'upload_data':				if (!$submit || !check_form_key($form_name))				{					trigger_error($user->lang['FORM_INVALID']. adm_back_link($this->u_action), E_USER_WARNING);				}				if (!$lang_id || empty($_POST['entry']))				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if ($this->language_directory != 'email' && !is_array($_POST['entry']))				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (!$this->language_file || (!$this->language_directory && !in_array($this->language_file, $this->main_files)))				{					trigger_error($user->lang['NO_FILE_SELECTED'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . LANG_TABLE . "					WHERE lang_id = $lang_id";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				// Before we attempt to write anything let's check if the admin really chose a correct filename				switch ($this->language_directory)				{					case 'email':						// Get email templates						$email_files = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'email', 'txt');						$email_files = $email_files['email/'];						if (!in_array($this->language_file, $email_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					case 'acp':						// Get acp files						$acp_files = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'acp', $phpEx);						$acp_files = $acp_files['acp/'];						if (!in_array($this->language_file, $acp_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					case 'mods':						// Get mod files						$mods_files = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'mods', $phpEx);						$mods_files = (isset($mods_files['mods/'])) ? $mods_files['mods/'] : array();						if (!in_array($this->language_file, $mods_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					default:						if (!in_array($this->language_file, $this->main_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;				}				if (!$safe_mode)				{					$mkdir_ary = array('language', 'language/' . $row['lang_iso']);					if ($this->language_directory)					{						$mkdir_ary[] = 'language/' . $row['lang_iso'] . '/' . $this->language_directory;					}					foreach ($mkdir_ary as $dir)					{						$dir = $phpbb_root_path . 'store/' . $dir;						if (!is_dir($dir))						{							if (!@mkdir($dir, 0777))							{								trigger_error("Could not create directory $dir", E_USER_ERROR);							}							@chmod($dir, 0777);						}					}				}				// Get target filename for storage folder				$filename = $this->get_filename($row['lang_iso'], $this->language_directory, $this->language_file, true, true);				$fp = @fopen($phpbb_root_path . $filename, 'wb');				if (!$fp)				{					trigger_error(sprintf($user->lang['UNABLE_TO_WRITE_FILE'], $filename) . adm_back_link($this->u_action . '&amp;id=' . $lang_id . '&amp;action=details&amp;language_file=' . urlencode($selected_lang_file)), E_USER_WARNING);				}				if ($this->language_directory == 'email')				{					// Email Template					$entry = $this->prepare_lang_entry($_POST['entry'], false);					fwrite($fp, $entry);				}				else				{					$name = (($this->language_directory) ? $this->language_directory . '_' : '') . $this->language_file;					$header = str_replace(array('{FILENAME}', '{LANG_NAME}', '{CHANGED}', '{AUTHOR}'), array($name, $row['lang_english_name'], date('Y-m-d', time()), $row['lang_author']), $this->language_file_header);					if (strpos($this->language_file, 'help_') === 0)					{						// Help File						$header .= '$help = array(' . "\n";						fwrite($fp, $header);						foreach ($_POST['entry'] as $key => $value)						{							if (!is_array($value))							{								continue;							}							$entry = "\tarray(\n";							foreach ($value as $_key => $_value)							{								$entry .= "\t\t" . (int) $_key . "\t=> '" . $this->prepare_lang_entry($_value) . "',\n";							}							$entry .= "\t),\n";							fwrite($fp, $entry);						}						$footer = ");\n\n?>";						fwrite($fp, $footer);					}					else					{						// Language File						$header .= $this->lang_header;						fwrite($fp, $header);						foreach ($_POST['entry'] as $key => $value)						{							$entry = $this->format_lang_array($key, $value);							fwrite($fp, $entry);						}						$footer = "));\n\n?>";						fwrite($fp, $footer);					}				}				fclose($fp);				if ($action == 'download_file')				{					header('Pragma: no-cache');					header('Content-Type: application/octetstream; name="' . $this->language_file . '"');					header('Content-disposition: attachment; filename=' . $this->language_file);					$fp = @fopen($phpbb_root_path . $filename, 'rb');					while ($buffer = fread($fp, 1024))					{						echo $buffer;					}					fclose($fp);					add_log('admin', 'LOG_LANGUAGE_FILE_SUBMITTED', $this->language_file);					exit;				}				else if ($action == 'upload_data')				{					$sql = 'SELECT lang_iso						FROM ' . LANG_TABLE . "						WHERE lang_id = $lang_id";					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					$file = request_var('file', '');					$dir = request_var('dir', '');					$selected_lang_file = $dir . '|' . $file;					$old_file = '/' . $this->get_filename($row['lang_iso'], $dir, $file, false, true);					$lang_path = 'language/' . $row['lang_iso'] . '/' . (($dir) ? $dir . '/' : '');					include_once($phpbb_root_path . 'includes/functions_transfer.' . $phpEx);					$method = request_var('method', '');					if ($method != 'ftp' && $method != 'ftp_fsock')					{						trigger_error($user->lang['INVALID_UPLOAD_METHOD'], E_USER_ERROR);					}					$transfer = new $method(request_var('host', ''), request_var('username', ''), request_var('password', ''), request_var('root_path', ''), request_var('port', ''), request_var('timeout', ''));					if (($result = $transfer->open_session()) !== true)					{						trigger_error($user->lang[$result] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id . '&amp;language_file=' . urlencode($selected_lang_file)), E_USER_WARNING);					}					$transfer->rename($lang_path . $file, $lang_path . $file . '.bak');					$result = $transfer->copy_file('store/' . $lang_path . $file, $lang_path . $file);					if ($result === false)					{						// If failed, try to rename again and print error out...						$transfer->delete_file($lang_path . $file);						$transfer->rename($lang_path . $file . '.bak', $lang_path . $file);						trigger_error($user->lang['UPLOAD_FAILED'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id . '&amp;language_file=' . urlencode($selected_lang_file)), E_USER_WARNING);					}					$transfer->close_session();					// Remove from storage folder					if (file_exists($phpbb_root_path . 'store/' . $lang_path . $file))					{						@unlink($phpbb_root_path . 'store/' . $lang_path . $file);					}					add_log('admin', 'LOG_LANGUAGE_FILE_REPLACED', $file);					trigger_error($user->lang['UPLOAD_COMPLETED'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id . '&amp;language_file=' . urlencode($selected_lang_file)));				}				add_log('admin', 'LOG_LANGUAGE_FILE_SUBMITTED', $this->language_file);				$action = 'details';			// no break;			case 'details':				if (!$lang_id)				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$this->page_title = 'LANGUAGE_PACK_DETAILS';				$sql = 'SELECT *					FROM ' . LANG_TABLE . '					WHERE lang_id = ' . $lang_id;				$result = $db->sql_query($sql);				$lang_entries = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$lang_iso = $lang_entries['lang_iso'];				$missing_vars = $missing_files = array();				// Get email templates				$email_files = filelist($phpbb_root_path . 'language/' . $config['default_lang'], 'email', 'txt');				$email_files = $email_files['email/'];				// Get acp files				$acp_files = filelist($phpbb_root_path . 'language/' . $config['default_lang'], 'acp', $phpEx);				$acp_files = $acp_files['acp/'];				// Get mod files				$mods_files = filelist($phpbb_root_path . 'language/' . $config['default_lang'], 'mods', $phpEx);				$mods_files = (isset($mods_files['mods/'])) ? $mods_files['mods/'] : array();				// Check if our current filename matches the files				switch ($this->language_directory)				{					case 'email':						if (!in_array($this->language_file, $email_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					case 'acp':						if (!in_array($this->language_file, $acp_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					case 'mods':						if (!in_array($this->language_file, $mods_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}					break;					default:						if (!in_array($this->language_file, $this->main_files))						{							trigger_error($user->lang['WRONG_LANGUAGE_FILE'] . adm_back_link($this->u_action . '&amp;action=details&amp;id=' . $lang_id), E_USER_WARNING);						}				}				if (isset($_POST['remove_store']))				{					$store_filename = $this->get_filename($lang_iso, $this->language_directory, $this->language_file, true, true);					if (file_exists($phpbb_root_path . $store_filename))					{						@unlink($phpbb_root_path . $store_filename);					}				}				include_once($phpbb_root_path . 'includes/functions_transfer.' . $phpEx);				$methods = transfer::methods();				foreach ($methods as $method)				{					$template->assign_block_vars('buttons', array(						'VALUE' => $method					));				}				$template->assign_vars(array(					'S_DETAILS'			=> true,					'U_ACTION'			=> $this->u_action . "&amp;action=details&amp;id=$lang_id",					'U_BACK'			=> $this->u_action,					'LANG_LOCAL_NAME'	=> $lang_entries['lang_local_name'],					'LANG_ENGLISH_NAME'	=> $lang_entries['lang_english_name'],					'LANG_ISO'			=> $lang_entries['lang_iso'],					'LANG_AUTHOR'		=> $lang_entries['lang_author'],					'ALLOW_UPLOAD'		=> sizeof($methods)					)				);				// If current lang is different from the default lang, then first try to grab missing/additional vars				if ($lang_iso != $config['default_lang'])				{					$is_missing_var = false;					foreach ($this->main_files as $file)					{						if (file_exists($phpbb_root_path . $this->get_filename($lang_iso, '', $file)))						{							$missing_vars[$file] = $this->compare_language_files($config['default_lang'], $lang_iso, '', $file);							if (sizeof($missing_vars[$file]))							{								$is_missing_var = true;							}						}						else						{							$missing_files[] = $this->get_filename($lang_iso, '', $file);						}					}					// Now go through acp/mods directories					foreach ($acp_files as $file)					{						if (file_exists($phpbb_root_path . $this->get_filename($lang_iso, 'acp', $file)))						{							$missing_vars['acp/' . $file] = $this->compare_language_files($config['default_lang'], $lang_iso, 'acp', $file);							if (sizeof($missing_vars['acp/' . $file]))							{								$is_missing_var = true;							}						}						else						{							$missing_files[] = $this->get_filename($lang_iso, 'acp', $file);						}					}					if (sizeof($mods_files))					{						foreach ($mods_files as $file)						{							if (file_exists($phpbb_root_path . $this->get_filename($lang_iso, 'mods', $file)))							{								$missing_vars['mods/' . $file] = $this->compare_language_files($config['default_lang'], $lang_iso, 'mods', $file);								if (sizeof($missing_vars['mods/' . $file]))								{									$is_missing_var = true;								}							}							else							{								$missing_files[] = $this->get_filename($lang_iso, 'mods', $file);							}						}					}					// More missing files... for example email templates?					foreach ($email_files as $file)					{						if (!file_exists($phpbb_root_path . $this->get_filename($lang_iso, 'email', $file)))						{							$missing_files[] = $this->get_filename($lang_iso, 'email', $file);						}					}					if (sizeof($missing_files))					{						$template->assign_vars(array(							'S_MISSING_FILES'		=> true,							'L_MISSING_FILES'		=> sprintf($user->lang['THOSE_MISSING_LANG_FILES'], $lang_entries['lang_local_name']),							'MISSING_FILES'			=> implode('<br />', $missing_files))						);					}					if ($is_missing_var)					{						$template->assign_vars(array(							'S_MISSING_VARS'			=> true,							'L_MISSING_VARS_EXPLAIN'	=> sprintf($user->lang['THOSE_MISSING_LANG_VARIABLES'], $lang_entries['lang_local_name']),							'U_MISSING_ACTION'			=> $this->u_action . "&amp;action=$action&amp;id=$lang_id")						);						foreach ($missing_vars as $file => $vars)						{							if (!sizeof($vars))							{								continue;							}							$template->assign_block_vars('missing', array(								'FILE'			=> $file,								'TPL'			=> $this->print_language_entries($vars, '', false),								'KEY'			=> (strpos($file, '/') === false) ? '|' . $file : str_replace('/', '|', $file))							);						}					}				}				// Main language files				$s_lang_options = '<option value="|common.' . $phpEx . '" class="sep">' . $user->lang['LANGUAGE_FILES'] . '</option>';				foreach ($this->main_files as $file)				{					if (strpos($file, 'help_') === 0)					{						continue;					}					$prefix = (file_exists($phpbb_root_path . $this->get_filename($lang_iso, '', $file, true, true))) ? '* ' : '';					$selected = (!$this->language_directory && $this->language_file == $file) ? ' selected="selected"' : '';					$s_lang_options .= '<option value="|' . $file . '"' . $selected . '>' . $prefix . $file . '</option>';				}				// Help Files				$s_lang_options .= '<option value="|common.' . $phpEx . '" class="sep">' . $user->lang['HELP_FILES'] . '</option>';				foreach ($this->main_files as $file)				{					if (strpos($file, 'help_') !== 0)					{						continue;					}					$prefix = (file_exists($phpbb_root_path . $this->get_filename($lang_iso, '', $file, true, true))) ? '* ' : '';					$selected = (!$this->language_directory && $this->language_file == $file) ? ' selected="selected"' : '';					$s_lang_options .= '<option value="|' . $file . '"' . $selected . '>' . $prefix . $file . '</option>';				}				// Now every other language directory				$check_files = array('email', 'acp', 'mods');				foreach ($check_files as $check)				{					if (!sizeof(${$check . '_files'}))					{						continue;					}					$s_lang_options .= '<option value="|common.' . $phpEx . '" class="sep">' . $user->lang[strtoupper($check) . '_FILES'] . '</option>';					foreach (${$check . '_files'} as $file)					{						$prefix = (file_exists($phpbb_root_path . $this->get_filename($lang_iso, $check, $file, true, true))) ? '* ' : '';						$selected = ($this->language_directory == $check && $this->language_file == $file) ? ' selected="selected"' : '';						$s_lang_options .= '<option value="' . $check . '|' . $file . '"' . $selected . '>' . $prefix . $file . '</option>';					}				}				// Get Language Entries - if saved within store folder, we take this one (with the option to remove it)				$lang = array();				$is_email_file = ($this->language_directory == 'email') ? true : false;				$is_help_file = (strpos($this->language_file, 'help_') === 0) ? true : false;				$file_from_store = (file_exists($phpbb_root_path . $this->get_filename($lang_iso, $this->language_directory, $this->language_file, true, true))) ? true : false;				$no_store_filename = $this->get_filename($lang_iso, $this->language_directory, $this->language_file);				if (!$file_from_store && !file_exists($phpbb_root_path . $no_store_filename))				{					$print_message = sprintf($user->lang['MISSING_LANGUAGE_FILE'], $no_store_filename);				}				else				{					if ($is_email_file)					{						$lang = file_get_contents($phpbb_root_path . $this->get_filename($lang_iso, $this->language_directory, $this->language_file, $file_from_store));					}					else					{						$help = array();						include($phpbb_root_path . $this->get_filename($lang_iso, $this->language_directory, $this->language_file, $file_from_store));						if ($is_help_file)						{							$lang = $help;							unset($help);						}					}					$print_message = (($this->language_directory) ? $this->language_directory . '/' : '') . $this->language_file;				}				// Normal language pack entries				$template->assign_vars(array(					'U_ENTRY_ACTION'		=> $this->u_action . "&amp;action=details&amp;id=$lang_id#entries",					'S_EMAIL_FILE'			=> $is_email_file,					'S_FROM_STORE'			=> $file_from_store,					'S_LANG_OPTIONS'		=> $s_lang_options,					'PRINT_MESSAGE'			=> $print_message,					)				);				if (!$is_email_file)				{					$tpl = '';					$name = (($this->language_directory) ? $this->language_directory . '/' : '') . $this->language_file;					if (isset($missing_vars[$name]) && sizeof($missing_vars[$name]))					{						$tpl .= $this->print_language_entries($missing_vars[$name], '* ');					}					$tpl .= $this->print_language_entries($lang);					$template->assign_var('TPL', $tpl);					unset($tpl);				}				else				{					$template->assign_vars(array(						'LANG'		=> $lang)					);					unset($lang);				}				return;			break;			case 'delete':				if (!$lang_id)				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . LANG_TABLE . '					WHERE lang_id = ' . $lang_id;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if ($row['lang_iso'] == $config['default_lang'])				{					trigger_error($user->lang['NO_REMOVE_DEFAULT_LANG'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (confirm_box(true))				{					$db->sql_query('DELETE FROM ' . LANG_TABLE . ' WHERE lang_id = ' . $lang_id);					$sql = 'UPDATE ' . USERS_TABLE . "						SET user_lang = '" . $db->sql_escape($config['default_lang']) . "'						WHERE user_lang = '" . $db->sql_escape($row['lang_iso']) . "'";					$db->sql_query($sql);					// We also need to remove the translated entries for custom profile fields - we want clean tables, don't we?					$sql = 'DELETE FROM ' . PROFILE_LANG_TABLE . ' WHERE lang_id = ' . $lang_id;					$db->sql_query($sql);					$sql = 'DELETE FROM ' . PROFILE_FIELDS_LANG_TABLE . ' WHERE lang_id = ' . $lang_id;					$db->sql_query($sql);					$sql = 'DELETE FROM ' . STYLES_IMAGESET_DATA_TABLE . " WHERE image_lang = '" . $db->sql_escape($row['lang_iso']) . "'";					$result = $db->sql_query($sql);					$cache->destroy('sql', STYLES_IMAGESET_DATA_TABLE);					add_log('admin', 'LOG_LANGUAGE_PACK_DELETED', $row['lang_english_name']);					trigger_error(sprintf($user->lang['LANGUAGE_PACK_DELETED'], $row['lang_english_name']) . adm_back_link($this->u_action));				}				else				{					$s_hidden_fields = array(						'i'			=> $id,						'mode'		=> $mode,						'action'	=> $action,						'id'		=> $lang_id,					);					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields($s_hidden_fields));				}			break;			case 'install':				$lang_iso = request_var('iso', '');				$lang_iso = basename($lang_iso);				if (!$lang_iso || !file_exists("{$phpbb_root_path}language/$lang_iso/iso.txt"))				{					trigger_error($user->lang['LANGUAGE_PACK_NOT_EXIST'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$file = file("{$phpbb_root_path}language/$lang_iso/iso.txt");				$lang_pack = array(					'iso'		=> $lang_iso,					'name'		=> trim(htmlspecialchars($file[0])),					'local_name'=> trim(htmlspecialchars($file[1], ENT_COMPAT, 'UTF-8')),					'author'	=> trim(htmlspecialchars($file[2], ENT_COMPAT, 'UTF-8'))				);				unset($file);				$sql = 'SELECT lang_iso					FROM ' . LANG_TABLE . "					WHERE lang_iso = '" . $db->sql_escape($lang_iso) . "'";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if ($row)				{					trigger_error($user->lang['LANGUAGE_PACK_ALREADY_INSTALLED'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (!$lang_pack['name'] || !$lang_pack['local_name'])				{					trigger_error($user->lang['INVALID_LANGUAGE_PACK'] . adm_back_link($this->u_action), E_USER_WARNING);				}				// Add language pack				$sql_ary = array(					'lang_iso'			=> $lang_pack['iso'],					'lang_dir'			=> $lang_pack['iso'],					'lang_english_name'	=> $lang_pack['name'],					'lang_local_name'	=> $lang_pack['local_name'],					'lang_author'		=> $lang_pack['author']				);				$db->sql_query('INSERT INTO ' . LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));				$lang_id = $db->sql_nextid();				$valid_localized = array(					'icon_back_top', 'icon_contact_aim', 'icon_contact_email', 'icon_contact_icq', 'icon_contact_jabber', 'icon_contact_msnm', 'icon_contact_pm', 'icon_contact_yahoo', 'icon_contact_www', 'icon_post_delete', 'icon_post_edit', 'icon_post_info', 'icon_post_quote', 'icon_post_report', 'icon_user_online', 'icon_user_offline', 'icon_user_profile', 'icon_user_search', 'icon_user_warn', 'button_pm_forward', 'button_pm_new', 'button_pm_reply', 'button_topic_locked', 'button_topic_new', 'button_topic_reply',				);				$sql_ary = array();				$sql = 'SELECT *					FROM ' . STYLES_IMAGESET_TABLE;				$result = $db->sql_query($sql);				while ($imageset_row = $db->sql_fetchrow($result))				{					if (@file_exists("{$phpbb_root_path}styles/{$imageset_row['imageset_path']}/imageset/{$lang_pack['iso']}/imageset.cfg"))					{						$cfg_data_imageset_data = parse_cfg_file("{$phpbb_root_path}styles/{$imageset_row['imageset_path']}/imageset/{$lang_pack['iso']}/imageset.cfg");						foreach ($cfg_data_imageset_data as $image_name => $value)						{							if (strpos($value, '*') !== false)							{								if (substr($value, -1, 1) === '*')								{									list($image_filename, $image_height) = explode('*', $value);									$image_width = 0;								}								else								{									list($image_filename, $image_height, $image_width) = explode('*', $value);								}							}							else							{								$image_filename = $value;								$image_height = $image_width = 0;							}							if (strpos($image_name, 'img_') === 0 && $image_filename)							{								$image_name = substr($image_name, 4);								if (in_array($image_name, $valid_localized))								{									$sql_ary[] = array(										'image_name'		=> (string) $image_name,										'image_filename'	=> (string) $image_filename,										'image_height'		=> (int) $image_height,										'image_width'		=> (int) $image_width,										'imageset_id'		=> (int) $imageset_row['imageset_id'],										'image_lang'		=> (string) $lang_pack['iso'],									);								}							}						}					}				}				$db->sql_freeresult($result);				if (sizeof($sql_ary))				{					$db->sql_multi_insert(STYLES_IMAGESET_DATA_TABLE, $sql_ary);					$cache->destroy('sql', STYLES_IMAGESET_DATA_TABLE);				}				// Now let's copy the default language entries for custom profile fields for this new language - makes admin's life easier.				$sql = 'SELECT lang_id					FROM ' . LANG_TABLE . "					WHERE lang_iso = '" . $db->sql_escape($config['default_lang']) . "'";				$result = $db->sql_query($sql);				$default_lang_id = (int) $db->sql_fetchfield('lang_id');				$db->sql_freeresult($result);				// We want to notify the admin that custom profile fields need to be updated for the new language.				$notify_cpf_update = false;				// From the mysql documentation:				// Prior to MySQL 4.0.14, the target table of the INSERT statement cannot appear in the FROM clause of the SELECT part of the query. This limitation is lifted in 4.0.14.				// Due to this we stay on the safe side if we do the insertion "the manual way"				$sql = 'SELECT field_id, lang_name, lang_explain, lang_default_value					FROM ' . PROFILE_LANG_TABLE . '					WHERE lang_id = ' . $default_lang_id;				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$row['lang_id'] = $lang_id;					$db->sql_query('INSERT INTO ' . PROFILE_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $row));					$notify_cpf_update = true;				}				$db->sql_freeresult($result);				$sql = 'SELECT field_id, option_id, field_type, lang_value					FROM ' . PROFILE_FIELDS_LANG_TABLE . '					WHERE lang_id = ' . $default_lang_id;				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$row['lang_id'] = $lang_id;					$db->sql_query('INSERT INTO ' . PROFILE_FIELDS_LANG_TABLE . ' ' . $db->sql_build_array('INSERT', $row));					$notify_cpf_update = true;				}				$db->sql_freeresult($result);				add_log('admin', 'LOG_LANGUAGE_PACK_INSTALLED', $lang_pack['name']);				$message = sprintf($user->lang['LANGUAGE_PACK_INSTALLED'], $lang_pack['name']);				$message .= ($notify_cpf_update) ? '<br /><br />' . $user->lang['LANGUAGE_PACK_CPF_UPDATE'] : '';				trigger_error($message . adm_back_link($this->u_action));			break;			case 'download':				if (!$lang_id)				{					trigger_error($user->lang['NO_LANG_ID'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$sql = 'SELECT *					FROM ' . LANG_TABLE . '					WHERE lang_id = ' . $lang_id;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$use_method = request_var('use_method', '');				$methods = array('.tar');				$available_methods = array('.tar.gz' => 'zlib', '.tar.bz2' => 'bz2', '.zip' => 'zlib');				foreach ($available_methods as $type => $module)				{					if (!@extension_loaded($module))					{						continue;					}					$methods[] = $type;				}				// Let the user decide in which format he wants to have the pack				if (!$use_method)				{					$this->page_title = 'SELECT_DOWNLOAD_FORMAT';					$radio_buttons = '';					foreach ($methods as $method)					{						$radio_buttons .= '<label><input type="radio"' . ((!$radio_buttons) ? ' id="use_method"' : '') . ' class="radio" value="' . $method . '" name="use_method" /> ' . $method . '</label>';					}					$template->assign_vars(array(						'S_SELECT_METHOD'		=> true,						'U_BACK'				=> $this->u_action,						'U_ACTION'				=> $this->u_action . "&amp;action=$action&amp;id=$lang_id",						'RADIO_BUTTONS'			=> $radio_buttons)					);					return;				}				if (!in_array($use_method, $methods))				{					$use_method = '.tar';				}				include_once($phpbb_root_path . 'includes/functions_compress.' . $phpEx);				if ($use_method == '.zip')				{					$compress = new compress_zip('w', $phpbb_root_path . 'store/lang_' . $row['lang_iso'] . $use_method);				}				else				{					$compress = new compress_tar('w', $phpbb_root_path . 'store/lang_' . $row['lang_iso'] . $use_method, $use_method);				}				// Get email templates				$email_templates = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'email', 'txt');				$email_templates = $email_templates['email/'];				// Get acp files				$acp_files = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'acp', $phpEx);				$acp_files = $acp_files['acp/'];				// Get mod files				$mod_files = filelist($phpbb_root_path . 'language/' . $row['lang_iso'], 'mods', $phpEx);				$mod_files = (isset($mod_files['mods/'])) ? $mod_files['mods/'] : array();				// Add main files				$this->add_to_archive($compress, $this->main_files, $row['lang_iso']);				// Add search files if they exist...				if (file_exists($phpbb_root_path . 'language/' . $row['lang_iso'] . '/search_ignore_words.' . $phpEx))				{					$this->add_to_archive($compress, array("search_ignore_words.$phpEx"), $row['lang_iso']);				}				if (file_exists($phpbb_root_path . 'language/' . $row['lang_iso'] . '/search_synonyms.' . $phpEx))				{					$this->add_to_archive($compress, array("search_synonyms.$phpEx"), $row['lang_iso']);				}				// Write files in folders				$this->add_to_archive($compress, $email_templates, $row['lang_iso'], 'email');				$this->add_to_archive($compress, $acp_files, $row['lang_iso'], 'acp');				$this->add_to_archive($compress, $mod_files, $row['lang_iso'], 'mods');				// Write ISO File				$iso_src = htmlspecialchars_decode($row['lang_english_name']) . "\n";				$iso_src .= htmlspecialchars_decode($row['lang_local_name']) . "\n";				$iso_src .= htmlspecialchars_decode($row['lang_author']);				$compress->add_data($iso_src, 'language/' . $row['lang_iso'] . '/iso.txt');				// index.htm files				$compress->add_data('', 'language/' . $row['lang_iso'] . '/index.htm');				$compress->add_data('', 'language/' . $row['lang_iso'] . '/email/index.htm');				$compress->add_data('', 'language/' . $row['lang_iso'] . '/acp/index.htm');				if (sizeof($mod_files))				{					$compress->add_data('', 'language/' . $row['lang_iso'] . '/mods/index.htm');				}				$compress->close();				$compress->download('lang_' . $row['lang_iso']);				@unlink($phpbb_root_path . 'store/lang_' . $row['lang_iso'] . $use_method);				exit;			break;		}		$sql = 'SELECT user_lang, COUNT(user_lang) AS lang_count			FROM ' . USERS_TABLE . '			GROUP BY user_lang';		$result = $db->sql_query($sql);		$lang_count = array();		while ($row = $db->sql_fetchrow($result))		{			$lang_count[$row['user_lang']] = $row['lang_count'];		}		$db->sql_freeresult($result);		$sql = 'SELECT *			FROM ' . LANG_TABLE . '			ORDER BY lang_english_name';		$result = $db->sql_query($sql);		$installed = array();		while ($row = $db->sql_fetchrow($result))		{			$installed[] = $row['lang_iso'];			$tagstyle = ($row['lang_iso'] == $config['default_lang']) ? '*' : '';			$template->assign_block_vars('lang', array(				'U_DETAILS'			=> $this->u_action . "&amp;action=details&amp;id={$row['lang_id']}",				'U_DOWNLOAD'		=> $this->u_action . "&amp;action=download&amp;id={$row['lang_id']}",				'U_DELETE'			=> $this->u_action . "&amp;action=delete&amp;id={$row['lang_id']}",				'ENGLISH_NAME'		=> $row['lang_english_name'],				'TAG'				=> $tagstyle,				'LOCAL_NAME'		=> $row['lang_local_name'],				'ISO'				=> $row['lang_iso'],				'USED_BY'			=> (isset($lang_count[$row['lang_iso']])) ? $lang_count[$row['lang_iso']] : 0,			));		}		$db->sql_freeresult($result);		$new_ary = $iso = array();		$dp = @opendir("{$phpbb_root_path}language");		if ($dp)		{			while (($file = readdir($dp)) !== false)			{				if ($file[0] == '.' || !is_dir($phpbb_root_path . 'language/' . $file))				{					continue;				}				if (file_exists("{$phpbb_root_path}language/$file/iso.txt"))				{					if (!in_array($file, $installed))					{						if ($iso = file("{$phpbb_root_path}language/$file/iso.txt"))						{							if (sizeof($iso) == 3)							{								$new_ary[$file] = array(									'iso'		=> $file,									'name'		=> trim($iso[0]),									'local_name'=> trim($iso[1]),									'author'	=> trim($iso[2])								);							}						}					}				}			}			closedir($dp);		}		unset($installed);		if (sizeof($new_ary))		{			foreach ($new_ary as $iso => $lang_ary)			{				$template->assign_block_vars('notinst', array(					'ISO'			=> htmlspecialchars($lang_ary['iso']),					'LOCAL_NAME'	=> htmlspecialchars($lang_ary['local_name'], ENT_COMPAT, 'UTF-8'),					'NAME'			=> htmlspecialchars($lang_ary['name'], ENT_COMPAT, 'UTF-8'),					'U_INSTALL'		=> $this->u_action . '&amp;action=install&amp;iso=' . urlencode($lang_ary['iso']))				);			}		}		unset($new_ary);	}	/**	* Set default language variables/header	*/	function default_variables()	{		global $phpEx;		$this->language_file_header = '<?php/**** {FILENAME} [{LANG_NAME}]** @package language* @version $' . 'Id: ' . '$* @copyright (c) ' . date('Y') . ' phpBB Group* @author {CHANGED} - {AUTHOR}* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined(\'IN_PHPBB\')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// \'Page %s of %s\' you can (and should) write \'Page %1$s of %2$s\', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. \'Message %d\' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., \'Click %sHERE%s\' is fine';		$this->lang_header = '$lang = array_merge($lang, array(';		// Language files in language root directory		$this->main_files = array("captcha_qa.$phpEx", "captcha_recaptcha.$phpEx", "common.$phpEx", "groups.$phpEx", "install.$phpEx", "mcp.$phpEx", "memberlist.$phpEx", "posting.$phpEx", "search.$phpEx", "ucp.$phpEx", "viewforum.$phpEx", "viewtopic.$phpEx", "help_bbcode.$phpEx", "help_faq.$phpEx");	}	/**	* Get filename/location of language file	*/	function get_filename($lang_iso, $directory, $filename, $check_store = false, $only_return_filename = false)	{		global $phpbb_root_path, $safe_mode;		$check_filename = "language/$lang_iso/" . (($directory) ? $directory . '/' : '') . $filename;		if ($check_store)		{			$check_store_filename = ($safe_mode) ? "store/langfile_{$lang_iso}" . (($directory) ? '_' . $directory : '') . "_{$filename}" : "store/language/$lang_iso/" . (($directory) ? $directory . '/' : '') . $filename;			if (!$only_return_filename && file_exists($phpbb_root_path . $check_store_filename))			{				return $check_store_filename;			}			else if ($only_return_filename)			{				return $check_store_filename;			}		}		return $check_filename;	}	/**	* Add files to archive	*/	function add_to_archive(&$compress, $filelist, $lang_iso, $directory = '')	{		global $phpbb_root_path;		foreach ($filelist as $file)		{			// Get source filename			$source = $this->get_filename($lang_iso, $directory, $file, true);			$destination = 'language/' . $lang_iso . '/' . (($directory) ? $directory . '/' : '') . $file;			// Add file to archive			$compress->add_custom_file($phpbb_root_path . $source, $destination);		}	}	/**	* Little helper to add some hardcoded template bits	*/	function add_input_field()	{		$keys = func_get_args();		$non_static		= array_shift($keys);		$value			= utf8_normalize_nfc(array_shift($keys));		if (!$non_static)		{			return '<strong>' . htmlspecialchars($value, ENT_COMPAT, 'UTF-8') . '</strong>';		}		// If more then 270 characters, then we present a textarea, else an input field		$textarea = (utf8_strlen($value) > 270) ? true : false;		$tpl = '';		$tpl .= ($textarea) ? '<textarea name="' : '<input type="text" name="';		$tpl .= 'entry[' . implode('][', array_map('utf8_htmlspecialchars', $keys)) . ']"';		$tpl .= ($textarea) ? ' cols="80" rows="5" class="langvalue">' : ' class="langvalue" value="';		$tpl .= htmlspecialchars($value, ENT_COMPAT, 'UTF-8');		$tpl .= ($textarea) ? '</textarea>' : '" />';		return $tpl;	}	/**	* Print language entries	*/	function print_language_entries(&$lang_ary, $key_prefix = '', $input_field = true)	{		$tpl = '';		foreach ($lang_ary as $key => $value)		{			if (is_array($value))			{				// Write key				$tpl .= '				<tr>					<td class="row3" colspan="2">' . htmlspecialchars($key_prefix, ENT_COMPAT, 'UTF-8') . '<strong>' . htmlspecialchars($key, ENT_COMPAT, 'UTF-8') . '</strong></td>				</tr>';				foreach ($value as $_key => $_value)				{					if (is_array($_value))					{						// Write key						$tpl .= '							<tr>								<td class="row3" colspan="2">' . htmlspecialchars($key_prefix, ENT_COMPAT, 'UTF-8') . '&nbsp; &nbsp;<strong>' . htmlspecialchars($_key, ENT_COMPAT, 'UTF-8') . '</strong></td>							</tr>';						foreach ($_value as $__key => $__value)						{							// Write key							$tpl .= '								<tr>									<td class="row1" style="white-space: nowrap;">' . htmlspecialchars($key_prefix, ENT_COMPAT, 'UTF-8') . '<strong>' . htmlspecialchars($__key, ENT_COMPAT, 'UTF-8') . '</strong></td>									<td class="row2">';							$tpl .= $this->add_input_field($input_field, $__value, $key, $_key, $__key);							$tpl .= '</td>								</tr>';						}					}					else					{						// Write key						$tpl .= '							<tr>								<td class="row1" style="white-space: nowrap;">' . htmlspecialchars($key_prefix, ENT_COMPAT, 'UTF-8') . '<strong>' . htmlspecialchars($_key, ENT_COMPAT, 'UTF-8') . '</strong></td>								<td class="row2">';						$tpl .= $this->add_input_field($input_field, $_value, $key, $_key);						$tpl .= '</td>							</tr>';					}				}				$tpl .= '				<tr>					<td class="spacer" colspan="2">&nbsp;</td>				</tr>';			}			else			{				// Write key				$tpl .= '				<tr>					<td class="row1" style="white-space: nowrap;">' . htmlspecialchars($key_prefix, ENT_COMPAT, 'UTF-8') . '<strong>' . htmlspecialchars($key, ENT_COMPAT, 'UTF-8') . '</strong></td>					<td class="row2">';				$tpl .= $this->add_input_field($input_field, $value, $key);				$tpl .= '</td>					</tr>';			}		}		return $tpl;	}	/**	* Compare two language files	*/	function compare_language_files($source_lang, $dest_lang, $directory, $file)	{		global $phpbb_root_path, $phpEx;		$return_ary = array();		$lang = array();		include("{$phpbb_root_path}language/{$source_lang}/" . (($directory) ? $directory . '/' : '') . $file);		$lang_entry_src = $lang;		$lang = array();		if (!file_exists($phpbb_root_path . $this->get_filename($dest_lang, $directory, $file, true)))		{			return array();		}		include($phpbb_root_path . $this->get_filename($dest_lang, $directory, $file, true));		$lang_entry_dst = $lang;		unset($lang);		$diff_array_keys = array_diff(array_keys($lang_entry_src), array_keys($lang_entry_dst));		unset($lang_entry_dst);		foreach ($diff_array_keys as $key)		{			$return_ary[$key] = $lang_entry_src[$key];		}		unset($lang_entry_src);		return $return_ary;	}	/**	* Return language string value for storage	*/	function prepare_lang_entry($text, $store = true)	{		$text = (STRIP) ? stripslashes($text) : $text;		// Adjust for storage...		if ($store)		{			$text = str_replace("'", "\\'", str_replace('\\', '\\\\', $text));		}		return $text;	}	/**	* Format language array for storage	*/	function format_lang_array($key, $value, $tabs = "\t")	{		$entry = '';		if (!is_array($value))		{			$entry .= "{$tabs}'" . $this->prepare_lang_entry($key) . "'\t=> '" . $this->prepare_lang_entry($value) . "',\n";		}		else		{			$_tabs = $tabs . "\t";			$entry .= "\n{$tabs}'" . $this->prepare_lang_entry($key) . "'\t=> array(\n";			foreach ($value as $_key => $_value)			{				$entry .= $this->format_lang_array($_key, $_value, $_tabs);			}			$entry .= "{$tabs}),\n\n";		}		return $entry;	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License** @todo add cron intervals to server settings? (database_gc, queue_interval, session_gc, search_gc, cache_gc, warnings_gc)*//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_board{	var $u_action;	var $new_config = array();	function main($id, $mode)	{		global $db, $user, $auth, $template;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		global $cache;		$user->add_lang('acp/board');		$action	= request_var('action', '');		$submit = (isset($_POST['submit']) || isset($_POST['allow_quick_reply_enable'])) ? true : false;		$form_key = 'acp_board';		add_form_key($form_key);		/**		*	Validation types are:		*		string, int, bool,		*		script_path (absolute path in url - beginning with / and no trailing slash),		*		rpath (relative), rwpath (realtive, writable), path (relative path, but able to escape the root), wpath (writable)		*/		switch ($mode)		{			case 'settings':				$display_vars = array(					'title'	=> 'ACP_BOARD_SETTINGS',					'vars'	=> array(						'legend1'				=> 'ACP_BOARD_SETTINGS',						'sitename'				=> array('lang' => 'SITE_NAME',				'validate' => 'string',	'type' => 'text:40:255', 'explain' => false),						'site_desc'				=> array('lang' => 'SITE_DESC',				'validate' => 'string',	'type' => 'text:40:255', 'explain' => false),						'board_disable'			=> array('lang' => 'DISABLE_BOARD',			'validate' => 'bool',	'type' => 'custom', 'method' => 'board_disable', 'explain' => true),						'board_disable_msg'		=> false,						'default_lang'			=> array('lang' => 'DEFAULT_LANGUAGE',		'validate' => 'lang',	'type' => 'select', 'function' => 'language_select', 'params' => array('{CONFIG_VALUE}'), 'explain' => false),						'default_dateformat'	=> array('lang' => 'DEFAULT_DATE_FORMAT',	'validate' => 'string',	'type' => 'custom', 'method' => 'dateformat_select', 'explain' => true),						'board_timezone'		=> array('lang' => 'SYSTEM_TIMEZONE',		'validate' => 'string',	'type' => 'select', 'function' => 'tz_select', 'params' => array('{CONFIG_VALUE}', 1), 'explain' => true),						'board_dst'				=> array('lang' => 'SYSTEM_DST',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'default_style'			=> array('lang' => 'DEFAULT_STYLE',			'validate' => 'int',	'type' => 'select', 'function' => 'style_select', 'params' => array('{CONFIG_VALUE}', false), 'explain' => false),						'override_user_style'	=> array('lang' => 'OVERRIDE_STYLE',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'legend2'				=> 'WARNINGS',						'warnings_expire_days'	=> array('lang' => 'WARNINGS_EXPIRE',		'validate' => 'int',	'type' => 'text:3:4', 'explain' => true, 'append' => ' ' . $user->lang['DAYS']),						'legend3'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'features':				$display_vars = array(					'title'	=> 'ACP_BOARD_FEATURES',					'vars'	=> array(						'legend1'				=> 'ACP_BOARD_FEATURES',						'allow_privmsg'			=> array('lang' => 'BOARD_PM',				'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_topic_notify'	=> array('lang' => 'ALLOW_TOPIC_NOTIFY',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_forum_notify'	=> array('lang' => 'ALLOW_FORUM_NOTIFY',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_namechange'		=> array('lang' => 'ALLOW_NAME_CHANGE',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_attachments'		=> array('lang' => 'ALLOW_ATTACHMENTS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_pm_attach'		=> array('lang' => 'ALLOW_PM_ATTACHMENTS',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_pm_report'		=> array('lang' => 'ALLOW_PM_REPORT',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_bbcode'			=> array('lang' => 'ALLOW_BBCODE',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_smilies'			=> array('lang' => 'ALLOW_SMILIES',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig'				=> array('lang' => 'ALLOW_SIG',				'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_nocensors'		=> array('lang' => 'ALLOW_NO_CENSORS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_bookmarks'		=> array('lang' => 'ALLOW_BOOKMARKS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_birthdays'		=> array('lang' => 'ALLOW_BIRTHDAYS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_quick_reply'		=> array('lang' => 'ALLOW_QUICK_REPLY',		'validate' => 'bool',	'type' => 'custom', 'method' => 'quick_reply', 'explain' => true),						'legend2'				=> 'ACP_LOAD_SETTINGS',						'load_birthdays'		=> array('lang' => 'YES_BIRTHDAYS',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_moderators'		=> array('lang' => 'YES_MODERATORS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_jumpbox'			=> array('lang' => 'YES_JUMPBOX',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_cpf_memberlist'	=> array('lang' => 'LOAD_CPF_MEMBERLIST',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_cpf_viewprofile'	=> array('lang' => 'LOAD_CPF_VIEWPROFILE',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_cpf_viewtopic'	=> array('lang' => 'LOAD_CPF_VIEWTOPIC',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'legend3'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'avatar':				$display_vars = array(					'title'	=> 'ACP_AVATAR_SETTINGS',					'vars'	=> array(						'legend1'				=> 'ACP_AVATAR_SETTINGS',						'avatar_min_width'		=> array('lang' => 'MIN_AVATAR_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'avatar_min_height'		=> array('lang' => 'MIN_AVATAR_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'avatar_max_width'		=> array('lang' => 'MAX_AVATAR_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'avatar_max_height'		=> array('lang' => 'MAX_AVATAR_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'allow_avatar'			=> array('lang' => 'ALLOW_AVATARS',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_avatar_local'	=> array('lang' => 'ALLOW_LOCAL',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_avatar_remote'	=> array('lang' => 'ALLOW_REMOTE',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_avatar_upload'	=> array('lang' => 'ALLOW_UPLOAD',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_avatar_remote_upload'=> array('lang' => 'ALLOW_REMOTE_UPLOAD', 'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'avatar_filesize'		=> array('lang' => 'MAX_FILESIZE',			'validate' => 'int:0',	'type' => 'text:4:10', 'explain' => true, 'append' => ' ' . $user->lang['BYTES']),						'avatar_min'			=> array('lang' => 'MIN_AVATAR_SIZE',		'validate' => 'int:0',	'type' => 'dimension:3:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'avatar_max'			=> array('lang' => 'MAX_AVATAR_SIZE',		'validate' => 'int:0',	'type' => 'dimension:3:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'avatar_path'			=> array('lang' => 'AVATAR_STORAGE_PATH',	'validate' => 'rwpath',	'type' => 'text:20:255', 'explain' => true),						'avatar_gallery_path'	=> array('lang' => 'AVATAR_GALLERY_PATH',	'validate' => 'rpath',	'type' => 'text:20:255', 'explain' => true)					)				);			break;			case 'message':				$display_vars = array(					'title'	=> 'ACP_MESSAGE_SETTINGS',					'lang'	=> 'ucp',					'vars'	=> array(						'legend1'				=> 'GENERAL_SETTINGS',						'allow_privmsg'			=> array('lang' => 'BOARD_PM',				'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'pm_max_boxes'			=> array('lang' => 'BOXES_MAX',				'validate' => 'int:0',	'type' => 'text:4:4', 'explain' => true),						'pm_max_msgs'			=> array('lang' => 'BOXES_LIMIT',			'validate' => 'int:0',	'type' => 'text:4:4', 'explain' => true),						'full_folder_action'	=> array('lang' => 'FULL_FOLDER_ACTION',	'validate' => 'int',	'type' => 'select', 'method' => 'full_folder_select', 'explain' => true),						'pm_edit_time'			=> array('lang' => 'PM_EDIT_TIME',			'validate' => 'int:0',	'type' => 'text:5:5', 'explain' => true, 'append' => ' ' . $user->lang['MINUTES']),						'pm_max_recipients'		=> array('lang' => 'PM_MAX_RECIPIENTS',		'validate' => 'int:0',	'type' => 'text:5:5', 'explain' => true),						'legend2'				=> 'GENERAL_OPTIONS',						'allow_mass_pm'			=> array('lang' => 'ALLOW_MASS_PM',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'auth_bbcode_pm'		=> array('lang' => 'ALLOW_BBCODE_PM',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'auth_smilies_pm'		=> array('lang' => 'ALLOW_SMILIES_PM',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_pm_attach'		=> array('lang' => 'ALLOW_PM_ATTACHMENTS',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig_pm'			=> array('lang' => 'ALLOW_SIG_PM',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'print_pm'				=> array('lang' => 'ALLOW_PRINT_PM',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'forward_pm'			=> array('lang' => 'ALLOW_FORWARD_PM',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'auth_img_pm'			=> array('lang' => 'ALLOW_IMG_PM',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'auth_flash_pm'			=> array('lang' => 'ALLOW_FLASH_PM',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'enable_pm_icons'		=> array('lang' => 'ENABLE_PM_ICONS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'legend3'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'post':				$display_vars = array(					'title'	=> 'ACP_POST_SETTINGS',					'vars'	=> array(						'legend1'				=> 'GENERAL_OPTIONS',						'allow_topic_notify'	=> array('lang' => 'ALLOW_TOPIC_NOTIFY',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_forum_notify'	=> array('lang' => 'ALLOW_FORUM_NOTIFY',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_bbcode'			=> array('lang' => 'ALLOW_BBCODE',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_post_flash'		=> array('lang' => 'ALLOW_POST_FLASH',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_smilies'			=> array('lang' => 'ALLOW_SMILIES',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_post_links'		=> array('lang' => 'ALLOW_POST_LINKS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_nocensors'		=> array('lang' => 'ALLOW_NO_CENSORS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_bookmarks'		=> array('lang' => 'ALLOW_BOOKMARKS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'enable_post_confirm'	=> array('lang' => 'VISUAL_CONFIRM_POST',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'allow_quick_reply'		=> array('lang' => 'ALLOW_QUICK_REPLY',		'validate' => 'bool',	'type' => 'custom', 'method' => 'quick_reply', 'explain' => true),						'legend2'				=> 'POSTING',						'bump_type'				=> false,						'edit_time'				=> array('lang' => 'EDIT_TIME',				'validate' => 'int:0',		'type' => 'text:5:5', 'explain' => true, 'append' => ' ' . $user->lang['MINUTES']),						'delete_time'			=> array('lang' => 'DELETE_TIME',			'validate' => 'int:0',		'type' => 'text:5:5', 'explain' => true, 'append' => ' ' . $user->lang['MINUTES']),						'display_last_edited'	=> array('lang' => 'DISPLAY_LAST_EDITED',	'validate' => 'bool',		'type' => 'radio:yes_no', 'explain' => true),						'flood_interval'		=> array('lang' => 'FLOOD_INTERVAL',		'validate' => 'int:0',		'type' => 'text:3:10', 'explain' => true, 'append' => ' ' . $user->lang['SECONDS']),						'bump_interval'			=> array('lang' => 'BUMP_INTERVAL',			'validate' => 'int:0',		'type' => 'custom', 'method' => 'bump_interval', 'explain' => true),						'topics_per_page'		=> array('lang' => 'TOPICS_PER_PAGE',		'validate' => 'int:1',		'type' => 'text:3:4', 'explain' => false),						'posts_per_page'		=> array('lang' => 'POSTS_PER_PAGE',		'validate' => 'int:1',		'type' => 'text:3:4', 'explain' => false),						'smilies_per_page'		=> array('lang' => 'SMILIES_PER_PAGE',		'validate' => 'int:1',		'type' => 'text:3:4', 'explain' => false),						'hot_threshold'			=> array('lang' => 'HOT_THRESHOLD',			'validate' => 'int:0',		'type' => 'text:3:4', 'explain' => true),						'max_poll_options'		=> array('lang' => 'MAX_POLL_OPTIONS',		'validate' => 'int:2:127',	'type' => 'text:4:4', 'explain' => false),						'max_post_chars'		=> array('lang' => 'CHAR_LIMIT',			'validate' => 'int:0',		'type' => 'text:4:6', 'explain' => true),						'min_post_chars'		=> array('lang' => 'MIN_CHAR_LIMIT',		'validate' => 'int:1',		'type' => 'text:4:6', 'explain' => true),						'max_post_smilies'		=> array('lang' => 'SMILIES_LIMIT',			'validate' => 'int:0',		'type' => 'text:4:4', 'explain' => true),						'max_post_urls'			=> array('lang' => 'MAX_POST_URLS',			'validate' => 'int:0',		'type' => 'text:5:4', 'explain' => true),						'max_post_font_size'	=> array('lang' => 'MAX_POST_FONT_SIZE',	'validate' => 'int:0',		'type' => 'text:5:4', 'explain' => true, 'append' => ' %'),						'max_quote_depth'		=> array('lang' => 'QUOTE_DEPTH_LIMIT',		'validate' => 'int:0',		'type' => 'text:4:4', 'explain' => true),						'max_post_img_width'	=> array('lang' => 'MAX_POST_IMG_WIDTH',	'validate' => 'int:0',		'type' => 'text:5:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'max_post_img_height'	=> array('lang' => 'MAX_POST_IMG_HEIGHT',	'validate' => 'int:0',		'type' => 'text:5:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'legend3'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'signature':				$display_vars = array(					'title'	=> 'ACP_SIGNATURE_SETTINGS',					'vars'	=> array(						'legend1'				=> 'GENERAL_OPTIONS',						'allow_sig'				=> array('lang' => 'ALLOW_SIG',				'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig_bbcode'		=> array('lang' => 'ALLOW_SIG_BBCODE',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig_img'			=> array('lang' => 'ALLOW_SIG_IMG',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig_flash'		=> array('lang' => 'ALLOW_SIG_FLASH',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig_smilies'		=> array('lang' => 'ALLOW_SIG_SMILIES',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_sig_links'		=> array('lang' => 'ALLOW_SIG_LINKS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'legend2'				=> 'GENERAL_SETTINGS',						'max_sig_chars'			=> array('lang' => 'MAX_SIG_LENGTH',		'validate' => 'int:0',	'type' => 'text:5:4', 'explain' => true),						'max_sig_urls'			=> array('lang' => 'MAX_SIG_URLS',			'validate' => 'int:0',	'type' => 'text:5:4', 'explain' => true),						'max_sig_font_size'		=> array('lang' => 'MAX_SIG_FONT_SIZE',		'validate' => 'int:0',	'type' => 'text:5:4', 'explain' => true, 'append' => ' %'),						'max_sig_smilies'		=> array('lang' => 'MAX_SIG_SMILIES',		'validate' => 'int:0',	'type' => 'text:5:4', 'explain' => true),						'max_sig_img_width'		=> array('lang' => 'MAX_SIG_IMG_WIDTH',		'validate' => 'int:0',	'type' => 'text:5:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'max_sig_img_height'	=> array('lang' => 'MAX_SIG_IMG_HEIGHT',	'validate' => 'int:0',	'type' => 'text:5:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'legend3'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'registration':				$display_vars = array(					'title'	=> 'ACP_REGISTER_SETTINGS',					'vars'	=> array(						'legend1'				=> 'GENERAL_SETTINGS',						'max_name_chars'		=> array('lang' => 'USERNAME_LENGTH', 'validate' => 'int:8:180', 'type' => false, 'method' => false, 'explain' => false,),						'max_pass_chars'		=> array('lang' => 'PASSWORD_LENGTH', 'validate' => 'int:8:255', 'type' => false, 'method' => false, 'explain' => false,),						'require_activation'	=> array('lang' => 'ACC_ACTIVATION',	'validate' => 'int',	'type' => 'custom', 'method' => 'select_acc_activation', 'explain' => true),						'new_member_post_limit'	=> array('lang' => 'NEW_MEMBER_POST_LIMIT', 'validate' => 'int:0:255', 'type' => 'text:4:4', 'explain' => true, 'append' => ' ' . $user->lang['POSTS']),						'new_member_group_default'=> array('lang' => 'NEW_MEMBER_GROUP_DEFAULT', 'validate' => 'bool', 'type' => 'radio:yes_no', 'explain' => true),						'min_name_chars'		=> array('lang' => 'USERNAME_LENGTH',	'validate' => 'int:1',	'type' => 'custom:5:180', 'method' => 'username_length', 'explain' => true),						'min_pass_chars'		=> array('lang' => 'PASSWORD_LENGTH',	'validate' => 'int:1',	'type' => 'custom', 'method' => 'password_length', 'explain' => true),						'allow_name_chars'		=> array('lang' => 'USERNAME_CHARS',	'validate' => 'string',	'type' => 'select', 'method' => 'select_username_chars', 'explain' => true),						'pass_complex'			=> array('lang' => 'PASSWORD_TYPE',		'validate' => 'string',	'type' => 'select', 'method' => 'select_password_chars', 'explain' => true),						'chg_passforce'			=> array('lang' => 'FORCE_PASS_CHANGE',	'validate' => 'int:0',	'type' => 'text:3:3', 'explain' => true, 'append' => ' ' . $user->lang['DAYS']),						'legend2'				=> 'GENERAL_OPTIONS',						'allow_namechange'		=> array('lang' => 'ALLOW_NAME_CHANGE',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_emailreuse'		=> array('lang' => 'ALLOW_EMAIL_REUSE',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'enable_confirm'		=> array('lang' => 'VISUAL_CONFIRM_REG',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'max_login_attempts'	=> array('lang' => 'MAX_LOGIN_ATTEMPTS',	'validate' => 'int:0',	'type' => 'text:3:3', 'explain' => true),						'max_reg_attempts'		=> array('lang' => 'REG_LIMIT',				'validate' => 'int:0',	'type' => 'text:4:4', 'explain' => true),						'legend3'			=> 'COPPA',						'coppa_enable'		=> array('lang' => 'ENABLE_COPPA',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'coppa_mail'		=> array('lang' => 'COPPA_MAIL',		'validate' => 'string',	'type' => 'textarea:5:40', 'explain' => true),						'coppa_fax'			=> array('lang' => 'COPPA_FAX',			'validate' => 'string',	'type' => 'text:25:100', 'explain' => false),						'legend4'			=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'feed':				$display_vars = array(					'title'	=> 'ACP_FEED_MANAGEMENT',					'vars'	=> array(						'legend1'					=> 'ACP_FEED_GENERAL',						'feed_enable'				=> array('lang' => 'ACP_FEED_ENABLE',				'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'feed_item_statistics'		=> array('lang' => 'ACP_FEED_ITEM_STATISTICS',		'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true),						'feed_http_auth'			=> array('lang' => 'ACP_FEED_HTTP_AUTH',			'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true),						'legend2'					=> 'ACP_FEED_POST_BASED',						'feed_limit_post'			=> array('lang' => 'ACP_FEED_LIMIT',				'validate' => 'int:5',	'type' => 'text:3:4',				'explain' => true),						'feed_overall'				=> array('lang' => 'ACP_FEED_OVERALL',				'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'feed_forum'				=> array('lang' => 'ACP_FEED_FORUM',				'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'feed_topic'				=> array('lang' => 'ACP_FEED_TOPIC',				'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'legend3'					=> 'ACP_FEED_TOPIC_BASED',						'feed_limit_topic'			=> array('lang' => 'ACP_FEED_LIMIT',				'validate' => 'int:5',	'type' => 'text:3:4',				'explain' => true),						'feed_topics_new'			=> array('lang' => 'ACP_FEED_TOPICS_NEW',			'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'feed_topics_active'		=> array('lang' => 'ACP_FEED_TOPICS_ACTIVE',		'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'feed_news_id'				=> array('lang' => 'ACP_FEED_NEWS',					'validate' => 'string',	'type' => 'custom', 'method' => 'select_news_forums', 'explain' => true),						'legend4'					=> 'ACP_FEED_SETTINGS_OTHER',						'feed_overall_forums'		=> array('lang'	=> 'ACP_FEED_OVERALL_FORUMS',		'validate' => 'bool',	'type' => 'radio:enabled_disabled',	'explain' => true ),						'feed_exclude_id'			=> array('lang' => 'ACP_FEED_EXCLUDE_ID',			'validate' => 'string',	'type' => 'custom', 'method' => 'select_exclude_forums', 'explain' => true),					)				);			break;			case 'cookie':				$display_vars = array(					'title'	=> 'ACP_COOKIE_SETTINGS',					'vars'	=> array(						'legend1'		=> 'ACP_COOKIE_SETTINGS',						'cookie_domain'	=> array('lang' => 'COOKIE_DOMAIN',	'validate' => 'string',	'type' => 'text::255', 'explain' => false),						'cookie_name'	=> array('lang' => 'COOKIE_NAME',	'validate' => 'string',	'type' => 'text::16', 'explain' => false),						'cookie_path'	=> array('lang'	=> 'COOKIE_PATH',	'validate' => 'string',	'type' => 'text::255', 'explain' => false),						'cookie_secure'	=> array('lang' => 'COOKIE_SECURE',	'validate' => 'bool',	'type' => 'radio:disabled_enabled', 'explain' => true)					)				);			break;			case 'load':				$display_vars = array(					'title'	=> 'ACP_LOAD_SETTINGS',					'vars'	=> array(						'legend1'			=> 'GENERAL_SETTINGS',						'limit_load'		=> array('lang' => 'LIMIT_LOAD',		'validate' => 'string',	'type' => 'text:4:4', 'explain' => true),						'session_length'	=> array('lang' => 'SESSION_LENGTH',	'validate' => 'int:60',	'type' => 'text:5:10', 'explain' => true, 'append' => ' ' . $user->lang['SECONDS']),						'active_sessions'	=> array('lang' => 'LIMIT_SESSIONS',	'validate' => 'int:0',	'type' => 'text:4:4', 'explain' => true),						'load_online_time'	=> array('lang' => 'ONLINE_LENGTH',		'validate' => 'int:0',	'type' => 'text:4:3', 'explain' => true, 'append' => ' ' . $user->lang['MINUTES']),						'legend2'				=> 'GENERAL_OPTIONS',						'load_db_track'			=> array('lang' => 'YES_POST_MARKING',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_db_lastread'		=> array('lang' => 'YES_READ_MARKING',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_anon_lastread'	=> array('lang' => 'YES_ANON_READ_MARKING',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_online'			=> array('lang' => 'YES_ONLINE',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_online_guests'	=> array('lang' => 'YES_ONLINE_GUESTS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_onlinetrack'		=> array('lang' => 'YES_ONLINE_TRACK',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_birthdays'		=> array('lang' => 'YES_BIRTHDAYS',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_unreads_search'	=> array('lang' => 'YES_UNREAD_SEARCH',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_moderators'		=> array('lang' => 'YES_MODERATORS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_jumpbox'			=> array('lang' => 'YES_JUMPBOX',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_user_activity'	=> array('lang' => 'LOAD_USER_ACTIVITY',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'load_tplcompile'		=> array('lang' => 'RECOMPILE_STYLES',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'legend3'				=> 'CUSTOM_PROFILE_FIELDS',						'load_cpf_memberlist'	=> array('lang' => 'LOAD_CPF_MEMBERLIST',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_cpf_viewprofile'	=> array('lang' => 'LOAD_CPF_VIEWPROFILE',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'load_cpf_viewtopic'	=> array('lang' => 'LOAD_CPF_VIEWTOPIC',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'legend4'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'auth':				$display_vars = array(					'title'	=> 'ACP_AUTH_SETTINGS',					'vars'	=> array(						'legend1'		=> 'ACP_AUTH_SETTINGS',						'auth_method'	=> array('lang' => 'AUTH_METHOD',	'validate' => 'string',	'type' => 'select', 'method' => 'select_auth_method', 'explain' => false)					)				);			break;			case 'server':				$display_vars = array(					'title'	=> 'ACP_SERVER_SETTINGS',					'vars'	=> array(						'legend1'				=> 'ACP_SERVER_SETTINGS',						'gzip_compress'			=> array('lang' => 'ENABLE_GZIP',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'legend2'				=> 'PATH_SETTINGS',						'smilies_path'			=> array('lang' => 'SMILIES_PATH',		'validate' => 'rpath',	'type' => 'text:20:255', 'explain' => true),						'icons_path'			=> array('lang' => 'ICONS_PATH',		'validate' => 'rpath',	'type' => 'text:20:255', 'explain' => true),						'upload_icons_path'		=> array('lang' => 'UPLOAD_ICONS_PATH',	'validate' => 'rpath',	'type' => 'text:20:255', 'explain' => true),						'ranks_path'			=> array('lang' => 'RANKS_PATH',		'validate' => 'rpath',	'type' => 'text:20:255', 'explain' => true),						'legend3'				=> 'SERVER_URL_SETTINGS',						'force_server_vars'		=> array('lang' => 'FORCE_SERVER_VARS',	'validate' => 'bool',			'type' => 'radio:yes_no', 'explain' => true),						'server_protocol'		=> array('lang' => 'SERVER_PROTOCOL',	'validate' => 'string',			'type' => 'text:10:10', 'explain' => true),						'server_name'			=> array('lang' => 'SERVER_NAME',		'validate' => 'string',			'type' => 'text:40:255', 'explain' => true),						'server_port'			=> array('lang' => 'SERVER_PORT',		'validate' => 'int:0',			'type' => 'text:5:5', 'explain' => true),						'script_path'			=> array('lang' => 'SCRIPT_PATH',		'validate' => 'script_path',	'type' => 'text::255', 'explain' => true),						'legend4'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			case 'security':				$display_vars = array(					'title'	=> 'ACP_SECURITY_SETTINGS',					'vars'	=> array(						'legend1'				=> 'ACP_SECURITY_SETTINGS',						'allow_autologin'		=> array('lang' => 'ALLOW_AUTOLOGIN',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'max_autologin_time'	=> array('lang' => 'AUTOLOGIN_LENGTH',		'validate' => 'int:0',	'type' => 'text:5:5', 'explain' => true, 'append' => ' ' . $user->lang['DAYS']),						'ip_check'				=> array('lang' => 'IP_VALID',				'validate' => 'int',	'type' => 'custom', 'method' => 'select_ip_check', 'explain' => true),						'browser_check'			=> array('lang' => 'BROWSER_VALID',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'forwarded_for_check'	=> array('lang' => 'FORWARDED_FOR_VALID',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'referer_validation'	=> array('lang' => 'REFERER_VALID',		'validate' => 'int:0:3','type' => 'custom', 'method' => 'select_ref_check', 'explain' => true),						'check_dnsbl'			=> array('lang' => 'CHECK_DNSBL',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'email_check_mx'		=> array('lang' => 'EMAIL_CHECK_MX',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'pass_complex'			=> array('lang' => 'PASSWORD_TYPE',			'validate' => 'string',	'type' => 'select', 'method' => 'select_password_chars', 'explain' => true),						'chg_passforce'			=> array('lang' => 'FORCE_PASS_CHANGE',		'validate' => 'int:0',	'type' => 'text:3:3', 'explain' => true, 'append' => ' ' . $user->lang['DAYS']),						'max_login_attempts'	=> array('lang' => 'MAX_LOGIN_ATTEMPTS',	'validate' => 'int:0',	'type' => 'text:3:3', 'explain' => true),						'ip_login_limit_max'	=> array('lang' => 'IP_LOGIN_LIMIT_MAX',	'validate' => 'int:0',	'type' => 'text:3:3', 'explain' => true),						'ip_login_limit_time'	=> array('lang' => 'IP_LOGIN_LIMIT_TIME',	'validate' => 'int:0',	'type' => 'text:5:5', 'explain' => true, 'append' => ' ' . $user->lang['SECONDS']),						'ip_login_limit_use_forwarded'	=> array('lang' => 'IP_LOGIN_LIMIT_USE_FORWARDED',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'tpl_allow_php'			=> array('lang' => 'TPL_ALLOW_PHP',			'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'form_token_lifetime'	=> array('lang' => 'FORM_TIME_MAX',			'validate' => 'int:-1',	'type' => 'text:5:5', 'explain' => true, 'append' => ' ' . $user->lang['SECONDS']),						'form_token_sid_guests'	=> array('lang' => 'FORM_SID_GUESTS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),					)				);			break;			case 'email':				$display_vars = array(					'title'	=> 'ACP_EMAIL_SETTINGS',					'vars'	=> array(						'legend1'				=> 'GENERAL_SETTINGS',						'email_enable'			=> array('lang' => 'ENABLE_EMAIL',			'validate' => 'bool',	'type' => 'radio:enabled_disabled', 'explain' => true),						'board_email_form'		=> array('lang' => 'BOARD_EMAIL_FORM',		'validate' => 'bool',	'type' => 'radio:enabled_disabled', 'explain' => true),						'email_function_name'	=> array('lang' => 'EMAIL_FUNCTION_NAME',	'validate' => 'string',	'type' => 'text:20:50', 'explain' => true),						'email_package_size'	=> array('lang' => 'EMAIL_PACKAGE_SIZE',	'validate' => 'int:0',	'type' => 'text:5:5', 'explain' => true),						'board_contact'			=> array('lang' => 'CONTACT_EMAIL',			'validate' => 'string',	'type' => 'text:25:100', 'explain' => true),						'board_email'			=> array('lang' => 'ADMIN_EMAIL',			'validate' => 'string',	'type' => 'text:25:100', 'explain' => true),						'board_email_sig'		=> array('lang' => 'EMAIL_SIG',				'validate' => 'string',	'type' => 'textarea:5:30', 'explain' => true),						'board_hide_emails'		=> array('lang' => 'BOARD_HIDE_EMAILS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'legend2'				=> 'SMTP_SETTINGS',						'smtp_delivery'			=> array('lang' => 'USE_SMTP',				'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'smtp_host'				=> array('lang' => 'SMTP_SERVER',			'validate' => 'string',	'type' => 'text:25:50', 'explain' => false),						'smtp_port'				=> array('lang' => 'SMTP_PORT',				'validate' => 'int:0',	'type' => 'text:4:5', 'explain' => true),						'smtp_auth_method'		=> array('lang' => 'SMTP_AUTH_METHOD',		'validate' => 'string',	'type' => 'select', 'method' => 'mail_auth_select', 'explain' => true),						'smtp_username'			=> array('lang' => 'SMTP_USERNAME',			'validate' => 'string',	'type' => 'text:25:255', 'explain' => true),						'smtp_password'			=> array('lang' => 'SMTP_PASSWORD',			'validate' => 'string',	'type' => 'password:25:255', 'explain' => true),						'legend3'					=> 'ACP_SUBMIT_CHANGES',					)				);			break;			default:				trigger_error('NO_MODE', E_USER_ERROR);			break;		}		if (isset($display_vars['lang']))		{			$user->add_lang($display_vars['lang']);		}		$this->new_config = $config;		$cfg_array = (isset($_REQUEST['config'])) ? utf8_normalize_nfc(request_var('config', array('' => ''), true)) : $this->new_config;		$error = array();		// We validate the complete config if whished		validate_config_vars($display_vars['vars'], $cfg_array, $error);		if ($submit && !check_form_key($form_key))		{			$error[] = $user->lang['FORM_INVALID'];		}		// Do not write values if there is an error		if (sizeof($error))		{			$submit = false;		}		// We go through the display_vars to make sure no one is trying to set variables he/she is not allowed to...		foreach ($display_vars['vars'] as $config_name => $null)		{			if (!isset($cfg_array[$config_name]) || strpos($config_name, 'legend') !== false)			{				continue;			}			if ($config_name == 'auth_method' || $config_name == 'feed_news_id' || $config_name == 'feed_exclude_id')			{				continue;			}			$this->new_config[$config_name] = $config_value = $cfg_array[$config_name];			if ($config_name == 'email_function_name')			{				$this->new_config['email_function_name'] = trim(str_replace(array('(', ')'), array('', ''), $this->new_config['email_function_name']));				$this->new_config['email_function_name'] = (empty($this->new_config['email_function_name']) || !function_exists($this->new_config['email_function_name'])) ? 'mail' : $this->new_config['email_function_name'];				$config_value = $this->new_config['email_function_name'];			}			if ($submit)			{				set_config($config_name, $config_value);				if ($config_name == 'allow_quick_reply' && isset($_POST['allow_quick_reply_enable']))				{					enable_bitfield_column_flag(FORUMS_TABLE, 'forum_flags', log(FORUM_FLAG_QUICK_REPLY, 2));				}			}		}		// Store news and exclude ids		if ($mode == 'feed' && $submit)		{			$cache->destroy('_feed_news_forum_ids');			$cache->destroy('_feed_excluded_forum_ids');			$this->store_feed_forums(FORUM_OPTION_FEED_NEWS, 'feed_news_id');			$this->store_feed_forums(FORUM_OPTION_FEED_EXCLUDE, 'feed_exclude_id');		}		if ($mode == 'auth')		{			// Retrieve a list of auth plugins and check their config values			$auth_plugins = array();			$dp = @opendir($phpbb_root_path . 'includes/auth');			if ($dp)			{				while (($file = readdir($dp)) !== false)				{					if (preg_match('#^auth_(.*?)\.' . $phpEx . '$#', $file))					{						$auth_plugins[] = basename(preg_replace('#^auth_(.*?)\.' . $phpEx . '$#', '\1', $file));					}				}				closedir($dp);				sort($auth_plugins);			}			$updated_auth_settings = false;			$old_auth_config = array();			foreach ($auth_plugins as $method)			{				if ($method && file_exists($phpbb_root_path . 'includes/auth/auth_' . $method . '.' . $phpEx))				{					include_once($phpbb_root_path . 'includes/auth/auth_' . $method . '.' . $phpEx);					$method = 'acp_' . $method;					if (function_exists($method))					{						if ($fields = $method($this->new_config))						{							// Check if we need to create config fields for this plugin and save config when submit was pressed							foreach ($fields['config'] as $field)							{								if (!isset($config[$field]))								{									set_config($field, '');								}								if (!isset($cfg_array[$field]) || strpos($field, 'legend') !== false)								{									continue;								}								$old_auth_config[$field] = $this->new_config[$field];								$config_value = $cfg_array[$field];								$this->new_config[$field] = $config_value;								if ($submit)								{									$updated_auth_settings = true;									set_config($field, $config_value);								}							}						}						unset($fields);					}				}			}			if ($submit && (($cfg_array['auth_method'] != $this->new_config['auth_method']) || $updated_auth_settings))			{				$method = basename($cfg_array['auth_method']);				if ($method && in_array($method, $auth_plugins))				{					include_once($phpbb_root_path . 'includes/auth/auth_' . $method . '.' . $phpEx);					$method = 'init_' . $method;					if (function_exists($method))					{						if ($error = $method())						{							foreach ($old_auth_config as $config_name => $config_value)							{								set_config($config_name, $config_value);							}							trigger_error($error . adm_back_link($this->u_action), E_USER_WARNING);						}					}					set_config('auth_method', basename($cfg_array['auth_method']));				}				else				{					trigger_error('NO_AUTH_PLUGIN', E_USER_ERROR);				}			}		}		if ($submit)		{			add_log('admin', 'LOG_CONFIG_' . strtoupper($mode));			trigger_error($user->lang['CONFIG_UPDATED'] . adm_back_link($this->u_action));		}		$this->tpl_name = 'acp_board';		$this->page_title = $display_vars['title'];		$template->assign_vars(array(			'L_TITLE'			=> $user->lang[$display_vars['title']],			'L_TITLE_EXPLAIN'	=> $user->lang[$display_vars['title'] . '_EXPLAIN'],			'S_ERROR'			=> (sizeof($error)) ? true : false,			'ERROR_MSG'			=> implode('<br />', $error),			'U_ACTION'			=> $this->u_action)		);		// Output relevant page		foreach ($display_vars['vars'] as $config_key => $vars)		{			if (!is_array($vars) && strpos($config_key, 'legend') === false)			{				continue;			}			if (strpos($config_key, 'legend') !== false)			{				$template->assign_block_vars('options', array(					'S_LEGEND'		=> true,					'LEGEND'		=> (isset($user->lang[$vars])) ? $user->lang[$vars] : $vars)				);				continue;			}			$type = explode(':', $vars['type']);			$l_explain = '';			if ($vars['explain'] && isset($vars['lang_explain']))			{				$l_explain = (isset($user->lang[$vars['lang_explain']])) ? $user->lang[$vars['lang_explain']] : $vars['lang_explain'];			}			else if ($vars['explain'])			{				$l_explain = (isset($user->lang[$vars['lang'] . '_EXPLAIN'])) ? $user->lang[$vars['lang'] . '_EXPLAIN'] : '';			}			$content = build_cfg_template($type, $config_key, $this->new_config, $config_key, $vars);			if (empty($content))			{				continue;			}			$template->assign_block_vars('options', array(				'KEY'			=> $config_key,				'TITLE'			=> (isset($user->lang[$vars['lang']])) ? $user->lang[$vars['lang']] : $vars['lang'],				'S_EXPLAIN'		=> $vars['explain'],				'TITLE_EXPLAIN'	=> $l_explain,				'CONTENT'		=> $content,				)			);			unset($display_vars['vars'][$config_key]);		}		if ($mode == 'auth')		{			$template->assign_var('S_AUTH', true);			foreach ($auth_plugins as $method)			{				if ($method && file_exists($phpbb_root_path . 'includes/auth/auth_' . $method . '.' . $phpEx))				{					$method = 'acp_' . $method;					if (function_exists($method))					{						$fields = $method($this->new_config);						if ($fields['tpl'])						{							$template->assign_block_vars('auth_tpl', array(								'TPL'	=> $fields['tpl'])							);						}						unset($fields);					}				}			}		}	}	/**	* Select auth method	*/	function select_auth_method($selected_method, $key = '')	{		global $phpbb_root_path, $phpEx;		$auth_plugins = array();		$dp = @opendir($phpbb_root_path . 'includes/auth');		if (!$dp)		{			return '';		}		while (($file = readdir($dp)) !== false)		{			if (preg_match('#^auth_(.*?)\.' . $phpEx . '$#', $file))			{				$auth_plugins[] = preg_replace('#^auth_(.*?)\.' . $phpEx . '$#', '\1', $file);			}		}		closedir($dp);		sort($auth_plugins);		$auth_select = '';		foreach ($auth_plugins as $method)		{			$selected = ($selected_method == $method) ? ' selected="selected"' : '';			$auth_select .= '<option value="' . $method . '"' . $selected . '>' . ucfirst($method) . '</option>';		}		return $auth_select;	}	/**	* Select mail authentication method	*/	function mail_auth_select($selected_method, $key = '')	{		global $user;		$auth_methods = array('PLAIN', 'LOGIN', 'CRAM-MD5', 'DIGEST-MD5', 'POP-BEFORE-SMTP');		$s_smtp_auth_options = '';		foreach ($auth_methods as $method)		{			$s_smtp_auth_options .= '<option value="' . $method . '"' . (($selected_method == $method) ? ' selected="selected"' : '') . '>' . $user->lang['SMTP_' . str_replace('-', '_', $method)] . '</option>';		}		return $s_smtp_auth_options;	}	/**	* Select full folder action	*/	function full_folder_select($value, $key = '')	{		global $user;		return '<option value="1"' . (($value == 1) ? ' selected="selected"' : '') . '>' . $user->lang['DELETE_OLDEST_MESSAGES'] . '</option><option value="2"' . (($value == 2) ? ' selected="selected"' : '') . '>' . $user->lang['HOLD_NEW_MESSAGES_SHORT'] . '</option>';	}	/**	* Select ip validation	*/	function select_ip_check($value, $key = '')	{		$radio_ary = array(4 => 'ALL', 3 => 'CLASS_C', 2 => 'CLASS_B', 0 => 'NO_IP_VALIDATION');		return h_radio('config[ip_check]', $radio_ary, $value, $key);	}	/**	* Select referer validation	*/	function select_ref_check($value, $key = '')	{		$radio_ary = array(REFERER_VALIDATE_PATH => 'REF_PATH', REFERER_VALIDATE_HOST => 'REF_HOST', REFERER_VALIDATE_NONE => 'NO_REF_VALIDATION');		return h_radio('config[referer_validation]', $radio_ary, $value, $key);	}	/**	* Select account activation method	*/	function select_acc_activation($value, $key = '')	{		global $user, $config;		$radio_ary = array(			USER_ACTIVATION_DISABLE => 'ACC_DISABLE',			USER_ACTIVATION_NONE => 'ACC_NONE',		);		if ($config['email_enable'])		{			$radio_ary[USER_ACTIVATION_SELF] = 'ACC_USER';			$radio_ary[USER_ACTIVATION_ADMIN] = 'ACC_ADMIN';		}		$radio_text = h_radio('config[require_activation]', $radio_ary, $value, 'require_activation', $key, '<br />');		return $radio_text;	}	/**	* Maximum/Minimum username length	*/	function username_length($value, $key = '')	{		global $user;		return '<input id="' . $key . '" type="text" size="3" maxlength="3" name="config[min_name_chars]" value="' . $value . '" /> ' . $user->lang['MIN_CHARS'] . '&nbsp;&nbsp;<input type="text" size="3" maxlength="3" name="config[max_name_chars]" value="' . $this->new_config['max_name_chars'] . '" /> ' . $user->lang['MAX_CHARS'];	}	/**	* Allowed chars in usernames	*/	function select_username_chars($selected_value, $key)	{		global $user;		$user_char_ary = array('USERNAME_CHARS_ANY', 'USERNAME_ALPHA_ONLY', 'USERNAME_ALPHA_SPACERS', 'USERNAME_LETTER_NUM', 'USERNAME_LETTER_NUM_SPACERS', 'USERNAME_ASCII');		$user_char_options = '';		foreach ($user_char_ary as $user_type)		{			$selected = ($selected_value == $user_type) ? ' selected="selected"' : '';			$user_char_options .= '<option value="' . $user_type . '"' . $selected . '>' . $user->lang[$user_type] . '</option>';		}		return $user_char_options;	}	/**	* Maximum/Minimum password length	*/	function password_length($value, $key)	{		global $user;		return '<input id="' . $key . '" type="text" size="3" maxlength="3" name="config[min_pass_chars]" value="' . $value . '" /> ' . $user->lang['MIN_CHARS'] . '&nbsp;&nbsp;<input type="text" size="3" maxlength="3" name="config[max_pass_chars]" value="' . $this->new_config['max_pass_chars'] . '" /> ' . $user->lang['MAX_CHARS'];	}	/**	* Required chars in passwords	*/	function select_password_chars($selected_value, $key)	{		global $user;		$pass_type_ary = array('PASS_TYPE_ANY', 'PASS_TYPE_CASE', 'PASS_TYPE_ALPHA', 'PASS_TYPE_SYMBOL');		$pass_char_options = '';		foreach ($pass_type_ary as $pass_type)		{			$selected = ($selected_value == $pass_type) ? ' selected="selected"' : '';			$pass_char_options .= '<option value="' . $pass_type . '"' . $selected . '>' . $user->lang[$pass_type] . '</option>';		}		return $pass_char_options;	}	/**	* Select bump interval	*/	function bump_interval($value, $key)	{		global $user;		$s_bump_type = '';		$types = array('m' => 'MINUTES', 'h' => 'HOURS', 'd' => 'DAYS');		foreach ($types as $type => $lang)		{			$selected = ($this->new_config['bump_type'] == $type) ? ' selected="selected"' : '';			$s_bump_type .= '<option value="' . $type . '"' . $selected . '>' . $user->lang[$lang] . '</option>';		}		return '<input id="' . $key . '" type="text" size="3" maxlength="4" name="config[bump_interval]" value="' . $value . '" />&nbsp;<select name="config[bump_type]">' . $s_bump_type . '</select>';	}	/**	* Board disable option and message	*/	function board_disable($value, $key)	{		global $user;		$radio_ary = array(1 => 'YES', 0 => 'NO');		return h_radio('config[board_disable]', $radio_ary, $value) . '<br /><input id="' . $key . '" type="text" name="config[board_disable_msg]" maxlength="255" size="40" value="' . $this->new_config['board_disable_msg'] . '" />';	}	/**	* Global quick reply enable/disable setting and button to enable in all forums	*/	function quick_reply($value, $key)	{		global $user;		$radio_ary = array(1 => 'YES', 0 => 'NO');		return h_radio('config[allow_quick_reply]', $radio_ary, $value) .			'<br /><br /><input class="button2" type="submit" id="' . $key . '_enable" name="' . $key . '_enable" value="' . $user->lang['ALLOW_QUICK_REPLY_BUTTON'] . '" />';	}	/**	* Select default dateformat	*/	function dateformat_select($value, $key)	{		global $user, $config;		// Let the format_date function operate with the acp values		$old_tz = $user->timezone;		$old_dst = $user->dst;		$user->timezone = $config['board_timezone'] * 3600;		$user->dst = $config['board_dst'] * 3600;		$dateformat_options = '';		foreach ($user->lang['dateformats'] as $format => $null)		{			$dateformat_options .= '<option value="' . $format . '"' . (($format == $value) ? ' selected="selected"' : '') . '>';			$dateformat_options .= $user->format_date(time(), $format, false) . ((strpos($format, '|') !== false) ? $user->lang['VARIANT_DATE_SEPARATOR'] . $user->format_date(time(), $format, true) : '');			$dateformat_options .= '</option>';		}		$dateformat_options .= '<option value="custom"';		if (!isset($user->lang['dateformats'][$value]))		{			$dateformat_options .= ' selected="selected"';		}		$dateformat_options .= '>' . $user->lang['CUSTOM_DATEFORMAT'] . '</option>';		// Reset users date options		$user->timezone = $old_tz;		$user->dst = $old_dst;		return "<select name=\"dateoptions\" id=\"dateoptions\" onchange=\"if (this.value == 'custom') { document.getElementById('" . addslashes($key) . "').value = '" . addslashes($value) . "'; } else { document.getElementById('" . addslashes($key) . "').value = this.value; }\">$dateformat_options</select>		<input type=\"text\" name=\"config[$key]\" id=\"$key\" value=\"$value\" maxlength=\"30\" />";	}	/**	* Select multiple forums	*/	function select_news_forums($value, $key)	{		global $user, $config;		$forum_list = make_forum_select(false, false, true, true, true, false, true);		// Build forum options		$s_forum_options = '<select id="' . $key . '" name="' . $key . '[]" multiple="multiple">';		foreach ($forum_list as $f_id => $f_row)		{			$f_row['selected'] = phpbb_optionget(FORUM_OPTION_FEED_NEWS, $f_row['forum_options']);			$s_forum_options .= '<option value="' . $f_id . '"' . (($f_row['selected']) ? ' selected="selected"' : '') . (($f_row['disabled']) ? ' disabled="disabled" class="disabled-option"' : '') . '>' . $f_row['padding'] . $f_row['forum_name'] . '</option>';		}		$s_forum_options .= '</select>';		return $s_forum_options;	}	function select_exclude_forums($value, $key)	{		global $user, $config;		$forum_list = make_forum_select(false, false, true, true, true, false, true);		// Build forum options		$s_forum_options = '<select id="' . $key . '" name="' . $key . '[]" multiple="multiple">';		foreach ($forum_list as $f_id => $f_row)		{			$f_row['selected'] = phpbb_optionget(FORUM_OPTION_FEED_EXCLUDE, $f_row['forum_options']);			$s_forum_options .= '<option value="' . $f_id . '"' . (($f_row['selected']) ? ' selected="selected"' : '') . (($f_row['disabled']) ? ' disabled="disabled" class="disabled-option"' : '') . '>' . $f_row['padding'] . $f_row['forum_name'] . '</option>';		}		$s_forum_options .= '</select>';		return $s_forum_options;	}	function store_feed_forums($option, $key)	{		global $db, $cache;		// Get key		$values = request_var($key, array(0 => 0));		// Empty option bit for all forums		$sql = 'UPDATE ' . FORUMS_TABLE . '			SET forum_options = forum_options - ' . (1 << $option) . '			WHERE ' . $db->sql_bit_and('forum_options', $option, '<> 0');		$db->sql_query($sql);		// Already emptied for all...		if (sizeof($values))		{			// Set for selected forums			$sql = 'UPDATE ' . FORUMS_TABLE . '				SET forum_options = forum_options + ' . (1 << $option) . '				WHERE ' . $db->sql_in_set('forum_id', $values);			$db->sql_query($sql);		}		// Empty sql cache for forums table because options changed		$cache->destroy('sql', FORUMS_TABLE);	}}?>
<?php/**** @package acm* @copyright (c) 2010 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}// Include the abstract baseif (!class_exists('acm_memory')){	require("{$phpbb_root_path}includes/acm/acm_memory.$phpEx");}/*** ACM for WinCache* @package acm*/class acm extends acm_memory{	var $extension = 'wincache';	/**	* Purge cache data	*	* @return void	*/	function purge()	{		wincache_ucache_clear();		parent::purge();	}	/**	* Fetch an item from the cache	*	* @access protected	* @param string $var Cache key	* @return mixed Cached data	*/	function _read($var)	{		$success = false;		$result = wincache_ucache_get($this->key_prefix . $var, $success);		return ($success) ? $result : false;	}	/**	* Store data in the cache	*	* @access protected	* @param string $var Cache key	* @param mixed $data Data to store	* @param int $ttl Time-to-live of cached data	* @return bool True if the operation succeeded	*/	function _write($var, $data, $ttl = 2592000)	{		return wincache_ucache_set($this->key_prefix . $var, $data, $ttl);	}	/**	* Remove an item from the cache	*	* @access protected	* @param string $var Cache key	* @return bool True if the operation succeeded	*/	function _delete($var)	{		return wincache_ucache_delete($this->key_prefix . $var);	}}
<?php/**** acp_ban [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// Banning$lang = array_merge($lang, array(	'1_HOUR'		=> '1 hour',	'30_MINS'		=> '30 minutes',	'6_HOURS'		=> '6 hours',	'ACP_BAN_EXPLAIN'	=> 'Here you can control the banning of users by name, IP or e-mail address. These methods prevent a user reaching any part of the board. You can give a short (maximum 3000 characters) reason for the ban if you wish. This will be displayed in the admin log. The duration of a ban can also be specified. If you want the ban to end on a specific date rather than after a set time period select <span style="text-decoration: underline;">Until -&gt;</span> for the ban length and enter a date in <kbd>YYYY-MM-DD</kbd> format.',	'BAN_EXCLUDE'			=> 'Exclude from banning',	'BAN_LENGTH'			=> 'Length of ban',	'BAN_REASON'			=> 'Reason for ban',	'BAN_GIVE_REASON'		=> 'Reason shown to the banned',	'BAN_UPDATE_SUCCESSFUL'	=> 'The banlist has been updated successfully.',	'BANNED_UNTIL_DATE'		=> 'until %s', // Example: "until Mon 13.Jul.2009, 14:44"	'BANNED_UNTIL_DURATION'	=> '%1$s (until %2$s)', // Example: "7 days (until Tue 14.Jul.2009, 14:44)"	'EMAIL_BAN'					=> 'Ban one or more e-mail addresses',	'EMAIL_BAN_EXCLUDE_EXPLAIN'	=> 'Enable this to exclude the entered e-mail address from all current bans.',	'EMAIL_BAN_EXPLAIN'			=> 'To specify more than one e-mail address enter each on a new line. To match partial addresses use * as the wildcard, e.g. <samp>*@hotmail.com</samp>, <samp>*@*.domain.tld</samp>, etc.',	'EMAIL_NO_BANNED'			=> 'No banned e-mail addresses',	'EMAIL_UNBAN'				=> 'Un-ban or un-exclude e-mails',	'EMAIL_UNBAN_EXPLAIN'		=> 'You can unban (or un-exclude) multiple e-mail addresses in one go using the appropriate combination of mouse and keyboard for your computer and browser. Excluded e-mail addresses are emphasised.',	'IP_BAN'					=> 'Ban one or more IPs',	'IP_BAN_EXCLUDE_EXPLAIN'	=> 'Enable this to exclude the entered IP from all current bans.',	'IP_BAN_EXPLAIN'			=> 'To specify several different IPs or hostnames enter each on a new line. To specify a range of IP addresses separate the start and end with a hyphen (-), to specify a wildcard use *.',	'IP_HOSTNAME'				=> 'IP addresses or hostnames',	'IP_NO_BANNED'				=> 'No banned IP addresses',	'IP_UNBAN'					=> 'Un-ban or un-exclude IPs',	'IP_UNBAN_EXPLAIN'			=> 'You can unban (or un-exclude) multiple IP addresses in one go using the appropriate combination of mouse and keyboard for your computer and browser. Excluded IPs are emphasised.',	'LENGTH_BAN_INVALID'		=> 'The date has to be formatted <kbd>YYYY-MM-DD</kbd>.',	'OPTIONS_BANNED'			=> 'Banned',	'OPTIONS_EXCLUDED'			=> 'Excluded',	'PERMANENT'		=> 'Permanent',	'UNTIL'						=> 'Until',	'USER_BAN'					=> 'Ban one or more usernames',	'USER_BAN_EXCLUDE_EXPLAIN'	=> 'Enable this to exclude the entered users from all current bans.',	'USER_BAN_EXPLAIN'			=> 'You can ban multiple users in one go by entering each name on a new line. Use the <span style="text-decoration: underline;">Find a member</span> facility to look up and add one or more users automatically.',	'USER_NO_BANNED'			=> 'No banned usernames',	'USER_UNBAN'				=> 'Un-ban or un-exclude usernames',	'USER_UNBAN_EXPLAIN'		=> 'You can unban (or un-exclude) multiple users in one go using the appropriate combination of mouse and keyboard for your computer and browser. Excluded users are emphasised.',));?>
<?php/**** @package install* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**/if (!defined('IN_PHPBB')){	exit;}/*** Helper functions for phpBB 2.0.x to phpBB 3.0.x conversion*//*** Set forum flags - only prune old polls by default*/function phpbb_forum_flags(){	// Set forum flags	$forum_flags = 0;	// FORUM_FLAG_LINK_TRACK	$forum_flags += 0;	// FORUM_FLAG_PRUNE_POLL	$forum_flags += FORUM_FLAG_PRUNE_POLL;	// FORUM_FLAG_PRUNE_ANNOUNCE	$forum_flags += 0;	// FORUM_FLAG_PRUNE_STICKY	$forum_flags += 0;	// FORUM_FLAG_ACTIVE_TOPICS	$forum_flags += 0;	// FORUM_FLAG_POST_REVIEW	$forum_flags += FORUM_FLAG_POST_REVIEW;	return $forum_flags;}/*** Insert/Convert forums*/function phpbb_insert_forums(){	global $db, $src_db, $same_db, $convert, $user, $config;	$db->sql_query($convert->truncate_statement . FORUMS_TABLE);	// Determine the highest id used within the old forums table (we add the categories after the forum ids)	$sql = 'SELECT MAX(forum_id) AS max_forum_id		FROM ' . $convert->src_table_prefix . 'forums';	$result = $src_db->sql_query($sql);	$max_forum_id = (int) $src_db->sql_fetchfield('max_forum_id');	$src_db->sql_freeresult($result);	$max_forum_id++;	// pruning disabled globally?	$sql = "SELECT config_value		FROM {$convert->src_table_prefix}config		WHERE config_name = 'prune_enable'";	$result = $src_db->sql_query($sql);	$prune_enabled = (int) $src_db->sql_fetchfield('config_value');	$src_db->sql_freeresult($result);	// Insert categories	$sql = 'SELECT cat_id, cat_title		FROM ' . $convert->src_table_prefix . 'categories		ORDER BY cat_order';	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'binary'");	}	$result = $src_db->sql_query($sql);	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'utf8'");	}	switch ($db->sql_layer)	{		case 'mssql':		case 'mssql_odbc':		case 'mssqlnative':			$db->sql_query('SET IDENTITY_INSERT ' . FORUMS_TABLE . ' ON');		break;	}	$cats_added = array();	while ($row = $src_db->sql_fetchrow($result))	{		$sql_ary = array(			'forum_id'		=> (int) $max_forum_id,			'forum_name'	=> ($row['cat_title']) ? htmlspecialchars(phpbb_set_default_encoding($row['cat_title']), ENT_COMPAT, 'UTF-8') : $user->lang['CATEGORY'],			'parent_id'		=> 0,			'forum_parents'	=> '',			'forum_desc'	=> '',			'forum_type'	=> FORUM_CAT,			'forum_status'	=> ITEM_UNLOCKED,			'forum_rules'	=> '',		);		$sql = 'SELECT MAX(right_id) AS right_id			FROM ' . FORUMS_TABLE;		$_result = $db->sql_query($sql);		$cat_row = $db->sql_fetchrow($_result);		$db->sql_freeresult($_result);		$sql_ary['left_id'] = (int) ($cat_row['right_id'] + 1);		$sql_ary['right_id'] = (int) ($cat_row['right_id'] + 2);		$sql = 'INSERT INTO ' . FORUMS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);		$db->sql_query($sql);		$cats_added[$row['cat_id']] = $max_forum_id;		$max_forum_id++;	}	$src_db->sql_freeresult($result);	// There may be installations having forums with non-existant category ids.	// We try to catch them and add them to an "unknown" category instead of leaving them out.	$sql = 'SELECT cat_id		FROM ' . $convert->src_table_prefix . 'forums		GROUP BY cat_id';	$result = $src_db->sql_query($sql);	$unknown_cat_id = false;	while ($row = $src_db->sql_fetchrow($result))	{		// Catch those categories not been added before		if (!isset($cats_added[$row['cat_id']]))		{			$unknown_cat_id = true;		}	}	$src_db->sql_freeresult($result);	// Is there at least one category not known?	if ($unknown_cat_id === true)	{		$unknown_cat_id = 'ghost';		$sql_ary = array(			'forum_id'		=> (int) $max_forum_id,			'forum_name'	=> (string) $user->lang['CATEGORY'],			'parent_id'		=> 0,			'forum_parents'	=> '',			'forum_desc'	=> '',			'forum_type'	=> FORUM_CAT,			'forum_status'	=> ITEM_UNLOCKED,			'forum_rules'	=> '',		);		$sql = 'SELECT MAX(right_id) AS right_id			FROM ' . FORUMS_TABLE;		$_result = $db->sql_query($sql);		$cat_row = $db->sql_fetchrow($_result);		$db->sql_freeresult($_result);		$sql_ary['left_id'] = (int) ($cat_row['right_id'] + 1);		$sql_ary['right_id'] = (int) ($cat_row['right_id'] + 2);		$sql = 'INSERT INTO ' . FORUMS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);		$db->sql_query($sql);		$cats_added[$unknown_cat_id] = $max_forum_id;		$max_forum_id++;	}	// Now insert the forums	$sql = 'SELECT f.forum_id, f.forum_name, f.cat_id, f.forum_desc, f.forum_status, f.prune_enable, f.prune_next, fp.prune_days, fp.prune_freq FROM ' . $convert->src_table_prefix . 'forums f		LEFT JOIN ' . $convert->src_table_prefix . 'forum_prune fp ON f.forum_id = fp.forum_id		GROUP BY f.forum_id, f.forum_name, f.cat_id, f.forum_desc, f.forum_status, f.prune_enable, f.prune_next, f.forum_order, fp.prune_days, fp.prune_freq		ORDER BY f.cat_id, f.forum_order';	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'binary'");	}	$result = $src_db->sql_query($sql);	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'utf8'");	}	while ($row = $src_db->sql_fetchrow($result))	{		// Some might have forums here with an id not being "possible"...		// To be somewhat friendly we "change" the category id for those to a previously created ghost category		if (!isset($cats_added[$row['cat_id']]) && $unknown_cat_id !== false)		{			$row['cat_id'] = $unknown_cat_id;		}		if (!isset($cats_added[$row['cat_id']]))		{			continue;		}		// Define the new forums sql ary		$sql_ary = array(			'forum_id'			=> (int) $row['forum_id'],			'forum_name'		=> htmlspecialchars(phpbb_set_default_encoding($row['forum_name']), ENT_COMPAT, 'UTF-8'),			'parent_id'			=> (int) $cats_added[$row['cat_id']],			'forum_parents'		=> '',			'forum_desc'		=> htmlspecialchars(phpbb_set_default_encoding($row['forum_desc']), ENT_COMPAT, 'UTF-8'),			'forum_type'		=> FORUM_POST,			'forum_status'		=> is_item_locked($row['forum_status']),			'enable_prune'		=> ($prune_enabled) ? (int)$row['prune_enable'] : 0,			'prune_next'		=> (int) null_to_zero($row['prune_next']),			'prune_days'		=> (int) null_to_zero($row['prune_days']),			'prune_viewed'		=> 0,			'prune_freq'		=> (int) null_to_zero($row['prune_freq']),			'forum_flags'		=> phpbb_forum_flags(),			'forum_options'		=> 0,			// Default values			'forum_desc_bitfield'		=> '',			'forum_desc_options'		=> 7,			'forum_desc_uid'			=> '',			'forum_link'				=> '',			'forum_password'			=> '',			'forum_style'				=> 0,			'forum_image'				=> '',			'forum_rules'				=> '',			'forum_rules_link'			=> '',			'forum_rules_bitfield'		=> '',			'forum_rules_options'		=> 7,			'forum_rules_uid'			=> '',			'forum_topics_per_page'		=> 0,			'forum_posts'				=> 0,			'forum_topics'				=> 0,			'forum_topics_real'			=> 0,			'forum_last_post_id'		=> 0,			'forum_last_poster_id'		=> 0,			'forum_last_post_subject'	=> '',			'forum_last_post_time'		=> 0,			'forum_last_poster_name'	=> '',			'forum_last_poster_colour'	=> '',			'display_on_index'			=> 1,			'enable_indexing'			=> 1,			'enable_icons'				=> 0,		);		// Now add the forums with proper left/right ids		$sql = 'SELECT left_id, right_id			FROM ' . FORUMS_TABLE . '			WHERE forum_id = ' . $cats_added[$row['cat_id']];		$_result = $db->sql_query($sql);		$cat_row = $db->sql_fetchrow($_result);		$db->sql_freeresult($_result);		$sql = 'UPDATE ' . FORUMS_TABLE . '			SET left_id = left_id + 2, right_id = right_id + 2			WHERE left_id > ' . $cat_row['right_id'];		$db->sql_query($sql);		$sql = 'UPDATE ' . FORUMS_TABLE . '			SET right_id = right_id + 2			WHERE ' . $cat_row['left_id'] . ' BETWEEN left_id AND right_id';		$db->sql_query($sql);		$sql_ary['left_id'] = (int) $cat_row['right_id'];		$sql_ary['right_id'] = (int) ($cat_row['right_id'] + 1);		$sql = 'INSERT INTO ' . FORUMS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);		$db->sql_query($sql);	}	$src_db->sql_freeresult($result);	switch ($db->sql_layer)	{		case 'postgres':			$db->sql_query("SELECT SETVAL('" . FORUMS_TABLE . "_seq',(select case when max(forum_id)>0 then max(forum_id)+1 else 1 end from " . FORUMS_TABLE . '));');		break;		case 'mssql':		case 'mssql_odbc':		case 'mssqlnative':			$db->sql_query('SET IDENTITY_INSERT ' . FORUMS_TABLE . ' OFF');		break;		case 'oracle':			$result = $db->sql_query('SELECT MAX(forum_id) as max_id FROM ' . FORUMS_TABLE);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			$largest_id = (int) $row['max_id'];			if ($largest_id)			{				$db->sql_query('DROP SEQUENCE ' . FORUMS_TABLE . '_seq');				$db->sql_query('CREATE SEQUENCE ' . FORUMS_TABLE . '_seq START WITH ' . ($largest_id + 1));			}		break;	}}/*** Function for recoding text with the default language** @param string $text text to recode to utf8* @param bool $grab_user_lang if set to true the function tries to use $convert_row['user_lang'] (and falls back to $convert_row['poster_id']) instead of the boards default language*/function phpbb_set_encoding($text, $grab_user_lang = true){	global $lang_enc_array, $convert_row;	global $convert, $phpEx;	/*static $lang_enc_array = array(		'korean'						=> 'euc-kr',		'serbian'						=> 'windows-1250',		'polish'						=> 'iso-8859-2',		'kurdish'						=> 'windows-1254',		'slovak'						=> 'Windows-1250',		'russian'						=> 'windows-1251',		'estonian'						=> 'iso-8859-4',		'chinese_simplified'			=> 'gb2312',		'macedonian'					=> 'windows-1251',		'azerbaijani'					=> 'UTF-8',		'romanian'						=> 'iso-8859-2',		'romanian_diacritice'			=> 'iso-8859-2',		'lithuanian'					=> 'windows-1257',		'turkish'						=> 'iso-8859-9',		'ukrainian'						=> 'windows-1251',		'japanese'						=> 'shift_jis',		'hungarian'						=> 'ISO-8859-2',		'romanian_no_diacritics'		=> 'iso-8859-2',		'mongolian'						=> 'UTF-8',		'slovenian'						=> 'windows-1250',		'bosnian'						=> 'windows-1250',		'czech'							=> 'Windows-1250',		'farsi'							=> 'Windows-1256',		'croatian'						=> 'windows-1250',		'greek'							=> 'iso-8859-7',		'russian_tu'					=> 'windows-1251',		'sakha'							=> 'UTF-8',		'serbian_cyrillic'				=> 'windows-1251',		'bulgarian'						=> 'windows-1251',		'chinese_traditional_taiwan'	=> 'big5',		'chinese_traditional'			=> 'big5',		'arabic'						=> 'windows-1256',		'hebrew'						=> 'WINDOWS-1255',		'thai'							=> 'windows-874',		//'chinese_traditional_taiwan'	=> 'utf-8' // custom modified, we may have to do an include :-(	);*/	if (empty($lang_enc_array))	{		$lang_enc_array = array();	}	$get_lang = trim(get_config_value('default_lang'));	// Do we need the users language encoding?	if ($grab_user_lang && !empty($convert_row))	{		if (!empty($convert_row['user_lang']))		{			$get_lang = trim($convert_row['user_lang']);		}		else if (!empty($convert_row['poster_id']))		{			global $src_db, $same_db;			if ($convert->mysql_convert && $same_db)			{				$src_db->sql_query("SET NAMES 'binary'");			}			$sql = 'SELECT user_lang				FROM ' . $convert->src_table_prefix . 'users				WHERE user_id = ' . (int) $convert_row['poster_id'];			$result = $src_db->sql_query($sql);			$get_lang = (string) $src_db->sql_fetchfield('user_lang');			$src_db->sql_freeresult($result);			if ($convert->mysql_convert && $same_db)			{				$src_db->sql_query("SET NAMES 'utf8'");			}			$get_lang = (!trim($get_lang)) ? trim(get_config_value('default_lang')) : trim($get_lang);		}	}	if (!isset($lang_enc_array[$get_lang]))	{		$filename = $convert->options['forum_path'] . '/language/lang_' . $get_lang . '/lang_main.' . $phpEx;		if (!file_exists($filename))		{			$get_lang = trim(get_config_value('default_lang'));		}		if (!isset($lang_enc_array[$get_lang]))		{			include($convert->options['forum_path'] . '/language/lang_' . $get_lang . '/lang_main.' . $phpEx);			$lang_enc_array[$get_lang] = $lang['ENCODING'];			unset($lang);		}	}	$encoding = $lang_enc_array[$get_lang];	return utf8_recode($text, $lang_enc_array[$get_lang]);}/*** Same as phpbb_set_encoding, but forcing boards default language*/function phpbb_set_default_encoding($text){	return phpbb_set_encoding($text, false);}/*** Convert Birthday from Birthday MOD to phpBB Format*/function phpbb_get_birthday($birthday = ''){	if (defined('MOD_BIRTHDAY_TERRA'))	{		$birthday = (string) $birthday;		// stored as month, day, year		if (!$birthday)		{			return ' 0- 0-   0';		}		// We use the original mod code to retrieve the birthday (not ideal)		preg_match('/(..)(..)(....)/', sprintf('%08d', $birthday), $birthday_parts);		$month = $birthday_parts[1];		$day = $birthday_parts[2];		$year =  $birthday_parts[3];		return sprintf('%2d-%2d-%4d', $day, $month, $year);	}	else	{		$birthday = (int) $birthday;		if (!$birthday || $birthday == 999999 || ((version_compare(PHP_VERSION, '5.1.0') < 0) && $birthday < 0))		{			return ' 0- 0-   0';		}		// The birthday mod from niels is using this code to transform to day/month/year		return sprintf('%2d-%2d-%4d', gmdate('j', $birthday * 86400 + 1), gmdate('n', $birthday * 86400 + 1), gmdate('Y', $birthday * 86400 + 1));	}}/*** Return correct user id value* Everyone's id will be one higher to allow the guest/anonymous user to have a positive id as well*/function phpbb_user_id($user_id){	global $config;	// Increment user id if the old forum is having a user with the id 1	if (!isset($config['increment_user_id']))	{		global $src_db, $same_db, $convert;		if ($convert->mysql_convert && $same_db)		{			$src_db->sql_query("SET NAMES 'binary'");		}		// Now let us set a temporary config variable for user id incrementing		$sql = "SELECT user_id			FROM {$convert->src_table_prefix}users			WHERE user_id = 1";		$result = $src_db->sql_query($sql);		$id = (int) $src_db->sql_fetchfield('user_id');		$src_db->sql_freeresult($result);		// Try to get the maximum user id possible...		$sql = "SELECT MAX(user_id) AS max_user_id			FROM {$convert->src_table_prefix}users";		$result = $src_db->sql_query($sql);		$max_id = (int) $src_db->sql_fetchfield('max_user_id');		$src_db->sql_freeresult($result);		if ($convert->mysql_convert && $same_db)		{			$src_db->sql_query("SET NAMES 'utf8'");		}		// If there is a user id 1, we need to increment user ids. :/		if ($id === 1)		{			set_config('increment_user_id', ($max_id + 1), true);			$config['increment_user_id'] = $max_id + 1;		}		else		{			set_config('increment_user_id', 0, true);			$config['increment_user_id'] = 0;		}	}	// If the old user id is -1 in 2.0.x it is the anonymous user...	if ($user_id == -1)	{		return ANONYMOUS;	}	if (!empty($config['increment_user_id']) && $user_id == 1)	{		return $config['increment_user_id'];	}	// A user id of 0 can happen, for example within the ban table if no user is banned...	// Within the posts and topics table this can be "dangerous" but is the fault of the user	// having mods installed (a poster id of 0 is not possible in 2.0.x).	// Therefore, we return the user id "as is".	return (int) $user_id;}/* Copy additional table fields from old forum to new forum if user wants this (for Mod compatibility for example)function phpbb_copy_table_fields(){}*//*** Convert authentication* user, group and forum table has to be filled in order to work*/function phpbb_convert_authentication($mode){	global $db, $src_db, $same_db, $convert, $user, $config, $cache;	if ($mode == 'start')	{		$db->sql_query($convert->truncate_statement . ACL_USERS_TABLE);		$db->sql_query($convert->truncate_statement . ACL_GROUPS_TABLE);		// What we will do is handling all 2.0.x admins as founder to replicate what is common in 2.0.x.		// After conversion the main admin need to make sure he is removing permissions and the founder status if wanted.		// Grab user ids of users with user_level of ADMIN		$sql = "SELECT user_id			FROM {$convert->src_table_prefix}users			WHERE user_level = 1			ORDER BY user_regdate ASC";		$result = $src_db->sql_query($sql);		while ($row = $src_db->sql_fetchrow($result))		{			$user_id = (int) phpbb_user_id($row['user_id']);			// Set founder admin...			$sql = 'UPDATE ' . USERS_TABLE . '				SET user_type = ' . USER_FOUNDER . "				WHERE user_id = $user_id";			$db->sql_query($sql);		}		$src_db->sql_freeresult($result);		$sql = 'SELECT group_id			FROM ' . GROUPS_TABLE . "			WHERE group_name = '" . $db->sql_escape('BOTS') . "'";		$result = $db->sql_query($sql);		$bot_group_id = (int) $db->sql_fetchfield('group_id');		$db->sql_freeresult($result);	}	// Grab forum auth information	$sql = "SELECT *		FROM {$convert->src_table_prefix}forums";	$result = $src_db->sql_query($sql);	$forum_access = array();	while ($row = $src_db->sql_fetchrow($result))	{		$forum_access[$row['forum_id']] = $row;	}	$src_db->sql_freeresult($result);	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'binary'");	}	// Grab user auth information from 2.0.x board	$sql = "SELECT ug.user_id, aa.*		FROM {$convert->src_table_prefix}auth_access aa, {$convert->src_table_prefix}user_group ug, {$convert->src_table_prefix}groups g, {$convert->src_table_prefix}forums f		WHERE g.group_id = aa.group_id			AND g.group_single_user = 1			AND ug.group_id = g.group_id			AND f.forum_id = aa.forum_id";	$result = $src_db->sql_query($sql);	$user_access = array();	while ($row = $src_db->sql_fetchrow($result))	{		$user_access[$row['forum_id']][] = $row;	}	$src_db->sql_freeresult($result);	// Grab group auth information	$sql = "SELECT g.group_id, aa.*		FROM {$convert->src_table_prefix}auth_access aa, {$convert->src_table_prefix}groups g		WHERE g.group_id = aa.group_id			AND g.group_single_user <> 1";	$result = $src_db->sql_query($sql);	$group_access = array();	while ($row = $src_db->sql_fetchrow($result))	{		$group_access[$row['forum_id']][] = $row;	}	$src_db->sql_freeresult($result);	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'utf8'");	}	// Add Forum Access List	$auth_map = array(		'auth_view'			=> array('f_', 'f_list'),		'auth_read'			=> array('f_read', 'f_search'),		'auth_post'			=> array('f_post', 'f_bbcode', 'f_smilies', 'f_img', 'f_sigs', 'f_postcount', 'f_report', 'f_subscribe', 'f_print', 'f_email'),		'auth_reply'		=> 'f_reply',		'auth_edit'			=> 'f_edit',		'auth_delete'		=> 'f_delete',		'auth_pollcreate'	=> 'f_poll',		'auth_vote'			=> 'f_vote',		'auth_announce'		=> 'f_announce',		'auth_sticky'		=> 'f_sticky',		'auth_attachments'	=> array('f_attach', 'f_download'),		'auth_download'		=> 'f_download',	);	// Define the ACL constants used in 2.0 to make the code slightly more readable	define('AUTH_ALL', 0);	define('AUTH_REG', 1);	define('AUTH_ACL', 2);	define('AUTH_MOD', 3);	define('AUTH_ADMIN', 5);	// A mapping of the simple permissions used by 2.0	$simple_auth_ary = array(		'public'			=> array(			'auth_view'			=> AUTH_ALL,			'auth_read'			=> AUTH_ALL,			'auth_post'			=> AUTH_ALL,			'auth_reply'		=> AUTH_ALL,			'auth_edit'			=> AUTH_REG,			'auth_delete'		=> AUTH_REG,			'auth_sticky'		=> AUTH_MOD,			'auth_announce'		=> AUTH_MOD,			'auth_vote'			=> AUTH_REG,			'auth_pollcreate'	=> AUTH_REG,		),		'registered'		=> array(			'auth_view'			=> AUTH_ALL,			'auth_read'			=> AUTH_ALL,			'auth_post'			=> AUTH_REG,			'auth_reply'		=> AUTH_REG,			'auth_edit'			=> AUTH_REG,			'auth_delete'		=> AUTH_REG,			'auth_sticky'		=> AUTH_MOD,			'auth_announce'		=> AUTH_MOD,			'auth_vote'			=> AUTH_REG,			'auth_pollcreate'	=> AUTH_REG,		),		'registered_hidden'	=> array(			'auth_view'			=> AUTH_REG,			'auth_read'			=> AUTH_REG,			'auth_post'			=> AUTH_REG,			'auth_reply'		=> AUTH_REG,			'auth_edit'			=> AUTH_REG,			'auth_delete'		=> AUTH_REG,			'auth_sticky'		=> AUTH_MOD,			'auth_announce'		=> AUTH_MOD,			'auth_vote'			=> AUTH_REG,			'auth_pollcreate'	=> AUTH_REG,		),		'private'			=> array(			'auth_view'			=> AUTH_ALL,			'auth_read'			=> AUTH_ACL,			'auth_post'			=> AUTH_ACL,			'auth_reply'		=> AUTH_ACL,			'auth_edit'			=> AUTH_ACL,			'auth_delete'		=> AUTH_ACL,			'auth_sticky'		=> AUTH_ACL,			'auth_announce'		=> AUTH_MOD,			'auth_vote'			=> AUTH_ACL,			'auth_pollcreate'	=> AUTH_ACL,		),		'private_hidden'	=> array(			'auth_view'			=> AUTH_ACL,			'auth_read'			=> AUTH_ACL,			'auth_post'			=> AUTH_ACL,			'auth_reply'		=> AUTH_ACL,			'auth_edit'			=> AUTH_ACL,			'auth_delete'		=> AUTH_ACL,			'auth_sticky'		=> AUTH_ACL,			'auth_announce'		=> AUTH_MOD,			'auth_vote'			=> AUTH_ACL,			'auth_pollcreate'	=> AUTH_ACL,		),		'moderator'			=> array(			'auth_view'			=> AUTH_ALL,			'auth_read'			=> AUTH_MOD,			'auth_post'			=> AUTH_MOD,			'auth_reply'		=> AUTH_MOD,			'auth_edit'			=> AUTH_MOD,			'auth_delete'		=> AUTH_MOD,			'auth_sticky'		=> AUTH_MOD,			'auth_announce'		=> AUTH_MOD,			'auth_vote'			=> AUTH_MOD,			'auth_pollcreate'	=> AUTH_MOD,		),		'moderator_hidden'	=> array(			'auth_view'			=> AUTH_MOD,			'auth_read'			=> AUTH_MOD,			'auth_post'			=> AUTH_MOD,			'auth_reply'		=> AUTH_MOD,			'auth_edit'			=> AUTH_MOD,			'auth_delete'		=> AUTH_MOD,			'auth_sticky'		=> AUTH_MOD,			'auth_announce'		=> AUTH_MOD,			'auth_vote'			=> AUTH_MOD,			'auth_pollcreate'	=> AUTH_MOD,		),	);	if ($mode == 'start')	{		user_group_auth('guests', 'SELECT user_id, {GUESTS} FROM ' . USERS_TABLE . ' WHERE user_id = ' . ANONYMOUS, false);		user_group_auth('registered', 'SELECT user_id, {REGISTERED} FROM ' . USERS_TABLE . ' WHERE user_id <> ' . ANONYMOUS . " AND group_id <> $bot_group_id", false);		// Selecting from old table		if (!empty($config['increment_user_id']))		{			$auth_sql = 'SELECT user_id, {ADMINISTRATORS} FROM ' . $convert->src_table_prefix . 'users WHERE user_level = 1 AND user_id <> 1';			user_group_auth('administrators', $auth_sql, true);			$auth_sql = 'SELECT ' . $config['increment_user_id'] . ' as user_id, {ADMINISTRATORS} FROM ' . $convert->src_table_prefix . 'users WHERE user_level = 1 AND user_id = 1';			user_group_auth('administrators', $auth_sql, true);		}		else		{			$auth_sql = 'SELECT user_id, {ADMINISTRATORS} FROM ' . $convert->src_table_prefix . 'users WHERE user_level = 1';			user_group_auth('administrators', $auth_sql, true);		}		if (!empty($config['increment_user_id']))		{			$auth_sql = 'SELECT user_id, {GLOBAL_MODERATORS} FROM ' . $convert->src_table_prefix . 'users WHERE user_level = 1 AND user_id <> 1';			user_group_auth('global_moderators', $auth_sql, true);			$auth_sql = 'SELECT ' . $config['increment_user_id'] . ' as user_id, {GLOBAL_MODERATORS} FROM ' . $convert->src_table_prefix . 'users WHERE user_level = 1 AND user_id = 1';			user_group_auth('global_moderators', $auth_sql, true);		}		else		{			$auth_sql = 'SELECT user_id, {GLOBAL_MODERATORS} FROM ' . $convert->src_table_prefix . 'users WHERE user_level = 1';			user_group_auth('global_moderators', $auth_sql, true);		}	}	else if ($mode == 'first')	{		// Go through all 2.0.x forums		foreach ($forum_access as $forum)		{			$new_forum_id = (int) $forum['forum_id'];			// Administrators have full access to all forums whatever happens			mass_auth('group_role', $new_forum_id, 'administrators', 'FORUM_FULL');			$matched_type = '';			foreach ($simple_auth_ary as $key => $auth_levels)			{				$matched = 1;				foreach ($auth_levels as $k => $level)				{					if ($forum[$k] != $auth_levels[$k])					{						$matched = 0;					}				}				if ($matched)				{					$matched_type = $key;					break;				}			}			switch ($matched_type)			{				case 'public':					mass_auth('group_role', $new_forum_id, 'guests', 'FORUM_LIMITED');					mass_auth('group_role', $new_forum_id, 'registered', 'FORUM_LIMITED_POLLS');					mass_auth('group_role', $new_forum_id, 'bots', 'FORUM_BOT');				break;				case 'registered':					mass_auth('group_role', $new_forum_id, 'guests', 'FORUM_READONLY');					mass_auth('group_role', $new_forum_id, 'bots', 'FORUM_BOT');				// no break;				case 'registered_hidden':					mass_auth('group_role', $new_forum_id, 'registered', 'FORUM_POLLS');				break;				case 'private':				case 'private_hidden':				case 'moderator':				case 'moderator_hidden':				default:					// The permissions don't match a simple set, so we're going to have to map them directly					// No post approval for all, in 2.0.x this feature does not exist					mass_auth('group', $new_forum_id, 'guests', 'f_noapprove', ACL_YES);					mass_auth('group', $new_forum_id, 'registered', 'f_noapprove', ACL_YES);					// Go through authentication map					foreach ($auth_map as $old_auth_key => $new_acl)					{						// If old authentication key does not exist we continue						// This is helpful for mods adding additional authentication fields, we need to add them to the auth_map array						if (!isset($forum[$old_auth_key]))						{							continue;						}						// Now set the new ACL correctly						switch ($forum[$old_auth_key])						{							// AUTH_ALL							case AUTH_ALL:								mass_auth('group', $new_forum_id, 'guests', $new_acl, ACL_YES);								mass_auth('group', $new_forum_id, 'bots', $new_acl, ACL_YES);								mass_auth('group', $new_forum_id, 'registered', $new_acl, ACL_YES);							break;							// AUTH_REG							case AUTH_REG:								mass_auth('group', $new_forum_id, 'registered', $new_acl, ACL_YES);							break;							// AUTH_ACL							case AUTH_ACL:								// Go through the old group access list for this forum								if (isset($group_access[$forum['forum_id']]))								{									foreach ($group_access[$forum['forum_id']] as $index => $access)									{										// We only check for ACL_YES equivalence entry										if (isset($access[$old_auth_key]) && $access[$old_auth_key] == 1)										{											mass_auth('group', $new_forum_id, (int) $access['group_id'], $new_acl, ACL_YES);										}									}								}								if (isset($user_access[$forum['forum_id']]))								{									foreach ($user_access[$forum['forum_id']] as $index => $access)									{										// We only check for ACL_YES equivalence entry										if (isset($access[$old_auth_key]) && $access[$old_auth_key] == 1)										{											mass_auth('user', $new_forum_id, (int) phpbb_user_id($access['user_id']), $new_acl, ACL_YES);										}									}								}							break;							// AUTH_MOD							case AUTH_MOD:								if (isset($group_access[$forum['forum_id']]))								{									foreach ($group_access[$forum['forum_id']] as $index => $access)									{										// We only check for ACL_YES equivalence entry										if (isset($access[$old_auth_key]) && $access[$old_auth_key] == 1)										{											mass_auth('group', $new_forum_id, (int) $access['group_id'], $new_acl, ACL_YES);										}									}								}								if (isset($user_access[$forum['forum_id']]))								{									foreach ($user_access[$forum['forum_id']] as $index => $access)									{										// We only check for ACL_YES equivalence entry										if (isset($access[$old_auth_key]) && $access[$old_auth_key] == 1)										{											mass_auth('user', $new_forum_id, (int) phpbb_user_id($access['user_id']), $new_acl, ACL_YES);										}									}								}							break;						}					}				break;			}		}	}	else if ($mode == 'second')	{		// Assign permission roles and other default permissions		// guests having u_download and u_search ability		$db->sql_query('INSERT INTO ' . ACL_GROUPS_TABLE . ' (group_id, forum_id, auth_option_id, auth_role_id, auth_setting) SELECT ' . get_group_id('guests') . ', 0, auth_option_id, 0, 1 FROM ' . ACL_OPTIONS_TABLE . " WHERE auth_option IN ('u_', 'u_download', 'u_search')");		// administrators/global mods having full user features		mass_auth('group_role', 0, 'administrators', 'USER_FULL');		mass_auth('group_role', 0, 'global_moderators', 'USER_FULL');		// By default all converted administrators are given full access		mass_auth('group_role', 0, 'administrators', 'ADMIN_FULL');		// All registered users are assigned the standard user role		mass_auth('group_role', 0, 'registered', 'USER_STANDARD');		mass_auth('group_role', 0, 'registered_coppa', 'USER_STANDARD');		// Instead of administrators being global moderators we give the MOD_FULL role to global mods (admins already assigned to this group)		mass_auth('group_role', 0, 'global_moderators', 'MOD_FULL');		// And now those who have had their avatar rights removed get assigned a more restrictive role		$sql = 'SELECT user_id FROM ' . $convert->src_table_prefix . 'users			WHERE user_allowavatar = 0				AND user_id > 0';		$result = $src_db->sql_query($sql);		while ($row = $src_db->sql_fetchrow($result))		{			mass_auth('user_role', 0, (int) phpbb_user_id($row['user_id']), 'USER_NOAVATAR');		}		$src_db->sql_freeresult($result);		// And the same for those who have had their PM rights removed		$sql = 'SELECT user_id FROM ' . $convert->src_table_prefix . 'users			WHERE user_allow_pm = 0				AND user_id > 0';		$result = $src_db->sql_query($sql);		while ($row = $src_db->sql_fetchrow($result))		{			mass_auth('user_role', 0, (int) phpbb_user_id($row['user_id']), 'USER_NOPM');		}		$src_db->sql_freeresult($result);	}	else if ($mode == 'third')	{		// And now the moderators		// We make sure that they have at least standard access to the forums they moderate in addition to the moderating permissions		$mod_post_map = array(			'auth_announce'		=> 'f_announce',			'auth_sticky'		=> 'f_sticky'		);		foreach ($user_access as $forum_id => $access_map)		{			$forum_id = (int) $forum_id;			foreach ($access_map as $access)			{				if (isset($access['auth_mod']) && $access['auth_mod'] == 1)				{					mass_auth('user_role', $forum_id, (int) phpbb_user_id($access['user_id']), 'MOD_STANDARD');					mass_auth('user_role', $forum_id, (int) phpbb_user_id($access['user_id']), 'FORUM_STANDARD');					foreach ($mod_post_map as $old => $new)					{						if (isset($forum_access[$forum_id]) && isset($forum_access[$forum_id][$old]) && $forum_access[$forum_id][$old] == AUTH_MOD)						{							mass_auth('user', $forum_id, (int) phpbb_user_id($access['user_id']), $new, ACL_YES);						}					}				}			}		}		foreach ($group_access as $forum_id => $access_map)		{			$forum_id = (int) $forum_id;			foreach ($access_map as $access)			{				if (isset($access['auth_mod']) && $access['auth_mod'] == 1)				{					mass_auth('group_role', $forum_id, (int) $access['group_id'], 'MOD_STANDARD');					mass_auth('group_role', $forum_id, (int) $access['group_id'], 'FORUM_STANDARD');					foreach ($mod_post_map as $old => $new)					{						if (isset($forum_access[$forum_id]) && isset($forum_access[$forum_id][$old]) && $forum_access[$forum_id][$old] == AUTH_MOD)						{							mass_auth('group', $forum_id, (int) $access['group_id'], $new, ACL_YES);						}					}				}			}		}		// We grant everyone readonly access to the categories to ensure that the forums are visible		$sql = 'SELECT forum_id, forum_name, parent_id, left_id, right_id			FROM ' . FORUMS_TABLE . '			ORDER BY left_id ASC';		$result = $db->sql_query($sql);		$parent_forums = $forums = array();		while ($row = $db->sql_fetchrow($result))		{			if ($row['parent_id'] == 0)			{				mass_auth('group_role', $row['forum_id'], 'administrators', 'FORUM_FULL');				mass_auth('group_role', $row['forum_id'], 'global_moderators', 'FORUM_FULL');				$parent_forums[] = $row;			}			else			{				$forums[] = $row;			}		}		$db->sql_freeresult($result);		global $auth;		// Let us see which groups have access to these forums...		foreach ($parent_forums as $row)		{			// Get the children			$branch = $forum_ids = array();			foreach ($forums as $key => $_row)			{				if ($_row['left_id'] > $row['left_id'] && $_row['left_id'] < $row['right_id'])				{					$branch[] = $_row;					$forum_ids[] = $_row['forum_id'];					continue;				}			}			if (sizeof($forum_ids))			{				// Now make sure the user is able to read these forums				$hold_ary = $auth->acl_group_raw_data(false, 'f_list', $forum_ids);				if (empty($hold_ary))				{					continue;				}				foreach ($hold_ary as $g_id => $f_id_ary)				{					$set_group = false;					foreach ($f_id_ary as $f_id => $auth_ary)					{						foreach ($auth_ary as $auth_option => $setting)						{							if ($setting == ACL_YES)							{								$set_group = true;								break 2;							}						}					}					if ($set_group)					{						mass_auth('group', $row['forum_id'], $g_id, 'f_list', ACL_YES);					}				}			}		}	}}/*** Set primary group.* Really simple and only based on user_level (remaining groups will be assigned later)*/function phpbb_set_primary_group($user_level){	global $convert_row;	if ($user_level == 1)	{		return get_group_id('administrators');	}/*	else if ($user_level == 2)	{		return get_group_id('global_moderators');	}	else if ($user_level == 0 && $convert_row['user_active'])*/	else if ($convert_row['user_active'])	{		return get_group_id('registered');	}	return 0;}/*** Convert the group name, making sure to avoid conflicts with 3.0 special groups*/function phpbb_convert_group_name($group_name){	$default_groups = array(		'GUESTS',		'REGISTERED',		'REGISTERED_COPPA',		'GLOBAL_MODERATORS',		'ADMINISTRATORS',		'BOTS',	);	if (in_array(strtoupper($group_name), $default_groups))	{		return 'phpBB2 - ' . $group_name;	}	return phpbb_set_default_encoding($group_name);}/*** Convert the group type constants*/function phpbb_convert_group_type($group_type){	switch ($group_type)	{		case 0:			return GROUP_OPEN;		break;		case 1:			return GROUP_CLOSED;		break;		case 2:			return GROUP_HIDDEN;		break;	}	// Never return GROUP_SPECIAL here, because only phpBB3's default groups are allowed to have this type set.	return GROUP_HIDDEN;}/*** Convert the topic type constants*/function phpbb_convert_topic_type($topic_type){	switch ($topic_type)	{		case 0:			return POST_NORMAL;		break;		case 1:			return POST_STICKY;		break;		case 2:			return POST_ANNOUNCE;		break;		case 3:			return POST_GLOBAL;		break;	}	return POST_NORMAL;}function phpbb_replace_size($matches){	return '[size=' . min(200, ceil(100.0 * (((double) $matches[1])/12.0))) . ':' . $matches[2] . ']';}/*** Reparse the message stripping out the bbcode_uid values and adding new ones and setting the bitfield* @todo What do we want to do about HTML in messages - currently it gets converted to the entities, but there may be some objections to this*/function phpbb_prepare_message($message){	global $phpbb_root_path, $phpEx, $db, $convert, $user, $config, $cache, $convert_row, $message_parser;	if (!$message)	{		$convert->row['mp_bbcode_bitfield'] = $convert_row['mp_bbcode_bitfield'] = 0;		return '';	}	// Decode phpBB 2.0.x Message	if (isset($convert->row['old_bbcode_uid']) && $convert->row['old_bbcode_uid'] != '')	{		// Adjust size...		if (strpos($message, '[size=') !== false)		{			$message = preg_replace_callback('/\[size=(\d*):(' . $convert->row['old_bbcode_uid'] . ')\]/', 'phpbb_replace_size', $message);		}		$message = preg_replace('/\:(([a-z0-9]:)?)' . $convert->row['old_bbcode_uid'] . '/s', '', $message);	}	if (strpos($message, '[quote=') !== false)	{		$message = preg_replace('/\[quote="(.*?)"\]/s', '[quote=&quot;\1&quot;]', $message);		$message = preg_replace('/\[quote=\\\"(.*?)\\\"\]/s', '[quote=&quot;\1&quot;]', $message);		// let's hope that this solves more problems than it causes. Deal with escaped quotes.		$message = str_replace('\"', '&quot;', $message);		$message = str_replace('\&quot;', '&quot;', $message);	}	// Already the new user id ;)	$user_id = $convert->row['poster_id'];	$message = str_replace('<br />', "\n", $message);	$message = str_replace('<', '&lt;', $message);	$message = str_replace('>', '&gt;', $message);	// make the post UTF-8	$message = phpbb_set_encoding($message);	$message_parser->warn_msg = array(); // Reset the errors from the previous message	$message_parser->bbcode_uid = make_uid($convert->row['post_time']);	$message_parser->message = $message;	unset($message);	// Make sure options are set.//	$enable_html = (!isset($row['enable_html'])) ? false : $row['enable_html'];	$enable_bbcode = (!isset($convert->row['enable_bbcode'])) ? true : $convert->row['enable_bbcode'];	$enable_smilies = (!isset($convert->row['enable_smilies'])) ? true : $convert->row['enable_smilies'];	$enable_magic_url = (!isset($convert->row['enable_magic_url'])) ? true : $convert->row['enable_magic_url'];	// parse($allow_bbcode, $allow_magic_url, $allow_smilies, $allow_img_bbcode = true, $allow_flash_bbcode = true, $allow_quote_bbcode = true, $allow_url_bbcode = true, $update_this_message = true, $mode = 'post')	$message_parser->parse($enable_bbcode, $enable_magic_url, $enable_smilies);	if (sizeof($message_parser->warn_msg))	{		$msg_id = isset($convert->row['post_id']) ? $convert->row['post_id'] : $convert->row['privmsgs_id'];		$convert->p_master->error('<span style="color:red">' . $user->lang['POST_ID'] . ': ' . $msg_id . ' ' . $user->lang['CONV_ERROR_MESSAGE_PARSER'] . ': <br /><br />' . implode('<br />', $message_parser->warn_msg), __LINE__, __FILE__, true);	}	$convert->row['mp_bbcode_bitfield'] = $convert_row['mp_bbcode_bitfield'] = $message_parser->bbcode_bitfield;	$message = $message_parser->message;	unset($message_parser->message);	return $message;}/*** Return the bitfield calculated by the previous function*/function get_bbcode_bitfield(){	global $convert_row;	return $convert_row['mp_bbcode_bitfield'];}/*** Determine the last user to edit a post* In practice we only tracked edits by the original poster in 2.0.x so this will only be set if they had edited their own post*/function phpbb_post_edit_user(){	global $convert_row, $config;	if (isset($convert_row['post_edit_count']))	{		return phpbb_user_id($convert_row['poster_id']);	}	return 0;}/*** Obtain the path to uploaded files on the 2.0.x forum* This is only used if the Attachment MOD was installed*/function phpbb_get_files_dir(){	if (!defined('MOD_ATTACHMENT'))	{		return;	}	global $src_db, $same_db, $convert, $user, $config, $cache;	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'binary'");	}	$sql = 'SELECT config_value AS upload_dir		FROM ' . $convert->src_table_prefix . "attachments_config		WHERE config_name = 'upload_dir'";	$result = $src_db->sql_query($sql);	$upload_path = $src_db->sql_fetchfield('upload_dir');	$src_db->sql_freeresult($result);	$sql = 'SELECT config_value AS ftp_upload		FROM ' . $convert->src_table_prefix . "attachments_config		WHERE config_name = 'allow_ftp_upload'";	$result = $src_db->sql_query($sql);	$ftp_upload = (int) $src_db->sql_fetchfield('ftp_upload');	$src_db->sql_freeresult($result);	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'utf8'");	}	if ($ftp_upload)	{		$convert->p_master->error($user->lang['CONV_ERROR_ATTACH_FTP_DIR'], __LINE__, __FILE__);	}	return $upload_path;}/*** Copy thumbnails of uploaded images from the 2.0.x forum* This is only used if the Attachment MOD was installed*/function phpbb_copy_thumbnails(){	global $db, $convert, $user, $config, $cache, $phpbb_root_path;	$src_path = $convert->options['forum_path'] . '/' . phpbb_get_files_dir() . '/thumbs/';	if ($handle = @opendir($src_path))	{		while ($entry = readdir($handle))		{			if ($entry[0] == '.')			{				continue;			}			if (is_dir($src_path . $entry))			{				continue;			}			else			{				copy_file($src_path . $entry, $config['upload_path'] . '/' . preg_replace('/^t_/', 'thumb_', $entry));				@unlink($phpbb_root_path . $config['upload_path'] . '/thumbs/' . $entry);			}		}		closedir($handle);	}}/*** Convert the attachment category constants* This is only used if the Attachment MOD was installed*/function phpbb_attachment_category($cat_id){	switch ($cat_id)	{		case 1:			return ATTACHMENT_CATEGORY_IMAGE;		break;		case 2:			return ATTACHMENT_CATEGORY_WM;		break;		case 3:			return ATTACHMENT_CATEGORY_FLASH;		break;	}	return ATTACHMENT_CATEGORY_NONE;}/*** Obtain list of forums in which different attachment categories can be used*/function phpbb_attachment_forum_perms($forum_permissions){	if (empty($forum_permissions))	{		return '';	}	// Decode forum permissions	$forum_ids = array();	$one_char_encoding = '#';	$two_char_encoding = '.';	$auth_len = 1;	for ($pos = 0; $pos < strlen($forum_permissions); $pos += $auth_len)	{		$forum_auth = substr($forum_permissions, $pos, 1);		if ($forum_auth == $one_char_encoding)		{			$auth_len = 1;			continue;		}		else if ($forum_auth == $two_char_encoding)		{			$auth_len = 2;			$pos--;			continue;		}		$forum_auth = substr($forum_permissions, $pos, $auth_len);		$forum_id = base64_unpack($forum_auth);		$forum_ids[] = (int) $forum_id;	}	if (sizeof($forum_ids))	{		return attachment_forum_perms($forum_ids);	}	return '';}/*** Convert the avatar type constants*/function phpbb_avatar_type($type){	switch ($type)	{		case 1:			return AVATAR_UPLOAD;		break;		case 2:			return AVATAR_REMOTE;		break;		case 3:			return AVATAR_GALLERY;		break;	}	return 0;}/*** Just undos the replacing of '<' and '>'*/function  phpbb_smilie_html_decode($code){	$code = str_replace('&lt;', '<', $code);	return str_replace('&gt;', '>', $code);}/*** Transfer avatars, copying the image if it was uploaded*/function phpbb_import_avatar($user_avatar){	global $convert_row;	if (!$convert_row['user_avatar_type'])	{		return '';	}	else if ($convert_row['user_avatar_type'] == 1)	{		// Uploaded avatar		return import_avatar($user_avatar, false, $convert_row['user_id']);	}	else if ($convert_row['user_avatar_type'] == 2)	{		// Remote avatar		return $user_avatar;	}	else if ($convert_row['user_avatar_type'] == 3)	{		// Gallery avatar		return $user_avatar;	}	return '';}/*** Find out about the avatar's dimensions*/function phpbb_get_avatar_height($user_avatar){	global $convert_row;	if (empty($convert_row['user_avatar_type']))	{		return 0;	}	return get_avatar_height($user_avatar, 'phpbb_avatar_type', $convert_row['user_avatar_type']);}/*** Find out about the avatar's dimensions*/function phpbb_get_avatar_width($user_avatar){	global $convert_row;	if (empty($convert_row['user_avatar_type']))	{		return 0;	}	return get_avatar_width($user_avatar, 'phpbb_avatar_type', $convert_row['user_avatar_type']);}/*** Calculate the correct to_address field for private messages*/function phpbb_privmsgs_to_userid($to_userid){	global $config;	return 'u_' . phpbb_user_id($to_userid);}/*** Calculate whether a private message was unread using the bitfield*/function phpbb_unread_pm($pm_type){	return ($pm_type == 5) ? 1 : 0;}/*** Calculate whether a private message was new using the bitfield*/function phpbb_new_pm($pm_type){	return ($pm_type == 1) ? 1 : 0;}/*** Obtain the folder_id for the custom folder created to replace the savebox from 2.0.x (used to store saved private messages)*/function phpbb_get_savebox_id($user_id){	global $db;	$user_id = phpbb_user_id($user_id);	// Only one custom folder, check only one	$sql = 'SELECT folder_id		FROM ' . PRIVMSGS_FOLDER_TABLE . '		WHERE user_id = ' . $user_id;	$result = $db->sql_query_limit($sql, 1);	$folder_id = (int) $db->sql_fetchfield('folder_id');	$db->sql_freeresult($result);	return $folder_id;}/*** Transfer attachment specific configuration options* These were not stored in the main config table on 2.0.x* This is only used if the Attachment MOD was installed*/function phpbb_import_attach_config(){	global $db, $src_db, $same_db, $convert, $config;	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'binary'");	}	$sql = 'SELECT *		FROM ' . $convert->src_table_prefix . 'attachments_config';	$result = $src_db->sql_query($sql);	if ($convert->mysql_convert && $same_db)	{		$src_db->sql_query("SET NAMES 'utf8'");	}	$attach_config = array();	while ($row = $src_db->sql_fetchrow($result))	{		$attach_config[$row['config_name']] = $row['config_value'];	}	$src_db->sql_freeresult($result);	set_config('allow_attachments', 1);	// old attachment mod? Must be very old if this entry do not exist...	if (!empty($attach_config['display_order']))	{		set_config('display_order', $attach_config['display_order']);	}	set_config('max_filesize', $attach_config['max_filesize']);	set_config('max_filesize_pm', $attach_config['max_filesize_pm']);	set_config('attachment_quota', $attach_config['attachment_quota']);	set_config('max_attachments', $attach_config['max_attachments']);	set_config('max_attachments_pm', $attach_config['max_attachments_pm']);	set_config('allow_pm_attach', $attach_config['allow_pm_attach']);	set_config('img_display_inlined', $attach_config['img_display_inlined']);	set_config('img_max_width', $attach_config['img_max_width']);	set_config('img_max_height', $attach_config['img_max_height']);	set_config('img_link_width', $attach_config['img_link_width']);	set_config('img_link_height', $attach_config['img_link_height']);	set_config('img_create_thumbnail', $attach_config['img_create_thumbnail']);	set_config('img_max_thumb_width', 400);	set_config('img_min_thumb_filesize', $attach_config['img_min_thumb_filesize']);	set_config('img_imagick', $attach_config['img_imagick']);}/*** Calculate the date a user became inactive*/function phpbb_inactive_time(){	global $convert_row;	if ($convert_row['user_active'])	{		return 0;	}	if ($convert_row['user_lastvisit'])	{		return $convert_row['user_lastvisit'];	}	return $convert_row['user_regdate'];}/*** Calculate the reason a user became inactive* We can't actually tell the difference between a manual deactivation and one for profile changes* from the data available to assume the latter*/function phpbb_inactive_reason(){	global $convert_row;	if ($convert_row['user_active'])	{		return 0;	}	if ($convert_row['user_lastvisit'])	{		return INACTIVE_PROFILE;	}	return INACTIVE_REGISTER;}/*** Adjust 2.0.x disallowed names to 3.0.x format*/function phpbb_disallowed_username($username){	// Replace * with %	$username = phpbb_set_default_encoding(str_replace('*', '%', $username));	return utf8_htmlspecialchars($username);}/*** Checks whether there are any usernames on the old board that would map to the same* username_clean on phpBB3. Prints out a list if any exist and exits.*/function phpbb_create_userconv_table(){	global $db, $src_db, $convert, $table_prefix, $user, $lang;	$map_dbms = '';	switch ($db->sql_layer)	{		case 'mysql':			$map_dbms = 'mysql_40';		break;		case 'mysql4':			if (version_compare($db->sql_server_info(true), '4.1.3', '>='))			{				$map_dbms = 'mysql_41';			}			else			{				$map_dbms = 'mysql_40';			}		break;		case 'mysqli':			$map_dbms = 'mysql_41';		break;		case 'mssql':		case 'mssql_odbc':		case 'mssqlnative':			$map_dbms = 'mssql';		break;		default:			$map_dbms = $db->sql_layer;		break;	}	// create a temporary table in which we store the clean usernames	$drop_sql = 'DROP TABLE ' . USERCONV_TABLE;	switch ($map_dbms)	{		case 'firebird':			$create_sql = 'CREATE TABLE ' . USERCONV_TABLE . ' (				user_id INTEGER NOT NULL,				username_clean VARCHAR(255) CHARACTER SET UTF8 DEFAULT \'\' NOT NULL COLLATE UNICODE			)';		break;		case 'mssql':			$create_sql = 'CREATE TABLE [' . USERCONV_TABLE . '] (				[user_id] [int] NOT NULL ,				[username_clean] [varchar] (255) DEFAULT (\'\') NOT NULL			)';		break;		case 'mysql_40':			$create_sql = 'CREATE TABLE ' . USERCONV_TABLE . ' (				user_id mediumint(8) NOT NULL,				username_clean blob NOT NULL			)';		break;		case 'mysql_41':			$create_sql = 'CREATE TABLE ' . USERCONV_TABLE . ' (				user_id mediumint(8) NOT NULL,				username_clean varchar(255) DEFAULT \'\' NOT NULL			) CHARACTER SET `utf8` COLLATE `utf8_bin`';		break;		case 'oracle':			$create_sql = 'CREATE TABLE ' . USERCONV_TABLE . ' (				user_id number(8) NOT NULL,				username_clean varchar2(255) DEFAULT \'\'			)';		break;		case 'postgres':			$create_sql = 'CREATE TABLE ' . USERCONV_TABLE . ' (				user_id INT4 DEFAULT \'0\',				username_clean varchar_ci DEFAULT \'\' NOT NULL			)';		break;		case 'sqlite':			$create_sql = 'CREATE TABLE ' . USERCONV_TABLE . ' (				user_id INTEGER NOT NULL DEFAULT \'0\',				username_clean varchar(255) NOT NULL DEFAULT \'\'			)';		break;	}	$db->sql_return_on_error(true);	$db->sql_query($drop_sql);	$db->sql_return_on_error(false);	$db->sql_query($create_sql);}function phpbb_check_username_collisions(){	global $db, $src_db, $convert, $table_prefix, $user, $lang;	// now find the clean version of the usernames that collide	$sql = 'SELECT username_clean		FROM ' . USERCONV_TABLE .'		GROUP BY username_clean		HAVING COUNT(user_id) > 1';	$result = $db->sql_query($sql);	$colliding_names = array();	while ($row = $db->sql_fetchrow($result))	{		$colliding_names[] = $row['username_clean'];	}	$db->sql_freeresult($result);	// there was at least one collision, the admin will have to solve it before conversion can continue	if (sizeof($colliding_names))	{		$sql = 'SELECT user_id, username_clean			FROM ' . USERCONV_TABLE . '			WHERE ' . $db->sql_in_set('username_clean', $colliding_names);		$result = $db->sql_query($sql);		unset($colliding_names);		$colliding_user_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$colliding_user_ids[(int) $row['user_id']] = $row['username_clean'];		}		$db->sql_freeresult($result);		$sql = 'SELECT username, user_id, user_posts			FROM ' . $convert->src_table_prefix . 'users			WHERE ' . $src_db->sql_in_set('user_id', array_keys($colliding_user_ids));		$result = $src_db->sql_query($sql);		$colliding_users = array();		while ($row = $src_db->sql_fetchrow($result))		{			$row['user_id'] = (int) $row['user_id'];			if (isset($colliding_user_ids[$row['user_id']]))			{				$colliding_users[$colliding_user_ids[$row['user_id']]][] = $row;			}		}		$src_db->sql_freeresult($result);		unset($colliding_user_ids);		$list = '';		foreach ($colliding_users as $username_clean => $users)		{			$list .= sprintf($user->lang['COLLIDING_CLEAN_USERNAME'], $username_clean) . "<br />\n";			foreach ($users as $i => $row)			{				$list .= sprintf($user->lang['COLLIDING_USER'], $row['user_id'], phpbb_set_default_encoding($row['username']), $row['user_posts']) . "<br />\n";			}		}		$lang['INST_ERR_FATAL'] = $user->lang['CONV_ERR_FATAL'];		$convert->p_master->error('<span style="color:red">' . $user->lang['COLLIDING_USERNAMES_FOUND'] . '</span></b><br /><br />' . $list . '<b>', __LINE__, __FILE__);	}	$drop_sql = 'DROP TABLE ' . USERCONV_TABLE;	$db->sql_query($drop_sql);}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** mcp_queue* Handling the moderation queue* @package mcp*/class mcp_queue{	var $p_master;	var $u_action;	function mcp_queue(&$p_master)	{		$this->p_master = &$p_master;	}	function main($id, $mode)	{		global $auth, $db, $user, $template, $cache;		global $config, $phpbb_root_path, $phpEx, $action;		include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);		$forum_id = request_var('f', 0);		$start = request_var('start', 0);		$this->page_title = 'MCP_QUEUE';		switch ($action)		{			case 'approve':			case 'disapprove':				include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);				$post_id_list = request_var('post_id_list', array(0));				if (!sizeof($post_id_list))				{					trigger_error('NO_POST_SELECTED');				}				if ($action == 'approve')				{					approve_post($post_id_list, 'queue', $mode);				}				else				{					disapprove_post($post_id_list, 'queue', $mode);				}			break;		}		switch ($mode)		{			case 'approve_details':				$this->tpl_name = 'mcp_post';				$user->add_lang(array('posting', 'viewtopic'));				$post_id = request_var('p', 0);				$topic_id = request_var('t', 0);				if ($topic_id)				{					$topic_info = get_topic_data(array($topic_id), 'm_approve');					if (isset($topic_info[$topic_id]['topic_first_post_id']))					{						$post_id = (int) $topic_info[$topic_id]['topic_first_post_id'];					}					else					{						$topic_id = 0;					}				}				$post_info = get_post_data(array($post_id), 'm_approve', true);				if (!sizeof($post_info))				{					trigger_error('NO_POST_SELECTED');				}				$post_info = $post_info[$post_id];				if ($post_info['topic_first_post_id'] != $post_id && topic_review($post_info['topic_id'], $post_info['forum_id'], 'topic_review', 0, false))				{					$template->assign_vars(array(						'S_TOPIC_REVIEW'	=> true,						'S_BBCODE_ALLOWED'	=> $post_info['enable_bbcode'],						'TOPIC_TITLE'		=> $post_info['topic_title'])					);				}				$extensions = $attachments = $topic_tracking_info = array();				// Get topic tracking info				if ($config['load_db_lastread'])				{					$tmp_topic_data = array($post_info['topic_id'] => $post_info);					$topic_tracking_info = get_topic_tracking($post_info['forum_id'], $post_info['topic_id'], $tmp_topic_data, array($post_info['forum_id'] => $post_info['forum_mark_time']));					unset($tmp_topic_data);				}				else				{					$topic_tracking_info = get_complete_topic_tracking($post_info['forum_id'], $post_info['topic_id']);				}				$post_unread = (isset($topic_tracking_info[$post_info['topic_id']]) && $post_info['post_time'] > $topic_tracking_info[$post_info['topic_id']]) ? true : false;				// Process message, leave it uncensored				$message = $post_info['post_text'];				if ($post_info['bbcode_bitfield'])				{					include_once($phpbb_root_path . 'includes/bbcode.' . $phpEx);					$bbcode = new bbcode($post_info['bbcode_bitfield']);					$bbcode->bbcode_second_pass($message, $post_info['bbcode_uid'], $post_info['bbcode_bitfield']);				}				$message = bbcode_nl2br($message);				$message = smiley_text($message);				if ($post_info['post_attachment'] && $auth->acl_get('u_download') && $auth->acl_get('f_download', $post_info['forum_id']))				{					$extensions = $cache->obtain_attach_extensions($post_info['forum_id']);					$sql = 'SELECT *						FROM ' . ATTACHMENTS_TABLE . '						WHERE post_msg_id = ' . $post_id . '							AND in_message = 0						ORDER BY filetime DESC, post_msg_id ASC';					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$attachments[] = $row;					}					$db->sql_freeresult($result);					if (sizeof($attachments))					{						$update_count = array();						parse_attachments($post_info['forum_id'], $message, $attachments, $update_count);					}					// Display not already displayed Attachments for this post, we already parsed them. ;)					if (!empty($attachments))					{						$template->assign_var('S_HAS_ATTACHMENTS', true);						foreach ($attachments as $attachment)						{							$template->assign_block_vars('attachment', array(								'DISPLAY_ATTACHMENT'	=> $attachment)							);						}					}				}				$post_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $post_info['forum_id'] . '&amp;p=' . $post_info['post_id'] . '#p' . $post_info['post_id']);				$topic_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $post_info['forum_id'] . '&amp;t=' . $post_info['topic_id']);				$template->assign_vars(array(					'S_MCP_QUEUE'			=> true,					'U_APPROVE_ACTION'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=queue&amp;p=$post_id&amp;f=$forum_id"),					'S_CAN_VIEWIP'			=> $auth->acl_get('m_info', $post_info['forum_id']),					'S_POST_REPORTED'		=> $post_info['post_reported'],					'S_POST_UNAPPROVED'		=> !$post_info['post_approved'],					'S_POST_LOCKED'			=> $post_info['post_edit_locked'],					'S_USER_NOTES'			=> true,					'U_EDIT'				=> ($auth->acl_get('m_edit', $post_info['forum_id'])) ? append_sid("{$phpbb_root_path}posting.$phpEx", "mode=edit&amp;f={$post_info['forum_id']}&amp;p={$post_info['post_id']}") : '',					'U_MCP_APPROVE'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue&amp;mode=approve_details&amp;f=' . $post_info['forum_id'] . '&amp;p=' . $post_id),					'U_MCP_REPORT'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports&amp;mode=report_details&amp;f=' . $post_info['forum_id'] . '&amp;p=' . $post_id),					'U_MCP_USER_NOTES'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $post_info['user_id']),					'U_MCP_WARN_USER'		=> ($auth->acl_get('m_warn')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=warn&amp;mode=warn_user&amp;u=' . $post_info['user_id']) : '',					'U_VIEW_POST'			=> $post_url,					'U_VIEW_TOPIC'			=> $topic_url,					'MINI_POST_IMG'			=> ($post_unread) ? $user->img('icon_post_target_unread', 'UNREAD_POST') : $user->img('icon_post_target', 'POST'),					'RETURN_QUEUE'			=> sprintf($user->lang['RETURN_QUEUE'], '<a href="' . append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue' . (($topic_id) ? '&amp;mode=unapproved_topics' : '&amp;mode=unapproved_posts')) . "&amp;start=$start\">", '</a>'),					'RETURN_POST'			=> sprintf($user->lang['RETURN_POST'], '<a href="' . $post_url . '">', '</a>'),					'RETURN_TOPIC_SIMPLE'	=> sprintf($user->lang['RETURN_TOPIC_SIMPLE'], '<a href="' . $topic_url . '">', '</a>'),					'REPORTED_IMG'			=> $user->img('icon_topic_reported', $user->lang['POST_REPORTED']),					'UNAPPROVED_IMG'		=> $user->img('icon_topic_unapproved', $user->lang['POST_UNAPPROVED']),					'EDIT_IMG'				=> $user->img('icon_post_edit', $user->lang['EDIT_POST']),					'POST_AUTHOR_FULL'		=> get_username_string('full', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),					'POST_AUTHOR_COLOUR'	=> get_username_string('colour', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),					'POST_AUTHOR'			=> get_username_string('username', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),					'U_POST_AUTHOR'			=> get_username_string('profile', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),					'POST_PREVIEW'			=> $message,					'POST_SUBJECT'			=> $post_info['post_subject'],					'POST_DATE'				=> $user->format_date($post_info['post_time']),					'POST_IP'				=> $post_info['poster_ip'],					'POST_IPADDR'			=> ($auth->acl_get('m_info', $post_info['forum_id']) && request_var('lookup', '')) ? @gethostbyaddr($post_info['poster_ip']) : '',					'POST_ID'				=> $post_info['post_id'],					'S_FIRST_POST'			=> ($post_info['topic_first_post_id'] == $post_id),					'U_LOOKUP_IP'			=> ($auth->acl_get('m_info', $post_info['forum_id'])) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue&amp;mode=approve_details&amp;f=' . $post_info['forum_id'] . '&amp;p=' . $post_id . '&amp;lookup=' . $post_info['poster_ip']) . '#ip' : '',				));			break;			case 'unapproved_topics':			case 'unapproved_posts':				$user->add_lang(array('viewtopic', 'viewforum'));				$topic_id = request_var('t', 0);				$forum_info = array();				if ($topic_id)				{					$topic_info = get_topic_data(array($topic_id));					if (!sizeof($topic_info))					{						trigger_error('TOPIC_NOT_EXIST');					}					$topic_info = $topic_info[$topic_id];					$forum_id = $topic_info['forum_id'];				}				$forum_list_approve = get_forum_list('m_approve', false, true);				$forum_list_read = array_flip(get_forum_list('f_read', true, true)); // Flipped so we can isset() the forum IDs				// Remove forums we cannot read				foreach ($forum_list_approve as $k => $forum_data)				{					if (!isset($forum_list_read[$forum_data['forum_id']]))					{						unset($forum_list_approve[$k]);					}				}				unset($forum_list_read);				if (!$forum_id)				{					$forum_list = array();					foreach ($forum_list_approve as $row)					{						$forum_list[] = $row['forum_id'];					}					if (!sizeof($forum_list))					{						trigger_error('NOT_MODERATOR');					}					$global_id = $forum_list[0];					$forum_list = implode(', ', $forum_list);					$sql = 'SELECT SUM(forum_topics) as sum_forum_topics						FROM ' . FORUMS_TABLE . "						WHERE forum_id IN (0, $forum_list)";					$result = $db->sql_query($sql);					$forum_info['forum_topics'] = (int) $db->sql_fetchfield('sum_forum_topics');					$db->sql_freeresult($result);				}				else				{					$forum_info = get_forum_data(array($forum_id), 'm_approve');					if (!sizeof($forum_info))					{						trigger_error('NOT_MODERATOR');					}					$forum_info = $forum_info[$forum_id];					$forum_list = $forum_id;					$global_id = $forum_id;				}				$forum_options = '<option value="0"' . (($forum_id == 0) ? ' selected="selected"' : '') . '>' . $user->lang['ALL_FORUMS'] . '</option>';				foreach ($forum_list_approve as $row)				{					$forum_options .= '<option value="' . $row['forum_id'] . '"' . (($forum_id == $row['forum_id']) ? ' selected="selected"' : '') . '>' . str_repeat('&nbsp; &nbsp;', $row['padding']) . $row['forum_name'] . '</option>';				}				$sort_days = $total = 0;				$sort_key = $sort_dir = '';				$sort_by_sql = $sort_order_sql = array();				mcp_sorting($mode, $sort_days, $sort_key, $sort_dir, $sort_by_sql, $sort_order_sql, $total, $forum_id, $topic_id);				$forum_topics = ($total == -1) ? $forum_info['forum_topics'] : $total;				$limit_time_sql = ($sort_days) ? 'AND t.topic_last_post_time >= ' . (time() - ($sort_days * 86400)) : '';				$forum_names = array();				if ($mode == 'unapproved_posts')				{					$sql = 'SELECT p.post_id						FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . ' t' . (($sort_order_sql[0] == 'u') ? ', ' . USERS_TABLE . ' u' : '') . "						WHERE p.forum_id IN (0, $forum_list)							AND p.post_approved = 0							" . (($sort_order_sql[0] == 'u') ? 'AND u.user_id = p.poster_id' : '') . '							' . (($topic_id) ? 'AND p.topic_id = ' . $topic_id : '') . "							AND t.topic_id = p.topic_id							AND t.topic_first_post_id <> p.post_id							$limit_time_sql						ORDER BY $sort_order_sql";					$result = $db->sql_query_limit($sql, $config['topics_per_page'], $start);					$i = 0;					$post_ids = array();					while ($row = $db->sql_fetchrow($result))					{						$post_ids[] = $row['post_id'];						$row_num[$row['post_id']] = $i++;					}					$db->sql_freeresult($result);					if (sizeof($post_ids))					{						$sql = 'SELECT t.topic_id, t.topic_title, t.forum_id, p.post_id, p.post_subject, p.post_username, p.poster_id, p.post_time, u.username, u.username_clean, u.user_colour							FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . ' t, ' . USERS_TABLE . ' u							WHERE ' . $db->sql_in_set('p.post_id', $post_ids) . '								AND t.topic_id = p.topic_id								AND u.user_id = p.poster_id							ORDER BY ' . $sort_order_sql;						$result = $db->sql_query($sql);						$post_data = $rowset = array();						while ($row = $db->sql_fetchrow($result))						{							if ($row['forum_id'])							{								$forum_names[] = $row['forum_id'];							}							$post_data[$row['post_id']] = $row;						}						$db->sql_freeresult($result);						foreach ($post_ids as $post_id)						{							$rowset[] = $post_data[$post_id];						}						unset($post_data, $post_ids);					}					else					{						$rowset = array();					}				}				else				{					$sql = 'SELECT t.forum_id, t.topic_id, t.topic_title, t.topic_title AS post_subject, t.topic_time AS post_time, t.topic_poster AS poster_id, t.topic_first_post_id AS post_id, t.topic_first_poster_name AS username, t.topic_first_poster_colour AS user_colour						FROM ' . TOPICS_TABLE . " t						WHERE forum_id IN (0, $forum_list)							AND topic_approved = 0							$limit_time_sql						ORDER BY $sort_order_sql";					$result = $db->sql_query_limit($sql, $config['topics_per_page'], $start);					$rowset = array();					while ($row = $db->sql_fetchrow($result))					{						if ($row['forum_id'])						{							$forum_names[] = $row['forum_id'];						}						$rowset[] = $row;					}					$db->sql_freeresult($result);				}				if (sizeof($forum_names))				{					// Select the names for the forum_ids					$sql = 'SELECT forum_id, forum_name						FROM ' . FORUMS_TABLE . '						WHERE ' . $db->sql_in_set('forum_id', $forum_names);					$result = $db->sql_query($sql, 3600);					$forum_names = array();					while ($row = $db->sql_fetchrow($result))					{						$forum_names[$row['forum_id']] = $row['forum_name'];					}					$db->sql_freeresult($result);				}				foreach ($rowset as $row)				{					$global_topic = ($row['forum_id']) ? false : true;					if ($global_topic)					{						$row['forum_id'] = $global_id;					}					if (empty($row['post_username']))					{						$row['post_username'] = $user->lang['GUEST'];					}					$template->assign_block_vars('postrow', array(						'U_TOPIC'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $row['forum_id'] . '&amp;t=' . $row['topic_id']),						'U_VIEWFORUM'		=> (!$global_topic) ? append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $row['forum_id']) : '',						'U_VIEWPOST'		=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $row['forum_id'] . '&amp;p=' . $row['post_id']) . (($mode == 'unapproved_posts') ? '#p' . $row['post_id'] : ''),						'U_VIEW_DETAILS'	=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=queue&amp;start=$start&amp;mode=approve_details&amp;f={$row['forum_id']}&amp;p={$row['post_id']}" . (($mode == 'unapproved_topics') ? "&amp;t={$row['topic_id']}" : '')),						'POST_AUTHOR_FULL'		=> get_username_string('full', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),						'POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),						'POST_AUTHOR'			=> get_username_string('username', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),						'U_POST_AUTHOR'			=> get_username_string('profile', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),						'POST_ID'		=> $row['post_id'],						'FORUM_NAME'	=> (!$global_topic) ? $forum_names[$row['forum_id']] : $user->lang['GLOBAL_ANNOUNCEMENT'],						'POST_SUBJECT'	=> ($row['post_subject'] != '') ? $row['post_subject'] : $user->lang['NO_SUBJECT'],						'TOPIC_TITLE'	=> $row['topic_title'],						'POST_TIME'		=> $user->format_date($row['post_time']))					);				}				unset($rowset, $forum_names);				// Now display the page				$template->assign_vars(array(					'L_DISPLAY_ITEMS'		=> ($mode == 'unapproved_posts') ? $user->lang['DISPLAY_POSTS'] : $user->lang['DISPLAY_TOPICS'],					'L_EXPLAIN'				=> ($mode == 'unapproved_posts') ? $user->lang['MCP_QUEUE_UNAPPROVED_POSTS_EXPLAIN'] : $user->lang['MCP_QUEUE_UNAPPROVED_TOPICS_EXPLAIN'],					'L_TITLE'				=> ($mode == 'unapproved_posts') ? $user->lang['MCP_QUEUE_UNAPPROVED_POSTS'] : $user->lang['MCP_QUEUE_UNAPPROVED_TOPICS'],					'L_ONLY_TOPIC'			=> ($topic_id) ? sprintf($user->lang['ONLY_TOPIC'], $topic_info['topic_title']) : '',					'S_FORUM_OPTIONS'		=> $forum_options,					'S_MCP_ACTION'			=> build_url(array('t', 'f', 'sd', 'st', 'sk')),					'S_TOPICS'				=> ($mode == 'unapproved_posts') ? false : true,					'PAGINATION'			=> generate_pagination($this->u_action . "&amp;f=$forum_id&amp;st=$sort_days&amp;sk=$sort_key&amp;sd=$sort_dir", $total, $config['topics_per_page'], $start),					'PAGE_NUMBER'			=> on_page($total, $config['topics_per_page'], $start),					'TOPIC_ID'				=> $topic_id,					'TOTAL'					=> ($total == 1) ? (($mode == 'unapproved_posts') ? $user->lang['VIEW_TOPIC_POST'] : $user->lang['VIEW_FORUM_TOPIC']) : sprintf((($mode == 'unapproved_posts') ? $user->lang['VIEW_TOPIC_POSTS'] : $user->lang['VIEW_FORUM_TOPICS']), $total),				));				$this->tpl_name = 'mcp_queue';			break;		}	}}/*** Approve Post/Topic*/function approve_post($post_id_list, $id, $mode){	global $db, $template, $user, $config;	global $phpEx, $phpbb_root_path;	if (!check_ids($post_id_list, POSTS_TABLE, 'post_id', array('m_approve')))	{		trigger_error('NOT_AUTHORISED');	}	$redirect = request_var('redirect', build_url(array('quickmod')));	$success_msg = '';	$s_hidden_fields = build_hidden_fields(array(		'i'				=> $id,		'mode'			=> $mode,		'post_id_list'	=> $post_id_list,		'action'		=> 'approve',		'redirect'		=> $redirect)	);	$post_info = get_post_data($post_id_list, 'm_approve');	if (confirm_box(true))	{		$notify_poster = (isset($_REQUEST['notify_poster'])) ? true : false;		// If Topic -> total_topics = total_topics+1, total_posts = total_posts+1, forum_topics = forum_topics+1, forum_posts = forum_posts+1		// If Post -> total_posts = total_posts+1, forum_posts = forum_posts+1, topic_replies = topic_replies+1		$total_topics = $total_posts = 0;		$topic_approve_sql = $post_approve_sql = $topic_id_list = $forum_id_list = $approve_log = array();		$user_posts_sql = $post_approved_list = array();		foreach ($post_info as $post_id => $post_data)		{			if ($post_data['post_approved'])			{				$post_approved_list[] = $post_id;				continue;			}			$topic_id_list[$post_data['topic_id']] = 1;			if ($post_data['forum_id'])			{				$forum_id_list[$post_data['forum_id']] = 1;			}			// User post update (we do not care about topic or post, since user posts are strictly connected to posts)			// But we care about forums where post counts get not increased. ;)			if ($post_data['post_postcount'])			{				$user_posts_sql[$post_data['poster_id']] = (empty($user_posts_sql[$post_data['poster_id']])) ? 1 : $user_posts_sql[$post_data['poster_id']] + 1;			}			// Topic or Post. ;)			if ($post_data['topic_first_post_id'] == $post_id)			{				if ($post_data['forum_id'])				{					$total_topics++;				}				$topic_approve_sql[] = $post_data['topic_id'];				$approve_log[] = array(					'type'			=> 'topic',					'post_subject'	=> $post_data['post_subject'],					'forum_id'		=> $post_data['forum_id'],					'topic_id'		=> $post_data['topic_id'],				);			}			else			{				$approve_log[] = array(					'type'			=> 'post',					'post_subject'	=> $post_data['post_subject'],					'forum_id'		=> $post_data['forum_id'],					'topic_id'		=> $post_data['topic_id'],				);			}			if ($post_data['forum_id'])			{				$total_posts++;				// Increment by topic_replies if we approve a topic...				// This works because we do not adjust the topic_replies when re-approving a topic after an edit.				if ($post_data['topic_first_post_id'] == $post_id && $post_data['topic_replies'])				{					$total_posts += $post_data['topic_replies'];				}			}			$post_approve_sql[] = $post_id;		}		$post_id_list = array_values(array_diff($post_id_list, $post_approved_list));		for ($i = 0, $size = sizeof($post_approved_list); $i < $size; $i++)		{			unset($post_info[$post_approved_list[$i]]);		}		if (sizeof($topic_approve_sql))		{			$sql = 'UPDATE ' . TOPICS_TABLE . '				SET topic_approved = 1				WHERE ' . $db->sql_in_set('topic_id', $topic_approve_sql);			$db->sql_query($sql);		}		if (sizeof($post_approve_sql))		{			$sql = 'UPDATE ' . POSTS_TABLE . '				SET post_approved = 1				WHERE ' . $db->sql_in_set('post_id', $post_approve_sql);			$db->sql_query($sql);		}		unset($topic_approve_sql, $post_approve_sql);		foreach ($approve_log as $log_data)		{			add_log('mod', $log_data['forum_id'], $log_data['topic_id'], ($log_data['type'] == 'topic') ? 'LOG_TOPIC_APPROVED' : 'LOG_POST_APPROVED', $log_data['post_subject']);		}		if (sizeof($user_posts_sql))		{			// Try to minimize the query count by merging users with the same post count additions			$user_posts_update = array();			foreach ($user_posts_sql as $user_id => $user_posts)			{				$user_posts_update[$user_posts][] = $user_id;			}			foreach ($user_posts_update as $user_posts => $user_id_ary)			{				$sql = 'UPDATE ' . USERS_TABLE . '					SET user_posts = user_posts + ' . $user_posts . '					WHERE ' . $db->sql_in_set('user_id', $user_id_ary);				$db->sql_query($sql);			}		}		if ($total_topics)		{			set_config_count('num_topics', $total_topics, true);		}		if ($total_posts)		{			set_config_count('num_posts', $total_posts, true);		}		sync('topic', 'topic_id', array_keys($topic_id_list), true);		sync('forum', 'forum_id', array_keys($forum_id_list), true, true);		unset($topic_id_list, $forum_id_list);		$messenger = new messenger();		// Notify Poster?		if ($notify_poster)		{			foreach ($post_info as $post_id => $post_data)			{				if ($post_data['poster_id'] == ANONYMOUS)				{					continue;				}				$email_template = ($post_data['post_id'] == $post_data['topic_first_post_id'] && $post_data['post_id'] == $post_data['topic_last_post_id']) ? 'topic_approved' : 'post_approved';				$messenger->template($email_template, $post_data['user_lang']);				$messenger->to($post_data['user_email'], $post_data['username']);				$messenger->im($post_data['user_jabber'], $post_data['username']);				$messenger->assign_vars(array(					'USERNAME'		=> htmlspecialchars_decode($post_data['username']),					'POST_SUBJECT'	=> htmlspecialchars_decode(censor_text($post_data['post_subject'])),					'TOPIC_TITLE'	=> htmlspecialchars_decode(censor_text($post_data['topic_title'])),					'U_VIEW_TOPIC'	=> generate_board_url() . "/viewtopic.$phpEx?f={$post_data['forum_id']}&t={$post_data['topic_id']}&e=0",					'U_VIEW_POST'	=> generate_board_url() . "/viewtopic.$phpEx?f={$post_data['forum_id']}&t={$post_data['topic_id']}&p=$post_id&e=$post_id")				);				$messenger->send($post_data['user_notify_type']);			}		}		$messenger->save_queue();		// Send out normal user notifications		$email_sig = str_replace('<br />', "\n", "-- \n" . $config['board_email_sig']);		foreach ($post_info as $post_id => $post_data)		{			if ($post_id == $post_data['topic_first_post_id'] && $post_id == $post_data['topic_last_post_id'])			{				// Forum Notifications				user_notification('post', $post_data['topic_title'], $post_data['topic_title'], $post_data['forum_name'], $post_data['forum_id'], $post_data['topic_id'], $post_id);			}			else			{				// Topic Notifications				user_notification('reply', $post_data['post_subject'], $post_data['topic_title'], $post_data['forum_name'], $post_data['forum_id'], $post_data['topic_id'], $post_id);			}		}		if (sizeof($post_id_list) == 1)		{			$post_data = $post_info[$post_id_list[0]];			$post_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f={$post_data['forum_id']}&amp;t={$post_data['topic_id']}&amp;p={$post_data['post_id']}") . '#p' . $post_data['post_id'];		}		unset($post_info);		if ($total_topics)		{			$success_msg = ($total_topics == 1) ? 'TOPIC_APPROVED_SUCCESS' : 'TOPICS_APPROVED_SUCCESS';		}		else		{			$success_msg = (sizeof($post_id_list) + sizeof($post_approved_list) == 1) ? 'POST_APPROVED_SUCCESS' : 'POSTS_APPROVED_SUCCESS';		}	}	else	{		$show_notify = false;		if ($config['email_enable'] || $config['jab_enable'])		{			foreach ($post_info as $post_data)			{				if ($post_data['poster_id'] == ANONYMOUS)				{					continue;				}				else				{					$show_notify = true;					break;				}			}		}		$template->assign_vars(array(			'S_NOTIFY_POSTER'	=> $show_notify,			'S_APPROVE'			=> true)		);		confirm_box(false, 'APPROVE_POST' . ((sizeof($post_id_list) == 1) ? '' : 'S'), $s_hidden_fields, 'mcp_approve.html');	}	$redirect = request_var('redirect', "index.$phpEx");	$redirect = reapply_sid($redirect);	if (!$success_msg)	{		redirect($redirect);	}	else	{		meta_refresh(3, $redirect);		// If approving one post, also give links back to post...		$add_message = '';		if (sizeof($post_id_list) == 1 && !empty($post_url))		{			$add_message = '<br /><br />' . sprintf($user->lang['RETURN_POST'], '<a href="' . $post_url . '">', '</a>');		}		trigger_error($user->lang[$success_msg] . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], "<a href=\"$redirect\">", '</a>') . $add_message);	}}/*** Disapprove Post/Topic*/function disapprove_post($post_id_list, $id, $mode){	global $db, $template, $user, $config;	global $phpEx, $phpbb_root_path;	if (!check_ids($post_id_list, POSTS_TABLE, 'post_id', array('m_approve')))	{		trigger_error('NOT_AUTHORISED');	}	$redirect = request_var('redirect', build_url(array('t', 'mode', 'quickmod')) . "&amp;mode=$mode");	$reason = utf8_normalize_nfc(request_var('reason', '', true));	$reason_id = request_var('reason_id', 0);	$success_msg = $additional_msg = '';	$s_hidden_fields = build_hidden_fields(array(		'i'				=> $id,		'mode'			=> $mode,		'post_id_list'	=> $post_id_list,		'action'		=> 'disapprove',		'redirect'		=> $redirect)	);	$notify_poster = (isset($_REQUEST['notify_poster'])) ? true : false;	$disapprove_reason = '';	if ($reason_id)	{		$sql = 'SELECT reason_title, reason_description			FROM ' . REPORTS_REASONS_TABLE . "			WHERE reason_id = $reason_id";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$row || (!$reason && strtolower($row['reason_title']) == 'other'))		{			$additional_msg = $user->lang['NO_REASON_DISAPPROVAL'];			unset($_REQUEST['confirm_key']);			unset($_POST['confirm_key']);			unset($_POST['confirm']);		}		else		{			// If the reason is defined within the language file, we will use the localized version, else just use the database entry...			$disapprove_reason = (strtolower($row['reason_title']) != 'other') ? ((isset($user->lang['report_reasons']['DESCRIPTION'][strtoupper($row['reason_title'])])) ? $user->lang['report_reasons']['DESCRIPTION'][strtoupper($row['reason_title'])] : $row['reason_description']) : '';			$disapprove_reason .= ($reason) ? "\n\n" . $reason : '';			if (isset($user->lang['report_reasons']['DESCRIPTION'][strtoupper($row['reason_title'])]))			{				$disapprove_reason_lang = strtoupper($row['reason_title']);			}			$email_disapprove_reason = $disapprove_reason;		}	}	$post_info = get_post_data($post_id_list, 'm_approve');	if (confirm_box(true))	{		$disapprove_log = $disapprove_log_topics = $disapprove_log_posts = array();		$topic_replies_real = $post_disapprove_list = array();		// Build a list of posts to be unapproved and get the related topics real replies count		foreach ($post_info as $post_id => $post_data)		{			$post_disapprove_list[$post_id] = $post_data['topic_id'];			if (!isset($topic_replies_real[$post_data['topic_id']]))			{				$topic_replies_real[$post_data['topic_id']] = $post_data['topic_replies_real'];			}		}		// Now we build the log array		foreach ($post_disapprove_list as $post_id => $topic_id)		{			// If the count of disapproved posts for the topic is greater			// than topic's real replies count, the whole topic is disapproved/deleted			if (sizeof(array_keys($post_disapprove_list, $topic_id)) > $topic_replies_real[$topic_id])			{				// Don't write the log more than once for every topic				if (!isset($disapprove_log_topics[$topic_id]))				{					// Build disapproved topics log					$disapprove_log_topics[$topic_id] = array(						'type'			=> 'topic',						'post_subject'	=> $post_info[$post_id]['topic_title'],						'forum_id'		=> $post_info[$post_id]['forum_id'],						'topic_id'		=> 0, // useless to log a topic id, as it will be deleted					);				}			}			else			{				// Build disapproved posts log				$disapprove_log_posts[] = array(					'type'			=> 'post',					'post_subject'	=> $post_info[$post_id]['post_subject'],					'forum_id'		=> $post_info[$post_id]['forum_id'],					'topic_id'		=> $post_info[$post_id]['topic_id'],				);			}		}		// Get disapproved posts/topics counts separately		$num_disapproved_topics = sizeof($disapprove_log_topics);		$num_disapproved_posts = sizeof($disapprove_log_posts);		// Build the whole log		$disapprove_log = array_merge($disapprove_log_topics, $disapprove_log_posts);		// Unset unneeded arrays		unset($post_data, $disapprove_log_topics, $disapprove_log_posts);		// Let's do the job - delete disapproved posts		if (sizeof($post_disapprove_list))		{			if (!function_exists('delete_posts'))			{				include_once($phpbb_root_path . 'includes/functions_admin.' . $phpEx);			}			// We do not check for permissions here, because the moderator allowed approval/disapproval should be allowed to delete the disapproved posts			// Note: function delete_posts triggers related forums/topics sync,			// so we don't need to call update_post_information later and to adjust real topic replies or forum topics count manually			delete_posts('post_id', array_keys($post_disapprove_list));			foreach ($disapprove_log as $log_data)			{				add_log('mod', $log_data['forum_id'], $log_data['topic_id'], ($log_data['type'] == 'topic') ? 'LOG_TOPIC_DISAPPROVED' : 'LOG_POST_DISAPPROVED', $log_data['post_subject'], $disapprove_reason);			}		}		$messenger = new messenger();		// Notify Poster?		if ($notify_poster)		{			$lang_reasons = array();			foreach ($post_info as $post_id => $post_data)			{				if ($post_data['poster_id'] == ANONYMOUS)				{					continue;				}				if (isset($disapprove_reason_lang))				{					// Okay we need to get the reason from the posters language					if (!isset($lang_reasons[$post_data['user_lang']]))					{						// Assign the current users translation as the default, this is not ideal but getting the board default adds another layer of complexity.						$lang_reasons[$post_data['user_lang']] = $user->lang['report_reasons']['DESCRIPTION'][$disapprove_reason_lang];						// Only load up the language pack if the language is different to the current one						if ($post_data['user_lang'] != $user->lang_name && file_exists($phpbb_root_path . '/language/' . $post_data['user_lang'] . '/mcp.' . $phpEx))						{							// Load up the language pack							$lang = array();							@include($phpbb_root_path . '/language/' . basename($post_data['user_lang']) . '/mcp.' . $phpEx);							// If we find the reason in this language pack use it							if (isset($lang['report_reasons']['DESCRIPTION'][$disapprove_reason_lang]))							{								$lang_reasons[$post_data['user_lang']] = $lang['report_reasons']['DESCRIPTION'][$disapprove_reason_lang];							}							unset($lang); // Free memory						}					}					$email_disapprove_reason = $lang_reasons[$post_data['user_lang']];					$email_disapprove_reason .= ($reason) ? "\n\n" . $reason : '';				}				$email_template = ($post_data['post_id'] == $post_data['topic_first_post_id'] && $post_data['post_id'] == $post_data['topic_last_post_id']) ? 'topic_disapproved' : 'post_disapproved';				$messenger->template($email_template, $post_data['user_lang']);				$messenger->to($post_data['user_email'], $post_data['username']);				$messenger->im($post_data['user_jabber'], $post_data['username']);				$messenger->assign_vars(array(					'USERNAME'		=> htmlspecialchars_decode($post_data['username']),					'REASON'		=> htmlspecialchars_decode($email_disapprove_reason),					'POST_SUBJECT'	=> htmlspecialchars_decode(censor_text($post_data['post_subject'])),					'TOPIC_TITLE'	=> htmlspecialchars_decode(censor_text($post_data['topic_title'])))				);				$messenger->send($post_data['user_notify_type']);			}			unset($lang_reasons);		}		unset($post_info, $disapprove_reason, $email_disapprove_reason, $disapprove_reason_lang);		$messenger->save_queue();		if ($num_disapproved_topics)		{			$success_msg = ($num_disapproved_topics == 1) ? 'TOPIC_DISAPPROVED_SUCCESS' : 'TOPICS_DISAPPROVED_SUCCESS';		}		else		{			$success_msg = ($num_disapproved_posts == 1) ? 'POST_DISAPPROVED_SUCCESS' : 'POSTS_DISAPPROVED_SUCCESS';		}	}	else	{		include_once($phpbb_root_path . 'includes/functions_display.' . $phpEx);		display_reasons($reason_id);		$show_notify = false;		foreach ($post_info as $post_data)		{			if ($post_data['poster_id'] == ANONYMOUS)			{				continue;			}			else			{				$show_notify = true;				break;			}		}		$template->assign_vars(array(			'S_NOTIFY_POSTER'	=> $show_notify,			'S_APPROVE'			=> false,			'REASON'			=> $reason,			'ADDITIONAL_MSG'	=> $additional_msg)		);		confirm_box(false, 'DISAPPROVE_POST' . ((sizeof($post_id_list) == 1) ? '' : 'S'), $s_hidden_fields, 'mcp_approve.html');	}	$redirect = request_var('redirect', "index.$phpEx");	$redirect = reapply_sid($redirect);	if (!$success_msg)	{		redirect($redirect);	}	else	{		meta_refresh(3, $redirect);		trigger_error($user->lang[$success_msg] . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], "<a href=\"$redirect\">", '</a>'));	}}?>
<?php/**** acp_search [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ACP_SEARCH_INDEX_EXPLAIN'				=> 'Here you can manage the search backends indexes. Since you normally use only one backend you should delete all indexes that you do not make use of. After altering some of the search settings (e.g. the number of minimum/maximum chars) it might be worth recreating the index so it reflects those changes.',	'ACP_SEARCH_SETTINGS_EXPLAIN'			=> 'Here you can define what search backend will be used for indexing posts and performing searches. You can set various options that can influence how much processing these actions require. Some of these settings are the same for all search engine backends.',	'COMMON_WORD_THRESHOLD'					=> 'Common word threshold',	'COMMON_WORD_THRESHOLD_EXPLAIN'			=> 'Words which are contained in a greater percentage of all posts will be regarded as common. Common words are ignored in search queries. Set to zero to disable. Only takes effect if there are more than 100 posts. If you want words that are currently regarded as common to be reconsidered you have to recreate the index.',	'CONFIRM_SEARCH_BACKEND'				=> 'Are you sure you wish to switch to a different search backend? After changing the search backend you will have to create an index for the new search backend. If you dont plan on switching back to the old search backend you can also delete the old backends index in order to free system resources.',	'CONTINUE_DELETING_INDEX'				=> 'Continue previous index removal process',	'CONTINUE_DELETING_INDEX_EXPLAIN'		=> 'An index removal process has been started. In order to access the search index page you will have to complete it or cancel it.',	'CONTINUE_INDEXING'						=> 'Continue previous indexing process',	'CONTINUE_INDEXING_EXPLAIN'				=> 'An indexing process has been started. In order to access the search index page you will have to complete it or cancel it.',	'CREATE_INDEX'							=> 'Create index',	'DELETE_INDEX'							=> 'Delete index',	'DELETING_INDEX_IN_PROGRESS'			=> 'Deleting the index in progress',	'DELETING_INDEX_IN_PROGRESS_EXPLAIN'	=> 'The search backend is currently cleaning its index. This can take a few minutes.',	'FULLTEXT_MYSQL_INCOMPATIBLE_VERSION'	=> 'The MySQL fulltext backend can only be used with MySQL4 and above.',	'FULLTEXT_MYSQL_NOT_MYISAM'				=> 'MySQL fulltext indexes can only be used with MyISAM tables.',	'FULLTEXT_MYSQL_TOTAL_POSTS'			=> 'Total number of indexed posts',	'FULLTEXT_MYSQL_MBSTRING'				=> 'Support for non-latin UTF-8 characters using mbstring:',	'FULLTEXT_MYSQL_PCRE'					=> 'Support for non-latin UTF-8 characters using PCRE:',	'FULLTEXT_MYSQL_MBSTRING_EXPLAIN'		=> 'If PCRE does not have unicode character properties, the search backend will try to use mbstrings regular expression engine.',	'FULLTEXT_MYSQL_PCRE_EXPLAIN'			=> 'This search backend requires PCRE unicode character properties, only available in PHP 4.4, 5.1 and above, if you want to search for non-latin characters.',	'FULLTEXT_MYSQL_MIN_SEARCH_CHARS_EXPLAIN'	=> 'Words with at least this many characters will be indexed for searching. You or your host can only change this setting by changing the mysql configuration.',	'FULLTEXT_MYSQL_MAX_SEARCH_CHARS_EXPLAIN'	=> 'Words with no more than this many characters will be indexed for searching. You or your host can only change this setting by changing the mysql configuration.',	'GENERAL_SEARCH_SETTINGS'				=> 'General search settings',	'GO_TO_SEARCH_INDEX'					=> 'Go to search index page',	'INDEX_STATS'							=> 'Index statistics',	'INDEXING_IN_PROGRESS'					=> 'Indexing in progress',	'INDEXING_IN_PROGRESS_EXPLAIN'			=> 'The search backend is currently indexing all posts on the board. This can take from a few minutes to a few hours depending on your boards size.',	'LIMIT_SEARCH_LOAD'						=> 'Search page system load limit',	'LIMIT_SEARCH_LOAD_EXPLAIN'				=> 'If the 1 minute system load exceeds this value the search page will go offline, 1.0 equals ~100% utilisation of one processor. This only functions on UNIX based servers.',	'MAX_SEARCH_CHARS'						=> 'Max characters indexed by search',	'MAX_SEARCH_CHARS_EXPLAIN'				=> 'Words with no more than this many characters will be indexed for searching.',	'MAX_NUM_SEARCH_KEYWORDS'				=> 'Maximum number of allowed keywords',	'MAX_NUM_SEARCH_KEYWORDS_EXPLAIN'		=> 'Maximum number of words the user is able to search for. A value of 0 allows an unlimited number of words.',	'MIN_SEARCH_CHARS'						=> 'Min characters indexed by search',	'MIN_SEARCH_CHARS_EXPLAIN'				=> 'Words with at least this many characters will be indexed for searching.',	'MIN_SEARCH_AUTHOR_CHARS'				=> 'Min author name characters',	'MIN_SEARCH_AUTHOR_CHARS_EXPLAIN'		=> 'Users have to enter at least this many characters of the name when performing a wildcard author search. If the authors username is shorter than this number you can still search for the authors posts by entering the complete username.',	'PROGRESS_BAR'							=> 'Progress bar',	'SEARCH_GUEST_INTERVAL'					=> 'Guest search flood interval',	'SEARCH_GUEST_INTERVAL_EXPLAIN'			=> 'Number of seconds guests must wait between searches. If one guest searches all others have to wait until the time interval passed.',	'SEARCH_INDEX_CREATE_REDIRECT'			=> 'All posts up to post id %1$d have now been indexed, of which %2$d posts were within this step.<br />The current rate of indexing is approximately %3$.1f posts per second.<br />Indexing in progress',	'SEARCH_INDEX_DELETE_REDIRECT'			=> 'All posts up to post id %1$d have been removed from the search index.<br />Deleting in progress',	'SEARCH_INDEX_CREATED'					=> 'Successfully indexed all posts in the board database.',	'SEARCH_INDEX_REMOVED'					=> 'Successfully deleted the search index for this backend.',	'SEARCH_INTERVAL'						=> 'User search flood interval',	'SEARCH_INTERVAL_EXPLAIN'				=> 'Number of seconds users must wait between searches. This interval is checked independently for each user.',	'SEARCH_STORE_RESULTS'					=> 'Search result cache length',	'SEARCH_STORE_RESULTS_EXPLAIN'			=> 'Cached search results will expire after this time, in seconds. Set to 0 if you want to disable search cache.',	'SEARCH_TYPE'							=> 'Search backend',	'SEARCH_TYPE_EXPLAIN'					=> 'phpBB allows you to choose the backend that is used for searching text in post contents. By default the search will use phpBBs own fulltext search.',	'SWITCHED_SEARCH_BACKEND'				=> 'You switched the search backend. In order to use the new search backend you should make sure that there is an index for the backend you chose.',	'TOTAL_WORDS'							=> 'Total number of indexed words',	'TOTAL_MATCHES'							=> 'Total number of word to post relations indexed',	'YES_SEARCH'							=> 'Enable search facilities',	'YES_SEARCH_EXPLAIN'					=> 'Enables user facing search functionality including member search.',	'YES_SEARCH_UPDATE'						=> 'Enable fulltext updating',	'YES_SEARCH_UPDATE_EXPLAIN'				=> 'Updating of fulltext indexes when posting, overridden if search is disabled.',));?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class mcp_logs_info{	function module()	{		return array(			'filename'	=> 'mcp_logs',			'title'		=> 'MCP_LOGS',			'version'	=> '1.0.0',			'modes'		=> array(				'front'			=> array('title' => 'MCP_LOGS_FRONT', 'auth' => 'acl_m_ || aclf_m_', 'cat' => array('MCP_LOGS')),				'forum_logs'	=> array('title' => 'MCP_LOGS_FORUM_VIEW', 'auth' => 'acl_m_,$id', 'cat' => array('MCP_LOGS')),				'topic_logs'	=> array('title' => 'MCP_LOGS_TOPIC_VIEW', 'auth' => 'acl_m_,$id', 'cat' => array('MCP_LOGS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/*** Corrects user_email_hash values if DB moved from 32-bit system to 64-bit system or vice versa.* The CRC32 function in PHP generates different results for both systems.* @PHP dev team: no, a hexdec() applied to it does not solve the issue. And please document it.**/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$start = request_var('start', 0);$num_items = 1000;echo '<br />Updating user email hashes' . "\n";$sql = 'SELECT user_id, user_email	FROM ' . USERS_TABLE . '	ORDER BY user_id ASC';$result = $db->sql_query($sql);$echos = 0;while ($row = $db->sql_fetchrow($result)){	$echos++;	$sql = 'UPDATE ' . USERS_TABLE . "		SET user_email_hash = '" . $db->sql_escape(phpbb_email_hash($row['user_email'])) . "'		WHERE user_id = " . (int) $row['user_id'];	$db->sql_query($sql);	if ($echos == 200)	{		echo '<br />';		$echos = 0;	}	echo '.';	flush();}$db->sql_freeresult($result);echo 'FINISHED';// Done$db->sql_close();?>
<?php/**** @package dbal* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}include_once($phpbb_root_path . 'includes/db/dbal.' . $phpEx);if (!class_exists('phpbb_error_collector')){	include($phpbb_root_path . 'includes/error_collector.' . $phpEx);}/*** PostgreSQL Database Abstraction Layer* Minimum Requirement is Version 7.3+* @package dbal*/class dbal_postgres extends dbal{	var $last_query_text = '';	var $connect_error = '';	/**	* Connect to server	*/	function sql_connect($sqlserver, $sqluser, $sqlpassword, $database, $port = false, $persistency = false, $new_link = false)	{		$connect_string = '';		if ($sqluser)		{			$connect_string .= "user=$sqluser ";		}		if ($sqlpassword)		{			$connect_string .= "password=$sqlpassword ";		}		if ($sqlserver)		{			// $sqlserver can carry a port separated by : for compatibility reasons			// If $sqlserver has more than one : it's probably an IPv6 address.			// In this case we only allow passing a port via the $port variable.			if (substr_count($sqlserver, ':') === 1)			{				list($sqlserver, $port) = explode(':', $sqlserver);			}			if ($sqlserver !== 'localhost')			{				$connect_string .= "host=$sqlserver ";			}			if ($port)			{				$connect_string .= "port=$port ";			}		}		$schema = '';		if ($database)		{			$this->dbname = $database;			if (strpos($database, '.') !== false)			{				list($database, $schema) = explode('.', $database);			}			$connect_string .= "dbname=$database";		}		$this->persistency = $persistency;		if ($this->persistency)		{			if (!function_exists('pg_pconnect'))			{				$this->connect_error = 'pg_pconnect function does not exist, is pgsql extension installed?';				return $this->sql_error('');			}			$collector = new phpbb_error_collector;			$collector->install();			$this->db_connect_id = (!$new_link) ? @pg_pconnect($connect_string) : @pg_pconnect($connect_string, PGSQL_CONNECT_FORCE_NEW);		}		else		{			if (!function_exists('pg_connect'))			{				$this->connect_error = 'pg_connect function does not exist, is pgsql extension installed?';				return $this->sql_error('');			}			$collector = new phpbb_error_collector;			$collector->install();			$this->db_connect_id = (!$new_link) ? @pg_connect($connect_string) : @pg_connect($connect_string, PGSQL_CONNECT_FORCE_NEW);		}		$collector->uninstall();		if ($this->db_connect_id)		{			if (version_compare($this->sql_server_info(true), '8.2', '>='))			{				$this->multi_insert = true;			}			if ($schema !== '')			{				@pg_query($this->db_connect_id, 'SET search_path TO ' . $schema);			}			return $this->db_connect_id;		}		$this->connect_error = $collector->format_errors();		return $this->sql_error('');	}	/**	* Version information about used database	* @param bool $raw if true, only return the fetched sql_server_version	* @param bool $use_cache If true, it is safe to retrieve the value from the cache	* @return string sql server version	*/	function sql_server_info($raw = false, $use_cache = true)	{		global $cache;		if (!$use_cache || empty($cache) || ($this->sql_server_version = $cache->get('pgsql_version')) === false)		{			$query_id = @pg_query($this->db_connect_id, 'SELECT VERSION() AS version');			$row = @pg_fetch_assoc($query_id, null);			@pg_free_result($query_id);			$this->sql_server_version = (!empty($row['version'])) ? trim(substr($row['version'], 10)) : 0;			if (!empty($cache) && $use_cache)			{				$cache->put('pgsql_version', $this->sql_server_version);			}		}		return ($raw) ? $this->sql_server_version : 'PostgreSQL ' . $this->sql_server_version;	}	/**	* SQL Transaction	* @access private	*/	function _sql_transaction($status = 'begin')	{		switch ($status)		{			case 'begin':				return @pg_query($this->db_connect_id, 'BEGIN');			break;			case 'commit':				return @pg_query($this->db_connect_id, 'COMMIT');			break;			case 'rollback':				return @pg_query($this->db_connect_id, 'ROLLBACK');			break;		}		return true;	}	/**	* Base query method	*	* @param	string	$query		Contains the SQL query which shall be executed	* @param	int		$cache_ttl	Either 0 to avoid caching or the time in seconds which the result shall be kept in cache	* @return	mixed				When casted to bool the returned value returns true on success and false on failure	*	* @access	public	*/	function sql_query($query = '', $cache_ttl = 0)	{		if ($query != '')		{			global $cache;			// EXPLAIN only in extra debug mode			if (defined('DEBUG_EXTRA'))			{				$this->sql_report('start', $query);			}			$this->last_query_text = $query;			$this->query_result = ($cache_ttl && method_exists($cache, 'sql_load')) ? $cache->sql_load($query) : false;			$this->sql_add_num_queries($this->query_result);			if ($this->query_result === false)			{				if (($this->query_result = @pg_query($this->db_connect_id, $query)) === false)				{					$this->sql_error($query);				}				if (defined('DEBUG_EXTRA'))				{					$this->sql_report('stop', $query);				}				if ($cache_ttl && method_exists($cache, 'sql_save'))				{					$this->open_queries[(int) $this->query_result] = $this->query_result;					$cache->sql_save($query, $this->query_result, $cache_ttl);				}				else if (strpos($query, 'SELECT') === 0 && $this->query_result)				{					$this->open_queries[(int) $this->query_result] = $this->query_result;				}			}			else if (defined('DEBUG_EXTRA'))			{				$this->sql_report('fromcache', $query);			}		}		else		{			return false;		}		return $this->query_result;	}	/**	* Build db-specific query data	* @access private	*/	function _sql_custom_build($stage, $data)	{		return $data;	}	/**	* Build LIMIT query	*/	function _sql_query_limit($query, $total, $offset = 0, $cache_ttl = 0)	{		$this->query_result = false;		// if $total is set to 0 we do not want to limit the number of rows		if ($total == 0)		{			$total = 'ALL';		}		$query .= "\n LIMIT $total OFFSET $offset";		return $this->sql_query($query, $cache_ttl);	}	/**	* Return number of affected rows	*/	function sql_affectedrows()	{		return ($this->query_result) ? @pg_affected_rows($this->query_result) : false;	}	/**	* Fetch current row	*/	function sql_fetchrow($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_fetchrow($query_id);		}		return ($query_id !== false) ? @pg_fetch_assoc($query_id, null) : false;	}	/**	* Seek to given row number	* rownum is zero-based	*/	function sql_rowseek($rownum, &$query_id)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_rowseek($rownum, $query_id);		}		return ($query_id !== false) ? @pg_result_seek($query_id, $rownum) : false;	}	/**	* Get last inserted id after insert statement	*/	function sql_nextid()	{		$query_id = $this->query_result;		if ($query_id !== false && $this->last_query_text != '')		{			if (preg_match("/^INSERT[\t\n ]+INTO[\t\n ]+([a-z0-9\_\-]+)/is", $this->last_query_text, $tablename))			{				$query = "SELECT currval('" . $tablename[1] . "_seq') AS last_value";				$temp_q_id = @pg_query($this->db_connect_id, $query);				if (!$temp_q_id)				{					return false;				}				$temp_result = @pg_fetch_assoc($temp_q_id, NULL);				@pg_free_result($query_id);				return ($temp_result) ? $temp_result['last_value'] : false;			}		}		return false;	}	/**	* Free sql result	*/	function sql_freeresult($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_freeresult($query_id);		}		if (isset($this->open_queries[(int) $query_id]))		{			unset($this->open_queries[(int) $query_id]);			return @pg_free_result($query_id);		}		return false;	}	/**	* Escape string used in sql query	* Note: Do not use for bytea values if we may use them at a later stage	*/	function sql_escape($msg)	{		return @pg_escape_string($msg);	}	/**	* Build LIKE expression	* @access private	*/	function _sql_like_expression($expression)	{		return $expression;	}	/**	* return sql error array	* @access private	*/	function _sql_error()	{		// pg_last_error only works when there is an established connection.		// Connection errors have to be tracked by us manually.		if ($this->db_connect_id)		{			$message = @pg_last_error($this->db_connect_id);		}		else		{			$message = $this->connect_error;		}		return array(			'message'	=> $message,			'code'		=> ''		);	}	/**	* Close sql connection	* @access private	*/	function _sql_close()	{		return @pg_close($this->db_connect_id);	}	/**	* Build db-specific report	* @access private	*/	function _sql_report($mode, $query = '')	{		switch ($mode)		{			case 'start':				$explain_query = $query;				if (preg_match('/UPDATE ([a-z0-9_]+).*?WHERE(.*)/s', $query, $m))				{					$explain_query = 'SELECT * FROM ' . $m[1] . ' WHERE ' . $m[2];				}				else if (preg_match('/DELETE FROM ([a-z0-9_]+).*?WHERE(.*)/s', $query, $m))				{					$explain_query = 'SELECT * FROM ' . $m[1] . ' WHERE ' . $m[2];				}				if (preg_match('/^SELECT/', $explain_query))				{					$html_table = false;					if ($result = @pg_query($this->db_connect_id, "EXPLAIN $explain_query"))					{						while ($row = @pg_fetch_assoc($result, NULL))						{							$html_table = $this->sql_report('add_select_row', $query, $html_table, $row);						}					}					@pg_free_result($result);					if ($html_table)					{						$this->html_hold .= '</table>';					}				}			break;			case 'fromcache':				$endtime = explode(' ', microtime());				$endtime = $endtime[0] + $endtime[1];				$result = @pg_query($this->db_connect_id, $query);				while ($void = @pg_fetch_assoc($result, NULL))				{					// Take the time spent on parsing rows into account				}				@pg_free_result($result);				$splittime = explode(' ', microtime());				$splittime = $splittime[0] + $splittime[1];				$this->sql_report('record_fromcache', $query, $endtime, $splittime);			break;		}	}}?>
<?php//// This file provides some useful functions for debugging the unicode/UTF-8 library// It requires utf_tools.php to be loaded//die("Please read the first lines of this script for instructions on how to enable it");if (!headers_sent()){	header('Content-type: text/html; charset=UTF-8');}/** * Converts unicode escape sequences (\u0123) into UTF-8 characters * * @param	string	A unicode sequence * @return	string	UTF-8 representation of the given unicode sequence */function unicode_to_utf8($string){	$utf8 = '';	$chars = array();	for ($i = 0; $i < strlen($string); $i++)	{		if (isset($string[$i + 5]) && substr($string, $i, 2) == '\\u' && ctype_xdigit(substr($string, $i + 2, 4)))		{			$utf8 .= utf8_from_unicode(array(base_convert(substr($string, $i + 2, 4), 16, 10)));			$i += 5;		}		else		{			$utf8 .= $string[$i];		}	}	return $utf8;}/** * Takes an array of ints representing the Unicode characters and returns * a UTF-8 string. * * @param array $array array of unicode code points representing a string * @return string UTF-8 character string */function utf8_from_unicode($array){	$str = '';	foreach ($array as $value)	{		$str .= utf8_chr($value);	}	return $str;}/*** Converts a UTF-8 string to unicode code points** @param	string	$text		UTF-8 string* @return	string				Unicode code points*/function utf8_to_unicode($text){	return preg_replace_callback(		'#[\\xC2-\\xF4][\\x80-\\xBF]?[\\x80-\\xBF]?[\\x80-\\xBF]#',		'utf8_to_unicode_callback',		preg_replace_callback(			'#[\\x00-\\x7f]#',			'utf8_to_unicode_callback',			$text		)	);}/*** Takes a UTF-8 char and replaces it with its unicode escape sequence. Attention, $m is an array** @param	array	$m			0-based numerically indexed array passed by preg_replace_callback()* @return	string				A unicode escape sequence*/function utf8_to_unicode_callback($m){	return '\u' . str_pad(base_convert(utf8_ord($m[0]), 10, 16), 4, '0', STR_PAD_LEFT) . '';}/*** A wrapper function for the normalizer which takes care of including the class if required and modifies the passed strings* to be in NFKC** @param	mixed	$strings	a string or an array of strings to normalize* @return	mixed				the normalized content, preserving array keys if array given.*/function utf8_normalize_nfkc($strings){	if (empty($strings))	{		return $strings;	}	if (!class_exists('utf_normalizer'))	{		global $phpbb_root_path, $phpEx;		include($phpbb_root_path . 'includes/utf/utf_normalizer.' . $phpEx);	}	if (!is_array($strings))	{		utf_normalizer::nfkc($strings);	}	else if (is_array($strings))	{		foreach ($strings as $key => $string)		{			utf_normalizer::nfkc($strings[$key]);		}	}	return $strings;}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** This class collects data which is used to create some usage statistics.** The collected data is - after authorization of the administrator - submitted* to a central server. For privacy reasons we try to collect only data which aren't private* or don't give any information which might help to identify the user.** @author		Johannes Schlueter <johannes@php.net>* @copyright	(c) 2007-2008 Johannes Schlueter*/class phpbb_questionnaire_data_collector{	var $providers;	var $data = null;	var $install_id = '';	/**	* Constructor.	*	* @param	string	*/	function phpbb_questionnaire_data_collector($install_id)	{		$this->install_id = $install_id;		$this->providers = array();	}	function add_data_provider(&$provider)	{		$this->providers[] = &$provider;	}	/**	* Get data as an array.	*	* @return	array	All Data	*/	function get_data_raw()	{		if (!$this->data)		{			$this->collect();		}		return $this->data;	}	function get_data_for_form()	{		return base64_encode(serialize($this->get_data_raw()));	}	/**	* Collect info into the data property.	*	* @return	void	*/	function collect()	{		foreach (array_keys($this->providers) as $key)		{			$provider = &$this->providers[$key];			$this->data[$provider->get_identifier()] = $provider->get_data();		}		$this->data['install_id'] = $this->install_id;	}}/** interface: get_indentifier(), get_data() *//*** Questionnaire PHP data provider* @package phpBB3*/class phpbb_questionnaire_php_data_provider{	function get_identifier()	{		return 'PHP';	}	/**	* Get data about the PHP runtime setup.	*	* @return	array	*/	function get_data()	{		return array(			'version'						=> PHP_VERSION,			'sapi'							=> PHP_SAPI,			'int_size'						=> defined('PHP_INT_SIZE') ? PHP_INT_SIZE : '',			'safe_mode'						=> (int) @ini_get('safe_mode'),			'open_basedir'					=> (int) @ini_get('open_basedir'),			'memory_limit'					=> @ini_get('memory_limit'),			'allow_url_fopen'				=> (int) @ini_get('allow_url_fopen'),			'allow_url_include'				=> (int) @ini_get('allow_url_include'),			'file_uploads'					=> (int) @ini_get('file_uploads'),			'upload_max_filesize'			=> @ini_get('upload_max_filesize'),			'post_max_size'					=> @ini_get('post_max_size'),			'disable_functions'				=> @ini_get('disable_functions'),			'disable_classes'				=> @ini_get('disable_classes'),			'enable_dl'						=> (int) @ini_get('enable_dl'),			'magic_quotes_gpc'				=> (int) @ini_get('magic_quotes_gpc'),			'register_globals'				=> (int) @ini_get('register_globals'),			'filter.default'				=> @ini_get('filter.default'),			'zend.ze1_compatibility_mode'	=> (int) @ini_get('zend.ze1_compatibility_mode'),			'unicode.semantics'				=> (int) @ini_get('unicode.semantics'),			'zend_thread_safty'				=> (int) function_exists('zend_thread_id'),			'extensions'					=> get_loaded_extensions(),		);	}}/*** Questionnaire System data provider* @package phpBB3*/class phpbb_questionnaire_system_data_provider{	function get_identifier()	{		return 'System';	}	/**	* Get data about the general system information, like OS or IP (shortened).	*	* @return	array	*/	function get_data()	{		// Start discovering the IPV4 server address, if available		$server_address = '0.0.0.0';		if (!empty($_SERVER['SERVER_ADDR']))		{			$server_address = $_SERVER['SERVER_ADDR'];		}		// Running on IIS?		if (!empty($_SERVER['LOCAL_ADDR']))		{			$server_address = $_SERVER['LOCAL_ADDR'];		}		return array(			'os'	=> PHP_OS,			'httpd'	=> $_SERVER['SERVER_SOFTWARE'],			// we don't want the real IP address (for privacy policy reasons) but only			// a network address to see whether your installation is running on a private or public network.			'private_ip'	=> $this->is_private_ip($server_address),			'ipv6'			=> strpos($server_address, ':') !== false,		);	}	/**	* Checks whether the given IP is in a private network.	*	* @param	string	$ip	IP in v4 dot-decimal or v6 hex format	* @return	bool		true if the IP is from a private network, else false	*/	function is_private_ip($ip)	{		// IPv4		if (strpos($ip, ':') === false)		{			$ip_address_ary = explode('.', $ip);			// build ip			if (!isset($ip_address_ary[0]) || !isset($ip_address_ary[1]))			{				$ip_address_ary = explode('.', '0.0.0.0');			}			// IANA reserved addresses for private networks (RFC 1918) are:			// - 10.0.0.0/8			// - 172.16.0.0/12			// - 192.168.0.0/16			if ($ip_address_ary[0] == '10' ||				($ip_address_ary[0] == '172' && intval($ip_address_ary[1]) > 15 && intval($ip_address_ary[1]) < 32) ||				($ip_address_ary[0] == '192' && $ip_address_ary[1] == '168') ||				($ip_address_ary[0] == '192' && $ip_address_ary[1] == '168'))			{				return true;			}		}		// IPv6		else		{			// unique local unicast			$prefix = substr($ip, 0, 2);			if ($prefix == 'fc' || $prefix == 'fd')			{				return true;			}		}		return false;	}}/*** Questionnaire phpBB data provider* @package phpBB3*/class phpbb_questionnaire_phpbb_data_provider{	var $config;	var $unique_id;	/**	* Constructor.	*	* @param	array	$config	*/	function phpbb_questionnaire_phpbb_data_provider($config)	{		// generate a unique id if necessary		if (empty($config['questionnaire_unique_id']))		{			$this->unique_id = unique_id();			set_config('questionnaire_unique_id', $this->unique_id);		}		else		{			$this->unique_id = $config['questionnaire_unique_id'];		}		$this->config = $config;	}	/**	* Returns a string identifier for this data provider	*	* @return	string	"phpBB"	*/	function get_identifier()	{		return 'phpBB';	}	/**	* Get data about this phpBB installation.	*	* @return	array	Relevant anonymous config options	*/	function get_data()	{		global $phpbb_root_path, $phpEx;		include("{$phpbb_root_path}config.$phpEx");		unset($dbhost, $dbport, $dbname, $dbuser, $dbpasswd); // Just a precaution		// Only send certain config vars		$config_vars = array(			'active_sessions' => true,			'allow_attachments' => true,			'allow_autologin' => true,			'allow_avatar' => true,			'allow_avatar_local' => true,			'allow_avatar_remote' => true,			'allow_avatar_upload' => true,			'allow_bbcode' => true,			'allow_birthdays' => true,			'allow_bookmarks' => true,			'allow_emailreuse' => true,			'allow_forum_notify' => true,			'allow_mass_pm' => true,			'allow_name_chars' => true,			'allow_namechange' => true,			'allow_nocensors' => true,			'allow_pm_attach' => true,			'allow_pm_report' => true,			'allow_post_flash' => true,			'allow_post_links' => true,			'allow_privmsg' => true,			'allow_quick_reply' => true,			'allow_sig' => true,			'allow_sig_bbcode' => true,			'allow_sig_flash' => true,			'allow_sig_img' => true,			'allow_sig_links' => true,			'allow_sig_pm' => true,			'allow_sig_smilies' => true,			'allow_smilies' => true,			'allow_topic_notify' => true,			'attachment_quota' => true,			'auth_bbcode_pm' => true,			'auth_flash_pm' => true,			'auth_img_pm' => true,			'auth_method' => true,			'auth_smilies_pm' => true,			'avatar_filesize' => true,			'avatar_max_height' => true,			'avatar_max_width' => true,			'avatar_min_height' => true,			'avatar_min_width' => true,			'board_dst' => true,			'board_email_form' => true,			'board_hide_emails' => true,			'board_timezone' => true,			'browser_check' => true,			'bump_interval' => true,			'bump_type' => true,			'cache_gc' => true,			'captcha_plugin' => true,			'captcha_gd' => true,			'captcha_gd_foreground_noise' => true,			'captcha_gd_x_grid' => true,			'captcha_gd_y_grid' => true,			'captcha_gd_wave' => true,			'captcha_gd_3d_noise' => true,			'captcha_gd_fonts' => true,			'confirm_refresh' => true,			'check_attachment_content' => true,			'check_dnsbl' => true,			'chg_passforce' => true,			'cookie_secure' => true,			'coppa_enable' => true,			'database_gc' => true,			'dbms_version' => true,			'default_dateformat' => true,			'default_lang' => true,			'display_last_edited' => true,			'display_order' => true,			'edit_time' => true,			'email_check_mx' => true,			'email_enable' => true,			'email_function_name' => true,			'email_package_size' => true,			'enable_confirm' => true,			'enable_pm_icons' => true,			'enable_post_confirm' => true,			'feed_enable' => true,			'feed_http_auth' => true,			'feed_limit_post' => true,			'feed_limit_topic' => true,			'feed_overall' => true,			'feed_overall_forums' => true,			'feed_forum' => true,			'feed_topic' => true,			'feed_topics_new' => true,			'feed_topics_active' => true,			'feed_item_statistics' => true,			'flood_interval' => true,			'force_server_vars' => true,			'form_token_lifetime' => true,			'form_token_mintime' => true,			'form_token_sid_guests' => true,			'forward_pm' => true,			'forwarded_for_check' => true,			'full_folder_action' => true,			'fulltext_native_common_thres' => true,			'fulltext_native_load_upd' => true,			'fulltext_native_max_chars' => true,			'fulltext_native_min_chars' => true,			'gzip_compress' => true,			'hot_threshold' => true,			'img_create_thumbnail' => true,			'img_display_inlined' => true,			'img_imagick' => true,			'img_link_height' => true,			'img_link_width' => true,			'img_max_height' => true,			'img_max_thumb_width' => true,			'img_max_width' => true,			'img_min_thumb_filesize' => true,			'ip_check' => true,			'jab_enable' => true,			'jab_package_size' => true,			'jab_use_ssl' => true,			'limit_load' => true,			'limit_search_load' => true,			'load_anon_lastread' => true,			'load_birthdays' => true,			'load_cpf_memberlist' => true,			'load_cpf_viewprofile' => true,			'load_cpf_viewtopic' => true,			'load_db_lastread' => true,			'load_db_track' => true,			'load_jumpbox' => true,			'load_moderators' => true,			'load_online' => true,			'load_online_guests' => true,			'load_online_time' => true,			'load_onlinetrack' => true,			'load_search' => true,			'load_tplcompile' => true,			'load_user_activity' => true,			'max_attachments' => true,			'max_attachments_pm' => true,			'max_autologin_time' => true,			'max_filesize' => true,			'max_filesize_pm' => true,			'max_login_attempts' => true,			'max_name_chars' => true,			'max_num_search_keywords' => true,			'max_pass_chars' => true,			'max_poll_options' => true,			'max_post_chars' => true,			'max_post_font_size' => true,			'max_post_img_height' => true,			'max_post_img_width' => true,			'max_post_smilies' => true,			'max_post_urls' => true,			'max_quote_depth' => true,			'max_reg_attempts' => true,			'max_sig_chars' => true,			'max_sig_font_size' => true,			'max_sig_img_height' => true,			'max_sig_img_width' => true,			'max_sig_smilies' => true,			'max_sig_urls' => true,			'min_name_chars' => true,			'min_pass_chars' => true,			'min_post_chars' => true,			'min_search_author_chars' => true,			'mime_triggers' => true,			'new_member_post_limit' => true,			'new_member_group_default' => true,			'override_user_style' => true,			'pass_complex' => true,			'pm_edit_time' => true,			'pm_max_boxes' => true,			'pm_max_msgs' => true,			'pm_max_recipients' => true,			'posts_per_page' => true,			'print_pm' => true,			'queue_interval' => true,			'require_activation' => true,			'referer_validation' => true,			'search_block_size' => true,			'search_gc' => true,			'search_interval' => true,			'search_anonymous_interval' => true,			'search_type' => true,			'search_store_results' => true,			'secure_allow_deny' => true,			'secure_allow_empty_referer' => true,			'secure_downloads' => true,			'session_gc' => true,			'session_length' => true,			'smtp_auth_method' => true,			'smtp_delivery' => true,			'topics_per_page' => true,			'tpl_allow_php' => true,			'version' => true,			'warnings_expire_days' => true,			'warnings_gc' => true,			'num_files' => true,			'num_posts' => true,			'num_topics' => true,			'num_users' => true,			'record_online_users' => true,		);		$result = array();		foreach ($config_vars as $name => $void)		{			if (isset($this->config[$name]))			{				$result['config_' . $name] = $this->config[$name];			}		}		global $db;		$result['dbms'] = $dbms;		$result['acm_type'] = $acm_type;		$result['load_extensions'] = $load_extensions;		$result['user_agent'] = 'Unknown';		$result['dbms_version'] = $db->sql_server_info(true);		// Try to get user agent vendor and version		$match = array();		$user_agent = (!empty($_SERVER['HTTP_USER_AGENT'])) ? (string) $_SERVER['HTTP_USER_AGENT'] : '';		$agents = array('firefox', 'msie', 'opera', 'chrome', 'safari', 'mozilla', 'seamonkey', 'konqueror', 'netscape', 'gecko', 'navigator', 'mosaic', 'lynx', 'amaya', 'omniweb', 'avant', 'camino', 'flock', 'aol');		// We check here 1 by 1 because some strings occur after others (for example Mozilla [...] Firefox/)		foreach ($agents as $agent)		{			if (preg_match('#(' . $agent . ')[/ ]?([0-9.]*)#i', $user_agent, $match))			{				$result['user_agent'] = $match[1] . ' ' . $match[2];				break;			}		}		return $result;	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_ban_info{	function module()	{		return array(			'filename'	=> 'acp_ban',			'title'		=> 'ACP_BAN',			'version'	=> '1.0.0',			'modes'		=> array(				'email'		=> array('title' => 'ACP_BAN_EMAILS', 'auth' => 'acl_a_ban', 'cat' => array('ACP_USER_SECURITY')),				'ip'		=> array('title' => 'ACP_BAN_IPS', 'auth' => 'acl_a_ban', 'cat' => array('ACP_USER_SECURITY')),				'user'		=> array('title' => 'ACP_BAN_USERNAMES', 'auth' => 'acl_a_ban', 'cat' => array('ACP_USER_SECURITY')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);include($phpbb_root_path . 'includes/functions_display.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup('viewforum');display_forums('', $config['load_moderators']);// Set some stats, get posts count from forums data if we... hum... retrieve all forums data$total_posts	= $config['num_posts'];$total_topics	= $config['num_topics'];$total_users	= $config['num_users'];$l_total_user_s = ($total_users == 0) ? 'TOTAL_USERS_ZERO' : 'TOTAL_USERS_OTHER';$l_total_post_s = ($total_posts == 0) ? 'TOTAL_POSTS_ZERO' : 'TOTAL_POSTS_OTHER';$l_total_topic_s = ($total_topics == 0) ? 'TOTAL_TOPICS_ZERO' : 'TOTAL_TOPICS_OTHER';// Grab group details for legend displayif ($auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel')){	$sql = 'SELECT group_id, group_name, group_colour, group_type		FROM ' . GROUPS_TABLE . '		WHERE group_legend = 1		ORDER BY group_name ASC';}else{	$sql = 'SELECT g.group_id, g.group_name, g.group_colour, g.group_type		FROM ' . GROUPS_TABLE . ' g		LEFT JOIN ' . USER_GROUP_TABLE . ' ug			ON (				g.group_id = ug.group_id				AND ug.user_id = ' . $user->data['user_id'] . '				AND ug.user_pending = 0			)		WHERE g.group_legend = 1			AND (g.group_type <> ' . GROUP_HIDDEN . ' OR ug.user_id = ' . $user->data['user_id'] . ')		ORDER BY g.group_name ASC';}$result = $db->sql_query($sql);$legend = array();while ($row = $db->sql_fetchrow($result)){	$colour_text = ($row['group_colour']) ? ' style="color:#' . $row['group_colour'] . '"' : '';	$group_name = ($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name'];	if ($row['group_name'] == 'BOTS' || ($user->data['user_id'] != ANONYMOUS && !$auth->acl_get('u_viewprofile')))	{		$legend[] = '<span' . $colour_text . '>' . $group_name . '</span>';	}	else	{		$legend[] = '<a' . $colour_text . ' href="' . append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=group&amp;g=' . $row['group_id']) . '">' . $group_name . '</a>';	}}$db->sql_freeresult($result);$legend = implode(', ', $legend);// Generate birthday list if required ...$birthday_list = '';if ($config['load_birthdays'] && $config['allow_birthdays'] && $auth->acl_gets('u_viewprofile', 'a_user', 'a_useradd', 'a_userdel')){	$now = phpbb_gmgetdate(time() + $user->timezone + $user->dst);	// Display birthdays of 29th february on 28th february in non-leap-years	$leap_year_birthdays = '';	if ($now['mday'] == 28 && $now['mon'] == 2 && !$user->format_date(time(), 'L'))	{		$leap_year_birthdays = " OR user_birthday LIKE '" . $db->sql_escape(sprintf('%2d-%2d-', 29, 2)) . "%'";	}	$sql = 'SELECT u.user_id, u.username, u.user_colour, u.user_birthday		FROM ' . USERS_TABLE . ' u		LEFT JOIN ' . BANLIST_TABLE . " b ON (u.user_id = b.ban_userid)		WHERE (b.ban_id IS NULL			OR b.ban_exclude = 1)			AND (u.user_birthday LIKE '" . $db->sql_escape(sprintf('%2d-%2d-', $now['mday'], $now['mon'])) . "%' $leap_year_birthdays)			AND u.user_type IN (" . USER_NORMAL . ', ' . USER_FOUNDER . ')';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$birthday_list .= (($birthday_list != '') ? ', ' : '') . get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']);		if ($age = (int) substr($row['user_birthday'], -4))		{			$birthday_list .= ' (' . max(0, $now['year'] - $age) . ')';		}	}	$db->sql_freeresult($result);}// Assign index specific vars$template->assign_vars(array(	'TOTAL_POSTS'	=> sprintf($user->lang[$l_total_post_s], $total_posts),	'TOTAL_TOPICS'	=> sprintf($user->lang[$l_total_topic_s], $total_topics),	'TOTAL_USERS'	=> sprintf($user->lang[$l_total_user_s], $total_users),	'NEWEST_USER'	=> sprintf($user->lang['NEWEST_USER'], get_username_string('full', $config['newest_user_id'], $config['newest_username'], $config['newest_user_colour'])),	'LEGEND'		=> $legend,	'BIRTHDAY_LIST'	=> $birthday_list,	'FORUM_IMG'				=> $user->img('forum_read', 'NO_UNREAD_POSTS'),	'FORUM_UNREAD_IMG'			=> $user->img('forum_unread', 'UNREAD_POSTS'),	'FORUM_LOCKED_IMG'		=> $user->img('forum_read_locked', 'NO_UNREAD_POSTS_LOCKED'),	'FORUM_UNREAD_LOCKED_IMG'	=> $user->img('forum_unread_locked', 'UNREAD_POSTS_LOCKED'),	'S_LOGIN_ACTION'			=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=login'),	'S_DISPLAY_BIRTHDAY_LIST'	=> ($config['load_birthdays']) ? true : false,	'U_MARK_FORUMS'		=> ($user->data['is_registered'] || $config['load_anon_lastread']) ? append_sid("{$phpbb_root_path}index.$phpEx", 'hash=' . generate_link_hash('global') . '&amp;mark=forums') : '',	'U_MCP'				=> ($auth->acl_get('m_') || $auth->acl_getf_global('m_')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main&amp;mode=front', true, $user->session_id) : ''));// Output pagepage_header($user->lang['INDEX']);$template->set_filenames(array(	'body' => 'index_body.html'));page_footer();?>
<?php return array(''=>'');
<?php return array(''=>'');
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'',''=>'16',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'100',''=>'1000',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'1/2',''=>'3/2',''=>'5/2',''=>'7/2',''=>'9/2',''=>'11/2',''=>'13/2',''=>'15/2',''=>'17/2',''=>'-1/2',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_reasons{	var $u_action;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang(array('mcp', 'acp/posting'));		// Set up general vars		$action = request_var('action', '');		$submit = (isset($_POST['submit'])) ? true : false;		$reason_id = request_var('id', 0);		$this->tpl_name = 'acp_reasons';		$this->page_title = 'ACP_REASONS';		$form_name = 'acp_reason';		add_form_key('acp_reason');		$error = array();		switch ($action)		{			case 'add':			case 'edit':				$reason_row = array(					'reason_title'			=> utf8_normalize_nfc(request_var('reason_title', '', true)),					'reason_description'	=> utf8_normalize_nfc(request_var('reason_description', '', true)),				);				if ($submit)				{					if (!check_form_key($form_name))					{						$error[] = $user->lang['FORM_INVALID'];					}					// Reason specified?					if (!$reason_row['reason_title'] || !$reason_row['reason_description'])					{						$error[] = $user->lang['NO_REASON_INFO'];					}					$check_double = ($action == 'add') ? true : false;					if ($action == 'edit')					{						$sql = 'SELECT reason_title							FROM ' . REPORTS_REASONS_TABLE . "							WHERE reason_id = $reason_id";						$result = $db->sql_query($sql);						$row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (strtolower($row['reason_title']) == 'other' || strtolower($reason_row['reason_title']) == 'other')						{							$reason_row['reason_title'] = 'other';						}						if ($row['reason_title'] != $reason_row['reason_title'])						{							$check_double = true;						}					}					// Check for same reason if adding it...					if ($check_double)					{						$sql = 'SELECT reason_id							FROM ' . REPORTS_REASONS_TABLE . "							WHERE reason_title = '" . $db->sql_escape($reason_row['reason_title']) . "'";						$result = $db->sql_query($sql);						$row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if ($row || ($action == 'add' && strtolower($reason_row['reason_title']) == 'other'))						{							$error[] = $user->lang['REASON_ALREADY_EXIST'];						}					}					if (!sizeof($error))					{						// New reason?						if ($action == 'add')						{							// Get new order...							$sql = 'SELECT MAX(reason_order) as max_reason_order								FROM ' . REPORTS_REASONS_TABLE;							$result = $db->sql_query($sql);							$max_order = (int) $db->sql_fetchfield('max_reason_order');							$db->sql_freeresult($result);														$sql_ary = array(								'reason_title'			=> (string) $reason_row['reason_title'],								'reason_description'	=> (string) $reason_row['reason_description'],								'reason_order'			=> $max_order + 1							);							$db->sql_query('INSERT INTO ' . REPORTS_REASONS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));							$log = 'ADDED';						}						else if ($reason_id)						{							$sql_ary = array(								'reason_title'			=> (string) $reason_row['reason_title'],								'reason_description'	=> (string) $reason_row['reason_description'],							);							$db->sql_query('UPDATE ' . REPORTS_REASONS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '								WHERE reason_id = ' . $reason_id);							$log = 'UPDATED';						}						add_log('admin', 'LOG_REASON_' . $log, $reason_row['reason_title']);						trigger_error($user->lang['REASON_' . $log] . adm_back_link($this->u_action));					}				}				else if ($reason_id)				{					$sql = 'SELECT *						FROM ' . REPORTS_REASONS_TABLE . '						WHERE reason_id = ' . $reason_id;					$result = $db->sql_query($sql);					$reason_row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if (!$reason_row)					{						trigger_error($user->lang['NO_REASON'] . adm_back_link($this->u_action), E_USER_WARNING);					}				}				$l_title = ($action == 'edit') ? 'EDIT' : 'ADD';				$translated = false;				// If the reason is defined within the language file, we will use the localized version, else just use the database entry...				if (isset($user->lang['report_reasons']['TITLE'][strtoupper($reason_row['reason_title'])]) && isset($user->lang['report_reasons']['DESCRIPTION'][strtoupper($reason_row['reason_title'])]))				{					$translated = true;				}				$template->assign_vars(array(					'L_TITLE'		=> $user->lang['REASON_' . $l_title],					'U_ACTION'		=> $this->u_action . "&amp;id=$reason_id&amp;action=$action",					'U_BACK'		=> $this->u_action,					'ERROR_MSG'		=> (sizeof($error)) ? implode('<br />', $error) : '',										'REASON_TITLE'			=> $reason_row['reason_title'],					'REASON_DESCRIPTION'	=> $reason_row['reason_description'],					'TRANSLATED_TITLE'		=> ($translated) ? $user->lang['report_reasons']['TITLE'][strtoupper($reason_row['reason_title'])] : '',					'TRANSLATED_DESCRIPTION'=> ($translated) ? $user->lang['report_reasons']['DESCRIPTION'][strtoupper($reason_row['reason_title'])] : '',					'S_AVAILABLE_TITLES'	=> implode(', ', array_map('htmlspecialchars', array_keys($user->lang['report_reasons']['TITLE']))),					'S_EDIT_REASON'			=> true,					'S_TRANSLATED'			=> $translated,					'S_ERROR'				=> (sizeof($error)) ? true : false,					)				);				return;			break;			case 'delete':				$sql = 'SELECT *					FROM ' . REPORTS_REASONS_TABLE . '					WHERE reason_id = ' . $reason_id;				$result = $db->sql_query($sql);				$reason_row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$reason_row)				{					trigger_error($user->lang['NO_REASON'] . adm_back_link($this->u_action), E_USER_WARNING);				}				if (strtolower($reason_row['reason_title']) == 'other')				{					trigger_error($user->lang['NO_REMOVE_DEFAULT_REASON'] . adm_back_link($this->u_action), E_USER_WARNING);				}				// Let the deletion be confirmed...				if (confirm_box(true))				{					$sql = 'SELECT reason_id						FROM ' . REPORTS_REASONS_TABLE . "						WHERE LOWER(reason_title) = 'other'";					$result = $db->sql_query($sql);					$other_reason_id = (int) $db->sql_fetchfield('reason_id');					$db->sql_freeresult($result);					switch ($db->sql_layer)					{						// The ugly one!						case 'mysqli':						case 'mysql4':						case 'mysql':							// Change the reports using this reason to 'other'							$sql = 'UPDATE ' . REPORTS_TABLE . '								SET reason_id = ' . $other_reason_id . ", report_text = CONCAT('" . $db->sql_escape($reason_row['reason_description']) . "\n\n', report_text)								WHERE reason_id = $reason_id";						break;						// Standard? What's that?						case 'mssql':						case 'mssql_odbc':						case 'mssqlnative':							// Change the reports using this reason to 'other'							$sql = "DECLARE @ptrval binary(16)									SELECT @ptrval = TEXTPTR(report_text)										FROM " . REPORTS_TABLE . "									WHERE reason_id = " . $reason_id . "									UPDATETEXT " . REPORTS_TABLE . ".report_text @ptrval 0 0 '" . $db->sql_escape($reason_row['reason_description']) . "\n\n'									UPDATE " . REPORTS_TABLE . '										SET reason_id = ' . $other_reason_id . "									WHERE reason_id = $reason_id";						break;						// Teh standard						case 'postgres':						case 'oracle':						case 'firebird':						case 'sqlite':							// Change the reports using this reason to 'other'							$sql = 'UPDATE ' . REPORTS_TABLE . '								SET reason_id = ' . $other_reason_id . ", report_text = '" . $db->sql_escape($reason_row['reason_description']) . "\n\n' || report_text								WHERE reason_id = $reason_id";						break;					}					$db->sql_query($sql);					$db->sql_query('DELETE FROM ' . REPORTS_REASONS_TABLE . ' WHERE reason_id = ' . $reason_id);					add_log('admin', 'LOG_REASON_REMOVED', $reason_row['reason_title']);					trigger_error($user->lang['REASON_REMOVED'] . adm_back_link($this->u_action));				}				else				{					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(						'i'			=> $id,						'mode'		=> $mode,						'action'	=> $action,						'id'		=> $reason_id))					);				}			break;			case 'move_up':			case 'move_down':				$order = request_var('order', 0);				$order_total = $order * 2 + (($action == 'move_up') ? -1 : 1);				$sql = 'UPDATE ' . REPORTS_REASONS_TABLE . '					SET reason_order = ' . $order_total . ' - reason_order					WHERE reason_order IN (' . $order . ', ' . (($action == 'move_up') ? $order - 1 : $order + 1) . ')';				$db->sql_query($sql);			break;		}		// By default, check that order is valid and fix it if necessary		$sql = 'SELECT reason_id, reason_order			FROM ' . REPORTS_REASONS_TABLE . '			ORDER BY reason_order';		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			$order = 0;			do			{				++$order;								if ($row['reason_order'] != $order)				{					$sql = 'UPDATE ' . REPORTS_REASONS_TABLE . "						SET reason_order = $order						WHERE reason_id = {$row['reason_id']}";					$db->sql_query($sql);				}			}			while ($row = $db->sql_fetchrow($result));		}		$db->sql_freeresult($result);		$template->assign_vars(array(			'U_ACTION'			=> $this->u_action,			)		);		// Reason count		$sql = 'SELECT reason_id, COUNT(reason_id) AS reason_count			FROM ' . REPORTS_TABLE . '			GROUP BY reason_id';		$result = $db->sql_query($sql);		$reason_count = array();		while ($row = $db->sql_fetchrow($result))		{			$reason_count[$row['reason_id']] = $row['reason_count'];		}		$db->sql_freeresult($result);		$sql = 'SELECT *			FROM ' . REPORTS_REASONS_TABLE . '			ORDER BY reason_order ASC';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$translated = false;			$other_reason = ($row['reason_title'] == 'other') ? true : false;			// If the reason is defined within the language file, we will use the localized version, else just use the database entry...			if (isset($user->lang['report_reasons']['TITLE'][strtoupper($row['reason_title'])]) && isset($user->lang['report_reasons']['DESCRIPTION'][strtoupper($row['reason_title'])]))			{				$row['reason_description'] = $user->lang['report_reasons']['DESCRIPTION'][strtoupper($row['reason_title'])];				$row['reason_title'] = $user->lang['report_reasons']['TITLE'][strtoupper($row['reason_title'])];				$translated = true;			}			$template->assign_block_vars('reasons', array(				'REASON_TITLE'			=> $row['reason_title'],				'REASON_DESCRIPTION'	=> $row['reason_description'],				'REASON_COUNT'			=> (isset($reason_count[$row['reason_id']])) ? $reason_count[$row['reason_id']] : 0,				'S_TRANSLATED'		=> $translated,				'S_OTHER_REASON'	=> $other_reason,				'U_EDIT'		=> $this->u_action . '&amp;action=edit&amp;id=' . $row['reason_id'],				'U_DELETE'		=> (!$other_reason) ? $this->u_action . '&amp;action=delete&amp;id=' . $row['reason_id'] : '',				'U_MOVE_UP'		=> $this->u_action . '&amp;action=move_up&amp;order=' . $row['reason_order'],				'U_MOVE_DOWN'	=> $this->u_action . '&amp;action=move_down&amp;order=' . $row['reason_order'])			);		}		$db->sql_freeresult($result);	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);require($phpbb_root_path . 'common.' . $phpEx);require($phpbb_root_path . 'includes/functions_user.' . $phpEx);require($phpbb_root_path . 'includes/functions_module.' . $phpEx);// Basic parameter data$id 	= request_var('i', '');$mode	= request_var('mode', '');if (in_array($mode, array('login', 'logout', 'confirm', 'sendpassword', 'activate'))){	define('IN_LOGIN', true);}// Start session management$user->session_begin();$auth->acl($user->data);$user->setup('ucp');// Setting a variable to let the style designer know where he is...$template->assign_var('S_IN_UCP', true);$module = new p_master();$default = false;// Basic "global" modesswitch ($mode){	case 'activate':		$module->load('ucp', 'activate');		$module->display($user->lang['UCP_ACTIVATE']);		redirect(append_sid("{$phpbb_root_path}index.$phpEx"));	break;	case 'resend_act':		$module->load('ucp', 'resend');		$module->display($user->lang['UCP_RESEND']);	break;	case 'sendpassword':		$module->load('ucp', 'remind');		$module->display($user->lang['UCP_REMIND']);	break;	case 'register':		if ($user->data['is_registered'] || isset($_REQUEST['not_agreed']))		{			redirect(append_sid("{$phpbb_root_path}index.$phpEx"));		}		$module->load('ucp', 'register');		$module->display($user->lang['REGISTER']);	break;	case 'confirm':		$module->load('ucp', 'confirm');	break;	case 'login':		if ($user->data['is_registered'])		{			redirect(append_sid("{$phpbb_root_path}index.$phpEx"));		}		login_box(request_var('redirect', "index.$phpEx"));	break;	case 'logout':		if ($user->data['user_id'] != ANONYMOUS && isset($_GET['sid']) && !is_array($_GET['sid']) && $_GET['sid'] === $user->session_id)		{			$user->session_kill();			$user->session_begin();			$message = $user->lang['LOGOUT_REDIRECT'];		}		else		{			$message = ($user->data['user_id'] == ANONYMOUS) ? $user->lang['LOGOUT_REDIRECT'] : $user->lang['LOGOUT_FAILED'];		}		meta_refresh(3, append_sid("{$phpbb_root_path}index.$phpEx"));		$message = $message . '<br /><br />' . sprintf($user->lang['RETURN_INDEX'], '<a href="' . append_sid("{$phpbb_root_path}index.$phpEx") . '">', '</a> ');		trigger_error($message);	break;	case 'terms':	case 'privacy':		$message = ($mode == 'terms') ? 'TERMS_OF_USE_CONTENT' : 'PRIVACY_POLICY';		$title = ($mode == 'terms') ? 'TERMS_USE' : 'PRIVACY';		if (empty($user->lang[$message]))		{			if ($user->data['is_registered'])			{				redirect(append_sid("{$phpbb_root_path}index.$phpEx"));			}			login_box();		}		$template->set_filenames(array(			'body'		=> 'ucp_agreement.html')		);		// Disable online list		page_header($user->lang[$title], false);		$template->assign_vars(array(			'S_AGREEMENT'			=> true,			'AGREEMENT_TITLE'		=> $user->lang[$title],			'AGREEMENT_TEXT'		=> sprintf($user->lang[$message], $config['sitename'], generate_board_url()),			'U_BACK'				=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=login'),			'L_BACK'				=> $user->lang['BACK_TO_LOGIN'],		));		page_footer();	break;	case 'delete_cookies':		// Delete Cookies with dynamic names (do NOT delete poll cookies)		if (confirm_box(true))		{			$set_time = time() - 31536000;			foreach ($_COOKIE as $cookie_name => $cookie_data)			{				// Only delete board cookies, no other ones...				if (strpos($cookie_name, $config['cookie_name'] . '_') !== 0)				{					continue;				}				$cookie_name = str_replace($config['cookie_name'] . '_', '', $cookie_name);				// Polls are stored as {cookie_name}_poll_{topic_id}, cookie_name_ got removed, therefore checking for poll_				if (strpos($cookie_name, 'poll_') !== 0)				{					$user->set_cookie($cookie_name, '', $set_time);				}			}			$user->set_cookie('track', '', $set_time);			$user->set_cookie('u', '', $set_time);			$user->set_cookie('k', '', $set_time);			$user->set_cookie('sid', '', $set_time);			// We destroy the session here, the user will be logged out nevertheless			$user->session_kill();			$user->session_begin();			meta_refresh(3, append_sid("{$phpbb_root_path}index.$phpEx"));			$message = $user->lang['COOKIES_DELETED'] . '<br /><br />' . sprintf($user->lang['RETURN_INDEX'], '<a href="' . append_sid("{$phpbb_root_path}index.$phpEx") . '">', '</a>');			trigger_error($message);		}		else		{			confirm_box(false, 'DELETE_COOKIES', '');		}		redirect(append_sid("{$phpbb_root_path}index.$phpEx"));	break;	case 'switch_perm':		$user_id = request_var('u', 0);		$sql = 'SELECT *			FROM ' . USERS_TABLE . '			WHERE user_id = ' . (int) $user_id;		$result = $db->sql_query($sql);		$user_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$auth->acl_get('a_switchperm') || !$user_row || $user_id == $user->data['user_id'] || !check_link_hash(request_var('hash', ''), 'switchperm'))		{			redirect(append_sid("{$phpbb_root_path}index.$phpEx"));		}		include($phpbb_root_path . 'includes/acp/auth.' . $phpEx);		$auth_admin = new auth_admin();		if (!$auth_admin->ghost_permissions($user_id, $user->data['user_id']))		{			redirect(append_sid("{$phpbb_root_path}index.$phpEx"));		}		add_log('admin', 'LOG_ACL_TRANSFER_PERMISSIONS', $user_row['username']);		$message = sprintf($user->lang['PERMISSIONS_TRANSFERRED'], $user_row['username']) . '<br /><br />' . sprintf($user->lang['RETURN_INDEX'], '<a href="' . append_sid("{$phpbb_root_path}index.$phpEx") . '">', '</a>');		trigger_error($message);	break;	case 'restore_perm':		if (!$user->data['user_perm_from'] || !$auth->acl_get('a_switchperm'))		{			redirect(append_sid("{$phpbb_root_path}index.$phpEx"));		}		$auth->acl_cache($user->data);		$sql = 'SELECT username			FROM ' . USERS_TABLE . '			WHERE user_id = ' . $user->data['user_perm_from'];		$result = $db->sql_query($sql);		$username = $db->sql_fetchfield('username');		$db->sql_freeresult($result);		add_log('admin', 'LOG_ACL_RESTORE_PERMISSIONS', $username);		$message = $user->lang['PERMISSIONS_RESTORED'] . '<br /><br />' . sprintf($user->lang['RETURN_INDEX'], '<a href="' . append_sid("{$phpbb_root_path}index.$phpEx") . '">', '</a>');		trigger_error($message);	break;	default:		$default = true;	break;}// We use this approach because it does not impose large code changesif (!$default){	return true;}// Only registered users can go beyond this pointif (!$user->data['is_registered']){	if ($user->data['is_bot'])	{		redirect(append_sid("{$phpbb_root_path}index.$phpEx"));	}	if ($id == 'pm' && $mode == 'view' && isset($_GET['p']))	{		$redirect_url = append_sid("{$phpbb_root_path}ucp.$phpEx?i=pm&p=" . request_var('p', 0));		login_box($redirect_url, $user->lang['LOGIN_EXPLAIN_UCP']);	}	login_box('', $user->lang['LOGIN_EXPLAIN_UCP']);}// Instantiate module system and generate list of available modules$module->list_modules('ucp');// Check if the zebra module is setif ($module->is_active('zebra', 'friends')){	// Output listing of friends online	$update_time = $config['load_online_time'] * 60;	$sql = $db->sql_build_query('SELECT_DISTINCT', array(		'SELECT'	=> 'u.user_id, u.username, u.username_clean, u.user_colour, MAX(s.session_time) as online_time, MIN(s.session_viewonline) AS viewonline',		'FROM'		=> array(			USERS_TABLE		=> 'u',			ZEBRA_TABLE		=> 'z'		),		'LEFT_JOIN'	=> array(			array(				'FROM'	=> array(SESSIONS_TABLE => 's'),				'ON'	=> 's.session_user_id = z.zebra_id'			)		),		'WHERE'		=> 'z.user_id = ' . $user->data['user_id'] . '			AND z.friend = 1			AND u.user_id = z.zebra_id',		'GROUP_BY'	=> 'z.zebra_id, u.user_id, u.username_clean, u.user_colour, u.username',		'ORDER_BY'	=> 'u.username_clean ASC',	));	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$which = (time() - $update_time < $row['online_time'] && ($row['viewonline'] || $auth->acl_get('u_viewonline'))) ? 'online' : 'offline';		$template->assign_block_vars("friends_{$which}", array(			'USER_ID'		=> $row['user_id'],			'U_PROFILE'		=> get_username_string('profile', $row['user_id'], $row['username'], $row['user_colour']),			'USER_COLOUR'	=> get_username_string('colour', $row['user_id'], $row['username'], $row['user_colour']),			'USERNAME'		=> get_username_string('username', $row['user_id'], $row['username'], $row['user_colour']),			'USERNAME_FULL'	=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']))		);	}	$db->sql_freeresult($result);}// Do not display subscribed topics/forums if not allowedif (!$config['allow_topic_notify'] && !$config['allow_forum_notify']){	$module->set_display('main', 'subscribed', false);}// Do not display signature panel if not authed to do soif (!$auth->acl_get('u_sig')){	$module->set_display('profile', 'signature', false);}// Select the active module$module->set_active($id, $mode);// Load and execute the relevant module$module->load_active();// Assign data to the template engine for the list of modules$module->assign_tpl_vars(append_sid("{$phpbb_root_path}ucp.$phpEx"));// Generate the page, do not display/query online list$module->display($module->get_page_title(), false);/*** Function for assigning a template var if the zebra module got included*/function _module_zebra($mode, &$module_row){	global $template;	$template->assign_var('S_ZEBRA_ENABLED', true);	if ($mode == 'friends')	{		$template->assign_var('S_ZEBRA_FRIENDS_ENABLED', true);	}	if ($mode == 'foes')	{		$template->assign_var('S_ZEBRA_FOES_ENABLED', true);	}}?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2006, 2008 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Placeholder for autoload*/if (!class_exists('phpbb_default_captcha')){	include($phpbb_root_path . 'includes/captcha/plugins/captcha_abstract.' . $phpEx);}/*** @package VC*/class phpbb_captcha_nogd extends phpbb_default_captcha{	function phpbb_captcha_nogd()	{		global $phpbb_root_path, $phpEx;		if (!class_exists('captcha'))		{			include_once($phpbb_root_path . 'includes/captcha/captcha_non_gd.' . $phpEx);		}	}	function &get_instance()	{		$instance =& new phpbb_captcha_nogd();		return $instance;	}	function is_available()	{		return true;	}	function get_name()	{		return 'CAPTCHA_NO_GD';	}	function get_class_name()	{		return 'phpbb_captcha_nogd';	}	function acp_page($id, &$module)	{		global $user;		trigger_error($user->lang['CAPTCHA_NO_OPTIONS'] . adm_back_link($module->u_action));	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);include($phpbb_root_path . 'includes/functions_display.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup('mcp');$forum_id		= request_var('f', 0);$post_id		= request_var('p', 0);$pm_id			= request_var('pm', 0);$reason_id		= request_var('reason_id', 0);$report_text	= utf8_normalize_nfc(request_var('report_text', '', true));$user_notify	= ($user->data['is_registered']) ? request_var('notify', 0) : false;$submit = (isset($_POST['submit'])) ? true : false;if (!$post_id && (!$pm_id || !$config['allow_pm_report'])){	trigger_error('NO_POST_SELECTED');}if ($post_id){	$redirect_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;p=$post_id") . "#p$post_id";	$return_forum_url = append_sid("{$phpbb_root_path}viewforum.$phpEx", "f=$forum_id");	$pm_id = 0;}else{	$redirect_url = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&mode=view&p=$pm_id");	$return_forum_url = '';	$post_id = 0;	$forum_id = 0;}// Has the report been cancelled?if (isset($_POST['cancel'])){	redirect($redirect_url);}if ($post_id){	// Grab all relevant data	$sql = 'SELECT t.*, p.*		FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . " t		WHERE p.post_id = $post_id			AND p.topic_id = t.topic_id";	$result = $db->sql_query($sql);	$report_data = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$report_data)	{		trigger_error('POST_NOT_EXIST');	}	$forum_id = (int) ($report_data['forum_id']) ? $report_data['forum_id'] : $forum_id;	$topic_id = (int) $report_data['topic_id'];	$sql = 'SELECT *		FROM ' . FORUMS_TABLE . '		WHERE forum_id = ' . $forum_id;	$result = $db->sql_query($sql);	$forum_data = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$forum_data)	{		trigger_error('FORUM_NOT_EXIST');	}	// Check required permissions	$acl_check_ary = array('f_list' => 'POST_NOT_EXIST', 'f_read' => 'USER_CANNOT_READ', 'f_report' => 'USER_CANNOT_REPORT');	foreach ($acl_check_ary as $acl => $error)	{		if (!$auth->acl_get($acl, $forum_id))		{			trigger_error($error);		}	}	unset($acl_check_ary);	if ($report_data['post_reported'])	{		$message = $user->lang['ALREADY_REPORTED'];		$message .= '<br /><br />' . sprintf($user->lang['RETURN_TOPIC'], '<a href="' . $redirect_url . '">', '</a>');		$message .= '<br /><br />' . sprintf($user->lang['RETURN_FORUM'], '<a href="' . $return_forum_url . '">', '</a>');		trigger_error($message);	}}else{	// Grab all relevant data	$sql = 'SELECT p.*, pt.*		FROM ' . PRIVMSGS_TABLE . ' p, ' . PRIVMSGS_TO_TABLE . " pt		WHERE p.msg_id = $pm_id			AND p.msg_id = pt.msg_id			AND (p.author_id = " . $user->data['user_id'] . " OR pt.user_id = " . $user->data['user_id'] . ")";	$result = $db->sql_query($sql);	$report_data = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$report_data)	{		$user->add_lang('ucp');		trigger_error('NO_MESSAGE');	}	if ($report_data['message_reported'])	{		$message = $user->lang['ALREADY_REPORTED_PM'];		$message .= '<br /><br />' . sprintf($user->lang['RETURN_PM'], '<a href="' . $redirect_url . '">', '</a>');		trigger_error($message);	}}// Submit report?if ($submit && $reason_id){	$sql = 'SELECT *		FROM ' . REPORTS_REASONS_TABLE . "		WHERE reason_id = $reason_id";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$row || (!$report_text && strtolower($row['reason_title']) == 'other'))	{		trigger_error('EMPTY_REPORT');	}	$sql_ary = array(		'reason_id'		=> (int) $reason_id,		'post_id'		=> $post_id,		'pm_id'			=> $pm_id,		'user_id'		=> (int) $user->data['user_id'],		'user_notify'	=> (int) $user_notify,		'report_closed'	=> 0,		'report_time'	=> (int) time(),		'report_text'	=> (string) $report_text	);	$sql = 'INSERT INTO ' . REPORTS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);	$db->sql_query($sql);	$report_id = $db->sql_nextid();	if ($post_id)	{		$sql = 'UPDATE ' . POSTS_TABLE . '			SET post_reported = 1			WHERE post_id = ' . $post_id;		$db->sql_query($sql);		if (!$report_data['topic_reported'])		{			$sql = 'UPDATE ' . TOPICS_TABLE . '				SET topic_reported = 1				WHERE topic_id = ' . $report_data['topic_id'] . '					OR topic_moved_id = ' . $report_data['topic_id'];			$db->sql_query($sql);		}		$lang_return = $user->lang['RETURN_TOPIC'];		$lang_success = $user->lang['POST_REPORTED_SUCCESS'];	}	else	{		$sql = 'UPDATE ' . PRIVMSGS_TABLE . '			SET message_reported = 1			WHERE msg_id = ' . $pm_id;		$db->sql_query($sql);		$sql_ary = array(			'msg_id'		=> $pm_id,			'user_id'		=> ANONYMOUS,			'author_id'		=> (int) $report_data['author_id'],			'pm_deleted'	=> 0,			'pm_new'		=> 0,			'pm_unread'		=> 0,			'pm_replied'	=> 0,			'pm_marked'		=> 0,			'pm_forwarded'	=> 0,			'folder_id'		=> PRIVMSGS_INBOX,		);		$sql = 'INSERT INTO ' . PRIVMSGS_TO_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);		$db->sql_query($sql);		$lang_return = $user->lang['RETURN_PM'];		$lang_success = $user->lang['PM_REPORTED_SUCCESS'];	}	meta_refresh(3, $redirect_url);	$message = $lang_success . '<br /><br />' . sprintf($lang_return, '<a href="' . $redirect_url . '">', '</a>');	if ($return_forum_url)	{		$message .= '<br /><br />' . sprintf($user->lang['RETURN_FORUM'], '<a href="' . $return_forum_url . '">', '</a>');	}	trigger_error($message);}// Generate the reasonsdisplay_reasons($reason_id);$page_title = ($pm_id) ? $user->lang['REPORT_MESSAGE'] : $user->lang['REPORT_POST'];$template->assign_vars(array(	'S_REPORT_POST'		=> ($pm_id) ? false : true,	'REPORT_TEXT'		=> $report_text,	'S_REPORT_ACTION'	=> append_sid("{$phpbb_root_path}report.$phpEx", 'f=' . $forum_id . '&amp;p=' . $post_id . '&amp;pm=' . $pm_id),	'S_NOTIFY'			=> $user_notify,	'S_CAN_NOTIFY'		=> ($user->data['is_registered']) ? true : false));generate_forum_nav($forum_data);// Start output of pagepage_header($page_title);$template->set_filenames(array(	'body' => 'report_body.html'));page_footer();?>
<?php/**** @package diff* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Code from pear.php.net, Text_Diff-1.1.0 package* http://pear.php.net/package/Text_Diff/ (native engine)** Modified by phpBB Group to meet our coding standards* and being able to integrate into phpBB** Class used internally by Text_Diff to actually compute the diffs. This* class is implemented using native PHP code.** The algorithm used here is mostly lifted from the perl module* Algorithm::Diff (version 1.06) by Ned Konz, which is available at:* http://www.perl.com/CPAN/authors/id/N/NE/NEDKONZ/Algorithm-Diff-1.06.zip** More ideas are taken from: http://www.ics.uci.edu/~eppstein/161/960229.html** Some ideas (and a bit of code) are taken from analyze.c, of GNU* diffutils-2.7, which can be found at:* ftp://gnudist.gnu.org/pub/gnu/diffutils/diffutils-2.7.tar.gz** Some ideas (subdivision by NCHUNKS > 2, and some optimizations) are from* Geoffrey T. Dairiki <dairiki@dairiki.org>. The original PHP version of this* code was written by him, and is used/adapted with his permission.** Copyright 2004-2008 The Horde Project (http://www.horde.org/)** @author  Geoffrey T. Dairiki <dairiki@dairiki.org>* @package diff** @access private*/class diff_engine{	/**	* If set to true we trim all lines before we compare them. This ensures that sole space/tab changes do not trigger diffs.	*/	var $skip_whitespace_changes = true;	function diff(&$from_lines, &$to_lines, $preserve_cr = true)	{		// Remove empty lines...		// If preserve_cr is true, we basically only change \r\n and bare \r to \n to get the same carriage returns for both files		// If it is false, we try to only use \n once per line and ommit all empty lines to be able to get a proper data diff		if (is_array($from_lines))		{			$from_lines = implode("\n", $from_lines);		}		if (is_array($to_lines))		{			$to_lines = implode("\n", $to_lines);		}		if ($preserve_cr)		{			$from_lines = explode("\n", str_replace("\r", "\n", str_replace("\r\n", "\n", $from_lines)));			$to_lines = explode("\n", str_replace("\r", "\n", str_replace("\r\n", "\n", $to_lines)));		}		else		{			$from_lines = explode("\n", preg_replace('#[\n\r]+#', "\n", $from_lines));			$to_lines = explode("\n", preg_replace('#[\n\r]+#', "\n", $to_lines));		}		$n_from = sizeof($from_lines);		$n_to = sizeof($to_lines);		$this->xchanged = $this->ychanged = $this->xv = $this->yv = $this->xind = $this->yind = array();		unset($this->seq, $this->in_seq, $this->lcs);		// Skip leading common lines.		for ($skip = 0; $skip < $n_from && $skip < $n_to; $skip++)		{			if (trim($from_lines[$skip]) !== trim($to_lines[$skip]))			{				break;			}			$this->xchanged[$skip] = $this->ychanged[$skip] = false;		}		// Skip trailing common lines.		$xi = $n_from;		$yi = $n_to;		for ($endskip = 0; --$xi > $skip && --$yi > $skip; $endskip++)		{			if (trim($from_lines[$xi]) !== trim($to_lines[$yi]))			{				break;			}			$this->xchanged[$xi] = $this->ychanged[$yi] = false;		}		// Ignore lines which do not exist in both files.		for ($xi = $skip; $xi < $n_from - $endskip; $xi++)		{			if ($this->skip_whitespace_changes) $xhash[trim($from_lines[$xi])] = 1; else $xhash[$from_lines[$xi]] = 1;		}		for ($yi = $skip; $yi < $n_to - $endskip; $yi++)		{			$line = ($this->skip_whitespace_changes) ? trim($to_lines[$yi]) : $to_lines[$yi];			if (($this->ychanged[$yi] = empty($xhash[$line])))			{				continue;			}			$yhash[$line] = 1;			$this->yv[] = $line;			$this->yind[] = $yi;		}		for ($xi = $skip; $xi < $n_from - $endskip; $xi++)		{			$line = ($this->skip_whitespace_changes) ? trim($from_lines[$xi]) : $from_lines[$xi];			if (($this->xchanged[$xi] = empty($yhash[$line])))			{				continue;			}			$this->xv[] = $line;			$this->xind[] = $xi;		}		// Find the LCS.		$this->_compareseq(0, sizeof($this->xv), 0, sizeof($this->yv));		// Merge edits when possible.		if ($this->skip_whitespace_changes)		{			$from_lines_clean = array_map('trim', $from_lines);			$to_lines_clean = array_map('trim', $to_lines);			$this->_shift_boundaries($from_lines_clean, $this->xchanged, $this->ychanged);			$this->_shift_boundaries($to_lines_clean, $this->ychanged, $this->xchanged);			unset($from_lines_clean, $to_lines_clean);		}		else		{			$this->_shift_boundaries($from_lines, $this->xchanged, $this->ychanged);			$this->_shift_boundaries($to_lines, $this->ychanged, $this->xchanged);		}		// Compute the edit operations.		$edits = array();		$xi = $yi = 0;		while ($xi < $n_from || $yi < $n_to)		{			// Skip matching "snake".			$copy = array();			while ($xi < $n_from && $yi < $n_to && !$this->xchanged[$xi] && !$this->ychanged[$yi])			{				$copy[] = $from_lines[$xi++];				$yi++;			}			if ($copy)			{				$edits[] = new diff_op_copy($copy);			}			// Find deletes & adds.			$delete = array();			while ($xi < $n_from && $this->xchanged[$xi])			{				$delete[] = $from_lines[$xi++];			}			$add = array();			while ($yi < $n_to && $this->ychanged[$yi])			{				$add[] = $to_lines[$yi++];			}			if ($delete && $add)			{				$edits[] = new diff_op_change($delete, $add);			}			else if ($delete)			{				$edits[] = new diff_op_delete($delete);			}			else if ($add)			{				$edits[] = new diff_op_add($add);			}		}		return $edits;	}	/**	* Divides the Largest Common Subsequence (LCS) of the sequences (XOFF,	* XLIM) and (YOFF, YLIM) into NCHUNKS approximately equally sized segments.	*	* Returns (LCS, PTS).  LCS is the length of the LCS. PTS is an array of	* NCHUNKS+1 (X, Y) indexes giving the diving points between sub	* sequences.  The first sub-sequence is contained in (X0, X1), (Y0, Y1),	* the second in (X1, X2), (Y1, Y2) and so on.  Note that (X0, Y0) ==	* (XOFF, YOFF) and (X[NCHUNKS], Y[NCHUNKS]) == (XLIM, YLIM).	*	* This function assumes that the first lines of the specified portions of	* the two files do not match, and likewise that the last lines do not	* match.  The caller must trim matching lines from the beginning and end	* of the portions it is going to specify.	*/	function _diag($xoff, $xlim, $yoff, $ylim, $nchunks)	{		$flip = false;		if ($xlim - $xoff > $ylim - $yoff)		{			// Things seems faster (I'm not sure I understand why) when the shortest sequence is in X.			$flip = true;			list($xoff, $xlim, $yoff, $ylim) = array($yoff, $ylim, $xoff, $xlim);		}		if ($flip)		{			for ($i = $ylim - 1; $i >= $yoff; $i--)			{				$ymatches[$this->xv[$i]][] = $i;			}		}		else		{			for ($i = $ylim - 1; $i >= $yoff; $i--)			{				$ymatches[$this->yv[$i]][] = $i;			}		}		$this->lcs = 0;		$this->seq[0]= $yoff - 1;		$this->in_seq = array();		$ymids[0] = array();		$numer = $xlim - $xoff + $nchunks - 1;		$x = $xoff;		for ($chunk = 0; $chunk < $nchunks; $chunk++)		{			if ($chunk > 0)			{				for ($i = 0; $i <= $this->lcs; $i++)				{					$ymids[$i][$chunk - 1] = $this->seq[$i];				}			}			$x1 = $xoff + (int)(($numer + ($xlim - $xoff) * $chunk) / $nchunks);			for (; $x < $x1; $x++)			{				$line = $flip ? $this->yv[$x] : $this->xv[$x];				if (empty($ymatches[$line]))				{					continue;				}				$matches = $ymatches[$line];				reset($matches);				while (list(, $y) = each($matches))				{					if (empty($this->in_seq[$y]))					{						$k = $this->_lcs_pos($y);						$ymids[$k] = $ymids[$k - 1];						break;					}				}				// no reset() here				while (list(, $y) = each($matches))				{					if ($y > $this->seq[$k - 1])					{						// Optimization: this is a common case: next match is just replacing previous match.						$this->in_seq[$this->seq[$k]] = false;						$this->seq[$k] = $y;						$this->in_seq[$y] = 1;					}					else if (empty($this->in_seq[$y]))					{						$k = $this->_lcs_pos($y);						$ymids[$k] = $ymids[$k - 1];					}				}			}		}		$seps[] = $flip ? array($yoff, $xoff) : array($xoff, $yoff);		$ymid = $ymids[$this->lcs];		for ($n = 0; $n < $nchunks - 1; $n++)		{			$x1 = $xoff + (int)(($numer + ($xlim - $xoff) * $n) / $nchunks);			$y1 = $ymid[$n] + 1;			$seps[] = $flip ? array($y1, $x1) : array($x1, $y1);		}		$seps[] = $flip ? array($ylim, $xlim) : array($xlim, $ylim);		return array($this->lcs, $seps);	}	function _lcs_pos($ypos)	{		$end = $this->lcs;		if ($end == 0 || $ypos > $this->seq[$end])		{			$this->seq[++$this->lcs] = $ypos;			$this->in_seq[$ypos] = 1;			return $this->lcs;		}		$beg = 1;		while ($beg < $end)		{			$mid = (int)(($beg + $end) / 2);			if ($ypos > $this->seq[$mid])			{				$beg = $mid + 1;			}			else			{				$end = $mid;			}		}		$this->in_seq[$this->seq[$end]] = false;		$this->seq[$end] = $ypos;		$this->in_seq[$ypos] = 1;		return $end;	}	/**	* Finds LCS of two sequences.	*	* The results are recorded in the vectors $this->{x,y}changed[], by	* storing a 1 in the element for each line that is an insertion or	* deletion (ie. is not in the LCS).	*	* The subsequence of file 0 is (XOFF, XLIM) and likewise for file 1.	*	* Note that XLIM, YLIM are exclusive bounds.  All line numbers are	* origin-0 and discarded lines are not counted.	*/	function _compareseq($xoff, $xlim, $yoff, $ylim)	{		// Slide down the bottom initial diagonal.		while ($xoff < $xlim && $yoff < $ylim && $this->xv[$xoff] == $this->yv[$yoff])		{			++$xoff;			++$yoff;		}		// Slide up the top initial diagonal.		while ($xlim > $xoff && $ylim > $yoff && $this->xv[$xlim - 1] == $this->yv[$ylim - 1])		{			--$xlim;			--$ylim;		}		if ($xoff == $xlim || $yoff == $ylim)		{			$lcs = 0;		}		else		{			// This is ad hoc but seems to work well.			// $nchunks = sqrt(min($xlim - $xoff, $ylim - $yoff) / 2.5);			// $nchunks = max(2,min(8,(int)$nchunks));			$nchunks = min(7, $xlim - $xoff, $ylim - $yoff) + 1;			list($lcs, $seps) = $this->_diag($xoff, $xlim, $yoff, $ylim, $nchunks);		}		if ($lcs == 0)		{			// X and Y sequences have no common subsequence: mark all changed.			while ($yoff < $ylim)			{				$this->ychanged[$this->yind[$yoff++]] = 1;			}			while ($xoff < $xlim)			{				$this->xchanged[$this->xind[$xoff++]] = 1;			}		}		else		{			// Use the partitions to split this problem into subproblems.			reset($seps);			$pt1 = $seps[0];			while ($pt2 = next($seps))			{				$this->_compareseq($pt1[0], $pt2[0], $pt1[1], $pt2[1]);				$pt1 = $pt2;			}		}	}	/**	* Adjusts inserts/deletes of identical lines to join changes as much as possible.	*	* We do something when a run of changed lines include a line at one end	* and has an excluded, identical line at the other.  We are free to	* choose which identical line is included. 'compareseq' usually chooses	* the one at the beginning, but usually it is cleaner to consider the	* following identical line to be the "change".	*	* This is extracted verbatim from analyze.c (GNU diffutils-2.7).	*/	function _shift_boundaries($lines, &$changed, $other_changed)	{		$i = 0;		$j = 0;		$len = sizeof($lines);		$other_len = sizeof($other_changed);		while (1)		{			// Scan forward to find the beginning of another run of			// changes. Also keep track of the corresponding point in the other file.			//			// Throughout this code, $i and $j are adjusted together so that			// the first $i elements of $changed and the first $j elements of			// $other_changed both contain the same number of zeros (unchanged lines).			//			// Furthermore, $j is always kept so that $j == $other_len or $other_changed[$j] == false.			while ($j < $other_len && $other_changed[$j])			{				$j++;			}			while ($i < $len && ! $changed[$i])			{				$i++;				$j++;				while ($j < $other_len && $other_changed[$j])				{					$j++;				}			}			if ($i == $len)			{				break;			}			$start = $i;			// Find the end of this run of changes.			while (++$i < $len && $changed[$i])			{				continue;			}			do			{				// Record the length of this run of changes, so that we can later determine whether the run has grown.				$runlength = $i - $start;				// Move the changed region back, so long as the previous unchanged line matches the last changed one.				// This merges with previous changed regions.				while ($start > 0 && $lines[$start - 1] == $lines[$i - 1])				{					$changed[--$start] = 1;					$changed[--$i] = false;					while ($start > 0 && $changed[$start - 1])					{						$start--;					}					while ($other_changed[--$j])					{						continue;					}				}				// Set CORRESPONDING to the end of the changed run, at the last point where it corresponds to a changed run in the				// other file. CORRESPONDING == LEN means no such point has been found.				$corresponding = $j < $other_len ? $i : $len;				// Move the changed region forward, so long as the first changed line matches the following unchanged one.				// This merges with following changed regions.				// Do this second, so that if there are no merges, the changed region is moved forward as far as possible.				while ($i < $len && $lines[$start] == $lines[$i])				{					$changed[$start++] = false;					$changed[$i++] = 1;					while ($i < $len && $changed[$i])					{						$i++;					}					$j++;					if ($j < $other_len && $other_changed[$j])					{						$corresponding = $i;						while ($j < $other_len && $other_changed[$j])						{							$j++;						}					}				}			}			while ($runlength != $i - $start);			// If possible, move the fully-merged run of changes back to a corresponding run in the other file.			while ($corresponding < $i)			{				$changed[--$start] = 1;				$changed[--$i] = 0;				while ($other_changed[--$j])				{					continue;				}			}		}	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class ucp_main_info{	function module()	{		return array(			'filename'	=> 'ucp_main',			'title'		=> 'UCP_MAIN',			'version'	=> '1.0.0',			'modes'		=> array(				'front'			=> array('title' => 'UCP_MAIN_FRONT', 'auth' => '', 'cat' => array('UCP_MAIN')),				'subscribed'	=> array('title' => 'UCP_MAIN_SUBSCRIBED', 'auth' => '', 'cat' => array('UCP_MAIN')),				'bookmarks'		=> array('title' => 'UCP_MAIN_BOOKMARKS', 'auth' => 'cfg_allow_bookmarks', 'cat' => array('UCP_MAIN')),				'drafts'		=> array('title' => 'UCP_MAIN_DRAFTS', 'auth' => '', 'cat' => array('UCP_MAIN')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2007 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** phpBB Hook Class* @package phpBB3*/class phpbb_hook{	/**	* Registered hooks	*/	var $hooks = array();	/**	* Results returned by functions called	*/	var $hook_result = array();	/**	* internal pointer	*/	var $current_hook = NULL;	/**	* Initialize hook class.	*	* @param array $valid_hooks array containing the hookable functions/methods	*/	function phpbb_hook($valid_hooks)	{		foreach ($valid_hooks as $_null => $method)		{			$this->add_hook($method);		}		if (function_exists('phpbb_hook_register'))		{			phpbb_hook_register($this);		}	}	/**	* Register function/method to be called within hook	* This function is normally called by the modification/application to attach/register the functions.	*	* @param mixed $definition Declaring function (with __FUNCTION__) or class with array(__CLASS__, __FUNCTION__)	* @param mixed $hook The replacement function/method to be called. Passing function name or array with object/class definition	* @param string $mode Specify the priority/chain mode. 'normal' -> hook gets appended to the chain. 'standalone' -> only the specified hook gets called - later hooks are not able to overwrite this (E_NOTICE is triggered then). 'first' -> hook is called as the first one within the chain. 'last' -> hook is called as the last one within the chain.	*/	function register($definition, $hook, $mode = 'normal')	{		$class = (!is_array($definition)) ? '__global' : $definition[0];		$function = (!is_array($definition)) ? $definition : $definition[1];		// Method able to be hooked?		if (isset($this->hooks[$class][$function]))		{			switch ($mode)			{				case 'standalone':					if (!isset($this->hooks[$class][$function]['standalone']))					{						$this->hooks[$class][$function] = array('standalone' => $hook);					}					else					{						trigger_error('Hook not able to be called standalone, previous hook already standalone.', E_NOTICE);					}				break;				case 'first':				case 'last':					$this->hooks[$class][$function][$mode][] = $hook;				break;				case 'normal':				default:					$this->hooks[$class][$function]['normal'][] = $hook;				break;			}		}	}	/**	* Calling all functions/methods attached to a specified hook.	* Called by the function allowing hooks...	*	* @param mixed $definition Declaring function (with __FUNCTION__) or class with array(__CLASS__, __FUNCTION__)	* @return bool False if no hook got executed, true otherwise	*/	function call_hook($definition)	{		$class = (!is_array($definition)) ? '__global' : $definition[0];		$function = (!is_array($definition)) ? $definition : $definition[1];		if (!empty($this->hooks[$class][$function]))		{			// Developer tries to call a hooked function within the hooked function...			if ($this->current_hook !== NULL && $this->current_hook['class'] === $class && $this->current_hook['function'] === $function)			{				return false;			}			// Call the hook with the arguments attached and store result			$arguments = func_get_args();			$this->current_hook = array('class' => $class, 'function' => $function);			$arguments[0] = &$this;			// Call the hook chain...			if (isset($this->hooks[$class][$function]['standalone']))			{				$this->hook_result[$class][$function] = call_user_func_array($this->hooks[$class][$function]['standalone'], $arguments);			}			else			{				foreach (array('first', 'normal', 'last') as $mode)				{					if (!isset($this->hooks[$class][$function][$mode]))					{						continue;					}					foreach ($this->hooks[$class][$function][$mode] as $hook)					{						$this->hook_result[$class][$function] = call_user_func_array($hook, $arguments);					}				}			}			$this->current_hook = NULL;			return true;		}		$this->current_hook = NULL;		return false;	}	/**	* Get result from previously called functions/methods for the same hook	*	* @param mixed $definition Declaring function (with __FUNCTION__) or class with array(__CLASS__, __FUNCTION__)	* @return mixed False if nothing returned if there is no result, else array('result' => ... )	*/	function previous_hook_result($definition)	{		$class = (!is_array($definition)) ? '__global' : $definition[0];		$function = (!is_array($definition)) ? $definition : $definition[1];		if (!empty($this->hooks[$class][$function]) && isset($this->hook_result[$class][$function]))		{			return array('result' => $this->hook_result[$class][$function]);		}		return false;	}	/**	* Check if the called functions/methods returned something.	*	* @param mixed $definition Declaring function (with __FUNCTION__) or class with array(__CLASS__, __FUNCTION__)	* @return bool True if results are there, false if not	*/	function hook_return($definition)	{		$class = (!is_array($definition)) ? '__global' : $definition[0];		$function = (!is_array($definition)) ? $definition : $definition[1];		if (!empty($this->hooks[$class][$function]) && isset($this->hook_result[$class][$function]))		{			return true;		}		return false;	}	/**	* Give actual result from called functions/methods back.	*	* @param mixed $definition Declaring function (with __FUNCTION__) or class with array(__CLASS__, __FUNCTION__)	* @return mixed The result	*/	function hook_return_result($definition)	{		$class = (!is_array($definition)) ? '__global' : $definition[0];		$function = (!is_array($definition)) ? $definition : $definition[1];		if (!empty($this->hooks[$class][$function]) && isset($this->hook_result[$class][$function]))		{			$result = $this->hook_result[$class][$function];			unset($this->hook_result[$class][$function]);			return $result;		}		return;	}	/**	* Add new function to the allowed hooks.	*	* @param mixed $definition Declaring function (with __FUNCTION__) or class with array(__CLASS__, __FUNCTION__)	*/	function add_hook($definition)	{		if (!is_array($definition))		{			$definition = array('__global', $definition);		}		$this->hooks[$definition[0]][$definition[1]] = array();	}	/**	* Remove function from the allowed hooks.	*	* @param mixed $definition Declaring function (with __FUNCTION__) or class with array(__CLASS__, __FUNCTION__)	*/	function remove_hook($definition)	{		$class = (!is_array($definition)) ? '__global' : $definition[0];		$function = (!is_array($definition)) ? $definition : $definition[1];		if (isset($this->hooks[$class][$function]))		{			unset($this->hooks[$class][$function]);			if (isset($this->hook_result[$class][$function]))			{				unset($this->hook_result[$class][$function]);			}		}	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** View message folder* Called from ucp_pm with mode == 'view' && action == 'view_folder'*/function view_folder($id, $mode, $folder_id, $folder){	global $user, $template, $auth, $db, $cache;	global $phpbb_root_path, $config, $phpEx;	$submit_export = (isset($_POST['submit_export'])) ? true : false;	$folder_info = get_pm_from($folder_id, $folder, $user->data['user_id']);	if (!$submit_export)	{		$user->add_lang('viewforum');		// Grab icons		$icons = $cache->obtain_icons();		$color_rows = array('marked', 'replied');		// only show the friend/foe color rows if the module is enabled		$zebra_enabled = false;		$_module = new p_master();		$_module->list_modules('ucp');		$_module->set_active('zebra');		$zebra_enabled = ($_module->active_module === false) ? false : true;		unset($_module);		if ($zebra_enabled)		{			$color_rows = array_merge($color_rows, array('friend', 'foe'));		}		foreach ($color_rows as $var)		{			$template->assign_block_vars('pm_colour_info', array(				'IMG'	=> $user->img("pm_{$var}", ''),				'CLASS'	=> "pm_{$var}_colour",				'LANG'	=> $user->lang[strtoupper($var) . '_MESSAGE'])			);		}		$mark_options = array('mark_important', 'delete_marked');		// Minimise edits		if (!$auth->acl_get('u_pm_delete') && $key = array_search('delete_marked', $mark_options))		{			unset($mark_options[$key]);		}		$s_mark_options = '';		foreach ($mark_options as $mark_option)		{			$s_mark_options .= '<option value="' . $mark_option . '">' . $user->lang[strtoupper($mark_option)] . '</option>';		}		// We do the folder moving options here too, for template authors to use...		$s_folder_move_options = '';		if ($folder_id != PRIVMSGS_NO_BOX && $folder_id != PRIVMSGS_OUTBOX)		{			foreach ($folder as $f_id => $folder_ary)			{				if ($f_id == PRIVMSGS_OUTBOX || $f_id == PRIVMSGS_SENTBOX || $f_id == $folder_id)				{					continue;				}				$s_folder_move_options .= '<option' . (($f_id != PRIVMSGS_INBOX) ? ' class="sep"' : '') . ' value="' . $f_id . '">';				$s_folder_move_options .= sprintf($user->lang['MOVE_MARKED_TO_FOLDER'], $folder_ary['folder_name']);				$s_folder_move_options .= (($folder_ary['unread_messages']) ? ' [' . $folder_ary['unread_messages'] . '] ' : '') . '</option>';			}		}		$friend = $foe = array();		// Get friends and foes		$sql = 'SELECT *			FROM ' . ZEBRA_TABLE . '			WHERE user_id = ' . $user->data['user_id'];		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$friend[$row['zebra_id']] = $row['friend'];			$foe[$row['zebra_id']] = $row['foe'];		}		$db->sql_freeresult($result);		$template->assign_vars(array(			'S_MARK_OPTIONS'		=> $s_mark_options,			'S_MOVE_MARKED_OPTIONS'	=> $s_folder_move_options)		);		// Okay, lets dump out the page ...		if (sizeof($folder_info['pm_list']))		{			$address_list = array();			// Build Recipient List if in outbox/sentbox - max two additional queries			if ($folder_id == PRIVMSGS_OUTBOX || $folder_id == PRIVMSGS_SENTBOX)			{				$address_list = get_recipient_strings($folder_info['rowset']);			}			foreach ($folder_info['pm_list'] as $message_id)			{				$row = &$folder_info['rowset'][$message_id];				$folder_img = ($row['pm_unread']) ? 'pm_unread' : 'pm_read';				$folder_alt = ($row['pm_unread']) ? 'NEW_MESSAGES' : 'NO_NEW_MESSAGES';				// Generate all URIs ...				$view_message_url = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=$id&amp;mode=view&amp;f=$folder_id&amp;p=$message_id");				$remove_message_url = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=$id&amp;mode=compose&amp;action=delete&amp;p=$message_id");				$row_indicator = '';				foreach ($color_rows as $var)				{					if (($var != 'friend' && $var != 'foe' && $row['pm_' . $var])						||						(($var == 'friend' || $var == 'foe') && isset(${$var}[$row['author_id']]) && ${$var}[$row['author_id']]))					{						$row_indicator = $var;						break;					}				}				// Send vars to template				$template->assign_block_vars('messagerow', array(					'PM_CLASS'			=> ($row_indicator) ? 'pm_' . $row_indicator . '_colour' : '',					'MESSAGE_AUTHOR_FULL'		=> get_username_string('full', $row['author_id'], $row['username'], $row['user_colour'], $row['username']),					'MESSAGE_AUTHOR_COLOUR'		=> get_username_string('colour', $row['author_id'], $row['username'], $row['user_colour'], $row['username']),					'MESSAGE_AUTHOR'			=> get_username_string('username', $row['author_id'], $row['username'], $row['user_colour'], $row['username']),					'U_MESSAGE_AUTHOR'			=> get_username_string('profile', $row['author_id'], $row['username'], $row['user_colour'], $row['username']),					'FOLDER_ID'			=> $folder_id,					'MESSAGE_ID'		=> $message_id,					'SENT_TIME'			=> $user->format_date($row['message_time']),					'SUBJECT'			=> censor_text($row['message_subject']),					'FOLDER'			=> (isset($folder[$row['folder_id']])) ? $folder[$row['folder_id']]['folder_name'] : '',					'U_FOLDER'			=> (isset($folder[$row['folder_id']])) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'folder=' . $row['folder_id']) : '',					'PM_ICON_IMG'		=> (!empty($icons[$row['icon_id']])) ? '<img src="' . $config['icons_path'] . '/' . $icons[$row['icon_id']]['img'] . '" width="' . $icons[$row['icon_id']]['width'] . '" height="' . $icons[$row['icon_id']]['height'] . '" alt="" title="" />' : '',					'PM_ICON_URL'		=> (!empty($icons[$row['icon_id']])) ? $config['icons_path'] . '/' . $icons[$row['icon_id']]['img'] : '',					'FOLDER_IMG'		=> $user->img($folder_img, $folder_alt),					'FOLDER_IMG_SRC'	=> $user->img($folder_img, $folder_alt, false, '', 'src'),					'PM_IMG'			=> ($row_indicator) ? $user->img('pm_' . $row_indicator, '') : '',					'ATTACH_ICON_IMG'	=> ($auth->acl_get('u_pm_download') && $row['message_attachment'] && $config['allow_pm_attach']) ? $user->img('icon_topic_attach', $user->lang['TOTAL_ATTACHMENTS']) : '',					'S_PM_UNREAD'		=> ($row['pm_unread']) ? true : false,					'S_PM_DELETED'		=> ($row['pm_deleted']) ? true : false,					'S_PM_REPORTED'		=> (isset($row['report_id'])) ? true : false,					'S_AUTHOR_DELETED'	=> ($row['author_id'] == ANONYMOUS) ? true : false,					'U_VIEW_PM'			=> ($row['pm_deleted']) ? '' : $view_message_url,					'U_REMOVE_PM'		=> ($row['pm_deleted']) ? $remove_message_url : '',					'U_MCP_REPORT'		=> (isset($row['report_id'])) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=pm_reports&amp;mode=pm_report_details&amp;r=' . $row['report_id']) : '',					'RECIPIENTS'		=> ($folder_id == PRIVMSGS_OUTBOX || $folder_id == PRIVMSGS_SENTBOX) ? implode(', ', $address_list[$message_id]) : '')				);			}			unset($folder_info['rowset']);			$template->assign_vars(array(				'S_SHOW_RECIPIENTS'		=> ($folder_id == PRIVMSGS_OUTBOX || $folder_id == PRIVMSGS_SENTBOX) ? true : false,				'S_SHOW_COLOUR_LEGEND'	=> true,				'REPORTED_IMG'			=> $user->img('icon_topic_reported', 'PM_REPORTED'),				'S_PM_ICONS'			=> ($config['enable_pm_icons']) ? true : false)			);		}	}	else	{		$export_type = request_var('export_option', '');		$enclosure = request_var('enclosure', '');		$delimiter = request_var('delimiter', '');		if ($export_type == 'CSV' && ($delimiter === '' || $enclosure === ''))		{			$template->assign_var('PROMPT', true);		}		else		{			// Build Recipient List if in outbox/sentbox			$address_temp = $address = $data = array();			if ($folder_id == PRIVMSGS_OUTBOX || $folder_id == PRIVMSGS_SENTBOX)			{				foreach ($folder_info['rowset'] as $message_id => $row)				{					$address_temp[$message_id] = rebuild_header(array('to' => $row['to_address'], 'bcc' => $row['bcc_address']));					$address[$message_id] = array();				}			}			foreach ($folder_info['pm_list'] as $message_id)			{				$row = &$folder_info['rowset'][$message_id];				include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);				$sql = 'SELECT p.message_text, p.bbcode_uid					FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p, ' . USERS_TABLE . ' u					WHERE t.user_id = ' . $user->data['user_id'] . "						AND p.author_id = u.user_id						AND t.folder_id = $folder_id						AND t.msg_id = p.msg_id						AND p.msg_id = $message_id";				$result = $db->sql_query_limit($sql, 1);				$message_row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$_types = array('u', 'g');				foreach ($_types as $ug_type)				{					if (isset($address_temp[$message_id][$ug_type]) && sizeof($address_temp[$message_id][$ug_type]))					{						if (!isset($address[$message_id][$ug_type]))						{							$address[$message_id][$ug_type] = array();						}						if ($ug_type == 'u')						{							$sql = 'SELECT user_id as id, username as name								FROM ' . USERS_TABLE . '								WHERE ';						}						else						{							$sql = 'SELECT group_id as id, group_name as name								FROM ' . GROUPS_TABLE . '								WHERE ';						}						$sql .= $db->sql_in_set(($ug_type == 'u') ? 'user_id' : 'group_id', array_map('intval', array_keys($address_temp[$message_id][$ug_type])));						$result = $db->sql_query($sql);						while ($info_row = $db->sql_fetchrow($result))						{							$address[$message_id][$ug_type][$address_temp[$message_id][$ug_type][$info_row['id']]][] = $info_row['name'];							unset($address_temp[$message_id][$ug_type][$info_row['id']]);						}						$db->sql_freeresult($result);					}				}				// There is the chance that all recipients of the message got deleted. To avoid creating 				// exports without recipients, we add a bogus "undisclosed recipient".				if (!(isset($address[$message_id]['g']) && sizeof($address[$message_id]['g'])) && 				    !(isset($address[$message_id]['u']) && sizeof($address[$message_id]['u'])))				{					$address[$message_id]['u'] = array();					$address[$message_id]['u']['to'] = array();					$address[$message_id]['u']['to'][] = $user->lang['UNDISCLOSED_RECIPIENT'];				}				decode_message($message_row['message_text'], $message_row['bbcode_uid']);								$data[] = array(					'subject'	=> censor_text($row['message_subject']),					'sender'	=> $row['username'],					// ISO 8601 date. For PHP4 we are able to hardcode the timezone because $user->format_date() does not set it.					'date'		=> $user->format_date($row['message_time'], (PHP_VERSION >= 5) ? 'c' : "Y-m-d\TH:i:s+00:00", true),					'to'		=> ($folder_id == PRIVMSGS_OUTBOX || $folder_id == PRIVMSGS_SENTBOX) ? $address[$message_id] : '',					'message'	=> $message_row['message_text']				);			}			switch ($export_type)			{				case 'CSV':				case 'CSV_EXCEL':					$mimetype = 'text/csv';					$filetype = 'csv';					if ($export_type == 'CSV_EXCEL')					{						$enclosure = '"';						$delimiter = ',';						$newline = "\r\n";					}					else					{						$newline = "\n";					}					$string = '';					foreach ($data as $value)					{						$recipients = $value['to'];						$value['to'] = $value['bcc'] = '';						if (is_array($recipients))						{							foreach ($recipients as $values)							{								$value['bcc'] .= (isset($values['bcc']) && is_array($values['bcc'])) ? ',' . implode(',', $values['bcc']) : '';								$value['to'] .= (isset($values['to']) && is_array($values['to'])) ? ',' . implode(',', $values['to']) : '';							}							// Remove the commas which will appear before the first entry.							$value['to'] = substr($value['to'], 1);							$value['bcc'] = substr($value['bcc'], 1);						}						foreach ($value as $tag => $text)						{							$cell = str_replace($enclosure, $enclosure . $enclosure, $text);							if (strpos($cell, $enclosure) !== false || strpos($cell, $delimiter) !== false || strpos($cell, $newline) !== false)							{								$string .= $enclosure . $text . $enclosure . $delimiter;							}							else							{								$string .= $cell . $delimiter;							}						}						$string = substr($string, 0, -1) . $newline;					}				break;				case 'XML':					$mimetype = 'application/xml';					$filetype = 'xml';					$string = '<?xml version="1.0"?>' . "\n";					$string .= "<phpbb>\n";					foreach ($data as $value)					{						$string .= "\t<privmsg>\n";						if (is_array($value['to']))						{							foreach ($value['to'] as $key => $values)							{								foreach ($values as $type => $types)								{									foreach ($types as $name)									{										$string .= "\t\t<recipient type=\"$type\" status=\"$key\">$name</recipient>\n";									}								}							}						}						unset($value['to']);						foreach ($value as $tag => $text)						{							$string .= "\t\t<$tag>$text</$tag>\n";						}						$string .= "\t</privmsg>\n";					}					$string .= '</phpbb>';				break;			}			header('Pragma: no-cache');			header("Content-Type: $mimetype; name=\"data.$filetype\"");			header("Content-disposition: attachment; filename=data.$filetype");			echo $string;			exit;		}	}}/*** Get Messages from folder/user*/function get_pm_from($folder_id, $folder, $user_id){	global $user, $db, $template, $config, $auth, $phpbb_root_path, $phpEx;	$start = request_var('start', 0);	// Additional vars later, pm ordering is mostly different from post ordering. :/	$sort_days	= request_var('st', 0);	$sort_key	= request_var('sk', 't');	$sort_dir	= request_var('sd', 'd');	// PM ordering options	$limit_days = array(0 => $user->lang['ALL_MESSAGES'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);	// No sort by Author for sentbox/outbox (already only author available)	// Also, sort by msg_id for the time - private messages are not as prone to errors as posts are.	if ($folder_id == PRIVMSGS_OUTBOX || $folder_id == PRIVMSGS_SENTBOX)	{		$sort_by_text = array('t' => $user->lang['POST_TIME'], 's' => $user->lang['SUBJECT']);		$sort_by_sql = array('t' => 'p.message_time', 's' => array('p.message_subject', 'p.message_time'));	}	else	{		$sort_by_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 's' => $user->lang['SUBJECT']);		$sort_by_sql = array('a' => array('u.username_clean', 'p.message_time'), 't' => 'p.message_time', 's' => array('p.message_subject', 'p.message_time'));	}	$s_limit_days = $s_sort_key = $s_sort_dir = $u_sort_param = '';	gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);	$folder_sql = 't.folder_id = ' . (int) $folder_id;	// Limit pms to certain time frame, obtain correct pm count	if ($sort_days)	{		$min_post_time = time() - ($sort_days * 86400);		if (isset($_POST['sort']))		{			$start = 0;		}		$sql = 'SELECT COUNT(t.msg_id) AS pm_count			FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . " p			WHERE $folder_sql				AND t.user_id = $user_id				AND t.msg_id = p.msg_id				AND p.message_time >= $min_post_time";		$result = $db->sql_query_limit($sql, 1);		$pm_count = (int) $db->sql_fetchfield('pm_count');		$db->sql_freeresult($result);		$sql_limit_time = "AND p.message_time >= $min_post_time";	}	else	{		$pm_count = (!empty($folder[$folder_id]['num_messages'])) ? $folder[$folder_id]['num_messages'] : 0;		$sql_limit_time = '';	}	$template->assign_vars(array(		'PAGINATION'		=> generate_pagination(append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&amp;mode=view&amp;action=view_folder&amp;f=$folder_id&amp;$u_sort_param"), $pm_count, $config['topics_per_page'], $start),		'PAGE_NUMBER'		=> on_page($pm_count, $config['topics_per_page'], $start),		'TOTAL_MESSAGES'	=> (($pm_count == 1) ? $user->lang['VIEW_PM_MESSAGE'] : sprintf($user->lang['VIEW_PM_MESSAGES'], $pm_count)),		'POST_IMG'		=> (!$auth->acl_get('u_sendpm')) ? $user->img('button_topic_locked', 'POST_PM_LOCKED') : $user->img('button_pm_new', 'POST_NEW_PM'),		'S_NO_AUTH_SEND_MESSAGE'	=> !$auth->acl_get('u_sendpm'),		'S_SELECT_SORT_DIR'		=> $s_sort_dir,		'S_SELECT_SORT_KEY'		=> $s_sort_key,		'S_SELECT_SORT_DAYS'	=> $s_limit_days,		'S_TOPIC_ICONS'			=> ($config['enable_pm_icons']) ? true : false,		'U_POST_NEW_TOPIC'	=> ($auth->acl_get('u_sendpm')) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=compose') : '',		'S_PM_ACTION'		=> append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&amp;mode=view&amp;action=view_folder&amp;f=$folder_id" . (($start !== 0) ? "&amp;start=$start" : '')),	));	// Grab all pm data	$rowset = $pm_list = array();	// If the user is trying to reach late pages, start searching from the end	$store_reverse = false;	$sql_limit = $config['topics_per_page'];	if ($start > $pm_count / 2)	{		$store_reverse = true;		if ($start + $config['topics_per_page'] > $pm_count)		{			$sql_limit = min($config['topics_per_page'], max(1, $pm_count - $start));		}		// Select the sort order		$direction = ($sort_dir == 'd') ? 'ASC' : 'DESC';		$sql_start = max(0, $pm_count - $sql_limit - $start);	}	else	{		// Select the sort order		$direction = ($sort_dir == 'd') ? 'DESC' : 'ASC';		$sql_start = $start;	}	// Sql sort order	if (is_array($sort_by_sql[$sort_key]))	{		$sql_sort_order = implode(' ' . $direction . ', ', $sort_by_sql[$sort_key]) . ' ' . $direction;	}	else	{		$sql_sort_order = $sort_by_sql[$sort_key] . ' ' . $direction;	}	$sql = 'SELECT t.*, p.root_level, p.message_time, p.message_subject, p.icon_id, p.to_address, p.message_attachment, p.bcc_address, u.username, u.username_clean, u.user_colour, p.message_reported		FROM ' . PRIVMSGS_TO_TABLE . ' t, ' . PRIVMSGS_TABLE . ' p, ' . USERS_TABLE . " u		WHERE t.user_id = $user_id			AND p.author_id = u.user_id			AND $folder_sql			AND t.msg_id = p.msg_id			$sql_limit_time		ORDER BY $sql_sort_order";	$result = $db->sql_query_limit($sql, $sql_limit, $sql_start);	$pm_reported = array();	while ($row = $db->sql_fetchrow($result))	{		$rowset[$row['msg_id']] = $row;		$pm_list[] = $row['msg_id'];		if ($row['message_reported'])		{			$pm_reported[] = $row['msg_id'];		}	}	$db->sql_freeresult($result);	// Fetch the report_ids, if there are any reported pms.	if (!empty($pm_reported) && $auth->acl_getf_global('m_report'))	{		$sql = 'SELECT pm_id, report_id			FROM ' . REPORTS_TABLE . '			WHERE report_closed = 0				AND ' . $db->sql_in_set('pm_id', $pm_reported);		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$rowset[$row['pm_id']]['report_id'] = $row['report_id'];		}		$db->sql_freeresult($result);	}	$pm_list = ($store_reverse) ? array_reverse($pm_list) : $pm_list;	return array(		'pm_count'	=> $pm_count,		'pm_list'	=> $pm_list,		'rowset'	=> $rowset	);}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ucp_attachments* User attachments* @package ucp*/class ucp_attachments{	var $u_action;	function main($id, $mode)	{		global $template, $user, $db, $config, $phpEx, $phpbb_root_path;		$start		= request_var('start', 0);		$sort_key	= request_var('sk', 'a');		$sort_dir	= request_var('sd', 'a');		$delete		= (isset($_POST['delete'])) ? true : false;		$confirm	= (isset($_POST['confirm'])) ? true : false;		$delete_ids	= array_keys(request_var('attachment', array(0)));		if ($delete && sizeof($delete_ids))		{			// Validate $delete_ids...			$sql = 'SELECT attach_id				FROM ' . ATTACHMENTS_TABLE . '				WHERE poster_id = ' . $user->data['user_id'] . '					AND is_orphan = 0					AND ' . $db->sql_in_set('attach_id', $delete_ids);			$result = $db->sql_query($sql);			$delete_ids = array();			while ($row = $db->sql_fetchrow($result))			{				$delete_ids[] = $row['attach_id'];			}			$db->sql_freeresult($result);		}		if ($delete && sizeof($delete_ids))		{			$s_hidden_fields = array(				'delete'	=> 1			);			foreach ($delete_ids as $attachment_id)			{				$s_hidden_fields['attachment'][$attachment_id] = 1;			}			if (confirm_box(true))			{				if (!function_exists('delete_attachments'))				{					include_once($phpbb_root_path . 'includes/functions_admin.' . $phpEx);				}				delete_attachments('attach', $delete_ids);				meta_refresh(3, $this->u_action);				$message = ((sizeof($delete_ids) == 1) ? $user->lang['ATTACHMENT_DELETED'] : $user->lang['ATTACHMENTS_DELETED']) . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $this->u_action . '">', '</a>');				trigger_error($message);			}			else			{				confirm_box(false, (sizeof($delete_ids) == 1) ? 'DELETE_ATTACHMENT' : 'DELETE_ATTACHMENTS', build_hidden_fields($s_hidden_fields));			}		}		// Select box eventually		$sort_key_text = array('a' => $user->lang['SORT_FILENAME'], 'b' => $user->lang['SORT_COMMENT'], 'c' => $user->lang['SORT_EXTENSION'], 'd' => $user->lang['SORT_SIZE'], 'e' => $user->lang['SORT_DOWNLOADS'], 'f' => $user->lang['SORT_POST_TIME'], 'g' => $user->lang['SORT_TOPIC_TITLE']);		$sort_key_sql = array('a' => 'a.real_filename', 'b' => 'a.attach_comment', 'c' => 'a.extension', 'd' => 'a.filesize', 'e' => 'a.download_count', 'f' => 'a.filetime', 'g' => 't.topic_title');		$sort_dir_text = array('a' => $user->lang['ASCENDING'], 'd' => $user->lang['DESCENDING']);		$s_sort_key = '';		foreach ($sort_key_text as $key => $value)		{			$selected = ($sort_key == $key) ? ' selected="selected"' : '';			$s_sort_key .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';		}		$s_sort_dir = '';		foreach ($sort_dir_text as $key => $value)		{			$selected = ($sort_dir == $key) ? ' selected="selected"' : '';			$s_sort_dir .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';		}		if (!isset($sort_key_sql[$sort_key]))		{			$sort_key = 'a';		}		$order_by = $sort_key_sql[$sort_key] . ' ' . (($sort_dir == 'a') ? 'ASC' : 'DESC');		$sql = 'SELECT COUNT(attach_id) as num_attachments			FROM ' . ATTACHMENTS_TABLE . '			WHERE poster_id = ' . $user->data['user_id'] . '				AND is_orphan = 0';		$result = $db->sql_query($sql);		$num_attachments = $db->sql_fetchfield('num_attachments');		$db->sql_freeresult($result);		$sql = 'SELECT a.*, t.topic_title, p.message_subject as message_title			FROM ' . ATTACHMENTS_TABLE . ' a				LEFT JOIN ' . TOPICS_TABLE . ' t ON (a.topic_id = t.topic_id AND a.in_message = 0)				LEFT JOIN ' . PRIVMSGS_TABLE . ' p ON (a.post_msg_id = p.msg_id AND a.in_message = 1)			WHERE a.poster_id = ' . $user->data['user_id'] . "				AND a.is_orphan = 0			ORDER BY $order_by";		$result = $db->sql_query_limit($sql, $config['topics_per_page'], $start);		$row_count = 0;		if ($row = $db->sql_fetchrow($result))		{			$template->assign_var('S_ATTACHMENT_ROWS', true);			do			{				if ($row['in_message'])				{					$view_topic = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&amp;p={$row['post_msg_id']}");				}				else				{					$view_topic = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "t={$row['topic_id']}&amp;p={$row['post_msg_id']}") . "#p{$row['post_msg_id']}";				}				$template->assign_block_vars('attachrow', array(					'ROW_NUMBER'		=> $row_count + ($start + 1),					'FILENAME'			=> $row['real_filename'],					'COMMENT'			=> bbcode_nl2br($row['attach_comment']),					'EXTENSION'			=> $row['extension'],					'SIZE'				=> get_formatted_filesize($row['filesize']),					'DOWNLOAD_COUNT'	=> $row['download_count'],					'POST_TIME'			=> $user->format_date($row['filetime']),					'TOPIC_TITLE'		=> ($row['in_message']) ? $row['message_title'] : $row['topic_title'],					'ATTACH_ID'			=> $row['attach_id'],					'POST_ID'			=> $row['post_msg_id'],					'TOPIC_ID'			=> $row['topic_id'],					'S_IN_MESSAGE'		=> $row['in_message'],					'U_VIEW_ATTACHMENT'	=> append_sid("{$phpbb_root_path}download/file.$phpEx", 'id=' . $row['attach_id']),					'U_VIEW_TOPIC'		=> $view_topic)				);				$row_count++;			}			while ($row = $db->sql_fetchrow($result));		}		$db->sql_freeresult($result);		$template->assign_vars(array(			'PAGE_NUMBER'			=> on_page($num_attachments, $config['topics_per_page'], $start),			'PAGINATION'			=> generate_pagination($this->u_action . "&amp;sk=$sort_key&amp;sd=$sort_dir", $num_attachments, $config['topics_per_page'], $start),			'TOTAL_ATTACHMENTS'		=> $num_attachments,			'L_TITLE'				=> $user->lang['UCP_ATTACHMENTS'],			'U_SORT_FILENAME'		=> $this->u_action . "&amp;sk=a&amp;sd=" . (($sort_key == 'a' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_FILE_COMMENT'	=> $this->u_action . "&amp;sk=b&amp;sd=" . (($sort_key == 'b' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_EXTENSION'		=> $this->u_action . "&amp;sk=c&amp;sd=" . (($sort_key == 'c' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_FILESIZE'		=> $this->u_action . "&amp;sk=d&amp;sd=" . (($sort_key == 'd' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_DOWNLOADS'		=> $this->u_action . "&amp;sk=e&amp;sd=" . (($sort_key == 'e' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_POST_TIME'		=> $this->u_action . "&amp;sk=f&amp;sd=" . (($sort_key == 'f' && $sort_dir == 'a') ? 'd' : 'a'),			'U_SORT_TOPIC_TITLE'	=> $this->u_action . "&amp;sk=g&amp;sd=" . (($sort_key == 'g' && $sort_dir == 'a') ? 'd' : 'a'),			'S_DISPLAY_MARK_ALL'	=> ($num_attachments) ? true : false,			'S_DISPLAY_PAGINATION'	=> ($num_attachments) ? true : false,			'S_UCP_ACTION'			=> $this->u_action,			'S_SORT_OPTIONS' 		=> $s_sort_key,			'S_ORDER_SELECT'		=> $s_sort_dir)		);		$this->tpl_name = 'ucp_attachments';		$this->page_title = 'UCP_ATTACHMENTS';	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group, sections (c) 2001 ispi of Lincoln Inc* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Base Template class.* @package phpBB3*/class template{	/** variable that holds all the data we'll be substituting into	* the compiled templates. Takes form:	* --> $this->_tpldata[block][iteration#][child][iteration#][child2][iteration#][variablename] == value	* if it's a root-level variable, it'll be like this:	* --> $this->_tpldata[.][0][varname] == value	*/	var $_tpldata = array('.' => array(0 => array()));	var $_rootref;	// Root dir and hash of filenames for each template handle.	var $root = '';	var $cachepath = '';	var $files = array();	var $filename = array();	var $files_inherit = array();	var $files_template = array();	var $inherit_root = '';	var $orig_tpl_storedb;	var $orig_tpl_inherits_id;	// this will hash handle names to the compiled/uncompiled code for that handle.	var $compiled_code = array();	/**	* Set template location	* @access public	*/	function set_template()	{		global $phpbb_root_path, $user;		if (file_exists($phpbb_root_path . 'styles/' . $user->theme['template_path'] . '/template'))		{			$this->root = $phpbb_root_path . 'styles/' . $user->theme['template_path'] . '/template';			$this->cachepath = $phpbb_root_path . 'cache/tpl_' . str_replace('_', '-', $user->theme['template_path']) . '_';			if ($this->orig_tpl_storedb === null)			{				$this->orig_tpl_storedb = $user->theme['template_storedb'];			}			if ($this->orig_tpl_inherits_id === null)			{				$this->orig_tpl_inherits_id = $user->theme['template_inherits_id'];			}			$user->theme['template_storedb'] = $this->orig_tpl_storedb;			$user->theme['template_inherits_id'] = $this->orig_tpl_inherits_id;			if ($user->theme['template_inherits_id'])			{				$this->inherit_root = $phpbb_root_path . 'styles/' . $user->theme['template_inherit_path'] . '/template';			}		}		else		{			trigger_error('Template path could not be found: styles/' . $user->theme['template_path'] . '/template', E_USER_ERROR);		}		$this->_rootref = &$this->_tpldata['.'][0];		return true;	}	/**	* Set custom template location (able to use directory outside of phpBB)	* @access public	*/	function set_custom_template($template_path, $template_name, $fallback_template_path = false)	{		global $phpbb_root_path, $user;		// Make sure $template_path has no ending slash		if (substr($template_path, -1) == '/')		{			$template_path = substr($template_path, 0, -1);		}		$this->root = $template_path;		$this->cachepath = $phpbb_root_path . 'cache/ctpl_' . str_replace('_', '-', $template_name) . '_';		if ($fallback_template_path !== false)		{			if (substr($fallback_template_path, -1) == '/')			{				$fallback_template_path = substr($fallback_template_path, 0, -1);			}			$this->inherit_root = $fallback_template_path;			$this->orig_tpl_inherits_id = true;		}		else		{			$this->orig_tpl_inherits_id = false;		}		// the database does not store the path or name of a custom template		// so there is no way we can properly store custom templates there		$this->orig_tpl_storedb = false;		$this->_rootref = &$this->_tpldata['.'][0];		return true;	}	/**	* Sets the template filenames for handles. $filename_array	* should be a hash of handle => filename pairs.	* @access public	*/	function set_filenames($filename_array)	{		if (!is_array($filename_array))		{			return false;		}		foreach ($filename_array as $handle => $filename)		{			if (empty($filename))			{				trigger_error("template->set_filenames: Empty filename specified for $handle", E_USER_ERROR);			}			$this->filename[$handle] = $filename;			$this->files[$handle] = $this->root . '/' . $filename;			if ($this->inherit_root)			{				$this->files_inherit[$handle] = $this->inherit_root . '/' . $filename;			}		}		return true;	}	/**	* Destroy template data set	* @access public	*/	function destroy()	{		$this->_tpldata = array('.' => array(0 => array()));		$this->_rootref = &$this->_tpldata['.'][0];	}	/**	* Reset/empty complete block	* @access public	*/	function destroy_block_vars($blockname)	{		if (strpos($blockname, '.') !== false)		{			// Nested block.			$blocks = explode('.', $blockname);			$blockcount = sizeof($blocks) - 1;			$str = &$this->_tpldata;			for ($i = 0; $i < $blockcount; $i++)			{				$str = &$str[$blocks[$i]];				$str = &$str[sizeof($str) - 1];			}			unset($str[$blocks[$blockcount]]);		}		else		{			// Top-level block.			unset($this->_tpldata[$blockname]);		}		return true;	}	/**	* Display handle	* @access public	*/	function display($handle, $include_once = true)	{		global $user, $phpbb_hook;		if (!empty($phpbb_hook) && $phpbb_hook->call_hook(array(__CLASS__, __FUNCTION__), $handle, $include_once, $this))		{			if ($phpbb_hook->hook_return(array(__CLASS__, __FUNCTION__)))			{				return $phpbb_hook->hook_return_result(array(__CLASS__, __FUNCTION__));			}		}		if (defined('IN_ERROR_HANDLER'))		{			if ((E_NOTICE & error_reporting()) == E_NOTICE)			{				error_reporting(error_reporting() ^ E_NOTICE);			}		}		if ($filename = $this->_tpl_load($handle))		{			($include_once) ? include_once($filename) : include($filename);		}		else		{			eval(' ?>' . $this->compiled_code[$handle] . '<?php ');		}		return true;	}	/**	* Display the handle and assign the output to a template variable or return the compiled result.	* @access public	*/	function assign_display($handle, $template_var = '', $return_content = true, $include_once = false)	{		ob_start();		$this->display($handle, $include_once);		$contents = ob_get_clean();		if ($return_content)		{			return $contents;		}		$this->assign_var($template_var, $contents);		return true;	}	/**	* Load a compiled template if possible, if not, recompile it	* @access private	*/	function _tpl_load(&$handle)	{		global $user, $phpEx, $config;		if (!isset($this->filename[$handle]))		{			trigger_error("template->_tpl_load(): No file specified for handle $handle", E_USER_ERROR);		}		// reload these settings to have the values they had when this object was initialised		// using set_template or set_custom_template, they might otherwise have been overwritten		// by other template class instances in between.		$user->theme['template_storedb'] = $this->orig_tpl_storedb;		$user->theme['template_inherits_id'] = $this->orig_tpl_inherits_id;		$filename = $this->cachepath . str_replace('/', '.', $this->filename[$handle]) . '.' . $phpEx;		$this->files_template[$handle] = (isset($user->theme['template_id'])) ? $user->theme['template_id'] : 0;		$recompile = false;		if (!file_exists($filename) || @filesize($filename) === 0 || defined('DEBUG_EXTRA'))		{			$recompile = true;		}		else if ($config['load_tplcompile'])		{			// No way around it: we need to check inheritance here			if ($user->theme['template_inherits_id'] && !file_exists($this->files[$handle]))			{				$this->files[$handle] = $this->files_inherit[$handle];				$this->files_template[$handle] = $user->theme['template_inherits_id'];			}			$recompile = (@filemtime($filename) < filemtime($this->files[$handle])) ? true : false;		}		// Recompile page if the original template is newer, otherwise load the compiled version		if (!$recompile)		{			return $filename;		}		global $db, $phpbb_root_path;		if (!class_exists('template_compile'))		{			include($phpbb_root_path . 'includes/functions_template.' . $phpEx);		}		// Inheritance - we point to another template file for this one. Equality is also used for store_db		if (isset($user->theme['template_inherits_id']) && $user->theme['template_inherits_id'] && !file_exists($this->files[$handle]))		{			$this->files[$handle] = $this->files_inherit[$handle];			$this->files_template[$handle] = $user->theme['template_inherits_id'];		}		$compile = new template_compile($this);		// If we don't have a file assigned to this handle, die.		if (!isset($this->files[$handle]))		{			trigger_error("template->_tpl_load(): No file specified for handle $handle", E_USER_ERROR);		}		// Just compile if no user object is present (happens within the installer)		if (!$user)		{			$compile->_tpl_load_file($handle);			return false;		}		if (isset($user->theme['template_storedb']) && $user->theme['template_storedb'])		{			$rows = array();			$ids = array();			// Inheritance			if (isset($user->theme['template_inherits_id']) && $user->theme['template_inherits_id'])			{				$ids[] = $user->theme['template_inherits_id'];			}			$ids[] = $user->theme['template_id'];			foreach ($ids as $id)			{				$sql = 'SELECT *				FROM ' . STYLES_TEMPLATE_DATA_TABLE . '				WHERE template_id = ' . $id . "					AND (template_filename = '" . $db->sql_escape($this->filename[$handle]) . "'						OR template_included " . $db->sql_like_expression($db->any_char . $this->filename[$handle] . ':' . $db->any_char) . ')';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$rows[$row['template_filename']] = $row;				}				$db->sql_freeresult($result);			}			if (sizeof($rows))			{				foreach ($rows as $row)				{					$file = $this->root . '/' . $row['template_filename'];					$force_reload = false;					if ($row['template_id'] != $user->theme['template_id'])					{						// make sure that we are not overlooking a file not in the db yet						if (isset($user->theme['template_inherits_id']) && $user->theme['template_inherits_id'] && !file_exists($file))						{							$file = $this->inherit_root . '/' . $row['template_filename'];							$this->files[$row['template_filename']] = $file;							$this->files_inherit[$row['template_filename']] = $file;							$this->files_template[$row['template_filename']] = $user->theme['template_inherits_id'];						}						else if (isset($user->theme['template_inherits_id']) && $user->theme['template_inherits_id'])						{							// Ok, we have a situation. There is a file in the subtemplate, but nothing in the DB. We have to fix that.							$force_reload = true;							$this->files_template[$row['template_filename']] = $user->theme['template_inherits_id'];						}					}					else					{						$this->files_template[$row['template_filename']] = $user->theme['template_id'];					}					if ($force_reload || $row['template_mtime'] < filemtime($file))					{						if ($row['template_filename'] == $this->filename[$handle])						{							$compile->_tpl_load_file($handle, true);						}						else						{							$this->files[$row['template_filename']] = $file;							$this->filename[$row['template_filename']] = $row['template_filename'];							$compile->_tpl_load_file($row['template_filename'], true);							unset($this->compiled_code[$row['template_filename']]);							unset($this->files[$row['template_filename']]);							unset($this->filename[$row['template_filename']]);						}					}					if ($row['template_filename'] == $this->filename[$handle])					{						$this->compiled_code[$handle] = $compile->compile(trim($row['template_data']));						$compile->compile_write($handle, $this->compiled_code[$handle]);					}					else					{						// Only bother compiling if it doesn't already exist						if (!file_exists($this->cachepath . str_replace('/', '.', $row['template_filename']) . '.' . $phpEx))						{							$this->filename[$row['template_filename']] = $row['template_filename'];							$compile->compile_write($row['template_filename'], $compile->compile(trim($row['template_data'])));							unset($this->filename[$row['template_filename']]);						}					}				}			}			else			{				$file = $this->root . '/' . $row['template_filename'];				if (isset($user->theme['template_inherits_id']) && $user->theme['template_inherits_id'] && !file_exists($file))				{					$file = $this->inherit_root . '/' . $row['template_filename'];					$this->files[$row['template_filename']] = $file;					$this->files_inherit[$row['template_filename']] = $file;					$this->files_template[$row['template_filename']] = $user->theme['template_inherits_id'];				}				// Try to load from filesystem and instruct to insert into the styles table...				$compile->_tpl_load_file($handle, true);				return false;			}			return false;		}		$compile->_tpl_load_file($handle);		return false;	}	/**	* Assign key variable pairs from an array	* @access public	*/	function assign_vars($vararray)	{		foreach ($vararray as $key => $val)		{			$this->_rootref[$key] = $val;		}		return true;	}	/**	* Assign a single variable to a single key	* @access public	*/	function assign_var($varname, $varval)	{		$this->_rootref[$varname] = $varval;		return true;	}	/**	* Assign key variable pairs from an array to a specified block	* @access public	*/	function assign_block_vars($blockname, $vararray)	{		if (strpos($blockname, '.') !== false)		{			// Nested block.			$blocks = explode('.', $blockname);			$blockcount = sizeof($blocks) - 1;			$str = &$this->_tpldata;			for ($i = 0; $i < $blockcount; $i++)			{				$str = &$str[$blocks[$i]];				$str = &$str[sizeof($str) - 1];			}			$s_row_count = isset($str[$blocks[$blockcount]]) ? sizeof($str[$blocks[$blockcount]]) : 0;			$vararray['S_ROW_COUNT'] = $s_row_count;			// Assign S_FIRST_ROW			if (!$s_row_count)			{				$vararray['S_FIRST_ROW'] = true;			}			// Now the tricky part, we always assign S_LAST_ROW and remove the entry before			// This is much more clever than going through the complete template data on display (phew)			$vararray['S_LAST_ROW'] = true;			if ($s_row_count > 0)			{				unset($str[$blocks[$blockcount]][($s_row_count - 1)]['S_LAST_ROW']);			}			// Now we add the block that we're actually assigning to.			// We're adding a new iteration to this block with the given			// variable assignments.			$str[$blocks[$blockcount]][] = $vararray;		}		else		{			// Top-level block.			$s_row_count = (isset($this->_tpldata[$blockname])) ? sizeof($this->_tpldata[$blockname]) : 0;			$vararray['S_ROW_COUNT'] = $s_row_count;			// Assign S_FIRST_ROW			if (!$s_row_count)			{				$vararray['S_FIRST_ROW'] = true;			}			// We always assign S_LAST_ROW and remove the entry before			$vararray['S_LAST_ROW'] = true;			if ($s_row_count > 0)			{				unset($this->_tpldata[$blockname][($s_row_count - 1)]['S_LAST_ROW']);			}			// Add a new iteration to this block with the variable assignments we were given.			$this->_tpldata[$blockname][] = $vararray;		}		return true;	}	/**	* Change already assigned key variable pair (one-dimensional - single loop entry)	*	* An example of how to use this function:	* {@example alter_block_array.php}	*	* @param	string	$blockname	the blockname, for example 'loop'	* @param	array	$vararray	the var array to insert/add or merge	* @param	mixed	$key		Key to search for	*	* array: KEY => VALUE [the key/value pair to search for within the loop to determine the correct position]	*	* int: Position [the position to change or insert at directly given]	*	* If key is false the position is set to 0	* If key is true the position is set to the last entry	*	* @param	string	$mode		Mode to execute (valid modes are 'insert' and 'change')	*	*	If insert, the vararray is inserted at the given position (position counting from zero).	*	If change, the current block gets merged with the vararray (resulting in new key/value pairs be added and existing keys be replaced by the new value).	*	* Since counting begins by zero, inserting at the last position will result in this array: array(vararray, last positioned array)	* and inserting at position 1 will result in this array: array(first positioned array, vararray, following vars)	*	* @return bool false on error, true on success	* @access public	*/	function alter_block_array($blockname, $vararray, $key = false, $mode = 'insert')	{		if (strpos($blockname, '.') !== false)		{			// Nested blocks are not supported			return false;		}		// Change key to zero (change first position) if false and to last position if true		if ($key === false || $key === true)		{			$key = ($key === false) ? 0 : sizeof($this->_tpldata[$blockname]);		}		// Get correct position if array given		if (is_array($key))		{			// Search array to get correct position			list($search_key, $search_value) = @each($key);			$key = NULL;			foreach ($this->_tpldata[$blockname] as $i => $val_ary)			{				if ($val_ary[$search_key] === $search_value)				{					$key = $i;					break;				}			}			// key/value pair not found			if ($key === NULL)			{				return false;			}		}		// Insert Block		if ($mode == 'insert')		{			// Make sure we are not exceeding the last iteration			if ($key >= sizeof($this->_tpldata[$blockname]))			{				$key = sizeof($this->_tpldata[$blockname]);				unset($this->_tpldata[$blockname][($key - 1)]['S_LAST_ROW']);				$vararray['S_LAST_ROW'] = true;			}			else if ($key === 0)			{				unset($this->_tpldata[$blockname][0]['S_FIRST_ROW']);				$vararray['S_FIRST_ROW'] = true;			}			// Re-position template blocks			for ($i = sizeof($this->_tpldata[$blockname]); $i > $key; $i--)			{				$this->_tpldata[$blockname][$i] = $this->_tpldata[$blockname][$i-1];				$this->_tpldata[$blockname][$i]['S_ROW_COUNT'] = $i;			}			// Insert vararray at given position			$vararray['S_ROW_COUNT'] = $key;			$this->_tpldata[$blockname][$key] = $vararray;			return true;		}		// Which block to change?		if ($mode == 'change')		{			if ($key == sizeof($this->_tpldata[$blockname]))			{				$key--;			}			$this->_tpldata[$blockname][$key] = array_merge($this->_tpldata[$blockname][$key], $vararray);			return true;		}		return false;	}	/**	* Include a separate template	* @access private	*/	function _tpl_include($filename, $include = true)	{		$handle = $filename;		$this->filename[$handle] = $filename;		$this->files[$handle] = $this->root . '/' . $filename;		if ($this->inherit_root)		{			$this->files_inherit[$handle] = $this->inherit_root . '/' . $filename;		}		$filename = $this->_tpl_load($handle);		if ($include)		{			global $user;			if ($filename)			{				include($filename);				return;			}			eval(' ?>' . $this->compiled_code[$handle] . '<?php ');		}	}	/**	* Include a php-file	* @access private	*/	function _php_include($filename)	{		global $phpbb_root_path;		$file = $phpbb_root_path . $filename;		if (!file_exists($file))		{			// trigger_error cannot be used here, as the output already started			echo 'template->_php_include(): File ' . htmlspecialchars($file) . ' does not exist or is empty';			return;		}		include($file);	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class ucp_groups_info{	function module()	{		return array(			'filename'	=> 'ucp_groups',			'title'		=> 'UCP_USERGROUPS',			'version'	=> '1.0.0',			'modes'		=> array(				'membership'	=> array('title' => 'UCP_USERGROUPS_MEMBER', 'auth' => '', 'cat' => array('UCP_USERGROUPS')),				'manage'		=> array('title' => 'UCP_USERGROUPS_MANAGE', 'auth' => '', 'cat' => array('UCP_USERGROUPS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package mcp*/class mcp_ban{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpEx;		include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		// Include the admin banning interface...		include($phpbb_root_path . 'includes/acp/acp_ban.' . $phpEx);		$bansubmit		= (isset($_POST['bansubmit'])) ? true : false;		$unbansubmit	= (isset($_POST['unbansubmit'])) ? true : false;		$current_time	= time();		$user->add_lang(array('acp/ban', 'acp/users'));		$this->tpl_name = 'mcp_ban';		// Ban submitted?		if ($bansubmit)		{			// Grab the list of entries			$ban				= request_var('ban', '', ($mode === 'user') ? true : false);			if ($mode === 'user')			{				$ban = utf8_normalize_nfc($ban);			}			$ban_len			= request_var('banlength', 0);			$ban_len_other		= request_var('banlengthother', '');			$ban_exclude		= request_var('banexclude', 0);			$ban_reason			= utf8_normalize_nfc(request_var('banreason', '', true));			$ban_give_reason	= utf8_normalize_nfc(request_var('bangivereason', '', true));			if ($ban)			{				if (confirm_box(true))				{					user_ban($mode, $ban, $ban_len, $ban_len_other, $ban_exclude, $ban_reason, $ban_give_reason);					trigger_error($user->lang['BAN_UPDATE_SUCCESSFUL'] . '<br /><br /><a href="' . $this->u_action . '">&laquo; ' . $user->lang['BACK_TO_PREV'] . '</a>');				}				else				{					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(						'mode'				=> $mode,						'ban'				=> $ban,						'bansubmit'			=> true,						'banlength'			=> $ban_len,						'banlengthother'	=> $ban_len_other,						'banexclude'		=> $ban_exclude,						'banreason'			=> $ban_reason,						'bangivereason'		=> $ban_give_reason)));				}			}		}		else if ($unbansubmit)		{			$ban = request_var('unban', array(''));			if ($ban)			{				if (confirm_box(true))				{					user_unban($mode, $ban);					trigger_error($user->lang['BAN_UPDATE_SUCCESSFUL'] . '<br /><br /><a href="' . $this->u_action . '">&laquo; ' . $user->lang['BACK_TO_PREV'] . '</a>');				}				else				{					confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(						'mode'			=> $mode,						'unbansubmit'	=> true,						'unban'			=> $ban)));				}			}		}		// Ban length options		$ban_end_text = array(0 => $user->lang['PERMANENT'], 30 => $user->lang['30_MINS'], 60 => $user->lang['1_HOUR'], 360 => $user->lang['6_HOURS'], 1440 => $user->lang['1_DAY'], 10080 => $user->lang['7_DAYS'], 20160 => $user->lang['2_WEEKS'], 40320 => $user->lang['1_MONTH'], -1 => $user->lang['UNTIL'] . ' -&gt; ');		$ban_end_options = '';		foreach ($ban_end_text as $length => $text)		{			$ban_end_options .= '<option value="' . $length . '">' . $text . '</option>';		}		// Define language vars		$this->page_title = $user->lang[strtoupper($mode) . '_BAN'];		$l_ban_explain = $user->lang[strtoupper($mode) . '_BAN_EXPLAIN'];		$l_ban_exclude_explain = $user->lang[strtoupper($mode) . '_BAN_EXCLUDE_EXPLAIN'];		$l_unban_title = $user->lang[strtoupper($mode) . '_UNBAN'];		$l_unban_explain = $user->lang[strtoupper($mode) . '_UNBAN_EXPLAIN'];		$l_no_ban_cell = $user->lang[strtoupper($mode) . '_NO_BANNED'];		switch ($mode)		{			case 'user':				$l_ban_cell = $user->lang['USERNAME'];			break;			case 'ip':				$l_ban_cell = $user->lang['IP_HOSTNAME'];			break;			case 'email':				$l_ban_cell = $user->lang['EMAIL_ADDRESS'];			break;		}		acp_ban::display_ban_options($mode);		$template->assign_vars(array(			'L_TITLE'				=> $this->page_title,			'L_EXPLAIN'				=> $l_ban_explain,			'L_UNBAN_TITLE'			=> $l_unban_title,			'L_UNBAN_EXPLAIN'		=> $l_unban_explain,			'L_BAN_CELL'			=> $l_ban_cell,			'L_BAN_EXCLUDE_EXPLAIN'	=> $l_ban_exclude_explain,			'L_NO_BAN_CELL'			=> $l_no_ban_cell,			'S_USERNAME_BAN'	=> ($mode == 'user') ? true : false,			'U_ACTION'			=> $this->u_action,			'U_FIND_USERNAME'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=mcp_ban&amp;field=ban'),		));		if ($mode === 'email' && !$auth->acl_get('a_user'))		{			return;		}		// As a "service" we will check if any post id is specified and populate the username of the poster id if given		$post_id = request_var('p', 0);		$user_id = request_var('u', 0);		$username = $pre_fill = false;		if ($user_id && $user_id <> ANONYMOUS)		{			$sql = 'SELECT username, user_email, user_ip				FROM ' . USERS_TABLE . '				WHERE user_id = ' . $user_id;			$result = $db->sql_query($sql);			switch ($mode)			{				case 'user':					$pre_fill = (string) $db->sql_fetchfield('username');				break;								case 'ip':					$pre_fill = (string) $db->sql_fetchfield('user_ip');				break;				case 'email':					$pre_fill = (string) $db->sql_fetchfield('user_email');				break;			}			$db->sql_freeresult($result);		}		else if ($post_id)		{			$post_info = get_post_data($post_id, 'm_ban');			if (sizeof($post_info) && !empty($post_info[$post_id]))			{				switch ($mode)				{					case 'user':						$pre_fill = $post_info[$post_id]['username'];					break;					case 'ip':						$pre_fill = $post_info[$post_id]['poster_ip'];					break;					case 'email':						$pre_fill = $post_info[$post_id]['user_email'];					break;				}			}		}		if ($pre_fill)		{			// left for legacy template compatibility			$template->assign_var('USERNAMES', $pre_fill);			$template->assign_var('BAN_QUANTIFIER', $pre_fill);		}	}}?>
<?php/**** acp_forums [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// Forum Admin$lang = array_merge($lang, array(	'AUTO_PRUNE_DAYS'			=> 'Auto-prune post age',	'AUTO_PRUNE_DAYS_EXPLAIN'	=> 'Number of days since last post after which topic is removed.',	'AUTO_PRUNE_FREQ'			=> 'Auto-prune frequency',	'AUTO_PRUNE_FREQ_EXPLAIN'	=> 'Time in days between pruning events.',	'AUTO_PRUNE_VIEWED'			=> 'Auto-prune post viewed age',	'AUTO_PRUNE_VIEWED_EXPLAIN'	=> 'Number of days since topic was viewed after which topic is removed.',	'CONTINUE'						=> 'Continue',	'COPY_PERMISSIONS'				=> 'Copy permissions from',	'COPY_PERMISSIONS_EXPLAIN'		=> 'To ease up the permission setup for your new forum, you can copy the permissions of an existing forum.',	'COPY_PERMISSIONS_ADD_EXPLAIN'	=> 'Once created, the forum will have the same permissions as the one you select here. If no forum is selected the newly created forum will not be visible until permissions had been set.',	'COPY_PERMISSIONS_EDIT_EXPLAIN'	=> 'If you select to copy permissions, the forum will have the same permissions as the one you select here. This will overwrite any permissions you have previously set for this forum with the permissions of the forum you select here. If no forum is selected the current permissions will be kept.',	'COPY_TO_ACL'					=> 'Alternatively, you are also able to %sset up new permissions%s for this forum.',	'CREATE_FORUM'					=> 'Create new forum',	'DECIDE_MOVE_DELETE_CONTENT'		=> 'Delete content or move to forum',	'DECIDE_MOVE_DELETE_SUBFORUMS'		=> 'Delete subforums or move to forum',	'DEFAULT_STYLE'						=> 'Default style',	'DELETE_ALL_POSTS'					=> 'Delete posts',	'DELETE_SUBFORUMS'					=> 'Delete subforums and posts',	'DISPLAY_ACTIVE_TOPICS'				=> 'Enable active topics',	'DISPLAY_ACTIVE_TOPICS_EXPLAIN'		=> 'If set to yes active topics in selected subforums will be displayed under this category.',	'EDIT_FORUM'					=> 'Edit forum',	'ENABLE_INDEXING'				=> 'Enable search indexing',	'ENABLE_INDEXING_EXPLAIN'		=> 'If set to yes posts made to this forum will be indexed for searching.',	'ENABLE_POST_REVIEW'			=> 'Enable post review',	'ENABLE_POST_REVIEW_EXPLAIN'	=> 'If set to yes users are able to review their post if new posts were made to the topic while users wrote theirs. This should be disabled for chat forums.',	'ENABLE_QUICK_REPLY'			=> 'Enable quick reply',	'ENABLE_QUICK_REPLY_EXPLAIN'	=> 'Enables the quick reply in this forum. This setting is not considered if the quick reply is disabled board wide. The quick reply will only be displayed for users who have permission to post in this forum.',	'ENABLE_RECENT'					=> 'Display active topics',	'ENABLE_RECENT_EXPLAIN'			=> 'If set to yes topics made to this forum will be shown in the active topics list.',	'ENABLE_TOPIC_ICONS'			=> 'Enable topic icons',	'FORUM_ADMIN'						=> 'Forum administration',	'FORUM_ADMIN_EXPLAIN'				=> 'In phpBB3 everything is forum based. A category is just a special type of forum. Each forum can have an unlimited number of sub-forums and you can determine whether each may be posted to or not (i.e. whether it acts like an old category). Here you can add, edit, delete, lock, unlock individual forums as well as set certain additional controls. If your posts and topics have got out of sync you can also resynchronise a forum. <strong>You need to copy or set appropriate permissions for newly created forums to have them displayed.</strong>',	'FORUM_AUTO_PRUNE'					=> 'Enable auto-pruning',	'FORUM_AUTO_PRUNE_EXPLAIN'			=> 'Prunes the forum of topics, set the frequency/age parameters below.',	'FORUM_CREATED'						=> 'Forum created successfully.',	'FORUM_DATA_NEGATIVE'				=> 'Pruning parameters cannot be negative.',	'FORUM_DESC_TOO_LONG'				=> 'The forum description is too long, it must be less than 4000 characters.',	'FORUM_DELETE'						=> 'Delete forum',	'FORUM_DELETE_EXPLAIN'				=> 'The form below will allow you to delete a forum. If the forum is postable you are able to decide where you want to put all topics (or forums) it contained.',	'FORUM_DELETED'						=> 'Forum successfully deleted.',	'FORUM_DESC'						=> 'Description',	'FORUM_DESC_EXPLAIN'				=> 'Any HTML markup entered here will be displayed as is.',	'FORUM_EDIT_EXPLAIN'				=> 'The form below will allow you to customise this forum. Please note that moderation and post count controls are set via forum permissions for each user or usergroup.',	'FORUM_IMAGE'						=> 'Forum image',	'FORUM_IMAGE_EXPLAIN'				=> 'Location, relative to the phpBB root directory, of an additional image to associate with this forum.',	'FORUM_IMAGE_NO_EXIST'				=> 'The specified forum image does not exist',	'FORUM_LINK_EXPLAIN'				=> 'Full URL (including the protocol, i.e.: <samp>http://</samp>) to the destination location that clicking this forum will take the user, e.g.: <samp>http://www.phpbb.com/</samp>.',	'FORUM_LINK_TRACK'					=> 'Track link redirects',	'FORUM_LINK_TRACK_EXPLAIN'			=> 'Records the number of times a forum link was clicked.',	'FORUM_NAME'						=> 'Forum name',	'FORUM_NAME_EMPTY'					=> 'You must enter a name for this forum.',	'FORUM_PARENT'						=> 'Parent forum',	'FORUM_PASSWORD'					=> 'Forum password',	'FORUM_PASSWORD_CONFIRM'			=> 'Confirm forum password',	'FORUM_PASSWORD_CONFIRM_EXPLAIN'	=> 'Only needs to be set if a forum password is entered.',	'FORUM_PASSWORD_EXPLAIN'			=> 'Defines a password for this forum, use the permission system in preference.',	'FORUM_PASSWORD_UNSET'				=> 'Remove forum password',	'FORUM_PASSWORD_UNSET_EXPLAIN'		=> 'Check here if you want to remove the forum password.',	'FORUM_PASSWORD_OLD'				=> 'The forum password is using an old hashing method and should be changed.',	'FORUM_PASSWORD_MISMATCH'			=> 'The passwords you entered did not match.',	'FORUM_PRUNE_SETTINGS'				=> 'Forum prune settings',	'FORUM_RESYNCED'					=> 'Forum %s successfully resynced',	'FORUM_RULES_EXPLAIN'				=> 'Forum rules are displayed at any page within the given forum.',	'FORUM_RULES_LINK'					=> 'Link to forum rules',	'FORUM_RULES_LINK_EXPLAIN'			=> 'You are able to enter the URL of the page/post containing your forum rules here. This setting will override the forum rules text you specified.',	'FORUM_RULES_PREVIEW'				=> 'Forum rules preview',	'FORUM_RULES_TOO_LONG'				=> 'The forum rules must be less than 4000 characters.',	'FORUM_SETTINGS'					=> 'Forum settings',	'FORUM_STATUS'						=> 'Forum status',	'FORUM_STYLE'						=> 'Forum style',	'FORUM_TOPICS_PAGE'					=> 'Topics per page',	'FORUM_TOPICS_PAGE_EXPLAIN'			=> 'If non-zero this value will override the default topics per page setting.',	'FORUM_TYPE'						=> 'Forum type',	'FORUM_UPDATED'						=> 'Forum information updated successfully.',	'FORUM_WITH_SUBFORUMS_NOT_TO_LINK'		=> 'You want to change a postable forum having subforums to a link. Please move all subforums out of this forum before you proceed, because after changing to a link you are no longer able to see the subforums currently connected to this forum.',	'GENERAL_FORUM_SETTINGS'	=> 'General forum settings',	'LINK'						=> 'Link',	'LIST_INDEX'				=> 'List subforum in parent-forums legend',	'LIST_INDEX_EXPLAIN'		=> 'Displays this forum on the index and elsewhere as a link within the legend of its parent-forum if the parent-forums List subforums in legend option is enabled.',	'LIST_SUBFORUMS'			=> 'List subforums in legend',	'LIST_SUBFORUMS_EXPLAIN'	=> 'Displays this forums subforums on the index and elsewhere as a link within the legend if their List subforum in parent-forums legend option is enabled.',	'LOCKED'					=> 'Locked',	'MOVE_POSTS_NO_POSTABLE_FORUM'	=> 'The forum you selected for moving the posts to is not postable. Please select a postable forum.',	'MOVE_POSTS_TO'					=> 'Move posts to',	'MOVE_SUBFORUMS_TO'				=> 'Move subforums to',	'NO_DESTINATION_FORUM'			=> 'You have not specified a forum to move content to.',	'NO_FORUM_ACTION'				=> 'No action defined for what happens with the forum content.',	'NO_PARENT'						=> 'No parent',	'NO_PERMISSIONS'				=> 'Do not copy permissions',	'NO_PERMISSION_FORUM_ADD'		=> 'You do not have the necessary permissions to add forums.',	'NO_PERMISSION_FORUM_DELETE'	=> 'You do not have the necessary permissions to delete forums.',	'PARENT_IS_LINK_FORUM'		=> 'The parent you specified is a forum link. Link forums are not able to hold other forums, please specify a category or forum as the parent forum.',	'PARENT_NOT_EXIST'			=> 'Parent does not exist.',	'PRUNE_ANNOUNCEMENTS'		=> 'Prune announcements',	'PRUNE_STICKY'				=> 'Prune stickies',	'PRUNE_OLD_POLLS'			=> 'Prune old polls',	'PRUNE_OLD_POLLS_EXPLAIN'	=> 'Removes topics with polls not voted in for post age days.',	'REDIRECT_ACL'	=> 'Now you are able to %sset permissions%s for this forum.',	'SYNC_IN_PROGRESS'			=> 'Synchronizing forum',	'SYNC_IN_PROGRESS_EXPLAIN'	=> 'Currently resyncing topic range %1$d/%2$d.',	'TYPE_CAT'			=> 'Category',	'TYPE_FORUM'		=> 'Forum',	'TYPE_LINK'			=> 'Link',	'UNLOCKED'			=> 'Unlocked',));?>
<?php/**** @package dbal* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}include_once($phpbb_root_path . 'includes/db/dbal.' . $phpEx);/*** Sqlite Database Abstraction Layer* Minimum Requirement: 2.8.2+* @package dbal*/class dbal_sqlite extends dbal{	/**	* Connect to server	*/	function sql_connect($sqlserver, $sqluser, $sqlpassword, $database, $port = false, $persistency = false, $new_link = false)	{		$this->persistency = $persistency;		$this->user = $sqluser;		$this->server = $sqlserver . (($port) ? ':' . $port : '');		$this->dbname = $database;		$error = '';		$this->db_connect_id = ($this->persistency) ? @sqlite_popen($this->server, 0666, $error) : @sqlite_open($this->server, 0666, $error);		if ($this->db_connect_id)		{			@sqlite_query('PRAGMA short_column_names = 1', $this->db_connect_id);//			@sqlite_query('PRAGMA encoding = "UTF-8"', $this->db_connect_id);		}		return ($this->db_connect_id) ? true : array('message' => $error);	}	/**	* Version information about used database	* @param bool $raw if true, only return the fetched sql_server_version	* @param bool $use_cache if true, it is safe to retrieve the stored value from the cache	* @return string sql server version	*/	function sql_server_info($raw = false, $use_cache = true)	{		global $cache;		if (!$use_cache || empty($cache) || ($this->sql_server_version = $cache->get('sqlite_version')) === false)		{			$result = @sqlite_query('SELECT sqlite_version() AS version', $this->db_connect_id);			$row = @sqlite_fetch_array($result, SQLITE_ASSOC);			$this->sql_server_version = (!empty($row['version'])) ? $row['version'] : 0;			if (!empty($cache) && $use_cache)			{				$cache->put('sqlite_version', $this->sql_server_version);			}		}		return ($raw) ? $this->sql_server_version : 'SQLite ' . $this->sql_server_version;	}	/**	* SQL Transaction	* @access private	*/	function _sql_transaction($status = 'begin')	{		switch ($status)		{			case 'begin':				return @sqlite_query('BEGIN', $this->db_connect_id);			break;			case 'commit':				return @sqlite_query('COMMIT', $this->db_connect_id);			break;			case 'rollback':				return @sqlite_query('ROLLBACK', $this->db_connect_id);			break;		}		return true;	}	/**	* Base query method	*	* @param	string	$query		Contains the SQL query which shall be executed	* @param	int		$cache_ttl	Either 0 to avoid caching or the time in seconds which the result shall be kept in cache	* @return	mixed				When casted to bool the returned value returns true on success and false on failure	*	* @access	public	*/	function sql_query($query = '', $cache_ttl = 0)	{		if ($query != '')		{			global $cache;			// EXPLAIN only in extra debug mode			if (defined('DEBUG_EXTRA'))			{				$this->sql_report('start', $query);			}			$this->query_result = ($cache_ttl && method_exists($cache, 'sql_load')) ? $cache->sql_load($query) : false;			$this->sql_add_num_queries($this->query_result);			if ($this->query_result === false)			{				if (($this->query_result = @sqlite_query($query, $this->db_connect_id)) === false)				{					$this->sql_error($query);				}				if (defined('DEBUG_EXTRA'))				{					$this->sql_report('stop', $query);				}				if ($cache_ttl && method_exists($cache, 'sql_save'))				{					$this->open_queries[(int) $this->query_result] = $this->query_result;					$cache->sql_save($query, $this->query_result, $cache_ttl);				}				else if (strpos($query, 'SELECT') === 0 && $this->query_result)				{					$this->open_queries[(int) $this->query_result] = $this->query_result;				}			}			else if (defined('DEBUG_EXTRA'))			{				$this->sql_report('fromcache', $query);			}		}		else		{			return false;		}		return $this->query_result;	}	/**	* Build LIMIT query	*/	function _sql_query_limit($query, $total, $offset = 0, $cache_ttl = 0)	{		$this->query_result = false;		// if $total is set to 0 we do not want to limit the number of rows		if ($total == 0)		{			$total = -1;		}		$query .= "\n LIMIT " . ((!empty($offset)) ? $offset . ', ' . $total : $total);		return $this->sql_query($query, $cache_ttl);	}	/**	* Return number of affected rows	*/	function sql_affectedrows()	{		return ($this->db_connect_id) ? @sqlite_changes($this->db_connect_id) : false;	}	/**	* Fetch current row	*/	function sql_fetchrow($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_fetchrow($query_id);		}		return ($query_id !== false) ? @sqlite_fetch_array($query_id, SQLITE_ASSOC) : false;	}	/**	* Seek to given row number	* rownum is zero-based	*/	function sql_rowseek($rownum, &$query_id)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_rowseek($rownum, $query_id);		}		return ($query_id !== false) ? @sqlite_seek($query_id, $rownum) : false;	}	/**	* Get last inserted id after insert statement	*/	function sql_nextid()	{		return ($this->db_connect_id) ? @sqlite_last_insert_rowid($this->db_connect_id) : false;	}	/**	* Free sql result	*/	function sql_freeresult($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_freeresult($query_id);		}		return true;	}	/**	* Escape string used in sql query	*/	function sql_escape($msg)	{		return @sqlite_escape_string($msg);	}	/**	* Correctly adjust LIKE expression for special characters	* For SQLite an underscore is a not-known character... this may change with SQLite3	*/	function sql_like_expression($expression)	{		// Unlike LIKE, GLOB is case sensitive (unfortunatly). SQLite users need to live with it!		// We only catch * and ? here, not the character map possible on file globbing.		$expression = str_replace(array(chr(0) . '_', chr(0) . '%'), array(chr(0) . '?', chr(0) . '*'), $expression);		$expression = str_replace(array('?', '*'), array("\?", "\*"), $expression);		$expression = str_replace(array(chr(0) . "\?", chr(0) . "\*"), array('?', '*'), $expression);		return 'GLOB \'' . $this->sql_escape($expression) . '\'';	}	/**	* return sql error array	* @access private	*/	function _sql_error()	{		return array(			'message'	=> @sqlite_error_string(@sqlite_last_error($this->db_connect_id)),			'code'		=> @sqlite_last_error($this->db_connect_id)		);	}	/**	* Build db-specific query data	* @access private	*/	function _sql_custom_build($stage, $data)	{		return $data;	}	/**	* Close sql connection	* @access private	*/	function _sql_close()	{		return @sqlite_close($this->db_connect_id);	}	/**	* Build db-specific report	* @access private	*/	function _sql_report($mode, $query = '')	{		switch ($mode)		{			case 'start':			break;			case 'fromcache':				$endtime = explode(' ', microtime());				$endtime = $endtime[0] + $endtime[1];				$result = @sqlite_query($query, $this->db_connect_id);				while ($void = @sqlite_fetch_array($result, SQLITE_ASSOC))				{					// Take the time spent on parsing rows into account				}				$splittime = explode(' ', microtime());				$splittime = $splittime[0] + $splittime[1];				$this->sql_report('record_fromcache', $query, $endtime, $splittime);			break;		}	}}?>
<?php/*** Repair bbcodes converted with RC6** You should make a backup from your users, posts and privmsgs table in case something goes wrong* Forum descriptions and rules need to be re-submitted manually**/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);@ini_set('memory_limit', '512M');define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.'.$phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$echos = 0;// Adjust user signatures$sql = 'SELECT user_id, user_sig, user_sig_bbcode_uid	FROM ' . USERS_TABLE . '	ORDER BY user_id ASC';$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$bbcode_uid = $row['user_sig_bbcode_uid'];	// Only if a bbcode uid is present, the signature present and a size tag used...	if (!empty($bbcode_uid) && strpos($row['user_sig'], $bbcode_uid) === false)	{		$row['user_sig'] = preg_replace('/\:[0-9a-z]{8}\]/', ":$bbcode_uid]", $row['user_sig']);		$sql = 'UPDATE ' . USERS_TABLE . " SET user_sig = '" . $db->sql_escape($row['user_sig']) . "'			WHERE user_id = " . $row['user_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />User: ' . "{$row['user_id']}\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Now adjust posts$sql = 'SELECT post_id, post_text, bbcode_uid, enable_bbcode	FROM ' . POSTS_TABLE . '	ORDER BY post_id ASC';$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$bbcode_uid = $row['bbcode_uid'];	// Only if a bbcode uid is present, bbcode enabled and a size tag used...	if ($row['enable_bbcode'] && !empty($bbcode_uid) && strpos($row['post_text'], $bbcode_uid) === false)	{		$row['post_text'] = preg_replace('/\:[0-9a-z]{8}\]/', ":$bbcode_uid]", $row['post_text']);				$sql = 'UPDATE ' . POSTS_TABLE . " SET post_text = '" . $db->sql_escape($row['post_text']) . "'			WHERE post_id = " . $row['post_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />Post: ' . "{$row['post_id']} \n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Now to the private messages$sql = 'SELECT msg_id, message_text, bbcode_uid, enable_bbcode	FROM ' . PRIVMSGS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$bbcode_uid = $row['bbcode_uid'];	// Only if a bbcode uid is present, bbcode enabled and a size tag used...	if ($row['enable_bbcode'] && !empty($bbcode_uid) && strpos($row['message_text'], $bbcode_uid) === false)	{		$row['message_text'] = preg_replace('/\:[0-9a-z]{8}\]/', ":$bbcode_uid]", $row['message_text']);				$sql = 'UPDATE ' . PRIVMSGS_TABLE . " SET message_text = '" . $db->sql_escape($row['message_text']) . "'			WHERE msg_id = " . $row['msg_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Done$db->sql_close();echo 'done';?>
<?php/**** help_bbcode [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/if (!defined('IN_PHPBB')){	exit;}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$help = array(	array(		0 => '--',		1 => 'Introduction'	),	array(		0 => 'What is BBCode?',		1 => 'BBCode is a special implementation of HTML. Whether you can actually use BBCode in your posts on the forum is determined by the administrator. In addition you can disable BBCode on a per post basis via the posting form. BBCode itself is similar in style to HTML, tags are enclosed in square brackets [ and ] rather than &lt; and &gt; and it offers greater control over what and how something is displayed. Depending on the template you are using you may find adding BBCode to your posts is made much easier through a clickable interface above the message area on the posting form. Even with this you may find the following guide useful.'	),	array(		0 => '--',		1 => 'Text Formatting'	),	array(		0 => 'How to create bold, italic and underlined text',		1 => 'BBCode includes tags to allow you to quickly change the basic style of your text. This is achieved in the following ways: <ul><li>To make a piece of text bold enclose it in <strong>[b][/b]</strong>, e.g. <br /><br /><strong>[b]</strong>Hello<strong>[/b]</strong><br /><br />will become <strong>Hello</strong></li><li>For underlining use <strong>[u][/u]</strong>, for example:<br /><br /><strong>[u]</strong>Good Morning<strong>[/u]</strong><br /><br />becomes <span style="text-decoration: underline">Good Morning</span></li><li>To italicise text use <strong>[i][/i]</strong>, e.g.<br /><br />This is <strong>[i]</strong>Great!<strong>[/i]</strong><br /><br />would give This is <i>Great!</i></li></ul>'	),	array(		0 => 'How to change the text colour or size',		1 => 'To alter the colour or size of your text the following tags can be used. Keep in mind that how the output appears will depend on the viewers browser and system: <ul><li>Changing the colour of text is achieved by wrapping it in <strong>[color=][/color]</strong>. You can specify either a recognised colour name (eg. red, blue, yellow, etc.) or the hexadecimal triplet alternative, e.g. #FFFFFF, #000000. For example, to create red text you could use:<br /><br /><strong>[color=red]</strong>Hello!<strong>[/color]</strong><br /><br />or<br /><br /><strong>[color=#FF0000]</strong>Hello!<strong>[/color]</strong><br /><br />Both will output <span style="color:red">Hello!</span></li><li>Changing the text size is achieved in a similar way using <strong>[size=][/size]</strong>. This tag is dependent on the template the user has selected but the recommended format is a numerical value representing the text size in percent, starting at 20 (very small) through to 200 (very large) by default. For example:<br /><br /><strong>[size=30]</strong>SMALL<strong>[/size]</strong><br /><br />will generally be <span style="font-size:30%;">SMALL</span><br /><br />whereas:<br /><br /><strong>[size=200]</strong>HUGE!<strong>[/size]</strong><br /><br />will be <span style="font-size:200%;">HUGE!</span></li></ul>'	),	array(		0 => 'Can I combine formatting tags?',		1 => 'Yes, of course you can, for example to get someones attention you may write:<br /><br /><strong>[size=200][color=red][b]</strong>LOOK AT ME!<strong>[/b][/color][/size]</strong><br /><br />this would output <span style="color:red;font-size:200%;"><strong>LOOK AT ME!</strong></span><br /><br />We dont recommend you output lots of text that looks like this though! Remember it is up to you, the poster, to ensure tags are closed correctly. For example the following is incorrect:<br /><br /><strong>[b][u]</strong>This is wrong<strong>[/b][/u]</strong>'	),	array(		0 => '--',		1 => 'Quoting and outputting fixed-width text'	),	array(		0 => 'Quoting text in replies',		1 => 'There are two ways you can quote text, with a reference or without.<ul><li>When you utilise the Quote function to reply to a post on the board you should notice that the post text is added to the message window enclosed in a <strong>[quote=&quot;&quot;][/quote]</strong> block. This method allows you to quote with a reference to a person or whatever else you choose to put! For example to quote a piece of text Mr. Blobby wrote you would enter:<br /><br /><strong>[quote=&quot;Mr. Blobby&quot;]</strong>The text Mr. Blobby wrote would go here<strong>[/quote]</strong><br /><br />The resulting output will automatically add &quot;Mr. Blobby wrote:&quot; before the actual text. Remember you <strong>must</strong> include the quotation marks &quot;&quot; around the name you are quoting, they are not optional.</li><li>The second method allows you to blindly quote something. To utilise this enclose the text in <strong>[quote][/quote]</strong> tags. When you view the message it will simply show the text within a quotation block.</li></ul>'	),	array(		0 => 'Outputting code or fixed width data',		1 => 'If you want to output a piece of code or in fact anything that requires a fixed width, e.g. Courier type font you should enclose the text in <strong>[code][/code]</strong> tags, e.g.<br /><br /><strong>[code]</strong>echo &quot;This is some code&quot;;<strong>[/code]</strong><br /><br />All formatting used within <strong>[code][/code]</strong> tags is retained when you later view it. PHP syntax highlighting can be enabled using <strong>[code=php][/code]</strong> and is recommended when posting PHP code samples as it improves readability.'	),	array(		0 => '--',		1 => 'Generating lists'	),	array(		0 => 'Creating an Unordered list',		1 => 'BBCode supports two types of lists, unordered and ordered. They are essentially the same as their HTML equivalents. An unordered list outputs each item in your list sequentially one after the other indenting each with a bullet character. To create an unordered list you use <strong>[list][/list]</strong> and define each item within the list using <strong>[*]</strong>. For example to list your favourite colours you could use:<br /><br /><strong>[list]</strong><br /><strong>[*]</strong>Red<br /><strong>[*]</strong>Blue<br /><strong>[*]</strong>Yellow<br /><strong>[/list]</strong><br /><br />This would generate the following list:<ul><li>Red</li><li>Blue</li><li>Yellow</li></ul>'	),	array(		0 => 'Creating an Ordered list',		1 => 'The second type of list, an ordered list, gives you control over what is output before each item. To create an ordered list you use <strong>[list=1][/list]</strong> to create a numbered list or alternatively <strong>[list=a][/list]</strong> for an alphabetical list. As with the unordered list, items are specified using <strong>[*]</strong>. For example:<br /><br /><strong>[list=1]</strong><br /><strong>[*]</strong>Go to the shops<br /><strong>[*]</strong>Buy a new computer<br /><strong>[*]</strong>Swear at computer when it crashes<br /><strong>[/list]</strong><br /><br />will generate the following:<ol style="list-style-type: decimal;"><li>Go to the shops</li><li>Buy a new computer</li><li>Swear at computer when it crashes</li></ol>Whereas for an alphabetical list you would use:<br /><br /><strong>[list=a]</strong><br /><strong>[*]</strong>The first possible answer<br /><strong>[*]</strong>The second possible answer<br /><strong>[*]</strong>The third possible answer<br /><strong>[/list]</strong><br /><br />giving<ol style="list-style-type: lower-alpha"><li>The first possible answer</li><li>The second possible answer</li><li>The third possible answer</li></ol>'	),	// This block will switch the FAQ-Questions to the second template column	array(		0 => '--',		1 => '--'	),	array(		0 => '--',		1 => 'Creating Links'	),	array(		0 => 'Linking to another site',		1 => 'phpBB BBCode supports a number of ways of creating URIs (Uniform Resource Indicators) better known as URLs.<ul><li>The first of these uses the <strong>[url=][/url]</strong> tag, whatever you type after the = sign will cause the contents of that tag to act as a URL. For example to link to phpBB.com you could use:<br /><br /><strong>[url=http://www.phpbb.com/]</strong>Visit phpBB!<strong>[/url]</strong><br /><br />This would generate the following link, <a href="http://www.phpbb.com/">Visit phpBB!</a> Please notice that the link opens in the same window or a new window depending on the users browser preferences.</li><li>If you want the URL itself displayed as the link you can do this by simply using:<br /><br /><strong>[url]</strong>http://www.phpbb.com/<strong>[/url]</strong><br /><br />This would generate the following link, <a href="http://www.phpbb.com/">http://www.phpbb.com/</a></li><li>Additionally, phpBB features something called <i>Magic Links</i>, this will turn any syntactically correct URL into a link without you needing to specify any tags or even the leading http://. For example typing www.phpbb.com into your message will automatically lead to <a href="http://www.phpbb.com/">www.phpbb.com</a> being output when you view the message.</li><li>The same thing applies equally to e-mail addresses, you can either specify an address explicitly for example:<br /><br /><strong>[email]</strong>no.one@domain.adr<strong>[/email]</strong><br /><br />which will output <a href="mailto:no.one@domain.adr">no.one@domain.adr</a> or you can just type no.one@domain.adr into your message and it will be automatically converted when you view.</li></ul>As with all the BBCode tags you can wrap URLs around any of the other tags such as <strong>[img][/img]</strong> (see next entry), <strong>[b][/b]</strong>, etc. As with the formatting tags it is up to you to ensure the correct open and close order is following, for example:<br /><br /><strong>[url=http://www.google.com/][img]</strong>http://www.google.com/intl/en_ALL/images/logo.gif<strong>[/url][/img]</strong><br /><br />is <span style="text-decoration: underline">not</span> correct which may lead to your post being deleted so take care.'	),	array(		0 => '--',		1 => 'Showing images in posts'	),	array(		0 => 'Adding an image to a post',		1 => 'phpBB BBCode incorporates a tag for including images in your posts. Two very important things to remember when using this tag are: many users do not appreciate lots of images being shown in posts and secondly the image you display must already be available on the internet (it cannot exist only on your computer for example, unless you run a webserver!). To display an image you must surround the URL pointing to the image with <strong>[img][/img]</strong> tags. For example:<br /><br /><strong>[img]</strong>http://www.google.com/intl/en_ALL/images/logo.gif<strong>[/img]</strong><br /><br />As noted in the URL section above you can wrap an image in a <strong>[url][/url]</strong> tag if you wish, e.g.<br /><br /><strong>[url=http://www.google.com/][img]</strong>http://www.google.com/intl/en_ALL/images/logo.gif<strong>[/img][/url]</strong><br /><br />would generate:<br /><br /><a href="http://www.google.com/"><img src="http://www.google.com/intl/en_ALL/images/logo.gif" alt="" /></a>'	),	array(		0 => 'Adding attachments into a post',		1 => 'Attachments can now be placed in any part of a post by using the new <strong>[attachment=][/attachment]</strong> BBCode, if the attachments functionality has been enabled by a board administrator and if you are given the appropriate permissions to create attachments. Within the posting screen is a drop-down box (respectively a button) for placing attachments inline.'	),	array(		0 => '--',		1 => 'Other matters'	),	array(		0 => 'Can I add my own tags?',		1 => 'If you are an administrator on this board and have the proper permissions, you can add further BBCodes through the Custom BBCodes section.'	));?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class mcp_pm_reports_info{	function module()	{		return array(			'filename'	=> 'mcp_pm_reports',			'title'		=> 'MCP_PM_REPORTS',			'version'	=> '1.0.0',			'modes'		=> array(				'pm_reports'			=> array('title' => 'MCP_PM_REPORTS_OPEN', 'auth' => 'aclf_m_report', 'cat' => array('MCP_REPORTS')),				'pm_reports_closed'	=> array('title' => 'MCP_PM_REPORTS_CLOSED', 'auth' => 'aclf_m_report', 'cat' => array('MCP_REPORTS')),				'pm_report_details'	=> array('title' => 'MCP_PM_REPORT_DETAILS', 'auth' => 'aclf_m_report', 'cat' => array('MCP_REPORTS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_update_info{	function module()	{		return array(			'filename'	=> 'acp_update',			'title'		=> 'ACP_UPDATE',			'version'	=> '1.0.0',			'modes'		=> array(				'version_check'		=> array('title' => 'ACP_VERSION_CHECK', 'auth' => 'acl_a_board', 'cat' => array('ACP_AUTOMATION')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_search{	var $u_action;	var $state;	var $search;	var $max_post_id;	var $batch_size = 100;	function main($id, $mode)	{		global $user;		$user->add_lang('acp/search');		// For some this may be of help...		@ini_set('memory_limit', '128M');		switch ($mode)		{			case 'settings':				$this->settings($id, $mode);			break;			case 'index':				$this->index($id, $mode);			break;		}	}	function settings($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$submit = (isset($_POST['submit'])) ? true : false;		$search_types = $this->get_search_types();		$settings = array(			'search_interval'			=> 'float',			'search_anonymous_interval'	=> 'float',			'load_search'				=> 'bool',			'limit_search_load'			=> 'float',			'min_search_author_chars'	=> 'integer',			'max_num_search_keywords'	=> 'integer',			'search_store_results'		=> 'integer',		);		$search = null;		$error = false;		$search_options = '';		foreach ($search_types as $type)		{			if ($this->init_search($type, $search, $error))			{				continue;			}			$name = ucfirst(strtolower(str_replace('_', ' ', $type)));			$selected = ($config['search_type'] == $type) ? ' selected="selected"' : '';			$search_options .= '<option value="' . $type . '"' . $selected . '>' . $name . '</option>';			if (method_exists($search, 'acp'))			{				$vars = $search->acp();				if (!$submit)				{					$template->assign_block_vars('backend', array(						'NAME'		=> $name,						'SETTINGS'	=> $vars['tpl'])					);				}				else if (is_array($vars['config']))				{					$settings = array_merge($settings, $vars['config']);				}			}		}		unset($search);		unset($error);		$cfg_array = (isset($_REQUEST['config'])) ? request_var('config', array('' => ''), true) : array();		$updated = request_var('updated', false);		foreach ($settings as $config_name => $var_type)		{			if (!isset($cfg_array[$config_name]))			{				continue;			}			// e.g. integer:4:12 (min 4, max 12)			$var_type = explode(':', $var_type);			$config_value = $cfg_array[$config_name];			settype($config_value, $var_type[0]);			if (isset($var_type[1]))			{				$config_value = max($var_type[1], $config_value);			}			if (isset($var_type[2]))			{				$config_value = min($var_type[2], $config_value);			}			// only change config if anything was actually changed			if ($submit && ($config[$config_name] != $config_value))			{				set_config($config_name, $config_value);				$updated = true;			}		}		if ($submit)		{			$extra_message = '';			if ($updated)			{				add_log('admin', 'LOG_CONFIG_SEARCH');			}			if (isset($cfg_array['search_type']) && in_array($cfg_array['search_type'], $search_types, true) && ($cfg_array['search_type'] != $config['search_type']))			{				$search = null;				$error = false;				if (!$this->init_search($cfg_array['search_type'], $search, $error))				{					if (confirm_box(true))					{						if (!method_exists($search, 'init') || !($error = $search->init()))						{							set_config('search_type', $cfg_array['search_type']);							if (!$updated)							{								add_log('admin', 'LOG_CONFIG_SEARCH');							}							$extra_message = '<br />' . $user->lang['SWITCHED_SEARCH_BACKEND'] . '<br /><a href="' . append_sid("{$phpbb_admin_path}index.$phpEx", 'i=search&amp;mode=index') . '">&raquo; ' . $user->lang['GO_TO_SEARCH_INDEX'] . '</a>';						}						else						{							trigger_error($error . adm_back_link($this->u_action), E_USER_WARNING);						}					}					else					{						confirm_box(false, $user->lang['CONFIRM_SEARCH_BACKEND'], build_hidden_fields(array(							'i'			=> $id,							'mode'		=> $mode,							'submit'	=> true,							'updated'	=> $updated,							'config'	=> array('search_type' => $cfg_array['search_type']),						)));					}				}				else				{					trigger_error($error . adm_back_link($this->u_action), E_USER_WARNING);				}			}			$search = null;			$error = false;			if (!$this->init_search($config['search_type'], $search, $error))			{				if ($updated)				{					if (method_exists($search, 'config_updated'))					{						if ($search->config_updated())						{							trigger_error($error . adm_back_link($this->u_action), E_USER_WARNING);						}					}				}			}			else			{				trigger_error($error . adm_back_link($this->u_action), E_USER_WARNING);			}			trigger_error($user->lang['CONFIG_UPDATED'] . $extra_message . adm_back_link($this->u_action));		}		unset($cfg_array);		$this->tpl_name = 'acp_search';		$this->page_title = 'ACP_SEARCH_SETTINGS';		$template->assign_vars(array(			'LIMIT_SEARCH_LOAD'		=> (float) $config['limit_search_load'],			'MIN_SEARCH_AUTHOR_CHARS'	=> (int) $config['min_search_author_chars'],			'SEARCH_INTERVAL'		=> (float) $config['search_interval'],			'SEARCH_GUEST_INTERVAL'	=> (float) $config['search_anonymous_interval'],			'SEARCH_STORE_RESULTS'	=> (int) $config['search_store_results'],			'MAX_NUM_SEARCH_KEYWORDS'	=> (int) $config['max_num_search_keywords'],			'S_SEARCH_TYPES'		=> $search_options,			'S_YES_SEARCH'			=> (bool) $config['load_search'],			'S_SETTINGS'			=> true,			'U_ACTION'				=> $this->u_action)		);	}	function index($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		if (isset($_REQUEST['action']) && is_array($_REQUEST['action']))		{			$action = request_var('action', array('' => false));			$action = key($action);		}		else		{			$action = request_var('action', '');		}		$this->state = explode(',', $config['search_indexing_state']);		if (isset($_POST['cancel']))		{			$action = '';			$this->state = array();			$this->save_state();		}		if ($action)		{			switch ($action)			{				case 'progress_bar':					$type = request_var('type', '');					$this->display_progress_bar($type);				break;				case 'delete':					$this->state[1] = 'delete';				break;				case 'create':					$this->state[1] = 'create';				break;				default:					trigger_error('NO_ACTION', E_USER_ERROR);				break;			}			if (empty($this->state[0]))			{				$this->state[0] = request_var('search_type', '');			}			$this->search = null;			$error = false;			if ($this->init_search($this->state[0], $this->search, $error))			{				trigger_error($error . adm_back_link($this->u_action), E_USER_WARNING);			}			$name = ucfirst(strtolower(str_replace('_', ' ', $this->state[0])));			$action = &$this->state[1];			$this->max_post_id = $this->get_max_post_id();			$post_counter = (isset($this->state[2])) ? $this->state[2] : 0;			$this->state[2] = &$post_counter;			$this->save_state();			switch ($action)			{				case 'delete':					if (method_exists($this->search, 'delete_index'))					{						// pass a reference to myself so the $search object can make use of save_state() and attributes						if ($error = $this->search->delete_index($this, append_sid("{$phpbb_admin_path}index.$phpEx", "i=$id&mode=$mode&action=delete", false)))						{							$this->state = array('');							$this->save_state();							trigger_error($error . adm_back_link($this->u_action) . $this->close_popup_js(), E_USER_WARNING);						}					}					else					{						$starttime = explode(' ', microtime());						$starttime = $starttime[1] + $starttime[0];						$row_count = 0;						while (still_on_time() && $post_counter <= $this->max_post_id)						{							$sql = 'SELECT post_id, poster_id, forum_id								FROM ' . POSTS_TABLE . '								WHERE post_id >= ' . (int) ($post_counter + 1) . '									AND post_id <= ' . (int) ($post_counter + $this->batch_size);							$result = $db->sql_query($sql);							$ids = $posters = $forum_ids = array();							while ($row = $db->sql_fetchrow($result))							{								$ids[] = $row['post_id'];								$posters[] = $row['poster_id'];								$forum_ids[] = $row['forum_id'];							}							$db->sql_freeresult($result);							$row_count += sizeof($ids);							if (sizeof($ids))							{								$this->search->index_remove($ids, $posters, $forum_ids);							}							$post_counter += $this->batch_size;						}						// save the current state						$this->save_state();						if ($post_counter <= $this->max_post_id)						{							$mtime = explode(' ', microtime());							$totaltime = $mtime[0] + $mtime[1] - $starttime;							$rows_per_second = $row_count / $totaltime;							meta_refresh(1, append_sid($this->u_action . '&amp;action=delete&amp;skip_rows=' . $post_counter));							trigger_error(sprintf($user->lang['SEARCH_INDEX_DELETE_REDIRECT'], $post_counter, $row_count, $rows_per_second));						}					}					$this->search->tidy();					$this->state = array('');					$this->save_state();					add_log('admin', 'LOG_SEARCH_INDEX_REMOVED', $name);					trigger_error($user->lang['SEARCH_INDEX_REMOVED'] . adm_back_link($this->u_action) . $this->close_popup_js());				break;				case 'create':					if (method_exists($this->search, 'create_index'))					{						// pass a reference to acp_search so the $search object can make use of save_state() and attributes						if ($error = $this->search->create_index($this, append_sid("{$phpbb_admin_path}index.$phpEx", "i=$id&mode=$mode&action=create", false)))						{							$this->state = array('');							$this->save_state();							trigger_error($error . adm_back_link($this->u_action) . $this->close_popup_js(), E_USER_WARNING);						}					}					else					{						$sql = 'SELECT forum_id, enable_indexing							FROM ' . FORUMS_TABLE;						$result = $db->sql_query($sql, 3600);						while ($row = $db->sql_fetchrow($result))						{							$forums[$row['forum_id']] = (bool) $row['enable_indexing'];						}						$db->sql_freeresult($result);						$starttime = explode(' ', microtime());						$starttime = $starttime[1] + $starttime[0];						$row_count = 0;						while (still_on_time() && $post_counter <= $this->max_post_id)						{							$sql = 'SELECT post_id, post_subject, post_text, poster_id, forum_id								FROM ' . POSTS_TABLE . '								WHERE post_id >= ' . (int) ($post_counter + 1) . '									AND post_id <= ' . (int) ($post_counter + $this->batch_size);							$result = $db->sql_query($sql);							$buffer = $db->sql_buffer_nested_transactions();							if ($buffer)							{								$rows = $db->sql_fetchrowset($result);								$rows[] = false; // indicate end of array for while loop below								$db->sql_freeresult($result);							}							$i = 0;							while ($row = ($buffer ? $rows[$i++] : $db->sql_fetchrow($result)))							{								// Indexing enabled for this forum or global announcement?								// Global announcements get indexed by default.								if (!$row['forum_id'] || (isset($forums[$row['forum_id']]) && $forums[$row['forum_id']]))								{									$this->search->index('post', $row['post_id'], $row['post_text'], $row['post_subject'], $row['poster_id'], $row['forum_id']);								}								$row_count++;							}							if (!$buffer)							{								$db->sql_freeresult($result);							}							$post_counter += $this->batch_size;						}						// save the current state						$this->save_state();						// pretend the number of posts was as big as the number of ids we indexed so far						// just an estimation as it includes deleted posts						$num_posts = $config['num_posts'];						$config['num_posts'] = min($config['num_posts'], $post_counter);						$this->search->tidy();						$config['num_posts'] = $num_posts;						if ($post_counter <= $this->max_post_id)						{							$mtime = explode(' ', microtime());							$totaltime = $mtime[0] + $mtime[1] - $starttime;							$rows_per_second = $row_count / $totaltime;							meta_refresh(1, append_sid($this->u_action . '&amp;action=create&amp;skip_rows=' . $post_counter));							trigger_error(sprintf($user->lang['SEARCH_INDEX_CREATE_REDIRECT'], $post_counter, $row_count, $rows_per_second));						}					}					$this->search->tidy();					$this->state = array('');					$this->save_state();					add_log('admin', 'LOG_SEARCH_INDEX_CREATED', $name);					trigger_error($user->lang['SEARCH_INDEX_CREATED'] . adm_back_link($this->u_action) . $this->close_popup_js());				break;			}		}		$search_types = $this->get_search_types();		$search = null;		$error = false;		$search_options = '';		foreach ($search_types as $type)		{			if ($this->init_search($type, $search, $error) || !method_exists($search, 'index_created'))			{				continue;			}			$name = ucfirst(strtolower(str_replace('_', ' ', $type)));			$data = array();			if (method_exists($search, 'index_stats'))			{				$data = $search->index_stats();			}			$statistics = array();			foreach ($data as $statistic => $value)			{				$n = sizeof($statistics);				if ($n && sizeof($statistics[$n - 1]) < 3)				{					$statistics[$n - 1] += array('statistic_2' => $statistic, 'value_2' => $value);				}				else				{					$statistics[] = array('statistic_1' => $statistic, 'value_1' => $value);				}			}			$template->assign_block_vars('backend', array(				'L_NAME'			=> $name,				'NAME'				=> $type,				'S_ACTIVE'			=> ($type == $config['search_type']) ? true : false,				'S_HIDDEN_FIELDS'	=> build_hidden_fields(array('search_type' => $type)),				'S_INDEXED'			=> (bool) $search->index_created(),				'S_STATS'			=> (bool) sizeof($statistics))			);			foreach ($statistics as $statistic)			{				$template->assign_block_vars('backend.data', array(					'STATISTIC_1'	=> $statistic['statistic_1'],					'VALUE_1'		=> $statistic['value_1'],					'STATISTIC_2'	=> (isset($statistic['statistic_2'])) ? $statistic['statistic_2'] : '',					'VALUE_2'		=> (isset($statistic['value_2'])) ? $statistic['value_2'] : '')				);			}		}		unset($search);		unset($error);		unset($statistics);		unset($data);		$this->tpl_name = 'acp_search';		$this->page_title = 'ACP_SEARCH_INDEX';		$template->assign_vars(array(			'S_INDEX'				=> true,			'U_ACTION'				=> $this->u_action,			'U_PROGRESS_BAR'		=> append_sid("{$phpbb_admin_path}index.$phpEx", "i=$id&amp;mode=$mode&amp;action=progress_bar"),			'UA_PROGRESS_BAR'		=> addslashes(append_sid("{$phpbb_admin_path}index.$phpEx", "i=$id&amp;mode=$mode&amp;action=progress_bar")),		));		if (isset($this->state[1]))		{			$template->assign_vars(array(				'S_CONTINUE_INDEXING'	=> $this->state[1],				'U_CONTINUE_INDEXING'	=> $this->u_action . '&amp;action=' . $this->state[1],				'L_CONTINUE'			=> ($this->state[1] == 'create') ? $user->lang['CONTINUE_INDEXING'] : $user->lang['CONTINUE_DELETING_INDEX'],				'L_CONTINUE_EXPLAIN'	=> ($this->state[1] == 'create') ? $user->lang['CONTINUE_INDEXING_EXPLAIN'] : $user->lang['CONTINUE_DELETING_INDEX_EXPLAIN'])			);		}	}	function display_progress_bar($type)	{		global $template, $user;		$l_type = ($type == 'create') ? 'INDEXING_IN_PROGRESS' : 'DELETING_INDEX_IN_PROGRESS';		adm_page_header($user->lang[$l_type]);		$template->set_filenames(array(			'body'	=> 'progress_bar.html')		);		$template->assign_vars(array(			'L_PROGRESS'			=> $user->lang[$l_type],			'L_PROGRESS_EXPLAIN'	=> $user->lang[$l_type . '_EXPLAIN'])		);		adm_page_footer();	}	function close_popup_js()	{		return "<script type=\"text/javascript\">\n" .			"// <![CDATA[\n" .			"	close_waitscreen = 1;\n" .			"// ]]>\n" .			"</script>\n";	}	function get_search_types()	{		global $phpbb_root_path, $phpEx;		$search_types = array();		$dp = @opendir($phpbb_root_path . 'includes/search');		if ($dp)		{			while (($file = readdir($dp)) !== false)			{				if ((preg_match('#\.' . $phpEx . '$#', $file)) && ($file != "search.$phpEx"))				{					$search_types[] = preg_replace('#^(.*?)\.' . $phpEx . '$#', '\1', $file);				}			}			closedir($dp);			sort($search_types);		}		return $search_types;	}	function get_max_post_id()	{		global $db;		$sql = 'SELECT MAX(post_id) as max_post_id			FROM '. POSTS_TABLE;		$result = $db->sql_query($sql);		$max_post_id = (int) $db->sql_fetchfield('max_post_id');		$db->sql_freeresult($result);		return $max_post_id;	}	function save_state($state = false)	{		if ($state)		{			$this->state = $state;		}		ksort($this->state);		set_config('search_indexing_state', implode(',', $this->state), true);	}	/**	* Initialises a search backend object	*	* @return false if no error occurred else an error message	*/	function init_search($type, &$search, &$error)	{		global $phpbb_root_path, $phpEx, $user;		if (!preg_match('#^\w+$#', $type) || !file_exists("{$phpbb_root_path}includes/search/$type.$phpEx"))		{			$error = $user->lang['NO_SUCH_SEARCH_MODULE'];			return $error;		}		include_once("{$phpbb_root_path}includes/search/$type.$phpEx");		if (!class_exists($type))		{			$error = $user->lang['NO_SUCH_SEARCH_MODULE'];			return $error;		}		$error = false;		$search = new $type($error);		return $error;	}}?>
<?php/**** @package acm* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Class for grabbing/handling cached entries, extends acm_file or acm_db depending on the setup* @package acm*/class cache extends acm{	/**	* Get config values	*/	function obtain_config()	{		global $db;		if (($config = $this->get('config')) !== false)		{			$sql = 'SELECT config_name, config_value				FROM ' . CONFIG_TABLE . '				WHERE is_dynamic = 1';			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$config[$row['config_name']] = $row['config_value'];			}			$db->sql_freeresult($result);		}		else		{			$config = $cached_config = array();			$sql = 'SELECT config_name, config_value, is_dynamic				FROM ' . CONFIG_TABLE;			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				if (!$row['is_dynamic'])				{					$cached_config[$row['config_name']] = $row['config_value'];				}				$config[$row['config_name']] = $row['config_value'];			}			$db->sql_freeresult($result);			$this->put('config', $cached_config);		}		return $config;	}	/**	* Obtain list of naughty words and build preg style replacement arrays for use by the	* calling script	*/	function obtain_word_list()	{		global $db;		if (($censors = $this->get('_word_censors')) === false)		{			$sql = 'SELECT word, replacement				FROM ' . WORDS_TABLE;			$result = $db->sql_query($sql);			$censors = array();			while ($row = $db->sql_fetchrow($result))			{				$censors['match'][] = get_censor_preg_expression($row['word']);				$censors['replace'][] = $row['replacement'];			}			$db->sql_freeresult($result);			$this->put('_word_censors', $censors);		}		return $censors;	}	/**	* Obtain currently listed icons	*/	function obtain_icons()	{		if (($icons = $this->get('_icons')) === false)		{			global $db;			// Topic icons			$sql = 'SELECT *				FROM ' . ICONS_TABLE . '				ORDER BY icons_order';			$result = $db->sql_query($sql);			$icons = array();			while ($row = $db->sql_fetchrow($result))			{				$icons[$row['icons_id']]['img'] = $row['icons_url'];				$icons[$row['icons_id']]['width'] = (int) $row['icons_width'];				$icons[$row['icons_id']]['height'] = (int) $row['icons_height'];				$icons[$row['icons_id']]['display'] = (bool) $row['display_on_posting'];			}			$db->sql_freeresult($result);			$this->put('_icons', $icons);		}		return $icons;	}	/**	* Obtain ranks	*/	function obtain_ranks()	{		if (($ranks = $this->get('_ranks')) === false)		{			global $db;			$sql = 'SELECT *				FROM ' . RANKS_TABLE . '				ORDER BY rank_min DESC';			$result = $db->sql_query($sql);			$ranks = array();			while ($row = $db->sql_fetchrow($result))			{				if ($row['rank_special'])				{					$ranks['special'][$row['rank_id']] = array(						'rank_title'	=>	$row['rank_title'],						'rank_image'	=>	$row['rank_image']					);				}				else				{					$ranks['normal'][] = array(						'rank_title'	=>	$row['rank_title'],						'rank_min'		=>	$row['rank_min'],						'rank_image'	=>	$row['rank_image']					);				}			}			$db->sql_freeresult($result);			$this->put('_ranks', $ranks);		}		return $ranks;	}	/**	* Obtain allowed extensions	*	* @param mixed $forum_id If false then check for private messaging, if int then check for forum id. If true, then only return extension informations.	*	* @return array allowed extensions array.	*/	function obtain_attach_extensions($forum_id)	{		if (($extensions = $this->get('_extensions')) === false)		{			global $db;			$extensions = array(				'_allowed_post'	=> array(),				'_allowed_pm'	=> array(),			);			// The rule is to only allow those extensions defined. ;)			$sql = 'SELECT e.extension, g.*				FROM ' . EXTENSIONS_TABLE . ' e, ' . EXTENSION_GROUPS_TABLE . ' g				WHERE e.group_id = g.group_id					AND (g.allow_group = 1 OR g.allow_in_pm = 1)';			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$extension = strtolower(trim($row['extension']));				$extensions[$extension] = array(					'display_cat'	=> (int) $row['cat_id'],					'download_mode'	=> (int) $row['download_mode'],					'upload_icon'	=> trim($row['upload_icon']),					'max_filesize'	=> (int) $row['max_filesize'],					'allow_group'	=> $row['allow_group'],					'allow_in_pm'	=> $row['allow_in_pm'],				);				$allowed_forums = ($row['allowed_forums']) ? unserialize(trim($row['allowed_forums'])) : array();				// Store allowed extensions forum wise				if ($row['allow_group'])				{					$extensions['_allowed_post'][$extension] = (!sizeof($allowed_forums)) ? 0 : $allowed_forums;				}				if ($row['allow_in_pm'])				{					$extensions['_allowed_pm'][$extension] = 0;				}			}			$db->sql_freeresult($result);			$this->put('_extensions', $extensions);		}		// Forum post		if ($forum_id === false)		{			// We are checking for private messages, therefore we only need to get the pm extensions...			$return = array('_allowed_' => array());			foreach ($extensions['_allowed_pm'] as $extension => $check)			{				$return['_allowed_'][$extension] = 0;				$return[$extension] = $extensions[$extension];			}			$extensions = $return;		}		else if ($forum_id === true)		{			return $extensions;		}		else		{			$forum_id = (int) $forum_id;			$return = array('_allowed_' => array());			foreach ($extensions['_allowed_post'] as $extension => $check)			{				// Check for allowed forums				if (is_array($check))				{					$allowed = (!in_array($forum_id, $check)) ? false : true;				}				else				{					$allowed = true;				}				if ($allowed)				{					$return['_allowed_'][$extension] = 0;					$return[$extension] = $extensions[$extension];				}			}			$extensions = $return;		}		if (!isset($extensions['_allowed_']))		{			$extensions['_allowed_'] = array();		}		return $extensions;	}	/**	* Obtain active bots	*/	function obtain_bots()	{		if (($bots = $this->get('_bots')) === false)		{			global $db;			switch ($db->sql_layer)			{				case 'mssql':				case 'mssql_odbc':				case 'mssqlnative':					$sql = 'SELECT user_id, bot_agent, bot_ip						FROM ' . BOTS_TABLE . '						WHERE bot_active = 1					ORDER BY LEN(bot_agent) DESC';				break;				case 'firebird':					$sql = 'SELECT user_id, bot_agent, bot_ip						FROM ' . BOTS_TABLE . '						WHERE bot_active = 1					ORDER BY CHAR_LENGTH(bot_agent) DESC';				break;				// LENGTH supported by MySQL, IBM DB2 and Oracle for sure...				default:					$sql = 'SELECT user_id, bot_agent, bot_ip						FROM ' . BOTS_TABLE . '						WHERE bot_active = 1					ORDER BY LENGTH(bot_agent) DESC';				break;			}			$result = $db->sql_query($sql);			$bots = array();			while ($row = $db->sql_fetchrow($result))			{				$bots[] = $row;			}			$db->sql_freeresult($result);			$this->put('_bots', $bots);		}		return $bots;	}	/**	* Obtain cfg file data	*/	function obtain_cfg_items($theme)	{		global $config, $phpbb_root_path;		$parsed_items = array(			'theme'		=> array(),			'template'	=> array(),			'imageset'	=> array()		);		foreach ($parsed_items as $key => $parsed_array)		{			$parsed_array = $this->get('_cfg_' . $key . '_' . $theme[$key . '_path']);			if ($parsed_array === false)			{				$parsed_array = array();			}			$reparse = false;			$filename = $phpbb_root_path . 'styles/' . $theme[$key . '_path'] . '/' . $key . '/' . $key . '.cfg';			if (!file_exists($filename))			{				continue;			}			if (!isset($parsed_array['filetime']) || (($config['load_tplcompile'] && @filemtime($filename) > $parsed_array['filetime'])))			{				$reparse = true;			}			// Re-parse cfg file			if ($reparse)			{				$parsed_array = parse_cfg_file($filename);				$parsed_array['filetime'] = @filemtime($filename);				$this->put('_cfg_' . $key . '_' . $theme[$key . '_path'], $parsed_array);			}			$parsed_items[$key] = $parsed_array;		}		return $parsed_items;	}	/**	* Obtain disallowed usernames	*/	function obtain_disallowed_usernames()	{		if (($usernames = $this->get('_disallowed_usernames')) === false)		{			global $db;			$sql = 'SELECT disallow_username				FROM ' . DISALLOW_TABLE;			$result = $db->sql_query($sql);			$usernames = array();			while ($row = $db->sql_fetchrow($result))			{				$usernames[] = str_replace('%', '.*?', preg_quote(utf8_clean_string($row['disallow_username']), '#'));			}			$db->sql_freeresult($result);			$this->put('_disallowed_usernames', $usernames);		}		return $usernames;	}	/**	* Obtain hooks...	*/	function obtain_hooks()	{		global $phpbb_root_path, $phpEx;		if (($hook_files = $this->get('_hooks')) === false)		{			$hook_files = array();			// Now search for hooks...			$dh = @opendir($phpbb_root_path . 'includes/hooks/');			if ($dh)			{				while (($file = readdir($dh)) !== false)				{					if (strpos($file, 'hook_') === 0 && substr($file, -(strlen($phpEx) + 1)) === '.' . $phpEx)					{						$hook_files[] = substr($file, 0, -(strlen($phpEx) + 1));					}				}				closedir($dh);			}			$this->put('_hooks', $hook_files);		}		return $hook_files;	}}?>
<?php/**** @package install* @version $Id$* @copyright (c) 2007 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}function utf8_new_case_fold($text, $option = 'full'){	static $uniarray = array();	global $phpbb_root_path, $phpEx;	// common is always set	if (!isset($uniarray['c']))	{		$uniarray['c'] = include($phpbb_root_path . 'includes/utf/data/case_fold_c.' . $phpEx);	}	// only set full if we need to	if ($option === 'full' && !isset($uniarray['f']))	{		$uniarray['f'] = include($phpbb_root_path . 'includes/utf/data/case_fold_f.' . $phpEx);	}	// only set simple if we need to	if ($option !== 'full' && !isset($uniarray['s']))	{		$uniarray['s'] = include($phpbb_root_path . 'includes/utf/data/case_fold_s.' . $phpEx);	}	// common is always replaced	$text = strtr($text, $uniarray['c']);	if ($option === 'full')	{		// full replaces a character with multiple characters		$text = strtr($text, $uniarray['f']);	}	else	{		// simple replaces a character with another character		$text = strtr($text, $uniarray['s']);	}	return $text;}function utf8_new_case_fold_nfkc($text, $option = 'full'){	static $fc_nfkc_closure = array(		"\xCD\xBA"	=> "\x20\xCE\xB9",		"\xCF\x92"	=> "\xCF\x85",		"\xCF\x93"	=> "\xCF\x8D",		"\xCF\x94"	=> "\xCF\x8B",		"\xCF\xB2"	=> "\xCF\x83",		"\xCF\xB9"	=> "\xCF\x83",		"\xE1\xB4\xAC"	=> "\x61",		"\xE1\xB4\xAD"	=> "\xC3\xA6",		"\xE1\xB4\xAE"	=> "\x62",		"\xE1\xB4\xB0"	=> "\x64",		"\xE1\xB4\xB1"	=> "\x65",		"\xE1\xB4\xB2"	=> "\xC7\x9D",		"\xE1\xB4\xB3"	=> "\x67",		"\xE1\xB4\xB4"	=> "\x68",		"\xE1\xB4\xB5"	=> "\x69",		"\xE1\xB4\xB6"	=> "\x6A",		"\xE1\xB4\xB7"	=> "\x6B",		"\xE1\xB4\xB8"	=> "\x6C",		"\xE1\xB4\xB9"	=> "\x6D",		"\xE1\xB4\xBA"	=> "\x6E",		"\xE1\xB4\xBC"	=> "\x6F",		"\xE1\xB4\xBD"	=> "\xC8\xA3",		"\xE1\xB4\xBE"	=> "\x70",		"\xE1\xB4\xBF"	=> "\x72",		"\xE1\xB5\x80"	=> "\x74",		"\xE1\xB5\x81"	=> "\x75",		"\xE1\xB5\x82"	=> "\x77",		"\xE2\x82\xA8"	=> "\x72\x73",		"\xE2\x84\x82"	=> "\x63",		"\xE2\x84\x83"	=> "\xC2\xB0\x63",		"\xE2\x84\x87"	=> "\xC9\x9B",		"\xE2\x84\x89"	=> "\xC2\xB0\x66",		"\xE2\x84\x8B"	=> "\x68",		"\xE2\x84\x8C"	=> "\x68",		"\xE2\x84\x8D"	=> "\x68",		"\xE2\x84\x90"	=> "\x69",		"\xE2\x84\x91"	=> "\x69",		"\xE2\x84\x92"	=> "\x6C",		"\xE2\x84\x95"	=> "\x6E",		"\xE2\x84\x96"	=> "\x6E\x6F",		"\xE2\x84\x99"	=> "\x70",		"\xE2\x84\x9A"	=> "\x71",		"\xE2\x84\x9B"	=> "\x72",		"\xE2\x84\x9C"	=> "\x72",		"\xE2\x84\x9D"	=> "\x72",		"\xE2\x84\xA0"	=> "\x73\x6D",		"\xE2\x84\xA1"	=> "\x74\x65\x6C",		"\xE2\x84\xA2"	=> "\x74\x6D",		"\xE2\x84\xA4"	=> "\x7A",		"\xE2\x84\xA8"	=> "\x7A",		"\xE2\x84\xAC"	=> "\x62",		"\xE2\x84\xAD"	=> "\x63",		"\xE2\x84\xB0"	=> "\x65",		"\xE2\x84\xB1"	=> "\x66",		"\xE2\x84\xB3"	=> "\x6D",		"\xE2\x84\xBB"	=> "\x66\x61\x78",		"\xE2\x84\xBE"	=> "\xCE\xB3",		"\xE2\x84\xBF"	=> "\xCF\x80",		"\xE2\x85\x85"	=> "\x64",		"\xE3\x89\x90"	=> "\x70\x74\x65",		"\xE3\x8B\x8C"	=> "\x68\x67",		"\xE3\x8B\x8E"	=> "\x65\x76",		"\xE3\x8B\x8F"	=> "\x6C\x74\x64",		"\xE3\x8D\xB1"	=> "\x68\x70\x61",		"\xE3\x8D\xB3"	=> "\x61\x75",		"\xE3\x8D\xB5"	=> "\x6F\x76",		"\xE3\x8D\xBA"	=> "\x69\x75",		"\xE3\x8E\x80"	=> "\x70\x61",		"\xE3\x8E\x81"	=> "\x6E\x61",		"\xE3\x8E\x82"	=> "\xCE\xBC\x61",		"\xE3\x8E\x83"	=> "\x6D\x61",		"\xE3\x8E\x84"	=> "\x6B\x61",		"\xE3\x8E\x85"	=> "\x6B\x62",		"\xE3\x8E\x86"	=> "\x6D\x62",		"\xE3\x8E\x87"	=> "\x67\x62",		"\xE3\x8E\x8A"	=> "\x70\x66",		"\xE3\x8E\x8B"	=> "\x6E\x66",		"\xE3\x8E\x8C"	=> "\xCE\xBC\x66",		"\xE3\x8E\x90"	=> "\x68\x7A",		"\xE3\x8E\x91"	=> "\x6B\x68\x7A",		"\xE3\x8E\x92"	=> "\x6D\x68\x7A",		"\xE3\x8E\x93"	=> "\x67\x68\x7A",		"\xE3\x8E\x94"	=> "\x74\x68\x7A",		"\xE3\x8E\xA9"	=> "\x70\x61",		"\xE3\x8E\xAA"	=> "\x6B\x70\x61",		"\xE3\x8E\xAB"	=> "\x6D\x70\x61",		"\xE3\x8E\xAC"	=> "\x67\x70\x61",		"\xE3\x8E\xB4"	=> "\x70\x76",		"\xE3\x8E\xB5"	=> "\x6E\x76",		"\xE3\x8E\xB6"	=> "\xCE\xBC\x76",		"\xE3\x8E\xB7"	=> "\x6D\x76",		"\xE3\x8E\xB8"	=> "\x6B\x76",		"\xE3\x8E\xB9"	=> "\x6D\x76",		"\xE3\x8E\xBA"	=> "\x70\x77",		"\xE3\x8E\xBB"	=> "\x6E\x77",		"\xE3\x8E\xBC"	=> "\xCE\xBC\x77",		"\xE3\x8E\xBD"	=> "\x6D\x77",		"\xE3\x8E\xBE"	=> "\x6B\x77",		"\xE3\x8E\xBF"	=> "\x6D\x77",		"\xE3\x8F\x80"	=> "\x6B\xCF\x89",		"\xE3\x8F\x81"	=> "\x6D\xCF\x89",		"\xE3\x8F\x83"	=> "\x62\x71",		"\xE3\x8F\x86"	=> "\x63\xE2\x88\x95\x6B\x67",		"\xE3\x8F\x87"	=> "\x63\x6F\x2E",		"\xE3\x8F\x88"	=> "\x64\x62",		"\xE3\x8F\x89"	=> "\x67\x79",		"\xE3\x8F\x8B"	=> "\x68\x70",		"\xE3\x8F\x8D"	=> "\x6B\x6B",		"\xE3\x8F\x8E"	=> "\x6B\x6D",		"\xE3\x8F\x97"	=> "\x70\x68",		"\xE3\x8F\x99"	=> "\x70\x70\x6D",		"\xE3\x8F\x9A"	=> "\x70\x72",		"\xE3\x8F\x9C"	=> "\x73\x76",		"\xE3\x8F\x9D"	=> "\x77\x62",		"\xE3\x8F\x9E"	=> "\x76\xE2\x88\x95\x6D",		"\xE3\x8F\x9F"	=> "\x61\xE2\x88\x95\x6D",		"\xF0\x9D\x90\x80"	=> "\x61",		"\xF0\x9D\x90\x81"	=> "\x62",		"\xF0\x9D\x90\x82"	=> "\x63",		"\xF0\x9D\x90\x83"	=> "\x64",		"\xF0\x9D\x90\x84"	=> "\x65",		"\xF0\x9D\x90\x85"	=> "\x66",		"\xF0\x9D\x90\x86"	=> "\x67",		"\xF0\x9D\x90\x87"	=> "\x68",		"\xF0\x9D\x90\x88"	=> "\x69",		"\xF0\x9D\x90\x89"	=> "\x6A",		"\xF0\x9D\x90\x8A"	=> "\x6B",		"\xF0\x9D\x90\x8B"	=> "\x6C",		"\xF0\x9D\x90\x8C"	=> "\x6D",		"\xF0\x9D\x90\x8D"	=> "\x6E",		"\xF0\x9D\x90\x8E"	=> "\x6F",		"\xF0\x9D\x90\x8F"	=> "\x70",		"\xF0\x9D\x90\x90"	=> "\x71",		"\xF0\x9D\x90\x91"	=> "\x72",		"\xF0\x9D\x90\x92"	=> "\x73",		"\xF0\x9D\x90\x93"	=> "\x74",		"\xF0\x9D\x90\x94"	=> "\x75",		"\xF0\x9D\x90\x95"	=> "\x76",		"\xF0\x9D\x90\x96"	=> "\x77",		"\xF0\x9D\x90\x97"	=> "\x78",		"\xF0\x9D\x90\x98"	=> "\x79",		"\xF0\x9D\x90\x99"	=> "\x7A",		"\xF0\x9D\x90\xB4"	=> "\x61",		"\xF0\x9D\x90\xB5"	=> "\x62",		"\xF0\x9D\x90\xB6"	=> "\x63",		"\xF0\x9D\x90\xB7"	=> "\x64",		"\xF0\x9D\x90\xB8"	=> "\x65",		"\xF0\x9D\x90\xB9"	=> "\x66",		"\xF0\x9D\x90\xBA"	=> "\x67",		"\xF0\x9D\x90\xBB"	=> "\x68",		"\xF0\x9D\x90\xBC"	=> "\x69",		"\xF0\x9D\x90\xBD"	=> "\x6A",		"\xF0\x9D\x90\xBE"	=> "\x6B",		"\xF0\x9D\x90\xBF"	=> "\x6C",		"\xF0\x9D\x91\x80"	=> "\x6D",		"\xF0\x9D\x91\x81"	=> "\x6E",		"\xF0\x9D\x91\x82"	=> "\x6F",		"\xF0\x9D\x91\x83"	=> "\x70",		"\xF0\x9D\x91\x84"	=> "\x71",		"\xF0\x9D\x91\x85"	=> "\x72",		"\xF0\x9D\x91\x86"	=> "\x73",		"\xF0\x9D\x91\x87"	=> "\x74",		"\xF0\x9D\x91\x88"	=> "\x75",		"\xF0\x9D\x91\x89"	=> "\x76",		"\xF0\x9D\x91\x8A"	=> "\x77",		"\xF0\x9D\x91\x8B"	=> "\x78",		"\xF0\x9D\x91\x8C"	=> "\x79",		"\xF0\x9D\x91\x8D"	=> "\x7A",		"\xF0\x9D\x91\xA8"	=> "\x61",		"\xF0\x9D\x91\xA9"	=> "\x62",		"\xF0\x9D\x91\xAA"	=> "\x63",		"\xF0\x9D\x91\xAB"	=> "\x64",		"\xF0\x9D\x91\xAC"	=> "\x65",		"\xF0\x9D\x91\xAD"	=> "\x66",		"\xF0\x9D\x91\xAE"	=> "\x67",		"\xF0\x9D\x91\xAF"	=> "\x68",		"\xF0\x9D\x91\xB0"	=> "\x69",		"\xF0\x9D\x91\xB1"	=> "\x6A",		"\xF0\x9D\x91\xB2"	=> "\x6B",		"\xF0\x9D\x91\xB3"	=> "\x6C",		"\xF0\x9D\x91\xB4"	=> "\x6D",		"\xF0\x9D\x91\xB5"	=> "\x6E",		"\xF0\x9D\x91\xB6"	=> "\x6F",		"\xF0\x9D\x91\xB7"	=> "\x70",		"\xF0\x9D\x91\xB8"	=> "\x71",		"\xF0\x9D\x91\xB9"	=> "\x72",		"\xF0\x9D\x91\xBA"	=> "\x73",		"\xF0\x9D\x91\xBB"	=> "\x74",		"\xF0\x9D\x91\xBC"	=> "\x75",		"\xF0\x9D\x91\xBD"	=> "\x76",		"\xF0\x9D\x91\xBE"	=> "\x77",		"\xF0\x9D\x91\xBF"	=> "\x78",		"\xF0\x9D\x92\x80"	=> "\x79",		"\xF0\x9D\x92\x81"	=> "\x7A",		"\xF0\x9D\x92\x9C"	=> "\x61",		"\xF0\x9D\x92\x9E"	=> "\x63",		"\xF0\x9D\x92\x9F"	=> "\x64",		"\xF0\x9D\x92\xA2"	=> "\x67",		"\xF0\x9D\x92\xA5"	=> "\x6A",		"\xF0\x9D\x92\xA6"	=> "\x6B",		"\xF0\x9D\x92\xA9"	=> "\x6E",		"\xF0\x9D\x92\xAA"	=> "\x6F",		"\xF0\x9D\x92\xAB"	=> "\x70",		"\xF0\x9D\x92\xAC"	=> "\x71",		"\xF0\x9D\x92\xAE"	=> "\x73",		"\xF0\x9D\x92\xAF"	=> "\x74",		"\xF0\x9D\x92\xB0"	=> "\x75",		"\xF0\x9D\x92\xB1"	=> "\x76",		"\xF0\x9D\x92\xB2"	=> "\x77",		"\xF0\x9D\x92\xB3"	=> "\x78",		"\xF0\x9D\x92\xB4"	=> "\x79",		"\xF0\x9D\x92\xB5"	=> "\x7A",		"\xF0\x9D\x93\x90"	=> "\x61",		"\xF0\x9D\x93\x91"	=> "\x62",		"\xF0\x9D\x93\x92"	=> "\x63",		"\xF0\x9D\x93\x93"	=> "\x64",		"\xF0\x9D\x93\x94"	=> "\x65",		"\xF0\x9D\x93\x95"	=> "\x66",		"\xF0\x9D\x93\x96"	=> "\x67",		"\xF0\x9D\x93\x97"	=> "\x68",		"\xF0\x9D\x93\x98"	=> "\x69",		"\xF0\x9D\x93\x99"	=> "\x6A",		"\xF0\x9D\x93\x9A"	=> "\x6B",		"\xF0\x9D\x93\x9B"	=> "\x6C",		"\xF0\x9D\x93\x9C"	=> "\x6D",		"\xF0\x9D\x93\x9D"	=> "\x6E",		"\xF0\x9D\x93\x9E"	=> "\x6F",		"\xF0\x9D\x93\x9F"	=> "\x70",		"\xF0\x9D\x93\xA0"	=> "\x71",		"\xF0\x9D\x93\xA1"	=> "\x72",		"\xF0\x9D\x93\xA2"	=> "\x73",		"\xF0\x9D\x93\xA3"	=> "\x74",		"\xF0\x9D\x93\xA4"	=> "\x75",		"\xF0\x9D\x93\xA5"	=> "\x76",		"\xF0\x9D\x93\xA6"	=> "\x77",		"\xF0\x9D\x93\xA7"	=> "\x78",		"\xF0\x9D\x93\xA8"	=> "\x79",		"\xF0\x9D\x93\xA9"	=> "\x7A",		"\xF0\x9D\x94\x84"	=> "\x61",		"\xF0\x9D\x94\x85"	=> "\x62",		"\xF0\x9D\x94\x87"	=> "\x64",		"\xF0\x9D\x94\x88"	=> "\x65",		"\xF0\x9D\x94\x89"	=> "\x66",		"\xF0\x9D\x94\x8A"	=> "\x67",		"\xF0\x9D\x94\x8D"	=> "\x6A",		"\xF0\x9D\x94\x8E"	=> "\x6B",		"\xF0\x9D\x94\x8F"	=> "\x6C",		"\xF0\x9D\x94\x90"	=> "\x6D",		"\xF0\x9D\x94\x91"	=> "\x6E",		"\xF0\x9D\x94\x92"	=> "\x6F",		"\xF0\x9D\x94\x93"	=> "\x70",		"\xF0\x9D\x94\x94"	=> "\x71",		"\xF0\x9D\x94\x96"	=> "\x73",		"\xF0\x9D\x94\x97"	=> "\x74",		"\xF0\x9D\x94\x98"	=> "\x75",		"\xF0\x9D\x94\x99"	=> "\x76",		"\xF0\x9D\x94\x9A"	=> "\x77",		"\xF0\x9D\x94\x9B"	=> "\x78",		"\xF0\x9D\x94\x9C"	=> "\x79",		"\xF0\x9D\x94\xB8"	=> "\x61",		"\xF0\x9D\x94\xB9"	=> "\x62",		"\xF0\x9D\x94\xBB"	=> "\x64",		"\xF0\x9D\x94\xBC"	=> "\x65",		"\xF0\x9D\x94\xBD"	=> "\x66",		"\xF0\x9D\x94\xBE"	=> "\x67",		"\xF0\x9D\x95\x80"	=> "\x69",		"\xF0\x9D\x95\x81"	=> "\x6A",		"\xF0\x9D\x95\x82"	=> "\x6B",		"\xF0\x9D\x95\x83"	=> "\x6C",		"\xF0\x9D\x95\x84"	=> "\x6D",		"\xF0\x9D\x95\x86"	=> "\x6F",		"\xF0\x9D\x95\x8A"	=> "\x73",		"\xF0\x9D\x95\x8B"	=> "\x74",		"\xF0\x9D\x95\x8C"	=> "\x75",		"\xF0\x9D\x95\x8D"	=> "\x76",		"\xF0\x9D\x95\x8E"	=> "\x77",		"\xF0\x9D\x95\x8F"	=> "\x78",		"\xF0\x9D\x95\x90"	=> "\x79",		"\xF0\x9D\x95\xAC"	=> "\x61",		"\xF0\x9D\x95\xAD"	=> "\x62",		"\xF0\x9D\x95\xAE"	=> "\x63",		"\xF0\x9D\x95\xAF"	=> "\x64",		"\xF0\x9D\x95\xB0"	=> "\x65",		"\xF0\x9D\x95\xB1"	=> "\x66",		"\xF0\x9D\x95\xB2"	=> "\x67",		"\xF0\x9D\x95\xB3"	=> "\x68",		"\xF0\x9D\x95\xB4"	=> "\x69",		"\xF0\x9D\x95\xB5"	=> "\x6A",		"\xF0\x9D\x95\xB6"	=> "\x6B",		"\xF0\x9D\x95\xB7"	=> "\x6C",		"\xF0\x9D\x95\xB8"	=> "\x6D",		"\xF0\x9D\x95\xB9"	=> "\x6E",		"\xF0\x9D\x95\xBA"	=> "\x6F",		"\xF0\x9D\x95\xBB"	=> "\x70",		"\xF0\x9D\x95\xBC"	=> "\x71",		"\xF0\x9D\x95\xBD"	=> "\x72",		"\xF0\x9D\x95\xBE"	=> "\x73",		"\xF0\x9D\x95\xBF"	=> "\x74",		"\xF0\x9D\x96\x80"	=> "\x75",		"\xF0\x9D\x96\x81"	=> "\x76",		"\xF0\x9D\x96\x82"	=> "\x77",		"\xF0\x9D\x96\x83"	=> "\x78",		"\xF0\x9D\x96\x84"	=> "\x79",		"\xF0\x9D\x96\x85"	=> "\x7A",		"\xF0\x9D\x96\xA0"	=> "\x61",		"\xF0\x9D\x96\xA1"	=> "\x62",		"\xF0\x9D\x96\xA2"	=> "\x63",		"\xF0\x9D\x96\xA3"	=> "\x64",		"\xF0\x9D\x96\xA4"	=> "\x65",		"\xF0\x9D\x96\xA5"	=> "\x66",		"\xF0\x9D\x96\xA6"	=> "\x67",		"\xF0\x9D\x96\xA7"	=> "\x68",		"\xF0\x9D\x96\xA8"	=> "\x69",		"\xF0\x9D\x96\xA9"	=> "\x6A",		"\xF0\x9D\x96\xAA"	=> "\x6B",		"\xF0\x9D\x96\xAB"	=> "\x6C",		"\xF0\x9D\x96\xAC"	=> "\x6D",		"\xF0\x9D\x96\xAD"	=> "\x6E",		"\xF0\x9D\x96\xAE"	=> "\x6F",		"\xF0\x9D\x96\xAF"	=> "\x70",		"\xF0\x9D\x96\xB0"	=> "\x71",		"\xF0\x9D\x96\xB1"	=> "\x72",		"\xF0\x9D\x96\xB2"	=> "\x73",		"\xF0\x9D\x96\xB3"	=> "\x74",		"\xF0\x9D\x96\xB4"	=> "\x75",		"\xF0\x9D\x96\xB5"	=> "\x76",		"\xF0\x9D\x96\xB6"	=> "\x77",		"\xF0\x9D\x96\xB7"	=> "\x78",		"\xF0\x9D\x96\xB8"	=> "\x79",		"\xF0\x9D\x96\xB9"	=> "\x7A",		"\xF0\x9D\x97\x94"	=> "\x61",		"\xF0\x9D\x97\x95"	=> "\x62",		"\xF0\x9D\x97\x96"	=> "\x63",		"\xF0\x9D\x97\x97"	=> "\x64",		"\xF0\x9D\x97\x98"	=> "\x65",		"\xF0\x9D\x97\x99"	=> "\x66",		"\xF0\x9D\x97\x9A"	=> "\x67",		"\xF0\x9D\x97\x9B"	=> "\x68",		"\xF0\x9D\x97\x9C"	=> "\x69",		"\xF0\x9D\x97\x9D"	=> "\x6A",		"\xF0\x9D\x97\x9E"	=> "\x6B",		"\xF0\x9D\x97\x9F"	=> "\x6C",		"\xF0\x9D\x97\xA0"	=> "\x6D",		"\xF0\x9D\x97\xA1"	=> "\x6E",		"\xF0\x9D\x97\xA2"	=> "\x6F",		"\xF0\x9D\x97\xA3"	=> "\x70",		"\xF0\x9D\x97\xA4"	=> "\x71",		"\xF0\x9D\x97\xA5"	=> "\x72",		"\xF0\x9D\x97\xA6"	=> "\x73",		"\xF0\x9D\x97\xA7"	=> "\x74",		"\xF0\x9D\x97\xA8"	=> "\x75",		"\xF0\x9D\x97\xA9"	=> "\x76",		"\xF0\x9D\x97\xAA"	=> "\x77",		"\xF0\x9D\x97\xAB"	=> "\x78",		"\xF0\x9D\x97\xAC"	=> "\x79",		"\xF0\x9D\x97\xAD"	=> "\x7A",		"\xF0\x9D\x98\x88"	=> "\x61",		"\xF0\x9D\x98\x89"	=> "\x62",		"\xF0\x9D\x98\x8A"	=> "\x63",		"\xF0\x9D\x98\x8B"	=> "\x64",		"\xF0\x9D\x98\x8C"	=> "\x65",		"\xF0\x9D\x98\x8D"	=> "\x66",		"\xF0\x9D\x98\x8E"	=> "\x67",		"\xF0\x9D\x98\x8F"	=> "\x68",		"\xF0\x9D\x98\x90"	=> "\x69",		"\xF0\x9D\x98\x91"	=> "\x6A",		"\xF0\x9D\x98\x92"	=> "\x6B",		"\xF0\x9D\x98\x93"	=> "\x6C",		"\xF0\x9D\x98\x94"	=> "\x6D",		"\xF0\x9D\x98\x95"	=> "\x6E",		"\xF0\x9D\x98\x96"	=> "\x6F",		"\xF0\x9D\x98\x97"	=> "\x70",		"\xF0\x9D\x98\x98"	=> "\x71",		"\xF0\x9D\x98\x99"	=> "\x72",		"\xF0\x9D\x98\x9A"	=> "\x73",		"\xF0\x9D\x98\x9B"	=> "\x74",		"\xF0\x9D\x98\x9C"	=> "\x75",		"\xF0\x9D\x98\x9D"	=> "\x76",		"\xF0\x9D\x98\x9E"	=> "\x77",		"\xF0\x9D\x98\x9F"	=> "\x78",		"\xF0\x9D\x98\xA0"	=> "\x79",		"\xF0\x9D\x98\xA1"	=> "\x7A",		"\xF0\x9D\x98\xBC"	=> "\x61",		"\xF0\x9D\x98\xBD"	=> "\x62",		"\xF0\x9D\x98\xBE"	=> "\x63",		"\xF0\x9D\x98\xBF"	=> "\x64",		"\xF0\x9D\x99\x80"	=> "\x65",		"\xF0\x9D\x99\x81"	=> "\x66",		"\xF0\x9D\x99\x82"	=> "\x67",		"\xF0\x9D\x99\x83"	=> "\x68",		"\xF0\x9D\x99\x84"	=> "\x69",		"\xF0\x9D\x99\x85"	=> "\x6A",		"\xF0\x9D\x99\x86"	=> "\x6B",		"\xF0\x9D\x99\x87"	=> "\x6C",		"\xF0\x9D\x99\x88"	=> "\x6D",		"\xF0\x9D\x99\x89"	=> "\x6E",		"\xF0\x9D\x99\x8A"	=> "\x6F",		"\xF0\x9D\x99\x8B"	=> "\x70",		"\xF0\x9D\x99\x8C"	=> "\x71",		"\xF0\x9D\x99\x8D"	=> "\x72",		"\xF0\x9D\x99\x8E"	=> "\x73",		"\xF0\x9D\x99\x8F"	=> "\x74",		"\xF0\x9D\x99\x90"	=> "\x75",		"\xF0\x9D\x99\x91"	=> "\x76",		"\xF0\x9D\x99\x92"	=> "\x77",		"\xF0\x9D\x99\x93"	=> "\x78",		"\xF0\x9D\x99\x94"	=> "\x79",		"\xF0\x9D\x99\x95"	=> "\x7A",		"\xF0\x9D\x99\xB0"	=> "\x61",		"\xF0\x9D\x99\xB1"	=> "\x62",		"\xF0\x9D\x99\xB2"	=> "\x63",		"\xF0\x9D\x99\xB3"	=> "\x64",		"\xF0\x9D\x99\xB4"	=> "\x65",		"\xF0\x9D\x99\xB5"	=> "\x66",		"\xF0\x9D\x99\xB6"	=> "\x67",		"\xF0\x9D\x99\xB7"	=> "\x68",		"\xF0\x9D\x99\xB8"	=> "\x69",		"\xF0\x9D\x99\xB9"	=> "\x6A",		"\xF0\x9D\x99\xBA"	=> "\x6B",		"\xF0\x9D\x99\xBB"	=> "\x6C",		"\xF0\x9D\x99\xBC"	=> "\x6D",		"\xF0\x9D\x99\xBD"	=> "\x6E",		"\xF0\x9D\x99\xBE"	=> "\x6F",		"\xF0\x9D\x99\xBF"	=> "\x70",		"\xF0\x9D\x9A\x80"	=> "\x71",		"\xF0\x9D\x9A\x81"	=> "\x72",		"\xF0\x9D\x9A\x82"	=> "\x73",		"\xF0\x9D\x9A\x83"	=> "\x74",		"\xF0\x9D\x9A\x84"	=> "\x75",		"\xF0\x9D\x9A\x85"	=> "\x76",		"\xF0\x9D\x9A\x86"	=> "\x77",		"\xF0\x9D\x9A\x87"	=> "\x78",		"\xF0\x9D\x9A\x88"	=> "\x79",		"\xF0\x9D\x9A\x89"	=> "\x7A",		"\xF0\x9D\x9A\xA8"	=> "\xCE\xB1",		"\xF0\x9D\x9A\xA9"	=> "\xCE\xB2",		"\xF0\x9D\x9A\xAA"	=> "\xCE\xB3",		"\xF0\x9D\x9A\xAB"	=> "\xCE\xB4",		"\xF0\x9D\x9A\xAC"	=> "\xCE\xB5",		"\xF0\x9D\x9A\xAD"	=> "\xCE\xB6",		"\xF0\x9D\x9A\xAE"	=> "\xCE\xB7",		"\xF0\x9D\x9A\xAF"	=> "\xCE\xB8",		"\xF0\x9D\x9A\xB0"	=> "\xCE\xB9",		"\xF0\x9D\x9A\xB1"	=> "\xCE\xBA",		"\xF0\x9D\x9A\xB2"	=> "\xCE\xBB",		"\xF0\x9D\x9A\xB3"	=> "\xCE\xBC",		"\xF0\x9D\x9A\xB4"	=> "\xCE\xBD",		"\xF0\x9D\x9A\xB5"	=> "\xCE\xBE",		"\xF0\x9D\x9A\xB6"	=> "\xCE\xBF",		"\xF0\x9D\x9A\xB7"	=> "\xCF\x80",		"\xF0\x9D\x9A\xB8"	=> "\xCF\x81",		"\xF0\x9D\x9A\xB9"	=> "\xCE\xB8",		"\xF0\x9D\x9A\xBA"	=> "\xCF\x83",		"\xF0\x9D\x9A\xBB"	=> "\xCF\x84",		"\xF0\x9D\x9A\xBC"	=> "\xCF\x85",		"\xF0\x9D\x9A\xBD"	=> "\xCF\x86",		"\xF0\x9D\x9A\xBE"	=> "\xCF\x87",		"\xF0\x9D\x9A\xBF"	=> "\xCF\x88",		"\xF0\x9D\x9B\x80"	=> "\xCF\x89",		"\xF0\x9D\x9B\x93"	=> "\xCF\x83",		"\xF0\x9D\x9B\xA2"	=> "\xCE\xB1",		"\xF0\x9D\x9B\xA3"	=> "\xCE\xB2",		"\xF0\x9D\x9B\xA4"	=> "\xCE\xB3",		"\xF0\x9D\x9B\xA5"	=> "\xCE\xB4",		"\xF0\x9D\x9B\xA6"	=> "\xCE\xB5",		"\xF0\x9D\x9B\xA7"	=> "\xCE\xB6",		"\xF0\x9D\x9B\xA8"	=> "\xCE\xB7",		"\xF0\x9D\x9B\xA9"	=> "\xCE\xB8",		"\xF0\x9D\x9B\xAA"	=> "\xCE\xB9",		"\xF0\x9D\x9B\xAB"	=> "\xCE\xBA",		"\xF0\x9D\x9B\xAC"	=> "\xCE\xBB",		"\xF0\x9D\x9B\xAD"	=> "\xCE\xBC",		"\xF0\x9D\x9B\xAE"	=> "\xCE\xBD",		"\xF0\x9D\x9B\xAF"	=> "\xCE\xBE",		"\xF0\x9D\x9B\xB0"	=> "\xCE\xBF",		"\xF0\x9D\x9B\xB1"	=> "\xCF\x80",		"\xF0\x9D\x9B\xB2"	=> "\xCF\x81",		"\xF0\x9D\x9B\xB3"	=> "\xCE\xB8",		"\xF0\x9D\x9B\xB4"	=> "\xCF\x83",		"\xF0\x9D\x9B\xB5"	=> "\xCF\x84",		"\xF0\x9D\x9B\xB6"	=> "\xCF\x85",		"\xF0\x9D\x9B\xB7"	=> "\xCF\x86",		"\xF0\x9D\x9B\xB8"	=> "\xCF\x87",		"\xF0\x9D\x9B\xB9"	=> "\xCF\x88",		"\xF0\x9D\x9B\xBA"	=> "\xCF\x89",		"\xF0\x9D\x9C\x8D"	=> "\xCF\x83",		"\xF0\x9D\x9C\x9C"	=> "\xCE\xB1",		"\xF0\x9D\x9C\x9D"	=> "\xCE\xB2",		"\xF0\x9D\x9C\x9E"	=> "\xCE\xB3",		"\xF0\x9D\x9C\x9F"	=> "\xCE\xB4",		"\xF0\x9D\x9C\xA0"	=> "\xCE\xB5",		"\xF0\x9D\x9C\xA1"	=> "\xCE\xB6",		"\xF0\x9D\x9C\xA2"	=> "\xCE\xB7",		"\xF0\x9D\x9C\xA3"	=> "\xCE\xB8",		"\xF0\x9D\x9C\xA4"	=> "\xCE\xB9",		"\xF0\x9D\x9C\xA5"	=> "\xCE\xBA",		"\xF0\x9D\x9C\xA6"	=> "\xCE\xBB",		"\xF0\x9D\x9C\xA7"	=> "\xCE\xBC",		"\xF0\x9D\x9C\xA8"	=> "\xCE\xBD",		"\xF0\x9D\x9C\xA9"	=> "\xCE\xBE",		"\xF0\x9D\x9C\xAA"	=> "\xCE\xBF",		"\xF0\x9D\x9C\xAB"	=> "\xCF\x80",		"\xF0\x9D\x9C\xAC"	=> "\xCF\x81",		"\xF0\x9D\x9C\xAD"	=> "\xCE\xB8",		"\xF0\x9D\x9C\xAE"	=> "\xCF\x83",		"\xF0\x9D\x9C\xAF"	=> "\xCF\x84",		"\xF0\x9D\x9C\xB0"	=> "\xCF\x85",		"\xF0\x9D\x9C\xB1"	=> "\xCF\x86",		"\xF0\x9D\x9C\xB2"	=> "\xCF\x87",		"\xF0\x9D\x9C\xB3"	=> "\xCF\x88",		"\xF0\x9D\x9C\xB4"	=> "\xCF\x89",		"\xF0\x9D\x9D\x87"	=> "\xCF\x83",		"\xF0\x9D\x9D\x96"	=> "\xCE\xB1",		"\xF0\x9D\x9D\x97"	=> "\xCE\xB2",		"\xF0\x9D\x9D\x98"	=> "\xCE\xB3",		"\xF0\x9D\x9D\x99"	=> "\xCE\xB4",		"\xF0\x9D\x9D\x9A"	=> "\xCE\xB5",		"\xF0\x9D\x9D\x9B"	=> "\xCE\xB6",		"\xF0\x9D\x9D\x9C"	=> "\xCE\xB7",		"\xF0\x9D\x9D\x9D"	=> "\xCE\xB8",		"\xF0\x9D\x9D\x9E"	=> "\xCE\xB9",		"\xF0\x9D\x9D\x9F"	=> "\xCE\xBA",		"\xF0\x9D\x9D\xA0"	=> "\xCE\xBB",		"\xF0\x9D\x9D\xA1"	=> "\xCE\xBC",		"\xF0\x9D\x9D\xA2"	=> "\xCE\xBD",		"\xF0\x9D\x9D\xA3"	=> "\xCE\xBE",		"\xF0\x9D\x9D\xA4"	=> "\xCE\xBF",		"\xF0\x9D\x9D\xA5"	=> "\xCF\x80",		"\xF0\x9D\x9D\xA6"	=> "\xCF\x81",		"\xF0\x9D\x9D\xA7"	=> "\xCE\xB8",		"\xF0\x9D\x9D\xA8"	=> "\xCF\x83",		"\xF0\x9D\x9D\xA9"	=> "\xCF\x84",		"\xF0\x9D\x9D\xAA"	=> "\xCF\x85",		"\xF0\x9D\x9D\xAB"	=> "\xCF\x86",		"\xF0\x9D\x9D\xAC"	=> "\xCF\x87",		"\xF0\x9D\x9D\xAD"	=> "\xCF\x88",		"\xF0\x9D\x9D\xAE"	=> "\xCF\x89",		"\xF0\x9D\x9E\x81"	=> "\xCF\x83",		"\xF0\x9D\x9E\x90"	=> "\xCE\xB1",		"\xF0\x9D\x9E\x91"	=> "\xCE\xB2",		"\xF0\x9D\x9E\x92"	=> "\xCE\xB3",		"\xF0\x9D\x9E\x93"	=> "\xCE\xB4",		"\xF0\x9D\x9E\x94"	=> "\xCE\xB5",		"\xF0\x9D\x9E\x95"	=> "\xCE\xB6",		"\xF0\x9D\x9E\x96"	=> "\xCE\xB7",		"\xF0\x9D\x9E\x97"	=> "\xCE\xB8",		"\xF0\x9D\x9E\x98"	=> "\xCE\xB9",		"\xF0\x9D\x9E\x99"	=> "\xCE\xBA",		"\xF0\x9D\x9E\x9A"	=> "\xCE\xBB",		"\xF0\x9D\x9E\x9B"	=> "\xCE\xBC",		"\xF0\x9D\x9E\x9C"	=> "\xCE\xBD",		"\xF0\x9D\x9E\x9D"	=> "\xCE\xBE",		"\xF0\x9D\x9E\x9E"	=> "\xCE\xBF",		"\xF0\x9D\x9E\x9F"	=> "\xCF\x80",		"\xF0\x9D\x9E\xA0"	=> "\xCF\x81",		"\xF0\x9D\x9E\xA1"	=> "\xCE\xB8",		"\xF0\x9D\x9E\xA2"	=> "\xCF\x83",		"\xF0\x9D\x9E\xA3"	=> "\xCF\x84",		"\xF0\x9D\x9E\xA4"	=> "\xCF\x85",		"\xF0\x9D\x9E\xA5"	=> "\xCF\x86",		"\xF0\x9D\x9E\xA6"	=> "\xCF\x87",		"\xF0\x9D\x9E\xA7"	=> "\xCF\x88",		"\xF0\x9D\x9E\xA8"	=> "\xCF\x89",		"\xF0\x9D\x9E\xBB"	=> "\xCF\x83",		"\xF0\x9D\x9F\x8A"	=> "\xCF\x9D",	);	global $phpbb_root_path, $phpEx;	// do the case fold	$text = utf8_new_case_fold($text, $option);	if (!class_exists('utf_normalizer'))	{		global $phpbb_root_path, $phpEx;		include($phpbb_root_path . 'includes/utf/utf_normalizer.' . $phpEx);	}	// convert to NFKC	utf_new_normalizer::nfkc($text);	// FC_NFKC_Closure, http://www.unicode.org/Public/5.0.0/ucd/DerivedNormalizationProps.txt	$text = strtr($text, $fc_nfkc_closure);	return $text;}return array(''=>'i',''=>'!',''=>'a',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'o',''=>'o',''=>'',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>'`',''=>'`',''=>'',''=>'^',''=>'^',''=>'_',''=>'_',''=>'_',''=>'_',''=>'',''=>'-',''=>'-',''=>'-',''=>'-',''=>'-',''=>'-',''=>'',''=>'',''=>'',''=>',',''=>',',''=>'',''=>'',''=>';',''=>';',''=>':',''=>':',''=>':',''=>':',''=>'::=',''=>'.',''=>'.',''=>'.',''=>'..',''=>'...',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'4',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'L',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'(',''=>'(1)',''=>'(l)',''=>'(10)',''=>'(11)',''=>'(12)',''=>'(13)',''=>'(14)',''=>'(15)',''=>'(16)',''=>'(17)',''=>'(18)',''=>'(19)',''=>'(2)',''=>'(20)',''=>'(3)',''=>'(4)',''=>'(5)',''=>'(6)',''=>'(7)',''=>'(8)',''=>'(9)',''=>'(a)',''=>'(b)',''=>'(c)',''=>'(d)',''=>'(e)',''=>'(f)',''=>'(g)',''=>'(h)',''=>'(i)',''=>'(j)',''=>'(k)',''=>'(m)',''=>'(n)',''=>'(o)',''=>'(p)',''=>'(q)',''=>'(r)',''=>'(s)',''=>'(t)',''=>'(u)',''=>'(v)',''=>'(w)',''=>'(x)',''=>'(y)',''=>'(z)',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>')',''=>'[',''=>'[',''=>']',''=>']',''=>'{',''=>'}',''=>'',''=>'',''=>'',''=>'',''=>'@',''=>'*',''=>'/',''=>'/',''=>'/',''=>'\\',''=>'&',''=>'#',''=>'%',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','\''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','"'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'+',''=>'+',''=>'<',''=>'<',''=>'=',''=>'==',''=>'===',''=>'>',''=>'>',''=>'',''=>'',''=>'~',''=>'~',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'$',''=>'',''=>'Y',''=>'W',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'',''=>'',''=>'0',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1','l'=>'l',''=>'l',''=>'1',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'',''=>'l',''=>'l',''=>'l',''=>'l',''=>'',''=>'1.',''=>'l',''=>'1',''=>'',''=>'10.',''=>'10',''=>'10',''=>'10',''=>'11.',''=>'11',''=>'11',''=>'11',''=>'12.',''=>'12',''=>'12',''=>'12',''=>'13.',''=>'13',''=>'13',''=>'14.',''=>'14',''=>'14',''=>'15.',''=>'15',''=>'15',''=>'16.',''=>'16',''=>'16',''=>'17.',''=>'17',''=>'17',''=>'18.',''=>'18',''=>'18',''=>'19.',''=>'19',''=>'19',''=>'lj',''=>'1',''=>'1',''=>'1',''=>'2',''=>'2',''=>'2',''=>'2',''=>'2',''=>'2',''=>'2',''=>'',''=>'',''=>'2.',''=>'20.',''=>'20',''=>'20',''=>'21',''=>'21',''=>'22',''=>'22',''=>'23',''=>'23',''=>'24',''=>'24',''=>'25',''=>'26',''=>'27',''=>'28',''=>'29',''=>'2',''=>'2',''=>'2',''=>'3',''=>'3',''=>'3',''=>'3',''=>'3',''=>'3',''=>'',''=>'',''=>'3.',''=>'30',''=>'31',''=>'3',''=>'3',''=>'3',''=>'4',''=>'4',''=>'4',''=>'4',''=>'4',''=>'4',''=>'4',''=>'',''=>'4.',''=>'4',''=>'4',''=>'4',''=>'4',''=>'5',''=>'5',''=>'5',''=>'5',''=>'5',''=>'5',''=>'',''=>'5.',''=>'5',''=>'5',''=>'5',''=>'6',''=>'6',''=>'6',''=>'6',''=>'6',''=>'6',''=>'6',''=>'',''=>'6.',''=>'6',''=>'6',''=>'6',''=>'7',''=>'7',''=>'7',''=>'7',''=>'7',''=>'7',''=>'',''=>'',''=>'7.',''=>'7',''=>'7',''=>'7',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'',''=>'',''=>'8.',''=>'8',''=>'8',''=>'8',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'',''=>'',''=>'9.',''=>'9',''=>'9',''=>'9',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a/c',''=>'a/s',''=>'ae',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c/o',''=>'c/u',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'dz',''=>'d',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'E',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'',''=>'',''=>'',''=>'',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'ii',''=>'iii',''=>'ij',''=>'iv',''=>'ix',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'nj',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'oe',''=>'o',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'q',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'',''=>'',''=>'',''=>'',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'t',''=>'',''=>'',''=>'t',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'vi',''=>'vii',''=>'viii',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'xi',''=>'xii',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'','?'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','!'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'ae',''=>'r',''=>'r',''=>'',''=>'',''=>'i',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'o',''=>'o',''=>'c',''=>'',''=>'y',''=>'y',''=>'h',''=>'',''=>'',''=>'',''=>'',''=>'q',''=>'n',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'   ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'o',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'y',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'w',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'P',''=>'d',''=>'J',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'P',''=>'P',''=>'',''=>'d',''=>'d',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'J',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'x',''=>'x',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'P',''=>'',''=>'d',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'',''=>'',''=>'',''=>'',''=>'J',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'J',''=>'',''=>'',''=>'',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','|'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'C',''=>'F',''=>'',''=>'FAX',''=>'N',''=>'No',''=>'Q',''=>'Rs',''=>'T',''=>'TEL',''=>'U',''=>'W',''=>'W',''=>'X',''=>'Y',''=>'',''=>'',''=>'',''=>'c',''=>'Y',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'b',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'a',''=>'b',''=>'b',''=>'c',''=>'d',''=>'d',''=>'e',''=>'',''=>'',''=>'',''=>'f',''=>'g',''=>'h',''=>'h',''=>'h',''=>'h',''=>'i',''=>'i',''=>'i',''=>'j',''=>'j',''=>'m',''=>'n',''=>'n',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'p',''=>'p',''=>'',''=>'q',''=>'',''=>'',''=>'r',''=>'r',''=>'s',''=>'u',''=>'u',''=>'v',''=>'v',''=>'w',''=>'w',''=>'x',''=>'x',''=>'y',''=>'y',''=>'',''=>'',''=>'',''=>'',''=>'i',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'A',''=>'J',''=>'H',''=>'V',''=>'P',''=>'B',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'A',''=>'B',''=>'C',''=>'D',''=>'E',''=>'F',''=>'G',''=>'H',''=>'J',''=>'K',''=>'L',''=>'M',''=>'P',''=>'R',''=>'S',''=>'V',''=>'Z');?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class mcp_main_info{	function module()	{		return array(			'filename'	=> 'mcp_main',			'title'		=> 'MCP_MAIN',			'version'	=> '1.0.0',			'modes'		=> array(				'front'			=> array('title' => 'MCP_MAIN_FRONT', 'auth' => '', 'cat' => array('MCP_MAIN')),				'forum_view'	=> array('title' => 'MCP_MAIN_FORUM_VIEW', 'auth' => 'acl_m_,$id', 'cat' => array('MCP_MAIN')),				'topic_view'	=> array('title' => 'MCP_MAIN_TOPIC_VIEW', 'auth' => 'acl_m_,$id', 'cat' => array('MCP_MAIN')),				'post_details'	=> array('title' => 'MCP_MAIN_POST_DETAILS', 'auth' => 'acl_m_,$id || (!$id && aclf_m_)', 'cat' => array('MCP_MAIN')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php return array(0=>'0',1=>'1',2=>'2',3=>'3',4=>'4',5=>'5',6=>'6',7=>'7',8=>'8',9=>'9','A'=>'a','B'=>'b','C'=>'c','D'=>'d','E'=>'e','F'=>'f','G'=>'g','H'=>'h','I'=>'i','J'=>'j','K'=>'k','L'=>'l','M'=>'m','N'=>'n','O'=>'o','P'=>'p','Q'=>'q','R'=>'r','S'=>'s','T'=>'t','U'=>'u','V'=>'v','W'=>'w','X'=>'x','Y'=>'y','Z'=>'z','a'=>'a','b'=>'b','c'=>'c','d'=>'d','e'=>'e','f'=>'f','g'=>'g','h'=>'h','i'=>'i','j'=>'j','k'=>'k','l'=>'l','m'=>'m','n'=>'n','o'=>'o','p'=>'p','q'=>'q','r'=>'r','s'=>'s','t'=>'t','u'=>'u','v'=>'v','w'=>'w','x'=>'x','y'=>'y','z'=>'z',''=>'',''=>'2',''=>'3',''=>'',''=>'1',''=>'',''=>'1/4',''=>'1/2',''=>'3/4',''=>'',''=>'',''=>'',''=>'',''=>'ae',''=>'',''=>'ae',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'oe',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'ss',''=>'',''=>'',''=>'',''=>'',''=>'ae',''=>'',''=>'ae',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'oe',''=>'',''=>'',''=>'',''=>'',''=>'ue',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'i',''=>'',''=>'ij',''=>'ij',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'oe',''=>'oe',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'hv',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'oi',''=>'oi',''=>'',''=>'',''=>'yr',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'lj',''=>'',''=>'lj',''=>'nj',''=>'',''=>'nj',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'dz',''=>'',''=>'dz',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'ou',''=>'ou',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_php_info_info{	function module()	{		return array(			'filename'	=> 'acp_php_info',			'title'		=> 'ACP_PHP_INFO',			'version'	=> '1.0.0',			'modes'		=> array(				'info'		=> array('title' => 'ACP_PHP_INFO', 'auth' => 'acl_a_phpinfo', 'cat' => array('ACP_GENERAL_TASKS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** groups [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ALREADY_DEFAULT_GROUP'		=> 'The selected group is already your default group.',	'ALREADY_IN_GROUP'			=> 'You are already a member of the selected group.',	'ALREADY_IN_GROUP_PENDING'	=> 'You already requested joining the selected group.',	'CANNOT_JOIN_GROUP'			=> 'You are not able to join this group. You are only able to join open and freely open groups.',	'CANNOT_RESIGN_GROUP'		=> 'You are not able to resign from this group. You are only able to resign from open and freely open groups.',	'CHANGED_DEFAULT_GROUP'		=> 'Successfully changed default group.',	'GROUP_AVATAR'						=> 'Group avatar',	'GROUP_CHANGE_DEFAULT'				=> 'Are you sure you want to change your default membership to the group %s?',	'GROUP_CLOSED'						=> 'Closed',	'GROUP_DESC'						=> 'Group description',	'GROUP_HIDDEN'						=> 'Hidden',	'GROUP_INFORMATION'					=> 'Usergroup information',	'GROUP_IS_CLOSED'					=> 'This is a closed group, new members can only join upon invitation of a group leader.',	'GROUP_IS_FREE'						=> 'This is a freely open group, all new members are welcome.',	'GROUP_IS_HIDDEN'					=> 'This is a hidden group, only members of this group can view its membership.',	'GROUP_IS_OPEN'						=> 'This is an open group, members can apply to join.',	'GROUP_IS_SPECIAL'					=> 'This is a special group, special groups are managed by the board administrators.',	'GROUP_JOIN'						=> 'Join group',	'GROUP_JOIN_CONFIRM'				=> 'Are you sure you want to join the selected group?',	'GROUP_JOIN_PENDING'				=> 'Request to join group',	'GROUP_JOIN_PENDING_CONFIRM'		=> 'Are you sure you want to request joining the selected group?',	'GROUP_JOINED'						=> 'Successfully joined selected group.',	'GROUP_JOINED_PENDING'				=> 'Successfully requested group membership. Please wait for a group leader to approve your membership.',	'GROUP_LIST'						=> 'Manage users',	'GROUP_MEMBERS'						=> 'Group members',	'GROUP_NAME'						=> 'Group name',	'GROUP_OPEN'						=> 'Open',	'GROUP_RANK'						=> 'Group rank',	'GROUP_RESIGN_MEMBERSHIP'			=> 'Resign group membership',	'GROUP_RESIGN_MEMBERSHIP_CONFIRM'	=> 'Are you sure you want to resign your membership from the selected group?',	'GROUP_RESIGN_PENDING'				=> 'Resign a pending group membership',	'GROUP_RESIGN_PENDING_CONFIRM'		=> 'Are you sure you want to resign your pending membership from the selected group?',	'GROUP_RESIGNED_MEMBERSHIP'			=> 'You were successfully removed from the selected group.',	'GROUP_RESIGNED_PENDING'			=> 'Your pending membership was successfully removed from the selected group.',	'GROUP_TYPE'						=> 'Group type',	'GROUP_UNDISCLOSED'					=> 'Hidden group',	'FORUM_UNDISCLOSED'					=> 'Moderating hidden forum(s)',	'LOGIN_EXPLAIN_GROUP'	=> 'You need to login to view group details.',	'NO_LEADERS'					=> 'You are not a leader of any group.',	'NOT_LEADER_OF_GROUP'			=> 'The requested operation cannot be taken because you are not a leader of the selected group.',	'NOT_MEMBER_OF_GROUP'			=> 'The requested operation cannot be taken because you are not a member of the selected group or your membership has not been approved yet.',	'NOT_RESIGN_FROM_DEFAULT_GROUP'	=> 'You are not allowed to resign from your default group.',		'PRIMARY_GROUP'		=> 'Primary group',	'REMOVE_SELECTED'		=> 'Remove selected',	'USER_GROUP_CHANGE'			=> 'From %1$s group to %2$s',	'USER_GROUP_DEMOTE'			=> 'Demote leadership',	'USER_GROUP_DEMOTE_CONFIRM'	=> 'Are you sure you want to demote as group leader from the selected group?',	'USER_GROUP_DEMOTED'		=> 'Successfully demoted your leadership.',));?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_words_info{	function module()	{		return array(			'filename'	=> 'acp_words',			'title'		=> 'ACP_WORDS',			'version'	=> '1.0.0',			'modes'		=> array(				'words'		=> array('title' => 'ACP_WORDS', 'auth' => 'acl_a_words', 'cat' => array('ACP_MESSAGES')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2006, 2008 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Placeholder for autoload*/if (!class_exists('phpbb_default_captcha')){	include($phpbb_root_path . 'includes/captcha/plugins/captcha_abstract.' . $phpEx);}/*** @package VC*/class phpbb_captcha_gd_wave extends phpbb_default_captcha{	function phpbb_captcha_gd_wave()	{		global $phpbb_root_path, $phpEx;		if (!class_exists('captcha'))		{			include_once($phpbb_root_path . 'includes/captcha/captcha_gd_wave.' . $phpEx);		}	}	function get_instance()	{		return new phpbb_captcha_gd_wave();	}	function is_available()	{		global $phpbb_root_path, $phpEx;		if (@extension_loaded('gd'))		{			return true;		}		if (!function_exists('can_load_dll'))		{			include($phpbb_root_path . 'includes/functions_install.' . $phpEx);		}		return can_load_dll('gd');	}	function get_name()	{		return 'CAPTCHA_GD_3D';	}	function get_class_name()	{		return 'phpbb_captcha_gd_wave';	}	function acp_page($id, &$module)	{		global $config, $db, $template, $user;		trigger_error($user->lang['CAPTCHA_NO_OPTIONS'] . adm_back_link($module->u_action));	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_jabber_info{	function module()	{		return array(			'filename'	=> 'acp_jabber',			'title'		=> 'ACP_JABBER_SETTINGS',			'version'	=> '1.0.0',			'modes'		=> array(				'settings'		=> array('title' => 'ACP_JABBER_SETTINGS', 'auth' => 'acl_a_jabber', 'cat' => array('ACP_CLIENT_COMMUNICATION')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php$GLOBALS['utf_nfc_qc']=array(''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0);
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_bots_info{	function module()	{		return array(			'filename'	=> 'acp_bots',			'title'		=> 'ACP_BOTS',			'version'	=> '1.0.0',			'modes'		=> array(				'bots'		=> array('title' => 'ACP_BOTS', 'auth' => 'acl_a_bots', 'cat' => array('ACP_GENERAL_TASKS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_disallow_info{	function module()	{		return array(			'filename'	=> 'acp_disallow',			'title'		=> 'ACP_DISALLOW',			'version'	=> '1.0.0',			'modes'		=> array(				'usernames'		=> array('title' => 'ACP_DISALLOW_USERNAMES', 'auth' => 'acl_a_names', 'cat' => array('ACP_USER_SECURITY')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package install* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/if ( !defined('IN_INSTALL') ){	// Someone has tried to access the file direct. This is not a good idea, so exit	exit;}if (!empty($setmodules)){	$module[] = array(		'module_type'		=> 'install',		'module_title'		=> 'OVERVIEW',		'module_filename'	=> substr(basename(__FILE__), 0, -strlen($phpEx)-1),		'module_order'		=> 0,		'module_subs'		=> array('INTRO', 'LICENSE', 'SUPPORT'),		'module_stages'		=> '',		'module_reqs'		=> ''	);}/*** Main Tab - Installation* @package install*/class install_main extends module{	function install_main(&$p_master)	{		$this->p_master = &$p_master;	}	function main($mode, $sub)	{		global $lang, $template, $language;		switch ($sub)		{			case 'intro' :				$title = $lang['SUB_INTRO'];				$body = $lang['OVERVIEW_BODY'];			break;			case 'license' :				$title = $lang['GPL'];				$body = implode("<br/>\n", file('../docs/COPYING'));			break;			case 'support' :				$title = $lang['SUB_SUPPORT'];				$body = $lang['SUPPORT_BODY'];			break;		}		$this->tpl_name = 'install_main';		$this->page_title = $title;		$template->assign_vars(array(			'TITLE'		=> $title,			'BODY'		=> $body,			'S_LANG_SELECT'	=> '<select id="language" name="language">' . $this->p_master->inst_language_select($language) . '</select>',		));	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Class handling all types of 'plugins' (a future term)* @package phpBB3*/class p_master{	var $p_id;	var $p_class;	var $p_name;	var $p_mode;	var $p_parent;	var $include_path = false;	var $active_module = false;	var $active_module_row_id = false;	var $acl_forum_id = false;	var $module_ary = array();	/**	* Constuctor	* Set module include path	*/	function p_master($include_path = false)	{		global $phpbb_root_path;		$this->include_path = ($include_path !== false) ? $include_path : $phpbb_root_path . 'includes/';		// Make sure the path ends with /		if (substr($this->include_path, -1) !== '/')		{			$this->include_path .= '/';		}	}	/**	* Set custom include path for modules	* Schema for inclusion is include_path . modulebase	*	* @param string $include_path include path to be used.	* @access public	*/	function set_custom_include_path($include_path)	{		$this->include_path = $include_path;		// Make sure the path ends with /		if (substr($this->include_path, -1) !== '/')		{			$this->include_path .= '/';		}	}	/**	* List modules	*	* This creates a list, stored in $this->module_ary of all available	* modules for the given class (ucp, mcp and acp). Additionally	* $this->module_y_ary is created with indentation information for	* displaying the module list appropriately. Only modules for which	* the user has access rights are included in these lists.	*/	function list_modules($p_class)	{		global $auth, $db, $user, $cache;		global $config, $phpbb_root_path, $phpEx;		// Sanitise for future path use, it's escaped as appropriate for queries		$this->p_class = str_replace(array('.', '/', '\\'), '', basename($p_class));		// Get cached modules		if (($this->module_cache = $cache->get('_modules_' . $this->p_class)) === false)		{			// Get modules			$sql = 'SELECT *				FROM ' . MODULES_TABLE . "				WHERE module_class = '" . $db->sql_escape($this->p_class) . "'				ORDER BY left_id ASC";			$result = $db->sql_query($sql);			$rows = array();			while ($row = $db->sql_fetchrow($result))			{				$rows[$row['module_id']] = $row;			}			$db->sql_freeresult($result);			$this->module_cache = array();			foreach ($rows as $module_id => $row)			{				$this->module_cache['modules'][] = $row;				$this->module_cache['parents'][$row['module_id']] = $this->get_parents($row['parent_id'], $row['left_id'], $row['right_id'], $rows);			}			unset($rows);			$cache->put('_modules_' . $this->p_class, $this->module_cache);		}		if (empty($this->module_cache))		{			$this->module_cache = array('modules' => array(), 'parents' => array());		}		// We "could" build a true tree with this function - maybe mod authors want to use this...		// Functions for traversing and manipulating the tree are not available though		// We might re-structure the module system to use true trees in 3.2.x...		// $tree = $this->build_tree($this->module_cache['modules'], $this->module_cache['parents']);		// Clean up module cache array to only let survive modules the user can access		$right_id = false;		foreach ($this->module_cache['modules'] as $key => $row)		{			// Not allowed to view module?			if (!$this->module_auth($row['module_auth']))			{				unset($this->module_cache['modules'][$key]);				continue;			}			// Category with no members, ignore			if (!$row['module_basename'] && ($row['left_id'] + 1 == $row['right_id']))			{				unset($this->module_cache['modules'][$key]);				continue;			}			// Skip branch			if ($right_id !== false)			{				if ($row['left_id'] < $right_id)				{					unset($this->module_cache['modules'][$key]);					continue;				}				$right_id = false;			}			// Not enabled?			if (!$row['module_enabled'])			{				// If category is disabled then disable every child too				unset($this->module_cache['modules'][$key]);				$right_id = $row['right_id'];				continue;			}		}		// Re-index (this is needed, else we are not able to array_slice later)		$this->module_cache['modules'] = array_merge($this->module_cache['modules']);		// Include MOD _info files for populating language entries within the menus		$this->add_mod_info($this->p_class);		// Now build the module array, but exclude completely empty categories...		$right_id = false;		$names = array();		foreach ($this->module_cache['modules'] as $key => $row)		{			// Skip branch			if ($right_id !== false)			{				if ($row['left_id'] < $right_id)				{					continue;				}				$right_id = false;			}			// Category with no members on their way down (we have to check every level)			if (!$row['module_basename'])			{				$empty_category = true;				// We go through the branch and look for an activated module				foreach (array_slice($this->module_cache['modules'], $key + 1) as $temp_row)				{					if ($temp_row['left_id'] > $row['left_id'] && $temp_row['left_id'] < $row['right_id'])					{						// Module there						if ($temp_row['module_basename'] && $temp_row['module_enabled'])						{							$empty_category = false;							break;						}						continue;					}					break;				}				// Skip the branch				if ($empty_category)				{					$right_id = $row['right_id'];					continue;				}			}			$depth = sizeof($this->module_cache['parents'][$row['module_id']]);			// We need to prefix the functions to not create a naming conflict			// Function for building 'url_extra'			$url_func = '_module_' . $row['module_basename'] . '_url';			// Function for building the language name			$lang_func = '_module_' . $row['module_basename'] . '_lang';			// Custom function for calling parameters on module init (for example assigning template variables)			$custom_func = '_module_' . $row['module_basename'];			$names[$row['module_basename'] . '_' . $row['module_mode']][] = true;			$module_row = array(				'depth'		=> $depth,				'id'		=> (int) $row['module_id'],				'parent'	=> (int) $row['parent_id'],				'cat'		=> ($row['right_id'] > $row['left_id'] + 1) ? true : false,				'is_duplicate'	=> ($row['module_basename'] && sizeof($names[$row['module_basename'] . '_' . $row['module_mode']]) > 1) ? true : false,				'name'		=> (string) $row['module_basename'],				'mode'		=> (string) $row['module_mode'],				'display'	=> (int) $row['module_display'],				'url_extra'	=> (function_exists($url_func)) ? $url_func($row['module_mode'], $row) : '',				'lang'		=> ($row['module_basename'] && function_exists($lang_func)) ? $lang_func($row['module_mode'], $row['module_langname']) : ((!empty($user->lang[$row['module_langname']])) ? $user->lang[$row['module_langname']] : $row['module_langname']),				'langname'	=> $row['module_langname'],				'left'		=> $row['left_id'],				'right'		=> $row['right_id'],			);			if (function_exists($custom_func))			{				$custom_func($row['module_mode'], $module_row);			}			$this->module_ary[] = $module_row;		}		unset($this->module_cache['modules'], $names);	}	/**	* Check if a certain main module is accessible/loaded	* By giving the module mode you are able to additionally check for only one mode within the main module	*	* @param string $module_basename The module base name, for example logs, reports, main (for the mcp).	* @param mixed $module_mode The module mode to check. If provided the mode will be checked in addition for presence.	*	* @return bool Returns true if module is loaded and accessible, else returns false	*/	function loaded($module_basename, $module_mode = false)	{		if (empty($this->loaded_cache))		{			$this->loaded_cache = array();			foreach ($this->module_ary as $row)			{				if (!$row['name'])				{					continue;				}				if (!isset($this->loaded_cache[$row['name']]))				{					$this->loaded_cache[$row['name']] = array();				}				if (!$row['mode'])				{					continue;				}				$this->loaded_cache[$row['name']][$row['mode']] = true;			}		}		if ($module_mode === false)		{			return (isset($this->loaded_cache[$module_basename])) ? true : false;		}		return (!empty($this->loaded_cache[$module_basename][$module_mode])) ? true : false;	}	/**	* Check module authorisation	*/	function module_auth($module_auth, $forum_id = false)	{		global $auth, $config;		$module_auth = trim($module_auth);		// Generally allowed to access module if module_auth is empty		if (!$module_auth)		{			return true;		}		// With the code below we make sure only those elements get eval'd we really want to be checked		preg_match_all('/(?:			"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"         |			\'[^\'\\\\]*(?:\\\\.[^\'\\\\]*)*\'     |			[(),]                                  |			[^\s(),]+)/x', $module_auth, $match);		$tokens = $match[0];		for ($i = 0, $size = sizeof($tokens); $i < $size; $i++)		{			$token = &$tokens[$i];			switch ($token)			{				case ')':				case '(':				case '&&':				case '||':				case ',':				break;				default:					if (!preg_match('#(?:acl_([a-z0-9_]+)(,\$id)?)|(?:\$id)|(?:aclf_([a-z0-9_]+))|(?:cfg_([a-z0-9_]+))|(?:request_([a-zA-Z0-9_]+))#', $token))					{						$token = '';					}				break;			}		}		$module_auth = implode(' ', $tokens);		// Make sure $id seperation is working fine		$module_auth = str_replace(' , ', ',', $module_auth);		$forum_id = ($forum_id === false) ? $this->acl_forum_id : $forum_id;		$is_auth = false;		eval('$is_auth = (int) (' . preg_replace(array('#acl_([a-z0-9_]+)(,\$id)?#', '#\$id#', '#aclf_([a-z0-9_]+)#', '#cfg_([a-z0-9_]+)#', '#request_([a-zA-Z0-9_]+)#'), array('(int) $auth->acl_get(\'\\1\'\\2)', '(int) $forum_id', '(int) $auth->acl_getf_global(\'\\1\')', '(int) $config[\'\\1\']', '!empty($_REQUEST[\'\\1\'])'), $module_auth) . ');');		return $is_auth;	}	/**	* Set active module	*/	function set_active($id = false, $mode = false)	{		$icat = false;		$this->active_module = false;		if (request_var('icat', ''))		{			$icat = $id;			$id = request_var('icat', '');		}		$category = false;		foreach ($this->module_ary as $row_id => $item_ary)		{			// If this is a module and it's selected, active			// If this is a category and the module is the first within it, active			// If this is a module and no mode selected, select first mode			// If no category or module selected, go active for first module in first category			if (				(($item_ary['name'] === $id || $item_ary['id'] === (int) $id) && (($item_ary['mode'] == $mode && !$item_ary['cat']) || ($icat && $item_ary['cat']))) ||				($item_ary['parent'] === $category && !$item_ary['cat'] && !$icat && $item_ary['display']) ||				(($item_ary['name'] === $id || $item_ary['id'] === (int) $id) && !$mode && !$item_ary['cat']) ||				(!$id && !$mode && !$item_ary['cat'] && $item_ary['display'])				)			{				if ($item_ary['cat'])				{					$id = $icat;					$icat = false;					continue;				}				$this->p_id		= $item_ary['id'];				$this->p_parent	= $item_ary['parent'];				$this->p_name	= $item_ary['name'];				$this->p_mode 	= $item_ary['mode'];				$this->p_left	= $item_ary['left'];				$this->p_right	= $item_ary['right'];				$this->module_cache['parents'] = $this->module_cache['parents'][$this->p_id];				$this->active_module = $item_ary['id'];				$this->active_module_row_id = $row_id;				break;			}			else if (($item_ary['cat'] && $item_ary['id'] === (int) $id) || ($item_ary['parent'] === $category && $item_ary['cat']))			{				$category = $item_ary['id'];			}		}	}	/**	* Loads currently active module	*	* This method loads a given module, passing it the relevant id and mode.	*/	function load_active($mode = false, $module_url = false, $execute_module = true)	{		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $user;		$module_path = $this->include_path . $this->p_class;		$icat = request_var('icat', '');		if ($this->active_module === false)		{			trigger_error('Module not accessible', E_USER_ERROR);		}		if (!class_exists("{$this->p_class}_$this->p_name"))		{			if (!file_exists("$module_path/{$this->p_class}_$this->p_name.$phpEx"))			{				trigger_error("Cannot find module $module_path/{$this->p_class}_$this->p_name.$phpEx", E_USER_ERROR);			}			include("$module_path/{$this->p_class}_$this->p_name.$phpEx");			if (!class_exists("{$this->p_class}_$this->p_name"))			{				trigger_error("Module file $module_path/{$this->p_class}_$this->p_name.$phpEx does not contain correct class [{$this->p_class}_$this->p_name]", E_USER_ERROR);			}			if (!empty($mode))			{				$this->p_mode = $mode;			}			// Create a new instance of the desired module ... if it has a			// constructor it will of course be executed			$instance = "{$this->p_class}_$this->p_name";			$this->module = new $instance($this);			// We pre-define the action parameter we are using all over the place			if (defined('IN_ADMIN'))			{				// Is first module automatically enabled a duplicate and the category not passed yet?				if (!$icat && $this->module_ary[$this->active_module_row_id]['is_duplicate'])				{					$icat = $this->module_ary[$this->active_module_row_id]['parent'];				}				// Not being able to overwrite ;)				$this->module->u_action = append_sid("{$phpbb_admin_path}index.$phpEx", "i={$this->p_name}") . (($icat) ? '&amp;icat=' . $icat : '') . "&amp;mode={$this->p_mode}";			}			else			{				// If user specified the module url we will use it...				if ($module_url !== false)				{					$this->module->u_action = $module_url;				}				else				{					$this->module->u_action = $phpbb_root_path . (($user->page['page_dir']) ? $user->page['page_dir'] . '/' : '') . $user->page['page_name'];				}				$this->module->u_action = append_sid($this->module->u_action, "i={$this->p_name}") . (($icat) ? '&amp;icat=' . $icat : '') . "&amp;mode={$this->p_mode}";			}			// Add url_extra parameter to u_action url			if (!empty($this->module_ary) && $this->active_module !== false && $this->module_ary[$this->active_module_row_id]['url_extra'])			{				$this->module->u_action .= $this->module_ary[$this->active_module_row_id]['url_extra'];			}			// Assign the module path for re-usage			$this->module->module_path = $module_path . '/';			// Execute the main method for the new instance, we send the module id and mode as parameters			// Users are able to call the main method after this function to be able to assign additional parameters manually			if ($execute_module)			{				$this->module->main($this->p_name, $this->p_mode);			}			return;		}	}	/**	* Appending url parameter to the currently active module.	*	* This function is called for adding specific url parameters while executing the current module.	* It is doing the same as the _module_{name}_url() function, apart from being able to be called after	* having dynamically parsed specific parameters. This allows more freedom in choosing additional parameters.	* One example can be seen in /includes/mcp/mcp_notes.php - $this->p_master->adjust_url() call.	*	* @param string $url_extra Extra url parameters, e.g.: &amp;u=$user_id	*	*/	function adjust_url($url_extra)	{		if (empty($this->module_ary[$this->active_module_row_id]))		{			return;		}		$row = &$this->module_ary[$this->active_module_row_id];		// We check for the same url_extra in $row['url_extra'] to overcome doubled additions...		if (strpos($row['url_extra'], $url_extra) === false)		{			$row['url_extra'] .= $url_extra;		}	}	/**	* Check if a module is active	*/	function is_active($id, $mode = false)	{		// If we find a name by this id and being enabled we have our active one...		foreach ($this->module_ary as $row_id => $item_ary)		{			if (($item_ary['name'] === $id || $item_ary['id'] === (int) $id) && $item_ary['display'])			{				if ($mode === false || $mode === $item_ary['mode'])				{					return true;				}			}		}		return false;	}	/**	* Get parents	*/	function get_parents($parent_id, $left_id, $right_id, &$all_parents)	{		global $db;		$parents = array();		if ($parent_id > 0)		{			foreach ($all_parents as $module_id => $row)			{				if ($row['left_id'] < $left_id && $row['right_id'] > $right_id)				{					$parents[$module_id] = $row['parent_id'];				}				if ($row['left_id'] > $left_id)				{					break;				}			}		}		return $parents;	}	/**	* Get tree branch	*/	function get_branch($left_id, $right_id, $remaining)	{		$branch = array();		foreach ($remaining as $key => $row)		{			if ($row['left_id'] > $left_id && $row['left_id'] < $right_id)			{				$branch[] = $row;				continue;			}			break;		}		return $branch;	}	/**	* Build true binary tree from given array	* Not in use	*/	function build_tree(&$modules, &$parents)	{		$tree = array();		foreach ($modules as $row)		{			$branch = &$tree;			if ($row['parent_id'])			{				// Go through the tree to find our branch				$parent_tree = $parents[$row['module_id']];				foreach ($parent_tree as $id => $value)				{					if (!isset($branch[$id]) && isset($branch['child']))					{						$branch = &$branch['child'];					}					$branch = &$branch[$id];				}				$branch = &$branch['child'];			}			$branch[$row['module_id']] = $row;			if (!isset($branch[$row['module_id']]['child']))			{				$branch[$row['module_id']]['child'] = array();			}		}		return $tree;	}	/**	* Build navigation structure	*/	function assign_tpl_vars($module_url)	{		global $template;		$current_id = $right_id = false;		// Make sure the module_url has a question mark set, effectively determining the delimiter to use		$delim = (strpos($module_url, '?') === false) ? '?' : '&amp;';		$current_padding = $current_depth = 0;		$linear_offset 	= 'l_block1';		$tabular_offset = 't_block2';		// Generate the list of modules, we'll do this in two ways ...		// 1) In a linear fashion		// 2) In a combined tabbed + linear fashion ... tabs for the categories		//    and a linear list for subcategories/items		foreach ($this->module_ary as $row_id => $item_ary)		{			// Skip hidden modules			if (!$item_ary['display'])			{				continue;			}			// Skip branch			if ($right_id !== false)			{				if ($item_ary['left'] < $right_id)				{					continue;				}				$right_id = false;			}			// Category with no members on their way down (we have to check every level)			if (!$item_ary['name'])			{				$empty_category = true;				// We go through the branch and look for an activated module				foreach (array_slice($this->module_ary, $row_id + 1) as $temp_row)				{					if ($temp_row['left'] > $item_ary['left'] && $temp_row['left'] < $item_ary['right'])					{						// Module there and displayed?						if ($temp_row['name'] && $temp_row['display'])						{							$empty_category = false;							break;						}						continue;					}					break;				}				// Skip the branch				if ($empty_category)				{					$right_id = $item_ary['right'];					continue;				}			}			// Select first id we can get			if (!$current_id && (isset($this->module_cache['parents'][$item_ary['id']]) || $item_ary['id'] == $this->p_id))			{				$current_id = $item_ary['id'];			}			$depth = $item_ary['depth'];			if ($depth > $current_depth)			{				$linear_offset = $linear_offset . '.l_block' . ($depth + 1);				$tabular_offset = ($depth + 1 > 2) ? $tabular_offset . '.t_block' . ($depth + 1) : $tabular_offset;			}			else if ($depth < $current_depth)			{				for ($i = $current_depth - $depth; $i > 0; $i--)				{					$linear_offset = substr($linear_offset, 0, strrpos($linear_offset, '.'));					$tabular_offset = ($i + $depth > 1) ? substr($tabular_offset, 0, strrpos($tabular_offset, '.')) : $tabular_offset;				}			}			$u_title = $module_url . $delim . 'i=' . (($item_ary['cat']) ? $item_ary['id'] : $item_ary['name'] . (($item_ary['is_duplicate']) ? '&amp;icat=' . $current_id : '') . '&amp;mode=' . $item_ary['mode']);			// Was not allowed in categories before - /*!$item_ary['cat'] && */			$u_title .= (isset($item_ary['url_extra'])) ? $item_ary['url_extra'] : '';			// Only output a categories items if it's currently selected			if (!$depth || ($depth && (in_array($item_ary['parent'], array_values($this->module_cache['parents'])) || $item_ary['parent'] == $this->p_parent)))			{				$use_tabular_offset = (!$depth) ? 't_block1' : $tabular_offset;				$tpl_ary = array(					'L_TITLE'		=> $item_ary['lang'],					'S_SELECTED'	=> (isset($this->module_cache['parents'][$item_ary['id']]) || $item_ary['id'] == $this->p_id) ? true : false,					'U_TITLE'		=> $u_title				);				$template->assign_block_vars($use_tabular_offset, array_merge($tpl_ary, array_change_key_case($item_ary, CASE_UPPER)));			}			$tpl_ary = array(				'L_TITLE'		=> $item_ary['lang'],				'S_SELECTED'	=> (isset($this->module_cache['parents'][$item_ary['id']]) || $item_ary['id'] == $this->p_id) ? true : false,				'U_TITLE'		=> $u_title			);			$template->assign_block_vars($linear_offset, array_merge($tpl_ary, array_change_key_case($item_ary, CASE_UPPER)));			$current_depth = $depth;		}	}	/**	* Returns desired template name	*/	function get_tpl_name()	{		return $this->module->tpl_name . '.html';	}	/**	* Returns the desired page title	*/	function get_page_title()	{		global $user;		if (!isset($this->module->page_title))		{			return '';		}		return (isset($user->lang[$this->module->page_title])) ? $user->lang[$this->module->page_title] : $this->module->page_title;	}	/**	* Load module as the current active one without the need for registering it	*/	function load($class, $name, $mode = false)	{		$this->p_class = $class;		$this->p_name = $name;		// Set active module to true instead of using the id		$this->active_module = true;		$this->load_active($mode);	}	/**	* Display module	*/	function display($page_title, $display_online_list = true)	{		global $template, $user;		// Generate the page		if (defined('IN_ADMIN') && isset($user->data['session_admin']) && $user->data['session_admin'])		{			adm_page_header($page_title);		}		else		{			page_header($page_title, $display_online_list);		}		$template->set_filenames(array(			'body' => $this->get_tpl_name())		);		if (defined('IN_ADMIN') && isset($user->data['session_admin']) && $user->data['session_admin'])		{			adm_page_footer();		}		else		{			page_footer();		}	}	/**	* Toggle whether this module will be displayed or not	*/	function set_display($id, $mode = false, $display = true)	{		foreach ($this->module_ary as $row_id => $item_ary)		{			if (($item_ary['name'] === $id || $item_ary['id'] === (int) $id) && (!$mode || $item_ary['mode'] === $mode))			{				$this->module_ary[$row_id]['display'] = (int) $display;			}		}	}	/**	* Add custom MOD info language file	*/	function add_mod_info($module_class)	{		global $user, $phpEx;		if (file_exists($user->lang_path . $user->lang_name . '/mods'))		{			$add_files = array();			$dir = @opendir($user->lang_path . $user->lang_name . '/mods');			if ($dir)			{				while (($entry = readdir($dir)) !== false)				{					if (strpos($entry, 'info_' . strtolower($module_class) . '_') === 0 && substr(strrchr($entry, '.'), 1) == $phpEx)					{						$add_files[] = 'mods/' . substr(basename($entry), 0, -(strlen($phpEx) + 1));					}				}				closedir($dir);			}			if (sizeof($add_files))			{				$user->add_lang($add_files);			}		}	}}?>
<?php/**** install [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ADMIN_CONFIG'				=> 'Administrator configuration',	'ADMIN_PASSWORD'			=> 'Administrator password',	'ADMIN_PASSWORD_CONFIRM'	=> 'Confirm administrator password',	'ADMIN_PASSWORD_EXPLAIN'	=> 'Please enter a password between 6 and 30 characters in length.',	'ADMIN_TEST'				=> 'Check administrator settings',	'ADMIN_USERNAME'			=> 'Administrator username',	'ADMIN_USERNAME_EXPLAIN'	=> 'Please enter a username between 3 and 20 characters in length.',	'APP_MAGICK'				=> 'Imagemagick support [ Attachments ]',	'AUTHOR_NOTES'				=> 'Author notes<br /> %s',	'AVAILABLE'					=> 'Available',	'AVAILABLE_CONVERTORS'		=> 'Available convertors',	'BEGIN_CONVERT'					=> 'Begin conversion',	'BLANK_PREFIX_FOUND'			=> 'A scan of your tables has shown a valid installation using no table prefix.',	'BOARD_NOT_INSTALLED'			=> 'No installation found',	'BOARD_NOT_INSTALLED_EXPLAIN'	=> 'The phpBB Unified Convertor Framework requires a default installation of phpBB3 to function, please <a href="%s">proceed by first installing phpBB3</a>.',	'CATEGORY'					=> 'Category',	'CACHE_STORE'				=> 'Cache type',	'CACHE_STORE_EXPLAIN'		=> 'The physical location where data is cached, filesystem is preferred.',	'CAT_CONVERT'				=> 'Convert',	'CAT_INSTALL'				=> 'Install',	'CAT_OVERVIEW'				=> 'Overview',	'CAT_UPDATE'				=> 'Update',	'CHANGE'					=> 'Change',	'CHECK_TABLE_PREFIX'		=> 'Please check your table prefix and try again.',	'CLEAN_VERIFY'				=> 'Cleaning up and verifying the final structure',	'CLEANING_USERNAMES'		=> 'Cleaning usernames',	'COLLIDING_CLEAN_USERNAME'	=> '<strong>%s</strong> is the clean username for:',	'COLLIDING_USERNAMES_FOUND'	=> 'Colliding usernames were found on your old board. In order to complete the conversion please delete or rename these users so that there is only one user on your old board for each clean username.',	'COLLIDING_USER'			=> ' user id: <strong>%d</strong> username: <strong>%s</strong> (%d posts)',	'CONFIG_CONVERT'			=> 'Converting the configuration',	'CONFIG_FILE_UNABLE_WRITE'	=> 'It was not possible to write the configuration file. Alternative methods for this file to be created are presented below.',	'CONFIG_FILE_WRITTEN'		=> 'The configuration file has been written. You may now proceed to the next step of the installation.',	'CONFIG_PHPBB_EMPTY'		=> 'The phpBB3 config variable for %s is empty.',	'CONFIG_RETRY'				=> 'Retry',	'CONTACT_EMAIL_CONFIRM'		=> 'Confirm contact e-mail',	'CONTINUE_CONVERT'			=> 'Continue conversion',	'CONTINUE_CONVERT_BODY'		=> 'A previous conversion attempt has been determined. You are now able to choose between starting a new conversion or continuing the conversion.',	'CONTINUE_LAST'				=> 'Continue last statements',	'CONTINUE_OLD_CONVERSION'	=> 'Continue previously started conversion',	'CONVERT'					=> 'Convert',	'CONVERT_COMPLETE'			=> 'Conversion completed',	'CONVERT_COMPLETE_EXPLAIN'	=> 'You have now successfully converted your board to phpBB 3.0. You can now login and <a href="../">access your board</a>. Please ensure that the settings were transferred correctly before enabling your board by deleting the install directory. Remember that help on using phpBB is available online via the <a href="http://www.phpbb.com/support/documentation/3.0/">Documentation</a> and the <a href="http://www.phpbb.com/community/viewforum.php?f=46">support forums</a>.',	'CONVERT_INTRO'				=> 'Welcome to the phpBB Unified Convertor Framework',	'CONVERT_INTRO_BODY'		=> 'From here, you are able to import data from other (installed) board systems. The list below shows all the conversion modules currently available. If there is no convertor shown in this list for the board software you wish to convert from, please check our website where further conversion modules may be available for download.',	'CONVERT_NEW_CONVERSION'	=> 'New conversion',	'CONVERT_NOT_EXIST'			=> 'The specified convertor does not exist.',	'CONVERT_OPTIONS'			=> 'Options',	'CONVERT_SETTINGS_VERIFIED'	=> 'The information you entered has been verified. To start the conversion process, please push the button below.',	'CONV_ERR_FATAL'			=> 'Fatal conversion error',	'CONV_ERROR_ATTACH_FTP_DIR'			=> 'FTP upload for attachments is enabled at the old board. Please disable the FTP upload option and make sure a valid upload directory is specified, then copy all attachment files to this new web accessible directory. Once you have done this, restart the convertor.',	'CONV_ERROR_CONFIG_EMPTY'			=> 'There is no configuration information available for the conversion.',	'CONV_ERROR_FORUM_ACCESS'			=> 'Unable to get forum access information.',	'CONV_ERROR_GET_CATEGORIES'			=> 'Unable to get categories.',	'CONV_ERROR_GET_CONFIG'				=> 'Could not retrieve your board configuration.',	'CONV_ERROR_COULD_NOT_READ'			=> 'Unable to access/read %s.',	'CONV_ERROR_GROUP_ACCESS'			=> 'Unable to get group authentication information.',	'CONV_ERROR_INCONSISTENT_GROUPS'	=> 'Inconsistency in groups table detected in add_bots() - you need to add all special groups if you do it manually.',	'CONV_ERROR_INSERT_BOT'				=> 'Unable to insert bot into users table.',	'CONV_ERROR_INSERT_BOTGROUP'		=> 'Unable to insert bot into bots table.',	'CONV_ERROR_INSERT_USER_GROUP'		=> 'Unable to insert user into user_group table.',	'CONV_ERROR_MESSAGE_PARSER'			=> 'Message parser error',	'CONV_ERROR_NO_AVATAR_PATH'			=> 'Note to developer: you must specify $convertor[\'avatar_path\'] to use %s.',	'CONV_ERROR_NO_FORUM_PATH'			=> 'The relative path to the source board has not been specified.',	'CONV_ERROR_NO_GALLERY_PATH'		=> 'Note to developer: you must specify $convertor[\'avatar_gallery_path\'] to use %s.',	'CONV_ERROR_NO_GROUP'				=> 'Group %1$s could not be found in %2$s.',	'CONV_ERROR_NO_RANKS_PATH'			=> 'Note to developer: you must specify $convertor[\'ranks_path\'] to use %s.',	'CONV_ERROR_NO_SMILIES_PATH'		=> 'Note to developer: you must specify $convertor[\'smilies_path\'] to use %s.',	'CONV_ERROR_NO_UPLOAD_DIR'			=> 'Note to developer: you must specify $convertor[\'upload_path\'] to use %s.',	'CONV_ERROR_PERM_SETTING'			=> 'Unable to insert/update permission setting.',	'CONV_ERROR_PM_COUNT'				=> 'Unable to select folder pm count.',	'CONV_ERROR_REPLACE_CATEGORY'		=> 'Unable to insert new forum replacing old category.',	'CONV_ERROR_REPLACE_FORUM'			=> 'Unable to insert new forum replacing old forum.',	'CONV_ERROR_USER_ACCESS'			=> 'Unable to get user authentication information.',	'CONV_ERROR_WRONG_GROUP'			=> 'Wrong group %1$s defined in %2$s.',	'CONV_OPTIONS_BODY'					=> 'This page collects the data required to access the source board. Enter the database details of your former board; the converter will not change anything in the database given below. The source board should be disabled to allow a consistent conversion.',	'CONV_SAVED_MESSAGES'				=> 'Saved messages',	'COULD_NOT_COPY'			=> 'Could not copy file <strong>%1$s</strong> to <strong>%2$s</strong><br /><br />Please check that the target directory exists and is writable by the webserver.',	'COULD_NOT_FIND_PATH'		=> 'Could not find path to your former board. Please check your settings and try again.<br /> %s was specified as the source path.',	'DBMS'						=> 'Database type',	'DB_CONFIG'					=> 'Database configuration',	'DB_CONNECTION'				=> 'Database connection',	'DB_ERR_INSERT'				=> 'Error while processing <code>INSERT</code> query.',	'DB_ERR_LAST'				=> 'Error while processing <var>query_last</var>.',	'DB_ERR_QUERY_FIRST'		=> 'Error while executing <var>query_first</var>.',	'DB_ERR_QUERY_FIRST_TABLE'	=> 'Error while executing <var>query_first</var>, %s (%s).',	'DB_ERR_SELECT'				=> 'Error while running <code>SELECT</code> query.',	'DB_HOST'					=> 'Database server hostname or DSN',	'DB_HOST_EXPLAIN'			=> 'DSN stands for Data Source Name and is relevant only for ODBC installs. On PostgreSQL, use localhost to connect to the local server via UNIX domain socket and 127.0.0.1 to connect via TCP. For SQLite, enter the full path to your database file.',	'DB_NAME'					=> 'Database name',	'DB_PASSWORD'				=> 'Database password',	'DB_PORT'					=> 'Database server port',	'DB_PORT_EXPLAIN'			=> 'Leave this blank unless you know the server operates on a non-standard port.',	'DB_UPDATE_NOT_SUPPORTED'	=> 'We are sorry, but this script does not support updating from versions of phpBB prior to %1$s. The version you currently have installed is %2$s. Please update to a previous version before running this script. Assistance with this is available in the Support Forum on phpBB.com.',	'DB_USERNAME'				=> 'Database username',	'DB_TEST'					=> 'Test connection',	'DEFAULT_LANG'				=> 'Default board language',	'DEFAULT_PREFIX_IS'			=> 'The convertor was not able to find tables with the specified prefix. Please make sure you have entered the correct details for the board you are converting from. The default table prefix for %1$s is <strong>%2$s</strong>.',	'DEV_NO_TEST_FILE'			=> 'No value has been specified for the test_file variable in the convertor. If you are a user of this convertor, you should not be seeing this error, please report this message to the convertor author. If you are a convertor author, you must specify the name of a file which exists in the source board to allow the path to it to be verified.',	'DIRECTORIES_AND_FILES'		=> 'Directory and file setup',	'DISABLE_KEYS'				=> 'Disabling keys',	'DLL_FIREBIRD'				=> 'Firebird',	'DLL_FTP'					=> 'Remote FTP support [ Installation ]',	'DLL_GD'					=> 'GD graphics support [ Visual Confirmation ]',	'DLL_MBSTRING'				=> 'Multi-byte character support',	'DLL_MSSQL'					=> 'MSSQL Server 2000+',	'DLL_MSSQL_ODBC'			=> 'MSSQL Server 2000+ via ODBC',	'DLL_MSSQLNATIVE'			=> 'MSSQL Server 2005+ [ Native ]',	'DLL_MYSQL'					=> 'MySQL',	'DLL_MYSQLI'				=> 'MySQL with MySQLi Extension',	'DLL_ORACLE'				=> 'Oracle',	'DLL_POSTGRES'				=> 'PostgreSQL',	'DLL_SQLITE'				=> 'SQLite',	'DLL_XML'					=> 'XML support [ Jabber ]',	'DLL_ZLIB'					=> 'zlib compression support [ gz, .tar.gz, .zip ]',	'DL_CONFIG'					=> 'Download config',	'DL_CONFIG_EXPLAIN'			=> 'You may download the complete config.php to your own PC. You will then need to upload the file manually, replacing any existing config.php in your phpBB 3.0 root directory. Please remember to upload the file in ASCII format (see your FTP application documentation if you are unsure how to achieve this). When you have uploaded the config.php please click Done to move to the next stage.',	'DL_DOWNLOAD'				=> 'Download',	'DONE'						=> 'Done',	'ENABLE_KEYS'				=> 'Re-enabling keys. This can take a while.',	'FILES_OPTIONAL'			=> 'Optional files and directories',	'FILES_OPTIONAL_EXPLAIN'	=> '<strong>Optional</strong> - These files, directories or permission settings are not required. The installation system will attempt to use various techniques to create them if they do not exist or cannot be written to. However, the presence of these will speed installation.',	'FILES_REQUIRED'			=> 'Files and Directories',	'FILES_REQUIRED_EXPLAIN'	=> '<strong>Required</strong> - In order to function correctly phpBB needs to be able to access or write to certain files or directories. If you see Not Found you need to create the relevant file or directory. If you see Unwritable you need to change the permissions on the file or directory to allow phpBB to write to it.',	'FILLING_TABLE'				=> 'Filling table <strong>%s</strong>',	'FILLING_TABLES'			=> 'Filling tables',	'FIREBIRD_DBMS_UPDATE_REQUIRED'		=> 'phpBB no longer supports Firebird/Interbase prior to Version 2.1. Please update your Firebird installation to at least 2.1.0 before proceeding with the update.',	'FINAL_STEP'				=> 'Process final step',	'FORUM_ADDRESS'				=> 'Board address',	'FORUM_ADDRESS_EXPLAIN'		=> 'This is the URL of your former board, for example <samp>http://www.example.com/phpBB2/</samp>. If an address is entered here and not left empty every instance of this address will be replaced by your new board address within messages, private messages and signatures.',	'FORUM_PATH'				=> 'Board path',	'FORUM_PATH_EXPLAIN'		=> 'This is the <strong>relative</strong> path on disk to your former board from the <strong>root of this phpBB3 installation</strong>.',	'FOUND'						=> 'Found',	'FTP_CONFIG'				=> 'Transfer config by FTP',	'FTP_CONFIG_EXPLAIN'		=> 'phpBB has detected the presence of the FTP module on this server. You may attempt to install your config.php via this if you wish. You will need to supply the information listed below. Remember your username and password are those to your server! (ask your hosting provider for details if you are unsure what these are).',	'FTP_PATH'					=> 'FTP path',	'FTP_PATH_EXPLAIN'			=> 'This is the path from your root directory to that of phpBB, e.g. <samp>htdocs/phpBB3/</samp>.',	'FTP_UPLOAD'				=> 'Upload',	'GPL'						=> 'General Public License',	'INITIAL_CONFIG'			=> 'Basic configuration',	'INITIAL_CONFIG_EXPLAIN'	=> 'Now that install has determined your server can run phpBB you need to supply some specific information. If you do not know how to connect to your database please contact your hosting provider (in the first instance) or use the phpBB support forums. When entering data please ensure you check it thoroughly before continuing.',	'INSTALL_CONGRATS'			=> 'Congratulations!',	'INSTALL_CONGRATS_EXPLAIN'	=> '		You have successfully installed phpBB %1$s. Please proceed by choosing one of the following options:</p>		<h2>Convert an existing board to phpBB3</h2>		<p>The phpBB Unified Convertor Framework supports the conversion of phpBB 2.0.x and other board systems to phpBB3. If you have an existing board that you wish to convert, please <a href="%2$s">proceed to the convertor</a>.</p>		<h2>Go live with your phpBB3!</h2>		<p>Clicking the button below will take you to a form for submitting statistical data to phpBB in your Administration Control Panel (ACP). We would appreciate it if you could help us by sending that information. Afterwards you should take some time to examine the options available to you. Remember that help is available online via the <a href="http://www.phpbb.com/support/documentation/3.0/">Documentation</a>, <a href="%3$s">README</a> and the <a href="http://www.phpbb.com/community/viewforum.php?f=46">Support Forums</a>.</p><p><strong>Please delete, move or rename the install directory before using your board. While this directory exists, only the Administration Control Panel (ACP) will be accessible.</strong>',	'INSTALL_INTRO'				=> 'Welcome to Installation',	'INSTALL_INTRO_BODY'		=> 'With this option, it is possible to install phpBB3 onto your server.</p><p>In order to proceed, you will need your database settings. If you do not know your database settings, please contact your host and ask for them. You will not be able to continue without them. You need:</p>	<ul>		<li>The Database Type - the database you will be using.</li>		<li>The Database server hostname or DSN - the address of the database server.</li>		<li>The Database server port - the port of the database server (most of the time this is not needed).</li>		<li>The Database name - the name of the database on the server.</li>		<li>The Database username and Database password - the login data to access the database.</li>	</ul>	<p><strong>Note:</strong> if you are installing using SQLite, you should enter the full path to your database file in the DSN field and leave the username and password fields blank. For security reasons, you should make sure that the database file is not stored in a location accessible from the web.</p>	<p>phpBB3 supports the following databases:</p>	<ul>		<li>MySQL 3.23 or above (MySQLi supported)</li>		<li>PostgreSQL 7.3+</li>		<li>SQLite 2.8.2+</li>		<li>Firebird 2.1+</li>		<li>MS SQL Server 2000 or above (directly or via ODBC)</li>		<li>MS SQL Server 2005 or above (native)</li>		<li>Oracle</li>	</ul>	<p>Only those databases supported on your server will be displayed.',	'INSTALL_INTRO_NEXT'		=> 'To commence the installation, please press the button below.',	'INSTALL_LOGIN'				=> 'Login',	'INSTALL_NEXT'				=> 'Next stage',	'INSTALL_NEXT_FAIL'			=> 'Some tests failed and you should correct these problems before proceeding to the next stage. Failure to do so may result in an incomplete installation.',	'INSTALL_NEXT_PASS'			=> 'All the basic tests have been passed and you may proceed to the next stage of installation. If you have changed any permissions, modules, etc. and wish to re-test you can do so if you wish.',	'INSTALL_PANEL'				=> 'Installation Panel',	'INSTALL_SEND_CONFIG'		=> 'Unfortunately phpBB could not write the configuration information directly to your config.php. This may be because the file does not exist or is not writable. A number of options will be listed below enabling you to complete installation of config.php.',	'INSTALL_START'				=> 'Start install',	'INSTALL_TEST'				=> 'Test again',	'INST_ERR'					=> 'Installation error',	'INST_ERR_DB_CONNECT'		=> 'Could not connect to the database, see error message below.',	'INST_ERR_DB_FORUM_PATH'	=> 'The database file specified is within your board directory tree. You should put this file in a non web-accessible location.',	'INST_ERR_DB_INVALID_PREFIX'=> 'The prefix you entered is invalid. It must start with a letter and must only contain letters, numbers and underscores.',	'INST_ERR_DB_NO_ERROR'		=> 'No error message given.',	'INST_ERR_DB_NO_MYSQLI'		=> 'The version of MySQL installed on this machine is incompatible with the MySQL with MySQLi Extension option you have selected. Please try the MySQL option instead.',	'INST_ERR_DB_NO_SQLITE'		=> 'The version of the SQLite extension you have installed is too old, it must be upgraded to at least 2.8.2.',	'INST_ERR_DB_NO_ORACLE'		=> 'The version of Oracle installed on this machine requires you to set the <var>NLS_CHARACTERSET</var> parameter to <var>UTF8</var>. Either upgrade your installation to 9.2+ or change the parameter.',	'INST_ERR_DB_NO_FIREBIRD'	=> 'The version of Firebird installed on this machine is older than 2.1, please upgrade to a newer version.',	'INST_ERR_DB_NO_FIREBIRD_PS'=> 'The database you selected for Firebird has a page size less than 8192, it must be at least 8192.',	'INST_ERR_DB_NO_POSTGRES'	=> 'The database you have selected was not created in <var>UNICODE</var> or <var>UTF8</var> encoding. Try installing with a database in <var>UNICODE</var> or <var>UTF8</var> encoding.',	'INST_ERR_DB_NO_NAME'		=> 'No database name specified.',	'INST_ERR_EMAIL_INVALID'	=> 'The e-mail address you entered is invalid.',	'INST_ERR_EMAIL_MISMATCH'	=> 'The e-mails you entered did not match.',	'INST_ERR_FATAL'			=> 'Fatal installation error',	'INST_ERR_FATAL_DB'			=> 'A fatal and unrecoverable database error has occurred. This may be because the specified user does not have appropriate permissions to <code>CREATE TABLES</code> or <code>INSERT</code> data, etc. Further information may be given below. Please contact your hosting provider in the first instance or the support forums of phpBB for further assistance.',	'INST_ERR_FTP_PATH'			=> 'Could not change to the given directory, please check the path.',	'INST_ERR_FTP_LOGIN'		=> 'Could not login to FTP server, check your username and password.',	'INST_ERR_MISSING_DATA'		=> 'You must fill out all fields in this block.',	'INST_ERR_NO_DB'			=> 'Cannot load the PHP module for the selected database type.',	'INST_ERR_PASSWORD_MISMATCH'	=> 'The passwords you entered did not match.',	'INST_ERR_PASSWORD_TOO_LONG'	=> 'The password you entered is too long. The maximum length is 30 characters.',	'INST_ERR_PASSWORD_TOO_SHORT'	=> 'The password you entered is too short. The minimum length is 6 characters.',	'INST_ERR_PREFIX'			=> 'Tables with the specified prefix already exist, please choose an alternative.',	'INST_ERR_PREFIX_INVALID'	=> 'The table prefix you have specified is invalid for your database. Please try another, removing characters such as the hyphen.',	'INST_ERR_PREFIX_TOO_LONG'	=> 'The table prefix you have specified is too long. The maximum length is %d characters.',	'INST_ERR_USER_TOO_LONG'	=> 'The username you entered is too long. The maximum length is 20 characters.',	'INST_ERR_USER_TOO_SHORT'	=> 'The username you entered is too short. The minimum length is 3 characters.',	'INVALID_PRIMARY_KEY'		=> 'Invalid primary key : %s',	'LONG_SCRIPT_EXECUTION'		=> 'Please note that this can take a while... Please do not stop the script.',	// mbstring	'MBSTRING_CHECK'						=> '<samp>mbstring</samp> extension check',	'MBSTRING_CHECK_EXPLAIN'				=> '<strong>Required</strong> - <samp>mbstring</samp> is a PHP extension that provides multibyte string functions. Certain features of mbstring are not compatible with phpBB and must be disabled.',	'MBSTRING_FUNC_OVERLOAD'				=> 'Function overloading',	'MBSTRING_FUNC_OVERLOAD_EXPLAIN'		=> '<var>mbstring.func_overload</var> must be set to either 0 or 4.',	'MBSTRING_ENCODING_TRANSLATION'			=> 'Transparent character encoding',	'MBSTRING_ENCODING_TRANSLATION_EXPLAIN'	=> '<var>mbstring.encoding_translation</var> must be set to 0.',	'MBSTRING_HTTP_INPUT'					=> 'HTTP input character conversion',	'MBSTRING_HTTP_INPUT_EXPLAIN'			=> '<var>mbstring.http_input</var> must be set to <samp>pass</samp>.',	'MBSTRING_HTTP_OUTPUT'					=> 'HTTP output character conversion',	'MBSTRING_HTTP_OUTPUT_EXPLAIN'			=> '<var>mbstring.http_output</var> must be set to <samp>pass</samp>.',	'MAKE_FOLDER_WRITABLE'		=> 'Please make sure that this folder exists and is writable by the webserver then try again:<br /><strong>%s</strong>.',	'MAKE_FOLDERS_WRITABLE'		=> 'Please make sure that these folders exist and are writable by the webserver then try again:<br /><strong>%s</strong>.',	'MYSQL_SCHEMA_UPDATE_REQUIRED'	=> 'Your MySQL database schema for phpBB is outdated. phpBB detected a schema for MySQL 3.x/4.x, but the server runs on MySQL %2$s.<br /><strong>Before you proceed the update, you need to upgrade the schema.</strong><br /><br />Please refer to the <a href="http://www.phpbb.com/kb/article/doesnt-have-a-default-value-errors/">Knowledge Base article about upgrading the MySQL schema</a>. If you encounter problems, please use <a href="http://www.phpbb.com/community/viewforum.php?f=46">our support forums</a>.',	'NAMING_CONFLICT'			=> 'Naming conflict: %s and %s are both aliases<br /><br />%s',	'NEXT_STEP'					=> 'Proceed to next step',	'NOT_FOUND'					=> 'Cannot find',	'NOT_UNDERSTAND'			=> 'Could not understand %s #%d, table %s (%s)',	'NO_CONVERTORS'				=> 'No convertors are available for use.',	'NO_CONVERT_SPECIFIED'		=> 'No convertor specified.',	'NO_LOCATION'				=> 'Cannot determine location. If you know Imagemagick is installed, you may specify the location later within your administration control panel',	'NO_TABLES_FOUND'			=> 'No tables found.',	'OVERVIEW_BODY'				=> 'Welcome to phpBB3!<br /><br />phpBB is the most widely used open source bulletin board solution in the world. phpBB3 is the latest installment in a package line started in 2000. Like its predecessors, phpBB3 is feature-rich, user-friendly, and fully supported by the phpBB Team. phpBB3 greatly improves on what made phpBB2 popular, and adds commonly requested features that were not present in previous versions. We hope it exceeds your expectations.<br /><br />This installation system will guide you through installing phpBB3, updating to the latest version of phpBB3 from past releases, as well as converting to phpBB3 from a different discussion board system (including phpBB2). For more information, we encourage you to read <a href="../docs/INSTALL.html">the installation guide</a>.<br /><br />To read the phpBB3 license or learn about obtaining support and our stance on it, please select the respective options from the side menu. To continue, please select the appropriate tab above.',	'PCRE_UTF_SUPPORT'				=> 'PCRE UTF-8 support',	'PCRE_UTF_SUPPORT_EXPLAIN'		=> 'phpBB will <strong>not</strong> run if your PHP installation is not compiled with UTF-8 support in the PCRE extension.',	'PHP_GETIMAGESIZE_SUPPORT'			=> 'PHP function getimagesize() is available',	'PHP_GETIMAGESIZE_SUPPORT_EXPLAIN'	=> '<strong>Required</strong> - In order for phpBB to function correctly, the getimagesize function needs to be available.',	'PHP_OPTIONAL_MODULE'			=> 'Optional modules',	'PHP_OPTIONAL_MODULE_EXPLAIN'	=> '<strong>Optional</strong> - These modules or applications are optional. However, if they are available they will enable extra features.',	'PHP_SUPPORTED_DB'				=> 'Supported databases',	'PHP_SUPPORTED_DB_EXPLAIN'		=> '<strong>Required</strong> - You must have support for at least one compatible database within PHP. If no database modules are shown as available you should contact your hosting provider or review the relevant PHP installation documentation for advice.',	'PHP_REGISTER_GLOBALS'			=> 'PHP setting <var>register_globals</var> is disabled',	'PHP_REGISTER_GLOBALS_EXPLAIN'	=> 'phpBB will still run if this setting is enabled, but if possible, it is recommended that register_globals is disabled on your PHP install for security reasons.',	'PHP_SAFE_MODE'					=> 'Safe mode',	'PHP_SETTINGS'					=> 'PHP version and settings',	'PHP_SETTINGS_EXPLAIN'			=> '<strong>Required</strong> - You must be running at least version 4.3.3 of PHP in order to install phpBB. If <var>safe mode</var> is displayed below your PHP installation is running in that mode. This will impose limitations on remote administration and similar features.',	'PHP_URL_FOPEN_SUPPORT'			=> 'PHP setting <var>allow_url_fopen</var> is enabled',	'PHP_URL_FOPEN_SUPPORT_EXPLAIN'	=> '<strong>Optional</strong> - This setting is optional, however certain phpBB functions like off-site avatars will not work properly without it.',	'PHP_VERSION_REQD'				=> 'PHP version >= 4.3.3',	'POST_ID'						=> 'Post ID',	'PREFIX_FOUND'					=> 'A scan of your tables has shown a valid installation using <strong>%s</strong> as table prefix.',	'PREPROCESS_STEP'				=> 'Executing pre-processing functions/queries',	'PRE_CONVERT_COMPLETE'			=> 'All pre-conversion steps have successfully been completed. You may now begin the actual conversion process. Please note that you may have to manually do and adjust several things. After conversion, especially check the permissions assigned, rebuild your search index which is not converted and also make sure files got copied correctly, for example avatars and smilies.',	'PROCESS_LAST'					=> 'Processing last statements',	'REFRESH_PAGE'				=> 'Refresh page to continue conversion',	'REFRESH_PAGE_EXPLAIN'		=> 'If set to yes, the convertor will refresh the page to continue the conversion after having finished a step. If this is your first conversion for testing purposes and to determine any errors in advance, we suggest to set this to No.',	'REQUIREMENTS_TITLE'		=> 'Installation compatibility',	'REQUIREMENTS_EXPLAIN'		=> 'Before proceeding with the full installation phpBB will carry out some tests on your server configuration and files to ensure that you are able to install and run phpBB. Please ensure you read through the results thoroughly and do not proceed until all the required tests are passed. If you wish to use any of the features depending on the optional tests, you should ensure that these tests are passed also.',	'RETRY_WRITE'				=> 'Retry writing config',	'RETRY_WRITE_EXPLAIN'		=> 'If you wish you can change the permissions on config.php to allow phpBB to write to it. Should you wish to do that you can click Retry below to try again. Remember to return the permissions on config.php after phpBB has finished installation.',	'SCRIPT_PATH'				=> 'Script path',	'SCRIPT_PATH_EXPLAIN'		=> 'The path where phpBB is located relative to the domain name, e.g. <samp>/phpBB3</samp>.',	'SELECT_LANG'				=> 'Select language',	'SERVER_CONFIG'				=> 'Server configuration',	'SEARCH_INDEX_UNCONVERTED'	=> 'Search index was not converted',	'SEARCH_INDEX_UNCONVERTED_EXPLAIN'	=> 'Your old search index was not converted. Searching will always yield an empty result. To create a new search index go to the Administration Control Panel, select Maintenance and then choose Search index from the submenu.',	'SOFTWARE'					=> 'Board software',	'SPECIFY_OPTIONS'			=> 'Specify conversion options',	'STAGE_ADMINISTRATOR'		=> 'Administrator details',	'STAGE_ADVANCED'			=> 'Advanced settings',	'STAGE_ADVANCED_EXPLAIN'	=> 'The settings on this page are only necessary to set if you know that you require something different from the default. If you are unsure, just proceed to the next page, as these settings can be altered from the Administration Control Panel later.',	'STAGE_CONFIG_FILE'			=> 'Configuration file',	'STAGE_CREATE_TABLE'		=> 'Create database tables',	'STAGE_CREATE_TABLE_EXPLAIN'	=> 'The database tables used by phpBB 3.0 have been created and populated with some initial data. Proceed to the next screen to finish installing phpBB.',	'STAGE_DATABASE'			=> 'Database settings',	'STAGE_FINAL'				=> 'Final stage',	'STAGE_INTRO'				=> 'Introduction',	'STAGE_IN_PROGRESS'			=> 'Conversion in progress',	'STAGE_REQUIREMENTS'		=> 'Requirements',	'STAGE_SETTINGS'			=> 'Settings',	'STARTING_CONVERT'			=> 'Starting conversion process',	'STEP_PERCENT_COMPLETED'	=> 'Step <strong>%d</strong> of <strong>%d</strong>',	'SUB_INTRO'					=> 'Introduction',	'SUB_LICENSE'				=> 'License',	'SUB_SUPPORT'				=> 'Support',	'SUCCESSFUL_CONNECT'		=> 'Successful connection',	'SUPPORT_BODY'				=> 'Full support will be provided for the current stable release of phpBB3, free of charge. This includes:</p><ul><li>installation</li><li>configuration</li><li>technical questions</li><li>problems relating to potential bugs in the software</li><li>updating from Release Candidate (RC) versions to the latest stable version</li><li>converting from phpBB 2.0.x to phpBB3</li><li>converting from other discussion board software to phpBB3 (please see the <a href="http://www.phpbb.com/community/viewforum.php?f=65">Convertors Forum</a>)</li></ul><p>We encourage users still running beta versions of phpBB3 to replace their installation with a fresh copy of the latest version.</p><h2>MODs / Styles</h2><p>For issues relating to MODs, please post in the appropriate <a href="http://www.phpbb.com/community/viewforum.php?f=81">Modifications Forum</a>.<br />For issues relating to styles, templates and imagesets, please post in the appropriate <a href="http://www.phpbb.com/community/viewforum.php?f=80">Styles Forum</a>.<br /><br />If your question relates to a specific package, please post directly in the topic dedicated to the package.</p><h2>Obtaining Support</h2><p><a href="http://www.phpbb.com/community/viewtopic.php?f=14&amp;t=571070">The phpBB Welcome Package</a><br /><a href="http://www.phpbb.com/support/">Support Section</a><br /><a href="http://www.phpbb.com/support/documentation/3.0/quickstart/">Quick Start Guide</a><br /><br />To ensure you stay up to date with the latest news and releases, why not <a href="http://www.phpbb.com/support/">subscribe to our mailing list</a>?<br /><br />',	'SYNC_FORUMS'				=> 'Starting to synchronise forums',	'SYNC_POST_COUNT'			=> 'Synchronising post_counts',	'SYNC_POST_COUNT_ID'		=> 'Synchronising post_counts from <var>entry</var> %1$s to %2$s.',	'SYNC_TOPICS'				=> 'Starting to synchronise topics',	'SYNC_TOPIC_ID'				=> 'Synchronising topics from <var>topic_id</var> %1$s to %2$s.',	'TABLES_MISSING'			=> 'Could not find these tables<br /> <strong>%s</strong>.',	'TABLE_PREFIX'				=> 'Prefix for tables in database',	'TABLE_PREFIX_EXPLAIN'		=> 'The prefix must start with a letter and must only contain letters, numbers and underscores.',	'TABLE_PREFIX_SAME'			=> 'The table prefix needs to be the one used by the software you are converting from.<br /> Specified table prefix was %s.',	'TESTS_PASSED'				=> 'Tests passed',	'TESTS_FAILED'				=> 'Tests failed',	'UNABLE_WRITE_LOCK'			=> 'Unable to write lock file.',	'UNAVAILABLE'				=> 'Unavailable',	'UNWRITABLE'				=> 'Unwritable',	'UPDATE_TOPICS_POSTED'		=> 'Generating topics posted information',	'UPDATE_TOPICS_POSTED_ERR'	=> 'An error occured while generating topics posted information. You can retry this step in the ACP after the conversion process is completed.',	'VERIFY_OPTIONS'			=> 'Verifying conversion options',	'VERSION'					=> 'Version',	'WELCOME_INSTALL'			=> 'Welcome to phpBB3 Installation',	'WRITABLE'					=> 'Writable',));// Updater$lang = array_merge($lang, array(	'ALL_FILES_UP_TO_DATE'		=> 'All files are up to date with the latest phpBB version. You should now <a href="../ucp.php?mode=login">login to your board</a> and check if everything is working fine. Do not forget to delete, rename or move your install directory! Please send us updated information about your server and board configurations from the <a href="../ucp.php?mode=login&amp;redirect=adm/index.php%3Fi=send_statistics%26mode=send_statistics">Send statistics</a> module in your ACP.',	'ARCHIVE_FILE'				=> 'Source file within archive',	'BACK'				=> 'Back',	'BINARY_FILE'		=> 'Binary file',	'BOT'				=> 'Spider/Robot',	'CHANGE_CLEAN_NAMES'			=> 'The method used to make sure a username is not used by multiple users has been changed. There are some users which have the same name when compared with the new method. You have to delete or rename these users to make sure that each name is only used by one user before you can proceed.',	'CHECK_FILES'					=> 'Check files',	'CHECK_FILES_AGAIN'				=> 'Check files again',	'CHECK_FILES_EXPLAIN'			=> 'Within the next step all files will be checked against the update files - this can take a while if this is the first file check.',	'CHECK_FILES_UP_TO_DATE'		=> 'According to your database your version is up to date. You may want to proceed with the file check to make sure all files are really up to date with the latest phpBB version.',	'CHECK_UPDATE_DATABASE'			=> 'Continue update process',	'COLLECTED_INFORMATION'			=> 'File information',	'COLLECTED_INFORMATION_EXPLAIN'	=> 'The list below shows information about the files needing an update. Please read the information in front of every status block to see what they mean and what you may need to do to perform a successful update.',	'COLLECTING_FILE_DIFFS'			=> 'Collecting file differences',	'COMPLETE_LOGIN_TO_BOARD'		=> 'You should now <a href="../ucp.php?mode=login">login to your board</a> and check if everything is working fine. Do not forget to delete, rename or move your install directory!',	'CONTINUE_UPDATE_NOW'			=> 'Continue the update process now',		// Shown within the database update script at the end if called from the updater	'CONTINUE_UPDATE'				=> 'Continue update now',					// Shown after file upload to indicate the update process is not yet finished	'CURRENT_FILE'					=> 'Begin of Conflict - Original File code before update',	'CURRENT_VERSION'				=> 'Current version',	'DATABASE_TYPE'						=> 'Database type',	'DATABASE_UPDATE_INFO_OLD'			=> 'The database update file within the install directory is outdated. Please make sure you uploaded the correct version of the file.',	'DELETE_USER_REMOVE'				=> 'Delete user and remove posts',	'DELETE_USER_RETAIN'				=> 'Delete user but keep posts',	'DESTINATION'						=> 'Destination file',	'DIFF_INLINE'						=> 'Inline',	'DIFF_RAW'							=> 'Raw unified diff',	'DIFF_SEP_EXPLAIN'					=> 'Code block used within the updated/new file',	'DIFF_SIDE_BY_SIDE'					=> 'Side by Side',	'DIFF_UNIFIED'						=> 'Unified diff',	'DO_NOT_UPDATE'						=> 'Do not update this file',	'DONE'								=> 'Done',	'DOWNLOAD'							=> 'Download',	'DOWNLOAD_AS'						=> 'Download as',	'DOWNLOAD_UPDATE_METHOD_BUTTON'		=> 'Download modified files archive (recommended)',	'DOWNLOAD_CONFLICTS'				=> 'Download conflicts for this file',	'DOWNLOAD_CONFLICTS_EXPLAIN'		=> 'Search for &lt;&lt;&lt; to spot conflicts',	'DOWNLOAD_UPDATE_METHOD'			=> 'Download modified files archive',	'DOWNLOAD_UPDATE_METHOD_EXPLAIN'	=> 'Once downloaded you should unpack the archive. You will find the modified files you need to upload to your phpBB root directory within it. Please upload the files to their respective locations then. After you have uploaded all files, please check the files again with the other button below.',	'ERROR'			=> 'Error',	'EDIT_USERNAME'	=> 'Edit username',	'FILE_ALREADY_UP_TO_DATE'		=> 'File is already up to date.',	'FILE_DIFF_NOT_ALLOWED'			=> 'File not allowed to be diffed.',	'FILE_USED'						=> 'Information used from',			// Single file	'FILES_CONFLICT'				=> 'Conflict files',	'FILES_CONFLICT_EXPLAIN'		=> 'The following files are modified and do not represent the original files from the old version. phpBB determined that these files create conflicts if they are tried to be merged. Please investigate the conflicts and try to manually resolve them or continue the update choosing the preferred merging method. If you resolve the conflicts manually check the files again after you modified them. You are also able to choose between the preferred merge method for every file. The first one will result in a file where the conflicting lines from your old file will be lost, the other one will result in losing the changes from the newer file.',	'FILES_MODIFIED'				=> 'Modified files',	'FILES_MODIFIED_EXPLAIN'		=> 'The following files are modified and do not represent the original files from the old version. The updated file will be a merge between your modifications and the new file.',	'FILES_NEW'						=> 'New files',	'FILES_NEW_EXPLAIN'				=> 'The following files currently do not exist within your installation. These files will be added to your installation.',	'FILES_NEW_CONFLICT'			=> 'New conflicting files',	'FILES_NEW_CONFLICT_EXPLAIN'	=> 'The following files are new within the latest version but it has been determined that there is already a file with the same name within the same position. This file will be overwritten by the new file.',	'FILES_NOT_MODIFIED'			=> 'Not modified files',	'FILES_NOT_MODIFIED_EXPLAIN'	=> 'The following files are not modified and represent the original phpBB files from the version you want to update from.',	'FILES_UP_TO_DATE'				=> 'Already updated files',	'FILES_UP_TO_DATE_EXPLAIN'		=> 'The following files are already up to date and do not need to be updated.',	'FTP_SETTINGS'					=> 'FTP settings',	'FTP_UPDATE_METHOD'				=> 'FTP upload',	'INCOMPATIBLE_UPDATE_FILES'		=> 'The update files found are incompatible with your installed version. Your installed version is %1$s and the update file is for updating phpBB %2$s to %3$s.',	'INCOMPLETE_UPDATE_FILES'		=> 'The update files are incomplete.',	'INLINE_UPDATE_SUCCESSFUL'		=> 'The database update was successful. Now you need to continue the update process.',	'KEEP_OLD_NAME'		=> 'Keep username',	'LATEST_VERSION'		=> 'Latest version',	'LINE'					=> 'Line',	'LINE_ADDED'			=> 'Added',	'LINE_MODIFIED'			=> 'Modified',	'LINE_REMOVED'			=> 'Removed',	'LINE_UNMODIFIED'		=> 'Unmodified',	'LOGIN_UPDATE_EXPLAIN'	=> 'In order to update your installation you need to login first.',	'MAPPING_FILE_STRUCTURE'	=> 'To ease the upload here are the file locations which map your phpBB installation.',	'MERGE_MODIFICATIONS_OPTION'	=> 'Merge modifications',	'MERGE_NO_MERGE_NEW_OPTION'	=> 'Do not merge - use new file',	'MERGE_NO_MERGE_MOD_OPTION'	=> 'Do not merge - use currently installed file',	'MERGE_MOD_FILE_OPTION'		=> 'Merge modifications (removes new phpBB code within conflicting block)',	'MERGE_NEW_FILE_OPTION'		=> 'Merge modifications (removes modified code within conflicting block)',	'MERGE_SELECT_ERROR'		=> 'Conflicting file merge modes are not correctly selected.',	'MERGING_FILES'				=> 'Merging differences',	'MERGING_FILES_EXPLAIN'		=> 'Currently collecting final file changes.<br /><br />Please wait until phpBB has completed all operations on changed files.',	'NEW_FILE'						=> 'End of Conflict',	'NEW_USERNAME'					=> 'New username',	'NO_AUTH_UPDATE'				=> 'Not authorised to update',	'NO_ERRORS'						=> 'No errors',	'NO_UPDATE_FILES'				=> 'Not updating the following files',	'NO_UPDATE_FILES_EXPLAIN'		=> 'The following files are new or modified but the directory they normally reside in could not be found on your installation. If this list contains files to other directories than language/ or styles/ than you may have modified your directory structure and the update may be incomplete.',	'NO_UPDATE_FILES_OUTDATED'		=> 'No valid update directory was found, please make sure you uploaded the relevant files.<br /><br />Your installation does <strong>not</strong> seem to be up to date. Updates are available for your version of phpBB %1$s, please visit <a href="http://www.phpbb.com/downloads/" rel="external">http://www.phpbb.com/downloads/</a> to obtain the correct package to update from Version %2$s to Version %3$s.',	'NO_UPDATE_FILES_UP_TO_DATE'	=> 'Your version is up to date. There is no need to run the update tool. If you want to make an integrity check on your files make sure you uploaded the correct update files.',	'NO_UPDATE_INFO'				=> 'Update file information could not be found.',	'NO_UPDATES_REQUIRED'			=> 'No updates required',	'NO_VISIBLE_CHANGES'			=> 'No visible changes',	'NOTICE'						=> 'Notice',	'NUM_CONFLICTS'					=> 'Number of conflicts',	'NUMBER_OF_FILES_COLLECTED'		=> 'Currently differences from %1$d of %2$d files have been checked.<br />Please wait until all files are checked.',	'OLD_UPDATE_FILES'		=> 'Update files are out of date. The update files found are for updating from phpBB %1$s to phpBB %2$s but the latest version of phpBB is %3$s.',	'PACKAGE_UPDATES_TO'				=> 'Current package updates to version',	'PERFORM_DATABASE_UPDATE'			=> 'Perform database update',	'PERFORM_DATABASE_UPDATE_EXPLAIN'	=> 'Below you will find a button to the database update script. The database update can take a while, so please do not stop the execution if it seems to hang. After the database update has been performed just follow the instructions to continue the update process.',	'PREVIOUS_VERSION'					=> 'Previous version',	'PROGRESS'							=> 'Progress',	'RESULT'					=> 'Result',	'RUN_DATABASE_SCRIPT'		=> 'Update my database now',	'SELECT_DIFF_MODE'			=> 'Select diff mode',	'SELECT_DOWNLOAD_FORMAT'	=> 'Select download archive format',	'SELECT_FTP_SETTINGS'		=> 'Select FTP settings',	'SHOW_DIFF_CONFLICT'		=> 'Show differences/conflicts',	'SHOW_DIFF_FINAL'			=> 'Show resulting file',	'SHOW_DIFF_MODIFIED'		=> 'Show merged differences',	'SHOW_DIFF_NEW'				=> 'Show file contents',	'SHOW_DIFF_NEW_CONFLICT'	=> 'Show differences',	'SHOW_DIFF_NOT_MODIFIED'	=> 'Show differences',	'SOME_QUERIES_FAILED'		=> 'Some queries failed, the statements and errors are listed below.',	'SQL'						=> 'SQL',	'SQL_FAILURE_EXPLAIN'		=> 'This is probably nothing to worry about, update will continue. Should this fail to complete you may need to seek help at our support forums. See <a href="../docs/README.html">README</a> for details on how to obtain advice.',	'STAGE_FILE_CHECK'			=> 'Check files',	'STAGE_UPDATE_DB'			=> 'Update database',	'STAGE_UPDATE_FILES'		=> 'Update files',	'STAGE_VERSION_CHECK'		=> 'Version check',	'STATUS_CONFLICT'			=> 'Modified file producing conflicts',	'STATUS_MODIFIED'			=> 'Modified file',	'STATUS_NEW'				=> 'New file',	'STATUS_NEW_CONFLICT'		=> 'Conflicting new file',	'STATUS_NOT_MODIFIED'		=> 'Not modified file',	'STATUS_UP_TO_DATE'			=> 'Already updated file',	'TOGGLE_DISPLAY'			=> 'View/Hide file list',	'TRY_DOWNLOAD_METHOD'		=> 'You may want to try the download modified files method.<br />This method always works and is also the recommended update path.',	'TRY_DOWNLOAD_METHOD_BUTTON'=> 'Try this method now',	'UPDATE_COMPLETED'				=> 'Update completed',	'UPDATE_DATABASE'				=> 'Update database',	'UPDATE_DATABASE_EXPLAIN'		=> 'Within the next step the database will be updated.',	'UPDATE_DATABASE_SCHEMA'		=> 'Updating database schema',	'UPDATE_FILES'					=> 'Update files',	'UPDATE_FILES_NOTICE'			=> 'Please make sure you have updated your board files too, this file is only updating your database.',	'UPDATE_INSTALLATION'			=> 'Update phpBB installation',	'UPDATE_INSTALLATION_EXPLAIN'	=> 'With this option, it is possible to update your phpBB installation to the latest version.<br />During the process all of your files will be checked for their integrity. You are able to review all differences and files before the update.<br /><br />The file update itself can be done in two different ways.</p><h2>Manual Update</h2><p>With this update you only download your personal set of changed files to make sure you do not lose your file modifications you may have done. After you downloaded this package you need to manually upload the files to their correct position under your phpBB root directory. Once done, you are able to do the file check stage again to see if you moved the files to their correct location.</p><h2>Automatic Update with FTP</h2><p>This method is similar to the first one but without the need to download the changed files and uploading them on your own. This will be done for you. In order to use this method you need to know your FTP login details since you will be asked for them. Once finished you will be redirected to the file check again to make sure everything got updated correctly.<br /><br />',	'UPDATE_INSTRUCTIONS'			=> '		<h1>Release announcement</h1>		<p>Please read <a href="%1$s" title="%1$s"><strong>the release announcement for the latest version</strong></a> before you continue your update process, it may contain useful information. It also contains full download links as well as the change log.</p>		<br />		<h1>How to update your installation with the Automatic Update Package</h1>		<p>The recommended way of updating your installation listed here is only valid for the automatic update package. You are also able to update your installation using the methods listed within the INSTALL.html document. The steps for updating phpBB3 automatically are:</p>		<ul style="margin-left: 20px; font-size: 1.1em;">			<li>Go to the <a href="http://www.phpbb.com/downloads/" title="http://www.phpbb.com/downloads/">phpBB.com downloads page</a> and download the "Automatic Update Package" archive.<br /><br /></li>			<li>Unpack the archive.<br /><br /></li>			<li>Upload the complete uncompressed install folder to your phpBB root directory (where your config.php file is).<br /><br /></li>		</ul>		<p>Once uploaded your board will be offline for normal users due to the install directory you uploaded now present.<br /><br />		<strong><a href="%2$s" title="%2$s">Now start the update process by pointing your browser to the install folder</a>.</strong><br />		<br />		You will then be guided through the update process. You will be notified once the update is complete.		</p>	',	'UPDATE_INSTRUCTIONS_INCOMPLETE'	=> '		<h1>Incomplete update detected</h1>		<p>phpBB detected an incomplete automatic update. Please make sure you followed every step within the automatic update tool. Below you will find the link again, or go directly to your install directory.</p>	',	'UPDATE_METHOD'					=> 'Update method',	'UPDATE_METHOD_EXPLAIN'			=> 'You are now able to choose your preferred update method. Using the FTP upload will present you with a form you need to enter your FTP account details into. With this method the files will be automatically moved to the new location and backups of the old files being created by appending .bak to the filename. If you choose to download the modified files you are able to unpack and upload them to their correct location manually later.',	'UPDATE_REQUIRES_FILE'			=> 'The updater requires that the following file is present: %s',	'UPDATE_SUCCESS'				=> 'Update was successful',	'UPDATE_SUCCESS_EXPLAIN'		=> 'Successfully updated all files. The next step involves checking all files again to make sure the files got updated correctly.',	'UPDATE_VERSION_OPTIMIZE'		=> 'Updating version and optimising tables',	'UPDATING_DATA'					=> 'Updating data',	'UPDATING_TO_LATEST_STABLE'		=> 'Updating database to latest stable release',	'UPDATED_VERSION'				=> 'Updated version',	'UPGRADE_INSTRUCTIONS'			=> 'A new feature release <strong>%1$s</strong> is available. Please read <a href="%2$s" title="%2$s"><strong>the release announcement</strong></a> to learn about what it has to offer, and how to upgrade.',	'UPLOAD_METHOD'					=> 'Upload method',	'UPDATE_DB_SUCCESS'				=> 'Database update was successful.',	'USER_ACTIVE'					=> 'Active user',	'USER_INACTIVE'					=> 'Inactive user',	'VERSION_CHECK'					=> 'Version check',	'VERSION_CHECK_EXPLAIN'			=> 'Checks to see if your phpBB installation is up to date.',	'VERSION_NOT_UP_TO_DATE'		=> 'Your phpBB installation is not up to date. Please continue the update process.',	'VERSION_NOT_UP_TO_DATE_ACP'	=> 'Your phpBB installation is not up to date.<br />Below is a link to the release announcement, which contains more information as well as instructions on updating.',	'VERSION_NOT_UP_TO_DATE_TITLE'	=> 'Your phpBB installation is not up to date.',	'VERSION_UP_TO_DATE'			=> 'Your phpBB installation is up to date. Although there are no updates available at this time, you may continue in order to perform a file validity check.',	'VERSION_UP_TO_DATE_ACP'		=> 'Your phpBB installation is up to date. There are no updates available at this time.',	'VIEWING_FILE_CONTENTS'			=> 'Viewing file contents',	'VIEWING_FILE_DIFF'				=> 'Viewing file differences',	'WRONG_INFO_FILE_FORMAT'	=> 'Wrong info file format',));// Default database schema entries...$lang = array_merge($lang, array(	'CONFIG_BOARD_EMAIL_SIG'		=> 'Thanks, The Management',	'CONFIG_SITE_DESC'				=> 'A short text to describe your forum',	'CONFIG_SITENAME'				=> 'yourdomain.com',	'DEFAULT_INSTALL_POST'			=> 'This is an example post in your phpBB3 installation. Everything seems to be working. You may delete this post if you like and continue to set up your board. During the installation process your first category and your first forum are assigned an appropriate set of permissions for the predefined usergroups administrators, bots, global moderators, guests, registered users and registered COPPA users. If you also choose to delete your first category and your first forum, do not forget to assign permissions for all these usergroups for all new categories and forums you create. It is recommended to rename your first category and your first forum and copy permissions from these while creating new categories and forums. Have fun!',	'FORUMS_FIRST_CATEGORY'			=> 'Your first category',	'FORUMS_TEST_FORUM_DESC'		=> 'Description of your first forum.',	'FORUMS_TEST_FORUM_TITLE'		=> 'Your first forum',	'RANKS_SITE_ADMIN_TITLE'		=> 'Site Admin',	'REPORT_WAREZ'					=> 'The post contains links to illegal or pirated software.',	'REPORT_SPAM'					=> 'The reported post has the only purpose to advertise for a website or another product.',	'REPORT_OFF_TOPIC'				=> 'The reported post is off topic.',	'REPORT_OTHER'					=> 'The reported post does not fit into any other category, please use the further information field.',	'SMILIES_ARROW'					=> 'Arrow',	'SMILIES_CONFUSED'				=> 'Confused',	'SMILIES_COOL'					=> 'Cool',	'SMILIES_CRYING'				=> 'Crying or Very Sad',	'SMILIES_EMARRASSED'			=> 'Embarrassed',	'SMILIES_EVIL'					=> 'Evil or Very Mad',	'SMILIES_EXCLAMATION'			=> 'Exclamation',	'SMILIES_GEEK'					=> 'Geek',	'SMILIES_IDEA'					=> 'Idea',	'SMILIES_LAUGHING'				=> 'Laughing',	'SMILIES_MAD'					=> 'Mad',	'SMILIES_MR_GREEN'				=> 'Mr. Green',	'SMILIES_NEUTRAL'				=> 'Neutral',	'SMILIES_QUESTION'				=> 'Question',	'SMILIES_RAZZ'					=> 'Razz',	'SMILIES_ROLLING_EYES'			=> 'Rolling Eyes',	'SMILIES_SAD'					=> 'Sad',	'SMILIES_SHOCKED'				=> 'Shocked',	'SMILIES_SMILE'					=> 'Smile',	'SMILIES_SURPRISED'				=> 'Surprised',	'SMILIES_TWISTED_EVIL'			=> 'Twisted Evil',	'SMILIES_UBER_GEEK'				=> 'Uber Geek',	'SMILIES_VERY_HAPPY'			=> 'Very Happy',	'SMILIES_WINK'					=> 'Wink',	'TOPICS_TOPIC_TITLE'			=> 'Welcome to phpBB3',));?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2008 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** A small class for 3.0.x (no autoloader in 3.0.x)** @package VC*/class phpbb_captcha_factory{	/**	* return an instance of class $name in file $name_plugin.php	*/	function &get_instance($name)	{		global $phpbb_root_path, $phpEx;		$name = basename($name);		if (!class_exists($name))		{			include($phpbb_root_path . "includes/captcha/plugins/{$name}_plugin." . $phpEx);		}		$instance = call_user_func(array($name, 'get_instance'));		return $instance;	}	/**	* Call the garbage collector	*/	function garbage_collect($name)	{		global $phpbb_root_path, $phpEx;		$name = basename($name);		if (!class_exists($name))		{			include($phpbb_root_path . "includes/captcha/plugins/{$name}_plugin." . $phpEx);		}		call_user_func(array($name, 'garbage_collect'), 0);	}	/**	* return a list of all discovered CAPTCHA plugins	*/	function get_captcha_types()	{		global $phpbb_root_path, $phpEx;		$captchas = array(			'available'		=> array(),			'unavailable'	=> array(),		);		$dp = @opendir($phpbb_root_path . 'includes/captcha/plugins');		if ($dp)		{			while (($file = readdir($dp)) !== false)			{				if ((preg_match('#_plugin\.' . $phpEx . '$#', $file)))				{					$name = preg_replace('#^(.*?)_plugin\.' . $phpEx . '$#', '\1', $file);					if (!class_exists($name))					{						include($phpbb_root_path . "includes/captcha/plugins/$file");					}					if (call_user_func(array($name, 'is_available')))					{						$captchas['available'][$name] = call_user_func(array($name, 'get_name'));					}					else					{						$captchas['unavailable'][$name] = call_user_func(array($name, 'get_name'));					}				}			}			closedir($dp);		}		return $captchas;	}}?>
<?php/**** @package phpBB* @version $Id$* @copyright (c) 2011 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}class phpbb_error_collector{	var $errors;	function phpbb_error_collector()	{		$this->errors = array();	}	function install()	{		set_error_handler(array(&$this, 'error_handler'));	}	function uninstall()	{		restore_error_handler();	}	function error_handler($errno, $msg_text, $errfile, $errline)	{		$this->errors[] = array($errno, $msg_text, $errfile, $errline);	}	function format_errors()	{		$text = '';		foreach ($this->errors as $error)		{			if (!empty($text))			{				$text .= "<br />\n";			}			list($errno, $msg_text, $errfile, $errline) = $error;			// Prevent leakage of local path to phpBB install			$errfile = phpbb_filter_root_path($errfile);			$text .= "Errno $errno: $msg_text at $errfile line $errline";		}		return $text;	}}
<?php/**** acp_posting [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// BBCodes// Note to translators: you can translate everything but what's between { and }$lang = array_merge($lang, array(	'ACP_BBCODES_EXPLAIN'		=> 'BBCode is a special implementation of HTML offering greater control over what and how something is displayed. From this page you can add, remove and edit custom BBCodes.',	'ADD_BBCODE'				=> 'Add a new BBCode',	'BBCODE_DANGER'				=> 'The BBCode you are trying to add seems to use a {TEXT} token inside a HTML attribute. This is a possible XSS security issue. Try using the more restrictive {SIMPLETEXT} or {INTTEXT} types instead. Only proceed if you understand the risks involved and you consider the use of {TEXT} absolutely unavoidable.',	'BBCODE_DANGER_PROCEED'		=> 'Proceed', //'I understand the risk',	'BBCODE_ADDED'				=> 'BBCode added successfully.',	'BBCODE_EDITED'				=> 'BBCode edited successfully.',	'BBCODE_NOT_EXIST'			=> 'The BBCode you selected does not exist.',	'BBCODE_HELPLINE'			=> 'Help line',	'BBCODE_HELPLINE_EXPLAIN'	=> 'This field contains the mouse over text of the BBCode.',	'BBCODE_HELPLINE_TEXT'		=> 'Help line text',	'BBCODE_HELPLINE_TOO_LONG'	=> 'The help line you entered is too long.',	'BBCODE_INVALID_TAG_NAME'	=> 'The BBCode tag name that you selected already exists.',	'BBCODE_INVALID'			=> 'Your BBCode is constructed in an invalid form.',	'BBCODE_OPEN_ENDED_TAG'		=> 'Your custom BBCode must contain both an opening and a closing tag.',	'BBCODE_TAG'				=> 'Tag',	'BBCODE_TAG_TOO_LONG'		=> 'The tag name you selected is too long.',	'BBCODE_TAG_DEF_TOO_LONG'	=> 'The tag definition that you have entered is too long, please shorten your tag definition.',	'BBCODE_USAGE'				=> 'BBCode usage',	'BBCODE_USAGE_EXAMPLE'		=> '[highlight={COLOR}]{TEXT}[/highlight]<br /><br />[font={SIMPLETEXT1}]{SIMPLETEXT2}[/font]',	'BBCODE_USAGE_EXPLAIN'		=> 'Here you define how to use the BBCode. Replace any variable input by the corresponding token (%ssee below%s).',	'EXAMPLE'						=> 'Example:',	'EXAMPLES'						=> 'Examples:',	'HTML_REPLACEMENT'				=> 'HTML replacement',	'HTML_REPLACEMENT_EXAMPLE'		=> '&lt;span style="background-color: {COLOR};"&gt;{TEXT}&lt;/span&gt;<br /><br />&lt;span style="font-family: {SIMPLETEXT1};"&gt;{SIMPLETEXT2}&lt;/span&gt;',	'HTML_REPLACEMENT_EXPLAIN'		=> 'Here you define the default HTML replacement. Do not forget to put back tokens you used above!',	'TOKEN'					=> 'Token',	'TOKENS'				=> 'Tokens',	'TOKENS_EXPLAIN'		=> 'Tokens are placeholders for user input. The input will be validated only if it matches the corresponding definition. If needed, you can number them by adding a number as the last character between the braces, e.g. {TEXT1}, {TEXT2}.<br /><br />Within the HTML replacement you can also use any language string present in your language/ directory like this: {L_<em>&lt;STRINGNAME&gt;</em>} where <em>&lt;STRINGNAME&gt;</em> is the name of the translated string you want to add. For example, {L_WROTE} will be displayed as wrote or its translation according to users locale.<br /><br /><strong>Please note that only tokens listed below are able to be used within custom BBCodes.</strong>',	'TOKEN_DEFINITION'		=> 'What can it be?',	'TOO_MANY_BBCODES'		=> 'You cannot create any more BBCodes. Please remove one or more BBCodes then try again.',	'tokens'	=>	array(		'TEXT'			=> 'Any text, including foreign characters, numbers, etc You should not use this token in HTML tags. Instead try to use IDENTIFIER, INTTEXT or SIMPLETEXT.',		'SIMPLETEXT'	=> 'Characters from the latin alphabet (A-Z), numbers, spaces, commas, dots, minus, plus, hyphen and underscore',		'INTTEXT'		=> 'Unicode letter characters, numbers, spaces, commas, dots, minus, plus, hyphen, underscore and whitespaces.',		'IDENTIFIER'	=> 'Characters from the latin alphabet (A-Z), numbers, hyphen and underscore',		'NUMBER'		=> 'Any series of digits',		'EMAIL'			=> 'A valid e-mail address',		'URL'			=> 'A valid URL using any protocol (http, ftp, etc cannot be used for javascript exploits). If none is given, http:// is prefixed to the string.',		'LOCAL_URL'		=> 'A local URL. The URL must be relative to the topic page and cannot contain a server name or protocol.',		'COLOR'			=> 'A HTML colour, can be either in the numeric form <samp>#FF1234</samp> or a <a href="http://www.w3.org/TR/CSS21/syndata.html#value-def-color">CSS colour keyword</a> such as <samp>fuchsia</samp> or <samp>InactiveBorder</samp>'	)));// Smilies and topic icons$lang = array_merge($lang, array(	'ACP_ICONS_EXPLAIN'		=> 'From this page you can add, remove and edit the icons users may add to their topics or posts. These icons are generally displayed next to topic titles on the forum listing, or the post subjects in topic listings. You can also install and create new packages of icons.',	'ACP_SMILIES_EXPLAIN'	=> 'Smilies or emoticons are typically small, sometimes animated images used to convey an emotion or feeling. From this page you can add, remove and edit the emoticons users can use in their posts and private messages. You can also install and create new packages of smilies.',	'ADD_SMILIES'			=> 'Add multiple smilies',	'ADD_SMILEY_CODE'		=> 'Add additional smiley code',	'ADD_ICONS'				=> 'Add multiple icons',	'AFTER_ICONS'			=> 'After %s',	'AFTER_SMILIES'			=> 'After %s',	'CODE'						=> 'Code',	'CURRENT_ICONS'				=> 'Current icons',	'CURRENT_ICONS_EXPLAIN'		=> 'Choose what to do with the currently installed icons.',	'CURRENT_SMILIES'			=> 'Current smilies',	'CURRENT_SMILIES_EXPLAIN'	=> 'Choose what to do with the currently installed smilies.',	'DISPLAY_ON_POSTING'		=> 'Display on posting page',	'DISPLAY_POSTING'			=> 'On posting page',	'DISPLAY_POSTING_NO'		=> 'Not on posting page',	'EDIT_ICONS'				=> 'Edit icons',	'EDIT_SMILIES'				=> 'Edit smilies',	'EMOTION'					=> 'Emotion',	'EXPORT_ICONS'				=> 'Export and download icons.pak',	'EXPORT_ICONS_EXPLAIN'		=> '%sOn clicking this link, the configuration for your installed icons will be packaged into <samp>icons.pak</samp> which once downloaded can be used to create a <samp>.zip</samp> or <samp>.tgz</samp> file containing all of your icons plus this <samp>icons.pak</samp> configuration file%s.',	'EXPORT_SMILIES'			=> 'Export and download smilies.pak',	'EXPORT_SMILIES_EXPLAIN'	=> '%sOn clicking this link, the configuration for your installed smilies will be packaged into <samp>smilies.pak</samp> which once downloaded can be used to create a <samp>.zip</samp> or <samp>.tgz</samp> file containing all of your smilies plus this <samp>smilies.pak</samp> configuration file%s.',	'FIRST'			=> 'First',	'ICONS_ADD'				=> 'Add a new icon',	'ICONS_NONE_ADDED'		=> 'No icons were added.',	'ICONS_ONE_ADDED'		=> 'The icon has been added successfully.',	'ICONS_ADDED'			=> 'The icons have been added successfully.',	'ICONS_CONFIG'			=> 'Icon configuration',	'ICONS_DELETED'			=> 'The icon has been removed successfully.',	'ICONS_EDIT'			=> 'Edit icon',	'ICONS_ONE_EDITED'		=> 'The icon has been updated successfully.',	'ICONS_NONE_EDITED'		=> 'No icons were updated.',	'ICONS_EDITED'			=> 'The icons have been updated successfully.',	'ICONS_HEIGHT'			=> 'Icon height',	'ICONS_IMAGE'			=> 'Icon image',	'ICONS_IMPORTED'		=> 'The icons pack has been installed successfully.',	'ICONS_IMPORT_SUCCESS'	=> 'The icons pack was imported successfully.',	'ICONS_LOCATION'		=> 'Icon location',	'ICONS_NOT_DISPLAYED'	=> 'The following icons are not displayed on the posting page',	'ICONS_ORDER'			=> 'Icon order',	'ICONS_URL'				=> 'Icon image file',	'ICONS_WIDTH'			=> 'Icon width',	'IMPORT_ICONS'			=> 'Install icons package',	'IMPORT_SMILIES'		=> 'Install smilies package',	'KEEP_ALL'			=> 'Keep all',	'MASS_ADD_SMILIES'	=> 'Add multiple smilies',	'NO_ICONS_ADD'		=> 'There are no icons available for adding.',	'NO_ICONS_EDIT'		=> 'There are no icons available for modifying.',	'NO_ICONS_EXPORT'	=> 'You have no icons with which to create a package.',	'NO_ICONS_PAK'		=> 'No icon packages found.',	'NO_SMILIES_ADD'	=> 'There are no smilies available for adding.',	'NO_SMILIES_EDIT'	=> 'There are no smilies available for modifying.',	'NO_SMILIES_EXPORT'	=> 'You have no smilies with which to create a package.',	'NO_SMILIES_PAK'	=> 'No smiley packages found.',	'PAK_FILE_NOT_READABLE'		=> 'Could not read <samp>.pak</samp> file.',	'REPLACE_MATCHES'	=> 'Replace matches',	'SELECT_PACKAGE'			=> 'Select a package file',	'SMILIES_ADD'				=> 'Add a new smiley',	'SMILIES_NONE_ADDED'		=> 'No smilies were added.',	'SMILIES_ONE_ADDED'			=> 'The smiley has been added successfully.',	'SMILIES_ADDED'				=> 'The smilies have been added successfully.',	'SMILIES_CODE'				=> 'Smiley code',	'SMILIES_CONFIG'			=> 'Smiley configuration',	'SMILIES_DELETED'			=> 'The smiley has been removed successfully.',	'SMILIES_EDIT'				=> 'Edit smiley',	'SMILIE_NO_CODE'			=> 'The smiley %s was ignored, as there was no code entered.',	'SMILIE_NO_EMOTION'			=> 'The smiley %s was ignored, as there was no emotion entered.',	'SMILIE_NO_FILE'			=> 'The smiley %s was ignored, as the file is missing.',	'SMILIES_NONE_EDITED'		=> 'No smilies were updated.',	'SMILIES_ONE_EDITED'		=> 'The smiley has been updated successfully.',	'SMILIES_EDITED'			=> 'The smilies have been updated successfully.',	'SMILIES_EMOTION'			=> 'Emotion',	'SMILIES_HEIGHT'			=> 'Smiley height',	'SMILIES_IMAGE'				=> 'Smiley image',	'SMILIES_IMPORTED'			=> 'The smilies pack has been installed successfully.',	'SMILIES_IMPORT_SUCCESS'	=> 'The smilies pack was imported successfully.',	'SMILIES_LOCATION'			=> 'Smiley location',	'SMILIES_NOT_DISPLAYED'		=> 'The following smilies are not displayed on the posting page',	'SMILIES_ORDER'				=> 'Smiley order',	'SMILIES_URL'				=> 'Smiley image file',	'SMILIES_WIDTH'				=> 'Smiley width',	'TOO_MANY_SMILIES'			=> 'Limit of %d smilies reached.',	'WRONG_PAK_TYPE'	=> 'The specified package does not contain the appropriate data.',));// Word censors$lang = array_merge($lang, array(	'ACP_WORDS_EXPLAIN'		=> 'From this control panel you can add, edit, and remove words that will be automatically censored on your forums. People are still allowed to register with usernames containing these words. Wildcards (*) are accepted in the word field, e.g. *test* will match detestable, test* would match testing, *test would match detest.',	'ADD_WORD'				=> 'Add new word',	'EDIT_WORD'		=> 'Edit word censor',	'ENTER_WORD'	=> 'You must enter a word and its replacement.',	'NO_WORD'	=> 'No word selected for editing.',	'REPLACEMENT'	=> 'Replacement',	'UPDATE_WORD'	=> 'Update word censor',	'WORD'				=> 'Word',	'WORD_ADDED'		=> 'The word censor has been successfully added.',	'WORD_REMOVED'		=> 'The selected word censor has been successfully removed.',	'WORD_UPDATED'		=> 'The selected word censor has been successfully updated.',));// Ranks$lang = array_merge($lang, array(	'ACP_RANKS_EXPLAIN'		=> 'Using this form you can add, edit, view and delete ranks. You can also create special ranks which can be applied to a user via the user management facility.',	'ADD_RANK'				=> 'Add new rank',	'MUST_SELECT_RANK'		=> 'You must select a rank.',	'NO_ASSIGNED_RANK'		=> 'No special rank assigned.',	'NO_RANK_TITLE'			=> 'You havent specified a title for the rank.',	'NO_UPDATE_RANKS'		=> 'The rank was successfully deleted. However user accounts using this rank were not updated. You will need to manually reset the rank on these accounts.',	'RANK_ADDED'			=> 'The rank was successfully added.',	'RANK_IMAGE'			=> 'Rank image',	'RANK_IMAGE_EXPLAIN'	=> 'Use this to define a small image associated with the rank. The path is relative to the root phpBB directory.',	'RANK_IMAGE_IN_USE'		=> '(In use)',	'RANK_MINIMUM'			=> 'Minimum posts',	'RANK_REMOVED'			=> 'The rank was successfully deleted.',	'RANK_SPECIAL'			=> 'Set as special rank',	'RANK_TITLE'			=> 'Rank title',	'RANK_UPDATED'			=> 'The rank was successfully updated.',));// Disallow Usernames$lang = array_merge($lang, array(	'ACP_DISALLOW_EXPLAIN'	=> 'Here you can control usernames which will not be allowed to be used. Disallowed usernames are allowed to contain a wildcard character of *.',	'ADD_DISALLOW_EXPLAIN'	=> 'You can disallow a username using the wildcard character * to match any character.',	'ADD_DISALLOW_TITLE'	=> 'Add a disallowed username',	'DELETE_DISALLOW_EXPLAIN'	=> 'You can remove a disallowed username by selecting the username from this list and clicking submit.',	'DELETE_DISALLOW_TITLE'		=> 'Remove a disallowed username',	'DISALLOWED_ALREADY'		=> 'The name you entered is already disallowed.',	'DISALLOWED_DELETED'		=> 'The disallowed username has been successfully removed.',	'DISALLOW_SUCCESSFUL'		=> 'The disallowed username has been successfully added.',	'NO_DISALLOWED'				=> 'No disallowed usernames',	'NO_USERNAME_SPECIFIED'		=> 'You havent selected or entered a username to operate with.',));// Reasons$lang = array_merge($lang, array(	'ACP_REASONS_EXPLAIN'	=> 'Here you can manage the reasons used in reports and denial messages when disapproving posts. There is one default reason (marked with a *) you are not able to remove, this reason is normally used for custom messages if no reason fits.',	'ADD_NEW_REASON'		=> 'Add new reason',	'AVAILABLE_TITLES'		=> 'Available localised reason titles',	'IS_NOT_TRANSLATED'			=> 'Reason has <strong>not</strong> been localised.',	'IS_NOT_TRANSLATED_EXPLAIN'	=> 'Reason has <strong>not</strong> been localised. If you want to provide the localised form, specify the correct key from the language files report reasons section.',	'IS_TRANSLATED'				=> 'Reason has been localised.',	'IS_TRANSLATED_EXPLAIN'		=> 'Reason has been localised. If the title you enter here is specified within the language files report reasons section, the localised form of the title and description will be used.',	'NO_REASON'					=> 'Reason could not be found.',	'NO_REASON_INFO'			=> 'You have to specify a title and a description for this reason.',	'NO_REMOVE_DEFAULT_REASON'	=> 'You are not able to remove the default reason Other.',	'REASON_ADD'				=> 'Add report/denial reason',	'REASON_ADDED'				=> 'Report/denial reason successfully added.',	'REASON_ALREADY_EXIST'		=> 'A reason with this title already exist, please enter another title for this reason.',	'REASON_DESCRIPTION'		=> 'Reason description',	'REASON_DESC_TRANSLATED'	=> 'Displayed reason description',	'REASON_EDIT'				=> 'Edit report/denial reason',	'REASON_EDIT_EXPLAIN'		=> 'Here you are able to add or edit a reason. If the reason is translated the localised version is used instead of the description entered here.',	'REASON_REMOVED'			=> 'Report/denial reason successfully removed.',	'REASON_TITLE'				=> 'Reason title',	'REASON_TITLE_TRANSLATED'	=> 'Displayed reason title',	'REASON_UPDATED'			=> 'Report/denial reason successfully updated.',	'USED_IN_REPORTS'		=> 'Used in reports',));?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_permissions_info{	function module()	{		return array(			'filename'	=> 'acp_permissions',			'title'		=> 'ACP_PERMISSIONS',			'version'	=> '1.0.0',			'modes'		=> array(				'intro'					=> array('title' => 'ACP_PERMISSIONS', 'auth' => 'acl_a_authusers || acl_a_authgroups || acl_a_viewauth', 'cat' => array('ACP_CAT_PERMISSIONS')),				'trace'					=> array('title' => 'ACP_PERMISSION_TRACE', 'auth' => 'acl_a_viewauth', 'display' => false, 'cat' => array('ACP_PERMISSION_MASKS')),				'setting_forum_local'	=> array('title' => 'ACP_FORUM_PERMISSIONS', 'auth' => 'acl_a_fauth && (acl_a_authusers || acl_a_authgroups)', 'cat' => array('ACP_FORUM_BASED_PERMISSIONS')),				'setting_forum_copy'	=> array('title' => 'ACP_FORUM_PERMISSIONS_COPY', 'auth' => 'acl_a_fauth && acl_a_authusers && acl_a_authgroups && acl_a_mauth', 'cat' => array('ACP_FORUM_BASED_PERMISSIONS')),				'setting_mod_local'		=> array('title' => 'ACP_FORUM_MODERATORS', 'auth' => 'acl_a_mauth && (acl_a_authusers || acl_a_authgroups)', 'cat' => array('ACP_FORUM_BASED_PERMISSIONS')),				'setting_user_global'	=> array('title' => 'ACP_USERS_PERMISSIONS', 'auth' => 'acl_a_authusers && (acl_a_aauth || acl_a_mauth || acl_a_uauth)', 'cat' => array('ACP_GLOBAL_PERMISSIONS', 'ACP_CAT_USERS')),				'setting_user_local'	=> array('title' => 'ACP_USERS_FORUM_PERMISSIONS', 'auth' => 'acl_a_authusers && (acl_a_mauth || acl_a_fauth)', 'cat' => array('ACP_FORUM_BASED_PERMISSIONS', 'ACP_CAT_USERS')),				'setting_group_global'	=> array('title' => 'ACP_GROUPS_PERMISSIONS', 'auth' => 'acl_a_authgroups && (acl_a_aauth || acl_a_mauth || acl_a_uauth)', 'cat' => array('ACP_GLOBAL_PERMISSIONS', 'ACP_GROUPS')),				'setting_group_local'	=> array('title' => 'ACP_GROUPS_FORUM_PERMISSIONS', 'auth' => 'acl_a_authgroups && (acl_a_mauth || acl_a_fauth)', 'cat' => array('ACP_FORUM_BASED_PERMISSIONS', 'ACP_GROUPS')),				'setting_admin_global'	=> array('title' => 'ACP_ADMINISTRATORS', 'auth' => 'acl_a_aauth && (acl_a_authusers || acl_a_authgroups)', 'cat' => array('ACP_GLOBAL_PERMISSIONS')),				'setting_mod_global'	=> array('title' => 'ACP_GLOBAL_MODERATORS', 'auth' => 'acl_a_mauth && (acl_a_authusers || acl_a_authgroups)', 'cat' => array('ACP_GLOBAL_PERMISSIONS')),				'view_admin_global'		=> array('title' => 'ACP_VIEW_ADMIN_PERMISSIONS', 'auth' => 'acl_a_viewauth', 'cat' => array('ACP_PERMISSION_MASKS')),				'view_user_global'		=> array('title' => 'ACP_VIEW_USER_PERMISSIONS', 'auth' => 'acl_a_viewauth', 'cat' => array('ACP_PERMISSION_MASKS')),				'view_mod_global'		=> array('title' => 'ACP_VIEW_GLOBAL_MOD_PERMISSIONS', 'auth' => 'acl_a_viewauth', 'cat' => array('ACP_PERMISSION_MASKS')),				'view_mod_local'		=> array('title' => 'ACP_VIEW_FORUM_MOD_PERMISSIONS', 'auth' => 'acl_a_viewauth', 'cat' => array('ACP_PERMISSION_MASKS')),				'view_forum_local'		=> array('title' => 'ACP_VIEW_FORUM_PERMISSIONS', 'auth' => 'acl_a_viewauth', 'cat' => array('ACP_PERMISSION_MASKS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_main{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template;		global $phpbb_root_path, $phpbb_admin_path, $phpEx;		// Show restore permissions notice		if ($user->data['user_perm_from'] && $auth->acl_get('a_switchperm'))		{			$this->tpl_name = 'acp_main';			$this->page_title = 'ACP_MAIN';			$sql = 'SELECT user_id, username, user_colour				FROM ' . USERS_TABLE . '				WHERE user_id = ' . $user->data['user_perm_from'];			$result = $db->sql_query($sql);			$user_row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			$perm_from = '<strong' . (($user_row['user_colour']) ? ' style="color: #' . $user_row['user_colour'] . '">' : '>');			$perm_from .= ($user_row['user_id'] != ANONYMOUS) ? '<a href="' . append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=viewprofile&amp;u=' . $user_row['user_id']) . '">' : '';			$perm_from .= $user_row['username'];			$perm_from .= ($user_row['user_id'] != ANONYMOUS) ? '</a>' : '';			$perm_from .= '</strong>';			$template->assign_vars(array(				'S_RESTORE_PERMISSIONS'		=> true,				'U_RESTORE_PERMISSIONS'		=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=restore_perm'),				'PERM_FROM'					=> $perm_from,				'L_PERMISSIONS_TRANSFERRED_EXPLAIN'	=> sprintf($user->lang['PERMISSIONS_TRANSFERRED_EXPLAIN'], $perm_from, append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=restore_perm')),			));			return;		}		$action = request_var('action', '');		if ($action)		{			if ($action === 'admlogout')			{				$user->unset_admin();				$redirect_url = append_sid("{$phpbb_root_path}index.$phpEx");				meta_refresh(3, $redirect_url);				trigger_error($user->lang['ADM_LOGGED_OUT'] . '<br /><br />' . sprintf($user->lang['RETURN_INDEX'], '<a href="' . $redirect_url . '">', '</a>'));			}			if (!confirm_box(true))			{				switch ($action)				{					case 'online':						$confirm = true;						$confirm_lang = 'RESET_ONLINE_CONFIRM';					break;					case 'stats':						$confirm = true;						$confirm_lang = 'RESYNC_STATS_CONFIRM';					break;					case 'user':						$confirm = true;						$confirm_lang = 'RESYNC_POSTCOUNTS_CONFIRM';					break;					case 'date':						$confirm = true;						$confirm_lang = 'RESET_DATE_CONFIRM';					break;					case 'db_track':						$confirm = true;						$confirm_lang = 'RESYNC_POST_MARKING_CONFIRM';					break;					case 'purge_cache':						$confirm = true;						$confirm_lang = 'PURGE_CACHE_CONFIRM';					break;					case 'purge_sessions':						$confirm = true;						$confirm_lang = 'PURGE_SESSIONS_CONFIRM';					break;					default:						$confirm = true;						$confirm_lang = 'CONFIRM_OPERATION';				}				if ($confirm)				{					confirm_box(false, $user->lang[$confirm_lang], build_hidden_fields(array(						'i'			=> $id,						'mode'		=> $mode,						'action'	=> $action,					)));				}			}			else			{				switch ($action)				{					case 'online':						if (!$auth->acl_get('a_board'))						{							trigger_error($user->lang['NO_AUTH_OPERATION'] . adm_back_link($this->u_action), E_USER_WARNING);						}						set_config('record_online_users', 1, true);						set_config('record_online_date', time(), true);						add_log('admin', 'LOG_RESET_ONLINE');					break;					case 'stats':						if (!$auth->acl_get('a_board'))						{							trigger_error($user->lang['NO_AUTH_OPERATION'] . adm_back_link($this->u_action), E_USER_WARNING);						}						$sql = 'SELECT COUNT(post_id) AS stat							FROM ' . POSTS_TABLE . '							WHERE post_approved = 1';						$result = $db->sql_query($sql);						set_config('num_posts', (int) $db->sql_fetchfield('stat'), true);						$db->sql_freeresult($result);						$sql = 'SELECT COUNT(topic_id) AS stat							FROM ' . TOPICS_TABLE . '							WHERE topic_approved = 1';						$result = $db->sql_query($sql);						set_config('num_topics', (int) $db->sql_fetchfield('stat'), true);						$db->sql_freeresult($result);						$sql = 'SELECT COUNT(user_id) AS stat							FROM ' . USERS_TABLE . '							WHERE user_type IN (' . USER_NORMAL . ',' . USER_FOUNDER . ')';						$result = $db->sql_query($sql);						set_config('num_users', (int) $db->sql_fetchfield('stat'), true);						$db->sql_freeresult($result);						$sql = 'SELECT COUNT(attach_id) as stat							FROM ' . ATTACHMENTS_TABLE . '							WHERE is_orphan = 0';						$result = $db->sql_query($sql);						set_config('num_files', (int) $db->sql_fetchfield('stat'), true);						$db->sql_freeresult($result);						$sql = 'SELECT SUM(filesize) as stat							FROM ' . ATTACHMENTS_TABLE . '							WHERE is_orphan = 0';						$result = $db->sql_query($sql);						set_config('upload_dir_size', (float) $db->sql_fetchfield('stat'), true);						$db->sql_freeresult($result);						if (!function_exists('update_last_username'))						{							include($phpbb_root_path . "includes/functions_user.$phpEx");						}						update_last_username();						add_log('admin', 'LOG_RESYNC_STATS');					break;					case 'user':						if (!$auth->acl_get('a_board'))						{							trigger_error($user->lang['NO_AUTH_OPERATION'] . adm_back_link($this->u_action), E_USER_WARNING);						}						// Resync post counts						$start = $max_post_id = 0;						// Find the maximum post ID, we can only stop the cycle when we've reached it						$sql = 'SELECT MAX(forum_last_post_id) as max_post_id							FROM ' . FORUMS_TABLE;						$result = $db->sql_query($sql);						$max_post_id = (int) $db->sql_fetchfield('max_post_id');						$db->sql_freeresult($result);						// No maximum post id? :o						if (!$max_post_id)						{							$sql = 'SELECT MAX(post_id)								FROM ' . POSTS_TABLE;							$result = $db->sql_query($sql);							$max_post_id = (int) $db->sql_fetchfield('max_post_id');							$db->sql_freeresult($result);						}						// Still no maximum post id? Then we are finished						if (!$max_post_id)						{							add_log('admin', 'LOG_RESYNC_POSTCOUNTS');							break;						}						$step = ($config['num_posts']) ? (max((int) ($config['num_posts'] / 5), 20000)) : 20000;						$db->sql_query('UPDATE ' . USERS_TABLE . ' SET user_posts = 0');						while ($start < $max_post_id)						{							$sql = 'SELECT COUNT(post_id) AS num_posts, poster_id								FROM ' . POSTS_TABLE . '								WHERE post_id BETWEEN ' . ($start + 1) . ' AND ' . ($start + $step) . '									AND post_postcount = 1 AND post_approved = 1								GROUP BY poster_id';							$result = $db->sql_query($sql);							if ($row = $db->sql_fetchrow($result))							{								do								{									$sql = 'UPDATE ' . USERS_TABLE . " SET user_posts = user_posts + {$row['num_posts']} WHERE user_id = {$row['poster_id']}";									$db->sql_query($sql);								}								while ($row = $db->sql_fetchrow($result));							}							$db->sql_freeresult($result);							$start += $step;						}						add_log('admin', 'LOG_RESYNC_POSTCOUNTS');					break;					case 'date':						if (!$auth->acl_get('a_board'))						{							trigger_error($user->lang['NO_AUTH_OPERATION'] . adm_back_link($this->u_action), E_USER_WARNING);						}						set_config('board_startdate', time() - 1);						add_log('admin', 'LOG_RESET_DATE');					break;					case 'db_track':						switch ($db->sql_layer)						{							case 'sqlite':							case 'firebird':								$db->sql_query('DELETE FROM ' . TOPICS_POSTED_TABLE);							break;							default:								$db->sql_query('TRUNCATE TABLE ' . TOPICS_POSTED_TABLE);							break;						}						// This can get really nasty... therefore we only do the last six months						$get_from_time = time() - (6 * 4 * 7 * 24 * 60 * 60);						// Select forum ids, do not include categories						$sql = 'SELECT forum_id							FROM ' . FORUMS_TABLE . '							WHERE forum_type <> ' . FORUM_CAT;						$result = $db->sql_query($sql);						$forum_ids = array();						while ($row = $db->sql_fetchrow($result))						{							$forum_ids[] = $row['forum_id'];						}						$db->sql_freeresult($result);						// Any global announcements? ;)						$forum_ids[] = 0;						// Now go through the forums and get us some topics...						foreach ($forum_ids as $forum_id)						{							$sql = 'SELECT p.poster_id, p.topic_id								FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . ' t								WHERE t.forum_id = ' . $forum_id . '									AND t.topic_moved_id = 0									AND t.topic_last_post_time > ' . $get_from_time . '									AND t.topic_id = p.topic_id									AND p.poster_id <> ' . ANONYMOUS . '								GROUP BY p.poster_id, p.topic_id';							$result = $db->sql_query($sql);							$posted = array();							while ($row = $db->sql_fetchrow($result))							{								$posted[$row['poster_id']][] = $row['topic_id'];							}							$db->sql_freeresult($result);							$sql_ary = array();							foreach ($posted as $user_id => $topic_row)							{								foreach ($topic_row as $topic_id)								{									$sql_ary[] = array(										'user_id'		=> (int) $user_id,										'topic_id'		=> (int) $topic_id,										'topic_posted'	=> 1,									);								}							}							unset($posted);							if (sizeof($sql_ary))							{								$db->sql_multi_insert(TOPICS_POSTED_TABLE, $sql_ary);							}						}						add_log('admin', 'LOG_RESYNC_POST_MARKING');					break;					case 'purge_cache':						if ((int) $user->data['user_type'] !== USER_FOUNDER)						{							trigger_error($user->lang['NO_AUTH_OPERATION'] . adm_back_link($this->u_action), E_USER_WARNING);						}						global $cache;						$cache->purge();						// Clear permissions						$auth->acl_clear_prefetch();						cache_moderators();						add_log('admin', 'LOG_PURGE_CACHE');					break;					case 'purge_sessions':						if ((int) $user->data['user_type'] !== USER_FOUNDER)						{							trigger_error($user->lang['NO_AUTH_OPERATION'] . adm_back_link($this->u_action), E_USER_WARNING);						}						$tables = array(CONFIRM_TABLE, SESSIONS_TABLE);						foreach ($tables as $table)						{							switch ($db->sql_layer)							{								case 'sqlite':								case 'firebird':									$db->sql_query("DELETE FROM $table");								break;								default:									$db->sql_query("TRUNCATE TABLE $table");								break;							}						}						// let's restore the admin session						$reinsert_ary = array(								'session_id'			=> (string) $user->session_id,								'session_page'			=> (string) substr($user->page['page'], 0, 199),								'session_forum_id'		=> $user->page['forum'],								'session_user_id'		=> (int) $user->data['user_id'],								'session_start'			=> (int) $user->data['session_start'],								'session_last_visit'	=> (int) $user->data['session_last_visit'],								'session_time'			=> (int) $user->time_now,								'session_browser'		=> (string) trim(substr($user->browser, 0, 149)),								'session_forwarded_for'	=> (string) $user->forwarded_for,								'session_ip'			=> (string) $user->ip,								'session_autologin'		=> (int) $user->data['session_autologin'],								'session_admin'			=> 1,								'session_viewonline'	=> (int) $user->data['session_viewonline'],						);						$sql = 'INSERT INTO ' . SESSIONS_TABLE . ' ' . $db->sql_build_array('INSERT', $reinsert_ary);						$db->sql_query($sql);						add_log('admin', 'LOG_PURGE_SESSIONS');					break;				}			}		}		// Version check		$user->add_lang('install');		if ($auth->acl_get('a_server') && version_compare(PHP_VERSION, '5.2.0', '<'))		{			$template->assign_vars(array(				'S_PHP_VERSION_OLD'	=> true,				'L_PHP_VERSION_OLD'	=> sprintf($user->lang['PHP_VERSION_OLD'], '<a href="http://www.phpbb.com/community/viewtopic.php?f=14&amp;t=1958605">', '</a>'),			));		}		$latest_version_info = false;		if (($latest_version_info = obtain_latest_version_info(request_var('versioncheck_force', false))) === false)		{			$template->assign_var('S_VERSIONCHECK_FAIL', true);		}		else		{			$latest_version_info = explode("\n", $latest_version_info);			$template->assign_vars(array(				'S_VERSION_UP_TO_DATE'	=> phpbb_version_compare(trim($latest_version_info[0]), $config['version'], '<='),			));		}		// Get forum statistics		$total_posts = $config['num_posts'];		$total_topics = $config['num_topics'];		$total_users = $config['num_users'];		$total_files = $config['num_files'];		$start_date = $user->format_date($config['board_startdate']);		$boarddays = (time() - $config['board_startdate']) / 86400;		$posts_per_day = sprintf('%.2f', $total_posts / $boarddays);		$topics_per_day = sprintf('%.2f', $total_topics / $boarddays);		$users_per_day = sprintf('%.2f', $total_users / $boarddays);		$files_per_day = sprintf('%.2f', $total_files / $boarddays);		$upload_dir_size = get_formatted_filesize($config['upload_dir_size']);		$avatar_dir_size = 0;		if ($avatar_dir = @opendir($phpbb_root_path . $config['avatar_path']))		{			while (($file = readdir($avatar_dir)) !== false)			{				if ($file[0] != '.' && $file != 'CVS' && strpos($file, 'index.') === false)				{					$avatar_dir_size += filesize($phpbb_root_path . $config['avatar_path'] . '/' . $file);				}			}			closedir($avatar_dir);			$avatar_dir_size = get_formatted_filesize($avatar_dir_size);		}		else		{			// Couldn't open Avatar dir.			$avatar_dir_size = $user->lang['NOT_AVAILABLE'];		}		if ($posts_per_day > $total_posts)		{			$posts_per_day = $total_posts;		}		if ($topics_per_day > $total_topics)		{			$topics_per_day = $total_topics;		}		if ($users_per_day > $total_users)		{			$users_per_day = $total_users;		}		if ($files_per_day > $total_files)		{			$files_per_day = $total_files;		}		if ($config['allow_attachments'] || $config['allow_pm_attach'])		{			$sql = 'SELECT COUNT(attach_id) AS total_orphan				FROM ' . ATTACHMENTS_TABLE . '				WHERE is_orphan = 1					AND filetime < ' . (time() - 3*60*60);			$result = $db->sql_query($sql);			$total_orphan = (int) $db->sql_fetchfield('total_orphan');			$db->sql_freeresult($result);		}		else		{			$total_orphan = false;		}		$dbsize = get_database_size();		$template->assign_vars(array(			'TOTAL_POSTS'		=> $total_posts,			'POSTS_PER_DAY'		=> $posts_per_day,			'TOTAL_TOPICS'		=> $total_topics,			'TOPICS_PER_DAY'	=> $topics_per_day,			'TOTAL_USERS'		=> $total_users,			'USERS_PER_DAY'		=> $users_per_day,			'TOTAL_FILES'		=> $total_files,			'FILES_PER_DAY'		=> $files_per_day,			'START_DATE'		=> $start_date,			'AVATAR_DIR_SIZE'	=> $avatar_dir_size,			'DBSIZE'			=> $dbsize,			'UPLOAD_DIR_SIZE'	=> $upload_dir_size,			'TOTAL_ORPHAN'		=> $total_orphan,			'S_TOTAL_ORPHAN'	=> ($total_orphan === false) ? false : true,			'GZIP_COMPRESSION'	=> ($config['gzip_compress'] && @extension_loaded('zlib')) ? $user->lang['ON'] : $user->lang['OFF'],			'DATABASE_INFO'		=> $db->sql_server_info(),			'BOARD_VERSION'		=> $config['version'],			'U_ACTION'			=> $this->u_action,			'U_ADMIN_LOG'		=> append_sid("{$phpbb_admin_path}index.$phpEx", 'i=logs&amp;mode=admin'),			'U_INACTIVE_USERS'	=> append_sid("{$phpbb_admin_path}index.$phpEx", 'i=inactive&amp;mode=list'),			'U_VERSIONCHECK'	=> append_sid("{$phpbb_admin_path}index.$phpEx", 'i=update&amp;mode=version_check'),			'U_VERSIONCHECK_FORCE'	=> append_sid("{$phpbb_admin_path}index.$phpEx", 'versioncheck_force=1'),			'S_ACTION_OPTIONS'	=> ($auth->acl_get('a_board')) ? true : false,			'S_FOUNDER'			=> ($user->data['user_type'] == USER_FOUNDER) ? true : false,			)		);		$log_data = array();		$log_count = false;		if ($auth->acl_get('a_viewlogs'))		{			view_log('admin', $log_data, $log_count, 5);			foreach ($log_data as $row)			{				$template->assign_block_vars('log', array(					'USERNAME'	=> $row['username_full'],					'IP'		=> $row['ip'],					'DATE'		=> $user->format_date($row['time']),					'ACTION'	=> $row['action'])				);			}		}		if ($auth->acl_get('a_user'))		{			$user->add_lang('memberlist');			$inactive = array();			$inactive_count = 0;			view_inactive_users($inactive, $inactive_count, 10);			foreach ($inactive as $row)			{				$template->assign_block_vars('inactive', array(					'INACTIVE_DATE'	=> $user->format_date($row['user_inactive_time']),					'REMINDED_DATE'	=> $user->format_date($row['user_reminded_time']),					'JOINED'		=> $user->format_date($row['user_regdate']),					'LAST_VISIT'	=> (!$row['user_lastvisit']) ? ' - ' : $user->format_date($row['user_lastvisit']),					'REASON'		=> $row['inactive_reason'],					'USER_ID'		=> $row['user_id'],					'POSTS'			=> ($row['user_posts']) ? $row['user_posts'] : 0,					'REMINDED'		=> $row['user_reminded'],					'REMINDED_EXPLAIN'	=> $user->lang('USER_LAST_REMINDED', (int) $row['user_reminded'], $user->format_date($row['user_reminded_time'])),					'USERNAME_FULL'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour'], false, append_sid("{$phpbb_admin_path}index.$phpEx", 'i=users&amp;mode=overview')),					'USERNAME'			=> get_username_string('username', $row['user_id'], $row['username'], $row['user_colour']),					'USER_COLOR'		=> get_username_string('colour', $row['user_id'], $row['username'], $row['user_colour']),					'U_USER_ADMIN'	=> append_sid("{$phpbb_admin_path}index.$phpEx", "i=users&amp;mode=overview&amp;u={$row['user_id']}"),					'U_SEARCH_USER'	=> ($auth->acl_get('u_search')) ? append_sid("{$phpbb_root_path}search.$phpEx", "author_id={$row['user_id']}&amp;sr=posts") : '',				));			}			$option_ary = array('activate' => 'ACTIVATE', 'delete' => 'DELETE');			if ($config['email_enable'])			{				$option_ary += array('remind' => 'REMIND');			}			$template->assign_vars(array(				'S_INACTIVE_USERS'		=> true,				'S_INACTIVE_OPTIONS'	=> build_select($option_ary))			);		}		// Warn if install is still present		if (file_exists($phpbb_root_path . 'install') && !is_file($phpbb_root_path . 'install'))		{			$template->assign_var('S_REMOVE_INSTALL', true);		}		if (!defined('PHPBB_DISABLE_CONFIG_CHECK') && file_exists($phpbb_root_path . 'config.' . $phpEx) && phpbb_is_writable($phpbb_root_path . 'config.' . $phpEx))		{			// World-Writable? (000x)			$template->assign_var('S_WRITABLE_CONFIG', (bool) (@fileperms($phpbb_root_path . 'config.' . $phpEx) & 0x0002));		}		if (extension_loaded('mbstring'))		{			$template->assign_vars(array(				'S_MBSTRING_LOADED'						=> true,				'S_MBSTRING_FUNC_OVERLOAD_FAIL'			=> (intval(@ini_get('mbstring.func_overload')) & (MB_OVERLOAD_MAIL | MB_OVERLOAD_STRING)),				'S_MBSTRING_ENCODING_TRANSLATION_FAIL'	=> (@ini_get('mbstring.encoding_translation') != 0),				'S_MBSTRING_HTTP_INPUT_FAIL'			=> (@ini_get('mbstring.http_input') != 'pass'),				'S_MBSTRING_HTTP_OUTPUT_FAIL'			=> (@ini_get('mbstring.http_output') != 'pass'),			));		}		// Fill dbms version if not yet filled		if (empty($config['dbms_version']))		{			set_config('dbms_version', $db->sql_server_info(true));		}		$this->tpl_name = 'acp_main';		$this->page_title = 'ACP_MAIN';	}}?>
<?php/**** @package search* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @ignore*/define('SEARCH_RESULT_NOT_IN_CACHE', 0);define('SEARCH_RESULT_IN_CACHE', 1);define('SEARCH_RESULT_INCOMPLETE', 2);/*** search_backend* optional base class for search plugins providing simple caching based on ACM* and functions to retrieve ignore_words and synonyms* @package search*/class search_backend{	var $ignore_words = array();	var $match_synonym = array();	var $replace_synonym = array();	function search_backend(&$error)	{		// This class cannot be used as a search plugin		$error = true;	}	/**	* Retrieves a language dependend list of words that should be ignored by the search	*/	function get_ignore_words()	{		if (!sizeof($this->ignore_words))		{			global $user, $phpEx;			$words = array();			if (file_exists("{$user->lang_path}{$user->lang_name}/search_ignore_words.$phpEx"))			{				// include the file containing ignore words				include("{$user->lang_path}{$user->lang_name}/search_ignore_words.$phpEx");			}			$this->ignore_words = $words;			unset($words);		}	}	/**	* Stores a list of synonyms that should be replaced in $this->match_synonym and $this->replace_synonym and caches them	*/	function get_synonyms()	{		if (!sizeof($this->match_synonym))		{			global $user, $phpEx;			$synonyms = array();			if (file_exists("{$user->lang_path}{$user->lang_name}/search_synonyms.$phpEx"))			{				// include the file containing synonyms				include("{$user->lang_path}{$user->lang_name}/search_synonyms.$phpEx");			}			$this->match_synonym = array_keys($synonyms);			$this->replace_synonym = array_values($synonyms);			unset($synonyms);		}	}	/**	* Retrieves cached search results	*	* @param int &$result_count will contain the number of all results for the search (not only for the current page)	* @param array &$id_ary is filled with the ids belonging to the requested page that are stored in the cache	*	* @return int SEARCH_RESULT_NOT_IN_CACHE or SEARCH_RESULT_IN_CACHE or SEARCH_RESULT_INCOMPLETE	*/	function obtain_ids($search_key, &$result_count, &$id_ary, $start, $per_page, $sort_dir)	{		global $cache;		if (!($stored_ids = $cache->get('_search_results_' . $search_key)))		{			// no search results cached for this search_key			return SEARCH_RESULT_NOT_IN_CACHE;		}		else		{			$result_count = $stored_ids[-1];			$reverse_ids = ($stored_ids[-2] != $sort_dir) ? true : false;			$complete = true;			// change the start to the actual end of the current request if the sort direction differs			// from the dirction in the cache and reverse the ids later			if ($reverse_ids)			{				$start = $result_count - $start - $per_page;				// the user requested a page past the last index				if ($start < 0)				{					return SEARCH_RESULT_NOT_IN_CACHE;				}			}			for ($i = $start, $n = $start + $per_page; ($i < $n) && ($i < $result_count); $i++)			{				if (!isset($stored_ids[$i]))				{					$complete = false;				}				else				{					$id_ary[] = $stored_ids[$i];				}			}			unset($stored_ids);			if ($reverse_ids)			{				$id_ary = array_reverse($id_ary);			}			if (!$complete)			{				return SEARCH_RESULT_INCOMPLETE;			}			return SEARCH_RESULT_IN_CACHE;		}	}	/**	* Caches post/topic ids	*	* @param array &$id_ary contains a list of post or topic ids that shall be cached, the first element	* 	must have the absolute index $start in the result set.	*/	function save_ids($search_key, $keywords, $author_ary, $result_count, &$id_ary, $start, $sort_dir)	{		global $cache, $config, $db, $user;		$length = min(sizeof($id_ary), $config['search_block_size']);		// nothing to cache so exit		if (!$length)		{			return;		}		$store_ids = array_slice($id_ary, 0, $length);		// create a new resultset if there is none for this search_key yet		// or add the ids to the existing resultset		if (!($store = $cache->get('_search_results_' . $search_key)))		{			// add the current keywords to the recent searches in the cache which are listed on the search page			if (!empty($keywords) || sizeof($author_ary))			{				$sql = 'SELECT search_time					FROM ' . SEARCH_RESULTS_TABLE . '					WHERE search_key = \'' . $db->sql_escape($search_key) . '\'';				$result = $db->sql_query($sql);				if (!$db->sql_fetchrow($result))				{					$sql_ary = array(						'search_key'		=> $search_key,						'search_time'		=> time(),						'search_keywords'	=> $keywords,						'search_authors'	=> ' ' . implode(' ', $author_ary) . ' '					);					$sql = 'INSERT INTO ' . SEARCH_RESULTS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);					$db->sql_query($sql);				}				$db->sql_freeresult($result);			}			$sql = 'UPDATE ' . USERS_TABLE . '				SET user_last_search = ' . time() . '				WHERE user_id = ' . $user->data['user_id'];			$db->sql_query($sql);			$store = array(-1 => $result_count, -2 => $sort_dir);			$id_range = range($start, $start + $length - 1);		}		else		{			// we use one set of results for both sort directions so we have to calculate the indizes			// for the reversed array and we also have to reverse the ids themselves			if ($store[-2] != $sort_dir)			{				$store_ids = array_reverse($store_ids);				$id_range = range($store[-1] - $start - $length, $store[-1] - $start - 1);			}			else			{				$id_range = range($start, $start + $length - 1);			}		}		$store_ids = array_combine($id_range, $store_ids);		// append the ids		if (is_array($store_ids))		{			$store += $store_ids;			// if the cache is too big			if (sizeof($store) - 2 > 20 * $config['search_block_size'])			{				// remove everything in front of two blocks in front of the current start index				for ($i = 0, $n = $id_range[0] - 2 * $config['search_block_size']; $i < $n; $i++)				{					if (isset($store[$i]))					{						unset($store[$i]);					}				}				// remove everything after two blocks after the current stop index				end($id_range);				for ($i = $store[-1] - 1, $n = current($id_range) + 2 * $config['search_block_size']; $i > $n; $i--)				{					if (isset($store[$i]))					{						unset($store[$i]);					}				}			}			$cache->put('_search_results_' . $search_key, $store, $config['search_store_results']);			$sql = 'UPDATE ' . SEARCH_RESULTS_TABLE . '				SET search_time = ' . time() . '				WHERE search_key = \'' . $db->sql_escape($search_key) . '\'';			$db->sql_query($sql);		}		unset($store);		unset($store_ids);		unset($id_range);	}	/**	* Removes old entries from the search results table and removes searches with keywords that contain a word in $words.	*/	function destroy_cache($words, $authors = false)	{		global $db, $cache, $config;		// clear all searches that searched for the specified words		if (sizeof($words))		{			$sql_where = '';			foreach ($words as $word)			{				$sql_where .= " OR search_keywords " . $db->sql_like_expression($db->any_char . $word . $db->any_char);			}			$sql = 'SELECT search_key				FROM ' . SEARCH_RESULTS_TABLE . "				WHERE search_keywords LIKE '%*%' $sql_where";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$cache->destroy('_search_results_' . $row['search_key']);			}			$db->sql_freeresult($result);		}		// clear all searches that searched for the specified authors		if (is_array($authors) && sizeof($authors))		{			$sql_where = '';			foreach ($authors as $author)			{				$sql_where .= (($sql_where) ? ' OR ' : '') . 'search_authors LIKE \'% ' . (int) $author . ' %\'';			}			$sql = 'SELECT search_key				FROM ' . SEARCH_RESULTS_TABLE . "				WHERE $sql_where";			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$cache->destroy('_search_results_' . $row['search_key']);			}			$db->sql_freeresult($result);		}		$sql = 'DELETE			FROM ' . SEARCH_RESULTS_TABLE . '			WHERE search_time < ' . (time() - $config['search_store_results']);		$db->sql_query($sql);	}}?>
<?php$GLOBALS['utf_compatibility_decomp']=array(''=>' ',''=>' ',''=>'a',''=>' ',''=>'2',''=>'3',''=>' ',''=>'',''=>' ',''=>'1',''=>'o',''=>'14',''=>'12',''=>'34',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'C',''=>'E',''=>'E',''=>'E',''=>'E',''=>'I',''=>'I',''=>'I',''=>'I',''=>'N',''=>'O',''=>'O',''=>'O',''=>'O',''=>'O',''=>'U',''=>'U',''=>'U',''=>'U',''=>'Y',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'c',''=>'e',''=>'e',''=>'e',''=>'e',''=>'i',''=>'i',''=>'i',''=>'i',''=>'n',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'u',''=>'u',''=>'u',''=>'u',''=>'y',''=>'y',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'C',''=>'c',''=>'C',''=>'c',''=>'C',''=>'c',''=>'C',''=>'c',''=>'D',''=>'d',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'G',''=>'g',''=>'G',''=>'g',''=>'G',''=>'g',''=>'G',''=>'g',''=>'H',''=>'h',''=>'I',''=>'i',''=>'I',''=>'i',''=>'I',''=>'i',''=>'I',''=>'i',''=>'I',''=>'IJ',''=>'ij',''=>'J',''=>'j',''=>'K',''=>'k',''=>'L',''=>'l',''=>'L',''=>'l',''=>'L',''=>'l',''=>'L',''=>'l',''=>'N',''=>'n',''=>'N',''=>'n',''=>'N',''=>'n',''=>'n',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'R',''=>'r',''=>'R',''=>'r',''=>'R',''=>'r',''=>'S',''=>'s',''=>'S',''=>'s',''=>'S',''=>'s',''=>'S',''=>'s',''=>'T',''=>'t',''=>'T',''=>'t',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'W',''=>'w',''=>'Y',''=>'y',''=>'Y',''=>'Z',''=>'z',''=>'Z',''=>'z',''=>'Z',''=>'z',''=>'s',''=>'O',''=>'o',''=>'U',''=>'u',''=>'DZ',''=>'Dz',''=>'dz',''=>'LJ',''=>'Lj',''=>'lj',''=>'NJ',''=>'Nj',''=>'nj',''=>'A',''=>'a',''=>'I',''=>'i',''=>'O',''=>'o',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'A',''=>'a',''=>'A',''=>'a',''=>'',''=>'',''=>'G',''=>'g',''=>'K',''=>'k',''=>'O',''=>'o',''=>'O',''=>'o',''=>'',''=>'',''=>'j',''=>'DZ',''=>'Dz',''=>'dz',''=>'G',''=>'g',''=>'N',''=>'n',''=>'A',''=>'a',''=>'',''=>'',''=>'',''=>'',''=>'A',''=>'a',''=>'A',''=>'a',''=>'E',''=>'e',''=>'E',''=>'e',''=>'I',''=>'i',''=>'I',''=>'i',''=>'O',''=>'o',''=>'O',''=>'o',''=>'R',''=>'r',''=>'R',''=>'r',''=>'U',''=>'u',''=>'U',''=>'u',''=>'S',''=>'s',''=>'T',''=>'t',''=>'H',''=>'h',''=>'A',''=>'a',''=>'E',''=>'e',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'Y',''=>'y',''=>'h',''=>'',''=>'j',''=>'r',''=>'',''=>'',''=>'',''=>'w',''=>'y',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>'',''=>'l',''=>'s',''=>'x',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>' ',''=>';',''=>' ',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'A',''=>'',''=>'B',''=>'D',''=>'E',''=>'',''=>'G',''=>'H',''=>'I',''=>'J',''=>'K',''=>'L',''=>'M',''=>'N',''=>'O',''=>'',''=>'P',''=>'R',''=>'T',''=>'U',''=>'W',''=>'a',''=>'',''=>'',''=>'',''=>'b',''=>'d',''=>'e',''=>'',''=>'',''=>'',''=>'g',''=>'k',''=>'m',''=>'',''=>'o',''=>'',''=>'',''=>'',''=>'p',''=>'t',''=>'u',''=>'',''=>'',''=>'v',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'i',''=>'r',''=>'u',''=>'v',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'c',''=>'',''=>'',''=>'',''=>'f',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'z',''=>'',''=>'',''=>'',''=>'',''=>'A',''=>'a',''=>'B',''=>'b',''=>'B',''=>'b',''=>'B',''=>'b',''=>'C',''=>'c',''=>'D',''=>'d',''=>'D',''=>'d',''=>'D',''=>'d',''=>'D',''=>'d',''=>'D',''=>'d',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'F',''=>'f',''=>'G',''=>'g',''=>'H',''=>'h',''=>'H',''=>'h',''=>'H',''=>'h',''=>'H',''=>'h',''=>'H',''=>'h',''=>'I',''=>'i',''=>'I',''=>'i',''=>'K',''=>'k',''=>'K',''=>'k',''=>'K',''=>'k',''=>'L',''=>'l',''=>'L',''=>'l',''=>'L',''=>'l',''=>'L',''=>'l',''=>'M',''=>'m',''=>'M',''=>'m',''=>'M',''=>'m',''=>'N',''=>'n',''=>'N',''=>'n',''=>'N',''=>'n',''=>'N',''=>'n',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'P',''=>'p',''=>'P',''=>'p',''=>'R',''=>'r',''=>'R',''=>'r',''=>'R',''=>'r',''=>'R',''=>'r',''=>'S',''=>'s',''=>'S',''=>'s',''=>'S',''=>'s',''=>'S',''=>'s',''=>'S',''=>'s',''=>'T',''=>'t',''=>'T',''=>'t',''=>'T',''=>'t',''=>'T',''=>'t',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'V',''=>'v',''=>'V',''=>'v',''=>'W',''=>'w',''=>'W',''=>'w',''=>'W',''=>'w',''=>'W',''=>'w',''=>'W',''=>'w',''=>'X',''=>'x',''=>'X',''=>'x',''=>'Y',''=>'y',''=>'Z',''=>'z',''=>'Z',''=>'z',''=>'Z',''=>'z',''=>'h',''=>'t',''=>'w',''=>'y',''=>'a',''=>'s',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'A',''=>'a',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'E',''=>'e',''=>'I',''=>'i',''=>'I',''=>'i',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'O',''=>'o',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'U',''=>'u',''=>'Y',''=>'y',''=>'Y',''=>'y',''=>'Y',''=>'y',''=>'Y',''=>'y',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>' ',''=>'',''=>' ',''=>' ',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>' ',''=>' ',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>' ',''=>' ',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>' ',''=>' ',''=>'`',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>'',''=>' ',''=>'.',''=>'..',''=>'...',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'!!',''=>' ',''=>'??',''=>'?!',''=>'!?',''=>'',''=>' ',''=>'0',''=>'i',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'+',''=>'',''=>'=',''=>'(',''=>')',''=>'n',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'+',''=>'',''=>'=',''=>'(',''=>')',''=>'a',''=>'e',''=>'o',''=>'x',''=>'',''=>'Rs',''=>'a/c',''=>'a/s',''=>'C',''=>'C',''=>'c/o',''=>'c/u',''=>'',''=>'F',''=>'g',''=>'H',''=>'H',''=>'H',''=>'h',''=>'',''=>'I',''=>'I',''=>'L',''=>'l',''=>'N',''=>'No',''=>'P',''=>'Q',''=>'R',''=>'R',''=>'R',''=>'SM',''=>'TEL',''=>'TM',''=>'Z',''=>'',''=>'Z',''=>'K',''=>'A',''=>'B',''=>'C',''=>'e',''=>'E',''=>'F',''=>'M',''=>'o',''=>'',''=>'',''=>'',''=>'',''=>'i',''=>'FAX',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'D',''=>'d',''=>'e',''=>'i',''=>'j',''=>'13',''=>'23',''=>'15',''=>'25',''=>'35',''=>'45',''=>'16',''=>'56',''=>'18',''=>'38',''=>'58',''=>'78',''=>'1',''=>'I',''=>'II',''=>'III',''=>'IV',''=>'V',''=>'VI',''=>'VII',''=>'VIII',''=>'IX',''=>'X',''=>'XI',''=>'XII',''=>'L',''=>'C',''=>'D',''=>'M',''=>'i',''=>'ii',''=>'iii',''=>'iv',''=>'v',''=>'vi',''=>'vii',''=>'viii',''=>'ix',''=>'x',''=>'xi',''=>'xii',''=>'l',''=>'c',''=>'d',''=>'m',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'=',''=>'',''=>'',''=>'<',''=>'>',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'11',''=>'12',''=>'13',''=>'14',''=>'15',''=>'16',''=>'17',''=>'18',''=>'19',''=>'20',''=>'(1)',''=>'(2)',''=>'(3)',''=>'(4)',''=>'(5)',''=>'(6)',''=>'(7)',''=>'(8)',''=>'(9)',''=>'(10)',''=>'(11)',''=>'(12)',''=>'(13)',''=>'(14)',''=>'(15)',''=>'(16)',''=>'(17)',''=>'(18)',''=>'(19)',''=>'(20)',''=>'1.',''=>'2.',''=>'3.',''=>'4.',''=>'5.',''=>'6.',''=>'7.',''=>'8.',''=>'9.',''=>'10.',''=>'11.',''=>'12.',''=>'13.',''=>'14.',''=>'15.',''=>'16.',''=>'17.',''=>'18.',''=>'19.',''=>'20.',''=>'(a)',''=>'(b)',''=>'(c)',''=>'(d)',''=>'(e)',''=>'(f)',''=>'(g)',''=>'(h)',''=>'(i)',''=>'(j)',''=>'(k)',''=>'(l)',''=>'(m)',''=>'(n)',''=>'(o)',''=>'(p)',''=>'(q)',''=>'(r)',''=>'(s)',''=>'(t)',''=>'(u)',''=>'(v)',''=>'(w)',''=>'(x)',''=>'(y)',''=>'(z)',''=>'A',''=>'B',''=>'C',''=>'D',''=>'E',''=>'F',''=>'G',''=>'H',''=>'I',''=>'J',''=>'K',''=>'L',''=>'M',''=>'N',''=>'O',''=>'P',''=>'Q',''=>'R',''=>'S',''=>'T',''=>'U',''=>'V',''=>'W',''=>'X',''=>'Y',''=>'Z',''=>'a',''=>'b',''=>'c',''=>'d',''=>'e',''=>'f',''=>'g',''=>'h',''=>'i',''=>'j',''=>'k',''=>'l',''=>'m',''=>'n',''=>'o',''=>'p',''=>'q',''=>'r',''=>'s',''=>'t',''=>'u',''=>'v',''=>'w',''=>'x',''=>'y',''=>'z',''=>'0',''=>'',''=>'::=',''=>'==',''=>'===',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>' ',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'PTE',''=>'21',''=>'22',''=>'23',''=>'24',''=>'25',''=>'26',''=>'27',''=>'28',''=>'29',''=>'30',''=>'31',''=>'32',''=>'33',''=>'34',''=>'35',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'36',''=>'37',''=>'38',''=>'39',''=>'40',''=>'41',''=>'42',''=>'43',''=>'44',''=>'45',''=>'46',''=>'47',''=>'48',''=>'49',''=>'50',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'11',''=>'12',''=>'Hg',''=>'erg',''=>'eV',''=>'LTD',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'11',''=>'12',''=>'13',''=>'14',''=>'15',''=>'16',''=>'17',''=>'18',''=>'19',''=>'20',''=>'21',''=>'22',''=>'23',''=>'24',''=>'hPa',''=>'da',''=>'AU',''=>'bar',''=>'oV',''=>'pc',''=>'dm',''=>'dm2',''=>'dm3',''=>'IU',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'pA',''=>'nA',''=>'A',''=>'mA',''=>'kA',''=>'KB',''=>'MB',''=>'GB',''=>'cal',''=>'kcal',''=>'pF',''=>'nF',''=>'F',''=>'g',''=>'mg',''=>'kg',''=>'Hz',''=>'kHz',''=>'MHz',''=>'GHz',''=>'THz',''=>'l',''=>'ml',''=>'dl',''=>'kl',''=>'fm',''=>'nm',''=>'m',''=>'mm',''=>'cm',''=>'km',''=>'mm2',''=>'cm2',''=>'m2',''=>'km2',''=>'mm3',''=>'cm3',''=>'m3',''=>'km3',''=>'ms',''=>'ms2',''=>'Pa',''=>'kPa',''=>'MPa',''=>'GPa',''=>'rad',''=>'rads',''=>'rads2',''=>'ps',''=>'ns',''=>'s',''=>'ms',''=>'pV',''=>'nV',''=>'V',''=>'mV',''=>'kV',''=>'MV',''=>'pW',''=>'nW',''=>'W',''=>'mW',''=>'kW',''=>'MW',''=>'k',''=>'M',''=>'a.m.',''=>'Bq',''=>'cc',''=>'cd',''=>'Ckg',''=>'Co.',''=>'dB',''=>'Gy',''=>'ha',''=>'HP',''=>'in',''=>'KK',''=>'KM',''=>'kt',''=>'lm',''=>'ln',''=>'log',''=>'lx',''=>'mb',''=>'mil',''=>'mol',''=>'PH',''=>'p.m.',''=>'PPM',''=>'PR',''=>'sr',''=>'Sv',''=>'Wb',''=>'Vm',''=>'Am',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'11',''=>'12',''=>'13',''=>'14',''=>'15',''=>'16',''=>'17',''=>'18',''=>'19',''=>'20',''=>'21',''=>'22',''=>'23',''=>'24',''=>'25',''=>'26',''=>'27',''=>'28',''=>'29',''=>'30',''=>'31',''=>'gal',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'ff',''=>'fi',''=>'fl',''=>'ffi',''=>'ffl',''=>'st',''=>'st',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'+',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'   ',''=>' ',''=>'',''=>',',''=>'',''=>'',''=>':',''=>';',''=>'!',''=>'?',''=>'',''=>'',''=>'...',''=>'..',''=>'',''=>'',''=>'_',''=>'_',''=>'(',''=>')',''=>'{',''=>'}',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'[',''=>']',''=>' ',''=>' ',''=>' ',''=>' ',''=>'_',''=>'_',''=>'_',''=>',',''=>'',''=>'.',''=>';',''=>':',''=>'?',''=>'!',''=>'',''=>'(',''=>')',''=>'{',''=>'}',''=>'',''=>'',''=>'#',''=>'&',''=>'*',''=>'+',''=>'-',''=>'<',''=>'>',''=>'=',''=>'\\',''=>'$',''=>'%',''=>'@',''=>' ',''=>'',''=>' ',''=>' ',''=>' ',''=>'',''=>' ',''=>'',''=>' ',''=>'',''=>' ',''=>'',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'!',''=>'"',''=>'#',''=>'$',''=>'%',''=>'&',''=>'\'',''=>'(',''=>')',''=>'*',''=>'+',''=>',',''=>'-',''=>'.',''=>'/',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>':',''=>';',''=>'<',''=>'=',''=>'>',''=>'?',''=>'@',''=>'A',''=>'B',''=>'C',''=>'D',''=>'E',''=>'F',''=>'G',''=>'H',''=>'I',''=>'J',''=>'K',''=>'L',''=>'M',''=>'N',''=>'O',''=>'P',''=>'Q',''=>'R',''=>'S',''=>'T',''=>'U',''=>'V',''=>'W',''=>'X',''=>'Y',''=>'Z',''=>'[',''=>'\\',''=>']',''=>'^',''=>'_',''=>'`',''=>'a',''=>'b',''=>'c',''=>'d',''=>'e',''=>'f',''=>'g',''=>'h',''=>'i',''=>'j',''=>'k',''=>'l',''=>'m',''=>'n',''=>'o',''=>'p',''=>'q',''=>'r',''=>'s',''=>'t',''=>'u',''=>'v',''=>'w',''=>'x',''=>'y',''=>'z',''=>'{',''=>'|',''=>'}',''=>'~',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'A',''=>'B',''=>'C',''=>'D',''=>'E',''=>'F',''=>'G',''=>'H',''=>'I',''=>'J',''=>'K',''=>'L',''=>'M',''=>'N',''=>'O',''=>'P',''=>'Q',''=>'R',''=>'S',''=>'T',''=>'U',''=>'V',''=>'W',''=>'X',''=>'Y',''=>'Z',''=>'a',''=>'b',''=>'c',''=>'d',''=>'e',''=>'f',''=>'g',''=>'h',''=>'i',''=>'j',''=>'k',''=>'l',''=>'m',''=>'n',''=>'o',''=>'p',''=>'q',''=>'r',''=>'s',''=>'t',''=>'u',''=>'v',''=>'w',''=>'x',''=>'y',''=>'z',''=>'A',''=>'B',''=>'C',''=>'D',''=>'E',''=>'F',''=>'G',''=>'H',''=>'I',''=>'J',''=>'K',''=>'L',''=>'M',''=>'N',''=>'O',''=>'P',''=>'Q',''=>'R',''=>'S',''=>'T',''=>'U',''=>'V',''=>'W',''=>'X',''=>'Y',''=>'Z',''=>'a',''=>'b',''=>'c',''=>'d',''=>'e',''=>'f',''=>'g',''=>'i',''=>'j',''=>'k',''=>'l',''=>'m',''=>'n',''=>'o',''=>'p',''=>'q',''=>'r',''=>'s',''=>'t',''=>'u',''=>'v',''=>'w',''=>'x',''=>'y',''=>'z',''=>'A',''=>'B',''=>'C',''=>'D',''=>'E',''=>'F',''=>'G',''=>'H',''=>'I',''=>'J',''=>'K',''=>'L',''=>'M',''=>'N',''=>'O',''=>'P',''=>'Q',''=>'R',''=>'S',''=>'T',''=>'U',''=>'V',''=>'W',''=>'X',''=>'Y',''=>'Z',''=>'a',''=>'b',''=>'c',''=>'d',''=>'e',''=>'f',''=>'g',''=>'h',''=>'i',''=>'j',''=>'k',''=>'l',''=>'m',''=>'n',''=>'o',''=>'p',''=>'q',''=>'r',''=>'s',''=>'t',''=>'u',''=>'v',''=>'w',''=>'x',''=>'y',''=>'z',''=>'A',''=>'C',''=>'D',''=>'G',''=>'J',''=>'K',''=>'N',''=>'O',''=>'P',''=>'Q',''=>'S',''=>'T',''=>'U',''=>'V',''=>'W',''=>'X',''=>'Y',''=>'Z',''=>'a',''=>'b',''=>'c',''=>'d',''=>'f',''=>'h',''=>'i',''=>'j',''=>'k',''=>'l',''=>'m',''=>'n',''=>'p',''=>'q',''=>'r',''=>'s',''=>'t',''=>'u',''=>'v',''=>'w',''=>'x',''=>'y',''=>'z',''=>'A',''=>'B',''=>'C',''=>'D',''=>'E',''=>'F',''=>'G',''=>'H',''=>'I',''=>'J',''=>'K',''=>'L',''=>'M',''=>'N',''=>'O',''=>'P',''=>'Q',''=>'R',''=>'S',''=>'T',''=>'U',''=>'V',''=>'W',''=>'X',''=>'Y',''=>'Z',''=>'a',''=>'b',''=>'c',''=>'d',''=>'e',''=>'f',''=>'g',''=>'h',''=>'i',''=>'j',''=>'k',''=>'l',''=>'m',''=>'n',''=>'o',''=>'p',''=>'q',''=>'r',''=>'s',''=>'t',''=>'u',''=>'v',''=>'w',''=>'x',''=>'y',''=>'z',''=>'A',''=>'B',''=>'D',''=>'E',''=>'F',''=>'G',''=>'J',''=>'K',''=>'L',''=>'M',''=>'N',''=>'O',''=>'P',''=>'Q',''=>'S',''=>'T',''=>'U',''=>'V',''=>'W',''=>'X',''=>'Y',''=>'a',''=>'b',''=>'c',''=>'d',''=>'e',''=>'f',''=>'g',''=>'h',''=>'i',''=>'j',''=>'k',''=>'l',''=>'m',''=>'n',''=>'o',''=>'p',''=>'q',''=>'r',''=>'s',''=>'t',''=>'u',''=>'v',''=>'w',''=>'x',''=>'y',''=>'z',''=>'A',''=>'B',''=>'D',''=>'E',''=>'F',''=>'G',''=>'I',''=>'J',''=>'K',''=>'L',''=>'M',''=>'O',''=>'S',''=>'T',''=>'U',''=>'V',''=>'W',''=>'X',''=>'Y',''=>'a',''=>'b',''=>'c',''=>'d',''=>'e',''=>'f',''=>'g',''=>'h',''=>'i',''=>'j',''=>'k',''=>'l',''=>'m',''=>'n',''=>'o',''=>'p',''=>'q',''=>'r',''=>'s',''=>'t',''=>'u',''=>'v',''=>'w',''=>'x',''=>'y',''=>'z',''=>'A',''=>'B',''=>'C',''=>'D',''=>'E',''=>'F',''=>'G',''=>'H',''=>'I',''=>'J',''=>'K',''=>'L',''=>'M',''=>'N',''=>'O',''=>'P',''=>'Q',''=>'R',''=>'S',''=>'T',''=>'U',''=>'V',''=>'W',''=>'X',''=>'Y',''=>'Z',''=>'a',''=>'b',''=>'c',''=>'d',''=>'e',''=>'f',''=>'g',''=>'h',''=>'i',''=>'j',''=>'k',''=>'l',''=>'m',''=>'n',''=>'o',''=>'p',''=>'q',''=>'r',''=>'s',''=>'t',''=>'u',''=>'v',''=>'w',''=>'x',''=>'y',''=>'z',''=>'A',''=>'B',''=>'C',''=>'D',''=>'E',''=>'F',''=>'G',''=>'H',''=>'I',''=>'J',''=>'K',''=>'L',''=>'M',''=>'N',''=>'O',''=>'P',''=>'Q',''=>'R',''=>'S',''=>'T',''=>'U',''=>'V',''=>'W',''=>'X',''=>'Y',''=>'Z',''=>'a',''=>'b',''=>'c',''=>'d',''=>'e',''=>'f',''=>'g',''=>'h',''=>'i',''=>'j',''=>'k',''=>'l',''=>'m',''=>'n',''=>'o',''=>'p',''=>'q',''=>'r',''=>'s',''=>'t',''=>'u',''=>'v',''=>'w',''=>'x',''=>'y',''=>'z',''=>'A',''=>'B',''=>'C',''=>'D',''=>'E',''=>'F',''=>'G',''=>'H',''=>'I',''=>'J',''=>'K',''=>'L',''=>'M',''=>'N',''=>'O',''=>'P',''=>'Q',''=>'R',''=>'S',''=>'T',''=>'U',''=>'V',''=>'W',''=>'X',''=>'Y',''=>'Z',''=>'a',''=>'b',''=>'c',''=>'d',''=>'e',''=>'f',''=>'g',''=>'h',''=>'i',''=>'j',''=>'k',''=>'l',''=>'m',''=>'n',''=>'o',''=>'p',''=>'q',''=>'r',''=>'s',''=>'t',''=>'u',''=>'v',''=>'w',''=>'x',''=>'y',''=>'z',''=>'A',''=>'B',''=>'C',''=>'D',''=>'E',''=>'F',''=>'G',''=>'H',''=>'I',''=>'J',''=>'K',''=>'L',''=>'M',''=>'N',''=>'O',''=>'P',''=>'Q',''=>'R',''=>'S',''=>'T',''=>'U',''=>'V',''=>'W',''=>'X',''=>'Y',''=>'Z',''=>'a',''=>'b',''=>'c',''=>'d',''=>'e',''=>'f',''=>'g',''=>'h',''=>'i',''=>'j',''=>'k',''=>'l',''=>'m',''=>'n',''=>'o',''=>'p',''=>'q',''=>'r',''=>'s',''=>'t',''=>'u',''=>'v',''=>'w',''=>'x',''=>'y',''=>'z',''=>'A',''=>'B',''=>'C',''=>'D',''=>'E',''=>'F',''=>'G',''=>'H',''=>'I',''=>'J',''=>'K',''=>'L',''=>'M',''=>'N',''=>'O',''=>'P',''=>'Q',''=>'R',''=>'S',''=>'T',''=>'U',''=>'V',''=>'W',''=>'X',''=>'Y',''=>'Z',''=>'a',''=>'b',''=>'c',''=>'d',''=>'e',''=>'f',''=>'g',''=>'h',''=>'i',''=>'j',''=>'k',''=>'l',''=>'m',''=>'n',''=>'o',''=>'p',''=>'q',''=>'r',''=>'s',''=>'t',''=>'u',''=>'v',''=>'w',''=>'x',''=>'y',''=>'z',''=>'A',''=>'B',''=>'C',''=>'D',''=>'E',''=>'F',''=>'G',''=>'H',''=>'I',''=>'J',''=>'K',''=>'L',''=>'M',''=>'N',''=>'O',''=>'P',''=>'Q',''=>'R',''=>'S',''=>'T',''=>'U',''=>'V',''=>'W',''=>'X',''=>'Y',''=>'Z',''=>'a',''=>'b',''=>'c',''=>'d',''=>'e',''=>'f',''=>'g',''=>'h',''=>'i',''=>'j',''=>'k',''=>'l',''=>'m',''=>'n',''=>'o',''=>'p',''=>'q',''=>'r',''=>'s',''=>'t',''=>'u',''=>'v',''=>'w',''=>'x',''=>'y',''=>'z',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup('search');// Define initial vars$mode			= request_var('mode', '');$search_id		= request_var('search_id', '');$start			= max(request_var('start', 0), 0);$post_id		= request_var('p', 0);$topic_id		= request_var('t', 0);$view			= request_var('view', '');$submit			= request_var('submit', false);$keywords		= utf8_normalize_nfc(request_var('keywords', '', true));$add_keywords	= utf8_normalize_nfc(request_var('add_keywords', '', true));$author			= request_var('author', '', true);$author_id		= request_var('author_id', 0);$show_results	= ($topic_id) ? 'posts' : request_var('sr', 'posts');$show_results	= ($show_results == 'posts') ? 'posts' : 'topics';$search_terms	= request_var('terms', 'all');$search_fields	= request_var('sf', 'all');$search_child	= request_var('sc', true);$sort_days		= request_var('st', 0);$sort_key		= request_var('sk', 't');$sort_dir		= request_var('sd', 'd');$return_chars	= request_var('ch', ($topic_id) ? -1 : 300);$search_forum	= request_var('fid', array(0));// We put login boxes for the case if search_id is newposts, egosearch or unreadposts// because a guest should be able to log in even if guests search is not permittedswitch ($search_id){	// Egosearch is an author search	case 'egosearch':		$author_id = $user->data['user_id'];		if ($user->data['user_id'] == ANONYMOUS)		{			login_box('', $user->lang['LOGIN_EXPLAIN_EGOSEARCH']);		}	break;	// Search for unread posts needs to be allowed and user to be logged in if topics tracking for guests is disabled	case 'unreadposts':		if (!$config['load_unreads_search'])		{			$template->assign_var('S_NO_SEARCH', true);			trigger_error('NO_SEARCH_UNREADS');		}		else if (!$config['load_anon_lastread'] && !$user->data['is_registered'])		{			login_box('', $user->lang['LOGIN_EXPLAIN_UNREADSEARCH']);		}	break;		// The "new posts" search uses user_lastvisit which is user based, so it should require user to log in.	case 'newposts':		if ($user->data['user_id'] == ANONYMOUS)		{			login_box('', $user->lang['LOGIN_EXPLAIN_NEWPOSTS']);		}	break;		default:		// There's nothing to do here for now ;)	break;}// Is user able to search? Has search been disabled?if (!$auth->acl_get('u_search') || !$auth->acl_getf_global('f_search') || !$config['load_search']){	$template->assign_var('S_NO_SEARCH', true);	trigger_error('NO_SEARCH');}// Check search load limitif ($user->load && $config['limit_search_load'] && ($user->load > doubleval($config['limit_search_load']))){	$template->assign_var('S_NO_SEARCH', true);	trigger_error('NO_SEARCH_TIME');}// It is applicable if the configuration setting is non-zero, and the user cannot// ignore the flood setting, and the search is a keyword search.$interval = ($user->data['user_id'] == ANONYMOUS) ? $config['search_anonymous_interval'] : $config['search_interval'];if ($interval && !in_array($search_id, array('unreadposts', 'unanswered', 'active_topics', 'egosearch')) && !$auth->acl_get('u_ignoreflood')){	if ($user->data['user_last_search'] > time() - $interval)	{		$template->assign_var('S_NO_SEARCH', true);		trigger_error('NO_SEARCH_TIME');	}}// Define some vars$limit_days		= array(0 => $user->lang['ALL_RESULTS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);$sort_by_text	= array('a' => $user->lang['SORT_AUTHOR'], 't' => $user->lang['SORT_TIME'], 'f' => $user->lang['SORT_FORUM'], 'i' => $user->lang['SORT_TOPIC_TITLE'], 's' => $user->lang['SORT_POST_SUBJECT']);$s_limit_days = $s_sort_key = $s_sort_dir = $u_sort_param = '';gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);if ($keywords || $author || $author_id || $search_id || $submit){	// clear arrays	$id_ary = array();	// If we are looking for authors get their ids	$author_id_ary = array();	$sql_author_match = '';	if ($author_id)	{		$author_id_ary[] = $author_id;	}	else if ($author)	{		if ((strpos($author, '*') !== false) && (utf8_strlen(str_replace(array('*', '%'), '', $author)) < $config['min_search_author_chars']))		{			trigger_error(sprintf($user->lang['TOO_FEW_AUTHOR_CHARS'], $config['min_search_author_chars']));		}		$sql_where = (strpos($author, '*') !== false) ? ' username_clean ' . $db->sql_like_expression(str_replace('*', $db->any_char, utf8_clean_string($author))) : " username_clean = '" . $db->sql_escape(utf8_clean_string($author)) . "'";		$sql = 'SELECT user_id			FROM ' . USERS_TABLE . "			WHERE $sql_where				AND user_type <> " . USER_IGNORE;		$result = $db->sql_query_limit($sql, 100);		while ($row = $db->sql_fetchrow($result))		{			$author_id_ary[] = (int) $row['user_id'];		}		$db->sql_freeresult($result);		$sql_where = (strpos($author, '*') !== false) ? ' post_username ' . $db->sql_like_expression(str_replace('*', $db->any_char, utf8_clean_string($author))) : " post_username = '" . $db->sql_escape(utf8_clean_string($author)) . "'";		$sql = 'SELECT 1 as guest_post			FROM ' . POSTS_TABLE . "			WHERE $sql_where				AND poster_id = " . ANONYMOUS;		$result = $db->sql_query_limit($sql, 1);		$found_guest_post = $db->sql_fetchfield('guest_post');		$db->sql_freeresult($result);		if ($found_guest_post)		{			$author_id_ary[] = ANONYMOUS;			$sql_author_match = (strpos($author, '*') !== false) ? ' ' . $db->sql_like_expression(str_replace('*', $db->any_char, utf8_clean_string($author))) : " = '" . $db->sql_escape(utf8_clean_string($author)) . "'";		}		if (!sizeof($author_id_ary))		{			trigger_error('NO_SEARCH_RESULTS');		}	}	// if we search in an existing search result just add the additional keywords. But we need to use "all search terms"-mode	// so we can keep the old keywords in their old mode, but add the new ones as required words	if ($add_keywords)	{		if ($search_terms == 'all')		{			$keywords .= ' ' . $add_keywords;		}		else		{			$search_terms = 'all';			$keywords = implode(' |', explode(' ', preg_replace('#\s+#u', ' ', $keywords))) . ' ' .$add_keywords;		}	}	// Which forums should not be searched? Author searches are also carried out in unindexed forums	if (empty($keywords) && sizeof($author_id_ary))	{		$ex_fid_ary = array_keys($auth->acl_getf('!f_read', true));	}	else	{		$ex_fid_ary = array_unique(array_merge(array_keys($auth->acl_getf('!f_read', true)), array_keys($auth->acl_getf('!f_search', true))));	}	$not_in_fid = (sizeof($ex_fid_ary)) ? 'WHERE ' . $db->sql_in_set('f.forum_id', $ex_fid_ary, true) . " OR (f.forum_password <> '' AND fa.user_id <> " . (int) $user->data['user_id'] . ')' : "";	$sql = 'SELECT f.forum_id, f.forum_name, f.parent_id, f.forum_type, f.right_id, f.forum_password, f.forum_flags, fa.user_id		FROM ' . FORUMS_TABLE . ' f		LEFT JOIN ' . FORUMS_ACCESS_TABLE . " fa ON (fa.forum_id = f.forum_id			AND fa.session_id = '" . $db->sql_escape($user->session_id) . "')		$not_in_fid		ORDER BY f.left_id";	$result = $db->sql_query($sql);	$right_id = 0;	$reset_search_forum = true;	while ($row = $db->sql_fetchrow($result))	{		if ($row['forum_password'] && $row['user_id'] != $user->data['user_id'])		{			$ex_fid_ary[] = (int) $row['forum_id'];			continue;		}		// Exclude forums from active topics		if (!($row['forum_flags'] & FORUM_FLAG_ACTIVE_TOPICS) && ($search_id == 'active_topics'))		{			$ex_fid_ary[] = (int) $row['forum_id'];			continue;		}		if (sizeof($search_forum))		{			if ($search_child)			{				if (in_array($row['forum_id'], $search_forum) && $row['right_id'] > $right_id)				{					$right_id = (int) $row['right_id'];				}				else if ($row['right_id'] < $right_id)				{					continue;				}			}			if (!in_array($row['forum_id'], $search_forum))			{				$ex_fid_ary[] = (int) $row['forum_id'];				$reset_search_forum = false;			}		}	}	$db->sql_freeresult($result);	// find out in which forums the user is allowed to view approved posts	if ($auth->acl_get('m_approve'))	{		$m_approve_fid_ary = array(-1);		$m_approve_fid_sql = '';	}	else if ($auth->acl_getf_global('m_approve'))	{		$m_approve_fid_ary = array_diff(array_keys($auth->acl_getf('!m_approve', true)), $ex_fid_ary);		$m_approve_fid_sql = ' AND (p.post_approved = 1' . ((sizeof($m_approve_fid_ary)) ? ' OR ' . $db->sql_in_set('p.forum_id', $m_approve_fid_ary, true) : '') . ')';	}	else	{		$m_approve_fid_ary = array();		$m_approve_fid_sql = ' AND p.post_approved = 1';	}	if ($reset_search_forum)	{		$search_forum = array();	}	// Select which method we'll use to obtain the post_id or topic_id information	$search_type = basename($config['search_type']);	if (!file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx))	{		trigger_error('NO_SUCH_SEARCH_MODULE');	}	require("{$phpbb_root_path}includes/search/$search_type.$phpEx");	// We do some additional checks in the module to ensure it can actually be utilised	$error = false;	$search = new $search_type($error);	if ($error)	{		trigger_error($error);	}	// let the search module split up the keywords	if ($keywords)	{		$correct_query = $search->split_keywords($keywords, $search_terms);		if (!$correct_query || (empty($search->search_query) && !sizeof($author_id_ary) && !$search_id))		{			$ignored = (sizeof($search->common_words)) ? sprintf($user->lang['IGNORED_TERMS_EXPLAIN'], implode(' ', $search->common_words)) . '<br />' : '';			trigger_error($ignored . sprintf($user->lang['NO_KEYWORDS'], $search->word_length['min'], $search->word_length['max']));		}	}	if (!$keywords && sizeof($author_id_ary))	{		// if it is an author search we want to show topics by default		$show_results = ($topic_id) ? 'posts' : request_var('sr', ($search_id == 'egosearch') ? 'topics' : 'posts');		$show_results = ($show_results == 'posts') ? 'posts' : 'topics';	}	// define some variables needed for retrieving post_id/topic_id information	$sort_by_sql = array('a' => 'u.username_clean', 't' => (($show_results == 'posts') ? 'p.post_time' : 't.topic_last_post_time'), 'f' => 'f.forum_id', 'i' => 't.topic_title', 's' => (($show_results == 'posts') ? 'p.post_subject' : 't.topic_title'));	// pre-made searches	$sql = $field = $l_search_title = '';	if ($search_id)	{		switch ($search_id)		{			// Oh holy Bob, bring us some activity...			case 'active_topics':				$l_search_title = $user->lang['SEARCH_ACTIVE_TOPICS'];				$show_results = 'topics';				$sort_key = 't';				$sort_dir = 'd';				$sort_days = request_var('st', 7);				$sort_by_sql['t'] = 't.topic_last_post_time';				gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);				$s_sort_key = $s_sort_dir = '';				$last_post_time_sql = ($sort_days) ? ' AND t.topic_last_post_time > ' . (time() - ($sort_days * 24 * 3600)) : '';				$sql = 'SELECT t.topic_last_post_time, t.topic_id					FROM ' . TOPICS_TABLE . " t					WHERE t.topic_moved_id = 0						$last_post_time_sql						" . str_replace(array('p.', 'post_'), array('t.', 'topic_'), $m_approve_fid_sql) . '						' . ((sizeof($ex_fid_ary)) ? ' AND ' . $db->sql_in_set('t.forum_id', $ex_fid_ary, true) : '') . '					ORDER BY t.topic_last_post_time DESC';				$field = 'topic_id';			break;			case 'unanswered':				$l_search_title = $user->lang['SEARCH_UNANSWERED'];				$show_results = request_var('sr', 'topics');				$show_results = ($show_results == 'posts') ? 'posts' : 'topics';				$sort_by_sql['t'] = ($show_results == 'posts') ? 'p.post_time' : 't.topic_last_post_time';				$sort_by_sql['s'] = ($show_results == 'posts') ? 'p.post_subject' : 't.topic_title';				$sql_sort = 'ORDER BY ' . $sort_by_sql[$sort_key] . (($sort_dir == 'a') ? ' ASC' : ' DESC');				$sort_join = ($sort_key == 'f') ? FORUMS_TABLE . ' f, ' : '';				$sql_sort = ($sort_key == 'f') ? ' AND f.forum_id = p.forum_id ' . $sql_sort : $sql_sort;				if ($sort_days)				{					$last_post_time = 'AND p.post_time > ' . (time() - ($sort_days * 24 * 3600));				}				else				{					$last_post_time = '';				}				if ($sort_key == 'a')				{					$sort_join = USERS_TABLE . ' u, ';					$sql_sort = ' AND u.user_id = p.poster_id ' . $sql_sort;				}				if ($show_results == 'posts')				{					$sql = "SELECT p.post_id						FROM $sort_join" . POSTS_TABLE . ' p, ' . TOPICS_TABLE . " t						WHERE t.topic_replies = 0							AND p.topic_id = t.topic_id							$last_post_time							$m_approve_fid_sql							" . ((sizeof($ex_fid_ary)) ? ' AND ' . $db->sql_in_set('p.forum_id', $ex_fid_ary, true) : '') . "							$sql_sort";					$field = 'post_id';				}				else				{					$sql = 'SELECT DISTINCT ' . $sort_by_sql[$sort_key] . ", p.topic_id						FROM $sort_join" . POSTS_TABLE . ' p, ' . TOPICS_TABLE . " t						WHERE t.topic_replies = 0							AND t.topic_moved_id = 0							AND p.topic_id = t.topic_id							$last_post_time							$m_approve_fid_sql							" . ((sizeof($ex_fid_ary)) ? ' AND ' . $db->sql_in_set('p.forum_id', $ex_fid_ary, true) : '') . "						$sql_sort";					$field = 'topic_id';				}			break;			case 'unreadposts':				$l_search_title = $user->lang['SEARCH_UNREAD'];				// force sorting				$show_results = 'topics';				$sort_key = 't';				$sort_by_sql['t'] = 't.topic_last_post_time';				$sql_sort = 'ORDER BY ' . $sort_by_sql[$sort_key] . (($sort_dir == 'a') ? ' ASC' : ' DESC');				$sql_where = 'AND t.topic_moved_id = 0					' . str_replace(array('p.', 'post_'), array('t.', 'topic_'), $m_approve_fid_sql) . '					' . ((sizeof($ex_fid_ary)) ? 'AND ' . $db->sql_in_set('t.forum_id', $ex_fid_ary, true) : '');				gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);				$s_sort_key = $s_sort_dir = $u_sort_param = $s_limit_days = '';			break;			case 'newposts':				$l_search_title = $user->lang['SEARCH_NEW'];				// force sorting				$show_results = (request_var('sr', 'topics') == 'posts') ? 'posts' : 'topics';				$sort_key = 't';				$sort_dir = 'd';				$sort_by_sql['t'] = ($show_results == 'posts') ? 'p.post_time' : 't.topic_last_post_time';				$sql_sort = 'ORDER BY ' . $sort_by_sql[$sort_key] . (($sort_dir == 'a') ? ' ASC' : ' DESC');				gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);				$s_sort_key = $s_sort_dir = $u_sort_param = $s_limit_days = '';				if ($show_results == 'posts')				{					$sql = 'SELECT p.post_id						FROM ' . POSTS_TABLE . ' p						WHERE p.post_time > ' . $user->data['user_lastvisit'] . "							$m_approve_fid_sql							" . ((sizeof($ex_fid_ary)) ? ' AND ' . $db->sql_in_set('p.forum_id', $ex_fid_ary, true) : '') . "						$sql_sort";					$field = 'post_id';				}				else				{					$sql = 'SELECT t.topic_id						FROM ' . TOPICS_TABLE . ' t						WHERE t.topic_last_post_time > ' . $user->data['user_lastvisit'] . '							AND t.topic_moved_id = 0							' . str_replace(array('p.', 'post_'), array('t.', 'topic_'), $m_approve_fid_sql) . '							' . ((sizeof($ex_fid_ary)) ? 'AND ' . $db->sql_in_set('t.forum_id', $ex_fid_ary, true) : '') . "						$sql_sort";/*		[Fix] queued replies missing from "view new posts" (Bug #42705 - Patch by Paul)		- Creates temporary table, query is far from optimized					$sql = 'SELECT t.topic_id						FROM ' . TOPICS_TABLE . ' t, ' . POSTS_TABLE . ' p						WHERE p.post_time > ' . $user->data['user_lastvisit'] . '							AND t.topic_id = p.topic_id							AND t.topic_moved_id = 0							' . $m_approve_fid_sql . '							' . ((sizeof($ex_fid_ary)) ? 'AND ' . $db->sql_in_set('t.forum_id', $ex_fid_ary, true) : '') . "						GROUP BY t.topic_id						$sql_sort";*/					$field = 'topic_id';				}			break;			case 'egosearch':				$l_search_title = $user->lang['SEARCH_SELF'];			break;		}	}	// show_results should not change after this	$per_page = ($show_results == 'posts') ? $config['posts_per_page'] : $config['topics_per_page'];	$total_match_count = 0;	if ($search_id)	{		if ($sql)		{			// only return up to 1000 ids (the last one will be removed later)			$result = $db->sql_query_limit($sql, 1001 - $start, $start);			while ($row = $db->sql_fetchrow($result))			{				$id_ary[] = (int) $row[$field];			}			$db->sql_freeresult($result);			$total_match_count = sizeof($id_ary) + $start;			$id_ary = array_slice($id_ary, 0, $per_page);		}		else if ($search_id == 'unreadposts')		{			$id_ary = array_keys(get_unread_topics($user->data['user_id'], $sql_where, $sql_sort, 1001 - $start, $start));			$total_match_count = sizeof($id_ary) + $start;			$id_ary = array_slice($id_ary, 0, $per_page);		}		else		{			$search_id = '';		}	}	// make sure that some arrays are always in the same order	sort($ex_fid_ary);	sort($m_approve_fid_ary);	sort($author_id_ary);	if (!empty($search->search_query))	{		$total_match_count = $search->keyword_search($show_results, $search_fields, $search_terms, $sort_by_sql, $sort_key, $sort_dir, $sort_days, $ex_fid_ary, $m_approve_fid_ary, $topic_id, $author_id_ary, $sql_author_match, $id_ary, $start, $per_page);	}	else if (sizeof($author_id_ary))	{		$firstpost_only = ($search_fields === 'firstpost' || $search_fields == 'titleonly') ? true : false;		$total_match_count = $search->author_search($show_results, $firstpost_only, $sort_by_sql, $sort_key, $sort_dir, $sort_days, $ex_fid_ary, $m_approve_fid_ary, $topic_id, $author_id_ary, $sql_author_match, $id_ary, $start, $per_page);	}	// For some searches we need to print out the "no results" page directly to allow re-sorting/refining the search options.	if (!sizeof($id_ary) && !$search_id)	{		trigger_error('NO_SEARCH_RESULTS');	}	$sql_where = '';	if (sizeof($id_ary))	{		$sql_where .= $db->sql_in_set(($show_results == 'posts') ? 'p.post_id' : 't.topic_id', $id_ary);		$sql_where .= (sizeof($ex_fid_ary)) ? ' AND (' . $db->sql_in_set('f.forum_id', $ex_fid_ary, true) . ' OR f.forum_id IS NULL)' : '';		$sql_where .= ($show_results == 'posts') ? $m_approve_fid_sql : str_replace(array('p.post_approved', 'p.forum_id'), array('t.topic_approved', 't.forum_id'), $m_approve_fid_sql);	}	if ($show_results == 'posts')	{		include($phpbb_root_path . 'includes/functions_posting.' . $phpEx);	}	else	{		include($phpbb_root_path . 'includes/functions_display.' . $phpEx);	}	$user->add_lang('viewtopic');	// Grab icons	$icons = $cache->obtain_icons();	// Output header	if ($search_id && ($total_match_count > 1000))	{		// limit the number to 1000 for pre-made searches		$total_match_count--;		$l_search_matches = sprintf($user->lang['FOUND_MORE_SEARCH_MATCHES'], $total_match_count);	}	else	{		$l_search_matches = ($total_match_count == 1) ? sprintf($user->lang['FOUND_SEARCH_MATCH'], $total_match_count) : sprintf($user->lang['FOUND_SEARCH_MATCHES'], $total_match_count);	}	// define some vars for urls	$hilit = implode('|', explode(' ', preg_replace('#\s+#u', ' ', str_replace(array('+', '-', '|', '(', ')', '&quot;'), ' ', $keywords))));	// Do not allow *only* wildcard being used for hilight	$hilit = (strspn($hilit, '*') === strlen($hilit)) ? '' : $hilit;	$u_hilit = urlencode(htmlspecialchars_decode(str_replace('|', ' ', $hilit)));	$u_show_results = '&amp;sr=' . $show_results;	$u_search_forum = implode('&amp;fid%5B%5D=', $search_forum);	$u_search = append_sid("{$phpbb_root_path}search.$phpEx", $u_sort_param . $u_show_results);	$u_search .= ($search_id) ? '&amp;search_id=' . $search_id : '';	$u_search .= ($u_hilit) ? '&amp;keywords=' . urlencode(htmlspecialchars_decode($keywords)) : '';	$u_search .= ($search_terms != 'all') ? '&amp;terms=' . $search_terms : '';	$u_search .= ($topic_id) ? '&amp;t=' . $topic_id : '';	$u_search .= ($author) ? '&amp;author=' . urlencode(htmlspecialchars_decode($author)) : '';	$u_search .= ($author_id) ? '&amp;author_id=' . $author_id : '';	$u_search .= ($u_search_forum) ? '&amp;fid%5B%5D=' . $u_search_forum : '';	$u_search .= (!$search_child) ? '&amp;sc=0' : '';	$u_search .= ($search_fields != 'all') ? '&amp;sf=' . $search_fields : '';	$u_search .= ($return_chars != 300) ? '&amp;ch=' . $return_chars : '';	$template->assign_vars(array(		'SEARCH_TITLE'		=> $l_search_title,		'SEARCH_MATCHES'	=> $l_search_matches,		'SEARCH_WORDS'		=> $search->search_query,		'IGNORED_WORDS'		=> (sizeof($search->common_words)) ? implode(' ', $search->common_words) : '',		'PAGINATION'		=> generate_pagination($u_search, $total_match_count, $per_page, $start),		'PAGE_NUMBER'		=> on_page($total_match_count, $per_page, $start),		'TOTAL_MATCHES'		=> $total_match_count,		'SEARCH_IN_RESULTS'	=> ($search_id) ? false : true,		'S_SELECT_SORT_DIR'		=> $s_sort_dir,		'S_SELECT_SORT_KEY'		=> $s_sort_key,		'S_SELECT_SORT_DAYS'	=> $s_limit_days,		'S_SEARCH_ACTION'		=> $u_search,		'S_SHOW_TOPICS'			=> ($show_results == 'posts') ? false : true,		'GOTO_PAGE_IMG'		=> $user->img('icon_post_target', 'GOTO_PAGE'),		'NEWEST_POST_IMG'	=> $user->img('icon_topic_newest', 'VIEW_NEWEST_POST'),		'REPORTED_IMG'		=> $user->img('icon_topic_reported', 'TOPIC_REPORTED'),		'UNAPPROVED_IMG'	=> $user->img('icon_topic_unapproved', 'TOPIC_UNAPPROVED'),		'LAST_POST_IMG'		=> $user->img('icon_topic_latest', 'VIEW_LATEST_POST'),		'U_SEARCH_WORDS'	=> $u_search,	));	if ($sql_where)	{		if ($show_results == 'posts')		{			// @todo Joining this query to the one below?			$sql = 'SELECT zebra_id, friend, foe				FROM ' . ZEBRA_TABLE . '				WHERE user_id = ' . $user->data['user_id'];			$result = $db->sql_query($sql);			$zebra = array();			while ($row = $db->sql_fetchrow($result))			{				$zebra[($row['friend']) ? 'friend' : 'foe'][] = $row['zebra_id'];			}			$db->sql_freeresult($result);			$sql = 'SELECT p.*, f.forum_id, f.forum_name, t.*, u.username, u.username_clean, u.user_sig, u.user_sig_bbcode_uid, u.user_colour				FROM ' . POSTS_TABLE . ' p					LEFT JOIN ' . TOPICS_TABLE . ' t ON (p.topic_id = t.topic_id)					LEFT JOIN ' . FORUMS_TABLE . ' f ON (p.forum_id = f.forum_id)					LEFT JOIN ' . USERS_TABLE . " u ON (p.poster_id = u.user_id)				WHERE $sql_where";		}		else		{			$sql_from = TOPICS_TABLE . ' t				LEFT JOIN ' . FORUMS_TABLE . ' f ON (f.forum_id = t.forum_id)				' . (($sort_key == 'a') ? ' LEFT JOIN ' . USERS_TABLE . ' u ON (u.user_id = t.topic_poster) ' : '');			$sql_select = 't.*, f.forum_id, f.forum_name';			if ($user->data['is_registered'])			{				if ($config['load_db_track'] && $author_id !== $user->data['user_id'])				{					$sql_from .= ' LEFT JOIN ' . TOPICS_POSTED_TABLE . ' tp ON (tp.user_id = ' . $user->data['user_id'] . '						AND t.topic_id = tp.topic_id)';					$sql_select .= ', tp.topic_posted';				}				if ($config['load_db_lastread'])				{					$sql_from .= ' LEFT JOIN ' . TOPICS_TRACK_TABLE . ' tt ON (tt.user_id = ' . $user->data['user_id'] . '							AND t.topic_id = tt.topic_id)						LEFT JOIN ' . FORUMS_TRACK_TABLE . ' ft ON (ft.user_id = ' . $user->data['user_id'] . '							AND ft.forum_id = f.forum_id)';					$sql_select .= ', tt.mark_time, ft.mark_time as f_mark_time';				}			}			if ($config['load_anon_lastread'] || ($user->data['is_registered'] && !$config['load_db_lastread']))			{				$tracking_topics = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';				$tracking_topics = ($tracking_topics) ? tracking_unserialize($tracking_topics) : array();			}			$sql = "SELECT $sql_select				FROM $sql_from				WHERE $sql_where";		}		$sql .= ' ORDER BY ' . $sort_by_sql[$sort_key] . ' ' . (($sort_dir == 'd') ? 'DESC' : 'ASC');		$result = $db->sql_query($sql);		$result_topic_id = 0;		$rowset = array();		if ($show_results == 'topics')		{			$forums = $rowset = $shadow_topic_list = array();			while ($row = $db->sql_fetchrow($result))			{				$row['forum_id'] = (int) $row['forum_id'];				$row['topic_id'] = (int) $row['topic_id'];				if ($row['topic_status'] == ITEM_MOVED)				{					$shadow_topic_list[$row['topic_moved_id']] = $row['topic_id'];				}				$rowset[$row['topic_id']] = $row;				if (!isset($forums[$row['forum_id']]) && $user->data['is_registered'] && $config['load_db_lastread'])				{					$forums[$row['forum_id']]['mark_time'] = $row['f_mark_time'];				}				$forums[$row['forum_id']]['topic_list'][] = $row['topic_id'];				$forums[$row['forum_id']]['rowset'][$row['topic_id']] = &$rowset[$row['topic_id']];			}			$db->sql_freeresult($result);			// If we have some shadow topics, update the rowset to reflect their topic information			if (sizeof($shadow_topic_list))			{				$sql = 'SELECT *					FROM ' . TOPICS_TABLE . '					WHERE ' . $db->sql_in_set('topic_id', array_keys($shadow_topic_list));				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$orig_topic_id = $shadow_topic_list[$row['topic_id']];					// We want to retain some values					$row = array_merge($row, array(						'topic_moved_id'	=> $rowset[$orig_topic_id]['topic_moved_id'],						'topic_status'		=> $rowset[$orig_topic_id]['topic_status'],						'forum_name'		=> $rowset[$orig_topic_id]['forum_name'])					);					$rowset[$orig_topic_id] = $row;				}				$db->sql_freeresult($result);			}			unset($shadow_topic_list);			foreach ($forums as $forum_id => $forum)			{				if ($user->data['is_registered'] && $config['load_db_lastread'])				{					$topic_tracking_info[$forum_id] = get_topic_tracking($forum_id, $forum['topic_list'], $forum['rowset'], array($forum_id => $forum['mark_time']), ($forum_id) ? false : $forum['topic_list']);				}				else if ($config['load_anon_lastread'] || $user->data['is_registered'])				{					$topic_tracking_info[$forum_id] = get_complete_topic_tracking($forum_id, $forum['topic_list'], ($forum_id) ? false : $forum['topic_list']);					if (!$user->data['is_registered'])					{						$user->data['user_lastmark'] = (isset($tracking_topics['l'])) ? (int) (base_convert($tracking_topics['l'], 36, 10) + $config['board_startdate']) : 0;					}				}			}			unset($forums);		}		else		{			$bbcode_bitfield = $text_only_message = '';			$attach_list = array();			while ($row = $db->sql_fetchrow($result))			{				// We pre-process some variables here for later usage				$row['post_text'] = censor_text($row['post_text']);				$text_only_message = $row['post_text'];				// make list items visible as such				if ($row['bbcode_uid'])				{					$text_only_message = str_replace('[*:' . $row['bbcode_uid'] . ']', '&sdot;&nbsp;', $text_only_message);					// no BBCode in text only message					strip_bbcode($text_only_message, $row['bbcode_uid']);				}				if ($return_chars == -1 || utf8_strlen($text_only_message) < ($return_chars + 3))				{					$row['display_text_only'] = false;					$bbcode_bitfield = $bbcode_bitfield | base64_decode($row['bbcode_bitfield']);					// Does this post have an attachment? If so, add it to the list					if ($row['post_attachment'] && $config['allow_attachments'])					{						$attach_list[$row['forum_id']][] = $row['post_id'];					}				}				else				{					$row['post_text'] = $text_only_message;					$row['display_text_only'] = true;				}				$rowset[] = $row;			}			$db->sql_freeresult($result);			unset($text_only_message);			// Instantiate BBCode if needed			if ($bbcode_bitfield !== '')			{				include_once($phpbb_root_path . 'includes/bbcode.' . $phpEx);				$bbcode = new bbcode(base64_encode($bbcode_bitfield));			}			// Pull attachment data			if (sizeof($attach_list))			{				$use_attach_list = $attach_list;				$attach_list = array();				foreach ($use_attach_list as $forum_id => $_list)				{					if ($auth->acl_get('u_download') && $auth->acl_get('f_download', $forum_id))					{						$attach_list = array_merge($attach_list, $_list);					}				}			}			if (sizeof($attach_list))			{				$sql = 'SELECT *					FROM ' . ATTACHMENTS_TABLE . '					WHERE ' . $db->sql_in_set('post_msg_id', $attach_list) . '						AND in_message = 0					ORDER BY filetime DESC, post_msg_id ASC';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$attachments[$row['post_msg_id']][] = $row;				}				$db->sql_freeresult($result);			}		}		if ($hilit)		{			// Remove bad highlights			$hilit_array = array_filter(explode('|', $hilit), 'strlen');			foreach ($hilit_array as $key => $value)			{				$hilit_array[$key] = str_replace('\*', '\w*?', preg_quote($value, '#'));				$hilit_array[$key] = preg_replace('#(^|\s)\\\\w\*\?(\s|$)#', '$1\w+?$2', $hilit_array[$key]);			}			$hilit = implode('|', $hilit_array);		}		foreach ($rowset as $row)		{			$forum_id = $row['forum_id'];			$result_topic_id = $row['topic_id'];			$topic_title = censor_text($row['topic_title']);			// we need to select a forum id for this global topic			if (!$forum_id)			{				if (!isset($g_forum_id))				{					// Get a list of forums the user cannot read					$forum_ary = array_unique(array_keys($auth->acl_getf('!f_read', true)));					// Determine first forum the user is able to read (must not be a category)					$sql = 'SELECT forum_id						FROM ' . FORUMS_TABLE . '						WHERE forum_type = ' . FORUM_POST;					if (sizeof($forum_ary))					{						$sql .= ' AND ' . $db->sql_in_set('forum_id', $forum_ary, true);					}					$result = $db->sql_query_limit($sql, 1);					$g_forum_id = (int) $db->sql_fetchfield('forum_id');				}				$u_forum_id = $g_forum_id;			}			else			{				$u_forum_id = $forum_id;			}			$view_topic_url_params = "f=$u_forum_id&amp;t=$result_topic_id" . (($u_hilit) ? "&amp;hilit=$u_hilit" : '');			$view_topic_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", $view_topic_url_params);			$replies = ($auth->acl_get('m_approve', $forum_id)) ? $row['topic_replies_real'] : $row['topic_replies'];			if ($show_results == 'topics')			{				if ($config['load_db_track'] && $author_id === $user->data['user_id'])				{					$row['topic_posted'] = 1;				}				$folder_img = $folder_alt = $topic_type = '';				topic_status($row, $replies, (isset($topic_tracking_info[$forum_id][$row['topic_id']]) && $row['topic_last_post_time'] > $topic_tracking_info[$forum_id][$row['topic_id']]) ? true : false, $folder_img, $folder_alt, $topic_type);				$unread_topic = (isset($topic_tracking_info[$forum_id][$row['topic_id']]) && $row['topic_last_post_time'] > $topic_tracking_info[$forum_id][$row['topic_id']]) ? true : false;				$topic_unapproved = (!$row['topic_approved'] && $auth->acl_get('m_approve', $forum_id)) ? true : false;				$posts_unapproved = ($row['topic_approved'] && $row['topic_replies'] < $row['topic_replies_real'] && $auth->acl_get('m_approve', $forum_id)) ? true : false;				$u_mcp_queue = ($topic_unapproved || $posts_unapproved) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue&amp;mode=' . (($topic_unapproved) ? 'approve_details' : 'unapproved_posts') . "&amp;t=$result_topic_id", true, $user->session_id) : '';				$row['topic_title'] = preg_replace('#(?!<.*)(?<!\w)(' . $hilit . ')(?!\w|[^<>]*(?:</s(?:cript|tyle))?>)#is', '<span class="posthilit">$1</span>', $row['topic_title']);				$tpl_ary = array(					'TOPIC_AUTHOR'				=> get_username_string('username', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),					'TOPIC_AUTHOR_COLOUR'		=> get_username_string('colour', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),					'TOPIC_AUTHOR_FULL'			=> get_username_string('full', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),					'FIRST_POST_TIME'			=> $user->format_date($row['topic_time']),					'LAST_POST_SUBJECT'			=> $row['topic_last_post_subject'],					'LAST_POST_TIME'			=> $user->format_date($row['topic_last_post_time']),					'LAST_VIEW_TIME'			=> $user->format_date($row['topic_last_view_time']),					'LAST_POST_AUTHOR'			=> get_username_string('username', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),					'LAST_POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),					'LAST_POST_AUTHOR_FULL'		=> get_username_string('full', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),					'PAGINATION'		=> topic_generate_pagination($replies, $view_topic_url),					'TOPIC_TYPE'		=> $topic_type,					'TOPIC_FOLDER_IMG'		=> $user->img($folder_img, $folder_alt),					'TOPIC_FOLDER_IMG_SRC'	=> $user->img($folder_img, $folder_alt, false, '', 'src'),					'TOPIC_FOLDER_IMG_ALT'	=> $user->lang[$folder_alt],					'TOPIC_FOLDER_IMG_WIDTH'=> $user->img($folder_img, '', false, '', 'width'),					'TOPIC_FOLDER_IMG_HEIGHT'	=> $user->img($folder_img, '', false, '', 'height'),					'TOPIC_ICON_IMG'		=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['img'] : '',					'TOPIC_ICON_IMG_WIDTH'	=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['width'] : '',					'TOPIC_ICON_IMG_HEIGHT'	=> (!empty($icons[$row['icon_id']])) ? $icons[$row['icon_id']]['height'] : '',					'ATTACH_ICON_IMG'		=> ($auth->acl_get('u_download') && $auth->acl_get('f_download', $forum_id) && $row['topic_attachment']) ? $user->img('icon_topic_attach', $user->lang['TOTAL_ATTACHMENTS']) : '',					'UNAPPROVED_IMG'		=> ($topic_unapproved || $posts_unapproved) ? $user->img('icon_topic_unapproved', ($topic_unapproved) ? 'TOPIC_UNAPPROVED' : 'POSTS_UNAPPROVED') : '',					'S_TOPIC_GLOBAL'		=> (!$forum_id) ? true : false,					'S_TOPIC_TYPE'			=> $row['topic_type'],					'S_USER_POSTED'			=> (!empty($row['topic_posted'])) ? true : false,					'S_UNREAD_TOPIC'		=> $unread_topic,					'S_TOPIC_REPORTED'		=> (!empty($row['topic_reported']) && $auth->acl_get('m_report', $forum_id)) ? true : false,					'S_TOPIC_UNAPPROVED'	=> $topic_unapproved,					'S_POSTS_UNAPPROVED'	=> $posts_unapproved,					'U_LAST_POST'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", $view_topic_url_params . '&amp;p=' . $row['topic_last_post_id']) . '#p' . $row['topic_last_post_id'],					'U_LAST_POST_AUTHOR'	=> get_username_string('profile', $row['topic_last_poster_id'], $row['topic_last_poster_name'], $row['topic_last_poster_colour']),					'U_TOPIC_AUTHOR'		=> get_username_string('profile', $row['topic_poster'], $row['topic_first_poster_name'], $row['topic_first_poster_colour']),					'U_NEWEST_POST'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", $view_topic_url_params . '&amp;view=unread') . '#unread',					'U_MCP_REPORT'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports&amp;mode=reports&amp;t=' . $result_topic_id, true, $user->session_id),					'U_MCP_QUEUE'			=> $u_mcp_queue,				);			}			else			{				if ((isset($zebra['foe']) && in_array($row['poster_id'], $zebra['foe'])) && (!$view || $view != 'show' || $post_id != $row['post_id']))				{					$template->assign_block_vars('searchresults', array(						'S_IGNORE_POST' => true,						'L_IGNORE_POST' => sprintf($user->lang['POST_BY_FOE'], $row['username'], "<a href=\"$u_search&amp;start=$start&amp;p=" . $row['post_id'] . '&amp;view=show#p' . $row['post_id'] . '">', '</a>'))					);					continue;				}				// Replace naughty words such as farty pants				$row['post_subject'] = censor_text($row['post_subject']);				if ($row['display_text_only'])				{					// now find context for the searched words					$row['post_text'] = get_context($row['post_text'], array_filter(explode('|', $hilit), 'strlen'), $return_chars);					$row['post_text'] = bbcode_nl2br($row['post_text']);				}				else				{					// Second parse bbcode here					if ($row['bbcode_bitfield'])					{						$bbcode->bbcode_second_pass($row['post_text'], $row['bbcode_uid'], $row['bbcode_bitfield']);					}					$row['post_text'] = bbcode_nl2br($row['post_text']);					$row['post_text'] = smiley_text($row['post_text']);					if (!empty($attachments[$row['post_id']]))					{						parse_attachments($forum_id, $row['post_text'], $attachments[$row['post_id']], $update_count);						// we only display inline attachments						unset($attachments[$row['post_id']]);					}				}				if ($hilit)				{					// post highlighting					$row['post_text'] = preg_replace('#(?!<.*)(?<!\w)(' . $hilit . ')(?!\w|[^<>]*(?:</s(?:cript|tyle))?>)#is', '<span class="posthilit">$1</span>', $row['post_text']);					$row['post_subject'] = preg_replace('#(?!<.*)(?<!\w)(' . $hilit . ')(?!\w|[^<>]*(?:</s(?:cript|tyle))?>)#is', '<span class="posthilit">$1</span>', $row['post_subject']);				}				$tpl_ary = array(					'POST_AUTHOR_FULL'		=> get_username_string('full', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),					'POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),					'POST_AUTHOR'			=> get_username_string('username', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),					'U_POST_AUTHOR'			=> get_username_string('profile', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),					'POST_SUBJECT'		=> $row['post_subject'],					'POST_DATE'			=> (!empty($row['post_time'])) ? $user->format_date($row['post_time']) : '',					'MESSAGE'			=> $row['post_text']				);			}			$template->assign_block_vars('searchresults', array_merge($tpl_ary, array(				'FORUM_ID'			=> $forum_id,				'TOPIC_ID'			=> $result_topic_id,				'POST_ID'			=> ($show_results == 'posts') ? $row['post_id'] : false,				'FORUM_TITLE'		=> $row['forum_name'],				'TOPIC_TITLE'		=> $topic_title,				'TOPIC_REPLIES'		=> $replies,				'TOPIC_VIEWS'		=> $row['topic_views'],				'U_VIEW_TOPIC'		=> $view_topic_url,				'U_VIEW_FORUM'		=> append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id),				'U_VIEW_POST'		=> (!empty($row['post_id'])) ? append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=" . $row['topic_id'] . '&amp;p=' . $row['post_id'] . (($u_hilit) ? '&amp;hilit=' . $u_hilit : '')) . '#p' . $row['post_id'] : '')			));		}		if ($topic_id && ($topic_id == $result_topic_id))		{			$template->assign_vars(array(				'SEARCH_TOPIC'		=> $topic_title,				'U_SEARCH_TOPIC'	=> $view_topic_url			));		}	}	unset($rowset);	page_header(($l_search_title) ? $l_search_title : $user->lang['SEARCH']);	$template->set_filenames(array(		'body' => 'search_results.html')	);	make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"));	page_footer();}// Search forum$s_forums = '';$sql = 'SELECT f.forum_id, f.forum_name, f.parent_id, f.forum_type, f.left_id, f.right_id, f.forum_password, f.enable_indexing, fa.user_id	FROM ' . FORUMS_TABLE . ' f	LEFT JOIN ' . FORUMS_ACCESS_TABLE . " fa ON (fa.forum_id = f.forum_id		AND fa.session_id = '" . $db->sql_escape($user->session_id) . "')	ORDER BY f.left_id ASC";$result = $db->sql_query($sql);$right = $cat_right = $padding_inc = 0;$padding = $forum_list = $holding = '';$pad_store = array('0' => '');while ($row = $db->sql_fetchrow($result)){	if ($row['forum_type'] == FORUM_CAT && ($row['left_id'] + 1 == $row['right_id']))	{		// Non-postable forum with no subforums, don't display		continue;	}	if ($row['forum_type'] == FORUM_POST && ($row['left_id'] + 1 == $row['right_id']) && !$row['enable_indexing'])	{		// Postable forum with no subforums and indexing disabled, don't display		continue;	}	if ($row['forum_type'] == FORUM_LINK || ($row['forum_password'] && !$row['user_id']))	{		// if this forum is a link or password protected (user has not entered the password yet) then skip to the next branch		continue;	}	if ($row['left_id'] < $right)	{		$padding .= '&nbsp; &nbsp;';		$pad_store[$row['parent_id']] = $padding;	}	else if ($row['left_id'] > $right + 1)	{		if (isset($pad_store[$row['parent_id']]))		{			$padding = $pad_store[$row['parent_id']];		}		else		{			continue;		}	}	$right = $row['right_id'];	if ($auth->acl_gets('!f_search', '!f_list', $row['forum_id']))	{		// if the user does not have permissions to search or see this forum skip only this forum/category		continue;	}	$selected = (in_array($row['forum_id'], $search_forum)) ? ' selected="selected"' : '';	if ($row['left_id'] > $cat_right)	{		// make sure we don't forget anything		$s_forums .= $holding;		$holding = '';	}	if ($row['right_id'] - $row['left_id'] > 1)	{		$cat_right = max($cat_right, $row['right_id']);		$holding .= '<option value="' . $row['forum_id'] . '"' . $selected . '>' . $padding . $row['forum_name'] . '</option>';	}	else	{		$s_forums .= $holding . '<option value="' . $row['forum_id'] . '"' . $selected . '>' . $padding . $row['forum_name'] . '</option>';		$holding = '';	}}if ($holding){	$s_forums .= $holding;}$db->sql_freeresult($result);unset($pad_store);if (!$s_forums){	trigger_error('NO_SEARCH');}// Number of chars returned$s_characters = '<option value="-1">' . $user->lang['ALL_AVAILABLE'] . '</option>';$s_characters .= '<option value="0">0</option>';$s_characters .= '<option value="25">25</option>';$s_characters .= '<option value="50">50</option>';for ($i = 100; $i <= 1000 ; $i += 100){	$selected = ($i == 300) ? ' selected="selected"' : '';	$s_characters .= '<option value="' . $i . '"' . $selected . '>' . $i . '</option>';}$s_hidden_fields = array('t' => $topic_id);if ($_SID){	$s_hidden_fields['sid'] = $_SID;}if (!empty($_EXTRA_URL)){	foreach ($_EXTRA_URL as $url_param)	{		$url_param = explode('=', $url_param, 2);		$s_hidden_fields[$url_param[0]] = $url_param[1];	}}$template->assign_vars(array(	'S_SEARCH_ACTION'		=> append_sid("{$phpbb_root_path}search.$phpEx", false, true, 0), // We force no ?sid= appending by using 0	'S_HIDDEN_FIELDS'		=> build_hidden_fields($s_hidden_fields),	'S_CHARACTER_OPTIONS'	=> $s_characters,	'S_FORUM_OPTIONS'		=> $s_forums,	'S_SELECT_SORT_DIR'		=> $s_sort_dir,	'S_SELECT_SORT_KEY'		=> $s_sort_key,	'S_SELECT_SORT_DAYS'	=> $s_limit_days,	'S_IN_SEARCH'			=> true,));// only show recent searches to search administratorsif ($auth->acl_get('a_search')){	// Handle large objects differently for Oracle and MSSQL	switch ($db->sql_layer)	{		case 'oracle':			$sql = 'SELECT search_time, search_keywords				FROM ' . SEARCH_RESULTS_TABLE . '				WHERE dbms_lob.getlength(search_keywords) > 0				ORDER BY search_time DESC';		break;		case 'mssql':		case 'mssql_odbc':		case 'mssqlnative':			$sql = 'SELECT search_time, search_keywords				FROM ' . SEARCH_RESULTS_TABLE . '				WHERE DATALENGTH(search_keywords) > 0				ORDER BY search_time DESC';		break;		default:			$sql = 'SELECT search_time, search_keywords				FROM ' . SEARCH_RESULTS_TABLE . '				WHERE search_keywords <> \'\'				ORDER BY search_time DESC';		break;	}	$result = $db->sql_query_limit($sql, 5);	while ($row = $db->sql_fetchrow($result))	{		$keywords = $row['search_keywords'];		$template->assign_block_vars('recentsearch', array(			'KEYWORDS'	=> $keywords,			'TIME'		=> $user->format_date($row['search_time']),			'U_KEYWORDS'	=> append_sid("{$phpbb_root_path}search.$phpEx", 'keywords=' . urlencode(htmlspecialchars_decode($keywords)))		));	}	$db->sql_freeresult($result);}// Output the basic pagepage_header($user->lang['SEARCH']);$template->set_filenames(array(	'body' => 'search_body.html'));make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"));page_footer();?>
<?php/**** @package acm* @version $Id$* @copyright (c) 2005, 2009 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ACM File Based Caching* @package acm*/class acm{	var $vars = array();	var $var_expires = array();	var $is_modified = false;	var $sql_rowset = array();	var $sql_row_pointer = array();	var $cache_dir = '';	/**	* Set cache path	*/	function acm()	{		global $phpbb_root_path;		$this->cache_dir = $phpbb_root_path . 'cache/';	}	/**	* Load global cache	*/	function load()	{		return $this->_read('data_global');	}	/**	* Unload cache object	*/	function unload()	{		$this->save();		unset($this->vars);		unset($this->var_expires);		unset($this->sql_rowset);		unset($this->sql_row_pointer);		$this->vars = array();		$this->var_expires = array();		$this->sql_rowset = array();		$this->sql_row_pointer = array();	}	/**	* Save modified objects	*/	function save()	{		if (!$this->is_modified)		{			return;		}		global $phpEx;		if (!$this->_write('data_global'))		{			if (!function_exists('phpbb_is_writable'))			{				global $phpbb_root_path;				include($phpbb_root_path . 'includes/functions.' . $phpEx);			}			// Now, this occurred how often? ... phew, just tell the user then...			if (!phpbb_is_writable($this->cache_dir))			{				// We need to use die() here, because else we may encounter an infinite loop (the message handler calls $cache->unload())				die('Fatal: ' . $this->cache_dir . ' is NOT writable.');				exit;			}			die('Fatal: Not able to open ' . $this->cache_dir . 'data_global.' . $phpEx);			exit;		}		$this->is_modified = false;	}	/**	* Tidy cache	*/	function tidy()	{		global $phpEx;		$dir = @opendir($this->cache_dir);		if (!$dir)		{			return;		}		$time = time();		while (($entry = readdir($dir)) !== false)		{			if (!preg_match('/^(sql_|data_(?!global))/', $entry))			{				continue;			}			if (!($handle = @fopen($this->cache_dir . $entry, 'rb')))			{				continue;			}			// Skip the PHP header			fgets($handle);			// Skip expiration			$expires = (int) fgets($handle);			fclose($handle);			if ($time >= $expires)			{				$this->remove_file($this->cache_dir . $entry);			}		}		closedir($dir);		if (file_exists($this->cache_dir . 'data_global.' . $phpEx))		{			if (!sizeof($this->vars))			{				$this->load();			}			foreach ($this->var_expires as $var_name => $expires)			{				if ($time >= $expires)				{					$this->destroy($var_name);				}			}		}		set_config('cache_last_gc', time(), true);	}	/**	* Get saved cache object	*/	function get($var_name)	{		if ($var_name[0] == '_')		{			global $phpEx;			if (!$this->_exists($var_name))			{				return false;			}			return $this->_read('data' . $var_name);		}		else		{			return ($this->_exists($var_name)) ? $this->vars[$var_name] : false;		}	}	/**	* Put data into cache	*/	function put($var_name, $var, $ttl = 31536000)	{		if ($var_name[0] == '_')		{			$this->_write('data' . $var_name, $var, time() + $ttl);		}		else		{			$this->vars[$var_name] = $var;			$this->var_expires[$var_name] = time() + $ttl;			$this->is_modified = true;		}	}	/**	* Purge cache data	*/	function purge()	{		// Purge all phpbb cache files		$dir = @opendir($this->cache_dir);		if (!$dir)		{			return;		}		while (($entry = readdir($dir)) !== false)		{			if (strpos($entry, 'sql_') !== 0 && strpos($entry, 'data_') !== 0 && strpos($entry, 'ctpl_') !== 0 && strpos($entry, 'tpl_') !== 0)			{				continue;			}			$this->remove_file($this->cache_dir . $entry);		}		closedir($dir);		unset($this->vars);		unset($this->var_expires);		unset($this->sql_rowset);		unset($this->sql_row_pointer);		$this->vars = array();		$this->var_expires = array();		$this->sql_rowset = array();		$this->sql_row_pointer = array();		$this->is_modified = false;	}	/**	* Destroy cache data	*/	function destroy($var_name, $table = '')	{		global $phpEx;		if ($var_name == 'sql' && !empty($table))		{			if (!is_array($table))			{				$table = array($table);			}			$dir = @opendir($this->cache_dir);			if (!$dir)			{				return;			}			while (($entry = readdir($dir)) !== false)			{				if (strpos($entry, 'sql_') !== 0)				{					continue;				}				if (!($handle = @fopen($this->cache_dir . $entry, 'rb')))				{					continue;				}				// Skip the PHP header				fgets($handle);				// Skip expiration				fgets($handle);				// Grab the query, remove the LF				$query = substr(fgets($handle), 0, -1);				fclose($handle);				foreach ($table as $check_table)				{					// Better catch partial table names than no table names. ;)					if (strpos($query, $check_table) !== false)					{						$this->remove_file($this->cache_dir . $entry);						break;					}				}			}			closedir($dir);			return;		}		if (!$this->_exists($var_name))		{			return;		}		if ($var_name[0] == '_')		{			$this->remove_file($this->cache_dir . 'data' . $var_name . ".$phpEx", true);		}		else if (isset($this->vars[$var_name]))		{			$this->is_modified = true;			unset($this->vars[$var_name]);			unset($this->var_expires[$var_name]);			// We save here to let the following cache hits succeed			$this->save();		}	}	/**	* Check if a given cache entry exist	*/	function _exists($var_name)	{		if ($var_name[0] == '_')		{			global $phpEx;			return file_exists($this->cache_dir . 'data' . $var_name . ".$phpEx");		}		else		{			if (!sizeof($this->vars))			{				$this->load();			}			if (!isset($this->var_expires[$var_name]))			{				return false;			}			return (time() > $this->var_expires[$var_name]) ? false : isset($this->vars[$var_name]);		}	}	/**	* Load cached sql query	*/	function sql_load($query)	{		// Remove extra spaces and tabs		$query = preg_replace('/[\n\r\s\t]+/', ' ', $query);		if (($rowset = $this->_read('sql_' . md5($query))) === false)		{			return false;		}		$query_id = sizeof($this->sql_rowset);		$this->sql_rowset[$query_id] = $rowset;		$this->sql_row_pointer[$query_id] = 0;		return $query_id;	}	/**	* Save sql query	*/	function sql_save($query, &$query_result, $ttl)	{		global $db;		// Remove extra spaces and tabs		$query = preg_replace('/[\n\r\s\t]+/', ' ', $query);		$query_id = sizeof($this->sql_rowset);		$this->sql_rowset[$query_id] = array();		$this->sql_row_pointer[$query_id] = 0;		while ($row = $db->sql_fetchrow($query_result))		{			$this->sql_rowset[$query_id][] = $row;		}		$db->sql_freeresult($query_result);		if ($this->_write('sql_' . md5($query), $this->sql_rowset[$query_id], $ttl + time(), $query))		{			$query_result = $query_id;		}	}	/**	* Ceck if a given sql query exist in cache	*/	function sql_exists($query_id)	{		return isset($this->sql_rowset[$query_id]);	}	/**	* Fetch row from cache (database)	*/	function sql_fetchrow($query_id)	{		if ($this->sql_row_pointer[$query_id] < sizeof($this->sql_rowset[$query_id]))		{			return $this->sql_rowset[$query_id][$this->sql_row_pointer[$query_id]++];		}		return false;	}	/**	* Fetch a field from the current row of a cached database result (database)	*/	function sql_fetchfield($query_id, $field)	{		if ($this->sql_row_pointer[$query_id] < sizeof($this->sql_rowset[$query_id]))		{			return (isset($this->sql_rowset[$query_id][$this->sql_row_pointer[$query_id]][$field])) ? $this->sql_rowset[$query_id][$this->sql_row_pointer[$query_id]++][$field] : false;		}		return false;	}	/**	* Seek a specific row in an a cached database result (database)	*/	function sql_rowseek($rownum, $query_id)	{		if ($rownum >= sizeof($this->sql_rowset[$query_id]))		{			return false;		}		$this->sql_row_pointer[$query_id] = $rownum;		return true;	}	/**	* Free memory used for a cached database result (database)	*/	function sql_freeresult($query_id)	{		if (!isset($this->sql_rowset[$query_id]))		{			return false;		}		unset($this->sql_rowset[$query_id]);		unset($this->sql_row_pointer[$query_id]);		return true;	}	/**	* Read cached data from a specified file	*	* @access private	* @param string $filename Filename to write	* @return mixed False if an error was encountered, otherwise the data type of the cached data	*/	function _read($filename)	{		global $phpEx;		$file = "{$this->cache_dir}$filename.$phpEx";		$type = substr($filename, 0, strpos($filename, '_'));		if (!file_exists($file))		{			return false;		}		if (!($handle = @fopen($file, 'rb')))		{			return false;		}		// Skip the PHP header		fgets($handle);		if ($filename == 'data_global')		{			$this->vars = $this->var_expires = array();			$time = time();			while (($expires = (int) fgets($handle)) && !feof($handle))			{				// Number of bytes of data				$bytes = substr(fgets($handle), 0, -1);				if (!is_numeric($bytes) || ($bytes = (int) $bytes) === 0)				{					// We cannot process the file without a valid number of bytes					// so we discard it					fclose($handle);					$this->vars = $this->var_expires = array();					$this->is_modified = false;					$this->remove_file($file);					return false;				}				if ($time >= $expires)				{					fseek($handle, $bytes, SEEK_CUR);					continue;				}				$var_name = substr(fgets($handle), 0, -1);				// Read the length of bytes that consists of data.				$data = fread($handle, $bytes - strlen($var_name));				$data = @unserialize($data);				// Don't use the data if it was invalid				if ($data !== false)				{					$this->vars[$var_name] = $data;					$this->var_expires[$var_name] = $expires;				}				// Absorb the LF				fgets($handle);			}			fclose($handle);			$this->is_modified = false;			return true;		}		else		{			$data = false;			$line = 0;			while (($buffer = fgets($handle)) && !feof($handle))			{				$buffer = substr($buffer, 0, -1); // Remove the LF				// $buffer is only used to read integers				// if it is non numeric we have an invalid				// cache file, which we will now remove.				if (!is_numeric($buffer))				{					break;				}				if ($line == 0)				{					$expires = (int) $buffer;					if (time() >= $expires)					{						break;					}					if ($type == 'sql')					{						// Skip the query						fgets($handle);					}				}				else if ($line == 1)				{					$bytes = (int) $buffer;					// Never should have 0 bytes					if (!$bytes)					{						break;					}					// Grab the serialized data					$data = fread($handle, $bytes);					// Read 1 byte, to trigger EOF					fread($handle, 1);					if (!feof($handle))					{						// Somebody tampered with our data						$data = false;					}					break;				}				else				{					// Something went wrong					break;				}				$line++;			}			fclose($handle);			// unserialize if we got some data			$data = ($data !== false) ? @unserialize($data) : $data;			if ($data === false)			{				$this->remove_file($file);				return false;			}			return $data;		}	}	/**	* Write cache data to a specified file	*	* 'data_global' is a special case and the generated format is different for this file:	* <code>	* <?php exit; ?>	* (expiration)	* (length of var and serialised data)	* (var)	* (serialised data)	* ... (repeat)	* </code>	*	* The other files have a similar format:	* <code>	* <?php exit; ?>	* (expiration)	* (query) [SQL files only]	* (length of serialised data)	* (serialised data)	* </code>	*	* @access private	* @param string $filename Filename to write	* @param mixed $data Data to store	* @param int $expires Timestamp when the data expires	* @param string $query Query when caching SQL queries	* @return bool True if the file was successfully created, otherwise false	*/	function _write($filename, $data = null, $expires = 0, $query = '')	{		global $phpEx;		$file = "{$this->cache_dir}$filename.$phpEx";		if ($handle = @fopen($file, 'wb'))		{			@flock($handle, LOCK_EX);			// File header			fwrite($handle, '<' . '?php exit; ?' . '>');			if ($filename == 'data_global')			{				// Global data is a different format				foreach ($this->vars as $var => $data)				{					if (strpos($var, "\r") !== false || strpos($var, "\n") !== false)					{						// CR/LF would cause fgets() to read the cache file incorrectly						// do not cache test entries, they probably won't be read back						// the cache keys should really be alphanumeric with a few symbols.						continue;					}					$data = serialize($data);					// Write out the expiration time					fwrite($handle, "\n" . $this->var_expires[$var] . "\n");					// Length of the remaining data for this var (ignoring two LF's)					fwrite($handle, strlen($data . $var) . "\n");					fwrite($handle, $var . "\n");					fwrite($handle, $data);				}			}			else			{				fwrite($handle, "\n" . $expires . "\n");				if (strpos($filename, 'sql_') === 0)				{					fwrite($handle, $query . "\n");				}				$data = serialize($data);				fwrite($handle, strlen($data) . "\n");				fwrite($handle, $data);			}			@flock($handle, LOCK_UN);			fclose($handle);			if (!function_exists('phpbb_chmod'))			{				global $phpbb_root_path;				include($phpbb_root_path . 'includes/functions.' . $phpEx);			}			phpbb_chmod($file, CHMOD_READ | CHMOD_WRITE);			return true;		}		return false;	}	/**	* Removes/unlinks file	*/	function remove_file($filename, $check = false)	{		if (!function_exists('phpbb_is_writable'))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/functions.' . $phpEx);		}		if ($check && !phpbb_is_writable($this->cache_dir))		{			// E_USER_ERROR - not using language entry - intended.			trigger_error('Unable to remove files within ' . $this->cache_dir . '. Please check directory permissions.', E_USER_ERROR);		}		return @unlink($filename);	}}?>
<?php return array(''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'10',''=>'20',''=>'30',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'21',''=>'22',''=>'23',''=>'24',''=>'25',''=>'26',''=>'27',''=>'28',''=>'29',''=>'30',''=>'31',''=>'32',''=>'33',''=>'34',''=>'35',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'36',''=>'37',''=>'38',''=>'39',''=>'40',''=>'41',''=>'42',''=>'43',''=>'44',''=>'45',''=>'46',''=>'47',''=>'48',''=>'49',''=>'50',''=>'');
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$mode = request_var('mode', '');// Load the appropriate faq fileswitch ($mode){	case 'bbcode':		$l_title = $user->lang['BBCODE_GUIDE'];		$user->add_lang('bbcode', false, true);	break;	default:		$l_title = $user->lang['FAQ_EXPLAIN'];		$user->add_lang('faq', false, true);	break;}// Pull the array data from the lang pack$switch_column = $found_switch = false;$help_blocks = array();foreach ($user->help as $help_ary){	if ($help_ary[0] == '--')	{		if ($help_ary[1] == '--')		{			$switch_column = true;			$found_switch = true;			continue;		}		$template->assign_block_vars('faq_block', array(			'BLOCK_TITLE'		=> $help_ary[1],			'SWITCH_COLUMN'		=> $switch_column,		));		if ($switch_column)		{			$switch_column = false;		}		continue;	}	$template->assign_block_vars('faq_block.faq_row', array(		'FAQ_QUESTION'		=> $help_ary[0],		'FAQ_ANSWER'		=> $help_ary[1])	);}// Lets build a page ...$template->assign_vars(array(	'L_FAQ_TITLE'				=> $l_title,	'L_BACK_TO_TOP'				=> $user->lang['BACK_TO_TOP'],	'SWITCH_COLUMN_MANUALLY'	=> (!$found_switch) ? true : false,));page_header($l_title, false);$template->set_filenames(array(	'body' => 'faq_body.html'));make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"));page_footer();?>
<?php/*** @package phpBB3* @version $Id$* @copyright (c) 2009 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License** Idea and original RSS Feed 2.0 MOD (Version 1.0.8/9) by leviatan21* Original MOD: http://www.phpbb.com/community/viewtopic.php?f=69&t=1214645* MOD Author Profile: http://www.phpbb.com/community/memberlist.php?mode=viewprofile&u=345763* MOD Author Homepage: http://www.mssti.com/phpbb3/***//*** @ignore**/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);if (!$config['feed_enable']){	trigger_error('NO_FEED_ENABLED');}// Start session$user->session_begin();if (!empty($config['feed_http_auth']) && request_var('auth', '') == 'http'){	phpbb_http_login(array(		'auth_message'	=> 'Feed',		'viewonline'	=> request_var('viewonline', true),	));}$auth->acl($user->data);$user->setup();// Initial var setup$forum_id	= request_var('f', 0);$topic_id	= request_var('t', 0);$mode		= request_var('mode', '');// We do not use a template, therefore we simply define the global template variables here$global_vars = $item_vars = array();$feed_updated_time = 0;// Generate params array for use in append_sid() to correctly link back to this page$params = false;if ($forum_id || $topic_id || $mode){	$params = array(		'f'		=> ($forum_id) ? $forum_id : NULL,		't'		=> ($topic_id) ? $topic_id : NULL,		'mode'	=> ($mode) ? $mode : NULL,	);}// This boards URL$board_url = generate_board_url();// Get correct feed object$feed = phpbb_feed_factory::init($mode, $forum_id, $topic_id);// No feed foundif ($feed === false){	trigger_error('NO_FEED');}// Open Feed$feed->open();// Iterate through itemswhile ($row = $feed->get_item()){	// BBCode options to correctly disable urls, smilies, bbcode...	if ($feed->get('options') === NULL)	{		// Allow all combinations		$options = 7;		if ($feed->get('enable_bbcode') !== NULL && $feed->get('enable_smilies') !== NULL && $feed->get('enable_magic_url') !== NULL)		{			$options = (($row[$feed->get('enable_bbcode')]) ? OPTION_FLAG_BBCODE : 0) + (($row[$feed->get('enable_smilies')]) ? OPTION_FLAG_SMILIES : 0) + (($row[$feed->get('enable_magic_url')]) ? OPTION_FLAG_LINKS : 0);		}	}	else	{		$options = $row[$feed->get('options')];	}	$title = (isset($row[$feed->get('title')]) && $row[$feed->get('title')] !== '') ? $row[$feed->get('title')] : ((isset($row[$feed->get('title2')])) ? $row[$feed->get('title2')] : '');	$published = ($feed->get('published') !== NULL) ? (int) $row[$feed->get('published')] : 0;	$updated = ($feed->get('updated') !== NULL) ? (int) $row[$feed->get('updated')] : 0;	$item_row = array(		'author'		=> ($feed->get('creator') !== NULL) ? $row[$feed->get('creator')] : '',		'published'		=> ($published > 0) ? feed_format_date($published) : '',		'updated'		=> ($updated > 0) ? feed_format_date($updated) : '',		'link'			=> '',		'title'			=> censor_text($title),		'category'		=> ($config['feed_item_statistics'] && !empty($row['forum_id'])) ? $board_url . '/viewforum.' . $phpEx . '?f=' . $row['forum_id'] : '',		'category_name'	=> ($config['feed_item_statistics'] && isset($row['forum_name'])) ? $row['forum_name'] : '',		'description'	=> censor_text(feed_generate_content($row[$feed->get('text')], $row[$feed->get('bbcode_uid')], $row[$feed->get('bitfield')], $options)),		'statistics'	=> '',	);	// Adjust items, fill link, etc.	$feed->adjust_item($item_row, $row);	$item_vars[] = $item_row;	$feed_updated_time = max($feed_updated_time, $published, $updated);}// If we do not have any items at all, sending the current time is better than sending no time.if (!$feed_updated_time){	$feed_updated_time = time();}// Some default assignments// FEED_IMAGE is not used (atom)$global_vars = array_merge($global_vars, array(	'FEED_IMAGE'			=> ($user->img('site_logo', '', false, '', 'src')) ? $board_url . '/' . substr($user->img('site_logo', '', false, '', 'src'), strlen($phpbb_root_path)) : '',	'SELF_LINK'				=> feed_append_sid('/feed.' . $phpEx, $params),	'FEED_LINK'				=> $board_url . '/index.' . $phpEx,	'FEED_TITLE'			=> $config['sitename'],	'FEED_SUBTITLE'			=> $config['site_desc'],	'FEED_UPDATED'			=> feed_format_date($feed_updated_time),	'FEED_LANG'				=> $user->lang['USER_LANG'],	'FEED_AUTHOR'			=> $config['sitename'],));$feed->close();// Output page// gzip_compressionif ($config['gzip_compress']){	if (@extension_loaded('zlib') && !headers_sent())	{		ob_start('ob_gzhandler');	}}// IF debug extra is enabled and admin want to "explain" the page we need to set other headers...if (defined('DEBUG_EXTRA') && request_var('explain', 0) && $auth->acl_get('a_')){	header('Content-type: text/html; charset=UTF-8');	header('Cache-Control: private, no-cache="set-cookie"');	header('Expires: 0');	header('Pragma: no-cache');	$mtime = explode(' ', microtime());	$totaltime = $mtime[0] + $mtime[1] - $starttime;	if (method_exists($db, 'sql_report'))	{		$db->sql_report('display');	}	garbage_collection();	exit_handler();}header("Content-Type: application/atom+xml; charset=UTF-8");header("Last-Modified: " . gmdate('D, d M Y H:i:s', $feed_updated_time) . ' GMT');if (!empty($user->data['is_bot'])){	// Let reverse proxies know we detected a bot.	header('X-PHPBB-IS-BOT: yes');}echo '<?xml version="1.0" encoding="UTF-8"?>' . "\n";echo '<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="' . $global_vars['FEED_LANG'] . '">' . "\n";echo '<link rel="self" type="application/atom+xml" href="' . $global_vars['SELF_LINK'] . '" />' . "\n\n";echo (!empty($global_vars['FEED_TITLE'])) ? '<title>' . $global_vars['FEED_TITLE'] . '</title>' . "\n" : '';echo (!empty($global_vars['FEED_SUBTITLE'])) ? '<subtitle>' . $global_vars['FEED_SUBTITLE'] . '</subtitle>' . "\n" : '';echo (!empty($global_vars['FEED_LINK'])) ? '<link href="' . $global_vars['FEED_LINK'] .'" />' . "\n" : '';echo '<updated>' . $global_vars['FEED_UPDATED'] . '</updated>' . "\n\n";echo '<author><name><![CDATA[' . $global_vars['FEED_AUTHOR'] . ']]></name></author>' . "\n";echo '<id>' . $global_vars['SELF_LINK'] . '</id>' . "\n";foreach ($item_vars as $row){	echo '<entry>' . "\n";	if (!empty($row['author']))	{		echo '<author><name><![CDATA[' . $row['author'] . ']]></name></author>' . "\n";	}	echo '<updated>' . ((!empty($row['updated'])) ? $row['updated'] : $row['published']) . '</updated>' . "\n";	if (!empty($row['published']))	{		echo '<published>' . $row['published'] . '</published>' . "\n";	}	echo '<id>' . $row['link'] . '</id>' . "\n";	echo '<link href="' . $row['link'] . '"/>' . "\n";	echo '<title type="html"><![CDATA[' . $row['title'] . ']]></title>' . "\n\n";	if (!empty($row['category']) && isset($row['category_name']) && $row['category_name'] !== '')	{		echo '<category term="' . $row['category_name'] . '" scheme="' . $row['category'] . '" label="' . $row['category_name'] . '"/>' . "\n";	}	echo '<content type="html" xml:base="' . $row['link'] . '"><![CDATA[' . "\n";	echo $row['description'];	if (!empty($row['statistics']))	{		echo '<p>' . $user->lang['STATISTICS'] . ': ' . $row['statistics'] . '</p>';	}	echo '<hr />' . "\n" . ']]></content>' . "\n";	echo '</entry>' . "\n";}echo '</feed>';garbage_collection();exit_handler();/*** Run links through append_sid(), prepend generate_board_url() and remove session id**/function feed_append_sid($url, $params){	global $board_url;	return append_sid($board_url . $url, $params, true, '');}/*** Generate ISO 8601 date string (RFC 3339)**/function feed_format_date($time){	static $zone_offset;	static $offset_string;	if (empty($offset_string))	{		global $user;		$zone_offset = (int) $user->timezone + (int) $user->dst;		$sign = ($zone_offset < 0) ? '-' : '+';		$time_offset = abs($zone_offset);		$offset_seconds	= $time_offset % 3600;		$offset_minutes	= $offset_seconds / 60;		$offset_hours	= ($time_offset - $offset_seconds) / 3600;		$offset_string	= sprintf("%s%02d:%02d", $sign, $offset_hours, $offset_minutes);	}	return gmdate("Y-m-d\TH:i:s", $time + $zone_offset) . $offset_string;}/*** Generate text content**/function feed_generate_content($content, $uid, $bitfield, $options){	global $user, $config, $phpbb_root_path, $phpEx, $board_url;	if (empty($content))	{		return '';	}	// Prepare some bbcodes for better parsing	$content	= preg_replace("#\[quote(=&quot;.*?&quot;)?:$uid\]\s*(.*?)\s*\[/quote:$uid\]#si", "[quote$1:$uid]<br />$2<br />[/quote:$uid]", $content);	$content = generate_text_for_display($content, $uid, $bitfield, $options);	// Add newlines	$content = str_replace('<br />', '<br />' . "\n", $content);	// Convert smiley Relative paths to Absolute path, Windows style	$content = str_replace($phpbb_root_path . $config['smilies_path'], $board_url . '/' . $config['smilies_path'], $content);	// Remove "Select all" link and mouse events	$content = str_replace('<a href="#" onclick="selectCode(this); return false;">' . $user->lang['SELECT_ALL_CODE'] . '</a>', '', $content);	$content = preg_replace('#(onkeypress|onclick)="(.*?)"#si', '', $content);	// Firefox does not support CSS for feeds, though	// Remove font sizes//	$content = preg_replace('#<span style="font-size: [0-9]+%; line-height: [0-9]+%;">([^>]+)</span>#iU', '\1', $content);	// Make text strong :P//	$content = preg_replace('#<span style="font-weight: bold?">(.*?)</span>#iU', '<strong>\1</strong>', $content);	// Italic//	$content = preg_replace('#<span style="font-style: italic?">([^<]+)</span>#iU', '<em>\1</em>', $content);	// Underline//	$content = preg_replace('#<span style="text-decoration: underline?">([^<]+)</span>#iU', '<u>\1</u>', $content);	// Remove embed Windows Media Streams	$content	= preg_replace( '#<\!--\[if \!IE\]>-->([^[]+)<\!--<!\[endif\]-->#si', '', $content);	// Do not use &lt; and &gt;, because we want to retain code contained in [code][/code]	// Remove embed and objects	$content	= preg_replace( '#<(object|embed)(.*?) (value|src)=(.*?) ([^[]+)(object|embed)>#si',' <a href=$4 target="_blank"><strong>$1</strong></a> ',$content);	// Remove some specials html tag, because somewhere there are a mod to allow html tags ;)	$content	= preg_replace( '#<(script|iframe)([^[]+)\1>#siU', ' <strong>$1</strong> ', $content);	// Remove Comments from inline attachments [ia]	$content	= preg_replace('#<div class="(inline-attachment|attachtitle)">(.*?)<!-- ia(.*?) -->(.*?)<!-- ia(.*?) -->(.*?)</div>#si','$4',$content);	// Replace some entities with their unicode counterpart	$entities = array(		'&nbsp;'	=> "\xC2\xA0",		'&bull;'	=> "\xE2\x80\xA2",		'&middot;'	=> "\xC2\xB7",		'&copy;'	=> "\xC2\xA9",	);	$content = str_replace(array_keys($entities), array_values($entities), $content);	// Remove CDATA blocks. ;)	$content = preg_replace('#\<\!\[CDATA\[(.*?)\]\]\>#s', '', $content);	// Other control characters	$content = preg_replace('#(?:[\x00-\x1F\x7F]+|(?:\xC2[\x80-\x9F])+)#', '', $content);	return $content;}/*** Factory class to return correct object* @package phpBB3*/class phpbb_feed_factory{	/**	* Return correct object for specified mode	*	* @param string	$mode		The feeds mode.	* @param int	$forum_id	Forum id specified by the script if forum feed provided.	* @param int	$topic_id	Topic id specified by the script if topic feed provided.	*	* @return object	Returns correct feeds object for specified mode.	*/	function init($mode, $forum_id, $topic_id)	{		global $config;		switch ($mode)		{			case 'forums':				if (!$config['feed_overall_forums'])				{					return false;				}				return new phpbb_feed_forums();			break;			case 'topics':			case 'topics_new':				if (!$config['feed_topics_new'])				{					return false;				}				return new phpbb_feed_topics();			break;			case 'topics_active':				if (!$config['feed_topics_active'])				{					return false;				}				return new phpbb_feed_topics_active();			break;			case 'news':				global $db;				// Get at least one news forum				$sql = 'SELECT forum_id					FROM ' . FORUMS_TABLE . '					WHERE ' . $db->sql_bit_and('forum_options', FORUM_OPTION_FEED_NEWS, '<> 0');				$result = $db->sql_query_limit($sql, 1, 0, 600);				$s_feed_news = (int) $db->sql_fetchfield('forum_id');				$db->sql_freeresult($result);				if (!$s_feed_news)				{					return false;				}				return new phpbb_feed_news();			break;			default:				if ($topic_id && $config['feed_topic'])				{					return new phpbb_feed_topic($topic_id);				}				else if ($forum_id && $config['feed_forum'])				{					return new phpbb_feed_forum($forum_id);				}				else if ($config['feed_overall'])				{					return new phpbb_feed_overall();				}				return false;			break;		}	}}/*** Base class with some generic functions and settings.** @package phpBB3*/class phpbb_feed_base{	/**	* SQL Query to be executed to get feed items	*/	var $sql = array();	/**	* Keys specified for retrieval of title, content, etc.	*/	var $keys = array();	/**	* Number of items to fetch. Usually overwritten by $config['feed_something']	*/	var $num_items = 15;	/**	* Separator for title elements to separate items (for example forum / topic)	*/	var $separator = "\xE2\x80\xA2"; // &bull;	/**	* Separator for the statistics row (Posted by, post date, replies, etc.)	*/	var $separator_stats = "\xE2\x80\x94"; // &mdash;	/**	* Constructor	*/	function phpbb_feed_base()	{		global $config;		$this->set_keys();		// Allow num_items to be string		if (is_string($this->num_items))		{			$this->num_items = (int) $config[$this->num_items];			// A precaution			if (!$this->num_items)			{				$this->num_items = 10;			}		}	}	/**	* Set keys.	*/	function set_keys()	{	}	/**	* Open feed	*/	function open()	{	}	/**	* Close feed	*/	function close()	{		global $db;		if (!empty($this->result))		{			$db->sql_freeresult($this->result);		}	}	/**	* Set key	*/	function set($key, $value)	{		$this->keys[$key] = $value;	}	/**	* Get key	*/	function get($key)	{		return (isset($this->keys[$key])) ? $this->keys[$key] : NULL;	}	function get_readable_forums()	{		global $auth;		static $forum_ids;		if (!isset($forum_ids))		{			$forum_ids = array_keys($auth->acl_getf('f_read', true));		}		return $forum_ids;	}	function get_moderator_approve_forums()	{		global $auth;		static $forum_ids;		if (!isset($forum_ids))		{			$forum_ids = array_keys($auth->acl_getf('m_approve', true));		}		return $forum_ids;	}	function is_moderator_approve_forum($forum_id)	{		static $forum_ids;		if (!isset($forum_ids))		{			$forum_ids = array_flip($this->get_moderator_approve_forums());		}		if (!$forum_id)		{			// Global announcement, your a moderator in any forum than it's okay.			return (!empty($forum_ids)) ? true : false;		}		return (isset($forum_ids[$forum_id])) ? true : false;	}	function get_excluded_forums()	{		global $db, $cache;		static $forum_ids;		// Matches acp/acp_board.php		$cache_name	= 'feed_excluded_forum_ids';		if (!isset($forum_ids) && ($forum_ids = $cache->get('_' . $cache_name)) === false)		{			$sql = 'SELECT forum_id				FROM ' . FORUMS_TABLE . '				WHERE ' . $db->sql_bit_and('forum_options', FORUM_OPTION_FEED_EXCLUDE, '<> 0');			$result = $db->sql_query($sql);			$forum_ids = array();			while ($forum_id = (int) $db->sql_fetchfield('forum_id'))			{				$forum_ids[$forum_id] = $forum_id;			}			$db->sql_freeresult($result);			$cache->put('_' . $cache_name, $forum_ids);		}		return $forum_ids;	}	function is_excluded_forum($forum_id)	{		$forum_ids = $this->get_excluded_forums();		return isset($forum_ids[$forum_id]) ? true : false;	}	function get_passworded_forums()	{		global $user;		return $user->get_passworded_forums();	}	function get_item()	{		global $db, $cache;		static $result;		if (!isset($result))		{			if (!$this->get_sql())			{				return false;			}			// Query database			$sql = $db->sql_build_query('SELECT', $this->sql);			$result = $db->sql_query_limit($sql, $this->num_items);		}		return $db->sql_fetchrow($result);	}	function user_viewprofile($row)	{		global $phpEx, $user;		$author_id = (int) $row[$this->get('author_id')];		if ($author_id == ANONYMOUS)		{			// Since we cannot link to a profile, we just return GUEST			// instead of $row['username']			return $user->lang['GUEST'];		}		return '<a href="' . feed_append_sid('/memberlist.' . $phpEx, 'mode=viewprofile&amp;u=' . $author_id) . '">' . $row[$this->get('creator')] . '</a>';	}}/*** Abstract class for post based feeds** @package phpBB3*/class phpbb_feed_post_base extends phpbb_feed_base{	var $num_items = 'feed_limit_post';	function set_keys()	{		$this->set('title',		'post_subject');		$this->set('title2',	'topic_title');		$this->set('author_id',	'user_id');		$this->set('creator',	'username');		$this->set('published',	'post_time');		$this->set('updated',	'post_edit_time');		$this->set('text',		'post_text');		$this->set('bitfield',	'bbcode_bitfield');		$this->set('bbcode_uid','bbcode_uid');		$this->set('enable_bbcode',		'enable_bbcode');		$this->set('enable_smilies',	'enable_smilies');		$this->set('enable_magic_url',	'enable_magic_url');	}	function adjust_item(&$item_row, &$row)	{		global $phpEx, $config, $user;		$item_row['link'] = feed_append_sid('/viewtopic.' . $phpEx, "t={$row['topic_id']}&amp;p={$row['post_id']}#p{$row['post_id']}");		if ($config['feed_item_statistics'])		{			$item_row['statistics'] = $user->lang['POSTED'] . ' ' . $user->lang['POST_BY_AUTHOR'] . ' ' . $this->user_viewprofile($row)				. ' ' . $this->separator_stats . ' ' . $user->format_date($row[$this->get('published')])				. (($this->is_moderator_approve_forum($row['forum_id']) && !$row['post_approved']) ? ' ' . $this->separator_stats . ' ' . $user->lang['POST_UNAPPROVED'] : '');		}	}}/*** Abstract class for topic based feeds** @package phpBB3*/class phpbb_feed_topic_base extends phpbb_feed_base{	var $num_items = 'feed_limit_topic';	function set_keys()	{		$this->set('title',		'topic_title');		$this->set('title2',	'forum_name');		$this->set('author_id',	'topic_poster');		$this->set('creator',	'topic_first_poster_name');		$this->set('published',	'post_time');		$this->set('updated',	'post_edit_time');		$this->set('text',		'post_text');		$this->set('bitfield',	'bbcode_bitfield');		$this->set('bbcode_uid','bbcode_uid');		$this->set('enable_bbcode',		'enable_bbcode');		$this->set('enable_smilies',	'enable_smilies');		$this->set('enable_magic_url',	'enable_magic_url');	}	function adjust_item(&$item_row, &$row)	{		global $phpEx, $config, $user;		$item_row['link'] = feed_append_sid('/viewtopic.' . $phpEx, 't=' . $row['topic_id'] . '&amp;p=' . $row['post_id'] . '#p' . $row['post_id']);		if ($config['feed_item_statistics'])		{			$item_row['statistics'] = $user->lang['POSTED'] . ' ' . $user->lang['POST_BY_AUTHOR'] . ' ' . $this->user_viewprofile($row)				. ' ' . $this->separator_stats . ' ' . $user->format_date($row[$this->get('published')])				. ' ' . $this->separator_stats . ' ' . $user->lang['REPLIES'] . ' ' . (($this->is_moderator_approve_forum($row['forum_id'])) ? $row['topic_replies_real'] : $row['topic_replies'])				. ' ' . $this->separator_stats . ' ' . $user->lang['VIEWS'] . ' ' . $row['topic_views']				. (($this->is_moderator_approve_forum($row['forum_id']) && ($row['topic_replies_real'] != $row['topic_replies'])) ? ' ' . $this->separator_stats . ' ' . $user->lang['POSTS_UNAPPROVED'] : '');		}	}}/*** Board wide feed (aka overall feed)** This will give you the newest {$this->num_items} posts* from the whole board.** @package phpBB3*/class phpbb_feed_overall extends phpbb_feed_post_base{	function get_sql()	{		global $auth, $db;		$forum_ids = array_diff($this->get_readable_forums(), $this->get_excluded_forums(), $this->get_passworded_forums());		if (empty($forum_ids))		{			return false;		}		// Add global forum id		$forum_ids[] = 0;		// m_approve forums		$fid_m_approve = $this->get_moderator_approve_forums();		$sql_m_approve = (!empty($fid_m_approve)) ? 'OR ' . $db->sql_in_set('forum_id', $fid_m_approve) : '';		// Determine topics with recent activity		$sql = 'SELECT topic_id, topic_last_post_time			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('forum_id', $forum_ids) . '				AND topic_moved_id = 0				AND (topic_approved = 1					' . $sql_m_approve . ')			ORDER BY topic_last_post_time DESC';		$result = $db->sql_query_limit($sql, $this->num_items);		$topic_ids = array();		$min_post_time = 0;		while ($row = $db->sql_fetchrow())		{			$topic_ids[] = (int) $row['topic_id'];			$min_post_time = (int) $row['topic_last_post_time'];		}		$db->sql_freeresult($result);		if (empty($topic_ids))		{			return false;		}		// Get the actual data		$this->sql = array(			'SELECT'	=>	'f.forum_id, f.forum_name, ' .							'p.post_id, p.topic_id, p.post_time, p.post_edit_time, p.post_approved, p.post_subject, p.post_text, p.bbcode_bitfield, p.bbcode_uid, p.enable_bbcode, p.enable_smilies, p.enable_magic_url, ' .							'u.username, u.user_id',			'FROM'		=> array(				USERS_TABLE		=> 'u',				POSTS_TABLE		=> 'p',			),			'LEFT_JOIN'	=> array(				array(					'FROM'	=> array(FORUMS_TABLE	=> 'f'),					'ON'	=> 'f.forum_id = p.forum_id',				),			),			'WHERE'		=> $db->sql_in_set('p.topic_id', $topic_ids) . '							AND (p.post_approved = 1								' . str_replace('forum_id', 'p.forum_id', $sql_m_approve) . ')							AND p.post_time >= ' . $min_post_time . '							AND u.user_id = p.poster_id',			'ORDER_BY'	=> 'p.post_time DESC',		);		return true;	}	function adjust_item(&$item_row, &$row)	{		parent::adjust_item($item_row, $row);		$item_row['title'] = (isset($row['forum_name']) && $row['forum_name'] !== '') ? $row['forum_name'] . ' ' . $this->separator . ' ' . $item_row['title'] : $item_row['title'];	}}/*** Forum feed** This will give you the last {$this->num_items} posts made* within a specific forum.** @package phpBB3*/class phpbb_feed_forum extends phpbb_feed_post_base{	var $forum_id		= 0;	var $forum_data		= array();	function phpbb_feed_forum($forum_id)	{		parent::phpbb_feed_base();		$this->forum_id = (int) $forum_id;	}	function open()	{		global $db, $auth;		// Check if forum exists		$sql = 'SELECT forum_id, forum_name, forum_password, forum_type, forum_options			FROM ' . FORUMS_TABLE . '			WHERE forum_id = ' . $this->forum_id;		$result = $db->sql_query($sql);		$this->forum_data = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (empty($this->forum_data))		{			trigger_error('NO_FORUM');		}		// Forum needs to be postable		if ($this->forum_data['forum_type'] != FORUM_POST)		{			trigger_error('NO_FEED');		}		// Make sure forum is not excluded from feed		if (phpbb_optionget(FORUM_OPTION_FEED_EXCLUDE, $this->forum_data['forum_options']))		{			trigger_error('NO_FEED');		}		// Make sure we can read this forum		if (!$auth->acl_get('f_read', $this->forum_id))		{			trigger_error('SORRY_AUTH_READ');		}		// Make sure forum is not passworded or user is authed		if ($this->forum_data['forum_password'])		{			$forum_ids_passworded = $this->get_passworded_forums();			if (isset($forum_ids_passworded[$this->forum_id]))			{				trigger_error('SORRY_AUTH_READ');			}			unset($forum_ids_passworded);		}	}	function get_sql()	{		global $auth, $db;		$m_approve = ($auth->acl_get('m_approve', $this->forum_id)) ? true : false;		$forum_ids = array(0, $this->forum_id);		// Determine topics with recent activity		$sql = 'SELECT topic_id, topic_last_post_time			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('forum_id', $forum_ids) . '				AND topic_moved_id = 0				' . ((!$m_approve) ? 'AND topic_approved = 1' : '') . '			ORDER BY topic_last_post_time DESC';		$result = $db->sql_query_limit($sql, $this->num_items);		$topic_ids = array();		$min_post_time = 0;		while ($row = $db->sql_fetchrow())		{			$topic_ids[] = (int) $row['topic_id'];			$min_post_time = (int) $row['topic_last_post_time'];		}		$db->sql_freeresult($result);		if (empty($topic_ids))		{			return false;		}		$this->sql = array(			'SELECT'	=>	'p.post_id, p.topic_id, p.post_time, p.post_edit_time, p.post_approved, p.post_subject, p.post_text, p.bbcode_bitfield, p.bbcode_uid, p.enable_bbcode, p.enable_smilies, p.enable_magic_url, ' .							'u.username, u.user_id',			'FROM'		=> array(				POSTS_TABLE		=> 'p',				USERS_TABLE		=> 'u',			),			'WHERE'		=> $db->sql_in_set('p.topic_id', $topic_ids) . '							' . ((!$m_approve) ? 'AND p.post_approved = 1' : '') . '							AND p.post_time >= ' . $min_post_time . '							AND p.poster_id = u.user_id',			'ORDER_BY'	=> 'p.post_time DESC',		);		return true;	}	function adjust_item(&$item_row, &$row)	{		parent::adjust_item($item_row, $row);		$item_row['title'] = (isset($row['forum_name']) && $row['forum_name'] !== '') ? $row['forum_name'] . ' ' . $this->separator . ' ' . $item_row['title'] : $item_row['title'];	}	function get_item()	{		return ($row = parent::get_item()) ? array_merge($this->forum_data, $row) : $row;	}}/*** Topic feed for a specific topic** This will give you the last {$this->num_items} posts made within this topic.** @package phpBB3*/class phpbb_feed_topic extends phpbb_feed_post_base{	var $topic_id		= 0;	var $forum_id		= 0;	var $topic_data		= array();	function phpbb_feed_topic($topic_id)	{		parent::phpbb_feed_base();		$this->topic_id = (int) $topic_id;	}	function open()	{		global $auth, $db, $user;		$sql = 'SELECT f.forum_options, f.forum_password, t.topic_id, t.forum_id, t.topic_approved, t.topic_title, t.topic_time, t.topic_views, t.topic_replies, t.topic_type			FROM ' . TOPICS_TABLE . ' t			LEFT JOIN ' . FORUMS_TABLE . ' f				ON (f.forum_id = t.forum_id)			WHERE t.topic_id = ' . $this->topic_id;		$result = $db->sql_query($sql);		$this->topic_data = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (empty($this->topic_data))		{			trigger_error('NO_TOPIC');		}		if ($this->topic_data['topic_type'] == POST_GLOBAL)		{			// We need to find at least one postable forum where feeds are enabled,			// that the user can read and maybe also has approve permissions.			$in_fid_ary = $this->get_readable_forums();			if (empty($in_fid_ary))			{				// User cannot read any forums				trigger_error('SORRY_AUTH_READ');			}			if (!$this->topic_data['topic_approved'])			{				// Also require m_approve				$in_fid_ary = array_intersect($in_fid_ary, $this->get_moderator_approve_forums());				if (empty($in_fid_ary))				{					trigger_error('SORRY_AUTH_READ');				}			}			// Diff excluded forums			$in_fid_ary = array_diff($in_fid_ary, $this->get_excluded_forums());			if (empty($in_fid_ary))			{				trigger_error('SORRY_AUTH_READ');			}			// Also exclude passworded forums			$in_fid_ary = array_diff($in_fid_ary, $this->get_passworded_forums());			if (empty($in_fid_ary))			{				trigger_error('SORRY_AUTH_READ');			}			$sql = 'SELECT forum_id, left_id				FROM ' . FORUMS_TABLE . '				WHERE forum_type = ' . FORUM_POST . '					AND ' . $db->sql_in_set('forum_id', $in_fid_ary) . '				ORDER BY left_id ASC';			$result = $db->sql_query_limit($sql, 1);			$this->forum_data = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (empty($this->forum_data))			{				// No forum found.				trigger_error('SORRY_AUTH_READ');			}			unset($in_fid_ary);		}		else		{			$this->forum_id = (int) $this->topic_data['forum_id'];			// Make sure topic is either approved or user authed			if (!$this->topic_data['topic_approved'] && !$auth->acl_get('m_approve', $this->forum_id))			{				trigger_error('SORRY_AUTH_READ');			}			// Make sure forum is not excluded from feed			if (phpbb_optionget(FORUM_OPTION_FEED_EXCLUDE, $this->topic_data['forum_options']))			{				trigger_error('NO_FEED');			}			// Make sure we can read this forum			if (!$auth->acl_get('f_read', $this->forum_id))			{				trigger_error('SORRY_AUTH_READ');			}			// Make sure forum is not passworded or user is authed			if ($this->topic_data['forum_password'])			{				$forum_ids_passworded = $this->get_passworded_forums();				if (isset($forum_ids_passworded[$this->forum_id]))				{					trigger_error('SORRY_AUTH_READ');				}				unset($forum_ids_passworded);			}		}	}	function get_sql()	{		global $auth, $db;		$this->sql = array(			'SELECT'	=>	'p.post_id, p.post_time, p.post_edit_time, p.post_approved, p.post_subject, p.post_text, p.bbcode_bitfield, p.bbcode_uid, p.enable_bbcode, p.enable_smilies, p.enable_magic_url, ' .							'u.username, u.user_id',			'FROM'		=> array(				POSTS_TABLE		=> 'p',				USERS_TABLE		=> 'u',			),			'WHERE'		=> 'p.topic_id = ' . $this->topic_id . '								' . ($this->forum_id && !$auth->acl_get('m_approve', $this->forum_id) ? 'AND p.post_approved = 1' : '') . '								AND p.poster_id = u.user_id',			'ORDER_BY'	=> 'p.post_time DESC',		);		return true;	}	function get_item()	{		return ($row = parent::get_item()) ? array_merge($this->topic_data, $row) : $row;	}}/*** 'All Forums' feed** This will give you a list of all postable forums where feeds are enabled* including forum description, topic stats and post stats** @package phpBB3*/class phpbb_feed_forums extends phpbb_feed_base{	var $num_items	= 0;	function set_keys()	{		$this->set('title',		'forum_name');		$this->set('text',		'forum_desc');		$this->set('bitfield',	'forum_desc_bitfield');		$this->set('bbcode_uid','forum_desc_uid');		$this->set('updated',	'forum_last_post_time');		$this->set('options',	'forum_desc_options');	}	function get_sql()	{		global $auth, $db;		$in_fid_ary = array_diff($this->get_readable_forums(), $this->get_excluded_forums());		if (empty($in_fid_ary))		{			return false;		}		// Build SQL Query		$this->sql = array(			'SELECT'	=> 'f.forum_id, f.left_id, f.forum_name, f.forum_last_post_time,							f.forum_desc, f.forum_desc_bitfield, f.forum_desc_uid, f.forum_desc_options,							f.forum_topics, f.forum_posts',			'FROM'		=> array(FORUMS_TABLE => 'f'),			'WHERE'		=> 'f.forum_type = ' . FORUM_POST . '							AND ' . $db->sql_in_set('f.forum_id', $in_fid_ary),			'ORDER_BY'	=> 'f.left_id ASC',		);		return true;	}	function adjust_item(&$item_row, &$row)	{		global $phpEx, $config;		$item_row['link'] = feed_append_sid('/viewforum.' . $phpEx, 'f=' . $row['forum_id']);		if ($config['feed_item_statistics'])		{			global $user;			$item_row['statistics'] = sprintf($user->lang['TOTAL_TOPICS_OTHER'], $row['forum_topics'])				. ' ' . $this->separator_stats . ' ' . sprintf($user->lang['TOTAL_POSTS_OTHER'], $row['forum_posts']);		}	}}/*** News feed** This will give you {$this->num_items} first posts* of all topics in the selected news forums.** @package phpBB3*/class phpbb_feed_news extends phpbb_feed_topic_base{	function get_news_forums()	{		global $db, $cache;		static $forum_ids;		// Matches acp/acp_board.php		$cache_name	= 'feed_news_forum_ids';		if (!isset($forum_ids) && ($forum_ids = $cache->get('_' . $cache_name)) === false)		{			$sql = 'SELECT forum_id				FROM ' . FORUMS_TABLE . '				WHERE ' . $db->sql_bit_and('forum_options', FORUM_OPTION_FEED_NEWS, '<> 0');			$result = $db->sql_query($sql);			$forum_ids = array();			while ($forum_id = (int) $db->sql_fetchfield('forum_id'))			{				$forum_ids[$forum_id] = $forum_id;			}			$db->sql_freeresult($result);			$cache->put('_' . $cache_name, $forum_ids);		}		return $forum_ids;	}	function get_sql()	{		global $auth, $config, $db;		// Determine forum ids		$in_fid_ary = array_intersect($this->get_news_forums(), $this->get_readable_forums());		if (empty($in_fid_ary))		{			return false;		}		$in_fid_ary = array_diff($in_fid_ary, $this->get_passworded_forums());		if (empty($in_fid_ary))		{			return false;		}		// Add global forum		$in_fid_ary[] = 0;		// We really have to get the post ids first!		$sql = 'SELECT topic_first_post_id, topic_time			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('forum_id', $in_fid_ary) . '				AND topic_moved_id = 0				AND topic_approved = 1			ORDER BY topic_time DESC';		$result = $db->sql_query_limit($sql, $this->num_items);		$post_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$post_ids[] = (int) $row['topic_first_post_id'];		}		$db->sql_freeresult($result);		if (empty($post_ids))		{			return false;		}		$this->sql = array(			'SELECT'	=> 'f.forum_id, f.forum_name,							t.topic_id, t.topic_title, t.topic_poster, t.topic_first_poster_name, t.topic_replies, t.topic_replies_real, t.topic_views, t.topic_time, t.topic_last_post_time,							p.post_id, p.post_time, p.post_edit_time, p.post_text, p.bbcode_bitfield, p.bbcode_uid, p.enable_bbcode, p.enable_smilies, p.enable_magic_url',			'FROM'		=> array(				TOPICS_TABLE	=> 't',				POSTS_TABLE		=> 'p',			),			'LEFT_JOIN'	=> array(				array(					'FROM'	=> array(FORUMS_TABLE => 'f'),					'ON'	=> 'p.forum_id = f.forum_id',				),			),			'WHERE'		=> 'p.topic_id = t.topic_id							AND ' . $db->sql_in_set('p.post_id', $post_ids),			'ORDER_BY'	=> 'p.post_time DESC',		);		return true;	}}/*** New Topics feed** This will give you the last {$this->num_items} created topics* including the first post.** @package phpBB3*/class phpbb_feed_topics extends phpbb_feed_topic_base{	function get_sql()	{		global $db, $config;		$forum_ids_read = $this->get_readable_forums();		if (empty($forum_ids_read))		{			return false;		}		$in_fid_ary = array_diff($forum_ids_read, $this->get_excluded_forums(), $this->get_passworded_forums());		if (empty($in_fid_ary))		{			return false;		}		// Add global forum		$in_fid_ary[] = 0;		// We really have to get the post ids first!		$sql = 'SELECT topic_first_post_id, topic_time			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('forum_id', $in_fid_ary) . '				AND topic_moved_id = 0				AND topic_approved = 1			ORDER BY topic_time DESC';		$result = $db->sql_query_limit($sql, $this->num_items);		$post_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$post_ids[] = (int) $row['topic_first_post_id'];		}		$db->sql_freeresult($result);		if (empty($post_ids))		{			return false;		}		$this->sql = array(			'SELECT'	=> 'f.forum_id, f.forum_name,							t.topic_id, t.topic_title, t.topic_poster, t.topic_first_poster_name, t.topic_replies, t.topic_replies_real, t.topic_views, t.topic_time, t.topic_last_post_time,							p.post_id, p.post_time, p.post_edit_time, p.post_text, p.bbcode_bitfield, p.bbcode_uid, p.enable_bbcode, p.enable_smilies, p.enable_magic_url',			'FROM'		=> array(				TOPICS_TABLE	=> 't',				POSTS_TABLE		=> 'p',			),			'LEFT_JOIN'	=> array(				array(					'FROM'	=> array(FORUMS_TABLE => 'f'),					'ON'	=> 'p.forum_id = f.forum_id',				),			),			'WHERE'		=> 'p.topic_id = t.topic_id							AND ' . $db->sql_in_set('p.post_id', $post_ids),			'ORDER_BY'	=> 'p.post_time DESC',		);		return true;	}	function adjust_item(&$item_row, &$row)	{		parent::adjust_item($item_row, $row);		$item_row['title'] = (isset($row['forum_name']) && $row['forum_name'] !== '') ? $row['forum_name'] . ' ' . $this->separator . ' ' . $item_row['title'] : $item_row['title'];	}}/*** Active Topics feed** This will give you the last {$this->num_items} topics* with replies made withing the last {$this->sort_days} days* including the last post.** @package phpBB3*/class phpbb_feed_topics_active extends phpbb_feed_topic_base{	var $sort_days = 7;	function set_keys()	{		parent::set_keys();		$this->set('author_id',	'topic_last_poster_id');		$this->set('creator',	'topic_last_poster_name');	}	function get_sql()	{		global $db, $config;		$forum_ids_read = $this->get_readable_forums();		if (empty($forum_ids_read))		{			return false;		}		$in_fid_ary = array_intersect($forum_ids_read, $this->get_forum_ids());		$in_fid_ary = array_diff($in_fid_ary, $this->get_passworded_forums());		if (empty($in_fid_ary))		{			return false;		}		// Add global forum		$in_fid_ary[] = 0;		// Search for topics in last X days		$last_post_time_sql = ($this->sort_days) ? ' AND topic_last_post_time > ' . (time() - ($this->sort_days * 24 * 3600)) : '';		// We really have to get the post ids first!		$sql = 'SELECT topic_last_post_id, topic_last_post_time			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('forum_id', $in_fid_ary) . '				AND topic_moved_id = 0				AND topic_approved = 1				' . $last_post_time_sql . '			ORDER BY topic_last_post_time DESC';		$result = $db->sql_query_limit($sql, $this->num_items);		$post_ids = array();		while ($row = $db->sql_fetchrow($result))		{			$post_ids[] = (int) $row['topic_last_post_id'];		}		$db->sql_freeresult($result);		if (empty($post_ids))		{			return false;		}		$this->sql = array(			'SELECT'	=> 'f.forum_id, f.forum_name,							t.topic_id, t.topic_title, t.topic_replies, t.topic_replies_real, t.topic_views,							t.topic_last_poster_id, t.topic_last_poster_name, t.topic_last_post_time,							p.post_id, p.post_time, p.post_edit_time, p.post_text, p.bbcode_bitfield, p.bbcode_uid, p.enable_bbcode, p.enable_smilies, p.enable_magic_url',			'FROM'		=> array(				TOPICS_TABLE	=> 't',				POSTS_TABLE		=> 'p',			),			'LEFT_JOIN'	=> array(				array(					'FROM'	=> array(FORUMS_TABLE => 'f'),					'ON'	=> 'p.forum_id = f.forum_id',				),			),			'WHERE'		=> 'p.topic_id = t.topic_id							AND ' . $db->sql_in_set('p.post_id', $post_ids),			'ORDER_BY'	=> 'p.post_time DESC',		);		return true;	}	function get_forum_ids()	{		global $db, $cache;		static $forum_ids;		$cache_name	= 'feed_topic_active_forum_ids';		if (!isset($forum_ids) && ($forum_ids = $cache->get('_' . $cache_name)) === false)		{			$sql = 'SELECT forum_id				FROM ' . FORUMS_TABLE . '				WHERE forum_type = ' . FORUM_POST . '					AND ' . $db->sql_bit_and('forum_options', FORUM_OPTION_FEED_EXCLUDE, '= 0') . '					AND ' . $db->sql_bit_and('forum_flags', log(FORUM_FLAG_ACTIVE_TOPICS, 2), '<> 0');			$result = $db->sql_query($sql);			$forum_ids = array();			while ($forum_id = (int) $db->sql_fetchfield('forum_id'))			{				$forum_ids[$forum_id] = $forum_id;			}			$db->sql_freeresult($result);			$cache->put('_' . $cache_name, $forum_ids, 180);		}		return $forum_ids;	}	function adjust_item(&$item_row, &$row)	{		parent::adjust_item($item_row, $row);		$item_row['title'] = (isset($row['forum_name']) && $row['forum_name'] !== '') ? $row['forum_name'] . ' ' . $this->separator . ' ' . $item_row['title'] : $item_row['title'];	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ucp_register* Board registration* @package ucp*/class ucp_register{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $phpbb_root_path, $phpEx;		//		if ($config['require_activation'] == USER_ACTIVATION_DISABLE)		{			trigger_error('UCP_REGISTER_DISABLE');		}		include($phpbb_root_path . 'includes/functions_profile_fields.' . $phpEx);		$coppa			= (isset($_REQUEST['coppa'])) ? ((!empty($_REQUEST['coppa'])) ? 1 : 0) : false;		$agreed			= (!empty($_POST['agreed'])) ? 1 : 0;		$submit			= (isset($_POST['submit'])) ? true : false;		$change_lang	= request_var('change_lang', '');		$user_lang		= request_var('lang', $user->lang_name);		if ($agreed)		{			add_form_key('ucp_register');		}		else		{			add_form_key('ucp_register_terms');		}		if ($change_lang || $user_lang != $config['default_lang'])		{			$use_lang = ($change_lang) ? basename($change_lang) : basename($user_lang);			if (!validate_language_iso_name($use_lang))			{				if ($change_lang)				{					$submit = false;					// Setting back agreed to let the user view the agreement in his/her language					$agreed = (empty($_GET['change_lang'])) ? 0 : $agreed;				}				$user->lang_name = $user_lang = $use_lang;				$user->lang = array();				$user->data['user_lang'] = $user->lang_name;				$user->add_lang(array('common', 'ucp'));			}			else			{				$change_lang = '';				$user_lang = $user->lang_name;			}		}		$cp = new custom_profile();		$error = $cp_data = $cp_error = array();		if (!$agreed || ($coppa === false && $config['coppa_enable']) || ($coppa && !$config['coppa_enable']))		{			$add_lang = ($change_lang) ? '&amp;change_lang=' . urlencode($change_lang) : '';			$add_coppa = ($coppa !== false) ? '&amp;coppa=' . $coppa : '';			$s_hidden_fields = array(				'change_lang'	=> $change_lang,			);			// If we change the language, we want to pass on some more possible parameter.			if ($change_lang)			{				// We do not include the password				$s_hidden_fields = array_merge($s_hidden_fields, array(					'username'			=> utf8_normalize_nfc(request_var('username', '', true)),					'email'				=> strtolower(request_var('email', '')),					'email_confirm'		=> strtolower(request_var('email_confirm', '')),					'lang'				=> $user->lang_name,					'tz'				=> request_var('tz', (float) $config['board_timezone']),				));			}			// Checking amount of available languages			$sql = 'SELECT lang_id				FROM ' . LANG_TABLE;			$result = $db->sql_query($sql);			$lang_row = array();			while ($row = $db->sql_fetchrow($result))			{				$lang_row[] = $row;			}			$db->sql_freeresult($result);			if ($coppa === false && $config['coppa_enable'])			{				$now = getdate();				$coppa_birthday = $user->format_date(mktime($now['hours'] + $user->data['user_dst'], $now['minutes'], $now['seconds'], $now['mon'], $now['mday'] - 1, $now['year'] - 13), $user->lang['DATE_FORMAT']);				unset($now);				$template->assign_vars(array(					'S_LANG_OPTIONS'	=> (sizeof($lang_row) > 1) ? language_select($user_lang) : '',					'L_COPPA_NO'		=> sprintf($user->lang['UCP_COPPA_BEFORE'], $coppa_birthday),					'L_COPPA_YES'		=> sprintf($user->lang['UCP_COPPA_ON_AFTER'], $coppa_birthday),					'U_COPPA_NO'		=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=register&amp;coppa=0' . $add_lang),					'U_COPPA_YES'		=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=register&amp;coppa=1' . $add_lang),					'S_SHOW_COPPA'		=> true,					'S_HIDDEN_FIELDS'	=> build_hidden_fields($s_hidden_fields),					'S_UCP_ACTION'		=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=register' . $add_lang),				));			}			else			{				$template->assign_vars(array(					'S_LANG_OPTIONS'	=> (sizeof($lang_row) > 1) ? language_select($user_lang) : '',					'L_TERMS_OF_USE'	=> sprintf($user->lang['TERMS_OF_USE_CONTENT'], $config['sitename'], generate_board_url()),					'S_SHOW_COPPA'		=> false,					'S_REGISTRATION'	=> true,					'S_HIDDEN_FIELDS'	=> build_hidden_fields($s_hidden_fields),					'S_UCP_ACTION'		=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=register' . $add_lang . $add_coppa),					)				);			}			unset($lang_row);			$this->tpl_name = 'ucp_agreement';			return;		}		// The CAPTCHA kicks in here. We can't help that the information gets lost on language change. 		if ($config['enable_confirm'])		{			include($phpbb_root_path . 'includes/captcha/captcha_factory.' . $phpEx);			$captcha =& phpbb_captcha_factory::get_instance($config['captcha_plugin']);			$captcha->init(CONFIRM_REG);		}		// Try to manually determine the timezone and adjust the dst if the server date/time complies with the default setting +/- 1		$timezone = date('Z') / 3600;		$is_dst = date('I');		if ($config['board_timezone'] == $timezone || $config['board_timezone'] == ($timezone - 1))		{			$timezone = ($is_dst) ? $timezone - 1 : $timezone;			if (!isset($user->lang['tz_zones'][(string) $timezone]))			{				$timezone = $config['board_timezone'];			}		}		else		{			$is_dst = $config['board_dst'];			$timezone = $config['board_timezone'];		}		$data = array(			'username'			=> utf8_normalize_nfc(request_var('username', '', true)),			'new_password'		=> request_var('new_password', '', true),			'password_confirm'	=> request_var('password_confirm', '', true),			'email'				=> strtolower(request_var('email', '')),			'email_confirm'		=> strtolower(request_var('email_confirm', '')),			'lang'				=> basename(request_var('lang', $user->lang_name)),			'tz'				=> request_var('tz', (float) $timezone),		);		// Check and initialize some variables if needed		if ($submit)		{			$error = validate_data($data, array(				'username'			=> array(					array('string', false, $config['min_name_chars'], $config['max_name_chars']),					array('username', '')),				'new_password'		=> array(					array('string', false, $config['min_pass_chars'], $config['max_pass_chars']),					array('password')),				'password_confirm'	=> array('string', false, $config['min_pass_chars'], $config['max_pass_chars']),				'email'				=> array(					array('string', false, 6, 60),					array('email')),				'email_confirm'		=> array('string', false, 6, 60),				'tz'				=> array('num', false, -14, 14),				'lang'				=> array('language_iso_name'),			));			if (!check_form_key('ucp_register'))			{				$error[] = $user->lang['FORM_INVALID'];			}			// Replace "error" strings with their real, localised form			$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);			if ($config['enable_confirm'])			{				$vc_response = $captcha->validate($data);				if ($vc_response !== false)				{					$error[] = $vc_response;				}				if ($config['max_reg_attempts'] && $captcha->get_attempt_count() > $config['max_reg_attempts'])				{					$error[] = $user->lang['TOO_MANY_REGISTERS'];				}			}			// DNSBL check			if ($config['check_dnsbl'])			{				if (($dnsbl = $user->check_dnsbl('register')) !== false)				{					$error[] = sprintf($user->lang['IP_BLACKLISTED'], $user->ip, $dnsbl[1]);				}			}			// validate custom profile fields			$cp->submit_cp_field('register', $user->get_iso_lang_id(), $cp_data, $error);			if (!sizeof($error))			{				if ($data['new_password'] != $data['password_confirm'])				{					$error[] = $user->lang['NEW_PASSWORD_ERROR'];				}				if ($data['email'] != $data['email_confirm'])				{					$error[] = $user->lang['NEW_EMAIL_ERROR'];				}			}			if (!sizeof($error))			{				$server_url = generate_board_url();				// Which group by default?				$group_name = ($coppa) ? 'REGISTERED_COPPA' : 'REGISTERED';				$sql = 'SELECT group_id					FROM ' . GROUPS_TABLE . "					WHERE group_name = '" . $db->sql_escape($group_name) . "'						AND group_type = " . GROUP_SPECIAL;				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					trigger_error('NO_GROUP');				}				$group_id = $row['group_id'];				if (($coppa ||					$config['require_activation'] == USER_ACTIVATION_SELF ||					$config['require_activation'] == USER_ACTIVATION_ADMIN) && $config['email_enable'])				{					$user_actkey = gen_rand_string(mt_rand(6, 10));					$user_type = USER_INACTIVE;					$user_inactive_reason = INACTIVE_REGISTER;					$user_inactive_time = time();				}				else				{					$user_type = USER_NORMAL;					$user_actkey = '';					$user_inactive_reason = 0;					$user_inactive_time = 0;				}				$user_row = array(					'username'				=> $data['username'],					'user_password'			=> phpbb_hash($data['new_password']),					'user_email'			=> $data['email'],					'group_id'				=> (int) $group_id,					'user_timezone'			=> (float) $data['tz'],					'user_dst'				=> $is_dst,					'user_lang'				=> $data['lang'],					'user_type'				=> $user_type,					'user_actkey'			=> $user_actkey,					'user_ip'				=> $user->ip,					'user_regdate'			=> time(),					'user_inactive_reason'	=> $user_inactive_reason,					'user_inactive_time'	=> $user_inactive_time,				);				if ($config['new_member_post_limit'])				{					$user_row['user_new'] = 1;				}				// Register user...				$user_id = user_add($user_row, $cp_data);				// This should not happen, because the required variables are listed above...				if ($user_id === false)				{					trigger_error('NO_USER', E_USER_ERROR);				}				// Okay, captcha, your job is done.				if ($config['enable_confirm'] && isset($captcha))				{					$captcha->reset();				}				if ($coppa && $config['email_enable'])				{					$message = $user->lang['ACCOUNT_COPPA'];					$email_template = 'coppa_welcome_inactive';				}				else if ($config['require_activation'] == USER_ACTIVATION_SELF && $config['email_enable'])				{					$message = $user->lang['ACCOUNT_INACTIVE'];					$email_template = 'user_welcome_inactive';				}				else if ($config['require_activation'] == USER_ACTIVATION_ADMIN && $config['email_enable'])				{					$message = $user->lang['ACCOUNT_INACTIVE_ADMIN'];					$email_template = 'admin_welcome_inactive';				}				else				{					$message = $user->lang['ACCOUNT_ADDED'];					$email_template = 'user_welcome';				}				if ($config['email_enable'])				{					include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);					$messenger = new messenger(false);					$messenger->template($email_template, $data['lang']);					$messenger->to($data['email'], $data['username']);					$messenger->anti_abuse_headers($config, $user);					$messenger->assign_vars(array(						'WELCOME_MSG'	=> htmlspecialchars_decode(sprintf($user->lang['WELCOME_SUBJECT'], $config['sitename'])),						'USERNAME'		=> htmlspecialchars_decode($data['username']),						'PASSWORD'		=> htmlspecialchars_decode($data['new_password']),						'U_ACTIVATE'	=> "$server_url/ucp.$phpEx?mode=activate&u=$user_id&k=$user_actkey")					);					if ($coppa)					{						$messenger->assign_vars(array(							'FAX_INFO'		=> $config['coppa_fax'],							'MAIL_INFO'		=> $config['coppa_mail'],							'EMAIL_ADDRESS'	=> $data['email'])						);					}					$messenger->send(NOTIFY_EMAIL);					if ($config['require_activation'] == USER_ACTIVATION_ADMIN)					{						// Grab an array of user_id's with a_user permissions ... these users can activate a user						$admin_ary = $auth->acl_get_list(false, 'a_user', false);						$admin_ary = (!empty($admin_ary[0]['a_user'])) ? $admin_ary[0]['a_user'] : array();						// Also include founders						$where_sql = ' WHERE user_type = ' . USER_FOUNDER;						if (sizeof($admin_ary))						{							$where_sql .= ' OR ' . $db->sql_in_set('user_id', $admin_ary);						}						$sql = 'SELECT user_id, username, user_email, user_lang, user_jabber, user_notify_type							FROM ' . USERS_TABLE . ' ' .							$where_sql;						$result = $db->sql_query($sql);						while ($row = $db->sql_fetchrow($result))						{							$messenger->template('admin_activate', $row['user_lang']);							$messenger->to($row['user_email'], $row['username']);							$messenger->im($row['user_jabber'], $row['username']);							$messenger->assign_vars(array(								'USERNAME'			=> htmlspecialchars_decode($data['username']),								'U_USER_DETAILS'	=> "$server_url/memberlist.$phpEx?mode=viewprofile&u=$user_id",								'U_ACTIVATE'		=> "$server_url/ucp.$phpEx?mode=activate&u=$user_id&k=$user_actkey")							);							$messenger->send($row['user_notify_type']);						}						$db->sql_freeresult($result);					}				}				$message = $message . '<br /><br />' . sprintf($user->lang['RETURN_INDEX'], '<a href="' . append_sid("{$phpbb_root_path}index.$phpEx") . '">', '</a>');				trigger_error($message);			}		}		$s_hidden_fields = array(			'agreed'		=> 'true',			'change_lang'	=> 0,		);		if ($config['coppa_enable'])		{			$s_hidden_fields['coppa'] = $coppa;		}		if ($config['enable_confirm'])		{			$s_hidden_fields = array_merge($s_hidden_fields, $captcha->get_hidden_fields());		}		$s_hidden_fields = build_hidden_fields($s_hidden_fields);		$confirm_image = '';		// Visual Confirmation - Show images		if ($config['enable_confirm'])		{			$template->assign_vars(array(				'CAPTCHA_TEMPLATE'		=> $captcha->get_template(),			));		}		//		$l_reg_cond = '';		switch ($config['require_activation'])		{			case USER_ACTIVATION_SELF:				$l_reg_cond = $user->lang['UCP_EMAIL_ACTIVATE'];			break;			case USER_ACTIVATION_ADMIN:				$l_reg_cond = $user->lang['UCP_ADMIN_ACTIVATE'];			break;		}		$template->assign_vars(array(			'ERROR'				=> (sizeof($error)) ? implode('<br />', $error) : '',			'USERNAME'			=> $data['username'],			'PASSWORD'			=> $data['new_password'],			'PASSWORD_CONFIRM'	=> $data['password_confirm'],			'EMAIL'				=> $data['email'],			'EMAIL_CONFIRM'		=> $data['email_confirm'],			'L_REG_COND'				=> $l_reg_cond,			'L_USERNAME_EXPLAIN'		=> sprintf($user->lang[$config['allow_name_chars'] . '_EXPLAIN'], $config['min_name_chars'], $config['max_name_chars']),			'L_PASSWORD_EXPLAIN'		=> sprintf($user->lang[$config['pass_complex'] . '_EXPLAIN'], $config['min_pass_chars'], $config['max_pass_chars']),			'S_LANG_OPTIONS'	=> language_select($data['lang']),			'S_TZ_OPTIONS'		=> tz_select($data['tz']),			'S_CONFIRM_REFRESH'	=> ($config['enable_confirm'] && $config['confirm_refresh']) ? true : false,			'S_REGISTRATION'	=> true,			'S_COPPA'			=> $coppa,			'S_HIDDEN_FIELDS'	=> $s_hidden_fields,			'S_UCP_ACTION'		=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=register'),		));		//		$user->profile_fields = array();		// Generate profile fields -> Template Block Variable profile_fields		$cp->generate_profile_fields('register', $user->get_iso_lang_id());		//		$this->tpl_name = 'ucp_register';		$this->page_title = 'UCP_REGISTRATION';	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_ban{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $table_prefix;		include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		$bansubmit	= (isset($_POST['bansubmit'])) ? true : false;		$unbansubmit = (isset($_POST['unbansubmit'])) ? true : false;		$current_time = time();		$user->add_lang(array('acp/ban', 'acp/users'));		$this->tpl_name = 'acp_ban';		$form_key = 'acp_ban';		add_form_key($form_key);		if (($bansubmit || $unbansubmit) && !check_form_key($form_key))		{			trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action), E_USER_WARNING);		}		// Ban submitted?		if ($bansubmit)		{			// Grab the list of entries			$ban				= utf8_normalize_nfc(request_var('ban', '', true));			$ban_len			= request_var('banlength', 0);			$ban_len_other		= request_var('banlengthother', '');			$ban_exclude		= request_var('banexclude', 0);			$ban_reason			= utf8_normalize_nfc(request_var('banreason', '', true));			$ban_give_reason	= utf8_normalize_nfc(request_var('bangivereason', '', true));			if ($ban)			{				user_ban($mode, $ban, $ban_len, $ban_len_other, $ban_exclude, $ban_reason, $ban_give_reason);				trigger_error($user->lang['BAN_UPDATE_SUCCESSFUL'] . adm_back_link($this->u_action));			}		}		else if ($unbansubmit)		{			$ban = request_var('unban', array(''));			if ($ban)			{				user_unban($mode, $ban);				trigger_error($user->lang['BAN_UPDATE_SUCCESSFUL'] . adm_back_link($this->u_action));			}		}		// Define language vars		$this->page_title = $user->lang[strtoupper($mode) . '_BAN'];		$l_ban_explain = $user->lang[strtoupper($mode) . '_BAN_EXPLAIN'];		$l_ban_exclude_explain = $user->lang[strtoupper($mode) . '_BAN_EXCLUDE_EXPLAIN'];		$l_unban_title = $user->lang[strtoupper($mode) . '_UNBAN'];		$l_unban_explain = $user->lang[strtoupper($mode) . '_UNBAN_EXPLAIN'];		$l_no_ban_cell = $user->lang[strtoupper($mode) . '_NO_BANNED'];		switch ($mode)		{			case 'user':				$l_ban_cell = $user->lang['USERNAME'];			break;			case 'ip':				$l_ban_cell = $user->lang['IP_HOSTNAME'];			break;			case 'email':				$l_ban_cell = $user->lang['EMAIL_ADDRESS'];			break;		}		$this->display_ban_options($mode);		$template->assign_vars(array(			'L_TITLE'				=> $this->page_title,			'L_EXPLAIN'				=> $l_ban_explain,			'L_UNBAN_TITLE'			=> $l_unban_title,			'L_UNBAN_EXPLAIN'		=> $l_unban_explain,			'L_BAN_CELL'			=> $l_ban_cell,			'L_BAN_EXCLUDE_EXPLAIN'	=> $l_ban_exclude_explain,			'L_NO_BAN_CELL'			=> $l_no_ban_cell,			'S_USERNAME_BAN'	=> ($mode == 'user') ? true : false,						'U_ACTION'			=> $this->u_action,			'U_FIND_USERNAME'	=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=acp_ban&amp;field=ban'),		));	}	/**	* Display ban options	*/	function display_ban_options($mode)	{		global $user, $db, $template;		// Ban length options		$ban_end_text = array(0 => $user->lang['PERMANENT'], 30 => $user->lang['30_MINS'], 60 => $user->lang['1_HOUR'], 360 => $user->lang['6_HOURS'], 1440 => $user->lang['1_DAY'], 10080 => $user->lang['7_DAYS'], 20160 => $user->lang['2_WEEKS'], 40320 => $user->lang['1_MONTH'], -1 => $user->lang['UNTIL'] . ' -&gt; ');		$ban_end_options = '';		foreach ($ban_end_text as $length => $text)		{			$ban_end_options .= '<option value="' . $length . '">' . $text . '</option>';		}		switch ($mode)		{			case 'user':				$field = 'username';				$l_ban_cell = $user->lang['USERNAME'];				$sql = 'SELECT b.*, u.user_id, u.username, u.username_clean					FROM ' . BANLIST_TABLE . ' b, ' . USERS_TABLE . ' u					WHERE (b.ban_end >= ' . time() . '							OR b.ban_end = 0)						AND u.user_id = b.ban_userid					ORDER BY u.username_clean ASC';			break;			case 'ip':				$field = 'ban_ip';				$l_ban_cell = $user->lang['IP_HOSTNAME'];				$sql = 'SELECT *					FROM ' . BANLIST_TABLE . '					WHERE (ban_end >= ' . time() . "							OR ban_end = 0)						AND ban_ip <> ''					ORDER BY ban_ip";			break;			case 'email':				$field = 'ban_email';				$l_ban_cell = $user->lang['EMAIL_ADDRESS'];				$sql = 'SELECT *					FROM ' . BANLIST_TABLE . '					WHERE (ban_end >= ' . time() . "							OR ban_end = 0)						AND ban_email <> ''					ORDER BY ban_email";			break;		}		$result = $db->sql_query($sql);		$banned_options = $excluded_options = array();		$ban_length = $ban_reasons = $ban_give_reasons = array();		while ($row = $db->sql_fetchrow($result))		{			$option = '<option value="' . $row['ban_id'] . '">' . $row[$field] . '</option>';			if ($row['ban_exclude'])			{				$excluded_options[] = $option;			}			else			{				$banned_options[] = $option;			}			$time_length = ($row['ban_end']) ? ($row['ban_end'] - $row['ban_start']) / 60 : 0;			if ($time_length == 0)			{				// Banned permanently				$ban_length[$row['ban_id']] = $user->lang['PERMANENT'];			}			else if (isset($ban_end_text[$time_length]))			{				// Banned for a given duration				$ban_length[$row['ban_id']] = sprintf($user->lang['BANNED_UNTIL_DURATION'], $ban_end_text[$time_length], $user->format_date($row['ban_end'], false, true));			}			else			{				// Banned until given date				$ban_length[$row['ban_id']] = sprintf($user->lang['BANNED_UNTIL_DATE'], $user->format_date($row['ban_end'], false, true));			}			$ban_reasons[$row['ban_id']] = $row['ban_reason'];			$ban_give_reasons[$row['ban_id']] = $row['ban_give_reason'];		}		$db->sql_freeresult($result);		if (sizeof($ban_length))		{			foreach ($ban_length as $ban_id => $length)			{				$template->assign_block_vars('ban_length', array(					'BAN_ID'	=> (int) $ban_id,					'LENGTH'	=> $length,					'A_LENGTH'	=> addslashes($length),				));			}		}		if (sizeof($ban_reasons))		{			foreach ($ban_reasons as $ban_id => $reason)			{				$template->assign_block_vars('ban_reason', array(					'BAN_ID'	=> $ban_id,					'REASON'	=> $reason,					'A_REASON'	=> addslashes($reason),				));			}		}		if (sizeof($ban_give_reasons))		{			foreach ($ban_give_reasons as $ban_id => $reason)			{				$template->assign_block_vars('ban_give_reason', array(					'BAN_ID'	=> $ban_id,					'REASON'	=> $reason,					'A_REASON'	=> addslashes($reason),				));			}		}		$options = '';		if ($excluded_options)		{			$options .= '<optgroup label="' . $user->lang['OPTIONS_EXCLUDED'] . '">';			$options .= implode('', $excluded_options);			$options .= '</optgroup>';		}		if ($banned_options)		{			$options .= '<optgroup label="' . $user->lang['OPTIONS_BANNED'] . '">';			$options .= implode('', $banned_options);			$options .= '</optgroup>';		}		$template->assign_vars(array(			'S_BAN_END_OPTIONS'	=> $ban_end_options,			'S_BANNED_OPTIONS'	=> ($banned_options || $excluded_options) ? true : false,			'BANNED_OPTIONS'	=> $options,		));	}}?>
<?php/**** search_synonyms [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**/if (!defined('IN_PHPBB')){	exit;}$synonyms = array(	'abcense'			=> 'absence',	'abridgement'		=> 'abridgment',	'accomodate'		=> 'accommodate',	'acknowledgment'	=> 'acknowledgement',	'airplane'			=> 'aeroplane',	'allright'			=> 'alright ',	'andy'				=> 'andrew',	'anemia'			=> 'anaemia',	'anemic'			=> 'anaemic',	'anesthesia'		=> 'anaesthesia',	'apologize'			=> 'apologise',	'archean'			=> 'archaean',	'archeology'		=> 'archaeology',	'archeozoic'		=> 'archaeozoic',	'armor'				=> 'armour',	'artic'				=> 'arctic',	'attachment'		=> 'attachement',	'attendence'		=> 'attendance',	'barbecue'	=> 'barbeque',	'behavior'	=> 'behaviour',	'biassed'	=> 'biased',	'biol'		=> 'biology',	'buletin'	=> 'bulletin',	'calender'	=> 'calendar',	'canceled'	=> 'cancelled',	'car'		=> 'automobile',	'catalog'	=> 'catalogue',	'cenozoic'	=> 'caenozoic',	'center'	=> 'centre',	'check'		=> 'cheque',	'color'		=> 'colour',	'comission'	=> 'commission',	'comittee'	=> 'committee',	'commitee'	=> 'committee',	'conceed'	=> 'concede',	'creating'	=> 'createing',	'curiculum'	=> 'curriculum',	'defense'		=> 'defence',	'develope'		=> 'develop',	'discription'	=> 'description',	'dulness'		=> 'dullness',	'encyclopedia'	=> 'encyclopaedia',	'enroll'		=> 'enrol',	'esthetic'		=> 'aesthetic',	'etiology'		=> 'aetiology',	'exhorbitant'	=> 'exorbitant',	'exhuberant'	=> 'exuberant',	'existance'		=> 'existence',	'favorite'		=> 'favourite',	'fetus'			=> 'foetus',	'ficticious'	=> 'fictitious',	'flavor'		=> 'flavour',	'flourescent'	=> 'fluorescent',	'foriegn'		=> 'foreign',	'fourty'		=> 'forty',	'gage'			=> 'gauge',	'geneology'		=> 'genealogy',	'grammer'		=> 'grammar',	'gray'			=> 'grey',	'guerilla'		=> 'guerrilla',	'gynecology'	=> 'gynaecology',	'harbor'		=> 'harbour',	'heighth'		=> 'height',	'hemaglobin'	=> 'haemaglobin',	'hematin'		=> 'haematin',	'hematite'		=> 'haematite',	'hematology'	=> 'haematology',	'honor'			=> 'honour',	'innoculate'	=> 'inoculate',	'installment'	=> 'instalment',	'irrelevent'	=> 'irrelevant',	'irrevelant'	=> 'irrelevant',	'jeweler'	=> 'jeweller',	'judgment'	=> 'judgement',	'labeled'	=> 'labelled',	'labor'		=> 'labour',	'laborer'	=> 'labourer',	'laborers'	=> 'labourers',	'laboring'	=> 'labouring',	'licence'	=> 'license',	'liesure'	=> 'leisure',	'liquify'	=> 'liquefy',	'maintainance'	=> 'maintenance',	'maintenence'	=> 'maintenance',	'medieval'		=> 'mediaeval',	'meter'			=> 'metre',	'milage'		=> 'mileage',	'millipede'		=> 'millepede',	'miscelaneous'	=> 'miscellaneous',	'morgage'		=> 'mortgage',	'noticable'	=> 'noticeable',	'occurence'	=> 'occurrence',	'offense'	=> 'offence',	'ommision'	=> 'omission',	'ommission'	=> 'omission',	'optimize'	=> 'optimise',	'organize'	=> 'organise',	'pajamas'			=> 'pyjamas',	'paleography'		=> 'palaeography',	'paleolithic'		=> 'palaeolithic',	'paleontological'	=> 'palaeontological',	'paleontologist'	=> 'palaeontologist',	'paleontology'		=> 'palaeontology',	'paleozoic'			=> 'palaeozoic',	'pamplet'			=> 'pamphlet',	'paralell'			=> 'parallel',	'parl'				=> 'parliament',	'parlt'				=> 'parliament',	'pediatric'			=> 'paediatric',	'pediatrician'		=> 'paediatrician',	'pediatrics'		=> 'paediatrics',	'pedodontia'		=> 'paedodontia',	'pedodontics'		=> 'paedodontics',	'personel'			=> 'personnel',	'practise'			=> 'practice',	'program'			=> 'programme',	'psych'				=> 'psychology',	'questionaire'	=> 'questionnaire',	'rarify'		=> 'rarefy',	'reccomend'		=> 'recommend',	'recieve'		=> 'receive',	'resistence'	=> 'resistance',	'restaraunt'	=> 'restaurant',	'savior'			=> 'saviour',	'sep'				=> 'september',	'seperate'			=> 'separate',	'sept'				=> 'september',	'sieze'				=> 'seize',	'summarize'			=> 'summarise',	'summerize'			=> 'summarise',	'superceed'			=> 'supercede',	'superintendant'	=> 'superintendent',	'supersede'			=> 'supercede',	'suprise'			=> 'surprise',	'surprize'			=> 'surprise',	'synchronise'		=> 'synchronize',	'temperary'		=> 'temporary',	'theater'		=> 'theatre',	'threshhold'	=> 'threshold',	'transfered'	=> 'transferred',	'truely'		=> 'truly',	'truley'		=> 'truly',	'useable'	=> 'usable',	'valor'	=> 'valour',	'vigor'	=> 'vigour',	'vol'	=> 'volume',	'whack'		=> 'wack',	'withold'	=> 'withhold',	'yeild'	=> 'yield',);?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);include($phpbb_root_path . 'includes/functions_display.' . $phpEx);include($phpbb_root_path . 'includes/bbcode.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);// Initial var setup$forum_id	= request_var('f', 0);$topic_id	= request_var('t', 0);$post_id	= request_var('p', 0);$voted_id	= request_var('vote_id', array('' => 0));$voted_id = (sizeof($voted_id) > 1) ? array_unique($voted_id) : $voted_id;$start		= request_var('start', 0);$view		= request_var('view', '');$default_sort_days	= (!empty($user->data['user_post_show_days'])) ? $user->data['user_post_show_days'] : 0;$default_sort_key	= (!empty($user->data['user_post_sortby_type'])) ? $user->data['user_post_sortby_type'] : 't';$default_sort_dir	= (!empty($user->data['user_post_sortby_dir'])) ? $user->data['user_post_sortby_dir'] : 'a';$sort_days	= request_var('st', $default_sort_days);$sort_key	= request_var('sk', $default_sort_key);$sort_dir	= request_var('sd', $default_sort_dir);$update		= request_var('update', false);$s_can_vote = false;/*** @todo normalize?*/$hilit_words	= request_var('hilit', '', true);// Do we have a topic or post id?if (!$topic_id && !$post_id){	trigger_error('NO_TOPIC');}// Find topic id if user requested a newer or older topicif ($view && !$post_id){	if (!$forum_id)	{		$sql = 'SELECT forum_id			FROM ' . TOPICS_TABLE . "			WHERE topic_id = $topic_id";		$result = $db->sql_query($sql);		$forum_id = (int) $db->sql_fetchfield('forum_id');		$db->sql_freeresult($result);		if (!$forum_id)		{			trigger_error('NO_TOPIC');		}	}	if ($view == 'unread')	{		// Get topic tracking info		$topic_tracking_info = get_complete_topic_tracking($forum_id, $topic_id);		$topic_last_read = (isset($topic_tracking_info[$topic_id])) ? $topic_tracking_info[$topic_id] : 0;		$sql = 'SELECT post_id, topic_id, forum_id			FROM ' . POSTS_TABLE . "			WHERE topic_id = $topic_id				" . (($auth->acl_get('m_approve', $forum_id)) ? '' : 'AND post_approved = 1') . "				AND post_time > $topic_last_read				AND forum_id = $forum_id			ORDER BY post_time ASC";		$result = $db->sql_query_limit($sql, 1);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$row)		{			$sql = 'SELECT topic_last_post_id as post_id, topic_id, forum_id				FROM ' . TOPICS_TABLE . '				WHERE topic_id = ' . $topic_id;			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);		}		if (!$row)		{			// Setup user environment so we can process lang string			$user->setup('viewtopic');			trigger_error('NO_TOPIC');		}		$post_id = $row['post_id'];		$topic_id = $row['topic_id'];	}	else if ($view == 'next' || $view == 'previous')	{		$sql_condition = ($view == 'next') ? '>' : '<';		$sql_ordering = ($view == 'next') ? 'ASC' : 'DESC';		$sql = 'SELECT forum_id, topic_last_post_time			FROM ' . TOPICS_TABLE . '			WHERE topic_id = ' . $topic_id;		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$row)		{			$user->setup('viewtopic');			// OK, the topic doesn't exist. This error message is not helpful, but technically correct.			trigger_error(($view == 'next') ? 'NO_NEWER_TOPICS' : 'NO_OLDER_TOPICS');		}		else		{			$sql = 'SELECT topic_id, forum_id				FROM ' . TOPICS_TABLE . '				WHERE forum_id = ' . $row['forum_id'] . "					AND topic_moved_id = 0					AND topic_last_post_time $sql_condition {$row['topic_last_post_time']}					" . (($auth->acl_get('m_approve', $row['forum_id'])) ? '' : 'AND topic_approved = 1') . "				ORDER BY topic_last_post_time $sql_ordering";			$result = $db->sql_query_limit($sql, 1);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$row)			{				$user->setup('viewtopic');				trigger_error(($view == 'next') ? 'NO_NEWER_TOPICS' : 'NO_OLDER_TOPICS');			}			else			{				$topic_id = $row['topic_id'];				// Check for global announcement correctness?				if (!$row['forum_id'] && !$forum_id)				{					trigger_error('NO_TOPIC');				}				else if ($row['forum_id'])				{					$forum_id = $row['forum_id'];				}			}		}	}	// Check for global announcement correctness?	if ((!isset($row) || !$row['forum_id']) && !$forum_id)	{		trigger_error('NO_TOPIC');	}	else if (isset($row) && $row['forum_id'])	{		$forum_id = $row['forum_id'];	}}// This rather complex gaggle of code handles querying for topics but// also allows for direct linking to a post (and the calculation of which// page the post is on and the correct display of viewtopic)$sql_array = array(	'SELECT'	=> 't.*, f.*',	'FROM'		=> array(FORUMS_TABLE => 'f'),);// Firebird handles two columns of the same name a little differently, this// addresses that by forcing the forum_id to come from the forums table.if ($db->sql_layer === 'firebird'){	$sql_array['SELECT'] = 'f.forum_id AS forum_id, ' . $sql_array['SELECT'];}// The FROM-Order is quite important here, else t.* columns can not be correctly bound.if ($post_id){	$sql_array['SELECT'] .= ', p.post_approved, p.post_time, p.post_id';	$sql_array['FROM'][POSTS_TABLE] = 'p';}// Topics table need to be the last in the chain$sql_array['FROM'][TOPICS_TABLE] = 't';if ($user->data['is_registered']){	$sql_array['SELECT'] .= ', tw.notify_status';	$sql_array['LEFT_JOIN'] = array();	$sql_array['LEFT_JOIN'][] = array(		'FROM'	=> array(TOPICS_WATCH_TABLE => 'tw'),		'ON'	=> 'tw.user_id = ' . $user->data['user_id'] . ' AND t.topic_id = tw.topic_id'	);	if ($config['allow_bookmarks'])	{		$sql_array['SELECT'] .= ', bm.topic_id as bookmarked';		$sql_array['LEFT_JOIN'][] = array(			'FROM'	=> array(BOOKMARKS_TABLE => 'bm'),			'ON'	=> 'bm.user_id = ' . $user->data['user_id'] . ' AND t.topic_id = bm.topic_id'		);	}	if ($config['load_db_lastread'])	{		$sql_array['SELECT'] .= ', tt.mark_time, ft.mark_time as forum_mark_time';		$sql_array['LEFT_JOIN'][] = array(			'FROM'	=> array(TOPICS_TRACK_TABLE => 'tt'),			'ON'	=> 'tt.user_id = ' . $user->data['user_id'] . ' AND t.topic_id = tt.topic_id'		);		$sql_array['LEFT_JOIN'][] = array(			'FROM'	=> array(FORUMS_TRACK_TABLE => 'ft'),			'ON'	=> 'ft.user_id = ' . $user->data['user_id'] . ' AND t.forum_id = ft.forum_id'		);	}}if (!$post_id){	$sql_array['WHERE'] = "t.topic_id = $topic_id";}else{	$sql_array['WHERE'] = "p.post_id = $post_id AND t.topic_id = p.topic_id";}$sql_array['WHERE'] .= ' AND (f.forum_id = t.forum_id';if (!$forum_id){	// If it is a global announcement make sure to set the forum id to a postable forum	$sql_array['WHERE'] .= ' OR (t.topic_type = ' . POST_GLOBAL . '		AND f.forum_type = ' . FORUM_POST . ')';}else{	$sql_array['WHERE'] .= ' OR (t.topic_type = ' . POST_GLOBAL . "		AND f.forum_id = $forum_id)";}$sql_array['WHERE'] .= ')';// Join to forum table on topic forum_id unless topic forum_id is zero// whereupon we join on the forum_id passed as a parameter ... this// is done so navigation, forum name, etc. remain consistent with where// user clicked to view a global topic$sql = $db->sql_build_query('SELECT', $sql_array);$result = $db->sql_query($sql);$topic_data = $db->sql_fetchrow($result);$db->sql_freeresult($result);// link to unapproved post or incorrect linkif (!$topic_data){	// If post_id was submitted, we try at least to display the topic as a last resort...	if ($post_id && $topic_id)	{		redirect(append_sid("{$phpbb_root_path}viewtopic.$phpEx", "t=$topic_id" . (($forum_id) ? "&amp;f=$forum_id" : '')));	}	trigger_error('NO_TOPIC');}$forum_id = (int) $topic_data['forum_id'];// This is for determining where we are (page)if ($post_id){	// are we where we are supposed to be?	if (!$topic_data['post_approved'] && !$auth->acl_get('m_approve', $topic_data['forum_id']))	{		// If post_id was submitted, we try at least to display the topic as a last resort...		if ($topic_id)		{			redirect(append_sid("{$phpbb_root_path}viewtopic.$phpEx", "t=$topic_id" . (($forum_id) ? "&amp;f=$forum_id" : '')));		}		trigger_error('NO_TOPIC');	}	if ($post_id == $topic_data['topic_first_post_id'] || $post_id == $topic_data['topic_last_post_id'])	{		$check_sort = ($post_id == $topic_data['topic_first_post_id']) ? 'd' : 'a';		if ($sort_dir == $check_sort)		{			$topic_data['prev_posts'] = ($auth->acl_get('m_approve', $forum_id)) ? $topic_data['topic_replies_real'] : $topic_data['topic_replies'];		}		else		{			$topic_data['prev_posts'] = 0;		}	}	else	{		$sql = 'SELECT COUNT(p.post_id) AS prev_posts			FROM ' . POSTS_TABLE . " p			WHERE p.topic_id = {$topic_data['topic_id']}				" . ((!$auth->acl_get('m_approve', $forum_id)) ? 'AND p.post_approved = 1' : '');		if ($sort_dir == 'd')		{			$sql .= " AND (p.post_time > {$topic_data['post_time']} OR (p.post_time = {$topic_data['post_time']} AND p.post_id >= {$topic_data['post_id']}))";		}		else		{			$sql .= " AND (p.post_time < {$topic_data['post_time']} OR (p.post_time = {$topic_data['post_time']} AND p.post_id <= {$topic_data['post_id']}))";		}		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		$topic_data['prev_posts'] = $row['prev_posts'] - 1;	}}$topic_id = (int) $topic_data['topic_id'];//$topic_replies = ($auth->acl_get('m_approve', $forum_id)) ? $topic_data['topic_replies_real'] : $topic_data['topic_replies'];// Check sticky/announcement time limitif (($topic_data['topic_type'] == POST_STICKY || $topic_data['topic_type'] == POST_ANNOUNCE) && $topic_data['topic_time_limit'] && ($topic_data['topic_time'] + $topic_data['topic_time_limit']) < time()){	$sql = 'UPDATE ' . TOPICS_TABLE . '		SET topic_type = ' . POST_NORMAL . ', topic_time_limit = 0		WHERE topic_id = ' . $topic_id;	$db->sql_query($sql);	$topic_data['topic_type'] = POST_NORMAL;	$topic_data['topic_time_limit'] = 0;}// Setup look and feel$user->setup('viewtopic', $topic_data['forum_style']);if (!$topic_data['topic_approved'] && !$auth->acl_get('m_approve', $forum_id)){	trigger_error('NO_TOPIC');}// Start auth checkif (!$auth->acl_get('f_read', $forum_id)){	if ($user->data['user_id'] != ANONYMOUS)	{		trigger_error('SORRY_AUTH_READ');	}	login_box('', $user->lang['LOGIN_VIEWFORUM']);}// Forum is passworded ... check whether access has been granted to this// user this session, if not show login boxif ($topic_data['forum_password']){	login_forum_box($topic_data);}// Redirect to login or to the correct post upon emailed notification linksif (isset($_GET['e'])){	$jump_to = request_var('e', 0);	$redirect_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id");	if ($user->data['user_id'] == ANONYMOUS)	{		login_box($redirect_url . "&amp;p=$post_id&amp;e=$jump_to", $user->lang['LOGIN_NOTIFY_TOPIC']);	}	if ($jump_to > 0)	{		// We direct the already logged in user to the correct post...		redirect($redirect_url . ((!$post_id) ? "&amp;p=$jump_to" : "&amp;p=$post_id") . "#p$jump_to");	}}// What is start equal to?if ($post_id){	$start = floor(($topic_data['prev_posts']) / $config['posts_per_page']) * $config['posts_per_page'];}// Get topic tracking infoif (!isset($topic_tracking_info)){	$topic_tracking_info = array();	// Get topic tracking info	if ($config['load_db_lastread'] && $user->data['is_registered'])	{		$tmp_topic_data = array($topic_id => $topic_data);		$topic_tracking_info = get_topic_tracking($forum_id, $topic_id, $tmp_topic_data, array($forum_id => $topic_data['forum_mark_time']));		unset($tmp_topic_data);	}	else if ($config['load_anon_lastread'] || $user->data['is_registered'])	{		$topic_tracking_info = get_complete_topic_tracking($forum_id, $topic_id);	}}// Post ordering options$limit_days = array(0 => $user->lang['ALL_POSTS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);$sort_by_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 's' => $user->lang['SUBJECT']);$sort_by_sql = array('a' => array('u.username_clean', 'p.post_id'), 't' => 'p.post_time', 's' => array('p.post_subject', 'p.post_id'));$join_user_sql = array('a' => true, 't' => false, 's' => false);$s_limit_days = $s_sort_key = $s_sort_dir = $u_sort_param = '';gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param, $default_sort_days, $default_sort_key, $default_sort_dir);// Obtain correct post count and ordering SQL if user has// requested anything differentif ($sort_days){	$min_post_time = time() - ($sort_days * 86400);	$sql = 'SELECT COUNT(post_id) AS num_posts		FROM ' . POSTS_TABLE . "		WHERE topic_id = $topic_id			AND post_time >= $min_post_time		" . (($auth->acl_get('m_approve', $forum_id)) ? '' : 'AND post_approved = 1');	$result = $db->sql_query($sql);	$total_posts = (int) $db->sql_fetchfield('num_posts');	$db->sql_freeresult($result);	$limit_posts_time = "AND p.post_time >= $min_post_time ";	if (isset($_POST['sort']))	{		$start = 0;	}}else{	$total_posts = $topic_replies + 1;	$limit_posts_time = '';}// Was a highlight request part of the URI?$highlight_match = $highlight = '';if ($hilit_words){	foreach (explode(' ', trim($hilit_words)) as $word)	{		if (trim($word))		{			$word = str_replace('\*', '\w+?', preg_quote($word, '#'));			$word = preg_replace('#(^|\s)\\\\w\*\?(\s|$)#', '$1\w+?$2', $word);			$highlight_match .= (($highlight_match != '') ? '|' : '') . $word;		}	}	$highlight = urlencode($hilit_words);}// Make sure $start is set to the last page if it exceeds the amountif ($start < 0 || $start >= $total_posts){	$start = ($start < 0) ? 0 : floor(($total_posts - 1) / $config['posts_per_page']) * $config['posts_per_page'];}// General Viewtopic URL for return links$viewtopic_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id" . (($start == 0) ? '' : "&amp;start=$start") . ((strlen($u_sort_param)) ? "&amp;$u_sort_param" : '') . (($highlight_match) ? "&amp;hilit=$highlight" : ''));// Are we watching this topic?$s_watching_topic = array(	'link'			=> '',	'title'			=> '',	'is_watching'	=> false,);if (($config['email_enable'] || $config['jab_enable']) && $config['allow_topic_notify']){	$notify_status = (isset($topic_data['notify_status'])) ? $topic_data['notify_status'] : null;	watch_topic_forum('topic', $s_watching_topic, $user->data['user_id'], $forum_id, $topic_id, $notify_status, $start, $topic_data['topic_title']);	// Reset forum notification if forum notify is set	if ($config['allow_forum_notify'] && $auth->acl_get('f_subscribe', $forum_id))	{		$s_watching_forum = $s_watching_topic;		watch_topic_forum('forum', $s_watching_forum, $user->data['user_id'], $forum_id, 0);	}}// Bookmarksif ($config['allow_bookmarks'] && $user->data['is_registered'] && request_var('bookmark', 0)){	if (check_link_hash(request_var('hash', ''), "topic_$topic_id"))	{		if (!$topic_data['bookmarked'])		{			$sql = 'INSERT INTO ' . BOOKMARKS_TABLE . ' ' . $db->sql_build_array('INSERT', array(				'user_id'	=> $user->data['user_id'],				'topic_id'	=> $topic_id,			));			$db->sql_query($sql);		}		else		{			$sql = 'DELETE FROM ' . BOOKMARKS_TABLE . "				WHERE user_id = {$user->data['user_id']}					AND topic_id = $topic_id";			$db->sql_query($sql);		}		$message = (($topic_data['bookmarked']) ? $user->lang['BOOKMARK_REMOVED'] : $user->lang['BOOKMARK_ADDED']) . '<br /><br />' . sprintf($user->lang['RETURN_TOPIC'], '<a href="' . $viewtopic_url . '">', '</a>');	}	else	{		$message = $user->lang['BOOKMARK_ERR'] . '<br /><br />' . sprintf($user->lang['RETURN_TOPIC'], '<a href="' . $viewtopic_url . '">', '</a>');	}	meta_refresh(3, $viewtopic_url);	trigger_error($message);}// Grab ranks$ranks = $cache->obtain_ranks();// Grab icons$icons = $cache->obtain_icons();// Grab extensions$extensions = array();if ($topic_data['topic_attachment']){	$extensions = $cache->obtain_attach_extensions($forum_id);}// Forum rules listing$s_forum_rules = '';gen_forum_auth_level('topic', $forum_id, $topic_data['forum_status']);// Quick mod tools$allow_change_type = ($auth->acl_get('m_', $forum_id) || ($user->data['is_registered'] && $user->data['user_id'] == $topic_data['topic_poster'])) ? true : false;$topic_mod = '';$topic_mod .= ($auth->acl_get('m_lock', $forum_id) || ($auth->acl_get('f_user_lock', $forum_id) && $user->data['is_registered'] && $user->data['user_id'] == $topic_data['topic_poster'] && $topic_data['topic_status'] == ITEM_UNLOCKED)) ? (($topic_data['topic_status'] == ITEM_UNLOCKED) ? '<option value="lock">' . $user->lang['LOCK_TOPIC'] . '</option>' : '<option value="unlock">' . $user->lang['UNLOCK_TOPIC'] . '</option>') : '';$topic_mod .= ($auth->acl_get('m_delete', $forum_id)) ? '<option value="delete_topic">' . $user->lang['DELETE_TOPIC'] . '</option>' : '';$topic_mod .= ($auth->acl_get('m_move', $forum_id) && $topic_data['topic_status'] != ITEM_MOVED) ? '<option value="move">' . $user->lang['MOVE_TOPIC'] . '</option>' : '';$topic_mod .= ($auth->acl_get('m_split', $forum_id)) ? '<option value="split">' . $user->lang['SPLIT_TOPIC'] . '</option>' : '';$topic_mod .= ($auth->acl_get('m_merge', $forum_id)) ? '<option value="merge">' . $user->lang['MERGE_POSTS'] . '</option>' : '';$topic_mod .= ($auth->acl_get('m_merge', $forum_id)) ? '<option value="merge_topic">' . $user->lang['MERGE_TOPIC'] . '</option>' : '';$topic_mod .= ($auth->acl_get('m_move', $forum_id)) ? '<option value="fork">' . $user->lang['FORK_TOPIC'] . '</option>' : '';$topic_mod .= ($allow_change_type && $auth->acl_gets('f_sticky', 'f_announce', $forum_id) && $topic_data['topic_type'] != POST_NORMAL) ? '<option value="make_normal">' . $user->lang['MAKE_NORMAL'] . '</option>' : '';$topic_mod .= ($allow_change_type && $auth->acl_get('f_sticky', $forum_id) && $topic_data['topic_type'] != POST_STICKY) ? '<option value="make_sticky">' . $user->lang['MAKE_STICKY'] . '</option>' : '';$topic_mod .= ($allow_change_type && $auth->acl_get('f_announce', $forum_id) && $topic_data['topic_type'] != POST_ANNOUNCE) ? '<option value="make_announce">' . $user->lang['MAKE_ANNOUNCE'] . '</option>' : '';$topic_mod .= ($allow_change_type && $auth->acl_get('f_announce', $forum_id) && $topic_data['topic_type'] != POST_GLOBAL) ? '<option value="make_global">' . $user->lang['MAKE_GLOBAL'] . '</option>' : '';$topic_mod .= ($auth->acl_get('m_', $forum_id)) ? '<option value="topic_logs">' . $user->lang['VIEW_TOPIC_LOGS'] . '</option>' : '';// If we've got a hightlight set pass it on to pagination.$pagination = generate_pagination(append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id" . ((strlen($u_sort_param)) ? "&amp;$u_sort_param" : '') . (($highlight_match) ? "&amp;hilit=$highlight" : '')), $total_posts, $config['posts_per_page'], $start);// Navigation linksgenerate_forum_nav($topic_data);// Forum Rulesgenerate_forum_rules($topic_data);// Moderators$forum_moderators = array();if ($config['load_moderators']){	get_moderators($forum_moderators, $forum_id);}// This is only used for print view so ...$server_path = (!$view) ? $phpbb_root_path : generate_board_url() . '/';// Replace naughty words in title$topic_data['topic_title'] = censor_text($topic_data['topic_title']);$s_search_hidden_fields = array(	't' => $topic_id,	'sf' => 'msgonly',);if ($_SID){	$s_search_hidden_fields['sid'] = $_SID;}if (!empty($_EXTRA_URL)){	foreach ($_EXTRA_URL as $url_param)	{		$url_param = explode('=', $url_param, 2);		$s_hidden_fields[$url_param[0]] = $url_param[1];	}}// Send vars to template$template->assign_vars(array(	'FORUM_ID' 		=> $forum_id,	'FORUM_NAME' 	=> $topic_data['forum_name'],	'FORUM_DESC'	=> generate_text_for_display($topic_data['forum_desc'], $topic_data['forum_desc_uid'], $topic_data['forum_desc_bitfield'], $topic_data['forum_desc_options']),	'TOPIC_ID' 		=> $topic_id,	'TOPIC_TITLE' 	=> $topic_data['topic_title'],	'TOPIC_POSTER'	=> $topic_data['topic_poster'],	'TOPIC_AUTHOR_FULL'		=> get_username_string('full', $topic_data['topic_poster'], $topic_data['topic_first_poster_name'], $topic_data['topic_first_poster_colour']),	'TOPIC_AUTHOR_COLOUR'	=> get_username_string('colour', $topic_data['topic_poster'], $topic_data['topic_first_poster_name'], $topic_data['topic_first_poster_colour']),	'TOPIC_AUTHOR'			=> get_username_string('username', $topic_data['topic_poster'], $topic_data['topic_first_poster_name'], $topic_data['topic_first_poster_colour']),	'PAGINATION' 	=> $pagination,	'PAGE_NUMBER' 	=> on_page($total_posts, $config['posts_per_page'], $start),	'TOTAL_POSTS'	=> ($total_posts == 1) ? $user->lang['VIEW_TOPIC_POST'] : sprintf($user->lang['VIEW_TOPIC_POSTS'], $total_posts),	'U_MCP' 		=> ($auth->acl_get('m_', $forum_id)) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "i=main&amp;mode=topic_view&amp;f=$forum_id&amp;t=$topic_id" . (($start == 0) ? '' : "&amp;start=$start") . ((strlen($u_sort_param)) ? "&amp;$u_sort_param" : ''), true, $user->session_id) : '',	'MODERATORS'	=> (isset($forum_moderators[$forum_id]) && sizeof($forum_moderators[$forum_id])) ? implode(', ', $forum_moderators[$forum_id]) : '',	'POST_IMG' 			=> ($topic_data['forum_status'] == ITEM_LOCKED) ? $user->img('button_topic_locked', 'FORUM_LOCKED') : $user->img('button_topic_new', 'POST_NEW_TOPIC'),	'QUOTE_IMG' 		=> $user->img('icon_post_quote', 'REPLY_WITH_QUOTE'),	'REPLY_IMG'			=> ($topic_data['forum_status'] == ITEM_LOCKED || $topic_data['topic_status'] == ITEM_LOCKED) ? $user->img('button_topic_locked', 'TOPIC_LOCKED') : $user->img('button_topic_reply', 'REPLY_TO_TOPIC'),	'EDIT_IMG' 			=> $user->img('icon_post_edit', 'EDIT_POST'),	'DELETE_IMG' 		=> $user->img('icon_post_delete', 'DELETE_POST'),	'INFO_IMG' 			=> $user->img('icon_post_info', 'VIEW_INFO'),	'PROFILE_IMG'		=> $user->img('icon_user_profile', 'READ_PROFILE'),	'SEARCH_IMG' 		=> $user->img('icon_user_search', 'SEARCH_USER_POSTS'),	'PM_IMG' 			=> $user->img('icon_contact_pm', 'SEND_PRIVATE_MESSAGE'),	'EMAIL_IMG' 		=> $user->img('icon_contact_email', 'SEND_EMAIL'),	'WWW_IMG' 			=> $user->img('icon_contact_www', 'VISIT_WEBSITE'),	'ICQ_IMG' 			=> $user->img('icon_contact_icq', 'ICQ'),	'AIM_IMG' 			=> $user->img('icon_contact_aim', 'AIM'),	'MSN_IMG' 			=> $user->img('icon_contact_msnm', 'MSNM'),	'YIM_IMG' 			=> $user->img('icon_contact_yahoo', 'YIM'),	'JABBER_IMG'		=> $user->img('icon_contact_jabber', 'JABBER') ,	'REPORT_IMG'		=> $user->img('icon_post_report', 'REPORT_POST'),	'REPORTED_IMG'		=> $user->img('icon_topic_reported', 'POST_REPORTED'),	'UNAPPROVED_IMG'	=> $user->img('icon_topic_unapproved', 'POST_UNAPPROVED'),	'WARN_IMG'			=> $user->img('icon_user_warn', 'WARN_USER'),	'S_IS_LOCKED'			=> ($topic_data['topic_status'] == ITEM_UNLOCKED && $topic_data['forum_status'] == ITEM_UNLOCKED) ? false : true,	'S_SELECT_SORT_DIR' 	=> $s_sort_dir,	'S_SELECT_SORT_KEY' 	=> $s_sort_key,	'S_SELECT_SORT_DAYS' 	=> $s_limit_days,	'S_SINGLE_MODERATOR'	=> (!empty($forum_moderators[$forum_id]) && sizeof($forum_moderators[$forum_id]) > 1) ? false : true,	'S_TOPIC_ACTION' 		=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id" . (($start == 0) ? '' : "&amp;start=$start")),	'S_TOPIC_MOD' 			=> ($topic_mod != '') ? '<select name="action" id="quick-mod-select">' . $topic_mod . '</select>' : '',	'S_MOD_ACTION' 			=> append_sid("{$phpbb_root_path}mcp.$phpEx", "f=$forum_id&amp;t=$topic_id" . (($start == 0) ? '' : "&amp;start=$start") . "&amp;quickmod=1&amp;redirect=" . urlencode(str_replace('&amp;', '&', $viewtopic_url)), true, $user->session_id),	'S_VIEWTOPIC'			=> true,	'S_DISPLAY_SEARCHBOX'	=> ($auth->acl_get('u_search') && $auth->acl_get('f_search', $forum_id) && $config['load_search']) ? true : false,	'S_SEARCHBOX_ACTION'	=> append_sid("{$phpbb_root_path}search.$phpEx"),	'S_SEARCH_LOCAL_HIDDEN_FIELDS'	=> build_hidden_fields($s_search_hidden_fields),	'S_DISPLAY_POST_INFO'	=> ($topic_data['forum_type'] == FORUM_POST && ($auth->acl_get('f_post', $forum_id) || $user->data['user_id'] == ANONYMOUS)) ? true : false,	'S_DISPLAY_REPLY_INFO'	=> ($topic_data['forum_type'] == FORUM_POST && ($auth->acl_get('f_reply', $forum_id) || $user->data['user_id'] == ANONYMOUS)) ? true : false,	'S_ENABLE_FEEDS_TOPIC'	=> ($config['feed_topic'] && !phpbb_optionget(FORUM_OPTION_FEED_EXCLUDE, $topic_data['forum_options'])) ? true : false,	'U_TOPIC'				=> "{$server_path}viewtopic.$phpEx?f=$forum_id&amp;t=$topic_id",	'U_FORUM'				=> $server_path,	'U_VIEW_TOPIC' 			=> $viewtopic_url,	'U_VIEW_FORUM' 			=> append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id),	'U_VIEW_OLDER_TOPIC'	=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id&amp;view=previous"),	'U_VIEW_NEWER_TOPIC'	=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id&amp;view=next"),	'U_PRINT_TOPIC'			=> ($auth->acl_get('f_print', $forum_id)) ? $viewtopic_url . '&amp;view=print' : '',	'U_EMAIL_TOPIC'			=> ($auth->acl_get('f_email', $forum_id) && $config['email_enable']) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", "mode=email&amp;t=$topic_id") : '',	'U_WATCH_TOPIC' 		=> $s_watching_topic['link'],	'L_WATCH_TOPIC' 		=> $s_watching_topic['title'],	'S_WATCHING_TOPIC'		=> $s_watching_topic['is_watching'],	'U_BOOKMARK_TOPIC'		=> ($user->data['is_registered'] && $config['allow_bookmarks']) ? $viewtopic_url . '&amp;bookmark=1&amp;hash=' . generate_link_hash("topic_$topic_id") : '',	'L_BOOKMARK_TOPIC'		=> ($user->data['is_registered'] && $config['allow_bookmarks'] && $topic_data['bookmarked']) ? $user->lang['BOOKMARK_TOPIC_REMOVE'] : $user->lang['BOOKMARK_TOPIC'],	'U_POST_NEW_TOPIC' 		=> ($auth->acl_get('f_post', $forum_id) || $user->data['user_id'] == ANONYMOUS) ? append_sid("{$phpbb_root_path}posting.$phpEx", "mode=post&amp;f=$forum_id") : '',	'U_POST_REPLY_TOPIC' 	=> ($auth->acl_get('f_reply', $forum_id) || $user->data['user_id'] == ANONYMOUS) ? append_sid("{$phpbb_root_path}posting.$phpEx", "mode=reply&amp;f=$forum_id&amp;t=$topic_id") : '',	'U_BUMP_TOPIC'			=> (bump_topic_allowed($forum_id, $topic_data['topic_bumped'], $topic_data['topic_last_post_time'], $topic_data['topic_poster'], $topic_data['topic_last_poster_id'])) ? append_sid("{$phpbb_root_path}posting.$phpEx", "mode=bump&amp;f=$forum_id&amp;t=$topic_id&amp;hash=" . generate_link_hash("topic_$topic_id")) : ''));// Does this topic contain a poll?if (!empty($topic_data['poll_start'])){	$sql = 'SELECT o.*, p.bbcode_bitfield, p.bbcode_uid		FROM ' . POLL_OPTIONS_TABLE . ' o, ' . POSTS_TABLE . " p		WHERE o.topic_id = $topic_id			AND p.post_id = {$topic_data['topic_first_post_id']}			AND p.topic_id = o.topic_id		ORDER BY o.poll_option_id";	$result = $db->sql_query($sql);	$poll_info = array();	while ($row = $db->sql_fetchrow($result))	{		$poll_info[] = $row;	}	$db->sql_freeresult($result);	$cur_voted_id = array();	if ($user->data['is_registered'])	{		$sql = 'SELECT poll_option_id			FROM ' . POLL_VOTES_TABLE . '			WHERE topic_id = ' . $topic_id . '				AND vote_user_id = ' . $user->data['user_id'];		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$cur_voted_id[] = $row['poll_option_id'];		}		$db->sql_freeresult($result);	}	else	{		// Cookie based guest tracking ... I don't like this but hum ho		// it's oft requested. This relies on "nice" users who don't feel		// the need to delete cookies to mess with results.		if (isset($_COOKIE[$config['cookie_name'] . '_poll_' . $topic_id]))		{			$cur_voted_id = explode(',', $_COOKIE[$config['cookie_name'] . '_poll_' . $topic_id]);			$cur_voted_id = array_map('intval', $cur_voted_id);		}	}	// Can not vote at all if no vote permission	$s_can_vote = ($auth->acl_get('f_vote', $forum_id) &&		(($topic_data['poll_length'] != 0 && $topic_data['poll_start'] + $topic_data['poll_length'] > time()) || $topic_data['poll_length'] == 0) &&		$topic_data['topic_status'] != ITEM_LOCKED &&		$topic_data['forum_status'] != ITEM_LOCKED &&		(!sizeof($cur_voted_id) ||		($auth->acl_get('f_votechg', $forum_id) && $topic_data['poll_vote_change']))) ? true : false;	$s_display_results = (!$s_can_vote || ($s_can_vote && sizeof($cur_voted_id)) || $view == 'viewpoll') ? true : false;	if ($update && $s_can_vote)	{		if (!sizeof($voted_id) || sizeof($voted_id) > $topic_data['poll_max_options'] || in_array(VOTE_CONVERTED, $cur_voted_id) || !check_form_key('posting'))		{			$redirect_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id" . (($start == 0) ? '' : "&amp;start=$start"));			meta_refresh(5, $redirect_url);			if (!sizeof($voted_id))			{				$message = 'NO_VOTE_OPTION';			}			else if (sizeof($voted_id) > $topic_data['poll_max_options'])			{				$message = 'TOO_MANY_VOTE_OPTIONS';			}			else if (in_array(VOTE_CONVERTED, $cur_voted_id))			{				$message = 'VOTE_CONVERTED';			}			else			{				$message = 'FORM_INVALID';			}			$message = $user->lang[$message] . '<br /><br />' . sprintf($user->lang['RETURN_TOPIC'], '<a href="' . $redirect_url . '">', '</a>');			trigger_error($message);		}		foreach ($voted_id as $option)		{			if (in_array($option, $cur_voted_id))			{				continue;			}			$sql = 'UPDATE ' . POLL_OPTIONS_TABLE . '				SET poll_option_total = poll_option_total + 1				WHERE poll_option_id = ' . (int) $option . '					AND topic_id = ' . (int) $topic_id;			$db->sql_query($sql);			if ($user->data['is_registered'])			{				$sql_ary = array(					'topic_id'			=> (int) $topic_id,					'poll_option_id'	=> (int) $option,					'vote_user_id'		=> (int) $user->data['user_id'],					'vote_user_ip'		=> (string) $user->ip,				);				$sql = 'INSERT INTO ' . POLL_VOTES_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);				$db->sql_query($sql);			}		}		foreach ($cur_voted_id as $option)		{			if (!in_array($option, $voted_id))			{				$sql = 'UPDATE ' . POLL_OPTIONS_TABLE . '					SET poll_option_total = poll_option_total - 1					WHERE poll_option_id = ' . (int) $option . '						AND topic_id = ' . (int) $topic_id;				$db->sql_query($sql);				if ($user->data['is_registered'])				{					$sql = 'DELETE FROM ' . POLL_VOTES_TABLE . '						WHERE topic_id = ' . (int) $topic_id . '							AND poll_option_id = ' . (int) $option . '							AND vote_user_id = ' . (int) $user->data['user_id'];					$db->sql_query($sql);				}			}		}		if ($user->data['user_id'] == ANONYMOUS && !$user->data['is_bot'])		{			$user->set_cookie('poll_' . $topic_id, implode(',', $voted_id), time() + 31536000);		}		$sql = 'UPDATE ' . TOPICS_TABLE . '			SET poll_last_vote = ' . time() . "			WHERE topic_id = $topic_id";		//, topic_last_post_time = ' . time() . " -- for bumping topics with new votes, ignore for now		$db->sql_query($sql);		$redirect_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id" . (($start == 0) ? '' : "&amp;start=$start"));		meta_refresh(5, $redirect_url);		trigger_error($user->lang['VOTE_SUBMITTED'] . '<br /><br />' . sprintf($user->lang['RETURN_TOPIC'], '<a href="' . $redirect_url . '">', '</a>'));	}	$poll_total = 0;	foreach ($poll_info as $poll_option)	{		$poll_total += $poll_option['poll_option_total'];	}	if ($poll_info[0]['bbcode_bitfield'])	{		$poll_bbcode = new bbcode();	}	else	{		$poll_bbcode = false;	}	for ($i = 0, $size = sizeof($poll_info); $i < $size; $i++)	{		$poll_info[$i]['poll_option_text'] = censor_text($poll_info[$i]['poll_option_text']);		if ($poll_bbcode !== false)		{			$poll_bbcode->bbcode_second_pass($poll_info[$i]['poll_option_text'], $poll_info[$i]['bbcode_uid'], $poll_option['bbcode_bitfield']);		}		$poll_info[$i]['poll_option_text'] = bbcode_nl2br($poll_info[$i]['poll_option_text']);		$poll_info[$i]['poll_option_text'] = smiley_text($poll_info[$i]['poll_option_text']);	}	$topic_data['poll_title'] = censor_text($topic_data['poll_title']);	if ($poll_bbcode !== false)	{		$poll_bbcode->bbcode_second_pass($topic_data['poll_title'], $poll_info[0]['bbcode_uid'], $poll_info[0]['bbcode_bitfield']);	}	$topic_data['poll_title'] = bbcode_nl2br($topic_data['poll_title']);	$topic_data['poll_title'] = smiley_text($topic_data['poll_title']);	unset($poll_bbcode);	foreach ($poll_info as $poll_option)	{		$option_pct = ($poll_total > 0) ? $poll_option['poll_option_total'] / $poll_total : 0;		$option_pct_txt = sprintf("%.1d%%", round($option_pct * 100));		$template->assign_block_vars('poll_option', array(			'POLL_OPTION_ID' 		=> $poll_option['poll_option_id'],			'POLL_OPTION_CAPTION' 	=> $poll_option['poll_option_text'],			'POLL_OPTION_RESULT' 	=> $poll_option['poll_option_total'],			'POLL_OPTION_PERCENT' 	=> $option_pct_txt,			'POLL_OPTION_PCT'		=> round($option_pct * 100),			'POLL_OPTION_IMG' 		=> $user->img('poll_center', $option_pct_txt, round($option_pct * 250)),			'POLL_OPTION_VOTED'		=> (in_array($poll_option['poll_option_id'], $cur_voted_id)) ? true : false)		);	}	$poll_end = $topic_data['poll_length'] + $topic_data['poll_start'];	$template->assign_vars(array(		'POLL_QUESTION'		=> $topic_data['poll_title'],		'TOTAL_VOTES' 		=> $poll_total,		'POLL_LEFT_CAP_IMG'	=> $user->img('poll_left'),		'POLL_RIGHT_CAP_IMG'=> $user->img('poll_right'),		'L_MAX_VOTES'		=> ($topic_data['poll_max_options'] == 1) ? $user->lang['MAX_OPTION_SELECT'] : sprintf($user->lang['MAX_OPTIONS_SELECT'], $topic_data['poll_max_options']),		'L_POLL_LENGTH'		=> ($topic_data['poll_length']) ? sprintf($user->lang[($poll_end > time()) ? 'POLL_RUN_TILL' : 'POLL_ENDED_AT'], $user->format_date($poll_end)) : '',		'S_HAS_POLL'		=> true,		'S_CAN_VOTE'		=> $s_can_vote,		'S_DISPLAY_RESULTS'	=> $s_display_results,		'S_IS_MULTI_CHOICE'	=> ($topic_data['poll_max_options'] > 1) ? true : false,		'S_POLL_ACTION'		=> $viewtopic_url,		'U_VIEW_RESULTS'	=> $viewtopic_url . '&amp;view=viewpoll')	);	unset($poll_end, $poll_info, $voted_id);}// If the user is trying to reach the second half of the topic, fetch it starting from the end$store_reverse = false;$sql_limit = $config['posts_per_page'];$sql_sort_order = $direction = '';if ($start > $total_posts / 2){	$store_reverse = true;	if ($start + $config['posts_per_page'] > $total_posts)	{		$sql_limit = min($config['posts_per_page'], max(1, $total_posts - $start));	}	// Select the sort order	$direction = (($sort_dir == 'd') ? 'ASC' : 'DESC');	$sql_start = max(0, $total_posts - $sql_limit - $start);}else{	// Select the sort order	$direction = (($sort_dir == 'd') ? 'DESC' : 'ASC');	$sql_start = $start;}if (is_array($sort_by_sql[$sort_key])){	$sql_sort_order = implode(' ' . $direction . ', ', $sort_by_sql[$sort_key]) . ' ' . $direction;}else{	$sql_sort_order = $sort_by_sql[$sort_key] . ' ' . $direction;}// Container for user details, only process once$post_list = $user_cache = $id_cache = $attachments = $attach_list = $rowset = $update_count = $post_edit_list = array();$has_attachments = $display_notice = false;$bbcode_bitfield = '';$i = $i_total = 0;// Go ahead and pull all data for this topic$sql = 'SELECT p.post_id	FROM ' . POSTS_TABLE . ' p' . (($join_user_sql[$sort_key]) ? ', ' . USERS_TABLE . ' u': '') . "	WHERE p.topic_id = $topic_id		" . ((!$auth->acl_get('m_approve', $forum_id)) ? 'AND p.post_approved = 1' : '') . "		" . (($join_user_sql[$sort_key]) ? 'AND u.user_id = p.poster_id': '') . "		$limit_posts_time	ORDER BY $sql_sort_order";$result = $db->sql_query_limit($sql, $sql_limit, $sql_start);$i = ($store_reverse) ? $sql_limit - 1 : 0;while ($row = $db->sql_fetchrow($result)){	$post_list[$i] = (int) $row['post_id'];	($store_reverse) ? $i-- : $i++;}$db->sql_freeresult($result);if (!sizeof($post_list)){	if ($sort_days)	{		trigger_error('NO_POSTS_TIME_FRAME');	}	else	{		trigger_error('NO_TOPIC');	}}// Holding maximum post time for marking topic read// We need to grab it because we do reverse ordering sometimes$max_post_time = 0;$sql = $db->sql_build_query('SELECT', array(	'SELECT'	=> 'u.*, z.friend, z.foe, p.*',	'FROM'		=> array(		USERS_TABLE		=> 'u',		POSTS_TABLE		=> 'p',	),	'LEFT_JOIN'	=> array(		array(			'FROM'	=> array(ZEBRA_TABLE => 'z'),			'ON'	=> 'z.user_id = ' . $user->data['user_id'] . ' AND z.zebra_id = p.poster_id'		)	),	'WHERE'		=> $db->sql_in_set('p.post_id', $post_list) . '		AND u.user_id = p.poster_id'));$result = $db->sql_query($sql);$now = phpbb_gmgetdate(time() + $user->timezone + $user->dst);// Posts are stored in the $rowset array while $attach_list, $user_cache// and the global bbcode_bitfield are builtwhile ($row = $db->sql_fetchrow($result)){	// Set max_post_time	if ($row['post_time'] > $max_post_time)	{		$max_post_time = $row['post_time'];	}	$poster_id = (int) $row['poster_id'];	// Does post have an attachment? If so, add it to the list	if ($row['post_attachment'] && $config['allow_attachments'])	{		$attach_list[] = (int) $row['post_id'];		if ($row['post_approved'])		{			$has_attachments = true;		}	}	$rowset[$row['post_id']] = array(		'hide_post'			=> ($row['foe'] && ($view != 'show' || $post_id != $row['post_id'])) ? true : false,		'post_id'			=> $row['post_id'],		'post_time'			=> $row['post_time'],		'user_id'			=> $row['user_id'],		'username'			=> $row['username'],		'user_colour'		=> $row['user_colour'],		'topic_id'			=> $row['topic_id'],		'forum_id'			=> $row['forum_id'],		'post_subject'		=> $row['post_subject'],		'post_edit_count'	=> $row['post_edit_count'],		'post_edit_time'	=> $row['post_edit_time'],		'post_edit_reason'	=> $row['post_edit_reason'],		'post_edit_user'	=> $row['post_edit_user'],		'post_edit_locked'	=> $row['post_edit_locked'],		// Make sure the icon actually exists		'icon_id'			=> (isset($icons[$row['icon_id']]['img'], $icons[$row['icon_id']]['height'], $icons[$row['icon_id']]['width'])) ? $row['icon_id'] : 0,		'post_attachment'	=> $row['post_attachment'],		'post_approved'		=> $row['post_approved'],		'post_reported'		=> $row['post_reported'],		'post_username'		=> $row['post_username'],		'post_text'			=> $row['post_text'],		'bbcode_uid'		=> $row['bbcode_uid'],		'bbcode_bitfield'	=> $row['bbcode_bitfield'],		'enable_smilies'	=> $row['enable_smilies'],		'enable_sig'		=> $row['enable_sig'],		'friend'			=> $row['friend'],		'foe'				=> $row['foe'],	);	// Define the global bbcode bitfield, will be used to load bbcodes	$bbcode_bitfield = $bbcode_bitfield | base64_decode($row['bbcode_bitfield']);	// Is a signature attached? Are we going to display it?	if ($row['enable_sig'] && $config['allow_sig'] && $user->optionget('viewsigs'))	{		$bbcode_bitfield = $bbcode_bitfield | base64_decode($row['user_sig_bbcode_bitfield']);	}	// Cache various user specific data ... so we don't have to recompute	// this each time the same user appears on this page	if (!isset($user_cache[$poster_id]))	{		if ($poster_id == ANONYMOUS)		{			$user_cache[$poster_id] = array(				'joined'		=> '',				'posts'			=> '',				'from'			=> '',				'sig'					=> '',				'sig_bbcode_uid'		=> '',				'sig_bbcode_bitfield'	=> '',				'online'			=> false,				'avatar'			=> ($user->optionget('viewavatars')) ? get_user_avatar($row['user_avatar'], $row['user_avatar_type'], $row['user_avatar_width'], $row['user_avatar_height']) : '',				'rank_title'		=> '',				'rank_image'		=> '',				'rank_image_src'	=> '',				'sig'				=> '',				'profile'			=> '',				'pm'				=> '',				'email'				=> '',				'www'				=> '',				'icq_status_img'	=> '',				'icq'				=> '',				'aim'				=> '',				'msn'				=> '',				'yim'				=> '',				'jabber'			=> '',				'search'			=> '',				'age'				=> '',				'username'			=> $row['username'],				'user_colour'		=> $row['user_colour'],				'warnings'			=> 0,				'allow_pm'			=> 0,			);			get_user_rank($row['user_rank'], false, $user_cache[$poster_id]['rank_title'], $user_cache[$poster_id]['rank_image'], $user_cache[$poster_id]['rank_image_src']);		}		else		{			$user_sig = '';			// We add the signature to every posters entry because enable_sig is post dependant			if ($row['user_sig'] && $config['allow_sig'] && $user->optionget('viewsigs'))			{				$user_sig = $row['user_sig'];			}			$id_cache[] = $poster_id;			$user_cache[$poster_id] = array(				'joined'		=> $user->format_date($row['user_regdate']),				'posts'			=> $row['user_posts'],				'warnings'		=> (isset($row['user_warnings'])) ? $row['user_warnings'] : 0,				'from'			=> (!empty($row['user_from'])) ? $row['user_from'] : '',				'sig'					=> $user_sig,				'sig_bbcode_uid'		=> (!empty($row['user_sig_bbcode_uid'])) ? $row['user_sig_bbcode_uid'] : '',				'sig_bbcode_bitfield'	=> (!empty($row['user_sig_bbcode_bitfield'])) ? $row['user_sig_bbcode_bitfield'] : '',				'viewonline'	=> $row['user_allow_viewonline'],				'allow_pm'		=> $row['user_allow_pm'],				'avatar'		=> ($user->optionget('viewavatars')) ? get_user_avatar($row['user_avatar'], $row['user_avatar_type'], $row['user_avatar_width'], $row['user_avatar_height']) : '',				'age'			=> '',				'rank_title'		=> '',				'rank_image'		=> '',				'rank_image_src'	=> '',				'username'			=> $row['username'],				'user_colour'		=> $row['user_colour'],				'online'		=> false,				'profile'		=> append_sid("{$phpbb_root_path}memberlist.$phpEx", "mode=viewprofile&amp;u=$poster_id"),				'www'			=> $row['user_website'],				'aim'			=> ($row['user_aim'] && $auth->acl_get('u_sendim')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", "mode=contact&amp;action=aim&amp;u=$poster_id") : '',				'msn'			=> ($row['user_msnm'] && $auth->acl_get('u_sendim')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", "mode=contact&amp;action=msnm&amp;u=$poster_id") : '',				'yim'			=> ($row['user_yim']) ? 'http://edit.yahoo.com/config/send_webmesg?.target=' . urlencode($row['user_yim']) . '&amp;.src=pg' : '',				'jabber'		=> ($row['user_jabber'] && $auth->acl_get('u_sendim')) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", "mode=contact&amp;action=jabber&amp;u=$poster_id") : '',				'search'		=> ($auth->acl_get('u_search')) ? append_sid("{$phpbb_root_path}search.$phpEx", "author_id=$poster_id&amp;sr=posts") : '',				'author_full'		=> get_username_string('full', $poster_id, $row['username'], $row['user_colour']),				'author_colour'		=> get_username_string('colour', $poster_id, $row['username'], $row['user_colour']),				'author_username'	=> get_username_string('username', $poster_id, $row['username'], $row['user_colour']),				'author_profile'	=> get_username_string('profile', $poster_id, $row['username'], $row['user_colour']),			);			get_user_rank($row['user_rank'], $row['user_posts'], $user_cache[$poster_id]['rank_title'], $user_cache[$poster_id]['rank_image'], $user_cache[$poster_id]['rank_image_src']);			if ((!empty($row['user_allow_viewemail']) && $auth->acl_get('u_sendemail')) || $auth->acl_get('a_email'))			{				$user_cache[$poster_id]['email'] = ($config['board_email_form'] && $config['email_enable']) ? append_sid("{$phpbb_root_path}memberlist.$phpEx", "mode=email&amp;u=$poster_id") : (($config['board_hide_emails'] && !$auth->acl_get('a_email')) ? '' : 'mailto:' . $row['user_email']);			}			else			{				$user_cache[$poster_id]['email'] = '';			}			if (!empty($row['user_icq']))			{				$user_cache[$poster_id]['icq'] = 'http://www.icq.com/people/' . urlencode($row['user_icq']) . '/';				$user_cache[$poster_id]['icq_status_img'] = '<img src="http://web.icq.com/whitepages/online?icq=' . $row['user_icq'] . '&amp;img=5" width="18" height="18" alt="" />';			}			else			{				$user_cache[$poster_id]['icq_status_img'] = '';				$user_cache[$poster_id]['icq'] = '';			}			if ($config['allow_birthdays'] && !empty($row['user_birthday']))			{				list($bday_day, $bday_month, $bday_year) = array_map('intval', explode('-', $row['user_birthday']));				if ($bday_year)				{					$diff = $now['mon'] - $bday_month;					if ($diff == 0)					{						$diff = ($now['mday'] - $bday_day < 0) ? 1 : 0;					}					else					{						$diff = ($diff < 0) ? 1 : 0;					}					$user_cache[$poster_id]['age'] = (int) ($now['year'] - $bday_year - $diff);				}			}		}	}}$db->sql_freeresult($result);// Load custom profile fieldsif ($config['load_cpf_viewtopic']){	if (!class_exists('custom_profile'))	{		include($phpbb_root_path . 'includes/functions_profile_fields.' . $phpEx);	}	$cp = new custom_profile();	// Grab all profile fields from users in id cache for later use - similar to the poster cache	$profile_fields_tmp = $cp->generate_profile_fields_template('grab', $id_cache);	// filter out fields not to be displayed on viewtopic. Yes, it's a hack, but this shouldn't break any MODs.	$profile_fields_cache = array();	foreach ($profile_fields_tmp as $profile_user_id => $profile_fields)	{		$profile_fields_cache[$profile_user_id] = array();		foreach ($profile_fields as $used_ident => $profile_field)		{			if ($profile_field['data']['field_show_on_vt'])			{				$profile_fields_cache[$profile_user_id][$used_ident] = $profile_field;			}		}	}	unset($profile_fields_tmp);}// Generate online information for userif ($config['load_onlinetrack'] && sizeof($id_cache)){	$sql = 'SELECT session_user_id, MAX(session_time) as online_time, MIN(session_viewonline) AS viewonline		FROM ' . SESSIONS_TABLE . '		WHERE ' . $db->sql_in_set('session_user_id', $id_cache) . '		GROUP BY session_user_id';	$result = $db->sql_query($sql);	$update_time = $config['load_online_time'] * 60;	while ($row = $db->sql_fetchrow($result))	{		$user_cache[$row['session_user_id']]['online'] = (time() - $update_time < $row['online_time'] && (($row['viewonline']) || $auth->acl_get('u_viewonline'))) ? true : false;	}	$db->sql_freeresult($result);}unset($id_cache);// Pull attachment dataif (sizeof($attach_list)){	if ($auth->acl_get('u_download') && $auth->acl_get('f_download', $forum_id))	{		$sql = 'SELECT *			FROM ' . ATTACHMENTS_TABLE . '			WHERE ' . $db->sql_in_set('post_msg_id', $attach_list) . '				AND in_message = 0			ORDER BY filetime DESC, post_msg_id ASC';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$attachments[$row['post_msg_id']][] = $row;		}		$db->sql_freeresult($result);		// No attachments exist, but post table thinks they do so go ahead and reset post_attach flags		if (!sizeof($attachments))		{			$sql = 'UPDATE ' . POSTS_TABLE . '				SET post_attachment = 0				WHERE ' . $db->sql_in_set('post_id', $attach_list);			$db->sql_query($sql);			// We need to update the topic indicator too if the complete topic is now without an attachment			if (sizeof($rowset) != $total_posts)			{				// Not all posts are displayed so we query the db to find if there's any attachment for this topic				$sql = 'SELECT a.post_msg_id as post_id					FROM ' . ATTACHMENTS_TABLE . ' a, ' . POSTS_TABLE . " p					WHERE p.topic_id = $topic_id						AND p.post_approved = 1						AND p.topic_id = a.topic_id";				$result = $db->sql_query_limit($sql, 1);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$row)				{					$sql = 'UPDATE ' . TOPICS_TABLE . "						SET topic_attachment = 0						WHERE topic_id = $topic_id";					$db->sql_query($sql);				}			}			else			{				$sql = 'UPDATE ' . TOPICS_TABLE . "					SET topic_attachment = 0					WHERE topic_id = $topic_id";				$db->sql_query($sql);			}		}		else if ($has_attachments && !$topic_data['topic_attachment'])		{			// Topic has approved attachments but its flag is wrong			$sql = 'UPDATE ' . TOPICS_TABLE . "				SET topic_attachment = 1				WHERE topic_id = $topic_id";			$db->sql_query($sql);			$topic_data['topic_attachment'] = 1;		}	}	else	{		$display_notice = true;	}}// Instantiate BBCode if need beif ($bbcode_bitfield !== ''){	$bbcode = new bbcode(base64_encode($bbcode_bitfield));}$i_total = sizeof($rowset) - 1;$prev_post_id = '';$template->assign_vars(array(	'S_NUM_POSTS' => sizeof($post_list)));// Output the posts$first_unread = $post_unread = false;for ($i = 0, $end = sizeof($post_list); $i < $end; ++$i){	// A non-existing rowset only happens if there was no user present for the entered poster_id	// This could be a broken posts table.	if (!isset($rowset[$post_list[$i]]))	{		continue;	}	$row =& $rowset[$post_list[$i]];	$poster_id = $row['user_id'];	// End signature parsing, only if needed	if ($user_cache[$poster_id]['sig'] && $row['enable_sig'] && empty($user_cache[$poster_id]['sig_parsed']))	{		$user_cache[$poster_id]['sig'] = censor_text($user_cache[$poster_id]['sig']);		if ($user_cache[$poster_id]['sig_bbcode_bitfield'])		{			$bbcode->bbcode_second_pass($user_cache[$poster_id]['sig'], $user_cache[$poster_id]['sig_bbcode_uid'], $user_cache[$poster_id]['sig_bbcode_bitfield']);		}		$user_cache[$poster_id]['sig'] = bbcode_nl2br($user_cache[$poster_id]['sig']);		$user_cache[$poster_id]['sig'] = smiley_text($user_cache[$poster_id]['sig']);		$user_cache[$poster_id]['sig_parsed'] = true;	}	// Parse the message and subject	$message = censor_text($row['post_text']);	// Second parse bbcode here	if ($row['bbcode_bitfield'])	{		$bbcode->bbcode_second_pass($message, $row['bbcode_uid'], $row['bbcode_bitfield']);	}	$message = bbcode_nl2br($message);	$message = smiley_text($message);	if (!empty($attachments[$row['post_id']]))	{		parse_attachments($forum_id, $message, $attachments[$row['post_id']], $update_count);	}	// Replace naughty words such as farty pants	$row['post_subject'] = censor_text($row['post_subject']);	// Highlight active words (primarily for search)	if ($highlight_match)	{		$message = preg_replace('#(?!<.*)(?<!\w)(' . $highlight_match . ')(?!\w|[^<>]*(?:</s(?:cript|tyle))?>)#is', '<span class="posthilit">\1</span>', $message);		$row['post_subject'] = preg_replace('#(?!<.*)(?<!\w)(' . $highlight_match . ')(?!\w|[^<>]*(?:</s(?:cript|tyle))?>)#is', '<span class="posthilit">\1</span>', $row['post_subject']);	}	// Editing information	if (($row['post_edit_count'] && $config['display_last_edited']) || $row['post_edit_reason'])	{		// Get usernames for all following posts if not already stored		if (!sizeof($post_edit_list) && ($row['post_edit_reason'] || ($row['post_edit_user'] && !isset($user_cache[$row['post_edit_user']]))))		{			// Remove all post_ids already parsed (we do not have to check them)			$post_storage_list = (!$store_reverse) ? array_slice($post_list, $i) : array_slice(array_reverse($post_list), $i);			$sql = 'SELECT DISTINCT u.user_id, u.username, u.user_colour				FROM ' . POSTS_TABLE . ' p, ' . USERS_TABLE . ' u				WHERE ' . $db->sql_in_set('p.post_id', $post_storage_list) . '					AND p.post_edit_count <> 0					AND p.post_edit_user <> 0					AND p.post_edit_user = u.user_id';			$result2 = $db->sql_query($sql);			while ($user_edit_row = $db->sql_fetchrow($result2))			{				$post_edit_list[$user_edit_row['user_id']] = $user_edit_row;			}			$db->sql_freeresult($result2);			unset($post_storage_list);		}		$l_edit_time_total = ($row['post_edit_count'] == 1) ? $user->lang['EDITED_TIME_TOTAL'] : $user->lang['EDITED_TIMES_TOTAL'];		if ($row['post_edit_reason'])		{			// User having edited the post also being the post author?			if (!$row['post_edit_user'] || $row['post_edit_user'] == $poster_id)			{				$display_username = get_username_string('full', $poster_id, $row['username'], $row['user_colour'], $row['post_username']);			}			else			{				$display_username = get_username_string('full', $row['post_edit_user'], $post_edit_list[$row['post_edit_user']]['username'], $post_edit_list[$row['post_edit_user']]['user_colour']);			}			$l_edited_by = sprintf($l_edit_time_total, $display_username, $user->format_date($row['post_edit_time'], false, true), $row['post_edit_count']);		}		else		{			if ($row['post_edit_user'] && !isset($user_cache[$row['post_edit_user']]))			{				$user_cache[$row['post_edit_user']] = $post_edit_list[$row['post_edit_user']];			}			// User having edited the post also being the post author?			if (!$row['post_edit_user'] || $row['post_edit_user'] == $poster_id)			{				$display_username = get_username_string('full', $poster_id, $row['username'], $row['user_colour'], $row['post_username']);			}			else			{				$display_username = get_username_string('full', $row['post_edit_user'], $user_cache[$row['post_edit_user']]['username'], $user_cache[$row['post_edit_user']]['user_colour']);			}			$l_edited_by = sprintf($l_edit_time_total, $display_username, $user->format_date($row['post_edit_time'], false, true), $row['post_edit_count']);		}	}	else	{		$l_edited_by = '';	}	// Bump information	if ($topic_data['topic_bumped'] && $row['post_id'] == $topic_data['topic_last_post_id'] && isset($user_cache[$topic_data['topic_bumper']]) )	{		// It is safe to grab the username from the user cache array, we are at the last		// post and only the topic poster and last poster are allowed to bump.		// Admins and mods are bound to the above rules too...		$l_bumped_by = sprintf($user->lang['BUMPED_BY'], $user_cache[$topic_data['topic_bumper']]['username'], $user->format_date($topic_data['topic_last_post_time'], false, true));	}	else	{		$l_bumped_by = '';	}	$cp_row = array();	//	if ($config['load_cpf_viewtopic'])	{		$cp_row = (isset($profile_fields_cache[$poster_id])) ? $cp->generate_profile_fields_template('show', false, $profile_fields_cache[$poster_id]) : array();	}	$post_unread = (isset($topic_tracking_info[$topic_id]) && $row['post_time'] > $topic_tracking_info[$topic_id]) ? true : false;	$s_first_unread = false;	if (!$first_unread && $post_unread)	{		$s_first_unread = $first_unread = true;	}	$edit_allowed = ($user->data['is_registered'] && ($auth->acl_get('m_edit', $forum_id) || (		$user->data['user_id'] == $poster_id &&		$auth->acl_get('f_edit', $forum_id) &&		!$row['post_edit_locked'] &&		($row['post_time'] > time() - ($config['edit_time'] * 60) || !$config['edit_time'])	)));	$delete_allowed = ($user->data['is_registered'] && ($auth->acl_get('m_delete', $forum_id) || (		$user->data['user_id'] == $poster_id &&		$auth->acl_get('f_delete', $forum_id) &&		$topic_data['topic_last_post_id'] == $row['post_id'] &&		($row['post_time'] > time() - ($config['delete_time'] * 60) || !$config['delete_time']) &&		// we do not want to allow removal of the last post if a moderator locked it!		!$row['post_edit_locked']	)));	//	$postrow = array(		'POST_AUTHOR_FULL'		=> ($poster_id != ANONYMOUS) ? $user_cache[$poster_id]['author_full'] : get_username_string('full', $poster_id, $row['username'], $row['user_colour'], $row['post_username']),		'POST_AUTHOR_COLOUR'	=> ($poster_id != ANONYMOUS) ? $user_cache[$poster_id]['author_colour'] : get_username_string('colour', $poster_id, $row['username'], $row['user_colour'], $row['post_username']),		'POST_AUTHOR'			=> ($poster_id != ANONYMOUS) ? $user_cache[$poster_id]['author_username'] : get_username_string('username', $poster_id, $row['username'], $row['user_colour'], $row['post_username']),		'U_POST_AUTHOR'			=> ($poster_id != ANONYMOUS) ? $user_cache[$poster_id]['author_profile'] : get_username_string('profile', $poster_id, $row['username'], $row['user_colour'], $row['post_username']),		'RANK_TITLE'		=> $user_cache[$poster_id]['rank_title'],		'RANK_IMG'			=> $user_cache[$poster_id]['rank_image'],		'RANK_IMG_SRC'		=> $user_cache[$poster_id]['rank_image_src'],		'POSTER_JOINED'		=> $user_cache[$poster_id]['joined'],		'POSTER_POSTS'		=> $user_cache[$poster_id]['posts'],		'POSTER_FROM'		=> $user_cache[$poster_id]['from'],		'POSTER_AVATAR'		=> $user_cache[$poster_id]['avatar'],		'POSTER_WARNINGS'	=> $user_cache[$poster_id]['warnings'],		'POSTER_AGE'		=> $user_cache[$poster_id]['age'],		'POST_DATE'			=> $user->format_date($row['post_time'], false, ($view == 'print') ? true : false),		'POST_SUBJECT'		=> $row['post_subject'],		'MESSAGE'			=> $message,		'SIGNATURE'			=> ($row['enable_sig']) ? $user_cache[$poster_id]['sig'] : '',		'EDITED_MESSAGE'	=> $l_edited_by,		'EDIT_REASON'		=> $row['post_edit_reason'],		'BUMPED_MESSAGE'	=> $l_bumped_by,		'MINI_POST_IMG'			=> ($post_unread) ? $user->img('icon_post_target_unread', 'UNREAD_POST') : $user->img('icon_post_target', 'POST'),		'POST_ICON_IMG'			=> ($topic_data['enable_icons'] && !empty($row['icon_id'])) ? $icons[$row['icon_id']]['img'] : '',		'POST_ICON_IMG_WIDTH'	=> ($topic_data['enable_icons'] && !empty($row['icon_id'])) ? $icons[$row['icon_id']]['width'] : '',		'POST_ICON_IMG_HEIGHT'	=> ($topic_data['enable_icons'] && !empty($row['icon_id'])) ? $icons[$row['icon_id']]['height'] : '',		'ICQ_STATUS_IMG'		=> $user_cache[$poster_id]['icq_status_img'],		'ONLINE_IMG'			=> ($poster_id == ANONYMOUS || !$config['load_onlinetrack']) ? '' : (($user_cache[$poster_id]['online']) ? $user->img('icon_user_online', 'ONLINE') : $user->img('icon_user_offline', 'OFFLINE')),		'S_ONLINE'				=> ($poster_id == ANONYMOUS || !$config['load_onlinetrack']) ? false : (($user_cache[$poster_id]['online']) ? true : false),		'U_EDIT'			=> ($edit_allowed) ? append_sid("{$phpbb_root_path}posting.$phpEx", "mode=edit&amp;f=$forum_id&amp;p={$row['post_id']}") : '',		'U_QUOTE'			=> ($auth->acl_get('f_reply', $forum_id)) ? append_sid("{$phpbb_root_path}posting.$phpEx", "mode=quote&amp;f=$forum_id&amp;p={$row['post_id']}") : '',		'U_INFO'			=> ($auth->acl_get('m_info', $forum_id)) ? append_sid("{$phpbb_root_path}mcp.$phpEx", "i=main&amp;mode=post_details&amp;f=$forum_id&amp;p=" . $row['post_id'], true, $user->session_id) : '',		'U_DELETE'			=> ($delete_allowed) ? append_sid("{$phpbb_root_path}posting.$phpEx", "mode=delete&amp;f=$forum_id&amp;p={$row['post_id']}") : '',		'U_PROFILE'		=> $user_cache[$poster_id]['profile'],		'U_SEARCH'		=> $user_cache[$poster_id]['search'],		'U_PM'			=> ($poster_id != ANONYMOUS && $config['allow_privmsg'] && $auth->acl_get('u_sendpm') && ($user_cache[$poster_id]['allow_pm'] || $auth->acl_gets('a_', 'm_') || $auth->acl_getf_global('m_'))) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=compose&amp;action=quotepost&amp;p=' . $row['post_id']) : '',		'U_EMAIL'		=> $user_cache[$poster_id]['email'],		'U_WWW'			=> $user_cache[$poster_id]['www'],		'U_ICQ'			=> $user_cache[$poster_id]['icq'],		'U_AIM'			=> $user_cache[$poster_id]['aim'],		'U_MSN'			=> $user_cache[$poster_id]['msn'],		'U_YIM'			=> $user_cache[$poster_id]['yim'],		'U_JABBER'		=> $user_cache[$poster_id]['jabber'],		'U_REPORT'			=> ($auth->acl_get('f_report', $forum_id)) ? append_sid("{$phpbb_root_path}report.$phpEx", 'f=' . $forum_id . '&amp;p=' . $row['post_id']) : '',		'U_MCP_REPORT'		=> ($auth->acl_get('m_report', $forum_id)) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports&amp;mode=report_details&amp;f=' . $forum_id . '&amp;p=' . $row['post_id'], true, $user->session_id) : '',		'U_MCP_APPROVE'		=> ($auth->acl_get('m_approve', $forum_id)) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue&amp;mode=approve_details&amp;f=' . $forum_id . '&amp;p=' . $row['post_id'], true, $user->session_id) : '',		'U_MINI_POST'		=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'p=' . $row['post_id']) . (($topic_data['topic_type'] == POST_GLOBAL) ? '&amp;f=' . $forum_id : '') . '#p' . $row['post_id'],		'U_NEXT_POST_ID'	=> ($i < $i_total && isset($rowset[$post_list[$i + 1]])) ? $rowset[$post_list[$i + 1]]['post_id'] : '',		'U_PREV_POST_ID'	=> $prev_post_id,		'U_NOTES'			=> ($auth->acl_getf_global('m_')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $poster_id, true, $user->session_id) : '',		'U_WARN'			=> ($auth->acl_get('m_warn') && $poster_id != $user->data['user_id'] && $poster_id != ANONYMOUS) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=warn&amp;mode=warn_post&amp;f=' . $forum_id . '&amp;p=' . $row['post_id'], true, $user->session_id) : '',		'POST_ID'			=> $row['post_id'],		'POST_NUMBER'		=> $i + $start + 1,		'POSTER_ID'			=> $poster_id,		'S_HAS_ATTACHMENTS'	=> (!empty($attachments[$row['post_id']])) ? true : false,		'S_POST_UNAPPROVED'	=> ($row['post_approved']) ? false : true,		'S_POST_REPORTED'	=> ($row['post_reported'] && $auth->acl_get('m_report', $forum_id)) ? true : false,		'S_DISPLAY_NOTICE'	=> $display_notice && $row['post_attachment'],		'S_FRIEND'			=> ($row['friend']) ? true : false,		'S_UNREAD_POST'		=> $post_unread,		'S_FIRST_UNREAD'	=> $s_first_unread,		'S_CUSTOM_FIELDS'	=> (isset($cp_row['row']) && sizeof($cp_row['row'])) ? true : false,		'S_TOPIC_POSTER'	=> ($topic_data['topic_poster'] == $poster_id) ? true : false,		'S_IGNORE_POST'		=> ($row['hide_post']) ? true : false,		'L_IGNORE_POST'		=> ($row['hide_post']) ? sprintf($user->lang['POST_BY_FOE'], get_username_string('full', $poster_id, $row['username'], $row['user_colour'], $row['post_username']), '<a href="' . $viewtopic_url . "&amp;p={$row['post_id']}&amp;view=show#p{$row['post_id']}" . '">', '</a>') : '',	);	if (isset($cp_row['row']) && sizeof($cp_row['row']))	{		$postrow = array_merge($postrow, $cp_row['row']);	}	// Dump vars into template	$template->assign_block_vars('postrow', $postrow);	if (!empty($cp_row['blockrow']))	{		foreach ($cp_row['blockrow'] as $field_data)		{			$template->assign_block_vars('postrow.custom_fields', $field_data);		}	}	// Display not already displayed Attachments for this post, we already parsed them. ;)	if (!empty($attachments[$row['post_id']]))	{		foreach ($attachments[$row['post_id']] as $attachment)		{			$template->assign_block_vars('postrow.attachment', array(				'DISPLAY_ATTACHMENT'	=> $attachment)			);		}	}	$prev_post_id = $row['post_id'];	unset($rowset[$post_list[$i]]);	unset($attachments[$row['post_id']]);}unset($rowset, $user_cache);// Update topic view and if necessary attachment view counters ... but only for humans and if this is the first 'page view'if (isset($user->data['session_page']) && !$user->data['is_bot'] && (strpos($user->data['session_page'], '&t=' . $topic_id) === false || isset($user->data['session_created']))){	$sql = 'UPDATE ' . TOPICS_TABLE . '		SET topic_views = topic_views + 1, topic_last_view_time = ' . time() . "		WHERE topic_id = $topic_id";	$db->sql_query($sql);	// Update the attachment download counts	if (sizeof($update_count))	{		$sql = 'UPDATE ' . ATTACHMENTS_TABLE . '			SET download_count = download_count + 1			WHERE ' . $db->sql_in_set('attach_id', array_unique($update_count));		$db->sql_query($sql);	}}// Get last post time for all global announcements// to keep proper forums trackingif ($topic_data['topic_type'] == POST_GLOBAL){	$sql = 'SELECT topic_last_post_time as forum_last_post_time		FROM ' . TOPICS_TABLE . '		WHERE forum_id = 0		ORDER BY topic_last_post_time DESC';	$result = $db->sql_query_limit($sql, 1);	$topic_data['forum_last_post_time'] = (int) $db->sql_fetchfield('forum_last_post_time');	$db->sql_freeresult($result);	$sql = 'SELECT mark_time as forum_mark_time		FROM ' . FORUMS_TRACK_TABLE . '		WHERE forum_id = 0			AND user_id = ' . $user->data['user_id'];	$result = $db->sql_query($sql);	$topic_data['forum_mark_time'] = (int) $db->sql_fetchfield('forum_mark_time');	$db->sql_freeresult($result);}// Only mark topic if it's currently unread. Also make sure we do not set topic tracking back if earlier pages are viewed.if (isset($topic_tracking_info[$topic_id]) && $topic_data['topic_last_post_time'] > $topic_tracking_info[$topic_id] && $max_post_time > $topic_tracking_info[$topic_id]){	markread('topic', (($topic_data['topic_type'] == POST_GLOBAL) ? 0 : $forum_id), $topic_id, $max_post_time);	// Update forum info	$all_marked_read = update_forum_tracking_info((($topic_data['topic_type'] == POST_GLOBAL) ? 0 : $forum_id), $topic_data['forum_last_post_time'], (isset($topic_data['forum_mark_time'])) ? $topic_data['forum_mark_time'] : false, false);}else{	$all_marked_read = true;}// If there are absolutely no more unread posts in this forum and unread posts shown, we can savely show the #unread linkif ($all_marked_read){	if ($post_unread)	{		$template->assign_vars(array(			'U_VIEW_UNREAD_POST'	=> '#unread',		));	}	else if (isset($topic_tracking_info[$topic_id]) && $topic_data['topic_last_post_time'] > $topic_tracking_info[$topic_id])	{		$template->assign_vars(array(			'U_VIEW_UNREAD_POST'	=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id&amp;view=unread") . '#unread',		));	}}else if (!$all_marked_read){	$last_page = ((floor($start / $config['posts_per_page']) + 1) == max(ceil($total_posts / $config['posts_per_page']), 1)) ? true : false;	// What can happen is that we are at the last displayed page. If so, we also display the #unread link based in $post_unread	if ($last_page && $post_unread)	{		$template->assign_vars(array(			'U_VIEW_UNREAD_POST'	=> '#unread',		));	}	else if (!$last_page)	{		$template->assign_vars(array(			'U_VIEW_UNREAD_POST'	=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id&amp;view=unread") . '#unread',		));	}}// let's set up quick_reply$s_quick_reply = false;if ($user->data['is_registered'] && $config['allow_quick_reply'] && ($topic_data['forum_flags'] & FORUM_FLAG_QUICK_REPLY) && $auth->acl_get('f_reply', $forum_id)){	// Quick reply enabled forum	$s_quick_reply = (($topic_data['forum_status'] == ITEM_UNLOCKED && $topic_data['topic_status'] == ITEM_UNLOCKED) || $auth->acl_get('m_edit', $forum_id)) ? true : false;}if ($s_can_vote || $s_quick_reply){	add_form_key('posting');	if ($s_quick_reply)	{		$s_attach_sig	= $config['allow_sig'] && $user->optionget('attachsig') && $auth->acl_get('f_sigs', $forum_id) && $auth->acl_get('u_sig');		$s_smilies		= $config['allow_smilies'] && $user->optionget('smilies') && $auth->acl_get('f_smilies', $forum_id);		$s_bbcode		= $config['allow_bbcode'] && $user->optionget('bbcode') && $auth->acl_get('f_bbcode', $forum_id);		$s_notify		= $config['allow_topic_notify'] && ($user->data['user_notify'] || $s_watching_topic['is_watching']);		$qr_hidden_fields = array(			'topic_cur_post_id'		=> (int) $topic_data['topic_last_post_id'],			'lastclick'				=> (int) time(),			'topic_id'				=> (int) $topic_data['topic_id'],			'forum_id'				=> (int) $forum_id,		);		// Originally we use checkboxes and check with isset(), so we only provide them if they would be checked		(!$s_bbcode)					? $qr_hidden_fields['disable_bbcode'] = 1		: true;		(!$s_smilies)					? $qr_hidden_fields['disable_smilies'] = 1		: true;		(!$config['allow_post_links'])	? $qr_hidden_fields['disable_magic_url'] = 1	: true;		($s_attach_sig)					? $qr_hidden_fields['attach_sig'] = 1			: true;		($s_notify)						? $qr_hidden_fields['notify'] = 1				: true;		($topic_data['topic_status'] == ITEM_LOCKED) ? $qr_hidden_fields['lock_topic'] = 1 : true;		$template->assign_vars(array(			'S_QUICK_REPLY'			=> true,			'U_QR_ACTION'			=> append_sid("{$phpbb_root_path}posting.$phpEx", "mode=reply&amp;f=$forum_id&amp;t=$topic_id"),			'QR_HIDDEN_FIELDS'		=> build_hidden_fields($qr_hidden_fields),			'SUBJECT'				=> 'Re: ' . censor_text($topic_data['topic_title']),		));	}}// now I have the urge to wash my hands :(// We overwrite $_REQUEST['f'] if there is no forum specified// to be able to display the correct online list.// One downside is that the user currently viewing this topic/post is not taken into account.if (empty($_REQUEST['f'])){	$_REQUEST['f'] = $forum_id;}// We need to do the same with the topic_id. See #53025.if (empty($_REQUEST['t']) && !empty($topic_id)){	$_REQUEST['t'] = $topic_id;}// Output the pagepage_header($user->lang['VIEW_TOPIC'] . ' - ' . $topic_data['topic_title'], true, $forum_id);$template->set_filenames(array(	'body' => ($view == 'print') ? 'viewtopic_print.html' : 'viewtopic_body.html'));make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"), $forum_id);page_footer();?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class ucp_zebra_info{	function module()	{		return array(			'filename'	=> 'ucp_zebra',			'title'		=> 'UCP_ZEBRA',			'version'	=> '1.0.0',			'modes'		=> array(				'friends'		=> array('title' => 'UCP_ZEBRA_FRIENDS', 'auth' => '', 'cat' => array('UCP_ZEBRA')),				'foes'			=> array('title' => 'UCP_ZEBRA_FOES', 'auth' => '', 'cat' => array('UCP_ZEBRA')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2006, 2008 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** This class holds the code shared by the two default 3.0.x CAPTCHAs.** @package VC*/class phpbb_default_captcha{	var $confirm_id;	var $confirm_code;	var $code;	var $seed;	var $attempts = 0;	var $type;	var $solved = 0;	var $captcha_vars = false;	function init($type)	{		global $config, $db, $user;		// read input		$this->confirm_id = request_var('confirm_id', '');		$this->confirm_code = request_var('confirm_code', '');		$refresh = request_var('refresh_vc', false) && $config['confirm_refresh'];		$this->type = (int) $type;		if (!strlen($this->confirm_id) || !$this->load_code())		{			// we have no confirm ID, better get ready to display something			$this->generate_code();		}		else if ($refresh)		{			$this->regenerate_code();		}	}	function execute_demo()	{		global $user;		$this->code = gen_rand_string_friendly(mt_rand(CAPTCHA_MIN_CHARS, CAPTCHA_MAX_CHARS));		$this->seed = hexdec(substr(unique_id(), 4, 10));		// compute $seed % 0x7fffffff		$this->seed -= 0x7fffffff * floor($this->seed / 0x7fffffff);		$captcha = new captcha();		define('IMAGE_OUTPUT', 1);		$captcha->execute($this->code, $this->seed);	}	function execute()	{		if (empty($this->code))		{			if (!$this->load_code())			{				// invalid request, bail out				return false;			}		}		$captcha = new captcha();		define('IMAGE_OUTPUT', 1);		$captcha->execute($this->code, $this->seed);	}	function get_template()	{		global $config, $user, $template, $phpEx, $phpbb_root_path;		if ($this->is_solved())		{			return false;		}		else		{			$link = append_sid($phpbb_root_path . 'ucp.' . $phpEx,  'mode=confirm&amp;confirm_id=' . $this->confirm_id . '&amp;type=' . $this->type);			$explain = $user->lang(($this->type != CONFIRM_POST) ? 'CONFIRM_EXPLAIN' : 'POST_CONFIRM_EXPLAIN', '<a href="mailto:' . htmlspecialchars($config['board_contact']) . '">', '</a>');			$template->assign_vars(array(				'CONFIRM_IMAGE_LINK'		=> $link,				'CONFIRM_IMAGE'				=> '<img src="' . $link . '" />',				'CONFIRM_IMG'				=> '<img src="' . $link . '" />',				'CONFIRM_ID'				=> $this->confirm_id,				'S_CONFIRM_CODE'			=> true,				'S_TYPE'					=> $this->type,				'S_CONFIRM_REFRESH'			=> ($config['enable_confirm'] && $config['confirm_refresh'] && $this->type == CONFIRM_REG) ? true : false,				'L_CONFIRM_EXPLAIN'			=> $explain,			));			return 'captcha_default.html';		}	}	function get_demo_template($id)	{		global $config, $user, $template, $phpbb_admin_path, $phpEx;		$variables = '';		if (is_array($this->captcha_vars))		{			foreach ($this->captcha_vars as $captcha_var => $template_var)			{				$variables .= '&amp;' . rawurlencode($captcha_var) . '=' . request_var($captcha_var, (int) $config[$captcha_var]);			}		}		// acp_captcha has a delivery function; let's use it		$template->assign_vars(array(			'CONFIRM_IMAGE'		=> append_sid($phpbb_admin_path . 'index.' . $phpEx, 'captcha_demo=1&amp;mode=visual&amp;i=' . $id . '&amp;select_captcha=' . $this->get_class_name()) . $variables,			'CONFIRM_ID'		=> $this->confirm_id,		));		return 'captcha_default_acp_demo.html';	}	function get_hidden_fields()	{		$hidden_fields = array();		// this is required for posting.php - otherwise we would forget about the captcha being already solved		if ($this->solved)		{			$hidden_fields['confirm_code'] = $this->confirm_code;		}		$hidden_fields['confirm_id'] = $this->confirm_id;		return $hidden_fields;	}	function garbage_collect($type)	{		global $db, $config;		$sql = 'SELECT DISTINCT c.session_id			FROM ' . CONFIRM_TABLE . ' c			LEFT JOIN ' . SESSIONS_TABLE . ' s ON (c.session_id = s.session_id)			WHERE s.session_id IS NULL' .				((empty($type)) ? '' : ' AND c.confirm_type = ' . (int) $type);		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			$sql_in = array();			do			{				$sql_in[] = (string) $row['session_id'];			}			while ($row = $db->sql_fetchrow($result));			if (sizeof($sql_in))			{				$sql = 'DELETE FROM ' . CONFIRM_TABLE . '					WHERE ' . $db->sql_in_set('session_id', $sql_in);				$db->sql_query($sql);			}		}		$db->sql_freeresult($result);	}	function uninstall()	{		$this->garbage_collect(0);	}	function install()	{		return;	}	function validate()	{		global $config, $db, $user;		if (empty($user->lang))		{			$user->setup();		}		$error = '';		if (!$this->confirm_id)		{			$error = $user->lang['CONFIRM_CODE_WRONG'];		}		else		{			if ($this->check_code())			{				// $this->delete_code(); commented out to allow posting.php to repeat the question				$this->solved = true;			}			else			{				$error = $user->lang['CONFIRM_CODE_WRONG'];			}		}		if (strlen($error))		{			// okay, incorrect answer. Let's ask a new question.			$this->new_attempt();			return $error;		}		else		{			return false;		}	}	/**	* The old way to generate code, suitable for GD and non-GD. Resets the internal state.	*/	function generate_code()	{		global $db, $user;		$this->code = gen_rand_string_friendly(mt_rand(CAPTCHA_MIN_CHARS, CAPTCHA_MAX_CHARS));		$this->confirm_id = md5(unique_id($user->ip));		$this->seed = hexdec(substr(unique_id(), 4, 10));		$this->solved = 0;		// compute $seed % 0x7fffffff		$this->seed -= 0x7fffffff * floor($this->seed / 0x7fffffff);		$sql = 'INSERT INTO ' . CONFIRM_TABLE . ' ' . $db->sql_build_array('INSERT', array(				'confirm_id'	=> (string) $this->confirm_id,				'session_id'	=> (string) $user->session_id,				'confirm_type'	=> (int) $this->type,				'code'			=> (string) $this->code,				'seed'			=> (int) $this->seed)		);		$db->sql_query($sql);	}	/**	* New Question, if desired.	*/	function regenerate_code()	{		global $db, $user;		$this->code = gen_rand_string_friendly(mt_rand(CAPTCHA_MIN_CHARS, CAPTCHA_MAX_CHARS));		$this->seed = hexdec(substr(unique_id(), 4, 10));		$this->solved = 0;		// compute $seed % 0x7fffffff		$this->seed -= 0x7fffffff * floor($this->seed / 0x7fffffff);		$sql = 'UPDATE ' . CONFIRM_TABLE . ' SET ' . $db->sql_build_array('UPDATE', array(				'code'			=> (string) $this->code,				'seed'			=> (int) $this->seed)) . '				WHERE				confirm_id = \'' . $db->sql_escape($this->confirm_id) . '\'					AND session_id = \'' . $db->sql_escape($user->session_id) . '\'';		$db->sql_query($sql);	}	/**	* New Question, if desired.	*/	function new_attempt()	{		global $db, $user;		$this->code = gen_rand_string_friendly(mt_rand(CAPTCHA_MIN_CHARS, CAPTCHA_MAX_CHARS));		$this->seed = hexdec(substr(unique_id(), 4, 10));		$this->solved = 0;		// compute $seed % 0x7fffffff		$this->seed -= 0x7fffffff * floor($this->seed / 0x7fffffff);		$sql = 'UPDATE ' . CONFIRM_TABLE . ' SET ' . $db->sql_build_array('UPDATE', array(				'code'			=> (string) $this->code,				'seed'			=> (int) $this->seed)) . '				, attempts = attempts + 1				WHERE				confirm_id = \'' . $db->sql_escape($this->confirm_id) . '\'					AND session_id = \'' . $db->sql_escape($user->session_id) . '\'';		$db->sql_query($sql);	}	/**	* Look up everything we need for painting&checking.	*/	function load_code()	{		global $db, $user;		$sql = 'SELECT code, seed, attempts			FROM ' . CONFIRM_TABLE . "			WHERE confirm_id = '" . $db->sql_escape($this->confirm_id) . "'				AND session_id = '" . $db->sql_escape($user->session_id) . "'				AND confirm_type = " . $this->type;		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			$this->code = $row['code'];			$this->seed = $row['seed'];			$this->attempts = $row['attempts'];			return true;		}		return false;	}	function check_code()	{		return (strcasecmp($this->code, $this->confirm_code) === 0);	}	function delete_code()	{		global $db, $user;		$sql = 'DELETE FROM ' . CONFIRM_TABLE . "			WHERE confirm_id = '" . $db->sql_escape($confirm_id) . "'				AND session_id = '" . $db->sql_escape($user->session_id) . "'				AND confirm_type = " . $this->type;		$db->sql_query($sql);	}	function get_attempt_count()	{		return $this->attempts;	}	function reset()	{		global $db, $user;		$sql = 'DELETE FROM ' . CONFIRM_TABLE . "			WHERE session_id = '" . $db->sql_escape($user->session_id) . "'				AND confirm_type = " . (int) $this->type;		$db->sql_query($sql);		// we leave the class usable by generating a new question		$this->generate_code();	}	function is_solved()	{		if (request_var('confirm_code', false) && $this->solved === 0)		{			$this->validate();		}		return (bool) $this->solved;	}	/**	*  API function	*/	function has_config()	{		return false;	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_inactive{	var $u_action;	var $p_master;	function acp_inactive(&$p_master)	{		$this->p_master = &$p_master;	}	function main($id, $mode)	{		global $config, $db, $user, $auth, $template;		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $table_prefix;		include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		$user->add_lang('memberlist');		$action = request_var('action', '');		$mark	= (isset($_REQUEST['mark'])) ? request_var('mark', array(0)) : array();		$start	= request_var('start', 0);		$submit = isset($_POST['submit']);		// Sort keys		$sort_days	= request_var('st', 0);		$sort_key	= request_var('sk', 'i');		$sort_dir	= request_var('sd', 'd');		$form_key = 'acp_inactive';		add_form_key($form_key);		// We build the sort key and per page settings here, because they may be needed later		// Number of entries to display		$per_page = request_var('users_per_page', (int) $config['topics_per_page']);		// Sorting		$limit_days = array(0 => $user->lang['ALL_ENTRIES'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);		$sort_by_text = array('i' => $user->lang['SORT_INACTIVE'], 'j' => $user->lang['SORT_REG_DATE'], 'l' => $user->lang['SORT_LAST_VISIT'], 'd' => $user->lang['SORT_LAST_REMINDER'], 'r' => $user->lang['SORT_REASON'], 'u' => $user->lang['SORT_USERNAME'], 'p' => $user->lang['SORT_POSTS'], 'e' => $user->lang['SORT_REMINDER']);		$sort_by_sql = array('i' => 'user_inactive_time', 'j' => 'user_regdate', 'l' => 'user_lastvisit', 'd' => 'user_reminded_time', 'r' => 'user_inactive_reason', 'u' => 'username_clean', 'p' => 'user_posts', 'e' => 'user_reminded');		$s_limit_days = $s_sort_key = $s_sort_dir = $u_sort_param = '';		gen_sort_selects($limit_days, $sort_by_text, $sort_days, $sort_key, $sort_dir, $s_limit_days, $s_sort_key, $s_sort_dir, $u_sort_param);		if ($submit && sizeof($mark))		{			if ($action !== 'delete' && !check_form_key($form_key))			{				trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action), E_USER_WARNING);			}			switch ($action)			{				case 'activate':				case 'delete':					$sql = 'SELECT user_id, username						FROM ' . USERS_TABLE . '						WHERE ' . $db->sql_in_set('user_id', $mark);					$result = $db->sql_query($sql);					$user_affected = array();					while ($row = $db->sql_fetchrow($result))					{						$user_affected[$row['user_id']] = $row['username'];					}					$db->sql_freeresult($result);					if ($action == 'activate')					{						// Get those 'being activated'...						$sql = 'SELECT user_id, username' . (($config['require_activation'] == USER_ACTIVATION_ADMIN) ? ', user_email, user_lang' : '') . '							FROM ' . USERS_TABLE . '							WHERE ' . $db->sql_in_set('user_id', $mark) . '								AND user_type = ' . USER_INACTIVE;						$result = $db->sql_query($sql);						$inactive_users = array();						while ($row = $db->sql_fetchrow($result))						{							$inactive_users[] = $row;						}						$db->sql_freeresult($result);						user_active_flip('activate', $mark);						if ($config['require_activation'] == USER_ACTIVATION_ADMIN && !empty($inactive_users))						{							include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);							$messenger = new messenger(false);							foreach ($inactive_users as $row)							{								$messenger->template('admin_welcome_activated', $row['user_lang']);								$messenger->to($row['user_email'], $row['username']);								$messenger->anti_abuse_headers($config, $user);								$messenger->assign_vars(array(									'USERNAME'	=> htmlspecialchars_decode($row['username']))								);								$messenger->send(NOTIFY_EMAIL);							}							$messenger->save_queue();						}						if (!empty($inactive_users))						{							foreach ($inactive_users as $row)							{								add_log('admin', 'LOG_USER_ACTIVE', $row['username']);								add_log('user', $row['user_id'], 'LOG_USER_ACTIVE_USER');							}						}						// For activate we really need to redirect, else a refresh can result in users being deactivated again						$u_action = $this->u_action . "&amp;$u_sort_param&amp;start=$start";						$u_action .= ($per_page != $config['topics_per_page']) ? "&amp;users_per_page=$per_page" : '';						redirect($u_action);					}					else if ($action == 'delete')					{						if (confirm_box(true))						{							if (!$auth->acl_get('a_userdel'))							{								trigger_error($user->lang['NO_AUTH_OPERATION'] . adm_back_link($this->u_action), E_USER_WARNING);							}							foreach ($mark as $user_id)							{								user_delete('retain', $user_id, $user_affected[$user_id]);							}							add_log('admin', 'LOG_INACTIVE_' . strtoupper($action), implode(', ', $user_affected));						}						else						{							$s_hidden_fields = array(								'mode'			=> $mode,								'action'		=> $action,								'mark'			=> $mark,								'submit'		=> 1,								'start'			=> $start,							);							confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields($s_hidden_fields));						}					}				break;				case 'remind':					if (empty($config['email_enable']))					{						trigger_error($user->lang['EMAIL_DISABLED'] . adm_back_link($this->u_action), E_USER_WARNING);					}					$sql = 'SELECT user_id, username, user_email, user_lang, user_jabber, user_notify_type, user_regdate, user_actkey						FROM ' . USERS_TABLE . '						WHERE ' . $db->sql_in_set('user_id', $mark) . '							AND user_inactive_reason';					$sql .= ($config['require_activation'] == USER_ACTIVATION_ADMIN) ? ' = ' . INACTIVE_REMIND : ' <> ' . INACTIVE_MANUAL;					$result = $db->sql_query($sql);					if ($row = $db->sql_fetchrow($result))					{						// Send the messages						include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);						$messenger = new messenger();						$usernames = $user_ids = array();						do						{							$messenger->template('user_remind_inactive', $row['user_lang']);							$messenger->to($row['user_email'], $row['username']);							$messenger->im($row['user_jabber'], $row['username']);							$messenger->anti_abuse_headers($config, $user);							$messenger->assign_vars(array(								'USERNAME'		=> htmlspecialchars_decode($row['username']),								'REGISTER_DATE'	=> $user->format_date($row['user_regdate'], false, true),								'U_ACTIVATE'	=> generate_board_url() . "/ucp.$phpEx?mode=activate&u=" . $row['user_id'] . '&k=' . $row['user_actkey'])							);							$messenger->send($row['user_notify_type']);							$usernames[] = $row['username'];							$user_ids[] = (int) $row['user_id'];						}						while ($row = $db->sql_fetchrow($result));						$messenger->save_queue();						// Add the remind state to the database						$sql = 'UPDATE ' . USERS_TABLE . '							SET user_reminded = user_reminded + 1,								user_reminded_time = ' . time() . '							WHERE ' . $db->sql_in_set('user_id', $user_ids);						$db->sql_query($sql);						add_log('admin', 'LOG_INACTIVE_REMIND', implode(', ', $usernames));						unset($usernames);					}					$db->sql_freeresult($result);					// For remind we really need to redirect, else a refresh can result in more than one reminder					$u_action = $this->u_action . "&amp;$u_sort_param&amp;start=$start";					$u_action .= ($per_page != $config['topics_per_page']) ? "&amp;users_per_page=$per_page" : '';					redirect($u_action);				break;			}		}		// Define where and sort sql for use in displaying logs		$sql_where = ($sort_days) ? (time() - ($sort_days * 86400)) : 0;		$sql_sort = $sort_by_sql[$sort_key] . ' ' . (($sort_dir == 'd') ? 'DESC' : 'ASC');		$inactive = array();		$inactive_count = 0;		$start = view_inactive_users($inactive, $inactive_count, $per_page, $start, $sql_where, $sql_sort);		foreach ($inactive as $row)		{			$template->assign_block_vars('inactive', array(				'INACTIVE_DATE'	=> $user->format_date($row['user_inactive_time']),				'REMINDED_DATE'	=> $user->format_date($row['user_reminded_time']),				'JOINED'		=> $user->format_date($row['user_regdate']),				'LAST_VISIT'	=> (!$row['user_lastvisit']) ? ' - ' : $user->format_date($row['user_lastvisit']),				'REASON'		=> $row['inactive_reason'],				'USER_ID'		=> $row['user_id'],				'POSTS'			=> ($row['user_posts']) ? $row['user_posts'] : 0,				'REMINDED'		=> $row['user_reminded'],				'REMINDED_EXPLAIN'	=> $user->lang('USER_LAST_REMINDED', (int) $row['user_reminded'], $user->format_date($row['user_reminded_time'])),				'USERNAME_FULL'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour'], false, append_sid("{$phpbb_admin_path}index.$phpEx", 'i=users&amp;mode=overview')),				'USERNAME'			=> get_username_string('username', $row['user_id'], $row['username'], $row['user_colour']),				'USER_COLOR'		=> get_username_string('colour', $row['user_id'], $row['username'], $row['user_colour']),				'U_USER_ADMIN'	=> append_sid("{$phpbb_admin_path}index.$phpEx", "i=users&amp;mode=overview&amp;u={$row['user_id']}"),				'U_SEARCH_USER'	=> ($auth->acl_get('u_search')) ? append_sid("{$phpbb_root_path}search.$phpEx", "author_id={$row['user_id']}&amp;sr=posts") : '',			));		}		$option_ary = array('activate' => 'ACTIVATE', 'delete' => 'DELETE');		if ($config['email_enable'])		{			$option_ary += array('remind' => 'REMIND');		}		$template->assign_vars(array(			'S_INACTIVE_USERS'		=> true,			'S_INACTIVE_OPTIONS'	=> build_select($option_ary),			'S_LIMIT_DAYS'	=> $s_limit_days,			'S_SORT_KEY'	=> $s_sort_key,			'S_SORT_DIR'	=> $s_sort_dir,			'S_ON_PAGE'		=> on_page($inactive_count, $per_page, $start),			'PAGINATION'	=> generate_pagination($this->u_action . "&amp;$u_sort_param&amp;users_per_page=$per_page", $inactive_count, $per_page, $start, true),			'USERS_PER_PAGE'	=> $per_page,			'U_ACTION'		=> $this->u_action . "&amp;$u_sort_param&amp;users_per_page=$per_page&amp;start=$start",		));		$this->tpl_name = 'acp_inactive';		$this->page_title = 'ACP_INACTIVE_USERS';	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** mcp_main* Handling mcp actions* @package mcp*/class mcp_main{	var $p_master;	var $u_action;	function mcp_main(&$p_master)	{		$this->p_master = &$p_master;	}	function main($id, $mode)	{		global $auth, $db, $user, $template, $action;		global $config, $phpbb_root_path, $phpEx;		$quickmod = ($mode == 'quickmod') ? true : false;		switch ($action)		{			case 'lock':			case 'unlock':				$topic_ids = (!$quickmod) ? request_var('topic_id_list', array(0)) : array(request_var('t', 0));				if (!sizeof($topic_ids))				{					trigger_error('NO_TOPIC_SELECTED');				}				lock_unlock($action, $topic_ids);			break;			case 'lock_post':			case 'unlock_post':				$post_ids = (!$quickmod) ? request_var('post_id_list', array(0)) : array(request_var('p', 0));				if (!sizeof($post_ids))				{					trigger_error('NO_POST_SELECTED');				}				lock_unlock($action, $post_ids);			break;			case 'make_announce':			case 'make_sticky':			case 'make_global':			case 'make_normal':				$topic_ids = (!$quickmod) ? request_var('topic_id_list', array(0)) : array(request_var('t', 0));				if (!sizeof($topic_ids))				{					trigger_error('NO_TOPIC_SELECTED');				}				change_topic_type($action, $topic_ids);			break;			case 'move':				$user->add_lang('viewtopic');				$topic_ids = (!$quickmod) ? request_var('topic_id_list', array(0)) : array(request_var('t', 0));				if (!sizeof($topic_ids))				{					trigger_error('NO_TOPIC_SELECTED');				}				mcp_move_topic($topic_ids);			break;			case 'fork':				$user->add_lang('viewtopic');				$topic_ids = (!$quickmod) ? request_var('topic_id_list', array(0)) : array(request_var('t', 0));				if (!sizeof($topic_ids))				{					trigger_error('NO_TOPIC_SELECTED');				}				mcp_fork_topic($topic_ids);			break;			case 'delete_topic':				$user->add_lang('viewtopic');				$topic_ids = (!$quickmod) ? request_var('topic_id_list', array(0)) : array(request_var('t', 0));				if (!sizeof($topic_ids))				{					trigger_error('NO_TOPIC_SELECTED');				}				mcp_delete_topic($topic_ids);			break;			case 'delete_post':				$user->add_lang('posting');				$post_ids = (!$quickmod) ? request_var('post_id_list', array(0)) : array(request_var('p', 0));				if (!sizeof($post_ids))				{					trigger_error('NO_POST_SELECTED');				}				mcp_delete_post($post_ids);			break;		}		switch ($mode)		{			case 'front':				include($phpbb_root_path . 'includes/mcp/mcp_front.' . $phpEx);				$user->add_lang('acp/common');				mcp_front_view($id, $mode, $action);				$this->tpl_name = 'mcp_front';				$this->page_title = 'MCP_MAIN';			break;			case 'forum_view':				include($phpbb_root_path . 'includes/mcp/mcp_forum.' . $phpEx);				$user->add_lang('viewforum');				$forum_id = request_var('f', 0);				$forum_info = get_forum_data($forum_id, 'm_', true);				if (!sizeof($forum_info))				{					$this->main('main', 'front');					return;				}				$forum_info = $forum_info[$forum_id];				mcp_forum_view($id, $mode, $action, $forum_info);				$this->tpl_name = 'mcp_forum';				$this->page_title = 'MCP_MAIN_FORUM_VIEW';			break;			case 'topic_view':				include($phpbb_root_path . 'includes/mcp/mcp_topic.' . $phpEx);				mcp_topic_view($id, $mode, $action);				$this->tpl_name = 'mcp_topic';				$this->page_title = 'MCP_MAIN_TOPIC_VIEW';			break;			case 'post_details':				include($phpbb_root_path . 'includes/mcp/mcp_post.' . $phpEx);				mcp_post_details($id, $mode, $action);				$this->tpl_name = ($action == 'whois') ? 'mcp_whois' : 'mcp_post';				$this->page_title = 'MCP_MAIN_POST_DETAILS';			break;			default:				trigger_error('NO_MODE', E_USER_ERROR);			break;		}	}}/*** Lock/Unlock Topic/Post*/function lock_unlock($action, $ids){	global $auth, $user, $db, $phpEx, $phpbb_root_path;	if ($action == 'lock' || $action == 'unlock')	{		$table = TOPICS_TABLE;		$sql_id = 'topic_id';		$set_id = 'topic_status';		$l_prefix = 'TOPIC';	}	else	{		$table = POSTS_TABLE;		$sql_id = 'post_id';		$set_id = 'post_edit_locked';		$l_prefix = 'POST';	}	$orig_ids = $ids;	if (!check_ids($ids, $table, $sql_id, array('m_lock')))	{		// Make sure that for f_user_lock only the lock action is triggered.		if ($action != 'lock')		{			return;		}		$ids = $orig_ids;		if (!check_ids($ids, $table, $sql_id, array('f_user_lock')))		{			return;		}	}	unset($orig_ids);	$redirect = request_var('redirect', build_url(array('action', 'quickmod')));	$s_hidden_fields = build_hidden_fields(array(		$sql_id . '_list'	=> $ids,		'action'			=> $action,		'redirect'			=> $redirect)	);	$success_msg = '';	if (confirm_box(true))	{		$sql = "UPDATE $table			SET $set_id = " . (($action == 'lock' || $action == 'lock_post') ? ITEM_LOCKED : ITEM_UNLOCKED) . '			WHERE ' . $db->sql_in_set($sql_id, $ids);		$db->sql_query($sql);		$data = ($action == 'lock' || $action == 'unlock') ? get_topic_data($ids) : get_post_data($ids);		foreach ($data as $id => $row)		{			add_log('mod', $row['forum_id'], $row['topic_id'], 'LOG_' . strtoupper($action), $row['topic_title']);		}		$success_msg = $l_prefix . ((sizeof($ids) == 1) ? '' : 'S') . '_' . (($action == 'lock' || $action == 'lock_post') ? 'LOCKED' : 'UNLOCKED') . '_SUCCESS';	}	else	{		confirm_box(false, strtoupper($action) . '_' . $l_prefix . ((sizeof($ids) == 1) ? '' : 'S'), $s_hidden_fields);	}	$redirect = request_var('redirect', "index.$phpEx");	$redirect = reapply_sid($redirect);	if (!$success_msg)	{		redirect($redirect);	}	else	{		meta_refresh(2, $redirect);		trigger_error($user->lang[$success_msg] . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $redirect . '">', '</a>'));	}}/*** Change Topic Type*/function change_topic_type($action, $topic_ids){	global $auth, $user, $db, $phpEx, $phpbb_root_path;	switch ($action)	{		case 'make_announce':			$new_topic_type = POST_ANNOUNCE;			$check_acl = 'f_announce';			$l_new_type = (sizeof($topic_ids) == 1) ? 'MCP_MAKE_ANNOUNCEMENT' : 'MCP_MAKE_ANNOUNCEMENTS';		break;		case 'make_global':			$new_topic_type = POST_GLOBAL;			$check_acl = 'f_announce';			$l_new_type = (sizeof($topic_ids) == 1) ? 'MCP_MAKE_GLOBAL' : 'MCP_MAKE_GLOBALS';		break;		case 'make_sticky':			$new_topic_type = POST_STICKY;			$check_acl = 'f_sticky';			$l_new_type = (sizeof($topic_ids) == 1) ? 'MCP_MAKE_STICKY' : 'MCP_MAKE_STICKIES';		break;		default:			$new_topic_type = POST_NORMAL;			$check_acl = false;			$l_new_type = (sizeof($topic_ids) == 1) ? 'MCP_MAKE_NORMAL' : 'MCP_MAKE_NORMALS';		break;	}	$forum_id = check_ids($topic_ids, TOPICS_TABLE, 'topic_id', $check_acl, true);	if ($forum_id === false)	{		return;	}	$redirect = request_var('redirect', build_url(array('action', 'quickmod')));	$s_hidden_fields = array(		'topic_id_list'	=> $topic_ids,		'f'				=> $forum_id,		'action'		=> $action,		'redirect'		=> $redirect,	);	$success_msg = '';	if (confirm_box(true))	{		if ($new_topic_type != POST_GLOBAL)		{			$sql = 'UPDATE ' . TOPICS_TABLE . "				SET topic_type = $new_topic_type				WHERE " . $db->sql_in_set('topic_id', $topic_ids) . '					AND forum_id <> 0';			$db->sql_query($sql);			// Reset forum id if a global topic is within the array			$to_forum_id = request_var('to_forum_id', 0);			if ($to_forum_id)			{				$sql = 'UPDATE ' . TOPICS_TABLE . "					SET topic_type = $new_topic_type, forum_id = $to_forum_id					WHERE " . $db->sql_in_set('topic_id', $topic_ids) . '						AND forum_id = 0';				$db->sql_query($sql);				// Update forum_ids for all posts				$sql = 'UPDATE ' . POSTS_TABLE . "					SET forum_id = $to_forum_id					WHERE " . $db->sql_in_set('topic_id', $topic_ids) . '						AND forum_id = 0';				$db->sql_query($sql);				// Do a little forum sync stuff				$sql = 'SELECT SUM(t.topic_replies + t.topic_approved) as topic_posts, COUNT(t.topic_approved) as topics_authed					FROM ' . TOPICS_TABLE . ' t					WHERE ' . $db->sql_in_set('t.topic_id', $topic_ids);				$result = $db->sql_query($sql);				$row_data = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$sync_sql = array();				if ($row_data['topic_posts'])				{					$sync_sql[$to_forum_id][]	= 'forum_posts = forum_posts + ' . (int) $row_data['topic_posts'];				}				if ($row_data['topics_authed'])				{					$sync_sql[$to_forum_id][]	= 'forum_topics = forum_topics + ' . (int) $row_data['topics_authed'];				}				$sync_sql[$to_forum_id][]	= 'forum_topics_real = forum_topics_real + ' . (int) sizeof($topic_ids);				foreach ($sync_sql as $forum_id_key => $array)				{					$sql = 'UPDATE ' . FORUMS_TABLE . '						SET ' . implode(', ', $array) . '						WHERE forum_id = ' . $forum_id_key;					$db->sql_query($sql);				}				sync('forum', 'forum_id', $to_forum_id);			}		}		else		{			// Get away with those topics already being a global announcement by re-calculating $topic_ids			$sql = 'SELECT topic_id				FROM ' . TOPICS_TABLE . '				WHERE ' . $db->sql_in_set('topic_id', $topic_ids) . '					AND forum_id <> 0';			$result = $db->sql_query($sql);			$topic_ids = array();			while ($row = $db->sql_fetchrow($result))			{				$topic_ids[] = $row['topic_id'];			}			$db->sql_freeresult($result);			if (sizeof($topic_ids))			{				// Delete topic shadows for global announcements				$sql = 'DELETE FROM ' . TOPICS_TABLE . '					WHERE ' . $db->sql_in_set('topic_moved_id', $topic_ids);				$db->sql_query($sql);				$sql = 'UPDATE ' . TOPICS_TABLE . "					SET topic_type = $new_topic_type, forum_id = 0						WHERE " . $db->sql_in_set('topic_id', $topic_ids);				$db->sql_query($sql);				// Update forum_ids for all posts				$sql = 'UPDATE ' . POSTS_TABLE . '					SET forum_id = 0					WHERE ' . $db->sql_in_set('topic_id', $topic_ids);				$db->sql_query($sql);				// Do a little forum sync stuff				$sql = 'SELECT SUM(t.topic_replies + t.topic_approved) as topic_posts, COUNT(t.topic_approved) as topics_authed					FROM ' . TOPICS_TABLE . ' t					WHERE ' . $db->sql_in_set('t.topic_id', $topic_ids);				$result = $db->sql_query($sql);				$row_data = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				$sync_sql = array();				if ($row_data['topic_posts'])				{					$sync_sql[$forum_id][]	= 'forum_posts = forum_posts - ' . (int) $row_data['topic_posts'];				}				if ($row_data['topics_authed'])				{					$sync_sql[$forum_id][]	= 'forum_topics = forum_topics - ' . (int) $row_data['topics_authed'];				}				$sync_sql[$forum_id][]	= 'forum_topics_real = forum_topics_real - ' . (int) sizeof($topic_ids);				foreach ($sync_sql as $forum_id_key => $array)				{					$sql = 'UPDATE ' . FORUMS_TABLE . '						SET ' . implode(', ', $array) . '						WHERE forum_id = ' . $forum_id_key;					$db->sql_query($sql);				}				sync('forum', 'forum_id', $forum_id);			}		}		$success_msg = (sizeof($topic_ids) == 1) ? 'TOPIC_TYPE_CHANGED' : 'TOPICS_TYPE_CHANGED';		if (sizeof($topic_ids))		{			$data = get_topic_data($topic_ids);			foreach ($data as $topic_id => $row)			{				add_log('mod', $forum_id, $topic_id, 'LOG_TOPIC_TYPE_CHANGED', $row['topic_title']);			}		}	}	else	{		// Global topic involved?		$global_involved = false;		if ($new_topic_type != POST_GLOBAL)		{			$sql = 'SELECT forum_id				FROM ' . TOPICS_TABLE . '				WHERE ' . $db->sql_in_set('topic_id', $topic_ids) . '					AND forum_id = 0';			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($row)			{				$global_involved = true;			}		}		if ($global_involved)		{			global $template;			$template->assign_vars(array(				'S_FORUM_SELECT'		=> make_forum_select(request_var('f', $forum_id), false, false, true, true),				'S_CAN_LEAVE_SHADOW'	=> false,				'ADDITIONAL_MSG'		=> (sizeof($topic_ids) == 1) ? $user->lang['SELECT_FORUM_GLOBAL_ANNOUNCEMENT'] : $user->lang['SELECT_FORUM_GLOBAL_ANNOUNCEMENTS'])			);			confirm_box(false, $l_new_type, build_hidden_fields($s_hidden_fields), 'mcp_move.html');		}		else		{			confirm_box(false, $l_new_type, build_hidden_fields($s_hidden_fields));		}	}	$redirect = request_var('redirect', "index.$phpEx");	$redirect = reapply_sid($redirect);	if (!$success_msg)	{		redirect($redirect);	}	else	{		meta_refresh(2, $redirect);		trigger_error($user->lang[$success_msg] . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $redirect . '">', '</a>'));	}}/*** Move Topic*/function mcp_move_topic($topic_ids){	global $auth, $user, $db, $template;	global $phpEx, $phpbb_root_path;	// Here we limit the operation to one forum only	$forum_id = check_ids($topic_ids, TOPICS_TABLE, 'topic_id', array('m_move'), true);	if ($forum_id === false)	{		return;	}	$to_forum_id = request_var('to_forum_id', 0);	$redirect = request_var('redirect', build_url(array('action', 'quickmod')));	$additional_msg = $success_msg = '';	$s_hidden_fields = build_hidden_fields(array(		'topic_id_list'	=> $topic_ids,		'f'				=> $forum_id,		'action'		=> 'move',		'redirect'		=> $redirect)	);	if ($to_forum_id)	{		$forum_data = get_forum_data($to_forum_id, 'f_post');		if (!sizeof($forum_data))		{			$additional_msg = $user->lang['FORUM_NOT_EXIST'];		}		else		{			$forum_data = $forum_data[$to_forum_id];			if ($forum_data['forum_type'] != FORUM_POST)			{				$additional_msg = $user->lang['FORUM_NOT_POSTABLE'];			}			else if (!$auth->acl_get('f_post', $to_forum_id) || (!$auth->acl_get('m_approve', $to_forum_id) && !$auth->acl_get('f_noapprove', $to_forum_id)))			{				$additional_msg = $user->lang['USER_CANNOT_POST'];			}			else if ($forum_id == $to_forum_id)			{				$additional_msg = $user->lang['CANNOT_MOVE_SAME_FORUM'];			}		}	}	else if (isset($_POST['confirm']))	{		$additional_msg = $user->lang['FORUM_NOT_EXIST'];	}	if (!$to_forum_id || $additional_msg)	{		unset($_POST['confirm']);		unset($_REQUEST['confirm_key']);	}	if (confirm_box(true))	{		$topic_data = get_topic_data($topic_ids);		$leave_shadow = (isset($_POST['move_leave_shadow'])) ? true : false;		$forum_sync_data = array();		$forum_sync_data[$forum_id] = current($topic_data);		$forum_sync_data[$to_forum_id] = $forum_data;		// Real topics added to target forum		$topics_moved = sizeof($topic_data);		// Approved topics added to target forum		$topics_authed_moved = 0;		// Posts (topic replies + topic post if approved) added to target forum		$topic_posts_added = 0;		// Posts (topic replies + topic post if approved and not global announcement) removed from source forum		$topic_posts_removed = 0;		// Real topics removed from source forum (all topics without global announcements)		$topics_removed = 0;		// Approved topics removed from source forum (except global announcements)		$topics_authed_removed = 0;		foreach ($topic_data as $topic_id => $topic_info)		{			if ($topic_info['topic_approved'])			{				$topics_authed_moved++;				$topic_posts_added++;			}			$topic_posts_added += $topic_info['topic_replies'];			if ($topic_info['topic_type'] != POST_GLOBAL)			{				$topics_removed++;				$topic_posts_removed += $topic_info['topic_replies'];				if ($topic_info['topic_approved'])				{					$topics_authed_removed++;					$topic_posts_removed++;				}			}		}		$db->sql_transaction('begin');		$sync_sql = array();		if ($topic_posts_added)		{			$sync_sql[$to_forum_id][] = 'forum_posts = forum_posts + ' . $topic_posts_added;		}		if ($topics_authed_moved)		{			$sync_sql[$to_forum_id][] = 'forum_topics = forum_topics + ' . (int) $topics_authed_moved;		}		$sync_sql[$to_forum_id][] = 'forum_topics_real = forum_topics_real + ' . (int) $topics_moved;		// Move topics, but do not resync yet		move_topics($topic_ids, $to_forum_id, false);		$forum_ids = array($to_forum_id);		foreach ($topic_data as $topic_id => $row)		{			// Get the list of forums to resync, add a log entry			$forum_ids[] = $row['forum_id'];			add_log('mod', $to_forum_id, $topic_id, 'LOG_MOVE', $row['forum_name'], $forum_data['forum_name']);			// If we have moved a global announcement, we need to correct the topic type			if ($row['topic_type'] == POST_GLOBAL)			{				$sql = 'UPDATE ' . TOPICS_TABLE . '					SET topic_type = ' . POST_ANNOUNCE . '					WHERE topic_id = ' . (int) $row['topic_id'];				$db->sql_query($sql);			}			// Leave a redirection if required and only if the topic is visible to users			if ($leave_shadow && $row['topic_approved'] && $row['topic_type'] != POST_GLOBAL)			{				$shadow = array(					'forum_id'				=>	(int) $row['forum_id'],					'icon_id'				=>	(int) $row['icon_id'],					'topic_attachment'		=>	(int) $row['topic_attachment'],					'topic_approved'		=>	1, // a shadow topic is always approved					'topic_reported'		=>	0, // a shadow topic is never reported					'topic_title'			=>	(string) $row['topic_title'],					'topic_poster'			=>	(int) $row['topic_poster'],					'topic_time'			=>	(int) $row['topic_time'],					'topic_time_limit'		=>	(int) $row['topic_time_limit'],					'topic_views'			=>	(int) $row['topic_views'],					'topic_replies'			=>	(int) $row['topic_replies'],					'topic_replies_real'	=>	(int) $row['topic_replies_real'],					'topic_status'			=>	ITEM_MOVED,					'topic_type'			=>	POST_NORMAL,					'topic_first_post_id'	=>	(int) $row['topic_first_post_id'],					'topic_first_poster_colour'=>(string) $row['topic_first_poster_colour'],					'topic_first_poster_name'=>	(string) $row['topic_first_poster_name'],					'topic_last_post_id'	=>	(int) $row['topic_last_post_id'],					'topic_last_poster_id'	=>	(int) $row['topic_last_poster_id'],					'topic_last_poster_colour'=>(string) $row['topic_last_poster_colour'],					'topic_last_poster_name'=>	(string) $row['topic_last_poster_name'],					'topic_last_post_subject'=>	(string)  $row['topic_last_post_subject'],					'topic_last_post_time'	=>	(int) $row['topic_last_post_time'],					'topic_last_view_time'	=>	(int) $row['topic_last_view_time'],					'topic_moved_id'		=>	(int) $row['topic_id'],					'topic_bumped'			=>	(int) $row['topic_bumped'],					'topic_bumper'			=>	(int) $row['topic_bumper'],					'poll_title'			=>	(string) $row['poll_title'],					'poll_start'			=>	(int) $row['poll_start'],					'poll_length'			=>	(int) $row['poll_length'],					'poll_max_options'		=>	(int) $row['poll_max_options'],					'poll_last_vote'		=>	(int) $row['poll_last_vote']				);				$db->sql_query('INSERT INTO ' . TOPICS_TABLE . $db->sql_build_array('INSERT', $shadow));				// Shadow topics only count on new "topics" and not posts... a shadow topic alone has 0 posts				$topics_removed--;				$topics_authed_removed--;			}		}		unset($topic_data);		if ($topic_posts_removed)		{			$sync_sql[$forum_id][] = 'forum_posts = forum_posts - ' . $topic_posts_removed;		}		if ($topics_removed)		{			$sync_sql[$forum_id][]	= 'forum_topics_real = forum_topics_real - ' . (int) $topics_removed;		}		if ($topics_authed_removed)		{			$sync_sql[$forum_id][]	= 'forum_topics = forum_topics - ' . (int) $topics_authed_removed;		}		$success_msg = (sizeof($topic_ids) == 1) ? 'TOPIC_MOVED_SUCCESS' : 'TOPICS_MOVED_SUCCESS';		foreach ($sync_sql as $forum_id_key => $array)		{			$sql = 'UPDATE ' . FORUMS_TABLE . '				SET ' . implode(', ', $array) . '				WHERE forum_id = ' . $forum_id_key;			$db->sql_query($sql);		}		$db->sql_transaction('commit');		sync('forum', 'forum_id', array($forum_id, $to_forum_id));	}	else	{		$template->assign_vars(array(			'S_FORUM_SELECT'		=> make_forum_select($to_forum_id, $forum_id, false, true, true, true),			'S_CAN_LEAVE_SHADOW'	=> true,			'ADDITIONAL_MSG'		=> $additional_msg)		);		confirm_box(false, 'MOVE_TOPIC' . ((sizeof($topic_ids) == 1) ? '' : 'S'), $s_hidden_fields, 'mcp_move.html');	}	$redirect = request_var('redirect', "index.$phpEx");	$redirect = reapply_sid($redirect);	if (!$success_msg)	{		redirect($redirect);	}	else	{		meta_refresh(3, $redirect);		$message = $user->lang[$success_msg];		$message .= '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $redirect . '">', '</a>');		$message .= '<br /><br />' . sprintf($user->lang['RETURN_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", "f=$forum_id") . '">', '</a>');		$message .= '<br /><br />' . sprintf($user->lang['RETURN_NEW_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", "f=$to_forum_id") . '">', '</a>');		trigger_error($message);	}}/*** Delete Topics*/function mcp_delete_topic($topic_ids){	global $auth, $user, $db, $phpEx, $phpbb_root_path;	if (!check_ids($topic_ids, TOPICS_TABLE, 'topic_id', array('m_delete')))	{		return;	}	$redirect = request_var('redirect', build_url(array('action', 'quickmod')));	$forum_id = request_var('f', 0);	$s_hidden_fields = build_hidden_fields(array(		'topic_id_list'	=> $topic_ids,		'f'				=> $forum_id,		'action'		=> 'delete_topic',		'redirect'		=> $redirect)	);	$success_msg = '';	if (confirm_box(true))	{		$success_msg = (sizeof($topic_ids) == 1) ? 'TOPIC_DELETED_SUCCESS' : 'TOPICS_DELETED_SUCCESS';		$data = get_topic_data($topic_ids);		foreach ($data as $topic_id => $row)		{			if ($row['topic_moved_id'])			{				add_log('mod', $row['forum_id'], $topic_id, 'LOG_DELETE_SHADOW_TOPIC', $row['topic_title']);			}			else			{				add_log('mod', $row['forum_id'], $topic_id, 'LOG_DELETE_TOPIC', $row['topic_title'], $row['topic_first_poster_name']);			}		}		$return = delete_topics('topic_id', $topic_ids);	}	else	{		confirm_box(false, (sizeof($topic_ids) == 1) ? 'DELETE_TOPIC' : 'DELETE_TOPICS', $s_hidden_fields);	}	if (!isset($_REQUEST['quickmod']))	{		$redirect = request_var('redirect', "index.$phpEx");		$redirect = reapply_sid($redirect);		$redirect_message = 'PAGE';	}	else	{		$redirect = append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id);		$redirect_message = 'FORUM';	}	if (!$success_msg)	{		redirect($redirect);	}	else	{		meta_refresh(3, $redirect);		trigger_error($user->lang[$success_msg] . '<br /><br />' . sprintf($user->lang['RETURN_' . $redirect_message], '<a href="' . $redirect . '">', '</a>'));	}}/*** Delete Posts*/function mcp_delete_post($post_ids){	global $auth, $user, $db, $phpEx, $phpbb_root_path;	if (!check_ids($post_ids, POSTS_TABLE, 'post_id', array('m_delete')))	{		return;	}	$redirect = request_var('redirect', build_url(array('action', 'quickmod')));	$forum_id = request_var('f', 0);	$s_hidden_fields = build_hidden_fields(array(		'post_id_list'	=> $post_ids,		'f'				=> $forum_id,		'action'		=> 'delete_post',		'redirect'		=> $redirect)	);	$success_msg = '';	if (confirm_box(true))	{		if (!function_exists('delete_posts'))		{			include($phpbb_root_path . 'includes/functions_admin.' . $phpEx);		}		// Count the number of topics that are affected		// I did not use COUNT(DISTINCT ...) because I remember having problems		// with it on older versions of MySQL -- Ashe		$sql = 'SELECT DISTINCT topic_id			FROM ' . POSTS_TABLE . '			WHERE ' . $db->sql_in_set('post_id', $post_ids);		$result = $db->sql_query($sql);		$topic_id_list = array();		while ($row = $db->sql_fetchrow($result))		{			$topic_id_list[] = $row['topic_id'];		}		$affected_topics = sizeof($topic_id_list);		$db->sql_freeresult($result);		$post_data = get_post_data($post_ids);		foreach ($post_data as $id => $row)		{			$post_username = ($row['poster_id'] == ANONYMOUS && !empty($row['post_username'])) ? $row['post_username'] : $row['username'];			add_log('mod', $row['forum_id'], $row['topic_id'], 'LOG_DELETE_POST', $row['post_subject'], $post_username);		}		// Now delete the posts, topics and forums are automatically resync'ed		delete_posts('post_id', $post_ids);		$sql = 'SELECT COUNT(topic_id) AS topics_left			FROM ' . TOPICS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', $topic_id_list);		$result = $db->sql_query_limit($sql, 1);		$deleted_topics = ($row = $db->sql_fetchrow($result)) ? ($affected_topics - $row['topics_left']) : $affected_topics;		$db->sql_freeresult($result);		$topic_id = request_var('t', 0);		// Return links		$return_link = array();		if ($affected_topics == 1 && !$deleted_topics && $topic_id)		{			$return_link[] = sprintf($user->lang['RETURN_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id") . '">', '</a>');		}		$return_link[] = sprintf($user->lang['RETURN_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id) . '">', '</a>');		if (sizeof($post_ids) == 1)		{			if ($deleted_topics)			{				// We deleted the only post of a topic, which in turn has				// been removed from the database				$success_msg = $user->lang['TOPIC_DELETED_SUCCESS'];			}			else			{				$success_msg = $user->lang['POST_DELETED_SUCCESS'];			}		}		else		{			if ($deleted_topics)			{				// Some of topics disappeared				$success_msg = $user->lang['POSTS_DELETED_SUCCESS'] . '<br /><br />' . $user->lang['EMPTY_TOPICS_REMOVED_WARNING'];			}			else			{				$success_msg = $user->lang['POSTS_DELETED_SUCCESS'];			}		}	}	else	{		confirm_box(false, (sizeof($post_ids) == 1) ? 'DELETE_POST' : 'DELETE_POSTS', $s_hidden_fields);	}	$redirect = request_var('redirect', "index.$phpEx");	$redirect = reapply_sid($redirect);	if (!$success_msg)	{		redirect($redirect);	}	else	{		if ($affected_topics != 1 || $deleted_topics || !$topic_id)		{			$redirect = append_sid("{$phpbb_root_path}mcp.$phpEx", "f=$forum_id&i=main&mode=forum_view", false);		}		meta_refresh(3, $redirect);		trigger_error($success_msg . '<br /><br />' . sprintf($user->lang['RETURN_PAGE'], '<a href="' . $redirect . '">', '</a>') . '<br /><br />' . implode('<br /><br />', $return_link));	}}/*** Fork Topic*/function mcp_fork_topic($topic_ids){	global $auth, $user, $db, $template, $config;	global $phpEx, $phpbb_root_path;	if (!check_ids($topic_ids, TOPICS_TABLE, 'topic_id', array('m_')))	{		return;	}	$to_forum_id = request_var('to_forum_id', 0);	$forum_id = request_var('f', 0);	$redirect = request_var('redirect', build_url(array('action', 'quickmod')));	$additional_msg = $success_msg = '';	$s_hidden_fields = build_hidden_fields(array(		'topic_id_list'	=> $topic_ids,		'f'				=> $forum_id,		'action'		=> 'fork',		'redirect'		=> $redirect)	);	if ($to_forum_id)	{		$forum_data = get_forum_data($to_forum_id, 'f_post');		if (!sizeof($topic_ids))		{			$additional_msg = $user->lang['NO_TOPIC_SELECTED'];		}		else if (!sizeof($forum_data))		{			$additional_msg = $user->lang['FORUM_NOT_EXIST'];		}		else		{			$forum_data = $forum_data[$to_forum_id];			if ($forum_data['forum_type'] != FORUM_POST)			{				$additional_msg = $user->lang['FORUM_NOT_POSTABLE'];			}			else if (!$auth->acl_get('f_post', $to_forum_id))			{				$additional_msg = $user->lang['USER_CANNOT_POST'];			}		}	}	else if (isset($_POST['confirm']))	{		$additional_msg = $user->lang['FORUM_NOT_EXIST'];	}	if ($additional_msg)	{		unset($_POST['confirm']);		unset($_REQUEST['confirm_key']);	}	if (confirm_box(true))	{		$topic_data = get_topic_data($topic_ids, 'f_post');		$total_posts = 0;		$new_topic_id_list = array();		foreach ($topic_data as $topic_id => $topic_row)		{			if (!isset($search_type) && $topic_row['enable_indexing'])			{				// Select the search method and do some additional checks to ensure it can actually be utilised				$search_type = basename($config['search_type']);				if (!file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx))				{					trigger_error('NO_SUCH_SEARCH_MODULE');				}				if (!class_exists($search_type))				{					include("{$phpbb_root_path}includes/search/$search_type.$phpEx");				}				$error = false;				$search = new $search_type($error);				$search_mode = 'post';				if ($error)				{					trigger_error($error);				}			}			else if (!isset($search_type) && !$topic_row['enable_indexing'])			{				$search_type = false;			}			$sql_ary = array(				'forum_id'					=> (int) $to_forum_id,				'icon_id'					=> (int) $topic_row['icon_id'],				'topic_attachment'			=> (int) $topic_row['topic_attachment'],				'topic_approved'			=> 1,				'topic_reported'			=> 0,				'topic_title'				=> (string) $topic_row['topic_title'],				'topic_poster'				=> (int) $topic_row['topic_poster'],				'topic_time'				=> (int) $topic_row['topic_time'],				'topic_replies'				=> (int) $topic_row['topic_replies_real'],				'topic_replies_real'		=> (int) $topic_row['topic_replies_real'],				'topic_status'				=> (int) $topic_row['topic_status'],				'topic_type'				=> (int) $topic_row['topic_type'],				'topic_first_poster_name'	=> (string) $topic_row['topic_first_poster_name'],				'topic_last_poster_id'		=> (int) $topic_row['topic_last_poster_id'],				'topic_last_poster_name'	=> (string) $topic_row['topic_last_poster_name'],				'topic_last_post_time'		=> (int) $topic_row['topic_last_post_time'],				'topic_last_view_time'		=> (int) $topic_row['topic_last_view_time'],				'topic_bumped'				=> (int) $topic_row['topic_bumped'],				'topic_bumper'				=> (int) $topic_row['topic_bumper'],				'poll_title'				=> (string) $topic_row['poll_title'],				'poll_start'				=> (int) $topic_row['poll_start'],				'poll_length'				=> (int) $topic_row['poll_length'],				'poll_max_options'			=> (int) $topic_row['poll_max_options'],				'poll_vote_change'			=> (int) $topic_row['poll_vote_change'],			);			$db->sql_query('INSERT INTO ' . TOPICS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));			$new_topic_id = $db->sql_nextid();			$new_topic_id_list[$topic_id] = $new_topic_id;			if ($topic_row['poll_start'])			{				$poll_rows = array();				$sql = 'SELECT *					FROM ' . POLL_OPTIONS_TABLE . "					WHERE topic_id = $topic_id";				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$sql_ary = array(						'poll_option_id'	=> (int) $row['poll_option_id'],						'topic_id'			=> (int) $new_topic_id,						'poll_option_text'	=> (string) $row['poll_option_text'],						'poll_option_total'	=> 0					);					$db->sql_query('INSERT INTO ' . POLL_OPTIONS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));				}			}			$sql = 'SELECT *				FROM ' . POSTS_TABLE . "				WHERE topic_id = $topic_id				ORDER BY post_time ASC";			$result = $db->sql_query($sql);			$post_rows = array();			while ($row = $db->sql_fetchrow($result))			{				$post_rows[] = $row;			}			$db->sql_freeresult($result);			if (!sizeof($post_rows))			{				continue;			}			$total_posts += sizeof($post_rows);			foreach ($post_rows as $row)			{				$sql_ary = array(					'topic_id'			=> (int) $new_topic_id,					'forum_id'			=> (int) $to_forum_id,					'poster_id'			=> (int) $row['poster_id'],					'icon_id'			=> (int) $row['icon_id'],					'poster_ip'			=> (string) $row['poster_ip'],					'post_time'			=> (int) $row['post_time'],					'post_approved'		=> 1,					'post_reported'		=> 0,					'enable_bbcode'		=> (int) $row['enable_bbcode'],					'enable_smilies'	=> (int) $row['enable_smilies'],					'enable_magic_url'	=> (int) $row['enable_magic_url'],					'enable_sig'		=> (int) $row['enable_sig'],					'post_username'		=> (string) $row['post_username'],					'post_subject'		=> (string) $row['post_subject'],					'post_text'			=> (string) $row['post_text'],					'post_edit_reason'	=> (string) $row['post_edit_reason'],					'post_edit_user'	=> (int) $row['post_edit_user'],					'post_checksum'		=> (string) $row['post_checksum'],					'post_attachment'	=> (int) $row['post_attachment'],					'bbcode_bitfield'	=> $row['bbcode_bitfield'],					'bbcode_uid'		=> (string) $row['bbcode_uid'],					'post_edit_time'	=> (int) $row['post_edit_time'],					'post_edit_count'	=> (int) $row['post_edit_count'],					'post_edit_locked'	=> (int) $row['post_edit_locked'],					'post_postcount'	=> 0,				);				$db->sql_query('INSERT INTO ' . POSTS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));				$new_post_id = $db->sql_nextid();				// Copy whether the topic is dotted				markread('post', $to_forum_id, $new_topic_id, 0, $row['poster_id']);				if (!empty($search_type))				{					$search->index($search_mode, $new_post_id, $sql_ary['post_text'], $sql_ary['post_subject'], $sql_ary['poster_id'], ($topic_row['topic_type'] == POST_GLOBAL) ? 0 : $to_forum_id);					$search_mode = 'reply'; // After one we index replies				}				// Copy Attachments				if ($row['post_attachment'])				{					$sql = 'SELECT * FROM ' . ATTACHMENTS_TABLE . "						WHERE post_msg_id = {$row['post_id']}							AND topic_id = $topic_id							AND in_message = 0";					$result = $db->sql_query($sql);					$sql_ary = array();					while ($attach_row = $db->sql_fetchrow($result))					{						$sql_ary[] = array(							'post_msg_id'		=> (int) $new_post_id,							'topic_id'			=> (int) $new_topic_id,							'in_message'		=> 0,							'is_orphan'			=> (int) $attach_row['is_orphan'],							'poster_id'			=> (int) $attach_row['poster_id'],							'physical_filename'	=> (string) utf8_basename($attach_row['physical_filename']),							'real_filename'		=> (string) utf8_basename($attach_row['real_filename']),							'download_count'	=> (int) $attach_row['download_count'],							'attach_comment'	=> (string) $attach_row['attach_comment'],							'extension'			=> (string) $attach_row['extension'],							'mimetype'			=> (string) $attach_row['mimetype'],							'filesize'			=> (int) $attach_row['filesize'],							'filetime'			=> (int) $attach_row['filetime'],							'thumbnail'			=> (int) $attach_row['thumbnail']						);					}					$db->sql_freeresult($result);					if (sizeof($sql_ary))					{						$db->sql_multi_insert(ATTACHMENTS_TABLE, $sql_ary);					}				}			}			$sql = 'SELECT user_id, notify_status				FROM ' . TOPICS_WATCH_TABLE . '				WHERE topic_id = ' . $topic_id;			$result = $db->sql_query($sql);			$sql_ary = array();			while ($row = $db->sql_fetchrow($result))			{				$sql_ary[] = array(					'topic_id'		=> (int) $new_topic_id,					'user_id'		=> (int) $row['user_id'],					'notify_status'	=> (int) $row['notify_status'],				);			}			$db->sql_freeresult($result);			if (sizeof($sql_ary))			{				$db->sql_multi_insert(TOPICS_WATCH_TABLE, $sql_ary);			}		}		// Sync new topics, parent forums and board stats		sync('topic', 'topic_id', $new_topic_id_list);		$sync_sql = array();		$sync_sql[$to_forum_id][]	= 'forum_posts = forum_posts + ' . $total_posts;		$sync_sql[$to_forum_id][]	= 'forum_topics = forum_topics + ' . sizeof($new_topic_id_list);		$sync_sql[$to_forum_id][]	= 'forum_topics_real = forum_topics_real + ' . sizeof($new_topic_id_list);		foreach ($sync_sql as $forum_id_key => $array)		{			$sql = 'UPDATE ' . FORUMS_TABLE . '				SET ' . implode(', ', $array) . '				WHERE forum_id = ' . $forum_id_key;			$db->sql_query($sql);		}		sync('forum', 'forum_id', $to_forum_id);		set_config_count('num_topics', sizeof($new_topic_id_list), true);		set_config_count('num_posts', $total_posts, true);		foreach ($new_topic_id_list as $topic_id => $new_topic_id)		{			add_log('mod', $to_forum_id, $new_topic_id, 'LOG_FORK', $topic_row['forum_name']);		}		$success_msg = (sizeof($topic_ids) == 1) ? 'TOPIC_FORKED_SUCCESS' : 'TOPICS_FORKED_SUCCESS';	}	else	{		$template->assign_vars(array(			'S_FORUM_SELECT'		=> make_forum_select($to_forum_id, false, false, true, true, true),			'S_CAN_LEAVE_SHADOW'	=> false,			'ADDITIONAL_MSG'		=> $additional_msg)		);		confirm_box(false, 'FORK_TOPIC' . ((sizeof($topic_ids) == 1) ? '' : 'S'), $s_hidden_fields, 'mcp_move.html');	}	$redirect = request_var('redirect', "index.$phpEx");	$redirect = reapply_sid($redirect);	if (!$success_msg)	{		redirect($redirect);	}	else	{		$redirect_url = append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id);		meta_refresh(3, $redirect_url);		$return_link = sprintf($user->lang['RETURN_FORUM'], '<a href="' . $redirect_url . '">', '</a>');		if ($forum_id != $to_forum_id)		{			$return_link .= '<br /><br />' . sprintf($user->lang['RETURN_NEW_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $to_forum_id) . '">', '</a>');		}		trigger_error($user->lang[$success_msg] . '<br /><br />' . $return_link);	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_groups_info{	function module()	{		return array(			'filename'	=> 'acp_groups',			'title'		=> 'ACP_GROUPS_MANAGEMENT',			'version'	=> '1.0.0',			'modes'		=> array(				'manage'		=> array('title' => 'ACP_GROUPS_MANAGE', 'auth' => 'acl_a_group', 'cat' => array('ACP_GROUPS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** viewforum [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ACTIVE_TOPICS'			=> 'Active topics',	'ANNOUNCEMENTS'			=> 'Announcements',	'FORUM_PERMISSIONS'		=> 'Forum permissions',	'ICON_ANNOUNCEMENT'		=> 'Announcement',	'ICON_STICKY'			=> 'Sticky',	'LOGIN_NOTIFY_FORUM'	=> 'You have been notified about this forum, please login to view it.',	'MARK_TOPICS_READ'		=> 'Mark topics read',	'NEW_POSTS_HOT'			=> 'New posts [ Popular ]',	// Not used anymore	'NEW_POSTS_LOCKED'		=> 'New posts [ Locked ]',	// Not used anymore	'NO_NEW_POSTS_HOT'		=> 'No new posts [ Popular ]',	// Not used anymore	'NO_NEW_POSTS_LOCKED'	=> 'No new posts [ Locked ]',	// Not used anymore	'NO_READ_ACCESS'		=> 'You do not have the required permissions to read topics within this forum.',	'NO_UNREAD_POSTS_HOT'		=> 'No unread posts [ Popular ]',	'NO_UNREAD_POSTS_LOCKED'	=> 'No unread posts [ Locked ]',	'POST_FORUM_LOCKED'		=> 'Forum is locked',	'TOPICS_MARKED'			=> 'The topics for this forum have now been marked read.',	'UNREAD_POSTS_HOT'		=> 'Unread posts [ Popular ]',	'UNREAD_POSTS_LOCKED'	=> 'Unread posts [ Locked ]',	'VIEW_FORUM'			=> 'View forum',	'VIEW_FORUM_TOPIC'		=> '1 topic',	'VIEW_FORUM_TOPICS'		=> '%d topics',));?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Messenger* @package phpBB3*/class messenger{	var $vars, $msg, $extra_headers, $replyto, $from, $subject;	var $addresses = array();	var $mail_priority = MAIL_NORMAL_PRIORITY;	var $use_queue = true;	var $tpl_obj = NULL;	var $tpl_msg = array();	var $eol = "\n";	/**	* Constructor	*/	function messenger($use_queue = true)	{		global $config;		$this->use_queue = (!$config['email_package_size']) ? false : $use_queue;		$this->subject = '';		// Determine EOL character (\n for UNIX, \r\n for Windows and \r for Mac)		$this->eol = (!defined('PHP_EOL')) ? (($eol = strtolower(substr(PHP_OS, 0, 3))) == 'win') ? "\r\n" : (($eol == 'mac') ? "\r" : "\n") : PHP_EOL;		$this->eol = (!$this->eol) ? "\n" : $this->eol;	}	/**	* Resets all the data (address, template file, etc etc) to default	*/	function reset()	{		$this->addresses = $this->extra_headers = array();		$this->vars = $this->msg = $this->replyto = $this->from = '';		$this->mail_priority = MAIL_NORMAL_PRIORITY;	}	/**	* Sets an email address to send to	*/	function to($address, $realname = '')	{		global $config;		if (!trim($address))		{			return;		}		$pos = isset($this->addresses['to']) ? sizeof($this->addresses['to']) : 0;		$this->addresses['to'][$pos]['email'] = trim($address);		// If empty sendmail_path on windows, PHP changes the to line		if (!$config['smtp_delivery'] && DIRECTORY_SEPARATOR == '\\')		{			$this->addresses['to'][$pos]['name'] = '';		}		else		{			$this->addresses['to'][$pos]['name'] = trim($realname);		}	}	/**	* Sets an cc address to send to	*/	function cc($address, $realname = '')	{		if (!trim($address))		{			return;		}		$pos = isset($this->addresses['cc']) ? sizeof($this->addresses['cc']) : 0;		$this->addresses['cc'][$pos]['email'] = trim($address);		$this->addresses['cc'][$pos]['name'] = trim($realname);	}	/**	* Sets an bcc address to send to	*/	function bcc($address, $realname = '')	{		if (!trim($address))		{			return;		}		$pos = isset($this->addresses['bcc']) ? sizeof($this->addresses['bcc']) : 0;		$this->addresses['bcc'][$pos]['email'] = trim($address);		$this->addresses['bcc'][$pos]['name'] = trim($realname);	}	/**	* Sets a im contact to send to	*/	function im($address, $realname = '')	{		// IM-Addresses could be empty		if (!trim($address))		{			return;		}		$pos = isset($this->addresses['im']) ? sizeof($this->addresses['im']) : 0;		$this->addresses['im'][$pos]['uid'] = trim($address);		$this->addresses['im'][$pos]['name'] = trim($realname);	}	/**	* Set the reply to address	*/	function replyto($address)	{		$this->replyto = trim($address);	}	/**	* Set the from address	*/	function from($address)	{		$this->from = trim($address);	}	/**	* set up subject for mail	*/	function subject($subject = '')	{		$this->subject = trim($subject);	}	/**	* set up extra mail headers	*/	function headers($headers)	{		$this->extra_headers[] = trim($headers);	}	/**	* Adds X-AntiAbuse headers	*	* @param array $config		Configuration array	* @param user $user			A user object	*	* @return null	*/	function anti_abuse_headers($config, $user)	{		$this->headers('X-AntiAbuse: Board servername - ' . mail_encode($config['server_name']));		$this->headers('X-AntiAbuse: User_id - ' . $user->data['user_id']);		$this->headers('X-AntiAbuse: Username - ' . mail_encode($user->data['username']));		$this->headers('X-AntiAbuse: User IP - ' . $user->ip);	}	/**	* Set the email priority	*/	function set_mail_priority($priority = MAIL_NORMAL_PRIORITY)	{		$this->mail_priority = $priority;	}	/**	* Set email template to use	*/	function template($template_file, $template_lang = '', $template_path = '')	{		global $config, $phpbb_root_path, $user;		if (!trim($template_file))		{			trigger_error('No template file for emailing set.', E_USER_ERROR);		}		if (!trim($template_lang))		{			// fall back to board default language if the user's language is			// missing $template_file.  If this does not exist either,			// $tpl->set_custom_template will do a trigger_error			$template_lang = basename($config['default_lang']);		}		// tpl_msg now holds a template object we can use to parse the template file		if (!isset($this->tpl_msg[$template_lang . $template_file]))		{			$this->tpl_msg[$template_lang . $template_file] = new template();			$tpl = &$this->tpl_msg[$template_lang . $template_file];			$fallback_template_path = false;			if (!$template_path)			{				$template_path = (!empty($user->lang_path)) ? $user->lang_path : $phpbb_root_path . 'language/';				$template_path .= $template_lang . '/email';				// we can only specify default language fallback when the path is not a custom one for which we				// do not know the default language alternative				if ($template_lang !== basename($config['default_lang']))				{					$fallback_template_path = (!empty($user->lang_path)) ? $user->lang_path : $phpbb_root_path . 'language/';					$fallback_template_path .= basename($config['default_lang']) . '/email';				}			}			$tpl->set_custom_template($template_path, $template_lang . '_email', $fallback_template_path);			$tpl->set_filenames(array(				'body'		=> $template_file . '.txt',			));		}		$this->tpl_obj = &$this->tpl_msg[$template_lang . $template_file];		$this->vars = &$this->tpl_obj->_rootref;		$this->tpl_msg = '';		return true;	}	/**	* assign variables to email template	*/	function assign_vars($vars)	{		if (!is_object($this->tpl_obj))		{			return;		}		$this->tpl_obj->assign_vars($vars);	}	function assign_block_vars($blockname, $vars)	{		if (!is_object($this->tpl_obj))		{			return;		}		$this->tpl_obj->assign_block_vars($blockname, $vars);	}	/**	* Send the mail out to the recipients set previously in var $this->addresses	*/	function send($method = NOTIFY_EMAIL, $break = false)	{		global $config, $user;		// We add some standard variables we always use, no need to specify them always		if (!isset($this->vars['U_BOARD']))		{			$this->assign_vars(array(				'U_BOARD'	=> generate_board_url(),			));		}		if (!isset($this->vars['EMAIL_SIG']))		{			$this->assign_vars(array(				'EMAIL_SIG'	=> str_replace('<br />', "\n", "-- \n" . htmlspecialchars_decode($config['board_email_sig'])),			));		}		if (!isset($this->vars['SITENAME']))		{			$this->assign_vars(array(				'SITENAME'	=> htmlspecialchars_decode($config['sitename']),			));		}		// Parse message through template		$this->msg = trim($this->tpl_obj->assign_display('body'));		// Because we use \n for newlines in the body message we need to fix line encoding errors for those admins who uploaded email template files in the wrong encoding		$this->msg = str_replace("\r\n", "\n", $this->msg);		// We now try and pull a subject from the email body ... if it exists,		// do this here because the subject may contain a variable		$drop_header = '';		$match = array();		if (preg_match('#^(Subject:(.*?))$#m', $this->msg, $match))		{			$this->subject = (trim($match[2]) != '') ? trim($match[2]) : (($this->subject != '') ? $this->subject : $user->lang['NO_EMAIL_SUBJECT']);			$drop_header .= '[\r\n]*?' . preg_quote($match[1], '#');		}		else		{			$this->subject = (($this->subject != '') ? $this->subject : $user->lang['NO_EMAIL_SUBJECT']);		}		if ($drop_header)		{			$this->msg = trim(preg_replace('#' . $drop_header . '#s', '', $this->msg));		}		if ($break)		{			return true;		}		switch ($method)		{			case NOTIFY_EMAIL:				$result = $this->msg_email();			break;			case NOTIFY_IM:				$result = $this->msg_jabber();			break;			case NOTIFY_BOTH:				$result = $this->msg_email();				$this->msg_jabber();			break;		}		$this->reset();		return $result;	}	/**	* Add error message to log	*/	function error($type, $msg)	{		global $user, $phpEx, $phpbb_root_path, $config;		// Session doesn't exist, create it		if (!isset($user->session_id) || $user->session_id === '')		{			$user->session_begin();		}		$calling_page = (!empty($_SERVER['PHP_SELF'])) ? $_SERVER['PHP_SELF'] : $_ENV['PHP_SELF'];		$message = '';		switch ($type)		{			case 'EMAIL':				$message = '<strong>EMAIL/' . (($config['smtp_delivery']) ? 'SMTP' : 'PHP/' . $config['email_function_name'] . '()') . '</strong>';			break;			default:				$message = "<strong>$type</strong>";			break;		}		$message .= '<br /><em>' . htmlspecialchars($calling_page) . '</em><br /><br />' . $msg . '<br />';		add_log('critical', 'LOG_ERROR_' . $type, $message);	}	/**	* Save to queue	*/	function save_queue()	{		global $config;		if ($config['email_package_size'] && $this->use_queue && !empty($this->queue))		{			$this->queue->save();			return;		}	}	/**	* Return email header	*/	function build_header($to, $cc, $bcc)	{		global $config;		// We could use keys here, but we won't do this for 3.0.x to retain backwards compatibility		$headers = array();		$headers[] = 'From: ' . $this->from;		if ($cc)		{			$headers[] = 'Cc: ' . $cc;		}		if ($bcc)		{			$headers[] = 'Bcc: ' . $bcc;		}		$headers[] = 'Reply-To: ' . $this->replyto;		$headers[] = 'Return-Path: <' . $config['board_email'] . '>';		$headers[] = 'Sender: <' . $config['board_email'] . '>';		$headers[] = 'MIME-Version: 1.0';		$headers[] = 'Message-ID: <' . md5(unique_id(time())) . '@' . $config['server_name'] . '>';		$headers[] = 'Date: ' . date('r', time());		$headers[] = 'Content-Type: text/plain; charset=UTF-8'; // format=flowed		$headers[] = 'Content-Transfer-Encoding: 8bit'; // 7bit		$headers[] = 'X-Priority: ' . $this->mail_priority;		$headers[] = 'X-MSMail-Priority: ' . (($this->mail_priority == MAIL_LOW_PRIORITY) ? 'Low' : (($this->mail_priority == MAIL_NORMAL_PRIORITY) ? 'Normal' : 'High'));		$headers[] = 'X-Mailer: phpBB3';		$headers[] = 'X-MimeOLE: phpBB3';		$headers[] = 'X-phpBB-Origin: phpbb://' . str_replace(array('http://', 'https://'), array('', ''), generate_board_url());		if (sizeof($this->extra_headers))		{			$headers = array_merge($headers, $this->extra_headers);		}		return $headers;	}	/**	* Send out emails	*/	function msg_email()	{		global $config, $user;		if (empty($config['email_enable']))		{			return false;		}		// Addresses to send to?		if (empty($this->addresses) || (empty($this->addresses['to']) && empty($this->addresses['cc']) && empty($this->addresses['bcc'])))		{			// Send was successful. ;)			return true;		}		$use_queue = false;		if ($config['email_package_size'] && $this->use_queue)		{			if (empty($this->queue))			{				$this->queue = new queue();				$this->queue->init('email', $config['email_package_size']);			}			$use_queue = true;		}		if (empty($this->replyto))		{			$this->replyto = '<' . $config['board_contact'] . '>';		}		if (empty($this->from))		{			$this->from = '<' . $config['board_contact'] . '>';		}		$encode_eol = ($config['smtp_delivery']) ? "\r\n" : $this->eol;		// Build to, cc and bcc strings		$to = $cc = $bcc = '';		foreach ($this->addresses as $type => $address_ary)		{			if ($type == 'im')			{				continue;			}			foreach ($address_ary as $which_ary)			{				$$type .= (($$type != '') ? ', ' : '') . (($which_ary['name'] != '') ? mail_encode($which_ary['name'], $encode_eol) . ' <' . $which_ary['email'] . '>' : $which_ary['email']);			}		}		// Build header		$headers = $this->build_header($to, $cc, $bcc);		// Send message ...		if (!$use_queue)		{			$mail_to = ($to == '') ? 'undisclosed-recipients:;' : $to;			$err_msg = '';			if ($config['smtp_delivery'])			{				$result = smtpmail($this->addresses, mail_encode($this->subject), wordwrap(utf8_wordwrap($this->msg), 997, "\n", true), $err_msg, $headers);			}			else			{				$result = phpbb_mail($mail_to, $this->subject, $this->msg, $headers, $this->eol, $err_msg);			}			if (!$result)			{				$this->error('EMAIL', $err_msg);				return false;			}		}		else		{			$this->queue->put('email', array(				'to'			=> $to,				'addresses'		=> $this->addresses,				'subject'		=> $this->subject,				'msg'			=> $this->msg,				'headers'		=> $headers)			);		}		return true;	}	/**	* Send jabber message out	*/	function msg_jabber()	{		global $config, $db, $user, $phpbb_root_path, $phpEx;		if (empty($config['jab_enable']) || empty($config['jab_host']) || empty($config['jab_username']) || empty($config['jab_password']))		{			return false;		}		if (empty($this->addresses['im']))		{			// Send was successful. ;)			return true;		}		$use_queue = false;		if ($config['jab_package_size'] && $this->use_queue)		{			if (empty($this->queue))			{				$this->queue = new queue();				$this->queue->init('jabber', $config['jab_package_size']);			}			$use_queue = true;		}		$addresses = array();		foreach ($this->addresses['im'] as $type => $uid_ary)		{			$addresses[] = $uid_ary['uid'];		}		$addresses = array_unique($addresses);		if (!$use_queue)		{			include_once($phpbb_root_path . 'includes/functions_jabber.' . $phpEx);			$this->jabber = new jabber($config['jab_host'], $config['jab_port'], $config['jab_username'], $config['jab_password'], $config['jab_use_ssl']);			if (!$this->jabber->connect())			{				$this->error('JABBER', $user->lang['ERR_JAB_CONNECT'] . '<br />' . $this->jabber->get_log());				return false;			}			if (!$this->jabber->login())			{				$this->error('JABBER', $user->lang['ERR_JAB_AUTH'] . '<br />' . $this->jabber->get_log());				return false;			}			foreach ($addresses as $address)			{				$this->jabber->send_message($address, $this->msg, $this->subject);			}			$this->jabber->disconnect();		}		else		{			$this->queue->put('jabber', array(				'addresses'		=> $addresses,				'subject'		=> $this->subject,				'msg'			=> $this->msg)			);		}		unset($addresses);		return true;	}}/*** handling email and jabber queue* @package phpBB3*/class queue{	var $data = array();	var $queue_data = array();	var $package_size = 0;	var $cache_file = '';	var $eol = "\n";	/**	* constructor	*/	function queue()	{		global $phpEx, $phpbb_root_path;		$this->data = array();		$this->cache_file = "{$phpbb_root_path}cache/queue.$phpEx";		// Determine EOL character (\n for UNIX, \r\n for Windows and \r for Mac)		$this->eol = (!defined('PHP_EOL')) ? (($eol = strtolower(substr(PHP_OS, 0, 3))) == 'win') ? "\r\n" : (($eol == 'mac') ? "\r" : "\n") : PHP_EOL;		$this->eol = (!$this->eol) ? "\n" : $this->eol;	}	/**	* Init a queue object	*/	function init($object, $package_size)	{		$this->data[$object] = array();		$this->data[$object]['package_size'] = $package_size;		$this->data[$object]['data'] = array();	}	/**	* Put object in queue	*/	function put($object, $scope)	{		$this->data[$object]['data'][] = $scope;	}	/**	* Obtains exclusive lock on queue cache file.	* Returns resource representing the lock	*/	function lock()	{		// For systems that can't have two processes opening		// one file for writing simultaneously		if (file_exists($this->cache_file . '.lock'))		{			$mode = 'rb';		}		else		{			$mode = 'wb';		}		$lock_fp = @fopen($this->cache_file . '.lock', $mode);		if ($mode == 'wb')		{			if (!$lock_fp)			{				// Two processes may attempt to create lock file at the same time.				// Have the losing process try opening the lock file again for reading				// on the assumption that the winning process created it				$mode = 'rb';				$lock_fp = @fopen($this->cache_file . '.lock', $mode);			}			else			{				// Only need to set mode when the lock file is written				@chmod($this->cache_file . '.lock', 0666);			}		}		if ($lock_fp)		{			@flock($lock_fp, LOCK_EX);		}		return $lock_fp;	}	/**	* Releases lock on queue cache file, using resource obtained from lock()	*/	function unlock($lock_fp)	{		// lock() will return null if opening lock file, and thus locking, failed.		// Accept null values here so that client code does not need to check them		if ($lock_fp)		{			@flock($lock_fp, LOCK_UN);			fclose($lock_fp);		}	}	/**	* Process queue	* Using lock file	*/	function process()	{		global $db, $config, $phpEx, $phpbb_root_path, $user;		$lock_fp = $this->lock();		set_config('last_queue_run', time(), true);		if (!file_exists($this->cache_file) || filemtime($this->cache_file) > time() - $config['queue_interval'])		{			$this->unlock($lock_fp);			return;		}		include($this->cache_file);		foreach ($this->queue_data as $object => $data_ary)		{			@set_time_limit(0);			if (!isset($data_ary['package_size']))			{				$data_ary['package_size'] = 0;			}			$package_size = $data_ary['package_size'];			$num_items = (!$package_size || sizeof($data_ary['data']) < $package_size) ? sizeof($data_ary['data']) : $package_size;			/*			* This code is commented out because it causes problems on some web hosts.			* The core problem is rather restrictive email sending limits.			* This code is nly useful if you have no such restrictions from the			* web host and the package size setting is wrong.			// If the amount of emails to be sent is way more than package_size than we need to increase it to prevent backlogs...			if (sizeof($data_ary['data']) > $package_size * 2.5)			{				$num_items = sizeof($data_ary['data']);			}			*/			switch ($object)			{				case 'email':					// Delete the email queued objects if mailing is disabled					if (!$config['email_enable'])					{						unset($this->queue_data['email']);						continue 2;					}				break;				case 'jabber':					if (!$config['jab_enable'])					{						unset($this->queue_data['jabber']);						continue 2;					}					include_once($phpbb_root_path . 'includes/functions_jabber.' . $phpEx);					$this->jabber = new jabber($config['jab_host'], $config['jab_port'], $config['jab_username'], $config['jab_password'], $config['jab_use_ssl']);					if (!$this->jabber->connect())					{						messenger::error('JABBER', $user->lang['ERR_JAB_CONNECT']);						continue 2;					}					if (!$this->jabber->login())					{						messenger::error('JABBER', $user->lang['ERR_JAB_AUTH']);						continue 2;					}				break;				default:					$this->unlock($lock_fp);					return;			}			for ($i = 0; $i < $num_items; $i++)			{				// Make variables available...				extract(array_shift($this->queue_data[$object]['data']));				switch ($object)				{					case 'email':						$err_msg = '';						$to = (!$to) ? 'undisclosed-recipients:;' : $to;						if ($config['smtp_delivery'])						{							$result = smtpmail($addresses, mail_encode($subject), wordwrap(utf8_wordwrap($msg), 997, "\n", true), $err_msg, $headers);						}						else						{							$result = phpbb_mail($to, $subject, $msg, $headers, $this->eol, $err_msg);						}						if (!$result)						{							messenger::error('EMAIL', $err_msg);							continue 2;						}					break;					case 'jabber':						foreach ($addresses as $address)						{							if ($this->jabber->send_message($address, $msg, $subject) === false)							{								messenger::error('JABBER', $this->jabber->get_log());								continue 3;							}						}					break;				}			}			// No more data for this object? Unset it			if (!sizeof($this->queue_data[$object]['data']))			{				unset($this->queue_data[$object]);			}			// Post-object processing			switch ($object)			{				case 'jabber':					// Hang about a couple of secs to ensure the messages are					// handled, then disconnect					$this->jabber->disconnect();				break;			}		}		if (!sizeof($this->queue_data))		{			@unlink($this->cache_file);		}		else		{			if ($fp = @fopen($this->cache_file, 'wb'))			{				fwrite($fp, "<?php\nif (!defined('IN_PHPBB')) exit;\n\$this->queue_data = unserialize(" . var_export(serialize($this->queue_data), true) . ");\n\n?>");				fclose($fp);				phpbb_chmod($this->cache_file, CHMOD_READ | CHMOD_WRITE);			}		}		$this->unlock($lock_fp);	}	/**	* Save queue	*/	function save()	{		if (!sizeof($this->data))		{			return;		}		$lock_fp = $this->lock();		if (file_exists($this->cache_file))		{			include($this->cache_file);			foreach ($this->queue_data as $object => $data_ary)			{				if (isset($this->data[$object]) && sizeof($this->data[$object]))				{					$this->data[$object]['data'] = array_merge($data_ary['data'], $this->data[$object]['data']);				}				else				{					$this->data[$object]['data'] = $data_ary['data'];				}			}		}		if ($fp = @fopen($this->cache_file, 'w'))		{			fwrite($fp, "<?php\nif (!defined('IN_PHPBB')) exit;\n\$this->queue_data = unserialize(" . var_export(serialize($this->data), true) . ");\n\n?>");			fclose($fp);			phpbb_chmod($this->cache_file, CHMOD_READ | CHMOD_WRITE);		}		$this->unlock($lock_fp);	}}/*** Replacement or substitute for PHP's mail command*/function smtpmail($addresses, $subject, $message, &$err_msg, $headers = false){	global $config, $user;	// Fix any bare linefeeds in the message to make it RFC821 Compliant.	$message = preg_replace("#(?<!\r)\n#si", "\r\n", $message);	if ($headers !== false)	{		if (!is_array($headers))		{			// Make sure there are no bare linefeeds in the headers			$headers = preg_replace('#(?<!\r)\n#si', "\n", $headers);			$headers = explode("\n", $headers);		}		// Ok this is rather confusing all things considered,		// but we have to grab bcc and cc headers and treat them differently		// Something we really didn't take into consideration originally		$headers_used = array();		foreach ($headers as $header)		{			if (strpos(strtolower($header), 'cc:') === 0 || strpos(strtolower($header), 'bcc:') === 0)			{				continue;			}			$headers_used[] = trim($header);		}		$headers = chop(implode("\r\n", $headers_used));	}	if (trim($subject) == '')	{		$err_msg = (isset($user->lang['NO_EMAIL_SUBJECT'])) ? $user->lang['NO_EMAIL_SUBJECT'] : 'No email subject specified';		return false;	}	if (trim($message) == '')	{		$err_msg = (isset($user->lang['NO_EMAIL_MESSAGE'])) ? $user->lang['NO_EMAIL_MESSAGE'] : 'Email message was blank';		return false;	}	$mail_rcpt = $mail_to = $mail_cc = array();	// Build correct addresses for RCPT TO command and the client side display (TO, CC)	if (isset($addresses['to']) && sizeof($addresses['to']))	{		foreach ($addresses['to'] as $which_ary)		{			$mail_to[] = ($which_ary['name'] != '') ? mail_encode(trim($which_ary['name'])) . ' <' . trim($which_ary['email']) . '>' : '<' . trim($which_ary['email']) . '>';			$mail_rcpt['to'][] = '<' . trim($which_ary['email']) . '>';		}	}	if (isset($addresses['bcc']) && sizeof($addresses['bcc']))	{		foreach ($addresses['bcc'] as $which_ary)		{			$mail_rcpt['bcc'][] = '<' . trim($which_ary['email']) . '>';		}	}	if (isset($addresses['cc']) && sizeof($addresses['cc']))	{		foreach ($addresses['cc'] as $which_ary)		{			$mail_cc[] = ($which_ary['name'] != '') ? mail_encode(trim($which_ary['name'])) . ' <' . trim($which_ary['email']) . '>' : '<' . trim($which_ary['email']) . '>';			$mail_rcpt['cc'][] = '<' . trim($which_ary['email']) . '>';		}	}	$smtp = new smtp_class();	$errno = 0;	$errstr = '';	$smtp->add_backtrace('Connecting to ' . $config['smtp_host'] . ':' . $config['smtp_port']);	// Ok we have error checked as much as we can to this point let's get on it already.	if (!class_exists('phpbb_error_collector'))	{		global $phpbb_root_path, $phpEx;		include($phpbb_root_path . 'includes/error_collector.' . $phpEx);	}	$collector = new phpbb_error_collector;	$collector->install();	$smtp->socket = fsockopen($config['smtp_host'], $config['smtp_port'], $errno, $errstr, 20);	$collector->uninstall();	$error_contents = $collector->format_errors();	if (!$smtp->socket)	{		if ($errstr)		{			$errstr = utf8_convert_message($errstr);		}		$err_msg = (isset($user->lang['NO_CONNECT_TO_SMTP_HOST'])) ? sprintf($user->lang['NO_CONNECT_TO_SMTP_HOST'], $errno, $errstr) : "Could not connect to smtp host : $errno : $errstr";		$err_msg .= ($error_contents) ? '<br /><br />' . htmlspecialchars($error_contents) : '';		return false;	}	// Wait for reply	if ($err_msg = $smtp->server_parse('220', __LINE__))	{		$smtp->close_session($err_msg);		return false;	}	// Let me in. This function handles the complete authentication process	if ($err_msg = $smtp->log_into_server($config['smtp_host'], $config['smtp_username'], $config['smtp_password'], $config['smtp_auth_method']))	{		$smtp->close_session($err_msg);		return false;	}	// From this point onward most server response codes should be 250	// Specify who the mail is from....	$smtp->server_send('MAIL FROM:<' . $config['board_email'] . '>');	if ($err_msg = $smtp->server_parse('250', __LINE__))	{		$smtp->close_session($err_msg);		return false;	}	// Specify each user to send to and build to header.	$to_header = implode(', ', $mail_to);	$cc_header = implode(', ', $mail_cc);	// Now tell the MTA to send the Message to the following people... [TO, BCC, CC]	$rcpt = false;	foreach ($mail_rcpt as $type => $mail_to_addresses)	{		foreach ($mail_to_addresses as $mail_to_address)		{			// Add an additional bit of error checking to the To field.			if (preg_match('#[^ ]+\@[^ ]+#', $mail_to_address))			{				$smtp->server_send("RCPT TO:$mail_to_address");				if ($err_msg = $smtp->server_parse('250', __LINE__))				{					// We continue... if users are not resolved we do not care					if ($smtp->numeric_response_code != 550)					{						$smtp->close_session($err_msg);						return false;					}				}				else				{					$rcpt = true;				}			}		}	}	// We try to send messages even if a few people do not seem to have valid email addresses, but if no one has, we have to exit here.	if (!$rcpt)	{		$user->session_begin();		$err_msg .= '<br /><br />';		$err_msg .= (isset($user->lang['INVALID_EMAIL_LOG'])) ? sprintf($user->lang['INVALID_EMAIL_LOG'], htmlspecialchars($mail_to_address)) : '<strong>' . htmlspecialchars($mail_to_address) . '</strong> possibly an invalid email address?';		$smtp->close_session($err_msg);		return false;	}	// Ok now we tell the server we are ready to start sending data	$smtp->server_send('DATA');	// This is the last response code we look for until the end of the message.	if ($err_msg = $smtp->server_parse('354', __LINE__))	{		$smtp->close_session($err_msg);		return false;	}	// Send the Subject Line...	$smtp->server_send("Subject: $subject");	// Now the To Header.	$to_header = ($to_header == '') ? 'undisclosed-recipients:;' : $to_header;	$smtp->server_send("To: $to_header");	// Now the CC Header.	if ($cc_header != '')	{		$smtp->server_send("CC: $cc_header");	}	// Now any custom headers....	if ($headers !== false)	{		$smtp->server_send("$headers\r\n");	}	// Ok now we are ready for the message...	$smtp->server_send($message);	// Ok the all the ingredients are mixed in let's cook this puppy...	$smtp->server_send('.');	if ($err_msg = $smtp->server_parse('250', __LINE__))	{		$smtp->close_session($err_msg);		return false;	}	// Now tell the server we are done and close the socket...	$smtp->server_send('QUIT');	$smtp->close_session($err_msg);	return true;}/*** SMTP Class* Auth Mechanisms originally taken from the AUTH Modules found within the PHP Extension and Application Repository (PEAR)* See docs/AUTHORS for more details* @package phpBB3*/class smtp_class{	var $server_response = '';	var $socket = 0;	var $responses = array();	var $commands = array();	var $numeric_response_code = 0;	var $backtrace = false;	var $backtrace_log = array();	function smtp_class()	{		// Always create a backtrace for admins to identify SMTP problems		$this->backtrace = true;		$this->backtrace_log = array();	}	/**	* Add backtrace message for debugging	*/	function add_backtrace($message)	{		if ($this->backtrace)		{			$this->backtrace_log[] = utf8_htmlspecialchars($message);		}	}	/**	* Send command to smtp server	*/	function server_send($command, $private_info = false)	{		fputs($this->socket, $command . "\r\n");		(!$private_info) ? $this->add_backtrace("# $command") : $this->add_backtrace('# Omitting sensitive information');		// We could put additional code here	}	/**	* We use the line to give the support people an indication at which command the error occurred	*/	function server_parse($response, $line)	{		global $user;		$this->server_response = '';		$this->responses = array();		$this->numeric_response_code = 0;		while (substr($this->server_response, 3, 1) != ' ')		{			if (!($this->server_response = fgets($this->socket, 256)))			{				return (isset($user->lang['NO_EMAIL_RESPONSE_CODE'])) ? $user->lang['NO_EMAIL_RESPONSE_CODE'] : 'Could not get mail server response codes';			}			$this->responses[] = substr(rtrim($this->server_response), 4);			$this->numeric_response_code = (int) substr($this->server_response, 0, 3);			$this->add_backtrace("LINE: $line <- {$this->server_response}");		}		if (!(substr($this->server_response, 0, 3) == $response))		{			$this->numeric_response_code = (int) substr($this->server_response, 0, 3);			return (isset($user->lang['EMAIL_SMTP_ERROR_RESPONSE'])) ? sprintf($user->lang['EMAIL_SMTP_ERROR_RESPONSE'], $line, $this->server_response) : "Ran into problems sending Mail at <strong>Line $line</strong>. Response: $this->server_response";		}		return 0;	}	/**	* Close session	*/	function close_session(&$err_msg)	{		fclose($this->socket);		if ($this->backtrace)		{			$message = '<h1>Backtrace</h1><p>' . implode('<br />', $this->backtrace_log) . '</p>';			$err_msg .= $message;		}	}	/**	* Log into server and get possible auth codes if neccessary	*/	function log_into_server($hostname, $username, $password, $default_auth_method)	{		global $user;		$err_msg = '';		// Here we try to determine the *real* hostname (reverse DNS entry preferrably)		$local_host = $user->host;		if (function_exists('php_uname'))		{			$local_host = php_uname('n');			// Able to resolve name to IP			if (($addr = @gethostbyname($local_host)) !== $local_host)			{				// Able to resolve IP back to name				if (($name = @gethostbyaddr($addr)) !== $addr)				{					$local_host = $name;				}			}		}		// If we are authenticating through pop-before-smtp, we		// have to login ones before we get authenticated		// NOTE: on some configurations the time between an update of the auth database takes so		// long that the first email send does not work. This is not a biggie on a live board (only		// the install mail will most likely fail) - but on a dynamic ip connection this might produce		// severe problems and is not fixable!		if ($default_auth_method == 'POP-BEFORE-SMTP' && $username && $password)		{			global $config;			$errno = 0;			$errstr = '';			$this->server_send("QUIT");			fclose($this->socket);			$result = $this->pop_before_smtp($hostname, $username, $password);			$username = $password = $default_auth_method = '';			// We need to close the previous session, else the server is not			// able to get our ip for matching...			if (!$this->socket = @fsockopen($config['smtp_host'], $config['smtp_port'], $errno, $errstr, 10))			{				if ($errstr)				{					$errstr = utf8_convert_message($errstr);				}				$err_msg = (isset($user->lang['NO_CONNECT_TO_SMTP_HOST'])) ? sprintf($user->lang['NO_CONNECT_TO_SMTP_HOST'], $errno, $errstr) : "Could not connect to smtp host : $errno : $errstr";				return $err_msg;			}			// Wait for reply			if ($err_msg = $this->server_parse('220', __LINE__))			{				$this->close_session($err_msg);				return $err_msg;			}		}		// Try EHLO first		$this->server_send("EHLO {$local_host}");		if ($err_msg = $this->server_parse('250', __LINE__))		{			// a 503 response code means that we're already authenticated			if ($this->numeric_response_code == 503)			{				return false;			}			// If EHLO fails, we try HELO			$this->server_send("HELO {$local_host}");			if ($err_msg = $this->server_parse('250', __LINE__))			{				return ($this->numeric_response_code == 503) ? false : $err_msg;			}		}		foreach ($this->responses as $response)		{			$response = explode(' ', $response);			$response_code = $response[0];			unset($response[0]);			$this->commands[$response_code] = implode(' ', $response);		}		// If we are not authenticated yet, something might be wrong if no username and passwd passed		if (!$username || !$password)		{			return false;		}		if (!isset($this->commands['AUTH']))		{			return (isset($user->lang['SMTP_NO_AUTH_SUPPORT'])) ? $user->lang['SMTP_NO_AUTH_SUPPORT'] : 'SMTP server does not support authentication';		}		// Get best authentication method		$available_methods = explode(' ', $this->commands['AUTH']);		// Define the auth ordering if the default auth method was not found		$auth_methods = array('PLAIN', 'LOGIN', 'CRAM-MD5', 'DIGEST-MD5');		$method = '';		if (in_array($default_auth_method, $available_methods))		{			$method = $default_auth_method;		}		else		{			foreach ($auth_methods as $_method)			{				if (in_array($_method, $available_methods))				{					$method = $_method;					break;				}			}		}		if (!$method)		{			return (isset($user->lang['NO_SUPPORTED_AUTH_METHODS'])) ? $user->lang['NO_SUPPORTED_AUTH_METHODS'] : 'No supported authentication methods';		}		$method = strtolower(str_replace('-', '_', $method));		return $this->$method($username, $password);	}	/**	* Pop before smtp authentication	*/	function pop_before_smtp($hostname, $username, $password)	{		global $user;		if (!$this->socket = @fsockopen($hostname, 110, $errno, $errstr, 10))		{			if ($errstr)			{				$errstr = utf8_convert_message($errstr);			}			return (isset($user->lang['NO_CONNECT_TO_SMTP_HOST'])) ? sprintf($user->lang['NO_CONNECT_TO_SMTP_HOST'], $errno, $errstr) : "Could not connect to smtp host : $errno : $errstr";		}		$this->server_send("USER $username", true);		if ($err_msg = $this->server_parse('+OK', __LINE__))		{			return $err_msg;		}		$this->server_send("PASS $password", true);		if ($err_msg = $this->server_parse('+OK', __LINE__))		{			return $err_msg;		}		$this->server_send('QUIT');		fclose($this->socket);		return false;	}	/**	* Plain authentication method	*/	function plain($username, $password)	{		$this->server_send('AUTH PLAIN');		if ($err_msg = $this->server_parse('334', __LINE__))		{			return ($this->numeric_response_code == 503) ? false : $err_msg;		}		$base64_method_plain = base64_encode("\0" . $username . "\0" . $password);		$this->server_send($base64_method_plain, true);		if ($err_msg = $this->server_parse('235', __LINE__))		{			return $err_msg;		}		return false;	}	/**	* Login authentication method	*/	function login($username, $password)	{		$this->server_send('AUTH LOGIN');		if ($err_msg = $this->server_parse('334', __LINE__))		{			return ($this->numeric_response_code == 503) ? false : $err_msg;		}		$this->server_send(base64_encode($username), true);		if ($err_msg = $this->server_parse('334', __LINE__))		{			return $err_msg;		}		$this->server_send(base64_encode($password), true);		if ($err_msg = $this->server_parse('235', __LINE__))		{			return $err_msg;		}		return false;	}	/**	* cram_md5 authentication method	*/	function cram_md5($username, $password)	{		$this->server_send('AUTH CRAM-MD5');		if ($err_msg = $this->server_parse('334', __LINE__))		{			return ($this->numeric_response_code == 503) ? false : $err_msg;		}		$md5_challenge = base64_decode($this->responses[0]);		$password = (strlen($password) > 64) ? pack('H32', md5($password)) : ((strlen($password) < 64) ? str_pad($password, 64, chr(0)) : $password);		$md5_digest = md5((substr($password, 0, 64) ^ str_repeat(chr(0x5C), 64)) . (pack('H32', md5((substr($password, 0, 64) ^ str_repeat(chr(0x36), 64)) . $md5_challenge))));		$base64_method_cram_md5 = base64_encode($username . ' ' . $md5_digest);		$this->server_send($base64_method_cram_md5, true);		if ($err_msg = $this->server_parse('235', __LINE__))		{			return $err_msg;		}		return false;	}	/**	* digest_md5 authentication method	* A real pain in the ***	*/	function digest_md5($username, $password)	{		global $config, $user;		$this->server_send('AUTH DIGEST-MD5');		if ($err_msg = $this->server_parse('334', __LINE__))		{			return ($this->numeric_response_code == 503) ? false : $err_msg;		}		$md5_challenge = base64_decode($this->responses[0]);		// Parse the md5 challenge - from AUTH_SASL (PEAR)		$tokens = array();		while (preg_match('/^([a-z-]+)=("[^"]+(?<!\\\)"|[^,]+)/i', $md5_challenge, $matches))		{			// Ignore these as per rfc2831			if ($matches[1] == 'opaque' || $matches[1] == 'domain')			{				$md5_challenge = substr($md5_challenge, strlen($matches[0]) + 1);				continue;			}			// Allowed multiple "realm" and "auth-param"			if (!empty($tokens[$matches[1]]) && ($matches[1] == 'realm' || $matches[1] == 'auth-param'))			{				if (is_array($tokens[$matches[1]]))				{					$tokens[$matches[1]][] = preg_replace('/^"(.*)"$/', '\\1', $matches[2]);				}				else				{					$tokens[$matches[1]] = array($tokens[$matches[1]], preg_replace('/^"(.*)"$/', '\\1', $matches[2]));				}			}			else if (!empty($tokens[$matches[1]])) // Any other multiple instance = failure			{				$tokens = array();				break;			}			else			{				$tokens[$matches[1]] = preg_replace('/^"(.*)"$/', '\\1', $matches[2]);			}			// Remove the just parsed directive from the challenge			$md5_challenge = substr($md5_challenge, strlen($matches[0]) + 1);		}		// Realm		if (empty($tokens['realm']))		{			$tokens['realm'] = (function_exists('php_uname')) ? php_uname('n') : $user->host;		}		// Maxbuf		if (empty($tokens['maxbuf']))		{			$tokens['maxbuf'] = 65536;		}		// Required: nonce, algorithm		if (empty($tokens['nonce']) || empty($tokens['algorithm']))		{			$tokens = array();		}		$md5_challenge = $tokens;		if (!empty($md5_challenge))		{			$str = '';			for ($i = 0; $i < 32; $i++)			{				$str .= chr(mt_rand(0, 255));			}			$cnonce = base64_encode($str);			$digest_uri = 'smtp/' . $config['smtp_host'];			$auth_1 = sprintf('%s:%s:%s', pack('H32', md5(sprintf('%s:%s:%s', $username, $md5_challenge['realm'], $password))), $md5_challenge['nonce'], $cnonce);			$auth_2 = 'AUTHENTICATE:' . $digest_uri;			$response_value = md5(sprintf('%s:%s:00000001:%s:auth:%s', md5($auth_1), $md5_challenge['nonce'], $cnonce, md5($auth_2)));			$input_string = sprintf('username="%s",realm="%s",nonce="%s",cnonce="%s",nc="00000001",qop=auth,digest-uri="%s",response=%s,%d', $username, $md5_challenge['realm'], $md5_challenge['nonce'], $cnonce, $digest_uri, $response_value, $md5_challenge['maxbuf']);		}		else		{			return (isset($user->lang['INVALID_DIGEST_CHALLENGE'])) ? $user->lang['INVALID_DIGEST_CHALLENGE'] : 'Invalid digest challenge';		}		$base64_method_digest_md5 = base64_encode($input_string);		$this->server_send($base64_method_digest_md5, true);		if ($err_msg = $this->server_parse('334', __LINE__))		{			return $err_msg;		}		$this->server_send(' ');		if ($err_msg = $this->server_parse('235', __LINE__))		{			return $err_msg;		}		return false;	}}/*** Encodes the given string for proper display in UTF-8.** This version is using base64 encoded data. The downside of this* is if the mail client does not understand this encoding the user* is basically doomed with an unreadable subject.** Please note that this version fully supports RFC 2045 section 6.8.** @param string $eol End of line we are using (optional to be backwards compatible)*/function mail_encode($str, $eol = "\r\n"){	// define start delimimter, end delimiter and spacer	$start = "=?UTF-8?B?";	$end = "?=";	$delimiter = "$eol ";	// Maximum length is 75. $split_length *must* be a multiple of 4, but <= 75 - strlen($start . $delimiter . $end)!!!	$split_length = 60;	$encoded_str = base64_encode($str);	// If encoded string meets the limits, we just return with the correct data.	if (strlen($encoded_str) <= $split_length)	{		return $start . $encoded_str . $end;	}	// If there is only ASCII data, we just return what we want, correctly splitting the lines.	if (strlen($str) === utf8_strlen($str))	{		return $start . implode($end . $delimiter . $start, str_split($encoded_str, $split_length)) . $end;	}	// UTF-8 data, compose encoded lines	$array = utf8_str_split($str);	$str = '';	while (sizeof($array))	{		$text = '';		while (sizeof($array) && intval((strlen($text . $array[0]) + 2) / 3) << 2 <= $split_length)		{			$text .= array_shift($array);		}		$str .= $start . base64_encode($text) . $end . $delimiter;	}	return substr($str, 0, -strlen($delimiter));}/*** Wrapper for sending out emails with the PHP's mail function*/function phpbb_mail($to, $subject, $msg, $headers, $eol, &$err_msg){	global $config, $phpbb_root_path, $phpEx;	// We use the EOL character for the OS here because the PHP mail function does not correctly transform line endings. On Windows SMTP is used (SMTP is \r\n), on UNIX a command is used...	// Reference: http://bugs.php.net/bug.php?id=15841	$headers = implode($eol, $headers);	if (!class_exists('phpbb_error_collector'))	{		include($phpbb_root_path . 'includes/error_collector.' . $phpEx);	}	$collector = new phpbb_error_collector;	$collector->install();	// On some PHP Versions mail() *may* fail if there are newlines within the subject.	// Newlines are used as a delimiter for lines in mail_encode() according to RFC 2045 section 6.8.	// Because PHP can't decide what is wanted we revert back to the non-RFC-compliant way of separating by one space (Use '' as parameter to mail_encode() results in SPACE used)	$result = $config['email_function_name']($to, mail_encode($subject, ''), wordwrap(utf8_wordwrap($msg), 997, "\n", true), $headers);	$collector->uninstall();	$err_msg = $collector->format_errors();	return $result;}?>
<?php/**** @package phpBB3* @copyright (c) 2011 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/if (!defined('IN_PHPBB')){	exit;}// Report all errors, except notices and deprecation messagesif (!defined('E_DEPRECATED')){	define('E_DEPRECATED', 8192);}error_reporting(E_ALL & ~E_NOTICE & ~E_DEPRECATED);/** Remove variables created by register_globals from the global scope* Thanks to Matt Kavanagh*/function deregister_globals(){	$not_unset = array(		'GLOBALS'	=> true,		'_GET'		=> true,		'_POST'		=> true,		'_COOKIE'	=> true,		'_REQUEST'	=> true,		'_SERVER'	=> true,		'_SESSION'	=> true,		'_ENV'		=> true,		'_FILES'	=> true,		'phpEx'		=> true,		'phpbb_root_path'	=> true	);	// Not only will array_merge and array_keys give a warning if	// a parameter is not an array, array_merge will actually fail.	// So we check if _SESSION has been initialised.	if (!isset($_SESSION) || !is_array($_SESSION))	{		$_SESSION = array();	}	// Merge all into one extremely huge array; unset this later	$input = array_merge(		array_keys($_GET),		array_keys($_POST),		array_keys($_COOKIE),		array_keys($_SERVER),		array_keys($_SESSION),		array_keys($_ENV),		array_keys($_FILES)	);	foreach ($input as $varname)	{		if (isset($not_unset[$varname]))		{			// Hacking attempt. No point in continuing unless it's a COOKIE (so a cookie called GLOBALS doesn't lock users out completely)			if ($varname !== 'GLOBALS' || isset($_GET['GLOBALS']) || isset($_POST['GLOBALS']) || isset($_SERVER['GLOBALS']) || isset($_SESSION['GLOBALS']) || isset($_ENV['GLOBALS']) || isset($_FILES['GLOBALS']))			{				exit;			}			else			{				$cookie = &$_COOKIE;				while (isset($cookie['GLOBALS']))				{					if (!is_array($cookie['GLOBALS']))					{						break;					}					foreach ($cookie['GLOBALS'] as $registered_var => $value)					{						if (!isset($not_unset[$registered_var]))						{							unset($GLOBALS[$registered_var]);						}					}					$cookie = &$cookie['GLOBALS'];				}			}		}		unset($GLOBALS[$varname]);	}	unset($input);}// Register globals and magic quotes have been dropped in PHP 5.4if (version_compare(PHP_VERSION, '5.4.0-dev', '>=')){	/**	* @ignore	*/	define('STRIP', false);}else{	@set_magic_quotes_runtime(0);	// Be paranoid with passed vars	if (@ini_get('register_globals') == '1' || strtolower(@ini_get('register_globals')) == 'on' || !function_exists('ini_get'))	{		deregister_globals();	}	define('STRIP', (get_magic_quotes_gpc()) ? true : false);}// Prevent date/time functions from throwing E_WARNING on PHP 5.3 by setting a default timezoneif (function_exists('date_default_timezone_set') && function_exists('date_default_timezone_get')){	// For PHP 5.1.0 the date/time functions have been rewritten	// and setting a timezone is required prior to calling any date/time function.	// Since PHP 5.2.0 calls to date/time functions without having a timezone set	// result in E_STRICT errors being thrown.	// Note: We already exclude E_STRICT errors	// (to be exact: they are not included in E_ALL in PHP 5.2)	// In PHP 5.3.0 the error level has been raised to E_WARNING which causes problems	// because we show E_WARNING errors and do not set a default timezone.	// This is because we have our own timezone handling and work in UTC only anyway.	// So what we basically want to do is set our timezone to UTC,	// but we don't know what other scripts (such as bridges) are involved,	// so we check whether a timezone is already set by calling date_default_timezone_get().	// Unfortunately, date_default_timezone_get() itself might throw E_WARNING	// if no timezone has been set, so we have to keep it quiet with @.	// date_default_timezone_get() tries to guess the correct timezone first	// and then falls back to UTC when everything fails.	// We just set the timezone to whatever date_default_timezone_get() returns.	date_default_timezone_set(@date_default_timezone_get());}$starttime = explode(' ', microtime());$starttime = $starttime[1] + $starttime[0];
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_bbcodes_info{	function module()	{		return array(			'filename'	=> 'acp_bbcodes',			'title'		=> 'ACP_BBCODES',			'version'	=> '1.0.0',			'modes'		=> array(				'bbcodes'		=> array('title' => 'ACP_BBCODES', 'auth' => 'acl_a_bbcode', 'cat' => array('ACP_MESSAGES')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ucp_resend* Resending activation emails* @package ucp*/class ucp_resend{	var $u_action;	function main($id, $mode)	{		global $config, $phpbb_root_path, $phpEx;		global $db, $user, $auth, $template;		$username	= request_var('username', '', true);		$email		= strtolower(request_var('email', ''));		$submit		= (isset($_POST['submit'])) ? true : false;		add_form_key('ucp_resend');		if ($submit)		{			if (!check_form_key('ucp_resend'))			{				trigger_error('FORM_INVALID');			}			$sql = 'SELECT user_id, group_id, username, user_email, user_type, user_lang, user_actkey, user_inactive_reason				FROM ' . USERS_TABLE . "				WHERE user_email_hash = '" . $db->sql_escape(phpbb_email_hash($email)) . "'					AND username_clean = '" . $db->sql_escape(utf8_clean_string($username)) . "'";			$result = $db->sql_query($sql);			$user_row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$user_row)			{				trigger_error('NO_EMAIL_USER');			}			if ($user_row['user_type'] == USER_IGNORE)			{				trigger_error('NO_USER');			}			if (!$user_row['user_actkey'] && $user_row['user_type'] != USER_INACTIVE)			{				trigger_error('ACCOUNT_ALREADY_ACTIVATED');			}			if (!$user_row['user_actkey'] || ($user_row['user_type'] == USER_INACTIVE && $user_row['user_inactive_reason'] == INACTIVE_MANUAL))			{				trigger_error('ACCOUNT_DEACTIVATED');			}			// Determine coppa status on group (REGISTERED(_COPPA))			$sql = 'SELECT group_name, group_type				FROM ' . GROUPS_TABLE . '				WHERE group_id = ' . $user_row['group_id'];			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$row)			{				trigger_error('NO_GROUP');			}			$coppa = ($row['group_name'] == 'REGISTERED_COPPA' && $row['group_type'] == GROUP_SPECIAL) ? true : false;			include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);			$messenger = new messenger(false);			if ($config['require_activation'] == USER_ACTIVATION_SELF || $coppa)			{				$messenger->template(($coppa) ? 'coppa_resend_inactive' : 'user_resend_inactive', $user_row['user_lang']);				$messenger->to($user_row['user_email'], $user_row['username']);				$messenger->anti_abuse_headers($config, $user);				$messenger->assign_vars(array(					'WELCOME_MSG'	=> htmlspecialchars_decode(sprintf($user->lang['WELCOME_SUBJECT'], $config['sitename'])),					'USERNAME'		=> htmlspecialchars_decode($user_row['username']),					'U_ACTIVATE'	=> generate_board_url() . "/ucp.$phpEx?mode=activate&u={$user_row['user_id']}&k={$user_row['user_actkey']}")				);				if ($coppa)				{					$messenger->assign_vars(array(						'FAX_INFO'		=> $config['coppa_fax'],						'MAIL_INFO'		=> $config['coppa_mail'],						'EMAIL_ADDRESS'	=> $user_row['user_email'])					);				}				$messenger->send(NOTIFY_EMAIL);			}			if ($config['require_activation'] == USER_ACTIVATION_ADMIN)			{				// Grab an array of user_id's with a_user permissions ... these users can activate a user				$admin_ary = $auth->acl_get_list(false, 'a_user', false);				$sql = 'SELECT user_id, username, user_email, user_lang, user_jabber, user_notify_type					FROM ' . USERS_TABLE . '					WHERE ' . $db->sql_in_set('user_id', $admin_ary[0]['a_user']);				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$messenger->template('admin_activate', $row['user_lang']);					$messenger->to($row['user_email'], $row['username']);					$messenger->im($row['user_jabber'], $row['username']);					$messenger->anti_abuse_headers($config, $user);					$messenger->assign_vars(array(						'USERNAME'			=> htmlspecialchars_decode($user_row['username']),						'U_USER_DETAILS'	=> generate_board_url() . "/memberlist.$phpEx?mode=viewprofile&u={$user_row['user_id']}",						'U_ACTIVATE'		=> generate_board_url() . "/ucp.$phpEx?mode=activate&u={$user_row['user_id']}&k={$user_row['user_actkey']}")					);					$messenger->send($row['user_notify_type']);				}				$db->sql_freeresult($result);			}			meta_refresh(3, append_sid("{$phpbb_root_path}index.$phpEx"));			$message = ($config['require_activation'] == USER_ACTIVATION_ADMIN) ? $user->lang['ACTIVATION_EMAIL_SENT_ADMIN'] : $user->lang['ACTIVATION_EMAIL_SENT'];			$message .= '<br /><br />' . sprintf($user->lang['RETURN_INDEX'], '<a href="' . append_sid("{$phpbb_root_path}index.$phpEx") . '">', '</a>');			trigger_error($message);		}		$template->assign_vars(array(			'USERNAME'			=> $username,			'EMAIL'				=> $email,			'S_PROFILE_ACTION'	=> append_sid($phpbb_root_path . 'ucp.' . $phpEx, 'mode=resend_act'))		);		$this->tpl_name = 'ucp_resend';		$this->page_title = 'UCP_RESEND';	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/define('IN_PHPBB', true);define('IN_CRON', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);// Do not update users last page entry$user->session_begin(false);$auth->acl($user->data);$cron_type = request_var('cron_type', '');// Output transparent gifheader('Cache-Control: no-cache');header('Content-type: image/gif');header('Content-length: 43');echo base64_decode('R0lGODlhAQABAIAAAP///wAAACH5BAEAAAAALAAAAAABAAEAAAICRAEAOw==');// Flush here to prevent browser from showing the page as loading while running cron.flush();if (!isset($config['cron_lock'])){	set_config('cron_lock', '0', true);}// make sure cron doesn't run multiple times in parallelif ($config['cron_lock']){	// if the other process is running more than an hour already we have to assume it	// aborted without cleaning the lock	$time = explode(' ', $config['cron_lock']);	$time = $time[0];	if ($time + 3600 >= time())	{		exit;	}}define('CRON_ID', time() . ' ' . unique_id());$sql = 'UPDATE ' . CONFIG_TABLE . "	SET config_value = '" . $db->sql_escape(CRON_ID) . "'	WHERE config_name = 'cron_lock' AND config_value = '" . $db->sql_escape($config['cron_lock']) . "'";$db->sql_query($sql);// another cron process altered the table between script start and UPDATE query so exitif ($db->sql_affectedrows() != 1){	exit;}/*** Run cron-like action* Real cron-based layer will be introduced in 3.2*/switch ($cron_type){	case 'queue':		if (time() - $config['queue_interval'] <= $config['last_queue_run'] || !file_exists($phpbb_root_path . 'cache/queue.' . $phpEx))		{			break;		}		include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);		$queue = new queue();		$queue->process();	break;	case 'tidy_cache':		if (time() - $config['cache_gc'] <= $config['cache_last_gc'] || !method_exists($cache, 'tidy'))		{			break;		}		$cache->tidy();	break;	case 'tidy_search':				// Select the search method		$search_type = basename($config['search_type']);		if (time() - $config['search_gc'] <= $config['search_last_gc'] || !file_exists($phpbb_root_path . 'includes/search/' . $search_type . '.' . $phpEx))		{			break;		}		include_once("{$phpbb_root_path}includes/search/$search_type.$phpEx");		// We do some additional checks in the module to ensure it can actually be utilised		$error = false;		$search = new $search_type($error);		if ($error)		{			break;		}		$search->tidy();	break;	case 'tidy_warnings':		if (time() - $config['warnings_gc'] <= $config['warnings_last_gc'])		{			break;		}		include_once($phpbb_root_path . 'includes/functions_admin.' . $phpEx);		tidy_warnings();	break;	case 'tidy_database':		if (time() - $config['database_gc'] <= $config['database_last_gc'])		{			break;		}		include_once($phpbb_root_path . 'includes/functions_admin.' . $phpEx);		tidy_database();	break;	case 'tidy_sessions':		if (time() - $config['session_gc'] <= $config['session_last_gc'])		{			break;		}		$user->session_gc();	break;	case 'prune_forum':		$forum_id = request_var('f', 0);		$sql = 'SELECT forum_id, prune_next, enable_prune, prune_days, prune_viewed, forum_flags, prune_freq			FROM ' . FORUMS_TABLE . "			WHERE forum_id = $forum_id";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$row)		{			break;		}		// Do the forum Prune thang		if ($row['prune_next'] < time() && $row['enable_prune'])		{			include_once($phpbb_root_path . 'includes/functions_admin.' . $phpEx);			if ($row['prune_days'])			{				auto_prune($row['forum_id'], 'posted', $row['forum_flags'], $row['prune_days'], $row['prune_freq']);			}			if ($row['prune_viewed'])			{				auto_prune($row['forum_id'], 'viewed', $row['forum_flags'], $row['prune_viewed'], $row['prune_freq']);			}		}	break;}// Unloading cache and closing db after having done the dirty work.unlock_cron();garbage_collection();exit;/*** Unlock cron script*/function unlock_cron(){	global $db;	$sql = 'UPDATE ' . CONFIG_TABLE . "		SET config_value = '0'		WHERE config_name = 'cron_lock' AND config_value = '" . $db->sql_escape(CRON_ID) . "'";	$db->sql_query($sql);}?>
<?php/**** @package acm* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ACM Abstract Memory Class* @package acm*/class acm_memory{	var $key_prefix;	var $vars = array();	var $is_modified = false;	var $sql_rowset = array();	var $sql_row_pointer = array();	var $cache_dir = '';	/**	* Set cache path	*/	function acm_memory()	{		global $phpbb_root_path, $dbname, $table_prefix;		$this->cache_dir	= $phpbb_root_path . 'cache/';		$this->key_prefix	= substr(md5($dbname . $table_prefix), 0, 8) . '_';		if (!isset($this->extension) || !extension_loaded($this->extension))		{			global $acm_type;			trigger_error("Could not find required extension [{$this->extension}] for the ACM module $acm_type.", E_USER_ERROR);		}		if (isset($this->function) && !function_exists($this->function))		{			global $acm_type;			trigger_error("The required function [{$this->function}] is not available for the ACM module $acm_type.", E_USER_ERROR);		}	}	/**	* Load global cache	*/	function load()	{		// grab the global cache		$this->vars = $this->_read('global');		if ($this->vars !== false)		{			return true;		}		return false;	}	/**	* Unload cache object	*/	function unload()	{		$this->save();		unset($this->vars);		unset($this->sql_rowset);		unset($this->sql_row_pointer);		$this->vars = array();		$this->sql_rowset = array();		$this->sql_row_pointer = array();	}	/**	* Save modified objects	*/	function save()	{		if (!$this->is_modified)		{			return;		}		$this->_write('global', $this->vars, 2592000);		$this->is_modified = false;	}	/**	* Tidy cache	*/	function tidy()	{		// cache has auto GC, no need to have any code here :)		set_config('cache_last_gc', time(), true);	}	/**	* Get saved cache object	*/	function get($var_name)	{		if ($var_name[0] == '_')		{			if (!$this->_exists($var_name))			{				return false;			}			return $this->_read($var_name);		}		else		{			return ($this->_exists($var_name)) ? $this->vars[$var_name] : false;		}	}	/**	* Put data into cache	*/	function put($var_name, $var, $ttl = 2592000)	{		if ($var_name[0] == '_')		{			$this->_write($var_name, $var, $ttl);		}		else		{			$this->vars[$var_name] = $var;			$this->is_modified = true;		}	}	/**	* Purge cache data	*/	function purge()	{		// Purge all phpbb cache files		$dir = @opendir($this->cache_dir);		if (!$dir)		{			return;		}		while (($entry = readdir($dir)) !== false)		{			if (strpos($entry, 'sql_') !== 0 && strpos($entry, 'data_') !== 0 && strpos($entry, 'ctpl_') !== 0 && strpos($entry, 'tpl_') !== 0)			{				continue;			}			$this->remove_file($this->cache_dir . $entry);		}		closedir($dir);		unset($this->vars);		unset($this->sql_rowset);		unset($this->sql_row_pointer);		$this->vars = array();		$this->sql_rowset = array();		$this->sql_row_pointer = array();		$this->is_modified = false;	}	/**	* Destroy cache data	*/	function destroy($var_name, $table = '')	{		if ($var_name == 'sql' && !empty($table))		{			if (!is_array($table))			{				$table = array($table);			}			foreach ($table as $table_name)			{				// gives us the md5s that we want				$temp = $this->_read('sql_' . $table_name);				if ($temp === false)				{					continue;				}				// delete each query ref				foreach ($temp as $md5_id => $void)				{					$this->_delete('sql_' . $md5_id);				}				// delete the table ref				$this->_delete('sql_' . $table_name);			}			return;		}		if (!$this->_exists($var_name))		{			return;		}		if ($var_name[0] == '_')		{			$this->_delete($var_name);		}		else if (isset($this->vars[$var_name]))		{			$this->is_modified = true;			unset($this->vars[$var_name]);			// We save here to let the following cache hits succeed			$this->save();		}	}	/**	* Check if a given cache entry exist	*/	function _exists($var_name)	{		if ($var_name[0] == '_')		{			return $this->_isset($var_name);		}		else		{			if (!sizeof($this->vars))			{				$this->load();			}			return isset($this->vars[$var_name]);		}	}	/**	* Load cached sql query	*/	function sql_load($query)	{		// Remove extra spaces and tabs		$query = preg_replace('/[\n\r\s\t]+/', ' ', $query);		$query_id = sizeof($this->sql_rowset);		if (($result = $this->_read('sql_' . md5($query))) === false)		{			return false;		}		$this->sql_rowset[$query_id] = $result;		$this->sql_row_pointer[$query_id] = 0;		return $query_id;	}	/**	* Save sql query	*/	function sql_save($query, &$query_result, $ttl)	{		global $db;		// Remove extra spaces and tabs		$query = preg_replace('/[\n\r\s\t]+/', ' ', $query);		$hash = md5($query);		// determine which tables this query belongs to		// Some queries use backticks, namely the get_database_size() query		// don't check for conformity, the SQL would error and not reach here.		if (!preg_match('/FROM \\(?(`?\\w+`?(?: \\w+)?(?:, ?`?\\w+`?(?: \\w+)?)*)\\)?/', $query, $regs))		{			// Bail out if the match fails.			return;		}		$tables = array_map('trim', explode(',', $regs[1]));		foreach ($tables as $table_name)		{			// Remove backticks			$table_name = ($table_name[0] == '`') ? substr($table_name, 1, -1) : $table_name;			if (($pos = strpos($table_name, ' ')) !== false)			{				$table_name = substr($table_name, 0, $pos);			}			$temp = $this->_read('sql_' . $table_name);			if ($temp === false)			{				$temp = array();			}			$temp[$hash] = true;			// This must never expire			$this->_write('sql_' . $table_name, $temp, 0);		}		// store them in the right place		$query_id = sizeof($this->sql_rowset);		$this->sql_rowset[$query_id] = array();		$this->sql_row_pointer[$query_id] = 0;		while ($row = $db->sql_fetchrow($query_result))		{			$this->sql_rowset[$query_id][] = $row;		}		$db->sql_freeresult($query_result);		$this->_write('sql_' . $hash, $this->sql_rowset[$query_id], $ttl);		$query_result = $query_id;	}	/**	* Ceck if a given sql query exist in cache	*/	function sql_exists($query_id)	{		return isset($this->sql_rowset[$query_id]);	}	/**	* Fetch row from cache (database)	*/	function sql_fetchrow($query_id)	{		if ($this->sql_row_pointer[$query_id] < sizeof($this->sql_rowset[$query_id]))		{			return $this->sql_rowset[$query_id][$this->sql_row_pointer[$query_id]++];		}		return false;	}	/**	* Fetch a field from the current row of a cached database result (database)	*/	function sql_fetchfield($query_id, $field)	{		if ($this->sql_row_pointer[$query_id] < sizeof($this->sql_rowset[$query_id]))		{			return (isset($this->sql_rowset[$query_id][$this->sql_row_pointer[$query_id]][$field])) ? $this->sql_rowset[$query_id][$this->sql_row_pointer[$query_id]++][$field] : false;		}		return false;	}	/**	* Seek a specific row in an a cached database result (database)	*/	function sql_rowseek($rownum, $query_id)	{		if ($rownum >= sizeof($this->sql_rowset[$query_id]))		{			return false;		}		$this->sql_row_pointer[$query_id] = $rownum;		return true;	}	/**	* Free memory used for a cached database result (database)	*/	function sql_freeresult($query_id)	{		if (!isset($this->sql_rowset[$query_id]))		{			return false;		}		unset($this->sql_rowset[$query_id]);		unset($this->sql_row_pointer[$query_id]);		return true;	}	/**	* Removes/unlinks file	*/	function remove_file($filename, $check = false)	{		if (!function_exists('phpbb_is_writable'))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/functions.' . $phpEx);		}		if ($check && !phpbb_is_writable($this->cache_dir))		{			// E_USER_ERROR - not using language entry - intended.			trigger_error('Unable to remove files within ' . $this->cache_dir . '. Please check directory permissions.', E_USER_ERROR);		}		return @unlink($filename);	}	/**	* Check if a cache var exists	*	* @access protected	* @param string $var Cache key	* @return bool True if it exists, otherwise false	*/	function _isset($var)	{		// Most caches don't need to check		return true;	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_email{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $cache;		global $phpbb_root_path, $phpbb_admin_path, $phpEx, $table_prefix;		$user->add_lang('acp/email');		$this->tpl_name = 'acp_email';		$this->page_title = 'ACP_MASS_EMAIL';		$form_key = 'acp_email';		add_form_key($form_key);		// Set some vars		$submit = (isset($_POST['submit'])) ? true : false;		$error = array();		$usernames	= request_var('usernames', '', true);		$group_id	= request_var('g', 0);		$subject	= utf8_normalize_nfc(request_var('subject', '', true));		$message	= utf8_normalize_nfc(request_var('message', '', true));		// Do the job ...		if ($submit)		{			// Error checking needs to go here ... if no subject and/or no message then skip			// over the send and return to the form			$use_queue		= (isset($_POST['send_immediately'])) ? false : true;			$priority		= request_var('mail_priority_flag', MAIL_NORMAL_PRIORITY);			if (!check_form_key($form_key))			{				$error[] = $user->lang['FORM_INVALID'];			}			if (!$subject)			{				$error[] = $user->lang['NO_EMAIL_SUBJECT'];			}			if (!$message)			{				$error[] = $user->lang['NO_EMAIL_MESSAGE'];			}			if (!sizeof($error))			{				if ($usernames)				{					// If giving usernames the admin is able to email inactive users too...					$sql = 'SELECT username, user_email, user_jabber, user_notify_type, user_lang						FROM ' . USERS_TABLE . '						WHERE ' . $db->sql_in_set('username_clean', array_map('utf8_clean_string', explode("\n", $usernames))) . '							AND user_allow_massemail = 1						ORDER BY user_lang, user_notify_type'; // , SUBSTRING(user_email FROM INSTR(user_email, '@'))				}				else				{					if ($group_id)					{						$sql_ary = array(							'SELECT'	=> 'u.user_email, u.username, u.username_clean, u.user_lang, u.user_jabber, u.user_notify_type',							'FROM'		=> array(								USERS_TABLE			=> 'u',								USER_GROUP_TABLE	=> 'ug',							),							'WHERE'		=> 'ug.group_id = ' . $group_id . '								AND ug.user_pending = 0								AND u.user_id = ug.user_id								AND u.user_allow_massemail = 1								AND u.user_type IN (' . USER_NORMAL . ', ' . USER_FOUNDER . ')',							'ORDER_BY'	=> 'u.user_lang, u.user_notify_type',						);					}					else					{						$sql_ary = array(							'SELECT'	=> 'u.username, u.username_clean, u.user_email, u.user_jabber, u.user_lang, u.user_notify_type',							'FROM'		=> array(								USERS_TABLE	=> 'u',							),							'WHERE'		=> 'u.user_allow_massemail = 1								AND u.user_type IN (' . USER_NORMAL . ', ' . USER_FOUNDER . ')',							'ORDER_BY'	=> 'u.user_lang, u.user_notify_type',						);					}					// Mail banned or not					if (!isset($_REQUEST['mail_banned_flag']))					{						$sql_ary['WHERE'] .= ' AND (b.ban_id IS NULL						        OR b.ban_exclude = 1)';						$sql_ary['LEFT_JOIN'] = array(							array(								'FROM'	=> array(									BANLIST_TABLE	=> 'b',								),								'ON'	=> 'u.user_id = b.ban_userid',							),						);					}					$sql = $db->sql_build_query('SELECT', $sql_ary);				}				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				if (!$row)				{					$db->sql_freeresult($result);					trigger_error($user->lang['NO_USER'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$i = $j = 0;				// Send with BCC				// Maximum number of bcc recipients				$max_chunk_size = (int) $config['email_max_chunk_size'];				$email_list = array();				$old_lang = $row['user_lang'];				$old_notify_type = $row['user_notify_type'];				do				{					if (($row['user_notify_type'] == NOTIFY_EMAIL && $row['user_email']) ||						($row['user_notify_type'] == NOTIFY_IM && $row['user_jabber']) ||						($row['user_notify_type'] == NOTIFY_BOTH && ($row['user_email'] || $row['user_jabber'])))					{						if ($i == $max_chunk_size || $row['user_lang'] != $old_lang || $row['user_notify_type'] != $old_notify_type)						{							$i = 0;							if (sizeof($email_list))							{								$j++;							}							$old_lang = $row['user_lang'];							$old_notify_type = $row['user_notify_type'];						}						$email_list[$j][$i]['lang']		= $row['user_lang'];						$email_list[$j][$i]['method']	= $row['user_notify_type'];						$email_list[$j][$i]['email']	= $row['user_email'];						$email_list[$j][$i]['name']		= $row['username'];						$email_list[$j][$i]['jabber']	= $row['user_jabber'];						$i++;					}				}				while ($row = $db->sql_fetchrow($result));				$db->sql_freeresult($result);				// Send the messages				include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);				include_once($phpbb_root_path . 'includes/functions_user.' . $phpEx);				$messenger = new messenger($use_queue);				$errored = false;				for ($i = 0, $size = sizeof($email_list); $i < $size; $i++)				{					$used_lang = $email_list[$i][0]['lang'];					$used_method = $email_list[$i][0]['method'];					for ($j = 0, $list_size = sizeof($email_list[$i]); $j < $list_size; $j++)					{						$email_row = $email_list[$i][$j];						$messenger->{((sizeof($email_list[$i]) == 1) ? 'to' : 'bcc')}($email_row['email'], $email_row['name']);						$messenger->im($email_row['jabber'], $email_row['name']);					}					$messenger->template('admin_send_email', $used_lang);					$messenger->anti_abuse_headers($config, $user);					$messenger->subject(htmlspecialchars_decode($subject));					$messenger->set_mail_priority($priority);					$messenger->assign_vars(array(						'CONTACT_EMAIL' => $config['board_contact'],						'MESSAGE'		=> htmlspecialchars_decode($message))					);					if (!($messenger->send($used_method)))					{						$errored = true;					}				}				unset($email_list);				$messenger->save_queue();				if ($usernames)				{					$usernames = explode("\n", $usernames);					add_log('admin', 'LOG_MASS_EMAIL', implode(', ', utf8_normalize_nfc($usernames)));				}				else				{					if ($group_id)					{						$group_name = get_group_name($group_id);					}					else					{						// Not great but the logging routine doesn't cope well with localising on the fly						$group_name = $user->lang['ALL_USERS'];					}					add_log('admin', 'LOG_MASS_EMAIL', $group_name);				}				if (!$errored)				{					$message = ($use_queue) ? $user->lang['EMAIL_SENT_QUEUE'] : $user->lang['EMAIL_SENT'];					trigger_error($message . adm_back_link($this->u_action));				}				else				{					$message = sprintf($user->lang['EMAIL_SEND_ERROR'], '<a href="' . append_sid("{$phpbb_admin_path}index.$phpEx", 'i=logs&amp;mode=critical') . '">', '</a>');					trigger_error($message . adm_back_link($this->u_action), E_USER_WARNING);				}			}		}		// Exclude bots and guests...		$sql = 'SELECT group_id			FROM ' . GROUPS_TABLE . "			WHERE group_name IN ('BOTS', 'GUESTS')";		$result = $db->sql_query($sql);		$exclude = array();		while ($row = $db->sql_fetchrow($result))		{			$exclude[] = $row['group_id'];		}		$db->sql_freeresult($result);		$select_list = '<option value="0"' . ((!$group_id) ? ' selected="selected"' : '') . '>' . $user->lang['ALL_USERS'] . '</option>';		$select_list .= group_select_options($group_id, $exclude);		$s_priority_options = '<option value="' . MAIL_LOW_PRIORITY . '">' . $user->lang['MAIL_LOW_PRIORITY'] . '</option>';		$s_priority_options .= '<option value="' . MAIL_NORMAL_PRIORITY . '" selected="selected">' . $user->lang['MAIL_NORMAL_PRIORITY'] . '</option>';		$s_priority_options .= '<option value="' . MAIL_HIGH_PRIORITY . '">' . $user->lang['MAIL_HIGH_PRIORITY'] . '</option>';		$template->assign_vars(array(			'S_WARNING'				=> (sizeof($error)) ? true : false,			'WARNING_MSG'			=> (sizeof($error)) ? implode('<br />', $error) : '',			'U_ACTION'				=> $this->u_action,			'S_GROUP_OPTIONS'		=> $select_list,			'USERNAMES'				=> $usernames,			'U_FIND_USERNAME'		=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=acp_email&amp;field=usernames'),			'SUBJECT'				=> $subject,			'MESSAGE'				=> $message,			'S_PRIORITY_OPTIONS'	=> $s_priority_options)		);	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_modules_info{	function module()	{		return array(			'filename'	=> 'acp_modules',			'title'		=> 'ACP_MODULE_MANAGEMENT',			'version'	=> '1.0.0',			'modes'		=> array(				'acp'		=> array('title' => 'ACP', 'auth' => 'acl_a_modules', 'cat' => array('ACP_MODULE_MANAGEMENT')),				'ucp'		=> array('title' => 'UCP', 'auth' => 'acl_a_modules', 'cat' => array('ACP_MODULE_MANAGEMENT')),				'mcp'		=> array('title' => 'MCP', 'auth' => 'acl_a_modules', 'cat' => array('ACP_MODULE_MANAGEMENT')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class mcp_notes_info{	function module()	{		return array(			'filename'	=> 'mcp_notes',			'title'		=> 'MCP_NOTES',			'version'	=> '1.0.0',			'modes'		=> array(				'front'				=> array('title' => 'MCP_NOTES_FRONT', 'auth' => '', 'cat' => array('MCP_NOTES')),				'user_notes'		=> array('title' => 'MCP_NOTES_USER', 'auth' => '', 'cat' => array('MCP_NOTES')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Main non-gd captcha class* @ignore* @package VC*/class captcha{	var $filtered_pngs;	var $width = 320;	var $height = 50;	/**	* Define filtered pngs on init	*/	function captcha()	{		// If we can we will generate a single filtered png, we avoid nastiness via emulation of some Zlib stuff		$this->define_filtered_pngs();	}	/**	* Create the image containing $code with a seed of $seed	*/	function execute($code, $seed)	{		$img_height = $this->height - 10;		$img_width = 0;		mt_srand($seed);		$char_widths = $hold_chars = array();		$code_len = strlen($code);		for ($i = 0; $i < $code_len; $i++)		{			$char = $code[$i];			$width = mt_rand(0, 4);			$raw_width = $this->filtered_pngs[$char]['width'];			$char_widths[$i] = $width;			$img_width += $raw_width - $width;			// Split the char into chunks of $raw_width + 1 length			if (empty($hold_chars[$char]))			{				$hold_chars[$char] = str_split(base64_decode($this->filtered_pngs[$char]['data']), $raw_width + 1);			}		}		$offset_x = mt_rand(0, $this->width - $img_width);		$offset_y = mt_rand(0, $this->height - $img_height);		$image = '';		for ($i = 0; $i < $this->height; $i++)		{			$image .= chr(0);			if ($i > $offset_y && $i < $offset_y + $img_height)			{				for ($j = 0; $j < $offset_x; $j++)				{					$image .= chr(mt_rand(140, 255));				}				for ($j = 0; $j < $code_len; $j++)				{					$image .= $this->randomise(substr($hold_chars[$code{$j}][$i - $offset_y - 1], 1), $char_widths[$j]);				}				for ($j = $offset_x + $img_width; $j < $this->width; $j++)				{					$image .= chr(mt_rand(140, 255));				}			}			else			{				for ($j = 0; $j < $this->width; $j++)				{					$image .= chr(mt_rand(140, 255));				}			}		}		unset($hold_chars);		$image = $this->create_png($image, $this->width, $this->height);		// Output image		header('Content-Type: image/png');		header('Cache-control: no-cache, no-store');		echo $image;		exit;	}	/**	* This is designed to randomise the pixels of the image data within	* certain limits so as to keep it readable. It also varies the image	* width a little	*/	function randomise($scanline, $width)	{		$new_line = '';		$end = strlen($scanline) - ceil($width/2);		for ($i = floor($width/2); $i < $end; $i++)		{			$pixel = ord($scanline{$i});			if ($pixel < 190)			{				$new_line .= chr(mt_rand(0, 205));			}			else if ($pixel > 190)			{				$new_line .= chr(mt_rand(145, 255));			}			else			{				$new_line .= $scanline{$i};			}		}		return $new_line;	}	/**	* This creates a chunk of the given type, with the given data	* of the given length adding the relevant crc	*/	function png_chunk($length, $type, $data)	{		$raw = $type . $data;		return pack('N', $length) . $raw . pack('N', crc32($raw));	}	/**	* Creates greyscale 8bit png - The PNG spec can be found at	* http://www.libpng.org/pub/png/spec/PNG-Contents.html we use	* png because it's a fully recognised open standard and supported	* by practically all modern browsers and OSs	*/	function create_png($raw_image, $width, $height)	{		// SIG		$image = pack('C8', 137, 80, 78, 71, 13, 10, 26, 10);		// IHDR		$raw = pack('N2', $width, $height);		$raw .= pack('C5', 8, 0, 0, 0, 0);		$image .= $this->png_chunk(13, 'IHDR', $raw);		// IDAT		if (@extension_loaded('zlib'))		{			$raw_image = gzcompress($raw_image);			$length = strlen($raw_image);		}		else		{			// The total length of this image, uncompressed, is just a calculation of pixels			$length = ($width + 1) * $height;			// Adler-32 hash generation			// Note: The hash is _backwards_ so we must reverse it			if (@extension_loaded('hash'))			{				$adler_hash = strrev(hash('adler32', $raw_image, true));			}			else if (@extension_loaded('mhash'))			{				$adler_hash = strrev(mhash(MHASH_ADLER32, $raw_image));			}			else			{				// Optimized Adler-32 loop ported from the GNU Classpath project				$temp_length = $length;				$s1 = 1;				$s2 = $index = 0;				while ($temp_length > 0)				{					// We can defer the modulo operation:					// s1 maximally grows from 65521 to 65521 + 255 * 3800					// s2 maximally grows by 3800 * median(s1) = 2090079800 < 2^31					$substract_value = ($temp_length < 3800) ? $temp_length : 3800;					$temp_length -= $substract_value;					while (--$substract_value >= 0)					{						$s1 += ord($raw_image[$index]);						$s2 += $s1;						$index++;					}					$s1 %= 65521;					$s2 %= 65521;				}				$adler_hash = pack('N', ($s2 << 16) | $s1);			}			// This is the same thing as gzcompress($raw_image, 0) but does not need zlib			$raw_image = pack('C3v2', 0x78, 0x01, 0x01, $length, ~$length) . $raw_image . $adler_hash;			// The Zlib header + Adler hash make us add on 11			$length += 11;		}		// IDAT		$image .= $this->png_chunk($length, 'IDAT', $raw_image);		// IEND		$image .= $this->png_chunk(0, 'IEND', '');		return $image;	}	/**	* png image data	* Each 'data' element is base64_encoded uncompressed IDAT	*/	function define_filtered_pngs()	{		$this->filtered_pngs = array(			'0' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A///////////////////olFAkBAAAGDyA4P///M31/////////////wD////////////////0dAgAAAAAAAAAAAAEcPipFGHn////////////AP//////////////6DAAAAAAAAAAAAAAAAAALSEAN+T///////////8A//////////////xAAAAAAAAAAAAAAAAAAAAAACPA/////////////wD/////////////oAAAAAAAAAAAAAAAAAAAAAAAev//////////////AP////////////8oAAAAAAAAPNj/zDAAAAAAAABD//////////////8A////////////1AAAAAAAABjw////5BAAAAAAAADo/////////////wD///////////+QAAAAAAAAbP//////QgAAAAAAAKj/////////////AP///////////1wAAAAAAACs/////8AXAAAAAAAAcP////////////8A////////////OAAAAAAAAND////dNwAAAAAAAABI/////////////wD///////////8gAAAAAAAA4P//7koACwAAAAAAACT/////////////AP///////////wgAAAAAAAD///VqAwaPAAAAAAAAEP////////////8A////////////AAAAAAAAAP/8kQYDavUAAAAAAAAA/////////////wD///////////8AAAAAAAAA/6kNAEru/wAAAAAAAAD/////////////AP///////////wAAAAAAAADAIwA33f//AAAAAAAAAP////////////8A////////////FAAAAAAAADYAI8D///8AAAAAAAAQ/////////////wD///////////8kAAAAAAAAAA2p////5AAAAAAAACD/////////////AP///////////0gAAAAAAAAFkfz////UAAAAAAAAQP////////////8A////////////cAAAAAAAAET1/////7AAAAAAAABo/////////////wD///////////+oAAAAAAAAXfX/////sAAAAAAAAGj/////////////AAAAALgAAAAAAAAwAAAAAAAAAAAAAAD////////////oAAAAAAAACOT////oEAAAAAAAAOD/////////////AP////////////8+AAAAAAAAKMz/zDQAAAAAAAA0//////////////8A////////////7jgAAAAAAAAAAAAAAAAAAAAAAKT//////////////wD///////////VqAwIAAAAAAAAAAAAAAAAAAAA8////////////////AP//////////rQcDaVEAAAAAAAAAAAAAAAAAKOj///////////////8A///////////nblnu/IAIAAAAAAAAAAAAAFzw/////////////////wD////////////79////+iITCAAAAAgSITg////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////w==',				'width' => 40			),			'1' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////8BAAAAAAAP//////////////////AP////////////////////////9sAAAAAAAA//////////////////8A////////////////////////pAAAAAAAAAD//////////////////wD//////////////////////6wEAAAAAAAAAP//////////////////AP////////////////////h4AAAAAAAAAAAA//////////////////8A//////////////////ygJAAAAAAAAAAAAAD//////////////////wD//////////////9x8HAAAAAAAAAAAAAAAAP//////////////////AP//////////////AAAAAAAAAAAAAAAAAAAA//////////////////8A//////////////8AAAAAAAAAAAAAAAAAAAD//////////////////wD//////////////wAAAAAAAAR4AAAAAAAAAP//////////////////AP//////////////AAAAAAA4zP8AAAAAAAAA//////////////////8A//////////////8AAAA4sP///wAAAAAAAAD//////////////////wD//////////////yR80P//////AAAAAAAAAP//////////////////AP////////////////////////8AAAAAAAAA//////////////////8A/////////////////////////wAAAAAAAAD//////////////////wD/////////////////////////AAAAAAAAAP//////////////////AP////////////////////////8AAAAAAAAA//////////////////8A/////////////////////////wAAAAAAAAD//////////////////wD/////////////////////////AAAAAAAAAP//////////////////AP////////////////////////8AAAAAAAAA//////////////////8A/////////////////////////wAAAAAAAAD//////////////////wD/////////////////////////AAAAAAAAAP//////////////////AP////////////////////////8AAAAAAAAA//////////////////8A/////////////////////////wAAAAAAAAD//////////////////wD/////////////////////////AAAAAAAAAP//////////////////AP////////////////////////8AAAAAAAAA//////////////////8A/////////////////////////wAAAAAAAAD//////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'2' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP/////////////////okFAkCAAABCBIfNT///////////////////8A///////////////8hAgAAAAAAAAAAAAAAFTo/////////////////wD//////////////1QAAAAAAAAAAAAAAAAAACjo////////////////AP////////////+MAAAAAAAAAAAAAAAAAAAAADj///////////////8A////////////9BAAAAAAAAAAAAAAAAAAAAAAALD//////////////wD///////////+gAAAAAAAAAHjs+KwMAAAAAAAAVP//////////////AP///////////1gAAAAAAABM/////6QAAAAAAAAU//////////////8A////////////KAAAAAAAALj/////+AAAAAAAAAD//////////////wD///////////+MfGBMOCAI8P/////wAAAAAAAACP//////////////AP///////////////////////////5wAAAAAAAAw//////////////8A///////////////////////////oFAAAAAAAAHz//////////////wD/////////////////////////6CgAAAAAAAAE3P//////////////AP///////////////////////9ggAAAAAAAAAHT///////////////8A//////////////////////+0DAAAAAAAAAA8+P///////////////wD/////////////////////gAAAAAAAAAAAKOj/////////////////AP//////////////////9FAAAAAAAAAAADzw//////////////////8A/////////////////+g4AAAAAAAAAABk/P///////////////////wD////////////////oKAAAAAAAAAAMqP//////////////////////AP//////////////6CgAAAAAAAAAMNz///////////////////////8A//////////////g4AAAAAAAAAFT0/////////////////////////wD/////////////bAAAAAAAAABU/P//////////////////////////AP///////////8wAAAAAAAAAAAAAAAAAAAAAAAAA//////////////8A////////////SAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////9wAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////hAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////8A//////////9AAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////xAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'3' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD////////////////8sGg0FAAAACA4cLz8////////////////////AP//////////////rBgAAAAAAAAAAAAAACTA//////////////////8A/////////////3QAAAAAAAAAAAAAAAAAAASs/////////////////wD///////////+YAAAAAAAAAAAAAAAAAAAAAAjc////////////////AP//////////6AwAAAAAAAAAAAAAAAAAAAAAAGT///////////////8A//////////94AAAAAAAABJDw/8g4AAAAAAAAHP///////////////wD//////////yAAAAAAAACE/////9gAAAAAAAAA////////////////AP///////////NSwiGQ4FOT//////AAAAAAAABD///////////////8A//////////////////////////+YAAAAAAAAVP///////////////wD//////////////////////P/ggAQAAAAAAATM////////////////AP////////////////////9gAAAAAAAAAAAElP////////////////8A/////////////////////0AAAAAAAAAAHLj//////////////////wD/////////////////////OAAAAAAAAAAwkPj/////////////////AP////////////////////8gAAAAAAAAAAAAINj///////////////8A/////////////////////xAAAAAAAAAAAAAAIPD//////////////wD/////////////////////uOz/4HgEAAAAAAAAhP//////////////AP///////////////////////////3wAAAAAAAAw//////////////8A////////////////////////////6AAAAAAAAAj//////////////wD/////////////////////////////AAAAAAAAAP//////////////AP//////////tJh8YEQoDNz//////+AAAAAAAAAY//////////////8A//////////88AAAAAAAAaP//////dAAAAAAAAEz//////////////wD//////////6QAAAAAAAAAdOD/5HQAAAAAAAAApP//////////////AP///////////CgAAAAAAAAAAAAAAAAAAAAAACD4//////////////8A////////////yAQAAAAAAAAAAAAAAAAAAAAEuP///////////////wD/////////////rAQAAAAAAAAAAAAAAAAABJD/////////////////AP//////////////zDQAAAAAAAAAAAAAACTA//////////////////8A/////////////////8BwOCAAAAAUNGi0/P///////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'4' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP//////////////////////////nAAAAAAAAAD///////////////8A/////////////////////////8AEAAAAAAAAAP///////////////wD////////////////////////gGAAAAAAAAAAA////////////////AP//////////////////////9DAAAAAAAAAAAAD///////////////8A//////////////////////9UAAAAAAAAAAAAAP///////////////wD/////////////////////hAAAAAAAAAAAAAAA////////////////AP///////////////////7QAAAAAAAAAAAAAAAD///////////////8A///////////////////UDAAAAAAUAAAAAAAAAP///////////////wD/////////////////7CQAAAAABMAAAAAAAAAA////////////////AP////////////////xEAAAAAACU/wAAAAAAAAD///////////////8A////////////////cAAAAAAAZP//AAAAAAAAAP///////////////wD//////////////6AAAAAAADz8//8AAAAAAAAA////////////////AP/////////////IBAAAAAAc6P///wAAAAAAAAD///////////////8A////////////5BgAAAAADMz/////AAAAAAAAAP///////////////wD///////////g0AAAAAACk//////8AAAAAAAAA////////////////AP//////////XAAAAAAAfP///////wAAAAAAAAD///////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////8A////////////////////////////AAAAAAAAAP///////////////wD///////////////////////////8AAAAAAAAA////////////////AP///////////////////////////wAAAAAAAAD///////////////8A////////////////////////////AAAAAAAAAP///////////////wD///////////////////////////8AAAAAAAAA////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'5' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP//////////////8AAAAAAAAAAAAAAAAAAAAAAA//////////////8A///////////////MAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////////6wAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////////iAAAAAAAAAAAAAAAAAAAAAAA//////////////8A//////////////9kAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////////0QAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////////IAAAAAAAYP////////////////////////////8A//////////////wAAAAAAAB8/////////////////////////////wD/////////////3AAAAAAAAIj/////////////////////////////AP////////////+4AAAAAAAAoLRYHAAEKGTE//////////////////8A/////////////5QAAAAAAAAQAAAAAAAAAABY9P///////////////wD/////////////dAAAAAAAAAAAAAAAAAAAAAA89P//////////////AP////////////9QAAAAAAAAAAAAAAAAAAAAAABg//////////////8A/////////////zAAAAAAAAAAAAAAAAAAAAAAAADQ/////////////wD/////////////IAAAAAAAAGjY/+h4BAAAAAAAAGz/////////////AP//////////////9NS0lHSc//////90AAAAAAAALP////////////8A/////////////////////////////9QAAAAAAAAE/////////////wD//////////////////////////////wAAAAAAAAD/////////////AP/////////////////////////////8AAAAAAAAEP////////////8A////////////pIRwWEAgDOD//////8wAAAAAAAA8/////////////wD///////////9EAAAAAAAAaP//////ZAAAAAAAAHz/////////////AP///////////6QAAAAAAAAAaOD/4GQAAAAAAAAE4P////////////8A/////////////CQAAAAAAAAAAAAAAAAAAAAAAGD//////////////wD/////////////yAQAAAAAAAAAAAAAAAAAAAAc7P//////////////AP//////////////rAwAAAAAAAAAAAAAAAAAGNj///////////////8A////////////////0EAAAAAAAAAAAAAAAFTo/////////////////wD//////////////////8h4QCAAAAAcQHzU////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'6' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD///////////////////+0ZCwMAAAUNGjI////////////////////AP/////////////////EMAAAAAAAAAAAAABM6P////////////////8A////////////////lAQAAAAAAAAAAAAAAAAo6P///////////////wD//////////////6wAAAAAAAAAAAAAAAAAAABI////////////////AP/////////////oEAAAAAAAAAAAAAAAAAAAAACw//////////////8A/////////////3AAAAAAAAAoxP/YPAAAAAAAAEj//////////////wD////////////4EAAAAAAACOD////YDCBAVGiAoP//////////////AP///////////7gAAAAAAABY//////////////////////////////8A////////////eAAAAAAAAJT//////////////////////////////wD///////////9MAAAAAAAAvP/IXBgABCx03P//////////////////AP///////////ygAAAAAAADcdAAAAAAAAAAEiP////////////////8A////////////FAAAAAAAAFAAAAAAAAAAAAAAcP///////////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAlP//////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAQ8P////////////8A////////////AAAAAAAAAABAyP/kZAAAAAAAAACQ/////////////wD///////////8MAAAAAAAALPj/////WAAAAAAAAET/////////////AP///////////yQAAAAAAACY///////MAAAAAAAAFP////////////8A////////////SAAAAAAAAMD///////wAAAAAAAAA/////////////wD///////////9wAAAAAAAAvP///////wAAAAAAAAD/////////////AP///////////7QAAAAAAACI///////UAAAAAAAAJP////////////8A////////////+AwAAAAAACDw/////2wAAAAAAABY/////////////wD/////////////cAAAAAAAADC8/Ox4AAAAAAAAAKj/////////////AP/////////////oEAAAAAAAAAAAAAAAAAAAAAAk/P////////////8A//////////////+oAAAAAAAAAAAAAAAAAAAABLj//////////////wD///////////////+QAAAAAAAAAAAAAAAAAACQ////////////////AP////////////////+0JAAAAAAAAAAAAAAkuP////////////////8A///////////////////8sGg0FAAADCxgqPz//////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'7' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAABP////////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAAAy4/////////////wD//////////////////////////+QUAAAAAAAEuP//////////////AP/////////////////////////8QAAAAAAAAKT///////////////8A/////////////////////////4wAAAAAAAB0/////////////////wD////////////////////////cCAAAAAAANPz/////////////////AP///////////////////////0QAAAAAAATY//////////////////8A//////////////////////+0AAAAAAAAeP///////////////////wD//////////////////////CQAAAAAABTw////////////////////AP////////////////////+gAAAAAAAAkP////////////////////8A/////////////////////ywAAAAAABDw/////////////////////wD///////////////////+4AAAAAAAAbP//////////////////////AP///////////////////1wAAAAAAADQ//////////////////////8A///////////////////4DAAAAAAAMP///////////////////////wD//////////////////7QAAAAAAAB8////////////////////////AP//////////////////aAAAAAAAAMj///////////////////////8A//////////////////8oAAAAAAAM/P///////////////////////wD/////////////////8AAAAAAAAET/////////////////////////AP////////////////+0AAAAAAAAcP////////////////////////8A/////////////////4wAAAAAAACY/////////////////////////wD/////////////////WAAAAAAAAMD/////////////////////////AP////////////////80AAAAAAAA4P////////////////////////8A/////////////////xAAAAAAAAD4/////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'8' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD////////////////////IdDQUAAAEIEiA1P//////////////////AP/////////////////gRAAAAAAAAAAAAAAAROD///////////////8A////////////////0BgAAAAAAAAAAAAAAAAAEMj//////////////wD///////////////AcAAAAAAAAAAAAAAAAAAAAHPD/////////////AP//////////////hAAAAAAAAAAAAAAAAAAAAAAAhP////////////8A//////////////8sAAAAAAAAKMz/zCgAAAAAAAAs/////////////wD//////////////wAAAAAAAADM////zAAAAAAAAAD/////////////AP//////////////BAAAAAAAAP//////AAAAAAAABP////////////8A//////////////8sAAAAAAAAzP///9QAAAAAAAAw/////////////wD//////////////3wAAAAAAAAoyP/YNAAAAAAAAIT/////////////AP//////////////7BgAAAAAAAAAAAAAAAAAAAAc8P////////////8A////////////////xBgAAAAAAAAAAAAAAAAAGNj//////////////wD/////////////////tAQAAAAAAAAAAAAAAACo////////////////AP///////////////HAAAAAAAAAAAAAAAAAAAAB8//////////////8A//////////////9gAAAAAAAAAAAAAAAAAAAAAAB8/////////////wD/////////////wAAAAAAAAABk4P/UWAAAAAAAAATQ////////////AP////////////9UAAAAAAAAaP//////XAAAAAAAAGT///////////8A/////////////xgAAAAAAADg///////cAAAAAAAAJP///////////wD/////////////AAAAAAAAAP////////8AAAAAAAAA////////////AP////////////8AAAAAAAAA4P//////3AAAAAAAAAT///////////8A/////////////ygAAAAAAABg//////9cAAAAAAAALP///////////wD/////////////ZAAAAAAAAABY1P/cXAAAAAAAAABw////////////AP/////////////QAAAAAAAAAAAAAAAAAAAAAAAABNz///////////8A//////////////9gAAAAAAAAAAAAAAAAAAAAAAB0/////////////wD///////////////Q8AAAAAAAAAAAAAAAAAAAAUPz/////////////AP////////////////x4CAAAAAAAAAAAAAAAEIT8//////////////8A///////////////////smFQwGAAAABg0ZKT0/////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'9' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD///////////////////ysYCwMAAAUNGiw/P//////////////////AP////////////////+4JAAAAAAAAAAAAAAkuP////////////////8A////////////////lAQAAAAAAAAAAAAAAAAAkP///////////////wD//////////////8AEAAAAAAAAAAAAAAAAAAAAqP//////////////AP/////////////8JAAAAAAAAAAAAAAAAAAAAAAQ7P////////////8A/////////////6wAAAAAAAAAfOz8vCwAAAAAAABw/////////////wD/////////////WAAAAAAAAHD/////7BgAAAAAAAz4////////////AP////////////8kAAAAAAAA1P//////hAAAAAAAALT///////////8A/////////////wAAAAAAAAD///////+4AAAAAAAAcP///////////wD/////////////AAAAAAAAAPz//////8AAAAAAAABI////////////AP////////////8UAAAAAAAAzP//////lAAAAAAAACT///////////8A/////////////0QAAAAAAABY//////gsAAAAAAAADP///////////wD/////////////kAAAAAAAAABw5P/IPAAAAAAAAAAA////////////AP/////////////wEAAAAAAAAAAAAAAAAAAAAAAAAAD///////////8A//////////////+UAAAAAAAAAAAAAAAAAAAAAAAAAP///////////wD///////////////9wAAAAAAAAAAAAAFAAAAAAAAAU////////////AP////////////////+IBAAAAAAAAABw3AAAAAAAACj///////////8A///////////////////cdCwEABhcxP+8AAAAAAAATP///////////wD//////////////////////////////5AAAAAAAAB4////////////AP//////////////////////////////UAAAAAAAALj///////////8A//////////////+kgGxUQCAM2P///+AIAAAAAAAQ+P///////////wD//////////////0gAAAAAAAA42P/EKAAAAAAAAHD/////////////AP//////////////sAAAAAAAAAAAAAAAAAAAAAAQ6P////////////8A////////////////TAAAAAAAAAAAAAAAAAAAAKz//////////////wD////////////////oKAAAAAAAAAAAAAAAAASU////////////////AP/////////////////sUAAAAAAAAAAAAAAwxP////////////////8A////////////////////yHA0FAAADCxktP///////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'A' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD//////////////////+QAAAAAAAAAAAAAAOT/////////////////AP//////////////////kAAAAAAAAAAAAAAAkP////////////////8A//////////////////88AAAAAAAAAAAAAAA8/////////////////wD/////////////////5AAAAAAAAAAAAAAAAADk////////////////AP////////////////+QAAAAAAAAAAAAAAAAAJD///////////////8A/////////////////zwAAAAAAAAAAAAAAAAAPP///////////////wD////////////////kAAAAAAAAAAgAAAAAAAAA5P//////////////AP///////////////5AAAAAAAAAAgAAAAAAAAACQ//////////////8A////////////////PAAAAAAAAAz8HAAAAAAAADz//////////////wD//////////////+QAAAAAAAAAWP9kAAAAAAAAANz/////////////AP//////////////kAAAAAAAAACk/7wAAAAAAAAAhP////////////8A//////////////88AAAAAAAABOz//BQAAAAAAAAw/////////////wD/////////////4AAAAAAAAAA8////ZAAAAAAAAADc////////////AP////////////+EAAAAAAAAAIj///+8AAAAAAAAAIT///////////8A/////////////zAAAAAAAAAA2P////wQAAAAAAAAMP///////////wD////////////cAAAAAAAAACT//////1wAAAAAAAAA3P//////////AP///////////4QAAAAAAAAAAAAAAAAAAAAAAAAAAACE//////////8A////////////MAAAAAAAAAAAAAAAAAAAAAAAAAAAADD//////////wD//////////9wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANz/////////AP//////////hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhP////////8A//////////8wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAw/////////wD/////////3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADc////////AP////////+EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIT///////8A/////////zAAAAAAAAAAhP///////////2QAAAAAAAAAMP///////wD////////cAAAAAAAAAADM////////////vAAAAAAAAAAA3P//////AP///////4QAAAAAAAAAHP/////////////4DAAAAAAAAACE//////8A////////MAAAAAAAAABk//////////////9cAAAAAAAAADD//////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'B' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAEDh83P///////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAEhP//////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAeP////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAxP///////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAABY////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAABT///////////8A//////////8AAAAAAAAAAP/////4zEwAAAAAAAAAAP///////////wD//////////wAAAAAAAAAA////////7AAAAAAAAAAQ////////////AP//////////AAAAAAAAAAD////////sAAAAAAAAAEj///////////8A//////////8AAAAAAAAAAP/////4zEQAAAAAAAAAtP///////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAFz/////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAiA/P////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAIjPj//////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAGKz/////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAJT///////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAABNz//////////wD//////////wAAAAAAAAAA///////sqCAAAAAAAAAAbP//////////AP//////////AAAAAAAAAAD/////////yAAAAAAAAAAs//////////8A//////////8AAAAAAAAAAP//////////AAAAAAAAAAT//////////wD//////////wAAAAAAAAAA/////////7wAAAAAAAAAAP//////////AP//////////AAAAAAAAAAD//////+ikGAAAAAAAAAAY//////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFT//////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsP//////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAADj///////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAc6P///////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAATOj/////////////AP//////////AAAAAAAAAAAAAAAAAAAEIEBkkNj///////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'C' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP//////////////////5JRULBAAAAgkTIDQ//////////////////8A////////////////1FAAAAAAAAAAAAAAAABAyP///////////////wD//////////////4gEAAAAAAAAAAAAAAAAAAAElP//////////////AP////////////9wAAAAAAAAAAAAAAAAAAAAAAAAlP////////////8A////////////kAAAAAAAAAAAAAAAAAAAAAAAAAAEyP///////////wD//////////9wIAAAAAAAAAAAAAAAAAAAAAAAAAAAw////////////AP//////////WAAAAAAAAAAAWMz/8JwQAAAAAAAAAACw//////////8A/////////+wEAAAAAAAAAID//////9QMAAAAAAAAAET//////////wD/////////nAAAAAAAAAAo/P///////3wAAAAABDBspP//////////AP////////9gAAAAAAAAAIz/////////3BxQjMT0//////////////8A/////////zQAAAAAAAAAzP///////////////////////////////wD/////////GAAAAAAAAADo////////////////////////////////AP////////8AAAAAAAAAAP////////////////////////////////8A/////////wAAAAAAAAAA/////////////////////////////////wD/////////AAAAAAAAAAD/////////////////////////////////AP////////8cAAAAAAAAAOj///////////////////////////////8A/////////zgAAAAAAAAA0P/////////kIGio7P///////////////wD/////////bAAAAAAAAACg/////////5wAAAAAMHS49P//////////AP////////+oAAAAAAAAAEz/////////PAAAAAAAAAAc//////////8A//////////QIAAAAAAAAALz//////6QAAAAAAAAAAGT//////////wD//////////3AAAAAAAAAADIzo/+SEBAAAAAAAAAAAyP//////////AP//////////7BAAAAAAAAAAAAAAAAAAAAAAAAAAAED///////////8A////////////rAAAAAAAAAAAAAAAAAAAAAAAAAAE0P///////////wD/////////////fAAAAAAAAAAAAAAAAAAAAAAAAJz/////////////AP//////////////iAQAAAAAAAAAAAAAAAAAAASY//////////////8A////////////////yEAAAAAAAAAAAAAAAAA8yP///////////////wD//////////////////9yIUCwQAAAAIEB4yP//////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'D' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD///////////8AAAAAAAAAAAAAAAAADChQkOT/////////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAABGjw//////////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAACDY/////////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAABjk////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAED///////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAKj//////////wD///////////8AAAAAAAAAAP///+isSAAAAAAAAAAANP//////////AP///////////wAAAAAAAAAA////////hAAAAAAAAAAA2P////////8A////////////AAAAAAAAAAD/////////MAAAAAAAAACQ/////////wD///////////8AAAAAAAAAAP////////+MAAAAAAAAAFj/////////AP///////////wAAAAAAAAAA/////////8gAAAAAAAAAMP////////8A////////////AAAAAAAAAAD/////////5AAAAAAAAAAY/////////wD///////////8AAAAAAAAAAP//////////AAAAAAAAAAD/////////AP///////////wAAAAAAAAAA//////////8AAAAAAAAAAP////////8A////////////AAAAAAAAAAD//////////wAAAAAAAAAA/////////wD///////////8AAAAAAAAAAP/////////wAAAAAAAAABD/////////AP///////////wAAAAAAAAAA/////////9QAAAAAAAAAJP////////8A////////////AAAAAAAAAAD/////////qAAAAAAAAABI/////////wD///////////8AAAAAAAAAAP////////9QAAAAAAAAAHj/////////AP///////////wAAAAAAAAAA////////uAAAAAAAAAAAvP////////8A////////////AAAAAAAAAAD////w0HwEAAAAAAAAACT8/////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAoP//////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAAADz8//////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAY6P///////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAKNz/////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAACHT0//////////////8A////////////AAAAAAAAAAAAAAAAABg4bKj0/////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'E' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP//////////AAAAAAAAAAD///////////////////////////////8A//////////8AAAAAAAAAAP///////////////////////////////wD//////////wAAAAAAAAAA////////////////////////////////AP//////////AAAAAAAAAAD///////////////////////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////8A//////////8AAAAAAAAAAP///////////////////////////////wD//////////wAAAAAAAAAA////////////////////////////////AP//////////AAAAAAAAAAD///////////////////////////////8A//////////8AAAAAAAAAAP///////////////////////////////wD//////////wAAAAAAAAAA////////////////////////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'F' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAP///////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAP///////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'G' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD//////////////////MB8TCgQAAAACCA4YJzs////////////////AP///////////////JQcAAAAAAAAAAAAAAAAAAhw8P////////////8A/////////////9gwAAAAAAAAAAAAAAAAAAAAAAAk2P///////////wD////////////EDAAAAAAAAAAAAAAAAAAAAAAAAAAc7P//////////AP//////////2AwAAAAAAAAAAAAAAAAAAAAAAAAAAABY//////////8A//////////wwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQ/////////wD/////////kAAAAAAAAAAAEHzQ/P/gmCAAAAAAAAAAAFz/////////AP////////wcAAAAAAAAACjg////////8CwAAAAAAAAgWP////////8A////////vAAAAAAAAAAI2P//////////yBRAcJjI8P///////////wD///////94AAAAAAAAAGD/////////////////////////////////AP///////0AAAAAAAAAAsP////////////////////////////////8A////////IAAAAAAAAADc/////////////////////////////////wD///////8AAAAAAAAAAP///////wAAAAAAAAAAAAAAAAD/////////AP///////wAAAAAAAAAA////////AAAAAAAAAAAAAAAAAP////////8A////////AAAAAAAAAAD///////8AAAAAAAAAAAAAAAAA/////////wD///////8gAAAAAAAAAOD//////wAAAAAAAAAAAAAAAAD/////////AP///////0AAAAAAAAAAtP//////AAAAAAAAAAAAAAAAAP////////8A////////cAAAAAAAAABw//////8AAAAAAAAAAAAAAAAA/////////wD///////+8AAAAAAAAABDs////////////AAAAAAAAAAD/////////AP////////wYAAAAAAAAADz0//////////AAAAAAAAAAAP////////8A/////////5AAAAAAAAAAACCY4P//3KhcCAAAAAAAAAAA/////////wD/////////+CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////AP//////////xAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIP////////8A////////////rAQAAAAAAAAAAAAAAAAAAAAAAAAAAGTw/////////wD/////////////vBQAAAAAAAAAAAAAAAAAAAAAADjI////////////AP//////////////8HAQAAAAAAAAAAAAAAAAAEiw//////////////8A//////////////////iwcEAgBAAABCA4aKDk/////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'H' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'I' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAP///////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAP///////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAP///////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAP///////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAA////////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAD///////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'J' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP///////////////////////////wAAAAAAAAAA//////////////8A////////////////////////////AAAAAAAAAAD//////////////wD///////////////////////////8AAAAAAAAAAP//////////////AP///////////////////////////wAAAAAAAAAA//////////////8A////////////////////////////AAAAAAAAAAD//////////////wD///////////////////////////8AAAAAAAAAAP//////////////AP///////////////////////////wAAAAAAAAAA//////////////8A////////////////////////////AAAAAAAAAAD//////////////wD///////////////////////////8AAAAAAAAAAP//////////////AP///////////////////////////wAAAAAAAAAA//////////////8A////////////////////////////AAAAAAAAAAD//////////////wD///////////////////////////8AAAAAAAAAAP//////////////AP///////////////////////////wAAAAAAAAAA//////////////8A////////////////////////////AAAAAAAAAAD//////////////wD///////////////////////////8AAAAAAAAAAP//////////////AP///////////////////////////wAAAAAAAAAA//////////////8A////////////////////////////AAAAAAAAAAj//////////////wD//////////+zMrIxwUDAQ//////wAAAAAAAAAIP//////////////AP//////////DAAAAAAAAADo////2AAAAAAAAAA0//////////////8A//////////8wAAAAAAAAAKj///+YAAAAAAAAAFj//////////////wD//////////2gAAAAAAAAAIND/yBgAAAAAAAAAkP//////////////AP//////////vAAAAAAAAAAAAAAAAAAAAAAAAADc//////////////8A////////////MAAAAAAAAAAAAAAAAAAAAAAAUP///////////////wD////////////EBAAAAAAAAAAAAAAAAAAAABjk////////////////AP////////////+sBAAAAAAAAAAAAAAAAAAY2P////////////////8A///////////////EMAAAAAAAAAAAAAAAVOj//////////////////wD/////////////////vHBAIAAAABg8fNT/////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'K' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD///////8AAAAAAAAAAP//////////wAQAAAAAAAAAAABw////////AP///////wAAAAAAAAAA/////////9AMAAAAAAAAAAAAcP////////8A////////AAAAAAAAAAD////////cGAAAAAAAAAAAAHD//////////wD///////8AAAAAAAAAAP//////6CgAAAAAAAAAAABs////////////AP///////wAAAAAAAAAA//////Q0AAAAAAAAAAAAVPz///////////8A////////AAAAAAAAAAD////8RAAAAAAAAAAAAFT8/////////////wD///////8AAAAAAAAAAP///1gAAAAAAAAAAABU/P//////////////AP///////wAAAAAAAAAA//9wAAAAAAAAAAAASPz///////////////8A////////AAAAAAAAAAD/jAAAAAAAAAAAADz0/////////////////wD///////8AAAAAAAAAAKQAAAAAAAAAAAA89P//////////////////AP///////wAAAAAAAAAABAAAAAAAAAAAFPT///////////////////8A////////AAAAAAAAAAAAAAAAAAAAAAAApP///////////////////wD///////8AAAAAAAAAAAAAAAAAAAAAAAAU8P//////////////////AP///////wAAAAAAAAAAAAAAAAAAAAAAAABk//////////////////8A////////AAAAAAAAAAAAAAAAAAAAAAAAAADE/////////////////wD///////8AAAAAAAAAAAAAAAAoEAAAAAAAACz8////////////////AP///////wAAAAAAAAAAAAAAGNiAAAAAAAAAAIj///////////////8A////////AAAAAAAAAAAAABjY//gYAAAAAAAACOD//////////////wD///////8AAAAAAAAAAAAY2P///5wAAAAAAAAASP//////////////AP///////wAAAAAAAAAAGNj//////CgAAAAAAAAAqP////////////8A////////AAAAAAAAAADI////////sAAAAAAAAAAc8P///////////wD///////8AAAAAAAAAAP//////////QAAAAAAAAABs////////////AP///////wAAAAAAAAAA///////////IAAAAAAAAAATI//////////8A////////AAAAAAAAAAD///////////9YAAAAAAAAADD8/////////wD///////8AAAAAAAAAAP///////////9wEAAAAAAAAAJD/////////AP///////wAAAAAAAAAA/////////////3AAAAAAAAAADOT///////8A////////AAAAAAAAAAD/////////////7BAAAAAAAAAAUP///////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'L' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAD/////////////////////////////AP////////////8AAAAAAAAAAP////////////////////////////8A/////////////wAAAAAAAAAA/////////////////////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A/////////////wAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD/////////////AAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'M' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A//////8AAAAAAAAAAAAAAHz//////3wAAAAAAAAAAAAAAP///////wD//////wAAAAAAAAAAAAAATP//////UAAAAAAAAAAAAAAA////////AP//////AAAAAAAAAAAAAAAc//////8cAAAAAAAAAAAAAAD///////8A//////8AAAAAAAAAAAAAAADw////8AAAAAAAAAAAAAAAAP///////wD//////wAAAAAAAAAAAAAAALz////AAAAAAAAAAAAAAAAA////////AP//////AAAAAAAAAAAAAAAAkP///5AAAAAAAAAAAAAAAAD///////8A//////8AAAAAAAAAAAAAAABc////ZAAAAAAAAAAAAAAAAP///////wD//////wAAAAAAAAAoAAAAADD///8wAAAAACQAAAAAAAAA////////AP//////AAAAAAAAAFwAAAAABPz//AgAAAAAXAAAAAAAAAD///////8A//////8AAAAAAAAAkAAAAAAA0P/UAAAAAACQAAAAAAAAAP///////wD//////wAAAAAAAADMAAAAAACg/6gAAAAAAMQAAAAAAAAA////////AP//////AAAAAAAAAPgEAAAAAHD/dAAAAAAE+AAAAAAAAAD///////8A//////8AAAAAAAAA/zQAAAAAQP9IAAAAADD/AAAAAAAAAP///////wD//////wAAAAAAAAD/bAAAAAAQ/xQAAAAAaP8AAAAAAAAA////////AP//////AAAAAAAAAP+gAAAAAADQAAAAAACc/wAAAAAAAAD///////8A//////8AAAAAAAAA/9QAAAAAAGgAAAAAAND/AAAAAAAAAP///////wD//////wAAAAAAAAD//wwAAAAAFAAAAAAM/P8AAAAAAAAA////////AP//////AAAAAAAAAP//RAAAAAAAAAAAADz//wAAAAAAAAD///////8A//////8AAAAAAAAA//94AAAAAAAAAAAAcP//AAAAAAAAAP///////wD//////wAAAAAAAAD//7AAAAAAAAAAAACo//8AAAAAAAAA////////AP//////AAAAAAAAAP//5AAAAAAAAAAAANz//wAAAAAAAAD///////8A//////8AAAAAAAAA////HAAAAAAAAAAQ////AAAAAAAAAP///////wD//////wAAAAAAAAD///9QAAAAAAAAAEz///8AAAAAAAAA////////AP//////AAAAAAAAAP///4gAAAAAAAAAfP///wAAAAAAAAD///////8A//////8AAAAAAAAA////vAAAAAAAAACw////AAAAAAAAAP///////wD//////wAAAAAAAAD////wAAAAAAAAAOz///8AAAAAAAAA////////AP//////AAAAAAAAAP////8sAAAAAAAc/////wAAAAAAAAD///////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'N' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////AAAAAAAAALD/////////////AAAAAAAAAP//////////AP////////8AAAAAAAAAFOj///////////8AAAAAAAAA//////////8A/////////wAAAAAAAAAASP///////////wAAAAAAAAD//////////wD/////////AAAAAAAAAAAAkP//////////AAAAAAAAAP//////////AP////////8AAAAAAAAAAAAI1P////////8AAAAAAAAA//////////8A/////////wAAAAAAAAAAAAAw+P///////wAAAAAAAAD//////////wD/////////AAAAAAAAAAAAAABw////////AAAAAAAAAP//////////AP////////8AAAAAAAAAAAAAAAC8//////8AAAAAAAAA//////////8A/////////wAAAAAAAAAAAAAAABzs/////wAAAAAAAAD//////////wD/////////AAAAAAAAAAAAAAAAAFD/////AAAAAAAAAP//////////AP////////8AAAAAAAAAAAAAAAAAAJz///8AAAAAAAAA//////////8A/////////wAAAAAAAAAUAAAAAAAADNz//wAAAAAAAAD//////////wD/////////AAAAAAAAALQAAAAAAAAANPz/AAAAAAAAAP//////////AP////////8AAAAAAAAA/2wAAAAAAAAAfP8AAAAAAAAA//////////8A/////////wAAAAAAAAD/+CwAAAAAAAAExAAAAAAAAAD//////////wD/////////AAAAAAAAAP//0AQAAAAAAAAgAAAAAAAAAP//////////AP////////8AAAAAAAAA////jAAAAAAAAAAAAAAAAAAA//////////8A/////////wAAAAAAAAD/////RAAAAAAAAAAAAAAAAAD//////////wD/////////AAAAAAAAAP/////kFAAAAAAAAAAAAAAAAP//////////AP////////8AAAAAAAAA//////+sAAAAAAAAAAAAAAAA//////////8A/////////wAAAAAAAAD///////9kAAAAAAAAAAAAAAD//////////wD/////////AAAAAAAAAP////////QkAAAAAAAAAAAAAP//////////AP////////8AAAAAAAAA/////////8wEAAAAAAAAAAAA//////////8A/////////wAAAAAAAAD//////////4QAAAAAAAAAAAD//////////wD/////////AAAAAAAAAP///////////DwAAAAAAAAAAP//////////AP////////8AAAAAAAAA////////////4BAAAAAAAAAA//////////8A/////////wAAAAAAAAD/////////////qAAAAAAAAAD//////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'O' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A///////////////////0qGw4HAAAABw4aKT0/////////////////wD////////////////wcAwAAAAAAAAAAAAAAAho6P//////////////AP//////////////uBQAAAAAAAAAAAAAAAAAAAAMoP////////////8A/////////////6AEAAAAAAAAAAAAAAAAAAAAAAAAkP///////////wD///////////+4BAAAAAAAAAAAAAAAAAAAAAAAAAAAoP//////////AP//////////8BQAAAAAAAAAAAAAAAAAAAAAAAAAAAAM5P////////8A//////////9wAAAAAAAAAAAsrPD/7KQsAAAAAAAAAABg/////////wD/////////+BAAAAAAAAAAUPj///////hQAAAAAAAAAAjs////////AP////////+sAAAAAAAAABDw//////////AYAAAAAAAAAKD///////8A/////////2wAAAAAAAAAdP///////////3wAAAAAAAAAYP///////wD/////////OAAAAAAAAAC4////////////xAAAAAAAAAAw////////AP////////8cAAAAAAAAAOD////////////oAAAAAAAAABT///////8A/////////wAAAAAAAAAA//////////////8AAAAAAAAAAP///////wD/////////AAAAAAAAAAD//////////////wAAAAAAAAAA////////AP////////8AAAAAAAAAAP/////////////8AAAAAAAAAAD///////8A/////////xwAAAAAAAAA5P///////////+AAAAAAAAAAHP///////wD/////////NAAAAAAAAAC8////////////uAAAAAAAAAA4////////AP////////9oAAAAAAAAAHj///////////98AAAAAAAAAGT///////8A/////////6gAAAAAAAAAGPD/////////+BgAAAAAAAAApP///////wD/////////9AwAAAAAAAAAUPz///////xcAAAAAAAAAAjs////////AP//////////cAAAAAAAAAAALKjs//CwOAAAAAAAAAAAYP////////8A///////////wFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzk/////////wD///////////+4BAAAAAAAAAAAAAAAAAAAAAAAAAAAoP//////////AP////////////+QAAAAAAAAAAAAAAAAAAAAAAAAAJD///////////8A//////////////+sEAAAAAAAAAAAAAAAAAAAAAyg/////////////wD////////////////oZAgAAAAAAAAAAAAAAARg4P//////////////AP//////////////////9KhsOCAAAAAUMFyc7P////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'P' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP///////////wAAAAAAAAAAAAAAAAAACCxguP////////////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAOOD//////////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAGOD/////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAARP////////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAxP///////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAAABo////////////AP///////////wAAAAAAAAAA////6JwMAAAAAAAAADD///////////8A////////////AAAAAAAAAAD//////6AAAAAAAAAADP///////////wD///////////8AAAAAAAAAAP//////9AAAAAAAAAAA////////////AP///////////wAAAAAAAAAA///////0AAAAAAAAAAD///////////8A////////////AAAAAAAAAAD//////5gAAAAAAAAAHP///////////wD///////////8AAAAAAAAAAP///9iICAAAAAAAAABI////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAJD///////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAI6P///////////wD///////////8AAAAAAAAAAAAAAAAAAAAAAAAAAIT/////////////AP///////////wAAAAAAAAAAAAAAAAAAAAAAAABU/P////////////8A////////////AAAAAAAAAAAAAAAAAAAAAAAIhPz//////////////wD///////////8AAAAAAAAAAAAAAAAABCRMkOz/////////////////AP///////////wAAAAAAAAAA//////////////////////////////8A////////////AAAAAAAAAAD//////////////////////////////wD///////////8AAAAAAAAAAP//////////////////////////////AP///////////wAAAAAAAAAA//////////////////////////////8A////////////AAAAAAAAAAD//////////////////////////////wD///////////8AAAAAAAAAAP//////////////////////////////AP///////////wAAAAAAAAAA//////////////////////////////8A////////////AAAAAAAAAAD//////////////////////////////wD///////////8AAAAAAAAAAP//////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'Q' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////SoaDQcAAAAHDhoqPT///////////////////8A//////////////BwDAAAAAAAAAAAAAAACHDo/////////////////wD///////////+4FAAAAAAAAAAAAAAAAAAAABCo////////////////AP//////////nAQAAAAAAAAAAAAAAAAAAAAAAACQ//////////////8A/////////7gEAAAAAAAAAAAAAAAAAAAAAAAAAACg/////////////wD////////wFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzo////////////AP///////3AAAAAAAAAAACyo8P/sqCwAAAAAAAAAAGT///////////8A///////4EAAAAAAAAABM+P///////FQAAAAAAAAACPT//////////wD//////7AAAAAAAAAAFPD/////////9BgAAAAAAAAApP//////////AP//////bAAAAAAAAAB4////////////fAAAAAAAAABk//////////8A//////84AAAAAAAAALz///////////+8AAAAAAAAADT//////////wD//////xwAAAAAAAAA6P///////////+QAAAAAAAAAHP//////////AP//////AAAAAAAAAAD//////////////wAAAAAAAAAA//////////8A//////8AAAAAAAAAAP//////////////AAAAAAAAAAD//////////wD//////wAAAAAAAAAA/P////////////8AAAAAAAAAAP//////////AP//////GAAAAAAAAADg////////////4AAAAAAAAAAc//////////8A//////84AAAAAAAAALT////MJHTo//+8AAAAAAAAADT//////////wD//////2wAAAAAAAAAdP///2AAABCg/3wAAAAAAAAAZP//////////AP//////rAAAAAAAAAAY9P/sCAAAAABMGAAAAAAAAACk//////////8A///////4EAAAAAAAAABU/P+0OAAAAAAAAAAAAAAACPT//////////wD///////94AAAAAAAAAAA4sPD/gAAAAAAAAAAAAABk////////////AP////////AcAAAAAAAAAAAAAAAAAAAAAAAAAAAADOT///////////8A/////////7wEAAAAAAAAAAAAAAAAAAAAAAAAAACQ/////////////wD//////////6wEAAAAAAAAAAAAAAAAAAAAAAAAABSs////////////AP///////////7gUAAAAAAAAAAAAAAAAAAAAAAAAAABAwP////////8A//////////////BwDAAAAAAAAAAAAAAABAgAAAAAAAA8/////////wD////////////////0qGg0GAAAABgwXJjkxBgAAAAAALD/////////AP//////////////////////////////////5DQAAAAk/P////////8A////////////////////////////////////+GwAAJD//////////wD//////////////////////////////////////8A49P//////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'R' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////wAAAAAAAAAAAAAAAAAAAAQgOGSk+P///////////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAcuP//////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAEsP////////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQ6P///////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADD///////////8A/////////wAAAAAAAAAA///////svDgAAAAAAAAACP///////////wD/////////AAAAAAAAAAD/////////7AAAAAAAAAAA////////////AP////////8AAAAAAAAAAP/////////cAAAAAAAAABD///////////8A/////////wAAAAAAAAAA//////DQoCQAAAAAAAAAQP///////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACU////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAIPj///////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAzU/////////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAA02P//////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAxctPz///////////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAEDY/////////////////wD/////////AAAAAAAAAAD/9LAsAAAAAAAAAAzc////////////////AP////////8AAAAAAAAAAP///+wkAAAAAAAAADD8//////////////8A/////////wAAAAAAAAAA/////8QAAAAAAAAAAJD//////////////wD/////////AAAAAAAAAAD//////1QAAAAAAAAAFPD/////////////AP////////8AAAAAAAAAAP//////3AQAAAAAAAAAgP////////////8A/////////wAAAAAAAAAA////////aAAAAAAAAAAM6P///////////wD/////////AAAAAAAAAAD////////oCAAAAAAAAABs////////////AP////////8AAAAAAAAAAP////////+AAAAAAAAAAATc//////////8A/////////wAAAAAAAAAA//////////AUAAAAAAAAAFj//////////wD/////////AAAAAAAAAAD//////////5AAAAAAAAAAAND/////////AP////////8AAAAAAAAAAP//////////+CQAAAAAAAAAQP////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'S' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP/////////////////8vHBEIAgAAAQgQHC8/P////////////////8A////////////////pCQAAAAAAAAAAAAAAAAcoP///////////////wD//////////////FwAAAAAAAAAAAAAAAAAAAAAXP//////////////AP////////////9oAAAAAAAAAAAAAAAAAAAAAAAAhP////////////8A////////////zAAAAAAAAAAAAAAAAAAAAAAAAAAI6P///////////wD///////////9cAAAAAAAAAAAAAAAAAAAAAAAAAACA////////////AP///////////xgAAAAAAAAAUOD/8KwkAAAAAAAAADj///////////8A////////////AAAAAAAAAAD0/////8wABCAgICxASP///////////wD///////////8MAAAAAAAAAMz/////////////////////////////AP///////////0AAAAAAAAAACFiQxPT///////////////////////8A////////////oAAAAAAAAAAAAAAAADBwtPT//////////////////wD////////////8QAAAAAAAAAAAAAAAAAAACFTA////////////////AP/////////////oOAAAAAAAAAAAAAAAAAAAAABM6P////////////8A///////////////4fAgAAAAAAAAAAAAAAAAAAAAY2P///////////wD/////////////////7IwwAAAAAAAAAAAAAAAAAAAo+P//////////AP/////////////////////koGw0BAAAAAAAAAAAAACU//////////8A///////////////////////////4uFgAAAAAAAAAADz//////////wD//////////2BgSEA0IBwA6P///////5QAAAAAAAAADP//////////AP//////////JAAAAAAAAACc/////////AAAAAAAAAAA//////////8A//////////9YAAAAAAAAACDo///////AAAAAAAAAABT//////////wD//////////6QAAAAAAAAAACCk7P/snBQAAAAAAAAAUP//////////AP//////////+BAAAAAAAAAAAAAAAAAAAAAAAAAAAACs//////////8A////////////kAAAAAAAAAAAAAAAAAAAAAAAAAAAOP///////////wD////////////8RAAAAAAAAAAAAAAAAAAAAAAAABjc////////////AP/////////////0PAAAAAAAAAAAAAAAAAAAAAAg2P////////////8A///////////////8hBQAAAAAAAAAAAAAAAAMdPT//////////////wD/////////////////+LRwSCAMAAAAHDhoqPT/////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'T' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD///////////////////8AAAAAAAAAAP//////////////////////AP///////////////////wAAAAAAAAAA//////////////////////8A////////////////////AAAAAAAAAAD//////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'U' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////AAAAAAAAAAD///////////8AAAAAAAAAAP//////////AP////////8AAAAAAAAAAP///////////wAAAAAAAAAA//////////8A/////////wAAAAAAAAAA////////////AAAAAAAAAAD//////////wD/////////JAAAAAAAAADk/////////+gAAAAAAAAAHP//////////AP////////9MAAAAAAAAAJz/////////nAAAAAAAAABE//////////8A/////////4gAAAAAAAAAHOj//////+ggAAAAAAAAAHz//////////wD/////////0AAAAAAAAAAAIJzs/+ykIAAAAAAAAAAA0P//////////AP//////////QAAAAAAAAAAAAAAAAAAAAAAAAAAAAED///////////8A///////////IBAAAAAAAAAAAAAAAAAAAAAAAAAAE0P///////////wD///////////+YAAAAAAAAAAAAAAAAAAAAAAAAAJj/////////////AP////////////+UBAAAAAAAAAAAAAAAAAAAAASU//////////////8A///////////////IPAAAAAAAAAAAAAAAAAAwyP///////////////wD/////////////////0IxYOCAIAAAEIEiAyP//////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'V' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD//////zAAAAAAAAAAYP//////////////ZAAAAAAAAAAw////////AP//////kAAAAAAAAAAU/P////////////8UAAAAAAAAAJD///////8A///////oBAAAAAAAAADE////////////xAAAAAAAAAAE7P///////wD///////9MAAAAAAAAAHD///////////94AAAAAAAAAEz/////////AP///////6gAAAAAAAAAJP///////////yQAAAAAAAAArP////////8A////////+BAAAAAAAAAA1P/////////YAAAAAAAAABT4/////////wD/////////aAAAAAAAAACE/////////4QAAAAAAAAAbP//////////AP/////////EAAAAAAAAADT/////////OAAAAAAAAADM//////////8A//////////8kAAAAAAAAAOT//////+QAAAAAAAAAKP///////////wD//////////4QAAAAAAAAAmP//////nAAAAAAAAACI////////////AP//////////5AAAAAAAAABE//////9EAAAAAAAABOT///////////8A////////////QAAAAAAAAAT0////9AgAAAAAAABI/////////////wD///////////+gAAAAAAAAAKT///+kAAAAAAAAAKj/////////////AP////////////QIAAAAAAAAXP///1wAAAAAAAAM+P////////////8A/////////////1wAAAAAAAAM+P/8DAAAAAAAAGT//////////////wD/////////////vAAAAAAAAAC8/7wAAAAAAAAAxP//////////////AP//////////////HAAAAAAAAGj/aAAAAAAAACT///////////////8A//////////////94AAAAAAAAHP8cAAAAAAAAhP///////////////wD//////////////9gAAAAAAAAAkAAAAAAAAADk////////////////AP///////////////zgAAAAAAAAQAAAAAAAAQP////////////////8A////////////////lAAAAAAAAAAAAAAAAACg/////////////////wD////////////////sCAAAAAAAAAAAAAAADPT/////////////////AP////////////////9QAAAAAAAAAAAAAABg//////////////////8A/////////////////7AAAAAAAAAAAAAAAMD//////////////////wD//////////////////BQAAAAAAAAAAAAc////////////////////AP//////////////////cAAAAAAAAAAAAHz///////////////////8A///////////////////MAAAAAAAAAAAA3P///////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'W' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A//8cAAAAAAAAALz/////4AAAAAAAAAAA6P////+8AAAAAAAAABz//wD//1QAAAAAAAAAjP////+gAAAAAAAAAACo/////4wAAAAAAAAAUP//AP//jAAAAAAAAABU/////2AAAAAAAAAAAGj/////VAAAAAAAAACM//8A///EAAAAAAAAACT/////IAAAAAAAAAAAKP////8kAAAAAAAAAMT//wD///gEAAAAAAAAAPD//+AAAAAAAAAAAAAA6P//8AAAAAAAAAAE9P//AP///zAAAAAAAAAAvP//oAAAAAAAAAAAAACo//+8AAAAAAAAADD///8A////bAAAAAAAAACM//9gAAAAAAAAAAAAAGT//4wAAAAAAAAAaP///wD///+kAAAAAAAAAFT//yAAAAAAAAAAAAAAIP//VAAAAAAAAACc////AP///9gAAAAAAAAAJP/gAAAAAAAAAAAAAAAA4P8kAAAAAAAAANT///8A/////xAAAAAAAAAA8KAAAAAAAAAAAAAAAACg8AAAAAAAAAAQ/////wD/////TAAAAAAAAAC8YAAAAAAAAAAAAAAAAGC8AAAAAAAAAET/////AP////+AAAAAAAAAAIwgAAAAAAAAAAAAAAAAIIwAAAAAAAAAfP////8A/////7gAAAAAAAAANAAAAAAAACwwAAAAAAAANAAAAAAAAACw/////wD/////8AAAAAAAAAAAAAAAAAAAdHgAAAAAAAAAAAAAAAAAAOz/////AP//////KAAAAAAAAAAAAAAAAAC4vAAAAAAAAAAAAAAAAAAg//////8A//////9gAAAAAAAAAAAAAAAACPj4CAAAAAAAAAAAAAAAAFj//////wD//////5QAAAAAAAAAAAAAAABE//9IAAAAAAAAAAAAAAAAkP//////AP//////0AAAAAAAAAAAAAAAAIj//4wAAAAAAAAAAAAAAADI//////8A///////8DAAAAAAAAAAAAAAAzP//1AAAAAAAAAAAAAAABPj//////wD///////88AAAAAAAAAAAAABT/////GAAAAAAAAAAAAAA0////////AP///////3QAAAAAAAAAAAAAWP////9gAAAAAAAAAAAAAHD///////8A////////sAAAAAAAAAAAAACg/////6QAAAAAAAAAAAAApP///////wD////////kAAAAAAAAAAAAAOT/////6AAAAAAAAAAAAADc////////AP////////8cAAAAAAAAAAAo////////MAAAAAAAAAAAEP////////8A/////////1QAAAAAAAAAAHD///////94AAAAAAAAAABM/////////wD/////////jAAAAAAAAAAAtP///////7wAAAAAAAAAAID/////////AP/////////EAAAAAAAAAAT0////////+AgAAAAAAAAAuP////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'X' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD///////9UAAAAAAAAAKz///////////+sAAAAAAAAAFD/////////AP///////+QQAAAAAAAAFOT/////////8BwAAAAAAAAM5P////////8A/////////5gAAAAAAAAATP////////9kAAAAAAAAAJD//////////wD//////////0AAAAAAAAAAoP//////wAAAAAAAAAA0/P//////////AP//////////2AgAAAAAAAAQ4P////gkAAAAAAAABMz///////////8A////////////iAAAAAAAAABA////dAAAAAAAAABw/////////////wD////////////8MAAAAAAAAACU/9AEAAAAAAAAHPD/////////////AP/////////////IBAAAAAAAAAzYMAAAAAAAAACs//////////////8A//////////////90AAAAAAAAABAAAAAAAAAATP///////////////wD///////////////QgAAAAAAAAAAAAAAAAAAzg////////////////AP///////////////7wAAAAAAAAAAAAAAAAAjP////////////////8A/////////////////2AAAAAAAAAAAAAAADD8/////////////////wD/////////////////7BQAAAAAAAAAAAAEyP//////////////////AP/////////////////gDAAAAAAAAAAAAAjY//////////////////8A/////////////////0AAAAAAAAAAAAAAADj8/////////////////wD///////////////+UAAAAAAAAAAAAAAAAAJD/////////////////AP//////////////4AwAAAAAAAAAAAAAAAAADOD///////////////8A//////////////9AAAAAAAAAAAAAAAAAAAAAQP///////////////wD/////////////nAAAAAAAAAAAWAAAAAAAAAAAlP//////////////AP///////////+QQAAAAAAAAAGD/YAAAAAAAAAAM4P////////////8A////////////TAAAAAAAAAAs9P/0LAAAAAAAAABM/////////////wD//////////6AAAAAAAAAADNT////UDAAAAAAAAACg////////////AP/////////kEAAAAAAAAACg//////+gAAAAAAAAABDk//////////8A/////////0wAAAAAAAAAYP////////9gAAAAAAAAAEz//////////wD///////+oAAAAAAAAACz0//////////QsAAAAAAAAAKT/////////AP//////7BQAAAAAAAAM1P///////////9QMAAAAAAAAFOz///////8A//////9UAAAAAAAAAKD//////////////6AAAAAAAAAAVP///////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'Y' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP///////1QAAAAAAAAAAGj//////////2gAAAAAAAAAAFT///////8A////////5BAAAAAAAAAAAMT////////EAAAAAAAAAAAQ5P///////wD/////////mAAAAAAAAAAAKPj/////+CgAAAAAAAAAAJj/////////AP//////////PAAAAAAAAAAAgP////+AAAAAAAAAAAA8//////////8A///////////YCAAAAAAAAAAE2P//2AQAAAAAAAAACNj//////////wD///////////+AAAAAAAAAAAA4//84AAAAAAAAAACA////////////AP////////////woAAAAAAAAAACUlAAAAAAAAAAAKPz///////////8A/////////////8gAAAAAAAAAABAQAAAAAAAAAADI/////////////wD//////////////2wAAAAAAAAAAAAAAAAAAAAAbP//////////////AP//////////////8BwAAAAAAAAAAAAAAAAAABzw//////////////8A////////////////tAAAAAAAAAAAAAAAAAAAtP///////////////wD/////////////////VAAAAAAAAAAAAAAAAFT/////////////////AP/////////////////oEAAAAAAAAAAAAAAQ6P////////////////8A//////////////////+cAAAAAAAAAAAAAJz//////////////////wD///////////////////9AAAAAAAAAAABA////////////////////AP///////////////////9gAAAAAAAAAANj///////////////////8A/////////////////////wAAAAAAAAAA/////////////////////wD/////////////////////AAAAAAAAAAD/////////////////////AP////////////////////8AAAAAAAAAAP////////////////////8A/////////////////////wAAAAAAAAAA/////////////////////wD/////////////////////AAAAAAAAAAD/////////////////////AP////////////////////8AAAAAAAAAAP////////////////////8A/////////////////////wAAAAAAAAAA/////////////////////wD/////////////////////AAAAAAAAAAD/////////////////////AP////////////////////8AAAAAAAAAAP////////////////////8A/////////////////////wAAAAAAAAAA/////////////////////wD/////////////////////AAAAAAAAAAD/////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),			'Z' => array(				'data' => 'AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////////8A//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////////wD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////AP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAQ//////////////8A/////////////////////////1AAAAAAAAAABLz//////////////wD///////////////////////98AAAAAAAAAACY////////////////AP//////////////////////pAAAAAAAAAAAaP////////////////8A/////////////////////8QIAAAAAAAAAET8/////////////////wD////////////////////gGAAAAAAAAAAo9P//////////////////AP//////////////////9CwAAAAAAAAAFNz///////////////////8A//////////////////xMAAAAAAAAAATA/////////////////////wD/////////////////eAAAAAAAAAAAnP//////////////////////AP///////////////5wAAAAAAAAAAHT///////////////////////8A///////////////ABAAAAAAAAABM/P///////////////////////wD/////////////3BQAAAAAAAAALPT/////////////////////////AP////////////QoAAAAAAAAABjg//////////////////////////8A///////////8SAAAAAAAAAAExP///////////////////////////wD//////////2wAAAAAAAAAAKD/////////////////////////////AP////////+YAAAAAAAAAAB8//////////////////////////////8A/////////wQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A/////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////////////wD/////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////////////AP////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8A/////////////////////////////////////////////////////wD/////////////////////////////////////////////////////AP////////////////////////////////////////////////////8=',				'width' => 40			),		);	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_attachments{	var $u_action;	var $new_config;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_admin_path, $phpbb_root_path, $phpEx;		$user->add_lang(array('posting', 'viewtopic', 'acp/attachments'));		$error = $notify = array();		$submit = (isset($_POST['submit'])) ? true : false;		$action = request_var('action', '');		$form_key = 'acp_attach';		add_form_key($form_key);		if ($submit && !check_form_key($form_key))		{			trigger_error($user->lang['FORM_INVALID'] . adm_back_link($this->u_action), E_USER_WARNING);		}		switch ($mode)		{			case 'attach':				$l_title = 'ACP_ATTACHMENT_SETTINGS';			break;			case 'extensions':				$l_title = 'ACP_MANAGE_EXTENSIONS';			break;			case 'ext_groups':				$l_title = 'ACP_EXTENSION_GROUPS';			break;			case 'orphan':				$l_title = 'ACP_ORPHAN_ATTACHMENTS';			break;			default:				trigger_error('NO_MODE', E_USER_ERROR);			break;		}		$this->tpl_name = 'acp_attachments';		$this->page_title = $l_title;		$template->assign_vars(array(			'L_TITLE'			=> $user->lang[$l_title],			'L_TITLE_EXPLAIN'	=> $user->lang[$l_title . '_EXPLAIN'],			'U_ACTION'			=> $this->u_action)		);		switch ($mode)		{			case 'attach':				include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);				$sql = 'SELECT group_name, cat_id					FROM ' . EXTENSION_GROUPS_TABLE . '					WHERE cat_id > 0					ORDER BY cat_id';				$result = $db->sql_query($sql);				$s_assigned_groups = array();				while ($row = $db->sql_fetchrow($result))				{					$row['group_name'] = (isset($user->lang['EXT_GROUP_' . $row['group_name']])) ? $user->lang['EXT_GROUP_' . $row['group_name']] : $row['group_name'];					$s_assigned_groups[$row['cat_id']][] = $row['group_name'];				}				$db->sql_freeresult($result);				$l_legend_cat_images = $user->lang['SETTINGS_CAT_IMAGES'] . ' [' . $user->lang['ASSIGNED_GROUP'] . ': ' . ((!empty($s_assigned_groups[ATTACHMENT_CATEGORY_IMAGE])) ? implode(', ', $s_assigned_groups[ATTACHMENT_CATEGORY_IMAGE]) : $user->lang['NO_EXT_GROUP']) . ']';				$display_vars = array(					'title'	=> 'ACP_ATTACHMENT_SETTINGS',					'vars'	=> array(						'legend1'				=> 'ACP_ATTACHMENT_SETTINGS',						'img_max_width'			=> array('lang' => 'MAX_IMAGE_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'img_max_height'		=> array('lang' => 'MAX_IMAGE_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'img_link_width'		=> array('lang' => 'IMAGE_LINK_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'img_link_height'		=> array('lang' => 'IMAGE_LINK_SIZE', 'validate' => 'int:0', 'type' => false, 'method' => false, 'explain' => false,),						'allow_attachments'		=> array('lang' => 'ALLOW_ATTACHMENTS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'allow_pm_attach'		=> array('lang' => 'ALLOW_PM_ATTACHMENTS',	'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => false),						'upload_path'			=> array('lang' => 'UPLOAD_DIR',			'validate' => 'wpath',	'type' => 'text:25:100', 'explain' => true),						'display_order'			=> array('lang' => 'DISPLAY_ORDER',			'validate' => 'bool',	'type' => 'custom', 'method' => 'display_order', 'explain' => true),						'attachment_quota'		=> array('lang' => 'ATTACH_QUOTA',			'validate' => 'string',	'type' => 'custom', 'method' => 'max_filesize', 'explain' => true),						'max_filesize'			=> array('lang' => 'ATTACH_MAX_FILESIZE',	'validate' => 'string',	'type' => 'custom', 'method' => 'max_filesize', 'explain' => true),						'max_filesize_pm'		=> array('lang' => 'ATTACH_MAX_PM_FILESIZE','validate' => 'string',	'type' => 'custom', 'method' => 'max_filesize', 'explain' => true),						'max_attachments'		=> array('lang' => 'MAX_ATTACHMENTS',		'validate' => 'int',	'type' => 'text:3:3', 'explain' => false),						'max_attachments_pm'	=> array('lang' => 'MAX_ATTACHMENTS_PM',	'validate' => 'int',	'type' => 'text:3:3', 'explain' => false),						'secure_downloads'		=> array('lang' => 'SECURE_DOWNLOADS',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'secure_allow_deny'		=> array('lang' => 'SECURE_ALLOW_DENY',		'validate' => 'int',	'type' => 'custom', 'method' => 'select_allow_deny', 'explain' => true),						'secure_allow_empty_referer'	=> array('lang' => 'SECURE_EMPTY_REFERRER', 'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'check_attachment_content' 		=> array('lang' => 'CHECK_CONTENT', 'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'legend2'					=> $l_legend_cat_images,						'img_display_inlined'		=> array('lang' => 'DISPLAY_INLINED',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'img_create_thumbnail'		=> array('lang' => 'CREATE_THUMBNAIL',		'validate' => 'bool',	'type' => 'radio:yes_no', 'explain' => true),						'img_max_thumb_width'		=> array('lang' => 'MAX_THUMB_WIDTH',		'validate' => 'int',	'type' => 'text:7:15', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'img_min_thumb_filesize'	=> array('lang' => 'MIN_THUMB_FILESIZE',	'validate' => 'int',	'type' => 'text:7:15', 'explain' => true, 'append' => ' ' . $user->lang['BYTES']),						'img_imagick'				=> array('lang' => 'IMAGICK_PATH',			'validate' => 'string',	'type' => 'text:20:200', 'explain' => true, 'append' => '&nbsp;&nbsp;<span>[ <a href="' . $this->u_action . '&amp;action=imgmagick">' . $user->lang['SEARCH_IMAGICK'] . '</a> ]</span>'),						'img_max'					=> array('lang' => 'MAX_IMAGE_SIZE',		'validate' => 'int',	'type' => 'dimension:3:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),						'img_link'					=> array('lang' => 'IMAGE_LINK_SIZE',		'validate' => 'int',	'type' => 'dimension:3:4', 'explain' => true, 'append' => ' ' . $user->lang['PIXEL']),					)				);				$this->new_config = $config;				$cfg_array = (isset($_REQUEST['config'])) ? request_var('config', array('' => '')) : $this->new_config;				$error = array();				// We validate the complete config if whished				validate_config_vars($display_vars['vars'], $cfg_array, $error);				// Do not write values if there is an error				if (sizeof($error))				{					$submit = false;				}				// We go through the display_vars to make sure no one is trying to set variables he/she is not allowed to...				foreach ($display_vars['vars'] as $config_name => $null)				{					if (!isset($cfg_array[$config_name]) || strpos($config_name, 'legend') !== false)					{						continue;					}					$this->new_config[$config_name] = $config_value = $cfg_array[$config_name];					if (in_array($config_name, array('attachment_quota', 'max_filesize', 'max_filesize_pm')))					{						$size_var = request_var($config_name, '');						$this->new_config[$config_name] = $config_value = ($size_var == 'kb') ? round($config_value * 1024) : (($size_var == 'mb') ? round($config_value * 1048576) : $config_value);					}					if ($submit)					{						set_config($config_name, $config_value);					}				}				$this->perform_site_list();				if ($submit)				{					add_log('admin', 'LOG_CONFIG_ATTACH');					// Check Settings					$this->test_upload($error, $this->new_config['upload_path'], false);					if (!sizeof($error))					{						trigger_error($user->lang['CONFIG_UPDATED'] . adm_back_link($this->u_action));					}				}				$template->assign_var('S_ATTACHMENT_SETTINGS', true);				if ($action == 'imgmagick')				{					$this->new_config['img_imagick'] = $this->search_imagemagick();				}				// We strip eventually manual added convert program, we only want the patch				if ($this->new_config['img_imagick'])				{					// Change path separator					$this->new_config['img_imagick'] = str_replace('\\', '/', $this->new_config['img_imagick']);					$this->new_config['img_imagick'] = str_replace(array('convert', '.exe'), array('', ''), $this->new_config['img_imagick']);					// Check for trailing slash					if (substr($this->new_config['img_imagick'], -1) !== '/')					{						$this->new_config['img_imagick'] .= '/';					}				}				$supported_types = get_supported_image_types();				// Check Thumbnail Support				if (!$this->new_config['img_imagick'] && (!isset($supported_types['format']) || !sizeof($supported_types['format'])))				{					$this->new_config['img_create_thumbnail'] = 0;				}				$template->assign_vars(array(					'U_SEARCH_IMAGICK'		=> $this->u_action . '&amp;action=imgmagick',					'S_THUMBNAIL_SUPPORT'	=> (!$this->new_config['img_imagick'] && (!isset($supported_types['format']) || !sizeof($supported_types['format']))) ? false : true)				);				// Secure Download Options - Same procedure as with banning				$allow_deny = ($this->new_config['secure_allow_deny']) ? 'ALLOWED' : 'DISALLOWED';				$sql = 'SELECT *					FROM ' . SITELIST_TABLE;				$result = $db->sql_query($sql);				$defined_ips = '';				$ips = array();				while ($row = $db->sql_fetchrow($result))				{					$value = ($row['site_ip']) ? $row['site_ip'] : $row['site_hostname'];					if ($value)					{						$defined_ips .= '<option' . (($row['ip_exclude']) ? ' class="sep"' : '') . ' value="' . $row['site_id'] . '">' . $value . '</option>';						$ips[$row['site_id']] = $value;					}				}				$db->sql_freeresult($result);				$template->assign_vars(array(					'S_SECURE_DOWNLOADS'	=> $this->new_config['secure_downloads'],					'S_DEFINED_IPS'			=> ($defined_ips != '') ? true : false,					'S_WARNING'				=> (sizeof($error)) ? true : false,					'WARNING_MSG'			=> implode('<br />', $error),					'DEFINED_IPS'			=> $defined_ips,					'L_SECURE_TITLE'		=> $user->lang['DEFINE_' . $allow_deny . '_IPS'],					'L_IP_EXCLUDE'			=> $user->lang['EXCLUDE_FROM_' . $allow_deny . '_IP'],					'L_REMOVE_IPS'			=> $user->lang['REMOVE_' . $allow_deny . '_IPS'])				);				// Output relevant options				foreach ($display_vars['vars'] as $config_key => $vars)				{					if (!is_array($vars) && strpos($config_key, 'legend') === false)					{						continue;					}					if (strpos($config_key, 'legend') !== false)					{						$template->assign_block_vars('options', array(							'S_LEGEND'		=> true,							'LEGEND'		=> (isset($user->lang[$vars])) ? $user->lang[$vars] : $vars)						);						continue;					}					$type = explode(':', $vars['type']);					$l_explain = '';					if ($vars['explain'] && isset($vars['lang_explain']))					{						$l_explain = (isset($user->lang[$vars['lang_explain']])) ? $user->lang[$vars['lang_explain']] : $vars['lang_explain'];					}					else if ($vars['explain'])					{						$l_explain = (isset($user->lang[$vars['lang'] . '_EXPLAIN'])) ? $user->lang[$vars['lang'] . '_EXPLAIN'] : '';					}					$content = build_cfg_template($type, $config_key, $this->new_config, $config_key, $vars);					if (empty($content))					{						continue;					}					$template->assign_block_vars('options', array(						'KEY'			=> $config_key,						'TITLE'			=> $user->lang[$vars['lang']],						'S_EXPLAIN'		=> $vars['explain'],						'TITLE_EXPLAIN'	=> $l_explain,						'CONTENT'		=> $content,						)					);					unset($display_vars['vars'][$config_key]);				}			break;			case 'extensions':				if ($submit || isset($_POST['add_extension_check']))				{					if ($submit)					{						// Change Extensions ?						$extension_change_list	= request_var('extension_change_list', array(0));						$group_select_list		= request_var('group_select', array(0));						// Generate correct Change List						$extensions = array();						for ($i = 0, $size = sizeof($extension_change_list); $i < $size; $i++)						{							$extensions[$extension_change_list[$i]]['group_id'] = $group_select_list[$i];						}						$sql = 'SELECT *							FROM ' . EXTENSIONS_TABLE . '							ORDER BY extension_id';						$result = $db->sql_query($sql);						while ($row = $db->sql_fetchrow($result))						{							if ($row['group_id'] != $extensions[$row['extension_id']]['group_id'])							{								$sql = 'UPDATE ' . EXTENSIONS_TABLE . '									SET group_id = ' . (int) $extensions[$row['extension_id']]['group_id'] . '									WHERE extension_id = ' . $row['extension_id'];								$db->sql_query($sql);								add_log('admin', 'LOG_ATTACH_EXT_UPDATE', $row['extension']);							}						}						$db->sql_freeresult($result);						// Delete Extension?						$extension_id_list = request_var('extension_id_list', array(0));						if (sizeof($extension_id_list))						{							$sql = 'SELECT extension								FROM ' . EXTENSIONS_TABLE . '								WHERE ' . $db->sql_in_set('extension_id', $extension_id_list);							$result = $db->sql_query($sql);							$extension_list = '';							while ($row = $db->sql_fetchrow($result))							{								$extension_list .= ($extension_list == '') ? $row['extension'] : ', ' . $row['extension'];							}							$db->sql_freeresult($result);							$sql = 'DELETE								FROM ' . EXTENSIONS_TABLE . '								WHERE ' . $db->sql_in_set('extension_id', $extension_id_list);							$db->sql_query($sql);							add_log('admin', 'LOG_ATTACH_EXT_DEL', $extension_list);						}					}					// Add Extension?					$add_extension			= strtolower(request_var('add_extension', ''));					$add_extension_group	= request_var('add_group_select', 0);					$add					= (isset($_POST['add_extension_check'])) ? true : false;					if ($add_extension && $add)					{						if (!sizeof($error))						{							$sql = 'SELECT extension_id								FROM ' . EXTENSIONS_TABLE . "								WHERE extension = '" . $db->sql_escape($add_extension) . "'";							$result = $db->sql_query($sql);							if ($row = $db->sql_fetchrow($result))							{								$error[] = sprintf($user->lang['EXTENSION_EXIST'], $add_extension);							}							$db->sql_freeresult($result);							if (!sizeof($error))							{								$sql_ary = array(									'group_id'	=>	$add_extension_group,									'extension'	=>	$add_extension								);								$db->sql_query('INSERT INTO ' . EXTENSIONS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));								add_log('admin', 'LOG_ATTACH_EXT_ADD', $add_extension);							}						}					}					if (!sizeof($error))					{						$notify[] = $user->lang['EXTENSIONS_UPDATED'];					}					$cache->destroy('_extensions');				}				$template->assign_vars(array(					'S_EXTENSIONS'			=> true,					'ADD_EXTENSION'			=> (isset($add_extension)) ? $add_extension : '',					'GROUP_SELECT_OPTIONS'	=> (isset($_POST['add_extension_check'])) ? $this->group_select('add_group_select', $add_extension_group, 'extension_group') : $this->group_select('add_group_select', false, 'extension_group'))				);				$sql = 'SELECT *					FROM ' . EXTENSIONS_TABLE . '					ORDER BY group_id, extension';				$result = $db->sql_query($sql);				if ($row = $db->sql_fetchrow($result))				{					$old_group_id = $row['group_id'];					do					{						$s_spacer = false;						$current_group_id = $row['group_id'];						if ($old_group_id != $current_group_id)						{							$s_spacer = true;							$old_group_id = $current_group_id;						}						$template->assign_block_vars('extensions', array(							'S_SPACER'		=> $s_spacer,							'EXTENSION_ID'	=> $row['extension_id'],							'EXTENSION'		=> $row['extension'],							'GROUP_OPTIONS'	=> $this->group_select('group_select[]', $row['group_id']))						);					}					while ($row = $db->sql_fetchrow($result));				}				$db->sql_freeresult($result);			break;			case 'ext_groups':				$template->assign_var('S_EXTENSION_GROUPS', true);				if ($submit)				{					$action = request_var('action', '');					$group_id = request_var('g', 0);					if ($action != 'add' && $action != 'edit')					{						trigger_error('NO_MODE', E_USER_ERROR);					}					if (!$group_id && $action == 'edit')					{						trigger_error($user->lang['NO_EXT_GROUP_SPECIFIED'] . adm_back_link($this->u_action), E_USER_WARNING);					}					if ($group_id)					{						$sql = 'SELECT *							FROM ' . EXTENSION_GROUPS_TABLE . "							WHERE group_id = $group_id";						$result = $db->sql_query($sql);						$ext_row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if (!$ext_row)						{							trigger_error($user->lang['NO_EXT_GROUP_SPECIFIED'] . adm_back_link($this->u_action), E_USER_WARNING);						}					}					else					{						$ext_row = array();					}					$group_name = utf8_normalize_nfc(request_var('group_name', '', true));					$new_group_name = ($action == 'add') ? $group_name : (($ext_row['group_name'] != $group_name) ? $group_name : '');					if (!$group_name)					{						$error[] = $user->lang['NO_EXT_GROUP_NAME'];					}					// Check New Group Name					if ($new_group_name)					{						$sql = 'SELECT group_id							FROM ' . EXTENSION_GROUPS_TABLE . "							WHERE LOWER(group_name) = '" . $db->sql_escape(utf8_strtolower($new_group_name)) . "'";						if ($group_id)						{							$sql .= ' AND group_id <> ' . $group_id;						}						$result = $db->sql_query($sql);						if ($db->sql_fetchrow($result))						{							$error[] = sprintf($user->lang['EXTENSION_GROUP_EXIST'], $new_group_name);						}						$db->sql_freeresult($result);					}					if (!sizeof($error))					{						// Ok, build the update/insert array						$upload_icon	= request_var('upload_icon', 'no_image');						$size_select	= request_var('size_select', 'b');						$forum_select	= request_var('forum_select', false);						$allowed_forums	= request_var('allowed_forums', array(0));						$allow_in_pm	= (isset($_POST['allow_in_pm'])) ? true : false;						$max_filesize	= request_var('max_filesize', 0);						$max_filesize	= ($size_select == 'kb') ? round($max_filesize * 1024) : (($size_select == 'mb') ? round($max_filesize * 1048576) : $max_filesize);						$allow_group	= (isset($_POST['allow_group'])) ? true : false;						if ($max_filesize == $config['max_filesize'])						{							$max_filesize = 0;						}						if (!sizeof($allowed_forums))						{							$forum_select = false;						}						$group_ary = array(							'group_name'	=> $group_name,							'cat_id'		=> request_var('special_category', ATTACHMENT_CATEGORY_NONE),							'allow_group'	=> ($allow_group) ? 1 : 0,							'upload_icon'	=> ($upload_icon == 'no_image') ? '' : $upload_icon,							'max_filesize'	=> $max_filesize,							'allowed_forums'=> ($forum_select) ? serialize($allowed_forums) : '',							'allow_in_pm'	=> ($allow_in_pm) ? 1 : 0,						);						if ($action == 'add')						{							$group_ary['download_mode'] = INLINE_LINK;						}						$sql = ($action == 'add') ? 'INSERT INTO ' . EXTENSION_GROUPS_TABLE . ' ' : 'UPDATE ' . EXTENSION_GROUPS_TABLE . ' SET ';						$sql .= $db->sql_build_array((($action == 'add') ? 'INSERT' : 'UPDATE'), $group_ary);						$sql .= ($action == 'edit') ? " WHERE group_id = $group_id" : '';						$db->sql_query($sql);						if ($action == 'add')						{							$group_id = $db->sql_nextid();						}						$group_name = (isset($user->lang['EXT_GROUP_' . $group_name])) ? $user->lang['EXT_GROUP_' . $group_name] : $group_name;						add_log('admin', 'LOG_ATTACH_EXTGROUP_' . strtoupper($action), $group_name);					}					$extension_list = request_var('extensions', array(0));					if ($action == 'edit' && sizeof($extension_list))					{						$sql = 'UPDATE ' . EXTENSIONS_TABLE . "							SET group_id = 0							WHERE group_id = $group_id";						$db->sql_query($sql);					}					if (sizeof($extension_list))					{						$sql = 'UPDATE ' . EXTENSIONS_TABLE . "							SET group_id = $group_id							WHERE " . $db->sql_in_set('extension_id', $extension_list);						$db->sql_query($sql);					}					$cache->destroy('_extensions');					if (!sizeof($error))					{						$notify[] = $user->lang['SUCCESS_EXTENSION_GROUP_' . strtoupper($action)];					}				}				$cat_lang = array(					ATTACHMENT_CATEGORY_NONE		=> $user->lang['NO_FILE_CAT'],					ATTACHMENT_CATEGORY_IMAGE		=> $user->lang['CAT_IMAGES'],					ATTACHMENT_CATEGORY_WM			=> $user->lang['CAT_WM_FILES'],					ATTACHMENT_CATEGORY_RM			=> $user->lang['CAT_RM_FILES'],					ATTACHMENT_CATEGORY_FLASH		=> $user->lang['CAT_FLASH_FILES'],					ATTACHMENT_CATEGORY_QUICKTIME	=> $user->lang['CAT_QUICKTIME_FILES'],				);				$group_id = request_var('g', 0);				$action = (isset($_POST['add'])) ? 'add' : $action;				switch ($action)				{					case 'delete':						if (confirm_box(true))						{							$sql = 'SELECT group_name								FROM ' . EXTENSION_GROUPS_TABLE . "								WHERE group_id = $group_id";							$result = $db->sql_query($sql);							$group_name = (string) $db->sql_fetchfield('group_name');							$db->sql_freeresult($result);							$sql = 'DELETE								FROM ' . EXTENSION_GROUPS_TABLE . "								WHERE group_id = $group_id";							$db->sql_query($sql);							// Set corresponding Extensions to a pending Group							$sql = 'UPDATE ' . EXTENSIONS_TABLE . "								SET group_id = 0								WHERE group_id = $group_id";							$db->sql_query($sql);							add_log('admin', 'LOG_ATTACH_EXTGROUP_DEL', $group_name);							$cache->destroy('_extensions');							trigger_error($user->lang['EXTENSION_GROUP_DELETED'] . adm_back_link($this->u_action));						}						else						{							confirm_box(false, $user->lang['CONFIRM_OPERATION'], build_hidden_fields(array(								'i'			=> $id,								'mode'		=> $mode,								'group_id'	=> $group_id,								'action'	=> 'delete',							)));						}					break;					case 'edit':						if (!$group_id)						{							trigger_error($user->lang['NO_EXT_GROUP_SPECIFIED'] . adm_back_link($this->u_action), E_USER_WARNING);						}						$sql = 'SELECT *							FROM ' . EXTENSION_GROUPS_TABLE . "							WHERE group_id = $group_id";						$result = $db->sql_query($sql);						$ext_group_row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						$forum_ids = (!$ext_group_row['allowed_forums']) ? array() : unserialize(trim($ext_group_row['allowed_forums']));					// no break;					case 'add':						if ($action == 'add')						{							$ext_group_row = array(								'group_name'	=> utf8_normalize_nfc(request_var('group_name', '', true)),								'cat_id'		=> 0,								'allow_group'	=> 1,								'allow_in_pm'	=> 1,								'upload_icon'	=> '',								'max_filesize'	=> 0,							);							$forum_ids = array();						}						$extensions = array();						$sql = 'SELECT *							FROM ' . EXTENSIONS_TABLE . "							WHERE group_id = $group_id								OR group_id = 0							ORDER BY extension";						$result = $db->sql_query($sql);						$extensions = $db->sql_fetchrowset($result);						$db->sql_freeresult($result);						if ($ext_group_row['max_filesize'] == 0)						{							$ext_group_row['max_filesize'] = (int) $config['max_filesize'];						}						$max_filesize = get_formatted_filesize($ext_group_row['max_filesize'], false, array('mb', 'kb', 'b'));						$size_format = $max_filesize['si_identifier'];						$ext_group_row['max_filesize'] = $max_filesize['value'];						$img_path = $config['upload_icons_path'];						$filename_list = '';						$no_image_select = false;						$imglist = filelist($phpbb_root_path . $img_path);						if (!empty($imglist['']))						{							$imglist = array_values($imglist);							$imglist = $imglist[0];							foreach ($imglist as $key => $img)							{								if (!$ext_group_row['upload_icon'])								{									$no_image_select = true;									$selected = '';								}								else								{									$selected = ($ext_group_row['upload_icon'] == $img) ? ' selected="selected"' : '';								}								if (strlen($img) > 255)								{									continue;								}								$filename_list .= '<option value="' . htmlspecialchars($img) . '"' . $selected . '>' . htmlspecialchars($img) . '</option>';							}						}						$i = 0;						$assigned_extensions = '';						foreach ($extensions as $num => $row)						{							if ($row['group_id'] == $group_id && $group_id)							{								$assigned_extensions .= ($i) ? ', ' . $row['extension'] : $row['extension'];								$i++;							}						}						$s_extension_options = '';						foreach ($extensions as $row)						{							$s_extension_options .= '<option' . ((!$row['group_id']) ? ' class="disabled"' : '') . ' value="' . $row['extension_id'] . '"' . (($row['group_id'] == $group_id && $group_id) ? ' selected="selected"' : '') . '>' . $row['extension'] . '</option>';						}						$template->assign_vars(array(							'PHPBB_ROOT_PATH'		=> $phpbb_root_path,							'IMG_PATH'				=> $img_path,							'ACTION'				=> $action,							'GROUP_ID'				=> $group_id,							'GROUP_NAME'			=> $ext_group_row['group_name'],							'ALLOW_GROUP'			=> $ext_group_row['allow_group'],							'ALLOW_IN_PM'			=> $ext_group_row['allow_in_pm'],							'UPLOAD_ICON_SRC'		=> $phpbb_root_path . $img_path . '/' . $ext_group_row['upload_icon'],							'EXTGROUP_FILESIZE'		=> $ext_group_row['max_filesize'],							'ASSIGNED_EXTENSIONS'	=> $assigned_extensions,							'S_CATEGORY_SELECT'			=> $this->category_select('special_category', $group_id, 'category'),							'S_EXT_GROUP_SIZE_OPTIONS'	=> size_select_options($size_format),							'S_EXTENSION_OPTIONS'		=> $s_extension_options,							'S_FILENAME_LIST'			=> $filename_list,							'S_EDIT_GROUP'				=> true,							'S_NO_IMAGE'				=> $no_image_select,							'S_FORUM_IDS'				=> (sizeof($forum_ids)) ? true : false,							'U_EXTENSIONS'		=> append_sid("{$phpbb_admin_path}index.$phpEx", "i=$id&amp;mode=extensions"),							'U_BACK'			=> $this->u_action,							'L_LEGEND'			=> $user->lang[strtoupper($action) . '_EXTENSION_GROUP'])						);						$s_forum_id_options = '';						/** @todo use in-built function **/						$sql = 'SELECT forum_id, forum_name, parent_id, forum_type, left_id, right_id							FROM ' . FORUMS_TABLE . '							ORDER BY left_id ASC';						$result = $db->sql_query($sql, 600);						$right = $cat_right = $padding_inc = 0;						$padding = $forum_list = $holding = '';						$padding_store = array('0' => '');						while ($row = $db->sql_fetchrow($result))						{							if ($row['forum_type'] == FORUM_CAT && ($row['left_id'] + 1 == $row['right_id']))							{								// Non-postable forum with no subforums, don't display								continue;							}							if (!$auth->acl_get('f_list', $row['forum_id']))							{								// if the user does not have permissions to list this forum skip								continue;							}							if ($row['left_id'] < $right)							{								$padding .= '&nbsp; &nbsp;';								$padding_store[$row['parent_id']] = $padding;							}							else if ($row['left_id'] > $right + 1)							{								$padding = empty($padding_store[$row['parent_id']]) ? '' : $padding_store[$row['parent_id']];							}							$right = $row['right_id'];							$selected = (in_array($row['forum_id'], $forum_ids)) ? ' selected="selected"' : '';							if ($row['left_id'] > $cat_right)							{								// make sure we don't forget anything								$s_forum_id_options .= $holding;								$holding = '';							}							if ($row['right_id'] - $row['left_id'] > 1)							{								$cat_right = max($cat_right, $row['right_id']);								$holding .= '<option value="' . $row['forum_id'] . '"' . (($row['forum_type'] == FORUM_POST) ? ' class="sep"' : '') . $selected . '>' . $padding . $row['forum_name'] . '</option>';							}							else							{								$s_forum_id_options .= $holding . '<option value="' . $row['forum_id'] . '"' . (($row['forum_type'] == FORUM_POST) ? ' class="sep"' : '') . $selected . '>' . $padding . $row['forum_name'] . '</option>';								$holding = '';							}						}						if ($holding)						{							$s_forum_id_options .= $holding;						}						$db->sql_freeresult($result);						unset($padding_store);						$template->assign_vars(array(							'S_FORUM_ID_OPTIONS'	=> $s_forum_id_options)						);					break;				}				$sql = 'SELECT *					FROM ' . EXTENSION_GROUPS_TABLE . '					ORDER BY allow_group DESC, allow_in_pm DESC, group_name';				$result = $db->sql_query($sql);				$old_allow_group = $old_allow_pm = 1;				while ($row = $db->sql_fetchrow($result))				{					$s_add_spacer = ($old_allow_group != $row['allow_group'] || $old_allow_pm != $row['allow_in_pm']) ? true : false;					$template->assign_block_vars('groups', array(						'S_ADD_SPACER'		=> $s_add_spacer,						'S_ALLOWED_IN_PM'	=> ($row['allow_in_pm']) ? true : false,						'S_GROUP_ALLOWED'	=> ($row['allow_group']) ? true : false,						'U_EDIT'		=> $this->u_action . "&amp;action=edit&amp;g={$row['group_id']}",						'U_DELETE'		=> $this->u_action . "&amp;action=delete&amp;g={$row['group_id']}",						'GROUP_NAME'	=> (isset($user->lang['EXT_GROUP_' . $row['group_name']])) ? $user->lang['EXT_GROUP_' . $row['group_name']] : $row['group_name'],						'CATEGORY'		=> $cat_lang[$row['cat_id']],						)					);					$old_allow_group = $row['allow_group'];					$old_allow_pm = $row['allow_in_pm'];				}				$db->sql_freeresult($result);			break;			case 'orphan':				if ($submit)				{					$delete_files = (isset($_POST['delete'])) ? array_keys(request_var('delete', array('' => 0))) : array();					$add_files = (isset($_POST['add'])) ? array_keys(request_var('add', array('' => 0))) : array();					$post_ids = request_var('post_id', array('' => 0));					if (sizeof($delete_files))					{						$sql = 'SELECT *							FROM ' . ATTACHMENTS_TABLE . '							WHERE ' . $db->sql_in_set('attach_id', $delete_files) . '								AND is_orphan = 1';						$result = $db->sql_query($sql);						$delete_files = array();						while ($row = $db->sql_fetchrow($result))						{							phpbb_unlink($row['physical_filename'], 'file');							if ($row['thumbnail'])							{								phpbb_unlink($row['physical_filename'], 'thumbnail');							}							$delete_files[$row['attach_id']] = $row['real_filename'];						}						$db->sql_freeresult($result);					}					if (sizeof($delete_files))					{						$sql = 'DELETE FROM ' . ATTACHMENTS_TABLE . '							WHERE ' . $db->sql_in_set('attach_id', array_keys($delete_files));						$db->sql_query($sql);						add_log('admin', 'LOG_ATTACH_ORPHAN_DEL', implode(', ', $delete_files));						$notify[] = sprintf($user->lang['LOG_ATTACH_ORPHAN_DEL'], implode(', ', $delete_files));					}					$upload_list = array();					foreach ($add_files as $attach_id)					{						if (!isset($delete_files[$attach_id]) && !empty($post_ids[$attach_id]))						{							$upload_list[$attach_id] = $post_ids[$attach_id];						}					}					unset($add_files);					if (sizeof($upload_list))					{						$template->assign_var('S_UPLOADING_FILES', true);						$sql = 'SELECT forum_id, forum_name							FROM ' . FORUMS_TABLE;						$result = $db->sql_query($sql);						$forum_names = array();						while ($row = $db->sql_fetchrow($result))						{							$forum_names[$row['forum_id']] = $row['forum_name'];						}						$db->sql_freeresult($result);						$sql = 'SELECT forum_id, topic_id, post_id, poster_id							FROM ' . POSTS_TABLE . '							WHERE ' . $db->sql_in_set('post_id', $upload_list);						$result = $db->sql_query($sql);						$post_info = array();						while ($row = $db->sql_fetchrow($result))						{							$post_info[$row['post_id']] = $row;						}						$db->sql_freeresult($result);						// Select those attachments we want to change...						$sql = 'SELECT *							FROM ' . ATTACHMENTS_TABLE . '							WHERE ' . $db->sql_in_set('attach_id', array_keys($upload_list)) . '								AND is_orphan = 1';						$result = $db->sql_query($sql);						$files_added = $space_taken = 0;						while ($row = $db->sql_fetchrow($result))						{							$post_row = $post_info[$upload_list[$row['attach_id']]];							$template->assign_block_vars('upload', array(								'FILE_INFO'		=> sprintf($user->lang['UPLOADING_FILE_TO'], $row['real_filename'], $post_row['post_id']),								'S_DENIED'		=> (!$auth->acl_get('f_attach', $post_row['forum_id'])) ? true : false,								'L_DENIED'		=> (!$auth->acl_get('f_attach', $post_row['forum_id'])) ? sprintf($user->lang['UPLOAD_DENIED_FORUM'], $forum_names[$row['forum_id']]) : '')							);							if (!$auth->acl_get('f_attach', $post_row['forum_id']))							{								continue;							}							// Adjust attachment entry							$sql_ary = array(								'in_message'	=> 0,								'is_orphan'		=> 0,								'poster_id'		=> $post_row['poster_id'],								'post_msg_id'	=> $post_row['post_id'],								'topic_id'		=> $post_row['topic_id'],							);							$sql = 'UPDATE ' . ATTACHMENTS_TABLE . '								SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '								WHERE attach_id = ' . $row['attach_id'];							$db->sql_query($sql);							$sql = 'UPDATE ' . POSTS_TABLE . '								SET post_attachment = 1								WHERE post_id = ' . $post_row['post_id'];							$db->sql_query($sql);							$sql = 'UPDATE ' . TOPICS_TABLE . '								SET topic_attachment = 1								WHERE topic_id = ' . $post_row['topic_id'];							$db->sql_query($sql);							$space_taken += $row['filesize'];							$files_added++;							add_log('admin', 'LOG_ATTACH_FILEUPLOAD', $post_row['post_id'], $row['real_filename']);						}						$db->sql_freeresult($result);						if ($files_added)						{							set_config_count('upload_dir_size', $space_taken, true);							set_config_count('num_files', $files_added, true);						}					}				}				$template->assign_vars(array(					'S_ORPHAN'		=> true)				);				// Just get the files with is_orphan set and older than 3 hours				$sql = 'SELECT *					FROM ' . ATTACHMENTS_TABLE . '					WHERE is_orphan = 1						AND filetime < ' . (time() - 3*60*60) . '					ORDER BY filetime DESC';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$template->assign_block_vars('orphan', array(						'FILESIZE'			=> get_formatted_filesize($row['filesize']),						'FILETIME'			=> $user->format_date($row['filetime']),						'REAL_FILENAME'		=> utf8_basename($row['real_filename']),						'PHYSICAL_FILENAME'	=> utf8_basename($row['physical_filename']),						'ATTACH_ID'			=> $row['attach_id'],						'POST_IDS'			=> (!empty($post_ids[$row['attach_id']])) ? $post_ids[$row['attach_id']] : '',						'U_FILE'			=> append_sid($phpbb_root_path . 'download/file.' . $phpEx, 'mode=view&amp;id=' . $row['attach_id']))					);				}				$db->sql_freeresult($result);			break;		}		if (sizeof($error))		{			$template->assign_vars(array(				'S_WARNING'		=> true,				'WARNING_MSG'	=> implode('<br />', $error))			);		}		if (sizeof($notify))		{			$template->assign_vars(array(				'S_NOTIFY'		=> true,				'NOTIFY_MSG'	=> implode('<br />', $notify))			);		}	}	/**	* Build Select for category items	*/	function category_select($select_name, $group_id = false, $key = '')	{		global $db, $user;		$types = array(			ATTACHMENT_CATEGORY_NONE		=> $user->lang['NO_FILE_CAT'],			ATTACHMENT_CATEGORY_IMAGE		=> $user->lang['CAT_IMAGES'],			ATTACHMENT_CATEGORY_WM			=> $user->lang['CAT_WM_FILES'],			ATTACHMENT_CATEGORY_RM			=> $user->lang['CAT_RM_FILES'],			ATTACHMENT_CATEGORY_FLASH		=> $user->lang['CAT_FLASH_FILES'],			ATTACHMENT_CATEGORY_QUICKTIME	=> $user->lang['CAT_QUICKTIME_FILES'],		);		if ($group_id)		{			$sql = 'SELECT cat_id				FROM ' . EXTENSION_GROUPS_TABLE . '				WHERE group_id = ' . (int) $group_id;			$result = $db->sql_query($sql);			$cat_type = (!($row = $db->sql_fetchrow($result))) ? ATTACHMENT_CATEGORY_NONE : $row['cat_id'];			$db->sql_freeresult($result);		}		else		{			$cat_type = ATTACHMENT_CATEGORY_NONE;		}		$group_select = '<select name="' . $select_name . '"' . (($key) ? ' id="' . $key . '"' : '') . '>';		foreach ($types as $type => $mode)		{			$selected = ($type == $cat_type) ? ' selected="selected"' : '';			$group_select .= '<option value="' . $type . '"' . $selected . '>' . $mode . '</option>';		}		$group_select .= '</select>';		return $group_select;	}	/**	* Extension group select	*/	function group_select($select_name, $default_group = false, $key = '')	{		global $db, $user;		$group_select = '<select name="' . $select_name . '"' . (($key) ? ' id="' . $key . '"' : '') . '>';		$sql = 'SELECT group_id, group_name			FROM ' . EXTENSION_GROUPS_TABLE . '			ORDER BY group_name';		$result = $db->sql_query($sql);		$group_name = array();		while ($row = $db->sql_fetchrow($result))		{			$row['group_name'] = (isset($user->lang['EXT_GROUP_' . $row['group_name']])) ? $user->lang['EXT_GROUP_' . $row['group_name']] : $row['group_name'];			$group_name[] = $row;		}		$db->sql_freeresult($result);		$row['group_id'] = 0;		$row['group_name'] = $user->lang['NOT_ASSIGNED'];		$group_name[] = $row;		for ($i = 0; $i < sizeof($group_name); $i++)		{			if ($default_group === false)			{				$selected = ($i == 0) ? ' selected="selected"' : '';			}			else			{				$selected = ($group_name[$i]['group_id'] == $default_group) ? ' selected="selected"' : '';			}			$group_select .= '<option value="' . $group_name[$i]['group_id'] . '"' . $selected . '>' . $group_name[$i]['group_name'] . '</option>';		}		$group_select .= '</select>';		return $group_select;	}	/**	* Search Imagick	*/	function search_imagemagick()	{		$imagick = '';		$exe = ((defined('PHP_OS')) && (preg_match('#^win#i', PHP_OS))) ? '.exe' : '';		$magic_home = getenv('MAGICK_HOME');		if (empty($magic_home))		{			$locations = array('C:/WINDOWS/', 'C:/WINNT/', 'C:/WINDOWS/SYSTEM/', 'C:/WINNT/SYSTEM/', 'C:/WINDOWS/SYSTEM32/', 'C:/WINNT/SYSTEM32/', '/usr/bin/', '/usr/sbin/', '/usr/local/bin/', '/usr/local/sbin/', '/opt/', '/usr/imagemagick/', '/usr/bin/imagemagick/');			$path_locations = str_replace('\\', '/', (explode(($exe) ? ';' : ':', getenv('PATH'))));			$locations = array_merge($path_locations, $locations);			foreach ($locations as $location)			{				// The path might not end properly, fudge it				if (substr($location, -1) !== '/')				{					$location .= '/';				}				if (@file_exists($location) && @is_readable($location . 'mogrify' . $exe) && @filesize($location . 'mogrify' . $exe) > 3000)				{					$imagick = str_replace('\\', '/', $location);					continue;				}			}		}		else		{			$imagick = str_replace('\\', '/', $magic_home);		}		return $imagick;	}	/**	* Test Settings	*/	function test_upload(&$error, $upload_dir, $create_directory = false)	{		global $user, $phpbb_root_path;		// Does the target directory exist, is it a directory and writable.		if ($create_directory)		{			if (!file_exists($phpbb_root_path . $upload_dir))			{				@mkdir($phpbb_root_path . $upload_dir, 0777);				phpbb_chmod($phpbb_root_path . $upload_dir, CHMOD_READ | CHMOD_WRITE);			}		}		if (!file_exists($phpbb_root_path . $upload_dir))		{			$error[] = sprintf($user->lang['NO_UPLOAD_DIR'], $upload_dir);			return;		}		if (!is_dir($phpbb_root_path . $upload_dir))		{			$error[] = sprintf($user->lang['UPLOAD_NOT_DIR'], $upload_dir);			return;		}		if (!phpbb_is_writable($phpbb_root_path . $upload_dir))		{			$error[] = sprintf($user->lang['NO_WRITE_UPLOAD'], $upload_dir);			return;		}	}	/**	* Perform operations on sites for external linking	*/	function perform_site_list()	{		global $db, $user;		if (isset($_REQUEST['securesubmit']))		{			// Grab the list of entries			$ips = request_var('ips', '');			$ip_list = array_unique(explode("\n", $ips));			$ip_list_log = implode(', ', $ip_list);			$ip_exclude = (!empty($_POST['ipexclude'])) ? 1 : 0;			$iplist = array();			$hostlist = array();			foreach ($ip_list as $item)			{				if (preg_match('#^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})[ ]*\-[ ]*([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$#', trim($item), $ip_range_explode))				{					// Don't ask about all this, just don't ask ... !					$ip_1_counter = $ip_range_explode[1];					$ip_1_end = $ip_range_explode[5];					while ($ip_1_counter <= $ip_1_end)					{						$ip_2_counter = ($ip_1_counter == $ip_range_explode[1]) ? $ip_range_explode[2] : 0;						$ip_2_end = ($ip_1_counter < $ip_1_end) ? 254 : $ip_range_explode[6];						if ($ip_2_counter == 0 && $ip_2_end == 254)						{							$ip_2_counter = 256;							$ip_2_fragment = 256;							$iplist[] = "'$ip_1_counter.*'";						}						while ($ip_2_counter <= $ip_2_end)						{							$ip_3_counter = ($ip_2_counter == $ip_range_explode[2] && $ip_1_counter == $ip_range_explode[1]) ? $ip_range_explode[3] : 0;							$ip_3_end = ($ip_2_counter < $ip_2_end || $ip_1_counter < $ip_1_end) ? 254 : $ip_range_explode[7];							if ($ip_3_counter == 0 && $ip_3_end == 254)							{								$ip_3_counter = 256;								$ip_3_fragment = 256;								$iplist[] = "'$ip_1_counter.$ip_2_counter.*'";							}							while ($ip_3_counter <= $ip_3_end)							{								$ip_4_counter = ($ip_3_counter == $ip_range_explode[3] && $ip_2_counter == $ip_range_explode[2] && $ip_1_counter == $ip_range_explode[1]) ? $ip_range_explode[4] : 0;								$ip_4_end = ($ip_3_counter < $ip_3_end || $ip_2_counter < $ip_2_end) ? 254 : $ip_range_explode[8];								if ($ip_4_counter == 0 && $ip_4_end == 254)								{									$ip_4_counter = 256;									$ip_4_fragment = 256;									$iplist[] = "'$ip_1_counter.$ip_2_counter.$ip_3_counter.*'";								}								while ($ip_4_counter <= $ip_4_end)								{									$iplist[] = "'$ip_1_counter.$ip_2_counter.$ip_3_counter.$ip_4_counter'";									$ip_4_counter++;								}								$ip_3_counter++;							}							$ip_2_counter++;						}						$ip_1_counter++;					}				}				else if (preg_match('#^([0-9]{1,3})\.([0-9\*]{1,3})\.([0-9\*]{1,3})\.([0-9\*]{1,3})$#', trim($item)) || preg_match('#^[a-f0-9:]+\*?$#i', trim($item)))				{					$iplist[] = "'" . trim($item) . "'";				}				else if (preg_match('#^([\w\-_]\.?){2,}$#is', trim($item)))				{					$hostlist[] = "'" . trim($item) . "'";				}				else if (preg_match("#^([a-z0-9\-\*\._/]+?)$#is", trim($item)))				{					$hostlist[] = "'" . trim($item) . "'";				}			}			$sql = 'SELECT site_ip, site_hostname				FROM ' . SITELIST_TABLE . "				WHERE ip_exclude = $ip_exclude";			$result = $db->sql_query($sql);			if ($row = $db->sql_fetchrow($result))			{				$iplist_tmp = array();				$hostlist_tmp = array();				do				{					if ($row['site_ip'])					{						if (strlen($row['site_ip']) > 40)						{							continue;						}						$iplist_tmp[] = "'" . $row['site_ip'] . "'";					}					else if ($row['site_hostname'])					{						if (strlen($row['site_hostname']) > 255)						{							continue;						}						$hostlist_tmp[] = "'" . $row['site_hostname'] . "'";					}					// break;				}				while ($row = $db->sql_fetchrow($result));				$iplist = array_unique(array_diff($iplist, $iplist_tmp));				$hostlist = array_unique(array_diff($hostlist, $hostlist_tmp));				unset($iplist_tmp);				unset($hostlist_tmp);			}			$db->sql_freeresult($result);			if (sizeof($iplist))			{				foreach ($iplist as $ip_entry)				{					$sql = 'INSERT INTO ' . SITELIST_TABLE . " (site_ip, ip_exclude)						VALUES ($ip_entry, $ip_exclude)";					$db->sql_query($sql);				}			}			if (sizeof($hostlist))			{				foreach ($hostlist as $host_entry)				{					$sql = 'INSERT INTO ' . SITELIST_TABLE . " (site_hostname, ip_exclude)						VALUES ($host_entry, $ip_exclude)";					$db->sql_query($sql);				}			}			if (!empty($ip_list_log))			{				// Update log				$log_entry = ($ip_exclude) ? 'LOG_DOWNLOAD_EXCLUDE_IP' : 'LOG_DOWNLOAD_IP';				add_log('admin', $log_entry, $ip_list_log);			}			trigger_error($user->lang['SECURE_DOWNLOAD_UPDATE_SUCCESS'] . adm_back_link($this->u_action));		}		else if (isset($_POST['unsecuresubmit']))		{			$unip_sql = request_var('unip', array(0));			if (sizeof($unip_sql))			{				$l_unip_list = '';				// Grab details of ips for logging information later				$sql = 'SELECT site_ip, site_hostname					FROM ' . SITELIST_TABLE . '					WHERE ' . $db->sql_in_set('site_id', $unip_sql);				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$l_unip_list .= (($l_unip_list != '') ? ', ' : '') . (($row['site_ip']) ? $row['site_ip'] : $row['site_hostname']);				}				$db->sql_freeresult($result);				$sql = 'DELETE FROM ' . SITELIST_TABLE . '					WHERE ' . $db->sql_in_set('site_id', $unip_sql);				$db->sql_query($sql);				add_log('admin', 'LOG_DOWNLOAD_REMOVE_IP', $l_unip_list);			}			trigger_error($user->lang['SECURE_DOWNLOAD_UPDATE_SUCCESS'] . adm_back_link($this->u_action));		}	}	/**	* Write display_order config field	*/	function display_order($value, $key = '')	{		$radio_ary = array(0 => 'DESCENDING', 1 => 'ASCENDING');		return h_radio('config[display_order]', $radio_ary, $value, $key);	}	/**	* Adjust all three max_filesize config vars for display	*/	function max_filesize($value, $key = '')	{		// Determine size var and adjust the value accordingly		$filesize = get_formatted_filesize($value, false, array('mb', 'kb', 'b'));		$size_var = $filesize['si_identifier'];		$value = $filesize['value'];		return '<input type="text" id="' . $key . '" size="8" maxlength="15" name="config[' . $key . ']" value="' . $value . '" /> <select name="' . $key . '">' . size_select_options($size_var) . '</select>';	}	/**	* Write secure_allow_deny config field	*/	function select_allow_deny($value, $key = '')	{		$radio_ary = array(1 => 'ORDER_ALLOW_DENY', 0 => 'ORDER_DENY_ALLOW');		return h_radio('config[' . $key . ']', $radio_ary, $value, $key);	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** mcp_reports* Handling the reports queue* @package mcp*/class mcp_reports{	var $p_master;	var $u_action;	function mcp_reports(&$p_master)	{		$this->p_master = &$p_master;	}	function main($id, $mode)	{		global $auth, $db, $user, $template, $cache;		global $config, $phpbb_root_path, $phpEx, $action;		include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);		$forum_id = request_var('f', 0);		$start = request_var('start', 0);		$this->page_title = 'MCP_REPORTS';		switch ($action)		{			case 'close':			case 'delete':				include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);				$report_id_list = request_var('report_id_list', array(0));				if (!sizeof($report_id_list))				{					trigger_error('NO_REPORT_SELECTED');				}				close_report($report_id_list, $mode, $action);			break;		}		switch ($mode)		{			case 'report_details':				$user->add_lang(array('posting', 'viewforum', 'viewtopic'));				$post_id = request_var('p', 0);				// closed reports are accessed by report id				$report_id = request_var('r', 0);				$sql = 'SELECT r.post_id, r.user_id, r.report_id, r.report_closed, report_time, r.report_text, rr.reason_title, rr.reason_description, u.username, u.username_clean, u.user_colour					FROM ' . REPORTS_TABLE . ' r, ' . REPORTS_REASONS_TABLE . ' rr, ' . USERS_TABLE . ' u					WHERE ' . (($report_id) ? 'r.report_id = ' . $report_id : "r.post_id = $post_id") . '						AND rr.reason_id = r.reason_id						AND r.user_id = u.user_id						AND r.pm_id = 0					ORDER BY report_closed ASC';				$result = $db->sql_query_limit($sql, 1);				$report = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$report)				{					trigger_error('NO_REPORT');				}				if (!$report_id && $report['report_closed'])				{					trigger_error('REPORT_CLOSED');				}				$post_id = $report['post_id'];				$report_id = $report['report_id'];				$post_info = get_post_data(array($post_id), 'm_report', true);				if (!sizeof($post_info))				{					trigger_error('NO_REPORT_SELECTED');				}				$post_info = $post_info[$post_id];				$reason = array('title' => $report['reason_title'], 'description' => $report['reason_description']);				if (isset($user->lang['report_reasons']['TITLE'][strtoupper($reason['title'])]) && isset($user->lang['report_reasons']['DESCRIPTION'][strtoupper($reason['title'])]))				{					$reason['description'] = $user->lang['report_reasons']['DESCRIPTION'][strtoupper($reason['title'])];					$reason['title'] = $user->lang['report_reasons']['TITLE'][strtoupper($reason['title'])];				}				if (topic_review($post_info['topic_id'], $post_info['forum_id'], 'topic_review', 0, false))				{					$template->assign_vars(array(						'S_TOPIC_REVIEW'	=> true,						'S_BBCODE_ALLOWED'	=> $post_info['enable_bbcode'],						'TOPIC_TITLE'		=> $post_info['topic_title'])					);				}				$topic_tracking_info = $extensions = $attachments = array();				// Get topic tracking info				if ($config['load_db_lastread'])				{					$tmp_topic_data = array($post_info['topic_id'] => $post_info);					$topic_tracking_info = get_topic_tracking($post_info['forum_id'], $post_info['topic_id'], $tmp_topic_data, array($post_info['forum_id'] => $post_info['forum_mark_time']));					unset($tmp_topic_data);				}				else				{					$topic_tracking_info = get_complete_topic_tracking($post_info['forum_id'], $post_info['topic_id']);				}				$post_unread = (isset($topic_tracking_info[$post_info['topic_id']]) && $post_info['post_time'] > $topic_tracking_info[$post_info['topic_id']]) ? true : false;				// Process message, leave it uncensored				$message = $post_info['post_text'];				if ($post_info['bbcode_bitfield'])				{					include_once($phpbb_root_path . 'includes/bbcode.' . $phpEx);					$bbcode = new bbcode($post_info['bbcode_bitfield']);					$bbcode->bbcode_second_pass($message, $post_info['bbcode_uid'], $post_info['bbcode_bitfield']);				}				$message = bbcode_nl2br($message);				$message = smiley_text($message);				$report['report_text'] = make_clickable(bbcode_nl2br($report['report_text']));				if ($post_info['post_attachment'] && $auth->acl_get('u_download') && $auth->acl_get('f_download', $post_info['forum_id']))				{					$sql = 'SELECT *						FROM ' . ATTACHMENTS_TABLE . '						WHERE post_msg_id = ' . $post_id . '							AND in_message = 0						ORDER BY filetime DESC';					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$attachments[] = $row;					}					$db->sql_freeresult($result);					if (sizeof($attachments))					{						$update_count = array();						parse_attachments($post_info['forum_id'], $message, $attachments, $update_count);					}					// Display not already displayed Attachments for this post, we already parsed them. ;)					if (!empty($attachments))					{						$template->assign_var('S_HAS_ATTACHMENTS', true);						foreach ($attachments as $attachment)						{							$template->assign_block_vars('attachment', array(								'DISPLAY_ATTACHMENT'	=> $attachment)							);						}					}				}				$template->assign_vars(array(					'S_MCP_REPORT'			=> true,					'S_CLOSE_ACTION'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports&amp;mode=report_details&amp;f=' . $post_info['forum_id'] . '&amp;p=' . $post_id),					'S_CAN_VIEWIP'			=> $auth->acl_get('m_info', $post_info['forum_id']),					'S_POST_REPORTED'		=> $post_info['post_reported'],					'S_POST_UNAPPROVED'		=> !$post_info['post_approved'],					'S_POST_LOCKED'			=> $post_info['post_edit_locked'],					'S_USER_NOTES'			=> true,					'U_EDIT'					=> ($auth->acl_get('m_edit', $post_info['forum_id'])) ? append_sid("{$phpbb_root_path}posting.$phpEx", "mode=edit&amp;f={$post_info['forum_id']}&amp;p={$post_info['post_id']}") : '',					'U_MCP_APPROVE'				=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue&amp;mode=approve_details&amp;f=' . $post_info['forum_id'] . '&amp;p=' . $post_id),					'U_MCP_REPORT'				=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports&amp;mode=report_details&amp;f=' . $post_info['forum_id'] . '&amp;p=' . $post_id),					'U_MCP_REPORTER_NOTES'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $report['user_id']),					'U_MCP_USER_NOTES'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $post_info['user_id']),					'U_MCP_WARN_REPORTER'		=> ($auth->acl_get('m_warn')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=warn&amp;mode=warn_user&amp;u=' . $report['user_id']) : '',					'U_MCP_WARN_USER'			=> ($auth->acl_get('m_warn')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=warn&amp;mode=warn_user&amp;u=' . $post_info['user_id']) : '',					'U_VIEW_FORUM'				=> append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $post_info['forum_id']),					'U_VIEW_POST'				=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $post_info['forum_id'] . '&amp;p=' . $post_info['post_id'] . '#p' . $post_info['post_id']),					'U_VIEW_TOPIC'				=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $post_info['forum_id'] . '&amp;t=' . $post_info['topic_id']),					'EDIT_IMG'				=> $user->img('icon_post_edit', $user->lang['EDIT_POST']),					'MINI_POST_IMG'			=> ($post_unread) ? $user->img('icon_post_target_unread', 'UNREAD_POST') : $user->img('icon_post_target', 'POST'),					'UNAPPROVED_IMG'		=> $user->img('icon_topic_unapproved', $user->lang['POST_UNAPPROVED']),					'RETURN_REPORTS'			=> sprintf($user->lang['RETURN_REPORTS'], '<a href="' . append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=reports' . (($post_info['post_reported']) ? '&amp;mode=reports' : '&amp;mode=reports_closed') . '&amp;start=' . $start . '&amp;f=' . $post_info['forum_id']) . '">', '</a>'),					'REPORTED_IMG'				=> $user->img('icon_topic_reported', $user->lang['POST_REPORTED']),					'REPORT_DATE'				=> $user->format_date($report['report_time']),					'REPORT_ID'					=> $report_id,					'REPORT_REASON_TITLE'		=> $reason['title'],					'REPORT_REASON_DESCRIPTION'	=> $reason['description'],					'REPORT_TEXT'				=> $report['report_text'],					'POST_AUTHOR_FULL'		=> get_username_string('full', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),					'POST_AUTHOR_COLOUR'	=> get_username_string('colour', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),					'POST_AUTHOR'			=> get_username_string('username', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),					'U_POST_AUTHOR'			=> get_username_string('profile', $post_info['user_id'], $post_info['username'], $post_info['user_colour'], $post_info['post_username']),					'REPORTER_FULL'				=> get_username_string('full', $report['user_id'], $report['username'], $report['user_colour']),					'REPORTER_COLOUR'			=> get_username_string('colour', $report['user_id'], $report['username'], $report['user_colour']),					'REPORTER_NAME'				=> get_username_string('username', $report['user_id'], $report['username'], $report['user_colour']),					'U_VIEW_REPORTER_PROFILE'	=> get_username_string('profile', $report['user_id'], $report['username'], $report['user_colour']),					'POST_PREVIEW'			=> $message,					'POST_SUBJECT'			=> ($post_info['post_subject']) ? $post_info['post_subject'] : $user->lang['NO_SUBJECT'],					'POST_DATE'				=> $user->format_date($post_info['post_time']),					'POST_IP'				=> $post_info['poster_ip'],					'POST_IPADDR'			=> ($auth->acl_get('m_info', $post_info['forum_id']) && request_var('lookup', '')) ? @gethostbyaddr($post_info['poster_ip']) : '',					'POST_ID'				=> $post_info['post_id'],					'U_LOOKUP_IP'			=> ($auth->acl_get('m_info', $post_info['forum_id'])) ? $this->u_action . '&amp;r=' . $report_id . '&amp;p=' . $post_id . '&amp;f=' . $forum_id . '&amp;lookup=' . $post_info['poster_ip'] . '#ip' : '',				));				$this->tpl_name = 'mcp_post';			break;			case 'reports':			case 'reports_closed':				$topic_id = request_var('t', 0);				$forum_info = array();				$forum_list_reports = get_forum_list('m_report', false, true);				$forum_list_read = array_flip(get_forum_list('f_read', true, true)); // Flipped so we can isset() the forum IDs				// Remove forums we cannot read				foreach ($forum_list_reports as $k => $forum_data)				{					if (!isset($forum_list_read[$forum_data['forum_id']]))					{						unset($forum_list_reports[$k]);					}				}				unset($forum_list_read);				if ($topic_id)				{					$topic_info = get_topic_data(array($topic_id));					if (!sizeof($topic_info))					{						trigger_error('TOPIC_NOT_EXIST');					}					if ($forum_id != $topic_info[$topic_id]['forum_id'])					{						$topic_id = 0;					}					else					{						$topic_info = $topic_info[$topic_id];						$forum_id = (int) $topic_info['forum_id'];					}				}				$forum_list = array();				if (!$forum_id)				{					foreach ($forum_list_reports as $row)					{						$forum_list[] = $row['forum_id'];					}					if (!sizeof($forum_list))					{						trigger_error('NOT_MODERATOR');					}					$global_id = $forum_list[0];					$sql = 'SELECT SUM(forum_topics) as sum_forum_topics						FROM ' . FORUMS_TABLE . '						WHERE ' . $db->sql_in_set('forum_id', $forum_list);					$result = $db->sql_query($sql);					$forum_info['forum_topics'] = (int) $db->sql_fetchfield('sum_forum_topics');					$db->sql_freeresult($result);				}				else				{					$forum_info = get_forum_data(array($forum_id), 'm_report');					if (!sizeof($forum_info))					{						trigger_error('NOT_MODERATOR');					}					$forum_info = $forum_info[$forum_id];					$forum_list = array($forum_id);					$global_id = $forum_id;				}				$forum_list[] = 0;				$forum_data = array();				$forum_options = '<option value="0"' . (($forum_id == 0) ? ' selected="selected"' : '') . '>' . $user->lang['ALL_FORUMS'] . '</option>';				foreach ($forum_list_reports as $row)				{					$forum_options .= '<option value="' . $row['forum_id'] . '"' . (($forum_id == $row['forum_id']) ? ' selected="selected"' : '') . '>' . str_repeat('&nbsp; &nbsp;', $row['padding']) . $row['forum_name'] . '</option>';					$forum_data[$row['forum_id']] = $row;				}				unset($forum_list_reports);				$sort_days = $total = 0;				$sort_key = $sort_dir = '';				$sort_by_sql = $sort_order_sql = array();				mcp_sorting($mode, $sort_days, $sort_key, $sort_dir, $sort_by_sql, $sort_order_sql, $total, $forum_id, $topic_id);				$forum_topics = ($total == -1) ? $forum_info['forum_topics'] : $total;				$limit_time_sql = ($sort_days) ? 'AND r.report_time >= ' . (time() - ($sort_days * 86400)) : '';				if ($mode == 'reports')				{					$report_state = 'AND p.post_reported = 1 AND r.report_closed = 0';				}				else				{					$report_state = 'AND r.report_closed = 1';				}				$sql = 'SELECT r.report_id					FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . ' t, ' . REPORTS_TABLE . ' r ' . (($sort_order_sql[0] == 'u') ? ', ' . USERS_TABLE . ' u' : '') . (($sort_order_sql[0] == 'r') ? ', ' . USERS_TABLE . ' ru' : '') . '					WHERE ' . $db->sql_in_set('p.forum_id', $forum_list) . "						$report_state						AND r.post_id = p.post_id						" . (($sort_order_sql[0] == 'u') ? 'AND u.user_id = p.poster_id' : '') . '						' . (($sort_order_sql[0] == 'r') ? 'AND ru.user_id = r.user_id' : '') . '						' . (($topic_id) ? 'AND p.topic_id = ' . $topic_id : '') . "						AND t.topic_id = p.topic_id						AND r.pm_id = 0						$limit_time_sql					ORDER BY $sort_order_sql";				$result = $db->sql_query_limit($sql, $config['topics_per_page'], $start);				$i = 0;				$report_ids = array();				while ($row = $db->sql_fetchrow($result))				{					$report_ids[] = $row['report_id'];					$row_num[$row['report_id']] = $i++;				}				$db->sql_freeresult($result);				if (sizeof($report_ids))				{					$sql = 'SELECT t.forum_id, t.topic_id, t.topic_title, p.post_id, p.post_subject, p.post_username, p.poster_id, p.post_time, u.username, u.username_clean, u.user_colour, r.user_id as reporter_id, ru.username as reporter_name, ru.user_colour as reporter_colour, r.report_time, r.report_id						FROM ' . REPORTS_TABLE . ' r, ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . ' t, ' . USERS_TABLE . ' u, ' . USERS_TABLE . ' ru						WHERE ' . $db->sql_in_set('r.report_id', $report_ids) . '							AND t.topic_id = p.topic_id							AND r.post_id = p.post_id							AND u.user_id = p.poster_id							AND ru.user_id = r.user_id							AND r.pm_id = 0						ORDER BY ' . $sort_order_sql;					$result = $db->sql_query($sql);					$report_data = $rowset = array();					while ($row = $db->sql_fetchrow($result))					{						$global_topic = ($row['forum_id']) ? false : true;						if ($global_topic)						{							$row['forum_id'] = $global_id;						}						$template->assign_block_vars('postrow', array(							'U_VIEWFORUM'				=> (!$global_topic) ? append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $row['forum_id']) : '',							'U_VIEWPOST'				=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $row['forum_id'] . '&amp;p=' . $row['post_id']) . '#p' . $row['post_id'],							'U_VIEW_DETAILS'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=reports&amp;start=$start&amp;mode=report_details&amp;f={$row['forum_id']}&amp;r={$row['report_id']}"),							'POST_AUTHOR_FULL'		=> get_username_string('full', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),							'POST_AUTHOR_COLOUR'	=> get_username_string('colour', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),							'POST_AUTHOR'			=> get_username_string('username', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),							'U_POST_AUTHOR'			=> get_username_string('profile', $row['poster_id'], $row['username'], $row['user_colour'], $row['post_username']),							'REPORTER_FULL'			=> get_username_string('full', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),							'REPORTER_COLOUR'		=> get_username_string('colour', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),							'REPORTER'				=> get_username_string('username', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),							'U_REPORTER'			=> get_username_string('profile', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),							'FORUM_NAME'	=> (!$global_topic) ? $forum_data[$row['forum_id']]['forum_name'] : $user->lang['GLOBAL_ANNOUNCEMENT'],							'POST_ID'		=> $row['post_id'],							'POST_SUBJECT'	=> ($row['post_subject']) ? $row['post_subject'] : $user->lang['NO_SUBJECT'],							'POST_TIME'		=> $user->format_date($row['post_time']),							'REPORT_ID'		=> $row['report_id'],							'REPORT_TIME'	=> $user->format_date($row['report_time']),							'TOPIC_TITLE'	=> $row['topic_title'])						);					}					$db->sql_freeresult($result);					unset($report_ids, $row);				}				// Now display the page				$template->assign_vars(array(					'L_EXPLAIN'				=> ($mode == 'reports') ? $user->lang['MCP_REPORTS_OPEN_EXPLAIN'] : $user->lang['MCP_REPORTS_CLOSED_EXPLAIN'],					'L_TITLE'				=> ($mode == 'reports') ? $user->lang['MCP_REPORTS_OPEN'] : $user->lang['MCP_REPORTS_CLOSED'],					'L_ONLY_TOPIC'			=> ($topic_id) ? sprintf($user->lang['ONLY_TOPIC'], $topic_info['topic_title']) : '',					'S_MCP_ACTION'			=> $this->u_action,					'S_FORUM_OPTIONS'		=> $forum_options,					'S_CLOSED'				=> ($mode == 'reports_closed') ? true : false,					'PAGINATION'			=> generate_pagination($this->u_action . "&amp;f=$forum_id&amp;t=$topic_id&amp;st=$sort_days&amp;sk=$sort_key&amp;sd=$sort_dir", $total, $config['topics_per_page'], $start),					'PAGE_NUMBER'			=> on_page($total, $config['topics_per_page'], $start),					'TOPIC_ID'				=> $topic_id,					'TOTAL'					=> $total,					'TOTAL_REPORTS'			=> ($total == 1) ? $user->lang['LIST_REPORT'] : sprintf($user->lang['LIST_REPORTS'], $total),					)				);				$this->tpl_name = 'mcp_reports';			break;		}	}}/*** Closes a report*/function close_report($report_id_list, $mode, $action, $pm = false){	global $db, $template, $user, $config, $auth;	global $phpEx, $phpbb_root_path;	$pm_where = ($pm) ? ' AND r.post_id = 0 ' : ' AND r.pm_id = 0 ';	$id_column = ($pm) ? 'pm_id' : 'post_id';	$module = ($pm) ? 'pm_reports' : 'reports';	$pm_prefix = ($pm) ? 'PM_' : '';	$sql = "SELECT r.$id_column		FROM " . REPORTS_TABLE . ' r		WHERE ' . $db->sql_in_set('r.report_id', $report_id_list) . $pm_where;	$result = $db->sql_query($sql);	$post_id_list = array();	while ($row = $db->sql_fetchrow($result))	{		$post_id_list[] = $row[$id_column];	}	$post_id_list = array_unique($post_id_list);	if ($pm)	{		if (!$auth->acl_getf_global('m_report'))		{			trigger_error('NOT_AUTHORISED');		}	}	else	{		if (!check_ids($post_id_list, POSTS_TABLE, 'post_id', array('m_report')))		{			trigger_error('NOT_AUTHORISED');		}	}	if ($action == 'delete' && strpos($user->data['session_page'], 'mode=report_details') !== false)	{		$redirect = request_var('redirect', build_url(array('mode', 'r', 'quickmod')) . '&amp;mode=reports');	}	elseif ($action == 'delete' && strpos($user->data['session_page'], 'mode=pm_report_details') !== false)	{		$redirect = request_var('redirect', build_url(array('mode', 'r', 'quickmod')) . '&amp;mode=pm_reports');	}	else if ($action == 'close' && !request_var('r', 0))	{		$redirect = request_var('redirect', build_url(array('mode', 'p', 'quickmod')) . '&amp;mode=' . $module);	}	else	{		$redirect = request_var('redirect', build_url(array('quickmod')));	}	$success_msg = '';	$forum_ids = array();	$topic_ids = array();	$s_hidden_fields = build_hidden_fields(array(		'i'					=> $module,		'mode'				=> $mode,		'report_id_list'	=> $report_id_list,		'action'			=> $action,		'redirect'			=> $redirect)	);	if (confirm_box(true))	{		$post_info = ($pm) ? get_pm_data($post_id_list) : get_post_data($post_id_list, 'm_report');		$sql = "SELECT r.report_id, r.$id_column, r.report_closed, r.user_id, r.user_notify, u.username, u.username_clean, u.user_email, u.user_jabber, u.user_lang, u.user_notify_type			FROM " . REPORTS_TABLE . ' r, ' . USERS_TABLE . ' u			WHERE ' . $db->sql_in_set('r.report_id', $report_id_list) . '				' . (($action == 'close') ? 'AND r.report_closed = 0' : '') . '				AND r.user_id = u.user_id' . $pm_where;		$result = $db->sql_query($sql);		$reports = $close_report_posts = $close_report_topics = $notify_reporters = $report_id_list = array();		while ($report = $db->sql_fetchrow($result))		{			$reports[$report['report_id']] = $report;			$report_id_list[] = $report['report_id'];			if (!$report['report_closed'])			{				$close_report_posts[] = $report[$id_column];				if (!$pm)				{					$close_report_topics[] = $post_info[$report['post_id']]['topic_id'];				}			}			if ($report['user_notify'] && !$report['report_closed'])			{				$notify_reporters[$report['report_id']] = &$reports[$report['report_id']];			}		}		$db->sql_freeresult($result);		if (sizeof($reports))		{			$close_report_posts = array_unique($close_report_posts);			$close_report_topics = array_unique($close_report_topics);			if (!$pm && sizeof($close_report_posts))			{				// Get a list of topics that still contain reported posts				$sql = 'SELECT DISTINCT topic_id					FROM ' . POSTS_TABLE . '					WHERE ' . $db->sql_in_set('topic_id', $close_report_topics) . '						AND post_reported = 1						AND ' . $db->sql_in_set('post_id', $close_report_posts, true);				$result = $db->sql_query($sql);				$keep_report_topics = array();				while ($row = $db->sql_fetchrow($result))				{					$keep_report_topics[] = $row['topic_id'];				}				$db->sql_freeresult($result);				$close_report_topics = array_diff($close_report_topics, $keep_report_topics);				unset($keep_report_topics);			}			$db->sql_transaction('begin');			if ($action == 'close')			{				$sql = 'UPDATE ' . REPORTS_TABLE . '					SET report_closed = 1					WHERE ' . $db->sql_in_set('report_id', $report_id_list);			}			else			{				$sql = 'DELETE FROM ' . REPORTS_TABLE . '					WHERE ' . $db->sql_in_set('report_id', $report_id_list);			}			$db->sql_query($sql);			if (sizeof($close_report_posts))			{				if ($pm)				{					$sql = 'UPDATE ' . PRIVMSGS_TABLE . '						SET message_reported = 0						WHERE ' . $db->sql_in_set('msg_id', $close_report_posts);					$db->sql_query($sql);					if ($action == 'delete')					{						delete_pm(ANONYMOUS, $close_report_posts, PRIVMSGS_INBOX);					}				}				else				{					$sql = 'UPDATE ' . POSTS_TABLE . '						SET post_reported = 0						WHERE ' . $db->sql_in_set('post_id', $close_report_posts);					$db->sql_query($sql);					if (sizeof($close_report_topics))					{						$sql = 'UPDATE ' . TOPICS_TABLE . '							SET topic_reported = 0							WHERE ' . $db->sql_in_set('topic_id', $close_report_topics) . '								OR ' . $db->sql_in_set('topic_moved_id', $close_report_topics);						$db->sql_query($sql);					}				}			}			$db->sql_transaction('commit');		}		unset($close_report_posts, $close_report_topics);		foreach ($reports as $report)		{			if ($pm)			{				add_log('mod', 0, 0, 'LOG_PM_REPORT_' .  strtoupper($action) . 'D', $post_info[$report['pm_id']]['message_subject']);			}			else			{				add_log('mod', $post_info[$report['post_id']]['forum_id'], $post_info[$report['post_id']]['topic_id'], 'LOG_REPORT_' .  strtoupper($action) . 'D', $post_info[$report['post_id']]['post_subject']);			}		}		$messenger = new messenger();		// Notify reporters		if (sizeof($notify_reporters))		{			foreach ($notify_reporters as $report_id => $reporter)			{				if ($reporter['user_id'] == ANONYMOUS)				{					continue;				}				$post_id = $reporter[$id_column];				$messenger->template((($pm) ? 'pm_report_' : 'report_') . $action . 'd', $reporter['user_lang']);				$messenger->to($reporter['user_email'], $reporter['username']);				$messenger->im($reporter['user_jabber'], $reporter['username']);				if ($pm)				{					$messenger->assign_vars(array(						'USERNAME'		=> htmlspecialchars_decode($reporter['username']),						'CLOSER_NAME'	=> htmlspecialchars_decode($user->data['username']),						'PM_SUBJECT'	=> htmlspecialchars_decode(censor_text($post_info[$post_id]['message_subject'])),					));				}				else				{					$messenger->assign_vars(array(						'USERNAME'		=> htmlspecialchars_decode($reporter['username']),						'CLOSER_NAME'	=> htmlspecialchars_decode($user->data['username']),						'POST_SUBJECT'	=> htmlspecialchars_decode(censor_text($post_info[$post_id]['post_subject'])),						'TOPIC_TITLE'	=> htmlspecialchars_decode(censor_text($post_info[$post_id]['topic_title'])))					);				}				$messenger->send($reporter['user_notify_type']);			}		}		if (!$pm)		{			foreach ($post_info as $post)			{				$forum_ids[$post['forum_id']] = $post['forum_id'];				$topic_ids[$post['topic_id']] = $post['topic_id'];			}		}		unset($notify_reporters, $post_info, $reports);		$messenger->save_queue();		$success_msg = (sizeof($report_id_list) == 1) ? "{$pm_prefix}REPORT_" . strtoupper($action) . 'D_SUCCESS' : "{$pm_prefix}REPORTS_" . strtoupper($action) . 'D_SUCCESS';	}	else	{		confirm_box(false, $user->lang[strtoupper($action) . "_{$pm_prefix}REPORT" . ((sizeof($report_id_list) == 1) ? '' : 'S') . '_CONFIRM'], $s_hidden_fields);	}	$redirect = request_var('redirect', "index.$phpEx");	$redirect = reapply_sid($redirect);	if (!$success_msg)	{		redirect($redirect);	}	else	{		meta_refresh(3, $redirect);		$return_forum = '';		$return_topic = '';		if (!$pm)		{			if (sizeof($forum_ids) === 1)			{				$return_forum = sprintf($user->lang['RETURN_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . current($forum_ids)) . '">', '</a>') . '<br /><br />';			}			if (sizeof($topic_ids) === 1)			{				$return_topic = sprintf($user->lang['RETURN_TOPIC'], '<a href="' . append_sid("{$phpbb_root_path}viewtopic.$phpEx", 't=' . current($topic_ids) . '&amp;f=' . current($forum_ids)) . '">', '</a>') . '<br /><br />';			}		}		trigger_error($user->lang[$success_msg] . '<br /><br />' . $return_forum . $return_topic . sprintf($user->lang['RETURN_PAGE'], "<a href=\"$redirect\">", '</a>'));	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** mcp_reports* Handling the reports queue* @package mcp*/class mcp_pm_reports{	var $p_master;	var $u_action;	function mcp_pm_reports(&$p_master)	{		$this->p_master = &$p_master;	}	function main($id, $mode)	{		global $auth, $db, $user, $template, $cache;		global $config, $phpbb_root_path, $phpEx, $action;		include_once($phpbb_root_path . 'includes/functions_posting.' . $phpEx);		include_once($phpbb_root_path . 'includes/functions_privmsgs.' . $phpEx);		$start = request_var('start', 0);		$this->page_title = 'MCP_PM_REPORTS';		switch ($action)		{			case 'close':			case 'delete':				include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);				$report_id_list = request_var('report_id_list', array(0));				if (!sizeof($report_id_list))				{					trigger_error('NO_REPORT_SELECTED');				}				if (!function_exists('close_report'))				{					include($phpbb_root_path . 'includes/mcp/mcp_reports.' . $phpEx);				}				close_report($report_id_list, $mode, $action, true);			break;		}		switch ($mode)		{			case 'pm_report_details':				$user->add_lang(array('posting', 'viewforum', 'viewtopic', 'ucp'));				$report_id = request_var('r', 0);				$sql = 'SELECT r.pm_id, r.user_id, r.report_id, r.report_closed, report_time, r.report_text, rr.reason_title, rr.reason_description, u.username, u.username_clean, u.user_colour					FROM ' . REPORTS_TABLE . ' r, ' . REPORTS_REASONS_TABLE . ' rr, ' . USERS_TABLE . ' u					WHERE r.report_id = ' . $report_id . '						AND rr.reason_id = r.reason_id						AND r.user_id = u.user_id						AND r.post_id = 0					ORDER BY report_closed ASC';				$result = $db->sql_query_limit($sql, 1);				$report = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$report_id || !$report)				{					trigger_error('NO_REPORT');				}				$pm_id = $report['pm_id'];				$report_id = $report['report_id'];				$pm_info = get_pm_data(array($pm_id));				if (!sizeof($pm_info))				{					trigger_error('NO_REPORT_SELECTED');				}				$pm_info = $pm_info[$pm_id];				write_pm_addresses(array('to' => $pm_info['to_address'], 'bcc' => $pm_info['bcc_address']), (int) $pm_info['author_id']);				$reason = array('title' => $report['reason_title'], 'description' => $report['reason_description']);				if (isset($user->lang['report_reasons']['TITLE'][strtoupper($reason['title'])]) && isset($user->lang['report_reasons']['DESCRIPTION'][strtoupper($reason['title'])]))				{					$reason['description'] = $user->lang['report_reasons']['DESCRIPTION'][strtoupper($reason['title'])];					$reason['title'] = $user->lang['report_reasons']['TITLE'][strtoupper($reason['title'])];				}				// Process message, leave it uncensored				$message = $pm_info['message_text'];				if ($pm_info['bbcode_bitfield'])				{					include_once($phpbb_root_path . 'includes/bbcode.' . $phpEx);					$bbcode = new bbcode($pm_info['bbcode_bitfield']);					$bbcode->bbcode_second_pass($message, $pm_info['bbcode_uid'], $pm_info['bbcode_bitfield']);				}				$message = bbcode_nl2br($message);				$message = smiley_text($message);				if ($pm_info['message_attachment'] && $auth->acl_get('u_pm_download'))				{					$sql = 'SELECT *						FROM ' . ATTACHMENTS_TABLE . '						WHERE post_msg_id = ' . $pm_id . '							AND in_message = 1						ORDER BY filetime DESC';					$result = $db->sql_query($sql);					while ($row = $db->sql_fetchrow($result))					{						$attachments[] = $row;					}					$db->sql_freeresult($result);					if (sizeof($attachments))					{						$update_count = array();						parse_attachments(0, $message, $attachments, $update_count);					}					// Display not already displayed Attachments for this post, we already parsed them. ;)					if (!empty($attachments))					{						$template->assign_var('S_HAS_ATTACHMENTS', true);						foreach ($attachments as $attachment)						{							$template->assign_block_vars('attachment', array(								'DISPLAY_ATTACHMENT'	=> $attachment)							);						}					}				}				$template->assign_vars(array(					'S_MCP_REPORT'			=> true,					'S_PM'					=> true,					'S_CLOSE_ACTION'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=pm_reports&amp;mode=pm_report_details&amp;r=' . $report_id),					'S_CAN_VIEWIP'			=> $auth->acl_getf_global('m_info'),					'S_POST_REPORTED'		=> $pm_info['message_reported'],					'S_USER_NOTES'			=> true,					'U_MCP_REPORT'				=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=pm_reports&amp;mode=pm_report_details&amp;r=' . $report_id),					'U_MCP_REPORTER_NOTES'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $report['user_id']),					'U_MCP_USER_NOTES'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=notes&amp;mode=user_notes&amp;u=' . $pm_info['author_id']),					'U_MCP_WARN_REPORTER'		=> ($auth->acl_get('m_warn')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=warn&amp;mode=warn_user&amp;u=' . $report['user_id']) : '',					'U_MCP_WARN_USER'			=> ($auth->acl_get('m_warn')) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=warn&amp;mode=warn_user&amp;u=' . $pm_info['author_id']) : '',										'EDIT_IMG'				=> $user->img('icon_post_edit', $user->lang['EDIT_POST']),					'MINI_POST_IMG'			=> $user->img('icon_post_target', 'POST'),					'RETURN_REPORTS'			=> sprintf($user->lang['RETURN_REPORTS'], '<a href="' . append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=pm_reports' . (($pm_info['message_reported']) ? '&amp;mode=pm_reports' : '&amp;mode=pm_reports_closed') . '&amp;start=' . $start) . '">', '</a>'),					'REPORTED_IMG'				=> $user->img('icon_topic_reported', $user->lang['POST_REPORTED']),					'REPORT_DATE'				=> $user->format_date($report['report_time']),					'REPORT_ID'					=> $report_id,					'REPORT_REASON_TITLE'		=> $reason['title'],					'REPORT_REASON_DESCRIPTION'	=> $reason['description'],					'REPORT_TEXT'				=> $report['report_text'],					'POST_AUTHOR_FULL'		=> get_username_string('full', $pm_info['author_id'], $pm_info['username'], $pm_info['user_colour']),					'POST_AUTHOR_COLOUR'	=> get_username_string('colour', $pm_info['author_id'], $pm_info['username'], $pm_info['user_colour']),					'POST_AUTHOR'			=> get_username_string('username', $pm_info['author_id'], $pm_info['username'], $pm_info['user_colour']),					'U_POST_AUTHOR'			=> get_username_string('profile', $pm_info['author_id'], $pm_info['username'], $pm_info['user_colour']),					'REPORTER_FULL'				=> get_username_string('full', $report['user_id'], $report['username'], $report['user_colour']),					'REPORTER_COLOUR'			=> get_username_string('colour', $report['user_id'], $report['username'], $report['user_colour']),					'REPORTER_NAME'				=> get_username_string('username', $report['user_id'], $report['username'], $report['user_colour']),					'U_VIEW_REPORTER_PROFILE'	=> get_username_string('profile', $report['user_id'], $report['username'], $report['user_colour']),					'POST_PREVIEW'			=> $message,					'POST_SUBJECT'			=> ($pm_info['message_subject']) ? $pm_info['message_subject'] : $user->lang['NO_SUBJECT'],					'POST_DATE'				=> $user->format_date($pm_info['message_time']),					'POST_IP'				=> $pm_info['author_ip'],					'POST_IPADDR'			=> ($auth->acl_getf_global('m_info') && request_var('lookup', '')) ? @gethostbyaddr($pm_info['author_ip']) : '',					'POST_ID'				=> $pm_info['msg_id'],					'U_LOOKUP_IP'			=> ($auth->acl_getf_global('m_info')) ? $this->u_action . '&amp;r=' . $report_id . '&amp;pm=' . $pm_id . '&amp;lookup=' . $pm_info['author_ip'] . '#ip' : '',				));				$this->tpl_name = 'mcp_post';			break;			case 'pm_reports':			case 'pm_reports_closed':				$user->add_lang(array('ucp'));				$sort_days = $total = 0;				$sort_key = $sort_dir = '';				$sort_by_sql = $sort_order_sql = array();				mcp_sorting($mode, $sort_days, $sort_key, $sort_dir, $sort_by_sql, $sort_order_sql, $total);				$limit_time_sql = ($sort_days) ? 'AND r.report_time >= ' . (time() - ($sort_days * 86400)) : '';				if ($mode == 'pm_reports')				{					$report_state = 'p.message_reported = 1 AND r.report_closed = 0';				}				else				{					$report_state = 'r.report_closed = 1';				}				$sql = 'SELECT r.report_id					FROM ' . PRIVMSGS_TABLE . ' p, ' . REPORTS_TABLE . ' r ' . (($sort_order_sql[0] == 'u') ? ', ' . USERS_TABLE . ' u' : '') . (($sort_order_sql[0] == 'r') ? ', ' . USERS_TABLE . ' ru' : '') . "					WHERE $report_state						AND r.pm_id = p.msg_id						" . (($sort_order_sql[0] == 'u') ? 'AND u.user_id = p.author_id' : '') . '						' . (($sort_order_sql[0] == 'r') ? 'AND ru.user_id = r.user_id' : '') . "						AND r.post_id = 0						$limit_time_sql					ORDER BY $sort_order_sql";				$result = $db->sql_query_limit($sql, $config['topics_per_page'], $start);				$i = 0;				$report_ids = array();				while ($row = $db->sql_fetchrow($result))				{					$report_ids[] = $row['report_id'];					$row_num[$row['report_id']] = $i++;				}				$db->sql_freeresult($result);				if (sizeof($report_ids))				{					$sql = 'SELECT p.*, u.username, u.username_clean, u.user_colour, r.user_id as reporter_id, ru.username as reporter_name, ru.user_colour as reporter_colour, r.report_time, r.report_id						FROM ' . REPORTS_TABLE . ' r, ' . PRIVMSGS_TABLE . ' p, ' . USERS_TABLE . ' u, ' . USERS_TABLE . ' ru						WHERE ' . $db->sql_in_set('r.report_id', $report_ids) . "							AND r.pm_id = p.msg_id							AND p.author_id = u.user_id							AND ru.user_id = r.user_id						ORDER BY $sort_order_sql";					$result = $db->sql_query($sql);					$pm_list = $pm_by_id = array();					while ($row = $db->sql_fetchrow($result))					{						$pm_by_id[(int) $row['msg_id']] = $row;						$pm_list[] = (int) $row['msg_id'];					}					$db->sql_freeresult($result);					if (sizeof($pm_list))					{						$address_list = get_recipient_strings($pm_by_id);						foreach ($pm_list as $message_id)						{							$row = $pm_by_id[$message_id];							$template->assign_block_vars('postrow', array(								'U_VIEW_DETAILS'			=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=pm_reports&amp;mode=pm_report_details&amp;r={$row['report_id']}"),								'PM_AUTHOR_FULL'		=> get_username_string('full', $row['author_id'], $row['username'], $row['user_colour']),								'PM_AUTHOR_COLOUR'		=> get_username_string('colour', $row['author_id'], $row['username'], $row['user_colour']),								'PM_AUTHOR'				=> get_username_string('username', $row['author_id'], $row['username'], $row['user_colour']),								'U_PM_AUTHOR'			=> get_username_string('profile', $row['author_id'], $row['username'], $row['user_colour']),								'REPORTER_FULL'			=> get_username_string('full', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),								'REPORTER_COLOUR'		=> get_username_string('colour', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),								'REPORTER'				=> get_username_string('username', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),								'U_REPORTER'			=> get_username_string('profile', $row['reporter_id'], $row['reporter_name'], $row['reporter_colour']),								'PM_SUBJECT'			=> ($row['message_subject']) ? $row['message_subject'] : $user->lang['NO_SUBJECT'],								'PM_TIME'				=> $user->format_date($row['message_time']),								'REPORT_ID'				=> $row['report_id'],								'REPORT_TIME'			=> $user->format_date($row['report_time']),								'RECIPIENTS'			=> implode(', ', $address_list[$row['msg_id']]),							));						}					}				}				// Now display the page				$template->assign_vars(array(					'L_EXPLAIN'				=> ($mode == 'pm_reports') ? $user->lang['MCP_PM_REPORTS_OPEN_EXPLAIN'] : $user->lang['MCP_PM_REPORTS_CLOSED_EXPLAIN'],					'L_TITLE'				=> ($mode == 'pm_reports') ? $user->lang['MCP_PM_REPORTS_OPEN'] : $user->lang['MCP_PM_REPORTS_CLOSED'],										'S_PM'					=> true,					'S_MCP_ACTION'			=> $this->u_action,					'S_CLOSED'				=> ($mode == 'pm_reports_closed') ? true : false,					'PAGINATION'			=> generate_pagination($this->u_action . "&amp;st=$sort_days&amp;sk=$sort_key&amp;sd=$sort_dir", $total, $config['topics_per_page'], $start),					'PAGE_NUMBER'			=> on_page($total, $config['topics_per_page'], $start),					'TOTAL'					=> $total,					'TOTAL_REPORTS'			=> ($total == 1) ? $user->lang['LIST_REPORT'] : sprintf($user->lang['LIST_REPORTS'], $total),										)				);				$this->tpl_name = 'mcp_reports';			break;		}	}}?>
<?php/**** search [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ALL_AVAILABLE'			=> 'All available',	'ALL_RESULTS'			=> 'All results',	'DISPLAY_RESULTS'		=> 'Display results as',	'FOUND_SEARCH_MATCH'		=> 'Search found %d match',	'FOUND_SEARCH_MATCHES'		=> 'Search found %d matches',	'FOUND_MORE_SEARCH_MATCHES'	=> 'Search found more than %d matches',	'GLOBAL'				=> 'Global announcement',	'IGNORED_TERMS'			=> 'ignored',	'IGNORED_TERMS_EXPLAIN'	=> 'The following words in your search query were ignored because they are too common words: <strong>%s</strong>.',	'JUMP_TO_POST'			=> 'Jump to post',	'LOGIN_EXPLAIN_EGOSEARCH'	=> 'The board requires you to be registered and logged in to view your own posts.',	'LOGIN_EXPLAIN_UNREADSEARCH'=> 'The board requires you to be registered and logged in to view your unread posts.',	'LOGIN_EXPLAIN_NEWPOSTS'	=> 'The board requires you to be registered and logged in to view new posts since your last visit.',	'MAX_NUM_SEARCH_KEYWORDS_REFINE'	=> 'You specified too many words to search for. Please do not enter more than %1$d words.',	'NO_KEYWORDS'			=> 'You must specify at least one word to search for. Each word must consist of at least %d characters and must not contain more than %d characters excluding wildcards.',	'NO_RECENT_SEARCHES'	=> 'No searches have been carried out recently.',	'NO_SEARCH'				=> 'Sorry but you are not permitted to use the search system.',	'NO_SEARCH_RESULTS'		=> 'No suitable matches were found.',	'NO_SEARCH_TIME'		=> 'Sorry but you cannot use search at this time. Please try again in a few minutes.',	'NO_SEARCH_UNREADS'		=> 'Sorry but searching for unread posts has been disabled on this board.',	'WORD_IN_NO_POST'		=> 'No posts were found because the word <strong>%s</strong> is not contained in any post.',	'WORDS_IN_NO_POST'		=> 'No posts were found because the words <strong>%s</strong> are not contained in any post.',	'POST_CHARACTERS'		=> 'characters of posts',	'RECENT_SEARCHES'		=> 'Recent searches',	'RESULT_DAYS'			=> 'Limit results to previous',	'RESULT_SORT'			=> 'Sort results by',	'RETURN_FIRST'			=> 'Return first',	'RETURN_TO_SEARCH_ADV'	=> 'Return to advanced search',	'SEARCHED_FOR'				=> 'Search term used',	'SEARCHED_TOPIC'			=> 'Searched topic',	'SEARCH_ALL_TERMS'			=> 'Search for all terms or use query as entered',	'SEARCH_ANY_TERMS'			=> 'Search for any terms',	'SEARCH_AUTHOR'				=> 'Search for author',	'SEARCH_AUTHOR_EXPLAIN'		=> 'Use * as a wildcard for partial matches.',	'SEARCH_FIRST_POST'			=> 'First post of topics only',	'SEARCH_FORUMS'				=> 'Search in forums',	'SEARCH_FORUMS_EXPLAIN'		=> 'Select the forum or forums you wish to search in. Subforums are searched automatically if you do not disable search subforums below.',	'SEARCH_IN_RESULTS'			=> 'Search these results',	'SEARCH_KEYWORDS_EXPLAIN'	=> 'Place <strong>+</strong> in front of a word which must be found and <strong>-</strong> in front of a word which must not be found. Put a list of words separated by <strong>|</strong> into brackets if only one of the words must be found. Use * as a wildcard for partial matches.',	'SEARCH_MSG_ONLY'			=> 'Message text only',	'SEARCH_OPTIONS'			=> 'Search options',	'SEARCH_QUERY'				=> 'Search query',	'SEARCH_SUBFORUMS'			=> 'Search subforums',	'SEARCH_TITLE_MSG'			=> 'Post subjects and message text',	'SEARCH_TITLE_ONLY'			=> 'Topic titles only',	'SEARCH_WITHIN'				=> 'Search within',	'SORT_ASCENDING'			=> 'Ascending',	'SORT_AUTHOR'				=> 'Author',	'SORT_DESCENDING'			=> 'Descending',	'SORT_FORUM'				=> 'Forum',	'SORT_POST_SUBJECT'			=> 'Post subject',	'SORT_TIME'					=> 'Post time',	'TOO_FEW_AUTHOR_CHARS'	=> 'You must specify at least %d characters of the authors name.',));?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_main_info{	function module()	{		return array(			'filename'	=> 'acp_main',			'title'		=> 'ACP_INDEX',			'version'	=> '1.0.0',			'modes'		=> array(				'main'		=> array('title' => 'ACP_INDEX', 'auth' => '', 'cat' => array('ACP_CAT_GENERAL')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** MCP Front Panel*/function mcp_front_view($id, $mode, $action){	global $phpEx, $phpbb_root_path, $config;	global $template, $db, $user, $auth, $module;	// Latest 5 unapproved	if ($module->loaded('queue'))	{		$forum_list = array_values(array_intersect(get_forum_list('f_read'), get_forum_list('m_approve')));		$post_list = array();		$forum_names = array();		$forum_id = request_var('f', 0);		$template->assign_var('S_SHOW_UNAPPROVED', (!empty($forum_list)) ? true : false);		if (!empty($forum_list))		{			$sql = 'SELECT COUNT(post_id) AS total				FROM ' . POSTS_TABLE . '				WHERE forum_id IN (0, ' . implode(', ', $forum_list) . ')					AND post_approved = 0';			$result = $db->sql_query($sql);			$total = (int) $db->sql_fetchfield('total');			$db->sql_freeresult($result);			if ($total)			{				$global_id = $forum_list[0];				$sql = 'SELECT forum_id, forum_name					FROM ' . FORUMS_TABLE . '					WHERE ' . $db->sql_in_set('forum_id', $forum_list);				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$forum_names[$row['forum_id']] = $row['forum_name'];				}				$db->sql_freeresult($result);				$sql = 'SELECT post_id					FROM ' . POSTS_TABLE . '					WHERE forum_id IN (0, ' . implode(', ', $forum_list) . ')						AND post_approved = 0					ORDER BY post_time DESC';				$result = $db->sql_query_limit($sql, 5);				while ($row = $db->sql_fetchrow($result))				{					$post_list[] = $row['post_id'];				}				$db->sql_freeresult($result);				if (empty($post_list))				{					$total = 0;				}			}			if ($total)			{				$sql = 'SELECT p.post_id, p.post_subject, p.post_time, p.poster_id, p.post_username, u.username, u.username_clean, u.user_colour, t.topic_id, t.topic_title, t.topic_first_post_id, p.forum_id					FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . ' t, ' . USERS_TABLE . ' u					WHERE ' . $db->sql_in_set('p.post_id', $post_list) . '						AND t.topic_id = p.topic_id						AND p.poster_id = u.user_id					ORDER BY p.post_time DESC';				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					$global_topic = ($row['forum_id']) ? false : true;					if ($global_topic)					{						$row['forum_id'] = $global_id;					}					$template->assign_block_vars('unapproved', array(						'U_POST_DETAILS'	=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue&amp;mode=approve_details&amp;f=' . $row['forum_id'] . '&amp;p=' . $row['post_id']),						'U_MCP_FORUM'		=> (!$global_topic) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main&amp;mode=forum_view&amp;f=' . $row['forum_id']) : '',						'U_MCP_TOPIC'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main&amp;mode=topic_view&amp;f=' . $row['forum_id'] . '&amp;t=' . $row['topic_id']),						'U_FORUM'			=> (!$global_topic) ? append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $row['forum_id']) : '',						'U_TOPIC'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $row['forum_id'] . '&amp;t=' . $row['topic_id']),						'AUTHOR_FULL'		=> get_username_string('full', $row['poster_id'], $row['username'], $row['user_colour']),						'AUTHOR'			=> get_username_string('username', $row['poster_id'], $row['username'], $row['user_colour']),						'AUTHOR_COLOUR'		=> get_username_string('colour', $row['poster_id'], $row['username'], $row['user_colour']),						'U_AUTHOR'			=> get_username_string('profile', $row['poster_id'], $row['username'], $row['user_colour']),						'FORUM_NAME'	=> (!$global_topic) ? $forum_names[$row['forum_id']] : $user->lang['GLOBAL_ANNOUNCEMENT'],						'POST_ID'		=> $row['post_id'],						'TOPIC_TITLE'	=> $row['topic_title'],						'SUBJECT'		=> ($row['post_subject']) ? $row['post_subject'] : $user->lang['NO_SUBJECT'],						'POST_TIME'		=> $user->format_date($row['post_time']))					);				}				$db->sql_freeresult($result);			}			$s_hidden_fields = build_hidden_fields(array(				'redirect'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main' . (($forum_id) ? '&amp;f=' . $forum_id : ''))			));			$template->assign_vars(array(				'S_HIDDEN_FIELDS'		=> $s_hidden_fields,				'S_MCP_QUEUE_ACTION'	=> append_sid("{$phpbb_root_path}mcp.$phpEx", "i=queue"),			));			if ($total == 0)			{				$template->assign_vars(array(					'L_UNAPPROVED_TOTAL'		=> $user->lang['UNAPPROVED_POSTS_ZERO_TOTAL'],					'S_HAS_UNAPPROVED_POSTS'	=> false)				);			}			else			{				$template->assign_vars(array(					'L_UNAPPROVED_TOTAL'		=> ($total == 1) ? $user->lang['UNAPPROVED_POST_TOTAL'] : sprintf($user->lang['UNAPPROVED_POSTS_TOTAL'], $total),					'S_HAS_UNAPPROVED_POSTS'	=> true)				);			}		}	}	// Latest 5 reported	if ($module->loaded('reports'))	{		$forum_list = array_values(array_intersect(get_forum_list('f_read'), get_forum_list('m_report')));		$template->assign_var('S_SHOW_REPORTS', (!empty($forum_list)) ? true : false);		if (!empty($forum_list))		{			$sql = 'SELECT COUNT(r.report_id) AS total				FROM ' . REPORTS_TABLE . ' r, ' . POSTS_TABLE . ' p				WHERE r.post_id = p.post_id					AND r.pm_id = 0					AND r.report_closed = 0					AND p.forum_id IN (0, ' . implode(', ', $forum_list) . ')';			$result = $db->sql_query($sql);			$total = (int) $db->sql_fetchfield('total');			$db->sql_freeresult($result);			if ($total)			{				$global_id = $forum_list[0];				$sql = $db->sql_build_query('SELECT', array(					'SELECT'	=> 'r.report_time, p.post_id, p.post_subject, p.post_time, u.username, u.username_clean, u.user_colour, u.user_id, u2.username as author_name, u2.username_clean as author_name_clean, u2.user_colour as author_colour, u2.user_id as author_id, t.topic_id, t.topic_title, f.forum_id, f.forum_name',					'FROM'		=> array(						REPORTS_TABLE			=> 'r',						REPORTS_REASONS_TABLE	=> 'rr',						TOPICS_TABLE			=> 't',						USERS_TABLE				=> array('u', 'u2'),						POSTS_TABLE				=> 'p'					),					'LEFT_JOIN'	=> array(						array(							'FROM'	=> array(FORUMS_TABLE => 'f'),							'ON'	=> 'f.forum_id = p.forum_id'						)					),					'WHERE'		=> 'r.post_id = p.post_id						AND r.pm_id = 0						AND r.report_closed = 0						AND r.reason_id = rr.reason_id						AND p.topic_id = t.topic_id						AND r.user_id = u.user_id						AND p.poster_id = u2.user_id						AND p.forum_id IN (0, ' . implode(', ', $forum_list) . ')',					'ORDER_BY'	=> 'p.post_time DESC'				));				$result = $db->sql_query_limit($sql, 5);				while ($row = $db->sql_fetchrow($result))				{					$global_topic = ($row['forum_id']) ? false : true;					if ($global_topic)					{						$row['forum_id'] = $global_id;					}					$template->assign_block_vars('report', array(						'U_POST_DETAILS'	=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'f=' . $row['forum_id'] . '&amp;p=' . $row['post_id'] . "&amp;i=reports&amp;mode=report_details"),						'U_MCP_FORUM'		=> (!$global_topic) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'f=' . $row['forum_id'] . "&amp;i=$id&amp;mode=forum_view") : '',						'U_MCP_TOPIC'		=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'f=' . $row['forum_id'] . '&amp;t=' . $row['topic_id'] . "&amp;i=$id&amp;mode=topic_view"),						'U_FORUM'			=> (!$global_topic) ? append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $row['forum_id']) : '',						'U_TOPIC'			=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $row['forum_id'] . '&amp;t=' . $row['topic_id']),						'REPORTER_FULL'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']),						'REPORTER'			=> get_username_string('username', $row['user_id'], $row['username'], $row['user_colour']),						'REPORTER_COLOUR'	=> get_username_string('colour', $row['user_id'], $row['username'], $row['user_colour']),						'U_REPORTER'		=> get_username_string('profile', $row['user_id'], $row['username'], $row['user_colour']),						'AUTHOR_FULL'		=> get_username_string('full', $row['author_id'], $row['author_name'], $row['author_colour']),						'AUTHOR'			=> get_username_string('username', $row['author_id'], $row['author_name'], $row['author_colour']),						'AUTHOR_COLOUR'		=> get_username_string('colour', $row['author_id'], $row['author_name'], $row['author_colour']),						'U_AUTHOR'			=> get_username_string('profile', $row['author_id'], $row['author_name'], $row['author_colour']),						'FORUM_NAME'	=> (!$global_topic) ? $row['forum_name'] : $user->lang['GLOBAL_ANNOUNCEMENT'],						'TOPIC_TITLE'	=> $row['topic_title'],						'SUBJECT'		=> ($row['post_subject']) ? $row['post_subject'] : $user->lang['NO_SUBJECT'],						'REPORT_TIME'	=> $user->format_date($row['report_time']),						'POST_TIME'		=> $user->format_date($row['post_time']),					));				}			}			if ($total == 0)			{				$template->assign_vars(array(					'L_REPORTS_TOTAL'	=>	$user->lang['REPORTS_ZERO_TOTAL'],					'S_HAS_REPORTS'		=>	false)				);			}			else			{				$template->assign_vars(array(					'L_REPORTS_TOTAL'	=> ($total == 1) ? $user->lang['REPORT_TOTAL'] : sprintf($user->lang['REPORTS_TOTAL'], $total),					'S_HAS_REPORTS'		=> true)				);			}		}	}	// Latest 5 reported PMs	if ($module->loaded('pm_reports') && $auth->acl_getf_global('m_report'))	{		$template->assign_var('S_SHOW_PM_REPORTS', true);		$user->add_lang(array('ucp'));		$sql = 'SELECT COUNT(r.report_id) AS total			FROM ' . REPORTS_TABLE . ' r, ' . PRIVMSGS_TABLE . ' p			WHERE r.post_id = 0				AND r.pm_id = p.msg_id				AND r.report_closed = 0';		$result = $db->sql_query($sql);		$total = (int) $db->sql_fetchfield('total');		$db->sql_freeresult($result);		if ($total)		{			include($phpbb_root_path . 'includes/functions_privmsgs.' . $phpEx);			$sql = $db->sql_build_query('SELECT', array(				'SELECT'	=> 'r.report_id, r.report_time, p.msg_id, p.message_subject, p.message_time, p.to_address, p.bcc_address, u.username, u.username_clean, u.user_colour, u.user_id, u2.username as author_name, u2.username_clean as author_name_clean, u2.user_colour as author_colour, u2.user_id as author_id',				'FROM'		=> array(					REPORTS_TABLE			=> 'r',					REPORTS_REASONS_TABLE	=> 'rr',					USERS_TABLE				=> array('u', 'u2'),					PRIVMSGS_TABLE				=> 'p'				),				'WHERE'		=> 'r.pm_id = p.msg_id					AND r.post_id = 0					AND r.report_closed = 0					AND r.reason_id = rr.reason_id					AND r.user_id = u.user_id					AND p.author_id = u2.user_id',				'ORDER_BY'	=> 'p.message_time DESC'			));			$result = $db->sql_query_limit($sql, 5);			$pm_by_id = $pm_list = array();			while ($row = $db->sql_fetchrow($result))			{				$pm_by_id[(int) $row['msg_id']] = $row;				$pm_list[] = (int) $row['msg_id'];			}			$address_list = get_recipient_strings($pm_by_id);			foreach ($pm_list as $message_id)			{				$row = $pm_by_id[$message_id];				$template->assign_block_vars('pm_report', array(					'U_PM_DETAILS'	=> append_sid("{$phpbb_root_path}mcp.$phpEx", 'r=' . $row['report_id'] . "&amp;i=pm_reports&amp;mode=pm_report_details"),					'REPORTER_FULL'		=> get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']),					'REPORTER'			=> get_username_string('username', $row['user_id'], $row['username'], $row['user_colour']),					'REPORTER_COLOUR'	=> get_username_string('colour', $row['user_id'], $row['username'], $row['user_colour']),					'U_REPORTER'		=> get_username_string('profile', $row['user_id'], $row['username'], $row['user_colour']),					'PM_AUTHOR_FULL'		=> get_username_string('full', $row['author_id'], $row['author_name'], $row['author_colour']),					'PM_AUTHOR'			=> get_username_string('username', $row['author_id'], $row['author_name'], $row['author_colour']),					'PM_AUTHOR_COLOUR'		=> get_username_string('colour', $row['author_id'], $row['author_name'], $row['author_colour']),					'U_PM_AUTHOR'			=> get_username_string('profile', $row['author_id'], $row['author_name'], $row['author_colour']),					'PM_SUBJECT'		=> $row['message_subject'],					'REPORT_TIME'		=> $user->format_date($row['report_time']),					'PM_TIME'			=> $user->format_date($row['message_time']),					'RECIPIENTS'		=> implode(', ', $address_list[$row['msg_id']]),				));			}		}		if ($total == 0)		{			$template->assign_vars(array(				'L_PM_REPORTS_TOTAL'	=>	$user->lang['PM_REPORTS_ZERO_TOTAL'],				'S_HAS_PM_REPORTS'		=>	false)			);		}		else		{			$template->assign_vars(array(				'L_PM_REPORTS_TOTAL'	=> ($total == 1) ? $user->lang['PM_REPORT_TOTAL'] : sprintf($user->lang['PM_REPORTS_TOTAL'], $total),				'S_HAS_PM_REPORTS'		=> true)			);		}	}	// Latest 5 logs	if ($module->loaded('logs'))	{		$forum_list = array_values(array_intersect(get_forum_list('f_read'), get_forum_list('m_')));		if (!empty($forum_list))		{			// Add forum_id 0 for global announcements			$forum_list[] = 0;			$log_count = false;			$log = array();			view_log('mod', $log, $log_count, 5, 0, $forum_list);			foreach ($log as $row)			{				$template->assign_block_vars('log', array(					'USERNAME'		=> $row['username_full'],					'IP'			=> $row['ip'],					'TIME'			=> $user->format_date($row['time']),					'ACTION'		=> $row['action'],					'U_VIEW_TOPIC'	=> (!empty($row['viewtopic'])) ? $row['viewtopic'] : '',					'U_VIEWLOGS'	=> (!empty($row['viewlogs'])) ? $row['viewlogs'] : '')				);			}		}		$template->assign_vars(array(			'S_SHOW_LOGS'	=> (!empty($forum_list)) ? true : false,			'S_HAS_LOGS'	=> (!empty($log)) ? true : false)		);	}	$template->assign_var('S_MCP_ACTION', append_sid("{$phpbb_root_path}mcp.$phpEx"));	make_jumpbox(append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=main&amp;mode=forum_view'), 0, false, 'm_', true);}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_attachments_info{	function module()	{		return array(			'filename'	=> 'acp_attachments',			'title'		=> 'ACP_ATTACHMENTS',			'version'	=> '1.0.0',			'modes'		=> array(				'attach'		=> array('title' => 'ACP_ATTACHMENT_SETTINGS', 'auth' => 'acl_a_attach', 'cat' => array('ACP_BOARD_CONFIGURATION', 'ACP_ATTACHMENTS')),				'extensions'	=> array('title' => 'ACP_MANAGE_EXTENSIONS', 'auth' => 'acl_a_attach', 'cat' => array('ACP_ATTACHMENTS')),				'ext_groups'	=> array('title' => 'ACP_EXTENSION_GROUPS', 'auth' => 'acl_a_attach', 'cat' => array('ACP_ATTACHMENTS')),				'orphan'		=> array('title' => 'ACP_ORPHAN_ATTACHMENTS', 'auth' => 'acl_a_attach', 'cat' => array('ACP_ATTACHMENTS'))			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2006, 2008 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Placeholder for autoload*/if (!class_exists('phpbb_default_captcha')){	include($phpbb_root_path . 'includes/captcha/plugins/captcha_abstract.' . $phpEx);}/*** @package VC*/class phpbb_captcha_gd extends phpbb_default_captcha{	var $captcha_vars = array(		'captcha_gd_x_grid'				=> 'CAPTCHA_GD_X_GRID',		'captcha_gd_y_grid'				=> 'CAPTCHA_GD_Y_GRID',		'captcha_gd_foreground_noise'	=> 'CAPTCHA_GD_FOREGROUND_NOISE',//		'captcha_gd'					=> 'CAPTCHA_GD_PREVIEWED',		'captcha_gd_wave'				=> 'CAPTCHA_GD_WAVE',		'captcha_gd_3d_noise'			=> 'CAPTCHA_GD_3D_NOISE',		'captcha_gd_fonts'				=> 'CAPTCHA_GD_FONTS',	);	function phpbb_captcha_gd()	{		global $phpbb_root_path, $phpEx;		if (!class_exists('captcha'))		{			include($phpbb_root_path . 'includes/captcha/captcha_gd.' . $phpEx);		}	}	function &get_instance()	{		$instance =& new phpbb_captcha_gd();		return $instance;	}	function is_available()	{		global $phpbb_root_path, $phpEx;		if (@extension_loaded('gd'))		{			return true;		}		if (!function_exists('can_load_dll'))		{			include($phpbb_root_path . 'includes/functions_install.' . $phpEx);		}		return can_load_dll('gd');	}	/**	*  API function	*/	function has_config()	{		return true;	}	function get_name()	{		return 'CAPTCHA_GD';	}	function get_class_name()	{		return 'phpbb_captcha_gd';	}	function acp_page($id, &$module)	{		global $db, $user, $auth, $template;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		$user->add_lang('acp/board');		$config_vars = array(			'enable_confirm'		=> 'REG_ENABLE',			'enable_post_confirm'	=> 'POST_ENABLE',			'confirm_refresh'		=> 'CONFIRM_REFRESH',			'captcha_gd'			=> 'CAPTCHA_GD',		);		$module->tpl_name = 'captcha_gd_acp';		$module->page_title = 'ACP_VC_SETTINGS';		$form_key = 'acp_captcha';		add_form_key($form_key);		$submit = request_var('submit', '');		if ($submit && check_form_key($form_key))		{			$captcha_vars = array_keys($this->captcha_vars);			foreach ($captcha_vars as $captcha_var)			{				$value = request_var($captcha_var, 0);				if ($value >= 0)				{					set_config($captcha_var, $value);				}			}			add_log('admin', 'LOG_CONFIG_VISUAL');			trigger_error($user->lang['CONFIG_UPDATED'] . adm_back_link($module->u_action));		}		else if ($submit)		{			trigger_error($user->lang['FORM_INVALID'] . adm_back_link($module->u_action));		}		else		{			foreach ($this->captcha_vars as $captcha_var => $template_var)			{				$var = (isset($_REQUEST[$captcha_var])) ? request_var($captcha_var, 0) : $config[$captcha_var];				$template->assign_var($template_var, $var);			}			$template->assign_vars(array(				'CAPTCHA_PREVIEW'	=> $this->get_demo_template($id),				'CAPTCHA_NAME'		=> $this->get_class_name(),				'U_ACTION'			=> $module->u_action,			));		}	}	function execute_demo()	{		global $config;		$config_old = $config;		foreach ($this->captcha_vars as $captcha_var => $template_var)		{				$config[$captcha_var] = request_var($captcha_var, (int) $config[$captcha_var]);		}		parent::execute_demo();		$config = $config_old;	}}?>
<?php/*** Apache auth plug-in for phpBB3** Authentication plug-ins is largely down to Sergey Kanareykin, our thanks to him.** @package login* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Checks whether the user is identified to apache* Only allow changing authentication to apache if the user is identified* Called in acp_board while setting authentication plugins** @return boolean|string false if the user is identified and else an error message*/function init_apache(){	global $user;	if (!isset($_SERVER['PHP_AUTH_USER']) || $user->data['username'] !== $_SERVER['PHP_AUTH_USER'])	{		return $user->lang['APACHE_SETUP_BEFORE_USE'];	}	return false;}/*** Login function*/function login_apache(&$username, &$password){	global $db;	// do not allow empty password	if (!$password)	{		return array(			'status'	=> LOGIN_ERROR_PASSWORD,			'error_msg'	=> 'NO_PASSWORD_SUPPLIED',			'user_row'	=> array('user_id' => ANONYMOUS),		);	}	if (!$username)	{		return array(			'status'	=> LOGIN_ERROR_USERNAME,			'error_msg'	=> 'LOGIN_ERROR_USERNAME',			'user_row'	=> array('user_id' => ANONYMOUS),		);	}	if (!isset($_SERVER['PHP_AUTH_USER']))	{		return array(			'status'		=> LOGIN_ERROR_EXTERNAL_AUTH,			'error_msg'		=> 'LOGIN_ERROR_EXTERNAL_AUTH_APACHE',			'user_row'		=> array('user_id' => ANONYMOUS),		);	}	$php_auth_user = $_SERVER['PHP_AUTH_USER'];	$php_auth_pw = $_SERVER['PHP_AUTH_PW'];	if (!empty($php_auth_user) && !empty($php_auth_pw))	{		if ($php_auth_user !== $username)		{			return array(				'status'	=> LOGIN_ERROR_USERNAME,				'error_msg'	=> 'LOGIN_ERROR_USERNAME',				'user_row'	=> array('user_id' => ANONYMOUS),			);		}		$sql = 'SELECT user_id, username, user_password, user_passchg, user_email, user_type			FROM ' . USERS_TABLE . "			WHERE username = '" . $db->sql_escape($php_auth_user) . "'";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			// User inactive...			if ($row['user_type'] == USER_INACTIVE || $row['user_type'] == USER_IGNORE)			{				return array(					'status'		=> LOGIN_ERROR_ACTIVE,					'error_msg'		=> 'ACTIVE_ERROR',					'user_row'		=> $row,				);			}			// Successful login...			return array(				'status'		=> LOGIN_SUCCESS,				'error_msg'		=> false,				'user_row'		=> $row,			);		}		// this is the user's first login so create an empty profile		return array(			'status'		=> LOGIN_SUCCESS_CREATE_PROFILE,			'error_msg'		=> false,			'user_row'		=> user_row_apache($php_auth_user, $php_auth_pw),		);	}	// Not logged into apache	return array(		'status'		=> LOGIN_ERROR_EXTERNAL_AUTH,		'error_msg'		=> 'LOGIN_ERROR_EXTERNAL_AUTH_APACHE',		'user_row'		=> array('user_id' => ANONYMOUS),	);}/*** Autologin function** @return array containing the user row or empty if no auto login should take place*/function autologin_apache(){	global $db;	if (!isset($_SERVER['PHP_AUTH_USER']))	{		return array();	}	$php_auth_user = $_SERVER['PHP_AUTH_USER'];	$php_auth_pw = $_SERVER['PHP_AUTH_PW'];	if (!empty($php_auth_user) && !empty($php_auth_pw))	{		set_var($php_auth_user, $php_auth_user, 'string', true);		set_var($php_auth_pw, $php_auth_pw, 'string', true);		$sql = 'SELECT *			FROM ' . USERS_TABLE . "			WHERE username = '" . $db->sql_escape($php_auth_user) . "'";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			return ($row['user_type'] == USER_INACTIVE || $row['user_type'] == USER_IGNORE) ? array() : $row;		}		if (!function_exists('user_add'))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		}		// create the user if he does not exist yet		user_add(user_row_apache($php_auth_user, $php_auth_pw));		$sql = 'SELECT *			FROM ' . USERS_TABLE . "			WHERE username_clean = '" . $db->sql_escape(utf8_clean_string($php_auth_user)) . "'";		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			return $row;		}	}	return array();}/*** This function generates an array which can be passed to the user_add function in order to create a user*/function user_row_apache($username, $password){	global $db, $config, $user;	// first retrieve default group id	$sql = 'SELECT group_id		FROM ' . GROUPS_TABLE . "		WHERE group_name = '" . $db->sql_escape('REGISTERED') . "'			AND group_type = " . GROUP_SPECIAL;	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$row)	{		trigger_error('NO_GROUP');	}	// generate user account data	return array(		'username'		=> $username,		'user_password'	=> phpbb_hash($password),		'user_email'	=> '',		'group_id'		=> (int) $row['group_id'],		'user_type'		=> USER_NORMAL,		'user_ip'		=> $user->ip,		'user_new'		=> ($config['new_member_post_limit']) ? 1 : 0,	);}/*** The session validation function checks whether the user is still logged in** @return boolean true if the given user is authenticated or false if the session should be closed*/function validate_session_apache(&$user){	// Check if PHP_AUTH_USER is set and handle this case	if (isset($_SERVER['PHP_AUTH_USER']))	{		$php_auth_user = '';		set_var($php_auth_user, $_SERVER['PHP_AUTH_USER'], 'string', true);		return ($php_auth_user === $user['username']) ? true : false;	}	// PHP_AUTH_USER is not set. A valid session is now determined by the user type (anonymous/bot or not)	if ($user['user_type'] == USER_IGNORE)	{		return true;	}	return false;}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);require($phpbb_root_path . 'includes/startup.' . $phpEx);require($phpbb_root_path . 'config.' . $phpEx);if (!defined('PHPBB_INSTALLED') || empty($dbms) || empty($acm_type)){	exit;}// Load Extensionsif (!empty($load_extensions) && function_exists('dl')){	$load_extensions = explode(',', $load_extensions);	foreach ($load_extensions as $extension)	{		@dl(trim($extension));	}}$id = (isset($_GET['id'])) ? intval($_GET['id']) : 0;// This is a simple script to grab and output the requested CSS data stored in the DB// We include a session_id check to try and limit 3rd party linking ... unless they// happen to have a current session it will output nothing. We will also cache the// resulting CSS data for five minutes ... anything to reduce the load on the SQL// server a littleif ($id){	// Include files	require($phpbb_root_path . 'includes/acm/acm_' . $acm_type . '.' . $phpEx);	require($phpbb_root_path . 'includes/cache.' . $phpEx);	require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);	require($phpbb_root_path . 'includes/constants.' . $phpEx);	require($phpbb_root_path . 'includes/functions.' . $phpEx);	$db = new $sql_db();	$cache = new cache();	// Connect to DB	if (!@$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, false))	{		exit;	}	unset($dbpasswd);	$config = $cache->obtain_config();	$user = false;	// try to get a session ID from REQUEST array	$sid = request_var('sid', '');	if (!$sid)	{		// if that failed, then look in the cookies		$sid = request_var($config['cookie_name'] . '_sid', '', false, true);	}	if (strspn($sid, 'abcdefABCDEF0123456789') !== strlen($sid))	{		$sid = '';	}	if ($sid)	{		$sql = 'SELECT u.user_id, u.user_lang			FROM ' . SESSIONS_TABLE . ' s, ' . USERS_TABLE . " u			WHERE s.session_id = '" . $db->sql_escape($sid) . "'				AND s.session_user_id = u.user_id";		$result = $db->sql_query($sql);		$user = $db->sql_fetchrow($result);		$db->sql_freeresult($result);	}	$recompile = $config['load_tplcompile'];	if (!$user)	{		$id			= ($id) ? $id : $config['default_style'];//		Commented out because calls do not always include the SID anymore//		$recompile	= false;		$user		= array('user_id' => ANONYMOUS);	}	$sql = 'SELECT s.style_id, c.theme_id, c.theme_data, c.theme_path, c.theme_name, c.theme_mtime, i.*, t.template_path		FROM ' . STYLES_TABLE . ' s, ' . STYLES_TEMPLATE_TABLE . ' t, ' . STYLES_THEME_TABLE . ' c, ' . STYLES_IMAGESET_TABLE . ' i		WHERE s.style_id = ' . $id . '			AND t.template_id = s.template_id			AND c.theme_id = s.theme_id			AND i.imageset_id = s.imageset_id';	$result = $db->sql_query($sql, 300);	$theme = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$theme)	{		exit;	}	if ($user['user_id'] == ANONYMOUS)	{		$user['user_lang'] = $config['default_lang'];	}	$user_image_lang = (file_exists($phpbb_root_path . 'styles/' . $theme['imageset_path'] . '/imageset/' . $user['user_lang'])) ? $user['user_lang'] : $config['default_lang'];	// Same query in session.php	$sql = 'SELECT *		FROM ' . STYLES_IMAGESET_DATA_TABLE . '		WHERE imageset_id = ' . $theme['imageset_id'] . "		AND image_filename <> ''		AND image_lang IN ('" . $db->sql_escape($user_image_lang) . "', '')";	$result = $db->sql_query($sql, 3600);	$img_array = array();	while ($row = $db->sql_fetchrow($result))	{		$img_array[$row['image_name']] = $row;	}	$db->sql_freeresult($result);	// gzip_compression	if ($config['gzip_compress'])	{		// IE6 is not able to compress the style (do not ask us why!)		$browser = (!empty($_SERVER['HTTP_USER_AGENT'])) ? strtolower(htmlspecialchars((string) $_SERVER['HTTP_USER_AGENT'])) : '';		if ($browser && strpos($browser, 'msie 6.0') === false && @extension_loaded('zlib') && !headers_sent())		{			ob_start('ob_gzhandler');		}	}	// Expire time of seven days if not recached	$expire_time = 7*86400;	$recache = false;	// Re-cache stylesheet data if necessary	if ($recompile || empty($theme['theme_data']))	{		$recache = (empty($theme['theme_data'])) ? true : false;		$update_time = time();		// We test for stylesheet.css because it is faster and most likely the only file changed on common themes		if (!$recache && $theme['theme_mtime'] < @filemtime("{$phpbb_root_path}styles/" . $theme['theme_path'] . '/theme/stylesheet.css'))		{			$recache = true;			$update_time = @filemtime("{$phpbb_root_path}styles/" . $theme['theme_path'] . '/theme/stylesheet.css');		}		else if (!$recache)		{			$last_change = $theme['theme_mtime'];			$dir = @opendir("{$phpbb_root_path}styles/{$theme['theme_path']}/theme");			if ($dir)			{				while (($entry = readdir($dir)) !== false)				{					if (substr(strrchr($entry, '.'), 1) == 'css' && $last_change < @filemtime("{$phpbb_root_path}styles/{$theme['theme_path']}/theme/{$entry}"))					{						$recache = true;						break;					}				}				closedir($dir);			}		}	}	if ($recache)	{		include_once($phpbb_root_path . 'includes/acp/acp_styles.' . $phpEx);		$theme['theme_data'] = acp_styles::db_theme_data($theme);		$theme['theme_mtime'] = $update_time;		// Save CSS contents		$sql_ary = array(			'theme_mtime'	=> $theme['theme_mtime'],			'theme_data'	=> $theme['theme_data']		);		$sql = 'UPDATE ' . STYLES_THEME_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "			WHERE theme_id = {$theme['theme_id']}";		$db->sql_query($sql);		$cache->destroy('sql', STYLES_THEME_TABLE);	}	// Only set the expire time if the theme changed data is older than 30 minutes - to cope with changes from the ACP	if ($recache || $theme['theme_mtime'] > (time() - 1800))	{		header('Expires: 0');	}	else	{		header('Expires: ' . gmdate('D, d M Y H:i:s \G\M\T', time() + $expire_time));	}	header('Content-type: text/css; charset=UTF-8');	// Parse Theme Data	$replace = array(		'{T_THEME_PATH}'			=> "{$phpbb_root_path}styles/" . $theme['theme_path'] . '/theme',		'{T_TEMPLATE_PATH}'			=> "{$phpbb_root_path}styles/" . $theme['template_path'] . '/template',		'{T_IMAGESET_PATH}'			=> "{$phpbb_root_path}styles/" . $theme['imageset_path'] . '/imageset',		'{T_IMAGESET_LANG_PATH}'	=> "{$phpbb_root_path}styles/" . $theme['imageset_path'] . '/imageset/' . $user_image_lang,		'{T_STYLESHEET_NAME}'		=> $theme['theme_name'],		'{S_USER_LANG}'				=> $user['user_lang']	);	$theme['theme_data'] = str_replace(array_keys($replace), array_values($replace), $theme['theme_data']);	$matches = array();	preg_match_all('#\{IMG_([A-Za-z0-9_]*?)_(WIDTH|HEIGHT|SRC)\}#', $theme['theme_data'], $matches);	$imgs = $find = $replace = array();	if (isset($matches[0]) && sizeof($matches[0]))	{		foreach ($matches[1] as $i => $img)		{			$img = strtolower($img);			$find[] = $matches[0][$i];			if (!isset($img_array[$img]))			{				$replace[] = '';				continue;			}			if (!isset($imgs[$img]))			{				$img_data = &$img_array[$img];				$imgsrc = ($img_data['image_lang'] ? $img_data['image_lang'] . '/' : '') . $img_data['image_filename'];				$imgs[$img] = array(					'src'		=> $phpbb_root_path . 'styles/' . $theme['imageset_path'] . '/imageset/' . $imgsrc,					'width'		=> $img_data['image_width'],					'height'	=> $img_data['image_height'],				);			}			switch ($matches[2][$i])			{				case 'SRC':					$replace[] = $imgs[$img]['src'];				break;				case 'WIDTH':					$replace[] = $imgs[$img]['width'];				break;				case 'HEIGHT':					$replace[] = $imgs[$img]['height'];				break;				default:					continue;			}		}		if (sizeof($find))		{			$theme['theme_data'] = str_replace($find, $replace, $theme['theme_data']);		}	}	echo $theme['theme_data'];	if (!empty($cache))	{		$cache->unload();	}	$db->sql_close();}exit;?>
<?php return array(''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'ue',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_email_info{	function module()	{		return array(			'filename'	=> 'acp_email',			'title'		=> 'ACP_MASS_EMAIL',			'version'	=> '1.0.0',			'modes'		=> array(				'email'		=> array('title' => 'ACP_MASS_EMAIL', 'auth' => 'acl_a_email && cfg_email_enable', 'cat' => array('ACP_GENERAL_TASKS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/*** Rebuild BOTS** You should make a backup from your whole database. Things can and will go wrong. * This will only work if no BOTs were added.**/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.'.$phpEx);include($phpbb_root_path . '/includes/functions_user.'.$phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$bots = array(	'AdsBot [Google]'			=> array('AdsBot-Google', ''),	'Alexa [Bot]'				=> array('ia_archiver', ''),	'Alta Vista [Bot]'			=> array('Scooter/', ''),	'Ask Jeeves [Bot]'			=> array('Ask Jeeves', ''),	'Baidu [Spider]'			=> array('Baiduspider+(', ''),	'Exabot [Bot]'				=> array('Exabot/', ''),	'FAST Enterprise [Crawler]'	=> array('FAST Enterprise Crawler', ''),	'FAST WebCrawler [Crawler]'	=> array('FAST-WebCrawler/', ''),	'Francis [Bot]'				=> array('http://www.neomo.de/', ''),	'Gigabot [Bot]'				=> array('Gigabot/', ''),	'Google Adsense [Bot]'		=> array('Mediapartners-Google', ''),	'Google Desktop'			=> array('Google Desktop', ''),	'Google Feedfetcher'		=> array('Feedfetcher-Google', ''),	'Google [Bot]'				=> array('Googlebot', ''),	'Heise IT-Markt [Crawler]'	=> array('heise-IT-Markt-Crawler', ''),	'Heritrix [Crawler]'		=> array('heritrix/1.', ''),	'IBM Research [Bot]'		=> array('ibm.com/cs/crawler', ''),	'ICCrawler - ICjobs'		=> array('ICCrawler - ICjobs', ''),	'ichiro [Crawler]'			=> array('ichiro/2', ''),	'Majestic-12 [Bot]'			=> array('MJ12bot/', ''),	'Metager [Bot]'				=> array('MetagerBot/', ''),	'MSN NewsBlogs'				=> array('msnbot-NewsBlogs/', ''),	'MSN [Bot]'					=> array('msnbot/', ''),	'MSNbot Media'				=> array('msnbot-media/', ''),	'NG-Search [Bot]'			=> array('NG-Search/', ''),	'Nutch [Bot]'				=> array('http://lucene.apache.org/nutch/', ''),	'Nutch/CVS [Bot]'			=> array('NutchCVS/', ''),	'OmniExplorer [Bot]'		=> array('OmniExplorer_Bot/', ''),	'Online link [Validator]'	=> array('online link validator', ''),	'psbot [Picsearch]'			=> array('psbot/0', ''),	'Seekport [Bot]'			=> array('Seekbot/', ''),	'Sensis [Crawler]'			=> array('Sensis Web Crawler', ''),	'SEO Crawler'				=> array('SEO search Crawler/', ''),	'Seoma [Crawler]'			=> array('Seoma [SEO Crawler]', ''),	'SEOSearch [Crawler]'		=> array('SEOsearch/', ''),	'Snappy [Bot]'				=> array('Snappy/1.1 ( http://www.urltrends.com/ )', ''),	'Steeler [Crawler]'			=> array('http://www.tkl.iis.u-tokyo.ac.jp/~crawler/', ''),	'Synoo [Bot]'				=> array('SynooBot/', ''),	'Telekom [Bot]'				=> array('crawleradmin.t-info@telekom.de', ''),	'TurnitinBot [Bot]'			=> array('TurnitinBot/', ''),	'Voyager [Bot]'				=> array('voyager/1.0', ''),	'W3 [Sitesearch]'			=> array('W3 SiteSearch Crawler', ''),	'W3C [Linkcheck]'			=> array('W3C-checklink/', ''),	'W3C [Validator]'			=> array('W3C_*Validator', ''),	'WiseNut [Bot]'				=> array('http://www.WISEnutbot.com', ''),	'YaCy [Bot]'				=> array('yacybot', ''),	'Yahoo MMCrawler [Bot]'		=> array('Yahoo-MMCrawler/', ''),	'Yahoo Slurp [Bot]'			=> array('Yahoo! DE Slurp', ''),	'Yahoo [Bot]'				=> array('Yahoo! Slurp', ''),	'YahooSeeker [Bot]'			=> array('YahooSeeker/', ''),);	$bot_ids = array();user_get_id_name($bot_ids, array_keys($bots), USER_IGNORE);foreach($bot_ids as $bot){	user_delete('remove', $bot);}// Doneadd_bots($bots);echo 'done';/*** Add the search bots into the database* This code should be used in execute_last if the source database did not have bots* If you are converting bots this function should not be called* @todo We might want to look at sharing the bot list between the install code and this code for consistency*/function add_bots($bots){	global $db, $config;	$sql = 'SELECT group_id FROM ' . GROUPS_TABLE . " WHERE group_name = 'BOTS'";	$result = $db->sql_query($sql);	$group_id = (int) $db->sql_fetchfield('group_id', false, $result);	$db->sql_freeresult($result);	$db->sql_query('TRUNCATE TABLE ' . BOTS_TABLE);	if (!$group_id)	{		add_default_groups();		$sql = 'SELECT group_id FROM ' . GROUPS_TABLE . " WHERE group_name = 'BOTS'";		$result = $db->sql_query($sql);		$group_id = (int) $db->sql_fetchfield('group_id', false, $result);		$db->sql_freeresult($result);	}	foreach ($bots as $bot_name => $bot_ary)	{		$user_row = array(			'user_type'				=> USER_IGNORE,			'group_id'				=> $group_id,			'username'				=> $bot_name,			'user_regdate'			=> time(),			'user_password'			=> '',			'user_colour'			=> '9E8DA7',			'user_email'			=> '',			'user_lang'				=> $config['default_lang'],			'user_style'			=> 1,			'user_timezone'			=> 0,			'user_allow_massemail'	=> 0,		);		$user_id = user_add($user_row);		if ($user_id)		{			$sql = 'INSERT INTO ' . BOTS_TABLE . ' ' . $db->sql_build_array('INSERT', array(				'bot_active'	=> 1,				'bot_name'		=> $bot_name,				'user_id'		=> $user_id,				'bot_agent'		=> $bot_ary[0],				'bot_ip'		=> $bot_ary[1])			);			$db->sql_query($sql);		}	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_captcha_info{	function module()	{		return array(			'filename'	=> 'acp_captcha',			'title'		=> 'ACP_CAPTCHA',			'version'	=> '1.0.0',			'modes'		=> array(				'visual'		=> array('title' => 'ACP_VC_SETTINGS', 'auth' => 'acl_a_board', 'cat' => array('ACP_BOARD_CONFIGURATION')),				'img'			=> array('title' => 'ACP_VC_CAPTCHA_DISPLAY', 'auth' => 'acl_a_board', 'cat' => array('ACP_BOARD_CONFIGURATION'), 'display' => false)			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package VC* @version $Id$* @copyright (c) 2006, 2008 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}if (!class_exists('phpbb_default_captcha')){	// we need the classic captcha code for tracking solutions and attempts	include($phpbb_root_path . 'includes/captcha/plugins/captcha_abstract.' . $phpEx);}/*** @package VC*/class phpbb_recaptcha extends phpbb_default_captcha{	var $recaptcha_server = 'http://www.google.com/recaptcha/api';	var $recaptcha_server_secure = 'https://www.google.com/recaptcha/api'; // class constants :(	// We are opening a socket to port 80 of this host and send	// the POST request asking for verification to the path specified here.	var $recaptcha_verify_server = 'www.google.com';	var $recaptcha_verify_path = '/recaptcha/api/verify';	var $challenge;	var $response;	// PHP4 Constructor	function phpbb_recaptcha()	{		$this->recaptcha_server = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? $this->recaptcha_server_secure : $this->recaptcha_server;	}	function init($type)	{		global $config, $db, $user;		$user->add_lang('captcha_recaptcha');		parent::init($type);		$this->challenge = request_var('recaptcha_challenge_field', '');		$this->response = request_var('recaptcha_response_field', '');	}	function &get_instance()	{		$instance =& new phpbb_recaptcha();		return $instance;	}	function is_available()	{		global $config, $user;		$user->add_lang('captcha_recaptcha');		return (isset($config['recaptcha_pubkey']) && !empty($config['recaptcha_pubkey']));	}	/**	*  API function	*/	function has_config()	{		return true;	}	function get_name()	{		return 'CAPTCHA_RECAPTCHA';	}	function get_class_name()	{		return 'phpbb_recaptcha';	}	function acp_page($id, &$module)	{		global $config, $db, $template, $user;		$captcha_vars = array(			'recaptcha_pubkey'				=> 'RECAPTCHA_PUBKEY',			'recaptcha_privkey'				=> 'RECAPTCHA_PRIVKEY',		);		$module->tpl_name = 'captcha_recaptcha_acp';		$module->page_title = 'ACP_VC_SETTINGS';		$form_key = 'acp_captcha';		add_form_key($form_key);		$submit = request_var('submit', '');		if ($submit && check_form_key($form_key))		{			$captcha_vars = array_keys($captcha_vars);			foreach ($captcha_vars as $captcha_var)			{				$value = request_var($captcha_var, '');				if ($value)				{					set_config($captcha_var, $value);				}			}			add_log('admin', 'LOG_CONFIG_VISUAL');			trigger_error($user->lang['CONFIG_UPDATED'] . adm_back_link($module->u_action));		}		else if ($submit)		{			trigger_error($user->lang['FORM_INVALID'] . adm_back_link($module->u_action));		}		else		{			foreach ($captcha_vars as $captcha_var => $template_var)			{				$var = (isset($_REQUEST[$captcha_var])) ? request_var($captcha_var, '') : ((isset($config[$captcha_var])) ? $config[$captcha_var] : '');				$template->assign_var($template_var, $var);			}			$template->assign_vars(array(				'CAPTCHA_PREVIEW'	=> $this->get_demo_template($id),				'CAPTCHA_NAME'		=> $this->get_class_name(),				'U_ACTION'			=> $module->u_action,			));		}	}	// not needed	function execute_demo()	{	}	// not needed	function execute()	{	}	function get_template()	{		global $config, $user, $template;		if ($this->is_solved())		{			return false;		}		else		{			$explain = $user->lang(($this->type != CONFIRM_POST) ? 'CONFIRM_EXPLAIN' : 'POST_CONFIRM_EXPLAIN', '<a href="mailto:' . htmlspecialchars($config['board_contact']) . '">', '</a>');			$template->assign_vars(array(				'RECAPTCHA_SERVER'			=> $this->recaptcha_server,				'RECAPTCHA_PUBKEY'			=> isset($config['recaptcha_pubkey']) ? $config['recaptcha_pubkey'] : '',				'RECAPTCHA_ERRORGET'		=> '',				'S_RECAPTCHA_AVAILABLE'		=> $this->is_available(),				'S_CONFIRM_CODE'			=> true,				'S_TYPE'					=> $this->type,				'L_CONFIRM_EXPLAIN'			=> $explain,			));			return 'captcha_recaptcha.html';		}	}	function get_demo_template($id)	{		return $this->get_template();	}	function get_hidden_fields()	{		$hidden_fields = array();		// this is required for posting.php - otherwise we would forget about the captcha being already solved		if ($this->solved)		{			$hidden_fields['confirm_code'] = $this->code;		}		$hidden_fields['confirm_id'] = $this->confirm_id;		return $hidden_fields;	}	function uninstall()	{		$this->garbage_collect(0);	}	function install()	{		return;	}	function validate()	{		if (!parent::validate())		{			return false;		}		else		{			return $this->recaptcha_check_answer();		}	}// Code from here on is based on recaptchalib.php/* * This is a PHP library that handles calling reCAPTCHA. *	- Documentation and latest version *		  http://recaptcha.net/plugins/php/ *	- Get a reCAPTCHA API Key *		  http://recaptcha.net/api/getkey *	- Discussion group *		  http://groups.google.com/group/recaptcha * * Copyright (c) 2007 reCAPTCHA -- http://recaptcha.net * AUTHORS: *   Mike Crawford *   Ben Maurer * * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: * * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. */	/**	* Submits an HTTP POST to a reCAPTCHA server	* @param string $host	* @param string $path	* @param array $data	* @param int port	* @return array response	*/	function _recaptcha_http_post($host, $path, $data, $port = 80)	{		$req = $this->_recaptcha_qsencode ($data);		$http_request  = "POST $path HTTP/1.0\r\n";		$http_request .= "Host: $host\r\n";		$http_request .= "Content-Type: application/x-www-form-urlencoded;\r\n";		$http_request .= "Content-Length: " . strlen($req) . "\r\n";		$http_request .= "User-Agent: reCAPTCHA/PHP/phpBB\r\n";		$http_request .= "\r\n";		$http_request .= $req;		$response = '';		if (false == ($fs = @fsockopen($host, $port, $errno, $errstr, 10)))		{			trigger_error('Could not open socket', E_USER_ERROR);		}		fwrite($fs, $http_request);		while (!feof($fs))		{			// One TCP-IP packet			$response .= fgets($fs, 1160);		}		fclose($fs);		$response = explode("\r\n\r\n", $response, 2);		return $response;	}	/**	* Calls an HTTP POST function to verify if the user's guess was correct	* @param array $extra_params an array of extra variables to post to the server	* @return ReCaptchaResponse	*/	function recaptcha_check_answer($extra_params = array())	{		global $config, $user;		//discard spam submissions		if ($this->challenge == null || strlen($this->challenge) == 0 || $this->response == null || strlen($this->response) == 0)		{			return $user->lang['RECAPTCHA_INCORRECT'];		}		$response = $this->_recaptcha_http_post($this->recaptcha_verify_server, $this->recaptcha_verify_path,			array(				'privatekey'	=> $config['recaptcha_privkey'],				'remoteip'		=> $user->ip,				'challenge'		=> $this->challenge,				'response'		=> $this->response			) + $extra_params		);		$answers = explode("\n", $response[1]);		if (trim($answers[0]) === 'true')		{			$this->solved = true;			return false;		}		else		{			return $user->lang['RECAPTCHA_INCORRECT'];		}	}	/**	* Encodes the given data into a query string format	* @param $data - array of string elements to be encoded	* @return string - encoded request	*/	function _recaptcha_qsencode($data)	{		$req = '';		foreach ($data as $key => $value)		{			$req .= $key . '=' . urlencode(stripslashes($value)) . '&';		}		// Cut the last '&'		$req = substr($req, 0, strlen($req) - 1);		return $req;	}}?>
<?php//// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");//// Do not change anything below this line.//// Just a handy script to completely wipe out the contents of a // database.. Use with caution :)if(!isset($submit)){	?>	<FORM ACTION="<?php echo $PHP_SELF?>" METHOD="post" >	<table>	<tr>		<td>DB host:</td>		<td><INPUT TYPE="text" name="dbhost" value="localhost"></td>	</tr><tr>		<td>DB name:</td>		<td><INPUT TYPE="text" name="dbname" value="phpBB"></td>	</tr><tr>		<td>DB username:</td>		<td><INPUT TYPE="text" name="dbuser" value="root"></td>	</tr><tr>		<td>DB password:</td>		<td><INPUT TYPE="password" name="dbpass"></td>	</tr></table>	<INPUT TYPE="submit" name="submit" value="Submit">	</FORM>	<?php}else{	mysql_connect($dbhost, $dbuser, $dbpass) || die(mysql_error());	mysql_select_db($dbname);	$result = mysql_query("SHOW TABLES");	while($row = mysql_fetch_row($result)){		$table = $row[0];		print "Going to drop $table...";		mysql_query("DROP TABLE $table") || die();		print "Done.<br>\n";		flush();	}}?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_board_info{	function module()	{		return array(			'filename'	=> 'acp_board',			'title'		=> 'ACP_BOARD_MANAGEMENT',			'version'	=> '1.0.0',			'modes'		=> array(				'settings'		=> array('title' => 'ACP_BOARD_SETTINGS', 'auth' => 'acl_a_board', 'cat' => array('ACP_BOARD_CONFIGURATION')),				'features'		=> array('title' => 'ACP_BOARD_FEATURES', 'auth' => 'acl_a_board', 'cat' => array('ACP_BOARD_CONFIGURATION')),				'avatar'		=> array('title' => 'ACP_AVATAR_SETTINGS', 'auth' => 'acl_a_board', 'cat' => array('ACP_BOARD_CONFIGURATION')),				'message'		=> array('title' => 'ACP_MESSAGE_SETTINGS', 'auth' => 'acl_a_board', 'cat' => array('ACP_BOARD_CONFIGURATION', 'ACP_MESSAGES')),				'post'			=> array('title' => 'ACP_POST_SETTINGS', 'auth' => 'acl_a_board', 'cat' => array('ACP_BOARD_CONFIGURATION', 'ACP_MESSAGES')),				'signature'		=> array('title' => 'ACP_SIGNATURE_SETTINGS', 'auth' => 'acl_a_board', 'cat' => array('ACP_BOARD_CONFIGURATION')),				'feed'			=> array('title' => 'ACP_FEED_SETTINGS', 'auth' => 'acl_a_board', 'cat' => array('ACP_BOARD_CONFIGURATION')),				'registration'	=> array('title' => 'ACP_REGISTER_SETTINGS', 'auth' => 'acl_a_board', 'cat' => array('ACP_BOARD_CONFIGURATION')),				'auth'		=> array('title' => 'ACP_AUTH_SETTINGS', 'auth' => 'acl_a_server', 'cat' => array('ACP_CLIENT_COMMUNICATION')),				'email'		=> array('title' => 'ACP_EMAIL_SETTINGS', 'auth' => 'acl_a_server', 'cat' => array('ACP_CLIENT_COMMUNICATION')),				'cookie'	=> array('title' => 'ACP_COOKIE_SETTINGS', 'auth' => 'acl_a_server', 'cat' => array('ACP_SERVER_CONFIGURATION')),				'server'	=> array('title' => 'ACP_SERVER_SETTINGS', 'auth' => 'acl_a_server', 'cat' => array('ACP_SERVER_CONFIGURATION')),				'security'	=> array('title' => 'ACP_SECURITY_SETTINGS', 'auth' => 'acl_a_server', 'cat' => array('ACP_SERVER_CONFIGURATION')),				'load'		=> array('title' => 'ACP_LOAD_SETTINGS', 'auth' => 'acl_a_server', 'cat' => array('ACP_SERVER_CONFIGURATION')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** help_faq [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/if (!defined('IN_PHPBB')){	exit;}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$help = array(	array(		0 => '--',		1 => 'Login and Registration Issues'	),	array(		0 => 'Why cant I login?',		1 => 'There are several reasons why this could occur. First, ensure your username and password are correct. If they are, contact the board owner to make sure you havent been banned. It is also possible the website owner has a configuration error on their end, and they would need to fix it.'	),	array(		0 => 'Why do I need to register at all?',		1 => 'You may not have to, it is up to the administrator of the board as to whether you need to register in order to post messages. However; registration will give you access to additional features not available to guest users such as definable avatar images, private messaging, emailing of fellow users, usergroup subscription, etc. It only takes a few moments to register so it is recommended you do so.'	),	array(		0 => 'Why do I get logged off automatically?',		1 => 'If you do not check the <em>Log me in automatically</em> box when you login, the board will only keep you logged in for a preset time. This prevents misuse of your account by anyone else. To stay logged in, check the box during login. This is not recommended if you access the board from a shared computer, e.g. library, internet cafe, university computer lab, etc. If you do not see this checkbox, it means the board administrator has disabled this feature.'	),	array(		0 => 'How do I prevent my username appearing in the online user listings?',		1 => 'Within your User Control Panel, under Board preferences, you will find the option <em>Hide your online status</em>. Enable this option with <samp>Yes</samp> and you will only appear to the administrators, moderators and yourself. You will be counted as a hidden user.'	),	array(		0 => 'Ive lost my password!',		1 => 'Dont panic! While your password cannot be retrieved, it can easily be reset. Visit the login page and click <em>Ive forgotten my password</em>. Follow the instructions and you should be able to log in again shortly.'	),	array(		0 => 'I registered but cannot login!',		1 => 'First, check your username and password. If they are correct, then one of two things may have happened. If COPPA support is enabled and you specified being under 13 years old during registration, you will have to follow the instructions you received. Some boards will also require new registrations to be activated, either by yourself or by an administrator before you can logon; this information was present during registration. If you were sent an e-mail, follow the instructions. If you did not receive an e-mail, you may have provided an incorrect e-mail address or the e-mail may have been picked up by a spam filer. If you are sure the e-mail address you provided is correct, try contacting an administrator.'	),	array(		0 => 'I registered in the past but cannot login any more?!',		1 => 'It is possible an administrator has deactivated or deleted your account for some reason. Also, many boards periodically remove users who have not posted for a long time to reduce the size of the database. If this has happened, try registering again and being more involved in discussions.'	),	array(		0 => 'What is COPPA?',		1 => 'COPPA, or the Child Online Privacy and Protection Act of 1998, is a law in the United States requiring websites which can potentially collect information from minors under the age of 13 to have written parental consent or some other method of legal guardian acknowledgment, allowing the collection of personally identifiable information from a minor under the age of 13. If you are unsure if this applies to you as someone trying to register or to the website you are trying to register on, contact legal counsel for assistance. Please note that the phpBB Group cannot provide legal advice and is not a point of contact for legal concerns of any kind, except as outlined below.',	),	array(		0 => 'Why cant I register?',		1 => 'It is possible the website owner has banned your IP address or disallowed the username you are attempting to register. The website owner could have also disabled registration to prevent new visitors from signing up. Contact a board administrator for assistance.',	),	array(		0 => 'What does the Delete all board cookies do?',		1 => 'Delete all board cookies deletes the cookies created by phpBB which keep you authenticated and logged into the board. It also provides functions such as read tracking if they have been enabled by the board owner. If you are having login or logout problems, deleting board cookies may help.',	),	array(		0 => '--',		1 => 'User Preferences and settings'	),	array(		0 => 'How do I change my settings?',		1 => 'If you are a registered user, all your settings are stored in the board database. To alter them, visit your User Control Panel; a link can usually be found at the top of board pages. This system will allow you to change all your settings and preferences.'	),	array(		0 => 'The times are not correct!',		1 => 'It is possible the time displayed is from a timezone different from the one you are in. If this is the case, visit your User Control Panel and change your timezone to match your particular area, e.g. London, Paris, New York, Sydney, etc. Please note that changing the timezone, like most settings, can only be done by registered users. If you are not registered, this is a good time to do so.'	),	array(		0 => 'I changed the timezone and the time is still wrong!',		1 => 'If you are sure you have set the timezone and Summer Time/DST correctly and the time is still incorrect, then the time stored on the server clock is incorrect. Please notify an administrator to correct the problem.'	),	array(		0 => 'My language is not in the list!',		1 => 'Either the administrator has not installed your language or nobody has translated this board into your language. Try asking the board administrator if they can install the language pack you need. If the language pack does not exist, feel free to create a new translation. More information can be found at the phpBB website (see link at the bottom of board pages).'	),	array(		0 => 'How do I show an image along with my username?',		1 => 'There are two images which may appear along with a username when viewing posts. One of them may be an image associated with your rank, generally in the form of stars, blocks or dots, indicating how many posts you have made or your status on the board. Another, usually a larger image, is known as an avatar and is generally unique or personal to each user. It is up to the board administrator to enable avatars and to choose the way in which avatars can be made available. If you are unable to use avatars, contact a board administrator and ask them for their reasons.'	),	array(		0 => 'What is my rank and how do I change it?',		1 => 'Ranks, which appear below your username, indicate the number of posts you have made or identify certain users, e.g. moderators and administrators. In general, you cannot directly change the wording of any board ranks as they are set by the board administrator. Please do not abuse the board by posting unnecessarily just to increase your rank. Most boards will not tolerate this and the moderator or administrator will simply lower your post count.'	),	array(		0 => 'When I click the e-mail link for a user it asks me to login?',		1 => 'Only registered users can send e-mail to other users via the built-in e-mail form, and only if the administrator has enabled this feature. This is to prevent malicious use of the e-mail system by anonymous users.'	),	array(		0 => '--',		1 => 'Posting Issues'	),	array(		0 => 'How do I post a topic in a forum?',		1 => 'To post a new topic in a forum, click the relevant button on either the forum or topic screens. You may need to register before you can post a message. A list of your permissions in each forum is available at the bottom of the forum and topic screens. Example: You can post new topics, You can vote in polls, etc.'	),	array(		0 => 'How do I edit or delete a post?',		1 => 'Unless you are a board administrator or moderator, you can only edit or delete your own posts. You can edit a post by clicking the edit button for the relevant post, sometimes for only a limited time after the post was made. If someone has already replied to the post, you will find a small piece of text output below the post when you return to the topic which lists the number of times you edited it along with the date and time. This will only appear if someone has made a reply; it will not appear if a moderator or administrator edited the post, though they may leave a note as to why theyve edited the post at their own discretion. Please note that normal users cannot delete a post once someone has replied.'	),	array(		0 => 'How do I add a signature to my post?',		1 => 'To add a signature to a post you must first create one via your User Control Panel. Once created, you can check the <em>Attach a signature</em> box on the posting form to add your signature. You can also add a signature by default to all your posts by checking the appropriate radio button in your profile. If you do so, you can still prevent a signature being added to individual posts by un-checking the add signature box within the posting form.'	),	array(		0 => 'How do I create a poll?',		1 => 'When posting a new topic or editing the first post of a topic, click the Poll creation tab below the main posting form; if you cannot see this, you do not have appropriate permissions to create polls. Enter a title and at least two options in the appropriate fields, making sure each option is on a separate line in the textarea. You can also set the number of options users may select during voting under Options per user, a time limit in days for the poll (0 for infinite duration) and lastly the option to allow users to amend their votes.'	),	array(		0 => 'Why cant I add more poll options?',		1 => 'The limit for poll options is set by the board administrator. If you feel you need to add more options to your poll than the allowed amount, contact the board administrator.'	),	array(		0 => 'How do I edit or delete a poll?',		1 => 'As with posts, polls can only be edited by the original poster, a moderator or an administrator. To edit a poll, click to edit the first post in the topic; this always has the poll associated with it. If no one has cast a vote, users can delete the poll or edit any poll option. However, if members have already placed votes, only moderators or administrators can edit or delete it. This prevents the polls options from being changed mid-way through a poll.'	),	array(		0 => 'Why cant I access a forum?',		1 => 'Some forums may be limited to certain users or groups. To view, read, post or perform another action you may need special permissions. Contact a moderator or board administrator to grant you access.'	),	array(		0 => 'Why cant I add attachments?',		1 => 'Attachment permissions are granted on a per forum, per group, or per user basis. The board administrator may not have allowed attachments to be added for the specific forum you are posting in, or perhaps only certain groups can post attachments. Contact the board administrator if you are unsure about why you are unable to add attachments.'	),	array(		0 => 'Why did I receive a warning?',		1 => 'Each board administrator has their own set of rules for their site. If you have broken a rule, you may be issued a warning. Please note that this is the board administrators decision, and the phpBB Group has nothing to do with the warnings on the given site. Contact the board administrator if you are unsure about why you were issued a warning.'	),	array(		0 => 'How can I report posts to a moderator?',		1 => 'If the board administrator has allowed it, you should see a button for reporting posts next to the post you wish to report. Clicking this will walk you through the steps necessary to report the post.'	),	array(		0 => 'What is the Save button for in topic posting?',		1 => 'This allows you to save passages to be completed and submitted at a later date. To reload a saved passage, visit the User Control Panel.'	),	array(		0 => 'Why does my post need to be approved?',		1 => 'The board administrator may have decided that posts in the forum you are posting to require review before submission. It is also possible that the administrator has placed you in a group of users whose posts require review before submission. Please contact the board administrator for further details.'	),	array(		0 => 'How do I bump my topic?',		1 => 'By clicking the Bump topic link when you are viewing it, you can bump the topic to the top of the forum on the first page. However, if you do not see this, then topic bumping may be disabled or the time allowance between bumps has not yet been reached. It is also possible to bump the topic simply by replying to it, however, be sure to follow the board rules when doing so.'	),	array(		0 => '--',		1 => 'Formatting and Topic Types'	),	array(		0 => 'What is BBCode?',		1 => 'BBCode is a special implementation of HTML, offering great formatting control on particular objects in a post. The use of BBCode is granted by the administrator, but it can also be disabled on a per post basis from the posting form. BBCode itself is similar in style to HTML, but tags are enclosed in square brackets [ and ] rather than &lt; and &gt;. For more information on BBCode see the guide which can be accessed from the posting page.'	),	array(		0 => 'Can I use HTML?',		1 => 'No. It is not possible to post HTML on this board and have it rendered as HTML. Most formatting which can be carried out using HTML can be applied using BBCode instead.'	),	array(		0 => 'What are Smilies?',		1 => 'Smilies, or Emoticons, are small images which can be used to express a feeling using a short code, e.g. :) denotes happy, while :( denotes sad. The full list of emoticons can be seen in the posting form. Try not to overuse smilies, however, as they can quickly render a post unreadable and a moderator may edit them out or remove the post altogether. The board administrator may also have set a limit to the number of smilies you may use within a post.'	),	array(		0 => 'Can I post images?',		1 => 'Yes, images can be shown in your posts. If the administrator has allowed attachments, you may be able to upload the image to the board. Otherwise, you must link to an image stored on a publicly accessible web server, e.g. http://www.example.com/my-picture.gif. You cannot link to pictures stored on your own PC (unless it is a publicly accessible server) nor images stored behind authentication mechanisms, e.g. hotmail or yahoo mailboxes, password protected sites, etc. To display the image use the BBCode [img] tag.'	),	array(		0 => 'What are global announcements?',		1 => 'Global announcements contain important information and you should read them whenever possible. They will appear at the top of every forum and within your User Control Panel. Global announcement permissions are granted by the board administrator.'	),	array(		0 => 'What are announcements?',		1 => 'Announcements often contain important information for the forum you are currently reading and you should read them whenever possible. Announcements appear at the top of every page in the forum to which they are posted. As with global announcements, announcement permissions are granted by the board administrator.'	),	array(		0 => 'What are sticky topics?',		1 => 'Sticky topics within the forum appear below announcements and only on the first page. They are often quite important so you should read them whenever possible. As with announcements and global announcements, sticky topic permissions are granted by the board administrator.'	),	array(		0 => 'What are locked topics?',		1 => 'Locked topics are topics where users can no longer reply and any poll it contained was automatically ended. Topics may be locked for many reasons and were set this way by either the forum moderator or board administrator. You may also be able to lock your own topics depending on the permissions you are granted by the board administrator.'	),	array(		0 => 'What are topic icons?',		1 => 'Topic icons are author chosen images associated with posts to indicate their content. The ability to use topic icons depends on the permissions set by the board administrator.'	),	// This block will switch the FAQ-Questions to the second template column	array(		0 => '--',		1 => '--'	),	array(		0 => '--',		1 => 'User Levels and Groups'	),	array(		0 => 'What are Administrators?',		1 => 'Administrators are members assigned with the highest level of control over the entire board. These members can control all facets of board operation, including setting permissions, banning users, creating usergroups or moderators, etc., dependent upon the board founder and what permissions he or she has given the other administrators. They may also have full moderator capabilities in all forums, depending on the settings put forth by the board founder.'	),	array(		0 => 'What are Moderators?',		1 => 'Moderators are individuals (or groups of individuals) who look after the forums from day to day. They have the authority to edit or delete posts and lock, unlock, move, delete and split topics in the forum they moderate. Generally, moderators are present to prevent users from going off-topic or posting abusive or offensive material.'	),	array(		0 => 'What are usergroups?',		1 => 'Usergroups are groups of users that divide the community into manageable sections board administrators can work with. Each user can belong to several groups and each group can be assigned individual permissions. This provides an easy way for administrators to change permissions for many users at once, such as changing moderator permissions or granting users access to a private forum.'	),	array(		0 => 'Where are the usergroups and how do I join one?',		1 => 'You can view all usergroups via the Usergroups link within your User Control Panel. If you would like to join one, proceed by clicking the appropriate button. Not all groups have open access, however. Some may require approval to join, some may be closed and some may even have hidden memberships. If the group is open, you can join it by clicking the appropriate button. If a group requires approval to join you may request to join by clicking the appropriate button. The user group leader will need to approve your request and may ask why you want to join the group. Please do not harass a group leader if they reject your request; they will have their reasons.'	),	array(		0 => 'How do I become a usergroup leader?',		1 => 'A usergroup leader is usually assigned when usergroups are initially created by a board administrator. If you are interested in creating a usergroup, your first point of contact should be an administrator; try sending a private message.',	),	array(		0 => 'Why do some usergroups appear in a different colour?',		1 => 'It is possible for the board administrator to assign a colour to the members of a usergroup to make it easy to identify the members of this group.'	),	array(		0 => 'What is a Default usergroup?',		1 => 'If you are a member of more than one usergroup, your default is used to determine which group colour and group rank should be shown for you by default. The board administrator may grant you permission to change your default usergroup via your User Control Panel.'	),	array(		0 => 'What is The team link?',		1 => 'This page provides you with a list of board staff, including board administrators and moderators and other details such as the forums they moderate.'	),	array(		0 => '--',		1 => 'Private Messaging'	),	array(		0 => 'I cannot send private messages!',		1 => 'There are three reasons for this; you are not registered and/or not logged on, the board administrator has disabled private messaging for the entire board, or the board administrator has prevented you from sending messages. Contact a board administrator for more information.'	),	array(		0 => 'I keep getting unwanted private messages!',		1 => 'You can block a user from sending you private messages by using message rules within your User Control Panel. If you are receiving abusive private messages from a particular user, inform a board administrator; they have the power to prevent a user from sending private messages.'	),	array(		0 => 'I have received a spamming or abusive e-mail from someone on this board!',		1 => 'We are sorry to hear that. The e-mail form feature of this board includes safeguards to try and track users who send such posts, so e-mail the board administrator with a full copy of the e-mail you received. It is very important that this includes the headers that contain the details of the user that sent the e-mail. The board administrator can then take action.'	),	array(		0 => '--',		1 => 'Friends and Foes'	),	array(		0 => 'What are my Friends and Foes lists?',		1 => 'You can use these lists to organise other members of the board. Members added to your friends list will be listed within your User Control Panel for quick access to see their online status and to send them private messages. Subject to template support, posts from these users may also be highlighted. If you add a user to your foes list, any posts they make will be hidden by default.'	),	array(		0 => 'How can I add / remove users to my Friends or Foes list?',		1 => 'You can add users to your list in two ways. Within each users profile, there is a link to add them to either your Friend or Foe list. Alternatively, from your User Control Panel, you can directly add users by entering their member name. You may also remove users from your list using the same page.'	),	array(		0 => '--',		1 => 'Searching the Forums'	),	array(		0 => 'How can I search a forum or forums?',		1 => 'Enter a search term in the search box located on the index, forum or topic pages. Advanced search can be accessed by clicking the Advance Search link which is available on all pages on the forum. How to access the search may depend on the style used.'	),	array(		0 => 'Why does my search return no results?',		1 => 'Your search was probably too vague and included many common terms which are not indexed by phpBB3. Be more specific and use the options available within Advanced search.'	),	array(		0 => 'Why does my search return a blank page!?',		1 => 'Your search returned too many results for the webserver to handle. Use Advanced search and be more specific in the terms used and forums that are to be searched.'	),	array(		0 => 'How do I search for members?',		1 => 'Visit to the Members page and click the Find a member link.'	),	array(		0 => 'How can I find my own posts and topics?',		1 => 'Your own posts can be retrieved either by clicking the Search users posts within the User Control Panel or via your own profile page. To search for your topics, use the Advanced search page and fill in the various options appropriately.'	),	array(		0 => '--',		1 => 'Topic Subscriptions and Bookmarks'	),	array(		0 => 'What is the difference between bookmarking and subscribing?',		1 => 'Bookmarking in phpBB3 is much like bookmarking in your web browser. You arent alerted when theres an update, but you can come back to the topic later. Subscribing, however, will notify you when there is an update to the topic or forum on the board via your preferred method or methods.'	),	array(		0 => 'How do I subscribe to specific forums or topics?',		1 => 'To subscribe to a specific forum, click the Subscribe forum link upon entering the forum. To subscribe to a topic, reply to the topic with the subscribe checkbox checked or click the Subscribe topic link within the topic itself.'	),	array(		0 => 'How do I remove my subscriptions?',		1 => 'To remove your subscriptions, go to your User Control Panel and follow the links to your subscriptions.'	),	array(		0 => '--',		1 => 'Attachments'	),	array(		0 => 'What attachments are allowed on this board?',		1 => 'Each board administrator can allow or disallow certain attachment types. If you are unsure what is allowed to be uploaded, contact the board administrator for assistance.'	),	array(		0 => 'How do I find all my attachments?',		1 => 'To find your list of attachments that you have uploaded, go to your User Control Panel and follow the links to the attachments section.'	),	array(		0 => '--',		1 => 'phpBB 3 Issues'	),	array(		0 => 'Who wrote this bulletin board?',		1 => 'This software (in its unmodified form) is produced, released and is copyright <a href="http://www.phpbb.com/">phpBB Group</a>. It is made available under the GNU General Public License and may be freely distributed. See the link for more details.'	),	array(		0 => 'Why isnt X feature available?',		1 => 'This software was written by and licensed through phpBB Group. If you believe a feature needs to be added, please visit the phpbb.com website and see what phpBB Group have to say. Please do not post feature requests to the board at phpbb.com, the group uses SourceForge to handle tasking of new features. Please read through the forums and see what, if any, our position may already be for a feature and then follow the procedure given there.'	),	array(		0 => 'Who do I contact about abusive and/or legal matters related to this board?',		1 => 'Any of the administrators listed on the The team page should be an appropriate point of contact for your complaints. If this still gets no response then you should contact the owner of the domain (do a <a href="http://www.google.com/search?q=whois">whois lookup</a>) or, if this is running on a free service (e.g. Yahoo!, free.fr, f2s.com, etc.), the management or abuse department of that service. Please note that the phpBB Group has <strong>absolutely no jurisdiction</strong> and cannot in any way be held liable over how, where or by whom this board is used. Do not contact the phpBB Group in relation to any legal (cease and desist, liable, defamatory comment, etc.) matter <strong>not directly related</strong> to the phpBB.com website or the discrete software of phpBB itself. If you do e-mail phpBB Group <strong>about any third party</strong> use of this software then you should expect a terse response or no response at all.'	));?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Display Forums*/function display_forums($root_data = '', $display_moderators = true, $return_moderators = false){	global $db, $auth, $user, $template;	global $phpbb_root_path, $phpEx, $config;	$forum_rows = $subforums = $forum_ids = $forum_ids_moderator = $forum_moderators = $active_forum_ary = array();	$parent_id = $visible_forums = 0;	$sql_from = '';	// Mark forums read?	$mark_read = request_var('mark', '');	if ($mark_read == 'all')	{		$mark_read = '';	}	if (!$root_data)	{		if ($mark_read == 'forums')		{			$mark_read = 'all';		}		$root_data = array('forum_id' => 0);		$sql_where = '';	}	else	{		$sql_where = 'left_id > ' . $root_data['left_id'] . ' AND left_id < ' . $root_data['right_id'];	}	// Handle marking everything read	if ($mark_read == 'all')	{		$redirect = build_url(array('mark', 'hash'));		meta_refresh(3, $redirect);		if (check_link_hash(request_var('hash', ''), 'global'))		{			markread('all');			trigger_error(				$user->lang['FORUMS_MARKED'] . '<br /><br />' .				sprintf($user->lang['RETURN_INDEX'], '<a href="' . $redirect . '">', '</a>')			);		}		else		{			trigger_error(sprintf($user->lang['RETURN_PAGE'], '<a href="' . $redirect . '">', '</a>'));		}	}	// Display list of active topics for this category?	$show_active = (isset($root_data['forum_flags']) && ($root_data['forum_flags'] & FORUM_FLAG_ACTIVE_TOPICS)) ? true : false;	$sql_array = array(		'SELECT'	=> 'f.*',		'FROM'		=> array(			FORUMS_TABLE		=> 'f'		),		'LEFT_JOIN'	=> array(),	);	if ($config['load_db_lastread'] && $user->data['is_registered'])	{		$sql_array['LEFT_JOIN'][] = array('FROM' => array(FORUMS_TRACK_TABLE => 'ft'), 'ON' => 'ft.user_id = ' . $user->data['user_id'] . ' AND ft.forum_id = f.forum_id');		$sql_array['SELECT'] .= ', ft.mark_time';	}	else if ($config['load_anon_lastread'] || $user->data['is_registered'])	{		$tracking_topics = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';		$tracking_topics = ($tracking_topics) ? tracking_unserialize($tracking_topics) : array();		if (!$user->data['is_registered'])		{			$user->data['user_lastmark'] = (isset($tracking_topics['l'])) ? (int) (base_convert($tracking_topics['l'], 36, 10) + $config['board_startdate']) : 0;		}	}	if ($show_active)	{		$sql_array['LEFT_JOIN'][] = array(			'FROM'	=> array(FORUMS_ACCESS_TABLE => 'fa'),			'ON'	=> "fa.forum_id = f.forum_id AND fa.session_id = '" . $db->sql_escape($user->session_id) . "'"		);		$sql_array['SELECT'] .= ', fa.user_id';	}	$sql = $db->sql_build_query('SELECT', array(		'SELECT'	=> $sql_array['SELECT'],		'FROM'		=> $sql_array['FROM'],		'LEFT_JOIN'	=> $sql_array['LEFT_JOIN'],		'WHERE'		=> $sql_where,		'ORDER_BY'	=> 'f.left_id',	));	$result = $db->sql_query($sql);	$forum_tracking_info = array();	$branch_root_id = $root_data['forum_id'];	// Check for unread global announcements (index page only)	$ga_unread = false;	if ($root_data['forum_id'] == 0)	{		$unread_ga_list = get_unread_topics($user->data['user_id'], 'AND t.forum_id = 0', '', 1);		if (!empty($unread_ga_list))		{			$ga_unread = true;		}	}	while ($row = $db->sql_fetchrow($result))	{		$forum_id = $row['forum_id'];		// Mark forums read?		if ($mark_read == 'forums')		{			if ($auth->acl_get('f_list', $forum_id))			{				$forum_ids[] = $forum_id;			}			continue;		}		// Category with no members		if ($row['forum_type'] == FORUM_CAT && ($row['left_id'] + 1 == $row['right_id']))		{			continue;		}		// Skip branch		if (isset($right_id))		{			if ($row['left_id'] < $right_id)			{				continue;			}			unset($right_id);		}		if (!$auth->acl_get('f_list', $forum_id))		{			// if the user does not have permissions to list this forum, skip everything until next branch			$right_id = $row['right_id'];			continue;		}		if ($config['load_db_lastread'] && $user->data['is_registered'])		{			$forum_tracking_info[$forum_id] = (!empty($row['mark_time'])) ? $row['mark_time'] : $user->data['user_lastmark'];		}		else if ($config['load_anon_lastread'] || $user->data['is_registered'])		{			if (!$user->data['is_registered'])			{				$user->data['user_lastmark'] = (isset($tracking_topics['l'])) ? (int) (base_convert($tracking_topics['l'], 36, 10) + $config['board_startdate']) : 0;			}			$forum_tracking_info[$forum_id] = (isset($tracking_topics['f'][$forum_id])) ? (int) (base_convert($tracking_topics['f'][$forum_id], 36, 10) + $config['board_startdate']) : $user->data['user_lastmark'];		}		// Count the difference of real to public topics, so we can display an information to moderators		$row['forum_id_unapproved_topics'] = ($auth->acl_get('m_approve', $forum_id) && ($row['forum_topics_real'] != $row['forum_topics'])) ? $forum_id : 0;		$row['forum_topics'] = ($auth->acl_get('m_approve', $forum_id)) ? $row['forum_topics_real'] : $row['forum_topics'];		// Display active topics from this forum?		if ($show_active && $row['forum_type'] == FORUM_POST && $auth->acl_get('f_read', $forum_id) && ($row['forum_flags'] & FORUM_FLAG_ACTIVE_TOPICS))		{			if (!isset($active_forum_ary['forum_topics']))			{				$active_forum_ary['forum_topics'] = 0;			}			if (!isset($active_forum_ary['forum_posts']))			{				$active_forum_ary['forum_posts'] = 0;			}			$active_forum_ary['forum_id'][]		= $forum_id;			$active_forum_ary['enable_icons'][]	= $row['enable_icons'];			$active_forum_ary['forum_topics']	+= $row['forum_topics'];			$active_forum_ary['forum_posts']	+= $row['forum_posts'];			// If this is a passworded forum we do not show active topics from it if the user is not authorised to view it...			if ($row['forum_password'] && $row['user_id'] != $user->data['user_id'])			{				$active_forum_ary['exclude_forum_id'][] = $forum_id;			}		}		//		if ($row['parent_id'] == $root_data['forum_id'] || $row['parent_id'] == $branch_root_id)		{			if ($row['forum_type'] != FORUM_CAT)			{				$forum_ids_moderator[] = (int) $forum_id;			}			// Direct child of current branch			$parent_id = $forum_id;			$forum_rows[$forum_id] = $row;			if ($row['forum_type'] == FORUM_CAT && $row['parent_id'] == $root_data['forum_id'])			{				$branch_root_id = $forum_id;			}			$forum_rows[$parent_id]['forum_id_last_post'] = $row['forum_id'];			$forum_rows[$parent_id]['orig_forum_last_post_time'] = $row['forum_last_post_time'];		}		else if ($row['forum_type'] != FORUM_CAT)		{			$subforums[$parent_id][$forum_id]['display'] = ($row['display_on_index']) ? true : false;			$subforums[$parent_id][$forum_id]['name'] = $row['forum_name'];			$subforums[$parent_id][$forum_id]['orig_forum_last_post_time'] = $row['forum_last_post_time'];			$subforums[$parent_id][$forum_id]['children'] = array();			if (isset($subforums[$parent_id][$row['parent_id']]) && !$row['display_on_index'])			{				$subforums[$parent_id][$row['parent_id']]['children'][] = $forum_id;			}			if (!$forum_rows[$parent_id]['forum_id_unapproved_topics'] && $row['forum_id_unapproved_topics'])			{				$forum_rows[$parent_id]['forum_id_unapproved_topics'] = $forum_id;			}			$forum_rows[$parent_id]['forum_topics'] += $row['forum_topics'];			// Do not list redirects in LINK Forums as Posts.			if ($row['forum_type'] != FORUM_LINK)			{				$forum_rows[$parent_id]['forum_posts'] += $row['forum_posts'];			}			if ($row['forum_last_post_time'] > $forum_rows[$parent_id]['forum_last_post_time'])			{				$forum_rows[$parent_id]['forum_last_post_id'] = $row['forum_last_post_id'];				$forum_rows[$parent_id]['forum_last_post_subject'] = $row['forum_last_post_subject'];				$forum_rows[$parent_id]['forum_last_post_time'] = $row['forum_last_post_time'];				$forum_rows[$parent_id]['forum_last_poster_id'] = $row['forum_last_poster_id'];				$forum_rows[$parent_id]['forum_last_poster_name'] = $row['forum_last_poster_name'];				$forum_rows[$parent_id]['forum_last_poster_colour'] = $row['forum_last_poster_colour'];				$forum_rows[$parent_id]['forum_id_last_post'] = $forum_id;			}		}	}	$db->sql_freeresult($result);	// Handle marking posts	if ($mark_read == 'forums')	{		$redirect = build_url(array('mark', 'hash'));		$token = request_var('hash', '');		if (check_link_hash($token, 'global'))		{			// Add 0 to forums array to mark global announcements correctly			$forum_ids[] = 0;			markread('topics', $forum_ids);			$message = sprintf($user->lang['RETURN_FORUM'], '<a href="' . $redirect . '">', '</a>');			meta_refresh(3, $redirect);			trigger_error($user->lang['FORUMS_MARKED'] . '<br /><br />' . $message);		}		else		{			$message = sprintf($user->lang['RETURN_PAGE'], '<a href="' . $redirect . '">', '</a>');			meta_refresh(3, $redirect);			trigger_error($message);		}	}	// Grab moderators ... if necessary	if ($display_moderators)	{		if ($return_moderators)		{			$forum_ids_moderator[] = $root_data['forum_id'];		}		get_moderators($forum_moderators, $forum_ids_moderator);	}	// Used to tell whatever we have to create a dummy category or not.	$last_catless = true;	foreach ($forum_rows as $row)	{		// Empty category		if ($row['parent_id'] == $root_data['forum_id'] && $row['forum_type'] == FORUM_CAT)		{			$template->assign_block_vars('forumrow', array(				'S_IS_CAT'				=> true,				'FORUM_ID'				=> $row['forum_id'],				'FORUM_NAME'			=> $row['forum_name'],				'FORUM_DESC'			=> generate_text_for_display($row['forum_desc'], $row['forum_desc_uid'], $row['forum_desc_bitfield'], $row['forum_desc_options']),				'FORUM_FOLDER_IMG'		=> '',				'FORUM_FOLDER_IMG_SRC'	=> '',				'FORUM_IMAGE'			=> ($row['forum_image']) ? '<img src="' . $phpbb_root_path . $row['forum_image'] . '" alt="' . $user->lang['FORUM_CAT'] . '" />' : '',				'FORUM_IMAGE_SRC'		=> ($row['forum_image']) ? $phpbb_root_path . $row['forum_image'] : '',				'U_VIEWFORUM'			=> append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $row['forum_id']))			);			continue;		}		$visible_forums++;		$forum_id = $row['forum_id'];		$forum_unread = (isset($forum_tracking_info[$forum_id]) && $row['orig_forum_last_post_time'] > $forum_tracking_info[$forum_id]) ? true : false;		// Mark the first visible forum on index as unread if there's any unread global announcement		if ($ga_unread && !empty($forum_ids_moderator) && $forum_id == $forum_ids_moderator[0])		{			$forum_unread = true;		}		$folder_image = $folder_alt = $l_subforums = '';		$subforums_list = array();		// Generate list of subforums if we need to		if (isset($subforums[$forum_id]))		{			foreach ($subforums[$forum_id] as $subforum_id => $subforum_row)			{				$subforum_unread = (isset($forum_tracking_info[$subforum_id]) && $subforum_row['orig_forum_last_post_time'] > $forum_tracking_info[$subforum_id]) ? true : false;				if (!$subforum_unread && !empty($subforum_row['children']))				{					foreach ($subforum_row['children'] as $child_id)					{						if (isset($forum_tracking_info[$child_id]) && $subforums[$forum_id][$child_id]['orig_forum_last_post_time'] > $forum_tracking_info[$child_id])						{							// Once we found an unread child forum, we can drop out of this loop							$subforum_unread = true;							break;						}					}				}				if ($subforum_row['display'] && $subforum_row['name'])				{					$subforums_list[] = array(						'link'		=> append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $subforum_id),						'name'		=> $subforum_row['name'],						'unread'	=> $subforum_unread,					);				}				else				{					unset($subforums[$forum_id][$subforum_id]);				}				// If one subforum is unread the forum gets unread too...				if ($subforum_unread)				{					$forum_unread = true;				}			}			$l_subforums = (sizeof($subforums[$forum_id]) == 1) ? $user->lang['SUBFORUM'] . ': ' : $user->lang['SUBFORUMS'] . ': ';			$folder_image = ($forum_unread) ? 'forum_unread_subforum' : 'forum_read_subforum';		}		else		{			switch ($row['forum_type'])			{				case FORUM_POST:					$folder_image = ($forum_unread) ? 'forum_unread' : 'forum_read';				break;				case FORUM_LINK:					$folder_image = 'forum_link';				break;			}		}		// Which folder should we display?		if ($row['forum_status'] == ITEM_LOCKED)		{			$folder_image = ($forum_unread) ? 'forum_unread_locked' : 'forum_read_locked';			$folder_alt = 'FORUM_LOCKED';		}		else		{			$folder_alt = ($forum_unread) ? 'UNREAD_POSTS' : 'NO_UNREAD_POSTS';		}		// Create last post link information, if appropriate		if ($row['forum_last_post_id'])		{			$last_post_subject = $row['forum_last_post_subject'];			$last_post_time = $user->format_date($row['forum_last_post_time']);			$last_post_url = append_sid("{$phpbb_root_path}viewtopic.$phpEx", 'f=' . $row['forum_id_last_post'] . '&amp;p=' . $row['forum_last_post_id']) . '#p' . $row['forum_last_post_id'];		}		else		{			$last_post_subject = $last_post_time = $last_post_url = '';		}		// Output moderator listing ... if applicable		$l_moderator = $moderators_list = '';		if ($display_moderators && !empty($forum_moderators[$forum_id]))		{			$l_moderator = (sizeof($forum_moderators[$forum_id]) == 1) ? $user->lang['MODERATOR'] : $user->lang['MODERATORS'];			$moderators_list = implode(', ', $forum_moderators[$forum_id]);		}		$l_post_click_count = ($row['forum_type'] == FORUM_LINK) ? 'CLICKS' : 'POSTS';		$post_click_count = ($row['forum_type'] != FORUM_LINK || $row['forum_flags'] & FORUM_FLAG_LINK_TRACK) ? $row['forum_posts'] : '';		$s_subforums_list = array();		foreach ($subforums_list as $subforum)		{			$s_subforums_list[] = '<a href="' . $subforum['link'] . '" class="subforum ' . (($subforum['unread']) ? 'unread' : 'read') . '" title="' . (($subforum['unread']) ? $user->lang['UNREAD_POSTS'] : $user->lang['NO_UNREAD_POSTS']) . '">' . $subforum['name'] . '</a>';		}		$s_subforums_list = (string) implode(', ', $s_subforums_list);		$catless = ($row['parent_id'] == $root_data['forum_id']) ? true : false;		if ($row['forum_type'] != FORUM_LINK)		{			$u_viewforum = append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $row['forum_id']);		}		else		{			// If the forum is a link and we count redirects we need to visit it			// If the forum is having a password or no read access we do not expose the link, but instead handle it in viewforum			if (($row['forum_flags'] & FORUM_FLAG_LINK_TRACK) || $row['forum_password'] || !$auth->acl_get('f_read', $forum_id))			{				$u_viewforum = append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $row['forum_id']);			}			else			{				$u_viewforum = $row['forum_link'];			}		}		$template->assign_block_vars('forumrow', array(			'S_IS_CAT'			=> false,			'S_NO_CAT'			=> $catless && !$last_catless,			'S_IS_LINK'			=> ($row['forum_type'] == FORUM_LINK) ? true : false,			'S_UNREAD_FORUM'	=> $forum_unread,			'S_AUTH_READ'		=> $auth->acl_get('f_read', $row['forum_id']),			'S_LOCKED_FORUM'	=> ($row['forum_status'] == ITEM_LOCKED) ? true : false,			'S_LIST_SUBFORUMS'	=> ($row['display_subforum_list']) ? true : false,			'S_SUBFORUMS'		=> (sizeof($subforums_list)) ? true : false,			'S_FEED_ENABLED'	=> ($config['feed_forum'] && !phpbb_optionget(FORUM_OPTION_FEED_EXCLUDE, $row['forum_options']) && $row['forum_type'] == FORUM_POST) ? true : false,			'FORUM_ID'				=> $row['forum_id'],			'FORUM_NAME'			=> $row['forum_name'],			'FORUM_DESC'			=> generate_text_for_display($row['forum_desc'], $row['forum_desc_uid'], $row['forum_desc_bitfield'], $row['forum_desc_options']),			'TOPICS'				=> $row['forum_topics'],			$l_post_click_count		=> $post_click_count,			'FORUM_FOLDER_IMG'		=> $user->img($folder_image, $folder_alt),			'FORUM_FOLDER_IMG_SRC'	=> $user->img($folder_image, $folder_alt, false, '', 'src'),			'FORUM_FOLDER_IMG_ALT'	=> isset($user->lang[$folder_alt]) ? $user->lang[$folder_alt] : '',			'FORUM_IMAGE'			=> ($row['forum_image']) ? '<img src="' . $phpbb_root_path . $row['forum_image'] . '" alt="' . $user->lang[$folder_alt] . '" />' : '',			'FORUM_IMAGE_SRC'		=> ($row['forum_image']) ? $phpbb_root_path . $row['forum_image'] : '',			'LAST_POST_SUBJECT'		=> censor_text($last_post_subject),			'LAST_POST_TIME'		=> $last_post_time,			'LAST_POSTER'			=> get_username_string('username', $row['forum_last_poster_id'], $row['forum_last_poster_name'], $row['forum_last_poster_colour']),			'LAST_POSTER_COLOUR'	=> get_username_string('colour', $row['forum_last_poster_id'], $row['forum_last_poster_name'], $row['forum_last_poster_colour']),			'LAST_POSTER_FULL'		=> get_username_string('full', $row['forum_last_poster_id'], $row['forum_last_poster_name'], $row['forum_last_poster_colour']),			'MODERATORS'			=> $moderators_list,			'SUBFORUMS'				=> $s_subforums_list,			'L_SUBFORUM_STR'		=> $l_subforums,			'L_MODERATOR_STR'		=> $l_moderator,			'U_UNAPPROVED_TOPICS'	=> ($row['forum_id_unapproved_topics']) ? append_sid("{$phpbb_root_path}mcp.$phpEx", 'i=queue&amp;mode=unapproved_topics&amp;f=' . $row['forum_id_unapproved_topics']) : '',			'U_VIEWFORUM'		=> $u_viewforum,			'U_LAST_POSTER'		=> get_username_string('profile', $row['forum_last_poster_id'], $row['forum_last_poster_name'], $row['forum_last_poster_colour']),			'U_LAST_POST'		=> $last_post_url)		);		// Assign subforums loop for style authors		foreach ($subforums_list as $subforum)		{			$template->assign_block_vars('forumrow.subforum', array(				'U_SUBFORUM'	=> $subforum['link'],				'SUBFORUM_NAME'	=> $subforum['name'],				'S_UNREAD'		=> $subforum['unread'])			);		}		$last_catless = $catless;	}	$template->assign_vars(array(		'U_MARK_FORUMS'		=> ($user->data['is_registered'] || $config['load_anon_lastread']) ? append_sid("{$phpbb_root_path}viewforum.$phpEx", 'hash=' . generate_link_hash('global') . '&amp;f=' . $root_data['forum_id'] . '&amp;mark=forums') : '',		'S_HAS_SUBFORUM'	=> ($visible_forums) ? true : false,		'L_SUBFORUM'		=> ($visible_forums == 1) ? $user->lang['SUBFORUM'] : $user->lang['SUBFORUMS'],		'LAST_POST_IMG'		=> $user->img('icon_topic_latest', 'VIEW_LATEST_POST'),		'UNAPPROVED_IMG'	=> $user->img('icon_topic_unapproved', 'TOPICS_UNAPPROVED'),	));	if ($return_moderators)	{		return array($active_forum_ary, $forum_moderators);	}	return array($active_forum_ary, array());}/*** Create forum rules for given forum*/function generate_forum_rules(&$forum_data){	if (!$forum_data['forum_rules'] && !$forum_data['forum_rules_link'])	{		return;	}	global $template, $phpbb_root_path, $phpEx;	if ($forum_data['forum_rules'])	{		$forum_data['forum_rules'] = generate_text_for_display($forum_data['forum_rules'], $forum_data['forum_rules_uid'], $forum_data['forum_rules_bitfield'], $forum_data['forum_rules_options']);	}	$template->assign_vars(array(		'S_FORUM_RULES'	=> true,		'U_FORUM_RULES'	=> $forum_data['forum_rules_link'],		'FORUM_RULES'	=> $forum_data['forum_rules'])	);}/*** Create forum navigation links for given forum, create parent* list if currently null, assign basic forum info to template*/function generate_forum_nav(&$forum_data){	global $db, $user, $template, $auth, $config;	global $phpEx, $phpbb_root_path;	if (!$auth->acl_get('f_list', $forum_data['forum_id']))	{		return;	}	// Get forum parents	$forum_parents = get_forum_parents($forum_data);	// Build navigation links	if (!empty($forum_parents))	{		foreach ($forum_parents as $parent_forum_id => $parent_data)		{			list($parent_name, $parent_type) = array_values($parent_data);			// Skip this parent if the user does not have the permission to view it			if (!$auth->acl_get('f_list', $parent_forum_id))			{				continue;			}			$template->assign_block_vars('navlinks', array(				'S_IS_CAT'		=> ($parent_type == FORUM_CAT) ? true : false,				'S_IS_LINK'		=> ($parent_type == FORUM_LINK) ? true : false,				'S_IS_POST'		=> ($parent_type == FORUM_POST) ? true : false,				'FORUM_NAME'	=> $parent_name,				'FORUM_ID'		=> $parent_forum_id,				'U_VIEW_FORUM'	=> append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $parent_forum_id))			);		}	}	$template->assign_block_vars('navlinks', array(		'S_IS_CAT'		=> ($forum_data['forum_type'] == FORUM_CAT) ? true : false,		'S_IS_LINK'		=> ($forum_data['forum_type'] == FORUM_LINK) ? true : false,		'S_IS_POST'		=> ($forum_data['forum_type'] == FORUM_POST) ? true : false,		'FORUM_NAME'	=> $forum_data['forum_name'],		'FORUM_ID'		=> $forum_data['forum_id'],		'U_VIEW_FORUM'	=> append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_data['forum_id']))	);	$template->assign_vars(array(		'FORUM_ID' 		=> $forum_data['forum_id'],		'FORUM_NAME'	=> $forum_data['forum_name'],		'FORUM_DESC'	=> generate_text_for_display($forum_data['forum_desc'], $forum_data['forum_desc_uid'], $forum_data['forum_desc_bitfield'], $forum_data['forum_desc_options']),		'S_ENABLE_FEEDS_FORUM'	=> ($config['feed_forum'] && $forum_data['forum_type'] == FORUM_POST && !phpbb_optionget(FORUM_OPTION_FEED_EXCLUDE, $forum_data['forum_options'])) ? true : false,	));	return;}/*** Returns forum parents as an array. Get them from forum_data if available, or update the database otherwise*/function get_forum_parents(&$forum_data){	global $db;	$forum_parents = array();	if ($forum_data['parent_id'] > 0)	{		if ($forum_data['forum_parents'] == '')		{			$sql = 'SELECT forum_id, forum_name, forum_type				FROM ' . FORUMS_TABLE . '				WHERE left_id < ' . $forum_data['left_id'] . '					AND right_id > ' . $forum_data['right_id'] . '				ORDER BY left_id ASC';			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$forum_parents[$row['forum_id']] = array($row['forum_name'], (int) $row['forum_type']);			}			$db->sql_freeresult($result);			$forum_data['forum_parents'] = serialize($forum_parents);			$sql = 'UPDATE ' . FORUMS_TABLE . "				SET forum_parents = '" . $db->sql_escape($forum_data['forum_parents']) . "'				WHERE parent_id = " . $forum_data['parent_id'];			$db->sql_query($sql);		}		else		{			$forum_parents = unserialize($forum_data['forum_parents']);		}	}	return $forum_parents;}/*** Generate topic pagination*/function topic_generate_pagination($replies, $url){	global $config, $user;	// Make sure $per_page is a valid value	$per_page = ($config['posts_per_page'] <= 0) ? 1 : $config['posts_per_page'];	if (($replies + 1) > $per_page)	{		$total_pages = ceil(($replies + 1) / $per_page);		$pagination = '';		$times = 1;		for ($j = 0; $j < $replies + 1; $j += $per_page)		{			$pagination .= '<a href="' . $url . ($j == 0 ? '' : '&amp;start=' . $j) . '">' . $times . '</a>';			if ($times == 1 && $total_pages > 5)			{				$pagination .= '<span class="page-dots"> ... </span>';				// Display the last three pages				$times = $total_pages - 3;				$j += ($total_pages - 4) * $per_page;			}			else if ($times < $total_pages)			{				$pagination .= '<span class="page-sep">' . $user->lang['COMMA_SEPARATOR'] . '</span>';			}			$times++;		}	}	else	{		$pagination = '';	}	return $pagination;}/*** Obtain list of moderators of each forum*/function get_moderators(&$forum_moderators, $forum_id = false){	global $config, $template, $db, $phpbb_root_path, $phpEx, $user, $auth;	$forum_id_ary = array();	if ($forum_id !== false)	{		if (!is_array($forum_id))		{			$forum_id = array($forum_id);		}		// Exchange key/value pair to be able to faster check for the forum id existence		$forum_id_ary = array_flip($forum_id);	}	$sql_array = array(		'SELECT'	=> 'm.*, u.user_colour, g.group_colour, g.group_type',		'FROM'		=> array(			MODERATOR_CACHE_TABLE	=> 'm',		),		'LEFT_JOIN'	=> array(			array(				'FROM'	=> array(USERS_TABLE => 'u'),				'ON'	=> 'm.user_id = u.user_id',			),			array(				'FROM'	=> array(GROUPS_TABLE => 'g'),				'ON'	=> 'm.group_id = g.group_id',			),		),		'WHERE'		=> 'm.display_on_index = 1',	);	// We query every forum here because for caching we should not have any parameter.	$sql = $db->sql_build_query('SELECT', $sql_array);	$result = $db->sql_query($sql, 3600);	while ($row = $db->sql_fetchrow($result))	{		$f_id = (int) $row['forum_id'];		if (!isset($forum_id_ary[$f_id]))		{			continue;		}		if (!empty($row['user_id']))		{			$forum_moderators[$f_id][] = get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']);		}		else		{			$group_name = (($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name']);			if ($user->data['user_id'] != ANONYMOUS && !$auth->acl_get('u_viewprofile'))			{				$forum_moderators[$f_id][] = '<span' . (($row['group_colour']) ? ' style="color:#' . $row['group_colour'] . ';"' : '') . '>' . $group_name . '</span>';			}			else			{				$forum_moderators[$f_id][] = '<a' . (($row['group_colour']) ? ' style="color:#' . $row['group_colour'] . ';"' : '') . ' href="' . append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=group&amp;g=' . $row['group_id']) . '">' . $group_name . '</a>';			}		}	}	$db->sql_freeresult($result);	return;}/*** User authorisation levels output** @param	string	$mode			Can be forum or topic. Not in use at the moment.* @param	int		$forum_id		The current forum the user is in.* @param	int		$forum_status	The forums status bit.*/function gen_forum_auth_level($mode, $forum_id, $forum_status){	global $template, $auth, $user, $config;	$locked = ($forum_status == ITEM_LOCKED && !$auth->acl_get('m_edit', $forum_id)) ? true : false;	$rules = array(		($auth->acl_get('f_post', $forum_id) && !$locked) ? $user->lang['RULES_POST_CAN'] : $user->lang['RULES_POST_CANNOT'],		($auth->acl_get('f_reply', $forum_id) && !$locked) ? $user->lang['RULES_REPLY_CAN'] : $user->lang['RULES_REPLY_CANNOT'],		($user->data['is_registered'] && $auth->acl_gets('f_edit', 'm_edit', $forum_id) && !$locked) ? $user->lang['RULES_EDIT_CAN'] : $user->lang['RULES_EDIT_CANNOT'],		($user->data['is_registered'] && $auth->acl_gets('f_delete', 'm_delete', $forum_id) && !$locked) ? $user->lang['RULES_DELETE_CAN'] : $user->lang['RULES_DELETE_CANNOT'],	);	if ($config['allow_attachments'])	{		$rules[] = ($auth->acl_get('f_attach', $forum_id) && $auth->acl_get('u_attach') && !$locked) ? $user->lang['RULES_ATTACH_CAN'] : $user->lang['RULES_ATTACH_CANNOT'];	}	foreach ($rules as $rule)	{		$template->assign_block_vars('rules', array('RULE' => $rule));	}	return;}/*** Generate topic status*/function topic_status(&$topic_row, $replies, $unread_topic, &$folder_img, &$folder_alt, &$topic_type){	global $user, $config;	$folder = $folder_new = '';	if ($topic_row['topic_status'] == ITEM_MOVED)	{		$topic_type = $user->lang['VIEW_TOPIC_MOVED'];		$folder_img = 'topic_moved';		$folder_alt = 'TOPIC_MOVED';	}	else	{		switch ($topic_row['topic_type'])		{			case POST_GLOBAL:				$topic_type = $user->lang['VIEW_TOPIC_GLOBAL'];				$folder = 'global_read';				$folder_new = 'global_unread';			break;			case POST_ANNOUNCE:				$topic_type = $user->lang['VIEW_TOPIC_ANNOUNCEMENT'];				$folder = 'announce_read';				$folder_new = 'announce_unread';			break;			case POST_STICKY:				$topic_type = $user->lang['VIEW_TOPIC_STICKY'];				$folder = 'sticky_read';				$folder_new = 'sticky_unread';			break;			default:				$topic_type = '';				$folder = 'topic_read';				$folder_new = 'topic_unread';				// Hot topic threshold is for posts in a topic, which is replies + the first post. ;)				if ($config['hot_threshold'] && ($replies + 1) >= $config['hot_threshold'] && $topic_row['topic_status'] != ITEM_LOCKED)				{					$folder .= '_hot';					$folder_new .= '_hot';				}			break;		}		if ($topic_row['topic_status'] == ITEM_LOCKED)		{			$topic_type = $user->lang['VIEW_TOPIC_LOCKED'];			$folder .= '_locked';			$folder_new .= '_locked';		}		$folder_img = ($unread_topic) ? $folder_new : $folder;		$folder_alt = ($unread_topic) ? 'UNREAD_POSTS' : (($topic_row['topic_status'] == ITEM_LOCKED) ? 'TOPIC_LOCKED' : 'NO_UNREAD_POSTS');		// Posted image?		if (!empty($topic_row['topic_posted']) && $topic_row['topic_posted'])		{			$folder_img .= '_mine';		}	}	if ($topic_row['poll_start'] && $topic_row['topic_status'] != ITEM_MOVED)	{		$topic_type = $user->lang['VIEW_TOPIC_POLL'];	}}/*** Assign/Build custom bbcodes for display in screens supporting using of bbcodes* The custom bbcodes buttons will be placed within the template block 'custom_codes'*/function display_custom_bbcodes(){	global $db, $template, $user;	// Start counting from 22 for the bbcode ids (every bbcode takes two ids - opening/closing)	$num_predefined_bbcodes = 22;	$sql = 'SELECT bbcode_id, bbcode_tag, bbcode_helpline		FROM ' . BBCODES_TABLE . '		WHERE display_on_posting = 1		ORDER BY bbcode_tag';	$result = $db->sql_query($sql);	$i = 0;	while ($row = $db->sql_fetchrow($result))	{		// If the helpline is defined within the language file, we will use the localised version, else just use the database entry...		if (isset($user->lang[strtoupper($row['bbcode_helpline'])]))		{			$row['bbcode_helpline'] = $user->lang[strtoupper($row['bbcode_helpline'])];		}		$template->assign_block_vars('custom_tags', array(			'BBCODE_NAME'		=> "'[{$row['bbcode_tag']}]', '[/" . str_replace('=', '', $row['bbcode_tag']) . "]'",			'BBCODE_ID'			=> $num_predefined_bbcodes + ($i * 2),			'BBCODE_TAG'		=> $row['bbcode_tag'],			'BBCODE_HELPLINE'	=> $row['bbcode_helpline'],			'A_BBCODE_HELPLINE'	=> str_replace(array('&amp;', '&quot;', "'", '&lt;', '&gt;'), array('&', '"', "\'", '<', '>'), $row['bbcode_helpline']),		));		$i++;	}	$db->sql_freeresult($result);}/*** Display reasons*/function display_reasons($reason_id = 0){	global $db, $user, $template;	$sql = 'SELECT *		FROM ' . REPORTS_REASONS_TABLE . '		ORDER BY reason_order ASC';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		// If the reason is defined within the language file, we will use the localized version, else just use the database entry...		if (isset($user->lang['report_reasons']['TITLE'][strtoupper($row['reason_title'])]) && isset($user->lang['report_reasons']['DESCRIPTION'][strtoupper($row['reason_title'])]))		{			$row['reason_description'] = $user->lang['report_reasons']['DESCRIPTION'][strtoupper($row['reason_title'])];			$row['reason_title'] = $user->lang['report_reasons']['TITLE'][strtoupper($row['reason_title'])];		}		$template->assign_block_vars('reason', array(			'ID'			=> $row['reason_id'],			'TITLE'			=> $row['reason_title'],			'DESCRIPTION'	=> $row['reason_description'],			'S_SELECTED'	=> ($row['reason_id'] == $reason_id) ? true : false)		);	}	$db->sql_freeresult($result);}/*** Display user activity (action forum/topic)*/function display_user_activity(&$userdata){	global $auth, $template, $db, $user;	global $phpbb_root_path, $phpEx;	// Do not display user activity for users having more than 5000 posts...	if ($userdata['user_posts'] > 5000)	{		return;	}	$forum_ary = array();	// Do not include those forums the user is not having read access to...	$forum_read_ary = $auth->acl_getf('!f_read');	foreach ($forum_read_ary as $forum_id => $not_allowed)	{		if ($not_allowed['f_read'])		{			$forum_ary[] = (int) $forum_id;		}	}	$forum_ary = array_unique($forum_ary);	$forum_sql = (sizeof($forum_ary)) ? 'AND ' . $db->sql_in_set('forum_id', $forum_ary, true) : '';	$fid_m_approve = $auth->acl_getf('m_approve', true);	$sql_m_approve = (!empty($fid_m_approve)) ? 'OR ' . $db->sql_in_set('forum_id', array_keys($fid_m_approve)) : '';	// Obtain active forum	$sql = 'SELECT forum_id, COUNT(post_id) AS num_posts		FROM ' . POSTS_TABLE . '		WHERE poster_id = ' . $userdata['user_id'] . "			AND post_postcount = 1			AND (post_approved = 1				$sql_m_approve)			$forum_sql		GROUP BY forum_id		ORDER BY num_posts DESC";	$result = $db->sql_query_limit($sql, 1);	$active_f_row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!empty($active_f_row))	{		$sql = 'SELECT forum_name			FROM ' . FORUMS_TABLE . '			WHERE forum_id = ' . $active_f_row['forum_id'];		$result = $db->sql_query($sql, 3600);		$active_f_row['forum_name'] = (string) $db->sql_fetchfield('forum_name');		$db->sql_freeresult($result);	}	// Obtain active topic	// We need to exclude passworded forums here so we do not leak the topic title	$forum_ary_topic = array_unique(array_merge($forum_ary, $user->get_passworded_forums()));	$forum_sql_topic = (!empty($forum_ary_topic)) ? 'AND ' . $db->sql_in_set('forum_id', $forum_ary_topic, true) : '';	$sql = 'SELECT topic_id, COUNT(post_id) AS num_posts		FROM ' . POSTS_TABLE . '		WHERE poster_id = ' . $userdata['user_id'] . "			AND post_postcount = 1			AND (post_approved = 1				$sql_m_approve)			$forum_sql_topic		GROUP BY topic_id		ORDER BY num_posts DESC";	$result = $db->sql_query_limit($sql, 1);	$active_t_row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!empty($active_t_row))	{		$sql = 'SELECT topic_title			FROM ' . TOPICS_TABLE . '			WHERE topic_id = ' . $active_t_row['topic_id'];		$result = $db->sql_query($sql);		$active_t_row['topic_title'] = (string) $db->sql_fetchfield('topic_title');		$db->sql_freeresult($result);	}	$userdata['active_t_row'] = $active_t_row;	$userdata['active_f_row'] = $active_f_row;	$active_f_name = $active_f_id = $active_f_count = $active_f_pct = '';	if (!empty($active_f_row['num_posts']))	{		$active_f_name = $active_f_row['forum_name'];		$active_f_id = $active_f_row['forum_id'];		$active_f_count = $active_f_row['num_posts'];		$active_f_pct = ($userdata['user_posts']) ? ($active_f_count / $userdata['user_posts']) * 100 : 0;	}	$active_t_name = $active_t_id = $active_t_count = $active_t_pct = '';	if (!empty($active_t_row['num_posts']))	{		$active_t_name = $active_t_row['topic_title'];		$active_t_id = $active_t_row['topic_id'];		$active_t_count = $active_t_row['num_posts'];		$active_t_pct = ($userdata['user_posts']) ? ($active_t_count / $userdata['user_posts']) * 100 : 0;	}	$l_active_pct = ($userdata['user_id'] != ANONYMOUS && $userdata['user_id'] == $user->data['user_id']) ? $user->lang['POST_PCT_ACTIVE_OWN'] : $user->lang['POST_PCT_ACTIVE'];	$template->assign_vars(array(		'ACTIVE_FORUM'			=> $active_f_name,		'ACTIVE_FORUM_POSTS'	=> ($active_f_count == 1) ? sprintf($user->lang['USER_POST'], 1) : sprintf($user->lang['USER_POSTS'], $active_f_count),		'ACTIVE_FORUM_PCT'		=> sprintf($l_active_pct, $active_f_pct),		'ACTIVE_TOPIC'			=> censor_text($active_t_name),		'ACTIVE_TOPIC_POSTS'	=> ($active_t_count == 1) ? sprintf($user->lang['USER_POST'], 1) : sprintf($user->lang['USER_POSTS'], $active_t_count),		'ACTIVE_TOPIC_PCT'		=> sprintf($l_active_pct, $active_t_pct),		'U_ACTIVE_FORUM'		=> append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $active_f_id),		'U_ACTIVE_TOPIC'		=> append_sid("{$phpbb_root_path}viewtopic.$phpEx", 't=' . $active_t_id),		'S_SHOW_ACTIVITY'		=> true)	);}/*** Topic and forum watching common code*/function watch_topic_forum($mode, &$s_watching, $user_id, $forum_id, $topic_id, $notify_status = 'unset', $start = 0, $item_title = ''){	global $template, $db, $user, $phpEx, $start, $phpbb_root_path;	$table_sql = ($mode == 'forum') ? FORUMS_WATCH_TABLE : TOPICS_WATCH_TABLE;	$where_sql = ($mode == 'forum') ? 'forum_id' : 'topic_id';	$match_id = ($mode == 'forum') ? $forum_id : $topic_id;	$u_url = "uid={$user->data['user_id']}";	$u_url .= ($mode == 'forum') ? '&amp;f' : '&amp;f=' . $forum_id . '&amp;t';	$is_watching = 0;	// Is user watching this thread?	if ($user_id != ANONYMOUS)	{		$can_watch = true;		if ($notify_status == 'unset')		{			$sql = "SELECT notify_status				FROM $table_sql				WHERE $where_sql = $match_id					AND user_id = $user_id";			$result = $db->sql_query($sql);			$notify_status = ($row = $db->sql_fetchrow($result)) ? $row['notify_status'] : NULL;			$db->sql_freeresult($result);		}		if (!is_null($notify_status) && $notify_status !== '')		{			if (isset($_GET['unwatch']))			{				$uid = request_var('uid', 0);				$token = request_var('hash', '');				if ($token && check_link_hash($token, "{$mode}_$match_id") || confirm_box(true))				{					if ($uid != $user_id || $_GET['unwatch'] != $mode)					{						$redirect_url = append_sid("{$phpbb_root_path}view$mode.$phpEx", "$u_url=$match_id&amp;start=$start");						$message = $user->lang['ERR_UNWATCHING'] . '<br /><br />' . sprintf($user->lang['RETURN_' . strtoupper($mode)], '<a href="' . $redirect_url . '">', '</a>');						trigger_error($message);					}					$sql = 'DELETE FROM ' . $table_sql . "						WHERE $where_sql = $match_id							AND user_id = $user_id";					$db->sql_query($sql);					$redirect_url = append_sid("{$phpbb_root_path}view$mode.$phpEx", "$u_url=$match_id&amp;start=$start");					$message = $user->lang['NOT_WATCHING_' . strtoupper($mode)] . '<br /><br />';					$message .= sprintf($user->lang['RETURN_' . strtoupper($mode)], '<a href="' . $redirect_url . '">', '</a>');					meta_refresh(3, $redirect_url);					trigger_error($message);				}				else				{					$s_hidden_fields = array(						'uid'		=> $user->data['user_id'],						'unwatch'	=> $mode,						'start'		=> $start,						'f'			=> $forum_id,					);					if ($mode != 'forum')					{						$s_hidden_fields['t'] = $topic_id;					}					if ($item_title == '')					{						$confirm_box_message = 'UNWATCH_' . strtoupper($mode);					}					else					{						$confirm_box_message = $user->lang('UNWATCH_' . strtoupper($mode) . '_DETAILED', $item_title);					}					confirm_box(false, $confirm_box_message, build_hidden_fields($s_hidden_fields));				}			}			else			{				$is_watching = true;				if ($notify_status != NOTIFY_YES)				{					$sql = 'UPDATE ' . $table_sql . "						SET notify_status = " . NOTIFY_YES . "						WHERE $where_sql = $match_id							AND user_id = $user_id";					$db->sql_query($sql);				}			}		}		else		{			if (isset($_GET['watch']))			{				$uid = request_var('uid', 0);				$token = request_var('hash', '');				if ($token && check_link_hash($token, "{$mode}_$match_id") || confirm_box(true))				{					if ($uid != $user_id || $_GET['watch'] != $mode)					{						$redirect_url = append_sid("{$phpbb_root_path}view$mode.$phpEx", "$u_url=$match_id&amp;start=$start");						$message = $user->lang['ERR_WATCHING'] . '<br /><br />' . sprintf($user->lang['RETURN_' . strtoupper($mode)], '<a href="' . $redirect_url . '">', '</a>');						trigger_error($message);					}					$is_watching = true;					$sql = 'INSERT INTO ' . $table_sql . " (user_id, $where_sql, notify_status)						VALUES ($user_id, $match_id, " . NOTIFY_YES . ')';					$db->sql_query($sql);					$redirect_url = append_sid("{$phpbb_root_path}view$mode.$phpEx", "$u_url=$match_id&amp;start=$start");					$message = $user->lang['ARE_WATCHING_' . strtoupper($mode)] . '<br /><br />' . sprintf($user->lang['RETURN_' . strtoupper($mode)], '<a href="' . $redirect_url . '">', '</a>');					meta_refresh(3, $redirect_url);					trigger_error($message);				}				else				{					$s_hidden_fields = array(						'uid'		=> $user->data['user_id'],						'watch'		=> $mode,						'start'		=> $start,						'f'			=> $forum_id,					);					if ($mode != 'forum')					{						$s_hidden_fields['t'] = $topic_id;					}					$confirm_box_message = (($item_title == '') ? 'WATCH_' . strtoupper($mode) : $user->lang('WATCH_' . strtoupper($mode) . '_DETAILED', $item_title));					confirm_box(false, $confirm_box_message, build_hidden_fields($s_hidden_fields));				}			}			else			{				$is_watching = 0;			}		}	}	else	{		if ((isset($_GET['unwatch']) && $_GET['unwatch'] == $mode) || (isset($_GET['watch']) && $_GET['watch'] == $mode))		{			login_box();		}		else		{			$can_watch = 0;			$is_watching = 0;		}	}	if ($can_watch)	{		$s_watching['link'] = append_sid("{$phpbb_root_path}view$mode.$phpEx", "$u_url=$match_id&amp;" . (($is_watching) ? 'unwatch' : 'watch') . "=$mode&amp;start=$start&amp;hash=" . generate_link_hash("{$mode}_$match_id"));		$s_watching['title'] = $user->lang[(($is_watching) ? 'STOP' : 'START') . '_WATCHING_' . strtoupper($mode)];		$s_watching['is_watching'] = $is_watching;	}	return;}/*** Get user rank title and image** @param int $user_rank the current stored users rank id* @param int $user_posts the users number of posts* @param string &$rank_title the rank title will be stored here after execution* @param string &$rank_img the rank image as full img tag is stored here after execution* @param string &$rank_img_src the rank image source is stored here after execution** Note: since we do not want to break backwards-compatibility, this function will only properly assign ranks to guests if you call it for them with user_posts == false*/function get_user_rank($user_rank, $user_posts, &$rank_title, &$rank_img, &$rank_img_src){	global $ranks, $config, $phpbb_root_path;	if (empty($ranks))	{		global $cache;		$ranks = $cache->obtain_ranks();	}	if (!empty($user_rank))	{		$rank_title = (isset($ranks['special'][$user_rank]['rank_title'])) ? $ranks['special'][$user_rank]['rank_title'] : '';		$rank_img = (!empty($ranks['special'][$user_rank]['rank_image'])) ? '<img src="' . $phpbb_root_path . $config['ranks_path'] . '/' . $ranks['special'][$user_rank]['rank_image'] . '" alt="' . $ranks['special'][$user_rank]['rank_title'] . '" title="' . $ranks['special'][$user_rank]['rank_title'] . '" />' : '';		$rank_img_src = (!empty($ranks['special'][$user_rank]['rank_image'])) ? $phpbb_root_path . $config['ranks_path'] . '/' . $ranks['special'][$user_rank]['rank_image'] : '';	}	else if ($user_posts !== false)	{		if (!empty($ranks['normal']))		{			foreach ($ranks['normal'] as $rank)			{				if ($user_posts >= $rank['rank_min'])				{					$rank_title = $rank['rank_title'];					$rank_img = (!empty($rank['rank_image'])) ? '<img src="' . $phpbb_root_path . $config['ranks_path'] . '/' . $rank['rank_image'] . '" alt="' . $rank['rank_title'] . '" title="' . $rank['rank_title'] . '" />' : '';					$rank_img_src = (!empty($rank['rank_image'])) ? $phpbb_root_path . $config['ranks_path'] . '/' . $rank['rank_image'] : '';					break;				}			}		}	}}/*** Get user avatar** @param string $avatar Users assigned avatar name* @param int $avatar_type Type of avatar* @param string $avatar_width Width of users avatar* @param string $avatar_height Height of users avatar* @param string $alt Optional language string for alt tag within image, can be a language key or text* @param bool $ignore_config Ignores the config-setting, to be still able to view the avatar in the UCP** @return string Avatar image*/function get_user_avatar($avatar, $avatar_type, $avatar_width, $avatar_height, $alt = 'USER_AVATAR', $ignore_config = false){	global $user, $config, $phpbb_root_path, $phpEx;	if (empty($avatar) || !$avatar_type || (!$config['allow_avatar'] && !$ignore_config))	{		return '';	}	$avatar_img = '';	switch ($avatar_type)	{		case AVATAR_UPLOAD:			if (!$config['allow_avatar_upload'] && !$ignore_config)			{				return '';			}			$avatar_img = $phpbb_root_path . "download/file.$phpEx?avatar=";		break;		case AVATAR_GALLERY:			if (!$config['allow_avatar_local'] && !$ignore_config)			{				return '';			}			$avatar_img = $phpbb_root_path . $config['avatar_gallery_path'] . '/';		break;		case AVATAR_REMOTE:			if (!$config['allow_avatar_remote'] && !$ignore_config)			{				return '';			}		break;	}	$avatar_img .= $avatar;	return '<img src="' . (str_replace(' ', '%20', $avatar_img)) . '" width="' . $avatar_width . '" height="' . $avatar_height . '" alt="' . ((!empty($user->lang[$alt])) ? $user->lang[$alt] : $alt) . '" />';}?>
<?php/**** posting [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine$lang = array_merge($lang, array(	'ADD_ATTACHMENT'			=> 'Upload attachment',	'ADD_ATTACHMENT_EXPLAIN'	=> 'If you wish to attach one or more files enter the details below.',	'ADD_FILE'					=> 'Add the file',	'ADD_POLL'					=> 'Poll creation',	'ADD_POLL_EXPLAIN'			=> 'If you do not want to add a poll to your topic leave the fields blank.',	'ALREADY_DELETED'			=> 'Sorry but this message is already deleted.',	'ATTACH_QUOTA_REACHED'		=> 'Sorry, the board attachment quota has been reached.',	'ATTACH_SIG'				=> 'Attach a signature (signatures can be altered via the UCP)',	'BBCODE_A_HELP'				=> 'Inline uploaded attachment: [attachment=]filename.ext[/attachment]',	'BBCODE_B_HELP'				=> 'Bold text: [b]text[/b]',	'BBCODE_C_HELP'				=> 'Code display: [code]code[/code]',	'BBCODE_D_HELP'				=> 'Flash: [flash=width,height]http://url[/flash]',	'BBCODE_F_HELP'				=> 'Font size: [size=85]small text[/size]',	'BBCODE_IS_OFF'				=> '%sBBCode%s is <em>OFF</em>',	'BBCODE_IS_ON'				=> '%sBBCode%s is <em>ON</em>',	'BBCODE_I_HELP'				=> 'Italic text: [i]text[/i]',	'BBCODE_L_HELP'				=> 'List: [list]text[/list]',	'BBCODE_LISTITEM_HELP'		=> 'List item: [*]text[/*]',	'BBCODE_O_HELP'				=> 'Ordered list: [list=]text[/list]',	'BBCODE_P_HELP'				=> 'Insert image: [img]http://image_url[/img]',	'BBCODE_Q_HELP'				=> 'Quote text: [quote]text[/quote]',	'BBCODE_S_HELP'				=> 'Font colour: [color=red]text[/color]  Tip: you can also use color=#FF0000',	'BBCODE_U_HELP'				=> 'Underline text: [u]text[/u]',	'BBCODE_W_HELP'				=> 'Insert URL: [url]http://url[/url] or [url=http://url]URL text[/url]',	'BBCODE_Y_HELP'				=> 'List: Add list element',	'BUMP_ERROR'				=> 'You cannot bump this topic so soon after the last post.',	'CANNOT_DELETE_REPLIED'		=> 'Sorry but you may only delete posts which have not been replied to.',	'CANNOT_EDIT_POST_LOCKED'	=> 'This post has been locked. You can no longer edit that post.',	'CANNOT_EDIT_TIME'			=> 'You can no longer edit or delete that post.',	'CANNOT_POST_ANNOUNCE'		=> 'Sorry but you cannot post announcements.',	'CANNOT_POST_STICKY'		=> 'Sorry but you cannot post sticky topics.',	'CHANGE_TOPIC_TO'			=> 'Change topic type to',	'CLOSE_TAGS'				=> 'Close tags',	'CURRENT_TOPIC'				=> 'Current topic',	'DELETE_FILE'				=> 'Delete file',	'DELETE_MESSAGE'			=> 'Delete message',	'DELETE_MESSAGE_CONFIRM'	=> 'Are you sure you want to delete this message?',	'DELETE_OWN_POSTS'			=> 'Sorry but you can only delete your own posts.',	'DELETE_POST_CONFIRM'		=> 'Are you sure you want to delete this post?',	'DELETE_POST_WARN'			=> 'Once deleted the post cannot be recovered',	'DISABLE_BBCODE'			=> 'Disable BBCode',	'DISABLE_MAGIC_URL'			=> 'Do not automatically parse URLs',	'DISABLE_SMILIES'			=> 'Disable smilies',	'DISALLOWED_CONTENT'		=> 'The upload was rejected because the uploaded file was identified as a possible attack vector.',	'DISALLOWED_EXTENSION'		=> 'The extension %s is not allowed.',	'DRAFT_LOADED'				=> 'Draft loaded into posting area, you may want to finish your post now.<br />Your draft will be deleted after submitting this post.',	'DRAFT_LOADED_PM'			=> 'Draft loaded into message area, you may want to finish your private message now.<br />Your draft will be deleted after submitting this private message.',	'DRAFT_SAVED'				=> 'Draft successfully saved.',	'DRAFT_TITLE'				=> 'Draft title',	'EDIT_REASON'				=> 'Reason for editing this post',	'EMPTY_FILEUPLOAD'			=> 'The uploaded file is empty.',	'EMPTY_MESSAGE'				=> 'You must enter a message when posting.',	'EMPTY_REMOTE_DATA'			=> 'File could not be uploaded, please try uploading the file manually.',	'FLASH_IS_OFF'				=> '[flash] is <em>OFF</em>',	'FLASH_IS_ON'				=> '[flash] is <em>ON</em>',	'FLOOD_ERROR'				=> 'You cannot make another post so soon after your last.',	'FONT_COLOR'				=> 'Font colour',	'FONT_COLOR_HIDE'			=> 'Hide font colour',	'FONT_HUGE'					=> 'Huge',	'FONT_LARGE'				=> 'Large',	'FONT_NORMAL'				=> 'Normal',	'FONT_SIZE'					=> 'Font size',	'FONT_SMALL'				=> 'Small',	'FONT_TINY'					=> 'Tiny',	'GENERAL_UPLOAD_ERROR'		=> 'Could not upload attachment to %s.',	'IMAGES_ARE_OFF'			=> '[img] is <em>OFF</em>',	'IMAGES_ARE_ON'				=> '[img] is <em>ON</em>',	'INVALID_FILENAME'			=> '%s is an invalid filename.',	'LOAD'						=> 'Load',	'LOAD_DRAFT'				=> 'Load draft',	'LOAD_DRAFT_EXPLAIN'		=> 'Here you are able to select the draft you want to continue writing. Your current post will be cancelled, all current post contents will be deleted. View, edit and delete drafts within your User Control Panel.',	'LOGIN_EXPLAIN_BUMP'		=> 'You need to login in order to bump topics within this forum.',	'LOGIN_EXPLAIN_DELETE'		=> 'You need to login in order to delete posts within this forum.',	'LOGIN_EXPLAIN_POST'		=> 'You need to login in order to post within this forum.',	'LOGIN_EXPLAIN_QUOTE'		=> 'You need to login in order to quote posts within this forum.',	'LOGIN_EXPLAIN_REPLY'		=> 'You need to login in order to reply to topics within this forum.',	'MAX_FONT_SIZE_EXCEEDED'	=> 'You may only use fonts up to size %1$d.',	'MAX_FLASH_HEIGHT_EXCEEDED'	=> 'Your flash files may only be up to %1$d pixels high.',	'MAX_FLASH_WIDTH_EXCEEDED'	=> 'Your flash files may only be up to %1$d pixels wide.',	'MAX_IMG_HEIGHT_EXCEEDED'	=> 'Your images may only be up to %1$d pixels high.',	'MAX_IMG_WIDTH_EXCEEDED'	=> 'Your images may only be up to %1$d pixels wide.',	'MESSAGE_BODY_EXPLAIN'		=> 'Enter your message here, it may contain no more than <strong>%d</strong> characters.',	'MESSAGE_DELETED'			=> 'This message has been deleted successfully.',	'MORE_SMILIES'				=> 'View more smilies',	'NOTIFY_REPLY'				=> 'Notify me when a reply is posted',	'NOT_UPLOADED'				=> 'File could not be uploaded.',	'NO_DELETE_POLL_OPTIONS'	=> 'You cannot delete existing poll options.',	'NO_PM_ICON'				=> 'No PM icon',	'NO_POLL_TITLE'				=> 'You have to enter a poll title.',	'NO_POST'					=> 'The requested post does not exist.',	'NO_POST_MODE'				=> 'No post mode specified.',	'PARTIAL_UPLOAD'			=> 'The uploaded file was only partially uploaded.',	'PHP_SIZE_NA'				=> 'The attachments file size is too large.<br />Could not determine the maximum size defined by PHP in php.ini.',	'PHP_SIZE_OVERRUN'			=> 'The attachments file size is too large, the maximum upload size is %1$d %2$s.<br />Please note this is set in php.ini and cannot be overridden.',	'PLACE_INLINE'				=> 'Place inline',	'POLL_DELETE'				=> 'Delete poll',	'POLL_FOR'					=> 'Run poll for',	'POLL_FOR_EXPLAIN'			=> 'Enter 0 or leave blank for a never ending poll.',	'POLL_MAX_OPTIONS'			=> 'Options per user',	'POLL_MAX_OPTIONS_EXPLAIN'	=> 'This is the number of options each user may select when voting.',	'POLL_OPTIONS'				=> 'Poll options',	'POLL_OPTIONS_EXPLAIN'		=> 'Place each option on a new line. You may enter up to <strong>%d</strong> options.',	'POLL_OPTIONS_EDIT_EXPLAIN'	=> 'Place each option on a new line. You may enter up to <strong>%d</strong> options. If you remove or add options all previous votes will be reset.',	'POLL_QUESTION'				=> 'Poll question',	'POLL_TITLE_TOO_LONG'		=> 'The poll title must contain fewer than 100 characters.',	'POLL_TITLE_COMP_TOO_LONG'	=> 'The parsed size of your poll title is too large, consider removing BBCodes or smilies.',	'POLL_VOTE_CHANGE'			=> 'Allow re-voting',	'POLL_VOTE_CHANGE_EXPLAIN'	=> 'If enabled users are able to change their vote.',	'POSTED_ATTACHMENTS'		=> 'Posted attachments',	'POST_APPROVAL_NOTIFY'		=> 'You will be notified when your post has been approved.',	'POST_CONFIRMATION'			=> 'Confirmation of post',	'POST_CONFIRM_EXPLAIN'		=> 'To prevent automated posts the board requires you to enter a confirmation code. The code is displayed in the image you should see below. If you are visually impaired or cannot otherwise read this code please contact the %sBoard Administrator%s.',	'POST_DELETED'				=> 'This message has been deleted successfully.',	'POST_EDITED'				=> 'This message has been edited successfully.',	'POST_EDITED_MOD'			=> 'This message has been edited successfully, but it will need to be approved by a moderator before it is publicly viewable.',	'POST_GLOBAL'				=> 'Global',	'POST_ICON'					=> 'Post icon',	'POST_NORMAL'				=> 'Normal',	'POST_REVIEW'				=> 'Post review',	'POST_REVIEW_EDIT'			=> 'Post review',	'POST_REVIEW_EDIT_EXPLAIN'	=> 'This post has been altered by another user while you were editing it. You may wish to review the current version of this post and adjust your edits.',	'POST_REVIEW_EXPLAIN'		=> 'At least one new post has been made to this topic. You may wish to review your post in light of this.',	'POST_STORED'				=> 'This message has been posted successfully.',	'POST_STORED_MOD'			=> 'This message has been submitted successfully, but it will need to be approved by a moderator before it is publicly viewable.',	'POST_TOPIC_AS'				=> 'Post topic as',	'PROGRESS_BAR'				=> 'Progress bar',	'QUOTE_DEPTH_EXCEEDED'		=> 'You may embed only %1$d quotes within each other.',	'SAVE'						=> 'Save',	'SAVE_DATE'					=> 'Saved at',	'SAVE_DRAFT'				=> 'Save draft',	'SAVE_DRAFT_CONFIRM'		=> 'Please note that saved drafts only include the subject and the message, any other element will be removed. Do you want to save your draft now?',	'SMILIES'					=> 'Smilies',	'SMILIES_ARE_OFF'			=> 'Smilies are <em>OFF</em>',	'SMILIES_ARE_ON'			=> 'Smilies are <em>ON</em>',	'STICKY_ANNOUNCE_TIME_LIMIT'=> 'Sticky/Announcement time limit',	'STICK_TOPIC_FOR'			=> 'Stick topic for',	'STICK_TOPIC_FOR_EXPLAIN'	=> 'Enter 0 or leave blank for a never ending Sticky/Announcement. Please note that this number is relative to the date of the post.',	'STYLES_TIP'				=> 'Tip: Styles can be applied quickly to selected text.',	'TOO_FEW_CHARS'				=> 'Your message contains too few characters.',	'TOO_FEW_CHARS_LIMIT'		=> 'Your message contains %1$d characters. The minimum number of characters you need to enter is %2$d.',	'TOO_FEW_POLL_OPTIONS'		=> 'You must enter at least two poll options.',	'TOO_MANY_ATTACHMENTS'		=> 'Cannot add another attachment, %d is the maximum.',	'TOO_MANY_CHARS'			=> 'Your message contains too many characters.',	'TOO_MANY_CHARS_POST'		=> 'Your message contains %1$d characters. The maximum number of allowed characters is %2$d.',	'TOO_MANY_CHARS_SIG'		=> 'Your signature contains %1$d characters. The maximum number of allowed characters is %2$d.',	'TOO_MANY_POLL_OPTIONS'		=> 'You have tried to enter too many poll options.',	'TOO_MANY_SMILIES'			=> 'Your message contains too many smilies. The maximum number of smilies allowed is %d.',	'TOO_MANY_URLS'				=> 'Your message contains too many URLs. The maximum number of URLs allowed is %d.',	'TOO_MANY_USER_OPTIONS'		=> 'You cannot specify more options per user than existing poll options.',	'TOPIC_BUMPED'				=> 'Topic has been bumped successfully.',	'UNAUTHORISED_BBCODE'		=> 'You cannot use certain BBCodes: %s.',	'UNGLOBALISE_EXPLAIN'		=> 'To switch this topic back from being global to a normal topic, you need to select the forum you wish this topic to be displayed.',	'UPDATE_COMMENT'			=> 'Update comment',	'URL_INVALID'				=> 'The URL you specified is invalid.',	'URL_NOT_FOUND'				=> 'The file specified could not be found.',	'URL_IS_OFF'				=> '[url] is <em>OFF</em>',	'URL_IS_ON'					=> '[url] is <em>ON</em>',	'USER_CANNOT_BUMP'			=> 'You cannot bump topics in this forum.',	'USER_CANNOT_DELETE'		=> 'You cannot delete posts in this forum.',	'USER_CANNOT_EDIT'			=> 'You cannot edit posts in this forum.',	'USER_CANNOT_REPLY'			=> 'You cannot reply in this forum.',	'USER_CANNOT_FORUM_POST'	=> 'You are not able to do posting operations on this forum due to the forum type not supporting it.',	'VIEW_MESSAGE'				=> '%sView your submitted message%s',	'VIEW_PRIVATE_MESSAGE'		=> '%sView your submitted private message%s',	'WRONG_FILESIZE'			=> 'The file is too big, maximum allowed size is %1d %2s.',	'WRONG_SIZE'				=> 'The image must be at least %1$d pixels wide, %2$d pixels high and at most %3$d pixels wide and %4$d pixels high. The submitted image is %5$d pixels wide and %6$d pixels high.',));?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** @package acp*/class acp_permission_roles{	var $u_action;	function main($id, $mode)	{		global $db, $user, $auth, $template, $cache;		global $config, $phpbb_root_path, $phpbb_admin_path, $phpEx;		include_once($phpbb_root_path . 'includes/functions_user.' . $phpEx);		include_once($phpbb_root_path . 'includes/acp/auth.' . $phpEx);		$auth_admin = new auth_admin();		$user->add_lang('acp/permissions');		add_permission_language();		$this->tpl_name = 'acp_permission_roles';		$submit = (isset($_POST['submit'])) ? true : false;		$role_id = request_var('role_id', 0);		$action = request_var('action', '');		$action = (isset($_POST['add'])) ? 'add' : $action;		$form_name = 'acp_permissions';		add_form_key($form_name);		switch ($mode)		{			case 'admin_roles':				$permission_type = 'a_';				$this->page_title = 'ACP_ADMIN_ROLES';			break;			case 'user_roles':				$permission_type = 'u_';				$this->page_title = 'ACP_USER_ROLES';			break;			case 'mod_roles':				$permission_type = 'm_';				$this->page_title = 'ACP_MOD_ROLES';			break;			case 'forum_roles':				$permission_type = 'f_';				$this->page_title = 'ACP_FORUM_ROLES';			break;			default:				trigger_error('NO_MODE', E_USER_ERROR);			break;		}		$template->assign_vars(array(			'L_TITLE'		=> $user->lang[$this->page_title],			'L_EXPLAIN'		=> $user->lang[$this->page_title . '_EXPLAIN'])		);		// Take action... admin submitted something		if ($submit || $action == 'remove')		{			switch ($action)			{				case 'remove':					if (!$role_id)					{						trigger_error($user->lang['NO_ROLE_SELECTED'] . adm_back_link($this->u_action), E_USER_WARNING);					}					$sql = 'SELECT *						FROM ' . ACL_ROLES_TABLE . '						WHERE role_id = ' . $role_id;					$result = $db->sql_query($sql);					$role_row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if (!$role_row)					{						trigger_error($user->lang['NO_ROLE_SELECTED'] . adm_back_link($this->u_action), E_USER_WARNING);					}					if (confirm_box(true))					{						$this->remove_role($role_id, $permission_type);						$role_name = (!empty($user->lang[$role_row['role_name']])) ? $user->lang[$role_row['role_name']] : $role_row['role_name'];						add_log('admin', 'LOG_' . strtoupper($permission_type) . 'ROLE_REMOVED', $role_name);						trigger_error($user->lang['ROLE_DELETED'] . adm_back_link($this->u_action));					}					else					{						confirm_box(false, 'DELETE_ROLE', build_hidden_fields(array(							'i'			=> $id,							'mode'		=> $mode,							'role_id'	=> $role_id,							'action'	=> $action,						)));					}				break;				case 'edit':					if (!$role_id)					{						trigger_error($user->lang['NO_ROLE_SELECTED'] . adm_back_link($this->u_action), E_USER_WARNING);					}					// Get role we edit					$sql = 'SELECT *						FROM ' . ACL_ROLES_TABLE . '						WHERE role_id = ' . $role_id;					$result = $db->sql_query($sql);					$role_row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if (!$role_row)					{						trigger_error($user->lang['NO_ROLE_SELECTED'] . adm_back_link($this->u_action), E_USER_WARNING);					}				// no break;				case 'add':					if (!check_form_key($form_name))					{						trigger_error($user->lang['FORM_INVALID']. adm_back_link($this->u_action), E_USER_WARNING);					}					$role_name = utf8_normalize_nfc(request_var('role_name', '', true));					$role_description = utf8_normalize_nfc(request_var('role_description', '', true));					$auth_settings = request_var('setting', array('' => 0));					if (!$role_name)					{						trigger_error($user->lang['NO_ROLE_NAME_SPECIFIED'] . adm_back_link($this->u_action), E_USER_WARNING);					}					if (utf8_strlen($role_description) > 4000)					{						trigger_error($user->lang['ROLE_DESCRIPTION_LONG'] . adm_back_link($this->u_action), E_USER_WARNING);					}					// if we add/edit a role we check the name to be unique among the settings...					$sql = 'SELECT role_id						FROM ' . ACL_ROLES_TABLE . "						WHERE role_type = '" . $db->sql_escape($permission_type) . "'							AND role_name = '" . $db->sql_escape($role_name) . "'";					$result = $db->sql_query($sql);					$row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					// Make sure we only print out the error if we add the role or change it's name					if ($row && ($mode == 'add' || ($mode == 'edit' && $role_row['role_name'] != $role_name)))					{						trigger_error(sprintf($user->lang['ROLE_NAME_ALREADY_EXIST'], $role_name) . adm_back_link($this->u_action), E_USER_WARNING);					}					$sql_ary = array(						'role_name'			=> (string) $role_name,						'role_description'	=> (string) $role_description,						'role_type'			=> (string) $permission_type,					);					if ($action == 'edit')					{						$sql = 'UPDATE ' . ACL_ROLES_TABLE . '							SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '							WHERE role_id = ' . $role_id;						$db->sql_query($sql);					}					else					{						// Get maximum role order for inserting a new role...						$sql = 'SELECT MAX(role_order) as max_order							FROM ' . ACL_ROLES_TABLE . "							WHERE role_type = '" . $db->sql_escape($permission_type) . "'";						$result = $db->sql_query($sql);						$max_order = (int) $db->sql_fetchfield('max_order');						$db->sql_freeresult($result);						$sql_ary['role_order'] = $max_order + 1;						$sql = 'INSERT INTO ' . ACL_ROLES_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);						$db->sql_query($sql);						$role_id = $db->sql_nextid();					}					// Now add the auth settings					$auth_admin->acl_set_role($role_id, $auth_settings);					$role_name = (!empty($user->lang[$role_name])) ? $user->lang[$role_name] : $role_name;					add_log('admin', 'LOG_' . strtoupper($permission_type) . 'ROLE_' . strtoupper($action), $role_name);					trigger_error($user->lang['ROLE_' . strtoupper($action) . '_SUCCESS'] . adm_back_link($this->u_action));				break;			}		}		// Display screens		switch ($action)		{			case 'add':				$options_from = request_var('options_from', 0);				$role_row = array(					'role_name'			=> utf8_normalize_nfc(request_var('role_name', '', true)),					'role_description'	=> utf8_normalize_nfc(request_var('role_description', '', true)),					'role_type'			=> $permission_type,				);				if ($options_from)				{					$sql = 'SELECT p.auth_option_id, p.auth_setting, o.auth_option						FROM ' . ACL_ROLES_DATA_TABLE . ' p, ' . ACL_OPTIONS_TABLE . ' o						WHERE o.auth_option_id = p.auth_option_id							AND p.role_id = ' . $options_from . '						ORDER BY p.auth_option_id';					$result = $db->sql_query($sql);					$auth_options = array();					while ($row = $db->sql_fetchrow($result))					{						$auth_options[$row['auth_option']] = $row['auth_setting'];					}					$db->sql_freeresult($result);				}				else				{					$sql = 'SELECT auth_option_id, auth_option						FROM ' . ACL_OPTIONS_TABLE . "						WHERE auth_option " . $db->sql_like_expression($permission_type . $db->any_char) . "							AND auth_option <> '{$permission_type}'						ORDER BY auth_option_id";					$result = $db->sql_query($sql);					$auth_options = array();					while ($row = $db->sql_fetchrow($result))					{						$auth_options[$row['auth_option']] = ACL_NO;					}					$db->sql_freeresult($result);				}			// no break;			case 'edit':				if ($action == 'edit')				{					if (!$role_id)					{						trigger_error($user->lang['NO_ROLE_SELECTED'] . adm_back_link($this->u_action), E_USER_WARNING);					}										$sql = 'SELECT *						FROM ' . ACL_ROLES_TABLE . '						WHERE role_id = ' . $role_id;					$result = $db->sql_query($sql);					$role_row = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					$sql = 'SELECT p.auth_option_id, p.auth_setting, o.auth_option						FROM ' . ACL_ROLES_DATA_TABLE . ' p, ' . ACL_OPTIONS_TABLE . ' o						WHERE o.auth_option_id = p.auth_option_id							AND p.role_id = ' . $role_id . '						ORDER BY p.auth_option_id';					$result = $db->sql_query($sql);					$auth_options = array();					while ($row = $db->sql_fetchrow($result))					{						$auth_options[$row['auth_option']] = $row['auth_setting'];					}					$db->sql_freeresult($result);				}				if (!$role_row)				{					trigger_error($user->lang['NO_ROLE_SELECTED'] . adm_back_link($this->u_action), E_USER_WARNING);				}				$template->assign_vars(array(					'S_EDIT'			=> true,					'U_ACTION'			=> $this->u_action . "&amp;action={$action}&amp;role_id={$role_id}",					'U_BACK'			=> $this->u_action,					'ROLE_NAME'			=> $role_row['role_name'],					'ROLE_DESCRIPTION'	=> $role_row['role_description'],					'L_ACL_TYPE'		=> $user->lang['ACL_TYPE_' . strtoupper($permission_type)],					)				);				// We need to fill the auth options array with ACL_NO options ;)				$sql = 'SELECT auth_option_id, auth_option					FROM ' . ACL_OPTIONS_TABLE . "					WHERE auth_option " . $db->sql_like_expression($permission_type . $db->any_char) . "						AND auth_option <> '{$permission_type}'					ORDER BY auth_option_id";				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					if (!isset($auth_options[$row['auth_option']]))					{						$auth_options[$row['auth_option']] = ACL_NO;					}				}				$db->sql_freeresult($result);				// Unset global permission option				unset($auth_options[$permission_type]);				// Display auth options				$this->display_auth_options($auth_options);				// Get users/groups/forums using this preset...				if ($action == 'edit')				{					$hold_ary = $auth_admin->get_role_mask($role_id);					if (sizeof($hold_ary))					{						$role_name = (!empty($user->lang[$role_row['role_name']])) ? $user->lang[$role_row['role_name']] : $role_row['role_name'];						$template->assign_vars(array(							'S_DISPLAY_ROLE_MASK'	=> true,							'L_ROLE_ASSIGNED_TO'	=> sprintf($user->lang['ROLE_ASSIGNED_TO'], $role_name))						);						$auth_admin->display_role_mask($hold_ary);					}				}				return;			break;			case 'move_up':			case 'move_down':				$order = request_var('order', 0);				$order_total = $order * 2 + (($action == 'move_up') ? -1 : 1);				$sql = 'UPDATE ' . ACL_ROLES_TABLE . '					SET role_order = ' . $order_total . " - role_order					WHERE role_type = '" . $db->sql_escape($permission_type) . "'						AND role_order IN ($order, " . (($action == 'move_up') ? $order - 1 : $order + 1) . ')';				$db->sql_query($sql);			break;		}		// By default, check that role_order is valid and fix it if necessary		$sql = 'SELECT role_id, role_order			FROM ' . ACL_ROLES_TABLE . "			WHERE role_type = '" . $db->sql_escape($permission_type) . "'			ORDER BY role_order ASC";		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			$order = 0;			do			{				$order++;				if ($row['role_order'] != $order)				{					$db->sql_query('UPDATE ' . ACL_ROLES_TABLE . " SET role_order = $order WHERE role_id = {$row['role_id']}");				}			}			while ($row = $db->sql_fetchrow($result));		}		$db->sql_freeresult($result);		// Display assigned items?		$display_item = request_var('display_item', 0);		// Select existing roles		$sql = 'SELECT *			FROM ' . ACL_ROLES_TABLE . "			WHERE role_type = '" . $db->sql_escape($permission_type) . "'			ORDER BY role_order ASC";		$result = $db->sql_query($sql);		$s_role_options = '';		while ($row = $db->sql_fetchrow($result))		{			$role_name = (!empty($user->lang[$row['role_name']])) ? $user->lang[$row['role_name']] : $row['role_name'];			$template->assign_block_vars('roles', array(				'ROLE_NAME'				=> $role_name,				'ROLE_DESCRIPTION'		=> (!empty($user->lang[$row['role_description']])) ? $user->lang[$row['role_description']] : nl2br($row['role_description']),				'U_EDIT'			=> $this->u_action . '&amp;action=edit&amp;role_id=' . $row['role_id'],				'U_REMOVE'			=> $this->u_action . '&amp;action=remove&amp;role_id=' . $row['role_id'],				'U_MOVE_UP'			=> $this->u_action . '&amp;action=move_up&amp;order=' . $row['role_order'],				'U_MOVE_DOWN'		=> $this->u_action . '&amp;action=move_down&amp;order=' . $row['role_order'],				'U_DISPLAY_ITEMS'	=> ($row['role_id'] == $display_item) ? '' : $this->u_action . '&amp;display_item=' . $row['role_id'] . '#assigned_to')			);			$s_role_options .= '<option value="' . $row['role_id'] . '">' . $role_name . '</option>';			if ($display_item == $row['role_id'])			{				$template->assign_vars(array(					'L_ROLE_ASSIGNED_TO'	=> sprintf($user->lang['ROLE_ASSIGNED_TO'], $role_name))				);			}		}		$db->sql_freeresult($result);		$template->assign_vars(array(			'S_ROLE_OPTIONS'		=> $s_role_options)		);		if ($display_item)		{			$template->assign_vars(array(				'S_DISPLAY_ROLE_MASK'	=> true)			);			$hold_ary = $auth_admin->get_role_mask($display_item);			$auth_admin->display_role_mask($hold_ary);		}	}	/**	* Display permission settings able to be set	*/	function display_auth_options($auth_options)	{		global $template, $user;		$content_array = $categories = array();		$key_sort_array = array(0);		$auth_options = array(0 => $auth_options);		// Making use of auth_admin method here (we do not really want to change two similar code fragments)		auth_admin::build_permission_array($auth_options, $content_array, $categories, $key_sort_array);		$content_array = $content_array[0];		$template->assign_var('S_NUM_PERM_COLS', sizeof($categories));		// Assign to template		foreach ($content_array as $cat => $cat_array)		{			$template->assign_block_vars('auth', array(				'CAT_NAME'	=> $user->lang['permission_cat'][$cat],				'S_YES'		=> ($cat_array['S_YES'] && !$cat_array['S_NEVER'] && !$cat_array['S_NO']) ? true : false,				'S_NEVER'	=> ($cat_array['S_NEVER'] && !$cat_array['S_YES'] && !$cat_array['S_NO']) ? true : false,				'S_NO'		=> ($cat_array['S_NO'] && !$cat_array['S_NEVER'] && !$cat_array['S_YES']) ? true : false)			);			foreach ($cat_array['permissions'] as $permission => $allowed)			{				$template->assign_block_vars('auth.mask', array(					'S_YES'		=> ($allowed == ACL_YES) ? true : false,					'S_NEVER'	=> ($allowed == ACL_NEVER) ? true : false,					'S_NO'		=> ($allowed == ACL_NO) ? true : false,					'FIELD_NAME'	=> $permission,					'PERMISSION'	=> $user->lang['acl_' . $permission]['lang'])				);			}		}	}	/**	* Remove role	*/	function remove_role($role_id, $permission_type)	{		global $db;		$auth_admin = new auth_admin();		// Get complete auth array		$sql = 'SELECT auth_option, auth_option_id			FROM ' . ACL_OPTIONS_TABLE . "			WHERE auth_option " . $db->sql_like_expression($permission_type . $db->any_char);		$result = $db->sql_query($sql);		$auth_settings = array();		while ($row = $db->sql_fetchrow($result))		{			$auth_settings[$row['auth_option']] = ACL_NO;		}		$db->sql_freeresult($result);		// Get the role auth settings we need to re-set...		$sql = 'SELECT o.auth_option, r.auth_setting			FROM ' . ACL_ROLES_DATA_TABLE . ' r, ' . ACL_OPTIONS_TABLE . ' o			WHERE o.auth_option_id = r.auth_option_id				AND r.role_id = ' . $role_id;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$auth_settings[$row['auth_option']] = $row['auth_setting'];		}		$db->sql_freeresult($result);		// Get role assignments		$hold_ary = $auth_admin->get_role_mask($role_id);		// Re-assign permissions		foreach ($hold_ary as $forum_id => $forum_ary)		{			if (isset($forum_ary['users']))			{				$auth_admin->acl_set('user', $forum_id, $forum_ary['users'], $auth_settings, 0, false);			}			if (isset($forum_ary['groups']))			{				$auth_admin->acl_set('group', $forum_id, $forum_ary['groups'], $auth_settings, 0, false);			}		}		// Remove role from users and groups just to be sure (happens through acl_set)		$sql = 'DELETE FROM ' . ACL_USERS_TABLE . '			WHERE auth_role_id = ' . $role_id;		$db->sql_query($sql);		$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . '			WHERE auth_role_id = ' . $role_id;		$db->sql_query($sql);		// Remove role data and role		$sql = 'DELETE FROM ' . ACL_ROLES_DATA_TABLE . '			WHERE role_id = ' . $role_id;		$db->sql_query($sql);		$sql = 'DELETE FROM ' . ACL_ROLES_TABLE . '			WHERE role_id = ' . $role_id;		$db->sql_query($sql);		$auth_admin->acl_clear_prefetch();	}}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class ucp_prefs_info{	function module()	{		return array(			'filename'	=> 'ucp_prefs',			'title'		=> 'UCP_PREFS',			'version'	=> '1.0.0',			'modes'		=> array(				'personal'	=> array('title' => 'UCP_PREFS_PERSONAL', 'auth' => '', 'cat' => array('UCP_PREFS')),				'post'		=> array('title' => 'UCP_PREFS_POST', 'auth' => '', 'cat' => array('UCP_PREFS')),				'view'		=> array('title' => 'UCP_PREFS_VIEW', 'auth' => '', 'cat' => array('UCP_PREFS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}if (!class_exists('bbcode')){	include($phpbb_root_path . 'includes/bbcode.' . $phpEx);}/*** BBCODE FIRSTPASS* BBCODE first pass class (functions for parsing messages for db storage)* @package phpBB3*/class bbcode_firstpass extends bbcode{	var $message = '';	var $warn_msg = array();	var $parsed_items = array();	/**	* Parse BBCode	*/	function parse_bbcode()	{		if (!$this->bbcodes)		{			$this->bbcode_init();		}		global $user;		$this->bbcode_bitfield = '';		$bitfield = new bitfield();		foreach ($this->bbcodes as $bbcode_name => $bbcode_data)		{			if (isset($bbcode_data['disabled']) && $bbcode_data['disabled'])			{				foreach ($bbcode_data['regexp'] as $regexp => $replacement)				{					if (preg_match($regexp, $this->message))					{						$this->warn_msg[] = sprintf($user->lang['UNAUTHORISED_BBCODE'] , '[' . $bbcode_name . ']');						continue;					}				}			}			else			{				foreach ($bbcode_data['regexp'] as $regexp => $replacement)				{					// The pattern gets compiled and cached by the PCRE extension,					// it should not demand recompilation					if (preg_match($regexp, $this->message))					{						$this->message = preg_replace($regexp, $replacement, $this->message);						$bitfield->set($bbcode_data['bbcode_id']);					}				}			}		}		$this->bbcode_bitfield = $bitfield->get_base64();	}	/**	* Prepare some bbcodes for better parsing	*/	function prepare_bbcodes()	{		// Ok, seems like users instead want the no-parsing of urls, smilies, etc. after and before and within quote tags being tagged as "not a bug".		// Fine by me ;) Will ease our live... but do not come back and cry at us, we won't hear you.		/* Add newline at the end and in front of each quote block to prevent parsing errors (urls, smilies, etc.)		if (strpos($this->message, '[quote') !== false && strpos($this->message, '[/quote]') !== false)		{			$this->message = str_replace("\r\n", "\n", $this->message);			// We strip newlines and spaces after and before quotes in quotes (trimming) and then add exactly one newline			$this->message = preg_replace('#\[quote(=&quot;.*?&quot;)?\]\s*(.*?)\s*\[/quote\]#siu', '[quote\1]' . "\n" . '\2' ."\n[/quote]", $this->message);		}		*/		// Add other checks which needs to be placed before actually parsing anything (be it bbcodes, smilies, urls...)	}	/**	* Init bbcode data for later parsing	*/	function bbcode_init($allow_custom_bbcode = true)	{		static $rowset;		// This array holds all bbcode data. BBCodes will be processed in this		// order, so it is important to keep [code] in first position and		// [quote] in second position.		// To parse multiline URL we enable dotall option setting only for URL text		// but not for link itself, thus [url][/url] is not affected.		$this->bbcodes = array(			'code'			=> array('bbcode_id' => 8,	'regexp' => array('#\[code(?:=([a-z]+))?\](.+\[/code\])#uise' => "\$this->bbcode_code('\$1', '\$2')")),			'quote'			=> array('bbcode_id' => 0,	'regexp' => array('#\[quote(?:=&quot;(.*?)&quot;)?\](.+)\[/quote\]#uise' => "\$this->bbcode_quote('\$0')")),			'attachment'	=> array('bbcode_id' => 12,	'regexp' => array('#\[attachment=([0-9]+)\](.*?)\[/attachment\]#uise' => "\$this->bbcode_attachment('\$1', '\$2')")),			'b'				=> array('bbcode_id' => 1,	'regexp' => array('#\[b\](.*?)\[/b\]#uise' => "\$this->bbcode_strong('\$1')")),			'i'				=> array('bbcode_id' => 2,	'regexp' => array('#\[i\](.*?)\[/i\]#uise' => "\$this->bbcode_italic('\$1')")),			'url'			=> array('bbcode_id' => 3,	'regexp' => array('#\[url(=(.*))?\](?(1)((?s).*(?-s))|(.*))\[/url\]#uiUe' => "\$this->validate_url('\$2', ('\$3') ? '\$3' : '\$4')")),			'img'			=> array('bbcode_id' => 4,	'regexp' => array('#\[img\](.*)\[/img\]#uiUe' => "\$this->bbcode_img('\$1')")),			'size'			=> array('bbcode_id' => 5,	'regexp' => array('#\[size=([\-\+]?\d+)\](.*?)\[/size\]#uise' => "\$this->bbcode_size('\$1', '\$2')")),			'color'			=> array('bbcode_id' => 6,	'regexp' => array('!\[color=(#[0-9a-f]{3}|#[0-9a-f]{6}|[a-z\-]+)\](.*?)\[/color\]!uise' => "\$this->bbcode_color('\$1', '\$2')")),			'u'				=> array('bbcode_id' => 7,	'regexp' => array('#\[u\](.*?)\[/u\]#uise' => "\$this->bbcode_underline('\$1')")),			'list'			=> array('bbcode_id' => 9,	'regexp' => array('#\[list(?:=(?:[a-z0-9]|disc|circle|square))?].*\[/list]#uise' => "\$this->bbcode_parse_list('\$0')")),			'email'			=> array('bbcode_id' => 10,	'regexp' => array('#\[email=?(.*?)?\](.*?)\[/email\]#uise' => "\$this->validate_email('\$1', '\$2')")),			'flash'			=> array('bbcode_id' => 11,	'regexp' => array('#\[flash=([0-9]+),([0-9]+)\](.*?)\[/flash\]#uie' => "\$this->bbcode_flash('\$1', '\$2', '\$3')"))		);		// Zero the parsed items array		$this->parsed_items = array();		foreach ($this->bbcodes as $tag => $bbcode_data)		{			$this->parsed_items[$tag] = 0;		}		if (!$allow_custom_bbcode)		{			return;		}		if (!is_array($rowset))		{			global $db;			$rowset = array();			$sql = 'SELECT *				FROM ' . BBCODES_TABLE;			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$rowset[] = $row;			}			$db->sql_freeresult($result);		}		foreach ($rowset as $row)		{			$this->bbcodes[$row['bbcode_tag']] = array(				'bbcode_id'	=> (int) $row['bbcode_id'],				'regexp'	=> array($row['first_pass_match'] => str_replace('$uid', $this->bbcode_uid, $row['first_pass_replace']))			);		}	}	/**	* Making some pre-checks for bbcodes as well as increasing the number of parsed items	*/	function check_bbcode($bbcode, &$in)	{		// when using the /e modifier, preg_replace slashes double-quotes but does not		// seem to slash anything else		$in = str_replace("\r\n", "\n", str_replace('\"', '"', $in));		// Trimming here to make sure no empty bbcodes are parsed accidently		if (trim($in) == '')		{			return false;		}		$this->parsed_items[$bbcode]++;		return true;	}	/**	* Transform some characters in valid bbcodes	*/	function bbcode_specialchars($text)	{		$str_from = array('<', '>', '[', ']', '.', ':');		$str_to = array('&lt;', '&gt;', '&#91;', '&#93;', '&#46;', '&#58;');		return str_replace($str_from, $str_to, $text);	}	/**	* Parse size tag	*/	function bbcode_size($stx, $in)	{		global $user, $config;		if (!$this->check_bbcode('size', $in))		{			return $in;		}		if ($config['max_' . $this->mode . '_font_size'] && $config['max_' . $this->mode . '_font_size'] < $stx)		{			$this->warn_msg[] = sprintf($user->lang['MAX_FONT_SIZE_EXCEEDED'], $config['max_' . $this->mode . '_font_size']);			return '[size=' . $stx . ']' . $in . '[/size]';		}		// Do not allow size=0		if ($stx <= 0)		{			return '[size=' . $stx . ']' . $in . '[/size]';		}		return '[size=' . $stx . ':' . $this->bbcode_uid . ']' . $in . '[/size:' . $this->bbcode_uid . ']';	}	/**	* Parse color tag	*/	function bbcode_color($stx, $in)	{		if (!$this->check_bbcode('color', $in))		{			return $in;		}		return '[color=' . $stx . ':' . $this->bbcode_uid . ']' . $in . '[/color:' . $this->bbcode_uid . ']';	}	/**	* Parse u tag	*/	function bbcode_underline($in)	{		if (!$this->check_bbcode('u', $in))		{			return $in;		}		return '[u:' . $this->bbcode_uid . ']' . $in . '[/u:' . $this->bbcode_uid . ']';	}	/**	* Parse b tag	*/	function bbcode_strong($in)	{		if (!$this->check_bbcode('b', $in))		{			return $in;		}		return '[b:' . $this->bbcode_uid . ']' . $in . '[/b:' . $this->bbcode_uid . ']';	}	/**	* Parse i tag	*/	function bbcode_italic($in)	{		if (!$this->check_bbcode('i', $in))		{			return $in;		}		return '[i:' . $this->bbcode_uid . ']' . $in . '[/i:' . $this->bbcode_uid . ']';	}	/**	* Parse img tag	*/	function bbcode_img($in)	{		global $user, $config;		if (!$this->check_bbcode('img', $in))		{			return $in;		}		$in = trim($in);		$error = false;		$in = str_replace(' ', '%20', $in);		// Checking urls		if (!preg_match('#^' . get_preg_expression('url') . '$#i', $in) && !preg_match('#^' . get_preg_expression('www_url') . '$#i', $in))		{			return '[img]' . $in . '[/img]';		}		// Try to cope with a common user error... not specifying a protocol but only a subdomain		if (!preg_match('#^[a-z0-9]+://#i', $in))		{			$in = 'http://' . $in;		}		if ($config['max_' . $this->mode . '_img_height'] || $config['max_' . $this->mode . '_img_width'])		{			$stats = @getimagesize(htmlspecialchars_decode($in));			if ($stats === false)			{				$error = true;				$this->warn_msg[] = $user->lang['UNABLE_GET_IMAGE_SIZE'];			}			else			{				if ($config['max_' . $this->mode . '_img_height'] && $config['max_' . $this->mode . '_img_height'] < $stats[1])				{					$error = true;					$this->warn_msg[] = sprintf($user->lang['MAX_IMG_HEIGHT_EXCEEDED'], $config['max_' . $this->mode . '_img_height']);				}				if ($config['max_' . $this->mode . '_img_width'] && $config['max_' . $this->mode . '_img_width'] < $stats[0])				{					$error = true;					$this->warn_msg[] = sprintf($user->lang['MAX_IMG_WIDTH_EXCEEDED'], $config['max_' . $this->mode . '_img_width']);				}			}		}		if ($error || $this->path_in_domain($in))		{			return '[img]' . $in . '[/img]';		}		return '[img:' . $this->bbcode_uid . ']' . $this->bbcode_specialchars($in) . '[/img:' . $this->bbcode_uid . ']';	}	/**	* Parse flash tag	*/	function bbcode_flash($width, $height, $in)	{		global $user, $config;		if (!$this->check_bbcode('flash', $in))		{			return $in;		}		$in = trim($in);		$error = false;		// Do not allow 0-sizes generally being entered		if ($width <= 0 || $height <= 0)		{			return '[flash=' . $width . ',' . $height . ']' . $in . '[/flash]';		}		$in = str_replace(' ', '%20', $in);		// Make sure $in is a URL.		if (!preg_match('#^' . get_preg_expression('url') . '$#i', $in) &&			!preg_match('#^' . get_preg_expression('www_url') . '$#i', $in))		{			return '[flash=' . $width . ',' . $height . ']' . $in . '[/flash]';		}		// Apply the same size checks on flash files as on images		if ($config['max_' . $this->mode . '_img_height'] || $config['max_' . $this->mode . '_img_width'])		{			if ($config['max_' . $this->mode . '_img_height'] && $config['max_' . $this->mode . '_img_height'] < $height)			{				$error = true;				$this->warn_msg[] = sprintf($user->lang['MAX_FLASH_HEIGHT_EXCEEDED'], $config['max_' . $this->mode . '_img_height']);			}			if ($config['max_' . $this->mode . '_img_width'] && $config['max_' . $this->mode . '_img_width'] < $width)			{				$error = true;				$this->warn_msg[] = sprintf($user->lang['MAX_FLASH_WIDTH_EXCEEDED'], $config['max_' . $this->mode . '_img_width']);			}		}		if ($error || $this->path_in_domain($in))		{			return '[flash=' . $width . ',' . $height . ']' . $in . '[/flash]';		}		return '[flash=' . $width . ',' . $height . ':' . $this->bbcode_uid . ']' . $this->bbcode_specialchars($in) . '[/flash:' . $this->bbcode_uid . ']';	}	/**	* Parse inline attachments [ia]	*/	function bbcode_attachment($stx, $in)	{		if (!$this->check_bbcode('attachment', $in))		{			return $in;		}		return '[attachment=' . $stx . ':' . $this->bbcode_uid . ']<!-- ia' . $stx . ' -->' . trim($in) . '<!-- ia' . $stx . ' -->[/attachment:' . $this->bbcode_uid . ']';	}	/**	* Parse code text from code tag	* @access private	*/	function bbcode_parse_code($stx, &$code)	{		switch (strtolower($stx))		{			case 'php':				$remove_tags = false;				$str_from = array('&lt;', '&gt;', '&#91;', '&#93;', '&#46;', '&#58;', '&#058;');				$str_to = array('<', '>', '[', ']', '.', ':', ':');				$code = str_replace($str_from, $str_to, $code);				if (!preg_match('/\<\?.*?\?\>/is', $code))				{					$remove_tags = true;					$code = "<?php $code ?>";				}				$conf = array('highlight.bg', 'highlight.comment', 'highlight.default', 'highlight.html', 'highlight.keyword', 'highlight.string');				foreach ($conf as $ini_var)				{					@ini_set($ini_var, str_replace('highlight.', 'syntax', $ini_var));				}				// Because highlight_string is specialcharing the text (but we already did this before), we have to reverse this in order to get correct results				$code = htmlspecialchars_decode($code);				$code = highlight_string($code, true);				$str_from = array('<span style="color: ', '<font color="syntax', '</font>', '<code>', '</code>','[', ']', '.', ':');				$str_to = array('<span class="', '<span class="syntax', '</span>', '', '', '&#91;', '&#93;', '&#46;', '&#58;');				if ($remove_tags)				{					$str_from[] = '<span class="syntaxdefault">&lt;?php </span>';					$str_to[] = '';					$str_from[] = '<span class="syntaxdefault">&lt;?php&nbsp;';					$str_to[] = '<span class="syntaxdefault">';				}				$code = str_replace($str_from, $str_to, $code);				$code = preg_replace('#^(<span class="[a-z_]+">)\n?(.*?)\n?(</span>)$#is', '$1$2$3', $code);				if ($remove_tags)				{					$code = preg_replace('#(<span class="[a-z]+">)?\?&gt;(</span>)#', '$1&nbsp;$2', $code);				}				$code = preg_replace('#^<span class="[a-z]+"><span class="([a-z]+)">(.*)</span></span>#s', '<span class="$1">$2</span>', $code);				$code = preg_replace('#(?:\s++|&nbsp;)*+</span>$#u', '</span>', $code);				// remove newline at the end				if (!empty($code) && substr($code, -1) == "\n")				{					$code = substr($code, 0, -1);				}				return "[code=$stx:" . $this->bbcode_uid . ']' . $code . '[/code:' . $this->bbcode_uid . ']';			break;			default:				return '[code:' . $this->bbcode_uid . ']' . $this->bbcode_specialchars($code) . '[/code:' . $this->bbcode_uid . ']';			break;		}	}	/**	* Parse code tag	* Expects the argument to start right after the opening [code] tag and to end with [/code]	*/	function bbcode_code($stx, $in)	{		if (!$this->check_bbcode('code', $in))		{			return $in;		}		// We remove the hardcoded elements from the code block here because it is not used in code blocks		// Having it here saves us one preg_replace per message containing [code] blocks		// Additionally, magic url parsing should go after parsing bbcodes, but for safety those are stripped out too...		$htm_match = get_preg_expression('bbcode_htm');		unset($htm_match[4], $htm_match[5]);		$htm_replace = array('\1', '\1', '\2', '\1');		$out = $code_block = '';		$open = 1;		while ($in)		{			// Determine position and tag length of next code block			preg_match('#(.*?)(\[code(?:=([a-z]+))?\])(.+)#is', $in, $buffer);			$pos = (isset($buffer[1])) ? strlen($buffer[1]) : false;			$tag_length = (isset($buffer[2])) ? strlen($buffer[2]) : false;			// Determine position of ending code tag			$pos2 = stripos($in, '[/code]');			// Which is the next block, ending code or code block			if ($pos !== false && $pos < $pos2)			{				// Open new block				if (!$open)				{					$out .= substr($in, 0, $pos);					$in = substr($in, $pos);					$stx = (isset($buffer[3])) ? $buffer[3] : '';					$code_block = '';				}				else				{					// Already opened block, just append to the current block					$code_block .= substr($in, 0, $pos) . ((isset($buffer[2])) ? $buffer[2] : '');					$in = substr($in, $pos);				}				$in = substr($in, $tag_length);				$open++;			}			else			{				// Close the block				if ($open == 1)				{					$code_block .= substr($in, 0, $pos2);					$code_block = preg_replace($htm_match, $htm_replace, $code_block);					// Parse this code block					$out .= $this->bbcode_parse_code($stx, $code_block);					$code_block = '';					$open--;				}				else if ($open)				{					// Close one open tag... add to the current code block					$code_block .= substr($in, 0, $pos2 + 7);					$open--;				}				else				{					// end code without opening code... will be always outside code block					$out .= substr($in, 0, $pos2 + 7);				}				$in = substr($in, $pos2 + 7);			}		}		// if now $code_block has contents we need to parse the remaining code while removing the last closing tag to match up.		if ($code_block)		{			$code_block = substr($code_block, 0, -7);			$code_block = preg_replace($htm_match, $htm_replace, $code_block);			$out .= $this->bbcode_parse_code($stx, $code_block);		}		return $out;	}	/**	* Parse list bbcode	* Expects the argument to start with a tag	*/	function bbcode_parse_list($in)	{		if (!$this->check_bbcode('list', $in))		{			return $in;		}		// $tok holds characters to stop at. Since the string starts with a '[' we'll get everything up to the first ']' which should be the opening [list] tag		$tok = ']';		$out = '[';		// First character is [		$in = substr($in, 1);		$list_end_tags = $item_end_tags = array();		do		{			$pos = strlen($in);			for ($i = 0, $tok_len = strlen($tok); $i < $tok_len; ++$i)			{				$tmp_pos = strpos($in, $tok[$i]);				if ($tmp_pos !== false && $tmp_pos < $pos)				{					$pos = $tmp_pos;				}			}			$buffer = substr($in, 0, $pos);			$tok = $in[$pos];			$in = substr($in, $pos + 1);			if ($tok == ']')			{				// if $tok is ']' the buffer holds a tag				if (strtolower($buffer) == '/list' && sizeof($list_end_tags))				{					// valid [/list] tag, check nesting so that we don't hit false positives					if (sizeof($item_end_tags) && sizeof($item_end_tags) >= sizeof($list_end_tags))					{						// current li tag has not been closed						$out = preg_replace('/\n?\[$/', '[', $out) . array_pop($item_end_tags) . '][';					}					$out .= array_pop($list_end_tags) . ']';					$tok = '[';				}				else if (preg_match('#^list(=[0-9a-z]+)?$#i', $buffer, $m))				{					// sub-list, add a closing tag					if (empty($m[1]) || preg_match('/^=(?:disc|square|circle)$/i', $m[1]))					{						array_push($list_end_tags, '/list:u:' . $this->bbcode_uid);					}					else					{						array_push($list_end_tags, '/list:o:' . $this->bbcode_uid);					}					$out .= 'list' . substr($buffer, 4) . ':' . $this->bbcode_uid . ']';					$tok = '[';				}				else				{					if (($buffer == '*' || substr($buffer, -2) == '[*') && sizeof($list_end_tags))					{						// the buffer holds a bullet tag and we have a [list] tag open						if (sizeof($item_end_tags) >= sizeof($list_end_tags))						{							if (substr($buffer, -2) == '[*')							{								$out .= substr($buffer, 0, -2) . '[';							}							// current li tag has not been closed							if (preg_match('/\n\[$/', $out, $m))							{								$out = preg_replace('/\n\[$/', '[', $out);								$buffer = array_pop($item_end_tags) . "]\n[*:" . $this->bbcode_uid;							}							else							{								$buffer = array_pop($item_end_tags) . '][*:' . $this->bbcode_uid;							}						}						else						{							$buffer = '*:' . $this->bbcode_uid;						}						$item_end_tags[] = '/*:m:' . $this->bbcode_uid;					}					else if ($buffer == '/*')					{						array_pop($item_end_tags);						$buffer = '/*:' . $this->bbcode_uid;					}					$out .= $buffer . $tok;					$tok = '[]';				}			}			else			{				// Not within a tag, just add buffer to the return string				$out .= $buffer . $tok;				$tok = ($tok == '[') ? ']' : '[]';			}		}		while ($in);		// do we have some tags open? close them now		if (sizeof($item_end_tags))		{			$out .= '[' . implode('][', $item_end_tags) . ']';		}		if (sizeof($list_end_tags))		{			$out .= '[' . implode('][', $list_end_tags) . ']';		}		return $out;	}	/**	* Parse quote bbcode	* Expects the argument to start with a tag	*/	function bbcode_quote($in)	{		global $config, $user;		/**		* If you change this code, make sure the cases described within the following reports are still working:		* #3572 - [quote="[test]test"]test [ test[/quote] - (correct: parsed)		* #14667 - [quote]test[/quote] test ] and [ test [quote]test[/quote] (correct: parsed)		* #14770 - [quote="["]test[/quote] (correct: parsed)		* [quote="[i]test[/i]"]test[/quote] (correct: parsed)		* [quote="[quote]test[/quote]"]test[/quote] (correct: parsed - Username displayed as [quote]test[/quote])		* #20735 - [quote]test[/[/b]quote] test [/quote][/quote] test - (correct: quoted: "test[/[/b]quote] test" / non-quoted: "[/quote] test" - also failed if layout distorted)		* #40565 - [quote="a"]a[/quote][quote="a]a[/quote] (correct: first quote tag parsed, second quote tag unparsed)		*/		$in = str_replace("\r\n", "\n", str_replace('\"', '"', trim($in)));		if (!$in)		{			return '';		}		// To let the parser not catch tokens within quote_username quotes we encode them before we start this...		$in = preg_replace('#quote=&quot;(.*?)&quot;\]#ie', "'quote=&quot;' . str_replace(array('[', ']', '\\\"'), array('&#91;', '&#93;', '\"'), '\$1') . '&quot;]'", $in);		$tok = ']';		$out = '[';		$in = substr($in, 1);		$close_tags = $error_ary = array();		$buffer = '';		do		{			$pos = strlen($in);			for ($i = 0, $tok_len = strlen($tok); $i < $tok_len; ++$i)			{				$tmp_pos = strpos($in, $tok[$i]);				if ($tmp_pos !== false && $tmp_pos < $pos)				{					$pos = $tmp_pos;				}			}			$buffer .= substr($in, 0, $pos);			$tok = $in[$pos];			$in = substr($in, $pos + 1);			if ($tok == ']')			{				if (strtolower($buffer) == '/quote' && sizeof($close_tags) && substr($out, -1, 1) == '[')				{					// we have found a closing tag					$out .= array_pop($close_tags) . ']';					$tok = '[';					$buffer = '';					/* Add space at the end of the closing tag if not happened before to allow following urls/smilies to be parsed correctly					* Do not try to think for the user. :/ Do not parse urls/smilies if there is no space - is the same as with other bbcodes too.					* Also, we won't have any spaces within $in anyway, only adding up spaces -> #10982					if (!$in || $in[0] !== ' ')					{						$out .= ' ';					}*/				}				else if (preg_match('#^quote(?:=&quot;(.*?)&quot;)?$#is', $buffer, $m) && substr($out, -1, 1) == '[')				{					$this->parsed_items['quote']++;					// the buffer holds a valid opening tag					if ($config['max_quote_depth'] && sizeof($close_tags) >= $config['max_quote_depth'])					{						// there are too many nested quotes						$error_ary['quote_depth'] = sprintf($user->lang['QUOTE_DEPTH_EXCEEDED'], $config['max_quote_depth']);						$out .= $buffer . $tok;						$tok = '[]';						$buffer = '';						continue;					}					array_push($close_tags, '/quote:' . $this->bbcode_uid);					if (isset($m[1]) && $m[1])					{						$username = str_replace(array('&#91;', '&#93;'), array('[', ']'), $m[1]);						$username = preg_replace('#\[(?!b|i|u|color|url|email|/b|/i|/u|/color|/url|/email)#iU', '&#91;$1', $username);						$end_tags = array();						$error = false;						preg_match_all('#\[((?:/)?(?:[a-z]+))#i', $username, $tags);						foreach ($tags[1] as $tag)						{							if ($tag[0] != '/')							{								$end_tags[] = '/' . $tag;							}							else							{								$end_tag = array_pop($end_tags);								$error = ($end_tag != $tag) ? true : false;							}						}						if ($error)						{							$username = $m[1];						}						$out .= 'quote=&quot;' . $username . '&quot;:' . $this->bbcode_uid . ']';					}					else					{						$out .= 'quote:' . $this->bbcode_uid . ']';					}					$tok = '[';					$buffer = '';				}				else if (preg_match('#^quote=&quot;(.*?)#is', $buffer, $m))				{					// the buffer holds an invalid opening tag					$buffer .= ']';				}				else				{					$out .= $buffer . $tok;					$tok = '[]';					$buffer = '';				}			}			else			{/***				Old quote code working fine, but having errors listed in bug #3572**				$out .= $buffer . $tok;*				$tok = ($tok == '[') ? ']' : '[]';*				$buffer = '';*/				$out .= $buffer . $tok;				if ($tok == '[')				{					// Search the text for the next tok... if an ending quote comes first, then change tok to []					$pos1 = stripos($in, '[/quote');					// If the token ] comes first, we change it to ]					$pos2 = strpos($in, ']');					// If the token [ comes first, we change it to [					$pos3 = strpos($in, '[');					if ($pos1 !== false && ($pos2 === false || $pos1 < $pos2) && ($pos3 === false || $pos1 < $pos3))					{						$tok = '[]';					}					else if ($pos3 !== false && ($pos2 === false || $pos3 < $pos2))					{						$tok = '[';					}					else					{						$tok = ']';					}				}				else				{					$tok = '[]';				}				$buffer = '';			}		}		while ($in);		$out .= $buffer;		if (sizeof($close_tags))		{			$out .= '[' . implode('][', $close_tags) . ']';		}		foreach ($error_ary as $error_msg)		{			$this->warn_msg[] = $error_msg;		}		return $out;	}	/**	* Validate email	*/	function validate_email($var1, $var2)	{		$var1 = str_replace("\r\n", "\n", str_replace('\"', '"', trim($var1)));		$var2 = str_replace("\r\n", "\n", str_replace('\"', '"', trim($var2)));		$txt = $var2;		$email = ($var1) ? $var1 : $var2;		$validated = true;		if (!preg_match('/^' . get_preg_expression('email') . '$/i', $email))		{			$validated = false;		}		if (!$validated)		{			return '[email' . (($var1) ? "=$var1" : '') . ']' . $var2 . '[/email]';		}		$this->parsed_items['email']++;		if ($var1)		{			$retval = '[email=' . $this->bbcode_specialchars($email) . ':' . $this->bbcode_uid . ']' . $txt . '[/email:' . $this->bbcode_uid . ']';		}		else		{			$retval = '[email:' . $this->bbcode_uid . ']' . $this->bbcode_specialchars($email) . '[/email:' . $this->bbcode_uid . ']';		}		return $retval;	}	/**	* Validate url	*	* @param string $var1 optional url parameter for url bbcode: [url(=$var1)]$var2[/url]	* @param string $var2 url bbcode content: [url(=$var1)]$var2[/url]	*/	function validate_url($var1, $var2)	{		global $config;		$var1 = str_replace("\r\n", "\n", str_replace('\"', '"', trim($var1)));		$var2 = str_replace("\r\n", "\n", str_replace('\"', '"', trim($var2)));		$url = ($var1) ? $var1 : $var2;		if ($var1 && !$var2)		{			$var2 = $var1;		}		if (!$url)		{			return '[url' . (($var1) ? '=' . $var1 : '') . ']' . $var2 . '[/url]';		}		$valid = false;		$url = str_replace(' ', '%20', $url);		// Checking urls		if (preg_match('#^' . get_preg_expression('url') . '$#i', $url) ||			preg_match('#^' . get_preg_expression('www_url') . '$#i', $url) ||			preg_match('#^' . preg_quote(generate_board_url(), '#') . get_preg_expression('relative_url') . '$#i', $url))		{			$valid = true;		}		if ($valid)		{			$this->parsed_items['url']++;			// if there is no scheme, then add http schema			if (!preg_match('#^[a-z][a-z\d+\-.]*:/{2}#i', $url))			{				$url = 'http://' . $url;			}			// Is this a link to somewhere inside this board? If so then remove the session id from the url			if (strpos($url, generate_board_url()) !== false && strpos($url, 'sid=') !== false)			{				$url = preg_replace('/(&amp;|\?)sid=[0-9a-f]{32}&amp;/', '\1', $url);				$url = preg_replace('/(&amp;|\?)sid=[0-9a-f]{32}$/', '', $url);				$url = append_sid($url);			}			return ($var1) ? '[url=' . $this->bbcode_specialchars($url) . ':' . $this->bbcode_uid . ']' . $var2 . '[/url:' . $this->bbcode_uid . ']' : '[url:' . $this->bbcode_uid . ']' . $this->bbcode_specialchars($url) . '[/url:' . $this->bbcode_uid . ']';		}		return '[url' . (($var1) ? '=' . $var1 : '') . ']' . $var2 . '[/url]';	}	/**	* Check if url is pointing to this domain/script_path/php-file	*	* @param string $url the url to check	* @return true if the url is pointing to this domain/script_path/php-file, false if not	*	* @access private	*/	function path_in_domain($url)	{		global $config, $phpEx, $user;		if ($config['force_server_vars'])		{			$check_path = $config['script_path'];		}		else		{			$check_path = ($user->page['root_script_path'] != '/') ? substr($user->page['root_script_path'], 0, -1) : '/';		}		// Is the user trying to link to a php file in this domain and script path?		if (strpos($url, ".{$phpEx}") !== false && strpos($url, $check_path) !== false)		{			$server_name = $user->host;			// Forcing server vars is the only way to specify/override the protocol			if ($config['force_server_vars'] || !$server_name)			{				$server_name = $config['server_name'];			}			// Check again in correct order...			$pos_ext = strpos($url, ".{$phpEx}");			$pos_path = strpos($url, $check_path);			$pos_domain = strpos($url, $server_name);			if ($pos_domain !== false && $pos_path >= $pos_domain && $pos_ext >= $pos_path)			{				// Ok, actually we allow linking to some files (this may be able to be extended in some way later...)				if (strpos($url, '/' . $check_path . '/download/file.' . $phpEx) !== 0)				{					return false;				}				return true;			}		}		return false;	}}/*** Main message parser for posting, pm, etc. takes raw message* and parses it for attachments, bbcode and smilies* @package phpBB3*/class parse_message extends bbcode_firstpass{	var $attachment_data = array();	var $filename_data = array();	// Helps ironing out user error	var $message_status = '';	var $allow_img_bbcode = true;	var $allow_flash_bbcode = true;	var $allow_quote_bbcode = true;	var $allow_url_bbcode = true;	var $mode;	/**	* Init - give message here or manually	*/	function parse_message($message = '')	{		// Init BBCode UID		$this->bbcode_uid = substr(base_convert(unique_id(), 16, 36), 0, BBCODE_UID_LEN);		$this->message = $message;	}	/**	* Parse Message	*/	function parse($allow_bbcode, $allow_magic_url, $allow_smilies, $allow_img_bbcode = true, $allow_flash_bbcode = true, $allow_quote_bbcode = true, $allow_url_bbcode = true, $update_this_message = true, $mode = 'post')	{		global $config, $db, $user;		$this->mode = $mode;		foreach (array('chars', 'smilies', 'urls', 'font_size', 'img_height', 'img_width') as $key)		{			if (!isset($config['max_' . $mode . '_' . $key]))			{				$config['max_' . $mode . '_' . $key] = 0;			}		}		$this->allow_img_bbcode = $allow_img_bbcode;		$this->allow_flash_bbcode = $allow_flash_bbcode;		$this->allow_quote_bbcode = $allow_quote_bbcode;		$this->allow_url_bbcode = $allow_url_bbcode;		// If false, then $this->message won't be altered, the text will be returned instead.		if (!$update_this_message)		{			$tmp_message = $this->message;			$return_message = &$this->message;		}		if ($this->message_status == 'display')		{			$this->decode_message();		}		// Do some general 'cleanup' first before processing message,		// e.g. remove excessive newlines(?), smilies(?)		$match = array('#(script|about|applet|activex|chrome):#i');		$replace = array("\\1&#058;");		$this->message = preg_replace($match, $replace, trim($this->message));		// Store message length...		$message_length = ($mode == 'post') ? utf8_strlen($this->message) : utf8_strlen(preg_replace('#\[\/?[a-z\*\+\-]+(=[\S]+)?\]#ius', ' ', $this->message));		// Maximum message length check. 0 disables this check completely.		if ((int) $config['max_' . $mode . '_chars'] > 0 && $message_length > (int) $config['max_' . $mode . '_chars'])		{			$this->warn_msg[] = sprintf($user->lang['TOO_MANY_CHARS_' . strtoupper($mode)], $message_length, (int) $config['max_' . $mode . '_chars']);			return (!$update_this_message) ? $return_message : $this->warn_msg;		}		// Minimum message length check for post only		if ($mode === 'post')		{			if (!$message_length || $message_length < (int) $config['min_post_chars'])			{				$this->warn_msg[] = (!$message_length) ? $user->lang['TOO_FEW_CHARS'] : sprintf($user->lang['TOO_FEW_CHARS_LIMIT'], $message_length, (int) $config['min_post_chars']);				return (!$update_this_message) ? $return_message : $this->warn_msg;			}		}		// Prepare BBcode (just prepares some tags for better parsing)		if ($allow_bbcode && strpos($this->message, '[') !== false)		{			$this->bbcode_init();			$disallow = array('img', 'flash', 'quote', 'url');			foreach ($disallow as $bool)			{				if (!${'allow_' . $bool . '_bbcode'})				{					$this->bbcodes[$bool]['disabled'] = true;				}			}			$this->prepare_bbcodes();		}		// Parse smilies		if ($allow_smilies)		{			$this->smilies($config['max_' . $mode . '_smilies']);		}		$num_urls = 0;		// Parse BBCode		if ($allow_bbcode && strpos($this->message, '[') !== false)		{			$this->parse_bbcode();			$num_urls += $this->parsed_items['url'];		}		// Parse URL's		if ($allow_magic_url)		{			$this->magic_url(generate_board_url());			if ($config['max_' . $mode . '_urls'])			{				$num_urls += preg_match_all('#\<!-- ([lmwe]) --\>.*?\<!-- \1 --\>#', $this->message, $matches);			}		}		// Check for "empty" message. We do not check here for maximum length, because bbcode, smilies, etc. can add to the length.		// The maximum length check happened before any parsings.		if ($mode === 'post' && utf8_clean_string($this->message) === '')		{			$this->warn_msg[] = $user->lang['TOO_FEW_CHARS'];			return (!$update_this_message) ? $return_message : $this->warn_msg;		}		// Check number of links		if ($config['max_' . $mode . '_urls'] && $num_urls > $config['max_' . $mode . '_urls'])		{			$this->warn_msg[] = sprintf($user->lang['TOO_MANY_URLS'], $config['max_' . $mode . '_urls']);			return (!$update_this_message) ? $return_message : $this->warn_msg;		}		if (!$update_this_message)		{			unset($this->message);			$this->message = $tmp_message;			return $return_message;		}		$this->message_status = 'parsed';		return false;	}	/**	* Formatting text for display	*/	function format_display($allow_bbcode, $allow_magic_url, $allow_smilies, $update_this_message = true)	{		// If false, then the parsed message get returned but internal message not processed.		if (!$update_this_message)		{			$tmp_message = $this->message;			$return_message = &$this->message;		}		if ($this->message_status == 'plain')		{			// Force updating message - of course.			$this->parse($allow_bbcode, $allow_magic_url, $allow_smilies, $this->allow_img_bbcode, $this->allow_flash_bbcode, $this->allow_quote_bbcode, $this->allow_url_bbcode, true);		}		// Replace naughty words such as farty pants		$this->message = censor_text($this->message);		// Parse BBcode		if ($allow_bbcode)		{			$this->bbcode_cache_init();			// We are giving those parameters to be able to use the bbcode class on its own			$this->bbcode_second_pass($this->message, $this->bbcode_uid);		}		$this->message = bbcode_nl2br($this->message);		$this->message = smiley_text($this->message, !$allow_smilies);		if (!$update_this_message)		{			unset($this->message);			$this->message = $tmp_message;			return $return_message;		}		$this->message_status = 'display';		return false;	}	/**	* Decode message to be placed back into form box	*/	function decode_message($custom_bbcode_uid = '', $update_this_message = true)	{		// If false, then the parsed message get returned but internal message not processed.		if (!$update_this_message)		{			$tmp_message = $this->message;			$return_message = &$this->message;		}		($custom_bbcode_uid) ? decode_message($this->message, $custom_bbcode_uid) : decode_message($this->message, $this->bbcode_uid);		if (!$update_this_message)		{			unset($this->message);			$this->message = $tmp_message;			return $return_message;		}		$this->message_status = 'plain';		return false;	}	/**	* Replace magic urls of form http://xxx.xxx., www.xxx. and xxx@xxx.xxx.	* Cuts down displayed size of link if over 50 chars, turns absolute links	* into relative versions when the server/script path matches the link	*/	function magic_url($server_url)	{		// We use the global make_clickable function		$this->message = make_clickable($this->message, $server_url);	}	/**	* Parse Smilies	*/	function smilies($max_smilies = 0)	{		global $db, $user;		static $match;		static $replace;		// See if the static arrays have already been filled on an earlier invocation		if (!is_array($match))		{			$match = $replace = array();			// NOTE: obtain_* function? chaching the table contents?			// For now setting the ttl to 10 minutes			switch ($db->sql_layer)			{				case 'mssql':				case 'mssql_odbc':				case 'mssqlnative':					$sql = 'SELECT *						FROM ' . SMILIES_TABLE . '						ORDER BY LEN(code) DESC';				break;				case 'firebird':					$sql = 'SELECT *						FROM ' . SMILIES_TABLE . '						ORDER BY CHAR_LENGTH(code) DESC';				break;				// LENGTH supported by MySQL, IBM DB2, Oracle and Access for sure...				default:					$sql = 'SELECT *						FROM ' . SMILIES_TABLE . '						ORDER BY LENGTH(code) DESC';				break;			}			$result = $db->sql_query($sql, 600);			while ($row = $db->sql_fetchrow($result))			{				if (empty($row['code']))				{					continue;				}				// (assertion)				$match[] = preg_quote($row['code'], '#');				$replace[] = '<!-- s' . $row['code'] . ' --><img src="{SMILIES_PATH}/' . $row['smiley_url'] . '" alt="' . $row['code'] . '" title="' . $row['emotion'] . '" /><!-- s' . $row['code'] . ' -->';			}			$db->sql_freeresult($result);		}		if (sizeof($match))		{			if ($max_smilies)			{				// 'u' modifier has been added to correctly parse smilies within unicode strings				// For details: http://tracker.phpbb.com/browse/PHPBB3-10117				$num_matches = preg_match_all('#(?<=^|[\n .])(?:' . implode('|', $match) . ')(?![^<>]*>)#u', $this->message, $matches);				unset($matches);				if ($num_matches !== false && $num_matches > $max_smilies)				{					$this->warn_msg[] = sprintf($user->lang['TOO_MANY_SMILIES'], $max_smilies);					return;				}			}			// Make sure the delimiter # is added in front and at the end of every element within $match			// 'u' modifier has been added to correctly parse smilies within unicode strings			// For details: http://tracker.phpbb.com/browse/PHPBB3-10117			$this->message = trim(preg_replace(explode(chr(0), '#(?<=^|[\n .])' . implode('(?![^<>]*>)#u' . chr(0) . '#(?<=^|[\n .])', $match) . '(?![^<>]*>)#u'), $replace, $this->message));		}	}	/**	* Parse Attachments	*/	function parse_attachments($form_name, $mode, $forum_id, $submit, $preview, $refresh, $is_message = false)	{		global $config, $auth, $user, $phpbb_root_path, $phpEx, $db;		$error = array();		$num_attachments = sizeof($this->attachment_data);		$this->filename_data['filecomment'] = utf8_normalize_nfc(request_var('filecomment', '', true));		$upload_file = (isset($_FILES[$form_name]) && $_FILES[$form_name]['name'] != 'none' && trim($_FILES[$form_name]['name'])) ? true : false;		$add_file		= (isset($_POST['add_file'])) ? true : false;		$delete_file	= (isset($_POST['delete_file'])) ? true : false;		// First of all adjust comments if changed		$actual_comment_list = utf8_normalize_nfc(request_var('comment_list', array(''), true));		foreach ($actual_comment_list as $comment_key => $comment)		{			if (!isset($this->attachment_data[$comment_key]))			{				continue;			}			if ($this->attachment_data[$comment_key]['attach_comment'] != $actual_comment_list[$comment_key])			{				$this->attachment_data[$comment_key]['attach_comment'] = $actual_comment_list[$comment_key];			}		}		$cfg = array();		$cfg['max_attachments'] = ($is_message) ? $config['max_attachments_pm'] : $config['max_attachments'];		$forum_id = ($is_message) ? 0 : $forum_id;		if ($submit && in_array($mode, array('post', 'reply', 'quote', 'edit')) && $upload_file)		{			if ($num_attachments < $cfg['max_attachments'] || $auth->acl_get('a_') || $auth->acl_get('m_', $forum_id))			{				$filedata = upload_attachment($form_name, $forum_id, false, '', $is_message);				$error = $filedata['error'];				if ($filedata['post_attach'] && !sizeof($error))				{					$sql_ary = array(						'physical_filename'	=> $filedata['physical_filename'],						'attach_comment'	=> $this->filename_data['filecomment'],						'real_filename'		=> $filedata['real_filename'],						'extension'			=> $filedata['extension'],						'mimetype'			=> $filedata['mimetype'],						'filesize'			=> $filedata['filesize'],						'filetime'			=> $filedata['filetime'],						'thumbnail'			=> $filedata['thumbnail'],						'is_orphan'			=> 1,						'in_message'		=> ($is_message) ? 1 : 0,						'poster_id'			=> $user->data['user_id'],					);					$db->sql_query('INSERT INTO ' . ATTACHMENTS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));					$new_entry = array(						'attach_id'		=> $db->sql_nextid(),						'is_orphan'		=> 1,						'real_filename'	=> $filedata['real_filename'],						'attach_comment'=> $this->filename_data['filecomment'],					);					$this->attachment_data = array_merge(array(0 => $new_entry), $this->attachment_data);					$this->message = preg_replace('#\[attachment=([0-9]+)\](.*?)\[\/attachment\]#e', "'[attachment='.(\\1 + 1).']\\2[/attachment]'", $this->message);					$this->filename_data['filecomment'] = '';					// This Variable is set to false here, because Attachments are entered into the					// Database in two modes, one if the id_list is 0 and the second one if post_attach is true					// Since post_attach is automatically switched to true if an Attachment got added to the filesystem,					// but we are assigning an id of 0 here, we have to reset the post_attach variable to false.					//					// This is very relevant, because it could happen that the post got not submitted, but we do not					// know this circumstance here. We could be at the posting page or we could be redirected to the entered					// post. :)					$filedata['post_attach'] = false;				}			}			else			{				$error[] = sprintf($user->lang['TOO_MANY_ATTACHMENTS'], $cfg['max_attachments']);			}		}		if ($preview || $refresh || sizeof($error))		{			// Perform actions on temporary attachments			if ($delete_file)			{				include_once($phpbb_root_path . 'includes/functions_admin.' . $phpEx);				$index = array_keys(request_var('delete_file', array(0 => 0)));				$index = (!empty($index)) ? $index[0] : false;				if ($index !== false && !empty($this->attachment_data[$index]))				{					// delete selected attachment					if ($this->attachment_data[$index]['is_orphan'])					{						$sql = 'SELECT attach_id, physical_filename, thumbnail							FROM ' . ATTACHMENTS_TABLE . '							WHERE attach_id = ' . (int) $this->attachment_data[$index]['attach_id'] . '								AND is_orphan = 1								AND poster_id = ' . $user->data['user_id'];						$result = $db->sql_query($sql);						$row = $db->sql_fetchrow($result);						$db->sql_freeresult($result);						if ($row)						{							phpbb_unlink($row['physical_filename'], 'file');							if ($row['thumbnail'])							{								phpbb_unlink($row['physical_filename'], 'thumbnail');							}							$db->sql_query('DELETE FROM ' . ATTACHMENTS_TABLE . ' WHERE attach_id = ' . (int) $this->attachment_data[$index]['attach_id']);						}					}					else					{						delete_attachments('attach', array(intval($this->attachment_data[$index]['attach_id'])));					}					unset($this->attachment_data[$index]);					$this->message = preg_replace('#\[attachment=([0-9]+)\](.*?)\[\/attachment\]#e', "(\\1 == \$index) ? '' : ((\\1 > \$index) ? '[attachment=' . (\\1 - 1) . ']\\2[/attachment]' : '\\0')", $this->message);					// Reindex Array					$this->attachment_data = array_values($this->attachment_data);				}			}			else if (($add_file || $preview) && $upload_file)			{				if ($num_attachments < $cfg['max_attachments'] || $auth->acl_gets('m_', 'a_', $forum_id))				{					$filedata = upload_attachment($form_name, $forum_id, false, '', $is_message);					$error = array_merge($error, $filedata['error']);					if (!sizeof($error))					{						$sql_ary = array(							'physical_filename'	=> $filedata['physical_filename'],							'attach_comment'	=> $this->filename_data['filecomment'],							'real_filename'		=> $filedata['real_filename'],							'extension'			=> $filedata['extension'],							'mimetype'			=> $filedata['mimetype'],							'filesize'			=> $filedata['filesize'],							'filetime'			=> $filedata['filetime'],							'thumbnail'			=> $filedata['thumbnail'],							'is_orphan'			=> 1,							'in_message'		=> ($is_message) ? 1 : 0,							'poster_id'			=> $user->data['user_id'],						);						$db->sql_query('INSERT INTO ' . ATTACHMENTS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));						$new_entry = array(							'attach_id'		=> $db->sql_nextid(),							'is_orphan'		=> 1,							'real_filename'	=> $filedata['real_filename'],							'attach_comment'=> $this->filename_data['filecomment'],						);						$this->attachment_data = array_merge(array(0 => $new_entry), $this->attachment_data);						$this->message = preg_replace('#\[attachment=([0-9]+)\](.*?)\[\/attachment\]#e', "'[attachment='.(\\1 + 1).']\\2[/attachment]'", $this->message);						$this->filename_data['filecomment'] = '';					}				}				else				{					$error[] = sprintf($user->lang['TOO_MANY_ATTACHMENTS'], $cfg['max_attachments']);				}			}		}		foreach ($error as $error_msg)		{			$this->warn_msg[] = $error_msg;		}	}	/**	* Get Attachment Data	*/	function get_submitted_attachment_data($check_user_id = false)	{		global $user, $db, $phpbb_root_path, $phpEx, $config;		$this->filename_data['filecomment'] = utf8_normalize_nfc(request_var('filecomment', '', true));		$attachment_data = (isset($_POST['attachment_data'])) ? $_POST['attachment_data'] : array();		$this->attachment_data = array();		$check_user_id = ($check_user_id === false) ? $user->data['user_id'] : $check_user_id;		if (!sizeof($attachment_data))		{			return;		}		$not_orphan = $orphan = array();		foreach ($attachment_data as $pos => $var_ary)		{			if ($var_ary['is_orphan'])			{				$orphan[(int) $var_ary['attach_id']] = $pos;			}			else			{				$not_orphan[(int) $var_ary['attach_id']] = $pos;			}		}		// Regenerate already posted attachments		if (sizeof($not_orphan))		{			// Get the attachment data, based on the poster id...			$sql = 'SELECT attach_id, is_orphan, real_filename, attach_comment				FROM ' . ATTACHMENTS_TABLE . '				WHERE ' . $db->sql_in_set('attach_id', array_keys($not_orphan)) . '					AND poster_id = ' . $check_user_id;			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$pos = $not_orphan[$row['attach_id']];				$this->attachment_data[$pos] = $row;				set_var($this->attachment_data[$pos]['attach_comment'], $_POST['attachment_data'][$pos]['attach_comment'], 'string', true);				unset($not_orphan[$row['attach_id']]);			}			$db->sql_freeresult($result);		}		if (sizeof($not_orphan))		{			trigger_error('NO_ACCESS_ATTACHMENT', E_USER_ERROR);		}		// Regenerate newly uploaded attachments		if (sizeof($orphan))		{			$sql = 'SELECT attach_id, is_orphan, real_filename, attach_comment				FROM ' . ATTACHMENTS_TABLE . '				WHERE ' . $db->sql_in_set('attach_id', array_keys($orphan)) . '					AND poster_id = ' . $user->data['user_id'] . '					AND is_orphan = 1';			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$pos = $orphan[$row['attach_id']];				$this->attachment_data[$pos] = $row;				set_var($this->attachment_data[$pos]['attach_comment'], $_POST['attachment_data'][$pos]['attach_comment'], 'string', true);				unset($orphan[$row['attach_id']]);			}			$db->sql_freeresult($result);		}		if (sizeof($orphan))		{			trigger_error('NO_ACCESS_ATTACHMENT', E_USER_ERROR);		}		ksort($this->attachment_data);	}	/**	* Parse Poll	*/	function parse_poll(&$poll)	{		global $auth, $user, $config;		$poll_max_options = $poll['poll_max_options'];		// Parse Poll Option text ;)		$tmp_message = $this->message;		$this->message = $poll['poll_option_text'];		$bbcode_bitfield = $this->bbcode_bitfield;		$poll['poll_option_text'] = $this->parse($poll['enable_bbcode'], ($config['allow_post_links']) ? $poll['enable_urls'] : false, $poll['enable_smilies'], $poll['img_status'], false, false, $config['allow_post_links'], false, 'poll');		$bbcode_bitfield = base64_encode(base64_decode($bbcode_bitfield) | base64_decode($this->bbcode_bitfield));		$this->message = $tmp_message;		// Parse Poll Title		$tmp_message = $this->message;		$this->message = $poll['poll_title'];		$this->bbcode_bitfield = $bbcode_bitfield;		$poll['poll_options'] = explode("\n", trim($poll['poll_option_text']));		$poll['poll_options_size'] = sizeof($poll['poll_options']);		if (!$poll['poll_title'] && $poll['poll_options_size'])		{			$this->warn_msg[] = $user->lang['NO_POLL_TITLE'];		}		else		{			if (utf8_strlen(preg_replace('#\[\/?[a-z\*\+\-]+(=[\S]+)?\]#ius', ' ', $this->message)) > 100)			{				$this->warn_msg[] = $user->lang['POLL_TITLE_TOO_LONG'];			}			$poll['poll_title'] = $this->parse($poll['enable_bbcode'], ($config['allow_post_links']) ? $poll['enable_urls'] : false, $poll['enable_smilies'], $poll['img_status'], false, false, $config['allow_post_links'], false, 'poll');			if (strlen($poll['poll_title']) > 255)			{				$this->warn_msg[] = $user->lang['POLL_TITLE_COMP_TOO_LONG'];			}		}		$this->bbcode_bitfield = base64_encode(base64_decode($bbcode_bitfield) | base64_decode($this->bbcode_bitfield));		$this->message = $tmp_message;		unset($tmp_message);		if (sizeof($poll['poll_options']) == 1)		{			$this->warn_msg[] = $user->lang['TOO_FEW_POLL_OPTIONS'];		}		else if ($poll['poll_options_size'] > (int) $config['max_poll_options'])		{			$this->warn_msg[] = $user->lang['TOO_MANY_POLL_OPTIONS'];		}		else if ($poll_max_options > $poll['poll_options_size'])		{			$this->warn_msg[] = $user->lang['TOO_MANY_USER_OPTIONS'];		}		$poll['poll_max_options'] = ($poll['poll_max_options'] < 1) ? 1 : (($poll['poll_max_options'] > $config['max_poll_options']) ? $config['max_poll_options'] : $poll['poll_max_options']);	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** valid external constants:* PHPBB_MSG_HANDLER* PHPBB_DB_NEW_LINK* PHPBB_ROOT_PATH* PHPBB_ADMIN_PATH*/// phpBB Versiondefine('PHPBB_VERSION', '3.0.10');// QA-related// define('PHPBB_QA', 1);// User relateddefine('ANONYMOUS', 1);define('USER_ACTIVATION_NONE', 0);define('USER_ACTIVATION_SELF', 1);define('USER_ACTIVATION_ADMIN', 2);define('USER_ACTIVATION_DISABLE', 3);define('AVATAR_UPLOAD', 1);define('AVATAR_REMOTE', 2);define('AVATAR_GALLERY', 3);define('USER_NORMAL', 0);define('USER_INACTIVE', 1);define('USER_IGNORE', 2);define('USER_FOUNDER', 3);define('INACTIVE_REGISTER', 1);define('INACTIVE_PROFILE', 2);define('INACTIVE_MANUAL', 3);define('INACTIVE_REMIND', 4);// ACLdefine('ACL_NEVER', 0);define('ACL_YES', 1);define('ACL_NO', -1);// Login error codesdefine('LOGIN_CONTINUE', 1);define('LOGIN_BREAK', 2);define('LOGIN_SUCCESS', 3);define('LOGIN_SUCCESS_CREATE_PROFILE', 20);define('LOGIN_ERROR_USERNAME', 10);define('LOGIN_ERROR_PASSWORD', 11);define('LOGIN_ERROR_ACTIVE', 12);define('LOGIN_ERROR_ATTEMPTS', 13);define('LOGIN_ERROR_EXTERNAL_AUTH', 14);define('LOGIN_ERROR_PASSWORD_CONVERT', 15);// Maximum login attempts// The value is arbitrary, but it has to fit into the user_login_attempts field.define('LOGIN_ATTEMPTS_MAX', 100);// Group settingsdefine('GROUP_OPEN', 0);define('GROUP_CLOSED', 1);define('GROUP_HIDDEN', 2);define('GROUP_SPECIAL', 3);define('GROUP_FREE', 4);// Forum/Topic statesdefine('FORUM_CAT', 0);define('FORUM_POST', 1);define('FORUM_LINK', 2);define('ITEM_UNLOCKED', 0);define('ITEM_LOCKED', 1);define('ITEM_MOVED', 2);// Forum Flagsdefine('FORUM_FLAG_LINK_TRACK', 1);define('FORUM_FLAG_PRUNE_POLL', 2);define('FORUM_FLAG_PRUNE_ANNOUNCE', 4);define('FORUM_FLAG_PRUNE_STICKY', 8);define('FORUM_FLAG_ACTIVE_TOPICS', 16);define('FORUM_FLAG_POST_REVIEW', 32);define('FORUM_FLAG_QUICK_REPLY', 64);// Forum Options... sequential order. Modifications should begin at number 10 (number 29 is maximum)define('FORUM_OPTION_FEED_NEWS', 1);define('FORUM_OPTION_FEED_EXCLUDE', 2);// Optional text flagsdefine('OPTION_FLAG_BBCODE', 1);define('OPTION_FLAG_SMILIES', 2);define('OPTION_FLAG_LINKS', 4);// Topic typesdefine('POST_NORMAL', 0);define('POST_STICKY', 1);define('POST_ANNOUNCE', 2);define('POST_GLOBAL', 3);// Lastread typesdefine('TRACK_NORMAL', 0);define('TRACK_POSTED', 1);// Notify methodsdefine('NOTIFY_EMAIL', 0);define('NOTIFY_IM', 1);define('NOTIFY_BOTH', 2);// Notify statusdefine('NOTIFY_YES', 0);define('NOTIFY_NO', 1);// Email Priority Settingsdefine('MAIL_LOW_PRIORITY', 4);define('MAIL_NORMAL_PRIORITY', 3);define('MAIL_HIGH_PRIORITY', 2);// Log typesdefine('LOG_ADMIN', 0);define('LOG_MOD', 1);define('LOG_CRITICAL', 2);define('LOG_USERS', 3);// Private messaging - Do NOT change these valuesdefine('PRIVMSGS_HOLD_BOX', -4);define('PRIVMSGS_NO_BOX', -3);define('PRIVMSGS_OUTBOX', -2);define('PRIVMSGS_SENTBOX', -1);define('PRIVMSGS_INBOX', 0);// Full Folder Actionsdefine('FULL_FOLDER_NONE', -3);define('FULL_FOLDER_DELETE', -2);define('FULL_FOLDER_HOLD', -1);// Download Modes - Attachmentsdefine('INLINE_LINK', 1);// This mode is only used internally to allow modders extending the attachment functionalitydefine('PHYSICAL_LINK', 2);// Confirm typesdefine('CONFIRM_REG', 1);define('CONFIRM_LOGIN', 2);define('CONFIRM_POST', 3);// Categories - Attachmentsdefine('ATTACHMENT_CATEGORY_NONE', 0);define('ATTACHMENT_CATEGORY_IMAGE', 1); // Inline Imagesdefine('ATTACHMENT_CATEGORY_WM', 2); // Windows Media Files - Streamingdefine('ATTACHMENT_CATEGORY_RM', 3); // Real Media Files - Streamingdefine('ATTACHMENT_CATEGORY_THUMB', 4); // Not used within the database, only while displaying postsdefine('ATTACHMENT_CATEGORY_FLASH', 5); // Flash/SWF filesdefine('ATTACHMENT_CATEGORY_QUICKTIME', 6); // Quicktime/Mov files// BBCode UID lengthdefine('BBCODE_UID_LEN', 8);// Number of core BBCodesdefine('NUM_CORE_BBCODES', 12);// BBCode hard limitdefine('BBCODE_LIMIT', 1511);// Smiley hard limitdefine('SMILEY_LIMIT', 1000);// Magic url typesdefine('MAGIC_URL_EMAIL', 1);define('MAGIC_URL_FULL', 2);define('MAGIC_URL_LOCAL', 3);define('MAGIC_URL_WWW', 4);// Profile Field Typesdefine('FIELD_INT', 1);define('FIELD_STRING', 2);define('FIELD_TEXT', 3);define('FIELD_BOOL', 4);define('FIELD_DROPDOWN', 5);define('FIELD_DATE', 6);// referer validationdefine('REFERER_VALIDATE_NONE', 0);define('REFERER_VALIDATE_HOST', 1);define('REFERER_VALIDATE_PATH', 2);// phpbb_chmod() permissions@define('CHMOD_ALL', 7);@define('CHMOD_READ', 4);@define('CHMOD_WRITE', 2);@define('CHMOD_EXECUTE', 1);// Captcha code lengthdefine('CAPTCHA_MIN_CHARS', 4);define('CAPTCHA_MAX_CHARS', 7);// Additional constantsdefine('VOTE_CONVERTED', 127);// Table namesdefine('ACL_GROUPS_TABLE',			$table_prefix . 'acl_groups');define('ACL_OPTIONS_TABLE',			$table_prefix . 'acl_options');define('ACL_ROLES_DATA_TABLE',		$table_prefix . 'acl_roles_data');define('ACL_ROLES_TABLE',			$table_prefix . 'acl_roles');define('ACL_USERS_TABLE',			$table_prefix . 'acl_users');define('ATTACHMENTS_TABLE',			$table_prefix . 'attachments');define('BANLIST_TABLE',				$table_prefix . 'banlist');define('BBCODES_TABLE',				$table_prefix . 'bbcodes');define('BOOKMARKS_TABLE',			$table_prefix . 'bookmarks');define('BOTS_TABLE',				$table_prefix . 'bots');define('CONFIG_TABLE',				$table_prefix . 'config');define('CONFIRM_TABLE',				$table_prefix . 'confirm');define('DISALLOW_TABLE',			$table_prefix . 'disallow');define('DRAFTS_TABLE',				$table_prefix . 'drafts');define('EXTENSIONS_TABLE',			$table_prefix . 'extensions');define('EXTENSION_GROUPS_TABLE',	$table_prefix . 'extension_groups');define('FORUMS_TABLE',				$table_prefix . 'forums');define('FORUMS_ACCESS_TABLE',		$table_prefix . 'forums_access');define('FORUMS_TRACK_TABLE',		$table_prefix . 'forums_track');define('FORUMS_WATCH_TABLE',		$table_prefix . 'forums_watch');define('GROUPS_TABLE',				$table_prefix . 'groups');define('ICONS_TABLE',				$table_prefix . 'icons');define('LANG_TABLE',				$table_prefix . 'lang');define('LOG_TABLE',					$table_prefix . 'log');define('LOGIN_ATTEMPT_TABLE',		$table_prefix . 'login_attempts');define('MODERATOR_CACHE_TABLE',		$table_prefix . 'moderator_cache');define('MODULES_TABLE',				$table_prefix . 'modules');define('POLL_OPTIONS_TABLE',		$table_prefix . 'poll_options');define('POLL_VOTES_TABLE',			$table_prefix . 'poll_votes');define('POSTS_TABLE',				$table_prefix . 'posts');define('PRIVMSGS_TABLE',			$table_prefix . 'privmsgs');define('PRIVMSGS_FOLDER_TABLE',		$table_prefix . 'privmsgs_folder');define('PRIVMSGS_RULES_TABLE',		$table_prefix . 'privmsgs_rules');define('PRIVMSGS_TO_TABLE',			$table_prefix . 'privmsgs_to');define('PROFILE_FIELDS_TABLE',		$table_prefix . 'profile_fields');define('PROFILE_FIELDS_DATA_TABLE',	$table_prefix . 'profile_fields_data');define('PROFILE_FIELDS_LANG_TABLE',	$table_prefix . 'profile_fields_lang');define('PROFILE_LANG_TABLE',		$table_prefix . 'profile_lang');define('RANKS_TABLE',				$table_prefix . 'ranks');define('REPORTS_TABLE',				$table_prefix . 'reports');define('REPORTS_REASONS_TABLE',		$table_prefix . 'reports_reasons');define('SEARCH_RESULTS_TABLE',		$table_prefix . 'search_results');define('SEARCH_WORDLIST_TABLE',		$table_prefix . 'search_wordlist');define('SEARCH_WORDMATCH_TABLE',	$table_prefix . 'search_wordmatch');define('SESSIONS_TABLE',			$table_prefix . 'sessions');define('SESSIONS_KEYS_TABLE',		$table_prefix . 'sessions_keys');define('SITELIST_TABLE',			$table_prefix . 'sitelist');define('SMILIES_TABLE',				$table_prefix . 'smilies');define('STYLES_TABLE',				$table_prefix . 'styles');define('STYLES_TEMPLATE_TABLE',		$table_prefix . 'styles_template');define('STYLES_TEMPLATE_DATA_TABLE',$table_prefix . 'styles_template_data');define('STYLES_THEME_TABLE',		$table_prefix . 'styles_theme');define('STYLES_IMAGESET_TABLE',		$table_prefix . 'styles_imageset');define('STYLES_IMAGESET_DATA_TABLE',$table_prefix . 'styles_imageset_data');define('TOPICS_TABLE',				$table_prefix . 'topics');define('TOPICS_POSTED_TABLE',		$table_prefix . 'topics_posted');define('TOPICS_TRACK_TABLE',		$table_prefix . 'topics_track');define('TOPICS_WATCH_TABLE',		$table_prefix . 'topics_watch');define('USER_GROUP_TABLE',			$table_prefix . 'user_group');define('USERS_TABLE',				$table_prefix . 'users');define('WARNINGS_TABLE',			$table_prefix . 'warnings');define('WORDS_TABLE',				$table_prefix . 'words');define('ZEBRA_TABLE',				$table_prefix . 'zebra');// Additional tables?>
<?php return array(''=>'0',''=>'',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'k',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1/3',''=>'2/3',''=>'1/5',''=>'2/5',''=>'3/5',''=>'4/5',''=>'1/6',''=>'5/6',''=>'1/8',''=>'3/8',''=>'5/8',''=>'7/8',''=>'1',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'11',''=>'12',''=>'50',''=>'100',''=>'500',''=>'1000',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'11',''=>'12',''=>'50',''=>'100',''=>'500',''=>'1000',''=>'1000',''=>'5000',''=>'10000',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'11',''=>'12',''=>'13',''=>'14',''=>'15',''=>'16',''=>'17',''=>'18',''=>'19',''=>'20',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'11',''=>'12',''=>'13',''=>'14',''=>'15',''=>'16',''=>'17',''=>'18',''=>'19',''=>'20',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'11',''=>'12',''=>'13',''=>'14',''=>'15',''=>'16',''=>'17',''=>'18',''=>'19',''=>'20',''=>'0',''=>'11',''=>'12',''=>'13',''=>'14',''=>'15',''=>'16',''=>'17',''=>'18',''=>'19',''=>'20',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10');
<?php/**** @package install* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License** @todo check for writable cache/store/files directory*//***/if (!defined('IN_INSTALL')){	// Someone has tried to access the file directly. This is not a good idea, so exit	exit;}if (!empty($setmodules)){	// If phpBB is not installed we do not include this module	if (@file_exists($phpbb_root_path . 'config.' . $phpEx) && !@file_exists($phpbb_root_path . 'cache/install_lock'))	{		include_once($phpbb_root_path . 'config.' . $phpEx);		if (!defined('PHPBB_INSTALLED'))		{			return;		}	}	else	{		return;	}	$module[] = array(		'module_type'		=> 'update',		'module_title'		=> 'UPDATE',		'module_filename'	=> substr(basename(__FILE__), 0, -strlen($phpEx)-1),		'module_order'		=> 30,		'module_subs'		=> '',		'module_stages'		=> array('INTRO', 'VERSION_CHECK', 'UPDATE_DB', 'FILE_CHECK', 'UPDATE_FILES'),		'module_reqs'		=> ''	);}/*** Update Installation* @package install*/class install_update extends module{	var $p_master;	var $update_info;	var $old_location;	var $new_location;	var $latest_version;	var $current_version;	var $unequal_version;	var $update_to_version;	// Set to false	var $test_update = false;	function install_update(&$p_master)	{		$this->p_master = &$p_master;	}	function main($mode, $sub)	{		global $template, $phpEx, $phpbb_root_path, $user, $db, $config, $cache, $auth, $language;		$this->tpl_name = 'install_update';		$this->page_title = 'UPDATE_INSTALLATION';		$this->unequal_version = false;		$this->old_location = $phpbb_root_path . 'install/update/old/';		$this->new_location = $phpbb_root_path . 'install/update/new/';		// Init DB		require($phpbb_root_path . 'config.' . $phpEx);		require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);		require($phpbb_root_path . 'includes/constants.' . $phpEx);		// Special options for conflicts/modified files		define('MERGE_NO_MERGE_NEW', 1);		define('MERGE_NO_MERGE_MOD', 2);		define('MERGE_NEW_FILE', 3);		define('MERGE_MOD_FILE', 4);		$db = new $sql_db();		// Connect to DB		$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, false);		// We do not need this any longer, unset for safety purposes		unset($dbpasswd);		$config = array();		$sql = 'SELECT config_name, config_value			FROM ' . CONFIG_TABLE;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$config[$row['config_name']] = $row['config_value'];		}		$db->sql_freeresult($result);		// Force template recompile		$config['load_tplcompile'] = 1;		// First of all, init the user session		$user->session_begin();		$auth->acl($user->data);		// Overwrite user's language with the selected one.		// Config needs to be changed to ensure that guests also get the selected language.		$config_default_lang = $config['default_lang'];		$config['default_lang'] = $language;		$user->data['user_lang'] = $language;		$user->setup(array('common', 'acp/common', 'acp/board', 'install', 'posting'));		// Reset the default_lang		$config['default_lang'] = $config_default_lang;		unset($config_default_lang);		// If we are within the intro page we need to make sure we get up-to-date version info		if ($sub == 'intro')		{			$cache->destroy('_version_info');		}		// Set custom template again. ;)		$template->set_custom_template('../adm/style', 'admin');		// still, the acp template is never stored in the database		$user->theme['template_storedb'] = false;		$template->assign_vars(array(			'S_USER_LANG'			=> $user->lang['USER_LANG'],			'S_CONTENT_DIRECTION'	=> $user->lang['DIRECTION'],			'S_CONTENT_ENCODING'	=> 'UTF-8',			'S_CONTENT_FLOW_BEGIN'	=> ($user->lang['DIRECTION'] == 'ltr') ? 'left' : 'right',			'S_CONTENT_FLOW_END'	=> ($user->lang['DIRECTION'] == 'ltr') ? 'right' : 'left',		));		// Get current and latest version		if (($latest_version = $cache->get('_version_info')) === false)		{			$this->latest_version = $this->get_file('version_info');			$cache->put('_version_info', $this->latest_version);		}		else		{			$this->latest_version = $latest_version;		}		// For the current version we trick a bit. ;)		$this->current_version = (!empty($config['version_update_from'])) ? $config['version_update_from'] : $config['version'];		$up_to_date = (version_compare(str_replace('rc', 'RC', strtolower($this->current_version)), str_replace('rc', 'RC', strtolower($this->latest_version)), '<')) ? false : true;		// Check for a valid update directory, else point the user to the phpbb.com website		if (!file_exists($phpbb_root_path . 'install/update') || !file_exists($phpbb_root_path . 'install/update/index.' . $phpEx) || !file_exists($this->old_location) || !file_exists($this->new_location))		{			$template->assign_vars(array(				'S_ERROR'		=> true,				'ERROR_MSG'		=> ($up_to_date) ? $user->lang['NO_UPDATE_FILES_UP_TO_DATE'] : sprintf($user->lang['NO_UPDATE_FILES_OUTDATED'], $config['version'], $this->current_version, $this->latest_version))			);			return;		}		$this->update_info = $this->get_file('update_info');		// Make sure the update directory holds the correct information		// Since admins are able to run the update/checks more than once we only check if the current version is lower or equal than the version to which we update to.		if (version_compare(str_replace('rc', 'RC', strtolower($this->current_version)), str_replace('rc', 'RC', strtolower($this->update_info['version']['to'])), '>'))		{			$template->assign_vars(array(				'S_ERROR'		=> true,				'ERROR_MSG'		=> sprintf($user->lang['INCOMPATIBLE_UPDATE_FILES'], $config['version'], $this->update_info['version']['from'], $this->update_info['version']['to']))			);			return;		}		// Check if the update files are actually meant to update from the current version		if ($this->current_version != $this->update_info['version']['from'])		{			$this->unequal_version = true;			$template->assign_vars(array(				'S_ERROR'	=> true,				'ERROR_MSG'	=> sprintf($user->lang['INCOMPATIBLE_UPDATE_FILES'], $this->current_version, $this->update_info['version']['from'], $this->update_info['version']['to']),			));		}		// Check if the update files stored are for the latest version...		if ($this->latest_version != $this->update_info['version']['to'])		{			$this->unequal_version = true;			$template->assign_vars(array(				'S_WARNING'		=> true,				'WARNING_MSG'	=> sprintf($user->lang['OLD_UPDATE_FILES'], $this->update_info['version']['from'], $this->update_info['version']['to'], $this->latest_version))			);		}		// We store the "update to" version, because it is not always the latest. ;)		$this->update_to_version = $this->update_info['version']['to'];		// Fill DB version		if (empty($config['dbms_version']))		{			set_config('dbms_version', $db->sql_server_info(true));		}		if ($this->test_update === false)		{			// Got the updater template itself updated? If so, we are able to directly use it - but only if all three files are present			if (in_array('adm/style/install_update.html', $this->update_info['files']))			{				$this->tpl_name = '../../install/update/new/adm/style/install_update';			}			// What about the language file? Got it updated?			if (in_array('language/en/install.' . $phpEx, $this->update_info['files']))			{				$lang = array();				include($this->new_location . 'language/en/install.' . $phpEx);				// only add new keys to user's language in english				$new_keys = array_diff(array_keys($lang), array_keys($user->lang));				foreach ($new_keys as $i => $new_key)				{					$user->lang[$new_key] = $lang[$new_key];				}			}		}		// Include renderer and engine		$this->include_file('includes/diff/diff.' . $phpEx);		$this->include_file('includes/diff/engine.' . $phpEx);		$this->include_file('includes/diff/renderer.' . $phpEx);		// Make sure we stay at the file check if checking the files again		if (!empty($_POST['check_again']))		{			$sub = $this->p_master->sub = 'file_check';		}		switch ($sub)		{			case 'intro':				$this->page_title = 'UPDATE_INSTALLATION';				$template->assign_vars(array(					'S_INTRO'		=> true,					'U_ACTION'		=> append_sid($this->p_master->module_url, "language=$language&amp;mode=$mode&amp;sub=version_check"),				));				// Make sure the update list is destroyed.				$cache->destroy('_update_list');				$cache->destroy('_diff_files');				$cache->destroy('_expected_files');			break;			case 'version_check':				$this->page_title = 'STAGE_VERSION_CHECK';				$template->assign_vars(array(					'S_UP_TO_DATE'		=> $up_to_date,					'S_VERSION_CHECK'	=> true,					'U_ACTION'				=> append_sid($this->p_master->module_url, "language=$language&amp;mode=$mode&amp;sub=file_check"),					'U_DB_UPDATE_ACTION'	=> append_sid($this->p_master->module_url, "language=$language&amp;mode=$mode&amp;sub=update_db"),					'LATEST_VERSION'	=> $this->latest_version,					'CURRENT_VERSION'	=> $this->current_version)				);				// Print out version the update package updates to				if ($this->unequal_version)				{					$template->assign_var('PACKAGE_VERSION', $this->update_info['version']['to']);				}				// Since some people try to update to RC releases, but phpBB.com tells them the last version is the version they currently run				// we are faced with the updater thinking the database schema is up-to-date; which it is, but should be updated none-the-less				// We now try to cope with this by triggering the update process				if (version_compare(str_replace('rc', 'RC', strtolower($this->current_version)), str_replace('rc', 'RC', strtolower($this->update_info['version']['to'])), '<'))				{					$template->assign_vars(array(						'S_UP_TO_DATE'		=> false,					));				}			break;			case 'update_db':				// Make sure the database update is valid for the latest version				$valid = false;				$updates_to_version = '';				if (file_exists($phpbb_root_path . 'install/database_update.' . $phpEx))				{					include_once($phpbb_root_path . 'install/database_update.' . $phpEx);					if ($updates_to_version === $this->update_info['version']['to'])					{						$valid = true;					}				}				// Should not happen at all				if (!$valid)				{					trigger_error($user->lang['DATABASE_UPDATE_INFO_OLD'], E_USER_ERROR);				}				// Just a precaution				$cache->purge();				// Redirect the user to the database update script with some explanations...				$template->assign_vars(array(					'S_DB_UPDATE'			=> true,					'S_DB_UPDATE_FINISHED'	=> ($config['version'] == $this->update_info['version']['to']) ? true : false,					'U_DB_UPDATE'			=> append_sid($phpbb_root_path . 'install/database_update.' . $phpEx, 'type=1&amp;language=' . $user->data['user_lang']),					'U_DB_UPDATE_ACTION'	=> append_sid($this->p_master->module_url, "language=$language&amp;mode=$mode&amp;sub=update_db"),					'U_ACTION'				=> append_sid($this->p_master->module_url, "language=$language&amp;mode=$mode&amp;sub=file_check"),				));			break;			case 'file_check':				// retrieve info on what changes should have already been made to the files.				$expected_files = $cache->get('_expected_files');				if (!$expected_files)				{					$expected_files = array();				}				// Now make sure the previous file collection is no longer valid...				$cache->destroy('_diff_files');				$this->page_title = 'STAGE_FILE_CHECK';				// Now make sure our update list is correct if the admin refreshes				$action = request_var('action', '');				// We are directly within an update. To make sure our update list is correct we check its status.				$update_list = (!empty($_POST['check_again'])) ? false : $cache->get('_update_list');				$modified = ($update_list !== false) ? @filemtime($cache->cache_dir . 'data_update_list.' . $phpEx) : 0;				// Make sure the list is up-to-date				if ($update_list !== false)				{					$get_new_list = false;					foreach ($this->update_info['files'] as $file)					{						if (file_exists($phpbb_root_path . $file) && filemtime($phpbb_root_path . $file) > $modified)						{							$get_new_list = true;							break;						}					}				}				else				{					$get_new_list = true;				}				if (!$get_new_list && $update_list['status'] != -1)				{					$get_new_list = true;				}				if ($get_new_list)				{					$this->get_update_structure($update_list, $expected_files);					$cache->put('_update_list', $update_list);					// Refresh the page if we are still not finished...					if ($update_list['status'] != -1)					{						$refresh_url = append_sid($this->p_master->module_url, "language=$language&amp;mode=$mode&amp;sub=file_check");						meta_refresh(2, $refresh_url);						$template->assign_vars(array(							'S_IN_PROGRESS'		=> true,							'S_COLLECTED'		=> (int) $update_list['status'],							'S_TO_COLLECT'		=> sizeof($this->update_info['files']),							'L_IN_PROGRESS'				=> $user->lang['COLLECTING_FILE_DIFFS'],							'L_IN_PROGRESS_EXPLAIN'		=> sprintf($user->lang['NUMBER_OF_FILES_COLLECTED'], (int) $update_list['status'], sizeof($this->update_info['files'])),						));						return;					}				}				if ($action == 'diff')				{					$this->show_diff($update_list);					return;				}				if (sizeof($update_list['no_update']))				{					$template->assign_vars(array(						'S_NO_UPDATE_FILES'		=> true,						'NO_UPDATE_FILES'		=> implode(', ', array_map('htmlspecialchars', $update_list['no_update'])))					);				}				$new_expected_files = array();				// Now assign the list to the template				foreach ($update_list as $status => $filelist)				{					if ($status == 'no_update' || !sizeof($filelist) || $status == 'status')					{						continue;					}/*					$template->assign_block_vars('files', array(						'S_STATUS'		=> true,						'STATUS'		=> $status,						'L_STATUS'		=> $user->lang['STATUS_' . strtoupper($status)],						'TITLE'			=> $user->lang['FILES_' . strtoupper($status)],						'EXPLAIN'		=> $user->lang['FILES_' . strtoupper($status) . '_EXPLAIN'],						)					);*/					foreach ($filelist as $file_struct)					{						$s_binary = (!empty($this->update_info['binary']) && in_array($file_struct['filename'], $this->update_info['binary'])) ? true : false;						$filename = htmlspecialchars($file_struct['filename']);						if (strrpos($filename, '/') !== false)						{							$dir_part = substr($filename, 0, strrpos($filename, '/') + 1);							$file_part = substr($filename, strrpos($filename, '/') + 1);						}						else						{							$dir_part = '';							$file_part = $filename;						}						$diff_url = append_sid($this->p_master->module_url, "language=$language&amp;mode=$mode&amp;sub=file_check&amp;action=diff&amp;status=$status&amp;file=" . urlencode($file_struct['filename']));						if (isset($file_struct['as_expected']) && $file_struct['as_expected'])						{							$new_expected_files[$file_struct['filename']] = $expected_files[$file_struct['filename']];						}						else						{							$template->assign_block_vars($status, array(								'STATUS'			=> $status,								'FILENAME'			=> $filename,								'DIR_PART'			=> $dir_part,								'FILE_PART'			=> $file_part,								'NUM_CONFLICTS'		=> (isset($file_struct['conflicts'])) ? $file_struct['conflicts'] : 0,								'S_CUSTOM'			=> ($file_struct['custom']) ? true : false,								'S_BINARY'			=> $s_binary,								'CUSTOM_ORIGINAL'	=> ($file_struct['custom']) ? $file_struct['original'] : '',								'U_SHOW_DIFF'		=> $diff_url,								'L_SHOW_DIFF'		=> ($status != 'up_to_date') ? $user->lang['SHOW_DIFF_' . strtoupper($status)] : '',								'U_VIEW_MOD_FILE'		=> $diff_url . '&amp;op=' . MERGE_MOD_FILE,								'U_VIEW_NEW_FILE'		=> $diff_url . '&amp;op=' . MERGE_NEW_FILE,								'U_VIEW_NO_MERGE_MOD'	=> $diff_url . '&amp;op=' . MERGE_NO_MERGE_MOD,								'U_VIEW_NO_MERGE_NEW'	=> $diff_url . '&amp;op=' . MERGE_NO_MERGE_NEW,							));						}					}				}				$cache->put('_expected_files', $new_expected_files);				$all_up_to_date = true;				foreach ($update_list as $status => $filelist)				{					if ($status != 'up_to_date' && $status != 'custom' && $status != 'status' && sizeof($filelist))					{						$all_up_to_date = false;						break;					}				}				$template->assign_vars(array(					'S_FILE_CHECK'			=> true,					'S_ALL_UP_TO_DATE'		=> $all_up_to_date,					'S_VERSION_UP_TO_DATE'	=> $up_to_date,					'U_ACTION'				=> append_sid($this->p_master->module_url, "language=$language&amp;mode=$mode&amp;sub=file_check"),					'U_UPDATE_ACTION'		=> append_sid($this->p_master->module_url, "language=$language&amp;mode=$mode&amp;sub=update_files"),					'U_DB_UPDATE_ACTION'	=> append_sid($this->p_master->module_url, "language=$language&amp;mode=$mode&amp;sub=update_db"),				));				if ($all_up_to_date)				{					// Add database update to log					add_log('admin', 'LOG_UPDATE_PHPBB', $this->current_version, $this->update_to_version);					// Refresh prosilver css data - this may cause some unhappy users, but					$sql = 'SELECT *						FROM ' . STYLES_THEME_TABLE . "						WHERE LOWER(theme_name) = 'prosilver'";					$result = $db->sql_query($sql);					$theme = $db->sql_fetchrow($result);					$db->sql_freeresult($result);					if ($theme)					{						$recache = (empty($theme['theme_data'])) ? true : false;						$update_time = time();						// We test for stylesheet.css because it is faster and most likely the only file changed on common themes						if (!$recache && $theme['theme_mtime'] < @filemtime("{$phpbb_root_path}styles/" . $theme['theme_path'] . '/theme/stylesheet.css'))						{							$recache = true;							$update_time = @filemtime("{$phpbb_root_path}styles/" . $theme['theme_path'] . '/theme/stylesheet.css');						}						else if (!$recache)						{							$last_change = $theme['theme_mtime'];							$dir = @opendir("{$phpbb_root_path}styles/{$theme['theme_path']}/theme");							if ($dir)							{								while (($entry = readdir($dir)) !== false)								{									if (substr(strrchr($entry, '.'), 1) == 'css' && $last_change < @filemtime("{$phpbb_root_path}styles/{$theme['theme_path']}/theme/{$entry}"))									{										$recache = true;										break;									}								}								closedir($dir);							}						}						if ($recache)						{							// Instead of re-caching here, we simply remove theme_data... HAR HAR HAR (think about a carribean pirate)							$sql = 'UPDATE ' . STYLES_THEME_TABLE . " SET theme_data = ''								WHERE theme_id = " . $theme['theme_id'];							$db->sql_query($sql);							$cache->destroy('sql', STYLES_THEME_TABLE);							$cache->destroy('sql', STYLES_TABLE);						}					}					$db->sql_return_on_error(true);					$db->sql_query('DELETE FROM ' . CONFIG_TABLE . " WHERE config_name = 'version_update_from'");					$db->sql_return_on_error(false);					$cache->purge();				}			break;			case 'update_files':				$this->page_title = 'STAGE_UPDATE_FILES';				$s_hidden_fields = '';				$params = array();				$conflicts = request_var('conflict', array('' => 0));				$modified = request_var('modified', array('' => 0));				foreach ($conflicts as $filename => $merge_option)				{					$s_hidden_fields .= '<input type="hidden" name="conflict[' . htmlspecialchars($filename) . ']" value="' . $merge_option . '" />';					$params[] = 'conflict[' . urlencode($filename) . ']=' . urlencode($merge_option);				}				foreach ($modified as $filename => $merge_option)				{					if (!$merge_option)					{						continue;					}					$s_hidden_fields .= '<input type="hidden" name="modified[' . htmlspecialchars($filename) . ']" value="' . $merge_option . '" />';					$params[] = 'modified[' . urlencode($filename) . ']=' . urlencode($merge_option);				}				$no_update = request_var('no_update', array(0 => ''));				foreach ($no_update as $index => $filename)				{					$s_hidden_fields .= '<input type="hidden" name="no_update[]" value="' . htmlspecialchars($filename) . '" />';					$params[] = 'no_update[]=' . urlencode($filename);				}				// Before the user is choosing his preferred method, let's create the content list...				$update_list = $cache->get('_update_list');				if ($update_list === false)				{					trigger_error($user->lang['NO_UPDATE_INFO'], E_USER_ERROR);				}				// Check if the conflicts data is valid				if (sizeof($conflicts))				{					$conflict_filenames = array();					foreach ($update_list['conflict'] as $files)					{						$conflict_filenames[] = $files['filename'];					}					$new_conflicts = array();					foreach ($conflicts as $filename => $diff_method)					{						if (in_array($filename, $conflict_filenames))						{							$new_conflicts[$filename] = $diff_method;						}					}					$conflicts = $new_conflicts;				}				// Build list for modifications				if (sizeof($modified))				{					$modified_filenames = array();					foreach ($update_list['modified'] as $files)					{						$modified_filenames[] = $files['filename'];					}					$new_modified = array();					foreach ($modified as $filename => $diff_method)					{						if (in_array($filename, $modified_filenames))						{							$new_modified[$filename] = $diff_method;						}					}					$modified = $new_modified;				}				// Check number of conflicting files, they need to be equal. For modified files the number can differ				if (sizeof($update_list['conflict']) != sizeof($conflicts))				{					trigger_error($user->lang['MERGE_SELECT_ERROR'], E_USER_ERROR);				}				// Before we do anything, let us diff the files and store the raw file information "somewhere"				$get_files = false;				$file_list = $cache->get('_diff_files');				$expected_files = $cache->get('_expected_files');				if ($file_list === false || $file_list['status'] != -1)				{					$get_files = true;				}				if ($get_files)				{					if ($file_list === false)					{						$file_list = array(							'status'	=> 0,						);					}					if (!isset($expected_files) || $expected_files === false)					{						$expected_files = array();					}					$processed = 0;					foreach ($update_list as $status => $files)					{						if (!is_array($files))						{							continue;						}						foreach ($files as $file_struct)						{							// Skip this file if the user selected to not update it							if (in_array($file_struct['filename'], $no_update))							{								$expected_files[$file_struct['filename']] = false;								continue;							}							// Already handled... then skip of course...							if (isset($file_list[$file_struct['filename']]))							{								continue;							}							// Refresh if we reach 5 diffs...							if ($processed >= 5)							{								$cache->put('_diff_files', $file_list);								if (!empty($_REQUEST['download']))								{									$params[] = 'download=1';								}								$redirect_url = append_sid($this->p_master->module_url, "language=$language&amp;mode=$mode&amp;sub=update_files&amp;" . implode('&amp;', $params));								meta_refresh(3, $redirect_url);								$template->assign_vars(array(									'S_IN_PROGRESS'			=> true,									'L_IN_PROGRESS'			=> $user->lang['MERGING_FILES'],									'L_IN_PROGRESS_EXPLAIN'	=> $user->lang['MERGING_FILES_EXPLAIN'],								));								return;							}							if (file_exists($phpbb_root_path . $file_struct['filename']))							{								$contents = file_get_contents($phpbb_root_path . $file_struct['filename']);								if (isset($expected_files[$file_struct['filename']]) && md5($contents) == $expected_files[$file_struct['filename']])								{									continue;								}							}							$original_filename = ($file_struct['custom']) ? $file_struct['original'] : $file_struct['filename'];							switch ($status)							{								case 'modified':									$option = (isset($modified[$file_struct['filename']])) ? $modified[$file_struct['filename']] : 0;									switch ($option)									{										case MERGE_NO_MERGE_NEW:											$contents = file_get_contents($this->new_location . $original_filename);										break;										case MERGE_NO_MERGE_MOD:											$contents = file_get_contents($phpbb_root_path . $file_struct['filename']);										break;										default:											$diff = $this->return_diff($this->old_location . $original_filename, $phpbb_root_path . $file_struct['filename'], $this->new_location . $original_filename);											$contents = implode("\n", $diff->merged_output());											unset($diff);										break;									}									$expected_files[$file_struct['filename']] = md5($contents);									$file_list[$file_struct['filename']] = '_file_' . md5($file_struct['filename']);									$cache->put($file_list[$file_struct['filename']], base64_encode($contents));									$file_list['status']++;									$processed++;								break;								case 'conflict':									$option = $conflicts[$file_struct['filename']];									$contents = '';									switch ($option)									{										case MERGE_NO_MERGE_NEW:											$contents = file_get_contents($this->new_location . $original_filename);										break;										case MERGE_NO_MERGE_MOD:											$contents = file_get_contents($phpbb_root_path . $file_struct['filename']);										break;										default:											$diff = $this->return_diff($this->old_location . $original_filename, $phpbb_root_path . $file_struct['filename'], $this->new_location . $original_filename);											if ($option == MERGE_NEW_FILE)											{												$contents = implode("\n", $diff->merged_new_output());											}											else if ($option == MERGE_MOD_FILE)											{												$contents = implode("\n", $diff->merged_orig_output());											}											else											{												unset($diff);												break 2;											}											unset($diff);										break;									}									$expected_files[$file_struct['filename']] = md5($contents);									$file_list[$file_struct['filename']] = '_file_' . md5($file_struct['filename']);									$cache->put($file_list[$file_struct['filename']], base64_encode($contents));									$file_list['status']++;									$processed++;								break;							}						}					}					$cache->put('_expected_files', $expected_files);				}				$file_list['status'] = -1;				$cache->put('_diff_files', $file_list);				if (!empty($_REQUEST['download']))				{					$this->include_file('includes/functions_compress.' . $phpEx);					$use_method = request_var('use_method', '');					$methods = array('.tar');					$available_methods = array('.tar.gz' => 'zlib', '.tar.bz2' => 'bz2', '.zip' => 'zlib');					foreach ($available_methods as $type => $module)					{						if (!@extension_loaded($module))						{							continue;						}						$methods[] = $type;					}					// Let the user decide in which format he wants to have the pack					if (!$use_method)					{						$this->page_title = 'SELECT_DOWNLOAD_FORMAT';						$radio_buttons = '';						foreach ($methods as $method)						{							$radio_buttons .= '<label><input type="radio"' . ((!$radio_buttons) ? ' id="use_method"' : '') . ' class="radio" value="' . $method . '" name="use_method" /> ' . $method . '</label>';						}						$template->assign_vars(array(							'S_DOWNLOAD_FILES'		=> true,							'U_ACTION'				=> append_sid($this->p_master->module_url, "language=$language&amp;mode=$mode&amp;sub=update_files"),							'RADIO_BUTTONS'			=> $radio_buttons,							'S_HIDDEN_FIELDS'		=> $s_hidden_fields)						);						// To ease the update process create a file location map						$update_list = $cache->get('_update_list');						$script_path = ($config['force_server_vars']) ? (($config['script_path'] == '/') ? '/' : $config['script_path'] . '/') : $user->page['root_script_path'];						foreach ($update_list as $status => $files)						{							if ($status == 'up_to_date' || $status == 'no_update' || $status == 'status')							{								continue;							}							foreach ($files as $file_struct)							{								if (in_array($file_struct['filename'], $no_update))								{									continue;								}								$template->assign_block_vars('location', array(									'SOURCE'		=> htmlspecialchars($file_struct['filename']),									'DESTINATION'	=> $script_path . htmlspecialchars($file_struct['filename']),								));							}						}						return;					}					if (!in_array($use_method, $methods))					{						$use_method = '.tar';					}					$update_mode = 'download';				}				else				{					$this->include_file('includes/functions_transfer.' . $phpEx);					// Choose FTP, if not available use fsock...					$method = basename(request_var('method', ''));					$submit = (isset($_POST['submit'])) ? true : false;					$test_ftp_connection = request_var('test_connection', '');					if (!$method || !class_exists($method))					{						$method = 'ftp';						$methods = transfer::methods();						if (!in_array('ftp', $methods))						{							$method = $methods[0];						}					}					$test_connection = false;					if ($test_ftp_connection || $submit)					{						$transfer = new $method(request_var('host', ''), request_var('username', ''), request_var('password', ''), request_var('root_path', ''), request_var('port', ''), request_var('timeout', ''));						$test_connection = $transfer->open_session();						// Make sure that the directory is correct by checking for the existence of common.php						if ($test_connection === true)						{							// Check for common.php file							if (!$transfer->file_exists($phpbb_root_path, 'common.' . $phpEx))							{								$test_connection = 'ERR_WRONG_PATH_TO_PHPBB';							}						}						$transfer->close_session();						// Make sure the login details are correct before continuing						if ($submit && $test_connection !== true)						{							$submit = false;							$test_ftp_connection = true;						}					}					$s_hidden_fields .= build_hidden_fields(array('method' => $method));					if (!$submit)					{						$this->page_title = 'SELECT_FTP_SETTINGS';						if (!class_exists($method))						{							trigger_error('Method does not exist.', E_USER_ERROR);						}						$requested_data = call_user_func(array($method, 'data'));						foreach ($requested_data as $data => $default)						{							$template->assign_block_vars('data', array(								'DATA'		=> $data,								'NAME'		=> $user->lang[strtoupper($method . '_' . $data)],								'EXPLAIN'	=> $user->lang[strtoupper($method . '_' . $data) . '_EXPLAIN'],								'DEFAULT'	=> (!empty($_REQUEST[$data])) ? request_var($data, '') : $default							));						}						$template->assign_vars(array(							'S_CONNECTION_SUCCESS'		=> ($test_ftp_connection && $test_connection === true) ? true : false,							'S_CONNECTION_FAILED'		=> ($test_ftp_connection && $test_connection !== true) ? true : false,							'ERROR_MSG'					=> ($test_ftp_connection && $test_connection !== true) ? $user->lang[$test_connection] : '',							'S_FTP_UPLOAD'		=> true,							'UPLOAD_METHOD'		=> $method,							'U_ACTION'			=> append_sid($this->p_master->module_url, "language=$language&amp;mode=$mode&amp;sub=update_files"),							'U_DOWNLOAD_METHOD'	=> append_sid($this->p_master->module_url, "language=$language&amp;mode=$mode&amp;sub=update_files&amp;download=1"),							'S_HIDDEN_FIELDS'	=> $s_hidden_fields,						));						return;					}					$update_mode = 'upload';				}				// Now update the installation or download the archive...				$download_filename = 'update_' . $this->update_info['version']['from'] . '_to_' . $this->update_info['version']['to'];				$archive_filename = $download_filename . '_' . time() . '_' . unique_id();				// Now init the connection				if ($update_mode == 'download')				{					if (function_exists('phpbb_is_writable') && !phpbb_is_writable($phpbb_root_path . 'store/'))					{						trigger_error(sprintf('The directory %s is not writable.', $phpbb_root_path . 'store/'), E_USER_ERROR);					}					if ($use_method == '.zip')					{						$compress = new compress_zip('w', $phpbb_root_path . 'store/' . $archive_filename . $use_method);					}					else					{						$compress = new compress_tar('w', $phpbb_root_path . 'store/' . $archive_filename . $use_method, $use_method);					}				}				else				{					$transfer = new $method(request_var('host', ''), request_var('username', ''), request_var('password', ''), request_var('root_path', ''), request_var('port', ''), request_var('timeout', ''));					$transfer->open_session();				}				// Ok, go through the update list and do the operations based on their status				foreach ($update_list as $status => $files)				{					if (!is_array($files))					{						continue;					}					foreach ($files as $file_struct)					{						// Skip this file if the user selected to not update it						if (in_array($file_struct['filename'], $no_update))						{							continue;						}						$original_filename = ($file_struct['custom']) ? $file_struct['original'] : $file_struct['filename'];						switch ($status)						{							case 'new':							case 'new_conflict':							case 'not_modified':								if ($update_mode == 'download')								{									$compress->add_custom_file($this->new_location . $original_filename, $file_struct['filename']);								}								else								{									if ($status != 'new')									{										$transfer->rename($file_struct['filename'], $file_struct['filename'] . '.bak');									}									// New directory too?									$dirname = dirname($file_struct['filename']);									if ($dirname && !file_exists($phpbb_root_path . $dirname))									{										$transfer->make_dir($dirname);									}									$transfer->copy_file($this->new_location . $original_filename, $file_struct['filename']);								}							break;							case 'modified':								$contents = base64_decode($cache->get($file_list[$file_struct['filename']]));								if ($update_mode == 'download')								{									$compress->add_data($contents, $file_struct['filename']);								}								else								{									// @todo add option to specify if a backup file should be created?									$transfer->rename($file_struct['filename'], $file_struct['filename'] . '.bak');									$transfer->write_file($file_struct['filename'], $contents);								}							break;							case 'conflict':								$contents = base64_decode($cache->get($file_list[$file_struct['filename']]));								if ($update_mode == 'download')								{									$compress->add_data($contents, $file_struct['filename']);								}								else								{									$transfer->rename($file_struct['filename'], $file_struct['filename'] . '.bak');									$transfer->write_file($file_struct['filename'], $contents);								}							break;						}					}				}				if ($update_mode == 'download')				{					$compress->close();					$compress->download($archive_filename, $download_filename);					@unlink($phpbb_root_path . 'store/' . $archive_filename . $use_method);					exit;				}				else				{					$transfer->close_session();					$template->assign_vars(array(						'S_UPLOAD_SUCCESS'	=> true,						'U_ACTION'			=> append_sid($this->p_master->module_url, "language=$language&amp;mode=$mode&amp;sub=file_check"))					);					return;				}			break;		}	}	/**	* Show file diff	*/	function show_diff(&$update_list)	{		global $phpbb_root_path, $template, $user;		$this->tpl_name = 'install_update_diff';		// Got the diff template itself updated? If so, we are able to directly use it		if (in_array('adm/style/install_update_diff.html', $this->update_info['files']))		{			$this->tpl_name = '../../install/update/new/adm/style/install_update_diff';		}		$this->page_title = 'VIEWING_FILE_DIFF';		$status = request_var('status', '');		$file = request_var('file', '');		$diff_mode = request_var('diff_mode', 'inline');		// First of all make sure the file is within our file update list with the correct status		$found_entry = array();		foreach ($update_list[$status] as $index => $file_struct)		{			if ($file_struct['filename'] === $file)			{				$found_entry = $update_list[$status][$index];			}		}		if (empty($found_entry))		{			trigger_error($user->lang['FILE_DIFF_NOT_ALLOWED'], E_USER_ERROR);		}		// If the status is 'up_to_date' then we do not need to show a diff		if ($status == 'up_to_date')		{			trigger_error($user->lang['FILE_ALREADY_UP_TO_DATE'], E_USER_ERROR);		}		$original_file = ($found_entry['custom']) ? $found_entry['original'] : $file;		// Get the correct diff		switch ($status)		{			case 'conflict':				$option = request_var('op', 0);				switch ($option)				{					case MERGE_NO_MERGE_NEW:					case MERGE_NO_MERGE_MOD:						$diff = $this->return_diff(array(), ($option == MERGE_NO_MERGE_NEW) ? $this->new_location . $original_file : $phpbb_root_path . $file);						$template->assign_var('S_DIFF_NEW_FILE', true);						$diff_mode = 'inline';						$this->page_title = 'VIEWING_FILE_CONTENTS';					break;					// Merge differences and use new phpBB code for conflicted blocks					case MERGE_NEW_FILE:					case MERGE_MOD_FILE:						$diff = $this->return_diff($this->old_location . $original_file, $phpbb_root_path . $file, $this->new_location . $original_file);						$template->assign_vars(array(							'S_DIFF_CONFLICT_FILE'	=> true,							'NUM_CONFLICTS'			=> $diff->get_num_conflicts())						);						$diff = $this->return_diff($phpbb_root_path . $file, ($option == MERGE_NEW_FILE) ? $diff->merged_new_output() : $diff->merged_orig_output());					break;					// Download conflict file					default:						$diff = $this->return_diff($this->old_location . $original_file, $phpbb_root_path . $file, $this->new_location . $original_file);						header('Pragma: no-cache');						header("Content-Type: application/octetstream; name=\"$file\"");						header("Content-disposition: attachment; filename=$file");						@set_time_limit(0);						echo implode("\n", $diff->get_conflicts_content());						flush();						exit;					break;				}			break;			case 'modified':				$option = request_var('op', 0);				switch ($option)				{					case MERGE_NO_MERGE_NEW:					case MERGE_NO_MERGE_MOD:						$diff = $this->return_diff(array(), ($option == MERGE_NO_MERGE_NEW) ? $this->new_location . $original_file : $phpbb_root_path . $file);						$template->assign_var('S_DIFF_NEW_FILE', true);						$diff_mode = 'inline';						$this->page_title = 'VIEWING_FILE_CONTENTS';					break;					default:						$diff = $this->return_diff($this->old_location . $original_file, $phpbb_root_path . $original_file, $this->new_location . $file);						$diff = $this->return_diff($phpbb_root_path . $file, $diff->merged_output());					break;				}			break;			case 'not_modified':			case 'new_conflict':				$diff = $this->return_diff($phpbb_root_path . $file, $this->new_location . $original_file);			break;			case 'new':				$diff = $this->return_diff(array(), $this->new_location . $original_file);				$template->assign_var('S_DIFF_NEW_FILE', true);				$diff_mode = 'inline';				$this->page_title = 'VIEWING_FILE_CONTENTS';			break;		}		$diff_mode_options = '';		foreach (array('side_by_side', 'inline', 'unified', 'raw') as $option)		{			$diff_mode_options .= '<option value="' . $option . '"' . (($diff_mode == $option) ? ' selected="selected"' : '') . '>' . $user->lang['DIFF_' . strtoupper($option)] . '</option>';		}		// Now the correct renderer		$render_class = 'diff_renderer_' . $diff_mode;		if (!class_exists($render_class))		{			trigger_error('Chosen diff mode is not supported', E_USER_ERROR);		}		$renderer = new $render_class();		$template->assign_vars(array(			'DIFF_CONTENT'			=> $renderer->get_diff_content($diff),			'DIFF_MODE'				=> $diff_mode,			'S_DIFF_MODE_OPTIONS'	=> $diff_mode_options,			'S_SHOW_DIFF'			=> true,		));		unset($diff, $renderer);	}	/**	* Collect all file status infos we need for the update by diffing all files	*/	function get_update_structure(&$update_list, $expected_files)	{		global $phpbb_root_path, $phpEx, $user;		if ($update_list === false)		{			$update_list = array(				'up_to_date'	=> array(),				'new'			=> array(),				'not_modified'	=> array(),				'modified'		=> array(),				'new_conflict'	=> array(),				'conflict'		=> array(),				'no_update'		=> array(),				'status'		=> 0,			);		}		/* if (!empty($this->update_info['custom']))		{			foreach ($this->update_info['custom'] as $original_file => $file_ary)			{				foreach ($file_ary as $index => $file)				{					$this->make_update_diff($update_list, $original_file, $file, true);				}			}		} */		// Get a list of those files which are completely new by checking with file_exists...		$num_bytes_processed = 0;		foreach ($this->update_info['files'] as $index => $file)		{			if (is_int($update_list['status']) && $index < $update_list['status'])			{				continue;			}			if ($num_bytes_processed >= 500 * 1024)			{				return;			}			if (!file_exists($phpbb_root_path . $file))			{				// Make sure the update files are consistent by checking if the file is in new_files...				if (!file_exists($this->new_location . $file))				{					trigger_error($user->lang['INCOMPLETE_UPDATE_FILES'], E_USER_ERROR);				}				// If the file exists within the old directory the file got removed and we will write it back				// not a biggie, but we might want to state this circumstance separately later.				//	if (file_exists($this->old_location . $file))				//	{				//		$update_list['removed'][] = $file;				//	}				/* Only include a new file as new if the underlying path exist				// The path normally do not exist if the original style or language has been removed				if (file_exists($phpbb_root_path . dirname($file)))				{					$this->get_custom_info($update_list['new'], $file);					$update_list['new'][] = array('filename' => $file, 'custom' => false);				}				else				{					// Do not include style-related or language-related content					if (strpos($file, 'styles/') !== 0 && strpos($file, 'language/') !== 0)					{						$update_list['no_update'][] = $file;					}				}*/				if (file_exists($phpbb_root_path . dirname($file)) || (strpos($file, 'styles/') !== 0 && strpos($file, 'language/') !== 0))				{					$this->get_custom_info($update_list['new'], $file);					$update_list['new'][] = array('filename' => $file, 'custom' => false);				}				// unset($this->update_info['files'][$index]);			}			else			{				// not modified?				$this->make_update_diff($update_list, $file, $file, $expected_files);			}			$num_bytes_processed += (file_exists($this->new_location . $file)) ? filesize($this->new_location . $file) : 100 * 1024;			$update_list['status']++;		}		$update_list['status'] = -1;/*		if (!sizeof($this->update_info['files']))		{			return $update_list;		}		// Now diff the remaining files to get information about their status (not modified/modified/up-to-date)		// not modified?		foreach ($this->update_info['files'] as $index => $file)		{			$this->make_update_diff($update_list, $file, $file);		}		// Now to the styles...		if (empty($this->update_info['custom']))		{			return $update_list;		}		foreach ($this->update_info['custom'] as $original_file => $file_ary)		{			foreach ($file_ary as $index => $file)			{				$this->make_update_diff($update_list, $original_file, $file, true);			}		}		return $update_list;*/	}	/**	* Compare files for storage in update_list	*/	function make_update_diff(&$update_list, $original_file, $file, $expected_files, $custom = false)	{		global $phpbb_root_path, $user;		$update_ary = array('filename' => $file, 'custom' => $custom, 'as_expected' => false);		if ($custom)		{			$update_ary['original'] = $original_file;		}		if (file_exists($phpbb_root_path . $file))		{			$content = file_get_contents($phpbb_root_path . $file);			if (isset($expected_files[$file]) && // the user already selected what to do with this file				($expected_files[$file] === false || // the user wanted this file to stay the same, so just assume it's alright				$expected_files[$file] === md5($content)))			{				// the file contains what it was supposed to contain after the merge				$update_ary['as_expected'] = true;				$update_ary['was_ignored'] = ($expected_files[$file] === false);				$update_list['up_to_date'][] = $update_ary;				return;			}		}		// we only want to know if the files are successfully merged and newlines could result in errors (duplicate addition of lines and such things)		// Therefore we check for empty diffs with two methods, preserving newlines and not preserving them (which mostly works best, therefore the first option)		// On a successfull update the new location file exists but the old one does not exist.		// Check for this circumstance, the new file need to be up-to-date with the current file then...		if (!file_exists($this->old_location . $original_file) && file_exists($this->new_location . $original_file) && file_exists($phpbb_root_path . $file))		{			$tmp = array(				'file1'		=> file_get_contents($this->new_location . $original_file),				'file2'		=> $content,			);			// We need to diff the contents here to make sure the file is really the one we expect			$diff = new diff($tmp['file1'], $tmp['file2'], false);			$empty = $diff->is_empty();			unset($tmp, $diff);			// if there are no differences we have an up-to-date file...			if ($empty)			{				$update_list['up_to_date'][] = $update_ary;				return;			}			// If no other status matches we have another file in the way...			$update_list['new_conflict'][] = $update_ary;			return;		}		// Old file removed?		if (file_exists($this->old_location . $original_file) && !file_exists($this->new_location . $original_file))		{			return;		}		// Check for existance, else abort immediately		if (!file_exists($this->old_location . $original_file) || !file_exists($this->new_location . $original_file))		{			trigger_error($user->lang['INCOMPLETE_UPDATE_FILES'], E_USER_ERROR);		}		$preserve_cr_ary = array(false, true);		foreach ($preserve_cr_ary as $preserve_cr)		{			$tmp = array(				'file1'		=> file_get_contents($this->old_location . $original_file),				'file2'		=> $content,			);			// We need to diff the contents here to make sure the file is really the one we expect			$diff = new diff($tmp['file1'], $tmp['file2'], $preserve_cr);			$empty_1 = $diff->is_empty();			unset($tmp, $diff);			$tmp = array(				'file1'		=> file_get_contents($this->new_location . $original_file),				'file2'		=> $content,			);			$diff = new diff($tmp['file1'], $tmp['file2'], $preserve_cr);			$empty_2 = $diff->is_empty();			unset($tmp, $diff);			// If the file is not modified we are finished here...			if ($empty_1)			{				// Further check if it is already up to date - it could happen that non-modified files				// slip through				if ($empty_2)				{					$update_list['up_to_date'][] = $update_ary;					return;				}				$update_list['not_modified'][] = $update_ary;				return;			}			// If the file had been modified then we need to check if it is already up to date			// if there are no differences we have an up-to-date file...			if ($empty_2)			{				$update_list['up_to_date'][] = $update_ary;				return;			}		}		$conflicts = false;		foreach ($preserve_cr_ary as $preserve_cr)		{			// if the file is modified we try to make sure a merge succeed			$tmp = array(				'orig'		=> file_get_contents($this->old_location . $original_file),				'final1'	=> file_get_contents($phpbb_root_path . $file),				'final2'	=> file_get_contents($this->new_location . $original_file),			);			$diff = new diff3($tmp['orig'], $tmp['final1'], $tmp['final2'], $preserve_cr);			unset($tmp);			if (!$diff->get_num_conflicts())			{				$tmp = array(					'file1'		=> file_get_contents($phpbb_root_path . $file),					'file2'		=> implode("\n", $diff->merged_output()),				);				// now compare the merged output with the original file to see if the modified file is up to date				$diff2 = new diff($tmp['file1'], $tmp['file2'], $preserve_cr);				$empty = $diff2->is_empty();				unset($diff, $diff2);				if ($empty)				{					$update_list['up_to_date'][] = $update_ary;					return;				}				// If we preserve cr tag it as modified because the conflict would not show in this mode anyway				if ($preserve_cr)				{					$update_list['modified'][] = $update_ary;					return;				}			}			else			{				// There is one special case... users having merged with a conflicting file... we need to check this				$tmp = array(					'file1'		=> file_get_contents($phpbb_root_path . $file),					'file2'		=> implode("\n", $diff->merged_new_output()),				);				$diff2 = new diff($tmp['file1'], $tmp['file2'], $preserve_cr);				$empty = $diff2->is_empty();				if (!$empty)				{					unset($tmp, $diff2);					// We check if the user merged with his output					$tmp = array(						'file1'		=> file_get_contents($phpbb_root_path . $file),						'file2'		=> implode("\n", $diff->merged_orig_output()),					);					$diff2 = new diff($tmp['file1'], $tmp['file2'], $preserve_cr);					$empty = $diff2->is_empty();				}				if (!$empty)				{					$conflicts = $diff->get_num_conflicts();				}				unset($diff, $diff2);				if ($empty)				{					// A conflict got resolved...					$update_list['up_to_date'][] = $update_ary;					return;				}			}		}		if ($conflicts !== false)		{			$update_ary['conflicts'] = $conflicts;			$update_list['conflict'][] = $update_ary;			return;		}		// If no other status matches we have a modified file...		$update_list['modified'][] = $update_ary;	}	/**	* Update update_list with custom new files	*/	function get_custom_info(&$update_list, $file)	{		if (empty($this->update_info['custom']))		{			return;		}		if (isset($this->update_info['custom'][$file]))		{			foreach ($this->update_info['custom'][$file] as $_file)			{				$update_list[] = array('filename' => $_file, 'custom' => true, 'original' => $file);			}		}	}	/**	* Get remote file	*/	function get_file($mode)	{		global $user, $db;		$errstr = '';		$errno = 0;		switch ($mode)		{			case 'version_info':				global $phpbb_root_path, $phpEx;				$info = get_remote_file('www.phpbb.com', '/updatecheck', ((defined('PHPBB_QA')) ? '30x_qa.txt' : '30x.txt'), $errstr, $errno);				if ($info !== false)				{					$info = explode("\n", $info);					$info = trim($info[0]);				}				if ($this->test_update !== false)				{					$info = $this->test_update;				}				// If info is false the fsockopen function may not be working. Instead get the latest version from our update file (and pray it is up-to-date)				if ($info === false)				{					$update_info = array();					include($phpbb_root_path . 'install/update/index.' . $phpEx);					$info = (empty($update_info) || !is_array($update_info)) ? false : $update_info;					if ($info !== false)					{						$info = (!empty($info['version']['to'])) ? trim($info['version']['to']) : false;					}				}			break;			case 'update_info':				global $phpbb_root_path, $phpEx;				$update_info = array();				include($phpbb_root_path . 'install/update/index.' . $phpEx);				$info = (empty($update_info) || !is_array($update_info)) ? false : $update_info;				$errstr = ($info === false) ? $user->lang['WRONG_INFO_FILE_FORMAT'] : '';				if ($info !== false)				{					// We assume that all file extensions have been renamed to .$phpEx,					// if someone is using a non .php file extension for php files.					// However, in $update_info['files'] we use hardcoded .php.					// We therefore replace .php with .$phpEx.					$info['files'] = preg_replace('/\.php$/i', ".$phpEx", $info['files']);					// Adjust the update info file to hold some specific style-related information					$info['custom'] = array();/*					// Get custom installed styles...					$sql = 'SELECT template_name, template_path						FROM ' . STYLES_TEMPLATE_TABLE . "						WHERE LOWER(template_name) NOT IN ('subsilver2', 'prosilver')";					$result = $db->sql_query($sql);					$templates = array();					while ($row = $db->sql_fetchrow($result))					{						$templates[] = $row;					}					$db->sql_freeresult($result);					if (sizeof($templates))					{						foreach ($info['files'] as $filename)						{							// Template update?							if (strpos(strtolower($filename), 'styles/prosilver/template/') === 0)							{								foreach ($templates as $row)								{									$info['custom'][$filename][] = str_replace('/prosilver/', '/' . $row['template_path'] . '/', $filename);								}							}						}					}*/				}			break;			default:				trigger_error('Mode for getting remote file not specified', E_USER_ERROR);			break;		}		if ($info === false)		{			trigger_error($errstr, E_USER_ERROR);		}		return $info;	}	/**	* Function for including files...	*/	function include_file($filename)	{		global $phpbb_root_path, $phpEx;		if (!empty($this->update_info['files']) && in_array($filename, $this->update_info['files']))		{			include_once($this->new_location . $filename);		}		else		{			include_once($phpbb_root_path . $filename);		}	}	/**	* Wrapper for returning a diff object	*/	function return_diff()	{		$args = func_get_args();		$three_way_diff = (func_num_args() > 2) ? true : false;		$file1 = array_shift($args);		$file2 = array_shift($args);		$tmp['file1'] = (!empty($file1) && is_string($file1)) ? file_get_contents($file1) : $file1;		$tmp['file2'] = (!empty($file2) && is_string($file2)) ? file_get_contents($file2) : $file2;		if ($three_way_diff)		{			$file3 = array_shift($args);			$tmp['file3'] = (!empty($file3) && is_string($file3)) ? file_get_contents($file3) : $file3;			$diff = new diff3($tmp['file1'], $tmp['file2'], $tmp['file3']);		}		else		{			$diff = new diff($tmp['file1'], $tmp['file2']);		}		unset($tmp);		return $diff;	}}?>
<?php/**** @package install* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Default avatar width/height* @ignore*/define('DEFAULT_AVATAR_X', 80);define('DEFAULT_AVATAR_Y', 80);// Global functions - all functions can be used by convertors// SIMPLE FUNCTIONS/*** Return the preceding value*/function dec($var){	return --$var;}/*** Return the next value*/function inc($var){	return ++$var;}/*** Return whether the value is positive*/function is_positive($n){	return ($n > 0) ? 1 : 0;}/*** Boolean inverse of the value*/function not($var){	return ($var) ? 0 : 1;}/*** Convert a textual value to it's equivalent boolean value** @param string $str String to convert (converts yes, on, y, 1 and true to boolean true)* @return boolean The equivalent value*/function str_to_bool($str){	$str = strtolower($str);	return ($str == 'yes' || $str == 'on' || $str == 'y' || $str == 'true' || $str == '1') ? true : false;}/*** Function to mimic php's empty() function (it is the same)*/function is_empty($mixed){	return empty($mixed);}/*** Convert the name of a user's primary group to the appropriate equivalent phpBB group id** @param string $status The name of the group* @return int The group_id corresponding to the equivalent group*/function str_to_primary_group($status){	switch (ucfirst(strtolower($status)))	{		case 'Administrator':			return get_group_id('administrators');		break;		case 'Super moderator':		case 'Global moderator':		case 'Moderator':			return get_group_id('global_moderators');		break;		case 'Guest':		case 'Anonymous':			return get_group_id('guests');		break;		default:			return get_group_id('registered');		break;	}}/*** Convert a boolean into the appropriate phpBB constant indicating whether the item is locked*/function is_item_locked($bool){	return ($bool) ? ITEM_LOCKED : ITEM_UNLOCKED;}/*** Convert a value from days to seconds*/function days_to_seconds($days){	return ($days * 86400);}/*** Determine whether a user is anonymous and return the appropriate new user_id*/function is_user_anonymous($user_id){	return ($user_id > ANONYMOUS) ? $user_id : ANONYMOUS;}/*** Generate a key value based on existing values** @param int $pad Amount to add to the maximum value* @return int Key value*/function auto_id($pad = 0){	global $auto_id, $convert_row;	if (!empty($convert_row['max_id']))	{		return $convert_row['max_id'] + $pad;	}	return $auto_id + $pad;}/*** Convert a boolean into the appropriate phpBB constant indicating whether the user is active*/function set_user_type($user_active){	return ($user_active) ? USER_NORMAL : USER_INACTIVE;}/*** Convert a value from minutes to hours*/function minutes_to_hours($minutes){	return ($minutes / 3600);}/*** Return the group_id for a given group name*/function get_group_id($group_name){	global $db, $group_mapping;	if (empty($group_mapping))	{		$sql = 'SELECT group_name, group_id			FROM ' . GROUPS_TABLE;		$result = $db->sql_query($sql);		$group_mapping = array();		while ($row = $db->sql_fetchrow($result))		{			$group_mapping[strtoupper($row['group_name'])] = (int) $row['group_id'];		}		$db->sql_freeresult($result);	}	if (!sizeof($group_mapping))	{		add_default_groups();		return get_group_id($group_name);	}	if (isset($group_mapping[strtoupper($group_name)]))	{		return $group_mapping[strtoupper($group_name)];	}	return $group_mapping['REGISTERED'];}/*** Generate the email hash stored in the users table** Note: Deprecated, calls should directly go to phpbb_email_hash()*/function gen_email_hash($email){	return phpbb_email_hash($email);}/*** Convert a boolean into the appropriate phpBB constant indicating whether the topic is locked*/function is_topic_locked($bool){	return (!empty($bool)) ? ITEM_LOCKED : ITEM_UNLOCKED;}/*** Generate a bbcode_uid value*/function make_uid($timestamp){	static $last_timestamp, $last_uid;	if (empty($last_timestamp) || $timestamp != $last_timestamp)	{		$last_uid = substr(base_convert(unique_id(), 16, 36), 0, BBCODE_UID_LEN);	}	$last_timestamp = $timestamp;	return $last_uid;}/*** Validate a website address*/function validate_website($url){	if ($url === 'http://')	{		return '';	}	else if (!preg_match('#^[a-z0-9]+://#i', $url) && strlen($url) > 0)	{		return 'http://' . $url;	}	return $url;}/*** Convert nulls to zeros for fields which allowed a NULL value in the source but not the destination*/function null_to_zero($value){	return ($value === NULL) ? 0 : $value;}/*** Convert nulls to empty strings for fields which allowed a NULL value in the source but not the destination*/function null_to_str($value){	return ($value === NULL) ? '' : $value;}// EXTENDED FUNCTIONS/*** Get old config value*/function get_config_value($config_name){	static $convert_config;	if (!isset($convert_config))	{		$convert_config = get_config();	}	if (!isset($convert_config[$config_name]))	{		return false;	}	return (empty($convert_config[$config_name])) ? '' : $convert_config[$config_name];}/*** Convert an IP address from the hexadecimal notation to normal dotted-quad notation*/function decode_ip($int_ip){	if (!$int_ip)	{		return $int_ip;	}	$hexipbang = explode('.', chunk_split($int_ip, 2, '.'));	// Any mod changing the way ips are stored? Then we are not able to convert and enter the ip "as is" to not "destroy" anything...	if (sizeof($hexipbang) < 4)	{		return $int_ip;	}	return hexdec($hexipbang[0]) . '.' . hexdec($hexipbang[1]) . '.' . hexdec($hexipbang[2]) . '.' . hexdec($hexipbang[3]);}/*** Reverse the encoding of wild-carded bans*/function decode_ban_ip($int_ip){	return str_replace('255', '*', decode_ip($int_ip));}/*** Determine the MIME-type of a specified filename* This does not actually inspect the file, but simply uses the file extension*/function mimetype($filename){	if (!preg_match('/\.([a-z0-9]+)$/i', $filename, $m))	{		return 'application/octet-stream';	}	switch (strtolower($m[1]))	{		case 'zip':		return 'application/zip';		case 'jpeg':	return 'image/jpeg';		case 'jpg':		return 'image/jpeg';		case 'jpe':		return 'image/jpeg';		case 'png':		return 'image/png';		case 'gif':		return 'image/gif';		case 'htm':		case 'html':	return 'text/html';		case 'tif':		return 'image/tiff';		case 'tiff':	return 'image/tiff';		case 'ras':		return 'image/x-cmu-raster';		case 'pnm':		return 'image/x-portable-anymap';		case 'pbm':		return 'image/x-portable-bitmap';		case 'pgm':		return 'image/x-portable-graymap';		case 'ppm':		return 'image/x-portable-pixmap';		case 'rgb':		return 'image/x-rgb';		case 'xbm':		return 'image/x-xbitmap';		case 'xpm':		return 'image/x-xpixmap';		case 'xwd':		return 'image/x-xwindowdump';		case 'z':		return 'application/x-compress';		case 'gtar':	return 'application/x-gtar';		case 'tgz':		return 'application/x-gtar';		case 'gz':		return 'application/x-gzip';		case 'tar':		return 'application/x-tar';		case 'xls':		return 'application/excel';		case 'pdf':		return 'application/pdf';		case 'ppt':		return 'application/powerpoint';		case 'rm':		return 'application/vnd.rn-realmedia';		case 'wma':		return 'audio/x-ms-wma';		case 'swf':		return 'application/x-shockwave-flash';		case 'ief':		return 'image/ief';		case 'doc':		case 'dot':		case 'wrd':		return 'application/msword';		case 'ai':		case 'eps':		case 'ps':		return 'application/postscript';		case 'asc':		case 'txt':		case 'c':		case 'cc':		case 'h':		case 'hh':		case 'cpp':		case 'hpp':		case 'php':		case 'php3':	return 'text/plain';		default: 		return 'application/octet-stream';	}}/*** Obtain the dimensions of all remotely hosted avatars* This should only be called from execute_last* There can be significant network overhead if there are a large number of remote avatars* @todo Look at the option of allowing the user to decide whether this is called or to force the dimensions*/function remote_avatar_dims(){	global $db;	$sql = 'SELECT user_id, user_avatar		FROM ' . USERS_TABLE . '		WHERE user_avatar_type = ' . AVATAR_REMOTE;	$result = $db->sql_query($sql);	$remote_avatars = array();	while ($row = $db->sql_fetchrow($result))	{		$remote_avatars[(int) $row['user_id']] = $row['user_avatar'];	}	$db->sql_freeresult($result);	foreach ($remote_avatars as $user_id => $avatar)	{		$width = (int) get_remote_avatar_dim($avatar, 0);		$height = (int) get_remote_avatar_dim($avatar, 1);		$sql = 'UPDATE ' . USERS_TABLE . '			SET user_avatar_width = ' . (int) $width . ', user_avatar_height = ' . (int) $height . '			WHERE user_id = ' . $user_id;		$db->sql_query($sql);	}}function import_avatar_gallery($gallery_name = '', $subdirs_as_galleries = false){	global $config, $convert, $phpbb_root_path, $user;	$relative_path = empty($convert->convertor['source_path_absolute']);	if (empty($convert->convertor['avatar_gallery_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_GALLERY_PATH'], 'import_avatar_gallery()'), __LINE__, __FILE__);	}	$src_path = relative_base(path($convert->convertor['avatar_gallery_path'], $relative_path), $relative_path);	if (is_dir($src_path))	{		// Do not die on failure... safe mode restrictions may be in effect.		copy_dir($convert->convertor['avatar_gallery_path'], path($config['avatar_gallery_path']) . $gallery_name, !$subdirs_as_galleries, false, false, $relative_path);		// only doing 1 level deep. (ibf 1.x)		// notes: ibf has 2 tiers: directly in the avatar directory for base gallery (handled in the above statement), plus subdirs(handled below).		// recursive subdirs ignored. -- i don't know if other forums support recursive galleries. if they do, this following code could be upgraded to be recursive.		if ($subdirs_as_galleries)		{			$dirlist = array();			if ($handle = @opendir($src_path))			{				while ($entry = readdir($handle))				{					if ($entry[0] == '.' || $entry == 'CVS' || $entry == 'index.htm')					{						continue;					}					if (is_dir($src_path . $entry))					{						$dirlist[] = $entry;					}				}				closedir($handle);			}			else if ($dir = @dir($src_path))			{				while ($entry = $dir->read())				{					if ($entry[0] == '.' || $entry == 'CVS' || $entry == 'index.htm')					{						continue;					}					if (is_dir($src_path . $entry))					{						$dirlist[] = $entry;					}				}				$dir->close();			}			for ($i = 0; $i < sizeof($dirlist); ++$i)			{				$dir = $dirlist[$i];				// Do not die on failure... safe mode restrictions may be in effect.				copy_dir(path($convert->convertor['avatar_gallery_path'], $relative_path) . $dir, path($config['avatar_gallery_path']) . $dir, true, false, false, $relative_path);			}		}	}}function import_attachment_files($category_name = ''){	global $config, $convert, $phpbb_root_path, $db, $user;	$sql = 'SELECT config_value AS upload_path		FROM ' . CONFIG_TABLE . "		WHERE config_name = 'upload_path'";	$result = $db->sql_query($sql);	$config['upload_path'] = $db->sql_fetchfield('upload_path');	$db->sql_freeresult($result);	$relative_path = empty($convert->convertor['source_path_absolute']);	if (empty($convert->convertor['upload_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_UPLOAD_DIR'], 'import_attachment_files()'), __LINE__, __FILE__);	}	if (is_dir(relative_base(path($convert->convertor['upload_path'], $relative_path), $relative_path)))	{		copy_dir($convert->convertor['upload_path'], path($config['upload_path']) . $category_name, true, false, true, $relative_path);	}}function attachment_forum_perms($forum_id){	if (!is_array($forum_id))	{		$forum_id = array($forum_id);	}	return serialize($forum_id);}// base64todec function// -> from php manual?function base64_unpack($string){	$chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ+-';	$base = strlen($chars);	$length = strlen($string);	$number = 0;	for ($i = 1; $i <= $length; $i++)	{		$pos = $length - $i;		$operand = strpos($chars, substr($string, $pos, 1));		$exponent = pow($base, $i-1);		$dec_value = $operand * $exponent;		$number += $dec_value;	}	return $number;}function _import_check($config_var, $source, $use_target){	global $convert, $config;	$result = array(		'orig_source'	=> $source,		'copied'		=> false,		'relative_path'	=> (empty($convert->convertor['source_path_absolute'])) ? true : false,	);	// copy file will prepend $phpBB_root_path	$target = $config[$config_var] . '/' . utf8_basename(($use_target === false) ? $source : $use_target);	if (!empty($convert->convertor[$config_var]) && strpos($source, $convert->convertor[$config_var]) !== 0)	{		$source = $convert->convertor[$config_var] . $source;	}	$result['source'] = $source;	if (file_exists(relative_base($source, $result['relative_path'], __LINE__, __FILE__)))	{		$result['copied'] = copy_file($source, $target, false, false, $result['relative_path']);	}	if ($result['copied'])	{		$result['target'] = utf8_basename($target);	}	else	{		$result['target'] = ($use_target !== false) ? $result['orig_source'] : utf8_basename($target);	}	return $result;}function import_attachment($source, $use_target = false){	if (empty($source))	{		return '';	}	global $convert, $phpbb_root_path, $config, $user;	if (empty($convert->convertor['upload_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_UPLOAD_DIR'], 'import_attachment()'), __LINE__, __FILE__);	}	$result = _import_check('upload_path', $source, $use_target);	if ($result['copied'])	{		// Thumbnails?		if (is_array($convert->convertor['thumbnails']))		{			$thumb_dir = $convert->convertor['thumbnails'][0];			$thumb_prefix = $convert->convertor['thumbnails'][1];			$thumb_source = $thumb_dir . $thumb_prefix . utf8_basename($result['source']);			if (strpos($thumb_source, $convert->convertor['upload_path']) !== 0)			{				$thumb_source = $convert->convertor['upload_path'] . $thumb_source;			}			$thumb_target = $config['upload_path'] . '/thumb_' . $result['target'];			if (file_exists(relative_base($thumb_source, $result['relative_path'], __LINE__, __FILE__)))			{				copy_file($thumb_source, $thumb_target, false, false, $result['relative_path']);			}		}	}	return $result['target'];}function import_rank($source, $use_target = false){	if (empty($source))	{		return '';	}	global $convert, $phpbb_root_path, $config, $user;	if (!isset($convert->convertor['ranks_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_RANKS_PATH'], 'import_rank()'), __LINE__, __FILE__);	}	$result = _import_check('ranks_path', $source, $use_target);	return $result['target'];}function import_smiley($source, $use_target = false){	if (empty($source))	{		return '';	}	global $convert, $phpbb_root_path, $config, $user;	if (!isset($convert->convertor['smilies_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_SMILIES_PATH'], 'import_smiley()'), __LINE__, __FILE__);	}	$result = _import_check('smilies_path', $source, $use_target);	return $result['target'];}/**/function import_avatar($source, $use_target = false, $user_id = false){	if (empty($source) || preg_match('#^https?:#i', $source) || preg_match('#blank\.(gif|png)$#i', $source))	{		return;	}	global $convert, $phpbb_root_path, $config, $user;	if (!isset($convert->convertor['avatar_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_AVATAR_PATH'], 'import_avatar()'), __LINE__, __FILE__);	}	if ($use_target === false && $user_id !== false)	{		$use_target = $config['avatar_salt'] . '_' . $user_id . '.' . substr(strrchr($source, '.'), 1);	}	$result = _import_check('avatar_path', $source, $use_target);	return ((!empty($user_id)) ? $user_id : $use_target) . '.' . substr(strrchr($source, '.'), 1);}/*** @todo all image dimension functions below (there are a *lot*) should get revisited and converted to one or two functions (no more needed, really).*//*** Calculate the size of the specified image* Called from the following functions for calculating the size of specific image types*/function get_image_dim($source){	if (empty($source))	{		return array(0, 0);	}	global $convert;	$relative_path = empty($convert->convertor['source_path_absolute']);	if (file_exists(relative_base($source, $relative_path)))	{		$image = relative_base($source, $relative_path);		return @getimagesize($image);	}	return false;}/*** Obtain the width of the specified smilie*/function get_smiley_width($src){	return get_smiley_dim($src, 0);}/*** Obtain the height of the specified smilie*/function get_smiley_height($src){	return get_smiley_dim($src, 1);}/*** Obtain the size of the specified smilie (using the cache if possible) and cache the value*/function get_smiley_dim($source, $axis){	if (empty($source))	{		return 15;	}	static $smiley_cache = array();	if (isset($smiley_cache[$source]))	{		return $smiley_cache[$source][$axis];	}	global $convert, $phpbb_root_path, $config, $user;	$orig_source = $source;	if (!isset($convert->convertor['smilies_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_SMILIES_PATH'], 'get_smiley_dim()'), __LINE__, __FILE__);	}	if (!empty($convert->convertor['smilies_path']) && strpos($source, $convert->convertor['smilies_path']) !== 0)	{		$source = $convert->convertor['smilies_path'] . $source;	}	$smiley_cache[$orig_source] = get_image_dim($source);	if (empty($smiley_cache[$orig_source]) || empty($smiley_cache[$orig_source][0]) || empty($smiley_cache[$orig_source][1]))	{		$smiley_cache[$orig_source] = array(15, 15);		return 15;	}	return $smiley_cache[$orig_source][$axis];}/*** Obtain the width of the specified avatar*/function get_avatar_width($src, $func = false, $arg1 = false, $arg2 = false){	return get_avatar_dim($src, 0, $func, $arg1, $arg2);}/*** Obtain the height of the specified avatar*/function get_avatar_height($src, $func = false, $arg1 = false, $arg2 = false){	return get_avatar_dim($src, 1, $func, $arg1, $arg2);}/***/function get_avatar_dim($src, $axis, $func = false, $arg1 = false, $arg2 = false){	$avatar_type = AVATAR_UPLOAD;	if ($func)	{		if ($arg1 || $arg2)		{			$ary = array($arg1);			if ($arg2)			{				$ary[] = $arg2;			}			$avatar_type = call_user_func_array($func, $ary);		}		else		{			$avatar_type = call_user_func($func);		}	}	switch ($avatar_type)	{		case AVATAR_UPLOAD:			return get_upload_avatar_dim($src, $axis);		break;		case AVATAR_GALLERY:			return get_gallery_avatar_dim($src, $axis);		break;		case AVATAR_REMOTE:			 // see notes on this functions usage and (hopefully) model $func to avoid this accordingly			return get_remote_avatar_dim($src, $axis);		break;		default:			$default_x = (defined('DEFAULT_AVATAR_X_CUSTOM')) ? DEFAULT_AVATAR_X_CUSTOM : DEFAULT_AVATAR_X;			$default_y = (defined('DEFAULT_AVATAR_Y_CUSTOM')) ? DEFAULT_AVATAR_Y_CUSTOM : DEFAULT_AVATAR_Y;			return $axis ? $default_y : $default_x;		break;	}}/*** Obtain the size of the specified uploaded avatar (using the cache if possible) and cache the value*/function get_upload_avatar_dim($source, $axis){	static $cachedims = false;	static $cachekey = false;	if (empty($source))	{		return 0;	}	if ($cachekey == $source)	{		return $cachedims[$axis];	}	$orig_source = $source;	if (substr($source, 0, 7) == 'upload:')	{		$source = substr($source, 7);	}	global $convert, $phpbb_root_path, $config, $user;	if (!isset($convert->convertor['avatar_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_AVATAR_PATH'], 'get_upload_avatar_dim()'), __LINE__, __FILE__);	}	if (!empty($convert->convertor['avatar_path']) && strpos($source, $convert->convertor['avatar_path']) !== 0)	{		$source = path($convert->convertor['avatar_path'], empty($convert->convertor['source_path_absolute'])) . $source;	}	$cachedims = get_image_dim($source);	if (empty($cachedims) || empty($cachedims[0]) || empty($cachedims[1]))	{		$default_x = (defined('DEFAULT_AVATAR_X_CUSTOM')) ? DEFAULT_AVATAR_X_CUSTOM : DEFAULT_AVATAR_X;		$default_y = (defined('DEFAULT_AVATAR_Y_CUSTOM')) ? DEFAULT_AVATAR_Y_CUSTOM : DEFAULT_AVATAR_Y;		$cachedims = array($default_x, $default_y);	}	return $cachedims[$axis];}/*** Obtain the size of the specified gallery avatar (using the cache if possible) and cache the value*/function get_gallery_avatar_dim($source, $axis){	if (empty($source))	{		return 0;	}	static $avatar_cache = array();	if (isset($avatar_cache[$source]))	{		return $avatar_cache[$source][$axis];	}	global $convert, $phpbb_root_path, $config, $user;	$orig_source = $source;	if (!isset($convert->convertor['avatar_gallery_path']))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_GALLERY_PATH'], 'get_gallery_avatar_dim()'), __LINE__, __FILE__);	}	if (!empty($convert->convertor['avatar_gallery_path']) && strpos($source, $convert->convertor['avatar_gallery_path']) !== 0)	{		$source = path($convert->convertor['avatar_gallery_path'], empty($convert->convertor['source_path_absolute'])) . $source;	}	$avatar_cache[$orig_source] = get_image_dim($source);	if (empty($avatar_cache[$orig_source]) || empty($avatar_cache[$orig_source][0]) || empty($avatar_cache[$orig_source][1]))	{		$default_x = (defined('DEFAULT_AVATAR_X_CUSTOM')) ? DEFAULT_AVATAR_X_CUSTOM : DEFAULT_AVATAR_X;		$default_y = (defined('DEFAULT_AVATAR_Y_CUSTOM')) ? DEFAULT_AVATAR_Y_CUSTOM : DEFAULT_AVATAR_Y;		$avatar_cache[$orig_source] = array($default_x, $default_y);	}	return $avatar_cache[$orig_source][$axis];}/*** Obtain the size of the specified remote avatar (using the cache if possible) and cache the value* Whilst it's unlikely that remote avatars will be duplicated, it is possible so caching seems the best option* This should only be called from a post processing step due to the possibility of network timeouts*/function get_remote_avatar_dim($src, $axis){	if (empty($src))	{		return 0;	}	static $remote_avatar_cache = array();	// an ugly hack: we assume that the dimensions of each remote avatar are accessed exactly twice (x and y)	if (isset($remote_avatar_cache[$src]))	{		$retval = $remote_avatar_cache[$src][$axis];		unset($remote_avatar_cache);		return $retval;	}	$url_info = @parse_url($src);	if (empty($url_info['host']))	{		return 0;	}	$host = $url_info['host'];	$port = (isset($url_info['port'])) ? $url_info['port'] : 0;	$protocol = (isset($url_info['scheme'])) ? $url_info['scheme'] : 'http';	if (empty($port))	{		switch(strtolower($protocol))		{			case 'ftp':				$port = 21;				break;			case 'https':				$port = 443;				break;			default:				$port = 80;		}	}	$timeout = @ini_get('default_socket_timeout');	@ini_set('default_socket_timeout', 2);	// We're just trying to reach the server to avoid timeouts	$fp = @fsockopen($host, $port, $errno, $errstr, 1);	if ($fp)	{		$remote_avatar_cache[$src] = @getimagesize($src);		fclose($fp);	}	$default_x 	= (defined('DEFAULT_AVATAR_X_CUSTOM')) ? DEFAULT_AVATAR_X_CUSTOM : DEFAULT_AVATAR_X;	$default_y 	= (defined('DEFAULT_AVATAR_Y_CUSTOM')) ? DEFAULT_AVATAR_Y_CUSTOM : DEFAULT_AVATAR_Y;	$default 	= array($default_x, $default_y);	if (empty($remote_avatar_cache[$src]) || empty($remote_avatar_cache[$src][0]) || empty($remote_avatar_cache[$src][1]))	{		$remote_avatar_cache[$src] = $default;	}	else	{		// We trust gallery and uploaded avatars to conform to the size settings; we might have to adjust here		if ($remote_avatar_cache[$src][0] > $default_x || $remote_avatar_cache[$src][1] > $default_y)		{			$bigger = ($remote_avatar_cache[$src][0] > $remote_avatar_cache[$src][1]) ? 0 : 1;			$ratio = $default[$bigger] / $remote_avatar_cache[$src][$bigger];			$remote_avatar_cache[$src][0] = (int)($remote_avatar_cache[$src][0] * $ratio);			$remote_avatar_cache[$src][1] = (int)($remote_avatar_cache[$src][1] * $ratio);		}	}	@ini_set('default_socket_timeout', $timeout);	return $remote_avatar_cache[$src][$axis];}function set_user_options(){	global $convert_row;	// Key need to be set in row, else default value is chosen	$keyoptions = array(		'viewimg'		=> array('bit' => 0, 'default' => 1),		'viewflash'		=> array('bit' => 1, 'default' => 1),		'viewsmilies'	=> array('bit' => 2, 'default' => 1),		'viewsigs'		=> array('bit' => 3, 'default' => 1),		'viewavatars'	=> array('bit' => 4, 'default' => 1),		'viewcensors'	=> array('bit' => 5, 'default' => 1),		'attachsig'		=> array('bit' => 6, 'default' => 0),		'bbcode'		=> array('bit' => 8, 'default' => 1),		'smilies'		=> array('bit' => 9, 'default' => 1),		'popuppm'		=> array('bit' => 10, 'default' => 0),		'sig_bbcode'	=> array('bit' => 15, 'default' => 1),		'sig_smilies'	=> array('bit' => 16, 'default' => 1),		'sig_links'		=> array('bit' => 17, 'default' => 1),	);	$option_field = 0;	foreach ($keyoptions as $key => $key_ary)	{		$value = (isset($convert_row[$key])) ? (int) $convert_row[$key] : $key_ary['default'];		if ($value && !($option_field & 1 << $key_ary['bit']))		{			$option_field += 1 << $key_ary['bit'];		}	}	return $option_field;}/*** Index messages on the fly as we convert them* @todo naderman, can you check that this works with the new search plugins as it's use is currently disabled (and thus untested)function search_indexing($message = ''){	global $fulltext_search, $convert_row;	if (!isset($convert_row['post_id']))	{		return;	}	if (!$message)	{		if (!isset($convert_row['message']))		{			return;		}		$message = $convert_row['message'];	}	$title = (isset($convert_row['title'])) ? $convert_row['title'] : '';	$fulltext_search->index('post', $convert_row['post_id'], $message, $title, $convert_row['poster_id'], $convert_row['forum_id']);}*/function make_unique_filename($filename){	if (!strlen($filename))	{		$filename = md5(unique_id()) . '.dat';	}	else if ($filename[0] == '.')	{		$filename = md5(unique_id()) . $filename;	}	else if (preg_match('/\.([a-z]+)$/i', $filename, $m))	{		$filename = preg_replace('/\.([a-z]+)$/i', '_' . md5(unique_id()) . '.\1', $filename);	}	else	{		$filename .= '_' . md5(unique_id()) . '.dat';	}	return $filename;}function words_unique(&$words){	reset($words);	$return_array = array();	$word = current($words);	do	{		$return_array[$word] = $word;	}	while ($word = next($words));	return $return_array;}/*** Adds a user to the specified group and optionally makes them a group leader* This function does not create the group if it does not exist and so should only be called after the groups have been created*/function add_user_group($group_id, $user_id, $group_leader=false){	global $convert, $phpbb_root_path, $config, $user, $db;	$sql = 'INSERT INTO ' . USER_GROUP_TABLE . ' ' . $db->sql_build_array('INSERT', array(		'group_id'		=> $group_id,		'user_id'		=> $user_id,		'group_leader'	=> ($group_leader) ? 1 : 0,		'user_pending'	=> 0));	$db->sql_query($sql);}// STANDALONE FUNCTIONS/*** Add users to the pre-defined "special" groups** @param string $group The name of the special group to add to* @param string $select_query An SQL query to retrieve the user(s) to add to the group*/function user_group_auth($group, $select_query, $use_src_db){	global $convert, $phpbb_root_path, $config, $user, $db, $src_db, $same_db;	if (!in_array($group, array('guests', 'registered', 'registered_coppa', 'global_moderators', 'administrators', 'bots')))	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_WRONG_GROUP'], $group, 'user_group_auth()'), __LINE__, __FILE__, true);		return;	}	$sql = 'SELECT group_id		FROM ' . GROUPS_TABLE . "		WHERE group_name = '" . $db->sql_escape(strtoupper($group)) . "'";	$result = $db->sql_query($sql);	$group_id = (int) $db->sql_fetchfield('group_id');	$db->sql_freeresult($result);	if (!$group_id)	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_NO_GROUP'], $group, 'user_group_auth()'), __LINE__, __FILE__, true);		return;	}	if ($same_db || !$use_src_db)	{		$sql = 'INSERT INTO ' . USER_GROUP_TABLE . ' (user_id, group_id, user_pending)			' . str_replace('{' . strtoupper($group) . '}', $group_id . ', 0', $select_query);		$db->sql_query($sql);	}	else	{		$result = $src_db->sql_query(str_replace('{' . strtoupper($group) . '}', $group_id . ' ', $select_query));		while ($row = $src_db->sql_fetchrow($result))		{			// this might become quite a lot of INSERTS unfortunately			$sql = 'INSERT INTO ' . USER_GROUP_TABLE . " (user_id, group_id, user_pending)				VALUES ({$row['user_id']}, $group_id, 0)";			$db->sql_query($sql);		}		$src_db->sql_freeresult($result);	}}/*** Retrieves configuration information from the source forum and caches it as an array* Both database and file driven configuration formats can be handled* (the type used is specified in $config_schema, see convert_phpbb20.php for more details)*/function get_config(){	static $convert_config;	global $user;	if (isset($convert_config))	{		return $convert_config;	}	global $src_db, $same_db, $phpbb_root_path, $config;	global $convert;	if ($convert->config_schema['table_format'] != 'file')	{		if ($convert->mysql_convert && $same_db)		{			$src_db->sql_query("SET NAMES 'binary'");		}		$sql = 'SELECT * FROM ' . $convert->src_table_prefix . $convert->config_schema['table_name'];		$result = $src_db->sql_query($sql);		$row = $src_db->sql_fetchrow($result);		if (!$row)		{			$convert->p_master->error($user->lang['CONV_ERROR_GET_CONFIG'], __LINE__, __FILE__);		}	}	if (is_array($convert->config_schema['table_format']))	{		$convert_config = array();		list($key, $val) = each($convert->config_schema['table_format']);		do		{			$convert_config[$row[$key]] = $row[$val];		}		while ($row = $src_db->sql_fetchrow($result));		$src_db->sql_freeresult($result);		if ($convert->mysql_convert && $same_db)		{			$src_db->sql_query("SET NAMES 'utf8'");		}	}	else if ($convert->config_schema['table_format'] == 'file')	{		$filename = $convert->options['forum_path'] . '/' . $convert->config_schema['filename'];		if (!file_exists($filename))		{			$convert->p_master->error($user->lang['FILE_NOT_FOUND'] . ': ' . $filename, __LINE__, __FILE__);		}		if (isset($convert->config_schema['array_name']))		{			unset($convert->config_schema['array_name']);		}		$convert_config = extract_variables_from_file($filename);		if (!empty($convert->config_schema['array_name']))		{			$convert_config = $convert_config[$convert->config_schema['array_name']];		}	}	else	{		$convert_config = $row;		if ($convert->mysql_convert && $same_db)		{			$src_db->sql_query("SET NAMES 'utf8'");		}	}	if (!sizeof($convert_config))	{		$convert->p_master->error($user->lang['CONV_ERROR_CONFIG_EMPTY'], __LINE__, __FILE__);	}	return $convert_config;}/*** Transfers the relevant configuration information from the source forum* The mapping of fields is specified in $config_schema, see convert_phpbb20.php for more details*/function restore_config($schema){	global $db, $config;	$convert_config = get_config();	foreach ($schema['settings'] as $config_name => $src)	{		if (preg_match('/(.*)\((.*)\)/', $src, $m))		{			$var = (empty($m[2]) || empty($convert_config[$m[2]])) ? "''" : "'" . addslashes($convert_config[$m[2]]) . "'";			$exec = '$config_value = ' . $m[1] . '(' . $var . ');';			eval($exec);		}		else		{			if ($schema['table_format'] != 'file' || empty($schema['array_name']))			{				$config_value = (isset($convert_config[$src])) ? $convert_config[$src] : '';			}			else if (!empty($schema['array_name']))			{				$src_ary = $schema['array_name'];				$config_value = (isset($convert_config[$src_ary][$src])) ? $convert_config[$src_ary][$src] : '';			}   		}		if ($config_value !== '')		{			// Most are...			if (is_string($config_value))			{				$config_value = truncate_string(utf8_htmlspecialchars($config_value), 255, 255, false);			}			set_config($config_name, $config_value);		}	}}/*** Update the count of PM's in custom folders for all users*/function update_folder_pm_count(){	global $db, $convert, $user;	$sql = 'SELECT user_id, folder_id, COUNT(msg_id) as num_messages		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE folder_id NOT IN (' . PRIVMSGS_NO_BOX . ', ' . PRIVMSGS_HOLD_BOX . ', ' . PRIVMSGS_INBOX . ', ' . PRIVMSGS_OUTBOX . ', ' . PRIVMSGS_SENTBOX . ')		GROUP BY folder_id, user_id';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$db->sql_query('UPDATE ' . PRIVMSGS_FOLDER_TABLE . ' SET pm_count = ' . $row['num_messages'] . '			WHERE user_id = ' . $row['user_id'] . ' AND folder_id = ' . $row['folder_id']);	}	$db->sql_freeresult($result);}// Functions mainly used by the main convertor scriptfunction path($path, $path_relative = true){	if ($path === false)	{		return '';	}	if (substr($path, -1) != '/')	{		$path .= '/';	}	if (!$path_relative)	{		return $path;	}	if (substr($path, 0, 1) == '/')	{		$path = substr($path, 1);	}	return $path;}/*** Extract the variables defined in a configuration file* @todo As noted by Xore we need to look at this from a security perspective*/function extract_variables_from_file($_filename){	include($_filename);	$vars = get_defined_vars();	unset($vars['_filename']);	return $vars;}function get_path($src_path, $src_url, $test_file){	global $config, $phpbb_root_path, $phpEx;	$board_config = get_config();	$test_file = preg_replace('/\.php$/i', ".$phpEx", $test_file);	$src_path = path($src_path);	if (@file_exists($phpbb_root_path . $src_path . $test_file))	{		return $src_path;	}	if (!empty($src_url) && !empty($board_config['server_name']))	{		if (!preg_match('#https?://([^/]+)(.*)#i', $src_url, $m))		{			return false;		}		if ($m[1] != $board_config['server_name'])		{			return false;		}		$url_parts = explode('/', $m[2]);		if (substr($src_url, -1) != '/')		{			if (preg_match('/.*\.([a-z0-9]{3,4})$/i', $url_parts[sizeof($url_parts) - 1]))			{				$url_parts[sizeof($url_parts) - 1] = '';			}			else			{				$url_parts[] = '';			}		}		$script_path = $board_config['script_path'];		if (substr($script_path, -1) == '/')		{			$script_path = substr($script_path, 0, -1);		}		$path_array = array();		$phpbb_parts = explode('/', $script_path);		for ($i = 0; $i < sizeof($url_parts); ++$i)		{			if ($i < sizeof($phpbb_parts[$i]) && $url_parts[$i] == $phpbb_parts[$i])			{				$path_array[] = $url_parts[$i];				unset($url_parts[$i]);			}			else			{				$path = '';				for ($j = $i; $j < sizeof($phpbb_parts); ++$j)				{					$path .= '../';				}				$path .= implode('/', $url_parts);				break;			}		}		if (!empty($path))		{			if (@file_exists($phpbb_root_path . $path . $test_file))			{				return $path;			}		}	}	return false;}function compare_table($tables, $tablename, &$prefixes){	for ($i = 0, $table_size = sizeof($tables); $i < $table_size; ++$i)	{		if (preg_match('/(.*)' . $tables[$i] . '$/', $tablename, $m))		{			if (empty($m[1]))			{				$m[1] = '*';			}			if (isset($prefixes[$m[1]]))			{				$prefixes[$m[1]]++;			}			else			{				$prefixes[$m[1]] = 1;			}		}	}}/*** Grant permissions to a specified user or group** @param string $ug_type user|group|user_role|group_role* @param mixed $forum_id forum ids (array|int|0) -> 0 == all forums* @param mixed $ug_id [int] user_id|group_id : [string] usergroup name* @param mixed $acl_list [string] acl entry : [array] acl entries : [string] role entry* @param int $setting ACL_YES|ACL_NO|ACL_NEVER*/function mass_auth($ug_type, $forum_id, $ug_id, $acl_list, $setting = ACL_NO){	global $db, $convert, $user, $config;	static $acl_option_ids, $group_ids;	if (($ug_type == 'group' || $ug_type == 'group_role') && is_string($ug_id))	{		if (!isset($group_ids[$ug_id]))		{			$sql = 'SELECT group_id				FROM ' . GROUPS_TABLE . "				WHERE group_name = '" . $db->sql_escape(strtoupper($ug_id)) . "'";			$result = $db->sql_query_limit($sql, 1);			$id = (int) $db->sql_fetchfield('group_id');			$db->sql_freeresult($result);			if (!$id)			{				return;			}			$group_ids[$ug_id] = $id;		}		$ug_id = (int) $group_ids[$ug_id];	}	$table = ($ug_type == 'user' || $ug_type == 'user_role') ? ACL_USERS_TABLE : ACL_GROUPS_TABLE;	$id_field = ($ug_type == 'user' || $ug_type == 'user_role') ? 'user_id' : 'group_id';	// Role based permissions are the simplest to handle so check for them first	if ($ug_type == 'user_role' || $ug_type == 'group_role')	{		if (is_numeric($forum_id))		{			$sql = 'SELECT role_id				FROM ' . ACL_ROLES_TABLE . "				WHERE role_name = 'ROLE_" . $db->sql_escape($acl_list) . "'";			$result = $db->sql_query_limit($sql, 1);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			// If we have no role id there is something wrong here			if ($row)			{				$sql = "INSERT INTO $table ($id_field, forum_id, auth_role_id) VALUES ($ug_id, $forum_id, " . $row['role_id'] . ')';				$db->sql_query($sql);			}		}		return;	}	// Build correct parameters	$auth = array();	if (!is_array($acl_list))	{		$auth = array($acl_list => $setting);	}	else	{		foreach ($acl_list as $auth_option)		{			$auth[$auth_option] = $setting;		}	}	unset($acl_list);	if (!is_array($forum_id))	{		$forum_id = array($forum_id);	}	// Set any flags as required	foreach ($auth as $auth_option => $acl_setting)	{		$flag = substr($auth_option, 0, strpos($auth_option, '_') + 1);		if (empty($auth[$flag]))		{			$auth[$flag] = $acl_setting;		}	}	if (!is_array($acl_option_ids) || empty($acl_option_ids))	{		$sql = 'SELECT auth_option_id, auth_option			FROM ' . ACL_OPTIONS_TABLE;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$acl_option_ids[$row['auth_option']] = $row['auth_option_id'];		}		$db->sql_freeresult($result);	}	$sql_forum = 'AND ' . $db->sql_in_set('a.forum_id', array_map('intval', $forum_id), false, true);	$sql = ($ug_type == 'user') ? 'SELECT o.auth_option_id, o.auth_option, a.forum_id, a.auth_setting FROM ' . ACL_USERS_TABLE . ' a, ' . ACL_OPTIONS_TABLE . " o WHERE a.auth_option_id = o.auth_option_id $sql_forum AND a.user_id = $ug_id" : 'SELECT o.auth_option_id, o.auth_option, a.forum_id, a.auth_setting FROM ' . ACL_GROUPS_TABLE . ' a, ' . ACL_OPTIONS_TABLE . " o WHERE a.auth_option_id = o.auth_option_id $sql_forum AND a.group_id = $ug_id";	$result = $db->sql_query($sql);	$cur_auth = array();	while ($row = $db->sql_fetchrow($result))	{		$cur_auth[$row['forum_id']][$row['auth_option_id']] = $row['auth_setting'];	}	$db->sql_freeresult($result);	$sql_ary = array();	foreach ($forum_id as $forum)	{		foreach ($auth as $auth_option => $setting)		{			$auth_option_id = $acl_option_ids[$auth_option];			if (!$auth_option_id)			{				continue;			}			switch ($setting)			{				case ACL_NO:					if (isset($cur_auth[$forum][$auth_option_id]))					{						$sql_ary['delete'][] = "DELETE FROM $table							WHERE forum_id = $forum								AND auth_option_id = $auth_option_id								AND $id_field = $ug_id";					}				break;				default:					if (!isset($cur_auth[$forum][$auth_option_id]))					{						$sql_ary['insert'][] = "$ug_id, $forum, $auth_option_id, $setting";					}					else if ($cur_auth[$forum][$auth_option_id] != $setting)					{						$sql_ary['update'][] = "UPDATE " . $table . "							SET auth_setting = $setting							WHERE $id_field = $ug_id								AND forum_id = $forum								AND auth_option_id = $auth_option_id";					}			}		}	}	unset($cur_auth);	$sql = '';	foreach ($sql_ary as $sql_type => $sql_subary)	{		switch ($sql_type)		{			case 'insert':				switch ($db->sql_layer)				{					case 'mysql':					case 'mysql4':						$sql = 'VALUES ' . implode(', ', preg_replace('#^(.*?)$#', '(\1)', $sql_subary));					break;					case 'mssql':					case 'sqlite':					case 'mssqlnative':						$sql = implode(' UNION ALL ', preg_replace('#^(.*?)$#', 'SELECT \1', $sql_subary));					break;					default:						foreach ($sql_subary as $sql)						{							$sql = "INSERT INTO $table ($id_field, forum_id, auth_option_id, auth_setting) VALUES ($sql)";							$db->sql_query($sql);							$sql = '';						}				}				if ($sql != '')				{					$sql = "INSERT INTO $table ($id_field, forum_id, auth_option_id, auth_setting) $sql";					$db->sql_query($sql);				}			break;			case 'update':			case 'delete':				foreach ($sql_subary as $sql)				{					$db->sql_query($sql);					$sql = '';				}			break;		}		unset($sql_ary[$sql_type]);	}	unset($sql_ary);}/*** Update the count of unread private messages for all users*/function update_unread_count(){	global $db;	$sql = 'SELECT user_id, COUNT(msg_id) as num_messages		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE pm_unread = 1			AND folder_id <> ' . PRIVMSGS_OUTBOX . '		GROUP BY user_id';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$db->sql_query('UPDATE ' . USERS_TABLE . ' SET user_unread_privmsg = ' . $row['num_messages'] . '			WHERE user_id = ' . $row['user_id']);	}	$db->sql_freeresult($result);}/*** Add any of the pre-defined "special" groups which are missing from the database*/function add_default_groups(){	global $db;	$default_groups = array(		'GUESTS'			=> array('', 0, 0),		'REGISTERED'		=> array('', 0, 0),		'REGISTERED_COPPA'	=> array('', 0, 0),		'GLOBAL_MODERATORS'	=> array('00AA00', 1, 0),		'ADMINISTRATORS'	=> array('AA0000', 1, 1),		'BOTS'				=> array('9E8DA7', 0, 0),		'NEWLY_REGISTERED'		=> array('', 0, 0),	);	$sql = 'SELECT *		FROM ' . GROUPS_TABLE . '		WHERE ' . $db->sql_in_set('group_name', array_keys($default_groups));	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		unset($default_groups[strtoupper($row['group_name'])]);	}	$db->sql_freeresult($result);	$sql_ary = array();	foreach ($default_groups as $name => $data)	{		$sql_ary[] = array(			'group_name'			=> (string) $name,			'group_desc'			=> '',			'group_desc_uid'		=> '',			'group_desc_bitfield'	=> '',			'group_type'			=> GROUP_SPECIAL,			'group_colour'			=> (string) $data[0],			'group_legend'			=> (int) $data[1],			'group_founder_manage'	=> (int) $data[2]		);	}	if (sizeof($sql_ary))	{		$db->sql_multi_insert(GROUPS_TABLE, $sql_ary);	}}/*** Sync post count. We might need to do this in batches.*/function sync_post_count($offset, $limit){	global $db;	$sql = 'SELECT COUNT(post_id) AS num_posts, poster_id			FROM ' . POSTS_TABLE . '			WHERE post_postcount = 1				AND post_approved = 1			GROUP BY poster_id			ORDER BY poster_id';	$result = $db->sql_query_limit($sql, $limit, $offset);	while ($row = $db->sql_fetchrow($result))	{		$db->sql_query('UPDATE ' . USERS_TABLE . " SET user_posts = {$row['num_posts']} WHERE user_id = {$row['poster_id']}");	}	$db->sql_freeresult($result);}/*** Add the search bots into the database* This code should be used in execute_last if the source database did not have bots* If you are converting bots this function should not be called* @todo We might want to look at sharing the bot list between the install code and this code for consistancy*/function add_bots(){	global $db, $convert, $user, $config, $phpbb_root_path, $phpEx;	$db->sql_query($convert->truncate_statement . BOTS_TABLE);	$sql = 'SELECT group_id FROM ' . GROUPS_TABLE . " WHERE group_name = 'BOTS'";	$result = $db->sql_query($sql);	$group_id = (int) $db->sql_fetchfield('group_id', false, $result);	$db->sql_freeresult($result);	if (!$group_id)	{		add_default_groups();		$sql = 'SELECT group_id FROM ' . GROUPS_TABLE . " WHERE group_name = 'BOTS'";		$result = $db->sql_query($sql);		$group_id = (int) $db->sql_fetchfield('group_id', false, $result);		$db->sql_freeresult($result);		if (!$group_id)		{			global $install;			$install->error($user->lang['CONV_ERROR_INCONSISTENT_GROUPS'], __LINE__, __FILE__);		}	}	$bots = array(		'AdsBot [Google]'			=> array('AdsBot-Google', ''),		'Alexa [Bot]'				=> array('ia_archiver', ''),		'Alta Vista [Bot]'			=> array('Scooter/', ''),		'Ask Jeeves [Bot]'			=> array('Ask Jeeves', ''),		'Baidu [Spider]'			=> array('Baiduspider+(', ''),		'Bing [Bot]'				=> array('bingbot/', ''),		'Exabot [Bot]'				=> array('Exabot/', ''),		'FAST Enterprise [Crawler]'	=> array('FAST Enterprise Crawler', ''),		'FAST WebCrawler [Crawler]'	=> array('FAST-WebCrawler/', ''),		'Francis [Bot]'				=> array('http://www.neomo.de/', ''),		'Gigabot [Bot]'				=> array('Gigabot/', ''),		'Google Adsense [Bot]'		=> array('Mediapartners-Google', ''),		'Google Desktop'			=> array('Google Desktop', ''),		'Google Feedfetcher'		=> array('Feedfetcher-Google', ''),		'Google [Bot]'				=> array('Googlebot', ''),		'Heise IT-Markt [Crawler]'	=> array('heise-IT-Markt-Crawler', ''),		'Heritrix [Crawler]'		=> array('heritrix/1.', ''),		'IBM Research [Bot]'		=> array('ibm.com/cs/crawler', ''),		'ICCrawler - ICjobs'		=> array('ICCrawler - ICjobs', ''),		'ichiro [Crawler]'			=> array('ichiro/2', ''),		'Majestic-12 [Bot]'			=> array('MJ12bot/', ''),		'Metager [Bot]'				=> array('MetagerBot/', ''),		'MSN NewsBlogs'				=> array('msnbot-NewsBlogs/', ''),		'MSN [Bot]'					=> array('msnbot/', ''),		'MSNbot Media'				=> array('msnbot-media/', ''),		'NG-Search [Bot]'			=> array('NG-Search/', ''),		'Nutch [Bot]'				=> array('http://lucene.apache.org/nutch/', ''),		'Nutch/CVS [Bot]'			=> array('NutchCVS/', ''),		'OmniExplorer [Bot]'		=> array('OmniExplorer_Bot/', ''),		'Online link [Validator]'	=> array('online link validator', ''),		'psbot [Picsearch]'			=> array('psbot/0', ''),		'Seekport [Bot]'			=> array('Seekbot/', ''),		'Sensis [Crawler]'			=> array('Sensis Web Crawler', ''),		'SEO Crawler'				=> array('SEO search Crawler/', ''),		'Seoma [Crawler]'			=> array('Seoma [SEO Crawler]', ''),		'SEOSearch [Crawler]'		=> array('SEOsearch/', ''),		'Snappy [Bot]'				=> array('Snappy/1.1 ( http://www.urltrends.com/ )', ''),		'Steeler [Crawler]'			=> array('http://www.tkl.iis.u-tokyo.ac.jp/~crawler/', ''),		'Synoo [Bot]'				=> array('SynooBot/', ''),		'Telekom [Bot]'				=> array('crawleradmin.t-info@telekom.de', ''),		'TurnitinBot [Bot]'			=> array('TurnitinBot/', ''),		'Voyager [Bot]'				=> array('voyager/1.0', ''),		'W3 [Sitesearch]'			=> array('W3 SiteSearch Crawler', ''),		'W3C [Linkcheck]'			=> array('W3C-checklink/', ''),		'W3C [Validator]'			=> array('W3C_*Validator', ''),		'WiseNut [Bot]'				=> array('http://www.WISEnutbot.com', ''),		'YaCy [Bot]'				=> array('yacybot', ''),		'Yahoo MMCrawler [Bot]'		=> array('Yahoo-MMCrawler/', ''),		'Yahoo Slurp [Bot]'			=> array('Yahoo! DE Slurp', ''),		'Yahoo [Bot]'				=> array('Yahoo! Slurp', ''),		'YahooSeeker [Bot]'			=> array('YahooSeeker/', ''),	);	if (!function_exists('user_add'))	{		include($phpbb_root_path . 'includes/functions_user.' . $phpEx);	}	foreach ($bots as $bot_name => $bot_ary)	{		$user_row = array(			'user_type'				=> USER_IGNORE,			'group_id'				=> $group_id,			'username'				=> $bot_name,			'user_regdate'			=> time(),			'user_password'			=> '',			'user_colour'			=> '9E8DA7',			'user_email'			=> '',			'user_lang'				=> $config['default_lang'],			'user_style'			=> 1,			'user_timezone'			=> 0,			'user_allow_massemail'	=> 0,		);		$user_id = user_add($user_row);		if ($user_id)		{			$sql = 'INSERT INTO ' . BOTS_TABLE . ' ' . $db->sql_build_array('INSERT', array(				'bot_active'	=> 1,				'bot_name'		=> $bot_name,				'user_id'		=> $user_id,				'bot_agent'		=> $bot_ary[0],				'bot_ip'		=> $bot_ary[1])			);			$db->sql_query($sql);		}	}}/*** Update any dynamic configuration variables after the conversion is finished* @todo Confirm that this updates all relevant values since it has not necessarily been kept in sync with all changes*/function update_dynamic_config(){	global $db, $config;	// Get latest username	$sql = 'SELECT user_id, username, user_colour		FROM ' . USERS_TABLE . '		WHERE user_type IN (' . USER_NORMAL . ', ' . USER_FOUNDER . ')';	if (!empty($config['increment_user_id']))	{		$sql .= ' AND user_id <> ' . $config['increment_user_id'];	}	$sql .= ' ORDER BY user_id DESC';	$result = $db->sql_query_limit($sql, 1);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		set_config('newest_user_id', $row['user_id'], true);		set_config('newest_username', $row['username'], true);		set_config('newest_user_colour', $row['user_colour'], true);	}//	Also do not reset record online user/date. There will be old data or the fresh data from the schema.//	set_config('record_online_users', 1, true);//	set_config('record_online_date', time(), true);	$sql = 'SELECT COUNT(post_id) AS stat		FROM ' . POSTS_TABLE . '		WHERE post_approved = 1';	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	set_config('num_posts', (int) $row['stat'], true);	$sql = 'SELECT COUNT(topic_id) AS stat		FROM ' . TOPICS_TABLE . '		WHERE topic_approved = 1';	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	set_config('num_topics', (int) $row['stat'], true);	$sql = 'SELECT COUNT(user_id) AS stat		FROM ' . USERS_TABLE . '		WHERE user_type IN (' . USER_NORMAL . ',' . USER_FOUNDER . ')';	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	set_config('num_users', (int) $row['stat'], true);	$sql = 'SELECT COUNT(attach_id) as stat		FROM ' . ATTACHMENTS_TABLE . '		WHERE is_orphan = 0';	$result = $db->sql_query($sql);	set_config('num_files', (int) $db->sql_fetchfield('stat'), true);	$db->sql_freeresult($result);	$sql = 'SELECT SUM(filesize) as stat		FROM ' . ATTACHMENTS_TABLE . '		WHERE is_orphan = 0';	$result = $db->sql_query($sql);	set_config('upload_dir_size', (float) $db->sql_fetchfield('stat'), true);	$db->sql_freeresult($result);	/**	* We do not resync users post counts - this can be done by the admin after conversion if wanted.	$sql = 'SELECT COUNT(post_id) AS num_posts, poster_id		FROM ' . POSTS_TABLE . '		WHERE post_postcount = 1		GROUP BY poster_id';	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$db->sql_query('UPDATE ' . USERS_TABLE . " SET user_posts = {$row['num_posts']} WHERE user_id = {$row['poster_id']}");	}	$db->sql_freeresult($result);	*/}/*** Updates topics_posted entries*/function update_topics_posted(){	global $db, $config;	switch ($db->sql_layer)	{		case 'sqlite':		case 'firebird':			$db->sql_query('DELETE FROM ' . TOPICS_POSTED_TABLE);		break;		default:			$db->sql_query('TRUNCATE TABLE ' . TOPICS_POSTED_TABLE);		break;	}	// This can get really nasty... therefore we only do the last six months	$get_from_time = time() - (6 * 4 * 7 * 24 * 60 * 60);	// Select forum ids, do not include categories	$sql = 'SELECT forum_id		FROM ' . FORUMS_TABLE . '		WHERE forum_type <> ' . FORUM_CAT;	$result = $db->sql_query($sql);	$forum_ids = array();	while ($row = $db->sql_fetchrow($result))	{		$forum_ids[] = $row['forum_id'];	}	$db->sql_freeresult($result);	// Any global announcements? ;)	$forum_ids[] = 0;	// Now go through the forums and get us some topics...	foreach ($forum_ids as $forum_id)	{		$sql = 'SELECT p.poster_id, p.topic_id			FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . ' t			WHERE t.forum_id = ' . $forum_id . '				AND t.topic_moved_id = 0				AND t.topic_last_post_time > ' . $get_from_time . '				AND t.topic_id = p.topic_id				AND p.poster_id <> ' . ANONYMOUS . '			GROUP BY p.poster_id, p.topic_id';		$result = $db->sql_query($sql);		$posted = array();		while ($row = $db->sql_fetchrow($result))		{			$posted[$row['poster_id']][] = $row['topic_id'];		}		$db->sql_freeresult($result);		$sql_ary = array();		foreach ($posted as $user_id => $topic_row)		{			foreach ($topic_row as $topic_id)			{				$sql_ary[] = array(					'user_id'		=> (int) $user_id,					'topic_id'		=> (int) $topic_id,					'topic_posted'	=> 1,				);			}		}		unset($posted);		if (sizeof($sql_ary))		{			$db->sql_multi_insert(TOPICS_POSTED_TABLE, $sql_ary);		}	}}/*** Ensure that all users have a default group specified and update related information such as their colour*/function fix_empty_primary_groups(){	global $db;	// Set group ids for users not already having it	$sql = 'UPDATE ' . USERS_TABLE . ' SET group_id = ' . get_group_id('registered') . '		WHERE group_id = 0 AND user_type = ' . USER_INACTIVE;	$db->sql_query($sql);	$sql = 'UPDATE ' . USERS_TABLE . ' SET group_id = ' . get_group_id('registered') . '		WHERE group_id = 0 AND user_type = ' . USER_NORMAL;	$db->sql_query($sql);	$db->sql_query('UPDATE ' . USERS_TABLE . ' SET group_id = ' . get_group_id('guests') . ' WHERE user_id = ' . ANONYMOUS);	$sql = 'SELECT user_id FROM ' . USER_GROUP_TABLE . ' WHERE group_id = ' . get_group_id('administrators');	$result = $db->sql_query($sql);	$user_ids = array();	while ($row = $db->sql_fetchrow($result))	{		$user_ids[] = $row['user_id'];	}	$db->sql_freeresult($result);	if (sizeof($user_ids))	{		$db->sql_query('UPDATE ' . USERS_TABLE . ' SET group_id = ' . get_group_id('administrators') . '			WHERE group_id = 0 AND ' . $db->sql_in_set('user_id', $user_ids));	}	$sql = 'SELECT user_id FROM ' . USER_GROUP_TABLE . ' WHERE group_id = ' . get_group_id('global_moderators');	$user_ids = array();	while ($row = $db->sql_fetchrow($result))	{		$user_ids[] = $row['user_id'];	}	$db->sql_freeresult($result);	if (sizeof($user_ids))	{		$db->sql_query('UPDATE ' . USERS_TABLE . ' SET group_id = ' . get_group_id('global_moderators') . '			WHERE group_id = 0 AND ' . $db->sql_in_set('user_id', $user_ids));	}	// Set user colour	$sql = 'SELECT group_id, group_colour FROM ' . GROUPS_TABLE . "		WHERE group_colour <> ''";	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$db->sql_query('UPDATE ' . USERS_TABLE . " SET user_colour = '{$row['group_colour']}' WHERE group_id = {$row['group_id']}");	}	$db->sql_freeresult($result);}/*** Cleanly remove invalid user entries after converting the users table...*/function remove_invalid_users(){	global $convert, $db, $phpEx, $phpbb_root_path;	// username_clean is UNIQUE	$sql = 'SELECT user_id		FROM ' . USERS_TABLE . "		WHERE username_clean = ''";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		if (!function_exists('user_delete'))		{			include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		}		user_delete('remove', $row['user_id']);	}}function convert_bbcode($message, $convert_size = true, $extended_bbcodes = false){	static $orig, $repl, $origx, $replx, $str_from, $str_to;	if (empty($orig))	{		$orig = $repl = array();		$orig[] = '#\[(php|sql)\](.*?)\[/(php|sql)\]#is';		$repl[] = '[code]\2[/code]';		$orig[] = '#\[font=[^\]]+\](.*?)\[/font\]#is';		$repl[] = '\1';		$orig[] = '#\[align=[a-z]+\](.*?)\[/align\]#is';		$repl[] = '\1';		$orig[] = '#\[/list=.*?\]#is';		$repl[] = '[/list]';		$origx = array(			'#\[glow[^\]]+\](.*?)\[/glow\]#is',			'#\[shadow[^\]]+\](.*?)\[/shadow\]#is',			'#\[flash[^\]]+\](.*?)\[/flash\]#is'		);		$replx = array(			'\1',			'\1',			'[url=\1]Flash[/url]'		);		$str_from = array(			'[ftp]',	'[/ftp]',			'[ftp=',	'[/ftp]',			'[pre]',	'[/pre]',			'[table]',	'[/table]',			'[td]',		'[/td]',			'[tr]',		'[/tr]',			'[s]',		'[/s]',			'[left]',	'[/left]',			'[right]',	'[/right]',			'[center]',	'[/center]',			'[sub]',	'[/sub]',			'[sup]',	'[/sup]',			'[tt]',		'[/tt]',			'[move]',	'[/move]',			'[hr]'		);		$str_to = array(			'[url]',	'[/url]',			'[url=',	'[/url]',			'[code]',	'[/code]',			"\n",		'',			'',			'',			"\n",		'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			'',			"\n\n"		);		for ($i = 0; $i < sizeof($str_from); ++$i)		{			$origx[] = '#\\' . str_replace(']', '\\]', $str_from[$i]) . '#is';			$replx[] = $str_to[$i];		}	}	if (preg_match_all('#\[email=([^\]]+)\](.*?)\[/email\]#i', $message, $m))	{		for ($i = 0; $i < sizeof($m[1]); ++$i)		{			if ($m[1][$i] == $m[2][$i])			{				$message = str_replace($m[0][$i], '[email]' . $m[1][$i] . '[/email]', $message);			}			else			{				$message = str_replace($m[0][$i], $m[2][$i] . ' ([email]' . $m[1][$i] . '[/email])', $message);			}		}	}	if ($convert_size && preg_match('#\[size=[0-9]+\].*?\[/size\]#i', $message))	{		$size = array(9, 9, 12, 15, 18, 24, 29, 29, 29, 29);		$message = preg_replace('#\[size=([0-9]+)\](.*?)\[/size\]#i', '[size=\1]\2[/size]', $message);		$message = preg_replace('#\[size=[0-9]{2,}\](.*?)\[/size\]#i', '[size=29]\1[/size]', $message);		for ($i = sizeof($size); $i; )		{			$i--;			$message = str_replace('[size=' . $i . ']', '[size=' . $size[$i] . ']', $message);		}	}	if ($extended_bbcodes)	{		$message = preg_replace($origx, $replx, $message);	}	$message = preg_replace($orig, $repl, $message);	return $message;}function copy_file($src, $trg, $overwrite = false, $die_on_failure = true, $source_relative_path = true){	global $convert, $phpbb_root_path, $config, $user, $db;	if (substr($trg, -1) == '/')	{		$trg .= utf8_basename($src);	}	$src_path = relative_base($src, $source_relative_path, __LINE__, __FILE__);	$trg_path = $trg;	if (!$overwrite && @file_exists($trg_path))	{		return true;	}	if (!@file_exists($src_path))	{		return;	}	$path = $phpbb_root_path;	$parts = explode('/', $trg);	unset($parts[sizeof($parts) - 1]);	for ($i = 0; $i < sizeof($parts); ++$i)	{		$path .= $parts[$i] . '/';		if (!is_dir($path))		{			@mkdir($path, 0777);		}	}	if (!phpbb_is_writable($path))	{		@chmod($path, 0777);	}	if (!@copy($src_path, $phpbb_root_path . $trg_path))	{		$convert->p_master->error(sprintf($user->lang['COULD_NOT_COPY'], $src_path, $phpbb_root_path . $trg_path), __LINE__, __FILE__, !$die_on_failure);		return;	}	if ($perm = @fileperms($src_path))	{		@chmod($phpbb_root_path . $trg_path, $perm);	}	return true;}function copy_dir($src, $trg, $copy_subdirs = true, $overwrite = false, $die_on_failure = true, $source_relative_path = true){	global $convert, $phpbb_root_path, $config, $user, $db;	$dirlist = $filelist = $bad_dirs = array();	$src = path($src, $source_relative_path);	$trg = path($trg);	$src_path = relative_base($src, $source_relative_path, __LINE__, __FILE__);	$trg_path = $phpbb_root_path . $trg;	if (!is_dir($trg_path))	{		@mkdir($trg_path, 0777);		@chmod($trg_path, 0777);	}	if (!phpbb_is_writable($trg_path))	{		$bad_dirs[] = path($config['script_path']) . $trg;	}	if ($handle = @opendir($src_path))	{		while ($entry = readdir($handle))		{			if ($entry[0] == '.' || $entry == 'CVS' || $entry == 'index.htm')			{				continue;			}			if (is_dir($src_path . $entry))			{				$dirlist[] = $entry;			}			else			{				$filelist[] = $entry;			}		}		closedir($handle);	}	else if ($dir = @dir($src_path))	{		while ($entry = $dir->read())		{			if ($entry[0] == '.' || $entry == 'CVS' || $entry == 'index.htm')			{				continue;			}			if (is_dir($src_path . $entry))			{				$dirlist[] = $entry;			}			else			{				$filelist[] = $entry;			}		}		$dir->close();	}	else	{		$convert->p_master->error(sprintf($user->lang['CONV_ERROR_COULD_NOT_READ'], relative_base($src, $source_relative_path)), __LINE__, __FILE__);	}	if ($copy_subdirs)	{		for ($i = 0; $i < sizeof($dirlist); ++$i)		{			$dir = $dirlist[$i];			if ($dir == 'CVS')			{				continue;			}			if (!is_dir($trg_path . $dir))			{				@mkdir($trg_path . $dir, 0777);				@chmod($trg_path . $dir, 0777);			}			if (!phpbb_is_writable($trg_path . $dir))			{				$bad_dirs[] = $trg . $dir;				$bad_dirs[] = $trg_path . $dir;			}			if (!sizeof($bad_dirs))			{				copy_dir($src . $dir, $trg . $dir, true, $overwrite, $die_on_failure, $source_relative_path);			}		}	}	if (sizeof($bad_dirs))	{		$str = (sizeof($bad_dirs) == 1) ? $user->lang['MAKE_FOLDER_WRITABLE'] : $user->lang['MAKE_FOLDERS_WRITABLE'];		sort($bad_dirs);		$convert->p_master->error(sprintf($str, implode('<br />', $bad_dirs)), __LINE__, __FILE__);	}	for ($i = 0; $i < sizeof($filelist); ++$i)	{		copy_file($src . $filelist[$i], $trg . $filelist[$i], $overwrite, $die_on_failure, $source_relative_path);	}}function relative_base($path, $is_relative = true, $line = false, $file = false){	global $convert, $phpbb_root_path, $config, $user, $db;	if (!$is_relative)	{		return $path;	}	if (empty($convert->options['forum_path']) && $is_relative)	{		$line = $line ? $line : __LINE__;		$file = $file ? $file : __FILE__;		$convert->p_master->error($user->lang['CONV_ERROR_NO_FORUM_PATH'], $line, $file);	}	return $convert->options['forum_path'] . '/' . $path;}function get_smiley_display(){	static $smiley_count = 0;	$smiley_count++;	return ($smiley_count < 50) ? 1 : 0;}function fill_dateformat($user_dateformat){	global $config;	return ((empty($user_dateformat)) ? $config['default_dateformat'] : $user_dateformat);}?>
<?php$GLOBALS['utf_canonical_comp']=array('A'=>'','A'=>'','A'=>'','A'=>'','A'=>'','A'=>'','C'=>'','E'=>'','E'=>'','E'=>'','E'=>'','I'=>'','I'=>'','I'=>'','I'=>'','N'=>'','O'=>'','O'=>'','O'=>'','O'=>'','O'=>'','U'=>'','U'=>'','U'=>'','U'=>'','Y'=>'','a'=>'','a'=>'','a'=>'','a'=>'','a'=>'','a'=>'','c'=>'','e'=>'','e'=>'','e'=>'','e'=>'','i'=>'','i'=>'','i'=>'','i'=>'','n'=>'','o'=>'','o'=>'','o'=>'','o'=>'','o'=>'','u'=>'','u'=>'','u'=>'','u'=>'','y'=>'','y'=>'','A'=>'','a'=>'','A'=>'','a'=>'','A'=>'','a'=>'','C'=>'','c'=>'','C'=>'','c'=>'','C'=>'','c'=>'','C'=>'','c'=>'','D'=>'','d'=>'','E'=>'','e'=>'','E'=>'','e'=>'','E'=>'','e'=>'','E'=>'','e'=>'','E'=>'','e'=>'','G'=>'','g'=>'','G'=>'','g'=>'','G'=>'','g'=>'','G'=>'','g'=>'','H'=>'','h'=>'','I'=>'','i'=>'','I'=>'','i'=>'','I'=>'','i'=>'','I'=>'','i'=>'','I'=>'','J'=>'','j'=>'','K'=>'','k'=>'','L'=>'','l'=>'','L'=>'','l'=>'','L'=>'','l'=>'','N'=>'','n'=>'','N'=>'','n'=>'','N'=>'','n'=>'','O'=>'','o'=>'','O'=>'','o'=>'','O'=>'','o'=>'','R'=>'','r'=>'','R'=>'','r'=>'','R'=>'','r'=>'','S'=>'','s'=>'','S'=>'','s'=>'','S'=>'','s'=>'','S'=>'','s'=>'','T'=>'','t'=>'','T'=>'','t'=>'','U'=>'','u'=>'','U'=>'','u'=>'','U'=>'','u'=>'','U'=>'','u'=>'','U'=>'','u'=>'','U'=>'','u'=>'','W'=>'','w'=>'','Y'=>'','y'=>'','Y'=>'','Z'=>'','z'=>'','Z'=>'','z'=>'','Z'=>'','z'=>'','O'=>'','o'=>'','U'=>'','u'=>'','A'=>'','a'=>'','I'=>'','i'=>'','O'=>'','o'=>'','U'=>'','u'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','G'=>'','g'=>'','K'=>'','k'=>'','O'=>'','o'=>'',''=>'',''=>'',''=>'',''=>'','j'=>'','G'=>'','g'=>'','N'=>'','n'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','A'=>'','a'=>'','A'=>'','a'=>'','E'=>'','e'=>'','E'=>'','e'=>'','I'=>'','i'=>'','I'=>'','i'=>'','O'=>'','o'=>'','O'=>'','o'=>'','R'=>'','r'=>'','R'=>'','r'=>'','U'=>'','u'=>'','U'=>'','u'=>'','S'=>'','s'=>'','T'=>'','t'=>'','H'=>'','h'=>'','A'=>'','a'=>'','E'=>'','e'=>'',''=>'',''=>'',''=>'',''=>'','O'=>'','o'=>'',''=>'',''=>'','Y'=>'','y'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','A'=>'','a'=>'','B'=>'','b'=>'','B'=>'','b'=>'','B'=>'','b'=>'',''=>'',''=>'','D'=>'','d'=>'','D'=>'','d'=>'','D'=>'','d'=>'','D'=>'','d'=>'','D'=>'','d'=>'',''=>'',''=>'',''=>'',''=>'','E'=>'','e'=>'','E'=>'','e'=>'',''=>'',''=>'','F'=>'','f'=>'','G'=>'','g'=>'','H'=>'','h'=>'','H'=>'','h'=>'','H'=>'','h'=>'','H'=>'','h'=>'','H'=>'','h'=>'','I'=>'','i'=>'',''=>'',''=>'','K'=>'','k'=>'','K'=>'','k'=>'','K'=>'','k'=>'','L'=>'','l'=>'',''=>'',''=>'','L'=>'','l'=>'','L'=>'','l'=>'','M'=>'','m'=>'','M'=>'','m'=>'','M'=>'','m'=>'','N'=>'','n'=>'','N'=>'','n'=>'','N'=>'','n'=>'','N'=>'','n'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','P'=>'','p'=>'','P'=>'','p'=>'','R'=>'','r'=>'','R'=>'','r'=>'',''=>'',''=>'','R'=>'','r'=>'','S'=>'','s'=>'','S'=>'','s'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','T'=>'','t'=>'','T'=>'','t'=>'','T'=>'','t'=>'','T'=>'','t'=>'','U'=>'','u'=>'','U'=>'','u'=>'','U'=>'','u'=>'',''=>'',''=>'',''=>'',''=>'','V'=>'','v'=>'','V'=>'','v'=>'','W'=>'','w'=>'','W'=>'','w'=>'','W'=>'','w'=>'','W'=>'','w'=>'','W'=>'','w'=>'','X'=>'','x'=>'','X'=>'','x'=>'','Y'=>'','y'=>'','Z'=>'','z'=>'','Z'=>'','z'=>'','Z'=>'','z'=>'','h'=>'','t'=>'','w'=>'','y'=>'',''=>'','A'=>'','a'=>'','A'=>'','a'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','E'=>'','e'=>'','E'=>'','e'=>'','E'=>'','e'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','I'=>'','i'=>'','I'=>'','i'=>'','O'=>'','o'=>'','O'=>'','o'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','U'=>'','u'=>'','U'=>'','u'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','Y'=>'','y'=>'','Y'=>'','y'=>'','Y'=>'','y'=>'','Y'=>'','y'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','='=>'',''=>'',''=>'','<'=>'','>'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'');
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_logs_info{	function module()	{		return array(			'filename'	=> 'acp_logs',			'title'		=> 'ACP_LOGGING',			'version'	=> '1.0.0',			'modes'		=> array(				'admin'		=> array('title' => 'ACP_ADMIN_LOGS', 'auth' => 'acl_a_viewlogs', 'cat' => array('ACP_FORUM_LOGS')),				'mod'		=> array('title' => 'ACP_MOD_LOGS', 'auth' => 'acl_a_viewlogs', 'cat' => array('ACP_FORUM_LOGS')),				'users'		=> array('title' => 'ACP_USERS_LOGS', 'auth' => 'acl_a_viewlogs', 'cat' => array('ACP_FORUM_LOGS')),				'critical'	=> array('title' => 'ACP_CRITICAL_LOGS', 'auth' => 'acl_a_viewlogs', 'cat' => array('ACP_FORUM_LOGS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php return array(''=>'i',''=>'!',''=>'a',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'o',''=>'o',''=>'',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>' ',''=>'`',''=>'`',''=>'',''=>'^',''=>'^',''=>'_',''=>'_',''=>'_',''=>'_',''=>'',''=>'-',''=>'-',''=>'-',''=>'-',''=>'-',''=>'-',''=>'',''=>'',''=>'',''=>',',''=>',',''=>'',''=>'',''=>';',''=>';',''=>':',''=>':',''=>':',''=>':',''=>'::=',''=>'.',''=>'.',''=>'.',''=>'..',''=>'...',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'4',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'L',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'(',''=>'(1)',''=>'(l)',''=>'(10)',''=>'(11)',''=>'(12)',''=>'(13)',''=>'(14)',''=>'(15)',''=>'(16)',''=>'(17)',''=>'(18)',''=>'(19)',''=>'(2)',''=>'(20)',''=>'(3)',''=>'(4)',''=>'(5)',''=>'(6)',''=>'(7)',''=>'(8)',''=>'(9)',''=>'(a)',''=>'(b)',''=>'(c)',''=>'(d)',''=>'(e)',''=>'(f)',''=>'(g)',''=>'(h)',''=>'(i)',''=>'(j)',''=>'(k)',''=>'(m)',''=>'(n)',''=>'(o)',''=>'(p)',''=>'(q)',''=>'(r)',''=>'(s)',''=>'(t)',''=>'(u)',''=>'(v)',''=>'(w)',''=>'(x)',''=>'(y)',''=>'(z)',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>'()',''=>')',''=>'[',''=>'[',''=>']',''=>']',''=>'{',''=>'}',''=>'',''=>'',''=>'',''=>'',''=>'@',''=>'*',''=>'/',''=>'/',''=>'/',''=>'\\',''=>'&',''=>'#',''=>'%',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','\''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','"'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'+',''=>'+',''=>'<',''=>'<',''=>'=',''=>'==',''=>'===',''=>'>',''=>'>',''=>'',''=>'',''=>'~',''=>'~',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'$',''=>'',''=>'Y',''=>'W',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'0',''=>'',''=>'',''=>'0',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1',''=>'1','l'=>'l',''=>'l',''=>'1',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'l',''=>'',''=>'l',''=>'l',''=>'l',''=>'l',''=>'',''=>'1.',''=>'l',''=>'1',''=>'',''=>'10.',''=>'10',''=>'10',''=>'10',''=>'11.',''=>'11',''=>'11',''=>'11',''=>'12.',''=>'12',''=>'12',''=>'12',''=>'13.',''=>'13',''=>'13',''=>'14.',''=>'14',''=>'14',''=>'15.',''=>'15',''=>'15',''=>'16.',''=>'16',''=>'16',''=>'17.',''=>'17',''=>'17',''=>'18.',''=>'18',''=>'18',''=>'19.',''=>'19',''=>'19',''=>'lj',''=>'1',''=>'1',''=>'1',''=>'2',''=>'2',''=>'2',''=>'2',''=>'2',''=>'2',''=>'2',''=>'',''=>'',''=>'2.',''=>'20.',''=>'20',''=>'20',''=>'21',''=>'21',''=>'22',''=>'22',''=>'23',''=>'23',''=>'24',''=>'24',''=>'25',''=>'26',''=>'27',''=>'28',''=>'29',''=>'2',''=>'2',''=>'2',''=>'3',''=>'3',''=>'3',''=>'3',''=>'3',''=>'3',''=>'',''=>'',''=>'3.',''=>'30',''=>'31',''=>'3',''=>'3',''=>'3',''=>'4',''=>'4',''=>'4',''=>'4',''=>'4',''=>'4',''=>'4',''=>'',''=>'4.',''=>'4',''=>'4',''=>'4',''=>'4',''=>'5',''=>'5',''=>'5',''=>'5',''=>'5',''=>'5',''=>'',''=>'5.',''=>'5',''=>'5',''=>'5',''=>'6',''=>'6',''=>'6',''=>'6',''=>'6',''=>'6',''=>'6',''=>'',''=>'6.',''=>'6',''=>'6',''=>'6',''=>'7',''=>'7',''=>'7',''=>'7',''=>'7',''=>'7',''=>'',''=>'',''=>'7.',''=>'7',''=>'7',''=>'7',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'8',''=>'',''=>'',''=>'8.',''=>'8',''=>'8',''=>'8',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'9',''=>'',''=>'',''=>'9.',''=>'9',''=>'9',''=>'9',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a',''=>'a/c',''=>'a/s',''=>'ae',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'b',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c',''=>'c/o',''=>'c/u',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'d',''=>'dz',''=>'d',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'e',''=>'E',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'f',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'g',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'h',''=>'',''=>'',''=>'',''=>'',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'i',''=>'ii',''=>'iii',''=>'ij',''=>'iv',''=>'ix',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'j',''=>'',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'k',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'m',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'N',''=>'',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'n',''=>'nj',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'oe',''=>'o',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'p',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'Q',''=>'q',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'r',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'s',''=>'',''=>'',''=>'',''=>'',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'t',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'T',''=>'t',''=>'',''=>'',''=>'t',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'u',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'U',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'v',''=>'vi',''=>'vii',''=>'viii',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'w',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'W',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'x',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'X',''=>'xi',''=>'xii',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'y',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'z',''=>'','?'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','!'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'Y',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'ae',''=>'r',''=>'r',''=>'',''=>'',''=>'i',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'o',''=>'o',''=>'c',''=>'',''=>'y',''=>'y',''=>'h',''=>'',''=>'',''=>'',''=>'',''=>'q',''=>'n',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>' ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'   ',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'o',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'y',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'A',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'J',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'E',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'w',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'M',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'H',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'G',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'Z',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'S',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'V',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'L',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'C',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'P',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'K',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'B',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'P',''=>'d',''=>'J',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'P',''=>'P',''=>'',''=>'d',''=>'d',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'J',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'x',''=>'x',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'P',''=>'',''=>'d',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'R',''=>'',''=>'',''=>'',''=>'',''=>'J',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'J',''=>'',''=>'',''=>'',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'F',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'D',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'','|'=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'C',''=>'F',''=>'',''=>'FAX',''=>'N',''=>'No',''=>'Q',''=>'Rs',''=>'T',''=>'TEL',''=>'U',''=>'W',''=>'W',''=>'X',''=>'Y',''=>'',''=>'',''=>'',''=>'c',''=>'Y',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'b',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'a',''=>'b',''=>'b',''=>'c',''=>'d',''=>'d',''=>'e',''=>'',''=>'',''=>'',''=>'f',''=>'g',''=>'h',''=>'h',''=>'h',''=>'h',''=>'i',''=>'i',''=>'i',''=>'j',''=>'j',''=>'m',''=>'n',''=>'n',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'o',''=>'p',''=>'p',''=>'',''=>'q',''=>'',''=>'',''=>'r',''=>'r',''=>'s',''=>'u',''=>'u',''=>'v',''=>'v',''=>'w',''=>'w',''=>'x',''=>'x',''=>'y',''=>'y',''=>'',''=>'',''=>'',''=>'',''=>'i',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'A',''=>'J',''=>'H',''=>'V',''=>'P',''=>'B',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'A',''=>'B',''=>'C',''=>'D',''=>'E',''=>'F',''=>'G',''=>'H',''=>'J',''=>'K',''=>'L',''=>'M',''=>'P',''=>'R',''=>'S',''=>'V',''=>'Z');
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_send_statistics_info{	function module()	{		return array(			'filename'	=> 'acp_send_statistics',			'title'		=> 'ACP_SEND_STATISTICS',			'version'	=> '1.0.0',			'modes'		=> array(				'send_statistics'		=> array('title' => 'ACP_SEND_STATISTICS', 'auth' => 'acl_a_server', 'cat' => array('ACP_SERVER_CONFIGURATION')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php$GLOBALS['utf_jamo_index']=array(''=>44032,''=>44620,''=>45208,''=>45796,''=>46384,''=>46972,''=>47560,''=>48148,''=>48736,''=>49324,''=>49912,''=>50500,''=>51088,''=>51676,''=>52264,''=>52852,''=>53440,''=>54028,''=>54616,''=>0,''=>28,''=>56,''=>84,''=>112,''=>140,''=>168,''=>196,''=>224,''=>252,''=>280,''=>308,''=>336,''=>364,''=>392,''=>420,''=>448,''=>476,''=>504,''=>532,''=>560,''=>0,''=>1,''=>2,''=>3,''=>4,''=>5,''=>6,''=>7,''=>8,''=>9,''=>10,''=>11,''=>12,''=>13,''=>14,''=>15,''=>16,''=>17,''=>18,''=>19,''=>20,''=>21,''=>22,''=>23,''=>24,''=>25,''=>26,''=>27);$GLOBALS['utf_jamo_type']=array(''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>0,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>1,''=>2,''=>2,''=>2,''=>2,''=>2,''=>2,''=>2,''=>2,''=>2,''=>2,''=>2,''=>2,''=>2,''=>2,''=>2,''=>2,''=>2,''=>2,''=>2,''=>2,''=>2,''=>2,''=>2,''=>2,''=>2,''=>2,''=>2,''=>2);$GLOBALS['utf_combining_class']=array(''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>232,''=>220,''=>220,''=>220,''=>220,''=>232,''=>216,''=>220,''=>220,''=>220,''=>220,''=>220,''=>202,''=>202,''=>220,''=>220,''=>220,''=>220,''=>202,''=>202,''=>220,''=>220,''=>220,''=>220,''=>220,''=>220,''=>220,''=>220,''=>220,''=>220,''=>220,''=>1,''=>1,''=>1,''=>1,''=>1,''=>220,''=>220,''=>220,''=>220,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>240,''=>230,''=>220,''=>220,''=>220,''=>230,''=>230,''=>230,''=>220,''=>220,''=>230,''=>230,''=>230,''=>220,''=>220,''=>220,''=>220,''=>230,''=>232,''=>220,''=>220,''=>230,''=>233,''=>234,''=>234,''=>233,''=>234,''=>234,''=>233,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>220,''=>230,''=>230,''=>230,''=>230,''=>220,''=>230,''=>230,''=>230,''=>222,''=>220,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>220,''=>220,''=>220,''=>220,''=>220,''=>220,''=>230,''=>230,''=>220,''=>230,''=>230,''=>222,''=>228,''=>230,''=>10,''=>11,''=>12,''=>13,''=>14,''=>15,''=>16,''=>17,''=>18,''=>19,''=>19,''=>20,''=>21,''=>22,''=>23,''=>24,''=>25,''=>230,''=>220,''=>18,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>27,''=>28,''=>29,''=>30,''=>31,''=>32,''=>33,''=>34,''=>230,''=>230,''=>220,''=>220,''=>230,''=>230,''=>230,''=>230,''=>230,''=>220,''=>230,''=>230,''=>35,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>220,''=>230,''=>230,''=>230,''=>220,''=>230,''=>230,''=>220,''=>36,''=>230,''=>220,''=>230,''=>230,''=>220,''=>230,''=>230,''=>220,''=>220,''=>220,''=>230,''=>220,''=>220,''=>230,''=>220,''=>230,''=>230,''=>230,''=>220,''=>230,''=>220,''=>230,''=>220,''=>230,''=>220,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>220,''=>230,''=>7,''=>9,''=>230,''=>220,''=>230,''=>230,''=>7,''=>9,''=>7,''=>9,''=>7,''=>9,''=>7,''=>9,''=>9,''=>9,''=>84,''=>91,''=>7,''=>9,''=>9,''=>9,''=>103,''=>103,''=>9,''=>107,''=>107,''=>107,''=>107,''=>118,''=>118,''=>122,''=>122,''=>122,''=>122,''=>220,''=>220,''=>220,''=>220,''=>216,''=>129,''=>130,''=>132,''=>130,''=>130,''=>130,''=>130,''=>130,''=>230,''=>230,''=>9,''=>230,''=>230,''=>220,''=>7,''=>9,''=>230,''=>9,''=>9,''=>9,''=>230,''=>228,''=>222,''=>230,''=>220,''=>230,''=>220,''=>7,''=>9,''=>230,''=>220,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>220,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>220,''=>230,''=>220,''=>230,''=>230,''=>1,''=>1,''=>230,''=>230,''=>230,''=>230,''=>1,''=>1,''=>1,''=>230,''=>230,''=>230,''=>1,''=>1,''=>230,''=>220,''=>230,''=>1,''=>1,''=>220,''=>220,''=>220,''=>220,''=>218,''=>228,''=>232,''=>222,''=>224,''=>224,''=>8,''=>8,''=>9,''=>26,''=>230,''=>230,''=>230,''=>230,''=>220,''=>230,''=>230,''=>1,''=>220,''=>9,''=>216,''=>216,''=>1,''=>1,''=>1,''=>226,''=>216,''=>216,''=>216,''=>216,''=>216,''=>220,''=>220,''=>220,''=>220,''=>220,''=>220,''=>220,''=>220,''=>230,''=>230,''=>230,''=>230,''=>230,''=>220,''=>220,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230,''=>230);
<?php/**** @package install* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//**#@+* @ignore*/define('IN_PHPBB', true);define('IN_INSTALL', true);/**#@-*/$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);// @todo Review this test and see if we can find out what it is which prevents PHP 4.2.x from even displaying the page with requirements on itif (version_compare(PHP_VERSION, '4.3.3') < 0){	die('You are running an unsupported PHP version. Please upgrade to PHP 4.3.3 or higher before trying to install phpBB 3.0');}function phpbb_require_updated($path, $optional = false){	global $phpbb_root_path;	$new_path = $phpbb_root_path . 'install/update/new/' . $path;	$old_path = $phpbb_root_path . $path;	if (file_exists($new_path))	{		require($new_path);	}	else if (!$optional || file_exists($old_path))	{		require($old_path);	}}phpbb_require_updated('includes/startup.' . $phpEx);// Try to override some limits - maybe it helps some...@set_time_limit(0);$mem_limit = @ini_get('memory_limit');if (!empty($mem_limit)){	$unit = strtolower(substr($mem_limit, -1, 1));	$mem_limit = (int) $mem_limit;	if ($unit == 'k')	{		$mem_limit = floor($mem_limit / 1024);	}	else if ($unit == 'g')	{		$mem_limit *= 1024;	}	else if (is_numeric($unit))	{		$mem_limit = floor((int) ($mem_limit . $unit) / 1048576);	}	$mem_limit = max(128, $mem_limit) . 'M';}else{	$mem_limit = '128M';}@ini_set('memory_limit', $mem_limit);// Include essential scriptsrequire($phpbb_root_path . 'includes/functions.' . $phpEx);phpbb_require_updated('includes/functions_content.' . $phpEx, true);include($phpbb_root_path . 'includes/auth.' . $phpEx);include($phpbb_root_path . 'includes/session.' . $phpEx);include($phpbb_root_path . 'includes/template.' . $phpEx);include($phpbb_root_path . 'includes/acm/acm_file.' . $phpEx);include($phpbb_root_path . 'includes/cache.' . $phpEx);include($phpbb_root_path . 'includes/functions_admin.' . $phpEx);include($phpbb_root_path . 'includes/utf/utf_tools.' . $phpEx);require($phpbb_root_path . 'includes/functions_install.' . $phpEx);// Try and load an appropriate language if required$language = basename(request_var('language', ''));if (!empty($_SERVER['HTTP_ACCEPT_LANGUAGE']) && !$language){	$accept_lang_ary = explode(',', strtolower($_SERVER['HTTP_ACCEPT_LANGUAGE']));	foreach ($accept_lang_ary as $accept_lang)	{		// Set correct format ... guess full xx_yy form		$accept_lang = substr($accept_lang, 0, 2) . '_' . substr($accept_lang, 3, 2);		if (file_exists($phpbb_root_path . 'language/' . $accept_lang) && is_dir($phpbb_root_path . 'language/' . $accept_lang))		{			$language = $accept_lang;			break;		}		else		{			// No match on xx_yy so try xx			$accept_lang = substr($accept_lang, 0, 2);			if (file_exists($phpbb_root_path . 'language/' . $accept_lang) && is_dir($phpbb_root_path . 'language/' . $accept_lang))			{				$language = $accept_lang;				break;			}		}	}}// No appropriate language found ... so let's use the first one in the language// dir, this may or may not be Englishif (!$language){	$dir = @opendir($phpbb_root_path . 'language');	if (!$dir)	{		die('Unable to access the language directory');		exit;	}	while (($file = readdir($dir)) !== false)	{		$path = $phpbb_root_path . 'language/' . $file;		if (!is_file($path) && !is_link($path) && file_exists($path . '/iso.txt'))		{			$language = $file;			break;		}	}	closedir($dir);}if (!file_exists($phpbb_root_path . 'language/' . $language) || !is_dir($phpbb_root_path . 'language/' . $language)){	die('No language found!');}// And finally, load the relevant language filesinclude($phpbb_root_path . 'language/' . $language . '/common.' . $phpEx);include($phpbb_root_path . 'language/' . $language . '/acp/common.' . $phpEx);include($phpbb_root_path . 'language/' . $language . '/acp/board.' . $phpEx);include($phpbb_root_path . 'language/' . $language . '/install.' . $phpEx);include($phpbb_root_path . 'language/' . $language . '/posting.' . $phpEx);// usually we would need every single constant here - and it would be consistent. For 3.0.x, use a dirty hack... :(// Define needed constantsdefine('CHMOD_ALL', 7);define('CHMOD_READ', 4);define('CHMOD_WRITE', 2);define('CHMOD_EXECUTE', 1);$mode = request_var('mode', 'overview');$sub = request_var('sub', '');// Set PHP error handler to oursset_error_handler(defined('PHPBB_MSG_HANDLER') ? PHPBB_MSG_HANDLER : 'msg_handler');$user = new user();$auth = new auth();$cache = new cache();$template = new template();// Add own hook handler, if present. :oif (file_exists($phpbb_root_path . 'includes/hooks/index.' . $phpEx)){	require($phpbb_root_path . 'includes/hooks/index.' . $phpEx);	$phpbb_hook = new phpbb_hook(array('exit_handler', 'phpbb_user_session_handler', 'append_sid', array('template', 'display')));	foreach ($cache->obtain_hooks() as $hook)	{		@include($phpbb_root_path . 'includes/hooks/' . $hook . '.' . $phpEx);	}}else{	$phpbb_hook = false;}// Set some standard variables we want to force$config = array(	'load_tplcompile'	=> '1');$template->set_custom_template('../adm/style', 'admin');$template->assign_var('T_TEMPLATE_PATH', '../adm/style');// the acp template is never stored in the database$user->theme['template_storedb'] = false;$install = new module();$install->create('install', "index.$phpEx", $mode, $sub);$install->load();// Generate the page$install->page_header();$install->generate_navigation();$template->set_filenames(array(	'body' => $install->get_tpl_name()));$install->page_footer();/*** @package install*/class module{	var $id = 0;	var $type = 'install';	var $module_ary = array();	var $filename;	var $module_url = '';	var $tpl_name = '';	var $mode;	var $sub;	/**	* Private methods, should not be overwritten	*/	function create($module_type, $module_url, $selected_mod = false, $selected_submod = false)	{		global $db, $config, $phpEx, $phpbb_root_path;		$module = array();		// Grab module information using Bart's "neat-o-module" system (tm)		$dir = @opendir('.');		if (!$dir)		{			$this->error('Unable to access the installation directory', __LINE__, __FILE__);		}		$setmodules = 1;		while (($file = readdir($dir)) !== false)		{			if (preg_match('#^install_(.*?)\.' . $phpEx . '$#', $file))			{				include($file);			}		}		closedir($dir);		unset($setmodules);		if (!sizeof($module))		{			$this->error('No installation modules found', __LINE__, __FILE__);		}		// Order to use and count further if modules get assigned to the same position or not having an order		$max_module_order = 1000;		foreach ($module as $row)		{			// Module order not specified or module already assigned at this position?			if (!isset($row['module_order']) || isset($this->module_ary[$row['module_order']]))			{				$row['module_order'] = $max_module_order;				$max_module_order++;			}			$this->module_ary[$row['module_order']]['name'] = $row['module_title'];			$this->module_ary[$row['module_order']]['filename'] = $row['module_filename'];			$this->module_ary[$row['module_order']]['subs'] = $row['module_subs'];			$this->module_ary[$row['module_order']]['stages'] = $row['module_stages'];			if (strtolower($selected_mod) == strtolower($row['module_title']))			{				$this->id = (int) $row['module_order'];				$this->filename = (string) $row['module_filename'];				$this->module_url = (string) $module_url;				$this->mode = (string) $selected_mod;				// Check that the sub-mode specified is valid or set a default if not				if (is_array($row['module_subs']))				{					$this->sub = strtolower((in_array(strtoupper($selected_submod), $row['module_subs'])) ? $selected_submod : $row['module_subs'][0]);				}				else if (is_array($row['module_stages']))				{					$this->sub = strtolower((in_array(strtoupper($selected_submod), $row['module_stages'])) ? $selected_submod : $row['module_stages'][0]);				}				else				{					$this->sub = '';				}			}		} // END foreach	} // END create	/**	* Load and run the relevant module if applicable	*/	function load($mode = false, $run = true)	{		global $phpbb_root_path, $phpEx;		if ($run)		{			if (!empty($mode))			{				$this->mode = $mode;			}			$module = $this->filename;			if (!class_exists($module))			{				$this->error('Module "' . htmlspecialchars($module) . '" not accessible.', __LINE__, __FILE__);			}			$this->module = new $module($this);			if (method_exists($this->module, 'main'))			{				$this->module->main($this->mode, $this->sub);			}		}	}	/**	* Output the standard page header	*/	function page_header()	{		if (defined('HEADER_INC'))		{			return;		}		define('HEADER_INC', true);		global $template, $lang, $stage, $phpbb_root_path;		$template->assign_vars(array(			'L_CHANGE'				=> $lang['CHANGE'],			'L_INSTALL_PANEL'		=> $lang['INSTALL_PANEL'],			'L_SELECT_LANG'			=> $lang['SELECT_LANG'],			'L_SKIP'				=> $lang['SKIP'],			'PAGE_TITLE'			=> $this->get_page_title(),			'T_IMAGE_PATH'			=> $phpbb_root_path . 'adm/images/',			'S_CONTENT_DIRECTION' 	=> $lang['DIRECTION'],			'S_CONTENT_FLOW_BEGIN'	=> ($lang['DIRECTION'] == 'ltr') ? 'left' : 'right',			'S_CONTENT_FLOW_END'	=> ($lang['DIRECTION'] == 'ltr') ? 'right' : 'left',			'S_CONTENT_ENCODING' 	=> 'UTF-8',			'S_USER_LANG'			=> $lang['USER_LANG'],			)		);		header('Content-type: text/html; charset=UTF-8');		header('Cache-Control: private, no-cache="set-cookie"');		header('Expires: 0');		header('Pragma: no-cache');		return;	}	/**	* Output the standard page footer	*/	function page_footer()	{		global $db, $template;		$template->display('body');		// Close our DB connection.		if (!empty($db) && is_object($db))		{			$db->sql_close();		}		if (function_exists('exit_handler'))		{			exit_handler();		}	}	/**	* Returns desired template name	*/	function get_tpl_name()	{		return $this->module->tpl_name . '.html';	}	/**	* Returns the desired page title	*/	function get_page_title()	{		global $lang;		if (!isset($this->module->page_title))		{			return '';		}		return (isset($lang[$this->module->page_title])) ? $lang[$this->module->page_title] : $this->module->page_title;	}	/**	* Generate an HTTP/1.1 header to redirect the user to another page	* This is used during the installation when we do not have a database available to call the normal redirect function	* @param string $page The page to redirect to relative to the installer root path	*/	function redirect($page)	{		// HTTP_HOST is having the correct browser url in most cases...		$server_name = (!empty($_SERVER['HTTP_HOST'])) ? strtolower($_SERVER['HTTP_HOST']) : ((!empty($_SERVER['SERVER_NAME'])) ? $_SERVER['SERVER_NAME'] : getenv('SERVER_NAME'));		$server_port = (!empty($_SERVER['SERVER_PORT'])) ? (int) $_SERVER['SERVER_PORT'] : (int) getenv('SERVER_PORT');		$secure = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? 1 : 0;		$script_name = (!empty($_SERVER['PHP_SELF'])) ? $_SERVER['PHP_SELF'] : getenv('PHP_SELF');		if (!$script_name)		{			$script_name = (!empty($_SERVER['REQUEST_URI'])) ? $_SERVER['REQUEST_URI'] : getenv('REQUEST_URI');		}		// Replace backslashes and doubled slashes (could happen on some proxy setups)		$script_name = str_replace(array('\\', '//'), '/', $script_name);		$script_path = trim(dirname($script_name));		$url = (($secure) ? 'https://' : 'http://') . $server_name;		if ($server_port && (($secure && $server_port <> 443) || (!$secure && $server_port <> 80)))		{			// HTTP HOST can carry a port number...			if (strpos($server_name, ':') === false)			{				$url .= ':' . $server_port;			}		}		$url .= $script_path . '/' . $page;		header('Location: ' . $url);		exit;	}	/**	* Generate the navigation tabs	*/	function generate_navigation()	{		global $lang, $template, $phpEx, $language;		if (is_array($this->module_ary))		{			@ksort($this->module_ary);			foreach ($this->module_ary as $cat_ary)			{				$cat = $cat_ary['name'];				$l_cat = (!empty($lang['CAT_' . $cat])) ? $lang['CAT_' . $cat] : preg_replace('#_#', ' ', $cat);				$cat = strtolower($cat);				$url = $this->module_url . "?mode=$cat&amp;language=$language";				if ($this->mode == $cat)				{					$template->assign_block_vars('t_block1', array(						'L_TITLE'		=> $l_cat,						'S_SELECTED'	=> true,						'U_TITLE'		=> $url,					));					if (is_array($this->module_ary[$this->id]['subs']))					{						$subs = $this->module_ary[$this->id]['subs'];						foreach ($subs as $option)						{							$l_option = (!empty($lang['SUB_' . $option])) ? $lang['SUB_' . $option] : preg_replace('#_#', ' ', $option);							$option = strtolower($option);							$url = $this->module_url . '?mode=' . $this->mode . "&amp;sub=$option&amp;language=$language";							$template->assign_block_vars('l_block1', array(								'L_TITLE'		=> $l_option,								'S_SELECTED'	=> ($this->sub == $option),								'U_TITLE'		=> $url,							));						}					}					if (is_array($this->module_ary[$this->id]['stages']))					{						$subs = $this->module_ary[$this->id]['stages'];						$matched = false;						foreach ($subs as $option)						{							$l_option = (!empty($lang['STAGE_' . $option])) ? $lang['STAGE_' . $option] : preg_replace('#_#', ' ', $option);							$option = strtolower($option);							$matched = ($this->sub == $option) ? true : $matched;							$template->assign_block_vars('l_block2', array(								'L_TITLE'		=> $l_option,								'S_SELECTED'	=> ($this->sub == $option),								'S_COMPLETE'	=> !$matched,							));						}					}				}				else				{					$template->assign_block_vars('t_block1', array(						'L_TITLE'		=> $l_cat,						'S_SELECTED'	=> false,						'U_TITLE'		=> $url,					));				}			}		}	}	/**	* Output an error message	* If skip is true, return and continue execution, else exit	*/	function error($error, $line, $file, $skip = false)	{		global $lang, $db, $template;		if ($skip)		{			$template->assign_block_vars('checks', array(				'S_LEGEND'	=> true,				'LEGEND'	=> $lang['INST_ERR'],			));			$template->assign_block_vars('checks', array(				'TITLE'		=> basename($file) . ' [ ' . $line . ' ]',				'RESULT'	=> '<b style="color:red">' . $error . '</b>',			));			return;		}		echo '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">';		echo '<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr">';		echo '<head>';		echo '<meta http-equiv="content-type" content="text/html; charset=utf-8" />';		echo '<title>' . $lang['INST_ERR_FATAL'] . '</title>';		echo '<link href="../adm/style/admin.css" rel="stylesheet" type="text/css" media="screen" />';		echo '</head>';		echo '<body id="errorpage">';		echo '<div id="wrap">';		echo '	<div id="page-header">';		echo '	</div>';		echo '	<div id="page-body">';		echo '		<div id="acp">';		echo '		<div class="panel">';		echo '			<span class="corners-top"><span></span></span>';		echo '			<div id="content">';		echo '				<h1>' . $lang['INST_ERR_FATAL'] . '</h1>';		echo '		<p>' . $lang['INST_ERR_FATAL'] . "</p>\n";		echo '		<p>' . basename($file) . ' [ ' . $line . " ]</p>\n";		echo '		<p><b>' . $error . "</b></p>\n";		echo '			</div>';		echo '			<span class="corners-bottom"><span></span></span>';		echo '		</div>';		echo '		</div>';		echo '	</div>';		echo '	<div id="page-footer">';		echo '		Powered by <a href="http://www.phpbb.com/">phpBB</a>&reg; Forum Software &copy; phpBB Group';		echo '	</div>';		echo '</div>';		echo '</body>';		echo '</html>';		if (!empty($db) && is_object($db))		{			$db->sql_close();		}		exit_handler();	}	/**	* Output an error message for a database related problem	* If skip is true, return and continue execution, else exit	*/	function db_error($error, $sql, $line, $file, $skip = false)	{		global $lang, $db, $template;		if ($skip)		{			$template->assign_block_vars('checks', array(				'S_LEGEND'	=> true,				'LEGEND'	=> $lang['INST_ERR_FATAL'],			));			$template->assign_block_vars('checks', array(				'TITLE'		=> basename($file) . ' [ ' . $line . ' ]',				'RESULT'	=> '<b style="color:red">' . $error . '</b><br />&#187; SQL:' . $sql,			));			return;		}		$template->set_filenames(array(			'body' => 'install_error.html')		);		$this->page_header();		$this->generate_navigation();		$template->assign_vars(array(			'MESSAGE_TITLE'		=> $lang['INST_ERR_FATAL_DB'],			'MESSAGE_TEXT'		=> '<p>' . basename($file) . ' [ ' . $line . ' ]</p><p>SQL : ' . $sql . '</p><p><b>' . $error . '</b></p>',		));		// Rollback if in transaction		if ($db->transaction)		{			$db->sql_transaction('rollback');		}		$this->page_footer();	}	/**	* Generate the relevant HTML for an input field and the associated label and explanatory text	*/	function input_field($name, $type, $value='', $options='')	{		global $lang;		$tpl_type = explode(':', $type);		$tpl = '';		switch ($tpl_type[0])		{			case 'text':			case 'password':				$size = (int) $tpl_type[1];				$maxlength = (int) $tpl_type[2];				$tpl = '<input id="' . $name . '" type="' . $tpl_type[0] . '"' . (($size) ? ' size="' . $size . '"' : '') . ' maxlength="' . (($maxlength) ? $maxlength : 255) . '" name="' . $name . '" value="' . $value . '" />';			break;			case 'textarea':				$rows = (int) $tpl_type[1];				$cols = (int) $tpl_type[2];				$tpl = '<textarea id="' . $name . '" name="' . $name . '" rows="' . $rows . '" cols="' . $cols . '">' . $value . '</textarea>';			break;			case 'radio':				$key_yes	= ($value) ? ' checked="checked" id="' . $name . '"' : '';				$key_no		= (!$value) ? ' checked="checked" id="' . $name . '"' : '';				$tpl_type_cond = explode('_', $tpl_type[1]);				$type_no = ($tpl_type_cond[0] == 'disabled' || $tpl_type_cond[0] == 'enabled') ? false : true;				$tpl_no = '<label><input type="radio" name="' . $name . '" value="0"' . $key_no . ' class="radio" /> ' . (($type_no) ? $lang['NO'] : $lang['DISABLED']) . '</label>';				$tpl_yes = '<label><input type="radio" name="' . $name . '" value="1"' . $key_yes . ' class="radio" /> ' . (($type_no) ? $lang['YES'] : $lang['ENABLED']) . '</label>';				$tpl = ($tpl_type_cond[0] == 'yes' || $tpl_type_cond[0] == 'enabled') ? $tpl_yes . '&nbsp;&nbsp;' . $tpl_no : $tpl_no . '&nbsp;&nbsp;' . $tpl_yes;			break;			case 'select':				eval('$s_options = ' . str_replace('{VALUE}', $value, $options) . ';');				$tpl = '<select id="' . $name . '" name="' . $name . '">' . $s_options . '</select>';			break;			case 'custom':				eval('$tpl = ' . str_replace('{VALUE}', $value, $options) . ';');			break;			default:			break;		}		return $tpl;	}	/**	* Generate the drop down of available language packs	*/	function inst_language_select($default = '')	{		global $phpbb_root_path, $phpEx;		$dir = @opendir($phpbb_root_path . 'language');		if (!$dir)		{			$this->error('Unable to access the language directory', __LINE__, __FILE__);		}		while ($file = readdir($dir))		{			$path = $phpbb_root_path . 'language/' . $file;			if ($file == '.' || $file == '..' || is_link($path) || is_file($path) || $file == 'CVS')			{				continue;			}			if (file_exists($path . '/iso.txt'))			{				list($displayname, $localname) = @file($path . '/iso.txt');				$lang[$localname] = $file;			}		}		closedir($dir);		@asort($lang);		@reset($lang);		$user_select = '';		foreach ($lang as $displayname => $filename)		{			$selected = (strtolower($default) == strtolower($filename)) ? ' selected="selected"' : '';			$user_select .= '<option value="' . $filename . '"' . $selected . '>' . ucwords($displayname) . '</option>';		}		return $user_select;	}}?>
<?php return array(''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9',''=>'10',''=>'20',''=>'30',''=>'40',''=>'50',''=>'60',''=>'70',''=>'80',''=>'90',''=>'100',''=>'200',''=>'300',''=>'400',''=>'500',''=>'600',''=>'700',''=>'800',''=>'900',''=>'1000',''=>'2000',''=>'3000',''=>'4000',''=>'5000',''=>'6000',''=>'7000',''=>'8000',''=>'9000',''=>'10000',''=>'20000',''=>'30000',''=>'40000',''=>'50000',''=>'60000',''=>'70000',''=>'80000',''=>'90000',''=>'1/4',''=>'1/2',''=>'1',''=>'5',''=>'50',''=>'500',''=>'5000',''=>'50000',''=>'5',''=>'10',''=>'50',''=>'100',''=>'500',''=>'1000',''=>'5000',''=>'5',''=>'10',''=>'50',''=>'100',''=>'500',''=>'1000',''=>'10000',''=>'50000',''=>'10',''=>'1',''=>'1',''=>'1',''=>'2',''=>'2',''=>'2',''=>'2',''=>'5',''=>'10',''=>'10',''=>'10',''=>'10',''=>'10',''=>'30',''=>'50',''=>'50',''=>'50',''=>'50',''=>'100',''=>'300',''=>'500',''=>'500',''=>'500',''=>'500',''=>'500',''=>'1000',''=>'5000',''=>'5',''=>'50',''=>'1/2',''=>'1/2',''=>'2/3',''=>'3/4',''=>'0',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'5',''=>'10',''=>'50',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'90',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'900',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'1',''=>'2',''=>'10',''=>'20',''=>'100',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'',''=>'0',''=>'1',''=>'2',''=>'3',''=>'4',''=>'5',''=>'6',''=>'7',''=>'8',''=>'9');
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Transfer class, wrapper for ftp/sftp/ssh* @package phpBB3*/class transfer{	var $connection;	var $host;	var $port;	var $username;	var $password;	var $timeout;	var $root_path;	var $tmp_path;	var $file_perms;	var $dir_perms;	/**	* Constructor - init some basic values	*/	function transfer()	{		global $phpbb_root_path;		$this->file_perms	= 0644;		$this->dir_perms	= 0777;		// We use the store directory as temporary path to circumvent open basedir restrictions		$this->tmp_path = $phpbb_root_path . 'store/';	}	/**	* Write file to location	*/	function write_file($destination_file = '', $contents = '')	{		global $phpbb_root_path;		$destination_file = $this->root_path . str_replace($phpbb_root_path, '', $destination_file);		// need to create a temp file and then move that temp file.		// ftp functions can only move files around and can't create.		// This means that the users will need to have access to write		// temporary files or have write access on a folder within phpBB		// like the cache folder. If the user can't do either, then		// he/she needs to use the fsock ftp method		$temp_name = tempnam($this->tmp_path, 'transfer_');		@unlink($temp_name);		$fp = @fopen($temp_name, 'w');		if (!$fp)		{			trigger_error('Unable to create temporary file ' . $temp_name, E_USER_ERROR);		}		@fwrite($fp, $contents);		@fclose($fp);		$result = $this->overwrite_file($temp_name, $destination_file);		// remove temporary file now		@unlink($temp_name);		return $result;	}	/**	* Moving file into location. If the destination file already exists it gets overwritten	*/	function overwrite_file($source_file, $destination_file)	{		/**		* @todo generally think about overwriting files in another way, by creating a temporary file and then renaming it		* @todo check for the destination file existance too		*/		$this->_delete($destination_file);		$result = $this->_put($source_file, $destination_file);		$this->_chmod($destination_file, $this->file_perms);		return $result;	}	/**	* Create directory structure	*/	function make_dir($dir)	{		global $phpbb_root_path;		$dir = str_replace($phpbb_root_path, '', $dir);		$dir = explode('/', $dir);		$dirs = '';		for ($i = 0, $total = sizeof($dir); $i < $total; $i++)		{			$result = true;			if (strpos($dir[$i], '.') === 0)			{				continue;			}			$cur_dir = $dir[$i] . '/';			if (!file_exists($phpbb_root_path . $dirs . $cur_dir))			{				// create the directory				$result = $this->_mkdir($dir[$i]);				$this->_chmod($dir[$i], $this->dir_perms);			}			$this->_chdir($this->root_path . $dirs . $dir[$i]);			$dirs .= $cur_dir;		}		$this->_chdir($this->root_path);		/**		* @todo stack result into array to make sure every path creation has been taken care of		*/		return $result;	}	/**	* Copy file from source location to destination location	*/	function copy_file($from_loc, $to_loc)	{		global $phpbb_root_path;		$from_loc = ((strpos($from_loc, $phpbb_root_path) !== 0) ? $phpbb_root_path : '') . $from_loc;		$to_loc = $this->root_path . str_replace($phpbb_root_path, '', $to_loc);		if (!file_exists($from_loc))		{			return false;		}		$result = $this->overwrite_file($from_loc, $to_loc);		return $result;	}	/**	* Remove file	*/	function delete_file($file)	{		global $phpbb_root_path;		$file = $this->root_path . str_replace($phpbb_root_path, '', $file);		return $this->_delete($file);	}	/**	* Remove directory	* @todo remove child directories?	*/	function remove_dir($dir)	{		global $phpbb_root_path;		$dir = $this->root_path . str_replace($phpbb_root_path, '', $dir);		return $this->_rmdir($dir);	}	/**	* Rename a file or folder	*/	function rename($old_handle, $new_handle)	{		global $phpbb_root_path;		$old_handle = $this->root_path . str_replace($phpbb_root_path, '', $old_handle);		return $this->_rename($old_handle, $new_handle);	}	/**	* Check if a specified file exist...	*/	function file_exists($directory, $filename)	{		global $phpbb_root_path;		$directory = $this->root_path . str_replace($phpbb_root_path, '', $directory);		$this->_chdir($directory);		$result = $this->_ls();		if ($result !== false && is_array($result))		{			return (in_array($filename, $result)) ? true : false;		}		return false;	}	/**	* Open session	*/	function open_session()	{		return $this->_init();	}	/**	* Close current session	*/	function close_session()	{		return $this->_close();	}	/**	* Determine methods able to be used	*/	function methods()	{		$methods = array();		$disabled_functions = explode(',', @ini_get('disable_functions'));		if (@extension_loaded('ftp'))		{			$methods[] = 'ftp';		}		if (!in_array('fsockopen', $disabled_functions))		{			$methods[] = 'ftp_fsock';		}		return $methods;	}}/*** FTP transfer class* @package phpBB3*/class ftp extends transfer{	/**	* Standard parameters for FTP session	*/	function ftp($host, $username, $password, $root_path, $port = 21, $timeout = 10)	{		$this->host			= $host;		$this->port			= $port;		$this->username		= $username;		$this->password		= $password;		$this->timeout		= $timeout;		// Make sure $this->root_path is layed out the same way as the $user->page['root_script_path'] value (/ at the end)		$this->root_path	= str_replace('\\', '/', $this->root_path);		if (!empty($root_path))		{			$this->root_path = (($root_path[0] != '/' ) ? '/' : '') . $root_path . ((substr($root_path, -1, 1) == '/') ? '' : '/');		}		// Init some needed values		transfer::transfer();		return;	}	/**	* Requests data	*/	function data()	{		global $user;		return array(			'host'		=> 'localhost',			'username'	=> 'anonymous',			'password'	=> '',			'root_path'	=> $user->page['root_script_path'],			'port'		=> 21,			'timeout'	=> 10		);	}	/**	* Init FTP Session	* @access private	*/	function _init()	{		// connect to the server		$this->connection = @ftp_connect($this->host, $this->port, $this->timeout);		if (!$this->connection)		{			return 'ERR_CONNECTING_SERVER';		}		// login to the server		if (!@ftp_login($this->connection, $this->username, $this->password))		{			return 'ERR_UNABLE_TO_LOGIN';		}		// attempt to turn pasv mode on		@ftp_pasv($this->connection, true);		// change to the root directory		if (!$this->_chdir($this->root_path))		{			return 'ERR_CHANGING_DIRECTORY';		}		return true;	}	/**	* Create Directory (MKDIR)	* @access private	*/	function _mkdir($dir)	{		return @ftp_mkdir($this->connection, $dir);	}	/**	* Remove directory (RMDIR)	* @access private	*/	function _rmdir($dir)	{		return @ftp_rmdir($this->connection, $dir);	}	/**	* Rename file	* @access private	*/	function _rename($old_handle, $new_handle)	{		return @ftp_rename($this->connection, $old_handle, $new_handle);	}	/**	* Change current working directory (CHDIR)	* @access private	*/	function _chdir($dir = '')	{		if ($dir && $dir !== '/')		{			if (substr($dir, -1, 1) == '/')			{				$dir = substr($dir, 0, -1);			}		}		return @ftp_chdir($this->connection, $dir);	}	/**	* change file permissions (CHMOD)	* @access private	*/	function _chmod($file, $perms)	{		if (function_exists('ftp_chmod'))		{			$err = @ftp_chmod($this->connection, $perms, $file);		}		else		{			// Unfortunatly CHMOD is not expecting an octal value...			// We need to transform the integer (which was an octal) to an octal representation (to get the int) and then pass as is. ;)			$chmod_cmd = 'CHMOD ' . base_convert($perms, 10, 8) . ' ' . $file;			$err = $this->_site($chmod_cmd);		}		return $err;	}	/**	* Upload file to location (PUT)	* @access private	*/	function _put($from_file, $to_file)	{		// get the file extension		$file_extension = strtolower(substr(strrchr($to_file, '.'), 1));		// We only use the BINARY file mode to cicumvent rewrite actions from ftp server (mostly linefeeds being replaced)		$mode = FTP_BINARY;		$to_dir = dirname($to_file);		$to_file = basename($to_file);		$this->_chdir($to_dir);		$result = @ftp_put($this->connection, $to_file, $from_file, $mode);		$this->_chdir($this->root_path);		return $result;	}	/**	* Delete file (DELETE)	* @access private	*/	function _delete($file)	{		return @ftp_delete($this->connection, $file);	}	/**	* Close ftp session (CLOSE)	* @access private	*/	function _close()	{		if (!$this->connection)		{			return false;		}		return @ftp_quit($this->connection);	}	/**	* Return current working directory (CWD)	* At the moment not used by parent class	* @access private	*/	function _cwd()	{		return @ftp_pwd($this->connection);	}	/**	* Return list of files in a given directory (LS)	* @access private	*/	function _ls($dir = './')	{		$list = @ftp_nlist($this->connection, $dir);		// See bug #46295 - Some FTP daemons don't like './'		if ($dir === './')		{			// Let's try some alternatives			$list = (empty($list)) ? @ftp_nlist($this->connection, '.') : $list;			$list = (empty($list)) ? @ftp_nlist($this->connection, '') : $list;		}		// Return on error		if ($list === false)		{			return false;		}		// Remove path if prepended		foreach ($list as $key => $item)		{			// Use same separator for item and dir			$item = str_replace('\\', '/', $item);			$dir = str_replace('\\', '/', $dir);			if (!empty($dir) && strpos($item, $dir) === 0)			{				$item = substr($item, strlen($dir));			}			$list[$key] = $item;		}		return $list;	}	/**	* FTP SITE command (ftp-only function)	* @access private	*/	function _site($command)	{		return @ftp_site($this->connection, $command);	}}/*** FTP fsock transfer class** @author wGEric* @package phpBB3*/class ftp_fsock extends transfer{	var $data_connection;	/**	* Standard parameters for FTP session	*/	function ftp_fsock($host, $username, $password, $root_path, $port = 21, $timeout = 10)	{		$this->host			= $host;		$this->port			= $port;		$this->username		= $username;		$this->password		= $password;		$this->timeout		= $timeout;		// Make sure $this->root_path is layed out the same way as the $user->page['root_script_path'] value (/ at the end)		$this->root_path	= str_replace('\\', '/', $this->root_path);		if (!empty($root_path))		{			$this->root_path = (($root_path[0] != '/' ) ? '/' : '') . $root_path . ((substr($root_path, -1, 1) == '/') ? '' : '/');		}		// Init some needed values		transfer::transfer();		return;	}	/**	* Requests data	*/	function data()	{		global $user;		return array(			'host'		=> 'localhost',			'username'	=> 'anonymous',			'password'	=> '',			'root_path'	=> $user->page['root_script_path'],			'port'		=> 21,			'timeout'	=> 10		);	}	/**	* Init FTP Session	* @access private	*/	function _init()	{		$errno = 0;		$errstr = '';		// connect to the server		$this->connection = @fsockopen($this->host, $this->port, $errno, $errstr, $this->timeout);		if (!$this->connection || !$this->_check_command())		{			return 'ERR_CONNECTING_SERVER';		}		@stream_set_timeout($this->connection, $this->timeout);		// login		if (!$this->_send_command('USER', $this->username))		{			return 'ERR_UNABLE_TO_LOGIN';		}		if (!$this->_send_command('PASS', $this->password))		{			return 'ERR_UNABLE_TO_LOGIN';		}		// change to the root directory		if (!$this->_chdir($this->root_path))		{			return 'ERR_CHANGING_DIRECTORY';		}		return true;	}	/**	* Create Directory (MKDIR)	* @access private	*/	function _mkdir($dir)	{		return $this->_send_command('MKD', $dir);	}	/**	* Remove directory (RMDIR)	* @access private	*/	function _rmdir($dir)	{		return $this->_send_command('RMD', $dir);	}	/**	* Rename File	* @access private	*/	function _rename($old_handle, $new_handle)	{		$this->_send_command('RNFR', $old_handle);		return $this->_send_command('RNTO', $new_handle);	}	/**	* Change current working directory (CHDIR)	* @access private	*/	function _chdir($dir = '')	{		if ($dir && $dir !== '/')		{			if (substr($dir, -1, 1) == '/')			{				$dir = substr($dir, 0, -1);			}		}		return $this->_send_command('CWD', $dir);	}	/**	* change file permissions (CHMOD)	* @access private	*/	function _chmod($file, $perms)	{		// Unfortunatly CHMOD is not expecting an octal value...		// We need to transform the integer (which was an octal) to an octal representation (to get the int) and then pass as is. ;)		return $this->_send_command('SITE CHMOD', base_convert($perms, 10, 8) . ' ' . $file);	}	/**	* Upload file to location (PUT)	* @access private	*/	function _put($from_file, $to_file)	{		// We only use the BINARY file mode to cicumvent rewrite actions from ftp server (mostly linefeeds being replaced)		// 'I' == BINARY		// 'A' == ASCII		if (!$this->_send_command('TYPE', 'I'))		{			return false;		}		// open the connection to send file over		if (!$this->_open_data_connection())		{			return false;		}		$this->_send_command('STOR', $to_file, false);		// send the file		$fp = @fopen($from_file, 'rb');		while (!@feof($fp))		{			@fwrite($this->data_connection, @fread($fp, 4096));		}		@fclose($fp);		// close connection		$this->_close_data_connection();		return $this->_check_command();	}	/**	* Delete file (DELETE)	* @access private	*/	function _delete($file)	{		return $this->_send_command('DELE', $file);	}	/**	* Close ftp session (CLOSE)	* @access private	*/	function _close()	{		if (!$this->connection)		{			return false;		}		return $this->_send_command('QUIT');	}	/**	* Return current working directory (CWD)	* At the moment not used by parent class	* @access private	*/	function _cwd()	{		$this->_send_command('PWD', '', false);		return preg_replace('#^[0-9]{3} "(.+)" .+\r\n#', '\\1', $this->_check_command(true));	}	/**	* Return list of files in a given directory (LS)	* @access private	*/	function _ls($dir = './')	{		if (!$this->_open_data_connection())		{			return false;		}		$this->_send_command('NLST', $dir);		$list = array();		while (!@feof($this->data_connection))		{			$filename = preg_replace('#[\r\n]#', '', @fgets($this->data_connection, 512));			if ($filename !== '')			{				$list[] = $filename;			}		}		$this->_close_data_connection();		// Clear buffer		$this->_check_command();		// See bug #46295 - Some FTP daemons don't like './'		if ($dir === './' && empty($list))		{			// Let's try some alternatives			$list = $this->_ls('.');			if (empty($list))			{				$list = $this->_ls('');			}			return $list;		}		// Remove path if prepended		foreach ($list as $key => $item)		{			// Use same separator for item and dir			$item = str_replace('\\', '/', $item);			$dir = str_replace('\\', '/', $dir);			if (!empty($dir) && strpos($item, $dir) === 0)			{				$item = substr($item, strlen($dir));			}			$list[$key] = $item;		}		return $list;	}	/**	* Send a command to server (FTP fsock only function)	* @access private	*/	function _send_command($command, $args = '', $check = true)	{		if (!empty($args))		{			$command = "$command $args";		}		fwrite($this->connection, $command . "\r\n");		if ($check === true && !$this->_check_command())		{			return false;		}		return true;	}	/**	* Opens a connection to send data (FTP fosck only function)	* @access private	*/	function _open_data_connection()	{		// Try to find out whether we have a IPv4 or IPv6 (control) connection		if (function_exists('stream_socket_get_name'))		{			$socket_name = stream_socket_get_name($this->connection, true);			$server_ip = substr($socket_name, 0, strrpos($socket_name, ':'));		}		if (!isset($server_ip) || preg_match(get_preg_expression('ipv4'), $server_ip))		{			// Passive mode			$this->_send_command('PASV', '', false);			if (!$ip_port = $this->_check_command(true))			{				return false;			}			// open the connection to start sending the file			if (!preg_match('#[0-9]{1,3},[0-9]{1,3},[0-9]{1,3},[0-9]{1,3},[0-9]+,[0-9]+#', $ip_port, $temp))			{				// bad ip and port				return false;			}			$temp = explode(',', $temp[0]);			$server_ip = $temp[0] . '.' . $temp[1] . '.' . $temp[2] . '.' . $temp[3];			$server_port = $temp[4] * 256 + $temp[5];		}		else		{			// Extended Passive Mode - RFC2428			$this->_send_command('EPSV', '', false);			if (!$epsv_response = $this->_check_command(true))			{				return false;			}			// Response looks like "229 Entering Extended Passive Mode (|||12345|)"			// where 12345 is the tcp port for the data connection			if (!preg_match('#\(\|\|\|([0-9]+)\|\)#', $epsv_response, $match))			{				return false;			}			$server_port = (int) $match[1];			// fsockopen expects IPv6 address in square brackets			$server_ip = "[$server_ip]";		}		$errno = 0;		$errstr = '';		if (!$this->data_connection = @fsockopen($server_ip, $server_port, $errno, $errstr, $this->timeout))		{			return false;		}		@stream_set_timeout($this->data_connection, $this->timeout);		return true;	}	/**	* Closes a connection used to send data	* @access private	*/	function _close_data_connection()	{		return @fclose($this->data_connection);	}	/**	* Check to make sure command was successful (FTP fsock only function)	* @access private	*/	function _check_command($return = false)	{		$response = '';		do		{			$result = @fgets($this->connection, 512);			$response .= $result;		}		while (substr($result, 3, 1) !== ' ');		if (!preg_match('#^[123]#', $response))		{			return false;		}		return ($return) ? $response : true;	}}?>
<?php/*** Only adjust bitfields, do not rewrite text...* All new parsings have the img, flash and quote modes set to true** You should make a backup from your users, posts and privmsgs table in case something goes wrong* Forum descriptions and rules need to be re-submitted manually.*/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.'.$phpEx);include($phpbb_root_path . 'includes/message_parser.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$echos = 0;// Adjust user signatures$message_parser = new parse_message();$message_parser->mode = 'sig';$message_parser->bbcode_init();$sql = 'SELECT user_id, user_sig, user_sig_bbcode_uid, user_sig_bbcode_bitfield	FROM ' . USERS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	// Convert bbcodes back to their normal form	if ($row['user_sig_bbcode_uid'] && $row['user_sig'])	{		decode_message($row['user_sig'], $row['user_sig_bbcode_uid']);		$message_parser->message = $row['user_sig'];		$message_parser->prepare_bbcodes();		$message_parser->parse_bbcode();		$bitfield = $message_parser->bbcode_bitfield;		$sql = 'UPDATE ' . USERS_TABLE . " SET user_sig_bbcode_bitfield = '" . $db->sql_escape($bitfield) . "'			WHERE user_id = " . $row['user_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}	else	{		$sql = 'UPDATE ' . USERS_TABLE . " SET user_sig_bbcode_bitfield = ''			WHERE user_id = " . $row['user_id'];		$db->sql_query($sql);	}}$db->sql_freeresult($result);// Now adjust posts$message_parser = new parse_message();$message_parser->mode = 'post';$message_parser->bbcode_init();// Update posts$sql = 'SELECT post_id, post_text, bbcode_uid, enable_bbcode, enable_smilies, enable_sig	FROM ' . POSTS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	// Convert bbcodes back to their normal form	if ($row['enable_bbcode'])	{		decode_message($row['post_text'], $row['bbcode_uid']);		$message_parser->message = $row['post_text'];		$message_parser->prepare_bbcodes();		$message_parser->parse_bbcode();		$bitfield = $message_parser->bbcode_bitfield;		$sql = 'UPDATE ' . POSTS_TABLE . " SET bbcode_bitfield = '" . $db->sql_escape($bitfield) . "'			WHERE post_id = " . $row['post_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}	else	{		$sql = 'UPDATE ' . POSTS_TABLE . " SET bbcode_bitfield = ''			WHERE post_id = " . $row['post_id'];		$db->sql_query($sql);	}}$db->sql_freeresult($result);// Now to the private messages$message_parser = new parse_message();$message_parser->mode = 'post';$message_parser->bbcode_init();// Update pms$sql = 'SELECT msg_id, message_text, bbcode_uid, enable_bbcode	FROM ' . PRIVMSGS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	// Convert bbcodes back to their normal form	if ($row['enable_bbcode'])	{		decode_message($row['message_text'], $row['bbcode_uid']);		$message_parser->message = $row['message_text'];		$message_parser->prepare_bbcodes();		$message_parser->parse_bbcode();		$bitfield = $message_parser->bbcode_bitfield;		$sql = 'UPDATE ' . PRIVMSGS_TABLE . " SET bbcode_bitfield = '" . $db->sql_escape($bitfield) . "'			WHERE msg_id = " . $row['msg_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}	else	{		$sql = 'UPDATE ' . PRIVMSGS_TABLE . " SET bbcode_bitfield = ''			WHERE msg_id = " . $row['msg_id'];		$db->sql_query($sql);	}}$db->sql_freeresult($result);// Done$db->sql_close();?>
<?php/**** @package acp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class acp_forums_info{	function module()	{		return array(			'filename'	=> 'acp_forums',			'title'		=> 'ACP_FORUM_MANAGEMENT',			'version'	=> '1.0.0',			'modes'		=> array(				'manage'	=> array('title' => 'ACP_MANAGE_FORUMS', 'auth' => 'acl_a_forum', 'cat' => array('ACP_MANAGE_FORUMS')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/*** Adds class="postlink" to magic urls** You should make a backup from your users, posts and privmsgs table in case something goes wrong* Forum descriptions and rules need to be re-submitted manually.*/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.'.$phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$echos = 0;$replace = array(	'<!-- l --><a href="',	'<!-- m --><a href="',	'<!-- w --><a href="',);$with = array(	'<!-- l --><a class="postlink-local" href="',	'<!-- m --><a class="postlink" href="',	'<!-- w --><a class="postlink" href="',);// Adjust user signatures$sql = 'SELECT user_id, user_sig	FROM ' . USERS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$new_content = str_replace($replace, $with, $row['user_sig']);	if ($new_content != $row['user_sig'])	{		$sql = 'UPDATE ' . USERS_TABLE . " SET user_sig = '" . $db->sql_escape($new_content) . "'			WHERE user_id = " . $row['user_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Now adjust posts$sql = 'SELECT post_id, post_text	FROM ' . POSTS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$new_content = str_replace($replace, $with, $row['post_text']);	if ($row['post_text'] != $new_content)	{		$sql = 'UPDATE ' . POSTS_TABLE . " SET post_text = '" . $db->sql_escape($new_content) . "'			WHERE post_id = " . $row['post_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Now to the private messages$sql = 'SELECT msg_id, message_text	FROM ' . PRIVMSGS_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$new_content = str_replace($replace, $with, $row['message_text']);	if ($row['message_text'] != $new_content)	{		$sql = 'UPDATE ' . PRIVMSGS_TABLE . " SET bbcode_bitfield = '" . $db->sql_escape($new_content) . "'			WHERE msg_id = " . $row['msg_id'];		$db->sql_query($sql);		if ($echos > 200)		{			echo '<br />' . "\n";			$echos = 0;		}		echo '.';		$echos++;		flush();	}}$db->sql_freeresult($result);// Done$db->sql_close();?>
<?php/**** acp_profile [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine// Custom profile fields$lang = array_merge($lang, array(	'ADDED_PROFILE_FIELD'	=> 'Successfully added custom profile field.',	'ALPHA_ONLY'			=> 'Alphanumeric only',	'ALPHA_SPACERS'			=> 'Alphanumeric and spacers',	'ALWAYS_TODAY'			=> 'Always the current date',	'BOOL_ENTRIES_EXPLAIN'	=> 'Enter your options now',	'BOOL_TYPE_EXPLAIN'		=> 'Define the type, either a checkbox or radio buttons. A checkbox will only be displayed if it is checked for a given user. In that case the <strong>second</strong> language option will be used. Radio buttons will display regardless of their value.',	'CHANGED_PROFILE_FIELD'		=> 'Successfully changed profile field.',	'CHARS_ANY'					=> 'Any character',	'CHECKBOX'					=> 'Checkbox',	'COLUMNS'					=> 'Columns',	'CP_LANG_DEFAULT_VALUE'		=> 'Default value',	'CP_LANG_EXPLAIN'			=> 'Field description',	'CP_LANG_EXPLAIN_EXPLAIN'	=> 'The explanation for this field presented to the user.',	'CP_LANG_NAME'				=> 'Field name/title presented to the user',	'CP_LANG_OPTIONS'			=> 'Options',	'CREATE_NEW_FIELD'			=> 'Create new field',	'CUSTOM_FIELDS_NOT_TRANSLATED'	=> 'At least one custom profile field has not yet been translated. Please enter the required information by clicking on the Translate link.',	'DEFAULT_ISO_LANGUAGE'			=> 'Default language [%s]',	'DEFAULT_LANGUAGE_NOT_FILLED'	=> 'The language entries for the default language are not filled for this profile field.',	'DEFAULT_VALUE'					=> 'Default value',	'DELETE_PROFILE_FIELD'			=> 'Remove profile field',	'DELETE_PROFILE_FIELD_CONFIRM'	=> 'Are you sure you want to delete this profile field?',	'DISPLAY_AT_PROFILE'			=> 'Display in user control panel',	'DISPLAY_AT_PROFILE_EXPLAIN'	=> 'The user is able to change this profile field within the user control panel.',	'DISPLAY_AT_REGISTER'			=> 'Display on registration screen',	'DISPLAY_AT_REGISTER_EXPLAIN'	=> 'If this option is enabled, the field will be displayed on registration.',	'DISPLAY_ON_VT'					=> 'Display on viewtopic screen',	'DISPLAY_ON_VT_EXPLAIN'			=> 'If this option is enabled, the field will be displayed in the mini-profile on the topic screen.',	'DISPLAY_PROFILE_FIELD'			=> 'Publicly display profile field',	'DISPLAY_PROFILE_FIELD_EXPLAIN'	=> 'The profile field will be shown in all locations allowed within the load settings. Setting this to no will hide the field from topic pages, profiles and the memberlist.',	'DROPDOWN_ENTRIES_EXPLAIN'		=> 'Enter your options now, every option in one line.',	'EDIT_DROPDOWN_LANG_EXPLAIN'	=> 'Please note that you are able to change your options text and also able to add new options to the end. It is not advised to add new options between existing options - this could result in wrong options assigned to your users. This can also happen if you remove options in-between. Removing options from the end result in users having assigned this item now reverting back to the default one.',	'EMPTY_FIELD_IDENT'				=> 'Empty field identification',	'EMPTY_USER_FIELD_NAME'			=> 'Please enter a field name/title',	'ENTRIES'						=> 'Entries',	'EVERYTHING_OK'					=> 'Everything OK',	'FIELD_BOOL'				=> 'Boolean (Yes/No)',	'FIELD_DATE'				=> 'Date',	'FIELD_DESCRIPTION'			=> 'Field description',	'FIELD_DESCRIPTION_EXPLAIN'	=> 'The explanation for this field presented to the user.',	'FIELD_DROPDOWN'			=> 'Dropdown box',	'FIELD_IDENT'				=> 'Field identification',	'FIELD_IDENT_ALREADY_EXIST'	=> 'The chosen field identification already exist. Please choose another name.',	'FIELD_IDENT_EXPLAIN'		=> 'The field identification is a name to identify the profile field within the database and the templates.',	'FIELD_INT'					=> 'Numbers',	'FIELD_LENGTH'				=> 'Length of input box',	'FIELD_NOT_FOUND'			=> 'Profile field not found.',	'FIELD_STRING'				=> 'Single text field',	'FIELD_TEXT'				=> 'Textarea',	'FIELD_TYPE'				=> 'Field type',	'FIELD_TYPE_EXPLAIN'		=> 'You are not able to change the field type later.',	'FIELD_VALIDATION'			=> 'Field validation',	'FIRST_OPTION'				=> 'First option',	'HIDE_PROFILE_FIELD'			=> 'Hide profile field',	'HIDE_PROFILE_FIELD_EXPLAIN'	=> 'Hide the profile field from all other users except the user, administrators and moderators who are still able to see this field. If the Display in user control panel option is disabled, the user will not be able to see or change this field and the field can only be changed by administrators.',	'INVALID_CHARS_FIELD_IDENT'	=> 'Field identification can only contain lowercase a-z and _',	'INVALID_FIELD_IDENT_LEN'	=> 'Field identification can only be 17 characters long',	'ISO_LANGUAGE'				=> 'Language [%s]',	'LANG_SPECIFIC_OPTIONS'		=> 'Language specific options [<strong>%s</strong>]',	'MAX_FIELD_CHARS'		=> 'Maximum number of characters',	'MAX_FIELD_NUMBER'		=> 'Highest allowed number',	'MIN_FIELD_CHARS'		=> 'Minimum number of characters',	'MIN_FIELD_NUMBER'		=> 'Lowest allowed number',	'NO_FIELD_ENTRIES'			=> 'No entries defined',	'NO_FIELD_ID'				=> 'No field id specified.',	'NO_FIELD_TYPE'				=> 'No Field type specified.',	'NO_VALUE_OPTION'			=> 'Option equal to non entered value',	'NO_VALUE_OPTION_EXPLAIN'	=> 'Value for a non-entry. If the field is required, the user gets an error if he choose the option selected here.',	'NUMBERS_ONLY'				=> 'Only numbers (0-9)',	'PROFILE_BASIC_OPTIONS'		=> 'Basic options',	'PROFILE_FIELD_ACTIVATED'	=> 'Profile field successfully activated.',	'PROFILE_FIELD_DEACTIVATED'	=> 'Profile field successfully deactivated.',	'PROFILE_LANG_OPTIONS'		=> 'Language specific options',	'PROFILE_TYPE_OPTIONS'		=> 'Profile type specific options',	'RADIO_BUTTONS'				=> 'Radio buttons',	'REMOVED_PROFILE_FIELD'		=> 'Successfully removed profile field.',	'REQUIRED_FIELD'			=> 'Required field',	'REQUIRED_FIELD_EXPLAIN'	=> 'Force profile field to be filled out or specified by user or administrator. If display at registration screen option is disabled, the field will only be required when the user edits their profile.',	'ROWS'						=> 'Rows',	'SAVE'							=> 'Save',	'SECOND_OPTION'					=> 'Second option',	'STEP_1_EXPLAIN_CREATE'			=> 'Here you can enter the first basic parameters of your new profile field. This information is needed for the second step where youll be able to set remaining options and tweak your profile field further.',	'STEP_1_EXPLAIN_EDIT'			=> 'Here you can change the basic parameters of your profile field. The relevant options are re-calculated within the second step.',	'STEP_1_TITLE_CREATE'			=> 'Add profile field',	'STEP_1_TITLE_EDIT'				=> 'Edit profile field',	'STEP_2_EXPLAIN_CREATE'			=> 'Here you are able to define some common options you may want to adjust.',	'STEP_2_EXPLAIN_EDIT'			=> 'Here you are able to change some common options.<br /><strong>Please note that changes to profile fields will not affect existing profile fields entered by your users.</strong>',	'STEP_2_TITLE_CREATE'			=> 'Profile type specific options',	'STEP_2_TITLE_EDIT'				=> 'Profile type specific options',	'STEP_3_EXPLAIN_CREATE'			=> 'Since you have more than one board language installed, you have to fill out the remaining language items too. The profile field will work with the default language enabled, you are able to fill out the remaining language items later too.',	'STEP_3_EXPLAIN_EDIT'			=> 'Since you have more than one board language installed, you now can change or add the remaining language items too. The profile field will work with the default language enabled.',	'STEP_3_TITLE_CREATE'			=> 'Remaining language definitions',	'STEP_3_TITLE_EDIT'				=> 'Language definitions',	'STRING_DEFAULT_VALUE_EXPLAIN'	=> 'Enter a default phrase to be displayed, a default value. Leave empty if you want to show it empty at the first place.',	'TEXT_DEFAULT_VALUE_EXPLAIN'	=> 'Enter a default text to be displayed, a default value. Leave empty if you want to show it empty at the first place.',	'TRANSLATE'						=> 'Translate',	'USER_FIELD_NAME'	=> 'Field name/title presented to the user',	'VISIBILITY_OPTION'				=> 'Visibility options',));?>
<?php/*** Corrects avatar filenames to match the new avatar delivery method.** You should make a backup from your users table and the avatar directory in case something goes wrong*/die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.'.$phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup();$echos = 0; if (!isset($config['avatar_salt'])){	$cache->purge();	if (!isset($config['avatar_salt']))	{		die('database not up to date');	}	die('database not up to date');}// let's start with the users using a group_avatar.$sql = 'SELECT group_id, group_avatar	FROM ' . GROUPS_TABLE . '	WHERE group_avatar_type = ' . AVATAR_UPLOAD;// We'll skip these, so remember them$group_avatars = array();echo '<br /> Updating groups' . "\n";$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$new_avatar_name = adjust_avatar($row['group_avatar'], 'g' . $row['group_id']);	$group_avatars[] = $new_avatar_name;		// failure is probably due to the avatar name already being adjusted	if ($new_avatar_name !== false)	{		$sql = 'UPDATE ' . USERS_TABLE . "			SET user_avatar = '" . $db->sql_escape($new_avatar_name) . "'			WHERE user_avatar = '" . $db->sql_escape($row['group_avatar']) . "' 			AND user_avatar_type = " . AVATAR_UPLOAD;		$db->sql_query($sql);				$sql = 'UPDATE ' . GROUPS_TABLE . "			SET group_avatar = '" . $db->sql_escape($new_avatar_name) . "'			WHERE group_id = {$row['group_id']}";		$db->sql_query($sql);	}	else	{		echo '<br /> Failed updating group ' . $row['group_id'] . "\n";	}	if ($echos > 200)	{		echo '<br />' . "\n";		$echos = 0;	}	echo '.';	$echos++;	flush();}$db->sql_freeresult($result);$sql = 'SELECT user_id, username, user_avatar, user_avatar_type	FROM ' . USERS_TABLE . ' 	WHERE user_avatar_type = ' . AVATAR_UPLOAD . ' 	AND ' . $db->sql_in_set('user_avatar', $group_avatars, true, true);$result = $db->sql_query($sql);echo '<br /> Updating users' . "\n";while ($row = $db->sql_fetchrow($result)){	$new_avatar_name = adjust_avatar($row['user_avatar'], $row['user_id']);	// failure is probably due to the avatar name already being adjusted	if ($new_avatar_name !== false)	{		$sql = 'UPDATE ' . USERS_TABLE . "			SET user_avatar = '" . $db->sql_escape($new_avatar_name) . "'			WHERE user_id = {$row['user_id']}";		$db->sql_query($sql);	}	else	{		// nuke this avatar		$sql = 'UPDATE ' . USERS_TABLE . "			SET user_avatar = '', user_avatar_type = 0			WHERE user_id = {$row['user_id']}";		$db->sql_query($sql);		echo '<br /> Failed updating user ' . $row['user_id'] . "\n";	}		if ($echos > 200)	{		echo '<br />' . "\n";		$echos = 0;	}	echo '.';	$echos++;	flush();}$db->sql_freeresult($result);echo 'FINISHED';// Done$db->sql_close();function adjust_avatar($old_name, $midfix){	global $config, $phpbb_root_path;		$avatar_path = $phpbb_root_path . $config['avatar_path'];	$extension = strtolower(substr(strrchr($old_name, '.'), 1));	$new_name = $config['avatar_salt'] . '_' . $midfix . '.' . $extension;	if (@file_exists($avatar_path . '/' . $old_name) && @is_writable($avatar_path . '/' . $old_name) && @is_writable($avatar_path . '/' . $new_name))	{		@rename($avatar_path . '/' . $old_name, $avatar_path . '/' . $new_name);		return $midfix . '.' . $extension;	}	return false;}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);// Thank you sun.if (isset($_SERVER['CONTENT_TYPE'])){	if ($_SERVER['CONTENT_TYPE'] === 'application/x-java-archive')	{		exit;	}}else if (isset($_SERVER['HTTP_USER_AGENT']) && strpos($_SERVER['HTTP_USER_AGENT'], 'Java') !== false){	exit;}if (isset($_GET['avatar'])){	require($phpbb_root_path . 'includes/startup.' . $phpEx);	require($phpbb_root_path . 'config.' . $phpEx);	if (!defined('PHPBB_INSTALLED') || empty($dbms) || empty($acm_type))	{		exit;	}	require($phpbb_root_path . 'includes/acm/acm_' . $acm_type . '.' . $phpEx);	require($phpbb_root_path . 'includes/cache.' . $phpEx);	require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);	require($phpbb_root_path . 'includes/constants.' . $phpEx);	require($phpbb_root_path . 'includes/functions.' . $phpEx);	$db = new $sql_db();	$cache = new cache();	// Connect to DB	if (!@$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, false))	{		exit;	}	unset($dbpasswd);	// worst-case default	$browser = (!empty($_SERVER['HTTP_USER_AGENT'])) ? htmlspecialchars((string) $_SERVER['HTTP_USER_AGENT']) : 'msie 6.0';	$config = $cache->obtain_config();	$filename = request_var('avatar', '');	$avatar_group = false;	$exit = false;	if (isset($filename[0]) && $filename[0] === 'g')	{		$avatar_group = true;		$filename = substr($filename, 1);	}	// '==' is not a bug - . as the first char is as bad as no dot at all	if (strpos($filename, '.') == false)	{		send_status_line(403, 'Forbidden');		$exit = true;	}	if (!$exit)	{		$ext		= substr(strrchr($filename, '.'), 1);		$stamp		= (int) substr(stristr($filename, '_'), 1);		$filename	= (int) $filename;		$exit = set_modified_headers($stamp, $browser);	}	if (!$exit && !in_array($ext, array('png', 'gif', 'jpg', 'jpeg')))	{		// no way such an avatar could exist. They are not following the rules, stop the show.		send_status_line(403, 'Forbidden');		$exit = true;	}	if (!$exit)	{		if (!$filename)		{			// no way such an avatar could exist. They are not following the rules, stop the show.			send_status_line(403, 'Forbidden');		}		else		{			send_avatar_to_browser(($avatar_group ? 'g' : '') . $filename . '.' . $ext, $browser);		}	}	file_gc();}// implicit else: we are not in avatar modeinclude($phpbb_root_path . 'common.' . $phpEx);$download_id = request_var('id', 0);$mode = request_var('mode', '');$thumbnail = request_var('t', false);// Start session management, do not update session page.$user->session_begin(false);$auth->acl($user->data);$user->setup('viewtopic');if (!$download_id){	send_status_line(404, 'Not Found');	trigger_error('NO_ATTACHMENT_SELECTED');}if (!$config['allow_attachments'] && !$config['allow_pm_attach']){	send_status_line(404, 'Not Found');	trigger_error('ATTACHMENT_FUNCTIONALITY_DISABLED');}$sql = 'SELECT attach_id, in_message, post_msg_id, extension, is_orphan, poster_id, filetime	FROM ' . ATTACHMENTS_TABLE . "	WHERE attach_id = $download_id";$result = $db->sql_query_limit($sql, 1);$attachment = $db->sql_fetchrow($result);$db->sql_freeresult($result);if (!$attachment){	send_status_line(404, 'Not Found');	trigger_error('ERROR_NO_ATTACHMENT');}if ((!$attachment['in_message'] && !$config['allow_attachments']) || ($attachment['in_message'] && !$config['allow_pm_attach'])){	send_status_line(404, 'Not Found');	trigger_error('ATTACHMENT_FUNCTIONALITY_DISABLED');}$row = array();if ($attachment['is_orphan']){	// We allow admins having attachment permissions to see orphan attachments...	$own_attachment = ($auth->acl_get('a_attach') || $attachment['poster_id'] == $user->data['user_id']) ? true : false;	if (!$own_attachment || ($attachment['in_message'] && !$auth->acl_get('u_pm_download')) || (!$attachment['in_message'] && !$auth->acl_get('u_download')))	{		send_status_line(404, 'Not Found');		trigger_error('ERROR_NO_ATTACHMENT');	}	// Obtain all extensions...	$extensions = $cache->obtain_attach_extensions(true);}else{	if (!$attachment['in_message'])	{		//		$sql = 'SELECT p.forum_id, f.forum_password, f.parent_id			FROM ' . POSTS_TABLE . ' p, ' . FORUMS_TABLE . ' f			WHERE p.post_id = ' . $attachment['post_msg_id'] . '				AND p.forum_id = f.forum_id';		$result = $db->sql_query_limit($sql, 1);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		// Global announcement?		$f_download = (!$row) ? $auth->acl_getf_global('f_download') : $auth->acl_get('f_download', $row['forum_id']);		if ($auth->acl_get('u_download') && $f_download)		{			if ($row && $row['forum_password'])			{				// Do something else ... ?				login_forum_box($row);			}		}		else		{			send_status_line(403, 'Forbidden');			trigger_error('SORRY_AUTH_VIEW_ATTACH');		}	}	else	{		$row['forum_id'] = false;		if (!$auth->acl_get('u_pm_download'))		{			send_status_line(403, 'Forbidden');			trigger_error('SORRY_AUTH_VIEW_ATTACH');		}		// Check if the attachment is within the users scope...		$sql = 'SELECT user_id, author_id			FROM ' . PRIVMSGS_TO_TABLE . '			WHERE msg_id = ' . $attachment['post_msg_id'];		$result = $db->sql_query($sql);		$allowed = false;		while ($user_row = $db->sql_fetchrow($result))		{			if ($user->data['user_id'] == $user_row['user_id'] || $user->data['user_id'] == $user_row['author_id'])			{				$allowed = true;				break;			}		}		$db->sql_freeresult($result);		if (!$allowed)		{			send_status_line(403, 'Forbidden');			trigger_error('ERROR_NO_ATTACHMENT');		}	}	// disallowed?	$extensions = array();	if (!extension_allowed($row['forum_id'], $attachment['extension'], $extensions))	{		send_status_line(404, 'Forbidden');		trigger_error(sprintf($user->lang['EXTENSION_DISABLED_AFTER_POSTING'], $attachment['extension']));	}}if (!download_allowed()){	send_status_line(403, 'Forbidden');	trigger_error($user->lang['LINKAGE_FORBIDDEN']);}$download_mode = (int) $extensions[$attachment['extension']]['download_mode'];// Fetching filename here to prevent sniffing of filename$sql = 'SELECT attach_id, is_orphan, in_message, post_msg_id, extension, physical_filename, real_filename, mimetype, filetime	FROM ' . ATTACHMENTS_TABLE . "	WHERE attach_id = $download_id";$result = $db->sql_query_limit($sql, 1);$attachment = $db->sql_fetchrow($result);$db->sql_freeresult($result);if (!$attachment){	send_status_line(404, 'Not Found');	trigger_error('ERROR_NO_ATTACHMENT');}$attachment['physical_filename'] = utf8_basename($attachment['physical_filename']);$display_cat = $extensions[$attachment['extension']]['display_cat'];if (($display_cat == ATTACHMENT_CATEGORY_IMAGE || $display_cat == ATTACHMENT_CATEGORY_THUMB) && !$user->optionget('viewimg')){	$display_cat = ATTACHMENT_CATEGORY_NONE;}if ($display_cat == ATTACHMENT_CATEGORY_FLASH && !$user->optionget('viewflash')){	$display_cat = ATTACHMENT_CATEGORY_NONE;}if ($thumbnail){	$attachment['physical_filename'] = 'thumb_' . $attachment['physical_filename'];}else if (($display_cat == ATTACHMENT_CATEGORY_NONE/* || $display_cat == ATTACHMENT_CATEGORY_IMAGE*/) && !$attachment['is_orphan']){	// Update download count	$sql = 'UPDATE ' . ATTACHMENTS_TABLE . '		SET download_count = download_count + 1		WHERE attach_id = ' . $attachment['attach_id'];	$db->sql_query($sql);}if ($display_cat == ATTACHMENT_CATEGORY_IMAGE && $mode === 'view' && (strpos($attachment['mimetype'], 'image') === 0) && ((strpos(strtolower($user->browser), 'msie') !== false) && (strpos(strtolower($user->browser), 'msie 8.0') === false))){	wrap_img_in_html(append_sid($phpbb_root_path . 'download/file.' . $phpEx, 'id=' . $attachment['attach_id']), $attachment['real_filename']);	file_gc();}else{	// Determine the 'presenting'-method	if ($download_mode == PHYSICAL_LINK)	{		// This presenting method should no longer be used		if (!@is_dir($phpbb_root_path . $config['upload_path']))		{			send_status_line(500, 'Internal Server Error');			trigger_error($user->lang['PHYSICAL_DOWNLOAD_NOT_POSSIBLE']);		}		redirect($phpbb_root_path . $config['upload_path'] . '/' . $attachment['physical_filename']);		file_gc();	}	else	{		send_file_to_browser($attachment, $config['upload_path'], $display_cat);		file_gc();	}}/*** A simplified function to deliver avatars* The argument needs to be checked before calling this function.*/function send_avatar_to_browser($file, $browser){	global $config, $phpbb_root_path;	$prefix = $config['avatar_salt'] . '_';	$image_dir = $config['avatar_path'];	// Adjust image_dir path (no trailing slash)	if (substr($image_dir, -1, 1) == '/' || substr($image_dir, -1, 1) == '\\')	{		$image_dir = substr($image_dir, 0, -1) . '/';	}	$image_dir = str_replace(array('../', '..\\', './', '.\\'), '', $image_dir);	if ($image_dir && ($image_dir[0] == '/' || $image_dir[0] == '\\'))	{		$image_dir = '';	}	$file_path = $phpbb_root_path . $image_dir . '/' . $prefix . $file;	if ((@file_exists($file_path) && @is_readable($file_path)) && !headers_sent())	{		header('Pragma: public');		$image_data = @getimagesize($file_path);		header('Content-Type: ' . image_type_to_mime_type($image_data[2]));		if (strpos(strtolower($browser), 'msie') !== false && strpos(strtolower($browser), 'msie 8.0') === false)		{			header('Content-Disposition: attachment; ' . header_filename($file));			if (strpos(strtolower($browser), 'msie 6.0') !== false)			{				header('Expires: -1');			}			else			{				header('Expires: ' . gmdate('D, d M Y H:i:s \G\M\T', time() + 31536000));			}		}		else		{			header('Content-Disposition: inline; ' . header_filename($file));			header('Expires: ' . gmdate('D, d M Y H:i:s \G\M\T', time() + 31536000));		}		$size = @filesize($file_path);		if ($size)		{			header("Content-Length: $size");		}		if (@readfile($file_path) == false)		{			$fp = @fopen($file_path, 'rb');			if ($fp !== false)			{				while (!feof($fp))				{					echo fread($fp, 8192);				}				fclose($fp);			}		}		flush();	}	else	{		send_status_line(404, 'Not Found');	}}/*** Wraps an url into a simple html page. Used to display attachments in IE.* this is a workaround for now; might be moved to template system later* direct any complaints to 1 Microsoft Way, Redmond*/function wrap_img_in_html($src, $title){	echo '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-Strict.dtd">';	echo '<html>';	echo '<head>';	echo '<meta http-equiv="content-type" content="text/html; charset=UTF-8" />';	echo '<title>' . $title . '</title>';	echo '</head>';	echo '<body>';	echo '<div>';	echo '<img src="' . $src . '" alt="' . $title . '" />';	echo '</div>';	echo '</body>';	echo '</html>';}/*** Send file to browser*/function send_file_to_browser($attachment, $upload_dir, $category){	global $user, $db, $config, $phpbb_root_path;	$filename = $phpbb_root_path . $upload_dir . '/' . $attachment['physical_filename'];	if (!@file_exists($filename))	{		send_status_line(404, 'Not Found');		trigger_error($user->lang['ERROR_NO_ATTACHMENT'] . '<br /><br />' . sprintf($user->lang['FILE_NOT_FOUND_404'], $filename));	}	// Correct the mime type - we force application/octetstream for all files, except images	// Please do not change this, it is a security precaution	if ($category != ATTACHMENT_CATEGORY_IMAGE || strpos($attachment['mimetype'], 'image') !== 0)	{		$attachment['mimetype'] = (strpos(strtolower($user->browser), 'msie') !== false || strpos(strtolower($user->browser), 'opera') !== false) ? 'application/octetstream' : 'application/octet-stream';	}	if (@ob_get_length())	{		@ob_end_clean();	}	// Now send the File Contents to the Browser	$size = @filesize($filename);	// To correctly display further errors we need to make sure we are using the correct headers for both (unsetting content-length may not work)	// Check if headers already sent or not able to get the file contents.	if (headers_sent() || !@file_exists($filename) || !@is_readable($filename))	{		// PHP track_errors setting On?		if (!empty($php_errormsg))		{			send_status_line(500, 'Internal Server Error');			trigger_error($user->lang['UNABLE_TO_DELIVER_FILE'] . '<br />' . sprintf($user->lang['TRACKED_PHP_ERROR'], $php_errormsg));		}		send_status_line(500, 'Internal Server Error');		trigger_error('UNABLE_TO_DELIVER_FILE');	}	// Now the tricky part... let's dance	header('Pragma: public');	/**	* Commented out X-Sendfile support. To not expose the physical filename within the header if xsendfile is absent we need to look into methods of checking it's status.	*	* Try X-Sendfile since it is much more server friendly - only works if the path is *not* outside of the root path...	* lighttpd has core support for it. An apache2 module is available at http://celebnamer.celebworld.ws/stuff/mod_xsendfile/	*	* Not really ideal, but should work fine...	* <code>	*	if (strpos($upload_dir, '/') !== 0 && strpos($upload_dir, '../') === false)	*	{	*		header('X-Sendfile: ' . $filename);	*	}	* </code>	*/	// Send out the Headers. Do not set Content-Disposition to inline please, it is a security measure for users using the Internet Explorer.	$is_ie8 = (strpos(strtolower($user->browser), 'msie 8.0') !== false);	header('Content-Type: ' . $attachment['mimetype']);	if ($is_ie8)	{		header('X-Content-Type-Options: nosniff');	}	if ($category == ATTACHMENT_CATEGORY_FLASH && request_var('view', 0) === 1)	{		// We use content-disposition: inline for flash files and view=1 to let it correctly play with flash player 10 - any other disposition will fail to play inline		header('Content-Disposition: inline');	}	else	{		if (empty($user->browser) || (!$is_ie8 && (strpos(strtolower($user->browser), 'msie') !== false)))		{			header('Content-Disposition: attachment; ' . header_filename(htmlspecialchars_decode($attachment['real_filename'])));			if (empty($user->browser) || (strpos(strtolower($user->browser), 'msie 6.0') !== false))			{				header('expires: -1');			}		}		else		{			header('Content-Disposition: ' . ((strpos($attachment['mimetype'], 'image') === 0) ? 'inline' : 'attachment') . '; ' . header_filename(htmlspecialchars_decode($attachment['real_filename'])));			if ($is_ie8 && (strpos($attachment['mimetype'], 'image') !== 0))			{				header('X-Download-Options: noopen');			}		}	}	if ($size)	{		header("Content-Length: $size");	}	// Close the db connection before sending the file	$db->sql_close();	if (!set_modified_headers($attachment['filetime'], $user->browser))	{		// Try to deliver in chunks		@set_time_limit(0);		$fp = @fopen($filename, 'rb');		if ($fp !== false)		{			while (!feof($fp))			{				echo fread($fp, 8192);			}			fclose($fp);		}		else		{			@readfile($filename);		}		flush();	}	file_gc();}/*** Get a browser friendly UTF-8 encoded filename*/function header_filename($file){	$user_agent = (!empty($_SERVER['HTTP_USER_AGENT'])) ? htmlspecialchars((string) $_SERVER['HTTP_USER_AGENT']) : '';	// There be dragons here.	// Not many follows the RFC...	if (strpos($user_agent, 'MSIE') !== false || strpos($user_agent, 'Safari') !== false || strpos($user_agent, 'Konqueror') !== false)	{		return "filename=" . rawurlencode($file);	}	// follow the RFC for extended filename for the rest	return "filename*=UTF-8''" . rawurlencode($file);}/*** Check if downloading item is allowed*/function download_allowed(){	global $config, $user, $db;	if (!$config['secure_downloads'])	{		return true;	}	$url = (!empty($_SERVER['HTTP_REFERER'])) ? trim($_SERVER['HTTP_REFERER']) : trim(getenv('HTTP_REFERER'));	if (!$url)	{		return ($config['secure_allow_empty_referer']) ? true : false;	}	// Split URL into domain and script part	$url = @parse_url($url);	if ($url === false)	{		return ($config['secure_allow_empty_referer']) ? true : false;	}	$hostname = $url['host'];	unset($url);	$allowed = ($config['secure_allow_deny']) ? false : true;	$iplist = array();	if (($ip_ary = @gethostbynamel($hostname)) !== false)	{		foreach ($ip_ary as $ip)		{			if ($ip)			{				$iplist[] = $ip;			}		}	}	// Check for own server...	$server_name = $user->host;	// Forcing server vars is the only way to specify/override the protocol	if ($config['force_server_vars'] || !$server_name)	{		$server_name = $config['server_name'];	}	if (preg_match('#^.*?' . preg_quote($server_name, '#') . '.*?$#i', $hostname))	{		$allowed = true;	}	// Get IP's and Hostnames	if (!$allowed)	{		$sql = 'SELECT site_ip, site_hostname, ip_exclude			FROM ' . SITELIST_TABLE;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$site_ip = trim($row['site_ip']);			$site_hostname = trim($row['site_hostname']);			if ($site_ip)			{				foreach ($iplist as $ip)				{					if (preg_match('#^' . str_replace('\*', '.*?', preg_quote($site_ip, '#')) . '$#i', $ip))					{						if ($row['ip_exclude'])						{							$allowed = ($config['secure_allow_deny']) ? false : true;							break 2;						}						else						{							$allowed = ($config['secure_allow_deny']) ? true : false;						}					}				}			}			if ($site_hostname)			{				if (preg_match('#^' . str_replace('\*', '.*?', preg_quote($site_hostname, '#')) . '$#i', $hostname))				{					if ($row['ip_exclude'])					{						$allowed = ($config['secure_allow_deny']) ? false : true;						break;					}					else					{						$allowed = ($config['secure_allow_deny']) ? true : false;					}				}			}		}		$db->sql_freeresult($result);	}	return $allowed;}/*** Check if the browser has the file already and set the appropriate headers-* @returns false if a resend is in order.*/function set_modified_headers($stamp, $browser){	// let's see if we have to send the file at all	$last_load 	=  isset($_SERVER['HTTP_IF_MODIFIED_SINCE']) ? strtotime(trim($_SERVER['HTTP_IF_MODIFIED_SINCE'])) : false;	if ((strpos(strtolower($browser), 'msie 6.0') === false) && (strpos(strtolower($browser), 'msie 8.0') === false))	{		if ($last_load !== false && $last_load >= $stamp)		{			send_status_line(304, 'Not Modified');			// seems that we need those too ... browsers			header('Pragma: public');			header('Expires: ' . gmdate('D, d M Y H:i:s \G\M\T', time() + 31536000));			return true;		}		else		{			header('Last-Modified: ' . gmdate('D, d M Y H:i:s', $stamp) . ' GMT');		}	}	return false;}function file_gc(){	global $cache, $db;	if (!empty($cache))	{		$cache->unload();	}	$db->sql_close();	exit;}?>
<?php/**** @package mcp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @package module_install*/class mcp_ban_info{	function module()	{		return array(			'filename'	=> 'mcp_ban',			'title'		=> 'MCP_BAN',			'version'	=> '1.0.0',			'modes'		=> array(				'user'		=> array('title' => 'MCP_BAN_USERNAMES', 'auth' => 'acl_m_ban', 'cat' => array('MCP_BAN')),				'ip'		=> array('title' => 'MCP_BAN_IPS', 'auth' => 'acl_m_ban', 'cat' => array('MCP_BAN')),				'email'		=> array('title' => 'MCP_BAN_EMAILS', 'auth' => 'acl_m_ban', 'cat' => array('MCP_BAN')),			),		);	}	function install()	{	}	function uninstall()	{	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);include($phpbb_root_path . 'includes/functions_posting.' . $phpEx);include($phpbb_root_path . 'includes/functions_display.' . $phpEx);include($phpbb_root_path . 'includes/message_parser.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);// Grab only parameters needed here$post_id	= request_var('p', 0);$topic_id	= request_var('t', 0);$forum_id	= request_var('f', 0);$draft_id	= request_var('d', 0);$lastclick	= request_var('lastclick', 0);$submit		= (isset($_POST['post'])) ? true : false;$preview	= (isset($_POST['preview'])) ? true : false;$save		= (isset($_POST['save'])) ? true : false;$load		= (isset($_POST['load'])) ? true : false;$delete		= (isset($_POST['delete'])) ? true : false;$cancel		= (isset($_POST['cancel']) && !isset($_POST['save'])) ? true : false;$refresh	= (isset($_POST['add_file']) || isset($_POST['delete_file']) || isset($_POST['full_editor']) || isset($_POST['cancel_unglobalise']) || $save || $load) ? true : false;$mode		= ($delete && !$preview && !$refresh && $submit) ? 'delete' : request_var('mode', '');$error = $post_data = array();$current_time = time();// Was cancel pressed? If so then redirect to the appropriate pageif ($cancel || ($current_time - $lastclick < 2 && $submit)){	$f = ($forum_id) ? 'f=' . $forum_id . '&amp;' : '';	$redirect = ($post_id) ? append_sid("{$phpbb_root_path}viewtopic.$phpEx", $f . 'p=' . $post_id) . '#p' . $post_id : (($topic_id) ? append_sid("{$phpbb_root_path}viewtopic.$phpEx", $f . 't=' . $topic_id) : (($forum_id) ? append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id) : append_sid("{$phpbb_root_path}index.$phpEx")));	redirect($redirect);}if (in_array($mode, array('post', 'reply', 'quote', 'edit', 'delete')) && !$forum_id){	trigger_error('NO_FORUM');}// We need to know some basic information in all cases before we do anything.switch ($mode){	case 'post':		$sql = 'SELECT *			FROM ' . FORUMS_TABLE . "			WHERE forum_id = $forum_id";	break;	case 'bump':	case 'reply':		if (!$topic_id)		{			trigger_error('NO_TOPIC');		}		// Force forum id		$sql = 'SELECT forum_id			FROM ' . TOPICS_TABLE . '			WHERE topic_id = ' . $topic_id;		$result = $db->sql_query($sql);		$f_id = (int) $db->sql_fetchfield('forum_id');		$db->sql_freeresult($result);		$forum_id = (!$f_id) ? $forum_id : $f_id;		$sql = 'SELECT f.*, t.*			FROM ' . TOPICS_TABLE . ' t, ' . FORUMS_TABLE . " f			WHERE t.topic_id = $topic_id				AND (f.forum_id = t.forum_id					OR f.forum_id = $forum_id)" .			(($auth->acl_get('m_approve', $forum_id)) ? '' : 'AND t.topic_approved = 1');	break;	case 'quote':	case 'edit':	case 'delete':		if (!$post_id)		{			$user->setup('posting');			trigger_error('NO_POST');		}		// Force forum id		$sql = 'SELECT forum_id			FROM ' . POSTS_TABLE . '			WHERE post_id = ' . $post_id;		$result = $db->sql_query($sql);		$f_id = (int) $db->sql_fetchfield('forum_id');		$db->sql_freeresult($result);		$forum_id = (!$f_id) ? $forum_id : $f_id;		$sql = 'SELECT f.*, t.*, p.*, u.username, u.username_clean, u.user_sig, u.user_sig_bbcode_uid, u.user_sig_bbcode_bitfield			FROM ' . POSTS_TABLE . ' p, ' . TOPICS_TABLE . ' t, ' . FORUMS_TABLE . ' f, ' . USERS_TABLE . " u			WHERE p.post_id = $post_id				AND t.topic_id = p.topic_id				AND u.user_id = p.poster_id				AND (f.forum_id = t.forum_id					OR f.forum_id = $forum_id)" .				(($auth->acl_get('m_approve', $forum_id)) ? '' : 'AND p.post_approved = 1');	break;	case 'smilies':		$sql = '';		generate_smilies('window', $forum_id);	break;	case 'popup':		if ($forum_id)		{			$sql = 'SELECT forum_style				FROM ' . FORUMS_TABLE . '				WHERE forum_id = ' . $forum_id;		}		else		{			upload_popup();			return;		}	break;	default:		$sql = '';	break;}if (!$sql){	$user->setup('posting');	trigger_error('NO_POST_MODE');}$result = $db->sql_query($sql);$post_data = $db->sql_fetchrow($result);$db->sql_freeresult($result);if (!$post_data){	if (!($mode == 'post' || $mode == 'bump' || $mode == 'reply'))	{		$user->setup('posting');	}	trigger_error(($mode == 'post' || $mode == 'bump' || $mode == 'reply') ? 'NO_TOPIC' : 'NO_POST');}// Not able to reply to unapproved posts/topics// TODO: add more descriptive language keyif ($auth->acl_get('m_approve', $forum_id) && ((($mode == 'reply' || $mode == 'bump') && !$post_data['topic_approved']) || ($mode == 'quote' && !$post_data['post_approved']))){	trigger_error(($mode == 'reply' || $mode == 'bump') ? 'TOPIC_UNAPPROVED' : 'POST_UNAPPROVED');}if ($mode == 'popup'){	upload_popup($post_data['forum_style']);	return;}$user->setup(array('posting', 'mcp', 'viewtopic'), $post_data['forum_style']);if ($config['enable_post_confirm'] && !$user->data['is_registered']){	include($phpbb_root_path . 'includes/captcha/captcha_factory.' . $phpEx);	$captcha =& phpbb_captcha_factory::get_instance($config['captcha_plugin']);	$captcha->init(CONFIRM_POST);}// Use post_row values in favor of submitted ones...$forum_id	= (!empty($post_data['forum_id'])) ? (int) $post_data['forum_id'] : (int) $forum_id;$topic_id	= (!empty($post_data['topic_id'])) ? (int) $post_data['topic_id'] : (int) $topic_id;$post_id	= (!empty($post_data['post_id'])) ? (int) $post_data['post_id'] : (int) $post_id;// Need to login to passworded forum first?if ($post_data['forum_password']){	login_forum_box(array(		'forum_id'			=> $forum_id,		'forum_password'	=> $post_data['forum_password'])	);}// Check permissionsif ($user->data['is_bot']){	redirect(append_sid("{$phpbb_root_path}index.$phpEx"));}// Is the user able to read within this forum?if (!$auth->acl_get('f_read', $forum_id)){	if ($user->data['user_id'] != ANONYMOUS)	{		trigger_error('USER_CANNOT_READ');	}	login_box('', $user->lang['LOGIN_EXPLAIN_POST']);}// Permission to do the action asked?$is_authed = false;switch ($mode){	case 'post':		if ($auth->acl_get('f_post', $forum_id))		{			$is_authed = true;		}	break;	case 'bump':		if ($auth->acl_get('f_bump', $forum_id))		{			$is_authed = true;		}	break;	case 'quote':		$post_data['post_edit_locked'] = 0;	// no break;	case 'reply':		if ($auth->acl_get('f_reply', $forum_id))		{			$is_authed = true;		}	break;	case 'edit':		if ($user->data['is_registered'] && $auth->acl_gets('f_edit', 'm_edit', $forum_id))		{			$is_authed = true;		}	break;	case 'delete':		if ($user->data['is_registered'] && $auth->acl_gets('f_delete', 'm_delete', $forum_id))		{			$is_authed = true;		}	break;}if (!$is_authed){	$check_auth = ($mode == 'quote') ? 'reply' : $mode;	if ($user->data['is_registered'])	{		trigger_error('USER_CANNOT_' . strtoupper($check_auth));	}	login_box('', $user->lang['LOGIN_EXPLAIN_' . strtoupper($mode)]);}// Is the user able to post within this forum?if ($post_data['forum_type'] != FORUM_POST && in_array($mode, array('post', 'bump', 'quote', 'reply'))){	trigger_error('USER_CANNOT_FORUM_POST');}// Forum/Topic locked?if (($post_data['forum_status'] == ITEM_LOCKED || (isset($post_data['topic_status']) && $post_data['topic_status'] == ITEM_LOCKED)) && !$auth->acl_get('m_edit', $forum_id)){	trigger_error(($post_data['forum_status'] == ITEM_LOCKED) ? 'FORUM_LOCKED' : 'TOPIC_LOCKED');}// Can we edit this post ... if we're a moderator with rights then always yes// else it depends on editing times, lock status and if we're the correct userif ($mode == 'edit' && !$auth->acl_get('m_edit', $forum_id)){	if ($user->data['user_id'] != $post_data['poster_id'])	{		trigger_error('USER_CANNOT_EDIT');	}	if (!($post_data['post_time'] > time() - ($config['edit_time'] * 60) || !$config['edit_time']))	{		trigger_error('CANNOT_EDIT_TIME');	}	if ($post_data['post_edit_locked'])	{		trigger_error('CANNOT_EDIT_POST_LOCKED');	}}// Handle delete mode...if ($mode == 'delete'){	handle_post_delete($forum_id, $topic_id, $post_id, $post_data);	return;}// Handle bump mode...if ($mode == 'bump'){	if ($bump_time = bump_topic_allowed($forum_id, $post_data['topic_bumped'], $post_data['topic_last_post_time'], $post_data['topic_poster'], $post_data['topic_last_poster_id'])	   && check_link_hash(request_var('hash', ''), "topic_{$post_data['topic_id']}"))	{		$meta_url = phpbb_bump_topic($forum_id, $topic_id, $post_data, $current_time);		meta_refresh(3, $meta_url);		$message = $user->lang['TOPIC_BUMPED'] . '<br /><br />' . sprintf($user->lang['VIEW_MESSAGE'], '<a href="' . $meta_url . '">', '</a>');		$message .= '<br /><br />' . sprintf($user->lang['RETURN_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id) . '">', '</a>');		trigger_error($message);	}	trigger_error('BUMP_ERROR');}// Subject length limiting to 60 characters if first post...if ($mode == 'post' || ($mode == 'edit' && $post_data['topic_first_post_id'] == $post_data['post_id'])){	$template->assign_var('S_NEW_MESSAGE', true);}// Determine some varsif (isset($post_data['poster_id']) && $post_data['poster_id'] == ANONYMOUS){	$post_data['quote_username'] = (!empty($post_data['post_username'])) ? $post_data['post_username'] : $user->lang['GUEST'];}else{	$post_data['quote_username'] = isset($post_data['username']) ? $post_data['username'] : '';}$post_data['post_edit_locked']	= (isset($post_data['post_edit_locked'])) ? (int) $post_data['post_edit_locked'] : 0;$post_data['post_subject_md5']	= (isset($post_data['post_subject']) && $mode == 'edit') ? md5($post_data['post_subject']) : '';$post_data['post_subject']		= (in_array($mode, array('quote', 'edit'))) ? $post_data['post_subject'] : ((isset($post_data['topic_title'])) ? $post_data['topic_title'] : '');$post_data['topic_time_limit']	= (isset($post_data['topic_time_limit'])) ? (($post_data['topic_time_limit']) ? (int) $post_data['topic_time_limit'] / 86400 : (int) $post_data['topic_time_limit']) : 0;$post_data['poll_length']		= (!empty($post_data['poll_length'])) ? (int) $post_data['poll_length'] / 86400 : 0;$post_data['poll_start']		= (!empty($post_data['poll_start'])) ? (int) $post_data['poll_start'] : 0;$post_data['icon_id']			= (!isset($post_data['icon_id']) || in_array($mode, array('quote', 'reply'))) ? 0 : (int) $post_data['icon_id'];$post_data['poll_options']		= array();// Get Poll Dataif ($post_data['poll_start']){	$sql = 'SELECT poll_option_text		FROM ' . POLL_OPTIONS_TABLE . "		WHERE topic_id = $topic_id		ORDER BY poll_option_id";	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$post_data['poll_options'][] = trim($row['poll_option_text']);	}	$db->sql_freeresult($result);}if ($mode == 'edit'){	$original_poll_data = array(		'poll_title'		=> $post_data['poll_title'],		'poll_length'		=> $post_data['poll_length'],		'poll_max_options'	=> $post_data['poll_max_options'],		'poll_option_text'	=> implode("\n", $post_data['poll_options']),		'poll_start'		=> $post_data['poll_start'],		'poll_last_vote'	=> $post_data['poll_last_vote'],		'poll_vote_change'	=> $post_data['poll_vote_change'],	);}$orig_poll_options_size = sizeof($post_data['poll_options']);$message_parser = new parse_message();if (isset($post_data['post_text'])){	$message_parser->message = &$post_data['post_text'];	unset($post_data['post_text']);}// Set some default variables$uninit = array('post_attachment' => 0, 'poster_id' => $user->data['user_id'], 'enable_magic_url' => 0, 'topic_status' => 0, 'topic_type' => POST_NORMAL, 'post_subject' => '', 'topic_title' => '', 'post_time' => 0, 'post_edit_reason' => '', 'notify_set' => 0);foreach ($uninit as $var_name => $default_value){	if (!isset($post_data[$var_name]))	{		$post_data[$var_name] = $default_value;	}}unset($uninit);// Always check if the submitted attachment data is valid and belongs to the user.// Further down (especially in submit_post()) we do not check this again.$message_parser->get_submitted_attachment_data($post_data['poster_id']);if ($post_data['post_attachment'] && !$submit && !$refresh && !$preview && $mode == 'edit'){	// Do not change to SELECT *	$sql = 'SELECT attach_id, is_orphan, attach_comment, real_filename		FROM ' . ATTACHMENTS_TABLE . "		WHERE post_msg_id = $post_id			AND in_message = 0			AND is_orphan = 0		ORDER BY filetime DESC";	$result = $db->sql_query($sql);	$message_parser->attachment_data = array_merge($message_parser->attachment_data, $db->sql_fetchrowset($result));	$db->sql_freeresult($result);}if ($post_data['poster_id'] == ANONYMOUS){	$post_data['username'] = ($mode == 'quote' || $mode == 'edit') ? trim($post_data['post_username']) : '';}else{	$post_data['username'] = ($mode == 'quote' || $mode == 'edit') ? trim($post_data['username']) : '';}$post_data['enable_urls'] = $post_data['enable_magic_url'];if ($mode != 'edit'){	$post_data['enable_sig']		= ($config['allow_sig'] && $user->optionget('attachsig')) ? true: false;	$post_data['enable_smilies']	= ($config['allow_smilies'] && $user->optionget('smilies')) ? true : false;	$post_data['enable_bbcode']		= ($config['allow_bbcode'] && $user->optionget('bbcode')) ? true : false;	$post_data['enable_urls']		= true;}$post_data['enable_magic_url'] = $post_data['drafts'] = false;// User own some drafts?if ($user->data['is_registered'] && $auth->acl_get('u_savedrafts') && ($mode == 'reply' || $mode == 'post' || $mode == 'quote')){	$sql = 'SELECT draft_id		FROM ' . DRAFTS_TABLE . '		WHERE user_id = ' . $user->data['user_id'] .			(($forum_id) ? ' AND forum_id = ' . (int) $forum_id : '') .			(($topic_id) ? ' AND topic_id = ' . (int) $topic_id : '') .			(($draft_id) ? " AND draft_id <> $draft_id" : '');	$result = $db->sql_query_limit($sql, 1);	if ($db->sql_fetchrow($result))	{		$post_data['drafts'] = true;	}	$db->sql_freeresult($result);}$check_value = (($post_data['enable_bbcode']+1) << 8) + (($post_data['enable_smilies']+1) << 4) + (($post_data['enable_urls']+1) << 2) + (($post_data['enable_sig']+1) << 1);// Check if user is watching this topicif ($mode != 'post' && $config['allow_topic_notify'] && $user->data['is_registered']){	$sql = 'SELECT topic_id		FROM ' . TOPICS_WATCH_TABLE . '		WHERE topic_id = ' . $topic_id . '			AND user_id = ' . $user->data['user_id'];	$result = $db->sql_query($sql);	$post_data['notify_set'] = (int) $db->sql_fetchfield('topic_id');	$db->sql_freeresult($result);}// Do we want to edit our post ?if ($mode == 'edit' && $post_data['bbcode_uid']){	$message_parser->bbcode_uid = $post_data['bbcode_uid'];}// HTML, BBCode, Smilies, Images and Flash status$bbcode_status	= ($config['allow_bbcode'] && $auth->acl_get('f_bbcode', $forum_id)) ? true : false;$smilies_status	= ($config['allow_smilies'] && $auth->acl_get('f_smilies', $forum_id)) ? true : false;$img_status		= ($bbcode_status && $auth->acl_get('f_img', $forum_id)) ? true : false;$url_status		= ($config['allow_post_links']) ? true : false;$flash_status	= ($bbcode_status && $auth->acl_get('f_flash', $forum_id) && $config['allow_post_flash']) ? true : false;$quote_status	= true;// Save Draftif ($save && $user->data['is_registered'] && $auth->acl_get('u_savedrafts') && ($mode == 'reply' || $mode == 'post' || $mode == 'quote')){	$subject = utf8_normalize_nfc(request_var('subject', '', true));	$subject = (!$subject && $mode != 'post') ? $post_data['topic_title'] : $subject;	$message = utf8_normalize_nfc(request_var('message', '', true));	if ($subject && $message)	{		if (confirm_box(true))		{			$sql = 'INSERT INTO ' . DRAFTS_TABLE . ' ' . $db->sql_build_array('INSERT', array(				'user_id'		=> (int) $user->data['user_id'],				'topic_id'		=> (int) $topic_id,				'forum_id'		=> (int) $forum_id,				'save_time'		=> (int) $current_time,				'draft_subject'	=> (string) $subject,				'draft_message'	=> (string) $message)			);			$db->sql_query($sql);			$meta_info = ($mode == 'post') ? append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id) : append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id");			meta_refresh(3, $meta_info);			$message = $user->lang['DRAFT_SAVED'] . '<br /><br />';			$message .= ($mode != 'post') ? sprintf($user->lang['RETURN_TOPIC'], '<a href="' . $meta_info . '">', '</a>') . '<br /><br />' : '';			$message .= sprintf($user->lang['RETURN_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id) . '">', '</a>');			trigger_error($message);		}		else		{			$s_hidden_fields = build_hidden_fields(array(				'mode'		=> $mode,				'save'		=> true,				'f'			=> $forum_id,				't'			=> $topic_id,				'subject'	=> $subject,				'message'	=> $message,				'attachment_data' => $message_parser->attachment_data,				)			);			$hidden_fields = array(				'icon_id'			=> 0,				'disable_bbcode'	=> false,				'disable_smilies'	=> false,				'disable_magic_url'	=> false,				'attach_sig'		=> true,				'lock_topic'		=> false,				'topic_type'		=> POST_NORMAL,				'topic_time_limit'	=> 0,				'poll_title'		=> '',				'poll_option_text'	=> '',				'poll_max_options'	=> 1,				'poll_length'		=> 0,				'poll_vote_change'	=> false,			);			foreach ($hidden_fields as $name => $default)			{				if (!isset($_POST[$name]))				{					// Don't include it, if its not available					unset($hidden_fields[$name]);					continue;				}				if (is_bool($default))				{					// Use the string representation					$hidden_fields[$name] = request_var($name, '');				}				else				{					$hidden_fields[$name] = request_var($name, $default);				}			}			$s_hidden_fields .= build_hidden_fields($hidden_fields);			confirm_box(false, 'SAVE_DRAFT', $s_hidden_fields);		}	}	else	{		if (utf8_clean_string($subject) === '')		{			$error[] = $user->lang['EMPTY_SUBJECT'];		}		if (utf8_clean_string($message) === '')		{			$error[] = $user->lang['TOO_FEW_CHARS'];		}	}	unset($subject, $message);}// Load requested Draftif ($draft_id && ($mode == 'reply' || $mode == 'quote' || $mode == 'post') && $user->data['is_registered'] && $auth->acl_get('u_savedrafts')){	$sql = 'SELECT draft_subject, draft_message		FROM ' . DRAFTS_TABLE . "		WHERE draft_id = $draft_id			AND user_id = " . $user->data['user_id'];	$result = $db->sql_query_limit($sql, 1);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		$post_data['post_subject'] = $row['draft_subject'];		$message_parser->message = $row['draft_message'];		$template->assign_var('S_DRAFT_LOADED', true);	}	else	{		$draft_id = 0;	}}// Load draft overviewif ($load && ($mode == 'reply' || $mode == 'quote' || $mode == 'post') && $post_data['drafts']){	load_drafts($topic_id, $forum_id);}if ($submit || $preview || $refresh){	$post_data['topic_cur_post_id']	= request_var('topic_cur_post_id', 0);	$post_data['post_subject']		= utf8_normalize_nfc(request_var('subject', '', true));	$message_parser->message		= utf8_normalize_nfc(request_var('message', '', true));	$post_data['username']			= utf8_normalize_nfc(request_var('username', $post_data['username'], true));	$post_data['post_edit_reason']	= (!empty($_POST['edit_reason']) && $mode == 'edit' && $auth->acl_get('m_edit', $forum_id)) ? utf8_normalize_nfc(request_var('edit_reason', '', true)) : '';	$post_data['orig_topic_type']	= $post_data['topic_type'];	$post_data['topic_type']		= request_var('topic_type', (($mode != 'post') ? (int) $post_data['topic_type'] : POST_NORMAL));	$post_data['topic_time_limit']	= request_var('topic_time_limit', (($mode != 'post') ? (int) $post_data['topic_time_limit'] : 0));	if ($post_data['enable_icons'] && $auth->acl_get('f_icons', $forum_id))	{		$post_data['icon_id'] = request_var('icon', (int) $post_data['icon_id']);	}	$post_data['enable_bbcode']		= (!$bbcode_status || isset($_POST['disable_bbcode'])) ? false : true;	$post_data['enable_smilies']	= (!$smilies_status || isset($_POST['disable_smilies'])) ? false : true;	$post_data['enable_urls']		= (isset($_POST['disable_magic_url'])) ? 0 : 1;	$post_data['enable_sig']		= (!$config['allow_sig'] || !$auth->acl_get('f_sigs', $forum_id) || !$auth->acl_get('u_sig')) ? false : ((isset($_POST['attach_sig']) && $user->data['is_registered']) ? true : false);	if ($config['allow_topic_notify'] && $user->data['is_registered'])	{		$notify = (isset($_POST['notify'])) ? true : false;	}	else	{		$notify = false;	}	$topic_lock			= (isset($_POST['lock_topic'])) ? true : false;	$post_lock			= (isset($_POST['lock_post'])) ? true : false;	$poll_delete		= (isset($_POST['poll_delete'])) ? true : false;	if ($submit)	{		$status_switch = (($post_data['enable_bbcode']+1) << 8) + (($post_data['enable_smilies']+1) << 4) + (($post_data['enable_urls']+1) << 2) + (($post_data['enable_sig']+1) << 1);		$status_switch = ($status_switch != $check_value);	}	else	{		$status_switch = 1;	}	// Delete Poll	if ($poll_delete && $mode == 'edit' && sizeof($post_data['poll_options']) &&		((!$post_data['poll_last_vote'] && $post_data['poster_id'] == $user->data['user_id'] && $auth->acl_get('f_delete', $forum_id)) || $auth->acl_get('m_delete', $forum_id)))	{		if ($submit && check_form_key('posting'))		{			$sql = 'DELETE FROM ' . POLL_OPTIONS_TABLE . "				WHERE topic_id = $topic_id";			$db->sql_query($sql);			$sql = 'DELETE FROM ' . POLL_VOTES_TABLE . "				WHERE topic_id = $topic_id";			$db->sql_query($sql);			$topic_sql = array(				'poll_title'		=> '',				'poll_start' 		=> 0,				'poll_length'		=> 0,				'poll_last_vote'	=> 0,				'poll_max_options'	=> 0,				'poll_vote_change'	=> 0			);			$sql = 'UPDATE ' . TOPICS_TABLE . '				SET ' . $db->sql_build_array('UPDATE', $topic_sql) . "				WHERE topic_id = $topic_id";			$db->sql_query($sql);		}		$post_data['poll_title'] = $post_data['poll_option_text'] = '';		$post_data['poll_vote_change'] = $post_data['poll_max_options'] = $post_data['poll_length'] = 0;	}	else	{		$post_data['poll_title']		= utf8_normalize_nfc(request_var('poll_title', '', true));		$post_data['poll_length']		= request_var('poll_length', 0);		$post_data['poll_option_text']	= utf8_normalize_nfc(request_var('poll_option_text', '', true));		$post_data['poll_max_options']	= request_var('poll_max_options', 1);		$post_data['poll_vote_change']	= ($auth->acl_get('f_votechg', $forum_id) && $auth->acl_get('f_vote', $forum_id) && isset($_POST['poll_vote_change'])) ? 1 : 0;	}	// If replying/quoting and last post id has changed	// give user option to continue submit or return to post	// notify and show user the post made between his request and the final submit	if (($mode == 'reply' || $mode == 'quote') && $post_data['topic_cur_post_id'] && $post_data['topic_cur_post_id'] != $post_data['topic_last_post_id'])	{		// Only do so if it is allowed forum-wide		if ($post_data['forum_flags'] & FORUM_FLAG_POST_REVIEW)		{			if (topic_review($topic_id, $forum_id, 'post_review', $post_data['topic_cur_post_id']))			{				$template->assign_var('S_POST_REVIEW', true);			}			$submit = false;			$refresh = true;		}	}	// Parse Attachments - before checksum is calculated	$message_parser->parse_attachments('fileupload', $mode, $forum_id, $submit, $preview, $refresh);	// Grab md5 'checksum' of new message	$message_md5 = md5($message_parser->message);	// If editing and checksum has changed we know the post was edited while we're editing	// Notify and show user the changed post	if ($mode == 'edit' && $post_data['forum_flags'] & FORUM_FLAG_POST_REVIEW)	{		$edit_post_message_checksum = request_var('edit_post_message_checksum', '');		$edit_post_subject_checksum = request_var('edit_post_subject_checksum', '');		// $post_data['post_checksum'] is the checksum of the post submitted in the meantime		// $message_md5 is the checksum of the post we're about to submit		// $edit_post_message_checksum is the checksum of the post we're editing		// ...		// We make sure nobody else made exactly the same change		// we're about to submit by also checking $message_md5 != $post_data['post_checksum']		if (($edit_post_message_checksum !== '' && $edit_post_message_checksum != $post_data['post_checksum'] && $message_md5 != $post_data['post_checksum'])		 || ($edit_post_subject_checksum !== '' && $edit_post_subject_checksum != $post_data['post_subject_md5'] && md5($post_data['post_subject']) != $post_data['post_subject_md5']))		{			if (topic_review($topic_id, $forum_id, 'post_review_edit', $post_id))			{				$template->assign_vars(array(					'S_POST_REVIEW'			=> true,					'L_POST_REVIEW'			=> $user->lang['POST_REVIEW_EDIT'],					'L_POST_REVIEW_EXPLAIN'	=> $user->lang['POST_REVIEW_EDIT_EXPLAIN'],				));			}			$submit = false;			$refresh = true;		}	}	// Check checksum ... don't re-parse message if the same	$update_message = ($mode != 'edit' || $message_md5 != $post_data['post_checksum'] || $status_switch || strlen($post_data['bbcode_uid']) < BBCODE_UID_LEN) ? true : false;	// Also check if subject got updated...	$update_subject = $mode != 'edit' || ($post_data['post_subject_md5'] && $post_data['post_subject_md5'] != md5($post_data['post_subject']));	// Parse message	if ($update_message)	{		if (sizeof($message_parser->warn_msg))		{			$error[] = implode('<br />', $message_parser->warn_msg);			$message_parser->warn_msg = array();		}		$message_parser->parse($post_data['enable_bbcode'], ($config['allow_post_links']) ? $post_data['enable_urls'] : false, $post_data['enable_smilies'], $img_status, $flash_status, $quote_status, $config['allow_post_links']);		// On a refresh we do not care about message parsing errors		if (sizeof($message_parser->warn_msg) && $refresh)		{			$message_parser->warn_msg = array();		}	}	else	{		$message_parser->bbcode_bitfield = $post_data['bbcode_bitfield'];	}	if ($mode != 'edit' && !$preview && !$refresh && $config['flood_interval'] && !$auth->acl_get('f_ignoreflood', $forum_id))	{		// Flood check		$last_post_time = 0;		if ($user->data['is_registered'])		{			$last_post_time = $user->data['user_lastpost_time'];		}		else		{			$sql = 'SELECT post_time AS last_post_time				FROM ' . POSTS_TABLE . "				WHERE poster_ip = '" . $user->ip . "'					AND post_time > " . ($current_time - $config['flood_interval']);			$result = $db->sql_query_limit($sql, 1);			if ($row = $db->sql_fetchrow($result))			{				$last_post_time = $row['last_post_time'];			}			$db->sql_freeresult($result);		}		if ($last_post_time && ($current_time - $last_post_time) < intval($config['flood_interval']))		{			$error[] = $user->lang['FLOOD_ERROR'];		}	}	// Validate username	if (($post_data['username'] && !$user->data['is_registered']) || ($mode == 'edit' && $post_data['poster_id'] == ANONYMOUS && $post_data['username'] && $post_data['post_username'] && $post_data['post_username'] != $post_data['username']))	{		include($phpbb_root_path . 'includes/functions_user.' . $phpEx);		$user->add_lang('ucp');		if (($result = validate_username($post_data['username'], (!empty($post_data['post_username'])) ? $post_data['post_username'] : '')) !== false)		{			$error[] = $user->lang[$result . '_USERNAME'];		}		if (($result = validate_string($post_data['username'], false, $config['min_name_chars'], $config['max_name_chars'])) !== false)		{			$min_max_amount = ($result == 'TOO_SHORT') ? $config['min_name_chars'] : $config['max_name_chars'];			$error[] = sprintf($user->lang['FIELD_' . $result], $user->lang['USERNAME'], $min_max_amount);		}	}	if ($config['enable_post_confirm'] && !$user->data['is_registered'] && in_array($mode, array('quote', 'post', 'reply')))	{		$captcha_data = array(			'message'	=> utf8_normalize_nfc(request_var('message', '', true)),			'subject'	=> utf8_normalize_nfc(request_var('subject', '', true)),			'username'	=> utf8_normalize_nfc(request_var('username', '', true)),		);		$vc_response = $captcha->validate($captcha_data);		if ($vc_response)		{			$error[] = $vc_response;		}	}	// check form	if (($submit || $preview) && !check_form_key('posting'))	{		$error[] = $user->lang['FORM_INVALID'];	}	// Parse subject	if (!$preview && !$refresh && utf8_clean_string($post_data['post_subject']) === '' && ($mode == 'post' || ($mode == 'edit' && $post_data['topic_first_post_id'] == $post_id)))	{		$error[] = $user->lang['EMPTY_SUBJECT'];	}	$post_data['poll_last_vote'] = (isset($post_data['poll_last_vote'])) ? $post_data['poll_last_vote'] : 0;	if ($post_data['poll_option_text'] &&		($mode == 'post' || ($mode == 'edit' && $post_id == $post_data['topic_first_post_id']/* && (!$post_data['poll_last_vote'] || $auth->acl_get('m_edit', $forum_id))*/))		&& $auth->acl_get('f_poll', $forum_id))	{		$poll = array(			'poll_title'		=> $post_data['poll_title'],			'poll_length'		=> $post_data['poll_length'],			'poll_max_options'	=> $post_data['poll_max_options'],			'poll_option_text'	=> $post_data['poll_option_text'],			'poll_start'		=> $post_data['poll_start'],			'poll_last_vote'	=> $post_data['poll_last_vote'],			'poll_vote_change'	=> $post_data['poll_vote_change'],			'enable_bbcode'		=> $post_data['enable_bbcode'],			'enable_urls'		=> $post_data['enable_urls'],			'enable_smilies'	=> $post_data['enable_smilies'],			'img_status'		=> $img_status		);		$message_parser->parse_poll($poll);		$post_data['poll_options'] = (isset($poll['poll_options'])) ? $poll['poll_options'] : array();		$post_data['poll_title'] = (isset($poll['poll_title'])) ? $poll['poll_title'] : '';		/* We reset votes, therefore also allow removing options		if ($post_data['poll_last_vote'] && ($poll['poll_options_size'] < $orig_poll_options_size))		{			$message_parser->warn_msg[] = $user->lang['NO_DELETE_POLL_OPTIONS'];		}*/	}	else if ($mode == 'edit' && $post_id == $post_data['topic_first_post_id'] && $auth->acl_get('f_poll', $forum_id))	{		// The user removed all poll options, this is equal to deleting the poll.		$poll = array(			'poll_title'		=> '',			'poll_length'		=> 0,			'poll_max_options'	=> 0,			'poll_option_text'	=> '',			'poll_start'		=> 0,			'poll_last_vote'	=> 0,			'poll_vote_change'	=> 0,			'poll_options'		=> array(),		);		$post_data['poll_options'] = array();		$post_data['poll_title'] = '';		$post_data['poll_start'] = $post_data['poll_length'] = $post_data['poll_max_options'] = $post_data['poll_last_vote'] = $post_data['poll_vote_change'] = 0;	}	else if (!$auth->acl_get('f_poll', $forum_id) && ($mode == 'edit') && ($post_id == $post_data['topic_first_post_id']) && ($original_poll_data['poll_title'] != ''))	{		// We have a poll but the editing user is not permitted to create/edit it.		// So we just keep the original poll-data.		$poll = array_merge($original_poll_data, array(			'enable_bbcode'		=> $post_data['enable_bbcode'],			'enable_urls'		=> $post_data['enable_urls'],			'enable_smilies'	=> $post_data['enable_smilies'],			'img_status'		=> $img_status,		));		$message_parser->parse_poll($poll);		$post_data['poll_options'] = (isset($poll['poll_options'])) ? $poll['poll_options'] : array();		$post_data['poll_title'] = (isset($poll['poll_title'])) ? $poll['poll_title'] : '';	}	else	{		$poll = array();	}	// Check topic type	if ($post_data['topic_type'] != POST_NORMAL && ($mode == 'post' || ($mode == 'edit' && $post_data['topic_first_post_id'] == $post_id)))	{		switch ($post_data['topic_type'])		{			case POST_GLOBAL:			case POST_ANNOUNCE:				$auth_option = 'f_announce';			break;			case POST_STICKY:				$auth_option = 'f_sticky';			break;			default:				$auth_option = '';			break;		}		if (!$auth->acl_get($auth_option, $forum_id))		{			// There is a special case where a user edits his post whereby the topic type got changed by an admin/mod.			// Another case would be a mod not having sticky permissions for example but edit permissions.			if ($mode == 'edit')			{				// To prevent non-authed users messing around with the topic type we reset it to the original one.				$post_data['topic_type'] = $post_data['orig_topic_type'];			}			else			{				$error[] = $user->lang['CANNOT_POST_' . str_replace('F_', '', strtoupper($auth_option))];			}		}	}	if (sizeof($message_parser->warn_msg))	{		$error[] = implode('<br />', $message_parser->warn_msg);	}	// DNSBL check	if ($config['check_dnsbl'] && !$refresh)	{		if (($dnsbl = $user->check_dnsbl('post')) !== false)		{			$error[] = sprintf($user->lang['IP_BLACKLISTED'], $user->ip, $dnsbl[1]);		}	}	// Store message, sync counters	if (!sizeof($error) && $submit)	{		// Check if we want to de-globalize the topic... and ask for new forum		if ($post_data['topic_type'] != POST_GLOBAL)		{			$sql = 'SELECT topic_type, forum_id				FROM ' . TOPICS_TABLE . "				WHERE topic_id = $topic_id";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($row && !$row['forum_id'] && $row['topic_type'] == POST_GLOBAL)			{				$to_forum_id = request_var('to_forum_id', 0);				if ($to_forum_id)				{					$sql = 'SELECT forum_type						FROM ' . FORUMS_TABLE . '						WHERE forum_id = ' . $to_forum_id;					$result = $db->sql_query($sql);					$forum_type = (int) $db->sql_fetchfield('forum_type');					$db->sql_freeresult($result);					if ($forum_type != FORUM_POST || !$auth->acl_get('f_post', $to_forum_id) || (!$auth->acl_get('m_approve', $to_forum_id) && !$auth->acl_get('f_noapprove', $to_forum_id)))					{						$to_forum_id = 0;					}				}				if (!$to_forum_id)				{					include_once($phpbb_root_path . 'includes/functions_admin.' . $phpEx);					$template->assign_vars(array(						'S_FORUM_SELECT'	=> make_forum_select(false, false, false, true, true, true),						'S_UNGLOBALISE'		=> true)					);					$submit = false;					$refresh = true;				}				else				{					if (!$auth->acl_get('f_post', $to_forum_id))					{						// This will only be triggered if the user tried to trick the forum.						trigger_error('NOT_AUTHORISED');					}					$forum_id = $to_forum_id;				}			}		}		if ($submit)		{			// Lock/Unlock Topic			$change_topic_status = $post_data['topic_status'];			$perm_lock_unlock = ($auth->acl_get('m_lock', $forum_id) || ($auth->acl_get('f_user_lock', $forum_id) && $user->data['is_registered'] && !empty($post_data['topic_poster']) && $user->data['user_id'] == $post_data['topic_poster'] && $post_data['topic_status'] == ITEM_UNLOCKED)) ? true : false;			if ($post_data['topic_status'] == ITEM_LOCKED && !$topic_lock && $perm_lock_unlock)			{				$change_topic_status = ITEM_UNLOCKED;			}			else if ($post_data['topic_status'] == ITEM_UNLOCKED && $topic_lock && $perm_lock_unlock)			{				$change_topic_status = ITEM_LOCKED;			}			if ($change_topic_status != $post_data['topic_status'])			{				$sql = 'UPDATE ' . TOPICS_TABLE . "					SET topic_status = $change_topic_status					WHERE topic_id = $topic_id						AND topic_moved_id = 0";				$db->sql_query($sql);				$user_lock = ($auth->acl_get('f_user_lock', $forum_id) && $user->data['is_registered'] && $user->data['user_id'] == $post_data['topic_poster']) ? 'USER_' : '';				add_log('mod', $forum_id, $topic_id, 'LOG_' . $user_lock . (($change_topic_status == ITEM_LOCKED) ? 'LOCK' : 'UNLOCK'), $post_data['topic_title']);			}			// Lock/Unlock Post Edit			if ($mode == 'edit' && $post_data['post_edit_locked'] == ITEM_LOCKED && !$post_lock && $auth->acl_get('m_edit', $forum_id))			{				$post_data['post_edit_locked'] = ITEM_UNLOCKED;			}			else if ($mode == 'edit' && $post_data['post_edit_locked'] == ITEM_UNLOCKED && $post_lock && $auth->acl_get('m_edit', $forum_id))			{				$post_data['post_edit_locked'] = ITEM_LOCKED;			}			$data = array(				'topic_title'			=> (empty($post_data['topic_title'])) ? $post_data['post_subject'] : $post_data['topic_title'],				'topic_first_post_id'	=> (isset($post_data['topic_first_post_id'])) ? (int) $post_data['topic_first_post_id'] : 0,				'topic_last_post_id'	=> (isset($post_data['topic_last_post_id'])) ? (int) $post_data['topic_last_post_id'] : 0,				'topic_time_limit'		=> (int) $post_data['topic_time_limit'],				'topic_attachment'		=> (isset($post_data['topic_attachment'])) ? (int) $post_data['topic_attachment'] : 0,				'post_id'				=> (int) $post_id,				'topic_id'				=> (int) $topic_id,				'forum_id'				=> (int) $forum_id,				'icon_id'				=> (int) $post_data['icon_id'],				'poster_id'				=> (int) $post_data['poster_id'],				'enable_sig'			=> (bool) $post_data['enable_sig'],				'enable_bbcode'			=> (bool) $post_data['enable_bbcode'],				'enable_smilies'		=> (bool) $post_data['enable_smilies'],				'enable_urls'			=> (bool) $post_data['enable_urls'],				'enable_indexing'		=> (bool) $post_data['enable_indexing'],				'message_md5'			=> (string) $message_md5,				'post_time'				=> (isset($post_data['post_time'])) ? (int) $post_data['post_time'] : $current_time,				'post_checksum'			=> (isset($post_data['post_checksum'])) ? (string) $post_data['post_checksum'] : '',				'post_edit_reason'		=> $post_data['post_edit_reason'],				'post_edit_user'		=> ($mode == 'edit') ? $user->data['user_id'] : ((isset($post_data['post_edit_user'])) ? (int) $post_data['post_edit_user'] : 0),				'forum_parents'			=> $post_data['forum_parents'],				'forum_name'			=> $post_data['forum_name'],				'notify'				=> $notify,				'notify_set'			=> $post_data['notify_set'],				'poster_ip'				=> (isset($post_data['poster_ip'])) ? $post_data['poster_ip'] : $user->ip,				'post_edit_locked'		=> (int) $post_data['post_edit_locked'],				'bbcode_bitfield'		=> $message_parser->bbcode_bitfield,				'bbcode_uid'			=> $message_parser->bbcode_uid,				'message'				=> $message_parser->message,				'attachment_data'		=> $message_parser->attachment_data,				'filename_data'			=> $message_parser->filename_data,				'topic_approved'		=> (isset($post_data['topic_approved'])) ? $post_data['topic_approved'] : false,				'post_approved'			=> (isset($post_data['post_approved'])) ? $post_data['post_approved'] : false,			);			if ($mode == 'edit')			{				$data['topic_replies_real'] = $post_data['topic_replies_real'];				$data['topic_replies'] = $post_data['topic_replies'];			}			// The last parameter tells submit_post if search indexer has to be run			$redirect_url = submit_post($mode, $post_data['post_subject'], $post_data['username'], $post_data['topic_type'], $poll, $data, $update_message, ($update_message || $update_subject) ? true : false);			if ($config['enable_post_confirm'] && !$user->data['is_registered'] && (isset($captcha) && $captcha->is_solved() === true) && ($mode == 'post' || $mode == 'reply' || $mode == 'quote'))			{				$captcha->reset();			}			// Check the permissions for post approval. Moderators are not affected.			if ((!$auth->acl_get('f_noapprove', $data['forum_id']) && !$auth->acl_get('m_approve', $data['forum_id']) && empty($data['force_approved_state'])) || (isset($data['force_approved_state']) && !$data['force_approved_state']))			{				meta_refresh(10, $redirect_url);				$message = ($mode == 'edit') ? $user->lang['POST_EDITED_MOD'] : $user->lang['POST_STORED_MOD'];				$message .= (($user->data['user_id'] == ANONYMOUS) ? '' : ' '. $user->lang['POST_APPROVAL_NOTIFY']);			}			else			{				meta_refresh(3, $redirect_url);				$message = ($mode == 'edit') ? 'POST_EDITED' : 'POST_STORED';				$message = $user->lang[$message] . '<br /><br />' . sprintf($user->lang['VIEW_MESSAGE'], '<a href="' . $redirect_url . '">', '</a>');			}			$message .= '<br /><br />' . sprintf($user->lang['RETURN_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $data['forum_id']) . '">', '</a>');			trigger_error($message);		}	}}// Previewif (!sizeof($error) && $preview){	$post_data['post_time'] = ($mode == 'edit') ? $post_data['post_time'] : $current_time;	$preview_message = $message_parser->format_display($post_data['enable_bbcode'], $post_data['enable_urls'], $post_data['enable_smilies'], false);	$preview_signature = ($mode == 'edit') ? $post_data['user_sig'] : $user->data['user_sig'];	$preview_signature_uid = ($mode == 'edit') ? $post_data['user_sig_bbcode_uid'] : $user->data['user_sig_bbcode_uid'];	$preview_signature_bitfield = ($mode == 'edit') ? $post_data['user_sig_bbcode_bitfield'] : $user->data['user_sig_bbcode_bitfield'];	// Signature	if ($post_data['enable_sig'] && $config['allow_sig'] && $preview_signature && $auth->acl_get('f_sigs', $forum_id))	{		$parse_sig = new parse_message($preview_signature);		$parse_sig->bbcode_uid = $preview_signature_uid;		$parse_sig->bbcode_bitfield = $preview_signature_bitfield;		// Not sure about parameters for bbcode/smilies/urls... in signatures		$parse_sig->format_display($config['allow_sig_bbcode'], $config['allow_sig_links'], $config['allow_sig_smilies']);		$preview_signature = $parse_sig->message;		unset($parse_sig);	}	else	{		$preview_signature = '';	}	$preview_subject = censor_text($post_data['post_subject']);	// Poll Preview	if (!$poll_delete && ($mode == 'post' || ($mode == 'edit' && $post_id == $post_data['topic_first_post_id']/* && (!$post_data['poll_last_vote'] || $auth->acl_get('m_edit', $forum_id))*/))	&& $auth->acl_get('f_poll', $forum_id))	{		$parse_poll = new parse_message($post_data['poll_title']);		$parse_poll->bbcode_uid = $message_parser->bbcode_uid;		$parse_poll->bbcode_bitfield = $message_parser->bbcode_bitfield;		$parse_poll->format_display($post_data['enable_bbcode'], $post_data['enable_urls'], $post_data['enable_smilies']);		if ($post_data['poll_length'])		{			$poll_end = ($post_data['poll_length'] * 86400) + (($post_data['poll_start']) ? $post_data['poll_start'] : time());		}		$template->assign_vars(array(			'S_HAS_POLL_OPTIONS'	=> (sizeof($post_data['poll_options'])),			'S_IS_MULTI_CHOICE'		=> ($post_data['poll_max_options'] > 1) ? true : false,			'POLL_QUESTION'		=> $parse_poll->message,			'L_POLL_LENGTH'		=> ($post_data['poll_length']) ? sprintf($user->lang['POLL_RUN_TILL'], $user->format_date($poll_end)) : '',			'L_MAX_VOTES'		=> ($post_data['poll_max_options'] == 1) ? $user->lang['MAX_OPTION_SELECT'] : sprintf($user->lang['MAX_OPTIONS_SELECT'], $post_data['poll_max_options']))		);		$parse_poll->message = implode("\n", $post_data['poll_options']);		$parse_poll->format_display($post_data['enable_bbcode'], $post_data['enable_urls'], $post_data['enable_smilies']);		$preview_poll_options = explode('<br />', $parse_poll->message);		unset($parse_poll);		foreach ($preview_poll_options as $key => $option)		{			$template->assign_block_vars('poll_option', array(				'POLL_OPTION_CAPTION'	=> $option,				'POLL_OPTION_ID'		=> $key + 1)			);		}		unset($preview_poll_options);	}	// Attachment Preview	if (sizeof($message_parser->attachment_data))	{		$template->assign_var('S_HAS_ATTACHMENTS', true);		$update_count = array();		$attachment_data = $message_parser->attachment_data;		parse_attachments($forum_id, $preview_message, $attachment_data, $update_count, true);		foreach ($attachment_data as $i => $attachment)		{			$template->assign_block_vars('attachment', array(				'DISPLAY_ATTACHMENT'	=> $attachment)			);		}		unset($attachment_data);	}	if (!sizeof($error))	{		$template->assign_vars(array(			'PREVIEW_SUBJECT'		=> $preview_subject,			'PREVIEW_MESSAGE'		=> $preview_message,			'PREVIEW_SIGNATURE'		=> $preview_signature,			'S_DISPLAY_PREVIEW'		=> true)		);	}}// Decode text for message display$post_data['bbcode_uid'] = ($mode == 'quote' && !$preview && !$refresh && !sizeof($error)) ? $post_data['bbcode_uid'] : $message_parser->bbcode_uid;$message_parser->decode_message($post_data['bbcode_uid']);if ($mode == 'quote' && !$submit && !$preview && !$refresh){	if ($config['allow_bbcode'])	{		$message_parser->message = '[quote=&quot;' . $post_data['quote_username'] . '&quot;]' . censor_text(trim($message_parser->message)) . "[/quote]\n";	}	else	{		$offset = 0;		$quote_string = "&gt; ";		$message = censor_text(trim($message_parser->message));		// see if we are nesting. It's easily tricked but should work for one level of nesting		if (strpos($message, "&gt;") !== false)		{			$offset = 10;		}		$message = utf8_wordwrap($message, 75 + $offset, "\n");		$message = $quote_string . $message;		$message = str_replace("\n", "\n" . $quote_string, $message);		$message_parser->message =  $post_data['quote_username'] . " " . $user->lang['WROTE'] . ":\n" . $message . "\n";	}}if (($mode == 'reply' || $mode == 'quote') && !$submit && !$preview && !$refresh){	$post_data['post_subject'] = ((strpos($post_data['post_subject'], 'Re: ') !== 0) ? 'Re: ' : '') . censor_text($post_data['post_subject']);}$attachment_data = $message_parser->attachment_data;$filename_data = $message_parser->filename_data;$post_data['post_text'] = $message_parser->message;if (sizeof($post_data['poll_options']) || !empty($post_data['poll_title'])){	$message_parser->message = $post_data['poll_title'];	$message_parser->bbcode_uid = $post_data['bbcode_uid'];	$message_parser->decode_message();	$post_data['poll_title'] = $message_parser->message;	$message_parser->message = implode("\n", $post_data['poll_options']);	$message_parser->decode_message();	$post_data['poll_options'] = explode("\n", $message_parser->message);}// MAIN POSTING PAGE BEGINS HERE// Forum moderators?$moderators = array();if ($config['load_moderators']){	get_moderators($moderators, $forum_id);}// Generate smiley listinggenerate_smilies('inline', $forum_id);// Generate inline attachment select boxposting_gen_inline_attachments($attachment_data);// Do show topic type selection only in first post.$topic_type_toggle = false;if ($mode == 'post' || ($mode == 'edit' && $post_id == $post_data['topic_first_post_id'])){	$topic_type_toggle = posting_gen_topic_types($forum_id, $post_data['topic_type']);}$s_topic_icons = false;if ($post_data['enable_icons'] && $auth->acl_get('f_icons', $forum_id)){	$s_topic_icons = posting_gen_topic_icons($mode, $post_data['icon_id']);}$bbcode_checked		= (isset($post_data['enable_bbcode'])) ? !$post_data['enable_bbcode'] : (($config['allow_bbcode']) ? !$user->optionget('bbcode') : 1);$smilies_checked	= (isset($post_data['enable_smilies'])) ? !$post_data['enable_smilies'] : (($config['allow_smilies']) ? !$user->optionget('smilies') : 1);$urls_checked		= (isset($post_data['enable_urls'])) ? !$post_data['enable_urls'] : 0;$sig_checked		= $post_data['enable_sig'];$lock_topic_checked	= (isset($topic_lock) && $topic_lock) ? $topic_lock : (($post_data['topic_status'] == ITEM_LOCKED) ? 1 : 0);$lock_post_checked	= (isset($post_lock)) ? $post_lock : $post_data['post_edit_locked'];// If the user is replying or posting and not already watching this topic but set to always being notified we need to overwrite this setting$notify_set			= ($mode != 'edit' && $config['allow_topic_notify'] && $user->data['is_registered'] && !$post_data['notify_set']) ? $user->data['user_notify'] : $post_data['notify_set'];$notify_checked		= (isset($notify)) ? $notify : (($mode == 'post') ? $user->data['user_notify'] : $notify_set);// Page title & action URL$s_action = append_sid("{$phpbb_root_path}posting.$phpEx", "mode=$mode&amp;f=$forum_id");$s_action .= ($topic_id) ? "&amp;t=$topic_id" : '';$s_action .= ($post_id) ? "&amp;p=$post_id" : '';switch ($mode){	case 'post':		$page_title = $user->lang['POST_TOPIC'];	break;	case 'quote':	case 'reply':		$page_title = $user->lang['POST_REPLY'];	break;	case 'delete':	case 'edit':		$page_title = $user->lang['EDIT_POST'];	break;}// Build Navigation Linksgenerate_forum_nav($post_data);// Build Forum Rulesgenerate_forum_rules($post_data);// Posting uses is_solved for legacy reasons. Plugins have to use is_solved to force themselves to be displayed.if ($config['enable_post_confirm'] && !$user->data['is_registered'] && (isset($captcha) && $captcha->is_solved() === false) && ($mode == 'post' || $mode == 'reply' || $mode == 'quote')){	$template->assign_vars(array(		'S_CONFIRM_CODE'			=> true,		'CAPTCHA_TEMPLATE'			=> $captcha->get_template(),	));}$s_hidden_fields = ($mode == 'reply' || $mode == 'quote') ? '<input type="hidden" name="topic_cur_post_id" value="' . $post_data['topic_last_post_id'] . '" />' : '';$s_hidden_fields .= '<input type="hidden" name="lastclick" value="' . $current_time . '" />';$s_hidden_fields .= ($draft_id || isset($_REQUEST['draft_loaded'])) ? '<input type="hidden" name="draft_loaded" value="' . request_var('draft_loaded', $draft_id) . '" />' : '';if ($mode == 'edit'){	$s_hidden_fields .= build_hidden_fields(array(		'edit_post_message_checksum'	=> $post_data['post_checksum'],		'edit_post_subject_checksum'	=> $post_data['post_subject_md5'],	));}// Add the confirm id/code pair to the hidden fields, else an error is displayed on next submit/previewif (isset($captcha) && $captcha->is_solved() !== false){	$s_hidden_fields .= build_hidden_fields($captcha->get_hidden_fields());}$form_enctype = (@ini_get('file_uploads') == '0' || strtolower(@ini_get('file_uploads')) == 'off' || !$config['allow_attachments'] || !$auth->acl_get('u_attach') || !$auth->acl_get('f_attach', $forum_id)) ? '' : ' enctype="multipart/form-data"';add_form_key('posting');// Start assigning vars for main posting page ...$template->assign_vars(array(	'L_POST_A'					=> $page_title,	'L_ICON'					=> ($mode == 'reply' || $mode == 'quote' || ($mode == 'edit' && $post_id != $post_data['topic_first_post_id'])) ? $user->lang['POST_ICON'] : $user->lang['TOPIC_ICON'],	'L_MESSAGE_BODY_EXPLAIN'	=> (intval($config['max_post_chars'])) ? sprintf($user->lang['MESSAGE_BODY_EXPLAIN'], intval($config['max_post_chars'])) : '',	'FORUM_NAME'			=> $post_data['forum_name'],	'FORUM_DESC'			=> ($post_data['forum_desc']) ? generate_text_for_display($post_data['forum_desc'], $post_data['forum_desc_uid'], $post_data['forum_desc_bitfield'], $post_data['forum_desc_options']) : '',	'TOPIC_TITLE'			=> censor_text($post_data['topic_title']),	'MODERATORS'			=> (sizeof($moderators)) ? implode(', ', $moderators[$forum_id]) : '',	'USERNAME'				=> ((!$preview && $mode != 'quote') || $preview) ? $post_data['username'] : '',	'SUBJECT'				=> $post_data['post_subject'],	'MESSAGE'				=> $post_data['post_text'],	'BBCODE_STATUS'			=> ($bbcode_status) ? sprintf($user->lang['BBCODE_IS_ON'], '<a href="' . append_sid("{$phpbb_root_path}faq.$phpEx", 'mode=bbcode') . '">', '</a>') : sprintf($user->lang['BBCODE_IS_OFF'], '<a href="' . append_sid("{$phpbb_root_path}faq.$phpEx", 'mode=bbcode') . '">', '</a>'),	'IMG_STATUS'			=> ($img_status) ? $user->lang['IMAGES_ARE_ON'] : $user->lang['IMAGES_ARE_OFF'],	'FLASH_STATUS'			=> ($flash_status) ? $user->lang['FLASH_IS_ON'] : $user->lang['FLASH_IS_OFF'],	'SMILIES_STATUS'		=> ($smilies_status) ? $user->lang['SMILIES_ARE_ON'] : $user->lang['SMILIES_ARE_OFF'],	'URL_STATUS'			=> ($bbcode_status && $url_status) ? $user->lang['URL_IS_ON'] : $user->lang['URL_IS_OFF'],	'MAX_FONT_SIZE'			=> (int) $config['max_post_font_size'],	'MINI_POST_IMG'			=> $user->img('icon_post_target', $user->lang['POST']),	'POST_DATE'				=> ($post_data['post_time']) ? $user->format_date($post_data['post_time']) : '',	'ERROR'					=> (sizeof($error)) ? implode('<br />', $error) : '',	'TOPIC_TIME_LIMIT'		=> (int) $post_data['topic_time_limit'],	'EDIT_REASON'			=> $post_data['post_edit_reason'],	'U_VIEW_FORUM'			=> append_sid("{$phpbb_root_path}viewforum.$phpEx", "f=$forum_id"),	'U_VIEW_TOPIC'			=> ($mode != 'post') ? append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id") : '',	'U_PROGRESS_BAR'		=> append_sid("{$phpbb_root_path}posting.$phpEx", "f=$forum_id&amp;mode=popup"),	'UA_PROGRESS_BAR'		=> addslashes(append_sid("{$phpbb_root_path}posting.$phpEx", "f=$forum_id&amp;mode=popup")),	'S_PRIVMSGS'				=> false,	'S_CLOSE_PROGRESS_WINDOW'	=> (isset($_POST['add_file'])) ? true : false,	'S_EDIT_POST'				=> ($mode == 'edit') ? true : false,	'S_EDIT_REASON'				=> ($mode == 'edit' && $auth->acl_get('m_edit', $forum_id)) ? true : false,	'S_DISPLAY_USERNAME'		=> (!$user->data['is_registered'] || ($mode == 'edit' && $post_data['poster_id'] == ANONYMOUS)) ? true : false,	'S_SHOW_TOPIC_ICONS'		=> $s_topic_icons,	'S_DELETE_ALLOWED'			=> ($mode == 'edit' && (($post_id == $post_data['topic_last_post_id'] && $post_data['poster_id'] == $user->data['user_id'] && $auth->acl_get('f_delete', $forum_id) && !$post_data['post_edit_locked'] && ($post_data['post_time'] > time() - ($config['delete_time'] * 60) || !$config['delete_time'])) || $auth->acl_get('m_delete', $forum_id))) ? true : false,	'S_BBCODE_ALLOWED'			=> ($bbcode_status) ? 1 : 0,	'S_BBCODE_CHECKED'			=> ($bbcode_checked) ? ' checked="checked"' : '',	'S_SMILIES_ALLOWED'			=> $smilies_status,	'S_SMILIES_CHECKED'			=> ($smilies_checked) ? ' checked="checked"' : '',	'S_SIG_ALLOWED'				=> ($auth->acl_get('f_sigs', $forum_id) && $config['allow_sig'] && $user->data['is_registered']) ? true : false,	'S_SIGNATURE_CHECKED'		=> ($sig_checked) ? ' checked="checked"' : '',	'S_NOTIFY_ALLOWED'			=> (!$user->data['is_registered'] || ($mode == 'edit' && $user->data['user_id'] != $post_data['poster_id']) || !$config['allow_topic_notify'] || !$config['email_enable']) ? false : true,	'S_NOTIFY_CHECKED'			=> ($notify_checked) ? ' checked="checked"' : '',	'S_LOCK_TOPIC_ALLOWED'		=> (($mode == 'edit' || $mode == 'reply' || $mode == 'quote') && ($auth->acl_get('m_lock', $forum_id) || ($auth->acl_get('f_user_lock', $forum_id) && $user->data['is_registered'] && !empty($post_data['topic_poster']) && $user->data['user_id'] == $post_data['topic_poster'] && $post_data['topic_status'] == ITEM_UNLOCKED))) ? true : false,	'S_LOCK_TOPIC_CHECKED'		=> ($lock_topic_checked) ? ' checked="checked"' : '',	'S_LOCK_POST_ALLOWED'		=> ($mode == 'edit' && $auth->acl_get('m_edit', $forum_id)) ? true : false,	'S_LOCK_POST_CHECKED'		=> ($lock_post_checked) ? ' checked="checked"' : '',	'S_LINKS_ALLOWED'			=> $url_status,	'S_MAGIC_URL_CHECKED'		=> ($urls_checked) ? ' checked="checked"' : '',	'S_TYPE_TOGGLE'				=> $topic_type_toggle,	'S_SAVE_ALLOWED'			=> ($auth->acl_get('u_savedrafts') && $user->data['is_registered'] && $mode != 'edit') ? true : false,	'S_HAS_DRAFTS'				=> ($auth->acl_get('u_savedrafts') && $user->data['is_registered'] && $post_data['drafts']) ? true : false,	'S_FORM_ENCTYPE'			=> $form_enctype,	'S_BBCODE_IMG'			=> $img_status,	'S_BBCODE_URL'			=> $url_status,	'S_BBCODE_FLASH'		=> $flash_status,	'S_BBCODE_QUOTE'		=> $quote_status,	'S_POST_ACTION'			=> $s_action,	'S_HIDDEN_FIELDS'		=> $s_hidden_fields));// Build custom bbcodes arraydisplay_custom_bbcodes();// Poll entryif (($mode == 'post' || ($mode == 'edit' && $post_id == $post_data['topic_first_post_id']/* && (!$post_data['poll_last_vote'] || $auth->acl_get('m_edit', $forum_id))*/))	&& $auth->acl_get('f_poll', $forum_id)){	$template->assign_vars(array(		'S_SHOW_POLL_BOX'		=> true,		'S_POLL_VOTE_CHANGE'	=> ($auth->acl_get('f_votechg', $forum_id) && $auth->acl_get('f_vote', $forum_id)),		'S_POLL_DELETE'			=> ($mode == 'edit' && sizeof($post_data['poll_options']) && ((!$post_data['poll_last_vote'] && $post_data['poster_id'] == $user->data['user_id'] && $auth->acl_get('f_delete', $forum_id)) || $auth->acl_get('m_delete', $forum_id))),		'S_POLL_DELETE_CHECKED'	=> (!empty($poll_delete)) ? true : false,		'L_POLL_OPTIONS_EXPLAIN'	=> sprintf($user->lang['POLL_OPTIONS_' . (($mode == 'edit') ? 'EDIT_' : '') . 'EXPLAIN'], $config['max_poll_options']),		'VOTE_CHANGE_CHECKED'	=> (!empty($post_data['poll_vote_change'])) ? ' checked="checked"' : '',		'POLL_TITLE'			=> (isset($post_data['poll_title'])) ? $post_data['poll_title'] : '',		'POLL_OPTIONS'			=> (!empty($post_data['poll_options'])) ? implode("\n", $post_data['poll_options']) : '',		'POLL_MAX_OPTIONS'		=> (isset($post_data['poll_max_options'])) ? (int) $post_data['poll_max_options'] : 1,		'POLL_LENGTH'			=> $post_data['poll_length'])	);}// Show attachment box for adding attachments if true$allowed = ($auth->acl_get('f_attach', $forum_id) && $auth->acl_get('u_attach') && $config['allow_attachments'] && $form_enctype);// Attachment entryposting_gen_attachment_entry($attachment_data, $filename_data, $allowed);// Output page ...page_header($page_title, false);$template->set_filenames(array(	'body' => 'posting_body.html'));make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"));// Topic reviewif ($mode == 'reply' || $mode == 'quote'){	if (topic_review($topic_id, $forum_id))	{		$template->assign_var('S_DISPLAY_REVIEW', true);	}}page_footer();/*** Show upload popup (progress bar)*/function upload_popup($forum_style = 0){	global $template, $user;	($forum_style) ? $user->setup('posting', $forum_style) : $user->setup('posting');	page_header($user->lang['PROGRESS_BAR'], false);	$template->set_filenames(array(		'popup'	=> 'posting_progress_bar.html')	);	$template->assign_vars(array(		'PROGRESS_BAR'	=> $user->img('upload_bar', $user->lang['UPLOAD_IN_PROGRESS']))	);	$template->display('popup');	garbage_collection();	exit_handler();}/*** Do the various checks required for removing posts as well as removing it*/function handle_post_delete($forum_id, $topic_id, $post_id, &$post_data){	global $user, $db, $auth, $config;	global $phpbb_root_path, $phpEx;	// If moderator removing post or user itself removing post, present a confirmation screen	if ($auth->acl_get('m_delete', $forum_id) || ($post_data['poster_id'] == $user->data['user_id'] && $user->data['is_registered'] && $auth->acl_get('f_delete', $forum_id) && $post_id == $post_data['topic_last_post_id'] && !$post_data['post_edit_locked'] && ($post_data['post_time'] > time() - ($config['delete_time'] * 60) || !$config['delete_time'])))	{		$s_hidden_fields = build_hidden_fields(array(			'p'		=> $post_id,			'f'		=> $forum_id,			'mode'	=> 'delete')		);		if (confirm_box(true))		{			$data = array(				'topic_first_post_id'	=> $post_data['topic_first_post_id'],				'topic_last_post_id'	=> $post_data['topic_last_post_id'],				'topic_replies_real'	=> $post_data['topic_replies_real'],				'topic_approved'		=> $post_data['topic_approved'],				'topic_type'			=> $post_data['topic_type'],				'post_approved'			=> $post_data['post_approved'],				'post_reported'			=> $post_data['post_reported'],				'post_time'				=> $post_data['post_time'],				'poster_id'				=> $post_data['poster_id'],				'post_postcount'		=> $post_data['post_postcount']			);			$next_post_id = delete_post($forum_id, $topic_id, $post_id, $data);			$post_username = ($post_data['poster_id'] == ANONYMOUS && !empty($post_data['post_username'])) ? $post_data['post_username'] : $post_data['username'];			if ($next_post_id === false)			{				add_log('mod', $forum_id, $topic_id, 'LOG_DELETE_TOPIC', $post_data['topic_title'], $post_username);				$meta_info = append_sid("{$phpbb_root_path}viewforum.$phpEx", "f=$forum_id");				$message = $user->lang['POST_DELETED'];			}			else			{				add_log('mod', $forum_id, $topic_id, 'LOG_DELETE_POST', $post_data['post_subject'], $post_username);				$meta_info = append_sid("{$phpbb_root_path}viewtopic.$phpEx", "f=$forum_id&amp;t=$topic_id&amp;p=$next_post_id") . "#p$next_post_id";				$message = $user->lang['POST_DELETED'] . '<br /><br />' . sprintf($user->lang['RETURN_TOPIC'], '<a href="' . $meta_info . '">', '</a>');			}			meta_refresh(3, $meta_info);			$message .= '<br /><br />' . sprintf($user->lang['RETURN_FORUM'], '<a href="' . append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id) . '">', '</a>');			trigger_error($message);		}		else		{			confirm_box(false, 'DELETE_POST', $s_hidden_fields);		}	}	// If we are here the user is not able to delete - present the correct error message	if ($post_data['poster_id'] != $user->data['user_id'] && $auth->acl_get('f_delete', $forum_id))	{		trigger_error('DELETE_OWN_POSTS');	}	if ($post_data['poster_id'] == $user->data['user_id'] && $auth->acl_get('f_delete', $forum_id) && $post_id != $post_data['topic_last_post_id'])	{		trigger_error('CANNOT_DELETE_REPLIED');	}	trigger_error('USER_CANNOT_DELETE');}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/define('IN_PHPBB', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './';$phpEx = substr(strrchr(__FILE__, '.'), 1);include($phpbb_root_path . 'common.' . $phpEx);// Start session management$user->session_begin();$auth->acl($user->data);$user->setup('memberlist');// Get and set some variables$mode		= request_var('mode', '');$session_id	= request_var('s', '');$start		= request_var('start', 0);$sort_key	= request_var('sk', 'b');$sort_dir	= request_var('sd', 'd');$show_guests= ($config['load_online_guests']) ? request_var('sg', 0) : 0;// Can this user view profiles/memberlist?if (!$auth->acl_gets('u_viewprofile', 'a_user', 'a_useradd', 'a_userdel')){	if ($user->data['user_id'] != ANONYMOUS)	{		trigger_error('NO_VIEW_USERS');	}	login_box('', $user->lang['LOGIN_EXPLAIN_VIEWONLINE']);}$sort_key_text = array('a' => $user->lang['SORT_USERNAME'], 'b' => $user->lang['SORT_JOINED'], 'c' => $user->lang['SORT_LOCATION']);$sort_key_sql = array('a' => 'u.username_clean', 'b' => 's.session_time', 'c' => 's.session_page');// Sorting and orderif (!isset($sort_key_text[$sort_key])){	$sort_key = 'b';}$order_by = $sort_key_sql[$sort_key] . ' ' . (($sort_dir == 'a') ? 'ASC' : 'DESC');// Whois requestedif ($mode == 'whois' && $auth->acl_get('a_') && $session_id){	include($phpbb_root_path . 'includes/functions_user.' . $phpEx);	$sql = 'SELECT u.user_id, u.username, u.user_type, s.session_ip		FROM ' . USERS_TABLE . ' u, ' . SESSIONS_TABLE . " s		WHERE s.session_id = '" . $db->sql_escape($session_id) . "'			AND	u.user_id = s.session_user_id";	$result = $db->sql_query($sql);	if ($row = $db->sql_fetchrow($result))	{		$template->assign_var('WHOIS', user_ipwhois($row['session_ip']));	}	$db->sql_freeresult($result);	// Output the page	page_header($user->lang['WHO_IS_ONLINE']);	$template->set_filenames(array(		'body' => 'viewonline_whois.html')	);	make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"));	page_footer();}// Forum info$sql = 'SELECT forum_id, forum_name, parent_id, forum_type, left_id, right_id	FROM ' . FORUMS_TABLE . '	ORDER BY left_id ASC';$result = $db->sql_query($sql, 600);$forum_data = array();while ($row = $db->sql_fetchrow($result)){	$forum_data[$row['forum_id']] = $row;}$db->sql_freeresult($result);$guest_counter = 0;// Get number of online guests (if we do not display them)if (!$show_guests){	switch ($db->sql_layer)	{		case 'sqlite':			$sql = 'SELECT COUNT(session_ip) as num_guests				FROM (					SELECT DISTINCT session_ip						FROM ' . SESSIONS_TABLE . '						WHERE session_user_id = ' . ANONYMOUS . '							AND session_time >= ' . (time() - ($config['load_online_time'] * 60)) .				')';		break;		default:			$sql = 'SELECT COUNT(DISTINCT session_ip) as num_guests				FROM ' . SESSIONS_TABLE . '				WHERE session_user_id = ' . ANONYMOUS . '					AND session_time >= ' . (time() - ($config['load_online_time'] * 60));		break;	}	$result = $db->sql_query($sql);	$guest_counter = (int) $db->sql_fetchfield('num_guests');	$db->sql_freeresult($result);}// Get user list$sql = 'SELECT u.user_id, u.username, u.username_clean, u.user_type, u.user_colour, s.session_id, s.session_time, s.session_page, s.session_ip, s.session_browser, s.session_viewonline, s.session_forum_id	FROM ' . USERS_TABLE . ' u, ' . SESSIONS_TABLE . ' s	WHERE u.user_id = s.session_user_id		AND s.session_time >= ' . (time() - ($config['load_online_time'] * 60)) .		((!$show_guests) ? ' AND s.session_user_id <> ' . ANONYMOUS : '') . '	ORDER BY ' . $order_by;$result = $db->sql_query($sql);$prev_id = $prev_ip = $user_list = array();$logged_visible_online = $logged_hidden_online = $counter = 0;while ($row = $db->sql_fetchrow($result)){	if ($row['user_id'] != ANONYMOUS && !isset($prev_id[$row['user_id']]))	{		$view_online = $s_user_hidden = false;		$user_colour = ($row['user_colour']) ? ' style="color:#' . $row['user_colour'] . '" class="username-coloured"' : '';		$username_full = ($row['user_type'] != USER_IGNORE) ? get_username_string('full', $row['user_id'], $row['username'], $row['user_colour']) : '<span' . $user_colour . '>' . $row['username'] . '</span>';		if (!$row['session_viewonline'])		{			$view_online = ($auth->acl_get('u_viewonline')) ? true : false;			$logged_hidden_online++;			$username_full = '<em>' . $username_full . '</em>';			$s_user_hidden = true;		}		else		{			$view_online = true;			$logged_visible_online++;		}		$prev_id[$row['user_id']] = 1;		if ($view_online)		{			$counter++;		}		if (!$view_online || $counter > $start + $config['topics_per_page'] || $counter <= $start)		{			continue;		}	}	else if ($show_guests && $row['user_id'] == ANONYMOUS && !isset($prev_ip[$row['session_ip']]))	{		$prev_ip[$row['session_ip']] = 1;		$guest_counter++;		$counter++;		if ($counter > $start + $config['topics_per_page'] || $counter <= $start)		{			continue;		}		$s_user_hidden = false;		$username_full = get_username_string('full', $row['user_id'], $user->lang['GUEST']);	}	else	{		continue;	}	preg_match('#^([a-z0-9/_-]+)#i', $row['session_page'], $on_page);	if (!sizeof($on_page))	{		$on_page[1] = '';	}	switch ($on_page[1])	{		case 'index':			$location = $user->lang['INDEX'];			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;		case 'adm/index':			$location = $user->lang['ACP'];			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;		case 'posting':		case 'viewforum':		case 'viewtopic':			$forum_id = $row['session_forum_id'];			if ($forum_id && $auth->acl_get('f_list', $forum_id))			{				$location = '';				$location_url = append_sid("{$phpbb_root_path}viewforum.$phpEx", 'f=' . $forum_id);				if ($forum_data[$forum_id]['forum_type'] == FORUM_LINK)				{					$location = sprintf($user->lang['READING_LINK'], $forum_data[$forum_id]['forum_name']);					break;				}				switch ($on_page[1])				{					case 'posting':						preg_match('#mode=([a-z]+)#', $row['session_page'], $on_page);						$posting_mode = (!empty($on_page[1])) ? $on_page[1] : '';						switch ($posting_mode)						{							case 'reply':							case 'quote':								$location = sprintf($user->lang['REPLYING_MESSAGE'], $forum_data[$forum_id]['forum_name']);							break;							default:								$location = sprintf($user->lang['POSTING_MESSAGE'], $forum_data[$forum_id]['forum_name']);							break;						}					break;					case 'viewtopic':						$location = sprintf($user->lang['READING_TOPIC'], $forum_data[$forum_id]['forum_name']);					break;					case 'viewforum':						$location = sprintf($user->lang['READING_FORUM'], $forum_data[$forum_id]['forum_name']);					break;				}			}			else			{				$location = $user->lang['INDEX'];				$location_url = append_sid("{$phpbb_root_path}index.$phpEx");			}		break;		case 'search':			$location = $user->lang['SEARCHING_FORUMS'];			$location_url = append_sid("{$phpbb_root_path}search.$phpEx");		break;		case 'faq':			$location = $user->lang['VIEWING_FAQ'];			$location_url = append_sid("{$phpbb_root_path}faq.$phpEx");		break;		case 'viewonline':			$location = $user->lang['VIEWING_ONLINE'];			$location_url = append_sid("{$phpbb_root_path}viewonline.$phpEx");		break;		case 'memberlist':			$location = (strpos($row['session_page'], 'mode=viewprofile') !== false) ? $user->lang['VIEWING_MEMBER_PROFILE'] : $user->lang['VIEWING_MEMBERS'];			$location_url = append_sid("{$phpbb_root_path}memberlist.$phpEx");		break;		case 'mcp':			$location = $user->lang['VIEWING_MCP'];			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;		case 'ucp':			$location = $user->lang['VIEWING_UCP'];			// Grab some common modules			$url_params = array(				'mode=register'		=> 'VIEWING_REGISTER',				'i=pm&mode=compose'	=> 'POSTING_PRIVATE_MESSAGE',				'i=pm&'				=> 'VIEWING_PRIVATE_MESSAGES',				'i=profile&'		=> 'CHANGING_PROFILE',				'i=prefs&'			=> 'CHANGING_PREFERENCES',			);			foreach ($url_params as $param => $lang)			{				if (strpos($row['session_page'], $param) !== false)				{					$location = $user->lang[$lang];					break;				}			}			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;		case 'download/file':			$location = $user->lang['DOWNLOADING_FILE'];			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;		case 'report':			$location = $user->lang['REPORTING_POST'];			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;		default:			$location = $user->lang['INDEX'];			$location_url = append_sid("{$phpbb_root_path}index.$phpEx");		break;	}	$template->assign_block_vars('user_row', array(		'USERNAME' 			=> $row['username'],		'USERNAME_COLOUR'	=> $row['user_colour'],		'USERNAME_FULL'		=> $username_full,		'LASTUPDATE'		=> $user->format_date($row['session_time']),		'FORUM_LOCATION'	=> $location,		'USER_IP'			=> ($auth->acl_get('a_')) ? (($mode == 'lookup' && $session_id == $row['session_id']) ? gethostbyaddr($row['session_ip']) : $row['session_ip']) : '',		'USER_BROWSER'		=> ($auth->acl_get('a_user')) ? $row['session_browser'] : '',		'U_USER_PROFILE'	=> ($row['user_type'] != USER_IGNORE) ? get_username_string('profile', $row['user_id'], '') : '',		'U_USER_IP'			=> append_sid("{$phpbb_root_path}viewonline.$phpEx", 'mode=lookup' . (($mode != 'lookup' || $row['session_id'] != $session_id) ? '&amp;s=' . $row['session_id'] : '') . "&amp;sg=$show_guests&amp;start=$start&amp;sk=$sort_key&amp;sd=$sort_dir"),		'U_WHOIS'			=> append_sid("{$phpbb_root_path}viewonline.$phpEx", 'mode=whois&amp;s=' . $row['session_id']),		'U_FORUM_LOCATION'	=> $location_url,		'S_USER_HIDDEN'		=> $s_user_hidden,		'S_GUEST'			=> ($row['user_id'] == ANONYMOUS) ? true : false,		'S_USER_TYPE'		=> $row['user_type'],	));}$db->sql_freeresult($result);unset($prev_id, $prev_ip);// Generate reg/hidden/guest online text$vars_online = array(	'REG'	=> array('logged_visible_online', 'l_r_user_s'),	'HIDDEN'=> array('logged_hidden_online', 'l_h_user_s'),	'GUEST'	=> array('guest_counter', 'l_g_user_s'));foreach ($vars_online as $l_prefix => $var_ary){	switch ($$var_ary[0])	{		case 0:			$$var_ary[1] = $user->lang[$l_prefix . '_USERS_ZERO_ONLINE'];		break;		case 1:			$$var_ary[1] = $user->lang[$l_prefix . '_USER_ONLINE'];		break;		default:			$$var_ary[1] = $user->lang[$l_prefix . '_USERS_ONLINE'];		break;	}}unset($vars_online);$pagination = generate_pagination(append_sid("{$phpbb_root_path}viewonline.$phpEx", "sg=$show_guests&amp;sk=$sort_key&amp;sd=$sort_dir"), $counter, $config['topics_per_page'], $start);// Grab group details for legend displayif ($auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel')){	$sql = 'SELECT group_id, group_name, group_colour, group_type		FROM ' . GROUPS_TABLE . '		WHERE group_legend = 1		ORDER BY group_name ASC';}else{	$sql = 'SELECT g.group_id, g.group_name, g.group_colour, g.group_type		FROM ' . GROUPS_TABLE . ' g		LEFT JOIN ' . USER_GROUP_TABLE . ' ug			ON (				g.group_id = ug.group_id				AND ug.user_id = ' . $user->data['user_id'] . '				AND ug.user_pending = 0			)		WHERE g.group_legend = 1			AND (g.group_type <> ' . GROUP_HIDDEN . ' OR ug.user_id = ' . $user->data['user_id'] . ')		ORDER BY g.group_name ASC';}$result = $db->sql_query($sql);$legend = '';while ($row = $db->sql_fetchrow($result)){	if ($row['group_name'] == 'BOTS')	{		$legend .= (($legend != '') ? ', ' : '') . '<span style="color:#' . $row['group_colour'] . '">' . $user->lang['G_BOTS'] . '</span>';	}	else	{		$legend .= (($legend != '') ? ', ' : '') . '<a style="color:#' . $row['group_colour'] . '" href="' . append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=group&amp;g=' . $row['group_id']) . '">' . (($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name']) . '</a>';	}}$db->sql_freeresult($result);// Refreshing the page every 60 seconds...meta_refresh(60, append_sid("{$phpbb_root_path}viewonline.$phpEx", "sg=$show_guests&amp;sk=$sort_key&amp;sd=$sort_dir&amp;start=$start"));// Send data to template$template->assign_vars(array(	'TOTAL_REGISTERED_USERS_ONLINE'	=> sprintf($l_r_user_s, $logged_visible_online) . sprintf($l_h_user_s, $logged_hidden_online),	'TOTAL_GUEST_USERS_ONLINE'		=> sprintf($l_g_user_s, $guest_counter),	'LEGEND'						=> $legend,	'PAGINATION'					=> $pagination,	'PAGE_NUMBER'					=> on_page($counter, $config['topics_per_page'], $start),	'U_SORT_USERNAME'		=> append_sid("{$phpbb_root_path}viewonline.$phpEx", 'sk=a&amp;sd=' . (($sort_key == 'a' && $sort_dir == 'a') ? 'd' : 'a') . '&amp;sg=' . ((int) $show_guests)),	'U_SORT_UPDATED'		=> append_sid("{$phpbb_root_path}viewonline.$phpEx", 'sk=b&amp;sd=' . (($sort_key == 'b' && $sort_dir == 'a') ? 'd' : 'a') . '&amp;sg=' . ((int) $show_guests)),	'U_SORT_LOCATION'		=> append_sid("{$phpbb_root_path}viewonline.$phpEx", 'sk=c&amp;sd=' . (($sort_key == 'c' && $sort_dir == 'a') ? 'd' : 'a') . '&amp;sg=' . ((int) $show_guests)),	'U_SWITCH_GUEST_DISPLAY'	=> append_sid("{$phpbb_root_path}viewonline.$phpEx", 'sg=' . ((int) !$show_guests)),	'L_SWITCH_GUEST_DISPLAY'	=> ($show_guests) ? $user->lang['HIDE_GUESTS'] : $user->lang['DISPLAY_GUESTS'],	'S_SWITCH_GUEST_DISPLAY'	=> ($config['load_online_guests']) ? true : false));// We do not need to load the who is online box here. ;)$config['load_online'] = false;// Output the pagepage_header($user->lang['WHO_IS_ONLINE']);$template->set_filenames(array(	'body' => 'viewonline_body.html'));make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"));page_footer();?>
<?php/**** @package utf* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//***/if (!defined('IN_PHPBB')){	exit;}// Enforce ASCII only string handlingsetlocale(LC_CTYPE, 'C');/*** UTF-8 tools** Whenever possible, these functions will try to use PHP's built-in functions or* extensions, otherwise they will default to custom routines.** @package utf*/if (!extension_loaded('xml')){	/**	* Implementation of PHP's native utf8_encode for people without XML support	* This function exploits some nice things that ISO-8859-1 and UTF-8 have in common	*	* @param string $str ISO-8859-1 encoded data	* @return string UTF-8 encoded data	*/	function utf8_encode($str)	{		$out = '';		for ($i = 0, $len = strlen($str); $i < $len; $i++)		{			$letter = $str[$i];			$num = ord($letter);			if ($num < 0x80)			{				$out .= $letter;			}			else if ($num < 0xC0)			{				$out .= "\xC2" . $letter;			}			else			{				$out .= "\xC3" . chr($num - 64);			}		}		return $out;	}	/**	* Implementation of PHP's native utf8_decode for people without XML support	*	* @param string $str UTF-8 encoded data	* @return string ISO-8859-1 encoded data	*/	function utf8_decode($str)	{		$pos = 0;		$len = strlen($str);		$ret = '';		while ($pos < $len)		{			$ord = ord($str[$pos]) & 0xF0;			if ($ord === 0xC0 || $ord === 0xD0)			{				$charval = ((ord($str[$pos]) & 0x1F) << 6) | (ord($str[$pos + 1]) & 0x3F);				$pos += 2;				$ret .= (($charval < 256) ? chr($charval) : '?');			}			else if ($ord === 0xE0)			{				$ret .= '?';				$pos += 3;			}			else if ($ord === 0xF0)			{				$ret .= '?';				$pos += 4;			}			else			{				$ret .= $str[$pos];				++$pos;			}		}		return $ret;	}}// mbstring is old and has it's functions around for older versions of PHP.// if mbstring is not loaded, we go into native mode.if (extension_loaded('mbstring')){	mb_internal_encoding('UTF-8');	/**	* UTF-8 aware alternative to strrpos	* Find position of last occurrence of a char in a string	*	* Notes:	* - offset for mb_strrpos was added in 5.2.0, we emulate if it is lower	*/	if (version_compare(PHP_VERSION, '5.2.0', '>='))	{		/**		* UTF-8 aware alternative to strrpos		* @ignore		*/		function utf8_strrpos($str,	$needle, $offset = null)		{			// Emulate behaviour of strrpos rather than raising warning			if (empty($str))			{				return false;			}			if (is_null($offset))			{				return mb_strrpos($str, $needle);			}			else			{				return mb_strrpos($str, $needle, $offset);			}		}	}	else	{		/**		* UTF-8 aware alternative to strrpos		* @ignore		*/		function utf8_strrpos($str,	$needle, $offset = null)		{			// offset for mb_strrpos was added in 5.2.0			if (is_null($offset))			{				// Emulate behaviour of strrpos rather than raising warning				if (empty($str))				{					return false;				}				return mb_strrpos($str, $needle);			}			else			{				if (!is_int($offset))				{					trigger_error('utf8_strrpos expects parameter 3 to be long', E_USER_ERROR);					return false;				}				$str = mb_substr($str, $offset);				if (false !== ($pos = mb_strrpos($str, $needle)))				{					return $pos + $offset;				}				return false;			}		}	}	/**	* UTF-8 aware alternative to strpos	* @ignore	*/	function utf8_strpos($str, $needle, $offset = null)	{		if (is_null($offset))		{			return mb_strpos($str, $needle);		}		else		{			return mb_strpos($str, $needle, $offset);		}	}	/**	* UTF-8 aware alternative to strtolower	* @ignore	*/	function utf8_strtolower($str)	{		return mb_strtolower($str);	}	/**	* UTF-8 aware alternative to strtoupper	* @ignore	*/	function utf8_strtoupper($str)	{		return mb_strtoupper($str);	}	/**	* UTF-8 aware alternative to substr	* @ignore	*/	function utf8_substr($str, $offset, $length = null)	{		if (is_null($length))		{			return mb_substr($str, $offset);		}		else		{			return mb_substr($str, $offset, $length);		}	}	/**	* Return the length (in characters) of a UTF-8 string	* @ignore	*/	function utf8_strlen($text)	{		return mb_strlen($text, 'utf-8');	}}else{	/**	* UTF-8 aware alternative to strrpos	* Find position of last occurrence of a char in a string	*	* @author Harry Fuecks	* @param string $str haystack	* @param string $needle needle	* @param integer $offset (optional) offset (from left)	* @return mixed integer position or FALSE on failure	*/	function utf8_strrpos($str,	$needle, $offset = null)	{		if (is_null($offset))		{			$ar	= explode($needle, $str);			if (sizeof($ar) > 1)			{				// Pop off the end of the string where the last	match was made				array_pop($ar);				$str = join($needle, $ar);				return utf8_strlen($str);			}			return false;		}		else		{			if (!is_int($offset))			{				trigger_error('utf8_strrpos	expects	parameter 3	to be long', E_USER_ERROR);				return false;			}			$str = utf8_substr($str, $offset);			if (false !== ($pos = utf8_strrpos($str, $needle)))			{				return $pos	+ $offset;			}			return false;		}	}	/**	* UTF-8 aware alternative to strpos	* Find position of first occurrence of a string	*	* @author Harry Fuecks	* @param string $str haystack	* @param string $needle needle	* @param integer $offset offset in characters (from left)	* @return mixed integer position or FALSE on failure	*/	function utf8_strpos($str, $needle, $offset = null)	{		if (is_null($offset))		{			$ar = explode($needle, $str);			if (sizeof($ar) > 1)			{				return utf8_strlen($ar[0]);			}			return false;		}		else		{			if (!is_int($offset))			{				trigger_error('utf8_strpos:  Offset must  be an integer', E_USER_ERROR);				return false;			}			$str = utf8_substr($str, $offset);			if (false !== ($pos = utf8_strpos($str, $needle)))			{				return $pos + $offset;			}			return false;		}	}	/**	* UTF-8 aware alternative to strtolower	* Make a string lowercase	* Note: The concept of a characters "case" only exists is some alphabets	* such as Latin, Greek, Cyrillic, Armenian and archaic Georgian - it does	* not exist in the Chinese alphabet, for example. See Unicode Standard	* Annex #21: Case Mappings	*	* @param string	* @return string string in lowercase	*/	function utf8_strtolower($string)	{		static $utf8_upper_to_lower = array(			"\xC3\x80" => "\xC3\xA0", "\xC3\x81" => "\xC3\xA1",			"\xC3\x82" => "\xC3\xA2", "\xC3\x83" => "\xC3\xA3", "\xC3\x84" => "\xC3\xA4", "\xC3\x85" => "\xC3\xA5",			"\xC3\x86" => "\xC3\xA6", "\xC3\x87" => "\xC3\xA7", "\xC3\x88" => "\xC3\xA8", "\xC3\x89" => "\xC3\xA9",			"\xC3\x8A" => "\xC3\xAA", "\xC3\x8B" => "\xC3\xAB", "\xC3\x8C" => "\xC3\xAC", "\xC3\x8D" => "\xC3\xAD",			"\xC3\x8E" => "\xC3\xAE", "\xC3\x8F" => "\xC3\xAF", "\xC3\x90" => "\xC3\xB0", "\xC3\x91" => "\xC3\xB1",			"\xC3\x92" => "\xC3\xB2", "\xC3\x93" => "\xC3\xB3", "\xC3\x94" => "\xC3\xB4", "\xC3\x95" => "\xC3\xB5",			"\xC3\x96" => "\xC3\xB6", "\xC3\x98" => "\xC3\xB8", "\xC3\x99" => "\xC3\xB9", "\xC3\x9A" => "\xC3\xBA",			"\xC3\x9B" => "\xC3\xBB", "\xC3\x9C" => "\xC3\xBC", "\xC3\x9D" => "\xC3\xBD", "\xC3\x9E" => "\xC3\xBE",			"\xC4\x80" => "\xC4\x81", "\xC4\x82" => "\xC4\x83", "\xC4\x84" => "\xC4\x85", "\xC4\x86" => "\xC4\x87",			"\xC4\x88" => "\xC4\x89", "\xC4\x8A" => "\xC4\x8B", "\xC4\x8C" => "\xC4\x8D", "\xC4\x8E" => "\xC4\x8F",			"\xC4\x90" => "\xC4\x91", "\xC4\x92" => "\xC4\x93", "\xC4\x96" => "\xC4\x97", "\xC4\x98" => "\xC4\x99",			"\xC4\x9A" => "\xC4\x9B", "\xC4\x9C" => "\xC4\x9D", "\xC4\x9E" => "\xC4\x9F", "\xC4\xA0" => "\xC4\xA1",			"\xC4\xA2" => "\xC4\xA3", "\xC4\xA4" => "\xC4\xA5", "\xC4\xA6" => "\xC4\xA7", "\xC4\xA8" => "\xC4\xA9",			"\xC4\xAA" => "\xC4\xAB", "\xC4\xAE" => "\xC4\xAF", "\xC4\xB4" => "\xC4\xB5", "\xC4\xB6" => "\xC4\xB7",			"\xC4\xB9" => "\xC4\xBA", "\xC4\xBB" => "\xC4\xBC", "\xC4\xBD" => "\xC4\xBE", "\xC5\x81" => "\xC5\x82",			"\xC5\x83" => "\xC5\x84", "\xC5\x85" => "\xC5\x86", "\xC5\x87" => "\xC5\x88", "\xC5\x8A" => "\xC5\x8B",			"\xC5\x8C" => "\xC5\x8D", "\xC5\x90" => "\xC5\x91", "\xC5\x94" => "\xC5\x95", "\xC5\x96" => "\xC5\x97",			"\xC5\x98" => "\xC5\x99", "\xC5\x9A" => "\xC5\x9B", "\xC5\x9C" => "\xC5\x9D", "\xC5\x9E" => "\xC5\x9F",			"\xC5\xA0" => "\xC5\xA1", "\xC5\xA2" => "\xC5\xA3", "\xC5\xA4" => "\xC5\xA5", "\xC5\xA6" => "\xC5\xA7",			"\xC5\xA8" => "\xC5\xA9", "\xC5\xAA" => "\xC5\xAB", "\xC5\xAC" => "\xC5\xAD", "\xC5\xAE" => "\xC5\xAF",			"\xC5\xB0" => "\xC5\xB1", "\xC5\xB2" => "\xC5\xB3", "\xC5\xB4" => "\xC5\xB5", "\xC5\xB6" => "\xC5\xB7",			"\xC5\xB8" => "\xC3\xBF", "\xC5\xB9" => "\xC5\xBA", "\xC5\xBB" => "\xC5\xBC", "\xC5\xBD" => "\xC5\xBE",			"\xC6\xA0" => "\xC6\xA1", "\xC6\xAF" => "\xC6\xB0", "\xC8\x98" => "\xC8\x99", "\xC8\x9A" => "\xC8\x9B",			"\xCE\x86" => "\xCE\xAC", "\xCE\x88" => "\xCE\xAD", "\xCE\x89" => "\xCE\xAE", "\xCE\x8A" => "\xCE\xAF",			"\xCE\x8C" => "\xCF\x8C", "\xCE\x8E" => "\xCF\x8D", "\xCE\x8F" => "\xCF\x8E", "\xCE\x91" => "\xCE\xB1",			"\xCE\x92" => "\xCE\xB2", "\xCE\x93" => "\xCE\xB3", "\xCE\x94" => "\xCE\xB4", "\xCE\x95" => "\xCE\xB5",			"\xCE\x96" => "\xCE\xB6", "\xCE\x97" => "\xCE\xB7", "\xCE\x98" => "\xCE\xB8", "\xCE\x99" => "\xCE\xB9",			"\xCE\x9A" => "\xCE\xBA", "\xCE\x9B" => "\xCE\xBB", "\xCE\x9C" => "\xCE\xBC", "\xCE\x9D" => "\xCE\xBD",			"\xCE\x9E" => "\xCE\xBE", "\xCE\x9F" => "\xCE\xBF", "\xCE\xA0" => "\xCF\x80", "\xCE\xA1" => "\xCF\x81",			"\xCE\xA3" => "\xCF\x83", "\xCE\xA4" => "\xCF\x84", "\xCE\xA5" => "\xCF\x85", "\xCE\xA6" => "\xCF\x86",			"\xCE\xA7" => "\xCF\x87", "\xCE\xA8" => "\xCF\x88", "\xCE\xA9" => "\xCF\x89", "\xCE\xAA" => "\xCF\x8A",			"\xCE\xAB" => "\xCF\x8B", "\xD0\x81" => "\xD1\x91", "\xD0\x82" => "\xD1\x92", "\xD0\x83" => "\xD1\x93",			"\xD0\x84" => "\xD1\x94", "\xD0\x85" => "\xD1\x95", "\xD0\x86" => "\xD1\x96", "\xD0\x87" => "\xD1\x97",			"\xD0\x88" => "\xD1\x98", "\xD0\x89" => "\xD1\x99", "\xD0\x8A" => "\xD1\x9A", "\xD0\x8B" => "\xD1\x9B",			"\xD0\x8C" => "\xD1\x9C", "\xD0\x8E" => "\xD1\x9E", "\xD0\x8F" => "\xD1\x9F", "\xD0\x90" => "\xD0\xB0",			"\xD0\x91" => "\xD0\xB1", "\xD0\x92" => "\xD0\xB2", "\xD0\x93" => "\xD0\xB3", "\xD0\x94" => "\xD0\xB4",			"\xD0\x95" => "\xD0\xB5", "\xD0\x96" => "\xD0\xB6", "\xD0\x97" => "\xD0\xB7", "\xD0\x98" => "\xD0\xB8",			"\xD0\x99" => "\xD0\xB9", "\xD0\x9A" => "\xD0\xBA", "\xD0\x9B" => "\xD0\xBB", "\xD0\x9C" => "\xD0\xBC",			"\xD0\x9D" => "\xD0\xBD", "\xD0\x9E" => "\xD0\xBE", "\xD0\x9F" => "\xD0\xBF", "\xD0\xA0" => "\xD1\x80",			"\xD0\xA1" => "\xD1\x81", "\xD0\xA2" => "\xD1\x82", "\xD0\xA3" => "\xD1\x83", "\xD0\xA4" => "\xD1\x84",			"\xD0\xA5" => "\xD1\x85", "\xD0\xA6" => "\xD1\x86", "\xD0\xA7" => "\xD1\x87", "\xD0\xA8" => "\xD1\x88",			"\xD0\xA9" => "\xD1\x89", "\xD0\xAA" => "\xD1\x8A", "\xD0\xAB" => "\xD1\x8B", "\xD0\xAC" => "\xD1\x8C",			"\xD0\xAD" => "\xD1\x8D", "\xD0\xAE" => "\xD1\x8E", "\xD0\xAF" => "\xD1\x8F", "\xD2\x90" => "\xD2\x91",			"\xE1\xB8\x82" => "\xE1\xB8\x83", "\xE1\xB8\x8A" => "\xE1\xB8\x8B", "\xE1\xB8\x9E" => "\xE1\xB8\x9F", "\xE1\xB9\x80" => "\xE1\xB9\x81",			"\xE1\xB9\x96" => "\xE1\xB9\x97", "\xE1\xB9\xA0" => "\xE1\xB9\xA1", "\xE1\xB9\xAA" => "\xE1\xB9\xAB", "\xE1\xBA\x80" => "\xE1\xBA\x81",			"\xE1\xBA\x82" => "\xE1\xBA\x83", "\xE1\xBA\x84" => "\xE1\xBA\x85", "\xE1\xBB\xB2" => "\xE1\xBB\xB3"		);		return strtr(strtolower($string), $utf8_upper_to_lower);	}	/**	* UTF-8 aware alternative to strtoupper	* Make a string uppercase	* Note: The concept of a characters "case" only exists is some alphabets	* such as Latin, Greek, Cyrillic, Armenian and archaic Georgian - it does	* not exist in the Chinese alphabet, for example. See Unicode Standard	* Annex #21: Case Mappings	*	* @param string	* @return string string in uppercase	*/	function utf8_strtoupper($string)	{		static $utf8_lower_to_upper = array(			"\xC3\xA0" => "\xC3\x80", "\xC3\xA1" => "\xC3\x81",			"\xC3\xA2" => "\xC3\x82", "\xC3\xA3" => "\xC3\x83", "\xC3\xA4" => "\xC3\x84", "\xC3\xA5" => "\xC3\x85",			"\xC3\xA6" => "\xC3\x86", "\xC3\xA7" => "\xC3\x87", "\xC3\xA8" => "\xC3\x88", "\xC3\xA9" => "\xC3\x89",			"\xC3\xAA" => "\xC3\x8A", "\xC3\xAB" => "\xC3\x8B", "\xC3\xAC" => "\xC3\x8C", "\xC3\xAD" => "\xC3\x8D",			"\xC3\xAE" => "\xC3\x8E", "\xC3\xAF" => "\xC3\x8F", "\xC3\xB0" => "\xC3\x90", "\xC3\xB1" => "\xC3\x91",			"\xC3\xB2" => "\xC3\x92", "\xC3\xB3" => "\xC3\x93", "\xC3\xB4" => "\xC3\x94", "\xC3\xB5" => "\xC3\x95",			"\xC3\xB6" => "\xC3\x96", "\xC3\xB8" => "\xC3\x98", "\xC3\xB9" => "\xC3\x99", "\xC3\xBA" => "\xC3\x9A",			"\xC3\xBB" => "\xC3\x9B", "\xC3\xBC" => "\xC3\x9C", "\xC3\xBD" => "\xC3\x9D", "\xC3\xBE" => "\xC3\x9E",			"\xC3\xBF" => "\xC5\xB8", "\xC4\x81" => "\xC4\x80", "\xC4\x83" => "\xC4\x82", "\xC4\x85" => "\xC4\x84",			"\xC4\x87" => "\xC4\x86", "\xC4\x89" => "\xC4\x88", "\xC4\x8B" => "\xC4\x8A", "\xC4\x8D" => "\xC4\x8C",			"\xC4\x8F" => "\xC4\x8E", "\xC4\x91" => "\xC4\x90", "\xC4\x93" => "\xC4\x92", "\xC4\x97" => "\xC4\x96",			"\xC4\x99" => "\xC4\x98", "\xC4\x9B" => "\xC4\x9A", "\xC4\x9D" => "\xC4\x9C", "\xC4\x9F" => "\xC4\x9E",			"\xC4\xA1" => "\xC4\xA0", "\xC4\xA3" => "\xC4\xA2", "\xC4\xA5" => "\xC4\xA4", "\xC4\xA7" => "\xC4\xA6",			"\xC4\xA9" => "\xC4\xA8", "\xC4\xAB" => "\xC4\xAA", "\xC4\xAF" => "\xC4\xAE", "\xC4\xB5" => "\xC4\xB4",			"\xC4\xB7" => "\xC4\xB6", "\xC4\xBA" => "\xC4\xB9", "\xC4\xBC" => "\xC4\xBB", "\xC4\xBE" => "\xC4\xBD",			"\xC5\x82" => "\xC5\x81", "\xC5\x84" => "\xC5\x83", "\xC5\x86" => "\xC5\x85", "\xC5\x88" => "\xC5\x87",			"\xC5\x8B" => "\xC5\x8A", "\xC5\x8D" => "\xC5\x8C", "\xC5\x91" => "\xC5\x90", "\xC5\x95" => "\xC5\x94",			"\xC5\x97" => "\xC5\x96", "\xC5\x99" => "\xC5\x98", "\xC5\x9B" => "\xC5\x9A", "\xC5\x9D" => "\xC5\x9C",			"\xC5\x9F" => "\xC5\x9E", "\xC5\xA1" => "\xC5\xA0", "\xC5\xA3" => "\xC5\xA2", "\xC5\xA5" => "\xC5\xA4",			"\xC5\xA7" => "\xC5\xA6", "\xC5\xA9" => "\xC5\xA8", "\xC5\xAB" => "\xC5\xAA", "\xC5\xAD" => "\xC5\xAC",			"\xC5\xAF" => "\xC5\xAE", "\xC5\xB1" => "\xC5\xB0", "\xC5\xB3" => "\xC5\xB2", "\xC5\xB5" => "\xC5\xB4",			"\xC5\xB7" => "\xC5\xB6", "\xC5\xBA" => "\xC5\xB9", "\xC5\xBC" => "\xC5\xBB", "\xC5\xBE" => "\xC5\xBD",			"\xC6\xA1" => "\xC6\xA0", "\xC6\xB0" => "\xC6\xAF", "\xC8\x99" => "\xC8\x98", "\xC8\x9B" => "\xC8\x9A",			"\xCE\xAC" => "\xCE\x86", "\xCE\xAD" => "\xCE\x88", "\xCE\xAE" => "\xCE\x89", "\xCE\xAF" => "\xCE\x8A",			"\xCE\xB1" => "\xCE\x91", "\xCE\xB2" => "\xCE\x92", "\xCE\xB3" => "\xCE\x93", "\xCE\xB4" => "\xCE\x94",			"\xCE\xB5" => "\xCE\x95", "\xCE\xB6" => "\xCE\x96", "\xCE\xB7" => "\xCE\x97", "\xCE\xB8" => "\xCE\x98",			"\xCE\xB9" => "\xCE\x99", "\xCE\xBA" => "\xCE\x9A", "\xCE\xBB" => "\xCE\x9B", "\xCE\xBC" => "\xCE\x9C",			"\xCE\xBD" => "\xCE\x9D", "\xCE\xBE" => "\xCE\x9E", "\xCE\xBF" => "\xCE\x9F", "\xCF\x80" => "\xCE\xA0",			"\xCF\x81" => "\xCE\xA1", "\xCF\x83" => "\xCE\xA3", "\xCF\x84" => "\xCE\xA4", "\xCF\x85" => "\xCE\xA5",			"\xCF\x86" => "\xCE\xA6", "\xCF\x87" => "\xCE\xA7", "\xCF\x88" => "\xCE\xA8", "\xCF\x89" => "\xCE\xA9",			"\xCF\x8A" => "\xCE\xAA", "\xCF\x8B" => "\xCE\xAB", "\xCF\x8C" => "\xCE\x8C", "\xCF\x8D" => "\xCE\x8E",			"\xCF\x8E" => "\xCE\x8F", "\xD0\xB0" => "\xD0\x90", "\xD0\xB1" => "\xD0\x91", "\xD0\xB2" => "\xD0\x92",			"\xD0\xB3" => "\xD0\x93", "\xD0\xB4" => "\xD0\x94", "\xD0\xB5" => "\xD0\x95", "\xD0\xB6" => "\xD0\x96",			"\xD0\xB7" => "\xD0\x97", "\xD0\xB8" => "\xD0\x98", "\xD0\xB9" => "\xD0\x99", "\xD0\xBA" => "\xD0\x9A",			"\xD0\xBB" => "\xD0\x9B", "\xD0\xBC" => "\xD0\x9C", "\xD0\xBD" => "\xD0\x9D", "\xD0\xBE" => "\xD0\x9E",			"\xD0\xBF" => "\xD0\x9F", "\xD1\x80" => "\xD0\xA0", "\xD1\x81" => "\xD0\xA1", "\xD1\x82" => "\xD0\xA2",			"\xD1\x83" => "\xD0\xA3", "\xD1\x84" => "\xD0\xA4", "\xD1\x85" => "\xD0\xA5", "\xD1\x86" => "\xD0\xA6",			"\xD1\x87" => "\xD0\xA7", "\xD1\x88" => "\xD0\xA8", "\xD1\x89" => "\xD0\xA9", "\xD1\x8A" => "\xD0\xAA",			"\xD1\x8B" => "\xD0\xAB", "\xD1\x8C" => "\xD0\xAC", "\xD1\x8D" => "\xD0\xAD", "\xD1\x8E" => "\xD0\xAE",			"\xD1\x8F" => "\xD0\xAF", "\xD1\x91" => "\xD0\x81", "\xD1\x92" => "\xD0\x82", "\xD1\x93" => "\xD0\x83",			"\xD1\x94" => "\xD0\x84", "\xD1\x95" => "\xD0\x85", "\xD1\x96" => "\xD0\x86", "\xD1\x97" => "\xD0\x87",			"\xD1\x98" => "\xD0\x88", "\xD1\x99" => "\xD0\x89", "\xD1\x9A" => "\xD0\x8A", "\xD1\x9B" => "\xD0\x8B",			"\xD1\x9C" => "\xD0\x8C", "\xD1\x9E" => "\xD0\x8E", "\xD1\x9F" => "\xD0\x8F", "\xD2\x91" => "\xD2\x90",			"\xE1\xB8\x83" => "\xE1\xB8\x82", "\xE1\xB8\x8B" => "\xE1\xB8\x8A", "\xE1\xB8\x9F" => "\xE1\xB8\x9E", "\xE1\xB9\x81" => "\xE1\xB9\x80",			"\xE1\xB9\x97" => "\xE1\xB9\x96", "\xE1\xB9\xA1" => "\xE1\xB9\xA0", "\xE1\xB9\xAB" => "\xE1\xB9\xAA", "\xE1\xBA\x81" => "\xE1\xBA\x80",			"\xE1\xBA\x83" => "\xE1\xBA\x82", "\xE1\xBA\x85" => "\xE1\xBA\x84", "\xE1\xBB\xB3" => "\xE1\xBB\xB2"		);		return strtr(strtoupper($string), $utf8_lower_to_upper);	}	/**	* UTF-8 aware alternative to substr	* Return part of a string given character offset (and optionally length)	*	* Note arguments: comparied to substr - if offset or length are	* not integers, this version will not complain but rather massages them	* into an integer.	*	* Note on returned values: substr documentation states false can be	* returned in some cases (e.g. offset > string length)	* mb_substr never returns false, it will return an empty string instead.	* This adopts the mb_substr approach	*	* Note on implementation: PCRE only supports repetitions of less than	* 65536, in order to accept up to MAXINT values for offset and length,	* we'll repeat a group of 65535 characters when needed.	*	* Note on implementation: calculating the number of characters in the	* string is a relatively expensive operation, so we only carry it out when	* necessary. It isn't necessary for +ve offsets and no specified length	*	* @author Chris Smith<chris@jalakai.co.uk>	* @param string $str	* @param integer $offset number of UTF-8 characters offset (from left)	* @param integer $length (optional) length in UTF-8 characters from offset	* @return mixed string or FALSE if failure	*/	function utf8_substr($str, $offset, $length = NULL)	{		// generates E_NOTICE		// for PHP4 objects, but not PHP5 objects		$str = (string) $str;		$offset = (int) $offset;		if (!is_null($length))		{			$length = (int) $length;		}		// handle trivial cases		if ($length === 0 || ($offset < 0 && $length < 0 && $length < $offset))		{			return '';		}		// normalise negative offsets (we could use a tail		// anchored pattern, but they are horribly slow!)		if ($offset < 0)		{			// see notes			$strlen = utf8_strlen($str);			$offset = $strlen + $offset;			if ($offset < 0)			{				$offset = 0;			}		}		$op = '';		$lp = '';		// establish a pattern for offset, a		// non-captured group equal in length to offset		if ($offset > 0)		{			$ox = (int) ($offset / 65535);			$oy = $offset % 65535;			if ($ox)			{				$op = '(?:.{65535}){' . $ox . '}';			}			$op = '^(?:' . $op . '.{' . $oy . '})';		}		else		{			// offset == 0; just anchor the pattern			$op = '^';		}		// establish a pattern for length		if (is_null($length))		{			// the rest of the string			$lp = '(.*)$';		}		else		{			if (!isset($strlen))			{				// see notes				$strlen = utf8_strlen($str);			}			// another trivial case			if ($offset > $strlen)			{				return '';			}			if ($length > 0)			{				// reduce any length that would				// go passed the end of the string				$length = min($strlen - $offset, $length);				$lx = (int) ($length / 65535);				$ly = $length % 65535;				// negative length requires a captured group				// of length characters				if ($lx)				{					$lp = '(?:.{65535}){' . $lx . '}';				}				$lp = '(' . $lp . '.{'. $ly . '})';			}			else if ($length < 0)			{				if ($length < ($offset - $strlen))				{					return '';				}				$lx = (int)((-$length) / 65535);				$ly = (-$length) % 65535;				// negative length requires ... capture everything				// except a group of  -length characters				// anchored at the tail-end of the string				if ($lx)				{					$lp = '(?:.{65535}){' . $lx . '}';				}				$lp = '(.*)(?:' . $lp . '.{' . $ly . '})$';			}		}		if (!preg_match('#' . $op . $lp . '#us', $str, $match))		{			return '';		}		return $match[1];	}	/**	* Return the length (in characters) of a UTF-8 string	*	* @param	string	$text		UTF-8 string	* @return	integer				Length (in chars) of given string	*/	function utf8_strlen($text)	{		// Since utf8_decode is replacing multibyte characters to ? strlen works fine		return strlen(utf8_decode($text));	}}/*** UTF-8 aware alternative to str_split* Convert a string to an array** @author Harry Fuecks* @param string $str UTF-8 encoded* @param int $split_len number to characters to split string by* @return array characters in string reverses*/function utf8_str_split($str, $split_len = 1){	if (!is_int($split_len) || $split_len < 1)	{		return false;	}	$len = utf8_strlen($str);	if ($len <= $split_len)	{		return array($str);	}	preg_match_all('/.{' . $split_len . '}|[^\x00]{1,' . $split_len . '}$/us', $str, $ar);	return $ar[0];}/*** UTF-8 aware alternative to strspn* Find length of initial segment matching the mask** @author Harry Fuecks*/function utf8_strspn($str, $mask, $start = null, $length = null){	if ($start !== null || $length !== null)	{		$str = utf8_substr($str, $start, $length);	}	preg_match('/^[' . $mask . ']+/u', $str, $matches);	if (isset($matches[0]))	{		return utf8_strlen($matches[0]);	}	return 0;}/*** UTF-8 aware alternative to ucfirst* Make a string's first character uppercase** @author Harry Fuecks* @param string* @return string with first character as upper case (if applicable)*/function utf8_ucfirst($str){	switch (utf8_strlen($str))	{		case 0:			return '';		break;		case 1:			return utf8_strtoupper($str);		break;		default:			preg_match('/^(.{1})(.*)$/us', $str, $matches);			return utf8_strtoupper($matches[1]) . $matches[2];		break;	}}/*** Recode a string to UTF-8** If the encoding is not supported, the string is returned as-is** @param	string	$string		Original string* @param	string	$encoding	Original encoding (lowered)* @return	string				The string, encoded in UTF-8*/function utf8_recode($string, $encoding){	$encoding = strtolower($encoding);	if ($encoding == 'utf-8' || !is_string($string) || empty($string))	{		return $string;	}	// we force iso-8859-1 to be cp1252	if ($encoding == 'iso-8859-1')	{		$encoding = 'cp1252';	}	// convert iso-8859-8-i to iso-8859-8	else if ($encoding == 'iso-8859-8-i')	{		$encoding = 'iso-8859-8';		$string = hebrev($string);	}	// First, try iconv()	if (function_exists('iconv'))	{		$ret = @iconv($encoding, 'utf-8', $string);		if (!empty($ret))		{			return $ret;		}	}	// Try the mb_string extension	if (function_exists('mb_convert_encoding'))	{		// mbstring is nasty on PHP4, we must make *sure* that we send a good encoding		switch ($encoding)		{			case 'iso-8859-1':			case 'iso-8859-2':			case 'iso-8859-4':			case 'iso-8859-7':			case 'iso-8859-9':			case 'iso-8859-15':			case 'windows-1251':			case 'windows-1252':			case 'cp1252':			case 'shift_jis':			case 'euc-kr':			case 'big5':			case 'gb2312':				$ret = @mb_convert_encoding($string, 'utf-8', $encoding);				if (!empty($ret))				{					return $ret;				}		}	}	// Try the recode extension	if (function_exists('recode_string'))	{		$ret = @recode_string($encoding . '..utf-8', $string);		if (!empty($ret))		{			return $ret;		}	}	// If nothing works, check if we have a custom transcoder available	if (!preg_match('#^[a-z0-9_ \\-]+$#', $encoding))	{		// Make sure the encoding name is alphanumeric, we don't want it to be abused into loading arbitrary files		trigger_error('Unknown encoding: ' . $encoding, E_USER_ERROR);	}	global $phpbb_root_path, $phpEx;	// iso-8859-* character encoding	if (preg_match('/iso[_ -]?8859[_ -]?(\\d+)/', $encoding, $array))	{		switch ($array[1])		{			case '1':			case '2':			case '4':			case '7':			case '8':			case '9':			case '15':				if (!function_exists('iso_8859_' . $array[1]))				{					if (!file_exists($phpbb_root_path . 'includes/utf/data/recode_basic.' . $phpEx))					{						trigger_error('Basic reencoder file is missing', E_USER_ERROR);					}					include($phpbb_root_path . 'includes/utf/data/recode_basic.' . $phpEx);				}				return call_user_func('iso_8859_' . $array[1], $string);			break;			default:				trigger_error('Unknown encoding: ' . $encoding, E_USER_ERROR);			break;		}	}	// CP/WIN character encoding	if (preg_match('/(?:cp|windows)[_\- ]?(\\d+)/', $encoding, $array))	{		switch ($array[1])		{			case '932':			break;			case '1250':			case '1251':			case '1252':			case '1254':			case '1255':			case '1256':			case '1257':			case '874':				if (!function_exists('cp' . $array[1]))				{					if (!file_exists($phpbb_root_path . 'includes/utf/data/recode_basic.' . $phpEx))					{						trigger_error('Basic reencoder file is missing', E_USER_ERROR);					}					include($phpbb_root_path . 'includes/utf/data/recode_basic.' . $phpEx);				}				return call_user_func('cp' . $array[1], $string);			break;			default:				trigger_error('Unknown encoding: ' . $encoding, E_USER_ERROR);			break;		}	}	// TIS-620	if (preg_match('/tis[_ -]?620/', $encoding))	{		if (!function_exists('tis_620'))		{			if (!file_exists($phpbb_root_path . 'includes/utf/data/recode_basic.' . $phpEx))			{				trigger_error('Basic reencoder file is missing', E_USER_ERROR);			}			include($phpbb_root_path . 'includes/utf/data/recode_basic.' . $phpEx);		}		return tis_620($string);	}	// SJIS	if (preg_match('/sjis(?:[_ -]?win)?|(?:cp|ibm)[_ -]?932|shift[_ -]?jis/', $encoding))	{		if (!function_exists('sjis'))		{			if (!file_exists($phpbb_root_path . 'includes/utf/data/recode_cjk.' . $phpEx))			{				trigger_error('CJK reencoder file is missing', E_USER_ERROR);			}			include($phpbb_root_path . 'includes/utf/data/recode_cjk.' . $phpEx);		}		return sjis($string);	}	// EUC_KR	if (preg_match('/euc[_ -]?kr/', $encoding))	{		if (!function_exists('euc_kr'))		{			if (!file_exists($phpbb_root_path . 'includes/utf/data/recode_cjk.' . $phpEx))			{				trigger_error('CJK reencoder file is missing', E_USER_ERROR);			}			include($phpbb_root_path . 'includes/utf/data/recode_cjk.' . $phpEx);		}		return euc_kr($string);	}	// BIG-5	if (preg_match('/big[_ -]?5/', $encoding))	{		if (!function_exists('big5'))		{			if (!file_exists($phpbb_root_path . 'includes/utf/data/recode_cjk.' . $phpEx))			{				trigger_error('CJK reencoder file is missing', E_USER_ERROR);			}			include($phpbb_root_path . 'includes/utf/data/recode_cjk.' . $phpEx);		}		return big5($string);	}	// GB2312	if (preg_match('/gb[_ -]?2312/', $encoding))	{		if (!function_exists('gb2312'))		{			if (!file_exists($phpbb_root_path . 'includes/utf/data/recode_cjk.' . $phpEx))			{				trigger_error('CJK reencoder file is missing', E_USER_ERROR);			}			include($phpbb_root_path . 'includes/utf/data/recode_cjk.' . $phpEx);		}		return gb2312($string);	}	// Trigger an error?! Fow now just give bad data :-(	trigger_error('Unknown encoding: ' . $encoding, E_USER_ERROR);	//return $string; // use utf_normalizer::cleanup() ?}/*** Replace all UTF-8 chars that are not in ASCII with their NCR** @param	string	$text		UTF-8 string in NFC* @return	string				ASCII string using NCRs for non-ASCII chars*/function utf8_encode_ncr($text){	return preg_replace_callback('#[\\xC2-\\xF4][\\x80-\\xBF]{1,3}#', 'utf8_encode_ncr_callback', $text);}/*** Callback used in encode_ncr()** Takes a UTF-8 char and replaces it with its NCR. Attention, $m is an array** @param	array	$m			0-based numerically indexed array passed by preg_replace_callback()* @return	string				A HTML NCR if the character is valid, or the original string otherwise*/function utf8_encode_ncr_callback($m){	return '&#' . utf8_ord($m[0]) . ';';}/*** Converts a UTF-8 char to an NCR** @param string $chr UTF-8 char* @return integer UNICODE code point*/function utf8_ord($chr){	switch (strlen($chr))	{		case 1:			return ord($chr);		break;		case 2:			return ((ord($chr[0]) & 0x1F) << 6) | (ord($chr[1]) & 0x3F);		break;		case 3:			return ((ord($chr[0]) & 0x0F) << 12) | ((ord($chr[1]) & 0x3F) << 6) | (ord($chr[2]) & 0x3F);		break;		case 4:			return ((ord($chr[0]) & 0x07) << 18) | ((ord($chr[1]) & 0x3F) << 12) | ((ord($chr[2]) & 0x3F) << 6) | (ord($chr[3]) & 0x3F);		break;		default:			return $chr;	}}/*** Converts an NCR to a UTF-8 char** @param	int		$cp	UNICODE code point* @return	string		UTF-8 char*/function utf8_chr($cp){	if ($cp > 0xFFFF)	{		return chr(0xF0 | ($cp >> 18)) . chr(0x80 | (($cp >> 12) & 0x3F)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));	}	else if ($cp > 0x7FF)	{		return chr(0xE0 | ($cp >> 12)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));	}	else if ($cp > 0x7F)	{		return chr(0xC0 | ($cp >> 6)) . chr(0x80 | ($cp & 0x3F));	}	else	{		return chr($cp);	}}/*** Convert Numeric Character References to UTF-8 chars** Notes:*	- we do not convert NCRs recursively, if you pass &#38;#38; it will return &#38;*	- we DO NOT check for the existence of the Unicode characters, therefore an entity may be converted to an inexistent codepoint** @param	string	$text		String to convert, encoded in UTF-8 (no normal form required)* @return	string				UTF-8 string where NCRs have been replaced with the actual chars*/function utf8_decode_ncr($text){	return preg_replace_callback('/&#([0-9]{1,6}|x[0-9A-F]{1,5});/i', 'utf8_decode_ncr_callback', $text);}/*** Callback used in decode_ncr()** Takes a NCR (in decimal or hexadecimal) and returns a UTF-8 char. Attention, $m is an array.* It will ignore most of invalid NCRs, but not all!** @param	array	$m			0-based numerically indexed array passed by preg_replace_callback()* @return	string				UTF-8 char*/function utf8_decode_ncr_callback($m){	$cp = (strncasecmp($m[1], 'x', 1)) ? $m[1] : hexdec(substr($m[1], 1));	return utf8_chr($cp);}/*** Case folds a unicode string as per Unicode 5.0, section 3.13** @param	string	$text	text to be case folded* @param	string	$option	determines how we will fold the cases* @return	string			case folded text*/function utf8_case_fold($text, $option = 'full'){	static $uniarray = array();	global $phpbb_root_path, $phpEx;	// common is always set	if (!isset($uniarray['c']))	{		$uniarray['c'] = include($phpbb_root_path . 'includes/utf/data/case_fold_c.' . $phpEx);	}	// only set full if we need to	if ($option === 'full' && !isset($uniarray['f']))	{		$uniarray['f'] = include($phpbb_root_path . 'includes/utf/data/case_fold_f.' . $phpEx);	}	// only set simple if we need to	if ($option !== 'full' && !isset($uniarray['s']))	{		$uniarray['s'] = include($phpbb_root_path . 'includes/utf/data/case_fold_s.' . $phpEx);	}	// common is always replaced	$text = strtr($text, $uniarray['c']);	if ($option === 'full')	{		// full replaces a character with multiple characters		$text = strtr($text, $uniarray['f']);	}	else	{		// simple replaces a character with another character		$text = strtr($text, $uniarray['s']);	}	return $text;}/*** Takes the input and does a "special" case fold. It does minor normalization* and returns NFKC compatable text** @param	string	$text	text to be case folded* @param	string	$option	determines how we will fold the cases* @return	string			case folded text*/function utf8_case_fold_nfkc($text, $option = 'full'){	static $fc_nfkc_closure = array(		"\xCD\xBA"	=> "\x20\xCE\xB9",		"\xCF\x92"	=> "\xCF\x85",		"\xCF\x93"	=> "\xCF\x8D",		"\xCF\x94"	=> "\xCF\x8B",		"\xCF\xB2"	=> "\xCF\x83",		"\xCF\xB9"	=> "\xCF\x83",		"\xE1\xB4\xAC"	=> "\x61",		"\xE1\xB4\xAD"	=> "\xC3\xA6",		"\xE1\xB4\xAE"	=> "\x62",		"\xE1\xB4\xB0"	=> "\x64",		"\xE1\xB4\xB1"	=> "\x65",		"\xE1\xB4\xB2"	=> "\xC7\x9D",		"\xE1\xB4\xB3"	=> "\x67",		"\xE1\xB4\xB4"	=> "\x68",		"\xE1\xB4\xB5"	=> "\x69",		"\xE1\xB4\xB6"	=> "\x6A",		"\xE1\xB4\xB7"	=> "\x6B",		"\xE1\xB4\xB8"	=> "\x6C",		"\xE1\xB4\xB9"	=> "\x6D",		"\xE1\xB4\xBA"	=> "\x6E",		"\xE1\xB4\xBC"	=> "\x6F",		"\xE1\xB4\xBD"	=> "\xC8\xA3",		"\xE1\xB4\xBE"	=> "\x70",		"\xE1\xB4\xBF"	=> "\x72",		"\xE1\xB5\x80"	=> "\x74",		"\xE1\xB5\x81"	=> "\x75",		"\xE1\xB5\x82"	=> "\x77",		"\xE2\x82\xA8"	=> "\x72\x73",		"\xE2\x84\x82"	=> "\x63",		"\xE2\x84\x83"	=> "\xC2\xB0\x63",		"\xE2\x84\x87"	=> "\xC9\x9B",		"\xE2\x84\x89"	=> "\xC2\xB0\x66",		"\xE2\x84\x8B"	=> "\x68",		"\xE2\x84\x8C"	=> "\x68",		"\xE2\x84\x8D"	=> "\x68",		"\xE2\x84\x90"	=> "\x69",		"\xE2\x84\x91"	=> "\x69",		"\xE2\x84\x92"	=> "\x6C",		"\xE2\x84\x95"	=> "\x6E",		"\xE2\x84\x96"	=> "\x6E\x6F",		"\xE2\x84\x99"	=> "\x70",		"\xE2\x84\x9A"	=> "\x71",		"\xE2\x84\x9B"	=> "\x72",		"\xE2\x84\x9C"	=> "\x72",		"\xE2\x84\x9D"	=> "\x72",		"\xE2\x84\xA0"	=> "\x73\x6D",		"\xE2\x84\xA1"	=> "\x74\x65\x6C",		"\xE2\x84\xA2"	=> "\x74\x6D",		"\xE2\x84\xA4"	=> "\x7A",		"\xE2\x84\xA8"	=> "\x7A",		"\xE2\x84\xAC"	=> "\x62",		"\xE2\x84\xAD"	=> "\x63",		"\xE2\x84\xB0"	=> "\x65",		"\xE2\x84\xB1"	=> "\x66",		"\xE2\x84\xB3"	=> "\x6D",		"\xE2\x84\xBB"	=> "\x66\x61\x78",		"\xE2\x84\xBE"	=> "\xCE\xB3",		"\xE2\x84\xBF"	=> "\xCF\x80",		"\xE2\x85\x85"	=> "\x64",		"\xE3\x89\x90"	=> "\x70\x74\x65",		"\xE3\x8B\x8C"	=> "\x68\x67",		"\xE3\x8B\x8E"	=> "\x65\x76",		"\xE3\x8B\x8F"	=> "\x6C\x74\x64",		"\xE3\x8D\xB1"	=> "\x68\x70\x61",		"\xE3\x8D\xB3"	=> "\x61\x75",		"\xE3\x8D\xB5"	=> "\x6F\x76",		"\xE3\x8D\xBA"	=> "\x69\x75",		"\xE3\x8E\x80"	=> "\x70\x61",		"\xE3\x8E\x81"	=> "\x6E\x61",		"\xE3\x8E\x82"	=> "\xCE\xBC\x61",		"\xE3\x8E\x83"	=> "\x6D\x61",		"\xE3\x8E\x84"	=> "\x6B\x61",		"\xE3\x8E\x85"	=> "\x6B\x62",		"\xE3\x8E\x86"	=> "\x6D\x62",		"\xE3\x8E\x87"	=> "\x67\x62",		"\xE3\x8E\x8A"	=> "\x70\x66",		"\xE3\x8E\x8B"	=> "\x6E\x66",		"\xE3\x8E\x8C"	=> "\xCE\xBC\x66",		"\xE3\x8E\x90"	=> "\x68\x7A",		"\xE3\x8E\x91"	=> "\x6B\x68\x7A",		"\xE3\x8E\x92"	=> "\x6D\x68\x7A",		"\xE3\x8E\x93"	=> "\x67\x68\x7A",		"\xE3\x8E\x94"	=> "\x74\x68\x7A",		"\xE3\x8E\xA9"	=> "\x70\x61",		"\xE3\x8E\xAA"	=> "\x6B\x70\x61",		"\xE3\x8E\xAB"	=> "\x6D\x70\x61",		"\xE3\x8E\xAC"	=> "\x67\x70\x61",		"\xE3\x8E\xB4"	=> "\x70\x76",		"\xE3\x8E\xB5"	=> "\x6E\x76",		"\xE3\x8E\xB6"	=> "\xCE\xBC\x76",		"\xE3\x8E\xB7"	=> "\x6D\x76",		"\xE3\x8E\xB8"	=> "\x6B\x76",		"\xE3\x8E\xB9"	=> "\x6D\x76",		"\xE3\x8E\xBA"	=> "\x70\x77",		"\xE3\x8E\xBB"	=> "\x6E\x77",		"\xE3\x8E\xBC"	=> "\xCE\xBC\x77",		"\xE3\x8E\xBD"	=> "\x6D\x77",		"\xE3\x8E\xBE"	=> "\x6B\x77",		"\xE3\x8E\xBF"	=> "\x6D\x77",		"\xE3\x8F\x80"	=> "\x6B\xCF\x89",		"\xE3\x8F\x81"	=> "\x6D\xCF\x89",		"\xE3\x8F\x83"	=> "\x62\x71",		"\xE3\x8F\x86"	=> "\x63\xE2\x88\x95\x6B\x67",		"\xE3\x8F\x87"	=> "\x63\x6F\x2E",		"\xE3\x8F\x88"	=> "\x64\x62",		"\xE3\x8F\x89"	=> "\x67\x79",		"\xE3\x8F\x8B"	=> "\x68\x70",		"\xE3\x8F\x8D"	=> "\x6B\x6B",		"\xE3\x8F\x8E"	=> "\x6B\x6D",		"\xE3\x8F\x97"	=> "\x70\x68",		"\xE3\x8F\x99"	=> "\x70\x70\x6D",		"\xE3\x8F\x9A"	=> "\x70\x72",		"\xE3\x8F\x9C"	=> "\x73\x76",		"\xE3\x8F\x9D"	=> "\x77\x62",		"\xE3\x8F\x9E"	=> "\x76\xE2\x88\x95\x6D",		"\xE3\x8F\x9F"	=> "\x61\xE2\x88\x95\x6D",		"\xF0\x9D\x90\x80"	=> "\x61",		"\xF0\x9D\x90\x81"	=> "\x62",		"\xF0\x9D\x90\x82"	=> "\x63",		"\xF0\x9D\x90\x83"	=> "\x64",		"\xF0\x9D\x90\x84"	=> "\x65",		"\xF0\x9D\x90\x85"	=> "\x66",		"\xF0\x9D\x90\x86"	=> "\x67",		"\xF0\x9D\x90\x87"	=> "\x68",		"\xF0\x9D\x90\x88"	=> "\x69",		"\xF0\x9D\x90\x89"	=> "\x6A",		"\xF0\x9D\x90\x8A"	=> "\x6B",		"\xF0\x9D\x90\x8B"	=> "\x6C",		"\xF0\x9D\x90\x8C"	=> "\x6D",		"\xF0\x9D\x90\x8D"	=> "\x6E",		"\xF0\x9D\x90\x8E"	=> "\x6F",		"\xF0\x9D\x90\x8F"	=> "\x70",		"\xF0\x9D\x90\x90"	=> "\x71",		"\xF0\x9D\x90\x91"	=> "\x72",		"\xF0\x9D\x90\x92"	=> "\x73",		"\xF0\x9D\x90\x93"	=> "\x74",		"\xF0\x9D\x90\x94"	=> "\x75",		"\xF0\x9D\x90\x95"	=> "\x76",		"\xF0\x9D\x90\x96"	=> "\x77",		"\xF0\x9D\x90\x97"	=> "\x78",		"\xF0\x9D\x90\x98"	=> "\x79",		"\xF0\x9D\x90\x99"	=> "\x7A",		"\xF0\x9D\x90\xB4"	=> "\x61",		"\xF0\x9D\x90\xB5"	=> "\x62",		"\xF0\x9D\x90\xB6"	=> "\x63",		"\xF0\x9D\x90\xB7"	=> "\x64",		"\xF0\x9D\x90\xB8"	=> "\x65",		"\xF0\x9D\x90\xB9"	=> "\x66",		"\xF0\x9D\x90\xBA"	=> "\x67",		"\xF0\x9D\x90\xBB"	=> "\x68",		"\xF0\x9D\x90\xBC"	=> "\x69",		"\xF0\x9D\x90\xBD"	=> "\x6A",		"\xF0\x9D\x90\xBE"	=> "\x6B",		"\xF0\x9D\x90\xBF"	=> "\x6C",		"\xF0\x9D\x91\x80"	=> "\x6D",		"\xF0\x9D\x91\x81"	=> "\x6E",		"\xF0\x9D\x91\x82"	=> "\x6F",		"\xF0\x9D\x91\x83"	=> "\x70",		"\xF0\x9D\x91\x84"	=> "\x71",		"\xF0\x9D\x91\x85"	=> "\x72",		"\xF0\x9D\x91\x86"	=> "\x73",		"\xF0\x9D\x91\x87"	=> "\x74",		"\xF0\x9D\x91\x88"	=> "\x75",		"\xF0\x9D\x91\x89"	=> "\x76",		"\xF0\x9D\x91\x8A"	=> "\x77",		"\xF0\x9D\x91\x8B"	=> "\x78",		"\xF0\x9D\x91\x8C"	=> "\x79",		"\xF0\x9D\x91\x8D"	=> "\x7A",		"\xF0\x9D\x91\xA8"	=> "\x61",		"\xF0\x9D\x91\xA9"	=> "\x62",		"\xF0\x9D\x91\xAA"	=> "\x63",		"\xF0\x9D\x91\xAB"	=> "\x64",		"\xF0\x9D\x91\xAC"	=> "\x65",		"\xF0\x9D\x91\xAD"	=> "\x66",		"\xF0\x9D\x91\xAE"	=> "\x67",		"\xF0\x9D\x91\xAF"	=> "\x68",		"\xF0\x9D\x91\xB0"	=> "\x69",		"\xF0\x9D\x91\xB1"	=> "\x6A",		"\xF0\x9D\x91\xB2"	=> "\x6B",		"\xF0\x9D\x91\xB3"	=> "\x6C",		"\xF0\x9D\x91\xB4"	=> "\x6D",		"\xF0\x9D\x91\xB5"	=> "\x6E",		"\xF0\x9D\x91\xB6"	=> "\x6F",		"\xF0\x9D\x91\xB7"	=> "\x70",		"\xF0\x9D\x91\xB8"	=> "\x71",		"\xF0\x9D\x91\xB9"	=> "\x72",		"\xF0\x9D\x91\xBA"	=> "\x73",		"\xF0\x9D\x91\xBB"	=> "\x74",		"\xF0\x9D\x91\xBC"	=> "\x75",		"\xF0\x9D\x91\xBD"	=> "\x76",		"\xF0\x9D\x91\xBE"	=> "\x77",		"\xF0\x9D\x91\xBF"	=> "\x78",		"\xF0\x9D\x92\x80"	=> "\x79",		"\xF0\x9D\x92\x81"	=> "\x7A",		"\xF0\x9D\x92\x9C"	=> "\x61",		"\xF0\x9D\x92\x9E"	=> "\x63",		"\xF0\x9D\x92\x9F"	=> "\x64",		"\xF0\x9D\x92\xA2"	=> "\x67",		"\xF0\x9D\x92\xA5"	=> "\x6A",		"\xF0\x9D\x92\xA6"	=> "\x6B",		"\xF0\x9D\x92\xA9"	=> "\x6E",		"\xF0\x9D\x92\xAA"	=> "\x6F",		"\xF0\x9D\x92\xAB"	=> "\x70",		"\xF0\x9D\x92\xAC"	=> "\x71",		"\xF0\x9D\x92\xAE"	=> "\x73",		"\xF0\x9D\x92\xAF"	=> "\x74",		"\xF0\x9D\x92\xB0"	=> "\x75",		"\xF0\x9D\x92\xB1"	=> "\x76",		"\xF0\x9D\x92\xB2"	=> "\x77",		"\xF0\x9D\x92\xB3"	=> "\x78",		"\xF0\x9D\x92\xB4"	=> "\x79",		"\xF0\x9D\x92\xB5"	=> "\x7A",		"\xF0\x9D\x93\x90"	=> "\x61",		"\xF0\x9D\x93\x91"	=> "\x62",		"\xF0\x9D\x93\x92"	=> "\x63",		"\xF0\x9D\x93\x93"	=> "\x64",		"\xF0\x9D\x93\x94"	=> "\x65",		"\xF0\x9D\x93\x95"	=> "\x66",		"\xF0\x9D\x93\x96"	=> "\x67",		"\xF0\x9D\x93\x97"	=> "\x68",		"\xF0\x9D\x93\x98"	=> "\x69",		"\xF0\x9D\x93\x99"	=> "\x6A",		"\xF0\x9D\x93\x9A"	=> "\x6B",		"\xF0\x9D\x93\x9B"	=> "\x6C",		"\xF0\x9D\x93\x9C"	=> "\x6D",		"\xF0\x9D\x93\x9D"	=> "\x6E",		"\xF0\x9D\x93\x9E"	=> "\x6F",		"\xF0\x9D\x93\x9F"	=> "\x70",		"\xF0\x9D\x93\xA0"	=> "\x71",		"\xF0\x9D\x93\xA1"	=> "\x72",		"\xF0\x9D\x93\xA2"	=> "\x73",		"\xF0\x9D\x93\xA3"	=> "\x74",		"\xF0\x9D\x93\xA4"	=> "\x75",		"\xF0\x9D\x93\xA5"	=> "\x76",		"\xF0\x9D\x93\xA6"	=> "\x77",		"\xF0\x9D\x93\xA7"	=> "\x78",		"\xF0\x9D\x93\xA8"	=> "\x79",		"\xF0\x9D\x93\xA9"	=> "\x7A",		"\xF0\x9D\x94\x84"	=> "\x61",		"\xF0\x9D\x94\x85"	=> "\x62",		"\xF0\x9D\x94\x87"	=> "\x64",		"\xF0\x9D\x94\x88"	=> "\x65",		"\xF0\x9D\x94\x89"	=> "\x66",		"\xF0\x9D\x94\x8A"	=> "\x67",		"\xF0\x9D\x94\x8D"	=> "\x6A",		"\xF0\x9D\x94\x8E"	=> "\x6B",		"\xF0\x9D\x94\x8F"	=> "\x6C",		"\xF0\x9D\x94\x90"	=> "\x6D",		"\xF0\x9D\x94\x91"	=> "\x6E",		"\xF0\x9D\x94\x92"	=> "\x6F",		"\xF0\x9D\x94\x93"	=> "\x70",		"\xF0\x9D\x94\x94"	=> "\x71",		"\xF0\x9D\x94\x96"	=> "\x73",		"\xF0\x9D\x94\x97"	=> "\x74",		"\xF0\x9D\x94\x98"	=> "\x75",		"\xF0\x9D\x94\x99"	=> "\x76",		"\xF0\x9D\x94\x9A"	=> "\x77",		"\xF0\x9D\x94\x9B"	=> "\x78",		"\xF0\x9D\x94\x9C"	=> "\x79",		"\xF0\x9D\x94\xB8"	=> "\x61",		"\xF0\x9D\x94\xB9"	=> "\x62",		"\xF0\x9D\x94\xBB"	=> "\x64",		"\xF0\x9D\x94\xBC"	=> "\x65",		"\xF0\x9D\x94\xBD"	=> "\x66",		"\xF0\x9D\x94\xBE"	=> "\x67",		"\xF0\x9D\x95\x80"	=> "\x69",		"\xF0\x9D\x95\x81"	=> "\x6A",		"\xF0\x9D\x95\x82"	=> "\x6B",		"\xF0\x9D\x95\x83"	=> "\x6C",		"\xF0\x9D\x95\x84"	=> "\x6D",		"\xF0\x9D\x95\x86"	=> "\x6F",		"\xF0\x9D\x95\x8A"	=> "\x73",		"\xF0\x9D\x95\x8B"	=> "\x74",		"\xF0\x9D\x95\x8C"	=> "\x75",		"\xF0\x9D\x95\x8D"	=> "\x76",		"\xF0\x9D\x95\x8E"	=> "\x77",		"\xF0\x9D\x95\x8F"	=> "\x78",		"\xF0\x9D\x95\x90"	=> "\x79",		"\xF0\x9D\x95\xAC"	=> "\x61",		"\xF0\x9D\x95\xAD"	=> "\x62",		"\xF0\x9D\x95\xAE"	=> "\x63",		"\xF0\x9D\x95\xAF"	=> "\x64",		"\xF0\x9D\x95\xB0"	=> "\x65",		"\xF0\x9D\x95\xB1"	=> "\x66",		"\xF0\x9D\x95\xB2"	=> "\x67",		"\xF0\x9D\x95\xB3"	=> "\x68",		"\xF0\x9D\x95\xB4"	=> "\x69",		"\xF0\x9D\x95\xB5"	=> "\x6A",		"\xF0\x9D\x95\xB6"	=> "\x6B",		"\xF0\x9D\x95\xB7"	=> "\x6C",		"\xF0\x9D\x95\xB8"	=> "\x6D",		"\xF0\x9D\x95\xB9"	=> "\x6E",		"\xF0\x9D\x95\xBA"	=> "\x6F",		"\xF0\x9D\x95\xBB"	=> "\x70",		"\xF0\x9D\x95\xBC"	=> "\x71",		"\xF0\x9D\x95\xBD"	=> "\x72",		"\xF0\x9D\x95\xBE"	=> "\x73",		"\xF0\x9D\x95\xBF"	=> "\x74",		"\xF0\x9D\x96\x80"	=> "\x75",		"\xF0\x9D\x96\x81"	=> "\x76",		"\xF0\x9D\x96\x82"	=> "\x77",		"\xF0\x9D\x96\x83"	=> "\x78",		"\xF0\x9D\x96\x84"	=> "\x79",		"\xF0\x9D\x96\x85"	=> "\x7A",		"\xF0\x9D\x96\xA0"	=> "\x61",		"\xF0\x9D\x96\xA1"	=> "\x62",		"\xF0\x9D\x96\xA2"	=> "\x63",		"\xF0\x9D\x96\xA3"	=> "\x64",		"\xF0\x9D\x96\xA4"	=> "\x65",		"\xF0\x9D\x96\xA5"	=> "\x66",		"\xF0\x9D\x96\xA6"	=> "\x67",		"\xF0\x9D\x96\xA7"	=> "\x68",		"\xF0\x9D\x96\xA8"	=> "\x69",		"\xF0\x9D\x96\xA9"	=> "\x6A",		"\xF0\x9D\x96\xAA"	=> "\x6B",		"\xF0\x9D\x96\xAB"	=> "\x6C",		"\xF0\x9D\x96\xAC"	=> "\x6D",		"\xF0\x9D\x96\xAD"	=> "\x6E",		"\xF0\x9D\x96\xAE"	=> "\x6F",		"\xF0\x9D\x96\xAF"	=> "\x70",		"\xF0\x9D\x96\xB0"	=> "\x71",		"\xF0\x9D\x96\xB1"	=> "\x72",		"\xF0\x9D\x96\xB2"	=> "\x73",		"\xF0\x9D\x96\xB3"	=> "\x74",		"\xF0\x9D\x96\xB4"	=> "\x75",		"\xF0\x9D\x96\xB5"	=> "\x76",		"\xF0\x9D\x96\xB6"	=> "\x77",		"\xF0\x9D\x96\xB7"	=> "\x78",		"\xF0\x9D\x96\xB8"	=> "\x79",		"\xF0\x9D\x96\xB9"	=> "\x7A",		"\xF0\x9D\x97\x94"	=> "\x61",		"\xF0\x9D\x97\x95"	=> "\x62",		"\xF0\x9D\x97\x96"	=> "\x63",		"\xF0\x9D\x97\x97"	=> "\x64",		"\xF0\x9D\x97\x98"	=> "\x65",		"\xF0\x9D\x97\x99"	=> "\x66",		"\xF0\x9D\x97\x9A"	=> "\x67",		"\xF0\x9D\x97\x9B"	=> "\x68",		"\xF0\x9D\x97\x9C"	=> "\x69",		"\xF0\x9D\x97\x9D"	=> "\x6A",		"\xF0\x9D\x97\x9E"	=> "\x6B",		"\xF0\x9D\x97\x9F"	=> "\x6C",		"\xF0\x9D\x97\xA0"	=> "\x6D",		"\xF0\x9D\x97\xA1"	=> "\x6E",		"\xF0\x9D\x97\xA2"	=> "\x6F",		"\xF0\x9D\x97\xA3"	=> "\x70",		"\xF0\x9D\x97\xA4"	=> "\x71",		"\xF0\x9D\x97\xA5"	=> "\x72",		"\xF0\x9D\x97\xA6"	=> "\x73",		"\xF0\x9D\x97\xA7"	=> "\x74",		"\xF0\x9D\x97\xA8"	=> "\x75",		"\xF0\x9D\x97\xA9"	=> "\x76",		"\xF0\x9D\x97\xAA"	=> "\x77",		"\xF0\x9D\x97\xAB"	=> "\x78",		"\xF0\x9D\x97\xAC"	=> "\x79",		"\xF0\x9D\x97\xAD"	=> "\x7A",		"\xF0\x9D\x98\x88"	=> "\x61",		"\xF0\x9D\x98\x89"	=> "\x62",		"\xF0\x9D\x98\x8A"	=> "\x63",		"\xF0\x9D\x98\x8B"	=> "\x64",		"\xF0\x9D\x98\x8C"	=> "\x65",		"\xF0\x9D\x98\x8D"	=> "\x66",		"\xF0\x9D\x98\x8E"	=> "\x67",		"\xF0\x9D\x98\x8F"	=> "\x68",		"\xF0\x9D\x98\x90"	=> "\x69",		"\xF0\x9D\x98\x91"	=> "\x6A",		"\xF0\x9D\x98\x92"	=> "\x6B",		"\xF0\x9D\x98\x93"	=> "\x6C",		"\xF0\x9D\x98\x94"	=> "\x6D",		"\xF0\x9D\x98\x95"	=> "\x6E",		"\xF0\x9D\x98\x96"	=> "\x6F",		"\xF0\x9D\x98\x97"	=> "\x70",		"\xF0\x9D\x98\x98"	=> "\x71",		"\xF0\x9D\x98\x99"	=> "\x72",		"\xF0\x9D\x98\x9A"	=> "\x73",		"\xF0\x9D\x98\x9B"	=> "\x74",		"\xF0\x9D\x98\x9C"	=> "\x75",		"\xF0\x9D\x98\x9D"	=> "\x76",		"\xF0\x9D\x98\x9E"	=> "\x77",		"\xF0\x9D\x98\x9F"	=> "\x78",		"\xF0\x9D\x98\xA0"	=> "\x79",		"\xF0\x9D\x98\xA1"	=> "\x7A",		"\xF0\x9D\x98\xBC"	=> "\x61",		"\xF0\x9D\x98\xBD"	=> "\x62",		"\xF0\x9D\x98\xBE"	=> "\x63",		"\xF0\x9D\x98\xBF"	=> "\x64",		"\xF0\x9D\x99\x80"	=> "\x65",		"\xF0\x9D\x99\x81"	=> "\x66",		"\xF0\x9D\x99\x82"	=> "\x67",		"\xF0\x9D\x99\x83"	=> "\x68",		"\xF0\x9D\x99\x84"	=> "\x69",		"\xF0\x9D\x99\x85"	=> "\x6A",		"\xF0\x9D\x99\x86"	=> "\x6B",		"\xF0\x9D\x99\x87"	=> "\x6C",		"\xF0\x9D\x99\x88"	=> "\x6D",		"\xF0\x9D\x99\x89"	=> "\x6E",		"\xF0\x9D\x99\x8A"	=> "\x6F",		"\xF0\x9D\x99\x8B"	=> "\x70",		"\xF0\x9D\x99\x8C"	=> "\x71",		"\xF0\x9D\x99\x8D"	=> "\x72",		"\xF0\x9D\x99\x8E"	=> "\x73",		"\xF0\x9D\x99\x8F"	=> "\x74",		"\xF0\x9D\x99\x90"	=> "\x75",		"\xF0\x9D\x99\x91"	=> "\x76",		"\xF0\x9D\x99\x92"	=> "\x77",		"\xF0\x9D\x99\x93"	=> "\x78",		"\xF0\x9D\x99\x94"	=> "\x79",		"\xF0\x9D\x99\x95"	=> "\x7A",		"\xF0\x9D\x99\xB0"	=> "\x61",		"\xF0\x9D\x99\xB1"	=> "\x62",		"\xF0\x9D\x99\xB2"	=> "\x63",		"\xF0\x9D\x99\xB3"	=> "\x64",		"\xF0\x9D\x99\xB4"	=> "\x65",		"\xF0\x9D\x99\xB5"	=> "\x66",		"\xF0\x9D\x99\xB6"	=> "\x67",		"\xF0\x9D\x99\xB7"	=> "\x68",		"\xF0\x9D\x99\xB8"	=> "\x69",		"\xF0\x9D\x99\xB9"	=> "\x6A",		"\xF0\x9D\x99\xBA"	=> "\x6B",		"\xF0\x9D\x99\xBB"	=> "\x6C",		"\xF0\x9D\x99\xBC"	=> "\x6D",		"\xF0\x9D\x99\xBD"	=> "\x6E",		"\xF0\x9D\x99\xBE"	=> "\x6F",		"\xF0\x9D\x99\xBF"	=> "\x70",		"\xF0\x9D\x9A\x80"	=> "\x71",		"\xF0\x9D\x9A\x81"	=> "\x72",		"\xF0\x9D\x9A\x82"	=> "\x73",		"\xF0\x9D\x9A\x83"	=> "\x74",		"\xF0\x9D\x9A\x84"	=> "\x75",		"\xF0\x9D\x9A\x85"	=> "\x76",		"\xF0\x9D\x9A\x86"	=> "\x77",		"\xF0\x9D\x9A\x87"	=> "\x78",		"\xF0\x9D\x9A\x88"	=> "\x79",		"\xF0\x9D\x9A\x89"	=> "\x7A",		"\xF0\x9D\x9A\xA8"	=> "\xCE\xB1",		"\xF0\x9D\x9A\xA9"	=> "\xCE\xB2",		"\xF0\x9D\x9A\xAA"	=> "\xCE\xB3",		"\xF0\x9D\x9A\xAB"	=> "\xCE\xB4",		"\xF0\x9D\x9A\xAC"	=> "\xCE\xB5",		"\xF0\x9D\x9A\xAD"	=> "\xCE\xB6",		"\xF0\x9D\x9A\xAE"	=> "\xCE\xB7",		"\xF0\x9D\x9A\xAF"	=> "\xCE\xB8",		"\xF0\x9D\x9A\xB0"	=> "\xCE\xB9",		"\xF0\x9D\x9A\xB1"	=> "\xCE\xBA",		"\xF0\x9D\x9A\xB2"	=> "\xCE\xBB",		"\xF0\x9D\x9A\xB3"	=> "\xCE\xBC",		"\xF0\x9D\x9A\xB4"	=> "\xCE\xBD",		"\xF0\x9D\x9A\xB5"	=> "\xCE\xBE",		"\xF0\x9D\x9A\xB6"	=> "\xCE\xBF",		"\xF0\x9D\x9A\xB7"	=> "\xCF\x80",		"\xF0\x9D\x9A\xB8"	=> "\xCF\x81",		"\xF0\x9D\x9A\xB9"	=> "\xCE\xB8",		"\xF0\x9D\x9A\xBA"	=> "\xCF\x83",		"\xF0\x9D\x9A\xBB"	=> "\xCF\x84",		"\xF0\x9D\x9A\xBC"	=> "\xCF\x85",		"\xF0\x9D\x9A\xBD"	=> "\xCF\x86",		"\xF0\x9D\x9A\xBE"	=> "\xCF\x87",		"\xF0\x9D\x9A\xBF"	=> "\xCF\x88",		"\xF0\x9D\x9B\x80"	=> "\xCF\x89",		"\xF0\x9D\x9B\x93"	=> "\xCF\x83",		"\xF0\x9D\x9B\xA2"	=> "\xCE\xB1",		"\xF0\x9D\x9B\xA3"	=> "\xCE\xB2",		"\xF0\x9D\x9B\xA4"	=> "\xCE\xB3",		"\xF0\x9D\x9B\xA5"	=> "\xCE\xB4",		"\xF0\x9D\x9B\xA6"	=> "\xCE\xB5",		"\xF0\x9D\x9B\xA7"	=> "\xCE\xB6",		"\xF0\x9D\x9B\xA8"	=> "\xCE\xB7",		"\xF0\x9D\x9B\xA9"	=> "\xCE\xB8",		"\xF0\x9D\x9B\xAA"	=> "\xCE\xB9",		"\xF0\x9D\x9B\xAB"	=> "\xCE\xBA",		"\xF0\x9D\x9B\xAC"	=> "\xCE\xBB",		"\xF0\x9D\x9B\xAD"	=> "\xCE\xBC",		"\xF0\x9D\x9B\xAE"	=> "\xCE\xBD",		"\xF0\x9D\x9B\xAF"	=> "\xCE\xBE",		"\xF0\x9D\x9B\xB0"	=> "\xCE\xBF",		"\xF0\x9D\x9B\xB1"	=> "\xCF\x80",		"\xF0\x9D\x9B\xB2"	=> "\xCF\x81",		"\xF0\x9D\x9B\xB3"	=> "\xCE\xB8",		"\xF0\x9D\x9B\xB4"	=> "\xCF\x83",		"\xF0\x9D\x9B\xB5"	=> "\xCF\x84",		"\xF0\x9D\x9B\xB6"	=> "\xCF\x85",		"\xF0\x9D\x9B\xB7"	=> "\xCF\x86",		"\xF0\x9D\x9B\xB8"	=> "\xCF\x87",		"\xF0\x9D\x9B\xB9"	=> "\xCF\x88",		"\xF0\x9D\x9B\xBA"	=> "\xCF\x89",		"\xF0\x9D\x9C\x8D"	=> "\xCF\x83",		"\xF0\x9D\x9C\x9C"	=> "\xCE\xB1",		"\xF0\x9D\x9C\x9D"	=> "\xCE\xB2",		"\xF0\x9D\x9C\x9E"	=> "\xCE\xB3",		"\xF0\x9D\x9C\x9F"	=> "\xCE\xB4",		"\xF0\x9D\x9C\xA0"	=> "\xCE\xB5",		"\xF0\x9D\x9C\xA1"	=> "\xCE\xB6",		"\xF0\x9D\x9C\xA2"	=> "\xCE\xB7",		"\xF0\x9D\x9C\xA3"	=> "\xCE\xB8",		"\xF0\x9D\x9C\xA4"	=> "\xCE\xB9",		"\xF0\x9D\x9C\xA5"	=> "\xCE\xBA",		"\xF0\x9D\x9C\xA6"	=> "\xCE\xBB",		"\xF0\x9D\x9C\xA7"	=> "\xCE\xBC",		"\xF0\x9D\x9C\xA8"	=> "\xCE\xBD",		"\xF0\x9D\x9C\xA9"	=> "\xCE\xBE",		"\xF0\x9D\x9C\xAA"	=> "\xCE\xBF",		"\xF0\x9D\x9C\xAB"	=> "\xCF\x80",		"\xF0\x9D\x9C\xAC"	=> "\xCF\x81",		"\xF0\x9D\x9C\xAD"	=> "\xCE\xB8",		"\xF0\x9D\x9C\xAE"	=> "\xCF\x83",		"\xF0\x9D\x9C\xAF"	=> "\xCF\x84",		"\xF0\x9D\x9C\xB0"	=> "\xCF\x85",		"\xF0\x9D\x9C\xB1"	=> "\xCF\x86",		"\xF0\x9D\x9C\xB2"	=> "\xCF\x87",		"\xF0\x9D\x9C\xB3"	=> "\xCF\x88",		"\xF0\x9D\x9C\xB4"	=> "\xCF\x89",		"\xF0\x9D\x9D\x87"	=> "\xCF\x83",		"\xF0\x9D\x9D\x96"	=> "\xCE\xB1",		"\xF0\x9D\x9D\x97"	=> "\xCE\xB2",		"\xF0\x9D\x9D\x98"	=> "\xCE\xB3",		"\xF0\x9D\x9D\x99"	=> "\xCE\xB4",		"\xF0\x9D\x9D\x9A"	=> "\xCE\xB5",		"\xF0\x9D\x9D\x9B"	=> "\xCE\xB6",		"\xF0\x9D\x9D\x9C"	=> "\xCE\xB7",		"\xF0\x9D\x9D\x9D"	=> "\xCE\xB8",		"\xF0\x9D\x9D\x9E"	=> "\xCE\xB9",		"\xF0\x9D\x9D\x9F"	=> "\xCE\xBA",		"\xF0\x9D\x9D\xA0"	=> "\xCE\xBB",		"\xF0\x9D\x9D\xA1"	=> "\xCE\xBC",		"\xF0\x9D\x9D\xA2"	=> "\xCE\xBD",		"\xF0\x9D\x9D\xA3"	=> "\xCE\xBE",		"\xF0\x9D\x9D\xA4"	=> "\xCE\xBF",		"\xF0\x9D\x9D\xA5"	=> "\xCF\x80",		"\xF0\x9D\x9D\xA6"	=> "\xCF\x81",		"\xF0\x9D\x9D\xA7"	=> "\xCE\xB8",		"\xF0\x9D\x9D\xA8"	=> "\xCF\x83",		"\xF0\x9D\x9D\xA9"	=> "\xCF\x84",		"\xF0\x9D\x9D\xAA"	=> "\xCF\x85",		"\xF0\x9D\x9D\xAB"	=> "\xCF\x86",		"\xF0\x9D\x9D\xAC"	=> "\xCF\x87",		"\xF0\x9D\x9D\xAD"	=> "\xCF\x88",		"\xF0\x9D\x9D\xAE"	=> "\xCF\x89",		"\xF0\x9D\x9E\x81"	=> "\xCF\x83",		"\xF0\x9D\x9E\x90"	=> "\xCE\xB1",		"\xF0\x9D\x9E\x91"	=> "\xCE\xB2",		"\xF0\x9D\x9E\x92"	=> "\xCE\xB3",		"\xF0\x9D\x9E\x93"	=> "\xCE\xB4",		"\xF0\x9D\x9E\x94"	=> "\xCE\xB5",		"\xF0\x9D\x9E\x95"	=> "\xCE\xB6",		"\xF0\x9D\x9E\x96"	=> "\xCE\xB7",		"\xF0\x9D\x9E\x97"	=> "\xCE\xB8",		"\xF0\x9D\x9E\x98"	=> "\xCE\xB9",		"\xF0\x9D\x9E\x99"	=> "\xCE\xBA",		"\xF0\x9D\x9E\x9A"	=> "\xCE\xBB",		"\xF0\x9D\x9E\x9B"	=> "\xCE\xBC",		"\xF0\x9D\x9E\x9C"	=> "\xCE\xBD",		"\xF0\x9D\x9E\x9D"	=> "\xCE\xBE",		"\xF0\x9D\x9E\x9E"	=> "\xCE\xBF",		"\xF0\x9D\x9E\x9F"	=> "\xCF\x80",		"\xF0\x9D\x9E\xA0"	=> "\xCF\x81",		"\xF0\x9D\x9E\xA1"	=> "\xCE\xB8",		"\xF0\x9D\x9E\xA2"	=> "\xCF\x83",		"\xF0\x9D\x9E\xA3"	=> "\xCF\x84",		"\xF0\x9D\x9E\xA4"	=> "\xCF\x85",		"\xF0\x9D\x9E\xA5"	=> "\xCF\x86",		"\xF0\x9D\x9E\xA6"	=> "\xCF\x87",		"\xF0\x9D\x9E\xA7"	=> "\xCF\x88",		"\xF0\x9D\x9E\xA8"	=> "\xCF\x89",		"\xF0\x9D\x9E\xBB"	=> "\xCF\x83",		"\xF0\x9D\x9F\x8A"	=> "\xCF\x9D",	);	global $phpbb_root_path, $phpEx;	// do the case fold	$text = utf8_case_fold($text, $option);	if (!class_exists('utf_normalizer'))	{		global $phpbb_root_path, $phpEx;		include($phpbb_root_path . 'includes/utf/utf_normalizer.' . $phpEx);	}	// convert to NFKC	utf_normalizer::nfkc($text);	// FC_NFKC_Closure, http://www.unicode.org/Public/5.0.0/ucd/DerivedNormalizationProps.txt	$text = strtr($text, $fc_nfkc_closure);	return $text;}/*** Assume the input is NFC:* Takes the input and does a "special" case fold. It does minor normalization as well.** @param	string	$text	text to be case folded* @param	string	$option	determines how we will fold the cases* @return	string			case folded text*/function utf8_case_fold_nfc($text, $option = 'full'){	static $uniarray = array();	static $ypogegrammeni = array(		"\xCD\xBA"		=> "\x20\xCD\x85",		"\xE1\xBE\x80"	=> "\xE1\xBC\x80\xCD\x85",		"\xE1\xBE\x81"	=> "\xE1\xBC\x81\xCD\x85",		"\xE1\xBE\x82"	=> "\xE1\xBC\x82\xCD\x85",		"\xE1\xBE\x83"	=> "\xE1\xBC\x83\xCD\x85",		"\xE1\xBE\x84"	=> "\xE1\xBC\x84\xCD\x85",		"\xE1\xBE\x85"	=> "\xE1\xBC\x85\xCD\x85",		"\xE1\xBE\x86"	=> "\xE1\xBC\x86\xCD\x85",		"\xE1\xBE\x87"	=> "\xE1\xBC\x87\xCD\x85",		"\xE1\xBE\x88"	=> "\xE1\xBC\x88\xCD\x85",		"\xE1\xBE\x89"	=> "\xE1\xBC\x89\xCD\x85",		"\xE1\xBE\x8A"	=> "\xE1\xBC\x8A\xCD\x85",		"\xE1\xBE\x8B"	=> "\xE1\xBC\x8B\xCD\x85",		"\xE1\xBE\x8C"	=> "\xE1\xBC\x8C\xCD\x85",		"\xE1\xBE\x8D"	=> "\xE1\xBC\x8D\xCD\x85",		"\xE1\xBE\x8E"	=> "\xE1\xBC\x8E\xCD\x85",		"\xE1\xBE\x8F"	=> "\xE1\xBC\x8F\xCD\x85",		"\xE1\xBE\x90"	=> "\xE1\xBC\xA0\xCD\x85",		"\xE1\xBE\x91"	=> "\xE1\xBC\xA1\xCD\x85",		"\xE1\xBE\x92"	=> "\xE1\xBC\xA2\xCD\x85",		"\xE1\xBE\x93"	=> "\xE1\xBC\xA3\xCD\x85",		"\xE1\xBE\x94"	=> "\xE1\xBC\xA4\xCD\x85",		"\xE1\xBE\x95"	=> "\xE1\xBC\xA5\xCD\x85",		"\xE1\xBE\x96"	=> "\xE1\xBC\xA6\xCD\x85",		"\xE1\xBE\x97"	=> "\xE1\xBC\xA7\xCD\x85",		"\xE1\xBE\x98"	=> "\xE1\xBC\xA8\xCD\x85",		"\xE1\xBE\x99"	=> "\xE1\xBC\xA9\xCD\x85",		"\xE1\xBE\x9A"	=> "\xE1\xBC\xAA\xCD\x85",		"\xE1\xBE\x9B"	=> "\xE1\xBC\xAB\xCD\x85",		"\xE1\xBE\x9C"	=> "\xE1\xBC\xAC\xCD\x85",		"\xE1\xBE\x9D"	=> "\xE1\xBC\xAD\xCD\x85",		"\xE1\xBE\x9E"	=> "\xE1\xBC\xAE\xCD\x85",		"\xE1\xBE\x9F"	=> "\xE1\xBC\xAF\xCD\x85",		"\xE1\xBE\xA0"	=> "\xE1\xBD\xA0\xCD\x85",		"\xE1\xBE\xA1"	=> "\xE1\xBD\xA1\xCD\x85",		"\xE1\xBE\xA2"	=> "\xE1\xBD\xA2\xCD\x85",		"\xE1\xBE\xA3"	=> "\xE1\xBD\xA3\xCD\x85",		"\xE1\xBE\xA4"	=> "\xE1\xBD\xA4\xCD\x85",		"\xE1\xBE\xA5"	=> "\xE1\xBD\xA5\xCD\x85",		"\xE1\xBE\xA6"	=> "\xE1\xBD\xA6\xCD\x85",		"\xE1\xBE\xA7"	=> "\xE1\xBD\xA7\xCD\x85",		"\xE1\xBE\xA8"	=> "\xE1\xBD\xA8\xCD\x85",		"\xE1\xBE\xA9"	=> "\xE1\xBD\xA9\xCD\x85",		"\xE1\xBE\xAA"	=> "\xE1\xBD\xAA\xCD\x85",		"\xE1\xBE\xAB"	=> "\xE1\xBD\xAB\xCD\x85",		"\xE1\xBE\xAC"	=> "\xE1\xBD\xAC\xCD\x85",		"\xE1\xBE\xAD"	=> "\xE1\xBD\xAD\xCD\x85",		"\xE1\xBE\xAE"	=> "\xE1\xBD\xAE\xCD\x85",		"\xE1\xBE\xAF"	=> "\xE1\xBD\xAF\xCD\x85",		"\xE1\xBE\xB2"	=> "\xE1\xBD\xB0\xCD\x85",		"\xE1\xBE\xB3"	=> "\xCE\xB1\xCD\x85",		"\xE1\xBE\xB4"	=> "\xCE\xAC\xCD\x85",		"\xE1\xBE\xB7"	=> "\xE1\xBE\xB6\xCD\x85",		"\xE1\xBE\xBC"	=> "\xCE\x91\xCD\x85",		"\xE1\xBF\x82"	=> "\xE1\xBD\xB4\xCD\x85",		"\xE1\xBF\x83"	=> "\xCE\xB7\xCD\x85",		"\xE1\xBF\x84"	=> "\xCE\xAE\xCD\x85",		"\xE1\xBF\x87"	=> "\xE1\xBF\x86\xCD\x85",		"\xE1\xBF\x8C"	=> "\xCE\x97\xCD\x85",		"\xE1\xBF\xB2"	=> "\xE1\xBD\xBC\xCD\x85",		"\xE1\xBF\xB3"	=> "\xCF\x89\xCD\x85",		"\xE1\xBF\xB4"	=> "\xCF\x8E\xCD\x85",		"\xE1\xBF\xB7"	=> "\xE1\xBF\xB6\xCD\x85",		"\xE1\xBF\xBC"	=> "\xCE\xA9\xCD\x85",	);	global $phpbb_root_path, $phpEx;	// perform a small trick, avoid further normalization on composed points that contain U+0345 in their decomposition	$text = strtr($text, $ypogegrammeni);	// do the case fold	$text = utf8_case_fold($text, $option);	return $text;}/*** A wrapper function for the normalizer which takes care of including the class if required and modifies the passed strings* to be in NFC (Normalization Form Composition).** @param	mixed	$strings	a string or an array of strings to normalize* @return	mixed				the normalized content, preserving array keys if array given.*/function utf8_normalize_nfc($strings){	if (empty($strings))	{		return $strings;	}	if (!class_exists('utf_normalizer'))	{		global $phpbb_root_path, $phpEx;		include($phpbb_root_path . 'includes/utf/utf_normalizer.' . $phpEx);	}	if (!is_array($strings))	{		utf_normalizer::nfc($strings);	}	else if (is_array($strings))	{		foreach ($strings as $key => $string)		{			if (is_array($string))			{				foreach ($string as $_key => $_string)				{					utf_normalizer::nfc($strings[$key][$_key]);				}			}			else			{				utf_normalizer::nfc($strings[$key]);			}		}	}	return $strings;}/*** This function is used to generate a "clean" version of a string.* Clean means that it is a case insensitive form (case folding) and that it is normalized (NFC).* Additionally a homographs of one character are transformed into one specific character (preferably ASCII* if it is an ASCII character).** Please be aware that if you change something within this function or within* functions used here you need to rebuild/update the username_clean column in the users table. And all other* columns that store a clean string otherwise you will break this functionality.** @param	string	$text	An unclean string, mabye user input (has to be valid UTF-8!)* @return	string			Cleaned up version of the input string*/function utf8_clean_string($text){	global $phpbb_root_path, $phpEx;	static $homographs = array();	if (empty($homographs))	{		$homographs = include($phpbb_root_path . 'includes/utf/data/confusables.' . $phpEx);	}	$text = utf8_case_fold_nfkc($text);	$text = strtr($text, $homographs);	// Other control characters	$text = preg_replace('#(?:[\x00-\x1F\x7F]+|(?:\xC2[\x80-\x9F])+)#', '', $text);	// we need to reduce multiple spaces to a single one	$text = preg_replace('# {2,}#', ' ', $text);	// we can use trim here as all the other space characters should have been turned	// into normal ASCII spaces by now	return trim($text);}/*** A wrapper for htmlspecialchars($value, ENT_COMPAT, 'UTF-8')*/function utf8_htmlspecialchars($value){	return htmlspecialchars($value, ENT_COMPAT, 'UTF-8');}/*** Trying to convert returned system message to utf8** PHP assumes such messages are ISO-8859-1 so we'll do that too* and if it breaks messages we'll blame it on them ;-)*/function utf8_convert_message($message){	// First of all check if conversion is neded at all, as there is no point	// in converting ASCII messages from ISO-8859-1 to UTF-8	if (!preg_match('/[\x80-\xFF]/', $message))	{		return utf8_htmlspecialchars($message);	}	// else we need to convert some part of the message	return utf8_htmlspecialchars(utf8_recode($message, 'ISO-8859-1'));}/*** UTF8-compatible wordwrap replacement** @param	string	$string	The input string* @param	int		$width	The column width. Defaults to 75.* @param	string	$break	The line is broken using the optional break parameter. Defaults to '\n'.* @param	bool	$cut	If the cut is set to TRUE, the string is always wrapped at the specified width. So if you have a word that is larger than the given width, it is broken apart.** @return	string			the given string wrapped at the specified column.**/function utf8_wordwrap($string, $width = 75, $break = "\n", $cut = false){	// We first need to explode on $break, not destroying existing (intended) breaks	$lines = explode($break, $string);	$new_lines = array(0 => '');	$index = 0;	foreach ($lines as $line)	{		$words = explode(' ', $line);		for ($i = 0, $size = sizeof($words); $i < $size; $i++)		{			$word = $words[$i];			// If cut is true we need to cut the word if it is > width chars			if ($cut && utf8_strlen($word) > $width)			{				$words[$i] = utf8_substr($word, $width);				$word = utf8_substr($word, 0, $width);				$i--;			}			if (utf8_strlen($new_lines[$index] . $word) > $width)			{				$new_lines[$index] = substr($new_lines[$index], 0, -1);				$index++;				$new_lines[$index] = '';			}			$new_lines[$index] .= $word . ' ';		}		$new_lines[$index] = substr($new_lines[$index], 0, -1);		$index++;		$new_lines[$index] = '';	}	unset($new_lines[$index]);	return implode($break, $new_lines);}/*** UTF8-safe basename() function** basename() has some limitations and is dependent on the locale setting* according to the PHP manual. Therefore we provide our own locale independant* basename function.** @param string $filename The filename basename() should be applied to* @return string The basenamed filename*/function utf8_basename($filename){	// We always check for forward slash AND backward slash	// because they could be mixed or "sneaked" in. ;)	// You know, never trust user input...	if (strpos($filename, '/') !== false)	{		$filename = utf8_substr($filename, utf8_strrpos($filename, '/') + 1);	}	if (strpos($filename, '\\') !== false)	{		$filename = utf8_substr($filename, utf8_strrpos($filename, '\\') + 1);	}	return $filename;}/*** UTF8-safe str_replace() function** @param string $search The value to search for* @param string $replace The replacement string* @param string $subject The target string* @return string The resultant string*/function utf8_str_replace($search, $replace, $subject){	if (!is_array($search))	{		$search = array($search);		if (is_array($replace))		{			$replace = (string) $replace;			trigger_error('Array to string conversion', E_USER_NOTICE);		}	}	$length = sizeof($search);	if (!is_array($replace))	{		$replace = array_fill(0, $length, $replace);	}	else	{		$replace = array_pad($replace, $length, '');	}	for ($i = 0; $i < $length; $i++)	{		$search_length = utf8_strlen($search[$i]);		$replace_length = utf8_strlen($replace[$i]);		$offset = 0;		while (($start = utf8_strpos($subject, $search[$i], $offset)) !== false)		{			$subject = utf8_substr($subject, 0, $start) . $replace[$i] . utf8_substr($subject, $start + $search_length);			$offset = $start + $replace_length;		}	}	return $subject;}?>
<?php/**** @package install* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** NOTE to potential convertor authors. Please use this file to get* familiar with the structure since we added some bare explanations here.** Since this file gets included more than once on one page you are not able to add functions to it.* Instead use a functions_ file.** @ignore*/if (!defined('IN_PHPBB')){	exit;}include($phpbb_root_path . 'config.' . $phpEx);unset($dbpasswd);/*** $convertor_data provides some basic information about this convertor which is* used on the initial list of convertors and to populate the default settings*/$convertor_data = array(	'forum_name'	=> 'phpBB 2.0.x',	'version'		=> '1.0.3',	'phpbb_version'	=> '3.0.10',	'author'		=> '<a href="http://www.phpbb.com/">phpBB Group</a>',	'dbms'			=> $dbms,	'dbhost'		=> $dbhost,	'dbport'		=> $dbport,	'dbuser'		=> $dbuser,	'dbpasswd'		=> '',	'dbname'		=> $dbname,	'table_prefix'	=> 'phpbb_',	'forum_path'	=> '../forums',	'author_notes'	=> '',);/*** $tables is a list of the tables (minus prefix) which we expect to find in the* source forum. It is used to guess the prefix if the specified prefix is incorrect*/$tables = array(	'auth_access',	'banlist',	'categories',	'disallow',	'forum_prune',	'forums',	'groups',	'posts',	'posts_text',	'privmsgs',	'privmsgs_text',	'ranks',	'smilies',	'topics',	'topics_watch',	'user_group',	'users',	'vote_desc',	'vote_results',	'vote_voters',	'words');/*** $config_schema details how the board configuration information is stored in the source forum.** 'table_format' can take the value 'file' to indicate a config file. In this case array_name* is set to indicate the name of the array the config values are stored in* Example of using a file:* $config_schema = array(* 	'table_format'	=>	'file',* 	'filename'	=>	'NAME OF FILE', // If the file is not in the root directory, the path needs to be added with no leading slash* 	'array_name' => 'NAME OF ARRAY', // Only used if the configuration file stores the setting in an array.* 	'settings'		=>	array(*        'board_email' => 'SUPPORT_EMAIL', // target config name => source target name* 	)* );* 'table_format' can be an array if the values are stored in a table which is an assosciative array* (as per phpBB 2.0.x)* If left empty, values are assumed to be stored in a table where each config setting is* a column (as per phpBB 1.x)** In either of the latter cases 'table_name' indicates the name of the table in the database** 'settings' is an array which maps the name of the config directive in the source forum* to the config directive in phpBB3. It can either be a direct mapping or use a function.* Please note that the contents of the old config value are passed to the function, therefore* an in-built function requiring the variable passed by reference is not able to be used. Since* empty() is such a function we created the function is_empty() to be used instead.*/$config_schema = array(	'table_name'	=>	'config',	'table_format'	=>	array('config_name' => 'config_value'),	'settings'		=>	array(		'allow_bbcode'			=> 'allow_bbcode',		'allow_smilies'			=> 'allow_smilies',		'allow_sig'				=> 'allow_sig',		'allow_namechange'		=> 'allow_namechange',		'allow_avatar_local'	=> 'allow_avatar_local',		'allow_avatar_remote'	=> 'allow_avatar_remote',		'allow_avatar_upload'	=> 'allow_avatar_upload',		'board_disable'			=> 'board_disable',		'sitename'				=> 'phpbb_set_encoding(sitename)',		'site_desc'				=> 'phpbb_set_encoding(site_desc)',		'session_length'		=> 'session_length',		'board_email_sig'		=> 'phpbb_set_encoding(board_email_sig)',		'posts_per_page'		=> 'posts_per_page',		'topics_per_page'		=> 'topics_per_page',		'enable_confirm'		=> 'enable_confirm',		'board_email_form'		=> 'board_email_form',		'override_user_style'	=> 'override_user_style',		'hot_threshold'			=> 'hot_threshold',		'max_poll_options'		=> 'max_poll_options',		'max_sig_chars'			=> 'max_sig_chars',		'pm_max_msgs'			=> 'max_inbox_privmsgs',		'smtp_delivery'			=> 'smtp_delivery',		'smtp_host'				=> 'smtp_host',		'smtp_username'			=> 'smtp_username',		'smtp_password'			=> 'smtp_password',		'require_activation'	=> 'require_activation',		'flood_interval'		=> 'flood_interval',		'avatar_filesize'		=> 'avatar_filesize',		'avatar_max_width'		=> 'avatar_max_width',		'avatar_max_height'		=> 'avatar_max_height',		'default_dateformat'	=> 'phpbb_set_encoding(default_dateformat)',		'board_timezone'		=> 'board_timezone',		'allow_privmsg'			=> 'not(privmsg_disable)',		'gzip_compress'			=> 'gzip_compress',		'coppa_enable'			=> '!is_empty(coppa_mail)',		'coppa_fax'				=> 'coppa_fax',		'coppa_mail'			=> 'coppa_mail',		'record_online_users'	=> 'record_online_users',		'record_online_date'	=> 'record_online_date',		'board_startdate'		=> 'board_startdate',	));/*** $test_file is the name of a file which is present on the source* forum which can be used to check that the path specified by the* user was correct*/$test_file = 'modcp.php';/*** If this is set then we are not generating the first page of information but getting the conversion information.*/if (!$get_info){	// Test to see if the birthday MOD is installed on the source forum	// Niels' birthday mod	if (get_config_value('birthday_required') !== false || get_config_value('bday_require') !== false)	{		define('MOD_BIRTHDAY', true);	}	// TerraFrost's validated birthday mod	if (get_config_value('bday_require') !== false)	{		define('MOD_BIRTHDAY_TERRA', true);	}	// Test to see if the attachment MOD is installed on the source forum	// If it is, we will convert this data as well	$src_db->sql_return_on_error(true);	$sql = "SELECT config_value		FROM {$convert->src_table_prefix}attachments_config		WHERE config_name = 'upload_dir'";	$result = $src_db->sql_query($sql);	if ($result && $row = $src_db->sql_fetchrow($result))	{		// Here the constant is defined		define('MOD_ATTACHMENT', true);		// Here i add more tables to be checked in the old forum		$tables += array(			'attachments',			'attachments_desc',			'extensions',			'extension_groups'		);		$src_db->sql_freeresult($result);	}	else if ($result)	{		$src_db->sql_freeresult($result);	}	/**	* Tests for further MODs can be included here.	* Please use constants for this, prefixing them with MOD_	*/	$src_db->sql_return_on_error(false);	// Now let us set a temporary config variable for user id incrementing	$sql = "SELECT user_id		FROM {$convert->src_table_prefix}users		WHERE user_id = 1";	$result = $src_db->sql_query($sql);	$user_id = (int) $src_db->sql_fetchfield('user_id');	$src_db->sql_freeresult($result);	// If there is a user id 1, we need to increment user ids. :/	if ($user_id === 1)	{		// Try to get the maximum user id possible...		$sql = "SELECT MAX(user_id) AS max_user_id			FROM {$convert->src_table_prefix}users";		$result = $src_db->sql_query($sql);		$user_id = (int) $src_db->sql_fetchfield('max_user_id');		$src_db->sql_freeresult($result);		set_config('increment_user_id', ($user_id + 1), true);	}	else	{		set_config('increment_user_id', 0, true);	}	// Overwrite maximum avatar width/height	@define('DEFAULT_AVATAR_X_CUSTOM', get_config_value('avatar_max_width'));	@define('DEFAULT_AVATAR_Y_CUSTOM', get_config_value('avatar_max_height'));	// additional table used only during conversion	@define('USERCONV_TABLE', $table_prefix . 'userconv');/***	Description on how to use the convertor framework.**	'schema' Syntax Description*		-> 'target'			=> Target Table. If not specified the next table will be handled*		-> 'primary'		=> Primary Key. If this is specified then this table is processed in batches*		-> 'query_first'	=> array('target' or 'src', Query to execute before beginning the process*								(if more than one then specified as array))*		-> 'function_first'	=> Function to execute before beginning the process (if more than one then specified as array)*								(This is mostly useful if variables need to be given to the converting process)*		-> 'test_file'		=> This is not used at the moment but should be filled with a file from the old installation**		// DB Functions*		'distinct'	=> Add DISTINCT to the select query*		'where'		=> Add WHERE to the select query*		'group_by'	=> Add GROUP BY to the select query*		'left_join'	=> Add LEFT JOIN to the select query (if more than one joins specified as array)*		'having'	=> Add HAVING to the select query**		// DB INSERT array*		This one consist of three parameters*		First Parameter:*							The key need to be filled within the target table*							If this is empty, the target table gets not assigned the source value*		Second Parameter:*							Source value. If the first parameter is specified, it will be assigned this value.*							If the first parameter is empty, this only gets added to the select query*		Third Parameter:*							Custom Function. Function to execute while storing source value into target table.*							The functions return value get stored.*							The function parameter consist of the value of the second parameter.**							types:*								- empty string == execute nothing*								- string == function to execute*								- array == complex execution instructions**		Complex execution instructions:*		@todo test complex execution instructions - in theory they will work fine**							By defining an array as the third parameter you are able to define some statements to be executed. The key*							is defining what to execute, numbers can be appended...**							'function' => execute function*							'execute' => run code, whereby all occurrences of {VALUE} get replaced by the last returned value.*										The result *must* be assigned/stored to {RESULT}.*							'typecast'	=> typecast value**							The returned variables will be made always available to the next function to continue to work with.**							example (variable inputted is an integer of 1):**							array(*								'function1'		=> 'increment_by_one',		// returned variable is 2*								'typecast'		=> 'string',				// typecast variable to be a string*								'execute'		=> '{RESULT} = {VALUE} . ' is good';', // returned variable is '2 is good'*								'function2'		=> 'replace_good_with_bad',				// returned variable is '2 is bad'*							),**/	$convertor = array(		'test_file'				=> 'viewtopic.php',		'avatar_path'			=> get_config_value('avatar_path') . '/',		'avatar_gallery_path'	=> get_config_value('avatar_gallery_path') . '/',		'smilies_path'			=> get_config_value('smilies_path') . '/',		'upload_path'			=> (defined('MOD_ATTACHMENT')) ? phpbb_get_files_dir() . '/' : '',		'thumbnails'			=> (defined('MOD_ATTACHMENT')) ? array('thumbs/', 't_') : '',		'ranks_path'			=> false, // phpBB 2.0.x had no config value for a ranks path		// We empty some tables to have clean data available		'query_first'			=> array(			array('target', $convert->truncate_statement . SEARCH_RESULTS_TABLE),			array('target', $convert->truncate_statement . SEARCH_WORDLIST_TABLE),			array('target', $convert->truncate_statement . SEARCH_WORDMATCH_TABLE),			array('target', $convert->truncate_statement . LOG_TABLE),		),//	with this you are able to import all attachment files on the fly. For large boards this is not an option, therefore commented out by default.//	Instead every file gets copied while processing the corresponding attachment entry.//		if (defined("MOD_ATTACHMENT")) { import_attachment_files(); phpbb_copy_thumbnails(); }		// phpBB2 allowed some similar usernames to coexist which would have the same		// username_clean in phpBB3 which is not possible, so we'll give the admin a list		// of user ids and usernames and let him deicde what he wants to do with them		'execute_first'	=> '			phpbb_create_userconv_table();			import_avatar_gallery();			if (defined("MOD_ATTACHMENT")) phpbb_import_attach_config();			phpbb_insert_forums();		',		'execute_last'	=> array('			add_bots();		', '			update_folder_pm_count();		', '			update_unread_count();		', '			phpbb_convert_authentication(\'start\');		', '			phpbb_convert_authentication(\'first\');		', '			phpbb_convert_authentication(\'second\');		', '			phpbb_convert_authentication(\'third\');		'),		'schema' => array(			array(				'target'	=> USERCONV_TABLE,				'query_first'   => array('target', $convert->truncate_statement . USERCONV_TABLE),				array('user_id',			'users.user_id', 	''),				array('username_clean',		'users.username',	array('function1' => 'phpbb_set_encoding', 'function2' => 'utf8_clean_string')),			),			array(				'target'		=> (defined('MOD_ATTACHMENT')) ? ATTACHMENTS_TABLE : '',				'primary'		=> 'attachments.attach_id',				'query_first'	=> (defined('MOD_ATTACHMENT')) ? array('target', $convert->truncate_statement . ATTACHMENTS_TABLE) : '',				'autoincrement'	=> 'attach_id',				array('attach_id',				'attachments.attach_id',				''),				array('post_msg_id',			'attachments.post_id',					''),				array('topic_id',				'posts.topic_id',						''),				array('in_message',				0,										''),				array('is_orphan',				0,										''),				array('poster_id',				'attachments.user_id_1 AS poster_id',	'phpbb_user_id'),				array('physical_filename',		'attachments_desc.physical_filename',	'import_attachment'),				array('real_filename',			'attachments_desc.real_filename',		'phpbb_set_encoding'),				array('download_count',			'attachments_desc.download_count',		''),				array('attach_comment',			'attachments_desc.comment',				array('function1' => 'phpbb_set_encoding', 'function2' => 'utf8_htmlspecialchars')),				array('extension',				'attachments_desc.extension',			''),				array('mimetype',				'attachments_desc.mimetype',			''),				array('filesize',				'attachments_desc.filesize',			''),				array('filetime',				'attachments_desc.filetime',			''),				array('thumbnail',				'attachments_desc.thumbnail',			''),				'where'			=> 'attachments_desc.attach_id = attachments.attach_id AND attachments.privmsgs_id = 0 AND posts.post_id = attachments.post_id',				'group_by'		=> 'attachments.attach_id'			),			array(				'target'		=> (defined('MOD_ATTACHMENT')) ? ATTACHMENTS_TABLE : '',				'primary'		=> 'attachments.attach_id',				'autoincrement'	=> 'attach_id',				array('attach_id',				'attachments.attach_id',				''),				array('post_msg_id',			'attachments.privmsgs_id',				''),				array('topic_id',				0,										''),				array('in_message',				1,										''),				array('is_orphan',				0,										''),				array('poster_id',				'attachments.user_id_1 AS poster_id',	'phpbb_user_id'),				array('physical_filename',		'attachments_desc.physical_filename',	'import_attachment'),				array('real_filename',			'attachments_desc.real_filename',		''),				array('download_count',			'attachments_desc.download_count',		''),				array('attach_comment',			'attachments_desc.comment',				array('function1' => 'phpbb_set_encoding', 'function2' => 'utf8_htmlspecialchars')),				array('extension',				'attachments_desc.extension',			''),				array('mimetype',				'attachments_desc.mimetype',			''),				array('filesize',				'attachments_desc.filesize',			''),				array('filetime',				'attachments_desc.filetime',			''),				array('thumbnail',				'attachments_desc.thumbnail',			''),				'where'			=> 'attachments_desc.attach_id = attachments.attach_id AND attachments.post_id = 0',				'group_by'		=> 'attachments.attach_id'			),			array(				'target'		=> (defined('MOD_ATTACHMENT')) ? EXTENSIONS_TABLE : '',				'query_first'	=> (defined('MOD_ATTACHMENT')) ? array('target', $convert->truncate_statement . EXTENSIONS_TABLE) : '',				'autoincrement'	=> 'extension_id',				array('extension_id',			'extensions.ext_id',				''),				array('group_id',				'extensions.group_id',				''),				array('extension',				'extensions.extension',				''),			),			array(				'target'		=> (defined('MOD_ATTACHMENT')) ? EXTENSION_GROUPS_TABLE : '',				'query_first'	=> (defined('MOD_ATTACHMENT')) ? array('target', $convert->truncate_statement . EXTENSION_GROUPS_TABLE) : '',				'autoincrement'	=> 'group_id',				array('group_id',				'extension_groups.group_id',			''),				array('group_name',				'extension_groups.group_name',			array('function1' => 'phpbb_set_encoding', 'function2' => 'utf8_htmlspecialchars')),				array('cat_id',					'extension_groups.cat_id',				'phpbb_attachment_category'),				array('allow_group',			'extension_groups.allow_group',			''),				array('download_mode',			1,										''),				array('upload_icon',			'',										''),				array('max_filesize',			'extension_groups.max_filesize',		''),				array('allowed_forums',			'extension_groups.forum_permissions',	'phpbb_attachment_forum_perms'),				array('allow_in_pm',			1,										''),			),			array(				'target'		=> BANLIST_TABLE,				'execute_first'	=> 'phpbb_check_username_collisions();',				'query_first'	=> array('target', $convert->truncate_statement . BANLIST_TABLE),				array('ban_ip',					'banlist.ban_ip',					'decode_ban_ip'),				array('ban_userid',				'banlist.ban_userid',				'phpbb_user_id'),				array('ban_email',				'banlist.ban_email',				''),				array('ban_reason',				'',									''),				array('ban_give_reason',		'',									''),				'where'			=> "banlist.ban_ip NOT LIKE '%.%'",			),			array(				'target'		=> BANLIST_TABLE,				array('ban_ip',					'banlist.ban_ip',	''),				array('ban_userid',				0,					''),				array('ban_email',				'',					''),				array('ban_reason',				'',					''),				array('ban_give_reason',		'',					''),				'where'			=> "banlist.ban_ip LIKE '%.%'",			),			array(				'target'		=> DISALLOW_TABLE,				'query_first'	=> array('target', $convert->truncate_statement . DISALLOW_TABLE),				array('disallow_username',		'disallow.disallow_username',				'phpbb_disallowed_username'),			),			array(				'target'		=> RANKS_TABLE,				'query_first'	=> array('target', $convert->truncate_statement . RANKS_TABLE),				'autoincrement'	=> 'rank_id',				array('rank_id',					'ranks.rank_id',				''),				array('rank_title',					'ranks.rank_title',				array('function1' => 'phpbb_set_default_encoding', 'function2' => 'utf8_htmlspecialchars')),				array('rank_min',					'ranks.rank_min',				array('typecast' => 'int', 'execute' => '{RESULT} = ({VALUE}[0] < 0) ? 0 : {VALUE}[0];')),				array('rank_special',				'ranks.rank_special',			''),				array('rank_image',					'ranks.rank_image',				'import_rank'),			),			array(				'target'		=> TOPICS_TABLE,				'query_first'	=> array('target', $convert->truncate_statement . TOPICS_TABLE),				'primary'		=> 'topics.topic_id',				'autoincrement'	=> 'topic_id',				array('topic_id',				'topics.topic_id',					''),				array('forum_id',				'topics.forum_id',					''),				array('icon_id',				0,									''),				array('topic_poster',			'topics.topic_poster AS poster_id',	'phpbb_user_id'),				array('topic_attachment',		((defined('MOD_ATTACHMENT')) ? 'topics.topic_attachment' : 0), ''),				array('topic_title',			'topics.topic_title',				'phpbb_set_encoding'),				array('topic_time',				'topics.topic_time',				''),				array('topic_views',			'topics.topic_views',				''),				array('topic_replies',			'topics.topic_replies',				''),				array('topic_replies_real',		'topics.topic_replies',				''),				array('topic_last_post_id',		'topics.topic_last_post_id',		''),				array('topic_status',			'topics.topic_status',				'is_topic_locked'),				array('topic_moved_id',			0,									''),				array('topic_type',				'topics.topic_type',				'phpbb_convert_topic_type'),				array('topic_first_post_id',	'topics.topic_first_post_id',		''),				array('topic_last_view_time',	'posts.post_time',					'intval'),				array('poll_title',				'vote_desc.vote_text',				array('function1' => 'null_to_str', 'function2' => 'phpbb_set_encoding', 'function3' => 'htmlspecialchars_decode', 'function4' => 'utf8_htmlspecialchars')),				array('poll_start',				'vote_desc.vote_start',				'null_to_zero'),				array('poll_length',			'vote_desc.vote_length',			'null_to_zero'),				array('poll_max_options',		1,									''),				array('poll_vote_change',		0,									''),				'left_join'		=>	array (	'topics LEFT JOIN vote_desc ON topics.topic_id = vote_desc.topic_id AND topics.topic_vote = 1',											'topics LEFT JOIN posts ON topics.topic_last_post_id = posts.post_id',									),				'where'			=> 'topics.topic_moved_id = 0',			),			array(				'target'		=> TOPICS_TABLE,				'primary'		=> 'topics.topic_id',				'autoincrement'	=> 'topic_id',				array('topic_id',				'topics.topic_id',					''),				array('forum_id',				'topics.forum_id',					''),				array('icon_id',				0,									''),				array('topic_poster',			'topics.topic_poster AS poster_id',	'phpbb_user_id'),				array('topic_attachment',		((defined('MOD_ATTACHMENT')) ? 'topics.topic_attachment' : 0), ''),				array('topic_title',			'topics.topic_title',				'phpbb_set_encoding'),				array('topic_time',				'topics.topic_time',				''),				array('topic_views',			'topics.topic_views',				''),				array('topic_replies',			'topics.topic_replies',				''),				array('topic_replies_real',		'topics.topic_replies',				''),				array('topic_last_post_id',		'topics.topic_last_post_id',		''),				array('topic_status',			ITEM_MOVED,							''),				array('topic_moved_id',			'topics.topic_moved_id',			''),				array('topic_type',				'topics.topic_type',				'phpbb_convert_topic_type'),				array('topic_first_post_id',	'topics.topic_first_post_id',		''),				array('poll_title',				'vote_desc.vote_text',				array('function1' => 'null_to_str', 'function2' => 'phpbb_set_encoding', 'function3' => 'htmlspecialchars_decode', 'function4' => 'utf8_htmlspecialchars')),				array('poll_start',				'vote_desc.vote_start',				'null_to_zero'),				array('poll_length',			'vote_desc.vote_length',			'null_to_zero'),				array('poll_max_options',		1,									''),				array('poll_vote_change',		0,									''),				'left_join'		=> 'topics LEFT JOIN vote_desc ON topics.topic_id = vote_desc.topic_id AND topics.topic_vote = 1',				'where'			=> 'topics.topic_moved_id <> 0',			),			array(				'target'		=> TOPICS_WATCH_TABLE,				'primary'		=> 'topics_watch.topic_id',				'query_first'	=> array('target', $convert->truncate_statement . TOPICS_WATCH_TABLE),				array('topic_id',				'topics_watch.topic_id',			''),				array('user_id',				'topics_watch.user_id',				'phpbb_user_id'),				array('notify_status',			'topics_watch.notify_status',		''),			),			array(				'target'		=> SMILIES_TABLE,				'query_first'	=> array('target', $convert->truncate_statement . SMILIES_TABLE),				'autoincrement'	=> 'smiley_id',				array('smiley_id',				'smilies.smilies_id',				''),				array('code',					'smilies.code',						array('function1' => 'phpbb_smilie_html_decode', 'function2' => 'phpbb_set_encoding', 'function3' => 'utf8_htmlspecialchars')),				array('emotion',				'smilies.emoticon',					'phpbb_set_encoding'),				array('smiley_url',				'smilies.smile_url',				'import_smiley'),				array('smiley_width',			'smilies.smile_url',				'get_smiley_width'),				array('smiley_height',			'smilies.smile_url',				'get_smiley_height'),				array('smiley_order',			'smilies.smilies_id',				''),				array('display_on_posting',		'smilies.smilies_id',				'get_smiley_display'),				'order_by'		=> 'smilies.smilies_id ASC',			),			array(				'target'		=> POLL_OPTIONS_TABLE,				'primary'		=> 'vote_results.vote_option_id',				'query_first'	=> array('target', $convert->truncate_statement . POLL_OPTIONS_TABLE),				array('poll_option_id',			'vote_results.vote_option_id',		''),				array('topic_id',				'vote_desc.topic_id',				''),				array('',						'topics.topic_poster AS poster_id',	'phpbb_user_id'),				array('poll_option_text',		'vote_results.vote_option_text',	array('function1' => 'phpbb_set_encoding', 'function2' => 'htmlspecialchars_decode', 'function3' => 'utf8_htmlspecialchars')),				array('poll_option_total',		'vote_results.vote_result',			''),				'where'			=> 'vote_results.vote_id = vote_desc.vote_id',				'left_join'		=> 'vote_desc LEFT JOIN topics ON topics.topic_id = vote_desc.topic_id',			),			array(				'target'		=> POLL_VOTES_TABLE,				'primary'		=> 'vote_desc.topic_id',				'query_first'	=> array('target', $convert->truncate_statement . POLL_VOTES_TABLE),				array('poll_option_id',			VOTE_CONVERTED,						''),				array('topic_id',				'vote_desc.topic_id',				''),				array('vote_user_id',			'vote_voters.vote_user_id',			'phpbb_user_id'),				array('vote_user_ip',			'vote_voters.vote_user_ip',			'decode_ip'),				'where'			=> 'vote_voters.vote_id = vote_desc.vote_id',			),			array(				'target'		=> WORDS_TABLE,				'primary'		=> 'words.word_id',				'query_first'	=> array('target', $convert->truncate_statement . WORDS_TABLE),				'autoincrement'	=> 'word_id',				array('word_id',				'words.word_id',					''),				array('word',					'words.word',						'phpbb_set_encoding'),				array('replacement',			'words.replacement',				'phpbb_set_encoding'),			),			array(				'target'		=> POSTS_TABLE,				'primary'		=> 'posts.post_id',				'autoincrement'	=> 'post_id',				'query_first'	=> array('target', $convert->truncate_statement . POSTS_TABLE),				'execute_first'	=> '					$config["max_post_chars"] = 0;					$config["min_post_chars"] = 0;					$config["max_quote_depth"] = 0;				',				array('post_id',				'posts.post_id',					''),				array('topic_id',				'posts.topic_id',					''),				array('forum_id',				'posts.forum_id',					''),				array('poster_id',				'posts.poster_id',					'phpbb_user_id'),				array('icon_id',				0,									''),				array('poster_ip',				'posts.poster_ip',					'decode_ip'),				array('post_time',				'posts.post_time',					''),				array('enable_bbcode',			'posts.enable_bbcode',				''),				array('',						'posts.enable_html',				''),				array('enable_smilies',			'posts.enable_smilies',				''),				array('enable_sig',				'posts.enable_sig',					''),				array('enable_magic_url',		1,									''),				array('post_username',			'posts.post_username',				'phpbb_set_encoding'),				array('post_subject',			'posts_text.post_subject',			'phpbb_set_encoding'),				array('post_attachment',		((defined('MOD_ATTACHMENT')) ? 'posts.post_attachment' : 0), ''),				array('post_edit_time',			'posts.post_edit_time',				array('typecast' => 'int')),				array('post_edit_count',		'posts.post_edit_count',			''),				array('post_edit_reason',		'',									''),				array('post_edit_user',			'',									'phpbb_post_edit_user'),				array('bbcode_uid',				'posts.post_time',					'make_uid'),				array('post_text',				'posts_text.post_text',				'phpbb_prepare_message'),				array('',						'posts_text.bbcode_uid AS old_bbcode_uid',			''),				array('bbcode_bitfield',		'',									'get_bbcode_bitfield'),				array('post_checksum',			'',									''),				// Commented out inline search indexing, this takes up a LOT of time. :D				// @todo We either need to enable this or call the rebuild search functionality post convert/*				array('',						'',									'search_indexing'),				array('',						'posts_text.post_text AS message',	''),				array('',						'posts_text.post_subject AS title',	''),*/				'where'			=>	'posts.post_id = posts_text.post_id'			),			array(				'target'		=> PRIVMSGS_TABLE,				'primary'		=> 'privmsgs.privmsgs_id',				'autoincrement'	=> 'msg_id',				'query_first'	=> array(					array('target', $convert->truncate_statement . PRIVMSGS_TABLE),					array('target', $convert->truncate_statement . PRIVMSGS_RULES_TABLE),				),				'execute_first'	=> '					$config["max_post_chars"] = 0;					$config["min_post_chars"] = 0;					$config["max_quote_depth"] = 0;				',				array('msg_id',					'privmsgs.privmsgs_id',				''),				array('root_level',				0,									''),				array('author_id',				'privmsgs.privmsgs_from_userid AS poster_id',	'phpbb_user_id'),				array('icon_id',				0,									''),				array('author_ip',				'privmsgs.privmsgs_ip',				'decode_ip'),				array('message_time',			'privmsgs.privmsgs_date',			''),				array('enable_bbcode',			'privmsgs.privmsgs_enable_bbcode AS enable_bbcode',	''),				array('',						'privmsgs.privmsgs_enable_html AS enable_html',	''),				array('enable_smilies',			'privmsgs.privmsgs_enable_smilies AS enable_smilies',	''),				array('enable_magic_url',		1,									''),				array('enable_sig',				'privmsgs.privmsgs_attach_sig',		''),				array('message_subject',		'privmsgs.privmsgs_subject',		'phpbb_set_encoding'), // Already specialchared in 2.0.x				array('message_attachment',		((defined('MOD_ATTACHMENT')) ? 'privmsgs.privmsgs_attachment' : 0), ''),				array('message_edit_reason',	'',									''),				array('message_edit_user',		0,									''),				array('message_edit_time',		0,									''),				array('message_edit_count',		0,									''),				array('bbcode_uid',				'privmsgs.privmsgs_date AS post_time',	'make_uid'),				array('message_text',			'privmsgs_text.privmsgs_text',			'phpbb_prepare_message'),				array('',						'privmsgs_text.privmsgs_bbcode_uid AS old_bbcode_uid',			''),				array('bbcode_bitfield',		'',										'get_bbcode_bitfield'),				array('to_address',				'privmsgs.privmsgs_to_userid',			'phpbb_privmsgs_to_userid'),				array('bcc_address',			'',										''),				'where'			=>	'privmsgs.privmsgs_id = privmsgs_text.privmsgs_text_id'			),			array(				'target'		=> PRIVMSGS_FOLDER_TABLE,				'primary'		=> 'users.user_id',				'query_first'	=> array('target', $convert->truncate_statement . PRIVMSGS_FOLDER_TABLE),				array('user_id',				'users.user_id',						'phpbb_user_id'),				array('folder_name',			$user->lang['CONV_SAVED_MESSAGES'],		''),				array('pm_count',				0,										''),				'where'			=> 'users.user_id <> -1',			),			// Inbox			array(				'target'		=> PRIVMSGS_TO_TABLE,				'primary'		=> 'privmsgs.privmsgs_id',				'query_first'	=> array('target', $convert->truncate_statement . PRIVMSGS_TO_TABLE),				array('msg_id',					'privmsgs.privmsgs_id',					''),				array('user_id',				'privmsgs.privmsgs_to_userid',			'phpbb_user_id'),				array('author_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('pm_deleted',				0,										''),				array('pm_new',					'privmsgs.privmsgs_type',				'phpbb_new_pm'),				array('pm_unread',				'privmsgs.privmsgs_type',				'phpbb_unread_pm'),				array('pm_replied',				0,										''),				array('pm_marked',				0,										''),				array('pm_forwarded',			0,										''),				array('folder_id',				PRIVMSGS_INBOX,							''),				'where'			=> 'privmsgs.privmsgs_id = privmsgs_text.privmsgs_text_id										AND (privmsgs.privmsgs_type = 0 OR privmsgs.privmsgs_type = 1 OR privmsgs.privmsgs_type = 5)',			),			// Outbox			array(				'target'		=> PRIVMSGS_TO_TABLE,				'primary'		=> 'privmsgs.privmsgs_id',				array('msg_id',					'privmsgs.privmsgs_id',					''),				array('user_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('author_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('pm_deleted',				0,										''),				array('pm_new',					0,										''),				array('pm_unread',				0,										''),				array('pm_replied',				0,										''),				array('pm_marked',				0,										''),				array('pm_forwarded',			0,										''),				array('folder_id',				PRIVMSGS_OUTBOX,						''),				'where'			=> 'privmsgs.privmsgs_id = privmsgs_text.privmsgs_text_id										AND (privmsgs.privmsgs_type = 1 OR privmsgs.privmsgs_type = 5)',			),			// Sentbox			array(				'target'		=> PRIVMSGS_TO_TABLE,				'primary'		=> 'privmsgs.privmsgs_id',				array('msg_id',					'privmsgs.privmsgs_id',					''),				array('user_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('author_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('pm_deleted',				0,										''),				array('pm_new',					'privmsgs.privmsgs_type',				'phpbb_new_pm'),				array('pm_unread',				'privmsgs.privmsgs_type',				'phpbb_unread_pm'),				array('pm_replied',				0,										''),				array('pm_marked',				0,										''),				array('pm_forwarded',			0,										''),				array('folder_id',				PRIVMSGS_SENTBOX,						''),				'where'			=> 'privmsgs.privmsgs_id = privmsgs_text.privmsgs_text_id										AND privmsgs.privmsgs_type = 2',			),			// Savebox (SAVED IN)			array(				'target'		=> PRIVMSGS_TO_TABLE,				'primary'		=> 'privmsgs.privmsgs_id',				array('msg_id',					'privmsgs.privmsgs_id',					''),				array('user_id',				'privmsgs.privmsgs_to_userid',			'phpbb_user_id'),				array('author_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('pm_deleted',				0,										''),				array('pm_new',					'privmsgs.privmsgs_type',				'phpbb_new_pm'),				array('pm_unread',				'privmsgs.privmsgs_type',				'phpbb_unread_pm'),				array('pm_replied',				0,										''),				array('pm_marked',				0,										''),				array('pm_forwarded',			0,										''),				array('folder_id',				'privmsgs.privmsgs_to_userid',			'phpbb_get_savebox_id'),				'where'			=> 'privmsgs.privmsgs_id = privmsgs_text.privmsgs_text_id										AND privmsgs.privmsgs_type = 3',			),			// Savebox (SAVED OUT)			array(				'target'		=> PRIVMSGS_TO_TABLE,				'primary'		=> 'privmsgs.privmsgs_id',				array('msg_id',					'privmsgs.privmsgs_id',					''),				array('user_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('author_id',				'privmsgs.privmsgs_from_userid',		'phpbb_user_id'),				array('pm_deleted',				0,										''),				array('pm_new',					'privmsgs.privmsgs_type',				'phpbb_new_pm'),				array('pm_unread',				'privmsgs.privmsgs_type',				'phpbb_unread_pm'),				array('pm_replied',				0,										''),				array('pm_marked',				0,										''),				array('pm_forwarded',			0,										''),				array('folder_id',				'privmsgs.privmsgs_from_userid',		'phpbb_get_savebox_id'),				'where'			=> 'privmsgs.privmsgs_id = privmsgs_text.privmsgs_text_id										AND privmsgs.privmsgs_type = 4',			),			array(				'target'		=> GROUPS_TABLE,				'autoincrement'	=> 'group_id',				'query_first'	=> array('target', $convert->truncate_statement . GROUPS_TABLE),				array('group_id',				'groups.group_id',					''),				array('group_type',				'groups.group_type',				'phpbb_convert_group_type'),				array('group_display',			0,									''),				array('group_legend',			0,									''),				array('group_name',				'groups.group_name',				'phpbb_convert_group_name'), // phpbb_set_encoding called in phpbb_convert_group_name				array('group_desc',				'groups.group_description',			'phpbb_set_encoding'),				'where'			=> 'groups.group_single_user = 0',			),			array(				'target'		=> USER_GROUP_TABLE,				'query_first'	=> array('target', $convert->truncate_statement . USER_GROUP_TABLE),				'execute_first'	=> '					add_default_groups();				',				array('group_id',		'groups.group_id',					''),				array('user_id',		'groups.group_moderator',			'phpbb_user_id'),				array('group_leader',	1,									''),				array('user_pending',	0,									''),				'where'			=> 'groups.group_single_user = 0 AND groups.group_moderator <> 0',			),			array(				'target'		=> USER_GROUP_TABLE,				array('group_id',		'user_group.group_id',				''),				array('user_id',		'user_group.user_id',				'phpbb_user_id'),				array('group_leader',	0,									''),				array('user_pending',	'user_group.user_pending',			''),				'where'			=> 'user_group.group_id = groups.group_id AND groups.group_single_user = 0 AND groups.group_moderator <> user_group.user_id',			),			array(				'target'		=> USERS_TABLE,				'primary'		=> 'users.user_id',				'autoincrement'	=> 'user_id',				'query_first'	=> array(					array('target', 'DELETE FROM ' . USERS_TABLE . ' WHERE user_id <> ' . ANONYMOUS),					array('target', $convert->truncate_statement . BOTS_TABLE)				),				'execute_last'	=> '					remove_invalid_users();				',				array('user_id',				'users.user_id',					'phpbb_user_id'),				array('',						'users.user_id AS poster_id',		'phpbb_user_id'),				array('user_type',				'users.user_active',				'set_user_type'),				array('group_id',				'users.user_level',					'phpbb_set_primary_group'),				array('user_regdate',			'users.user_regdate',				''),				array('username',				'users.username',					'phpbb_set_default_encoding'), // recode to utf8 with default lang				array('username_clean',			'users.username',					array('function1' => 'phpbb_set_default_encoding', 'function2' => 'utf8_clean_string')),				array('user_password',			'users.user_password',				'phpbb_hash'),				array('user_pass_convert',		1,									''),				array('user_posts',				'users.user_posts',					'intval'),				array('user_email',				'users.user_email',					'strtolower'),				array('user_email_hash',		'users.user_email',					'gen_email_hash'),				array('user_birthday',			((defined('MOD_BIRTHDAY')) ? 'users.user_birthday' : ''),	'phpbb_get_birthday'),				array('user_lastvisit',			'users.user_lastvisit',				'intval'),				array('user_lastmark',			'users.user_lastvisit',				'intval'),				array('user_lang',				$config['default_lang'],			''),				array('',						'users.user_lang',					''),				array('user_timezone',			'users.user_timezone',				'floatval'),				array('user_dateformat',		'users.user_dateformat',			array('function1' => 'phpbb_set_encoding', 'function2' => 'fill_dateformat')),				array('user_inactive_reason',	'',									'phpbb_inactive_reason'),				array('user_inactive_time',		'',									'phpbb_inactive_time'),				array('user_interests',			'users.user_interests',				array('function1' => 'phpbb_set_encoding')),				array('user_occ',				'users.user_occ',					array('function1' => 'phpbb_set_encoding')),				array('user_website',			'users.user_website',				'validate_website'),				array('user_jabber',			'',									''),				array('user_msnm',				'users.user_msnm',					array('function1' => 'phpbb_set_encoding')),				array('user_yim',				'users.user_yim',					array('function1' => 'phpbb_set_encoding')),				array('user_aim',				'users.user_aim',					array('function1' => 'phpbb_set_encoding')),				array('user_icq',				'users.user_icq',					array('function1' => 'phpbb_set_encoding')),				array('user_from',				'users.user_from',					array('function1' => 'phpbb_set_encoding')),				array('user_rank',				'users.user_rank',					'intval'),				array('user_permissions',		'',									''),				array('user_avatar',			'users.user_avatar',				'phpbb_import_avatar'),				array('user_avatar_type',		'users.user_avatar_type',			'phpbb_avatar_type'),				array('user_avatar_width',		'users.user_avatar',				'phpbb_get_avatar_width'),				array('user_avatar_height',		'users.user_avatar',				'phpbb_get_avatar_height'),				array('user_new_privmsg',		'users.user_new_privmsg',			''),				array('user_unread_privmsg',	0,									''), //'users.user_unread_privmsg'				array('user_last_privmsg',		'users.user_last_privmsg',			'intval'),				array('user_emailtime',			'users.user_emailtime',				'null_to_zero'),				array('user_notify',			'users.user_notify',				'intval'),				array('user_notify_pm',			'users.user_notify_pm',				'intval'),				array('user_notify_type',		NOTIFY_EMAIL,						''),				array('user_allow_pm',			'users.user_allow_pm',				'intval'),				array('user_allow_viewonline',	'users.user_allow_viewonline',		'intval'),				array('user_allow_viewemail',	'users.user_viewemail',				'intval'),				array('user_actkey',			'users.user_actkey',				''),				array('user_newpasswd',			'',									''), // Users need to re-request their password...				array('user_style',				$config['default_style'],			''),				array('user_options',			'',									'set_user_options'),				array('',						'users.user_popup_pm AS popuppm',	''),				array('',						'users.user_allowhtml AS html',		''),				array('',						'users.user_allowbbcode AS bbcode',	''),				array('',						'users.user_allowsmile AS smile',	''),				array('',						'users.user_attachsig AS attachsig',''),				array('user_sig_bbcode_uid',		'users.user_regdate',							'make_uid'),				array('user_sig',					'users.user_sig',								'phpbb_prepare_message'),				array('',							'users.user_sig_bbcode_uid AS old_bbcode_uid',	''),				array('user_sig_bbcode_bitfield',	'',												'get_bbcode_bitfield'),				array('',							'users.user_regdate AS post_time',				''),				'where'			=> 'users.user_id <> -1',			),		),	);}?>
