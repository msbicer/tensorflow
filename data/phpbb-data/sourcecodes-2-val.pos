<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Execute message options*/function message_options($id, $mode, $global_privmsgs_rules, $global_rule_conditions){	global $phpbb_root_path, $phpEx, $user, $template, $auth, $config, $db;	$redirect_url = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&amp;mode=options");	add_form_key('ucp_pm_options');	// Change "full folder" setting - what to do if folder is full	if (isset($_POST['fullfolder']))	{		check_form_key('ucp_pm_options', $config['form_token_lifetime'], $redirect_url);		$full_action = request_var('full_action', 0);		$set_folder_id = 0;		switch ($full_action)		{			case 1:				$set_folder_id = FULL_FOLDER_DELETE;			break;			case 2:				$set_folder_id = request_var('full_move_to', PRIVMSGS_INBOX);			break;			case 3:				$set_folder_id = FULL_FOLDER_HOLD;			break;			default:				$full_action = 0;			break;		}		if ($full_action)		{			$sql = 'UPDATE ' . USERS_TABLE . '				SET user_full_folder = ' . $set_folder_id . '				WHERE user_id = ' . $user->data['user_id'];			$db->sql_query($sql);			$user->data['user_full_folder'] = $set_folder_id;			$message = $user->lang['FULL_FOLDER_OPTION_CHANGED'] . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $redirect_url . '">', '</a>');			meta_refresh(3, $redirect_url);			trigger_error($message);		}	}		// Add Folder	if (isset($_POST['addfolder']))	{		if (check_form_key('ucp_pm_options'))		{			$folder_name = utf8_normalize_nfc(request_var('foldername', '', true));			$msg = '';			if ($folder_name)			{				$sql = 'SELECT folder_name					FROM ' . PRIVMSGS_FOLDER_TABLE . "					WHERE folder_name = '" . $db->sql_escape($folder_name) . "'						AND user_id = " . $user->data['user_id'];				$result = $db->sql_query_limit($sql, 1);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if ($row)				{					trigger_error(sprintf($user->lang['FOLDER_NAME_EXIST'], $folder_name));				}				$sql = 'SELECT COUNT(folder_id) as num_folder					FROM ' . PRIVMSGS_FOLDER_TABLE . '						WHERE user_id = ' . $user->data['user_id'];				$result = $db->sql_query($sql);				$num_folder = (int) $db->sql_fetchfield('num_folder');				$db->sql_freeresult($result);				if ($num_folder >= $config['pm_max_boxes'])				{					trigger_error('MAX_FOLDER_REACHED');				}				$sql = 'INSERT INTO ' . PRIVMSGS_FOLDER_TABLE . ' ' . $db->sql_build_array('INSERT', array(					'user_id'		=> (int) $user->data['user_id'],					'folder_name'	=> $folder_name)				);				$db->sql_query($sql);				$msg = $user->lang['FOLDER_ADDED'];			}			else			{				$msg = $user->lang['FOLDER_NAME_EMPTY'];			}		}		else		{			$msg = $user->lang['FORM_INVALID'];		}		$message = $msg . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $redirect_url . '">', '</a>');		meta_refresh(3, $redirect_url);		trigger_error($message);	}	// Rename folder	if (isset($_POST['rename_folder']))	{		if (check_form_key('ucp_pm_options'))		{			$new_folder_name = utf8_normalize_nfc(request_var('new_folder_name', '', true));			$rename_folder_id= request_var('rename_folder_id', 0);			if (!$new_folder_name)			{				trigger_error('NO_NEW_FOLDER_NAME');			}			// Select custom folder			$sql = 'SELECT folder_name, pm_count				FROM ' . PRIVMSGS_FOLDER_TABLE . "				WHERE user_id = {$user->data['user_id']}					AND folder_id = $rename_folder_id";			$result = $db->sql_query_limit($sql, 1);			$folder_row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$folder_row)			{				trigger_error('CANNOT_RENAME_FOLDER');			}			$sql = 'UPDATE ' . PRIVMSGS_FOLDER_TABLE . "				SET folder_name = '" . $db->sql_escape($new_folder_name) . "'				WHERE folder_id = $rename_folder_id					AND user_id = {$user->data['user_id']}";			$db->sql_query($sql);			$msg = $user->lang['FOLDER_RENAMED'];		}		else		{			$msg = $user->lang['FORM_INVALID'];		}		$message = $msg . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $redirect_url . '">', '</a>');		meta_refresh(3, $redirect_url);		trigger_error($message);	}	// Remove Folder	if (isset($_POST['remove_folder']))	{		$remove_folder_id = request_var('remove_folder_id', 0);		// Default to "move all messages to inbox"		$remove_action = request_var('remove_action', 1);		$move_to = request_var('move_to', PRIVMSGS_INBOX);		// Move to same folder?		if ($remove_action == 1 && $remove_folder_id == $move_to)		{			trigger_error('CANNOT_MOVE_TO_SAME_FOLDER');		}		// Select custom folder		$sql = 'SELECT folder_name, pm_count			FROM ' . PRIVMSGS_FOLDER_TABLE . "			WHERE user_id = {$user->data['user_id']}				AND folder_id = $remove_folder_id";		$result = $db->sql_query_limit($sql, 1);		$folder_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$folder_row)		{			trigger_error('CANNOT_REMOVE_FOLDER');		}		$s_hidden_fields = array(			'remove_folder_id'	=> $remove_folder_id,			'remove_action'		=> $remove_action,			'move_to'			=> $move_to,			'remove_folder'		=> 1		);		// Do we need to confirm?		if (confirm_box(true))		{			// Gather message ids			$sql = 'SELECT msg_id				FROM ' . PRIVMSGS_TO_TABLE . '				WHERE user_id = ' . $user->data['user_id'] . "					AND folder_id = $remove_folder_id";			$result = $db->sql_query($sql);			$msg_ids = array();			while ($row = $db->sql_fetchrow($result))			{				$msg_ids[] = (int) $row['msg_id'];			}			$db->sql_freeresult($result);			// First of all, copy all messages to another folder... or delete all messages			switch ($remove_action)			{				// Move Messages				case 1:					$num_moved = move_pm($user->data['user_id'], $user->data['message_limit'], $msg_ids, $move_to, $remove_folder_id);										// Something went wrong, only partially moved?					if ($num_moved != $folder_row['pm_count'])					{						trigger_error(sprintf($user->lang['MOVE_PM_ERROR'], $num_moved, $folder_row['pm_count']));					}				break;				// Remove Messages				case 2:					delete_pm($user->data['user_id'], $msg_ids, $remove_folder_id);				break;			}			// Remove folder			$sql = 'DELETE FROM ' . PRIVMSGS_FOLDER_TABLE . "				WHERE user_id = {$user->data['user_id']}					AND folder_id = $remove_folder_id";			$db->sql_query($sql);			// Check full folder option. If the removed folder has been specified as destination switch back to inbox			if ($user->data['user_full_folder'] == $remove_folder_id)			{				$sql = 'UPDATE ' . USERS_TABLE . '					SET user_full_folder = ' . PRIVMSGS_INBOX . '					WHERE user_id = ' . $user->data['user_id'];				$db->sql_query($sql);				$user->data['user_full_folder'] = PRIVMSGS_INBOX;			}			// Now make sure the folder is not used for rules			// We assign another folder id (the one the messages got moved to) or assign the INBOX (to not have to remove any rule)			$sql = 'UPDATE ' . PRIVMSGS_RULES_TABLE . ' SET rule_folder_id = ';			$sql .= ($remove_action == 1) ? $move_to : PRIVMSGS_INBOX;			$sql .= ' WHERE rule_folder_id = ' . $remove_folder_id;			$db->sql_query($sql);			$meta_info = append_sid("{$phpbb_root_path}ucp.$phpEx", "i=pm&amp;mode=$mode");			$message = $user->lang['FOLDER_REMOVED'];			meta_refresh(3, $meta_info);			$message .= '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $meta_info . '">', '</a>');			trigger_error($message);		}		else		{			confirm_box(false, 'REMOVE_FOLDER', build_hidden_fields($s_hidden_fields));		}	}	// Add Rule	if (isset($_POST['add_rule']))	{		if (check_form_key('ucp_pm_options'))		{			$check_option	= request_var('check_option', 0);			$rule_option	= request_var('rule_option', 0);			$cond_option	= request_var('cond_option', '');			$action_option	= explode('|', request_var('action_option', ''));			$rule_string	= ($cond_option != 'none') ? utf8_normalize_nfc(request_var('rule_string', '', true)) : '';			$rule_user_id	= ($cond_option != 'none') ? request_var('rule_user_id', 0) : 0;			$rule_group_id	= ($cond_option != 'none') ? request_var('rule_group_id', 0) : 0;			$action = (int) $action_option[0];			$folder_id = (int) $action_option[1];			if (!$action || !$check_option || !$rule_option || !$cond_option || ($cond_option != 'none' && !$rule_string))			{				trigger_error('RULE_NOT_DEFINED');			}			if (($cond_option == 'user' && !$rule_user_id) || ($cond_option == 'group' && !$rule_group_id))			{				trigger_error('RULE_NOT_DEFINED');			}			$rule_ary = array(				'user_id'			=> $user->data['user_id'],				'rule_check'		=> $check_option,				'rule_connection'	=> $rule_option,				'rule_string'		=> $rule_string,				'rule_user_id'		=> $rule_user_id,				'rule_group_id'		=> $rule_group_id,				'rule_action'		=> $action,				'rule_folder_id'	=> $folder_id			);			$sql = 'SELECT rule_id				FROM ' . PRIVMSGS_RULES_TABLE . '				WHERE ' . $db->sql_build_array('SELECT', $rule_ary);			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if ($row)			{				trigger_error('RULE_ALREADY_DEFINED');			}			$sql = 'INSERT INTO ' . PRIVMSGS_RULES_TABLE . ' ' . $db->sql_build_array('INSERT', $rule_ary);			$db->sql_query($sql);			// Update users message rules			$sql = 'UPDATE ' . USERS_TABLE . '				SET user_message_rules = 1				WHERE user_id = ' . $user->data['user_id'];			$db->sql_query($sql);			$msg = $user->lang['RULE_ADDED'];		}		else		{			$msg = $user->lang['FORM_INVALID'];		}		$message = $msg . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $redirect_url . '">', '</a>');		meta_refresh(3, $redirect_url);		trigger_error($message);	}	// Remove Rule	if (isset($_POST['delete_rule']) && !isset($_POST['cancel']))	{		$delete_id = array_keys(request_var('delete_rule', array(0 => 0)));		$delete_id = (!empty($delete_id[0])) ? $delete_id[0] : 0;		if (!$delete_id)		{			redirect(append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=' . $mode));		}		// Do we need to confirm?		if (confirm_box(true))		{			$sql = 'DELETE FROM ' . PRIVMSGS_RULES_TABLE . '				WHERE user_id = ' . $user->data['user_id'] . "					AND rule_id = $delete_id";			$db->sql_query($sql);			$meta_info = append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=' . $mode);			$message = $user->lang['RULE_DELETED'];			// Reset user_message_rules if no more assigned			$sql = 'SELECT rule_id				FROM ' . PRIVMSGS_RULES_TABLE . '				WHERE user_id = ' . $user->data['user_id'];			$result = $db->sql_query_limit($sql, 1);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			// Update users message rules			if (!$row)			{				$sql = 'UPDATE ' . USERS_TABLE . '					SET user_message_rules = 0					WHERE user_id = ' . $user->data['user_id'];				$db->sql_query($sql);			}			meta_refresh(3, $meta_info);			$message .= '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $meta_info . '">', '</a>');			trigger_error($message);		}		else		{			confirm_box(false, 'DELETE_RULE', build_hidden_fields(array('delete_rule' => array($delete_id => 1))));		}	}	$folder = array();	$sql = 'SELECT COUNT(msg_id) as num_messages		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE user_id = ' . $user->data['user_id'] . '			AND folder_id = ' . PRIVMSGS_INBOX;	$result = $db->sql_query($sql);	$num_messages = (int) $db->sql_fetchfield('num_messages');	$db->sql_freeresult($result);		$folder[PRIVMSGS_INBOX] = array(		'folder_name'		=> $user->lang['PM_INBOX'],		'message_status'	=> sprintf($user->lang['FOLDER_MESSAGE_STATUS'], $num_messages, $user->data['message_limit'])	);	$sql = 'SELECT folder_id, folder_name, pm_count		FROM ' . PRIVMSGS_FOLDER_TABLE . '			WHERE user_id = ' . $user->data['user_id'];	$result = $db->sql_query($sql);	$num_user_folder = 0;	while ($row = $db->sql_fetchrow($result))	{		$num_user_folder++;		$folder[$row['folder_id']] = array(			'folder_name'		=> $row['folder_name'],			'message_status'	=> sprintf($user->lang['FOLDER_MESSAGE_STATUS'], $row['pm_count'], $user->data['message_limit'])		);	}	$db->sql_freeresult($result);	$s_full_folder_options = $s_to_folder_options = $s_folder_options = '';	if ($user->data['user_full_folder'] == FULL_FOLDER_NONE)	{		// -3 here to let the correct folder id be selected		$to_folder_id = $config['full_folder_action'] - 3;	}	else	{		$to_folder_id = $user->data['user_full_folder'];	}	foreach ($folder as $folder_id => $folder_ary)	{		$s_full_folder_options .= '<option value="' . $folder_id . '"' . (($user->data['user_full_folder'] == $folder_id) ? ' selected="selected"' : '') . '>' . $folder_ary['folder_name'] . ' (' . $folder_ary['message_status'] . ')</option>';		$s_to_folder_options .= '<option value="' . $folder_id . '"' . (($to_folder_id == $folder_id) ? ' selected="selected"' : '') . '>' . $folder_ary['folder_name'] . ' (' . $folder_ary['message_status'] . ')</option>';		if ($folder_id != PRIVMSGS_INBOX)		{			$s_folder_options .= '<option value="' . $folder_id . '">' . $folder_ary['folder_name'] . ' (' . $folder_ary['message_status'] . ')</option>';		}	}	$s_delete_checked = ($user->data['user_full_folder'] == FULL_FOLDER_DELETE) ? ' checked="checked"' : '';	$s_hold_checked = ($user->data['user_full_folder'] == FULL_FOLDER_HOLD) ? ' checked="checked"' : '';	$s_move_checked = ($user->data['user_full_folder'] >= 0) ? ' checked="checked"' : '';	if ($user->data['user_full_folder'] == FULL_FOLDER_NONE)	{		switch ($config['full_folder_action'])		{			case 1:				$s_delete_checked = ' checked="checked"';			break;			case 2:				$s_hold_checked = ' checked="checked"';			break;		}	}	$template->assign_vars(array(		'S_FULL_FOLDER_OPTIONS'	=> $s_full_folder_options,		'S_TO_FOLDER_OPTIONS'	=> $s_to_folder_options,		'S_FOLDER_OPTIONS'		=> $s_folder_options,		'S_DELETE_CHECKED'		=> $s_delete_checked,		'S_HOLD_CHECKED'		=> $s_hold_checked,		'S_MOVE_CHECKED'		=> $s_move_checked,		'S_MAX_FOLDER_REACHED'	=> ($num_user_folder >= $config['pm_max_boxes']) ? true : false,		'S_MAX_FOLDER_ZERO'		=> ($config['pm_max_boxes'] == 0) ? true : false,		'DEFAULT_ACTION'		=> ($config['full_folder_action'] == 1) ? $user->lang['DELETE_OLDEST_MESSAGES'] : $user->lang['HOLD_NEW_MESSAGES'],		'U_FIND_USERNAME'		=> append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=searchuser&amp;form=ucp&amp;field=rule_string&amp;select_single=true'),	));	$rule_lang = $action_lang = $check_lang = array();	// Build all three language arrays	preg_replace('#^((RULE|ACTION|CHECK)_([A-Z0-9_]+))$#e', "\${strtolower('\\2') . '_lang'}[constant('\\1')] = \$user->lang['PM_\\2']['\\3']", array_keys(get_defined_constants()));	/*		Rule Ordering:			-> CHECK_* -> RULE_* [IN $global_privmsgs_rules:CHECK_*] -> [IF $rule_conditions[RULE_*] [|text|bool|user|group|own_group]] -> ACTION_*	*/	$check_option	= request_var('check_option', 0);	$rule_option	= request_var('rule_option', 0);	$cond_option	= request_var('cond_option', '');	$action_option	= request_var('action_option', '');	$back = (isset($_REQUEST['back'])) ? request_var('back', array('' => 0)) : array();	if (sizeof($back))	{		if ($action_option)		{			$action_option = '';		}		else if ($cond_option)		{			$cond_option = '';		}		else if ($rule_option)		{			$rule_option = 0;		}		else if ($check_option)		{			$check_option = 0;		}	}	if (isset($back['action']) && $cond_option == 'none')	{		$back['cond'] = true;	}	// Check	if (!isset($global_privmsgs_rules[$check_option]))	{		$check_option = 0;	}	define_check_option(($check_option && !isset($back['rule'])) ? true : false, $check_option, $check_lang);	if ($check_option && !isset($back['rule']))	{		define_rule_option(($rule_option && !isset($back['cond'])) ? true : false, $rule_option, $rule_lang, $global_privmsgs_rules[$check_option]);	}	if ($rule_option && !isset($back['cond']))	{		if (!isset($global_rule_conditions[$rule_option]))		{			$cond_option = 'none';			$template->assign_var('NONE_CONDITION', true);		}		else		{			define_cond_option(($cond_option && !isset($back['action'])) ? true : false, $cond_option, $rule_option, $global_rule_conditions);		}	}	if ($cond_option && !isset($back['action']))	{		define_action_option(false, $action_option, $action_lang, $folder);	}	show_defined_rules($user->data['user_id'], $check_lang, $rule_lang, $action_lang, $folder);}/*** Defining check option for message rules*/function define_check_option($hardcoded, $check_option, $check_lang){	global $template;	$s_check_options = '';	if (!$hardcoded)	{		foreach ($check_lang as $value => $lang)		{			$s_check_options .= '<option value="' . $value . '"' . (($value == $check_option) ? ' selected="selected"' : '') . '>' . $lang . '</option>';		}	}	$template->assign_vars(array(		'S_CHECK_DEFINED'	=> true,		'S_CHECK_SELECT'	=> ($hardcoded) ? false : true,		'CHECK_CURRENT'		=> isset($check_lang[$check_option]) ? $check_lang[$check_option] : '',		'S_CHECK_OPTIONS'	=> $s_check_options,		'CHECK_OPTION'		=> $check_option)	);}/*** Defining action option for message rules*/function define_action_option($hardcoded, $action_option, $action_lang, $folder){	global $db, $template, $user;	$l_action = $s_action_options = '';	if ($hardcoded)	{		$option = explode('|', $action_option);		$action = (int) $option[0];		$folder_id = (int) $option[1];		$l_action = $action_lang[$action];		if ($action == ACTION_PLACE_INTO_FOLDER)		{			$l_action .= ' -> ' . $folder[$folder_id]['folder_name'];		}	}	else	{		foreach ($action_lang as $action => $lang)		{			if ($action == ACTION_PLACE_INTO_FOLDER)			{				foreach ($folder as $folder_id => $folder_ary)				{					$s_action_options .= '<option value="' . $action . '|' . $folder_id . '"' . (($action_option == $action . '|' . $folder_id) ? ' selected="selected"' : '') . '>' . $lang . ' -> ' . $folder_ary['folder_name'] . '</option>';				}			}			else			{				$s_action_options .= '<option value="' . $action . '|0"' . (($action_option == $action . '|0') ? ' selected="selected"' : '') . '>' . $lang . '</option>';			}		}	}	$template->assign_vars(array(		'S_ACTION_DEFINED'	=> true,		'S_ACTION_SELECT'	=> ($hardcoded) ? false : true,		'ACTION_CURRENT'	=> $l_action,		'S_ACTION_OPTIONS'	=> $s_action_options,		'ACTION_OPTION'		=> $action_option)	);}/*** Defining rule option for message rules*/function define_rule_option($hardcoded, $rule_option, $rule_lang, $check_ary){	global $template;	global $module;	$exclude = array();	if (!$module->loaded('zebra', 'friends'))	{		$exclude[RULE_IS_FRIEND] = true;	}	if (!$module->loaded('zebra', 'foes'))	{		$exclude[RULE_IS_FOE] = true;	}	$s_rule_options = '';	if (!$hardcoded)	{		foreach ($check_ary as $value => $_check)		{			if (isset($exclude[$value]))			{				continue;			}			$s_rule_options .= '<option value="' . $value . '"' . (($value == $rule_option) ? ' selected="selected"' : '') . '>' . $rule_lang[$value] . '</option>';		}	}	$template->assign_vars(array(		'S_RULE_DEFINED'	=> true,		'S_RULE_SELECT'		=> !$hardcoded,		'RULE_CURRENT'		=> isset($rule_lang[$rule_option]) ? $rule_lang[$rule_option] : '',		'S_RULE_OPTIONS'	=> $s_rule_options,		'RULE_OPTION'		=> $rule_option)	);}/*** Defining condition option for message rules*/function define_cond_option($hardcoded, $cond_option, $rule_option, $global_rule_conditions){	global $db, $template, $auth, $user;		$template->assign_vars(array(		'S_COND_DEFINED'	=> true,		'S_COND_SELECT'		=> (!$hardcoded && isset($global_rule_conditions[$rule_option])) ? true : false)	);	// Define COND_OPTION	if (!isset($global_rule_conditions[$rule_option]))	{		$template->assign_vars(array(			'COND_OPTION'	=> 'none',			'COND_CURRENT'	=> false)		);		return;	}	// Define Condition	$condition = $global_rule_conditions[$rule_option];	$current_value = '';	switch ($condition)	{		case 'text':			$rule_string = utf8_normalize_nfc(request_var('rule_string', '', true));						$template->assign_vars(array(				'S_TEXT_CONDITION'	=> true,				'CURRENT_STRING'	=> $rule_string,				'CURRENT_USER_ID'	=> 0,				'CURRENT_GROUP_ID'	=> 0)			);			$current_value = $rule_string;		break;		case 'user':			$rule_user_id = request_var('rule_user_id', 0);			$rule_string = utf8_normalize_nfc(request_var('rule_string', '', true));						if ($rule_string && !$rule_user_id)			{				$sql = 'SELECT user_id					FROM ' . USERS_TABLE . "					WHERE username_clean = '" . $db->sql_escape(utf8_clean_string($rule_string)) . "'";				$result = $db->sql_query($sql);				$rule_user_id = (int) $db->sql_fetchfield('user_id');				$db->sql_freeresult($result);				if (!$rule_user_id)				{					$rule_string = '';				}			}			else if (!$rule_string && $rule_user_id)			{				$sql = 'SELECT username					FROM ' . USERS_TABLE . "					WHERE user_id = $rule_user_id";				$result = $db->sql_query($sql);				$rule_string = $db->sql_fetchfield('username');				$db->sql_freeresult($result);				if (!$rule_string)				{					$rule_user_id = 0;				}			}			$template->assign_vars(array(				'S_USER_CONDITION'	=> true,				'CURRENT_STRING'	=> $rule_string,				'CURRENT_USER_ID'	=> $rule_user_id,				'CURRENT_GROUP_ID'	=> 0)			);			$current_value = $rule_string;		break;		case 'group':			$rule_group_id = request_var('rule_group_id', 0);			$rule_string = utf8_normalize_nfc(request_var('rule_string', '', true));			$sql = 'SELECT g.group_id, g.group_name, g.group_type					FROM ' . GROUPS_TABLE . ' g ';			if (!$auth->acl_gets('a_group', 'a_groupadd', 'a_groupdel'))			{				$sql .= 'LEFT JOIN ' . USER_GROUP_TABLE . ' ug					ON (						g.group_id = ug.group_id						AND ug.user_id = ' . $user->data['user_id'] . '						AND ug.user_pending = 0					)					WHERE (ug.user_id = ' . $user->data['user_id'] . ' OR g.group_type <> ' . GROUP_HIDDEN . ')					AND';			}			else			{				$sql .= 'WHERE';			}						$sql .= " (g.group_name NOT IN ('GUESTS', 'BOTS') OR g.group_type <> " . GROUP_SPECIAL . ')					ORDER BY g.group_type DESC, g.group_name ASC';						$result = $db->sql_query($sql);			$s_group_options = '';			while ($row = $db->sql_fetchrow($result))			{				if ($rule_group_id && ($row['group_id'] == $rule_group_id))				{					$rule_string = (($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name']);				}				$s_class	= ($row['group_type'] == GROUP_SPECIAL) ? ' class="sep"' : '';				$s_selected	= ($row['group_id'] == $rule_group_id) ? ' selected="selected"' : '';								$s_group_options .= '<option value="' . $row['group_id'] . '"' . $s_class . $s_selected . '>' . (($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name']) . '</option>';			}			$db->sql_freeresult($result);			$template->assign_vars(array(				'S_GROUP_CONDITION'	=> true,				'S_GROUP_OPTIONS'	=> $s_group_options,				'CURRENT_STRING'	=> $rule_string,				'CURRENT_USER_ID'	=> 0,				'CURRENT_GROUP_ID'	=> $rule_group_id)			);			$current_value = $rule_string;		break;		default:			return;	}	$template->assign_vars(array(		'COND_OPTION'	=> $condition,		'COND_CURRENT'	=> $current_value)	);}/*** Display defined message rules*/function show_defined_rules($user_id, $check_lang, $rule_lang, $action_lang, $folder){	global $db, $template;	$sql = 'SELECT *		FROM ' . PRIVMSGS_RULES_TABLE . '		WHERE user_id = ' . $user_id . '		ORDER BY rule_id ASC';	$result = $db->sql_query($sql);		$count = 0;	while ($row = $db->sql_fetchrow($result))	{		$template->assign_block_vars('rule', array(			'COUNT'		=> ++$count,			'RULE_ID'	=> $row['rule_id'],			'CHECK'		=> $check_lang[$row['rule_check']],			'RULE'		=> $rule_lang[$row['rule_connection']],			'STRING'	=> $row['rule_string'],			'ACTION'	=> $action_lang[$row['rule_action']],			'FOLDER'	=> ($row['rule_action'] == ACTION_PLACE_INTO_FOLDER) ? $folder[$row['rule_folder_id']]['folder_name'] : '')		);	}	$db->sql_freeresult($result);}?>
<?php/**** @package ucp* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** ucp_prefs* Changing user preferences* @package ucp*/class ucp_prefs{	var $u_action;	function main($id, $mode)	{		global $config, $db, $user, $auth, $template, $phpbb_root_path, $phpEx;		$submit = (isset($_POST['submit'])) ? true : false;		$error = $data = array();		$s_hidden_fields = '';		switch ($mode)		{			case 'personal':				add_form_key('ucp_prefs_personal');				$data = array(					'notifymethod'	=> request_var('notifymethod', $user->data['user_notify_type']),					'dateformat'	=> request_var('dateformat', $user->data['user_dateformat'], true),					'lang'			=> basename(request_var('lang', $user->data['user_lang'])),					'style'			=> request_var('style', (int) $user->data['user_style']),					'tz'			=> request_var('tz', (float) $user->data['user_timezone']),					'dst'			=> request_var('dst', (bool) $user->data['user_dst']),					'viewemail'		=> request_var('viewemail', (bool) $user->data['user_allow_viewemail']),					'massemail'		=> request_var('massemail', (bool) $user->data['user_allow_massemail']),					'hideonline'	=> request_var('hideonline', (bool) !$user->data['user_allow_viewonline']),					'notifypm'		=> request_var('notifypm', (bool) $user->data['user_notify_pm']),					'popuppm'		=> request_var('popuppm', (bool) $user->optionget('popuppm')),					'allowpm'		=> request_var('allowpm', (bool) $user->data['user_allow_pm']),				);				if ($data['notifymethod'] == NOTIFY_IM && (!$config['jab_enable'] || !$user->data['user_jabber'] || !@extension_loaded('xml')))				{					// Jabber isnt enabled, or no jabber field filled in. Update the users table to be sure its correct.					$data['notifymethod'] = NOTIFY_BOTH;				}				if ($submit)				{					$data['style'] = ($config['override_user_style']) ? $config['default_style'] : $data['style'];					$error = validate_data($data, array(						'dateformat'	=> array('string', false, 1, 30),						'lang'			=> array('language_iso_name'),						'tz'			=> array('num', false, -14, 14),					));					if (!check_form_key('ucp_prefs_personal'))					{						$error[] = 'FORM_INVALID';					}					if (!sizeof($error))					{						$user->optionset('popuppm', $data['popuppm']);						$sql_ary = array(							'user_allow_pm'			=> $data['allowpm'],							'user_allow_viewemail'	=> $data['viewemail'],							'user_allow_massemail'	=> $data['massemail'],							'user_allow_viewonline'	=> ($auth->acl_get('u_hideonline')) ? !$data['hideonline'] : $user->data['user_allow_viewonline'],							'user_notify_type'		=> $data['notifymethod'],							'user_notify_pm'		=> $data['notifypm'],							'user_options'			=> $user->data['user_options'],							'user_dst'				=> $data['dst'],							'user_dateformat'		=> $data['dateformat'],							'user_lang'				=> $data['lang'],							'user_timezone'			=> $data['tz'],							'user_style'			=> $data['style'],						);						$sql = 'UPDATE ' . USERS_TABLE . '							SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '							WHERE user_id = ' . $user->data['user_id'];						$db->sql_query($sql);						meta_refresh(3, $this->u_action);						$message = $user->lang['PREFERENCES_UPDATED'] . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $this->u_action . '">', '</a>');						trigger_error($message);					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				$dateformat_options = '';				foreach ($user->lang['dateformats'] as $format => $null)				{					$dateformat_options .= '<option value="' . $format . '"' . (($format == $data['dateformat']) ? ' selected="selected"' : '') . '>';					$dateformat_options .= $user->format_date(time(), $format, false) . ((strpos($format, '|') !== false) ? $user->lang['VARIANT_DATE_SEPARATOR'] . $user->format_date(time(), $format, true) : '');					$dateformat_options .= '</option>';				}				$s_custom = false;				$dateformat_options .= '<option value="custom"';				if (!isset($user->lang['dateformats'][$data['dateformat']]))				{					$dateformat_options .= ' selected="selected"';					$s_custom = true;				}				$dateformat_options .= '>' . $user->lang['CUSTOM_DATEFORMAT'] . '</option>';				$template->assign_vars(array(					'ERROR'				=> (sizeof($error)) ? implode('<br />', $error) : '',					'S_NOTIFY_EMAIL'	=> ($data['notifymethod'] == NOTIFY_EMAIL) ? true : false,					'S_NOTIFY_IM'		=> ($data['notifymethod'] == NOTIFY_IM) ? true : false,					'S_NOTIFY_BOTH'		=> ($data['notifymethod'] == NOTIFY_BOTH) ? true : false,					'S_VIEW_EMAIL'		=> $data['viewemail'],					'S_MASS_EMAIL'		=> $data['massemail'],					'S_ALLOW_PM'		=> $data['allowpm'],					'S_HIDE_ONLINE'		=> $data['hideonline'],					'S_NOTIFY_PM'		=> $data['notifypm'],					'S_POPUP_PM'		=> $data['popuppm'],					'S_DST'				=> $data['dst'],					'DATE_FORMAT'			=> $data['dateformat'],					'A_DATE_FORMAT'			=> addslashes($data['dateformat']),					'S_DATEFORMAT_OPTIONS'	=> $dateformat_options,					'S_CUSTOM_DATEFORMAT'	=> $s_custom,					'DEFAULT_DATEFORMAT'	=> $config['default_dateformat'],					'A_DEFAULT_DATEFORMAT'	=> addslashes($config['default_dateformat']),					'S_LANG_OPTIONS'		=> language_select($data['lang']),					'S_STYLE_OPTIONS'		=> ($config['override_user_style']) ? '' : style_select($data['style']),					'S_TZ_OPTIONS'			=> tz_select($data['tz'], true),					'S_CAN_HIDE_ONLINE'		=> ($auth->acl_get('u_hideonline')) ? true : false,					'S_SELECT_NOTIFY'		=> ($config['jab_enable'] && $user->data['user_jabber'] && @extension_loaded('xml')) ? true : false)				);			break;			case 'view':				add_form_key('ucp_prefs_view');				$data = array(					'topic_sk'		=> request_var('topic_sk', (!empty($user->data['user_topic_sortby_type'])) ? $user->data['user_topic_sortby_type'] : 't'),					'topic_sd'		=> request_var('topic_sd', (!empty($user->data['user_topic_sortby_dir'])) ? $user->data['user_topic_sortby_dir'] : 'd'),					'topic_st'		=> request_var('topic_st', (!empty($user->data['user_topic_show_days'])) ? $user->data['user_topic_show_days'] : 0),					'post_sk'		=> request_var('post_sk', (!empty($user->data['user_post_sortby_type'])) ? $user->data['user_post_sortby_type'] : 't'),					'post_sd'		=> request_var('post_sd', (!empty($user->data['user_post_sortby_dir'])) ? $user->data['user_post_sortby_dir'] : 'a'),					'post_st'		=> request_var('post_st', (!empty($user->data['user_post_show_days'])) ? $user->data['user_post_show_days'] : 0),					'images'		=> request_var('images', (bool) $user->optionget('viewimg')),					'flash'			=> request_var('flash', (bool) $user->optionget('viewflash')),					'smilies'		=> request_var('smilies', (bool) $user->optionget('viewsmilies')),					'sigs'			=> request_var('sigs', (bool) $user->optionget('viewsigs')),					'avatars'		=> request_var('avatars', (bool) $user->optionget('viewavatars')),					'wordcensor'	=> request_var('wordcensor', (bool) $user->optionget('viewcensors')),				);				if ($submit)				{					$error = validate_data($data, array(						'topic_sk'	=> array('string', false, 1, 1),						'topic_sd'	=> array('string', false, 1, 1),						'post_sk'	=> array('string', false, 1, 1),						'post_sd'	=> array('string', false, 1, 1),					));					if (!check_form_key('ucp_prefs_view'))					{						$error[] = 'FORM_INVALID';					}					if (!sizeof($error))					{						$user->optionset('viewimg', $data['images']);						$user->optionset('viewflash', $data['flash']);						$user->optionset('viewsmilies', $data['smilies']);						$user->optionset('viewsigs', $data['sigs']);						$user->optionset('viewavatars', $data['avatars']);						if ($auth->acl_get('u_chgcensors'))						{							$user->optionset('viewcensors', $data['wordcensor']);						}						$sql_ary = array(							'user_options'				=> $user->data['user_options'],							'user_topic_sortby_type'	=> $data['topic_sk'],							'user_post_sortby_type'		=> $data['post_sk'],							'user_topic_sortby_dir'		=> $data['topic_sd'],							'user_post_sortby_dir'		=> $data['post_sd'],							'user_topic_show_days'	=> $data['topic_st'],							'user_post_show_days'	=> $data['post_st'],						);						$sql = 'UPDATE ' . USERS_TABLE . '							SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '							WHERE user_id = ' . $user->data['user_id'];						$db->sql_query($sql);						meta_refresh(3, $this->u_action);						$message = $user->lang['PREFERENCES_UPDATED'] . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $this->u_action . '">', '</a>');						trigger_error($message);					}					// Replace "error" strings with their real, localised form					$error = preg_replace('#^([A-Z_]+)$#e', "(!empty(\$user->lang['\\1'])) ? \$user->lang['\\1'] : '\\1'", $error);				}				$sort_dir_text = array('a' => $user->lang['ASCENDING'], 'd' => $user->lang['DESCENDING']);				// Topic ordering options				$limit_topic_days = array(0 => $user->lang['ALL_TOPICS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);				$sort_by_topic_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 'r' => $user->lang['REPLIES'], 's' => $user->lang['SUBJECT'], 'v' => $user->lang['VIEWS']);				$sort_by_topic_sql = array('a' => 't.topic_first_poster_name', 't' => 't.topic_last_post_time', 'r' => 't.topic_replies', 's' => 't.topic_title', 'v' => 't.topic_views');				// Post ordering options				$limit_post_days = array(0 => $user->lang['ALL_POSTS'], 1 => $user->lang['1_DAY'], 7 => $user->lang['7_DAYS'], 14 => $user->lang['2_WEEKS'], 30 => $user->lang['1_MONTH'], 90 => $user->lang['3_MONTHS'], 180 => $user->lang['6_MONTHS'], 365 => $user->lang['1_YEAR']);				$sort_by_post_text = array('a' => $user->lang['AUTHOR'], 't' => $user->lang['POST_TIME'], 's' => $user->lang['SUBJECT']);				$sort_by_post_sql = array('a' => 'u.username_clean', 't' => 'p.post_id', 's' => 'p.post_subject');				$_options = array('topic', 'post');				foreach ($_options as $sort_option)				{					${'s_limit_' . $sort_option . '_days'} = '<select name="' . $sort_option . '_st">';					foreach (${'limit_' . $sort_option . '_days'} as $day => $text)					{						$selected = ($data[$sort_option . '_st'] == $day) ? ' selected="selected"' : '';						${'s_limit_' . $sort_option . '_days'} .= '<option value="' . $day . '"' . $selected . '>' . $text . '</option>';					}					${'s_limit_' . $sort_option . '_days'} .= '</select>';					${'s_sort_' . $sort_option . '_key'} = '<select name="' . $sort_option . '_sk">';					foreach (${'sort_by_' . $sort_option . '_text'} as $key => $text)					{						$selected = ($data[$sort_option . '_sk'] == $key) ? ' selected="selected"' : '';						${'s_sort_' . $sort_option . '_key'} .= '<option value="' . $key . '"' . $selected . '>' . $text . '</option>';					}					${'s_sort_' . $sort_option . '_key'} .= '</select>';					${'s_sort_' . $sort_option . '_dir'} = '<select name="' . $sort_option . '_sd">';					foreach ($sort_dir_text as $key => $value)					{						$selected = ($data[$sort_option . '_sd'] == $key) ? ' selected="selected"' : '';						${'s_sort_' . $sort_option . '_dir'} .= '<option value="' . $key . '"' . $selected . '>' . $value . '</option>';					}					${'s_sort_' . $sort_option . '_dir'} .= '</select>';				}				$template->assign_vars(array(					'ERROR'				=> (sizeof($error)) ? implode('<br />', $error) : '',					'S_IMAGES'			=> $data['images'],					'S_FLASH'			=> $data['flash'],					'S_SMILIES'			=> $data['smilies'],					'S_SIGS'			=> $data['sigs'],					'S_AVATARS'			=> $data['avatars'],					'S_DISABLE_CENSORS'	=> $data['wordcensor'],					'S_CHANGE_CENSORS'		=> ($auth->acl_get('u_chgcensors') && $config['allow_nocensors']) ? true : false,					'S_TOPIC_SORT_DAYS'		=> $s_limit_topic_days,					'S_TOPIC_SORT_KEY'		=> $s_sort_topic_key,					'S_TOPIC_SORT_DIR'		=> $s_sort_topic_dir,					'S_POST_SORT_DAYS'		=> $s_limit_post_days,					'S_POST_SORT_KEY'		=> $s_sort_post_key,					'S_POST_SORT_DIR'		=> $s_sort_post_dir)				);			break;			case 'post':				$data = array(					'bbcode'	=> request_var('bbcode', $user->optionget('bbcode')),					'smilies'	=> request_var('smilies', $user->optionget('smilies')),					'sig'		=> request_var('sig', $user->optionget('attachsig')),					'notify'	=> request_var('notify', (bool) $user->data['user_notify']),				);				add_form_key('ucp_prefs_post');				if ($submit)				{					if (check_form_key('ucp_prefs_post'))					{						$user->optionset('bbcode', $data['bbcode']);						$user->optionset('smilies', $data['smilies']);						$user->optionset('attachsig', $data['sig']);						$sql_ary = array(							'user_options'	=> $user->data['user_options'],							'user_notify'	=> $data['notify'],						);						$sql = 'UPDATE ' . USERS_TABLE . '							SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '							WHERE user_id = ' . $user->data['user_id'];						$db->sql_query($sql);						$msg = $user->lang['PREFERENCES_UPDATED'];					}					else					{						$msg = $user->lang['FORM_INVALID'];					}					meta_refresh(3, $this->u_action);					$message = $msg . '<br /><br />' . sprintf($user->lang['RETURN_UCP'], '<a href="' . $this->u_action . '">', '</a>');					trigger_error($message);				}				$template->assign_vars(array(					'S_BBCODE'	=> $data['bbcode'],					'S_SMILIES'	=> $data['smilies'],					'S_SIG'		=> $data['sig'],					'S_NOTIFY'	=> $data['notify'])				);			break;		}		$template->assign_vars(array(			'L_TITLE'			=> $user->lang['UCP_PREFS_' . strtoupper($mode)],			'S_HIDDEN_FIELDS'	=> $s_hidden_fields,			'S_UCP_ACTION'		=> $this->u_action)		);		$this->tpl_name = 'ucp_prefs_' . $mode;		$this->page_title = 'UCP_PREFS_' . strtoupper($mode);	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**/if (php_sapi_name() != 'cli'){	die("This program must be run from the command line.\n");}//// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");set_time_limit(0);define('IN_PHPBB', true);$phpbb_root_path = '../';$phpEx = substr(strrchr(__FILE__, '.'), 1);echo "Checking for required files\n";download('http://unicode.org/reports/tr39/data/confusables.txt');download('http://unicode.org/Public/UNIDATA/CaseFolding.txt');echo "\n";/*** Load the confusables table*/echo "Loading confusables\n";$unidata = file_get_contents('confusables.txt');/*** Load the CaseFolding table*/echo "Loading CaseFolding\n";$casefolds = file_get_contents('CaseFolding.txt');function utf8_chr($cp){    if ($cp > 0xFFFF)    {        return chr(0xF0 | ($cp >> 18)) . chr(0x80 | (($cp >> 12) & 0x3F)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));    }    else if ($cp > 0x7FF)    {        return chr(0xE0 | ($cp >> 12)) . chr(0x80 | (($cp >> 6) & 0x3F)) . chr(0x80 | ($cp & 0x3F));    }    else if ($cp > 0x7F)    {        return chr(0xC0 | ($cp >> 6)) . chr(0x80 | ($cp & 0x3F));    }    else    {        return chr($cp);    }}preg_match_all('/^([0-9A-F]+) ;\s((?:[0-9A-F]+ )*);.*?$/im', $unidata, $array, PREG_SET_ORDER);preg_match_all('/^([0-9A-F]+); ([CFS]); ([0-9A-F]+(?: [0-9A-F]+)*);/im', $casefolds, $casefold_array);// some that we defined ourselves$uniarray = array(		"\xC2\xA1"			=>	"\x69",	// EXCLAMATION MARK, INVERTED => LATIN SMALL LETTER I		"\xC7\x83"			=>	"\x21",	// LATIN LETTER RETROFLEX CLICK => EXCLAMATION MARK		"\xCE\xB1"			=>	"\x61",	// GREEK SMALL LETTER ALPHA => LATIN SMALL LETTER A		"\xE1\x9A\x80"		=>	"\x20",	// OGHAM SPACE MARK		"\xC2\xAD"			=>	'',		// HYPHEN, SOFT => empty string		"\xDB\x9D"			=>	'',		// ARABIC END OF AYAH		"\xDC\x8F"			=>	'',		// SYRIAC ABBREVIATION MARK		"\xE1\xA0\x86"		=>	'',		// MONGOLIAN TODO SOFT HYPHEN		"\xE1\xA0\x8E"		=>	'',		// MONGOLIAN VOWEL SEPARATOR		"\xE2\x80\x8B"		=>	'',		// ZERO WIDTH SPACE		"\xE2\x80\x8C"		=>	'',		// ZERO WIDTH NON-JOINER		"\xE2\x80\x8D"		=>	'',		// ZERO WIDTH JOINER		"\xE2\x80\xA8"		=>	'',		// LINE SEPARATOR		"\xE2\x80\xA9"		=>	'',		// PARAGRAPH SEPARATOR		"\xE2\x81\xA0"		=>	'',		// WORD JOINER		"\xE2\x81\xA1"		=>	'',		// FUNCTION APPLICATION		"\xE2\x81\xA2"		=>	'',		// INVISIBLE TIMES		"\xE2\x81\xA3"		=>	'',		// INVISIBLE SEPARATOR		"\xE2\x81\xAA"		=>	'',		// [CONTROL CHARACTERS]		"\xE2\x81\xAB"		=>	'',		// [CONTROL CHARACTERS]		"\xE2\x81\xAC"		=>	'',		// [CONTROL CHARACTERS]		"\xE2\x81\xAD"		=>	'',		// [CONTROL CHARACTERS]		"\xE2\x81\xAE"		=>	'',		// [CONTROL CHARACTERS]		"\xE2\x81\xAF"		=>	'',		// [CONTROL CHARACTERS]		"\xEF\xBB\xBF"		=>	'',		// ZERO WIDTH NO-BREAK SPACE		"\xEF\xBF\xB9"		=>	'',		// [CONTROL CHARACTERS]		"\xEF\xBF\xBA"		=>	'',		// [CONTROL CHARACTERS]		"\xEF\xBF\xBB"		=>	'',		// [CONTROL CHARACTERS]		"\xEF\xBF\xBC"		=>	'',		// [CONTROL CHARACTERS]		"\xF0\x9D\x85\xB3"	=>	'',		// [MUSICAL CONTROL CHARACTERS]		"\xF0\x9D\x85\xB4"	=>	'',		// [MUSICAL CONTROL CHARACTERS]		"\xF0\x9D\x85\xB5"	=>	'',		// [MUSICAL CONTROL CHARACTERS]		"\xF0\x9D\x85\xB6"	=>	'',		// [MUSICAL CONTROL CHARACTERS]		"\xF0\x9D\x85\xB7"	=>	'',		// [MUSICAL CONTROL CHARACTERS]		"\xF0\x9D\x85\xB8"	=>	'',		// [MUSICAL CONTROL CHARACTERS]		"\xF0\x9D\x85\xB9"	=>	'',		// [MUSICAL CONTROL CHARACTERS]		"\xF0\x9D\x85\xBA"	=>	'',		// [MUSICAL CONTROL CHARACTERS]);$copy = $uniarray;/*** @todo we need to check that the $uniarray does not reverse any of the mappings defined in the unicode definition*/foreach ($array as $value){	$temp_hold = implode(array_map('utf8_chr', array_map('hexdec', explode(' ', trim($value[2])))));	if (isset($copy[utf8_chr(hexdec((string)$value[1]))]))	{		$num = '';		$string = utf8_chr(hexdec((string)$value[1]));		for ($i = 0; $i < strlen($string); $i++)		{			$num .= '\x' . str_pad(base_convert(ord($string[$i]), 10, 16), 2, '0', STR_PAD_LEFT);		}		echo $num . "\n";		if ($uniarray[$string] != $temp_hold)		{			echo "  --> $string\n";			echo "  --> " . $temp_hold . "\n";		}	}	// do some tests for things that transform into something with the number one	if (strpos($temp_hold, utf8_chr(0x0031)) !== false)	{		// any kind of letter L?		if (strpos($value[0], 'LETTER L') !== false || strpos($value[0], 'IOTA') !== false || strpos($value[0], 'SMALL L ') !== false || preg_match('/SMALL LIGATURE [^L]*L /', $value[0]))		{			// replace all of the mappings that transform some sort of letter l to number one instead to some sort of letter l to latin small letter l			$temp_hold = str_replace(utf8_chr(0x0031), utf8_chr(0x006C), $temp_hold);		}	}	// uppercased chars that were folded do not exist in this universe,	// no amount of normalization could ever "trick" this into not working	if (in_array($value[1], $casefold_array[1]))	{		continue;	}	$uniarray[utf8_chr(hexdec((string)$value[1]))] = $temp_hold;}echo "Writing to confusables.$phpEx\n";$fp = fopen($phpbb_root_path . 'includes/utf/data/confusables.' . $phpEx, 'wb');fwrite($fp, '<?php return ' . my_var_export($uniarray) . ';');fclose($fp);/*** Return a parsable string representation of a variable** This is function is limited to array/strings/integers** @param	mixed	$var		Variable* @return	string				PHP code representing the variable*/function my_var_export($var){	if (is_array($var))	{		$lines = array();		foreach ($var as $k => $v)		{			$lines[] = my_var_export($k) . '=>' . my_var_export($v);		}		return 'array(' . implode(',', $lines) . ')';	}	else if (is_string($var))	{		return "'" . str_replace(array('\\', "'"), array('\\\\', "\\'"), $var) . "'";	}	else	{		return $var;	}}/*** Download a file to the develop/ dir** @param	string	$url		URL of the file to download* @return	void*/function download($url){	global $phpbb_root_path;	if (file_exists($phpbb_root_path . 'develop/' . basename($url)))	{		return;	}	echo 'Downloading from ', $url, ' ';	if (!$fpr = fopen($url, 'rb'))	{		die("Can't download from $url\nPlease download it yourself and put it in the develop/ dir, kthxbai");	}	if (!$fpw = fopen($phpbb_root_path . 'develop/' . basename($url), 'wb'))	{		die("Can't open develop/" . basename($url) . " for output... please check your permissions or something");	}	$i = 0;	$chunk = 32768;	$done = '';	while (!feof($fpr))	{		$i += fwrite($fpw, fread($fpr, $chunk));		echo str_repeat("\x08", strlen($done));		$done = ($i >> 10) . ' KiB';		echo $done;	}	fclose($fpr);	fclose($fpw);	echo "\n";}?>
<?php/***************************************************************************   *                           merge_clean_posts.php   *                            -------------------                          *   begin                : Tuesday, February 25, 2003  *   copyright            : (C) 2003 The phpBB Group         *   email                : support@phpbb.com                            *                                                           *   $Id$ *  ***************************************************************************/ /***************************************************************************   *                                                      *   This program is free software; you can redistribute it and/or modify     *   it under the terms of the GNU General Public License as published by    *   the Free Software Foundation; either version 2 of the License, or   *   (at your option) any later version.                       *  ***************************************************************************/ //// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");@set_time_limit(2400);$db = $dbhost = $dbuser = $dbpasswd = $dbport = $dbname = '';define('IN_PHPBB', 1);define('ANONYMOUS', 1);$phpbb_root_path='./../';include($phpbb_root_path . 'extension.inc');include($phpbb_root_path . 'config.'.$phpEx);include($phpbb_root_path . 'includes/functions.'.$phpEx);require($phpbb_root_path . 'includes/acm/cache_' . $acm_type . '.'.$phpEx);include($phpbb_root_path . 'db/' . $dbms . '.'.$phpEx);$cache = new acm();$db = new sql_db($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false);// Just Do it (tm) $sql = "RENAME TABLE {$table_prefix}posts TO {$table_prefix}posts_temp";$db->sql_query($sql);$sql = "CREATE TABLE {$table_prefix}posts 	SELECT p.*, pt.post_subject, pt.post_text, pt.post_checksum, pt.bbcode_bitfield, pt.bbcode_uid 		FROM {$table_prefix}posts_temp p, {$table_prefix}posts_text pt 		WHERE pt.post_id = p.post_id";$db->sql_query($sql);switch ($db->sql_layer){	case 'mysql':	case 'mysql4':		$sql = 'ALTER TABLE ' . $table_prefix . 'posts 			ADD PRIMARY KEY (post_id), 			ADD INDEX topic_id (topic_id), 			ADD INDEX poster_ip (poster_ip), 			ADD INDEX post_approved (post_approved), 			MODIFY COLUMN post_id mediumint(8) UNSIGNED NOT NULL auto_increment, 			ADD COLUMN post_encoding varchar(11) DEFAULT \'iso-8859-15\' NOT NULL'; 		break;	case 'mssql':	case 'mssql-odbc':	case 'msaccess':		break;	case 'postgresql':		break;}$db->sql_query($sql);$sql = "UPDATE {$table_prefix}topics SET topic_poster = 1 WHERE topic_poster = 0 OR topic_poster IS NULL";$db->sql_query($sql);$sql = "UPDATE {$table_prefix}topics SET topic_last_poster_id = 1 WHERE topic_last_poster_id = 0 OR topic_last_poster_id IS NULL";$db->sql_query($sql);$sql = "UPDATE {$table_prefix}posts SET poster_id = 1 WHERE poster_id = 0 OR poster_id IS NULL";$db->sql_query($sql);$sql = "UPDATE {$table_prefix}users SET user_id = 1 WHERE user_id = 0";$db->sql_query($sql);$sql = "SELECT t.topic_id 	FROM {$table_prefix}topics t 	LEFT JOIN {$table_prefix}posts p ON p.topic_id = t.topic_id 	WHERE p.topic_id IS NULL";$result = $db->sql_query($sql);if ($row = $db->sql_fetchrow($result)){	$del_sql = '';	do	{		$del_sql .= (($del_sql != '') ? ', ' : '') . $row['topic_id'];	}	while ($row = $db->sql_fetchrow($result));	$sql = "DELETE FROM {$table_prefix}topics 		WHERE topic_id IN ($del_sql)";	$db->sql_query($sql);}$db->sql_freeresult($result);$del_sql = '';$sql = "SELECT topic_id, MIN(post_id) AS first_post_id, MAX(post_id) AS last_post_id, COUNT(post_id) AS total_posts 	FROM {$table_prefix}posts 	GROUP BY topic_id";$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$del_sql .= (($del_sql != '') ? ', ' : '') . $row['topic_id'];	$sql = "UPDATE {$table_prefix}topics 		SET topic_first_post_id = " . $row['first_post_id'] . ", topic_last_post_id = " . $row['last_post_id'] . ", topic_replies = " . ($row['total_posts'] - 1) . "		WHERE topic_id = " . $row['topic_id'];	$db->sql_query($sql);}$db->sql_freeresult($result);$sql = "DELETE FROM {$table_prefix}topics WHERE topic_id NOT IN ($del_sql)";$db->sql_query($sql);$topic_count = $post_count = array();$sql = "SELECT forum_id, COUNT(topic_id) AS topics 	FROM {$table_prefix}topics 	GROUP BY forum_id";$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$topic_count[$row['forum_id']] = $row['topics'];}$db->sql_freeresult($result);$sql = "SELECT forum_id, COUNT(post_id) AS posts  	FROM {$table_prefix}posts 	GROUP BY forum_id";$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$post_count[$row['forum_id']] = $row['posts'];}$db->sql_freeresult($result);switch ($db->sql_layer){	case 'oracle':		$sql = "SELECT f.*, p.post_time, p.post_username, u.username, u.user_id			FROM " . $table_prefix . "forums f, " . $table_prefix . "posts p, " . $table_prefix . "users u			WHERE p.post_id = f.forum_last_post_id(+)				AND u.user_id = p.poster_id(+)";		break;	default:		$sql = "SELECT f.forum_id, p.post_time, p.post_username, u.username, u.user_id			FROM ((" . $table_prefix . "forums f			LEFT JOIN " . $table_prefix . "posts p ON p.post_id = f.forum_last_post_id)			LEFT JOIN " . $table_prefix . "users u ON u.user_id = p.poster_id)";		break;}$result = $db->sql_query($sql);$sql_ary = array();while ($row = $db->sql_fetchrow($result)){	$forum_id = $row['forum_id'];	$sql_ary[] = "UPDATE " . $table_prefix . "forums		SET forum_last_poster_id = " . ((!empty($row['user_id']) && $row['user_id'] != ANONYMOUS) ? $row['user_id'] : ANONYMOUS) . ", forum_last_poster_name = '" . ((!empty($row['user_id']) && $row['user_id'] !=  ANONYMOUS) ? addslashes($row['username']) : addslashes($row['post_username'])) . "', forum_last_post_time = " . $row['post_time'] . ", forum_posts = " . (($post_count[$forum_id]) ? $post_count[$forum_id] : 0) . ", forum_topics = " . (($topic_count[$forum_id]) ? $topic_count[$forum_id] : 0) . " 		WHERE forum_id = $forum_id";	$sql = "SELECT t.topic_id, u.username, u.user_id, u2.username as user2, u2.user_id as id2, p.post_username, p2.post_username AS post_username2, p2.post_time		FROM " . $table_prefix . "topics t, " . $table_prefix . "users u, " . $table_prefix . "posts p, " . $table_prefix . "posts p2, " . $table_prefix . "users u2		WHERE t.forum_id = $forum_id 			AND u.user_id = t.topic_poster 			AND p.post_id = t.topic_first_post_id			AND p2.post_id = t.topic_last_post_id			AND u2.user_id = p2.poster_id";	$result2 = $db->sql_query($sql);	while ($row2 = $db->sql_fetchrow($result2))	{		$sql_ary[] = "UPDATE " . $table_prefix . "topics			SET topic_poster = " . $row2['user_id'] . ", topic_first_poster_name = '" . ((!empty($row2['user_id']) && $row2['user_id'] != ANONYMOUS) ? addslashes($row2['username']) : addslashes($row2['post_username'])) . "', topic_last_poster_id = " . ((!empty($row2['id2']) && $row2['id2'] != ANONYMOUS) ? $row2['id2'] : ANONYMOUS) . ", topic_last_post_time = " . $row2['post_time'] . ", topic_last_poster_name = '" . ((!empty($row2['id2']) && $row2['id2'] !=  ANONYMOUS) ? addslashes($row2['user2']) : addslashes($row2['post_username2'])) . "'			WHERE topic_id = " . $row2['topic_id'];	}	$db->sql_freeresult($result2);	unset($row2);}$db->sql_freeresult($result);foreach ($sql_ary as $sql){	$sql . "<br />";	$db->sql_query($sql);}echo "<p><b>Done</b></p>\n"; ?>
<?php/**** @package install* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**/define('UPDATES_TO_VERSION', '3.0.10');// Enter any version to update from to test updates. The version within the db will not be updated.define('DEBUG_FROM_VERSION', false);// Which oldest version does this updater support?define('OLDEST_FROM_VERSION', '3.0.0');// Return if we "just include it" to find out for which version the database update is responsible forif (defined('IN_PHPBB') && defined('IN_INSTALL')){	$updates_to_version = UPDATES_TO_VERSION;	$debug_from_version = DEBUG_FROM_VERSION;	$oldest_from_version = OLDEST_FROM_VERSION;	return;}/***/define('IN_PHPBB', true);define('IN_INSTALL', true);$phpbb_root_path = (defined('PHPBB_ROOT_PATH')) ? PHPBB_ROOT_PATH : './../';$phpEx = substr(strrchr(__FILE__, '.'), 1);if (!function_exists('phpbb_require_updated')){	function phpbb_require_updated($path, $optional = false)	{		global $phpbb_root_path;		$new_path = $phpbb_root_path . 'install/update/new/' . $path;		$old_path = $phpbb_root_path . $path;		if (file_exists($new_path))		{			require($new_path);		}		else if (!$optional || file_exists($old_path))		{			require($old_path);		}	}}phpbb_require_updated('includes/startup.' . $phpEx);$updates_to_version = UPDATES_TO_VERSION;$debug_from_version = DEBUG_FROM_VERSION;$oldest_from_version = OLDEST_FROM_VERSION;error_reporting(E_ALL);@set_time_limit(0);// Include essential scriptsinclude($phpbb_root_path . 'config.' . $phpEx);if (!defined('PHPBB_INSTALLED') || empty($dbms) || empty($acm_type)){	die("Please read: <a href='../docs/INSTALL.html'>INSTALL.html</a> before attempting to update.");}// Load Extensionsif (!empty($load_extensions) && function_exists('dl')){	$load_extensions = explode(',', $load_extensions);	foreach ($load_extensions as $extension)	{		@dl(trim($extension));	}}// Include filesrequire($phpbb_root_path . 'includes/acm/acm_' . $acm_type . '.' . $phpEx);require($phpbb_root_path . 'includes/cache.' . $phpEx);require($phpbb_root_path . 'includes/template.' . $phpEx);require($phpbb_root_path . 'includes/session.' . $phpEx);require($phpbb_root_path . 'includes/auth.' . $phpEx);require($phpbb_root_path . 'includes/functions.' . $phpEx);phpbb_require_updated('includes/functions_content.' . $phpEx, true);require($phpbb_root_path . 'includes/functions_admin.' . $phpEx);require($phpbb_root_path . 'includes/constants.' . $phpEx);require($phpbb_root_path . 'includes/db/' . $dbms . '.' . $phpEx);require($phpbb_root_path . 'includes/utf/utf_tools.' . $phpEx);phpbb_require_updated('includes/db/db_tools.' . $phpEx);// new table constants are separately defined here in case the updater is run// before the files are updatedif (!defined('LOGIN_ATTEMPT_TABLE')){	define('LOGIN_ATTEMPT_TABLE', $table_prefix . 'login_attempts');}$user = new user();$cache = new cache();$db = new $sql_db();// Add own hook handler, if present. :oif (file_exists($phpbb_root_path . 'includes/hooks/index.' . $phpEx)){	require($phpbb_root_path . 'includes/hooks/index.' . $phpEx);	$phpbb_hook = new phpbb_hook(array('exit_handler', 'phpbb_user_session_handler', 'append_sid', array('template', 'display')));	foreach ($cache->obtain_hooks() as $hook)	{		@include($phpbb_root_path . 'includes/hooks/' . $hook . '.' . $phpEx);	}}else{	$phpbb_hook = false;}// Connect to DB$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false, false);// We do not need this any longer, unset for safety purposesunset($dbpasswd);$user->ip = (!empty($_SERVER['REMOTE_ADDR'])) ? htmlspecialchars($_SERVER['REMOTE_ADDR']) : '';$user->ip = (stripos($user->ip, '::ffff:') === 0) ? substr($user->ip, 7) : $user->ip;$sql = "SELECT config_value	FROM " . CONFIG_TABLE . "	WHERE config_name = 'default_lang'";$result = $db->sql_query($sql);$row = $db->sql_fetchrow($result);$db->sql_freeresult($result);$language = basename(request_var('language', ''));if (!$language){	$language = $row['config_value'];}if (!file_exists($phpbb_root_path . 'language/' . $language)){	die('No language found!');}// And finally, load the relevant language filesinclude($phpbb_root_path . 'language/' . $language . '/common.' . $phpEx);include($phpbb_root_path . 'language/' . $language . '/acp/common.' . $phpEx);include($phpbb_root_path . 'language/' . $language . '/install.' . $phpEx);// Set PHP error handler to ours//set_error_handler('msg_handler');// Define some variables for the database update$inline_update = (request_var('type', 0)) ? true : false;// To let set_config() calls succeed, we need to make the config array available globally$config = array();$sql = 'SELECT *	FROM ' . CONFIG_TABLE;$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$config[$row['config_name']] = $row['config_value'];}$db->sql_freeresult($result);// phpbb_db_tools will be taken from new files (under install/update/new)// if possible, falling back to the board's copy.$db_tools = new phpbb_db_tools($db, true);$database_update_info = database_update_info();$error_ary = array();$errored = false;header('Content-type: text/html; charset=UTF-8');?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" dir="<?php echo $lang['DIRECTION']; ?>" lang="<?php echo $lang['USER_LANG']; ?>" xml:lang="<?php echo $lang['USER_LANG']; ?>"><head><meta http-equiv="content-type" content="text/html; charset=UTF-8" /><meta http-equiv="content-language" content="<?php echo $lang['USER_LANG']; ?>" /><meta http-equiv="content-style-type" content="text/css" /><meta http-equiv="imagetoolbar" content="no" /><title><?php echo $lang['UPDATING_TO_LATEST_STABLE']; ?></title><link href="../adm/style/admin.css" rel="stylesheet" type="text/css" media="screen" /></head><body><div id="wrap">	<div id="page-header">&nbsp;</div>	<div id="page-body">		<div id="acp">		<div class="panel">			<span class="corners-top"><span></span></span>				<div id="content">					<div id="main" class="install-body">	<h1><?php echo $lang['UPDATING_TO_LATEST_STABLE']; ?></h1>	<br />	<p><?php echo $lang['DATABASE_TYPE']; ?> :: <strong><?php echo $db->sql_layer; ?></strong><br /><?phpif ($debug_from_version !== false){	$config['version'] = $debug_from_version;}echo $lang['PREVIOUS_VERSION'] . ' :: <strong>' . $config['version'] . '</strong><br />';echo $lang['UPDATED_VERSION'] . ' :: <strong>' . $updates_to_version . '</strong></p>';$current_version = str_replace('rc', 'RC', strtolower($config['version']));$latest_version = str_replace('rc', 'RC', strtolower($updates_to_version));$orig_version = $config['version'];// Fill DB versionif (empty($config['dbms_version'])){	set_config('dbms_version', $db->sql_server_info(true));}// Firebird update from Firebird 2.0 to 2.1+ required?if ($db->sql_layer == 'firebird'){	// We do not trust any PHP5 function enabled, we will simply test for a function new in 2.1	$db->sql_return_on_error(true);	$sql = 'SELECT 1 FROM RDB$DATABASE		WHERE BIN_AND(10, 1) = 0';	$result = $db->sql_query($sql);	if (!$result || $db->sql_error_triggered)	{		echo '<br /><br />';		echo '<h1>' . $lang['ERROR'] . '</h1><br />';		echo '<p>' . $lang['FIREBIRD_DBMS_UPDATE_REQUIRED'] . '</p>';		_print_footer();		exit_handler();		exit;	}	$db->sql_freeresult($result);	$db->sql_return_on_error(false);}// MySQL update from MySQL 3.x/4.x to > 4.1.x required?if ($db->sql_layer == 'mysql' || $db->sql_layer == 'mysql4' || $db->sql_layer == 'mysqli'){	// Verify by fetching column... if the column type matches the new type we update dbms_version...	$sql = "SHOW COLUMNS FROM " . CONFIG_TABLE;	$result = $db->sql_query($sql);	$column_type = '';	while ($row = $db->sql_fetchrow($result))	{		$field = strtolower($row['Field']);		if ($field == 'config_value')		{			$column_type = strtolower($row['Type']);			break;		}	}	$db->sql_freeresult($result);	// If column type is blob, but mysql version says we are on > 4.1.3, then the schema needs an update	if (strpos($column_type, 'blob') !== false && version_compare($db->sql_server_info(true), '4.1.3', '>='))	{		echo '<br /><br />';		echo '<h1>' . $lang['ERROR'] . '</h1><br />';		echo '<p>' . sprintf($lang['MYSQL_SCHEMA_UPDATE_REQUIRED'], $config['dbms_version'], $db->sql_server_info(true)) . '</p>';		_print_footer();		exit_handler();		exit;	}}// Now check if the user wants to update from a version we no longer support updates fromif (version_compare($current_version, $oldest_from_version, '<')){	echo '<br /><br /><h1>' . $lang['ERROR'] . '</h1><br />';	echo '<p>' . sprintf($lang['DB_UPDATE_NOT_SUPPORTED'], $oldest_from_version, $current_version) . '</p>';	_print_footer();	exit_handler();	exit;}// If the latest version and the current version are 'unequal', we will update the version_update_from, else we do not update anything.if ($inline_update){	if ($current_version !== $latest_version)	{		set_config('version_update_from', $orig_version);	}}else{	// If not called from the update script, we will actually remove the traces	$db->sql_query('DELETE FROM ' . CONFIG_TABLE . " WHERE config_name = 'version_update_from'");}// Schema updates?>	<br /><br />	<h1><?php echo $lang['UPDATE_DATABASE_SCHEMA']; ?></h1>	<br />	<p><?php echo $lang['PROGRESS']; ?> :: <strong><?phpflush();// We go through the schema changes from the lowest to the highest version// We try to also include versions 'in-between'...$no_updates = true;$versions = array_keys($database_update_info);for ($i = 0; $i < sizeof($versions); $i++){	$version = $versions[$i];	$schema_changes = $database_update_info[$version];	$next_version = (isset($versions[$i + 1])) ? $versions[$i + 1] : $updates_to_version;	// If the installed version to be updated to is < than the current version, and if the current version is >= as the version to be updated to next, we will skip the process	if (version_compare($version, $current_version, '<') && version_compare($current_version, $next_version, '>='))	{		continue;	}	if (!sizeof($schema_changes))	{		continue;	}	$no_updates = false;	// We run one index after the other... to be consistent with schema changes...	foreach ($schema_changes as $key => $changes)	{		$statements = $db_tools->perform_schema_changes(array($key => $changes));		foreach ($statements as $sql)		{			_sql($sql, $errored, $error_ary);		}	}}_write_result($no_updates, $errored, $error_ary);// Data updates$error_ary = array();$errored = $no_updates = false;?><br /><br /><h1><?php echo $lang['UPDATING_DATA']; ?></h1><br /><p><?php echo $lang['PROGRESS']; ?> :: <strong><?phpflush();$no_updates = true;$versions = array_keys($database_update_info);// some code magicfor ($i = 0; $i < sizeof($versions); $i++){	$version = $versions[$i];	$next_version = (isset($versions[$i + 1])) ? $versions[$i + 1] : $updates_to_version;	// If the installed version to be updated to is < than the current version, and if the current version is >= as the version to be updated to next, we will skip the process	if (version_compare($version, $current_version, '<') && version_compare($current_version, $next_version, '>='))	{		continue;	}	change_database_data($no_updates, $version);}_write_result($no_updates, $errored, $error_ary);$error_ary = array();$errored = $no_updates = false;?><br /><br /><h1><?php echo $lang['UPDATE_VERSION_OPTIMIZE']; ?></h1><br /><p><?php echo $lang['PROGRESS']; ?> :: <strong><?phpflush();if ($debug_from_version === false){	// update the version	$sql = "UPDATE " . CONFIG_TABLE . "		SET config_value = '$updates_to_version'		WHERE config_name = 'version'";	_sql($sql, $errored, $error_ary);}// Reset permissions$sql = 'UPDATE ' . USERS_TABLE . "	SET user_permissions = '',		user_perm_from = 0";_sql($sql, $errored, $error_ary);// Update the dbms version if everything is ok...set_config('dbms_version', $db->sql_server_info(true));/* Optimize/vacuum analyze the tables where appropriate// this should be done for each version in future along with// the version number updateswitch ($db->sql_layer){	case 'mysql':	case 'mysqli':	case 'mysql4':		$sql = 'OPTIMIZE TABLE ' . $table_prefix . 'auth_access, ' . $table_prefix . 'banlist, ' . $table_prefix . 'categories, ' . $table_prefix . 'config, ' . $table_prefix . 'disallow, ' . $table_prefix . 'forum_prune, ' . $table_prefix . 'forums, ' . $table_prefix . 'groups, ' . $table_prefix . 'posts, ' . $table_prefix . 'posts_text, ' . $table_prefix . 'privmsgs, ' . $table_prefix . 'privmsgs_text, ' . $table_prefix . 'ranks, ' . $table_prefix . 'search_results, ' . $table_prefix . 'search_wordlist, ' . $table_prefix . 'search_wordmatch, ' . $table_prefix . 'sessions_keys' . $table_prefix . 'smilies, ' . $table_prefix . 'themes, ' . $table_prefix . 'themes_name, ' . $table_prefix . 'topics, ' . $table_prefix . 'topics_watch, ' . $table_prefix . 'user_group, ' . $table_prefix . 'users, ' . $table_prefix . 'vote_desc, ' . $table_prefix . 'vote_results, ' . $table_prefix . 'vote_voters, ' . $table_prefix . 'words';		_sql($sql, $errored, $error_ary);	break;	case 'postgresql':		_sql("VACUUM ANALYZE", $errored, $error_ary);	break;}*/_write_result($no_updates, $errored, $error_ary);?><br /><h1><?php echo $lang['UPDATE_COMPLETED']; ?></h1><br /><?phpif (!$inline_update){?>	<p style="color:red"><?php echo $lang['UPDATE_FILES_NOTICE']; ?></p>	<p><?php echo $lang['COMPLETE_LOGIN_TO_BOARD']; ?></p><?php}else{?>	<p><?php echo ((isset($lang['INLINE_UPDATE_SUCCESSFUL'])) ? $lang['INLINE_UPDATE_SUCCESSFUL'] : 'The database update was successful. Now you need to continue the update process.'); ?></p>	<p><a href="<?php echo append_sid("{$phpbb_root_path}install/index.{$phpEx}", "mode=update&amp;sub=file_check&amp;language=$language"); ?>" class="button1"><?php echo (isset($lang['CONTINUE_UPDATE_NOW'])) ? $lang['CONTINUE_UPDATE_NOW'] : 'Continue the update process now'; ?></a></p><?php}// Add database update to logadd_log('admin', 'LOG_UPDATE_DATABASE', $orig_version, $updates_to_version);// Now we purge the session table as well as all cache files$cache->purge();_print_footer();garbage_collection();if (function_exists('exit_handler')){	exit_handler();}/*** Print out footer*/function _print_footer(){	echo <<<EOF					</div>				</div>			<span class="corners-bottom"><span></span></span>		</div>		</div>	</div>	<div id="page-footer">		Powered by <a href="http://www.phpbb.com/">phpBB</a>&reg; Forum Software &copy; phpBB Group	</div></div></body></html>EOF;}/*** Function for triggering an sql statement*/function _sql($sql, &$errored, &$error_ary, $echo_dot = true){	global $db;	if (defined('DEBUG_EXTRA'))	{		echo "<br />\n{$sql}\n<br />";	}	$db->sql_return_on_error(true);	if ($sql === 'begin')	{		$result = $db->sql_transaction('begin');	}	else if ($sql === 'commit')	{		$result = $db->sql_transaction('commit');	}	else	{		$result = $db->sql_query($sql);		if ($db->sql_error_triggered)		{			$errored = true;			$error_ary['sql'][] = $db->sql_error_sql;			$error_ary['error_code'][] = $db->sql_error_returned;		}	}	$db->sql_return_on_error(false);	if ($echo_dot)	{		echo ". \n";		flush();	}	return $result;}function _write_result($no_updates, $errored, $error_ary){	global $lang;	if ($no_updates)	{		echo ' ' . $lang['NO_UPDATES_REQUIRED'] . '</strong></p>';	}	else	{		echo ' <span class="success">' . $lang['DONE'] . '</span></strong><br />' . $lang['RESULT'] . ' :: ';		if ($errored)		{			echo ' <strong>' . $lang['SOME_QUERIES_FAILED'] . '</strong> <ul>';			for ($i = 0; $i < sizeof($error_ary['sql']); $i++)			{				echo '<li>' . $lang['ERROR'] . ' :: <strong>' . htmlspecialchars($error_ary['error_code'][$i]['message']) . '</strong><br />';				echo $lang['SQL'] . ' :: <strong>' . htmlspecialchars($error_ary['sql'][$i]) . '</strong><br /><br /></li>';			}			echo '</ul> <br /><br />' . $lang['SQL_FAILURE_EXPLAIN'] . '</p>';		}		else		{			echo '<strong>' . $lang['NO_ERRORS'] . '</strong></p>';		}	}}function _add_modules($modules_to_install){	global $phpbb_root_path, $phpEx, $db;	include_once($phpbb_root_path . 'includes/acp/acp_modules.' . $phpEx);	$_module = new acp_modules();	foreach ($modules_to_install as $module_mode => $module_data)	{		$_module->module_class = $module_data['class'];		// Determine parent id first		$sql = 'SELECT module_id			FROM ' . MODULES_TABLE . "			WHERE module_class = '" . $db->sql_escape($module_data['class']) . "'				AND module_langname = '" . $db->sql_escape($module_data['cat']) . "'				AND module_mode = ''				AND module_basename = ''";		$result = $db->sql_query($sql);		// There may be more than one categories with the same name		$categories = array();		while ($row = $db->sql_fetchrow($result))		{			$categories[] = (int) $row['module_id'];		}		$db->sql_freeresult($result);		if (!sizeof($categories))		{			continue;		}		// Add the module to all categories found		foreach ($categories as $parent_id)		{			// Check if the module already exists			$sql = 'SELECT *				FROM ' . MODULES_TABLE . "				WHERE module_basename = '" . $db->sql_escape($module_data['base']) . "'					AND module_class = '" . $db->sql_escape($module_data['class']) . "'					AND module_langname = '" . $db->sql_escape($module_data['title']) . "'					AND module_mode = '" . $db->sql_escape($module_mode) . "'					AND module_auth = '" . $db->sql_escape($module_data['auth']) . "'					AND parent_id = {$parent_id}";			$result = $db->sql_query($sql);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			// If it exists, we simply continue with the next category			if ($row)			{				continue;			}			// Build the module sql row			$module_row = array(				'module_basename'	=> $module_data['base'],				'module_enabled'	=> (isset($module_data['enabled'])) ? (int) $module_data['enabled'] : 1,				'module_display'	=> (isset($module_data['display'])) ? (int) $module_data['display'] : 1,				'parent_id'			=> $parent_id,				'module_class'		=> $module_data['class'],				'module_langname'	=> $module_data['title'],				'module_mode'		=> $module_mode,				'module_auth'		=> $module_data['auth'],			);			$_module->update_module_data($module_row, true);			// Ok, do we need to re-order the module, move it up or down?			if (!isset($module_data['after']))			{				continue;			}			$after_mode = $module_data['after'][0];			$after_langname = $module_data['after'][1];			// First of all, get the module id for the module this one has to be placed after			$sql = 'SELECT left_id				FROM ' . MODULES_TABLE . "				WHERE module_class = '" . $db->sql_escape($module_data['class']) . "'					AND module_basename = '" . $db->sql_escape($module_data['base']) . "'					AND module_langname = '" . $db->sql_escape($after_langname) . "'					AND module_mode = '" . $db->sql_escape($after_mode) . "'					AND parent_id = '{$parent_id}'";			$result = $db->sql_query($sql);			$first_left_id = (int) $db->sql_fetchfield('left_id');			$db->sql_freeresult($result);			if (!$first_left_id)			{				continue;			}			// Ok, count the number of modules between $after_mode and the added module			$sql = 'SELECT COUNT(module_id) as num_modules				FROM ' . MODULES_TABLE . "				WHERE module_class = '" . $db->sql_escape($module_data['class']) . "'					AND parent_id = {$parent_id}					AND left_id BETWEEN {$first_left_id} AND {$module_row['left_id']}";			$result = $db->sql_query($sql);			$steps = (int) $db->sql_fetchfield('num_modules');			$db->sql_freeresult($result);			// We need to substract 2			$steps -= 2;			if ($steps <= 0)			{				continue;			}			// Ok, move module up $num_modules times. ;)			$_module->move_module_by($module_row, 'move_up', $steps);		}	}	$_module->remove_cache_file();}/***************************************************************************** ADD YOUR DATABASE SCHEMA CHANGES HERE										******************************************************************************/function database_update_info(){	return array(		// Changes from 3.0.0 to the next version		'3.0.0'			=> array(			// Add the following columns			'add_columns'		=> array(				FORUMS_TABLE			=> array(					'display_subforum_list'		=> array('BOOL', 1),				),				SESSIONS_TABLE			=> array(					'session_forum_id'		=> array('UINT', 0),				),			),			'drop_keys'		=> array(				GROUPS_TABLE			=> array('group_legend'),			),			'add_index'		=> array(				SESSIONS_TABLE			=> array(					'session_forum_id'		=> array('session_forum_id'),				),				GROUPS_TABLE			=> array(					'group_legend_name'		=> array('group_legend', 'group_name'),				),			),		),		// No changes from 3.0.1-RC1 to 3.0.1		'3.0.1-RC1'		=> array(),		// No changes from 3.0.1 to 3.0.2-RC1		'3.0.1'			=> array(),		// Changes from 3.0.2-RC1 to 3.0.2-RC2		'3.0.2-RC1'		=> array(			'change_columns'	=> array(				DRAFTS_TABLE			=> array(					'draft_subject'		=> array('STEXT_UNI', ''),				),				FORUMS_TABLE	=> array(					'forum_last_post_subject' => array('STEXT_UNI', ''),				),				POSTS_TABLE		=> array(					'post_subject'			=> array('STEXT_UNI', '', 'true_sort'),				),				PRIVMSGS_TABLE	=> array(					'message_subject'		=> array('STEXT_UNI', ''),				),				TOPICS_TABLE	=> array(					'topic_title'				=> array('STEXT_UNI', '', 'true_sort'),					'topic_last_post_subject'	=> array('STEXT_UNI', ''),				),			),			'drop_keys'		=> array(				SESSIONS_TABLE			=> array('session_forum_id'),			),			'add_index'		=> array(				SESSIONS_TABLE			=> array(					'session_fid'		=> array('session_forum_id'),				),			),		),		// No changes from 3.0.2-RC2 to 3.0.2		'3.0.2-RC2'		=> array(),		// Changes from 3.0.2 to 3.0.3-RC1		'3.0.2'			=> array(			// Add the following columns			'add_columns'		=> array(				STYLES_TEMPLATE_TABLE			=> array(					'template_inherits_id'		=> array('UINT:4', 0),					'template_inherit_path'		=> array('VCHAR', ''),				),				GROUPS_TABLE					=> array(					'group_max_recipients'		=> array('UINT', 0),				),			),		),		// No changes from 3.0.3-RC1 to 3.0.3		'3.0.3-RC1'		=> array(),		// Changes from 3.0.3 to 3.0.4-RC1		'3.0.3'			=> array(			'add_columns'		=> array(				PROFILE_FIELDS_TABLE			=> array(					'field_show_profile'		=> array('BOOL', 0),				),			),			'change_columns'	=> array(				STYLES_TABLE				=> array(					'style_id'				=> array('UINT', NULL, 'auto_increment'),					'template_id'			=> array('UINT', 0),					'theme_id'				=> array('UINT', 0),					'imageset_id'			=> array('UINT', 0),				),				STYLES_IMAGESET_TABLE		=> array(					'imageset_id'				=> array('UINT', NULL, 'auto_increment'),				),				STYLES_IMAGESET_DATA_TABLE	=> array(					'image_id'				=> array('UINT', NULL, 'auto_increment'),					'imageset_id'			=> array('UINT', 0),				),				STYLES_THEME_TABLE			=> array(					'theme_id'				=> array('UINT', NULL, 'auto_increment'),				),				STYLES_TEMPLATE_TABLE		=> array(					'template_id'			=> array('UINT', NULL, 'auto_increment'),				),				STYLES_TEMPLATE_DATA_TABLE	=> array(					'template_id'			=> array('UINT', 0),				),				FORUMS_TABLE				=> array(					'forum_style'			=> array('UINT', 0),				),				USERS_TABLE					=> array(					'user_style'			=> array('UINT', 0),				),			),		),		// Changes from 3.0.4-RC1 to 3.0.4		'3.0.4-RC1'		=> array(),		// Changes from 3.0.4 to 3.0.5-RC1		'3.0.4'			=> array(			'change_columns'	=> array(				FORUMS_TABLE				=> array(					'forum_style'			=> array('UINT', 0),				),			),		),		// No changes from 3.0.5-RC1 to 3.0.5		'3.0.5-RC1'		=> array(),		// Changes from 3.0.5 to 3.0.6-RC1		'3.0.5'		=> array(			'add_columns'		=> array(				CONFIRM_TABLE			=> array(					'attempts'		=> array('UINT', 0),				),				USERS_TABLE			=> array(					'user_new'			=> array('BOOL', 1),					'user_reminded'		=> array('TINT:4', 0),					'user_reminded_time'=> array('TIMESTAMP', 0),				),				GROUPS_TABLE			=> array(					'group_skip_auth'		=> array('BOOL', 0, 'after' => 'group_founder_manage'),				),				PRIVMSGS_TABLE		=> array(					'message_reported'	=> array('BOOL', 0),				),				REPORTS_TABLE		=> array(					'pm_id'				=> array('UINT', 0),				),				PROFILE_FIELDS_TABLE			=> array(					'field_show_on_vt'		=> array('BOOL', 0),				),				FORUMS_TABLE		=> array(					'forum_options'			=> array('UINT:20', 0),				),			),			'change_columns'		=> array(				USERS_TABLE				=> array(					'user_options'		=> array('UINT:11', 230271),				),			),			'add_index'		=> array(				REPORTS_TABLE		=> array(					'post_id'		=> array('post_id'),					'pm_id'			=> array('pm_id'),				),				POSTS_TABLE			=> array(					'post_username'		=> array('post_username:255'),				),			),		),		// No changes from 3.0.6-RC1 to 3.0.6-RC2		'3.0.6-RC1'		=> array(),		// No changes from 3.0.6-RC2 to 3.0.6-RC3		'3.0.6-RC2'		=> array(),		// No changes from 3.0.6-RC3 to 3.0.6-RC4		'3.0.6-RC3'		=> array(),		// No changes from 3.0.6-RC4 to 3.0.6		'3.0.6-RC4'		=> array(),		// Changes from 3.0.6 to 3.0.7-RC1		'3.0.6'		=> array(			'drop_keys'		=> array(				LOG_TABLE			=> array('log_time'),			),			'add_index'		=> array(				TOPICS_TRACK_TABLE	=> array(					'topic_id'		=> array('topic_id'),				),			),		),		// No changes from 3.0.7-RC1 to 3.0.7-RC2		'3.0.7-RC1'		=> array(),		// No changes from 3.0.7-RC2 to 3.0.7		'3.0.7-RC2'		=> array(),		// No changes from 3.0.7 to 3.0.7-PL1		'3.0.7'		=> array(),		// No changes from 3.0.7-PL1 to 3.0.8-RC1		'3.0.7-PL1'		=> array(),		// No changes from 3.0.8-RC1 to 3.0.8		'3.0.8-RC1'		=> array(),		// Changes from 3.0.8 to 3.0.9-RC1		'3.0.8'			=> array(			'add_tables'		=> array(				LOGIN_ATTEMPT_TABLE	=> array(					'COLUMNS'			=> array(						// this column was removed from the database updater						// after 3.0.9-RC3 was released. It might still exist						// in 3.0.9-RCX installations and has to be dropped in						// 3.0.11 after the db_tools class is capable of properly						// removing a primary key.						// 'attempt_id'			=> array('UINT', NULL, 'auto_increment'),						'attempt_ip'			=> array('VCHAR:40', ''),						'attempt_browser'		=> array('VCHAR:150', ''),						'attempt_forwarded_for'	=> array('VCHAR:255', ''),						'attempt_time'			=> array('TIMESTAMP', 0),						'user_id'				=> array('UINT', 0),						'username'				=> array('VCHAR_UNI:255', 0),						'username_clean'		=> array('VCHAR_CI', 0),					),					//'PRIMARY_KEY'		=> 'attempt_id',					'KEYS'				=> array(						'att_ip'			=> array('INDEX', array('attempt_ip', 'attempt_time')),						'att_for'	=> array('INDEX', array('attempt_forwarded_for', 'attempt_time')),						'att_time'			=> array('INDEX', array('attempt_time')),						'user_id'				=> array('INDEX', 'user_id'),					),				),			),			'change_columns'	=> array(				BBCODES_TABLE	=> array(					'bbcode_id'	=> array('USINT', 0),				),			),		),		// No changes from 3.0.9-RC1 to 3.0.9-RC2		'3.0.9-RC1'		=> array(),		// No changes from 3.0.9-RC2 to 3.0.9-RC3		'3.0.9-RC2'		=> array(),		// No changes from 3.0.9-RC3 to 3.0.9-RC4		'3.0.9-RC3'     => array(),		// No changes from 3.0.9-RC4 to 3.0.9		'3.0.9-RC4'     => array(),		// No changes from 3.0.9 to 3.0.10-RC1		'3.0.9'			=> array(),		// No changes from 3.0.10-RC1 to 3.0.10-RC2		'3.0.10-RC1'	=> array(),		// No changes from 3.0.10-RC2 to 3.0.10-RC3		'3.0.10-RC2'	=> array(),		// No changes from 3.0.10-RC3 to 3.0.10		'3.0.10-RC3'	=> array(),		/** @todo DROP LOGIN_ATTEMPT_TABLE.attempt_id in 3.0.11-RC1 */	);}/***************************************************************************** ADD YOUR DATABASE DATA CHANGES HERE										** REMEMBER: You NEED to enter a schema array above and a data array here,	** even if both or one of them are empty.									******************************************************************************/function change_database_data(&$no_updates, $version){	global $db, $errored, $error_ary, $config, $phpbb_root_path, $phpEx;	switch ($version)	{		case '3.0.0':			$sql = 'UPDATE ' . TOPICS_TABLE . "				SET topic_last_view_time = topic_last_post_time				WHERE topic_last_view_time = 0";			_sql($sql, $errored, $error_ary);			// Update smiley sizes			$smileys = array('icon_e_surprised.gif', 'icon_eek.gif', 'icon_cool.gif', 'icon_lol.gif', 'icon_mad.gif', 'icon_razz.gif', 'icon_redface.gif', 'icon_cry.gif', 'icon_evil.gif', 'icon_twisted.gif', 'icon_rolleyes.gif', 'icon_exclaim.gif', 'icon_question.gif', 'icon_idea.gif', 'icon_arrow.gif', 'icon_neutral.gif', 'icon_mrgreen.gif', 'icon_e_ugeek.gif');			foreach ($smileys as $smiley)			{				if (file_exists($phpbb_root_path . 'images/smilies/' . $smiley))				{					list($width, $height) = getimagesize($phpbb_root_path . 'images/smilies/' . $smiley);					$sql = 'UPDATE ' . SMILIES_TABLE . '						SET smiley_width = ' . $width . ', smiley_height = ' . $height . "						WHERE smiley_url = '" . $db->sql_escape($smiley) . "'";					_sql($sql, $errored, $error_ary);				}			}			$no_updates = false;		break;		// No changes from 3.0.1-RC1 to 3.0.1		case '3.0.1-RC1':		break;		// changes from 3.0.1 to 3.0.2-RC1		case '3.0.1':			set_config('referer_validation', '1');			set_config('check_attachment_content', '1');			set_config('mime_triggers', 'body|head|html|img|plaintext|a href|pre|script|table|title');			$no_updates = false;		break;		// No changes from 3.0.2-RC1 to 3.0.2-RC2		case '3.0.2-RC1':		break;		// No changes from 3.0.2-RC2 to 3.0.2		case '3.0.2-RC2':		break;		// Changes from 3.0.2 to 3.0.3-RC1		case '3.0.2':			set_config('enable_queue_trigger', '0');			set_config('queue_trigger_posts', '3');			set_config('pm_max_recipients', '0');			// Set maximum number of recipients for the registered users, bots, guests group			$sql = 'UPDATE ' . GROUPS_TABLE . ' SET group_max_recipients = 5				WHERE ' . $db->sql_in_set('group_name', array('GUESTS', 'REGISTERED', 'REGISTERED_COPPA', 'BOTS'));			_sql($sql, $errored, $error_ary);			// Not prefilling yet			set_config('dbms_version', '');			// Add new permission u_masspm_group and duplicate settings from u_masspm			include_once($phpbb_root_path . 'includes/acp/auth.' . $phpEx);			$auth_admin = new auth_admin();			// Only add the new permission if it does not already exist			if (empty($auth_admin->acl_options['id']['u_masspm_group']))			{				$auth_admin->acl_add_option(array('global' => array('u_masspm_group')));				// Now the tricky part, filling the permission				$old_id = $auth_admin->acl_options['id']['u_masspm'];				$new_id = $auth_admin->acl_options['id']['u_masspm_group'];				$tables = array(ACL_GROUPS_TABLE, ACL_ROLES_DATA_TABLE, ACL_USERS_TABLE);				foreach ($tables as $table)				{					$sql = 'SELECT *						FROM ' . $table . '						WHERE auth_option_id = ' . $old_id;					$result = _sql($sql, $errored, $error_ary);					$sql_ary = array();					while ($row = $db->sql_fetchrow($result))					{						$row['auth_option_id'] = $new_id;						$sql_ary[] = $row;					}					$db->sql_freeresult($result);					if (sizeof($sql_ary))					{						$db->sql_multi_insert($table, $sql_ary);					}				}				// Remove any old permission entries				$auth_admin->acl_clear_prefetch();			}			/**			* Do not resync post counts here. An admin may do this later from the ACP			$start = 0;			$step = ($config['num_posts']) ? (max((int) ($config['num_posts'] / 5), 20000)) : 20000;			$sql = 'UPDATE ' . USERS_TABLE . ' SET user_posts = 0';			_sql($sql, $errored, $error_ary);			do			{				$sql = 'SELECT COUNT(post_id) AS num_posts, poster_id					FROM ' . POSTS_TABLE . '					WHERE post_id BETWEEN ' . ($start + 1) . ' AND ' . ($start + $step) . '						AND post_postcount = 1 AND post_approved = 1					GROUP BY poster_id';				$result = _sql($sql, $errored, $error_ary);				if ($row = $db->sql_fetchrow($result))				{					do					{						$sql = 'UPDATE ' . USERS_TABLE . " SET user_posts = user_posts + {$row['num_posts']} WHERE user_id = {$row['poster_id']}";						_sql($sql, $errored, $error_ary);					}					while ($row = $db->sql_fetchrow($result));					$start += $step;				}				else				{					$start = 0;				}				$db->sql_freeresult($result);			}			while ($start);			*/			$sql = 'UPDATE ' . MODULES_TABLE . '				SET module_auth = \'acl_a_email && cfg_email_enable\'				WHERE module_class = \'acp\'					AND module_basename = \'email\'';			_sql($sql, $errored, $error_ary);			$no_updates = false;		break;		// Changes from 3.0.3-RC1 to 3.0.3		case '3.0.3-RC1':			if ($db->sql_layer == 'oracle')			{				// log_operation is CLOB - but we can change this later				$sql = 'UPDATE ' . LOG_TABLE . "					SET log_operation = 'LOG_DELETE_TOPIC'					WHERE log_operation LIKE 'LOG_TOPIC_DELETED'";				_sql($sql, $errored, $error_ary);			}			else			{				$sql = 'UPDATE ' . LOG_TABLE . "					SET log_operation = 'LOG_DELETE_TOPIC'					WHERE log_operation = 'LOG_TOPIC_DELETED'";				_sql($sql, $errored, $error_ary);			}			$no_updates = false;		break;		// Changes from 3.0.3 to 3.0.4-RC1		case '3.0.3':			// Update the Custom Profile Fields based on previous settings to the new format			$sql = 'SELECT field_id, field_required, field_show_on_reg, field_hide					FROM ' . PROFILE_FIELDS_TABLE;			$result = _sql($sql, $errored, $error_ary);			while ($row = $db->sql_fetchrow($result))			{				$sql_ary = array(					'field_required'	=> 0,					'field_show_on_reg'	=> 0,					'field_hide'		=> 0,					'field_show_profile'=> 0,				);				if ($row['field_required'])				{					$sql_ary['field_required'] = $sql_ary['field_show_on_reg'] = $sql_ary['field_show_profile'] = 1;				}				else if ($row['field_show_on_reg'])				{					$sql_ary['field_show_on_reg'] = $sql_ary['field_show_profile'] = 1;				}				else if ($row['field_hide'])				{					// Only administrators and moderators can see this CPF, if the view is enabled, they can see it, otherwise just admins in the acp_users module					$sql_ary['field_hide'] = 1;				}				else				{					// equivelant to "none", which is the "Display in user control panel" option					$sql_ary['field_show_profile'] = 1;				}				_sql('UPDATE ' . PROFILE_FIELDS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . ' WHERE field_id = ' . $row['field_id'], $errored, $error_ary);			}			$no_updates = false;		break;		// Changes from 3.0.4-RC1 to 3.0.4		case '3.0.4-RC1':		break;		// Changes from 3.0.4 to 3.0.5-RC1		case '3.0.4':			// Captcha config variables			set_config('captcha_gd_wave', 0);			set_config('captcha_gd_3d_noise', 1);			set_config('captcha_gd_fonts', 1);			set_config('confirm_refresh', 1);			// Maximum number of keywords			set_config('max_num_search_keywords', 10);			// Remove static config var and put it back as dynamic variable			$sql = 'UPDATE ' . CONFIG_TABLE . "				SET is_dynamic = 1				WHERE config_name = 'search_indexing_state'";			_sql($sql, $errored, $error_ary);			// Hash old MD5 passwords			$sql = 'SELECT user_id, user_password					FROM ' . USERS_TABLE . '					WHERE user_pass_convert = 1';			$result = _sql($sql, $errored, $error_ary);			while ($row = $db->sql_fetchrow($result))			{				if (strlen($row['user_password']) == 32)				{					$sql_ary = array(						'user_password'	=> phpbb_hash($row['user_password']),					);					_sql('UPDATE ' . USERS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . ' WHERE user_id = ' . $row['user_id'], $errored, $error_ary);				}			}			$db->sql_freeresult($result);			// Adjust bot entry			$sql = 'UPDATE ' . BOTS_TABLE . "				SET bot_agent = 'ichiro/'				WHERE bot_agent = 'ichiro/2'";			_sql($sql, $errored, $error_ary);			// Before we are able to add a unique key to auth_option, we need to remove duplicate entries			// We get duplicate entries first			$sql = 'SELECT auth_option				FROM ' . ACL_OPTIONS_TABLE . '				GROUP BY auth_option				HAVING COUNT(*) >= 2';			$result = $db->sql_query($sql);			$auth_options = array();			while ($row = $db->sql_fetchrow($result))			{				$auth_options[] = $row['auth_option'];			}			$db->sql_freeresult($result);			// Remove specific auth options			if (!empty($auth_options))			{				foreach ($auth_options as $option)				{					// Select auth_option_ids... the largest id will be preserved					$sql = 'SELECT auth_option_id						FROM ' . ACL_OPTIONS_TABLE . "						WHERE auth_option = '" . $db->sql_escape($option) . "'						ORDER BY auth_option_id DESC";					// sql_query_limit not possible here, due to bug in postgresql layer					$result = $db->sql_query($sql);					// Skip first row, this is our original auth option we want to preserve					$row = $db->sql_fetchrow($result);					while ($row = $db->sql_fetchrow($result))					{						// Ok, remove this auth option...						_sql('DELETE FROM ' . ACL_OPTIONS_TABLE . ' WHERE auth_option_id = ' . $row['auth_option_id'], $errored, $error_ary);						_sql('DELETE FROM ' . ACL_ROLES_DATA_TABLE . ' WHERE auth_option_id = ' . $row['auth_option_id'], $errored, $error_ary);						_sql('DELETE FROM ' . ACL_GROUPS_TABLE . ' WHERE auth_option_id = ' . $row['auth_option_id'], $errored, $error_ary);						_sql('DELETE FROM ' . ACL_USERS_TABLE . ' WHERE auth_option_id = ' . $row['auth_option_id'], $errored, $error_ary);					}					$db->sql_freeresult($result);				}			}			// Now make auth_option UNIQUE, by dropping the old index and adding a UNIQUE one.			$changes = array(				'drop_keys'			=> array(					ACL_OPTIONS_TABLE		=> array('auth_option'),				),			);			global $db_tools;			$statements = $db_tools->perform_schema_changes($changes);			foreach ($statements as $sql)			{				_sql($sql, $errored, $error_ary);			}			$changes = array(				'add_unique_index'	=> array(					ACL_OPTIONS_TABLE		=> array(						'auth_option'		=> array('auth_option'),					),				),			);			$statements = $db_tools->perform_schema_changes($changes);			foreach ($statements as $sql)			{				_sql($sql, $errored, $error_ary);			}			$no_updates = false;		break;		// No changes from 3.0.5-RC1 to 3.0.5		case '3.0.5-RC1':		break;		// Changes from 3.0.5 to 3.0.6-RC1		case '3.0.5':			// Let's see if the GD Captcha can be enabled... we simply look for what *is* enabled...			if (!empty($config['captcha_gd']) && !isset($config['captcha_plugin']))			{				set_config('captcha_plugin', 'phpbb_captcha_gd');			}			else if (!isset($config['captcha_plugin']))			{				set_config('captcha_plugin', 'phpbb_captcha_nogd');			}			// Entries for the Feed Feature			set_config('feed_enable', '0');			set_config('feed_limit', '10');			set_config('feed_overall_forums', '1');			set_config('feed_overall_forums_limit', '15');			set_config('feed_overall_topics', '0');			set_config('feed_overall_topics_limit', '15');			set_config('feed_forum', '1');			set_config('feed_topic', '1');			set_config('feed_item_statistics', '1');			// Entries for smiley pagination			set_config('smilies_per_page', '50');			// Entry for reporting PMs			set_config('allow_pm_report', '1');			// Install modules			$modules_to_install = array(				'feed'					=> array(					'base'		=> 'board',					'class'		=> 'acp',					'title'		=> 'ACP_FEED_SETTINGS',					'auth'		=> 'acl_a_board',					'cat'		=> 'ACP_BOARD_CONFIGURATION',					'after'		=> array('signature', 'ACP_SIGNATURE_SETTINGS')				),				'warnings'				=> array(					'base'		=> 'users',					'class'		=> 'acp',					'title'		=> 'ACP_USER_WARNINGS',					'auth'		=> 'acl_a_user',					'display'	=> 0,					'cat'		=> 'ACP_CAT_USERS',					'after'		=> array('feedback', 'ACP_USER_FEEDBACK')				),				'send_statistics'		=> array(					'base'		=> 'send_statistics',					'class'		=> 'acp',					'title'		=> 'ACP_SEND_STATISTICS',					'auth'		=> 'acl_a_server',					'cat'		=> 'ACP_SERVER_CONFIGURATION'				),				'setting_forum_copy'	=> array(					'base'		=> 'permissions',					'class'		=> 'acp',					'title'		=> 'ACP_FORUM_PERMISSIONS_COPY',					'auth'		=> 'acl_a_fauth && acl_a_authusers && acl_a_authgroups && acl_a_mauth',					'cat'		=> 'ACP_FORUM_BASED_PERMISSIONS',					'after'		=> array('setting_forum_local', 'ACP_FORUM_PERMISSIONS')				),				'pm_reports'			=> array(					'base'		=> 'pm_reports',					'class'		=> 'mcp',					'title'		=> 'MCP_PM_REPORTS_OPEN',					'auth'		=> 'aclf_m_report',					'cat'		=> 'MCP_REPORTS'				),				'pm_reports_closed'		=> array(					'base'		=> 'pm_reports',					'class'		=> 'mcp',					'title'		=> 'MCP_PM_REPORTS_CLOSED',					'auth'		=> 'aclf_m_report',					'cat'		=> 'MCP_REPORTS'				),				'pm_report_details'		=> array(					'base'		=> 'pm_reports',					'class'		=> 'mcp',					'title'		=> 'MCP_PM_REPORT_DETAILS',					'auth'		=> 'aclf_m_report',					'cat'		=> 'MCP_REPORTS'				),			);			_add_modules($modules_to_install);			// Add newly_registered group... but check if it already exists (we always supported running the updater on any schema)			$sql = 'SELECT group_id				FROM ' . GROUPS_TABLE . "				WHERE group_name = 'NEWLY_REGISTERED'";			$result = $db->sql_query($sql);			$group_id = (int) $db->sql_fetchfield('group_id');			$db->sql_freeresult($result);			if (!$group_id)			{				$sql = 'INSERT INTO ' .  GROUPS_TABLE . " (group_name, group_type, group_founder_manage, group_colour, group_legend, group_avatar, group_desc, group_desc_uid, group_max_recipients) VALUES ('NEWLY_REGISTERED', 3, 0, '', 0, '', '', '', 5)";				_sql($sql, $errored, $error_ary);				$group_id = $db->sql_nextid();			}			// Insert new user role... at the end of the chain			$sql = 'SELECT role_id				FROM ' . ACL_ROLES_TABLE . "				WHERE role_name = 'ROLE_USER_NEW_MEMBER'					AND role_type = 'u_'";			$result = $db->sql_query($sql);			$u_role = (int) $db->sql_fetchfield('role_id');			$db->sql_freeresult($result);			if (!$u_role)			{				$sql = 'SELECT MAX(role_order) as max_order_id					FROM ' . ACL_ROLES_TABLE . "					WHERE role_type = 'u_'";				$result = $db->sql_query($sql);				$next_order_id = (int) $db->sql_fetchfield('max_order_id');				$db->sql_freeresult($result);				$next_order_id++;				$sql = 'INSERT INTO ' . ACL_ROLES_TABLE . " (role_name, role_description, role_type, role_order) VALUES ('ROLE_USER_NEW_MEMBER', 'ROLE_DESCRIPTION_USER_NEW_MEMBER', 'u_', $next_order_id)";				_sql($sql, $errored, $error_ary);				$u_role = $db->sql_nextid();				if (!$errored)				{					// Now add the correct data to the roles...					// The standard role says that new users are not able to send a PM, Mass PM, are not able to PM groups					$sql = 'INSERT INTO ' . ACL_ROLES_DATA_TABLE . " (role_id, auth_option_id, auth_setting) SELECT $u_role, auth_option_id, 0 FROM " . ACL_OPTIONS_TABLE . " WHERE auth_option LIKE 'u_%' AND auth_option IN ('u_sendpm', 'u_masspm', 'u_masspm_group')";					_sql($sql, $errored, $error_ary);					// Add user role to group					$sql = 'INSERT INTO ' . ACL_GROUPS_TABLE . " (group_id, forum_id, auth_option_id, auth_role_id, auth_setting) VALUES ($group_id, 0, 0, $u_role, 0)";					_sql($sql, $errored, $error_ary);				}			}			// Insert new forum role			$sql = 'SELECT role_id				FROM ' . ACL_ROLES_TABLE . "				WHERE role_name = 'ROLE_FORUM_NEW_MEMBER'					AND role_type = 'f_'";			$result = $db->sql_query($sql);			$f_role = (int) $db->sql_fetchfield('role_id');			$db->sql_freeresult($result);			if (!$f_role)			{				$sql = 'SELECT MAX(role_order) as max_order_id					FROM ' . ACL_ROLES_TABLE . "					WHERE role_type = 'f_'";				$result = $db->sql_query($sql);				$next_order_id = (int) $db->sql_fetchfield('max_order_id');				$db->sql_freeresult($result);				$next_order_id++;				$sql = 'INSERT INTO ' . ACL_ROLES_TABLE . " (role_name, role_description, role_type, role_order) VALUES  ('ROLE_FORUM_NEW_MEMBER', 'ROLE_DESCRIPTION_FORUM_NEW_MEMBER', 'f_', $next_order_id)";				_sql($sql, $errored, $error_ary);				$f_role = $db->sql_nextid();				if (!$errored)				{					$sql = 'INSERT INTO ' . ACL_ROLES_DATA_TABLE . " (role_id, auth_option_id, auth_setting) SELECT $f_role, auth_option_id, 0 FROM " . ACL_OPTIONS_TABLE . " WHERE auth_option LIKE 'f_%' AND auth_option IN ('f_noapprove')";					_sql($sql, $errored, $error_ary);				}			}			// Set every members user_new column to 0 (old users) only if there is no one yet (this makes sure we do not execute this more than once)			$sql = 'SELECT 1				FROM ' . USERS_TABLE . '				WHERE user_new = 0';			$result = $db->sql_query_limit($sql, 1);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);			if (!$row)			{				$sql = 'UPDATE ' . USERS_TABLE . ' SET user_new = 0';				_sql($sql, $errored, $error_ary);			}			// Newly registered users limit			if (!isset($config['new_member_post_limit']))			{				set_config('new_member_post_limit', (!empty($config['enable_queue_trigger'])) ? $config['queue_trigger_posts'] : 0);			}			if (!isset($config['new_member_group_default']))			{				set_config('new_member_group_default', 0);			}			// To mimick the old "feature" we will assign the forum role to every forum, regardless of the setting (this makes sure there are no "this does not work!!!! YUO!!!" posts...			// Check if the role is already assigned...			$sql = 'SELECT forum_id				FROM ' . ACL_GROUPS_TABLE . '				WHERE group_id = ' . $group_id . '					AND auth_role_id = ' . $f_role;			$result = $db->sql_query($sql);			$is_options = (int) $db->sql_fetchfield('forum_id');			$db->sql_freeresult($result);			// Not assigned at all... :/			if (!$is_options)			{				// Get postable forums				$sql = 'SELECT forum_id					FROM ' . FORUMS_TABLE . '					WHERE forum_type != ' . FORUM_LINK;				$result = $db->sql_query($sql);				while ($row = $db->sql_fetchrow($result))				{					_sql('INSERT INTO ' . ACL_GROUPS_TABLE . ' (group_id, forum_id, auth_option_id, auth_role_id, auth_setting) VALUES (' . $group_id . ', ' . (int) $row['forum_id'] . ', 0, ' . $f_role . ', 0)', $errored, $error_ary);				}				$db->sql_freeresult($result);			}			// Clear permissions...			include_once($phpbb_root_path . 'includes/acp/auth.' . $phpEx);			$auth_admin = new auth_admin();			$auth_admin->acl_clear_prefetch();			if (!isset($config['allow_avatar']))			{				if ($config['allow_avatar_upload'] || $config['allow_avatar_local'] || $config['allow_avatar_remote'])				{					set_config('allow_avatar', '1');				}				else				{					set_config('allow_avatar', '0');				}			}			if (!isset($config['allow_avatar_remote_upload']))			{				if ($config['allow_avatar_remote'] && $config['allow_avatar_upload'])				{					set_config('allow_avatar_remote_upload', '1');				}				else				{					set_config('allow_avatar_remote_upload', '0');				}			}			// Minimum number of characters			if (!isset($config['min_post_chars']))			{				set_config('min_post_chars', '1');			}			if (!isset($config['allow_quick_reply']))			{				set_config('allow_quick_reply', '1');			}			// Set every members user_options column to enable			// bbcode, smilies and URLs for signatures by default			$sql = 'SELECT user_options				FROM ' . USERS_TABLE . '				WHERE user_type IN (' . USER_NORMAL . ', ' . USER_FOUNDER . ')';			$result = $db->sql_query_limit($sql, 1);			$user_option = (int) $db->sql_fetchfield('user_options');			$db->sql_freeresult($result);			// Check if we already updated the database by checking bit 15 which we used to store the sig_bbcode option			if (!($user_option & 1 << 15))			{				// 229376 is the added value to enable all three signature options				$sql = 'UPDATE ' . USERS_TABLE . ' SET user_options = user_options + 229376';				_sql($sql, $errored, $error_ary);			}			if (!isset($config['delete_time']))			{				set_config('delete_time', $config['edit_time']);			}			$no_updates = false;		break;		// No changes from 3.0.6-RC1 to 3.0.6-RC2		case '3.0.6-RC1':		break;		// Changes from 3.0.6-RC2 to 3.0.6-RC3		case '3.0.6-RC2':			// Update the Custom Profile Fields based on previous settings to the new format			$sql = 'UPDATE ' . PROFILE_FIELDS_TABLE . '				SET field_show_on_vt = 1				WHERE field_hide = 0					AND (field_required = 1 OR field_show_on_reg = 1 OR field_show_profile = 1)';			_sql($sql, $errored, $error_ary);			$no_updates = false;		break;		// No changes from 3.0.6-RC3 to 3.0.6-RC4		case '3.0.6-RC3':		break;		// No changes from 3.0.6-RC4 to 3.0.6		case '3.0.6-RC4':		break;		// Changes from 3.0.6 to 3.0.7-RC1		case '3.0.6':			// ATOM Feeds			set_config('feed_overall', '1');			set_config('feed_http_auth', '0');			set_config('feed_limit_post', (string) (isset($config['feed_limit']) ? (int) $config['feed_limit'] : 15));			set_config('feed_limit_topic', (string) (isset($config['feed_overall_topics_limit']) ? (int) $config['feed_overall_topics_limit'] : 10));			set_config('feed_topics_new', (!empty($config['feed_overall_topics']) ? '1' : '0'));			set_config('feed_topics_active', (!empty($config['feed_overall_topics']) ? '1' : '0'));			// Delete all text-templates from the template_data			$sql = 'DELETE FROM ' . STYLES_TEMPLATE_DATA_TABLE . '				WHERE template_filename ' . $db->sql_like_expression($db->any_char . '.txt');			_sql($sql, $errored, $error_ary);			$no_updates = false;		break;		// Changes from 3.0.7-RC1 to 3.0.7-RC2		case '3.0.7-RC1':			$sql = 'SELECT user_id, user_email, user_email_hash				FROM ' . USERS_TABLE . '				WHERE user_type <> ' . USER_IGNORE . "					AND user_email <> ''";			$result = $db->sql_query($sql);			$i = 0;			while ($row = $db->sql_fetchrow($result))			{				// Snapshot of the phpbb_email_hash() function				// We cannot call it directly because the auto updater updates the DB first. :/				$user_email_hash = sprintf('%u', crc32(strtolower($row['user_email']))) . strlen($row['user_email']);				if ($user_email_hash != $row['user_email_hash'])				{					$sql_ary = array(						'user_email_hash'	=> $user_email_hash,					);					$sql = 'UPDATE ' . USERS_TABLE . '						SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '						WHERE user_id = ' . (int) $row['user_id'];					_sql($sql, $errored, $error_ary, ($i % 100 == 0));					++$i;				}			}			$db->sql_freeresult($result);			$no_updates = false;		break;		// No changes from 3.0.7-RC2 to 3.0.7		case '3.0.7-RC2':		break;		// No changes from 3.0.7 to 3.0.7-PL1		case '3.0.7':		break;		// Changes from 3.0.7-PL1 to 3.0.8-RC1		case '3.0.7-PL1':			// Update file extension group names to use language strings.			$sql = 'SELECT lang_dir				FROM ' . LANG_TABLE;			$result = $db->sql_query($sql);			$extension_groups_updated = array();			while ($lang_dir = $db->sql_fetchfield('lang_dir'))			{				$lang_dir = basename($lang_dir);				// The language strings we need are either in language/.../acp/attachments.php				// in the update package if we're updating to 3.0.8-RC1 or later,				// or they are in language/.../install.php when we're updating from 3.0.7-PL1 or earlier.				// On an already updated board, they can also already be in language/.../acp/attachments.php				// in the board root.				$lang_files = array(					"{$phpbb_root_path}install/update/new/language/$lang_dir/acp/attachments.$phpEx",					"{$phpbb_root_path}language/$lang_dir/install.$phpEx",					"{$phpbb_root_path}language/$lang_dir/acp/attachments.$phpEx",				);				foreach ($lang_files as $lang_file)				{					if (!file_exists($lang_file))					{						continue;					}					$lang = array();					include($lang_file);					foreach($lang as $lang_key => $lang_val)					{						if (isset($extension_groups_updated[$lang_key]) || strpos($lang_key, 'EXT_GROUP_') !== 0)						{							continue;						}						$sql_ary = array(							'group_name'	=> substr($lang_key, 10), // Strip off 'EXT_GROUP_'						);						$sql = 'UPDATE ' . EXTENSION_GROUPS_TABLE . '							SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "							WHERE group_name = '" . $db->sql_escape($lang_val) . "'";						_sql($sql, $errored, $error_ary);						$extension_groups_updated[$lang_key] = true;					}				}			}			$db->sql_freeresult($result);			// Install modules			$modules_to_install = array(				'post'					=> array(					'base'		=> 'board',					'class'		=> 'acp',					'title'		=> 'ACP_POST_SETTINGS',					'auth'		=> 'acl_a_board',					'cat'		=> 'ACP_MESSAGES',					'after'		=> array('message', 'ACP_MESSAGE_SETTINGS')				),			);			_add_modules($modules_to_install);			// update			$sql = 'UPDATE ' . MODULES_TABLE . '				SET module_auth = \'cfg_allow_avatar && (cfg_allow_avatar_local || cfg_allow_avatar_remote || cfg_allow_avatar_upload || cfg_allow_avatar_remote_upload)\'				WHERE module_class = \'ucp\'					AND module_basename = \'profile\'					AND module_mode = \'avatar\'';			_sql($sql, $errored, $error_ary);			// add Bing Bot			$bot_name = 'Bing [Bot]';			$bot_name_clean = utf8_clean_string($bot_name);			$sql = 'SELECT user_id				FROM ' . USERS_TABLE . "				WHERE username_clean = '" . $db->sql_escape($bot_name_clean) . "'";			$result = $db->sql_query($sql);			$bing_already_added = (bool) $db->sql_fetchfield('user_id');			$db->sql_freeresult($result);			if (!$bing_already_added)			{				$bot_agent = 'bingbot/';				$bot_ip = '';				$sql = 'SELECT group_id, group_colour					FROM ' . GROUPS_TABLE . "					WHERE group_name = 'BOTS'";				$result = $db->sql_query($sql);				$group_row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if (!$group_row)				{					// default fallback, should never get here					$group_row['group_id'] = 6;					$group_row['group_colour'] = '9E8DA7';				}				if (!function_exists('user_add'))				{					include($phpbb_root_path . 'includes/functions_user.' . $phpEx);				}				$user_row = array(					'user_type'				=> USER_IGNORE,					'group_id'				=> $group_row['group_id'],					'username'				=> $bot_name,					'user_regdate'			=> time(),					'user_password'			=> '',					'user_colour'			=> $group_row['group_colour'],					'user_email'			=> '',					'user_lang'				=> $config['default_lang'],					'user_style'			=> $config['default_style'],					'user_timezone'			=> 0,					'user_dateformat'		=> $config['default_dateformat'],					'user_allow_massemail'	=> 0,				);				$user_id = user_add($user_row);				$sql = 'INSERT INTO ' . BOTS_TABLE . ' ' . $db->sql_build_array('INSERT', array(					'bot_active'	=> 1,					'bot_name'		=> (string) $bot_name,					'user_id'		=> (int) $user_id,					'bot_agent'		=> (string) $bot_agent,					'bot_ip'		=> (string) $bot_ip,				));				_sql($sql, $errored, $error_ary);			}			// end Bing Bot addition			// Delete shadow topics pointing to not existing topics			$batch_size = 500;			// Set of affected forums we have to resync			$sync_forum_ids = array();			do			{				$sql_array = array(					'SELECT'	=> 't1.topic_id, t1.forum_id',					'FROM'		=> array(						TOPICS_TABLE	=> 't1',					),					'LEFT_JOIN'	=> array(						array(							'FROM'	=> array(TOPICS_TABLE	=> 't2'),							'ON'	=> 't1.topic_moved_id = t2.topic_id',						),					),					'WHERE'		=> 't1.topic_moved_id <> 0								AND t2.topic_id IS NULL',				);				$sql = $db->sql_build_query('SELECT', $sql_array);				$result = $db->sql_query_limit($sql, $batch_size);				$topic_ids = array();				while ($row = $db->sql_fetchrow($result))				{					$topic_ids[] = (int) $row['topic_id'];					$sync_forum_ids[(int) $row['forum_id']] = (int) $row['forum_id'];				}				$db->sql_freeresult($result);				if (!empty($topic_ids))				{					$sql = 'DELETE FROM ' . TOPICS_TABLE . '						WHERE ' . $db->sql_in_set('topic_id', $topic_ids);					$db->sql_query($sql);				}			}			while (sizeof($topic_ids) == $batch_size);			// Sync the forums we have deleted shadow topics from.			sync('forum', 'forum_id', $sync_forum_ids, true, true);			// Unread posts search load switch			set_config('load_unreads_search', '1');			// Reduce queue interval to 60 seconds, email package size to 20			if ($config['queue_interval'] == 600)			{				set_config('queue_interval', '60');			}			if ($config['email_package_size'] == 50)			{				set_config('email_package_size', '20');			}			$no_updates = false;		break;		// No changes from 3.0.8-RC1 to 3.0.8		case '3.0.8-RC1':		break;		// Changes from 3.0.8 to 3.0.9-RC1		case '3.0.8':			set_config('ip_login_limit_max', '50');			set_config('ip_login_limit_time', '21600');			set_config('ip_login_limit_use_forwarded', '0');			// Update file extension group names to use language strings, again.			$sql = 'SELECT group_id, group_name				FROM ' . EXTENSION_GROUPS_TABLE . '				WHERE group_name ' . $db->sql_like_expression('EXT_GROUP_' . $db->any_char);			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$sql_ary = array(					'group_name'	=> substr($row['group_name'], 10), // Strip off 'EXT_GROUP_'				);				$sql = 'UPDATE ' . EXTENSION_GROUPS_TABLE . '					SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '					WHERE group_id = ' . $row['group_id'];				_sql($sql, $errored, $error_ary);			}			$db->sql_freeresult($result);			global $db_tools, $table_prefix;			// Recover from potentially broken Q&A CAPTCHA table on firebird			// Q&A CAPTCHA was uninstallable, so it's safe to remove these			// without data loss			if ($db_tools->sql_layer == 'firebird')			{				$tables = array(					$table_prefix . 'captcha_questions',					$table_prefix . 'captcha_answers',					$table_prefix . 'qa_confirm',				);				foreach ($tables as $table)				{					if ($db_tools->sql_table_exists($table))					{						$db_tools->sql_table_drop($table);					}				}			}			$no_updates = false;		break;		// No changes from 3.0.9-RC1 to 3.0.9-RC2		case '3.0.9-RC1':		break;		// No changes from 3.0.9-RC2 to 3.0.9-RC3		case '3.0.9-RC2':		break;		// No changes from 3.0.9-RC3 to 3.0.9-RC4		case '3.0.9-RC3':		break;		// No changes from 3.0.9-RC4 to 3.0.9		case '3.0.9-RC4':		break;		// Changes from 3.0.9 to 3.0.10-RC1		case '3.0.9':			if (!isset($config['email_max_chunk_size']))			{				set_config('email_max_chunk_size', '50');			}			$no_updates = false;		break;		// No changes from 3.0.10-RC1 to 3.0.10-RC2		case '3.0.10-RC1':		break;		// No changes from 3.0.10-RC2 to 3.0.10-RC3		case '3.0.10-RC2':		break;		// No changes from 3.0.10-RC3 to 3.0.10		case '3.0.10-RC3':		break;	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2006 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License** This file creates new schema files for every database.* The filenames will be prefixed with an underscore to not overwrite the current schema files.** If you overwrite the original schema files please make sure you save the file with UNIX linefeeds.*/$schema_path = dirname(__FILE__) . '/../install/schemas/';if (!is_writable($schema_path)){	die('Schema path not writable');}$schema_data = get_schema_struct();$dbms_type_map = array(	'mysql_41'	=> array(		'INT:'		=> 'int(%d)',		'BINT'		=> 'bigint(20)',		'UINT'		=> 'mediumint(8) UNSIGNED',		'UINT:'		=> 'int(%d) UNSIGNED',		'TINT:'		=> 'tinyint(%d)',		'USINT'		=> 'smallint(4) UNSIGNED',		'BOOL'		=> 'tinyint(1) UNSIGNED',		'VCHAR'		=> 'varchar(255)',		'VCHAR:'	=> 'varchar(%d)',		'CHAR:'		=> 'char(%d)',		'XSTEXT'	=> 'text',		'XSTEXT_UNI'=> 'varchar(100)',		'STEXT'		=> 'text',		'STEXT_UNI'	=> 'varchar(255)',		'TEXT'		=> 'text',		'TEXT_UNI'	=> 'text',		'MTEXT'		=> 'mediumtext',		'MTEXT_UNI'	=> 'mediumtext',		'TIMESTAMP'	=> 'int(11) UNSIGNED',		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'varchar(255)',		'VCHAR_UNI:'=> 'varchar(%d)',		'VCHAR_CI'	=> 'varchar(255)',		'VARBINARY'	=> 'varbinary(255)',	),	'mysql_40'	=> array(		'INT:'		=> 'int(%d)',		'BINT'		=> 'bigint(20)',		'UINT'		=> 'mediumint(8) UNSIGNED',		'UINT:'		=> 'int(%d) UNSIGNED',		'TINT:'		=> 'tinyint(%d)',		'USINT'		=> 'smallint(4) UNSIGNED',		'BOOL'		=> 'tinyint(1) UNSIGNED',		'VCHAR'		=> 'varbinary(255)',		'VCHAR:'	=> 'varbinary(%d)',		'CHAR:'		=> 'binary(%d)',		'XSTEXT'	=> 'blob',		'XSTEXT_UNI'=> 'blob',		'STEXT'		=> 'blob',		'STEXT_UNI'	=> 'blob',		'TEXT'		=> 'blob',		'TEXT_UNI'	=> 'blob',		'MTEXT'		=> 'mediumblob',		'MTEXT_UNI'	=> 'mediumblob',		'TIMESTAMP'	=> 'int(11) UNSIGNED',		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'blob',		'VCHAR_UNI:'=> array('varbinary(%d)', 'limit' => array('mult', 3, 255, 'blob')),		'VCHAR_CI'	=> 'blob',		'VARBINARY'	=> 'varbinary(255)',	),	'firebird'	=> array(		'INT:'		=> 'INTEGER',		'BINT'		=> 'DOUBLE PRECISION',		'UINT'		=> 'INTEGER',		'UINT:'		=> 'INTEGER',		'TINT:'		=> 'INTEGER',		'USINT'		=> 'INTEGER',		'BOOL'		=> 'INTEGER',		'VCHAR'		=> 'VARCHAR(255) CHARACTER SET NONE',		'VCHAR:'	=> 'VARCHAR(%d) CHARACTER SET NONE',		'CHAR:'		=> 'CHAR(%d) CHARACTER SET NONE',		'XSTEXT'	=> 'BLOB SUB_TYPE TEXT CHARACTER SET NONE',		'STEXT'		=> 'BLOB SUB_TYPE TEXT CHARACTER SET NONE',		'TEXT'		=> 'BLOB SUB_TYPE TEXT CHARACTER SET NONE',		'MTEXT'		=> 'BLOB SUB_TYPE TEXT CHARACTER SET NONE',		'XSTEXT_UNI'=> 'VARCHAR(100) CHARACTER SET UTF8',		'STEXT_UNI'	=> 'VARCHAR(255) CHARACTER SET UTF8',		'TEXT_UNI'	=> 'BLOB SUB_TYPE TEXT CHARACTER SET UTF8',		'MTEXT_UNI'	=> 'BLOB SUB_TYPE TEXT CHARACTER SET UTF8',		'TIMESTAMP'	=> 'INTEGER',		'DECIMAL'	=> 'DOUBLE PRECISION',		'DECIMAL:'	=> 'DOUBLE PRECISION',		'PDECIMAL'	=> 'DOUBLE PRECISION',		'PDECIMAL:'	=> 'DOUBLE PRECISION',		'VCHAR_UNI'	=> 'VARCHAR(255) CHARACTER SET UTF8',		'VCHAR_UNI:'=> 'VARCHAR(%d) CHARACTER SET UTF8',		'VCHAR_CI'	=> 'VARCHAR(255) CHARACTER SET UTF8',		'VARBINARY'	=> 'CHAR(255) CHARACTER SET NONE',	),	'mssql'		=> array(		'INT:'		=> '[int]',		'BINT'		=> '[float]',		'UINT'		=> '[int]',		'UINT:'		=> '[int]',		'TINT:'		=> '[int]',		'USINT'		=> '[int]',		'BOOL'		=> '[int]',		'VCHAR'		=> '[varchar] (255)',		'VCHAR:'	=> '[varchar] (%d)',		'CHAR:'		=> '[char] (%d)',		'XSTEXT'	=> '[varchar] (1000)',		'STEXT'		=> '[varchar] (3000)',		'TEXT'		=> '[varchar] (8000)',		'MTEXT'		=> '[text]',		'XSTEXT_UNI'=> '[varchar] (100)',		'STEXT_UNI'	=> '[varchar] (255)',		'TEXT_UNI'	=> '[varchar] (4000)',		'MTEXT_UNI'	=> '[text]',		'TIMESTAMP'	=> '[int]',		'DECIMAL'	=> '[float]',		'DECIMAL:'	=> '[float]',		'PDECIMAL'	=> '[float]',		'PDECIMAL:'	=> '[float]',		'VCHAR_UNI'	=> '[varchar] (255)',		'VCHAR_UNI:'=> '[varchar] (%d)',		'VCHAR_CI'	=> '[varchar] (255)',		'VARBINARY'	=> '[varchar] (255)',	),	'oracle'	=> array(		'INT:'		=> 'number(%d)',		'BINT'		=> 'number(20)',		'UINT'		=> 'number(8)',		'UINT:'		=> 'number(%d)',		'TINT:'		=> 'number(%d)',		'USINT'		=> 'number(4)',		'BOOL'		=> 'number(1)',		'VCHAR'		=> 'varchar2(255)',		'VCHAR:'	=> 'varchar2(%d)',		'CHAR:'		=> 'char(%d)',		'XSTEXT'	=> 'varchar2(1000)',		'STEXT'		=> 'varchar2(3000)',		'TEXT'		=> 'clob',		'MTEXT'		=> 'clob',		'XSTEXT_UNI'=> 'varchar2(300)',		'STEXT_UNI'	=> 'varchar2(765)',		'TEXT_UNI'	=> 'clob',		'MTEXT_UNI'	=> 'clob',		'TIMESTAMP'	=> 'number(11)',		'DECIMAL'	=> 'number(5, 2)',		'DECIMAL:'	=> 'number(%d, 2)',		'PDECIMAL'	=> 'number(6, 3)',		'PDECIMAL:'	=> 'number(%d, 3)',		'VCHAR_UNI'	=> 'varchar2(765)',		'VCHAR_UNI:'=> array('varchar2(%d)', 'limit' => array('mult', 3, 765, 'clob')),		'VCHAR_CI'	=> 'varchar2(255)',		'VARBINARY'	=> 'raw(255)',	),	'sqlite'	=> array(		'INT:'		=> 'int(%d)',		'BINT'		=> 'bigint(20)',		'UINT'		=> 'INTEGER UNSIGNED', //'mediumint(8) UNSIGNED',		'UINT:'		=> 'INTEGER UNSIGNED', // 'int(%d) UNSIGNED',		'TINT:'		=> 'tinyint(%d)',		'USINT'		=> 'INTEGER UNSIGNED', //'mediumint(4) UNSIGNED',		'BOOL'		=> 'INTEGER UNSIGNED', //'tinyint(1) UNSIGNED',		'VCHAR'		=> 'varchar(255)',		'VCHAR:'	=> 'varchar(%d)',		'CHAR:'		=> 'char(%d)',		'XSTEXT'	=> 'text(65535)',		'STEXT'		=> 'text(65535)',		'TEXT'		=> 'text(65535)',		'MTEXT'		=> 'mediumtext(16777215)',		'XSTEXT_UNI'=> 'text(65535)',		'STEXT_UNI'	=> 'text(65535)',		'TEXT_UNI'	=> 'text(65535)',		'MTEXT_UNI'	=> 'mediumtext(16777215)',		'TIMESTAMP'	=> 'INTEGER UNSIGNED', //'int(11) UNSIGNED',		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'varchar(255)',		'VCHAR_UNI:'=> 'varchar(%d)',		'VCHAR_CI'	=> 'varchar(255)',		'VARBINARY'	=> 'blob',	),	'postgres'	=> array(		'INT:'		=> 'INT4',		'BINT'		=> 'INT8',		'UINT'		=> 'INT4', // unsigned		'UINT:'		=> 'INT4', // unsigned		'USINT'		=> 'INT2', // unsigned		'BOOL'		=> 'INT2', // unsigned		'TINT:'		=> 'INT2',		'VCHAR'		=> 'varchar(255)',		'VCHAR:'	=> 'varchar(%d)',		'CHAR:'		=> 'char(%d)',		'XSTEXT'	=> 'varchar(1000)',		'STEXT'		=> 'varchar(3000)',		'TEXT'		=> 'varchar(8000)',		'MTEXT'		=> 'TEXT',		'XSTEXT_UNI'=> 'varchar(100)',		'STEXT_UNI'	=> 'varchar(255)',		'TEXT_UNI'	=> 'varchar(4000)',		'MTEXT_UNI'	=> 'TEXT',		'TIMESTAMP'	=> 'INT4', // unsigned		'DECIMAL'	=> 'decimal(5,2)',		'DECIMAL:'	=> 'decimal(%d,2)',		'PDECIMAL'	=> 'decimal(6,3)',		'PDECIMAL:'	=> 'decimal(%d,3)',		'VCHAR_UNI'	=> 'varchar(255)',		'VCHAR_UNI:'=> 'varchar(%d)',		'VCHAR_CI'	=> 'varchar_ci',		'VARBINARY'	=> 'bytea',	),);// A list of types being unsigned for better reference in some db's$unsigned_types = array('UINT', 'UINT:', 'USINT', 'BOOL', 'TIMESTAMP');$supported_dbms = array('firebird', 'mssql', 'mysql_40', 'mysql_41', 'oracle', 'postgres', 'sqlite');foreach ($supported_dbms as $dbms){	$fp = fopen($schema_path . $dbms . '_schema.sql', 'wt');	$line = '';	// Write Header	switch ($dbms)	{		case 'mysql_40':		case 'mysql_41':		case 'firebird':		case 'sqlite':			fwrite($fp, "# DO NOT EDIT THIS FILE, IT IS GENERATED\n");			fwrite($fp, "#\n");			fwrite($fp, "# To change the contents of this file, edit\n");			fwrite($fp, "# phpBB/develop/create_schema_files.php and\n");			fwrite($fp, "# run it.\n");		break;		case 'mssql':		case 'oracle':		case 'postgres':			fwrite($fp, "/*\n");			fwrite($fp, " * DO NOT EDIT THIS FILE, IT IS GENERATED\n");			fwrite($fp, " *\n");			fwrite($fp, " * To change the contents of this file, edit\n");			fwrite($fp, " * phpBB/develop/create_schema_files.php and\n");			fwrite($fp, " * run it.\n");			fwrite($fp, " */\n\n");		break;	}	switch ($dbms)	{		case 'firebird':			$line .= custom_data('firebird') . "\n";		break;		case 'sqlite':			$line .= "BEGIN TRANSACTION;\n\n";		break;		case 'oracle':			$line .= custom_data('oracle') . "\n";		break;		case 'postgres':			$line .= "BEGIN;\n\n";			$line .= custom_data('postgres') . "\n";		break;	}	fwrite($fp, $line);	foreach ($schema_data as $table_name => $table_data)	{		// Write comment about table		switch ($dbms)		{			case 'mysql_40':			case 'mysql_41':			case 'firebird':			case 'sqlite':				fwrite($fp, "# Table: '{$table_name}'\n");			break;			case 'mssql':			case 'oracle':			case 'postgres':				fwrite($fp, "/*\n\tTable: '{$table_name}'\n*/\n");			break;		}		// Create Table statement		$generator = $textimage = false;		$line = '';		switch ($dbms)		{			case 'mysql_40':			case 'mysql_41':			case 'firebird':			case 'oracle':			case 'sqlite':			case 'postgres':				$line = "CREATE TABLE {$table_name} (\n";			break;			case 'mssql':				$line = "CREATE TABLE [{$table_name}] (\n";			break;		}		// Table specific so we don't get overlap		$modded_array = array();		// Write columns one by one...		foreach ($table_data['COLUMNS'] as $column_name => $column_data)		{			if (strlen($column_name) > 30)			{				trigger_error("Column name '$column_name' on table '$table_name' is too long. The maximum is 30 characters.", E_USER_ERROR);			}			if (isset($column_data[2]) && $column_data[2] == 'auto_increment' && strlen($column_name) > 26) // "${column_name}_gen"			{				trigger_error("Index name '${column_name}_gen' on table '$table_name' is too long. The maximum is 30 characters.", E_USER_ERROR);			}			// Get type			if (strpos($column_data[0], ':') !== false)			{				list($orig_column_type, $column_length) = explode(':', $column_data[0]);				if (!is_array($dbms_type_map[$dbms][$orig_column_type . ':']))				{					$column_type = sprintf($dbms_type_map[$dbms][$orig_column_type . ':'], $column_length);				}				else				{					if (isset($dbms_type_map[$dbms][$orig_column_type . ':']['rule']))					{						switch ($dbms_type_map[$dbms][$orig_column_type . ':']['rule'][0])						{							case 'div':								$column_length /= $dbms_type_map[$dbms][$orig_column_type . ':']['rule'][1];								$column_length = ceil($column_length);								$column_type = sprintf($dbms_type_map[$dbms][$orig_column_type . ':'][0], $column_length);							break;						}					}					if (isset($dbms_type_map[$dbms][$orig_column_type . ':']['limit']))					{						switch ($dbms_type_map[$dbms][$orig_column_type . ':']['limit'][0])						{							case 'mult':								$column_length *= $dbms_type_map[$dbms][$orig_column_type . ':']['limit'][1];								if ($column_length > $dbms_type_map[$dbms][$orig_column_type . ':']['limit'][2])								{									$column_type = $dbms_type_map[$dbms][$orig_column_type . ':']['limit'][3];									$modded_array[$column_name] = $column_type;								}								else								{									$column_type = sprintf($dbms_type_map[$dbms][$orig_column_type . ':'][0], $column_length);								}							break;						}					}				}				$orig_column_type .= ':';			}			else			{				$orig_column_type = $column_data[0];				$column_type = $dbms_type_map[$dbms][$column_data[0]];				if ($column_type == 'text' || $column_type == 'blob')				{					$modded_array[$column_name] = $column_type;				}			}			// Adjust default value if db-dependant specified			if (is_array($column_data[1]))			{				$column_data[1] = (isset($column_data[1][$dbms])) ? $column_data[1][$dbms] : $column_data[1]['default'];			}			switch ($dbms)			{				case 'mysql_40':				case 'mysql_41':					$line .= "\t{$column_name} {$column_type} ";					// For hexadecimal values do not use single quotes					if (!is_null($column_data[1]) && substr($column_type, -4) !== 'text' && substr($column_type, -4) !== 'blob')					{						$line .= (strpos($column_data[1], '0x') === 0) ? "DEFAULT {$column_data[1]} " : "DEFAULT '{$column_data[1]}' ";					}					$line .= 'NOT NULL';					if (isset($column_data[2]))					{						if ($column_data[2] == 'auto_increment')						{							$line .= ' auto_increment';						}						else if ($dbms === 'mysql_41' && $column_data[2] == 'true_sort')						{							$line .= ' COLLATE utf8_unicode_ci';						}					}					$line .= ",\n";				break;				case 'sqlite':					if (isset($column_data[2]) && $column_data[2] == 'auto_increment')					{						$line .= "\t{$column_name} INTEGER PRIMARY KEY ";						$generator = $column_name;					}					else					{						$line .= "\t{$column_name} {$column_type} ";					}					$line .= 'NOT NULL ';					$line .= (!is_null($column_data[1])) ? "DEFAULT '{$column_data[1]}'" : '';					$line .= ",\n";				break;				case 'firebird':					$line .= "\t{$column_name} {$column_type} ";					if (!is_null($column_data[1]))					{						$line .= 'DEFAULT ' . ((is_numeric($column_data[1])) ? $column_data[1] : "'{$column_data[1]}'") . ' ';					}					$line .= 'NOT NULL';					// This is a UNICODE column and thus should be given it's fair share					if (preg_match('/^X?STEXT_UNI|VCHAR_(CI|UNI:?)/', $column_data[0]))					{						$line .= ' COLLATE UNICODE';					}					$line .= ",\n";					if (isset($column_data[2]) && $column_data[2] == 'auto_increment')					{						$generator = $column_name;					}				break;				case 'mssql':					if ($column_type == '[text]')					{						$textimage = true;					}					$line .= "\t[{$column_name}] {$column_type} ";					if (!is_null($column_data[1]))					{						// For hexadecimal values do not use single quotes						if (strpos($column_data[1], '0x') === 0)						{							$line .= 'DEFAULT (' . $column_data[1] . ') ';						}						else						{							$line .= 'DEFAULT (' . ((is_numeric($column_data[1])) ? $column_data[1] : "'{$column_data[1]}'") . ') ';						}					}					if (isset($column_data[2]) && $column_data[2] == 'auto_increment')					{						$line .= 'IDENTITY (1, 1) ';					}					$line .= 'NOT NULL';					$line .= " ,\n";				break;				case 'oracle':					$line .= "\t{$column_name} {$column_type} ";					$line .= (!is_null($column_data[1])) ? "DEFAULT '{$column_data[1]}' " : '';					// In Oracle empty strings ('') are treated as NULL.					// Therefore in oracle we allow NULL's for all DEFAULT '' entries					$line .= ($column_data[1] === '') ? ",\n" : "NOT NULL,\n";					if (isset($column_data[2]) && $column_data[2] == 'auto_increment')					{						$generator = $column_name;					}				break;				case 'postgres':					$line .= "\t{$column_name} {$column_type} ";					if (isset($column_data[2]) && $column_data[2] == 'auto_increment')					{						$line .= "DEFAULT nextval('{$table_name}_seq'),\n";						// Make sure the sequence will be created before creating the table						$line = "CREATE SEQUENCE {$table_name}_seq;\n\n" . $line;					}					else					{						$line .= (!is_null($column_data[1])) ? "DEFAULT '{$column_data[1]}' " : '';						$line .= "NOT NULL";						// Unsigned? Then add a CHECK contraint						if (in_array($orig_column_type, $unsigned_types))						{							$line .= " CHECK ({$column_name} >= 0)";						}						$line .= ",\n";					}				break;			}		}		switch ($dbms)		{			case 'firebird':				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n);;\n\n";			break;			case 'mssql':				$line = substr($line, 0, -2);				$line .= "\n) ON [PRIMARY]" . (($textimage) ? ' TEXTIMAGE_ON [PRIMARY]' : '') . "\n";				$line .= "GO\n\n";			break;		}		// Write primary key		if (isset($table_data['PRIMARY_KEY']))		{			if (!is_array($table_data['PRIMARY_KEY']))			{				$table_data['PRIMARY_KEY'] = array($table_data['PRIMARY_KEY']);			}			switch ($dbms)			{				case 'mysql_40':				case 'mysql_41':				case 'postgres':					$line .= "\tPRIMARY KEY (" . implode(', ', $table_data['PRIMARY_KEY']) . "),\n";				break;				case 'firebird':					$line .= "ALTER TABLE {$table_name} ADD PRIMARY KEY (" . implode(', ', $table_data['PRIMARY_KEY']) . ");;\n\n";				break;				case 'sqlite':					if ($generator === false || !in_array($generator, $table_data['PRIMARY_KEY']))					{						$line .= "\tPRIMARY KEY (" . implode(', ', $table_data['PRIMARY_KEY']) . "),\n";					}				break;				case 'mssql':					$line .= "ALTER TABLE [{$table_name}] WITH NOCHECK ADD \n";					$line .= "\tCONSTRAINT [PK_{$table_name}] PRIMARY KEY  CLUSTERED \n";					$line .= "\t(\n";					$line .= "\t\t[" . implode("],\n\t\t[", $table_data['PRIMARY_KEY']) . "]\n";					$line .= "\t)  ON [PRIMARY] \n";					$line .= "GO\n\n";				break;				case 'oracle':					$line .= "\tCONSTRAINT pk_{$table_name} PRIMARY KEY (" . implode(', ', $table_data['PRIMARY_KEY']) . "),\n";				break;			}		}		switch ($dbms)		{			case 'oracle':				// UNIQUE contrains to be added?				if (isset($table_data['KEYS']))				{					foreach ($table_data['KEYS'] as $key_name => $key_data)					{						if (!is_array($key_data[1]))						{							$key_data[1] = array($key_data[1]);						}						if ($key_data[0] == 'UNIQUE')						{							$line .= "\tCONSTRAINT u_phpbb_{$key_name} UNIQUE (" . implode(', ', $key_data[1]) . "),\n";						}					}				}				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n)\n/\n\n";			break;			case 'postgres':				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n);\n\n";			break;			case 'sqlite':				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n);\n\n";			break;		}		// Write Keys		if (isset($table_data['KEYS']))		{			foreach ($table_data['KEYS'] as $key_name => $key_data)			{				if (!is_array($key_data[1]))				{					$key_data[1] = array($key_data[1]);				}				if (strlen($table_name . $key_name) > 30)				{					trigger_error("Index name '${table_name}_$key_name' on table '$table_name' is too long. The maximum is 30 characters.", E_USER_ERROR);				}				switch ($dbms)				{					case 'mysql_40':					case 'mysql_41':						$line .= ($key_data[0] == 'INDEX') ? "\tKEY" : '';						$line .= ($key_data[0] == 'UNIQUE') ? "\tUNIQUE" : '';						foreach ($key_data[1] as $key => $col_name)						{							if (isset($modded_array[$col_name]))							{								switch ($modded_array[$col_name])								{									case 'text':									case 'blob':										$key_data[1][$key] = $col_name . '(255)';									break;								}							}						}						$line .= ' ' . $key_name . ' (' . implode(', ', $key_data[1]) . "),\n";					break;					case 'firebird':						$line .= ($key_data[0] == 'INDEX') ? 'CREATE INDEX' : '';						$line .= ($key_data[0] == 'UNIQUE') ? 'CREATE UNIQUE INDEX' : '';						$line .= ' ' . $table_name . '_' . $key_name . ' ON ' . $table_name . '(' . implode(', ', $key_data[1]) . ");;\n";					break;					case 'mssql':						$line .= ($key_data[0] == 'INDEX') ? 'CREATE  INDEX' : '';						$line .= ($key_data[0] == 'UNIQUE') ? 'CREATE  UNIQUE  INDEX' : '';						$line .= " [{$key_name}] ON [{$table_name}]([" . implode('], [', $key_data[1]) . "]) ON [PRIMARY]\n";						$line .= "GO\n\n";					break;					case 'oracle':						if ($key_data[0] == 'UNIQUE')						{							continue;						}						$line .= ($key_data[0] == 'INDEX') ? 'CREATE INDEX' : '';						$line .= " {$table_name}_{$key_name} ON {$table_name} (" . implode(', ', $key_data[1]) . ")\n";						$line .= "/\n";					break;					case 'sqlite':						$line .= ($key_data[0] == 'INDEX') ? 'CREATE INDEX' : '';						$line .= ($key_data[0] == 'UNIQUE') ? 'CREATE UNIQUE INDEX' : '';						$line .= " {$table_name}_{$key_name} ON {$table_name} (" . implode(', ', $key_data[1]) . ");\n";					break;					case 'postgres':						$line .= ($key_data[0] == 'INDEX') ? 'CREATE INDEX' : '';						$line .= ($key_data[0] == 'UNIQUE') ? 'CREATE UNIQUE INDEX' : '';						$line .= " {$table_name}_{$key_name} ON {$table_name} (" . implode(', ', $key_data[1]) . ");\n";					break;				}			}		}		switch ($dbms)		{			case 'mysql_40':				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n);\n\n";			break;			case 'mysql_41':				// Remove last line delimiter...				$line = substr($line, 0, -2);				$line .= "\n) CHARACTER SET `utf8` COLLATE `utf8_bin`;\n\n";			break;			// Create Generator			case 'firebird':				if ($generator !== false)				{					$line .= "\nCREATE GENERATOR {$table_name}_gen;;\n";					$line .= 'SET GENERATOR ' . $table_name . "_gen TO 0;;\n\n";					$line .= 'CREATE TRIGGER t_' . $table_name . ' FOR ' . $table_name . "\n";					$line .= "BEFORE INSERT\nAS\nBEGIN\n";					$line .= "\tNEW.{$generator} = GEN_ID({$table_name}_gen, 1);\nEND;;\n\n";				}			break;			case 'oracle':				if ($generator !== false)				{					$line .= "\nCREATE SEQUENCE {$table_name}_seq\n/\n\n";					$line .= "CREATE OR REPLACE TRIGGER t_{$table_name}\n";					$line .= "BEFORE INSERT ON {$table_name}\n";					$line .= "FOR EACH ROW WHEN (\n";					$line .= "\tnew.{$generator} IS NULL OR new.{$generator} = 0\n";					$line .= ")\nBEGIN\n";					$line .= "\tSELECT {$table_name}_seq.nextval\n";					$line .= "\tINTO :new.{$generator}\n";					$line .= "\tFROM dual;\nEND;\n/\n\n";				}			break;		}		fwrite($fp, $line . "\n");	}	$line = '';	// Write custom function at the end for some db's	switch ($dbms)	{		case 'mssql':			// No need to do this, no transaction support for schema changes			//$line = "\nCOMMIT\nGO\n\n";		break;		case 'sqlite':			$line = "\nCOMMIT;";		break;		case 'postgres':			$line = "\nCOMMIT;";		break;	}	fwrite($fp, $line);	fclose($fp);}/*** Define the basic structure* The format:*		array('{TABLE_NAME}' => {TABLE_DATA})*		{TABLE_DATA}:*			COLUMNS = array({column_name} = array({column_type}, {default}, {auto_increment}))*			PRIMARY_KEY = {column_name(s)}*			KEYS = array({key_name} = array({key_type}, {column_name(s)})),**	Column Types:*	INT:x		=> SIGNED int(x)*	BINT		=> BIGINT*	UINT		=> mediumint(8) UNSIGNED*	UINT:x		=> int(x) UNSIGNED*	TINT:x		=> tinyint(x)*	USINT		=> smallint(4) UNSIGNED (for _order columns)*	BOOL		=> tinyint(1) UNSIGNED*	VCHAR		=> varchar(255)*	CHAR:x		=> char(x)*	XSTEXT_UNI	=> text for storing 100 characters (topic_title for example)*	STEXT_UNI	=> text for storing 255 characters (normal input field with a max of 255 single-byte chars) - same as VCHAR_UNI*	TEXT_UNI	=> text for storing 3000 characters (short text, descriptions, comments, etc.)*	MTEXT_UNI	=> mediumtext (post text, large text)*	VCHAR:x		=> varchar(x)*	TIMESTAMP	=> int(11) UNSIGNED*	DECIMAL		=> decimal number (5,2)*	DECIMAL:	=> decimal number (x,2)*	PDECIMAL	=> precision decimal number (6,3)*	PDECIMAL:	=> precision decimal number (x,3)*	VCHAR_UNI	=> varchar(255) BINARY*	VCHAR_CI	=> varchar_ci for postgresql, others VCHAR*/function get_schema_struct(){	$schema_data = array();	$schema_data['phpbb_attachments'] = array(		'COLUMNS'		=> array(			'attach_id'			=> array('UINT', NULL, 'auto_increment'),			'post_msg_id'		=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'in_message'		=> array('BOOL', 0),			'poster_id'			=> array('UINT', 0),			'is_orphan'			=> array('BOOL', 1),			'physical_filename'	=> array('VCHAR', ''),			'real_filename'		=> array('VCHAR', ''),			'download_count'	=> array('UINT', 0),			'attach_comment'	=> array('TEXT_UNI', ''),			'extension'			=> array('VCHAR:100', ''),			'mimetype'			=> array('VCHAR:100', ''),			'filesize'			=> array('UINT:20', 0),			'filetime'			=> array('TIMESTAMP', 0),			'thumbnail'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'attach_id',		'KEYS'			=> array(			'filetime'			=> array('INDEX', 'filetime'),			'post_msg_id'		=> array('INDEX', 'post_msg_id'),			'topic_id'			=> array('INDEX', 'topic_id'),			'poster_id'			=> array('INDEX', 'poster_id'),			'is_orphan'			=> array('INDEX', 'is_orphan'),		),	);	$schema_data['phpbb_acl_groups'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_role_id'		=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'KEYS'			=> array(			'group_id'		=> array('INDEX', 'group_id'),			'auth_opt_id'	=> array('INDEX', 'auth_option_id'),			'auth_role_id'	=> array('INDEX', 'auth_role_id'),		),	);	$schema_data['phpbb_acl_options'] = array(		'COLUMNS'		=> array(			'auth_option_id'	=> array('UINT', NULL, 'auto_increment'),			'auth_option'		=> array('VCHAR:50', ''),			'is_global'			=> array('BOOL', 0),			'is_local'			=> array('BOOL', 0),			'founder_only'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'auth_option_id',		'KEYS'			=> array(			'auth_option'		=> array('UNIQUE', 'auth_option'),		),	);	$schema_data['phpbb_acl_roles'] = array(		'COLUMNS'		=> array(			'role_id'			=> array('UINT', NULL, 'auto_increment'),			'role_name'			=> array('VCHAR_UNI', ''),			'role_description'	=> array('TEXT_UNI', ''),			'role_type'			=> array('VCHAR:10', ''),			'role_order'		=> array('USINT', 0),		),		'PRIMARY_KEY'	=> 'role_id',		'KEYS'			=> array(			'role_type'			=> array('INDEX', 'role_type'),			'role_order'		=> array('INDEX', 'role_order'),		),	);	$schema_data['phpbb_acl_roles_data'] = array(		'COLUMNS'		=> array(			'role_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'PRIMARY_KEY'	=> array('role_id', 'auth_option_id'),		'KEYS'			=> array(			'ath_op_id'			=> array('INDEX', 'auth_option_id'),		),	);	$schema_data['phpbb_acl_users'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'auth_option_id'	=> array('UINT', 0),			'auth_role_id'		=> array('UINT', 0),			'auth_setting'		=> array('TINT:2', 0),		),		'KEYS'			=> array(			'user_id'			=> array('INDEX', 'user_id'),			'auth_option_id'	=> array('INDEX', 'auth_option_id'),			'auth_role_id'		=> array('INDEX', 'auth_role_id'),		),	);	$schema_data['phpbb_banlist'] = array(		'COLUMNS'		=> array(			'ban_id'			=> array('UINT', NULL, 'auto_increment'),			'ban_userid'		=> array('UINT', 0),			'ban_ip'			=> array('VCHAR:40', ''),			'ban_email'			=> array('VCHAR_UNI:100', ''),			'ban_start'			=> array('TIMESTAMP', 0),			'ban_end'			=> array('TIMESTAMP', 0),			'ban_exclude'		=> array('BOOL', 0),			'ban_reason'		=> array('VCHAR_UNI', ''),			'ban_give_reason'	=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'			=> 'ban_id',		'KEYS'			=> array(			'ban_end'			=> array('INDEX', 'ban_end'),			'ban_user'			=> array('INDEX', array('ban_userid', 'ban_exclude')),			'ban_email'			=> array('INDEX', array('ban_email', 'ban_exclude')),			'ban_ip'			=> array('INDEX', array('ban_ip', 'ban_exclude')),		),	);	$schema_data['phpbb_bbcodes'] = array(		'COLUMNS'		=> array(			'bbcode_id'				=> array('USINT', 0),			'bbcode_tag'			=> array('VCHAR:16', ''),			'bbcode_helpline'		=> array('VCHAR_UNI', ''),			'display_on_posting'	=> array('BOOL', 0),			'bbcode_match'			=> array('TEXT_UNI', ''),			'bbcode_tpl'			=> array('MTEXT_UNI', ''),			'first_pass_match'		=> array('MTEXT_UNI', ''),			'first_pass_replace'	=> array('MTEXT_UNI', ''),			'second_pass_match'		=> array('MTEXT_UNI', ''),			'second_pass_replace'	=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'bbcode_id',		'KEYS'			=> array(			'display_on_post'		=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_bookmarks'] = array(		'COLUMNS'		=> array(			'topic_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'			=> array('topic_id', 'user_id'),	);	$schema_data['phpbb_bots'] = array(		'COLUMNS'		=> array(			'bot_id'			=> array('UINT', NULL, 'auto_increment'),			'bot_active'		=> array('BOOL', 1),			'bot_name'			=> array('STEXT_UNI', ''),			'user_id'			=> array('UINT', 0),			'bot_agent'			=> array('VCHAR', ''),			'bot_ip'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'bot_id',		'KEYS'			=> array(			'bot_active'		=> array('INDEX', 'bot_active'),		),	);	$schema_data['phpbb_config'] = array(		'COLUMNS'		=> array(			'config_name'		=> array('VCHAR', ''),			'config_value'		=> array('VCHAR_UNI', ''),			'is_dynamic'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'config_name',		'KEYS'			=> array(			'is_dynamic'		=> array('INDEX', 'is_dynamic'),		),	);	$schema_data['phpbb_confirm'] = array(		'COLUMNS'		=> array(			'confirm_id'		=> array('CHAR:32', ''),			'session_id'		=> array('CHAR:32', ''),			'confirm_type'		=> array('TINT:3', 0),			'code'				=> array('VCHAR:8', ''),			'seed'				=> array('UINT:10', 0),			'attempts'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> array('session_id', 'confirm_id'),		'KEYS'			=> array(			'confirm_type'		=> array('INDEX', 'confirm_type'),		),	);	$schema_data['phpbb_disallow'] = array(		'COLUMNS'		=> array(			'disallow_id'		=> array('UINT', NULL, 'auto_increment'),			'disallow_username'	=> array('VCHAR_UNI:255', ''),		),		'PRIMARY_KEY'	=> 'disallow_id',	);	$schema_data['phpbb_drafts'] = array(		'COLUMNS'		=> array(			'draft_id'			=> array('UINT', NULL, 'auto_increment'),			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'save_time'			=> array('TIMESTAMP', 0),			'draft_subject'		=> array('STEXT_UNI', ''),			'draft_message'		=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'draft_id',		'KEYS'			=> array(			'save_time'			=> array('INDEX', 'save_time'),		),	);	$schema_data['phpbb_extensions'] = array(		'COLUMNS'		=> array(			'extension_id'		=> array('UINT', NULL, 'auto_increment'),			'group_id'			=> array('UINT', 0),			'extension'			=> array('VCHAR:100', ''),		),		'PRIMARY_KEY'	=> 'extension_id',	);	$schema_data['phpbb_extension_groups'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', NULL, 'auto_increment'),			'group_name'		=> array('VCHAR_UNI', ''),			'cat_id'			=> array('TINT:2', 0),			'allow_group'		=> array('BOOL', 0),			'download_mode'		=> array('BOOL', 1),			'upload_icon'		=> array('VCHAR', ''),			'max_filesize'		=> array('UINT:20', 0),			'allowed_forums'	=> array('TEXT', ''),			'allow_in_pm'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'group_id',	);	$schema_data['phpbb_forums'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', NULL, 'auto_increment'),			'parent_id'				=> array('UINT', 0),			'left_id'				=> array('UINT', 0),			'right_id'				=> array('UINT', 0),			'forum_parents'			=> array('MTEXT', ''),			'forum_name'			=> array('STEXT_UNI', ''),			'forum_desc'			=> array('TEXT_UNI', ''),			'forum_desc_bitfield'	=> array('VCHAR:255', ''),			'forum_desc_options'	=> array('UINT:11', 7),			'forum_desc_uid'		=> array('VCHAR:8', ''),			'forum_link'			=> array('VCHAR_UNI', ''),			'forum_password'		=> array('VCHAR_UNI:40', ''),			'forum_style'			=> array('UINT', 0),			'forum_image'			=> array('VCHAR', ''),			'forum_rules'			=> array('TEXT_UNI', ''),			'forum_rules_link'		=> array('VCHAR_UNI', ''),			'forum_rules_bitfield'	=> array('VCHAR:255', ''),			'forum_rules_options'	=> array('UINT:11', 7),			'forum_rules_uid'		=> array('VCHAR:8', ''),			'forum_topics_per_page'	=> array('TINT:4', 0),			'forum_type'			=> array('TINT:4', 0),			'forum_status'			=> array('TINT:4', 0),			'forum_posts'			=> array('UINT', 0),			'forum_topics'			=> array('UINT', 0),			'forum_topics_real'		=> array('UINT', 0),			'forum_last_post_id'	=> array('UINT', 0),			'forum_last_poster_id'	=> array('UINT', 0),			'forum_last_post_subject' => array('STEXT_UNI', ''),			'forum_last_post_time'	=> array('TIMESTAMP', 0),			'forum_last_poster_name'=> array('VCHAR_UNI', ''),			'forum_last_poster_colour'=> array('VCHAR:6', ''),			'forum_flags'			=> array('TINT:4', 32),			'forum_options'			=> array('UINT:20', 0),			'display_subforum_list'	=> array('BOOL', 1),			'display_on_index'		=> array('BOOL', 1),			'enable_indexing'		=> array('BOOL', 1),			'enable_icons'			=> array('BOOL', 1),			'enable_prune'			=> array('BOOL', 0),			'prune_next'			=> array('TIMESTAMP', 0),			'prune_days'			=> array('UINT', 0),			'prune_viewed'			=> array('UINT', 0),			'prune_freq'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'forum_id',		'KEYS'			=> array(			'left_right_id'			=> array('INDEX', array('left_id', 'right_id')),			'forum_lastpost_id'		=> array('INDEX', 'forum_last_post_id'),		),	);	$schema_data['phpbb_forums_access'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'session_id'			=> array('CHAR:32', ''),		),		'PRIMARY_KEY'	=> array('forum_id', 'user_id', 'session_id'),	);	$schema_data['phpbb_forums_track'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'mark_time'				=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'forum_id'),	);	$schema_data['phpbb_forums_watch'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'notify_status'			=> array('BOOL', 0),		),		'KEYS'			=> array(			'forum_id'				=> array('INDEX', 'forum_id'),			'user_id'				=> array('INDEX', 'user_id'),			'notify_stat'			=> array('INDEX', 'notify_status'),		),	);	$schema_data['phpbb_groups'] = array(		'COLUMNS'		=> array(			'group_id'				=> array('UINT', NULL, 'auto_increment'),			'group_type'			=> array('TINT:4', 1),			'group_founder_manage'	=> array('BOOL', 0),			'group_skip_auth'		=> array('BOOL', 0),			'group_name'			=> array('VCHAR_CI', ''),			'group_desc'			=> array('TEXT_UNI', ''),			'group_desc_bitfield'	=> array('VCHAR:255', ''),			'group_desc_options'	=> array('UINT:11', 7),			'group_desc_uid'		=> array('VCHAR:8', ''),			'group_display'			=> array('BOOL', 0),			'group_avatar'			=> array('VCHAR', ''),			'group_avatar_type'		=> array('TINT:2', 0),			'group_avatar_width'	=> array('USINT', 0),			'group_avatar_height'	=> array('USINT', 0),			'group_rank'			=> array('UINT', 0),			'group_colour'			=> array('VCHAR:6', ''),			'group_sig_chars'		=> array('UINT', 0),			'group_receive_pm'		=> array('BOOL', 0),			'group_message_limit'	=> array('UINT', 0),			'group_max_recipients'	=> array('UINT', 0),			'group_legend'			=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'group_id',		'KEYS'			=> array(			'group_legend_name'		=> array('INDEX', array('group_legend', 'group_name')),		),	);	$schema_data['phpbb_icons'] = array(		'COLUMNS'		=> array(			'icons_id'				=> array('UINT', NULL, 'auto_increment'),			'icons_url'				=> array('VCHAR', ''),			'icons_width'			=> array('TINT:4', 0),			'icons_height'			=> array('TINT:4', 0),			'icons_order'			=> array('UINT', 0),			'display_on_posting'	=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'icons_id',		'KEYS'			=> array(			'display_on_posting'	=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_lang'] = array(		'COLUMNS'		=> array(			'lang_id'				=> array('TINT:4', NULL, 'auto_increment'),			'lang_iso'				=> array('VCHAR:30', ''),			'lang_dir'				=> array('VCHAR:30', ''),			'lang_english_name'		=> array('VCHAR_UNI:100', ''),			'lang_local_name'		=> array('VCHAR_UNI:255', ''),			'lang_author'			=> array('VCHAR_UNI:255', ''),		),		'PRIMARY_KEY'	=> 'lang_id',		'KEYS'			=> array(			'lang_iso'				=> array('INDEX', 'lang_iso'),		),	);	$schema_data['phpbb_log'] = array(		'COLUMNS'		=> array(			'log_id'				=> array('UINT', NULL, 'auto_increment'),			'log_type'				=> array('TINT:4', 0),			'user_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'topic_id'				=> array('UINT', 0),			'reportee_id'			=> array('UINT', 0),			'log_ip'				=> array('VCHAR:40', ''),			'log_time'				=> array('TIMESTAMP', 0),			'log_operation'			=> array('TEXT_UNI', ''),			'log_data'				=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'log_id',		'KEYS'			=> array(			'log_type'				=> array('INDEX', 'log_type'),			'forum_id'				=> array('INDEX', 'forum_id'),			'topic_id'				=> array('INDEX', 'topic_id'),			'reportee_id'			=> array('INDEX', 'reportee_id'),			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_login_attempts'] = array(		'COLUMNS'		=> array(			'attempt_ip'			=> array('VCHAR:40', ''),			'attempt_browser'		=> array('VCHAR:150', ''),			'attempt_forwarded_for'	=> array('VCHAR:255', ''),			'attempt_time'			=> array('TIMESTAMP', 0),			'user_id'				=> array('UINT', 0),			'username'				=> array('VCHAR_UNI:255', 0),			'username_clean'		=> array('VCHAR_CI', 0),		),		'KEYS'			=> array(			'att_ip'				=> array('INDEX', array('attempt_ip', 'attempt_time')),			'att_for'		=> array('INDEX', array('attempt_forwarded_for', 'attempt_time')),			'att_time'				=> array('INDEX', array('attempt_time')),			'user_id'					=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_moderator_cache'] = array(		'COLUMNS'		=> array(			'forum_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'username'				=> array('VCHAR_UNI:255', ''),			'group_id'				=> array('UINT', 0),			'group_name'			=> array('VCHAR_UNI', ''),			'display_on_index'		=> array('BOOL', 1),		),		'KEYS'			=> array(			'disp_idx'				=> array('INDEX', 'display_on_index'),			'forum_id'				=> array('INDEX', 'forum_id'),		),	);	$schema_data['phpbb_modules'] = array(		'COLUMNS'		=> array(			'module_id'				=> array('UINT', NULL, 'auto_increment'),			'module_enabled'		=> array('BOOL', 1),			'module_display'		=> array('BOOL', 1),			'module_basename'		=> array('VCHAR', ''),			'module_class'			=> array('VCHAR:10', ''),			'parent_id'				=> array('UINT', 0),			'left_id'				=> array('UINT', 0),			'right_id'				=> array('UINT', 0),			'module_langname'		=> array('VCHAR', ''),			'module_mode'			=> array('VCHAR', ''),			'module_auth'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'module_id',		'KEYS'			=> array(			'left_right_id'			=> array('INDEX', array('left_id', 'right_id')),			'module_enabled'		=> array('INDEX', 'module_enabled'),			'class_left_id'			=> array('INDEX', array('module_class', 'left_id')),		),	);	$schema_data['phpbb_poll_options'] = array(		'COLUMNS'		=> array(			'poll_option_id'		=> array('TINT:4', 0),			'topic_id'				=> array('UINT', 0),			'poll_option_text'		=> array('TEXT_UNI', ''),			'poll_option_total'		=> array('UINT', 0),		),		'KEYS'			=> array(			'poll_opt_id'			=> array('INDEX', 'poll_option_id'),			'topic_id'				=> array('INDEX', 'topic_id'),		),	);	$schema_data['phpbb_poll_votes'] = array(		'COLUMNS'		=> array(			'topic_id'				=> array('UINT', 0),			'poll_option_id'		=> array('TINT:4', 0),			'vote_user_id'			=> array('UINT', 0),			'vote_user_ip'			=> array('VCHAR:40', ''),		),		'KEYS'			=> array(			'topic_id'				=> array('INDEX', 'topic_id'),			'vote_user_id'			=> array('INDEX', 'vote_user_id'),			'vote_user_ip'			=> array('INDEX', 'vote_user_ip'),		),	);	$schema_data['phpbb_posts'] = array(		'COLUMNS'		=> array(			'post_id'				=> array('UINT', NULL, 'auto_increment'),			'topic_id'				=> array('UINT', 0),			'forum_id'				=> array('UINT', 0),			'poster_id'				=> array('UINT', 0),			'icon_id'				=> array('UINT', 0),			'poster_ip'				=> array('VCHAR:40', ''),			'post_time'				=> array('TIMESTAMP', 0),			'post_approved'			=> array('BOOL', 1),			'post_reported'			=> array('BOOL', 0),			'enable_bbcode'			=> array('BOOL', 1),			'enable_smilies'		=> array('BOOL', 1),			'enable_magic_url'		=> array('BOOL', 1),			'enable_sig'			=> array('BOOL', 1),			'post_username'			=> array('VCHAR_UNI:255', ''),			'post_subject'			=> array('STEXT_UNI', '', 'true_sort'),			'post_text'				=> array('MTEXT_UNI', ''),			'post_checksum'			=> array('VCHAR:32', ''),			'post_attachment'		=> array('BOOL', 0),			'bbcode_bitfield'		=> array('VCHAR:255', ''),			'bbcode_uid'			=> array('VCHAR:8', ''),			'post_postcount'		=> array('BOOL', 1),			'post_edit_time'		=> array('TIMESTAMP', 0),			'post_edit_reason'		=> array('STEXT_UNI', ''),			'post_edit_user'		=> array('UINT', 0),			'post_edit_count'		=> array('USINT', 0),			'post_edit_locked'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'post_id',		'KEYS'			=> array(			'forum_id'				=> array('INDEX', 'forum_id'),			'topic_id'				=> array('INDEX', 'topic_id'),			'poster_ip'				=> array('INDEX', 'poster_ip'),			'poster_id'				=> array('INDEX', 'poster_id'),			'post_approved'			=> array('INDEX', 'post_approved'),			'post_username'			=> array('INDEX', 'post_username'),			'tid_post_time'			=> array('INDEX', array('topic_id', 'post_time')),		),	);	$schema_data['phpbb_privmsgs'] = array(		'COLUMNS'		=> array(			'msg_id'				=> array('UINT', NULL, 'auto_increment'),			'root_level'			=> array('UINT', 0),			'author_id'				=> array('UINT', 0),			'icon_id'				=> array('UINT', 0),			'author_ip'				=> array('VCHAR:40', ''),			'message_time'			=> array('TIMESTAMP', 0),			'enable_bbcode'			=> array('BOOL', 1),			'enable_smilies'		=> array('BOOL', 1),			'enable_magic_url'		=> array('BOOL', 1),			'enable_sig'			=> array('BOOL', 1),			'message_subject'		=> array('STEXT_UNI', ''),			'message_text'			=> array('MTEXT_UNI', ''),			'message_edit_reason'	=> array('STEXT_UNI', ''),			'message_edit_user'		=> array('UINT', 0),			'message_attachment'	=> array('BOOL', 0),			'bbcode_bitfield'		=> array('VCHAR:255', ''),			'bbcode_uid'			=> array('VCHAR:8', ''),			'message_edit_time'		=> array('TIMESTAMP', 0),			'message_edit_count'	=> array('USINT', 0),			'to_address'			=> array('TEXT_UNI', ''),			'bcc_address'			=> array('TEXT_UNI', ''),			'message_reported'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'msg_id',		'KEYS'			=> array(			'author_ip'				=> array('INDEX', 'author_ip'),			'message_time'			=> array('INDEX', 'message_time'),			'author_id'				=> array('INDEX', 'author_id'),			'root_level'			=> array('INDEX', 'root_level'),		),	);	$schema_data['phpbb_privmsgs_folder'] = array(		'COLUMNS'		=> array(			'folder_id'				=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'folder_name'			=> array('VCHAR_UNI', ''),			'pm_count'				=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'folder_id',		'KEYS'			=> array(			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_privmsgs_rules'] = array(		'COLUMNS'		=> array(			'rule_id'				=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'rule_check'			=> array('UINT', 0),			'rule_connection'		=> array('UINT', 0),			'rule_string'			=> array('VCHAR_UNI', ''),			'rule_user_id'			=> array('UINT', 0),			'rule_group_id'			=> array('UINT', 0),			'rule_action'			=> array('UINT', 0),			'rule_folder_id'		=> array('INT:11', 0),		),		'PRIMARY_KEY'	=> 'rule_id',		'KEYS'			=> array(			'user_id'				=> array('INDEX', 'user_id'),		),	);	$schema_data['phpbb_privmsgs_to'] = array(		'COLUMNS'		=> array(			'msg_id'				=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'author_id'				=> array('UINT', 0),			'pm_deleted'			=> array('BOOL', 0),			'pm_new'				=> array('BOOL', 1),			'pm_unread'				=> array('BOOL', 1),			'pm_replied'			=> array('BOOL', 0),			'pm_marked'				=> array('BOOL', 0),			'pm_forwarded'			=> array('BOOL', 0),			'folder_id'				=> array('INT:11', 0),		),		'KEYS'			=> array(			'msg_id'				=> array('INDEX', 'msg_id'),			'author_id'				=> array('INDEX', 'author_id'),			'usr_flder_id'			=> array('INDEX', array('user_id', 'folder_id')),		),	);	$schema_data['phpbb_profile_fields'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', NULL, 'auto_increment'),			'field_name'			=> array('VCHAR_UNI', ''),			'field_type'			=> array('TINT:4', 0),			'field_ident'			=> array('VCHAR:20', ''),			'field_length'			=> array('VCHAR:20', ''),			'field_minlen'			=> array('VCHAR', ''),			'field_maxlen'			=> array('VCHAR', ''),			'field_novalue'			=> array('VCHAR_UNI', ''),			'field_default_value'	=> array('VCHAR_UNI', ''),			'field_validation'		=> array('VCHAR_UNI:20', ''),			'field_required'		=> array('BOOL', 0),			'field_show_on_reg'		=> array('BOOL', 0),			'field_show_on_vt'		=> array('BOOL', 0),			'field_show_profile'	=> array('BOOL', 0),			'field_hide'			=> array('BOOL', 0),			'field_no_view'			=> array('BOOL', 0),			'field_active'			=> array('BOOL', 0),			'field_order'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'field_id',		'KEYS'			=> array(			'fld_type'			=> array('INDEX', 'field_type'),			'fld_ordr'			=> array('INDEX', 'field_order'),		),	);	$schema_data['phpbb_profile_fields_data'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'user_id',	);	$schema_data['phpbb_profile_fields_lang'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', 0),			'lang_id'				=> array('UINT', 0),			'option_id'				=> array('UINT', 0),			'field_type'			=> array('TINT:4', 0),			'lang_value'			=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> array('field_id', 'lang_id', 'option_id'),	);	$schema_data['phpbb_profile_lang'] = array(		'COLUMNS'		=> array(			'field_id'				=> array('UINT', 0),			'lang_id'				=> array('UINT', 0),			'lang_name'				=> array('VCHAR_UNI', ''),			'lang_explain'			=> array('TEXT_UNI', ''),			'lang_default_value'	=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> array('field_id', 'lang_id'),	);	$schema_data['phpbb_ranks'] = array(		'COLUMNS'		=> array(			'rank_id'				=> array('UINT', NULL, 'auto_increment'),			'rank_title'			=> array('VCHAR_UNI', ''),			'rank_min'				=> array('UINT', 0),			'rank_special'			=> array('BOOL', 0),			'rank_image'			=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'rank_id',	);	$schema_data['phpbb_reports'] = array(		'COLUMNS'		=> array(			'report_id'				=> array('UINT', NULL, 'auto_increment'),			'reason_id'				=> array('USINT', 0),			'post_id'				=> array('UINT', 0),			'pm_id'					=> array('UINT', 0),			'user_id'				=> array('UINT', 0),			'user_notify'			=> array('BOOL', 0),			'report_closed'			=> array('BOOL', 0),			'report_time'			=> array('TIMESTAMP', 0),			'report_text'			=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'report_id',		'KEYS'			=> array(			'post_id'			=> array('INDEX', 'post_id'),			'pm_id'				=> array('INDEX', 'pm_id'),		),	);	$schema_data['phpbb_reports_reasons'] = array(		'COLUMNS'		=> array(			'reason_id'				=> array('USINT', NULL, 'auto_increment'),			'reason_title'			=> array('VCHAR_UNI', ''),			'reason_description'	=> array('MTEXT_UNI', ''),			'reason_order'			=> array('USINT', 0),		),		'PRIMARY_KEY'	=> 'reason_id',	);	$schema_data['phpbb_search_results'] = array(		'COLUMNS'		=> array(			'search_key'			=> array('VCHAR:32', ''),			'search_time'			=> array('TIMESTAMP', 0),			'search_keywords'		=> array('MTEXT_UNI', ''),			'search_authors'		=> array('MTEXT', ''),		),		'PRIMARY_KEY'	=> 'search_key',	);	$schema_data['phpbb_search_wordlist'] = array(		'COLUMNS'		=> array(			'word_id'			=> array('UINT', NULL, 'auto_increment'),			'word_text'			=> array('VCHAR_UNI', ''),			'word_common'		=> array('BOOL', 0),			'word_count'		=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'word_id',		'KEYS'			=> array(			'wrd_txt'			=> array('UNIQUE', 'word_text'),			'wrd_cnt'			=> array('INDEX', 'word_count'),		),	);	$schema_data['phpbb_search_wordmatch'] = array(		'COLUMNS'		=> array(			'post_id'			=> array('UINT', 0),			'word_id'			=> array('UINT', 0),			'title_match'		=> array('BOOL', 0),		),		'KEYS'			=> array(			'unq_mtch'			=> array('UNIQUE', array('word_id', 'post_id', 'title_match')),			'word_id'			=> array('INDEX', 'word_id'),			'post_id'			=> array('INDEX', 'post_id'),		),	);	$schema_data['phpbb_sessions'] = array(		'COLUMNS'		=> array(			'session_id'			=> array('CHAR:32', ''),			'session_user_id'		=> array('UINT', 0),			'session_forum_id'		=> array('UINT', 0),			'session_last_visit'	=> array('TIMESTAMP', 0),			'session_start'			=> array('TIMESTAMP', 0),			'session_time'			=> array('TIMESTAMP', 0),			'session_ip'			=> array('VCHAR:40', ''),			'session_browser'		=> array('VCHAR:150', ''),			'session_forwarded_for'	=> array('VCHAR:255', ''),			'session_page'			=> array('VCHAR_UNI', ''),			'session_viewonline'	=> array('BOOL', 1),			'session_autologin'		=> array('BOOL', 0),			'session_admin'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'session_id',		'KEYS'			=> array(			'session_time'		=> array('INDEX', 'session_time'),			'session_user_id'	=> array('INDEX', 'session_user_id'),			'session_fid'		=> array('INDEX', 'session_forum_id'),		),	);	$schema_data['phpbb_sessions_keys'] = array(		'COLUMNS'		=> array(			'key_id'			=> array('CHAR:32', ''),			'user_id'			=> array('UINT', 0),			'last_ip'			=> array('VCHAR:40', ''),			'last_login'		=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('key_id', 'user_id'),		'KEYS'			=> array(			'last_login'		=> array('INDEX', 'last_login'),		),	);	$schema_data['phpbb_sitelist'] = array(		'COLUMNS'		=> array(			'site_id'		=> array('UINT', NULL, 'auto_increment'),			'site_ip'		=> array('VCHAR:40', ''),			'site_hostname'	=> array('VCHAR', ''),			'ip_exclude'	=> array('BOOL', 0),		),		'PRIMARY_KEY'		=> 'site_id',	);	$schema_data['phpbb_smilies'] = array(		'COLUMNS'		=> array(			'smiley_id'			=> array('UINT', NULL, 'auto_increment'),			// We may want to set 'code' to VCHAR:50 or check if unicode support is possible... at the moment only ASCII characters are allowed.			'code'				=> array('VCHAR_UNI:50', ''),			'emotion'			=> array('VCHAR_UNI:50', ''),			'smiley_url'		=> array('VCHAR:50', ''),			'smiley_width'		=> array('USINT', 0),			'smiley_height'		=> array('USINT', 0),			'smiley_order'		=> array('UINT', 0),			'display_on_posting'=> array('BOOL', 1),		),		'PRIMARY_KEY'	=> 'smiley_id',		'KEYS'			=> array(			'display_on_post'		=> array('INDEX', 'display_on_posting'),		),	);	$schema_data['phpbb_styles'] = array(		'COLUMNS'		=> array(			'style_id'				=> array('UINT', NULL, 'auto_increment'),			'style_name'			=> array('VCHAR_UNI:255', ''),			'style_copyright'		=> array('VCHAR_UNI', ''),			'style_active'			=> array('BOOL', 1),			'template_id'			=> array('UINT', 0),			'theme_id'				=> array('UINT', 0),			'imageset_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'	=> 'style_id',		'KEYS'			=> array(			'style_name'		=> array('UNIQUE', 'style_name'),			'template_id'		=> array('INDEX', 'template_id'),			'theme_id'			=> array('INDEX', 'theme_id'),			'imageset_id'		=> array('INDEX', 'imageset_id'),		),	);	$schema_data['phpbb_styles_template'] = array(		'COLUMNS'		=> array(			'template_id'			=> array('UINT', NULL, 'auto_increment'),			'template_name'			=> array('VCHAR_UNI:255', ''),			'template_copyright'	=> array('VCHAR_UNI', ''),			'template_path'			=> array('VCHAR:100', ''),			'bbcode_bitfield'		=> array('VCHAR:255', 'kNg='),			'template_storedb'		=> array('BOOL', 0),			'template_inherits_id'		=> array('UINT:4', 0),			'template_inherit_path'		=> array('VCHAR', ''),		),		'PRIMARY_KEY'	=> 'template_id',		'KEYS'			=> array(			'tmplte_nm'				=> array('UNIQUE', 'template_name'),		),	);	$schema_data['phpbb_styles_template_data'] = array(		'COLUMNS'		=> array(			'template_id'			=> array('UINT', 0),			'template_filename'		=> array('VCHAR:100', ''),			'template_included'		=> array('TEXT', ''),			'template_mtime'		=> array('TIMESTAMP', 0),			'template_data'			=> array('MTEXT_UNI', ''),		),		'KEYS'			=> array(			'tid'					=> array('INDEX', 'template_id'),			'tfn'					=> array('INDEX', 'template_filename'),		),	);	$schema_data['phpbb_styles_theme'] = array(		'COLUMNS'		=> array(			'theme_id'				=> array('UINT', NULL, 'auto_increment'),			'theme_name'			=> array('VCHAR_UNI:255', ''),			'theme_copyright'		=> array('VCHAR_UNI', ''),			'theme_path'			=> array('VCHAR:100', ''),			'theme_storedb'			=> array('BOOL', 0),			'theme_mtime'			=> array('TIMESTAMP', 0),			'theme_data'			=> array('MTEXT_UNI', ''),		),		'PRIMARY_KEY'	=> 'theme_id',		'KEYS'			=> array(			'theme_name'		=> array('UNIQUE', 'theme_name'),		),	);	$schema_data['phpbb_styles_imageset'] = array(		'COLUMNS'		=> array(			'imageset_id'				=> array('UINT', NULL, 'auto_increment'),			'imageset_name'				=> array('VCHAR_UNI:255', ''),			'imageset_copyright'		=> array('VCHAR_UNI', ''),			'imageset_path'				=> array('VCHAR:100', ''),		),		'PRIMARY_KEY'		=> 'imageset_id',		'KEYS'				=> array(			'imgset_nm'			=> array('UNIQUE', 'imageset_name'),		),	);	$schema_data['phpbb_styles_imageset_data'] = array(		'COLUMNS'		=> array(			'image_id'				=> array('UINT', NULL, 'auto_increment'),			'image_name'			=> array('VCHAR:200', ''),			'image_filename'		=> array('VCHAR:200', ''),			'image_lang'			=> array('VCHAR:30', ''),			'image_height'			=> array('USINT', 0),			'image_width'			=> array('USINT', 0),			'imageset_id'			=> array('UINT', 0),		),		'PRIMARY_KEY'		=> 'image_id',		'KEYS'				=> array(			'i_d'			=> array('INDEX', 'imageset_id'),		),	);	$schema_data['phpbb_topics'] = array(		'COLUMNS'		=> array(			'topic_id'					=> array('UINT', NULL, 'auto_increment'),			'forum_id'					=> array('UINT', 0),			'icon_id'					=> array('UINT', 0),			'topic_attachment'			=> array('BOOL', 0),			'topic_approved'			=> array('BOOL', 1),			'topic_reported'			=> array('BOOL', 0),			'topic_title'				=> array('STEXT_UNI', '', 'true_sort'),			'topic_poster'				=> array('UINT', 0),			'topic_time'				=> array('TIMESTAMP', 0),			'topic_time_limit'			=> array('TIMESTAMP', 0),			'topic_views'				=> array('UINT', 0),			'topic_replies'				=> array('UINT', 0),			'topic_replies_real'		=> array('UINT', 0),			'topic_status'				=> array('TINT:3', 0),			'topic_type'				=> array('TINT:3', 0),			'topic_first_post_id'		=> array('UINT', 0),			'topic_first_poster_name'	=> array('VCHAR_UNI', ''),			'topic_first_poster_colour'	=> array('VCHAR:6', ''),			'topic_last_post_id'		=> array('UINT', 0),			'topic_last_poster_id'		=> array('UINT', 0),			'topic_last_poster_name'	=> array('VCHAR_UNI', ''),			'topic_last_poster_colour'	=> array('VCHAR:6', ''),			'topic_last_post_subject'	=> array('STEXT_UNI', ''),			'topic_last_post_time'		=> array('TIMESTAMP', 0),			'topic_last_view_time'		=> array('TIMESTAMP', 0),			'topic_moved_id'			=> array('UINT', 0),			'topic_bumped'				=> array('BOOL', 0),			'topic_bumper'				=> array('UINT', 0),			'poll_title'				=> array('STEXT_UNI', ''),			'poll_start'				=> array('TIMESTAMP', 0),			'poll_length'				=> array('TIMESTAMP', 0),			'poll_max_options'			=> array('TINT:4', 1),			'poll_last_vote'			=> array('TIMESTAMP', 0),			'poll_vote_change'			=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> 'topic_id',		'KEYS'			=> array(			'forum_id'			=> array('INDEX', 'forum_id'),			'forum_id_type'		=> array('INDEX', array('forum_id', 'topic_type')),			'last_post_time'	=> array('INDEX', 'topic_last_post_time'),			'topic_approved'	=> array('INDEX', 'topic_approved'),			'forum_appr_last'	=> array('INDEX', array('forum_id', 'topic_approved', 'topic_last_post_id')),			'fid_time_moved'	=> array('INDEX', array('forum_id', 'topic_last_post_time', 'topic_moved_id')),		),	);	$schema_data['phpbb_topics_track'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'forum_id'			=> array('UINT', 0),			'mark_time'			=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'topic_id'),		'KEYS'			=> array(			'topic_id'			=> array('INDEX', 'topic_id'),			'forum_id'			=> array('INDEX', 'forum_id'),		),	);	$schema_data['phpbb_topics_posted'] = array(		'COLUMNS'		=> array(			'user_id'			=> array('UINT', 0),			'topic_id'			=> array('UINT', 0),			'topic_posted'		=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'topic_id'),	);	$schema_data['phpbb_topics_watch'] = array(		'COLUMNS'		=> array(			'topic_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),			'notify_status'		=> array('BOOL', 0),		),		'KEYS'			=> array(			'topic_id'			=> array('INDEX', 'topic_id'),			'user_id'			=> array('INDEX', 'user_id'),			'notify_stat'		=> array('INDEX', 'notify_status'),		),	);	$schema_data['phpbb_user_group'] = array(		'COLUMNS'		=> array(			'group_id'			=> array('UINT', 0),			'user_id'			=> array('UINT', 0),			'group_leader'		=> array('BOOL', 0),			'user_pending'		=> array('BOOL', 1),		),		'KEYS'			=> array(			'group_id'			=> array('INDEX', 'group_id'),			'user_id'			=> array('INDEX', 'user_id'),			'group_leader'		=> array('INDEX', 'group_leader'),		),	);	$schema_data['phpbb_users'] = array(		'COLUMNS'		=> array(			'user_id'					=> array('UINT', NULL, 'auto_increment'),			'user_type'					=> array('TINT:2', 0),			'group_id'					=> array('UINT', 3),			'user_permissions'			=> array('MTEXT', ''),			'user_perm_from'			=> array('UINT', 0),			'user_ip'					=> array('VCHAR:40', ''),			'user_regdate'				=> array('TIMESTAMP', 0),			'username'					=> array('VCHAR_CI', ''),			'username_clean'			=> array('VCHAR_CI', ''),			'user_password'				=> array('VCHAR_UNI:40', ''),			'user_passchg'				=> array('TIMESTAMP', 0),			'user_pass_convert'			=> array('BOOL', 0),			'user_email'				=> array('VCHAR_UNI:100', ''),			'user_email_hash'			=> array('BINT', 0),			'user_birthday'				=> array('VCHAR:10', ''),			'user_lastvisit'			=> array('TIMESTAMP', 0),			'user_lastmark'				=> array('TIMESTAMP', 0),			'user_lastpost_time'		=> array('TIMESTAMP', 0),			'user_lastpage'				=> array('VCHAR_UNI:200', ''),			'user_last_confirm_key'		=> array('VCHAR:10', ''),			'user_last_search'			=> array('TIMESTAMP', 0),			'user_warnings'				=> array('TINT:4', 0),			'user_last_warning'			=> array('TIMESTAMP', 0),			'user_login_attempts'		=> array('TINT:4', 0),			'user_inactive_reason'		=> array('TINT:2', 0),			'user_inactive_time'		=> array('TIMESTAMP', 0),			'user_posts'				=> array('UINT', 0),			'user_lang'					=> array('VCHAR:30', ''),			'user_timezone'				=> array('DECIMAL', 0),			'user_dst'					=> array('BOOL', 0),			'user_dateformat'			=> array('VCHAR_UNI:30', 'd M Y H:i'),			'user_style'				=> array('UINT', 0),			'user_rank'					=> array('UINT', 0),			'user_colour'				=> array('VCHAR:6', ''),			'user_new_privmsg'			=> array('INT:4', 0),			'user_unread_privmsg'		=> array('INT:4', 0),			'user_last_privmsg'			=> array('TIMESTAMP', 0),			'user_message_rules'		=> array('BOOL', 0),			'user_full_folder'			=> array('INT:11', -3),			'user_emailtime'			=> array('TIMESTAMP', 0),			'user_topic_show_days'		=> array('USINT', 0),			'user_topic_sortby_type'	=> array('VCHAR:1', 't'),			'user_topic_sortby_dir'		=> array('VCHAR:1', 'd'),			'user_post_show_days'		=> array('USINT', 0),			'user_post_sortby_type'		=> array('VCHAR:1', 't'),			'user_post_sortby_dir'		=> array('VCHAR:1', 'a'),			'user_notify'				=> array('BOOL', 0),			'user_notify_pm'			=> array('BOOL', 1),			'user_notify_type'			=> array('TINT:4', 0),			'user_allow_pm'				=> array('BOOL', 1),			'user_allow_viewonline'		=> array('BOOL', 1),			'user_allow_viewemail'		=> array('BOOL', 1),			'user_allow_massemail'		=> array('BOOL', 1),			'user_options'				=> array('UINT:11', 230271),			'user_avatar'				=> array('VCHAR', ''),			'user_avatar_type'			=> array('TINT:2', 0),			'user_avatar_width'			=> array('USINT', 0),			'user_avatar_height'		=> array('USINT', 0),			'user_sig'					=> array('MTEXT_UNI', ''),			'user_sig_bbcode_uid'		=> array('VCHAR:8', ''),			'user_sig_bbcode_bitfield'	=> array('VCHAR:255', ''),			'user_from'					=> array('VCHAR_UNI:100', ''),			'user_icq'					=> array('VCHAR:15', ''),			'user_aim'					=> array('VCHAR_UNI', ''),			'user_yim'					=> array('VCHAR_UNI', ''),			'user_msnm'					=> array('VCHAR_UNI', ''),			'user_jabber'				=> array('VCHAR_UNI', ''),			'user_website'				=> array('VCHAR_UNI:200', ''),			'user_occ'					=> array('TEXT_UNI', ''),			'user_interests'			=> array('TEXT_UNI', ''),			'user_actkey'				=> array('VCHAR:32', ''),			'user_newpasswd'			=> array('VCHAR_UNI:40', ''),			'user_form_salt'			=> array('VCHAR_UNI:32', ''),			'user_new'					=> array('BOOL', 1),			'user_reminded'				=> array('TINT:4', 0),			'user_reminded_time'		=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> 'user_id',		'KEYS'			=> array(			'user_birthday'				=> array('INDEX', 'user_birthday'),			'user_email_hash'			=> array('INDEX', 'user_email_hash'),			'user_type'					=> array('INDEX', 'user_type'),			'username_clean'			=> array('UNIQUE', 'username_clean'),		),	);	$schema_data['phpbb_warnings'] = array(		'COLUMNS'		=> array(			'warning_id'			=> array('UINT', NULL, 'auto_increment'),			'user_id'				=> array('UINT', 0),			'post_id'				=> array('UINT', 0),			'log_id'				=> array('UINT', 0),			'warning_time'			=> array('TIMESTAMP', 0),		),		'PRIMARY_KEY'	=> 'warning_id',	);	$schema_data['phpbb_words'] = array(		'COLUMNS'		=> array(			'word_id'				=> array('UINT', NULL, 'auto_increment'),			'word'					=> array('VCHAR_UNI', ''),			'replacement'			=> array('VCHAR_UNI', ''),		),		'PRIMARY_KEY'	=> 'word_id',	);	$schema_data['phpbb_zebra'] = array(		'COLUMNS'		=> array(			'user_id'				=> array('UINT', 0),			'zebra_id'				=> array('UINT', 0),			'friend'				=> array('BOOL', 0),			'foe'					=> array('BOOL', 0),		),		'PRIMARY_KEY'	=> array('user_id', 'zebra_id'),	);	return $schema_data;}/*** Data put into the header for various dbms*/function custom_data($dbms){	switch ($dbms)	{		case 'oracle':			return <<<EOF/*  This first section is optional, however its probably the best method  of running phpBB on Oracle. If you already have a tablespace and user created  for phpBB you can leave this section commented out!  The first set of statements create a phpBB tablespace and a phpBB user,  make sure you change the password of the phpBB user before you run this script!!*//*CREATE TABLESPACE "PHPBB"	LOGGING	DATAFILE 'E:\ORACLE\ORADATA\LOCAL\PHPBB.ora'	SIZE 10M	AUTOEXTEND ON NEXT 10M	MAXSIZE 100M;CREATE USER "PHPBB"	PROFILE "DEFAULT"	IDENTIFIED BY "phpbb_password"	DEFAULT TABLESPACE "PHPBB"	QUOTA UNLIMITED ON "PHPBB"	ACCOUNT UNLOCK;GRANT ANALYZE ANY TO "PHPBB";GRANT CREATE SEQUENCE TO "PHPBB";GRANT CREATE SESSION TO "PHPBB";GRANT CREATE TABLE TO "PHPBB";GRANT CREATE TRIGGER TO "PHPBB";GRANT CREATE VIEW TO "PHPBB";GRANT "CONNECT" TO "PHPBB";COMMIT;DISCONNECT;CONNECT phpbb/phpbb_password;*/EOF;		break;		case 'postgres':			return <<<EOF/*	Domain definition*/CREATE DOMAIN varchar_ci AS varchar(255) NOT NULL DEFAULT ''::character varying;/*	Operation Functions*/CREATE FUNCTION _varchar_ci_equal(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) = LOWER($2)' LANGUAGE SQL STRICT;CREATE FUNCTION _varchar_ci_not_equal(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) != LOWER($2)' LANGUAGE SQL STRICT;CREATE FUNCTION _varchar_ci_less_than(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) < LOWER($2)' LANGUAGE SQL STRICT;CREATE FUNCTION _varchar_ci_less_equal(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) <= LOWER($2)' LANGUAGE SQL STRICT;CREATE FUNCTION _varchar_ci_greater_than(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) > LOWER($2)' LANGUAGE SQL STRICT;CREATE FUNCTION _varchar_ci_greater_equals(varchar_ci, varchar_ci) RETURNS boolean AS 'SELECT LOWER($1) >= LOWER($2)' LANGUAGE SQL STRICT;/*	Operators*/CREATE OPERATOR <(  PROCEDURE = _varchar_ci_less_than,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = >,  NEGATOR = >=,  RESTRICT = scalarltsel,  JOIN = scalarltjoinsel);CREATE OPERATOR <=(  PROCEDURE = _varchar_ci_less_equal,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = >=,  NEGATOR = >,  RESTRICT = scalarltsel,  JOIN = scalarltjoinsel);CREATE OPERATOR >(  PROCEDURE = _varchar_ci_greater_than,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = <,  NEGATOR = <=,  RESTRICT = scalargtsel,  JOIN = scalargtjoinsel);CREATE OPERATOR >=(  PROCEDURE = _varchar_ci_greater_equals,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = <=,  NEGATOR = <,  RESTRICT = scalargtsel,  JOIN = scalargtjoinsel);CREATE OPERATOR <>(  PROCEDURE = _varchar_ci_not_equal,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = <>,  NEGATOR = =,  RESTRICT = neqsel,  JOIN = neqjoinsel);CREATE OPERATOR =(  PROCEDURE = _varchar_ci_equal,  LEFTARG = varchar_ci,  RIGHTARG = varchar_ci,  COMMUTATOR = =,  NEGATOR = <>,  RESTRICT = eqsel,  JOIN = eqjoinsel,  HASHES,  MERGES,  SORT1= <);EOF;		break;	}	return '';}echo 'done';
<?php/**** @package dbal* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Database Abstraction Layer* @package dbal*/class dbal{	var $db_connect_id;	var $query_result;	var $return_on_error = false;	var $transaction = false;	var $sql_time = 0;	var $num_queries = array();	var $open_queries = array();	var $curtime = 0;	var $query_hold = '';	var $html_hold = '';	var $sql_report = '';	var $persistency = false;	var $user = '';	var $server = '';	var $dbname = '';	// Set to true if error triggered	var $sql_error_triggered = false;	// Holding the last sql query on sql error	var $sql_error_sql = '';	// Holding the error information - only populated if sql_error_triggered is set	var $sql_error_returned = array();	// Holding transaction count	var $transactions = 0;	// Supports multi inserts?	var $multi_insert = false;	/**	* Current sql layer	*/	var $sql_layer = '';	/**	* Wildcards for matching any (%) or exactly one (_) character within LIKE expressions	*/	var $any_char;	var $one_char;	/**	* Exact version of the DBAL, directly queried	*/	var $sql_server_version = false;	/**	* Constructor	*/	function dbal()	{		$this->num_queries = array(			'cached'		=> 0,			'normal'		=> 0,			'total'			=> 0,		);		// Fill default sql layer based on the class being called.		// This can be changed by the specified layer itself later if needed.		$this->sql_layer = substr(get_class($this), 5);		// Do not change this please! This variable is used to easy the use of it - and is hardcoded.		$this->any_char = chr(0) . '%';		$this->one_char = chr(0) . '_';	}	/**	* return on error or display error message	*/	function sql_return_on_error($fail = false)	{		$this->sql_error_triggered = false;		$this->sql_error_sql = '';		$this->return_on_error = $fail;	}	/**	* Return number of sql queries and cached sql queries used	*/	function sql_num_queries($cached = false)	{		return ($cached) ? $this->num_queries['cached'] : $this->num_queries['normal'];	}	/**	* Add to query count	*/	function sql_add_num_queries($cached = false)	{		$this->num_queries['cached'] += ($cached !== false) ? 1 : 0;		$this->num_queries['normal'] += ($cached !== false) ? 0 : 1;		$this->num_queries['total'] += 1;	}	/**	* DBAL garbage collection, close sql connection	*/	function sql_close()	{		if (!$this->db_connect_id)		{			return false;		}		if ($this->transaction)		{			do			{				$this->sql_transaction('commit');			}			while ($this->transaction);		}		foreach ($this->open_queries as $query_id)		{			$this->sql_freeresult($query_id);		}		// Connection closed correctly. Set db_connect_id to false to prevent errors		if ($result = $this->_sql_close())		{			$this->db_connect_id = false;		}		return $result;	}	/**	* Build LIMIT query	* Doing some validation here.	*/	function sql_query_limit($query, $total, $offset = 0, $cache_ttl = 0)	{		if (empty($query))		{			return false;		}		// Never use a negative total or offset		$total = ($total < 0) ? 0 : $total;		$offset = ($offset < 0) ? 0 : $offset;		return $this->_sql_query_limit($query, $total, $offset, $cache_ttl);	}	/**	* Fetch all rows	*/	function sql_fetchrowset($query_id = false)	{		if ($query_id === false)		{			$query_id = $this->query_result;		}		if ($query_id !== false)		{			$result = array();			while ($row = $this->sql_fetchrow($query_id))			{				$result[] = $row;			}			return $result;		}		return false;	}	/**	* Fetch field	* if rownum is false, the current row is used, else it is pointing to the row (zero-based)	*/	function sql_fetchfield($field, $rownum = false, $query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if ($query_id !== false)		{			if ($rownum !== false)			{				$this->sql_rowseek($rownum, $query_id);			}			if (!is_object($query_id) && isset($cache->sql_rowset[$query_id]))			{				return $cache->sql_fetchfield($query_id, $field);			}			$row = $this->sql_fetchrow($query_id);			return (isset($row[$field])) ? $row[$field] : false;		}		return false;	}	/**	* Correctly adjust LIKE expression for special characters	* Some DBMS are handling them in a different way	*	* @param string $expression The expression to use. Every wildcard is escaped, except $this->any_char and $this->one_char	* @return string LIKE expression including the keyword!	*/	function sql_like_expression($expression)	{		$expression = utf8_str_replace(array('_', '%'), array("\_", "\%"), $expression);		$expression = utf8_str_replace(array(chr(0) . "\_", chr(0) . "\%"), array('_', '%'), $expression);		return $this->_sql_like_expression('LIKE \'' . $this->sql_escape($expression) . '\'');	}	/**	* Returns whether results of a query need to be buffered to run a transaction while iterating over them.	*	* @return bool Whether buffering is required.	*/	function sql_buffer_nested_transactions()	{		return false;	}	/**	* SQL Transaction	* @access private	*/	function sql_transaction($status = 'begin')	{		switch ($status)		{			case 'begin':				// If we are within a transaction we will not open another one, but enclose the current one to not loose data (prevening auto commit)				if ($this->transaction)				{					$this->transactions++;					return true;				}				$result = $this->_sql_transaction('begin');				if (!$result)				{					$this->sql_error();				}				$this->transaction = true;			break;			case 'commit':				// If there was a previously opened transaction we do not commit yet... but count back the number of inner transactions				if ($this->transaction && $this->transactions)				{					$this->transactions--;					return true;				}				// Check if there is a transaction (no transaction can happen if there was an error, with a combined rollback and error returning enabled)				// This implies we have transaction always set for autocommit db's				if (!$this->transaction)				{					return false;				}				$result = $this->_sql_transaction('commit');				if (!$result)				{					$this->sql_error();				}				$this->transaction = false;				$this->transactions = 0;			break;			case 'rollback':				$result = $this->_sql_transaction('rollback');				$this->transaction = false;				$this->transactions = 0;			break;			default:				$result = $this->_sql_transaction($status);			break;		}		return $result;	}	/**	* Build sql statement from array for insert/update/select statements	*	* Idea for this from Ikonboard	* Possible query values: INSERT, INSERT_SELECT, UPDATE, SELECT	*	*/	function sql_build_array($query, $assoc_ary = false)	{		if (!is_array($assoc_ary))		{			return false;		}		$fields = $values = array();		if ($query == 'INSERT' || $query == 'INSERT_SELECT')		{			foreach ($assoc_ary as $key => $var)			{				$fields[] = $key;				if (is_array($var) && is_string($var[0]))				{					// This is used for INSERT_SELECT(s)					$values[] = $var[0];				}				else				{					$values[] = $this->_sql_validate_value($var);				}			}			$query = ($query == 'INSERT') ? ' (' . implode(', ', $fields) . ') VALUES (' . implode(', ', $values) . ')' : ' (' . implode(', ', $fields) . ') SELECT ' . implode(', ', $values) . ' ';		}		else if ($query == 'MULTI_INSERT')		{			trigger_error('The MULTI_INSERT query value is no longer supported. Please use sql_multi_insert() instead.', E_USER_ERROR);		}		else if ($query == 'UPDATE' || $query == 'SELECT')		{			$values = array();			foreach ($assoc_ary as $key => $var)			{				$values[] = "$key = " . $this->_sql_validate_value($var);			}			$query = implode(($query == 'UPDATE') ? ', ' : ' AND ', $values);		}		return $query;	}	/**	* Build IN or NOT IN sql comparison string, uses <> or = on single element	* arrays to improve comparison speed	*	* @access public	* @param	string	$field				name of the sql column that shall be compared	* @param	array	$array				array of values that are allowed (IN) or not allowed (NOT IN)	* @param	bool	$negate				true for NOT IN (), false for IN () (default)	* @param	bool	$allow_empty_set	If true, allow $array to be empty, this function will return 1=1 or 1=0 then. Default to false.	*/	function sql_in_set($field, $array, $negate = false, $allow_empty_set = false)	{		if (!sizeof($array))		{			if (!$allow_empty_set)			{				// Print the backtrace to help identifying the location of the problematic code				$this->sql_error('No values specified for SQL IN comparison');			}			else			{				// NOT IN () actually means everything so use a tautology				if ($negate)				{					return '1=1';				}				// IN () actually means nothing so use a contradiction				else				{					return '1=0';				}			}		}		if (!is_array($array))		{			$array = array($array);		}		if (sizeof($array) == 1)		{			@reset($array);			$var = current($array);			return $field . ($negate ? ' <> ' : ' = ') . $this->_sql_validate_value($var);		}		else		{			return $field . ($negate ? ' NOT IN ' : ' IN ') . '(' . implode(', ', array_map(array($this, '_sql_validate_value'), $array)) . ')';		}	}	/**	* Run binary AND operator on DB column.	* Results in sql statement: "{$column_name} & (1 << {$bit}) {$compare}"	*	* @param string $column_name The column name to use	* @param int $bit The value to use for the AND operator, will be converted to (1 << $bit). Is used by options, using the number schema... 0, 1, 2...29	* @param string $compare Any custom SQL code after the check (for example "= 0")	*/	function sql_bit_and($column_name, $bit, $compare = '')	{		if (method_exists($this, '_sql_bit_and'))		{			return $this->_sql_bit_and($column_name, $bit, $compare);		}		return $column_name . ' & ' . (1 << $bit) . (($compare) ? ' ' . $compare : '');	}	/**	* Run binary OR operator on DB column.	* Results in sql statement: "{$column_name} | (1 << {$bit}) {$compare}"	*	* @param string $column_name The column name to use	* @param int $bit The value to use for the OR operator, will be converted to (1 << $bit). Is used by options, using the number schema... 0, 1, 2...29	* @param string $compare Any custom SQL code after the check (for example "= 0")	*/	function sql_bit_or($column_name, $bit, $compare = '')	{		if (method_exists($this, '_sql_bit_or'))		{			return $this->_sql_bit_or($column_name, $bit, $compare);		}		return $column_name . ' | ' . (1 << $bit) . (($compare) ? ' ' . $compare : '');	}	/**	* Run more than one insert statement.	*	* @param string $table table name to run the statements on	* @param array &$sql_ary multi-dimensional array holding the statement data.	*	* @return bool false if no statements were executed.	* @access public	*/	function sql_multi_insert($table, &$sql_ary)	{		if (!sizeof($sql_ary))		{			return false;		}		if ($this->multi_insert)		{			$ary = array();			foreach ($sql_ary as $id => $_sql_ary)			{				// If by accident the sql array is only one-dimensional we build a normal insert statement				if (!is_array($_sql_ary))				{					return $this->sql_query('INSERT INTO ' . $table . ' ' . $this->sql_build_array('INSERT', $sql_ary));				}				$values = array();				foreach ($_sql_ary as $key => $var)				{					$values[] = $this->_sql_validate_value($var);				}				$ary[] = '(' . implode(', ', $values) . ')';			}			return $this->sql_query('INSERT INTO ' . $table . ' ' . ' (' . implode(', ', array_keys($sql_ary[0])) . ') VALUES ' . implode(', ', $ary));		}		else		{			foreach ($sql_ary as $ary)			{				if (!is_array($ary))				{					return false;				}				$result = $this->sql_query('INSERT INTO ' . $table . ' ' . $this->sql_build_array('INSERT', $ary));				if (!$result)				{					return false;				}			}		}		return true;	}	/**	* Function for validating values	* @access private	*/	function _sql_validate_value($var)	{		if (is_null($var))		{			return 'NULL';		}		else if (is_string($var))		{			return "'" . $this->sql_escape($var) . "'";		}		else		{			return (is_bool($var)) ? intval($var) : $var;		}	}	/**	* Build sql statement from array for select and select distinct statements	*	* Possible query values: SELECT, SELECT_DISTINCT	*/	function sql_build_query($query, $array)	{		$sql = '';		switch ($query)		{			case 'SELECT':			case 'SELECT_DISTINCT';				$sql = str_replace('_', ' ', $query) . ' ' . $array['SELECT'] . ' FROM ';				// Build table array. We also build an alias array for later checks.				$table_array = $aliases = array();				$used_multi_alias = false;				foreach ($array['FROM'] as $table_name => $alias)				{					if (is_array($alias))					{						$used_multi_alias = true;						foreach ($alias as $multi_alias)						{							$table_array[] = $table_name . ' ' . $multi_alias;							$aliases[] = $multi_alias;						}					}					else					{						$table_array[] = $table_name . ' ' . $alias;						$aliases[] = $alias;					}				}				// We run the following code to determine if we need to re-order the table array. ;)				// The reason for this is that for multi-aliased tables (two equal tables) in the FROM statement the last table need to match the first comparison.				// DBMS who rely on this: Oracle, PostgreSQL and MSSQL. For all other DBMS it makes absolutely no difference in which order the table is.				if (!empty($array['LEFT_JOIN']) && sizeof($array['FROM']) > 1 && $used_multi_alias !== false)				{					// Take first LEFT JOIN					$join = current($array['LEFT_JOIN']);					// Determine the table used there (even if there are more than one used, we only want to have one					preg_match('/(' . implode('|', $aliases) . ')\.[^\s]+/U', str_replace(array('(', ')', 'AND', 'OR', ' '), '', $join['ON']), $matches);					// If there is a first join match, we need to make sure the table order is correct					if (!empty($matches[1]))					{						$first_join_match = trim($matches[1]);						$table_array = $last = array();						foreach ($array['FROM'] as $table_name => $alias)						{							if (is_array($alias))							{								foreach ($alias as $multi_alias)								{									($multi_alias === $first_join_match) ? $last[] = $table_name . ' ' . $multi_alias : $table_array[] = $table_name . ' ' . $multi_alias;								}							}							else							{								($alias === $first_join_match) ? $last[] = $table_name . ' ' . $alias : $table_array[] = $table_name . ' ' . $alias;							}						}						$table_array = array_merge($table_array, $last);					}				}				$sql .= $this->_sql_custom_build('FROM', implode(' CROSS JOIN ', $table_array));				if (!empty($array['LEFT_JOIN']))				{					foreach ($array['LEFT_JOIN'] as $join)					{						$sql .= ' LEFT JOIN ' . key($join['FROM']) . ' ' . current($join['FROM']) . ' ON (' . $join['ON'] . ')';					}				}				if (!empty($array['WHERE']))				{					$sql .= ' WHERE ' . $this->_sql_custom_build('WHERE', $array['WHERE']);				}				if (!empty($array['GROUP_BY']))				{					$sql .= ' GROUP BY ' . $array['GROUP_BY'];				}				if (!empty($array['ORDER_BY']))				{					$sql .= ' ORDER BY ' . $array['ORDER_BY'];				}			break;		}		return $sql;	}	/**	* display sql error page	*/	function sql_error($sql = '')	{		global $auth, $user, $config;		// Set var to retrieve errored status		$this->sql_error_triggered = true;		$this->sql_error_sql = $sql;		$this->sql_error_returned = $this->_sql_error();		if (!$this->return_on_error)		{			$message = 'SQL ERROR [ ' . $this->sql_layer . ' ]<br /><br />' . $this->sql_error_returned['message'] . ' [' . $this->sql_error_returned['code'] . ']';			// Show complete SQL error and path to administrators only			// Additionally show complete error on installation or if extended debug mode is enabled			// The DEBUG_EXTRA constant is for development only!			if ((isset($auth) && $auth->acl_get('a_')) || defined('IN_INSTALL') || defined('DEBUG_EXTRA'))			{				// Print out a nice backtrace...				$backtrace = get_backtrace();				$message .= ($sql) ? '<br /><br />SQL<br /><br />' . htmlspecialchars($sql) : '';				$message .= ($backtrace) ? '<br /><br />BACKTRACE<br />' . $backtrace : '';				$message .= '<br />';			}			else			{				// If error occurs in initiating the session we need to use a pre-defined language string				// This could happen if the connection could not be established for example (then we are not able to grab the default language)				if (!isset($user->lang['SQL_ERROR_OCCURRED']))				{					$message .= '<br /><br />An sql error occurred while fetching this page. Please contact an administrator if this problem persists.';				}				else				{					if (!empty($config['board_contact']))					{						$message .= '<br /><br />' . sprintf($user->lang['SQL_ERROR_OCCURRED'], '<a href="mailto:' . htmlspecialchars($config['board_contact']) . '">', '</a>');					}					else					{						$message .= '<br /><br />' . sprintf($user->lang['SQL_ERROR_OCCURRED'], '', '');					}				}			}			if ($this->transaction)			{				$this->sql_transaction('rollback');			}			if (strlen($message) > 1024)			{				// We need to define $msg_long_text here to circumvent text stripping.				global $msg_long_text;				$msg_long_text = $message;				trigger_error(false, E_USER_ERROR);			}			trigger_error($message, E_USER_ERROR);		}		if ($this->transaction)		{			$this->sql_transaction('rollback');		}		return $this->sql_error_returned;	}	/**	* Explain queries	*/	function sql_report($mode, $query = '')	{		global $cache, $starttime, $phpbb_root_path, $user;		if (empty($_REQUEST['explain']))		{			return false;		}		if (!$query && $this->query_hold != '')		{			$query = $this->query_hold;		}		switch ($mode)		{			case 'display':				if (!empty($cache))				{					$cache->unload();				}				$this->sql_close();				$mtime = explode(' ', microtime());				$totaltime = $mtime[0] + $mtime[1] - $starttime;				echo '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">					<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr">					<head>						<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />						<meta http-equiv="Content-Style-Type" content="text/css" />						<meta http-equiv="imagetoolbar" content="no" />						<title>SQL Report</title>						<link href="' . $phpbb_root_path . 'adm/style/admin.css" rel="stylesheet" type="text/css" media="screen" />					</head>					<body id="errorpage">					<div id="wrap">						<div id="page-header">							<a href="' . build_url('explain') . '">Return to previous page</a>						</div>						<div id="page-body">							<div id="acp">							<div class="panel">								<span class="corners-top"><span></span></span>								<div id="content">									<h1>SQL Report</h1>									<br />									<p><b>Page generated in ' . round($totaltime, 4) . " seconds with {$this->num_queries['normal']} queries" . (($this->num_queries['cached']) ? " + {$this->num_queries['cached']} " . (($this->num_queries['cached'] == 1) ? 'query' : 'queries') . ' returning data from cache' : '') . '</b></p>									<p>Time spent on ' . $this->sql_layer . ' queries: <b>' . round($this->sql_time, 5) . 's</b> | Time spent on PHP: <b>' . round($totaltime - $this->sql_time, 5) . 's</b></p>									<br /><br />									' . $this->sql_report . '								</div>								<span class="corners-bottom"><span></span></span>							</div>							</div>						</div>						<div id="page-footer">							Powered by <a href="http://www.phpbb.com/">phpBB</a>&reg; Forum Software &copy; phpBB Group						</div>					</div>					</body>					</html>';				exit_handler();			break;			case 'stop':				$endtime = explode(' ', microtime());				$endtime = $endtime[0] + $endtime[1];				$this->sql_report .= '					<table cellspacing="1">					<thead>					<tr>						<th>Query #' . $this->num_queries['total'] . '</th>					</tr>					</thead>					<tbody>					<tr>						<td class="row3"><textarea style="font-family:\'Courier New\',monospace;width:99%" rows="5" cols="10">' . preg_replace('/\t(AND|OR)(\W)/', "\$1\$2", htmlspecialchars(preg_replace('/[\s]*[\n\r\t]+[\n\r\s\t]*/', "\n", $query))) . '</textarea></td>					</tr>					</tbody>					</table>					' . $this->html_hold . '					<p style="text-align: center;">				';				if ($this->query_result)				{					if (preg_match('/^(UPDATE|DELETE|REPLACE)/', $query))					{						$this->sql_report .= 'Affected rows: <b>' . $this->sql_affectedrows($this->query_result) . '</b> | ';					}					$this->sql_report .= 'Before: ' . sprintf('%.5f', $this->curtime - $starttime) . 's | After: ' . sprintf('%.5f', $endtime - $starttime) . 's | Elapsed: <b>' . sprintf('%.5f', $endtime - $this->curtime) . 's</b>';				}				else				{					$error = $this->sql_error();					$this->sql_report .= '<b style="color: red">FAILED</b> - ' . $this->sql_layer . ' Error ' . $error['code'] . ': ' . htmlspecialchars($error['message']);				}				$this->sql_report .= '</p><br /><br />';				$this->sql_time += $endtime - $this->curtime;			break;			case 'start':				$this->query_hold = $query;				$this->html_hold = '';				$this->_sql_report($mode, $query);				$this->curtime = explode(' ', microtime());				$this->curtime = $this->curtime[0] + $this->curtime[1];			break;			case 'add_select_row':				$html_table = func_get_arg(2);				$row = func_get_arg(3);				if (!$html_table && sizeof($row))				{					$html_table = true;					$this->html_hold .= '<table cellspacing="1"><tr>';					foreach (array_keys($row) as $val)					{						$this->html_hold .= '<th>' . (($val) ? ucwords(str_replace('_', ' ', $val)) : '&nbsp;') . '</th>';					}					$this->html_hold .= '</tr>';				}				$this->html_hold .= '<tr>';				$class = 'row1';				foreach (array_values($row) as $val)				{					$class = ($class == 'row1') ? 'row2' : 'row1';					$this->html_hold .= '<td class="' . $class . '">' . (($val) ? $val : '&nbsp;') . '</td>';				}				$this->html_hold .= '</tr>';				return $html_table;			break;			case 'fromcache':				$this->_sql_report($mode, $query);			break;			case 'record_fromcache':				$endtime = func_get_arg(2);				$splittime = func_get_arg(3);				$time_cache = $endtime - $this->curtime;				$time_db = $splittime - $endtime;				$color = ($time_db > $time_cache) ? 'green' : 'red';				$this->sql_report .= '<table cellspacing="1"><thead><tr><th>Query results obtained from the cache</th></tr></thead><tbody><tr>';				$this->sql_report .= '<td class="row3"><textarea style="font-family:\'Courier New\',monospace;width:99%" rows="5" cols="10">' . preg_replace('/\t(AND|OR)(\W)/', "\$1\$2", htmlspecialchars(preg_replace('/[\s]*[\n\r\t]+[\n\r\s\t]*/', "\n", $query))) . '</textarea></td></tr></tbody></table>';				$this->sql_report .= '<p style="text-align: center;">';				$this->sql_report .= 'Before: ' . sprintf('%.5f', $this->curtime - $starttime) . 's | After: ' . sprintf('%.5f', $endtime - $starttime) . 's | Elapsed [cache]: <b style="color: ' . $color . '">' . sprintf('%.5f', ($time_cache)) . 's</b> | Elapsed [db]: <b>' . sprintf('%.5f', $time_db) . 's</b></p><br /><br />';				// Pad the start time to not interfere with page timing				$starttime += $time_db;			break;			default:				$this->_sql_report($mode, $query);			break;		}		return true;	}}/*** This variable holds the class name to use later*/$sql_db = (!empty($dbms)) ? 'dbal_' . basename($dbms) : 'dbal';?>
<?php/**** @package dbal* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}include_once($phpbb_root_path . 'includes/db/dbal.' . $phpEx);/*** MySQL4 Database Abstraction Layer* Compatible with:* MySQL 3.23+* MySQL 4.0+* MySQL 4.1+* MySQL 5.0+* @package dbal*/class dbal_mysql extends dbal{	var $multi_insert = true;	/**	* Connect to server	* @access public	*/	function sql_connect($sqlserver, $sqluser, $sqlpassword, $database, $port = false, $persistency = false, $new_link = false)	{		$this->persistency = $persistency;		$this->user = $sqluser;		$this->server = $sqlserver . (($port) ? ':' . $port : '');		$this->dbname = $database;		$this->sql_layer = 'mysql4';		$this->db_connect_id = ($this->persistency) ? @mysql_pconnect($this->server, $this->user, $sqlpassword) : @mysql_connect($this->server, $this->user, $sqlpassword, $new_link);		if ($this->db_connect_id && $this->dbname != '')		{			if (@mysql_select_db($this->dbname, $this->db_connect_id))			{				// Determine what version we are using and if it natively supports UNICODE				if (version_compare($this->sql_server_info(true), '4.1.0', '>='))				{					@mysql_query("SET NAMES 'utf8'", $this->db_connect_id);					// enforce strict mode on databases that support it					if (version_compare($this->sql_server_info(true), '5.0.2', '>='))					{						$result = @mysql_query('SELECT @@session.sql_mode AS sql_mode', $this->db_connect_id);						$row = @mysql_fetch_assoc($result);						@mysql_free_result($result);						$modes = array_map('trim', explode(',', $row['sql_mode']));						// TRADITIONAL includes STRICT_ALL_TABLES and STRICT_TRANS_TABLES						if (!in_array('TRADITIONAL', $modes))						{							if (!in_array('STRICT_ALL_TABLES', $modes))							{								$modes[] = 'STRICT_ALL_TABLES';							}							if (!in_array('STRICT_TRANS_TABLES', $modes))							{								$modes[] = 'STRICT_TRANS_TABLES';							}						}						$mode = implode(',', $modes);						@mysql_query("SET SESSION sql_mode='{$mode}'", $this->db_connect_id);					}				}				else if (version_compare($this->sql_server_info(true), '4.0.0', '<'))				{					$this->sql_layer = 'mysql';				}				return $this->db_connect_id;			}		}		return $this->sql_error('');	}	/**	* Version information about used database	* @param bool $raw if true, only return the fetched sql_server_version	* @param bool $use_cache If true, it is safe to retrieve the value from the cache	* @return string sql server version	*/	function sql_server_info($raw = false, $use_cache = true)	{		global $cache;		if (!$use_cache || empty($cache) || ($this->sql_server_version = $cache->get('mysql_version')) === false)		{			$result = @mysql_query('SELECT VERSION() AS version', $this->db_connect_id);			$row = @mysql_fetch_assoc($result);			@mysql_free_result($result);			$this->sql_server_version = $row['version'];			if (!empty($cache) && $use_cache)			{				$cache->put('mysql_version', $this->sql_server_version);			}		}		return ($raw) ? $this->sql_server_version : 'MySQL ' . $this->sql_server_version;	}	/**	* SQL Transaction	* @access private	*/	function _sql_transaction($status = 'begin')	{		switch ($status)		{			case 'begin':				return @mysql_query('BEGIN', $this->db_connect_id);			break;			case 'commit':				return @mysql_query('COMMIT', $this->db_connect_id);			break;			case 'rollback':				return @mysql_query('ROLLBACK', $this->db_connect_id);			break;		}		return true;	}	/**	* Base query method	*	* @param	string	$query		Contains the SQL query which shall be executed	* @param	int		$cache_ttl	Either 0 to avoid caching or the time in seconds which the result shall be kept in cache	* @return	mixed				When casted to bool the returned value returns true on success and false on failure	*	* @access	public	*/	function sql_query($query = '', $cache_ttl = 0)	{		if ($query != '')		{			global $cache;			// EXPLAIN only in extra debug mode			if (defined('DEBUG_EXTRA'))			{				$this->sql_report('start', $query);			}			$this->query_result = ($cache_ttl && method_exists($cache, 'sql_load')) ? $cache->sql_load($query) : false;			$this->sql_add_num_queries($this->query_result);			if ($this->query_result === false)			{				if (($this->query_result = @mysql_query($query, $this->db_connect_id)) === false)				{					$this->sql_error($query);				}				if (defined('DEBUG_EXTRA'))				{					$this->sql_report('stop', $query);				}				if ($cache_ttl && method_exists($cache, 'sql_save'))				{					$this->open_queries[(int) $this->query_result] = $this->query_result;					$cache->sql_save($query, $this->query_result, $cache_ttl);				}				else if (strpos($query, 'SELECT') === 0 && $this->query_result)				{					$this->open_queries[(int) $this->query_result] = $this->query_result;				}			}			else if (defined('DEBUG_EXTRA'))			{				$this->sql_report('fromcache', $query);			}		}		else		{			return false;		}		return $this->query_result;	}	/**	* Build LIMIT query	*/	function _sql_query_limit($query, $total, $offset = 0, $cache_ttl = 0)	{		$this->query_result = false;		// if $total is set to 0 we do not want to limit the number of rows		if ($total == 0)		{			// Having a value of -1 was always a bug			$total = '18446744073709551615';		}		$query .= "\n LIMIT " . ((!empty($offset)) ? $offset . ', ' . $total : $total);		return $this->sql_query($query, $cache_ttl);	}	/**	* Return number of affected rows	*/	function sql_affectedrows()	{		return ($this->db_connect_id) ? @mysql_affected_rows($this->db_connect_id) : false;	}	/**	* Fetch current row	*/	function sql_fetchrow($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_fetchrow($query_id);		}		return ($query_id !== false) ? @mysql_fetch_assoc($query_id) : false;	}	/**	* Seek to given row number	* rownum is zero-based	*/	function sql_rowseek($rownum, &$query_id)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_rowseek($rownum, $query_id);		}		return ($query_id !== false) ? @mysql_data_seek($query_id, $rownum) : false;	}	/**	* Get last inserted id after insert statement	*/	function sql_nextid()	{		return ($this->db_connect_id) ? @mysql_insert_id($this->db_connect_id) : false;	}	/**	* Free sql result	*/	function sql_freeresult($query_id = false)	{		global $cache;		if ($query_id === false)		{			$query_id = $this->query_result;		}		if (isset($cache->sql_rowset[$query_id]))		{			return $cache->sql_freeresult($query_id);		}		if (isset($this->open_queries[(int) $query_id]))		{			unset($this->open_queries[(int) $query_id]);			return @mysql_free_result($query_id);		}		return false;	}	/**	* Escape string used in sql query	*/	function sql_escape($msg)	{		if (!$this->db_connect_id)		{			return @mysql_real_escape_string($msg);		}		return @mysql_real_escape_string($msg, $this->db_connect_id);	}	/**	* Build LIKE expression	* @access private	*/	function _sql_like_expression($expression)	{		return $expression;	}	/**	* Build db-specific query data	* @access private	*/	function _sql_custom_build($stage, $data)	{		switch ($stage)		{			case 'FROM':				$data = '(' . $data . ')';			break;		}		return $data;	}	/**	* return sql error array	* @access private	*/	function _sql_error()	{		if (!$this->db_connect_id)		{			return array(				'message'	=> @mysql_error(),				'code'		=> @mysql_errno()			);		}		return array(			'message'	=> @mysql_error($this->db_connect_id),			'code'		=> @mysql_errno($this->db_connect_id)		);	}	/**	* Close sql connection	* @access private	*/	function _sql_close()	{		return @mysql_close($this->db_connect_id);	}	/**	* Build db-specific report	* @access private	*/	function _sql_report($mode, $query = '')	{		static $test_prof;		// current detection method, might just switch to see the existance of INFORMATION_SCHEMA.PROFILING		if ($test_prof === null)		{			$test_prof = false;			if (version_compare($this->sql_server_info(true), '5.0.37', '>=') && version_compare($this->sql_server_info(true), '5.1', '<'))			{				$test_prof = true;			}		}		switch ($mode)		{			case 'start':				$explain_query = $query;				if (preg_match('/UPDATE ([a-z0-9_]+).*?WHERE(.*)/s', $query, $m))				{					$explain_query = 'SELECT * FROM ' . $m[1] . ' WHERE ' . $m[2];				}				else if (preg_match('/DELETE FROM ([a-z0-9_]+).*?WHERE(.*)/s', $query, $m))				{					$explain_query = 'SELECT * FROM ' . $m[1] . ' WHERE ' . $m[2];				}				if (preg_match('/^SELECT/', $explain_query))				{					$html_table = false;					// begin profiling					if ($test_prof)					{						@mysql_query('SET profiling = 1;', $this->db_connect_id);					}					if ($result = @mysql_query("EXPLAIN $explain_query", $this->db_connect_id))					{						while ($row = @mysql_fetch_assoc($result))						{							$html_table = $this->sql_report('add_select_row', $query, $html_table, $row);						}					}					@mysql_free_result($result);					if ($html_table)					{						$this->html_hold .= '</table>';					}					if ($test_prof)					{						$html_table = false;						// get the last profile						if ($result = @mysql_query('SHOW PROFILE ALL;', $this->db_connect_id))						{							$this->html_hold .= '<br />';							while ($row = @mysql_fetch_assoc($result))							{								// make <unknown> HTML safe								if (!empty($row['Source_function']))								{									$row['Source_function'] = str_replace(array('<', '>'), array('&lt;', '&gt;'), $row['Source_function']);								}								// remove unsupported features								foreach ($row as $key => $val)								{									if ($val === null)									{										unset($row[$key]);									}								}								$html_table = $this->sql_report('add_select_row', $query, $html_table, $row);							}						}						@mysql_free_result($result);						if ($html_table)						{							$this->html_hold .= '</table>';						}						@mysql_query('SET profiling = 0;', $this->db_connect_id);					}				}			break;			case 'fromcache':				$endtime = explode(' ', microtime());				$endtime = $endtime[0] + $endtime[1];				$result = @mysql_query($query, $this->db_connect_id);				while ($void = @mysql_fetch_assoc($result))				{					// Take the time spent on parsing rows into account				}				@mysql_free_result($result);				$splittime = explode(' ', microtime());				$splittime = $splittime[0] + $splittime[1];				$this->sql_report('record_fromcache', $query, $endtime, $splittime);			break;		}	}}?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}// Common global functions/*** set_var** Set variable, used by {@link request_var the request_var function}** @access private*/function set_var(&$result, $var, $type, $multibyte = false){	settype($var, $type);	$result = $var;	if ($type == 'string')	{		$result = trim(htmlspecialchars(str_replace(array("\r\n", "\r", "\0"), array("\n", "\n", ''), $result), ENT_COMPAT, 'UTF-8'));		if (!empty($result))		{			// Make sure multibyte characters are wellformed			if ($multibyte)			{				if (!preg_match('/^./u', $result))				{					$result = '';				}			}			else			{				// no multibyte, allow only ASCII (0-127)				$result = preg_replace('/[\x80-\xFF]/', '?', $result);			}		}		$result = (STRIP) ? stripslashes($result) : $result;	}}/*** request_var** Used to get passed variable*/function request_var($var_name, $default, $multibyte = false, $cookie = false){	if (!$cookie && isset($_COOKIE[$var_name]))	{		if (!isset($_GET[$var_name]) && !isset($_POST[$var_name]))		{			return (is_array($default)) ? array() : $default;		}		$_REQUEST[$var_name] = isset($_POST[$var_name]) ? $_POST[$var_name] : $_GET[$var_name];	}	$super_global = ($cookie) ? '_COOKIE' : '_REQUEST';	if (!isset($GLOBALS[$super_global][$var_name]) || is_array($GLOBALS[$super_global][$var_name]) != is_array($default))	{		return (is_array($default)) ? array() : $default;	}	$var = $GLOBALS[$super_global][$var_name];	if (!is_array($default))	{		$type = gettype($default);	}	else	{		list($key_type, $type) = each($default);		$type = gettype($type);		$key_type = gettype($key_type);		if ($type == 'array')		{			reset($default);			$default = current($default);			list($sub_key_type, $sub_type) = each($default);			$sub_type = gettype($sub_type);			$sub_type = ($sub_type == 'array') ? 'NULL' : $sub_type;			$sub_key_type = gettype($sub_key_type);		}	}	if (is_array($var))	{		$_var = $var;		$var = array();		foreach ($_var as $k => $v)		{			set_var($k, $k, $key_type);			if ($type == 'array' && is_array($v))			{				foreach ($v as $_k => $_v)				{					if (is_array($_v))					{						$_v = null;					}					set_var($_k, $_k, $sub_key_type, $multibyte);					set_var($var[$k][$_k], $_v, $sub_type, $multibyte);				}			}			else			{				if ($type == 'array' || is_array($v))				{					$v = null;				}				set_var($var[$k], $v, $type, $multibyte);			}		}	}	else	{		set_var($var, $var, $type, $multibyte);	}	return $var;}/*** Set config value. Creates missing config entry.*/function set_config($config_name, $config_value, $is_dynamic = false){	global $db, $cache, $config;	$sql = 'UPDATE ' . CONFIG_TABLE . "		SET config_value = '" . $db->sql_escape($config_value) . "'		WHERE config_name = '" . $db->sql_escape($config_name) . "'";	$db->sql_query($sql);	if (!$db->sql_affectedrows() && !isset($config[$config_name]))	{		$sql = 'INSERT INTO ' . CONFIG_TABLE . ' ' . $db->sql_build_array('INSERT', array(			'config_name'	=> $config_name,			'config_value'	=> $config_value,			'is_dynamic'	=> ($is_dynamic) ? 1 : 0));		$db->sql_query($sql);	}	$config[$config_name] = $config_value;	if (!$is_dynamic)	{		$cache->destroy('config');	}}/*** Set dynamic config value with arithmetic operation.*/function set_config_count($config_name, $increment, $is_dynamic = false){	global $db, $cache;	switch ($db->sql_layer)	{		case 'firebird':			// Precision must be from 1 to 18			$sql_update = 'CAST(CAST(config_value as DECIMAL(18, 0)) + ' . (int) $increment . ' as VARCHAR(255))';		break;		case 'postgres':			// Need to cast to text first for PostgreSQL 7.x			$sql_update = 'CAST(CAST(config_value::text as DECIMAL(255, 0)) + ' . (int) $increment . ' as VARCHAR(255))';		break;		// MySQL, SQlite, mssql, mssql_odbc, oracle		default:			$sql_update = 'config_value + ' . (int) $increment;		break;	}	$db->sql_query('UPDATE ' . CONFIG_TABLE . ' SET config_value = ' . $sql_update . " WHERE config_name = '" . $db->sql_escape($config_name) . "'");	if (!$is_dynamic)	{		$cache->destroy('config');	}}/*** Generates an alphanumeric random string of given length** @return string*/function gen_rand_string($num_chars = 8){	// [a, z] + [0, 9] = 36	return substr(strtoupper(base_convert(unique_id(), 16, 36)), 0, $num_chars);}/*** Generates a user-friendly alphanumeric random string of given length* We remove 0 and O so users cannot confuse those in passwords etc.** @return string*/function gen_rand_string_friendly($num_chars = 8){	$rand_str = unique_id();	// Remove Z and Y from the base_convert(), replace 0 with Z and O with Y	// [a, z] + [0, 9] - {z, y} = [a, z] + [0, 9] - {0, o} = 34	$rand_str = str_replace(array('0', 'O'), array('Z', 'Y'), strtoupper(base_convert($rand_str, 16, 34)));	return substr($rand_str, 0, $num_chars);}/*** Return unique id* @param string $extra additional entropy*/function unique_id($extra = 'c'){	static $dss_seeded = false;	global $config;	$val = $config['rand_seed'] . microtime();	$val = md5($val);	$config['rand_seed'] = md5($config['rand_seed'] . $val . $extra);	if ($dss_seeded !== true && ($config['rand_seed_last_update'] < time() - rand(1,10)))	{		set_config('rand_seed_last_update', time(), true);		set_config('rand_seed', $config['rand_seed'], true);		$dss_seeded = true;	}	return substr($val, 4, 16);}/*** Wrapper for mt_rand() which allows swapping $min and $max parameters.** PHP does not allow us to swap the order of the arguments for mt_rand() anymore.* (since PHP 5.3.4, see http://bugs.php.net/46587)** @param int $min		Lowest value to be returned* @param int $max		Highest value to be returned** @return int			Random integer between $min and $max (or $max and $min)*/function phpbb_mt_rand($min, $max){	return ($min > $max) ? mt_rand($max, $min) : mt_rand($min, $max);}/*** Wrapper for getdate() which returns the equivalent array for UTC timestamps.** @param int $time		Unix timestamp (optional)** @return array			Returns an associative array of information related to the timestamp.*						See http://www.php.net/manual/en/function.getdate.php*/function phpbb_gmgetdate($time = false){	if ($time === false)	{		$time = time();	}	// getdate() interprets timestamps in local time.	// What follows uses the fact that getdate() and	// date('Z') balance each other out.	return getdate($time - date('Z'));}/*** Return formatted string for filesizes** @param int	$value			filesize in bytes* @param bool	$string_only	true if language string should be returned* @param array	$allowed_units	only allow these units (data array indexes)** @return mixed					data array if $string_only is false* @author bantu*/function get_formatted_filesize($value, $string_only = true, $allowed_units = false){	global $user;	$available_units = array(		'gb' => array(			'min' 		=> 1073741824, // pow(2, 30)			'index'		=> 3,			'si_unit'	=> 'GB',			'iec_unit'	=> 'GIB',		),		'mb' => array(			'min'		=> 1048576, // pow(2, 20)			'index'		=> 2,			'si_unit'	=> 'MB',			'iec_unit'	=> 'MIB',		),		'kb' => array(			'min'		=> 1024, // pow(2, 10)			'index'		=> 1,			'si_unit'	=> 'KB',			'iec_unit'	=> 'KIB',		),		'b' => array(			'min'		=> 0,			'index'		=> 0,			'si_unit'	=> 'BYTES', // Language index			'iec_unit'	=> 'BYTES',  // Language index		),	);	foreach ($available_units as $si_identifier => $unit_info)	{		if (!empty($allowed_units) && $si_identifier != 'b' && !in_array($si_identifier, $allowed_units))		{			continue;		}		if ($value >= $unit_info['min'])		{			$unit_info['si_identifier'] = $si_identifier;			break;		}	}	unset($available_units);	for ($i = 0; $i < $unit_info['index']; $i++)	{		$value /= 1024;	}	$value = round($value, 2);	// Lookup units in language dictionary	$unit_info['si_unit'] = (isset($user->lang[$unit_info['si_unit']])) ? $user->lang[$unit_info['si_unit']] : $unit_info['si_unit'];	$unit_info['iec_unit'] = (isset($user->lang[$unit_info['iec_unit']])) ? $user->lang[$unit_info['iec_unit']] : $unit_info['iec_unit'];	// Default to IEC	$unit_info['unit'] = $unit_info['iec_unit'];	if (!$string_only)	{		$unit_info['value'] = $value;		return $unit_info;	}	return $value  . ' ' . $unit_info['unit'];}/*** Determine whether we are approaching the maximum execution time. Should be called once* at the beginning of the script in which it's used.* @return	bool	Either true if the maximum execution time is nearly reached, or false*					if some time is still left.*/function still_on_time($extra_time = 15){	static $max_execution_time, $start_time;	$time = explode(' ', microtime());	$current_time = $time[0] + $time[1];	if (empty($max_execution_time))	{		$max_execution_time = (function_exists('ini_get')) ? (int) @ini_get('max_execution_time') : (int) @get_cfg_var('max_execution_time');		// If zero, then set to something higher to not let the user catch the ten seconds barrier.		if ($max_execution_time === 0)		{			$max_execution_time = 50 + $extra_time;		}		$max_execution_time = min(max(10, ($max_execution_time - $extra_time)), 50);		// For debugging purposes		// $max_execution_time = 10;		global $starttime;		$start_time = (empty($starttime)) ? $current_time : $starttime;	}	return (ceil($current_time - $start_time) < $max_execution_time) ? true : false;}/**** @version Version 0.1 / slightly modified for phpBB 3.0.x (using $H$ as hash type identifier)** Portable PHP password hashing framework.** Written by Solar Designer <solar at openwall.com> in 2004-2006 and placed in* the public domain.** There's absolutely no warranty.** The homepage URL for this framework is:**	http://www.openwall.com/phpass/** Please be sure to update the Version line if you edit this file in any way.* It is suggested that you leave the main version number intact, but indicate* your project name (after the slash) and add your own revision information.** Please do not change the "private" password hashing method implemented in* here, thereby making your hashes incompatible.  However, if you must, please* change the hash type identifier (the "$P$") to something different.** Obviously, since this code is in the public domain, the above are not* requirements (there can be none), but merely suggestions.*** Hash the password*/function phpbb_hash($password){	$itoa64 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';	$random_state = unique_id();	$random = '';	$count = 6;	if (($fh = @fopen('/dev/urandom', 'rb')))	{		$random = fread($fh, $count);		fclose($fh);	}	if (strlen($random) < $count)	{		$random = '';		for ($i = 0; $i < $count; $i += 16)		{			$random_state = md5(unique_id() . $random_state);			$random .= pack('H*', md5($random_state));		}		$random = substr($random, 0, $count);	}	$hash = _hash_crypt_private($password, _hash_gensalt_private($random, $itoa64), $itoa64);	if (strlen($hash) == 34)	{		return $hash;	}	return md5($password);}/*** Check for correct password** @param string $password The password in plain text* @param string $hash The stored password hash** @return bool Returns true if the password is correct, false if not.*/function phpbb_check_hash($password, $hash){	$itoa64 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';	if (strlen($hash) == 34)	{		return (_hash_crypt_private($password, $hash, $itoa64) === $hash) ? true : false;	}	return (md5($password) === $hash) ? true : false;}/*** Generate salt for hash generation*/function _hash_gensalt_private($input, &$itoa64, $iteration_count_log2 = 6){	if ($iteration_count_log2 < 4 || $iteration_count_log2 > 31)	{		$iteration_count_log2 = 8;	}	$output = '$H$';	$output .= $itoa64[min($iteration_count_log2 + ((PHP_VERSION >= 5) ? 5 : 3), 30)];	$output .= _hash_encode64($input, 6, $itoa64);	return $output;}/*** Encode hash*/function _hash_encode64($input, $count, &$itoa64){	$output = '';	$i = 0;	do	{		$value = ord($input[$i++]);		$output .= $itoa64[$value & 0x3f];		if ($i < $count)		{			$value |= ord($input[$i]) << 8;		}		$output .= $itoa64[($value >> 6) & 0x3f];		if ($i++ >= $count)		{			break;		}		if ($i < $count)		{			$value |= ord($input[$i]) << 16;		}		$output .= $itoa64[($value >> 12) & 0x3f];		if ($i++ >= $count)		{			break;		}		$output .= $itoa64[($value >> 18) & 0x3f];	}	while ($i < $count);	return $output;}/*** The crypt function/replacement*/function _hash_crypt_private($password, $setting, &$itoa64){	$output = '*';	// Check for correct hash	if (substr($setting, 0, 3) != '$H$' && substr($setting, 0, 3) != '$P$')	{		return $output;	}	$count_log2 = strpos($itoa64, $setting[3]);	if ($count_log2 < 7 || $count_log2 > 30)	{		return $output;	}	$count = 1 << $count_log2;	$salt = substr($setting, 4, 8);	if (strlen($salt) != 8)	{		return $output;	}	/**	* We're kind of forced to use MD5 here since it's the only	* cryptographic primitive available in all versions of PHP	* currently in use.  To implement our own low-level crypto	* in PHP would result in much worse performance and	* consequently in lower iteration counts and hashes that are	* quicker to crack (by non-PHP code).	*/	if (PHP_VERSION >= 5)	{		$hash = md5($salt . $password, true);		do		{			$hash = md5($hash . $password, true);		}		while (--$count);	}	else	{		$hash = pack('H*', md5($salt . $password));		do		{			$hash = pack('H*', md5($hash . $password));		}		while (--$count);	}	$output = substr($setting, 0, 12);	$output .= _hash_encode64($hash, 16, $itoa64);	return $output;}/*** Hashes an email address to a big integer** @param string $email		Email address** @return string			Unsigned Big Integer*/function phpbb_email_hash($email){	return sprintf('%u', crc32(strtolower($email))) . strlen($email);}/*** Wrapper for version_compare() that allows using uppercase A and B* for alpha and beta releases.** See http://www.php.net/manual/en/function.version-compare.php** @param string $version1		First version number* @param string $version2		Second version number* @param string $operator		Comparison operator (optional)** @return mixed					Boolean (true, false) if comparison operator is specified.*								Integer (-1, 0, 1) otherwise.*/function phpbb_version_compare($version1, $version2, $operator = null){	$version1 = strtolower($version1);	$version2 = strtolower($version2);	if (is_null($operator))	{		return version_compare($version1, $version2);	}	else	{		return version_compare($version1, $version2, $operator);	}}/*** Global function for chmodding directories and files for internal use** This function determines owner and group whom the file belongs to and user and group of PHP and then set safest possible file permissions.* The function determines owner and group from common.php file and sets the same to the provided file.* The function uses bit fields to build the permissions.* The function sets the appropiate execute bit on directories.** Supported constants representing bit fields are:** CHMOD_ALL - all permissions (7)* CHMOD_READ - read permission (4)* CHMOD_WRITE - write permission (2)* CHMOD_EXECUTE - execute permission (1)** NOTE: The function uses POSIX extension and fileowner()/filegroup() functions. If any of them is disabled, this function tries to build proper permissions, by calling is_readable() and is_writable() functions.** @param string	$filename	The file/directory to be chmodded* @param int	$perms		Permissions to set** @return bool	true on success, otherwise false* @author faw, phpBB Group*/function phpbb_chmod($filename, $perms = CHMOD_READ){	static $_chmod_info;	// Return if the file no longer exists.	if (!file_exists($filename))	{		return false;	}	// Determine some common vars	if (empty($_chmod_info))	{		if (!function_exists('fileowner') || !function_exists('filegroup'))		{			// No need to further determine owner/group - it is unknown			$_chmod_info['process'] = false;		}		else		{			global $phpbb_root_path, $phpEx;			// Determine owner/group of common.php file and the filename we want to change here			$common_php_owner = @fileowner($phpbb_root_path . 'common.' . $phpEx);			$common_php_group = @filegroup($phpbb_root_path . 'common.' . $phpEx);			// And the owner and the groups PHP is running under.			$php_uid = (function_exists('posix_getuid')) ? @posix_getuid() : false;			$php_gids = (function_exists('posix_getgroups')) ? @posix_getgroups() : false;			// If we are unable to get owner/group, then do not try to set them by guessing			if (!$php_uid || empty($php_gids) || !$common_php_owner || !$common_php_group)			{				$_chmod_info['process'] = false;			}			else			{				$_chmod_info = array(					'process'		=> true,					'common_owner'	=> $common_php_owner,					'common_group'	=> $common_php_group,					'php_uid'		=> $php_uid,					'php_gids'		=> $php_gids,				);			}		}	}	if ($_chmod_info['process'])	{		$file_uid = @fileowner($filename);		$file_gid = @filegroup($filename);		// Change owner		if (@chown($filename, $_chmod_info['common_owner']))		{			clearstatcache();			$file_uid = @fileowner($filename);		}		// Change group		if (@chgrp($filename, $_chmod_info['common_group']))		{			clearstatcache();			$file_gid = @filegroup($filename);		}		// If the file_uid/gid now match the one from common.php we can process further, else we are not able to change something		if ($file_uid != $_chmod_info['common_owner'] || $file_gid != $_chmod_info['common_group'])		{			$_chmod_info['process'] = false;		}	}	// Still able to process?	if ($_chmod_info['process'])	{		if ($file_uid == $_chmod_info['php_uid'])		{			$php = 'owner';		}		else if (in_array($file_gid, $_chmod_info['php_gids']))		{			$php = 'group';		}		else		{			// Since we are setting the everyone bit anyway, no need to do expensive operations			$_chmod_info['process'] = false;		}	}	// We are not able to determine or change something	if (!$_chmod_info['process'])	{		$php = 'other';	}	// Owner always has read/write permission	$owner = CHMOD_READ | CHMOD_WRITE;	if (is_dir($filename))	{		$owner |= CHMOD_EXECUTE;		// Only add execute bit to the permission if the dir needs to be readable		if ($perms & CHMOD_READ)		{			$perms |= CHMOD_EXECUTE;		}	}	switch ($php)	{		case 'owner':			$result = @chmod($filename, ($owner << 6) + (0 << 3) + (0 << 0));			clearstatcache();			if (is_readable($filename) && phpbb_is_writable($filename))			{				break;			}		case 'group':			$result = @chmod($filename, ($owner << 6) + ($perms << 3) + (0 << 0));			clearstatcache();			if ((!($perms & CHMOD_READ) || is_readable($filename)) && (!($perms & CHMOD_WRITE) || phpbb_is_writable($filename)))			{				break;			}		case 'other':			$result = @chmod($filename, ($owner << 6) + ($perms << 3) + ($perms << 0));			clearstatcache();			if ((!($perms & CHMOD_READ) || is_readable($filename)) && (!($perms & CHMOD_WRITE) || phpbb_is_writable($filename)))			{				break;			}		default:			return false;		break;	}	return $result;}/*** Test if a file/directory is writable** This function calls the native is_writable() when not running under* Windows and it is not disabled.** @param string $file Path to perform write test on* @return bool True when the path is writable, otherwise false.*/function phpbb_is_writable($file){	if (strtolower(substr(PHP_OS, 0, 3)) === 'win' || !function_exists('is_writable'))	{		if (file_exists($file))		{			// Canonicalise path to absolute path			$file = phpbb_realpath($file);			if (is_dir($file))			{				// Test directory by creating a file inside the directory				$result = @tempnam($file, 'i_w');				if (is_string($result) && file_exists($result))				{					unlink($result);					// Ensure the file is actually in the directory (returned realpathed)					return (strpos($result, $file) === 0) ? true : false;				}			}			else			{				$handle = @fopen($file, 'r+');				if (is_resource($handle))				{					fclose($handle);					return true;				}			}		}		else		{			// file does not exist test if we can write to the directory			$dir = dirname($file);			if (file_exists($dir) && is_dir($dir) && phpbb_is_writable($dir))			{				return true;			}		}		return false;	}	else	{		return is_writable($file);	}}// Compatibility functionsif (!function_exists('array_combine')){	/**	* A wrapper for the PHP5 function array_combine()	* @param array $keys contains keys for the resulting array	* @param array $values contains values for the resulting array	*	* @return Returns an array by using the values from the keys array as keys and the	* 	values from the values array as the corresponding values. Returns false if the	* 	number of elements for each array isn't equal or if the arrays are empty.	*/	function array_combine($keys, $values)	{		$keys = array_values($keys);		$values = array_values($values);		$n = sizeof($keys);		$m = sizeof($values);		if (!$n || !$m || ($n != $m))		{			return false;		}		$combined = array();		for ($i = 0; $i < $n; $i++)		{			$combined[$keys[$i]] = $values[$i];		}		return $combined;	}}if (!function_exists('str_split')){	/**	* A wrapper for the PHP5 function str_split()	* @param array $string contains the string to be converted	* @param array $split_length contains the length of each chunk	*	* @return  Converts a string to an array. If the optional split_length parameter is specified,	*  	the returned array will be broken down into chunks with each being split_length in length,	*  	otherwise each chunk will be one character in length. FALSE is returned if split_length is	*  	less than 1. If the split_length length exceeds the length of string, the entire string is	*  	returned as the first (and only) array element.	*/	function str_split($string, $split_length = 1)	{		if ($split_length < 1)		{			return false;		}		else if ($split_length >= strlen($string))		{			return array($string);		}		else		{			preg_match_all('#.{1,' . $split_length . '}#s', $string, $matches);			return $matches[0];		}	}}if (!function_exists('stripos')){	/**	* A wrapper for the PHP5 function stripos	* Find position of first occurrence of a case-insensitive string	*	* @param string $haystack is the string to search in	* @param string $needle is the string to search for	*	* @return mixed Returns the numeric position of the first occurrence of needle in the haystack string. Unlike strpos(), stripos() is case-insensitive.	* Note that the needle may be a string of one or more characters.	* If needle is not found, stripos() will return boolean FALSE.	*/	function stripos($haystack, $needle)	{		if (preg_match('#' . preg_quote($needle, '#') . '#i', $haystack, $m))		{			return strpos($haystack, $m[0]);		}		return false;	}}/*** Checks if a path ($path) is absolute or relative** @param string $path Path to check absoluteness of* @return boolean*/function is_absolute($path){	return ($path[0] == '/' || (DIRECTORY_SEPARATOR == '\\' && preg_match('#^[a-z]:[/\\\]#i', $path))) ? true : false;}/*** @author Chris Smith <chris@project-minerva.org>* @copyright 2006 Project Minerva Team* @param string $path The path which we should attempt to resolve.* @return mixed*/function phpbb_own_realpath($path){	// Now to perform funky shizzle	// Switch to use UNIX slashes	$path = str_replace(DIRECTORY_SEPARATOR, '/', $path);	$path_prefix = '';	// Determine what sort of path we have	if (is_absolute($path))	{		$absolute = true;		if ($path[0] == '/')		{			// Absolute path, *NIX style			$path_prefix = '';		}		else		{			// Absolute path, Windows style			// Remove the drive letter and colon			$path_prefix = $path[0] . ':';			$path = substr($path, 2);		}	}	else	{		// Relative Path		// Prepend the current working directory		if (function_exists('getcwd'))		{			// This is the best method, hopefully it is enabled!			$path = str_replace(DIRECTORY_SEPARATOR, '/', getcwd()) . '/' . $path;			$absolute = true;			if (preg_match('#^[a-z]:#i', $path))			{				$path_prefix = $path[0] . ':';				$path = substr($path, 2);			}			else			{				$path_prefix = '';			}		}		else if (isset($_SERVER['SCRIPT_FILENAME']) && !empty($_SERVER['SCRIPT_FILENAME']))		{			// Warning: If chdir() has been used this will lie!			// Warning: This has some problems sometime (CLI can create them easily)			$path = str_replace(DIRECTORY_SEPARATOR, '/', dirname($_SERVER['SCRIPT_FILENAME'])) . '/' . $path;			$absolute = true;			$path_prefix = '';		}		else		{			// We have no way of getting the absolute path, just run on using relative ones.			$absolute = false;			$path_prefix = '.';		}	}	// Remove any repeated slashes	$path = preg_replace('#/{2,}#', '/', $path);	// Remove the slashes from the start and end of the path	$path = trim($path, '/');	// Break the string into little bits for us to nibble on	$bits = explode('/', $path);	// Remove any . in the path, renumber array for the loop below	$bits = array_values(array_diff($bits, array('.')));	// Lets get looping, run over and resolve any .. (up directory)	for ($i = 0, $max = sizeof($bits); $i < $max; $i++)	{		// @todo Optimise		if ($bits[$i] == '..' )		{			if (isset($bits[$i - 1]))			{				if ($bits[$i - 1] != '..')				{					// We found a .. and we are able to traverse upwards, lets do it!					unset($bits[$i]);					unset($bits[$i - 1]);					$i -= 2;					$max -= 2;					$bits = array_values($bits);				}			}			else if ($absolute) // ie. !isset($bits[$i - 1]) && $absolute			{				// We have an absolute path trying to descend above the root of the filesystem				// ... Error!				return false;			}		}	}	// Prepend the path prefix	array_unshift($bits, $path_prefix);	$resolved = '';	$max = sizeof($bits) - 1;	// Check if we are able to resolve symlinks, Windows cannot.	$symlink_resolve = (function_exists('readlink')) ? true : false;	foreach ($bits as $i => $bit)	{		if (@is_dir("$resolved/$bit") || ($i == $max && @is_file("$resolved/$bit")))		{			// Path Exists			if ($symlink_resolve && is_link("$resolved/$bit") && ($link = readlink("$resolved/$bit")))			{				// Resolved a symlink.				$resolved = $link . (($i == $max) ? '' : '/');				continue;			}		}		else		{			// Something doesn't exist here!			// This is correct realpath() behaviour but sadly open_basedir and safe_mode make this problematic			// return false;		}		$resolved .= $bit . (($i == $max) ? '' : '/');	}	// @todo If the file exists fine and open_basedir only has one path we should be able to prepend it	// because we must be inside that basedir, the question is where...	// @internal The slash in is_dir() gets around an open_basedir restriction	if (!@file_exists($resolved) || (!@is_dir($resolved . '/') && !is_file($resolved)))	{		return false;	}	// Put the slashes back to the native operating systems slashes	$resolved = str_replace('/', DIRECTORY_SEPARATOR, $resolved);	// Check for DIRECTORY_SEPARATOR at the end (and remove it!)	if (substr($resolved, -1) == DIRECTORY_SEPARATOR)	{		return substr($resolved, 0, -1);	}	return $resolved; // We got here, in the end!}if (!function_exists('realpath')){	/**	* A wrapper for realpath	* @ignore	*/	function phpbb_realpath($path)	{		return phpbb_own_realpath($path);	}}else{	/**	* A wrapper for realpath	*/	function phpbb_realpath($path)	{		$realpath = realpath($path);		// Strangely there are provider not disabling realpath but returning strange values. :o		// We at least try to cope with them.		if ($realpath === $path || $realpath === false)		{			return phpbb_own_realpath($path);		}		// Check for DIRECTORY_SEPARATOR at the end (and remove it!)		if (substr($realpath, -1) == DIRECTORY_SEPARATOR)		{			$realpath = substr($realpath, 0, -1);		}		return $realpath;	}}if (!function_exists('htmlspecialchars_decode')){	/**	* A wrapper for htmlspecialchars_decode	* @ignore	*/	function htmlspecialchars_decode($string, $quote_style = ENT_COMPAT)	{		return strtr($string, array_flip(get_html_translation_table(HTML_SPECIALCHARS, $quote_style)));	}}// functions used for building option fields/*** Pick a language, any language ...*/function language_select($default = ''){	global $db;	$sql = 'SELECT lang_iso, lang_local_name		FROM ' . LANG_TABLE . '		ORDER BY lang_english_name';	$result = $db->sql_query($sql);	$lang_options = '';	while ($row = $db->sql_fetchrow($result))	{		$selected = ($row['lang_iso'] == $default) ? ' selected="selected"' : '';		$lang_options .= '<option value="' . $row['lang_iso'] . '"' . $selected . '>' . $row['lang_local_name'] . '</option>';	}	$db->sql_freeresult($result);	return $lang_options;}/*** Pick a template/theme combo,*/function style_select($default = '', $all = false){	global $db;	$sql_where = (!$all) ? 'WHERE style_active = 1 ' : '';	$sql = 'SELECT style_id, style_name		FROM ' . STYLES_TABLE . "		$sql_where		ORDER BY style_name";	$result = $db->sql_query($sql);	$style_options = '';	while ($row = $db->sql_fetchrow($result))	{		$selected = ($row['style_id'] == $default) ? ' selected="selected"' : '';		$style_options .= '<option value="' . $row['style_id'] . '"' . $selected . '>' . $row['style_name'] . '</option>';	}	$db->sql_freeresult($result);	return $style_options;}/*** Pick a timezone*/function tz_select($default = '', $truncate = false){	global $user;	$tz_select = '';	foreach ($user->lang['tz_zones'] as $offset => $zone)	{		if ($truncate)		{			$zone_trunc = truncate_string($zone, 50, 255, false, '...');		}		else		{			$zone_trunc = $zone;		}		if (is_numeric($offset))		{			$selected = ($offset == $default) ? ' selected="selected"' : '';			$tz_select .= '<option title="' . $zone . '" value="' . $offset . '"' . $selected . '>' . $zone_trunc . '</option>';		}	}	return $tz_select;}// Functions handling topic/post tracking/marking/*** Marks a topic/forum as read* Marks a topic as posted to** @param int $user_id can only be used with $mode == 'post'*/function markread($mode, $forum_id = false, $topic_id = false, $post_time = 0, $user_id = 0){	global $db, $user, $config;	if ($mode == 'all')	{		if ($forum_id === false || !sizeof($forum_id))		{			if ($config['load_db_lastread'] && $user->data['is_registered'])			{				// Mark all forums read (index page)				$db->sql_query('DELETE FROM ' . TOPICS_TRACK_TABLE . " WHERE user_id = {$user->data['user_id']}");				$db->sql_query('DELETE FROM ' . FORUMS_TRACK_TABLE . " WHERE user_id = {$user->data['user_id']}");				$db->sql_query('UPDATE ' . USERS_TABLE . ' SET user_lastmark = ' . time() . " WHERE user_id = {$user->data['user_id']}");			}			else if ($config['load_anon_lastread'] || $user->data['is_registered'])			{				$tracking_topics = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';				$tracking_topics = ($tracking_topics) ? tracking_unserialize($tracking_topics) : array();				unset($tracking_topics['tf']);				unset($tracking_topics['t']);				unset($tracking_topics['f']);				$tracking_topics['l'] = base_convert(time() - $config['board_startdate'], 10, 36);				$user->set_cookie('track', tracking_serialize($tracking_topics), time() + 31536000);				$_COOKIE[$config['cookie_name'] . '_track'] = (STRIP) ? addslashes(tracking_serialize($tracking_topics)) : tracking_serialize($tracking_topics);				unset($tracking_topics);				if ($user->data['is_registered'])				{					$db->sql_query('UPDATE ' . USERS_TABLE . ' SET user_lastmark = ' . time() . " WHERE user_id = {$user->data['user_id']}");				}			}		}		return;	}	else if ($mode == 'topics')	{		// Mark all topics in forums read		if (!is_array($forum_id))		{			$forum_id = array($forum_id);		}		// Add 0 to forums array to mark global announcements correctly		// $forum_id[] = 0;		if ($config['load_db_lastread'] && $user->data['is_registered'])		{			$sql = 'DELETE FROM ' . TOPICS_TRACK_TABLE . "				WHERE user_id = {$user->data['user_id']}					AND " . $db->sql_in_set('forum_id', $forum_id);			$db->sql_query($sql);			$sql = 'SELECT forum_id				FROM ' . FORUMS_TRACK_TABLE . "				WHERE user_id = {$user->data['user_id']}					AND " . $db->sql_in_set('forum_id', $forum_id);			$result = $db->sql_query($sql);			$sql_update = array();			while ($row = $db->sql_fetchrow($result))			{				$sql_update[] = (int) $row['forum_id'];			}			$db->sql_freeresult($result);			if (sizeof($sql_update))			{				$sql = 'UPDATE ' . FORUMS_TRACK_TABLE . '					SET mark_time = ' . time() . "					WHERE user_id = {$user->data['user_id']}						AND " . $db->sql_in_set('forum_id', $sql_update);				$db->sql_query($sql);			}			if ($sql_insert = array_diff($forum_id, $sql_update))			{				$sql_ary = array();				foreach ($sql_insert as $f_id)				{					$sql_ary[] = array(						'user_id'	=> (int) $user->data['user_id'],						'forum_id'	=> (int) $f_id,						'mark_time'	=> time()					);				}				$db->sql_multi_insert(FORUMS_TRACK_TABLE, $sql_ary);			}		}		else if ($config['load_anon_lastread'] || $user->data['is_registered'])		{			$tracking = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';			$tracking = ($tracking) ? tracking_unserialize($tracking) : array();			foreach ($forum_id as $f_id)			{				$topic_ids36 = (isset($tracking['tf'][$f_id])) ? $tracking['tf'][$f_id] : array();				if (isset($tracking['tf'][$f_id]))				{					unset($tracking['tf'][$f_id]);				}				foreach ($topic_ids36 as $topic_id36)				{					unset($tracking['t'][$topic_id36]);				}				if (isset($tracking['f'][$f_id]))				{					unset($tracking['f'][$f_id]);				}				$tracking['f'][$f_id] = base_convert(time() - $config['board_startdate'], 10, 36);			}			if (isset($tracking['tf']) && empty($tracking['tf']))			{				unset($tracking['tf']);			}			$user->set_cookie('track', tracking_serialize($tracking), time() + 31536000);			$_COOKIE[$config['cookie_name'] . '_track'] = (STRIP) ? addslashes(tracking_serialize($tracking)) : tracking_serialize($tracking);			unset($tracking);		}		return;	}	else if ($mode == 'topic')	{		if ($topic_id === false || $forum_id === false)		{			return;		}		if ($config['load_db_lastread'] && $user->data['is_registered'])		{			$sql = 'UPDATE ' . TOPICS_TRACK_TABLE . '				SET mark_time = ' . (($post_time) ? $post_time : time()) . "				WHERE user_id = {$user->data['user_id']}					AND topic_id = $topic_id";			$db->sql_query($sql);			// insert row			if (!$db->sql_affectedrows())			{				$db->sql_return_on_error(true);				$sql_ary = array(					'user_id'		=> (int) $user->data['user_id'],					'topic_id'		=> (int) $topic_id,					'forum_id'		=> (int) $forum_id,					'mark_time'		=> ($post_time) ? (int) $post_time : time(),				);				$db->sql_query('INSERT INTO ' . TOPICS_TRACK_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));				$db->sql_return_on_error(false);			}		}		else if ($config['load_anon_lastread'] || $user->data['is_registered'])		{			$tracking = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';			$tracking = ($tracking) ? tracking_unserialize($tracking) : array();			$topic_id36 = base_convert($topic_id, 10, 36);			if (!isset($tracking['t'][$topic_id36]))			{				$tracking['tf'][$forum_id][$topic_id36] = true;			}			$post_time = ($post_time) ? $post_time : time();			$tracking['t'][$topic_id36] = base_convert($post_time - $config['board_startdate'], 10, 36);			// If the cookie grows larger than 10000 characters we will remove the smallest value			// This can result in old topics being unread - but most of the time it should be accurate...			if (isset($_COOKIE[$config['cookie_name'] . '_track']) && strlen($_COOKIE[$config['cookie_name'] . '_track']) > 10000)			{				//echo 'Cookie grown too large' . print_r($tracking, true);				// We get the ten most minimum stored time offsets and its associated topic ids				$time_keys = array();				for ($i = 0; $i < 10 && sizeof($tracking['t']); $i++)				{					$min_value = min($tracking['t']);					$m_tkey = array_search($min_value, $tracking['t']);					unset($tracking['t'][$m_tkey]);					$time_keys[$m_tkey] = $min_value;				}				// Now remove the topic ids from the array...				foreach ($tracking['tf'] as $f_id => $topic_id_ary)				{					foreach ($time_keys as $m_tkey => $min_value)					{						if (isset($topic_id_ary[$m_tkey]))						{							$tracking['f'][$f_id] = $min_value;							unset($tracking['tf'][$f_id][$m_tkey]);						}					}				}				if ($user->data['is_registered'])				{					$user->data['user_lastmark'] = intval(base_convert(max($time_keys) + $config['board_startdate'], 36, 10));					$db->sql_query('UPDATE ' . USERS_TABLE . ' SET user_lastmark = ' . $user->data['user_lastmark'] . " WHERE user_id = {$user->data['user_id']}");				}				else				{					$tracking['l'] = max($time_keys);				}			}			$user->set_cookie('track', tracking_serialize($tracking), time() + 31536000);			$_COOKIE[$config['cookie_name'] . '_track'] = (STRIP) ? addslashes(tracking_serialize($tracking)) : tracking_serialize($tracking);		}		return;	}	else if ($mode == 'post')	{		if ($topic_id === false)		{			return;		}		$use_user_id = (!$user_id) ? $user->data['user_id'] : $user_id;		if ($config['load_db_track'] && $use_user_id != ANONYMOUS)		{			$db->sql_return_on_error(true);			$sql_ary = array(				'user_id'		=> (int) $use_user_id,				'topic_id'		=> (int) $topic_id,				'topic_posted'	=> 1			);			$db->sql_query('INSERT INTO ' . TOPICS_POSTED_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));			$db->sql_return_on_error(false);		}		return;	}}/*** Get topic tracking info by using already fetched info*/function get_topic_tracking($forum_id, $topic_ids, &$rowset, $forum_mark_time, $global_announce_list = false){	global $config, $user;	$last_read = array();	if (!is_array($topic_ids))	{		$topic_ids = array($topic_ids);	}	foreach ($topic_ids as $topic_id)	{		if (!empty($rowset[$topic_id]['mark_time']))		{			$last_read[$topic_id] = $rowset[$topic_id]['mark_time'];		}	}	$topic_ids = array_diff($topic_ids, array_keys($last_read));	if (sizeof($topic_ids))	{		$mark_time = array();		// Get global announcement info		if ($global_announce_list && sizeof($global_announce_list))		{			if (!isset($forum_mark_time[0]))			{				global $db;				$sql = 'SELECT mark_time					FROM ' . FORUMS_TRACK_TABLE . "					WHERE user_id = {$user->data['user_id']}						AND forum_id = 0";				$result = $db->sql_query($sql);				$row = $db->sql_fetchrow($result);				$db->sql_freeresult($result);				if ($row)				{					$mark_time[0] = $row['mark_time'];				}			}			else			{				if ($forum_mark_time[0] !== false)				{					$mark_time[0] = $forum_mark_time[0];				}			}		}		if (!empty($forum_mark_time[$forum_id]) && $forum_mark_time[$forum_id] !== false)		{			$mark_time[$forum_id] = $forum_mark_time[$forum_id];		}		$user_lastmark = (isset($mark_time[$forum_id])) ? $mark_time[$forum_id] : $user->data['user_lastmark'];		foreach ($topic_ids as $topic_id)		{			if ($global_announce_list && isset($global_announce_list[$topic_id]))			{				$last_read[$topic_id] = (isset($mark_time[0])) ? $mark_time[0] : $user_lastmark;			}			else			{				$last_read[$topic_id] = $user_lastmark;			}		}	}	return $last_read;}/*** Get topic tracking info from db (for cookie based tracking only this function is used)*/function get_complete_topic_tracking($forum_id, $topic_ids, $global_announce_list = false){	global $config, $user;	$last_read = array();	if (!is_array($topic_ids))	{		$topic_ids = array($topic_ids);	}	if ($config['load_db_lastread'] && $user->data['is_registered'])	{		global $db;		$sql = 'SELECT topic_id, mark_time			FROM ' . TOPICS_TRACK_TABLE . "			WHERE user_id = {$user->data['user_id']}				AND " . $db->sql_in_set('topic_id', $topic_ids);		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$last_read[$row['topic_id']] = $row['mark_time'];		}		$db->sql_freeresult($result);		$topic_ids = array_diff($topic_ids, array_keys($last_read));		if (sizeof($topic_ids))		{			$sql = 'SELECT forum_id, mark_time				FROM ' . FORUMS_TRACK_TABLE . "				WHERE user_id = {$user->data['user_id']}					AND forum_id " .					(($global_announce_list && sizeof($global_announce_list)) ? "IN (0, $forum_id)" : "= $forum_id");			$result = $db->sql_query($sql);			$mark_time = array();			while ($row = $db->sql_fetchrow($result))			{				$mark_time[$row['forum_id']] = $row['mark_time'];			}			$db->sql_freeresult($result);			$user_lastmark = (isset($mark_time[$forum_id])) ? $mark_time[$forum_id] : $user->data['user_lastmark'];			foreach ($topic_ids as $topic_id)			{				if ($global_announce_list && isset($global_announce_list[$topic_id]))				{					$last_read[$topic_id] = (isset($mark_time[0])) ? $mark_time[0] : $user_lastmark;				}				else				{					$last_read[$topic_id] = $user_lastmark;				}			}		}	}	else if ($config['load_anon_lastread'] || $user->data['is_registered'])	{		global $tracking_topics;		if (!isset($tracking_topics) || !sizeof($tracking_topics))		{			$tracking_topics = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';			$tracking_topics = ($tracking_topics) ? tracking_unserialize($tracking_topics) : array();		}		if (!$user->data['is_registered'])		{			$user_lastmark = (isset($tracking_topics['l'])) ? base_convert($tracking_topics['l'], 36, 10) + $config['board_startdate'] : 0;		}		else		{			$user_lastmark = $user->data['user_lastmark'];		}		foreach ($topic_ids as $topic_id)		{			$topic_id36 = base_convert($topic_id, 10, 36);			if (isset($tracking_topics['t'][$topic_id36]))			{				$last_read[$topic_id] = base_convert($tracking_topics['t'][$topic_id36], 36, 10) + $config['board_startdate'];			}		}		$topic_ids = array_diff($topic_ids, array_keys($last_read));		if (sizeof($topic_ids))		{			$mark_time = array();			if ($global_announce_list && sizeof($global_announce_list))			{				if (isset($tracking_topics['f'][0]))				{					$mark_time[0] = base_convert($tracking_topics['f'][0], 36, 10) + $config['board_startdate'];				}			}			if (isset($tracking_topics['f'][$forum_id]))			{				$mark_time[$forum_id] = base_convert($tracking_topics['f'][$forum_id], 36, 10) + $config['board_startdate'];			}			$user_lastmark = (isset($mark_time[$forum_id])) ? $mark_time[$forum_id] : $user_lastmark;			foreach ($topic_ids as $topic_id)			{				if ($global_announce_list && isset($global_announce_list[$topic_id]))				{					$last_read[$topic_id] = (isset($mark_time[0])) ? $mark_time[0] : $user_lastmark;				}				else				{					$last_read[$topic_id] = $user_lastmark;				}			}		}	}	return $last_read;}/*** Get list of unread topics** @param int $user_id			User ID (or false for current user)* @param string $sql_extra		Extra WHERE SQL statement* @param string $sql_sort		ORDER BY SQL sorting statement* @param string $sql_limit		Limits the size of unread topics list, 0 for unlimited query* @param string $sql_limit_offset  Sets the offset of the first row to search, 0 to search from the start** @return array[int][int]		Topic ids as keys, mark_time of topic as value*/function get_unread_topics($user_id = false, $sql_extra = '', $sql_sort = '', $sql_limit = 1001, $sql_limit_offset = 0){	global $config, $db, $user;	$user_id = ($user_id === false) ? (int) $user->data['user_id'] : (int) $user_id;	// Data array we're going to return	$unread_topics = array();	if (empty($sql_sort))	{		$sql_sort = 'ORDER BY t.topic_last_post_time DESC';	}	if ($config['load_db_lastread'] && $user->data['is_registered'])	{		// Get list of the unread topics		$last_mark = (int) $user->data['user_lastmark'];		$sql_array = array(			'SELECT'		=> 't.topic_id, t.topic_last_post_time, tt.mark_time as topic_mark_time, ft.mark_time as forum_mark_time',			'FROM'			=> array(TOPICS_TABLE => 't'),			'LEFT_JOIN'		=> array(				array(					'FROM'	=> array(TOPICS_TRACK_TABLE => 'tt'),					'ON'	=> "tt.user_id = $user_id AND t.topic_id = tt.topic_id",				),				array(					'FROM'	=> array(FORUMS_TRACK_TABLE => 'ft'),					'ON'	=> "ft.user_id = $user_id AND t.forum_id = ft.forum_id",				),			),			'WHERE'			=> "				 t.topic_last_post_time > $last_mark AND				(				(tt.mark_time IS NOT NULL AND t.topic_last_post_time > tt.mark_time) OR				(tt.mark_time IS NULL AND ft.mark_time IS NOT NULL AND t.topic_last_post_time > ft.mark_time) OR				(tt.mark_time IS NULL AND ft.mark_time IS NULL)				)				$sql_extra				$sql_sort",		);		$sql = $db->sql_build_query('SELECT', $sql_array);		$result = $db->sql_query_limit($sql, $sql_limit, $sql_limit_offset);		while ($row = $db->sql_fetchrow($result))		{			$topic_id = (int) $row['topic_id'];			$unread_topics[$topic_id] = ($row['topic_mark_time']) ? (int) $row['topic_mark_time'] : (($row['forum_mark_time']) ? (int) $row['forum_mark_time'] : $last_mark);		}		$db->sql_freeresult($result);	}	else if ($config['load_anon_lastread'] || $user->data['is_registered'])	{		global $tracking_topics;		if (empty($tracking_topics))		{			$tracking_topics = request_var($config['cookie_name'] . '_track', '', false, true);			$tracking_topics = ($tracking_topics) ? tracking_unserialize($tracking_topics) : array();		}		if (!$user->data['is_registered'])		{			$user_lastmark = (isset($tracking_topics['l'])) ? base_convert($tracking_topics['l'], 36, 10) + $config['board_startdate'] : 0;		}		else		{			$user_lastmark = (int) $user->data['user_lastmark'];		}		$sql = 'SELECT t.topic_id, t.forum_id, t.topic_last_post_time			FROM ' . TOPICS_TABLE . ' t			WHERE t.topic_last_post_time > ' . $user_lastmark . "			$sql_extra			$sql_sort";		$result = $db->sql_query_limit($sql, $sql_limit, $sql_limit_offset);		while ($row = $db->sql_fetchrow($result))		{			$forum_id = (int) $row['forum_id'];			$topic_id = (int) $row['topic_id'];			$topic_id36 = base_convert($topic_id, 10, 36);			if (isset($tracking_topics['t'][$topic_id36]))			{				$last_read = base_convert($tracking_topics['t'][$topic_id36], 36, 10) + $config['board_startdate'];				if ($row['topic_last_post_time'] > $last_read)				{					$unread_topics[$topic_id] = $last_read;				}			}			else if (isset($tracking_topics['f'][$forum_id]))			{				$mark_time = base_convert($tracking_topics['f'][$forum_id], 36, 10) + $config['board_startdate'];				if ($row['topic_last_post_time'] > $mark_time)				{					$unread_topics[$topic_id] = $mark_time;				}			}			else			{				$unread_topics[$topic_id] = $user_lastmark;			}		}		$db->sql_freeresult($result);	}	return $unread_topics;}/*** Check for read forums and update topic tracking info accordingly** @param int $forum_id the forum id to check* @param int $forum_last_post_time the forums last post time* @param int $f_mark_time the forums last mark time if user is registered and load_db_lastread enabled* @param int $mark_time_forum false if the mark time needs to be obtained, else the last users forum mark time** @return true if complete forum got marked read, else false.*/function update_forum_tracking_info($forum_id, $forum_last_post_time, $f_mark_time = false, $mark_time_forum = false){	global $db, $tracking_topics, $user, $config, $auth;	// Determine the users last forum mark time if not given.	if ($mark_time_forum === false)	{		if ($config['load_db_lastread'] && $user->data['is_registered'])		{			$mark_time_forum = (!empty($f_mark_time)) ? $f_mark_time : $user->data['user_lastmark'];		}		else if ($config['load_anon_lastread'] || $user->data['is_registered'])		{			$tracking_topics = (isset($_COOKIE[$config['cookie_name'] . '_track'])) ? ((STRIP) ? stripslashes($_COOKIE[$config['cookie_name'] . '_track']) : $_COOKIE[$config['cookie_name'] . '_track']) : '';			$tracking_topics = ($tracking_topics) ? tracking_unserialize($tracking_topics) : array();			if (!$user->data['is_registered'])			{				$user->data['user_lastmark'] = (isset($tracking_topics['l'])) ? (int) (base_convert($tracking_topics['l'], 36, 10) + $config['board_startdate']) : 0;			}			$mark_time_forum = (isset($tracking_topics['f'][$forum_id])) ? (int) (base_convert($tracking_topics['f'][$forum_id], 36, 10) + $config['board_startdate']) : $user->data['user_lastmark'];		}	}	// Handle update of unapproved topics info.	// Only update for moderators having m_approve permission for the forum.	$sql_update_unapproved = ($auth->acl_get('m_approve', $forum_id)) ? '': 'AND t.topic_approved = 1';	// Check the forum for any left unread topics.	// If there are none, we mark the forum as read.	if ($config['load_db_lastread'] && $user->data['is_registered'])	{		if ($mark_time_forum >= $forum_last_post_time)		{			// We do not need to mark read, this happened before. Therefore setting this to true			$row = true;		}		else		{			$sql = 'SELECT t.forum_id FROM ' . TOPICS_TABLE . ' t				LEFT JOIN ' . TOPICS_TRACK_TABLE . ' tt ON (tt.topic_id = t.topic_id AND tt.user_id = ' . $user->data['user_id'] . ')				WHERE t.forum_id = ' . $forum_id . '					AND t.topic_last_post_time > ' . $mark_time_forum . '					AND t.topic_moved_id = 0 ' .					$sql_update_unapproved . '					AND (tt.topic_id IS NULL OR tt.mark_time < t.topic_last_post_time)				GROUP BY t.forum_id';			$result = $db->sql_query_limit($sql, 1);			$row = $db->sql_fetchrow($result);			$db->sql_freeresult($result);		}	}	else if ($config['load_anon_lastread'] || $user->data['is_registered'])	{		// Get information from cookie		$row = false;		if (!isset($tracking_topics['tf'][$forum_id]))		{			// We do not need to mark read, this happened before. Therefore setting this to true			$row = true;		}		else		{			$sql = 'SELECT t.topic_id				FROM ' . TOPICS_TABLE . ' t				WHERE t.forum_id = ' . $forum_id . '					AND t.topic_last_post_time > ' . $mark_time_forum . '					AND t.topic_moved_id = 0 ' .					$sql_update_unapproved;			$result = $db->sql_query($sql);			$check_forum = $tracking_topics['tf'][$forum_id];			$unread = false;			while ($row = $db->sql_fetchrow($result))			{				if (!isset($check_forum[base_convert($row['topic_id'], 10, 36)]))				{					$unread = true;					break;				}			}			$db->sql_freeresult($result);			$row = $unread;		}	}	else	{		$row = true;	}	if (!$row)	{		markread('topics', $forum_id);		return true;	}	return false;}/*** Transform an array into a serialized format*/function tracking_serialize($input){	$out = '';	foreach ($input as $key => $value)	{		if (is_array($value))		{			$out .= $key . ':(' . tracking_serialize($value) . ');';		}		else		{			$out .= $key . ':' . $value . ';';		}	}	return $out;}/*** Transform a serialized array into an actual array*/function tracking_unserialize($string, $max_depth = 3){	$n = strlen($string);	if ($n > 10010)	{		die('Invalid data supplied');	}	$data = $stack = array();	$key = '';	$mode = 0;	$level = &$data;	for ($i = 0; $i < $n; ++$i)	{		switch ($mode)		{			case 0:				switch ($string[$i])				{					case ':':						$level[$key] = 0;						$mode = 1;					break;					case ')':						unset($level);						$level = array_pop($stack);						$mode = 3;					break;					default:						$key .= $string[$i];				}			break;			case 1:				switch ($string[$i])				{					case '(':						if (sizeof($stack) >= $max_depth)						{							die('Invalid data supplied');						}						$stack[] = &$level;						$level[$key] = array();						$level = &$level[$key];						$key = '';						$mode = 0;					break;					default:						$level[$key] = $string[$i];						$mode = 2;					break;				}			break;			case 2:				switch ($string[$i])				{					case ')':						unset($level);						$level = array_pop($stack);						$mode = 3;					break;					case ';':						$key = '';						$mode = 0;					break;					default:						$level[$key] .= $string[$i];					break;				}			break;			case 3:				switch ($string[$i])				{					case ')':						unset($level);						$level = array_pop($stack);					break;					case ';':						$key = '';						$mode = 0;					break;					default:						die('Invalid data supplied');					break;				}			break;		}	}	if (sizeof($stack) != 0 || ($mode != 0 && $mode != 3))	{		die('Invalid data supplied');	}	return $level;}// Pagination functions/*** Pagination routine, generates page number sequence* tpl_prefix is for using different pagination blocks at one page*/function generate_pagination($base_url, $num_items, $per_page, $start_item, $add_prevnext_text = false, $tpl_prefix = ''){	global $template, $user;	// Make sure $per_page is a valid value	$per_page = ($per_page <= 0) ? 1 : $per_page;	$seperator = '<span class="page-sep">' . $user->lang['COMMA_SEPARATOR'] . '</span>';	$total_pages = ceil($num_items / $per_page);	if ($total_pages == 1 || !$num_items)	{		return false;	}	$on_page = floor($start_item / $per_page) + 1;	$url_delim = (strpos($base_url, '?') === false) ? '?' : ((strpos($base_url, '?') === strlen($base_url) - 1) ? '' : '&amp;');	$page_string = ($on_page == 1) ? '<strong>1</strong>' : '<a href="' . $base_url . '">1</a>';	if ($total_pages > 5)	{		$start_cnt = min(max(1, $on_page - 4), $total_pages - 5);		$end_cnt = max(min($total_pages, $on_page + 4), 6);		$page_string .= ($start_cnt > 1) ? '<span class="page-dots"> ... </span>' : $seperator;		for ($i = $start_cnt + 1; $i < $end_cnt; $i++)		{			$page_string .= ($i == $on_page) ? '<strong>' . $i . '</strong>' : '<a href="' . $base_url . "{$url_delim}start=" . (($i - 1) * $per_page) . '">' . $i . '</a>';			if ($i < $end_cnt - 1)			{				$page_string .= $seperator;			}		}		$page_string .= ($end_cnt < $total_pages) ? '<span class="page-dots"> ... </span>' : $seperator;	}	else	{		$page_string .= $seperator;		for ($i = 2; $i < $total_pages; $i++)		{			$page_string .= ($i == $on_page) ? '<strong>' . $i . '</strong>' : '<a href="' . $base_url . "{$url_delim}start=" . (($i - 1) * $per_page) . '">' . $i . '</a>';			if ($i < $total_pages)			{				$page_string .= $seperator;			}		}	}	$page_string .= ($on_page == $total_pages) ? '<strong>' . $total_pages . '</strong>' : '<a href="' . $base_url . "{$url_delim}start=" . (($total_pages - 1) * $per_page) . '">' . $total_pages . '</a>';	if ($add_prevnext_text)	{		if ($on_page != 1)		{			$page_string = '<a href="' . $base_url . "{$url_delim}start=" . (($on_page - 2) * $per_page) . '">' . $user->lang['PREVIOUS'] . '</a>&nbsp;&nbsp;' . $page_string;		}		if ($on_page != $total_pages)		{			$page_string .= '&nbsp;&nbsp;<a href="' . $base_url . "{$url_delim}start=" . ($on_page * $per_page) . '">' . $user->lang['NEXT'] . '</a>';		}	}	$template->assign_vars(array(		$tpl_prefix . 'BASE_URL'		=> $base_url,		'A_' . $tpl_prefix . 'BASE_URL'	=> addslashes($base_url),		$tpl_prefix . 'PER_PAGE'		=> $per_page,		$tpl_prefix . 'PREVIOUS_PAGE'	=> ($on_page == 1) ? '' : $base_url . "{$url_delim}start=" . (($on_page - 2) * $per_page),		$tpl_prefix . 'NEXT_PAGE'		=> ($on_page == $total_pages) ? '' : $base_url . "{$url_delim}start=" . ($on_page * $per_page),		$tpl_prefix . 'TOTAL_PAGES'		=> $total_pages,	));	return $page_string;}/*** Return current page (pagination)*/function on_page($num_items, $per_page, $start){	global $template, $user;	// Make sure $per_page is a valid value	$per_page = ($per_page <= 0) ? 1 : $per_page;	$on_page = floor($start / $per_page) + 1;	$template->assign_vars(array(		'ON_PAGE'		=> $on_page)	);	return sprintf($user->lang['PAGE_OF'], $on_page, max(ceil($num_items / $per_page), 1));}// Server functions (building urls, redirecting...)/*** Append session id to url.* This function supports hooks.** @param string $url The url the session id needs to be appended to (can have params)* @param mixed $params String or array of additional url parameters* @param bool $is_amp Is url using &amp; (true) or & (false)* @param string $session_id Possibility to use a custom session id instead of the global one** Examples:* <code>* append_sid("{$phpbb_root_path}viewtopic.$phpEx?t=1&amp;f=2");* append_sid("{$phpbb_root_path}viewtopic.$phpEx", 't=1&amp;f=2');* append_sid("{$phpbb_root_path}viewtopic.$phpEx", 't=1&f=2', false);* append_sid("{$phpbb_root_path}viewtopic.$phpEx", array('t' => 1, 'f' => 2));* </code>**/function append_sid($url, $params = false, $is_amp = true, $session_id = false){	global $_SID, $_EXTRA_URL, $phpbb_hook;	if ($params === '' || (is_array($params) && empty($params)))	{		// Do not append the ? if the param-list is empty anyway.		$params = false;	}	// Developers using the hook function need to globalise the $_SID and $_EXTRA_URL on their own and also handle it appropriately.	// They could mimic most of what is within this function	if (!empty($phpbb_hook) && $phpbb_hook->call_hook(__FUNCTION__, $url, $params, $is_amp, $session_id))	{		if ($phpbb_hook->hook_return(__FUNCTION__))		{			return $phpbb_hook->hook_return_result(__FUNCTION__);		}	}	$params_is_array = is_array($params);	// Get anchor	$anchor = '';	if (strpos($url, '#') !== false)	{		list($url, $anchor) = explode('#', $url, 2);		$anchor = '#' . $anchor;	}	else if (!$params_is_array && strpos($params, '#') !== false)	{		list($params, $anchor) = explode('#', $params, 2);		$anchor = '#' . $anchor;	}	// Handle really simple cases quickly	if ($_SID == '' && $session_id === false && empty($_EXTRA_URL) && !$params_is_array && !$anchor)	{		if ($params === false)		{			return $url;		}		$url_delim = (strpos($url, '?') === false) ? '?' : (($is_amp) ? '&amp;' : '&');		return $url . ($params !== false ? $url_delim. $params : '');	}	// Assign sid if session id is not specified	if ($session_id === false)	{		$session_id = $_SID;	}	$amp_delim = ($is_amp) ? '&amp;' : '&';	$url_delim = (strpos($url, '?') === false) ? '?' : $amp_delim;	// Appending custom url parameter?	$append_url = (!empty($_EXTRA_URL)) ? implode($amp_delim, $_EXTRA_URL) : '';	// Use the short variant if possible ;)	if ($params === false)	{		// Append session id		if (!$session_id)		{			return $url . (($append_url) ? $url_delim . $append_url : '') . $anchor;		}		else		{			return $url . (($append_url) ? $url_delim . $append_url . $amp_delim : $url_delim) . 'sid=' . $session_id . $anchor;		}	}	// Build string if parameters are specified as array	if (is_array($params))	{		$output = array();		foreach ($params as $key => $item)		{			if ($item === NULL)			{				continue;			}			if ($key == '#')			{				$anchor = '#' . $item;				continue;			}			$output[] = $key . '=' . $item;		}		$params = implode($amp_delim, $output);	}	// Append session id and parameters (even if they are empty)	// If parameters are empty, the developer can still append his/her parameters without caring about the delimiter	return $url . (($append_url) ? $url_delim . $append_url . $amp_delim : $url_delim) . $params . ((!$session_id) ? '' : $amp_delim . 'sid=' . $session_id) . $anchor;}/*** Generate board url (example: http://www.example.com/phpBB)** @param bool $without_script_path if set to true the script path gets not appended (example: http://www.example.com)** @return string the generated board url*/function generate_board_url($without_script_path = false){	global $config, $user;	$server_name = $user->host;	$server_port = (!empty($_SERVER['SERVER_PORT'])) ? (int) $_SERVER['SERVER_PORT'] : (int) getenv('SERVER_PORT');	// Forcing server vars is the only way to specify/override the protocol	if ($config['force_server_vars'] || !$server_name)	{		$server_protocol = ($config['server_protocol']) ? $config['server_protocol'] : (($config['cookie_secure']) ? 'https://' : 'http://');		$server_name = $config['server_name'];		$server_port = (int) $config['server_port'];		$script_path = $config['script_path'];		$url = $server_protocol . $server_name;		$cookie_secure = $config['cookie_secure'];	}	else	{		// Do not rely on cookie_secure, users seem to think that it means a secured cookie instead of an encrypted connection		$cookie_secure = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? 1 : 0;		$url = (($cookie_secure) ? 'https://' : 'http://') . $server_name;		$script_path = $user->page['root_script_path'];	}	if ($server_port && (($cookie_secure && $server_port <> 443) || (!$cookie_secure && $server_port <> 80)))	{		// HTTP HOST can carry a port number (we fetch $user->host, but for old versions this may be true)		if (strpos($server_name, ':') === false)		{			$url .= ':' . $server_port;		}	}	if (!$without_script_path)	{		$url .= $script_path;	}	// Strip / from the end	if (substr($url, -1, 1) == '/')	{		$url = substr($url, 0, -1);	}	return $url;}/*** Redirects the user to another page then exits the script nicely* This function is intended for urls within the board. It's not meant to redirect to cross-domains.** @param string $url The url to redirect to* @param bool $return If true, do not redirect but return the sanitized URL. Default is no return.* @param bool $disable_cd_check If true, redirect() will redirect to an external domain. If false, the redirect point to the boards url if it does not match the current domain. Default is false.*/function redirect($url, $return = false, $disable_cd_check = false){	global $db, $cache, $config, $user, $phpbb_root_path;	$failover_flag = false;	if (empty($user->lang))	{		$user->add_lang('common');	}	if (!$return)	{		garbage_collection();	}	// Make sure no &amp;'s are in, this will break the redirect	$url = str_replace('&amp;', '&', $url);	// Determine which type of redirect we need to handle...	$url_parts = @parse_url($url);	if ($url_parts === false)	{		// Malformed url, redirect to current page...		$url = generate_board_url() . '/' . $user->page['page'];	}	else if (!empty($url_parts['scheme']) && !empty($url_parts['host']))	{		// Attention: only able to redirect within the same domain if $disable_cd_check is false (yourdomain.com -> www.yourdomain.com will not work)		if (!$disable_cd_check && $url_parts['host'] !== $user->host)		{			$url = generate_board_url();		}	}	else if ($url[0] == '/')	{		// Absolute uri, prepend direct url...		$url = generate_board_url(true) . $url;	}	else	{		// Relative uri		$pathinfo = pathinfo($url);		if (!$disable_cd_check && !file_exists($pathinfo['dirname'] . '/'))		{			$url = str_replace('../', '', $url);			$pathinfo = pathinfo($url);			if (!file_exists($pathinfo['dirname'] . '/'))			{				// fallback to "last known user page"				// at least this way we know the user does not leave the phpBB root				$url = generate_board_url() . '/' . $user->page['page'];				$failover_flag = true;			}		}		if (!$failover_flag)		{			// Is the uri pointing to the current directory?			if ($pathinfo['dirname'] == '.')			{				$url = str_replace('./', '', $url);				// Strip / from the beginning				if ($url && substr($url, 0, 1) == '/')				{					$url = substr($url, 1);				}				if ($user->page['page_dir'])				{					$url = generate_board_url() . '/' . $user->page['page_dir'] . '/' . $url;				}				else				{					$url = generate_board_url() . '/' . $url;				}			}			else			{				// Used ./ before, but $phpbb_root_path is working better with urls within another root path				$root_dirs = explode('/', str_replace('\\', '/', phpbb_realpath($phpbb_root_path)));				$page_dirs = explode('/', str_replace('\\', '/', phpbb_realpath($pathinfo['dirname'])));				$intersection = array_intersect_assoc($root_dirs, $page_dirs);				$root_dirs = array_diff_assoc($root_dirs, $intersection);				$page_dirs = array_diff_assoc($page_dirs, $intersection);				$dir = str_repeat('../', sizeof($root_dirs)) . implode('/', $page_dirs);				// Strip / from the end				if ($dir && substr($dir, -1, 1) == '/')				{					$dir = substr($dir, 0, -1);				}				// Strip / from the beginning				if ($dir && substr($dir, 0, 1) == '/')				{					$dir = substr($dir, 1);				}				$url = str_replace($pathinfo['dirname'] . '/', '', $url);				// Strip / from the beginning				if (substr($url, 0, 1) == '/')				{					$url = substr($url, 1);				}				$url = (!empty($dir) ? $dir . '/' : '') . $url;				$url = generate_board_url() . '/' . $url;			}		}	}	// Make sure no linebreaks are there... to prevent http response splitting for PHP < 4.4.2	if (strpos(urldecode($url), "\n") !== false || strpos(urldecode($url), "\r") !== false || strpos($url, ';') !== false)	{		trigger_error('Tried to redirect to potentially insecure url.', E_USER_ERROR);	}	// Now, also check the protocol and for a valid url the last time...	$allowed_protocols = array('http', 'https', 'ftp', 'ftps');	$url_parts = parse_url($url);	if ($url_parts === false || empty($url_parts['scheme']) || !in_array($url_parts['scheme'], $allowed_protocols))	{		trigger_error('Tried to redirect to potentially insecure url.', E_USER_ERROR);	}	if ($return)	{		return $url;	}	// Redirect via an HTML form for PITA webservers	if (@preg_match('#Microsoft|WebSTAR|Xitami#', getenv('SERVER_SOFTWARE')))	{		header('Refresh: 0; URL=' . $url);		echo '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">';		echo '<html xmlns="http://www.w3.org/1999/xhtml" dir="' . $user->lang['DIRECTION'] . '" lang="' . $user->lang['USER_LANG'] . '" xml:lang="' . $user->lang['USER_LANG'] . '">';		echo '<head>';		echo '<meta http-equiv="content-type" content="text/html; charset=utf-8" />';		echo '<meta http-equiv="refresh" content="0; url=' . str_replace('&', '&amp;', $url) . '" />';		echo '<title>' . $user->lang['REDIRECT'] . '</title>';		echo '</head>';		echo '<body>';		echo '<div style="text-align: center;">' . sprintf($user->lang['URL_REDIRECT'], '<a href="' . str_replace('&', '&amp;', $url) . '">', '</a>') . '</div>';		echo '</body>';		echo '</html>';		exit;	}	// Behave as per HTTP/1.1 spec for others	header('Location: ' . $url);	exit;}/*** Re-Apply session id after page reloads*/function reapply_sid($url){	global $phpEx, $phpbb_root_path;	if ($url === "index.$phpEx")	{		return append_sid("index.$phpEx");	}	else if ($url === "{$phpbb_root_path}index.$phpEx")	{		return append_sid("{$phpbb_root_path}index.$phpEx");	}	// Remove previously added sid	if (strpos($url, 'sid=') !== false)	{		// All kind of links		$url = preg_replace('/(\?)?(&amp;|&)?sid=[a-z0-9]+/', '', $url);		// if the sid was the first param, make the old second as first ones		$url = preg_replace("/$phpEx(&amp;|&)+?/", "$phpEx?", $url);	}	return append_sid($url);}/*** Returns url from the session/current page with an re-appended SID with optionally stripping vars from the url*/function build_url($strip_vars = false){	global $user, $phpbb_root_path;	// Append SID	$redirect = append_sid($user->page['page'], false, false);	// Add delimiter if not there...	if (strpos($redirect, '?') === false)	{		$redirect .= '?';	}	// Strip vars...	if ($strip_vars !== false && strpos($redirect, '?') !== false)	{		if (!is_array($strip_vars))		{			$strip_vars = array($strip_vars);		}		$query = $_query = array();		$args = substr($redirect, strpos($redirect, '?') + 1);		$args = ($args) ? explode('&', $args) : array();		$redirect = substr($redirect, 0, strpos($redirect, '?'));		foreach ($args as $argument)		{			$arguments = explode('=', $argument);			$key = $arguments[0];			unset($arguments[0]);			if ($key === '')			{				continue;			}			$query[$key] = implode('=', $arguments);		}		// Strip the vars off		foreach ($strip_vars as $strip)		{			if (isset($query[$strip]))			{				unset($query[$strip]);			}		}		// Glue the remaining parts together... already urlencoded		foreach ($query as $key => $value)		{			$_query[] = $key . '=' . $value;		}		$query = implode('&', $_query);		$redirect .= ($query) ? '?' . $query : '';	}	// We need to be cautious here.	// On some situations, the redirect path is an absolute URL, sometimes a relative path	// For a relative path, let's prefix it with $phpbb_root_path to point to the correct location,	// else we use the URL directly.	$url_parts = @parse_url($redirect);	// URL	if ($url_parts !== false && !empty($url_parts['scheme']) && !empty($url_parts['host']))	{		return str_replace('&', '&amp;', $redirect);	}	return $phpbb_root_path . str_replace('&', '&amp;', $redirect);}/*** Meta refresh assignment* Adds META template variable with meta http tag.** @param int $time Time in seconds for meta refresh tag* @param string $url URL to redirect to. The url will go through redirect() first before the template variable is assigned* @param bool $disable_cd_check If true, meta_refresh() will redirect to an external domain. If false, the redirect point to the boards url if it does not match the current domain. Default is false.*/function meta_refresh($time, $url, $disable_cd_check = false){	global $template;	$url = redirect($url, true, $disable_cd_check);	$url = str_replace('&', '&amp;', $url);	// For XHTML compatibility we change back & to &amp;	$template->assign_vars(array(		'META' => '<meta http-equiv="refresh" content="' . $time . ';url=' . $url . '" />')	);	return $url;}/*** Outputs correct status line header.** Depending on php sapi one of the two following forms is used:** Status: 404 Not Found** HTTP/1.x 404 Not Found** HTTP version is taken from HTTP_VERSION environment variable,* and defaults to 1.0.** Sample usage:** send_status_line(404, 'Not Found');** @param int $code HTTP status code* @param string $message Message for the status code* @return void*/function send_status_line($code, $message){	if (substr(strtolower(@php_sapi_name()), 0, 3) === 'cgi')	{		// in theory, we shouldn't need that due to php doing it. Reality offers a differing opinion, though		header("Status: $code $message", true, $code);	}	else	{		if (!empty($_SERVER['SERVER_PROTOCOL']))		{			$version = $_SERVER['SERVER_PROTOCOL'];		}		else		{			$version = 'HTTP/1.0';		}		header("$version $code $message", true, $code);	}}//Form validation/*** Add a secret hash   for use in links/GET requests* @param string  $link_name The name of the link; has to match the name used in check_link_hash, otherwise no restrictions apply* @return string the hash*/function generate_link_hash($link_name){	global $user;	if (!isset($user->data["hash_$link_name"]))	{		$user->data["hash_$link_name"] = substr(sha1($user->data['user_form_salt'] . $link_name), 0, 8);	}	return $user->data["hash_$link_name"];}/*** checks a link hash - for GET requests* @param string $token the submitted token* @param string $link_name The name of the link* @return boolean true if all is fine*/function check_link_hash($token, $link_name){	return $token === generate_link_hash($link_name);}/*** Add a secret token to the form (requires the S_FORM_TOKEN template variable)* @param string  $form_name The name of the form; has to match the name used in check_form_key, otherwise no restrictions apply*/function add_form_key($form_name){	global $config, $template, $user;	$now = time();	$token_sid = ($user->data['user_id'] == ANONYMOUS && !empty($config['form_token_sid_guests'])) ? $user->session_id : '';	$token = sha1($now . $user->data['user_form_salt'] . $form_name . $token_sid);	$s_fields = build_hidden_fields(array(		'creation_time' => $now,		'form_token'	=> $token,	));	$template->assign_vars(array(		'S_FORM_TOKEN'	=> $s_fields,	));}/*** Check the form key. Required for all altering actions not secured by confirm_box* @param string  $form_name The name of the form; has to match the name used in add_form_key, otherwise no restrictions apply* @param int $timespan The maximum acceptable age for a submitted form in seconds. Defaults to the config setting.* @param string $return_page The address for the return link* @param bool $trigger If true, the function will triger an error when encountering an invalid form*/function check_form_key($form_name, $timespan = false, $return_page = '', $trigger = false){	global $config, $user;	if ($timespan === false)	{		// we enforce a minimum value of half a minute here.		$timespan = ($config['form_token_lifetime'] == -1) ? -1 : max(30, $config['form_token_lifetime']);	}	if (isset($_POST['creation_time']) && isset($_POST['form_token']))	{		$creation_time	= abs(request_var('creation_time', 0));		$token = request_var('form_token', '');		$diff = time() - $creation_time;		// If creation_time and the time() now is zero we can assume it was not a human doing this (the check for if ($diff)...		if ($diff && ($diff <= $timespan || $timespan === -1))		{			$token_sid = ($user->data['user_id'] == ANONYMOUS && !empty($config['form_token_sid_guests'])) ? $user->session_id : '';			$key = sha1($creation_time . $user->data['user_form_salt'] . $form_name . $token_sid);			if ($key === $token)			{				return true;			}		}	}	if ($trigger)	{		trigger_error($user->lang['FORM_INVALID'] . $return_page);	}	return false;}// Message/Login boxes/*** Build Confirm box* @param boolean $check True for checking if confirmed (without any additional parameters) and false for displaying the confirm box* @param string $title Title/Message used for confirm box.*		message text is _CONFIRM appended to title.*		If title cannot be found in user->lang a default one is displayed*		If title_CONFIRM cannot be found in user->lang the text given is used.* @param string $hidden Hidden variables* @param string $html_body Template used for confirm box* @param string $u_action Custom form action*/function confirm_box($check, $title = '', $hidden = '', $html_body = 'confirm_body.html', $u_action = ''){	global $user, $template, $db;	global $phpEx, $phpbb_root_path;	if (isset($_POST['cancel']))	{		return false;	}	$confirm = false;	if (isset($_POST['confirm']))	{		// language frontier		if ($_POST['confirm'] === $user->lang['YES'])		{			$confirm = true;		}	}	if ($check && $confirm)	{		$user_id = request_var('confirm_uid', 0);		$session_id = request_var('sess', '');		$confirm_key = request_var('confirm_key', '');		if ($user_id != $user->data['user_id'] || $session_id != $user->session_id || !$confirm_key || !$user->data['user_last_confirm_key'] || $confirm_key != $user->data['user_last_confirm_key'])		{			return false;		}		// Reset user_last_confirm_key		$sql = 'UPDATE ' . USERS_TABLE . " SET user_last_confirm_key = ''			WHERE user_id = " . $user->data['user_id'];		$db->sql_query($sql);		return true;	}	else if ($check)	{		return false;	}	$s_hidden_fields = build_hidden_fields(array(		'confirm_uid'	=> $user->data['user_id'],		'sess'			=> $user->session_id,		'sid'			=> $user->session_id,	));	// generate activation key	$confirm_key = gen_rand_string(10);	if (defined('IN_ADMIN') && isset($user->data['session_admin']) && $user->data['session_admin'])	{		adm_page_header((!isset($user->lang[$title])) ? $user->lang['CONFIRM'] : $user->lang[$title]);	}	else	{		page_header(((!isset($user->lang[$title])) ? $user->lang['CONFIRM'] : $user->lang[$title]), false);	}	$template->set_filenames(array(		'body' => $html_body)	);	// If activation key already exist, we better do not re-use the key (something very strange is going on...)	if (request_var('confirm_key', ''))	{		// This should not occur, therefore we cancel the operation to safe the user		return false;	}	// re-add sid / transform & to &amp; for user->page (user->page is always using &)	$use_page = ($u_action) ? $phpbb_root_path . $u_action : $phpbb_root_path . str_replace('&', '&amp;', $user->page['page']);	$u_action = reapply_sid($use_page);	$u_action .= ((strpos($u_action, '?') === false) ? '?' : '&amp;') . 'confirm_key=' . $confirm_key;	$template->assign_vars(array(		'MESSAGE_TITLE'		=> (!isset($user->lang[$title])) ? $user->lang['CONFIRM'] : $user->lang[$title],		'MESSAGE_TEXT'		=> (!isset($user->lang[$title . '_CONFIRM'])) ? $title : $user->lang[$title . '_CONFIRM'],		'YES_VALUE'			=> $user->lang['YES'],		'S_CONFIRM_ACTION'	=> $u_action,		'S_HIDDEN_FIELDS'	=> $hidden . $s_hidden_fields)	);	$sql = 'UPDATE ' . USERS_TABLE . " SET user_last_confirm_key = '" . $db->sql_escape($confirm_key) . "'		WHERE user_id = " . $user->data['user_id'];	$db->sql_query($sql);	if (defined('IN_ADMIN') && isset($user->data['session_admin']) && $user->data['session_admin'])	{		adm_page_footer();	}	else	{		page_footer();	}}/*** Generate login box or verify password*/function login_box($redirect = '', $l_explain = '', $l_success = '', $admin = false, $s_display = true){	global $db, $user, $template, $auth, $phpEx, $phpbb_root_path, $config;	if (!class_exists('phpbb_captcha_factory'))	{		include($phpbb_root_path . 'includes/captcha/captcha_factory.' . $phpEx);	}	$err = '';	// Make sure user->setup() has been called	if (empty($user->lang))	{		$user->setup();	}	// Print out error if user tries to authenticate as an administrator without having the privileges...	if ($admin && !$auth->acl_get('a_'))	{		// Not authd		// anonymous/inactive users are never able to go to the ACP even if they have the relevant permissions		if ($user->data['is_registered'])		{			add_log('admin', 'LOG_ADMIN_AUTH_FAIL');		}		trigger_error('NO_AUTH_ADMIN');	}	if (isset($_POST['login']))	{		// Get credential		if ($admin)		{			$credential = request_var('credential', '');			if (strspn($credential, 'abcdef0123456789') !== strlen($credential) || strlen($credential) != 32)			{				if ($user->data['is_registered'])				{					add_log('admin', 'LOG_ADMIN_AUTH_FAIL');				}				trigger_error('NO_AUTH_ADMIN');			}			$password	= request_var('password_' . $credential, '', true);		}		else		{			$password	= request_var('password', '', true);		}		$username	= request_var('username', '', true);		$autologin	= (!empty($_POST['autologin'])) ? true : false;		$viewonline = (!empty($_POST['viewonline'])) ? 0 : 1;		$admin 		= ($admin) ? 1 : 0;		$viewonline = ($admin) ? $user->data['session_viewonline'] : $viewonline;		// Check if the supplied username is equal to the one stored within the database if re-authenticating		if ($admin && utf8_clean_string($username) != utf8_clean_string($user->data['username']))		{			// We log the attempt to use a different username...			add_log('admin', 'LOG_ADMIN_AUTH_FAIL');			trigger_error('NO_AUTH_ADMIN_USER_DIFFER');		}		// If authentication is successful we redirect user to previous page		$result = $auth->login($username, $password, $autologin, $viewonline, $admin);		// If admin authentication and login, we will log if it was a success or not...		// We also break the operation on the first non-success login - it could be argued that the user already knows		if ($admin)		{			if ($result['status'] == LOGIN_SUCCESS)			{				add_log('admin', 'LOG_ADMIN_AUTH_SUCCESS');			}			else			{				// Only log the failed attempt if a real user tried to.				// anonymous/inactive users are never able to go to the ACP even if they have the relevant permissions				if ($user->data['is_registered'])				{					add_log('admin', 'LOG_ADMIN_AUTH_FAIL');				}			}		}		// The result parameter is always an array, holding the relevant information...		if ($result['status'] == LOGIN_SUCCESS)		{			$redirect = request_var('redirect', "{$phpbb_root_path}index.$phpEx");			$message = ($l_success) ? $l_success : $user->lang['LOGIN_REDIRECT'];			$l_redirect = ($admin) ? $user->lang['PROCEED_TO_ACP'] : (($redirect === "{$phpbb_root_path}index.$phpEx" || $redirect === "index.$phpEx") ? $user->lang['RETURN_INDEX'] : $user->lang['RETURN_PAGE']);			// append/replace SID (may change during the session for AOL users)			$redirect = reapply_sid($redirect);			// Special case... the user is effectively banned, but we allow founders to login			if (defined('IN_CHECK_BAN') && $result['user_row']['user_type'] != USER_FOUNDER)			{				return;			}			$redirect = meta_refresh(3, $redirect);			trigger_error($message . '<br /><br />' . sprintf($l_redirect, '<a href="' . $redirect . '">', '</a>'));		}		// Something failed, determine what...		if ($result['status'] == LOGIN_BREAK)		{			trigger_error($result['error_msg']);		}		// Special cases... determine		switch ($result['status'])		{			case LOGIN_ERROR_ATTEMPTS:				$captcha = phpbb_captcha_factory::get_instance($config['captcha_plugin']);				$captcha->init(CONFIRM_LOGIN);				// $captcha->reset();				$template->assign_vars(array(					'CAPTCHA_TEMPLATE'			=> $captcha->get_template(),				));				$err = $user->lang[$result['error_msg']];			break;			case LOGIN_ERROR_PASSWORD_CONVERT:				$err = sprintf(					$user->lang[$result['error_msg']],					($config['email_enable']) ? '<a href="' . append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=sendpassword') . '">' : '',					($config['email_enable']) ? '</a>' : '',					($config['board_contact']) ? '<a href="mailto:' . htmlspecialchars($config['board_contact']) . '">' : '',					($config['board_contact']) ? '</a>' : ''				);			break;			// Username, password, etc...			default:				$err = $user->lang[$result['error_msg']];				// Assign admin contact to some error messages				if ($result['error_msg'] == 'LOGIN_ERROR_USERNAME' || $result['error_msg'] == 'LOGIN_ERROR_PASSWORD')				{					$err = (!$config['board_contact']) ? sprintf($user->lang[$result['error_msg']], '', '') : sprintf($user->lang[$result['error_msg']], '<a href="mailto:' . htmlspecialchars($config['board_contact']) . '">', '</a>');				}			break;		}	}	// Assign credential for username/password pair	$credential = ($admin) ? md5(unique_id()) : false;	$s_hidden_fields = array(		'sid'		=> $user->session_id,	);	if ($redirect)	{		$s_hidden_fields['redirect'] = $redirect;	}	if ($admin)	{		$s_hidden_fields['credential'] = $credential;	}	$s_hidden_fields = build_hidden_fields($s_hidden_fields);	$template->assign_vars(array(		'LOGIN_ERROR'		=> $err,		'LOGIN_EXPLAIN'		=> $l_explain,		'U_SEND_PASSWORD' 		=> ($config['email_enable']) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=sendpassword') : '',		'U_RESEND_ACTIVATION'	=> ($config['require_activation'] == USER_ACTIVATION_SELF && $config['email_enable']) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=resend_act') : '',		'U_TERMS_USE'			=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=terms'),		'U_PRIVACY'				=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=privacy'),		'S_DISPLAY_FULL_LOGIN'	=> ($s_display) ? true : false,		'S_HIDDEN_FIELDS' 		=> $s_hidden_fields,		'S_ADMIN_AUTH'			=> $admin,		'USERNAME'				=> ($admin) ? $user->data['username'] : '',		'USERNAME_CREDENTIAL'	=> 'username',		'PASSWORD_CREDENTIAL'	=> ($admin) ? 'password_' . $credential : 'password',	));	page_header($user->lang['LOGIN'], false);	$template->set_filenames(array(		'body' => 'login_body.html')	);	make_jumpbox(append_sid("{$phpbb_root_path}viewforum.$phpEx"));	page_footer();}/*** Generate forum login box*/function login_forum_box($forum_data){	global $db, $config, $user, $template, $phpEx;	$password = request_var('password', '', true);	$sql = 'SELECT forum_id		FROM ' . FORUMS_ACCESS_TABLE . '		WHERE forum_id = ' . $forum_data['forum_id'] . '			AND user_id = ' . $user->data['user_id'] . "			AND session_id = '" . $db->sql_escape($user->session_id) . "'";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		return true;	}	if ($password)	{		// Remove expired authorised sessions		$sql = 'SELECT f.session_id			FROM ' . FORUMS_ACCESS_TABLE . ' f			LEFT JOIN ' . SESSIONS_TABLE . ' s ON (f.session_id = s.session_id)			WHERE s.session_id IS NULL';		$result = $db->sql_query($sql);		if ($row = $db->sql_fetchrow($result))		{			$sql_in = array();			do			{				$sql_in[] = (string) $row['session_id'];			}			while ($row = $db->sql_fetchrow($result));			// Remove expired sessions			$sql = 'DELETE FROM ' . FORUMS_ACCESS_TABLE . '				WHERE ' . $db->sql_in_set('session_id', $sql_in);			$db->sql_query($sql);		}		$db->sql_freeresult($result);		if (phpbb_check_hash($password, $forum_data['forum_password']))		{			$sql_ary = array(				'forum_id'		=> (int) $forum_data['forum_id'],				'user_id'		=> (int) $user->data['user_id'],				'session_id'	=> (string) $user->session_id,			);			$db->sql_query('INSERT INTO ' . FORUMS_ACCESS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));			return true;		}		$template->assign_var('LOGIN_ERROR', $user->lang['WRONG_PASSWORD']);	}	page_header($user->lang['LOGIN'], false);	$template->assign_vars(array(		'S_LOGIN_ACTION'		=> build_url(array('f')),		'S_HIDDEN_FIELDS'		=> build_hidden_fields(array('f' => $forum_data['forum_id'])))	);	$template->set_filenames(array(		'body' => 'login_forum.html')	);	page_footer();}// Little helpers/*** Little helper for the build_hidden_fields function*/function _build_hidden_fields($key, $value, $specialchar, $stripslashes){	$hidden_fields = '';	if (!is_array($value))	{		$value = ($stripslashes) ? stripslashes($value) : $value;		$value = ($specialchar) ? htmlspecialchars($value, ENT_COMPAT, 'UTF-8') : $value;		$hidden_fields .= '<input type="hidden" name="' . $key . '" value="' . $value . '" />' . "\n";	}	else	{		foreach ($value as $_key => $_value)		{			$_key = ($stripslashes) ? stripslashes($_key) : $_key;			$_key = ($specialchar) ? htmlspecialchars($_key, ENT_COMPAT, 'UTF-8') : $_key;			$hidden_fields .= _build_hidden_fields($key . '[' . $_key . ']', $_value, $specialchar, $stripslashes);		}	}	return $hidden_fields;}/*** Build simple hidden fields from array** @param array $field_ary an array of values to build the hidden field from* @param bool $specialchar if true, keys and values get specialchared* @param bool $stripslashes if true, keys and values get stripslashed** @return string the hidden fields*/function build_hidden_fields($field_ary, $specialchar = false, $stripslashes = false){	$s_hidden_fields = '';	foreach ($field_ary as $name => $vars)	{		$name = ($stripslashes) ? stripslashes($name) : $name;		$name = ($specialchar) ? htmlspecialchars($name, ENT_COMPAT, 'UTF-8') : $name;		$s_hidden_fields .= _build_hidden_fields($name, $vars, $specialchar, $stripslashes);	}	return $s_hidden_fields;}/*** Parse cfg file*/function parse_cfg_file($filename, $lines = false){	$parsed_items = array();	if ($lines === false)	{		$lines = file($filename);	}	foreach ($lines as $line)	{		$line = trim($line);		if (!$line || $line[0] == '#' || ($delim_pos = strpos($line, '=')) === false)		{			continue;		}		// Determine first occurrence, since in values the equal sign is allowed		$key = strtolower(trim(substr($line, 0, $delim_pos)));		$value = trim(substr($line, $delim_pos + 1));		if (in_array($value, array('off', 'false', '0')))		{			$value = false;		}		else if (in_array($value, array('on', 'true', '1')))		{			$value = true;		}		else if (!trim($value))		{			$value = '';		}		else if (($value[0] == "'" && $value[sizeof($value) - 1] == "'") || ($value[0] == '"' && $value[sizeof($value) - 1] == '"'))		{			$value = substr($value, 1, sizeof($value)-2);		}		$parsed_items[$key] = $value;	}	return $parsed_items;}/*** Add log event*/function add_log(){	global $db, $user;	// In phpBB 3.1.x i want to have logging in a class to be able to control it	// For now, we need a quite hakish approach to circumvent logging for some actions	// @todo implement cleanly	if (!empty($GLOBALS['skip_add_log']))	{		return false;	}	$args = func_get_args();	$mode			= array_shift($args);	$reportee_id	= ($mode == 'user') ? intval(array_shift($args)) : '';	$forum_id		= ($mode == 'mod') ? intval(array_shift($args)) : '';	$topic_id		= ($mode == 'mod') ? intval(array_shift($args)) : '';	$action			= array_shift($args);	$data			= (!sizeof($args)) ? '' : serialize($args);	$sql_ary = array(		'user_id'		=> (empty($user->data)) ? ANONYMOUS : $user->data['user_id'],		'log_ip'		=> $user->ip,		'log_time'		=> time(),		'log_operation'	=> $action,		'log_data'		=> $data,	);	switch ($mode)	{		case 'admin':			$sql_ary['log_type'] = LOG_ADMIN;		break;		case 'mod':			$sql_ary += array(				'log_type'	=> LOG_MOD,				'forum_id'	=> $forum_id,				'topic_id'	=> $topic_id			);		break;		case 'user':			$sql_ary += array(				'log_type'		=> LOG_USERS,				'reportee_id'	=> $reportee_id			);		break;		case 'critical':			$sql_ary['log_type'] = LOG_CRITICAL;		break;		default:			return false;	}	$db->sql_query('INSERT INTO ' . LOG_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary));	return $db->sql_nextid();}/*** Return a nicely formatted backtrace.** Turns the array returned by debug_backtrace() into HTML markup.* Also filters out absolute paths to phpBB root.** @return string	HTML markup*/function get_backtrace(){	$output = '<div style="font-family: monospace;">';	$backtrace = debug_backtrace();	// We skip the first one, because it only shows this file/function	unset($backtrace[0]);	foreach ($backtrace as $trace)	{		// Strip the current directory from path		$trace['file'] = (empty($trace['file'])) ? '(not given by php)' : htmlspecialchars(phpbb_filter_root_path($trace['file']));		$trace['line'] = (empty($trace['line'])) ? '(not given by php)' : $trace['line'];		// Only show function arguments for include etc.		// Other parameters may contain sensible information		$argument = '';		if (!empty($trace['args'][0]) && in_array($trace['function'], array('include', 'require', 'include_once', 'require_once')))		{			$argument = htmlspecialchars(phpbb_filter_root_path($trace['args'][0]));		}		$trace['class'] = (!isset($trace['class'])) ? '' : $trace['class'];		$trace['type'] = (!isset($trace['type'])) ? '' : $trace['type'];		$output .= '<br />';		$output .= '<b>FILE:</b> ' . $trace['file'] . '<br />';		$output .= '<b>LINE:</b> ' . ((!empty($trace['line'])) ? $trace['line'] : '') . '<br />';		$output .= '<b>CALL:</b> ' . htmlspecialchars($trace['class'] . $trace['type'] . $trace['function']);		$output .= '(' . (($argument !== '') ? "'$argument'" : '') . ')<br />';	}	$output .= '</div>';	return $output;}/*** This function returns a regular expression pattern for commonly used expressions* Use with / as delimiter for email mode and # for url modes* mode can be: email|bbcode_htm|url|url_inline|www_url|www_url_inline|relative_url|relative_url_inline|ipv4|ipv6*/function get_preg_expression($mode){	switch ($mode)	{		case 'email':			// Regex written by James Watts and Francisco Jose Martin Moreno			// http://fightingforalostcause.net/misc/2006/compare-email-regex.php			return '([\w\!\#$\%\&\'\*\+\-\/\=\?\^\`{\|\}\~]+\.)*(?:[\w\!\#$\%\'\*\+\-\/\=\?\^\`{\|\}\~]|&amp;)+@((((([a-z0-9]{1}[a-z0-9\-]{0,62}[a-z0-9]{1})|[a-z])\.)+[a-z]{2,6})|(\d{1,3}\.){3}\d{1,3}(\:\d{1,5})?)';		break;		case 'bbcode_htm':			return array(				'#<!\-\- e \-\-><a href="mailto:(.*?)">.*?</a><!\-\- e \-\->#',				'#<!\-\- l \-\-><a (?:class="[\w-]+" )?href="(.*?)(?:(&amp;|\?)sid=[0-9a-f]{32})?">.*?</a><!\-\- l \-\->#',				'#<!\-\- ([mw]) \-\-><a (?:class="[\w-]+" )?href="(.*?)">.*?</a><!\-\- \1 \-\->#',				'#<!\-\- s(.*?) \-\-><img src="\{SMILIES_PATH\}\/.*? \/><!\-\- s\1 \-\->#',				'#<!\-\- .*? \-\->#s',				'#<.*?>#s',			);		break;		// Whoa these look impressive!		// The code to generate the following two regular expressions which match valid IPv4/IPv6 addresses		// can be found in the develop directory		case 'ipv4':			return '#^(?:(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$#';		break;		case 'ipv6':			return '#^(?:(?:(?:[\dA-F]{1,4}:){6}(?:[\dA-F]{1,4}:[\dA-F]{1,4}|(?:(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])))|(?:::(?:[\dA-F]{1,4}:){0,5}(?:[\dA-F]{1,4}(?::[\dA-F]{1,4})?|(?:(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])))|(?:(?:[\dA-F]{1,4}:):(?:[\dA-F]{1,4}:){4}(?:[\dA-F]{1,4}:[\dA-F]{1,4}|(?:(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])))|(?:(?:[\dA-F]{1,4}:){1,2}:(?:[\dA-F]{1,4}:){3}(?:[\dA-F]{1,4}:[\dA-F]{1,4}|(?:(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])))|(?:(?:[\dA-F]{1,4}:){1,3}:(?:[\dA-F]{1,4}:){2}(?:[\dA-F]{1,4}:[\dA-F]{1,4}|(?:(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])))|(?:(?:[\dA-F]{1,4}:){1,4}:(?:[\dA-F]{1,4}:)(?:[\dA-F]{1,4}:[\dA-F]{1,4}|(?:(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])))|(?:(?:[\dA-F]{1,4}:){1,5}:(?:[\dA-F]{1,4}:[\dA-F]{1,4}|(?:(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(?:\d{1,2}|1\d\d|2[0-4]\d|25[0-5])))|(?:(?:[\dA-F]{1,4}:){1,6}:[\dA-F]{1,4})|(?:(?:[\dA-F]{1,4}:){1,7}:)|(?:::))$#i';		break;		case 'url':		case 'url_inline':			$inline = ($mode == 'url') ? ')' : '';			$scheme = ($mode == 'url') ? '[a-z\d+\-.]' : '[a-z\d+]'; // avoid automatic parsing of "word" in "last word.http://..."			// generated with regex generation file in the develop folder			return "[a-z]$scheme*:/{2}(?:(?:[a-z0-9\-._~!$&'($inline*+,;=:@|]+|%[\dA-F]{2})+|[0-9.]+|\[[a-z0-9.]+:[a-z0-9.]+:[a-z0-9.:]+\])(?::\d*)?(?:/(?:[a-z0-9\-._~!$&'($inline*+,;=:@|]+|%[\dA-F]{2})*)*(?:\?(?:[a-z0-9\-._~!$&'($inline*+,;=:@/?|]+|%[\dA-F]{2})*)?(?:\#(?:[a-z0-9\-._~!$&'($inline*+,;=:@/?|]+|%[\dA-F]{2})*)?";		break;		case 'www_url':		case 'www_url_inline':			$inline = ($mode == 'www_url') ? ')' : '';			return "www\.(?:[a-z0-9\-._~!$&'($inline*+,;=:@|]+|%[\dA-F]{2})+(?::\d*)?(?:/(?:[a-z0-9\-._~!$&'($inline*+,;=:@|]+|%[\dA-F]{2})*)*(?:\?(?:[a-z0-9\-._~!$&'($inline*+,;=:@/?|]+|%[\dA-F]{2})*)?(?:\#(?:[a-z0-9\-._~!$&'($inline*+,;=:@/?|]+|%[\dA-F]{2})*)?";		break;		case 'relative_url':		case 'relative_url_inline':			$inline = ($mode == 'relative_url') ? ')' : '';			return "(?:[a-z0-9\-._~!$&'($inline*+,;=:@|]+|%[\dA-F]{2})*(?:/(?:[a-z0-9\-._~!$&'($inline*+,;=:@|]+|%[\dA-F]{2})*)*(?:\?(?:[a-z0-9\-._~!$&'($inline*+,;=:@/?|]+|%[\dA-F]{2})*)?(?:\#(?:[a-z0-9\-._~!$&'($inline*+,;=:@/?|]+|%[\dA-F]{2})*)?";		break;		case 'table_prefix':			return '#^[a-zA-Z][a-zA-Z0-9_]*$#';		break;	}	return '';}/*** Generate regexp for naughty words censoring* Depends on whether installed PHP version supports unicode properties** @param string	$word			word template to be replaced* @param bool	$use_unicode	whether or not to take advantage of PCRE supporting unicode** @return string $preg_expr		regex to use with word censor*/function get_censor_preg_expression($word, $use_unicode = true){	static $unicode_support = null;	// Check whether PHP version supports unicode properties	if (is_null($unicode_support))	{		$unicode_support = ((version_compare(PHP_VERSION, '5.1.0', '>=') || (version_compare(PHP_VERSION, '5.0.0-dev', '<=') && version_compare(PHP_VERSION, '4.4.0', '>='))) && @preg_match('/\p{L}/u', 'a') !== false) ? true : false;	}	// Unescape the asterisk to simplify further conversions	$word = str_replace('\*', '*', preg_quote($word, '#'));	if ($use_unicode && $unicode_support)	{		// Replace asterisk(s) inside the pattern, at the start and at the end of it with regexes		$word = preg_replace(array('#(?<=[\p{Nd}\p{L}_])\*+(?=[\p{Nd}\p{L}_])#iu', '#^\*+#', '#\*+$#'), array('([\x20]*?|[\p{Nd}\p{L}_-]*?)', '[\p{Nd}\p{L}_-]*?', '[\p{Nd}\p{L}_-]*?'), $word);		// Generate the final substitution		$preg_expr = '#(?<![\p{Nd}\p{L}_-])(' . $word . ')(?![\p{Nd}\p{L}_-])#iu';	}	else	{		// Replace the asterisk inside the pattern, at the start and at the end of it with regexes		$word = preg_replace(array('#(?<=\S)\*+(?=\S)#iu', '#^\*+#', '#\*+$#'), array('(\x20*?\S*?)', '\S*?', '\S*?'), $word);		// Generate the final substitution		$preg_expr = '#(?<!\S)(' . $word . ')(?!\S)#iu';	}	return $preg_expr;}/*** Returns the first block of the specified IPv6 address and as many additional* ones as specified in the length paramater.* If length is zero, then an empty string is returned.* If length is greater than 3 the complete IP will be returned*/function short_ipv6($ip, $length){	if ($length < 1)	{		return '';	}	// extend IPv6 addresses	$blocks = substr_count($ip, ':') + 1;	if ($blocks < 9)	{		$ip = str_replace('::', ':' . str_repeat('0000:', 9 - $blocks), $ip);	}	if ($ip[0] == ':')	{		$ip = '0000' . $ip;	}	if ($length < 4)	{		$ip = implode(':', array_slice(explode(':', $ip), 0, 1 + $length));	}	return $ip;}/*** Wrapper for php's checkdnsrr function.** @param string $host	Fully-Qualified Domain Name* @param string $type	Resource record type to lookup*						Supported types are: MX (default), A, AAAA, NS, TXT, CNAME*						Other types may work or may not work** @return mixed		true if entry found,*					false if entry not found,*					null if this function is not supported by this environment** Since null can also be returned, you probably want to compare the result* with === true or === false,** @author bantu*/function phpbb_checkdnsrr($host, $type = 'MX'){	// The dot indicates to search the DNS root (helps those having DNS prefixes on the same domain)	if (substr($host, -1) == '.')	{		$host_fqdn = $host;		$host = substr($host, 0, -1);	}	else	{		$host_fqdn = $host . '.';	}	// $host		has format	some.host.example.com	// $host_fqdn	has format	some.host.example.com.	// If we're looking for an A record we can use gethostbyname()	if ($type == 'A' && function_exists('gethostbyname'))	{		return (@gethostbyname($host_fqdn) == $host_fqdn) ? false : true;	}	// checkdnsrr() is available on Windows since PHP 5.3,	// but until 5.3.3 it only works for MX records	// See: http://bugs.php.net/bug.php?id=51844	// Call checkdnsrr() if	// we're looking for an MX record or	// we're not on Windows or	// we're running a PHP version where #51844 has been fixed	// checkdnsrr() supports AAAA since 5.0.0	// checkdnsrr() supports TXT since 5.2.4	if (		($type == 'MX' || DIRECTORY_SEPARATOR != '\\' || version_compare(PHP_VERSION, '5.3.3', '>=')) &&		($type != 'AAAA' || version_compare(PHP_VERSION, '5.0.0', '>=')) &&		($type != 'TXT' || version_compare(PHP_VERSION, '5.2.4', '>=')) &&		function_exists('checkdnsrr')	)	{		return checkdnsrr($host_fqdn, $type);	}	// dns_get_record() is available since PHP 5; since PHP 5.3 also on Windows,	// but on Windows it does not work reliable for AAAA records before PHP 5.3.1	// Call dns_get_record() if	// we're not looking for an AAAA record or	// we're not on Windows or	// we're running a PHP version where AAAA lookups work reliable	if (		($type != 'AAAA' || DIRECTORY_SEPARATOR != '\\' || version_compare(PHP_VERSION, '5.3.1', '>=')) &&		function_exists('dns_get_record')	)	{		// dns_get_record() expects an integer as second parameter		// We have to convert the string $type to the corresponding integer constant.		$type_constant = 'DNS_' . $type;		$type_param = (defined($type_constant)) ? constant($type_constant) : DNS_ANY;		// dns_get_record() might throw E_WARNING and return false for records that do not exist		$resultset = @dns_get_record($host_fqdn, $type_param);		if (empty($resultset) || !is_array($resultset))		{			return false;		}		else if ($type_param == DNS_ANY)		{			// $resultset is a non-empty array			return true;		}		foreach ($resultset as $result)		{			if (				isset($result['host']) && $result['host'] == $host &&				isset($result['type']) && $result['type'] == $type			)			{				return true;			}		}		return false;	}	// If we're on Windows we can still try to call nslookup via exec() as a last resort	if (DIRECTORY_SEPARATOR == '\\' && function_exists('exec'))	{		@exec('nslookup -type=' . escapeshellarg($type) . ' ' . escapeshellarg($host_fqdn), $output);		// If output is empty, the nslookup failed		if (empty($output))		{			return NULL;		}		foreach ($output as $line)		{			$line = trim($line);			if (empty($line))			{				continue;			}			// Squash tabs and multiple whitespaces to a single whitespace.			$line = preg_replace('/\s+/', ' ', $line);			switch ($type)			{				case 'MX':					if (stripos($line, "$host MX") === 0)					{						return true;					}				break;				case 'NS':					if (stripos($line, "$host nameserver") === 0)					{						return true;					}				break;				case 'TXT':					if (stripos($line, "$host text") === 0)					{						return true;					}				break;				case 'CNAME':					if (stripos($line, "$host canonical name") === 0)					{						return true;					}				break;				default:				case 'AAAA':					// AAAA records returned by nslookup on Windows XP/2003 have this format.					// Later Windows versions use the A record format below for AAAA records.					if (stripos($line, "$host AAAA IPv6 address") === 0)					{						return true;					}				// No break				case 'A':					if (!empty($host_matches))					{						// Second line						if (stripos($line, "Address: ") === 0)						{							return true;						}						else						{							$host_matches = false;						}					}					else if (stripos($line, "Name: $host") === 0)					{						// First line						$host_matches = true;					}				break;			}		}		return false;	}	return NULL;}// Handler, header and footer/*** Error and message handler, call with trigger_error if reqd*/function msg_handler($errno, $msg_text, $errfile, $errline){	global $cache, $db, $auth, $template, $config, $user;	global $phpEx, $phpbb_root_path, $msg_title, $msg_long_text;	// Do not display notices if we suppress them via @	if (error_reporting() == 0 && $errno != E_USER_ERROR && $errno != E_USER_WARNING && $errno != E_USER_NOTICE)	{		return;	}	// Message handler is stripping text. In case we need it, we are possible to define long text...	if (isset($msg_long_text) && $msg_long_text && !$msg_text)	{		$msg_text = $msg_long_text;	}	if (!defined('E_DEPRECATED'))	{		define('E_DEPRECATED', 8192);	}	switch ($errno)	{		case E_NOTICE:		case E_WARNING:			// Check the error reporting level and return if the error level does not match			// If DEBUG is defined the default level is E_ALL			if (($errno & ((defined('DEBUG')) ? E_ALL : error_reporting())) == 0)			{				return;			}			if (strpos($errfile, 'cache') === false && strpos($errfile, 'template.') === false)			{				$errfile = phpbb_filter_root_path($errfile);				$msg_text = phpbb_filter_root_path($msg_text);				$error_name = ($errno === E_WARNING) ? 'PHP Warning' : 'PHP Notice';				echo '<b>[phpBB Debug] ' . $error_name . '</b>: in file <b>' . $errfile . '</b> on line <b>' . $errline . '</b>: <b>' . $msg_text . '</b><br />' . "\n";				// we are writing an image - the user won't see the debug, so let's place it in the log				if (defined('IMAGE_OUTPUT') || defined('IN_CRON'))				{					add_log('critical', 'LOG_IMAGE_GENERATION_ERROR', $errfile, $errline, $msg_text);				}				// echo '<br /><br />BACKTRACE<br />' . get_backtrace() . '<br />' . "\n";			}			return;		break;		case E_USER_ERROR:			if (!empty($user) && !empty($user->lang))			{				$msg_text = (!empty($user->lang[$msg_text])) ? $user->lang[$msg_text] : $msg_text;				$msg_title = (!isset($msg_title)) ? $user->lang['GENERAL_ERROR'] : ((!empty($user->lang[$msg_title])) ? $user->lang[$msg_title] : $msg_title);				$l_return_index = sprintf($user->lang['RETURN_INDEX'], '<a href="' . $phpbb_root_path . '">', '</a>');				$l_notify = '';				if (!empty($config['board_contact']))				{					$l_notify = '<p>' . sprintf($user->lang['NOTIFY_ADMIN_EMAIL'], $config['board_contact']) . '</p>';				}			}			else			{				$msg_title = 'General Error';				$l_return_index = '<a href="' . $phpbb_root_path . '">Return to index page</a>';				$l_notify = '';				if (!empty($config['board_contact']))				{					$l_notify = '<p>Please notify the board administrator or webmaster: <a href="mailto:' . $config['board_contact'] . '">' . $config['board_contact'] . '</a></p>';				}			}			if ((defined('DEBUG') || defined('IN_CRON') || defined('IMAGE_OUTPUT')) && isset($db))			{				// let's avoid loops				$db->sql_return_on_error(true);				add_log('critical', 'LOG_GENERAL_ERROR', $msg_title, $msg_text);				$db->sql_return_on_error(false);			}			// Do not send 200 OK, but service unavailable on errors			send_status_line(503, 'Service Unavailable');			garbage_collection();			// Try to not call the adm page data...			echo '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">';			echo '<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr">';			echo '<head>';			echo '<meta http-equiv="content-type" content="text/html; charset=utf-8" />';			echo '<title>' . $msg_title . '</title>';			echo '<style type="text/css">' . "\n" . '/* <![CDATA[ */' . "\n";			echo '* { margin: 0; padding: 0; } html { font-size: 100%; height: 100%; margin-bottom: 1px; background-color: #E4EDF0; } body { font-family: "Lucida Grande", Verdana, Helvetica, Arial, sans-serif; color: #536482; background: #E4EDF0; font-size: 62.5%; margin: 0; } ';			echo 'a:link, a:active, a:visited { color: #006699; text-decoration: none; } a:hover { color: #DD6900; text-decoration: underline; } ';			echo '#wrap { padding: 0 20px 15px 20px; min-width: 615px; } #page-header { text-align: right; height: 40px; } #page-footer { clear: both; font-size: 1em; text-align: center; } ';			echo '.panel { margin: 4px 0; background-color: #FFFFFF; border: solid 1px  #A9B8C2; } ';			echo '#errorpage #page-header a { font-weight: bold; line-height: 6em; } #errorpage #content { padding: 10px; } #errorpage #content h1 { line-height: 1.2em; margin-bottom: 0; color: #DF075C; } ';			echo '#errorpage #content div { margin-top: 20px; margin-bottom: 5px; border-bottom: 1px solid #CCCCCC; padding-bottom: 5px; color: #333333; font: bold 1.2em "Lucida Grande", Arial, Helvetica, sans-serif; text-decoration: none; line-height: 120%; text-align: left; } ';			echo "\n" . '/* ]]> */' . "\n";			echo '</style>';			echo '</head>';			echo '<body id="errorpage">';			echo '<div id="wrap">';			echo '	<div id="page-header">';			echo '		' . $l_return_index;			echo '	</div>';			echo '	<div id="acp">';			echo '	<div class="panel">';			echo '		<div id="content">';			echo '			<h1>' . $msg_title . '</h1>';			echo '			<div>' . $msg_text . '</div>';			echo $l_notify;			echo '		</div>';			echo '	</div>';			echo '	</div>';			echo '	<div id="page-footer">';			echo '		Powered by <a href="http://www.phpbb.com/">phpBB</a>&reg; Forum Software &copy; phpBB Group';			echo '	</div>';			echo '</div>';			echo '</body>';			echo '</html>';			exit_handler();			// On a fatal error (and E_USER_ERROR *is* fatal) we never want other scripts to continue and force an exit here.			exit;		break;		case E_USER_WARNING:		case E_USER_NOTICE:			define('IN_ERROR_HANDLER', true);			if (empty($user->data))			{				$user->session_begin();			}			// We re-init the auth array to get correct results on login/logout			$auth->acl($user->data);			if (empty($user->lang))			{				$user->setup();			}			if ($msg_text == 'ERROR_NO_ATTACHMENT' || $msg_text == 'NO_FORUM' || $msg_text == 'NO_TOPIC' || $msg_text == 'NO_USER')			{				send_status_line(404, 'Not Found');			}			$msg_text = (!empty($user->lang[$msg_text])) ? $user->lang[$msg_text] : $msg_text;			$msg_title = (!isset($msg_title)) ? $user->lang['INFORMATION'] : ((!empty($user->lang[$msg_title])) ? $user->lang[$msg_title] : $msg_title);			if (!defined('HEADER_INC'))			{				if (defined('IN_ADMIN') && isset($user->data['session_admin']) && $user->data['session_admin'])				{					adm_page_header($msg_title);				}				else				{					page_header($msg_title, false);				}			}			$template->set_filenames(array(				'body' => 'message_body.html')			);			$template->assign_vars(array(				'MESSAGE_TITLE'		=> $msg_title,				'MESSAGE_TEXT'		=> $msg_text,				'S_USER_WARNING'	=> ($errno == E_USER_WARNING) ? true : false,				'S_USER_NOTICE'		=> ($errno == E_USER_NOTICE) ? true : false)			);			// We do not want the cron script to be called on error messages			define('IN_CRON', true);			if (defined('IN_ADMIN') && isset($user->data['session_admin']) && $user->data['session_admin'])			{				adm_page_footer();			}			else			{				page_footer();			}			exit_handler();		break;		// PHP4 compatibility		case E_DEPRECATED:			return true;		break;	}	// If we notice an error not handled here we pass this back to PHP by returning false	// This may not work for all php versions	return false;}/*** Removes absolute path to phpBB root directory from error messages* and converts backslashes to forward slashes.** @param string $errfile	Absolute file path*							(e.g. /var/www/phpbb3/phpBB/includes/functions.php)*							Please note that if $errfile is outside of the phpBB root,*							the root path will not be found and can not be filtered.* @return string			Relative file path*							(e.g. /includes/functions.php)*/function phpbb_filter_root_path($errfile){	static $root_path;	if (empty($root_path))	{		$root_path = phpbb_realpath(dirname(__FILE__) . '/../');	}	return str_replace(array($root_path, '\\'), array('[ROOT]', '/'), $errfile);}/*** Queries the session table to get information about online guests* @param int $item_id Limits the search to the item with this id* @param string $item The name of the item which is stored in the session table as session_{$item}_id* @return int The number of active distinct guest sessions*/function obtain_guest_count($item_id = 0, $item = 'forum'){	global $db, $config;	if ($item_id)	{		$reading_sql = ' AND s.session_' . $item . '_id = ' . (int) $item_id;	}	else	{		$reading_sql = '';	}	$time = (time() - (intval($config['load_online_time']) * 60));	// Get number of online guests	if ($db->sql_layer === 'sqlite')	{		$sql = 'SELECT COUNT(session_ip) as num_guests			FROM (				SELECT DISTINCT s.session_ip				FROM ' . SESSIONS_TABLE . ' s				WHERE s.session_user_id = ' . ANONYMOUS . '					AND s.session_time >= ' . ($time - ((int) ($time % 60))) .				$reading_sql .			')';	}	else	{		$sql = 'SELECT COUNT(DISTINCT s.session_ip) as num_guests			FROM ' . SESSIONS_TABLE . ' s			WHERE s.session_user_id = ' . ANONYMOUS . '				AND s.session_time >= ' . ($time - ((int) ($time % 60))) .			$reading_sql;	}	$result = $db->sql_query($sql);	$guests_online = (int) $db->sql_fetchfield('num_guests');	$db->sql_freeresult($result);	return $guests_online;}/*** Queries the session table to get information about online users* @param int $item_id Limits the search to the item with this id* @param string $item The name of the item which is stored in the session table as session_{$item}_id* @return array An array containing the ids of online, hidden and visible users, as well as statistical info*/function obtain_users_online($item_id = 0, $item = 'forum'){	global $db, $config, $user;	$reading_sql = '';	if ($item_id !== 0)	{		$reading_sql = ' AND s.session_' . $item . '_id = ' . (int) $item_id;	}	$online_users = array(		'online_users'			=> array(),		'hidden_users'			=> array(),		'total_online'			=> 0,		'visible_online'		=> 0,		'hidden_online'			=> 0,		'guests_online'			=> 0,	);	if ($config['load_online_guests'])	{		$online_users['guests_online'] = obtain_guest_count($item_id, $item);	}	// a little discrete magic to cache this for 30 seconds	$time = (time() - (intval($config['load_online_time']) * 60));	$sql = 'SELECT s.session_user_id, s.session_ip, s.session_viewonline		FROM ' . SESSIONS_TABLE . ' s		WHERE s.session_time >= ' . ($time - ((int) ($time % 30))) .			$reading_sql .		' AND s.session_user_id <> ' . ANONYMOUS;	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		// Skip multiple sessions for one user		if (!isset($online_users['online_users'][$row['session_user_id']]))		{			$online_users['online_users'][$row['session_user_id']] = (int) $row['session_user_id'];			if ($row['session_viewonline'])			{				$online_users['visible_online']++;			}			else			{				$online_users['hidden_users'][$row['session_user_id']] = (int) $row['session_user_id'];				$online_users['hidden_online']++;			}		}	}	$online_users['total_online'] = $online_users['guests_online'] + $online_users['visible_online'] + $online_users['hidden_online'];	$db->sql_freeresult($result);	return $online_users;}/*** Uses the result of obtain_users_online to generate a localized, readable representation.* @param mixed $online_users result of obtain_users_online - array with user_id lists for total, hidden and visible users, and statistics* @param int $item_id Indicate that the data is limited to one item and not global* @param string $item The name of the item which is stored in the session table as session_{$item}_id* @return array An array containing the string for output to the template*/function obtain_users_online_string($online_users, $item_id = 0, $item = 'forum'){	global $config, $db, $user, $auth;	$user_online_link = $online_userlist = '';	// Need caps version of $item for language-strings	$item_caps = strtoupper($item);	if (sizeof($online_users['online_users']))	{		$sql = 'SELECT username, username_clean, user_id, user_type, user_allow_viewonline, user_colour				FROM ' . USERS_TABLE . '				WHERE ' . $db->sql_in_set('user_id', $online_users['online_users']) . '				ORDER BY username_clean ASC';		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			// User is logged in and therefore not a guest			if ($row['user_id'] != ANONYMOUS)			{				if (isset($online_users['hidden_users'][$row['user_id']]))				{					$row['username'] = '<em>' . $row['username'] . '</em>';				}				if (!isset($online_users['hidden_users'][$row['user_id']]) || $auth->acl_get('u_viewonline'))				{					$user_online_link = get_username_string(($row['user_type'] <> USER_IGNORE) ? 'full' : 'no_profile', $row['user_id'], $row['username'], $row['user_colour']);					$online_userlist .= ($online_userlist != '') ? ', ' . $user_online_link : $user_online_link;				}			}		}		$db->sql_freeresult($result);	}	if (!$online_userlist)	{		$online_userlist = $user->lang['NO_ONLINE_USERS'];	}	if ($item_id === 0)	{		$online_userlist = $user->lang['REGISTERED_USERS'] . ' ' . $online_userlist;	}	else if ($config['load_online_guests'])	{		$l_online = ($online_users['guests_online'] === 1) ? $user->lang['BROWSING_' . $item_caps . '_GUEST'] : $user->lang['BROWSING_' . $item_caps . '_GUESTS'];		$online_userlist = sprintf($l_online, $online_userlist, $online_users['guests_online']);	}	else	{		$online_userlist = sprintf($user->lang['BROWSING_' . $item_caps], $online_userlist);	}	// Build online listing	$vars_online = array(		'ONLINE'	=> array('total_online', 'l_t_user_s', 0),		'REG'		=> array('visible_online', 'l_r_user_s', !$config['load_online_guests']),		'HIDDEN'	=> array('hidden_online', 'l_h_user_s', $config['load_online_guests']),		'GUEST'		=> array('guests_online', 'l_g_user_s', 0)	);	foreach ($vars_online as $l_prefix => $var_ary)	{		if ($var_ary[2])		{			$l_suffix = '_AND';		}		else		{			$l_suffix = '';		}		switch ($online_users[$var_ary[0]])		{			case 0:				${$var_ary[1]} = $user->lang[$l_prefix . '_USERS_ZERO_TOTAL' . $l_suffix];			break;			case 1:				${$var_ary[1]} = $user->lang[$l_prefix . '_USER_TOTAL' . $l_suffix];			break;			default:				${$var_ary[1]} = $user->lang[$l_prefix . '_USERS_TOTAL' . $l_suffix];			break;		}	}	unset($vars_online);	$l_online_users = sprintf($l_t_user_s, $online_users['total_online']);	$l_online_users .= sprintf($l_r_user_s, $online_users['visible_online']);	$l_online_users .= sprintf($l_h_user_s, $online_users['hidden_online']);	if ($config['load_online_guests'])	{		$l_online_users .= sprintf($l_g_user_s, $online_users['guests_online']);	}	return array(		'online_userlist'	=> $online_userlist,		'l_online_users'	=> $l_online_users,	);}/*** Get option bitfield from custom data** @param int	$bit		The bit/value to get* @param int	$data		Current bitfield to check* @return bool	Returns true if value of constant is set in bitfield, else false*/function phpbb_optionget($bit, $data){	return ($data & 1 << (int) $bit) ? true : false;}/*** Set option bitfield** @param int	$bit		The bit/value to set/unset* @param bool	$set		True if option should be set, false if option should be unset.* @param int	$data		Current bitfield to change** @return int	The new bitfield*/function phpbb_optionset($bit, $set, $data){	if ($set && !($data & 1 << $bit))	{		$data += 1 << $bit;	}	else if (!$set && ($data & 1 << $bit))	{		$data -= 1 << $bit;	}	return $data;}/*** Login using http authenticate.** @param array	$param		Parameter array, see $param_defaults array.** @return void*/function phpbb_http_login($param){	global $auth, $user;	global $config;	$param_defaults = array(		'auth_message'	=> '',		'autologin'		=> false,		'viewonline'	=> true,		'admin'			=> false,	);	// Overwrite default values with passed values	$param = array_merge($param_defaults, $param);	// User is already logged in	// We will not overwrite his session	if (!empty($user->data['is_registered']))	{		return;	}	// $_SERVER keys to check	$username_keys = array(		'PHP_AUTH_USER',		'Authorization',		'REMOTE_USER', 'REDIRECT_REMOTE_USER',		'HTTP_AUTHORIZATION', 'REDIRECT_HTTP_AUTHORIZATION',		'REMOTE_AUTHORIZATION', 'REDIRECT_REMOTE_AUTHORIZATION',		'AUTH_USER',	);	$password_keys = array(		'PHP_AUTH_PW',		'REMOTE_PASSWORD',		'AUTH_PASSWORD',	);	$username = null;	foreach ($username_keys as $k)	{		if (isset($_SERVER[$k]))		{			$username = $_SERVER[$k];			break;		}	}	$password = null;	foreach ($password_keys as $k)	{		if (isset($_SERVER[$k]))		{			$password = $_SERVER[$k];			break;		}	}	// Decode encoded information (IIS, CGI, FastCGI etc.)	if (!is_null($username) && is_null($password) && strpos($username, 'Basic ') === 0)	{		list($username, $password) = explode(':', base64_decode(substr($username, 6)), 2);	}	if (!is_null($username) && !is_null($password))	{		set_var($username, $username, 'string', true);		set_var($password, $password, 'string', true);		$auth_result = $auth->login($username, $password, $param['autologin'], $param['viewonline'], $param['admin']);		if ($auth_result['status'] == LOGIN_SUCCESS)		{			return;		}		else if ($auth_result['status'] == LOGIN_ERROR_ATTEMPTS)		{			send_status_line(401, 'Unauthorized');			trigger_error('NOT_AUTHORISED');		}	}	// Prepend sitename to auth_message	$param['auth_message'] = ($param['auth_message'] === '') ? $config['sitename'] : $config['sitename'] . ' - ' . $param['auth_message'];	// We should probably filter out non-ASCII characters - RFC2616	$param['auth_message'] = preg_replace('/[\x80-\xFF]/', '?', $param['auth_message']);	header('WWW-Authenticate: Basic realm="' . $param['auth_message'] . '"');	send_status_line(401, 'Unauthorized');	trigger_error('NOT_AUTHORISED');}/*** Generate page header*/function page_header($page_title = '', $display_online_list = true, $item_id = 0, $item = 'forum'){	global $db, $config, $template, $SID, $_SID, $_EXTRA_URL, $user, $auth, $phpEx, $phpbb_root_path;	if (defined('HEADER_INC'))	{		return;	}	define('HEADER_INC', true);	// gzip_compression	if ($config['gzip_compress'])	{		// to avoid partially compressed output resulting in blank pages in		// the browser or error messages, compression is disabled in a few cases:		//		// 1) if headers have already been sent, this indicates plaintext output		//    has been started so further content must not be compressed		// 2) the length of the current output buffer is non-zero. This means		//    there is already some uncompressed content in this output buffer		//    so further output must not be compressed		// 3) if more than one level of output buffering is used because we		//    cannot test all output buffer level content lengths. One level		//    could be caused by php.ini output_buffering. Anything		//    beyond that is manual, so the code wrapping phpBB in output buffering		//    can easily compress the output itself.		//		if (@extension_loaded('zlib') && !headers_sent() && ob_get_level() <= 1 && ob_get_length() == 0)		{			ob_start('ob_gzhandler');		}	}	// Generate logged in/logged out status	if ($user->data['user_id'] != ANONYMOUS)	{		$u_login_logout = append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=logout', true, $user->session_id);		$l_login_logout = sprintf($user->lang['LOGOUT_USER'], $user->data['username']);	}	else	{		$u_login_logout = append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=login');		$l_login_logout = $user->lang['LOGIN'];	}	// Last visit date/time	$s_last_visit = ($user->data['user_id'] != ANONYMOUS) ? $user->format_date($user->data['session_last_visit']) : '';	// Get users online list ... if required	$l_online_users = $online_userlist = $l_online_record = $l_online_time = '';	if ($config['load_online'] && $config['load_online_time'] && $display_online_list)	{		/**		* Load online data:		* For obtaining another session column use $item and $item_id in the function-parameter, whereby the column is session_{$item}_id.		*/		$item_id = max($item_id, 0);		$online_users = obtain_users_online($item_id, $item);		$user_online_strings = obtain_users_online_string($online_users, $item_id, $item);		$l_online_users = $user_online_strings['l_online_users'];		$online_userlist = $user_online_strings['online_userlist'];		$total_online_users = $online_users['total_online'];		if ($total_online_users > $config['record_online_users'])		{			set_config('record_online_users', $total_online_users, true);			set_config('record_online_date', time(), true);		}		$l_online_record = sprintf($user->lang['RECORD_ONLINE_USERS'], $config['record_online_users'], $user->format_date($config['record_online_date'], false, true));		$l_online_time = ($config['load_online_time'] == 1) ? 'VIEW_ONLINE_TIME' : 'VIEW_ONLINE_TIMES';		$l_online_time = sprintf($user->lang[$l_online_time], $config['load_online_time']);	}	$l_privmsgs_text = $l_privmsgs_text_unread = '';	$s_privmsg_new = false;	// Obtain number of new private messages if user is logged in	if (!empty($user->data['is_registered']))	{		if ($user->data['user_new_privmsg'])		{			$l_message_new = ($user->data['user_new_privmsg'] == 1) ? $user->lang['NEW_PM'] : $user->lang['NEW_PMS'];			$l_privmsgs_text = sprintf($l_message_new, $user->data['user_new_privmsg']);			if (!$user->data['user_last_privmsg'] || $user->data['user_last_privmsg'] > $user->data['session_last_visit'])			{				$sql = 'UPDATE ' . USERS_TABLE . '					SET user_last_privmsg = ' . $user->data['session_last_visit'] . '					WHERE user_id = ' . $user->data['user_id'];				$db->sql_query($sql);				$s_privmsg_new = true;			}			else			{				$s_privmsg_new = false;			}		}		else		{			$l_privmsgs_text = $user->lang['NO_NEW_PM'];			$s_privmsg_new = false;		}		$l_privmsgs_text_unread = '';		if ($user->data['user_unread_privmsg'] && $user->data['user_unread_privmsg'] != $user->data['user_new_privmsg'])		{			$l_message_unread = ($user->data['user_unread_privmsg'] == 1) ? $user->lang['UNREAD_PM'] : $user->lang['UNREAD_PMS'];			$l_privmsgs_text_unread = sprintf($l_message_unread, $user->data['user_unread_privmsg']);		}	}	$forum_id = request_var('f', 0);	$topic_id = request_var('t', 0);	$s_feed_news = false;	// Get option for news	if ($config['feed_enable'])	{		$sql = 'SELECT forum_id			FROM ' . FORUMS_TABLE . '			WHERE ' . $db->sql_bit_and('forum_options', FORUM_OPTION_FEED_NEWS, '<> 0');		$result = $db->sql_query_limit($sql, 1, 0, 600);		$s_feed_news = (int) $db->sql_fetchfield('forum_id');		$db->sql_freeresult($result);	}	// Determine board url - we may need it later	$board_url = generate_board_url() . '/';	$web_path = (defined('PHPBB_USE_BOARD_URL_PATH') && PHPBB_USE_BOARD_URL_PATH) ? $board_url : $phpbb_root_path;	// Which timezone?	$tz = ($user->data['user_id'] != ANONYMOUS) ? strval(doubleval($user->data['user_timezone'])) : strval(doubleval($config['board_timezone']));	// Send a proper content-language to the output	$user_lang = $user->lang['USER_LANG'];	if (strpos($user_lang, '-x-') !== false)	{		$user_lang = substr($user_lang, 0, strpos($user_lang, '-x-'));	}	$s_search_hidden_fields = array();	if ($_SID)	{		$s_search_hidden_fields['sid'] = $_SID;	}	if (!empty($_EXTRA_URL))	{		foreach ($_EXTRA_URL as $url_param)		{			$url_param = explode('=', $url_param, 2);			$s_hidden_fields[$url_param[0]] = $url_param[1];		}	}	// The following assigns all _common_ variables that may be used at any point in a template.	$template->assign_vars(array(		'SITENAME'						=> $config['sitename'],		'SITE_DESCRIPTION'				=> $config['site_desc'],		'PAGE_TITLE'					=> $page_title,		'SCRIPT_NAME'					=> str_replace('.' . $phpEx, '', $user->page['page_name']),		'LAST_VISIT_DATE'				=> sprintf($user->lang['YOU_LAST_VISIT'], $s_last_visit),		'LAST_VISIT_YOU'				=> $s_last_visit,		'CURRENT_TIME'					=> sprintf($user->lang['CURRENT_TIME'], $user->format_date(time(), false, true)),		'TOTAL_USERS_ONLINE'			=> $l_online_users,		'LOGGED_IN_USER_LIST'			=> $online_userlist,		'RECORD_USERS'					=> $l_online_record,		'PRIVATE_MESSAGE_INFO'			=> $l_privmsgs_text,		'PRIVATE_MESSAGE_INFO_UNREAD'	=> $l_privmsgs_text_unread,		'S_USER_NEW_PRIVMSG'			=> $user->data['user_new_privmsg'],		'S_USER_UNREAD_PRIVMSG'			=> $user->data['user_unread_privmsg'],		'S_USER_NEW'					=> $user->data['user_new'],		'SID'				=> $SID,		'_SID'				=> $_SID,		'SESSION_ID'		=> $user->session_id,		'ROOT_PATH'			=> $phpbb_root_path,		'BOARD_URL'			=> $board_url,		'L_LOGIN_LOGOUT'	=> $l_login_logout,		'L_INDEX'			=> $user->lang['FORUM_INDEX'],		'L_ONLINE_EXPLAIN'	=> $l_online_time,		'U_PRIVATEMSGS'			=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=inbox'),		'U_RETURN_INBOX'		=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;folder=inbox'),		'U_POPUP_PM'			=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=popup'),		'UA_POPUP_PM'			=> addslashes(append_sid("{$phpbb_root_path}ucp.$phpEx", 'i=pm&amp;mode=popup')),		'U_MEMBERLIST'			=> append_sid("{$phpbb_root_path}memberlist.$phpEx"),		'U_VIEWONLINE'			=> ($auth->acl_gets('u_viewprofile', 'a_user', 'a_useradd', 'a_userdel')) ? append_sid("{$phpbb_root_path}viewonline.$phpEx") : '',		'U_LOGIN_LOGOUT'		=> $u_login_logout,		'U_INDEX'				=> append_sid("{$phpbb_root_path}index.$phpEx"),		'U_SEARCH'				=> append_sid("{$phpbb_root_path}search.$phpEx"),		'U_REGISTER'			=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=register'),		'U_PROFILE'				=> append_sid("{$phpbb_root_path}ucp.$phpEx"),		'U_MODCP'				=> append_sid("{$phpbb_root_path}mcp.$phpEx", false, true, $user->session_id),		'U_FAQ'					=> append_sid("{$phpbb_root_path}faq.$phpEx"),		'U_SEARCH_SELF'			=> append_sid("{$phpbb_root_path}search.$phpEx", 'search_id=egosearch'),		'U_SEARCH_NEW'			=> append_sid("{$phpbb_root_path}search.$phpEx", 'search_id=newposts'),		'U_SEARCH_UNANSWERED'	=> append_sid("{$phpbb_root_path}search.$phpEx", 'search_id=unanswered'),		'U_SEARCH_UNREAD'		=> append_sid("{$phpbb_root_path}search.$phpEx", 'search_id=unreadposts'),		'U_SEARCH_ACTIVE_TOPICS'=> append_sid("{$phpbb_root_path}search.$phpEx", 'search_id=active_topics'),		'U_DELETE_COOKIES'		=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=delete_cookies'),		'U_TEAM'				=> ($user->data['user_id'] != ANONYMOUS && !$auth->acl_get('u_viewprofile')) ? '' : append_sid("{$phpbb_root_path}memberlist.$phpEx", 'mode=leaders'),		'U_TERMS_USE'			=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=terms'),		'U_PRIVACY'				=> append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=privacy'),		'U_RESTORE_PERMISSIONS'	=> ($user->data['user_perm_from'] && $auth->acl_get('a_switchperm')) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=restore_perm') : '',		'U_FEED'				=> generate_board_url() . "/feed.$phpEx",		'S_USER_LOGGED_IN'		=> ($user->data['user_id'] != ANONYMOUS) ? true : false,		'S_AUTOLOGIN_ENABLED'	=> ($config['allow_autologin']) ? true : false,		'S_BOARD_DISABLED'		=> ($config['board_disable']) ? true : false,		'S_REGISTERED_USER'		=> (!empty($user->data['is_registered'])) ? true : false,		'S_IS_BOT'				=> (!empty($user->data['is_bot'])) ? true : false,		'S_USER_PM_POPUP'		=> $user->optionget('popuppm'),		'S_USER_LANG'			=> $user_lang,		'S_USER_BROWSER'		=> (isset($user->data['session_browser'])) ? $user->data['session_browser'] : $user->lang['UNKNOWN_BROWSER'],		'S_USERNAME'			=> $user->data['username'],		'S_CONTENT_DIRECTION'	=> $user->lang['DIRECTION'],		'S_CONTENT_FLOW_BEGIN'	=> ($user->lang['DIRECTION'] == 'ltr') ? 'left' : 'right',		'S_CONTENT_FLOW_END'	=> ($user->lang['DIRECTION'] == 'ltr') ? 'right' : 'left',		'S_CONTENT_ENCODING'	=> 'UTF-8',		'S_TIMEZONE'			=> ($user->data['user_dst'] || ($user->data['user_id'] == ANONYMOUS && $config['board_dst'])) ? sprintf($user->lang['ALL_TIMES'], $user->lang['tz'][$tz], $user->lang['tz']['dst']) : sprintf($user->lang['ALL_TIMES'], $user->lang['tz'][$tz], ''),		'S_DISPLAY_ONLINE_LIST'	=> ($l_online_time) ? 1 : 0,		'S_DISPLAY_SEARCH'		=> (!$config['load_search']) ? 0 : (isset($auth) ? ($auth->acl_get('u_search') && $auth->acl_getf_global('f_search')) : 1),		'S_DISPLAY_PM'			=> ($config['allow_privmsg'] && !empty($user->data['is_registered']) && ($auth->acl_get('u_readpm') || $auth->acl_get('u_sendpm'))) ? true : false,		'S_DISPLAY_MEMBERLIST'	=> (isset($auth)) ? $auth->acl_get('u_viewprofile') : 0,		'S_NEW_PM'				=> ($s_privmsg_new) ? 1 : 0,		'S_REGISTER_ENABLED'	=> ($config['require_activation'] != USER_ACTIVATION_DISABLE) ? true : false,		'S_FORUM_ID'			=> $forum_id,		'S_TOPIC_ID'			=> $topic_id,		'S_LOGIN_ACTION'		=> ((!defined('ADMIN_START')) ? append_sid("{$phpbb_root_path}ucp.$phpEx", 'mode=login') : append_sid("index.$phpEx", false, true, $user->session_id)),		'S_LOGIN_REDIRECT'		=> build_hidden_fields(array('redirect' => build_url())),		'S_ENABLE_FEEDS'			=> ($config['feed_enable']) ? true : false,		'S_ENABLE_FEEDS_OVERALL'	=> ($config['feed_overall']) ? true : false,		'S_ENABLE_FEEDS_FORUMS'		=> ($config['feed_overall_forums']) ? true : false,		'S_ENABLE_FEEDS_TOPICS'		=> ($config['feed_topics_new']) ? true : false,		'S_ENABLE_FEEDS_TOPICS_ACTIVE'	=> ($config['feed_topics_active']) ? true : false,		'S_ENABLE_FEEDS_NEWS'		=> ($s_feed_news) ? true : false,		'S_LOAD_UNREADS'			=> ($config['load_unreads_search'] && ($config['load_anon_lastread'] || $user->data['is_registered'])) ? true : false,		'S_SEARCH_HIDDEN_FIELDS'	=> build_hidden_fields($s_search_hidden_fields),		'T_THEME_PATH'			=> "{$web_path}styles/" . $user->theme['theme_path'] . '/theme',		'T_TEMPLATE_PATH'		=> "{$web_path}styles/" . $user->theme['template_path'] . '/template',		'T_SUPER_TEMPLATE_PATH'	=> (isset($user->theme['template_inherit_path']) && $user->theme['template_inherit_path']) ? "{$web_path}styles/" . $user->theme['template_inherit_path'] . '/template' : "{$web_path}styles/" . $user->theme['template_path'] . '/template',		'T_IMAGESET_PATH'		=> "{$web_path}styles/" . $user->theme['imageset_path'] . '/imageset',		'T_IMAGESET_LANG_PATH'	=> "{$web_path}styles/" . $user->theme['imageset_path'] . '/imageset/' . $user->lang_name,		'T_IMAGES_PATH'			=> "{$web_path}images/",		'T_SMILIES_PATH'		=> "{$web_path}{$config['smilies_path']}/",		'T_AVATAR_PATH'			=> "{$web_path}{$config['avatar_path']}/",		'T_AVATAR_GALLERY_PATH'	=> "{$web_path}{$config['avatar_gallery_path']}/",		'T_ICONS_PATH'			=> "{$web_path}{$config['icons_path']}/",		'T_RANKS_PATH'			=> "{$web_path}{$config['ranks_path']}/",		'T_UPLOAD_PATH'			=> "{$web_path}{$config['upload_path']}/",		'T_STYLESHEET_LINK'		=> (!$user->theme['theme_storedb']) ? "{$web_path}styles/" . $user->theme['theme_path'] . '/theme/stylesheet.css' : append_sid("{$phpbb_root_path}style.$phpEx", 'id=' . $user->theme['style_id'] . '&amp;lang=' . $user->lang_name),		'T_STYLESHEET_NAME'		=> $user->theme['theme_name'],		'T_THEME_NAME'			=> $user->theme['theme_path'],		'T_TEMPLATE_NAME'		=> $user->theme['template_path'],		'T_SUPER_TEMPLATE_NAME'	=> (isset($user->theme['template_inherit_path']) && $user->theme['template_inherit_path']) ? $user->theme['template_inherit_path'] : $user->theme['template_path'],		'T_IMAGESET_NAME'		=> $user->theme['imageset_path'],		'T_IMAGESET_LANG_NAME'	=> $user->data['user_lang'],		'T_IMAGES'				=> 'images',		'T_SMILIES'				=> $config['smilies_path'],		'T_AVATAR'				=> $config['avatar_path'],		'T_AVATAR_GALLERY'		=> $config['avatar_gallery_path'],		'T_ICONS'				=> $config['icons_path'],		'T_RANKS'				=> $config['ranks_path'],		'T_UPLOAD'				=> $config['upload_path'],		'SITE_LOGO_IMG'			=> $user->img('site_logo'),		'A_COOKIE_SETTINGS'		=> addslashes('; path=' . $config['cookie_path'] . ((!$config['cookie_domain'] || $config['cookie_domain'] == 'localhost' || $config['cookie_domain'] == '127.0.0.1') ? '' : '; domain=' . $config['cookie_domain']) . ((!$config['cookie_secure']) ? '' : '; secure')),	));	// application/xhtml+xml not used because of IE	header('Content-type: text/html; charset=UTF-8');	header('Cache-Control: private, no-cache="set-cookie"');	header('Expires: 0');	header('Pragma: no-cache');	if (!empty($user->data['is_bot']))	{		// Let reverse proxies know we detected a bot.		header('X-PHPBB-IS-BOT: yes');	}	return;}/*** Generate page footer*/function page_footer($run_cron = true){	global $db, $config, $template, $user, $auth, $cache, $starttime, $phpbb_root_path, $phpEx;	// Output page creation time	if (defined('DEBUG'))	{		$mtime = explode(' ', microtime());		$totaltime = $mtime[0] + $mtime[1] - $starttime;		if (!empty($_REQUEST['explain']) && $auth->acl_get('a_') && defined('DEBUG_EXTRA') && method_exists($db, 'sql_report'))		{			$db->sql_report('display');		}		$debug_output = sprintf('Time : %.3fs | ' . $db->sql_num_queries() . ' Queries | GZIP : ' . (($config['gzip_compress'] && @extension_loaded('zlib')) ? 'On' : 'Off') . (($user->load) ? ' | Load : ' . $user->load : ''), $totaltime);		if ($auth->acl_get('a_') && defined('DEBUG_EXTRA'))		{			if (function_exists('memory_get_usage'))			{				if ($memory_usage = memory_get_usage())				{					global $base_memory_usage;					$memory_usage -= $base_memory_usage;					$memory_usage = get_formatted_filesize($memory_usage);					$debug_output .= ' | Memory Usage: ' . $memory_usage;				}			}			$debug_output .= ' | <a href="' . build_url() . '&amp;explain=1">Explain</a>';		}	}	$template->assign_vars(array(		'DEBUG_OUTPUT'			=> (defined('DEBUG')) ? $debug_output : '',		'TRANSLATION_INFO'		=> (!empty($user->lang['TRANSLATION_INFO'])) ? $user->lang['TRANSLATION_INFO'] : '',		'U_ACP' => ($auth->acl_get('a_') && !empty($user->data['is_registered'])) ? append_sid("{$phpbb_root_path}adm/index.$phpEx", false, true, $user->session_id) : '')	);	// Call cron-type script	$call_cron = false;	if (!defined('IN_CRON') && $run_cron && !$config['board_disable'] && !$user->data['is_bot'])	{		$call_cron = true;		$time_now = (!empty($user->time_now) && is_int($user->time_now)) ? $user->time_now : time();		// Any old lock present?		if (!empty($config['cron_lock']))		{			$cron_time = explode(' ', $config['cron_lock']);			// If 1 hour lock is present we do not call cron.php			if ($cron_time[0] + 3600 >= $time_now)			{				$call_cron = false;			}		}	}	// Call cron job?	if ($call_cron)	{		$cron_type = '';		if ($time_now - $config['queue_interval'] > $config['last_queue_run'] && !defined('IN_ADMIN') && file_exists($phpbb_root_path . 'cache/queue.' . $phpEx))		{			// Process email queue			$cron_type = 'queue';		}		else if (method_exists($cache, 'tidy') && $time_now - $config['cache_gc'] > $config['cache_last_gc'])		{			// Tidy the cache			$cron_type = 'tidy_cache';		}		else if ($config['warnings_expire_days'] && ($time_now - $config['warnings_gc'] > $config['warnings_last_gc']))		{			$cron_type = 'tidy_warnings';		}		else if ($time_now - $config['database_gc'] > $config['database_last_gc'])		{			// Tidy the database			$cron_type = 'tidy_database';		}		else if ($time_now - $config['search_gc'] > $config['search_last_gc'])		{			// Tidy the search			$cron_type = 'tidy_search';		}		else if ($time_now - $config['session_gc'] > $config['session_last_gc'])		{			$cron_type = 'tidy_sessions';		}		if ($cron_type)		{			$template->assign_var('RUN_CRON_TASK', '<img src="' . append_sid($phpbb_root_path . 'cron.' . $phpEx, 'cron_type=' . $cron_type) . '" width="1" height="1" alt="cron" />');		}	}	$template->display('body');	garbage_collection();	exit_handler();}/*** Closing the cache object and the database* Cool function name, eh? We might want to add operations to it later*/function garbage_collection(){	global $cache, $db;	// Unload cache, must be done before the DB connection if closed	if (!empty($cache))	{		$cache->unload();	}	// Close our DB connection.	if (!empty($db))	{		$db->sql_close();	}}/*** Handler for exit calls in phpBB.* This function supports hooks.** Note: This function is called after the template has been outputted.*/function exit_handler(){	global $phpbb_hook, $config;	if (!empty($phpbb_hook) && $phpbb_hook->call_hook(__FUNCTION__))	{		if ($phpbb_hook->hook_return(__FUNCTION__))		{			return $phpbb_hook->hook_return_result(__FUNCTION__);		}	}	// As a pre-caution... some setups display a blank page if the flush() is not there.	(ob_get_level() > 0) ? @ob_flush() : @flush();	exit;}/*** Handler for init calls in phpBB. This function is called in user::setup();* This function supports hooks.*/function phpbb_user_session_handler(){	global $phpbb_hook;	if (!empty($phpbb_hook) && $phpbb_hook->call_hook(__FUNCTION__))	{		if ($phpbb_hook->hook_return(__FUNCTION__))		{			return $phpbb_hook->hook_return_result(__FUNCTION__);		}	}	return;}?>
<?php/***************************************************************************   *                           merge_clean_posts.php   *                            -------------------                          *   begin                : Tuesday, February 25, 2003  *   copyright            : (C) 2003 The phpBB Group         *   email                : support@phpbb.com                            *                                                           *   $Id$ *  ***************************************************************************/ /***************************************************************************   *                                                      *   This program is free software; you can redistribute it and/or modify     *   it under the terms of the GNU General Public License as published by    *   the Free Software Foundation; either version 2 of the License, or   *   (at your option) any later version.                       *  ***************************************************************************/ //// Security message://// This script is potentially dangerous.// Remove or comment the next line (die(".... ) to enable this script.// Do NOT FORGET to either remove this script or disable it after you have used it.//die("Please read the first lines of this script for instructions on how to enable it");@set_time_limit(2400);// This script adds missing permissions$db = $dbhost = $dbuser = $dbpasswd = $dbport = $dbname = '';define('IN_PHPBB', 1);define('ANONYMOUS', 1);$phpEx = substr(strrchr(__FILE__, '.'), 1);$phpbb_root_path='./../';include($phpbb_root_path . 'config.'.$phpEx);require($phpbb_root_path . 'includes/acm/acm_' . $acm_type . '.'.$phpEx);require($phpbb_root_path . 'includes/db/' . $dbms . '.'.$phpEx);include($phpbb_root_path . 'includes/functions.'.$phpEx);$cache		= new acm();$db			= new $sql_db();// Connect to DB$db->sql_connect($dbhost, $dbuser, $dbpasswd, $dbname, $dbport, false);$sql = "SELECT post_id, post_text FROM {$table_prefix}posts WHERE post_text LIKE '%{SMILE_PATH}%'";$result = $db->sql_query($sql);while ($row = $db->sql_fetchrow($result)){	$db->sql_query("UPDATE {$table_prefix}posts SET post_text = '" . $db->sql_escape(str_replace('{SMILE_PATH}', '{SMILIES_PATH}', $row['post_text'])) . "' WHERE post_id = " . $row['post_id']);}$db->sql_freeresult($result);echo "<p><b>Done</b></p>\n"; ?>
<?php/**** @package phpBB3* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** @ignore*/if (!defined('IN_PHPBB')){	exit;}/*** Obtain user_ids from usernames or vice versa. Returns false on* success else the error string** @param array &$user_id_ary The user ids to check or empty if usernames used* @param array &$username_ary The usernames to check or empty if user ids used* @param mixed $user_type Array of user types to check, false if not restricting by user type*/function user_get_id_name(&$user_id_ary, &$username_ary, $user_type = false){	global $db;	// Are both arrays already filled? Yep, return else	// are neither array filled?	if ($user_id_ary && $username_ary)	{		return false;	}	else if (!$user_id_ary && !$username_ary)	{		return 'NO_USERS';	}	$which_ary = ($user_id_ary) ? 'user_id_ary' : 'username_ary';	if ($$which_ary && !is_array($$which_ary))	{		$$which_ary = array($$which_ary);	}	$sql_in = ($which_ary == 'user_id_ary') ? array_map('intval', $$which_ary) : array_map('utf8_clean_string', $$which_ary);	unset($$which_ary);	$user_id_ary = $username_ary = array();	// Grab the user id/username records	$sql_where = ($which_ary == 'user_id_ary') ? 'user_id' : 'username_clean';	$sql = 'SELECT user_id, username		FROM ' . USERS_TABLE . '		WHERE ' . $db->sql_in_set($sql_where, $sql_in);	if ($user_type !== false && !empty($user_type))	{		$sql .= ' AND ' . $db->sql_in_set('user_type', $user_type);	}	$result = $db->sql_query($sql);	if (!($row = $db->sql_fetchrow($result)))	{		$db->sql_freeresult($result);		return 'NO_USERS';	}	do	{		$username_ary[$row['user_id']] = $row['username'];		$user_id_ary[] = $row['user_id'];	}	while ($row = $db->sql_fetchrow($result));	$db->sql_freeresult($result);	return false;}/*** Get latest registered username and update database to reflect it*/function update_last_username(){	global $db;	// Get latest username	$sql = 'SELECT user_id, username, user_colour		FROM ' . USERS_TABLE . '		WHERE user_type IN (' . USER_NORMAL . ', ' . USER_FOUNDER . ')		ORDER BY user_id DESC';	$result = $db->sql_query_limit($sql, 1);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		set_config('newest_user_id', $row['user_id'], true);		set_config('newest_username', $row['username'], true);		set_config('newest_user_colour', $row['user_colour'], true);	}}/*** Updates a username across all relevant tables/fields** @param string $old_name the old/current username* @param string $new_name the new username*/function user_update_name($old_name, $new_name){	global $config, $db, $cache;	$update_ary = array(		FORUMS_TABLE			=> array('forum_last_poster_name'),		MODERATOR_CACHE_TABLE	=> array('username'),		POSTS_TABLE				=> array('post_username'),		TOPICS_TABLE			=> array('topic_first_poster_name', 'topic_last_poster_name'),	);	foreach ($update_ary as $table => $field_ary)	{		foreach ($field_ary as $field)		{			$sql = "UPDATE $table				SET $field = '" . $db->sql_escape($new_name) . "'				WHERE $field = '" . $db->sql_escape($old_name) . "'";			$db->sql_query($sql);		}	}	if ($config['newest_username'] == $old_name)	{		set_config('newest_username', $new_name, true);	}	// Because some tables/caches use username-specific data we need to purge this here.	$cache->destroy('sql', MODERATOR_CACHE_TABLE);}/*** Adds an user** @param mixed $user_row An array containing the following keys (and the appropriate values): username, group_id (the group to place the user in), user_email and the user_type(usually 0). Additional entries not overridden by defaults will be forwarded.* @param string $cp_data custom profile fields, see custom_profile::build_insert_sql_array* @return the new user's ID.*/function user_add($user_row, $cp_data = false){	global $db, $user, $auth, $config, $phpbb_root_path, $phpEx;	if (empty($user_row['username']) || !isset($user_row['group_id']) || !isset($user_row['user_email']) || !isset($user_row['user_type']))	{		return false;	}	$username_clean = utf8_clean_string($user_row['username']);	if (empty($username_clean))	{		return false;	}	$sql_ary = array(		'username'			=> $user_row['username'],		'username_clean'	=> $username_clean,		'user_password'		=> (isset($user_row['user_password'])) ? $user_row['user_password'] : '',		'user_pass_convert'	=> 0,		'user_email'		=> strtolower($user_row['user_email']),		'user_email_hash'	=> phpbb_email_hash($user_row['user_email']),		'group_id'			=> $user_row['group_id'],		'user_type'			=> $user_row['user_type'],	);	// These are the additional vars able to be specified	$additional_vars = array(		'user_permissions'	=> '',		'user_timezone'		=> $config['board_timezone'],		'user_dateformat'	=> $config['default_dateformat'],		'user_lang'			=> $config['default_lang'],		'user_style'		=> (int) $config['default_style'],		'user_actkey'		=> '',		'user_ip'			=> '',		'user_regdate'		=> time(),		'user_passchg'		=> time(),		'user_options'		=> 230271,		// We do not set the new flag here - registration scripts need to specify it		'user_new'			=> 0,		'user_inactive_reason'	=> 0,		'user_inactive_time'	=> 0,		'user_lastmark'			=> time(),		'user_lastvisit'		=> 0,		'user_lastpost_time'	=> 0,		'user_lastpage'			=> '',		'user_posts'			=> 0,		'user_dst'				=> (int) $config['board_dst'],		'user_colour'			=> '',		'user_occ'				=> '',		'user_interests'		=> '',		'user_avatar'			=> '',		'user_avatar_type'		=> 0,		'user_avatar_width'		=> 0,		'user_avatar_height'	=> 0,		'user_new_privmsg'		=> 0,		'user_unread_privmsg'	=> 0,		'user_last_privmsg'		=> 0,		'user_message_rules'	=> 0,		'user_full_folder'		=> PRIVMSGS_NO_BOX,		'user_emailtime'		=> 0,		'user_notify'			=> 0,		'user_notify_pm'		=> 1,		'user_notify_type'		=> NOTIFY_EMAIL,		'user_allow_pm'			=> 1,		'user_allow_viewonline'	=> 1,		'user_allow_viewemail'	=> 1,		'user_allow_massemail'	=> 1,		'user_sig'					=> '',		'user_sig_bbcode_uid'		=> '',		'user_sig_bbcode_bitfield'	=> '',		'user_form_salt'			=> unique_id(),	);	// Now fill the sql array with not required variables	foreach ($additional_vars as $key => $default_value)	{		$sql_ary[$key] = (isset($user_row[$key])) ? $user_row[$key] : $default_value;	}	// Any additional variables in $user_row not covered above?	$remaining_vars = array_diff(array_keys($user_row), array_keys($sql_ary));	// Now fill our sql array with the remaining vars	if (sizeof($remaining_vars))	{		foreach ($remaining_vars as $key)		{			$sql_ary[$key] = $user_row[$key];		}	}	$sql = 'INSERT INTO ' . USERS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);	$db->sql_query($sql);	$user_id = $db->sql_nextid();	// Insert Custom Profile Fields	if ($cp_data !== false && sizeof($cp_data))	{		$cp_data['user_id'] = (int) $user_id;		if (!class_exists('custom_profile'))		{			include_once($phpbb_root_path . 'includes/functions_profile_fields.' . $phpEx);		}		$sql = 'INSERT INTO ' . PROFILE_FIELDS_DATA_TABLE . ' ' .			$db->sql_build_array('INSERT', custom_profile::build_insert_sql_array($cp_data));		$db->sql_query($sql);	}	// Place into appropriate group...	$sql = 'INSERT INTO ' . USER_GROUP_TABLE . ' ' . $db->sql_build_array('INSERT', array(		'user_id'		=> (int) $user_id,		'group_id'		=> (int) $user_row['group_id'],		'user_pending'	=> 0)	);	$db->sql_query($sql);	// Now make it the users default group...	group_set_user_default($user_row['group_id'], array($user_id), false);	// Add to newly registered users group if user_new is 1	if ($config['new_member_post_limit'] && $sql_ary['user_new'])	{		$sql = 'SELECT group_id			FROM ' . GROUPS_TABLE . "			WHERE group_name = 'NEWLY_REGISTERED'				AND group_type = " . GROUP_SPECIAL;		$result = $db->sql_query($sql);		$add_group_id = (int) $db->sql_fetchfield('group_id');		$db->sql_freeresult($result);		if ($add_group_id)		{			// Because these actions only fill the log unneccessarily we skip the add_log() entry with a little hack. :/			$GLOBALS['skip_add_log'] = true;			// Add user to "newly registered users" group and set to default group if admin specified so.			if ($config['new_member_group_default'])			{				group_user_add($add_group_id, $user_id, false, false, true);				$user_row['group_id'] = $add_group_id;			}			else			{				group_user_add($add_group_id, $user_id);			}			unset($GLOBALS['skip_add_log']);		}	}	// set the newest user and adjust the user count if the user is a normal user and no activation mail is sent	if ($user_row['user_type'] == USER_NORMAL || $user_row['user_type'] == USER_FOUNDER)	{		set_config('newest_user_id', $user_id, true);		set_config('newest_username', $user_row['username'], true);		set_config_count('num_users', 1, true);		$sql = 'SELECT group_colour			FROM ' . GROUPS_TABLE . '			WHERE group_id = ' . (int) $user_row['group_id'];		$result = $db->sql_query_limit($sql, 1);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		set_config('newest_user_colour', $row['group_colour'], true);	}	return $user_id;}/*** Remove User*/function user_delete($mode, $user_id, $post_username = false){	global $cache, $config, $db, $user, $auth;	global $phpbb_root_path, $phpEx;	$sql = 'SELECT *		FROM ' . USERS_TABLE . '		WHERE user_id = ' . $user_id;	$result = $db->sql_query($sql);	$user_row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$user_row)	{		return false;	}	// Before we begin, we will remove the reports the user issued.	$sql = 'SELECT r.post_id, p.topic_id		FROM ' . REPORTS_TABLE . ' r, ' . POSTS_TABLE . ' p		WHERE r.user_id = ' . $user_id . '			AND p.post_id = r.post_id';	$result = $db->sql_query($sql);	$report_posts = $report_topics = array();	while ($row = $db->sql_fetchrow($result))	{		$report_posts[] = $row['post_id'];		$report_topics[] = $row['topic_id'];	}	$db->sql_freeresult($result);	if (sizeof($report_posts))	{		$report_posts = array_unique($report_posts);		$report_topics = array_unique($report_topics);		// Get a list of topics that still contain reported posts		$sql = 'SELECT DISTINCT topic_id			FROM ' . POSTS_TABLE . '			WHERE ' . $db->sql_in_set('topic_id', $report_topics) . '				AND post_reported = 1				AND ' . $db->sql_in_set('post_id', $report_posts, true);		$result = $db->sql_query($sql);		$keep_report_topics = array();		while ($row = $db->sql_fetchrow($result))		{			$keep_report_topics[] = $row['topic_id'];		}		$db->sql_freeresult($result);		if (sizeof($keep_report_topics))		{			$report_topics = array_diff($report_topics, $keep_report_topics);		}		unset($keep_report_topics);		// Now set the flags back		$sql = 'UPDATE ' . POSTS_TABLE . '			SET post_reported = 0			WHERE ' . $db->sql_in_set('post_id', $report_posts);		$db->sql_query($sql);		if (sizeof($report_topics))		{			$sql = 'UPDATE ' . TOPICS_TABLE . '				SET topic_reported = 0				WHERE ' . $db->sql_in_set('topic_id', $report_topics);			$db->sql_query($sql);		}	}	// Remove reports	$db->sql_query('DELETE FROM ' . REPORTS_TABLE . ' WHERE user_id = ' . $user_id);	if ($user_row['user_avatar'] && $user_row['user_avatar_type'] == AVATAR_UPLOAD)	{		avatar_delete('user', $user_row);	}	switch ($mode)	{		case 'retain':			$db->sql_transaction('begin');			if ($post_username === false)			{				$post_username = $user->lang['GUEST'];			}			// If the user is inactive and newly registered we assume no posts from this user being there...			if ($user_row['user_type'] == USER_INACTIVE && $user_row['user_inactive_reason'] == INACTIVE_REGISTER && !$user_row['user_posts'])			{			}			else			{				$sql = 'UPDATE ' . FORUMS_TABLE . '					SET forum_last_poster_id = ' . ANONYMOUS . ", forum_last_poster_name = '" . $db->sql_escape($post_username) . "', forum_last_poster_colour = ''					WHERE forum_last_poster_id = $user_id";				$db->sql_query($sql);				$sql = 'UPDATE ' . POSTS_TABLE . '					SET poster_id = ' . ANONYMOUS . ", post_username = '" . $db->sql_escape($post_username) . "'					WHERE poster_id = $user_id";				$db->sql_query($sql);				$sql = 'UPDATE ' . POSTS_TABLE . '					SET post_edit_user = ' . ANONYMOUS . "					WHERE post_edit_user = $user_id";				$db->sql_query($sql);				$sql = 'UPDATE ' . TOPICS_TABLE . '					SET topic_poster = ' . ANONYMOUS . ", topic_first_poster_name = '" . $db->sql_escape($post_username) . "', topic_first_poster_colour = ''					WHERE topic_poster = $user_id";				$db->sql_query($sql);				$sql = 'UPDATE ' . TOPICS_TABLE . '					SET topic_last_poster_id = ' . ANONYMOUS . ", topic_last_poster_name = '" . $db->sql_escape($post_username) . "', topic_last_poster_colour = ''					WHERE topic_last_poster_id = $user_id";				$db->sql_query($sql);				$sql = 'UPDATE ' . ATTACHMENTS_TABLE . '					SET poster_id = ' . ANONYMOUS . "					WHERE poster_id = $user_id";				$db->sql_query($sql);				// Since we change every post by this author, we need to count this amount towards the anonymous user				// Update the post count for the anonymous user				if ($user_row['user_posts'])				{					$sql = 'UPDATE ' . USERS_TABLE . '						SET user_posts = user_posts + ' . $user_row['user_posts'] . '						WHERE user_id = ' . ANONYMOUS;					$db->sql_query($sql);				}			}			$db->sql_transaction('commit');		break;		case 'remove':			if (!function_exists('delete_posts'))			{				include($phpbb_root_path . 'includes/functions_admin.' . $phpEx);			}			// Delete posts, attachments, etc.			delete_posts('poster_id', $user_id);		break;	}	$db->sql_transaction('begin');	$table_ary = array(USERS_TABLE, USER_GROUP_TABLE, TOPICS_WATCH_TABLE, FORUMS_WATCH_TABLE, ACL_USERS_TABLE, TOPICS_TRACK_TABLE, TOPICS_POSTED_TABLE, FORUMS_TRACK_TABLE, PROFILE_FIELDS_DATA_TABLE, MODERATOR_CACHE_TABLE, DRAFTS_TABLE, BOOKMARKS_TABLE, SESSIONS_KEYS_TABLE, PRIVMSGS_FOLDER_TABLE, PRIVMSGS_RULES_TABLE);	foreach ($table_ary as $table)	{		$sql = "DELETE FROM $table			WHERE user_id = $user_id";		$db->sql_query($sql);	}	$cache->destroy('sql', MODERATOR_CACHE_TABLE);	// Delete user log entries about this user	$sql = 'DELETE FROM ' . LOG_TABLE . '		WHERE reportee_id = ' . $user_id;	$db->sql_query($sql);	// Change user_id to anonymous for this users triggered events	$sql = 'UPDATE ' . LOG_TABLE . '		SET user_id = ' . ANONYMOUS . '		WHERE user_id = ' . $user_id;	$db->sql_query($sql);	// Delete the user_id from the zebra table	$sql = 'DELETE FROM ' . ZEBRA_TABLE . '		WHERE user_id = ' . $user_id . '			OR zebra_id = ' . $user_id;	$db->sql_query($sql);	// Delete the user_id from the banlist	$sql = 'DELETE FROM ' . BANLIST_TABLE . '		WHERE ban_userid = ' . $user_id;	$db->sql_query($sql);	// Delete the user_id from the session table	$sql = 'DELETE FROM ' . SESSIONS_TABLE . '		WHERE session_user_id = ' . $user_id;	$db->sql_query($sql);	// Remove any undelivered mails...	$sql = 'SELECT msg_id, user_id		FROM ' . PRIVMSGS_TO_TABLE . '		WHERE author_id = ' . $user_id . '			AND folder_id = ' . PRIVMSGS_NO_BOX;	$result = $db->sql_query($sql);	$undelivered_msg = $undelivered_user = array();	while ($row = $db->sql_fetchrow($result))	{		$undelivered_msg[] = $row['msg_id'];		$undelivered_user[$row['user_id']][] = true;	}	$db->sql_freeresult($result);	if (sizeof($undelivered_msg))	{		$sql = 'DELETE FROM ' . PRIVMSGS_TABLE . '			WHERE ' . $db->sql_in_set('msg_id', $undelivered_msg);		$db->sql_query($sql);	}	$sql = 'DELETE FROM ' . PRIVMSGS_TO_TABLE . '		WHERE author_id = ' . $user_id . '			AND folder_id = ' . PRIVMSGS_NO_BOX;	$db->sql_query($sql);	// Delete all to-information	$sql = 'DELETE FROM ' . PRIVMSGS_TO_TABLE . '		WHERE user_id = ' . $user_id;	$db->sql_query($sql);	// Set the remaining author id to anonymous - this way users are still able to read messages from users being removed	$sql = 'UPDATE ' . PRIVMSGS_TO_TABLE . '		SET author_id = ' . ANONYMOUS . '		WHERE author_id = ' . $user_id;	$db->sql_query($sql);	$sql = 'UPDATE ' . PRIVMSGS_TABLE . '		SET author_id = ' . ANONYMOUS . '		WHERE author_id = ' . $user_id;	$db->sql_query($sql);	foreach ($undelivered_user as $_user_id => $ary)	{		if ($_user_id == $user_id)		{			continue;		}		$sql = 'UPDATE ' . USERS_TABLE . '			SET user_new_privmsg = user_new_privmsg - ' . sizeof($ary) . ',				user_unread_privmsg = user_unread_privmsg - ' . sizeof($ary) . '			WHERE user_id = ' . $_user_id;		$db->sql_query($sql);	}	$db->sql_transaction('commit');	// Reset newest user info if appropriate	if ($config['newest_user_id'] == $user_id)	{		update_last_username();	}	// Decrement number of users if this user is active	if ($user_row['user_type'] != USER_INACTIVE && $user_row['user_type'] != USER_IGNORE)	{		set_config_count('num_users', -1, true);	}	return false;}/*** Flips user_type from active to inactive and vice versa, handles group membership updates** @param string $mode can be flip for flipping from active/inactive, activate or deactivate*/function user_active_flip($mode, $user_id_ary, $reason = INACTIVE_MANUAL){	global $config, $db, $user, $auth;	$deactivated = $activated = 0;	$sql_statements = array();	if (!is_array($user_id_ary))	{		$user_id_ary = array($user_id_ary);	}	if (!sizeof($user_id_ary))	{		return;	}	$sql = 'SELECT user_id, group_id, user_type, user_inactive_reason		FROM ' . USERS_TABLE . '		WHERE ' . $db->sql_in_set('user_id', $user_id_ary);	$result = $db->sql_query($sql);	while ($row = $db->sql_fetchrow($result))	{		$sql_ary = array();		if ($row['user_type'] == USER_IGNORE || $row['user_type'] == USER_FOUNDER ||			($mode == 'activate' && $row['user_type'] != USER_INACTIVE) ||			($mode == 'deactivate' && $row['user_type'] == USER_INACTIVE))		{			continue;		}		if ($row['user_type'] == USER_INACTIVE)		{			$activated++;		}		else		{			$deactivated++;			// Remove the users session key...			$user->reset_login_keys($row['user_id']);		}		$sql_ary += array(			'user_type'				=> ($row['user_type'] == USER_NORMAL) ? USER_INACTIVE : USER_NORMAL,			'user_inactive_time'	=> ($row['user_type'] == USER_NORMAL) ? time() : 0,			'user_inactive_reason'	=> ($row['user_type'] == USER_NORMAL) ? $reason : 0,		);		$sql_statements[$row['user_id']] = $sql_ary;	}	$db->sql_freeresult($result);	if (sizeof($sql_statements))	{		foreach ($sql_statements as $user_id => $sql_ary)		{			$sql = 'UPDATE ' . USERS_TABLE . '				SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '				WHERE user_id = ' . $user_id;			$db->sql_query($sql);		}		$auth->acl_clear_prefetch(array_keys($sql_statements));	}	if ($deactivated)	{		set_config_count('num_users', $deactivated * (-1), true);	}	if ($activated)	{		set_config_count('num_users', $activated, true);	}	// Update latest username	update_last_username();}/*** Add a ban or ban exclusion to the banlist. Bans either a user, an IP or an email address** @param string $mode Type of ban. One of the following: user, ip, email* @param mixed $ban Banned entity. Either string or array with usernames, ips or email addresses* @param int $ban_len Ban length in minutes* @param string $ban_len_other Ban length as a date (YYYY-MM-DD)* @param boolean $ban_exclude Exclude these entities from banning?* @param string $ban_reason String describing the reason for this ban* @return boolean*/function user_ban($mode, $ban, $ban_len, $ban_len_other, $ban_exclude, $ban_reason, $ban_give_reason = ''){	global $db, $user, $auth, $cache;	// Delete stale bans	$sql = 'DELETE FROM ' . BANLIST_TABLE . '		WHERE ban_end < ' . time() . '			AND ban_end <> 0';	$db->sql_query($sql);	$ban_list = (!is_array($ban)) ? array_unique(explode("\n", $ban)) : $ban;	$ban_list_log = implode(', ', $ban_list);	$current_time = time();	// Set $ban_end to the unix time when the ban should end. 0 is a permanent ban.	if ($ban_len)	{		if ($ban_len != -1 || !$ban_len_other)		{			$ban_end = max($current_time, $current_time + ($ban_len) * 60);		}		else		{			$ban_other = explode('-', $ban_len_other);			if (sizeof($ban_other) == 3 && ((int)$ban_other[0] < 9999) &&				(strlen($ban_other[0]) == 4) && (strlen($ban_other[1]) == 2) && (strlen($ban_other[2]) == 2))			{				$time_offset = (isset($user->timezone) && isset($user->dst)) ? (int) $user->timezone + (int) $user->dst : 0;				$ban_end = max($current_time, gmmktime(0, 0, 0, (int)$ban_other[1], (int)$ban_other[2], (int)$ban_other[0]) - $time_offset);			}			else			{				trigger_error('LENGTH_BAN_INVALID', E_USER_WARNING);			}		}	}	else	{		$ban_end = 0;	}	$founder = $founder_names = array();	if (!$ban_exclude)	{		// Create a list of founder...		$sql = 'SELECT user_id, user_email, username_clean			FROM ' . USERS_TABLE . '			WHERE user_type = ' . USER_FOUNDER;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			$founder[$row['user_id']] = $row['user_email'];			$founder_names[$row['user_id']] = $row['username_clean'];		}		$db->sql_freeresult($result);	}	$banlist_ary = array();	switch ($mode)	{		case 'user':			$type = 'ban_userid';			// At the moment we do not support wildcard username banning			// Select the relevant user_ids.			$sql_usernames = array();			foreach ($ban_list as $username)			{				$username = trim($username);				if ($username != '')				{					$clean_name = utf8_clean_string($username);					if ($clean_name == $user->data['username_clean'])					{						trigger_error('CANNOT_BAN_YOURSELF', E_USER_WARNING);					}					if (in_array($clean_name, $founder_names))					{						trigger_error('CANNOT_BAN_FOUNDER', E_USER_WARNING);					}					$sql_usernames[] = $clean_name;				}			}			// Make sure we have been given someone to ban			if (!sizeof($sql_usernames))			{				trigger_error('NO_USER_SPECIFIED', E_USER_WARNING);			}			$sql = 'SELECT user_id				FROM ' . USERS_TABLE . '				WHERE ' . $db->sql_in_set('username_clean', $sql_usernames);			// Do not allow banning yourself, the guest account, or founders.			$non_bannable = array($user->data['user_id'], ANONYMOUS);			if (sizeof($founder))			{				$sql .= ' AND ' . $db->sql_in_set('user_id', array_merge(array_keys($founder), $non_bannable), true);			}			else			{				$sql .= ' AND ' . $db->sql_in_set('user_id', $non_bannable, true);			}			$result = $db->sql_query($sql);			if ($row = $db->sql_fetchrow($result))			{				do				{					$banlist_ary[] = (int) $row['user_id'];				}				while ($row = $db->sql_fetchrow($result));			}			else			{				$db->sql_freeresult($result);				trigger_error('NO_USERS', E_USER_WARNING);			}			$db->sql_freeresult($result);		break;		case 'ip':			$type = 'ban_ip';			foreach ($ban_list as $ban_item)			{				if (preg_match('#^([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})[ ]*\-[ ]*([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$#', trim($ban_item), $ip_range_explode))				{					// This is an IP range					// Don't ask about all this, just don't ask ... !					$ip_1_counter = $ip_range_explode[1];					$ip_1_end = $ip_range_explode[5];					while ($ip_1_counter <= $ip_1_end)					{						$ip_2_counter = ($ip_1_counter == $ip_range_explode[1]) ? $ip_range_explode[2] : 0;						$ip_2_end = ($ip_1_counter < $ip_1_end) ? 254 : $ip_range_explode[6];						if ($ip_2_counter == 0 && $ip_2_end == 254)						{							$ip_2_counter = 256;							$ip_2_fragment = 256;							$banlist_ary[] = "$ip_1_counter.*";						}						while ($ip_2_counter <= $ip_2_end)						{							$ip_3_counter = ($ip_2_counter == $ip_range_explode[2] && $ip_1_counter == $ip_range_explode[1]) ? $ip_range_explode[3] : 0;							$ip_3_end = ($ip_2_counter < $ip_2_end || $ip_1_counter < $ip_1_end) ? 254 : $ip_range_explode[7];							if ($ip_3_counter == 0 && $ip_3_end == 254)							{								$ip_3_counter = 256;								$ip_3_fragment = 256;								$banlist_ary[] = "$ip_1_counter.$ip_2_counter.*";							}							while ($ip_3_counter <= $ip_3_end)							{								$ip_4_counter = ($ip_3_counter == $ip_range_explode[3] && $ip_2_counter == $ip_range_explode[2] && $ip_1_counter == $ip_range_explode[1]) ? $ip_range_explode[4] : 0;								$ip_4_end = ($ip_3_counter < $ip_3_end || $ip_2_counter < $ip_2_end) ? 254 : $ip_range_explode[8];								if ($ip_4_counter == 0 && $ip_4_end == 254)								{									$ip_4_counter = 256;									$ip_4_fragment = 256;									$banlist_ary[] = "$ip_1_counter.$ip_2_counter.$ip_3_counter.*";								}								while ($ip_4_counter <= $ip_4_end)								{									$banlist_ary[] = "$ip_1_counter.$ip_2_counter.$ip_3_counter.$ip_4_counter";									$ip_4_counter++;								}								$ip_3_counter++;							}							$ip_2_counter++;						}						$ip_1_counter++;					}				}				else if (preg_match('#^([0-9]{1,3})\.([0-9\*]{1,3})\.([0-9\*]{1,3})\.([0-9\*]{1,3})$#', trim($ban_item)) || preg_match('#^[a-f0-9:]+\*?$#i', trim($ban_item)))				{					// Normal IP address					$banlist_ary[] = trim($ban_item);				}				else if (preg_match('#^\*$#', trim($ban_item)))				{					// Ban all IPs					$banlist_ary[] = '*';				}				else if (preg_match('#^([\w\-_]\.?){2,}$#is', trim($ban_item)))				{					// hostname					$ip_ary = gethostbynamel(trim($ban_item));					if (!empty($ip_ary))					{						foreach ($ip_ary as $ip)						{							if ($ip)							{								if (strlen($ip) > 40)								{									continue;								}								$banlist_ary[] = $ip;							}						}					}				}				if (empty($banlist_ary))				{					trigger_error('NO_IPS_DEFINED', E_USER_WARNING);				}			}		break;		case 'email':			$type = 'ban_email';			foreach ($ban_list as $ban_item)			{				$ban_item = trim($ban_item);				if (preg_match('#^.*?@*|(([a-z0-9\-]+\.)+([a-z]{2,3}))$#i', $ban_item))				{					if (strlen($ban_item) > 100)					{						continue;					}					if (!sizeof($founder) || !in_array($ban_item, $founder))					{						$banlist_ary[] = $ban_item;					}				}			}			if (sizeof($ban_list) == 0)			{				trigger_error('NO_EMAILS_DEFINED', E_USER_WARNING);			}		break;		default:			trigger_error('NO_MODE', E_USER_WARNING);		break;	}	// Fetch currently set bans of the specified type and exclude state. Prevent duplicate bans.	$sql_where = ($type == 'ban_userid') ? 'ban_userid <> 0' : "$type <> ''";	$sql = "SELECT $type		FROM " . BANLIST_TABLE . "		WHERE $sql_where			AND ban_exclude = " . (int) $ban_exclude;	$result = $db->sql_query($sql);	// Reset $sql_where, because we use it later...	$sql_where = '';	if ($row = $db->sql_fetchrow($result))	{		$banlist_ary_tmp = array();		do		{			switch ($mode)			{				case 'user':					$banlist_ary_tmp[] = $row['ban_userid'];				break;				case 'ip':					$banlist_ary_tmp[] = $row['ban_ip'];				break;				case 'email':					$banlist_ary_tmp[] = $row['ban_email'];				break;			}		}		while ($row = $db->sql_fetchrow($result));		$banlist_ary_tmp = array_intersect($banlist_ary, $banlist_ary_tmp);		if (sizeof($banlist_ary_tmp))		{			// One or more entities are already banned/excluded, delete the existing bans, so they can be re-inserted with the given new length			$sql = 'DELETE FROM ' . BANLIST_TABLE . '				WHERE ' . $db->sql_in_set($type, $banlist_ary_tmp) . '					AND ban_exclude = ' . (int) $ban_exclude;			$db->sql_query($sql);		}		unset($banlist_ary_tmp);	}	$db->sql_freeresult($result);	// We have some entities to ban	if (sizeof($banlist_ary))	{		$sql_ary = array();		foreach ($banlist_ary as $ban_entry)		{			$sql_ary[] = array(				$type				=> $ban_entry,				'ban_start'			=> (int) $current_time,				'ban_end'			=> (int) $ban_end,				'ban_exclude'		=> (int) $ban_exclude,				'ban_reason'		=> (string) $ban_reason,				'ban_give_reason'	=> (string) $ban_give_reason,			);		}		$db->sql_multi_insert(BANLIST_TABLE, $sql_ary);		// If we are banning we want to logout anyone matching the ban		if (!$ban_exclude)		{			switch ($mode)			{				case 'user':					$sql_where = 'WHERE ' . $db->sql_in_set('session_user_id', $banlist_ary);				break;				case 'ip':					$sql_where = 'WHERE ' . $db->sql_in_set('session_ip', $banlist_ary);				break;				case 'email':					$banlist_ary_sql = array();					foreach ($banlist_ary as $ban_entry)					{						$banlist_ary_sql[] = (string) str_replace('*', '%', $ban_entry);					}					$sql = 'SELECT user_id						FROM ' . USERS_TABLE . '						WHERE ' . $db->sql_in_set('user_email', $banlist_ary_sql);					$result = $db->sql_query($sql);					$sql_in = array();					if ($row = $db->sql_fetchrow($result))					{						do						{							$sql_in[] = $row['user_id'];						}						while ($row = $db->sql_fetchrow($result));						$sql_where = 'WHERE ' . $db->sql_in_set('session_user_id', $sql_in);					}					$db->sql_freeresult($result);				break;			}			if (isset($sql_where) && $sql_where)			{				$sql = 'DELETE FROM ' . SESSIONS_TABLE . "					$sql_where";				$db->sql_query($sql);				if ($mode == 'user')				{					$sql = 'DELETE FROM ' . SESSIONS_KEYS_TABLE . ' ' . ((in_array('*', $banlist_ary)) ? '' : 'WHERE ' . $db->sql_in_set('user_id', $banlist_ary));					$db->sql_query($sql);				}			}		}		// Update log		$log_entry = ($ban_exclude) ? 'LOG_BAN_EXCLUDE_' : 'LOG_BAN_';		// Add to moderator log, admin log and user notes		add_log('admin', $log_entry . strtoupper($mode), $ban_reason, $ban_list_log);		add_log('mod', 0, 0, $log_entry . strtoupper($mode), $ban_reason, $ban_list_log);		if ($mode == 'user')		{			foreach ($banlist_ary as $user_id)			{				add_log('user', $user_id, $log_entry . strtoupper($mode), $ban_reason, $ban_list_log);			}		}		$cache->destroy('sql', BANLIST_TABLE);		return true;	}	// There was nothing to ban/exclude. But destroying the cache because of the removal of stale bans.	$cache->destroy('sql', BANLIST_TABLE);	return false;}/*** Unban User*/function user_unban($mode, $ban){	global $db, $user, $auth, $cache;	// Delete stale bans	$sql = 'DELETE FROM ' . BANLIST_TABLE . '		WHERE ban_end < ' . time() . '			AND ban_end <> 0';	$db->sql_query($sql);	if (!is_array($ban))	{		$ban = array($ban);	}	$unban_sql = array_map('intval', $ban);	if (sizeof($unban_sql))	{		// Grab details of bans for logging information later		switch ($mode)		{			case 'user':				$sql = 'SELECT u.username AS unban_info, u.user_id					FROM ' . USERS_TABLE . ' u, ' . BANLIST_TABLE . ' b					WHERE ' . $db->sql_in_set('b.ban_id', $unban_sql) . '						AND u.user_id = b.ban_userid';			break;			case 'email':				$sql = 'SELECT ban_email AS unban_info					FROM ' . BANLIST_TABLE . '					WHERE ' . $db->sql_in_set('ban_id', $unban_sql);			break;			case 'ip':				$sql = 'SELECT ban_ip AS unban_info					FROM ' . BANLIST_TABLE . '					WHERE ' . $db->sql_in_set('ban_id', $unban_sql);			break;		}		$result = $db->sql_query($sql);		$l_unban_list = '';		$user_ids_ary = array();		while ($row = $db->sql_fetchrow($result))		{			$l_unban_list .= (($l_unban_list != '') ? ', ' : '') . $row['unban_info'];			if ($mode == 'user')			{				$user_ids_ary[] = $row['user_id'];			}		}		$db->sql_freeresult($result);		$sql = 'DELETE FROM ' . BANLIST_TABLE . '			WHERE ' . $db->sql_in_set('ban_id', $unban_sql);		$db->sql_query($sql);		// Add to moderator log, admin log and user notes		add_log('admin', 'LOG_UNBAN_' . strtoupper($mode), $l_unban_list);		add_log('mod', 0, 0, 'LOG_UNBAN_' . strtoupper($mode), $l_unban_list);		if ($mode == 'user')		{			foreach ($user_ids_ary as $user_id)			{				add_log('user', $user_id, 'LOG_UNBAN_' . strtoupper($mode), $l_unban_list);			}		}	}	$cache->destroy('sql', BANLIST_TABLE);	return false;}/*** Internet Protocol Address Whois* RFC3912: WHOIS Protocol Specification** @param string $ip		Ip address, either IPv4 or IPv6.** @return string		Empty string if not a valid ip address.*						Otherwise make_clickable()'ed whois result.*/function user_ipwhois($ip){	if (empty($ip))	{		return '';	}	if (preg_match(get_preg_expression('ipv4'), $ip))	{		// IPv4 address		$whois_host = 'whois.arin.net.';	}	else if (preg_match(get_preg_expression('ipv6'), $ip))	{		// IPv6 address		$whois_host = 'whois.sixxs.net.';	}	else	{		return '';	}	$ipwhois = '';	if (($fsk = @fsockopen($whois_host, 43)))	{		// CRLF as per RFC3912		fputs($fsk, "$ip\r\n");		while (!feof($fsk))		{			$ipwhois .= fgets($fsk, 1024);		}		@fclose($fsk);	}	$match = array();	// Test for referrals from $whois_host to other whois databases, roll on rwhois	if (preg_match('#ReferralServer: whois://(.+)#im', $ipwhois, $match))	{		if (strpos($match[1], ':') !== false)		{			$pos	= strrpos($match[1], ':');			$server	= substr($match[1], 0, $pos);			$port	= (int) substr($match[1], $pos + 1);			unset($pos);		}		else		{			$server	= $match[1];			$port	= 43;		}		$buffer = '';		if (($fsk = @fsockopen($server, $port)))		{			fputs($fsk, "$ip\r\n");			while (!feof($fsk))			{				$buffer .= fgets($fsk, 1024);			}			@fclose($fsk);		}		// Use the result from $whois_host if we don't get any result here		$ipwhois = (empty($buffer)) ? $ipwhois : $buffer;	}	$ipwhois = htmlspecialchars($ipwhois);	// Magic URL ;)	return trim(make_clickable($ipwhois, false, ''));}/*** Data validation ... used primarily but not exclusively by ucp modules** "Master" function for validating a range of data types*/function validate_data($data, $val_ary){	global $user;	$error = array();	foreach ($val_ary as $var => $val_seq)	{		if (!is_array($val_seq[0]))		{			$val_seq = array($val_seq);		}		foreach ($val_seq as $validate)		{			$function = array_shift($validate);			array_unshift($validate, $data[$var]);			if ($result = call_user_func_array('validate_' . $function, $validate))			{				// Since errors are checked later for their language file existence, we need to make sure custom errors are not adjusted.				$error[] = (empty($user->lang[$result . '_' . strtoupper($var)])) ? $result : $result . '_' . strtoupper($var);			}		}	}	return $error;}/*** Validate String** @return	boolean|string	Either false if validation succeeded or a string which will be used as the error message (with the variable name appended)*/function validate_string($string, $optional = false, $min = 0, $max = 0){	if (empty($string) && $optional)	{		return false;	}	if ($min && utf8_strlen(htmlspecialchars_decode($string)) < $min)	{		return 'TOO_SHORT';	}	else if ($max && utf8_strlen(htmlspecialchars_decode($string)) > $max)	{		return 'TOO_LONG';	}	return false;}/*** Validate Number** @return	boolean|string	Either false if validation succeeded or a string which will be used as the error message (with the variable name appended)*/function validate_num($num, $optional = false, $min = 0, $max = 1E99){	if (empty($num) && $optional)	{		return false;	}	if ($num < $min)	{		return 'TOO_SMALL';	}	else if ($num > $max)	{		return 'TOO_LARGE';	}	return false;}/*** Validate Date* @param String $string a date in the dd-mm-yyyy format* @return	boolean*/function validate_date($date_string, $optional = false){	$date = explode('-', $date_string);	if ((empty($date) || sizeof($date) != 3) && $optional)	{		return false;	}	else if ($optional)	{		for ($field = 0; $field <= 1; $field++)		{			$date[$field] = (int) $date[$field];			if (empty($date[$field]))			{				$date[$field] = 1;			}		}		$date[2] = (int) $date[2];		// assume an arbitrary leap year		if (empty($date[2]))		{			$date[2] = 1980;		}	}	if (sizeof($date) != 3 || !checkdate($date[1], $date[0], $date[2]))	{		return 'INVALID';	}	return false;}/*** Validate Match** @return	boolean|string	Either false if validation succeeded or a string which will be used as the error message (with the variable name appended)*/function validate_match($string, $optional = false, $match = ''){	if (empty($string) && $optional)	{		return false;	}	if (empty($match))	{		return false;	}	if (!preg_match($match, $string))	{		return 'WRONG_DATA';	}	return false;}/*** Validate Language Pack ISO Name** Tests whether a language name is valid and installed** @param string $lang_iso	The language string to test** @return bool|string		Either false if validation succeeded or*							a string which will be used as the error message*							(with the variable name appended)*/function validate_language_iso_name($lang_iso){	global $db;	$sql = 'SELECT lang_id		FROM ' . LANG_TABLE . "		WHERE lang_iso = '" . $db->sql_escape($lang_iso) . "'";	$result = $db->sql_query($sql);	$lang_id = (int) $db->sql_fetchfield('lang_id');	$db->sql_freeresult($result);	return ($lang_id) ? false : 'WRONG_DATA';}/*** Check to see if the username has been taken, or if it is disallowed.* Also checks if it includes the " character, which we don't allow in usernames.* Used for registering, changing names, and posting anonymously with a username** @param string $username The username to check* @param string $allowed_username An allowed username, default being $user->data['username']** @return	mixed	Either false if validation succeeded or a string which will be used as the error message (with the variable name appended)*/function validate_username($username, $allowed_username = false){	global $config, $db, $user, $cache;	$clean_username = utf8_clean_string($username);	$allowed_username = ($allowed_username === false) ? $user->data['username_clean'] : utf8_clean_string($allowed_username);	if ($allowed_username == $clean_username)	{		return false;	}	// ... fast checks first.	if (strpos($username, '&quot;') !== false || strpos($username, '"') !== false || empty($clean_username))	{		return 'INVALID_CHARS';	}	$mbstring = $pcre = false;	// generic UTF-8 character types supported?	if ((version_compare(PHP_VERSION, '5.1.0', '>=') || (version_compare(PHP_VERSION, '5.0.0-dev', '<=') && version_compare(PHP_VERSION, '4.4.0', '>='))) && @preg_match('/\p{L}/u', 'a') !== false)	{		$pcre = true;	}	else if (function_exists('mb_ereg_match'))	{		mb_regex_encoding('UTF-8');		$mbstring = true;	}	switch ($config['allow_name_chars'])	{		case 'USERNAME_CHARS_ANY':			$pcre = true;			$regex = '.+';		break;		case 'USERNAME_ALPHA_ONLY':			$pcre = true;			$regex = '[A-Za-z0-9]+';		break;		case 'USERNAME_ALPHA_SPACERS':			$pcre = true;			$regex = '[A-Za-z0-9-[\]_+ ]+';		break;		case 'USERNAME_LETTER_NUM':			if ($pcre)			{				$regex = '[\p{Lu}\p{Ll}\p{N}]+';			}			else if ($mbstring)			{				$regex = '[[:upper:][:lower:][:digit:]]+';			}			else			{				$pcre = true;				$regex = '[a-zA-Z0-9]+';			}		break;		case 'USERNAME_LETTER_NUM_SPACERS':			if ($pcre)			{				$regex = '[-\]_+ [\p{Lu}\p{Ll}\p{N}]+';			}			else if ($mbstring)			{				$regex = '[-\]_+ \[[:upper:][:lower:][:digit:]]+';			}			else			{				$pcre = true;				$regex = '[-\]_+ [a-zA-Z0-9]+';			}		break;		case 'USERNAME_ASCII':		default:			$pcre = true;			$regex = '[\x01-\x7F]+';		break;	}	if ($pcre)	{		if (!preg_match('#^' . $regex . '$#u', $username))		{			return 'INVALID_CHARS';		}	}	else if ($mbstring)	{		mb_ereg_search_init($username, '^' . $regex . '$');		if (!mb_ereg_search())		{			return 'INVALID_CHARS';		}	}	$sql = 'SELECT username		FROM ' . USERS_TABLE . "		WHERE username_clean = '" . $db->sql_escape($clean_username) . "'";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		return 'USERNAME_TAKEN';	}	$sql = 'SELECT group_name		FROM ' . GROUPS_TABLE . "		WHERE LOWER(group_name) = '" . $db->sql_escape(utf8_strtolower($username)) . "'";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		return 'USERNAME_TAKEN';	}	$bad_usernames = $cache->obtain_disallowed_usernames();	foreach ($bad_usernames as $bad_username)	{		if (preg_match('#^' . $bad_username . '$#', $clean_username))		{			return 'USERNAME_DISALLOWED';		}	}	return false;}/*** Check to see if the password meets the complexity settings** @return	boolean|string	Either false if validation succeeded or a string which will be used as the error message (with the variable name appended)*/function validate_password($password){	global $config, $db, $user;	if ($password === '' || $config['pass_complex'] === 'PASS_TYPE_ANY')	{		// Password empty or no password complexity required.		return false;	}	$pcre = $mbstring = false;	// generic UTF-8 character types supported?	if ((version_compare(PHP_VERSION, '5.1.0', '>=') || (version_compare(PHP_VERSION, '5.0.0-dev', '<=') && version_compare(PHP_VERSION, '4.4.0', '>='))) && @preg_match('/\p{L}/u', 'a') !== false)	{		$upp = '\p{Lu}';		$low = '\p{Ll}';		$num = '\p{N}';		$sym = '[^\p{Lu}\p{Ll}\p{N}]';		$pcre = true;	}	else if (function_exists('mb_ereg_match'))	{		mb_regex_encoding('UTF-8');		$upp = '[[:upper:]]';		$low = '[[:lower:]]';		$num = '[[:digit:]]';		$sym = '[^[:upper:][:lower:][:digit:]]';		$mbstring = true;	}	else	{		$upp = '[A-Z]';		$low = '[a-z]';		$num = '[0-9]';		$sym = '[^A-Za-z0-9]';		$pcre = true;	}	$chars = array();	switch ($config['pass_complex'])	{		// No break statements below ...		// We require strong passwords in case pass_complex is not set or is invalid		default:		// Require mixed case letters, numbers and symbols		case 'PASS_TYPE_SYMBOL':			$chars[] = $sym;		// Require mixed case letters and numbers		case 'PASS_TYPE_ALPHA':			$chars[] = $num;		// Require mixed case letters		case 'PASS_TYPE_CASE':			$chars[] = $low;			$chars[] = $upp;	}	if ($pcre)	{		foreach ($chars as $char)		{			if (!preg_match('#' . $char . '#u', $password))			{				return 'INVALID_CHARS';			}		}	}	else if ($mbstring)	{		foreach ($chars as $char)		{			if (mb_ereg($char, $password) === false)			{				return 'INVALID_CHARS';			}		}	}	return false;}/*** Check to see if email address is banned or already present in the DB** @param string $email The email to check* @param string $allowed_email An allowed email, default being $user->data['user_email']** @return mixed Either false if validation succeeded or a string which will be used as the error message (with the variable name appended)*/function validate_email($email, $allowed_email = false){	global $config, $db, $user;	$email = strtolower($email);	$allowed_email = ($allowed_email === false) ? strtolower($user->data['user_email']) : strtolower($allowed_email);	if ($allowed_email == $email)	{		return false;	}	if (!preg_match('/^' . get_preg_expression('email') . '$/i', $email))	{		return 'EMAIL_INVALID';	}	// Check MX record.	// The idea for this is from reading the UseBB blog/announcement. :)	if ($config['email_check_mx'])	{		list(, $domain) = explode('@', $email);		if (phpbb_checkdnsrr($domain, 'A') === false && phpbb_checkdnsrr($domain, 'MX') === false)		{			return 'DOMAIN_NO_MX_RECORD';		}	}	if (($ban_reason = $user->check_ban(false, false, $email, true)) !== false)	{		return ($ban_reason === true) ? 'EMAIL_BANNED' : $ban_reason;	}	if (!$config['allow_emailreuse'])	{		$sql = 'SELECT user_email_hash			FROM ' . USERS_TABLE . "			WHERE user_email_hash = " . $db->sql_escape(phpbb_email_hash($email));		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if ($row)		{			return 'EMAIL_TAKEN';		}	}	return false;}/*** Validate jabber address* Taken from the jabber class within flyspray (see author notes)** @author flyspray.org*/function validate_jabber($jid){	if (!$jid)	{		return false;	}	$seperator_pos = strpos($jid, '@');	if ($seperator_pos === false)	{		return 'WRONG_DATA';	}	$username = substr($jid, 0, $seperator_pos);	$realm = substr($jid, $seperator_pos + 1);	if (strlen($username) == 0 || strlen($realm) < 3)	{		return 'WRONG_DATA';	}	$arr = explode('.', $realm);	if (sizeof($arr) == 0)	{		return 'WRONG_DATA';	}	foreach ($arr as $part)	{		if (substr($part, 0, 1) == '-' || substr($part, -1, 1) == '-')		{			return 'WRONG_DATA';		}		if (!preg_match("@^[a-zA-Z0-9-.]+$@", $part))		{			return 'WRONG_DATA';		}	}	$boundary = array(array(0, 127), array(192, 223), array(224, 239), array(240, 247), array(248, 251), array(252, 253));	// Prohibited Characters RFC3454 + RFC3920	$prohibited = array(		// Table C.1.1		array(0x0020, 0x0020),		// SPACE		// Table C.1.2		array(0x00A0, 0x00A0),		// NO-BREAK SPACE		array(0x1680, 0x1680),		// OGHAM SPACE MARK		array(0x2000, 0x2001),		// EN QUAD		array(0x2001, 0x2001),		// EM QUAD		array(0x2002, 0x2002),		// EN SPACE		array(0x2003, 0x2003),		// EM SPACE		array(0x2004, 0x2004),		// THREE-PER-EM SPACE		array(0x2005, 0x2005),		// FOUR-PER-EM SPACE		array(0x2006, 0x2006),		// SIX-PER-EM SPACE		array(0x2007, 0x2007),		// FIGURE SPACE		array(0x2008, 0x2008),		// PUNCTUATION SPACE		array(0x2009, 0x2009),		// THIN SPACE		array(0x200A, 0x200A),		// HAIR SPACE		array(0x200B, 0x200B),		// ZERO WIDTH SPACE		array(0x202F, 0x202F),		// NARROW NO-BREAK SPACE		array(0x205F, 0x205F),		// MEDIUM MATHEMATICAL SPACE		array(0x3000, 0x3000),		// IDEOGRAPHIC SPACE		// Table C.2.1		array(0x0000, 0x001F),		// [CONTROL CHARACTERS]		array(0x007F, 0x007F),		// DELETE		// Table C.2.2		array(0x0080, 0x009F),		// [CONTROL CHARACTERS]		array(0x06DD, 0x06DD),		// ARABIC END OF AYAH		array(0x070F, 0x070F),		// SYRIAC ABBREVIATION MARK		array(0x180E, 0x180E),		// MONGOLIAN VOWEL SEPARATOR		array(0x200C, 0x200C), 		// ZERO WIDTH NON-JOINER		array(0x200D, 0x200D),		// ZERO WIDTH JOINER		array(0x2028, 0x2028),		// LINE SEPARATOR		array(0x2029, 0x2029),		// PARAGRAPH SEPARATOR		array(0x2060, 0x2060),		// WORD JOINER		array(0x2061, 0x2061),		// FUNCTION APPLICATION		array(0x2062, 0x2062),		// INVISIBLE TIMES		array(0x2063, 0x2063),		// INVISIBLE SEPARATOR		array(0x206A, 0x206F),		// [CONTROL CHARACTERS]		array(0xFEFF, 0xFEFF),		// ZERO WIDTH NO-BREAK SPACE		array(0xFFF9, 0xFFFC),		// [CONTROL CHARACTERS]		array(0x1D173, 0x1D17A),	// [MUSICAL CONTROL CHARACTERS]		// Table C.3		array(0xE000, 0xF8FF),		// [PRIVATE USE, PLANE 0]		array(0xF0000, 0xFFFFD),	// [PRIVATE USE, PLANE 15]		array(0x100000, 0x10FFFD),	// [PRIVATE USE, PLANE 16]		// Table C.4		array(0xFDD0, 0xFDEF),		// [NONCHARACTER CODE POINTS]		array(0xFFFE, 0xFFFF),		// [NONCHARACTER CODE POINTS]		array(0x1FFFE, 0x1FFFF),	// [NONCHARACTER CODE POINTS]		array(0x2FFFE, 0x2FFFF),	// [NONCHARACTER CODE POINTS]		array(0x3FFFE, 0x3FFFF),	// [NONCHARACTER CODE POINTS]		array(0x4FFFE, 0x4FFFF),	// [NONCHARACTER CODE POINTS]		array(0x5FFFE, 0x5FFFF),	// [NONCHARACTER CODE POINTS]		array(0x6FFFE, 0x6FFFF),	// [NONCHARACTER CODE POINTS]		array(0x7FFFE, 0x7FFFF),	// [NONCHARACTER CODE POINTS]		array(0x8FFFE, 0x8FFFF),	// [NONCHARACTER CODE POINTS]		array(0x9FFFE, 0x9FFFF),	// [NONCHARACTER CODE POINTS]		array(0xAFFFE, 0xAFFFF),	// [NONCHARACTER CODE POINTS]		array(0xBFFFE, 0xBFFFF),	// [NONCHARACTER CODE POINTS]		array(0xCFFFE, 0xCFFFF),	// [NONCHARACTER CODE POINTS]		array(0xDFFFE, 0xDFFFF),	// [NONCHARACTER CODE POINTS]		array(0xEFFFE, 0xEFFFF),	// [NONCHARACTER CODE POINTS]		array(0xFFFFE, 0xFFFFF),	// [NONCHARACTER CODE POINTS]		array(0x10FFFE, 0x10FFFF),	// [NONCHARACTER CODE POINTS]		// Table C.5		array(0xD800, 0xDFFF),		// [SURROGATE CODES]		// Table C.6		array(0xFFF9, 0xFFF9),		// INTERLINEAR ANNOTATION ANCHOR		array(0xFFFA, 0xFFFA),		// INTERLINEAR ANNOTATION SEPARATOR		array(0xFFFB, 0xFFFB),		// INTERLINEAR ANNOTATION TERMINATOR		array(0xFFFC, 0xFFFC),		// OBJECT REPLACEMENT CHARACTER		array(0xFFFD, 0xFFFD),		// REPLACEMENT CHARACTER		// Table C.7		array(0x2FF0, 0x2FFB),		// [IDEOGRAPHIC DESCRIPTION CHARACTERS]		// Table C.8		array(0x0340, 0x0340),		// COMBINING GRAVE TONE MARK		array(0x0341, 0x0341),		// COMBINING ACUTE TONE MARK		array(0x200E, 0x200E),		// LEFT-TO-RIGHT MARK		array(0x200F, 0x200F),		// RIGHT-TO-LEFT MARK		array(0x202A, 0x202A),		// LEFT-TO-RIGHT EMBEDDING		array(0x202B, 0x202B),		// RIGHT-TO-LEFT EMBEDDING		array(0x202C, 0x202C),		// POP DIRECTIONAL FORMATTING		array(0x202D, 0x202D),		// LEFT-TO-RIGHT OVERRIDE		array(0x202E, 0x202E),		// RIGHT-TO-LEFT OVERRIDE		array(0x206A, 0x206A),		// INHIBIT SYMMETRIC SWAPPING		array(0x206B, 0x206B),		// ACTIVATE SYMMETRIC SWAPPING		array(0x206C, 0x206C),		// INHIBIT ARABIC FORM SHAPING		array(0x206D, 0x206D),		// ACTIVATE ARABIC FORM SHAPING		array(0x206E, 0x206E),		// NATIONAL DIGIT SHAPES		array(0x206F, 0x206F),		// NOMINAL DIGIT SHAPES		// Table C.9		array(0xE0001, 0xE0001),	// LANGUAGE TAG		array(0xE0020, 0xE007F),	// [TAGGING CHARACTERS]		// RFC3920		array(0x22, 0x22),			// "		array(0x26, 0x26),			// &		array(0x27, 0x27),			// '		array(0x2F, 0x2F),			// /		array(0x3A, 0x3A),			// :		array(0x3C, 0x3C),			// <		array(0x3E, 0x3E),			// >		array(0x40, 0x40)			// @	);	$pos = 0;	$result = true;	while ($pos < strlen($username))	{		$len = $uni = 0;		for ($i = 0; $i <= 5; $i++)		{			if (ord($username[$pos]) >= $boundary[$i][0] && ord($username[$pos]) <= $boundary[$i][1])			{				$len = $i + 1;				$uni = (ord($username[$pos]) - $boundary[$i][0]) * pow(2, $i * 6);				for ($k = 1; $k < $len; $k++)				{					$uni += (ord($username[$pos + $k]) - 128) * pow(2, ($i - $k) * 6);				}				break;			}		}		if ($len == 0)		{			return 'WRONG_DATA';		}		foreach ($prohibited as $pval)		{			if ($uni >= $pval[0] && $uni <= $pval[1])			{				$result = false;				break 2;			}		}		$pos = $pos + $len;	}	if (!$result)	{		return 'WRONG_DATA';	}	return false;}/*** Remove avatar*/function avatar_delete($mode, $row, $clean_db = false){	global $phpbb_root_path, $config, $db, $user;	// Check if the users avatar is actually *not* a group avatar	if ($mode == 'user')	{		if (strpos($row['user_avatar'], 'g') === 0 || (((int)$row['user_avatar'] !== 0) && ((int)$row['user_avatar'] !== (int)$row['user_id'])))		{			return false;		}	}	if ($clean_db)	{		avatar_remove_db($row[$mode . '_avatar']);	}	$filename = get_avatar_filename($row[$mode . '_avatar']);	if (file_exists($phpbb_root_path . $config['avatar_path'] . '/' . $filename))	{		@unlink($phpbb_root_path . $config['avatar_path'] . '/' . $filename);		return true;	}	return false;}/*** Remote avatar linkage*/function avatar_remote($data, &$error){	global $config, $db, $user, $phpbb_root_path, $phpEx;	if (!preg_match('#^(http|https|ftp)://#i', $data['remotelink']))	{		$data['remotelink'] = 'http://' . $data['remotelink'];	}	if (!preg_match('#^(http|https|ftp)://(?:(.*?\.)*?[a-z0-9\-]+?\.[a-z]{2,4}|(?:\d{1,3}\.){3,5}\d{1,3}):?([0-9]*?).*?\.(gif|jpg|jpeg|png)$#i', $data['remotelink']))	{		$error[] = $user->lang['AVATAR_URL_INVALID'];		return false;	}	// Make sure getimagesize works...	if (($image_data = @getimagesize($data['remotelink'])) === false && (empty($data['width']) || empty($data['height'])))	{		$error[] = $user->lang['UNABLE_GET_IMAGE_SIZE'];		return false;	}	if (!empty($image_data) && ($image_data[0] < 2 || $image_data[1] < 2))	{		$error[] = $user->lang['AVATAR_NO_SIZE'];		return false;	}	$width = ($data['width'] && $data['height']) ? $data['width'] : $image_data[0];	$height = ($data['width'] && $data['height']) ? $data['height'] : $image_data[1];	if ($width < 2 || $height < 2)	{		$error[] = $user->lang['AVATAR_NO_SIZE'];		return false;	}	// Check image type	include_once($phpbb_root_path . 'includes/functions_upload.' . $phpEx);	$types = fileupload::image_types();	$extension = strtolower(filespec::get_extension($data['remotelink']));	if (!empty($image_data) && (!isset($types[$image_data[2]]) || !in_array($extension, $types[$image_data[2]])))	{		if (!isset($types[$image_data[2]]))		{			$error[] = $user->lang['UNABLE_GET_IMAGE_SIZE'];		}		else		{			$error[] = sprintf($user->lang['IMAGE_FILETYPE_MISMATCH'], $types[$image_data[2]][0], $extension);		}		return false;	}	if ($config['avatar_max_width'] || $config['avatar_max_height'])	{		if ($width > $config['avatar_max_width'] || $height > $config['avatar_max_height'])		{			$error[] = sprintf($user->lang['AVATAR_WRONG_SIZE'], $config['avatar_min_width'], $config['avatar_min_height'], $config['avatar_max_width'], $config['avatar_max_height'], $width, $height);			return false;		}	}	if ($config['avatar_min_width'] || $config['avatar_min_height'])	{		if ($width < $config['avatar_min_width'] || $height < $config['avatar_min_height'])		{			$error[] = sprintf($user->lang['AVATAR_WRONG_SIZE'], $config['avatar_min_width'], $config['avatar_min_height'], $config['avatar_max_width'], $config['avatar_max_height'], $width, $height);			return false;		}	}	return array(AVATAR_REMOTE, $data['remotelink'], $width, $height);}/*** Avatar upload using the upload class*/function avatar_upload($data, &$error){	global $phpbb_root_path, $config, $db, $user, $phpEx;	// Init upload class	include_once($phpbb_root_path . 'includes/functions_upload.' . $phpEx);	$upload = new fileupload('AVATAR_', array('jpg', 'jpeg', 'gif', 'png'), $config['avatar_filesize'], $config['avatar_min_width'], $config['avatar_min_height'], $config['avatar_max_width'], $config['avatar_max_height'], (isset($config['mime_triggers']) ? explode('|', $config['mime_triggers']) : false));	if (!empty($_FILES['uploadfile']['name']))	{		$file = $upload->form_upload('uploadfile');	}	else	{		$file = $upload->remote_upload($data['uploadurl']);	}	$prefix = $config['avatar_salt'] . '_';	$file->clean_filename('avatar', $prefix, $data['user_id']);	$destination = $config['avatar_path'];	// Adjust destination path (no trailing slash)	if (substr($destination, -1, 1) == '/' || substr($destination, -1, 1) == '\\')	{		$destination = substr($destination, 0, -1);	}	$destination = str_replace(array('../', '..\\', './', '.\\'), '', $destination);	if ($destination && ($destination[0] == '/' || $destination[0] == "\\"))	{		$destination = '';	}	// Move file and overwrite any existing image	$file->move_file($destination, true);	if (sizeof($file->error))	{		$file->remove();		$error = array_merge($error, $file->error);	}	return array(AVATAR_UPLOAD, $data['user_id'] . '_' . time() . '.' . $file->get('extension'), $file->get('width'), $file->get('height'));}/*** Generates avatar filename from the database entry*/function get_avatar_filename($avatar_entry){	global $config;	if ($avatar_entry[0] === 'g')	{		$avatar_group = true;		$avatar_entry = substr($avatar_entry, 1);	}	else	{		$avatar_group = false;	}	$ext 			= substr(strrchr($avatar_entry, '.'), 1);	$avatar_entry	= intval($avatar_entry);	return $config['avatar_salt'] . '_' . (($avatar_group) ? 'g' : '') . $avatar_entry . '.' . $ext;}/*** Avatar Gallery*/function avatar_gallery($category, $avatar_select, $items_per_column, $block_var = 'avatar_row'){	global $user, $cache, $template;	global $config, $phpbb_root_path;	$avatar_list = array();	$path = $phpbb_root_path . $config['avatar_gallery_path'];	if (!file_exists($path) || !is_dir($path))	{		$avatar_list = array($user->lang['NO_AVATAR_CATEGORY'] => array());	}	else	{		// Collect images		$dp = @opendir($path);		if (!$dp)		{			return array($user->lang['NO_AVATAR_CATEGORY'] => array());		}		while (($file = readdir($dp)) !== false)		{			if ($file[0] != '.' && preg_match('#^[^&"\'<>]+$#i', $file) && is_dir("$path/$file"))			{				$avatar_row_count = $avatar_col_count = 0;				if ($dp2 = @opendir("$path/$file"))				{					while (($sub_file = readdir($dp2)) !== false)					{						if (preg_match('#^[^&\'"<>]+\.(?:gif|png|jpe?g)$#i', $sub_file))						{							$avatar_list[$file][$avatar_row_count][$avatar_col_count] = array(								'file'		=> rawurlencode($file) . '/' . rawurlencode($sub_file),								'filename'	=> rawurlencode($sub_file),								'name'		=> ucfirst(str_replace('_', ' ', preg_replace('#^(.*)\..*$#', '\1', $sub_file))),							);							$avatar_col_count++;							if ($avatar_col_count == $items_per_column)							{								$avatar_row_count++;								$avatar_col_count = 0;							}						}					}					closedir($dp2);				}			}		}		closedir($dp);	}	if (!sizeof($avatar_list))	{		$avatar_list = array($user->lang['NO_AVATAR_CATEGORY'] => array());	}	@ksort($avatar_list);	$category = (!$category) ? key($avatar_list) : $category;	$avatar_categories = array_keys($avatar_list);	$s_category_options = '';	foreach ($avatar_categories as $cat)	{		$s_category_options .= '<option value="' . $cat . '"' . (($cat == $category) ? ' selected="selected"' : '') . '>' . $cat . '</option>';	}	$template->assign_vars(array(		'S_AVATARS_ENABLED'		=> true,		'S_IN_AVATAR_GALLERY'	=> true,		'S_CAT_OPTIONS'			=> $s_category_options)	);	$avatar_list = (isset($avatar_list[$category])) ? $avatar_list[$category] : array();	foreach ($avatar_list as $avatar_row_ary)	{		$template->assign_block_vars($block_var, array());		foreach ($avatar_row_ary as $avatar_col_ary)		{			$template->assign_block_vars($block_var . '.avatar_column', array(				'AVATAR_IMAGE'	=> $phpbb_root_path . $config['avatar_gallery_path'] . '/' . $avatar_col_ary['file'],				'AVATAR_NAME'	=> $avatar_col_ary['name'],				'AVATAR_FILE'	=> $avatar_col_ary['filename'])			);			$template->assign_block_vars($block_var . '.avatar_option_column', array(				'AVATAR_IMAGE'	=> $phpbb_root_path . $config['avatar_gallery_path'] . '/' . $avatar_col_ary['file'],				'S_OPTIONS_AVATAR'	=> $avatar_col_ary['filename'])			);		}	}	return $avatar_list;}/*** Tries to (re-)establish avatar dimensions*/function avatar_get_dimensions($avatar, $avatar_type, &$error, $current_x = 0, $current_y = 0){	global $config, $phpbb_root_path, $user;	switch ($avatar_type)	{		case AVATAR_REMOTE :			break;		case AVATAR_UPLOAD :			$avatar = $phpbb_root_path . $config['avatar_path'] . '/' . get_avatar_filename($avatar);			break;		case AVATAR_GALLERY :			$avatar = $phpbb_root_path . $config['avatar_gallery_path'] . '/' . $avatar ;			break;	}	// Make sure getimagesize works...	if (($image_data = @getimagesize($avatar)) === false)	{		$error[] = $user->lang['UNABLE_GET_IMAGE_SIZE'];		return false;	}	if ($image_data[0] < 2 || $image_data[1] < 2)	{		$error[] = $user->lang['AVATAR_NO_SIZE'];		return false;	}	// try to maintain ratio	if (!(empty($current_x) && empty($current_y)))	{		if ($current_x != 0)		{			$image_data[1] = (int) floor(($current_x / $image_data[0]) * $image_data[1]);			$image_data[1] = min($config['avatar_max_height'], $image_data[1]);			$image_data[1] = max($config['avatar_min_height'], $image_data[1]);		}		if ($current_y != 0)		{			$image_data[0] = (int) floor(($current_y / $image_data[1]) * $image_data[0]);			$image_data[0] = min($config['avatar_max_width'], $image_data[1]);			$image_data[0] = max($config['avatar_min_width'], $image_data[1]);		}	}	return array($image_data[0], $image_data[1]);}/*** Uploading/Changing user avatar*/function avatar_process_user(&$error, $custom_userdata = false, $can_upload = null){	global $config, $phpbb_root_path, $auth, $user, $db;	$data = array(		'uploadurl'		=> request_var('uploadurl', ''),		'remotelink'	=> request_var('remotelink', ''),		'width'			=> request_var('width', 0),		'height'		=> request_var('height', 0),	);	$error = validate_data($data, array(		'uploadurl'		=> array('string', true, 5, 255),		'remotelink'	=> array('string', true, 5, 255),		'width'			=> array('string', true, 1, 3),		'height'		=> array('string', true, 1, 3),	));	if (sizeof($error))	{		return false;	}	$sql_ary = array();	if ($custom_userdata === false)	{		$userdata = &$user->data;	}	else	{		$userdata = &$custom_userdata;	}	$data['user_id'] = $userdata['user_id'];	$change_avatar = ($custom_userdata === false) ? $auth->acl_get('u_chgavatar') : true;	$avatar_select = basename(request_var('avatar_select', ''));	// Can we upload?	if (is_null($can_upload))	{		$can_upload = ($config['allow_avatar_upload'] && file_exists($phpbb_root_path . $config['avatar_path']) && phpbb_is_writable($phpbb_root_path . $config['avatar_path']) && $change_avatar && (@ini_get('file_uploads') || strtolower(@ini_get('file_uploads')) == 'on')) ? true : false;	}	if ((!empty($_FILES['uploadfile']['name']) || $data['uploadurl']) && $can_upload)	{		list($sql_ary['user_avatar_type'], $sql_ary['user_avatar'], $sql_ary['user_avatar_width'], $sql_ary['user_avatar_height']) = avatar_upload($data, $error);	}	else if ($data['remotelink'] && $change_avatar && $config['allow_avatar_remote'])	{		list($sql_ary['user_avatar_type'], $sql_ary['user_avatar'], $sql_ary['user_avatar_width'], $sql_ary['user_avatar_height']) = avatar_remote($data, $error);	}	else if ($avatar_select && $change_avatar && $config['allow_avatar_local'])	{		$category = basename(request_var('category', ''));		$sql_ary['user_avatar_type'] = AVATAR_GALLERY;		$sql_ary['user_avatar'] = $avatar_select;		// check avatar gallery		if (!is_dir($phpbb_root_path . $config['avatar_gallery_path'] . '/' . $category))		{			$sql_ary['user_avatar'] = '';			$sql_ary['user_avatar_type'] = $sql_ary['user_avatar_width'] = $sql_ary['user_avatar_height'] = 0;		}		else		{			list($sql_ary['user_avatar_width'], $sql_ary['user_avatar_height']) = getimagesize($phpbb_root_path . $config['avatar_gallery_path'] . '/' . $category . '/' . urldecode($sql_ary['user_avatar']));			$sql_ary['user_avatar'] = $category . '/' . $sql_ary['user_avatar'];		}	}	else if (isset($_POST['delete']) && $change_avatar)	{		$sql_ary['user_avatar'] = '';		$sql_ary['user_avatar_type'] = $sql_ary['user_avatar_width'] = $sql_ary['user_avatar_height'] = 0;	}	else if (!empty($userdata['user_avatar']))	{		// Only update the dimensions		if (empty($data['width']) || empty($data['height']))		{			if ($dims = avatar_get_dimensions($userdata['user_avatar'], $userdata['user_avatar_type'], $error, $data['width'], $data['height']))			{				list($guessed_x, $guessed_y) = $dims;				if (empty($data['width']))				{					$data['width'] = $guessed_x;				}				if (empty($data['height']))				{					$data['height'] = $guessed_y;				}			}		}		if (($config['avatar_max_width'] || $config['avatar_max_height']) &&			(($data['width'] != $userdata['user_avatar_width']) || $data['height'] != $userdata['user_avatar_height']))		{			if ($data['width'] > $config['avatar_max_width'] || $data['height'] > $config['avatar_max_height'])			{				$error[] = sprintf($user->lang['AVATAR_WRONG_SIZE'], $config['avatar_min_width'], $config['avatar_min_height'], $config['avatar_max_width'], $config['avatar_max_height'], $data['width'], $data['height']);			}		}		if (!sizeof($error))		{			if ($config['avatar_min_width'] || $config['avatar_min_height'])			{				if ($data['width'] < $config['avatar_min_width'] || $data['height'] < $config['avatar_min_height'])				{					$error[] = sprintf($user->lang['AVATAR_WRONG_SIZE'], $config['avatar_min_width'], $config['avatar_min_height'], $config['avatar_max_width'], $config['avatar_max_height'], $data['width'], $data['height']);				}			}		}		if (!sizeof($error))		{			$sql_ary['user_avatar_width'] = $data['width'];			$sql_ary['user_avatar_height'] = $data['height'];		}	}	if (!sizeof($error))	{		// Do we actually have any data to update?		if (sizeof($sql_ary))		{			$ext_new = $ext_old = '';			if (isset($sql_ary['user_avatar']))			{				$userdata = ($custom_userdata === false) ? $user->data : $custom_userdata;				$ext_new = (empty($sql_ary['user_avatar'])) ? '' : substr(strrchr($sql_ary['user_avatar'], '.'), 1);				$ext_old = (empty($userdata['user_avatar'])) ? '' : substr(strrchr($userdata['user_avatar'], '.'), 1);				if ($userdata['user_avatar_type'] == AVATAR_UPLOAD)				{					// Delete old avatar if present					if ((!empty($userdata['user_avatar']) && empty($sql_ary['user_avatar']))					   || ( !empty($userdata['user_avatar']) && !empty($sql_ary['user_avatar']) && $ext_new !== $ext_old))					{						avatar_delete('user', $userdata);					}				}			}			$sql = 'UPDATE ' . USERS_TABLE . '				SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '				WHERE user_id = ' . (($custom_userdata === false) ? $user->data['user_id'] : $custom_userdata['user_id']);			$db->sql_query($sql);		}	}	return (sizeof($error)) ? false : true;}//// Usergroup functions///*** Add or edit a group. If we're editing a group we only update user* parameters such as rank, etc. if they are changed*/function group_create(&$group_id, $type, $name, $desc, $group_attributes, $allow_desc_bbcode = false, $allow_desc_urls = false, $allow_desc_smilies = false){	global $phpbb_root_path, $config, $db, $user, $file_upload;	$error = array();	// Attributes which also affect the users table	$user_attribute_ary = array('group_colour', 'group_rank', 'group_avatar', 'group_avatar_type', 'group_avatar_width', 'group_avatar_height');	// Check data. Limit group name length.	if (!utf8_strlen($name) || utf8_strlen($name) > 60)	{		$error[] = (!utf8_strlen($name)) ? $user->lang['GROUP_ERR_USERNAME'] : $user->lang['GROUP_ERR_USER_LONG'];	}	$err = group_validate_groupname($group_id, $name);	if (!empty($err))	{		$error[] = $user->lang[$err];	}	if (!in_array($type, array(GROUP_OPEN, GROUP_CLOSED, GROUP_HIDDEN, GROUP_SPECIAL, GROUP_FREE)))	{		$error[] = $user->lang['GROUP_ERR_TYPE'];	}	if (!sizeof($error))	{		$user_ary = array();		$sql_ary = array(			'group_name'			=> (string) $name,			'group_desc'			=> (string) $desc,			'group_desc_uid'		=> '',			'group_desc_bitfield'	=> '',			'group_type'			=> (int) $type,		);		// Parse description		if ($desc)		{			generate_text_for_storage($sql_ary['group_desc'], $sql_ary['group_desc_uid'], $sql_ary['group_desc_bitfield'], $sql_ary['group_desc_options'], $allow_desc_bbcode, $allow_desc_urls, $allow_desc_smilies);		}		if (sizeof($group_attributes))		{			// Merge them with $sql_ary to properly update the group			$sql_ary = array_merge($sql_ary, $group_attributes);		}		// Setting the log message before we set the group id (if group gets added)		$log = ($group_id) ? 'LOG_GROUP_UPDATED' : 'LOG_GROUP_CREATED';		$query = '';		if ($group_id)		{			$sql = 'SELECT user_id				FROM ' . USERS_TABLE . '				WHERE group_id = ' . $group_id;			$result = $db->sql_query($sql);			while ($row = $db->sql_fetchrow($result))			{				$user_ary[] = $row['user_id'];			}			$db->sql_freeresult($result);			if (isset($sql_ary['group_avatar']) && !$sql_ary['group_avatar'])			{				remove_default_avatar($group_id, $user_ary);			}			if (isset($sql_ary['group_rank']) && !$sql_ary['group_rank'])			{				remove_default_rank($group_id, $user_ary);			}			$sql = 'UPDATE ' . GROUPS_TABLE . '				SET ' . $db->sql_build_array('UPDATE', $sql_ary) . "				WHERE group_id = $group_id";			$db->sql_query($sql);			// Since we may update the name too, we need to do this on other tables too...			$sql = 'UPDATE ' . MODERATOR_CACHE_TABLE . "				SET group_name = '" . $db->sql_escape($sql_ary['group_name']) . "'				WHERE group_id = $group_id";			$db->sql_query($sql);			// One special case is the group skip auth setting. If this was changed we need to purge permissions for this group			if (isset($group_attributes['group_skip_auth']))			{				// Get users within this group...				$sql = 'SELECT user_id					FROM ' . USER_GROUP_TABLE . '					WHERE group_id = ' . $group_id . '						AND user_pending = 0';				$result = $db->sql_query($sql);				$user_id_ary = array();				while ($row = $db->sql_fetchrow($result))				{					$user_id_ary[] = $row['user_id'];				}				$db->sql_freeresult($result);				if (!empty($user_id_ary))				{					global $auth;					// Clear permissions cache of relevant users					$auth->acl_clear_prefetch($user_id_ary);				}			}		}		else		{			$sql = 'INSERT INTO ' . GROUPS_TABLE . ' ' . $db->sql_build_array('INSERT', $sql_ary);			$db->sql_query($sql);		}		if (!$group_id)		{			$group_id = $db->sql_nextid();			if (isset($sql_ary['group_avatar_type']) && $sql_ary['group_avatar_type'] == AVATAR_UPLOAD)			{				group_correct_avatar($group_id, $sql_ary['group_avatar']);			}		}		// Set user attributes		$sql_ary = array();		if (sizeof($group_attributes))		{			// Go through the user attributes array, check if a group attribute matches it and then set it. ;)			foreach ($user_attribute_ary as $attribute)			{				if (!isset($group_attributes[$attribute]))				{					continue;				}				// If we are about to set an avatar, we will not overwrite user avatars if no group avatar is set...				if (strpos($attribute, 'group_avatar') === 0 && !$group_attributes[$attribute])				{					continue;				}				$sql_ary[$attribute] = $group_attributes[$attribute];			}		}		if (sizeof($sql_ary) && sizeof($user_ary))		{			group_set_user_default($group_id, $user_ary, $sql_ary);		}		$name = ($type == GROUP_SPECIAL) ? $user->lang['G_' . $name] : $name;		add_log('admin', $log, $name);		group_update_listings($group_id);	}	return (sizeof($error)) ? $error : false;}/*** Changes a group avatar's filename to conform to the naming scheme*/function group_correct_avatar($group_id, $old_entry){	global $config, $db, $phpbb_root_path;	$group_id		= (int)$group_id;	$ext 			= substr(strrchr($old_entry, '.'), 1);	$old_filename 	= get_avatar_filename($old_entry);	$new_filename 	= $config['avatar_salt'] . "_g$group_id.$ext";	$new_entry 		= 'g' . $group_id . '_' . substr(time(), -5) . ".$ext";	$avatar_path = $phpbb_root_path . $config['avatar_path'];	if (@rename($avatar_path . '/'. $old_filename, $avatar_path . '/' . $new_filename))	{		$sql = 'UPDATE ' . GROUPS_TABLE . '			SET group_avatar = \'' . $db->sql_escape($new_entry) . "'			WHERE group_id = $group_id";		$db->sql_query($sql);	}}/*** Remove avatar also for users not having the group as default*/function avatar_remove_db($avatar_name){	global $config, $db;	$sql = 'UPDATE ' . USERS_TABLE . "		SET user_avatar = '',		user_avatar_type = 0		WHERE user_avatar = '" . $db->sql_escape($avatar_name) . '\'';	$db->sql_query($sql);}/*** Group Delete*/function group_delete($group_id, $group_name = false){	global $db, $phpbb_root_path, $phpEx;	if (!$group_name)	{		$group_name = get_group_name($group_id);	}	$start = 0;	do	{		$user_id_ary = $username_ary = array();		// Batch query for group members, call group_user_del		$sql = 'SELECT u.user_id, u.username			FROM ' . USER_GROUP_TABLE . ' ug, ' . USERS_TABLE . " u			WHERE ug.group_id = $group_id				AND u.user_id = ug.user_id";		$result = $db->sql_query_limit($sql, 200, $start);		if ($row = $db->sql_fetchrow($result))		{			do			{				$user_id_ary[] = $row['user_id'];				$username_ary[] = $row['username'];				$start++;			}			while ($row = $db->sql_fetchrow($result));			group_user_del($group_id, $user_id_ary, $username_ary, $group_name);		}		else		{			$start = 0;		}		$db->sql_freeresult($result);	}	while ($start);	// Delete group	$sql = 'DELETE FROM ' . GROUPS_TABLE . "		WHERE group_id = $group_id";	$db->sql_query($sql);	// Delete auth entries from the groups table	$sql = 'DELETE FROM ' . ACL_GROUPS_TABLE . "		WHERE group_id = $group_id";	$db->sql_query($sql);	// Re-cache moderators	if (!function_exists('cache_moderators'))	{		include($phpbb_root_path . 'includes/functions_admin.' . $phpEx);	}	cache_moderators();	add_log('admin', 'LOG_GROUP_DELETE', $group_name);	// Return false - no error	return false;}/*** Add user(s) to group** @return mixed false if no errors occurred, else the user lang string for the relevant error, for example 'NO_USER'*/function group_user_add($group_id, $user_id_ary = false, $username_ary = false, $group_name = false, $default = false, $leader = 0, $pending = 0, $group_attributes = false){	global $db, $auth;	// We need both username and user_id info	$result = user_get_id_name($user_id_ary, $username_ary);	if (!sizeof($user_id_ary) || $result !== false)	{		return 'NO_USER';	}	// Remove users who are already members of this group	$sql = 'SELECT user_id, group_leader		FROM ' . USER_GROUP_TABLE . '		WHERE ' . $db->sql_in_set('user_id', $user_id_ary) . "			AND group_id = $group_id";	$result = $db->sql_query($sql);	$add_id_ary = $update_id_ary = array();	while ($row = $db->sql_fetchrow($result))	{		$add_id_ary[] = (int) $row['user_id'];		if ($leader && !$row['group_leader'])		{			$update_id_ary[] = (int) $row['user_id'];		}	}	$db->sql_freeresult($result);	// Do all the users exist in this group?	$add_id_ary = array_diff($user_id_ary, $add_id_ary);	// If we have no users	if (!sizeof($add_id_ary) && !sizeof($update_id_ary))	{		return 'GROUP_USERS_EXIST';	}	$db->sql_transaction('begin');	// Insert the new users	if (sizeof($add_id_ary))	{		$sql_ary = array();		foreach ($add_id_ary as $user_id)		{			$sql_ary[] = array(				'user_id'		=> (int) $user_id,				'group_id'		=> (int) $group_id,				'group_leader'	=> (int) $leader,				'user_pending'	=> (int) $pending,			);		}		$db->sql_multi_insert(USER_GROUP_TABLE, $sql_ary);	}	if (sizeof($update_id_ary))	{		$sql = 'UPDATE ' . USER_GROUP_TABLE . '			SET group_leader = 1			WHERE ' . $db->sql_in_set('user_id', $update_id_ary) . "				AND group_id = $group_id";		$db->sql_query($sql);	}	if ($default)	{		group_user_attributes('default', $group_id, $user_id_ary, false, $group_name, $group_attributes);	}	$db->sql_transaction('commit');	// Clear permissions cache of relevant users	$auth->acl_clear_prefetch($user_id_ary);	if (!$group_name)	{		$group_name = get_group_name($group_id);	}	$log = ($leader) ? 'LOG_MODS_ADDED' : (($pending) ? 'LOG_USERS_PENDING' : 'LOG_USERS_ADDED');	add_log('admin', $log, $group_name, implode(', ', $username_ary));	group_update_listings($group_id);	// Return false - no error	return false;}/*** Remove a user/s from a given group. When we remove users we update their* default group_id. We do this by examining which "special" groups they belong* to. The selection is made based on a reasonable priority system** @return false if no errors occurred, else the user lang string for the relevant error, for example 'NO_USER'*/function group_user_del($group_id, $user_id_ary = false, $username_ary = false, $group_name = false){	global $db, $auth, $config;	if ($config['coppa_enable'])	{		$group_order = array('ADMINISTRATORS', 'GLOBAL_MODERATORS', 'NEWLY_REGISTERED', 'REGISTERED_COPPA', 'REGISTERED', 'BOTS', 'GUESTS');	}	else	{		$group_order = array('ADMINISTRATORS', 'GLOBAL_MODERATORS', 'NEWLY_REGISTERED', 'REGISTERED', 'BOTS', 'GUESTS');	}	// We need both username and user_id info	$result = user_get_id_name($user_id_ary, $username_ary);	if (!sizeof($user_id_ary) || $result !== false)	{		return 'NO_USER';	}	$sql = 'SELECT *		FROM ' . GROUPS_TABLE . '		WHERE ' . $db->sql_in_set('group_name', $group_order);	$result = $db->sql_query($sql);	$group_order_id = $special_group_data = array();	while ($row = $db->sql_fetchrow($result))	{		$group_order_id[$row['group_name']] = $row['group_id'];		$special_group_data[$row['group_id']] = array(			'group_colour'			=> $row['group_colour'],			'group_rank'				=> $row['group_rank'],		);		// Only set the group avatar if one is defined...		if ($row['group_avatar'])		{			$special_group_data[$row['group_id']] = array_merge($special_group_data[$row['group_id']], array(				'group_avatar'			=> $row['group_avatar'],				'group_avatar_type'		=> $row['group_avatar_type'],				'group_avatar_width'		=> $row['group_avatar_width'],				'group_avatar_height'	=> $row['group_avatar_height'])			);		}	}	$db->sql_freeresult($result);	// Get users default groups - we only need to reset default group membership if the group from which the user gets removed is set as default	$sql = 'SELECT user_id, group_id		FROM ' . USERS_TABLE . '		WHERE ' . $db->sql_in_set('user_id', $user_id_ary);	$result = $db->sql_query($sql);	$default_groups = array();	while ($row = $db->sql_fetchrow($result))	{		$default_groups[$row['user_id']] = $row['group_id'];	}	$db->sql_freeresult($result);	// What special group memberships exist for these users?	$sql = 'SELECT g.group_id, g.group_name, ug.user_id		FROM ' . USER_GROUP_TABLE . ' ug, ' . GROUPS_TABLE . ' g		WHERE ' . $db->sql_in_set('ug.user_id', $user_id_ary) . "			AND g.group_id = ug.group_id			AND g.group_id <> $group_id			AND g.group_type = " . GROUP_SPECIAL . '		ORDER BY ug.user_id, g.group_id';	$result = $db->sql_query($sql);	$temp_ary = array();	while ($row = $db->sql_fetchrow($result))	{		if ($default_groups[$row['user_id']] == $group_id && (!isset($temp_ary[$row['user_id']]) || $group_order_id[$row['group_name']] < $temp_ary[$row['user_id']]))		{			$temp_ary[$row['user_id']] = $row['group_id'];		}	}	$db->sql_freeresult($result);	// sql_where_ary holds the new default groups and their users	$sql_where_ary = array();	foreach ($temp_ary as $uid => $gid)	{		$sql_where_ary[$gid][] = $uid;	}	unset($temp_ary);	foreach ($special_group_data as $gid => $default_data_ary)	{		if (isset($sql_where_ary[$gid]) && sizeof($sql_where_ary[$gid]))		{			remove_default_rank($group_id, $sql_where_ary[$gid]);			remove_default_avatar($group_id, $sql_where_ary[$gid]);			group_set_user_default($gid, $sql_where_ary[$gid], $default_data_ary);		}	}	unset($special_group_data);	$sql = 'DELETE FROM ' . USER_GROUP_TABLE . "		WHERE group_id = $group_id			AND " . $db->sql_in_set('user_id', $user_id_ary);	$db->sql_query($sql);	// Clear permissions cache of relevant users	$auth->acl_clear_prefetch($user_id_ary);	if (!$group_name)	{		$group_name = get_group_name($group_id);	}	$log = 'LOG_GROUP_REMOVE';	if ($group_name)	{		add_log('admin', $log, $group_name, implode(', ', $username_ary));	}	group_update_listings($group_id);	// Return false - no error	return false;}/*** Removes the group avatar of the default group from the users in user_ids who have that group as default.*/function remove_default_avatar($group_id, $user_ids){	global $db;	if (!is_array($user_ids))	{		$user_ids = array($user_ids);	}	if (empty($user_ids))	{		return false;	}	$user_ids = array_map('intval', $user_ids);	$sql = 'SELECT *		FROM ' . GROUPS_TABLE . '		WHERE group_id = ' . (int)$group_id;	$result = $db->sql_query($sql);	if (!$row = $db->sql_fetchrow($result))	{		$db->sql_freeresult($result);		return false;	}	$db->sql_freeresult($result);	$sql = 'UPDATE ' . USERS_TABLE . "		SET user_avatar = '',			user_avatar_type = 0,			user_avatar_width = 0,			user_avatar_height = 0		WHERE group_id = " . (int) $group_id . "		AND user_avatar = '" . $db->sql_escape($row['group_avatar']) . "'		AND " . $db->sql_in_set('user_id', $user_ids);	$db->sql_query($sql);}/*** Removes the group rank of the default group from the users in user_ids who have that group as default.*/function remove_default_rank($group_id, $user_ids){	global $db;	if (!is_array($user_ids))	{		$user_ids = array($user_ids);	}	if (empty($user_ids))	{		return false;	}	$user_ids = array_map('intval', $user_ids);	$sql = 'SELECT *		FROM ' . GROUPS_TABLE . '		WHERE group_id = ' . (int)$group_id;	$result = $db->sql_query($sql);	if (!$row = $db->sql_fetchrow($result))	{		$db->sql_freeresult($result);		return false;	}	$db->sql_freeresult($result);	$sql = 'UPDATE ' . USERS_TABLE . '		SET user_rank = 0		WHERE group_id = ' . (int)$group_id . '		AND user_rank <> 0		AND user_rank = ' . (int)$row['group_rank'] . '		AND ' . $db->sql_in_set('user_id', $user_ids);	$db->sql_query($sql);}/*** This is used to promote (to leader), demote or set as default a member/s*/function group_user_attributes($action, $group_id, $user_id_ary = false, $username_ary = false, $group_name = false, $group_attributes = false){	global $db, $auth, $phpbb_root_path, $phpEx, $config;	// We need both username and user_id info	$result = user_get_id_name($user_id_ary, $username_ary);	if (!sizeof($user_id_ary) || $result !== false)	{		return 'NO_USERS';	}	if (!$group_name)	{		$group_name = get_group_name($group_id);	}	switch ($action)	{		case 'demote':		case 'promote':			$sql = 'SELECT user_id FROM ' . USER_GROUP_TABLE . "				WHERE group_id = $group_id					AND user_pending = 1					AND " . $db->sql_in_set('user_id', $user_id_ary);			$result = $db->sql_query_limit($sql, 1);			$not_empty = ($db->sql_fetchrow($result));			$db->sql_freeresult($result);			if ($not_empty)			{				return 'NO_VALID_USERS';			}			$sql = 'UPDATE ' . USER_GROUP_TABLE . '				SET group_leader = ' . (($action == 'promote') ? 1 : 0) . "				WHERE group_id = $group_id					AND user_pending = 0					AND " . $db->sql_in_set('user_id', $user_id_ary);			$db->sql_query($sql);			$log = ($action == 'promote') ? 'LOG_GROUP_PROMOTED' : 'LOG_GROUP_DEMOTED';		break;		case 'approve':			// Make sure we only approve those which are pending ;)			$sql = 'SELECT u.user_id, u.user_email, u.username, u.username_clean, u.user_notify_type, u.user_jabber, u.user_lang				FROM ' . USERS_TABLE . ' u, ' . USER_GROUP_TABLE . ' ug				WHERE ug.group_id = ' . $group_id . '					AND ug.user_pending = 1					AND ug.user_id = u.user_id					AND ' . $db->sql_in_set('ug.user_id', $user_id_ary);			$result = $db->sql_query($sql);			$user_id_ary = $email_users = array();			while ($row = $db->sql_fetchrow($result))			{				$user_id_ary[] = $row['user_id'];				$email_users[] = $row;			}			$db->sql_freeresult($result);			if (!sizeof($user_id_ary))			{				return false;			}			$sql = 'UPDATE ' . USER_GROUP_TABLE . "				SET user_pending = 0				WHERE group_id = $group_id					AND " . $db->sql_in_set('user_id', $user_id_ary);			$db->sql_query($sql);			// Send approved email to users...			include_once($phpbb_root_path . 'includes/functions_messenger.' . $phpEx);			$messenger = new messenger();			foreach ($email_users as $row)			{				$messenger->template('group_approved', $row['user_lang']);				$messenger->to($row['user_email'], $row['username']);				$messenger->im($row['user_jabber'], $row['username']);				$messenger->assign_vars(array(					'USERNAME'		=> htmlspecialchars_decode($row['username']),					'GROUP_NAME'	=> htmlspecialchars_decode($group_name),					'U_GROUP'		=> generate_board_url() . "/ucp.$phpEx?i=groups&mode=membership")				);				$messenger->send($row['user_notify_type']);			}			$messenger->save_queue();			$log = 'LOG_USERS_APPROVED';		break;		case 'default':			// We only set default group for approved members of the group			$sql = 'SELECT user_id				FROM ' . USER_GROUP_TABLE . "				WHERE group_id = $group_id					AND user_pending = 0					AND " . $db->sql_in_set('user_id', $user_id_ary);			$result = $db->sql_query($sql);			$user_id_ary = $username_ary = array();			while ($row = $db->sql_fetchrow($result))			{				$user_id_ary[] = $row['user_id'];			}			$db->sql_freeresult($result);			$result = user_get_id_name($user_id_ary, $username_ary);			if (!sizeof($user_id_ary) || $result !== false)			{				return 'NO_USERS';			}			$sql = 'SELECT user_id, group_id FROM ' . USERS_TABLE . '				WHERE ' . $db->sql_in_set('user_id', $user_id_ary, false, true);			$result = $db->sql_query($sql);			$groups = array();			while ($row = $db->sql_fetchrow($result))			{				if (!isset($groups[$row['group_id']]))				{					$groups[$row['group_id']] = array();				}				$groups[$row['group_id']][] = $row['user_id'];			}			$db->sql_freeresult($result);			foreach ($groups as $gid => $uids)			{				remove_default_rank($gid, $uids);				remove_default_avatar($gid, $uids);			}			group_set_user_default($group_id, $user_id_ary, $group_attributes);			$log = 'LOG_GROUP_DEFAULTS';		break;	}	// Clear permissions cache of relevant users	$auth->acl_clear_prefetch($user_id_ary);	add_log('admin', $log, $group_name, implode(', ', $username_ary));	group_update_listings($group_id);	return false;}/*** A small version of validate_username to check for a group name's existence. To be called directly.*/function group_validate_groupname($group_id, $group_name){	global $config, $db;	$group_name =  utf8_clean_string($group_name);	if (!empty($group_id))	{		$sql = 'SELECT group_name			FROM ' . GROUPS_TABLE . '			WHERE group_id = ' . (int) $group_id;		$result = $db->sql_query($sql);		$row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$row)		{			return false;		}		$allowed_groupname = utf8_clean_string($row['group_name']);		if ($allowed_groupname == $group_name)		{			return false;		}	}	$sql = 'SELECT group_name		FROM ' . GROUPS_TABLE . "		WHERE LOWER(group_name) = '" . $db->sql_escape(utf8_strtolower($group_name)) . "'";	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if ($row)	{		return 'GROUP_NAME_TAKEN';	}	return false;}/*** Set users default group** @access private*/function group_set_user_default($group_id, $user_id_ary, $group_attributes = false, $update_listing = false){	global $cache, $db;	if (empty($user_id_ary))	{		return;	}	$attribute_ary = array(		'group_colour'			=> 'string',		'group_rank'			=> 'int',		'group_avatar'			=> 'string',		'group_avatar_type'		=> 'int',		'group_avatar_width'	=> 'int',		'group_avatar_height'	=> 'int',	);	$sql_ary = array(		'group_id'		=> $group_id	);	// Were group attributes passed to the function? If not we need to obtain them	if ($group_attributes === false)	{		$sql = 'SELECT ' . implode(', ', array_keys($attribute_ary)) . '			FROM ' . GROUPS_TABLE . "			WHERE group_id = $group_id";		$result = $db->sql_query($sql);		$group_attributes = $db->sql_fetchrow($result);		$db->sql_freeresult($result);	}	foreach ($attribute_ary as $attribute => $type)	{		if (isset($group_attributes[$attribute]))		{			// If we are about to set an avatar or rank, we will not overwrite with empty, unless we are not actually changing the default group			if ((strpos($attribute, 'group_avatar') === 0 || strpos($attribute, 'group_rank') === 0) && !$group_attributes[$attribute])			{				continue;			}			settype($group_attributes[$attribute], $type);			$sql_ary[str_replace('group_', 'user_', $attribute)] = $group_attributes[$attribute];		}	}	// Before we update the user attributes, we will make a list of those having now the group avatar assigned	if (isset($sql_ary['user_avatar']))	{		// Ok, get the original avatar data from users having an uploaded one (we need to remove these from the filesystem)		$sql = 'SELECT user_id, group_id, user_avatar			FROM ' . USERS_TABLE . '			WHERE ' . $db->sql_in_set('user_id', $user_id_ary) . '				AND user_avatar_type = ' . AVATAR_UPLOAD;		$result = $db->sql_query($sql);		while ($row = $db->sql_fetchrow($result))		{			avatar_delete('user', $row);		}		$db->sql_freeresult($result);	}	else	{		unset($sql_ary['user_avatar_type']);		unset($sql_ary['user_avatar_height']);		unset($sql_ary['user_avatar_width']);	}	$sql = 'UPDATE ' . USERS_TABLE . ' SET ' . $db->sql_build_array('UPDATE', $sql_ary) . '		WHERE ' . $db->sql_in_set('user_id', $user_id_ary);	$db->sql_query($sql);	if (isset($sql_ary['user_colour']))	{		// Update any cached colour information for these users		$sql = 'UPDATE ' . FORUMS_TABLE . " SET forum_last_poster_colour = '" . $db->sql_escape($sql_ary['user_colour']) . "'			WHERE " . $db->sql_in_set('forum_last_poster_id', $user_id_ary);		$db->sql_query($sql);		$sql = 'UPDATE ' . TOPICS_TABLE . " SET topic_first_poster_colour = '" . $db->sql_escape($sql_ary['user_colour']) . "'			WHERE " . $db->sql_in_set('topic_poster', $user_id_ary);		$db->sql_query($sql);		$sql = 'UPDATE ' . TOPICS_TABLE . " SET topic_last_poster_colour = '" . $db->sql_escape($sql_ary['user_colour']) . "'			WHERE " . $db->sql_in_set('topic_last_poster_id', $user_id_ary);		$db->sql_query($sql);		global $config;		if (in_array($config['newest_user_id'], $user_id_ary))		{			set_config('newest_user_colour', $sql_ary['user_colour'], true);		}	}	if ($update_listing)	{		group_update_listings($group_id);	}	// Because some tables/caches use usercolour-specific data we need to purge this here.	$cache->destroy('sql', MODERATOR_CACHE_TABLE);}/*** Get group name*/function get_group_name($group_id){	global $db, $user;	$sql = 'SELECT group_name, group_type		FROM ' . GROUPS_TABLE . '		WHERE group_id = ' . (int) $group_id;	$result = $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	$db->sql_freeresult($result);	if (!$row || ($row['group_type'] == GROUP_SPECIAL && empty($user->lang)))	{		return '';	}	return ($row['group_type'] == GROUP_SPECIAL) ? $user->lang['G_' . $row['group_name']] : $row['group_name'];}/*** Obtain either the members of a specified group, the groups the specified user is subscribed to* or checking if a specified user is in a specified group. This function does not return pending memberships.** Note: Never use this more than once... first group your users/groups*/function group_memberships($group_id_ary = false, $user_id_ary = false, $return_bool = false){	global $db;	if (!$group_id_ary && !$user_id_ary)	{		return true;	}	if ($user_id_ary)	{		$user_id_ary = (!is_array($user_id_ary)) ? array($user_id_ary) : $user_id_ary;	}	if ($group_id_ary)	{		$group_id_ary = (!is_array($group_id_ary)) ? array($group_id_ary) : $group_id_ary;	}	$sql = 'SELECT ug.*, u.username, u.username_clean, u.user_email		FROM ' . USER_GROUP_TABLE . ' ug, ' . USERS_TABLE . ' u		WHERE ug.user_id = u.user_id			AND ug.user_pending = 0 AND ';	if ($group_id_ary)	{		$sql .= ' ' . $db->sql_in_set('ug.group_id', $group_id_ary);	}	if ($user_id_ary)	{		$sql .= ($group_id_ary) ? ' AND ' : ' ';		$sql .= $db->sql_in_set('ug.user_id', $user_id_ary);	}	$result = ($return_bool) ? $db->sql_query_limit($sql, 1) : $db->sql_query($sql);	$row = $db->sql_fetchrow($result);	if ($return_bool)	{		$db->sql_freeresult($result);		return ($row) ? true : false;	}	if (!$row)	{		return false;	}	$return = array();	do	{		$return[] = $row;	}	while ($row = $db->sql_fetchrow($result));	$db->sql_freeresult($result);	return $return;}/*** Re-cache moderators and foes if group has a_ or m_ permissions*/function group_update_listings($group_id){	global $auth;	$hold_ary = $auth->acl_group_raw_data($group_id, array('a_', 'm_'));	if (!sizeof($hold_ary))	{		return;	}	$mod_permissions = $admin_permissions = false;	foreach ($hold_ary as $g_id => $forum_ary)	{		foreach ($forum_ary as $forum_id => $auth_ary)		{			foreach ($auth_ary as $auth_option => $setting)			{				if ($mod_permissions && $admin_permissions)				{					break 3;				}				if ($setting != ACL_YES)				{					continue;				}				if ($auth_option == 'm_')				{					$mod_permissions = true;				}				if ($auth_option == 'a_')				{					$admin_permissions = true;				}			}		}	}	if ($mod_permissions)	{		if (!function_exists('cache_moderators'))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/functions_admin.' . $phpEx);		}		cache_moderators();	}	if ($mod_permissions || $admin_permissions)	{		if (!function_exists('update_foes'))		{			global $phpbb_root_path, $phpEx;			include($phpbb_root_path . 'includes/functions_admin.' . $phpEx);		}		update_foes(array($group_id));	}}/*** Funtion to make a user leave the NEWLY_REGISTERED system group.* @access public* @param $user_id The id of the user to remove from the group*/function remove_newly_registered($user_id, $user_data = false){	global $db;	if ($user_data === false)	{		$sql = 'SELECT *			FROM ' . USERS_TABLE . '			WHERE user_id = ' . $user_id;		$result = $db->sql_query($sql);		$user_row = $db->sql_fetchrow($result);		$db->sql_freeresult($result);		if (!$user_row)		{			return false;		}		else		{			$user_data  = $user_row;		}	}	if (empty($user_data['user_new']))	{		return false;	}	$sql = 'SELECT group_id		FROM ' . GROUPS_TABLE . "		WHERE group_name = 'NEWLY_REGISTERED'			AND group_type = " . GROUP_SPECIAL;	$result = $db->sql_query($sql);	$group_id = (int) $db->sql_fetchfield('group_id');	$db->sql_freeresult($result);	if (!$group_id)	{		return false;	}	// We need to call group_user_del here, because this function makes sure everything is correctly changed.	// A downside for a call within the session handler is that the language is not set up yet - so no log entry	group_user_del($group_id, $user_id);	// Set user_new to 0 to let this not be triggered again	$sql = 'UPDATE ' . USERS_TABLE . '		SET user_new = 0		WHERE user_id = ' . $user_id;	$db->sql_query($sql);	// The new users group was the users default group?	if ($user_data['group_id'] == $group_id)	{		// Which group is now the users default one?		$sql = 'SELECT group_id			FROM ' . USERS_TABLE . '			WHERE user_id = ' . $user_id;		$result = $db->sql_query($sql);		$user_data['group_id'] = $db->sql_fetchfield('group_id');		$db->sql_freeresult($result);	}	return $user_data['group_id'];}?>
<?php/**** common [English]** @package language* @version $Id$* @copyright (c) 2005 phpBB Group* @license http://opensource.org/licenses/gpl-license.php GNU Public License**//*** DO NOT CHANGE*/if (!defined('IN_PHPBB')){	exit;}if (empty($lang) || !is_array($lang)){	$lang = array();}// DEVELOPERS PLEASE NOTE//// All language files should use UTF-8 as their encoding and the files must not contain a BOM.//// Placeholders can now contain order information, e.g. instead of// 'Page %s of %s' you can (and should) write 'Page %1$s of %2$s', this allows// translators to re-order the output of data while ensuring it remains correct//// You do not need this where single placeholders are used, e.g. 'Message %d' is fine// equally where a string contains only two placeholders which are used to wrap text// in a url you again do not need to specify an order e.g., 'Click %sHERE%s' is fine//// Some characters you may want to copy&paste://     //$lang = array_merge($lang, array(	'TRANSLATION_INFO'	=> '',	'DIRECTION'			=> 'ltr',	'DATE_FORMAT'		=> '|d M Y|',	// 01 Jan 2007 (with Relative days enabled)	'USER_LANG'			=> 'en-gb',	'1_DAY'			=> '1 day',	'1_MONTH'		=> '1 month',	'1_YEAR'		=> '1 year',	'2_WEEKS'		=> '2 weeks',	'3_MONTHS'		=> '3 months',	'6_MONTHS'		=> '6 months',	'7_DAYS'		=> '7 days',	'ACCOUNT_ALREADY_ACTIVATED'		=> 'Your account has already been activated.',	'ACCOUNT_DEACTIVATED'			=> 'Your account has been manually deactivated and is only able to be reactivated by an administrator.',	'ACCOUNT_NOT_ACTIVATED'			=> 'Your account has not been activated yet.',	'ACP'							=> 'Administration Control Panel',	'ACTIVE'						=> 'active',	'ACTIVE_ERROR'					=> 'The specified username is currently inactive. If you have problems activating your account, please contact a board administrator.',	'ADMINISTRATOR'					=> 'Administrator',	'ADMINISTRATORS'				=> 'Administrators',	'AGE'							=> 'Age',	'AIM'							=> 'AIM',	'ALLOWED'						=> 'Allowed',	'ALL_FILES'						=> 'All files',	'ALL_FORUMS'					=> 'All forums',	'ALL_MESSAGES'					=> 'All messages',	'ALL_POSTS'						=> 'All posts',	'ALL_TIMES'						=> 'All times are %1$s %2$s',	'ALL_TOPICS'					=> 'All Topics',	'AND'							=> 'And',	'ARE_WATCHING_FORUM'			=> 'You have subscribed to be notified of new posts in this forum.',	'ARE_WATCHING_TOPIC'			=> 'You have subscribed to be notified of new posts in this topic.',	'ASCENDING'						=> 'Ascending',	'ATTACHMENTS'					=> 'Attachments',	'ATTACHED_IMAGE_NOT_IMAGE'		=> 'The image file you tried to attach is invalid.',	'AUTHOR'						=> 'Author',	'AUTH_NO_PROFILE_CREATED'		=> 'The creation of a user profile was unsuccessful.',	'AVATAR_DISALLOWED_CONTENT'		=> 'The upload was rejected because the uploaded file was identified as a possible attack vector.',	'AVATAR_DISALLOWED_EXTENSION'	=> 'This file cannot be displayed because the extension <strong>%s</strong> is not allowed.',	'AVATAR_EMPTY_REMOTE_DATA'		=> 'The specified avatar could not be uploaded because the remote data appears to be invalid or corrupted.',	'AVATAR_EMPTY_FILEUPLOAD'		=> 'The uploaded avatar file is empty.',	'AVATAR_INVALID_FILENAME'		=> '%s is an invalid filename.',	'AVATAR_NOT_UPLOADED'			=> 'Avatar could not be uploaded.',	'AVATAR_NO_SIZE'				=> 'The width or height of the linked avatar could not be determined. Please enter them manually.',	'AVATAR_PARTIAL_UPLOAD'			=> 'The specified file was only partially uploaded.',	'AVATAR_PHP_SIZE_NA'			=> 'The avatars filesize is too large.<br />The maximum allowed filesize set in php.ini could not be determined.',	'AVATAR_PHP_SIZE_OVERRUN'		=> 'The avatars filesize is too large. The maximum allowed upload size is %1$d %2$s.<br />Please note this is set in php.ini and cannot be overridden.',	'AVATAR_URL_INVALID'			=> 'The URL you specified is invalid.',	'AVATAR_URL_NOT_FOUND'			=> 'The file specified could not be found.',	'AVATAR_WRONG_FILESIZE'			=> 'The avatars filesize must be between 0 and %1d %2s.',	'AVATAR_WRONG_SIZE'				=> 'The submitted avatar is %5$d pixels wide and %6$d pixels high. Avatars must be at least %1$d pixels wide and %2$d pixels high, but no larger than %3$d pixels wide and %4$d pixels high.',	'BACK_TO_TOP'			=> 'Top',	'BACK_TO_PREV'			=> 'Back to previous page',	'BAN_TRIGGERED_BY_EMAIL'=> 'A ban has been issued on your e-mail address.',	'BAN_TRIGGERED_BY_IP'	=> 'A ban has been issued on your IP address.',	'BAN_TRIGGERED_BY_USER'	=> 'A ban has been issued on your username.',	'BBCODE_GUIDE'			=> 'BBCode guide',	'BCC'					=> 'BCC',	'BIRTHDAYS'				=> 'Birthdays',	'BOARD_BAN_PERM'		=> 'You have been <strong>permanently</strong> banned from this board.<br /><br />Please contact the %2$sBoard Administrator%3$s for more information.',	'BOARD_BAN_REASON'		=> 'Reason given for ban: <strong>%s</strong>',	'BOARD_BAN_TIME'		=> 'You have been banned from this board until <strong>%1$s</strong>.<br /><br />Please contact the %2$sBoard Administrator%3$s for more information.',	'BOARD_DISABLE'			=> 'Sorry but this board is currently unavailable.',	'BOARD_DISABLED'		=> 'This board is currently disabled.',	'BOARD_UNAVAILABLE'		=> 'Sorry but the board is temporarily unavailable, please try again in a few minutes.',	'BROWSING_FORUM'		=> 'Users browsing this forum: %1$s',	'BROWSING_FORUM_GUEST'	=> 'Users browsing this forum: %1$s and %2$d guest',	'BROWSING_FORUM_GUESTS'	=> 'Users browsing this forum: %1$s and %2$d guests',	'BYTES'					=> 'Bytes',	'CANCEL'				=> 'Cancel',	'CHANGE'				=> 'Change',	'CHANGE_FONT_SIZE'		=> 'Change font size',	'CHANGING_PREFERENCES'	=> 'Changing board preferences',	'CHANGING_PROFILE'		=> 'Changing profile settings',	'CLICK_VIEW_PRIVMSG'	=> '%sGo to your inbox%s',	'COLLAPSE_VIEW'			=> 'Collapse view',	'CLOSE_WINDOW'			=> 'Close window',	'COLOUR_SWATCH'			=> 'Colour swatch',	'COMMA_SEPARATOR'		=> ', ',	// Used in pagination of ACP & prosilver, use localised comma if appropriate, eg: Ideographic or Arabic	'CONFIRM'				=> 'Confirm',	'CONFIRM_CODE'			=> 'Confirmation code',	'CONFIRM_CODE_EXPLAIN'	=> 'Enter the code exactly as it appears. All letters are case insensitive.',	'CONFIRM_CODE_WRONG'	=> 'The confirmation code you entered was incorrect.',	'CONFIRM_OPERATION'		=> 'Are you sure you wish to carry out this operation?',	'CONGRATULATIONS'		=> 'Congratulations to',	'CONNECTION_FAILED'		=> 'Connection failed.',	'CONNECTION_SUCCESS'	=> 'Connection was successful!',	'COOKIES_DELETED'		=> 'All board cookies successfully deleted.',	'CURRENT_TIME'			=> 'It is currently %s',	'DAY'					=> 'Day',	'DAYS'					=> 'Days',	'DELETE'				=> 'Delete',	'DELETE_ALL'			=> 'Delete all',	'DELETE_COOKIES'		=> 'Delete all board cookies',	'DELETE_MARKED'			=> 'Delete marked',	'DELETE_POST'			=> 'Delete post',	'DELIMITER'				=> 'Delimiter',	'DESCENDING'			=> 'Descending',	'DISABLED'				=> 'Disabled',	'DISPLAY'				=> 'Display',	'DISPLAY_GUESTS'		=> 'Display guests',	'DISPLAY_MESSAGES'		=> 'Display messages from previous',	'DISPLAY_POSTS'			=> 'Display posts from previous',	'DISPLAY_TOPICS'		=> 'Display topics from previous',	'DOWNLOADED'			=> 'Downloaded',	'DOWNLOADING_FILE'		=> 'Downloading file',	'DOWNLOAD_COUNT'		=> 'Downloaded %d time',	'DOWNLOAD_COUNTS'		=> 'Downloaded %d times',	'DOWNLOAD_COUNT_NONE'	=> 'Not downloaded yet',	'VIEWED_COUNT'			=> 'Viewed %d time',	'VIEWED_COUNTS'			=> 'Viewed %d times',	'VIEWED_COUNT_NONE'		=> 'Not viewed yet',	'EDIT_POST'							=> 'Edit post',	'EMAIL'								=> 'E-mail', // Short form for EMAIL_ADDRESS	'EMAIL_ADDRESS'						=> 'E-mail address',	'EMAIL_SMTP_ERROR_RESPONSE'			=> 'Ran into problems sending e-mail at <strong>Line %1$s</strong>. Response: %2$s.',	'EMPTY_SUBJECT'						=> 'You must specify a subject when posting a new topic.',	'EMPTY_MESSAGE_SUBJECT'				=> 'You must specify a subject when composing a new message.',	'ENABLED'							=> 'Enabled',	'ENCLOSURE'							=> 'Enclosure',	'ENTER_USERNAME'					=> 'Enter username',	'ERR_CHANGING_DIRECTORY'			=> 'Unable to change directory.',	'ERR_CONNECTING_SERVER'				=> 'Error connecting to the server.',	'ERR_JAB_AUTH'						=> 'Could not authorise on Jabber server.',	'ERR_JAB_CONNECT'					=> 'Could not connect to Jabber server.',	'ERR_UNABLE_TO_LOGIN'				=> 'The specified username or password is incorrect.',	'ERR_UNWATCHING'					=> 'An error occured while trying to unsubscribe.',	'ERR_WATCHING'						=> 'An error occured while trying to subscribe.',	'ERR_WRONG_PATH_TO_PHPBB'			=> 'The phpBB path specified appears to be invalid.',	'EXPAND_VIEW'						=> 'Expand view',	'EXTENSION'							=> 'Extension',	'EXTENSION_DISABLED_AFTER_POSTING'	=> 'The extension <strong>%s</strong> has been deactivated and can no longer be displayed.',	'FAQ'					=> 'FAQ',	'FAQ_EXPLAIN'			=> 'Frequently Asked Questions',	'FILENAME'				=> 'Filename',	'FILESIZE'				=> 'File size',	'FILEDATE'				=> 'File date',	'FILE_COMMENT'			=> 'File comment',	'FILE_NOT_FOUND'		=> 'The requested file could not be found.',	'FIND_USERNAME'			=> 'Find a member',	'FOLDER'				=> 'Folder',	'FORGOT_PASS'			=> 'I forgot my password',	'FORM_INVALID'			=> 'The submitted form was invalid. Try submitting again.',	'FORUM'					=> 'Forum',	'FORUMS'				=> 'Forums',	'FORUMS_MARKED'			=> 'The selected forums have been marked read.',	'FORUM_CAT'				=> 'Forum category',	'FORUM_INDEX'			=> 'Board index',	'FORUM_LINK'			=> 'Forum link',	'FORUM_LOCATION'		=> 'Forum location',	'FORUM_LOCKED'			=> 'Forum locked',	'FORUM_RULES'			=> 'Forum rules',	'FORUM_RULES_LINK'		=> 'Please click here to view the forum rules',	'FROM'					=> 'from',	'FSOCK_DISABLED'		=> 'The operation could not be completed because the <var>fsockopen</var> function has been disabled or the server being queried could not be found.',	'FSOCK_TIMEOUT'			=> 'A timeout occurred while reading from the network stream.',	'FTP_FSOCK_HOST'				=> 'FTP host',	'FTP_FSOCK_HOST_EXPLAIN'		=> 'FTP server used to connect your site.',	'FTP_FSOCK_PASSWORD'			=> 'FTP password',	'FTP_FSOCK_PASSWORD_EXPLAIN'	=> 'Password for your FTP username.',	'FTP_FSOCK_PORT'				=> 'FTP port',	'FTP_FSOCK_PORT_EXPLAIN'		=> 'Port used to connect to your server.',	'FTP_FSOCK_ROOT_PATH'			=> 'Path to phpBB',	'FTP_FSOCK_ROOT_PATH_EXPLAIN'	=> 'Path from the root to your phpBB board.',	'FTP_FSOCK_TIMEOUT'				=> 'FTP timeout',	'FTP_FSOCK_TIMEOUT_EXPLAIN'		=> 'The amount of time, in seconds, that the system will wait for a reply from your server.',	'FTP_FSOCK_USERNAME'			=> 'FTP username',	'FTP_FSOCK_USERNAME_EXPLAIN'	=> 'Username used to connect to your server.',	'FTP_HOST'					=> 'FTP host',	'FTP_HOST_EXPLAIN'			=> 'FTP server used to connect your site.',	'FTP_PASSWORD'				=> 'FTP password',	'FTP_PASSWORD_EXPLAIN'		=> 'Password for your FTP username.',	'FTP_PORT'					=> 'FTP port',	'FTP_PORT_EXPLAIN'			=> 'Port used to connect to your server.',	'FTP_ROOT_PATH'				=> 'Path to phpBB',	'FTP_ROOT_PATH_EXPLAIN'		=> 'Path from the root to your phpBB board.',	'FTP_TIMEOUT'				=> 'FTP timeout',	'FTP_TIMEOUT_EXPLAIN'		=> 'The amount of time, in seconds, that the system will wait for a reply from your server.',	'FTP_USERNAME'				=> 'FTP username',	'FTP_USERNAME_EXPLAIN'		=> 'Username used to connect to your server.',	'GENERAL_ERROR'				=> 'General Error',	'GB'						=> 'GB',	'GIB'						=> 'GiB',	'GO'						=> 'Go',	'GOTO_PAGE'					=> 'Go to page',	'GROUP'						=> 'Group',	'GROUPS'					=> 'Groups',	'GROUP_ERR_TYPE'			=> 'Inappropriate group type specified.',	'GROUP_ERR_USERNAME'		=> 'No group name specified.',	'GROUP_ERR_USER_LONG'		=> 'Group names cannot exceed 60 characters. The specified group name is too long.',	'GUEST'						=> 'Guest',	'GUEST_USERS_ONLINE'		=> 'There are %d guest users online',	'GUEST_USERS_TOTAL'			=> '%d guests',	'GUEST_USERS_ZERO_ONLINE'	=> 'There are 0 guest users online',	'GUEST_USERS_ZERO_TOTAL'	=> '0 guests',	'GUEST_USER_ONLINE'			=> 'There is %d guest user online',	'GUEST_USER_TOTAL'			=> '%d guest',	'G_ADMINISTRATORS'			=> 'Administrators',	'G_BOTS'					=> 'Bots',	'G_GUESTS'					=> 'Guests',	'G_REGISTERED'				=> 'Registered users',	'G_REGISTERED_COPPA'		=> 'Registered COPPA users',	'G_GLOBAL_MODERATORS'		=> 'Global moderators',	'G_NEWLY_REGISTERED'		=> 'Newly registered users',	'HIDDEN_USERS_ONLINE'			=> '%d hidden users online',	'HIDDEN_USERS_TOTAL'			=> '%d hidden',	'HIDDEN_USERS_TOTAL_AND'		=> '%d hidden and ',	'HIDDEN_USERS_ZERO_ONLINE'		=> '0 hidden users online',	'HIDDEN_USERS_ZERO_TOTAL'		=> '0 hidden',	'HIDDEN_USERS_ZERO_TOTAL_AND'	=> '0 hidden and ',	'HIDDEN_USER_ONLINE'			=> '%d hidden user online',	'HIDDEN_USER_TOTAL'				=> '%d hidden',	'HIDDEN_USER_TOTAL_AND'			=> '%d hidden and ',	'HIDE_GUESTS'					=> 'Hide guests',	'HIDE_ME'						=> 'Hide my online status this session',	'HOURS'							=> 'Hours',	'HOME'							=> 'Home',	'ICQ'						=> 'ICQ',	'ICQ_STATUS'				=> 'ICQ status',	'IF'						=> 'If',	'IMAGE'						=> 'Image',	'IMAGE_FILETYPE_INVALID'	=> 'Image file type %d for mimetype %s not supported.',	'IMAGE_FILETYPE_MISMATCH'	=> 'Image file type mismatch: expected extension %1$s but extension %2$s given.',	'IN'						=> 'in',	'INDEX'						=> 'Index page',	'INFORMATION'				=> 'Information',	'INTERESTS'					=> 'Interests',	'INVALID_DIGEST_CHALLENGE'	=> 'Invalid digest challenge.',	'INVALID_EMAIL_LOG'			=> '<strong>%s</strong> possibly an invalid e-mail address?',	'IP'						=> 'IP',	'IP_BLACKLISTED'			=> 'Your IP %1$s has been blocked because it is blacklisted. For details please see <a href="%2$s">%2$s</a>.',	'JABBER'				=> 'Jabber',	'JOINED'				=> 'Joined',	'JUMP_PAGE'				=> 'Enter the page number you wish to go to',	'JUMP_TO'				=> 'Jump to',	'JUMP_TO_PAGE'			=> 'Click to jump to page',	'KB'					=> 'KB',	'KIB'					=> 'KiB',	'LAST_POST'							=> 'Last post',	'LAST_UPDATED'						=> 'Last updated',	'LAST_VISIT'						=> 'Last visit',	'LDAP_NO_LDAP_EXTENSION'			=> 'LDAP extension not available.',	'LDAP_NO_SERVER_CONNECTION'			=> 'Could not connect to LDAP server.',	'LDAP_SEARCH_FAILED'				=> 'An error occured while searching the LDAP directory.',	'LEGEND'							=> 'Legend',	'LOCATION'							=> 'Location',	'LOCK_POST'							=> 'Lock post',	'LOCK_POST_EXPLAIN'					=> 'Prevent editing',	'LOCK_TOPIC'						=> 'Lock topic',	'LOGIN'								=> 'Login',	'LOGIN_CHECK_PM'					=> 'Log in to check your private messages.',	'LOGIN_CONFIRMATION'				=> 'Confirmation of login',	'LOGIN_CONFIRM_EXPLAIN'				=> 'To prevent brute forcing accounts the board requires you to enter a confirmation code after a maximum amount of failed logins. The code is displayed in the image you should see below. If you are visually impaired or cannot otherwise read this code please contact the %sBoard Administrator%s.', // unused	'LOGIN_ERROR_ATTEMPTS'				=> 'You exceeded the maximum allowed number of login attempts. In addition to your username and password you now also have to solve the CAPTCHA below.',	'LOGIN_ERROR_EXTERNAL_AUTH_APACHE'	=> 'You have not been authenticated by Apache.',	'LOGIN_ERROR_PASSWORD'				=> 'You have specified an incorrect password. Please check your password and try again. If you continue to have problems please contact the %sBoard Administrator%s.',	'LOGIN_ERROR_PASSWORD_CONVERT'		=> 'It was not possible to convert your password when updating this bulletin boards software. Please %srequest a new password%s. If you continue to have problems please contact the %sBoard Administrator%s.',	'LOGIN_ERROR_USERNAME'				=> 'You have specified an incorrect username. Please check your username and try again. If you continue to have problems please contact the %sBoard Administrator%s.',	'LOGIN_FORUM'						=> 'To view or post in this forum you must enter its password.',	'LOGIN_INFO'						=> 'In order to login you must be registered. Registering takes only a few moments but gives you increased capabilities. The board administrator may also grant additional permissions to registered users. Before you register please ensure you are familiar with our terms of use and related policies. Please ensure you read any forum rules as you navigate around the board.',	'LOGIN_VIEWFORUM'					=> 'The board requires you to be registered and logged in to view this forum.',	'LOGIN_EXPLAIN_EDIT'				=> 'In order to edit posts in this forum you have to be registered and logged in.',	'LOGIN_EXPLAIN_VIEWONLINE'			=> 'In order to view the online list you have to be registered and logged in.',	'LOGOUT'							=> 'Logout',	'LOGOUT_USER'						=> 'Logout [ %s ]',	'LOG_ME_IN'							=> 'Log me on automatically each visit',	'MARK'					=> 'Mark',	'MARK_ALL'				=> 'Mark all',	'MARK_FORUMS_READ'		=> 'Mark forums read',	'MARK_SUBFORUMS_READ'	=> 'Mark subforums read',	'MB'					=> 'MB',	'MIB'					=> 'MiB',	'MCP'					=> 'Moderator Control Panel',	'MEMBERLIST'			=> 'Members',	'MEMBERLIST_EXPLAIN'	=> 'View complete list of members',	'MERGE'					=> 'Merge',	'MERGE_POSTS'			=> 'Move posts',	'MERGE_TOPIC'			=> 'Merge topic',	'MESSAGE'				=> 'Message',	'MESSAGES'				=> 'Messages',	'MESSAGE_BODY'			=> 'Message body',	'MINUTES'				=> 'Minutes',	'MODERATE'				=> 'Moderate',	'MODERATOR'				=> 'Moderator',	'MODERATORS'			=> 'Moderators',	'MONTH'					=> 'Month',	'MOVE'					=> 'Move',	'MSNM'					=> 'MSNM/WLM',	'NA'						=> 'N/A',	'NEWEST_USER'				=> 'Our newest member <strong>%s</strong>',	'NEW_MESSAGE'				=> 'New message',	'NEW_MESSAGES'				=> 'New messages',	'NEW_PM'					=> '<strong>%d</strong> new message',	'NEW_PMS'					=> '<strong>%d</strong> new messages',	'NEW_POST'					=> 'New post',	// Not used anymore	'NEW_POSTS'					=> 'New posts',	// Not used anymore	'NEXT'						=> 'Next',		// Used in pagination	'NEXT_STEP'					=> 'Next',	'NEVER'						=> 'Never',	'NO'						=> 'No',	'NOT_ALLOWED_MANAGE_GROUP'	=> 'You are not allowed to manage this group.',	'NOT_AUTHORISED'			=> 'You are not authorised to access this area.',	'NOT_WATCHING_FORUM'		=> 'You are no longer subscribed to updates on this forum.',	'NOT_WATCHING_TOPIC'		=> 'You are no longer subscribed to this topic.',	'NOTIFY_ADMIN'				=> 'Please notify the board administrator or webmaster.',	'NOTIFY_ADMIN_EMAIL'		=> 'Please notify the board administrator or webmaster: <a href="mailto:%1$s">%1$s</a>',	'NO_ACCESS_ATTACHMENT'		=> 'You are not allowed to access this file.',	'NO_ACTION'					=> 'No action specified.',	'NO_ADMINISTRATORS'			=> 'There are no administrators.',	'NO_AUTH_ADMIN'				=> 'Access to the Administration Control Panel is not allowed as you do not have administrative permissions.',	'NO_AUTH_ADMIN_USER_DIFFER'	=> 'You are not able to re-authenticate as a different user.',	'NO_AUTH_OPERATION'			=> 'You do not have the necessary permissions to complete this operation.',	'NO_CONNECT_TO_SMTP_HOST'	=> 'Could not connect to smtp host : %1$s : %2$s',	'NO_BIRTHDAYS'				=> 'No birthdays today',	'NO_EMAIL_MESSAGE'			=> 'E-mail message was blank.',	'NO_EMAIL_RESPONSE_CODE'	=> 'Could not get mail server response codes.',	'NO_EMAIL_SUBJECT'			=> 'No e-mail subject specified.',	'NO_FORUM'					=> 'The forum you selected does not exist.',	'NO_FORUMS'					=> 'This board has no forums.',	'NO_GROUP'					=> 'The requested usergroup does not exist.',	'NO_GROUP_MEMBERS'			=> 'This group currently has no members.',	'NO_IPS_DEFINED'			=> 'No IP addresses or hostnames defined',	'NO_MEMBERS'				=> 'No members found for this search criterion.',	'NO_MESSAGES'				=> 'No messages',	'NO_MODE'					=> 'No mode specified.',	'NO_MODERATORS'				=> 'There are no moderators.',	'NO_NEW_MESSAGES'			=> 'No new messages',	'NO_NEW_PM'					=> '<strong>0</strong> new messages',	'NO_NEW_POSTS'				=> 'No new posts',	// Not used anymore	'NO_ONLINE_USERS'			=> 'No registered users',	'NO_POSTS'					=> 'No posts',	'NO_POSTS_TIME_FRAME'		=> 'No posts exist inside this topic for the selected time frame.',	'NO_FEED_ENABLED'			=> 'Feeds are not available on this board.',	'NO_FEED'					=> 'The requested feed is not available.',	'NO_SUBJECT'				=> 'No subject specified',								// Used for posts having no subject defined but displayed within management pages.	'NO_SUCH_SEARCH_MODULE'		=> 'The specified search backend doesnt exist.',	'NO_SUPPORTED_AUTH_METHODS'	=> 'No supported authentication methods.',	'NO_TOPIC'					=> 'The requested topic does not exist.',	'NO_TOPIC_FORUM'			=> 'The topic or forum no longer exists.',	'NO_TOPICS'					=> 'There are no topics or posts in this forum.',	'NO_TOPICS_TIME_FRAME'		=> 'No topics exist inside this forum for the selected time frame.',	'NO_UNREAD_PM'				=> '<strong>0</strong> unread messages',	'NO_UNREAD_POSTS'			=> 'No unread posts',	'NO_UPLOAD_FORM_FOUND'		=> 'Upload initiated but no valid file upload form found.',	'NO_USER'					=> 'The requested user does not exist.',	'NO_USERS'					=> 'The requested users do not exist.',	'NO_USER_SPECIFIED'			=> 'No username was specified.',	// Nullar/Singular/Plural language entry. The key numbers define the number range in which a certain grammatical expression is valid.	'NUM_POSTS_IN_QUEUE'		=> array(		0			=> 'No posts in queue',		// 0		1			=> '1 post in queue',		// 1		2			=> '%d posts in queue',		// 2+	),	'OCCUPATION'				=> 'Occupation',	'OFFLINE'					=> 'Offline',	'ONLINE'					=> 'Online',	'ONLINE_BUDDIES'			=> 'Online friends',	'ONLINE_USERS_TOTAL'		=> 'In total there are <strong>%d</strong> users online :: ',	'ONLINE_USERS_ZERO_TOTAL'	=> 'In total there are <strong>0</strong> users online :: ',	'ONLINE_USER_TOTAL'			=> 'In total there is <strong>%d</strong> user online :: ',	'OPTIONS'					=> 'Options',	'PAGE_OF'				=> 'Page <strong>%1$d</strong> of <strong>%2$d</strong>',	'PASSWORD'				=> 'Password',	'PIXEL'					=> 'px',	'PLAY_QUICKTIME_FILE'	=> 'Play Quicktime file',	'PM'					=> 'PM',	'PM_REPORTED'			=> 'Click to view report',	'POSTING_MESSAGE'		=> 'Posting message in %s',	'POSTING_PRIVATE_MESSAGE'	=> 'Composing private message',	'POST'					=> 'Post',	'POST_ANNOUNCEMENT'		=> 'Announce',	'POST_STICKY'			=> 'Sticky',	'POSTED'				=> 'Posted',	'POSTED_IN_FORUM'		=> 'in',	'POSTED_ON_DATE'		=> 'on',	'POSTS'					=> 'Posts',	'POSTS_UNAPPROVED'		=> 'At least one post in this topic has not been approved.',	'POST_BY_AUTHOR'		=> 'by',	'POST_BY_FOE'			=> 'This post was made by <strong>%1$s</strong> who is currently on your ignore list. %2$sDisplay this post%3$s.',	'POST_DAY'				=> '%.2f posts per day',	'POST_DETAILS'			=> 'Post details',	'POST_NEW_TOPIC'		=> 'Post new topic',	'POST_PCT'				=> '%.2f%% of all posts',	'POST_PCT_ACTIVE'		=> '%.2f%% of users posts',	'POST_PCT_ACTIVE_OWN'	=> '%.2f%% of your posts',	'POST_REPLY'			=> 'Post a reply',	'POST_REPORTED'			=> 'Click to view report',	'POST_SUBJECT'			=> 'Post subject',	'POST_TIME'				=> 'Post time',	'POST_TOPIC'			=> 'Post a new topic',	'POST_UNAPPROVED'		=> 'This post is waiting for approval',	'PREVIEW'				=> 'Preview',	'PREVIOUS'				=> 'Previous',		// Used in pagination	'PREVIOUS_STEP'			=> 'Previous',	'PRIVACY'				=> 'Privacy policy',	'PRIVATE_MESSAGE'		=> 'Private message',	'PRIVATE_MESSAGES'		=> 'Private messages',	'PRIVATE_MESSAGING'		=> 'Private messaging',	'PROFILE'				=> 'User Control Panel',	'READING_FORUM'				=> 'Viewing topics in %s',	'READING_GLOBAL_ANNOUNCE'	=> 'Reading global announcement',	'READING_LINK'				=> 'Following forum link %s',	'READING_TOPIC'				=> 'Reading topic in %s',	'READ_PROFILE'				=> 'Profile',	'REASON'					=> 'Reason',	'RECORD_ONLINE_USERS'		=> 'Most users ever online was <strong>%1$s</strong> on %2$s',	'REDIRECT'					=> 'Redirect',	'REDIRECTS'					=> 'Total redirects',	'REGISTER'					=> 'Register',	'REGISTERED_USERS'			=> 'Registered users:',	'REG_USERS_ONLINE'			=> 'There are %d registered users and ',	'REG_USERS_TOTAL'			=> '%d registered, ',	'REG_USERS_TOTAL_AND'		=> '%d registered and ',	'REG_USERS_ZERO_ONLINE'		=> 'There are 0 registered users and ',	'REG_USERS_ZERO_TOTAL'		=> '0 registered, ',	'REG_USERS_ZERO_TOTAL_AND'	=> '0 registered and ',	'REG_USER_ONLINE'			=> 'There is %d registered user and ',	'REG_USER_TOTAL'			=> '%d registered, ',	'REG_USER_TOTAL_AND'		=> '%d registered and ',	'REMOVE'					=> 'Remove',	'REMOVE_INSTALL'			=> 'Please delete, move or rename the install directory before you use your board. If this directory is still present, only the Administration Control Panel (ACP) will be accessible.',	'REPLIES'					=> 'Replies',	'REPLY_WITH_QUOTE'			=> 'Reply with quote',	'REPLYING_GLOBAL_ANNOUNCE'	=> 'Replying to global announcement',	'REPLYING_MESSAGE'			=> 'Replying to message in %s',	'REPORT_BY'					=> 'Report by',	'REPORT_POST'				=> 'Report this post',	'REPORTING_POST'			=> 'Reporting post',	'RESEND_ACTIVATION'			=> 'Resend activation e-mail',	'RESET'						=> 'Reset',	'RESTORE_PERMISSIONS'		=> 'Restore permissions',	'RETURN_INDEX'				=> '%sReturn to the index page%s',	'RETURN_FORUM'				=> '%sReturn to the forum last visited%s',	'RETURN_PAGE'				=> '%sReturn to the previous page%s',	'RETURN_TOPIC'				=> '%sReturn to the topic last visited%s',	'RETURN_TO'					=> 'Return to',	'FEED'						=> 'Feed',	'FEED_NEWS'					=> 'News',	'FEED_TOPICS_ACTIVE'		=> 'Active Topics',	'FEED_TOPICS_NEW'			=> 'New Topics',	'RULES_ATTACH_CAN'			=> 'You <strong>can</strong> post attachments in this forum',	'RULES_ATTACH_CANNOT'		=> 'You <strong>cannot</strong> post attachments in this forum',	'RULES_DELETE_CAN'			=> 'You <strong>can</strong> delete your posts in this forum',	'RULES_DELETE_CANNOT'		=> 'You <strong>cannot</strong> delete your posts in this forum',	'RULES_DOWNLOAD_CAN'		=> 'You <strong>can</strong> download attachments in this forum',	'RULES_DOWNLOAD_CANNOT'		=> 'You <strong>cannot</strong> download attachments in this forum',	'RULES_EDIT_CAN'			=> 'You <strong>can</strong> edit your posts in this forum',	'RULES_EDIT_CANNOT'			=> 'You <strong>cannot</strong> edit your posts in this forum',	'RULES_LOCK_CAN'			=> 'You <strong>can</strong> lock your topics in this forum',	'RULES_LOCK_CANNOT'			=> 'You <strong>cannot</strong> lock your topics in this forum',	'RULES_POST_CAN'			=> 'You <strong>can</strong> post new topics in this forum',	'RULES_POST_CANNOT'			=> 'You <strong>cannot</strong> post new topics in this forum',	'RULES_REPLY_CAN'			=> 'You <strong>can</strong> reply to topics in this forum',	'RULES_REPLY_CANNOT'		=> 'You <strong>cannot</strong> reply to topics in this forum',	'RULES_VOTE_CAN'			=> 'You <strong>can</strong> vote in polls in this forum',	'RULES_VOTE_CANNOT'			=> 'You <strong>cannot</strong> vote in polls in this forum',	'SEARCH'					=> 'Search',	'SEARCH_MINI'				=> 'Search',	'SEARCH_ADV'				=> 'Advanced search',	'SEARCH_ADV_EXPLAIN'		=> 'View the advanced search options',	'SEARCH_KEYWORDS'			=> 'Search for keywords',	'SEARCHING_FORUMS'			=> 'Searching forums',	'SEARCH_ACTIVE_TOPICS'		=> 'View active topics',	'SEARCH_FOR'				=> 'Search for',	'SEARCH_FORUM'				=> 'Search this forum',	'SEARCH_NEW'				=> 'View new posts',	'SEARCH_POSTS_BY'			=> 'Search posts by',	'SEARCH_SELF'				=> 'View your posts',	'SEARCH_TOPIC'				=> 'Search this topic',	'SEARCH_UNANSWERED'			=> 'View unanswered posts',	'SEARCH_UNREAD'				=> 'View unread posts',	'SEARCH_USER_POSTS'			=> 'Search users posts',	'SECONDS'					=> 'Seconds',	'SELECT'					=> 'Select',	'SELECT_ALL_CODE'			=> 'Select all',	'SELECT_DESTINATION_FORUM'	=> 'Please select a destination forum',	'SELECT_FORUM'				=> 'Select a forum',	'SEND_EMAIL'				=> 'E-mail',				// Used for submit buttons	'SEND_EMAIL_USER'			=> 'E-mail',				// Used as: {L_SEND_EMAIL_USER} {USERNAME} -> E-mail UserX	'SEND_PRIVATE_MESSAGE'		=> 'Send private message',	'SETTINGS'					=> 'Settings',	'SIGNATURE'					=> 'Signature',	'SKIP'						=> 'Skip to content',	'SMTP_NO_AUTH_SUPPORT'		=> 'SMTP server does not support authentication.',	'SORRY_AUTH_READ'			=> 'You are not authorised to read this forum.',	'SORRY_AUTH_VIEW_ATTACH'	=> 'You are not authorised to download this attachment.',	'SORT_BY'					=> 'Sort by',	'SORT_JOINED'				=> 'Joined date',	'SORT_LOCATION'				=> 'Location',	'SORT_RANK'					=> 'Rank',	'SORT_POSTS'				=> 'Posts',	'SORT_TOPIC_TITLE'			=> 'Topic title',	'SORT_USERNAME'				=> 'Username',	'SPLIT_TOPIC'				=> 'Split topic',	'SQL_ERROR_OCCURRED'		=> 'An SQL error occurred while fetching this page. Please contact the %sBoard Administrator%s if this problem persists.',	'STATISTICS'				=> 'Statistics',	'START_WATCHING_FORUM'		=> 'Subscribe forum',	'START_WATCHING_TOPIC'		=> 'Subscribe topic',	'STOP_WATCHING_FORUM'		=> 'Unsubscribe forum',	'STOP_WATCHING_TOPIC'		=> 'Unsubscribe topic',	'SUBFORUM'					=> 'Subforum',	'SUBFORUMS'					=> 'Subforums',	'SUBJECT'					=> 'Subject',	'SUBMIT'					=> 'Submit',	'TERMS_USE'			=> 'Terms of use',	'TEST_CONNECTION'	=> 'Test connection',	'THE_TEAM'			=> 'The team',	'TIME'				=> 'Time',		'TOO_LARGE'						=> 'The value you entered is too large.',	'TOO_LARGE_MAX_RECIPIENTS'		=> 'The value of <strong>Maximum number of allowed recipients per private message</strong> setting you entered is too large.',	'TOO_LONG'						=> 'The value you entered is too long.',	'TOO_LONG_AIM'					=> 'The screenname you entered is too long.',	'TOO_LONG_CONFIRM_CODE'			=> 'The confirm code you entered is too long.',	'TOO_LONG_DATEFORMAT'			=> 'The date format you entered is too long.',	'TOO_LONG_ICQ'					=> 'The ICQ number you entered is too long.',	'TOO_LONG_INTERESTS'			=> 'The interests you entered is too long.',	'TOO_LONG_JABBER'				=> 'The Jabber account name you entered is too long.',	'TOO_LONG_LOCATION'				=> 'The location you entered is too long.',	'TOO_LONG_MSN'					=> 'The MSNM/WLM name you entered is too long.',	'TOO_LONG_NEW_PASSWORD'			=> 'The password you entered is too long.',	'TOO_LONG_OCCUPATION'			=> 'The occupation you entered is too long.',	'TOO_LONG_PASSWORD_CONFIRM'		=> 'The password confirmation you entered is too long.',	'TOO_LONG_USER_PASSWORD'		=> 'The password you entered is too long.',	'TOO_LONG_USERNAME'				=> 'The username you entered is too long.',	'TOO_LONG_EMAIL'				=> 'The e-mail address you entered is too long.',	'TOO_LONG_EMAIL_CONFIRM'		=> 'The e-mail address confirmation you entered is too long.',	'TOO_LONG_WEBSITE'				=> 'The website address you entered is too long.',	'TOO_LONG_YIM'					=> 'The Yahoo! Messenger name you entered is too long.',	'TOO_MANY_VOTE_OPTIONS'			=> 'You have tried to vote for too many options.',	'TOO_SHORT'						=> 'The value you entered is too short.',	'TOO_SHORT_AIM'					=> 'The screenname you entered is too short.',	'TOO_SHORT_CONFIRM_CODE'		=> 'The confirm code you entered is too short.',	'TOO_SHORT_DATEFORMAT'			=> 'The date format you entered is too short.',	'TOO_SHORT_ICQ'					=> 'The ICQ number you entered is too short.',	'TOO_SHORT_INTERESTS'			=> 'The interests you entered is too short.',	'TOO_SHORT_JABBER'				=> 'The Jabber account name you entered is too short.',	'TOO_SHORT_LOCATION'			=> 'The location you entered is too short.',	'TOO_SHORT_MSN'					=> 'The MSNM/WLM name you entered is too short.',	'TOO_SHORT_NEW_PASSWORD'		=> 'The password you entered is too short.',	'TOO_SHORT_OCCUPATION'			=> 'The occupation you entered is too short.',	'TOO_SHORT_PASSWORD_CONFIRM'	=> 'The password confirmation you entered is too short.',	'TOO_SHORT_USER_PASSWORD'		=> 'The password you entered is too short.',	'TOO_SHORT_USERNAME'			=> 'The username you entered is too short.',	'TOO_SHORT_EMAIL'				=> 'The e-mail address you entered is too short.',	'TOO_SHORT_EMAIL_CONFIRM'		=> 'The e-mail address confirmation you entered is too short.',	'TOO_SHORT_WEBSITE'				=> 'The website address you entered is too short.',	'TOO_SHORT_YIM'					=> 'The Yahoo! Messenger name you entered is too short.',		'TOO_SMALL'						=> 'The value you entered is too small.',	'TOO_SMALL_MAX_RECIPIENTS'		=> 'The value of <strong>Maximum number of allowed recipients per private message</strong> setting you entered is too small.',	'TOPIC'				=> 'Topic',	'TOPICS'			=> 'Topics',	'TOPICS_UNAPPROVED'	=> 'At least one topic in this forum has not been approved.',	'TOPIC_ICON'		=> 'Topic icon',	'TOPIC_LOCKED'		=> 'This topic is locked, you cannot edit posts or make further replies.',	'TOPIC_LOCKED_SHORT'=> 'Topic locked',	'TOPIC_MOVED'		=> 'Moved topic',	'TOPIC_REVIEW'		=> 'Topic review',	'TOPIC_TITLE'		=> 'Topic title',	'TOPIC_UNAPPROVED'	=> 'This topic has not been approved',	'TOTAL_ATTACHMENTS'	=> 'Attachment(s)',	'TOTAL_LOG'			=> '1 log',	'TOTAL_LOGS'		=> '%d logs',	'TOTAL_NO_PM'		=> '0 private messages in total',	'TOTAL_PM'			=> '1 private message in total',	'TOTAL_PMS'			=> '%d private messages in total',	'TOTAL_POSTS'		=> 'Total posts',	'TOTAL_POSTS_OTHER'	=> 'Total posts <strong>%d</strong>',	'TOTAL_POSTS_ZERO'	=> 'Total posts <strong>0</strong>',	'TOPIC_REPORTED'	=> 'This topic has been reported',	'TOTAL_TOPICS_OTHER'=> 'Total topics <strong>%d</strong>',	'TOTAL_TOPICS_ZERO'	=> 'Total topics <strong>0</strong>',	'TOTAL_USERS_OTHER'	=> 'Total members <strong>%d</strong>',	'TOTAL_USERS_ZERO'	=> 'Total members <strong>0</strong>',	'TRACKED_PHP_ERROR'	=> 'Tracked PHP errors: %s',	'UNABLE_GET_IMAGE_SIZE'	=> 'It was not possible to determine the dimensions of the image.',	'UNABLE_TO_DELIVER_FILE'=> 'Unable to deliver file.',	'UNKNOWN_BROWSER'		=> 'Unknown browser',	'UNMARK_ALL'			=> 'Unmark all',	'UNREAD_MESSAGES'		=> 'Unread messages',	'UNREAD_PM'				=> '<strong>%d</strong> unread message',	'UNREAD_PMS'			=> '<strong>%d</strong> unread messages',	'UNREAD_POST'			=> 'Unread post',	'UNREAD_POSTS'			=> 'Unread posts',	'UNWATCH_FORUM_CONFIRM'		=> 'Are you sure you wish to unsubscribe from this forum?',	'UNWATCH_FORUM_DETAILED'	=> 'Are you sure you wish to unsubscribe from the forum %s?',	'UNWATCH_TOPIC_CONFIRM'		=> 'Are you sure you wish to unsubscribe from this topic?',	'UNWATCH_TOPIC_DETAILED'	=> 'Are you sure you wish to unsubscribe from the topic %s?',	'UNWATCHED_FORUMS'			=> 'You are no longer subscribed to the selected forums.',	'UNWATCHED_TOPICS'			=> 'You are no longer subscribed to the selected topics.',	'UNWATCHED_FORUMS_TOPICS'	=> 'You are no longer subscribed to the selected entries.',	'UPDATE'				=> 'Update',	'UPLOAD_IN_PROGRESS'	=> 'The upload is currently in progress.',	'URL_REDIRECT'			=> 'If your browser does not support meta redirection %splease click HERE to be redirected%s.',	'USERGROUPS'			=> 'Groups',	'USERNAME'				=> 'Username',	'USERNAMES'				=> 'Usernames',	'USER_AVATAR'			=> 'User avatar',	'USER_CANNOT_READ'		=> 'You cannot read posts in this forum.',	'USER_POST'				=> '%d Post',	'USER_POSTS'			=> '%d Posts',	'USERS'					=> 'Users',	'USE_PERMISSIONS'		=> 'Test out users permissions',	'USER_NEW_PERMISSION_DISALLOWED'	=> 'We are sorry, but you are not authorised to use this feature. You may have just registered here and may need to participate more to be able to use this feature.',	'VARIANT_DATE_SEPARATOR'	=> ' / ',	// Used in date format dropdown, eg: "Today, 13:37 / 01 Jan 2007, 13:37" ... to join a relative date with calendar date	'VIEWED'					=> 'Viewed',	'VIEWING_FAQ'				=> 'Viewing FAQ',	'VIEWING_MEMBERS'			=> 'Viewing member details',	'VIEWING_ONLINE'			=> 'Viewing who is online',	'VIEWING_MCP'				=> 'Viewing moderator control panel',	'VIEWING_MEMBER_PROFILE'	=> 'Viewing member profile',	'VIEWING_PRIVATE_MESSAGES'	=> 'Viewing private messages',	'VIEWING_REGISTER'			=> 'Registering account',	'VIEWING_UCP'				=> 'Viewing user control panel',	'VIEWS'						=> 'Views',	'VIEW_BOOKMARKS'			=> 'View bookmarks',	'VIEW_FORUM_LOGS'			=> 'View Logs',	'VIEW_LATEST_POST'			=> 'View the latest post',	'VIEW_NEWEST_POST'			=> 'View first unread post',	'VIEW_NOTES'				=> 'View user notes',	'VIEW_ONLINE_TIME'			=> 'based on users active over the past %d minute',	'VIEW_ONLINE_TIMES'			=> 'based on users active over the past %d minutes',	'VIEW_TOPIC'				=> 'View topic',	'VIEW_TOPIC_ANNOUNCEMENT'	=> 'Announcement: ',	'VIEW_TOPIC_GLOBAL'			=> 'Global Announcement: ',	'VIEW_TOPIC_LOCKED'			=> 'Locked: ',	'VIEW_TOPIC_LOGS'			=> 'View logs',	'VIEW_TOPIC_MOVED'			=> 'Moved: ',	'VIEW_TOPIC_POLL'			=> 'Poll: ',	'VIEW_TOPIC_STICKY'			=> 'Sticky: ',	'VISIT_WEBSITE'				=> 'Visit website',	'WARNINGS'			=> 'Warnings',	'WARN_USER'			=> 'Warn user',	'WATCH_FORUM_CONFIRM'	=> 'Are you sure you wish to subscribe to this forum?',	'WATCH_FORUM_DETAILED'	=> 'Are you sure you wish to subscribe to the forum %s?',	'WATCH_TOPIC_CONFIRM'	=> 'Are you sure you wish to subscribe to this topic?',	'WATCH_TOPIC_DETAILED'	=> 'Are you sure you wish to subscribe to the topic %s?',	'WELCOME_SUBJECT'	=> 'Welcome to %s forums',	'WEBSITE'			=> 'Website',	'WHOIS'				=> 'Whois',	'WHO_IS_ONLINE'		=> 'Who is online',	'WRONG_PASSWORD'	=> 'You entered an incorrect password.',	'WRONG_DATA_ICQ'			=> 'The number you entered is not a valid ICQ number.',	'WRONG_DATA_JABBER'			=> 'The name you entered is not a valid Jabber account name.',	'WRONG_DATA_LANG'			=> 'The language you specified is not valid.',	'WRONG_DATA_WEBSITE'		=> 'The website address has to be a valid URL, including the protocol. For example http://www.example.com/.',	'WROTE'						=> 'wrote',	'YEAR'				=> 'Year',	'YEAR_MONTH_DAY'	=> '(YYYY-MM-DD)',	'YES'				=> 'Yes',	'YIM'				=> 'YIM',	'YOU_LAST_VISIT'	=> 'Last visit was: %s',	'YOU_NEW_PM'		=> 'A new private message is waiting for you in your Inbox.',	'YOU_NEW_PMS'		=> 'New private messages are waiting for you in your Inbox.',	'YOU_NO_NEW_PM'		=> 'No new private messages are waiting for you.',	'datetime'			=> array(		'TODAY'		=> 'Today',		'TOMORROW'	=> 'Tomorrow',		'YESTERDAY'	=> 'Yesterday',		'AGO'		=> array(			0		=> 'less than a minute ago',			1		=> '%d minute ago',			2		=> '%d minutes ago',			60		=> '1 hour ago',		),		'Sunday'	=> 'Sunday',		'Monday'	=> 'Monday',		'Tuesday'	=> 'Tuesday',		'Wednesday'	=> 'Wednesday',		'Thursday'	=> 'Thursday',		'Friday'	=> 'Friday',		'Saturday'	=> 'Saturday',		'Sun'		=> 'Sun',		'Mon'		=> 'Mon',		'Tue'		=> 'Tue',		'Wed'		=> 'Wed',		'Thu'		=> 'Thu',		'Fri'		=> 'Fri',		'Sat'		=> 'Sat',		'January'	=> 'January',		'February'	=> 'February',		'March'		=> 'March',		'April'		=> 'April',		'May'		=> 'May',		'June'		=> 'June',		'July'		=> 'July',		'August'	=> 'August',		'September' => 'September',		'October'	=> 'October',		'November'	=> 'November',		'December'	=> 'December',		'Jan'		=> 'Jan',		'Feb'		=> 'Feb',		'Mar'		=> 'Mar',		'Apr'		=> 'Apr',		'May_short'	=> 'May',	// Short representation of "May". May_short used because in English the short and long date are the same for May.		'Jun'		=> 'Jun',		'Jul'		=> 'Jul',		'Aug'		=> 'Aug',		'Sep'		=> 'Sep',		'Oct'		=> 'Oct',		'Nov'		=> 'Nov',		'Dec'		=> 'Dec',	),	'tz'				=> array(		'-12'	=> 'UTC - 12 hours',		'-11'	=> 'UTC - 11 hours',		'-10'	=> 'UTC - 10 hours',		'-9.5'	=> 'UTC - 9:30 hours',		'-9'	=> 'UTC - 9 hours',		'-8'	=> 'UTC - 8 hours',		'-7'	=> 'UTC - 7 hours',		'-6'	=> 'UTC - 6 hours',		'-5'	=> 'UTC - 5 hours',		'-4.5'	=> 'UTC - 4:30 hours',		'-4'	=> 'UTC - 4 hours',		'-3.5'	=> 'UTC - 3:30 hours',		'-3'	=> 'UTC - 3 hours',		'-2'	=> 'UTC - 2 hours',		'-1'	=> 'UTC - 1 hour',		'0'		=> 'UTC',		'1'		=> 'UTC + 1 hour',		'2'		=> 'UTC + 2 hours',		'3'		=> 'UTC + 3 hours',		'3.5'	=> 'UTC + 3:30 hours',		'4'		=> 'UTC + 4 hours',		'4.5'	=> 'UTC + 4:30 hours',		'5'		=> 'UTC + 5 hours',		'5.5'	=> 'UTC + 5:30 hours',		'5.75'	=> 'UTC + 5:45 hours',		'6'		=> 'UTC + 6 hours',		'6.5'	=> 'UTC + 6:30 hours',		'7'		=> 'UTC + 7 hours',		'8'		=> 'UTC + 8 hours',		'8.75'	=> 'UTC + 8:45 hours',		'9'		=> 'UTC + 9 hours',		'9.5'	=> 'UTC + 9:30 hours',		'10'	=> 'UTC + 10 hours',		'10.5'	=> 'UTC + 10:30 hours',		'11'	=> 'UTC + 11 hours',		'11.5'	=> 'UTC + 11:30 hours',		'12'	=> 'UTC + 12 hours',		'12.75'	=> 'UTC + 12:45 hours',		'13'	=> 'UTC + 13 hours',		'14'	=> 'UTC + 14 hours',		'dst'	=> '[ <abbr title="Daylight Saving Time">DST</abbr> ]',	),	'tz_zones'	=> array(		'-12'	=> '[UTC - 12] Baker Island Time',		'-11'	=> '[UTC - 11] Niue Time, Samoa Standard Time',		'-10'	=> '[UTC - 10] Hawaii-Aleutian Standard Time, Cook Island Time',		'-9.5'	=> '[UTC - 9:30] Marquesas Islands Time',		'-9'	=> '[UTC - 9] Alaska Standard Time, Gambier Island Time',		'-8'	=> '[UTC - 8] Pacific Standard Time',		'-7'	=> '[UTC - 7] Mountain Standard Time',		'-6'	=> '[UTC - 6] Central Standard Time',		'-5'	=> '[UTC - 5] Eastern Standard Time',		'-4.5'	=> '[UTC - 4:30] Venezuelan Standard Time',		'-4'	=> '[UTC - 4] Atlantic Standard Time',		'-3.5'	=> '[UTC - 3:30] Newfoundland Standard Time',		'-3'	=> '[UTC - 3] Amazon Standard Time, Central Greenland Time',		'-2'	=> '[UTC - 2] Fernando de Noronha Time, South Georgia &amp; the South Sandwich Islands Time',		'-1'	=> '[UTC - 1] Azores Standard Time, Cape Verde Time, Eastern Greenland Time',		'0'		=> '[UTC] Western European Time, Greenwich Mean Time',		'1'		=> '[UTC + 1] Central European Time, West African Time',		'2'		=> '[UTC + 2] Eastern European Time, Central African Time',		'3'		=> '[UTC + 3] Moscow Standard Time, Eastern African Time',		'3.5'	=> '[UTC + 3:30] Iran Standard Time',		'4'		=> '[UTC + 4] Gulf Standard Time, Samara Standard Time',		'4.5'	=> '[UTC + 4:30] Afghanistan Time',		'5'		=> '[UTC + 5] Pakistan Standard Time, Yekaterinburg Standard Time',		'5.5'	=> '[UTC + 5:30] Indian Standard Time, Sri Lanka Time',		'5.75'	=> '[UTC + 5:45] Nepal Time',		'6'		=> '[UTC + 6] Bangladesh Time, Bhutan Time, Novosibirsk Standard Time',		'6.5'	=> '[UTC + 6:30] Cocos Islands Time, Myanmar Time',		'7'		=> '[UTC + 7] Indochina Time, Krasnoyarsk Standard Time',		'8'		=> '[UTC + 8] Chinese Standard Time, Australian Western Standard Time, Irkutsk Standard Time',		'8.75'	=> '[UTC + 8:45] Southeastern Western Australia Standard Time',		'9'		=> '[UTC + 9] Japan Standard Time, Korea Standard Time, Chita Standard Time',		'9.5'	=> '[UTC + 9:30] Australian Central Standard Time',		'10'	=> '[UTC + 10] Australian Eastern Standard Time, Vladivostok Standard Time',		'10.5'	=> '[UTC + 10:30] Lord Howe Standard Time',		'11'	=> '[UTC + 11] Solomon Island Time, Magadan Standard Time',		'11.5'	=> '[UTC + 11:30] Norfolk Island Time',		'12'	=> '[UTC + 12] New Zealand Time, Fiji Time, Kamchatka Standard Time',		'12.75'	=> '[UTC + 12:45] Chatham Islands Time',		'13'	=> '[UTC + 13] Tonga Time, Phoenix Islands Time',		'14'	=> '[UTC + 14] Line Island Time',	),	// The value is only an example and will get replaced by the current time on view	'dateformats'	=> array(		'd M Y, H:i'			=> '01 Jan 2007, 13:37',		'd M Y H:i'				=> '01 Jan 2007 13:37',		'M jS, \'y, H:i'		=> 'Jan 1st, \'07, 13:37',		'D M d, Y g:i a'		=> 'Mon Jan 01, 2007 1:37 pm',		'F jS, Y, g:i a'		=> 'January 1st, 2007, 1:37 pm',		'|d M Y|, H:i'			=> 'Today, 13:37 / 01 Jan 2007, 13:37',		'|F jS, Y|, g:i a'		=> 'Today, 1:37 pm / January 1st, 2007, 1:37 pm'	),	// The default dateformat which will be used on new installs in this language	// Translators should change this if a the usual date format is different	'default_dateformat'	=> 'D M d, Y g:i a', // Mon Jan 01, 2007 1:37 pm));?>
